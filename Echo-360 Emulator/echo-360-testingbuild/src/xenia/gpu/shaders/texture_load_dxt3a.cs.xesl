/**
 ******************************************************************************
 * Xenia : Xbox 360 Emulator Research Project                                 *
 ******************************************************************************
 * Copyright 2022 Ben Vanik. All rights reserved.                             *
 * Released under the BSD license - see LICENSE in the root for more details. *
 ******************************************************************************
 */

#include "pixel_formats.xesli"
#include "texture_load.xesli"

xesl_writeTypedStorageBuffer_declare(xesl_uint4, xe_texture_load_dest, set=0,
                                     binding=0, u0, space0)
xesl_typedStorageBuffer_declare(xesl_uint4, xe_texture_load_source, set=1,
                                binding=0, t0, space0)
xesl_entry_bindings_begin_compute
  XE_TEXTURE_LOAD_CONSTANT_BUFFER_BINDING
  xesl_entry_binding_next
  xesl_writeTypedStorageBuffer_binding(xesl_uint4, xe_texture_load_dest,
                                       buffer(1))
  xesl_entry_binding_next
  xesl_typedStorageBuffer_binding(xesl_uint4, xe_texture_load_source, buffer(2))
xesl_entry_bindings_end_inputs_begin_compute
  xesl_entry_input_globalInvocationID
xesl_entry_inputs_end_code_begin_compute
  // 1 thread = 4 DXT3A blocks to 16x4 R8 texels (no need to convert to DXT3
  // because the overhead is the same, 2x, but the size must be 4-aligned on
  // Direct3D 12).
  XeTextureLoadInfo load_info = XeTextureLoadGetInfo(
      xesl_function_call_constantBuffer(xe_texture_load_constants));
  xesl_uint3 block_index = xesl_GlobalInvocationID << xesl_uint3(2u, 0u, 0u);
  xesl_dont_flatten
  if (any(xesl_greaterThanEqual(block_index.xy, load_info.size_blocks.xy))) {
    return;
  }
  xesl_uint3 texel_index_host = block_index << xesl_uint3(2u, 2u, 0u);
  uint block_offset_host = uint(
      (XeTextureHostLinearOffset(xesl_int3(texel_index_host),
                                 load_info.host_pitch, load_info.height_texels,
                                 1u) +
       load_info.host_offset) >> 4u);
  uint elements_pitch_host = load_info.host_pitch >> 4u;
  uint block_offset_guest =
      XeTextureLoadGuestBlockOffset(load_info, block_index, 8u, 3u) >> 4u;
  xesl_uint4 blocks_01 = XeEndianSwap32(
      xesl_typedStorageBufferLoad(xe_texture_load_source, block_offset_guest),
      load_info.endian_32);
  // Odd 2 blocks = even 2 blocks + 32 bytes when tiled.
  block_offset_guest += load_info.is_tiled ? 2u : 1u;
  xesl_uint4 blocks_23 = XeEndianSwap32(
      xesl_typedStorageBufferLoad(xe_texture_load_source, block_offset_guest),
      load_info.endian_32);
  xesl_typedStorageBufferStore(
      xe_texture_load_dest, block_offset_host,
      XeDXT3FourBlocksRowToA8(xesl_uint4(blocks_01.xz, blocks_23.xz)));
  xesl_dont_flatten if (++texel_index_host.y < load_info.height_texels) {
    block_offset_host += elements_pitch_host;
    xesl_typedStorageBufferStore(
        xe_texture_load_dest, block_offset_host,
        XeDXT3FourBlocksRowToA8(xesl_uint4(blocks_01.xz, blocks_23.xz) >> 16u));
    xesl_dont_flatten if (++texel_index_host.y < load_info.height_texels) {
      block_offset_host += elements_pitch_host;
      xesl_typedStorageBufferStore(
          xe_texture_load_dest, block_offset_host,
          XeDXT3FourBlocksRowToA8(xesl_uint4(blocks_01.yw, blocks_23.yw)));
      xesl_dont_flatten if (++texel_index_host.y < load_info.height_texels) {
        block_offset_host += elements_pitch_host;
        xesl_typedStorageBufferStore(
            xe_texture_load_dest, block_offset_host,
            XeDXT3FourBlocksRowToA8(
                xesl_uint4(blocks_01.yw, blocks_23.yw) >> 16u));
      }
    }
  }
xesl_entry_code_end_compute
