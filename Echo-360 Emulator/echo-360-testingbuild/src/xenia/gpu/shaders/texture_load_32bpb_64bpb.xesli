/**
 ******************************************************************************
 * Xenia : Xbox 360 Emulator Research Project                                 *
 ******************************************************************************
 * Copyright 2022 Ben Vanik. All rights reserved.                             *
 * Released under the BSD license - see LICENSE in the root for more details. *
 ******************************************************************************
 */

#include "texture_load.xesli"

xesl_writeTypedStorageBuffer_declare(xesl_uint4, xe_texture_load_dest, set=0,
                                     binding=0, u0, space0)
xesl_typedStorageBuffer_declare(xesl_uint4, xe_texture_load_source, set=1,
                                binding=0, t0, space0)
xesl_entry_bindings_begin_compute
  XE_TEXTURE_LOAD_CONSTANT_BUFFER_BINDING
  xesl_entry_binding_next
  xesl_writeTypedStorageBuffer_binding(xesl_uint4, xe_texture_load_dest,
                                       buffer(1))
  xesl_entry_binding_next
  xesl_typedStorageBuffer_binding(xesl_uint4, xe_texture_load_source, buffer(2))
xesl_entry_bindings_end_inputs_begin_compute
  xesl_entry_input_globalInvocationID
xesl_entry_inputs_end_code_begin_compute
  // 1 thread = 8 packed 32-bit texels with the externally provided uint4 -> 2x
  // uint4 function (XE_TEXTURE_LOAD_32BPB_TO_64BPB) for converting to 64bpb -
  // useful for expansion of hendeca (10:11:11 or 11:11:10) to unorm16/snorm16.
  XeTextureLoadInfo load_info = XeTextureLoadGetInfo(
      xesl_function_call_constantBuffer(xe_texture_load_constants));
  xesl_uint3 block_index = xesl_GlobalInvocationID << xesl_uint3(3u, 0u, 0u);
  xesl_dont_flatten
  if (any(xesl_greaterThanEqual(block_index.xy, load_info.size_blocks.xy))) {
    return;
  }
  uint block_offset_host = uint(
      (XeTextureHostLinearOffset(xesl_int3(block_index), load_info.host_pitch,
                                 load_info.size_blocks.y, 8u) +
       load_info.host_offset) >> 4u);
  uint block_offset_guest =
      XeTextureLoadGuestBlockOffset(load_info, block_index, 4u, 2u) >> 4u;
  xesl_uint4 guest_blocks = XeEndianSwap32(
      xesl_typedStorageBufferLoad(xe_texture_load_source, block_offset_guest),
      load_info.endian_32);
  xesl_uint4 block_0, block_1;
  XE_TEXTURE_LOAD_32BPB_TO_64BPB(guest_blocks, block_0, block_1);
  xesl_typedStorageBufferStore(xe_texture_load_dest, block_offset_host,
                               block_0);
  xesl_typedStorageBufferStore(xe_texture_load_dest, block_offset_host + 1u,
                               block_1);
  block_offset_guest +=
      XeTextureLoadRightConsecutiveBlocksOffset(load_info, block_index.x, 2u) >>
      4u;
  guest_blocks = XeEndianSwap32(
      xesl_typedStorageBufferLoad(xe_texture_load_source, block_offset_guest),
      load_info.endian_32);
  XE_TEXTURE_LOAD_32BPB_TO_64BPB(guest_blocks, block_0, block_1);
  xesl_typedStorageBufferStore(xe_texture_load_dest, block_offset_host + 2u,
                               block_0);
  xesl_typedStorageBufferStore(xe_texture_load_dest, block_offset_host + 3u,
                               block_1);
xesl_entry_code_end_compute
