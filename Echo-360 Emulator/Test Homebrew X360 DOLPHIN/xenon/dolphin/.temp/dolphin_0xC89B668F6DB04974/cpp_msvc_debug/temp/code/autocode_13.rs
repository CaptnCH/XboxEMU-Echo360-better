#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 820E01ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E01AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E01AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E01AC);
		  /* 820E01ACh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820E01ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E01ACh case    0:*/		return 0x820E01B0;
		  /* 820E01B0h */ case    1:  		/* lis R10, -32254 */
		/* 820E01B0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E01B0h case    1:*/		return 0x820E01B4;
		  /* 820E01B4h */ case    2:  		/* addi R5, R1, 240 */
		/* 820E01B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820E01B4h case    2:*/		return 0x820E01B8;
		  /* 820E01B8h */ case    3:  		/* addi R4, R10, -26852 */
		/* 820E01B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF971C);
		/* 820E01B8h case    3:*/		return 0x820E01BC;
		  /* 820E01BCh */ case    4:  		/* mr R3, R31 */
		/* 820E01BCh case    4:*/		regs.R3 = regs.R31;
		/* 820E01BCh case    4:*/		return 0x820E01C0;
		  /* 820E01C0h */ case    5:  		/* lwz R11, <#[R11 + 452]> */
		/* 820E01C0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001C4) );
		/* 820E01C0h case    5:*/		return 0x820E01C4;
		  /* 820E01C4h */ case    6:  		/* mtspr CTR, R11 */
		/* 820E01C4h case    6:*/		regs.CTR = regs.R11;
		/* 820E01C4h case    6:*/		return 0x820E01C8;
		  /* 820E01C8h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 820E01C8h case    7:*/		if ( 1 ) { regs.LR = 0x820E01CC; return (uint32)regs.CTR; }
		/* 820E01C8h case    7:*/		return 0x820E01CC;
		  /* 820E01CCh */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E01CCh case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E01CCh case    8:*/		return 0x820E01D0;
		  /* 820E01D0h */ case    9:  		/* bc 12, CR0_LT, 160 */
		/* 820E01D0h case    9:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E01D0h case    9:*/		return 0x820E01D4;
		  /* 820E01D4h */ case   10:  		/* lis R11, -32254 */
		/* 820E01D4h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E01D4h case   10:*/		return 0x820E01D8;
		  /* 820E01D8h */ case   11:  		/* mr R3, R31 */
		/* 820E01D8h case   11:*/		regs.R3 = regs.R31;
		/* 820E01D8h case   11:*/		return 0x820E01DC;
		  /* 820E01DCh */ case   12:  		/* addi R4, R11, -30604 */
		/* 820E01DCh case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 820E01DCh case   12:*/		return 0x820E01E0;
		  /* 820E01E0h */ case   13:  		/* bl -24840 */
		/* 820E01E0h case   13:*/		regs.LR = 0x820E01E4; return 0x820DA0D8;
		/* 820E01E0h case   13:*/		return 0x820E01E4;
		  /* 820E01E4h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E01E4h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E01E4h case   14:*/		return 0x820E01E8;
		  /* 820E01E8h */ case   15:  		/* bc 12, CR0_LT, 136 */
		/* 820E01E8h case   15:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E01E8h case   15:*/		return 0x820E01EC;
		  /* 820E01ECh */ case   16:  		/* lwz R11, <#[R1 + 112]> */
		/* 820E01ECh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820E01ECh case   16:*/		return 0x820E01F0;
		  /* 820E01F0h */ case   17:  		/* rlwinm R11, R11, 0, 12, 15 */
		/* 820E01F0h case   17:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R11);
		/* 820E01F0h case   17:*/		return 0x820E01F4;
		  /* 820E01F4h */ case   18:  		/* cmplw CR6, R11, R30 */
		/* 820E01F4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820E01F4h case   18:*/		return 0x820E01F8;
		  /* 820E01F8h */ case   19:  		/* bc 12, CR6_EQ, 116 */
		/* 820E01F8h case   19:*/		if ( regs.CR[6].eq ) { return 0x820E026C;  }
		/* 820E01F8h case   19:*/		return 0x820E01FC;
		  /* 820E01FCh */ case   20:  		/* mr R3, R31 */
		/* 820E01FCh case   20:*/		regs.R3 = regs.R31;
		/* 820E01FCh case   20:*/		return 0x820E0200;
		  /* 820E0200h */ case   21:  		/* bl -24656 */
		/* 820E0200h case   21:*/		regs.LR = 0x820E0204; return 0x820DA1B0;
		/* 820E0200h case   21:*/		return 0x820E0204;
		  /* 820E0204h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820E0204h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0204h case   22:*/		return 0x820E0208;
		  /* 820E0208h */ case   23:  		/* bc 12, CR0_LT, 104 */
		/* 820E0208h case   23:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0208h case   23:*/		return 0x820E020C;
		  /* 820E020Ch */ case   24:  		/* lis R11, -32254 */
		/* 820E020Ch case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E020Ch case   24:*/		return 0x820E0210;
		  /* 820E0210h */ case   25:  		/* addi R5, R1, 176 */
		/* 820E0210h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820E0210h case   25:*/		return 0x820E0214;
		  /* 820E0214h */ case   26:  		/* addi R4, R11, -30692 */
		/* 820E0214h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF881C);
		/* 820E0214h case   26:*/		return 0x820E0218;
		  /* 820E0218h */ case   27:  		/* mr R3, R31 */
		/* 820E0218h case   27:*/		regs.R3 = regs.R31;
		/* 820E0218h case   27:*/		return 0x820E021C;
		  /* 820E021Ch */ case   28:  		/* bl -24900 */
		/* 820E021Ch case   28:*/		regs.LR = 0x820E0220; return 0x820DA0D8;
		/* 820E021Ch case   28:*/		return 0x820E0220;
		  /* 820E0220h */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 820E0220h case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0220h case   29:*/		return 0x820E0224;
		  /* 820E0224h */ case   30:  		/* bc 12, CR0_LT, 76 */
		/* 820E0224h case   30:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0224h case   30:*/		return 0x820E0228;
		  /* 820E0228h */ case   31:  		/* lwz R11, <#[R31]> */
		/* 820E0228h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E0228h case   31:*/		return 0x820E022C;
		  /* 820E022Ch */ case   32:  		/* lis R10, -32254 */
		/* 820E022Ch case   32:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E022Ch case   32:*/		return 0x820E0230;
		  /* 820E0230h */ case   33:  		/* addi R5, R1, 240 */
		/* 820E0230h case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820E0230h case   33:*/		return 0x820E0234;
		  /* 820E0234h */ case   34:  		/* addi R6, R10, -30684 */
		/* 820E0234h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8824);
		/* 820E0234h case   34:*/		return 0x820E0238;
		  /* 820E0238h */ case   35:  		/* addi R4, R1, 176 */
		/* 820E0238h case   35:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 820E0238h case   35:*/		return 0x820E023C;
		  /* 820E023Ch */ case   36:  		/* mr R3, R31 */
		/* 820E023Ch case   36:*/		regs.R3 = regs.R31;
		/* 820E023Ch case   36:*/		return 0x820E0240;
		  /* 820E0240h */ case   37:  		/* lwz R11, <#[R11 + 400]> */
		/* 820E0240h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000190) );
		/* 820E0240h case   37:*/		return 0x820E0244;
		  /* 820E0244h */ case   38:  		/* mtspr CTR, R11 */
		/* 820E0244h case   38:*/		regs.CTR = regs.R11;
		/* 820E0244h case   38:*/		return 0x820E0248;
		  /* 820E0248h */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 820E0248h case   39:*/		if ( 1 ) { regs.LR = 0x820E024C; return (uint32)regs.CTR; }
		/* 820E0248h case   39:*/		return 0x820E024C;
		  /* 820E024Ch */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 820E024Ch case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E024Ch case   40:*/		return 0x820E0250;
		  /* 820E0250h */ case   41:  		/* bc 12, CR0_LT, 32 */
		/* 820E0250h case   41:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0250h case   41:*/		return 0x820E0254;
		  /* 820E0254h */ case   42:  		/* lis R11, -32254 */
		/* 820E0254h case   42:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0254h case   42:*/		return 0x820E0258;
		  /* 820E0258h */ case   43:  		/* addi R4, R11, -30768 */
		/* 820E0258h case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820E0258h case   43:*/		return 0x820E025C;
		  /* 820E025Ch */ case   44:  		/* mr R3, R31 */
		/* 820E025Ch case   44:*/		regs.R3 = regs.R31;
		/* 820E025Ch case   44:*/		return 0x820E0260;
		  /* 820E0260h */ case   45:  		/* bl -24968 */
		/* 820E0260h case   45:*/		regs.LR = 0x820E0264; return 0x820DA0D8;
		/* 820E0260h case   45:*/		return 0x820E0264;
		  /* 820E0264h */ case   46:  		/* cmpwi CR0, R3, 0 */
		/* 820E0264h case   46:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0264h case   46:*/		return 0x820E0268;
		  /* 820E0268h */ case   47:  		/* bc 12, CR0_LT, 8 */
		/* 820E0268h case   47:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0268h case   47:*/		return 0x820E026C;
	}
	return 0x820E026C;
} // Block from 820E01ACh-820E026Ch (48 instructions)

//////////////////////////////////////////////////////
// Block at 820E026Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E026C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E026C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E026C);
		  /* 820E026Ch */ case    0:  		/* li R3, 0 */
		/* 820E026Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E026Ch case    0:*/		return 0x820E0270;
	}
	return 0x820E0270;
} // Block from 820E026Ch-820E0270h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E0270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0270);
		  /* 820E0270h */ case    0:  		/* addi R1, R1, 336 */
		/* 820E0270h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 820E0270h case    0:*/		return 0x820E0274;
		  /* 820E0274h */ case    1:  		/* b -323544 */
		/* 820E0274h case    1:*/		return 0x8209129C;
		/* 820E0274h case    1:*/		return 0x820E0278;
	}
	return 0x820E0278;
} // Block from 820E0270h-820E0278h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0278);
		  /* 820E0278h */ case    0:  		/* bc 4, CR6_EQ, -12 */
		/* 820E0278h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820E026C;  }
		/* 820E0278h case    0:*/		return 0x820E027C;
	}
	return 0x820E027C;
} // Block from 820E0278h-820E027Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E027Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E027C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E027C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E027C);
		  /* 820E027Ch */ case    0:  		/* mr R3, R31 */
		/* 820E027Ch case    0:*/		regs.R3 = regs.R31;
		/* 820E027Ch case    0:*/		return 0x820E0280;
		  /* 820E0280h */ case    1:  		/* bl -24784 */
		/* 820E0280h case    1:*/		regs.LR = 0x820E0284; return 0x820DA1B0;
		/* 820E0280h case    1:*/		return 0x820E0284;
		  /* 820E0284h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820E0284h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0284h case    2:*/		return 0x820E0288;
		  /* 820E0288h */ case    3:  		/* bc 12, CR0_LT, -24 */
		/* 820E0288h case    3:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0288h case    3:*/		return 0x820E028C;
		  /* 820E028Ch */ case    4:  		/* lis R11, -32254 */
		/* 820E028Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E028Ch case    4:*/		return 0x820E0290;
		  /* 820E0290h */ case    5:  		/* mr R6, R30 */
		/* 820E0290h case    5:*/		regs.R6 = regs.R30;
		/* 820E0290h case    5:*/		return 0x820E0294;
		  /* 820E0294h */ case    6:  		/* addi R4, R11, -26912 */
		/* 820E0294h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF96E0);
		/* 820E0294h case    6:*/		return 0x820E0298;
		  /* 820E0298h */ case    7:  		/* mr R5, R26 */
		/* 820E0298h case    7:*/		regs.R5 = regs.R26;
		/* 820E0298h case    7:*/		return 0x820E029C;
		  /* 820E029Ch */ case    8:  		/* mr R3, R31 */
		/* 820E029Ch case    8:*/		regs.R3 = regs.R31;
		/* 820E029Ch case    8:*/		return 0x820E02A0;
		  /* 820E02A0h */ case    9:  		/* bl -25032 */
		/* 820E02A0h case    9:*/		regs.LR = 0x820E02A4; return 0x820DA0D8;
		/* 820E02A0h case    9:*/		return 0x820E02A4;
		  /* 820E02A4h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E02A4h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E02A4h case   10:*/		return 0x820E02A8;
		  /* 820E02A8h */ case   11:  		/* bc 12, CR0_LT, -56 */
		/* 820E02A8h case   11:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E02A8h case   11:*/		return 0x820E02AC;
		  /* 820E02ACh */ case   12:  		/* mr R3, R31 */
		/* 820E02ACh case   12:*/		regs.R3 = regs.R31;
		/* 820E02ACh case   12:*/		return 0x820E02B0;
	}
	return 0x820E02B0;
} // Block from 820E027Ch-820E02B0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E02B0h
// Function '?EmitInvalidateLoop@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E02B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E02B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E02B0);
		  /* 820E02B0h */ case    0:  		/* bl -24832 */
		/* 820E02B0h case    0:*/		regs.LR = 0x820E02B4; return 0x820DA1B0;
		/* 820E02B0h case    0:*/		return 0x820E02B4;
		  /* 820E02B4h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820E02B4h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E02B4h case    1:*/		return 0x820E02B8;
		  /* 820E02B8h */ case    2:  		/* bc 12, CR0_LT, -72 */
		/* 820E02B8h case    2:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E02B8h case    2:*/		return 0x820E02BC;
		  /* 820E02BCh */ case    3:  		/* lis R11, -32254 */
		/* 820E02BCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E02BCh case    3:*/		return 0x820E02C0;
		  /* 820E02C0h */ case    4:  		/* mr R6, R30 */
		/* 820E02C0h case    4:*/		regs.R6 = regs.R30;
		/* 820E02C0h case    4:*/		return 0x820E02C4;
		  /* 820E02C4h */ case    5:  		/* addi R4, R11, -27000 */
		/* 820E02C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9688);
		/* 820E02C4h case    5:*/		return 0x820E02C8;
		  /* 820E02C8h */ case    6:  		/* mr R5, R26 */
		/* 820E02C8h case    6:*/		regs.R5 = regs.R26;
		/* 820E02C8h case    6:*/		return 0x820E02CC;
		  /* 820E02CCh */ case    7:  		/* mr R3, R31 */
		/* 820E02CCh case    7:*/		regs.R3 = regs.R31;
		/* 820E02CCh case    7:*/		return 0x820E02D0;
		  /* 820E02D0h */ case    8:  		/* bl -25080 */
		/* 820E02D0h case    8:*/		regs.LR = 0x820E02D4; return 0x820DA0D8;
		/* 820E02D0h case    8:*/		return 0x820E02D4;
		  /* 820E02D4h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820E02D4h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E02D4h case    9:*/		return 0x820E02D8;
		  /* 820E02D8h */ case   10:  		/* bc 12, CR0_LT, -104 */
		/* 820E02D8h case   10:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E02D8h case   10:*/		return 0x820E02DC;
		  /* 820E02DCh */ case   11:  		/* lwz R9, <#[R1 + 112]> */
		/* 820E02DCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 820E02DCh case   11:*/		return 0x820E02E0;
		  /* 820E02E0h */ case   12:  		/* lis R11, 15 */
		/* 820E02E0h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xF);
		/* 820E02E0h case   12:*/		return 0x820E02E4;
		  /* 820E02E4h */ case   13:  		/* rlwinm R10, R9, 0, 12, 15 */
		/* 820E02E4h case   13:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R10,regs.R9);
		/* 820E02E4h case   13:*/		return 0x820E02E8;
		  /* 820E02E8h */ case   14:  		/* cmplw CR6, R10, R11 */
		/* 820E02E8h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E02E8h case   14:*/		return 0x820E02EC;
		  /* 820E02ECh */ case   15:  		/* bc 12, CR6_EQ, 176 */
		/* 820E02ECh case   15:*/		if ( regs.CR[6].eq ) { return 0x820E039C;  }
		/* 820E02ECh case   15:*/		return 0x820E02F0;
		  /* 820E02F0h */ case   16:  		/* li R10, 4 */
		/* 820E02F0h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820E02F0h case   16:*/		return 0x820E02F4;
		  /* 820E02F4h */ case   17:  		/* stw R28, <#[R1 + 128]> */
		/* 820E02F4h case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000080) );
		/* 820E02F4h case   17:*/		return 0x820E02F8;
		  /* 820E02F8h */ case   18:  		/* addi R11, R1, 132 */
		/* 820E02F8h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 820E02F8h case   18:*/		return 0x820E02FC;
		  /* 820E02FCh */ case   19:  		/* mtspr CTR, R10 */
		/* 820E02FCh case   19:*/		regs.CTR = regs.R10;
		/* 820E02FCh case   19:*/		return 0x820E0300;
		  /* 820E0300h */ case   20:  		/* lwz R10, <#[R11 - 4]> */
		/* 820E0300h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820E0300h case   20:*/		return 0x820E0304;
		  /* 820E0304h */ case   21:  		/* addi R10, R10, 1 */
		/* 820E0304h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E0304h case   21:*/		return 0x820E0308;
		  /* 820E0308h */ case   22:  		/* stw R10, <#[R11]> */
		/* 820E0308h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0308h case   22:*/		return 0x820E030C;
		  /* 820E030Ch */ case   23:  		/* b 32 */
		/* 820E030Ch case   23:*/		return 0x820E032C;
		/* 820E030Ch case   23:*/		return 0x820E0310;
		  /* 820E0310h */ case   24:  		/* rlwinm. R10, R9, 0, 15, 15 */
		/* 820E0310h case   24:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R9);
		/* 820E0310h case   24:*/		return 0x820E0314;
		  /* 820E0314h */ case   25:  		/* bc 4, CR0_EQ, 32 */
		/* 820E0314h case   25:*/		if ( !regs.CR[0].eq ) { return 0x820E0334;  }
		/* 820E0314h case   25:*/		return 0x820E0318;
		  /* 820E0318h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 820E0318h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0318h case   26:*/		return 0x820E031C;
		  /* 820E031Ch */ case   27:  		/* rlwinm R9, R9, 31, 1, 31 */
		/* 820E031Ch case   27:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R9,regs.R9);
		/* 820E031Ch case   27:*/		return 0x820E0320;
		  /* 820E0320h */ case   28:  		/* addi R10, R10, 1 */
		/* 820E0320h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E0320h case   28:*/		return 0x820E0324;
		  /* 820E0324h */ case   29:  		/* stw R10, <#[R11]> */
		/* 820E0324h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0324h case   29:*/		return 0x820E0328;
		  /* 820E0328h */ case   30:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 820E0328h case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 820E0328h case   30:*/		return 0x820E032C;
	}
	return 0x820E032C;
} // Block from 820E02B0h-820E032Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 820E032Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E032C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E032C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E032C);
		  /* 820E032Ch */ case    0:  		/* cmplwi CR6, R10, 4 */
		/* 820E032Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 820E032Ch case    0:*/		return 0x820E0330;
		  /* 820E0330h */ case    1:  		/* bc 12, CR6_LT, -32 */
		/* 820E0330h case    1:*/		if ( regs.CR[6].lt ) { return 0x820E0310;  }
		/* 820E0330h case    1:*/		return 0x820E0334;
	}
	return 0x820E0334;
} // Block from 820E032Ch-820E0334h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0334);
		  /* 820E0334h */ case    0:  		/* addi R11, R11, 4 */
		/* 820E0334h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E0334h case    0:*/		return 0x820E0338;
		  /* 820E0338h */ case    1:  		/* bc 16, CR0_LT, -56 */
		/* 820E0338h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E0300;  }
		/* 820E0338h case    1:*/		return 0x820E033C;
		  /* 820E033Ch */ case    2:  		/* li R9, 4 */
		/* 820E033Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820E033Ch case    2:*/		return 0x820E0340;
		  /* 820E0340h */ case    3:  		/* li R10, 1 */
		/* 820E0340h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E0340h case    3:*/		return 0x820E0344;
		  /* 820E0344h */ case    4:  		/* addi R11, R1, 132 */
		/* 820E0344h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 820E0344h case    4:*/		return 0x820E0348;
		  /* 820E0348h */ case    5:  		/* mtspr CTR, R9 */
		/* 820E0348h case    5:*/		regs.CTR = regs.R9;
		/* 820E0348h case    5:*/		return 0x820E034C;
		  /* 820E034Ch */ case    6:  		/* lwz R9, <#[R11]> */
		/* 820E034Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E034Ch case    6:*/		return 0x820E0350;
		  /* 820E0350h */ case    7:  		/* cmplwi CR6, R9, 4 */
		/* 820E0350h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 820E0350h case    7:*/		return 0x820E0354;
		  /* 820E0354h */ case    8:  		/* bc 12, CR6_LT, 12 */
		/* 820E0354h case    8:*/		if ( regs.CR[6].lt ) { return 0x820E0360;  }
		/* 820E0354h case    8:*/		return 0x820E0358;
		  /* 820E0358h */ case    9:  		/* addi R9, R10, -1 */
		/* 820E0358h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 820E0358h case    9:*/		return 0x820E035C;
		  /* 820E035Ch */ case   10:  		/* stw R9, <#[R11]> */
		/* 820E035Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E035Ch case   10:*/		return 0x820E0360;
	}
	return 0x820E0360;
} // Block from 820E0334h-820E0360h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E0360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0360);
		  /* 820E0360h */ case    0:  		/* addi R10, R10, 1 */
		/* 820E0360h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E0360h case    0:*/		return 0x820E0364;
		  /* 820E0364h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E0364h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E0364h case    1:*/		return 0x820E0368;
		  /* 820E0368h */ case    2:  		/* bc 16, CR0_LT, -28 */
		/* 820E0368h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E034C;  }
		/* 820E0368h case    2:*/		return 0x820E036C;
		  /* 820E036Ch */ case    3:  		/* lwz R30, <#[R1 + 132]> */
		/* 820E036Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000084) );
		/* 820E036Ch case    3:*/		return 0x820E0370;
		  /* 820E0370h */ case    4:  		/* lwz R29, <#[R1 + 144]> */
		/* 820E0370h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 820E0370h case    4:*/		return 0x820E0374;
		  /* 820E0374h */ case    5:  		/* lwz R28, <#[R1 + 140]> */
		/* 820E0374h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000008C) );
		/* 820E0374h case    5:*/		return 0x820E0378;
		  /* 820E0378h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 820E0378h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E0378h case    6:*/		return 0x820E037C;
		  /* 820E037Ch */ case    7:  		/* lwz R27, <#[R1 + 136]> */
		/* 820E037Ch case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000088) );
		/* 820E037Ch case    7:*/		return 0x820E0380;
		  /* 820E0380h */ case    8:  		/* bc 4, CR6_EQ, 48 */
		/* 820E0380h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820E03B0;  }
		/* 820E0380h case    8:*/		return 0x820E0384;
		  /* 820E0384h */ case    9:  		/* cmplwi CR6, R27, 1 */
		/* 820E0384h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000001);
		/* 820E0384h case    9:*/		return 0x820E0388;
		  /* 820E0388h */ case   10:  		/* bc 4, CR6_EQ, 40 */
		/* 820E0388h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820E03B0;  }
		/* 820E0388h case   10:*/		return 0x820E038C;
		  /* 820E038Ch */ case   11:  		/* cmplwi CR6, R28, 2 */
		/* 820E038Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 820E038Ch case   11:*/		return 0x820E0390;
		  /* 820E0390h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 820E0390h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E03B0;  }
		/* 820E0390h case   12:*/		return 0x820E0394;
		  /* 820E0394h */ case   13:  		/* cmplwi CR6, R29, 3 */
		/* 820E0394h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 820E0394h case   13:*/		return 0x820E0398;
		  /* 820E0398h */ case   14:  		/* bc 4, CR6_EQ, 24 */
		/* 820E0398h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E03B0;  }
		/* 820E0398h case   14:*/		return 0x820E039C;
	}
	return 0x820E039C;
} // Block from 820E0360h-820E039Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E039Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E039C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E039C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E039C);
		  /* 820E039Ch */ case    0:  		/* addi R5, R1, 176 */
		/* 820E039Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820E039Ch case    0:*/		return 0x820E03A0;
		  /* 820E03A0h */ case    1:  		/* li R4, 32 */
		/* 820E03A0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E03A0h case    1:*/		return 0x820E03A4;
		  /* 820E03A4h */ case    2:  		/* addi R3, R1, 208 */
		/* 820E03A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 820E03A4h case    2:*/		return 0x820E03A8;
		  /* 820E03A8h */ case    3:  		/* bl -236728 */
		/* 820E03A8h case    3:*/		regs.LR = 0x820E03AC; return 0x820A66F0;
		/* 820E03A8h case    3:*/		return 0x820E03AC;
		  /* 820E03ACh */ case    4:  		/* b 140 */
		/* 820E03ACh case    4:*/		return 0x820E0438;
		/* 820E03ACh case    4:*/		return 0x820E03B0;
	}
	return 0x820E03B0;
} // Block from 820E039Ch-820E03B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E03B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E03B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E03B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E03B0);
		  /* 820E03B0h */ case    0:  		/* lis R11, -32254 */
		/* 820E03B0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E03B0h case    0:*/		return 0x820E03B4;
		  /* 820E03B4h */ case    1:  		/* li R4, 32 */
		/* 820E03B4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E03B4h case    1:*/		return 0x820E03B8;
		  /* 820E03B8h */ case    2:  		/* addi R5, R11, -26836 */
		/* 820E03B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF972C);
		/* 820E03B8h case    2:*/		return 0x820E03BC;
		  /* 820E03BCh */ case    3:  		/* addi R3, R1, 208 */
		/* 820E03BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 820E03BCh case    3:*/		return 0x820E03C0;
		  /* 820E03C0h */ case    4:  		/* bl -236752 */
		/* 820E03C0h case    4:*/		regs.LR = 0x820E03C4; return 0x820A66F0;
		/* 820E03C0h case    4:*/		return 0x820E03C4;
		  /* 820E03C4h */ case    5:  		/* mr R3, R31 */
		/* 820E03C4h case    5:*/		regs.R3 = regs.R31;
		/* 820E03C4h case    5:*/		return 0x820E03C8;
		  /* 820E03C8h */ case    6:  		/* bl -25112 */
		/* 820E03C8h case    6:*/		regs.LR = 0x820E03CC; return 0x820DA1B0;
		/* 820E03C8h case    6:*/		return 0x820E03CC;
		  /* 820E03CCh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820E03CCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E03CCh case    7:*/		return 0x820E03D0;
		  /* 820E03D0h */ case    8:  		/* bc 12, CR0_LT, -352 */
		/* 820E03D0h case    8:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E03D0h case    8:*/		return 0x820E03D4;
		  /* 820E03D4h */ case    9:  		/* lis R11, -32254 */
		/* 820E03D4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E03D4h case    9:*/		return 0x820E03D8;
		  /* 820E03D8h */ case   10:  		/* addi R5, R1, 208 */
		/* 820E03D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820E03D8h case   10:*/		return 0x820E03DC;
		  /* 820E03DCh */ case   11:  		/* addi R4, R11, -30692 */
		/* 820E03DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF881C);
		/* 820E03DCh case   11:*/		return 0x820E03E0;
		  /* 820E03E0h */ case   12:  		/* mr R3, R31 */
		/* 820E03E0h case   12:*/		regs.R3 = regs.R31;
		/* 820E03E0h case   12:*/		return 0x820E03E4;
		  /* 820E03E4h */ case   13:  		/* bl -25356 */
		/* 820E03E4h case   13:*/		regs.LR = 0x820E03E8; return 0x820DA0D8;
		/* 820E03E4h case   13:*/		return 0x820E03E8;
		  /* 820E03E8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E03E8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E03E8h case   14:*/		return 0x820E03EC;
		  /* 820E03ECh */ case   15:  		/* bc 12, CR0_LT, -380 */
		/* 820E03ECh case   15:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E03ECh case   15:*/		return 0x820E03F0;
		  /* 820E03F0h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 820E03F0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E03F0h case   16:*/		return 0x820E03F4;
		  /* 820E03F4h */ case   17:  		/* mr R8, R29 */
		/* 820E03F4h case   17:*/		regs.R8 = regs.R29;
		/* 820E03F4h case   17:*/		return 0x820E03F8;
		  /* 820E03F8h */ case   18:  		/* mr R7, R28 */
		/* 820E03F8h case   18:*/		regs.R7 = regs.R28;
		/* 820E03F8h case   18:*/		return 0x820E03FC;
		  /* 820E03FCh */ case   19:  		/* mr R6, R27 */
		/* 820E03FCh case   19:*/		regs.R6 = regs.R27;
		/* 820E03FCh case   19:*/		return 0x820E0400;
		  /* 820E0400h */ case   20:  		/* mr R5, R30 */
		/* 820E0400h case   20:*/		regs.R5 = regs.R30;
		/* 820E0400h case   20:*/		return 0x820E0404;
		  /* 820E0404h */ case   21:  		/* addi R4, R1, 176 */
		/* 820E0404h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 820E0404h case   21:*/		return 0x820E0408;
		  /* 820E0408h */ case   22:  		/* lwz R11, <#[R11 + 388]> */
		/* 820E0408h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820E0408h case   22:*/		return 0x820E040C;
		  /* 820E040Ch */ case   23:  		/* mr R3, R31 */
		/* 820E040Ch case   23:*/		regs.R3 = regs.R31;
		/* 820E040Ch case   23:*/		return 0x820E0410;
		  /* 820E0410h */ case   24:  		/* mtspr CTR, R11 */
		/* 820E0410h case   24:*/		regs.CTR = regs.R11;
		/* 820E0410h case   24:*/		return 0x820E0414;
		  /* 820E0414h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820E0414h case   25:*/		if ( 1 ) { regs.LR = 0x820E0418; return (uint32)regs.CTR; }
		/* 820E0414h case   25:*/		return 0x820E0418;
		  /* 820E0418h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E0418h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0418h case   26:*/		return 0x820E041C;
		  /* 820E041Ch */ case   27:  		/* bc 12, CR0_LT, -428 */
		/* 820E041Ch case   27:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E041Ch case   27:*/		return 0x820E0420;
		  /* 820E0420h */ case   28:  		/* lis R11, -32254 */
		/* 820E0420h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0420h case   28:*/		return 0x820E0424;
		  /* 820E0424h */ case   29:  		/* mr R3, R31 */
		/* 820E0424h case   29:*/		regs.R3 = regs.R31;
		/* 820E0424h case   29:*/		return 0x820E0428;
		  /* 820E0428h */ case   30:  		/* addi R4, R11, -30768 */
		/* 820E0428h case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87D0);
		/* 820E0428h case   30:*/		return 0x820E042C;
		  /* 820E042Ch */ case   31:  		/* bl -25428 */
		/* 820E042Ch case   31:*/		regs.LR = 0x820E0430; return 0x820DA0D8;
		/* 820E042Ch case   31:*/		return 0x820E0430;
		  /* 820E0430h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 820E0430h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0430h case   32:*/		return 0x820E0434;
		  /* 820E0434h */ case   33:  		/* bc 12, CR0_LT, -452 */
		/* 820E0434h case   33:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E0434h case   33:*/		return 0x820E0438;
	}
	return 0x820E0438;
} // Block from 820E03B0h-820E0438h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820E0438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0438);
		  /* 820E0438h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820E0438h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E0438h case    0:*/		return 0x820E043C;
		  /* 820E043Ch */ case    1:  		/* lis R10, -32254 */
		/* 820E043Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E043Ch case    1:*/		return 0x820E0440;
		  /* 820E0440h */ case    2:  		/* addi R5, R1, 208 */
		/* 820E0440h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820E0440h case    2:*/		return 0x820E0444;
		  /* 820E0444h */ case    3:  		/* addi R4, R10, -26852 */
		/* 820E0444h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF971C);
		/* 820E0444h case    3:*/		return 0x820E0448;
		  /* 820E0448h */ case    4:  		/* mr R3, R31 */
		/* 820E0448h case    4:*/		regs.R3 = regs.R31;
		/* 820E0448h case    4:*/		return 0x820E044C;
		  /* 820E044Ch */ case    5:  		/* lwz R11, <#[R11 + 448]> */
		/* 820E044Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001C0) );
		/* 820E044Ch case    5:*/		return 0x820E0450;
		  /* 820E0450h */ case    6:  		/* mtspr CTR, R11 */
		/* 820E0450h case    6:*/		regs.CTR = regs.R11;
		/* 820E0450h case    6:*/		return 0x820E0454;
		  /* 820E0454h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 820E0454h case    7:*/		if ( 1 ) { regs.LR = 0x820E0458; return (uint32)regs.CTR; }
		/* 820E0454h case    7:*/		return 0x820E0458;
		  /* 820E0458h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E0458h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0458h case    8:*/		return 0x820E045C;
		  /* 820E045Ch */ case    9:  		/* bc 12, CR0_LT, -492 */
		/* 820E045Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820E0270;  }
		/* 820E045Ch case    9:*/		return 0x820E0460;
		  /* 820E0460h */ case   10:  		/* lis R11, -32254 */
		/* 820E0460h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0460h case   10:*/		return 0x820E0464;
		  /* 820E0464h */ case   11:  		/* addi R4, R11, -30604 */
		/* 820E0464h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 820E0464h case   11:*/		return 0x820E0468;
		  /* 820E0468h */ case   12:  		/* b -524 */
		/* 820E0468h case   12:*/		return 0x820E025C;
		/* 820E0468h case   12:*/		return 0x820E046C;
		  /* 820E046Ch */ case   13:  		/* li R3, 1 */
		/* 820E046Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E046Ch case   13:*/		return 0x820E0470;
		  /* 820E0470h */ case   14:  		/* b -512 */
		/* 820E0470h case   14:*/		return 0x820E0270;
		/* 820E0470h case   14:*/		return 0x820E0474;
	}
	return 0x820E0474;
} // Block from 820E0438h-820E0474h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E0474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0474);
		  /* 820E0474h */ case    0:  		/* lis R3, -32768 */
		/* 820E0474h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820E0474h case    0:*/		return 0x820E0478;
		  /* 820E0478h */ case    1:  		/* ori R3, R3, 16389 */
		/* 820E0478h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820E0478h case    1:*/		return 0x820E047C;
		  /* 820E047Ch */ case    2:  		/* b -524 */
		/* 820E047Ch case    2:*/		return 0x820E0270;
		/* 820E047Ch case    2:*/		return 0x820E0480;
	}
	return 0x820E0480;
} // Block from 820E0474h-820E0480h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E0480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0480);
		  /* 820E0480h */ case    0:  		/* mfspr R12, LR */
		/* 820E0480h case    0:*/		regs.R12 = regs.LR;
		/* 820E0480h case    0:*/		return 0x820E0484;
		  /* 820E0484h */ case    1:  		/* bl -324152 */
		/* 820E0484h case    1:*/		regs.LR = 0x820E0488; return 0x8209124C;
		/* 820E0484h case    1:*/		return 0x820E0488;
		  /* 820E0488h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820E0488h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820E0488h case    2:*/		return 0x820E048C;
		  /* 820E048Ch */ case    3:  		/* mr R29, R3 */
		/* 820E048Ch case    3:*/		regs.R29 = regs.R3;
		/* 820E048Ch case    3:*/		return 0x820E0490;
	}
	return 0x820E0490;
} // Block from 820E0480h-820E0490h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E0490h
// Function '?EmitDEFi@C30SWProgram@D3DXShader@@MAAJIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0490);
		  /* 820E0490h */ case    0:  		/* mr R31, R4 */
		/* 820E0490h case    0:*/		regs.R31 = regs.R4;
		/* 820E0490h case    0:*/		return 0x820E0494;
		  /* 820E0494h */ case    1:  		/* mr R25, R5 */
		/* 820E0494h case    1:*/		regs.R25 = regs.R5;
		/* 820E0494h case    1:*/		return 0x820E0498;
		  /* 820E0498h */ case    2:  		/* mr R28, R6 */
		/* 820E0498h case    2:*/		regs.R28 = regs.R6;
		/* 820E0498h case    2:*/		return 0x820E049C;
		  /* 820E049Ch */ case    3:  		/* mr R27, R7 */
		/* 820E049Ch case    3:*/		regs.R27 = regs.R7;
		/* 820E049Ch case    3:*/		return 0x820E04A0;
		  /* 820E04A0h */ case    4:  		/* mr R26, R8 */
		/* 820E04A0h case    4:*/		regs.R26 = regs.R8;
		/* 820E04A0h case    4:*/		return 0x820E04A4;
		  /* 820E04A4h */ case    5:  		/* rlwinm. R11, R4, 0, 18, 18 */
		/* 820E04A4h case    5:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R4);
		/* 820E04A4h case    5:*/		return 0x820E04A8;
		  /* 820E04A8h */ case    6:  		/* bc 12, CR0_EQ, 216 */
		/* 820E04A8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E0580;  }
		/* 820E04A8h case    6:*/		return 0x820E04AC;
		  /* 820E04ACh */ case    7:  		/* lis R11, -32217 */
		/* 820E04ACh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 820E04ACh case    7:*/		return 0x820E04B0;
		  /* 820E04B0h */ case    8:  		/* lis R10, -32254 */
		/* 820E04B0h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E04B0h case    8:*/		return 0x820E04B4;
		  /* 820E04B4h */ case    9:  		/* addi R30, R11, 13752 */
		/* 820E04B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x35B8);
		/* 820E04B4h case    9:*/		return 0x820E04B8;
		  /* 820E04B8h */ case   10:  		/* addi R5, R10, -26592 */
		/* 820E04B8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9820);
		/* 820E04B8h case   10:*/		return 0x820E04BC;
		  /* 820E04BCh */ case   11:  		/* li R4, 32 */
		/* 820E04BCh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E04BCh case   11:*/		return 0x820E04C0;
		  /* 820E04C0h */ case   12:  		/* addi R3, R1, 80 */
		/* 820E04C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 820E04C0h case   12:*/		return 0x820E04C4;
		  /* 820E04C4h */ case   13:  		/* lwz R6, <#[R30 + 12]> */
		/* 820E04C4h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000000C) );
		/* 820E04C4h case   13:*/		return 0x820E04C8;
		  /* 820E04C8h */ case   14:  		/* bl -253576 */
		/* 820E04C8h case   14:*/		regs.LR = 0x820E04CC; return 0x820A2640;
		/* 820E04C8h case   14:*/		return 0x820E04CC;
		  /* 820E04CCh */ case   15:  		/* cmplwi CR6, R26, 0 */
		/* 820E04CCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820E04CCh case   15:*/		return 0x820E04D0;
		  /* 820E04D0h */ case   16:  		/* mr R4, R27 */
		/* 820E04D0h case   16:*/		regs.R4 = regs.R27;
		/* 820E04D0h case   16:*/		return 0x820E04D4;
		  /* 820E04D4h */ case   17:  		/* mr R3, R28 */
		/* 820E04D4h case   17:*/		regs.R3 = regs.R28;
		/* 820E04D4h case   17:*/		return 0x820E04D8;
		  /* 820E04D8h */ case   18:  		/* bc 4, CR6_EQ, 112 */
		/* 820E04D8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820E0548;  }
		/* 820E04D8h case   18:*/		return 0x820E04DC;
		  /* 820E04DCh */ case   19:  		/* mr R11, R31 */
		/* 820E04DCh case   19:*/		regs.R11 = regs.R31;
		/* 820E04DCh case   19:*/		return 0x820E04E0;
		  /* 820E04E0h */ case   20:  		/* lwz R10, <#[R29 + 20]> */
		/* 820E04E0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000014) );
		/* 820E04E0h case   20:*/		return 0x820E04E4;
		  /* 820E04E4h */ case   21:  		/* rlwinm R9, R25, 2, 0, 29 */
		/* 820E04E4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R25);
		/* 820E04E4h case   21:*/		return 0x820E04E8;
		  /* 820E04E8h */ case   22:  		/* rlwimi R11, R31, 12, 21, 23 */
		/* 820E04E8h case   22:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R31);
		/* 820E04E8h case   22:*/		return 0x820E04EC;
		  /* 820E04ECh */ case   23:  		/* lis R8, -32254 */
		/* 820E04ECh case   23:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820E04ECh case   23:*/		return 0x820E04F0;
		  /* 820E04F0h */ case   24:  		/* rlwinm R31, R11, 24, 27, 31 */
		/* 820E04F0h case   24:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R31,regs.R11);
		/* 820E04F0h case   24:*/		return 0x820E04F4;
		  /* 820E04F4h */ case   25:  		/* addi R5, R8, -26612 */
		/* 820E04F4h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R8,0xFFFF980C);
		/* 820E04F4h case   25:*/		return 0x820E04F8;
		  /* 820E04F8h */ case   26:  		/* lwzx R11, <#[R9 + R10]> */
		/* 820E04F8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820E04F8h case   26:*/		return 0x820E04FC;
		  /* 820E04FCh */ case   27:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 820E04FCh case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 820E04FCh case   27:*/		return 0x820E0500;
		  /* 820E0500h */ case   28:  		/* addi R7, R1, 80 */
		/* 820E0500h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820E0500h case   28:*/		return 0x820E0504;
		  /* 820E0504h */ case   29:  		/* lwz R8, <#[R11 + 16]> */
		/* 820E0504h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 820E0504h case   29:*/		return 0x820E0508;
		  /* 820E0508h */ case   30:  		/* lwzx R6, <#[R10 + R30]> */
		/* 820E0508h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820E0508h case   30:*/		return 0x820E050C;
		  /* 820E050Ch */ case   31:  		/* bl -253644 */
		/* 820E050Ch case   31:*/		regs.LR = 0x820E0510; return 0x820A2640;
		/* 820E050Ch case   31:*/		return 0x820E0510;
		  /* 820E0510h */ case   32:  		/* cmplwi CR6, R31, 1 */
		/* 820E0510h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 820E0510h case   32:*/		return 0x820E0514;
		  /* 820E0514h */ case   33:  		/* bc 4, CR6_GT, 28 */
		/* 820E0514h case   33:*/		if ( !regs.CR[6].gt ) { return 0x820E0530;  }
		/* 820E0514h case   33:*/		return 0x820E0518;
		  /* 820E0518h */ case   34:  		/* cmplwi CR6, R31, 4 */
		/* 820E0518h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 820E0518h case   34:*/		return 0x820E051C;
		  /* 820E051Ch */ case   35:  		/* bc 4, CR6_GT, 124 */
		/* 820E051Ch case   35:*/		if ( !regs.CR[6].gt ) { return 0x820E0598;  }
		/* 820E051Ch case   35:*/		return 0x820E0520;
		  /* 820E0520h */ case   36:  		/* cmplwi CR6, R31, 6 */
		/* 820E0520h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000006);
		/* 820E0520h case   36:*/		return 0x820E0524;
		  /* 820E0524h */ case   37:  		/* bc 4, CR6_GT, 12 */
		/* 820E0524h case   37:*/		if ( !regs.CR[6].gt ) { return 0x820E0530;  }
		/* 820E0524h case   37:*/		return 0x820E0528;
		  /* 820E0528h */ case   38:  		/* cmplwi CR6, R31, 15 */
		/* 820E0528h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000000F);
		/* 820E0528h case   38:*/		return 0x820E052C;
		  /* 820E052Ch */ case   39:  		/* bc 4, CR6_EQ, 108 */
		/* 820E052Ch case   39:*/		if ( !regs.CR[6].eq ) { return 0x820E0598;  }
		/* 820E052Ch case   39:*/		return 0x820E0530;
	}
	return 0x820E0530;
} // Block from 820E0490h-820E0530h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820E0530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0530);
		  /* 820E0530h */ case    0:  		/* lis R11, -32254 */
		/* 820E0530h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0530h case    0:*/		return 0x820E0534;
		  /* 820E0534h */ case    1:  		/* mr R4, R27 */
		/* 820E0534h case    1:*/		regs.R4 = regs.R27;
		/* 820E0534h case    1:*/		return 0x820E0538;
		  /* 820E0538h */ case    2:  		/* addi R5, R11, -26620 */
		/* 820E0538h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9804);
		/* 820E0538h case    2:*/		return 0x820E053C;
		  /* 820E053Ch */ case    3:  		/* mr R3, R28 */
		/* 820E053Ch case    3:*/		regs.R3 = regs.R28;
		/* 820E053Ch case    3:*/		return 0x820E0540;
	}
	return 0x820E0540;
} // Block from 820E0530h-820E0540h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E0540h
// Function '?EmitStreamElement@C30SWProgram@D3DXShader@@MAAJPAVCArgument@2@PAKH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0540);
		  /* 820E0540h */ case    0:  		/* bl -234704 */
		/* 820E0540h case    0:*/		regs.LR = 0x820E0544; return 0x820A7070;
		/* 820E0540h case    0:*/		return 0x820E0544;
		  /* 820E0544h */ case    1:  		/* b 84 */
		/* 820E0544h case    1:*/		return 0x820E0598;
		/* 820E0544h case    1:*/		return 0x820E0548;
	}
	return 0x820E0548;
} // Block from 820E0540h-820E0548h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0548);
		  /* 820E0548h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 820E0548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 820E0548h case    0:*/		return 0x820E054C;
		  /* 820E054Ch */ case    1:  		/* rlwinm R10, R25, 2, 0, 29 */
		/* 820E054Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R25);
		/* 820E054Ch case    1:*/		return 0x820E0550;
		  /* 820E0550h */ case    2:  		/* mr R8, R31 */
		/* 820E0550h case    2:*/		regs.R8 = regs.R31;
		/* 820E0550h case    2:*/		return 0x820E0554;
		  /* 820E0554h */ case    3:  		/* lwz R9, <#[R26]> */
		/* 820E0554h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0554h case    3:*/		return 0x820E0558;
		  /* 820E0558h */ case    4:  		/* lis R7, -32254 */
		/* 820E0558h case    4:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8202);
		/* 820E0558h case    4:*/		return 0x820E055C;
		  /* 820E055Ch */ case    5:  		/* rlwimi R8, R31, 12, 21, 23 */
		/* 820E055Ch case    5:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R8,regs.R31);
		/* 820E055Ch case    5:*/		return 0x820E0560;
		  /* 820E0560h */ case    6:  		/* addi R5, R7, -26652 */
		/* 820E0560h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R7,0xFFFF97E4);
		/* 820E0560h case    6:*/		return 0x820E0564;
		  /* 820E0564h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E0564h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E0564h case    7:*/		return 0x820E0568;
		  /* 820E0568h */ case    8:  		/* rlwinm R10, R8, 26, 25, 29 */
		/* 820E0568h case    8:*/		cpu::op::rlwinm<0,26,25,29>(regs,&regs.R10,regs.R8);
		/* 820E0568h case    8:*/		return 0x820E056C;
		  /* 820E056Ch */ case    9:  		/* addi R7, R1, 80 */
		/* 820E056Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820E056Ch case    9:*/		return 0x820E0570;
		  /* 820E0570h */ case   10:  		/* lwz R8, <#[R11 + 16]> */
		/* 820E0570h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 820E0570h case   10:*/		return 0x820E0574;
		  /* 820E0574h */ case   11:  		/* lwzx R6, <#[R10 + R30]> */
		/* 820E0574h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820E0574h case   11:*/		return 0x820E0578;
		  /* 820E0578h */ case   12:  		/* bl -253752 */
		/* 820E0578h case   12:*/		regs.LR = 0x820E057C; return 0x820A2640;
		/* 820E0578h case   12:*/		return 0x820E057C;
		  /* 820E057Ch */ case   13:  		/* b 28 */
		/* 820E057Ch case   13:*/		return 0x820E0598;
		/* 820E057Ch case   13:*/		return 0x820E0580;
	}
	return 0x820E0580;
} // Block from 820E0548h-820E0580h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E0580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0580);
		  /* 820E0580h */ case    0:  		/* li R7, 0 */
		/* 820E0580h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E0580h case    0:*/		return 0x820E0584;
		  /* 820E0584h */ case    1:  		/* mr R6, R27 */
		/* 820E0584h case    1:*/		regs.R6 = regs.R27;
		/* 820E0584h case    1:*/		return 0x820E0588;
		  /* 820E0588h */ case    2:  		/* mr R5, R28 */
		/* 820E0588h case    2:*/		regs.R5 = regs.R28;
		/* 820E0588h case    2:*/		return 0x820E058C;
		  /* 820E058Ch */ case    3:  		/* mr R4, R31 */
		/* 820E058Ch case    3:*/		regs.R4 = regs.R31;
		/* 820E058Ch case    3:*/		return 0x820E0590;
		  /* 820E0590h */ case    4:  		/* mr R3, R29 */
		/* 820E0590h case    4:*/		regs.R3 = regs.R29;
		/* 820E0590h case    4:*/		return 0x820E0594;
		  /* 820E0594h */ case    5:  		/* bl -25148 */
		/* 820E0594h case    5:*/		regs.LR = 0x820E0598; return 0x820DA358;
		/* 820E0594h case    5:*/		return 0x820E0598;
	}
	return 0x820E0598;
} // Block from 820E0580h-820E0598h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E0598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0598);
		  /* 820E0598h */ case    0:  		/* addi R1, R1, 176 */
		/* 820E0598h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820E0598h case    0:*/		return 0x820E059C;
		  /* 820E059Ch */ case    1:  		/* b -324352 */
		/* 820E059Ch case    1:*/		return 0x8209129C;
		/* 820E059Ch case    1:*/		return 0x820E05A0;
	}
	return 0x820E05A0;
} // Block from 820E0598h-820E05A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E05A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E05A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E05A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E05A0);
		  /* 820E05A0h */ case    0:  		/* mfspr R12, LR */
		/* 820E05A0h case    0:*/		regs.R12 = regs.LR;
		/* 820E05A0h case    0:*/		return 0x820E05A4;
		  /* 820E05A4h */ case    1:  		/* bl -324484 */
		/* 820E05A4h case    1:*/		regs.LR = 0x820E05A8; return 0x82091220;
		/* 820E05A4h case    1:*/		return 0x820E05A8;
		  /* 820E05A8h */ case    2:  		/* stwu R1, <#[R1 - 672]> */
		/* 820E05A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD60);
		/* 820E05A8h case    2:*/		return 0x820E05AC;
		  /* 820E05ACh */ case    3:  		/* li R17, 0 */
		/* 820E05ACh case    3:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 820E05ACh case    3:*/		return 0x820E05B0;
		  /* 820E05B0h */ case    4:  		/* stw R4, <#[R1 + 700]> */
		/* 820E05B0h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000002BC) );
		/* 820E05B0h case    4:*/		return 0x820E05B4;
		  /* 820E05B4h */ case    5:  		/* mr R14, R3 */
		/* 820E05B4h case    5:*/		regs.R14 = regs.R3;
		/* 820E05B4h case    5:*/		return 0x820E05B8;
		  /* 820E05B8h */ case    6:  		/* stw R8, <#[R1 + 732]> */
		/* 820E05B8h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000002DC) );
		/* 820E05B8h case    6:*/		return 0x820E05BC;
		  /* 820E05BCh */ case    7:  		/* mr R15, R5 */
		/* 820E05BCh case    7:*/		regs.R15 = regs.R5;
		/* 820E05BCh case    7:*/		return 0x820E05C0;
		  /* 820E05C0h */ case    8:  		/* stw R9, <#[R1 + 740]> */
		/* 820E05C0h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000002E4) );
		/* 820E05C0h case    8:*/		return 0x820E05C4;
		  /* 820E05C4h */ case    9:  		/* mr R16, R6 */
		/* 820E05C4h case    9:*/		regs.R16 = regs.R6;
		/* 820E05C4h case    9:*/		return 0x820E05C8;
		  /* 820E05C8h */ case   10:  		/* stw R10, <#[R1 + 748]> */
		/* 820E05C8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000002EC) );
		/* 820E05C8h case   10:*/		return 0x820E05CC;
		  /* 820E05CCh */ case   11:  		/* mr R28, R7 */
		/* 820E05CCh case   11:*/		regs.R28 = regs.R7;
		/* 820E05CCh case   11:*/		return 0x820E05D0;
		  /* 820E05D0h */ case   12:  		/* mr R21, R8 */
		/* 820E05D0h case   12:*/		regs.R21 = regs.R8;
		/* 820E05D0h case   12:*/		return 0x820E05D4;
		  /* 820E05D4h */ case   13:  		/* cmplwi CR6, R5, 0 */
		/* 820E05D4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E05D4h case   13:*/		return 0x820E05D8;
		  /* 820E05D8h */ case   14:  		/* mr R24, R17 */
		/* 820E05D8h case   14:*/		regs.R24 = regs.R17;
		/* 820E05D8h case   14:*/		return 0x820E05DC;
		  /* 820E05DCh */ case   15:  		/* mr R23, R17 */
		/* 820E05DCh case   15:*/		regs.R23 = regs.R17;
		/* 820E05DCh case   15:*/		return 0x820E05E0;
		  /* 820E05E0h */ case   16:  		/* mr R31, R17 */
		/* 820E05E0h case   16:*/		regs.R31 = regs.R17;
		/* 820E05E0h case   16:*/		return 0x820E05E4;
		  /* 820E05E4h */ case   17:  		/* bc 12, CR6_EQ, 156 */
		/* 820E05E4h case   17:*/		if ( regs.CR[6].eq ) { return 0x820E0680;  }
		/* 820E05E4h case   17:*/		return 0x820E05E8;
		  /* 820E05E8h */ case   18:  		/* addi R11, R31, -1 */
		/* 820E05E8h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 820E05E8h case   18:*/		return 0x820E05EC;
		  /* 820E05ECh */ case   19:  		/* lwz R9, <#[R1 + 788]> */
		/* 820E05ECh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000314) );
		/* 820E05ECh case   19:*/		return 0x820E05F0;
		  /* 820E05F0h */ case   20:  		/* rlwinm R30, R31, 2, 0, 29 */
		/* 820E05F0h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R31);
		/* 820E05F0h case   20:*/		return 0x820E05F4;
		  /* 820E05F4h */ case   21:  		/* addic R11, R11, -1 */
		/* 820E05F4h case   21:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820E05F4h case   21:*/		return 0x820E05F8;
		  /* 820E05F8h */ case   22:  		/* rlwinm R10, R31, 5, 0, 26 */
		/* 820E05F8h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R31);
		/* 820E05F8h case   22:*/		return 0x820E05FC;
		  /* 820E05FCh */ case   23:  		/* addi R11, R1, 288 */
		/* 820E05FCh case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x120);
		/* 820E05FCh case   23:*/		return 0x820E0600;
		  /* 820E0600h */ case   24:  		/* subfe R8, R8, R8 */
		/* 820E0600h case   24:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 820E0600h case   24:*/		return 0x820E0604;
		  /* 820E0604h */ case   25:  		/* lwzx R4, <#[R30 + R16]> */
		/* 820E0604h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R16 + 0x00000000) );
		/* 820E0604h case   25:*/		return 0x820E0608;
		  /* 820E0608h */ case   26:  		/* add R29, R10, R11 */
		/* 820E0608h case   26:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 820E0608h case   26:*/		return 0x820E060C;
		  /* 820E060Ch */ case   27:  		/* and R8, R8, R9 */
		/* 820E060Ch case   27:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 820E060Ch case   27:*/		return 0x820E0610;
		  /* 820E0610h */ case   28:  		/* lwzx R5, <#[R30 + R28]> */
		/* 820E0610h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + regs.R28 + 0x00000000) );
		/* 820E0610h case   28:*/		return 0x820E0614;
		  /* 820E0614h */ case   29:  		/* li R7, 32 */
		/* 820E0614h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x20);
		/* 820E0614h case   29:*/		return 0x820E0618;
		  /* 820E0618h */ case   30:  		/* mr R6, R29 */
		/* 820E0618h case   30:*/		regs.R6 = regs.R29;
		/* 820E0618h case   30:*/		return 0x820E061C;
		  /* 820E061Ch */ case   31:  		/* rlwinm R4, R4, 0, 8, 3 */
		/* 820E061Ch case   31:*/		cpu::op::rlwinm<0,0,8,3>(regs,&regs.R4,regs.R4);
		/* 820E061Ch case   31:*/		return 0x820E0620;
		  /* 820E0620h */ case   32:  		/* mr R3, R14 */
		/* 820E0620h case   32:*/		regs.R3 = regs.R14;
		/* 820E0620h case   32:*/		return 0x820E0624;
		  /* 820E0624h */ case   33:  		/* bl -420 */
		/* 820E0624h case   33:*/		regs.LR = 0x820E0628; return 0x820E0480;
		/* 820E0624h case   33:*/		return 0x820E0628;
		  /* 820E0628h */ case   34:  		/* lwzx R11, <#[R30 + R16]> */
		/* 820E0628h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R16 + 0x00000000) );
		/* 820E0628h case   34:*/		return 0x820E062C;
		  /* 820E062Ch */ case   35:  		/* mr R10, R11 */
		/* 820E062Ch case   35:*/		regs.R10 = regs.R11;
		/* 820E062Ch case   35:*/		return 0x820E0630;
		  /* 820E0630h */ case   36:  		/* rlwimi R10, R11, 12, 21, 23 */
		/* 820E0630h case   36:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R11);
		/* 820E0630h case   36:*/		return 0x820E0634;
		  /* 820E0634h */ case   37:  		/* rlwinm R11, R10, 0, 19, 23 */
		/* 820E0634h case   37:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R10);
		/* 820E0634h case   37:*/		return 0x820E0638;
		  /* 820E0638h */ case   38:  		/* cmplwi CR6, R11, 512 */
		/* 820E0638h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 820E0638h case   38:*/		return 0x820E063C;
		  /* 820E063Ch */ case   39:  		/* bc 4, CR6_EQ, 56 */
		/* 820E063Ch case   39:*/		if ( !regs.CR[6].eq ) { return 0x820E0674;  }
		/* 820E063Ch case   39:*/		return 0x820E0640;
		  /* 820E0640h */ case   40:  		/* lwzx R11, <#[R30 + R16]> */
		/* 820E0640h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R16 + 0x00000000) );
		/* 820E0640h case   40:*/		return 0x820E0644;
		  /* 820E0644h */ case   41:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 820E0644h case   41:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 820E0644h case   41:*/		return 0x820E0648;
		  /* 820E0648h */ case   42:  		/* bc 4, CR0_EQ, 44 */
		/* 820E0648h case   42:*/		if ( !regs.CR[0].eq ) { return 0x820E0674;  }
		/* 820E0648h case   42:*/		return 0x820E064C;
		  /* 820E064Ch */ case   43:  		/* li R7, 0 */
		/* 820E064Ch case   43:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E064Ch case   43:*/		return 0x820E0650;
		  /* 820E0650h */ case   44:  		/* li R6, 0 */
		/* 820E0650h case   44:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E0650h case   44:*/		return 0x820E0654;
		  /* 820E0654h */ case   45:  		/* mr R5, R29 */
		/* 820E0654h case   45:*/		regs.R5 = regs.R29;
		/* 820E0654h case   45:*/		return 0x820E0658;
		  /* 820E0658h */ case   46:  		/* li R4, 32 */
		/* 820E0658h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0658h case   46:*/		return 0x820E065C;
		  /* 820E065Ch */ case   47:  		/* addi R3, R1, 256 */
		/* 820E065Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820E065Ch case   47:*/		return 0x820E0660;
		  /* 820E0660h */ case   48:  		/* bl -253984 */
		/* 820E0660h case   48:*/		regs.LR = 0x820E0664; return 0x820A2640;
		/* 820E0660h case   48:*/		return 0x820E0664;
		  /* 820E0664h */ case   49:  		/* addi R5, R1, 256 */
		/* 820E0664h case   49:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820E0664h case   49:*/		return 0x820E0668;
		  /* 820E0668h */ case   50:  		/* li R4, 32 */
		/* 820E0668h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0668h case   50:*/		return 0x820E066C;
		  /* 820E066Ch */ case   51:  		/* mr R3, R29 */
		/* 820E066Ch case   51:*/		regs.R3 = regs.R29;
		/* 820E066Ch case   51:*/		return 0x820E0670;
		  /* 820E0670h */ case   52:  		/* bl -237440 */
		/* 820E0670h case   52:*/		regs.LR = 0x820E0674; return 0x820A66F0;
		/* 820E0670h case   52:*/		return 0x820E0674;
	}
	return 0x820E0674;
} // Block from 820E05A0h-820E0674h (53 instructions)

//////////////////////////////////////////////////////
// Block at 820E0674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0674);
		  /* 820E0674h */ case    0:  		/* addi R31, R31, 1 */
		/* 820E0674h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820E0674h case    0:*/		return 0x820E0678;
		  /* 820E0678h */ case    1:  		/* cmplw CR6, R31, R15 */
		/* 820E0678h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R15);
		/* 820E0678h case    1:*/		return 0x820E067C;
		  /* 820E067Ch */ case    2:  		/* bc 12, CR6_LT, -148 */
		/* 820E067Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x820E05E8;  }
		/* 820E067Ch case    2:*/		return 0x820E0680;
	}
	return 0x820E0680;
} // Block from 820E0674h-820E0680h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E0680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0680);
		  /* 820E0680h */ case    0:  		/* addi R11, R1, 204 */
		/* 820E0680h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xCC);
		/* 820E0680h case    0:*/		return 0x820E0684;
		  /* 820E0684h */ case    1:  		/* stw R17, <#[R1 + 200]> */
		/* 820E0684h case    1:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000C8) );
		/* 820E0684h case    1:*/		return 0x820E0688;
		  /* 820E0688h */ case    2:  		/* li R20, 1 */
		/* 820E0688h case    2:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 820E0688h case    2:*/		return 0x820E068C;
		  /* 820E068Ch */ case    3:  		/* stw R17, <#[R1 + 192]> */
		/* 820E068Ch case    3:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E068Ch case    3:*/		return 0x820E0690;
		  /* 820E0690h */ case    4:  		/* addi R22, R15, -1 */
		/* 820E0690h case    4:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R15,0xFFFFFFFF);
		/* 820E0690h case    4:*/		return 0x820E0694;
		  /* 820E0694h */ case    5:  		/* mr R31, R17 */
		/* 820E0694h case    5:*/		regs.R31 = regs.R17;
		/* 820E0694h case    5:*/		return 0x820E0698;
		  /* 820E0698h */ case    6:  		/* stw R20, <#[R1 + 196]> */
		/* 820E0698h case    6:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x000000C4) );
		/* 820E0698h case    6:*/		return 0x820E069C;
		  /* 820E069Ch */ case    7:  		/* lis R19, 228 */
		/* 820E069Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R19,0xE4);
		/* 820E069Ch case    7:*/		return 0x820E06A0;
		  /* 820E06A0h */ case    8:  		/* stw R17, <#[R11]> */
		/* 820E06A0h case    8:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 820E06A0h case    8:*/		return 0x820E06A4;
		  /* 820E06A4h */ case    9:  		/* mr R25, R20 */
		/* 820E06A4h case    9:*/		regs.R25 = regs.R20;
		/* 820E06A4h case    9:*/		return 0x820E06A8;
		  /* 820E06A8h */ case   10:  		/* cmplwi CR6, R22, 0 */
		/* 820E06A8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820E06A8h case   10:*/		return 0x820E06AC;
		  /* 820E06ACh */ case   11:  		/* bc 12, CR6_EQ, 268 */
		/* 820E06ACh case   11:*/		if ( regs.CR[6].eq ) { return 0x820E07B8;  }
		/* 820E06ACh case   11:*/		return 0x820E06B0;
		  /* 820E06B0h */ case   12:  		/* addi R29, R1, 200 */
		/* 820E06B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0xC8);
		/* 820E06B0h case   12:*/		return 0x820E06B4;
		  /* 820E06B4h */ case   13:  		/* addi R11, R1, 192 */
		/* 820E06B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC0);
		/* 820E06B4h case   13:*/		return 0x820E06B8;
		  /* 820E06B8h */ case   14:  		/* mr R4, R17 */
		/* 820E06B8h case   14:*/		regs.R4 = regs.R17;
		/* 820E06B8h case   14:*/		return 0x820E06BC;
		  /* 820E06BCh */ case   15:  		/* mr R5, R20 */
		/* 820E06BCh case   15:*/		regs.R5 = regs.R20;
		/* 820E06BCh case   15:*/		return 0x820E06C0;
		  /* 820E06C0h */ case   16:  		/* addi R7, R1, 288 */
		/* 820E06C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x120);
		/* 820E06C0h case   16:*/		return 0x820E06C4;
		  /* 820E06C4h */ case   17:  		/* lwzx R27, <#[R31 + R29]> */
		/* 820E06C4h case   17:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 820E06C4h case   17:*/		return 0x820E06C8;
		  /* 820E06C8h */ case   18:  		/* mr R8, R16 */
		/* 820E06C8h case   18:*/		regs.R8 = regs.R16;
		/* 820E06C8h case   18:*/		return 0x820E06CC;
		  /* 820E06CCh */ case   19:  		/* lwzx R26, <#[R31 + R11]> */
		/* 820E06CCh case   19:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 820E06CCh case   19:*/		return 0x820E06D0;
		  /* 820E06D0h */ case   20:  		/* subf R28, R16, R21 */
		/* 820E06D0h case   20:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R16,regs.R21);
		/* 820E06D0h case   20:*/		return 0x820E06D4;
		  /* 820E06D4h */ case   21:  		/* mr R30, R22 */
		/* 820E06D4h case   21:*/		regs.R30 = regs.R22;
		/* 820E06D4h case   21:*/		return 0x820E06D8;
		  /* 820E06D8h */ case   22:  		/* cmpwi CR6, R26, 0 */
		/* 820E06D8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E06D8h case   22:*/		return 0x820E06DC;
		  /* 820E06DCh */ case   23:  		/* bc 4, CR6_EQ, 16 */
		/* 820E06DCh case   23:*/		if ( !regs.CR[6].eq ) { return 0x820E06EC;  }
		/* 820E06DCh case   23:*/		return 0x820E06E0;
		  /* 820E06E0h */ case   24:  		/* lwzx R11, <#[R8 + R28]> */
		/* 820E06E0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R28 + 0x00000000) );
		/* 820E06E0h case   24:*/		return 0x820E06E4;
		  /* 820E06E4h */ case   25:  		/* cmplw CR6, R11, R19 */
		/* 820E06E4h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 820E06E4h case   25:*/		return 0x820E06E8;
		  /* 820E06E8h */ case   26:  		/* bc 4, CR6_EQ, 24 */
		/* 820E06E8h case   26:*/		if ( !regs.CR[6].eq ) { return 0x820E0700;  }
		/* 820E06E8h case   26:*/		return 0x820E06EC;
	}
	return 0x820E06EC;
} // Block from 820E0680h-820E06ECh (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E06ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E06EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E06EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E06EC);
		  /* 820E06ECh */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 820E06ECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 820E06ECh case    0:*/		return 0x820E06F0;
		  /* 820E06F0h */ case    1:  		/* bc 4, CR6_EQ, 160 */
		/* 820E06F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0790;  }
		/* 820E06F0h case    1:*/		return 0x820E06F4;
		  /* 820E06F4h */ case    2:  		/* lwz R11, <#[R8]> */
		/* 820E06F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E06F4h case    2:*/		return 0x820E06F8;
		  /* 820E06F8h */ case    3:  		/* rlwinm. R11, R11, 0, 4, 7 */
		/* 820E06F8h case    3:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E06F8h case    3:*/		return 0x820E06FC;
		  /* 820E06FCh */ case    4:  		/* bc 12, CR0_EQ, 148 */
		/* 820E06FCh case    4:*/		if ( regs.CR[0].eq ) { return 0x820E0790;  }
		/* 820E06FCh case    4:*/		return 0x820E0700;
	}
	return 0x820E0700;
} // Block from 820E06ECh-820E0700h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E0700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0700);
		  /* 820E0700h */ case    0:  		/* cmplw CR6, R5, R15 */
		/* 820E0700h case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R15);
		/* 820E0700h case    0:*/		return 0x820E0704;
		  /* 820E0704h */ case    1:  		/* bc 4, CR6_LT, 140 */
		/* 820E0704h case    1:*/		if ( !regs.CR[6].lt ) { return 0x820E0790;  }
		/* 820E0704h case    1:*/		return 0x820E0708;
		  /* 820E0708h */ case    2:  		/* subf R11, R5, R15 */
		/* 820E0708h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R15);
		/* 820E0708h case    2:*/		return 0x820E070C;
		  /* 820E070Ch */ case    3:  		/* addi R3, R7, 32 */
		/* 820E070Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R7,0x20);
		/* 820E070Ch case    3:*/		return 0x820E0710;
		  /* 820E0710h */ case    4:  		/* addi R6, R8, 4 */
		/* 820E0710h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0x4);
		/* 820E0710h case    4:*/		return 0x820E0714;
		  /* 820E0714h */ case    5:  		/* mtspr CTR, R11 */
		/* 820E0714h case    5:*/		regs.CTR = regs.R11;
		/* 820E0714h case    5:*/		return 0x820E0718;
		  /* 820E0718h */ case    6:  		/* cmpwi CR6, R26, 0 */
		/* 820E0718h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E0718h case    6:*/		return 0x820E071C;
		  /* 820E071Ch */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 820E071Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E0730;  }
		/* 820E071Ch case    7:*/		return 0x820E0720;
		  /* 820E0720h */ case    8:  		/* lwzx R11, <#[R4 + R21]> */
		/* 820E0720h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R21 + 0x00000000) );
		/* 820E0720h case    8:*/		return 0x820E0724;
		  /* 820E0724h */ case    9:  		/* lwzx R10, <#[R28 + R6]> */
		/* 820E0724h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R6 + 0x00000000) );
		/* 820E0724h case    9:*/		return 0x820E0728;
		  /* 820E0728h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 820E0728h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E0728h case   10:*/		return 0x820E072C;
		  /* 820E072Ch */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 820E072Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820E074C;  }
		/* 820E072Ch case   11:*/		return 0x820E0730;
	}
	return 0x820E0730;
} // Block from 820E0700h-820E0730h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E0730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0730);
		  /* 820E0730h */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 820E0730h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 820E0730h case    0:*/		return 0x820E0734;
		  /* 820E0734h */ case    1:  		/* bc 4, CR6_EQ, 80 */
		/* 820E0734h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0784;  }
		/* 820E0734h case    1:*/		return 0x820E0738;
		  /* 820E0738h */ case    2:  		/* lwzx R11, <#[R4 + R16]> */
		/* 820E0738h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + regs.R16 + 0x00000000) );
		/* 820E0738h case    2:*/		return 0x820E073C;
		  /* 820E073Ch */ case    3:  		/* lwz R10, <#[R6]> */
		/* 820E073Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 820E073Ch case    3:*/		return 0x820E0740;
		  /* 820E0740h */ case    4:  		/* xor R11, R11, R10 */
		/* 820E0740h case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820E0740h case    4:*/		return 0x820E0744;
		  /* 820E0744h */ case    5:  		/* rlwinm. R11, R11, 0, 4, 7 */
		/* 820E0744h case    5:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E0744h case    5:*/		return 0x820E0748;
		  /* 820E0748h */ case    6:  		/* bc 4, CR0_EQ, 60 */
		/* 820E0748h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820E0784;  }
		/* 820E0748h case    6:*/		return 0x820E074C;
	}
	return 0x820E074C;
} // Block from 820E0730h-820E074Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E074Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E074C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E074C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E074C);
		  /* 820E074Ch */ case    0:  		/* mr R10, R3 */
		/* 820E074Ch case    0:*/		regs.R10 = regs.R3;
		/* 820E074Ch case    0:*/		return 0x820E0750;
		  /* 820E0750h */ case    1:  		/* mr R11, R7 */
		/* 820E0750h case    1:*/		regs.R11 = regs.R7;
		/* 820E0750h case    1:*/		return 0x820E0754;
		  /* 820E0754h */ case    2:  		/* lbz R9, <#[R11]> */
		/* 820E0754h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0754h case    2:*/		return 0x820E0758;
		  /* 820E0758h */ case    3:  		/* lbz R18, <#[R10]> */
		/* 820E0758h case    3:*/		cpu::mem::load8z( regs, &regs.R18, (uint32)(regs.R10 + 0x00000000) );
		/* 820E0758h case    3:*/		return 0x820E075C;
		  /* 820E075Ch */ case    4:  		/* cmpwi CR0, R9, 0 */
		/* 820E075Ch case    4:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 820E075Ch case    4:*/		return 0x820E0760;
		  /* 820E0760h */ case    5:  		/* subf R9, R18, R9 */
		/* 820E0760h case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R18,regs.R9);
		/* 820E0760h case    5:*/		return 0x820E0764;
		  /* 820E0764h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 820E0764h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E0778;  }
		/* 820E0764h case    6:*/		return 0x820E0768;
		  /* 820E0768h */ case    7:  		/* addi R11, R11, 1 */
		/* 820E0768h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E0768h case    7:*/		return 0x820E076C;
		  /* 820E076Ch */ case    8:  		/* addi R10, R10, 1 */
		/* 820E076Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E076Ch case    8:*/		return 0x820E0770;
		  /* 820E0770h */ case    9:  		/* cmpwi CR6, R9, 0 */
		/* 820E0770h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E0770h case    9:*/		return 0x820E0774;
		  /* 820E0774h */ case   10:  		/* bc 12, CR6_EQ, -32 */
		/* 820E0774h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E0754;  }
		/* 820E0774h case   10:*/		return 0x820E0778;
	}
	return 0x820E0778;
} // Block from 820E074Ch-820E0778h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E0778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0778);
		  /* 820E0778h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 820E0778h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 820E0778h case    0:*/		return 0x820E077C;
		  /* 820E077Ch */ case    1:  		/* bc 4, CR0_EQ, 8 */
		/* 820E077Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x820E0784;  }
		/* 820E077Ch case    1:*/		return 0x820E0780;
		  /* 820E0780h */ case    2:  		/* addi R25, R25, 1 */
		/* 820E0780h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 820E0780h case    2:*/		return 0x820E0784;
	}
	return 0x820E0784;
} // Block from 820E0778h-820E0784h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E0784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0784);
		  /* 820E0784h */ case    0:  		/* addi R6, R6, 4 */
		/* 820E0784h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 820E0784h case    0:*/		return 0x820E0788;
		  /* 820E0788h */ case    1:  		/* addi R3, R3, 32 */
		/* 820E0788h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x20);
		/* 820E0788h case    1:*/		return 0x820E078C;
		  /* 820E078Ch */ case    2:  		/* bc 16, CR0_LT, -116 */
		/* 820E078Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E0718;  }
		/* 820E078Ch case    2:*/		return 0x820E0790;
	}
	return 0x820E0790;
} // Block from 820E0784h-820E0790h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E0790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0790);
		  /* 820E0790h */ case    0:  		/* cmplw CR6, R25, R27 */
		/* 820E0790h case    0:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R27);
		/* 820E0790h case    0:*/		return 0x820E0794;
		  /* 820E0794h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 820E0794h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820E079C;  }
		/* 820E0794h case    1:*/		return 0x820E0798;
		  /* 820E0798h */ case    2:  		/* mr R27, R25 */
		/* 820E0798h case    2:*/		regs.R27 = regs.R25;
		/* 820E0798h case    2:*/		return 0x820E079C;
	}
	return 0x820E079C;
} // Block from 820E0790h-820E079Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E079Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E079C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E079C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E079C);
		  /* 820E079Ch */ case    0:  		/* addic. R30, R30, -1 */
		/* 820E079Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 820E079Ch case    0:*/		return 0x820E07A0;
		  /* 820E07A0h */ case    1:  		/* addi R5, R5, 1 */
		/* 820E07A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820E07A0h case    1:*/		return 0x820E07A4;
		  /* 820E07A4h */ case    2:  		/* addi R4, R4, 4 */
		/* 820E07A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 820E07A4h case    2:*/		return 0x820E07A8;
		  /* 820E07A8h */ case    3:  		/* addi R8, R8, 4 */
		/* 820E07A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820E07A8h case    3:*/		return 0x820E07AC;
		  /* 820E07ACh */ case    4:  		/* addi R7, R7, 32 */
		/* 820E07ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x20);
		/* 820E07ACh case    4:*/		return 0x820E07B0;
		  /* 820E07B0h */ case    5:  		/* bc 4, CR0_EQ, -216 */
		/* 820E07B0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x820E06D8;  }
		/* 820E07B0h case    5:*/		return 0x820E07B4;
		  /* 820E07B4h */ case    6:  		/* stwx R27, <#[R31 + R29]> */
		/* 820E07B4h case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 820E07B4h case    6:*/		return 0x820E07B8;
	}
	return 0x820E07B8;
} // Block from 820E079Ch-820E07B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E07B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E07B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E07B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E07B8);
		  /* 820E07B8h */ case    0:  		/* addi R31, R31, 4 */
		/* 820E07B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820E07B8h case    0:*/		return 0x820E07BC;
		  /* 820E07BCh */ case    1:  		/* cmplwi CR6, R31, 8 */
		/* 820E07BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000008);
		/* 820E07BCh case    1:*/		return 0x820E07C0;
		  /* 820E07C0h */ case    2:  		/* bc 12, CR6_LT, -284 */
		/* 820E07C0h case    2:*/		if ( regs.CR[6].lt ) { return 0x820E06A4;  }
		/* 820E07C0h case    2:*/		return 0x820E07C4;
		  /* 820E07C4h */ case    3:  		/* lwz R11, <#[R1 + 204]> */
		/* 820E07C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000CC) );
		/* 820E07C4h case    3:*/		return 0x820E07C8;
		  /* 820E07C8h */ case    4:  		/* lwz R10, <#[R1 + 200]> */
		/* 820E07C8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C8) );
		/* 820E07C8h case    4:*/		return 0x820E07CC;
		  /* 820E07CCh */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 820E07CCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E07CCh case    5:*/		return 0x820E07D0;
		  /* 820E07D0h */ case    6:  		/* bc 4, CR6_GT, 12 */
		/* 820E07D0h case    6:*/		if ( !regs.CR[6].gt ) { return 0x820E07DC;  }
		/* 820E07D0h case    6:*/		return 0x820E07D4;
		  /* 820E07D4h */ case    7:  		/* stw R20, <#[R1 + 192]> */
		/* 820E07D4h case    7:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E07D4h case    7:*/		return 0x820E07D8;
		  /* 820E07D8h */ case    8:  		/* stw R17, <#[R1 + 196]> */
		/* 820E07D8h case    8:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000C4) );
		/* 820E07D8h case    8:*/		return 0x820E07DC;
	}
	return 0x820E07DC;
} // Block from 820E07B8h-820E07DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E07DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E07DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E07DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E07DC);
		  /* 820E07DCh */ case    0:  		/* lis R11, -32254 */
		/* 820E07DCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E07DCh case    0:*/		return 0x820E07E0;
		  /* 820E07E0h */ case    1:  		/* cmplwi CR6, R15, 0 */
		/* 820E07E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820E07E0h case    1:*/		return 0x820E07E4;
		  /* 820E07E4h */ case    2:  		/* addi R30, R11, -30768 */
		/* 820E07E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF87D0);
		/* 820E07E4h case    2:*/		return 0x820E07E8;
		  /* 820E07E8h */ case    3:  		/* stw R30, <#[R1 + 200]> */
		/* 820E07E8h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000C8) );
		/* 820E07E8h case    3:*/		return 0x820E07EC;
		  /* 820E07ECh */ case    4:  		/* bc 12, CR6_EQ, 316 */
		/* 820E07ECh case    4:*/		if ( regs.CR[6].eq ) { return 0x820E0928;  }
		/* 820E07ECh case    4:*/		return 0x820E07F0;
		  /* 820E07F0h */ case    5:  		/* mr R10, R16 */
		/* 820E07F0h case    5:*/		regs.R10 = regs.R16;
		/* 820E07F0h case    5:*/		return 0x820E07F4;
		  /* 820E07F4h */ case    6:  		/* mtspr CTR, R15 */
		/* 820E07F4h case    6:*/		regs.CTR = regs.R15;
		/* 820E07F4h case    6:*/		return 0x820E07F8;
		  /* 820E07F8h */ case    7:  		/* lwz R11, <#[R10]> */
		/* 820E07F8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E07F8h case    7:*/		return 0x820E07FC;
		  /* 820E07FCh */ case    8:  		/* lis R9, 256 */
		/* 820E07FCh case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0x100);
		/* 820E07FCh case    8:*/		return 0x820E0800;
		  /* 820E0800h */ case    9:  		/* rlwinm R11, R11, 0, 4, 7 */
		/* 820E0800h case    9:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E0800h case    9:*/		return 0x820E0804;
		  /* 820E0804h */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 820E0804h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E0804h case   10:*/		return 0x820E0808;
		  /* 820E0808h */ case   11:  		/* bc 12, CR6_EQ, 36 */
		/* 820E0808h case   11:*/		if ( regs.CR[6].eq ) { return 0x820E082C;  }
		/* 820E0808h case   11:*/		return 0x820E080C;
		  /* 820E080Ch */ case   12:  		/* lis R9, 3072 */
		/* 820E080Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xC00);
		/* 820E080Ch case   12:*/		return 0x820E0810;
		  /* 820E0810h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 820E0810h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E0810h case   13:*/		return 0x820E0814;
		  /* 820E0814h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 820E0814h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E082C;  }
		/* 820E0814h case   14:*/		return 0x820E0818;
		  /* 820E0818h */ case   15:  		/* lis R9, 2816 */
		/* 820E0818h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xB00);
		/* 820E0818h case   15:*/		return 0x820E081C;
		  /* 820E081Ch */ case   16:  		/* cmplw CR6, R11, R9 */
		/* 820E081Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E081Ch case   16:*/		return 0x820E0820;
		  /* 820E0820h */ case   17:  		/* bc 4, CR6_EQ, 16 */
		/* 820E0820h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820E0830;  }
		/* 820E0820h case   17:*/		return 0x820E0824;
		  /* 820E0824h */ case   18:  		/* mr R23, R20 */
		/* 820E0824h case   18:*/		regs.R23 = regs.R20;
		/* 820E0824h case   18:*/		return 0x820E0828;
		  /* 820E0828h */ case   19:  		/* b 8 */
		/* 820E0828h case   19:*/		return 0x820E0830;
		/* 820E0828h case   19:*/		return 0x820E082C;
	}
	return 0x820E082C;
} // Block from 820E07DCh-820E082Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E082Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E082C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E082C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E082C);
		  /* 820E082Ch */ case    0:  		/* mr R24, R20 */
		/* 820E082Ch case    0:*/		regs.R24 = regs.R20;
		/* 820E082Ch case    0:*/		return 0x820E0830;
	}
	return 0x820E0830;
} // Block from 820E082Ch-820E0830h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E0830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0830);
		  /* 820E0830h */ case    0:  		/* addi R10, R10, 4 */
		/* 820E0830h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E0830h case    0:*/		return 0x820E0834;
		  /* 820E0834h */ case    1:  		/* bc 16, CR0_LT, -60 */
		/* 820E0834h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E07F8;  }
		/* 820E0834h case    1:*/		return 0x820E0838;
		  /* 820E0838h */ case    2:  		/* lis R11, -32254 */
		/* 820E0838h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0838h case    2:*/		return 0x820E083C;
		  /* 820E083Ch */ case    3:  		/* cmpwi CR6, R24, 0 */
		/* 820E083Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820E083Ch case    3:*/		return 0x820E0840;
		  /* 820E0840h */ case    4:  		/* addi R31, R11, -30436 */
		/* 820E0840h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF891C);
		/* 820E0840h case    4:*/		return 0x820E0844;
		  /* 820E0844h */ case    5:  		/* bc 12, CR6_EQ, 112 */
		/* 820E0844h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E08B4;  }
		/* 820E0844h case    5:*/		return 0x820E0848;
		  /* 820E0848h */ case    6:  		/* mr R3, R14 */
		/* 820E0848h case    6:*/		regs.R3 = regs.R14;
		/* 820E0848h case    6:*/		return 0x820E084C;
		  /* 820E084Ch */ case    7:  		/* bl -26268 */
		/* 820E084Ch case    7:*/		regs.LR = 0x820E0850; return 0x820DA1B0;
		/* 820E084Ch case    7:*/		return 0x820E0850;
		  /* 820E0850h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E0850h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0850h case    8:*/		return 0x820E0854;
		  /* 820E0854h */ case    9:  		/* bc 12, CR0_LT, 1996 */
		/* 820E0854h case    9:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E0854h case    9:*/		return 0x820E0858;
		  /* 820E0858h */ case   10:  		/* lis R11, -32254 */
		/* 820E0858h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0858h case   10:*/		return 0x820E085C;
		  /* 820E085Ch */ case   11:  		/* mr R3, R14 */
		/* 820E085Ch case   11:*/		regs.R3 = regs.R14;
		/* 820E085Ch case   11:*/		return 0x820E0860;
		  /* 820E0860h */ case   12:  		/* addi R4, R11, -30508 */
		/* 820E0860h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88D4);
		/* 820E0860h case   12:*/		return 0x820E0864;
		  /* 820E0864h */ case   13:  		/* bl -26508 */
		/* 820E0864h case   13:*/		regs.LR = 0x820E0868; return 0x820DA0D8;
		/* 820E0864h case   13:*/		return 0x820E0868;
		  /* 820E0868h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E0868h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0868h case   14:*/		return 0x820E086C;
		  /* 820E086Ch */ case   15:  		/* bc 12, CR0_LT, 1972 */
		/* 820E086Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E086Ch case   15:*/		return 0x820E0870;
		  /* 820E0870h */ case   16:  		/* lwz R11, <#[R14]> */
		/* 820E0870h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 820E0870h case   16:*/		return 0x820E0874;
		  /* 820E0874h */ case   17:  		/* mr R4, R31 */
		/* 820E0874h case   17:*/		regs.R4 = regs.R31;
		/* 820E0874h case   17:*/		return 0x820E0878;
		  /* 820E0878h */ case   18:  		/* li R8, 0 */
		/* 820E0878h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E0878h case   18:*/		return 0x820E087C;
		  /* 820E087Ch */ case   19:  		/* li R7, 0 */
		/* 820E087Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E087Ch case   19:*/		return 0x820E0880;
		  /* 820E0880h */ case   20:  		/* li R6, 0 */
		/* 820E0880h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E0880h case   20:*/		return 0x820E0884;
		  /* 820E0884h */ case   21:  		/* li R5, 0 */
		/* 820E0884h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E0884h case   21:*/		return 0x820E0888;
		  /* 820E0888h */ case   22:  		/* lwz R11, <#[R11 + 388]> */
		/* 820E0888h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820E0888h case   22:*/		return 0x820E088C;
		  /* 820E088Ch */ case   23:  		/* mr R3, R14 */
		/* 820E088Ch case   23:*/		regs.R3 = regs.R14;
		/* 820E088Ch case   23:*/		return 0x820E0890;
		  /* 820E0890h */ case   24:  		/* mtspr CTR, R11 */
		/* 820E0890h case   24:*/		regs.CTR = regs.R11;
		/* 820E0890h case   24:*/		return 0x820E0894;
		  /* 820E0894h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820E0894h case   25:*/		if ( 1 ) { regs.LR = 0x820E0898; return (uint32)regs.CTR; }
		/* 820E0894h case   25:*/		return 0x820E0898;
		  /* 820E0898h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E0898h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0898h case   26:*/		return 0x820E089C;
		  /* 820E089Ch */ case   27:  		/* bc 12, CR0_LT, 1924 */
		/* 820E089Ch case   27:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E089Ch case   27:*/		return 0x820E08A0;
		  /* 820E08A0h */ case   28:  		/* mr R4, R30 */
		/* 820E08A0h case   28:*/		regs.R4 = regs.R30;
		/* 820E08A0h case   28:*/		return 0x820E08A4;
		  /* 820E08A4h */ case   29:  		/* mr R3, R14 */
		/* 820E08A4h case   29:*/		regs.R3 = regs.R14;
		/* 820E08A4h case   29:*/		return 0x820E08A8;
		  /* 820E08A8h */ case   30:  		/* bl -26576 */
		/* 820E08A8h case   30:*/		regs.LR = 0x820E08AC; return 0x820DA0D8;
		/* 820E08A8h case   30:*/		return 0x820E08AC;
		  /* 820E08ACh */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820E08ACh case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E08ACh case   31:*/		return 0x820E08B0;
		  /* 820E08B0h */ case   32:  		/* bc 12, CR0_LT, 1904 */
		/* 820E08B0h case   32:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E08B0h case   32:*/		return 0x820E08B4;
	}
	return 0x820E08B4;
} // Block from 820E0830h-820E08B4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820E08B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E08B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E08B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E08B4);
		  /* 820E08B4h */ case    0:  		/* cmpwi CR6, R23, 0 */
		/* 820E08B4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 820E08B4h case    0:*/		return 0x820E08B8;
		  /* 820E08B8h */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 820E08B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E0928;  }
		/* 820E08B8h case    1:*/		return 0x820E08BC;
		  /* 820E08BCh */ case    2:  		/* mr R3, R14 */
		/* 820E08BCh case    2:*/		regs.R3 = regs.R14;
		/* 820E08BCh case    2:*/		return 0x820E08C0;
		  /* 820E08C0h */ case    3:  		/* bl -26384 */
		/* 820E08C0h case    3:*/		regs.LR = 0x820E08C4; return 0x820DA1B0;
		/* 820E08C0h case    3:*/		return 0x820E08C4;
		  /* 820E08C4h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820E08C4h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E08C4h case    4:*/		return 0x820E08C8;
		  /* 820E08C8h */ case    5:  		/* bc 12, CR0_LT, 1880 */
		/* 820E08C8h case    5:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E08C8h case    5:*/		return 0x820E08CC;
		  /* 820E08CCh */ case    6:  		/* lis R11, -32254 */
		/* 820E08CCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E08CCh case    6:*/		return 0x820E08D0;
		  /* 820E08D0h */ case    7:  		/* mr R3, R14 */
		/* 820E08D0h case    7:*/		regs.R3 = regs.R14;
		/* 820E08D0h case    7:*/		return 0x820E08D4;
		  /* 820E08D4h */ case    8:  		/* addi R4, R11, -30468 */
		/* 820E08D4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88FC);
		/* 820E08D4h case    8:*/		return 0x820E08D8;
		  /* 820E08D8h */ case    9:  		/* bl -26624 */
		/* 820E08D8h case    9:*/		regs.LR = 0x820E08DC; return 0x820DA0D8;
		/* 820E08D8h case    9:*/		return 0x820E08DC;
		  /* 820E08DCh */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E08DCh case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E08DCh case   10:*/		return 0x820E08E0;
		  /* 820E08E0h */ case   11:  		/* bc 12, CR0_LT, 1856 */
		/* 820E08E0h case   11:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E08E0h case   11:*/		return 0x820E08E4;
		  /* 820E08E4h */ case   12:  		/* lwz R11, <#[R14]> */
		/* 820E08E4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 820E08E4h case   12:*/		return 0x820E08E8;
		  /* 820E08E8h */ case   13:  		/* mr R4, R31 */
		/* 820E08E8h case   13:*/		regs.R4 = regs.R31;
		/* 820E08E8h case   13:*/		return 0x820E08EC;
		  /* 820E08ECh */ case   14:  		/* li R8, 1 */
		/* 820E08ECh case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820E08ECh case   14:*/		return 0x820E08F0;
		  /* 820E08F0h */ case   15:  		/* li R7, 1 */
		/* 820E08F0h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820E08F0h case   15:*/		return 0x820E08F4;
		  /* 820E08F4h */ case   16:  		/* li R6, 1 */
		/* 820E08F4h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E08F4h case   16:*/		return 0x820E08F8;
		  /* 820E08F8h */ case   17:  		/* li R5, 1 */
		/* 820E08F8h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820E08F8h case   17:*/		return 0x820E08FC;
		  /* 820E08FCh */ case   18:  		/* lwz R11, <#[R11 + 388]> */
		/* 820E08FCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820E08FCh case   18:*/		return 0x820E0900;
		  /* 820E0900h */ case   19:  		/* mr R3, R14 */
		/* 820E0900h case   19:*/		regs.R3 = regs.R14;
		/* 820E0900h case   19:*/		return 0x820E0904;
		  /* 820E0904h */ case   20:  		/* mtspr CTR, R11 */
		/* 820E0904h case   20:*/		regs.CTR = regs.R11;
		/* 820E0904h case   20:*/		return 0x820E0908;
		  /* 820E0908h */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 820E0908h case   21:*/		if ( 1 ) { regs.LR = 0x820E090C; return (uint32)regs.CTR; }
		/* 820E0908h case   21:*/		return 0x820E090C;
		  /* 820E090Ch */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820E090Ch case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E090Ch case   22:*/		return 0x820E0910;
		  /* 820E0910h */ case   23:  		/* bc 12, CR0_LT, 1808 */
		/* 820E0910h case   23:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E0910h case   23:*/		return 0x820E0914;
		  /* 820E0914h */ case   24:  		/* mr R4, R30 */
		/* 820E0914h case   24:*/		regs.R4 = regs.R30;
		/* 820E0914h case   24:*/		return 0x820E0918;
		  /* 820E0918h */ case   25:  		/* mr R3, R14 */
		/* 820E0918h case   25:*/		regs.R3 = regs.R14;
		/* 820E0918h case   25:*/		return 0x820E091C;
		  /* 820E091Ch */ case   26:  		/* bl -26692 */
		/* 820E091Ch case   26:*/		regs.LR = 0x820E0920; return 0x820DA0D8;
		/* 820E091Ch case   26:*/		return 0x820E0920;
		  /* 820E0920h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820E0920h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0920h case   27:*/		return 0x820E0924;
		  /* 820E0924h */ case   28:  		/* bc 12, CR0_LT, 1788 */
		/* 820E0924h case   28:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E0924h case   28:*/		return 0x820E0928;
	}
	return 0x820E0928;
} // Block from 820E08B4h-820E0928h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820E0928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0928);
		  /* 820E0928h */ case    0:  		/* addi R11, R1, 228 */
		/* 820E0928h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE4);
		/* 820E0928h case    0:*/		return 0x820E092C;
		  /* 820E092Ch */ case    1:  		/* stw R17, <#[R1 + 224]> */
		/* 820E092Ch case    1:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000E0) );
		/* 820E092Ch case    1:*/		return 0x820E0930;
		  /* 820E0930h */ case    2:  		/* li R26, 2 */
		/* 820E0930h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x2);
		/* 820E0930h case    2:*/		return 0x820E0934;
		  /* 820E0934h */ case    3:  		/* stw R17, <#[R1 + 208]> */
		/* 820E0934h case    3:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000D0) );
		/* 820E0934h case    3:*/		return 0x820E0938;
		  /* 820E0938h */ case    4:  		/* addi R27, R1, 192 */
		/* 820E0938h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0xC0);
		/* 820E0938h case    4:*/		return 0x820E093C;
		  /* 820E093Ch */ case    5:  		/* stw R20, <#[R1 + 212]> */
		/* 820E093Ch case    5:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x000000D4) );
		/* 820E093Ch case    5:*/		return 0x820E0940;
		  /* 820E0940h */ case    6:  		/* stw R26, <#[R1 + 216]> */
		/* 820E0940h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000D8) );
		/* 820E0940h case    6:*/		return 0x820E0944;
		  /* 820E0944h */ case    7:  		/* stw R17, <#[R11]> */
		/* 820E0944h case    7:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0944h case    7:*/		return 0x820E0948;
		  /* 820E0948h */ case    8:  		/* stw R17, <#[R11 + 4]> */
		/* 820E0948h case    8:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000004) );
		/* 820E0948h case    8:*/		return 0x820E094C;
		  /* 820E094Ch */ case    9:  		/* addi R11, R1, 244 */
		/* 820E094Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF4);
		/* 820E094Ch case    9:*/		return 0x820E0950;
		  /* 820E0950h */ case   10:  		/* stw R17, <#[R1 + 240]> */
		/* 820E0950h case   10:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000F0) );
		/* 820E0950h case   10:*/		return 0x820E0954;
		  /* 820E0954h */ case   11:  		/* cmplwi CR6, R22, 0 */
		/* 820E0954h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820E0954h case   11:*/		return 0x820E0958;
		  /* 820E0958h */ case   12:  		/* stw R17, <#[R11]> */
		/* 820E0958h case   12:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0958h case   12:*/		return 0x820E095C;
		  /* 820E095Ch */ case   13:  		/* stw R17, <#[R11 + 4]> */
		/* 820E095Ch case   13:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000004) );
		/* 820E095Ch case   13:*/		return 0x820E0960;
		  /* 820E0960h */ case   14:  		/* bc 12, CR6_EQ, 256 */
		/* 820E0960h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E0A60;  }
		/* 820E0960h case   14:*/		return 0x820E0964;
		  /* 820E0964h */ case   15:  		/* lwz R28, <#[R27]> */
		/* 820E0964h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000000) );
		/* 820E0964h case   15:*/		return 0x820E0968;
		  /* 820E0968h */ case   16:  		/* mr R5, R17 */
		/* 820E0968h case   16:*/		regs.R5 = regs.R17;
		/* 820E0968h case   16:*/		return 0x820E096C;
		  /* 820E096Ch */ case   17:  		/* mr R4, R20 */
		/* 820E096Ch case   17:*/		regs.R4 = regs.R20;
		/* 820E096Ch case   17:*/		return 0x820E0970;
		  /* 820E0970h */ case   18:  		/* addi R6, R1, 288 */
		/* 820E0970h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820E0970h case   18:*/		return 0x820E0974;
		  /* 820E0974h */ case   19:  		/* mr R7, R16 */
		/* 820E0974h case   19:*/		regs.R7 = regs.R16;
		/* 820E0974h case   19:*/		return 0x820E0978;
		  /* 820E0978h */ case   20:  		/* subf R29, R16, R21 */
		/* 820E0978h case   20:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R16,regs.R21);
		/* 820E0978h case   20:*/		return 0x820E097C;
		  /* 820E097Ch */ case   21:  		/* mr R30, R22 */
		/* 820E097Ch case   21:*/		regs.R30 = regs.R22;
		/* 820E097Ch case   21:*/		return 0x820E0980;
		  /* 820E0980h */ case   22:  		/* cmpwi CR6, R28, 0 */
		/* 820E0980h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820E0980h case   22:*/		return 0x820E0984;
		  /* 820E0984h */ case   23:  		/* bc 4, CR6_EQ, 16 */
		/* 820E0984h case   23:*/		if ( !regs.CR[6].eq ) { return 0x820E0994;  }
		/* 820E0984h case   23:*/		return 0x820E0988;
		  /* 820E0988h */ case   24:  		/* lwzx R11, <#[R7 + R29]> */
		/* 820E0988h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R29 + 0x00000000) );
		/* 820E0988h case   24:*/		return 0x820E098C;
		  /* 820E098Ch */ case   25:  		/* cmplw CR6, R11, R19 */
		/* 820E098Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 820E098Ch case   25:*/		return 0x820E0990;
		  /* 820E0990h */ case   26:  		/* bc 4, CR6_EQ, 24 */
		/* 820E0990h case   26:*/		if ( !regs.CR[6].eq ) { return 0x820E09A8;  }
		/* 820E0990h case   26:*/		return 0x820E0994;
	}
	return 0x820E0994;
} // Block from 820E0928h-820E0994h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E0994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0994);
		  /* 820E0994h */ case    0:  		/* cmpwi CR6, R28, 1 */
		/* 820E0994h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000001);
		/* 820E0994h case    0:*/		return 0x820E0998;
		  /* 820E0998h */ case    1:  		/* bc 4, CR6_EQ, 176 */
		/* 820E0998h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0A48;  }
		/* 820E0998h case    1:*/		return 0x820E099C;
		  /* 820E099Ch */ case    2:  		/* lwz R11, <#[R7]> */
		/* 820E099Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 820E099Ch case    2:*/		return 0x820E09A0;
		  /* 820E09A0h */ case    3:  		/* rlwinm. R11, R11, 0, 4, 7 */
		/* 820E09A0h case    3:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E09A0h case    3:*/		return 0x820E09A4;
		  /* 820E09A4h */ case    4:  		/* bc 12, CR0_EQ, 164 */
		/* 820E09A4h case    4:*/		if ( regs.CR[0].eq ) { return 0x820E0A48;  }
		/* 820E09A4h case    4:*/		return 0x820E09A8;
	}
	return 0x820E09A8;
} // Block from 820E0994h-820E09A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E09A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E09A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E09A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E09A8);
		  /* 820E09A8h */ case    0:  		/* cmplw CR6, R4, R15 */
		/* 820E09A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R15);
		/* 820E09A8h case    0:*/		return 0x820E09AC;
		  /* 820E09ACh */ case    1:  		/* bc 4, CR6_LT, 156 */
		/* 820E09ACh case    1:*/		if ( !regs.CR[6].lt ) { return 0x820E0A48;  }
		/* 820E09ACh case    1:*/		return 0x820E09B0;
		  /* 820E09B0h */ case    2:  		/* subf R11, R4, R15 */
		/* 820E09B0h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R15);
		/* 820E09B0h case    2:*/		return 0x820E09B4;
		  /* 820E09B4h */ case    3:  		/* addi R10, R1, 240 */
		/* 820E09B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 820E09B4h case    3:*/		return 0x820E09B8;
		  /* 820E09B8h */ case    4:  		/* addi R3, R6, 32 */
		/* 820E09B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R6,0x20);
		/* 820E09B8h case    4:*/		return 0x820E09BC;
		  /* 820E09BCh */ case    5:  		/* addi R9, R7, 4 */
		/* 820E09BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x4);
		/* 820E09BCh case    5:*/		return 0x820E09C0;
		  /* 820E09C0h */ case    6:  		/* subf R31, R16, R10 */
		/* 820E09C0h case    6:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R16,regs.R10);
		/* 820E09C0h case    6:*/		return 0x820E09C4;
		  /* 820E09C4h */ case    7:  		/* mtspr CTR, R11 */
		/* 820E09C4h case    7:*/		regs.CTR = regs.R11;
		/* 820E09C4h case    7:*/		return 0x820E09C8;
		  /* 820E09C8h */ case    8:  		/* cmpwi CR6, R28, 0 */
		/* 820E09C8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820E09C8h case    8:*/		return 0x820E09CC;
		  /* 820E09CCh */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 820E09CCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E09E0;  }
		/* 820E09CCh case    9:*/		return 0x820E09D0;
		  /* 820E09D0h */ case   10:  		/* lwzx R11, <#[R5 + R21]> */
		/* 820E09D0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R21 + 0x00000000) );
		/* 820E09D0h case   10:*/		return 0x820E09D4;
		  /* 820E09D4h */ case   11:  		/* lwzx R10, <#[R9 + R29]> */
		/* 820E09D4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R29 + 0x00000000) );
		/* 820E09D4h case   11:*/		return 0x820E09D8;
		  /* 820E09D8h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 820E09D8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E09D8h case   12:*/		return 0x820E09DC;
		  /* 820E09DCh */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 820E09DCh case   13:*/		if ( regs.CR[6].eq ) { return 0x820E09FC;  }
		/* 820E09DCh case   13:*/		return 0x820E09E0;
	}
	return 0x820E09E0;
} // Block from 820E09A8h-820E09E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E09E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E09E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E09E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E09E0);
		  /* 820E09E0h */ case    0:  		/* cmpwi CR6, R28, 1 */
		/* 820E09E0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000001);
		/* 820E09E0h case    0:*/		return 0x820E09E4;
		  /* 820E09E4h */ case    1:  		/* bc 4, CR6_EQ, 88 */
		/* 820E09E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0A3C;  }
		/* 820E09E4h case    1:*/		return 0x820E09E8;
		  /* 820E09E8h */ case    2:  		/* lwzx R11, <#[R5 + R16]> */
		/* 820E09E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R16 + 0x00000000) );
		/* 820E09E8h case    2:*/		return 0x820E09EC;
		  /* 820E09ECh */ case    3:  		/* lwz R10, <#[R9]> */
		/* 820E09ECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 820E09ECh case    3:*/		return 0x820E09F0;
		  /* 820E09F0h */ case    4:  		/* xor R11, R11, R10 */
		/* 820E09F0h case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820E09F0h case    4:*/		return 0x820E09F4;
		  /* 820E09F4h */ case    5:  		/* rlwinm. R11, R11, 0, 4, 7 */
		/* 820E09F4h case    5:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E09F4h case    5:*/		return 0x820E09F8;
		  /* 820E09F8h */ case    6:  		/* bc 4, CR0_EQ, 68 */
		/* 820E09F8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820E0A3C;  }
		/* 820E09F8h case    6:*/		return 0x820E09FC;
	}
	return 0x820E09FC;
} // Block from 820E09E0h-820E09FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E09FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E09FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E09FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E09FC);
		  /* 820E09FCh */ case    0:  		/* mr R10, R3 */
		/* 820E09FCh case    0:*/		regs.R10 = regs.R3;
		/* 820E09FCh case    0:*/		return 0x820E0A00;
		  /* 820E0A00h */ case    1:  		/* mr R11, R6 */
		/* 820E0A00h case    1:*/		regs.R11 = regs.R6;
		/* 820E0A00h case    1:*/		return 0x820E0A04;
		  /* 820E0A04h */ case    2:  		/* lbz R8, <#[R11]> */
		/* 820E0A04h case    2:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0A04h case    2:*/		return 0x820E0A08;
		  /* 820E0A08h */ case    3:  		/* lbz R25, <#[R10]> */
		/* 820E0A08h case    3:*/		cpu::mem::load8z( regs, &regs.R25, (uint32)(regs.R10 + 0x00000000) );
		/* 820E0A08h case    3:*/		return 0x820E0A0C;
		  /* 820E0A0Ch */ case    4:  		/* cmpwi CR0, R8, 0 */
		/* 820E0A0Ch case    4:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 820E0A0Ch case    4:*/		return 0x820E0A10;
		  /* 820E0A10h */ case    5:  		/* subf R8, R25, R8 */
		/* 820E0A10h case    5:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R25,regs.R8);
		/* 820E0A10h case    5:*/		return 0x820E0A14;
		  /* 820E0A14h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 820E0A14h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E0A28;  }
		/* 820E0A14h case    6:*/		return 0x820E0A18;
		  /* 820E0A18h */ case    7:  		/* addi R11, R11, 1 */
		/* 820E0A18h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E0A18h case    7:*/		return 0x820E0A1C;
		  /* 820E0A1Ch */ case    8:  		/* addi R10, R10, 1 */
		/* 820E0A1Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E0A1Ch case    8:*/		return 0x820E0A20;
		  /* 820E0A20h */ case    9:  		/* cmpwi CR6, R8, 0 */
		/* 820E0A20h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820E0A20h case    9:*/		return 0x820E0A24;
		  /* 820E0A24h */ case   10:  		/* bc 12, CR6_EQ, -32 */
		/* 820E0A24h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E0A04;  }
		/* 820E0A24h case   10:*/		return 0x820E0A28;
	}
	return 0x820E0A28;
} // Block from 820E09FCh-820E0A28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E0A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0A28);
		  /* 820E0A28h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 820E0A28h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 820E0A28h case    0:*/		return 0x820E0A2C;
		  /* 820E0A2Ch */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 820E0A2Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x820E0A3C;  }
		/* 820E0A2Ch case    1:*/		return 0x820E0A30;
		  /* 820E0A30h */ case    2:  		/* addi R11, R1, 240 */
		/* 820E0A30h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 820E0A30h case    2:*/		return 0x820E0A34;
		  /* 820E0A34h */ case    3:  		/* stwx R20, <#[R5 + R11]> */
		/* 820E0A34h case    3:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 820E0A34h case    3:*/		return 0x820E0A38;
		  /* 820E0A38h */ case    4:  		/* stwx R20, <#[R31 + R9]> */
		/* 820E0A38h case    4:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 820E0A38h case    4:*/		return 0x820E0A3C;
	}
	return 0x820E0A3C;
} // Block from 820E0A28h-820E0A3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E0A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0A3C);
		  /* 820E0A3Ch */ case    0:  		/* addi R3, R3, 32 */
		/* 820E0A3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x20);
		/* 820E0A3Ch case    0:*/		return 0x820E0A40;
		  /* 820E0A40h */ case    1:  		/* addi R9, R9, 4 */
		/* 820E0A40h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E0A40h case    1:*/		return 0x820E0A44;
		  /* 820E0A44h */ case    2:  		/* bc 16, CR0_LT, -124 */
		/* 820E0A44h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E09C8;  }
		/* 820E0A44h case    2:*/		return 0x820E0A48;
	}
	return 0x820E0A48;
} // Block from 820E0A3Ch-820E0A48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E0A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0A48);
		  /* 820E0A48h */ case    0:  		/* addic. R30, R30, -1 */
		/* 820E0A48h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 820E0A48h case    0:*/		return 0x820E0A4C;
		  /* 820E0A4Ch */ case    1:  		/* addi R4, R4, 1 */
		/* 820E0A4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E0A4Ch case    1:*/		return 0x820E0A50;
		  /* 820E0A50h */ case    2:  		/* addi R5, R5, 4 */
		/* 820E0A50h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 820E0A50h case    2:*/		return 0x820E0A54;
		  /* 820E0A54h */ case    3:  		/* addi R7, R7, 4 */
		/* 820E0A54h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 820E0A54h case    3:*/		return 0x820E0A58;
		  /* 820E0A58h */ case    4:  		/* addi R6, R6, 32 */
		/* 820E0A58h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x20);
		/* 820E0A58h case    4:*/		return 0x820E0A5C;
		  /* 820E0A5Ch */ case    5:  		/* bc 4, CR0_EQ, -220 */
		/* 820E0A5Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x820E0980;  }
		/* 820E0A5Ch case    5:*/		return 0x820E0A60;
	}
	return 0x820E0A60;
} // Block from 820E0A48h-820E0A60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E0A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0A60);
		  /* 820E0A60h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820E0A60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820E0A60h case    0:*/		return 0x820E0A64;
		  /* 820E0A64h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 820E0A64h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E0AD0;  }
		/* 820E0A64h case    1:*/		return 0x820E0A68;
		  /* 820E0A68h */ case    2:  		/* addi R10, R1, 240 */
		/* 820E0A68h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 820E0A68h case    2:*/		return 0x820E0A6C;
		  /* 820E0A6Ch */ case    3:  		/* lwz R7, <#[R27]> */
		/* 820E0A6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000000) );
		/* 820E0A6Ch case    3:*/		return 0x820E0A70;
		  /* 820E0A70h */ case    4:  		/* addi R9, R1, 224 */
		/* 820E0A70h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE0);
		/* 820E0A70h case    4:*/		return 0x820E0A74;
		  /* 820E0A74h */ case    5:  		/* mtspr CTR, R15 */
		/* 820E0A74h case    5:*/		regs.CTR = regs.R15;
		/* 820E0A74h case    5:*/		return 0x820E0A78;
		  /* 820E0A78h */ case    6:  		/* subf R6, R16, R10 */
		/* 820E0A78h case    6:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R16,regs.R10);
		/* 820E0A78h case    6:*/		return 0x820E0A7C;
		  /* 820E0A7Ch */ case    7:  		/* mr R11, R16 */
		/* 820E0A7Ch case    7:*/		regs.R11 = regs.R16;
		/* 820E0A7Ch case    7:*/		return 0x820E0A80;
		  /* 820E0A80h */ case    8:  		/* subf R8, R16, R21 */
		/* 820E0A80h case    8:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R16,regs.R21);
		/* 820E0A80h case    8:*/		return 0x820E0A84;
		  /* 820E0A84h */ case    9:  		/* subf R10, R16, R9 */
		/* 820E0A84h case    9:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R16,regs.R9);
		/* 820E0A84h case    9:*/		return 0x820E0A88;
		  /* 820E0A88h */ case   10:  		/* cmpwi CR6, R7, 0 */
		/* 820E0A88h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 820E0A88h case   10:*/		return 0x820E0A8C;
		  /* 820E0A8Ch */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 820E0A8Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E0A9C;  }
		/* 820E0A8Ch case   11:*/		return 0x820E0A90;
		  /* 820E0A90h */ case   12:  		/* lwzx R9, <#[R8 + R11]> */
		/* 820E0A90h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E0A90h case   12:*/		return 0x820E0A94;
		  /* 820E0A94h */ case   13:  		/* cmplw CR6, R9, R19 */
		/* 820E0A94h case   13:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R19);
		/* 820E0A94h case   13:*/		return 0x820E0A98;
		  /* 820E0A98h */ case   14:  		/* bc 4, CR6_EQ, 24 */
		/* 820E0A98h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E0AB0;  }
		/* 820E0A98h case   14:*/		return 0x820E0A9C;
	}
	return 0x820E0A9C;
} // Block from 820E0A60h-820E0A9Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E0A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0A9C);
		  /* 820E0A9Ch */ case    0:  		/* cmpwi CR6, R7, 1 */
		/* 820E0A9Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000001);
		/* 820E0A9Ch case    0:*/		return 0x820E0AA0;
		  /* 820E0AA0h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 820E0AA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0AC8;  }
		/* 820E0AA0h case    1:*/		return 0x820E0AA4;
		  /* 820E0AA4h */ case    2:  		/* lwz R9, <#[R11]> */
		/* 820E0AA4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0AA4h case    2:*/		return 0x820E0AA8;
		  /* 820E0AA8h */ case    3:  		/* rlwinm. R9, R9, 0, 4, 7 */
		/* 820E0AA8h case    3:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R9,regs.R9);
		/* 820E0AA8h case    3:*/		return 0x820E0AAC;
		  /* 820E0AACh */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 820E0AACh case    4:*/		if ( regs.CR[0].eq ) { return 0x820E0AC8;  }
		/* 820E0AACh case    4:*/		return 0x820E0AB0;
	}
	return 0x820E0AB0;
} // Block from 820E0A9Ch-820E0AB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E0AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0AB0);
		  /* 820E0AB0h */ case    0:  		/* lwzx R9, <#[R6 + R11]> */
		/* 820E0AB0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 820E0AB0h case    0:*/		return 0x820E0AB4;
		  /* 820E0AB4h */ case    1:  		/* cmpwi CR6, R9, 0 */
		/* 820E0AB4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E0AB4h case    1:*/		return 0x820E0AB8;
		  /* 820E0AB8h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 820E0AB8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E0AC8;  }
		/* 820E0AB8h case    2:*/		return 0x820E0ABC;
		  /* 820E0ABCh */ case    3:  		/* lwzx R9, <#[R10 + R11]> */
		/* 820E0ABCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E0ABCh case    3:*/		return 0x820E0AC0;
		  /* 820E0AC0h */ case    4:  		/* addi R9, R9, 1 */
		/* 820E0AC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E0AC0h case    4:*/		return 0x820E0AC4;
		  /* 820E0AC4h */ case    5:  		/* stwx R9, <#[R10 + R11]> */
		/* 820E0AC4h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E0AC4h case    5:*/		return 0x820E0AC8;
	}
	return 0x820E0AC8;
} // Block from 820E0AB0h-820E0AC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E0AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0AC8);
		  /* 820E0AC8h */ case    0:  		/* addi R11, R11, 4 */
		/* 820E0AC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E0AC8h case    0:*/		return 0x820E0ACC;
		  /* 820E0ACCh */ case    1:  		/* bc 16, CR0_LT, -68 */
		/* 820E0ACCh case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E0A88;  }
		/* 820E0ACCh case    1:*/		return 0x820E0AD0;
	}
	return 0x820E0AD0;
} // Block from 820E0AC8h-820E0AD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0AD0);
		  /* 820E0AD0h */ case    0:  		/* addic. R26, R26, -1 */
		/* 820E0AD0h case    0:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 820E0AD0h case    0:*/		return 0x820E0AD4;
		  /* 820E0AD4h */ case    1:  		/* addi R27, R27, 4 */
		/* 820E0AD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 820E0AD4h case    1:*/		return 0x820E0AD8;
		  /* 820E0AD8h */ case    2:  		/* bc 4, CR0_EQ, -396 */
		/* 820E0AD8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820E094C;  }
		/* 820E0AD8h case    2:*/		return 0x820E0ADC;
		  /* 820E0ADCh */ case    3:  		/* cmplwi CR6, R22, 0 */
		/* 820E0ADCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820E0ADCh case    3:*/		return 0x820E0AE0;
		  /* 820E0AE0h */ case    4:  		/* bc 12, CR6_EQ, 116 */
		/* 820E0AE0h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E0B54;  }
		/* 820E0AE0h case    4:*/		return 0x820E0AE4;
		  /* 820E0AE4h */ case    5:  		/* mr R11, R17 */
		/* 820E0AE4h case    5:*/		regs.R11 = regs.R17;
		/* 820E0AE4h case    5:*/		return 0x820E0AE8;
		  /* 820E0AE8h */ case    6:  		/* mr R4, R20 */
		/* 820E0AE8h case    6:*/		regs.R4 = regs.R20;
		/* 820E0AE8h case    6:*/		return 0x820E0AEC;
		  /* 820E0AECh */ case    7:  		/* mr R3, R22 */
		/* 820E0AECh case    7:*/		regs.R3 = regs.R22;
		/* 820E0AECh case    7:*/		return 0x820E0AF0;
		  /* 820E0AF0h */ case    8:  		/* cmplw CR6, R4, R15 */
		/* 820E0AF0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R15);
		/* 820E0AF0h case    8:*/		return 0x820E0AF4;
		  /* 820E0AF4h */ case    9:  		/* bc 4, CR6_LT, 80 */
		/* 820E0AF4h case    9:*/		if ( !regs.CR[6].lt ) { return 0x820E0B44;  }
		/* 820E0AF4h case    9:*/		return 0x820E0AF8;
		  /* 820E0AF8h */ case   10:  		/* subf R9, R4, R15 */
		/* 820E0AF8h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R4,regs.R15);
		/* 820E0AF8h case   10:*/		return 0x820E0AFC;
		  /* 820E0AFCh */ case   11:  		/* addi R10, R11, 4 */
		/* 820E0AFCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 820E0AFCh case   11:*/		return 0x820E0B00;
		  /* 820E0B00h */ case   12:  		/* mtspr CTR, R9 */
		/* 820E0B00h case   12:*/		regs.CTR = regs.R9;
		/* 820E0B00h case   12:*/		return 0x820E0B04;
		  /* 820E0B04h */ case   13:  		/* addi R6, R1, 224 */
		/* 820E0B04h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 820E0B04h case   13:*/		return 0x820E0B08;
		  /* 820E0B08h */ case   14:  		/* addi R5, R1, 224 */
		/* 820E0B08h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820E0B08h case   14:*/		return 0x820E0B0C;
		  /* 820E0B0Ch */ case   15:  		/* lwzx R7, <#[R11 + R6]> */
		/* 820E0B0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820E0B0Ch case   15:*/		return 0x820E0B10;
		  /* 820E0B10h */ case   16:  		/* lwzx R8, <#[R10 + R5]> */
		/* 820E0B10h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 820E0B10h case   16:*/		return 0x820E0B14;
		  /* 820E0B14h */ case   17:  		/* cmplw CR6, R8, R7 */
		/* 820E0B14h case   17:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820E0B14h case   17:*/		return 0x820E0B18;
		  /* 820E0B18h */ case   18:  		/* bc 4, CR6_LT, 36 */
		/* 820E0B18h case   18:*/		if ( !regs.CR[6].lt ) { return 0x820E0B3C;  }
		/* 820E0B18h case   18:*/		return 0x820E0B1C;
		  /* 820E0B1Ch */ case   19:  		/* stwx R8, <#[R11 + R6]> */
		/* 820E0B1Ch case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820E0B1Ch case   19:*/		return 0x820E0B20;
		  /* 820E0B20h */ case   20:  		/* addi R9, R1, 208 */
		/* 820E0B20h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xD0);
		/* 820E0B20h case   20:*/		return 0x820E0B24;
		  /* 820E0B24h */ case   21:  		/* addi R8, R1, 208 */
		/* 820E0B24h case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xD0);
		/* 820E0B24h case   21:*/		return 0x820E0B28;
		  /* 820E0B28h */ case   22:  		/* stwx R7, <#[R10 + R5]> */
		/* 820E0B28h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 820E0B28h case   22:*/		return 0x820E0B2C;
		  /* 820E0B2Ch */ case   23:  		/* lwzx R7, <#[R10 + R9]> */
		/* 820E0B2Ch case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E0B2Ch case   23:*/		return 0x820E0B30;
		  /* 820E0B30h */ case   24:  		/* lwzx R6, <#[R11 + R8]> */
		/* 820E0B30h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E0B30h case   24:*/		return 0x820E0B34;
		  /* 820E0B34h */ case   25:  		/* stwx R7, <#[R11 + R8]> */
		/* 820E0B34h case   25:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E0B34h case   25:*/		return 0x820E0B38;
		  /* 820E0B38h */ case   26:  		/* stwx R6, <#[R10 + R9]> */
		/* 820E0B38h case   26:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E0B38h case   26:*/		return 0x820E0B3C;
	}
	return 0x820E0B3C;
} // Block from 820E0AD0h-820E0B3Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E0B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0B3C);
		  /* 820E0B3Ch */ case    0:  		/* addi R10, R10, 4 */
		/* 820E0B3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E0B3Ch case    0:*/		return 0x820E0B40;
		  /* 820E0B40h */ case    1:  		/* bc 16, CR0_LT, -60 */
		/* 820E0B40h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E0B04;  }
		/* 820E0B40h case    1:*/		return 0x820E0B44;
	}
	return 0x820E0B44;
} // Block from 820E0B3Ch-820E0B44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0B44);
		  /* 820E0B44h */ case    0:  		/* addic. R3, R3, -1 */
		/* 820E0B44h case    0:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0xFFFFFFFF);
		/* 820E0B44h case    0:*/		return 0x820E0B48;
		  /* 820E0B48h */ case    1:  		/* addi R4, R4, 1 */
		/* 820E0B48h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E0B48h case    1:*/		return 0x820E0B4C;
		  /* 820E0B4Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 820E0B4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E0B4Ch case    2:*/		return 0x820E0B50;
		  /* 820E0B50h */ case    3:  		/* bc 4, CR0_EQ, -96 */
		/* 820E0B50h case    3:*/		if ( !regs.CR[0].eq ) { return 0x820E0AF0;  }
		/* 820E0B50h case    3:*/		return 0x820E0B54;
	}
	return 0x820E0B54;
} // Block from 820E0B44h-820E0B54h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E0B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0B54);
		  /* 820E0B54h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820E0B54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820E0B54h case    0:*/		return 0x820E0B58;
		  /* 820E0B58h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820E0B58h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E0B6C;  }
		/* 820E0B58h case    1:*/		return 0x820E0B5C;
		  /* 820E0B5Ch */ case    2:  		/* addi R4, R1, 208 */
		/* 820E0B5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E0B5Ch case    2:*/		return 0x820E0B60;
		  /* 820E0B60h */ case    3:  		/* addi R3, R1, 224 */
		/* 820E0B60h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820E0B60h case    3:*/		return 0x820E0B64;
		  /* 820E0B64h */ case    4:  		/* rlwinm R5, R15, 2, 0, 29 */
		/* 820E0B64h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R15);
		/* 820E0B64h case    4:*/		return 0x820E0B68;
		  /* 820E0B68h */ case    5:  		/* bl -322864 */
		/* 820E0B68h case    5:*/		regs.LR = 0x820E0B6C; return 0x82091E38;
		/* 820E0B68h case    5:*/		return 0x820E0B6C;
	}
	return 0x820E0B6C;
} // Block from 820E0B54h-820E0B6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E0B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0B6C);
		  /* 820E0B6Ch */ case    0:  		/* lis R11, -32254 */
		/* 820E0B6Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E0B6Ch case    0:*/		return 0x820E0B70;
		  /* 820E0B70h */ case    1:  		/* lis R10, -32254 */
		/* 820E0B70h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E0B70h case    1:*/		return 0x820E0B74;
		  /* 820E0B74h */ case    2:  		/* lis R9, -32254 */
		/* 820E0B74h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820E0B74h case    2:*/		return 0x820E0B78;
		  /* 820E0B78h */ case    3:  		/* lis R8, -32254 */
		/* 820E0B78h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820E0B78h case    3:*/		return 0x820E0B7C;
		  /* 820E0B7Ch */ case    4:  		/* lis R7, -32254 */
		/* 820E0B7Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8202);
		/* 820E0B7Ch case    4:*/		return 0x820E0B80;
		  /* 820E0B80h */ case    5:  		/* addi R18, R1, 192 */
		/* 820E0B80h case    5:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R1,0xC0);
		/* 820E0B80h case    5:*/		return 0x820E0B84;
		  /* 820E0B84h */ case    6:  		/* addi R19, R11, -30476 */
		/* 820E0B84h case    6:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFF88F4);
		/* 820E0B84h case    6:*/		return 0x820E0B88;
		  /* 820E0B88h */ case    7:  		/* addi R22, R10, -30516 */
		/* 820E0B88h case    7:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0xFFFF88CC);
		/* 820E0B88h case    7:*/		return 0x820E0B8C;
		  /* 820E0B8Ch */ case    8:  		/* addi R23, R9, -30692 */
		/* 820E0B8Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R9,0xFFFF881C);
		/* 820E0B8Ch case    8:*/		return 0x820E0B90;
		  /* 820E0B90h */ case    9:  		/* addi R21, R8, -26572 */
		/* 820E0B90h case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R8,0xFFFF9834);
		/* 820E0B90h case    9:*/		return 0x820E0B94;
		  /* 820E0B94h */ case   10:  		/* addi R20, R7, -26584 */
		/* 820E0B94h case   10:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R7,0xFFFF9828);
		/* 820E0B94h case   10:*/		return 0x820E0B98;
		  /* 820E0B98h */ case   11:  		/* li R25, 0 */
		/* 820E0B98h case   11:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820E0B98h case   11:*/		return 0x820E0B9C;
		  /* 820E0B9Ch */ case   12:  		/* cmplwi CR6, R15, 0 */
		/* 820E0B9Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820E0B9Ch case   12:*/		return 0x820E0BA0;
		  /* 820E0BA0h */ case   13:  		/* bc 12, CR6_EQ, 1036 */
		/* 820E0BA0h case   13:*/		if ( regs.CR[6].eq ) { return 0x820E0FAC;  }
		/* 820E0BA0h case   13:*/		return 0x820E0BA4;
		  /* 820E0BA4h */ case   14:  		/* lwz R24, <#[R18]> */
		/* 820E0BA4h case   14:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R18 + 0x00000000) );
		/* 820E0BA4h case   14:*/		return 0x820E0BA8;
		  /* 820E0BA8h */ case   15:  		/* addi R26, R1, 208 */
		/* 820E0BA8h case   15:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0xD0);
		/* 820E0BA8h case   15:*/		return 0x820E0BAC;
		  /* 820E0BACh */ case   16:  		/* lwz R29, <#[R1 + 732]> */
		/* 820E0BACh case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000002DC) );
		/* 820E0BACh case   16:*/		return 0x820E0BB0;
		  /* 820E0BB0h */ case   17:  		/* cmpwi CR6, R24, 0 */
		/* 820E0BB0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820E0BB0h case   17:*/		return 0x820E0BB4;
		  /* 820E0BB4h */ case   18:  		/* bc 4, CR6_EQ, 28 */
		/* 820E0BB4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820E0BD0;  }
		/* 820E0BB4h case   18:*/		return 0x820E0BB8;
		  /* 820E0BB8h */ case   19:  		/* lwz R11, <#[R26]> */
		/* 820E0BB8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0BB8h case   19:*/		return 0x820E0BBC;
		  /* 820E0BBCh */ case   20:  		/* lis R10, 228 */
		/* 820E0BBCh case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xE4);
		/* 820E0BBCh case   20:*/		return 0x820E0BC0;
		  /* 820E0BC0h */ case   21:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820E0BC0h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820E0BC0h case   21:*/		return 0x820E0BC4;
		  /* 820E0BC4h */ case   22:  		/* lwzx R9, <#[R9 + R29]> */
		/* 820E0BC4h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R29 + 0x00000000) );
		/* 820E0BC4h case   22:*/		return 0x820E0BC8;
		  /* 820E0BC8h */ case   23:  		/* cmplw CR6, R9, R10 */
		/* 820E0BC8h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E0BC8h case   23:*/		return 0x820E0BCC;
		  /* 820E0BCCh */ case   24:  		/* bc 12, CR6_EQ, 32 */
		/* 820E0BCCh case   24:*/		if ( regs.CR[6].eq ) { return 0x820E0BEC;  }
		/* 820E0BCCh case   24:*/		return 0x820E0BD0;
	}
	return 0x820E0BD0;
} // Block from 820E0B6Ch-820E0BD0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E0BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0BD0);
		  /* 820E0BD0h */ case    0:  		/* cmpwi CR6, R24, 1 */
		/* 820E0BD0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000001);
		/* 820E0BD0h case    0:*/		return 0x820E0BD4;
		  /* 820E0BD4h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 820E0BD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0C0C;  }
		/* 820E0BD4h case    1:*/		return 0x820E0BD8;
		  /* 820E0BD8h */ case    2:  		/* lwz R11, <#[R26]> */
		/* 820E0BD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0BD8h case    2:*/		return 0x820E0BDC;
		  /* 820E0BDCh */ case    3:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 820E0BDCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 820E0BDCh case    3:*/		return 0x820E0BE0;
		  /* 820E0BE0h */ case    4:  		/* lwzx R10, <#[R10 + R16]> */
		/* 820E0BE0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R16 + 0x00000000) );
		/* 820E0BE0h case    4:*/		return 0x820E0BE4;
		  /* 820E0BE4h */ case    5:  		/* rlwinm. R10, R10, 0, 4, 7 */
		/* 820E0BE4h case    5:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R10,regs.R10);
		/* 820E0BE4h case    5:*/		return 0x820E0BE8;
		  /* 820E0BE8h */ case    6:  		/* bc 4, CR0_EQ, 36 */
		/* 820E0BE8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820E0C0C;  }
		/* 820E0BE8h case    6:*/		return 0x820E0BEC;
	}
	return 0x820E0BEC;
} // Block from 820E0BD0h-820E0BECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E0BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0BEC);
		  /* 820E0BECh */ case    0:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 820E0BECh case    0:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 820E0BECh case    0:*/		return 0x820E0BF0;
		  /* 820E0BF0h */ case    1:  		/* addi R10, R1, 288 */
		/* 820E0BF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x120);
		/* 820E0BF0h case    1:*/		return 0x820E0BF4;
		  /* 820E0BF4h */ case    2:  		/* addi R9, R1, 384 */
		/* 820E0BF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x180);
		/* 820E0BF4h case    2:*/		return 0x820E0BF8;
		  /* 820E0BF8h */ case    3:  		/* add R5, R11, R10 */
		/* 820E0BF8h case    3:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R10);
		/* 820E0BF8h case    3:*/		return 0x820E0BFC;
		  /* 820E0BFCh */ case    4:  		/* li R4, 32 */
		/* 820E0BFCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0BFCh case    4:*/		return 0x820E0C00;
		  /* 820E0C00h */ case    5:  		/* add R3, R11, R9 */
		/* 820E0C00h case    5:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R9);
		/* 820E0C00h case    5:*/		return 0x820E0C04;
		  /* 820E0C04h */ case    6:  		/* bl -238868 */
		/* 820E0C04h case    6:*/		regs.LR = 0x820E0C08; return 0x820A66F0;
		/* 820E0C04h case    6:*/		return 0x820E0C08;
		  /* 820E0C08h */ case    7:  		/* b 844 */
		/* 820E0C08h case    7:*/		return 0x820E0F54;
		/* 820E0C08h case    7:*/		return 0x820E0C0C;
	}
	return 0x820E0C0C;
} // Block from 820E0BECh-820E0C0Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E0C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0C0C);
		  /* 820E0C0Ch */ case    0:  		/* li R30, 0 */
		/* 820E0C0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E0C0Ch case    0:*/		return 0x820E0C10;
		  /* 820E0C10h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 820E0C10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820E0C10h case    1:*/		return 0x820E0C14;
		  /* 820E0C14h */ case    2:  		/* bc 12, CR6_EQ, 264 */
		/* 820E0C14h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E0D1C;  }
		/* 820E0C14h case    2:*/		return 0x820E0C18;
		  /* 820E0C18h */ case    3:  		/* addi R7, R1, 208 */
		/* 820E0C18h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD0);
		/* 820E0C18h case    3:*/		return 0x820E0C1C;
		  /* 820E0C1Ch */ case    4:  		/* cmpwi CR6, R24, 0 */
		/* 820E0C1Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820E0C1Ch case    4:*/		return 0x820E0C20;
	}
	return 0x820E0C20;
} // Block from 820E0C0Ch-820E0C20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E0C20h
// Function '?GetFormatVarFromSrcReg@C30SWProgram@D3DXShader@@IAAXKKPADIPBH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0C20);
		  /* 820E0C20h */ case    0:  		/* bc 4, CR6_EQ, 36 */
		/* 820E0C20h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820E0C44;  }
		/* 820E0C20h case    0:*/		return 0x820E0C24;
		  /* 820E0C24h */ case    1:  		/* lwz R11, <#[R7]> */
		/* 820E0C24h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 820E0C24h case    1:*/		return 0x820E0C28;
		  /* 820E0C28h */ case    2:  		/* lwz R10, <#[R26]> */
		/* 820E0C28h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0C28h case    2:*/		return 0x820E0C2C;
		  /* 820E0C2Ch */ case    3:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820E0C2Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820E0C2Ch case    3:*/		return 0x820E0C30;
		  /* 820E0C30h */ case    4:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 820E0C30h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 820E0C30h case    4:*/		return 0x820E0C34;
		  /* 820E0C34h */ case    5:  		/* lwzx R9, <#[R9 + R29]> */
		/* 820E0C34h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R29 + 0x00000000) );
		/* 820E0C34h case    5:*/		return 0x820E0C38;
		  /* 820E0C38h */ case    6:  		/* lwzx R8, <#[R8 + R29]> */
		/* 820E0C38h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R29 + 0x00000000) );
		/* 820E0C38h case    6:*/		return 0x820E0C3C;
		  /* 820E0C3Ch */ case    7:  		/* cmplw CR6, R8, R9 */
		/* 820E0C3Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 820E0C3Ch case    7:*/		return 0x820E0C40;
		  /* 820E0C40h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 820E0C40h case    8:*/		if ( regs.CR[6].eq ) { return 0x820E0C70;  }
		/* 820E0C40h case    8:*/		return 0x820E0C44;
	}
	return 0x820E0C44;
} // Block from 820E0C20h-820E0C44h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E0C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0C44);
		  /* 820E0C44h */ case    0:  		/* cmpwi CR6, R24, 1 */
		/* 820E0C44h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000001);
		/* 820E0C44h case    0:*/		return 0x820E0C48;
		  /* 820E0C48h */ case    1:  		/* bc 4, CR6_EQ, 108 */
		/* 820E0C48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0CB4;  }
		/* 820E0C48h case    1:*/		return 0x820E0C4C;
		  /* 820E0C4Ch */ case    2:  		/* lwz R11, <#[R7]> */
		/* 820E0C4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 820E0C4Ch case    2:*/		return 0x820E0C50;
		  /* 820E0C50h */ case    3:  		/* lwz R10, <#[R26]> */
		/* 820E0C50h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0C50h case    3:*/		return 0x820E0C54;
		  /* 820E0C54h */ case    4:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820E0C54h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820E0C54h case    4:*/		return 0x820E0C58;
		  /* 820E0C58h */ case    5:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 820E0C58h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 820E0C58h case    5:*/		return 0x820E0C5C;
		  /* 820E0C5Ch */ case    6:  		/* lwzx R9, <#[R9 + R16]> */
		/* 820E0C5Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R16 + 0x00000000) );
		/* 820E0C5Ch case    6:*/		return 0x820E0C60;
		  /* 820E0C60h */ case    7:  		/* lwzx R8, <#[R8 + R16]> */
		/* 820E0C60h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R16 + 0x00000000) );
		/* 820E0C60h case    7:*/		return 0x820E0C64;
		  /* 820E0C64h */ case    8:  		/* xor R9, R8, R9 */
		/* 820E0C64h case    8:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 820E0C64h case    8:*/		return 0x820E0C68;
		  /* 820E0C68h */ case    9:  		/* rlwinm. R9, R9, 0, 4, 7 */
		/* 820E0C68h case    9:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R9,regs.R9);
		/* 820E0C68h case    9:*/		return 0x820E0C6C;
		  /* 820E0C6Ch */ case   10:  		/* bc 4, CR0_EQ, 72 */
		/* 820E0C6Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x820E0CB4;  }
		/* 820E0C6Ch case   10:*/		return 0x820E0C70;
	}
	return 0x820E0C70;
} // Block from 820E0C44h-820E0C70h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E0C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0C70);
		  /* 820E0C70h */ case    0:  		/* rlwinm R9, R10, 5, 0, 26 */
		/* 820E0C70h case    0:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R10);
		/* 820E0C70h case    0:*/		return 0x820E0C74;
		  /* 820E0C74h */ case    1:  		/* rlwinm R10, R11, 5, 0, 26 */
		/* 820E0C74h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R11);
		/* 820E0C74h case    1:*/		return 0x820E0C78;
		  /* 820E0C78h */ case    2:  		/* addi R11, R1, 288 */
		/* 820E0C78h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x120);
		/* 820E0C78h case    2:*/		return 0x820E0C7C;
		  /* 820E0C7Ch */ case    3:  		/* addi R8, R1, 288 */
		/* 820E0C7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x120);
		/* 820E0C7Ch case    3:*/		return 0x820E0C80;
		  /* 820E0C80h */ case    4:  		/* add R10, R10, R11 */
		/* 820E0C80h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820E0C80h case    4:*/		return 0x820E0C84;
		  /* 820E0C84h */ case    5:  		/* add R11, R9, R8 */
		/* 820E0C84h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 820E0C84h case    5:*/		return 0x820E0C88;
		  /* 820E0C88h */ case    6:  		/* lbz R8, <#[R11]> */
		/* 820E0C88h case    6:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E0C88h case    6:*/		return 0x820E0C8C;
		  /* 820E0C8Ch */ case    7:  		/* lbz R6, <#[R10]> */
		/* 820E0C8Ch case    7:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 820E0C8Ch case    7:*/		return 0x820E0C90;
		  /* 820E0C90h */ case    8:  		/* cmpwi CR0, R8, 0 */
		/* 820E0C90h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 820E0C90h case    8:*/		return 0x820E0C94;
		  /* 820E0C94h */ case    9:  		/* subf R8, R6, R8 */
		/* 820E0C94h case    9:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 820E0C94h case    9:*/		return 0x820E0C98;
		  /* 820E0C98h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 820E0C98h case   10:*/		if ( regs.CR[0].eq ) { return 0x820E0CAC;  }
		/* 820E0C98h case   10:*/		return 0x820E0C9C;
		  /* 820E0C9Ch */ case   11:  		/* addi R11, R11, 1 */
		/* 820E0C9Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E0C9Ch case   11:*/		return 0x820E0CA0;
		  /* 820E0CA0h */ case   12:  		/* addi R10, R10, 1 */
		/* 820E0CA0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E0CA0h case   12:*/		return 0x820E0CA4;
		  /* 820E0CA4h */ case   13:  		/* cmpwi CR6, R8, 0 */
		/* 820E0CA4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820E0CA4h case   13:*/		return 0x820E0CA8;
		  /* 820E0CA8h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 820E0CA8h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E0C88;  }
		/* 820E0CA8h case   14:*/		return 0x820E0CAC;
	}
	return 0x820E0CAC;
} // Block from 820E0C70h-820E0CACh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E0CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0CAC);
		  /* 820E0CACh */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 820E0CACh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 820E0CACh case    0:*/		return 0x820E0CB0;
		  /* 820E0CB0h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 820E0CB0h case    1:*/		if ( regs.CR[0].eq ) { return 0x820E0CC8;  }
		/* 820E0CB0h case    1:*/		return 0x820E0CB4;
	}
	return 0x820E0CB4;
} // Block from 820E0CACh-820E0CB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0CB4);
		  /* 820E0CB4h */ case    0:  		/* addi R30, R30, 1 */
		/* 820E0CB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E0CB4h case    0:*/		return 0x820E0CB8;
		  /* 820E0CB8h */ case    1:  		/* addi R7, R7, 4 */
		/* 820E0CB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 820E0CB8h case    1:*/		return 0x820E0CBC;
		  /* 820E0CBCh */ case    2:  		/* cmplw CR6, R30, R25 */
		/* 820E0CBCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 820E0CBCh case    2:*/		return 0x820E0CC0;
		  /* 820E0CC0h */ case    3:  		/* bc 12, CR6_LT, -164 */
		/* 820E0CC0h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E0C1C;  }
		/* 820E0CC0h case    3:*/		return 0x820E0CC4;
		  /* 820E0CC4h */ case    4:  		/* b 80 */
		/* 820E0CC4h case    4:*/		return 0x820E0D14;
		/* 820E0CC4h case    4:*/		return 0x820E0CC8;
	}
	return 0x820E0CC8;
} // Block from 820E0CB4h-820E0CC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E0CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0CC8);
		  /* 820E0CC8h */ case    0:  		/* addi R8, R1, 208 */
		/* 820E0CC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xD0);
		/* 820E0CC8h case    0:*/		return 0x820E0CCC;
		  /* 820E0CCCh */ case    1:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820E0CCCh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820E0CCCh case    1:*/		return 0x820E0CD0;
		  /* 820E0CD0h */ case    2:  		/* addi R11, R1, 384 */
		/* 820E0CD0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 820E0CD0h case    2:*/		return 0x820E0CD4;
		  /* 820E0CD4h */ case    3:  		/* addi R10, R1, 384 */
		/* 820E0CD4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x180);
		/* 820E0CD4h case    3:*/		return 0x820E0CD8;
		  /* 820E0CD8h */ case    4:  		/* add R3, R9, R11 */
		/* 820E0CD8h case    4:*/		cpu::op::add<0>(regs,&regs.R3,regs.R9,regs.R11);
		/* 820E0CD8h case    4:*/		return 0x820E0CDC;
		  /* 820E0CDCh */ case    5:  		/* li R4, 32 */
		/* 820E0CDCh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0CDCh case    5:*/		return 0x820E0CE0;
		  /* 820E0CE0h */ case    6:  		/* lwzx R11, <#[R31 + R8]> */
		/* 820E0CE0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R8 + 0x00000000) );
		/* 820E0CE0h case    6:*/		return 0x820E0CE4;
		  /* 820E0CE4h */ case    7:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 820E0CE4h case    7:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 820E0CE4h case    7:*/		return 0x820E0CE8;
		  /* 820E0CE8h */ case    8:  		/* add R5, R11, R10 */
		/* 820E0CE8h case    8:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R10);
		/* 820E0CE8h case    8:*/		return 0x820E0CEC;
		  /* 820E0CECh */ case    9:  		/* bl -239100 */
		/* 820E0CECh case    9:*/		regs.LR = 0x820E0CF0; return 0x820A66F0;
		/* 820E0CECh case    9:*/		return 0x820E0CF0;
		  /* 820E0CF0h */ case   10:  		/* addi R9, R1, 224 */
		/* 820E0CF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE0);
		/* 820E0CF0h case   10:*/		return 0x820E0CF4;
		  /* 820E0CF4h */ case   11:  		/* rlwinm R11, R15, 2, 0, 29 */
		/* 820E0CF4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R15);
		/* 820E0CF4h case   11:*/		return 0x820E0CF8;
		  /* 820E0CF8h */ case   12:  		/* addi R10, R1, 224 */
		/* 820E0CF8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE0);
		/* 820E0CF8h case   12:*/		return 0x820E0CFC;
		  /* 820E0CFCh */ case   13:  		/* add R11, R11, R9 */
		/* 820E0CFCh case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820E0CFCh case   13:*/		return 0x820E0D00;
		  /* 820E0D00h */ case   14:  		/* addi R9, R11, -4 */
		/* 820E0D00h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFC);
		/* 820E0D00h case   14:*/		return 0x820E0D04;
		  /* 820E0D04h */ case   15:  		/* lwzx R9, <#[R31 + R10]> */
		/* 820E0D04h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 820E0D04h case   15:*/		return 0x820E0D08;
		  /* 820E0D08h */ case   16:  		/* lwz R8, <#[R11 - 4]> */
		/* 820E0D08h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820E0D08h case   16:*/		return 0x820E0D0C;
		  /* 820E0D0Ch */ case   17:  		/* stw R9, <#[R11 - 4]> */
		/* 820E0D0Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820E0D0Ch case   17:*/		return 0x820E0D10;
		  /* 820E0D10h */ case   18:  		/* stwx R8, <#[R31 + R10]> */
		/* 820E0D10h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 820E0D10h case   18:*/		return 0x820E0D14;
	}
	return 0x820E0D14;
} // Block from 820E0CC8h-820E0D14h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E0D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0D14);
		  /* 820E0D14h */ case    0:  		/* cmplw CR6, R30, R25 */
		/* 820E0D14h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 820E0D14h case    0:*/		return 0x820E0D18;
		  /* 820E0D18h */ case    1:  		/* bc 12, CR6_LT, 572 */
		/* 820E0D18h case    1:*/		if ( regs.CR[6].lt ) { return 0x820E0F54;  }
		/* 820E0D18h case    1:*/		return 0x820E0D1C;
	}
	return 0x820E0D1C;
} // Block from 820E0D14h-820E0D1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0D1C);
		  /* 820E0D1Ch */ case    0:  		/* cmplwi CR6, R17, 1 */
		/* 820E0D1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000001);
		/* 820E0D1Ch case    0:*/		return 0x820E0D20;
		  /* 820E0D20h */ case    1:  		/* bc 12, CR6_EQ, 216 */
		/* 820E0D20h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E0DF8;  }
		/* 820E0D20h case    1:*/		return 0x820E0D24;
		  /* 820E0D24h */ case    2:  		/* cmpwi CR6, R24, 1 */
		/* 820E0D24h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000001);
		/* 820E0D24h case    2:*/		return 0x820E0D28;
		  /* 820E0D28h */ case    3:  		/* bc 4, CR6_EQ, 28 */
		/* 820E0D28h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E0D44;  }
		/* 820E0D28h case    3:*/		return 0x820E0D2C;
		  /* 820E0D2Ch */ case    4:  		/* lwz R11, <#[R26]> */
		/* 820E0D2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0D2Ch case    4:*/		return 0x820E0D30;
		  /* 820E0D30h */ case    5:  		/* lis R10, 228 */
		/* 820E0D30h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xE4);
		/* 820E0D30h case    5:*/		return 0x820E0D34;
		  /* 820E0D34h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E0D34h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E0D34h case    6:*/		return 0x820E0D38;
		  /* 820E0D38h */ case    7:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820E0D38h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820E0D38h case    7:*/		return 0x820E0D3C;
		  /* 820E0D3Ch */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 820E0D3Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E0D3Ch case    8:*/		return 0x820E0D40;
	}
	return 0x820E0D40;
} // Block from 820E0D1Ch-820E0D40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E0D40h
// Function '?EmitSrcModifiersSW@C30SWProgram@D3DXShader@@IAAJPBDIPAK11PADI2I2IPBH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0D40);
		  /* 820E0D40h */ case    0:  		/* bc 12, CR6_EQ, 184 */
		/* 820E0D40h case    0:*/		if ( regs.CR[6].eq ) { return 0x820E0DF8;  }
		/* 820E0D40h case    0:*/		return 0x820E0D44;
	}
	return 0x820E0D44;
} // Block from 820E0D40h-820E0D44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E0D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0D44);
		  /* 820E0D44h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 820E0D44h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820E0D44h case    0:*/		return 0x820E0D48;
		  /* 820E0D48h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 820E0D48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E0D60;  }
		/* 820E0D48h case    1:*/		return 0x820E0D4C;
		  /* 820E0D4Ch */ case    2:  		/* lwz R11, <#[R26]> */
		/* 820E0D4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0D4Ch case    2:*/		return 0x820E0D50;
		  /* 820E0D50h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E0D50h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E0D50h case    3:*/		return 0x820E0D54;
		  /* 820E0D54h */ case    4:  		/* lwzx R11, <#[R11 + R16]> */
		/* 820E0D54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 820E0D54h case    4:*/		return 0x820E0D58;
		  /* 820E0D58h */ case    5:  		/* rlwinm. R11, R11, 0, 4, 7 */
		/* 820E0D58h case    5:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E0D58h case    5:*/		return 0x820E0D5C;
		  /* 820E0D5Ch */ case    6:  		/* bc 12, CR0_EQ, 156 */
		/* 820E0D5Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820E0DF8;  }
		/* 820E0D5Ch case    6:*/		return 0x820E0D60;
	}
	return 0x820E0D60;
} // Block from 820E0D44h-820E0D60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E0D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0D60);
		  /* 820E0D60h */ case    0:  		/* li R27, 0 */
		/* 820E0D60h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E0D60h case    0:*/		return 0x820E0D64;
		  /* 820E0D64h */ case    1:  		/* lwz R31, <#[R26]> */
		/* 820E0D64h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0D64h case    1:*/		return 0x820E0D68;
		  /* 820E0D68h */ case    2:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 820E0D68h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 820E0D68h case    2:*/		return 0x820E0D6C;
		  /* 820E0D6Ch */ case    3:  		/* lwzx R10, <#[R11 + R16]> */
		/* 820E0D6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 820E0D6Ch case    3:*/		return 0x820E0D70;
		  /* 820E0D70h */ case    4:  		/* mr R9, R10 */
		/* 820E0D70h case    4:*/		regs.R9 = regs.R10;
		/* 820E0D70h case    4:*/		return 0x820E0D74;
		  /* 820E0D74h */ case    5:  		/* rlwimi R9, R10, 12, 21, 23 */
		/* 820E0D74h case    5:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R9,regs.R10);
		/* 820E0D74h case    5:*/		return 0x820E0D78;
		  /* 820E0D78h */ case    6:  		/* rlwinm R10, R9, 0, 19, 23 */
		/* 820E0D78h case    6:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R10,regs.R9);
		/* 820E0D78h case    6:*/		return 0x820E0D7C;
		  /* 820E0D7Ch */ case    7:  		/* cmplwi CR6, R10, 512 */
		/* 820E0D7Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000200);
		/* 820E0D7Ch case    7:*/		return 0x820E0D80;
		  /* 820E0D80h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 820E0D80h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820E0D94;  }
		/* 820E0D80h case    8:*/		return 0x820E0D84;
		  /* 820E0D84h */ case    9:  		/* lwzx R11, <#[R11 + R16]> */
		/* 820E0D84h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 820E0D84h case    9:*/		return 0x820E0D88;
		  /* 820E0D88h */ case   10:  		/* mr R5, R20 */
		/* 820E0D88h case   10:*/		regs.R5 = regs.R20;
		/* 820E0D88h case   10:*/		return 0x820E0D8C;
		  /* 820E0D8Ch */ case   11:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 820E0D8Ch case   11:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 820E0D8Ch case   11:*/		return 0x820E0D90;
		  /* 820E0D90h */ case   12:  		/* bc 12, CR0_EQ, 8 */
		/* 820E0D90h case   12:*/		if ( regs.CR[0].eq ) { return 0x820E0D98;  }
		/* 820E0D90h case   12:*/		return 0x820E0D94;
	}
	return 0x820E0D94;
} // Block from 820E0D60h-820E0D94h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E0D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0D94);
		  /* 820E0D94h */ case    0:  		/* mr R5, R21 */
		/* 820E0D94h case    0:*/		regs.R5 = regs.R21;
		/* 820E0D94h case    0:*/		return 0x820E0D98;
	}
	return 0x820E0D98;
} // Block from 820E0D94h-820E0D98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E0D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0D98);
		  /* 820E0D98h */ case    0:  		/* addi R11, R1, 384 */
		/* 820E0D98h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 820E0D98h case    0:*/		return 0x820E0D9C;
		  /* 820E0D9Ch */ case    1:  		/* rlwinm R30, R31, 5, 0, 26 */
		/* 820E0D9Ch case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R30,regs.R31);
		/* 820E0D9Ch case    1:*/		return 0x820E0DA0;
		  /* 820E0DA0h */ case    2:  		/* mr R6, R31 */
		/* 820E0DA0h case    2:*/		regs.R6 = regs.R31;
		/* 820E0DA0h case    2:*/		return 0x820E0DA4;
		  /* 820E0DA4h */ case    3:  		/* add R29, R30, R11 */
		/* 820E0DA4h case    3:*/		cpu::op::add<0>(regs,&regs.R29,regs.R30,regs.R11);
		/* 820E0DA4h case    3:*/		return 0x820E0DA8;
		  /* 820E0DA8h */ case    4:  		/* li R4, 32 */
		/* 820E0DA8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0DA8h case    4:*/		return 0x820E0DAC;
		  /* 820E0DACh */ case    5:  		/* mr R3, R29 */
		/* 820E0DACh case    5:*/		regs.R3 = regs.R29;
		/* 820E0DACh case    5:*/		return 0x820E0DB0;
		  /* 820E0DB0h */ case    6:  		/* bl -255856 */
		/* 820E0DB0h case    6:*/		regs.LR = 0x820E0DB4; return 0x820A2640;
		/* 820E0DB0h case    6:*/		return 0x820E0DB4;
		  /* 820E0DB4h */ case    7:  		/* rlwinm R28, R31, 2, 0, 29 */
		/* 820E0DB4h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R31);
		/* 820E0DB4h case    7:*/		return 0x820E0DB8;
		  /* 820E0DB8h */ case    8:  		/* lwzx R11, <#[R28 + R16]> */
		/* 820E0DB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R16 + 0x00000000) );
		/* 820E0DB8h case    8:*/		return 0x820E0DBC;
		  /* 820E0DBCh */ case    9:  		/* mr R10, R11 */
		/* 820E0DBCh case    9:*/		regs.R10 = regs.R11;
		/* 820E0DBCh case    9:*/		return 0x820E0DC0;
		  /* 820E0DC0h */ case   10:  		/* rlwimi R10, R11, 12, 21, 23 */
		/* 820E0DC0h case   10:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R11);
		/* 820E0DC0h case   10:*/		return 0x820E0DC4;
		  /* 820E0DC4h */ case   11:  		/* rlwinm R11, R10, 0, 19, 23 */
		/* 820E0DC4h case   11:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R10);
		/* 820E0DC4h case   11:*/		return 0x820E0DC8;
		  /* 820E0DC8h */ case   12:  		/* cmplwi CR6, R11, 512 */
		/* 820E0DC8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 820E0DC8h case   12:*/		return 0x820E0DCC;
		  /* 820E0DCCh */ case   13:  		/* bc 4, CR6_EQ, 92 */
		/* 820E0DCCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x820E0E28;  }
		/* 820E0DCCh case   13:*/		return 0x820E0DD0;
		  /* 820E0DD0h */ case   14:  		/* lwzx R11, <#[R28 + R16]> */
		/* 820E0DD0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R16 + 0x00000000) );
		/* 820E0DD0h case   14:*/		return 0x820E0DD4;
		  /* 820E0DD4h */ case   15:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 820E0DD4h case   15:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 820E0DD4h case   15:*/		return 0x820E0DD8;
		  /* 820E0DD8h */ case   16:  		/* bc 4, CR0_EQ, 80 */
		/* 820E0DD8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x820E0E28;  }
		/* 820E0DD8h case   16:*/		return 0x820E0DDC;
		  /* 820E0DDCh */ case   17:  		/* lwz R11, <#[R1 + 700]> */
		/* 820E0DDCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002BC) );
		/* 820E0DDCh case   17:*/		return 0x820E0DE0;
		  /* 820E0DE0h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 820E0DE0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E0DE0h case   18:*/		return 0x820E0DE4;
		  /* 820E0DE4h */ case   19:  		/* bc 12, CR6_EQ, 12 */
		/* 820E0DE4h case   19:*/		if ( regs.CR[6].eq ) { return 0x820E0DF0;  }
		/* 820E0DE4h case   19:*/		return 0x820E0DE8;
		  /* 820E0DE8h */ case   20:  		/* cmpwi CR6, R27, 0 */
		/* 820E0DE8h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E0DE8h case   20:*/		return 0x820E0DEC;
		  /* 820E0DECh */ case   21:  		/* bc 4, CR6_EQ, 60 */
		/* 820E0DECh case   21:*/		if ( !regs.CR[6].eq ) { return 0x820E0E28;  }
		/* 820E0DECh case   21:*/		return 0x820E0DF0;
	}
	return 0x820E0DF0;
} // Block from 820E0D98h-820E0DF0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E0DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0DF0);
		  /* 820E0DF0h */ case    0:  		/* li R27, 1 */
		/* 820E0DF0h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E0DF0h case    0:*/		return 0x820E0DF4;
		  /* 820E0DF4h */ case    1:  		/* b 56 */
		/* 820E0DF4h case    1:*/		return 0x820E0E2C;
		/* 820E0DF4h case    1:*/		return 0x820E0DF8;
	}
	return 0x820E0DF8;
} // Block from 820E0DF0h-820E0DF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E0DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0DF8);
		  /* 820E0DF8h */ case    0:  		/* lwz R5, <#[R1 + 700]> */
		/* 820E0DF8h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000002BC) );
		/* 820E0DF8h case    0:*/		return 0x820E0DFC;
		  /* 820E0DFCh */ case    1:  		/* li R27, 1 */
		/* 820E0DFCh case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E0DFCh case    1:*/		return 0x820E0E00;
		  /* 820E0E00h */ case    2:  		/* cmplwi CR6, R5, 0 */
		/* 820E0E00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E0E00h case    2:*/		return 0x820E0E04;
		  /* 820E0E04h */ case    3:  		/* bc 12, CR6_EQ, -160 */
		/* 820E0E04h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E0D64;  }
		/* 820E0E04h case    3:*/		return 0x820E0E08;
		  /* 820E0E08h */ case    4:  		/* lwz R31, <#[R26]> */
		/* 820E0E08h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 820E0E08h case    4:*/		return 0x820E0E0C;
		  /* 820E0E0Ch */ case    5:  		/* addi R11, R1, 384 */
		/* 820E0E0Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x180);
		/* 820E0E0Ch case    5:*/		return 0x820E0E10;
		  /* 820E0E10h */ case    6:  		/* li R4, 32 */
		/* 820E0E10h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0E10h case    6:*/		return 0x820E0E14;
		  /* 820E0E14h */ case    7:  		/* rlwinm R30, R31, 5, 0, 26 */
		/* 820E0E14h case    7:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R30,regs.R31);
		/* 820E0E14h case    7:*/		return 0x820E0E18;
		  /* 820E0E18h */ case    8:  		/* add R29, R30, R11 */
		/* 820E0E18h case    8:*/		cpu::op::add<0>(regs,&regs.R29,regs.R30,regs.R11);
		/* 820E0E18h case    8:*/		return 0x820E0E1C;
		  /* 820E0E1Ch */ case    9:  		/* mr R3, R29 */
		/* 820E0E1Ch case    9:*/		regs.R3 = regs.R29;
		/* 820E0E1Ch case    9:*/		return 0x820E0E20;
		  /* 820E0E20h */ case   10:  		/* bl -239408 */
		/* 820E0E20h case   10:*/		regs.LR = 0x820E0E24; return 0x820A66F0;
		/* 820E0E20h case   10:*/		return 0x820E0E24;
		  /* 820E0E24h */ case   11:  		/* b -112 */
		/* 820E0E24h case   11:*/		return 0x820E0DB4;
		/* 820E0E24h case   11:*/		return 0x820E0E28;
	}
	return 0x820E0E28;
} // Block from 820E0DF8h-820E0E28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E0E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0E28);
		  /* 820E0E28h */ case    0:  		/* lwz R27, <#[R14 + 1816]> */
		/* 820E0E28h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R14 + 0x00000718) );
		/* 820E0E28h case    0:*/		return 0x820E0E2C;
	}
	return 0x820E0E2C;
} // Block from 820E0E28h-820E0E2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E0E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0E2C);
		  /* 820E0E2Ch */ case    0:  		/* li R31, 0 */
		/* 820E0E2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E0E2Ch case    0:*/		return 0x820E0E30;
		  /* 820E0E30h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 820E0E30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820E0E30h case    1:*/		return 0x820E0E34;
		  /* 820E0E34h */ case    2:  		/* bc 12, CR6_EQ, 288 */
		/* 820E0E34h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E0F54;  }
		/* 820E0E34h case    2:*/		return 0x820E0E38;
		  /* 820E0E38h */ case    3:  		/* mr R3, R14 */
		/* 820E0E38h case    3:*/		regs.R3 = regs.R14;
		/* 820E0E38h case    3:*/		return 0x820E0E3C;
		  /* 820E0E3Ch */ case    4:  		/* bl -27788 */
		/* 820E0E3Ch case    4:*/		regs.LR = 0x820E0E40; return 0x820DA1B0;
		/* 820E0E3Ch case    4:*/		return 0x820E0E40;
		  /* 820E0E40h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E0E40h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0E40h case    5:*/		return 0x820E0E44;
		  /* 820E0E44h */ case    6:  		/* bc 12, CR0_LT, 476 */
		/* 820E0E44h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E0E44h case    6:*/		return 0x820E0E48;
		  /* 820E0E48h */ case    7:  		/* addi R11, R1, 288 */
		/* 820E0E48h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x120);
		/* 820E0E48h case    7:*/		return 0x820E0E4C;
		  /* 820E0E4Ch */ case    8:  		/* mr R7, R31 */
		/* 820E0E4Ch case    8:*/		regs.R7 = regs.R31;
		/* 820E0E4Ch case    8:*/		return 0x820E0E50;
		  /* 820E0E50h */ case    9:  		/* mr R6, R31 */
		/* 820E0E50h case    9:*/		regs.R6 = regs.R31;
		/* 820E0E50h case    9:*/		return 0x820E0E54;
		  /* 820E0E54h */ case   10:  		/* add R5, R30, R11 */
		/* 820E0E54h case   10:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R11);
		/* 820E0E54h case   10:*/		return 0x820E0E58;
		  /* 820E0E58h */ case   11:  		/* li R4, 32 */
		/* 820E0E58h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0E58h case   11:*/		return 0x820E0E5C;
		  /* 820E0E5Ch */ case   12:  		/* addi R3, R1, 256 */
		/* 820E0E5Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820E0E5Ch case   12:*/		return 0x820E0E60;
		  /* 820E0E60h */ case   13:  		/* bl -256032 */
		/* 820E0E60h case   13:*/		regs.LR = 0x820E0E64; return 0x820A2640;
		/* 820E0E60h case   13:*/		return 0x820E0E64;
		  /* 820E0E64h */ case   14:  		/* mr R7, R31 */
		/* 820E0E64h case   14:*/		regs.R7 = regs.R31;
		/* 820E0E64h case   14:*/		return 0x820E0E68;
		  /* 820E0E68h */ case   15:  		/* mr R6, R31 */
		/* 820E0E68h case   15:*/		regs.R6 = regs.R31;
		/* 820E0E68h case   15:*/		return 0x820E0E6C;
		  /* 820E0E6Ch */ case   16:  		/* mr R5, R29 */
		/* 820E0E6Ch case   16:*/		regs.R5 = regs.R29;
		/* 820E0E6Ch case   16:*/		return 0x820E0E70;
		  /* 820E0E70h */ case   17:  		/* li R4, 32 */
		/* 820E0E70h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0E70h case   17:*/		return 0x820E0E74;
		  /* 820E0E74h */ case   18:  		/* addi R3, R1, 480 */
		/* 820E0E74h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1E0);
		/* 820E0E74h case   18:*/		return 0x820E0E78;
		  /* 820E0E78h */ case   19:  		/* bl -256056 */
		/* 820E0E78h case   19:*/		regs.LR = 0x820E0E7C; return 0x820A2640;
		/* 820E0E78h case   19:*/		return 0x820E0E7C;
		  /* 820E0E7Ch */ case   20:  		/* mr R4, R23 */
		/* 820E0E7Ch case   20:*/		regs.R4 = regs.R23;
		/* 820E0E7Ch case   20:*/		return 0x820E0E80;
		  /* 820E0E80h */ case   21:  		/* addi R5, R1, 480 */
		/* 820E0E80h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1E0);
		/* 820E0E80h case   21:*/		return 0x820E0E84;
		  /* 820E0E84h */ case   22:  		/* mr R3, R14 */
		/* 820E0E84h case   22:*/		regs.R3 = regs.R14;
		/* 820E0E84h case   22:*/		return 0x820E0E88;
		  /* 820E0E88h */ case   23:  		/* bl -28080 */
		/* 820E0E88h case   23:*/		regs.LR = 0x820E0E8C; return 0x820DA0D8;
		/* 820E0E88h case   23:*/		return 0x820E0E8C;
		  /* 820E0E8Ch */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820E0E8Ch case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0E8Ch case   24:*/		return 0x820E0E90;
		  /* 820E0E90h */ case   25:  		/* bc 12, CR0_LT, 400 */
		/* 820E0E90h case   25:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E0E90h case   25:*/		return 0x820E0E94;
		  /* 820E0E94h */ case   26:  		/* cmpwi CR6, R24, 0 */
		/* 820E0E94h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820E0E94h case   26:*/		return 0x820E0E98;
		  /* 820E0E98h */ case   27:  		/* bc 4, CR6_EQ, 64 */
		/* 820E0E98h case   27:*/		if ( !regs.CR[6].eq ) { return 0x820E0ED8;  }
		/* 820E0E98h case   27:*/		return 0x820E0E9C;
		  /* 820E0E9Ch */ case   28:  		/* lwz R11, <#[R14]> */
		/* 820E0E9Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 820E0E9Ch case   28:*/		return 0x820E0EA0;
		  /* 820E0EA0h */ case   29:  		/* addi R4, R1, 256 */
		/* 820E0EA0h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x100);
		/* 820E0EA0h case   29:*/		return 0x820E0EA4;
		  /* 820E0EA4h */ case   30:  		/* lwz R10, <#[R1 + 732]> */
		/* 820E0EA4h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000002DC) );
		/* 820E0EA4h case   30:*/		return 0x820E0EA8;
		  /* 820E0EA8h */ case   31:  		/* mr R3, R14 */
		/* 820E0EA8h case   31:*/		regs.R3 = regs.R14;
		/* 820E0EA8h case   31:*/		return 0x820E0EAC;
		  /* 820E0EACh */ case   32:  		/* lwz R11, <#[R11 + 388]> */
		/* 820E0EACh case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820E0EACh case   32:*/		return 0x820E0EB0;
		  /* 820E0EB0h */ case   33:  		/* lwzx R10, <#[R28 + R10]> */
		/* 820E0EB0h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 820E0EB0h case   33:*/		return 0x820E0EB4;
		  /* 820E0EB4h */ case   34:  		/* rlwinm R8, R10, 10, 30, 31 */
		/* 820E0EB4h case   34:*/		cpu::op::rlwinm<0,10,30,31>(regs,&regs.R8,regs.R10);
		/* 820E0EB4h case   34:*/		return 0x820E0EB8;
		  /* 820E0EB8h */ case   35:  		/* rlwinm R7, R10, 12, 30, 31 */
		/* 820E0EB8h case   35:*/		cpu::op::rlwinm<0,12,30,31>(regs,&regs.R7,regs.R10);
		/* 820E0EB8h case   35:*/		return 0x820E0EBC;
		  /* 820E0EBCh */ case   36:  		/* rlwinm R6, R10, 14, 30, 31 */
		/* 820E0EBCh case   36:*/		cpu::op::rlwinm<0,14,30,31>(regs,&regs.R6,regs.R10);
		/* 820E0EBCh case   36:*/		return 0x820E0EC0;
		  /* 820E0EC0h */ case   37:  		/* mtspr CTR, R11 */
		/* 820E0EC0h case   37:*/		regs.CTR = regs.R11;
		/* 820E0EC0h case   37:*/		return 0x820E0EC4;
		  /* 820E0EC4h */ case   38:  		/* rlwinm R5, R10, 16, 30, 31 */
		/* 820E0EC4h case   38:*/		cpu::op::rlwinm<0,16,30,31>(regs,&regs.R5,regs.R10);
		/* 820E0EC4h case   38:*/		return 0x820E0EC8;
		  /* 820E0EC8h */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 820E0EC8h case   39:*/		if ( 1 ) { regs.LR = 0x820E0ECC; return (uint32)regs.CTR; }
		/* 820E0EC8h case   39:*/		return 0x820E0ECC;
		  /* 820E0ECCh */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 820E0ECCh case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0ECCh case   40:*/		return 0x820E0ED0;
		  /* 820E0ED0h */ case   41:  		/* bc 12, CR0_LT, 336 */
		/* 820E0ED0h case   41:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E0ED0h case   41:*/		return 0x820E0ED4;
		  /* 820E0ED4h */ case   42:  		/* b 96 */
		/* 820E0ED4h case   42:*/		return 0x820E0F34;
		/* 820E0ED4h case   42:*/		return 0x820E0ED8;
	}
	return 0x820E0ED8;
} // Block from 820E0E2Ch-820E0ED8h (43 instructions)

//////////////////////////////////////////////////////
// Block at 820E0ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0ED8);
		  /* 820E0ED8h */ case    0:  		/* lwzx R11, <#[R28 + R16]> */
		/* 820E0ED8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R16 + 0x00000000) );
		/* 820E0ED8h case    0:*/		return 0x820E0EDC;
		  /* 820E0EDCh */ case    1:  		/* lis R10, 256 */
		/* 820E0EDCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x100);
		/* 820E0EDCh case    1:*/		return 0x820E0EE0;
		  /* 820E0EE0h */ case    2:  		/* rlwinm R11, R11, 0, 4, 7 */
		/* 820E0EE0h case    2:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E0EE0h case    2:*/		return 0x820E0EE4;
		  /* 820E0EE4h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 820E0EE4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E0EE4h case    3:*/		return 0x820E0EE8;
		  /* 820E0EE8h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 820E0EE8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E0EF8;  }
		/* 820E0EE8h case    4:*/		return 0x820E0EEC;
		  /* 820E0EECh */ case    5:  		/* lwz R11, <#[R14]> */
		/* 820E0EECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 820E0EECh case    5:*/		return 0x820E0EF0;
		  /* 820E0EF0h */ case    6:  		/* lwz R11, <#[R11 + 468]> */
		/* 820E0EF0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D4) );
		/* 820E0EF0h case    6:*/		return 0x820E0EF4;
		  /* 820E0EF4h */ case    7:  		/* b 36 */
		/* 820E0EF4h case    7:*/		return 0x820E0F18;
		/* 820E0EF4h case    7:*/		return 0x820E0EF8;
	}
	return 0x820E0EF8;
} // Block from 820E0ED8h-820E0EF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E0EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0EF8);
		  /* 820E0EF8h */ case    0:  		/* lis R10, 2816 */
		/* 820E0EF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xB00);
		/* 820E0EF8h case    0:*/		return 0x820E0EFC;
		  /* 820E0EFCh */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820E0EFCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E0EFCh case    1:*/		return 0x820E0F00;
		  /* 820E0F00h */ case    2:  		/* lwz R11, <#[R14]> */
		/* 820E0F00h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 820E0F00h case    2:*/		return 0x820E0F04;
		  /* 820E0F04h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 820E0F04h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E0F14;  }
		/* 820E0F04h case    3:*/		return 0x820E0F08;
		  /* 820E0F08h */ case    4:  		/* lwz R11, <#[R11 + 456]> */
		/* 820E0F08h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001C8) );
		/* 820E0F08h case    4:*/		return 0x820E0F0C;
		  /* 820E0F0Ch */ case    5:  		/* mr R5, R19 */
		/* 820E0F0Ch case    5:*/		regs.R5 = regs.R19;
		/* 820E0F0Ch case    5:*/		return 0x820E0F10;
		  /* 820E0F10h */ case    6:  		/* b 12 */
		/* 820E0F10h case    6:*/		return 0x820E0F1C;
		/* 820E0F10h case    6:*/		return 0x820E0F14;
	}
	return 0x820E0F14;
} // Block from 820E0EF8h-820E0F14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E0F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0F14);
		  /* 820E0F14h */ case    0:  		/* lwz R11, <#[R11 + 464]> */
		/* 820E0F14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D0) );
		/* 820E0F14h case    0:*/		return 0x820E0F18;
	}
	return 0x820E0F18;
} // Block from 820E0F14h-820E0F18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E0F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0F18);
		  /* 820E0F18h */ case    0:  		/* mr R5, R22 */
		/* 820E0F18h case    0:*/		regs.R5 = regs.R22;
		/* 820E0F18h case    0:*/		return 0x820E0F1C;
	}
	return 0x820E0F1C;
} // Block from 820E0F18h-820E0F1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E0F1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0F1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0F1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0F1C);
		  /* 820E0F1Ch */ case    0:  		/* addi R4, R1, 256 */
		/* 820E0F1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x100);
		/* 820E0F1Ch case    0:*/		return 0x820E0F20;
		  /* 820E0F20h */ case    1:  		/* mtspr CTR, R11 */
		/* 820E0F20h case    1:*/		regs.CTR = regs.R11;
		/* 820E0F20h case    1:*/		return 0x820E0F24;
		  /* 820E0F24h */ case    2:  		/* mr R3, R14 */
		/* 820E0F24h case    2:*/		regs.R3 = regs.R14;
		/* 820E0F24h case    2:*/		return 0x820E0F28;
		  /* 820E0F28h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 820E0F28h case    3:*/		if ( 1 ) { regs.LR = 0x820E0F2C; return (uint32)regs.CTR; }
		/* 820E0F28h case    3:*/		return 0x820E0F2C;
		  /* 820E0F2Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 820E0F2Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E0F2Ch case    4:*/		return 0x820E0F30;
		  /* 820E0F30h */ case    5:  		/* bc 12, CR6_LT, 240 */
		/* 820E0F30h case    5:*/		if ( regs.CR[6].lt ) { return 0x820E1020;  }
		/* 820E0F30h case    5:*/		return 0x820E0F34;
	}
	return 0x820E0F34;
} // Block from 820E0F1Ch-820E0F34h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E0F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0F34);
		  /* 820E0F34h */ case    0:  		/* mr R3, R14 */
		/* 820E0F34h case    0:*/		regs.R3 = regs.R14;
		/* 820E0F34h case    0:*/		return 0x820E0F38;
		  /* 820E0F38h */ case    1:  		/* lwz R4, <#[R1 + 200]> */
		/* 820E0F38h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C8) );
		/* 820E0F38h case    1:*/		return 0x820E0F3C;
		  /* 820E0F3Ch */ case    2:  		/* bl -28260 */
		/* 820E0F3Ch case    2:*/		regs.LR = 0x820E0F40; return 0x820DA0D8;
		/* 820E0F3Ch case    2:*/		return 0x820E0F40;
		  /* 820E0F40h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820E0F40h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E0F40h case    3:*/		return 0x820E0F44;
		  /* 820E0F44h */ case    4:  		/* bc 12, CR0_LT, 220 */
		/* 820E0F44h case    4:*/		if ( regs.CR[0].lt ) { return 0x820E1020;  }
		/* 820E0F44h case    4:*/		return 0x820E0F48;
		  /* 820E0F48h */ case    5:  		/* addi R31, R31, 1 */
		/* 820E0F48h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820E0F48h case    5:*/		return 0x820E0F4C;
		  /* 820E0F4Ch */ case    6:  		/* cmplw CR6, R31, R27 */
		/* 820E0F4Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 820E0F4Ch case    6:*/		return 0x820E0F50;
		  /* 820E0F50h */ case    7:  		/* bc 12, CR6_LT, -280 */
		/* 820E0F50h case    7:*/		if ( regs.CR[6].lt ) { return 0x820E0E38;  }
		/* 820E0F50h case    7:*/		return 0x820E0F54;
	}
	return 0x820E0F54;
} // Block from 820E0F34h-820E0F54h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E0F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0F54);
		  /* 820E0F54h */ case    0:  		/* addi R25, R25, 1 */
		/* 820E0F54h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 820E0F54h case    0:*/		return 0x820E0F58;
		  /* 820E0F58h */ case    1:  		/* addi R26, R26, 4 */
		/* 820E0F58h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 820E0F58h case    1:*/		return 0x820E0F5C;
		  /* 820E0F5Ch */ case    2:  		/* cmplw CR6, R25, R15 */
		/* 820E0F5Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R15);
		/* 820E0F5Ch case    2:*/		return 0x820E0F60;
		  /* 820E0F60h */ case    3:  		/* bc 12, CR6_LT, -948 */
		/* 820E0F60h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E0BAC;  }
		/* 820E0F60h case    3:*/		return 0x820E0F64;
		  /* 820E0F64h */ case    4:  		/* li R31, 0 */
		/* 820E0F64h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E0F64h case    4:*/		return 0x820E0F68;
		  /* 820E0F68h */ case    5:  		/* mr R30, R15 */
		/* 820E0F68h case    5:*/		regs.R30 = regs.R15;
		/* 820E0F68h case    5:*/		return 0x820E0F6C;
		  /* 820E0F6Ch */ case    6:  		/* addi R11, R1, 208 */
		/* 820E0F6Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 820E0F6Ch case    6:*/		return 0x820E0F70;
		  /* 820E0F70h */ case    7:  		/* addi R9, R1, 384 */
		/* 820E0F70h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x180);
		/* 820E0F70h case    7:*/		return 0x820E0F74;
		  /* 820E0F74h */ case    8:  		/* add R29, R31, R11 */
		/* 820E0F74h case    8:*/		cpu::op::add<0>(regs,&regs.R29,regs.R31,regs.R11);
		/* 820E0F74h case    8:*/		return 0x820E0F78;
		  /* 820E0F78h */ case    9:  		/* addi R10, R1, 288 */
		/* 820E0F78h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x120);
		/* 820E0F78h case    9:*/		return 0x820E0F7C;
		  /* 820E0F7Ch */ case   10:  		/* li R4, 32 */
		/* 820E0F7Ch case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E0F7Ch case   10:*/		return 0x820E0F80;
		  /* 820E0F80h */ case   11:  		/* lwzx R11, <#[R31 + R11]> */
		/* 820E0F80h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 820E0F80h case   11:*/		return 0x820E0F84;
		  /* 820E0F84h */ case   12:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 820E0F84h case   12:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 820E0F84h case   12:*/		return 0x820E0F88;
		  /* 820E0F88h */ case   13:  		/* add R5, R11, R9 */
		/* 820E0F88h case   13:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R9);
		/* 820E0F88h case   13:*/		return 0x820E0F8C;
		  /* 820E0F8Ch */ case   14:  		/* add R3, R11, R10 */
		/* 820E0F8Ch case   14:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 820E0F8Ch case   14:*/		return 0x820E0F90;
		  /* 820E0F90h */ case   15:  		/* bl -239776 */
		/* 820E0F90h case   15:*/		regs.LR = 0x820E0F94; return 0x820A66F0;
		/* 820E0F90h case   15:*/		return 0x820E0F94;
		  /* 820E0F94h */ case   16:  		/* addi R11, R1, 224 */
		/* 820E0F94h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 820E0F94h case   16:*/		return 0x820E0F98;
		  /* 820E0F98h */ case   17:  		/* addic. R30, R30, -1 */
		/* 820E0F98h case   17:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 820E0F98h case   17:*/		return 0x820E0F9C;
		  /* 820E0F9Ch */ case   18:  		/* lwzx R11, <#[R31 + R11]> */
		/* 820E0F9Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 820E0F9Ch case   18:*/		return 0x820E0FA0;
		  /* 820E0FA0h */ case   19:  		/* addi R31, R31, 4 */
		/* 820E0FA0h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820E0FA0h case   19:*/		return 0x820E0FA4;
		  /* 820E0FA4h */ case   20:  		/* stw R11, <#[R29]> */
		/* 820E0FA4h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820E0FA4h case   20:*/		return 0x820E0FA8;
		  /* 820E0FA8h */ case   21:  		/* bc 4, CR0_EQ, -60 */
		/* 820E0FA8h case   21:*/		if ( !regs.CR[0].eq ) { return 0x820E0F6C;  }
		/* 820E0FA8h case   21:*/		return 0x820E0FAC;
	}
	return 0x820E0FAC;
} // Block from 820E0F54h-820E0FACh (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E0FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0FAC);
		  /* 820E0FACh */ case    0:  		/* addi R17, R17, 1 */
		/* 820E0FACh case    0:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 820E0FACh case    0:*/		return 0x820E0FB0;
		  /* 820E0FB0h */ case    1:  		/* addi R18, R18, 4 */
		/* 820E0FB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x4);
		/* 820E0FB0h case    1:*/		return 0x820E0FB4;
		  /* 820E0FB4h */ case    2:  		/* cmplwi CR6, R17, 2 */
		/* 820E0FB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000002);
		/* 820E0FB4h case    2:*/		return 0x820E0FB8;
		  /* 820E0FB8h */ case    3:  		/* bc 12, CR6_LT, -1056 */
		/* 820E0FB8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E0B98;  }
		/* 820E0FB8h case    3:*/		return 0x820E0FBC;
		  /* 820E0FBCh */ case    4:  		/* lis R11, 32767 */
		/* 820E0FBCh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x7FFF);
		/* 820E0FBCh case    4:*/		return 0x820E0FC0;
		  /* 820E0FC0h */ case    5:  		/* lwz R4, <#[R1 + 748]> */
		/* 820E0FC0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000002EC) );
		/* 820E0FC0h case    5:*/		return 0x820E0FC4;
		  /* 820E0FC4h */ case    6:  		/* ori R31, R11, 65535 */
		/* 820E0FC4h case    6:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R11,0xFFFF);
		/* 820E0FC4h case    6:*/		return 0x820E0FC8;
		  /* 820E0FC8h */ case    7:  		/* cmplw CR6, R4, R31 */
		/* 820E0FC8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R31);
		/* 820E0FC8h case    7:*/		return 0x820E0FCC;
		  /* 820E0FCCh */ case    8:  		/* bc 12, CR6_GT, 16 */
		/* 820E0FCCh case    8:*/		if ( regs.CR[6].gt ) { return 0x820E0FDC;  }
		/* 820E0FCCh case    8:*/		return 0x820E0FD0;
		  /* 820E0FD0h */ case    9:  		/* addi R5, R1, 288 */
		/* 820E0FD0h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 820E0FD0h case    9:*/		return 0x820E0FD4;
		  /* 820E0FD4h */ case   10:  		/* lwz R3, <#[R1 + 740]> */
		/* 820E0FD4h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000002E4) );
		/* 820E0FD4h case   10:*/		return 0x820E0FD8;
		  /* 820E0FD8h */ case   11:  		/* bl -239848 */
		/* 820E0FD8h case   11:*/		regs.LR = 0x820E0FDC; return 0x820A66F0;
		/* 820E0FD8h case   11:*/		return 0x820E0FDC;
	}
	return 0x820E0FDC;
} // Block from 820E0FACh-820E0FDCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E0FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0FDC);
		  /* 820E0FDCh */ case    0:  		/* cmplwi CR6, R15, 1 */
		/* 820E0FDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000001);
		/* 820E0FDCh case    0:*/		return 0x820E0FE0;
		  /* 820E0FE0h */ case    1:  		/* bc 4, CR6_GT, 28 */
		/* 820E0FE0h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820E0FFC;  }
		/* 820E0FE0h case    1:*/		return 0x820E0FE4;
		  /* 820E0FE4h */ case    2:  		/* lwz R4, <#[R1 + 764]> */
		/* 820E0FE4h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000002FC) );
		/* 820E0FE4h case    2:*/		return 0x820E0FE8;
		  /* 820E0FE8h */ case    3:  		/* cmplw CR6, R4, R31 */
		/* 820E0FE8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R31);
		/* 820E0FE8h case    3:*/		return 0x820E0FEC;
		  /* 820E0FECh */ case    4:  		/* bc 12, CR6_GT, 16 */
		/* 820E0FECh case    4:*/		if ( regs.CR[6].gt ) { return 0x820E0FFC;  }
		/* 820E0FECh case    4:*/		return 0x820E0FF0;
		  /* 820E0FF0h */ case    5:  		/* addi R5, R1, 320 */
		/* 820E0FF0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x140);
		/* 820E0FF0h case    5:*/		return 0x820E0FF4;
		  /* 820E0FF4h */ case    6:  		/* lwz R3, <#[R1 + 756]> */
		/* 820E0FF4h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000002F4) );
		/* 820E0FF4h case    6:*/		return 0x820E0FF8;
		  /* 820E0FF8h */ case    7:  		/* bl -239880 */
		/* 820E0FF8h case    7:*/		regs.LR = 0x820E0FFC; return 0x820A66F0;
		/* 820E0FF8h case    7:*/		return 0x820E0FFC;
	}
	return 0x820E0FFC;
} // Block from 820E0FDCh-820E0FFCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E0FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E0FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E0FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E0FFC);
		  /* 820E0FFCh */ case    0:  		/* cmplwi CR6, R15, 2 */
		/* 820E0FFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000002);
		/* 820E0FFCh case    0:*/		return 0x820E1000;
		  /* 820E1000h */ case    1:  		/* bc 4, CR6_GT, 28 */
		/* 820E1000h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820E101C;  }
		/* 820E1000h case    1:*/		return 0x820E1004;
		  /* 820E1004h */ case    2:  		/* lwz R4, <#[R1 + 780]> */
		/* 820E1004h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000030C) );
		/* 820E1004h case    2:*/		return 0x820E1008;
		  /* 820E1008h */ case    3:  		/* cmplw CR6, R4, R31 */
		/* 820E1008h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R31);
		/* 820E1008h case    3:*/		return 0x820E100C;
		  /* 820E100Ch */ case    4:  		/* bc 12, CR6_GT, 16 */
		/* 820E100Ch case    4:*/		if ( regs.CR[6].gt ) { return 0x820E101C;  }
		/* 820E100Ch case    4:*/		return 0x820E1010;
		  /* 820E1010h */ case    5:  		/* addi R5, R1, 352 */
		/* 820E1010h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x160);
		/* 820E1010h case    5:*/		return 0x820E1014;
		  /* 820E1014h */ case    6:  		/* lwz R3, <#[R1 + 772]> */
		/* 820E1014h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000304) );
		/* 820E1014h case    6:*/		return 0x820E1018;
		  /* 820E1018h */ case    7:  		/* bl -239912 */
		/* 820E1018h case    7:*/		regs.LR = 0x820E101C; return 0x820A66F0;
		/* 820E1018h case    7:*/		return 0x820E101C;
	}
	return 0x820E101C;
} // Block from 820E0FFCh-820E101Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E101Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E101C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E101C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E101C);
		  /* 820E101Ch */ case    0:  		/* li R3, 0 */
		/* 820E101Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E101Ch case    0:*/		return 0x820E1020;
	}
	return 0x820E1020;
} // Block from 820E101Ch-820E1020h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1020);
		  /* 820E1020h */ case    0:  		/* addi R1, R1, 672 */
		/* 820E1020h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x2A0);
		/* 820E1020h case    0:*/		return 0x820E1024;
		  /* 820E1024h */ case    1:  		/* b -327092 */
		/* 820E1024h case    1:*/		return 0x82091270;
		/* 820E1024h case    1:*/		return 0x820E1028;
	}
	return 0x820E1028;
} // Block from 820E1020h-820E1028h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E1028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1028);
		  /* 820E1028h */ case    0:  		/* mfspr R12, LR */
		/* 820E1028h case    0:*/		regs.R12 = regs.LR;
		/* 820E1028h case    0:*/		return 0x820E102C;
		  /* 820E102Ch */ case    1:  		/* bl -327152 */
		/* 820E102Ch case    1:*/		regs.LR = 0x820E1030; return 0x8209123C;
		/* 820E102Ch case    1:*/		return 0x820E1030;
		  /* 820E1030h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 820E1030h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 820E1030h case    2:*/		return 0x820E1034;
		  /* 820E1034h */ case    3:  		/* mr R31, R3 */
		/* 820E1034h case    3:*/		regs.R31 = regs.R3;
		/* 820E1034h case    3:*/		return 0x820E1038;
		  /* 820E1038h */ case    4:  		/* mr R22, R4 */
		/* 820E1038h case    4:*/		regs.R22 = regs.R4;
		/* 820E1038h case    4:*/		return 0x820E103C;
		  /* 820E103Ch */ case    5:  		/* mr R21, R5 */
		/* 820E103Ch case    5:*/		regs.R21 = regs.R5;
		/* 820E103Ch case    5:*/		return 0x820E1040;
		  /* 820E1040h */ case    6:  		/* mr R23, R6 */
		/* 820E1040h case    6:*/		regs.R23 = regs.R6;
		/* 820E1040h case    6:*/		return 0x820E1044;
		  /* 820E1044h */ case    7:  		/* bl -28308 */
		/* 820E1044h case    7:*/		regs.LR = 0x820E1048; return 0x820DA1B0;
		/* 820E1044h case    7:*/		return 0x820E1048;
		  /* 820E1048h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E1048h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1048h case    8:*/		return 0x820E104C;
		  /* 820E104Ch */ case    9:  		/* bc 12, CR0_LT, 1052 */
		/* 820E104Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E104Ch case    9:*/		return 0x820E1050;
		  /* 820E1050h */ case   10:  		/* lis R11, -32254 */
		/* 820E1050h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1050h case   10:*/		return 0x820E1054;
		  /* 820E1054h */ case   11:  		/* mr R3, R31 */
		/* 820E1054h case   11:*/		regs.R3 = regs.R31;
		/* 820E1054h case   11:*/		return 0x820E1058;
		  /* 820E1058h */ case   12:  		/* addi R4, R11, -30756 */
		/* 820E1058h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF87DC);
		/* 820E1058h case   12:*/		return 0x820E105C;
		  /* 820E105Ch */ case   13:  		/* bl -28548 */
		/* 820E105Ch case   13:*/		regs.LR = 0x820E1060; return 0x820DA0D8;
		/* 820E105Ch case   13:*/		return 0x820E1060;
		  /* 820E1060h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E1060h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1060h case   14:*/		return 0x820E1064;
		  /* 820E1064h */ case   15:  		/* bc 12, CR0_LT, 1028 */
		/* 820E1064h case   15:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1064h case   15:*/		return 0x820E1068;
		  /* 820E1068h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 820E1068h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1068h case   16:*/		return 0x820E106C;
		  /* 820E106Ch */ case   17:  		/* lis R10, -32254 */
		/* 820E106Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E106Ch case   17:*/		return 0x820E1070;
		  /* 820E1070h */ case   18:  		/* li R8, 1 */
		/* 820E1070h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820E1070h case   18:*/		return 0x820E1074;
		  /* 820E1074h */ case   19:  		/* addi R4, R10, -30764 */
		/* 820E1074h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF87D4);
		/* 820E1074h case   19:*/		return 0x820E1078;
		  /* 820E1078h */ case   20:  		/* li R7, 1 */
		/* 820E1078h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820E1078h case   20:*/		return 0x820E107C;
		  /* 820E107Ch */ case   21:  		/* li R6, 1 */
		/* 820E107Ch case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E107Ch case   21:*/		return 0x820E1080;
		  /* 820E1080h */ case   22:  		/* lwz R11, <#[R11 + 388]> */
		/* 820E1080h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000184) );
		/* 820E1080h case   22:*/		return 0x820E1084;
		  /* 820E1084h */ case   23:  		/* li R5, 2 */
		/* 820E1084h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820E1084h case   23:*/		return 0x820E1088;
		  /* 820E1088h */ case   24:  		/* mr R3, R31 */
		/* 820E1088h case   24:*/		regs.R3 = regs.R31;
		/* 820E1088h case   24:*/		return 0x820E108C;
		  /* 820E108Ch */ case   25:  		/* mtspr CTR, R11 */
		/* 820E108Ch case   25:*/		regs.CTR = regs.R11;
		/* 820E108Ch case   25:*/		return 0x820E1090;
		  /* 820E1090h */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 820E1090h case   26:*/		if ( 1 ) { regs.LR = 0x820E1094; return (uint32)regs.CTR; }
		/* 820E1090h case   26:*/		return 0x820E1094;
		  /* 820E1094h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820E1094h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1094h case   27:*/		return 0x820E1098;
		  /* 820E1098h */ case   28:  		/* bc 12, CR0_LT, 976 */
		/* 820E1098h case   28:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1098h case   28:*/		return 0x820E109C;
		  /* 820E109Ch */ case   29:  		/* lis R11, -32254 */
		/* 820E109Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E109Ch case   29:*/		return 0x820E10A0;
		  /* 820E10A0h */ case   30:  		/* mr R3, R31 */
		/* 820E10A0h case   30:*/		regs.R3 = regs.R31;
		/* 820E10A0h case   30:*/		return 0x820E10A4;
		  /* 820E10A4h */ case   31:  		/* addi R24, R11, -30768 */
		/* 820E10A4h case   31:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFF87D0);
		/* 820E10A4h case   31:*/		return 0x820E10A8;
		  /* 820E10A8h */ case   32:  		/* mr R4, R24 */
		/* 820E10A8h case   32:*/		regs.R4 = regs.R24;
		/* 820E10A8h case   32:*/		return 0x820E10AC;
		  /* 820E10ACh */ case   33:  		/* bl -28628 */
		/* 820E10ACh case   33:*/		regs.LR = 0x820E10B0; return 0x820DA0D8;
		/* 820E10ACh case   33:*/		return 0x820E10B0;
		  /* 820E10B0h */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820E10B0h case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E10B0h case   34:*/		return 0x820E10B4;
		  /* 820E10B4h */ case   35:  		/* bc 12, CR0_LT, 948 */
		/* 820E10B4h case   35:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E10B4h case   35:*/		return 0x820E10B8;
		  /* 820E10B8h */ case   36:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E10B8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E10B8h case   36:*/		return 0x820E10BC;
		  /* 820E10BCh */ case   37:  		/* addi R6, R1, 176 */
		/* 820E10BCh case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB0);
		/* 820E10BCh case   37:*/		return 0x820E10C0;
		  /* 820E10C0h */ case   38:  		/* lwz R10, <#[R31]> */
		/* 820E10C0h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E10C0h case   38:*/		return 0x820E10C4;
		  /* 820E10C4h */ case   39:  		/* addi R5, R1, 160 */
		/* 820E10C4h case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820E10C4h case   39:*/		return 0x820E10C8;
		  /* 820E10C8h */ case   40:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E10C8h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E10C8h case   40:*/		return 0x820E10CC;
		  /* 820E10CCh */ case   41:  		/* mr R3, R31 */
		/* 820E10CCh case   41:*/		regs.R3 = regs.R31;
		/* 820E10CCh case   41:*/		return 0x820E10D0;
		  /* 820E10D0h */ case   42:  		/* lwz R8, <#[R11 + 8]> */
		/* 820E10D0h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 820E10D0h case   42:*/		return 0x820E10D4;
		  /* 820E10D4h */ case   43:  		/* lwz R11, <#[R11]> */
		/* 820E10D4h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E10D4h case   43:*/		return 0x820E10D8;
		  /* 820E10D8h */ case   44:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E10D8h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E10D8h case   44:*/		return 0x820E10DC;
		  /* 820E10DCh */ case   45:  		/* rlwinm R30, R11, 0, 12, 31 */
		/* 820E10DCh case   45:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R11);
		/* 820E10DCh case   45:*/		return 0x820E10E0;
		  /* 820E10E0h */ case   46:  		/* lwz R11, <#[R8]> */
		/* 820E10E0h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E10E0h case   46:*/		return 0x820E10E4;
		  /* 820E10E4h */ case   47:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E10E4h case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E10E4h case   47:*/		return 0x820E10E8;
		  /* 820E10E8h */ case   48:  		/* mtspr CTR, R10 */
		/* 820E10E8h case   48:*/		regs.CTR = regs.R10;
		/* 820E10E8h case   48:*/		return 0x820E10EC;
		  /* 820E10ECh */ case   49:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E10ECh case   49:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E10ECh case   49:*/		return 0x820E10F0;
		  /* 820E10F0h */ case   50:  		/* bcctrl 20, CR0_LT */
		/* 820E10F0h case   50:*/		if ( 1 ) { regs.LR = 0x820E10F4; return (uint32)regs.CTR; }
		/* 820E10F0h case   50:*/		return 0x820E10F4;
		  /* 820E10F4h */ case   51:  		/* cmpwi CR0, R3, 0 */
		/* 820E10F4h case   51:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E10F4h case   51:*/		return 0x820E10F8;
		  /* 820E10F8h */ case   52:  		/* bc 12, CR0_LT, 880 */
		/* 820E10F8h case   52:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E10F8h case   52:*/		return 0x820E10FC;
		  /* 820E10FCh */ case   53:  		/* lwz R11, <#[R31]> */
		/* 820E10FCh case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E10FCh case   53:*/		return 0x820E1100;
		  /* 820E1100h */ case   54:  		/* addi R7, R1, 192 */
		/* 820E1100h case   54:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 820E1100h case   54:*/		return 0x820E1104;
		  /* 820E1104h */ case   55:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E1104h case   55:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1104h case   55:*/		return 0x820E1108;
		  /* 820E1108h */ case   56:  		/* lis R6, 15 */
		/* 820E1108h case   56:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 820E1108h case   56:*/		return 0x820E110C;
		  /* 820E110Ch */ case   57:  		/* mr R5, R30 */
		/* 820E110Ch case   57:*/		regs.R5 = regs.R30;
		/* 820E110Ch case   57:*/		return 0x820E1110;
		  /* 820E1110h */ case   58:  		/* mr R3, R31 */
		/* 820E1110h case   58:*/		regs.R3 = regs.R31;
		/* 820E1110h case   58:*/		return 0x820E1114;
		  /* 820E1114h */ case   59:  		/* lwz R11, <#[R11 + 332]> */
		/* 820E1114h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E1114h case   59:*/		return 0x820E1118;
		  /* 820E1118h */ case   60:  		/* lwz R4, <#[R10 + 8]> */
		/* 820E1118h case   60:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000008) );
		/* 820E1118h case   60:*/		return 0x820E111C;
		  /* 820E111Ch */ case   61:  		/* mtspr CTR, R11 */
		/* 820E111Ch case   61:*/		regs.CTR = regs.R11;
		/* 820E111Ch case   61:*/		return 0x820E1120;
		  /* 820E1120h */ case   62:  		/* bcctrl 20, CR0_LT */
		/* 820E1120h case   62:*/		if ( 1 ) { regs.LR = 0x820E1124; return (uint32)regs.CTR; }
		/* 820E1120h case   62:*/		return 0x820E1124;
		  /* 820E1124h */ case   63:  		/* cmpwi CR0, R3, 0 */
		/* 820E1124h case   63:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1124h case   63:*/		return 0x820E1128;
		  /* 820E1128h */ case   64:  		/* bc 12, CR0_LT, 832 */
		/* 820E1128h case   64:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1128h case   64:*/		return 0x820E112C;
		  /* 820E112Ch */ case   65:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E112Ch case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E112Ch case   65:*/		return 0x820E1130;
		  /* 820E1130h */ case   66:  		/* rlwinm R29, R30, 2, 0, 29 */
		/* 820E1130h case   66:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R30);
		/* 820E1130h case   66:*/		return 0x820E1134;
		  /* 820E1134h */ case   67:  		/* lwz R10, <#[R31]> */
		/* 820E1134h case   67:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1134h case   67:*/		return 0x820E1138;
		  /* 820E1138h */ case   68:  		/* addi R6, R1, 180 */
		/* 820E1138h case   68:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB4);
		/* 820E1138h case   68:*/		return 0x820E113C;
		  /* 820E113Ch */ case   69:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E113Ch case   69:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E113Ch case   69:*/		return 0x820E1140;
		  /* 820E1140h */ case   70:  		/* addi R5, R1, 164 */
		/* 820E1140h case   70:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA4);
		/* 820E1140h case   70:*/		return 0x820E1144;
		  /* 820E1144h */ case   71:  		/* mr R3, R31 */
		/* 820E1144h case   71:*/		regs.R3 = regs.R31;
		/* 820E1144h case   71:*/		return 0x820E1148;
		  /* 820E1148h */ case   72:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E1148h case   72:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E1148h case   72:*/		return 0x820E114C;
		  /* 820E114Ch */ case   73:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E114Ch case   73:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E114Ch case   73:*/		return 0x820E1150;
		  /* 820E1150h */ case   74:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820E1150h case   74:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820E1150h case   74:*/		return 0x820E1154;
		  /* 820E1154h */ case   75:  		/* mtspr CTR, R10 */
		/* 820E1154h case   75:*/		regs.CTR = regs.R10;
		/* 820E1154h case   75:*/		return 0x820E1158;
		  /* 820E1158h */ case   76:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E1158h case   76:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E1158h case   76:*/		return 0x820E115C;
		  /* 820E115Ch */ case   77:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E115Ch case   77:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E115Ch case   77:*/		return 0x820E1160;
		  /* 820E1160h */ case   78:  		/* bcctrl 20, CR0_LT */
		/* 820E1160h case   78:*/		if ( 1 ) { regs.LR = 0x820E1164; return (uint32)regs.CTR; }
		/* 820E1160h case   78:*/		return 0x820E1164;
		  /* 820E1164h */ case   79:  		/* cmpwi CR0, R3, 0 */
		/* 820E1164h case   79:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1164h case   79:*/		return 0x820E1168;
		  /* 820E1168h */ case   80:  		/* bc 12, CR0_LT, 768 */
		/* 820E1168h case   80:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1168h case   80:*/		return 0x820E116C;
		  /* 820E116Ch */ case   81:  		/* lwz R11, <#[R31]> */
		/* 820E116Ch case   81:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E116Ch case   81:*/		return 0x820E1170;
		  /* 820E1170h */ case   82:  		/* addi R7, R1, 196 */
		/* 820E1170h case   82:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC4);
		/* 820E1170h case   82:*/		return 0x820E1174;
		  /* 820E1174h */ case   83:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E1174h case   83:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1174h case   83:*/		return 0x820E1178;
		  /* 820E1178h */ case   84:  		/* lis R6, 15 */
		/* 820E1178h case   84:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 820E1178h case   84:*/		return 0x820E117C;
		  /* 820E117Ch */ case   85:  		/* mr R5, R30 */
		/* 820E117Ch case   85:*/		regs.R5 = regs.R30;
		/* 820E117Ch case   85:*/		return 0x820E1180;
		  /* 820E1180h */ case   86:  		/* mr R3, R31 */
		/* 820E1180h case   86:*/		regs.R3 = regs.R31;
		/* 820E1180h case   86:*/		return 0x820E1184;
		  /* 820E1184h */ case   87:  		/* lwz R9, <#[R11 + 332]> */
		/* 820E1184h case   87:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E1184h case   87:*/		return 0x820E1188;
		  /* 820E1188h */ case   88:  		/* lwz R11, <#[R10 + 8]> */
		/* 820E1188h case   88:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E1188h case   88:*/		return 0x820E118C;
		  /* 820E118Ch */ case   89:  		/* add R4, R11, R29 */
		/* 820E118Ch case   89:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R29);
		/* 820E118Ch case   89:*/		return 0x820E1190;
		  /* 820E1190h */ case   90:  		/* mtspr CTR, R9 */
		/* 820E1190h case   90:*/		regs.CTR = regs.R9;
		/* 820E1190h case   90:*/		return 0x820E1194;
		  /* 820E1194h */ case   91:  		/* bcctrl 20, CR0_LT */
		/* 820E1194h case   91:*/		if ( 1 ) { regs.LR = 0x820E1198; return (uint32)regs.CTR; }
		/* 820E1194h case   91:*/		return 0x820E1198;
		  /* 820E1198h */ case   92:  		/* cmpwi CR0, R3, 0 */
		/* 820E1198h case   92:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1198h case   92:*/		return 0x820E119C;
		  /* 820E119Ch */ case   93:  		/* bc 12, CR0_LT, 716 */
		/* 820E119Ch case   93:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E119Ch case   93:*/		return 0x820E11A0;
		  /* 820E11A0h */ case   94:  		/* addi R6, R1, 208 */
		/* 820E11A0h case   94:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD0);
		/* 820E11A0h case   94:*/		return 0x820E11A4;
		  /* 820E11A4h */ case   95:  		/* li R26, 0 */
		/* 820E11A4h case   95:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E11A4h case   95:*/		return 0x820E11A8;
		  /* 820E11A8h */ case   96:  		/* li R11, 32 */
		/* 820E11A8h case   96:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 820E11A8h case   96:*/		return 0x820E11AC;
		  /* 820E11ACh */ case   97:  		/* stw R6, <#[R1 + 84]> */
		/* 820E11ACh case   97:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 820E11ACh case   97:*/		return 0x820E11B0;
		  /* 820E11B0h */ case   98:  		/* li R10, 32 */
		/* 820E11B0h case   98:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 820E11B0h case   98:*/		return 0x820E11B4;
		  /* 820E11B4h */ case   99:  		/* stw R26, <#[R1 + 116]> */
		/* 820E11B4h case   99:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000074) );
		/* 820E11B4h case   99:*/		return 0x820E11B8;
		  /* 820E11B8h */ case  100:  		/* addi R9, R1, 128 */
		/* 820E11B8h case  100:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E11B8h case  100:*/		return 0x820E11BC;
		  /* 820E11BCh */ case  101:  		/* stw R26, <#[R1 + 108]> */
		/* 820E11BCh case  101:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E11BCh case  101:*/		return 0x820E11C0;
		  /* 820E11C0h */ case  102:  		/* addi R8, R1, 192 */
		/* 820E11C0h case  102:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E11C0h case  102:*/		return 0x820E11C4;
		  /* 820E11C4h */ case  103:  		/* stw R26, <#[R1 + 100]> */
		/* 820E11C4h case  103:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000064) );
		/* 820E11C4h case  103:*/		return 0x820E11C8;
		  /* 820E11C8h */ case  104:  		/* addi R7, R1, 176 */
		/* 820E11C8h case  104:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 820E11C8h case  104:*/		return 0x820E11CC;
		  /* 820E11CCh */ case  105:  		/* stw R11, <#[R1 + 92]> */
		/* 820E11CCh case  105:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820E11CCh case  105:*/		return 0x820E11D0;
		  /* 820E11D0h */ case  106:  		/* addi R6, R1, 160 */
		/* 820E11D0h case  106:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E11D0h case  106:*/		return 0x820E11D4;
		  /* 820E11D4h */ case  107:  		/* li R5, 2 */
		/* 820E11D4h case  107:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820E11D4h case  107:*/		return 0x820E11D8;
		  /* 820E11D8h */ case  108:  		/* li R4, 0 */
		/* 820E11D8h case  108:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E11D8h case  108:*/		return 0x820E11DC;
		  /* 820E11DCh */ case  109:  		/* mr R3, R31 */
		/* 820E11DCh case  109:*/		regs.R3 = regs.R31;
		/* 820E11DCh case  109:*/		return 0x820E11E0;
		  /* 820E11E0h */ case  110:  		/* bl -3136 */
		/* 820E11E0h case  110:*/		regs.LR = 0x820E11E4; return 0x820E05A0;
		/* 820E11E0h case  110:*/		return 0x820E11E4;
		  /* 820E11E4h */ case  111:  		/* cmpwi CR0, R3, 0 */
		/* 820E11E4h case  111:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E11E4h case  111:*/		return 0x820E11E8;
		  /* 820E11E8h */ case  112:  		/* bc 12, CR0_LT, 640 */
		/* 820E11E8h case  112:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E11E8h case  112:*/		return 0x820E11EC;
		  /* 820E11ECh */ case  113:  		/* lis R11, -32254 */
		/* 820E11ECh case  113:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E11ECh case  113:*/		return 0x820E11F0;
		  /* 820E11F0h */ case  114:  		/* li R4, 32 */
		/* 820E11F0h case  114:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E11F0h case  114:*/		return 0x820E11F4;
		  /* 820E11F4h */ case  115:  		/* addi R25, R11, -30716 */
		/* 820E11F4h case  115:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFF8804);
		/* 820E11F4h case  115:*/		return 0x820E11F8;
		  /* 820E11F8h */ case  116:  		/* addi R3, R1, 240 */
		/* 820E11F8h case  116:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xF0);
		/* 820E11F8h case  116:*/		return 0x820E11FC;
		  /* 820E11FCh */ case  117:  		/* mr R5, R25 */
		/* 820E11FCh case  117:*/		regs.R5 = regs.R25;
		/* 820E11FCh case  117:*/		return 0x820E1200;
		  /* 820E1200h */ case  118:  		/* bl -240400 */
		/* 820E1200h case  118:*/		regs.LR = 0x820E1204; return 0x820A66F0;
		/* 820E1200h case  118:*/		return 0x820E1204;
		  /* 820E1204h */ case  119:  		/* lwz R11, <#[R31]> */
		/* 820E1204h case  119:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1204h case  119:*/		return 0x820E1208;
		  /* 820E1208h */ case  120:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E1208h case  120:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1208h case  120:*/		return 0x820E120C;
		  /* 820E120Ch */ case  121:  		/* addi R7, R1, 208 */
		/* 820E120Ch case  121:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD0);
		/* 820E120Ch case  121:*/		return 0x820E1210;
		  /* 820E1210h */ case  122:  		/* addi R6, R1, 128 */
		/* 820E1210h case  122:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E1210h case  122:*/		return 0x820E1214;
		  /* 820E1214h */ case  123:  		/* addi R5, R1, 240 */
		/* 820E1214h case  123:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820E1214h case  123:*/		return 0x820E1218;
		  /* 820E1218h */ case  124:  		/* mr R3, R31 */
		/* 820E1218h case  124:*/		regs.R3 = regs.R31;
		/* 820E1218h case  124:*/		return 0x820E121C;
		  /* 820E121Ch */ case  125:  		/* lwz R11, <#[R11 + 484]> */
		/* 820E121Ch case  125:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E4) );
		/* 820E121Ch case  125:*/		return 0x820E1220;
		  /* 820E1220h */ case  126:  		/* mtspr CTR, R11 */
		/* 820E1220h case  126:*/		regs.CTR = regs.R11;
		/* 820E1220h case  126:*/		return 0x820E1224;
		  /* 820E1224h */ case  127:  		/* lwz R10, <#[R10]> */
		/* 820E1224h case  127:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E1224h case  127:*/		return 0x820E1228;
		  /* 820E1228h */ case  128:  		/* rlwinm R4, R10, 0, 0, 11 */
		/* 820E1228h case  128:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R4,regs.R10);
		/* 820E1228h case  128:*/		return 0x820E122C;
		  /* 820E122Ch */ case  129:  		/* bcctrl 20, CR0_LT */
		/* 820E122Ch case  129:*/		if ( 1 ) { regs.LR = 0x820E1230; return (uint32)regs.CTR; }
		/* 820E122Ch case  129:*/		return 0x820E1230;
		  /* 820E1230h */ case  130:  		/* cmpwi CR0, R3, 0 */
		/* 820E1230h case  130:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1230h case  130:*/		return 0x820E1234;
		  /* 820E1234h */ case  131:  		/* bc 12, CR0_LT, 564 */
		/* 820E1234h case  131:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1234h case  131:*/		return 0x820E1238;
		  /* 820E1238h */ case  132:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E1238h case  132:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E1238h case  132:*/		return 0x820E123C;
		  /* 820E123Ch */ case  133:  		/* lis R8, -32254 */
		/* 820E123Ch case  133:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8202);
		/* 820E123Ch case  133:*/		return 0x820E1240;
		  /* 820E1240h */ case  134:  		/* lis R9, -32254 */
		/* 820E1240h case  134:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820E1240h case  134:*/		return 0x820E1244;
		  /* 820E1244h */ case  135:  		/* lis R10, -32254 */
		/* 820E1244h case  135:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E1244h case  135:*/		return 0x820E1248;
		  /* 820E1248h */ case  136:  		/* mr R30, R26 */
		/* 820E1248h case  136:*/		regs.R30 = regs.R26;
		/* 820E1248h case  136:*/		return 0x820E124C;
		  /* 820E124Ch */ case  137:  		/* addi R28, R8, -30684 */
		/* 820E124Ch case  137:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R8,0xFFFF8824);
		/* 820E124Ch case  137:*/		return 0x820E1250;
		  /* 820E1250h */ case  138:  		/* addi R27, R9, -30692 */
		/* 820E1250h case  138:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFF881C);
		/* 820E1250h case  138:*/		return 0x820E1254;
		  /* 820E1254h */ case  139:  		/* cmplwi CR6, R11, 0 */
		/* 820E1254h case  139:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E1254h case  139:*/		return 0x820E1258;
		  /* 820E1258h */ case  140:  		/* addi R29, R10, -30704 */
		/* 820E1258h case  140:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFF8810);
		/* 820E1258h case  140:*/		return 0x820E125C;
		  /* 820E125Ch */ case  141:  		/* bc 12, CR6_EQ, 136 */
		/* 820E125Ch case  141:*/		if ( regs.CR[6].eq ) { return 0x820E12E4;  }
		/* 820E125Ch case  141:*/		return 0x820E1260;
		  /* 820E1260h */ case  142:  		/* mr R3, R31 */
		/* 820E1260h case  142:*/		regs.R3 = regs.R31;
		/* 820E1260h case  142:*/		return 0x820E1264;
		  /* 820E1264h */ case  143:  		/* bl -28852 */
		/* 820E1264h case  143:*/		regs.LR = 0x820E1268; return 0x820DA1B0;
		/* 820E1264h case  143:*/		return 0x820E1268;
		  /* 820E1268h */ case  144:  		/* cmpwi CR0, R3, 0 */
		/* 820E1268h case  144:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1268h case  144:*/		return 0x820E126C;
		  /* 820E126Ch */ case  145:  		/* bc 12, CR0_LT, 508 */
		/* 820E126Ch case  145:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E126Ch case  145:*/		return 0x820E1270;
		  /* 820E1270h */ case  146:  		/* mr R5, R29 */
		/* 820E1270h case  146:*/		regs.R5 = regs.R29;
		/* 820E1270h case  146:*/		return 0x820E1274;
		  /* 820E1274h */ case  147:  		/* mr R6, R30 */
		/* 820E1274h case  147:*/		regs.R6 = regs.R30;
		/* 820E1274h case  147:*/		return 0x820E1278;
		  /* 820E1278h */ case  148:  		/* li R4, 32 */
		/* 820E1278h case  148:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E1278h case  148:*/		return 0x820E127C;
		  /* 820E127Ch */ case  149:  		/* addi R3, R1, 208 */
		/* 820E127Ch case  149:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 820E127Ch case  149:*/		return 0x820E1280;
		  /* 820E1280h */ case  150:  		/* bl -257088 */
		/* 820E1280h case  150:*/		regs.LR = 0x820E1284; return 0x820A2640;
		/* 820E1280h case  150:*/		return 0x820E1284;
		  /* 820E1284h */ case  151:  		/* mr R4, R27 */
		/* 820E1284h case  151:*/		regs.R4 = regs.R27;
		/* 820E1284h case  151:*/		return 0x820E1288;
		  /* 820E1288h */ case  152:  		/* addi R5, R1, 208 */
		/* 820E1288h case  152:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820E1288h case  152:*/		return 0x820E128C;
		  /* 820E128Ch */ case  153:  		/* mr R3, R31 */
		/* 820E128Ch case  153:*/		regs.R3 = regs.R31;
		/* 820E128Ch case  153:*/		return 0x820E1290;
		  /* 820E1290h */ case  154:  		/* bl -29112 */
		/* 820E1290h case  154:*/		regs.LR = 0x820E1294; return 0x820DA0D8;
		/* 820E1290h case  154:*/		return 0x820E1294;
		  /* 820E1294h */ case  155:  		/* cmpwi CR0, R3, 0 */
		/* 820E1294h case  155:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1294h case  155:*/		return 0x820E1298;
		  /* 820E1298h */ case  156:  		/* bc 12, CR0_LT, 464 */
		/* 820E1298h case  156:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1298h case  156:*/		return 0x820E129C;
		  /* 820E129Ch */ case  157:  		/* lwz R11, <#[R31]> */
		/* 820E129Ch case  157:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E129Ch case  157:*/		return 0x820E12A0;
		  /* 820E12A0h */ case  158:  		/* mr R4, R28 */
		/* 820E12A0h case  158:*/		regs.R4 = regs.R28;
		/* 820E12A0h case  158:*/		return 0x820E12A4;
		  /* 820E12A4h */ case  159:  		/* mr R5, R30 */
		/* 820E12A4h case  159:*/		regs.R5 = regs.R30;
		/* 820E12A4h case  159:*/		return 0x820E12A8;
		  /* 820E12A8h */ case  160:  		/* mr R3, R31 */
		/* 820E12A8h case  160:*/		regs.R3 = regs.R31;
		/* 820E12A8h case  160:*/		return 0x820E12AC;
		  /* 820E12ACh */ case  161:  		/* lwz R11, <#[R11 + 480]> */
		/* 820E12ACh case  161:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E0) );
		/* 820E12ACh case  161:*/		return 0x820E12B0;
		  /* 820E12B0h */ case  162:  		/* mtspr CTR, R11 */
		/* 820E12B0h case  162:*/		regs.CTR = regs.R11;
		/* 820E12B0h case  162:*/		return 0x820E12B4;
		  /* 820E12B4h */ case  163:  		/* bcctrl 20, CR0_LT */
		/* 820E12B4h case  163:*/		if ( 1 ) { regs.LR = 0x820E12B8; return (uint32)regs.CTR; }
		/* 820E12B4h case  163:*/		return 0x820E12B8;
		  /* 820E12B8h */ case  164:  		/* cmpwi CR0, R3, 0 */
		/* 820E12B8h case  164:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E12B8h case  164:*/		return 0x820E12BC;
		  /* 820E12BCh */ case  165:  		/* bc 12, CR0_LT, 428 */
		/* 820E12BCh case  165:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E12BCh case  165:*/		return 0x820E12C0;
		  /* 820E12C0h */ case  166:  		/* mr R4, R24 */
		/* 820E12C0h case  166:*/		regs.R4 = regs.R24;
		/* 820E12C0h case  166:*/		return 0x820E12C4;
		  /* 820E12C4h */ case  167:  		/* mr R3, R31 */
		/* 820E12C4h case  167:*/		regs.R3 = regs.R31;
		/* 820E12C4h case  167:*/		return 0x820E12C8;
		  /* 820E12C8h */ case  168:  		/* bl -29168 */
		/* 820E12C8h case  168:*/		regs.LR = 0x820E12CC; return 0x820DA0D8;
		/* 820E12C8h case  168:*/		return 0x820E12CC;
		  /* 820E12CCh */ case  169:  		/* cmpwi CR0, R3, 0 */
		/* 820E12CCh case  169:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E12CCh case  169:*/		return 0x820E12D0;
		  /* 820E12D0h */ case  170:  		/* bc 12, CR0_LT, 408 */
		/* 820E12D0h case  170:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E12D0h case  170:*/		return 0x820E12D4;
		  /* 820E12D4h */ case  171:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E12D4h case  171:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E12D4h case  171:*/		return 0x820E12D8;
		  /* 820E12D8h */ case  172:  		/* addi R30, R30, 1 */
		/* 820E12D8h case  172:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E12D8h case  172:*/		return 0x820E12DC;
		  /* 820E12DCh */ case  173:  		/* cmplw CR6, R30, R11 */
		/* 820E12DCh case  173:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E12DCh case  173:*/		return 0x820E12E0;
		  /* 820E12E0h */ case  174:  		/* bc 12, CR6_LT, -128 */
		/* 820E12E0h case  174:*/		if ( regs.CR[6].lt ) { return 0x820E1260;  }
		/* 820E12E0h case  174:*/		return 0x820E12E4;
	}
	return 0x820E12E4;
} // Block from 820E1028h-820E12E4h (175 instructions)

//////////////////////////////////////////////////////
// Block at 820E12E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E12E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E12E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E12E4);
		  /* 820E12E4h */ case    0:  		/* mr R30, R26 */
		/* 820E12E4h case    0:*/		regs.R30 = regs.R26;
		/* 820E12E4h case    0:*/		return 0x820E12E8;
		  /* 820E12E8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E12E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E12E8h case    1:*/		return 0x820E12EC;
		  /* 820E12ECh */ case    2:  		/* bc 12, CR6_EQ, 172 */
		/* 820E12ECh case    2:*/		if ( regs.CR[6].eq ) { return 0x820E1398;  }
		/* 820E12ECh case    2:*/		return 0x820E12F0;
		  /* 820E12F0h */ case    3:  		/* mr R5, R25 */
		/* 820E12F0h case    3:*/		regs.R5 = regs.R25;
		/* 820E12F0h case    3:*/		return 0x820E12F4;
		  /* 820E12F4h */ case    4:  		/* mr R6, R30 */
		/* 820E12F4h case    4:*/		regs.R6 = regs.R30;
		/* 820E12F4h case    4:*/		return 0x820E12F8;
		  /* 820E12F8h */ case    5:  		/* li R4, 32 */
		/* 820E12F8h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E12F8h case    5:*/		return 0x820E12FC;
		  /* 820E12FCh */ case    6:  		/* addi R3, R1, 128 */
		/* 820E12FCh case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820E12FCh case    6:*/		return 0x820E1300;
		  /* 820E1300h */ case    7:  		/* bl -257216 */
		/* 820E1300h case    7:*/		regs.LR = 0x820E1304; return 0x820A2640;
		/* 820E1300h case    7:*/		return 0x820E1304;
		  /* 820E1304h */ case    8:  		/* mr R5, R29 */
		/* 820E1304h case    8:*/		regs.R5 = regs.R29;
		/* 820E1304h case    8:*/		return 0x820E1308;
		  /* 820E1308h */ case    9:  		/* mr R6, R30 */
		/* 820E1308h case    9:*/		regs.R6 = regs.R30;
		/* 820E1308h case    9:*/		return 0x820E130C;
		  /* 820E130Ch */ case   10:  		/* li R4, 32 */
		/* 820E130Ch case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E130Ch case   10:*/		return 0x820E1310;
		  /* 820E1310h */ case   11:  		/* addi R3, R1, 208 */
		/* 820E1310h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 820E1310h case   11:*/		return 0x820E1314;
		  /* 820E1314h */ case   12:  		/* bl -257236 */
		/* 820E1314h case   12:*/		regs.LR = 0x820E1318; return 0x820A2640;
		/* 820E1314h case   12:*/		return 0x820E1318;
		  /* 820E1318h */ case   13:  		/* mr R3, R31 */
		/* 820E1318h case   13:*/		regs.R3 = regs.R31;
		/* 820E1318h case   13:*/		return 0x820E131C;
		  /* 820E131Ch */ case   14:  		/* bl -29036 */
		/* 820E131Ch case   14:*/		regs.LR = 0x820E1320; return 0x820DA1B0;
		/* 820E131Ch case   14:*/		return 0x820E1320;
		  /* 820E1320h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820E1320h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1320h case   15:*/		return 0x820E1324;
		  /* 820E1324h */ case   16:  		/* bc 12, CR0_LT, 324 */
		/* 820E1324h case   16:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1324h case   16:*/		return 0x820E1328;
		  /* 820E1328h */ case   17:  		/* mr R4, R27 */
		/* 820E1328h case   17:*/		regs.R4 = regs.R27;
		/* 820E1328h case   17:*/		return 0x820E132C;
		  /* 820E132Ch */ case   18:  		/* addi R5, R1, 128 */
		/* 820E132Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E132Ch case   18:*/		return 0x820E1330;
		  /* 820E1330h */ case   19:  		/* mr R3, R31 */
		/* 820E1330h case   19:*/		regs.R3 = regs.R31;
		/* 820E1330h case   19:*/		return 0x820E1334;
		  /* 820E1334h */ case   20:  		/* bl -29276 */
		/* 820E1334h case   20:*/		regs.LR = 0x820E1338; return 0x820DA0D8;
		/* 820E1334h case   20:*/		return 0x820E1338;
		  /* 820E1338h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820E1338h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1338h case   21:*/		return 0x820E133C;
		  /* 820E133Ch */ case   22:  		/* bc 12, CR0_LT, 300 */
		/* 820E133Ch case   22:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E133Ch case   22:*/		return 0x820E1340;
		  /* 820E1340h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 820E1340h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1340h case   23:*/		return 0x820E1344;
		  /* 820E1344h */ case   24:  		/* cmpwi CR6, R21, 0 */
		/* 820E1344h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 820E1344h case   24:*/		return 0x820E1348;
		  /* 820E1348h */ case   25:  		/* addi R5, R1, 208 */
		/* 820E1348h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820E1348h case   25:*/		return 0x820E134C;
		  /* 820E134Ch */ case   26:  		/* addi R4, R1, 128 */
		/* 820E134Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E134Ch case   26:*/		return 0x820E1350;
		  /* 820E1350h */ case   27:  		/* mr R3, R31 */
		/* 820E1350h case   27:*/		regs.R3 = regs.R31;
		/* 820E1350h case   27:*/		return 0x820E1354;
		  /* 820E1354h */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 820E1354h case   28:*/		if ( regs.CR[6].eq ) { return 0x820E1360;  }
		/* 820E1354h case   28:*/		return 0x820E1358;
		  /* 820E1358h */ case   29:  		/* lwz R11, <#[R11 + 464]> */
		/* 820E1358h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D0) );
		/* 820E1358h case   29:*/		return 0x820E135C;
		  /* 820E135Ch */ case   30:  		/* b 8 */
		/* 820E135Ch case   30:*/		return 0x820E1364;
		/* 820E135Ch case   30:*/		return 0x820E1360;
	}
	return 0x820E1360;
} // Block from 820E12E4h-820E1360h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820E1360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1360);
		  /* 820E1360h */ case    0:  		/* lwz R11, <#[R11 + 460]> */
		/* 820E1360h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001CC) );
		/* 820E1360h case    0:*/		return 0x820E1364;
	}
	return 0x820E1364;
} // Block from 820E1360h-820E1364h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1364);
		  /* 820E1364h */ case    0:  		/* mtspr CTR, R11 */
		/* 820E1364h case    0:*/		regs.CTR = regs.R11;
		/* 820E1364h case    0:*/		return 0x820E1368;
		  /* 820E1368h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 820E1368h case    1:*/		if ( 1 ) { regs.LR = 0x820E136C; return (uint32)regs.CTR; }
		/* 820E1368h case    1:*/		return 0x820E136C;
		  /* 820E136Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820E136Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E136Ch case    2:*/		return 0x820E1370;
		  /* 820E1370h */ case    3:  		/* bc 12, CR0_LT, 248 */
		/* 820E1370h case    3:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1370h case    3:*/		return 0x820E1374;
		  /* 820E1374h */ case    4:  		/* mr R4, R24 */
		/* 820E1374h case    4:*/		regs.R4 = regs.R24;
		/* 820E1374h case    4:*/		return 0x820E1378;
		  /* 820E1378h */ case    5:  		/* mr R3, R31 */
		/* 820E1378h case    5:*/		regs.R3 = regs.R31;
		/* 820E1378h case    5:*/		return 0x820E137C;
		  /* 820E137Ch */ case    6:  		/* bl -29348 */
		/* 820E137Ch case    6:*/		regs.LR = 0x820E1380; return 0x820DA0D8;
		/* 820E137Ch case    6:*/		return 0x820E1380;
		  /* 820E1380h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820E1380h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1380h case    7:*/		return 0x820E1384;
		  /* 820E1384h */ case    8:  		/* bc 12, CR0_LT, 228 */
		/* 820E1384h case    8:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1384h case    8:*/		return 0x820E1388;
		  /* 820E1388h */ case    9:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E1388h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E1388h case    9:*/		return 0x820E138C;
		  /* 820E138Ch */ case   10:  		/* addi R30, R30, 1 */
		/* 820E138Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E138Ch case   10:*/		return 0x820E1390;
		  /* 820E1390h */ case   11:  		/* cmplw CR6, R30, R11 */
		/* 820E1390h case   11:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E1390h case   11:*/		return 0x820E1394;
		  /* 820E1394h */ case   12:  		/* bc 12, CR6_LT, -164 */
		/* 820E1394h case   12:*/		if ( regs.CR[6].lt ) { return 0x820E12F0;  }
		/* 820E1394h case   12:*/		return 0x820E1398;
	}
	return 0x820E1398;
} // Block from 820E1364h-820E1398h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E1398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1398);
		  /* 820E1398h */ case    0:  		/* cmpwi CR6, R23, 0 */
		/* 820E1398h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 820E1398h case    0:*/		return 0x820E139C;
		  /* 820E139Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 820E139Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E13C0;  }
		/* 820E139Ch case    1:*/		return 0x820E13A0;
		  /* 820E13A0h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 820E13A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E13A0h case    2:*/		return 0x820E13A4;
		  /* 820E13A4h */ case    3:  		/* mr R4, R28 */
		/* 820E13A4h case    3:*/		regs.R4 = regs.R28;
		/* 820E13A4h case    3:*/		return 0x820E13A8;
		  /* 820E13A8h */ case    4:  		/* mr R3, R31 */
		/* 820E13A8h case    4:*/		regs.R3 = regs.R31;
		/* 820E13A8h case    4:*/		return 0x820E13AC;
		  /* 820E13ACh */ case    5:  		/* lwz R11, <#[R11 + 564]> */
		/* 820E13ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000234) );
		/* 820E13ACh case    5:*/		return 0x820E13B0;
		  /* 820E13B0h */ case    6:  		/* mtspr CTR, R11 */
		/* 820E13B0h case    6:*/		regs.CTR = regs.R11;
		/* 820E13B0h case    6:*/		return 0x820E13B4;
		  /* 820E13B4h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 820E13B4h case    7:*/		if ( 1 ) { regs.LR = 0x820E13B8; return (uint32)regs.CTR; }
		/* 820E13B4h case    7:*/		return 0x820E13B8;
		  /* 820E13B8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E13B8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E13B8h case    8:*/		return 0x820E13BC;
		  /* 820E13BCh */ case    9:  		/* bc 12, CR0_LT, 172 */
		/* 820E13BCh case    9:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E13BCh case    9:*/		return 0x820E13C0;
	}
	return 0x820E13C0;
} // Block from 820E1398h-820E13C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E13C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E13C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E13C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E13C0);
		  /* 820E13C0h */ case    0:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E13C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E13C0h case    0:*/		return 0x820E13C4;
		  /* 820E13C4h */ case    1:  		/* mr R30, R26 */
		/* 820E13C4h case    1:*/		regs.R30 = regs.R26;
		/* 820E13C4h case    1:*/		return 0x820E13C8;
		  /* 820E13C8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820E13C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E13C8h case    2:*/		return 0x820E13CC;
		  /* 820E13CCh */ case    3:  		/* bc 4, CR6_GT, 152 */
		/* 820E13CCh case    3:*/		if ( !regs.CR[6].gt ) { return 0x820E1464;  }
		/* 820E13CCh case    3:*/		return 0x820E13D0;
		  /* 820E13D0h */ case    4:  		/* mr R5, R25 */
		/* 820E13D0h case    4:*/		regs.R5 = regs.R25;
		/* 820E13D0h case    4:*/		return 0x820E13D4;
		  /* 820E13D4h */ case    5:  		/* mr R6, R30 */
		/* 820E13D4h case    5:*/		regs.R6 = regs.R30;
		/* 820E13D4h case    5:*/		return 0x820E13D8;
		  /* 820E13D8h */ case    6:  		/* li R4, 32 */
		/* 820E13D8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E13D8h case    6:*/		return 0x820E13DC;
		  /* 820E13DCh */ case    7:  		/* addi R3, R1, 128 */
		/* 820E13DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820E13DCh case    7:*/		return 0x820E13E0;
		  /* 820E13E0h */ case    8:  		/* bl -257440 */
		/* 820E13E0h case    8:*/		regs.LR = 0x820E13E4; return 0x820A2640;
		/* 820E13E0h case    8:*/		return 0x820E13E4;
		  /* 820E13E4h */ case    9:  		/* mr R3, R31 */
		/* 820E13E4h case    9:*/		regs.R3 = regs.R31;
		/* 820E13E4h case    9:*/		return 0x820E13E8;
		  /* 820E13E8h */ case   10:  		/* bl -29240 */
		/* 820E13E8h case   10:*/		regs.LR = 0x820E13EC; return 0x820DA1B0;
		/* 820E13E8h case   10:*/		return 0x820E13EC;
		  /* 820E13ECh */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820E13ECh case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E13ECh case   11:*/		return 0x820E13F0;
		  /* 820E13F0h */ case   12:  		/* bc 12, CR0_LT, 120 */
		/* 820E13F0h case   12:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E13F0h case   12:*/		return 0x820E13F4;
		  /* 820E13F4h */ case   13:  		/* mr R4, R27 */
		/* 820E13F4h case   13:*/		regs.R4 = regs.R27;
		/* 820E13F4h case   13:*/		return 0x820E13F8;
		  /* 820E13F8h */ case   14:  		/* mr R5, R22 */
		/* 820E13F8h case   14:*/		regs.R5 = regs.R22;
		/* 820E13F8h case   14:*/		return 0x820E13FC;
		  /* 820E13FCh */ case   15:  		/* mr R3, R31 */
		/* 820E13FCh case   15:*/		regs.R3 = regs.R31;
		/* 820E13FCh case   15:*/		return 0x820E1400;
		  /* 820E1400h */ case   16:  		/* bl -29480 */
		/* 820E1400h case   16:*/		regs.LR = 0x820E1404; return 0x820DA0D8;
		/* 820E1400h case   16:*/		return 0x820E1404;
		  /* 820E1404h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820E1404h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1404h case   17:*/		return 0x820E1408;
		  /* 820E1408h */ case   18:  		/* bc 12, CR0_LT, 96 */
		/* 820E1408h case   18:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1408h case   18:*/		return 0x820E140C;
		  /* 820E140Ch */ case   19:  		/* lwz R11, <#[R31]> */
		/* 820E140Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E140Ch case   19:*/		return 0x820E1410;
		  /* 820E1410h */ case   20:  		/* cmpwi CR6, R21, 0 */
		/* 820E1410h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 820E1410h case   20:*/		return 0x820E1414;
		  /* 820E1414h */ case   21:  		/* addi R5, R1, 128 */
		/* 820E1414h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E1414h case   21:*/		return 0x820E1418;
		  /* 820E1418h */ case   22:  		/* mr R4, R22 */
		/* 820E1418h case   22:*/		regs.R4 = regs.R22;
		/* 820E1418h case   22:*/		return 0x820E141C;
		  /* 820E141Ch */ case   23:  		/* mr R3, R31 */
		/* 820E141Ch case   23:*/		regs.R3 = regs.R31;
		/* 820E141Ch case   23:*/		return 0x820E1420;
		  /* 820E1420h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 820E1420h case   24:*/		if ( regs.CR[6].eq ) { return 0x820E142C;  }
		/* 820E1420h case   24:*/		return 0x820E1424;
		  /* 820E1424h */ case   25:  		/* lwz R11, <#[R11 + 456]> */
		/* 820E1424h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001C8) );
		/* 820E1424h case   25:*/		return 0x820E1428;
		  /* 820E1428h */ case   26:  		/* b 8 */
		/* 820E1428h case   26:*/		return 0x820E1430;
		/* 820E1428h case   26:*/		return 0x820E142C;
	}
	return 0x820E142C;
} // Block from 820E13C0h-820E142Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E142Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E142C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E142C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E142C);
		  /* 820E142Ch */ case    0:  		/* lwz R11, <#[R11 + 464]> */
		/* 820E142Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D0) );
		/* 820E142Ch case    0:*/		return 0x820E1430;
	}
	return 0x820E1430;
} // Block from 820E142Ch-820E1430h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1430);
		  /* 820E1430h */ case    0:  		/* mtspr CTR, R11 */
		/* 820E1430h case    0:*/		regs.CTR = regs.R11;
		/* 820E1430h case    0:*/		return 0x820E1434;
		  /* 820E1434h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 820E1434h case    1:*/		if ( 1 ) { regs.LR = 0x820E1438; return (uint32)regs.CTR; }
		/* 820E1434h case    1:*/		return 0x820E1438;
		  /* 820E1438h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820E1438h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1438h case    2:*/		return 0x820E143C;
		  /* 820E143Ch */ case    3:  		/* bc 12, CR0_LT, 44 */
		/* 820E143Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E143Ch case    3:*/		return 0x820E1440;
		  /* 820E1440h */ case    4:  		/* mr R4, R24 */
		/* 820E1440h case    4:*/		regs.R4 = regs.R24;
		/* 820E1440h case    4:*/		return 0x820E1444;
		  /* 820E1444h */ case    5:  		/* mr R3, R31 */
		/* 820E1444h case    5:*/		regs.R3 = regs.R31;
		/* 820E1444h case    5:*/		return 0x820E1448;
		  /* 820E1448h */ case    6:  		/* bl -29552 */
		/* 820E1448h case    6:*/		regs.LR = 0x820E144C; return 0x820DA0D8;
		/* 820E1448h case    6:*/		return 0x820E144C;
		  /* 820E144Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820E144Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E144Ch case    7:*/		return 0x820E1450;
		  /* 820E1450h */ case    8:  		/* bc 12, CR0_LT, 24 */
		/* 820E1450h case    8:*/		if ( regs.CR[0].lt ) { return 0x820E1468;  }
		/* 820E1450h case    8:*/		return 0x820E1454;
		  /* 820E1454h */ case    9:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E1454h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E1454h case    9:*/		return 0x820E1458;
		  /* 820E1458h */ case   10:  		/* addi R30, R30, 1 */
		/* 820E1458h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E1458h case   10:*/		return 0x820E145C;
		  /* 820E145Ch */ case   11:  		/* cmplw CR6, R30, R11 */
		/* 820E145Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E145Ch case   11:*/		return 0x820E1460;
		  /* 820E1460h */ case   12:  		/* bc 12, CR6_LT, -144 */
		/* 820E1460h case   12:*/		if ( regs.CR[6].lt ) { return 0x820E13D0;  }
		/* 820E1460h case   12:*/		return 0x820E1464;
	}
	return 0x820E1464;
} // Block from 820E1430h-820E1464h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E1464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1464);
		  /* 820E1464h */ case    0:  		/* li R3, 0 */
		/* 820E1464h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E1464h case    0:*/		return 0x820E1468;
	}
	return 0x820E1468;
} // Block from 820E1464h-820E1468h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1468);
		  /* 820E1468h */ case    0:  		/* addi R1, R1, 368 */
		/* 820E1468h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 820E1468h case    0:*/		return 0x820E146C;
		  /* 820E146Ch */ case    1:  		/* b -328160 */
		/* 820E146Ch case    1:*/		return 0x8209128C;
		/* 820E146Ch case    1:*/		return 0x820E1470;
	}
	return 0x820E1470;
} // Block from 820E1468h-820E1470h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E1470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1470);
		  /* 820E1470h */ case    0:  		/* mfspr R12, LR */
		/* 820E1470h case    0:*/		regs.R12 = regs.LR;
		/* 820E1470h case    0:*/		return 0x820E1474;
		  /* 820E1474h */ case    1:  		/* bl -328228 */
		/* 820E1474h case    1:*/		regs.LR = 0x820E1478; return 0x82091250;
		/* 820E1474h case    1:*/		return 0x820E1478;
		  /* 820E1478h */ case    2:  		/* stwu R1, <#[R1 - 432]> */
		/* 820E1478h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 820E1478h case    2:*/		return 0x820E147C;
		  /* 820E147Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E147Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E147Ch case    3:*/		return 0x820E1480;
		  /* 820E1480h */ case    4:  		/* addi R7, R1, 136 */
		/* 820E1480h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x88);
		/* 820E1480h case    4:*/		return 0x820E1484;
		  /* 820E1484h */ case    5:  		/* lwz R10, <#[R3]> */
		/* 820E1484h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 820E1484h case    5:*/		return 0x820E1488;
		  /* 820E1488h */ case    6:  		/* li R6, 0 */
		/* 820E1488h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E1488h case    6:*/		return 0x820E148C;
		  /* 820E148Ch */ case    7:  		/* lwz R9, <#[R3 + 20]> */
		/* 820E148Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820E148Ch case    7:*/		return 0x820E1490;
		  /* 820E1490h */ case    8:  		/* addi R5, R1, 132 */
		/* 820E1490h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x84);
		/* 820E1490h case    8:*/		return 0x820E1494;
		  /* 820E1494h */ case    9:  		/* mr R31, R3 */
		/* 820E1494h case    9:*/		regs.R31 = regs.R3;
		/* 820E1494h case    9:*/		return 0x820E1498;
		  /* 820E1498h */ case   10:  		/* lwz R8, <#[R11 + 16]> */
		/* 820E1498h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 820E1498h case   10:*/		return 0x820E149C;
		  /* 820E149Ch */ case   11:  		/* lwz R11, <#[R11]> */
		/* 820E149Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E149Ch case   11:*/		return 0x820E14A0;
		  /* 820E14A0h */ case   12:  		/* lwz R10, <#[R10 + 320]> */
		/* 820E14A0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000140) );
		/* 820E14A0h case   12:*/		return 0x820E14A4;
		  /* 820E14A4h */ case   13:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 820E14A4h case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 820E14A4h case   13:*/		return 0x820E14A8;
		  /* 820E14A8h */ case   14:  		/* lwz R11, <#[R8]> */
		/* 820E14A8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E14A8h case   14:*/		return 0x820E14AC;
		  /* 820E14ACh */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E14ACh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E14ACh case   15:*/		return 0x820E14B0;
		  /* 820E14B0h */ case   16:  		/* mtspr CTR, R10 */
		/* 820E14B0h case   16:*/		regs.CTR = regs.R10;
		/* 820E14B0h case   16:*/		return 0x820E14B4;
		  /* 820E14B4h */ case   17:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E14B4h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E14B4h case   17:*/		return 0x820E14B8;
		  /* 820E14B8h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820E14B8h case   18:*/		if ( 1 ) { regs.LR = 0x820E14BC; return (uint32)regs.CTR; }
		/* 820E14B8h case   18:*/		return 0x820E14BC;
		  /* 820E14BCh */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 820E14BCh case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E14BCh case   19:*/		return 0x820E14C0;
		  /* 820E14C0h */ case   20:  		/* bc 12, CR0_LT, 912 */
		/* 820E14C0h case   20:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E14C0h case   20:*/		return 0x820E14C4;
		  /* 820E14C4h */ case   21:  		/* lwz R11, <#[R31]> */
		/* 820E14C4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E14C4h case   21:*/		return 0x820E14C8;
		  /* 820E14C8h */ case   22:  		/* addi R6, R1, 128 */
		/* 820E14C8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E14C8h case   22:*/		return 0x820E14CC;
		  /* 820E14CCh */ case   23:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E14CCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E14CCh case   23:*/		return 0x820E14D0;
		  /* 820E14D0h */ case   24:  		/* mr R3, R31 */
		/* 820E14D0h case   24:*/		regs.R3 = regs.R31;
		/* 820E14D0h case   24:*/		return 0x820E14D4;
		  /* 820E14D4h */ case   25:  		/* lwz R7, <#[R1 + 136]> */
		/* 820E14D4h case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000088) );
		/* 820E14D4h case   25:*/		return 0x820E14D8;
		  /* 820E14D8h */ case   26:  		/* lwz R11, <#[R11 + 324]> */
		/* 820E14D8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 820E14D8h case   26:*/		return 0x820E14DC;
		  /* 820E14DCh */ case   27:  		/* lwz R5, <#[R10 + 12]> */
		/* 820E14DCh case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E14DCh case   27:*/		return 0x820E14E0;
		  /* 820E14E0h */ case   28:  		/* lwz R4, <#[R10 + 16]> */
		/* 820E14E0h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 820E14E0h case   28:*/		return 0x820E14E4;
		  /* 820E14E4h */ case   29:  		/* mtspr CTR, R11 */
		/* 820E14E4h case   29:*/		regs.CTR = regs.R11;
		/* 820E14E4h case   29:*/		return 0x820E14E8;
		  /* 820E14E8h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 820E14E8h case   30:*/		if ( 1 ) { regs.LR = 0x820E14EC; return (uint32)regs.CTR; }
		/* 820E14E8h case   30:*/		return 0x820E14EC;
		  /* 820E14ECh */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820E14ECh case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E14ECh case   31:*/		return 0x820E14F0;
		  /* 820E14F0h */ case   32:  		/* bc 12, CR0_LT, 864 */
		/* 820E14F0h case   32:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E14F0h case   32:*/		return 0x820E14F4;
		  /* 820E14F4h */ case   33:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E14F4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E14F4h case   33:*/		return 0x820E14F8;
		  /* 820E14F8h */ case   34:  		/* lis R26, 4336 */
		/* 820E14F8h case   34:*/		cpu::op::lis<0>(regs,&regs.R26,0x10F0);
		/* 820E14F8h case   34:*/		return 0x820E14FC;
		  /* 820E14FCh */ case   35:  		/* li R28, 0 */
		/* 820E14FCh case   35:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820E14FCh case   35:*/		return 0x820E1500;
		  /* 820E1500h */ case   36:  		/* lwz R10, <#[R11]> */
		/* 820E1500h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E1500h case   36:*/		return 0x820E1504;
		  /* 820E1504h */ case   37:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 820E1504h case   37:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 820E1504h case   37:*/		return 0x820E1508;
		  /* 820E1508h */ case   38:  		/* cmplw CR6, R10, R26 */
		/* 820E1508h case   38:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 820E1508h case   38:*/		return 0x820E150C;
		  /* 820E150Ch */ case   39:  		/* bc 12, CR6_EQ, 296 */
		/* 820E150Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x820E1634;  }
		/* 820E150Ch case   39:*/		return 0x820E1510;
		  /* 820E1510h */ case   40:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E1510h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E1510h case   40:*/		return 0x820E1514;
		  /* 820E1514h */ case   41:  		/* addi R6, R1, 160 */
		/* 820E1514h case   41:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E1514h case   41:*/		return 0x820E1518;
		  /* 820E1518h */ case   42:  		/* lwz R10, <#[R31]> */
		/* 820E1518h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1518h case   42:*/		return 0x820E151C;
		  /* 820E151Ch */ case   43:  		/* addi R5, R1, 144 */
		/* 820E151Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E151Ch case   43:*/		return 0x820E1520;
		  /* 820E1520h */ case   44:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E1520h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E1520h case   44:*/		return 0x820E1524;
		  /* 820E1524h */ case   45:  		/* mr R3, R31 */
		/* 820E1524h case   45:*/		regs.R3 = regs.R31;
		/* 820E1524h case   45:*/		return 0x820E1528;
		  /* 820E1528h */ case   46:  		/* lwz R11, <#[R11]> */
		/* 820E1528h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E1528h case   46:*/		return 0x820E152C;
		  /* 820E152Ch */ case   47:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E152Ch case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E152Ch case   47:*/		return 0x820E1530;
		  /* 820E1530h */ case   48:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E1530h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E1530h case   48:*/		return 0x820E1534;
		  /* 820E1534h */ case   49:  		/* mtspr CTR, R10 */
		/* 820E1534h case   49:*/		regs.CTR = regs.R10;
		/* 820E1534h case   49:*/		return 0x820E1538;
		  /* 820E1538h */ case   50:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E1538h case   50:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E1538h case   50:*/		return 0x820E153C;
		  /* 820E153Ch */ case   51:  		/* bcctrl 20, CR0_LT */
		/* 820E153Ch case   51:*/		if ( 1 ) { regs.LR = 0x820E1540; return (uint32)regs.CTR; }
		/* 820E153Ch case   51:*/		return 0x820E1540;
		  /* 820E1540h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 820E1540h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1540h case   52:*/		return 0x820E1544;
		  /* 820E1544h */ case   53:  		/* bc 12, CR0_LT, 780 */
		/* 820E1544h case   53:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E1544h case   53:*/		return 0x820E1548;
		  /* 820E1548h */ case   54:  		/* lwz R11, <#[R31]> */
		/* 820E1548h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1548h case   54:*/		return 0x820E154C;
		  /* 820E154Ch */ case   55:  		/* addi R7, R1, 152 */
		/* 820E154Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x98);
		/* 820E154Ch case   55:*/		return 0x820E1550;
		  /* 820E1550h */ case   56:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E1550h case   56:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1550h case   56:*/		return 0x820E1554;
		  /* 820E1554h */ case   57:  		/* mr R5, R29 */
		/* 820E1554h case   57:*/		regs.R5 = regs.R29;
		/* 820E1554h case   57:*/		return 0x820E1558;
		  /* 820E1558h */ case   58:  		/* mr R3, R31 */
		/* 820E1558h case   58:*/		regs.R3 = regs.R31;
		/* 820E1558h case   58:*/		return 0x820E155C;
		  /* 820E155Ch */ case   59:  		/* lwz R6, <#[R1 + 128]> */
		/* 820E155Ch case   59:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 820E155Ch case   59:*/		return 0x820E1560;
		  /* 820E1560h */ case   60:  		/* lwz R11, <#[R11 + 332]> */
		/* 820E1560h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E1560h case   60:*/		return 0x820E1564;
		  /* 820E1564h */ case   61:  		/* lwz R4, <#[R10 + 8]> */
		/* 820E1564h case   61:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000008) );
		/* 820E1564h case   61:*/		return 0x820E1568;
		  /* 820E1568h */ case   62:  		/* mtspr CTR, R11 */
		/* 820E1568h case   62:*/		regs.CTR = regs.R11;
		/* 820E1568h case   62:*/		return 0x820E156C;
		  /* 820E156Ch */ case   63:  		/* bcctrl 20, CR0_LT */
		/* 820E156Ch case   63:*/		if ( 1 ) { regs.LR = 0x820E1570; return (uint32)regs.CTR; }
		/* 820E156Ch case   63:*/		return 0x820E1570;
		  /* 820E1570h */ case   64:  		/* cmpwi CR0, R3, 0 */
		/* 820E1570h case   64:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1570h case   64:*/		return 0x820E1574;
		  /* 820E1574h */ case   65:  		/* bc 12, CR0_LT, 732 */
		/* 820E1574h case   65:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E1574h case   65:*/		return 0x820E1578;
		  /* 820E1578h */ case   66:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E1578h case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1578h case   66:*/		return 0x820E157C;
		  /* 820E157Ch */ case   67:  		/* rlwinm R30, R29, 2, 0, 29 */
		/* 820E157Ch case   67:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R29);
		/* 820E157Ch case   67:*/		return 0x820E1580;
		  /* 820E1580h */ case   68:  		/* lwz R10, <#[R31]> */
		/* 820E1580h case   68:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1580h case   68:*/		return 0x820E1584;
		  /* 820E1584h */ case   69:  		/* addi R6, R1, 164 */
		/* 820E1584h case   69:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA4);
		/* 820E1584h case   69:*/		return 0x820E1588;
		  /* 820E1588h */ case   70:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E1588h case   70:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E1588h case   70:*/		return 0x820E158C;
		  /* 820E158Ch */ case   71:  		/* addi R5, R1, 148 */
		/* 820E158Ch case   71:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x94);
		/* 820E158Ch case   71:*/		return 0x820E1590;
		  /* 820E1590h */ case   72:  		/* mr R3, R31 */
		/* 820E1590h case   72:*/		regs.R3 = regs.R31;
		/* 820E1590h case   72:*/		return 0x820E1594;
		  /* 820E1594h */ case   73:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E1594h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E1594h case   73:*/		return 0x820E1598;
		  /* 820E1598h */ case   74:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E1598h case   74:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E1598h case   74:*/		return 0x820E159C;
		  /* 820E159Ch */ case   75:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E159Ch case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E159Ch case   75:*/		return 0x820E15A0;
		  /* 820E15A0h */ case   76:  		/* mtspr CTR, R10 */
		/* 820E15A0h case   76:*/		regs.CTR = regs.R10;
		/* 820E15A0h case   76:*/		return 0x820E15A4;
		  /* 820E15A4h */ case   77:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E15A4h case   77:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E15A4h case   77:*/		return 0x820E15A8;
		  /* 820E15A8h */ case   78:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E15A8h case   78:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E15A8h case   78:*/		return 0x820E15AC;
		  /* 820E15ACh */ case   79:  		/* bcctrl 20, CR0_LT */
		/* 820E15ACh case   79:*/		if ( 1 ) { regs.LR = 0x820E15B0; return (uint32)regs.CTR; }
		/* 820E15ACh case   79:*/		return 0x820E15B0;
		  /* 820E15B0h */ case   80:  		/* cmpwi CR0, R3, 0 */
		/* 820E15B0h case   80:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E15B0h case   80:*/		return 0x820E15B4;
		  /* 820E15B4h */ case   81:  		/* bc 12, CR0_LT, 668 */
		/* 820E15B4h case   81:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E15B4h case   81:*/		return 0x820E15B8;
		  /* 820E15B8h */ case   82:  		/* lwz R11, <#[R31]> */
		/* 820E15B8h case   82:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E15B8h case   82:*/		return 0x820E15BC;
		  /* 820E15BCh */ case   83:  		/* addi R7, R1, 156 */
		/* 820E15BCh case   83:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x9C);
		/* 820E15BCh case   83:*/		return 0x820E15C0;
		  /* 820E15C0h */ case   84:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E15C0h case   84:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E15C0h case   84:*/		return 0x820E15C4;
		  /* 820E15C4h */ case   85:  		/* mr R5, R29 */
		/* 820E15C4h case   85:*/		regs.R5 = regs.R29;
		/* 820E15C4h case   85:*/		return 0x820E15C8;
		  /* 820E15C8h */ case   86:  		/* mr R3, R31 */
		/* 820E15C8h case   86:*/		regs.R3 = regs.R31;
		/* 820E15C8h case   86:*/		return 0x820E15CC;
		  /* 820E15CCh */ case   87:  		/* lwz R6, <#[R1 + 128]> */
		/* 820E15CCh case   87:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 820E15CCh case   87:*/		return 0x820E15D0;
		  /* 820E15D0h */ case   88:  		/* lwz R9, <#[R11 + 332]> */
		/* 820E15D0h case   88:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E15D0h case   88:*/		return 0x820E15D4;
		  /* 820E15D4h */ case   89:  		/* lwz R11, <#[R10 + 8]> */
		/* 820E15D4h case   89:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E15D4h case   89:*/		return 0x820E15D8;
		  /* 820E15D8h */ case   90:  		/* add R4, R11, R30 */
		/* 820E15D8h case   90:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R30);
		/* 820E15D8h case   90:*/		return 0x820E15DC;
		  /* 820E15DCh */ case   91:  		/* mtspr CTR, R9 */
		/* 820E15DCh case   91:*/		regs.CTR = regs.R9;
		/* 820E15DCh case   91:*/		return 0x820E15E0;
		  /* 820E15E0h */ case   92:  		/* bcctrl 20, CR0_LT */
		/* 820E15E0h case   92:*/		if ( 1 ) { regs.LR = 0x820E15E4; return (uint32)regs.CTR; }
		/* 820E15E0h case   92:*/		return 0x820E15E4;
		  /* 820E15E4h */ case   93:  		/* cmpwi CR0, R3, 0 */
		/* 820E15E4h case   93:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E15E4h case   93:*/		return 0x820E15E8;
		  /* 820E15E8h */ case   94:  		/* bc 12, CR0_LT, 616 */
		/* 820E15E8h case   94:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E15E8h case   94:*/		return 0x820E15EC;
		  /* 820E15ECh */ case   95:  		/* addi R7, R1, 272 */
		/* 820E15ECh case   95:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x110);
		/* 820E15ECh case   95:*/		return 0x820E15F0;
		  /* 820E15F0h */ case   96:  		/* stw R28, <#[R1 + 116]> */
		/* 820E15F0h case   96:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 820E15F0h case   96:*/		return 0x820E15F4;
		  /* 820E15F4h */ case   97:  		/* li R11, 32 */
		/* 820E15F4h case   97:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 820E15F4h case   97:*/		return 0x820E15F8;
		  /* 820E15F8h */ case   98:  		/* stw R28, <#[R1 + 108]> */
		/* 820E15F8h case   98:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E15F8h case   98:*/		return 0x820E15FC;
		  /* 820E15FCh */ case   99:  		/* stw R7, <#[R1 + 84]> */
		/* 820E15FCh case   99:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 820E15FCh case   99:*/		return 0x820E1600;
		  /* 820E1600h */ case  100:  		/* li R10, 32 */
		/* 820E1600h case  100:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 820E1600h case  100:*/		return 0x820E1604;
		  /* 820E1604h */ case  101:  		/* addi R9, R1, 240 */
		/* 820E1604h case  101:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xF0);
		/* 820E1604h case  101:*/		return 0x820E1608;
		  /* 820E1608h */ case  102:  		/* stw R28, <#[R1 + 100]> */
		/* 820E1608h case  102:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000064) );
		/* 820E1608h case  102:*/		return 0x820E160C;
		  /* 820E160Ch */ case  103:  		/* addi R8, R1, 152 */
		/* 820E160Ch case  103:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x98);
		/* 820E160Ch case  103:*/		return 0x820E1610;
		  /* 820E1610h */ case  104:  		/* stw R11, <#[R1 + 92]> */
		/* 820E1610h case  104:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820E1610h case  104:*/		return 0x820E1614;
		  /* 820E1614h */ case  105:  		/* addi R7, R1, 160 */
		/* 820E1614h case  105:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820E1614h case  105:*/		return 0x820E1618;
		  /* 820E1618h */ case  106:  		/* addi R6, R1, 144 */
		/* 820E1618h case  106:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 820E1618h case  106:*/		return 0x820E161C;
		  /* 820E161Ch */ case  107:  		/* li R5, 2 */
		/* 820E161Ch case  107:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820E161Ch case  107:*/		return 0x820E1620;
		  /* 820E1620h */ case  108:  		/* li R4, 0 */
		/* 820E1620h case  108:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E1620h case  108:*/		return 0x820E1624;
		  /* 820E1624h */ case  109:  		/* mr R3, R31 */
		/* 820E1624h case  109:*/		regs.R3 = regs.R31;
		/* 820E1624h case  109:*/		return 0x820E1628;
		  /* 820E1628h */ case  110:  		/* bl -4232 */
		/* 820E1628h case  110:*/		regs.LR = 0x820E162C; return 0x820E05A0;
		/* 820E1628h case  110:*/		return 0x820E162C;
		  /* 820E162Ch */ case  111:  		/* cmpwi CR0, R3, 0 */
		/* 820E162Ch case  111:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E162Ch case  111:*/		return 0x820E1630;
		  /* 820E1630h */ case  112:  		/* bc 12, CR0_LT, 544 */
		/* 820E1630h case  112:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E1630h case  112:*/		return 0x820E1634;
	}
	return 0x820E1634;
} // Block from 820E1470h-820E1634h (113 instructions)

//////////////////////////////////////////////////////
// Block at 820E1634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1634);
		  /* 820E1634h */ case    0:  		/* lwz R4, <#[R1 + 128]> */
		/* 820E1634h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1634h case    0:*/		return 0x820E1638;
		  /* 820E1638h */ case    1:  		/* lis R30, 15 */
		/* 820E1638h case    1:*/		cpu::op::lis<0>(regs,&regs.R30,0xF);
		/* 820E1638h case    1:*/		return 0x820E163C;
		  /* 820E163Ch */ case    2:  		/* cmplw CR6, R4, R30 */
		/* 820E163Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R30);
		/* 820E163Ch case    2:*/		return 0x820E1640;
		  /* 820E1640h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 820E1640h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E1660;  }
		/* 820E1640h case    3:*/		return 0x820E1644;
		  /* 820E1644h */ case    4:  		/* mr R3, R31 */
		/* 820E1644h case    4:*/		regs.R3 = regs.R31;
		/* 820E1644h case    4:*/		return 0x820E1648;
		  /* 820E1648h */ case    5:  		/* bl -29176 */
		/* 820E1648h case    5:*/		regs.LR = 0x820E164C; return 0x820DA450;
		/* 820E1648h case    5:*/		return 0x820E164C;
		  /* 820E164Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E164Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E164Ch case    6:*/		return 0x820E1650;
		  /* 820E1650h */ case    7:  		/* bc 12, CR0_LT, 512 */
		/* 820E1650h case    7:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E1650h case    7:*/		return 0x820E1654;
		  /* 820E1654h */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E1654h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1654h case    8:*/		return 0x820E1658;
		  /* 820E1658h */ case    9:  		/* cmplw CR6, R11, R30 */
		/* 820E1658h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820E1658h case    9:*/		return 0x820E165C;
		  /* 820E165Ch */ case   10:  		/* bc 4, CR6_EQ, 20 */
		/* 820E165Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x820E1670;  }
		/* 820E165Ch case   10:*/		return 0x820E1660;
	}
	return 0x820E1660;
} // Block from 820E1634h-820E1660h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E1660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1660);
		  /* 820E1660h */ case    0:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E1660h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1660h case    0:*/		return 0x820E1664;
		  /* 820E1664h */ case    1:  		/* mr R27, R28 */
		/* 820E1664h case    1:*/		regs.R27 = regs.R28;
		/* 820E1664h case    1:*/		return 0x820E1668;
		  /* 820E1668h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820E1668h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E1668h case    2:*/		return 0x820E166C;
		  /* 820E166Ch */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 820E166Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x820E1674;  }
		/* 820E166Ch case    3:*/		return 0x820E1670;
	}
	return 0x820E1670;
} // Block from 820E1660h-820E1670h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E1670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1670);
		  /* 820E1670h */ case    0:  		/* li R27, 1 */
		/* 820E1670h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E1670h case    0:*/		return 0x820E1674;
	}
	return 0x820E1674;
} // Block from 820E1670h-820E1674h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1674);
		  /* 820E1674h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E1674h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1674h case    0:*/		return 0x820E1678;
		  /* 820E1678h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 820E1678h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E1678h case    1:*/		return 0x820E167C;
		  /* 820E167Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820E167Ch case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820E167Ch case    2:*/		return 0x820E1680;
		  /* 820E1680h */ case    3:  		/* cmplw CR6, R11, R26 */
		/* 820E1680h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 820E1680h case    3:*/		return 0x820E1684;
		  /* 820E1684h */ case    4:  		/* bc 4, CR6_EQ, 204 */
		/* 820E1684h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E1750;  }
		/* 820E1684h case    4:*/		return 0x820E1688;
		  /* 820E1688h */ case    5:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E1688h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E1688h case    5:*/		return 0x820E168C;
		  /* 820E168Ch */ case    6:  		/* mr R30, R28 */
		/* 820E168Ch case    6:*/		regs.R30 = regs.R28;
		/* 820E168Ch case    6:*/		return 0x820E1690;
		  /* 820E1690h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820E1690h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E1690h case    7:*/		return 0x820E1694;
		  /* 820E1694h */ case    8:  		/* bc 4, CR6_GT, 296 */
		/* 820E1694h case    8:*/		if ( !regs.CR[6].gt ) { return 0x820E17BC;  }
		/* 820E1694h case    8:*/		return 0x820E1698;
		  /* 820E1698h */ case    9:  		/* lis R11, -32254 */
		/* 820E1698h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1698h case    9:*/		return 0x820E169C;
		  /* 820E169Ch */ case   10:  		/* lis R10, -32254 */
		/* 820E169Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E169Ch case   10:*/		return 0x820E16A0;
		  /* 820E16A0h */ case   11:  		/* addi R29, R11, -30692 */
		/* 820E16A0h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF881C);
		/* 820E16A0h case   11:*/		return 0x820E16A4;
		  /* 820E16A4h */ case   12:  		/* addi R28, R10, -30716 */
		/* 820E16A4h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFF8804);
		/* 820E16A4h case   12:*/		return 0x820E16A8;
		  /* 820E16A8h */ case   13:  		/* mr R3, R31 */
		/* 820E16A8h case   13:*/		regs.R3 = regs.R31;
		/* 820E16A8h case   13:*/		return 0x820E16AC;
		  /* 820E16ACh */ case   14:  		/* bl -29948 */
		/* 820E16ACh case   14:*/		regs.LR = 0x820E16B0; return 0x820DA1B0;
		/* 820E16ACh case   14:*/		return 0x820E16B0;
		  /* 820E16B0h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820E16B0h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E16B0h case   15:*/		return 0x820E16B4;
		  /* 820E16B4h */ case   16:  		/* bc 12, CR0_LT, 412 */
		/* 820E16B4h case   16:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E16B4h case   16:*/		return 0x820E16B8;
		  /* 820E16B8h */ case   17:  		/* cmpwi CR6, R27, 0 */
		/* 820E16B8h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E16B8h case   17:*/		return 0x820E16BC;
		  /* 820E16BCh */ case   18:  		/* bc 12, CR6_EQ, 28 */
		/* 820E16BCh case   18:*/		if ( regs.CR[6].eq ) { return 0x820E16D8;  }
		/* 820E16BCh case   18:*/		return 0x820E16C0;
		  /* 820E16C0h */ case   19:  		/* mr R5, R28 */
		/* 820E16C0h case   19:*/		regs.R5 = regs.R28;
		/* 820E16C0h case   19:*/		return 0x820E16C4;
		  /* 820E16C4h */ case   20:  		/* mr R6, R30 */
		/* 820E16C4h case   20:*/		regs.R6 = regs.R30;
		/* 820E16C4h case   20:*/		return 0x820E16C8;
		  /* 820E16C8h */ case   21:  		/* li R4, 32 */
		/* 820E16C8h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E16C8h case   21:*/		return 0x820E16CC;
		  /* 820E16CCh */ case   22:  		/* addi R3, R1, 176 */
		/* 820E16CCh case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 820E16CCh case   22:*/		return 0x820E16D0;
		  /* 820E16D0h */ case   23:  		/* bl -258192 */
		/* 820E16D0h case   23:*/		regs.LR = 0x820E16D4; return 0x820A2640;
		/* 820E16D0h case   23:*/		return 0x820E16D4;
		  /* 820E16D4h */ case   24:  		/* b 52 */
		/* 820E16D4h case   24:*/		return 0x820E1708;
		/* 820E16D4h case   24:*/		return 0x820E16D8;
	}
	return 0x820E16D8;
} // Block from 820E1674h-820E16D8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E16D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E16D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E16D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E16D8);
		  /* 820E16D8h */ case    0:  		/* li R7, 0 */
		/* 820E16D8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E16D8h case    0:*/		return 0x820E16DC;
		  /* 820E16DCh */ case    1:  		/* lwz R4, <#[R1 + 132]> */
		/* 820E16DCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 820E16DCh case    1:*/		return 0x820E16E0;
		  /* 820E16E0h */ case    2:  		/* li R6, 64 */
		/* 820E16E0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 820E16E0h case    2:*/		return 0x820E16E4;
		  /* 820E16E4h */ case    3:  		/* addi R5, R1, 304 */
		/* 820E16E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x130);
		/* 820E16E4h case    3:*/		return 0x820E16E8;
		  /* 820E16E8h */ case    4:  		/* mr R3, R31 */
		/* 820E16E8h case    4:*/		regs.R3 = regs.R31;
		/* 820E16E8h case    4:*/		return 0x820E16EC;
		  /* 820E16ECh */ case    5:  		/* bl -29588 */
		/* 820E16ECh case    5:*/		regs.LR = 0x820E16F0; return 0x820DA358;
		/* 820E16ECh case    5:*/		return 0x820E16F0;
		  /* 820E16F0h */ case    6:  		/* mr R7, R30 */
		/* 820E16F0h case    6:*/		regs.R7 = regs.R30;
		/* 820E16F0h case    6:*/		return 0x820E16F4;
		  /* 820E16F4h */ case    7:  		/* mr R6, R30 */
		/* 820E16F4h case    7:*/		regs.R6 = regs.R30;
		/* 820E16F4h case    7:*/		return 0x820E16F8;
		  /* 820E16F8h */ case    8:  		/* addi R5, R1, 304 */
		/* 820E16F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x130);
		/* 820E16F8h case    8:*/		return 0x820E16FC;
		  /* 820E16FCh */ case    9:  		/* li R4, 32 */
		/* 820E16FCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E16FCh case    9:*/		return 0x820E1700;
		  /* 820E1700h */ case   10:  		/* addi R3, R1, 176 */
		/* 820E1700h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 820E1700h case   10:*/		return 0x820E1704;
		  /* 820E1704h */ case   11:  		/* bl -258244 */
		/* 820E1704h case   11:*/		regs.LR = 0x820E1708; return 0x820A2640;
		/* 820E1704h case   11:*/		return 0x820E1708;
	}
	return 0x820E1708;
} // Block from 820E16D8h-820E1708h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E1708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1708);
		  /* 820E1708h */ case    0:  		/* mr R4, R29 */
		/* 820E1708h case    0:*/		regs.R4 = regs.R29;
		/* 820E1708h case    0:*/		return 0x820E170C;
		  /* 820E170Ch */ case    1:  		/* addi R5, R1, 176 */
		/* 820E170Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820E170Ch case    1:*/		return 0x820E1710;
		  /* 820E1710h */ case    2:  		/* mr R3, R31 */
		/* 820E1710h case    2:*/		regs.R3 = regs.R31;
		/* 820E1710h case    2:*/		return 0x820E1714;
		  /* 820E1714h */ case    3:  		/* bl -30268 */
		/* 820E1714h case    3:*/		regs.LR = 0x820E1718; return 0x820DA0D8;
		/* 820E1714h case    3:*/		return 0x820E1718;
		  /* 820E1718h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820E1718h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1718h case    4:*/		return 0x820E171C;
		  /* 820E171Ch */ case    5:  		/* bc 12, CR0_LT, 308 */
		/* 820E171Ch case    5:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E171Ch case    5:*/		return 0x820E1720;
		  /* 820E1720h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 820E1720h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1720h case    6:*/		return 0x820E1724;
		  /* 820E1724h */ case    7:  		/* mr R3, R31 */
		/* 820E1724h case    7:*/		regs.R3 = regs.R31;
		/* 820E1724h case    7:*/		return 0x820E1728;
		  /* 820E1728h */ case    8:  		/* lwz R11, <#[R11 + 396]> */
		/* 820E1728h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000018C) );
		/* 820E1728h case    8:*/		return 0x820E172C;
		  /* 820E172Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 820E172Ch case    9:*/		regs.CTR = regs.R11;
		/* 820E172Ch case    9:*/		return 0x820E1730;
		  /* 820E1730h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 820E1730h case   10:*/		if ( 1 ) { regs.LR = 0x820E1734; return (uint32)regs.CTR; }
		/* 820E1730h case   10:*/		return 0x820E1734;
		  /* 820E1734h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820E1734h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1734h case   11:*/		return 0x820E1738;
		  /* 820E1738h */ case   12:  		/* bc 12, CR0_LT, 280 */
		/* 820E1738h case   12:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E1738h case   12:*/		return 0x820E173C;
		  /* 820E173Ch */ case   13:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E173Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E173Ch case   13:*/		return 0x820E1740;
		  /* 820E1740h */ case   14:  		/* addi R30, R30, 1 */
		/* 820E1740h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E1740h case   14:*/		return 0x820E1744;
		  /* 820E1744h */ case   15:  		/* cmplw CR6, R30, R11 */
		/* 820E1744h case   15:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E1744h case   15:*/		return 0x820E1748;
		  /* 820E1748h */ case   16:  		/* bc 12, CR6_LT, -160 */
		/* 820E1748h case   16:*/		if ( regs.CR[6].lt ) { return 0x820E16A8;  }
		/* 820E1748h case   16:*/		return 0x820E174C;
		  /* 820E174Ch */ case   17:  		/* b 112 */
		/* 820E174Ch case   17:*/		return 0x820E17BC;
		/* 820E174Ch case   17:*/		return 0x820E1750;
	}
	return 0x820E1750;
} // Block from 820E1708h-820E1750h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E1750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1750);
		  /* 820E1750h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 820E1750h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E1750h case    0:*/		return 0x820E1754;
		  /* 820E1754h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820E1754h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E1770;  }
		/* 820E1754h case    1:*/		return 0x820E1758;
		  /* 820E1758h */ case    2:  		/* lis R11, -32254 */
		/* 820E1758h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1758h case    2:*/		return 0x820E175C;
		  /* 820E175Ch */ case    3:  		/* li R4, 32 */
		/* 820E175Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E175Ch case    3:*/		return 0x820E1760;
		  /* 820E1760h */ case    4:  		/* addi R5, R11, -30716 */
		/* 820E1760h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8804);
		/* 820E1760h case    4:*/		return 0x820E1764;
		  /* 820E1764h */ case    5:  		/* addi R3, R1, 176 */
		/* 820E1764h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 820E1764h case    5:*/		return 0x820E1768;
		  /* 820E1768h */ case    6:  		/* bl -241784 */
		/* 820E1768h case    6:*/		regs.LR = 0x820E176C; return 0x820A66F0;
		/* 820E1768h case    6:*/		return 0x820E176C;
		  /* 820E176Ch */ case    7:  		/* b 28 */
		/* 820E176Ch case    7:*/		return 0x820E1788;
		/* 820E176Ch case    7:*/		return 0x820E1770;
	}
	return 0x820E1770;
} // Block from 820E1750h-820E1770h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E1770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1770);
		  /* 820E1770h */ case    0:  		/* li R7, 0 */
		/* 820E1770h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E1770h case    0:*/		return 0x820E1774;
		  /* 820E1774h */ case    1:  		/* lwz R4, <#[R1 + 132]> */
		/* 820E1774h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 820E1774h case    1:*/		return 0x820E1778;
		  /* 820E1778h */ case    2:  		/* li R6, 32 */
		/* 820E1778h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820E1778h case    2:*/		return 0x820E177C;
		  /* 820E177Ch */ case    3:  		/* addi R5, R1, 176 */
		/* 820E177Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820E177Ch case    3:*/		return 0x820E1780;
		  /* 820E1780h */ case    4:  		/* mr R3, R31 */
		/* 820E1780h case    4:*/		regs.R3 = regs.R31;
		/* 820E1780h case    4:*/		return 0x820E1784;
		  /* 820E1784h */ case    5:  		/* bl -29740 */
		/* 820E1784h case    5:*/		regs.LR = 0x820E1788; return 0x820DA358;
		/* 820E1784h case    5:*/		return 0x820E1788;
	}
	return 0x820E1788;
} // Block from 820E1770h-820E1788h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E1788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1788);
		  /* 820E1788h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820E1788h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1788h case    0:*/		return 0x820E178C;
		  /* 820E178Ch */ case    1:  		/* addi R7, R1, 272 */
		/* 820E178Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x110);
		/* 820E178Ch case    1:*/		return 0x820E1790;
		  /* 820E1790h */ case    2:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E1790h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1790h case    2:*/		return 0x820E1794;
		  /* 820E1794h */ case    3:  		/* addi R6, R1, 240 */
		/* 820E1794h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF0);
		/* 820E1794h case    3:*/		return 0x820E1798;
		  /* 820E1798h */ case    4:  		/* addi R5, R1, 176 */
		/* 820E1798h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820E1798h case    4:*/		return 0x820E179C;
		  /* 820E179Ch */ case    5:  		/* mr R3, R31 */
		/* 820E179Ch case    5:*/		regs.R3 = regs.R31;
		/* 820E179Ch case    5:*/		return 0x820E17A0;
		  /* 820E17A0h */ case    6:  		/* lwz R11, <#[R11 + 484]> */
		/* 820E17A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E4) );
		/* 820E17A0h case    6:*/		return 0x820E17A4;
		  /* 820E17A4h */ case    7:  		/* lwz R10, <#[R10]> */
		/* 820E17A4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E17A4h case    7:*/		return 0x820E17A8;
		  /* 820E17A8h */ case    8:  		/* rlwinm R4, R10, 0, 0, 11 */
		/* 820E17A8h case    8:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R4,regs.R10);
		/* 820E17A8h case    8:*/		return 0x820E17AC;
		  /* 820E17ACh */ case    9:  		/* mtspr CTR, R11 */
		/* 820E17ACh case    9:*/		regs.CTR = regs.R11;
		/* 820E17ACh case    9:*/		return 0x820E17B0;
		  /* 820E17B0h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 820E17B0h case   10:*/		if ( 1 ) { regs.LR = 0x820E17B4; return (uint32)regs.CTR; }
		/* 820E17B0h case   10:*/		return 0x820E17B4;
		  /* 820E17B4h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820E17B4h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E17B4h case   11:*/		return 0x820E17B8;
		  /* 820E17B8h */ case   12:  		/* bc 12, CR0_LT, 152 */
		/* 820E17B8h case   12:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E17B8h case   12:*/		return 0x820E17BC;
	}
	return 0x820E17BC;
} // Block from 820E1788h-820E17BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E17BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E17BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E17BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E17BC);
		  /* 820E17BCh */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 820E17BCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E17BCh case    0:*/		return 0x820E17C0;
		  /* 820E17C0h */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 820E17C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E1830;  }
		/* 820E17C0h case    1:*/		return 0x820E17C4;
		  /* 820E17C4h */ case    2:  		/* mr R3, R31 */
		/* 820E17C4h case    2:*/		regs.R3 = regs.R31;
		/* 820E17C4h case    2:*/		return 0x820E17C8;
	}
	return 0x820E17C8;
} // Block from 820E17BCh-820E17C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E17C8h
// Function '?EmitComparisonBranch@C30SWProgram@D3DXShader@@MAAJPBDHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E17C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E17C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E17C8);
		  /* 820E17C8h */ case    0:  		/* bl -29392 */
		/* 820E17C8h case    0:*/		regs.LR = 0x820E17CC; return 0x820DA4F8;
		/* 820E17C8h case    0:*/		return 0x820E17CC;
		  /* 820E17CCh */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820E17CCh case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E17CCh case    1:*/		return 0x820E17D0;
		  /* 820E17D0h */ case    2:  		/* bc 12, CR0_LT, 128 */
		/* 820E17D0h case    2:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E17D0h case    2:*/		return 0x820E17D4;
		  /* 820E17D4h */ case    3:  		/* li R7, 0 */
		/* 820E17D4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E17D4h case    3:*/		return 0x820E17D8;
		  /* 820E17D8h */ case    4:  		/* lwz R4, <#[R1 + 132]> */
		/* 820E17D8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 820E17D8h case    4:*/		return 0x820E17DC;
		  /* 820E17DCh */ case    5:  		/* li R6, 32 */
		/* 820E17DCh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820E17DCh case    5:*/		return 0x820E17E0;
		  /* 820E17E0h */ case    6:  		/* addi R5, R1, 208 */
		/* 820E17E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820E17E0h case    6:*/		return 0x820E17E4;
		  /* 820E17E4h */ case    7:  		/* mr R3, R31 */
		/* 820E17E4h case    7:*/		regs.R3 = regs.R31;
		/* 820E17E4h case    7:*/		return 0x820E17E8;
		  /* 820E17E8h */ case    8:  		/* bl -29840 */
		/* 820E17E8h case    8:*/		regs.LR = 0x820E17EC; return 0x820DA358;
		/* 820E17E8h case    8:*/		return 0x820E17EC;
		  /* 820E17ECh */ case    9:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E17ECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E17ECh case    9:*/		return 0x820E17F0;
		  /* 820E17F0h */ case   10:  		/* li R7, 0 */
		/* 820E17F0h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E17F0h case   10:*/		return 0x820E17F4;
		  /* 820E17F4h */ case   11:  		/* lwz R5, <#[R1 + 128]> */
		/* 820E17F4h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 820E17F4h case   11:*/		return 0x820E17F8;
		  /* 820E17F8h */ case   12:  		/* addic R10, R11, -1 */
		/* 820E17F8h case   12:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 820E17F8h case   12:*/		return 0x820E17FC;
		  /* 820E17FCh */ case   13:  		/* addi R4, R1, 208 */
		/* 820E17FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E17FCh case   13:*/		return 0x820E1800;
		  /* 820E1800h */ case   14:  		/* mr R3, R31 */
		/* 820E1800h case   14:*/		regs.R3 = regs.R31;
		/* 820E1800h case   14:*/		return 0x820E1804;
		  /* 820E1804h */ case   15:  		/* subfe R6, R10, R11 */
		/* 820E1804h case   15:*/		cpu::op::subfe<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 820E1804h case   15:*/		return 0x820E1808;
		  /* 820E1808h */ case   16:  		/* bl -28624 */
		/* 820E1808h case   16:*/		regs.LR = 0x820E180C; return 0x820DA838;
		/* 820E1808h case   16:*/		return 0x820E180C;
		  /* 820E180Ch */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820E180Ch case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E180Ch case   17:*/		return 0x820E1810;
		  /* 820E1810h */ case   18:  		/* bc 12, CR0_LT, 64 */
		/* 820E1810h case   18:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E1810h case   18:*/		return 0x820E1814;
		  /* 820E1814h */ case   19:  		/* li R6, 0 */
		/* 820E1814h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E1814h case   19:*/		return 0x820E1818;
		  /* 820E1818h */ case   20:  		/* li R5, 0 */
		/* 820E1818h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E1818h case   20:*/		return 0x820E181C;
		  /* 820E181Ch */ case   21:  		/* addi R4, R1, 208 */
		/* 820E181Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E181Ch case   21:*/		return 0x820E1820;
		  /* 820E1820h */ case   22:  		/* mr R3, R31 */
		/* 820E1820h case   22:*/		regs.R3 = regs.R31;
		/* 820E1820h case   22:*/		return 0x820E1824;
		  /* 820E1824h */ case   23:  		/* bl -28340 */
		/* 820E1824h case   23:*/		regs.LR = 0x820E1828; return 0x820DA970;
		/* 820E1824h case   23:*/		return 0x820E1828;
		  /* 820E1828h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820E1828h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1828h case   24:*/		return 0x820E182C;
		  /* 820E182Ch */ case   25:  		/* bc 12, CR0_LT, 36 */
		/* 820E182Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E182Ch case   25:*/		return 0x820E1830;
	}
	return 0x820E1830;
} // Block from 820E17C8h-820E1830h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820E1830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1830);
		  /* 820E1830h */ case    0:  		/* lis R11, -32254 */
		/* 820E1830h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1830h case    0:*/		return 0x820E1834;
		  /* 820E1834h */ case    1:  		/* mr R3, R31 */
		/* 820E1834h case    1:*/		regs.R3 = regs.R31;
		/* 820E1834h case    1:*/		return 0x820E1838;
		  /* 820E1838h */ case    2:  		/* addi R4, R11, -30604 */
		/* 820E1838h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 820E1838h case    2:*/		return 0x820E183C;
		  /* 820E183Ch */ case    3:  		/* bl -30564 */
		/* 820E183Ch case    3:*/		regs.LR = 0x820E1840; return 0x820DA0D8;
		/* 820E183Ch case    3:*/		return 0x820E1840;
		  /* 820E1840h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820E1840h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1840h case    4:*/		return 0x820E1844;
		  /* 820E1844h */ case    5:  		/* bc 12, CR0_LT, 12 */
		/* 820E1844h case    5:*/		if ( regs.CR[0].lt ) { return 0x820E1850;  }
		/* 820E1844h case    5:*/		return 0x820E1848;
		  /* 820E1848h */ case    6:  		/* mr R3, R31 */
		/* 820E1848h case    6:*/		regs.R3 = regs.R31;
		/* 820E1848h case    6:*/		return 0x820E184C;
		  /* 820E184Ch */ case    7:  		/* bl 89572 */
		/* 820E184Ch case    7:*/		regs.LR = 0x820E1850; return 0x820F7630;
		/* 820E184Ch case    7:*/		return 0x820E1850;
	}
	return 0x820E1850;
} // Block from 820E1830h-820E1850h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E1850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1850);
		  /* 820E1850h */ case    0:  		/* addi R1, R1, 432 */
		/* 820E1850h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 820E1850h case    0:*/		return 0x820E1854;
		  /* 820E1854h */ case    1:  		/* b -329140 */
		/* 820E1854h case    1:*/		return 0x820912A0;
		/* 820E1854h case    1:*/		return 0x820E1858;
	}
	return 0x820E1858;
} // Block from 820E1850h-820E1858h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E1858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1858);
		  /* 820E1858h */ case    0:  		/* mfspr R12, LR */
		/* 820E1858h case    0:*/		regs.R12 = regs.LR;
		/* 820E1858h case    0:*/		return 0x820E185C;
		  /* 820E185Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E185Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E185Ch case    1:*/		return 0x820E1860;
		  /* 820E1860h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820E1860h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E1860h case    2:*/		return 0x820E1864;
		  /* 820E1864h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820E1864h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E1864h case    3:*/		return 0x820E1868;
		  /* 820E1868h */ case    4:  		/* stwu R1, <#[R1 - 256]> */
		/* 820E1868h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 820E1868h case    4:*/		return 0x820E186C;
		  /* 820E186Ch */ case    5:  		/* mr R31, R3 */
		/* 820E186Ch case    5:*/		regs.R31 = regs.R3;
		/* 820E186Ch case    5:*/		return 0x820E1870;
		  /* 820E1870h */ case    6:  		/* mr R30, R4 */
		/* 820E1870h case    6:*/		regs.R30 = regs.R4;
		/* 820E1870h case    6:*/		return 0x820E1874;
		  /* 820E1874h */ case    7:  		/* bl -30404 */
		/* 820E1874h case    7:*/		regs.LR = 0x820E1878; return 0x820DA1B0;
		/* 820E1874h case    7:*/		return 0x820E1878;
		  /* 820E1878h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E1878h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1878h case    8:*/		return 0x820E187C;
		  /* 820E187Ch */ case    9:  		/* bc 12, CR0_LT, 268 */
		/* 820E187Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820E1988;  }
		/* 820E187Ch case    9:*/		return 0x820E1880;
		  /* 820E1880h */ case   10:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E1880h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1880h case   10:*/		return 0x820E1884;
		  /* 820E1884h */ case   11:  		/* addi R6, R1, 112 */
		/* 820E1884h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 820E1884h case   11:*/		return 0x820E1888;
		  /* 820E1888h */ case   12:  		/* lwz R10, <#[R31]> */
		/* 820E1888h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1888h case   12:*/		return 0x820E188C;
		  /* 820E188Ch */ case   13:  		/* addi R5, R1, 116 */
		/* 820E188Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 820E188Ch case   13:*/		return 0x820E1890;
		  /* 820E1890h */ case   14:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E1890h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E1890h case   14:*/		return 0x820E1894;
		  /* 820E1894h */ case   15:  		/* mr R3, R31 */
		/* 820E1894h case   15:*/		regs.R3 = regs.R31;
		/* 820E1894h case   15:*/		return 0x820E1898;
		  /* 820E1898h */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E1898h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E1898h case   16:*/		return 0x820E189C;
		  /* 820E189Ch */ case   17:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E189Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E189Ch case   17:*/		return 0x820E18A0;
		  /* 820E18A0h */ case   18:  		/* lwz R11, <#[R11]> */
		/* 820E18A0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E18A0h case   18:*/		return 0x820E18A4;
		  /* 820E18A4h */ case   19:  		/* mtspr CTR, R10 */
		/* 820E18A4h case   19:*/		regs.CTR = regs.R10;
		/* 820E18A4h case   19:*/		return 0x820E18A8;
		  /* 820E18A8h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E18A8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E18A8h case   20:*/		return 0x820E18AC;
		  /* 820E18ACh */ case   21:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E18ACh case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E18ACh case   21:*/		return 0x820E18B0;
		  /* 820E18B0h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 820E18B0h case   22:*/		if ( 1 ) { regs.LR = 0x820E18B4; return (uint32)regs.CTR; }
		/* 820E18B0h case   22:*/		return 0x820E18B4;
		  /* 820E18B4h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 820E18B4h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E18B4h case   23:*/		return 0x820E18B8;
		  /* 820E18B8h */ case   24:  		/* bc 12, CR0_LT, 208 */
		/* 820E18B8h case   24:*/		if ( regs.CR[0].lt ) { return 0x820E1988;  }
		/* 820E18B8h case   24:*/		return 0x820E18BC;
		  /* 820E18BCh */ case   25:  		/* li R8, 0 */
		/* 820E18BCh case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E18BCh case   25:*/		return 0x820E18C0;
		  /* 820E18C0h */ case   26:  		/* lwz R5, <#[R1 + 112]> */
		/* 820E18C0h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 820E18C0h case   26:*/		return 0x820E18C4;
		  /* 820E18C4h */ case   27:  		/* li R7, 64 */
		/* 820E18C4h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x40);
		/* 820E18C4h case   27:*/		return 0x820E18C8;
		  /* 820E18C8h */ case   28:  		/* lwz R4, <#[R1 + 116]> */
		/* 820E18C8h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 820E18C8h case   28:*/		return 0x820E18CC;
		  /* 820E18CCh */ case   29:  		/* addi R6, R1, 160 */
		/* 820E18CCh case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E18CCh case   29:*/		return 0x820E18D0;
		  /* 820E18D0h */ case   30:  		/* mr R3, R31 */
		/* 820E18D0h case   30:*/		regs.R3 = regs.R31;
		/* 820E18D0h case   30:*/		return 0x820E18D4;
		  /* 820E18D4h */ case   31:  		/* bl -5204 */
		/* 820E18D4h case   31:*/		regs.LR = 0x820E18D8; return 0x820E0480;
		/* 820E18D4h case   31:*/		return 0x820E18D8;
		  /* 820E18D8h */ case   32:  		/* li R7, 0 */
		/* 820E18D8h case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E18D8h case   32:*/		return 0x820E18DC;
		  /* 820E18DCh */ case   33:  		/* li R6, 0 */
		/* 820E18DCh case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E18DCh case   33:*/		return 0x820E18E0;
		  /* 820E18E0h */ case   34:  		/* addi R5, R1, 160 */
		/* 820E18E0h case   34:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820E18E0h case   34:*/		return 0x820E18E4;
		  /* 820E18E4h */ case   35:  		/* li R4, 32 */
		/* 820E18E4h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E18E4h case   35:*/		return 0x820E18E8;
		  /* 820E18E8h */ case   36:  		/* addi R3, R1, 128 */
		/* 820E18E8h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820E18E8h case   36:*/		return 0x820E18EC;
		  /* 820E18ECh */ case   37:  		/* bl -258732 */
		/* 820E18ECh case   37:*/		regs.LR = 0x820E18F0; return 0x820A2640;
		/* 820E18ECh case   37:*/		return 0x820E18F0;
		  /* 820E18F0h */ case   38:  		/* cmpwi CR6, R30, 0 */
		/* 820E18F0h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820E18F0h case   38:*/		return 0x820E18F4;
		  /* 820E18F4h */ case   39:  		/* bc 12, CR6_EQ, 16 */
		/* 820E18F4h case   39:*/		if ( regs.CR[6].eq ) { return 0x820E1904;  }
		/* 820E18F4h case   39:*/		return 0x820E18F8;
		  /* 820E18F8h */ case   40:  		/* lis R11, -32255 */
		/* 820E18F8h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E18F8h case   40:*/		return 0x820E18FC;
		  /* 820E18FCh */ case   41:  		/* addi R6, R11, -16492 */
		/* 820E18FCh case   41:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFBF94);
		/* 820E18FCh case   41:*/		return 0x820E1900;
		  /* 820E1900h */ case   42:  		/* b 12 */
		/* 820E1900h case   42:*/		return 0x820E190C;
		/* 820E1900h case   42:*/		return 0x820E1904;
	}
	return 0x820E1904;
} // Block from 820E1858h-820E1904h (43 instructions)

//////////////////////////////////////////////////////
// Block at 820E1904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1904);
		  /* 820E1904h */ case    0:  		/* lis R11, -32255 */
		/* 820E1904h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E1904h case    0:*/		return 0x820E1908;
		  /* 820E1908h */ case    1:  		/* addi R6, R11, -16496 */
		/* 820E1908h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFBF90);
		/* 820E1908h case    1:*/		return 0x820E190C;
	}
	return 0x820E190C;
} // Block from 820E1904h-820E190Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E190Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E190C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E190C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E190C);
		  /* 820E190Ch */ case    0:  		/* lis R11, -32254 */
		/* 820E190Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E190Ch case    0:*/		return 0x820E1910;
		  /* 820E1910h */ case    1:  		/* addi R5, R1, 128 */
		/* 820E1910h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E1910h case    1:*/		return 0x820E1914;
		  /* 820E1914h */ case    2:  		/* addi R4, R11, -26556 */
		/* 820E1914h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9844);
		/* 820E1914h case    2:*/		return 0x820E1918;
		  /* 820E1918h */ case    3:  		/* mr R3, R31 */
		/* 820E1918h case    3:*/		regs.R3 = regs.R31;
		/* 820E1918h case    3:*/		return 0x820E191C;
		  /* 820E191Ch */ case    4:  		/* bl -30788 */
		/* 820E191Ch case    4:*/		regs.LR = 0x820E1920; return 0x820DA0D8;
		/* 820E191Ch case    4:*/		return 0x820E1920;
		  /* 820E1920h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E1920h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1920h case    5:*/		return 0x820E1924;
		  /* 820E1924h */ case    6:  		/* bc 12, CR0_LT, 100 */
		/* 820E1924h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E1988;  }
		/* 820E1924h case    6:*/		return 0x820E1928;
		  /* 820E1928h */ case    7:  		/* mr R3, R31 */
		/* 820E1928h case    7:*/		regs.R3 = regs.R31;
		/* 820E1928h case    7:*/		return 0x820E192C;
		  /* 820E192Ch */ case    8:  		/* bl -30588 */
		/* 820E192Ch case    8:*/		regs.LR = 0x820E1930; return 0x820DA1B0;
		/* 820E192Ch case    8:*/		return 0x820E1930;
		  /* 820E1930h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820E1930h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1930h case    9:*/		return 0x820E1934;
		  /* 820E1934h */ case   10:  		/* bc 12, CR0_LT, 84 */
		/* 820E1934h case   10:*/		if ( regs.CR[0].lt ) { return 0x820E1988;  }
		/* 820E1934h case   10:*/		return 0x820E1938;
		  /* 820E1938h */ case   11:  		/* lis R11, -32254 */
		/* 820E1938h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1938h case   11:*/		return 0x820E193C;
		  /* 820E193Ch */ case   12:  		/* mr R3, R31 */
		/* 820E193Ch case   12:*/		regs.R3 = regs.R31;
		/* 820E193Ch case   12:*/		return 0x820E1940;
		  /* 820E1940h */ case   13:  		/* addi R4, R11, -30564 */
		/* 820E1940h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820E1940h case   13:*/		return 0x820E1944;
		  /* 820E1944h */ case   14:  		/* bl -30828 */
		/* 820E1944h case   14:*/		regs.LR = 0x820E1948; return 0x820DA0D8;
		/* 820E1944h case   14:*/		return 0x820E1948;
		  /* 820E1948h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820E1948h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1948h case   15:*/		return 0x820E194C;
		  /* 820E194Ch */ case   16:  		/* bc 12, CR0_LT, 60 */
		/* 820E194Ch case   16:*/		if ( regs.CR[0].lt ) { return 0x820E1988;  }
		/* 820E194Ch case   16:*/		return 0x820E1950;
		  /* 820E1950h */ case   17:  		/* lwz R11, <#[R31 + 1808]> */
		/* 820E1950h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820E1950h case   17:*/		return 0x820E1954;
		  /* 820E1954h */ case   18:  		/* li R10, 0 */
		/* 820E1954h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E1954h case   18:*/		return 0x820E1958;
		  /* 820E1958h */ case   19:  		/* mr R4, R30 */
		/* 820E1958h case   19:*/		regs.R4 = regs.R30;
		/* 820E1958h case   19:*/		return 0x820E195C;
		  /* 820E195Ch */ case   20:  		/* addi R11, R11, 420 */
		/* 820E195Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A4);
		/* 820E195Ch case   20:*/		return 0x820E1960;
		  /* 820E1960h */ case   21:  		/* mr R3, R31 */
		/* 820E1960h case   21:*/		regs.R3 = regs.R31;
		/* 820E1960h case   21:*/		return 0x820E1964;
		  /* 820E1964h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E1964h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E1964h case   22:*/		return 0x820E1968;
		  /* 820E1968h */ case   23:  		/* stwx R10, <#[R11 + R31]> */
		/* 820E1968h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820E1968h case   23:*/		return 0x820E196C;
		  /* 820E196Ch */ case   24:  		/* lwz R11, <#[R31 + 1544]> */
		/* 820E196Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820E196Ch case   24:*/		return 0x820E1970;
		  /* 820E1970h */ case   25:  		/* lwz R10, <#[R31 + 1808]> */
		/* 820E1970h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000710) );
		/* 820E1970h case   25:*/		return 0x820E1974;
		  /* 820E1974h */ case   26:  		/* addi R10, R10, 1 */
		/* 820E1974h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E1974h case   26:*/		return 0x820E1978;
		  /* 820E1978h */ case   27:  		/* addi R11, R11, 1 */
		/* 820E1978h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E1978h case   27:*/		return 0x820E197C;
		  /* 820E197Ch */ case   28:  		/* stw R10, <#[R31 + 1808]> */
		/* 820E197Ch case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000710) );
		/* 820E197Ch case   28:*/		return 0x820E1980;
		  /* 820E1980h */ case   29:  		/* stw R11, <#[R31 + 1544]> */
		/* 820E1980h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000608) );
		/* 820E1980h case   29:*/		return 0x820E1984;
		  /* 820E1984h */ case   30:  		/* bl 91276 */
		/* 820E1984h case   30:*/		regs.LR = 0x820E1988; return 0x820F7E10;
		/* 820E1984h case   30:*/		return 0x820E1988;
	}
	return 0x820E1988;
} // Block from 820E190Ch-820E1988h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820E1988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1988);
		  /* 820E1988h */ case    0:  		/* addi R1, R1, 256 */
		/* 820E1988h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 820E1988h case    0:*/		return 0x820E198C;
		  /* 820E198Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E198Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E198Ch case    1:*/		return 0x820E1990;
		  /* 820E1990h */ case    2:  		/* mtspr LR, R12 */
		/* 820E1990h case    2:*/		regs.LR = regs.R12;
		/* 820E1990h case    2:*/		return 0x820E1994;
		  /* 820E1994h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820E1994h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E1994h case    3:*/		return 0x820E1998;
		  /* 820E1998h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820E1998h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E1998h case    4:*/		return 0x820E199C;
		  /* 820E199Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E199Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E199Ch case    5:*/		return 0x820E19A0;
	}
	return 0x820E19A0;
} // Block from 820E1988h-820E19A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E19A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E19A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E19A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E19A0);
		  /* 820E19A0h */ case    0:  		/* mfspr R12, LR */
		/* 820E19A0h case    0:*/		regs.R12 = regs.LR;
		/* 820E19A0h case    0:*/		return 0x820E19A4;
		  /* 820E19A4h */ case    1:  		/* bl -329544 */
		/* 820E19A4h case    1:*/		regs.LR = 0x820E19A8; return 0x8209125C;
		/* 820E19A4h case    1:*/		return 0x820E19A8;
		  /* 820E19A8h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 820E19A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 820E19A8h case    2:*/		return 0x820E19AC;
		  /* 820E19ACh */ case    3:  		/* lwz R11, <#[R3]> */
		/* 820E19ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820E19ACh case    3:*/		return 0x820E19B0;
		  /* 820E19B0h */ case    4:  		/* mr R31, R3 */
		/* 820E19B0h case    4:*/		regs.R31 = regs.R3;
		/* 820E19B0h case    4:*/		return 0x820E19B4;
		  /* 820E19B4h */ case    5:  		/* mr R29, R4 */
		/* 820E19B4h case    5:*/		regs.R29 = regs.R4;
		/* 820E19B4h case    5:*/		return 0x820E19B8;
		  /* 820E19B8h */ case    6:  		/* lwz R11, <#[R11 + 540]> */
		/* 820E19B8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000021C) );
		/* 820E19B8h case    6:*/		return 0x820E19BC;
		  /* 820E19BCh */ case    7:  		/* mtspr CTR, R11 */
		/* 820E19BCh case    7:*/		regs.CTR = regs.R11;
		/* 820E19BCh case    7:*/		return 0x820E19C0;
		  /* 820E19C0h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 820E19C0h case    8:*/		if ( 1 ) { regs.LR = 0x820E19C4; return (uint32)regs.CTR; }
		/* 820E19C0h case    8:*/		return 0x820E19C4;
		  /* 820E19C4h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820E19C4h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E19C4h case    9:*/		return 0x820E19C8;
		  /* 820E19C8h */ case   10:  		/* bc 12, CR0_LT, 608 */
		/* 820E19C8h case   10:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E19C8h case   10:*/		return 0x820E19CC;
		  /* 820E19CCh */ case   11:  		/* lwz R11, <#[R31]> */
		/* 820E19CCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E19CCh case   11:*/		return 0x820E19D0;
		  /* 820E19D0h */ case   12:  		/* mr R3, R31 */
		/* 820E19D0h case   12:*/		regs.R3 = regs.R31;
		/* 820E19D0h case   12:*/		return 0x820E19D4;
		  /* 820E19D4h */ case   13:  		/* lwz R11, <#[R11 + 556]> */
		/* 820E19D4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000022C) );
		/* 820E19D4h case   13:*/		return 0x820E19D8;
		  /* 820E19D8h */ case   14:  		/* mtspr CTR, R11 */
		/* 820E19D8h case   14:*/		regs.CTR = regs.R11;
		/* 820E19D8h case   14:*/		return 0x820E19DC;
		  /* 820E19DCh */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 820E19DCh case   15:*/		if ( 1 ) { regs.LR = 0x820E19E0; return (uint32)regs.CTR; }
		/* 820E19DCh case   15:*/		return 0x820E19E0;
		  /* 820E19E0h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820E19E0h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E19E0h case   16:*/		return 0x820E19E4;
		  /* 820E19E4h */ case   17:  		/* bc 12, CR0_LT, 580 */
		/* 820E19E4h case   17:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E19E4h case   17:*/		return 0x820E19E8;
		  /* 820E19E8h */ case   18:  		/* cmpwi CR6, R29, 0 */
		/* 820E19E8h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820E19E8h case   18:*/		return 0x820E19EC;
		  /* 820E19ECh */ case   19:  		/* bc 12, CR6_EQ, 32 */
		/* 820E19ECh case   19:*/		if ( regs.CR[6].eq ) { return 0x820E1A0C;  }
		/* 820E19ECh case   19:*/		return 0x820E19F0;
		  /* 820E19F0h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 820E19F0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E19F0h case   20:*/		return 0x820E19F4;
		  /* 820E19F4h */ case   21:  		/* mr R3, R31 */
		/* 820E19F4h case   21:*/		regs.R3 = regs.R31;
		/* 820E19F4h case   21:*/		return 0x820E19F8;
		  /* 820E19F8h */ case   22:  		/* lwz R11, <#[R11 + 548]> */
		/* 820E19F8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000224) );
		/* 820E19F8h case   22:*/		return 0x820E19FC;
		  /* 820E19FCh */ case   23:  		/* mtspr CTR, R11 */
		/* 820E19FCh case   23:*/		regs.CTR = regs.R11;
		/* 820E19FCh case   23:*/		return 0x820E1A00;
		  /* 820E1A00h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 820E1A00h case   24:*/		if ( 1 ) { regs.LR = 0x820E1A04; return (uint32)regs.CTR; }
		/* 820E1A00h case   24:*/		return 0x820E1A04;
		  /* 820E1A04h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820E1A04h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1A04h case   25:*/		return 0x820E1A08;
		  /* 820E1A08h */ case   26:  		/* bc 12, CR0_LT, 544 */
		/* 820E1A08h case   26:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1A08h case   26:*/		return 0x820E1A0C;
	}
	return 0x820E1A0C;
} // Block from 820E19A0h-820E1A0Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E1A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1A0C);
		  /* 820E1A0Ch */ case    0:  		/* lwz R10, <#[R31]> */
		/* 820E1A0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1A0Ch case    0:*/		return 0x820E1A10;
		  /* 820E1A10h */ case    1:  		/* lis R11, -32254 */
		/* 820E1A10h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1A10h case    1:*/		return 0x820E1A14;
		  /* 820E1A14h */ case    2:  		/* mr R3, R31 */
		/* 820E1A14h case    2:*/		regs.R3 = regs.R31;
		/* 820E1A14h case    2:*/		return 0x820E1A18;
		  /* 820E1A18h */ case    3:  		/* addi R30, R11, -30684 */
		/* 820E1A18h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF8824);
		/* 820E1A18h case    3:*/		return 0x820E1A1C;
		  /* 820E1A1Ch */ case    4:  		/* mr R4, R30 */
		/* 820E1A1Ch case    4:*/		regs.R4 = regs.R30;
		/* 820E1A1Ch case    4:*/		return 0x820E1A20;
		  /* 820E1A20h */ case    5:  		/* lwz R11, <#[R10 + 564]> */
		/* 820E1A20h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000234) );
		/* 820E1A20h case    5:*/		return 0x820E1A24;
		  /* 820E1A24h */ case    6:  		/* mtspr CTR, R11 */
		/* 820E1A24h case    6:*/		regs.CTR = regs.R11;
		/* 820E1A24h case    6:*/		return 0x820E1A28;
		  /* 820E1A28h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 820E1A28h case    7:*/		if ( 1 ) { regs.LR = 0x820E1A2C; return (uint32)regs.CTR; }
		/* 820E1A28h case    7:*/		return 0x820E1A2C;
		  /* 820E1A2Ch */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E1A2Ch case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1A2Ch case    8:*/		return 0x820E1A30;
		  /* 820E1A30h */ case    9:  		/* bc 12, CR0_LT, 504 */
		/* 820E1A30h case    9:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1A30h case    9:*/		return 0x820E1A34;
		  /* 820E1A34h */ case   10:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E1A34h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1A34h case   10:*/		return 0x820E1A38;
		  /* 820E1A38h */ case   11:  		/* addi R6, R1, 112 */
		/* 820E1A38h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 820E1A38h case   11:*/		return 0x820E1A3C;
		  /* 820E1A3Ch */ case   12:  		/* lwz R10, <#[R31]> */
		/* 820E1A3Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1A3Ch case   12:*/		return 0x820E1A40;
		  /* 820E1A40h */ case   13:  		/* addi R5, R1, 116 */
		/* 820E1A40h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 820E1A40h case   13:*/		return 0x820E1A44;
		  /* 820E1A44h */ case   14:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E1A44h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E1A44h case   14:*/		return 0x820E1A48;
		  /* 820E1A48h */ case   15:  		/* mr R3, R31 */
		/* 820E1A48h case   15:*/		regs.R3 = regs.R31;
		/* 820E1A48h case   15:*/		return 0x820E1A4C;
		  /* 820E1A4Ch */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E1A4Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E1A4Ch case   16:*/		return 0x820E1A50;
		  /* 820E1A50h */ case   17:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E1A50h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E1A50h case   17:*/		return 0x820E1A54;
		  /* 820E1A54h */ case   18:  		/* lwz R11, <#[R11]> */
		/* 820E1A54h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E1A54h case   18:*/		return 0x820E1A58;
		  /* 820E1A58h */ case   19:  		/* mtspr CTR, R10 */
		/* 820E1A58h case   19:*/		regs.CTR = regs.R10;
		/* 820E1A58h case   19:*/		return 0x820E1A5C;
		  /* 820E1A5Ch */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E1A5Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E1A5Ch case   20:*/		return 0x820E1A60;
		  /* 820E1A60h */ case   21:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E1A60h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E1A60h case   21:*/		return 0x820E1A64;
		  /* 820E1A64h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 820E1A64h case   22:*/		if ( 1 ) { regs.LR = 0x820E1A68; return (uint32)regs.CTR; }
		/* 820E1A64h case   22:*/		return 0x820E1A68;
		  /* 820E1A68h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 820E1A68h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1A68h case   23:*/		return 0x820E1A6C;
		  /* 820E1A6Ch */ case   24:  		/* bc 12, CR0_LT, 444 */
		/* 820E1A6Ch case   24:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1A6Ch case   24:*/		return 0x820E1A70;
		  /* 820E1A70h */ case   25:  		/* li R8, 0 */
		/* 820E1A70h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E1A70h case   25:*/		return 0x820E1A74;
		  /* 820E1A74h */ case   26:  		/* lwz R5, <#[R1 + 112]> */
		/* 820E1A74h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 820E1A74h case   26:*/		return 0x820E1A78;
		  /* 820E1A78h */ case   27:  		/* li R7, 64 */
		/* 820E1A78h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x40);
		/* 820E1A78h case   27:*/		return 0x820E1A7C;
		  /* 820E1A7Ch */ case   28:  		/* lwz R4, <#[R1 + 116]> */
		/* 820E1A7Ch case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 820E1A7Ch case   28:*/		return 0x820E1A80;
		  /* 820E1A80h */ case   29:  		/* addi R6, R1, 160 */
		/* 820E1A80h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E1A80h case   29:*/		return 0x820E1A84;
		  /* 820E1A84h */ case   30:  		/* mr R3, R31 */
		/* 820E1A84h case   30:*/		regs.R3 = regs.R31;
		/* 820E1A84h case   30:*/		return 0x820E1A88;
		  /* 820E1A88h */ case   31:  		/* bl -5640 */
		/* 820E1A88h case   31:*/		regs.LR = 0x820E1A8C; return 0x820E0480;
		/* 820E1A88h case   31:*/		return 0x820E1A8C;
		  /* 820E1A8Ch */ case   32:  		/* li R7, 0 */
		/* 820E1A8Ch case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E1A8Ch case   32:*/		return 0x820E1A90;
		  /* 820E1A90h */ case   33:  		/* li R6, 0 */
		/* 820E1A90h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E1A90h case   33:*/		return 0x820E1A94;
		  /* 820E1A94h */ case   34:  		/* addi R5, R1, 160 */
		/* 820E1A94h case   34:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820E1A94h case   34:*/		return 0x820E1A98;
		  /* 820E1A98h */ case   35:  		/* li R4, 32 */
		/* 820E1A98h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E1A98h case   35:*/		return 0x820E1A9C;
		  /* 820E1A9Ch */ case   36:  		/* addi R3, R1, 128 */
		/* 820E1A9Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820E1A9Ch case   36:*/		return 0x820E1AA0;
		  /* 820E1AA0h */ case   37:  		/* bl -259168 */
		/* 820E1AA0h case   37:*/		regs.LR = 0x820E1AA4; return 0x820A2640;
		/* 820E1AA0h case   37:*/		return 0x820E1AA4;
		  /* 820E1AA4h */ case   38:  		/* lis R11, -32254 */
		/* 820E1AA4h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1AA4h case   38:*/		return 0x820E1AA8;
		  /* 820E1AA8h */ case   39:  		/* mr R5, R30 */
		/* 820E1AA8h case   39:*/		regs.R5 = regs.R30;
		/* 820E1AA8h case   39:*/		return 0x820E1AAC;
		  /* 820E1AACh */ case   40:  		/* addi R4, R11, -31716 */
		/* 820E1AACh case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF841C);
		/* 820E1AACh case   40:*/		return 0x820E1AB0;
		  /* 820E1AB0h */ case   41:  		/* mr R3, R31 */
		/* 820E1AB0h case   41:*/		regs.R3 = regs.R31;
		/* 820E1AB0h case   41:*/		return 0x820E1AB4;
		  /* 820E1AB4h */ case   42:  		/* lwz R11, <#[R31]> */
		/* 820E1AB4h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1AB4h case   42:*/		return 0x820E1AB8;
		  /* 820E1AB8h */ case   43:  		/* lwz R11, <#[R11 + 488]> */
		/* 820E1AB8h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001E8) );
		/* 820E1AB8h case   43:*/		return 0x820E1ABC;
		  /* 820E1ABCh */ case   44:  		/* mtspr CTR, R11 */
		/* 820E1ABCh case   44:*/		regs.CTR = regs.R11;
		/* 820E1ABCh case   44:*/		return 0x820E1AC0;
		  /* 820E1AC0h */ case   45:  		/* bcctrl 20, CR0_LT */
		/* 820E1AC0h case   45:*/		if ( 1 ) { regs.LR = 0x820E1AC4; return (uint32)regs.CTR; }
		/* 820E1AC0h case   45:*/		return 0x820E1AC4;
		  /* 820E1AC4h */ case   46:  		/* cmpwi CR0, R3, 0 */
		/* 820E1AC4h case   46:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1AC4h case   46:*/		return 0x820E1AC8;
		  /* 820E1AC8h */ case   47:  		/* bc 12, CR0_LT, 352 */
		/* 820E1AC8h case   47:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1AC8h case   47:*/		return 0x820E1ACC;
		  /* 820E1ACCh */ case   48:  		/* mr R3, R31 */
		/* 820E1ACCh case   48:*/		regs.R3 = regs.R31;
		/* 820E1ACCh case   48:*/		return 0x820E1AD0;
		  /* 820E1AD0h */ case   49:  		/* bl -31008 */
		/* 820E1AD0h case   49:*/		regs.LR = 0x820E1AD4; return 0x820DA1B0;
		/* 820E1AD0h case   49:*/		return 0x820E1AD4;
		  /* 820E1AD4h */ case   50:  		/* cmpwi CR0, R3, 0 */
		/* 820E1AD4h case   50:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1AD4h case   50:*/		return 0x820E1AD8;
		  /* 820E1AD8h */ case   51:  		/* bc 12, CR0_LT, 336 */
		/* 820E1AD8h case   51:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1AD8h case   51:*/		return 0x820E1ADC;
		  /* 820E1ADCh */ case   52:  		/* lis R11, -32254 */
		/* 820E1ADCh case   52:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1ADCh case   52:*/		return 0x820E1AE0;
		  /* 820E1AE0h */ case   53:  		/* addi R5, R1, 128 */
		/* 820E1AE0h case   53:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E1AE0h case   53:*/		return 0x820E1AE4;
		  /* 820E1AE4h */ case   54:  		/* addi R4, R11, -26460 */
		/* 820E1AE4h case   54:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF98A4);
		/* 820E1AE4h case   54:*/		return 0x820E1AE8;
		  /* 820E1AE8h */ case   55:  		/* mr R3, R31 */
		/* 820E1AE8h case   55:*/		regs.R3 = regs.R31;
		/* 820E1AE8h case   55:*/		return 0x820E1AEC;
		  /* 820E1AECh */ case   56:  		/* bl -31252 */
		/* 820E1AECh case   56:*/		regs.LR = 0x820E1AF0; return 0x820DA0D8;
		/* 820E1AECh case   56:*/		return 0x820E1AF0;
		  /* 820E1AF0h */ case   57:  		/* cmpwi CR0, R3, 0 */
		/* 820E1AF0h case   57:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1AF0h case   57:*/		return 0x820E1AF4;
		  /* 820E1AF4h */ case   58:  		/* bc 12, CR0_LT, 308 */
		/* 820E1AF4h case   58:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1AF4h case   58:*/		return 0x820E1AF8;
		  /* 820E1AF8h */ case   59:  		/* cmpwi CR6, R29, 0 */
		/* 820E1AF8h case   59:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820E1AF8h case   59:*/		return 0x820E1AFC;
		  /* 820E1AFCh */ case   60:  		/* mr R3, R31 */
		/* 820E1AFCh case   60:*/		regs.R3 = regs.R31;
		/* 820E1AFCh case   60:*/		return 0x820E1B00;
		  /* 820E1B00h */ case   61:  		/* bc 12, CR6_EQ, 260 */
		/* 820E1B00h case   61:*/		if ( regs.CR[6].eq ) { return 0x820E1C04;  }
		/* 820E1B00h case   61:*/		return 0x820E1B04;
		  /* 820E1B04h */ case   62:  		/* lis R11, -32254 */
		/* 820E1B04h case   62:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1B04h case   62:*/		return 0x820E1B08;
		  /* 820E1B08h */ case   63:  		/* addi R5, R1, 128 */
		/* 820E1B08h case   63:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E1B08h case   63:*/		return 0x820E1B0C;
		  /* 820E1B0Ch */ case   64:  		/* addi R4, R11, -26476 */
		/* 820E1B0Ch case   64:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9894);
		/* 820E1B0Ch case   64:*/		return 0x820E1B10;
		  /* 820E1B10h */ case   65:  		/* bl -31288 */
		/* 820E1B10h case   65:*/		regs.LR = 0x820E1B14; return 0x820DA0D8;
		/* 820E1B10h case   65:*/		return 0x820E1B14;
		  /* 820E1B14h */ case   66:  		/* cmpwi CR0, R3, 0 */
		/* 820E1B14h case   66:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1B14h case   66:*/		return 0x820E1B18;
		  /* 820E1B18h */ case   67:  		/* bc 12, CR0_LT, 272 */
		/* 820E1B18h case   67:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1B18h case   67:*/		return 0x820E1B1C;
		  /* 820E1B1Ch */ case   68:  		/* lis R11, -32254 */
		/* 820E1B1Ch case   68:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1B1Ch case   68:*/		return 0x820E1B20;
		  /* 820E1B20h */ case   69:  		/* addi R5, R1, 128 */
		/* 820E1B20h case   69:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E1B20h case   69:*/		return 0x820E1B24;
		  /* 820E1B24h */ case   70:  		/* addi R4, R11, -26500 */
		/* 820E1B24h case   70:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF987C);
		/* 820E1B24h case   70:*/		return 0x820E1B28;
		  /* 820E1B28h */ case   71:  		/* mr R3, R31 */
		/* 820E1B28h case   71:*/		regs.R3 = regs.R31;
		/* 820E1B28h case   71:*/		return 0x820E1B2C;
		  /* 820E1B2Ch */ case   72:  		/* bl -31316 */
		/* 820E1B2Ch case   72:*/		regs.LR = 0x820E1B30; return 0x820DA0D8;
		/* 820E1B2Ch case   72:*/		return 0x820E1B30;
		  /* 820E1B30h */ case   73:  		/* cmpwi CR0, R3, 0 */
		/* 820E1B30h case   73:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1B30h case   73:*/		return 0x820E1B34;
		  /* 820E1B34h */ case   74:  		/* bc 12, CR0_LT, 244 */
		/* 820E1B34h case   74:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1B34h case   74:*/		return 0x820E1B38;
		  /* 820E1B38h */ case   75:  		/* lwz R11, <#[R31]> */
		/* 820E1B38h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1B38h case   75:*/		return 0x820E1B3C;
		  /* 820E1B3Ch */ case   76:  		/* mr R3, R31 */
		/* 820E1B3Ch case   76:*/		regs.R3 = regs.R31;
		/* 820E1B3Ch case   76:*/		return 0x820E1B40;
		  /* 820E1B40h */ case   77:  		/* lwz R11, <#[R11 + 492]> */
		/* 820E1B40h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001EC) );
		/* 820E1B40h case   77:*/		return 0x820E1B44;
		  /* 820E1B44h */ case   78:  		/* mtspr CTR, R11 */
		/* 820E1B44h case   78:*/		regs.CTR = regs.R11;
		/* 820E1B44h case   78:*/		return 0x820E1B48;
		  /* 820E1B48h */ case   79:  		/* bcctrl 20, CR0_LT */
		/* 820E1B48h case   79:*/		if ( 1 ) { regs.LR = 0x820E1B4C; return (uint32)regs.CTR; }
		/* 820E1B48h case   79:*/		return 0x820E1B4C;
		  /* 820E1B4Ch */ case   80:  		/* cmpwi CR0, R3, 0 */
		/* 820E1B4Ch case   80:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1B4Ch case   80:*/		return 0x820E1B50;
		  /* 820E1B50h */ case   81:  		/* bc 12, CR0_LT, 216 */
		/* 820E1B50h case   81:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1B50h case   81:*/		return 0x820E1B54;
		  /* 820E1B54h */ case   82:  		/* lis R11, -32254 */
		/* 820E1B54h case   82:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1B54h case   82:*/		return 0x820E1B58;
		  /* 820E1B58h */ case   83:  		/* mr R3, R31 */
		/* 820E1B58h case   83:*/		regs.R3 = regs.R31;
		/* 820E1B58h case   83:*/		return 0x820E1B5C;
		  /* 820E1B5Ch */ case   84:  		/* addi R4, R11, -26520 */
		/* 820E1B5Ch case   84:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9868);
		/* 820E1B5Ch case   84:*/		return 0x820E1B60;
		  /* 820E1B60h */ case   85:  		/* bl -31368 */
		/* 820E1B60h case   85:*/		regs.LR = 0x820E1B64; return 0x820DA0D8;
		/* 820E1B60h case   85:*/		return 0x820E1B64;
		  /* 820E1B64h */ case   86:  		/* cmpwi CR0, R3, 0 */
		/* 820E1B64h case   86:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1B64h case   86:*/		return 0x820E1B68;
		  /* 820E1B68h */ case   87:  		/* bc 12, CR0_LT, 192 */
		/* 820E1B68h case   87:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1B68h case   87:*/		return 0x820E1B6C;
		  /* 820E1B6Ch */ case   88:  		/* cmpwi CR6, R29, 0 */
		/* 820E1B6Ch case   88:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820E1B6Ch case   88:*/		return 0x820E1B70;
		  /* 820E1B70h */ case   89:  		/* mr R3, R31 */
		/* 820E1B70h case   89:*/		regs.R3 = regs.R31;
		/* 820E1B70h case   89:*/		return 0x820E1B74;
		  /* 820E1B74h */ case   90:  		/* bc 12, CR6_EQ, 160 */
		/* 820E1B74h case   90:*/		if ( regs.CR[6].eq ) { return 0x820E1C14;  }
		/* 820E1B74h case   90:*/		return 0x820E1B78;
		  /* 820E1B78h */ case   91:  		/* lis R11, -32254 */
		/* 820E1B78h case   91:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1B78h case   91:*/		return 0x820E1B7C;
		  /* 820E1B7Ch */ case   92:  		/* addi R5, R1, 128 */
		/* 820E1B7Ch case   92:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E1B7Ch case   92:*/		return 0x820E1B80;
		  /* 820E1B80h */ case   93:  		/* addi R4, R11, -26540 */
		/* 820E1B80h case   93:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF9854);
		/* 820E1B80h case   93:*/		return 0x820E1B84;
		  /* 820E1B84h */ case   94:  		/* bl -31404 */
		/* 820E1B84h case   94:*/		regs.LR = 0x820E1B88; return 0x820DA0D8;
		/* 820E1B84h case   94:*/		return 0x820E1B88;
		  /* 820E1B88h */ case   95:  		/* cmpwi CR0, R3, 0 */
		/* 820E1B88h case   95:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1B88h case   95:*/		return 0x820E1B8C;
		  /* 820E1B8Ch */ case   96:  		/* bc 12, CR0_LT, 156 */
		/* 820E1B8Ch case   96:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1B8Ch case   96:*/		return 0x820E1B90;
		  /* 820E1B90h */ case   97:  		/* mr R3, R31 */
		/* 820E1B90h case   97:*/		regs.R3 = regs.R31;
		/* 820E1B90h case   97:*/		return 0x820E1B94;
		  /* 820E1B94h */ case   98:  		/* bl -31204 */
		/* 820E1B94h case   98:*/		regs.LR = 0x820E1B98; return 0x820DA1B0;
		/* 820E1B94h case   98:*/		return 0x820E1B98;
		  /* 820E1B98h */ case   99:  		/* cmpwi CR0, R3, 0 */
		/* 820E1B98h case   99:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1B98h case   99:*/		return 0x820E1B9C;
		  /* 820E1B9Ch */ case  100:  		/* bc 12, CR0_LT, 140 */
		/* 820E1B9Ch case  100:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1B9Ch case  100:*/		return 0x820E1BA0;
		  /* 820E1BA0h */ case  101:  		/* lis R11, -32254 */
		/* 820E1BA0h case  101:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1BA0h case  101:*/		return 0x820E1BA4;
		  /* 820E1BA4h */ case  102:  		/* mr R3, R31 */
		/* 820E1BA4h case  102:*/		regs.R3 = regs.R31;
		/* 820E1BA4h case  102:*/		return 0x820E1BA8;
		  /* 820E1BA8h */ case  103:  		/* addi R4, R11, -30564 */
		/* 820E1BA8h case  103:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF889C);
		/* 820E1BA8h case  103:*/		return 0x820E1BAC;
		  /* 820E1BACh */ case  104:  		/* bl -31444 */
		/* 820E1BACh case  104:*/		regs.LR = 0x820E1BB0; return 0x820DA0D8;
		/* 820E1BACh case  104:*/		return 0x820E1BB0;
		  /* 820E1BB0h */ case  105:  		/* cmpwi CR0, R3, 0 */
		/* 820E1BB0h case  105:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1BB0h case  105:*/		return 0x820E1BB4;
		  /* 820E1BB4h */ case  106:  		/* bc 12, CR0_LT, 116 */
		/* 820E1BB4h case  106:*/		if ( regs.CR[0].lt ) { return 0x820E1C28;  }
		/* 820E1BB4h case  106:*/		return 0x820E1BB8;
		  /* 820E1BB8h */ case  107:  		/* lwz R11, <#[R31 + 1808]> */
		/* 820E1BB8h case  107:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820E1BB8h case  107:*/		return 0x820E1BBC;
		  /* 820E1BBCh */ case  108:  		/* li R9, 2 */
		/* 820E1BBCh case  108:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820E1BBCh case  108:*/		return 0x820E1BC0;
		  /* 820E1BC0h */ case  109:  		/* lwz R10, <#[R31 + 1812]> */
		/* 820E1BC0h case  109:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1BC0h case  109:*/		return 0x820E1BC4;
		  /* 820E1BC4h */ case  110:  		/* cmpwi CR6, R29, 0 */
		/* 820E1BC4h case  110:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820E1BC4h case  110:*/		return 0x820E1BC8;
		  /* 820E1BC8h */ case  111:  		/* addi R11, R11, 420 */
		/* 820E1BC8h case  111:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A4);
		/* 820E1BC8h case  111:*/		return 0x820E1BCC;
		  /* 820E1BCCh */ case  112:  		/* addi R10, R10, 1 */
		/* 820E1BCCh case  112:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E1BCCh case  112:*/		return 0x820E1BD0;
		  /* 820E1BD0h */ case  113:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E1BD0h case  113:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E1BD0h case  113:*/		return 0x820E1BD4;
		  /* 820E1BD4h */ case  114:  		/* stw R10, <#[R31 + 1812]> */
		/* 820E1BD4h case  114:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1BD4h case  114:*/		return 0x820E1BD8;
		  /* 820E1BD8h */ case  115:  		/* mr R3, R31 */
		/* 820E1BD8h case  115:*/		regs.R3 = regs.R31;
		/* 820E1BD8h case  115:*/		return 0x820E1BDC;
		  /* 820E1BDCh */ case  116:  		/* stwx R9, <#[R11 + R31]> */
		/* 820E1BDCh case  116:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820E1BDCh case  116:*/		return 0x820E1BE0;
		  /* 820E1BE0h */ case  117:  		/* lwz R10, <#[R31 + 1544]> */
		/* 820E1BE0h case  117:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000608) );
		/* 820E1BE0h case  117:*/		return 0x820E1BE4;
		  /* 820E1BE4h */ case  118:  		/* lwz R11, <#[R31 + 1808]> */
		/* 820E1BE4h case  118:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820E1BE4h case  118:*/		return 0x820E1BE8;
		  /* 820E1BE8h */ case  119:  		/* addi R11, R11, 1 */
		/* 820E1BE8h case  119:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E1BE8h case  119:*/		return 0x820E1BEC;
		  /* 820E1BECh */ case  120:  		/* addi R10, R10, 1 */
		/* 820E1BECh case  120:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E1BECh case  120:*/		return 0x820E1BF0;
		  /* 820E1BF0h */ case  121:  		/* stw R11, <#[R31 + 1808]> */
		/* 820E1BF0h case  121:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000710) );
		/* 820E1BF0h case  121:*/		return 0x820E1BF4;
		  /* 820E1BF4h */ case  122:  		/* stw R10, <#[R31 + 1544]> */
		/* 820E1BF4h case  122:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000608) );
		/* 820E1BF4h case  122:*/		return 0x820E1BF8;
		  /* 820E1BF8h */ case  123:  		/* bc 12, CR6_EQ, 44 */
		/* 820E1BF8h case  123:*/		if ( regs.CR[6].eq ) { return 0x820E1C24;  }
		/* 820E1BF8h case  123:*/		return 0x820E1BFC;
		  /* 820E1BFCh */ case  124:  		/* bl 94876 */
		/* 820E1BFCh case  124:*/		regs.LR = 0x820E1C00; return 0x820F8E98;
		/* 820E1BFCh case  124:*/		return 0x820E1C00;
		  /* 820E1C00h */ case  125:  		/* b 40 */
		/* 820E1C00h case  125:*/		return 0x820E1C28;
		/* 820E1C00h case  125:*/		return 0x820E1C04;
	}
	return 0x820E1C04;
} // Block from 820E1A0Ch-820E1C04h (126 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C04);
		  /* 820E1C04h */ case    0:  		/* lis R11, -32255 */
		/* 820E1C04h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E1C04h case    0:*/		return 0x820E1C08;
		  /* 820E1C08h */ case    1:  		/* addi R4, R11, -10788 */
		/* 820E1C08h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFD5DC);
		/* 820E1C08h case    1:*/		return 0x820E1C0C;
		  /* 820E1C0Ch */ case    2:  		/* bl -31540 */
		/* 820E1C0Ch case    2:*/		regs.LR = 0x820E1C10; return 0x820DA0D8;
		/* 820E1C0Ch case    2:*/		return 0x820E1C10;
	}
	return 0x820E1C10;
} // Block from 820E1C04h-820E1C10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C10h
// Function '?EmitIF@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C10);
		  /* 820E1C10h */ case    0:  		/* b -252 */
		/* 820E1C10h case    0:*/		return 0x820E1B14;
		/* 820E1C10h case    0:*/		return 0x820E1C14;
	}
	return 0x820E1C14;
} // Block from 820E1C10h-820E1C14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C14);
		  /* 820E1C14h */ case    0:  		/* lis R11, -32254 */
		/* 820E1C14h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1C14h case    0:*/		return 0x820E1C18;
		  /* 820E1C18h */ case    1:  		/* addi R4, R11, -30560 */
		/* 820E1C18h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF88A0);
		/* 820E1C18h case    1:*/		return 0x820E1C1C;
		  /* 820E1C1Ch */ case    2:  		/* bl -31556 */
		/* 820E1C1Ch case    2:*/		regs.LR = 0x820E1C20; return 0x820DA0D8;
		/* 820E1C1Ch case    2:*/		return 0x820E1C20;
		  /* 820E1C20h */ case    3:  		/* b -152 */
		/* 820E1C20h case    3:*/		return 0x820E1B88;
		/* 820E1C20h case    3:*/		return 0x820E1C24;
	}
	return 0x820E1C24;
} // Block from 820E1C14h-820E1C24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C24);
		  /* 820E1C24h */ case    0:  		/* bl 94628 */
		/* 820E1C24h case    0:*/		regs.LR = 0x820E1C28; return 0x820F8DC8;
		/* 820E1C24h case    0:*/		return 0x820E1C28;
	}
	return 0x820E1C28;
} // Block from 820E1C24h-820E1C28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C28);
		  /* 820E1C28h */ case    0:  		/* addi R1, R1, 256 */
		/* 820E1C28h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 820E1C28h case    0:*/		return 0x820E1C2C;
		  /* 820E1C2Ch */ case    1:  		/* b -330112 */
		/* 820E1C2Ch case    1:*/		return 0x820912AC;
		/* 820E1C2Ch case    1:*/		return 0x820E1C30;
	}
	return 0x820E1C30;
} // Block from 820E1C28h-820E1C30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C30);
		  /* 820E1C30h */ case    0:  		/* mfspr R12, LR */
		/* 820E1C30h case    0:*/		regs.R12 = regs.LR;
		/* 820E1C30h case    0:*/		return 0x820E1C34;
		  /* 820E1C34h */ case    1:  		/* bl -330220 */
		/* 820E1C34h case    1:*/		regs.LR = 0x820E1C38; return 0x82091248;
		/* 820E1C34h case    1:*/		return 0x820E1C38;
		  /* 820E1C38h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 820E1C38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 820E1C38h case    2:*/		return 0x820E1C3C;
		  /* 820E1C3Ch */ case    3:  		/* mr R31, R3 */
		/* 820E1C3Ch case    3:*/		regs.R31 = regs.R3;
		/* 820E1C3Ch case    3:*/		return 0x820E1C40;
		  /* 820E1C40h */ case    4:  		/* mr R29, R4 */
		/* 820E1C40h case    4:*/		regs.R29 = regs.R4;
		/* 820E1C40h case    4:*/		return 0x820E1C44;
		  /* 820E1C44h */ case    5:  		/* mr R26, R5 */
		/* 820E1C44h case    5:*/		regs.R26 = regs.R5;
		/* 820E1C44h case    5:*/		return 0x820E1C48;
		  /* 820E1C48h */ case    6:  		/* cmplwi CR6, R6, 0 */
		/* 820E1C48h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820E1C48h case    6:*/		return 0x820E1C4C;
		  /* 820E1C4Ch */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 820E1C4Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820E1C5C;  }
		/* 820E1C4Ch case    7:*/		return 0x820E1C50;
		  /* 820E1C50h */ case    8:  		/* lwz R11, <#[R6]> */
		/* 820E1C50h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 820E1C50h case    8:*/		return 0x820E1C54;
		  /* 820E1C54h */ case    9:  		/* stw R11, <#[R1 + 132]> */
		/* 820E1C54h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820E1C54h case    9:*/		return 0x820E1C58;
		  /* 820E1C58h */ case   10:  		/* b 8 */
		/* 820E1C58h case   10:*/		return 0x820E1C60;
		/* 820E1C58h case   10:*/		return 0x820E1C5C;
	}
	return 0x820E1C5C;
} // Block from 820E1C30h-820E1C5Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C5C);
		  /* 820E1C5Ch */ case    0:  		/* addi R6, R1, 132 */
		/* 820E1C5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x84);
		/* 820E1C5Ch case    0:*/		return 0x820E1C60;
	}
	return 0x820E1C60;
} // Block from 820E1C5Ch-820E1C60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1C60);
		  /* 820E1C60h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E1C60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1C60h case    0:*/		return 0x820E1C64;
		  /* 820E1C64h */ case    1:  		/* addi R7, R1, 148 */
		/* 820E1C64h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x94);
		/* 820E1C64h case    1:*/		return 0x820E1C68;
		  /* 820E1C68h */ case    2:  		/* lwz R10, <#[R31]> */
		/* 820E1C68h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1C68h case    2:*/		return 0x820E1C6C;
		  /* 820E1C6Ch */ case    3:  		/* addi R5, R1, 136 */
		/* 820E1C6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x88);
		/* 820E1C6Ch case    3:*/		return 0x820E1C70;
		  /* 820E1C70h */ case    4:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E1C70h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E1C70h case    4:*/		return 0x820E1C74;
		  /* 820E1C74h */ case    5:  		/* mr R3, R31 */
		/* 820E1C74h case    5:*/		regs.R3 = regs.R31;
		/* 820E1C74h case    5:*/		return 0x820E1C78;
		  /* 820E1C78h */ case    6:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E1C78h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E1C78h case    6:*/		return 0x820E1C7C;
		  /* 820E1C7Ch */ case    7:  		/* lwz R10, <#[R10 + 320]> */
		/* 820E1C7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000140) );
		/* 820E1C7Ch case    7:*/		return 0x820E1C80;
		  /* 820E1C80h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 820E1C80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E1C80h case    8:*/		return 0x820E1C84;
		  /* 820E1C84h */ case    9:  		/* mtspr CTR, R10 */
		/* 820E1C84h case    9:*/		regs.CTR = regs.R10;
		/* 820E1C84h case    9:*/		return 0x820E1C88;
		  /* 820E1C88h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E1C88h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E1C88h case   10:*/		return 0x820E1C8C;
		  /* 820E1C8Ch */ case   11:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E1C8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E1C8Ch case   11:*/		return 0x820E1C90;
		  /* 820E1C90h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820E1C90h case   12:*/		if ( 1 ) { regs.LR = 0x820E1C94; return (uint32)regs.CTR; }
		/* 820E1C90h case   12:*/		return 0x820E1C94;
		  /* 820E1C94h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820E1C94h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1C94h case   13:*/		return 0x820E1C98;
		  /* 820E1C98h */ case   14:  		/* bc 12, CR0_LT, 948 */
		/* 820E1C98h case   14:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1C98h case   14:*/		return 0x820E1C9C;
		  /* 820E1C9Ch */ case   15:  		/* lwz R11, <#[R31]> */
		/* 820E1C9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1C9Ch case   15:*/		return 0x820E1CA0;
		  /* 820E1CA0h */ case   16:  		/* addi R6, R1, 128 */
		/* 820E1CA0h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E1CA0h case   16:*/		return 0x820E1CA4;
		  /* 820E1CA4h */ case   17:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E1CA4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1CA4h case   17:*/		return 0x820E1CA8;
		  /* 820E1CA8h */ case   18:  		/* mr R3, R31 */
		/* 820E1CA8h case   18:*/		regs.R3 = regs.R31;
		/* 820E1CA8h case   18:*/		return 0x820E1CAC;
		  /* 820E1CACh */ case   19:  		/* lwz R7, <#[R1 + 148]> */
		/* 820E1CACh case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820E1CACh case   19:*/		return 0x820E1CB0;
		  /* 820E1CB0h */ case   20:  		/* lwz R11, <#[R11 + 324]> */
		/* 820E1CB0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 820E1CB0h case   20:*/		return 0x820E1CB4;
		  /* 820E1CB4h */ case   21:  		/* lwz R5, <#[R10 + 12]> */
		/* 820E1CB4h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E1CB4h case   21:*/		return 0x820E1CB8;
		  /* 820E1CB8h */ case   22:  		/* lwz R4, <#[R10 + 16]> */
		/* 820E1CB8h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 820E1CB8h case   22:*/		return 0x820E1CBC;
		  /* 820E1CBCh */ case   23:  		/* mtspr CTR, R11 */
		/* 820E1CBCh case   23:*/		regs.CTR = regs.R11;
		/* 820E1CBCh case   23:*/		return 0x820E1CC0;
		  /* 820E1CC0h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 820E1CC0h case   24:*/		if ( 1 ) { regs.LR = 0x820E1CC4; return (uint32)regs.CTR; }
		/* 820E1CC0h case   24:*/		return 0x820E1CC4;
		  /* 820E1CC4h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820E1CC4h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1CC4h case   25:*/		return 0x820E1CC8;
		  /* 820E1CC8h */ case   26:  		/* bc 12, CR0_LT, 900 */
		/* 820E1CC8h case   26:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1CC8h case   26:*/		return 0x820E1CCC;
		  /* 820E1CCCh */ case   27:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E1CCCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1CCCh case   27:*/		return 0x820E1CD0;
		  /* 820E1CD0h */ case   28:  		/* lis R25, 15 */
		/* 820E1CD0h case   28:*/		cpu::op::lis<0>(regs,&regs.R25,0xF);
		/* 820E1CD0h case   28:*/		return 0x820E1CD4;
		  /* 820E1CD4h */ case   29:  		/* lwz R4, <#[R1 + 132]> */
		/* 820E1CD4h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 820E1CD4h case   29:*/		return 0x820E1CD8;
		  /* 820E1CD8h */ case   30:  		/* li R30, 0 */
		/* 820E1CD8h case   30:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E1CD8h case   30:*/		return 0x820E1CDC;
		  /* 820E1CDCh */ case   31:  		/* cmplw CR6, R11, R25 */
		/* 820E1CDCh case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820E1CDCh case   31:*/		return 0x820E1CE0;
		  /* 820E1CE0h */ case   32:  		/* bc 4, CR6_EQ, 28 */
		/* 820E1CE0h case   32:*/		if ( !regs.CR[6].eq ) { return 0x820E1CFC;  }
		/* 820E1CE0h case   32:*/		return 0x820E1CE4;
		  /* 820E1CE4h */ case   33:  		/* cmplwi CR6, R4, 0 */
		/* 820E1CE4h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820E1CE4h case   33:*/		return 0x820E1CE8;
		  /* 820E1CE8h */ case   34:  		/* bc 4, CR6_EQ, 20 */
		/* 820E1CE8h case   34:*/		if ( !regs.CR[6].eq ) { return 0x820E1CFC;  }
		/* 820E1CE8h case   34:*/		return 0x820E1CEC;
		  /* 820E1CECh */ case   35:  		/* lwz R10, <#[R31 + 1812]> */
		/* 820E1CECh case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1CECh case   35:*/		return 0x820E1CF0;
		  /* 820E1CF0h */ case   36:  		/* mr R27, R30 */
		/* 820E1CF0h case   36:*/		regs.R27 = regs.R30;
		/* 820E1CF0h case   36:*/		return 0x820E1CF4;
		  /* 820E1CF4h */ case   37:  		/* cmplwi CR6, R10, 0 */
		/* 820E1CF4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E1CF4h case   37:*/		return 0x820E1CF8;
		  /* 820E1CF8h */ case   38:  		/* bc 4, CR6_GT, 8 */
		/* 820E1CF8h case   38:*/		if ( !regs.CR[6].gt ) { return 0x820E1D00;  }
		/* 820E1CF8h case   38:*/		return 0x820E1CFC;
	}
	return 0x820E1CFC;
} // Block from 820E1C60h-820E1CFCh (39 instructions)

//////////////////////////////////////////////////////
// Block at 820E1CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1CFC);
		  /* 820E1CFCh */ case    0:  		/* li R27, 1 */
		/* 820E1CFCh case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E1CFCh case    0:*/		return 0x820E1D00;
	}
	return 0x820E1D00;
} // Block from 820E1CFCh-820E1D00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1D00);
		  /* 820E1D00h */ case    0:  		/* rlwinm R10, R4, 0, 8, 15 */
		/* 820E1D00h case    0:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R10,regs.R4);
		/* 820E1D00h case    0:*/		return 0x820E1D04;
		  /* 820E1D04h */ case    1:  		/* cmplw CR6, R11, R25 */
		/* 820E1D04h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820E1D04h case    1:*/		return 0x820E1D08;
		  /* 820E1D08h */ case    2:  		/* addic R9, R10, -1 */
		/* 820E1D08h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 820E1D08h case    2:*/		return 0x820E1D0C;
		  /* 820E1D0Ch */ case    3:  		/* subfe R24, R9, R10 */
		/* 820E1D0Ch case    3:*/		cpu::op::subfe<0>(regs,&regs.R24,regs.R9,regs.R10);
		/* 820E1D0Ch case    3:*/		return 0x820E1D10;
		  /* 820E1D10h */ case    4:  		/* bc 12, CR6_EQ, 60 */
		/* 820E1D10h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E1D4C;  }
		/* 820E1D10h case    4:*/		return 0x820E1D14;
		  /* 820E1D14h */ case    5:  		/* mr R4, R11 */
		/* 820E1D14h case    5:*/		regs.R4 = regs.R11;
		/* 820E1D14h case    5:*/		return 0x820E1D18;
		  /* 820E1D18h */ case    6:  		/* mr R3, R31 */
		/* 820E1D18h case    6:*/		regs.R3 = regs.R31;
		/* 820E1D18h case    6:*/		return 0x820E1D1C;
		  /* 820E1D1Ch */ case    7:  		/* bl -30924 */
		/* 820E1D1Ch case    7:*/		regs.LR = 0x820E1D20; return 0x820DA450;
		/* 820E1D1Ch case    7:*/		return 0x820E1D20;
		  /* 820E1D20h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E1D20h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1D20h case    8:*/		return 0x820E1D24;
		  /* 820E1D24h */ case    9:  		/* bc 12, CR0_LT, 808 */
		/* 820E1D24h case    9:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1D24h case    9:*/		return 0x820E1D28;
		  /* 820E1D28h */ case   10:  		/* cmpwi CR6, R27, 0 */
		/* 820E1D28h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E1D28h case   10:*/		return 0x820E1D2C;
		  /* 820E1D2Ch */ case   11:  		/* bc 12, CR6_EQ, 76 */
		/* 820E1D2Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820E1D78;  }
		/* 820E1D2Ch case   11:*/		return 0x820E1D30;
		  /* 820E1D30h */ case   12:  		/* lis R11, -32254 */
		/* 820E1D30h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1D30h case   12:*/		return 0x820E1D34;
		  /* 820E1D34h */ case   13:  		/* li R4, 32 */
		/* 820E1D34h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E1D34h case   13:*/		return 0x820E1D38;
		  /* 820E1D38h */ case   14:  		/* addi R5, R11, -30716 */
		/* 820E1D38h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8804);
		/* 820E1D38h case   14:*/		return 0x820E1D3C;
		  /* 820E1D3Ch */ case   15:  		/* addi R3, R1, 224 */
		/* 820E1D3Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 820E1D3Ch case   15:*/		return 0x820E1D40;
		  /* 820E1D40h */ case   16:  		/* bl -243280 */
		/* 820E1D40h case   16:*/		regs.LR = 0x820E1D44; return 0x820A66F0;
		/* 820E1D40h case   16:*/		return 0x820E1D44;
		  /* 820E1D44h */ case   17:  		/* mr R28, R30 */
		/* 820E1D44h case   17:*/		regs.R28 = regs.R30;
		/* 820E1D44h case   17:*/		return 0x820E1D48;
		  /* 820E1D48h */ case   18:  		/* b 76 */
		/* 820E1D48h case   18:*/		return 0x820E1D94;
		/* 820E1D48h case   18:*/		return 0x820E1D4C;
	}
	return 0x820E1D4C;
} // Block from 820E1D00h-820E1D4Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E1D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1D4C);
		  /* 820E1D4Ch */ case    0:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E1D4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1D4Ch case    0:*/		return 0x820E1D50;
		  /* 820E1D50h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E1D50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E1D50h case    1:*/		return 0x820E1D54;
		  /* 820E1D54h */ case    2:  		/* bc 4, CR6_GT, 16 */
		/* 820E1D54h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820E1D64;  }
		/* 820E1D54h case    2:*/		return 0x820E1D58;
		  /* 820E1D58h */ case    3:  		/* mr R3, R31 */
		/* 820E1D58h case    3:*/		regs.R3 = regs.R31;
		/* 820E1D58h case    3:*/		return 0x820E1D5C;
		  /* 820E1D5Ch */ case    4:  		/* bl -30820 */
		/* 820E1D5Ch case    4:*/		regs.LR = 0x820E1D60; return 0x820DA4F8;
		/* 820E1D5Ch case    4:*/		return 0x820E1D60;
		  /* 820E1D60h */ case    5:  		/* b -64 */
		/* 820E1D60h case    5:*/		return 0x820E1D20;
		/* 820E1D60h case    5:*/		return 0x820E1D64;
	}
	return 0x820E1D64;
} // Block from 820E1D4Ch-820E1D64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E1D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1D64);
		  /* 820E1D64h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 820E1D64h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820E1D64h case    0:*/		return 0x820E1D68;
		  /* 820E1D68h */ case    1:  		/* bc 12, CR6_EQ, -64 */
		/* 820E1D68h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E1D28;  }
		/* 820E1D68h case    1:*/		return 0x820E1D6C;
		  /* 820E1D6Ch */ case    2:  		/* mr R3, R31 */
		/* 820E1D6Ch case    2:*/		regs.R3 = regs.R31;
		/* 820E1D6Ch case    2:*/		return 0x820E1D70;
		  /* 820E1D70h */ case    3:  		/* bl -30648 */
		/* 820E1D70h case    3:*/		regs.LR = 0x820E1D74; return 0x820DA5B8;
		/* 820E1D70h case    3:*/		return 0x820E1D74;
		  /* 820E1D74h */ case    4:  		/* b -84 */
		/* 820E1D74h case    4:*/		return 0x820E1D20;
		/* 820E1D74h case    4:*/		return 0x820E1D78;
	}
	return 0x820E1D78;
} // Block from 820E1D64h-820E1D78h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E1D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1D78);
		  /* 820E1D78h */ case    0:  		/* li R7, 0 */
		/* 820E1D78h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E1D78h case    0:*/		return 0x820E1D7C;
		  /* 820E1D7Ch */ case    1:  		/* lwz R4, <#[R1 + 136]> */
		/* 820E1D7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 820E1D7Ch case    1:*/		return 0x820E1D80;
		  /* 820E1D80h */ case    2:  		/* li R6, 32 */
		/* 820E1D80h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820E1D80h case    2:*/		return 0x820E1D84;
		  /* 820E1D84h */ case    3:  		/* addi R5, R1, 224 */
		/* 820E1D84h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820E1D84h case    3:*/		return 0x820E1D88;
		  /* 820E1D88h */ case    4:  		/* mr R3, R31 */
		/* 820E1D88h case    4:*/		regs.R3 = regs.R31;
		/* 820E1D88h case    4:*/		return 0x820E1D8C;
		  /* 820E1D8Ch */ case    5:  		/* bl -31284 */
		/* 820E1D8Ch case    5:*/		regs.LR = 0x820E1D90; return 0x820DA358;
		/* 820E1D8Ch case    5:*/		return 0x820E1D90;
		  /* 820E1D90h */ case    6:  		/* addi R28, R1, 224 */
		/* 820E1D90h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0xE0);
		/* 820E1D90h case    6:*/		return 0x820E1D94;
	}
	return 0x820E1D94;
} // Block from 820E1D78h-820E1D94h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E1D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1D94);
		  /* 820E1D94h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E1D94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1D94h case    0:*/		return 0x820E1D98;
		  /* 820E1D98h */ case    1:  		/* rlwinm R29, R29, 2, 0, 29 */
		/* 820E1D98h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R29);
		/* 820E1D98h case    1:*/		return 0x820E1D9C;
		  /* 820E1D9Ch */ case    2:  		/* lwz R10, <#[R31]> */
		/* 820E1D9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1D9Ch case    2:*/		return 0x820E1DA0;
		  /* 820E1DA0h */ case    3:  		/* addi R6, R1, 152 */
		/* 820E1DA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x98);
		/* 820E1DA0h case    3:*/		return 0x820E1DA4;
		  /* 820E1DA4h */ case    4:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E1DA4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E1DA4h case    4:*/		return 0x820E1DA8;
		  /* 820E1DA8h */ case    5:  		/* addi R5, R1, 144 */
		/* 820E1DA8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E1DA8h case    5:*/		return 0x820E1DAC;
		  /* 820E1DACh */ case    6:  		/* mr R3, R31 */
		/* 820E1DACh case    6:*/		regs.R3 = regs.R31;
		/* 820E1DACh case    6:*/		return 0x820E1DB0;
		  /* 820E1DB0h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E1DB0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E1DB0h case    7:*/		return 0x820E1DB4;
		  /* 820E1DB4h */ case    8:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E1DB4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E1DB4h case    8:*/		return 0x820E1DB8;
		  /* 820E1DB8h */ case    9:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820E1DB8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820E1DB8h case    9:*/		return 0x820E1DBC;
		  /* 820E1DBCh */ case   10:  		/* mtspr CTR, R10 */
		/* 820E1DBCh case   10:*/		regs.CTR = regs.R10;
		/* 820E1DBCh case   10:*/		return 0x820E1DC0;
		  /* 820E1DC0h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E1DC0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E1DC0h case   11:*/		return 0x820E1DC4;
		  /* 820E1DC4h */ case   12:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E1DC4h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E1DC4h case   12:*/		return 0x820E1DC8;
		  /* 820E1DC8h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 820E1DC8h case   13:*/		if ( 1 ) { regs.LR = 0x820E1DCC; return (uint32)regs.CTR; }
		/* 820E1DC8h case   13:*/		return 0x820E1DCC;
		  /* 820E1DCCh */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E1DCCh case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1DCCh case   14:*/		return 0x820E1DD0;
		  /* 820E1DD0h */ case   15:  		/* bc 12, CR0_LT, 636 */
		/* 820E1DD0h case   15:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1DD0h case   15:*/		return 0x820E1DD4;
		  /* 820E1DD4h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 820E1DD4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E1DD4h case   16:*/		return 0x820E1DD8;
		  /* 820E1DD8h */ case   17:  		/* addi R7, R1, 140 */
		/* 820E1DD8h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x8C);
		/* 820E1DD8h case   17:*/		return 0x820E1DDC;
		  /* 820E1DDCh */ case   18:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E1DDCh case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E1DDCh case   18:*/		return 0x820E1DE0;
		  /* 820E1DE0h */ case   19:  		/* mr R5, R26 */
		/* 820E1DE0h case   19:*/		regs.R5 = regs.R26;
		/* 820E1DE0h case   19:*/		return 0x820E1DE4;
		  /* 820E1DE4h */ case   20:  		/* mr R3, R31 */
		/* 820E1DE4h case   20:*/		regs.R3 = regs.R31;
		/* 820E1DE4h case   20:*/		return 0x820E1DE8;
		  /* 820E1DE8h */ case   21:  		/* lwz R6, <#[R1 + 128]> */
		/* 820E1DE8h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1DE8h case   21:*/		return 0x820E1DEC;
		  /* 820E1DECh */ case   22:  		/* lwz R9, <#[R11 + 332]> */
		/* 820E1DECh case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E1DECh case   22:*/		return 0x820E1DF0;
		  /* 820E1DF0h */ case   23:  		/* lwz R11, <#[R10 + 8]> */
		/* 820E1DF0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E1DF0h case   23:*/		return 0x820E1DF4;
		  /* 820E1DF4h */ case   24:  		/* add R4, R11, R29 */
		/* 820E1DF4h case   24:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R29);
		/* 820E1DF4h case   24:*/		return 0x820E1DF8;
		  /* 820E1DF8h */ case   25:  		/* mtspr CTR, R9 */
		/* 820E1DF8h case   25:*/		regs.CTR = regs.R9;
		/* 820E1DF8h case   25:*/		return 0x820E1DFC;
		  /* 820E1DFCh */ case   26:  		/* bcctrl 20, CR0_LT */
		/* 820E1DFCh case   26:*/		if ( 1 ) { regs.LR = 0x820E1E00; return (uint32)regs.CTR; }
		/* 820E1DFCh case   26:*/		return 0x820E1E00;
		  /* 820E1E00h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 820E1E00h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1E00h case   27:*/		return 0x820E1E04;
		  /* 820E1E04h */ case   28:  		/* bc 12, CR0_LT, 584 */
		/* 820E1E04h case   28:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1E04h case   28:*/		return 0x820E1E08;
		  /* 820E1E08h */ case   29:  		/* li R10, 32 */
		/* 820E1E08h case   29:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 820E1E08h case   29:*/		return 0x820E1E0C;
		  /* 820E1E0Ch */ case   30:  		/* stw R30, <#[R1 + 116]> */
		/* 820E1E0Ch case   30:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 820E1E0Ch case   30:*/		return 0x820E1E10;
		  /* 820E1E10h */ case   31:  		/* addi R9, R1, 160 */
		/* 820E1E10h case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 820E1E10h case   31:*/		return 0x820E1E14;
		  /* 820E1E14h */ case   32:  		/* stw R30, <#[R1 + 108]> */
		/* 820E1E14h case   32:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E1E14h case   32:*/		return 0x820E1E18;
		  /* 820E1E18h */ case   33:  		/* addi R8, R1, 140 */
		/* 820E1E18h case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x8C);
		/* 820E1E18h case   33:*/		return 0x820E1E1C;
		  /* 820E1E1Ch */ case   34:  		/* stw R30, <#[R1 + 100]> */
		/* 820E1E1Ch case   34:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 820E1E1Ch case   34:*/		return 0x820E1E20;
		  /* 820E1E20h */ case   35:  		/* addi R7, R1, 152 */
		/* 820E1E20h case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x98);
		/* 820E1E20h case   35:*/		return 0x820E1E24;
		  /* 820E1E24h */ case   36:  		/* stw R30, <#[R1 + 92]> */
		/* 820E1E24h case   36:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 820E1E24h case   36:*/		return 0x820E1E28;
		  /* 820E1E28h */ case   37:  		/* addi R6, R1, 144 */
		/* 820E1E28h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 820E1E28h case   37:*/		return 0x820E1E2C;
		  /* 820E1E2Ch */ case   38:  		/* stw R30, <#[R1 + 84]> */
		/* 820E1E2Ch case   38:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 820E1E2Ch case   38:*/		return 0x820E1E30;
		  /* 820E1E30h */ case   39:  		/* li R5, 1 */
		/* 820E1E30h case   39:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820E1E30h case   39:*/		return 0x820E1E34;
		  /* 820E1E34h */ case   40:  		/* mr R4, R28 */
		/* 820E1E34h case   40:*/		regs.R4 = regs.R28;
		/* 820E1E34h case   40:*/		return 0x820E1E38;
		  /* 820E1E38h */ case   41:  		/* mr R3, R31 */
		/* 820E1E38h case   41:*/		regs.R3 = regs.R31;
		/* 820E1E38h case   41:*/		return 0x820E1E3C;
		  /* 820E1E3Ch */ case   42:  		/* bl -6300 */
		/* 820E1E3Ch case   42:*/		regs.LR = 0x820E1E40; return 0x820E05A0;
		/* 820E1E3Ch case   42:*/		return 0x820E1E40;
		  /* 820E1E40h */ case   43:  		/* cmpwi CR0, R3, 0 */
		/* 820E1E40h case   43:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1E40h case   43:*/		return 0x820E1E44;
		  /* 820E1E44h */ case   44:  		/* bc 12, CR0_LT, 520 */
		/* 820E1E44h case   44:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1E44h case   44:*/		return 0x820E1E48;
		  /* 820E1E48h */ case   45:  		/* cmpwi CR6, R27, 0 */
		/* 820E1E48h case   45:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E1E48h case   45:*/		return 0x820E1E4C;
		  /* 820E1E4Ch */ case   46:  		/* bc 12, CR6_EQ, 332 */
		/* 820E1E4Ch case   46:*/		if ( regs.CR[6].eq ) { return 0x820E1F98;  }
		/* 820E1E4Ch case   46:*/		return 0x820E1E50;
		  /* 820E1E50h */ case   47:  		/* li R7, 0 */
		/* 820E1E50h case   47:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E1E50h case   47:*/		return 0x820E1E54;
		  /* 820E1E54h */ case   48:  		/* lwz R4, <#[R1 + 136]> */
		/* 820E1E54h case   48:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 820E1E54h case   48:*/		return 0x820E1E58;
		  /* 820E1E58h */ case   49:  		/* li R6, 32 */
		/* 820E1E58h case   49:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820E1E58h case   49:*/		return 0x820E1E5C;
		  /* 820E1E5Ch */ case   50:  		/* addi R5, R1, 192 */
		/* 820E1E5Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820E1E5Ch case   50:*/		return 0x820E1E60;
		  /* 820E1E60h */ case   51:  		/* mr R3, R31 */
		/* 820E1E60h case   51:*/		regs.R3 = regs.R31;
		/* 820E1E60h case   51:*/		return 0x820E1E64;
		  /* 820E1E64h */ case   52:  		/* bl -31500 */
		/* 820E1E64h case   52:*/		regs.LR = 0x820E1E68; return 0x820DA358;
		/* 820E1E64h case   52:*/		return 0x820E1E68;
		  /* 820E1E68h */ case   53:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E1E68h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1E68h case   53:*/		return 0x820E1E6C;
		  /* 820E1E6Ch */ case   54:  		/* cmplwi CR6, R11, 0 */
		/* 820E1E6Ch case   54:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E1E6Ch case   54:*/		return 0x820E1E70;
		  /* 820E1E70h */ case   55:  		/* bc 4, CR6_GT, 32 */
		/* 820E1E70h case   55:*/		if ( !regs.CR[6].gt ) { return 0x820E1E90;  }
		/* 820E1E70h case   55:*/		return 0x820E1E74;
		  /* 820E1E74h */ case   56:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E1E74h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1E74h case   56:*/		return 0x820E1E78;
		  /* 820E1E78h */ case   57:  		/* cmplw CR6, R11, R25 */
		/* 820E1E78h case   57:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820E1E78h case   57:*/		return 0x820E1E7C;
		  /* 820E1E7Ch */ case   58:  		/* bc 12, CR6_EQ, 96 */
		/* 820E1E7Ch case   58:*/		if ( regs.CR[6].eq ) { return 0x820E1EDC;  }
		/* 820E1E7Ch case   58:*/		return 0x820E1E80;
		  /* 820E1E80h */ case   59:  		/* mr R3, R31 */
		/* 820E1E80h case   59:*/		regs.R3 = regs.R31;
		/* 820E1E80h case   59:*/		return 0x820E1E84;
		  /* 820E1E84h */ case   60:  		/* bl -31116 */
		/* 820E1E84h case   60:*/		regs.LR = 0x820E1E88; return 0x820DA4F8;
		/* 820E1E84h case   60:*/		return 0x820E1E88;
		  /* 820E1E88h */ case   61:  		/* cmpwi CR0, R3, 0 */
		/* 820E1E88h case   61:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1E88h case   61:*/		return 0x820E1E8C;
		  /* 820E1E8Ch */ case   62:  		/* bc 12, CR0_LT, 448 */
		/* 820E1E8Ch case   62:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1E8Ch case   62:*/		return 0x820E1E90;
	}
	return 0x820E1E90;
} // Block from 820E1D94h-820E1E90h (63 instructions)

//////////////////////////////////////////////////////
// Block at 820E1E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1E90);
		  /* 820E1E90h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E1E90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1E90h case    0:*/		return 0x820E1E94;
		  /* 820E1E94h */ case    1:  		/* cmplw CR6, R11, R25 */
		/* 820E1E94h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820E1E94h case    1:*/		return 0x820E1E98;
		  /* 820E1E98h */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 820E1E98h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E1EDC;  }
		/* 820E1E98h case    2:*/		return 0x820E1E9C;
		  /* 820E1E9Ch */ case    3:  		/* lwz R10, <#[R1 + 132]> */
		/* 820E1E9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 820E1E9Ch case    3:*/		return 0x820E1EA0;
		  /* 820E1EA0h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 820E1EA0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E1EA0h case    4:*/		return 0x820E1EA4;
		  /* 820E1EA4h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 820E1EA4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E1EB8;  }
		/* 820E1EA4h case    5:*/		return 0x820E1EA8;
		  /* 820E1EA8h */ case    6:  		/* lwz R10, <#[R31 + 1812]> */
		/* 820E1EA8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1EA8h case    6:*/		return 0x820E1EAC;
		  /* 820E1EACh */ case    7:  		/* mr R6, R30 */
		/* 820E1EACh case    7:*/		regs.R6 = regs.R30;
		/* 820E1EACh case    7:*/		return 0x820E1EB0;
		  /* 820E1EB0h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 820E1EB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E1EB0h case    8:*/		return 0x820E1EB4;
		  /* 820E1EB4h */ case    9:  		/* bc 4, CR6_GT, 8 */
		/* 820E1EB4h case    9:*/		if ( !regs.CR[6].gt ) { return 0x820E1EBC;  }
		/* 820E1EB4h case    9:*/		return 0x820E1EB8;
	}
	return 0x820E1EB8;
} // Block from 820E1E90h-820E1EB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E1EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1EB8);
		  /* 820E1EB8h */ case    0:  		/* li R6, 1 */
		/* 820E1EB8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E1EB8h case    0:*/		return 0x820E1EBC;
	}
	return 0x820E1EBC;
} // Block from 820E1EB8h-820E1EBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E1EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1EBC);
		  /* 820E1EBCh */ case    0:  		/* addi R7, R1, 160 */
		/* 820E1EBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820E1EBCh case    0:*/		return 0x820E1EC0;
		  /* 820E1EC0h */ case    1:  		/* mr R5, R11 */
		/* 820E1EC0h case    1:*/		regs.R5 = regs.R11;
		/* 820E1EC0h case    1:*/		return 0x820E1EC4;
		  /* 820E1EC4h */ case    2:  		/* addi R4, R1, 192 */
		/* 820E1EC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820E1EC4h case    2:*/		return 0x820E1EC8;
		  /* 820E1EC8h */ case    3:  		/* mr R3, R31 */
		/* 820E1EC8h case    3:*/		regs.R3 = regs.R31;
		/* 820E1EC8h case    3:*/		return 0x820E1ECC;
		  /* 820E1ECCh */ case    4:  		/* bl -30356 */
		/* 820E1ECCh case    4:*/		regs.LR = 0x820E1ED0; return 0x820DA838;
		/* 820E1ECCh case    4:*/		return 0x820E1ED0;
		  /* 820E1ED0h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E1ED0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1ED0h case    5:*/		return 0x820E1ED4;
		  /* 820E1ED4h */ case    6:  		/* bc 12, CR0_LT, 376 */
		/* 820E1ED4h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1ED4h case    6:*/		return 0x820E1ED8;
		  /* 820E1ED8h */ case    7:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E1ED8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1ED8h case    7:*/		return 0x820E1EDC;
	}
	return 0x820E1EDC;
} // Block from 820E1EBCh-820E1EDCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E1EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1EDC);
		  /* 820E1EDCh */ case    0:  		/* lwz R10, <#[R31 + 1812]> */
		/* 820E1EDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1EDCh case    0:*/		return 0x820E1EE0;
		  /* 820E1EE0h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 820E1EE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E1EE0h case    1:*/		return 0x820E1EE4;
		  /* 820E1EE4h */ case    2:  		/* bc 4, CR6_GT, 52 */
		/* 820E1EE4h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820E1F18;  }
		/* 820E1EE4h case    2:*/		return 0x820E1EE8;
		  /* 820E1EE8h */ case    3:  		/* subf R11, R11, R25 */
		/* 820E1EE8h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 820E1EE8h case    3:*/		return 0x820E1EEC;
		  /* 820E1EECh */ case    4:  		/* lwz R5, <#[R1 + 132]> */
		/* 820E1EECh case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820E1EECh case    4:*/		return 0x820E1EF0;
		  /* 820E1EF0h */ case    5:  		/* addi R10, R1, 160 */
		/* 820E1EF0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 820E1EF0h case    5:*/		return 0x820E1EF4;
		  /* 820E1EF4h */ case    6:  		/* addic R11, R11, -1 */
		/* 820E1EF4h case    6:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820E1EF4h case    6:*/		return 0x820E1EF8;
		  /* 820E1EF8h */ case    7:  		/* addi R4, R1, 192 */
		/* 820E1EF8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820E1EF8h case    7:*/		return 0x820E1EFC;
		  /* 820E1EFCh */ case    8:  		/* subfe R11, R11, R11 */
		/* 820E1EFCh case    8:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820E1EFCh case    8:*/		return 0x820E1F00;
		  /* 820E1F00h */ case    9:  		/* mr R3, R31 */
		/* 820E1F00h case    9:*/		regs.R3 = regs.R31;
		/* 820E1F00h case    9:*/		return 0x820E1F04;
		  /* 820E1F04h */ case   10:  		/* and R6, R11, R10 */
		/* 820E1F04h case   10:*/		cpu::op::and<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 820E1F04h case   10:*/		return 0x820E1F08;
		  /* 820E1F08h */ case   11:  		/* bl -30104 */
		/* 820E1F08h case   11:*/		regs.LR = 0x820E1F0C; return 0x820DA970;
		/* 820E1F08h case   11:*/		return 0x820E1F0C;
		  /* 820E1F0Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820E1F0Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1F0Ch case   12:*/		return 0x820E1F10;
		  /* 820E1F10h */ case   13:  		/* bc 12, CR0_LT, 316 */
		/* 820E1F10h case   13:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1F10h case   13:*/		return 0x820E1F14;
		  /* 820E1F14h */ case   14:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E1F14h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1F14h case   14:*/		return 0x820E1F18;
	}
	return 0x820E1F18;
} // Block from 820E1EDCh-820E1F18h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E1F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1F18);
		  /* 820E1F18h */ case    0:  		/* lwz R5, <#[R1 + 132]> */
		/* 820E1F18h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820E1F18h case    0:*/		return 0x820E1F1C;
		  /* 820E1F1Ch */ case    1:  		/* cmplwi CR6, R5, 0 */
		/* 820E1F1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E1F1Ch case    1:*/		return 0x820E1F20;
		  /* 820E1F20h */ case    2:  		/* bc 12, CR6_EQ, 276 */
		/* 820E1F20h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E2034;  }
		/* 820E1F20h case    2:*/		return 0x820E1F24;
		  /* 820E1F24h */ case    3:  		/* cmpwi CR6, R24, 0 */
		/* 820E1F24h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820E1F24h case    3:*/		return 0x820E1F28;
		  /* 820E1F28h */ case    4:  		/* bc 12, CR6_EQ, 52 */
		/* 820E1F28h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E1F5C;  }
		/* 820E1F28h case    4:*/		return 0x820E1F2C;
		  /* 820E1F2Ch */ case    5:  		/* cmplw CR6, R11, R25 */
		/* 820E1F2Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820E1F2Ch case    5:*/		return 0x820E1F30;
		  /* 820E1F30h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 820E1F30h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E1F40;  }
		/* 820E1F30h case    6:*/		return 0x820E1F34;
		  /* 820E1F34h */ case    7:  		/* lwz R10, <#[R31 + 1812]> */
		/* 820E1F34h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1F34h case    7:*/		return 0x820E1F38;
		  /* 820E1F38h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 820E1F38h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E1F38h case    8:*/		return 0x820E1F3C;
		  /* 820E1F3Ch */ case    9:  		/* bc 4, CR6_GT, 32 */
		/* 820E1F3Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x820E1F5C;  }
		/* 820E1F3Ch case    9:*/		return 0x820E1F40;
	}
	return 0x820E1F40;
} // Block from 820E1F18h-820E1F40h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E1F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1F40);
		  /* 820E1F40h */ case    0:  		/* mr R4, R5 */
		/* 820E1F40h case    0:*/		regs.R4 = regs.R5;
		/* 820E1F40h case    0:*/		return 0x820E1F44;
		  /* 820E1F44h */ case    1:  		/* mr R3, R31 */
		/* 820E1F44h case    1:*/		regs.R3 = regs.R31;
		/* 820E1F44h case    1:*/		return 0x820E1F48;
		  /* 820E1F48h */ case    2:  		/* bl -31120 */
		/* 820E1F48h case    2:*/		regs.LR = 0x820E1F4C; return 0x820DA5B8;
		/* 820E1F48h case    2:*/		return 0x820E1F4C;
		  /* 820E1F4Ch */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820E1F4Ch case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1F4Ch case    3:*/		return 0x820E1F50;
		  /* 820E1F50h */ case    4:  		/* bc 12, CR0_LT, 252 */
		/* 820E1F50h case    4:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1F50h case    4:*/		return 0x820E1F54;
		  /* 820E1F54h */ case    5:  		/* lwz R5, <#[R1 + 132]> */
		/* 820E1F54h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820E1F54h case    5:*/		return 0x820E1F58;
		  /* 820E1F58h */ case    6:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E1F58h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E1F58h case    6:*/		return 0x820E1F5C;
	}
	return 0x820E1F5C;
} // Block from 820E1F40h-820E1F5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E1F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1F5C);
		  /* 820E1F5Ch */ case    0:  		/* mr R8, R30 */
		/* 820E1F5Ch case    0:*/		regs.R8 = regs.R30;
		/* 820E1F5Ch case    0:*/		return 0x820E1F60;
		  /* 820E1F60h */ case    1:  		/* cmplw CR6, R11, R25 */
		/* 820E1F60h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820E1F60h case    1:*/		return 0x820E1F64;
		  /* 820E1F64h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820E1F64h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E1F78;  }
		/* 820E1F64h case    2:*/		return 0x820E1F68;
		  /* 820E1F68h */ case    3:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E1F68h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E1F68h case    3:*/		return 0x820E1F6C;
		  /* 820E1F6Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820E1F6Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E1F6Ch case    4:*/		return 0x820E1F70;
		  /* 820E1F70h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 820E1F70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E1F78;  }
		/* 820E1F70h case    5:*/		return 0x820E1F74;
		  /* 820E1F74h */ case    6:  		/* addi R8, R1, 160 */
		/* 820E1F74h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 820E1F74h case    6:*/		return 0x820E1F78;
	}
	return 0x820E1F78;
} // Block from 820E1F5Ch-820E1F78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E1F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1F78);
		  /* 820E1F78h */ case    0:  		/* li R7, 0 */
		/* 820E1F78h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E1F78h case    0:*/		return 0x820E1F7C;
		  /* 820E1F7Ch */ case    1:  		/* mr R6, R24 */
		/* 820E1F7Ch case    1:*/		regs.R6 = regs.R24;
		/* 820E1F7Ch case    1:*/		return 0x820E1F80;
		  /* 820E1F80h */ case    2:  		/* addi R4, R1, 192 */
		/* 820E1F80h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820E1F80h case    2:*/		return 0x820E1F84;
		  /* 820E1F84h */ case    3:  		/* mr R3, R31 */
		/* 820E1F84h case    3:*/		regs.R3 = regs.R31;
		/* 820E1F84h case    3:*/		return 0x820E1F88;
		  /* 820E1F88h */ case    4:  		/* bl -30928 */
		/* 820E1F88h case    4:*/		regs.LR = 0x820E1F8C; return 0x820DA6B8;
		/* 820E1F88h case    4:*/		return 0x820E1F8C;
		  /* 820E1F8Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E1F8Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1F8Ch case    5:*/		return 0x820E1F90;
		  /* 820E1F90h */ case    6:  		/* bc 4, CR0_LT, 164 */
		/* 820E1F90h case    6:*/		if ( !regs.CR[0].lt ) { return 0x820E2034;  }
		/* 820E1F90h case    6:*/		return 0x820E1F94;
		  /* 820E1F94h */ case    7:  		/* b 184 */
		/* 820E1F94h case    7:*/		return 0x820E204C;
		/* 820E1F94h case    7:*/		return 0x820E1F98;
	}
	return 0x820E1F98;
} // Block from 820E1F78h-820E1F98h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E1F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1F98);
		  /* 820E1F98h */ case    0:  		/* lwz R11, <#[R1 + 140]> */
		/* 820E1F98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820E1F98h case    0:*/		return 0x820E1F9C;
		  /* 820E1F9Ch */ case    1:  		/* lis R10, 228 */
		/* 820E1F9Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xE4);
		/* 820E1F9Ch case    1:*/		return 0x820E1FA0;
		  /* 820E1FA0h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 820E1FA0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E1FA0h case    2:*/		return 0x820E1FA4;
		  /* 820E1FA4h */ case    3:  		/* bc 4, CR6_EQ, 144 */
		/* 820E1FA4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E2034;  }
		/* 820E1FA4h case    3:*/		return 0x820E1FA8;
		  /* 820E1FA8h */ case    4:  		/* lwz R11, <#[R1 + 144]> */
		/* 820E1FA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820E1FA8h case    4:*/		return 0x820E1FAC;
		  /* 820E1FACh */ case    5:  		/* rlwinm. R11, R11, 0, 4, 7 */
		/* 820E1FACh case    5:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R11,regs.R11);
		/* 820E1FACh case    5:*/		return 0x820E1FB0;
		  /* 820E1FB0h */ case    6:  		/* bc 4, CR0_EQ, 132 */
		/* 820E1FB0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820E2034;  }
		/* 820E1FB0h case    6:*/		return 0x820E1FB4;
		  /* 820E1FB4h */ case    7:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E1FB4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E1FB4h case    7:*/		return 0x820E1FB8;
		  /* 820E1FB8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820E1FB8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E1FB8h case    8:*/		return 0x820E1FBC;
		  /* 820E1FBCh */ case    9:  		/* bc 4, CR6_GT, 120 */
		/* 820E1FBCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x820E2034;  }
		/* 820E1FBCh case    9:*/		return 0x820E1FC0;
		  /* 820E1FC0h */ case   10:  		/* lis R11, -32254 */
		/* 820E1FC0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E1FC0h case   10:*/		return 0x820E1FC4;
		  /* 820E1FC4h */ case   11:  		/* addi R29, R11, -26432 */
		/* 820E1FC4h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF98C0);
		/* 820E1FC4h case   11:*/		return 0x820E1FC8;
		  /* 820E1FC8h */ case   12:  		/* mr R3, R31 */
		/* 820E1FC8h case   12:*/		regs.R3 = regs.R31;
		/* 820E1FC8h case   12:*/		return 0x820E1FCC;
		  /* 820E1FCCh */ case   13:  		/* bl -32284 */
		/* 820E1FCCh case   13:*/		regs.LR = 0x820E1FD0; return 0x820DA1B0;
		/* 820E1FCCh case   13:*/		return 0x820E1FD0;
		  /* 820E1FD0h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E1FD0h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E1FD0h case   14:*/		return 0x820E1FD4;
		  /* 820E1FD4h */ case   15:  		/* bc 12, CR0_LT, 120 */
		/* 820E1FD4h case   15:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E1FD4h case   15:*/		return 0x820E1FD8;
		  /* 820E1FD8h */ case   16:  		/* mr R7, R30 */
		/* 820E1FD8h case   16:*/		regs.R7 = regs.R30;
		/* 820E1FD8h case   16:*/		return 0x820E1FDC;
		  /* 820E1FDCh */ case   17:  		/* mr R6, R30 */
		/* 820E1FDCh case   17:*/		regs.R6 = regs.R30;
		/* 820E1FDCh case   17:*/		return 0x820E1FE0;
		  /* 820E1FE0h */ case   18:  		/* addi R5, R1, 224 */
		/* 820E1FE0h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 820E1FE0h case   18:*/		return 0x820E1FE4;
		  /* 820E1FE4h */ case   19:  		/* li R4, 32 */
		/* 820E1FE4h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E1FE4h case   19:*/		return 0x820E1FE8;
		  /* 820E1FE8h */ case   20:  		/* addi R3, R1, 288 */
		/* 820E1FE8h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 820E1FE8h case   20:*/		return 0x820E1FEC;
		  /* 820E1FECh */ case   21:  		/* bl -260524 */
		/* 820E1FECh case   21:*/		regs.LR = 0x820E1FF0; return 0x820A2640;
		/* 820E1FECh case   21:*/		return 0x820E1FF0;
		  /* 820E1FF0h */ case   22:  		/* mr R7, R30 */
		/* 820E1FF0h case   22:*/		regs.R7 = regs.R30;
		/* 820E1FF0h case   22:*/		return 0x820E1FF4;
		  /* 820E1FF4h */ case   23:  		/* mr R6, R30 */
		/* 820E1FF4h case   23:*/		regs.R6 = regs.R30;
		/* 820E1FF4h case   23:*/		return 0x820E1FF8;
	}
	return 0x820E1FF8;
} // Block from 820E1F98h-820E1FF8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E1FF8h
// Function '?EmitANDIFBOOL@C30SWProgram@D3DXShader@@MAAJH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E1FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E1FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E1FF8);
		  /* 820E1FF8h */ case    0:  		/* addi R5, R1, 160 */
		/* 820E1FF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820E1FF8h case    0:*/		return 0x820E1FFC;
		  /* 820E1FFCh */ case    1:  		/* li R4, 32 */
		/* 820E1FFCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E1FFCh case    1:*/		return 0x820E2000;
		  /* 820E2000h */ case    2:  		/* addi R3, R1, 256 */
		/* 820E2000h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 820E2000h case    2:*/		return 0x820E2004;
		  /* 820E2004h */ case    3:  		/* bl -260548 */
		/* 820E2004h case    3:*/		regs.LR = 0x820E2008; return 0x820A2640;
		/* 820E2004h case    3:*/		return 0x820E2008;
		  /* 820E2008h */ case    4:  		/* mr R4, R29 */
		/* 820E2008h case    4:*/		regs.R4 = regs.R29;
		/* 820E2008h case    4:*/		return 0x820E200C;
		  /* 820E200Ch */ case    5:  		/* addi R6, R1, 256 */
		/* 820E200Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x100);
		/* 820E200Ch case    5:*/		return 0x820E2010;
		  /* 820E2010h */ case    6:  		/* addi R5, R1, 288 */
		/* 820E2010h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 820E2010h case    6:*/		return 0x820E2014;
		  /* 820E2014h */ case    7:  		/* mr R3, R31 */
		/* 820E2014h case    7:*/		regs.R3 = regs.R31;
		/* 820E2014h case    7:*/		return 0x820E2018;
		  /* 820E2018h */ case    8:  		/* bl -32576 */
		/* 820E2018h case    8:*/		regs.LR = 0x820E201C; return 0x820DA0D8;
		/* 820E2018h case    8:*/		return 0x820E201C;
		  /* 820E201Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820E201Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E201Ch case    9:*/		return 0x820E2020;
		  /* 820E2020h */ case   10:  		/* bc 12, CR0_LT, 44 */
		/* 820E2020h case   10:*/		if ( regs.CR[0].lt ) { return 0x820E204C;  }
		/* 820E2020h case   10:*/		return 0x820E2024;
		  /* 820E2024h */ case   11:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E2024h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E2024h case   11:*/		return 0x820E2028;
		  /* 820E2028h */ case   12:  		/* addi R30, R30, 1 */
		/* 820E2028h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E2028h case   12:*/		return 0x820E202C;
		  /* 820E202Ch */ case   13:  		/* cmplw CR6, R30, R11 */
		/* 820E202Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E202Ch case   13:*/		return 0x820E2030;
		  /* 820E2030h */ case   14:  		/* bc 12, CR6_LT, -104 */
		/* 820E2030h case   14:*/		if ( regs.CR[6].lt ) { return 0x820E1FC8;  }
		/* 820E2030h case   14:*/		return 0x820E2034;
	}
	return 0x820E2034;
} // Block from 820E1FF8h-820E2034h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E2034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2034);
		  /* 820E2034h */ case    0:  		/* lis R11, -32254 */
		/* 820E2034h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2034h case    0:*/		return 0x820E2038;
		  /* 820E2038h */ case    1:  		/* mr R3, R31 */
		/* 820E2038h case    1:*/		regs.R3 = regs.R31;
		/* 820E2038h case    1:*/		return 0x820E203C;
		  /* 820E203Ch */ case    2:  		/* addi R4, R11, -30604 */
		/* 820E203Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 820E203Ch case    2:*/		return 0x820E2040;
		  /* 820E2040h */ case    3:  		/* bl -32616 */
		/* 820E2040h case    3:*/		regs.LR = 0x820E2044; return 0x820DA0D8;
		/* 820E2040h case    3:*/		return 0x820E2044;
		  /* 820E2044h */ case    4:  		/* srawi R11, R3, 31 */
		/* 820E2044h case    4:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820E2044h case    4:*/		return 0x820E2048;
		  /* 820E2048h */ case    5:  		/* and R3, R11, R3 */
		/* 820E2048h case    5:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820E2048h case    5:*/		return 0x820E204C;
	}
	return 0x820E204C;
} // Block from 820E2034h-820E204Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E204Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E204C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E204C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E204C);
		  /* 820E204Ch */ case    0:  		/* addi R1, R1, 400 */
		/* 820E204Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 820E204Ch case    0:*/		return 0x820E2050;
		  /* 820E2050h */ case    1:  		/* b -331192 */
		/* 820E2050h case    1:*/		return 0x82091298;
		/* 820E2050h case    1:*/		return 0x820E2054;
		  /* 820E2054h */ case    2:  		/* nop */
		/* 820E2054h case    2:*/		cpu::op::nop();
		/* 820E2054h case    2:*/		return 0x820E2058;
	}
	return 0x820E2058;
} // Block from 820E204Ch-820E2058h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E2058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2058);
		  /* 820E2058h */ case    0:  		/* mfspr R12, LR */
		/* 820E2058h case    0:*/		regs.R12 = regs.LR;
		/* 820E2058h case    0:*/		return 0x820E205C;
		  /* 820E205Ch */ case    1:  		/* bl -331288 */
		/* 820E205Ch case    1:*/		regs.LR = 0x820E2060; return 0x82091244;
		/* 820E205Ch case    1:*/		return 0x820E2060;
		  /* 820E2060h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 820E2060h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 820E2060h case    2:*/		return 0x820E2064;
		  /* 820E2064h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E2064h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E2064h case    3:*/		return 0x820E2068;
		  /* 820E2068h */ case    4:  		/* addi R7, R1, 188 */
		/* 820E2068h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xBC);
		/* 820E2068h case    4:*/		return 0x820E206C;
		  /* 820E206Ch */ case    5:  		/* lwz R10, <#[R3]> */
		/* 820E206Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 820E206Ch case    5:*/		return 0x820E2070;
		  /* 820E2070h */ case    6:  		/* addi R6, R1, 132 */
		/* 820E2070h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x84);
		/* 820E2070h case    6:*/		return 0x820E2074;
		  /* 820E2074h */ case    7:  		/* lwz R9, <#[R3 + 20]> */
		/* 820E2074h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820E2074h case    7:*/		return 0x820E2078;
		  /* 820E2078h */ case    8:  		/* addi R5, R1, 180 */
		/* 820E2078h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB4);
		/* 820E2078h case    8:*/		return 0x820E207C;
		  /* 820E207Ch */ case    9:  		/* mr R31, R3 */
		/* 820E207Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E207Ch case    9:*/		return 0x820E2080;
		  /* 820E2080h */ case   10:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E2080h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E2080h case   10:*/		return 0x820E2084;
		  /* 820E2084h */ case   11:  		/* lwz R10, <#[R10 + 320]> */
		/* 820E2084h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000140) );
		/* 820E2084h case   11:*/		return 0x820E2088;
		  /* 820E2088h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820E2088h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E2088h case   12:*/		return 0x820E208C;
		  /* 820E208Ch */ case   13:  		/* mtspr CTR, R10 */
		/* 820E208Ch case   13:*/		regs.CTR = regs.R10;
		/* 820E208Ch case   13:*/		return 0x820E2090;
		  /* 820E2090h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E2090h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E2090h case   14:*/		return 0x820E2094;
		  /* 820E2094h */ case   15:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E2094h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E2094h case   15:*/		return 0x820E2098;
		  /* 820E2098h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 820E2098h case   16:*/		if ( 1 ) { regs.LR = 0x820E209C; return (uint32)regs.CTR; }
		/* 820E2098h case   16:*/		return 0x820E209C;
		  /* 820E209Ch */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820E209Ch case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E209Ch case   17:*/		return 0x820E20A0;
		  /* 820E20A0h */ case   18:  		/* bc 12, CR0_LT, 1500 */
		/* 820E20A0h case   18:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E20A0h case   18:*/		return 0x820E20A4;
		  /* 820E20A4h */ case   19:  		/* lwz R11, <#[R31]> */
		/* 820E20A4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E20A4h case   19:*/		return 0x820E20A8;
		  /* 820E20A8h */ case   20:  		/* addi R6, R1, 128 */
		/* 820E20A8h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E20A8h case   20:*/		return 0x820E20AC;
		  /* 820E20ACh */ case   21:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E20ACh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E20ACh case   21:*/		return 0x820E20B0;
		  /* 820E20B0h */ case   22:  		/* mr R3, R31 */
		/* 820E20B0h case   22:*/		regs.R3 = regs.R31;
		/* 820E20B0h case   22:*/		return 0x820E20B4;
		  /* 820E20B4h */ case   23:  		/* lwz R7, <#[R1 + 188]> */
		/* 820E20B4h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000BC) );
		/* 820E20B4h case   23:*/		return 0x820E20B8;
		  /* 820E20B8h */ case   24:  		/* lwz R11, <#[R11 + 324]> */
		/* 820E20B8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 820E20B8h case   24:*/		return 0x820E20BC;
		  /* 820E20BCh */ case   25:  		/* lwz R5, <#[R10 + 12]> */
		/* 820E20BCh case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E20BCh case   25:*/		return 0x820E20C0;
		  /* 820E20C0h */ case   26:  		/* lwz R4, <#[R10 + 16]> */
		/* 820E20C0h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 820E20C0h case   26:*/		return 0x820E20C4;
		  /* 820E20C4h */ case   27:  		/* mtspr CTR, R11 */
		/* 820E20C4h case   27:*/		regs.CTR = regs.R11;
		/* 820E20C4h case   27:*/		return 0x820E20C8;
		  /* 820E20C8h */ case   28:  		/* bcctrl 20, CR0_LT */
		/* 820E20C8h case   28:*/		if ( 1 ) { regs.LR = 0x820E20CC; return (uint32)regs.CTR; }
		/* 820E20C8h case   28:*/		return 0x820E20CC;
		  /* 820E20CCh */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 820E20CCh case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E20CCh case   29:*/		return 0x820E20D0;
		  /* 820E20D0h */ case   30:  		/* bc 12, CR0_LT, 1452 */
		/* 820E20D0h case   30:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E20D0h case   30:*/		return 0x820E20D4;
		  /* 820E20D4h */ case   31:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E20D4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E20D4h case   31:*/		return 0x820E20D8;
		  /* 820E20D8h */ case   32:  		/* lis R29, 15 */
		/* 820E20D8h case   32:*/		cpu::op::lis<0>(regs,&regs.R29,0xF);
		/* 820E20D8h case   32:*/		return 0x820E20DC;
		  /* 820E20DCh */ case   33:  		/* li R24, 0 */
		/* 820E20DCh case   33:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820E20DCh case   33:*/		return 0x820E20E0;
		  /* 820E20E0h */ case   34:  		/* cmplw CR6, R11, R29 */
		/* 820E20E0h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 820E20E0h case   34:*/		return 0x820E20E4;
		  /* 820E20E4h */ case   35:  		/* bc 4, CR6_EQ, 32 */
		/* 820E20E4h case   35:*/		if ( !regs.CR[6].eq ) { return 0x820E2104;  }
		/* 820E20E4h case   35:*/		return 0x820E20E8;
		  /* 820E20E8h */ case   36:  		/* lwz R11, <#[R1 + 132]> */
		/* 820E20E8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820E20E8h case   36:*/		return 0x820E20EC;
		  /* 820E20ECh */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 820E20ECh case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E20ECh case   37:*/		return 0x820E20F0;
		  /* 820E20F0h */ case   38:  		/* bc 4, CR6_EQ, 20 */
		/* 820E20F0h case   38:*/		if ( !regs.CR[6].eq ) { return 0x820E2104;  }
		/* 820E20F0h case   38:*/		return 0x820E20F4;
		  /* 820E20F4h */ case   39:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E20F4h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E20F4h case   39:*/		return 0x820E20F8;
		  /* 820E20F8h */ case   40:  		/* mr R28, R24 */
		/* 820E20F8h case   40:*/		regs.R28 = regs.R24;
		/* 820E20F8h case   40:*/		return 0x820E20FC;
		  /* 820E20FCh */ case   41:  		/* cmplwi CR6, R11, 0 */
		/* 820E20FCh case   41:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E20FCh case   41:*/		return 0x820E2100;
		  /* 820E2100h */ case   42:  		/* bc 4, CR6_GT, 8 */
		/* 820E2100h case   42:*/		if ( !regs.CR[6].gt ) { return 0x820E2108;  }
		/* 820E2100h case   42:*/		return 0x820E2104;
	}
	return 0x820E2104;
} // Block from 820E2058h-820E2104h (43 instructions)

//////////////////////////////////////////////////////
// Block at 820E2104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2104);
		  /* 820E2104h */ case    0:  		/* li R28, 1 */
		/* 820E2104h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820E2104h case    0:*/		return 0x820E2108;
	}
	return 0x820E2108;
} // Block from 820E2104h-820E2108h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E2108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2108);
		  /* 820E2108h */ case    0:  		/* li R7, 0 */
		/* 820E2108h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2108h case    0:*/		return 0x820E210C;
		  /* 820E210Ch */ case    1:  		/* lwz R4, <#[R1 + 180]> */
		/* 820E210Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 820E210Ch case    1:*/		return 0x820E2110;
		  /* 820E2110h */ case    2:  		/* li R6, 32 */
		/* 820E2110h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820E2110h case    2:*/		return 0x820E2114;
		  /* 820E2114h */ case    3:  		/* addi R5, R1, 240 */
		/* 820E2114h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820E2114h case    3:*/		return 0x820E2118;
		  /* 820E2118h */ case    4:  		/* mr R3, R31 */
		/* 820E2118h case    4:*/		regs.R3 = regs.R31;
		/* 820E2118h case    4:*/		return 0x820E211C;
		  /* 820E211Ch */ case    5:  		/* bl -32196 */
		/* 820E211Ch case    5:*/		regs.LR = 0x820E2120; return 0x820DA358;
		/* 820E211Ch case    5:*/		return 0x820E2120;
		  /* 820E2120h */ case    6:  		/* lis R11, -32254 */
		/* 820E2120h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2120h case    6:*/		return 0x820E2124;
		  /* 820E2124h */ case    7:  		/* lis R10, -32254 */
		/* 820E2124h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E2124h case    7:*/		return 0x820E2128;
		  /* 820E2128h */ case    8:  		/* lis R9, -32254 */
		/* 820E2128h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 820E2128h case    8:*/		return 0x820E212C;
		  /* 820E212Ch */ case    9:  		/* li R23, 38 */
		/* 820E212Ch case    9:*/		cpu::op::li<0>(regs,&regs.R23,0x26);
		/* 820E212Ch case    9:*/		return 0x820E2130;
		  /* 820E2130h */ case   10:  		/* cmpwi CR6, R28, 0 */
		/* 820E2130h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820E2130h case   10:*/		return 0x820E2134;
		  /* 820E2134h */ case   11:  		/* addi R25, R11, -30768 */
		/* 820E2134h case   11:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFF87D0);
		/* 820E2134h case   11:*/		return 0x820E2138;
		  /* 820E2138h */ case   12:  		/* addi R26, R10, -30692 */
		/* 820E2138h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFF881C);
		/* 820E2138h case   12:*/		return 0x820E213C;
		  /* 820E213Ch */ case   13:  		/* addi R27, R9, -30488 */
		/* 820E213Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFF88E8);
		/* 820E213Ch case   13:*/		return 0x820E2140;
	}
	return 0x820E2140;
} // Block from 820E2108h-820E2140h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E2140h
// Function '?EmitGeneralLOOP@C30SWProgram@D3DXShader@@MAAJH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2140);
		  /* 820E2140h */ case    0:  		/* bc 12, CR6_EQ, 176 */
		/* 820E2140h case    0:*/		if ( regs.CR[6].eq ) { return 0x820E21F0;  }
		/* 820E2140h case    0:*/		return 0x820E2144;
		  /* 820E2144h */ case    1:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E2144h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E2144h case    1:*/		return 0x820E2148;
		  /* 820E2148h */ case    2:  		/* mr R30, R24 */
		/* 820E2148h case    2:*/		regs.R30 = regs.R24;
		/* 820E2148h case    2:*/		return 0x820E214C;
		  /* 820E214Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820E214Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E214Ch case    3:*/		return 0x820E2150;
		  /* 820E2150h */ case    4:  		/* bc 4, CR6_GT, 160 */
		/* 820E2150h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820E21F0;  }
		/* 820E2150h case    4:*/		return 0x820E2154;
		  /* 820E2154h */ case    5:  		/* mr R3, R31 */
		/* 820E2154h case    5:*/		regs.R3 = regs.R31;
		/* 820E2154h case    5:*/		return 0x820E2158;
		  /* 820E2158h */ case    6:  		/* bl -32680 */
		/* 820E2158h case    6:*/		regs.LR = 0x820E215C; return 0x820DA1B0;
		/* 820E2158h case    6:*/		return 0x820E215C;
		  /* 820E215Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820E215Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E215Ch case    7:*/		return 0x820E2160;
		  /* 820E2160h */ case    8:  		/* bc 12, CR0_LT, 1308 */
		/* 820E2160h case    8:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2160h case    8:*/		return 0x820E2164;
		  /* 820E2164h */ case    9:  		/* mr R7, R30 */
		/* 820E2164h case    9:*/		regs.R7 = regs.R30;
		/* 820E2164h case    9:*/		return 0x820E2168;
		  /* 820E2168h */ case   10:  		/* mr R6, R30 */
		/* 820E2168h case   10:*/		regs.R6 = regs.R30;
		/* 820E2168h case   10:*/		return 0x820E216C;
		  /* 820E216Ch */ case   11:  		/* addi R5, R1, 240 */
		/* 820E216Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820E216Ch case   11:*/		return 0x820E2170;
		  /* 820E2170h */ case   12:  		/* li R4, 31 */
		/* 820E2170h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 820E2170h case   12:*/		return 0x820E2174;
		  /* 820E2174h */ case   13:  		/* addi R3, R1, 209 */
		/* 820E2174h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD1);
		/* 820E2174h case   13:*/		return 0x820E2178;
		  /* 820E2178h */ case   14:  		/* bl -260920 */
		/* 820E2178h case   14:*/		regs.LR = 0x820E217C; return 0x820A2640;
		/* 820E2178h case   14:*/		return 0x820E217C;
		  /* 820E217Ch */ case   15:  		/* stb R23, <#[R1 + 208]> */
		/* 820E217Ch case   15:*/		cpu::mem::store8( regs, regs.R23, (uint32)(regs.R1 + 0x000000D0) );
		/* 820E217Ch case   15:*/		return 0x820E2180;
		  /* 820E2180h */ case   16:  		/* mr R5, R27 */
		/* 820E2180h case   16:*/		regs.R5 = regs.R27;
		/* 820E2180h case   16:*/		return 0x820E2184;
		  /* 820E2184h */ case   17:  		/* mr R6, R30 */
		/* 820E2184h case   17:*/		regs.R6 = regs.R30;
		/* 820E2184h case   17:*/		return 0x820E2188;
		  /* 820E2188h */ case   18:  		/* li R4, 32 */
		/* 820E2188h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E2188h case   18:*/		return 0x820E218C;
		  /* 820E218Ch */ case   19:  		/* addi R3, R1, 144 */
		/* 820E218Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E218Ch case   19:*/		return 0x820E2190;
		  /* 820E2190h */ case   20:  		/* bl -260944 */
		/* 820E2190h case   20:*/		regs.LR = 0x820E2194; return 0x820A2640;
		/* 820E2190h case   20:*/		return 0x820E2194;
		  /* 820E2194h */ case   21:  		/* mr R4, R26 */
		/* 820E2194h case   21:*/		regs.R4 = regs.R26;
		/* 820E2194h case   21:*/		return 0x820E2198;
		  /* 820E2198h */ case   22:  		/* addi R5, R1, 144 */
		/* 820E2198h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E2198h case   22:*/		return 0x820E219C;
		  /* 820E219Ch */ case   23:  		/* mr R3, R31 */
		/* 820E219Ch case   23:*/		regs.R3 = regs.R31;
		/* 820E219Ch case   23:*/		return 0x820E21A0;
		  /* 820E21A0h */ case   24:  		/* bl -32968 */
		/* 820E21A0h case   24:*/		regs.LR = 0x820E21A4; return 0x820DA0D8;
		/* 820E21A0h case   24:*/		return 0x820E21A4;
		  /* 820E21A4h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820E21A4h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E21A4h case   25:*/		return 0x820E21A8;
		  /* 820E21A8h */ case   26:  		/* bc 12, CR0_LT, 1236 */
		/* 820E21A8h case   26:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E21A8h case   26:*/		return 0x820E21AC;
		  /* 820E21ACh */ case   27:  		/* lwz R11, <#[R31]> */
		/* 820E21ACh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E21ACh case   27:*/		return 0x820E21B0;
		  /* 820E21B0h */ case   28:  		/* addi R4, R1, 208 */
		/* 820E21B0h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E21B0h case   28:*/		return 0x820E21B4;
		  /* 820E21B4h */ case   29:  		/* mr R3, R31 */
		/* 820E21B4h case   29:*/		regs.R3 = regs.R31;
		/* 820E21B4h case   29:*/		return 0x820E21B8;
		  /* 820E21B8h */ case   30:  		/* lwz R11, <#[R11 + 472]> */
		/* 820E21B8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001D8) );
		/* 820E21B8h case   30:*/		return 0x820E21BC;
		  /* 820E21BCh */ case   31:  		/* mtspr CTR, R11 */
		/* 820E21BCh case   31:*/		regs.CTR = regs.R11;
		/* 820E21BCh case   31:*/		return 0x820E21C0;
		  /* 820E21C0h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 820E21C0h case   32:*/		if ( 1 ) { regs.LR = 0x820E21C4; return (uint32)regs.CTR; }
		/* 820E21C0h case   32:*/		return 0x820E21C4;
		  /* 820E21C4h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820E21C4h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E21C4h case   33:*/		return 0x820E21C8;
		  /* 820E21C8h */ case   34:  		/* bc 12, CR0_LT, 1204 */
		/* 820E21C8h case   34:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E21C8h case   34:*/		return 0x820E21CC;
		  /* 820E21CCh */ case   35:  		/* mr R4, R25 */
		/* 820E21CCh case   35:*/		regs.R4 = regs.R25;
		/* 820E21CCh case   35:*/		return 0x820E21D0;
		  /* 820E21D0h */ case   36:  		/* mr R3, R31 */
		/* 820E21D0h case   36:*/		regs.R3 = regs.R31;
		/* 820E21D0h case   36:*/		return 0x820E21D4;
		  /* 820E21D4h */ case   37:  		/* bl -33020 */
		/* 820E21D4h case   37:*/		regs.LR = 0x820E21D8; return 0x820DA0D8;
		/* 820E21D4h case   37:*/		return 0x820E21D8;
		  /* 820E21D8h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 820E21D8h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E21D8h case   38:*/		return 0x820E21DC;
		  /* 820E21DCh */ case   39:  		/* bc 12, CR0_LT, 1184 */
		/* 820E21DCh case   39:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E21DCh case   39:*/		return 0x820E21E0;
		  /* 820E21E0h */ case   40:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E21E0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E21E0h case   40:*/		return 0x820E21E4;
		  /* 820E21E4h */ case   41:  		/* addi R30, R30, 1 */
		/* 820E21E4h case   41:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E21E4h case   41:*/		return 0x820E21E8;
		  /* 820E21E8h */ case   42:  		/* cmplw CR6, R30, R11 */
		/* 820E21E8h case   42:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E21E8h case   42:*/		return 0x820E21EC;
		  /* 820E21ECh */ case   43:  		/* bc 12, CR6_LT, -152 */
		/* 820E21ECh case   43:*/		if ( regs.CR[6].lt ) { return 0x820E2154;  }
		/* 820E21ECh case   43:*/		return 0x820E21F0;
	}
	return 0x820E21F0;
} // Block from 820E2140h-820E21F0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820E21F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E21F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E21F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E21F0);
		  /* 820E21F0h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E21F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E21F0h case    0:*/		return 0x820E21F4;
		  /* 820E21F4h */ case    1:  		/* addi R6, R1, 176 */
		/* 820E21F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB0);
		/* 820E21F4h case    1:*/		return 0x820E21F8;
		  /* 820E21F8h */ case    2:  		/* lwz R10, <#[R31]> */
		/* 820E21F8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820E21F8h case    2:*/		return 0x820E21FC;
		  /* 820E21FCh */ case    3:  		/* addi R5, R1, 184 */
		/* 820E21FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB8);
		/* 820E21FCh case    3:*/		return 0x820E2200;
		  /* 820E2200h */ case    4:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E2200h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E2200h case    4:*/		return 0x820E2204;
		  /* 820E2204h */ case    5:  		/* mr R3, R31 */
		/* 820E2204h case    5:*/		regs.R3 = regs.R31;
		/* 820E2204h case    5:*/		return 0x820E2208;
		  /* 820E2208h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E2208h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E2208h case    6:*/		return 0x820E220C;
		  /* 820E220Ch */ case    7:  		/* lwz R10, <#[R10 + 328]> */
		/* 820E220Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000148) );
		/* 820E220Ch case    7:*/		return 0x820E2210;
		  /* 820E2210h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 820E2210h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E2210h case    8:*/		return 0x820E2214;
		  /* 820E2214h */ case    9:  		/* mtspr CTR, R10 */
		/* 820E2214h case    9:*/		regs.CTR = regs.R10;
		/* 820E2214h case    9:*/		return 0x820E2218;
		  /* 820E2218h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E2218h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E2218h case   10:*/		return 0x820E221C;
		  /* 820E221Ch */ case   11:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E221Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E221Ch case   11:*/		return 0x820E2220;
		  /* 820E2220h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820E2220h case   12:*/		if ( 1 ) { regs.LR = 0x820E2224; return (uint32)regs.CTR; }
		/* 820E2220h case   12:*/		return 0x820E2224;
		  /* 820E2224h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820E2224h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2224h case   13:*/		return 0x820E2228;
		  /* 820E2228h */ case   14:  		/* bc 12, CR0_LT, 1108 */
		/* 820E2228h case   14:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2228h case   14:*/		return 0x820E222C;
		  /* 820E222Ch */ case   15:  		/* lwz R11, <#[R31]> */
		/* 820E222Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E222Ch case   15:*/		return 0x820E2230;
		  /* 820E2230h */ case   16:  		/* addi R7, R1, 192 */
		/* 820E2230h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 820E2230h case   16:*/		return 0x820E2234;
		  /* 820E2234h */ case   17:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E2234h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E2234h case   17:*/		return 0x820E2238;
		  /* 820E2238h */ case   18:  		/* mr R3, R31 */
		/* 820E2238h case   18:*/		regs.R3 = regs.R31;
		/* 820E2238h case   18:*/		return 0x820E223C;
		  /* 820E223Ch */ case   19:  		/* lwz R6, <#[R1 + 128]> */
		/* 820E223Ch case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 820E223Ch case   19:*/		return 0x820E2240;
		  /* 820E2240h */ case   20:  		/* lwz R11, <#[R11 + 332]> */
		/* 820E2240h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E2240h case   20:*/		return 0x820E2244;
		  /* 820E2244h */ case   21:  		/* lwz R9, <#[R10]> */
		/* 820E2244h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E2244h case   21:*/		return 0x820E2248;
		  /* 820E2248h */ case   22:  		/* lwz R4, <#[R10 + 8]> */
		/* 820E2248h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000008) );
		/* 820E2248h case   22:*/		return 0x820E224C;
		  /* 820E224Ch */ case   23:  		/* rlwinm R5, R9, 0, 12, 31 */
		/* 820E224Ch case   23:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R5,regs.R9);
		/* 820E224Ch case   23:*/		return 0x820E2250;
		  /* 820E2250h */ case   24:  		/* mtspr CTR, R11 */
		/* 820E2250h case   24:*/		regs.CTR = regs.R11;
		/* 820E2250h case   24:*/		return 0x820E2254;
		  /* 820E2254h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820E2254h case   25:*/		if ( 1 ) { regs.LR = 0x820E2258; return (uint32)regs.CTR; }
		/* 820E2254h case   25:*/		return 0x820E2258;
		  /* 820E2258h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E2258h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2258h case   26:*/		return 0x820E225C;
		  /* 820E225Ch */ case   27:  		/* bc 12, CR0_LT, 1056 */
		/* 820E225Ch case   27:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E225Ch case   27:*/		return 0x820E2260;
		  /* 820E2260h */ case   28:  		/* li R10, 32 */
		/* 820E2260h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 820E2260h case   28:*/		return 0x820E2264;
		  /* 820E2264h */ case   29:  		/* stw R24, <#[R1 + 116]> */
		/* 820E2264h case   29:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000074) );
		/* 820E2264h case   29:*/		return 0x820E2268;
		  /* 820E2268h */ case   30:  		/* addi R9, R1, 272 */
		/* 820E2268h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x110);
		/* 820E2268h case   30:*/		return 0x820E226C;
		  /* 820E226Ch */ case   31:  		/* stw R24, <#[R1 + 108]> */
		/* 820E226Ch case   31:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E226Ch case   31:*/		return 0x820E2270;
		  /* 820E2270h */ case   32:  		/* addi R8, R1, 192 */
		/* 820E2270h case   32:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E2270h case   32:*/		return 0x820E2274;
		  /* 820E2274h */ case   33:  		/* stw R24, <#[R1 + 100]> */
		/* 820E2274h case   33:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000064) );
		/* 820E2274h case   33:*/		return 0x820E2278;
		  /* 820E2278h */ case   34:  		/* addi R7, R1, 176 */
		/* 820E2278h case   34:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 820E2278h case   34:*/		return 0x820E227C;
		  /* 820E227Ch */ case   35:  		/* stw R24, <#[R1 + 92]> */
		/* 820E227Ch case   35:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x0000005C) );
		/* 820E227Ch case   35:*/		return 0x820E2280;
		  /* 820E2280h */ case   36:  		/* addi R6, R1, 184 */
		/* 820E2280h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB8);
		/* 820E2280h case   36:*/		return 0x820E2284;
		  /* 820E2284h */ case   37:  		/* stw R24, <#[R1 + 84]> */
		/* 820E2284h case   37:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000054) );
		/* 820E2284h case   37:*/		return 0x820E2288;
		  /* 820E2288h */ case   38:  		/* li R5, 1 */
		/* 820E2288h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820E2288h case   38:*/		return 0x820E228C;
		  /* 820E228Ch */ case   39:  		/* li R4, 0 */
		/* 820E228Ch case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E228Ch case   39:*/		return 0x820E2290;
		  /* 820E2290h */ case   40:  		/* mr R3, R31 */
		/* 820E2290h case   40:*/		regs.R3 = regs.R31;
		/* 820E2290h case   40:*/		return 0x820E2294;
		  /* 820E2294h */ case   41:  		/* bl -7412 */
		/* 820E2294h case   41:*/		regs.LR = 0x820E2298; return 0x820E05A0;
		/* 820E2294h case   41:*/		return 0x820E2298;
		  /* 820E2298h */ case   42:  		/* cmpwi CR0, R3, 0 */
		/* 820E2298h case   42:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2298h case   42:*/		return 0x820E229C;
		  /* 820E229Ch */ case   43:  		/* bc 12, CR0_LT, 992 */
		/* 820E229Ch case   43:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E229Ch case   43:*/		return 0x820E22A0;
		  /* 820E22A0h */ case   44:  		/* lwz R4, <#[R1 + 128]> */
		/* 820E22A0h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820E22A0h case   44:*/		return 0x820E22A4;
		  /* 820E22A4h */ case   45:  		/* cmplw CR6, R4, R29 */
		/* 820E22A4h case   45:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R29);
		/* 820E22A4h case   45:*/		return 0x820E22A8;
		  /* 820E22A8h */ case   46:  		/* bc 12, CR6_EQ, 20 */
		/* 820E22A8h case   46:*/		if ( regs.CR[6].eq ) { return 0x820E22BC;  }
		/* 820E22A8h case   46:*/		return 0x820E22AC;
		  /* 820E22ACh */ case   47:  		/* mr R3, R31 */
		/* 820E22ACh case   47:*/		regs.R3 = regs.R31;
		/* 820E22ACh case   47:*/		return 0x820E22B0;
		  /* 820E22B0h */ case   48:  		/* bl -32352 */
		/* 820E22B0h case   48:*/		regs.LR = 0x820E22B4; return 0x820DA450;
		/* 820E22B0h case   48:*/		return 0x820E22B4;
		  /* 820E22B4h */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 820E22B4h case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E22B4h case   49:*/		return 0x820E22B8;
		  /* 820E22B8h */ case   50:  		/* bc 12, CR0_LT, 964 */
		/* 820E22B8h case   50:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E22B8h case   50:*/		return 0x820E22BC;
	}
	return 0x820E22BC;
} // Block from 820E21F0h-820E22BCh (51 instructions)

//////////////////////////////////////////////////////
// Block at 820E22BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E22BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E22BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E22BC);
		  /* 820E22BCh */ case    0:  		/* lis R11, -32254 */
		/* 820E22BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E22BCh case    0:*/		return 0x820E22C0;
		  /* 820E22C0h */ case    1:  		/* mr R30, R24 */
		/* 820E22C0h case    1:*/		regs.R30 = regs.R24;
		/* 820E22C0h case    1:*/		return 0x820E22C4;
		  /* 820E22C4h */ case    2:  		/* addi R29, R11, -30716 */
		/* 820E22C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFF8804);
		/* 820E22C4h case    2:*/		return 0x820E22C8;
		  /* 820E22C8h */ case    3:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E22C8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E22C8h case    3:*/		return 0x820E22CC;
		  /* 820E22CCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820E22CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E22CCh case    4:*/		return 0x820E22D0;
		  /* 820E22D0h */ case    5:  		/* bc 12, CR6_EQ, 156 */
		/* 820E22D0h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E236C;  }
		/* 820E22D0h case    5:*/		return 0x820E22D4;
		  /* 820E22D4h */ case    6:  		/* mr R3, R31 */
		/* 820E22D4h case    6:*/		regs.R3 = regs.R31;
		/* 820E22D4h case    6:*/		return 0x820E22D8;
		  /* 820E22D8h */ case    7:  		/* bl -33064 */
		/* 820E22D8h case    7:*/		regs.LR = 0x820E22DC; return 0x820DA1B0;
		/* 820E22D8h case    7:*/		return 0x820E22DC;
		  /* 820E22DCh */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E22DCh case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E22DCh case    8:*/		return 0x820E22E0;
		  /* 820E22E0h */ case    9:  		/* bc 12, CR0_LT, 924 */
		/* 820E22E0h case    9:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E22E0h case    9:*/		return 0x820E22E4;
		  /* 820E22E4h */ case   10:  		/* mr R7, R30 */
		/* 820E22E4h case   10:*/		regs.R7 = regs.R30;
		/* 820E22E4h case   10:*/		return 0x820E22E8;
		  /* 820E22E8h */ case   11:  		/* mr R6, R30 */
		/* 820E22E8h case   11:*/		regs.R6 = regs.R30;
		/* 820E22E8h case   11:*/		return 0x820E22EC;
		  /* 820E22ECh */ case   12:  		/* addi R5, R1, 272 */
		/* 820E22ECh case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x110);
		/* 820E22ECh case   12:*/		return 0x820E22F0;
		  /* 820E22F0h */ case   13:  		/* li R4, 32 */
		/* 820E22F0h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E22F0h case   13:*/		return 0x820E22F4;
		  /* 820E22F4h */ case   14:  		/* addi R3, R1, 304 */
		/* 820E22F4h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x130);
		/* 820E22F4h case   14:*/		return 0x820E22F8;
		  /* 820E22F8h */ case   15:  		/* bl -261304 */
		/* 820E22F8h case   15:*/		regs.LR = 0x820E22FC; return 0x820A2640;
		/* 820E22F8h case   15:*/		return 0x820E22FC;
		  /* 820E22FCh */ case   16:  		/* mr R5, R29 */
		/* 820E22FCh case   16:*/		regs.R5 = regs.R29;
		/* 820E22FCh case   16:*/		return 0x820E2300;
		  /* 820E2300h */ case   17:  		/* mr R6, R30 */
		/* 820E2300h case   17:*/		regs.R6 = regs.R30;
		/* 820E2300h case   17:*/		return 0x820E2304;
		  /* 820E2304h */ case   18:  		/* li R4, 32 */
		/* 820E2304h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E2304h case   18:*/		return 0x820E2308;
		  /* 820E2308h */ case   19:  		/* addi R3, R1, 144 */
		/* 820E2308h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E2308h case   19:*/		return 0x820E230C;
		  /* 820E230Ch */ case   20:  		/* bl -261324 */
		/* 820E230Ch case   20:*/		regs.LR = 0x820E2310; return 0x820A2640;
		/* 820E230Ch case   20:*/		return 0x820E2310;
		  /* 820E2310h */ case   21:  		/* mr R4, R26 */
		/* 820E2310h case   21:*/		regs.R4 = regs.R26;
		/* 820E2310h case   21:*/		return 0x820E2314;
		  /* 820E2314h */ case   22:  		/* addi R5, R1, 144 */
		/* 820E2314h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E2314h case   22:*/		return 0x820E2318;
		  /* 820E2318h */ case   23:  		/* mr R3, R31 */
		/* 820E2318h case   23:*/		regs.R3 = regs.R31;
		/* 820E2318h case   23:*/		return 0x820E231C;
		  /* 820E231Ch */ case   24:  		/* bl -33348 */
		/* 820E231Ch case   24:*/		regs.LR = 0x820E2320; return 0x820DA0D8;
		/* 820E231Ch case   24:*/		return 0x820E2320;
		  /* 820E2320h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820E2320h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2320h case   25:*/		return 0x820E2324;
		  /* 820E2324h */ case   26:  		/* bc 12, CR0_LT, 856 */
		/* 820E2324h case   26:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2324h case   26:*/		return 0x820E2328;
		  /* 820E2328h */ case   27:  		/* lwz R11, <#[R31]> */
		/* 820E2328h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E2328h case   27:*/		return 0x820E232C;
		  /* 820E232Ch */ case   28:  		/* addi R4, R1, 304 */
		/* 820E232Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x130);
		/* 820E232Ch case   28:*/		return 0x820E2330;
		  /* 820E2330h */ case   29:  		/* mr R3, R31 */
		/* 820E2330h case   29:*/		regs.R3 = regs.R31;
		/* 820E2330h case   29:*/		return 0x820E2334;
		  /* 820E2334h */ case   30:  		/* lwz R11, <#[R11 + 404]> */
		/* 820E2334h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000194) );
		/* 820E2334h case   30:*/		return 0x820E2338;
		  /* 820E2338h */ case   31:  		/* mtspr CTR, R11 */
		/* 820E2338h case   31:*/		regs.CTR = regs.R11;
		/* 820E2338h case   31:*/		return 0x820E233C;
		  /* 820E233Ch */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 820E233Ch case   32:*/		if ( 1 ) { regs.LR = 0x820E2340; return (uint32)regs.CTR; }
		/* 820E233Ch case   32:*/		return 0x820E2340;
		  /* 820E2340h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820E2340h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2340h case   33:*/		return 0x820E2344;
		  /* 820E2344h */ case   34:  		/* bc 12, CR0_LT, 824 */
		/* 820E2344h case   34:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2344h case   34:*/		return 0x820E2348;
		  /* 820E2348h */ case   35:  		/* mr R4, R25 */
		/* 820E2348h case   35:*/		regs.R4 = regs.R25;
		/* 820E2348h case   35:*/		return 0x820E234C;
		  /* 820E234Ch */ case   36:  		/* mr R3, R31 */
		/* 820E234Ch case   36:*/		regs.R3 = regs.R31;
		/* 820E234Ch case   36:*/		return 0x820E2350;
		  /* 820E2350h */ case   37:  		/* bl -33400 */
		/* 820E2350h case   37:*/		regs.LR = 0x820E2354; return 0x820DA0D8;
		/* 820E2350h case   37:*/		return 0x820E2354;
		  /* 820E2354h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 820E2354h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2354h case   38:*/		return 0x820E2358;
		  /* 820E2358h */ case   39:  		/* bc 12, CR0_LT, 804 */
		/* 820E2358h case   39:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2358h case   39:*/		return 0x820E235C;
		  /* 820E235Ch */ case   40:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E235Ch case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E235Ch case   40:*/		return 0x820E2360;
		  /* 820E2360h */ case   41:  		/* addi R30, R30, 1 */
		/* 820E2360h case   41:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E2360h case   41:*/		return 0x820E2364;
		  /* 820E2364h */ case   42:  		/* cmplw CR6, R30, R11 */
		/* 820E2364h case   42:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E2364h case   42:*/		return 0x820E2368;
		  /* 820E2368h */ case   43:  		/* bc 12, CR6_LT, -148 */
		/* 820E2368h case   43:*/		if ( regs.CR[6].lt ) { return 0x820E22D4;  }
		/* 820E2368h case   43:*/		return 0x820E236C;
	}
	return 0x820E236C;
} // Block from 820E22BCh-820E236Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 820E236Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E236C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E236C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E236C);
		  /* 820E236Ch */ case    0:  		/* mr R30, R24 */
		/* 820E236Ch case    0:*/		regs.R30 = regs.R24;
		/* 820E236Ch case    0:*/		return 0x820E2370;
		  /* 820E2370h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E2370h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E2370h case    1:*/		return 0x820E2374;
		  /* 820E2374h */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 820E2374h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E23FC;  }
		/* 820E2374h case    2:*/		return 0x820E2378;
		  /* 820E2378h */ case    3:  		/* mr R3, R31 */
		/* 820E2378h case    3:*/		regs.R3 = regs.R31;
		/* 820E2378h case    3:*/		return 0x820E237C;
		  /* 820E237Ch */ case    4:  		/* bl -33228 */
		/* 820E237Ch case    4:*/		regs.LR = 0x820E2380; return 0x820DA1B0;
		/* 820E237Ch case    4:*/		return 0x820E2380;
		  /* 820E2380h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E2380h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2380h case    5:*/		return 0x820E2384;
		  /* 820E2384h */ case    6:  		/* bc 12, CR0_LT, 760 */
		/* 820E2384h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2384h case    6:*/		return 0x820E2388;
		  /* 820E2388h */ case    7:  		/* mr R5, R29 */
		/* 820E2388h case    7:*/		regs.R5 = regs.R29;
		/* 820E2388h case    7:*/		return 0x820E238C;
		  /* 820E238Ch */ case    8:  		/* mr R6, R30 */
		/* 820E238Ch case    8:*/		regs.R6 = regs.R30;
		/* 820E238Ch case    8:*/		return 0x820E2390;
		  /* 820E2390h */ case    9:  		/* li R4, 32 */
		/* 820E2390h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E2390h case    9:*/		return 0x820E2394;
		  /* 820E2394h */ case   10:  		/* addi R3, R1, 144 */
		/* 820E2394h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E2394h case   10:*/		return 0x820E2398;
		  /* 820E2398h */ case   11:  		/* bl -261464 */
		/* 820E2398h case   11:*/		regs.LR = 0x820E239C; return 0x820A2640;
		/* 820E2398h case   11:*/		return 0x820E239C;
		  /* 820E239Ch */ case   12:  		/* mr R4, R26 */
		/* 820E239Ch case   12:*/		regs.R4 = regs.R26;
		/* 820E239Ch case   12:*/		return 0x820E23A0;
		  /* 820E23A0h */ case   13:  		/* addi R5, R1, 144 */
		/* 820E23A0h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E23A0h case   13:*/		return 0x820E23A4;
		  /* 820E23A4h */ case   14:  		/* mr R3, R31 */
		/* 820E23A4h case   14:*/		regs.R3 = regs.R31;
		/* 820E23A4h case   14:*/		return 0x820E23A8;
		  /* 820E23A8h */ case   15:  		/* bl -33488 */
		/* 820E23A8h case   15:*/		regs.LR = 0x820E23AC; return 0x820DA0D8;
		/* 820E23A8h case   15:*/		return 0x820E23AC;
		  /* 820E23ACh */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820E23ACh case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E23ACh case   16:*/		return 0x820E23B0;
		  /* 820E23B0h */ case   17:  		/* bc 12, CR0_LT, 716 */
		/* 820E23B0h case   17:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E23B0h case   17:*/		return 0x820E23B4;
		  /* 820E23B4h */ case   18:  		/* lwz R11, <#[R31]> */
		/* 820E23B4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E23B4h case   18:*/		return 0x820E23B8;
		  /* 820E23B8h */ case   19:  		/* li R5, 0 */
		/* 820E23B8h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E23B8h case   19:*/		return 0x820E23BC;
		  /* 820E23BCh */ case   20:  		/* addi R4, R1, 144 */
		/* 820E23BCh case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 820E23BCh case   20:*/		return 0x820E23C0;
		  /* 820E23C0h */ case   21:  		/* mr R3, R31 */
		/* 820E23C0h case   21:*/		regs.R3 = regs.R31;
		/* 820E23C0h case   21:*/		return 0x820E23C4;
		  /* 820E23C4h */ case   22:  		/* lwz R11, <#[R11 + 420]> */
		/* 820E23C4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001A4) );
		/* 820E23C4h case   22:*/		return 0x820E23C8;
		  /* 820E23C8h */ case   23:  		/* mtspr CTR, R11 */
		/* 820E23C8h case   23:*/		regs.CTR = regs.R11;
		/* 820E23C8h case   23:*/		return 0x820E23CC;
		  /* 820E23CCh */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 820E23CCh case   24:*/		if ( 1 ) { regs.LR = 0x820E23D0; return (uint32)regs.CTR; }
		/* 820E23CCh case   24:*/		return 0x820E23D0;
	}
	return 0x820E23D0;
} // Block from 820E236Ch-820E23D0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E23D0h
// Function '?EmitMOVSW@C30SWProgram@D3DXShader@@MAAJIIPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E23D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E23D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E23D0);
		  /* 820E23D0h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820E23D0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E23D0h case    0:*/		return 0x820E23D4;
		  /* 820E23D4h */ case    1:  		/* bc 12, CR0_LT, 680 */
		/* 820E23D4h case    1:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E23D4h case    1:*/		return 0x820E23D8;
		  /* 820E23D8h */ case    2:  		/* mr R4, R25 */
		/* 820E23D8h case    2:*/		regs.R4 = regs.R25;
		/* 820E23D8h case    2:*/		return 0x820E23DC;
		  /* 820E23DCh */ case    3:  		/* mr R3, R31 */
		/* 820E23DCh case    3:*/		regs.R3 = regs.R31;
		/* 820E23DCh case    3:*/		return 0x820E23E0;
		  /* 820E23E0h */ case    4:  		/* bl -33544 */
		/* 820E23E0h case    4:*/		regs.LR = 0x820E23E4; return 0x820DA0D8;
		/* 820E23E0h case    4:*/		return 0x820E23E4;
		  /* 820E23E4h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E23E4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E23E4h case    5:*/		return 0x820E23E8;
		  /* 820E23E8h */ case    6:  		/* bc 12, CR0_LT, 660 */
		/* 820E23E8h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E23E8h case    6:*/		return 0x820E23EC;
		  /* 820E23ECh */ case    7:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E23ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E23ECh case    7:*/		return 0x820E23F0;
		  /* 820E23F0h */ case    8:  		/* addi R30, R30, 1 */
		/* 820E23F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E23F0h case    8:*/		return 0x820E23F4;
		  /* 820E23F4h */ case    9:  		/* cmplw CR6, R30, R11 */
		/* 820E23F4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E23F4h case    9:*/		return 0x820E23F8;
		  /* 820E23F8h */ case   10:  		/* bc 12, CR6_LT, -128 */
		/* 820E23F8h case   10:*/		if ( regs.CR[6].lt ) { return 0x820E2378;  }
		/* 820E23F8h case   10:*/		return 0x820E23FC;
	}
	return 0x820E23FC;
} // Block from 820E23D0h-820E23FCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E23FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E23FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E23FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E23FC);
		  /* 820E23FCh */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 820E23FCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820E23FCh case    0:*/		return 0x820E2400;
		  /* 820E2400h */ case    1:  		/* bc 12, CR6_EQ, 336 */
		/* 820E2400h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E2550;  }
		/* 820E2400h case    1:*/		return 0x820E2404;
		  /* 820E2404h */ case    2:  		/* mr R30, R24 */
		/* 820E2404h case    2:*/		regs.R30 = regs.R24;
		/* 820E2404h case    2:*/		return 0x820E2408;
		  /* 820E2408h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820E2408h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E2408h case    3:*/		return 0x820E240C;
		  /* 820E240Ch */ case    4:  		/* bc 12, CR6_EQ, 148 */
		/* 820E240Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x820E24A0;  }
		/* 820E240Ch case    4:*/		return 0x820E2410;
		  /* 820E2410h */ case    5:  		/* mr R3, R31 */
		/* 820E2410h case    5:*/		regs.R3 = regs.R31;
		/* 820E2410h case    5:*/		return 0x820E2414;
		  /* 820E2414h */ case    6:  		/* bl -33380 */
		/* 820E2414h case    6:*/		regs.LR = 0x820E2418; return 0x820DA1B0;
		/* 820E2414h case    6:*/		return 0x820E2418;
		  /* 820E2418h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820E2418h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2418h case    7:*/		return 0x820E241C;
		  /* 820E241Ch */ case    8:  		/* bc 12, CR0_LT, 608 */
		/* 820E241Ch case    8:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E241Ch case    8:*/		return 0x820E2420;
		  /* 820E2420h */ case    9:  		/* mr R5, R27 */
		/* 820E2420h case    9:*/		regs.R5 = regs.R27;
		/* 820E2420h case    9:*/		return 0x820E2424;
		  /* 820E2424h */ case   10:  		/* mr R6, R30 */
		/* 820E2424h case   10:*/		regs.R6 = regs.R30;
		/* 820E2424h case   10:*/		return 0x820E2428;
		  /* 820E2428h */ case   11:  		/* li R4, 32 */
		/* 820E2428h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E2428h case   11:*/		return 0x820E242C;
		  /* 820E242Ch */ case   12:  		/* addi R3, R1, 144 */
		/* 820E242Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E242Ch case   12:*/		return 0x820E2430;
		  /* 820E2430h */ case   13:  		/* bl -261616 */
		/* 820E2430h case   13:*/		regs.LR = 0x820E2434; return 0x820A2640;
		/* 820E2430h case   13:*/		return 0x820E2434;
		  /* 820E2434h */ case   14:  		/* mr R4, R26 */
		/* 820E2434h case   14:*/		regs.R4 = regs.R26;
		/* 820E2434h case   14:*/		return 0x820E2438;
		  /* 820E2438h */ case   15:  		/* addi R5, R1, 144 */
		/* 820E2438h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E2438h case   15:*/		return 0x820E243C;
		  /* 820E243Ch */ case   16:  		/* mr R3, R31 */
		/* 820E243Ch case   16:*/		regs.R3 = regs.R31;
		/* 820E243Ch case   16:*/		return 0x820E2440;
		  /* 820E2440h */ case   17:  		/* bl -33640 */
		/* 820E2440h case   17:*/		regs.LR = 0x820E2444; return 0x820DA0D8;
		/* 820E2440h case   17:*/		return 0x820E2444;
		  /* 820E2444h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820E2444h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2444h case   18:*/		return 0x820E2448;
		  /* 820E2448h */ case   19:  		/* bc 12, CR0_LT, 564 */
		/* 820E2448h case   19:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2448h case   19:*/		return 0x820E244C;
		  /* 820E244Ch */ case   20:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 820E244Ch case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 820E244Ch case   20:*/		return 0x820E2450;
		  /* 820E2450h */ case   21:  		/* lwz R11, <#[R31]> */
		/* 820E2450h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E2450h case   21:*/		return 0x820E2454;
		  /* 820E2454h */ case   22:  		/* addi R4, R1, 144 */
		/* 820E2454h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 820E2454h case   22:*/		return 0x820E2458;
		  /* 820E2458h */ case   23:  		/* mr R3, R31 */
		/* 820E2458h case   23:*/		regs.R3 = regs.R31;
		/* 820E2458h case   23:*/		return 0x820E245C;
		  /* 820E245Ch */ case   24:  		/* bc 4, CR0_EQ, 12 */
		/* 820E245Ch case   24:*/		if ( !regs.CR[0].eq ) { return 0x820E2468;  }
		/* 820E245Ch case   24:*/		return 0x820E2460;
		  /* 820E2460h */ case   25:  		/* lwz R11, <#[R11 + 428]> */
		/* 820E2460h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001AC) );
		/* 820E2460h case   25:*/		return 0x820E2464;
		  /* 820E2464h */ case   26:  		/* b 8 */
		/* 820E2464h case   26:*/		return 0x820E246C;
		/* 820E2464h case   26:*/		return 0x820E2468;
	}
	return 0x820E2468;
} // Block from 820E23FCh-820E2468h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E2468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2468);
		  /* 820E2468h */ case    0:  		/* lwz R11, <#[R11 + 432]> */
		/* 820E2468h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001B0) );
		/* 820E2468h case    0:*/		return 0x820E246C;
	}
	return 0x820E246C;
} // Block from 820E2468h-820E246Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E246Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E246C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E246C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E246C);
		  /* 820E246Ch */ case    0:  		/* mtspr CTR, R11 */
		/* 820E246Ch case    0:*/		regs.CTR = regs.R11;
		/* 820E246Ch case    0:*/		return 0x820E2470;
		  /* 820E2470h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 820E2470h case    1:*/		if ( 1 ) { regs.LR = 0x820E2474; return (uint32)regs.CTR; }
		/* 820E2470h case    1:*/		return 0x820E2474;
		  /* 820E2474h */ case    2:  		/* cmpwi CR6, R3, 0 */
		/* 820E2474h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E2474h case    2:*/		return 0x820E2478;
		  /* 820E2478h */ case    3:  		/* bc 12, CR6_LT, 516 */
		/* 820E2478h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E267C;  }
		/* 820E2478h case    3:*/		return 0x820E247C;
		  /* 820E247Ch */ case    4:  		/* mr R4, R25 */
		/* 820E247Ch case    4:*/		regs.R4 = regs.R25;
		/* 820E247Ch case    4:*/		return 0x820E2480;
		  /* 820E2480h */ case    5:  		/* mr R3, R31 */
		/* 820E2480h case    5:*/		regs.R3 = regs.R31;
		/* 820E2480h case    5:*/		return 0x820E2484;
		  /* 820E2484h */ case    6:  		/* bl -33708 */
		/* 820E2484h case    6:*/		regs.LR = 0x820E2488; return 0x820DA0D8;
		/* 820E2484h case    6:*/		return 0x820E2488;
		  /* 820E2488h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820E2488h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2488h case    7:*/		return 0x820E248C;
		  /* 820E248Ch */ case    8:  		/* bc 12, CR0_LT, 496 */
		/* 820E248Ch case    8:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E248Ch case    8:*/		return 0x820E2490;
		  /* 820E2490h */ case    9:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E2490h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E2490h case    9:*/		return 0x820E2494;
		  /* 820E2494h */ case   10:  		/* addi R30, R30, 1 */
		/* 820E2494h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E2494h case   10:*/		return 0x820E2498;
		  /* 820E2498h */ case   11:  		/* cmplw CR6, R30, R11 */
		/* 820E2498h case   11:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E2498h case   11:*/		return 0x820E249C;
		  /* 820E249Ch */ case   12:  		/* bc 12, CR6_LT, -140 */
		/* 820E249Ch case   12:*/		if ( regs.CR[6].lt ) { return 0x820E2410;  }
		/* 820E249Ch case   12:*/		return 0x820E24A0;
	}
	return 0x820E24A0;
} // Block from 820E246Ch-820E24A0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E24A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E24A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E24A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E24A0);
		  /* 820E24A0h */ case    0:  		/* mr R3, R31 */
		/* 820E24A0h case    0:*/		regs.R3 = regs.R31;
		/* 820E24A0h case    0:*/		return 0x820E24A4;
		  /* 820E24A4h */ case    1:  		/* bl -32684 */
		/* 820E24A4h case    1:*/		regs.LR = 0x820E24A8; return 0x820DA4F8;
		/* 820E24A4h case    1:*/		return 0x820E24A8;
		  /* 820E24A8h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820E24A8h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E24A8h case    2:*/		return 0x820E24AC;
		  /* 820E24ACh */ case    3:  		/* bc 12, CR0_LT, 464 */
		/* 820E24ACh case    3:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E24ACh case    3:*/		return 0x820E24B0;
		  /* 820E24B0h */ case    4:  		/* mr R5, R27 */
		/* 820E24B0h case    4:*/		regs.R5 = regs.R27;
		/* 820E24B0h case    4:*/		return 0x820E24B4;
		  /* 820E24B4h */ case    5:  		/* li R4, 32 */
		/* 820E24B4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E24B4h case    5:*/		return 0x820E24B8;
		  /* 820E24B8h */ case    6:  		/* addi R3, R1, 208 */
		/* 820E24B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 820E24B8h case    6:*/		return 0x820E24BC;
		  /* 820E24BCh */ case    7:  		/* bl -245196 */
		/* 820E24BCh case    7:*/		regs.LR = 0x820E24C0; return 0x820A66F0;
		/* 820E24BCh case    7:*/		return 0x820E24C0;
		  /* 820E24C0h */ case    8:  		/* li R7, 0 */
		/* 820E24C0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E24C0h case    8:*/		return 0x820E24C4;
		  /* 820E24C4h */ case    9:  		/* li R6, 1 */
		/* 820E24C4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E24C4h case    9:*/		return 0x820E24C8;
		  /* 820E24C8h */ case   10:  		/* lwz R5, <#[R1 + 128]> */
		/* 820E24C8h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 820E24C8h case   10:*/		return 0x820E24CC;
		  /* 820E24CCh */ case   11:  		/* addi R4, R1, 208 */
		/* 820E24CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E24CCh case   11:*/		return 0x820E24D0;
		  /* 820E24D0h */ case   12:  		/* mr R3, R31 */
		/* 820E24D0h case   12:*/		regs.R3 = regs.R31;
		/* 820E24D0h case   12:*/		return 0x820E24D4;
		  /* 820E24D4h */ case   13:  		/* bl -31900 */
		/* 820E24D4h case   13:*/		regs.LR = 0x820E24D8; return 0x820DA838;
		/* 820E24D4h case   13:*/		return 0x820E24D8;
		  /* 820E24D8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E24D8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E24D8h case   14:*/		return 0x820E24DC;
		  /* 820E24DCh */ case   15:  		/* bc 12, CR0_LT, 416 */
		/* 820E24DCh case   15:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E24DCh case   15:*/		return 0x820E24E0;
		  /* 820E24E0h */ case   16:  		/* li R6, 0 */
		/* 820E24E0h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E24E0h case   16:*/		return 0x820E24E4;
		  /* 820E24E4h */ case   17:  		/* li R5, 1 */
		/* 820E24E4h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820E24E4h case   17:*/		return 0x820E24E8;
		  /* 820E24E8h */ case   18:  		/* addi R4, R1, 208 */
		/* 820E24E8h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E24E8h case   18:*/		return 0x820E24EC;
		  /* 820E24ECh */ case   19:  		/* mr R3, R31 */
		/* 820E24ECh case   19:*/		regs.R3 = regs.R31;
		/* 820E24ECh case   19:*/		return 0x820E24F0;
		  /* 820E24F0h */ case   20:  		/* bl -31616 */
		/* 820E24F0h case   20:*/		regs.LR = 0x820E24F4; return 0x820DA970;
		/* 820E24F0h case   20:*/		return 0x820E24F4;
		  /* 820E24F4h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820E24F4h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E24F4h case   21:*/		return 0x820E24F8;
		  /* 820E24F8h */ case   22:  		/* bc 12, CR0_LT, 388 */
		/* 820E24F8h case   22:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E24F8h case   22:*/		return 0x820E24FC;
		  /* 820E24FCh */ case   23:  		/* lwz R5, <#[R1 + 132]> */
		/* 820E24FCh case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820E24FCh case   23:*/		return 0x820E2500;
		  /* 820E2500h */ case   24:  		/* cmplwi CR6, R5, 0 */
		/* 820E2500h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E2500h case   24:*/		return 0x820E2504;
		  /* 820E2504h */ case   25:  		/* bc 12, CR6_EQ, 76 */
		/* 820E2504h case   25:*/		if ( regs.CR[6].eq ) { return 0x820E2550;  }
		/* 820E2504h case   25:*/		return 0x820E2508;
		  /* 820E2508h */ case   26:  		/* rlwinm R11, R5, 0, 8, 15 */
		/* 820E2508h case   26:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R11,regs.R5);
		/* 820E2508h case   26:*/		return 0x820E250C;
		  /* 820E250Ch */ case   27:  		/* addic R10, R11, -1 */
		/* 820E250Ch case   27:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 820E250Ch case   27:*/		return 0x820E2510;
		  /* 820E2510h */ case   28:  		/* subfe. R30, R10, R11 */
		/* 820E2510h case   28:*/		cpu::op::subfe<1>(regs,&regs.R30,regs.R10,regs.R11);
		/* 820E2510h case   28:*/		return 0x820E2514;
		  /* 820E2514h */ case   29:  		/* bc 12, CR0_EQ, 28 */
		/* 820E2514h case   29:*/		if ( regs.CR[0].eq ) { return 0x820E2530;  }
		/* 820E2514h case   29:*/		return 0x820E2518;
		  /* 820E2518h */ case   30:  		/* mr R4, R5 */
		/* 820E2518h case   30:*/		regs.R4 = regs.R5;
		/* 820E2518h case   30:*/		return 0x820E251C;
		  /* 820E251Ch */ case   31:  		/* mr R3, R31 */
		/* 820E251Ch case   31:*/		regs.R3 = regs.R31;
		/* 820E251Ch case   31:*/		return 0x820E2520;
		  /* 820E2520h */ case   32:  		/* bl -32616 */
		/* 820E2520h case   32:*/		regs.LR = 0x820E2524; return 0x820DA5B8;
		/* 820E2520h case   32:*/		return 0x820E2524;
		  /* 820E2524h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820E2524h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2524h case   33:*/		return 0x820E2528;
		  /* 820E2528h */ case   34:  		/* bc 12, CR0_LT, 340 */
		/* 820E2528h case   34:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2528h case   34:*/		return 0x820E252C;
		  /* 820E252Ch */ case   35:  		/* lwz R5, <#[R1 + 132]> */
		/* 820E252Ch case   35:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 820E252Ch case   35:*/		return 0x820E2530;
	}
	return 0x820E2530;
} // Block from 820E24A0h-820E2530h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820E2530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2530);
		  /* 820E2530h */ case    0:  		/* li R8, 0 */
		/* 820E2530h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E2530h case    0:*/		return 0x820E2534;
		  /* 820E2534h */ case    1:  		/* li R7, 1 */
		/* 820E2534h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820E2534h case    1:*/		return 0x820E2538;
		  /* 820E2538h */ case    2:  		/* mr R6, R30 */
		/* 820E2538h case    2:*/		regs.R6 = regs.R30;
		/* 820E2538h case    2:*/		return 0x820E253C;
		  /* 820E253Ch */ case    3:  		/* addi R4, R1, 208 */
		/* 820E253Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E253Ch case    3:*/		return 0x820E2540;
		  /* 820E2540h */ case    4:  		/* mr R3, R31 */
		/* 820E2540h case    4:*/		regs.R3 = regs.R31;
		/* 820E2540h case    4:*/		return 0x820E2544;
		  /* 820E2544h */ case    5:  		/* bl -32396 */
		/* 820E2544h case    5:*/		regs.LR = 0x820E2548; return 0x820DA6B8;
		/* 820E2544h case    5:*/		return 0x820E2548;
		  /* 820E2548h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E2548h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2548h case    6:*/		return 0x820E254C;
		  /* 820E254Ch */ case    7:  		/* bc 12, CR0_LT, 304 */
		/* 820E254Ch case    7:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E254Ch case    7:*/		return 0x820E2550;
	}
	return 0x820E2550;
} // Block from 820E2530h-820E2550h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E2550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2550);
		  /* 820E2550h */ case    0:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E2550h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E2550h case    0:*/		return 0x820E2554;
		  /* 820E2554h */ case    1:  		/* mr R30, R24 */
		/* 820E2554h case    1:*/		regs.R30 = regs.R24;
		/* 820E2554h case    1:*/		return 0x820E2558;
		  /* 820E2558h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820E2558h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E2558h case    2:*/		return 0x820E255C;
		  /* 820E255Ch */ case    3:  		/* bc 12, CR6_EQ, 136 */
		/* 820E255Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E25E4;  }
		/* 820E255Ch case    3:*/		return 0x820E2560;
		  /* 820E2560h */ case    4:  		/* mr R3, R31 */
		/* 820E2560h case    4:*/		regs.R3 = regs.R31;
		/* 820E2560h case    4:*/		return 0x820E2564;
		  /* 820E2564h */ case    5:  		/* bl -33716 */
		/* 820E2564h case    5:*/		regs.LR = 0x820E2568; return 0x820DA1B0;
		/* 820E2564h case    5:*/		return 0x820E2568;
		  /* 820E2568h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E2568h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2568h case    6:*/		return 0x820E256C;
		  /* 820E256Ch */ case    7:  		/* bc 12, CR0_LT, 272 */
		/* 820E256Ch case    7:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E256Ch case    7:*/		return 0x820E2570;
		  /* 820E2570h */ case    8:  		/* mr R5, R29 */
		/* 820E2570h case    8:*/		regs.R5 = regs.R29;
		/* 820E2570h case    8:*/		return 0x820E2574;
		  /* 820E2574h */ case    9:  		/* mr R6, R30 */
		/* 820E2574h case    9:*/		regs.R6 = regs.R30;
		/* 820E2574h case    9:*/		return 0x820E2578;
		  /* 820E2578h */ case   10:  		/* li R4, 32 */
		/* 820E2578h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E2578h case   10:*/		return 0x820E257C;
		  /* 820E257Ch */ case   11:  		/* addi R3, R1, 144 */
		/* 820E257Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E257Ch case   11:*/		return 0x820E2580;
		  /* 820E2580h */ case   12:  		/* bl -261952 */
		/* 820E2580h case   12:*/		regs.LR = 0x820E2584; return 0x820A2640;
		/* 820E2580h case   12:*/		return 0x820E2584;
		  /* 820E2584h */ case   13:  		/* mr R4, R26 */
		/* 820E2584h case   13:*/		regs.R4 = regs.R26;
		/* 820E2584h case   13:*/		return 0x820E2588;
		  /* 820E2588h */ case   14:  		/* addi R5, R1, 144 */
		/* 820E2588h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E2588h case   14:*/		return 0x820E258C;
		  /* 820E258Ch */ case   15:  		/* mr R3, R31 */
		/* 820E258Ch case   15:*/		regs.R3 = regs.R31;
		/* 820E258Ch case   15:*/		return 0x820E2590;
		  /* 820E2590h */ case   16:  		/* bl -33976 */
		/* 820E2590h case   16:*/		regs.LR = 0x820E2594; return 0x820DA0D8;
		/* 820E2590h case   16:*/		return 0x820E2594;
		  /* 820E2594h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820E2594h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2594h case   17:*/		return 0x820E2598;
		  /* 820E2598h */ case   18:  		/* bc 12, CR0_LT, 228 */
		/* 820E2598h case   18:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2598h case   18:*/		return 0x820E259C;
		  /* 820E259Ch */ case   19:  		/* lwz R11, <#[R31]> */
		/* 820E259Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E259Ch case   19:*/		return 0x820E25A0;
		  /* 820E25A0h */ case   20:  		/* addi R5, R1, 144 */
		/* 820E25A0h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E25A0h case   20:*/		return 0x820E25A4;
		  /* 820E25A4h */ case   21:  		/* addi R4, R1, 144 */
		/* 820E25A4h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 820E25A4h case   21:*/		return 0x820E25A8;
		  /* 820E25A8h */ case   22:  		/* mr R3, R31 */
		/* 820E25A8h case   22:*/		regs.R3 = regs.R31;
		/* 820E25A8h case   22:*/		return 0x820E25AC;
		  /* 820E25ACh */ case   23:  		/* lwz R11, <#[R11 + 424]> */
		/* 820E25ACh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001A8) );
		/* 820E25ACh case   23:*/		return 0x820E25B0;
		  /* 820E25B0h */ case   24:  		/* mtspr CTR, R11 */
		/* 820E25B0h case   24:*/		regs.CTR = regs.R11;
		/* 820E25B0h case   24:*/		return 0x820E25B4;
		  /* 820E25B4h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820E25B4h case   25:*/		if ( 1 ) { regs.LR = 0x820E25B8; return (uint32)regs.CTR; }
		/* 820E25B4h case   25:*/		return 0x820E25B8;
		  /* 820E25B8h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E25B8h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E25B8h case   26:*/		return 0x820E25BC;
		  /* 820E25BCh */ case   27:  		/* bc 12, CR0_LT, 192 */
		/* 820E25BCh case   27:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E25BCh case   27:*/		return 0x820E25C0;
		  /* 820E25C0h */ case   28:  		/* mr R4, R25 */
		/* 820E25C0h case   28:*/		regs.R4 = regs.R25;
		/* 820E25C0h case   28:*/		return 0x820E25C4;
		  /* 820E25C4h */ case   29:  		/* mr R3, R31 */
		/* 820E25C4h case   29:*/		regs.R3 = regs.R31;
		/* 820E25C4h case   29:*/		return 0x820E25C8;
		  /* 820E25C8h */ case   30:  		/* bl -34032 */
		/* 820E25C8h case   30:*/		regs.LR = 0x820E25CC; return 0x820DA0D8;
		/* 820E25C8h case   30:*/		return 0x820E25CC;
		  /* 820E25CCh */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820E25CCh case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E25CCh case   31:*/		return 0x820E25D0;
		  /* 820E25D0h */ case   32:  		/* bc 12, CR0_LT, 172 */
		/* 820E25D0h case   32:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E25D0h case   32:*/		return 0x820E25D4;
		  /* 820E25D4h */ case   33:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E25D4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E25D4h case   33:*/		return 0x820E25D8;
		  /* 820E25D8h */ case   34:  		/* addi R30, R30, 1 */
		/* 820E25D8h case   34:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E25D8h case   34:*/		return 0x820E25DC;
		  /* 820E25DCh */ case   35:  		/* cmplw CR6, R30, R11 */
		/* 820E25DCh case   35:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E25DCh case   35:*/		return 0x820E25E0;
		  /* 820E25E0h */ case   36:  		/* bc 12, CR6_LT, -128 */
		/* 820E25E0h case   36:*/		if ( regs.CR[6].lt ) { return 0x820E2560;  }
		/* 820E25E0h case   36:*/		return 0x820E25E4;
	}
	return 0x820E25E4;
} // Block from 820E2550h-820E25E4h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820E25E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E25E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E25E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E25E4);
		  /* 820E25E4h */ case    0:  		/* mr R30, R24 */
		/* 820E25E4h case    0:*/		regs.R30 = regs.R24;
		/* 820E25E4h case    0:*/		return 0x820E25E8;
		  /* 820E25E8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E25E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E25E8h case    1:*/		return 0x820E25EC;
		  /* 820E25ECh */ case    2:  		/* bc 12, CR6_EQ, 140 */
		/* 820E25ECh case    2:*/		if ( regs.CR[6].eq ) { return 0x820E2678;  }
		/* 820E25ECh case    2:*/		return 0x820E25F0;
		  /* 820E25F0h */ case    3:  		/* mr R3, R31 */
		/* 820E25F0h case    3:*/		regs.R3 = regs.R31;
		/* 820E25F0h case    3:*/		return 0x820E25F4;
		  /* 820E25F4h */ case    4:  		/* bl -33860 */
		/* 820E25F4h case    4:*/		regs.LR = 0x820E25F8; return 0x820DA1B0;
		/* 820E25F4h case    4:*/		return 0x820E25F8;
		  /* 820E25F8h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E25F8h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E25F8h case    5:*/		return 0x820E25FC;
		  /* 820E25FCh */ case    6:  		/* bc 12, CR0_LT, 128 */
		/* 820E25FCh case    6:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E25FCh case    6:*/		return 0x820E2600;
		  /* 820E2600h */ case    7:  		/* mr R7, R30 */
		/* 820E2600h case    7:*/		regs.R7 = regs.R30;
		/* 820E2600h case    7:*/		return 0x820E2604;
		  /* 820E2604h */ case    8:  		/* mr R6, R30 */
		/* 820E2604h case    8:*/		regs.R6 = regs.R30;
		/* 820E2604h case    8:*/		return 0x820E2608;
		  /* 820E2608h */ case    9:  		/* addi R5, R1, 240 */
		/* 820E2608h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820E2608h case    9:*/		return 0x820E260C;
		  /* 820E260Ch */ case   10:  		/* li R4, 31 */
		/* 820E260Ch case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1F);
		/* 820E260Ch case   10:*/		return 0x820E2610;
		  /* 820E2610h */ case   11:  		/* addi R3, R1, 209 */
		/* 820E2610h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD1);
		/* 820E2610h case   11:*/		return 0x820E2614;
		  /* 820E2614h */ case   12:  		/* bl -262100 */
		/* 820E2614h case   12:*/		regs.LR = 0x820E2618; return 0x820A2640;
		/* 820E2614h case   12:*/		return 0x820E2618;
		  /* 820E2618h */ case   13:  		/* stb R23, <#[R1 + 208]> */
		/* 820E2618h case   13:*/		cpu::mem::store8( regs, regs.R23, (uint32)(regs.R1 + 0x000000D0) );
		/* 820E2618h case   13:*/		return 0x820E261C;
		  /* 820E261Ch */ case   14:  		/* mr R5, R29 */
		/* 820E261Ch case   14:*/		regs.R5 = regs.R29;
		/* 820E261Ch case   14:*/		return 0x820E2620;
		  /* 820E2620h */ case   15:  		/* mr R6, R30 */
		/* 820E2620h case   15:*/		regs.R6 = regs.R30;
		/* 820E2620h case   15:*/		return 0x820E2624;
		  /* 820E2624h */ case   16:  		/* li R4, 32 */
		/* 820E2624h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E2624h case   16:*/		return 0x820E2628;
		  /* 820E2628h */ case   17:  		/* addi R3, R1, 144 */
		/* 820E2628h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E2628h case   17:*/		return 0x820E262C;
		  /* 820E262Ch */ case   18:  		/* bl -262124 */
		/* 820E262Ch case   18:*/		regs.LR = 0x820E2630; return 0x820A2640;
		/* 820E262Ch case   18:*/		return 0x820E2630;
		  /* 820E2630h */ case   19:  		/* lwz R11, <#[R31]> */
		/* 820E2630h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E2630h case   19:*/		return 0x820E2634;
		  /* 820E2634h */ case   20:  		/* addi R5, R1, 144 */
		/* 820E2634h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 820E2634h case   20:*/		return 0x820E2638;
		  /* 820E2638h */ case   21:  		/* addi R4, R1, 208 */
		/* 820E2638h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 820E2638h case   21:*/		return 0x820E263C;
		  /* 820E263Ch */ case   22:  		/* mr R3, R31 */
		/* 820E263Ch case   22:*/		regs.R3 = regs.R31;
		/* 820E263Ch case   22:*/		return 0x820E2640;
		  /* 820E2640h */ case   23:  		/* lwz R11, <#[R11 + 444]> */
		/* 820E2640h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000001BC) );
		/* 820E2640h case   23:*/		return 0x820E2644;
		  /* 820E2644h */ case   24:  		/* mtspr CTR, R11 */
		/* 820E2644h case   24:*/		regs.CTR = regs.R11;
		/* 820E2644h case   24:*/		return 0x820E2648;
		  /* 820E2648h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820E2648h case   25:*/		if ( 1 ) { regs.LR = 0x820E264C; return (uint32)regs.CTR; }
		/* 820E2648h case   25:*/		return 0x820E264C;
		  /* 820E264Ch */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E264Ch case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E264Ch case   26:*/		return 0x820E2650;
		  /* 820E2650h */ case   27:  		/* bc 12, CR0_LT, 44 */
		/* 820E2650h case   27:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2650h case   27:*/		return 0x820E2654;
		  /* 820E2654h */ case   28:  		/* mr R4, R25 */
		/* 820E2654h case   28:*/		regs.R4 = regs.R25;
		/* 820E2654h case   28:*/		return 0x820E2658;
		  /* 820E2658h */ case   29:  		/* mr R3, R31 */
		/* 820E2658h case   29:*/		regs.R3 = regs.R31;
		/* 820E2658h case   29:*/		return 0x820E265C;
		  /* 820E265Ch */ case   30:  		/* bl -34180 */
		/* 820E265Ch case   30:*/		regs.LR = 0x820E2660; return 0x820DA0D8;
		/* 820E265Ch case   30:*/		return 0x820E2660;
		  /* 820E2660h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820E2660h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2660h case   31:*/		return 0x820E2664;
		  /* 820E2664h */ case   32:  		/* bc 12, CR0_LT, 24 */
		/* 820E2664h case   32:*/		if ( regs.CR[0].lt ) { return 0x820E267C;  }
		/* 820E2664h case   32:*/		return 0x820E2668;
		  /* 820E2668h */ case   33:  		/* lwz R11, <#[R31 + 1816]> */
		/* 820E2668h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000718) );
		/* 820E2668h case   33:*/		return 0x820E266C;
		  /* 820E266Ch */ case   34:  		/* addi R30, R30, 1 */
		/* 820E266Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E266Ch case   34:*/		return 0x820E2670;
		  /* 820E2670h */ case   35:  		/* cmplw CR6, R30, R11 */
		/* 820E2670h case   35:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E2670h case   35:*/		return 0x820E2674;
		  /* 820E2674h */ case   36:  		/* bc 12, CR6_LT, -132 */
		/* 820E2674h case   36:*/		if ( regs.CR[6].lt ) { return 0x820E25F0;  }
		/* 820E2674h case   36:*/		return 0x820E2678;
	}
	return 0x820E2678;
} // Block from 820E25E4h-820E2678h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820E2678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2678);
		  /* 820E2678h */ case    0:  		/* li R3, 0 */
		/* 820E2678h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E2678h case    0:*/		return 0x820E267C;
	}
	return 0x820E267C;
} // Block from 820E2678h-820E267Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E267Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E267C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E267C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E267C);
		  /* 820E267Ch */ case    0:  		/* addi R1, R1, 416 */
		/* 820E267Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 820E267Ch case    0:*/		return 0x820E2680;
		  /* 820E2680h */ case    1:  		/* b -332780 */
		/* 820E2680h case    1:*/		return 0x82091294;
		/* 820E2680h case    1:*/		return 0x820E2684;
		  /* 820E2684h */ case    2:  		/* nop */
		/* 820E2684h case    2:*/		cpu::op::nop();
		/* 820E2684h case    2:*/		return 0x820E2688;
	}
	return 0x820E2688;
} // Block from 820E267Ch-820E2688h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E2688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2688);
		  /* 820E2688h */ case    0:  		/* mfspr R12, LR */
		/* 820E2688h case    0:*/		regs.R12 = regs.LR;
		/* 820E2688h case    0:*/		return 0x820E268C;
		  /* 820E268Ch */ case    1:  		/* bl -332888 */
		/* 820E268Ch case    1:*/		regs.LR = 0x820E2690; return 0x82091234;
		/* 820E268Ch case    1:*/		return 0x820E2690;
		  /* 820E2690h */ case    2:  		/* stwu R1, <#[R1 - 528]> */
		/* 820E2690h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDF0);
		/* 820E2690h case    2:*/		return 0x820E2694;
		  /* 820E2694h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 820E2694h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820E2694h case    3:*/		return 0x820E2698;
		  /* 820E2698h */ case    4:  		/* mr R25, R10 */
		/* 820E2698h case    4:*/		regs.R25 = regs.R10;
		/* 820E2698h case    4:*/		return 0x820E269C;
		  /* 820E269Ch */ case    5:  		/* lwz R10, <#[R6]> */
		/* 820E269Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 820E269Ch case    5:*/		return 0x820E26A0;
		  /* 820E26A0h */ case    6:  		/* mr R26, R9 */
		/* 820E26A0h case    6:*/		regs.R26 = regs.R9;
		/* 820E26A0h case    6:*/		return 0x820E26A4;
		  /* 820E26A4h */ case    7:  		/* lwz R9, <#[R3 + 20]> */
		/* 820E26A4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820E26A4h case    7:*/		return 0x820E26A8;
		  /* 820E26A8h */ case    8:  		/* mr R19, R5 */
		/* 820E26A8h case    8:*/		regs.R19 = regs.R5;
		/* 820E26A8h case    8:*/		return 0x820E26AC;
		  /* 820E26ACh */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E26ACh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E26ACh case    9:*/		return 0x820E26B0;
		  /* 820E26B0h */ case   10:  		/* mr R30, R6 */
		/* 820E26B0h case   10:*/		regs.R30 = regs.R6;
		/* 820E26B0h case   10:*/		return 0x820E26B4;
		  /* 820E26B4h */ case   11:  		/* lwz R11, <#[R11 + 320]> */
		/* 820E26B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000140) );
		/* 820E26B4h case   11:*/		return 0x820E26B8;
		  /* 820E26B8h */ case   12:  		/* mr R29, R7 */
		/* 820E26B8h case   12:*/		regs.R29 = regs.R7;
		/* 820E26B8h case   12:*/		return 0x820E26BC;
		  /* 820E26BCh */ case   13:  		/* addi R7, R1, 216 */
		/* 820E26BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD8);
		/* 820E26BCh case   13:*/		return 0x820E26C0;
		  /* 820E26C0h */ case   14:  		/* addi R6, R1, 192 */
		/* 820E26C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820E26C0h case   14:*/		return 0x820E26C4;
		  /* 820E26C4h */ case   15:  		/* addi R5, R1, 212 */
		/* 820E26C4h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD4);
		/* 820E26C4h case   15:*/		return 0x820E26C8;
		  /* 820E26C8h */ case   16:  		/* mr R20, R4 */
		/* 820E26C8h case   16:*/		regs.R20 = regs.R4;
		/* 820E26C8h case   16:*/		return 0x820E26CC;
		  /* 820E26CCh */ case   17:  		/* lwzx R4, <#[R10 + R9]> */
		/* 820E26CCh case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E26CCh case   17:*/		return 0x820E26D0;
		  /* 820E26D0h */ case   18:  		/* mr R31, R3 */
		/* 820E26D0h case   18:*/		regs.R31 = regs.R3;
		/* 820E26D0h case   18:*/		return 0x820E26D4;
		  /* 820E26D4h */ case   19:  		/* mtspr CTR, R11 */
		/* 820E26D4h case   19:*/		regs.CTR = regs.R11;
		/* 820E26D4h case   19:*/		return 0x820E26D8;
		  /* 820E26D8h */ case   20:  		/* mr R28, R8 */
		/* 820E26D8h case   20:*/		regs.R28 = regs.R8;
		/* 820E26D8h case   20:*/		return 0x820E26DC;
		  /* 820E26DCh */ case   21:  		/* li R23, 0 */
		/* 820E26DCh case   21:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 820E26DCh case   21:*/		return 0x820E26E0;
		  /* 820E26E0h */ case   22:  		/* li R21, 0 */
		/* 820E26E0h case   22:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 820E26E0h case   22:*/		return 0x820E26E4;
		  /* 820E26E4h */ case   23:  		/* li R22, 0 */
		/* 820E26E4h case   23:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 820E26E4h case   23:*/		return 0x820E26E8;
		  /* 820E26E8h */ case   24:  		/* li R27, 0 */
		/* 820E26E8h case   24:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E26E8h case   24:*/		return 0x820E26EC;
		  /* 820E26ECh */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820E26ECh case   25:*/		if ( 1 ) { regs.LR = 0x820E26F0; return (uint32)regs.CTR; }
		/* 820E26ECh case   25:*/		return 0x820E26F0;
		  /* 820E26F0h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E26F0h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E26F0h case   26:*/		return 0x820E26F4;
		  /* 820E26F4h */ case   27:  		/* bc 12, CR0_LT, 1000 */
		/* 820E26F4h case   27:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E26F4h case   27:*/		return 0x820E26F8;
		  /* 820E26F8h */ case   28:  		/* lwz R11, <#[R31]> */
		/* 820E26F8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E26F8h case   28:*/		return 0x820E26FC;
		  /* 820E26FCh */ case   29:  		/* addi R6, R1, 196 */
		/* 820E26FCh case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC4);
		/* 820E26FCh case   29:*/		return 0x820E2700;
		  /* 820E2700h */ case   30:  		/* mr R5, R29 */
		/* 820E2700h case   30:*/		regs.R5 = regs.R29;
		/* 820E2700h case   30:*/		return 0x820E2704;
		  /* 820E2704h */ case   31:  		/* lwz R7, <#[R1 + 216]> */
		/* 820E2704h case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000D8) );
		/* 820E2704h case   31:*/		return 0x820E2708;
		  /* 820E2708h */ case   32:  		/* mr R4, R30 */
		/* 820E2708h case   32:*/		regs.R4 = regs.R30;
		/* 820E2708h case   32:*/		return 0x820E270C;
		  /* 820E270Ch */ case   33:  		/* mr R3, R31 */
		/* 820E270Ch case   33:*/		regs.R3 = regs.R31;
		/* 820E270Ch case   33:*/		return 0x820E2710;
		  /* 820E2710h */ case   34:  		/* lwz R11, <#[R11 + 324]> */
		/* 820E2710h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000144) );
		/* 820E2710h case   34:*/		return 0x820E2714;
		  /* 820E2714h */ case   35:  		/* mtspr CTR, R11 */
		/* 820E2714h case   35:*/		regs.CTR = regs.R11;
		/* 820E2714h case   35:*/		return 0x820E2718;
		  /* 820E2718h */ case   36:  		/* bcctrl 20, CR0_LT */
		/* 820E2718h case   36:*/		if ( 1 ) { regs.LR = 0x820E271C; return (uint32)regs.CTR; }
		/* 820E2718h case   36:*/		return 0x820E271C;
		  /* 820E271Ch */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 820E271Ch case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E271Ch case   37:*/		return 0x820E2720;
		  /* 820E2720h */ case   38:  		/* bc 12, CR0_LT, 956 */
		/* 820E2720h case   38:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2720h case   38:*/		return 0x820E2724;
		  /* 820E2724h */ case   39:  		/* lwz R24, <#[R1 + 652]> */
		/* 820E2724h case   39:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x0000028C) );
		/* 820E2724h case   39:*/		return 0x820E2728;
		  /* 820E2728h */ case   40:  		/* cmplwi CR6, R24, 0 */
		/* 820E2728h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820E2728h case   40:*/		return 0x820E272C;
		  /* 820E272Ch */ case   41:  		/* bc 12, CR6_EQ, 28 */
		/* 820E272Ch case   41:*/		if ( regs.CR[6].eq ) { return 0x820E2748;  }
		/* 820E272Ch case   41:*/		return 0x820E2730;
		  /* 820E2730h */ case   42:  		/* lwz R11, <#[R24]> */
		/* 820E2730h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 820E2730h case   42:*/		return 0x820E2734;
		  /* 820E2734h */ case   43:  		/* lis R10, 1 */
		/* 820E2734h case   43:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 820E2734h case   43:*/		return 0x820E2738;
		  /* 820E2738h */ case   44:  		/* slw R11, R10, R11 */
		/* 820E2738h case   44:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820E2738h case   44:*/		return 0x820E273C;
		  /* 820E273Ch */ case   45:  		/* stw R11, <#[R1 + 196]> */
		/* 820E273Ch case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000C4) );
		/* 820E273Ch case   45:*/		return 0x820E2740;
		  /* 820E2740h */ case   46:  		/* mr R30, R11 */
		/* 820E2740h case   46:*/		regs.R30 = regs.R11;
		/* 820E2740h case   46:*/		return 0x820E2744;
		  /* 820E2744h */ case   47:  		/* b 24 */
		/* 820E2744h case   47:*/		return 0x820E275C;
		/* 820E2744h case   47:*/		return 0x820E2748;
	}
	return 0x820E2748;
} // Block from 820E2688h-820E2748h (48 instructions)

//////////////////////////////////////////////////////
// Block at 820E2748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2748);
		  /* 820E2748h */ case    0:  		/* lwz R11, <#[R31 + 1820]> */
		/* 820E2748h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000071C) );
		/* 820E2748h case    0:*/		return 0x820E274C;
		  /* 820E274Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E274Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E274Ch case    1:*/		return 0x820E2750;
		  /* 820E2750h */ case    2:  		/* mr R30, R11 */
		/* 820E2750h case    2:*/		regs.R30 = regs.R11;
		/* 820E2750h case    2:*/		return 0x820E2754;
		  /* 820E2754h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 820E2754h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E275C;  }
		/* 820E2754h case    3:*/		return 0x820E2758;
		  /* 820E2758h */ case    4:  		/* lwz R30, <#[R1 + 196]> */
		/* 820E2758h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000C4) );
		/* 820E2758h case    4:*/		return 0x820E275C;
	}
	return 0x820E275C;
} // Block from 820E2748h-820E275Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E275Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E275C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E275C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E275C);
		  /* 820E275Ch */ case    0:  		/* lwz R29, <#[R1 + 612]> */
		/* 820E275Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000264) );
		/* 820E275Ch case    0:*/		return 0x820E2760;
		  /* 820E2760h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 820E2760h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820E2760h case    1:*/		return 0x820E2764;
		  /* 820E2764h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 820E2764h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E27D0;  }
		/* 820E2764h case    2:*/		return 0x820E2768;
		  /* 820E2768h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 820E2768h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E2768h case    3:*/		return 0x820E276C;
		  /* 820E276Ch */ case    4:  		/* addi R6, R1, 240 */
		/* 820E276Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF0);
		/* 820E276Ch case    4:*/		return 0x820E2770;
		  /* 820E2770h */ case    5:  		/* lwz R10, <#[R28]> */
		/* 820E2770h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 820E2770h case    5:*/		return 0x820E2774;
		  /* 820E2774h */ case    6:  		/* addi R5, R1, 200 */
		/* 820E2774h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC8);
		/* 820E2774h case    6:*/		return 0x820E2778;
		  /* 820E2778h */ case    7:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E2778h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E2778h case    7:*/		return 0x820E277C;
		  /* 820E277Ch */ case    8:  		/* mr R3, R31 */
		/* 820E277Ch case    8:*/		regs.R3 = regs.R31;
		/* 820E277Ch case    8:*/		return 0x820E2780;
		  /* 820E2780h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E2780h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E2780h case    9:*/		return 0x820E2784;
		  /* 820E2784h */ case   10:  		/* lwz R11, <#[R11 + 328]> */
		/* 820E2784h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000148) );
		/* 820E2784h case   10:*/		return 0x820E2788;
		  /* 820E2788h */ case   11:  		/* lwzx R4, <#[R10 + R9]> */
		/* 820E2788h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E2788h case   11:*/		return 0x820E278C;
		  /* 820E278Ch */ case   12:  		/* mtspr CTR, R11 */
		/* 820E278Ch case   12:*/		regs.CTR = regs.R11;
		/* 820E278Ch case   12:*/		return 0x820E2790;
		  /* 820E2790h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 820E2790h case   13:*/		if ( 1 ) { regs.LR = 0x820E2794; return (uint32)regs.CTR; }
		/* 820E2790h case   13:*/		return 0x820E2794;
		  /* 820E2794h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E2794h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2794h case   14:*/		return 0x820E2798;
		  /* 820E2798h */ case   15:  		/* bc 12, CR0_LT, 836 */
		/* 820E2798h case   15:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2798h case   15:*/		return 0x820E279C;
		  /* 820E279Ch */ case   16:  		/* lwz R11, <#[R31]> */
		/* 820E279Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E279Ch case   16:*/		return 0x820E27A0;
		  /* 820E27A0h */ case   17:  		/* addi R7, R1, 224 */
		/* 820E27A0h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE0);
		/* 820E27A0h case   17:*/		return 0x820E27A4;
		  /* 820E27A4h */ case   18:  		/* mr R6, R30 */
		/* 820E27A4h case   18:*/		regs.R6 = regs.R30;
		/* 820E27A4h case   18:*/		return 0x820E27A8;
		  /* 820E27A8h */ case   19:  		/* mr R5, R29 */
		/* 820E27A8h case   19:*/		regs.R5 = regs.R29;
		/* 820E27A8h case   19:*/		return 0x820E27AC;
		  /* 820E27ACh */ case   20:  		/* mr R4, R28 */
		/* 820E27ACh case   20:*/		regs.R4 = regs.R28;
		/* 820E27ACh case   20:*/		return 0x820E27B0;
		  /* 820E27B0h */ case   21:  		/* mr R3, R31 */
		/* 820E27B0h case   21:*/		regs.R3 = regs.R31;
		/* 820E27B0h case   21:*/		return 0x820E27B4;
		  /* 820E27B4h */ case   22:  		/* lwz R11, <#[R11 + 332]> */
		/* 820E27B4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E27B4h case   22:*/		return 0x820E27B8;
		  /* 820E27B8h */ case   23:  		/* mtspr CTR, R11 */
		/* 820E27B8h case   23:*/		regs.CTR = regs.R11;
		/* 820E27B8h case   23:*/		return 0x820E27BC;
		  /* 820E27BCh */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 820E27BCh case   24:*/		if ( 1 ) { regs.LR = 0x820E27C0; return (uint32)regs.CTR; }
		/* 820E27BCh case   24:*/		return 0x820E27C0;
		  /* 820E27C0h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 820E27C0h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E27C0h case   25:*/		return 0x820E27C4;
		  /* 820E27C4h */ case   26:  		/* bc 12, CR0_LT, 792 */
		/* 820E27C4h case   26:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E27C4h case   26:*/		return 0x820E27C8;
		  /* 820E27C8h */ case   27:  		/* addi R23, R1, 384 */
		/* 820E27C8h case   27:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R1,0x180);
		/* 820E27C8h case   27:*/		return 0x820E27CC;
		  /* 820E27CCh */ case   28:  		/* li R27, 1 */
		/* 820E27CCh case   28:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E27CCh case   28:*/		return 0x820E27D0;
	}
	return 0x820E27D0;
} // Block from 820E275Ch-820E27D0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820E27D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E27D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E27D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E27D0);
		  /* 820E27D0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 820E27D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820E27D0h case    0:*/		return 0x820E27D4;
		  /* 820E27D4h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 820E27D4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E2840;  }
		/* 820E27D4h case    1:*/		return 0x820E27D8;
		  /* 820E27D8h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 820E27D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E27D8h case    2:*/		return 0x820E27DC;
		  /* 820E27DCh */ case    3:  		/* addi R6, R1, 244 */
		/* 820E27DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF4);
		/* 820E27DCh case    3:*/		return 0x820E27E0;
		  /* 820E27E0h */ case    4:  		/* lwz R10, <#[R26]> */
		/* 820E27E0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 820E27E0h case    4:*/		return 0x820E27E4;
		  /* 820E27E4h */ case    5:  		/* addi R5, R1, 204 */
		/* 820E27E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xCC);
		/* 820E27E4h case    5:*/		return 0x820E27E8;
		  /* 820E27E8h */ case    6:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E27E8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E27E8h case    6:*/		return 0x820E27EC;
		  /* 820E27ECh */ case    7:  		/* mr R3, R31 */
		/* 820E27ECh case    7:*/		regs.R3 = regs.R31;
		/* 820E27ECh case    7:*/		return 0x820E27F0;
		  /* 820E27F0h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E27F0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E27F0h case    8:*/		return 0x820E27F4;
		  /* 820E27F4h */ case    9:  		/* lwz R11, <#[R11 + 328]> */
		/* 820E27F4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000148) );
		/* 820E27F4h case    9:*/		return 0x820E27F8;
	}
	return 0x820E27F8;
} // Block from 820E27D0h-820E27F8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E27F8h
// Function '?EmitMOVASW@C30SWProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E27F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E27F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E27F8);
		  /* 820E27F8h */ case    0:  		/* lwzx R4, <#[R10 + R9]> */
		/* 820E27F8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E27F8h case    0:*/		return 0x820E27FC;
		  /* 820E27FCh */ case    1:  		/* mtspr CTR, R11 */
		/* 820E27FCh case    1:*/		regs.CTR = regs.R11;
		/* 820E27FCh case    1:*/		return 0x820E2800;
		  /* 820E2800h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 820E2800h case    2:*/		if ( 1 ) { regs.LR = 0x820E2804; return (uint32)regs.CTR; }
		/* 820E2800h case    2:*/		return 0x820E2804;
		  /* 820E2804h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820E2804h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2804h case    3:*/		return 0x820E2808;
		  /* 820E2808h */ case    4:  		/* bc 12, CR0_LT, 724 */
		/* 820E2808h case    4:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2808h case    4:*/		return 0x820E280C;
		  /* 820E280Ch */ case    5:  		/* lwz R11, <#[R31]> */
		/* 820E280Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E280Ch case    5:*/		return 0x820E2810;
		  /* 820E2810h */ case    6:  		/* addi R7, R1, 228 */
		/* 820E2810h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE4);
		/* 820E2810h case    6:*/		return 0x820E2814;
		  /* 820E2814h */ case    7:  		/* mr R6, R30 */
		/* 820E2814h case    7:*/		regs.R6 = regs.R30;
		/* 820E2814h case    7:*/		return 0x820E2818;
		  /* 820E2818h */ case    8:  		/* mr R5, R29 */
		/* 820E2818h case    8:*/		regs.R5 = regs.R29;
		/* 820E2818h case    8:*/		return 0x820E281C;
		  /* 820E281Ch */ case    9:  		/* mr R4, R26 */
		/* 820E281Ch case    9:*/		regs.R4 = regs.R26;
		/* 820E281Ch case    9:*/		return 0x820E2820;
		  /* 820E2820h */ case   10:  		/* mr R3, R31 */
		/* 820E2820h case   10:*/		regs.R3 = regs.R31;
		/* 820E2820h case   10:*/		return 0x820E2824;
		  /* 820E2824h */ case   11:  		/* lwz R11, <#[R11 + 332]> */
		/* 820E2824h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E2824h case   11:*/		return 0x820E2828;
		  /* 820E2828h */ case   12:  		/* mtspr CTR, R11 */
		/* 820E2828h case   12:*/		regs.CTR = regs.R11;
		/* 820E2828h case   12:*/		return 0x820E282C;
		  /* 820E282Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 820E282Ch case   13:*/		if ( 1 ) { regs.LR = 0x820E2830; return (uint32)regs.CTR; }
		/* 820E282Ch case   13:*/		return 0x820E2830;
		  /* 820E2830h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820E2830h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2830h case   14:*/		return 0x820E2834;
		  /* 820E2834h */ case   15:  		/* bc 12, CR0_LT, 680 */
		/* 820E2834h case   15:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2834h case   15:*/		return 0x820E2838;
		  /* 820E2838h */ case   16:  		/* addi R21, R1, 352 */
		/* 820E2838h case   16:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R1,0x160);
		/* 820E2838h case   16:*/		return 0x820E283C;
		  /* 820E283Ch */ case   17:  		/* li R27, 2 */
		/* 820E283Ch case   17:*/		cpu::op::li<0>(regs,&regs.R27,0x2);
		/* 820E283Ch case   17:*/		return 0x820E2840;
	}
	return 0x820E2840;
} // Block from 820E27F8h-820E2840h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E2840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2840);
		  /* 820E2840h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 820E2840h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820E2840h case    0:*/		return 0x820E2844;
		  /* 820E2844h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 820E2844h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E28B0;  }
		/* 820E2844h case    1:*/		return 0x820E2848;
		  /* 820E2848h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 820E2848h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E2848h case    2:*/		return 0x820E284C;
		  /* 820E284Ch */ case    3:  		/* addi R6, R1, 248 */
		/* 820E284Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF8);
		/* 820E284Ch case    3:*/		return 0x820E2850;
		  /* 820E2850h */ case    4:  		/* lwz R10, <#[R25]> */
		/* 820E2850h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 820E2850h case    4:*/		return 0x820E2854;
		  /* 820E2854h */ case    5:  		/* addi R5, R1, 208 */
		/* 820E2854h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820E2854h case    5:*/		return 0x820E2858;
		  /* 820E2858h */ case    6:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E2858h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E2858h case    6:*/		return 0x820E285C;
		  /* 820E285Ch */ case    7:  		/* mr R3, R31 */
		/* 820E285Ch case    7:*/		regs.R3 = regs.R31;
		/* 820E285Ch case    7:*/		return 0x820E2860;
		  /* 820E2860h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E2860h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E2860h case    8:*/		return 0x820E2864;
		  /* 820E2864h */ case    9:  		/* lwz R11, <#[R11 + 328]> */
		/* 820E2864h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000148) );
		/* 820E2864h case    9:*/		return 0x820E2868;
		  /* 820E2868h */ case   10:  		/* lwzx R4, <#[R10 + R9]> */
		/* 820E2868h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E2868h case   10:*/		return 0x820E286C;
		  /* 820E286Ch */ case   11:  		/* mtspr CTR, R11 */
		/* 820E286Ch case   11:*/		regs.CTR = regs.R11;
		/* 820E286Ch case   11:*/		return 0x820E2870;
		  /* 820E2870h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 820E2870h case   12:*/		if ( 1 ) { regs.LR = 0x820E2874; return (uint32)regs.CTR; }
		/* 820E2870h case   12:*/		return 0x820E2874;
		  /* 820E2874h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820E2874h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2874h case   13:*/		return 0x820E2878;
		  /* 820E2878h */ case   14:  		/* bc 12, CR0_LT, 612 */
		/* 820E2878h case   14:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2878h case   14:*/		return 0x820E287C;
		  /* 820E287Ch */ case   15:  		/* lwz R11, <#[R31]> */
		/* 820E287Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E287Ch case   15:*/		return 0x820E2880;
		  /* 820E2880h */ case   16:  		/* addi R7, R1, 232 */
		/* 820E2880h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE8);
		/* 820E2880h case   16:*/		return 0x820E2884;
		  /* 820E2884h */ case   17:  		/* mr R6, R30 */
		/* 820E2884h case   17:*/		regs.R6 = regs.R30;
		/* 820E2884h case   17:*/		return 0x820E2888;
		  /* 820E2888h */ case   18:  		/* mr R5, R29 */
		/* 820E2888h case   18:*/		regs.R5 = regs.R29;
		/* 820E2888h case   18:*/		return 0x820E288C;
		  /* 820E288Ch */ case   19:  		/* mr R4, R25 */
		/* 820E288Ch case   19:*/		regs.R4 = regs.R25;
		/* 820E288Ch case   19:*/		return 0x820E2890;
		  /* 820E2890h */ case   20:  		/* mr R3, R31 */
		/* 820E2890h case   20:*/		regs.R3 = regs.R31;
		/* 820E2890h case   20:*/		return 0x820E2894;
		  /* 820E2894h */ case   21:  		/* lwz R11, <#[R11 + 332]> */
		/* 820E2894h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000014C) );
		/* 820E2894h case   21:*/		return 0x820E2898;
		  /* 820E2898h */ case   22:  		/* mtspr CTR, R11 */
		/* 820E2898h case   22:*/		regs.CTR = regs.R11;
		/* 820E2898h case   22:*/		return 0x820E289C;
		  /* 820E289Ch */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 820E289Ch case   23:*/		if ( 1 ) { regs.LR = 0x820E28A0; return (uint32)regs.CTR; }
		/* 820E289Ch case   23:*/		return 0x820E28A0;
		  /* 820E28A0h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820E28A0h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E28A0h case   24:*/		return 0x820E28A4;
		  /* 820E28A4h */ case   25:  		/* bc 12, CR0_LT, 568 */
		/* 820E28A4h case   25:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E28A4h case   25:*/		return 0x820E28A8;
		  /* 820E28A8h */ case   26:  		/* addi R22, R1, 320 */
		/* 820E28A8h case   26:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R1,0x140);
		/* 820E28A8h case   26:*/		return 0x820E28AC;
		  /* 820E28ACh */ case   27:  		/* li R27, 3 */
		/* 820E28ACh case   27:*/		cpu::op::li<0>(regs,&regs.R27,0x3);
		/* 820E28ACh case   27:*/		return 0x820E28B0;
	}
	return 0x820E28B0;
} // Block from 820E2840h-820E28B0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820E28B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E28B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E28B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E28B0);
		  /* 820E28B0h */ case    0:  		/* lwz R8, <#[R1 + 200]> */
		/* 820E28B0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000C8) );
		/* 820E28B0h case    0:*/		return 0x820E28B4;
		  /* 820E28B4h */ case    1:  		/* addi R4, R1, 320 */
		/* 820E28B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x140);
		/* 820E28B4h case    1:*/		return 0x820E28B8;
		  /* 820E28B8h */ case    2:  		/* lwz R7, <#[R1 + 204]> */
		/* 820E28B8h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000CC) );
		/* 820E28B8h case    2:*/		return 0x820E28BC;
		  /* 820E28BCh */ case    3:  		/* li R11, 32 */
		/* 820E28BCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 820E28BCh case    3:*/		return 0x820E28C0;
		  /* 820E28C0h */ case    4:  		/* lwz R6, <#[R1 + 208]> */
		/* 820E28C0h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000D0) );
		/* 820E28C0h case    4:*/		return 0x820E28C4;
		  /* 820E28C4h */ case    5:  		/* addi R30, R1, 352 */
		/* 820E28C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x160);
		/* 820E28C4h case    5:*/		return 0x820E28C8;
		  /* 820E28C8h */ case    6:  		/* lwz R5, <#[R1 + 620]> */
		/* 820E28C8h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000026C) );
		/* 820E28C8h case    6:*/		return 0x820E28CC;
		  /* 820E28CCh */ case    7:  		/* li R10, 32 */
		/* 820E28CCh case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 820E28CCh case    7:*/		return 0x820E28D0;
		  /* 820E28D0h */ case    8:  		/* lwz R3, <#[R1 + 628]> */
		/* 820E28D0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000274) );
		/* 820E28D0h case    8:*/		return 0x820E28D4;
		  /* 820E28D4h */ case    9:  		/* addi R9, R1, 384 */
		/* 820E28D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x180);
		/* 820E28D4h case    9:*/		return 0x820E28D8;
		  /* 820E28D8h */ case   10:  		/* lwz R29, <#[R1 + 636]> */
		/* 820E28D8h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000027C) );
		/* 820E28D8h case   10:*/		return 0x820E28DC;
		  /* 820E28DCh */ case   11:  		/* xor R8, R8, R5 */
		/* 820E28DCh case   11:*/		cpu::op::xor<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 820E28DCh case   11:*/		return 0x820E28E0;
		  /* 820E28E0h */ case   12:  		/* xor R7, R7, R3 */
		/* 820E28E0h case   12:*/		cpu::op::xor<0>(regs,&regs.R7,regs.R7,regs.R3);
		/* 820E28E0h case   12:*/		return 0x820E28E4;
		  /* 820E28E4h */ case   13:  		/* stw R4, <#[R1 + 100]> */
		/* 820E28E4h case   13:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000064) );
		/* 820E28E4h case   13:*/		return 0x820E28E8;
		  /* 820E28E8h */ case   14:  		/* xor R6, R6, R29 */
		/* 820E28E8h case   14:*/		cpu::op::xor<0>(regs,&regs.R6,regs.R6,regs.R29);
		/* 820E28E8h case   14:*/		return 0x820E28EC;
		  /* 820E28ECh */ case   15:  		/* stw R8, <#[R1 + 200]> */
		/* 820E28ECh case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000C8) );
		/* 820E28ECh case   15:*/		return 0x820E28F0;
		  /* 820E28F0h */ case   16:  		/* stw R7, <#[R1 + 204]> */
		/* 820E28F0h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000CC) );
		/* 820E28F0h case   16:*/		return 0x820E28F4;
		  /* 820E28F4h */ case   17:  		/* addi R8, R1, 224 */
		/* 820E28F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 820E28F4h case   17:*/		return 0x820E28F8;
		  /* 820E28F8h */ case   18:  		/* stw R6, <#[R1 + 208]> */
		/* 820E28F8h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000D0) );
		/* 820E28F8h case   18:*/		return 0x820E28FC;
		  /* 820E28FCh */ case   19:  		/* addi R7, R1, 240 */
		/* 820E28FCh case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF0);
		/* 820E28FCh case   19:*/		return 0x820E2900;
		  /* 820E2900h */ case   20:  		/* addi R6, R1, 200 */
		/* 820E2900h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC8);
		/* 820E2900h case   20:*/		return 0x820E2904;
		  /* 820E2904h */ case   21:  		/* stw R24, <#[R1 + 116]> */
		/* 820E2904h case   21:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000074) );
		/* 820E2904h case   21:*/		return 0x820E2908;
		  /* 820E2908h */ case   22:  		/* mr R5, R27 */
		/* 820E2908h case   22:*/		regs.R5 = regs.R27;
		/* 820E2908h case   22:*/		return 0x820E290C;
		  /* 820E290Ch */ case   23:  		/* stw R11, <#[R1 + 108]> */
		/* 820E290Ch case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E290Ch case   23:*/		return 0x820E2910;
		  /* 820E2910h */ case   24:  		/* li R4, 0 */
		/* 820E2910h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2910h case   24:*/		return 0x820E2914;
		  /* 820E2914h */ case   25:  		/* stw R11, <#[R1 + 92]> */
		/* 820E2914h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820E2914h case   25:*/		return 0x820E2918;
		  /* 820E2918h */ case   26:  		/* mr R3, R31 */
		/* 820E2918h case   26:*/		regs.R3 = regs.R31;
		/* 820E2918h case   26:*/		return 0x820E291C;
		  /* 820E291Ch */ case   27:  		/* stw R30, <#[R1 + 84]> */
		/* 820E291Ch case   27:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 820E291Ch case   27:*/		return 0x820E2920;
		  /* 820E2920h */ case   28:  		/* bl -9088 */
		/* 820E2920h case   28:*/		regs.LR = 0x820E2924; return 0x820E05A0;
		/* 820E2920h case   28:*/		return 0x820E2924;
		  /* 820E2924h */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 820E2924h case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2924h case   29:*/		return 0x820E2928;
		  /* 820E2928h */ case   30:  		/* bc 12, CR0_LT, 436 */
		/* 820E2928h case   30:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2928h case   30:*/		return 0x820E292C;
		  /* 820E292Ch */ case   31:  		/* lwz R4, <#[R1 + 196]> */
		/* 820E292Ch case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C4) );
		/* 820E292Ch case   31:*/		return 0x820E2930;
		  /* 820E2930h */ case   32:  		/* lis R30, 15 */
		/* 820E2930h case   32:*/		cpu::op::lis<0>(regs,&regs.R30,0xF);
		/* 820E2930h case   32:*/		return 0x820E2934;
		  /* 820E2934h */ case   33:  		/* cmplw CR6, R4, R30 */
		/* 820E2934h case   33:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R30);
		/* 820E2934h case   33:*/		return 0x820E2938;
		  /* 820E2938h */ case   34:  		/* bc 12, CR6_EQ, 32 */
		/* 820E2938h case   34:*/		if ( regs.CR[6].eq ) { return 0x820E2958;  }
		/* 820E2938h case   34:*/		return 0x820E293C;
		  /* 820E293Ch */ case   35:  		/* mr R3, R31 */
		/* 820E293Ch case   35:*/		regs.R3 = regs.R31;
		/* 820E293Ch case   35:*/		return 0x820E2940;
		  /* 820E2940h */ case   36:  		/* bl -34032 */
		/* 820E2940h case   36:*/		regs.LR = 0x820E2944; return 0x820DA450;
		/* 820E2940h case   36:*/		return 0x820E2944;
		  /* 820E2944h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 820E2944h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2944h case   37:*/		return 0x820E2948;
		  /* 820E2948h */ case   38:  		/* bc 12, CR0_LT, 404 */
		/* 820E2948h case   38:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2948h case   38:*/		return 0x820E294C;
		  /* 820E294Ch */ case   39:  		/* lwz R11, <#[R1 + 196]> */
		/* 820E294Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C4) );
		/* 820E294Ch case   39:*/		return 0x820E2950;
		  /* 820E2950h */ case   40:  		/* cmplw CR6, R11, R30 */
		/* 820E2950h case   40:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820E2950h case   40:*/		return 0x820E2954;
		  /* 820E2954h */ case   41:  		/* bc 4, CR6_EQ, 96 */
		/* 820E2954h case   41:*/		if ( !regs.CR[6].eq ) { return 0x820E29B4;  }
		/* 820E2954h case   41:*/		return 0x820E2958;
	}
	return 0x820E2958;
} // Block from 820E28B0h-820E2958h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820E2958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2958);
		  /* 820E2958h */ case    0:  		/* lwz R11, <#[R1 + 192]> */
		/* 820E2958h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E2958h case    0:*/		return 0x820E295C;
		  /* 820E295Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E295Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E295Ch case    1:*/		return 0x820E2960;
		  /* 820E2960h */ case    2:  		/* bc 4, CR6_EQ, 84 */
		/* 820E2960h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E29B4;  }
		/* 820E2960h case    2:*/		return 0x820E2964;
		  /* 820E2964h */ case    3:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E2964h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E2964h case    3:*/		return 0x820E2968;
		  /* 820E2968h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820E2968h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E2968h case    4:*/		return 0x820E296C;
		  /* 820E296Ch */ case    5:  		/* bc 12, CR6_GT, 72 */
		/* 820E296Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x820E29B4;  }
		/* 820E296Ch case    5:*/		return 0x820E2970;
		  /* 820E2970h */ case    6:  		/* li R7, 0 */
		/* 820E2970h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2970h case    6:*/		return 0x820E2974;
		  /* 820E2974h */ case    7:  		/* lwz R4, <#[R1 + 212]> */
		/* 820E2974h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D4) );
		/* 820E2974h case    7:*/		return 0x820E2978;
		  /* 820E2978h */ case    8:  		/* li R6, 32 */
		/* 820E2978h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820E2978h case    8:*/		return 0x820E297C;
		  /* 820E297Ch */ case    9:  		/* addi R5, R1, 288 */
		/* 820E297Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 820E297Ch case    9:*/		return 0x820E2980;
		  /* 820E2980h */ case   10:  		/* mr R3, R31 */
		/* 820E2980h case   10:*/		regs.R3 = regs.R31;
		/* 820E2980h case   10:*/		return 0x820E2984;
		  /* 820E2984h */ case   11:  		/* li R30, 0 */
		/* 820E2984h case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E2984h case   11:*/		return 0x820E2988;
		  /* 820E2988h */ case   12:  		/* bl -34352 */
		/* 820E2988h case   12:*/		regs.LR = 0x820E298C; return 0x820DA358;
		/* 820E2988h case   12:*/		return 0x820E298C;
		  /* 820E298Ch */ case   13:  		/* cmplwi CR6, R20, 0 */
		/* 820E298Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820E298Ch case   13:*/		return 0x820E2990;
		  /* 820E2990h */ case   14:  		/* mr R3, R31 */
		/* 820E2990h case   14:*/		regs.R3 = regs.R31;
		/* 820E2990h case   14:*/		return 0x820E2994;
		  /* 820E2994h */ case   15:  		/* bc 4, CR6_EQ, 60 */
		/* 820E2994h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E29D0;  }
		/* 820E2994h case   15:*/		return 0x820E2998;
		  /* 820E2998h */ case   16:  		/* mr R8, R22 */
		/* 820E2998h case   16:*/		regs.R8 = regs.R22;
		/* 820E2998h case   16:*/		return 0x820E299C;
		  /* 820E299Ch */ case   17:  		/* mr R7, R21 */
		/* 820E299Ch case   17:*/		regs.R7 = regs.R21;
		/* 820E299Ch case   17:*/		return 0x820E29A0;
		  /* 820E29A0h */ case   18:  		/* mr R6, R23 */
		/* 820E29A0h case   18:*/		regs.R6 = regs.R23;
		/* 820E29A0h case   18:*/		return 0x820E29A4;
		  /* 820E29A4h */ case   19:  		/* addi R5, R1, 288 */
		/* 820E29A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 820E29A4h case   19:*/		return 0x820E29A8;
		  /* 820E29A8h */ case   20:  		/* mr R4, R19 */
		/* 820E29A8h case   20:*/		regs.R4 = regs.R19;
		/* 820E29A8h case   20:*/		return 0x820E29AC;
		  /* 820E29ACh */ case   21:  		/* bl -34724 */
		/* 820E29ACh case   21:*/		regs.LR = 0x820E29B0; return 0x820DA208;
		/* 820E29ACh case   21:*/		return 0x820E29B0;
		  /* 820E29B0h */ case   22:  		/* b 56 */
		/* 820E29B0h case   22:*/		return 0x820E29E8;
		/* 820E29B0h case   22:*/		return 0x820E29B4;
	}
	return 0x820E29B4;
} // Block from 820E2958h-820E29B4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E29B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E29B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E29B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E29B4);
		  /* 820E29B4h */ case    0:  		/* lis R11, -32254 */
		/* 820E29B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E29B4h case    0:*/		return 0x820E29B8;
		  /* 820E29B8h */ case    1:  		/* li R4, 32 */
		/* 820E29B8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 820E29B8h case    1:*/		return 0x820E29BC;
		  /* 820E29BCh */ case    2:  		/* addi R5, R11, -30716 */
		/* 820E29BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF8804);
		/* 820E29BCh case    2:*/		return 0x820E29C0;
		  /* 820E29C0h */ case    3:  		/* addi R3, R1, 288 */
		/* 820E29C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 820E29C0h case    3:*/		return 0x820E29C4;
		  /* 820E29C4h */ case    4:  		/* li R30, 1 */
		/* 820E29C4h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 820E29C4h case    4:*/		return 0x820E29C8;
		  /* 820E29C8h */ case    5:  		/* bl -246488 */
		/* 820E29C8h case    5:*/		regs.LR = 0x820E29CC; return 0x820A66F0;
		/* 820E29C8h case    5:*/		return 0x820E29CC;
		  /* 820E29CCh */ case    6:  		/* b -64 */
		/* 820E29CCh case    6:*/		return 0x820E298C;
		/* 820E29CCh case    6:*/		return 0x820E29D0;
	}
	return 0x820E29D0;
} // Block from 820E29B4h-820E29D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E29D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E29D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E29D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E29D0);
		  /* 820E29D0h */ case    0:  		/* mr R7, R22 */
		/* 820E29D0h case    0:*/		regs.R7 = regs.R22;
		/* 820E29D0h case    0:*/		return 0x820E29D4;
		  /* 820E29D4h */ case    1:  		/* mtspr CTR, R20 */
		/* 820E29D4h case    1:*/		regs.CTR = regs.R20;
		/* 820E29D4h case    1:*/		return 0x820E29D8;
		  /* 820E29D8h */ case    2:  		/* mr R6, R21 */
		/* 820E29D8h case    2:*/		regs.R6 = regs.R21;
		/* 820E29D8h case    2:*/		return 0x820E29DC;
		  /* 820E29DCh */ case    3:  		/* mr R5, R23 */
		/* 820E29DCh case    3:*/		regs.R5 = regs.R23;
		/* 820E29DCh case    3:*/		return 0x820E29E0;
		  /* 820E29E0h */ case    4:  		/* addi R4, R1, 288 */
		/* 820E29E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x120);
		/* 820E29E0h case    4:*/		return 0x820E29E4;
		  /* 820E29E4h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 820E29E4h case    5:*/		if ( 1 ) { regs.LR = 0x820E29E8; return (uint32)regs.CTR; }
		/* 820E29E4h case    5:*/		return 0x820E29E8;
	}
	return 0x820E29E8;
} // Block from 820E29D0h-820E29E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E29E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E29E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E29E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E29E8);
		  /* 820E29E8h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 820E29E8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820E29E8h case    0:*/		return 0x820E29EC;
		  /* 820E29ECh */ case    1:  		/* bc 12, CR6_EQ, 216 */
		/* 820E29ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x820E2AC4;  }
		/* 820E29ECh case    1:*/		return 0x820E29F0;
		  /* 820E29F0h */ case    2:  		/* mr R3, R31 */
		/* 820E29F0h case    2:*/		regs.R3 = regs.R31;
		/* 820E29F0h case    2:*/		return 0x820E29F4;
		  /* 820E29F4h */ case    3:  		/* bl -34044 */
		/* 820E29F4h case    3:*/		regs.LR = 0x820E29F8; return 0x820DA4F8;
		/* 820E29F4h case    3:*/		return 0x820E29F8;
		  /* 820E29F8h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820E29F8h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E29F8h case    4:*/		return 0x820E29FC;
		  /* 820E29FCh */ case    5:  		/* bc 12, CR0_LT, 224 */
		/* 820E29FCh case    5:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E29FCh case    5:*/		return 0x820E2A00;
		  /* 820E2A00h */ case    6:  		/* li R7, 0 */
		/* 820E2A00h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2A00h case    6:*/		return 0x820E2A04;
		  /* 820E2A04h */ case    7:  		/* lwz R4, <#[R1 + 212]> */
		/* 820E2A04h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D4) );
		/* 820E2A04h case    7:*/		return 0x820E2A08;
		  /* 820E2A08h */ case    8:  		/* li R6, 32 */
		/* 820E2A08h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820E2A08h case    8:*/		return 0x820E2A0C;
		  /* 820E2A0Ch */ case    9:  		/* addi R5, R1, 256 */
		/* 820E2A0Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820E2A0Ch case    9:*/		return 0x820E2A10;
		  /* 820E2A10h */ case   10:  		/* mr R3, R31 */
		/* 820E2A10h case   10:*/		regs.R3 = regs.R31;
		/* 820E2A10h case   10:*/		return 0x820E2A14;
		  /* 820E2A14h */ case   11:  		/* bl -34492 */
		/* 820E2A14h case   11:*/		regs.LR = 0x820E2A18; return 0x820DA358;
		/* 820E2A14h case   11:*/		return 0x820E2A18;
		  /* 820E2A18h */ case   12:  		/* lwz R11, <#[R1 + 192]> */
		/* 820E2A18h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E2A18h case   12:*/		return 0x820E2A1C;
		  /* 820E2A1Ch */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820E2A1Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E2A1Ch case   13:*/		return 0x820E2A20;
		  /* 820E2A20h */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 820E2A20h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E2A34;  }
		/* 820E2A20h case   14:*/		return 0x820E2A24;
		  /* 820E2A24h */ case   15:  		/* lwz R11, <#[R31 + 1812]> */
		/* 820E2A24h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000714) );
		/* 820E2A24h case   15:*/		return 0x820E2A28;
		  /* 820E2A28h */ case   16:  		/* li R6, 0 */
		/* 820E2A28h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2A28h case   16:*/		return 0x820E2A2C;
		  /* 820E2A2Ch */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 820E2A2Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E2A2Ch case   17:*/		return 0x820E2A30;
		  /* 820E2A30h */ case   18:  		/* bc 4, CR6_GT, 8 */
		/* 820E2A30h case   18:*/		if ( !regs.CR[6].gt ) { return 0x820E2A38;  }
		/* 820E2A30h case   18:*/		return 0x820E2A34;
	}
	return 0x820E2A34;
} // Block from 820E29E8h-820E2A34h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E2A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2A34);
		  /* 820E2A34h */ case    0:  		/* li R6, 1 */
		/* 820E2A34h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E2A34h case    0:*/		return 0x820E2A38;
	}
	return 0x820E2A38;
} // Block from 820E2A34h-820E2A38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E2A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2A38);
		  /* 820E2A38h */ case    0:  		/* li R7, 0 */
		/* 820E2A38h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2A38h case    0:*/		return 0x820E2A3C;
		  /* 820E2A3Ch */ case    1:  		/* lwz R5, <#[R1 + 196]> */
		/* 820E2A3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000C4) );
		/* 820E2A3Ch case    1:*/		return 0x820E2A40;
		  /* 820E2A40h */ case    2:  		/* addi R4, R1, 256 */
		/* 820E2A40h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x100);
		/* 820E2A40h case    2:*/		return 0x820E2A44;
		  /* 820E2A44h */ case    3:  		/* mr R3, R31 */
		/* 820E2A44h case    3:*/		regs.R3 = regs.R31;
		/* 820E2A44h case    3:*/		return 0x820E2A48;
		  /* 820E2A48h */ case    4:  		/* bl -33296 */
		/* 820E2A48h case    4:*/		regs.LR = 0x820E2A4C; return 0x820DA838;
		/* 820E2A48h case    4:*/		return 0x820E2A4C;
		  /* 820E2A4Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820E2A4Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2A4Ch case    5:*/		return 0x820E2A50;
		  /* 820E2A50h */ case    6:  		/* bc 12, CR0_LT, 140 */
		/* 820E2A50h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2A50h case    6:*/		return 0x820E2A54;
		  /* 820E2A54h */ case    7:  		/* li R6, 0 */
		/* 820E2A54h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2A54h case    7:*/		return 0x820E2A58;
		  /* 820E2A58h */ case    8:  		/* lwz R5, <#[R1 + 192]> */
		/* 820E2A58h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E2A58h case    8:*/		return 0x820E2A5C;
		  /* 820E2A5Ch */ case    9:  		/* addi R4, R1, 256 */
		/* 820E2A5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x100);
		/* 820E2A5Ch case    9:*/		return 0x820E2A60;
		  /* 820E2A60h */ case   10:  		/* mr R3, R31 */
		/* 820E2A60h case   10:*/		regs.R3 = regs.R31;
		/* 820E2A60h case   10:*/		return 0x820E2A64;
		  /* 820E2A64h */ case   11:  		/* bl -33012 */
		/* 820E2A64h case   11:*/		regs.LR = 0x820E2A68; return 0x820DA970;
		/* 820E2A64h case   11:*/		return 0x820E2A68;
		  /* 820E2A68h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820E2A68h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2A68h case   12:*/		return 0x820E2A6C;
		  /* 820E2A6Ch */ case   13:  		/* bc 12, CR0_LT, 112 */
		/* 820E2A6Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2A6Ch case   13:*/		return 0x820E2A70;
		  /* 820E2A70h */ case   14:  		/* lwz R5, <#[R1 + 192]> */
		/* 820E2A70h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E2A70h case   14:*/		return 0x820E2A74;
		  /* 820E2A74h */ case   15:  		/* cmplwi CR6, R5, 0 */
		/* 820E2A74h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E2A74h case   15:*/		return 0x820E2A78;
		  /* 820E2A78h */ case   16:  		/* bc 12, CR6_EQ, 76 */
		/* 820E2A78h case   16:*/		if ( regs.CR[6].eq ) { return 0x820E2AC4;  }
		/* 820E2A78h case   16:*/		return 0x820E2A7C;
		  /* 820E2A7Ch */ case   17:  		/* rlwinm R11, R5, 0, 8, 15 */
		/* 820E2A7Ch case   17:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R11,regs.R5);
		/* 820E2A7Ch case   17:*/		return 0x820E2A80;
		  /* 820E2A80h */ case   18:  		/* addic R10, R11, -1 */
		/* 820E2A80h case   18:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 820E2A80h case   18:*/		return 0x820E2A84;
		  /* 820E2A84h */ case   19:  		/* subfe. R30, R10, R11 */
		/* 820E2A84h case   19:*/		cpu::op::subfe<1>(regs,&regs.R30,regs.R10,regs.R11);
		/* 820E2A84h case   19:*/		return 0x820E2A88;
		  /* 820E2A88h */ case   20:  		/* bc 12, CR0_EQ, 28 */
		/* 820E2A88h case   20:*/		if ( regs.CR[0].eq ) { return 0x820E2AA4;  }
		/* 820E2A88h case   20:*/		return 0x820E2A8C;
		  /* 820E2A8Ch */ case   21:  		/* mr R4, R5 */
		/* 820E2A8Ch case   21:*/		regs.R4 = regs.R5;
		/* 820E2A8Ch case   21:*/		return 0x820E2A90;
		  /* 820E2A90h */ case   22:  		/* mr R3, R31 */
		/* 820E2A90h case   22:*/		regs.R3 = regs.R31;
		/* 820E2A90h case   22:*/		return 0x820E2A94;
		  /* 820E2A94h */ case   23:  		/* bl -34012 */
		/* 820E2A94h case   23:*/		regs.LR = 0x820E2A98; return 0x820DA5B8;
		/* 820E2A94h case   23:*/		return 0x820E2A98;
		  /* 820E2A98h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820E2A98h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2A98h case   24:*/		return 0x820E2A9C;
		  /* 820E2A9Ch */ case   25:  		/* bc 12, CR0_LT, 64 */
		/* 820E2A9Ch case   25:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2A9Ch case   25:*/		return 0x820E2AA0;
		  /* 820E2AA0h */ case   26:  		/* lwz R5, <#[R1 + 192]> */
		/* 820E2AA0h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E2AA0h case   26:*/		return 0x820E2AA4;
	}
	return 0x820E2AA4;
} // Block from 820E2A38h-820E2AA4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E2AA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2AA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2AA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2AA4);
		  /* 820E2AA4h */ case    0:  		/* li R8, 0 */
		/* 820E2AA4h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E2AA4h case    0:*/		return 0x820E2AA8;
		  /* 820E2AA8h */ case    1:  		/* li R7, 0 */
		/* 820E2AA8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2AA8h case    1:*/		return 0x820E2AAC;
		  /* 820E2AACh */ case    2:  		/* mr R6, R30 */
		/* 820E2AACh case    2:*/		regs.R6 = regs.R30;
		/* 820E2AACh case    2:*/		return 0x820E2AB0;
		  /* 820E2AB0h */ case    3:  		/* addi R4, R1, 256 */
		/* 820E2AB0h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x100);
		/* 820E2AB0h case    3:*/		return 0x820E2AB4;
		  /* 820E2AB4h */ case    4:  		/* mr R3, R31 */
		/* 820E2AB4h case    4:*/		regs.R3 = regs.R31;
		/* 820E2AB4h case    4:*/		return 0x820E2AB8;
		  /* 820E2AB8h */ case    5:  		/* bl -33792 */
		/* 820E2AB8h case    5:*/		regs.LR = 0x820E2ABC; return 0x820DA6B8;
		/* 820E2AB8h case    5:*/		return 0x820E2ABC;
		  /* 820E2ABCh */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E2ABCh case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E2ABCh case    6:*/		return 0x820E2AC0;
		  /* 820E2AC0h */ case    7:  		/* bc 12, CR0_LT, 28 */
		/* 820E2AC0h case    7:*/		if ( regs.CR[0].lt ) { return 0x820E2ADC;  }
		/* 820E2AC0h case    7:*/		return 0x820E2AC4;
	}
	return 0x820E2AC4;
} // Block from 820E2AA4h-820E2AC4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E2AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2AC4);
		  /* 820E2AC4h */ case    0:  		/* lis R11, -32254 */
		/* 820E2AC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2AC4h case    0:*/		return 0x820E2AC8;
		  /* 820E2AC8h */ case    1:  		/* mr R3, R31 */
		/* 820E2AC8h case    1:*/		regs.R3 = regs.R31;
		/* 820E2AC8h case    1:*/		return 0x820E2ACC;
		  /* 820E2ACCh */ case    2:  		/* addi R4, R11, -30604 */
		/* 820E2ACCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 820E2ACCh case    2:*/		return 0x820E2AD0;
		  /* 820E2AD0h */ case    3:  		/* bl -35320 */
		/* 820E2AD0h case    3:*/		regs.LR = 0x820E2AD4; return 0x820DA0D8;
		/* 820E2AD0h case    3:*/		return 0x820E2AD4;
		  /* 820E2AD4h */ case    4:  		/* srawi R11, R3, 31 */
		/* 820E2AD4h case    4:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820E2AD4h case    4:*/		return 0x820E2AD8;
		  /* 820E2AD8h */ case    5:  		/* and R3, R11, R3 */
		/* 820E2AD8h case    5:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820E2AD8h case    5:*/		return 0x820E2ADC;
	}
	return 0x820E2ADC;
} // Block from 820E2AC4h-820E2ADCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E2ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2ADC);
		  /* 820E2ADCh */ case    0:  		/* addi R1, R1, 528 */
		/* 820E2ADCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x210);
		/* 820E2ADCh case    0:*/		return 0x820E2AE0;
		  /* 820E2AE0h */ case    1:  		/* b -333916 */
		/* 820E2AE0h case    1:*/		return 0x82091284;
		/* 820E2AE0h case    1:*/		return 0x820E2AE4;
		  /* 820E2AE4h */ case    2:  		/* nop */
		/* 820E2AE4h case    2:*/		cpu::op::nop();
		/* 820E2AE4h case    2:*/		return 0x820E2AE8;
	}
	return 0x820E2AE8;
} // Block from 820E2ADCh-820E2AE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E2AE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2AE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2AE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2AE8);
		  /* 820E2AE8h */ case    0:  		/* mfspr R12, LR */
		/* 820E2AE8h case    0:*/		regs.R12 = regs.LR;
		/* 820E2AE8h case    0:*/		return 0x820E2AEC;
		  /* 820E2AECh */ case    1:  		/* bl -333992 */
		/* 820E2AECh case    1:*/		regs.LR = 0x820E2AF0; return 0x82091244;
		/* 820E2AECh case    1:*/		return 0x820E2AF0;
		  /* 820E2AF0h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 820E2AF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 820E2AF0h case    2:*/		return 0x820E2AF4;
		  /* 820E2AF4h */ case    3:  		/* mr R31, R3 */
		/* 820E2AF4h case    3:*/		regs.R31 = regs.R3;
		/* 820E2AF4h case    3:*/		return 0x820E2AF8;
		  /* 820E2AF8h */ case    4:  		/* lwz R3, <#[R3 + 260]> */
		/* 820E2AF8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000104) );
		/* 820E2AF8h case    4:*/		return 0x820E2AFC;
		  /* 820E2AFCh */ case    5:  		/* mr R28, R4 */
		/* 820E2AFCh case    5:*/		regs.R28 = regs.R4;
		/* 820E2AFCh case    5:*/		return 0x820E2B00;
		  /* 820E2B00h */ case    6:  		/* mr R27, R5 */
		/* 820E2B00h case    6:*/		regs.R27 = regs.R5;
		/* 820E2B00h case    6:*/		return 0x820E2B04;
		  /* 820E2B04h */ case    7:  		/* addi R5, R1, 128 */
		/* 820E2B04h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E2B04h case    7:*/		return 0x820E2B08;
		  /* 820E2B08h */ case    8:  		/* li R4, 0 */
		/* 820E2B08h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2B08h case    8:*/		return 0x820E2B0C;
		  /* 820E2B0Ch */ case    9:  		/* lwz R11, <#[R3]> */
		/* 820E2B0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820E2B0Ch case    9:*/		return 0x820E2B10;
		  /* 820E2B10h */ case   10:  		/* mr R23, R6 */
		/* 820E2B10h case   10:*/		regs.R23 = regs.R6;
		/* 820E2B10h case   10:*/		return 0x820E2B14;
		  /* 820E2B14h */ case   11:  		/* lwz R25, <#[R3 + 12]> */
		/* 820E2B14h case   11:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x0000000C) );
		/* 820E2B14h case   11:*/		return 0x820E2B18;
		  /* 820E2B18h */ case   12:  		/* mr R26, R7 */
		/* 820E2B18h case   12:*/		regs.R26 = regs.R7;
		/* 820E2B18h case   12:*/		return 0x820E2B1C;
		  /* 820E2B1Ch */ case   13:  		/* lwz R24, <#[R3 + 16]> */
		/* 820E2B1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x00000010) );
		/* 820E2B1Ch case   13:*/		return 0x820E2B20;
		  /* 820E2B20h */ case   14:  		/* rlwinm R29, R11, 0, 12, 31 */
		/* 820E2B20h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R11);
		/* 820E2B20h case   14:*/		return 0x820E2B24;
		  /* 820E2B24h */ case   15:  		/* bl 103412 */
		/* 820E2B24h case   15:*/		regs.LR = 0x820E2B28; return 0x820FBF18;
		/* 820E2B24h case   15:*/		return 0x820E2B28;
		  /* 820E2B28h */ case   16:  		/* addi R5, R1, 132 */
		/* 820E2B28h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x84);
		/* 820E2B28h case   16:*/		return 0x820E2B2C;
		  /* 820E2B2Ch */ case   17:  		/* li R4, 1 */
		/* 820E2B2Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820E2B2Ch case   17:*/		return 0x820E2B30;
		  /* 820E2B30h */ case   18:  		/* lwz R3, <#[R31 + 260]> */
		/* 820E2B30h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000104) );
		/* 820E2B30h case   18:*/		return 0x820E2B34;
		  /* 820E2B34h */ case   19:  		/* bl 103396 */
		/* 820E2B34h case   19:*/		regs.LR = 0x820E2B38; return 0x820FBF18;
		/* 820E2B34h case   19:*/		return 0x820E2B38;
		  /* 820E2B38h */ case   20:  		/* addi R5, R1, 136 */
		/* 820E2B38h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x88);
		/* 820E2B38h case   20:*/		return 0x820E2B3C;
		  /* 820E2B3Ch */ case   21:  		/* li R4, 2 */
		/* 820E2B3Ch case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 820E2B3Ch case   21:*/		return 0x820E2B40;
		  /* 820E2B40h */ case   22:  		/* lwz R3, <#[R31 + 260]> */
		/* 820E2B40h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000104) );
		/* 820E2B40h case   22:*/		return 0x820E2B44;
		  /* 820E2B44h */ case   23:  		/* bl 103380 */
		/* 820E2B44h case   23:*/		regs.LR = 0x820E2B48; return 0x820FBF18;
		/* 820E2B44h case   23:*/		return 0x820E2B48;
		  /* 820E2B48h */ case   24:  		/* li R30, 0 */
		/* 820E2B48h case   24:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E2B48h case   24:*/		return 0x820E2B4C;
		  /* 820E2B4Ch */ case   25:  		/* cmpwi CR6, R23, 0 */
		/* 820E2B4Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 820E2B4Ch case   25:*/		return 0x820E2B50;
		  /* 820E2B50h */ case   26:  		/* mr R5, R30 */
		/* 820E2B50h case   26:*/		regs.R5 = regs.R30;
		/* 820E2B50h case   26:*/		return 0x820E2B54;
		  /* 820E2B54h */ case   27:  		/* bc 12, CR6_EQ, 124 */
		/* 820E2B54h case   27:*/		if ( regs.CR[6].eq ) { return 0x820E2BD0;  }
		/* 820E2B54h case   27:*/		return 0x820E2B58;
		  /* 820E2B58h */ case   28:  		/* mr R4, R30 */
		/* 820E2B58h case   28:*/		regs.R4 = regs.R30;
		/* 820E2B58h case   28:*/		return 0x820E2B5C;
		  /* 820E2B5Ch */ case   29:  		/* addi R6, R1, 128 */
		/* 820E2B5Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E2B5Ch case   29:*/		return 0x820E2B60;
		  /* 820E2B60h */ case   30:  		/* cmpwi CR6, R5, 0 */
		/* 820E2B60h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 820E2B60h case   30:*/		return 0x820E2B64;
		  /* 820E2B64h */ case   31:  		/* bc 4, CR6_EQ, 108 */
		/* 820E2B64h case   31:*/		if ( !regs.CR[6].eq ) { return 0x820E2BD0;  }
		/* 820E2B64h case   31:*/		return 0x820E2B68;
		  /* 820E2B68h */ case   32:  		/* lwz R7, <#[R6]> */
		/* 820E2B68h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 820E2B68h case   32:*/		return 0x820E2B6C;
		  /* 820E2B6Ch */ case   33:  		/* cmplwi CR6, R7, 0 */
		/* 820E2B6Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820E2B6Ch case   33:*/		return 0x820E2B70;
		  /* 820E2B70h */ case   34:  		/* bc 12, CR6_EQ, 80 */
		/* 820E2B70h case   34:*/		if ( regs.CR[6].eq ) { return 0x820E2BC0;  }
		/* 820E2B70h case   34:*/		return 0x820E2B74;
		  /* 820E2B74h */ case   35:  		/* mr R9, R30 */
		/* 820E2B74h case   35:*/		regs.R9 = regs.R30;
		/* 820E2B74h case   35:*/		return 0x820E2B78;
		  /* 820E2B78h */ case   36:  		/* cmplwi CR6, R29, 0 */
		/* 820E2B78h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E2B78h case   36:*/		return 0x820E2B7C;
		  /* 820E2B7Ch */ case   37:  		/* bc 12, CR6_EQ, 68 */
		/* 820E2B7Ch case   37:*/		if ( regs.CR[6].eq ) { return 0x820E2BC0;  }
		/* 820E2B7Ch case   37:*/		return 0x820E2B80;
		  /* 820E2B80h */ case   38:  		/* lwz R8, <#[R31 + 20]> */
		/* 820E2B80h case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 820E2B80h case   38:*/		return 0x820E2B84;
		  /* 820E2B84h */ case   39:  		/* mr R10, R30 */
		/* 820E2B84h case   39:*/		regs.R10 = regs.R30;
		/* 820E2B84h case   39:*/		return 0x820E2B88;
		  /* 820E2B88h */ case   40:  		/* mr R11, R30 */
		/* 820E2B88h case   40:*/		regs.R11 = regs.R30;
		/* 820E2B88h case   40:*/		return 0x820E2B8C;
		  /* 820E2B8Ch */ case   41:  		/* lwzx R3, <#[R7 + R11]> */
		/* 820E2B8Ch case   41:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820E2B8Ch case   41:*/		return 0x820E2B90;
		  /* 820E2B90h */ case   42:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 820E2B90h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 820E2B90h case   42:*/		return 0x820E2B94;
		  /* 820E2B94h */ case   43:  		/* lwzx R3, <#[R3 + R8]> */
		/* 820E2B94h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R8 + 0x00000000) );
		/* 820E2B94h case   43:*/		return 0x820E2B98;
		  /* 820E2B98h */ case   44:  		/* lwzx R3, <#[R3 + R10]> */
		/* 820E2B98h case   44:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 820E2B98h case   44:*/		return 0x820E2B9C;
		  /* 820E2B9Ch */ case   45:  		/* rlwinm. R3, R3, 0, 7, 7 */
		/* 820E2B9Ch case   45:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R3,regs.R3);
		/* 820E2B9Ch case   45:*/		return 0x820E2BA0;
		  /* 820E2BA0h */ case   46:  		/* bc 4, CR0_EQ, 28 */
		/* 820E2BA0h case   46:*/		if ( !regs.CR[0].eq ) { return 0x820E2BBC;  }
		/* 820E2BA0h case   46:*/		return 0x820E2BA4;
		  /* 820E2BA4h */ case   47:  		/* addi R9, R9, 1 */
		/* 820E2BA4h case   47:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E2BA4h case   47:*/		return 0x820E2BA8;
		  /* 820E2BA8h */ case   48:  		/* addi R11, R11, 4 */
		/* 820E2BA8h case   48:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E2BA8h case   48:*/		return 0x820E2BAC;
		  /* 820E2BACh */ case   49:  		/* addi R10, R10, 128 */
		/* 820E2BACh case   49:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x80);
		/* 820E2BACh case   49:*/		return 0x820E2BB0;
		  /* 820E2BB0h */ case   50:  		/* cmplw CR6, R9, R29 */
		/* 820E2BB0h case   50:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R29);
		/* 820E2BB0h case   50:*/		return 0x820E2BB4;
		  /* 820E2BB4h */ case   51:  		/* bc 12, CR6_LT, -40 */
		/* 820E2BB4h case   51:*/		if ( regs.CR[6].lt ) { return 0x820E2B8C;  }
		/* 820E2BB4h case   51:*/		return 0x820E2BB8;
		  /* 820E2BB8h */ case   52:  		/* b 8 */
		/* 820E2BB8h case   52:*/		return 0x820E2BC0;
		/* 820E2BB8h case   52:*/		return 0x820E2BBC;
	}
	return 0x820E2BBC;
} // Block from 820E2AE8h-820E2BBCh (53 instructions)

//////////////////////////////////////////////////////
// Block at 820E2BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2BBC);
		  /* 820E2BBCh */ case    0:  		/* li R5, 1 */
		/* 820E2BBCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820E2BBCh case    0:*/		return 0x820E2BC0;
	}
	return 0x820E2BC0;
} // Block from 820E2BBCh-820E2BC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E2BC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2BC0);
		  /* 820E2BC0h */ case    0:  		/* addi R4, R4, 1 */
		/* 820E2BC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E2BC0h case    0:*/		return 0x820E2BC4;
		  /* 820E2BC4h */ case    1:  		/* addi R6, R6, 4 */
		/* 820E2BC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 820E2BC4h case    1:*/		return 0x820E2BC8;
		  /* 820E2BC8h */ case    2:  		/* cmplwi CR6, R4, 3 */
		/* 820E2BC8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000003);
		/* 820E2BC8h case    2:*/		return 0x820E2BCC;
		  /* 820E2BCCh */ case    3:  		/* bc 12, CR6_LT, -108 */
		/* 820E2BCCh case    3:*/		if ( regs.CR[6].lt ) { return 0x820E2B60;  }
		/* 820E2BCCh case    3:*/		return 0x820E2BD0;
	}
	return 0x820E2BD0;
} // Block from 820E2BC0h-820E2BD0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E2BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2BD0);
		  /* 820E2BD0h */ case    0:  		/* stw R5, <#[R1 + 116]> */
		/* 820E2BD0h case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000074) );
		/* 820E2BD0h case    0:*/		return 0x820E2BD4;
		  /* 820E2BD4h */ case    1:  		/* mr R7, R25 */
		/* 820E2BD4h case    1:*/		regs.R7 = regs.R25;
		/* 820E2BD4h case    1:*/		return 0x820E2BD8;
		  /* 820E2BD8h */ case    2:  		/* mr R6, R24 */
		/* 820E2BD8h case    2:*/		regs.R6 = regs.R24;
		/* 820E2BD8h case    2:*/		return 0x820E2BDC;
		  /* 820E2BDCh */ case    3:  		/* lwz R10, <#[R1 + 136]> */
		/* 820E2BDCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 820E2BDCh case    3:*/		return 0x820E2BE0;
		  /* 820E2BE0h */ case    4:  		/* mr R5, R27 */
		/* 820E2BE0h case    4:*/		regs.R5 = regs.R27;
		/* 820E2BE0h case    4:*/		return 0x820E2BE4;
		  /* 820E2BE4h */ case    5:  		/* lwz R9, <#[R1 + 132]> */
		/* 820E2BE4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 820E2BE4h case    5:*/		return 0x820E2BE8;
		  /* 820E2BE8h */ case    6:  		/* mr R4, R28 */
		/* 820E2BE8h case    6:*/		regs.R4 = regs.R28;
		/* 820E2BE8h case    6:*/		return 0x820E2BEC;
		  /* 820E2BECh */ case    7:  		/* lwz R8, <#[R1 + 128]> */
		/* 820E2BECh case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 820E2BECh case    7:*/		return 0x820E2BF0;
		  /* 820E2BF0h */ case    8:  		/* mr R3, R31 */
		/* 820E2BF0h case    8:*/		regs.R3 = regs.R31;
		/* 820E2BF0h case    8:*/		return 0x820E2BF4;
		  /* 820E2BF4h */ case    9:  		/* stw R26, <#[R1 + 124]> */
		/* 820E2BF4h case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E2BF4h case    9:*/		return 0x820E2BF8;
		  /* 820E2BF8h */ case   10:  		/* stw R30, <#[R1 + 108]> */
		/* 820E2BF8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E2BF8h case   10:*/		return 0x820E2BFC;
		  /* 820E2BFCh */ case   11:  		/* stw R30, <#[R1 + 100]> */
		/* 820E2BFCh case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 820E2BFCh case   11:*/		return 0x820E2C00;
		  /* 820E2C00h */ case   12:  		/* stw R30, <#[R1 + 92]> */
		/* 820E2C00h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 820E2C00h case   12:*/		return 0x820E2C04;
		  /* 820E2C04h */ case   13:  		/* stw R29, <#[R1 + 84]> */
		/* 820E2C04h case   13:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E2C04h case   13:*/		return 0x820E2C08;
		  /* 820E2C08h */ case   14:  		/* bl -1408 */
		/* 820E2C08h case   14:*/		regs.LR = 0x820E2C0C; return 0x820E2688;
		/* 820E2C08h case   14:*/		return 0x820E2C0C;
		  /* 820E2C0Ch */ case   15:  		/* addi R1, R1, 224 */
		/* 820E2C0Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 820E2C0Ch case   15:*/		return 0x820E2C10;
		  /* 820E2C10h */ case   16:  		/* b -334204 */
		/* 820E2C10h case   16:*/		return 0x82091294;
		/* 820E2C10h case   16:*/		return 0x820E2C14;
		  /* 820E2C14h */ case   17:  		/* nop */
		/* 820E2C14h case   17:*/		cpu::op::nop();
		/* 820E2C14h case   17:*/		return 0x820E2C18;
	}
	return 0x820E2C18;
} // Block from 820E2BD0h-820E2C18h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E2C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2C18);
		  /* 820E2C18h */ case    0:  		/* mfspr R12, LR */
		/* 820E2C18h case    0:*/		regs.R12 = regs.LR;
		/* 820E2C18h case    0:*/		return 0x820E2C1C;
		  /* 820E2C1Ch */ case    1:  		/* bl -334276 */
		/* 820E2C1Ch case    1:*/		regs.LR = 0x820E2C20; return 0x82091258;
		/* 820E2C1Ch case    1:*/		return 0x820E2C20;
		  /* 820E2C20h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820E2C20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820E2C20h case    2:*/		return 0x820E2C24;
		  /* 820E2C24h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E2C24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E2C24h case    3:*/		return 0x820E2C28;
		  /* 820E2C28h */ case    4:  		/* mr R30, R3 */
		/* 820E2C28h case    4:*/		regs.R30 = regs.R3;
		/* 820E2C28h case    4:*/		return 0x820E2C2C;
		  /* 820E2C2Ch */ case    5:  		/* mr R28, R4 */
		/* 820E2C2Ch case    5:*/		regs.R28 = regs.R4;
		/* 820E2C2Ch case    5:*/		return 0x820E2C30;
		  /* 820E2C30h */ case    6:  		/* mr R29, R5 */
		/* 820E2C30h case    6:*/		regs.R29 = regs.R5;
		/* 820E2C30h case    6:*/		return 0x820E2C34;
		  /* 820E2C34h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 820E2C34h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E2C34h case    7:*/		return 0x820E2C38;
		  /* 820E2C38h */ case    8:  		/* rlwinm R10, R11, 0, 12, 31 */
		/* 820E2C38h case    8:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R11);
		/* 820E2C38h case    8:*/		return 0x820E2C3C;
		  /* 820E2C3Ch */ case    9:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820E2C3Ch case    9:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820E2C3Ch case    9:*/		return 0x820E2C40;
		  /* 820E2C40h */ case   10:  		/* cmplwi CR6, R10, 4 */
		/* 820E2C40h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 820E2C40h case   10:*/		return 0x820E2C44;
		  /* 820E2C44h */ case   11:  		/* lis R10, 28784 */
		/* 820E2C44h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x7070);
		/* 820E2C44h case   11:*/		return 0x820E2C48;
		  /* 820E2C48h */ case   12:  		/* bc 4, CR6_EQ, 80 */
		/* 820E2C48h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E2C98;  }
		/* 820E2C48h case   12:*/		return 0x820E2C4C;
		  /* 820E2C4Ch */ case   13:  		/* subf R11, R11, R10 */
		/* 820E2C4Ch case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820E2C4Ch case   13:*/		return 0x820E2C50;
		  /* 820E2C50h */ case   14:  		/* li R9, 0 */
		/* 820E2C50h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E2C50h case   14:*/		return 0x820E2C54;
		  /* 820E2C54h */ case   15:  		/* cntlzw R11, R11 */
		/* 820E2C54h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 820E2C54h case   15:*/		return 0x820E2C58;
		  /* 820E2C58h */ case   16:  		/* stw R9, <#[R1 + 80]> */
		/* 820E2C58h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 820E2C58h case   16:*/		return 0x820E2C5C;
		  /* 820E2C5Ch */ case   17:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820E2C5Ch case   17:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820E2C5Ch case   17:*/		return 0x820E2C60;
		  /* 820E2C60h */ case   18:  		/* addic. R31, R11, 3 */
		/* 820E2C60h case   18:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0x3);
		/* 820E2C60h case   18:*/		return 0x820E2C64;
		  /* 820E2C64h */ case   19:  		/* bc 4, CR0_GT, 148 */
		/* 820E2C64h case   19:*/		if ( !regs.CR[0].gt ) { return 0x820E2CF8;  }
		/* 820E2C64h case   19:*/		return 0x820E2C68;
		  /* 820E2C68h */ case   20:  		/* addi R7, R1, 80 */
		/* 820E2C68h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820E2C68h case   20:*/		return 0x820E2C6C;
		  /* 820E2C6Ch */ case   21:  		/* li R6, 0 */
		/* 820E2C6Ch case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2C6Ch case   21:*/		return 0x820E2C70;
		  /* 820E2C70h */ case   22:  		/* mr R5, R29 */
		/* 820E2C70h case   22:*/		regs.R5 = regs.R29;
		/* 820E2C70h case   22:*/		return 0x820E2C74;
		  /* 820E2C74h */ case   23:  		/* li R4, 0 */
		/* 820E2C74h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2C74h case   23:*/		return 0x820E2C78;
		  /* 820E2C78h */ case   24:  		/* mr R3, R30 */
		/* 820E2C78h case   24:*/		regs.R3 = regs.R30;
		/* 820E2C78h case   24:*/		return 0x820E2C7C;
		  /* 820E2C7Ch */ case   25:  		/* bl -404 */
		/* 820E2C7Ch case   25:*/		regs.LR = 0x820E2C80; return 0x820E2AE8;
		/* 820E2C7Ch case   25:*/		return 0x820E2C80;
		  /* 820E2C80h */ case   26:  		/* lwz R11, <#[R1 + 80]> */
		/* 820E2C80h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820E2C80h case   26:*/		return 0x820E2C84;
		  /* 820E2C84h */ case   27:  		/* addi R11, R11, 1 */
		/* 820E2C84h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E2C84h case   27:*/		return 0x820E2C88;
		  /* 820E2C88h */ case   28:  		/* stw R11, <#[R1 + 80]> */
		/* 820E2C88h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820E2C88h case   28:*/		return 0x820E2C8C;
		  /* 820E2C8Ch */ case   29:  		/* cmpw CR6, R11, R31 */
		/* 820E2C8Ch case   29:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R31);
		/* 820E2C8Ch case   29:*/		return 0x820E2C90;
		  /* 820E2C90h */ case   30:  		/* bc 12, CR6_LT, -40 */
		/* 820E2C90h case   30:*/		if ( regs.CR[6].lt ) { return 0x820E2C68;  }
		/* 820E2C90h case   30:*/		return 0x820E2C94;
		  /* 820E2C94h */ case   31:  		/* b 100 */
		/* 820E2C94h case   31:*/		return 0x820E2CF8;
		/* 820E2C94h case   31:*/		return 0x820E2C98;
	}
	return 0x820E2C98;
} // Block from 820E2C18h-820E2C98h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820E2C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2C98);
		  /* 820E2C98h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 820E2C98h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E2C98h case    0:*/		return 0x820E2C9C;
		  /* 820E2C9Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820E2C9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E2CA8;  }
		/* 820E2C9Ch case    1:*/		return 0x820E2CA0;
		  /* 820E2CA0h */ case    2:  		/* li R31, 4 */
		/* 820E2CA0h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x4);
		/* 820E2CA0h case    2:*/		return 0x820E2CA4;
		  /* 820E2CA4h */ case    3:  		/* b 24 */
		/* 820E2CA4h case    3:*/		return 0x820E2CBC;
		/* 820E2CA4h case    3:*/		return 0x820E2CA8;
	}
	return 0x820E2CA8;
} // Block from 820E2C98h-820E2CA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E2CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2CA8);
		  /* 820E2CA8h */ case    0:  		/* lis R10, 28768 */
		/* 820E2CA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7060);
		/* 820E2CA8h case    0:*/		return 0x820E2CAC;
		  /* 820E2CACh */ case    1:  		/* subf R11, R11, R10 */
		/* 820E2CACh case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820E2CACh case    1:*/		return 0x820E2CB0;
		  /* 820E2CB0h */ case    2:  		/* cntlzw R11, R11 */
		/* 820E2CB0h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 820E2CB0h case    2:*/		return 0x820E2CB4;
		  /* 820E2CB4h */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820E2CB4h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820E2CB4h case    3:*/		return 0x820E2CB8;
		  /* 820E2CB8h */ case    4:  		/* addi R31, R11, 2 */
		/* 820E2CB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x2);
		/* 820E2CB8h case    4:*/		return 0x820E2CBC;
	}
	return 0x820E2CBC;
} // Block from 820E2CA8h-820E2CBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E2CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2CBC);
		  /* 820E2CBCh */ case    0:  		/* li R11, 0 */
		/* 820E2CBCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E2CBCh case    0:*/		return 0x820E2CC0;
		  /* 820E2CC0h */ case    1:  		/* cmpwi CR6, R31, 0 */
		/* 820E2CC0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 820E2CC0h case    1:*/		return 0x820E2CC4;
		  /* 820E2CC4h */ case    2:  		/* stw R11, <#[R1 + 80]> */
		/* 820E2CC4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820E2CC4h case    2:*/		return 0x820E2CC8;
		  /* 820E2CC8h */ case    3:  		/* bc 4, CR6_GT, 48 */
		/* 820E2CC8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820E2CF8;  }
		/* 820E2CC8h case    3:*/		return 0x820E2CCC;
		  /* 820E2CCCh */ case    4:  		/* addi R7, R1, 80 */
		/* 820E2CCCh case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820E2CCCh case    4:*/		return 0x820E2CD0;
		  /* 820E2CD0h */ case    5:  		/* li R6, 0 */
		/* 820E2CD0h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2CD0h case    5:*/		return 0x820E2CD4;
		  /* 820E2CD4h */ case    6:  		/* mr R5, R28 */
		/* 820E2CD4h case    6:*/		regs.R5 = regs.R28;
		/* 820E2CD4h case    6:*/		return 0x820E2CD8;
		  /* 820E2CD8h */ case    7:  		/* li R4, 0 */
		/* 820E2CD8h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2CD8h case    7:*/		return 0x820E2CDC;
		  /* 820E2CDCh */ case    8:  		/* mr R3, R30 */
		/* 820E2CDCh case    8:*/		regs.R3 = regs.R30;
		/* 820E2CDCh case    8:*/		return 0x820E2CE0;
		  /* 820E2CE0h */ case    9:  		/* bl -504 */
		/* 820E2CE0h case    9:*/		regs.LR = 0x820E2CE4; return 0x820E2AE8;
		/* 820E2CE0h case    9:*/		return 0x820E2CE4;
		  /* 820E2CE4h */ case   10:  		/* lwz R11, <#[R1 + 80]> */
		/* 820E2CE4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820E2CE4h case   10:*/		return 0x820E2CE8;
		  /* 820E2CE8h */ case   11:  		/* addi R11, R11, 1 */
		/* 820E2CE8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E2CE8h case   11:*/		return 0x820E2CEC;
		  /* 820E2CECh */ case   12:  		/* stw R11, <#[R1 + 80]> */
		/* 820E2CECh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820E2CECh case   12:*/		return 0x820E2CF0;
		  /* 820E2CF0h */ case   13:  		/* cmpw CR6, R11, R31 */
		/* 820E2CF0h case   13:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R31);
		/* 820E2CF0h case   13:*/		return 0x820E2CF4;
		  /* 820E2CF4h */ case   14:  		/* bc 12, CR6_LT, -40 */
		/* 820E2CF4h case   14:*/		if ( regs.CR[6].lt ) { return 0x820E2CCC;  }
		/* 820E2CF4h case   14:*/		return 0x820E2CF8;
	}
	return 0x820E2CF8;
} // Block from 820E2CBCh-820E2CF8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E2CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2CF8);
		  /* 820E2CF8h */ case    0:  		/* li R3, 0 */
		/* 820E2CF8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E2CF8h case    0:*/		return 0x820E2CFC;
		  /* 820E2CFCh */ case    1:  		/* addi R1, R1, 128 */
		/* 820E2CFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820E2CFCh case    1:*/		return 0x820E2D00;
		  /* 820E2D00h */ case    2:  		/* b -334424 */
		/* 820E2D00h case    2:*/		return 0x820912A8;
		/* 820E2D00h case    2:*/		return 0x820E2D04;
		  /* 820E2D04h */ case    3:  		/* nop */
		/* 820E2D04h case    3:*/		cpu::op::nop();
		/* 820E2D04h case    3:*/		return 0x820E2D08;
	}
	return 0x820E2D08;
} // Block from 820E2CF8h-820E2D08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E2D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2D08);
		  /* 820E2D08h */ case    0:  		/* mfspr R12, LR */
		/* 820E2D08h case    0:*/		regs.R12 = regs.LR;
		/* 820E2D08h case    0:*/		return 0x820E2D0C;
		  /* 820E2D0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2D0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2D0Ch case    1:*/		return 0x820E2D10;
		  /* 820E2D10h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2D10h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2D10h case    2:*/		return 0x820E2D14;
		  /* 820E2D14h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2D14h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2D14h case    3:*/		return 0x820E2D18;
		  /* 820E2D18h */ case    4:  		/* lis R11, -32254 */
		/* 820E2D18h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2D18h case    4:*/		return 0x820E2D1C;
		  /* 820E2D1Ch */ case    5:  		/* lis R10, -32242 */
		/* 820E2D1Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E2D1Ch case    5:*/		return 0x820E2D20;
		  /* 820E2D20h */ case    6:  		/* addi R5, R11, -26420 */
		/* 820E2D20h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF98CC);
		/* 820E2D20h case    6:*/		return 0x820E2D24;
		  /* 820E2D24h */ case    7:  		/* li R7, 0 */
		/* 820E2D24h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2D24h case    7:*/		return 0x820E2D28;
		  /* 820E2D28h */ case    8:  		/* li R6, 0 */
		/* 820E2D28h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2D28h case    8:*/		return 0x820E2D2C;
		  /* 820E2D2Ch */ case    9:  		/* addi R4, R10, -25672 */
		/* 820E2D2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9BB8);
		/* 820E2D2Ch case    9:*/		return 0x820E2D30;
		  /* 820E2D30h */ case   10:  		/* mr R31, R3 */
		/* 820E2D30h case   10:*/		regs.R31 = regs.R3;
		/* 820E2D30h case   10:*/		return 0x820E2D34;
		  /* 820E2D34h */ case   11:  		/* bl -588 */
		/* 820E2D34h case   11:*/		regs.LR = 0x820E2D38; return 0x820E2AE8;
		/* 820E2D34h case   11:*/		return 0x820E2D38;
		  /* 820E2D38h */ case   12:  		/* mr R3, R31 */
		/* 820E2D38h case   12:*/		regs.R3 = regs.R31;
		/* 820E2D38h case   12:*/		return 0x820E2D3C;
		  /* 820E2D3Ch */ case   13:  		/* bl 86676 */
		/* 820E2D3Ch case   13:*/		regs.LR = 0x820E2D40; return 0x820F7FD0;
		/* 820E2D3Ch case   13:*/		return 0x820E2D40;
		  /* 820E2D40h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E2D40h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2D40h case   14:*/		return 0x820E2D44;
		  /* 820E2D44h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2D44h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2D44h case   15:*/		return 0x820E2D48;
		  /* 820E2D48h */ case   16:  		/* mtspr LR, R12 */
		/* 820E2D48h case   16:*/		regs.LR = regs.R12;
		/* 820E2D48h case   16:*/		return 0x820E2D4C;
		  /* 820E2D4Ch */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2D4Ch case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2D4Ch case   17:*/		return 0x820E2D50;
		  /* 820E2D50h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E2D50h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2D50h case   18:*/		return 0x820E2D54;
	}
	return 0x820E2D54;
} // Block from 820E2D08h-820E2D54h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E2D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2D54);
		  /* 820E2D54h */ case    0:  		/* nop */
		/* 820E2D54h case    0:*/		cpu::op::nop();
		/* 820E2D54h case    0:*/		return 0x820E2D58;
	}
	return 0x820E2D58;
} // Block from 820E2D54h-820E2D58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E2D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2D58);
		  /* 820E2D58h */ case    0:  		/* mfspr R12, LR */
		/* 820E2D58h case    0:*/		regs.R12 = regs.LR;
		/* 820E2D58h case    0:*/		return 0x820E2D5C;
		  /* 820E2D5Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2D5Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2D5Ch case    1:*/		return 0x820E2D60;
		  /* 820E2D60h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2D60h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2D60h case    2:*/		return 0x820E2D64;
		  /* 820E2D64h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2D64h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2D64h case    3:*/		return 0x820E2D68;
		  /* 820E2D68h */ case    4:  		/* lis R11, -32254 */
		/* 820E2D68h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2D68h case    4:*/		return 0x820E2D6C;
		  /* 820E2D6Ch */ case    5:  		/* lis R10, -32242 */
		/* 820E2D6Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E2D6Ch case    5:*/		return 0x820E2D70;
		  /* 820E2D70h */ case    6:  		/* addi R5, R11, -26420 */
		/* 820E2D70h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF98CC);
		/* 820E2D70h case    6:*/		return 0x820E2D74;
		  /* 820E2D74h */ case    7:  		/* li R7, 0 */
		/* 820E2D74h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2D74h case    7:*/		return 0x820E2D78;
		  /* 820E2D78h */ case    8:  		/* li R6, 0 */
		/* 820E2D78h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2D78h case    8:*/		return 0x820E2D7C;
		  /* 820E2D7Ch */ case    9:  		/* addi R4, R10, -25624 */
		/* 820E2D7Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9BE8);
		/* 820E2D7Ch case    9:*/		return 0x820E2D80;
		  /* 820E2D80h */ case   10:  		/* mr R31, R3 */
		/* 820E2D80h case   10:*/		regs.R31 = regs.R3;
		/* 820E2D80h case   10:*/		return 0x820E2D84;
		  /* 820E2D84h */ case   11:  		/* bl -668 */
		/* 820E2D84h case   11:*/		regs.LR = 0x820E2D88; return 0x820E2AE8;
		/* 820E2D84h case   11:*/		return 0x820E2D88;
		  /* 820E2D88h */ case   12:  		/* mr R3, R31 */
		/* 820E2D88h case   12:*/		regs.R3 = regs.R31;
		/* 820E2D88h case   12:*/		return 0x820E2D8C;
		  /* 820E2D8Ch */ case   13:  		/* bl 91148 */
		/* 820E2D8Ch case   13:*/		regs.LR = 0x820E2D90; return 0x820F9198;
		/* 820E2D8Ch case   13:*/		return 0x820E2D90;
		  /* 820E2D90h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E2D90h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2D90h case   14:*/		return 0x820E2D94;
		  /* 820E2D94h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2D94h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2D94h case   15:*/		return 0x820E2D98;
		  /* 820E2D98h */ case   16:  		/* mtspr LR, R12 */
		/* 820E2D98h case   16:*/		regs.LR = regs.R12;
		/* 820E2D98h case   16:*/		return 0x820E2D9C;
		  /* 820E2D9Ch */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2D9Ch case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2D9Ch case   17:*/		return 0x820E2DA0;
		  /* 820E2DA0h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E2DA0h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2DA0h case   18:*/		return 0x820E2DA4;
	}
	return 0x820E2DA4;
} // Block from 820E2D58h-820E2DA4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E2DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2DA4);
		  /* 820E2DA4h */ case    0:  		/* nop */
		/* 820E2DA4h case    0:*/		cpu::op::nop();
		/* 820E2DA4h case    0:*/		return 0x820E2DA8;
	}
	return 0x820E2DA8;
} // Block from 820E2DA4h-820E2DA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E2DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2DA8);
		  /* 820E2DA8h */ case    0:  		/* mfspr R12, LR */
		/* 820E2DA8h case    0:*/		regs.R12 = regs.LR;
		/* 820E2DA8h case    0:*/		return 0x820E2DAC;
		  /* 820E2DACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2DACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2DACh case    1:*/		return 0x820E2DB0;
		  /* 820E2DB0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2DB0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2DB0h case    2:*/		return 0x820E2DB4;
		  /* 820E2DB4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2DB4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2DB4h case    3:*/		return 0x820E2DB8;
		  /* 820E2DB8h */ case    4:  		/* lis R11, -32255 */
		/* 820E2DB8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E2DB8h case    4:*/		return 0x820E2DBC;
		  /* 820E2DBCh */ case    5:  		/* lis R10, -32242 */
		/* 820E2DBCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E2DBCh case    5:*/		return 0x820E2DC0;
		  /* 820E2DC0h */ case    6:  		/* addi R5, R11, -8228 */
		/* 820E2DC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFDC);
		/* 820E2DC0h case    6:*/		return 0x820E2DC4;
		  /* 820E2DC4h */ case    7:  		/* li R7, 0 */
		/* 820E2DC4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2DC4h case    7:*/		return 0x820E2DC8;
		  /* 820E2DC8h */ case    8:  		/* li R6, 0 */
		/* 820E2DC8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2DC8h case    8:*/		return 0x820E2DCC;
		  /* 820E2DCCh */ case    9:  		/* addi R4, R10, -25752 */
		/* 820E2DCCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9B68);
		/* 820E2DCCh case    9:*/		return 0x820E2DD0;
		  /* 820E2DD0h */ case   10:  		/* mr R31, R3 */
		/* 820E2DD0h case   10:*/		regs.R31 = regs.R3;
		/* 820E2DD0h case   10:*/		return 0x820E2DD4;
		  /* 820E2DD4h */ case   11:  		/* bl -748 */
		/* 820E2DD4h case   11:*/		regs.LR = 0x820E2DD8; return 0x820E2AE8;
		/* 820E2DD4h case   11:*/		return 0x820E2DD8;
		  /* 820E2DD8h */ case   12:  		/* mr R3, R31 */
		/* 820E2DD8h case   12:*/		regs.R3 = regs.R31;
		/* 820E2DD8h case   12:*/		return 0x820E2DDC;
		  /* 820E2DDCh */ case   13:  		/* bl 91108 */
		/* 820E2DDCh case   13:*/		regs.LR = 0x820E2DE0; return 0x820F91C0;
		/* 820E2DDCh case   13:*/		return 0x820E2DE0;
		  /* 820E2DE0h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E2DE0h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2DE0h case   14:*/		return 0x820E2DE4;
		  /* 820E2DE4h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2DE4h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2DE4h case   15:*/		return 0x820E2DE8;
		  /* 820E2DE8h */ case   16:  		/* mtspr LR, R12 */
		/* 820E2DE8h case   16:*/		regs.LR = regs.R12;
		/* 820E2DE8h case   16:*/		return 0x820E2DEC;
		  /* 820E2DECh */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2DECh case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2DECh case   17:*/		return 0x820E2DF0;
		  /* 820E2DF0h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E2DF0h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2DF0h case   18:*/		return 0x820E2DF4;
	}
	return 0x820E2DF4;
} // Block from 820E2DA8h-820E2DF4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E2DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2DF4);
		  /* 820E2DF4h */ case    0:  		/* nop */
		/* 820E2DF4h case    0:*/		cpu::op::nop();
		/* 820E2DF4h case    0:*/		return 0x820E2DF8;
	}
	return 0x820E2DF8;
} // Block from 820E2DF4h-820E2DF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E2DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2DF8);
		  /* 820E2DF8h */ case    0:  		/* mfspr R12, LR */
		/* 820E2DF8h case    0:*/		regs.R12 = regs.LR;
		/* 820E2DF8h case    0:*/		return 0x820E2DFC;
		  /* 820E2DFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2DFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2DFCh case    1:*/		return 0x820E2E00;
		  /* 820E2E00h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2E00h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2E00h case    2:*/		return 0x820E2E04;
		  /* 820E2E04h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2E04h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2E04h case    3:*/		return 0x820E2E08;
		  /* 820E2E08h */ case    4:  		/* lis R11, -32254 */
		/* 820E2E08h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2E08h case    4:*/		return 0x820E2E0C;
		  /* 820E2E0Ch */ case    5:  		/* li R7, 0 */
		/* 820E2E0Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2E0Ch case    5:*/		return 0x820E2E10;
		  /* 820E2E10h */ case    6:  		/* addi R5, R11, -26416 */
		/* 820E2E10h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF98D0);
		/* 820E2E10h case    6:*/		return 0x820E2E14;
		  /* 820E2E14h */ case    7:  		/* li R6, 0 */
		/* 820E2E14h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2E14h case    7:*/		return 0x820E2E18;
		  /* 820E2E18h */ case    8:  		/* li R4, 0 */
		/* 820E2E18h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2E18h case    8:*/		return 0x820E2E1C;
		  /* 820E2E1Ch */ case    9:  		/* mr R31, R3 */
		/* 820E2E1Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E2E1Ch case    9:*/		return 0x820E2E20;
		  /* 820E2E20h */ case   10:  		/* bl -824 */
		/* 820E2E20h case   10:*/		regs.LR = 0x820E2E24; return 0x820E2AE8;
		/* 820E2E20h case   10:*/		return 0x820E2E24;
		  /* 820E2E24h */ case   11:  		/* mr R3, R31 */
		/* 820E2E24h case   11:*/		regs.R3 = regs.R31;
		/* 820E2E24h case   11:*/		return 0x820E2E28;
	}
	return 0x820E2E28;
} // Block from 820E2DF8h-820E2E28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E2E28h
// Function '?EmitInstComplexSW@C30SWProgram@D3DXShader@@IAAJP812@AAJPBD000@Z0PAII222IKKKHPBH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2E28);
		  /* 820E2E28h */ case    0:  		/* bl 91048 */
		/* 820E2E28h case    0:*/		regs.LR = 0x820E2E2C; return 0x820F91D0;
		/* 820E2E28h case    0:*/		return 0x820E2E2C;
		  /* 820E2E2Ch */ case    1:  		/* addi R1, R1, 96 */
		/* 820E2E2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2E2Ch case    1:*/		return 0x820E2E30;
		  /* 820E2E30h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2E30h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2E30h case    2:*/		return 0x820E2E34;
		  /* 820E2E34h */ case    3:  		/* mtspr LR, R12 */
		/* 820E2E34h case    3:*/		regs.LR = regs.R12;
		/* 820E2E34h case    3:*/		return 0x820E2E38;
		  /* 820E2E38h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2E38h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2E38h case    4:*/		return 0x820E2E3C;
		  /* 820E2E3Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E2E3Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2E3Ch case    5:*/		return 0x820E2E40;
	}
	return 0x820E2E40;
} // Block from 820E2E28h-820E2E40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E2E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2E40);
		  /* 820E2E40h */ case    0:  		/* mfspr R12, LR */
		/* 820E2E40h case    0:*/		regs.R12 = regs.LR;
		/* 820E2E40h case    0:*/		return 0x820E2E44;
		  /* 820E2E44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2E44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2E44h case    1:*/		return 0x820E2E48;
		  /* 820E2E48h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2E48h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2E48h case    2:*/		return 0x820E2E4C;
		  /* 820E2E4Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2E4Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2E4Ch case    3:*/		return 0x820E2E50;
		  /* 820E2E50h */ case    4:  		/* lis R11, -32254 */
		/* 820E2E50h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2E50h case    4:*/		return 0x820E2E54;
		  /* 820E2E54h */ case    5:  		/* li R7, 0 */
		/* 820E2E54h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2E54h case    5:*/		return 0x820E2E58;
		  /* 820E2E58h */ case    6:  		/* addi R5, R11, -26404 */
		/* 820E2E58h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF98DC);
		/* 820E2E58h case    6:*/		return 0x820E2E5C;
		  /* 820E2E5Ch */ case    7:  		/* li R6, 0 */
		/* 820E2E5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2E5Ch case    7:*/		return 0x820E2E60;
		  /* 820E2E60h */ case    8:  		/* li R4, 0 */
		/* 820E2E60h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2E60h case    8:*/		return 0x820E2E64;
		  /* 820E2E64h */ case    9:  		/* mr R31, R3 */
		/* 820E2E64h case    9:*/		regs.R31 = regs.R3;
		/* 820E2E64h case    9:*/		return 0x820E2E68;
		  /* 820E2E68h */ case   10:  		/* bl -896 */
		/* 820E2E68h case   10:*/		regs.LR = 0x820E2E6C; return 0x820E2AE8;
		/* 820E2E68h case   10:*/		return 0x820E2E6C;
		  /* 820E2E6Ch */ case   11:  		/* mr R3, R31 */
		/* 820E2E6Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E2E6Ch case   11:*/		return 0x820E2E70;
		  /* 820E2E70h */ case   12:  		/* bl 91016 */
		/* 820E2E70h case   12:*/		regs.LR = 0x820E2E74; return 0x820F91F8;
		/* 820E2E70h case   12:*/		return 0x820E2E74;
		  /* 820E2E74h */ case   13:  		/* addi R1, R1, 96 */
		/* 820E2E74h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2E74h case   13:*/		return 0x820E2E78;
		  /* 820E2E78h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2E78h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2E78h case   14:*/		return 0x820E2E7C;
		  /* 820E2E7Ch */ case   15:  		/* mtspr LR, R12 */
		/* 820E2E7Ch case   15:*/		regs.LR = regs.R12;
		/* 820E2E7Ch case   15:*/		return 0x820E2E80;
		  /* 820E2E80h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2E80h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2E80h case   16:*/		return 0x820E2E84;
		  /* 820E2E84h */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E2E84h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2E84h case   17:*/		return 0x820E2E88;
	}
	return 0x820E2E88;
} // Block from 820E2E40h-820E2E88h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E2E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2E88);
		  /* 820E2E88h */ case    0:  		/* mfspr R12, LR */
		/* 820E2E88h case    0:*/		regs.R12 = regs.LR;
		/* 820E2E88h case    0:*/		return 0x820E2E8C;
		  /* 820E2E8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2E8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2E8Ch case    1:*/		return 0x820E2E90;
		  /* 820E2E90h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2E90h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2E90h case    2:*/		return 0x820E2E94;
		  /* 820E2E94h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2E94h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2E94h case    3:*/		return 0x820E2E98;
		  /* 820E2E98h */ case    4:  		/* lis R11, -32255 */
		/* 820E2E98h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E2E98h case    4:*/		return 0x820E2E9C;
		  /* 820E2E9Ch */ case    5:  		/* li R7, 0 */
		/* 820E2E9Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2E9Ch case    5:*/		return 0x820E2EA0;
		  /* 820E2EA0h */ case    6:  		/* addi R5, R11, -20936 */
		/* 820E2EA0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE38);
		/* 820E2EA0h case    6:*/		return 0x820E2EA4;
		  /* 820E2EA4h */ case    7:  		/* li R6, 0 */
		/* 820E2EA4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2EA4h case    7:*/		return 0x820E2EA8;
		  /* 820E2EA8h */ case    8:  		/* li R4, 0 */
		/* 820E2EA8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2EA8h case    8:*/		return 0x820E2EAC;
		  /* 820E2EACh */ case    9:  		/* mr R31, R3 */
		/* 820E2EACh case    9:*/		regs.R31 = regs.R3;
		/* 820E2EACh case    9:*/		return 0x820E2EB0;
		  /* 820E2EB0h */ case   10:  		/* bl -968 */
		/* 820E2EB0h case   10:*/		regs.LR = 0x820E2EB4; return 0x820E2AE8;
		/* 820E2EB0h case   10:*/		return 0x820E2EB4;
		  /* 820E2EB4h */ case   11:  		/* mr R3, R31 */
		/* 820E2EB4h case   11:*/		regs.R3 = regs.R31;
		/* 820E2EB4h case   11:*/		return 0x820E2EB8;
		  /* 820E2EB8h */ case   12:  		/* bl 86736 */
		/* 820E2EB8h case   12:*/		regs.LR = 0x820E2EBC; return 0x820F8188;
		/* 820E2EB8h case   12:*/		return 0x820E2EBC;
		  /* 820E2EBCh */ case   13:  		/* addi R1, R1, 96 */
		/* 820E2EBCh case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2EBCh case   13:*/		return 0x820E2EC0;
		  /* 820E2EC0h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2EC0h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2EC0h case   14:*/		return 0x820E2EC4;
		  /* 820E2EC4h */ case   15:  		/* mtspr LR, R12 */
		/* 820E2EC4h case   15:*/		regs.LR = regs.R12;
		/* 820E2EC4h case   15:*/		return 0x820E2EC8;
		  /* 820E2EC8h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2EC8h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2EC8h case   16:*/		return 0x820E2ECC;
		  /* 820E2ECCh */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E2ECCh case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2ECCh case   17:*/		return 0x820E2ED0;
	}
	return 0x820E2ED0;
} // Block from 820E2E88h-820E2ED0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E2ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2ED0);
		  /* 820E2ED0h */ case    0:  		/* mfspr R12, LR */
		/* 820E2ED0h case    0:*/		regs.R12 = regs.LR;
		/* 820E2ED0h case    0:*/		return 0x820E2ED4;
		  /* 820E2ED4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2ED4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2ED4h case    1:*/		return 0x820E2ED8;
		  /* 820E2ED8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2ED8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2ED8h case    2:*/		return 0x820E2EDC;
		  /* 820E2EDCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2EDCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2EDCh case    3:*/		return 0x820E2EE0;
		  /* 820E2EE0h */ case    4:  		/* lis R11, -32255 */
		/* 820E2EE0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E2EE0h case    4:*/		return 0x820E2EE4;
		  /* 820E2EE4h */ case    5:  		/* lis R10, -32242 */
		/* 820E2EE4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E2EE4h case    5:*/		return 0x820E2EE8;
		  /* 820E2EE8h */ case    6:  		/* addi R5, R11, -8188 */
		/* 820E2EE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE004);
		/* 820E2EE8h case    6:*/		return 0x820E2EEC;
		  /* 820E2EECh */ case    7:  		/* li R7, 0 */
		/* 820E2EECh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2EECh case    7:*/		return 0x820E2EF0;
		  /* 820E2EF0h */ case    8:  		/* li R6, 0 */
		/* 820E2EF0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2EF0h case    8:*/		return 0x820E2EF4;
		  /* 820E2EF4h */ case    9:  		/* addi R4, R10, -25736 */
		/* 820E2EF4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9B78);
		/* 820E2EF4h case    9:*/		return 0x820E2EF8;
		  /* 820E2EF8h */ case   10:  		/* mr R31, R3 */
		/* 820E2EF8h case   10:*/		regs.R31 = regs.R3;
		/* 820E2EF8h case   10:*/		return 0x820E2EFC;
		  /* 820E2EFCh */ case   11:  		/* bl -1044 */
		/* 820E2EFCh case   11:*/		regs.LR = 0x820E2F00; return 0x820E2AE8;
		/* 820E2EFCh case   11:*/		return 0x820E2F00;
		  /* 820E2F00h */ case   12:  		/* mr R3, R31 */
		/* 820E2F00h case   12:*/		regs.R3 = regs.R31;
		/* 820E2F00h case   12:*/		return 0x820E2F04;
		  /* 820E2F04h */ case   13:  		/* bl 90908 */
		/* 820E2F04h case   13:*/		regs.LR = 0x820E2F08; return 0x820F9220;
		/* 820E2F04h case   13:*/		return 0x820E2F08;
		  /* 820E2F08h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E2F08h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2F08h case   14:*/		return 0x820E2F0C;
		  /* 820E2F0Ch */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2F0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2F0Ch case   15:*/		return 0x820E2F10;
		  /* 820E2F10h */ case   16:  		/* mtspr LR, R12 */
		/* 820E2F10h case   16:*/		regs.LR = regs.R12;
		/* 820E2F10h case   16:*/		return 0x820E2F14;
		  /* 820E2F14h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2F14h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2F14h case   17:*/		return 0x820E2F18;
		  /* 820E2F18h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E2F18h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2F18h case   18:*/		return 0x820E2F1C;
	}
	return 0x820E2F1C;
} // Block from 820E2ED0h-820E2F1Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E2F1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2F1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2F1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2F1C);
		  /* 820E2F1Ch */ case    0:  		/* nop */
		/* 820E2F1Ch case    0:*/		cpu::op::nop();
		/* 820E2F1Ch case    0:*/		return 0x820E2F20;
	}
	return 0x820E2F20;
} // Block from 820E2F1Ch-820E2F20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E2F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2F20);
		  /* 820E2F20h */ case    0:  		/* mfspr R12, LR */
		/* 820E2F20h case    0:*/		regs.R12 = regs.LR;
		/* 820E2F20h case    0:*/		return 0x820E2F24;
		  /* 820E2F24h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2F24h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2F24h case    1:*/		return 0x820E2F28;
		  /* 820E2F28h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2F28h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2F28h case    2:*/		return 0x820E2F2C;
		  /* 820E2F2Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2F2Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2F2Ch case    3:*/		return 0x820E2F30;
		  /* 820E2F30h */ case    4:  		/* lis R11, -32254 */
		/* 820E2F30h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2F30h case    4:*/		return 0x820E2F34;
		  /* 820E2F34h */ case    5:  		/* li R7, 0 */
		/* 820E2F34h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2F34h case    5:*/		return 0x820E2F38;
		  /* 820E2F38h */ case    6:  		/* addi R5, R11, -26392 */
		/* 820E2F38h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF98E8);
		/* 820E2F38h case    6:*/		return 0x820E2F3C;
		  /* 820E2F3Ch */ case    7:  		/* li R6, 0 */
		/* 820E2F3Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2F3Ch case    7:*/		return 0x820E2F40;
		  /* 820E2F40h */ case    8:  		/* li R4, 0 */
		/* 820E2F40h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2F40h case    8:*/		return 0x820E2F44;
		  /* 820E2F44h */ case    9:  		/* mr R31, R3 */
		/* 820E2F44h case    9:*/		regs.R31 = regs.R3;
		/* 820E2F44h case    9:*/		return 0x820E2F48;
		  /* 820E2F48h */ case   10:  		/* bl -1120 */
		/* 820E2F48h case   10:*/		regs.LR = 0x820E2F4C; return 0x820E2AE8;
		/* 820E2F48h case   10:*/		return 0x820E2F4C;
		  /* 820E2F4Ch */ case   11:  		/* mr R3, R31 */
		/* 820E2F4Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E2F4Ch case   11:*/		return 0x820E2F50;
		  /* 820E2F50h */ case   12:  		/* bl 90872 */
		/* 820E2F50h case   12:*/		regs.LR = 0x820E2F54; return 0x820F9248;
		/* 820E2F50h case   12:*/		return 0x820E2F54;
		  /* 820E2F54h */ case   13:  		/* addi R1, R1, 96 */
		/* 820E2F54h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2F54h case   13:*/		return 0x820E2F58;
		  /* 820E2F58h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2F58h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2F58h case   14:*/		return 0x820E2F5C;
		  /* 820E2F5Ch */ case   15:  		/* mtspr LR, R12 */
		/* 820E2F5Ch case   15:*/		regs.LR = regs.R12;
		/* 820E2F5Ch case   15:*/		return 0x820E2F60;
		  /* 820E2F60h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2F60h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2F60h case   16:*/		return 0x820E2F64;
		  /* 820E2F64h */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E2F64h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2F64h case   17:*/		return 0x820E2F68;
	}
	return 0x820E2F68;
} // Block from 820E2F20h-820E2F68h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E2F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2F68);
		  /* 820E2F68h */ case    0:  		/* mfspr R12, LR */
		/* 820E2F68h case    0:*/		regs.R12 = regs.LR;
		/* 820E2F68h case    0:*/		return 0x820E2F6C;
		  /* 820E2F6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2F6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2F6Ch case    1:*/		return 0x820E2F70;
		  /* 820E2F70h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2F70h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2F70h case    2:*/		return 0x820E2F74;
		  /* 820E2F74h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2F74h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2F74h case    3:*/		return 0x820E2F78;
		  /* 820E2F78h */ case    4:  		/* lis R11, -32254 */
		/* 820E2F78h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E2F78h case    4:*/		return 0x820E2F7C;
		  /* 820E2F7Ch */ case    5:  		/* li R7, 0 */
		/* 820E2F7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2F7Ch case    5:*/		return 0x820E2F80;
		  /* 820E2F80h */ case    6:  		/* addi R5, R11, -26380 */
		/* 820E2F80h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF98F4);
		/* 820E2F80h case    6:*/		return 0x820E2F84;
		  /* 820E2F84h */ case    7:  		/* li R6, 0 */
		/* 820E2F84h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2F84h case    7:*/		return 0x820E2F88;
		  /* 820E2F88h */ case    8:  		/* li R4, 0 */
		/* 820E2F88h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E2F88h case    8:*/		return 0x820E2F8C;
		  /* 820E2F8Ch */ case    9:  		/* mr R31, R3 */
		/* 820E2F8Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E2F8Ch case    9:*/		return 0x820E2F90;
		  /* 820E2F90h */ case   10:  		/* bl -1192 */
		/* 820E2F90h case   10:*/		regs.LR = 0x820E2F94; return 0x820E2AE8;
		/* 820E2F90h case   10:*/		return 0x820E2F94;
		  /* 820E2F94h */ case   11:  		/* mr R3, R31 */
		/* 820E2F94h case   11:*/		regs.R3 = regs.R31;
		/* 820E2F94h case   11:*/		return 0x820E2F98;
		  /* 820E2F98h */ case   12:  		/* bl 90816 */
		/* 820E2F98h case   12:*/		regs.LR = 0x820E2F9C; return 0x820F9258;
		/* 820E2F98h case   12:*/		return 0x820E2F9C;
		  /* 820E2F9Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 820E2F9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2F9Ch case   13:*/		return 0x820E2FA0;
		  /* 820E2FA0h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2FA0h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2FA0h case   14:*/		return 0x820E2FA4;
		  /* 820E2FA4h */ case   15:  		/* mtspr LR, R12 */
		/* 820E2FA4h case   15:*/		regs.LR = regs.R12;
		/* 820E2FA4h case   15:*/		return 0x820E2FA8;
		  /* 820E2FA8h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2FA8h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2FA8h case   16:*/		return 0x820E2FAC;
		  /* 820E2FACh */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E2FACh case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2FACh case   17:*/		return 0x820E2FB0;
	}
	return 0x820E2FB0;
} // Block from 820E2F68h-820E2FB0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E2FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2FB0);
		  /* 820E2FB0h */ case    0:  		/* mfspr R12, LR */
		/* 820E2FB0h case    0:*/		regs.R12 = regs.LR;
		/* 820E2FB0h case    0:*/		return 0x820E2FB4;
		  /* 820E2FB4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E2FB4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2FB4h case    1:*/		return 0x820E2FB8;
		  /* 820E2FB8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E2FB8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2FB8h case    2:*/		return 0x820E2FBC;
		  /* 820E2FBCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E2FBCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E2FBCh case    3:*/		return 0x820E2FC0;
		  /* 820E2FC0h */ case    4:  		/* lis R11, -32255 */
		/* 820E2FC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E2FC0h case    4:*/		return 0x820E2FC4;
		  /* 820E2FC4h */ case    5:  		/* lis R10, -32242 */
		/* 820E2FC4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E2FC4h case    5:*/		return 0x820E2FC8;
		  /* 820E2FC8h */ case    6:  		/* addi R5, R11, -8208 */
		/* 820E2FC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFF0);
		/* 820E2FC8h case    6:*/		return 0x820E2FCC;
		  /* 820E2FCCh */ case    7:  		/* li R7, 0 */
		/* 820E2FCCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E2FCCh case    7:*/		return 0x820E2FD0;
		  /* 820E2FD0h */ case    8:  		/* li R6, 0 */
		/* 820E2FD0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E2FD0h case    8:*/		return 0x820E2FD4;
		  /* 820E2FD4h */ case    9:  		/* addi R4, R10, -25688 */
		/* 820E2FD4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9BA8);
		/* 820E2FD4h case    9:*/		return 0x820E2FD8;
		  /* 820E2FD8h */ case   10:  		/* mr R31, R3 */
		/* 820E2FD8h case   10:*/		regs.R31 = regs.R3;
		/* 820E2FD8h case   10:*/		return 0x820E2FDC;
		  /* 820E2FDCh */ case   11:  		/* bl -1268 */
		/* 820E2FDCh case   11:*/		regs.LR = 0x820E2FE0; return 0x820E2AE8;
		/* 820E2FDCh case   11:*/		return 0x820E2FE0;
		  /* 820E2FE0h */ case   12:  		/* mr R3, R31 */
		/* 820E2FE0h case   12:*/		regs.R3 = regs.R31;
		/* 820E2FE0h case   12:*/		return 0x820E2FE4;
		  /* 820E2FE4h */ case   13:  		/* bl 90756 */
		/* 820E2FE4h case   13:*/		regs.LR = 0x820E2FE8; return 0x820F9268;
		/* 820E2FE4h case   13:*/		return 0x820E2FE8;
		  /* 820E2FE8h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E2FE8h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E2FE8h case   14:*/		return 0x820E2FEC;
		  /* 820E2FECh */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E2FECh case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E2FECh case   15:*/		return 0x820E2FF0;
		  /* 820E2FF0h */ case   16:  		/* mtspr LR, R12 */
		/* 820E2FF0h case   16:*/		regs.LR = regs.R12;
		/* 820E2FF0h case   16:*/		return 0x820E2FF4;
		  /* 820E2FF4h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E2FF4h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E2FF4h case   17:*/		return 0x820E2FF8;
		  /* 820E2FF8h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E2FF8h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E2FF8h case   18:*/		return 0x820E2FFC;
	}
	return 0x820E2FFC;
} // Block from 820E2FB0h-820E2FFCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E2FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E2FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E2FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E2FFC);
		  /* 820E2FFCh */ case    0:  		/* nop */
		/* 820E2FFCh case    0:*/		cpu::op::nop();
		/* 820E2FFCh case    0:*/		return 0x820E3000;
	}
	return 0x820E3000;
} // Block from 820E2FFCh-820E3000h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3000);
		  /* 820E3000h */ case    0:  		/* mfspr R12, LR */
		/* 820E3000h case    0:*/		regs.R12 = regs.LR;
		/* 820E3000h case    0:*/		return 0x820E3004;
		  /* 820E3004h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3004h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3004h case    1:*/		return 0x820E3008;
		  /* 820E3008h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820E3008h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E3008h case    2:*/		return 0x820E300C;
		  /* 820E300Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820E300Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E300Ch case    3:*/		return 0x820E3010;
		  /* 820E3010h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820E3010h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820E3010h case    4:*/		return 0x820E3014;
		  /* 820E3014h */ case    5:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E3014h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E3014h case    5:*/		return 0x820E3018;
		  /* 820E3018h */ case    6:  		/* lis R10, 8 */
		/* 820E3018h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 820E3018h case    6:*/		return 0x820E301C;
		  /* 820E301Ch */ case    7:  		/* lwz R9, <#[R3 + 20]> */
		/* 820E301Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820E301Ch case    7:*/		return 0x820E3020;
		  /* 820E3020h */ case    8:  		/* mr R30, R3 */
		/* 820E3020h case    8:*/		regs.R30 = regs.R3;
		/* 820E3020h case    8:*/		return 0x820E3024;
		  /* 820E3024h */ case    9:  		/* li R7, 0 */
		/* 820E3024h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E3024h case    9:*/		return 0x820E3028;
		  /* 820E3028h */ case   10:  		/* li R6, 0 */
		/* 820E3028h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3028h case   10:*/		return 0x820E302C;
		  /* 820E302Ch */ case   11:  		/* li R4, 0 */
		/* 820E302Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E302Ch case   11:*/		return 0x820E3030;
		  /* 820E3030h */ case   12:  		/* lwz R8, <#[R11]> */
		/* 820E3030h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3030h case   12:*/		return 0x820E3034;
		  /* 820E3034h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E3034h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E3034h case   13:*/		return 0x820E3038;
		  /* 820E3038h */ case   14:  		/* rlwinm R8, R8, 2, 10, 29 */
		/* 820E3038h case   14:*/		cpu::op::rlwinm<0,2,10,29>(regs,&regs.R8,regs.R8);
		/* 820E3038h case   14:*/		return 0x820E303C;
		  /* 820E303Ch */ case   15:  		/* lwzx R11, <#[R8 + R11]> */
		/* 820E303Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E303Ch case   15:*/		return 0x820E3040;
		  /* 820E3040h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3040h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3040h case   16:*/		return 0x820E3044;
		  /* 820E3044h */ case   17:  		/* lwzx R31, <#[R11 + R9]> */
		/* 820E3044h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E3044h case   17:*/		return 0x820E3048;
		  /* 820E3048h */ case   18:  		/* lwz R11, <#[R31 + 60]> */
		/* 820E3048h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E3048h case   18:*/		return 0x820E304C;
		  /* 820E304Ch */ case   19:  		/* rlwinm R9, R11, 0, 11, 15 */
		/* 820E304Ch case   19:*/		cpu::op::rlwinm<0,0,11,15>(regs,&regs.R9,regs.R11);
		/* 820E304Ch case   19:*/		return 0x820E3050;
		  /* 820E3050h */ case   20:  		/* cmplw CR6, R9, R10 */
		/* 820E3050h case   20:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E3050h case   20:*/		return 0x820E3054;
		  /* 820E3054h */ case   21:  		/* bc 4, CR6_EQ, 40 */
		/* 820E3054h case   21:*/		if ( !regs.CR[6].eq ) { return 0x820E307C;  }
		/* 820E3054h case   21:*/		return 0x820E3058;
		  /* 820E3058h */ case   22:  		/* rlwinm R11, R11, 0, 13, 11 */
		/* 820E3058h case   22:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R11,regs.R11);
		/* 820E3058h case   22:*/		return 0x820E305C;
		  /* 820E305Ch */ case   23:  		/* lis R10, -32254 */
		/* 820E305Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E305Ch case   23:*/		return 0x820E3060;
		  /* 820E3060h */ case   24:  		/* stw R11, <#[R31 + 60]> */
		/* 820E3060h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E3060h case   24:*/		return 0x820E3064;
		  /* 820E3064h */ case   25:  		/* addi R5, R10, -26356 */
		/* 820E3064h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF990C);
		/* 820E3064h case   25:*/		return 0x820E3068;
		  /* 820E3068h */ case   26:  		/* bl -1408 */
		/* 820E3068h case   26:*/		regs.LR = 0x820E306C; return 0x820E2AE8;
		/* 820E3068h case   26:*/		return 0x820E306C;
		  /* 820E306Ch */ case   27:  		/* lwz R11, <#[R31 + 60]> */
		/* 820E306Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E306Ch case   27:*/		return 0x820E3070;
		  /* 820E3070h */ case   28:  		/* oris R11, R11, 8 */
		/* 820E3070h case   28:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820E3070h case   28:*/		return 0x820E3074;
		  /* 820E3074h */ case   29:  		/* stw R11, <#[R31 + 60]> */
		/* 820E3074h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E3074h case   29:*/		return 0x820E3078;
		  /* 820E3078h */ case   30:  		/* b 16 */
		/* 820E3078h case   30:*/		return 0x820E3088;
		/* 820E3078h case   30:*/		return 0x820E307C;
	}
	return 0x820E307C;
} // Block from 820E3000h-820E307Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 820E307Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E307C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E307C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E307C);
		  /* 820E307Ch */ case    0:  		/* lis R11, -32254 */
		/* 820E307Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E307Ch case    0:*/		return 0x820E3080;
		  /* 820E3080h */ case    1:  		/* addi R5, R11, -26368 */
		/* 820E3080h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9900);
		/* 820E3080h case    1:*/		return 0x820E3084;
		  /* 820E3084h */ case    2:  		/* bl -1436 */
		/* 820E3084h case    2:*/		regs.LR = 0x820E3088; return 0x820E2AE8;
		/* 820E3084h case    2:*/		return 0x820E3088;
	}
	return 0x820E3088;
} // Block from 820E307Ch-820E3088h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3088);
		  /* 820E3088h */ case    0:  		/* mr R3, R30 */
		/* 820E3088h case    0:*/		regs.R3 = regs.R30;
		/* 820E3088h case    0:*/		return 0x820E308C;
		  /* 820E308Ch */ case    1:  		/* bl 90620 */
		/* 820E308Ch case    1:*/		regs.LR = 0x820E3090; return 0x820F9288;
		/* 820E308Ch case    1:*/		return 0x820E3090;
		  /* 820E3090h */ case    2:  		/* addi R1, R1, 112 */
		/* 820E3090h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820E3090h case    2:*/		return 0x820E3094;
		  /* 820E3094h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3094h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3094h case    3:*/		return 0x820E3098;
		  /* 820E3098h */ case    4:  		/* mtspr LR, R12 */
		/* 820E3098h case    4:*/		regs.LR = regs.R12;
		/* 820E3098h case    4:*/		return 0x820E309C;
		  /* 820E309Ch */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 820E309Ch case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E309Ch case    5:*/		return 0x820E30A0;
		  /* 820E30A0h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 820E30A0h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E30A0h case    6:*/		return 0x820E30A4;
		  /* 820E30A4h */ case    7:  		/* bclr 20, CR0_LT */
		/* 820E30A4h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E30A4h case    7:*/		return 0x820E30A8;
	}
	return 0x820E30A8;
} // Block from 820E3088h-820E30A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E30A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E30A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E30A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E30A8);
		  /* 820E30A8h */ case    0:  		/* mfspr R12, LR */
		/* 820E30A8h case    0:*/		regs.R12 = regs.LR;
		/* 820E30A8h case    0:*/		return 0x820E30AC;
		  /* 820E30ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E30ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E30ACh case    1:*/		return 0x820E30B0;
		  /* 820E30B0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E30B0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E30B0h case    2:*/		return 0x820E30B4;
		  /* 820E30B4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E30B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E30B4h case    3:*/		return 0x820E30B8;
		  /* 820E30B8h */ case    4:  		/* lis R11, -32254 */
		/* 820E30B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E30B8h case    4:*/		return 0x820E30BC;
		  /* 820E30BCh */ case    5:  		/* li R7, 0 */
		/* 820E30BCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E30BCh case    5:*/		return 0x820E30C0;
		  /* 820E30C0h */ case    6:  		/* addi R5, R11, -26344 */
		/* 820E30C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9918);
		/* 820E30C0h case    6:*/		return 0x820E30C4;
		  /* 820E30C4h */ case    7:  		/* li R6, 0 */
		/* 820E30C4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E30C4h case    7:*/		return 0x820E30C8;
		  /* 820E30C8h */ case    8:  		/* li R4, 0 */
		/* 820E30C8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E30C8h case    8:*/		return 0x820E30CC;
		  /* 820E30CCh */ case    9:  		/* mr R31, R3 */
		/* 820E30CCh case    9:*/		regs.R31 = regs.R3;
		/* 820E30CCh case    9:*/		return 0x820E30D0;
		  /* 820E30D0h */ case   10:  		/* bl -1512 */
		/* 820E30D0h case   10:*/		regs.LR = 0x820E30D4; return 0x820E2AE8;
		/* 820E30D0h case   10:*/		return 0x820E30D4;
		  /* 820E30D4h */ case   11:  		/* mr R3, R31 */
		/* 820E30D4h case   11:*/		regs.R3 = regs.R31;
		/* 820E30D4h case   11:*/		return 0x820E30D8;
		  /* 820E30D8h */ case   12:  		/* bl 90560 */
		/* 820E30D8h case   12:*/		regs.LR = 0x820E30DC; return 0x820F9298;
		/* 820E30D8h case   12:*/		return 0x820E30DC;
		  /* 820E30DCh */ case   13:  		/* addi R1, R1, 96 */
		/* 820E30DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E30DCh case   13:*/		return 0x820E30E0;
		  /* 820E30E0h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E30E0h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E30E0h case   14:*/		return 0x820E30E4;
		  /* 820E30E4h */ case   15:  		/* mtspr LR, R12 */
		/* 820E30E4h case   15:*/		regs.LR = regs.R12;
		/* 820E30E4h case   15:*/		return 0x820E30E8;
		  /* 820E30E8h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E30E8h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E30E8h case   16:*/		return 0x820E30EC;
		  /* 820E30ECh */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E30ECh case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E30ECh case   17:*/		return 0x820E30F0;
	}
	return 0x820E30F0;
} // Block from 820E30A8h-820E30F0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E30F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E30F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E30F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E30F0);
		  /* 820E30F0h */ case    0:  		/* mfspr R12, LR */
		/* 820E30F0h case    0:*/		regs.R12 = regs.LR;
		/* 820E30F0h case    0:*/		return 0x820E30F4;
		  /* 820E30F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E30F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E30F4h case    1:*/		return 0x820E30F8;
		  /* 820E30F8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E30F8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E30F8h case    2:*/		return 0x820E30FC;
		  /* 820E30FCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E30FCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E30FCh case    3:*/		return 0x820E3100;
		  /* 820E3100h */ case    4:  		/* lis R11, -32254 */
		/* 820E3100h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3100h case    4:*/		return 0x820E3104;
		  /* 820E3104h */ case    5:  		/* li R7, 0 */
		/* 820E3104h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E3104h case    5:*/		return 0x820E3108;
		  /* 820E3108h */ case    6:  		/* addi R5, R11, -26332 */
		/* 820E3108h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9924);
		/* 820E3108h case    6:*/		return 0x820E310C;
		  /* 820E310Ch */ case    7:  		/* li R6, 0 */
		/* 820E310Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E310Ch case    7:*/		return 0x820E3110;
		  /* 820E3110h */ case    8:  		/* li R4, 0 */
		/* 820E3110h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3110h case    8:*/		return 0x820E3114;
		  /* 820E3114h */ case    9:  		/* mr R31, R3 */
		/* 820E3114h case    9:*/		regs.R31 = regs.R3;
		/* 820E3114h case    9:*/		return 0x820E3118;
		  /* 820E3118h */ case   10:  		/* bl -1584 */
		/* 820E3118h case   10:*/		regs.LR = 0x820E311C; return 0x820E2AE8;
		/* 820E3118h case   10:*/		return 0x820E311C;
		  /* 820E311Ch */ case   11:  		/* mr R3, R31 */
		/* 820E311Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E311Ch case   11:*/		return 0x820E3120;
		  /* 820E3120h */ case   12:  		/* bl 90520 */
		/* 820E3120h case   12:*/		regs.LR = 0x820E3124; return 0x820F92B8;
		/* 820E3120h case   12:*/		return 0x820E3124;
		  /* 820E3124h */ case   13:  		/* addi R1, R1, 96 */
		/* 820E3124h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3124h case   13:*/		return 0x820E3128;
		  /* 820E3128h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3128h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3128h case   14:*/		return 0x820E312C;
		  /* 820E312Ch */ case   15:  		/* mtspr LR, R12 */
		/* 820E312Ch case   15:*/		regs.LR = regs.R12;
		/* 820E312Ch case   15:*/		return 0x820E3130;
		  /* 820E3130h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3130h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3130h case   16:*/		return 0x820E3134;
		  /* 820E3134h */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E3134h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3134h case   17:*/		return 0x820E3138;
	}
	return 0x820E3138;
} // Block from 820E30F0h-820E3138h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3138);
		  /* 820E3138h */ case    0:  		/* mfspr R12, LR */
		/* 820E3138h case    0:*/		regs.R12 = regs.LR;
		/* 820E3138h case    0:*/		return 0x820E313C;
		  /* 820E313Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E313Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E313Ch case    1:*/		return 0x820E3140;
		  /* 820E3140h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3140h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3140h case    2:*/		return 0x820E3144;
		  /* 820E3144h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E3144h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E3144h case    3:*/		return 0x820E3148;
		  /* 820E3148h */ case    4:  		/* lis R11, -32254 */
		/* 820E3148h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3148h case    4:*/		return 0x820E314C;
		  /* 820E314Ch */ case    5:  		/* li R7, 0 */
		/* 820E314Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E314Ch case    5:*/		return 0x820E3150;
		  /* 820E3150h */ case    6:  		/* addi R5, R11, -26320 */
		/* 820E3150h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9930);
		/* 820E3150h case    6:*/		return 0x820E3154;
		  /* 820E3154h */ case    7:  		/* li R6, 0 */
		/* 820E3154h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3154h case    7:*/		return 0x820E3158;
		  /* 820E3158h */ case    8:  		/* li R4, 0 */
		/* 820E3158h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3158h case    8:*/		return 0x820E315C;
		  /* 820E315Ch */ case    9:  		/* mr R31, R3 */
		/* 820E315Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E315Ch case    9:*/		return 0x820E3160;
		  /* 820E3160h */ case   10:  		/* bl -1656 */
		/* 820E3160h case   10:*/		regs.LR = 0x820E3164; return 0x820E2AE8;
		/* 820E3160h case   10:*/		return 0x820E3164;
		  /* 820E3164h */ case   11:  		/* mr R3, R31 */
		/* 820E3164h case   11:*/		regs.R3 = regs.R31;
		/* 820E3164h case   11:*/		return 0x820E3168;
		  /* 820E3168h */ case   12:  		/* bl 90448 */
		/* 820E3168h case   12:*/		regs.LR = 0x820E316C; return 0x820F92B8;
		/* 820E3168h case   12:*/		return 0x820E316C;
		  /* 820E316Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 820E316Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E316Ch case   13:*/		return 0x820E3170;
		  /* 820E3170h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3170h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3170h case   14:*/		return 0x820E3174;
		  /* 820E3174h */ case   15:  		/* mtspr LR, R12 */
		/* 820E3174h case   15:*/		regs.LR = regs.R12;
		/* 820E3174h case   15:*/		return 0x820E3178;
		  /* 820E3178h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3178h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3178h case   16:*/		return 0x820E317C;
		  /* 820E317Ch */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E317Ch case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E317Ch case   17:*/		return 0x820E3180;
	}
	return 0x820E3180;
} // Block from 820E3138h-820E3180h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3180);
		  /* 820E3180h */ case    0:  		/* mfspr R12, LR */
		/* 820E3180h case    0:*/		regs.R12 = regs.LR;
		/* 820E3180h case    0:*/		return 0x820E3184;
		  /* 820E3184h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3184h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3184h case    1:*/		return 0x820E3188;
		  /* 820E3188h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3188h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3188h case    2:*/		return 0x820E318C;
		  /* 820E318Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E318Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E318Ch case    3:*/		return 0x820E3190;
		  /* 820E3190h */ case    4:  		/* lis R11, -32255 */
		/* 820E3190h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E3190h case    4:*/		return 0x820E3194;
		  /* 820E3194h */ case    5:  		/* lis R10, -32242 */
		/* 820E3194h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E3194h case    5:*/		return 0x820E3198;
		  /* 820E3198h */ case    6:  		/* addi R5, R11, -8216 */
		/* 820E3198h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFE8);
		/* 820E3198h case    6:*/		return 0x820E319C;
		  /* 820E319Ch */ case    7:  		/* li R7, 0 */
		/* 820E319Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E319Ch case    7:*/		return 0x820E31A0;
		  /* 820E31A0h */ case    8:  		/* li R6, 0 */
		/* 820E31A0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E31A0h case    8:*/		return 0x820E31A4;
		  /* 820E31A4h */ case    9:  		/* addi R4, R10, -25720 */
		/* 820E31A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9B88);
		/* 820E31A4h case    9:*/		return 0x820E31A8;
		  /* 820E31A8h */ case   10:  		/* mr R31, R3 */
		/* 820E31A8h case   10:*/		regs.R31 = regs.R3;
		/* 820E31A8h case   10:*/		return 0x820E31AC;
		  /* 820E31ACh */ case   11:  		/* bl -1732 */
		/* 820E31ACh case   11:*/		regs.LR = 0x820E31B0; return 0x820E2AE8;
		/* 820E31ACh case   11:*/		return 0x820E31B0;
		  /* 820E31B0h */ case   12:  		/* mr R3, R31 */
		/* 820E31B0h case   12:*/		regs.R3 = regs.R31;
		/* 820E31B0h case   12:*/		return 0x820E31B4;
		  /* 820E31B4h */ case   13:  		/* bl 90676 */
		/* 820E31B4h case   13:*/		regs.LR = 0x820E31B8; return 0x820F93E8;
		/* 820E31B4h case   13:*/		return 0x820E31B8;
		  /* 820E31B8h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E31B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E31B8h case   14:*/		return 0x820E31BC;
		  /* 820E31BCh */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E31BCh case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E31BCh case   15:*/		return 0x820E31C0;
		  /* 820E31C0h */ case   16:  		/* mtspr LR, R12 */
		/* 820E31C0h case   16:*/		regs.LR = regs.R12;
		/* 820E31C0h case   16:*/		return 0x820E31C4;
		  /* 820E31C4h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E31C4h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E31C4h case   17:*/		return 0x820E31C8;
		  /* 820E31C8h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E31C8h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E31C8h case   18:*/		return 0x820E31CC;
	}
	return 0x820E31CC;
} // Block from 820E3180h-820E31CCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E31CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E31CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E31CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E31CC);
		  /* 820E31CCh */ case    0:  		/* nop */
		/* 820E31CCh case    0:*/		cpu::op::nop();
		/* 820E31CCh case    0:*/		return 0x820E31D0;
	}
	return 0x820E31D0;
} // Block from 820E31CCh-820E31D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E31D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E31D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E31D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E31D0);
		  /* 820E31D0h */ case    0:  		/* mfspr R12, LR */
		/* 820E31D0h case    0:*/		regs.R12 = regs.LR;
		/* 820E31D0h case    0:*/		return 0x820E31D4;
		  /* 820E31D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E31D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E31D4h case    1:*/		return 0x820E31D8;
		  /* 820E31D8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E31D8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E31D8h case    2:*/		return 0x820E31DC;
		  /* 820E31DCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E31DCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E31DCh case    3:*/		return 0x820E31E0;
		  /* 820E31E0h */ case    4:  		/* lis R11, -32255 */
		/* 820E31E0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E31E0h case    4:*/		return 0x820E31E4;
		  /* 820E31E4h */ case    5:  		/* lis R10, -32242 */
		/* 820E31E4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E31E4h case    5:*/		return 0x820E31E8;
		  /* 820E31E8h */ case    6:  		/* addi R5, R11, -8328 */
		/* 820E31E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF78);
		/* 820E31E8h case    6:*/		return 0x820E31EC;
		  /* 820E31ECh */ case    7:  		/* li R7, 0 */
		/* 820E31ECh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E31ECh case    7:*/		return 0x820E31F0;
		  /* 820E31F0h */ case    8:  		/* li R6, 0 */
		/* 820E31F0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E31F0h case    8:*/		return 0x820E31F4;
		  /* 820E31F4h */ case    9:  		/* addi R4, R10, -25704 */
		/* 820E31F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9B98);
		/* 820E31F4h case    9:*/		return 0x820E31F8;
		  /* 820E31F8h */ case   10:  		/* mr R31, R3 */
		/* 820E31F8h case   10:*/		regs.R31 = regs.R3;
		/* 820E31F8h case   10:*/		return 0x820E31FC;
		  /* 820E31FCh */ case   11:  		/* bl -1812 */
		/* 820E31FCh case   11:*/		regs.LR = 0x820E3200; return 0x820E2AE8;
		/* 820E31FCh case   11:*/		return 0x820E3200;
		  /* 820E3200h */ case   12:  		/* mr R3, R31 */
		/* 820E3200h case   12:*/		regs.R3 = regs.R31;
		/* 820E3200h case   12:*/		return 0x820E3204;
		  /* 820E3204h */ case   13:  		/* bl 90644 */
		/* 820E3204h case   13:*/		regs.LR = 0x820E3208; return 0x820F9418;
		/* 820E3204h case   13:*/		return 0x820E3208;
		  /* 820E3208h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E3208h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3208h case   14:*/		return 0x820E320C;
		  /* 820E320Ch */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E320Ch case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E320Ch case   15:*/		return 0x820E3210;
		  /* 820E3210h */ case   16:  		/* mtspr LR, R12 */
		/* 820E3210h case   16:*/		regs.LR = regs.R12;
		/* 820E3210h case   16:*/		return 0x820E3214;
		  /* 820E3214h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3214h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3214h case   17:*/		return 0x820E3218;
		  /* 820E3218h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E3218h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3218h case   18:*/		return 0x820E321C;
	}
	return 0x820E321C;
} // Block from 820E31D0h-820E321Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E321Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E321C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E321C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E321C);
		  /* 820E321Ch */ case    0:  		/* nop */
		/* 820E321Ch case    0:*/		cpu::op::nop();
		/* 820E321Ch case    0:*/		return 0x820E3220;
	}
	return 0x820E3220;
} // Block from 820E321Ch-820E3220h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3220);
		  /* 820E3220h */ case    0:  		/* mfspr R12, LR */
		/* 820E3220h case    0:*/		regs.R12 = regs.LR;
		/* 820E3220h case    0:*/		return 0x820E3224;
		  /* 820E3224h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3224h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3224h case    1:*/		return 0x820E3228;
		  /* 820E3228h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3228h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3228h case    2:*/		return 0x820E322C;
		  /* 820E322Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E322Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E322Ch case    3:*/		return 0x820E3230;
		  /* 820E3230h */ case    4:  		/* lis R11, -32255 */
		/* 820E3230h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E3230h case    4:*/		return 0x820E3234;
		  /* 820E3234h */ case    5:  		/* lis R10, -32242 */
		/* 820E3234h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E3234h case    5:*/		return 0x820E3238;
		  /* 820E3238h */ case    6:  		/* addi R5, R11, -8332 */
		/* 820E3238h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF74);
		/* 820E3238h case    6:*/		return 0x820E323C;
		  /* 820E323Ch */ case    7:  		/* li R7, 0 */
		/* 820E323Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E323Ch case    7:*/		return 0x820E3240;
		  /* 820E3240h */ case    8:  		/* li R6, 0 */
		/* 820E3240h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3240h case    8:*/		return 0x820E3244;
		  /* 820E3244h */ case    9:  		/* addi R4, R10, -25608 */
		/* 820E3244h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9BF8);
		/* 820E3244h case    9:*/		return 0x820E3248;
		  /* 820E3248h */ case   10:  		/* mr R31, R3 */
		/* 820E3248h case   10:*/		regs.R31 = regs.R3;
		/* 820E3248h case   10:*/		return 0x820E324C;
		  /* 820E324Ch */ case   11:  		/* bl -1892 */
		/* 820E324Ch case   11:*/		regs.LR = 0x820E3250; return 0x820E2AE8;
		/* 820E324Ch case   11:*/		return 0x820E3250;
		  /* 820E3250h */ case   12:  		/* mr R3, R31 */
		/* 820E3250h case   12:*/		regs.R3 = regs.R31;
		/* 820E3250h case   12:*/		return 0x820E3254;
		  /* 820E3254h */ case   13:  		/* bl 86420 */
		/* 820E3254h case   13:*/		regs.LR = 0x820E3258; return 0x820F83E8;
		/* 820E3254h case   13:*/		return 0x820E3258;
		  /* 820E3258h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E3258h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3258h case   14:*/		return 0x820E325C;
		  /* 820E325Ch */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E325Ch case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E325Ch case   15:*/		return 0x820E3260;
		  /* 820E3260h */ case   16:  		/* mtspr LR, R12 */
		/* 820E3260h case   16:*/		regs.LR = regs.R12;
		/* 820E3260h case   16:*/		return 0x820E3264;
		  /* 820E3264h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3264h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3264h case   17:*/		return 0x820E3268;
		  /* 820E3268h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E3268h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3268h case   18:*/		return 0x820E326C;
	}
	return 0x820E326C;
} // Block from 820E3220h-820E326Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E326Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E326C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E326C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E326C);
		  /* 820E326Ch */ case    0:  		/* nop */
		/* 820E326Ch case    0:*/		cpu::op::nop();
		/* 820E326Ch case    0:*/		return 0x820E3270;
	}
	return 0x820E3270;
} // Block from 820E326Ch-820E3270h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3270);
		  /* 820E3270h */ case    0:  		/* mfspr R12, LR */
		/* 820E3270h case    0:*/		regs.R12 = regs.LR;
		/* 820E3270h case    0:*/		return 0x820E3274;
		  /* 820E3274h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3274h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3274h case    1:*/		return 0x820E3278;
		  /* 820E3278h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3278h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3278h case    2:*/		return 0x820E327C;
		  /* 820E327Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E327Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E327Ch case    3:*/		return 0x820E3280;
		  /* 820E3280h */ case    4:  		/* lis R11, -32254 */
		/* 820E3280h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3280h case    4:*/		return 0x820E3284;
		  /* 820E3284h */ case    5:  		/* li R7, 0 */
		/* 820E3284h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E3284h case    5:*/		return 0x820E3288;
	}
	return 0x820E3288;
} // Block from 820E3270h-820E3288h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E3288h
// Function '?EmitInstSimpleSW@C30SWProgram@D3DXShader@@IAAJP812@AAJPBD000@Z0HPBH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3288);
		  /* 820E3288h */ case    0:  		/* addi R5, R11, -26308 */
		/* 820E3288h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF993C);
		/* 820E3288h case    0:*/		return 0x820E328C;
		  /* 820E328Ch */ case    1:  		/* li R6, 0 */
		/* 820E328Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E328Ch case    1:*/		return 0x820E3290;
		  /* 820E3290h */ case    2:  		/* li R4, 0 */
		/* 820E3290h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3290h case    2:*/		return 0x820E3294;
		  /* 820E3294h */ case    3:  		/* mr R31, R3 */
		/* 820E3294h case    3:*/		regs.R31 = regs.R3;
		/* 820E3294h case    3:*/		return 0x820E3298;
		  /* 820E3298h */ case    4:  		/* bl -1968 */
		/* 820E3298h case    4:*/		regs.LR = 0x820E329C; return 0x820E2AE8;
		/* 820E3298h case    4:*/		return 0x820E329C;
		  /* 820E329Ch */ case    5:  		/* mr R3, R31 */
		/* 820E329Ch case    5:*/		regs.R3 = regs.R31;
		/* 820E329Ch case    5:*/		return 0x820E32A0;
		  /* 820E32A0h */ case    6:  		/* bl 86616 */
		/* 820E32A0h case    6:*/		regs.LR = 0x820E32A4; return 0x820F84F8;
		/* 820E32A0h case    6:*/		return 0x820E32A4;
		  /* 820E32A4h */ case    7:  		/* addi R1, R1, 96 */
		/* 820E32A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E32A4h case    7:*/		return 0x820E32A8;
		  /* 820E32A8h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E32A8h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E32A8h case    8:*/		return 0x820E32AC;
		  /* 820E32ACh */ case    9:  		/* mtspr LR, R12 */
		/* 820E32ACh case    9:*/		regs.LR = regs.R12;
		/* 820E32ACh case    9:*/		return 0x820E32B0;
		  /* 820E32B0h */ case   10:  		/* ld R31, <#[R1 - 16]> */
		/* 820E32B0h case   10:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E32B0h case   10:*/		return 0x820E32B4;
		  /* 820E32B4h */ case   11:  		/* bclr 20, CR0_LT */
		/* 820E32B4h case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E32B4h case   11:*/		return 0x820E32B8;
	}
	return 0x820E32B8;
} // Block from 820E3288h-820E32B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E32B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E32B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E32B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E32B8);
		  /* 820E32B8h */ case    0:  		/* mfspr R12, LR */
		/* 820E32B8h case    0:*/		regs.R12 = regs.LR;
		/* 820E32B8h case    0:*/		return 0x820E32BC;
		  /* 820E32BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E32BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E32BCh case    1:*/		return 0x820E32C0;
		  /* 820E32C0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E32C0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E32C0h case    2:*/		return 0x820E32C4;
		  /* 820E32C4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E32C4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E32C4h case    3:*/		return 0x820E32C8;
		  /* 820E32C8h */ case    4:  		/* lis R11, -32255 */
		/* 820E32C8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E32C8h case    4:*/		return 0x820E32CC;
		  /* 820E32CCh */ case    5:  		/* lis R10, -32242 */
		/* 820E32CCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E32CCh case    5:*/		return 0x820E32D0;
		  /* 820E32D0h */ case    6:  		/* addi R5, R11, -8220 */
		/* 820E32D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFE4);
		/* 820E32D0h case    6:*/		return 0x820E32D4;
		  /* 820E32D4h */ case    7:  		/* li R7, 0 */
		/* 820E32D4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E32D4h case    7:*/		return 0x820E32D8;
		  /* 820E32D8h */ case    8:  		/* li R6, 0 */
		/* 820E32D8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E32D8h case    8:*/		return 0x820E32DC;
		  /* 820E32DCh */ case    9:  		/* addi R4, R10, -25752 */
		/* 820E32DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9B68);
		/* 820E32DCh case    9:*/		return 0x820E32E0;
		  /* 820E32E0h */ case   10:  		/* mr R31, R3 */
		/* 820E32E0h case   10:*/		regs.R31 = regs.R3;
		/* 820E32E0h case   10:*/		return 0x820E32E4;
		  /* 820E32E4h */ case   11:  		/* bl -2044 */
		/* 820E32E4h case   11:*/		regs.LR = 0x820E32E8; return 0x820E2AE8;
		/* 820E32E4h case   11:*/		return 0x820E32E8;
		  /* 820E32E8h */ case   12:  		/* mr R3, R31 */
		/* 820E32E8h case   12:*/		regs.R3 = regs.R31;
		/* 820E32E8h case   12:*/		return 0x820E32EC;
		  /* 820E32ECh */ case   13:  		/* bl 90044 */
		/* 820E32ECh case   13:*/		regs.LR = 0x820E32F0; return 0x820F92A8;
		/* 820E32ECh case   13:*/		return 0x820E32F0;
		  /* 820E32F0h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E32F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E32F0h case   14:*/		return 0x820E32F4;
		  /* 820E32F4h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E32F4h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E32F4h case   15:*/		return 0x820E32F8;
		  /* 820E32F8h */ case   16:  		/* mtspr LR, R12 */
		/* 820E32F8h case   16:*/		regs.LR = regs.R12;
		/* 820E32F8h case   16:*/		return 0x820E32FC;
		  /* 820E32FCh */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E32FCh case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E32FCh case   17:*/		return 0x820E3300;
		  /* 820E3300h */ case   18:  		/* bclr 20, CR0_LT */
		/* 820E3300h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3300h case   18:*/		return 0x820E3304;
	}
	return 0x820E3304;
} // Block from 820E32B8h-820E3304h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E3304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3304);
		  /* 820E3304h */ case    0:  		/* nop */
		/* 820E3304h case    0:*/		cpu::op::nop();
		/* 820E3304h case    0:*/		return 0x820E3308;
	}
	return 0x820E3308;
} // Block from 820E3304h-820E3308h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3308);
		  /* 820E3308h */ case    0:  		/* mfspr R12, LR */
		/* 820E3308h case    0:*/		regs.R12 = regs.LR;
		/* 820E3308h case    0:*/		return 0x820E330C;
		  /* 820E330Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E330Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E330Ch case    1:*/		return 0x820E3310;
		  /* 820E3310h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3310h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3310h case    2:*/		return 0x820E3314;
		  /* 820E3314h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E3314h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E3314h case    3:*/		return 0x820E3318;
		  /* 820E3318h */ case    4:  		/* lis R11, -32254 */
		/* 820E3318h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3318h case    4:*/		return 0x820E331C;
		  /* 820E331Ch */ case    5:  		/* lis R10, -32254 */
		/* 820E331Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E331Ch case    5:*/		return 0x820E3320;
		  /* 820E3320h */ case    6:  		/* addi R5, R11, -26320 */
		/* 820E3320h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9930);
		/* 820E3320h case    6:*/		return 0x820E3324;
		  /* 820E3324h */ case    7:  		/* addi R4, R10, -26332 */
		/* 820E3324h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9924);
		/* 820E3324h case    7:*/		return 0x820E3328;
		  /* 820E3328h */ case    8:  		/* mr R31, R3 */
		/* 820E3328h case    8:*/		regs.R31 = regs.R3;
		/* 820E3328h case    8:*/		return 0x820E332C;
		  /* 820E332Ch */ case    9:  		/* bl -1812 */
		/* 820E332Ch case    9:*/		regs.LR = 0x820E3330; return 0x820E2C18;
		/* 820E332Ch case    9:*/		return 0x820E3330;
		  /* 820E3330h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E3330h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E3330h case   10:*/		return 0x820E3334;
		  /* 820E3334h */ case   11:  		/* bc 12, CR0_LT, 12 */
		/* 820E3334h case   11:*/		if ( regs.CR[0].lt ) { return 0x820E3340;  }
		/* 820E3334h case   11:*/		return 0x820E3338;
		  /* 820E3338h */ case   12:  		/* mr R3, R31 */
		/* 820E3338h case   12:*/		regs.R3 = regs.R31;
		/* 820E3338h case   12:*/		return 0x820E333C;
		  /* 820E333Ch */ case   13:  		/* bl 86972 */
		/* 820E333Ch case   13:*/		regs.LR = 0x820E3340; return 0x820F86F8;
		/* 820E333Ch case   13:*/		return 0x820E3340;
	}
	return 0x820E3340;
} // Block from 820E3308h-820E3340h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E3340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3340);
		  /* 820E3340h */ case    0:  		/* addi R1, R1, 96 */
		/* 820E3340h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3340h case    0:*/		return 0x820E3344;
		  /* 820E3344h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3344h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3344h case    1:*/		return 0x820E3348;
		  /* 820E3348h */ case    2:  		/* mtspr LR, R12 */
		/* 820E3348h case    2:*/		regs.LR = regs.R12;
		/* 820E3348h case    2:*/		return 0x820E334C;
		  /* 820E334Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820E334Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E334Ch case    3:*/		return 0x820E3350;
		  /* 820E3350h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820E3350h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3350h case    4:*/		return 0x820E3354;
	}
	return 0x820E3354;
} // Block from 820E3340h-820E3354h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E3354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3354);
		  /* 820E3354h */ case    0:  		/* nop */
		/* 820E3354h case    0:*/		cpu::op::nop();
		/* 820E3354h case    0:*/		return 0x820E3358;
	}
	return 0x820E3358;
} // Block from 820E3354h-820E3358h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3358);
		  /* 820E3358h */ case    0:  		/* mfspr R12, LR */
		/* 820E3358h case    0:*/		regs.R12 = regs.LR;
		/* 820E3358h case    0:*/		return 0x820E335C;
		  /* 820E335Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E335Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E335Ch case    1:*/		return 0x820E3360;
		  /* 820E3360h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3360h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3360h case    2:*/		return 0x820E3364;
		  /* 820E3364h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E3364h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E3364h case    3:*/		return 0x820E3368;
		  /* 820E3368h */ case    4:  		/* lis R11, -32254 */
		/* 820E3368h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3368h case    4:*/		return 0x820E336C;
		  /* 820E336Ch */ case    5:  		/* li R7, 0 */
		/* 820E336Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E336Ch case    5:*/		return 0x820E3370;
		  /* 820E3370h */ case    6:  		/* addi R5, R11, -26296 */
		/* 820E3370h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9948);
		/* 820E3370h case    6:*/		return 0x820E3374;
		  /* 820E3374h */ case    7:  		/* li R6, 0 */
		/* 820E3374h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3374h case    7:*/		return 0x820E3378;
		  /* 820E3378h */ case    8:  		/* li R4, 0 */
		/* 820E3378h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3378h case    8:*/		return 0x820E337C;
		  /* 820E337Ch */ case    9:  		/* mr R31, R3 */
		/* 820E337Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E337Ch case    9:*/		return 0x820E3380;
		  /* 820E3380h */ case   10:  		/* bl -2200 */
		/* 820E3380h case   10:*/		regs.LR = 0x820E3384; return 0x820E2AE8;
		/* 820E3380h case   10:*/		return 0x820E3384;
		  /* 820E3384h */ case   11:  		/* mr R3, R31 */
		/* 820E3384h case   11:*/		regs.R3 = regs.R31;
		/* 820E3384h case   11:*/		return 0x820E3388;
		  /* 820E3388h */ case   12:  		/* bl 85064 */
		/* 820E3388h case   12:*/		regs.LR = 0x820E338C; return 0x820F7FD0;
		/* 820E3388h case   12:*/		return 0x820E338C;
		  /* 820E338Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 820E338Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E338Ch case   13:*/		return 0x820E3390;
		  /* 820E3390h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3390h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3390h case   14:*/		return 0x820E3394;
		  /* 820E3394h */ case   15:  		/* mtspr LR, R12 */
		/* 820E3394h case   15:*/		regs.LR = regs.R12;
		/* 820E3394h case   15:*/		return 0x820E3398;
		  /* 820E3398h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3398h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3398h case   16:*/		return 0x820E339C;
		  /* 820E339Ch */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E339Ch case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E339Ch case   17:*/		return 0x820E33A0;
	}
	return 0x820E33A0;
} // Block from 820E3358h-820E33A0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E33A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E33A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E33A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E33A0);
		  /* 820E33A0h */ case    0:  		/* mfspr R12, LR */
		/* 820E33A0h case    0:*/		regs.R12 = regs.LR;
		/* 820E33A0h case    0:*/		return 0x820E33A4;
		  /* 820E33A4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E33A4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E33A4h case    1:*/		return 0x820E33A8;
		  /* 820E33A8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E33A8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E33A8h case    2:*/		return 0x820E33AC;
		  /* 820E33ACh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E33ACh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E33ACh case    3:*/		return 0x820E33B0;
		  /* 820E33B0h */ case    4:  		/* lis R11, -32254 */
		/* 820E33B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E33B0h case    4:*/		return 0x820E33B4;
		  /* 820E33B4h */ case    5:  		/* li R7, 0 */
		/* 820E33B4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E33B4h case    5:*/		return 0x820E33B8;
	}
	return 0x820E33B8;
} // Block from 820E33A0h-820E33B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E33B8h
// Function '?EmitMATSW@C30SWProgram@D3DXShader@@IAAJPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E33B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E33B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E33B8);
		  /* 820E33B8h */ case    0:  		/* addi R5, R11, -26280 */
		/* 820E33B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9958);
		/* 820E33B8h case    0:*/		return 0x820E33BC;
		  /* 820E33BCh */ case    1:  		/* li R6, 0 */
		/* 820E33BCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E33BCh case    1:*/		return 0x820E33C0;
		  /* 820E33C0h */ case    2:  		/* li R4, 0 */
		/* 820E33C0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E33C0h case    2:*/		return 0x820E33C4;
		  /* 820E33C4h */ case    3:  		/* mr R31, R3 */
		/* 820E33C4h case    3:*/		regs.R31 = regs.R3;
		/* 820E33C4h case    3:*/		return 0x820E33C8;
		  /* 820E33C8h */ case    4:  		/* bl -2272 */
		/* 820E33C8h case    4:*/		regs.LR = 0x820E33CC; return 0x820E2AE8;
		/* 820E33C8h case    4:*/		return 0x820E33CC;
		  /* 820E33CCh */ case    5:  		/* mr R3, R31 */
		/* 820E33CCh case    5:*/		regs.R3 = regs.R31;
		/* 820E33CCh case    5:*/		return 0x820E33D0;
		  /* 820E33D0h */ case    6:  		/* bl 89544 */
		/* 820E33D0h case    6:*/		regs.LR = 0x820E33D4; return 0x820F9198;
		/* 820E33D0h case    6:*/		return 0x820E33D4;
		  /* 820E33D4h */ case    7:  		/* addi R1, R1, 96 */
		/* 820E33D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E33D4h case    7:*/		return 0x820E33D8;
		  /* 820E33D8h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E33D8h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E33D8h case    8:*/		return 0x820E33DC;
		  /* 820E33DCh */ case    9:  		/* mtspr LR, R12 */
		/* 820E33DCh case    9:*/		regs.LR = regs.R12;
		/* 820E33DCh case    9:*/		return 0x820E33E0;
		  /* 820E33E0h */ case   10:  		/* ld R31, <#[R1 - 16]> */
		/* 820E33E0h case   10:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E33E0h case   10:*/		return 0x820E33E4;
		  /* 820E33E4h */ case   11:  		/* bclr 20, CR0_LT */
		/* 820E33E4h case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E33E4h case   11:*/		return 0x820E33E8;
	}
	return 0x820E33E8;
} // Block from 820E33B8h-820E33E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E33E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E33E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E33E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E33E8);
		  /* 820E33E8h */ case    0:  		/* mfspr R12, LR */
		/* 820E33E8h case    0:*/		regs.R12 = regs.LR;
		/* 820E33E8h case    0:*/		return 0x820E33EC;
		  /* 820E33ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E33ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E33ECh case    1:*/		return 0x820E33F0;
		  /* 820E33F0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E33F0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E33F0h case    2:*/		return 0x820E33F4;
		  /* 820E33F4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E33F4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E33F4h case    3:*/		return 0x820E33F8;
		  /* 820E33F8h */ case    4:  		/* lis R11, -32254 */
		/* 820E33F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E33F8h case    4:*/		return 0x820E33FC;
		  /* 820E33FCh */ case    5:  		/* li R7, 0 */
		/* 820E33FCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E33FCh case    5:*/		return 0x820E3400;
		  /* 820E3400h */ case    6:  		/* addi R5, R11, -26260 */
		/* 820E3400h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF996C);
		/* 820E3400h case    6:*/		return 0x820E3404;
		  /* 820E3404h */ case    7:  		/* li R6, 0 */
		/* 820E3404h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3404h case    7:*/		return 0x820E3408;
		  /* 820E3408h */ case    8:  		/* li R4, 0 */
		/* 820E3408h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3408h case    8:*/		return 0x820E340C;
		  /* 820E340Ch */ case    9:  		/* mr R31, R3 */
		/* 820E340Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E340Ch case    9:*/		return 0x820E3410;
		  /* 820E3410h */ case   10:  		/* bl -2344 */
		/* 820E3410h case   10:*/		regs.LR = 0x820E3414; return 0x820E2AE8;
		/* 820E3410h case   10:*/		return 0x820E3414;
		  /* 820E3414h */ case   11:  		/* mr R3, R31 */
		/* 820E3414h case   11:*/		regs.R3 = regs.R31;
		/* 820E3414h case   11:*/		return 0x820E3418;
		  /* 820E3418h */ case   12:  		/* bl 89528 */
		/* 820E3418h case   12:*/		regs.LR = 0x820E341C; return 0x820F91D0;
		/* 820E3418h case   12:*/		return 0x820E341C;
		  /* 820E341Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 820E341Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E341Ch case   13:*/		return 0x820E3420;
		  /* 820E3420h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3420h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3420h case   14:*/		return 0x820E3424;
		  /* 820E3424h */ case   15:  		/* mtspr LR, R12 */
		/* 820E3424h case   15:*/		regs.LR = regs.R12;
		/* 820E3424h case   15:*/		return 0x820E3428;
		  /* 820E3428h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3428h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3428h case   16:*/		return 0x820E342C;
		  /* 820E342Ch */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E342Ch case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E342Ch case   17:*/		return 0x820E3430;
	}
	return 0x820E3430;
} // Block from 820E33E8h-820E3430h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3430);
		  /* 820E3430h */ case    0:  		/* mfspr R12, LR */
		/* 820E3430h case    0:*/		regs.R12 = regs.LR;
		/* 820E3430h case    0:*/		return 0x820E3434;
		  /* 820E3434h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3434h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3434h case    1:*/		return 0x820E3438;
		  /* 820E3438h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3438h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3438h case    2:*/		return 0x820E343C;
		  /* 820E343Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E343Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E343Ch case    3:*/		return 0x820E3440;
		  /* 820E3440h */ case    4:  		/* lis R11, -32254 */
		/* 820E3440h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3440h case    4:*/		return 0x820E3444;
		  /* 820E3444h */ case    5:  		/* li R7, 0 */
		/* 820E3444h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E3444h case    5:*/		return 0x820E3448;
		  /* 820E3448h */ case    6:  		/* addi R5, R11, -26248 */
		/* 820E3448h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9978);
		/* 820E3448h case    6:*/		return 0x820E344C;
		  /* 820E344Ch */ case    7:  		/* li R6, 0 */
		/* 820E344Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E344Ch case    7:*/		return 0x820E3450;
		  /* 820E3450h */ case    8:  		/* li R4, 0 */
		/* 820E3450h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3450h case    8:*/		return 0x820E3454;
		  /* 820E3454h */ case    9:  		/* mr R31, R3 */
		/* 820E3454h case    9:*/		regs.R31 = regs.R3;
		/* 820E3454h case    9:*/		return 0x820E3458;
		  /* 820E3458h */ case   10:  		/* bl -2416 */
		/* 820E3458h case   10:*/		regs.LR = 0x820E345C; return 0x820E2AE8;
		/* 820E3458h case   10:*/		return 0x820E345C;
		  /* 820E345Ch */ case   11:  		/* mr R3, R31 */
		/* 820E345Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E345Ch case   11:*/		return 0x820E3460;
		  /* 820E3460h */ case   12:  		/* bl 89496 */
		/* 820E3460h case   12:*/		regs.LR = 0x820E3464; return 0x820F91F8;
		/* 820E3460h case   12:*/		return 0x820E3464;
		  /* 820E3464h */ case   13:  		/* addi R1, R1, 96 */
		/* 820E3464h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3464h case   13:*/		return 0x820E3468;
		  /* 820E3468h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3468h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3468h case   14:*/		return 0x820E346C;
		  /* 820E346Ch */ case   15:  		/* mtspr LR, R12 */
		/* 820E346Ch case   15:*/		regs.LR = regs.R12;
		/* 820E346Ch case   15:*/		return 0x820E3470;
		  /* 820E3470h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3470h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3470h case   16:*/		return 0x820E3474;
		  /* 820E3474h */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E3474h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3474h case   17:*/		return 0x820E3478;
	}
	return 0x820E3478;
} // Block from 820E3430h-820E3478h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3478);
		  /* 820E3478h */ case    0:  		/* mfspr R12, LR */
		/* 820E3478h case    0:*/		regs.R12 = regs.LR;
		/* 820E3478h case    0:*/		return 0x820E347C;
		  /* 820E347Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E347Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E347Ch case    1:*/		return 0x820E3480;
		  /* 820E3480h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3480h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3480h case    2:*/		return 0x820E3484;
		  /* 820E3484h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E3484h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E3484h case    3:*/		return 0x820E3488;
		  /* 820E3488h */ case    4:  		/* lis R11, -32254 */
		/* 820E3488h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3488h case    4:*/		return 0x820E348C;
		  /* 820E348Ch */ case    5:  		/* li R7, 0 */
		/* 820E348Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E348Ch case    5:*/		return 0x820E3490;
		  /* 820E3490h */ case    6:  		/* addi R5, R11, -26236 */
		/* 820E3490h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9984);
		/* 820E3490h case    6:*/		return 0x820E3494;
		  /* 820E3494h */ case    7:  		/* li R6, 0 */
		/* 820E3494h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3494h case    7:*/		return 0x820E3498;
		  /* 820E3498h */ case    8:  		/* li R4, 0 */
		/* 820E3498h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3498h case    8:*/		return 0x820E349C;
		  /* 820E349Ch */ case    9:  		/* mr R31, R3 */
		/* 820E349Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E349Ch case    9:*/		return 0x820E34A0;
		  /* 820E34A0h */ case   10:  		/* bl -2488 */
		/* 820E34A0h case   10:*/		regs.LR = 0x820E34A4; return 0x820E2AE8;
		/* 820E34A0h case   10:*/		return 0x820E34A4;
		  /* 820E34A4h */ case   11:  		/* mr R3, R31 */
		/* 820E34A4h case   11:*/		regs.R3 = regs.R31;
		/* 820E34A4h case   11:*/		return 0x820E34A8;
	}
	return 0x820E34A8;
} // Block from 820E3478h-820E34A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E34A8h
// Function '?EmitNEG@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E34A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E34A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E34A8);
		  /* 820E34A8h */ case    0:  		/* bl 85216 */
		/* 820E34A8h case    0:*/		regs.LR = 0x820E34AC; return 0x820F8188;
		/* 820E34A8h case    0:*/		return 0x820E34AC;
		  /* 820E34ACh */ case    1:  		/* addi R1, R1, 96 */
		/* 820E34ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E34ACh case    1:*/		return 0x820E34B0;
		  /* 820E34B0h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E34B0h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E34B0h case    2:*/		return 0x820E34B4;
		  /* 820E34B4h */ case    3:  		/* mtspr LR, R12 */
		/* 820E34B4h case    3:*/		regs.LR = regs.R12;
		/* 820E34B4h case    3:*/		return 0x820E34B8;
		  /* 820E34B8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820E34B8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E34B8h case    4:*/		return 0x820E34BC;
		  /* 820E34BCh */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E34BCh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E34BCh case    5:*/		return 0x820E34C0;
	}
	return 0x820E34C0;
} // Block from 820E34A8h-820E34C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E34C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E34C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E34C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E34C0);
		  /* 820E34C0h */ case    0:  		/* mfspr R12, LR */
		/* 820E34C0h case    0:*/		regs.R12 = regs.LR;
		/* 820E34C0h case    0:*/		return 0x820E34C4;
		  /* 820E34C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E34C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E34C4h case    1:*/		return 0x820E34C8;
		  /* 820E34C8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E34C8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E34C8h case    2:*/		return 0x820E34CC;
		  /* 820E34CCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E34CCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E34CCh case    3:*/		return 0x820E34D0;
		  /* 820E34D0h */ case    4:  		/* lis R11, -32254 */
		/* 820E34D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E34D0h case    4:*/		return 0x820E34D4;
		  /* 820E34D4h */ case    5:  		/* li R7, 0 */
		/* 820E34D4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E34D4h case    5:*/		return 0x820E34D8;
		  /* 820E34D8h */ case    6:  		/* addi R5, R11, -26224 */
		/* 820E34D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9990);
		/* 820E34D8h case    6:*/		return 0x820E34DC;
		  /* 820E34DCh */ case    7:  		/* li R6, 0 */
		/* 820E34DCh case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E34DCh case    7:*/		return 0x820E34E0;
		  /* 820E34E0h */ case    8:  		/* li R4, 0 */
		/* 820E34E0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E34E0h case    8:*/		return 0x820E34E4;
		  /* 820E34E4h */ case    9:  		/* mr R31, R3 */
		/* 820E34E4h case    9:*/		regs.R31 = regs.R3;
		/* 820E34E4h case    9:*/		return 0x820E34E8;
		  /* 820E34E8h */ case   10:  		/* bl -2560 */
		/* 820E34E8h case   10:*/		regs.LR = 0x820E34EC; return 0x820E2AE8;
		/* 820E34E8h case   10:*/		return 0x820E34EC;
		  /* 820E34ECh */ case   11:  		/* mr R3, R31 */
		/* 820E34ECh case   11:*/		regs.R3 = regs.R31;
		/* 820E34ECh case   11:*/		return 0x820E34F0;
		  /* 820E34F0h */ case   12:  		/* bl 89392 */
		/* 820E34F0h case   12:*/		regs.LR = 0x820E34F4; return 0x820F9220;
		/* 820E34F0h case   12:*/		return 0x820E34F4;
		  /* 820E34F4h */ case   13:  		/* addi R1, R1, 96 */
		/* 820E34F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E34F4h case   13:*/		return 0x820E34F8;
	}
	return 0x820E34F8;
} // Block from 820E34C0h-820E34F8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E34F8h
// Function '?EmitRCP@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E34F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E34F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E34F8);
		  /* 820E34F8h */ case    0:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E34F8h case    0:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E34F8h case    0:*/		return 0x820E34FC;
		  /* 820E34FCh */ case    1:  		/* mtspr LR, R12 */
		/* 820E34FCh case    1:*/		regs.LR = regs.R12;
		/* 820E34FCh case    1:*/		return 0x820E3500;
		  /* 820E3500h */ case    2:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3500h case    2:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3500h case    2:*/		return 0x820E3504;
		  /* 820E3504h */ case    3:  		/* bclr 20, CR0_LT */
		/* 820E3504h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3504h case    3:*/		return 0x820E3508;
	}
	return 0x820E3508;
} // Block from 820E34F8h-820E3508h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3508);
		  /* 820E3508h */ case    0:  		/* mfspr R12, LR */
		/* 820E3508h case    0:*/		regs.R12 = regs.LR;
		/* 820E3508h case    0:*/		return 0x820E350C;
		  /* 820E350Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E350Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E350Ch case    1:*/		return 0x820E3510;
		  /* 820E3510h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3510h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3510h case    2:*/		return 0x820E3514;
		  /* 820E3514h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E3514h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E3514h case    3:*/		return 0x820E3518;
		  /* 820E3518h */ case    4:  		/* lis R11, -32254 */
		/* 820E3518h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3518h case    4:*/		return 0x820E351C;
		  /* 820E351Ch */ case    5:  		/* li R7, 0 */
		/* 820E351Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E351Ch case    5:*/		return 0x820E3520;
		  /* 820E3520h */ case    6:  		/* addi R5, R11, -26200 */
		/* 820E3520h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF99A8);
		/* 820E3520h case    6:*/		return 0x820E3524;
		  /* 820E3524h */ case    7:  		/* li R6, 0 */
		/* 820E3524h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3524h case    7:*/		return 0x820E3528;
		  /* 820E3528h */ case    8:  		/* li R4, 0 */
		/* 820E3528h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3528h case    8:*/		return 0x820E352C;
		  /* 820E352Ch */ case    9:  		/* mr R31, R3 */
		/* 820E352Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E352Ch case    9:*/		return 0x820E3530;
		  /* 820E3530h */ case   10:  		/* bl -2632 */
		/* 820E3530h case   10:*/		regs.LR = 0x820E3534; return 0x820E2AE8;
		/* 820E3530h case   10:*/		return 0x820E3534;
		  /* 820E3534h */ case   11:  		/* mr R3, R31 */
		/* 820E3534h case   11:*/		regs.R3 = regs.R31;
		/* 820E3534h case   11:*/		return 0x820E3538;
		  /* 820E3538h */ case   12:  		/* bl 89360 */
		/* 820E3538h case   12:*/		regs.LR = 0x820E353C; return 0x820F9248;
		/* 820E3538h case   12:*/		return 0x820E353C;
		  /* 820E353Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 820E353Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E353Ch case   13:*/		return 0x820E3540;
		  /* 820E3540h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3540h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3540h case   14:*/		return 0x820E3544;
		  /* 820E3544h */ case   15:  		/* mtspr LR, R12 */
		/* 820E3544h case   15:*/		regs.LR = regs.R12;
		/* 820E3544h case   15:*/		return 0x820E3548;
	}
	return 0x820E3548;
} // Block from 820E3508h-820E3548h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E3548h
// Function '?EmitFRC@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3548);
		  /* 820E3548h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3548h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3548h case    0:*/		return 0x820E354C;
		  /* 820E354Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 820E354Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E354Ch case    1:*/		return 0x820E3550;
	}
	return 0x820E3550;
} // Block from 820E3548h-820E3550h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3550);
		  /* 820E3550h */ case    0:  		/* mfspr R12, LR */
		/* 820E3550h case    0:*/		regs.R12 = regs.LR;
		/* 820E3550h case    0:*/		return 0x820E3554;
		  /* 820E3554h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3554h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3554h case    1:*/		return 0x820E3558;
		  /* 820E3558h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3558h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3558h case    2:*/		return 0x820E355C;
		  /* 820E355Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E355Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E355Ch case    3:*/		return 0x820E3560;
		  /* 820E3560h */ case    4:  		/* lis R11, -32254 */
		/* 820E3560h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3560h case    4:*/		return 0x820E3564;
		  /* 820E3564h */ case    5:  		/* li R7, 0 */
		/* 820E3564h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E3564h case    5:*/		return 0x820E3568;
		  /* 820E3568h */ case    6:  		/* addi R5, R11, -26180 */
		/* 820E3568h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF99BC);
		/* 820E3568h case    6:*/		return 0x820E356C;
		  /* 820E356Ch */ case    7:  		/* li R6, 0 */
		/* 820E356Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E356Ch case    7:*/		return 0x820E3570;
		  /* 820E3570h */ case    8:  		/* li R4, 0 */
		/* 820E3570h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3570h case    8:*/		return 0x820E3574;
		  /* 820E3574h */ case    9:  		/* mr R31, R3 */
		/* 820E3574h case    9:*/		regs.R31 = regs.R3;
		/* 820E3574h case    9:*/		return 0x820E3578;
		  /* 820E3578h */ case   10:  		/* bl -2704 */
		/* 820E3578h case   10:*/		regs.LR = 0x820E357C; return 0x820E2AE8;
		/* 820E3578h case   10:*/		return 0x820E357C;
		  /* 820E357Ch */ case   11:  		/* mr R3, R31 */
		/* 820E357Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E357Ch case   11:*/		return 0x820E3580;
		  /* 820E3580h */ case   12:  		/* bl 89304 */
		/* 820E3580h case   12:*/		regs.LR = 0x820E3584; return 0x820F9258;
		/* 820E3580h case   12:*/		return 0x820E3584;
		  /* 820E3584h */ case   13:  		/* addi R1, R1, 96 */
		/* 820E3584h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3584h case   13:*/		return 0x820E3588;
		  /* 820E3588h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3588h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3588h case   14:*/		return 0x820E358C;
		  /* 820E358Ch */ case   15:  		/* mtspr LR, R12 */
		/* 820E358Ch case   15:*/		regs.LR = regs.R12;
		/* 820E358Ch case   15:*/		return 0x820E3590;
		  /* 820E3590h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3590h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3590h case   16:*/		return 0x820E3594;
		  /* 820E3594h */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E3594h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3594h case   17:*/		return 0x820E3598;
	}
	return 0x820E3598;
} // Block from 820E3550h-820E3598h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3598h
// Function '?EmitEXP@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3598);
		  /* 820E3598h */ case    0:  		/* mfspr R12, LR */
		/* 820E3598h case    0:*/		regs.R12 = regs.LR;
		/* 820E3598h case    0:*/		return 0x820E359C;
		  /* 820E359Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E359Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E359Ch case    1:*/		return 0x820E35A0;
		  /* 820E35A0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E35A0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E35A0h case    2:*/		return 0x820E35A4;
		  /* 820E35A4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E35A4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E35A4h case    3:*/		return 0x820E35A8;
		  /* 820E35A8h */ case    4:  		/* lis R11, -32255 */
		/* 820E35A8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E35A8h case    4:*/		return 0x820E35AC;
		  /* 820E35ACh */ case    5:  		/* lis R10, -32242 */
		/* 820E35ACh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E35ACh case    5:*/		return 0x820E35B0;
		  /* 820E35B0h */ case    6:  		/* addi R5, R11, -8212 */
		/* 820E35B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFEC);
		/* 820E35B0h case    6:*/		return 0x820E35B4;
		  /* 820E35B4h */ case    7:  		/* li R7, 0 */
		/* 820E35B4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E35B4h case    7:*/		return 0x820E35B8;
		  /* 820E35B8h */ case    8:  		/* li R6, 0 */
		/* 820E35B8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E35B8h case    8:*/		return 0x820E35BC;
		  /* 820E35BCh */ case    9:  		/* addi R4, R10, -25640 */
		/* 820E35BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9BD8);
		/* 820E35BCh case    9:*/		return 0x820E35C0;
		  /* 820E35C0h */ case   10:  		/* mr R31, R3 */
		/* 820E35C0h case   10:*/		regs.R31 = regs.R3;
		/* 820E35C0h case   10:*/		return 0x820E35C4;
		  /* 820E35C4h */ case   11:  		/* bl -2780 */
		/* 820E35C4h case   11:*/		regs.LR = 0x820E35C8; return 0x820E2AE8;
		/* 820E35C4h case   11:*/		return 0x820E35C8;
		  /* 820E35C8h */ case   12:  		/* mr R3, R31 */
		/* 820E35C8h case   12:*/		regs.R3 = regs.R31;
		/* 820E35C8h case   12:*/		return 0x820E35CC;
		  /* 820E35CCh */ case   13:  		/* bl 89260 */
		/* 820E35CCh case   13:*/		regs.LR = 0x820E35D0; return 0x820F9278;
		/* 820E35CCh case   13:*/		return 0x820E35D0;
		  /* 820E35D0h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E35D0h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E35D0h case   14:*/		return 0x820E35D4;
		  /* 820E35D4h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E35D4h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E35D4h case   15:*/		return 0x820E35D8;
		  /* 820E35D8h */ case   16:  		/* mtspr LR, R12 */
		/* 820E35D8h case   16:*/		regs.LR = regs.R12;
		/* 820E35D8h case   16:*/		return 0x820E35DC;
		  /* 820E35DCh */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E35DCh case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E35DCh case   17:*/		return 0x820E35E0;
	}
	return 0x820E35E0;
} // Block from 820E3598h-820E35E0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E35E0h
// Function '?EmitLOG@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E35E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E35E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E35E0);
		  /* 820E35E0h */ case    0:  		/* bclr 20, CR0_LT */
		/* 820E35E0h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E35E0h case    0:*/		return 0x820E35E4;
	}
	return 0x820E35E4;
} // Block from 820E35E0h-820E35E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E35E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E35E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E35E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E35E4);
		  /* 820E35E4h */ case    0:  		/* nop */
		/* 820E35E4h case    0:*/		cpu::op::nop();
		/* 820E35E4h case    0:*/		return 0x820E35E8;
	}
	return 0x820E35E8;
} // Block from 820E35E4h-820E35E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E35E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E35E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E35E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E35E8);
		  /* 820E35E8h */ case    0:  		/* mfspr R12, LR */
		/* 820E35E8h case    0:*/		regs.R12 = regs.LR;
		/* 820E35E8h case    0:*/		return 0x820E35EC;
		  /* 820E35ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E35ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E35ECh case    1:*/		return 0x820E35F0;
		  /* 820E35F0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820E35F0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E35F0h case    2:*/		return 0x820E35F4;
		  /* 820E35F4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820E35F4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E35F4h case    3:*/		return 0x820E35F8;
		  /* 820E35F8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820E35F8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820E35F8h case    4:*/		return 0x820E35FC;
		  /* 820E35FCh */ case    5:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E35FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E35FCh case    5:*/		return 0x820E3600;
		  /* 820E3600h */ case    6:  		/* lis R10, 8 */
		/* 820E3600h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 820E3600h case    6:*/		return 0x820E3604;
		  /* 820E3604h */ case    7:  		/* lwz R9, <#[R3 + 20]> */
		/* 820E3604h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820E3604h case    7:*/		return 0x820E3608;
		  /* 820E3608h */ case    8:  		/* mr R30, R3 */
		/* 820E3608h case    8:*/		regs.R30 = regs.R3;
		/* 820E3608h case    8:*/		return 0x820E360C;
		  /* 820E360Ch */ case    9:  		/* li R7, 0 */
		/* 820E360Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E360Ch case    9:*/		return 0x820E3610;
		  /* 820E3610h */ case   10:  		/* li R6, 0 */
		/* 820E3610h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3610h case   10:*/		return 0x820E3614;
		  /* 820E3614h */ case   11:  		/* li R4, 0 */
		/* 820E3614h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3614h case   11:*/		return 0x820E3618;
		  /* 820E3618h */ case   12:  		/* lwz R8, <#[R11]> */
		/* 820E3618h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3618h case   12:*/		return 0x820E361C;
		  /* 820E361Ch */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E361Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E361Ch case   13:*/		return 0x820E3620;
		  /* 820E3620h */ case   14:  		/* rlwinm R8, R8, 2, 10, 29 */
		/* 820E3620h case   14:*/		cpu::op::rlwinm<0,2,10,29>(regs,&regs.R8,regs.R8);
		/* 820E3620h case   14:*/		return 0x820E3624;
		  /* 820E3624h */ case   15:  		/* lwzx R11, <#[R8 + R11]> */
		/* 820E3624h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E3624h case   15:*/		return 0x820E3628;
	}
	return 0x820E3628;
} // Block from 820E35E8h-820E3628h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E3628h
// Function '?EmitPOW@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3628);
		  /* 820E3628h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3628h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3628h case    0:*/		return 0x820E362C;
		  /* 820E362Ch */ case    1:  		/* lwzx R31, <#[R11 + R9]> */
		/* 820E362Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E362Ch case    1:*/		return 0x820E3630;
		  /* 820E3630h */ case    2:  		/* lwz R11, <#[R31 + 60]> */
		/* 820E3630h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E3630h case    2:*/		return 0x820E3634;
		  /* 820E3634h */ case    3:  		/* rlwinm R9, R11, 0, 11, 15 */
		/* 820E3634h case    3:*/		cpu::op::rlwinm<0,0,11,15>(regs,&regs.R9,regs.R11);
		/* 820E3634h case    3:*/		return 0x820E3638;
		  /* 820E3638h */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 820E3638h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E3638h case    4:*/		return 0x820E363C;
		  /* 820E363Ch */ case    5:  		/* bc 4, CR6_EQ, 40 */
		/* 820E363Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E3664;  }
		/* 820E363Ch case    5:*/		return 0x820E3640;
		  /* 820E3640h */ case    6:  		/* rlwinm R11, R11, 0, 13, 11 */
		/* 820E3640h case    6:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R11,regs.R11);
		/* 820E3640h case    6:*/		return 0x820E3644;
		  /* 820E3644h */ case    7:  		/* lis R10, -32254 */
		/* 820E3644h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E3644h case    7:*/		return 0x820E3648;
		  /* 820E3648h */ case    8:  		/* stw R11, <#[R31 + 60]> */
		/* 820E3648h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E3648h case    8:*/		return 0x820E364C;
		  /* 820E364Ch */ case    9:  		/* addi R5, R10, -26148 */
		/* 820E364Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF99DC);
		/* 820E364Ch case    9:*/		return 0x820E3650;
		  /* 820E3650h */ case   10:  		/* bl -2920 */
		/* 820E3650h case   10:*/		regs.LR = 0x820E3654; return 0x820E2AE8;
		/* 820E3650h case   10:*/		return 0x820E3654;
		  /* 820E3654h */ case   11:  		/* lwz R11, <#[R31 + 60]> */
		/* 820E3654h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E3654h case   11:*/		return 0x820E3658;
		  /* 820E3658h */ case   12:  		/* oris R11, R11, 8 */
		/* 820E3658h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820E3658h case   12:*/		return 0x820E365C;
		  /* 820E365Ch */ case   13:  		/* stw R11, <#[R31 + 60]> */
		/* 820E365Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E365Ch case   13:*/		return 0x820E3660;
		  /* 820E3660h */ case   14:  		/* b 16 */
		/* 820E3660h case   14:*/		return 0x820E3670;
		/* 820E3660h case   14:*/		return 0x820E3664;
	}
	return 0x820E3664;
} // Block from 820E3628h-820E3664h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E3664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3664);
		  /* 820E3664h */ case    0:  		/* lis R11, -32254 */
		/* 820E3664h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3664h case    0:*/		return 0x820E3668;
		  /* 820E3668h */ case    1:  		/* addi R5, R11, -26160 */
		/* 820E3668h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF99D0);
		/* 820E3668h case    1:*/		return 0x820E366C;
		  /* 820E366Ch */ case    2:  		/* bl -2948 */
		/* 820E366Ch case    2:*/		regs.LR = 0x820E3670; return 0x820E2AE8;
		/* 820E366Ch case    2:*/		return 0x820E3670;
	}
	return 0x820E3670;
} // Block from 820E3664h-820E3670h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3670h
// Function '?EmitRSQ@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3670);
		  /* 820E3670h */ case    0:  		/* mr R3, R30 */
		/* 820E3670h case    0:*/		regs.R3 = regs.R30;
		/* 820E3670h case    0:*/		return 0x820E3674;
		  /* 820E3674h */ case    1:  		/* bl 89108 */
		/* 820E3674h case    1:*/		regs.LR = 0x820E3678; return 0x820F9288;
		/* 820E3674h case    1:*/		return 0x820E3678;
		  /* 820E3678h */ case    2:  		/* addi R1, R1, 112 */
		/* 820E3678h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820E3678h case    2:*/		return 0x820E367C;
		  /* 820E367Ch */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E367Ch case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E367Ch case    3:*/		return 0x820E3680;
		  /* 820E3680h */ case    4:  		/* mtspr LR, R12 */
		/* 820E3680h case    4:*/		regs.LR = regs.R12;
		/* 820E3680h case    4:*/		return 0x820E3684;
		  /* 820E3684h */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 820E3684h case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E3684h case    5:*/		return 0x820E3688;
		  /* 820E3688h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3688h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3688h case    6:*/		return 0x820E368C;
		  /* 820E368Ch */ case    7:  		/* bclr 20, CR0_LT */
		/* 820E368Ch case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E368Ch case    7:*/		return 0x820E3690;
	}
	return 0x820E3690;
} // Block from 820E3670h-820E3690h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E3690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3690);
		  /* 820E3690h */ case    0:  		/* mfspr R12, LR */
		/* 820E3690h case    0:*/		regs.R12 = regs.LR;
		/* 820E3690h case    0:*/		return 0x820E3694;
		  /* 820E3694h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3694h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3694h case    1:*/		return 0x820E3698;
		  /* 820E3698h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3698h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3698h case    2:*/		return 0x820E369C;
		  /* 820E369Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E369Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E369Ch case    3:*/		return 0x820E36A0;
		  /* 820E36A0h */ case    4:  		/* lis R11, -32254 */
		/* 820E36A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E36A0h case    4:*/		return 0x820E36A4;
		  /* 820E36A4h */ case    5:  		/* li R7, 0 */
		/* 820E36A4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E36A4h case    5:*/		return 0x820E36A8;
		  /* 820E36A8h */ case    6:  		/* addi R5, R11, -26128 */
		/* 820E36A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF99F0);
		/* 820E36A8h case    6:*/		return 0x820E36AC;
		  /* 820E36ACh */ case    7:  		/* li R6, 0 */
		/* 820E36ACh case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E36ACh case    7:*/		return 0x820E36B0;
		  /* 820E36B0h */ case    8:  		/* li R4, 0 */
		/* 820E36B0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E36B0h case    8:*/		return 0x820E36B4;
		  /* 820E36B4h */ case    9:  		/* mr R31, R3 */
		/* 820E36B4h case    9:*/		regs.R31 = regs.R3;
		/* 820E36B4h case    9:*/		return 0x820E36B8;
		  /* 820E36B8h */ case   10:  		/* bl -3024 */
		/* 820E36B8h case   10:*/		regs.LR = 0x820E36BC; return 0x820E2AE8;
		/* 820E36B8h case   10:*/		return 0x820E36BC;
		  /* 820E36BCh */ case   11:  		/* mr R3, R31 */
		/* 820E36BCh case   11:*/		regs.R3 = regs.R31;
		/* 820E36BCh case   11:*/		return 0x820E36C0;
	}
	return 0x820E36C0;
} // Block from 820E3690h-820E36C0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E36C0h
// Function '?EmitMIN@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E36C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E36C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E36C0);
		  /* 820E36C0h */ case    0:  		/* bl 89048 */
		/* 820E36C0h case    0:*/		regs.LR = 0x820E36C4; return 0x820F9298;
		/* 820E36C0h case    0:*/		return 0x820E36C4;
		  /* 820E36C4h */ case    1:  		/* addi R1, R1, 96 */
		/* 820E36C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E36C4h case    1:*/		return 0x820E36C8;
		  /* 820E36C8h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E36C8h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E36C8h case    2:*/		return 0x820E36CC;
		  /* 820E36CCh */ case    3:  		/* mtspr LR, R12 */
		/* 820E36CCh case    3:*/		regs.LR = regs.R12;
		/* 820E36CCh case    3:*/		return 0x820E36D0;
		  /* 820E36D0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820E36D0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E36D0h case    4:*/		return 0x820E36D4;
		  /* 820E36D4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E36D4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E36D4h case    5:*/		return 0x820E36D8;
	}
	return 0x820E36D8;
} // Block from 820E36C0h-820E36D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E36D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E36D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E36D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E36D8);
		  /* 820E36D8h */ case    0:  		/* mfspr R12, LR */
		/* 820E36D8h case    0:*/		regs.R12 = regs.LR;
		/* 820E36D8h case    0:*/		return 0x820E36DC;
		  /* 820E36DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E36DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E36DCh case    1:*/		return 0x820E36E0;
		  /* 820E36E0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E36E0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E36E0h case    2:*/		return 0x820E36E4;
		  /* 820E36E4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E36E4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E36E4h case    3:*/		return 0x820E36E8;
		  /* 820E36E8h */ case    4:  		/* lis R11, -32254 */
		/* 820E36E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E36E8h case    4:*/		return 0x820E36EC;
		  /* 820E36ECh */ case    5:  		/* li R7, 0 */
		/* 820E36ECh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E36ECh case    5:*/		return 0x820E36F0;
		  /* 820E36F0h */ case    6:  		/* addi R5, R11, -26108 */
		/* 820E36F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9A04);
		/* 820E36F0h case    6:*/		return 0x820E36F4;
		  /* 820E36F4h */ case    7:  		/* li R6, 0 */
		/* 820E36F4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E36F4h case    7:*/		return 0x820E36F8;
		  /* 820E36F8h */ case    8:  		/* li R4, 0 */
		/* 820E36F8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E36F8h case    8:*/		return 0x820E36FC;
		  /* 820E36FCh */ case    9:  		/* mr R31, R3 */
		/* 820E36FCh case    9:*/		regs.R31 = regs.R3;
		/* 820E36FCh case    9:*/		return 0x820E3700;
		  /* 820E3700h */ case   10:  		/* bl -3096 */
		/* 820E3700h case   10:*/		regs.LR = 0x820E3704; return 0x820E2AE8;
		/* 820E3700h case   10:*/		return 0x820E3704;
		  /* 820E3704h */ case   11:  		/* mr R3, R31 */
		/* 820E3704h case   11:*/		regs.R3 = regs.R31;
		/* 820E3704h case   11:*/		return 0x820E3708;
	}
	return 0x820E3708;
} // Block from 820E36D8h-820E3708h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E3708h
// Function '?EmitMAX@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3708);
		  /* 820E3708h */ case    0:  		/* bl 89008 */
		/* 820E3708h case    0:*/		regs.LR = 0x820E370C; return 0x820F92B8;
		/* 820E3708h case    0:*/		return 0x820E370C;
		  /* 820E370Ch */ case    1:  		/* addi R1, R1, 96 */
		/* 820E370Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E370Ch case    1:*/		return 0x820E3710;
		  /* 820E3710h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3710h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3710h case    2:*/		return 0x820E3714;
		  /* 820E3714h */ case    3:  		/* mtspr LR, R12 */
		/* 820E3714h case    3:*/		regs.LR = regs.R12;
		/* 820E3714h case    3:*/		return 0x820E3718;
		  /* 820E3718h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3718h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3718h case    4:*/		return 0x820E371C;
		  /* 820E371Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E371Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E371Ch case    5:*/		return 0x820E3720;
	}
	return 0x820E3720;
} // Block from 820E3708h-820E3720h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E3720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3720);
		  /* 820E3720h */ case    0:  		/* mfspr R12, LR */
		/* 820E3720h case    0:*/		regs.R12 = regs.LR;
		/* 820E3720h case    0:*/		return 0x820E3724;
		  /* 820E3724h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3724h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3724h case    1:*/		return 0x820E3728;
		  /* 820E3728h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3728h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3728h case    2:*/		return 0x820E372C;
		  /* 820E372Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E372Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E372Ch case    3:*/		return 0x820E3730;
		  /* 820E3730h */ case    4:  		/* lis R11, -32254 */
		/* 820E3730h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3730h case    4:*/		return 0x820E3734;
		  /* 820E3734h */ case    5:  		/* li R7, 0 */
		/* 820E3734h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E3734h case    5:*/		return 0x820E3738;
		  /* 820E3738h */ case    6:  		/* addi R5, R11, -26092 */
		/* 820E3738h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9A14);
		/* 820E3738h case    6:*/		return 0x820E373C;
		  /* 820E373Ch */ case    7:  		/* li R6, 0 */
		/* 820E373Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E373Ch case    7:*/		return 0x820E3740;
		  /* 820E3740h */ case    8:  		/* li R4, 0 */
		/* 820E3740h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3740h case    8:*/		return 0x820E3744;
		  /* 820E3744h */ case    9:  		/* mr R31, R3 */
		/* 820E3744h case    9:*/		regs.R31 = regs.R3;
		/* 820E3744h case    9:*/		return 0x820E3748;
		  /* 820E3748h */ case   10:  		/* bl -3168 */
		/* 820E3748h case   10:*/		regs.LR = 0x820E374C; return 0x820E2AE8;
		/* 820E3748h case   10:*/		return 0x820E374C;
		  /* 820E374Ch */ case   11:  		/* mr R3, R31 */
		/* 820E374Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E374Ch case   11:*/		return 0x820E3750;
	}
	return 0x820E3750;
} // Block from 820E3720h-820E3750h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E3750h
// Function '?EmitADD@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3750);
		  /* 820E3750h */ case    0:  		/* bl 88936 */
		/* 820E3750h case    0:*/		regs.LR = 0x820E3754; return 0x820F92B8;
		/* 820E3750h case    0:*/		return 0x820E3754;
		  /* 820E3754h */ case    1:  		/* addi R1, R1, 96 */
		/* 820E3754h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3754h case    1:*/		return 0x820E3758;
		  /* 820E3758h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3758h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3758h case    2:*/		return 0x820E375C;
		  /* 820E375Ch */ case    3:  		/* mtspr LR, R12 */
		/* 820E375Ch case    3:*/		regs.LR = regs.R12;
		/* 820E375Ch case    3:*/		return 0x820E3760;
		  /* 820E3760h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3760h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3760h case    4:*/		return 0x820E3764;
		  /* 820E3764h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E3764h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3764h case    5:*/		return 0x820E3768;
	}
	return 0x820E3768;
} // Block from 820E3750h-820E3768h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E3768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3768);
		  /* 820E3768h */ case    0:  		/* mfspr R12, LR */
		/* 820E3768h case    0:*/		regs.R12 = regs.LR;
		/* 820E3768h case    0:*/		return 0x820E376C;
		  /* 820E376Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E376Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E376Ch case    1:*/		return 0x820E3770;
		  /* 820E3770h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3770h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3770h case    2:*/		return 0x820E3774;
		  /* 820E3774h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E3774h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E3774h case    3:*/		return 0x820E3778;
		  /* 820E3778h */ case    4:  		/* lis R11, -32254 */
		/* 820E3778h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3778h case    4:*/		return 0x820E377C;
		  /* 820E377Ch */ case    5:  		/* li R7, 0 */
		/* 820E377Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E377Ch case    5:*/		return 0x820E3780;
		  /* 820E3780h */ case    6:  		/* addi R5, R11, -26076 */
		/* 820E3780h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9A24);
		/* 820E3780h case    6:*/		return 0x820E3784;
		  /* 820E3784h */ case    7:  		/* li R6, 0 */
		/* 820E3784h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3784h case    7:*/		return 0x820E3788;
		  /* 820E3788h */ case    8:  		/* li R4, 0 */
		/* 820E3788h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3788h case    8:*/		return 0x820E378C;
		  /* 820E378Ch */ case    9:  		/* mr R31, R3 */
		/* 820E378Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E378Ch case    9:*/		return 0x820E3790;
		  /* 820E3790h */ case   10:  		/* bl -3240 */
		/* 820E3790h case   10:*/		regs.LR = 0x820E3794; return 0x820E2AE8;
		/* 820E3790h case   10:*/		return 0x820E3794;
		  /* 820E3794h */ case   11:  		/* mr R3, R31 */
		/* 820E3794h case   11:*/		regs.R3 = regs.R31;
		/* 820E3794h case   11:*/		return 0x820E3798;
		  /* 820E3798h */ case   12:  		/* bl 89216 */
		/* 820E3798h case   12:*/		regs.LR = 0x820E379C; return 0x820F9418;
		/* 820E3798h case   12:*/		return 0x820E379C;
		  /* 820E379Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 820E379Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E379Ch case   13:*/		return 0x820E37A0;
		  /* 820E37A0h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E37A0h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E37A0h case   14:*/		return 0x820E37A4;
		  /* 820E37A4h */ case   15:  		/* mtspr LR, R12 */
		/* 820E37A4h case   15:*/		regs.LR = regs.R12;
		/* 820E37A4h case   15:*/		return 0x820E37A8;
		  /* 820E37A8h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 820E37A8h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E37A8h case   16:*/		return 0x820E37AC;
		  /* 820E37ACh */ case   17:  		/* bclr 20, CR0_LT */
		/* 820E37ACh case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E37ACh case   17:*/		return 0x820E37B0;
	}
	return 0x820E37B0;
} // Block from 820E3768h-820E37B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E37B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E37B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E37B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E37B0);
		  /* 820E37B0h */ case    0:  		/* mfspr R12, LR */
		/* 820E37B0h case    0:*/		regs.R12 = regs.LR;
		/* 820E37B0h case    0:*/		return 0x820E37B4;
		  /* 820E37B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E37B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E37B4h case    1:*/		return 0x820E37B8;
		  /* 820E37B8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E37B8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E37B8h case    2:*/		return 0x820E37BC;
		  /* 820E37BCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E37BCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E37BCh case    3:*/		return 0x820E37C0;
		  /* 820E37C0h */ case    4:  		/* lis R11, -32255 */
		/* 820E37C0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E37C0h case    4:*/		return 0x820E37C4;
		  /* 820E37C4h */ case    5:  		/* lis R10, -32242 */
		/* 820E37C4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF820E);
		/* 820E37C4h case    5:*/		return 0x820E37C8;
		  /* 820E37C8h */ case    6:  		/* addi R5, R11, -8224 */
		/* 820E37C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDFE0);
		/* 820E37C8h case    6:*/		return 0x820E37CC;
		  /* 820E37CCh */ case    7:  		/* li R7, 0 */
		/* 820E37CCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E37CCh case    7:*/		return 0x820E37D0;
		  /* 820E37D0h */ case    8:  		/* li R6, 0 */
		/* 820E37D0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E37D0h case    8:*/		return 0x820E37D4;
		  /* 820E37D4h */ case    9:  		/* addi R4, R10, -25656 */
		/* 820E37D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9BC8);
		/* 820E37D4h case    9:*/		return 0x820E37D8;
		  /* 820E37D8h */ case   10:  		/* mr R31, R3 */
		/* 820E37D8h case   10:*/		regs.R31 = regs.R3;
		/* 820E37D8h case   10:*/		return 0x820E37DC;
		  /* 820E37DCh */ case   11:  		/* bl -3316 */
		/* 820E37DCh case   11:*/		regs.LR = 0x820E37E0; return 0x820E2AE8;
		/* 820E37DCh case   11:*/		return 0x820E37E0;
		  /* 820E37E0h */ case   12:  		/* mr R3, R31 */
		/* 820E37E0h case   12:*/		regs.R3 = regs.R31;
		/* 820E37E0h case   12:*/		return 0x820E37E4;
		  /* 820E37E4h */ case   13:  		/* bl 84540 */
		/* 820E37E4h case   13:*/		regs.LR = 0x820E37E8; return 0x820F8220;
		/* 820E37E4h case   13:*/		return 0x820E37E8;
		  /* 820E37E8h */ case   14:  		/* addi R1, R1, 96 */
		/* 820E37E8h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E37E8h case   14:*/		return 0x820E37EC;
		  /* 820E37ECh */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E37ECh case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E37ECh case   15:*/		return 0x820E37F0;
		  /* 820E37F0h */ case   16:  		/* mtspr LR, R12 */
		/* 820E37F0h case   16:*/		regs.LR = regs.R12;
		/* 820E37F0h case   16:*/		return 0x820E37F4;
		  /* 820E37F4h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 820E37F4h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E37F4h case   17:*/		return 0x820E37F8;
	}
	return 0x820E37F8;
} // Block from 820E37B0h-820E37F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E37F8h
// Function '?EmitMUL@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E37F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E37F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E37F8);
		  /* 820E37F8h */ case    0:  		/* bclr 20, CR0_LT */
		/* 820E37F8h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E37F8h case    0:*/		return 0x820E37FC;
	}
	return 0x820E37FC;
} // Block from 820E37F8h-820E37FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E37FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E37FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E37FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E37FC);
		  /* 820E37FCh */ case    0:  		/* nop */
		/* 820E37FCh case    0:*/		cpu::op::nop();
		/* 820E37FCh case    0:*/		return 0x820E3800;
	}
	return 0x820E3800;
} // Block from 820E37FCh-820E3800h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3800);
		  /* 820E3800h */ case    0:  		/* mfspr R12, LR */
		/* 820E3800h case    0:*/		regs.R12 = regs.LR;
		/* 820E3800h case    0:*/		return 0x820E3804;
		  /* 820E3804h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E3804h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3804h case    1:*/		return 0x820E3808;
		  /* 820E3808h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3808h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3808h case    2:*/		return 0x820E380C;
		  /* 820E380Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E380Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E380Ch case    3:*/		return 0x820E3810;
		  /* 820E3810h */ case    4:  		/* lis R11, -32254 */
		/* 820E3810h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3810h case    4:*/		return 0x820E3814;
		  /* 820E3814h */ case    5:  		/* li R7, 0 */
		/* 820E3814h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E3814h case    5:*/		return 0x820E3818;
		  /* 820E3818h */ case    6:  		/* addi R5, R11, -26064 */
		/* 820E3818h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9A30);
		/* 820E3818h case    6:*/		return 0x820E381C;
		  /* 820E381Ch */ case    7:  		/* li R6, 0 */
		/* 820E381Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E381Ch case    7:*/		return 0x820E3820;
		  /* 820E3820h */ case    8:  		/* li R4, 0 */
		/* 820E3820h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3820h case    8:*/		return 0x820E3824;
		  /* 820E3824h */ case    9:  		/* mr R31, R3 */
		/* 820E3824h case    9:*/		regs.R31 = regs.R3;
		/* 820E3824h case    9:*/		return 0x820E3828;
		  /* 820E3828h */ case   10:  		/* bl -3392 */
		/* 820E3828h case   10:*/		regs.LR = 0x820E382C; return 0x820E2AE8;
		/* 820E3828h case   10:*/		return 0x820E382C;
		  /* 820E382Ch */ case   11:  		/* mr R3, R31 */
		/* 820E382Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E382Ch case   11:*/		return 0x820E3830;
		  /* 820E3830h */ case   12:  		/* bl 84920 */
		/* 820E3830h case   12:*/		regs.LR = 0x820E3834; return 0x820F83E8;
		/* 820E3830h case   12:*/		return 0x820E3834;
		  /* 820E3834h */ case   13:  		/* addi R1, R1, 96 */
		/* 820E3834h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E3834h case   13:*/		return 0x820E3838;
		  /* 820E3838h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3838h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3838h case   14:*/		return 0x820E383C;
		  /* 820E383Ch */ case   15:  		/* mtspr LR, R12 */
		/* 820E383Ch case   15:*/		regs.LR = regs.R12;
		/* 820E383Ch case   15:*/		return 0x820E3840;
	}
	return 0x820E3840;
} // Block from 820E3800h-820E3840h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E3840h
// Function '?EmitDOT3@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3840);
		  /* 820E3840h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3840h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3840h case    0:*/		return 0x820E3844;
		  /* 820E3844h */ case    1:  		/* bclr 20, CR0_LT */
		/* 820E3844h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3844h case    1:*/		return 0x820E3848;
	}
	return 0x820E3848;
} // Block from 820E3840h-820E3848h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3848);
		  /* 820E3848h */ case    0:  		/* mfspr R12, LR */
		/* 820E3848h case    0:*/		regs.R12 = regs.LR;
		/* 820E3848h case    0:*/		return 0x820E384C;
		  /* 820E384Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E384Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E384Ch case    1:*/		return 0x820E3850;
		  /* 820E3850h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820E3850h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3850h case    2:*/		return 0x820E3854;
		  /* 820E3854h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E3854h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E3854h case    3:*/		return 0x820E3858;
		  /* 820E3858h */ case    4:  		/* lis R11, -32254 */
		/* 820E3858h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3858h case    4:*/		return 0x820E385C;
		  /* 820E385Ch */ case    5:  		/* li R7, 0 */
		/* 820E385Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E385Ch case    5:*/		return 0x820E3860;
		  /* 820E3860h */ case    6:  		/* addi R5, R11, -26044 */
		/* 820E3860h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9A44);
		/* 820E3860h case    6:*/		return 0x820E3864;
		  /* 820E3864h */ case    7:  		/* li R6, 0 */
		/* 820E3864h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E3864h case    7:*/		return 0x820E3868;
		  /* 820E3868h */ case    8:  		/* li R4, 0 */
		/* 820E3868h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3868h case    8:*/		return 0x820E386C;
		  /* 820E386Ch */ case    9:  		/* mr R31, R3 */
		/* 820E386Ch case    9:*/		regs.R31 = regs.R3;
		/* 820E386Ch case    9:*/		return 0x820E3870;
		  /* 820E3870h */ case   10:  		/* bl -3464 */
		/* 820E3870h case   10:*/		regs.LR = 0x820E3874; return 0x820E2AE8;
		/* 820E3870h case   10:*/		return 0x820E3874;
		  /* 820E3874h */ case   11:  		/* mr R3, R31 */
		/* 820E3874h case   11:*/		regs.R3 = regs.R31;
		/* 820E3874h case   11:*/		return 0x820E3878;
		  /* 820E3878h */ case   12:  		/* bl 85120 */
		/* 820E3878h case   12:*/		regs.LR = 0x820E387C; return 0x820F84F8;
		/* 820E3878h case   12:*/		return 0x820E387C;
		  /* 820E387Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 820E387Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E387Ch case   13:*/		return 0x820E3880;
		  /* 820E3880h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E3880h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E3880h case   14:*/		return 0x820E3884;
		  /* 820E3884h */ case   15:  		/* mtspr LR, R12 */
		/* 820E3884h case   15:*/		regs.LR = regs.R12;
		/* 820E3884h case   15:*/		return 0x820E3888;
	}
	return 0x820E3888;
} // Block from 820E3848h-820E3888h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E3888h
// Function '?EmitDOT4@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3888);
		  /* 820E3888h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 820E3888h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E3888h case    0:*/		return 0x820E388C;
		  /* 820E388Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 820E388Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E388Ch case    1:*/		return 0x820E3890;
	}
	return 0x820E3890;
} // Block from 820E3888h-820E3890h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3890);
		  /* 820E3890h */ case    0:  		/* lwz R11, <#[R5 + 16]> */
		/* 820E3890h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 820E3890h case    0:*/		return 0x820E3894;
		  /* 820E3894h */ case    1:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E3894h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E3894h case    1:*/		return 0x820E3898;
		  /* 820E3898h */ case    2:  		/* rlwinm R9, R4, 2, 0, 29 */
		/* 820E3898h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R4);
		/* 820E3898h case    2:*/		return 0x820E389C;
		  /* 820E389Ch */ case    3:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E389Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E389Ch case    3:*/		return 0x820E38A0;
		  /* 820E38A0h */ case    4:  		/* lwzx R9, <#[R9 + R11]> */
		/* 820E38A0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E38A0h case    4:*/		return 0x820E38A4;
		  /* 820E38A4h */ case    5:  		/* lwz R11, <#[R10 + 8]> */
		/* 820E38A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E38A4h case    5:*/		return 0x820E38A8;
		  /* 820E38A8h */ case    6:  		/* lwz R10, <#[R9 + 8]> */
		/* 820E38A8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 820E38A8h case    6:*/		return 0x820E38AC;
		  /* 820E38ACh */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820E38ACh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E38ACh case    7:*/		return 0x820E38B0;
		  /* 820E38B0h */ case    8:  		/* bc 4, CR6_LT, 12 */
		/* 820E38B0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x820E38BC;  }
		/* 820E38B0h case    8:*/		return 0x820E38B4;
		  /* 820E38B4h */ case    9:  		/* li R3, 1 */
		/* 820E38B4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E38B4h case    9:*/		return 0x820E38B8;
		  /* 820E38B8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820E38B8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E38B8h case   10:*/		return 0x820E38BC;
	}
	return 0x820E38BC;
} // Block from 820E3890h-820E38BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E38BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E38BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E38BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E38BC);
		  /* 820E38BCh */ case    0:  		/* bc 4, CR6_GT, 12 */
		/* 820E38BCh case    0:*/		if ( !regs.CR[6].gt ) { return 0x820E38C8;  }
		/* 820E38BCh case    0:*/		return 0x820E38C0;
		  /* 820E38C0h */ case    1:  		/* li R3, -1 */
		/* 820E38C0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 820E38C0h case    1:*/		return 0x820E38C4;
		  /* 820E38C4h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820E38C4h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E38C4h case    2:*/		return 0x820E38C8;
	}
	return 0x820E38C8;
} // Block from 820E38BCh-820E38C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E38C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E38C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E38C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E38C8);
		  /* 820E38C8h */ case    0:  		/* cmplw CR6, R3, R4 */
		/* 820E38C8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R4);
		/* 820E38C8h case    0:*/		return 0x820E38CC;
		  /* 820E38CCh */ case    1:  		/* bc 12, CR6_GT, -24 */
		/* 820E38CCh case    1:*/		if ( regs.CR[6].gt ) { return 0x820E38B4;  }
		/* 820E38CCh case    1:*/		return 0x820E38D0;
	}
	return 0x820E38D0;
} // Block from 820E38C8h-820E38D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E38D0h
// Function '?EmitLIT@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E38D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E38D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E38D0);
		  /* 820E38D0h */ case    0:  		/* subfc R11, R4, R3 */
		/* 820E38D0h case    0:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R4,regs.R3);
		/* 820E38D0h case    0:*/		return 0x820E38D4;
		  /* 820E38D4h */ case    1:  		/* subfe R3, R11, R11 */
		/* 820E38D4h case    1:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R11,regs.R11);
		/* 820E38D4h case    1:*/		return 0x820E38D8;
		  /* 820E38D8h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820E38D8h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E38D8h case    2:*/		return 0x820E38DC;
	}
	return 0x820E38DC;
} // Block from 820E38D0h-820E38DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E38DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E38DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E38DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E38DC);
		  /* 820E38DCh */ case    0:  		/* nop */
		/* 820E38DCh case    0:*/		cpu::op::nop();
		/* 820E38DCh case    0:*/		return 0x820E38E0;
		  /* 820E38E0h */ case    1:  		/* lwz R9, <#[R5 + 20]> */
		/* 820E38E0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000014) );
		/* 820E38E0h case    1:*/		return 0x820E38E4;
		  /* 820E38E4h */ case    2:  		/* rlwinm R8, R3, 2, 0, 29 */
		/* 820E38E4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R3);
		/* 820E38E4h case    2:*/		return 0x820E38E8;
		  /* 820E38E8h */ case    3:  		/* rlwinm R7, R4, 2, 0, 29 */
		/* 820E38E8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R4);
		/* 820E38E8h case    3:*/		return 0x820E38EC;
		  /* 820E38ECh */ case    4:  		/* lis R11, -32256 */
		/* 820E38ECh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E38ECh case    4:*/		return 0x820E38F0;
		  /* 820E38F0h */ case    5:  		/* addi R10, R11, 4485 */
		/* 820E38F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1185);
		/* 820E38F0h case    5:*/		return 0x820E38F4;
		  /* 820E38F4h */ case    6:  		/* lwzx R6, <#[R8 + R9]> */
		/* 820E38F4h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E38F4h case    6:*/		return 0x820E38F8;
		  /* 820E38F8h */ case    7:  		/* lwzx R5, <#[R7 + R9]> */
		/* 820E38F8h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 820E38F8h case    7:*/		return 0x820E38FC;
		  /* 820E38FCh */ case    8:  		/* lwz R8, <#[R6 + 96]> */
		/* 820E38FCh case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000060) );
		/* 820E38FCh case    8:*/		return 0x820E3900;
		  /* 820E3900h */ case    9:  		/* lwz R7, <#[R5 + 96]> */
		/* 820E3900h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x00000060) );
		/* 820E3900h case    9:*/		return 0x820E3904;
		  /* 820E3904h */ case   10:  		/* lwz R11, <#[R8 + 36]> */
		/* 820E3904h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000024) );
		/* 820E3904h case   10:*/		return 0x820E3908;
		  /* 820E3908h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 820E3908h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E3908h case   11:*/		return 0x820E390C;
		  /* 820E390Ch */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 820E390Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E3914;  }
		/* 820E390Ch case   12:*/		return 0x820E3910;
		  /* 820E3910h */ case   13:  		/* mr R11, R10 */
		/* 820E3910h case   13:*/		regs.R11 = regs.R10;
		/* 820E3910h case   13:*/		return 0x820E3914;
	}
	return 0x820E3914;
} // Block from 820E38DCh-820E3914h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E3914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3914);
		  /* 820E3914h */ case    0:  		/* lwz R9, <#[R7 + 36]> */
		/* 820E3914h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000024) );
		/* 820E3914h case    0:*/		return 0x820E3918;
		  /* 820E3918h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 820E3918h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820E3918h case    1:*/		return 0x820E391C;
		  /* 820E391Ch */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 820E391Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820E3924;  }
		/* 820E391Ch case    2:*/		return 0x820E3920;
	}
	return 0x820E3920;
} // Block from 820E3914h-820E3920h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3920h
// Function '?EmitABS@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3920);
		  /* 820E3920h */ case    0:  		/* mr R10, R9 */
		/* 820E3920h case    0:*/		regs.R10 = regs.R9;
		/* 820E3920h case    0:*/		return 0x820E3924;
	}
	return 0x820E3924;
} // Block from 820E3920h-820E3924h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3924);
		  /* 820E3924h */ case    0:  		/* lbz R9, <#[R11]> */
		/* 820E3924h case    0:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3924h case    0:*/		return 0x820E3928;
		  /* 820E3928h */ case    1:  		/* lbz R4, <#[R10]> */
		/* 820E3928h case    1:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 820E3928h case    1:*/		return 0x820E392C;
		  /* 820E392Ch */ case    2:  		/* cmpwi CR0, R9, 0 */
		/* 820E392Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 820E392Ch case    2:*/		return 0x820E3930;
		  /* 820E3930h */ case    3:  		/* subf R9, R4, R9 */
		/* 820E3930h case    3:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 820E3930h case    3:*/		return 0x820E3934;
		  /* 820E3934h */ case    4:  		/* bc 12, CR0_EQ, 20 */
		/* 820E3934h case    4:*/		if ( regs.CR[0].eq ) { return 0x820E3948;  }
		/* 820E3934h case    4:*/		return 0x820E3938;
		  /* 820E3938h */ case    5:  		/* addi R11, R11, 1 */
		/* 820E3938h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E3938h case    5:*/		return 0x820E393C;
		  /* 820E393Ch */ case    6:  		/* addi R10, R10, 1 */
		/* 820E393Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E393Ch case    6:*/		return 0x820E3940;
		  /* 820E3940h */ case    7:  		/* cmpwi CR6, R9, 0 */
		/* 820E3940h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E3940h case    7:*/		return 0x820E3944;
		  /* 820E3944h */ case    8:  		/* bc 12, CR6_EQ, -32 */
		/* 820E3944h case    8:*/		if ( regs.CR[6].eq ) { return 0x820E3924;  }
		/* 820E3944h case    8:*/		return 0x820E3948;
	}
	return 0x820E3948;
} // Block from 820E3924h-820E3948h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E3948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3948);
		  /* 820E3948h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 820E3948h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 820E3948h case    0:*/		return 0x820E394C;
		  /* 820E394Ch */ case    1:  		/* bc 4, CR0_GT, 12 */
		/* 820E394Ch case    1:*/		if ( !regs.CR[0].gt ) { return 0x820E3958;  }
		/* 820E394Ch case    1:*/		return 0x820E3950;
		  /* 820E3950h */ case    2:  		/* li R3, 1 */
		/* 820E3950h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E3950h case    2:*/		return 0x820E3954;
		  /* 820E3954h */ case    3:  		/* bclr 20, CR0_LT */
		/* 820E3954h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3954h case    3:*/		return 0x820E3958;
	}
	return 0x820E3958;
} // Block from 820E3948h-820E3958h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3958);
		  /* 820E3958h */ case    0:  		/* cmpwi CR6, R9, 0 */
		/* 820E3958h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E3958h case    0:*/		return 0x820E395C;
		  /* 820E395Ch */ case    1:  		/* bc 4, CR6_LT, 12 */
		/* 820E395Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x820E3968;  }
		/* 820E395Ch case    1:*/		return 0x820E3960;
		  /* 820E3960h */ case    2:  		/* li R3, -1 */
		/* 820E3960h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 820E3960h case    2:*/		return 0x820E3964;
		  /* 820E3964h */ case    3:  		/* bclr 20, CR0_LT */
		/* 820E3964h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3964h case    3:*/		return 0x820E3968;
	}
	return 0x820E3968;
} // Block from 820E3958h-820E3968h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3968);
		  /* 820E3968h */ case    0:  		/* lwz R11, <#[R7 + 20]> */
		/* 820E3968h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000014) );
		/* 820E3968h case    0:*/		return 0x820E396C;
		  /* 820E396Ch */ case    1:  		/* lwz R9, <#[R8 + 20]> */
		/* 820E396Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000014) );
		/* 820E396Ch case    1:*/		return 0x820E3970;
	}
	return 0x820E3970;
} // Block from 820E3968h-820E3970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3970h
// Function '?EmitNRM@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3970);
		  /* 820E3970h */ case    0:  		/* lwz R10, <#[R11 + 24]> */
		/* 820E3970h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 820E3970h case    0:*/		return 0x820E3974;
		  /* 820E3974h */ case    1:  		/* lwz R11, <#[R9 + 24]> */
		/* 820E3974h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 820E3974h case    1:*/		return 0x820E3978;
		  /* 820E3978h */ case    2:  		/* lbz R9, <#[R11]> */
		/* 820E3978h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3978h case    2:*/		return 0x820E397C;
		  /* 820E397Ch */ case    3:  		/* lbz R4, <#[R10]> */
		/* 820E397Ch case    3:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 820E397Ch case    3:*/		return 0x820E3980;
		  /* 820E3980h */ case    4:  		/* cmpwi CR0, R9, 0 */
		/* 820E3980h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 820E3980h case    4:*/		return 0x820E3984;
		  /* 820E3984h */ case    5:  		/* subf R9, R4, R9 */
		/* 820E3984h case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 820E3984h case    5:*/		return 0x820E3988;
		  /* 820E3988h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 820E3988h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E399C;  }
		/* 820E3988h case    6:*/		return 0x820E398C;
		  /* 820E398Ch */ case    7:  		/* addi R11, R11, 1 */
		/* 820E398Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E398Ch case    7:*/		return 0x820E3990;
		  /* 820E3990h */ case    8:  		/* addi R10, R10, 1 */
		/* 820E3990h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E3990h case    8:*/		return 0x820E3994;
		  /* 820E3994h */ case    9:  		/* cmpwi CR6, R9, 0 */
		/* 820E3994h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E3994h case    9:*/		return 0x820E3998;
		  /* 820E3998h */ case   10:  		/* bc 12, CR6_EQ, -32 */
		/* 820E3998h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E3978;  }
		/* 820E3998h case   10:*/		return 0x820E399C;
	}
	return 0x820E399C;
} // Block from 820E3970h-820E399Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E399Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E399C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E399C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E399C);
		  /* 820E399Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 820E399Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 820E399Ch case    0:*/		return 0x820E39A0;
		  /* 820E39A0h */ case    1:  		/* bc 12, CR0_GT, -80 */
		/* 820E39A0h case    1:*/		if ( regs.CR[0].gt ) { return 0x820E3950;  }
		/* 820E39A0h case    1:*/		return 0x820E39A4;
		  /* 820E39A4h */ case    2:  		/* cmpwi CR6, R9, 0 */
		/* 820E39A4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E39A4h case    2:*/		return 0x820E39A8;
		  /* 820E39A8h */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 820E39A8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E3960;  }
		/* 820E39A8h case    3:*/		return 0x820E39AC;
		  /* 820E39ACh */ case    4:  		/* cmplw CR6, R8, R7 */
		/* 820E39ACh case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820E39ACh case    4:*/		return 0x820E39B0;
		  /* 820E39B0h */ case    5:  		/* bc 12, CR6_GT, -96 */
		/* 820E39B0h case    5:*/		if ( regs.CR[6].gt ) { return 0x820E3950;  }
		/* 820E39B0h case    5:*/		return 0x820E39B4;
		  /* 820E39B4h */ case    6:  		/* bc 12, CR6_LT, -84 */
		/* 820E39B4h case    6:*/		if ( regs.CR[6].lt ) { return 0x820E3960;  }
		/* 820E39B4h case    6:*/		return 0x820E39B8;
		  /* 820E39B8h */ case    7:  		/* lwz R11, <#[R6 + 116]> */
		/* 820E39B8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000074) );
		/* 820E39B8h case    7:*/		return 0x820E39BC;
		  /* 820E39BCh */ case    8:  		/* lwz R10, <#[R5 + 116]> */
		/* 820E39BCh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000074) );
		/* 820E39BCh case    8:*/		return 0x820E39C0;
	}
	return 0x820E39C0;
} // Block from 820E399Ch-820E39C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E39C0h
// Function '?EmitMAD@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E39C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E39C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E39C0);
		  /* 820E39C0h */ case    0:  		/* cmplw CR6, R11, R10 */
		/* 820E39C0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E39C0h case    0:*/		return 0x820E39C4;
		  /* 820E39C4h */ case    1:  		/* bc 12, CR6_LT, -100 */
		/* 820E39C4h case    1:*/		if ( regs.CR[6].lt ) { return 0x820E3960;  }
		/* 820E39C4h case    1:*/		return 0x820E39C8;
		  /* 820E39C8h */ case    2:  		/* bc 12, CR6_GT, -120 */
		/* 820E39C8h case    2:*/		if ( regs.CR[6].gt ) { return 0x820E3950;  }
		/* 820E39C8h case    2:*/		return 0x820E39CC;
		  /* 820E39CCh */ case    3:  		/* lwz R11, <#[R6 + 16]> */
		/* 820E39CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000010) );
		/* 820E39CCh case    3:*/		return 0x820E39D0;
		  /* 820E39D0h */ case    4:  		/* lwz R10, <#[R5 + 16]> */
		/* 820E39D0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000010) );
		/* 820E39D0h case    4:*/		return 0x820E39D4;
		  /* 820E39D4h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 820E39D4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E39D4h case    5:*/		return 0x820E39D8;
		  /* 820E39D8h */ case    6:  		/* bc 12, CR6_LT, -120 */
		/* 820E39D8h case    6:*/		if ( regs.CR[6].lt ) { return 0x820E3960;  }
		/* 820E39D8h case    6:*/		return 0x820E39DC;
		  /* 820E39DCh */ case    7:  		/* subfc R11, R11, R10 */
		/* 820E39DCh case    7:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820E39DCh case    7:*/		return 0x820E39E0;
		  /* 820E39E0h */ case    8:  		/* subfe R11, R11, R11 */
		/* 820E39E0h case    8:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820E39E0h case    8:*/		return 0x820E39E4;
		  /* 820E39E4h */ case    9:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 820E39E4h case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 820E39E4h case    9:*/		return 0x820E39E8;
		  /* 820E39E8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820E39E8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E39E8h case   10:*/		return 0x820E39EC;
	}
	return 0x820E39EC;
} // Block from 820E39C0h-820E39ECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E39ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E39EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E39EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E39EC);
		  /* 820E39ECh */ case    0:  		/* nop */
		/* 820E39ECh case    0:*/		cpu::op::nop();
		/* 820E39ECh case    0:*/		return 0x820E39F0;
	}
	return 0x820E39F0;
} // Block from 820E39ECh-820E39F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E39F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E39F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E39F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E39F0);
		  /* 820E39F0h */ case    0:  		/* lwz R11, <#[R3 + 240]> */
		/* 820E39F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000F0) );
		/* 820E39F0h case    0:*/		return 0x820E39F4;
		  /* 820E39F4h */ case    1:  		/* lwz R10, <#[R3 + 232]> */
		/* 820E39F4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000000E8) );
		/* 820E39F4h case    1:*/		return 0x820E39F8;
		  /* 820E39F8h */ case    2:  		/* slw R11, R5, R11 */
		/* 820E39F8h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 820E39F8h case    2:*/		return 0x820E39FC;
		  /* 820E39FCh */ case    3:  		/* and R10, R10, R4 */
		/* 820E39FCh case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 820E39FCh case    3:*/		return 0x820E3A00;
		  /* 820E3A00h */ case    4:  		/* or R3, R11, R10 */
		/* 820E3A00h case    4:*/		cpu::op::or<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 820E3A00h case    4:*/		return 0x820E3A04;
		  /* 820E3A04h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E3A04h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3A04h case    5:*/		return 0x820E3A08;
	}
	return 0x820E3A08;
} // Block from 820E39F0h-820E3A08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E3A08h
// Function '?EmitNEG@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3A08);
		  /* 820E3A08h */ case    0:  		/* lwz R11, <#[R3 + 232]> */
		/* 820E3A08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000E8) );
		/* 820E3A08h case    0:*/		return 0x820E3A0C;
		  /* 820E3A0Ch */ case    1:  		/* and R3, R11, R4 */
		/* 820E3A0Ch case    1:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R4);
		/* 820E3A0Ch case    1:*/		return 0x820E3A10;
		  /* 820E3A10h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820E3A10h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3A10h case    2:*/		return 0x820E3A14;
	}
	return 0x820E3A14;
} // Block from 820E3A08h-820E3A14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3A14);
		  /* 820E3A14h */ case    0:  		/* nop */
		/* 820E3A14h case    0:*/		cpu::op::nop();
		/* 820E3A14h case    0:*/		return 0x820E3A18;
	}
	return 0x820E3A18;
} // Block from 820E3A14h-820E3A18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3A18);
		  /* 820E3A18h */ case    0:  		/* lwz R11, <#[R3 + 236]> */
		/* 820E3A18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000EC) );
		/* 820E3A18h case    0:*/		return 0x820E3A1C;
		  /* 820E3A1Ch */ case    1:  		/* lwz R10, <#[R3 + 240]> */
		/* 820E3A1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000000F0) );
		/* 820E3A1Ch case    1:*/		return 0x820E3A20;
		  /* 820E3A20h */ case    2:  		/* and R11, R11, R4 */
		/* 820E3A20h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 820E3A20h case    2:*/		return 0x820E3A24;
		  /* 820E3A24h */ case    3:  		/* srw R3, R11, R10 */
		/* 820E3A24h case    3:*/		cpu::op::srw<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 820E3A24h case    3:*/		return 0x820E3A28;
		  /* 820E3A28h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820E3A28h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E3A28h case    4:*/		return 0x820E3A2C;
	}
	return 0x820E3A2C;
} // Block from 820E3A18h-820E3A2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E3A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3A2C);
		  /* 820E3A2Ch */ case    0:  		/* nop */
		/* 820E3A2Ch case    0:*/		cpu::op::nop();
		/* 820E3A2Ch case    0:*/		return 0x820E3A30;
	}
	return 0x820E3A30;
} // Block from 820E3A2Ch-820E3A30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3A30);
		  /* 820E3A30h */ case    0:  		/* mfspr R12, LR */
		/* 820E3A30h case    0:*/		regs.R12 = regs.LR;
		/* 820E3A30h case    0:*/		return 0x820E3A34;
		  /* 820E3A34h */ case    1:  		/* bl -337920 */
		/* 820E3A34h case    1:*/		regs.LR = 0x820E3A38; return 0x82091234;
		/* 820E3A34h case    1:*/		return 0x820E3A38;
		  /* 820E3A38h */ case    2:  		/* addi R31, R1, -144 */
		/* 820E3A38h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF70);
		/* 820E3A38h case    2:*/		return 0x820E3A3C;
		  /* 820E3A3Ch */ case    3:  		/* lwz R24, <#[R4]> */
		/* 820E3A3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R4 + 0x00000000) );
		/* 820E3A3Ch case    3:*/		return 0x820E3A40;
		  /* 820E3A40h */ case    4:  		/* li R22, 0 */
		/* 820E3A40h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 820E3A40h case    4:*/		return 0x820E3A44;
		  /* 820E3A44h */ case    5:  		/* rlwinm R11, R24, 0, 0, 11 */
		/* 820E3A44h case    5:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R24);
		/* 820E3A44h case    5:*/		return 0x820E3A48;
		  /* 820E3A48h */ case    6:  		/* lis R30, 20480 */
		/* 820E3A48h case    6:*/		cpu::op::lis<0>(regs,&regs.R30,0x5000);
		/* 820E3A48h case    6:*/		return 0x820E3A4C;
		  /* 820E3A4Ch */ case    7:  		/* std R22, <#[R31]> */
		/* 820E3A4Ch case    7:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R31 + 0x00000000) );
		/* 820E3A4Ch case    7:*/		return 0x820E3A50;
	}
	return 0x820E3A50;
} // Block from 820E3A30h-820E3A50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E3A50h
// Function '?EmitRCP@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3A50);
		  /* 820E3A50h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 820E3A50h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820E3A50h case    0:*/		return 0x820E3A54;
		  /* 820E3A54h */ case    1:  		/* std R22, <#[R31 + 8]> */
		/* 820E3A54h case    1:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R31 + 0x00000008) );
		/* 820E3A54h case    1:*/		return 0x820E3A58;
		  /* 820E3A58h */ case    2:  		/* bc 12, CR6_EQ, 384 */
		/* 820E3A58h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E3BD8;  }
		/* 820E3A58h case    2:*/		return 0x820E3A5C;
		  /* 820E3A5Ch */ case    3:  		/* lis R31, 28800 */
		/* 820E3A5Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R31,0x7080);
		/* 820E3A5Ch case    3:*/		return 0x820E3A60;
		  /* 820E3A60h */ case    4:  		/* cmplw CR6, R11, R31 */
		/* 820E3A60h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 820E3A60h case    4:*/		return 0x820E3A64;
		  /* 820E3A64h */ case    5:  		/* bc 12, CR6_EQ, 372 */
		/* 820E3A64h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E3BD8;  }
		/* 820E3A64h case    5:*/		return 0x820E3A68;
		  /* 820E3A68h */ case    6:  		/* mr R21, R22 */
		/* 820E3A68h case    6:*/		regs.R21 = regs.R22;
		/* 820E3A68h case    6:*/		return 0x820E3A6C;
		  /* 820E3A6Ch */ case    7:  		/* cmplwi CR6, R6, 0 */
		/* 820E3A6Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820E3A6Ch case    7:*/		return 0x820E3A70;
		  /* 820E3A70h */ case    8:  		/* bc 12, CR6_EQ, 240 */
		/* 820E3A70h case    8:*/		if ( regs.CR[6].eq ) { return 0x820E3B60;  }
		/* 820E3A70h case    8:*/		return 0x820E3A74;
		  /* 820E3A74h */ case    9:  		/* lwz R25, <#[R3 + 20]> */
		/* 820E3A74h case    9:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x00000014) );
		/* 820E3A74h case    9:*/		return 0x820E3A78;
		  /* 820E3A78h */ case   10:  		/* mr R27, R7 */
		/* 820E3A78h case   10:*/		regs.R27 = regs.R7;
		/* 820E3A78h case   10:*/		return 0x820E3A7C;
		  /* 820E3A7Ch */ case   11:  		/* subf R23, R7, R5 */
		/* 820E3A7Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R23,regs.R7,regs.R5);
		/* 820E3A7Ch case   11:*/		return 0x820E3A80;
		  /* 820E3A80h */ case   12:  		/* lwzx R11, <#[R23 + R27]> */
		/* 820E3A80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + regs.R27 + 0x00000000) );
		/* 820E3A80h case   12:*/		return 0x820E3A84;
		  /* 820E3A84h */ case   13:  		/* mr R26, R22 */
		/* 820E3A84h case   13:*/		regs.R26 = regs.R22;
		/* 820E3A84h case   13:*/		return 0x820E3A88;
		  /* 820E3A88h */ case   14:  		/* cmpwi CR6, R10, 0 */
		/* 820E3A88h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820E3A88h case   14:*/		return 0x820E3A8C;
		  /* 820E3A8Ch */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3A8Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3A8Ch case   15:*/		return 0x820E3A90;
		  /* 820E3A90h */ case   16:  		/* lwzx R28, <#[R11 + R25]> */
		/* 820E3A90h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 820E3A90h case   16:*/		return 0x820E3A94;
		  /* 820E3A94h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 820E3A94h case   17:*/		if ( regs.CR[6].eq ) { return 0x820E3AA8;  }
		/* 820E3A94h case   17:*/		return 0x820E3A98;
	}
	return 0x820E3A98;
} // Block from 820E3A50h-820E3A98h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3A98h
// Function '?EmitEXP@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3A98);
		  /* 820E3A98h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 820E3A98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 820E3A98h case    0:*/		return 0x820E3A9C;
		  /* 820E3A9Ch */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 820E3A9Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820E3A9Ch case    1:*/		return 0x820E3AA0;
		  /* 820E3AA0h */ case    2:  		/* bc 4, CR6_LT, 176 */
		/* 820E3AA0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820E3B50;  }
		/* 820E3AA0h case    2:*/		return 0x820E3AA4;
		  /* 820E3AA4h */ case    3:  		/* b 8 */
		/* 820E3AA4h case    3:*/		return 0x820E3AAC;
		/* 820E3AA4h case    3:*/		return 0x820E3AA8;
	}
	return 0x820E3AA8;
} // Block from 820E3A98h-820E3AA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3AA8);
		  /* 820E3AA8h */ case    0:  		/* mr R11, R21 */
		/* 820E3AA8h case    0:*/		regs.R11 = regs.R21;
		/* 820E3AA8h case    0:*/		return 0x820E3AAC;
	}
	return 0x820E3AAC;
} // Block from 820E3AA8h-820E3AACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3AAC);
		  /* 820E3AACh */ case    0:  		/* lwz R29, <#[R4 + 12]> */
		/* 820E3AACh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R4 + 0x0000000C) );
		/* 820E3AACh case    0:*/		return 0x820E3AB0;
		  /* 820E3AB0h */ case    1:  		/* mr R31, R22 */
		/* 820E3AB0h case    1:*/		regs.R31 = regs.R22;
		/* 820E3AB0h case    1:*/		return 0x820E3AB4;
		  /* 820E3AB4h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 820E3AB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E3AB4h case    2:*/		return 0x820E3AB8;
		  /* 820E3AB8h */ case    3:  		/* bc 12, CR6_EQ, 444 */
		/* 820E3AB8h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E3C74;  }
		/* 820E3AB8h case    3:*/		return 0x820E3ABC;
		  /* 820E3ABCh */ case    4:  		/* rlwinm R30, R11, 2, 0, 29 */
		/* 820E3ABCh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R11);
		/* 820E3ABCh case    4:*/		return 0x820E3AC0;
		  /* 820E3AC0h */ case    5:  		/* mr R11, R22 */
		/* 820E3AC0h case    5:*/		regs.R11 = regs.R22;
		/* 820E3AC0h case    5:*/		return 0x820E3AC4;
		  /* 820E3AC4h */ case    6:  		/* lwz R3, <#[R4 + 16]> */
		/* 820E3AC4h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000010) );
		/* 820E3AC4h case    6:*/		return 0x820E3AC8;
		  /* 820E3AC8h */ case    7:  		/* lwzx R20, <#[R30 + R5]> */
		/* 820E3AC8h case    7:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R30 + regs.R5 + 0x00000000) );
		/* 820E3AC8h case    7:*/		return 0x820E3ACC;
		  /* 820E3ACCh */ case    8:  		/* lwzx R3, <#[R3 + R11]> */
		/* 820E3ACCh case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 820E3ACCh case    8:*/		return 0x820E3AD0;
		  /* 820E3AD0h */ case    9:  		/* cmplw CR6, R20, R3 */
		/* 820E3AD0h case    9:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R3);
		/* 820E3AD0h case    9:*/		return 0x820E3AD4;
		  /* 820E3AD4h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 820E3AD4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820E3AE4;  }
		/* 820E3AD4h case   10:*/		return 0x820E3AD8;
		  /* 820E3AD8h */ case   11:  		/* lwz R3, <#[R28 + 60]> */
		/* 820E3AD8h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000003C) );
		/* 820E3AD8h case   11:*/		return 0x820E3ADC;
		  /* 820E3ADCh */ case   12:  		/* cmplw CR6, R3, R9 */
		/* 820E3ADCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R9);
		/* 820E3ADCh case   12:*/		return 0x820E3AE0;
	}
	return 0x820E3AE0;
} // Block from 820E3AACh-820E3AE0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E3AE0h
// Function '?EmitLOG@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3AE0);
		  /* 820E3AE0h */ case    0:  		/* bc 12, CR6_EQ, 64 */
		/* 820E3AE0h case    0:*/		if ( regs.CR[6].eq ) { return 0x820E3B20;  }
		/* 820E3AE0h case    0:*/		return 0x820E3AE4;
	}
	return 0x820E3AE4;
} // Block from 820E3AE0h-820E3AE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3AE4);
		  /* 820E3AE4h */ case    0:  		/* lwz R20, <#[R4 + 16]> */
		/* 820E3AE4h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R4 + 0x00000010) );
		/* 820E3AE4h case    0:*/		return 0x820E3AE8;
		  /* 820E3AE8h */ case    1:  		/* lwz R3, <#[R28 + 56]> */
		/* 820E3AE8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000038) );
		/* 820E3AE8h case    1:*/		return 0x820E3AEC;
		  /* 820E3AECh */ case    2:  		/* lwzx R20, <#[R20 + R11]> */
		/* 820E3AECh case    2:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R20 + regs.R11 + 0x00000000) );
		/* 820E3AECh case    2:*/		return 0x820E3AF0;
		  /* 820E3AF0h */ case    3:  		/* cmplw CR6, R3, R20 */
		/* 820E3AF0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R20);
		/* 820E3AF0h case    3:*/		return 0x820E3AF4;
		  /* 820E3AF4h */ case    4:  		/* bc 4, CR6_EQ, 68 */
		/* 820E3AF4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E3B38;  }
		/* 820E3AF4h case    4:*/		return 0x820E3AF8;
		  /* 820E3AF8h */ case    5:  		/* lwz R20, <#[R28 + 60]> */
		/* 820E3AF8h case    5:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R28 + 0x0000003C) );
		/* 820E3AF8h case    5:*/		return 0x820E3AFC;
		  /* 820E3AFCh */ case    6:  		/* cmplw CR6, R20, R9 */
		/* 820E3AFCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R9);
		/* 820E3AFCh case    6:*/		return 0x820E3B00;
		  /* 820E3B00h */ case    7:  		/* bc 4, CR6_EQ, 56 */
		/* 820E3B00h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E3B38;  }
		/* 820E3B00h case    7:*/		return 0x820E3B04;
		  /* 820E3B04h */ case    8:  		/* cmpwi CR6, R3, -1 */
		/* 820E3B04h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E3B04h case    8:*/		return 0x820E3B08;
		  /* 820E3B08h */ case    9:  		/* bc 12, CR6_EQ, 48 */
		/* 820E3B08h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E3B38;  }
		/* 820E3B08h case    9:*/		return 0x820E3B0C;
		  /* 820E3B0Ch */ case   10:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 820E3B0Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 820E3B0Ch case   10:*/		return 0x820E3B10;
		  /* 820E3B10h */ case   11:  		/* lwzx R3, <#[R3 + R25]> */
		/* 820E3B10h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R25 + 0x00000000) );
		/* 820E3B10h case   11:*/		return 0x820E3B14;
		  /* 820E3B14h */ case   12:  		/* lwz R3, <#[R3 + 60]> */
		/* 820E3B14h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000003C) );
		/* 820E3B14h case   12:*/		return 0x820E3B18;
		  /* 820E3B18h */ case   13:  		/* cmplwi CR6, R3, 0 */
		/* 820E3B18h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820E3B18h case   13:*/		return 0x820E3B1C;
		  /* 820E3B1Ch */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 820E3B1Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E3B38;  }
		/* 820E3B1Ch case   14:*/		return 0x820E3B20;
	}
	return 0x820E3B20;
} // Block from 820E3AE4h-820E3B20h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E3B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3B20);
		  /* 820E3B20h */ case    0:  		/* addi R3, R1, -128 */
		/* 820E3B20h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xFFFFFF80);
		/* 820E3B20h case    0:*/		return 0x820E3B24;
		  /* 820E3B24h */ case    1:  		/* addi R20, R1, -144 */
		/* 820E3B24h case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R1,0xFFFFFF70);
		/* 820E3B24h case    1:*/		return 0x820E3B28;
	}
	return 0x820E3B28;
} // Block from 820E3B20h-820E3B28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3B28h
// Function '?EmitPOW@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3B28);
		  /* 820E3B28h */ case    0:  		/* li R19, 1 */
		/* 820E3B28h case    0:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 820E3B28h case    0:*/		return 0x820E3B2C;
		  /* 820E3B2Ch */ case    1:  		/* li R26, 1 */
		/* 820E3B2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820E3B2Ch case    1:*/		return 0x820E3B30;
		  /* 820E3B30h */ case    2:  		/* stwx R31, <#[R30 + R3]> */
		/* 820E3B30h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + regs.R3 + 0x00000000) );
		/* 820E3B30h case    2:*/		return 0x820E3B34;
		  /* 820E3B34h */ case    3:  		/* stwx R19, <#[R11 + R20]> */
		/* 820E3B34h case    3:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 820E3B34h case    3:*/		return 0x820E3B38;
	}
	return 0x820E3B38;
} // Block from 820E3B28h-820E3B38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3B38);
		  /* 820E3B38h */ case    0:  		/* addi R31, R31, 1 */
		/* 820E3B38h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820E3B38h case    0:*/		return 0x820E3B3C;
		  /* 820E3B3Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 820E3B3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E3B3Ch case    1:*/		return 0x820E3B40;
		  /* 820E3B40h */ case    2:  		/* cmplw CR6, R31, R29 */
		/* 820E3B40h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 820E3B40h case    2:*/		return 0x820E3B44;
		  /* 820E3B44h */ case    3:  		/* bc 12, CR6_LT, -128 */
		/* 820E3B44h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E3AC4;  }
		/* 820E3B44h case    3:*/		return 0x820E3B48;
		  /* 820E3B48h */ case    4:  		/* cmpwi CR6, R26, 0 */
		/* 820E3B48h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E3B48h case    4:*/		return 0x820E3B4C;
		  /* 820E3B4Ch */ case    5:  		/* bc 12, CR6_EQ, 296 */
		/* 820E3B4Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820E3C74;  }
		/* 820E3B4Ch case    5:*/		return 0x820E3B50;
	}
	return 0x820E3B50;
} // Block from 820E3B38h-820E3B50h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E3B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3B50);
		  /* 820E3B50h */ case    0:  		/* addi R21, R21, 1 */
		/* 820E3B50h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 820E3B50h case    0:*/		return 0x820E3B54;
		  /* 820E3B54h */ case    1:  		/* addi R27, R27, 4 */
		/* 820E3B54h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 820E3B54h case    1:*/		return 0x820E3B58;
		  /* 820E3B58h */ case    2:  		/* cmplw CR6, R21, R6 */
		/* 820E3B58h case    2:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R6);
		/* 820E3B58h case    2:*/		return 0x820E3B5C;
		  /* 820E3B5Ch */ case    3:  		/* bc 12, CR6_LT, -220 */
		/* 820E3B5Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x820E3A80;  }
		/* 820E3B5Ch case    3:*/		return 0x820E3B60;
	}
	return 0x820E3B60;
} // Block from 820E3B50h-820E3B60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3B60);
		  /* 820E3B60h */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 820E3B60h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820E3B60h case    0:*/		return 0x820E3B64;
		  /* 820E3B64h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 820E3B64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E3B94;  }
		/* 820E3B64h case    1:*/		return 0x820E3B68;
		  /* 820E3B68h */ case    2:  		/* rlwinm. R10, R24, 0, 12, 31 */
		/* 820E3B68h case    2:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R10,regs.R24);
		/* 820E3B68h case    2:*/		return 0x820E3B6C;
		  /* 820E3B6Ch */ case    3:  		/* mr R11, R22 */
		/* 820E3B6Ch case    3:*/		regs.R11 = regs.R22;
		/* 820E3B6Ch case    3:*/		return 0x820E3B70;
	}
	return 0x820E3B70;
} // Block from 820E3B60h-820E3B70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3B70h
// Function '?EmitRSQ@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3B70);
		  /* 820E3B70h */ case    0:  		/* bc 12, CR0_EQ, 36 */
		/* 820E3B70h case    0:*/		if ( regs.CR[0].eq ) { return 0x820E3B94;  }
		/* 820E3B70h case    0:*/		return 0x820E3B74;
		  /* 820E3B74h */ case    1:  		/* addi R9, R1, -144 */
		/* 820E3B74h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFF70);
		/* 820E3B74h case    1:*/		return 0x820E3B78;
		  /* 820E3B78h */ case    2:  		/* lwz R6, <#[R9]> */
		/* 820E3B78h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 820E3B78h case    2:*/		return 0x820E3B7C;
		  /* 820E3B7Ch */ case    3:  		/* cmpwi CR6, R6, 0 */
		/* 820E3B7Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 820E3B7Ch case    3:*/		return 0x820E3B80;
		  /* 820E3B80h */ case    4:  		/* bc 12, CR6_EQ, 244 */
		/* 820E3B80h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E3C74;  }
		/* 820E3B80h case    4:*/		return 0x820E3B84;
		  /* 820E3B84h */ case    5:  		/* addi R11, R11, 1 */
		/* 820E3B84h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E3B84h case    5:*/		return 0x820E3B88;
		  /* 820E3B88h */ case    6:  		/* addi R9, R9, 4 */
		/* 820E3B88h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E3B88h case    6:*/		return 0x820E3B8C;
		  /* 820E3B8Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 820E3B8Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E3B8Ch case    7:*/		return 0x820E3B90;
		  /* 820E3B90h */ case    8:  		/* bc 12, CR6_LT, -24 */
		/* 820E3B90h case    8:*/		if ( regs.CR[6].lt ) { return 0x820E3B78;  }
		/* 820E3B90h case    8:*/		return 0x820E3B94;
	}
	return 0x820E3B94;
} // Block from 820E3B70h-820E3B94h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E3B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3B94);
		  /* 820E3B94h */ case    0:  		/* li R10, 4 */
		/* 820E3B94h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820E3B94h case    0:*/		return 0x820E3B98;
		  /* 820E3B98h */ case    1:  		/* mr R11, R8 */
		/* 820E3B98h case    1:*/		regs.R11 = regs.R8;
		/* 820E3B98h case    1:*/		return 0x820E3B9C;
		  /* 820E3B9Ch */ case    2:  		/* subf R9, R8, R7 */
		/* 820E3B9Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R7);
		/* 820E3B9Ch case    2:*/		return 0x820E3BA0;
		  /* 820E3BA0h */ case    3:  		/* mtspr CTR, R10 */
		/* 820E3BA0h case    3:*/		regs.CTR = regs.R10;
		/* 820E3BA0h case    3:*/		return 0x820E3BA4;
		  /* 820E3BA4h */ case    4:  		/* lwzx R10, <#[R9 + R11]> */
		/* 820E3BA4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E3BA4h case    4:*/		return 0x820E3BA8;
		  /* 820E3BA8h */ case    5:  		/* cmplwi CR6, R10, 4 */
		/* 820E3BA8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 820E3BA8h case    5:*/		return 0x820E3BAC;
		  /* 820E3BACh */ case    6:  		/* bc 4, CR6_LT, 20 */
		/* 820E3BACh case    6:*/		if ( !regs.CR[6].lt ) { return 0x820E3BC0;  }
		/* 820E3BACh case    6:*/		return 0x820E3BB0;
		  /* 820E3BB0h */ case    7:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E3BB0h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E3BB0h case    7:*/		return 0x820E3BB4;
		  /* 820E3BB4h */ case    8:  		/* addi R8, R1, -128 */
		/* 820E3BB4h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xFFFFFF80);
		/* 820E3BB4h case    8:*/		return 0x820E3BB8;
	}
	return 0x820E3BB8;
} // Block from 820E3B94h-820E3BB8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E3BB8h
// Function '?EmitMIN@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3BB8);
		  /* 820E3BB8h */ case    0:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820E3BB8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E3BB8h case    0:*/		return 0x820E3BBC;
		  /* 820E3BBCh */ case    1:  		/* b 8 */
		/* 820E3BBCh case    1:*/		return 0x820E3BC4;
		/* 820E3BBCh case    1:*/		return 0x820E3BC0;
	}
	return 0x820E3BC0;
} // Block from 820E3BB8h-820E3BC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3BC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3BC0);
		  /* 820E3BC0h */ case    0:  		/* li R10, 255 */
		/* 820E3BC0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xFF);
		/* 820E3BC0h case    0:*/		return 0x820E3BC4;
	}
	return 0x820E3BC4;
} // Block from 820E3BC0h-820E3BC4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3BC4);
		  /* 820E3BC4h */ case    0:  		/* stw R10, <#[R11]> */
		/* 820E3BC4h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3BC4h case    0:*/		return 0x820E3BC8;
		  /* 820E3BC8h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E3BC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E3BC8h case    1:*/		return 0x820E3BCC;
		  /* 820E3BCCh */ case    2:  		/* bc 16, CR0_LT, -40 */
		/* 820E3BCCh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E3BA4;  }
		/* 820E3BCCh case    2:*/		return 0x820E3BD0;
		  /* 820E3BD0h */ case    3:  		/* li R3, 0 */
		/* 820E3BD0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E3BD0h case    3:*/		return 0x820E3BD4;
		  /* 820E3BD4h */ case    4:  		/* b -338256 */
		/* 820E3BD4h case    4:*/		return 0x82091284;
		/* 820E3BD4h case    4:*/		return 0x820E3BD8;
	}
	return 0x820E3BD8;
} // Block from 820E3BC4h-820E3BD8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E3BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3BD8);
		  /* 820E3BD8h */ case    0:  		/* li R11, 4 */
		/* 820E3BD8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820E3BD8h case    0:*/		return 0x820E3BDC;
		  /* 820E3BDCh */ case    1:  		/* rlwinm R7, R24, 0, 12, 31 */
		/* 820E3BDCh case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R7,regs.R24);
		/* 820E3BDCh case    1:*/		return 0x820E3BE0;
		  /* 820E3BE0h */ case    2:  		/* mr R10, R22 */
		/* 820E3BE0h case    2:*/		regs.R10 = regs.R22;
		/* 820E3BE0h case    2:*/		return 0x820E3BE4;
		  /* 820E3BE4h */ case    3:  		/* mtspr CTR, R11 */
		/* 820E3BE4h case    3:*/		regs.CTR = regs.R11;
		/* 820E3BE4h case    3:*/		return 0x820E3BE8;
		  /* 820E3BE8h */ case    4:  		/* cmplw CR6, R10, R7 */
		/* 820E3BE8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820E3BE8h case    4:*/		return 0x820E3BEC;
		  /* 820E3BECh */ case    5:  		/* bc 4, CR6_LT, 12 */
		/* 820E3BECh case    5:*/		if ( !regs.CR[6].lt ) { return 0x820E3BF8;  }
		/* 820E3BECh case    5:*/		return 0x820E3BF0;
		  /* 820E3BF0h */ case    6:  		/* stw R10, <#[R8]> */
		/* 820E3BF0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 820E3BF0h case    6:*/		return 0x820E3BF4;
		  /* 820E3BF4h */ case    7:  		/* b 12 */
		/* 820E3BF4h case    7:*/		return 0x820E3C00;
		/* 820E3BF4h case    7:*/		return 0x820E3BF8;
	}
	return 0x820E3BF8;
} // Block from 820E3BD8h-820E3BF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E3BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3BF8);
		  /* 820E3BF8h */ case    0:  		/* li R11, 255 */
		/* 820E3BF8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFF);
		/* 820E3BF8h case    0:*/		return 0x820E3BFC;
		  /* 820E3BFCh */ case    1:  		/* stw R11, <#[R8]> */
		/* 820E3BFCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E3BFCh case    1:*/		return 0x820E3C00;
	}
	return 0x820E3C00;
} // Block from 820E3BF8h-820E3C00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3C00h
// Function '?EmitMAX@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3C00);
		  /* 820E3C00h */ case    0:  		/* addi R10, R10, 1 */
		/* 820E3C00h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E3C00h case    0:*/		return 0x820E3C04;
		  /* 820E3C04h */ case    1:  		/* addi R8, R8, 4 */
		/* 820E3C04h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820E3C04h case    1:*/		return 0x820E3C08;
		  /* 820E3C08h */ case    2:  		/* bc 16, CR0_LT, -32 */
		/* 820E3C08h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E3BE8;  }
		/* 820E3C08h case    2:*/		return 0x820E3C0C;
		  /* 820E3C0Ch */ case    3:  		/* mr R31, R22 */
		/* 820E3C0Ch case    3:*/		regs.R31 = regs.R22;
		/* 820E3C0Ch case    3:*/		return 0x820E3C10;
		  /* 820E3C10h */ case    4:  		/* cmplwi CR6, R6, 0 */
		/* 820E3C10h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820E3C10h case    4:*/		return 0x820E3C14;
		  /* 820E3C14h */ case    5:  		/* bc 12, CR6_EQ, -68 */
		/* 820E3C14h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E3BD0;  }
		/* 820E3C14h case    5:*/		return 0x820E3C18;
		  /* 820E3C18h */ case    6:  		/* lwz R10, <#[R4 + 16]> */
		/* 820E3C18h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 820E3C18h case    6:*/		return 0x820E3C1C;
		  /* 820E3C1Ch */ case    7:  		/* mr R11, R5 */
		/* 820E3C1Ch case    7:*/		regs.R11 = regs.R5;
		/* 820E3C1Ch case    7:*/		return 0x820E3C20;
		  /* 820E3C20h */ case    8:  		/* lwz R7, <#[R3 + 20]> */
		/* 820E3C20h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 820E3C20h case    8:*/		return 0x820E3C24;
		  /* 820E3C24h */ case    9:  		/* lwz R8, <#[R10]> */
		/* 820E3C24h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820E3C24h case    9:*/		return 0x820E3C28;
		  /* 820E3C28h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 820E3C28h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3C28h case   10:*/		return 0x820E3C2C;
		  /* 820E3C2Ch */ case   11:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 820E3C2Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 820E3C2Ch case   11:*/		return 0x820E3C30;
		  /* 820E3C30h */ case   12:  		/* cmplw CR6, R10, R8 */
		/* 820E3C30h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E3C30h case   12:*/		return 0x820E3C34;
		  /* 820E3C34h */ case   13:  		/* lwzx R10, <#[R5 + R7]> */
		/* 820E3C34h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 820E3C34h case   13:*/		return 0x820E3C38;
		  /* 820E3C38h */ case   14:  		/* bc 4, CR6_EQ, 16 */
		/* 820E3C38h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E3C48;  }
		/* 820E3C38h case   14:*/		return 0x820E3C3C;
		  /* 820E3C3Ch */ case   15:  		/* lwz R5, <#[R10 + 60]> */
		/* 820E3C3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x0000003C) );
		/* 820E3C3Ch case   15:*/		return 0x820E3C40;
		  /* 820E3C40h */ case   16:  		/* cmplw CR6, R5, R9 */
		/* 820E3C40h case   16:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 820E3C40h case   16:*/		return 0x820E3C44;
		  /* 820E3C44h */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 820E3C44h case   17:*/		if ( regs.CR[6].eq ) { return 0x820E3C60;  }
		/* 820E3C44h case   17:*/		return 0x820E3C48;
	}
	return 0x820E3C48;
} // Block from 820E3C00h-820E3C48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3C48h
// Function '?EmitLT@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3C48);
		  /* 820E3C48h */ case    0:  		/* lwz R5, <#[R10 + 56]> */
		/* 820E3C48h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000038) );
		/* 820E3C48h case    0:*/		return 0x820E3C4C;
		  /* 820E3C4Ch */ case    1:  		/* cmplw CR6, R5, R8 */
		/* 820E3C4Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R8);
		/* 820E3C4Ch case    1:*/		return 0x820E3C50;
		  /* 820E3C50h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 820E3C50h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E3C74;  }
		/* 820E3C50h case    2:*/		return 0x820E3C54;
		  /* 820E3C54h */ case    3:  		/* lwz R10, <#[R10 + 60]> */
		/* 820E3C54h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820E3C54h case    3:*/		return 0x820E3C58;
		  /* 820E3C58h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 820E3C58h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E3C58h case    4:*/		return 0x820E3C5C;
		  /* 820E3C5Ch */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 820E3C5Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E3C74;  }
		/* 820E3C5Ch case    5:*/		return 0x820E3C60;
	}
	return 0x820E3C60;
} // Block from 820E3C48h-820E3C60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E3C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3C60);
		  /* 820E3C60h */ case    0:  		/* addi R31, R31, 1 */
		/* 820E3C60h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820E3C60h case    0:*/		return 0x820E3C64;
		  /* 820E3C64h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E3C64h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E3C64h case    1:*/		return 0x820E3C68;
		  /* 820E3C68h */ case    2:  		/* cmplw CR6, R31, R6 */
		/* 820E3C68h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R6);
		/* 820E3C68h case    2:*/		return 0x820E3C6C;
		  /* 820E3C6Ch */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 820E3C6Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x820E3C28;  }
		/* 820E3C6Ch case    3:*/		return 0x820E3C70;
		  /* 820E3C70h */ case    4:  		/* b -160 */
		/* 820E3C70h case    4:*/		return 0x820E3BD0;
		/* 820E3C70h case    4:*/		return 0x820E3C74;
	}
	return 0x820E3C74;
} // Block from 820E3C60h-820E3C74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E3C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3C74);
		  /* 820E3C74h */ case    0:  		/* li R3, 1 */
		/* 820E3C74h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E3C74h case    0:*/		return 0x820E3C78;
		  /* 820E3C78h */ case    1:  		/* b -164 */
		/* 820E3C78h case    1:*/		return 0x820E3BD4;
		/* 820E3C78h case    1:*/		return 0x820E3C7C;
		  /* 820E3C7Ch */ case    2:  		/* nop */
		/* 820E3C7Ch case    2:*/		cpu::op::nop();
		/* 820E3C7Ch case    2:*/		return 0x820E3C80;
	}
	return 0x820E3C80;
} // Block from 820E3C74h-820E3C80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3C80);
		  /* 820E3C80h */ case    0:  		/* mfspr R12, LR */
		/* 820E3C80h case    0:*/		regs.R12 = regs.LR;
		/* 820E3C80h case    0:*/		return 0x820E3C84;
		  /* 820E3C84h */ case    1:  		/* bl -338532 */
		/* 820E3C84h case    1:*/		regs.LR = 0x820E3C88; return 0x82091220;
		/* 820E3C84h case    1:*/		return 0x820E3C88;
		  /* 820E3C88h */ case    2:  		/* stwu R1, <#[R1 - 688]> */
		/* 820E3C88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD50);
		/* 820E3C88h case    2:*/		return 0x820E3C8C;
		  /* 820E3C8Ch */ case    3:  		/* lwz R11, <#[R4]> */
		/* 820E3C8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E3C8Ch case    3:*/		return 0x820E3C90;
		  /* 820E3C90h */ case    4:  		/* li R31, 0 */
		/* 820E3C90h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E3C90h case    4:*/		return 0x820E3C94;
		  /* 820E3C94h */ case    5:  		/* mr R21, R3 */
		/* 820E3C94h case    5:*/		regs.R21 = regs.R3;
		/* 820E3C94h case    5:*/		return 0x820E3C98;
	}
	return 0x820E3C98;
} // Block from 820E3C80h-820E3C98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E3C98h
// Function '?EmitGE@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3C98);
		  /* 820E3C98h */ case    0:  		/* lwz R14, <#[R1 + 772]> */
		/* 820E3C98h case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000304) );
		/* 820E3C98h case    0:*/		return 0x820E3C9C;
		  /* 820E3C9Ch */ case    1:  		/* rlwinm R20, R11, 0, 12, 31 */
		/* 820E3C9Ch case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R20,regs.R11);
		/* 820E3C9Ch case    1:*/		return 0x820E3CA0;
		  /* 820E3CA0h */ case    2:  		/* stw R7, <#[R1 + 740]> */
		/* 820E3CA0h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000002E4) );
		/* 820E3CA0h case    2:*/		return 0x820E3CA4;
		  /* 820E3CA4h */ case    3:  		/* mr R18, R4 */
		/* 820E3CA4h case    3:*/		regs.R18 = regs.R4;
		/* 820E3CA4h case    3:*/		return 0x820E3CA8;
		  /* 820E3CA8h */ case    4:  		/* stw R8, <#[R1 + 748]> */
		/* 820E3CA8h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000002EC) );
		/* 820E3CA8h case    4:*/		return 0x820E3CAC;
		  /* 820E3CACh */ case    5:  		/* mr R22, R5 */
		/* 820E3CACh case    5:*/		regs.R22 = regs.R5;
		/* 820E3CACh case    5:*/		return 0x820E3CB0;
		  /* 820E3CB0h */ case    6:  		/* stw R31, <#[R1 + 96]> */
		/* 820E3CB0h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E3CB0h case    6:*/		return 0x820E3CB4;
		  /* 820E3CB4h */ case    7:  		/* mr R16, R6 */
		/* 820E3CB4h case    7:*/		regs.R16 = regs.R6;
		/* 820E3CB4h case    7:*/		return 0x820E3CB8;
		  /* 820E3CB8h */ case    8:  		/* mr R19, R9 */
		/* 820E3CB8h case    8:*/		regs.R19 = regs.R9;
		/* 820E3CB8h case    8:*/		return 0x820E3CBC;
		  /* 820E3CBCh */ case    9:  		/* mr R15, R10 */
		/* 820E3CBCh case    9:*/		regs.R15 = regs.R10;
		/* 820E3CBCh case    9:*/		return 0x820E3CC0;
		  /* 820E3CC0h */ case   10:  		/* li R3, 0 */
		/* 820E3CC0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E3CC0h case   10:*/		return 0x820E3CC4;
		  /* 820E3CC4h */ case   11:  		/* cmplw CR6, R20, R10 */
		/* 820E3CC4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R10);
		/* 820E3CC4h case   11:*/		return 0x820E3CC8;
		  /* 820E3CC8h */ case   12:  		/* bc 4, CR6_GT, 20 */
		/* 820E3CC8h case   12:*/		if ( !regs.CR[6].gt ) { return 0x820E3CDC;  }
		/* 820E3CC8h case   12:*/		return 0x820E3CCC;
		  /* 820E3CCCh */ case   13:  		/* cmpwi CR6, R14, 0 */
		/* 820E3CCCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000000);
		/* 820E3CCCh case   13:*/		return 0x820E3CD0;
		  /* 820E3CD0h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 820E3CD0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E3CDC;  }
		/* 820E3CD0h case   14:*/		return 0x820E3CD4;
		  /* 820E3CD4h */ case   15:  		/* li R3, 1 */
		/* 820E3CD4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E3CD4h case   15:*/		return 0x820E3CD8;
		  /* 820E3CD8h */ case   16:  		/* b 1460 */
		/* 820E3CD8h case   16:*/		return 0x820E428C;
		/* 820E3CD8h case   16:*/		return 0x820E3CDC;
	}
	return 0x820E3CDC;
} // Block from 820E3C98h-820E3CDCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 820E3CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3CDC);
		  /* 820E3CDCh */ case    0:  		/* lwz R10, <#[R22 + 4]> */
		/* 820E3CDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000004) );
		/* 820E3CDCh case    0:*/		return 0x820E3CE0;
		  /* 820E3CE0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820E3CE0h case    1:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820E3CE0h case    1:*/		return 0x820E3CE4;
		  /* 820E3CE4h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 820E3CE4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E3CE4h case    2:*/		return 0x820E3CE8;
	}
	return 0x820E3CE8;
} // Block from 820E3CDCh-820E3CE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3CE8h
// Function '?EmitADD@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3CE8);
		  /* 820E3CE8h */ case    0:  		/* bc 4, CR6_EQ, -20 */
		/* 820E3CE8h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820E3CD4;  }
		/* 820E3CE8h case    0:*/		return 0x820E3CEC;
		  /* 820E3CECh */ case    1:  		/* lwz R11, <#[R22]> */
		/* 820E3CECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 820E3CECh case    1:*/		return 0x820E3CF0;
		  /* 820E3CF0h */ case    2:  		/* li R7, 1 */
		/* 820E3CF0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820E3CF0h case    2:*/		return 0x820E3CF4;
		  /* 820E3CF4h */ case    3:  		/* stw R7, <#[R1 + 104]> */
		/* 820E3CF4h case    3:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000068) );
		/* 820E3CF4h case    3:*/		return 0x820E3CF8;
		  /* 820E3CF8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820E3CF8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E3CF8h case    4:*/		return 0x820E3CFC;
		  /* 820E3CFCh */ case    5:  		/* bc 4, CR6_EQ, 84 */
		/* 820E3CFCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E3D50;  }
		/* 820E3CFCh case    5:*/		return 0x820E3D00;
		  /* 820E3D00h */ case    6:  		/* cmpwi CR6, R14, 0 */
		/* 820E3D00h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000000);
		/* 820E3D00h case    6:*/		return 0x820E3D04;
		  /* 820E3D04h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 820E3D04h case    7:*/		if ( regs.CR[6].eq ) { return 0x820E3D10;  }
		/* 820E3D04h case    7:*/		return 0x820E3D08;
		  /* 820E3D08h */ case    8:  		/* li R7, 2 */
		/* 820E3D08h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 820E3D08h case    8:*/		return 0x820E3D0C;
		  /* 820E3D0Ch */ case    9:  		/* stw R7, <#[R1 + 104]> */
		/* 820E3D0Ch case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000068) );
		/* 820E3D0Ch case    9:*/		return 0x820E3D10;
	}
	return 0x820E3D10;
} // Block from 820E3CE8h-820E3D10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E3D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3D10);
		  /* 820E3D10h */ case    0:  		/* li R10, 4 */
		/* 820E3D10h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820E3D10h case    0:*/		return 0x820E3D14;
		  /* 820E3D14h */ case    1:  		/* addi R8, R1, 112 */
		/* 820E3D14h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 820E3D14h case    1:*/		return 0x820E3D18;
		  /* 820E3D18h */ case    2:  		/* li R9, 0 */
		/* 820E3D18h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E3D18h case    2:*/		return 0x820E3D1C;
		  /* 820E3D1Ch */ case    3:  		/* addi R11, R1, 112 */
		/* 820E3D1Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 820E3D1Ch case    3:*/		return 0x820E3D20;
		  /* 820E3D20h */ case    4:  		/* subf R8, R8, R19 */
		/* 820E3D20h case    4:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R8,regs.R19);
		/* 820E3D20h case    4:*/		return 0x820E3D24;
		  /* 820E3D24h */ case    5:  		/* mtspr CTR, R10 */
		/* 820E3D24h case    5:*/		regs.CTR = regs.R10;
		/* 820E3D24h case    5:*/		return 0x820E3D28;
		  /* 820E3D28h */ case    6:  		/* cmplw CR6, R9, R15 */
		/* 820E3D28h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R15);
		/* 820E3D28h case    6:*/		return 0x820E3D2C;
		  /* 820E3D2Ch */ case    7:  		/* bc 4, CR6_LT, 12 */
		/* 820E3D2Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x820E3D38;  }
		/* 820E3D2Ch case    7:*/		return 0x820E3D30;
		  /* 820E3D30h */ case    8:  		/* lwzx R10, <#[R8 + R11]> */
		/* 820E3D30h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E3D30h case    8:*/		return 0x820E3D34;
		  /* 820E3D34h */ case    9:  		/* b 8 */
		/* 820E3D34h case    9:*/		return 0x820E3D3C;
		/* 820E3D34h case    9:*/		return 0x820E3D38;
	}
	return 0x820E3D38;
} // Block from 820E3D10h-820E3D38h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E3D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3D38);
		  /* 820E3D38h */ case    0:  		/* li R10, 255 */
		/* 820E3D38h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xFF);
		/* 820E3D38h case    0:*/		return 0x820E3D3C;
	}
	return 0x820E3D3C;
} // Block from 820E3D38h-820E3D3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3D3C);
		  /* 820E3D3Ch */ case    0:  		/* stw R10, <#[R11]> */
		/* 820E3D3Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3D3Ch case    0:*/		return 0x820E3D40;
		  /* 820E3D40h */ case    1:  		/* addi R9, R9, 1 */
		/* 820E3D40h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E3D40h case    1:*/		return 0x820E3D44;
		  /* 820E3D44h */ case    2:  		/* addi R11, R11, 4 */
		/* 820E3D44h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E3D44h case    2:*/		return 0x820E3D48;
		  /* 820E3D48h */ case    3:  		/* bc 16, CR0_LT, -32 */
		/* 820E3D48h case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E3D28;  }
		/* 820E3D48h case    3:*/		return 0x820E3D4C;
		  /* 820E3D4Ch */ case    4:  		/* addi R19, R1, 112 */
		/* 820E3D4Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R1,0x70);
		/* 820E3D4Ch case    4:*/		return 0x820E3D50;
	}
	return 0x820E3D50;
} // Block from 820E3D3Ch-820E3D50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E3D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3D50);
		  /* 820E3D50h */ case    0:  		/* li R10, 0 */
		/* 820E3D50h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E3D50h case    0:*/		return 0x820E3D54;
		  /* 820E3D54h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 820E3D54h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820E3D54h case    1:*/		return 0x820E3D58;
		  /* 820E3D58h */ case    2:  		/* stw R10, <#[R1 + 100]> */
		/* 820E3D58h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 820E3D58h case    2:*/		return 0x820E3D5C;
		  /* 820E3D5Ch */ case    3:  		/* bc 12, CR6_EQ, 1224 */
		/* 820E3D5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E4224;  }
		/* 820E3D5Ch case    3:*/		return 0x820E3D60;
		  /* 820E3D60h */ case    4:  		/* lis R11, -32254 */
		/* 820E3D60h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E3D60h case    4:*/		return 0x820E3D64;
		  /* 820E3D64h */ case    5:  		/* addi R11, R11, -18584 */
		/* 820E3D64h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFB768);
		/* 820E3D64h case    5:*/		return 0x820E3D68;
		  /* 820E3D68h */ case    6:  		/* stw R11, <#[R1 + 108]> */
		/* 820E3D68h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E3D68h case    6:*/		return 0x820E3D6C;
		  /* 820E3D6Ch */ case    7:  		/* lwz R11, <#[R22 + 28]> */
		/* 820E3D6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000001C) );
		/* 820E3D6Ch case    7:*/		return 0x820E3D70;
		  /* 820E3D70h */ case    8:  		/* li R17, 0 */
		/* 820E3D70h case    8:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 820E3D70h case    8:*/		return 0x820E3D74;
		  /* 820E3D74h */ case    9:  		/* addic. R11, R11, 1 */
		/* 820E3D74h case    9:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0x1);
		/* 820E3D74h case    9:*/		return 0x820E3D78;
		  /* 820E3D78h */ case   10:  		/* bc 12, CR0_EQ, 1168 */
		/* 820E3D78h case   10:*/		if ( regs.CR[0].eq ) { return 0x820E4208;  }
		/* 820E3D78h case   10:*/		return 0x820E3D7C;
		  /* 820E3D7Ch */ case   11:  		/* lwz R11, <#[R1 + 740]> */
		/* 820E3D7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002E4) );
		/* 820E3D7Ch case   11:*/		return 0x820E3D80;
		  /* 820E3D80h */ case   12:  		/* mr R4, R16 */
		/* 820E3D80h case   12:*/		regs.R4 = regs.R16;
		/* 820E3D80h case   12:*/		return 0x820E3D84;
		  /* 820E3D84h */ case   13:  		/* addi R3, R1, 144 */
		/* 820E3D84h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E3D84h case   13:*/		return 0x820E3D88;
		  /* 820E3D88h */ case   14:  		/* lwz R31, <#[R11]> */
		/* 820E3D88h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 820E3D88h case   14:*/		return 0x820E3D8C;
		  /* 820E3D8Ch */ case   15:  		/* rlwinm R5, R31, 2, 0, 29 */
		/* 820E3D8Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R31);
		/* 820E3D8Ch case   15:*/		return 0x820E3D90;
	}
	return 0x820E3D90;
} // Block from 820E3D50h-820E3D90h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E3D90h
// Function '?EmitMUL@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3D90);
		  /* 820E3D90h */ case    0:  		/* bl -336864 */
		/* 820E3D90h case    0:*/		regs.LR = 0x820E3D94; return 0x820919B0;
		/* 820E3D90h case    0:*/		return 0x820E3D94;
		  /* 820E3D94h */ case    1:  		/* li R5, 160 */
		/* 820E3D94h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xA0);
		/* 820E3D94h case    1:*/		return 0x820E3D98;
		  /* 820E3D98h */ case    2:  		/* li R4, 255 */
		/* 820E3D98h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 820E3D98h case    2:*/		return 0x820E3D9C;
		  /* 820E3D9Ch */ case    3:  		/* addi R3, R1, 208 */
		/* 820E3D9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 820E3D9Ch case    3:*/		return 0x820E3DA0;
		  /* 820E3DA0h */ case    4:  		/* bl -338528 */
		/* 820E3DA0h case    4:*/		regs.LR = 0x820E3DA4; return 0x82091340;
		/* 820E3DA0h case    4:*/		return 0x820E3DA4;
		  /* 820E3DA4h */ case    5:  		/* li R5, 160 */
		/* 820E3DA4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xA0);
		/* 820E3DA4h case    5:*/		return 0x820E3DA8;
		  /* 820E3DA8h */ case    6:  		/* li R4, 255 */
		/* 820E3DA8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 820E3DA8h case    6:*/		return 0x820E3DAC;
		  /* 820E3DACh */ case    7:  		/* addi R3, R1, 368 */
		/* 820E3DACh case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x170);
		/* 820E3DACh case    7:*/		return 0x820E3DB0;
		  /* 820E3DB0h */ case    8:  		/* bl -338544 */
		/* 820E3DB0h case    8:*/		regs.LR = 0x820E3DB4; return 0x82091340;
		/* 820E3DB0h case    8:*/		return 0x820E3DB4;
		  /* 820E3DB4h */ case    9:  		/* lwz R11, <#[R22 + 8]> */
		/* 820E3DB4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 820E3DB4h case    9:*/		return 0x820E3DB8;
		  /* 820E3DB8h */ case   10:  		/* li R3, 0 */
		/* 820E3DB8h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E3DB8h case   10:*/		return 0x820E3DBC;
		  /* 820E3DBCh */ case   11:  		/* stw R31, <#[R1 + 96]> */
		/* 820E3DBCh case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E3DBCh case   11:*/		return 0x820E3DC0;
		  /* 820E3DC0h */ case   12:  		/* li R24, 0 */
		/* 820E3DC0h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820E3DC0h case   12:*/		return 0x820E3DC4;
		  /* 820E3DC4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820E3DC4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E3DC4h case   13:*/		return 0x820E3DC8;
		  /* 820E3DC8h */ case   14:  		/* bc 4, CR6_GT, 392 */
		/* 820E3DC8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x820E3F50;  }
		/* 820E3DC8h case   14:*/		return 0x820E3DCC;
		  /* 820E3DCCh */ case   15:  		/* li R26, 0 */
		/* 820E3DCCh case   15:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E3DCCh case   15:*/		return 0x820E3DD0;
		  /* 820E3DD0h */ case   16:  		/* li R25, 0 */
		/* 820E3DD0h case   16:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820E3DD0h case   16:*/		return 0x820E3DD4;
		  /* 820E3DD4h */ case   17:  		/* rlwinm R23, R20, 2, 0, 29 */
		/* 820E3DD4h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R20);
		/* 820E3DD4h case   17:*/		return 0x820E3DD8;
	}
	return 0x820E3DD8;
} // Block from 820E3D90h-820E3DD8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3DD8h
// Function '?EmitDOT3@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3DD8);
		  /* 820E3DD8h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 820E3DD8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 820E3DD8h case    0:*/		return 0x820E3DDC;
		  /* 820E3DDCh */ case    1:  		/* subfic R10, R24, 1 */
		/* 820E3DDCh case    1:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R24,0x1);
		/* 820E3DDCh case    1:*/		return 0x820E3DE0;
		  /* 820E3DE0h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 820E3DE0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E3DE8;  }
		/* 820E3DE0h case    2:*/		return 0x820E3DE4;
		  /* 820E3DE4h */ case    3:  		/* mr R10, R24 */
		/* 820E3DE4h case    3:*/		regs.R10 = regs.R24;
		/* 820E3DE4h case    3:*/		return 0x820E3DE8;
	}
	return 0x820E3DE8;
} // Block from 820E3DD8h-820E3DE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3DE8);
		  /* 820E3DE8h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 820E3DE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 820E3DE8h case    0:*/		return 0x820E3DEC;
		  /* 820E3DECh */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 820E3DECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820E3DECh case    1:*/		return 0x820E3DF0;
		  /* 820E3DF0h */ case    2:  		/* bc 4, CR6_LT, -284 */
		/* 820E3DF0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820E3CD4;  }
		/* 820E3DF0h case    2:*/		return 0x820E3DF4;
		  /* 820E3DF4h */ case    3:  		/* add R11, R11, R26 */
		/* 820E3DF4h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 820E3DF4h case    3:*/		return 0x820E3DF8;
		  /* 820E3DF8h */ case    4:  		/* lwz R9, <#[R18 + 8]> */
		/* 820E3DF8h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x00000008) );
		/* 820E3DF8h case    4:*/		return 0x820E3DFC;
		  /* 820E3DFCh */ case    5:  		/* addi R10, R10, 3 */
		/* 820E3DFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3);
		/* 820E3DFCh case    5:*/		return 0x820E3E00;
		  /* 820E3E00h */ case    6:  		/* lwz R8, <#[R21 + 20]> */
		/* 820E3E00h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000014) );
		/* 820E3E00h case    6:*/		return 0x820E3E04;
		  /* 820E3E04h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3E04h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3E04h case    7:*/		return 0x820E3E08;
		  /* 820E3E08h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E3E08h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E3E08h case    8:*/		return 0x820E3E0C;
		  /* 820E3E0Ch */ case    9:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E3E0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E3E0Ch case    9:*/		return 0x820E3E10;
		  /* 820E3E10h */ case   10:  		/* lwzx R31, <#[R10 + R22]> */
		/* 820E3E10h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R22 + 0x00000000) );
		/* 820E3E10h case   10:*/		return 0x820E3E14;
		  /* 820E3E14h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3E14h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3E14h case   11:*/		return 0x820E3E18;
		  /* 820E3E18h */ case   12:  		/* cmplwi CR6, R31, 16 */
		/* 820E3E18h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 820E3E18h case   12:*/		return 0x820E3E1C;
		  /* 820E3E1Ch */ case   13:  		/* lwzx R27, <#[R11 + R8]> */
		/* 820E3E1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E3E1Ch case   13:*/		return 0x820E3E20;
	}
	return 0x820E3E20;
} // Block from 820E3DE8h-820E3E20h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E3E20h
// Function '?EmitDOT4@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3E20);
		  /* 820E3E20h */ case    0:  		/* bc 4, CR6_LT, 144 */
		/* 820E3E20h case    0:*/		if ( !regs.CR[6].lt ) { return 0x820E3EB0;  }
		/* 820E3E20h case    0:*/		return 0x820E3E24;
		  /* 820E3E24h */ case    1:  		/* lwz R11, <#[R27 + 72]> */
		/* 820E3E24h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000048) );
		/* 820E3E24h case    1:*/		return 0x820E3E28;
		  /* 820E3E28h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 820E3E28h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E3E28h case    2:*/		return 0x820E3E2C;
		  /* 820E3E2Ch */ case    3:  		/* bc 12, CR6_EQ, 284 */
		/* 820E3E2Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E3F48;  }
		/* 820E3E2Ch case    3:*/		return 0x820E3E30;
		  /* 820E3E30h */ case    4:  		/* lwz R28, <#[R22]> */
		/* 820E3E30h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R22 + 0x00000000) );
		/* 820E3E30h case    4:*/		return 0x820E3E34;
		  /* 820E3E34h */ case    5:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 820E3E34h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 820E3E34h case    5:*/		return 0x820E3E38;
		  /* 820E3E38h */ case    6:  		/* lwz R30, <#[R21 + 24]> */
		/* 820E3E38h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R21 + 0x00000018) );
		/* 820E3E38h case    6:*/		return 0x820E3E3C;
		  /* 820E3E3Ch */ case    7:  		/* add R5, R9, R25 */
		/* 820E3E3Ch case    7:*/		cpu::op::add<0>(regs,&regs.R5,regs.R9,regs.R25);
		/* 820E3E3Ch case    7:*/		return 0x820E3E40;
		  /* 820E3E40h */ case    8:  		/* subf R11, R28, R31 */
		/* 820E3E40h case    8:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R31);
		/* 820E3E40h case    8:*/		return 0x820E3E44;
		  /* 820E3E44h */ case    9:  		/* mr R10, R14 */
		/* 820E3E44h case    9:*/		regs.R10 = regs.R14;
		/* 820E3E44h case    9:*/		return 0x820E3E48;
		  /* 820E3E48h */ case   10:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 820E3E48h case   10:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 820E3E48h case   10:*/		return 0x820E3E4C;
		  /* 820E3E4Ch */ case   11:  		/* addi R8, R1, 128 */
		/* 820E3E4Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820E3E4Ch case   11:*/		return 0x820E3E50;
		  /* 820E3E50h */ case   12:  		/* add R29, R11, R22 */
		/* 820E3E50h case   12:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R22);
		/* 820E3E50h case   12:*/		return 0x820E3E54;
		  /* 820E3E54h */ case   13:  		/* lwzx R4, <#[R7 + R30]> */
		/* 820E3E54h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R7 + regs.R30 + 0x00000000) );
		/* 820E3E54h case   13:*/		return 0x820E3E58;
		  /* 820E3E58h */ case   14:  		/* mr R7, R19 */
		/* 820E3E58h case   14:*/		regs.R7 = regs.R19;
		/* 820E3E58h case   14:*/		return 0x820E3E5C;
		  /* 820E3E5Ch */ case   15:  		/* mr R6, R20 */
		/* 820E3E5Ch case   15:*/		regs.R6 = regs.R20;
		/* 820E3E5Ch case   15:*/		return 0x820E3E60;
		  /* 820E3E60h */ case   16:  		/* mr R3, R21 */
		/* 820E3E60h case   16:*/		regs.R3 = regs.R21;
		/* 820E3E60h case   16:*/		return 0x820E3E64;
		  /* 820E3E64h */ case   17:  		/* lwz R9, <#[R29 + 24]> */
		/* 820E3E64h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000018) );
		/* 820E3E64h case   17:*/		return 0x820E3E68;
	}
	return 0x820E3E68;
} // Block from 820E3E20h-820E3E68h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3E68h
// Function '?EmitABS@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3E68);
		  /* 820E3E68h */ case    0:  		/* bl -1080 */
		/* 820E3E68h case    0:*/		regs.LR = 0x820E3E6C; return 0x820E3A30;
		/* 820E3E68h case    0:*/		return 0x820E3E6C;
		  /* 820E3E6Ch */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820E3E6Ch case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E3E6Ch case    1:*/		return 0x820E3E70;
		  /* 820E3E70h */ case    2:  		/* bc 4, CR0_EQ, 216 */
		/* 820E3E70h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820E3F48;  }
		/* 820E3E70h case    2:*/		return 0x820E3E74;
		  /* 820E3E74h */ case    3:  		/* cmplw CR6, R31, R28 */
		/* 820E3E74h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 820E3E74h case    3:*/		return 0x820E3E78;
		  /* 820E3E78h */ case    4:  		/* mr R3, R21 */
		/* 820E3E78h case    4:*/		regs.R3 = regs.R21;
		/* 820E3E78h case    4:*/		return 0x820E3E7C;
		  /* 820E3E7Ch */ case    5:  		/* bc 12, CR6_LT, 188 */
		/* 820E3E7Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x820E3F38;  }
		/* 820E3E7Ch case    5:*/		return 0x820E3E80;
		  /* 820E3E80h */ case    6:  		/* lwz R11, <#[R27 + 72]> */
		/* 820E3E80h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000048) );
		/* 820E3E80h case    6:*/		return 0x820E3E84;
		  /* 820E3E84h */ case    7:  		/* mr R10, R15 */
		/* 820E3E84h case    7:*/		regs.R10 = regs.R15;
		/* 820E3E84h case    7:*/		return 0x820E3E88;
		  /* 820E3E88h */ case    8:  		/* addi R9, R1, 128 */
		/* 820E3E88h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E3E88h case    8:*/		return 0x820E3E8C;
		  /* 820E3E8Ch */ case    9:  		/* stw R14, <#[R1 + 84]> */
		/* 820E3E8Ch case    9:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000054) );
		/* 820E3E8Ch case    9:*/		return 0x820E3E90;
		  /* 820E3E90h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3E90h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3E90h case   10:*/		return 0x820E3E94;
		  /* 820E3E94h */ case   11:  		/* addi R8, R1, 368 */
		/* 820E3E94h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x170);
		/* 820E3E94h case   11:*/		return 0x820E3E98;
		  /* 820E3E98h */ case   12:  		/* addi R7, R1, 96 */
		/* 820E3E98h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E3E98h case   12:*/		return 0x820E3E9C;
		  /* 820E3E9Ch */ case   13:  		/* addi R6, R1, 144 */
		/* 820E3E9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 820E3E9Ch case   13:*/		return 0x820E3EA0;
		  /* 820E3EA0h */ case   14:  		/* mr R5, R29 */
		/* 820E3EA0h case   14:*/		regs.R5 = regs.R29;
		/* 820E3EA0h case   14:*/		return 0x820E3EA4;
		  /* 820E3EA4h */ case   15:  		/* lwzx R4, <#[R11 + R30]> */
		/* 820E3EA4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E3EA4h case   15:*/		return 0x820E3EA8;
		  /* 820E3EA8h */ case   16:  		/* bl -552 */
		/* 820E3EA8h case   16:*/		regs.LR = 0x820E3EAC; return 0x820E3C80;
		/* 820E3EA8h case   16:*/		return 0x820E3EAC;
		  /* 820E3EACh */ case   17:  		/* b 104 */
		/* 820E3EACh case   17:*/		return 0x820E3F14;
		/* 820E3EACh case   17:*/		return 0x820E3EB0;
	}
	return 0x820E3EB0;
} // Block from 820E3E68h-820E3EB0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E3EB0h
// Function '?EmitLRP@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3EB0);
		  /* 820E3EB0h */ case    0:  		/* li R11, 4 */
		/* 820E3EB0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820E3EB0h case    0:*/		return 0x820E3EB4;
		  /* 820E3EB4h */ case    1:  		/* addi R10, R31, -16 */
		/* 820E3EB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFF0);
		/* 820E3EB4h case    1:*/		return 0x820E3EB8;
		  /* 820E3EB8h */ case    2:  		/* li R8, 0 */
		/* 820E3EB8h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E3EB8h case    2:*/		return 0x820E3EBC;
		  /* 820E3EBCh */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E3EBCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E3EBCh case    3:*/		return 0x820E3EC0;
		  /* 820E3EC0h */ case    4:  		/* mr R7, R19 */
		/* 820E3EC0h case    4:*/		regs.R7 = regs.R19;
		/* 820E3EC0h case    4:*/		return 0x820E3EC4;
		  /* 820E3EC4h */ case    5:  		/* mtspr CTR, R11 */
		/* 820E3EC4h case    5:*/		regs.CTR = regs.R11;
		/* 820E3EC4h case    5:*/		return 0x820E3EC8;
		  /* 820E3EC8h */ case    6:  		/* lwz R11, <#[R7]> */
		/* 820E3EC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 820E3EC8h case    6:*/		return 0x820E3ECC;
		  /* 820E3ECCh */ case    7:  		/* cmplw CR6, R11, R20 */
		/* 820E3ECCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 820E3ECCh case    7:*/		return 0x820E3ED0;
		  /* 820E3ED0h */ case    8:  		/* bc 4, CR6_LT, 36 */
		/* 820E3ED0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x820E3EF4;  }
		/* 820E3ED0h case    8:*/		return 0x820E3ED4;
		  /* 820E3ED4h */ case    9:  		/* add R11, R26, R11 */
		/* 820E3ED4h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 820E3ED4h case    9:*/		return 0x820E3ED8;
		  /* 820E3ED8h */ case   10:  		/* add R6, R10, R8 */
		/* 820E3ED8h case   10:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R8);
		/* 820E3ED8h case   10:*/		return 0x820E3EDC;
		  /* 820E3EDCh */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3EDCh case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3EDCh case   11:*/		return 0x820E3EE0;
		  /* 820E3EE0h */ case   12:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820E3EE0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820E3EE0h case   12:*/		return 0x820E3EE4;
		  /* 820E3EE4h */ case   13:  		/* addi R5, R1, 208 */
		/* 820E3EE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820E3EE4h case   13:*/		return 0x820E3EE8;
		  /* 820E3EE8h */ case   14:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E3EE8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E3EE8h case   14:*/		return 0x820E3EEC;
		  /* 820E3EECh */ case   15:  		/* stwx R11, <#[R6 + R5]> */
		/* 820E3EECh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 820E3EECh case   15:*/		return 0x820E3EF0;
		  /* 820E3EF0h */ case   16:  		/* b 24 */
		/* 820E3EF0h case   16:*/		return 0x820E3F08;
		/* 820E3EF0h case   16:*/		return 0x820E3EF4;
	}
	return 0x820E3EF4;
} // Block from 820E3EB0h-820E3EF4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820E3EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3EF4);
		  /* 820E3EF4h */ case    0:  		/* add R11, R10, R8 */
		/* 820E3EF4h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R8);
		/* 820E3EF4h case    0:*/		return 0x820E3EF8;
		  /* 820E3EF8h */ case    1:  		/* addi R6, R1, 208 */
		/* 820E3EF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD0);
		/* 820E3EF8h case    1:*/		return 0x820E3EFC;
		  /* 820E3EFCh */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3EFCh case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3EFCh case    2:*/		return 0x820E3F00;
	}
	return 0x820E3F00;
} // Block from 820E3EF4h-820E3F00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F00h
// Function '?EmitNRM@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F00);
		  /* 820E3F00h */ case    0:  		/* li R5, -1 */
		/* 820E3F00h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xFFFFFFFF);
		/* 820E3F00h case    0:*/		return 0x820E3F04;
		  /* 820E3F04h */ case    1:  		/* stwx R5, <#[R11 + R6]> */
		/* 820E3F04h case    1:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820E3F04h case    1:*/		return 0x820E3F08;
	}
	return 0x820E3F08;
} // Block from 820E3F00h-820E3F08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F08);
		  /* 820E3F08h */ case    0:  		/* addi R8, R8, 1 */
		/* 820E3F08h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E3F08h case    0:*/		return 0x820E3F0C;
		  /* 820E3F0Ch */ case    1:  		/* addi R7, R7, 4 */
		/* 820E3F0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 820E3F0Ch case    1:*/		return 0x820E3F10;
		  /* 820E3F10h */ case    2:  		/* bc 16, CR0_LT, -72 */
		/* 820E3F10h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E3EC8;  }
		/* 820E3F10h case    2:*/		return 0x820E3F14;
	}
	return 0x820E3F14;
} // Block from 820E3F08h-820E3F14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F14);
		  /* 820E3F14h */ case    0:  		/* cmpwi CR6, R3, 1 */
		/* 820E3F14h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E3F14h case    0:*/		return 0x820E3F18;
		  /* 820E3F18h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 820E3F18h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E3F4C;  }
		/* 820E3F18h case    1:*/		return 0x820E3F1C;
		  /* 820E3F1Ch */ case    2:  		/* lwz R11, <#[R22 + 8]> */
		/* 820E3F1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 820E3F1Ch case    2:*/		return 0x820E3F20;
		  /* 820E3F20h */ case    3:  		/* addi R24, R24, 1 */
		/* 820E3F20h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 820E3F20h case    3:*/		return 0x820E3F24;
		  /* 820E3F24h */ case    4:  		/* add R26, R26, R20 */
		/* 820E3F24h case    4:*/		cpu::op::add<0>(regs,&regs.R26,regs.R26,regs.R20);
		/* 820E3F24h case    4:*/		return 0x820E3F28;
		  /* 820E3F28h */ case    5:  		/* add R25, R23, R25 */
		/* 820E3F28h case    5:*/		cpu::op::add<0>(regs,&regs.R25,regs.R23,regs.R25);
		/* 820E3F28h case    5:*/		return 0x820E3F2C;
		  /* 820E3F2Ch */ case    6:  		/* cmplw CR6, R24, R11 */
		/* 820E3F2Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 820E3F2Ch case    6:*/		return 0x820E3F30;
		  /* 820E3F30h */ case    7:  		/* bc 12, CR6_LT, -344 */
		/* 820E3F30h case    7:*/		if ( regs.CR[6].lt ) { return 0x820E3DD8;  }
		/* 820E3F30h case    7:*/		return 0x820E3F34;
		  /* 820E3F34h */ case    8:  		/* b 24 */
		/* 820E3F34h case    8:*/		return 0x820E3F4C;
		/* 820E3F34h case    8:*/		return 0x820E3F38;
	}
	return 0x820E3F38;
} // Block from 820E3F14h-820E3F38h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F38);
		  /* 820E3F38h */ case    0:  		/* li R5, 0 */
		/* 820E3F38h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E3F38h case    0:*/		return 0x820E3F3C;
		  /* 820E3F3Ch */ case    1:  		/* lwz R6, <#[R1 + 108]> */
		/* 820E3F3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E3F3Ch case    1:*/		return 0x820E3F40;
		  /* 820E3F40h */ case    2:  		/* li R4, 0 */
		/* 820E3F40h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3F40h case    2:*/		return 0x820E3F44;
		  /* 820E3F44h */ case    3:  		/* bl 174060 */
		/* 820E3F44h case    3:*/		regs.LR = 0x820E3F48; return 0x8210E730;
		/* 820E3F44h case    3:*/		return 0x820E3F48;
	}
	return 0x820E3F48;
} // Block from 820E3F38h-820E3F48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F48h
// Function '?EmitMAD@C30SWProgramML@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F48);
		  /* 820E3F48h */ case    0:  		/* li R3, 1 */
		/* 820E3F48h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E3F48h case    0:*/		return 0x820E3F4C;
	}
	return 0x820E3F4C;
} // Block from 820E3F48h-820E3F4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F4C);
		  /* 820E3F4Ch */ case    0:  		/* lwz R31, <#[R1 + 96]> */
		/* 820E3F4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E3F4Ch case    0:*/		return 0x820E3F50;
	}
	return 0x820E3F50;
} // Block from 820E3F4Ch-820E3F50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F50);
		  /* 820E3F50h */ case    0:  		/* lwz R29, <#[R22 + 8]> */
		/* 820E3F50h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R22 + 0x00000008) );
		/* 820E3F50h case    0:*/		return 0x820E3F54;
		  /* 820E3F54h */ case    1:  		/* li R5, 0 */
		/* 820E3F54h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E3F54h case    1:*/		return 0x820E3F58;
		  /* 820E3F58h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 820E3F58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E3F58h case    2:*/		return 0x820E3F5C;
		  /* 820E3F5Ch */ case    3:  		/* bc 12, CR6_EQ, 188 */
		/* 820E3F5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E4018;  }
		/* 820E3F5Ch case    3:*/		return 0x820E3F60;
		  /* 820E3F60h */ case    4:  		/* li R4, 0 */
		/* 820E3F60h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E3F60h case    4:*/		return 0x820E3F64;
		  /* 820E3F64h */ case    5:  		/* cmplwi CR6, R17, 0 */
		/* 820E3F64h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 820E3F64h case    5:*/		return 0x820E3F68;
		  /* 820E3F68h */ case    6:  		/* subfic R11, R5, 1 */
		/* 820E3F68h case    6:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R5,0x1);
		/* 820E3F68h case    6:*/		return 0x820E3F6C;
		  /* 820E3F6Ch */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 820E3F6Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E3F74;  }
		/* 820E3F6Ch case    7:*/		return 0x820E3F70;
		  /* 820E3F70h */ case    8:  		/* mr R11, R5 */
		/* 820E3F70h case    8:*/		regs.R11 = regs.R5;
		/* 820E3F70h case    8:*/		return 0x820E3F74;
	}
	return 0x820E3F74;
} // Block from 820E3F50h-820E3F74h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F74);
		  /* 820E3F74h */ case    0:  		/* addi R11, R11, 3 */
		/* 820E3F74h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 820E3F74h case    0:*/		return 0x820E3F78;
		  /* 820E3F78h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E3F78h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E3F78h case    1:*/		return 0x820E3F7C;
		  /* 820E3F7Ch */ case    2:  		/* lwzx R11, <#[R11 + R22]> */
		/* 820E3F7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 820E3F7Ch case    2:*/		return 0x820E3F80;
		  /* 820E3F80h */ case    3:  		/* cmplwi CR6, R11, 16 */
		/* 820E3F80h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 820E3F80h case    3:*/		return 0x820E3F84;
		  /* 820E3F84h */ case    4:  		/* bc 12, CR6_LT, 132 */
		/* 820E3F84h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E4008;  }
		/* 820E3F84h case    4:*/		return 0x820E3F88;
		  /* 820E3F88h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 820E3F88h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E3F88h case    5:*/		return 0x820E3F8C;
		  /* 820E3F8Ch */ case    6:  		/* bc 12, CR6_EQ, 124 */
		/* 820E3F8Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x820E4008;  }
		/* 820E3F8Ch case    6:*/		return 0x820E3F90;
	}
	return 0x820E3F90;
} // Block from 820E3F74h-820E3F90h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E3F90h
// Function '?EmitDST@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3F90);
		  /* 820E3F90h */ case    0:  		/* addi R30, R1, 144 */
		/* 820E3F90h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x90);
		/* 820E3F90h case    0:*/		return 0x820E3F94;
		  /* 820E3F94h */ case    1:  		/* mtspr CTR, R31 */
		/* 820E3F94h case    1:*/		regs.CTR = regs.R31;
		/* 820E3F94h case    1:*/		return 0x820E3F98;
		  /* 820E3F98h */ case    2:  		/* li R9, 0 */
		/* 820E3F98h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E3F98h case    2:*/		return 0x820E3F9C;
		  /* 820E3F9Ch */ case    3:  		/* cmplwi CR6, R20, 0 */
		/* 820E3F9Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820E3F9Ch case    3:*/		return 0x820E3FA0;
		  /* 820E3FA0h */ case    4:  		/* bc 12, CR6_EQ, 96 */
		/* 820E3FA0h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E4000;  }
		/* 820E3FA0h case    4:*/		return 0x820E3FA4;
		  /* 820E3FA4h */ case    5:  		/* lwz R6, <#[R30]> */
		/* 820E3FA4h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 820E3FA4h case    5:*/		return 0x820E3FA8;
		  /* 820E3FA8h */ case    6:  		/* lwz R7, <#[R6 + 12]> */
		/* 820E3FA8h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x0000000C) );
		/* 820E3FA8h case    6:*/		return 0x820E3FAC;
		  /* 820E3FACh */ case    7:  		/* li R8, 0 */
		/* 820E3FACh case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E3FACh case    7:*/		return 0x820E3FB0;
		  /* 820E3FB0h */ case    8:  		/* cmplwi CR6, R7, 0 */
		/* 820E3FB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820E3FB0h case    8:*/		return 0x820E3FB4;
		  /* 820E3FB4h */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 820E3FB4h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E3FEC;  }
		/* 820E3FB4h case    9:*/		return 0x820E3FB8;
		  /* 820E3FB8h */ case   10:  		/* add R10, R4, R9 */
		/* 820E3FB8h case   10:*/		cpu::op::add<0>(regs,&regs.R10,regs.R4,regs.R9);
		/* 820E3FB8h case   10:*/		return 0x820E3FBC;
		  /* 820E3FBCh */ case   11:  		/* lwz R28, <#[R18 + 8]> */
		/* 820E3FBCh case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R18 + 0x00000008) );
		/* 820E3FBCh case   11:*/		return 0x820E3FC0;
		  /* 820E3FC0h */ case   12:  		/* li R11, 0 */
		/* 820E3FC0h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E3FC0h case   12:*/		return 0x820E3FC4;
		  /* 820E3FC4h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E3FC4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E3FC4h case   13:*/		return 0x820E3FC8;
		  /* 820E3FC8h */ case   14:  		/* lwzx R10, <#[R10 + R28]> */
		/* 820E3FC8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R28 + 0x00000000) );
		/* 820E3FC8h case   14:*/		return 0x820E3FCC;
		  /* 820E3FCCh */ case   15:  		/* lwz R28, <#[R6 + 16]> */
		/* 820E3FCCh case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R6 + 0x00000010) );
		/* 820E3FCCh case   15:*/		return 0x820E3FD0;
		  /* 820E3FD0h */ case   16:  		/* lwzx R28, <#[R28 + R11]> */
		/* 820E3FD0h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 820E3FD0h case   16:*/		return 0x820E3FD4;
		  /* 820E3FD4h */ case   17:  		/* cmplw CR6, R10, R28 */
		/* 820E3FD4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 820E3FD4h case   17:*/		return 0x820E3FD8;
		  /* 820E3FD8h */ case   18:  		/* bc 12, CR6_EQ, 36 */
		/* 820E3FD8h case   18:*/		if ( regs.CR[6].eq ) { return 0x820E3FFC;  }
		/* 820E3FD8h case   18:*/		return 0x820E3FDC;
		  /* 820E3FDCh */ case   19:  		/* addi R8, R8, 1 */
		/* 820E3FDCh case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E3FDCh case   19:*/		return 0x820E3FE0;
	}
	return 0x820E3FE0;
} // Block from 820E3F90h-820E3FE0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E3FE0h
// Function '?EmitMAT@C30SWProgramCI@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3FE0);
		  /* 820E3FE0h */ case    0:  		/* addi R11, R11, 4 */
		/* 820E3FE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E3FE0h case    0:*/		return 0x820E3FE4;
		  /* 820E3FE4h */ case    1:  		/* cmplw CR6, R8, R7 */
		/* 820E3FE4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820E3FE4h case    1:*/		return 0x820E3FE8;
		  /* 820E3FE8h */ case    2:  		/* bc 12, CR6_LT, -28 */
		/* 820E3FE8h case    2:*/		if ( regs.CR[6].lt ) { return 0x820E3FCC;  }
		/* 820E3FE8h case    2:*/		return 0x820E3FEC;
	}
	return 0x820E3FEC;
} // Block from 820E3FE0h-820E3FECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E3FECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3FEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3FEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3FEC);
		  /* 820E3FECh */ case    0:  		/* addi R9, R9, 1 */
		/* 820E3FECh case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E3FECh case    0:*/		return 0x820E3FF0;
		  /* 820E3FF0h */ case    1:  		/* cmplw CR6, R9, R20 */
		/* 820E3FF0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R20);
		/* 820E3FF0h case    1:*/		return 0x820E3FF4;
		  /* 820E3FF4h */ case    2:  		/* bc 12, CR6_LT, -72 */
		/* 820E3FF4h case    2:*/		if ( regs.CR[6].lt ) { return 0x820E3FAC;  }
		/* 820E3FF4h case    2:*/		return 0x820E3FF8;
		  /* 820E3FF8h */ case    3:  		/* b 8 */
		/* 820E3FF8h case    3:*/		return 0x820E4000;
		/* 820E3FF8h case    3:*/		return 0x820E3FFC;
	}
	return 0x820E3FFC;
} // Block from 820E3FECh-820E3FFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E3FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E3FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E3FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E3FFC);
		  /* 820E3FFCh */ case    0:  		/* li R3, 1 */
		/* 820E3FFCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E3FFCh case    0:*/		return 0x820E4000;
	}
	return 0x820E4000;
} // Block from 820E3FFCh-820E4000h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E4000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4000);
		  /* 820E4000h */ case    0:  		/* addi R30, R30, 4 */
		/* 820E4000h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E4000h case    0:*/		return 0x820E4004;
		  /* 820E4004h */ case    1:  		/* bc 16, CR0_LT, -108 */
		/* 820E4004h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E3F98;  }
		/* 820E4004h case    1:*/		return 0x820E4008;
	}
	return 0x820E4008;
} // Block from 820E4000h-820E4008h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E4008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4008);
		  /* 820E4008h */ case    0:  		/* addi R5, R5, 1 */
		/* 820E4008h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820E4008h case    0:*/		return 0x820E400C;
		  /* 820E400Ch */ case    1:  		/* add R4, R4, R20 */
		/* 820E400Ch case    1:*/		cpu::op::add<0>(regs,&regs.R4,regs.R4,regs.R20);
		/* 820E400Ch case    1:*/		return 0x820E4010;
		  /* 820E4010h */ case    2:  		/* cmplw CR6, R5, R29 */
		/* 820E4010h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R29);
		/* 820E4010h case    2:*/		return 0x820E4014;
		  /* 820E4014h */ case    3:  		/* bc 12, CR6_LT, -176 */
		/* 820E4014h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E3F64;  }
		/* 820E4014h case    3:*/		return 0x820E4018;
	}
	return 0x820E4018;
} // Block from 820E4008h-820E4018h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E4018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4018);
		  /* 820E4018h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E4018h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E4018h case    0:*/		return 0x820E401C;
		  /* 820E401Ch */ case    1:  		/* bc 4, CR6_EQ, 464 */
		/* 820E401Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E41EC;  }
		/* 820E401Ch case    1:*/		return 0x820E4020;
		  /* 820E4020h */ case    2:  		/* lwz R11, <#[R1 + 100]> */
		/* 820E4020h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 820E4020h case    2:*/		return 0x820E4024;
		  /* 820E4024h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820E4024h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4024h case    3:*/		return 0x820E4028;
		  /* 820E4028h */ case    4:  		/* bc 4, CR6_EQ, 508 */
		/* 820E4028h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E4224;  }
		/* 820E4028h case    4:*/		return 0x820E402C;
		  /* 820E402Ch */ case    5:  		/* lwz R11, <#[R22]> */
		/* 820E402Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 820E402Ch case    5:*/		return 0x820E4030;
	}
	return 0x820E4030;
} // Block from 820E4018h-820E4030h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E4030h
// Function '?ComparePool@D3DXShader@@YAHIIPBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4030);
		  /* 820E4030h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820E4030h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4030h case    0:*/		return 0x820E4034;
		  /* 820E4034h */ case    1:  		/* bc 4, CR6_EQ, 496 */
		/* 820E4034h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E4224;  }
		/* 820E4034h case    1:*/		return 0x820E4038;
		  /* 820E4038h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 820E4038h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E4038h case    2:*/		return 0x820E403C;
		  /* 820E403Ch */ case    3:  		/* bc 12, CR6_EQ, 284 */
		/* 820E403Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E4158;  }
		/* 820E403Ch case    3:*/		return 0x820E4040;
		  /* 820E4040h */ case    4:  		/* addi R24, R1, 144 */
		/* 820E4040h case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R1,0x90);
		/* 820E4040h case    4:*/		return 0x820E4044;
		  /* 820E4044h */ case    5:  		/* mr R23, R31 */
		/* 820E4044h case    5:*/		regs.R23 = regs.R31;
		/* 820E4044h case    5:*/		return 0x820E4048;
		  /* 820E4048h */ case    6:  		/* lwz R25, <#[R24]> */
		/* 820E4048h case    6:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R24 + 0x00000000) );
		/* 820E4048h case    6:*/		return 0x820E404C;
		  /* 820E404Ch */ case    7:  		/* lwz R11, <#[R25 + 12]> */
		/* 820E404Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 820E404Ch case    7:*/		return 0x820E4050;
		  /* 820E4050h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820E4050h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4050h case    8:*/		return 0x820E4054;
		  /* 820E4054h */ case    9:  		/* bc 12, CR6_EQ, 248 */
		/* 820E4054h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E414C;  }
		/* 820E4054h case    9:*/		return 0x820E4058;
		  /* 820E4058h */ case   10:  		/* lwz R27, <#[R21 + 12]> */
		/* 820E4058h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R21 + 0x0000000C) );
		/* 820E4058h case   10:*/		return 0x820E405C;
		  /* 820E405Ch */ case   11:  		/* li R30, 0 */
		/* 820E405Ch case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E405Ch case   11:*/		return 0x820E4060;
		  /* 820E4060h */ case   12:  		/* mr R26, R11 */
		/* 820E4060h case   12:*/		regs.R26 = regs.R11;
		/* 820E4060h case   12:*/		return 0x820E4064;
		  /* 820E4064h */ case   13:  		/* cmplwi CR6, R27, 0 */
		/* 820E4064h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820E4064h case   13:*/		return 0x820E4068;
		  /* 820E4068h */ case   14:  		/* bc 12, CR6_EQ, 216 */
		/* 820E4068h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E4140;  }
		/* 820E4068h case   14:*/		return 0x820E406C;
		  /* 820E406Ch */ case   15:  		/* lwz R29, <#[R21 + 24]> */
		/* 820E406Ch case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R21 + 0x00000018) );
		/* 820E406Ch case   15:*/		return 0x820E4070;
		  /* 820E4070h */ case   16:  		/* mr R28, R27 */
		/* 820E4070h case   16:*/		regs.R28 = regs.R27;
		/* 820E4070h case   16:*/		return 0x820E4074;
		  /* 820E4074h */ case   17:  		/* lwz R9, <#[R29]> */
		/* 820E4074h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 820E4074h case   17:*/		return 0x820E4078;
		  /* 820E4078h */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 820E4078h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820E4078h case   18:*/		return 0x820E407C;
		  /* 820E407Ch */ case   19:  		/* bc 12, CR6_EQ, 184 */
		/* 820E407Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x820E4134;  }
		/* 820E407Ch case   19:*/		return 0x820E4080;
	}
	return 0x820E4080;
} // Block from 820E4030h-820E4080h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E4080h
// Function '?CompareVariable@D3DXShader@@YAHIIPBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4080);
		  /* 820E4080h */ case    0:  		/* lwz R11, <#[R9]> */
		/* 820E4080h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820E4080h case    0:*/		return 0x820E4084;
		  /* 820E4084h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E4084h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4084h case    1:*/		return 0x820E4088;
		  /* 820E4088h */ case    2:  		/* bc 12, CR6_EQ, 172 */
		/* 820E4088h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E4134;  }
		/* 820E4088h case    2:*/		return 0x820E408C;
		  /* 820E408Ch */ case    3:  		/* lwz R5, <#[R9 + 4]> */
		/* 820E408Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000004) );
		/* 820E408Ch case    3:*/		return 0x820E4090;
		  /* 820E4090h */ case    4:  		/* li R4, 0 */
		/* 820E4090h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E4090h case    4:*/		return 0x820E4094;
		  /* 820E4094h */ case    5:  		/* li R6, 0 */
		/* 820E4094h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E4094h case    5:*/		return 0x820E4098;
		  /* 820E4098h */ case    6:  		/* cmplwi CR6, R5, 0 */
		/* 820E4098h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E4098h case    6:*/		return 0x820E409C;
		  /* 820E409Ch */ case    7:  		/* bc 12, CR6_EQ, 80 */
		/* 820E409Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820E40EC;  }
		/* 820E409Ch case    7:*/		return 0x820E40A0;
		  /* 820E40A0h */ case    8:  		/* lwz R10, <#[R25 + 16]> */
		/* 820E40A0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000010) );
		/* 820E40A0h case    8:*/		return 0x820E40A4;
		  /* 820E40A4h */ case    9:  		/* li R11, 0 */
		/* 820E40A4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E40A4h case    9:*/		return 0x820E40A8;
		  /* 820E40A8h */ case   10:  		/* lwz R7, <#[R9 + 8]> */
		/* 820E40A8h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000008) );
		/* 820E40A8h case   10:*/		return 0x820E40AC;
		  /* 820E40ACh */ case   11:  		/* lwzx R8, <#[R10 + R30]> */
		/* 820E40ACh case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820E40ACh case   11:*/		return 0x820E40B0;
		  /* 820E40B0h */ case   12:  		/* lwzx R10, <#[R7 + R11]> */
		/* 820E40B0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820E40B0h case   12:*/		return 0x820E40B4;
		  /* 820E40B4h */ case   13:  		/* cmplw CR6, R10, R8 */
		/* 820E40B4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E40B4h case   13:*/		return 0x820E40B8;
		  /* 820E40B8h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 820E40B8h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E40D8;  }
		/* 820E40B8h case   14:*/		return 0x820E40BC;
		  /* 820E40BCh */ case   15:  		/* lwz R14, <#[R21 + 20]> */
		/* 820E40BCh case   15:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R21 + 0x00000014) );
		/* 820E40BCh case   15:*/		return 0x820E40C0;
		  /* 820E40C0h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E40C0h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E40C0h case   16:*/		return 0x820E40C4;
		  /* 820E40C4h */ case   17:  		/* lwzx R10, <#[R10 + R14]> */
		/* 820E40C4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R14 + 0x00000000) );
		/* 820E40C4h case   17:*/		return 0x820E40C8;
		  /* 820E40C8h */ case   18:  		/* lwz R14, <#[R1 + 772]> */
		/* 820E40C8h case   18:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000304) );
		/* 820E40C8h case   18:*/		return 0x820E40CC;
		  /* 820E40CCh */ case   19:  		/* lwz R10, <#[R10 + 56]> */
		/* 820E40CCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 820E40CCh case   19:*/		return 0x820E40D0;
		  /* 820E40D0h */ case   20:  		/* cmplw CR6, R10, R8 */
		/* 820E40D0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E40D0h case   20:*/		return 0x820E40D4;
		  /* 820E40D4h */ case   21:  		/* bc 4, CR6_EQ, 8 */
		/* 820E40D4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x820E40DC;  }
		/* 820E40D4h case   21:*/		return 0x820E40D8;
	}
	return 0x820E40D8;
} // Block from 820E4080h-820E40D8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E40D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E40D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E40D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E40D8);
		  /* 820E40D8h */ case    0:  		/* li R4, 1 */
		/* 820E40D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820E40D8h case    0:*/		return 0x820E40DC;
	}
	return 0x820E40DC;
} // Block from 820E40D8h-820E40DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E40DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E40DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E40DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E40DC);
		  /* 820E40DCh */ case    0:  		/* addi R6, R6, 1 */
		/* 820E40DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820E40DCh case    0:*/		return 0x820E40E0;
		  /* 820E40E0h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E40E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E40E0h case    1:*/		return 0x820E40E4;
		  /* 820E40E4h */ case    2:  		/* cmplw CR6, R6, R5 */
		/* 820E40E4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 820E40E4h case    2:*/		return 0x820E40E8;
		  /* 820E40E8h */ case    3:  		/* bc 12, CR6_LT, -56 */
		/* 820E40E8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E40B0;  }
		/* 820E40E8h case    3:*/		return 0x820E40EC;
	}
	return 0x820E40EC;
} // Block from 820E40DCh-820E40ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E40ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E40EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E40EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E40EC);
		  /* 820E40ECh */ case    0:  		/* subf R11, R9, R18 */
		/* 820E40ECh case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R18);
		/* 820E40ECh case    0:*/		return 0x820E40F0;
		  /* 820E40F0h */ case    1:  		/* subfic R11, R11, 0 */
		/* 820E40F0h case    1:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 820E40F0h case    1:*/		return 0x820E40F4;
		  /* 820E40F4h */ case    2:  		/* subfe R11, R11, R11 */
		/* 820E40F4h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820E40F4h case    2:*/		return 0x820E40F8;
		  /* 820E40F8h */ case    3:  		/* and R11, R11, R4 */
		/* 820E40F8h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 820E40F8h case    3:*/		return 0x820E40FC;
		  /* 820E40FCh */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 820E40FCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820E40FCh case    4:*/		return 0x820E4100;
		  /* 820E4100h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 820E4100h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E4134;  }
		/* 820E4100h case    5:*/		return 0x820E4104;
		  /* 820E4104h */ case    6:  		/* addi R10, R1, 144 */
		/* 820E4104h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 820E4104h case    6:*/		return 0x820E4108;
		  /* 820E4108h */ case    7:  		/* mtspr CTR, R31 */
		/* 820E4108h case    7:*/		regs.CTR = regs.R31;
		/* 820E4108h case    7:*/		return 0x820E410C;
		  /* 820E410Ch */ case    8:  		/* lwz R8, <#[R10]> */
		/* 820E410Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820E410Ch case    8:*/		return 0x820E4110;
		  /* 820E4110h */ case    9:  		/* addi R10, R10, 4 */
		/* 820E4110h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E4110h case    9:*/		return 0x820E4114;
		  /* 820E4114h */ case   10:  		/* subf R8, R9, R8 */
		/* 820E4114h case   10:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 820E4114h case   10:*/		return 0x820E4118;
		  /* 820E4118h */ case   11:  		/* subfic R8, R8, 0 */
		/* 820E4118h case   11:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R8,0x0);
		/* 820E4118h case   11:*/		return 0x820E411C;
		  /* 820E411Ch */ case   12:  		/* subfe R8, R8, R8 */
		/* 820E411Ch case   12:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 820E411Ch case   12:*/		return 0x820E4120;
		  /* 820E4120h */ case   13:  		/* and R11, R8, R11 */
		/* 820E4120h case   13:*/		cpu::op::and<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820E4120h case   13:*/		return 0x820E4124;
		  /* 820E4124h */ case   14:  		/* bc 16, CR0_LT, -24 */
		/* 820E4124h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E410C;  }
		/* 820E4124h case   14:*/		return 0x820E4128;
		  /* 820E4128h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 820E4128h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820E4128h case   15:*/		return 0x820E412C;
		  /* 820E412Ch */ case   16:  		/* bc 12, CR6_EQ, 8 */
		/* 820E412Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x820E4134;  }
		/* 820E412Ch case   16:*/		return 0x820E4130;
		  /* 820E4130h */ case   17:  		/* li R3, 1 */
		/* 820E4130h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E4130h case   17:*/		return 0x820E4134;
	}
	return 0x820E4134;
} // Block from 820E40ECh-820E4134h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E4134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4134);
		  /* 820E4134h */ case    0:  		/* addic. R28, R28, -1 */
		/* 820E4134h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 820E4134h case    0:*/		return 0x820E4138;
		  /* 820E4138h */ case    1:  		/* addi R29, R29, 4 */
		/* 820E4138h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820E4138h case    1:*/		return 0x820E413C;
		  /* 820E413Ch */ case    2:  		/* bc 4, CR0_EQ, -200 */
		/* 820E413Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x820E4074;  }
		/* 820E413Ch case    2:*/		return 0x820E4140;
	}
	return 0x820E4140;
} // Block from 820E4134h-820E4140h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E4140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4140);
		  /* 820E4140h */ case    0:  		/* addic. R26, R26, -1 */
		/* 820E4140h case    0:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 820E4140h case    0:*/		return 0x820E4144;
		  /* 820E4144h */ case    1:  		/* addi R30, R30, 4 */
		/* 820E4144h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E4144h case    1:*/		return 0x820E4148;
		  /* 820E4148h */ case    2:  		/* bc 4, CR0_EQ, -228 */
		/* 820E4148h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820E4064;  }
		/* 820E4148h case    2:*/		return 0x820E414C;
	}
	return 0x820E414C;
} // Block from 820E4140h-820E414Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E414Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E414C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E414C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E414C);
		  /* 820E414Ch */ case    0:  		/* addic. R23, R23, -1 */
		/* 820E414Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R23,regs.R23,0xFFFFFFFF);
		/* 820E414Ch case    0:*/		return 0x820E4150;
		  /* 820E4150h */ case    1:  		/* addi R24, R24, 4 */
		/* 820E4150h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 820E4150h case    1:*/		return 0x820E4154;
		  /* 820E4154h */ case    2:  		/* bc 4, CR0_EQ, -268 */
		/* 820E4154h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820E4048;  }
		/* 820E4154h case    2:*/		return 0x820E4158;
	}
	return 0x820E4158;
} // Block from 820E414Ch-820E4158h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E4158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4158);
		  /* 820E4158h */ case    0:  		/* addi R30, R1, 208 */
		/* 820E4158h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xD0);
		/* 820E4158h case    0:*/		return 0x820E415C;
		  /* 820E415Ch */ case    1:  		/* li R29, 40 */
		/* 820E415Ch case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x28);
		/* 820E415Ch case    1:*/		return 0x820E4160;
		  /* 820E4160h */ case    2:  		/* lwz R5, <#[R30]> */
		/* 820E4160h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 820E4160h case    2:*/		return 0x820E4164;
		  /* 820E4164h */ case    3:  		/* cmpwi CR6, R5, -1 */
		/* 820E4164h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 820E4164h case    3:*/		return 0x820E4168;
		  /* 820E4168h */ case    4:  		/* bc 12, CR6_EQ, 112 */
		/* 820E4168h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E41D8;  }
		/* 820E4168h case    4:*/		return 0x820E416C;
		  /* 820E416Ch */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 820E416Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E416Ch case    5:*/		return 0x820E4170;
		  /* 820E4170h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 820E4170h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E41D8;  }
		/* 820E4170h case    6:*/		return 0x820E4174;
		  /* 820E4174h */ case    7:  		/* lwz R11, <#[R21 + 20]> */
		/* 820E4174h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 820E4174h case    7:*/		return 0x820E4178;
		  /* 820E4178h */ case    8:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 820E4178h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 820E4178h case    8:*/		return 0x820E417C;
		  /* 820E417Ch */ case    9:  		/* mtspr CTR, R31 */
		/* 820E417Ch case    9:*/		regs.CTR = regs.R31;
		/* 820E417Ch case    9:*/		return 0x820E4180;
		  /* 820E4180h */ case   10:  		/* addi R6, R1, 144 */
		/* 820E4180h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 820E4180h case   10:*/		return 0x820E4184;
		  /* 820E4184h */ case   11:  		/* lwzx R4, <#[R10 + R11]> */
		/* 820E4184h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E4184h case   11:*/		return 0x820E4188;
		  /* 820E4188h */ case   12:  		/* lwz R9, <#[R6]> */
		/* 820E4188h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 820E4188h case   12:*/		return 0x820E418C;
		  /* 820E418Ch */ case   13:  		/* li R8, 0 */
		/* 820E418Ch case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E418Ch case   13:*/		return 0x820E4190;
	}
	return 0x820E4190;
} // Block from 820E4158h-820E4190h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E4190h
// Function '?MakeSemantic@CShaderProgram@D3DXShader@@MAAKKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4190);
		  /* 820E4190h */ case    0:  		/* lwz R7, <#[R9 + 12]> */
		/* 820E4190h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x0000000C) );
		/* 820E4190h case    0:*/		return 0x820E4194;
		  /* 820E4194h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 820E4194h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820E4194h case    1:*/		return 0x820E4198;
		  /* 820E4198h */ case    2:  		/* bc 12, CR6_EQ, 56 */
		/* 820E4198h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E41D0;  }
		/* 820E4198h case    2:*/		return 0x820E419C;
		  /* 820E419Ch */ case    3:  		/* li R10, 0 */
		/* 820E419Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E419Ch case    3:*/		return 0x820E41A0;
		  /* 820E41A0h */ case    4:  		/* lwz R11, <#[R9 + 16]> */
		/* 820E41A0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 820E41A0h case    4:*/		return 0x820E41A4;
		  /* 820E41A4h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E41A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E41A4h case    5:*/		return 0x820E41A8;
	}
	return 0x820E41A8;
} // Block from 820E4190h-820E41A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E41A8h
// Function '?SemanticType@CShaderProgram@D3DXShader@@MAAKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E41A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E41A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E41A8);
		  /* 820E41A8h */ case    0:  		/* cmplw CR6, R5, R11 */
		/* 820E41A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 820E41A8h case    0:*/		return 0x820E41AC;
		  /* 820E41ACh */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 820E41ACh case    1:*/		if ( regs.CR[6].eq ) { return 0x820E41BC;  }
		/* 820E41ACh case    1:*/		return 0x820E41B0;
		  /* 820E41B0h */ case    2:  		/* lwz R28, <#[R4 + 56]> */
		/* 820E41B0h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000038) );
		/* 820E41B0h case    2:*/		return 0x820E41B4;
		  /* 820E41B4h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 820E41B4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 820E41B4h case    3:*/		return 0x820E41B8;
	}
	return 0x820E41B8;
} // Block from 820E41A8h-820E41B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E41B8h
// Function '?SemanticIndex@CShaderProgram@D3DXShader@@MAAKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E41B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E41B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E41B8);
		  /* 820E41B8h */ case    0:  		/* bc 4, CR6_EQ, 8 */
		/* 820E41B8h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820E41C0;  }
		/* 820E41B8h case    0:*/		return 0x820E41BC;
	}
	return 0x820E41BC;
} // Block from 820E41B8h-820E41BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E41BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E41BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E41BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E41BC);
		  /* 820E41BCh */ case    0:  		/* li R3, 1 */
		/* 820E41BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E41BCh case    0:*/		return 0x820E41C0;
	}
	return 0x820E41C0;
} // Block from 820E41BCh-820E41C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E41C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E41C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E41C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E41C0);
		  /* 820E41C0h */ case    0:  		/* addi R8, R8, 1 */
		/* 820E41C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E41C0h case    0:*/		return 0x820E41C4;
		  /* 820E41C4h */ case    1:  		/* addi R10, R10, 4 */
		/* 820E41C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E41C4h case    1:*/		return 0x820E41C8;
		  /* 820E41C8h */ case    2:  		/* cmplw CR6, R8, R7 */
		/* 820E41C8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820E41C8h case    2:*/		return 0x820E41CC;
		  /* 820E41CCh */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 820E41CCh case    3:*/		if ( regs.CR[6].lt ) { return 0x820E41A0;  }
		/* 820E41CCh case    3:*/		return 0x820E41D0;
	}
	return 0x820E41D0;
} // Block from 820E41C0h-820E41D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E41D0h
// Function '?ComputeSwizzle@CShaderProgram@D3DXShader@@IAAJPAVCInstruction@2@PAII11IH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E41D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E41D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E41D0);
		  /* 820E41D0h */ case    0:  		/* addi R6, R6, 4 */
		/* 820E41D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 820E41D0h case    0:*/		return 0x820E41D4;
		  /* 820E41D4h */ case    1:  		/* bc 16, CR0_LT, -76 */
		/* 820E41D4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E4188;  }
		/* 820E41D4h case    1:*/		return 0x820E41D8;
	}
	return 0x820E41D8;
} // Block from 820E41D0h-820E41D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E41D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E41D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E41D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E41D8);
		  /* 820E41D8h */ case    0:  		/* addic. R29, R29, -1 */
		/* 820E41D8h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 820E41D8h case    0:*/		return 0x820E41DC;
		  /* 820E41DCh */ case    1:  		/* addi R30, R30, 4 */
		/* 820E41DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E41DCh case    1:*/		return 0x820E41E0;
		  /* 820E41E0h */ case    2:  		/* bc 4, CR0_EQ, -128 */
		/* 820E41E0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820E4160;  }
		/* 820E41E0h case    2:*/		return 0x820E41E4;
		  /* 820E41E4h */ case    3:  		/* cmpwi CR6, R3, 0 */
		/* 820E41E4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E41E4h case    3:*/		return 0x820E41E8;
		  /* 820E41E8h */ case    4:  		/* bc 12, CR6_EQ, 60 */
		/* 820E41E8h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E4224;  }
		/* 820E41E8h case    4:*/		return 0x820E41EC;
	}
	return 0x820E41EC;
} // Block from 820E41D8h-820E41ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E41ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E41EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E41EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E41EC);
		  /* 820E41ECh */ case    0:  		/* lwz R11, <#[R22 + 28]> */
		/* 820E41ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000001C) );
		/* 820E41ECh case    0:*/		return 0x820E41F0;
		  /* 820E41F0h */ case    1:  		/* addi R17, R17, 1 */
		/* 820E41F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 820E41F0h case    1:*/		return 0x820E41F4;
		  /* 820E41F4h */ case    2:  		/* addi R11, R11, 1 */
		/* 820E41F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E41F4h case    2:*/		return 0x820E41F8;
		  /* 820E41F8h */ case    3:  		/* cmplw CR6, R17, R11 */
		/* 820E41F8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 820E41F8h case    3:*/		return 0x820E41FC;
		  /* 820E41FCh */ case    4:  		/* bc 12, CR6_LT, -1152 */
		/* 820E41FCh case    4:*/		if ( regs.CR[6].lt ) { return 0x820E3D7C;  }
		/* 820E41FCh case    4:*/		return 0x820E4200;
		  /* 820E4200h */ case    5:  		/* lwz R7, <#[R1 + 104]> */
		/* 820E4200h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000068) );
		/* 820E4200h case    5:*/		return 0x820E4204;
		  /* 820E4204h */ case    6:  		/* lwz R10, <#[R1 + 100]> */
		/* 820E4204h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 820E4204h case    6:*/		return 0x820E4208;
	}
	return 0x820E4208;
} // Block from 820E41ECh-820E4208h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E4208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4208);
		  /* 820E4208h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E4208h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E4208h case    0:*/		return 0x820E420C;
		  /* 820E420Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 820E420Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E4224;  }
		/* 820E420Ch case    1:*/		return 0x820E4210;
		  /* 820E4210h */ case    2:  		/* addi R10, R10, 1 */
		/* 820E4210h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E4210h case    2:*/		return 0x820E4214;
		  /* 820E4214h */ case    3:  		/* stw R10, <#[R1 + 100]> */
		/* 820E4214h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 820E4214h case    3:*/		return 0x820E4218;
		  /* 820E4218h */ case    4:  		/* cmplw CR6, R10, R7 */
		/* 820E4218h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820E4218h case    4:*/		return 0x820E421C;
		  /* 820E421Ch */ case    5:  		/* bc 12, CR6_LT, -1200 */
		/* 820E421Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x820E3D6C;  }
		/* 820E421Ch case    5:*/		return 0x820E4220;
		  /* 820E4220h */ case    6:  		/* b 108 */
		/* 820E4220h case    6:*/		return 0x820E428C;
		/* 820E4220h case    6:*/		return 0x820E4224;
	}
	return 0x820E4224;
} // Block from 820E4208h-820E4224h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E4224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4224);
		  /* 820E4224h */ case    0:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 820E4224h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 820E4224h case    0:*/		return 0x820E4228;
		  /* 820E4228h */ case    1:  		/* addi R4, R1, 144 */
		/* 820E4228h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 820E4228h case    1:*/		return 0x820E422C;
		  /* 820E422Ch */ case    2:  		/* mr R5, R31 */
		/* 820E422Ch case    2:*/		regs.R5 = regs.R31;
		/* 820E422Ch case    2:*/		return 0x820E4230;
		  /* 820E4230h */ case    3:  		/* mr R3, R16 */
		/* 820E4230h case    3:*/		regs.R3 = regs.R16;
		/* 820E4230h case    3:*/		return 0x820E4234;
		  /* 820E4234h */ case    4:  		/* bl -338052 */
		/* 820E4234h case    4:*/		regs.LR = 0x820E4238; return 0x820919B0;
		/* 820E4234h case    4:*/		return 0x820E4238;
		  /* 820E4238h */ case    5:  		/* lwz R9, <#[R1 + 740]> */
		/* 820E4238h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000002E4) );
		/* 820E4238h case    5:*/		return 0x820E423C;
		  /* 820E423Ch */ case    6:  		/* stwx R18, <#[R31 + R16]> */
		/* 820E423Ch case    6:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + regs.R16 + 0x00000000) );
		/* 820E423Ch case    6:*/		return 0x820E4240;
		  /* 820E4240h */ case    7:  		/* li R10, 40 */
		/* 820E4240h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x28);
		/* 820E4240h case    7:*/		return 0x820E4244;
		  /* 820E4244h */ case    8:  		/* lwz R11, <#[R1 + 96]> */
		/* 820E4244h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820E4244h case    8:*/		return 0x820E4248;
		  /* 820E4248h */ case    9:  		/* addi R8, R11, 1 */
		/* 820E4248h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 820E4248h case    9:*/		return 0x820E424C;
		  /* 820E424Ch */ case   10:  		/* stw R8, <#[R9]> */
		/* 820E424Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 820E424Ch case   10:*/		return 0x820E4250;
		  /* 820E4250h */ case   11:  		/* li R11, 0 */
		/* 820E4250h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E4250h case   11:*/		return 0x820E4254;
		  /* 820E4254h */ case   12:  		/* lwz R9, <#[R1 + 748]> */
		/* 820E4254h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000002EC) );
		/* 820E4254h case   12:*/		return 0x820E4258;
		  /* 820E4258h */ case   13:  		/* mtspr CTR, R10 */
		/* 820E4258h case   13:*/		regs.CTR = regs.R10;
		/* 820E4258h case   13:*/		return 0x820E425C;
		  /* 820E425Ch */ case   14:  		/* addi R10, R1, 208 */
		/* 820E425Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 820E425Ch case   14:*/		return 0x820E4260;
		  /* 820E4260h */ case   15:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E4260h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E4260h case   15:*/		return 0x820E4264;
		  /* 820E4264h */ case   16:  		/* cmpwi CR6, R10, -1 */
		/* 820E4264h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E4264h case   16:*/		return 0x820E4268;
		  /* 820E4268h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 820E4268h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820E427C;  }
		/* 820E4268h case   17:*/		return 0x820E426C;
		  /* 820E426Ch */ case   18:  		/* addi R10, R1, 368 */
		/* 820E426Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x170);
		/* 820E426Ch case   18:*/		return 0x820E4270;
		  /* 820E4270h */ case   19:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E4270h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E4270h case   19:*/		return 0x820E4274;
		  /* 820E4274h */ case   20:  		/* cmpwi CR6, R10, -1 */
		/* 820E4274h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E4274h case   20:*/		return 0x820E4278;
		  /* 820E4278h */ case   21:  		/* bc 12, CR6_EQ, 8 */
		/* 820E4278h case   21:*/		if ( regs.CR[6].eq ) { return 0x820E4280;  }
		/* 820E4278h case   21:*/		return 0x820E427C;
	}
	return 0x820E427C;
} // Block from 820E4224h-820E427Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E427Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E427C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E427C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E427C);
		  /* 820E427Ch */ case    0:  		/* stwx R10, <#[R11 + R9]> */
		/* 820E427Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E427Ch case    0:*/		return 0x820E4280;
	}
	return 0x820E4280;
} // Block from 820E427Ch-820E4280h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E4280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4280);
		  /* 820E4280h */ case    0:  		/* addi R11, R11, 4 */
		/* 820E4280h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E4280h case    0:*/		return 0x820E4284;
		  /* 820E4284h */ case    1:  		/* bc 16, CR0_LT, -40 */
		/* 820E4284h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E425C;  }
		/* 820E4284h case    1:*/		return 0x820E4288;
		  /* 820E4288h */ case    2:  		/* li R3, 0 */
		/* 820E4288h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E4288h case    2:*/		return 0x820E428C;
	}
	return 0x820E428C;
} // Block from 820E4280h-820E428Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E428Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E428C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E428C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E428C);
		  /* 820E428Ch */ case    0:  		/* addi R1, R1, 688 */
		/* 820E428Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x2B0);
		/* 820E428Ch case    0:*/		return 0x820E4290;
		  /* 820E4290h */ case    1:  		/* b -340000 */
		/* 820E4290h case    1:*/		return 0x82091270;
		/* 820E4290h case    1:*/		return 0x820E4294;
		  /* 820E4294h */ case    2:  		/* nop */
		/* 820E4294h case    2:*/		cpu::op::nop();
		/* 820E4294h case    2:*/		return 0x820E4298;
	}
	return 0x820E4298;
} // Block from 820E428Ch-820E4298h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E4298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4298);
		  /* 820E4298h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 820E4298h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E4298h case    0:*/		return 0x820E429C;
		  /* 820E429Ch */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 820E429Ch case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E429Ch case    1:*/		return 0x820E42A0;
		  /* 820E42A0h */ case    2:  		/* lwz R11, <#[R4]> */
		/* 820E42A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E42A0h case    2:*/		return 0x820E42A4;
		  /* 820E42A4h */ case    3:  		/* lwz R7, <#[R3 + 20]> */
		/* 820E42A4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 820E42A4h case    3:*/		return 0x820E42A8;
		  /* 820E42A8h */ case    4:  		/* addi R10, R11, 1 */
		/* 820E42A8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 820E42A8h case    4:*/		return 0x820E42AC;
		  /* 820E42ACh */ case    5:  		/* lwz R6, <#[R3 + 8]> */
		/* 820E42ACh case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 820E42ACh case    5:*/		return 0x820E42B0;
		  /* 820E42B0h */ case    6:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 820E42B0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 820E42B0h case    6:*/		return 0x820E42B4;
		  /* 820E42B4h */ case    7:  		/* cmplw CR6, R10, R6 */
		/* 820E42B4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 820E42B4h case    7:*/		return 0x820E42B8;
		  /* 820E42B8h */ case    8:  		/* lwzx R31, <#[R7 + R11]> */
		/* 820E42B8h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820E42B8h case    8:*/		return 0x820E42BC;
		  /* 820E42BCh */ case    9:  		/* bc 4, CR6_LT, 108 */
		/* 820E42BCh case    9:*/		if ( !regs.CR[6].lt ) { return 0x820E4328;  }
		/* 820E42BCh case    9:*/		return 0x820E42C0;
		  /* 820E42C0h */ case   10:  		/* lwz R5, <#[R3 + 16]> */
		/* 820E42C0h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000010) );
		/* 820E42C0h case   10:*/		return 0x820E42C4;
		  /* 820E42C4h */ case   11:  		/* lwzx R9, <#[R11 + R7]> */
		/* 820E42C4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E42C4h case   11:*/		return 0x820E42C8;
		  /* 820E42C8h */ case   12:  		/* lwz R8, <#[R9 + 4]> */
		/* 820E42C8h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 820E42C8h case   12:*/		return 0x820E42CC;
		  /* 820E42CCh */ case   13:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E42CCh case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E42CCh case   13:*/		return 0x820E42D0;
		  /* 820E42D0h */ case   14:  		/* lwzx R8, <#[R8 + R5]> */
		/* 820E42D0h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R5 + 0x00000000) );
		/* 820E42D0h case   14:*/		return 0x820E42D4;
		  /* 820E42D4h */ case   15:  		/* lwz R8, <#[R8 + 4]> */
		/* 820E42D4h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 820E42D4h case   15:*/		return 0x820E42D8;
		  /* 820E42D8h */ case   16:  		/* rlwinm. R3, R8, 0, 27, 27 */
		/* 820E42D8h case   16:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R3,regs.R8);
		/* 820E42D8h case   16:*/		return 0x820E42DC;
		  /* 820E42DCh */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 820E42DCh case   17:*/		if ( regs.CR[0].eq ) { return 0x820E42E8;  }
		/* 820E42DCh case   17:*/		return 0x820E42E0;
		  /* 820E42E0h */ case   18:  		/* rlwinm. R3, R8, 0, 22, 22 */
		/* 820E42E0h case   18:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R3,regs.R8);
		/* 820E42E0h case   18:*/		return 0x820E42E4;
		  /* 820E42E4h */ case   19:  		/* bc 12, CR0_EQ, 12 */
		/* 820E42E4h case   19:*/		if ( regs.CR[0].eq ) { return 0x820E42F0;  }
		/* 820E42E4h case   19:*/		return 0x820E42E8;
	}
	return 0x820E42E8;
} // Block from 820E4298h-820E42E8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E42E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E42E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E42E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E42E8);
		  /* 820E42E8h */ case    0:  		/* rlwinm. R8, R8, 0, 26, 26 */
		/* 820E42E8h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R8,regs.R8);
		/* 820E42E8h case    0:*/		return 0x820E42EC;
		  /* 820E42ECh */ case    1:  		/* bc 12, CR0_EQ, 60 */
		/* 820E42ECh case    1:*/		if ( regs.CR[0].eq ) { return 0x820E4328;  }
		/* 820E42ECh case    1:*/		return 0x820E42F0;
	}
	return 0x820E42F0;
} // Block from 820E42E8h-820E42F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E42F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E42F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E42F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E42F0);
		  /* 820E42F0h */ case    0:  		/* lwz R8, <#[R31 + 104]> */
		/* 820E42F0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000068) );
		/* 820E42F0h case    0:*/		return 0x820E42F4;
		  /* 820E42F4h */ case    1:  		/* lwz R9, <#[R9 + 104]> */
		/* 820E42F4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000068) );
		/* 820E42F4h case    1:*/		return 0x820E42F8;
		  /* 820E42F8h */ case    2:  		/* lwz R3, <#[R8 + 40]> */
		/* 820E42F8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000028) );
		/* 820E42F8h case    2:*/		return 0x820E42FC;
		  /* 820E42FCh */ case    3:  		/* lwz R30, <#[R9 + 40]> */
		/* 820E42FCh case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + 0x00000028) );
		/* 820E42FCh case    3:*/		return 0x820E4300;
		  /* 820E4300h */ case    4:  		/* cmplw CR6, R3, R30 */
		/* 820E4300h case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 820E4300h case    4:*/		return 0x820E4304;
		  /* 820E4304h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 820E4304h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E4328;  }
		/* 820E4304h case    5:*/		return 0x820E4308;
		  /* 820E4308h */ case    6:  		/* lwz R8, <#[R8 + 32]> */
		/* 820E4308h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000020) );
		/* 820E4308h case    6:*/		return 0x820E430C;
		  /* 820E430Ch */ case    7:  		/* lwz R9, <#[R9 + 32]> */
		/* 820E430Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000020) );
		/* 820E430Ch case    7:*/		return 0x820E4310;
		  /* 820E4310h */ case    8:  		/* cmplw CR6, R8, R9 */
		/* 820E4310h case    8:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 820E4310h case    8:*/		return 0x820E4314;
		  /* 820E4314h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 820E4314h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E4328;  }
		/* 820E4314h case    9:*/		return 0x820E4318;
		  /* 820E4318h */ case   10:  		/* addi R10, R10, 1 */
		/* 820E4318h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E4318h case   10:*/		return 0x820E431C;
		  /* 820E431Ch */ case   11:  		/* addi R11, R11, 4 */
		/* 820E431Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E431Ch case   11:*/		return 0x820E4320;
		  /* 820E4320h */ case   12:  		/* cmplw CR6, R10, R6 */
		/* 820E4320h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 820E4320h case   12:*/		return 0x820E4324;
		  /* 820E4324h */ case   13:  		/* bc 12, CR6_LT, -96 */
		/* 820E4324h case   13:*/		if ( regs.CR[6].lt ) { return 0x820E42C4;  }
		/* 820E4324h case   13:*/		return 0x820E4328;
	}
	return 0x820E4328;
} // Block from 820E42F0h-820E4328h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E4328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4328);
		  /* 820E4328h */ case    0:  		/* addi R11, R10, -1 */
		/* 820E4328h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFF);
		/* 820E4328h case    0:*/		return 0x820E432C;
		  /* 820E432Ch */ case    1:  		/* li R3, 0 */
		/* 820E432Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E432Ch case    1:*/		return 0x820E4330;
		  /* 820E4330h */ case    2:  		/* stw R11, <#[R4]> */
		/* 820E4330h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E4330h case    2:*/		return 0x820E4334;
		  /* 820E4334h */ case    3:  		/* ld R30, <#[R1 - 16]> */
		/* 820E4334h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E4334h case    3:*/		return 0x820E4338;
		  /* 820E4338h */ case    4:  		/* ld R31, <#[R1 - 8]> */
		/* 820E4338h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E4338h case    4:*/		return 0x820E433C;
		  /* 820E433Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 820E433Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E433Ch case    5:*/		return 0x820E4340;
	}
	return 0x820E4340;
} // Block from 820E4328h-820E4340h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E4340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4340);
		  /* 820E4340h */ case    0:  		/* mfspr R12, LR */
		/* 820E4340h case    0:*/		regs.R12 = regs.LR;
		/* 820E4340h case    0:*/		return 0x820E4344;
		  /* 820E4344h */ case    1:  		/* bl -340208 */
		/* 820E4344h case    1:*/		regs.LR = 0x820E4348; return 0x82091254;
		/* 820E4344h case    1:*/		return 0x820E4348;
		  /* 820E4348h */ case    2:  		/* stwu R1, <#[R1 - 656]> */
		/* 820E4348h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD70);
		/* 820E4348h case    2:*/		return 0x820E434C;
		  /* 820E434Ch */ case    3:  		/* lwz R10, <#[R3 + 8]> */
		/* 820E434Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 820E434Ch case    3:*/		return 0x820E4350;
		  /* 820E4350h */ case    4:  		/* li R30, 0 */
		/* 820E4350h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E4350h case    4:*/		return 0x820E4354;
		  /* 820E4354h */ case    5:  		/* mr R31, R3 */
		/* 820E4354h case    5:*/		regs.R31 = regs.R3;
		/* 820E4354h case    5:*/		return 0x820E4358;
		  /* 820E4358h */ case    6:  		/* li R27, 0 */
		/* 820E4358h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E4358h case    6:*/		return 0x820E435C;
		  /* 820E435Ch */ case    7:  		/* stw R30, <#[R1 + 80]> */
		/* 820E435Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 820E435Ch case    7:*/		return 0x820E4360;
		  /* 820E4360h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 820E4360h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E4360h case    8:*/		return 0x820E4364;
		  /* 820E4364h */ case    9:  		/* bc 12, CR6_EQ, 132 */
		/* 820E4364h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E43E8;  }
		/* 820E4364h case    9:*/		return 0x820E4368;
		  /* 820E4368h */ case   10:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E4368h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4368h case   10:*/		return 0x820E436C;
		  /* 820E436Ch */ case   11:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 820E436Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 820E436Ch case   11:*/		return 0x820E4370;
		  /* 820E4370h */ case   12:  		/* lwz R9, <#[R31 + 16]> */
		/* 820E4370h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 820E4370h case   12:*/		return 0x820E4374;
		  /* 820E4374h */ case   13:  		/* lwzx R4, <#[R10 + R11]> */
		/* 820E4374h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E4374h case   13:*/		return 0x820E4378;
		  /* 820E4378h */ case   14:  		/* lwz R11, <#[R4 + 4]> */
		/* 820E4378h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 820E4378h case   14:*/		return 0x820E437C;
		  /* 820E437Ch */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E437Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E437Ch case   15:*/		return 0x820E4380;
		  /* 820E4380h */ case   16:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E4380h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E4380h case   16:*/		return 0x820E4384;
		  /* 820E4384h */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E4384h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E4384h case   17:*/		return 0x820E4388;
		  /* 820E4388h */ case   18:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 820E4388h case   18:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 820E4388h case   18:*/		return 0x820E438C;
		  /* 820E438Ch */ case   19:  		/* bc 12, CR0_EQ, 12 */
		/* 820E438Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x820E4398;  }
		/* 820E438Ch case   19:*/		return 0x820E4390;
		  /* 820E4390h */ case   20:  		/* rlwinm. R10, R11, 0, 22, 22 */
		/* 820E4390h case   20:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R10,regs.R11);
		/* 820E4390h case   20:*/		return 0x820E4394;
		  /* 820E4394h */ case   21:  		/* bc 12, CR0_EQ, 12 */
		/* 820E4394h case   21:*/		if ( regs.CR[0].eq ) { return 0x820E43A0;  }
		/* 820E4394h case   21:*/		return 0x820E4398;
	}
	return 0x820E4398;
} // Block from 820E4340h-820E4398h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E4398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4398);
		  /* 820E4398h */ case    0:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820E4398h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820E4398h case    0:*/		return 0x820E439C;
		  /* 820E439Ch */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 820E439Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x820E43D4;  }
		/* 820E439Ch case    1:*/		return 0x820E43A0;
	}
	return 0x820E43A0;
} // Block from 820E4398h-820E43A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E43A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E43A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E43A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E43A0);
		  /* 820E43A0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820E43A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E43A0h case    0:*/		return 0x820E43A4;
		  /* 820E43A4h */ case    1:  		/* li R5, 0 */
		/* 820E43A4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E43A4h case    1:*/		return 0x820E43A8;
		  /* 820E43A8h */ case    2:  		/* mr R3, R31 */
		/* 820E43A8h case    2:*/		regs.R3 = regs.R31;
		/* 820E43A8h case    2:*/		return 0x820E43AC;
		  /* 820E43ACh */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E43ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E43ACh case    3:*/		return 0x820E43B0;
		  /* 820E43B0h */ case    4:  		/* mtspr CTR, R11 */
		/* 820E43B0h case    4:*/		regs.CTR = regs.R11;
		/* 820E43B0h case    4:*/		return 0x820E43B4;
		  /* 820E43B4h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 820E43B4h case    5:*/		if ( 1 ) { regs.LR = 0x820E43B8; return (uint32)regs.CTR; }
		/* 820E43B4h case    5:*/		return 0x820E43B8;
		  /* 820E43B8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E43B8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E43B8h case    6:*/		return 0x820E43BC;
		  /* 820E43BCh */ case    7:  		/* bc 4, CR0_LT, 24 */
		/* 820E43BCh case    7:*/		if ( !regs.CR[0].lt ) { return 0x820E43D4;  }
		/* 820E43BCh case    7:*/		return 0x820E43C0;
		  /* 820E43C0h */ case    8:  		/* addi R4, R1, 80 */
		/* 820E43C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 820E43C0h case    8:*/		return 0x820E43C4;
		  /* 820E43C4h */ case    9:  		/* mr R3, R31 */
		/* 820E43C4h case    9:*/		regs.R3 = regs.R31;
		/* 820E43C4h case    9:*/		return 0x820E43C8;
		  /* 820E43C8h */ case   10:  		/* bl -304 */
		/* 820E43C8h case   10:*/		regs.LR = 0x820E43CC; return 0x820E4298;
		/* 820E43C8h case   10:*/		return 0x820E43CC;
		  /* 820E43CCh */ case   11:  		/* li R27, 1 */
		/* 820E43CCh case   11:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E43CCh case   11:*/		return 0x820E43D0;
		  /* 820E43D0h */ case   12:  		/* lwz R30, <#[R1 + 80]> */
		/* 820E43D0h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 820E43D0h case   12:*/		return 0x820E43D4;
	}
	return 0x820E43D4;
} // Block from 820E43A0h-820E43D4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E43D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E43D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E43D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E43D4);
		  /* 820E43D4h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 820E43D4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820E43D4h case    0:*/		return 0x820E43D8;
		  /* 820E43D8h */ case    1:  		/* addi R30, R30, 1 */
		/* 820E43D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E43D8h case    1:*/		return 0x820E43DC;
		  /* 820E43DCh */ case    2:  		/* stw R30, <#[R1 + 80]> */
		/* 820E43DCh case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 820E43DCh case    2:*/		return 0x820E43E0;
		  /* 820E43E0h */ case    3:  		/* cmplw CR6, R30, R10 */
		/* 820E43E0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 820E43E0h case    3:*/		return 0x820E43E4;
		  /* 820E43E4h */ case    4:  		/* bc 12, CR6_LT, -124 */
		/* 820E43E4h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E4368;  }
		/* 820E43E4h case    4:*/		return 0x820E43E8;
	}
	return 0x820E43E8;
} // Block from 820E43D4h-820E43E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E43E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E43E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E43E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E43E8);
		  /* 820E43E8h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 820E43E8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 820E43E8h case    0:*/		return 0x820E43EC;
		  /* 820E43ECh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 820E43ECh case    1:*/		if ( regs.CR[0].eq ) { return 0x820E43FC;  }
		/* 820E43ECh case    1:*/		return 0x820E43F0;
		  /* 820E43F0h */ case    2:  		/* lis R3, -32768 */
		/* 820E43F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820E43F0h case    2:*/		return 0x820E43F4;
		  /* 820E43F4h */ case    3:  		/* ori R3, R3, 16389 */
		/* 820E43F4h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820E43F4h case    3:*/		return 0x820E43F8;
		  /* 820E43F8h */ case    4:  		/* b 320 */
		/* 820E43F8h case    4:*/		return 0x820E4538;
		/* 820E43F8h case    4:*/		return 0x820E43FC;
	}
	return 0x820E43FC;
} // Block from 820E43E8h-820E43FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E43FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E43FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E43FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E43FC);
		  /* 820E43FCh */ case    0:  		/* li R8, 0 */
		/* 820E43FCh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E43FCh case    0:*/		return 0x820E4400;
		  /* 820E4400h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 820E4400h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E4400h case    1:*/		return 0x820E4404;
		  /* 820E4404h */ case    2:  		/* stw R8, <#[R1 + 80]> */
		/* 820E4404h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 820E4404h case    2:*/		return 0x820E4408;
		  /* 820E4408h */ case    3:  		/* bc 12, CR6_EQ, 280 */
		/* 820E4408h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E4520;  }
		/* 820E4408h case    3:*/		return 0x820E440C;
		  /* 820E440Ch */ case    4:  		/* lis R11, -32254 */
		/* 820E440Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E440Ch case    4:*/		return 0x820E4410;
		  /* 820E4410h */ case    5:  		/* addi R28, R11, -18524 */
		/* 820E4410h case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFB7A4);
		/* 820E4410h case    5:*/		return 0x820E4414;
		  /* 820E4414h */ case    6:  		/* lwz R7, <#[R31 + 20]> */
		/* 820E4414h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4414h case    6:*/		return 0x820E4418;
		  /* 820E4418h */ case    7:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 820E4418h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 820E4418h case    7:*/		return 0x820E441C;
		  /* 820E441Ch */ case    8:  		/* lwz R9, <#[R31 + 16]> */
		/* 820E441Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 820E441Ch case    8:*/		return 0x820E4420;
	}
	return 0x820E4420;
} // Block from 820E43FCh-820E4420h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E4420h
// Function '?MatchComplexTree@CShaderProgram@D3DXShader@@IAAJPAVCInstruction@2@PBUD3DX_MATCHENTRY@2@PAPAV32@PAI33IH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4420);
		  /* 820E4420h */ case    0:  		/* lwzx R29, <#[R11 + R7]> */
		/* 820E4420h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E4420h case    0:*/		return 0x820E4424;
		  /* 820E4424h */ case    1:  		/* lwz R6, <#[R29 + 4]> */
		/* 820E4424h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000004) );
		/* 820E4424h case    1:*/		return 0x820E4428;
		  /* 820E4428h */ case    2:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 820E4428h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 820E4428h case    2:*/		return 0x820E442C;
		  /* 820E442Ch */ case    3:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E442Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E442Ch case    3:*/		return 0x820E4430;
		  /* 820E4430h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E4430h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E4430h case    4:*/		return 0x820E4434;
		  /* 820E4434h */ case    5:  		/* rlwinm. R9, R11, 0, 27, 27 */
		/* 820E4434h case    5:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R9,regs.R11);
		/* 820E4434h case    5:*/		return 0x820E4438;
		  /* 820E4438h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 820E4438h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E4444;  }
		/* 820E4438h case    6:*/		return 0x820E443C;
		  /* 820E443Ch */ case    7:  		/* rlwinm. R9, R11, 0, 22, 22 */
		/* 820E443Ch case    7:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R9,regs.R11);
		/* 820E443Ch case    7:*/		return 0x820E4440;
		  /* 820E4440h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 820E4440h case    8:*/		if ( regs.CR[0].eq ) { return 0x820E444C;  }
		/* 820E4440h case    8:*/		return 0x820E4444;
	}
	return 0x820E4444;
} // Block from 820E4420h-820E4444h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E4444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4444);
		  /* 820E4444h */ case    0:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820E4444h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820E4444h case    0:*/		return 0x820E4448;
		  /* 820E4448h */ case    1:  		/* bc 12, CR0_EQ, 196 */
		/* 820E4448h case    1:*/		if ( regs.CR[0].eq ) { return 0x820E450C;  }
		/* 820E4448h case    1:*/		return 0x820E444C;
	}
	return 0x820E444C;
} // Block from 820E4444h-820E444Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E444Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E444C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E444C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E444C);
		  /* 820E444Ch */ case    0:  		/* addi R11, R8, 1 */
		/* 820E444Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0x1);
		/* 820E444Ch case    0:*/		return 0x820E4450;
		  /* 820E4450h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820E4450h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E4450h case    1:*/		return 0x820E4454;
		  /* 820E4454h */ case    2:  		/* bc 4, CR6_LT, 184 */
		/* 820E4454h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820E450C;  }
		/* 820E4454h case    2:*/		return 0x820E4458;
		  /* 820E4458h */ case    3:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820E4458h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820E4458h case    3:*/		return 0x820E445C;
		  /* 820E445Ch */ case    4:  		/* lwzx R30, <#[R9 + R7]> */
		/* 820E445Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 820E445Ch case    4:*/		return 0x820E4460;
		  /* 820E4460h */ case    5:  		/* lwz R5, <#[R30 + 4]> */
		/* 820E4460h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000004) );
		/* 820E4460h case    5:*/		return 0x820E4464;
		  /* 820E4464h */ case    6:  		/* cmplw CR6, R5, R6 */
		/* 820E4464h case    6:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R6);
		/* 820E4464h case    6:*/		return 0x820E4468;
		  /* 820E4468h */ case    7:  		/* bc 4, CR6_EQ, 56 */
		/* 820E4468h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E44A0;  }
		/* 820E4468h case    7:*/		return 0x820E446C;
		  /* 820E446Ch */ case    8:  		/* lwz R5, <#[R30 + 112]> */
		/* 820E446Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000070) );
		/* 820E446Ch case    8:*/		return 0x820E4470;
		  /* 820E4470h */ case    9:  		/* lwz R4, <#[R29 + 112]> */
		/* 820E4470h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000070) );
		/* 820E4470h case    9:*/		return 0x820E4474;
		  /* 820E4474h */ case   10:  		/* cmplw CR6, R5, R4 */
		/* 820E4474h case   10:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R4);
		/* 820E4474h case   10:*/		return 0x820E4478;
		  /* 820E4478h */ case   11:  		/* bc 4, CR6_EQ, 40 */
		/* 820E4478h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E44A0;  }
		/* 820E4478h case   11:*/		return 0x820E447C;
		  /* 820E447Ch */ case   12:  		/* lwz R5, <#[R30 + 108]> */
		/* 820E447Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000006C) );
		/* 820E447Ch case   12:*/		return 0x820E4480;
		  /* 820E4480h */ case   13:  		/* lwz R4, <#[R29 + 108]> */
		/* 820E4480h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000006C) );
		/* 820E4480h case   13:*/		return 0x820E4484;
		  /* 820E4484h */ case   14:  		/* cmplw CR6, R5, R4 */
		/* 820E4484h case   14:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R4);
		/* 820E4484h case   14:*/		return 0x820E4488;
		  /* 820E4488h */ case   15:  		/* bc 4, CR6_EQ, 24 */
		/* 820E4488h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E44A0;  }
		/* 820E4488h case   15:*/		return 0x820E448C;
		  /* 820E448Ch */ case   16:  		/* lwz R5, <#[R29]> */
		/* 820E448Ch case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000000) );
		/* 820E448Ch case   16:*/		return 0x820E4490;
		  /* 820E4490h */ case   17:  		/* lwz R4, <#[R30]> */
		/* 820E4490h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 820E4490h case   17:*/		return 0x820E4494;
		  /* 820E4494h */ case   18:  		/* xor R5, R5, R4 */
		/* 820E4494h case   18:*/		cpu::op::xor<0>(regs,&regs.R5,regs.R5,regs.R4);
		/* 820E4494h case   18:*/		return 0x820E4498;
		  /* 820E4498h */ case   19:  		/* rlwinm. R5, R5, 0, 7, 7 */
		/* 820E4498h case   19:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R5,regs.R5);
		/* 820E4498h case   19:*/		return 0x820E449C;
		  /* 820E449Ch */ case   20:  		/* bc 4, CR0_EQ, 24 */
		/* 820E449Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x820E44B4;  }
		/* 820E449Ch case   20:*/		return 0x820E44A0;
	}
	return 0x820E44A0;
} // Block from 820E444Ch-820E44A0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E44A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E44A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E44A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E44A0);
		  /* 820E44A0h */ case    0:  		/* addi R11, R11, 1 */
		/* 820E44A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E44A0h case    0:*/		return 0x820E44A4;
		  /* 820E44A4h */ case    1:  		/* addi R9, R9, 4 */
		/* 820E44A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E44A4h case    1:*/		return 0x820E44A8;
		  /* 820E44A8h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 820E44A8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E44A8h case    2:*/		return 0x820E44AC;
		  /* 820E44ACh */ case    3:  		/* bc 12, CR6_LT, -80 */
		/* 820E44ACh case    3:*/		if ( regs.CR[6].lt ) { return 0x820E445C;  }
		/* 820E44ACh case    3:*/		return 0x820E44B0;
		  /* 820E44B0h */ case    4:  		/* b 92 */
		/* 820E44B0h case    4:*/		return 0x820E450C;
		/* 820E44B0h case    4:*/		return 0x820E44B4;
	}
	return 0x820E44B4;
} // Block from 820E44A0h-820E44B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E44B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E44B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E44B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E44B4);
		  /* 820E44B4h */ case    0:  		/* li R6, 256 */
		/* 820E44B4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x100);
		/* 820E44B4h case    0:*/		return 0x820E44B8;
		  /* 820E44B8h */ case    1:  		/* addi R5, R1, 352 */
		/* 820E44B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x160);
		/* 820E44B8h case    1:*/		return 0x820E44BC;
		  /* 820E44BCh */ case    2:  		/* mr R4, R29 */
		/* 820E44BCh case    2:*/		regs.R4 = regs.R29;
		/* 820E44BCh case    2:*/		return 0x820E44C0;
		  /* 820E44C0h */ case    3:  		/* mr R3, R31 */
		/* 820E44C0h case    3:*/		regs.R3 = regs.R31;
		/* 820E44C0h case    3:*/		return 0x820E44C4;
		  /* 820E44C4h */ case    4:  		/* bl 103148 */
		/* 820E44C4h case    4:*/		regs.LR = 0x820E44C8; return 0x820FD7B0;
		/* 820E44C4h case    4:*/		return 0x820E44C8;
		  /* 820E44C8h */ case    5:  		/* li R6, 256 */
		/* 820E44C8h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x100);
		/* 820E44C8h case    5:*/		return 0x820E44CC;
		  /* 820E44CCh */ case    6:  		/* addi R5, R1, 96 */
		/* 820E44CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 820E44CCh case    6:*/		return 0x820E44D0;
		  /* 820E44D0h */ case    7:  		/* mr R4, R30 */
		/* 820E44D0h case    7:*/		regs.R4 = regs.R30;
		/* 820E44D0h case    7:*/		return 0x820E44D4;
		  /* 820E44D4h */ case    8:  		/* mr R3, R31 */
		/* 820E44D4h case    8:*/		regs.R3 = regs.R31;
		/* 820E44D4h case    8:*/		return 0x820E44D8;
		  /* 820E44D8h */ case    9:  		/* bl 103128 */
		/* 820E44D8h case    9:*/		regs.LR = 0x820E44DC; return 0x820FD7B0;
		/* 820E44D8h case    9:*/		return 0x820E44DC;
		  /* 820E44DCh */ case   10:  		/* mr R6, R28 */
		/* 820E44DCh case   10:*/		regs.R6 = regs.R28;
		/* 820E44DCh case   10:*/		return 0x820E44E0;
		  /* 820E44E0h */ case   11:  		/* addi R8, R1, 96 */
		/* 820E44E0h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 820E44E0h case   11:*/		return 0x820E44E4;
		  /* 820E44E4h */ case   12:  		/* lwz R4, <#[R29 + 104]> */
		/* 820E44E4h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000068) );
		/* 820E44E4h case   12:*/		return 0x820E44E8;
		  /* 820E44E8h */ case   13:  		/* addi R7, R1, 352 */
		/* 820E44E8h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x160);
		/* 820E44E8h case   13:*/		return 0x820E44EC;
		  /* 820E44ECh */ case   14:  		/* li R5, 4501 */
		/* 820E44ECh case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x1195);
		/* 820E44ECh case   14:*/		return 0x820E44F0;
		  /* 820E44F0h */ case   15:  		/* mr R3, R31 */
		/* 820E44F0h case   15:*/		regs.R3 = regs.R31;
		/* 820E44F0h case   15:*/		return 0x820E44F4;
		  /* 820E44F4h */ case   16:  		/* bl 172604 */
		/* 820E44F4h case   16:*/		regs.LR = 0x820E44F8; return 0x8210E730;
		/* 820E44F4h case   16:*/		return 0x820E44F8;
		  /* 820E44F8h */ case   17:  		/* addi R4, R1, 80 */
		/* 820E44F8h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 820E44F8h case   17:*/		return 0x820E44FC;
		  /* 820E44FCh */ case   18:  		/* mr R3, R31 */
		/* 820E44FCh case   18:*/		regs.R3 = regs.R31;
		/* 820E44FCh case   18:*/		return 0x820E4500;
		  /* 820E4500h */ case   19:  		/* bl -616 */
		/* 820E4500h case   19:*/		regs.LR = 0x820E4504; return 0x820E4298;
		/* 820E4500h case   19:*/		return 0x820E4504;
		  /* 820E4504h */ case   20:  		/* lwz R8, <#[R1 + 80]> */
		/* 820E4504h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 820E4504h case   20:*/		return 0x820E4508;
		  /* 820E4508h */ case   21:  		/* li R27, 1 */
		/* 820E4508h case   21:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E4508h case   21:*/		return 0x820E450C;
	}
	return 0x820E450C;
} // Block from 820E44B4h-820E450Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E450Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E450C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E450C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E450C);
		  /* 820E450Ch */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 820E450Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820E450Ch case    0:*/		return 0x820E4510;
		  /* 820E4510h */ case    1:  		/* addi R8, R8, 1 */
		/* 820E4510h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E4510h case    1:*/		return 0x820E4514;
		  /* 820E4514h */ case    2:  		/* stw R8, <#[R1 + 80]> */
		/* 820E4514h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 820E4514h case    2:*/		return 0x820E4518;
		  /* 820E4518h */ case    3:  		/* cmplw CR6, R8, R10 */
		/* 820E4518h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 820E4518h case    3:*/		return 0x820E451C;
		  /* 820E451Ch */ case    4:  		/* bc 12, CR6_LT, -264 */
		/* 820E451Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x820E4414;  }
		/* 820E451Ch case    4:*/		return 0x820E4520;
	}
	return 0x820E4520;
} // Block from 820E450Ch-820E4520h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E4520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4520);
		  /* 820E4520h */ case    0:  		/* rlwinm R11, R27, 0, 24, 31 */
		/* 820E4520h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R27);
		/* 820E4520h case    0:*/		return 0x820E4524;
		  /* 820E4524h */ case    1:  		/* lis R10, -32768 */
		/* 820E4524h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 820E4524h case    1:*/		return 0x820E4528;
		  /* 820E4528h */ case    2:  		/* subfic R11, R11, 0 */
		/* 820E4528h case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 820E4528h case    2:*/		return 0x820E452C;
		  /* 820E452Ch */ case    3:  		/* ori R10, R10, 16389 */
		/* 820E452Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4005);
		/* 820E452Ch case    3:*/		return 0x820E4530;
		  /* 820E4530h */ case    4:  		/* subfe R11, R11, R11 */
		/* 820E4530h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820E4530h case    4:*/		return 0x820E4534;
		  /* 820E4534h */ case    5:  		/* and R3, R11, R10 */
		/* 820E4534h case    5:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 820E4534h case    5:*/		return 0x820E4538;
	}
	return 0x820E4538;
} // Block from 820E4520h-820E4538h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E4538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4538);
		  /* 820E4538h */ case    0:  		/* addi R1, R1, 656 */
		/* 820E4538h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x290);
		/* 820E4538h case    0:*/		return 0x820E453C;
		  /* 820E453Ch */ case    1:  		/* b -340632 */
		/* 820E453Ch case    1:*/		return 0x820912A4;
		/* 820E453Ch case    1:*/		return 0x820E4540;
	}
	return 0x820E4540;
} // Block from 820E4538h-820E4540h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E4540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4540);
		  /* 820E4540h */ case    0:  		/* mfspr R12, LR */
		/* 820E4540h case    0:*/		regs.R12 = regs.LR;
		/* 820E4540h case    0:*/		return 0x820E4544;
		  /* 820E4544h */ case    1:  		/* bl -340724 */
		/* 820E4544h case    1:*/		regs.LR = 0x820E4548; return 0x82091250;
		/* 820E4544h case    1:*/		return 0x820E4548;
		  /* 820E4548h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820E4548h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820E4548h case    2:*/		return 0x820E454C;
		  /* 820E454Ch */ case    3:  		/* lwz R11, <#[R5 + 36]> */
		/* 820E454Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000024) );
		/* 820E454Ch case    3:*/		return 0x820E4550;
		  /* 820E4550h */ case    4:  		/* mr R26, R3 */
		/* 820E4550h case    4:*/		regs.R26 = regs.R3;
		/* 820E4550h case    4:*/		return 0x820E4554;
		  /* 820E4554h */ case    5:  		/* mr R27, R4 */
		/* 820E4554h case    5:*/		regs.R27 = regs.R4;
		/* 820E4554h case    5:*/		return 0x820E4558;
		  /* 820E4558h */ case    6:  		/* mr R31, R5 */
		/* 820E4558h case    6:*/		regs.R31 = regs.R5;
		/* 820E4558h case    6:*/		return 0x820E455C;
		  /* 820E455Ch */ case    7:  		/* mr R28, R6 */
		/* 820E455Ch case    7:*/		regs.R28 = regs.R6;
		/* 820E455Ch case    7:*/		return 0x820E4560;
		  /* 820E4560h */ case    8:  		/* cmplw CR6, R11, R6 */
		/* 820E4560h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 820E4560h case    8:*/		return 0x820E4564;
		  /* 820E4564h */ case    9:  		/* bc 12, CR6_EQ, 80 */
		/* 820E4564h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E45B4;  }
		/* 820E4564h case    9:*/		return 0x820E4568;
		  /* 820E4568h */ case   10:  		/* lwz R11, <#[R5 + 20]> */
		/* 820E4568h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000014) );
		/* 820E4568h case   10:*/		return 0x820E456C;
		  /* 820E456Ch */ case   11:  		/* li R30, 0 */
		/* 820E456Ch case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E456Ch case   11:*/		return 0x820E4570;
		  /* 820E4570h */ case   12:  		/* stw R6, <#[R5 + 36]> */
		/* 820E4570h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + 0x00000024) );
		/* 820E4570h case   12:*/		return 0x820E4574;
		  /* 820E4574h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820E4574h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4574h case   13:*/		return 0x820E4578;
		  /* 820E4578h */ case   14:  		/* bc 4, CR6_GT, 60 */
		/* 820E4578h case   14:*/		if ( !regs.CR[6].gt ) { return 0x820E45B4;  }
		/* 820E4578h case   14:*/		return 0x820E457C;
		  /* 820E457Ch */ case   15:  		/* li R29, 0 */
		/* 820E457Ch case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820E457Ch case   15:*/		return 0x820E4580;
		  /* 820E4580h */ case   16:  		/* lwz R11, <#[R31 + 24]> */
		/* 820E4580h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820E4580h case   16:*/		return 0x820E4584;
		  /* 820E4584h */ case   17:  		/* mr R6, R28 */
		/* 820E4584h case   17:*/		regs.R6 = regs.R28;
		/* 820E4584h case   17:*/		return 0x820E4588;
		  /* 820E4588h */ case   18:  		/* mr R4, R27 */
		/* 820E4588h case   18:*/		regs.R4 = regs.R27;
		/* 820E4588h case   18:*/		return 0x820E458C;
		  /* 820E458Ch */ case   19:  		/* mr R3, R26 */
		/* 820E458Ch case   19:*/		regs.R3 = regs.R26;
		/* 820E458Ch case   19:*/		return 0x820E4590;
		  /* 820E4590h */ case   20:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820E4590h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820E4590h case   20:*/		return 0x820E4594;
		  /* 820E4594h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4594h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4594h case   21:*/		return 0x820E4598;
		  /* 820E4598h */ case   22:  		/* lwzx R5, <#[R11 + R27]> */
		/* 820E4598h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820E4598h case   22:*/		return 0x820E459C;
		  /* 820E459Ch */ case   23:  		/* bl -92 */
		/* 820E459Ch case   23:*/		regs.LR = 0x820E45A0; return 0x820E4540;
		/* 820E459Ch case   23:*/		return 0x820E45A0;
		  /* 820E45A0h */ case   24:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E45A0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E45A0h case   24:*/		return 0x820E45A4;
		  /* 820E45A4h */ case   25:  		/* addi R30, R30, 1 */
		/* 820E45A4h case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E45A4h case   25:*/		return 0x820E45A8;
		  /* 820E45A8h */ case   26:  		/* addi R29, R29, 4 */
		/* 820E45A8h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820E45A8h case   26:*/		return 0x820E45AC;
		  /* 820E45ACh */ case   27:  		/* cmplw CR6, R30, R11 */
		/* 820E45ACh case   27:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E45ACh case   27:*/		return 0x820E45B0;
		  /* 820E45B0h */ case   28:  		/* bc 12, CR6_LT, -48 */
		/* 820E45B0h case   28:*/		if ( regs.CR[6].lt ) { return 0x820E4580;  }
		/* 820E45B0h case   28:*/		return 0x820E45B4;
	}
	return 0x820E45B4;
} // Block from 820E4540h-820E45B4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820E45B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E45B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E45B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E45B4);
		  /* 820E45B4h */ case    0:  		/* li R3, 0 */
		/* 820E45B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E45B4h case    0:*/		return 0x820E45B8;
		  /* 820E45B8h */ case    1:  		/* addi R1, R1, 144 */
		/* 820E45B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820E45B8h case    1:*/		return 0x820E45BC;
		  /* 820E45BCh */ case    2:  		/* b -340764 */
		/* 820E45BCh case    2:*/		return 0x820912A0;
		/* 820E45BCh case    2:*/		return 0x820E45C0;
	}
	return 0x820E45C0;
} // Block from 820E45B4h-820E45C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E45C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E45C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E45C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E45C0);
		  /* 820E45C0h */ case    0:  		/* mfspr R12, LR */
		/* 820E45C0h case    0:*/		regs.R12 = regs.LR;
		/* 820E45C0h case    0:*/		return 0x820E45C4;
		  /* 820E45C4h */ case    1:  		/* bl -340852 */
		/* 820E45C4h case    1:*/		regs.LR = 0x820E45C8; return 0x82091250;
		/* 820E45C4h case    1:*/		return 0x820E45C8;
		  /* 820E45C8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820E45C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820E45C8h case    2:*/		return 0x820E45CC;
		  /* 820E45CCh */ case    3:  		/* lwz R11, <#[R5 + 40]> */
		/* 820E45CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000028) );
		/* 820E45CCh case    3:*/		return 0x820E45D0;
		  /* 820E45D0h */ case    4:  		/* mr R26, R3 */
		/* 820E45D0h case    4:*/		regs.R26 = regs.R3;
		/* 820E45D0h case    4:*/		return 0x820E45D4;
		  /* 820E45D4h */ case    5:  		/* mr R27, R4 */
		/* 820E45D4h case    5:*/		regs.R27 = regs.R4;
		/* 820E45D4h case    5:*/		return 0x820E45D8;
		  /* 820E45D8h */ case    6:  		/* mr R31, R5 */
		/* 820E45D8h case    6:*/		regs.R31 = regs.R5;
		/* 820E45D8h case    6:*/		return 0x820E45DC;
		  /* 820E45DCh */ case    7:  		/* mr R28, R6 */
		/* 820E45DCh case    7:*/		regs.R28 = regs.R6;
		/* 820E45DCh case    7:*/		return 0x820E45E0;
		  /* 820E45E0h */ case    8:  		/* cmplw CR6, R11, R6 */
		/* 820E45E0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 820E45E0h case    8:*/		return 0x820E45E4;
		  /* 820E45E4h */ case    9:  		/* bc 12, CR6_EQ, 80 */
		/* 820E45E4h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E4634;  }
		/* 820E45E4h case    9:*/		return 0x820E45E8;
		  /* 820E45E8h */ case   10:  		/* lwz R11, <#[R5 + 20]> */
		/* 820E45E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000014) );
		/* 820E45E8h case   10:*/		return 0x820E45EC;
		  /* 820E45ECh */ case   11:  		/* li R30, 0 */
		/* 820E45ECh case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E45ECh case   11:*/		return 0x820E45F0;
		  /* 820E45F0h */ case   12:  		/* stw R6, <#[R5 + 40]> */
		/* 820E45F0h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + 0x00000028) );
		/* 820E45F0h case   12:*/		return 0x820E45F4;
		  /* 820E45F4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820E45F4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E45F4h case   13:*/		return 0x820E45F8;
		  /* 820E45F8h */ case   14:  		/* bc 4, CR6_GT, 60 */
		/* 820E45F8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x820E4634;  }
		/* 820E45F8h case   14:*/		return 0x820E45FC;
		  /* 820E45FCh */ case   15:  		/* li R29, 0 */
		/* 820E45FCh case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820E45FCh case   15:*/		return 0x820E4600;
		  /* 820E4600h */ case   16:  		/* lwz R11, <#[R31 + 24]> */
		/* 820E4600h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820E4600h case   16:*/		return 0x820E4604;
		  /* 820E4604h */ case   17:  		/* mr R6, R28 */
		/* 820E4604h case   17:*/		regs.R6 = regs.R28;
		/* 820E4604h case   17:*/		return 0x820E4608;
		  /* 820E4608h */ case   18:  		/* mr R4, R27 */
		/* 820E4608h case   18:*/		regs.R4 = regs.R27;
		/* 820E4608h case   18:*/		return 0x820E460C;
		  /* 820E460Ch */ case   19:  		/* mr R3, R26 */
		/* 820E460Ch case   19:*/		regs.R3 = regs.R26;
		/* 820E460Ch case   19:*/		return 0x820E4610;
		  /* 820E4610h */ case   20:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820E4610h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820E4610h case   20:*/		return 0x820E4614;
		  /* 820E4614h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4614h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4614h case   21:*/		return 0x820E4618;
		  /* 820E4618h */ case   22:  		/* lwzx R5, <#[R11 + R27]> */
		/* 820E4618h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820E4618h case   22:*/		return 0x820E461C;
		  /* 820E461Ch */ case   23:  		/* bl -92 */
		/* 820E461Ch case   23:*/		regs.LR = 0x820E4620; return 0x820E45C0;
		/* 820E461Ch case   23:*/		return 0x820E4620;
		  /* 820E4620h */ case   24:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E4620h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4620h case   24:*/		return 0x820E4624;
		  /* 820E4624h */ case   25:  		/* addi R30, R30, 1 */
		/* 820E4624h case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E4624h case   25:*/		return 0x820E4628;
		  /* 820E4628h */ case   26:  		/* addi R29, R29, 4 */
		/* 820E4628h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820E4628h case   26:*/		return 0x820E462C;
		  /* 820E462Ch */ case   27:  		/* cmplw CR6, R30, R11 */
		/* 820E462Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E462Ch case   27:*/		return 0x820E4630;
		  /* 820E4630h */ case   28:  		/* bc 12, CR6_LT, -48 */
		/* 820E4630h case   28:*/		if ( regs.CR[6].lt ) { return 0x820E4600;  }
		/* 820E4630h case   28:*/		return 0x820E4634;
	}
	return 0x820E4634;
} // Block from 820E45C0h-820E4634h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820E4634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4634);
		  /* 820E4634h */ case    0:  		/* li R3, 0 */
		/* 820E4634h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E4634h case    0:*/		return 0x820E4638;
		  /* 820E4638h */ case    1:  		/* addi R1, R1, 144 */
		/* 820E4638h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820E4638h case    1:*/		return 0x820E463C;
		  /* 820E463Ch */ case    2:  		/* b -340892 */
		/* 820E463Ch case    2:*/		return 0x820912A0;
		/* 820E463Ch case    2:*/		return 0x820E4640;
	}
	return 0x820E4640;
} // Block from 820E4634h-820E4640h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E4640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4640);
		  /* 820E4640h */ case    0:  		/* mfspr R12, LR */
		/* 820E4640h case    0:*/		regs.R12 = regs.LR;
		/* 820E4640h case    0:*/		return 0x820E4644;
		  /* 820E4644h */ case    1:  		/* bl -340980 */
		/* 820E4644h case    1:*/		regs.LR = 0x820E4648; return 0x82091250;
		/* 820E4644h case    1:*/		return 0x820E4648;
		  /* 820E4648h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820E4648h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820E4648h case    2:*/		return 0x820E464C;
		  /* 820E464Ch */ case    3:  		/* lwz R11, <#[R5 + 40]> */
		/* 820E464Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000028) );
		/* 820E464Ch case    3:*/		return 0x820E4650;
		  /* 820E4650h */ case    4:  		/* mr R26, R3 */
		/* 820E4650h case    4:*/		regs.R26 = regs.R3;
		/* 820E4650h case    4:*/		return 0x820E4654;
		  /* 820E4654h */ case    5:  		/* mr R27, R4 */
		/* 820E4654h case    5:*/		regs.R27 = regs.R4;
		/* 820E4654h case    5:*/		return 0x820E4658;
		  /* 820E4658h */ case    6:  		/* mr R31, R5 */
		/* 820E4658h case    6:*/		regs.R31 = regs.R5;
		/* 820E4658h case    6:*/		return 0x820E465C;
		  /* 820E465Ch */ case    7:  		/* mr R28, R6 */
		/* 820E465Ch case    7:*/		regs.R28 = regs.R6;
		/* 820E465Ch case    7:*/		return 0x820E4660;
		  /* 820E4660h */ case    8:  		/* cmplw CR6, R11, R6 */
		/* 820E4660h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 820E4660h case    8:*/		return 0x820E4664;
		  /* 820E4664h */ case    9:  		/* bc 12, CR6_EQ, 80 */
		/* 820E4664h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E46B4;  }
		/* 820E4664h case    9:*/		return 0x820E4668;
		  /* 820E4668h */ case   10:  		/* lwz R11, <#[R5 + 28]> */
		/* 820E4668h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000001C) );
		/* 820E4668h case   10:*/		return 0x820E466C;
		  /* 820E466Ch */ case   11:  		/* li R30, 0 */
		/* 820E466Ch case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E466Ch case   11:*/		return 0x820E4670;
		  /* 820E4670h */ case   12:  		/* stw R6, <#[R5 + 40]> */
		/* 820E4670h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + 0x00000028) );
		/* 820E4670h case   12:*/		return 0x820E4674;
		  /* 820E4674h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820E4674h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4674h case   13:*/		return 0x820E4678;
		  /* 820E4678h */ case   14:  		/* bc 4, CR6_GT, 60 */
		/* 820E4678h case   14:*/		if ( !regs.CR[6].gt ) { return 0x820E46B4;  }
		/* 820E4678h case   14:*/		return 0x820E467C;
		  /* 820E467Ch */ case   15:  		/* li R29, 0 */
		/* 820E467Ch case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820E467Ch case   15:*/		return 0x820E4680;
		  /* 820E4680h */ case   16:  		/* lwz R11, <#[R31 + 32]> */
		/* 820E4680h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820E4680h case   16:*/		return 0x820E4684;
		  /* 820E4684h */ case   17:  		/* mr R6, R28 */
		/* 820E4684h case   17:*/		regs.R6 = regs.R28;
		/* 820E4684h case   17:*/		return 0x820E4688;
		  /* 820E4688h */ case   18:  		/* mr R4, R27 */
		/* 820E4688h case   18:*/		regs.R4 = regs.R27;
		/* 820E4688h case   18:*/		return 0x820E468C;
		  /* 820E468Ch */ case   19:  		/* mr R3, R26 */
		/* 820E468Ch case   19:*/		regs.R3 = regs.R26;
		/* 820E468Ch case   19:*/		return 0x820E4690;
		  /* 820E4690h */ case   20:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820E4690h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820E4690h case   20:*/		return 0x820E4694;
		  /* 820E4694h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4694h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4694h case   21:*/		return 0x820E4698;
		  /* 820E4698h */ case   22:  		/* lwzx R5, <#[R11 + R27]> */
		/* 820E4698h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820E4698h case   22:*/		return 0x820E469C;
		  /* 820E469Ch */ case   23:  		/* bl -92 */
		/* 820E469Ch case   23:*/		regs.LR = 0x820E46A0; return 0x820E4640;
		/* 820E469Ch case   23:*/		return 0x820E46A0;
		  /* 820E46A0h */ case   24:  		/* lwz R11, <#[R31 + 28]> */
		/* 820E46A0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 820E46A0h case   24:*/		return 0x820E46A4;
		  /* 820E46A4h */ case   25:  		/* addi R30, R30, 1 */
		/* 820E46A4h case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E46A4h case   25:*/		return 0x820E46A8;
		  /* 820E46A8h */ case   26:  		/* addi R29, R29, 4 */
		/* 820E46A8h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820E46A8h case   26:*/		return 0x820E46AC;
		  /* 820E46ACh */ case   27:  		/* cmplw CR6, R30, R11 */
		/* 820E46ACh case   27:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E46ACh case   27:*/		return 0x820E46B0;
		  /* 820E46B0h */ case   28:  		/* bc 12, CR6_LT, -48 */
		/* 820E46B0h case   28:*/		if ( regs.CR[6].lt ) { return 0x820E4680;  }
		/* 820E46B0h case   28:*/		return 0x820E46B4;
	}
	return 0x820E46B4;
} // Block from 820E4640h-820E46B4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820E46B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E46B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E46B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E46B4);
		  /* 820E46B4h */ case    0:  		/* li R3, 0 */
		/* 820E46B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E46B4h case    0:*/		return 0x820E46B8;
		  /* 820E46B8h */ case    1:  		/* addi R1, R1, 144 */
		/* 820E46B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820E46B8h case    1:*/		return 0x820E46BC;
		  /* 820E46BCh */ case    2:  		/* b -341020 */
		/* 820E46BCh case    2:*/		return 0x820912A0;
		/* 820E46BCh case    2:*/		return 0x820E46C0;
	}
	return 0x820E46C0;
} // Block from 820E46B4h-820E46C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E46C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E46C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E46C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E46C0);
		  /* 820E46C0h */ case    0:  		/* mfspr R12, LR */
		/* 820E46C0h case    0:*/		regs.R12 = regs.LR;
		/* 820E46C0h case    0:*/		return 0x820E46C4;
		  /* 820E46C4h */ case    1:  		/* bl -341104 */
		/* 820E46C4h case    1:*/		regs.LR = 0x820E46C8; return 0x82091254;
		/* 820E46C4h case    1:*/		return 0x820E46C8;
		  /* 820E46C8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820E46C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820E46C8h case    2:*/		return 0x820E46CC;
		  /* 820E46CCh */ case    3:  		/* li R11, 0 */
		/* 820E46CCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E46CCh case    3:*/		return 0x820E46D0;
		  /* 820E46D0h */ case    4:  		/* mr R28, R3 */
		/* 820E46D0h case    4:*/		regs.R28 = regs.R3;
		/* 820E46D0h case    4:*/		return 0x820E46D4;
		  /* 820E46D4h */ case    5:  		/* stw R11, <#[R5]> */
		/* 820E46D4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 820E46D4h case    5:*/		return 0x820E46D8;
		  /* 820E46D8h */ case    6:  		/* mr R31, R4 */
		/* 820E46D8h case    6:*/		regs.R31 = regs.R4;
		/* 820E46D8h case    6:*/		return 0x820E46DC;
		  /* 820E46DCh */ case    7:  		/* lbz R11, <#[R4]> */
		/* 820E46DCh case    7:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E46DCh case    7:*/		return 0x820E46E0;
		  /* 820E46E0h */ case    8:  		/* mr R30, R5 */
		/* 820E46E0h case    8:*/		regs.R30 = regs.R5;
		/* 820E46E0h case    8:*/		return 0x820E46E4;
		  /* 820E46E4h */ case    9:  		/* mr R27, R7 */
		/* 820E46E4h case    9:*/		regs.R27 = regs.R7;
		/* 820E46E4h case    9:*/		return 0x820E46E8;
		  /* 820E46E8h */ case   10:  		/* extsb. R3, R11 */
		/* 820E46E8h case   10:*/		cpu::op::extsb<1>(regs,&regs.R3,regs.R11);
		/* 820E46E8h case   10:*/		return 0x820E46EC;
		  /* 820E46ECh */ case   11:  		/* bc 12, CR0_EQ, 92 */
		/* 820E46ECh case   11:*/		if ( regs.CR[0].eq ) { return 0x820E4748;  }
		/* 820E46ECh case   11:*/		return 0x820E46F0;
		  /* 820E46F0h */ case   12:  		/* extsb R29, R6 */
		/* 820E46F0h case   12:*/		cpu::op::extsb<0>(regs,&regs.R29,regs.R6);
		/* 820E46F0h case   12:*/		return 0x820E46F4;
		  /* 820E46F4h */ case   13:  		/* b 12 */
		/* 820E46F4h case   13:*/		return 0x820E4700;
		/* 820E46F4h case   13:*/		return 0x820E46F8;
		  /* 820E46F8h */ case   14:  		/* lbzu R11, <#[R31 + 1]> */
		/* 820E46F8h case   14:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		regs.R31 = (uint32)(regs.R31 + 0x00000001);
		/* 820E46F8h case   14:*/		return 0x820E46FC;
		  /* 820E46FCh */ case   15:  		/* extsb R3, R11 */
		/* 820E46FCh case   15:*/		cpu::op::extsb<0>(regs,&regs.R3,regs.R11);
		/* 820E46FCh case   15:*/		return 0x820E4700;
	}
	return 0x820E4700;
} // Block from 820E46C0h-820E4700h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E4700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4700);
		  /* 820E4700h */ case    0:  		/* bl -307088 */
		/* 820E4700h case    0:*/		regs.LR = 0x820E4704; return 0x82099770;
		/* 820E4700h case    0:*/		return 0x820E4704;
		  /* 820E4704h */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 820E4704h case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E4704h case    1:*/		return 0x820E4708;
		  /* 820E4708h */ case    2:  		/* bc 12, CR0_EQ, -16 */
		/* 820E4708h case    2:*/		if ( regs.CR[0].eq ) { return 0x820E46F8;  }
		/* 820E4708h case    2:*/		return 0x820E470C;
		  /* 820E470Ch */ case    3:  		/* lbz R11, <#[R31]> */
		/* 820E470Ch case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E470Ch case    3:*/		return 0x820E4710;
		  /* 820E4710h */ case    4:  		/* extsb R3, R11 */
		/* 820E4710h case    4:*/		cpu::op::extsb<0>(regs,&regs.R3,regs.R11);
		/* 820E4710h case    4:*/		return 0x820E4714;
		  /* 820E4714h */ case    5:  		/* bl -307076 */
		/* 820E4714h case    5:*/		regs.LR = 0x820E4718; return 0x82099790;
		/* 820E4714h case    5:*/		return 0x820E4718;
		  /* 820E4718h */ case    6:  		/* cmpw CR6, R3, R29 */
		/* 820E4718h case    6:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R29);
		/* 820E4718h case    6:*/		return 0x820E471C;
		  /* 820E471Ch */ case    7:  		/* bc 12, CR6_EQ, 60 */
		/* 820E471Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820E4758;  }
		/* 820E471Ch case    7:*/		return 0x820E4720;
		  /* 820E4720h */ case    8:  		/* lbz R11, <#[R31]> */
		/* 820E4720h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E4720h case    8:*/		return 0x820E4724;
		  /* 820E4724h */ case    9:  		/* b 8 */
		/* 820E4724h case    9:*/		return 0x820E472C;
		/* 820E4724h case    9:*/		return 0x820E4728;
		  /* 820E4728h */ case   10:  		/* lbzu R11, <#[R31 + 1]> */
		/* 820E4728h case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		regs.R31 = (uint32)(regs.R31 + 0x00000001);
		/* 820E4728h case   10:*/		return 0x820E472C;
	}
	return 0x820E472C;
} // Block from 820E4700h-820E472Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E472Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E472C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E472C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E472C);
		  /* 820E472Ch */ case    0:  		/* extsb R3, R11 */
		/* 820E472Ch case    0:*/		cpu::op::extsb<0>(regs,&regs.R3,regs.R11);
		/* 820E472Ch case    0:*/		return 0x820E4730;
		  /* 820E4730h */ case    1:  		/* bl -307136 */
		/* 820E4730h case    1:*/		regs.LR = 0x820E4734; return 0x82099770;
		/* 820E4730h case    1:*/		return 0x820E4734;
		  /* 820E4734h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820E4734h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E4734h case    2:*/		return 0x820E4738;
		  /* 820E4738h */ case    3:  		/* bc 4, CR0_EQ, -16 */
		/* 820E4738h case    3:*/		if ( !regs.CR[0].eq ) { return 0x820E4728;  }
		/* 820E4738h case    3:*/		return 0x820E473C;
		  /* 820E473Ch */ case    4:  		/* lbz R11, <#[R31]> */
		/* 820E473Ch case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E473Ch case    4:*/		return 0x820E4740;
		  /* 820E4740h */ case    5:  		/* extsb. R3, R11 */
		/* 820E4740h case    5:*/		cpu::op::extsb<1>(regs,&regs.R3,regs.R11);
		/* 820E4740h case    5:*/		return 0x820E4744;
		  /* 820E4744h */ case    6:  		/* bc 4, CR0_EQ, -68 */
		/* 820E4744h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820E4700;  }
		/* 820E4744h case    6:*/		return 0x820E4748;
	}
	return 0x820E4748;
} // Block from 820E472Ch-820E4748h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E4748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4748);
		  /* 820E4748h */ case    0:  		/* lis R3, -32768 */
		/* 820E4748h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820E4748h case    0:*/		return 0x820E474C;
		  /* 820E474Ch */ case    1:  		/* ori R3, R3, 16389 */
		/* 820E474Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820E474Ch case    1:*/		return 0x820E4750;
		  /* 820E4750h */ case    2:  		/* addi R1, R1, 128 */
		/* 820E4750h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820E4750h case    2:*/		return 0x820E4754;
		  /* 820E4754h */ case    3:  		/* b -341168 */
		/* 820E4754h case    3:*/		return 0x820912A4;
		/* 820E4754h case    3:*/		return 0x820E4758;
	}
	return 0x820E4758;
} // Block from 820E4748h-820E4758h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E4758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4758);
		  /* 820E4758h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 820E4758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820E4758h case    0:*/		return 0x820E475C;
		  /* 820E475Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E475Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E475Ch case    1:*/		return 0x820E4760;
		  /* 820E4760h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 820E4760h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E47D0;  }
		/* 820E4760h case    2:*/		return 0x820E4764;
		  /* 820E4764h */ case    3:  		/* lwz R7, <#[R28 + 8]> */
		/* 820E4764h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000008) );
		/* 820E4764h case    3:*/		return 0x820E4768;
		  /* 820E4768h */ case    4:  		/* li R6, 0 */
		/* 820E4768h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E4768h case    4:*/		return 0x820E476C;
		  /* 820E476Ch */ case    5:  		/* li R9, 0 */
		/* 820E476Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E476Ch case    5:*/		return 0x820E4770;
		  /* 820E4770h */ case    6:  		/* cmplwi CR6, R7, 0 */
		/* 820E4770h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820E4770h case    6:*/		return 0x820E4774;
		  /* 820E4774h */ case    7:  		/* bc 12, CR6_EQ, 64 */
		/* 820E4774h case    7:*/		if ( regs.CR[6].eq ) { return 0x820E47B4;  }
		/* 820E4774h case    7:*/		return 0x820E4778;
		  /* 820E4778h */ case    8:  		/* lwz R8, <#[R28 + 20]> */
		/* 820E4778h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 820E4778h case    8:*/		return 0x820E477C;
		  /* 820E477Ch */ case    9:  		/* li R11, 0 */
		/* 820E477Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E477Ch case    9:*/		return 0x820E4780;
		  /* 820E4780h */ case   10:  		/* lwzx R10, <#[R11 + R8]> */
		/* 820E4780h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E4780h case   10:*/		return 0x820E4784;
		  /* 820E4784h */ case   11:  		/* lwz R5, <#[R10 + 4]> */
		/* 820E4784h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 820E4784h case   11:*/		return 0x820E4788;
		  /* 820E4788h */ case   12:  		/* cmplw CR6, R5, R27 */
		/* 820E4788h case   12:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R27);
		/* 820E4788h case   12:*/		return 0x820E478C;
		  /* 820E478Ch */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 820E478Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x820E4794;  }
		/* 820E478Ch case   13:*/		return 0x820E4790;
		  /* 820E4790h */ case   14:  		/* mr R6, R10 */
		/* 820E4790h case   14:*/		regs.R6 = regs.R10;
		/* 820E4790h case   14:*/		return 0x820E4794;
	}
	return 0x820E4794;
} // Block from 820E4758h-820E4794h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E4794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4794);
		  /* 820E4794h */ case    0:  		/* addi R9, R9, 1 */
		/* 820E4794h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E4794h case    0:*/		return 0x820E4798;
		  /* 820E4798h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E4798h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E4798h case    1:*/		return 0x820E479C;
		  /* 820E479Ch */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 820E479Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 820E479Ch case    2:*/		return 0x820E47A0;
		  /* 820E47A0h */ case    3:  		/* bc 12, CR6_LT, -32 */
		/* 820E47A0h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E4780;  }
		/* 820E47A0h case    3:*/		return 0x820E47A4;
		  /* 820E47A4h */ case    4:  		/* cmplwi CR6, R6, 0 */
		/* 820E47A4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820E47A4h case    4:*/		return 0x820E47A8;
		  /* 820E47A8h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 820E47A8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E47B4;  }
		/* 820E47A8h case    5:*/		return 0x820E47AC;
		  /* 820E47ACh */ case    6:  		/* lwz R4, <#[R6 + 96]> */
		/* 820E47ACh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R6 + 0x00000060) );
		/* 820E47ACh case    6:*/		return 0x820E47B0;
		  /* 820E47B0h */ case    7:  		/* b 8 */
		/* 820E47B0h case    7:*/		return 0x820E47B8;
		/* 820E47B0h case    7:*/		return 0x820E47B4;
	}
	return 0x820E47B4;
} // Block from 820E4794h-820E47B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E47B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E47B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E47B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E47B4);
		  /* 820E47B4h */ case    0:  		/* li R4, 0 */
		/* 820E47B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E47B4h case    0:*/		return 0x820E47B8;
	}
	return 0x820E47B8;
} // Block from 820E47B4h-820E47B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E47B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E47B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E47B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E47B8);
		  /* 820E47B8h */ case    0:  		/* lis R11, -32254 */
		/* 820E47B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E47B8h case    0:*/		return 0x820E47BC;
		  /* 820E47BCh */ case    1:  		/* li R5, 4509 */
		/* 820E47BCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x119D);
		/* 820E47BCh case    1:*/		return 0x820E47C0;
		  /* 820E47C0h */ case    2:  		/* addi R6, R11, -18480 */
		/* 820E47C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB7D0);
		/* 820E47C0h case    2:*/		return 0x820E47C4;
		  /* 820E47C4h */ case    3:  		/* mr R3, R28 */
		/* 820E47C4h case    3:*/		regs.R3 = regs.R28;
		/* 820E47C4h case    3:*/		return 0x820E47C8;
		  /* 820E47C8h */ case    4:  		/* bl 171880 */
		/* 820E47C8h case    4:*/		regs.LR = 0x820E47CC; return 0x8210E730;
		/* 820E47C8h case    4:*/		return 0x820E47CC;
		  /* 820E47CCh */ case    5:  		/* b -132 */
		/* 820E47CCh case    5:*/		return 0x820E4748;
		/* 820E47CCh case    5:*/		return 0x820E47D0;
	}
	return 0x820E47D0;
} // Block from 820E47B8h-820E47D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E47D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E47D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E47D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E47D0);
		  /* 820E47D0h */ case    0:  		/* stw R31, <#[R30]> */
		/* 820E47D0h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 820E47D0h case    0:*/		return 0x820E47D4;
		  /* 820E47D4h */ case    1:  		/* li R3, 0 */
		/* 820E47D4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E47D4h case    1:*/		return 0x820E47D8;
		  /* 820E47D8h */ case    2:  		/* b -136 */
		/* 820E47D8h case    2:*/		return 0x820E4750;
		/* 820E47D8h case    2:*/		return 0x820E47DC;
		  /* 820E47DCh */ case    3:  		/* nop */
		/* 820E47DCh case    3:*/		cpu::op::nop();
		/* 820E47DCh case    3:*/		return 0x820E47E0;
	}
	return 0x820E47E0;
} // Block from 820E47D0h-820E47E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E47E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E47E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E47E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E47E0);
		  /* 820E47E0h */ case    0:  		/* mfspr R12, LR */
		/* 820E47E0h case    0:*/		regs.R12 = regs.LR;
		/* 820E47E0h case    0:*/		return 0x820E47E4;
		  /* 820E47E4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E47E4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E47E4h case    1:*/		return 0x820E47E8;
		  /* 820E47E8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 820E47E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820E47E8h case    2:*/		return 0x820E47EC;
		  /* 820E47ECh */ case    3:  		/* li R10, -1 */
		/* 820E47ECh case    3:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820E47ECh case    3:*/		return 0x820E47F0;
		  /* 820E47F0h */ case    4:  		/* li R11, -1 */
		/* 820E47F0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820E47F0h case    4:*/		return 0x820E47F4;
		  /* 820E47F4h */ case    5:  		/* stw R10, <#[R3 + 316]> */
		/* 820E47F4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000013C) );
		/* 820E47F4h case    5:*/		return 0x820E47F8;
		  /* 820E47F8h */ case    6:  		/* li R10, 0 */
		/* 820E47F8h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E47F8h case    6:*/		return 0x820E47FC;
		  /* 820E47FCh */ case    7:  		/* stw R11, <#[R3 + 320]> */
		/* 820E47FCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000140) );
		/* 820E47FCh case    7:*/		return 0x820E4800;
		  /* 820E4800h */ case    8:  		/* stw R11, <#[R3 + 324]> */
		/* 820E4800h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000144) );
		/* 820E4800h case    8:*/		return 0x820E4804;
		  /* 820E4804h */ case    9:  		/* stw R11, <#[R3 + 328]> */
		/* 820E4804h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000148) );
		/* 820E4804h case    9:*/		return 0x820E4808;
		  /* 820E4808h */ case   10:  		/* stw R11, <#[R3 + 332]> */
		/* 820E4808h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000014C) );
		/* 820E4808h case   10:*/		return 0x820E480C;
		  /* 820E480Ch */ case   11:  		/* stw R10, <#[R3 + 336]> */
		/* 820E480Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000150) );
		/* 820E480Ch case   11:*/		return 0x820E4810;
		  /* 820E4810h */ case   12:  		/* stw R10, <#[R3 + 340]> */
		/* 820E4810h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000154) );
		/* 820E4810h case   12:*/		return 0x820E4814;
		  /* 820E4814h */ case   13:  		/* bl 136068 */
		/* 820E4814h case   13:*/		regs.LR = 0x820E4818; return 0x82105B98;
		/* 820E4814h case   13:*/		return 0x820E4818;
		  /* 820E4818h */ case   14:  		/* srawi R11, R3, 31 */
		/* 820E4818h case   14:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820E4818h case   14:*/		return 0x820E481C;
		  /* 820E481Ch */ case   15:  		/* and R3, R11, R3 */
		/* 820E481Ch case   15:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820E481Ch case   15:*/		return 0x820E4820;
		  /* 820E4820h */ case   16:  		/* addi R1, R1, 96 */
		/* 820E4820h case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820E4820h case   16:*/		return 0x820E4824;
		  /* 820E4824h */ case   17:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E4824h case   17:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E4824h case   17:*/		return 0x820E4828;
		  /* 820E4828h */ case   18:  		/* mtspr LR, R12 */
		/* 820E4828h case   18:*/		regs.LR = regs.R12;
		/* 820E4828h case   18:*/		return 0x820E482C;
		  /* 820E482Ch */ case   19:  		/* bclr 20, CR0_LT */
		/* 820E482Ch case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E482Ch case   19:*/		return 0x820E4830;
	}
	return 0x820E4830;
} // Block from 820E47E0h-820E4830h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E4830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4830);
		  /* 820E4830h */ case    0:  		/* mfspr R12, LR */
		/* 820E4830h case    0:*/		regs.R12 = regs.LR;
		/* 820E4830h case    0:*/		return 0x820E4834;
		  /* 820E4834h */ case    1:  		/* bl -341468 */
		/* 820E4834h case    1:*/		regs.LR = 0x820E4838; return 0x82091258;
		/* 820E4834h case    1:*/		return 0x820E4838;
		  /* 820E4838h */ case    2:  		/* lwz R11, <#[R3 + 12]> */
		/* 820E4838h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 820E4838h case    2:*/		return 0x820E483C;
		  /* 820E483Ch */ case    3:  		/* li R28, 0 */
		/* 820E483Ch case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820E483Ch case    3:*/		return 0x820E4840;
		  /* 820E4840h */ case    4:  		/* li R29, 0 */
		/* 820E4840h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820E4840h case    4:*/		return 0x820E4844;
		  /* 820E4844h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820E4844h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4844h case    5:*/		return 0x820E4848;
		  /* 820E4848h */ case    6:  		/* bc 4, CR6_GT, 248 */
		/* 820E4848h case    6:*/		if ( !regs.CR[6].gt ) { return 0x820E4940;  }
		/* 820E4848h case    6:*/		return 0x820E484C;
		  /* 820E484Ch */ case    7:  		/* li R30, 0 */
		/* 820E484Ch case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E484Ch case    7:*/		return 0x820E4850;
		  /* 820E4850h */ case    8:  		/* lwz R11, <#[R3 + 24]> */
		/* 820E4850h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 820E4850h case    8:*/		return 0x820E4854;
		  /* 820E4854h */ case    9:  		/* li R31, 0 */
		/* 820E4854h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E4854h case    9:*/		return 0x820E4858;
		  /* 820E4858h */ case   10:  		/* li R4, 0 */
		/* 820E4858h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E4858h case   10:*/		return 0x820E485C;
		  /* 820E485Ch */ case   11:  		/* lwzx R8, <#[R30 + R11]> */
		/* 820E485Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820E485Ch case   11:*/		return 0x820E4860;
		  /* 820E4860h */ case   12:  		/* lwz R5, <#[R8 + 4]> */
		/* 820E4860h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000004) );
		/* 820E4860h case   12:*/		return 0x820E4864;
		  /* 820E4864h */ case   13:  		/* cmplwi CR6, R5, 0 */
		/* 820E4864h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E4864h case   13:*/		return 0x820E4868;
		  /* 820E4868h */ case   14:  		/* bc 12, CR6_EQ, 188 */
		/* 820E4868h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E4924;  }
		/* 820E4868h case   14:*/		return 0x820E486C;
		  /* 820E486Ch */ case   15:  		/* lwz R6, <#[R8 + 8]> */
		/* 820E486Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000008) );
		/* 820E486Ch case   15:*/		return 0x820E4870;
		  /* 820E4870h */ case   16:  		/* li R9, 0 */
		/* 820E4870h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E4870h case   16:*/		return 0x820E4874;
		  /* 820E4874h */ case   17:  		/* lwz R7, <#[R3 + 20]> */
		/* 820E4874h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 820E4874h case   17:*/		return 0x820E4878;
		  /* 820E4878h */ case   18:  		/* lwzx R11, <#[R9 + R6]> */
		/* 820E4878h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 820E4878h case   18:*/		return 0x820E487C;
		  /* 820E487Ch */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E487Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E487Ch case   19:*/		return 0x820E4880;
		  /* 820E4880h */ case   20:  		/* lwzx R11, <#[R11 + R7]> */
		/* 820E4880h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E4880h case   20:*/		return 0x820E4884;
		  /* 820E4884h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 820E4884h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4884h case   21:*/		return 0x820E4888;
		  /* 820E4888h */ case   22:  		/* rlwinm. R10, R10, 0, 7, 7 */
		/* 820E4888h case   22:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R10,regs.R10);
		/* 820E4888h case   22:*/		return 0x820E488C;
		  /* 820E488Ch */ case   23:  		/* bc 12, CR0_EQ, 8 */
		/* 820E488Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x820E4894;  }
		/* 820E488Ch case   23:*/		return 0x820E4890;
		  /* 820E4890h */ case   24:  		/* li R31, 1 */
		/* 820E4890h case   24:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 820E4890h case   24:*/		return 0x820E4894;
	}
	return 0x820E4894;
} // Block from 820E4830h-820E4894h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E4894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4894);
		  /* 820E4894h */ case    0:  		/* lwz R10, <#[R11 + 56]> */
		/* 820E4894h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 820E4894h case    0:*/		return 0x820E4898;
		  /* 820E4898h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 820E4898h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E4898h case    1:*/		return 0x820E489C;
		  /* 820E489Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 820E489Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820E48A8;  }
		/* 820E489Ch case    2:*/		return 0x820E48A0;
		  /* 820E48A0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 820E48A0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 820E48A0h case    3:*/		return 0x820E48A4;
		  /* 820E48A4h */ case    4:  		/* lwzx R11, <#[R11 + R7]> */
		/* 820E48A4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E48A4h case    4:*/		return 0x820E48A8;
	}
	return 0x820E48A8;
} // Block from 820E4894h-820E48A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E48A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E48A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E48A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E48A8);
		  /* 820E48A8h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 820E48A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E48A8h case    0:*/		return 0x820E48AC;
		  /* 820E48ACh */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820E48ACh case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820E48ACh case    1:*/		return 0x820E48B0;
		  /* 820E48B0h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 820E48B0h case    2:*/		if ( regs.CR[0].eq ) { return 0x820E48B8;  }
		/* 820E48B0h case    2:*/		return 0x820E48B4;
		  /* 820E48B4h */ case    3:  		/* li R31, 1 */
		/* 820E48B4h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 820E48B4h case    3:*/		return 0x820E48B8;
	}
	return 0x820E48B8;
} // Block from 820E48A8h-820E48B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E48B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E48B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E48B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E48B8);
		  /* 820E48B8h */ case    0:  		/* addi R4, R4, 1 */
		/* 820E48B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E48B8h case    0:*/		return 0x820E48BC;
		  /* 820E48BCh */ case    1:  		/* addi R9, R9, 4 */
		/* 820E48BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E48BCh case    1:*/		return 0x820E48C0;
		  /* 820E48C0h */ case    2:  		/* cmplw CR6, R4, R5 */
		/* 820E48C0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R5);
		/* 820E48C0h case    2:*/		return 0x820E48C4;
		  /* 820E48C4h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 820E48C4h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E4878;  }
		/* 820E48C4h case    3:*/		return 0x820E48C8;
		  /* 820E48C8h */ case    4:  		/* cmpwi CR6, R31, 0 */
		/* 820E48C8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 820E48C8h case    4:*/		return 0x820E48CC;
		  /* 820E48CCh */ case    5:  		/* bc 12, CR6_EQ, 88 */
		/* 820E48CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x820E4924;  }
		/* 820E48CCh case    5:*/		return 0x820E48D0;
		  /* 820E48D0h */ case    6:  		/* lwz R11, <#[R8 + 12]> */
		/* 820E48D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 820E48D0h case    6:*/		return 0x820E48D4;
		  /* 820E48D4h */ case    7:  		/* li R7, 0 */
		/* 820E48D4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E48D4h case    7:*/		return 0x820E48D8;
		  /* 820E48D8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820E48D8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E48D8h case    8:*/		return 0x820E48DC;
		  /* 820E48DCh */ case    9:  		/* bc 4, CR6_GT, 72 */
		/* 820E48DCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x820E4924;  }
		/* 820E48DCh case    9:*/		return 0x820E48E0;
		  /* 820E48E0h */ case   10:  		/* li R9, 0 */
		/* 820E48E0h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E48E0h case   10:*/		return 0x820E48E4;
		  /* 820E48E4h */ case   11:  		/* lwz R11, <#[R8 + 16]> */
		/* 820E48E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 820E48E4h case   11:*/		return 0x820E48E8;
		  /* 820E48E8h */ case   12:  		/* lwz R10, <#[R3 + 20]> */
		/* 820E48E8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 820E48E8h case   12:*/		return 0x820E48EC;
		  /* 820E48ECh */ case   13:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820E48ECh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E48ECh case   13:*/		return 0x820E48F0;
		  /* 820E48F0h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E48F0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E48F0h case   14:*/		return 0x820E48F4;
		  /* 820E48F4h */ case   15:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E48F4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E48F4h case   15:*/		return 0x820E48F8;
		  /* 820E48F8h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 820E48F8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E48F8h case   16:*/		return 0x820E48FC;
		  /* 820E48FCh */ case   17:  		/* rlwinm. R6, R10, 0, 7, 7 */
		/* 820E48FCh case   17:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R6,regs.R10);
		/* 820E48FCh case   17:*/		return 0x820E4900;
		  /* 820E4900h */ case   18:  		/* bc 4, CR0_EQ, 16 */
		/* 820E4900h case   18:*/		if ( !regs.CR[0].eq ) { return 0x820E4910;  }
		/* 820E4900h case   18:*/		return 0x820E4904;
		  /* 820E4904h */ case   19:  		/* oris R10, R10, 256 */
		/* 820E4904h case   19:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x100);
		/* 820E4904h case   19:*/		return 0x820E4908;
		  /* 820E4908h */ case   20:  		/* li R28, 1 */
		/* 820E4908h case   20:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820E4908h case   20:*/		return 0x820E490C;
		  /* 820E490Ch */ case   21:  		/* stw R10, <#[R11]> */
		/* 820E490Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E490Ch case   21:*/		return 0x820E4910;
	}
	return 0x820E4910;
} // Block from 820E48B8h-820E4910h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E4910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4910);
		  /* 820E4910h */ case    0:  		/* lwz R11, <#[R8 + 12]> */
		/* 820E4910h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 820E4910h case    0:*/		return 0x820E4914;
		  /* 820E4914h */ case    1:  		/* addi R7, R7, 1 */
		/* 820E4914h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820E4914h case    1:*/		return 0x820E4918;
		  /* 820E4918h */ case    2:  		/* addi R9, R9, 4 */
		/* 820E4918h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E4918h case    2:*/		return 0x820E491C;
		  /* 820E491Ch */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 820E491Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 820E491Ch case    3:*/		return 0x820E4920;
		  /* 820E4920h */ case    4:  		/* bc 12, CR6_LT, -60 */
		/* 820E4920h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E48E4;  }
		/* 820E4920h case    4:*/		return 0x820E4924;
	}
	return 0x820E4924;
} // Block from 820E4910h-820E4924h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E4924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4924);
		  /* 820E4924h */ case    0:  		/* lwz R11, <#[R3 + 12]> */
		/* 820E4924h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 820E4924h case    0:*/		return 0x820E4928;
		  /* 820E4928h */ case    1:  		/* addi R29, R29, 1 */
		/* 820E4928h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820E4928h case    1:*/		return 0x820E492C;
		  /* 820E492Ch */ case    2:  		/* addi R30, R30, 4 */
		/* 820E492Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E492Ch case    2:*/		return 0x820E4930;
		  /* 820E4930h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 820E4930h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820E4930h case    3:*/		return 0x820E4934;
		  /* 820E4934h */ case    4:  		/* bc 12, CR6_LT, -228 */
		/* 820E4934h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E4850;  }
		/* 820E4934h case    4:*/		return 0x820E4938;
		  /* 820E4938h */ case    5:  		/* cmpwi CR6, R28, 0 */
		/* 820E4938h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820E4938h case    5:*/		return 0x820E493C;
		  /* 820E493Ch */ case    6:  		/* bc 4, CR6_EQ, -260 */
		/* 820E493Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E4838;  }
		/* 820E493Ch case    6:*/		return 0x820E4940;
	}
	return 0x820E4940;
} // Block from 820E4924h-820E4940h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E4940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4940);
		  /* 820E4940h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 820E4940h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 820E4940h case    0:*/		return 0x820E4944;
		  /* 820E4944h */ case    1:  		/* li R7, 0 */
		/* 820E4944h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E4944h case    1:*/		return 0x820E4948;
		  /* 820E4948h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820E4948h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4948h case    2:*/		return 0x820E494C;
		  /* 820E494Ch */ case    3:  		/* bc 4, CR6_GT, 80 */
		/* 820E494Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x820E499C;  }
		/* 820E494Ch case    3:*/		return 0x820E4950;
		  /* 820E4950h */ case    4:  		/* li R9, 0 */
		/* 820E4950h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E4950h case    4:*/		return 0x820E4954;
		  /* 820E4954h */ case    5:  		/* lwz R11, <#[R3 + 20]> */
		/* 820E4954h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 820E4954h case    5:*/		return 0x820E4958;
		  /* 820E4958h */ case    6:  		/* lwzx R8, <#[R9 + R11]> */
		/* 820E4958h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E4958h case    6:*/		return 0x820E495C;
		  /* 820E495Ch */ case    7:  		/* lwz R10, <#[R8 + 56]> */
		/* 820E495Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000038) );
		/* 820E495Ch case    7:*/		return 0x820E4960;
		  /* 820E4960h */ case    8:  		/* cmpwi CR6, R10, -1 */
		/* 820E4960h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E4960h case    8:*/		return 0x820E4964;
		  /* 820E4964h */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 820E4964h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E4988;  }
		/* 820E4964h case    9:*/		return 0x820E4968;
		  /* 820E4968h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E4968h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E4968h case   10:*/		return 0x820E496C;
		  /* 820E496Ch */ case   11:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E496Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E496Ch case   11:*/		return 0x820E4970;
		  /* 820E4970h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820E4970h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4970h case   12:*/		return 0x820E4974;
		  /* 820E4974h */ case   13:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820E4974h case   13:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820E4974h case   13:*/		return 0x820E4978;
		  /* 820E4978h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 820E4978h case   14:*/		if ( regs.CR[0].eq ) { return 0x820E4988;  }
		/* 820E4978h case   14:*/		return 0x820E497C;
		  /* 820E497Ch */ case   15:  		/* lwz R11, <#[R8]> */
		/* 820E497Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E497Ch case   15:*/		return 0x820E4980;
		  /* 820E4980h */ case   16:  		/* oris R11, R11, 256 */
		/* 820E4980h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 820E4980h case   16:*/		return 0x820E4984;
		  /* 820E4984h */ case   17:  		/* stw R11, <#[R8]> */
		/* 820E4984h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E4984h case   17:*/		return 0x820E4988;
	}
	return 0x820E4988;
} // Block from 820E4940h-820E4988h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E4988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4988);
		  /* 820E4988h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 820E4988h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 820E4988h case    0:*/		return 0x820E498C;
		  /* 820E498Ch */ case    1:  		/* addi R7, R7, 1 */
		/* 820E498Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820E498Ch case    1:*/		return 0x820E4990;
		  /* 820E4990h */ case    2:  		/* addi R9, R9, 4 */
		/* 820E4990h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E4990h case    2:*/		return 0x820E4994;
		  /* 820E4994h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 820E4994h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 820E4994h case    3:*/		return 0x820E4998;
		  /* 820E4998h */ case    4:  		/* bc 12, CR6_LT, -68 */
		/* 820E4998h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E4954;  }
		/* 820E4998h case    4:*/		return 0x820E499C;
	}
	return 0x820E499C;
} // Block from 820E4988h-820E499Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E499Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E499C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E499C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E499C);
		  /* 820E499Ch */ case    0:  		/* li R3, 0 */
		/* 820E499Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E499Ch case    0:*/		return 0x820E49A0;
		  /* 820E49A0h */ case    1:  		/* b -341752 */
		/* 820E49A0h case    1:*/		return 0x820912A8;
		/* 820E49A0h case    1:*/		return 0x820E49A4;
		  /* 820E49A4h */ case    2:  		/* nop */
		/* 820E49A4h case    2:*/		cpu::op::nop();
		/* 820E49A4h case    2:*/		return 0x820E49A8;
	}
	return 0x820E49A8;
} // Block from 820E499Ch-820E49A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E49A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E49A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E49A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E49A8);
		  /* 820E49A8h */ case    0:  		/* mfspr R12, LR */
		/* 820E49A8h case    0:*/		regs.R12 = regs.LR;
		/* 820E49A8h case    0:*/		return 0x820E49AC;
		  /* 820E49ACh */ case    1:  		/* bl -341844 */
		/* 820E49ACh case    1:*/		regs.LR = 0x820E49B0; return 0x82091258;
		/* 820E49ACh case    1:*/		return 0x820E49B0;
		  /* 820E49B0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820E49B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820E49B0h case    2:*/		return 0x820E49B4;
		  /* 820E49B4h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E49B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E49B4h case    3:*/		return 0x820E49B8;
		  /* 820E49B8h */ case    4:  		/* lis R10, 4416 */
		/* 820E49B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x1140);
		/* 820E49B8h case    4:*/		return 0x820E49BC;
		  /* 820E49BCh */ case    5:  		/* mr R30, R3 */
		/* 820E49BCh case    5:*/		regs.R30 = regs.R3;
		/* 820E49BCh case    5:*/		return 0x820E49C0;
		  /* 820E49C0h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 820E49C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E49C0h case    6:*/		return 0x820E49C4;
		  /* 820E49C4h */ case    7:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 820E49C4h case    7:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 820E49C4h case    7:*/		return 0x820E49C8;
		  /* 820E49C8h */ case    8:  		/* cmplw CR6, R9, R10 */
		/* 820E49C8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E49C8h case    8:*/		return 0x820E49CC;
		  /* 820E49CCh */ case    9:  		/* bc 4, CR6_EQ, 424 */
		/* 820E49CCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E4B74;  }
		/* 820E49CCh case    9:*/		return 0x820E49D0;
		  /* 820E49D0h */ case   10:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820E49D0h case   10:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820E49D0h case   10:*/		return 0x820E49D4;
		  /* 820E49D4h */ case   11:  		/* cmplwi CR6, R11, 1 */
		/* 820E49D4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820E49D4h case   11:*/		return 0x820E49D8;
		  /* 820E49D8h */ case   12:  		/* bc 4, CR6_EQ, 412 */
		/* 820E49D8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E4B74;  }
		/* 820E49D8h case   12:*/		return 0x820E49DC;
		  /* 820E49DCh */ case   13:  		/* lwz R11, <#[R3 + 112]> */
		/* 820E49DCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000070) );
		/* 820E49DCh case   13:*/		return 0x820E49E0;
		  /* 820E49E0h */ case   14:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 820E49E0h case   14:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 820E49E0h case   14:*/		return 0x820E49E4;
		  /* 820E49E4h */ case   15:  		/* bc 4, CR0_EQ, 40 */
		/* 820E49E4h case   15:*/		if ( !regs.CR[0].eq ) { return 0x820E4A0C;  }
		/* 820E49E4h case   15:*/		return 0x820E49E8;
		  /* 820E49E8h */ case   16:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E49E8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E49E8h case   16:*/		return 0x820E49EC;
		  /* 820E49ECh */ case   17:  		/* lis R10, -32254 */
		/* 820E49ECh case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E49ECh case   17:*/		return 0x820E49F0;
		  /* 820E49F0h */ case   18:  		/* li R5, 4552 */
		/* 820E49F0h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x11C8);
		/* 820E49F0h case   18:*/		return 0x820E49F4;
		  /* 820E49F4h */ case   19:  		/* addi R6, R10, -18400 */
		/* 820E49F4h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFB820);
		/* 820E49F4h case   19:*/		return 0x820E49F8;
		  /* 820E49F8h */ case   20:  		/* lwz R4, <#[R11 + 60]> */
		/* 820E49F8h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E49F8h case   20:*/		return 0x820E49FC;
		  /* 820E49FCh */ case   21:  		/* bl 171316 */
		/* 820E49FCh case   21:*/		regs.LR = 0x820E4A00; return 0x8210E730;
		/* 820E49FCh case   21:*/		return 0x820E4A00;
		  /* 820E4A00h */ case   22:  		/* lis R3, -32768 */
		/* 820E4A00h case   22:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820E4A00h case   22:*/		return 0x820E4A04;
		  /* 820E4A04h */ case   23:  		/* ori R3, R3, 16389 */
		/* 820E4A04h case   23:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820E4A04h case   23:*/		return 0x820E4A08;
		  /* 820E4A08h */ case   24:  		/* b 368 */
		/* 820E4A08h case   24:*/		return 0x820E4B78;
		/* 820E4A08h case   24:*/		return 0x820E4A0C;
	}
	return 0x820E4A0C;
} // Block from 820E49A8h-820E4A0Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E4A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4A0C);
		  /* 820E4A0Ch */ case    0:  		/* li R3, 116 */
		/* 820E4A0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E4A0Ch case    0:*/		return 0x820E4A10;
		  /* 820E4A10h */ case    1:  		/* bl 97160 */
		/* 820E4A10h case    1:*/		regs.LR = 0x820E4A14; return 0x820FC598;
		/* 820E4A10h case    1:*/		return 0x820E4A14;
		  /* 820E4A14h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E4A14h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E4A14h case    2:*/		return 0x820E4A18;
		  /* 820E4A18h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 820E4A18h case    3:*/		if ( regs.CR[0].eq ) { return 0x820E4A28;  }
		/* 820E4A18h case    3:*/		return 0x820E4A1C;
		  /* 820E4A1Ch */ case    4:  		/* bl 95364 */
		/* 820E4A1Ch case    4:*/		regs.LR = 0x820E4A20; return 0x820FBEA0;
		/* 820E4A1Ch case    4:*/		return 0x820E4A20;
		  /* 820E4A20h */ case    5:  		/* mr R31, R3 */
		/* 820E4A20h case    5:*/		regs.R31 = regs.R3;
		/* 820E4A20h case    5:*/		return 0x820E4A24;
		  /* 820E4A24h */ case    6:  		/* b 8 */
		/* 820E4A24h case    6:*/		return 0x820E4A2C;
		/* 820E4A24h case    6:*/		return 0x820E4A28;
	}
	return 0x820E4A28;
} // Block from 820E4A0Ch-820E4A28h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E4A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4A28);
		  /* 820E4A28h */ case    0:  		/* li R31, 0 */
		/* 820E4A28h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E4A28h case    0:*/		return 0x820E4A2C;
	}
	return 0x820E4A2C;
} // Block from 820E4A28h-820E4A2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E4A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4A2C);
		  /* 820E4A2Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E4A2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E4A2Ch case    0:*/		return 0x820E4A30;
		  /* 820E4A30h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E4A30h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E4A40;  }
		/* 820E4A30h case    1:*/		return 0x820E4A34;
		  /* 820E4A34h */ case    2:  		/* lis R3, -32761 */
		/* 820E4A34h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E4A34h case    2:*/		return 0x820E4A38;
	}
	return 0x820E4A38;
} // Block from 820E4A2Ch-820E4A38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E4A38h
// Function '?SuppressAdditionalErrors@CShaderProgram@D3DXShader@@IAAJPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4A38);
		  /* 820E4A38h */ case    0:  		/* ori R3, R3, 14 */
		/* 820E4A38h case    0:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E4A38h case    0:*/		return 0x820E4A3C;
		  /* 820E4A3Ch */ case    1:  		/* b 316 */
		/* 820E4A3Ch case    1:*/		return 0x820E4B78;
		/* 820E4A3Ch case    1:*/		return 0x820E4A40;
	}
	return 0x820E4A40;
} // Block from 820E4A38h-820E4A40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E4A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4A40);
		  /* 820E4A40h */ case    0:  		/* lis R4, 29776 */
		/* 820E4A40h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x7450);
		/* 820E4A40h case    0:*/		return 0x820E4A44;
		  /* 820E4A44h */ case    1:  		/* li R7, 0 */
		/* 820E4A44h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E4A44h case    1:*/		return 0x820E4A48;
		  /* 820E4A48h */ case    2:  		/* li R6, 1 */
		/* 820E4A48h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E4A48h case    2:*/		return 0x820E4A4C;
		  /* 820E4A4Ch */ case    3:  		/* li R5, 2 */
		/* 820E4A4Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820E4A4Ch case    3:*/		return 0x820E4A50;
		  /* 820E4A50h */ case    4:  		/* ori R4, R4, 1 */
		/* 820E4A50h case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E4A50h case    4:*/		return 0x820E4A54;
		  /* 820E4A54h */ case    5:  		/* mr R3, R31 */
		/* 820E4A54h case    5:*/		regs.R3 = regs.R31;
		/* 820E4A54h case    5:*/		return 0x820E4A58;
		  /* 820E4A58h */ case    6:  		/* bl 97240 */
		/* 820E4A58h case    6:*/		regs.LR = 0x820E4A5C; return 0x820FC630;
		/* 820E4A58h case    6:*/		return 0x820E4A5C;
		  /* 820E4A5Ch */ case    7:  		/* or. R29, R3, R3 */
		/* 820E4A5Ch case    7:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E4A5Ch case    7:*/		return 0x820E4A60;
		  /* 820E4A60h */ case    8:  		/* mr R3, R31 */
		/* 820E4A60h case    8:*/		regs.R3 = regs.R31;
		/* 820E4A60h case    8:*/		return 0x820E4A64;
		  /* 820E4A64h */ case    9:  		/* bc 4, CR0_LT, 24 */
		/* 820E4A64h case    9:*/		if ( !regs.CR[0].lt ) { return 0x820E4A7C;  }
		/* 820E4A64h case    9:*/		return 0x820E4A68;
		  /* 820E4A68h */ case   10:  		/* bl 1280344 */
		/* 820E4A68h case   10:*/		regs.LR = 0x820E4A6C; return 0x8221D3C0;
		/* 820E4A68h case   10:*/		return 0x820E4A6C;
		  /* 820E4A6Ch */ case   11:  		/* mr R3, R31 */
		/* 820E4A6Ch case   11:*/		regs.R3 = regs.R31;
		/* 820E4A6Ch case   11:*/		return 0x820E4A70;
		  /* 820E4A70h */ case   12:  		/* bl 97152 */
		/* 820E4A70h case   12:*/		regs.LR = 0x820E4A74; return 0x820FC5F0;
		/* 820E4A70h case   12:*/		return 0x820E4A74;
		  /* 820E4A74h */ case   13:  		/* mr R3, R29 */
		/* 820E4A74h case   13:*/		regs.R3 = regs.R29;
		/* 820E4A74h case   13:*/		return 0x820E4A78;
		  /* 820E4A78h */ case   14:  		/* b 256 */
		/* 820E4A78h case   14:*/		return 0x820E4B78;
		/* 820E4A78h case   14:*/		return 0x820E4A7C;
	}
	return 0x820E4A7C;
} // Block from 820E4A40h-820E4A7Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E4A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4A7C);
		  /* 820E4A7Ch */ case    0:  		/* lwz R4, <#[R30 + 260]> */
		/* 820E4A7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 820E4A7Ch case    0:*/		return 0x820E4A80;
		  /* 820E4A80h */ case    1:  		/* bl 95344 */
		/* 820E4A80h case    1:*/		regs.LR = 0x820E4A84; return 0x820FBEF0;
		/* 820E4A80h case    1:*/		return 0x820E4A84;
		  /* 820E4A84h */ case    2:  		/* or. R29, R3, R3 */
		/* 820E4A84h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E4A84h case    2:*/		return 0x820E4A88;
		  /* 820E4A88h */ case    3:  		/* bc 4, CR0_LT, 12 */
		/* 820E4A88h case    3:*/		if ( !regs.CR[0].lt ) { return 0x820E4A94;  }
		/* 820E4A88h case    3:*/		return 0x820E4A8C;
		  /* 820E4A8Ch */ case    4:  		/* mr R3, R31 */
		/* 820E4A8Ch case    4:*/		regs.R3 = regs.R31;
		/* 820E4A8Ch case    4:*/		return 0x820E4A90;
		  /* 820E4A90h */ case    5:  		/* b -40 */
		/* 820E4A90h case    5:*/		return 0x820E4A68;
		/* 820E4A90h case    5:*/		return 0x820E4A94;
	}
	return 0x820E4A94;
} // Block from 820E4A7Ch-820E4A94h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E4A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4A94);
		  /* 820E4A94h */ case    0:  		/* lis R11, -32256 */
		/* 820E4A94h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E4A94h case    0:*/		return 0x820E4A98;
		  /* 820E4A98h */ case    1:  		/* li R6, 0 */
		/* 820E4A98h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E4A98h case    1:*/		return 0x820E4A9C;
		  /* 820E4A9Ch */ case    2:  		/* li R5, 0 */
		/* 820E4A9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E4A9Ch case    2:*/		return 0x820E4AA0;
		  /* 820E4AA0h */ case    3:  		/* li R4, 0 */
		/* 820E4AA0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E4AA0h case    3:*/		return 0x820E4AA4;
		  /* 820E4AA4h */ case    4:  		/* mr R3, R30 */
		/* 820E4AA4h case    4:*/		regs.R3 = regs.R30;
		/* 820E4AA4h case    4:*/		return 0x820E4AA8;
		  /* 820E4AA8h */ case    5:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 820E4AA8h case    5:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 820E4AA8h case    5:*/		return 0x820E4AAC;
		  /* 820E4AACh */ case    6:  		/* bl 100220 */
		/* 820E4AACh case    6:*/		regs.LR = 0x820E4AB0; return 0x820FD228;
		/* 820E4AACh case    6:*/		return 0x820E4AB0;
		  /* 820E4AB0h */ case    7:  		/* mr R28, R3 */
		/* 820E4AB0h case    7:*/		regs.R28 = regs.R3;
		/* 820E4AB0h case    7:*/		return 0x820E4AB4;
		  /* 820E4AB4h */ case    8:  		/* cmpwi CR6, R3, -1 */
		/* 820E4AB4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E4AB4h case    8:*/		return 0x820E4AB8;
		  /* 820E4AB8h */ case    9:  		/* bc 12, CR6_EQ, -44 */
		/* 820E4AB8h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E4A8C;  }
		/* 820E4AB8h case    9:*/		return 0x820E4ABC;
		  /* 820E4ABCh */ case   10:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E4ABCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E4ABCh case   10:*/		return 0x820E4AC0;
		  /* 820E4AC0h */ case   11:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E4AC0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E4AC0h case   11:*/		return 0x820E4AC4;
		  /* 820E4AC4h */ case   12:  		/* lwz R9, <#[R30 + 20]> */
		/* 820E4AC4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 820E4AC4h case   12:*/		return 0x820E4AC8;
		  /* 820E4AC8h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E4AC8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E4AC8h case   13:*/		return 0x820E4ACC;
		  /* 820E4ACCh */ case   14:  		/* lwzx R29, <#[R10 + R9]> */
		/* 820E4ACCh case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E4ACCh case   14:*/		return 0x820E4AD0;
		  /* 820E4AD0h */ case   15:  		/* mr R3, R29 */
		/* 820E4AD0h case   15:*/		regs.R3 = regs.R29;
		/* 820E4AD0h case   15:*/		return 0x820E4AD4;
		  /* 820E4AD4h */ case   16:  		/* lwz R11, <#[R11]> */
		/* 820E4AD4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4AD4h case   16:*/		return 0x820E4AD8;
		  /* 820E4AD8h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4AD8h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4AD8h case   17:*/		return 0x820E4ADC;
		  /* 820E4ADCh */ case   18:  		/* lwzx R4, <#[R11 + R9]> */
		/* 820E4ADCh case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E4ADCh case   18:*/		return 0x820E4AE0;
	}
	return 0x820E4AE0;
} // Block from 820E4A94h-820E4AE0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E4AE0h
// Function '?ValidateArguments@CShaderProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4AE0);
		  /* 820E4AE0h */ case    0:  		/* bl 98504 */
		/* 820E4AE0h case    0:*/		regs.LR = 0x820E4AE4; return 0x820FCBA8;
		/* 820E4AE0h case    0:*/		return 0x820E4AE4;
		  /* 820E4AE4h */ case    1:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E4AE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E4AE4h case    1:*/		return 0x820E4AE8;
		  /* 820E4AE8h */ case    2:  		/* lwz R10, <#[R31 + 16]> */
		/* 820E4AE8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 820E4AE8h case    2:*/		return 0x820E4AEC;
		  /* 820E4AECh */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4AECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4AECh case    3:*/		return 0x820E4AF0;
		  /* 820E4AF0h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 820E4AF0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4AF0h case    4:*/		return 0x820E4AF4;
		  /* 820E4AF4h */ case    5:  		/* stw R11, <#[R10]> */
		/* 820E4AF4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E4AF4h case    5:*/		return 0x820E4AF8;
		  /* 820E4AF8h */ case    6:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E4AF8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E4AF8h case    6:*/		return 0x820E4AFC;
		  /* 820E4AFCh */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E4AFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E4AFCh case    7:*/		return 0x820E4B00;
		  /* 820E4B00h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 820E4B00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4B00h case    8:*/		return 0x820E4B04;
		  /* 820E4B04h */ case    9:  		/* lwz R10, <#[R31 + 8]> */
		/* 820E4B04h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820E4B04h case    9:*/		return 0x820E4B08;
		  /* 820E4B08h */ case   10:  		/* stw R11, <#[R10]> */
		/* 820E4B08h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E4B08h case   10:*/		return 0x820E4B0C;
		  /* 820E4B0Ch */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E4B0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E4B0Ch case   11:*/		return 0x820E4B10;
		  /* 820E4B10h */ case   12:  		/* stw R28, <#[R11 + 4]> */
		/* 820E4B10h case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 820E4B10h case   12:*/		return 0x820E4B14;
		  /* 820E4B14h */ case   13:  		/* lwz R11, <#[R29 + 56]> */
		/* 820E4B14h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 820E4B14h case   13:*/		return 0x820E4B18;
		  /* 820E4B18h */ case   14:  		/* cmpwi CR6, R11, -1 */
		/* 820E4B18h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E4B18h case   14:*/		return 0x820E4B1C;
		  /* 820E4B1Ch */ case   15:  		/* bc 4, CR6_EQ, 36 */
		/* 820E4B1Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E4B40;  }
		/* 820E4B1Ch case   15:*/		return 0x820E4B20;
		  /* 820E4B20h */ case   16:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E4B20h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E4B20h case   16:*/		return 0x820E4B24;
		  /* 820E4B24h */ case   17:  		/* lwz R10, <#[R29 + 60]> */
		/* 820E4B24h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000003C) );
		/* 820E4B24h case   17:*/		return 0x820E4B28;
		  /* 820E4B28h */ case   18:  		/* oris R10, R10, 8 */
		/* 820E4B28h case   18:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 820E4B28h case   18:*/		return 0x820E4B2C;
		  /* 820E4B2Ch */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E4B2Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E4B2Ch case   19:*/		return 0x820E4B30;
		  /* 820E4B30h */ case   20:  		/* lwz R11, <#[R11]> */
		/* 820E4B30h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4B30h case   20:*/		return 0x820E4B34;
		  /* 820E4B34h */ case   21:  		/* stw R10, <#[R29 + 60]> */
		/* 820E4B34h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x0000003C) );
		/* 820E4B34h case   21:*/		return 0x820E4B38;
		  /* 820E4B38h */ case   22:  		/* stw R11, <#[R29 + 56]> */
		/* 820E4B38h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 820E4B38h case   22:*/		return 0x820E4B3C;
		  /* 820E4B3Ch */ case   23:  		/* b 16 */
		/* 820E4B3Ch case   23:*/		return 0x820E4B4C;
		/* 820E4B3Ch case   23:*/		return 0x820E4B40;
	}
	return 0x820E4B40;
} // Block from 820E4AE0h-820E4B40h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E4B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4B40);
		  /* 820E4B40h */ case    0:  		/* lwz R11, <#[R29 + 60]> */
		/* 820E4B40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000003C) );
		/* 820E4B40h case    0:*/		return 0x820E4B44;
		  /* 820E4B44h */ case    1:  		/* xoris R11, R11, 8 */
		/* 820E4B44h case    1:*/		cpu::op::xoris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820E4B44h case    1:*/		return 0x820E4B48;
		  /* 820E4B48h */ case    2:  		/* stw R11, <#[R29 + 60]> */
		/* 820E4B48h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000003C) );
		/* 820E4B48h case    2:*/		return 0x820E4B4C;
	}
	return 0x820E4B4C;
} // Block from 820E4B40h-820E4B4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E4B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4B4C);
		  /* 820E4B4Ch */ case    0:  		/* mr R4, R31 */
		/* 820E4B4Ch case    0:*/		regs.R4 = regs.R31;
		/* 820E4B4Ch case    0:*/		return 0x820E4B50;
		  /* 820E4B50h */ case    1:  		/* lwz R3, <#[R30 + 260]> */
		/* 820E4B50h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000104) );
		/* 820E4B50h case    1:*/		return 0x820E4B54;
		  /* 820E4B54h */ case    2:  		/* bl 97788 */
		/* 820E4B54h case    2:*/		regs.LR = 0x820E4B58; return 0x820FC950;
		/* 820E4B54h case    2:*/		return 0x820E4B58;
		  /* 820E4B58h */ case    3:  		/* mr R30, R3 */
		/* 820E4B58h case    3:*/		regs.R30 = regs.R3;
		/* 820E4B58h case    3:*/		return 0x820E4B5C;
		  /* 820E4B5Ch */ case    4:  		/* mr R3, R31 */
		/* 820E4B5Ch case    4:*/		regs.R3 = regs.R31;
		/* 820E4B5Ch case    4:*/		return 0x820E4B60;
		  /* 820E4B60h */ case    5:  		/* bl 1280096 */
		/* 820E4B60h case    5:*/		regs.LR = 0x820E4B64; return 0x8221D3C0;
		/* 820E4B60h case    5:*/		return 0x820E4B64;
		  /* 820E4B64h */ case    6:  		/* mr R3, R31 */
		/* 820E4B64h case    6:*/		regs.R3 = regs.R31;
		/* 820E4B64h case    6:*/		return 0x820E4B68;
		  /* 820E4B68h */ case    7:  		/* bl 96904 */
		/* 820E4B68h case    7:*/		regs.LR = 0x820E4B6C; return 0x820FC5F0;
		/* 820E4B68h case    7:*/		return 0x820E4B6C;
		  /* 820E4B6Ch */ case    8:  		/* mr R3, R30 */
		/* 820E4B6Ch case    8:*/		regs.R3 = regs.R30;
		/* 820E4B6Ch case    8:*/		return 0x820E4B70;
		  /* 820E4B70h */ case    9:  		/* b 8 */
		/* 820E4B70h case    9:*/		return 0x820E4B78;
		/* 820E4B70h case    9:*/		return 0x820E4B74;
	}
	return 0x820E4B74;
} // Block from 820E4B4Ch-820E4B74h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E4B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4B74);
		  /* 820E4B74h */ case    0:  		/* li R3, 1 */
		/* 820E4B74h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E4B74h case    0:*/		return 0x820E4B78;
	}
	return 0x820E4B78;
} // Block from 820E4B74h-820E4B78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E4B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4B78);
		  /* 820E4B78h */ case    0:  		/* addi R1, R1, 128 */
		/* 820E4B78h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820E4B78h case    0:*/		return 0x820E4B7C;
		  /* 820E4B7Ch */ case    1:  		/* b -342228 */
		/* 820E4B7Ch case    1:*/		return 0x820912A8;
		/* 820E4B7Ch case    1:*/		return 0x820E4B80;
	}
	return 0x820E4B80;
} // Block from 820E4B78h-820E4B80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E4B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4B80);
		  /* 820E4B80h */ case    0:  		/* mfspr R12, LR */
		/* 820E4B80h case    0:*/		regs.R12 = regs.LR;
		/* 820E4B80h case    0:*/		return 0x820E4B84;
		  /* 820E4B84h */ case    1:  		/* bl -342344 */
		/* 820E4B84h case    1:*/		regs.LR = 0x820E4B88; return 0x8209123C;
		/* 820E4B84h case    1:*/		return 0x820E4B88;
		  /* 820E4B88h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820E4B88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820E4B88h case    2:*/		return 0x820E4B8C;
		  /* 820E4B8Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E4B8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E4B8Ch case    3:*/		return 0x820E4B90;
		  /* 820E4B90h */ case    4:  		/* lis R22, 8320 */
		/* 820E4B90h case    4:*/		cpu::op::lis<0>(regs,&regs.R22,0x2080);
		/* 820E4B90h case    4:*/		return 0x820E4B94;
		  /* 820E4B94h */ case    5:  		/* mr R31, R3 */
		/* 820E4B94h case    5:*/		regs.R31 = regs.R3;
		/* 820E4B94h case    5:*/		return 0x820E4B98;
		  /* 820E4B98h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 820E4B98h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4B98h case    6:*/		return 0x820E4B9C;
		  /* 820E4B9Ch */ case    7:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 820E4B9Ch case    7:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 820E4B9Ch case    7:*/		return 0x820E4BA0;
		  /* 820E4BA0h */ case    8:  		/* rlwinm R25, R11, 0, 12, 31 */
		/* 820E4BA0h case    8:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R25,regs.R11);
		/* 820E4BA0h case    8:*/		return 0x820E4BA4;
		  /* 820E4BA4h */ case    9:  		/* cmplw CR6, R10, R22 */
		/* 820E4BA4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 820E4BA4h case    9:*/		return 0x820E4BA8;
		  /* 820E4BA8h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 820E4BA8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E4BB4;  }
		/* 820E4BA8h case   10:*/		return 0x820E4BAC;
		  /* 820E4BACh */ case   11:  		/* li R3, 1 */
		/* 820E4BACh case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E4BACh case   11:*/		return 0x820E4BB0;
		  /* 820E4BB0h */ case   12:  		/* b 568 */
		/* 820E4BB0h case   12:*/		return 0x820E4DE8;
		/* 820E4BB0h case   12:*/		return 0x820E4BB4;
	}
	return 0x820E4BB4;
} // Block from 820E4B80h-820E4BB4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E4BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4BB4);
		  /* 820E4BB4h */ case    0:  		/* li R4, 0 */
		/* 820E4BB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E4BB4h case    0:*/		return 0x820E4BB8;
		  /* 820E4BB8h */ case    1:  		/* li R23, 0 */
		/* 820E4BB8h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 820E4BB8h case    1:*/		return 0x820E4BBC;
		  /* 820E4BBCh */ case    2:  		/* li R24, 0 */
		/* 820E4BBCh case    2:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820E4BBCh case    2:*/		return 0x820E4BC0;
		  /* 820E4BC0h */ case    3:  		/* li R6, 0 */
		/* 820E4BC0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E4BC0h case    3:*/		return 0x820E4BC4;
		  /* 820E4BC4h */ case    4:  		/* cmplwi CR6, R25, 0 */
		/* 820E4BC4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820E4BC4h case    4:*/		return 0x820E4BC8;
		  /* 820E4BC8h */ case    5:  		/* bc 12, CR6_EQ, 136 */
		/* 820E4BC8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E4C50;  }
		/* 820E4BC8h case    5:*/		return 0x820E4BCC;
		  /* 820E4BCCh */ case    6:  		/* lwz R7, <#[R31 + 260]> */
		/* 820E4BCCh case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4BCCh case    6:*/		return 0x820E4BD0;
		  /* 820E4BD0h */ case    7:  		/* li R9, 0 */
		/* 820E4BD0h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E4BD0h case    7:*/		return 0x820E4BD4;
		  /* 820E4BD4h */ case    8:  		/* lwz R8, <#[R31 + 20]> */
		/* 820E4BD4h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4BD4h case    8:*/		return 0x820E4BD8;
		  /* 820E4BD8h */ case    9:  		/* lwz R5, <#[R7 + 8]> */
		/* 820E4BD8h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x00000008) );
		/* 820E4BD8h case    9:*/		return 0x820E4BDC;
		  /* 820E4BDCh */ case   10:  		/* add R11, R24, R6 */
		/* 820E4BDCh case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R24,regs.R6);
		/* 820E4BDCh case   10:*/		return 0x820E4BE0;
		  /* 820E4BE0h */ case   11:  		/* lwz R10, <#[R7 + 16]> */
		/* 820E4BE0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000010) );
		/* 820E4BE0h case   11:*/		return 0x820E4BE4;
		  /* 820E4BE4h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4BE4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4BE4h case   12:*/		return 0x820E4BE8;
		  /* 820E4BE8h */ case   13:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E4BE8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E4BE8h case   13:*/		return 0x820E4BEC;
		  /* 820E4BECh */ case   14:  		/* lwzx R11, <#[R11 + R5]> */
		/* 820E4BECh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 820E4BECh case   14:*/		return 0x820E4BF0;
		  /* 820E4BF0h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E4BF0h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E4BF0h case   15:*/		return 0x820E4BF4;
		  /* 820E4BF4h */ case   16:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 820E4BF4h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 820E4BF4h case   16:*/		return 0x820E4BF8;
		  /* 820E4BF8h */ case   17:  		/* lwzx R11, <#[R10 + R8]> */
		/* 820E4BF8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E4BF8h case   17:*/		return 0x820E4BFC;
		  /* 820E4BFCh */ case   18:  		/* lwzx R10, <#[R3 + R8]> */
		/* 820E4BFCh case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R8 + 0x00000000) );
		/* 820E4BFCh case   18:*/		return 0x820E4C00;
		  /* 820E4C00h */ case   19:  		/* lwz R3, <#[R11 + 4]> */
		/* 820E4C00h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 820E4C00h case   19:*/		return 0x820E4C04;
		  /* 820E4C04h */ case   20:  		/* lwz R30, <#[R10 + 4]> */
		/* 820E4C04h case   20:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000004) );
		/* 820E4C04h case   20:*/		return 0x820E4C08;
		  /* 820E4C08h */ case   21:  		/* cmplw CR6, R30, R3 */
		/* 820E4C08h case   21:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 820E4C08h case   21:*/		return 0x820E4C0C;
		  /* 820E4C0Ch */ case   22:  		/* bc 4, CR6_EQ, 68 */
		/* 820E4C0Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x820E4C50;  }
		/* 820E4C0Ch case   22:*/		return 0x820E4C10;
		  /* 820E4C10h */ case   23:  		/* lwz R3, <#[R10 + 8]> */
		/* 820E4C10h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 820E4C10h case   23:*/		return 0x820E4C14;
		  /* 820E4C14h */ case   24:  		/* lwz R30, <#[R11 + 8]> */
		/* 820E4C14h case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 820E4C14h case   24:*/		return 0x820E4C18;
		  /* 820E4C18h */ case   25:  		/* cmplw CR6, R3, R30 */
		/* 820E4C18h case   25:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 820E4C18h case   25:*/		return 0x820E4C1C;
		  /* 820E4C1Ch */ case   26:  		/* bc 4, CR6_EQ, 52 */
		/* 820E4C1Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x820E4C50;  }
		/* 820E4C1Ch case   26:*/		return 0x820E4C20;
		  /* 820E4C20h */ case   27:  		/* lwz R3, <#[R10 + 12]> */
		/* 820E4C20h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E4C20h case   27:*/		return 0x820E4C24;
		  /* 820E4C24h */ case   28:  		/* lwz R30, <#[R11 + 12]> */
		/* 820E4C24h case   28:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E4C24h case   28:*/		return 0x820E4C28;
		  /* 820E4C28h */ case   29:  		/* cmplw CR6, R3, R30 */
		/* 820E4C28h case   29:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 820E4C28h case   29:*/		return 0x820E4C2C;
		  /* 820E4C2Ch */ case   30:  		/* bc 4, CR6_EQ, 36 */
		/* 820E4C2Ch case   30:*/		if ( !regs.CR[6].eq ) { return 0x820E4C50;  }
		/* 820E4C2Ch case   30:*/		return 0x820E4C30;
		  /* 820E4C30h */ case   31:  		/* lwz R10, <#[R10 + 16]> */
		/* 820E4C30h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820E4C30h case   31:*/		return 0x820E4C34;
		  /* 820E4C34h */ case   32:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4C34h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4C34h case   32:*/		return 0x820E4C38;
		  /* 820E4C38h */ case   33:  		/* cmplw CR6, R10, R11 */
		/* 820E4C38h case   33:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E4C38h case   33:*/		return 0x820E4C3C;
		  /* 820E4C3Ch */ case   34:  		/* bc 4, CR6_EQ, 20 */
		/* 820E4C3Ch case   34:*/		if ( !regs.CR[6].eq ) { return 0x820E4C50;  }
		/* 820E4C3Ch case   34:*/		return 0x820E4C40;
		  /* 820E4C40h */ case   35:  		/* addi R6, R6, 1 */
		/* 820E4C40h case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820E4C40h case   35:*/		return 0x820E4C44;
		  /* 820E4C44h */ case   36:  		/* addi R9, R9, 4 */
		/* 820E4C44h case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E4C44h case   36:*/		return 0x820E4C48;
		  /* 820E4C48h */ case   37:  		/* cmplw CR6, R6, R25 */
		/* 820E4C48h case   37:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R25);
		/* 820E4C48h case   37:*/		return 0x820E4C4C;
		  /* 820E4C4Ch */ case   38:  		/* bc 12, CR6_LT, -112 */
		/* 820E4C4Ch case   38:*/		if ( regs.CR[6].lt ) { return 0x820E4BDC;  }
		/* 820E4C4Ch case   38:*/		return 0x820E4C50;
	}
	return 0x820E4C50;
} // Block from 820E4BB4h-820E4C50h (39 instructions)

//////////////////////////////////////////////////////
// Block at 820E4C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4C50);
		  /* 820E4C50h */ case    0:  		/* cmplw CR6, R6, R25 */
		/* 820E4C50h case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R25);
		/* 820E4C50h case    0:*/		return 0x820E4C54;
		  /* 820E4C54h */ case    1:  		/* bc 12, CR6_EQ, 380 */
		/* 820E4C54h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E4DD0;  }
		/* 820E4C54h case    1:*/		return 0x820E4C58;
		  /* 820E4C58h */ case    2:  		/* li R11, 1 */
		/* 820E4C58h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820E4C58h case    2:*/		return 0x820E4C5C;
		  /* 820E4C5Ch */ case    3:  		/* mr R4, R25 */
		/* 820E4C5Ch case    3:*/		regs.R4 = regs.R25;
		/* 820E4C5Ch case    3:*/		return 0x820E4C60;
		  /* 820E4C60h */ case    4:  		/* mr R6, R25 */
		/* 820E4C60h case    4:*/		regs.R6 = regs.R25;
		/* 820E4C60h case    4:*/		return 0x820E4C64;
		  /* 820E4C64h */ case    5:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 820E4C64h case    5:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 820E4C64h case    5:*/		return 0x820E4C68;
		  /* 820E4C68h */ case    6:  		/* mr R5, R25 */
		/* 820E4C68h case    6:*/		regs.R5 = regs.R25;
		/* 820E4C68h case    6:*/		return 0x820E4C6C;
		  /* 820E4C6Ch */ case    7:  		/* mr R3, R31 */
		/* 820E4C6Ch case    7:*/		regs.R3 = regs.R31;
		/* 820E4C6Ch case    7:*/		return 0x820E4C70;
		  /* 820E4C70h */ case    8:  		/* bl 99928 */
		/* 820E4C70h case    8:*/		regs.LR = 0x820E4C74; return 0x820FD2C8;
		/* 820E4C70h case    8:*/		return 0x820E4C74;
		  /* 820E4C74h */ case    9:  		/* mr R27, R3 */
		/* 820E4C74h case    9:*/		regs.R27 = regs.R3;
		/* 820E4C74h case    9:*/		return 0x820E4C78;
		  /* 820E4C78h */ case   10:  		/* cmpwi CR6, R3, -1 */
		/* 820E4C78h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E4C78h case   10:*/		return 0x820E4C7C;
		  /* 820E4C7Ch */ case   11:  		/* bc 12, CR6_EQ, 372 */
		/* 820E4C7Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820E4DF0;  }
		/* 820E4C7Ch case   11:*/		return 0x820E4C80;
		  /* 820E4C80h */ case   12:  		/* lwz R11, <#[R31 + 24]> */
		/* 820E4C80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820E4C80h case   12:*/		return 0x820E4C84;
		  /* 820E4C84h */ case   13:  		/* rlwinm R26, R3, 2, 0, 29 */
		/* 820E4C84h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R3);
		/* 820E4C84h case   13:*/		return 0x820E4C88;
		  /* 820E4C88h */ case   14:  		/* li R28, 0 */
		/* 820E4C88h case   14:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820E4C88h case   14:*/		return 0x820E4C8C;
		  /* 820E4C8Ch */ case   15:  		/* cmplwi CR6, R25, 0 */
		/* 820E4C8Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820E4C8Ch case   15:*/		return 0x820E4C90;
		  /* 820E4C90h */ case   16:  		/* lwzx R29, <#[R26 + R11]> */
		/* 820E4C90h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + regs.R11 + 0x00000000) );
		/* 820E4C90h case   16:*/		return 0x820E4C94;
		  /* 820E4C94h */ case   17:  		/* bc 12, CR6_EQ, 208 */
		/* 820E4C94h case   17:*/		if ( regs.CR[6].eq ) { return 0x820E4D64;  }
		/* 820E4C94h case   17:*/		return 0x820E4C98;
		  /* 820E4C98h */ case   18:  		/* li R30, 0 */
		/* 820E4C98h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E4C98h case   18:*/		return 0x820E4C9C;
		  /* 820E4C9Ch */ case   19:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4C9Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4C9Ch case   19:*/		return 0x820E4CA0;
		  /* 820E4CA0h */ case   20:  		/* add R10, R24, R28 */
		/* 820E4CA0h case   20:*/		cpu::op::add<0>(regs,&regs.R10,regs.R24,regs.R28);
		/* 820E4CA0h case   20:*/		return 0x820E4CA4;
		  /* 820E4CA4h */ case   21:  		/* lwz R9, <#[R29 + 8]> */
		/* 820E4CA4h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 820E4CA4h case   21:*/		return 0x820E4CA8;
		  /* 820E4CA8h */ case   22:  		/* mr R3, R31 */
		/* 820E4CA8h case   22:*/		regs.R3 = regs.R31;
		/* 820E4CA8h case   22:*/		return 0x820E4CAC;
		  /* 820E4CACh */ case   23:  		/* rlwinm R21, R10, 2, 0, 29 */
		/* 820E4CACh case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R21,regs.R10);
		/* 820E4CACh case   23:*/		return 0x820E4CB0;
		  /* 820E4CB0h */ case   24:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E4CB0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E4CB0h case   24:*/		return 0x820E4CB4;
		  /* 820E4CB4h */ case   25:  		/* lwzx R11, <#[R11 + R21]> */
		/* 820E4CB4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 820E4CB4h case   25:*/		return 0x820E4CB8;
		  /* 820E4CB8h */ case   26:  		/* stwx R11, <#[R30 + R9]> */
		/* 820E4CB8h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 820E4CB8h case   26:*/		return 0x820E4CBC;
		  /* 820E4CBCh */ case   27:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4CBCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4CBCh case   27:*/		return 0x820E4CC0;
		  /* 820E4CC0h */ case   28:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E4CC0h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4CC0h case   28:*/		return 0x820E4CC4;
		  /* 820E4CC4h */ case   29:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4CC4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4CC4h case   29:*/		return 0x820E4CC8;
		  /* 820E4CC8h */ case   30:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E4CC8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4CC8h case   30:*/		return 0x820E4CCC;
		  /* 820E4CCCh */ case   31:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4CCCh case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4CCCh case   31:*/		return 0x820E4CD0;
		  /* 820E4CD0h */ case   32:  		/* lwzx R4, <#[R11 + R10]> */
		/* 820E4CD0h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E4CD0h case   32:*/		return 0x820E4CD4;
		  /* 820E4CD4h */ case   33:  		/* bl 100116 */
		/* 820E4CD4h case   33:*/		regs.LR = 0x820E4CD8; return 0x820FD3E8;
		/* 820E4CD4h case   33:*/		return 0x820E4CD8;
		  /* 820E4CD8h */ case   34:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4CD8h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4CD8h case   34:*/		return 0x820E4CDC;
		  /* 820E4CDCh */ case   35:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E4CDCh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E4CDCh case   35:*/		return 0x820E4CE0;
	}
	return 0x820E4CE0;
} // Block from 820E4C50h-820E4CE0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820E4CE0h
// Function '?ColorParents@CShaderProgram@D3DXShader@@IAAJPAPAVCInstruction@2@PAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4CE0);
		  /* 820E4CE0h */ case    0:  		/* stwx R3, <#[R11 + R21]> */
		/* 820E4CE0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 820E4CE0h case    0:*/		return 0x820E4CE4;
		  /* 820E4CE4h */ case    1:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E4CE4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E4CE4h case    1:*/		return 0x820E4CE8;
		  /* 820E4CE8h */ case    2:  		/* stwx R3, <#[R11 + R30]> */
		/* 820E4CE8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4CE8h case    2:*/		return 0x820E4CEC;
		  /* 820E4CECh */ case    3:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E4CECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E4CECh case    3:*/		return 0x820E4CF0;
		  /* 820E4CF0h */ case    4:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E4CF0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4CF0h case    4:*/		return 0x820E4CF4;
		  /* 820E4CF4h */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 820E4CF4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E4CF4h case    5:*/		return 0x820E4CF8;
		  /* 820E4CF8h */ case    6:  		/* bc 12, CR6_EQ, 248 */
		/* 820E4CF8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E4DF0;  }
		/* 820E4CF8h case    6:*/		return 0x820E4CFC;
		  /* 820E4CFCh */ case    7:  		/* lwz R11, <#[R29 + 8]> */
		/* 820E4CFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 820E4CFCh case    7:*/		return 0x820E4D00;
		  /* 820E4D00h */ case    8:  		/* addi R28, R28, 1 */
		/* 820E4D00h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 820E4D00h case    8:*/		return 0x820E4D04;
		  /* 820E4D04h */ case    9:  		/* lwz R10, <#[R29 + 16]> */
		/* 820E4D04h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 820E4D04h case    9:*/		return 0x820E4D08;
		  /* 820E4D08h */ case   10:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E4D08h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4D08h case   10:*/		return 0x820E4D0C;
		  /* 820E4D0Ch */ case   11:  		/* cmplw CR6, R28, R25 */
		/* 820E4D0Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 820E4D0Ch case   11:*/		return 0x820E4D10;
		  /* 820E4D10h */ case   12:  		/* lwzx R11, <#[R30 + R11]> */
		/* 820E4D10h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820E4D10h case   12:*/		return 0x820E4D14;
		  /* 820E4D14h */ case   13:  		/* lwzx R10, <#[R10 + R30]> */
		/* 820E4D14h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820E4D14h case   13:*/		return 0x820E4D18;
		  /* 820E4D18h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4D18h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4D18h case   14:*/		return 0x820E4D1C;
		  /* 820E4D1Ch */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E4D1Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E4D1Ch case   15:*/		return 0x820E4D20;
		  /* 820E4D20h */ case   16:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E4D20h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E4D20h case   16:*/		return 0x820E4D24;
		  /* 820E4D24h */ case   17:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E4D24h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E4D24h case   17:*/		return 0x820E4D28;
		  /* 820E4D28h */ case   18:  		/* lwz R11, <#[R11 + 20]> */
		/* 820E4D28h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820E4D28h case   18:*/		return 0x820E4D2C;
		  /* 820E4D2Ch */ case   19:  		/* stw R11, <#[R10 + 20]> */
		/* 820E4D2Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 820E4D2Ch case   19:*/		return 0x820E4D30;
		  /* 820E4D30h */ case   20:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E4D30h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E4D30h case   20:*/		return 0x820E4D34;
		  /* 820E4D34h */ case   21:  		/* lwz R10, <#[R29 + 8]> */
		/* 820E4D34h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 820E4D34h case   21:*/		return 0x820E4D38;
		  /* 820E4D38h */ case   22:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E4D38h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4D38h case   22:*/		return 0x820E4D3C;
		  /* 820E4D3Ch */ case   23:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E4D3Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4D3Ch case   23:*/		return 0x820E4D40;
		  /* 820E4D40h */ case   24:  		/* lwzx R10, <#[R30 + R10]> */
		/* 820E4D40h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 820E4D40h case   24:*/		return 0x820E4D44;
		  /* 820E4D44h */ case   25:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E4D44h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E4D44h case   25:*/		return 0x820E4D48;
		  /* 820E4D48h */ case   26:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4D48h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4D48h case   26:*/		return 0x820E4D4C;
		  /* 820E4D4Ch */ case   27:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E4D4Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E4D4Ch case   27:*/		return 0x820E4D50;
		  /* 820E4D50h */ case   28:  		/* lwz R10, <#[R10 + 24]> */
		/* 820E4D50h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 820E4D50h case   28:*/		return 0x820E4D54;
		  /* 820E4D54h */ case   29:  		/* addi R30, R30, 4 */
		/* 820E4D54h case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E4D54h case   29:*/		return 0x820E4D58;
		  /* 820E4D58h */ case   30:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E4D58h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E4D58h case   30:*/		return 0x820E4D5C;
		  /* 820E4D5Ch */ case   31:  		/* stw R10, <#[R11 + 24]> */
		/* 820E4D5Ch case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 820E4D5Ch case   31:*/		return 0x820E4D60;
	}
	return 0x820E4D60;
} // Block from 820E4CE0h-820E4D60h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820E4D60h
// Function '?ColorParents2@CShaderProgram@D3DXShader@@IAAJPAPAVCInstruction@2@PAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4D60);
		  /* 820E4D60h */ case    0:  		/* bc 12, CR6_LT, -196 */
		/* 820E4D60h case    0:*/		if ( regs.CR[6].lt ) { return 0x820E4C9C;  }
		/* 820E4D60h case    0:*/		return 0x820E4D64;
	}
	return 0x820E4D64;
} // Block from 820E4D60h-820E4D64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E4D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4D64);
		  /* 820E4D64h */ case    0:  		/* mr R11, R26 */
		/* 820E4D64h case    0:*/		regs.R11 = regs.R26;
		/* 820E4D64h case    0:*/		return 0x820E4D68;
		  /* 820E4D68h */ case    1:  		/* lwz R10, <#[R31 + 256]> */
		/* 820E4D68h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000100) );
		/* 820E4D68h case    1:*/		return 0x820E4D6C;
		  /* 820E4D6Ch */ case    2:  		/* cmplw CR6, R27, R10 */
		/* 820E4D6Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 820E4D6Ch case    2:*/		return 0x820E4D70;
		  /* 820E4D70h */ case    3:  		/* bc 12, CR6_GT, 40 */
		/* 820E4D70h case    3:*/		if ( regs.CR[6].gt ) { return 0x820E4D98;  }
		/* 820E4D70h case    3:*/		return 0x820E4D74;
		  /* 820E4D74h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 820E4D74h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820E4D74h case    4:*/		return 0x820E4D78;
		  /* 820E4D78h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 820E4D78h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E4DB4;  }
		/* 820E4D78h case    5:*/		return 0x820E4D7C;
		  /* 820E4D7Ch */ case    6:  		/* lwz R10, <#[R31 + 24]> */
		/* 820E4D7Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820E4D7Ch case    6:*/		return 0x820E4D80;
		  /* 820E4D80h */ case    7:  		/* add R10, R11, R10 */
		/* 820E4D80h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 820E4D80h case    7:*/		return 0x820E4D84;
		  /* 820E4D84h */ case    8:  		/* lwz R10, <#[R10 - 4]> */
		/* 820E4D84h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 820E4D84h case    8:*/		return 0x820E4D88;
		  /* 820E4D88h */ case    9:  		/* lwz R10, <#[R10]> */
		/* 820E4D88h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E4D88h case    9:*/		return 0x820E4D8C;
		  /* 820E4D8Ch */ case   10:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 820E4D8Ch case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 820E4D8Ch case   10:*/		return 0x820E4D90;
		  /* 820E4D90h */ case   11:  		/* cmplw CR6, R10, R22 */
		/* 820E4D90h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 820E4D90h case   11:*/		return 0x820E4D94;
		  /* 820E4D94h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 820E4D94h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E4DB4;  }
		/* 820E4D94h case   12:*/		return 0x820E4D98;
	}
	return 0x820E4D98;
} // Block from 820E4D64h-820E4D98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E4D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4D98);
		  /* 820E4D98h */ case    0:  		/* lwz R10, <#[R31 + 24]> */
		/* 820E4D98h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820E4D98h case    0:*/		return 0x820E4D9C;
		  /* 820E4D9Ch */ case    1:  		/* addi R27, R27, -1 */
		/* 820E4D9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 820E4D9Ch case    1:*/		return 0x820E4DA0;
		  /* 820E4DA0h */ case    2:  		/* add R10, R11, R10 */
		/* 820E4DA0h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 820E4DA0h case    2:*/		return 0x820E4DA4;
		  /* 820E4DA4h */ case    3:  		/* addi R11, R11, -4 */
		/* 820E4DA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 820E4DA4h case    3:*/		return 0x820E4DA8;
		  /* 820E4DA8h */ case    4:  		/* lwz R9, <#[R10 - 4]> */
		/* 820E4DA8h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 820E4DA8h case    4:*/		return 0x820E4DAC;
		  /* 820E4DACh */ case    5:  		/* stw R9, <#[R10]> */
		/* 820E4DACh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E4DACh case    5:*/		return 0x820E4DB0;
		  /* 820E4DB0h */ case    6:  		/* b -72 */
		/* 820E4DB0h case    6:*/		return 0x820E4D68;
		/* 820E4DB0h case    6:*/		return 0x820E4DB4;
	}
	return 0x820E4DB4;
} // Block from 820E4D98h-820E4DB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E4DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4DB4);
		  /* 820E4DB4h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 820E4DB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820E4DB4h case    0:*/		return 0x820E4DB8;
		  /* 820E4DB8h */ case    1:  		/* rlwinm R10, R27, 2, 0, 29 */
		/* 820E4DB8h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R27);
		/* 820E4DB8h case    1:*/		return 0x820E4DBC;
		  /* 820E4DBCh */ case    2:  		/* li R4, 1 */
		/* 820E4DBCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 820E4DBCh case    2:*/		return 0x820E4DC0;
		  /* 820E4DC0h */ case    3:  		/* stwx R29, <#[R10 + R11]> */
		/* 820E4DC0h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E4DC0h case    3:*/		return 0x820E4DC4;
		  /* 820E4DC4h */ case    4:  		/* lwz R11, <#[R31 + 256]> */
		/* 820E4DC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 820E4DC4h case    4:*/		return 0x820E4DC8;
		  /* 820E4DC8h */ case    5:  		/* addi R11, R11, 1 */
		/* 820E4DC8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E4DC8h case    5:*/		return 0x820E4DCC;
		  /* 820E4DCCh */ case    6:  		/* stw R11, <#[R31 + 256]> */
		/* 820E4DCCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 820E4DCCh case    6:*/		return 0x820E4DD0;
	}
	return 0x820E4DD0;
} // Block from 820E4DB4h-820E4DD0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E4DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4DD0);
		  /* 820E4DD0h */ case    0:  		/* addi R23, R23, 1 */
		/* 820E4DD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 820E4DD0h case    0:*/		return 0x820E4DD4;
		  /* 820E4DD4h */ case    1:  		/* add R24, R24, R25 */
		/* 820E4DD4h case    1:*/		cpu::op::add<0>(regs,&regs.R24,regs.R24,regs.R25);
		/* 820E4DD4h case    1:*/		return 0x820E4DD8;
		  /* 820E4DD8h */ case    2:  		/* cmplwi CR6, R23, 2 */
		/* 820E4DD8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000002);
		/* 820E4DD8h case    2:*/		return 0x820E4DDC;
		  /* 820E4DDCh */ case    3:  		/* bc 12, CR6_LT, -540 */
		/* 820E4DDCh case    3:*/		if ( regs.CR[6].lt ) { return 0x820E4BC0;  }
		/* 820E4DDCh case    3:*/		return 0x820E4DE0;
	}
	return 0x820E4DE0;
} // Block from 820E4DD0h-820E4DE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E4DE0h
// Function '?ColorChildren2@CShaderProgram@D3DXShader@@IAAJPAPAVCInstruction@2@PAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4DE0);
		  /* 820E4DE0h */ case    0:  		/* cntlzw R11, R4 */
		/* 820E4DE0h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R4);
		/* 820E4DE0h case    0:*/		return 0x820E4DE4;
		  /* 820E4DE4h */ case    1:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 820E4DE4h case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 820E4DE4h case    1:*/		return 0x820E4DE8;
	}
	return 0x820E4DE8;
} // Block from 820E4DE0h-820E4DE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E4DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4DE8);
		  /* 820E4DE8h */ case    0:  		/* addi R1, R1, 176 */
		/* 820E4DE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820E4DE8h case    0:*/		return 0x820E4DEC;
		  /* 820E4DECh */ case    1:  		/* b -342880 */
		/* 820E4DECh case    1:*/		return 0x8209128C;
		/* 820E4DECh case    1:*/		return 0x820E4DF0;
	}
	return 0x820E4DF0;
} // Block from 820E4DE8h-820E4DF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E4DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4DF0);
		  /* 820E4DF0h */ case    0:  		/* lis R3, -32761 */
		/* 820E4DF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E4DF0h case    0:*/		return 0x820E4DF4;
		  /* 820E4DF4h */ case    1:  		/* ori R3, R3, 14 */
		/* 820E4DF4h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E4DF4h case    1:*/		return 0x820E4DF8;
		  /* 820E4DF8h */ case    2:  		/* b -16 */
		/* 820E4DF8h case    2:*/		return 0x820E4DE8;
		/* 820E4DF8h case    2:*/		return 0x820E4DFC;
		  /* 820E4DFCh */ case    3:  		/* nop */
		/* 820E4DFCh case    3:*/		cpu::op::nop();
		/* 820E4DFCh case    3:*/		return 0x820E4E00;
	}
	return 0x820E4E00;
} // Block from 820E4DF0h-820E4E00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E4E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4E00);
		  /* 820E4E00h */ case    0:  		/* mfspr R12, LR */
		/* 820E4E00h case    0:*/		regs.R12 = regs.LR;
		/* 820E4E00h case    0:*/		return 0x820E4E04;
		  /* 820E4E04h */ case    1:  		/* bl -342968 */
		/* 820E4E04h case    1:*/		regs.LR = 0x820E4E08; return 0x8209124C;
		/* 820E4E04h case    1:*/		return 0x820E4E08;
		  /* 820E4E08h */ case    2:  		/* stfd FR31, <#[R1 - 72]> */
		/* 820E4E08h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E4E08h case    2:*/		return 0x820E4E0C;
		  /* 820E4E0Ch */ case    3:  		/* stwu R1, <#[R1 - 160]> */
		/* 820E4E0Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820E4E0Ch case    3:*/		return 0x820E4E10;
		  /* 820E4E10h */ case    4:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E4E10h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E4E10h case    4:*/		return 0x820E4E14;
		  /* 820E4E14h */ case    5:  		/* mr R31, R3 */
		/* 820E4E14h case    5:*/		regs.R31 = regs.R3;
		/* 820E4E14h case    5:*/		return 0x820E4E18;
		  /* 820E4E18h */ case    6:  		/* lwz R6, <#[R3 + 20]> */
		/* 820E4E18h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000014) );
		/* 820E4E18h case    6:*/		return 0x820E4E1C;
		  /* 820E4E1Ch */ case    7:  		/* lwz R9, <#[R3 + 16]> */
		/* 820E4E1Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 820E4E1Ch case    7:*/		return 0x820E4E20;
		  /* 820E4E20h */ case    8:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4E20h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4E20h case    8:*/		return 0x820E4E24;
		  /* 820E4E24h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 820E4E24h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E4E24h case    9:*/		return 0x820E4E28;
		  /* 820E4E28h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E4E28h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E4E28h case   10:*/		return 0x820E4E2C;
		  /* 820E4E2Ch */ case   11:  		/* lwzx R10, <#[R10 + R6]> */
		/* 820E4E2Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 820E4E2Ch case   11:*/		return 0x820E4E30;
		  /* 820E4E30h */ case   12:  		/* lwz R8, <#[R10 + 4]> */
		/* 820E4E30h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 820E4E30h case   12:*/		return 0x820E4E34;
		  /* 820E4E34h */ case   13:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E4E34h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E4E34h case   13:*/		return 0x820E4E38;
		  /* 820E4E38h */ case   14:  		/* lwzx R9, <#[R8 + R9]> */
		/* 820E4E38h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E4E38h case   14:*/		return 0x820E4E3C;
		  /* 820E4E3Ch */ case   15:  		/* lwz R9, <#[R9 + 4]> */
		/* 820E4E3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 820E4E3Ch case   15:*/		return 0x820E4E40;
		  /* 820E4E40h */ case   16:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 820E4E40h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 820E4E40h case   16:*/		return 0x820E4E44;
		  /* 820E4E44h */ case   17:  		/* bc 12, CR0_EQ, 40 */
		/* 820E4E44h case   17:*/		if ( regs.CR[0].eq ) { return 0x820E4E6C;  }
		/* 820E4E44h case   17:*/		return 0x820E4E48;
		  /* 820E4E48h */ case   18:  		/* lwz R10, <#[R10 + 60]> */
		/* 820E4E48h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820E4E48h case   18:*/		return 0x820E4E4C;
		  /* 820E4E4Ch */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 820E4E4Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E4E4Ch case   19:*/		return 0x820E4E50;
		  /* 820E4E50h */ case   20:  		/* bc 4, CR6_EQ, 28 */
		/* 820E4E50h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820E4E6C;  }
		/* 820E4E50h case   20:*/		return 0x820E4E54;
		  /* 820E4E54h */ case   21:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E4E54h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E4E54h case   21:*/		return 0x820E4E58;
		  /* 820E4E58h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4E58h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4E58h case   22:*/		return 0x820E4E5C;
		  /* 820E4E5Ch */ case   23:  		/* lwzx R11, <#[R11 + R6]> */
		/* 820E4E5Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820E4E5Ch case   23:*/		return 0x820E4E60;
	}
	return 0x820E4E60;
} // Block from 820E4E00h-820E4E60h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E4E60h
// Function '?FindPoolName@CShaderProgram@D3DXShader@@IAAJPBDPAPBDDI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4E60);
		  /* 820E4E60h */ case    0:  		/* lwz R11, <#[R11 + 60]> */
		/* 820E4E60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E4E60h case    0:*/		return 0x820E4E64;
		  /* 820E4E64h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E4E64h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4E64h case    1:*/		return 0x820E4E68;
		  /* 820E4E68h */ case    2:  		/* bc 12, CR6_EQ, 464 */
		/* 820E4E68h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E5038;  }
		/* 820E4E68h case    2:*/		return 0x820E4E6C;
	}
	return 0x820E4E6C;
} // Block from 820E4E60h-820E4E6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E4E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4E6C);
		  /* 820E4E6Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E4E6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E4E6Ch case    0:*/		return 0x820E4E70;
		  /* 820E4E70h */ case    1:  		/* li R25, 0 */
		/* 820E4E70h case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820E4E70h case    1:*/		return 0x820E4E74;
		  /* 820E4E74h */ case    2:  		/* li R8, 0 */
		/* 820E4E74h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E4E74h case    2:*/		return 0x820E4E78;
		  /* 820E4E78h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820E4E78h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E4E78h case    3:*/		return 0x820E4E7C;
		  /* 820E4E7Ch */ case    4:  		/* bc 4, CR6_GT, 64 */
		/* 820E4E7Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x820E4EBC;  }
		/* 820E4E7Ch case    4:*/		return 0x820E4E80;
		  /* 820E4E80h */ case    5:  		/* lwz R9, <#[R31 + 136]> */
		/* 820E4E80h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000088) );
		/* 820E4E80h case    5:*/		return 0x820E4E84;
		  /* 820E4E84h */ case    6:  		/* li R10, 0 */
		/* 820E4E84h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E4E84h case    6:*/		return 0x820E4E88;
		  /* 820E4E88h */ case    7:  		/* rlwinm R7, R11, 0, 0, 31 */
		/* 820E4E88h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R11);
		/* 820E4E88h case    7:*/		return 0x820E4E8C;
		  /* 820E4E8Ch */ case    8:  		/* lwzx R11, <#[R10 + R6]> */
		/* 820E4E8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 820E4E8Ch case    8:*/		return 0x820E4E90;
		  /* 820E4E90h */ case    9:  		/* lwz R5, <#[R11 + 4]> */
		/* 820E4E90h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 820E4E90h case    9:*/		return 0x820E4E94;
		  /* 820E4E94h */ case   10:  		/* cmplw CR6, R9, R5 */
		/* 820E4E94h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R5);
		/* 820E4E94h case   10:*/		return 0x820E4E98;
		  /* 820E4E98h */ case   11:  		/* bc 4, CR6_EQ, 20 */
		/* 820E4E98h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E4EAC;  }
		/* 820E4E98h case   11:*/		return 0x820E4E9C;
		  /* 820E4E9Ch */ case   12:  		/* lwz R11, <#[R11 + 12]> */
		/* 820E4E9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E4E9Ch case   12:*/		return 0x820E4EA0;
		  /* 820E4EA0h */ case   13:  		/* cmplw CR6, R11, R25 */
		/* 820E4EA0h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820E4EA0h case   13:*/		return 0x820E4EA4;
		  /* 820E4EA4h */ case   14:  		/* bc 12, CR6_LT, 8 */
		/* 820E4EA4h case   14:*/		if ( regs.CR[6].lt ) { return 0x820E4EAC;  }
		/* 820E4EA4h case   14:*/		return 0x820E4EA8;
		  /* 820E4EA8h */ case   15:  		/* addi R25, R11, 1 */
		/* 820E4EA8h case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x1);
		/* 820E4EA8h case   15:*/		return 0x820E4EAC;
	}
	return 0x820E4EAC;
} // Block from 820E4E6Ch-820E4EACh (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E4EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4EAC);
		  /* 820E4EACh */ case    0:  		/* addi R8, R8, 1 */
		/* 820E4EACh case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E4EACh case    0:*/		return 0x820E4EB0;
		  /* 820E4EB0h */ case    1:  		/* addi R10, R10, 4 */
		/* 820E4EB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E4EB0h case    1:*/		return 0x820E4EB4;
		  /* 820E4EB4h */ case    2:  		/* cmplw CR6, R8, R7 */
		/* 820E4EB4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820E4EB4h case    2:*/		return 0x820E4EB8;
		  /* 820E4EB8h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 820E4EB8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E4E8C;  }
		/* 820E4EB8h case    3:*/		return 0x820E4EBC;
	}
	return 0x820E4EBC;
} // Block from 820E4EACh-820E4EBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E4EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4EBC);
		  /* 820E4EBCh */ case    0:  		/* lis R4, 4096 */
		/* 820E4EBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 820E4EBCh case    0:*/		return 0x820E4EC0;
		  /* 820E4EC0h */ case    1:  		/* li R6, 4 */
		/* 820E4EC0h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 820E4EC0h case    1:*/		return 0x820E4EC4;
		  /* 820E4EC4h */ case    2:  		/* li R5, 4 */
		/* 820E4EC4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 820E4EC4h case    2:*/		return 0x820E4EC8;
		  /* 820E4EC8h */ case    3:  		/* ori R4, R4, 4 */
		/* 820E4EC8h case    3:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x4);
		/* 820E4EC8h case    3:*/		return 0x820E4ECC;
		  /* 820E4ECCh */ case    4:  		/* mr R3, R31 */
		/* 820E4ECCh case    4:*/		regs.R3 = regs.R31;
		/* 820E4ECCh case    4:*/		return 0x820E4ED0;
		  /* 820E4ED0h */ case    5:  		/* bl 99320 */
		/* 820E4ED0h case    5:*/		regs.LR = 0x820E4ED4; return 0x820FD2C8;
		/* 820E4ED0h case    5:*/		return 0x820E4ED4;
		  /* 820E4ED4h */ case    6:  		/* cmpwi CR6, R3, -1 */
		/* 820E4ED4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E4ED4h case    6:*/		return 0x820E4ED8;
		  /* 820E4ED8h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 820E4ED8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E4EE8;  }
		/* 820E4ED8h case    7:*/		return 0x820E4EDC;
		  /* 820E4EDCh */ case    8:  		/* lis R3, -32761 */
		/* 820E4EDCh case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E4EDCh case    8:*/		return 0x820E4EE0;
		  /* 820E4EE0h */ case    9:  		/* ori R3, R3, 14 */
		/* 820E4EE0h case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E4EE0h case    9:*/		return 0x820E4EE4;
		  /* 820E4EE4h */ case   10:  		/* b 352 */
		/* 820E4EE4h case   10:*/		return 0x820E5044;
		/* 820E4EE4h case   10:*/		return 0x820E4EE8;
	}
	return 0x820E4EE8;
} // Block from 820E4EBCh-820E4EE8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E4EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4EE8);
		  /* 820E4EE8h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 820E4EE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820E4EE8h case    0:*/		return 0x820E4EEC;
		  /* 820E4EECh */ case    1:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E4EECh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E4EECh case    1:*/		return 0x820E4EF0;
		  /* 820E4EF0h */ case    2:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E4EF0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4EF0h case    2:*/		return 0x820E4EF4;
		  /* 820E4EF4h */ case    3:  		/* lwzx R26, <#[R10 + R11]> */
		/* 820E4EF4h case    3:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E4EF4h case    3:*/		return 0x820E4EF8;
		  /* 820E4EF8h */ case    4:  		/* mr R3, R26 */
		/* 820E4EF8h case    4:*/		regs.R3 = regs.R26;
		/* 820E4EF8h case    4:*/		return 0x820E4EFC;
		  /* 820E4EFCh */ case    5:  		/* bl 94196 */
		/* 820E4EFCh case    5:*/		regs.LR = 0x820E4F00; return 0x820FBEF0;
		/* 820E4EFCh case    5:*/		return 0x820E4F00;
		  /* 820E4F00h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E4F00h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E4F00h case    6:*/		return 0x820E4F04;
		  /* 820E4F04h */ case    7:  		/* bc 12, CR0_LT, 320 */
		/* 820E4F04h case    7:*/		if ( regs.CR[0].lt ) { return 0x820E5044;  }
		/* 820E4F04h case    7:*/		return 0x820E4F08;
		  /* 820E4F08h */ case    8:  		/* lis R11, -32256 */
		/* 820E4F08h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E4F08h case    8:*/		return 0x820E4F0C;
		  /* 820E4F0Ch */ case    9:  		/* li R27, 0 */
		/* 820E4F0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E4F0Ch case    9:*/		return 0x820E4F10;
		  /* 820E4F10h */ case   10:  		/* li R30, 0 */
		/* 820E4F10h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E4F10h case   10:*/		return 0x820E4F14;
		  /* 820E4F14h */ case   11:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 820E4F14h case   11:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 820E4F14h case   11:*/		return 0x820E4F18;
		  /* 820E4F18h */ case   12:  		/* mr R6, R27 */
		/* 820E4F18h case   12:*/		regs.R6 = regs.R27;
		/* 820E4F18h case   12:*/		return 0x820E4F1C;
		  /* 820E4F1Ch */ case   13:  		/* lwz R4, <#[R31 + 136]> */
		/* 820E4F1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 820E4F1Ch case   13:*/		return 0x820E4F20;
		  /* 820E4F20h */ case   14:  		/* mr R5, R25 */
		/* 820E4F20h case   14:*/		regs.R5 = regs.R25;
		/* 820E4F20h case   14:*/		return 0x820E4F24;
		  /* 820E4F24h */ case   15:  		/* fmr FR1, FR31 */
		/* 820E4F24h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E4F24h case   15:*/		return 0x820E4F28;
		  /* 820E4F28h */ case   16:  		/* mr R3, R31 */
		/* 820E4F28h case   16:*/		regs.R3 = regs.R31;
		/* 820E4F28h case   16:*/		return 0x820E4F2C;
		  /* 820E4F2Ch */ case   17:  		/* bl 99068 */
		/* 820E4F2Ch case   17:*/		regs.LR = 0x820E4F30; return 0x820FD228;
		/* 820E4F2Ch case   17:*/		return 0x820E4F30;
		  /* 820E4F30h */ case   18:  		/* mr R29, R3 */
		/* 820E4F30h case   18:*/		regs.R29 = regs.R3;
		/* 820E4F30h case   18:*/		return 0x820E4F34;
		  /* 820E4F34h */ case   19:  		/* cmpwi CR6, R3, -1 */
		/* 820E4F34h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E4F34h case   19:*/		return 0x820E4F38;
		  /* 820E4F38h */ case   20:  		/* bc 12, CR6_EQ, -92 */
		/* 820E4F38h case   20:*/		if ( regs.CR[6].eq ) { return 0x820E4EDC;  }
		/* 820E4F38h case   20:*/		return 0x820E4F3C;
		  /* 820E4F3Ch */ case   21:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4F3Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4F3Ch case   21:*/		return 0x820E4F40;
		  /* 820E4F40h */ case   22:  		/* rlwinm R28, R3, 2, 0, 29 */
		/* 820E4F40h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R3);
		/* 820E4F40h case   22:*/		return 0x820E4F44;
		  /* 820E4F44h */ case   23:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E4F44h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4F44h case   23:*/		return 0x820E4F48;
		  /* 820E4F48h */ case   24:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4F48h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4F48h case   24:*/		return 0x820E4F4C;
		  /* 820E4F4Ch */ case   25:  		/* lwzx R3, <#[R28 + R10]> */
		/* 820E4F4Ch case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 820E4F4Ch case   25:*/		return 0x820E4F50;
		  /* 820E4F50h */ case   26:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E4F50h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4F50h case   26:*/		return 0x820E4F54;
		  /* 820E4F54h */ case   27:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4F54h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4F54h case   27:*/		return 0x820E4F58;
		  /* 820E4F58h */ case   28:  		/* lwzx R4, <#[R11 + R10]> */
		/* 820E4F58h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E4F58h case   28:*/		return 0x820E4F5C;
		  /* 820E4F5Ch */ case   29:  		/* bl 97604 */
		/* 820E4F5Ch case   29:*/		regs.LR = 0x820E4F60; return 0x820FCCA0;
		/* 820E4F5Ch case   29:*/		return 0x820E4F60;
		  /* 820E4F60h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820E4F60h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E4F60h case   30:*/		return 0x820E4F64;
		  /* 820E4F64h */ case   31:  		/* bc 12, CR0_LT, 224 */
		/* 820E4F64h case   31:*/		if ( regs.CR[0].lt ) { return 0x820E5044;  }
		/* 820E4F64h case   31:*/		return 0x820E4F68;
		  /* 820E4F68h */ case   32:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4F68h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4F68h case   32:*/		return 0x820E4F6C;
		  /* 820E4F6Ch */ case   33:  		/* addi R27, R27, 1 */
		/* 820E4F6Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820E4F6Ch case   33:*/		return 0x820E4F70;
		  /* 820E4F70h */ case   34:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E4F70h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4F70h case   34:*/		return 0x820E4F74;
		  /* 820E4F74h */ case   35:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4F74h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4F74h case   35:*/		return 0x820E4F78;
		  /* 820E4F78h */ case   36:  		/* lwzx R9, <#[R28 + R10]> */
		/* 820E4F78h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 820E4F78h case   36:*/		return 0x820E4F7C;
		  /* 820E4F7Ch */ case   37:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E4F7Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4F7Ch case   37:*/		return 0x820E4F80;
	}
	return 0x820E4F80;
} // Block from 820E4EE8h-820E4F80h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820E4F80h
// Function '?Reset@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4F80);
		  /* 820E4F80h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4F80h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4F80h case    0:*/		return 0x820E4F84;
		  /* 820E4F84h */ case    1:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E4F84h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E4F84h case    1:*/		return 0x820E4F88;
		  /* 820E4F88h */ case    2:  		/* lwz R11, <#[R11 + 24]> */
		/* 820E4F88h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820E4F88h case    2:*/		return 0x820E4F8C;
		  /* 820E4F8Ch */ case    3:  		/* stw R11, <#[R9 + 24]> */
		/* 820E4F8Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 820E4F8Ch case    3:*/		return 0x820E4F90;
		  /* 820E4F90h */ case    4:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E4F90h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E4F90h case    4:*/		return 0x820E4F94;
		  /* 820E4F94h */ case    5:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4F94h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4F94h case    5:*/		return 0x820E4F98;
		  /* 820E4F98h */ case    6:  		/* lwzx R9, <#[R28 + R10]> */
		/* 820E4F98h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 820E4F98h case    6:*/		return 0x820E4F9C;
		  /* 820E4F9Ch */ case    7:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4F9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4F9Ch case    7:*/		return 0x820E4FA0;
		  /* 820E4FA0h */ case    8:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E4FA0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4FA0h case    8:*/		return 0x820E4FA4;
		  /* 820E4FA4h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E4FA4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E4FA4h case    9:*/		return 0x820E4FA8;
		  /* 820E4FA8h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E4FA8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E4FA8h case   10:*/		return 0x820E4FAC;
		  /* 820E4FACh */ case   11:  		/* lwz R11, <#[R11 + 20]> */
		/* 820E4FACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820E4FACh case   11:*/		return 0x820E4FB0;
		  /* 820E4FB0h */ case   12:  		/* stw R11, <#[R9 + 20]> */
		/* 820E4FB0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 820E4FB0h case   12:*/		return 0x820E4FB4;
		  /* 820E4FB4h */ case   13:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4FB4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4FB4h case   13:*/		return 0x820E4FB8;
		  /* 820E4FB8h */ case   14:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4FB8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4FB8h case   14:*/		return 0x820E4FBC;
		  /* 820E4FBCh */ case   15:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820E4FBCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4FBCh case   15:*/		return 0x820E4FC0;
		  /* 820E4FC0h */ case   16:  		/* lwz R10, <#[R26 + 16]> */
		/* 820E4FC0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000010) );
		/* 820E4FC0h case   16:*/		return 0x820E4FC4;
		  /* 820E4FC4h */ case   17:  		/* stwx R11, <#[R10 + R30]> */
		/* 820E4FC4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820E4FC4h case   17:*/		return 0x820E4FC8;
		  /* 820E4FC8h */ case   18:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E4FC8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E4FC8h case   18:*/		return 0x820E4FCC;
		  /* 820E4FCCh */ case   19:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E4FCCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E4FCCh case   19:*/		return 0x820E4FD0;
	}
	return 0x820E4FD0;
} // Block from 820E4F80h-820E4FD0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E4FD0h
// Function '?PropCentroid@CShaderProgram@D3DXShader@@MAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E4FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E4FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E4FD0);
		  /* 820E4FD0h */ case    0:  		/* stwx R29, <#[R11 + R30]> */
		/* 820E4FD0h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4FD0h case    0:*/		return 0x820E4FD4;
		  /* 820E4FD4h */ case    1:  		/* lwz R11, <#[R26 + 8]> */
		/* 820E4FD4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 820E4FD4h case    1:*/		return 0x820E4FD8;
		  /* 820E4FD8h */ case    2:  		/* stwx R29, <#[R11 + R30]> */
		/* 820E4FD8h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E4FD8h case    2:*/		return 0x820E4FDC;
		  /* 820E4FDCh */ case    3:  		/* addi R30, R30, 4 */
		/* 820E4FDCh case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E4FDCh case    3:*/		return 0x820E4FE0;
		  /* 820E4FE0h */ case    4:  		/* cmplwi CR6, R30, 16 */
		/* 820E4FE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000010);
		/* 820E4FE0h case    4:*/		return 0x820E4FE4;
		  /* 820E4FE4h */ case    5:  		/* bc 12, CR6_LT, -204 */
		/* 820E4FE4h case    5:*/		if ( regs.CR[6].lt ) { return 0x820E4F18;  }
		/* 820E4FE4h case    5:*/		return 0x820E4FE8;
		  /* 820E4FE8h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 820E4FE8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 820E4FE8h case    6:*/		return 0x820E4FEC;
		  /* 820E4FECh */ case    7:  		/* lwz R10, <#[R31 + 256]> */
		/* 820E4FECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000100) );
		/* 820E4FECh case    7:*/		return 0x820E4FF0;
		  /* 820E4FF0h */ case    8:  		/* addi R11, R11, -2 */
		/* 820E4FF0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 820E4FF0h case    8:*/		return 0x820E4FF4;
		  /* 820E4FF4h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 820E4FF4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E4FF4h case    9:*/		return 0x820E4FF8;
		  /* 820E4FF8h */ case   10:  		/* bc 4, CR6_GT, 44 */
		/* 820E4FF8h case   10:*/		if ( !regs.CR[6].gt ) { return 0x820E5024;  }
		/* 820E4FF8h case   10:*/		return 0x820E4FFC;
		  /* 820E4FFCh */ case   11:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 820E4FFCh case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 820E4FFCh case   11:*/		return 0x820E5000;
		  /* 820E5000h */ case   12:  		/* lwz R9, <#[R31 + 24]> */
		/* 820E5000h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 820E5000h case   12:*/		return 0x820E5004;
		  /* 820E5004h */ case   13:  		/* addi R11, R11, -1 */
		/* 820E5004h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820E5004h case   13:*/		return 0x820E5008;
		  /* 820E5008h */ case   14:  		/* add R9, R9, R10 */
		/* 820E5008h case   14:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 820E5008h case   14:*/		return 0x820E500C;
		  /* 820E500Ch */ case   15:  		/* addi R10, R10, -4 */
		/* 820E500Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 820E500Ch case   15:*/		return 0x820E5010;
		  /* 820E5010h */ case   16:  		/* lwz R8, <#[R9]> */
		/* 820E5010h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 820E5010h case   16:*/		return 0x820E5014;
		  /* 820E5014h */ case   17:  		/* stw R8, <#[R9 + 4]> */
		/* 820E5014h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 820E5014h case   17:*/		return 0x820E5018;
		  /* 820E5018h */ case   18:  		/* lwz R9, <#[R31 + 256]> */
		/* 820E5018h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000100) );
		/* 820E5018h case   18:*/		return 0x820E501C;
		  /* 820E501Ch */ case   19:  		/* cmplw CR6, R11, R9 */
		/* 820E501Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E501Ch case   19:*/		return 0x820E5020;
		  /* 820E5020h */ case   20:  		/* bc 12, CR6_GT, -32 */
		/* 820E5020h case   20:*/		if ( regs.CR[6].gt ) { return 0x820E5000;  }
		/* 820E5020h case   20:*/		return 0x820E5024;
	}
	return 0x820E5024;
} // Block from 820E4FD0h-820E5024h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E5024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5024);
		  /* 820E5024h */ case    0:  		/* lwz R11, <#[R31 + 256]> */
		/* 820E5024h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 820E5024h case    0:*/		return 0x820E5028;
		  /* 820E5028h */ case    1:  		/* lwz R10, <#[R31 + 24]> */
		/* 820E5028h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820E5028h case    1:*/		return 0x820E502C;
		  /* 820E502Ch */ case    2:  		/* addi R11, R11, 1 */
		/* 820E502Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E502Ch case    2:*/		return 0x820E5030;
		  /* 820E5030h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5030h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5030h case    3:*/		return 0x820E5034;
		  /* 820E5034h */ case    4:  		/* stwx R26, <#[R11 + R10]> */
		/* 820E5034h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E5034h case    4:*/		return 0x820E5038;
	}
	return 0x820E5038;
} // Block from 820E5024h-820E5038h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E5038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5038);
		  /* 820E5038h */ case    0:  		/* li R11, 1 */
		/* 820E5038h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820E5038h case    0:*/		return 0x820E503C;
		  /* 820E503Ch */ case    1:  		/* li R3, 0 */
		/* 820E503Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E503Ch case    1:*/		return 0x820E5040;
		  /* 820E5040h */ case    2:  		/* stw R11, <#[R31 + 400]> */
		/* 820E5040h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000190) );
		/* 820E5040h case    2:*/		return 0x820E5044;
	}
	return 0x820E5044;
} // Block from 820E5038h-820E5044h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E5044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5044);
		  /* 820E5044h */ case    0:  		/* addi R1, R1, 160 */
		/* 820E5044h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820E5044h case    0:*/		return 0x820E5048;
		  /* 820E5048h */ case    1:  		/* lfd FR31, <#[R1 - 72]> */
		/* 820E5048h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E5048h case    1:*/		return 0x820E504C;
		  /* 820E504Ch */ case    2:  		/* b -343472 */
		/* 820E504Ch case    2:*/		return 0x8209129C;
		/* 820E504Ch case    2:*/		return 0x820E5050;
		  /* 820E5050h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 820E5050h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820E5050h case    3:*/		return 0x820E5054;
		  /* 820E5054h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 820E5054h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 820E5054h case    4:*/		return 0x820E5058;
		  /* 820E5058h */ case    5:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820E5058h case    5:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820E5058h case    5:*/		return 0x820E505C;
		  /* 820E505Ch */ case    6:  		/* divwu. R10, R10, R11 */
		/* 820E505Ch case    6:*/		cpu::op::divwu<1>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820E505Ch case    6:*/		return 0x820E5060;
		  /* 820E5060h */ case    7:  		/* twi 6, R11, 0 */
		/* 820E5060h case    7:*/		cpu::op::tw<6>(regs, 0x820E5060, regs.R11, 0x00000000);
		/* 820E5060h case    7:*/		return 0x820E5064;
		  /* 820E5064h */ case    8:  		/* bc 12, CR0_EQ, 56 */
		/* 820E5064h case    8:*/		if ( regs.CR[0].eq ) { return 0x820E509C;  }
		/* 820E5064h case    8:*/		return 0x820E5068;
		  /* 820E5068h */ case    9:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820E5068h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820E5068h case    9:*/		return 0x820E506C;
		  /* 820E506Ch */ case   10:  		/* mtspr CTR, R10 */
		/* 820E506Ch case   10:*/		regs.CTR = regs.R10;
		/* 820E506Ch case   10:*/		return 0x820E5070;
		  /* 820E5070h */ case   11:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 820E5070h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 820E5070h case   11:*/		return 0x820E5074;
		  /* 820E5074h */ case   12:  		/* lwz R10, <#[R3 + 8]> */
		/* 820E5074h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 820E5074h case   12:*/		return 0x820E5078;
		  /* 820E5078h */ case   13:  		/* add R10, R10, R11 */
		/* 820E5078h case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820E5078h case   13:*/		return 0x820E507C;
		  /* 820E507Ch */ case   14:  		/* lwz R8, <#[R10 + 4]> */
		/* 820E507Ch case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 820E507Ch case   14:*/		return 0x820E5080;
		  /* 820E5080h */ case   15:  		/* lwz R7, <#[R10]> */
		/* 820E5080h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 820E5080h case   15:*/		return 0x820E5084;
		  /* 820E5084h */ case   16:  		/* stw R8, <#[R10]> */
		/* 820E5084h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820E5084h case   16:*/		return 0x820E5088;
		  /* 820E5088h */ case   17:  		/* lwz R10, <#[R3 + 8]> */
		/* 820E5088h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 820E5088h case   17:*/		return 0x820E508C;
		  /* 820E508Ch */ case   18:  		/* add R10, R10, R11 */
		/* 820E508Ch case   18:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820E508Ch case   18:*/		return 0x820E5090;
		  /* 820E5090h */ case   19:  		/* add R11, R9, R11 */
		/* 820E5090h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820E5090h case   19:*/		return 0x820E5094;
		  /* 820E5094h */ case   20:  		/* stw R7, <#[R10 + 4]> */
		/* 820E5094h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 820E5094h case   20:*/		return 0x820E5098;
		  /* 820E5098h */ case   21:  		/* bc 16, CR0_LT, -36 */
		/* 820E5098h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E5074;  }
		/* 820E5098h case   21:*/		return 0x820E509C;
	}
	return 0x820E509C;
} // Block from 820E5044h-820E509Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E509Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E509C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E509C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E509C);
		  /* 820E509Ch */ case    0:  		/* lwz R11, <#[R3 + 16]> */
		/* 820E509Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 820E509Ch case    0:*/		return 0x820E50A0;
		  /* 820E50A0h */ case    1:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 820E50A0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 820E50A0h case    1:*/		return 0x820E50A4;
		  /* 820E50A4h */ case    2:  		/* add R11, R11, R10 */
		/* 820E50A4h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820E50A4h case    2:*/		return 0x820E50A8;
		  /* 820E50A8h */ case    3:  		/* lwz R9, <#[R11 + 4]> */
		/* 820E50A8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820E50A8h case    3:*/		return 0x820E50AC;
		  /* 820E50ACh */ case    4:  		/* lwz R8, <#[R11]> */
		/* 820E50ACh case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E50ACh case    4:*/		return 0x820E50B0;
		  /* 820E50B0h */ case    5:  		/* stw R9, <#[R11]> */
		/* 820E50B0h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E50B0h case    5:*/		return 0x820E50B4;
		  /* 820E50B4h */ case    6:  		/* lwz R11, <#[R3 + 16]> */
		/* 820E50B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 820E50B4h case    6:*/		return 0x820E50B8;
		  /* 820E50B8h */ case    7:  		/* add R11, R11, R10 */
		/* 820E50B8h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820E50B8h case    7:*/		return 0x820E50BC;
		  /* 820E50BCh */ case    8:  		/* stw R8, <#[R11 + 4]> */
		/* 820E50BCh case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 820E50BCh case    8:*/		return 0x820E50C0;
		  /* 820E50C0h */ case    9:  		/* bclr 20, CR0_LT */
		/* 820E50C0h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E50C0h case    9:*/		return 0x820E50C4;
	}
	return 0x820E50C4;
} // Block from 820E509Ch-820E50C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E50C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E50C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E50C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E50C4);
		  /* 820E50C4h */ case    0:  		/* nop */
		/* 820E50C4h case    0:*/		cpu::op::nop();
		/* 820E50C4h case    0:*/		return 0x820E50C8;
	}
	return 0x820E50C8;
} // Block from 820E50C4h-820E50C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E50C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E50C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E50C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E50C8);
		  /* 820E50C8h */ case    0:  		/* mfspr R12, LR */
		/* 820E50C8h case    0:*/		regs.R12 = regs.LR;
		/* 820E50C8h case    0:*/		return 0x820E50CC;
		  /* 820E50CCh */ case    1:  		/* bl -343664 */
		/* 820E50CCh case    1:*/		regs.LR = 0x820E50D0; return 0x8209125C;
		/* 820E50CCh case    1:*/		return 0x820E50D0;
		  /* 820E50D0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820E50D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820E50D0h case    2:*/		return 0x820E50D4;
		  /* 820E50D4h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E50D4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E50D4h case    3:*/		return 0x820E50D8;
		  /* 820E50D8h */ case    4:  		/* mr R29, R3 */
		/* 820E50D8h case    4:*/		regs.R29 = regs.R3;
		/* 820E50D8h case    4:*/		return 0x820E50DC;
		  /* 820E50DCh */ case    5:  		/* lwz R10, <#[R11]> */
		/* 820E50DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E50DCh case    5:*/		return 0x820E50E0;
		  /* 820E50E0h */ case    6:  		/* lwz R11, <#[R11 + 12]> */
		/* 820E50E0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E50E0h case    6:*/		return 0x820E50E4;
		  /* 820E50E4h */ case    7:  		/* rlwinm R30, R10, 0, 12, 31 */
		/* 820E50E4h case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R10);
		/* 820E50E4h case    7:*/		return 0x820E50E8;
		  /* 820E50E8h */ case    8:  		/* cmplw CR6, R30, R11 */
		/* 820E50E8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820E50E8h case    8:*/		return 0x820E50EC;
		  /* 820E50ECh */ case    9:  		/* bc 4, CR6_EQ, 192 */
		/* 820E50ECh case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E51AC;  }
		/* 820E50ECh case    9:*/		return 0x820E50F0;
		  /* 820E50F0h */ case   10:  		/* lwz R3, <#[R3 + 260]> */
		/* 820E50F0h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000104) );
		/* 820E50F0h case   10:*/		return 0x820E50F4;
		  /* 820E50F4h */ case   11:  		/* bl 93820 */
		/* 820E50F4h case   11:*/		regs.LR = 0x820E50F8; return 0x820FBF70;
		/* 820E50F4h case   11:*/		return 0x820E50F8;
		  /* 820E50F8h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820E50F8h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E50F8h case   12:*/		return 0x820E50FC;
		  /* 820E50FCh */ case   13:  		/* bc 4, CR0_EQ, 176 */
		/* 820E50FCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x820E51AC;  }
		/* 820E50FCh case   13:*/		return 0x820E5100;
		  /* 820E5100h */ case   14:  		/* lwz R3, <#[R29 + 260]> */
		/* 820E5100h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000104) );
		/* 820E5100h case   14:*/		return 0x820E5104;
		  /* 820E5104h */ case   15:  		/* bl 94628 */
		/* 820E5104h case   15:*/		regs.LR = 0x820E5108; return 0x820FC2A8;
		/* 820E5104h case   15:*/		return 0x820E5108;
		  /* 820E5108h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820E5108h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E5108h case   16:*/		return 0x820E510C;
		  /* 820E510Ch */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 820E510Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x820E5120;  }
		/* 820E510Ch case   17:*/		return 0x820E5110;
		  /* 820E5110h */ case   18:  		/* lwz R3, <#[R29 + 260]> */
		/* 820E5110h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000104) );
		/* 820E5110h case   18:*/		return 0x820E5114;
		  /* 820E5114h */ case   19:  		/* bl 94012 */
		/* 820E5114h case   19:*/		regs.LR = 0x820E5118; return 0x820FC050;
		/* 820E5114h case   19:*/		return 0x820E5118;
		  /* 820E5118h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820E5118h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E5118h case   20:*/		return 0x820E511C;
		  /* 820E511Ch */ case   21:  		/* bc 12, CR0_EQ, 144 */
		/* 820E511Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x820E51AC;  }
		/* 820E511Ch case   21:*/		return 0x820E5120;
	}
	return 0x820E5120;
} // Block from 820E50C8h-820E5120h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E5120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5120);
		  /* 820E5120h */ case    0:  		/* cmplwi CR6, R30, 4 */
		/* 820E5120h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 820E5120h case    0:*/		return 0x820E5124;
		  /* 820E5124h */ case    1:  		/* bc 12, CR6_GT, 136 */
		/* 820E5124h case    1:*/		if ( regs.CR[6].gt ) { return 0x820E51AC;  }
		/* 820E5124h case    1:*/		return 0x820E5128;
		  /* 820E5128h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820E5128h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E5128h case    2:*/		return 0x820E512C;
		  /* 820E512Ch */ case    3:  		/* bc 12, CR6_EQ, 128 */
		/* 820E512Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E51AC;  }
		/* 820E512Ch case    3:*/		return 0x820E5130;
		  /* 820E5130h */ case    4:  		/* li R31, 0 */
		/* 820E5130h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E5130h case    4:*/		return 0x820E5134;
		  /* 820E5134h */ case    5:  		/* subf R11, R31, R30 */
		/* 820E5134h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R30);
		/* 820E5134h case    5:*/		return 0x820E5138;
		  /* 820E5138h */ case    6:  		/* li R4, 0 */
		/* 820E5138h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E5138h case    6:*/		return 0x820E513C;
		  /* 820E513Ch */ case    7:  		/* addic. R5, R11, -1 */
		/* 820E513Ch case    7:*/		cpu::op::addic<1>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 820E513Ch case    7:*/		return 0x820E5140;
		  /* 820E5140h */ case    8:  		/* bc 12, CR0_EQ, 88 */
		/* 820E5140h case    8:*/		if ( regs.CR[0].eq ) { return 0x820E5198;  }
		/* 820E5140h case    8:*/		return 0x820E5144;
		  /* 820E5144h */ case    9:  		/* li R6, 0 */
		/* 820E5144h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E5144h case    9:*/		return 0x820E5148;
	}
	return 0x820E5148;
} // Block from 820E5120h-820E5148h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E5148h
// Function '?MatchBREAK2@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5148);
		  /* 820E5148h */ case    0:  		/* lwz R11, <#[R29 + 260]> */
		/* 820E5148h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000104) );
		/* 820E5148h case    0:*/		return 0x820E514C;
		  /* 820E514Ch */ case    1:  		/* lwz R10, <#[R29 + 20]> */
		/* 820E514Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000014) );
		/* 820E514Ch case    1:*/		return 0x820E5150;
		  /* 820E5150h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E5150h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E5150h case    2:*/		return 0x820E5154;
		  /* 820E5154h */ case    3:  		/* add R11, R11, R6 */
		/* 820E5154h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 820E5154h case    3:*/		return 0x820E5158;
		  /* 820E5158h */ case    4:  		/* lwz R9, <#[R11 + 4]> */
		/* 820E5158h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820E5158h case    4:*/		return 0x820E515C;
		  /* 820E515Ch */ case    5:  		/* lwz R11, <#[R11]> */
		/* 820E515Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E515Ch case    5:*/		return 0x820E5160;
		  /* 820E5160h */ case    6:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E5160h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E5160h case    6:*/		return 0x820E5164;
		  /* 820E5164h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5164h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5164h case    7:*/		return 0x820E5168;
		  /* 820E5168h */ case    8:  		/* lwzx R9, <#[R9 + R10]> */
		/* 820E5168h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820E5168h case    8:*/		return 0x820E516C;
		  /* 820E516Ch */ case    9:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E516Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E516Ch case    9:*/		return 0x820E5170;
		  /* 820E5170h */ case   10:  		/* lwz R10, <#[R9 + 16]> */
		/* 820E5170h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000010) );
		/* 820E5170h case   10:*/		return 0x820E5174;
		  /* 820E5174h */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E5174h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E5174h case   11:*/		return 0x820E5178;
		  /* 820E5178h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 820E5178h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E5178h case   12:*/		return 0x820E517C;
		  /* 820E517Ch */ case   13:  		/* bc 4, CR6_GT, 12 */
		/* 820E517Ch case   13:*/		if ( !regs.CR[6].gt ) { return 0x820E5188;  }
		/* 820E517Ch case   13:*/		return 0x820E5180;
		  /* 820E5180h */ case   14:  		/* lwz R3, <#[R29 + 260]> */
		/* 820E5180h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000104) );
		/* 820E5180h case   14:*/		return 0x820E5184;
		  /* 820E5184h */ case   15:  		/* bl -308 */
		/* 820E5184h case   15:*/		regs.LR = 0x820E5188; return 0x820E5050;
		/* 820E5184h case   15:*/		return 0x820E5188;
	}
	return 0x820E5188;
} // Block from 820E5148h-820E5188h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E5188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5188);
		  /* 820E5188h */ case    0:  		/* addi R4, R4, 1 */
		/* 820E5188h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E5188h case    0:*/		return 0x820E518C;
		  /* 820E518Ch */ case    1:  		/* addi R6, R6, 4 */
		/* 820E518Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 820E518Ch case    1:*/		return 0x820E5190;
		  /* 820E5190h */ case    2:  		/* cmplw CR6, R4, R5 */
		/* 820E5190h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R5);
		/* 820E5190h case    2:*/		return 0x820E5194;
		  /* 820E5194h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 820E5194h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E5148;  }
		/* 820E5194h case    3:*/		return 0x820E5198;
	}
	return 0x820E5198;
} // Block from 820E5188h-820E5198h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E5198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5198);
		  /* 820E5198h */ case    0:  		/* addi R31, R31, 1 */
		/* 820E5198h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820E5198h case    0:*/		return 0x820E519C;
		  /* 820E519Ch */ case    1:  		/* cmplw CR6, R31, R30 */
		/* 820E519Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820E519Ch case    1:*/		return 0x820E51A0;
		  /* 820E51A0h */ case    2:  		/* bc 12, CR6_LT, -108 */
		/* 820E51A0h case    2:*/		if ( regs.CR[6].lt ) { return 0x820E5134;  }
		/* 820E51A0h case    2:*/		return 0x820E51A4;
		  /* 820E51A4h */ case    3:  		/* li R3, 0 */
		/* 820E51A4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E51A4h case    3:*/		return 0x820E51A8;
		  /* 820E51A8h */ case    4:  		/* b 8 */
		/* 820E51A8h case    4:*/		return 0x820E51B0;
		/* 820E51A8h case    4:*/		return 0x820E51AC;
	}
	return 0x820E51AC;
} // Block from 820E5198h-820E51ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E51ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E51AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E51AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E51AC);
		  /* 820E51ACh */ case    0:  		/* li R3, 1 */
		/* 820E51ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E51ACh case    0:*/		return 0x820E51B0;
	}
	return 0x820E51B0;
} // Block from 820E51ACh-820E51B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E51B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E51B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E51B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E51B0);
		  /* 820E51B0h */ case    0:  		/* addi R1, R1, 112 */
		/* 820E51B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820E51B0h case    0:*/		return 0x820E51B4;
		  /* 820E51B4h */ case    1:  		/* b -343816 */
		/* 820E51B4h case    1:*/		return 0x820912AC;
		/* 820E51B4h case    1:*/		return 0x820E51B8;
	}
	return 0x820E51B8;
} // Block from 820E51B0h-820E51B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E51B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E51B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E51B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E51B8);
		  /* 820E51B8h */ case    0:  		/* mfspr R12, LR */
		/* 820E51B8h case    0:*/		regs.R12 = regs.LR;
		/* 820E51B8h case    0:*/		return 0x820E51BC;
		  /* 820E51BCh */ case    1:  		/* bl -343952 */
		/* 820E51BCh case    1:*/		regs.LR = 0x820E51C0; return 0x8209122C;
		/* 820E51BCh case    1:*/		return 0x820E51C0;
		  /* 820E51C0h */ case    2:  		/* stfd FR31, <#[R1 - 136]> */
		/* 820E51C0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 820E51C0h case    2:*/		return 0x820E51C4;
		  /* 820E51C4h */ case    3:  		/* stwu R1, <#[R1 - 288]> */
		/* 820E51C4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 820E51C4h case    3:*/		return 0x820E51C8;
		  /* 820E51C8h */ case    4:  		/* lwz R10, <#[R3 + 260]> */
		/* 820E51C8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 820E51C8h case    4:*/		return 0x820E51CC;
		  /* 820E51CCh */ case    5:  		/* mr R21, R3 */
		/* 820E51CCh case    5:*/		regs.R21 = regs.R3;
		/* 820E51CCh case    5:*/		return 0x820E51D0;
		  /* 820E51D0h */ case    6:  		/* lwz R11, <#[R10]> */
		/* 820E51D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E51D0h case    6:*/		return 0x820E51D4;
		  /* 820E51D4h */ case    7:  		/* rlwinm. R19, R11, 0, 12, 31 */
		/* 820E51D4h case    7:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R19,regs.R11);
		/* 820E51D4h case    7:*/		return 0x820E51D8;
		  /* 820E51D8h */ case    8:  		/* bc 12, CR0_EQ, 1176 */
		/* 820E51D8h case    8:*/		if ( regs.CR[0].eq ) { return 0x820E5670;  }
		/* 820E51D8h case    8:*/		return 0x820E51DC;
		  /* 820E51DCh */ case    9:  		/* lwz R11, <#[R10 + 4]> */
		/* 820E51DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820E51DCh case    9:*/		return 0x820E51E0;
		  /* 820E51E0h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820E51E0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E51E0h case   10:*/		return 0x820E51E4;
		  /* 820E51E4h */ case   11:  		/* bc 12, CR6_EQ, 1164 */
		/* 820E51E4h case   11:*/		if ( regs.CR[6].eq ) { return 0x820E5670;  }
		/* 820E51E4h case   11:*/		return 0x820E51E8;
		  /* 820E51E8h */ case   12:  		/* lwz R9, <#[R10 + 12]> */
		/* 820E51E8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E51E8h case   12:*/		return 0x820E51EC;
		  /* 820E51ECh */ case   13:  		/* cmplwi CR6, R9, 0 */
		/* 820E51ECh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820E51ECh case   13:*/		return 0x820E51F0;
		  /* 820E51F0h */ case   14:  		/* bc 12, CR6_EQ, 1152 */
		/* 820E51F0h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E5670;  }
		/* 820E51F0h case   14:*/		return 0x820E51F4;
		  /* 820E51F4h */ case   15:  		/* divwu. R17, R11, R19 */
		/* 820E51F4h case   15:*/		cpu::op::divwu<1>(regs,&regs.R17,regs.R11,regs.R19);
		/* 820E51F4h case   15:*/		return 0x820E51F8;
		  /* 820E51F8h */ case   16:  		/* twi 6, R19, 0 */
		/* 820E51F8h case   16:*/		cpu::op::tw<6>(regs, 0x820E51F8, regs.R19, 0x00000000);
		/* 820E51F8h case   16:*/		return 0x820E51FC;
		  /* 820E51FCh */ case   17:  		/* li R29, 0 */
		/* 820E51FCh case   17:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820E51FCh case   17:*/		return 0x820E5200;
		  /* 820E5200h */ case   18:  		/* li R28, 0 */
		/* 820E5200h case   18:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820E5200h case   18:*/		return 0x820E5204;
		  /* 820E5204h */ case   19:  		/* li R9, 0 */
		/* 820E5204h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E5204h case   19:*/		return 0x820E5208;
		  /* 820E5208h */ case   20:  		/* bc 12, CR0_EQ, 1128 */
		/* 820E5208h case   20:*/		if ( regs.CR[0].eq ) { return 0x820E5670;  }
		/* 820E5208h case   20:*/		return 0x820E520C;
		  /* 820E520Ch */ case   21:  		/* lwz R7, <#[R10 + 8]> */
		/* 820E520Ch case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 820E520Ch case   21:*/		return 0x820E5210;
		  /* 820E5210h */ case   22:  		/* addi R6, R1, 80 */
		/* 820E5210h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 820E5210h case   22:*/		return 0x820E5214;
		  /* 820E5214h */ case   23:  		/* lwz R4, <#[R3 + 20]> */
		/* 820E5214h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000014) );
		/* 820E5214h case   23:*/		return 0x820E5218;
		  /* 820E5218h */ case   24:  		/* addi R5, R1, 80 */
		/* 820E5218h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 820E5218h case   24:*/		return 0x820E521C;
		  /* 820E521Ch */ case   25:  		/* rlwinm R18, R19, 2, 0, 29 */
		/* 820E521Ch case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R18,regs.R19);
		/* 820E521Ch case   25:*/		return 0x820E5220;
		  /* 820E5220h */ case   26:  		/* lwz R11, <#[R7]> */
		/* 820E5220h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 820E5220h case   26:*/		return 0x820E5224;
		  /* 820E5224h */ case   27:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5224h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5224h case   27:*/		return 0x820E5228;
		  /* 820E5228h */ case   28:  		/* lwzx R11, <#[R11 + R4]> */
		/* 820E5228h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E5228h case   28:*/		return 0x820E522C;
		  /* 820E522Ch */ case   29:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E522Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E522Ch case   29:*/		return 0x820E5230;
		  /* 820E5230h */ case   30:  		/* cmpwi CR6, R11, -1 */
		/* 820E5230h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E5230h case   30:*/		return 0x820E5234;
		  /* 820E5234h */ case   31:  		/* bc 12, CR6_EQ, 112 */
		/* 820E5234h case   31:*/		if ( regs.CR[6].eq ) { return 0x820E52A4;  }
		/* 820E5234h case   31:*/		return 0x820E5238;
		  /* 820E5238h */ case   32:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 820E5238h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 820E5238h case   32:*/		return 0x820E523C;
		  /* 820E523Ch */ case   33:  		/* lwz R8, <#[R21 + 16]> */
		/* 820E523Ch case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000010) );
		/* 820E523Ch case   33:*/		return 0x820E5240;
		  /* 820E5240h */ case   34:  		/* lwzx R10, <#[R10 + R4]> */
		/* 820E5240h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 820E5240h case   34:*/		return 0x820E5244;
		  /* 820E5244h */ case   35:  		/* lwz R10, <#[R10 + 4]> */
		/* 820E5244h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820E5244h case   35:*/		return 0x820E5248;
		  /* 820E5248h */ case   36:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E5248h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E5248h case   36:*/		return 0x820E524C;
		  /* 820E524Ch */ case   37:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820E524Ch case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E524Ch case   37:*/		return 0x820E5250;
		  /* 820E5250h */ case   38:  		/* lwz R10, <#[R10 + 4]> */
		/* 820E5250h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820E5250h case   38:*/		return 0x820E5254;
		  /* 820E5254h */ case   39:  		/* rlwinm. R10, R10, 0, 29, 29 */
		/* 820E5254h case   39:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R10);
		/* 820E5254h case   39:*/		return 0x820E5258;
		  /* 820E5258h */ case   40:  		/* bc 4, CR0_EQ, 76 */
		/* 820E5258h case   40:*/		if ( !regs.CR[0].eq ) { return 0x820E52A4;  }
		/* 820E5258h case   40:*/		return 0x820E525C;
		  /* 820E525Ch */ case   41:  		/* stw R11, <#[R5]> */
		/* 820E525Ch case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 820E525Ch case   41:*/		return 0x820E5260;
		  /* 820E5260h */ case   42:  		/* li R11, 0 */
		/* 820E5260h case   42:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E5260h case   42:*/		return 0x820E5264;
		  /* 820E5264h */ case   43:  		/* cmplwi CR6, R9, 0 */
		/* 820E5264h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820E5264h case   43:*/		return 0x820E5268;
		  /* 820E5268h */ case   44:  		/* bc 12, CR6_EQ, 40 */
		/* 820E5268h case   44:*/		if ( regs.CR[6].eq ) { return 0x820E5290;  }
		/* 820E5268h case   44:*/		return 0x820E526C;
		  /* 820E526Ch */ case   45:  		/* lwz R8, <#[R6]> */
		/* 820E526Ch case   45:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 820E526Ch case   45:*/		return 0x820E5270;
		  /* 820E5270h */ case   46:  		/* addi R10, R1, 80 */
		/* 820E5270h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 820E5270h case   46:*/		return 0x820E5274;
		  /* 820E5274h */ case   47:  		/* lwz R3, <#[R10]> */
		/* 820E5274h case   47:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000000) );
		/* 820E5274h case   47:*/		return 0x820E5278;
		  /* 820E5278h */ case   48:  		/* cmplw CR6, R3, R8 */
		/* 820E5278h case   48:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R8);
		/* 820E5278h case   48:*/		return 0x820E527C;
		  /* 820E527Ch */ case   49:  		/* bc 12, CR6_EQ, 20 */
		/* 820E527Ch case   49:*/		if ( regs.CR[6].eq ) { return 0x820E5290;  }
		/* 820E527Ch case   49:*/		return 0x820E5280;
		  /* 820E5280h */ case   50:  		/* addi R11, R11, 1 */
		/* 820E5280h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E5280h case   50:*/		return 0x820E5284;
		  /* 820E5284h */ case   51:  		/* addi R10, R10, 4 */
		/* 820E5284h case   51:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E5284h case   51:*/		return 0x820E5288;
		  /* 820E5288h */ case   52:  		/* cmplw CR6, R11, R9 */
		/* 820E5288h case   52:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E5288h case   52:*/		return 0x820E528C;
		  /* 820E528Ch */ case   53:  		/* bc 12, CR6_LT, -24 */
		/* 820E528Ch case   53:*/		if ( regs.CR[6].lt ) { return 0x820E5274;  }
		/* 820E528Ch case   53:*/		return 0x820E5290;
	}
	return 0x820E5290;
} // Block from 820E51B8h-820E5290h (54 instructions)

//////////////////////////////////////////////////////
// Block at 820E5290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5290);
		  /* 820E5290h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 820E5290h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E5290h case    0:*/		return 0x820E5294;
		  /* 820E5294h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 820E5294h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E529C;  }
		/* 820E5294h case    1:*/		return 0x820E5298;
		  /* 820E5298h */ case    2:  		/* addi R28, R28, 1 */
		/* 820E5298h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 820E5298h case    2:*/		return 0x820E529C;
	}
	return 0x820E529C;
} // Block from 820E5290h-820E529Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E529Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E529C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E529C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E529C);
		  /* 820E529Ch */ case    0:  		/* addi R29, R29, 1 */
		/* 820E529Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820E529Ch case    0:*/		return 0x820E52A0;
		  /* 820E52A0h */ case    1:  		/* addi R5, R5, 4 */
		/* 820E52A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 820E52A0h case    1:*/		return 0x820E52A4;
	}
	return 0x820E52A4;
} // Block from 820E529Ch-820E52A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E52A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E52A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E52A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E52A4);
		  /* 820E52A4h */ case    0:  		/* addi R9, R9, 1 */
		/* 820E52A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E52A4h case    0:*/		return 0x820E52A8;
		  /* 820E52A8h */ case    1:  		/* add R7, R18, R7 */
		/* 820E52A8h case    1:*/		cpu::op::add<0>(regs,&regs.R7,regs.R18,regs.R7);
		/* 820E52A8h case    1:*/		return 0x820E52AC;
		  /* 820E52ACh */ case    2:  		/* addi R6, R6, 4 */
		/* 820E52ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 820E52ACh case    2:*/		return 0x820E52B0;
		  /* 820E52B0h */ case    3:  		/* cmplw CR6, R9, R17 */
		/* 820E52B0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R17);
		/* 820E52B0h case    3:*/		return 0x820E52B4;
		  /* 820E52B4h */ case    4:  		/* bc 12, CR6_LT, -148 */
		/* 820E52B4h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E5220;  }
		/* 820E52B4h case    4:*/		return 0x820E52B8;
		  /* 820E52B8h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 820E52B8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E52B8h case    5:*/		return 0x820E52BC;
		  /* 820E52BCh */ case    6:  		/* bc 12, CR6_EQ, 948 */
		/* 820E52BCh case    6:*/		if ( regs.CR[6].eq ) { return 0x820E5670;  }
		/* 820E52BCh case    6:*/		return 0x820E52C0;
		  /* 820E52C0h */ case    7:  		/* lis R11, -32256 */
		/* 820E52C0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E52C0h case    7:*/		return 0x820E52C4;
		  /* 820E52C4h */ case    8:  		/* li R31, 0 */
		/* 820E52C4h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E52C4h case    8:*/		return 0x820E52C8;
		  /* 820E52C8h */ case    9:  		/* cmplwi CR6, R29, 0 */
		/* 820E52C8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E52C8h case    9:*/		return 0x820E52CC;
		  /* 820E52CCh */ case   10:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 820E52CCh case   10:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 820E52CCh case   10:*/		return 0x820E52D0;
		  /* 820E52D0h */ case   11:  		/* bc 12, CR6_EQ, 232 */
		/* 820E52D0h case   11:*/		if ( regs.CR[6].eq ) { return 0x820E53B8;  }
		/* 820E52D0h case   11:*/		return 0x820E52D4;
		  /* 820E52D4h */ case   12:  		/* li R30, 0 */
		/* 820E52D4h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E52D4h case   12:*/		return 0x820E52D8;
		  /* 820E52D8h */ case   13:  		/* li R11, 0 */
		/* 820E52D8h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E52D8h case   13:*/		return 0x820E52DC;
		  /* 820E52DCh */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 820E52DCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E52DCh case   14:*/		return 0x820E52E0;
		  /* 820E52E0h */ case   15:  		/* bc 12, CR6_EQ, 76 */
		/* 820E52E0h case   15:*/		if ( regs.CR[6].eq ) { return 0x820E532C;  }
		/* 820E52E0h case   15:*/		return 0x820E52E4;
		  /* 820E52E4h */ case   16:  		/* addi R9, R1, 80 */
		/* 820E52E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 820E52E4h case   16:*/		return 0x820E52E8;
		  /* 820E52E8h */ case   17:  		/* addi R10, R1, 80 */
		/* 820E52E8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 820E52E8h case   17:*/		return 0x820E52EC;
		  /* 820E52ECh */ case   18:  		/* lwzx R9, <#[R30 + R9]> */
		/* 820E52ECh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 820E52ECh case   18:*/		return 0x820E52F0;
		  /* 820E52F0h */ case   19:  		/* lwz R8, <#[R10]> */
		/* 820E52F0h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820E52F0h case   19:*/		return 0x820E52F4;
		  /* 820E52F4h */ case   20:  		/* cmplw CR6, R8, R9 */
		/* 820E52F4h case   20:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 820E52F4h case   20:*/		return 0x820E52F8;
		  /* 820E52F8h */ case   21:  		/* bc 12, CR6_EQ, 24 */
		/* 820E52F8h case   21:*/		if ( regs.CR[6].eq ) { return 0x820E5310;  }
		/* 820E52F8h case   21:*/		return 0x820E52FC;
		  /* 820E52FCh */ case   22:  		/* addi R11, R11, 1 */
		/* 820E52FCh case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E52FCh case   22:*/		return 0x820E5300;
		  /* 820E5300h */ case   23:  		/* addi R10, R10, 4 */
		/* 820E5300h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E5300h case   23:*/		return 0x820E5304;
		  /* 820E5304h */ case   24:  		/* cmplw CR6, R11, R31 */
		/* 820E5304h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 820E5304h case   24:*/		return 0x820E5308;
		  /* 820E5308h */ case   25:  		/* bc 12, CR6_LT, -24 */
		/* 820E5308h case   25:*/		if ( regs.CR[6].lt ) { return 0x820E52F0;  }
		/* 820E5308h case   25:*/		return 0x820E530C;
		  /* 820E530Ch */ case   26:  		/* b 24 */
		/* 820E530Ch case   26:*/		return 0x820E5324;
		/* 820E530Ch case   26:*/		return 0x820E5310;
	}
	return 0x820E5310;
} // Block from 820E52A4h-820E5310h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E5310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5310);
		  /* 820E5310h */ case    0:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 820E5310h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 820E5310h case    0:*/		return 0x820E5314;
		  /* 820E5314h */ case    1:  		/* addi R9, R1, 96 */
		/* 820E5314h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 820E5314h case    1:*/		return 0x820E5318;
		  /* 820E5318h */ case    2:  		/* addi R8, R1, 96 */
		/* 820E5318h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 820E5318h case    2:*/		return 0x820E531C;
		  /* 820E531Ch */ case    3:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E531Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E531Ch case    3:*/		return 0x820E5320;
	}
	return 0x820E5320;
} // Block from 820E5310h-820E5320h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E5320h
// Function '?MatchENDWHILE@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5320);
		  /* 820E5320h */ case    0:  		/* stwx R10, <#[R30 + R8]> */
		/* 820E5320h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + regs.R8 + 0x00000000) );
		/* 820E5320h case    0:*/		return 0x820E5324;
	}
	return 0x820E5324;
} // Block from 820E5320h-820E5324h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E5324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5324);
		  /* 820E5324h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 820E5324h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 820E5324h case    0:*/		return 0x820E5328;
		  /* 820E5328h */ case    1:  		/* bc 12, CR6_LT, 128 */
		/* 820E5328h case    1:*/		if ( regs.CR[6].lt ) { return 0x820E53A8;  }
		/* 820E5328h case    1:*/		return 0x820E532C;
	}
	return 0x820E532C;
} // Block from 820E5324h-820E532Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E532Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E532C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E532C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E532C);
		  /* 820E532Ch */ case    0:  		/* cmplwi CR6, R28, 1 */
		/* 820E532Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 820E532Ch case    0:*/		return 0x820E5330;
		  /* 820E5330h */ case    1:  		/* li R6, 3 */
		/* 820E5330h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 820E5330h case    1:*/		return 0x820E5334;
		  /* 820E5334h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 820E5334h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E533C;  }
		/* 820E5334h case    2:*/		return 0x820E5338;
		  /* 820E5338h */ case    3:  		/* mr R6, R31 */
		/* 820E5338h case    3:*/		regs.R6 = regs.R31;
		/* 820E5338h case    3:*/		return 0x820E533C;
	}
	return 0x820E533C;
} // Block from 820E532Ch-820E533Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E533Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E533C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E533C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E533C);
		  /* 820E533Ch */ case    0:  		/* li R5, 0 */
		/* 820E533Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E533Ch case    0:*/		return 0x820E5340;
		  /* 820E5340h */ case    1:  		/* lwz R4, <#[R21 + 140]> */
		/* 820E5340h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x0000008C) );
		/* 820E5340h case    1:*/		return 0x820E5344;
		  /* 820E5344h */ case    2:  		/* mr R3, R21 */
		/* 820E5344h case    2:*/		regs.R3 = regs.R21;
		/* 820E5344h case    2:*/		return 0x820E5348;
		  /* 820E5348h */ case    3:  		/* fmr FR1, FR31 */
		/* 820E5348h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E5348h case    3:*/		return 0x820E534C;
		  /* 820E534Ch */ case    4:  		/* bl 98012 */
		/* 820E534Ch case    4:*/		regs.LR = 0x820E5350; return 0x820FD228;
		/* 820E534Ch case    4:*/		return 0x820E5350;
		  /* 820E5350h */ case    5:  		/* addi R11, R1, 96 */
		/* 820E5350h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 820E5350h case    5:*/		return 0x820E5354;
		  /* 820E5354h */ case    6:  		/* cmpwi CR6, R3, -1 */
		/* 820E5354h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E5354h case    6:*/		return 0x820E5358;
		  /* 820E5358h */ case    7:  		/* stwx R3, <#[R30 + R11]> */
		/* 820E5358h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820E5358h case    7:*/		return 0x820E535C;
		  /* 820E535Ch */ case    8:  		/* bc 12, CR6_EQ, 476 */
		/* 820E535Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x820E5538;  }
		/* 820E535Ch case    8:*/		return 0x820E5360;
		  /* 820E5360h */ case    9:  		/* lwz R11, <#[R21 + 260]> */
		/* 820E5360h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 820E5360h case    9:*/		return 0x820E5364;
		  /* 820E5364h */ case   10:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E5364h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E5364h case   10:*/		return 0x820E5368;
		  /* 820E5368h */ case   11:  		/* lwz R9, <#[R21 + 20]> */
		/* 820E5368h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000014) );
		/* 820E5368h case   11:*/		return 0x820E536C;
		  /* 820E536Ch */ case   12:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E536Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E536Ch case   12:*/		return 0x820E5370;
		  /* 820E5370h */ case   13:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E5370h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E5370h case   13:*/		return 0x820E5374;
		  /* 820E5374h */ case   14:  		/* lwz R11, <#[R11]> */
		/* 820E5374h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E5374h case   14:*/		return 0x820E5378;
		  /* 820E5378h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5378h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5378h case   15:*/		return 0x820E537C;
		  /* 820E537Ch */ case   16:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E537Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E537Ch case   16:*/		return 0x820E5380;
		  /* 820E5380h */ case   17:  		/* lwz R11, <#[R11 + 20]> */
		/* 820E5380h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820E5380h case   17:*/		return 0x820E5384;
		  /* 820E5384h */ case   18:  		/* stw R11, <#[R10 + 20]> */
		/* 820E5384h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 820E5384h case   18:*/		return 0x820E5388;
		  /* 820E5388h */ case   19:  		/* lwz R11, <#[R21 + 260]> */
		/* 820E5388h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 820E5388h case   19:*/		return 0x820E538C;
		  /* 820E538Ch */ case   20:  		/* lwz R9, <#[R21 + 20]> */
		/* 820E538Ch case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000014) );
		/* 820E538Ch case   20:*/		return 0x820E5390;
		  /* 820E5390h */ case   21:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E5390h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E5390h case   21:*/		return 0x820E5394;
		  /* 820E5394h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 820E5394h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E5394h case   22:*/		return 0x820E5398;
		  /* 820E5398h */ case   23:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5398h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5398h case   23:*/		return 0x820E539C;
		  /* 820E539Ch */ case   24:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E539Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E539Ch case   24:*/		return 0x820E53A0;
		  /* 820E53A0h */ case   25:  		/* lwz R11, <#[R11 + 24]> */
		/* 820E53A0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820E53A0h case   25:*/		return 0x820E53A4;
		  /* 820E53A4h */ case   26:  		/* stw R11, <#[R10 + 24]> */
		/* 820E53A4h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 820E53A4h case   26:*/		return 0x820E53A8;
	}
	return 0x820E53A8;
} // Block from 820E533Ch-820E53A8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E53A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E53A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E53A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E53A8);
		  /* 820E53A8h */ case    0:  		/* addi R31, R31, 1 */
		/* 820E53A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820E53A8h case    0:*/		return 0x820E53AC;
		  /* 820E53ACh */ case    1:  		/* addi R30, R30, 4 */
		/* 820E53ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E53ACh case    1:*/		return 0x820E53B0;
		  /* 820E53B0h */ case    2:  		/* cmplw CR6, R31, R29 */
		/* 820E53B0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 820E53B0h case    2:*/		return 0x820E53B4;
		  /* 820E53B4h */ case    3:  		/* bc 12, CR6_LT, -220 */
		/* 820E53B4h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E52D8;  }
		/* 820E53B4h case    3:*/		return 0x820E53B8;
	}
	return 0x820E53B8;
} // Block from 820E53A8h-820E53B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E53B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E53B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E53B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E53B8);
		  /* 820E53B8h */ case    0:  		/* li R20, 0 */
		/* 820E53B8h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 820E53B8h case    0:*/		return 0x820E53BC;
		  /* 820E53BCh */ case    1:  		/* li R22, 0 */
		/* 820E53BCh case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 820E53BCh case    1:*/		return 0x820E53C0;
		  /* 820E53C0h */ case    2:  		/* li R25, 0 */
		/* 820E53C0h case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820E53C0h case    2:*/		return 0x820E53C4;
		  /* 820E53C4h */ case    3:  		/* addi R24, R1, 96 */
		/* 820E53C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R1,0x60);
		/* 820E53C4h case    3:*/		return 0x820E53C8;
		  /* 820E53C8h */ case    4:  		/* li R23, 0 */
		/* 820E53C8h case    4:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 820E53C8h case    4:*/		return 0x820E53CC;
		  /* 820E53CCh */ case    5:  		/* lwz R10, <#[R21 + 260]> */
		/* 820E53CCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000104) );
		/* 820E53CCh case    5:*/		return 0x820E53D0;
		  /* 820E53D0h */ case    6:  		/* lwz R11, <#[R21 + 20]> */
		/* 820E53D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 820E53D0h case    6:*/		return 0x820E53D4;
		  /* 820E53D4h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E53D4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E53D4h case    7:*/		return 0x820E53D8;
		  /* 820E53D8h */ case    8:  		/* lwzx R10, <#[R10 + R23]> */
		/* 820E53D8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 820E53D8h case    8:*/		return 0x820E53DC;
		  /* 820E53DCh */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E53DCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E53DCh case    9:*/		return 0x820E53E0;
		  /* 820E53E0h */ case   10:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E53E0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E53E0h case   10:*/		return 0x820E53E4;
		  /* 820E53E4h */ case   11:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E53E4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E53E4h case   11:*/		return 0x820E53E8;
		  /* 820E53E8h */ case   12:  		/* cmpwi CR6, R10, -1 */
		/* 820E53E8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E53E8h case   12:*/		return 0x820E53EC;
		  /* 820E53ECh */ case   13:  		/* bc 12, CR6_EQ, 284 */
		/* 820E53ECh case   13:*/		if ( regs.CR[6].eq ) { return 0x820E5508;  }
		/* 820E53ECh case   13:*/		return 0x820E53F0;
		  /* 820E53F0h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E53F0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E53F0h case   14:*/		return 0x820E53F4;
		  /* 820E53F4h */ case   15:  		/* lwz R9, <#[R21 + 16]> */
		/* 820E53F4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000010) );
		/* 820E53F4h case   15:*/		return 0x820E53F8;
		  /* 820E53F8h */ case   16:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E53F8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E53F8h case   16:*/		return 0x820E53FC;
		  /* 820E53FCh */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E53FCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E53FCh case   17:*/		return 0x820E5400;
		  /* 820E5400h */ case   18:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5400h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5400h case   18:*/		return 0x820E5404;
		  /* 820E5404h */ case   19:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E5404h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E5404h case   19:*/		return 0x820E5408;
		  /* 820E5408h */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E5408h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E5408h case   20:*/		return 0x820E540C;
		  /* 820E540Ch */ case   21:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 820E540Ch case   21:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 820E540Ch case   21:*/		return 0x820E5410;
		  /* 820E5410h */ case   22:  		/* bc 4, CR0_EQ, 248 */
		/* 820E5410h case   22:*/		if ( !regs.CR[0].eq ) { return 0x820E5508;  }
		/* 820E5410h case   22:*/		return 0x820E5414;
		  /* 820E5414h */ case   23:  		/* li R30, 0 */
		/* 820E5414h case   23:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E5414h case   23:*/		return 0x820E5418;
		  /* 820E5418h */ case   24:  		/* cmplwi CR6, R19, 0 */
		/* 820E5418h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 820E5418h case   24:*/		return 0x820E541C;
		  /* 820E541Ch */ case   25:  		/* bc 12, CR6_EQ, 228 */
		/* 820E541Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x820E5500;  }
		/* 820E541Ch case   25:*/		return 0x820E5420;
		  /* 820E5420h */ case   26:  		/* lwz R11, <#[R21 + 260]> */
		/* 820E5420h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 820E5420h case   26:*/		return 0x820E5424;
		  /* 820E5424h */ case   27:  		/* add R10, R25, R30 */
		/* 820E5424h case   27:*/		cpu::op::add<0>(regs,&regs.R10,regs.R25,regs.R30);
		/* 820E5424h case   27:*/		return 0x820E5428;
		  /* 820E5428h */ case   28:  		/* lwz R9, <#[R21 + 20]> */
		/* 820E5428h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000014) );
		/* 820E5428h case   28:*/		return 0x820E542C;
		  /* 820E542Ch */ case   29:  		/* li R6, 0 */
		/* 820E542Ch case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E542Ch case   29:*/		return 0x820E5430;
		  /* 820E5430h */ case   30:  		/* rlwinm R26, R10, 2, 0, 29 */
		/* 820E5430h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R10);
		/* 820E5430h case   30:*/		return 0x820E5434;
		  /* 820E5434h */ case   31:  		/* fmr FR1, FR31 */
		/* 820E5434h case   31:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E5434h case   31:*/		return 0x820E5438;
		  /* 820E5438h */ case   32:  		/* li R5, 0 */
		/* 820E5438h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E5438h case   32:*/		return 0x820E543C;
		  /* 820E543Ch */ case   33:  		/* li R4, 0 */
		/* 820E543Ch case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E543Ch case   33:*/		return 0x820E5440;
		  /* 820E5440h */ case   34:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E5440h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E5440h case   34:*/		return 0x820E5444;
		  /* 820E5444h */ case   35:  		/* mr R3, R21 */
		/* 820E5444h case   35:*/		regs.R3 = regs.R21;
		/* 820E5444h case   35:*/		return 0x820E5448;
		  /* 820E5448h */ case   36:  		/* lwzx R11, <#[R11 + R26]> */
		/* 820E5448h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 820E5448h case   36:*/		return 0x820E544C;
		  /* 820E544Ch */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E544Ch case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E544Ch case   37:*/		return 0x820E5450;
		  /* 820E5450h */ case   38:  		/* lwzx R27, <#[R11 + R9]> */
		/* 820E5450h case   38:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E5450h case   38:*/		return 0x820E5454;
		  /* 820E5454h */ case   39:  		/* bl 97748 */
		/* 820E5454h case   39:*/		regs.LR = 0x820E5458; return 0x820FD228;
		/* 820E5454h case   39:*/		return 0x820E5458;
		  /* 820E5458h */ case   40:  		/* mr R29, R3 */
		/* 820E5458h case   40:*/		regs.R29 = regs.R3;
		/* 820E5458h case   40:*/		return 0x820E545C;
		  /* 820E545Ch */ case   41:  		/* cmpwi CR6, R3, -1 */
		/* 820E545Ch case   41:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E545Ch case   41:*/		return 0x820E5460;
		  /* 820E5460h */ case   42:  		/* bc 12, CR6_EQ, 216 */
		/* 820E5460h case   42:*/		if ( regs.CR[6].eq ) { return 0x820E5538;  }
		/* 820E5460h case   42:*/		return 0x820E5464;
		  /* 820E5464h */ case   43:  		/* lwz R11, <#[R21 + 20]> */
		/* 820E5464h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 820E5464h case   43:*/		return 0x820E5468;
		  /* 820E5468h */ case   44:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E5468h case   44:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E5468h case   44:*/		return 0x820E546C;
		  /* 820E546Ch */ case   45:  		/* mr R4, R27 */
		/* 820E546Ch case   45:*/		regs.R4 = regs.R27;
		/* 820E546Ch case   45:*/		return 0x820E5470;
		  /* 820E5470h */ case   46:  		/* lwzx R31, <#[R10 + R11]> */
		/* 820E5470h case   46:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E5470h case   46:*/		return 0x820E5474;
		  /* 820E5474h */ case   47:  		/* mr R3, R31 */
		/* 820E5474h case   47:*/		regs.R3 = regs.R31;
		/* 820E5474h case   47:*/		return 0x820E5478;
		  /* 820E5478h */ case   48:  		/* bl 96048 */
		/* 820E5478h case   48:*/		regs.LR = 0x820E547C; return 0x820FCBA8;
		/* 820E5478h case   48:*/		return 0x820E547C;
		  /* 820E547Ch */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 820E547Ch case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E547Ch case   49:*/		return 0x820E5480;
		  /* 820E5480h */ case   50:  		/* bc 12, CR0_LT, 500 */
		/* 820E5480h case   50:*/		if ( regs.CR[0].lt ) { return 0x820E5674;  }
		/* 820E5480h case   50:*/		return 0x820E5484;
		  /* 820E5484h */ case   51:  		/* lwz R11, <#[R31 + 56]> */
		/* 820E5484h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 820E5484h case   51:*/		return 0x820E5488;
		  /* 820E5488h */ case   52:  		/* cmpwi CR6, R11, -1 */
		/* 820E5488h case   52:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E5488h case   52:*/		return 0x820E548C;
		  /* 820E548Ch */ case   53:  		/* bc 12, CR6_EQ, 84 */
		/* 820E548Ch case   53:*/		if ( regs.CR[6].eq ) { return 0x820E54E0;  }
		/* 820E548Ch case   53:*/		return 0x820E5490;
		  /* 820E5490h */ case   54:  		/* li R6, 0 */
		/* 820E5490h case   54:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E5490h case   54:*/		return 0x820E5494;
		  /* 820E5494h */ case   55:  		/* fmr FR1, FR31 */
		/* 820E5494h case   55:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E5494h case   55:*/		return 0x820E5498;
		  /* 820E5498h */ case   56:  		/* li R5, 0 */
		/* 820E5498h case   56:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E5498h case   56:*/		return 0x820E549C;
		  /* 820E549Ch */ case   57:  		/* li R4, 0 */
		/* 820E549Ch case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E549Ch case   57:*/		return 0x820E54A0;
		  /* 820E54A0h */ case   58:  		/* mr R3, R21 */
		/* 820E54A0h case   58:*/		regs.R3 = regs.R21;
		/* 820E54A0h case   58:*/		return 0x820E54A4;
		  /* 820E54A4h */ case   59:  		/* bl 97668 */
		/* 820E54A4h case   59:*/		regs.LR = 0x820E54A8; return 0x820FD228;
		/* 820E54A4h case   59:*/		return 0x820E54A8;
		  /* 820E54A8h */ case   60:  		/* mr R28, R3 */
		/* 820E54A8h case   60:*/		regs.R28 = regs.R3;
		/* 820E54A8h case   60:*/		return 0x820E54AC;
		  /* 820E54ACh */ case   61:  		/* cmpwi CR6, R3, -1 */
		/* 820E54ACh case   61:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E54ACh case   61:*/		return 0x820E54B0;
		  /* 820E54B0h */ case   62:  		/* bc 12, CR6_EQ, 136 */
		/* 820E54B0h case   62:*/		if ( regs.CR[6].eq ) { return 0x820E5538;  }
		/* 820E54B0h case   62:*/		return 0x820E54B4;
		  /* 820E54B4h */ case   63:  		/* lwz R11, <#[R21 + 20]> */
		/* 820E54B4h case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 820E54B4h case   63:*/		return 0x820E54B8;
		  /* 820E54B8h */ case   64:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E54B8h case   64:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E54B8h case   64:*/		return 0x820E54BC;
		  /* 820E54BCh */ case   65:  		/* lwz R9, <#[R27 + 56]> */
		/* 820E54BCh case   65:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000038) );
		/* 820E54BCh case   65:*/		return 0x820E54C0;
		  /* 820E54C0h */ case   66:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E54C0h case   66:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E54C0h case   66:*/		return 0x820E54C4;
		  /* 820E54C4h */ case   67:  		/* lwzx R27, <#[R10 + R11]> */
		/* 820E54C4h case   67:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E54C4h case   67:*/		return 0x820E54C8;
		  /* 820E54C8h */ case   68:  		/* mr R3, R27 */
		/* 820E54C8h case   68:*/		regs.R3 = regs.R27;
		/* 820E54C8h case   68:*/		return 0x820E54CC;
		  /* 820E54CCh */ case   69:  		/* lwzx R4, <#[R9 + R11]> */
		/* 820E54CCh case   69:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E54CCh case   69:*/		return 0x820E54D0;
		  /* 820E54D0h */ case   70:  		/* bl 95960 */
		/* 820E54D0h case   70:*/		regs.LR = 0x820E54D4; return 0x820FCBA8;
		/* 820E54D0h case   70:*/		return 0x820E54D4;
		  /* 820E54D4h */ case   71:  		/* lwz R11, <#[R24]> */
		/* 820E54D4h case   71:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 820E54D4h case   71:*/		return 0x820E54D8;
		  /* 820E54D8h */ case   72:  		/* stw R28, <#[R31 + 56]> */
		/* 820E54D8h case   72:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000038) );
		/* 820E54D8h case   72:*/		return 0x820E54DC;
		  /* 820E54DCh */ case   73:  		/* stw R11, <#[R27 + 8]> */
		/* 820E54DCh case   73:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 820E54DCh case   73:*/		return 0x820E54E0;
	}
	return 0x820E54E0;
} // Block from 820E53B8h-820E54E0h (74 instructions)

//////////////////////////////////////////////////////
// Block at 820E54E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E54E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E54E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E54E0);
		  /* 820E54E0h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 820E54E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 820E54E0h case    0:*/		return 0x820E54E4;
		  /* 820E54E4h */ case    1:  		/* addi R30, R30, 1 */
		/* 820E54E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E54E4h case    1:*/		return 0x820E54E8;
		  /* 820E54E8h */ case    2:  		/* cmplw CR6, R30, R19 */
		/* 820E54E8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R19);
		/* 820E54E8h case    2:*/		return 0x820E54EC;
		  /* 820E54ECh */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 820E54ECh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E54ECh case    3:*/		return 0x820E54F0;
		  /* 820E54F0h */ case    4:  		/* lwz R11, <#[R21 + 260]> */
		/* 820E54F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000104) );
		/* 820E54F0h case    4:*/		return 0x820E54F4;
		  /* 820E54F4h */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E54F4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E54F4h case    5:*/		return 0x820E54F8;
		  /* 820E54F8h */ case    6:  		/* stwx R29, <#[R11 + R26]> */
		/* 820E54F8h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 820E54F8h case    6:*/		return 0x820E54FC;
		  /* 820E54FCh */ case    7:  		/* bc 12, CR6_LT, -220 */
		/* 820E54FCh case    7:*/		if ( regs.CR[6].lt ) { return 0x820E5420;  }
		/* 820E54FCh case    7:*/		return 0x820E5500;
	}
	return 0x820E5500;
} // Block from 820E54E0h-820E5500h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E5500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5500);
		  /* 820E5500h */ case    0:  		/* addi R20, R20, 1 */
		/* 820E5500h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 820E5500h case    0:*/		return 0x820E5504;
		  /* 820E5504h */ case    1:  		/* addi R24, R24, 4 */
		/* 820E5504h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 820E5504h case    1:*/		return 0x820E5508;
	}
	return 0x820E5508;
} // Block from 820E5500h-820E5508h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E5508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5508);
		  /* 820E5508h */ case    0:  		/* addi R22, R22, 1 */
		/* 820E5508h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 820E5508h case    0:*/		return 0x820E550C;
		  /* 820E550Ch */ case    1:  		/* add R25, R25, R19 */
		/* 820E550Ch case    1:*/		cpu::op::add<0>(regs,&regs.R25,regs.R25,regs.R19);
		/* 820E550Ch case    1:*/		return 0x820E5510;
		  /* 820E5510h */ case    2:  		/* add R23, R23, R18 */
		/* 820E5510h case    2:*/		cpu::op::add<0>(regs,&regs.R23,regs.R23,regs.R18);
		/* 820E5510h case    2:*/		return 0x820E5514;
		  /* 820E5514h */ case    3:  		/* cmplw CR6, R22, R17 */
		/* 820E5514h case    3:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R17);
		/* 820E5514h case    3:*/		return 0x820E5518;
		  /* 820E5518h */ case    4:  		/* bc 12, CR6_LT, -332 */
		/* 820E5518h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E53CC;  }
		/* 820E5518h case    4:*/		return 0x820E551C;
		  /* 820E551Ch */ case    5:  		/* li R3, 116 */
		/* 820E551Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E551Ch case    5:*/		return 0x820E5520;
		  /* 820E5520h */ case    6:  		/* bl 94328 */
		/* 820E5520h case    6:*/		regs.LR = 0x820E5524; return 0x820FC598;
		/* 820E5520h case    6:*/		return 0x820E5524;
		  /* 820E5524h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 820E5524h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E5524h case    7:*/		return 0x820E5528;
		  /* 820E5528h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 820E5528h case    8:*/		if ( regs.CR[0].eq ) { return 0x820E5544;  }
		/* 820E5528h case    8:*/		return 0x820E552C;
		  /* 820E552Ch */ case    9:  		/* bl 92532 */
		/* 820E552Ch case    9:*/		regs.LR = 0x820E5530; return 0x820FBEA0;
		/* 820E552Ch case    9:*/		return 0x820E5530;
		  /* 820E5530h */ case   10:  		/* mr R30, R3 */
		/* 820E5530h case   10:*/		regs.R30 = regs.R3;
		/* 820E5530h case   10:*/		return 0x820E5534;
		  /* 820E5534h */ case   11:  		/* b 20 */
		/* 820E5534h case   11:*/		return 0x820E5548;
		/* 820E5534h case   11:*/		return 0x820E5538;
	}
	return 0x820E5538;
} // Block from 820E5508h-820E5538h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E5538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5538);
		  /* 820E5538h */ case    0:  		/* lis R3, -32761 */
		/* 820E5538h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E5538h case    0:*/		return 0x820E553C;
		  /* 820E553Ch */ case    1:  		/* ori R3, R3, 14 */
		/* 820E553Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E553Ch case    1:*/		return 0x820E5540;
		  /* 820E5540h */ case    2:  		/* b 308 */
		/* 820E5540h case    2:*/		return 0x820E5674;
		/* 820E5540h case    2:*/		return 0x820E5544;
	}
	return 0x820E5544;
} // Block from 820E5538h-820E5544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E5544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5544);
		  /* 820E5544h */ case    0:  		/* li R30, 0 */
		/* 820E5544h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E5544h case    0:*/		return 0x820E5548;
	}
	return 0x820E5548;
} // Block from 820E5544h-820E5548h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E5548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5548);
		  /* 820E5548h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820E5548h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E5548h case    0:*/		return 0x820E554C;
		  /* 820E554Ch */ case    1:  		/* bc 12, CR6_EQ, -20 */
		/* 820E554Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5538;  }
		/* 820E554Ch case    1:*/		return 0x820E5550;
		  /* 820E5550h */ case    2:  		/* li R6, 0 */
		/* 820E5550h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E5550h case    2:*/		return 0x820E5554;
		  /* 820E5554h */ case    3:  		/* li R10, 0 */
		/* 820E5554h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E5554h case    3:*/		return 0x820E5558;
		  /* 820E5558h */ case    4:  		/* cmplwi CR6, R20, 0 */
		/* 820E5558h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820E5558h case    4:*/		return 0x820E555C;
		  /* 820E555Ch */ case    5:  		/* bc 12, CR6_EQ, 128 */
		/* 820E555Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820E55DC;  }
		/* 820E555Ch case    5:*/		return 0x820E5560;
		  /* 820E5560h */ case    6:  		/* li R8, 0 */
		/* 820E5560h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E5560h case    6:*/		return 0x820E5564;
		  /* 820E5564h */ case    7:  		/* li R5, 0 */
		/* 820E5564h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E5564h case    7:*/		return 0x820E5568;
		  /* 820E5568h */ case    8:  		/* li R9, 0 */
		/* 820E5568h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E5568h case    8:*/		return 0x820E556C;
		  /* 820E556Ch */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 820E556Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E556Ch case    9:*/		return 0x820E5570;
		  /* 820E5570h */ case   10:  		/* bc 12, CR6_EQ, 44 */
		/* 820E5570h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E559C;  }
		/* 820E5570h case   10:*/		return 0x820E5574;
		  /* 820E5574h */ case   11:  		/* addi R7, R1, 80 */
		/* 820E5574h case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820E5574h case   11:*/		return 0x820E5578;
		  /* 820E5578h */ case   12:  		/* addi R11, R1, 80 */
		/* 820E5578h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 820E5578h case   12:*/		return 0x820E557C;
		  /* 820E557Ch */ case   13:  		/* lwzx R7, <#[R8 + R7]> */
		/* 820E557Ch case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820E557Ch case   13:*/		return 0x820E5580;
		  /* 820E5580h */ case   14:  		/* lwz R4, <#[R11]> */
		/* 820E5580h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 820E5580h case   14:*/		return 0x820E5584;
		  /* 820E5584h */ case   15:  		/* cmplw CR6, R4, R7 */
		/* 820E5584h case   15:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R7);
		/* 820E5584h case   15:*/		return 0x820E5588;
		  /* 820E5588h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 820E5588h case   16:*/		if ( regs.CR[6].eq ) { return 0x820E559C;  }
		/* 820E5588h case   16:*/		return 0x820E558C;
		  /* 820E558Ch */ case   17:  		/* addi R9, R9, 1 */
		/* 820E558Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E558Ch case   17:*/		return 0x820E5590;
		  /* 820E5590h */ case   18:  		/* addi R11, R11, 4 */
		/* 820E5590h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E5590h case   18:*/		return 0x820E5594;
		  /* 820E5594h */ case   19:  		/* cmplw CR6, R9, R10 */
		/* 820E5594h case   19:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E5594h case   19:*/		return 0x820E5598;
		  /* 820E5598h */ case   20:  		/* bc 12, CR6_LT, -24 */
		/* 820E5598h case   20:*/		if ( regs.CR[6].lt ) { return 0x820E5580;  }
		/* 820E5598h case   20:*/		return 0x820E559C;
	}
	return 0x820E559C;
} // Block from 820E5548h-820E559Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E559Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E559C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E559C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E559C);
		  /* 820E559Ch */ case    0:  		/* cmplw CR6, R9, R10 */
		/* 820E559Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E559Ch case    0:*/		return 0x820E55A0;
	}
	return 0x820E55A0;
} // Block from 820E559Ch-820E55A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E55A0h
// Function '?MatchSINCOS@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E55A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E55A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E55A0);
		  /* 820E55A0h */ case    0:  		/* bc 4, CR6_EQ, 44 */
		/* 820E55A0h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820E55CC;  }
		/* 820E55A0h case    0:*/		return 0x820E55A4;
		  /* 820E55A4h */ case    1:  		/* addi R11, R1, 96 */
		/* 820E55A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 820E55A4h case    1:*/		return 0x820E55A8;
		  /* 820E55A8h */ case    2:  		/* addi R9, R1, 80 */
		/* 820E55A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 820E55A8h case    2:*/		return 0x820E55AC;
		  /* 820E55ACh */ case    3:  		/* addi R7, R1, 112 */
		/* 820E55ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 820E55ACh case    3:*/		return 0x820E55B0;
		  /* 820E55B0h */ case    4:  		/* addi R4, R1, 128 */
		/* 820E55B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E55B0h case    4:*/		return 0x820E55B4;
		  /* 820E55B4h */ case    5:  		/* addi R6, R6, 1 */
		/* 820E55B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820E55B4h case    5:*/		return 0x820E55B8;
		  /* 820E55B8h */ case    6:  		/* lwzx R11, <#[R8 + R11]> */
		/* 820E55B8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E55B8h case    6:*/		return 0x820E55BC;
		  /* 820E55BCh */ case    7:  		/* lwzx R9, <#[R8 + R9]> */
		/* 820E55BCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E55BCh case    7:*/		return 0x820E55C0;
		  /* 820E55C0h */ case    8:  		/* stwx R11, <#[R5 + R7]> */
		/* 820E55C0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 820E55C0h case    8:*/		return 0x820E55C4;
		  /* 820E55C4h */ case    9:  		/* stwx R9, <#[R5 + R4]> */
		/* 820E55C4h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 820E55C4h case    9:*/		return 0x820E55C8;
		  /* 820E55C8h */ case   10:  		/* addi R5, R5, 4 */
		/* 820E55C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 820E55C8h case   10:*/		return 0x820E55CC;
	}
	return 0x820E55CC;
} // Block from 820E55A0h-820E55CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E55CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E55CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E55CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E55CC);
		  /* 820E55CCh */ case    0:  		/* addi R10, R10, 1 */
		/* 820E55CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E55CCh case    0:*/		return 0x820E55D0;
		  /* 820E55D0h */ case    1:  		/* addi R8, R8, 4 */
		/* 820E55D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820E55D0h case    1:*/		return 0x820E55D4;
		  /* 820E55D4h */ case    2:  		/* cmplw CR6, R10, R20 */
		/* 820E55D4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 820E55D4h case    2:*/		return 0x820E55D8;
		  /* 820E55D8h */ case    3:  		/* bc 12, CR6_LT, -112 */
		/* 820E55D8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E5568;  }
		/* 820E55D8h case    3:*/		return 0x820E55DC;
	}
	return 0x820E55DC;
} // Block from 820E55CCh-820E55DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E55DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E55DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E55DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E55DC);
		  /* 820E55DCh */ case    0:  		/* mr R4, R6 */
		/* 820E55DCh case    0:*/		regs.R4 = regs.R6;
		/* 820E55DCh case    0:*/		return 0x820E55E0;
		  /* 820E55E0h */ case    1:  		/* li R11, 1 */
		/* 820E55E0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820E55E0h case    1:*/		return 0x820E55E4;
		  /* 820E55E4h */ case    2:  		/* li R7, 0 */
		/* 820E55E4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E55E4h case    2:*/		return 0x820E55E8;
		  /* 820E55E8h */ case    3:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 820E55E8h case    3:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 820E55E8h case    3:*/		return 0x820E55EC;
		  /* 820E55ECh */ case    4:  		/* mr R5, R6 */
		/* 820E55ECh case    4:*/		regs.R5 = regs.R6;
		/* 820E55ECh case    4:*/		return 0x820E55F0;
		  /* 820E55F0h */ case    5:  		/* mr R3, R30 */
		/* 820E55F0h case    5:*/		regs.R3 = regs.R30;
		/* 820E55F0h case    5:*/		return 0x820E55F4;
		  /* 820E55F4h */ case    6:  		/* bl 94268 */
		/* 820E55F4h case    6:*/		regs.LR = 0x820E55F8; return 0x820FC630;
		/* 820E55F4h case    6:*/		return 0x820E55F8;
		  /* 820E55F8h */ case    7:  		/* or. R31, R3, R3 */
		/* 820E55F8h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820E55F8h case    7:*/		return 0x820E55FC;
		  /* 820E55FCh */ case    8:  		/* mr R3, R30 */
		/* 820E55FCh case    8:*/		regs.R3 = regs.R30;
		/* 820E55FCh case    8:*/		return 0x820E5600;
		  /* 820E5600h */ case    9:  		/* bc 4, CR0_LT, 24 */
		/* 820E5600h case    9:*/		if ( !regs.CR[0].lt ) { return 0x820E5618;  }
		/* 820E5600h case    9:*/		return 0x820E5604;
		  /* 820E5604h */ case   10:  		/* bl 1277372 */
		/* 820E5604h case   10:*/		regs.LR = 0x820E5608; return 0x8221D3C0;
		/* 820E5604h case   10:*/		return 0x820E5608;
		  /* 820E5608h */ case   11:  		/* mr R3, R30 */
		/* 820E5608h case   11:*/		regs.R3 = regs.R30;
		/* 820E5608h case   11:*/		return 0x820E560C;
		  /* 820E560Ch */ case   12:  		/* bl 94180 */
		/* 820E560Ch case   12:*/		regs.LR = 0x820E5610; return 0x820FC5F0;
		/* 820E560Ch case   12:*/		return 0x820E5610;
		  /* 820E5610h */ case   13:  		/* mr R3, R31 */
		/* 820E5610h case   13:*/		regs.R3 = regs.R31;
		/* 820E5610h case   13:*/		return 0x820E5614;
		  /* 820E5614h */ case   14:  		/* b 96 */
		/* 820E5614h case   14:*/		return 0x820E5674;
		/* 820E5614h case   14:*/		return 0x820E5618;
	}
	return 0x820E5618;
} // Block from 820E55DCh-820E5618h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E5618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5618);
		  /* 820E5618h */ case    0:  		/* lwz R4, <#[R21 + 260]> */
		/* 820E5618h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000104) );
		/* 820E5618h case    0:*/		return 0x820E561C;
		  /* 820E561Ch */ case    1:  		/* bl 92372 */
		/* 820E561Ch case    1:*/		regs.LR = 0x820E5620; return 0x820FBEF0;
		/* 820E561Ch case    1:*/		return 0x820E5620;
		  /* 820E5620h */ case    2:  		/* or. R31, R3, R3 */
		/* 820E5620h case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820E5620h case    2:*/		return 0x820E5624;
		  /* 820E5624h */ case    3:  		/* bc 4, CR0_LT, 12 */
		/* 820E5624h case    3:*/		if ( !regs.CR[0].lt ) { return 0x820E5630;  }
		/* 820E5624h case    3:*/		return 0x820E5628;
		  /* 820E5628h */ case    4:  		/* mr R3, R30 */
		/* 820E5628h case    4:*/		regs.R3 = regs.R30;
		/* 820E5628h case    4:*/		return 0x820E562C;
		  /* 820E562Ch */ case    5:  		/* b -40 */
		/* 820E562Ch case    5:*/		return 0x820E5604;
		/* 820E562Ch case    5:*/		return 0x820E5630;
	}
	return 0x820E5630;
} // Block from 820E5618h-820E5630h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E5630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5630);
		  /* 820E5630h */ case    0:  		/* rlwinm R31, R20, 2, 0, 29 */
		/* 820E5630h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R20);
		/* 820E5630h case    0:*/		return 0x820E5634;
		  /* 820E5634h */ case    1:  		/* lwz R3, <#[R30 + 16]> */
		/* 820E5634h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 820E5634h case    1:*/		return 0x820E5638;
		  /* 820E5638h */ case    2:  		/* addi R4, R1, 112 */
		/* 820E5638h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820E5638h case    2:*/		return 0x820E563C;
		  /* 820E563Ch */ case    3:  		/* mr R5, R31 */
		/* 820E563Ch case    3:*/		regs.R5 = regs.R31;
		/* 820E563Ch case    3:*/		return 0x820E5640;
		  /* 820E5640h */ case    4:  		/* bl -343184 */
		/* 820E5640h case    4:*/		regs.LR = 0x820E5644; return 0x820919B0;
		/* 820E5640h case    4:*/		return 0x820E5644;
		  /* 820E5644h */ case    5:  		/* mr R5, R31 */
		/* 820E5644h case    5:*/		regs.R5 = regs.R31;
		/* 820E5644h case    5:*/		return 0x820E5648;
		  /* 820E5648h */ case    6:  		/* addi R4, R1, 128 */
		/* 820E5648h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E5648h case    6:*/		return 0x820E564C;
		  /* 820E564Ch */ case    7:  		/* lwz R3, <#[R30 + 8]> */
		/* 820E564Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820E564Ch case    7:*/		return 0x820E5650;
		  /* 820E5650h */ case    8:  		/* bl -343200 */
		/* 820E5650h case    8:*/		regs.LR = 0x820E5654; return 0x820919B0;
		/* 820E5650h case    8:*/		return 0x820E5654;
		  /* 820E5654h */ case    9:  		/* mr R4, R30 */
		/* 820E5654h case    9:*/		regs.R4 = regs.R30;
		/* 820E5654h case    9:*/		return 0x820E5658;
		  /* 820E5658h */ case   10:  		/* mr R3, R21 */
		/* 820E5658h case   10:*/		regs.R3 = regs.R21;
		/* 820E5658h case   10:*/		return 0x820E565C;
		  /* 820E565Ch */ case   11:  		/* bl 96860 */
		/* 820E565Ch case   11:*/		regs.LR = 0x820E5660; return 0x820FD0B8;
		/* 820E565Ch case   11:*/		return 0x820E5660;
		  /* 820E5660h */ case   12:  		/* or. R31, R3, R3 */
		/* 820E5660h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820E5660h case   12:*/		return 0x820E5664;
		  /* 820E5664h */ case   13:  		/* bc 12, CR0_LT, -60 */
		/* 820E5664h case   13:*/		if ( regs.CR[0].lt ) { return 0x820E5628;  }
		/* 820E5664h case   13:*/		return 0x820E5668;
		  /* 820E5668h */ case   14:  		/* li R3, 0 */
		/* 820E5668h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E5668h case   14:*/		return 0x820E566C;
		  /* 820E566Ch */ case   15:  		/* b 8 */
		/* 820E566Ch case   15:*/		return 0x820E5674;
		/* 820E566Ch case   15:*/		return 0x820E5670;
	}
	return 0x820E5670;
} // Block from 820E5630h-820E5670h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E5670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5670);
		  /* 820E5670h */ case    0:  		/* li R3, 1 */
		/* 820E5670h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E5670h case    0:*/		return 0x820E5674;
	}
	return 0x820E5674;
} // Block from 820E5670h-820E5674h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E5674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5674);
		  /* 820E5674h */ case    0:  		/* addi R1, R1, 288 */
		/* 820E5674h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 820E5674h case    0:*/		return 0x820E5678;
		  /* 820E5678h */ case    1:  		/* lfd FR31, <#[R1 - 136]> */
		/* 820E5678h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 820E5678h case    1:*/		return 0x820E567C;
		  /* 820E567Ch */ case    2:  		/* b -345088 */
		/* 820E567Ch case    2:*/		return 0x8209127C;
		/* 820E567Ch case    2:*/		return 0x820E5680;
	}
	return 0x820E5680;
} // Block from 820E5674h-820E5680h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E5680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5680);
		  /* 820E5680h */ case    0:  		/* mfspr R12, LR */
		/* 820E5680h case    0:*/		regs.R12 = regs.LR;
		/* 820E5680h case    0:*/		return 0x820E5684;
		  /* 820E5684h */ case    1:  		/* bl -345128 */
		/* 820E5684h case    1:*/		regs.LR = 0x820E5688; return 0x8209125C;
		/* 820E5684h case    1:*/		return 0x820E5688;
		  /* 820E5688h */ case    2:  		/* stwu R1, <#[R1 - 384]> */
		/* 820E5688h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 820E5688h case    2:*/		return 0x820E568C;
		  /* 820E568Ch */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E568Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E568Ch case    3:*/		return 0x820E5690;
		  /* 820E5690h */ case    4:  		/* li R11, 1 */
		/* 820E5690h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820E5690h case    4:*/		return 0x820E5694;
		  /* 820E5694h */ case    5:  		/* li R31, 0 */
		/* 820E5694h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E5694h case    5:*/		return 0x820E5698;
		  /* 820E5698h */ case    6:  		/* stw R11, <#[R1 + 116]> */
		/* 820E5698h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820E5698h case    6:*/		return 0x820E569C;
		  /* 820E569Ch */ case    7:  		/* li R10, 2 */
		/* 820E569Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820E569Ch case    7:*/		return 0x820E56A0;
		  /* 820E56A0h */ case    8:  		/* li R9, 3 */
		/* 820E56A0h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 820E56A0h case    8:*/		return 0x820E56A4;
		  /* 820E56A4h */ case    9:  		/* stw R31, <#[R1 + 96]> */
		/* 820E56A4h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E56A4h case    9:*/		return 0x820E56A8;
		  /* 820E56A8h */ case   10:  		/* mr R30, R3 */
		/* 820E56A8h case   10:*/		regs.R30 = regs.R3;
		/* 820E56A8h case   10:*/		return 0x820E56AC;
		  /* 820E56ACh */ case   11:  		/* stw R31, <#[R1 + 112]> */
		/* 820E56ACh case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 820E56ACh case   11:*/		return 0x820E56B0;
		  /* 820E56B0h */ case   12:  		/* lwz R11, <#[R4]> */
		/* 820E56B0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E56B0h case   12:*/		return 0x820E56B4;
		  /* 820E56B4h */ case   13:  		/* stw R10, <#[R1 + 120]> */
		/* 820E56B4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820E56B4h case   13:*/		return 0x820E56B8;
		  /* 820E56B8h */ case   14:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820E56B8h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820E56B8h case   14:*/		return 0x820E56BC;
		  /* 820E56BCh */ case   15:  		/* stw R9, <#[R1 + 124]> */
		/* 820E56BCh case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E56BCh case   15:*/		return 0x820E56C0;
		  /* 820E56C0h */ case   16:  		/* cmplwi CR6, R11, 1 */
		/* 820E56C0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820E56C0h case   16:*/		return 0x820E56C4;
		  /* 820E56C4h */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 820E56C4h case   17:*/		if ( regs.CR[6].eq ) { return 0x820E56D0;  }
		/* 820E56C4h case   17:*/		return 0x820E56C8;
		  /* 820E56C8h */ case   18:  		/* li R3, 1 */
		/* 820E56C8h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E56C8h case   18:*/		return 0x820E56CC;
		  /* 820E56CCh */ case   19:  		/* b 320 */
		/* 820E56CCh case   19:*/		return 0x820E580C;
		/* 820E56CCh case   19:*/		return 0x820E56D0;
	}
	return 0x820E56D0;
} // Block from 820E5680h-820E56D0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E56D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E56D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E56D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E56D0);
		  /* 820E56D0h */ case    0:  		/* lwz R11, <#[R4 + 16]> */
		/* 820E56D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 820E56D0h case    0:*/		return 0x820E56D4;
		  /* 820E56D4h */ case    1:  		/* lwz R10, <#[R30 + 20]> */
		/* 820E56D4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 820E56D4h case    1:*/		return 0x820E56D8;
		  /* 820E56D8h */ case    2:  		/* lwz R9, <#[R30 + 16]> */
		/* 820E56D8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 820E56D8h case    2:*/		return 0x820E56DC;
		  /* 820E56DCh */ case    3:  		/* lwz R11, <#[R11]> */
		/* 820E56DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E56DCh case    3:*/		return 0x820E56E0;
		  /* 820E56E0h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E56E0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E56E0h case    4:*/		return 0x820E56E4;
		  /* 820E56E4h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E56E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E56E4h case    5:*/		return 0x820E56E8;
		  /* 820E56E8h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E56E8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E56E8h case    6:*/		return 0x820E56EC;
		  /* 820E56ECh */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E56ECh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E56ECh case    7:*/		return 0x820E56F0;
		  /* 820E56F0h */ case    8:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E56F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E56F0h case    8:*/		return 0x820E56F4;
		  /* 820E56F4h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E56F4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E56F4h case    9:*/		return 0x820E56F8;
		  /* 820E56F8h */ case   10:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820E56F8h case   10:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820E56F8h case   10:*/		return 0x820E56FC;
		  /* 820E56FCh */ case   11:  		/* bc 4, CR0_EQ, -52 */
		/* 820E56FCh case   11:*/		if ( !regs.CR[0].eq ) { return 0x820E56C8;  }
		/* 820E56FCh case   11:*/		return 0x820E5700;
		  /* 820E5700h */ case   12:  		/* lis R11, -32254 */
		/* 820E5700h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E5700h case   12:*/		return 0x820E5704;
		  /* 820E5704h */ case   13:  		/* stw R31, <#[R1 + 84]> */
		/* 820E5704h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 820E5704h case   13:*/		return 0x820E5708;
		  /* 820E5708h */ case   14:  		/* li R10, 1 */
		/* 820E5708h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E5708h case   14:*/		return 0x820E570C;
		  /* 820E570Ch */ case   15:  		/* addi R5, R11, -21256 */
		/* 820E570Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACF8);
		/* 820E570Ch case   15:*/		return 0x820E5710;
		  /* 820E5710h */ case   16:  		/* addi R9, R1, 112 */
		/* 820E5710h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E5710h case   16:*/		return 0x820E5714;
		  /* 820E5714h */ case   17:  		/* addi R8, R1, 128 */
		/* 820E5714h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820E5714h case   17:*/		return 0x820E5718;
		  /* 820E5718h */ case   18:  		/* addi R7, R1, 96 */
		/* 820E5718h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E5718h case   18:*/		return 0x820E571C;
		  /* 820E571Ch */ case   19:  		/* addi R6, R1, 288 */
		/* 820E571Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820E571Ch case   19:*/		return 0x820E5720;
		  /* 820E5720h */ case   20:  		/* mr R3, R30 */
		/* 820E5720h case   20:*/		regs.R3 = regs.R30;
		/* 820E5720h case   20:*/		return 0x820E5724;
		  /* 820E5724h */ case   21:  		/* bl -6820 */
		/* 820E5724h case   21:*/		regs.LR = 0x820E5728; return 0x820E3C80;
		/* 820E5724h case   21:*/		return 0x820E5728;
		  /* 820E5728h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820E5728h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E5728h case   22:*/		return 0x820E572C;
		  /* 820E572Ch */ case   23:  		/* bc 4, CR0_EQ, 224 */
		/* 820E572Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x820E580C;  }
		/* 820E572Ch case   23:*/		return 0x820E5730;
		  /* 820E5730h */ case   24:  		/* li R3, 116 */
		/* 820E5730h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E5730h case   24:*/		return 0x820E5734;
		  /* 820E5734h */ case   25:  		/* bl 93796 */
		/* 820E5734h case   25:*/		regs.LR = 0x820E5738; return 0x820FC598;
		/* 820E5734h case   25:*/		return 0x820E5738;
		  /* 820E5738h */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 820E5738h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E5738h case   26:*/		return 0x820E573C;
		  /* 820E573Ch */ case   27:  		/* bc 12, CR0_EQ, 12 */
		/* 820E573Ch case   27:*/		if ( regs.CR[0].eq ) { return 0x820E5748;  }
		/* 820E573Ch case   27:*/		return 0x820E5740;
		  /* 820E5740h */ case   28:  		/* bl 92000 */
		/* 820E5740h case   28:*/		regs.LR = 0x820E5744; return 0x820FBEA0;
		/* 820E5740h case   28:*/		return 0x820E5744;
		  /* 820E5744h */ case   29:  		/* mr R31, R3 */
		/* 820E5744h case   29:*/		regs.R31 = regs.R3;
		/* 820E5744h case   29:*/		return 0x820E5748;
	}
	return 0x820E5748;
} // Block from 820E56D0h-820E5748h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820E5748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5748);
		  /* 820E5748h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E5748h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E5748h case    0:*/		return 0x820E574C;
		  /* 820E574Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E574Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E575C;  }
		/* 820E574Ch case    1:*/		return 0x820E5750;
		  /* 820E5750h */ case    2:  		/* lis R3, -32761 */
		/* 820E5750h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E5750h case    2:*/		return 0x820E5754;
		  /* 820E5754h */ case    3:  		/* ori R3, R3, 14 */
		/* 820E5754h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E5754h case    3:*/		return 0x820E5758;
		  /* 820E5758h */ case    4:  		/* b 180 */
		/* 820E5758h case    4:*/		return 0x820E580C;
		/* 820E5758h case    4:*/		return 0x820E575C;
	}
	return 0x820E575C;
} // Block from 820E5748h-820E575Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E575Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E575C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E575C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E575C);
		  /* 820E575Ch */ case    0:  		/* lis R4, 28880 */
		/* 820E575Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x70D0);
		/* 820E575Ch case    0:*/		return 0x820E5760;
		  /* 820E5760h */ case    1:  		/* li R7, 0 */
		/* 820E5760h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E5760h case    1:*/		return 0x820E5764;
		  /* 820E5764h */ case    2:  		/* li R6, 1 */
		/* 820E5764h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E5764h case    2:*/		return 0x820E5768;
		  /* 820E5768h */ case    3:  		/* li R5, 2 */
		/* 820E5768h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820E5768h case    3:*/		return 0x820E576C;
		  /* 820E576Ch */ case    4:  		/* ori R4, R4, 1 */
		/* 820E576Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E576Ch case    4:*/		return 0x820E5770;
		  /* 820E5770h */ case    5:  		/* mr R3, R31 */
		/* 820E5770h case    5:*/		regs.R3 = regs.R31;
		/* 820E5770h case    5:*/		return 0x820E5774;
		  /* 820E5774h */ case    6:  		/* bl 93884 */
		/* 820E5774h case    6:*/		regs.LR = 0x820E5778; return 0x820FC630;
		/* 820E5774h case    6:*/		return 0x820E5778;
		  /* 820E5778h */ case    7:  		/* or. R29, R3, R3 */
		/* 820E5778h case    7:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E5778h case    7:*/		return 0x820E577C;
		  /* 820E577Ch */ case    8:  		/* mr R3, R31 */
		/* 820E577Ch case    8:*/		regs.R3 = regs.R31;
		/* 820E577Ch case    8:*/		return 0x820E5780;
		  /* 820E5780h */ case    9:  		/* bc 4, CR0_LT, 24 */
		/* 820E5780h case    9:*/		if ( !regs.CR[0].lt ) { return 0x820E5798;  }
		/* 820E5780h case    9:*/		return 0x820E5784;
		  /* 820E5784h */ case   10:  		/* bl 1276988 */
		/* 820E5784h case   10:*/		regs.LR = 0x820E5788; return 0x8221D3C0;
		/* 820E5784h case   10:*/		return 0x820E5788;
		  /* 820E5788h */ case   11:  		/* mr R3, R31 */
		/* 820E5788h case   11:*/		regs.R3 = regs.R31;
		/* 820E5788h case   11:*/		return 0x820E578C;
		  /* 820E578Ch */ case   12:  		/* bl 93796 */
		/* 820E578Ch case   12:*/		regs.LR = 0x820E5790; return 0x820FC5F0;
		/* 820E578Ch case   12:*/		return 0x820E5790;
		  /* 820E5790h */ case   13:  		/* mr R3, R29 */
		/* 820E5790h case   13:*/		regs.R3 = regs.R29;
		/* 820E5790h case   13:*/		return 0x820E5794;
		  /* 820E5794h */ case   14:  		/* b 120 */
		/* 820E5794h case   14:*/		return 0x820E580C;
		/* 820E5794h case   14:*/		return 0x820E5798;
	}
	return 0x820E5798;
} // Block from 820E575Ch-820E5798h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E5798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5798);
		  /* 820E5798h */ case    0:  		/* lwz R4, <#[R30 + 260]> */
		/* 820E5798h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 820E5798h case    0:*/		return 0x820E579C;
		  /* 820E579Ch */ case    1:  		/* bl 91988 */
		/* 820E579Ch case    1:*/		regs.LR = 0x820E57A0; return 0x820FBEF0;
		/* 820E579Ch case    1:*/		return 0x820E57A0;
		  /* 820E57A0h */ case    2:  		/* or. R29, R3, R3 */
		/* 820E57A0h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E57A0h case    2:*/		return 0x820E57A4;
		  /* 820E57A4h */ case    3:  		/* bc 4, CR0_LT, 12 */
		/* 820E57A4h case    3:*/		if ( !regs.CR[0].lt ) { return 0x820E57B0;  }
		/* 820E57A4h case    3:*/		return 0x820E57A8;
		  /* 820E57A8h */ case    4:  		/* mr R3, R31 */
		/* 820E57A8h case    4:*/		regs.R3 = regs.R31;
		/* 820E57A8h case    4:*/		return 0x820E57AC;
		  /* 820E57ACh */ case    5:  		/* b -40 */
		/* 820E57ACh case    5:*/		return 0x820E5784;
		/* 820E57ACh case    5:*/		return 0x820E57B0;
	}
	return 0x820E57B0;
} // Block from 820E5798h-820E57B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E57B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E57B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E57B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E57B0);
		  /* 820E57B0h */ case    0:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E57B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E57B0h case    0:*/		return 0x820E57B4;
		  /* 820E57B4h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 820E57B4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820E57B4h case    1:*/		return 0x820E57B8;
		  /* 820E57B8h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 820E57B8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E57B8h case    2:*/		return 0x820E57BC;
		  /* 820E57BCh */ case    3:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E57BCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E57BCh case    3:*/		return 0x820E57C0;
		  /* 820E57C0h */ case    4:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 820E57C0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 820E57C0h case    4:*/		return 0x820E57C4;
		  /* 820E57C4h */ case    5:  		/* bl -343572 */
		/* 820E57C4h case    5:*/		regs.LR = 0x820E57C8; return 0x820919B0;
		/* 820E57C4h case    5:*/		return 0x820E57C8;
		  /* 820E57C8h */ case    6:  		/* addi R11, R1, 144 */
		/* 820E57C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 820E57C8h case    6:*/		return 0x820E57CC;
		  /* 820E57CCh */ case    7:  		/* addi R10, R1, 128 */
		/* 820E57CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 820E57CCh case    7:*/		return 0x820E57D0;
		  /* 820E57D0h */ case    8:  		/* lwz R9, <#[R31 + 8]> */
		/* 820E57D0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820E57D0h case    8:*/		return 0x820E57D4;
		  /* 820E57D4h */ case    9:  		/* mr R4, R31 */
		/* 820E57D4h case    9:*/		regs.R4 = regs.R31;
		/* 820E57D4h case    9:*/		return 0x820E57D8;
		  /* 820E57D8h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 820E57D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E57D8h case   10:*/		return 0x820E57DC;
		  /* 820E57DCh */ case   11:  		/* lwz R10, <#[R10]> */
		/* 820E57DCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E57DCh case   11:*/		return 0x820E57E0;
		  /* 820E57E0h */ case   12:  		/* stw R11, <#[R9]> */
		/* 820E57E0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820E57E0h case   12:*/		return 0x820E57E4;
		  /* 820E57E4h */ case   13:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E57E4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E57E4h case   13:*/		return 0x820E57E8;
		  /* 820E57E8h */ case   14:  		/* stw R10, <#[R11 + 4]> */
		/* 820E57E8h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820E57E8h case   14:*/		return 0x820E57EC;
		  /* 820E57ECh */ case   15:  		/* lwz R3, <#[R30 + 260]> */
		/* 820E57ECh case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000104) );
		/* 820E57ECh case   15:*/		return 0x820E57F0;
	}
	return 0x820E57F0;
} // Block from 820E57B0h-820E57F0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E57F0h
// Function '?ExchangeRow@D3DXShader@@YAXPAVCInstruction@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E57F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E57F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E57F0);
		  /* 820E57F0h */ case    0:  		/* bl 94560 */
		/* 820E57F0h case    0:*/		regs.LR = 0x820E57F4; return 0x820FC950;
		/* 820E57F0h case    0:*/		return 0x820E57F4;
		  /* 820E57F4h */ case    1:  		/* mr R30, R3 */
		/* 820E57F4h case    1:*/		regs.R30 = regs.R3;
		/* 820E57F4h case    1:*/		return 0x820E57F8;
		  /* 820E57F8h */ case    2:  		/* mr R3, R31 */
		/* 820E57F8h case    2:*/		regs.R3 = regs.R31;
		/* 820E57F8h case    2:*/		return 0x820E57FC;
		  /* 820E57FCh */ case    3:  		/* bl 1276868 */
		/* 820E57FCh case    3:*/		regs.LR = 0x820E5800; return 0x8221D3C0;
		/* 820E57FCh case    3:*/		return 0x820E5800;
		  /* 820E5800h */ case    4:  		/* mr R3, R31 */
		/* 820E5800h case    4:*/		regs.R3 = regs.R31;
		/* 820E5800h case    4:*/		return 0x820E5804;
		  /* 820E5804h */ case    5:  		/* bl 93676 */
		/* 820E5804h case    5:*/		regs.LR = 0x820E5808; return 0x820FC5F0;
		/* 820E5804h case    5:*/		return 0x820E5808;
		  /* 820E5808h */ case    6:  		/* mr R3, R30 */
		/* 820E5808h case    6:*/		regs.R3 = regs.R30;
		/* 820E5808h case    6:*/		return 0x820E580C;
	}
	return 0x820E580C;
} // Block from 820E57F0h-820E580Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E580Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E580C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E580C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E580C);
		  /* 820E580Ch */ case    0:  		/* addi R1, R1, 384 */
		/* 820E580Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 820E580Ch case    0:*/		return 0x820E5810;
		  /* 820E5810h */ case    1:  		/* b -345444 */
		/* 820E5810h case    1:*/		return 0x820912AC;
		/* 820E5810h case    1:*/		return 0x820E5814;
		  /* 820E5814h */ case    2:  		/* nop */
		/* 820E5814h case    2:*/		cpu::op::nop();
		/* 820E5814h case    2:*/		return 0x820E5818;
		  /* 820E5818h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E5818h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E5818h case    3:*/		return 0x820E581C;
		  /* 820E581Ch */ case    4:  		/* lwz R9, <#[R3 + 20]> */
		/* 820E581Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820E581Ch case    4:*/		return 0x820E5820;
		  /* 820E5820h */ case    5:  		/* lwz R8, <#[R3 + 16]> */
		/* 820E5820h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000010) );
		/* 820E5820h case    5:*/		return 0x820E5824;
		  /* 820E5824h */ case    6:  		/* lwz R7, <#[R11 + 8]> */
		/* 820E5824h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 820E5824h case    6:*/		return 0x820E5828;
		  /* 820E5828h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 820E5828h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E5828h case    7:*/		return 0x820E582C;
		  /* 820E582Ch */ case    8:  		/* rlwinm R10, R11, 0, 12, 31 */
		/* 820E582Ch case    8:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R11);
		/* 820E582Ch case    8:*/		return 0x820E5830;
		  /* 820E5830h */ case    9:  		/* lwz R11, <#[R7]> */
		/* 820E5830h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 820E5830h case    9:*/		return 0x820E5834;
		  /* 820E5834h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5834h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5834h case   10:*/		return 0x820E5838;
		  /* 820E5838h */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E5838h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E5838h case   11:*/		return 0x820E583C;
		  /* 820E583Ch */ case   12:  		/* lwz R11, <#[R11 + 48]> */
		/* 820E583Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 820E583Ch case   12:*/		return 0x820E5840;
		  /* 820E5840h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5840h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5840h case   13:*/		return 0x820E5844;
		  /* 820E5844h */ case   14:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E5844h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E5844h case   14:*/		return 0x820E5848;
		  /* 820E5848h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E5848h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E5848h case   15:*/		return 0x820E584C;
		  /* 820E584Ch */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E584Ch case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E584Ch case   16:*/		return 0x820E5850;
		  /* 820E5850h */ case   17:  		/* lwzx R11, <#[R11 + R8]> */
		/* 820E5850h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E5850h case   17:*/		return 0x820E5854;
		  /* 820E5854h */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E5854h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E5854h case   18:*/		return 0x820E5858;
		  /* 820E5858h */ case   19:  		/* rlwinm. R11, R11, 0, 24, 24 */
		/* 820E5858h case   19:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R11);
		/* 820E5858h case   19:*/		return 0x820E585C;
		  /* 820E585Ch */ case   20:  		/* bc 4, CR0_EQ, 12 */
		/* 820E585Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x820E5868;  }
		/* 820E585Ch case   20:*/		return 0x820E5860;
		  /* 820E5860h */ case   21:  		/* li R3, 1 */
		/* 820E5860h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E5860h case   21:*/		return 0x820E5864;
		  /* 820E5864h */ case   22:  		/* bclr 20, CR0_LT */
		/* 820E5864h case   22:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E5864h case   22:*/		return 0x820E5868;
	}
	return 0x820E5868;
} // Block from 820E580Ch-820E5868h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E5868h
// Function '?SortInstruction@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5868);
		  /* 820E5868h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 820E5868h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E5868h case    0:*/		return 0x820E586C;
		  /* 820E586Ch */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 820E586Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E58B0;  }
		/* 820E586Ch case    1:*/		return 0x820E5870;
		  /* 820E5870h */ case    2:  		/* li R11, 0 */
		/* 820E5870h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E5870h case    2:*/		return 0x820E5874;
		  /* 820E5874h */ case    3:  		/* mtspr CTR, R10 */
		/* 820E5874h case    3:*/		regs.CTR = regs.R10;
		/* 820E5874h case    3:*/		return 0x820E5878;
		  /* 820E5878h */ case    4:  		/* lwz R10, <#[R3 + 260]> */
		/* 820E5878h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 820E5878h case    4:*/		return 0x820E587C;
		  /* 820E587Ch */ case    5:  		/* lwz R9, <#[R3 + 20]> */
		/* 820E587Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 820E587Ch case    5:*/		return 0x820E5880;
		  /* 820E5880h */ case    6:  		/* lwz R8, <#[R10 + 8]> */
		/* 820E5880h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 820E5880h case    6:*/		return 0x820E5884;
		  /* 820E5884h */ case    7:  		/* lwz R10, <#[R10 + 16]> */
		/* 820E5884h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820E5884h case    7:*/		return 0x820E5888;
		  /* 820E5888h */ case    8:  		/* lwzx R8, <#[R8 + R11]> */
		/* 820E5888h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E5888h case    8:*/		return 0x820E588C;
		  /* 820E588Ch */ case    9:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E588Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E588Ch case    9:*/		return 0x820E5890;
		  /* 820E5890h */ case   10:  		/* addi R11, R11, 4 */
		/* 820E5890h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E5890h case   10:*/		return 0x820E5894;
		  /* 820E5894h */ case   11:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E5894h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E5894h case   11:*/		return 0x820E5898;
		  /* 820E5898h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E5898h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E5898h case   12:*/		return 0x820E589C;
		  /* 820E589Ch */ case   13:  		/* lwzx R8, <#[R8 + R9]> */
		/* 820E589Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E589Ch case   13:*/		return 0x820E58A0;
		  /* 820E58A0h */ case   14:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E58A0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E58A0h case   14:*/		return 0x820E58A4;
		  /* 820E58A4h */ case   15:  		/* lwz R9, <#[R8 + 48]> */
		/* 820E58A4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000030) );
		/* 820E58A4h case   15:*/		return 0x820E58A8;
		  /* 820E58A8h */ case   16:  		/* stw R9, <#[R10 + 48]> */
		/* 820E58A8h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 820E58A8h case   16:*/		return 0x820E58AC;
		  /* 820E58ACh */ case   17:  		/* bc 16, CR0_LT, -52 */
		/* 820E58ACh case   17:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E5878;  }
		/* 820E58ACh case   17:*/		return 0x820E58B0;
	}
	return 0x820E58B0;
} // Block from 820E5868h-820E58B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E58B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E58B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E58B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E58B0);
		  /* 820E58B0h */ case    0:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E58B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E58B0h case    0:*/		return 0x820E58B4;
		  /* 820E58B4h */ case    1:  		/* li R10, 0 */
		/* 820E58B4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E58B4h case    1:*/		return 0x820E58B8;
		  /* 820E58B8h */ case    2:  		/* li R3, 0 */
		/* 820E58B8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E58B8h case    2:*/		return 0x820E58BC;
		  /* 820E58BCh */ case    3:  		/* stw R10, <#[R11]> */
		/* 820E58BCh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E58BCh case    3:*/		return 0x820E58C0;
		  /* 820E58C0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820E58C0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E58C0h case    4:*/		return 0x820E58C4;
	}
	return 0x820E58C4;
} // Block from 820E58B0h-820E58C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E58C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E58C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E58C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E58C4);
		  /* 820E58C4h */ case    0:  		/* nop */
		/* 820E58C4h case    0:*/		cpu::op::nop();
		/* 820E58C4h case    0:*/		return 0x820E58C8;
	}
	return 0x820E58C8;
} // Block from 820E58C4h-820E58C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E58C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E58C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E58C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E58C8);
		  /* 820E58C8h */ case    0:  		/* mfspr R12, LR */
		/* 820E58C8h case    0:*/		regs.R12 = regs.LR;
		/* 820E58C8h case    0:*/		return 0x820E58CC;
		  /* 820E58CCh */ case    1:  		/* bl -345764 */
		/* 820E58CCh case    1:*/		regs.LR = 0x820E58D0; return 0x82091228;
		/* 820E58CCh case    1:*/		return 0x820E58D0;
		  /* 820E58D0h */ case    2:  		/* stwu R1, <#[R1 - 496]> */
		/* 820E58D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE10);
		/* 820E58D0h case    2:*/		return 0x820E58D4;
		  /* 820E58D4h */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E58D4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E58D4h case    3:*/		return 0x820E58D8;
		  /* 820E58D8h */ case    4:  		/* li R9, 2 */
		/* 820E58D8h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820E58D8h case    4:*/		return 0x820E58DC;
		  /* 820E58DCh */ case    5:  		/* li R24, 0 */
		/* 820E58DCh case    5:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820E58DCh case    5:*/		return 0x820E58E0;
		  /* 820E58E0h */ case    6:  		/* stw R9, <#[R1 + 120]> */
		/* 820E58E0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 820E58E0h case    6:*/		return 0x820E58E4;
		  /* 820E58E4h */ case    7:  		/* lis R10, 12288 */
		/* 820E58E4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x3000);
		/* 820E58E4h case    7:*/		return 0x820E58E8;
		  /* 820E58E8h */ case    8:  		/* li R8, 3 */
		/* 820E58E8h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E58E8h case    8:*/		return 0x820E58EC;
		  /* 820E58ECh */ case    9:  		/* stw R24, <#[R1 + 96]> */
		/* 820E58ECh case    9:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000060) );
		/* 820E58ECh case    9:*/		return 0x820E58F0;
		  /* 820E58F0h */ case   10:  		/* li R7, 1 */
		/* 820E58F0h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820E58F0h case   10:*/		return 0x820E58F4;
		  /* 820E58F4h */ case   11:  		/* stw R24, <#[R1 + 112]> */
		/* 820E58F4h case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000070) );
		/* 820E58F4h case   11:*/		return 0x820E58F8;
		  /* 820E58F8h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820E58F8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E58F8h case   12:*/		return 0x820E58FC;
		  /* 820E58FCh */ case   13:  		/* mr R23, R3 */
		/* 820E58FCh case   13:*/		regs.R23 = regs.R3;
		/* 820E58FCh case   13:*/		return 0x820E5900;
		  /* 820E5900h */ case   14:  		/* mr R18, R4 */
		/* 820E5900h case   14:*/		regs.R18 = regs.R4;
		/* 820E5900h case   14:*/		return 0x820E5904;
		  /* 820E5904h */ case   15:  		/* stw R7, <#[R1 + 116]> */
		/* 820E5904h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000074) );
		/* 820E5904h case   15:*/		return 0x820E5908;
		  /* 820E5908h */ case   16:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 820E5908h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 820E5908h case   16:*/		return 0x820E590C;
		  /* 820E590Ch */ case   17:  		/* stw R8, <#[R1 + 124]> */
		/* 820E590Ch case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E590Ch case   17:*/		return 0x820E5910;
		  /* 820E5910h */ case   18:  		/* mr R17, R5 */
		/* 820E5910h case   18:*/		regs.R17 = regs.R5;
		/* 820E5910h case   18:*/		return 0x820E5914;
		  /* 820E5914h */ case   19:  		/* mr R16, R6 */
		/* 820E5914h case   19:*/		regs.R16 = regs.R6;
		/* 820E5914h case   19:*/		return 0x820E5918;
		  /* 820E5918h */ case   20:  		/* rlwinm R21, R11, 0, 12, 31 */
		/* 820E5918h case   20:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R21,regs.R11);
		/* 820E5918h case   20:*/		return 0x820E591C;
		  /* 820E591Ch */ case   21:  		/* cmplw CR6, R9, R10 */
		/* 820E591Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E591Ch case   21:*/		return 0x820E5920;
		  /* 820E5920h */ case   22:  		/* bc 12, CR6_EQ, 12 */
		/* 820E5920h case   22:*/		if ( regs.CR[6].eq ) { return 0x820E592C;  }
		/* 820E5920h case   22:*/		return 0x820E5924;
		  /* 820E5924h */ case   23:  		/* li R3, 1 */
		/* 820E5924h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E5924h case   23:*/		return 0x820E5928;
		  /* 820E5928h */ case   24:  		/* b 1156 */
		/* 820E5928h case   24:*/		return 0x820E5DAC;
		/* 820E5928h case   24:*/		return 0x820E592C;
	}
	return 0x820E592C;
} // Block from 820E58C8h-820E592Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E592Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E592C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E592C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E592C);
		  /* 820E592Ch */ case    0:  		/* mr R26, R24 */
		/* 820E592Ch case    0:*/		regs.R26 = regs.R24;
		/* 820E592Ch case    0:*/		return 0x820E5930;
		  /* 820E5930h */ case    1:  		/* mr R28, R24 */
		/* 820E5930h case    1:*/		regs.R28 = regs.R24;
		/* 820E5930h case    1:*/		return 0x820E5934;
		  /* 820E5934h */ case    2:  		/* mr R29, R24 */
		/* 820E5934h case    2:*/		regs.R29 = regs.R24;
		/* 820E5934h case    2:*/		return 0x820E5938;
		  /* 820E5938h */ case    3:  		/* mr R27, R24 */
		/* 820E5938h case    3:*/		regs.R27 = regs.R24;
		/* 820E5938h case    3:*/		return 0x820E593C;
		  /* 820E593Ch */ case    4:  		/* mr R3, R24 */
		/* 820E593Ch case    4:*/		regs.R3 = regs.R24;
		/* 820E593Ch case    4:*/		return 0x820E5940;
		  /* 820E5940h */ case    5:  		/* cmplwi CR6, R21, 0 */
		/* 820E5940h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820E5940h case    5:*/		return 0x820E5944;
		  /* 820E5944h */ case    6:  		/* bc 12, CR6_EQ, 584 */
		/* 820E5944h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E5B8C;  }
		/* 820E5944h case    6:*/		return 0x820E5948;
		  /* 820E5948h */ case    7:  		/* lis R11, -32256 */
		/* 820E5948h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E5948h case    7:*/		return 0x820E594C;
		  /* 820E594Ch */ case    8:  		/* lwz R7, <#[R23 + 20]> */
		/* 820E594Ch case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R23 + 0x00000014) );
		/* 820E594Ch case    8:*/		return 0x820E5950;
		  /* 820E5950h */ case    9:  		/* rlwinm R31, R21, 2, 0, 29 */
		/* 820E5950h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R21);
		/* 820E5950h case    9:*/		return 0x820E5954;
		  /* 820E5954h */ case   10:  		/* lwz R6, <#[R23 + 16]> */
		/* 820E5954h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R23 + 0x00000010) );
		/* 820E5954h case   10:*/		return 0x820E5958;
	}
	return 0x820E5958;
} // Block from 820E592Ch-820E5958h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E5958h
// Function '?ResolveAddress@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5958);
		  /* 820E5958h */ case    0:  		/* rlwinm R30, R21, 1, 0, 30 */
		/* 820E5958h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R21);
		/* 820E5958h case    0:*/		return 0x820E595C;
		  /* 820E595Ch */ case    1:  		/* mtspr CTR, R21 */
		/* 820E595Ch case    1:*/		regs.CTR = regs.R21;
		/* 820E595Ch case    1:*/		return 0x820E5960;
		  /* 820E5960h */ case    2:  		/* mr R4, R24 */
		/* 820E5960h case    2:*/		regs.R4 = regs.R24;
		/* 820E5960h case    2:*/		return 0x820E5964;
		  /* 820E5964h */ case    3:  		/* mr R9, R31 */
		/* 820E5964h case    3:*/		regs.R9 = regs.R31;
		/* 820E5964h case    3:*/		return 0x820E5968;
		  /* 820E5968h */ case    4:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 820E5968h case    4:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 820E5968h case    4:*/		return 0x820E596C;
		  /* 820E596Ch */ case    5:  		/* lwz R11, <#[R23 + 260]> */
		/* 820E596Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000104) );
		/* 820E596Ch case    5:*/		return 0x820E5970;
		  /* 820E5970h */ case    6:  		/* add R10, R30, R3 */
		/* 820E5970h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R30,regs.R3);
		/* 820E5970h case    6:*/		return 0x820E5974;
		  /* 820E5974h */ case    7:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E5974h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E5974h case    7:*/		return 0x820E5978;
		  /* 820E5978h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E5978h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E5978h case    8:*/		return 0x820E597C;
		  /* 820E597Ch */ case    9:  		/* lwzx R8, <#[R11 + R9]> */
		/* 820E597Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E597Ch case    9:*/		return 0x820E5980;
		  /* 820E5980h */ case   10:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E5980h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E5980h case   10:*/		return 0x820E5984;
		  /* 820E5984h */ case   11:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E5984h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E5984h case   11:*/		return 0x820E5988;
		  /* 820E5988h */ case   12:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 820E5988h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 820E5988h case   12:*/		return 0x820E598C;
		  /* 820E598Ch */ case   13:  		/* lwzx R11, <#[R8 + R7]> */
		/* 820E598Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820E598Ch case   13:*/		return 0x820E5990;
		  /* 820E5990h */ case   14:  		/* lwzx R8, <#[R5 + R7]> */
		/* 820E5990h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 820E5990h case   14:*/		return 0x820E5994;
		  /* 820E5994h */ case   15:  		/* lwz R5, <#[R11 + 4]> */
		/* 820E5994h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 820E5994h case   15:*/		return 0x820E5998;
		  /* 820E5998h */ case   16:  		/* lwz R25, <#[R8 + 4]> */
		/* 820E5998h case   16:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R8 + 0x00000004) );
		/* 820E5998h case   16:*/		return 0x820E599C;
		  /* 820E599Ch */ case   17:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 820E599Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 820E599Ch case   17:*/		return 0x820E59A0;
		  /* 820E59A0h */ case   18:  		/* rlwinm R25, R25, 2, 0, 29 */
		/* 820E59A0h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R25);
		/* 820E59A0h case   18:*/		return 0x820E59A4;
		  /* 820E59A4h */ case   19:  		/* lwzx R22, <#[R5 + R6]> */
		/* 820E59A4h case   19:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R5 + regs.R6 + 0x00000000) );
		/* 820E59A4h case   19:*/		return 0x820E59A8;
		  /* 820E59A8h */ case   20:  		/* lwzx R5, <#[R25 + R6]> */
		/* 820E59A8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + regs.R6 + 0x00000000) );
		/* 820E59A8h case   20:*/		return 0x820E59AC;
		  /* 820E59ACh */ case   21:  		/* lwz R25, <#[R22 + 4]> */
		/* 820E59ACh case   21:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R22 + 0x00000004) );
		/* 820E59ACh case   21:*/		return 0x820E59B0;
		  /* 820E59B0h */ case   22:  		/* rlwinm. R25, R25, 0, 23, 23 */
		/* 820E59B0h case   22:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R25,regs.R25);
		/* 820E59B0h case   22:*/		return 0x820E59B4;
		  /* 820E59B4h */ case   23:  		/* bc 12, CR0_EQ, 60 */
		/* 820E59B4h case   23:*/		if ( regs.CR[0].eq ) { return 0x820E59F0;  }
		/* 820E59B4h case   23:*/		return 0x820E59B8;
		  /* 820E59B8h */ case   24:  		/* lfd FR13, <#[R11 + 32]> */
		/* 820E59B8h case   24:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 820E59B8h case   24:*/		return 0x820E59BC;
		  /* 820E59BCh */ case   25:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E59BCh case   25:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E59BCh case   25:*/		return 0x820E59C0;
		  /* 820E59C0h */ case   26:  		/* bc 4, CR6_EQ, 48 */
		/* 820E59C0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x820E59F0;  }
		/* 820E59C0h case   26:*/		return 0x820E59C4;
		  /* 820E59C4h */ case   27:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E59C4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E59C4h case   27:*/		return 0x820E59C8;
		  /* 820E59C8h */ case   28:  		/* cmpwi CR6, R11, -1 */
		/* 820E59C8h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E59C8h case   28:*/		return 0x820E59CC;
		  /* 820E59CCh */ case   29:  		/* bc 4, CR6_EQ, 36 */
		/* 820E59CCh case   29:*/		if ( !regs.CR[6].eq ) { return 0x820E59F0;  }
		/* 820E59CCh case   29:*/		return 0x820E59D0;
		  /* 820E59D0h */ case   30:  		/* lwz R11, <#[R23 + 260]> */
		/* 820E59D0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000104) );
		/* 820E59D0h case   30:*/		return 0x820E59D4;
		  /* 820E59D4h */ case   31:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E59D4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E59D4h case   31:*/		return 0x820E59D8;
		  /* 820E59D8h */ case   32:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E59D8h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E59D8h case   32:*/		return 0x820E59DC;
		  /* 820E59DCh */ case   33:  		/* lwzx R11, <#[R11 + R4]> */
		/* 820E59DCh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E59DCh case   33:*/		return 0x820E59E0;
		  /* 820E59E0h */ case   34:  		/* cmplw CR6, R10, R11 */
		/* 820E59E0h case   34:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E59E0h case   34:*/		return 0x820E59E4;
		  /* 820E59E4h */ case   35:  		/* bc 4, CR6_EQ, 12 */
		/* 820E59E4h case   35:*/		if ( !regs.CR[6].eq ) { return 0x820E59F0;  }
		/* 820E59E4h case   35:*/		return 0x820E59E8;
		  /* 820E59E8h */ case   36:  		/* li R26, 1 */
		/* 820E59E8h case   36:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820E59E8h case   36:*/		return 0x820E59EC;
		  /* 820E59ECh */ case   37:  		/* b 8 */
		/* 820E59ECh case   37:*/		return 0x820E59F4;
		/* 820E59ECh case   37:*/		return 0x820E59F0;
	}
	return 0x820E59F0;
} // Block from 820E5958h-820E59F0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820E59F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E59F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E59F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E59F0);
		  /* 820E59F0h */ case    0:  		/* li R29, 1 */
		/* 820E59F0h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 820E59F0h case    0:*/		return 0x820E59F4;
	}
	return 0x820E59F4;
} // Block from 820E59F0h-820E59F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E59F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E59F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E59F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E59F4);
		  /* 820E59F4h */ case    0:  		/* lwz R11, <#[R5 + 4]> */
		/* 820E59F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 820E59F4h case    0:*/		return 0x820E59F8;
		  /* 820E59F8h */ case    1:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 820E59F8h case    1:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 820E59F8h case    1:*/		return 0x820E59FC;
		  /* 820E59FCh */ case    2:  		/* bc 12, CR0_EQ, 60 */
		/* 820E59FCh case    2:*/		if ( regs.CR[0].eq ) { return 0x820E5A38;  }
		/* 820E59FCh case    2:*/		return 0x820E5A00;
		  /* 820E5A00h */ case    3:  		/* lfd FR13, <#[R8 + 32]> */
		/* 820E5A00h case    3:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00000020) );
		/* 820E5A00h case    3:*/		return 0x820E5A04;
		  /* 820E5A04h */ case    4:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E5A04h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E5A04h case    4:*/		return 0x820E5A08;
		  /* 820E5A08h */ case    5:  		/* bc 4, CR6_EQ, 48 */
		/* 820E5A08h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E5A38;  }
		/* 820E5A08h case    5:*/		return 0x820E5A0C;
		  /* 820E5A0Ch */ case    6:  		/* lwz R11, <#[R8 + 8]> */
		/* 820E5A0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 820E5A0Ch case    6:*/		return 0x820E5A10;
		  /* 820E5A10h */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 820E5A10h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E5A10h case    7:*/		return 0x820E5A14;
		  /* 820E5A14h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 820E5A14h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820E5A38;  }
		/* 820E5A14h case    8:*/		return 0x820E5A18;
		  /* 820E5A18h */ case    9:  		/* lwz R11, <#[R23 + 260]> */
		/* 820E5A18h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5A18h case    9:*/		return 0x820E5A1C;
		  /* 820E5A1Ch */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E5A1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E5A1Ch case   10:*/		return 0x820E5A20;
		  /* 820E5A20h */ case   11:  		/* lwzx R10, <#[R11 + R9]> */
		/* 820E5A20h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E5A20h case   11:*/		return 0x820E5A24;
		  /* 820E5A24h */ case   12:  		/* lwzx R11, <#[R11 + R4]> */
		/* 820E5A24h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E5A24h case   12:*/		return 0x820E5A28;
		  /* 820E5A28h */ case   13:  		/* cmplw CR6, R10, R11 */
		/* 820E5A28h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E5A28h case   13:*/		return 0x820E5A2C;
		  /* 820E5A2Ch */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 820E5A2Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E5A38;  }
		/* 820E5A2Ch case   14:*/		return 0x820E5A30;
		  /* 820E5A30h */ case   15:  		/* li R28, 1 */
		/* 820E5A30h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820E5A30h case   15:*/		return 0x820E5A34;
		  /* 820E5A34h */ case   16:  		/* b 8 */
		/* 820E5A34h case   16:*/		return 0x820E5A3C;
		/* 820E5A34h case   16:*/		return 0x820E5A38;
	}
	return 0x820E5A38;
} // Block from 820E59F4h-820E5A38h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820E5A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5A38);
		  /* 820E5A38h */ case    0:  		/* li R27, 1 */
		/* 820E5A38h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E5A38h case    0:*/		return 0x820E5A3C;
	}
	return 0x820E5A3C;
} // Block from 820E5A38h-820E5A3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E5A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5A3C);
		  /* 820E5A3Ch */ case    0:  		/* addi R3, R3, 1 */
		/* 820E5A3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 820E5A3Ch case    0:*/		return 0x820E5A40;
		  /* 820E5A40h */ case    1:  		/* addi R4, R4, 4 */
		/* 820E5A40h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 820E5A40h case    1:*/		return 0x820E5A44;
		  /* 820E5A44h */ case    2:  		/* addi R9, R9, 4 */
		/* 820E5A44h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E5A44h case    2:*/		return 0x820E5A48;
		  /* 820E5A48h */ case    3:  		/* bc 16, CR0_LT, -220 */
		/* 820E5A48h case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E596C;  }
		/* 820E5A48h case    3:*/		return 0x820E5A4C;
		  /* 820E5A4Ch */ case    4:  		/* cmpwi CR6, R26, 0 */
		/* 820E5A4Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E5A4Ch case    4:*/		return 0x820E5A50;
		  /* 820E5A50h */ case    5:  		/* bc 12, CR6_EQ, 72 */
		/* 820E5A50h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E5A98;  }
		/* 820E5A50h case    5:*/		return 0x820E5A54;
		  /* 820E5A54h */ case    6:  		/* cmpwi CR6, R29, 0 */
		/* 820E5A54h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820E5A54h case    6:*/		return 0x820E5A58;
		  /* 820E5A58h */ case    7:  		/* bc 4, CR6_EQ, 64 */
		/* 820E5A58h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E5A98;  }
		/* 820E5A58h case    7:*/		return 0x820E5A5C;
		  /* 820E5A5Ch */ case    8:  		/* li R3, 116 */
		/* 820E5A5Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E5A5Ch case    8:*/		return 0x820E5A60;
		  /* 820E5A60h */ case    9:  		/* bl 92984 */
		/* 820E5A60h case    9:*/		regs.LR = 0x820E5A64; return 0x820FC598;
		/* 820E5A60h case    9:*/		return 0x820E5A64;
		  /* 820E5A64h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 820E5A64h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E5A64h case   10:*/		return 0x820E5A68;
		  /* 820E5A68h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 820E5A68h case   11:*/		if ( regs.CR[0].eq ) { return 0x820E5A74;  }
		/* 820E5A68h case   11:*/		return 0x820E5A6C;
		  /* 820E5A6Ch */ case   12:  		/* bl 91188 */
		/* 820E5A6Ch case   12:*/		regs.LR = 0x820E5A70; return 0x820FBEA0;
		/* 820E5A6Ch case   12:*/		return 0x820E5A70;
		  /* 820E5A70h */ case   13:  		/* mr R24, R3 */
		/* 820E5A70h case   13:*/		regs.R24 = regs.R3;
		/* 820E5A70h case   13:*/		return 0x820E5A74;
	}
	return 0x820E5A74;
} // Block from 820E5A3Ch-820E5A74h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E5A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5A74);
		  /* 820E5A74h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 820E5A74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820E5A74h case    0:*/		return 0x820E5A78;
		  /* 820E5A78h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E5A78h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E5A88;  }
		/* 820E5A78h case    1:*/		return 0x820E5A7C;
		  /* 820E5A7Ch */ case    2:  		/* lis R3, -32761 */
		/* 820E5A7Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E5A7Ch case    2:*/		return 0x820E5A80;
		  /* 820E5A80h */ case    3:  		/* ori R3, R3, 14 */
		/* 820E5A80h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E5A80h case    3:*/		return 0x820E5A84;
		  /* 820E5A84h */ case    4:  		/* b 808 */
		/* 820E5A84h case    4:*/		return 0x820E5DAC;
		/* 820E5A84h case    4:*/		return 0x820E5A88;
	}
	return 0x820E5A88;
} // Block from 820E5A74h-820E5A88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E5A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5A88);
		  /* 820E5A88h */ case    0:  		/* mr R4, R21 */
		/* 820E5A88h case    0:*/		regs.R4 = regs.R21;
		/* 820E5A88h case    0:*/		return 0x820E5A8C;
		  /* 820E5A8Ch */ case    1:  		/* li R11, 1803 */
		/* 820E5A8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x70B);
		/* 820E5A8Ch case    1:*/		return 0x820E5A90;
		  /* 820E5A90h */ case    2:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 820E5A90h case    2:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 820E5A90h case    2:*/		return 0x820E5A94;
		  /* 820E5A94h */ case    3:  		/* b 72 */
		/* 820E5A94h case    3:*/		return 0x820E5ADC;
		/* 820E5A94h case    3:*/		return 0x820E5A98;
	}
	return 0x820E5A98;
} // Block from 820E5A88h-820E5A98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E5A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5A98);
		  /* 820E5A98h */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 820E5A98h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820E5A98h case    0:*/		return 0x820E5A9C;
		  /* 820E5A9Ch */ case    1:  		/* bc 12, CR6_EQ, 240 */
		/* 820E5A9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5B8C;  }
		/* 820E5A9Ch case    1:*/		return 0x820E5AA0;
		  /* 820E5AA0h */ case    2:  		/* cmpwi CR6, R27, 0 */
		/* 820E5AA0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E5AA0h case    2:*/		return 0x820E5AA4;
		  /* 820E5AA4h */ case    3:  		/* bc 4, CR6_EQ, 232 */
		/* 820E5AA4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E5B8C;  }
		/* 820E5AA4h case    3:*/		return 0x820E5AA8;
		  /* 820E5AA8h */ case    4:  		/* cmplwi CR6, R18, 0 */
		/* 820E5AA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820E5AA8h case    4:*/		return 0x820E5AAC;
		  /* 820E5AACh */ case    5:  		/* bc 4, CR6_EQ, -392 */
		/* 820E5AACh case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E5924;  }
		/* 820E5AACh case    5:*/		return 0x820E5AB0;
		  /* 820E5AB0h */ case    6:  		/* li R3, 116 */
		/* 820E5AB0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E5AB0h case    6:*/		return 0x820E5AB4;
		  /* 820E5AB4h */ case    7:  		/* bl 92900 */
		/* 820E5AB4h case    7:*/		regs.LR = 0x820E5AB8; return 0x820FC598;
		/* 820E5AB4h case    7:*/		return 0x820E5AB8;
		  /* 820E5AB8h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 820E5AB8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E5AB8h case    8:*/		return 0x820E5ABC;
		  /* 820E5ABCh */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 820E5ABCh case    9:*/		if ( regs.CR[0].eq ) { return 0x820E5AC8;  }
		/* 820E5ABCh case    9:*/		return 0x820E5AC0;
		  /* 820E5AC0h */ case   10:  		/* bl 91104 */
		/* 820E5AC0h case   10:*/		regs.LR = 0x820E5AC4; return 0x820FBEA0;
		/* 820E5AC0h case   10:*/		return 0x820E5AC4;
		  /* 820E5AC4h */ case   11:  		/* mr R24, R3 */
		/* 820E5AC4h case   11:*/		regs.R24 = regs.R3;
		/* 820E5AC4h case   11:*/		return 0x820E5AC8;
	}
	return 0x820E5AC8;
} // Block from 820E5A98h-820E5AC8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E5AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5AC8);
		  /* 820E5AC8h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 820E5AC8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820E5AC8h case    0:*/		return 0x820E5ACC;
		  /* 820E5ACCh */ case    1:  		/* bc 12, CR6_EQ, -80 */
		/* 820E5ACCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5A7C;  }
		/* 820E5ACCh case    1:*/		return 0x820E5AD0;
		  /* 820E5AD0h */ case    2:  		/* mr R4, R21 */
		/* 820E5AD0h case    2:*/		regs.R4 = regs.R21;
		/* 820E5AD0h case    2:*/		return 0x820E5AD4;
		  /* 820E5AD4h */ case    3:  		/* li R11, 451 */
		/* 820E5AD4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1C3);
		/* 820E5AD4h case    3:*/		return 0x820E5AD8;
		  /* 820E5AD8h */ case    4:  		/* rlwimi R4, R11, 22, 0, 11 */
		/* 820E5AD8h case    4:*/		cpu::op::rlwimi<0,22,0,11>(regs,&regs.R4,regs.R11);
		/* 820E5AD8h case    4:*/		return 0x820E5ADC;
	}
	return 0x820E5ADC;
} // Block from 820E5AC8h-820E5ADCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E5ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5ADC);
		  /* 820E5ADCh */ case    0:  		/* li R7, 0 */
		/* 820E5ADCh case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E5ADCh case    0:*/		return 0x820E5AE0;
		  /* 820E5AE0h */ case    1:  		/* mr R6, R21 */
		/* 820E5AE0h case    1:*/		regs.R6 = regs.R21;
		/* 820E5AE0h case    1:*/		return 0x820E5AE4;
		  /* 820E5AE4h */ case    2:  		/* mr R5, R30 */
		/* 820E5AE4h case    2:*/		regs.R5 = regs.R30;
		/* 820E5AE4h case    2:*/		return 0x820E5AE8;
		  /* 820E5AE8h */ case    3:  		/* mr R3, R24 */
		/* 820E5AE8h case    3:*/		regs.R3 = regs.R24;
		/* 820E5AE8h case    3:*/		return 0x820E5AEC;
		  /* 820E5AECh */ case    4:  		/* bl 92996 */
		/* 820E5AECh case    4:*/		regs.LR = 0x820E5AF0; return 0x820FC630;
		/* 820E5AECh case    4:*/		return 0x820E5AF0;
		  /* 820E5AF0h */ case    5:  		/* or. R29, R3, R3 */
		/* 820E5AF0h case    5:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E5AF0h case    5:*/		return 0x820E5AF4;
		  /* 820E5AF4h */ case    6:  		/* bc 12, CR0_LT, 668 */
		/* 820E5AF4h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E5D90;  }
		/* 820E5AF4h case    6:*/		return 0x820E5AF8;
		  /* 820E5AF8h */ case    7:  		/* mr R3, R24 */
		/* 820E5AF8h case    7:*/		regs.R3 = regs.R24;
		/* 820E5AF8h case    7:*/		return 0x820E5AFC;
		  /* 820E5AFCh */ case    8:  		/* lwz R4, <#[R23 + 260]> */
		/* 820E5AFCh case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5AFCh case    8:*/		return 0x820E5B00;
		  /* 820E5B00h */ case    9:  		/* bl 91120 */
		/* 820E5B00h case    9:*/		regs.LR = 0x820E5B04; return 0x820FBEF0;
		/* 820E5B00h case    9:*/		return 0x820E5B04;
		  /* 820E5B04h */ case   10:  		/* or. R29, R3, R3 */
		/* 820E5B04h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E5B04h case   10:*/		return 0x820E5B08;
		  /* 820E5B08h */ case   11:  		/* bc 12, CR0_LT, 648 */
		/* 820E5B08h case   11:*/		if ( regs.CR[0].lt ) { return 0x820E5D90;  }
		/* 820E5B08h case   11:*/		return 0x820E5B0C;
		  /* 820E5B0Ch */ case   12:  		/* lwz R11, <#[R23 + 260]> */
		/* 820E5B0Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5B0Ch case   12:*/		return 0x820E5B10;
		  /* 820E5B10h */ case   13:  		/* mr R5, R31 */
		/* 820E5B10h case   13:*/		regs.R5 = regs.R31;
		/* 820E5B10h case   13:*/		return 0x820E5B14;
		  /* 820E5B14h */ case   14:  		/* lwz R3, <#[R24 + 16]> */
		/* 820E5B14h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x00000010) );
		/* 820E5B14h case   14:*/		return 0x820E5B18;
		  /* 820E5B18h */ case   15:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E5B18h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E5B18h case   15:*/		return 0x820E5B1C;
		  /* 820E5B1Ch */ case   16:  		/* bl -344428 */
		/* 820E5B1Ch case   16:*/		regs.LR = 0x820E5B20; return 0x820919B0;
		/* 820E5B1Ch case   16:*/		return 0x820E5B20;
		  /* 820E5B20h */ case   17:  		/* lwz R11, <#[R23 + 260]> */
		/* 820E5B20h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5B20h case   17:*/		return 0x820E5B24;
		  /* 820E5B24h */ case   18:  		/* mr R5, R31 */
		/* 820E5B24h case   18:*/		regs.R5 = regs.R31;
		/* 820E5B24h case   18:*/		return 0x820E5B28;
		  /* 820E5B28h */ case   19:  		/* lwz R3, <#[R24 + 8]> */
		/* 820E5B28h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x00000008) );
		/* 820E5B28h case   19:*/		return 0x820E5B2C;
		  /* 820E5B2Ch */ case   20:  		/* lwz R4, <#[R11 + 8]> */
		/* 820E5B2Ch case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 820E5B2Ch case   20:*/		return 0x820E5B30;
		  /* 820E5B30h */ case   21:  		/* bl -344448 */
		/* 820E5B30h case   21:*/		regs.LR = 0x820E5B34; return 0x820919B0;
		/* 820E5B30h case   21:*/		return 0x820E5B34;
		  /* 820E5B34h */ case   22:  		/* lwz R11, <#[R24 + 8]> */
		/* 820E5B34h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 820E5B34h case   22:*/		return 0x820E5B38;
		  /* 820E5B38h */ case   23:  		/* cmpwi CR6, R26, 0 */
		/* 820E5B38h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E5B38h case   23:*/		return 0x820E5B3C;
		  /* 820E5B3Ch */ case   24:  		/* mr R5, R31 */
		/* 820E5B3Ch case   24:*/		regs.R5 = regs.R31;
		/* 820E5B3Ch case   24:*/		return 0x820E5B40;
		  /* 820E5B40h */ case   25:  		/* add R3, R31, R11 */
		/* 820E5B40h case   25:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 820E5B40h case   25:*/		return 0x820E5B44;
		  /* 820E5B44h */ case   26:  		/* bc 12, CR6_EQ, 20 */
		/* 820E5B44h case   26:*/		if ( regs.CR[6].eq ) { return 0x820E5B58;  }
		/* 820E5B44h case   26:*/		return 0x820E5B48;
		  /* 820E5B48h */ case   27:  		/* lwz R10, <#[R23 + 260]> */
		/* 820E5B48h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5B48h case   27:*/		return 0x820E5B4C;
		  /* 820E5B4Ch */ case   28:  		/* lwz R11, <#[R10 + 8]> */
		/* 820E5B4Ch case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E5B4Ch case   28:*/		return 0x820E5B50;
		  /* 820E5B50h */ case   29:  		/* add R4, R11, R31 */
		/* 820E5B50h case   29:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R31);
		/* 820E5B50h case   29:*/		return 0x820E5B54;
		  /* 820E5B54h */ case   30:  		/* b 20 */
		/* 820E5B54h case   30:*/		return 0x820E5B68;
		/* 820E5B54h case   30:*/		return 0x820E5B58;
	}
	return 0x820E5B58;
} // Block from 820E5ADCh-820E5B58h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820E5B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5B58);
		  /* 820E5B58h */ case    0:  		/* lwz R9, <#[R23 + 260]> */
		/* 820E5B58h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5B58h case    0:*/		return 0x820E5B5C;
		  /* 820E5B5Ch */ case    1:  		/* rlwinm R10, R21, 3, 0, 28 */
		/* 820E5B5Ch case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R21);
		/* 820E5B5Ch case    1:*/		return 0x820E5B60;
		  /* 820E5B60h */ case    2:  		/* lwz R11, <#[R9 + 8]> */
		/* 820E5B60h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 820E5B60h case    2:*/		return 0x820E5B64;
		  /* 820E5B64h */ case    3:  		/* add R4, R10, R11 */
		/* 820E5B64h case    3:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 820E5B64h case    3:*/		return 0x820E5B68;
	}
	return 0x820E5B68;
} // Block from 820E5B58h-820E5B68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E5B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5B68);
		  /* 820E5B68h */ case    0:  		/* bl -344504 */
		/* 820E5B68h case    0:*/		regs.LR = 0x820E5B6C; return 0x820919B0;
		/* 820E5B68h case    0:*/		return 0x820E5B6C;
		  /* 820E5B6Ch */ case    1:  		/* lwz R11, <#[R23 + 256]> */
		/* 820E5B6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000100) );
		/* 820E5B6Ch case    1:*/		return 0x820E5B70;
		  /* 820E5B70h */ case    2:  		/* mr R4, R24 */
		/* 820E5B70h case    2:*/		regs.R4 = regs.R24;
		/* 820E5B70h case    2:*/		return 0x820E5B74;
		  /* 820E5B74h */ case    3:  		/* lwz R10, <#[R23 + 24]> */
		/* 820E5B74h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000018) );
		/* 820E5B74h case    3:*/		return 0x820E5B78;
		  /* 820E5B78h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5B78h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5B78h case    4:*/		return 0x820E5B7C;
		  /* 820E5B7Ch */ case    5:  		/* lwzx R3, <#[R11 + R10]> */
		/* 820E5B7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E5B7Ch case    5:*/		return 0x820E5B80;
		  /* 820E5B80h */ case    6:  		/* bl 93648 */
		/* 820E5B80h case    6:*/		regs.LR = 0x820E5B84; return 0x820FC950;
		/* 820E5B80h case    6:*/		return 0x820E5B84;
		  /* 820E5B84h */ case    7:  		/* mr R29, R3 */
		/* 820E5B84h case    7:*/		regs.R29 = regs.R3;
		/* 820E5B84h case    7:*/		return 0x820E5B88;
		  /* 820E5B88h */ case    8:  		/* b 520 */
		/* 820E5B88h case    8:*/		return 0x820E5D90;
		/* 820E5B88h case    8:*/		return 0x820E5B8C;
	}
	return 0x820E5B8C;
} // Block from 820E5B68h-820E5B8Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E5B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5B8C);
		  /* 820E5B8Ch */ case    0:  		/* lis R10, -32254 */
		/* 820E5B8Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E5B8Ch case    0:*/		return 0x820E5B90;
		  /* 820E5B90h */ case    1:  		/* lwz R4, <#[R23 + 260]> */
		/* 820E5B90h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5B90h case    1:*/		return 0x820E5B94;
		  /* 820E5B94h */ case    2:  		/* cntlzw R11, R18 */
		/* 820E5B94h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R18);
		/* 820E5B94h case    2:*/		return 0x820E5B98;
		  /* 820E5B98h */ case    3:  		/* addi R5, R10, -24552 */
		/* 820E5B98h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA018);
		/* 820E5B98h case    3:*/		return 0x820E5B9C;
		  /* 820E5B9Ch */ case    4:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820E5B9Ch case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820E5B9Ch case    4:*/		return 0x820E5BA0;
		  /* 820E5BA0h */ case    5:  		/* mr R10, R21 */
		/* 820E5BA0h case    5:*/		regs.R10 = regs.R21;
		/* 820E5BA0h case    5:*/		return 0x820E5BA4;
		  /* 820E5BA4h */ case    6:  		/* addi R9, R1, 112 */
		/* 820E5BA4h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E5BA4h case    6:*/		return 0x820E5BA8;
		  /* 820E5BA8h */ case    7:  		/* stw R11, <#[R1 + 84]> */
		/* 820E5BA8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820E5BA8h case    7:*/		return 0x820E5BAC;
		  /* 820E5BACh */ case    8:  		/* addi R8, R1, 128 */
		/* 820E5BACh case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820E5BACh case    8:*/		return 0x820E5BB0;
		  /* 820E5BB0h */ case    9:  		/* addi R7, R1, 96 */
		/* 820E5BB0h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E5BB0h case    9:*/		return 0x820E5BB4;
		  /* 820E5BB4h */ case   10:  		/* addi R6, R1, 288 */
		/* 820E5BB4h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820E5BB4h case   10:*/		return 0x820E5BB8;
		  /* 820E5BB8h */ case   11:  		/* mr R3, R23 */
		/* 820E5BB8h case   11:*/		regs.R3 = regs.R23;
		/* 820E5BB8h case   11:*/		return 0x820E5BBC;
		  /* 820E5BBCh */ case   12:  		/* bl -7996 */
		/* 820E5BBCh case   12:*/		regs.LR = 0x820E5BC0; return 0x820E3C80;
		/* 820E5BBCh case   12:*/		return 0x820E5BC0;
		  /* 820E5BC0h */ case   13:  		/* or. R29, R3, R3 */
		/* 820E5BC0h case   13:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E5BC0h case   13:*/		return 0x820E5BC4;
		  /* 820E5BC4h */ case   14:  		/* bc 4, CR0_EQ, 484 */
		/* 820E5BC4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x820E5DA8;  }
		/* 820E5BC4h case   14:*/		return 0x820E5BC8;
		  /* 820E5BC8h */ case   15:  		/* mr R19, R24 */
		/* 820E5BC8h case   15:*/		regs.R19 = regs.R24;
		/* 820E5BC8h case   15:*/		return 0x820E5BCC;
		  /* 820E5BCCh */ case   16:  		/* mr R10, R24 */
		/* 820E5BCCh case   16:*/		regs.R10 = regs.R24;
		/* 820E5BCCh case   16:*/		return 0x820E5BD0;
		  /* 820E5BD0h */ case   17:  		/* mr R20, R24 */
		/* 820E5BD0h case   17:*/		regs.R20 = regs.R24;
		/* 820E5BD0h case   17:*/		return 0x820E5BD4;
		  /* 820E5BD4h */ case   18:  		/* mr R22, R24 */
		/* 820E5BD4h case   18:*/		regs.R22 = regs.R24;
		/* 820E5BD4h case   18:*/		return 0x820E5BD8;
		  /* 820E5BD8h */ case   19:  		/* mr R5, R24 */
		/* 820E5BD8h case   19:*/		regs.R5 = regs.R24;
		/* 820E5BD8h case   19:*/		return 0x820E5BDC;
		  /* 820E5BDCh */ case   20:  		/* cmplwi CR6, R21, 0 */
		/* 820E5BDCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820E5BDCh case   20:*/		return 0x820E5BE0;
		  /* 820E5BE0h */ case   21:  		/* bc 12, CR6_EQ, 396 */
		/* 820E5BE0h case   21:*/		if ( regs.CR[6].eq ) { return 0x820E5D6C;  }
		/* 820E5BE0h case   21:*/		return 0x820E5BE4;
		  /* 820E5BE4h */ case   22:  		/* lwz R30, <#[R23 + 20]> */
		/* 820E5BE4h case   22:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x00000014) );
		/* 820E5BE4h case   22:*/		return 0x820E5BE8;
		  /* 820E5BE8h */ case   23:  		/* rlwinm R25, R20, 2, 0, 29 */
		/* 820E5BE8h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R20);
		/* 820E5BE8h case   23:*/		return 0x820E5BEC;
		  /* 820E5BECh */ case   24:  		/* lwz R26, <#[R23 + 16]> */
		/* 820E5BECh case   24:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R23 + 0x00000010) );
		/* 820E5BECh case   24:*/		return 0x820E5BF0;
		  /* 820E5BF0h */ case   25:  		/* subf R11, R25, R5 */
		/* 820E5BF0h case   25:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R25,regs.R5);
		/* 820E5BF0h case   25:*/		return 0x820E5BF4;
		  /* 820E5BF4h */ case   26:  		/* subf R10, R22, R5 */
		/* 820E5BF4h case   26:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R22,regs.R5);
		/* 820E5BF4h case   26:*/		return 0x820E5BF8;
		  /* 820E5BF8h */ case   27:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E5BF8h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E5BF8h case   27:*/		return 0x820E5BFC;
		  /* 820E5BFCh */ case   28:  		/* addi R9, R1, 144 */
		/* 820E5BFCh case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 820E5BFCh case   28:*/		return 0x820E5C00;
		  /* 820E5C00h */ case   29:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E5C00h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E5C00h case   29:*/		return 0x820E5C04;
		  /* 820E5C04h */ case   30:  		/* addi R8, R1, 176 */
		/* 820E5C04h case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 820E5C04h case   30:*/		return 0x820E5C08;
		  /* 820E5C08h */ case   31:  		/* add R7, R25, R5 */
		/* 820E5C08h case   31:*/		cpu::op::add<0>(regs,&regs.R7,regs.R25,regs.R5);
		/* 820E5C08h case   31:*/		return 0x820E5C0C;
		  /* 820E5C0Ch */ case   32:  		/* addi R4, R1, 128 */
		/* 820E5C0Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E5C0Ch case   32:*/		return 0x820E5C10;
		  /* 820E5C10h */ case   33:  		/* lwzx R6, <#[R11 + R9]> */
		/* 820E5C10h case   33:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E5C10h case   33:*/		return 0x820E5C14;
		  /* 820E5C14h */ case   34:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 820E5C14h case   34:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 820E5C14h case   34:*/		return 0x820E5C18;
		  /* 820E5C18h */ case   35:  		/* add R9, R22, R5 */
		/* 820E5C18h case   35:*/		cpu::op::add<0>(regs,&regs.R9,regs.R22,regs.R5);
		/* 820E5C18h case   35:*/		return 0x820E5C1C;
		  /* 820E5C1Ch */ case   36:  		/* lwzx R7, <#[R10 + R8]> */
		/* 820E5C1Ch case   36:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E5C1Ch case   36:*/		return 0x820E5C20;
		  /* 820E5C20h */ case   37:  		/* rlwinm R10, R6, 2, 0, 29 */
		/* 820E5C20h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R6);
		/* 820E5C20h case   37:*/		return 0x820E5C24;
		  /* 820E5C24h */ case   38:  		/* rlwinm R8, R9, 2, 0, 29 */
		/* 820E5C24h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 820E5C24h case   38:*/		return 0x820E5C28;
		  /* 820E5C28h */ case   39:  		/* rlwinm R3, R7, 2, 0, 29 */
		/* 820E5C28h case   39:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R7);
		/* 820E5C28h case   39:*/		return 0x820E5C2C;
		  /* 820E5C2Ch */ case   40:  		/* lwzx R9, <#[R11 + R4]> */
		/* 820E5C2Ch case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E5C2Ch case   40:*/		return 0x820E5C30;
		  /* 820E5C30h */ case   41:  		/* addi R11, R1, 160 */
		/* 820E5C30h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 820E5C30h case   41:*/		return 0x820E5C34;
		  /* 820E5C34h */ case   42:  		/* lwzx R4, <#[R10 + R30]> */
		/* 820E5C34h case   42:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820E5C34h case   42:*/		return 0x820E5C38;
		  /* 820E5C38h */ case   43:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 820E5C38h case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 820E5C38h case   43:*/		return 0x820E5C3C;
		  /* 820E5C3Ch */ case   44:  		/* lwzx R3, <#[R3 + R30]> */
		/* 820E5C3Ch case   44:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R30 + 0x00000000) );
		/* 820E5C3Ch case   44:*/		return 0x820E5C40;
		  /* 820E5C40h */ case   45:  		/* lwzx R11, <#[R8 + R11]> */
		/* 820E5C40h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E5C40h case   45:*/		return 0x820E5C44;
		  /* 820E5C44h */ case   46:  		/* lwzx R8, <#[R10 + R30]> */
		/* 820E5C44h case   46:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820E5C44h case   46:*/		return 0x820E5C48;
		  /* 820E5C48h */ case   47:  		/* rlwinm R31, R11, 2, 0, 29 */
		/* 820E5C48h case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R11);
		/* 820E5C48h case   47:*/		return 0x820E5C4C;
		  /* 820E5C4Ch */ case   48:  		/* lwz R10, <#[R4 + 4]> */
		/* 820E5C4Ch case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 820E5C4Ch case   48:*/		return 0x820E5C50;
		  /* 820E5C50h */ case   49:  		/* lwz R29, <#[R3 + 4]> */
		/* 820E5C50h case   49:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000004) );
		/* 820E5C50h case   49:*/		return 0x820E5C54;
		  /* 820E5C54h */ case   50:  		/* rlwinm R28, R10, 2, 0, 29 */
		/* 820E5C54h case   50:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R10);
		/* 820E5C54h case   50:*/		return 0x820E5C58;
		  /* 820E5C58h */ case   51:  		/* rlwinm R29, R29, 2, 0, 29 */
		/* 820E5C58h case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R29);
		/* 820E5C58h case   51:*/		return 0x820E5C5C;
		  /* 820E5C5Ch */ case   52:  		/* lwz R10, <#[R8 + 56]> */
		/* 820E5C5Ch case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000038) );
		/* 820E5C5Ch case   52:*/		return 0x820E5C60;
		  /* 820E5C60h */ case   53:  		/* lwzx R31, <#[R31 + R30]> */
		/* 820E5C60h case   53:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 820E5C60h case   53:*/		return 0x820E5C64;
		  /* 820E5C64h */ case   54:  		/* cmplw CR6, R10, R11 */
		/* 820E5C64h case   54:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E5C64h case   54:*/		return 0x820E5C68;
		  /* 820E5C68h */ case   55:  		/* lwzx R28, <#[R28 + R26]> */
		/* 820E5C68h case   55:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + regs.R26 + 0x00000000) );
		/* 820E5C68h case   55:*/		return 0x820E5C6C;
		  /* 820E5C6Ch */ case   56:  		/* lwzx R27, <#[R29 + R26]> */
		/* 820E5C6Ch case   56:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R29 + regs.R26 + 0x00000000) );
		/* 820E5C6Ch case   56:*/		return 0x820E5C70;
		  /* 820E5C70h */ case   57:  		/* bc 12, CR6_EQ, 32 */
		/* 820E5C70h case   57:*/		if ( regs.CR[6].eq ) { return 0x820E5C90;  }
		/* 820E5C70h case   57:*/		return 0x820E5C74;
		  /* 820E5C74h */ case   58:  		/* lwz R29, <#[R31 + 56]> */
		/* 820E5C74h case   58:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000038) );
		/* 820E5C74h case   58:*/		return 0x820E5C78;
		  /* 820E5C78h */ case   59:  		/* cmplw CR6, R29, R9 */
		/* 820E5C78h case   59:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 820E5C78h case   59:*/		return 0x820E5C7C;
		  /* 820E5C7Ch */ case   60:  		/* bc 12, CR6_EQ, 20 */
		/* 820E5C7Ch case   60:*/		if ( regs.CR[6].eq ) { return 0x820E5C90;  }
		/* 820E5C7Ch case   60:*/		return 0x820E5C80;
		  /* 820E5C80h */ case   61:  		/* cmpwi CR6, R10, -1 */
		/* 820E5C80h case   61:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E5C80h case   61:*/		return 0x820E5C84;
		  /* 820E5C84h */ case   62:  		/* bc 12, CR6_EQ, 48 */
		/* 820E5C84h case   62:*/		if ( regs.CR[6].eq ) { return 0x820E5CB4;  }
		/* 820E5C84h case   62:*/		return 0x820E5C88;
		  /* 820E5C88h */ case   63:  		/* cmplw CR6, R10, R29 */
		/* 820E5C88h case   63:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 820E5C88h case   63:*/		return 0x820E5C8C;
		  /* 820E5C8Ch */ case   64:  		/* bc 4, CR6_EQ, 40 */
		/* 820E5C8Ch case   64:*/		if ( !regs.CR[6].eq ) { return 0x820E5CB4;  }
		/* 820E5C8Ch case   64:*/		return 0x820E5C90;
	}
	return 0x820E5C90;
} // Block from 820E5B8Ch-820E5C90h (65 instructions)

//////////////////////////////////////////////////////
// Block at 820E5C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5C90);
		  /* 820E5C90h */ case    0:  		/* lwz R10, <#[R8 + 60]> */
		/* 820E5C90h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000003C) );
		/* 820E5C90h case    0:*/		return 0x820E5C94;
		  /* 820E5C94h */ case    1:  		/* lwz R8, <#[R31 + 60]> */
		/* 820E5C94h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000003C) );
		/* 820E5C94h case    1:*/		return 0x820E5C98;
		  /* 820E5C98h */ case    2:  		/* xoris R10, R10, 8 */
		/* 820E5C98h case    2:*/		cpu::op::xoris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 820E5C98h case    2:*/		return 0x820E5C9C;
		  /* 820E5C9Ch */ case    3:  		/* cmplw CR6, R10, R8 */
		/* 820E5C9Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E5C9Ch case    3:*/		return 0x820E5CA0;
		  /* 820E5CA0h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 820E5CA0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E5CB4;  }
		/* 820E5CA0h case    4:*/		return 0x820E5CA4;
		  /* 820E5CA4h */ case    5:  		/* cmplw CR6, R6, R7 */
		/* 820E5CA4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 820E5CA4h case    5:*/		return 0x820E5CA8;
		  /* 820E5CA8h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 820E5CA8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E5CB4;  }
		/* 820E5CA8h case    6:*/		return 0x820E5CAC;
		  /* 820E5CACh */ case    7:  		/* li R10, 1 */
		/* 820E5CACh case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E5CACh case    7:*/		return 0x820E5CB0;
		  /* 820E5CB0h */ case    8:  		/* b 132 */
		/* 820E5CB0h case    8:*/		return 0x820E5D34;
		/* 820E5CB0h case    8:*/		return 0x820E5CB4;
	}
	return 0x820E5CB4;
} // Block from 820E5C90h-820E5CB4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E5CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5CB4);
		  /* 820E5CB4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 820E5CB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 820E5CB4h case    0:*/		return 0x820E5CB8;
		  /* 820E5CB8h */ case    1:  		/* bc 4, CR6_EQ, 120 */
		/* 820E5CB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E5D30;  }
		/* 820E5CB8h case    1:*/		return 0x820E5CBC;
		  /* 820E5CBCh */ case    2:  		/* lwz R10, <#[R4 + 56]> */
		/* 820E5CBCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000038) );
		/* 820E5CBCh case    2:*/		return 0x820E5CC0;
		  /* 820E5CC0h */ case    3:  		/* cmplw CR6, R10, R7 */
		/* 820E5CC0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820E5CC0h case    3:*/		return 0x820E5CC4;
		  /* 820E5CC4h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 820E5CC4h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E5CE4;  }
		/* 820E5CC4h case    4:*/		return 0x820E5CC8;
		  /* 820E5CC8h */ case    5:  		/* lwz R11, <#[R3 + 56]> */
		/* 820E5CC8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 820E5CC8h case    5:*/		return 0x820E5CCC;
		  /* 820E5CCCh */ case    6:  		/* cmplw CR6, R11, R6 */
		/* 820E5CCCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 820E5CCCh case    6:*/		return 0x820E5CD0;
		  /* 820E5CD0h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 820E5CD0h case    7:*/		if ( regs.CR[6].eq ) { return 0x820E5CE4;  }
		/* 820E5CD0h case    7:*/		return 0x820E5CD4;
		  /* 820E5CD4h */ case    8:  		/* cmpwi CR6, R10, -1 */
		/* 820E5CD4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E5CD4h case    8:*/		return 0x820E5CD8;
		  /* 820E5CD8h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 820E5CD8h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E5CF8;  }
		/* 820E5CD8h case    9:*/		return 0x820E5CDC;
		  /* 820E5CDCh */ case   10:  		/* cmplw CR6, R10, R11 */
		/* 820E5CDCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E5CDCh case   10:*/		return 0x820E5CE0;
		  /* 820E5CE0h */ case   11:  		/* bc 4, CR6_EQ, 24 */
		/* 820E5CE0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E5CF8;  }
		/* 820E5CE0h case   11:*/		return 0x820E5CE4;
	}
	return 0x820E5CE4;
} // Block from 820E5CB4h-820E5CE4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E5CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5CE4);
		  /* 820E5CE4h */ case    0:  		/* lwz R11, <#[R4 + 60]> */
		/* 820E5CE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000003C) );
		/* 820E5CE4h case    0:*/		return 0x820E5CE8;
		  /* 820E5CE8h */ case    1:  		/* lwz R10, <#[R3 + 60]> */
		/* 820E5CE8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000003C) );
		/* 820E5CE8h case    1:*/		return 0x820E5CEC;
		  /* 820E5CECh */ case    2:  		/* xoris R11, R11, 8 */
		/* 820E5CECh case    2:*/		cpu::op::xoris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820E5CECh case    2:*/		return 0x820E5CF0;
		  /* 820E5CF0h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 820E5CF0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E5CF0h case    3:*/		return 0x820E5CF4;
		  /* 820E5CF4h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 820E5CF4h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E5D24;  }
		/* 820E5CF4h case    4:*/		return 0x820E5CF8;
	}
	return 0x820E5CF8;
} // Block from 820E5CE4h-820E5CF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E5CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5CF8);
		  /* 820E5CF8h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 820E5CF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 820E5CF8h case    0:*/		return 0x820E5CFC;
		  /* 820E5CFCh */ case    1:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 820E5CFCh case    1:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 820E5CFCh case    1:*/		return 0x820E5D00;
		  /* 820E5D00h */ case    2:  		/* bc 12, CR0_EQ, 48 */
		/* 820E5D00h case    2:*/		if ( regs.CR[0].eq ) { return 0x820E5D30;  }
		/* 820E5D00h case    2:*/		return 0x820E5D04;
		  /* 820E5D04h */ case    3:  		/* lwz R11, <#[R27 + 4]> */
		/* 820E5D04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 820E5D04h case    3:*/		return 0x820E5D08;
		  /* 820E5D08h */ case    4:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 820E5D08h case    4:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 820E5D08h case    4:*/		return 0x820E5D0C;
		  /* 820E5D0Ch */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 820E5D0Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x820E5D30;  }
		/* 820E5D0Ch case    5:*/		return 0x820E5D10;
		  /* 820E5D10h */ case    6:  		/* lfd FR0, <#[R4 + 32]> */
		/* 820E5D10h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R4 + 0x00000020) );
		/* 820E5D10h case    6:*/		return 0x820E5D14;
		  /* 820E5D14h */ case    7:  		/* fneg FR0, FR0 */
		/* 820E5D14h case    7:*/		cpu::op::fneg<0>(regs,&regs.FR0,regs.FR0);
		/* 820E5D14h case    7:*/		return 0x820E5D18;
		  /* 820E5D18h */ case    8:  		/* lfd FR13, <#[R3 + 32]> */
		/* 820E5D18h case    8:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R3 + 0x00000020) );
		/* 820E5D18h case    8:*/		return 0x820E5D1C;
		  /* 820E5D1Ch */ case    9:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E5D1Ch case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E5D1Ch case    9:*/		return 0x820E5D20;
		  /* 820E5D20h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 820E5D20h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820E5D30;  }
		/* 820E5D20h case   10:*/		return 0x820E5D24;
	}
	return 0x820E5D24;
} // Block from 820E5CF8h-820E5D24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D24);
		  /* 820E5D24h */ case    0:  		/* li R10, 1 */
		/* 820E5D24h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E5D24h case    0:*/		return 0x820E5D28;
		  /* 820E5D28h */ case    1:  		/* li R11, 1 */
		/* 820E5D28h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820E5D28h case    1:*/		return 0x820E5D2C;
		  /* 820E5D2Ch */ case    2:  		/* b 12 */
		/* 820E5D2Ch case    2:*/		return 0x820E5D38;
		/* 820E5D2Ch case    2:*/		return 0x820E5D30;
	}
	return 0x820E5D30;
} // Block from 820E5D24h-820E5D30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D30);
		  /* 820E5D30h */ case    0:  		/* mr R10, R24 */
		/* 820E5D30h case    0:*/		regs.R10 = regs.R24;
		/* 820E5D30h case    0:*/		return 0x820E5D34;
	}
	return 0x820E5D34;
} // Block from 820E5D30h-820E5D34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D34);
		  /* 820E5D34h */ case    0:  		/* mr R11, R24 */
		/* 820E5D34h case    0:*/		regs.R11 = regs.R24;
		/* 820E5D34h case    0:*/		return 0x820E5D38;
	}
	return 0x820E5D38;
} // Block from 820E5D34h-820E5D38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D38);
		  /* 820E5D38h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 820E5D38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E5D38h case    0:*/		return 0x820E5D3C;
		  /* 820E5D3Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820E5D3Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E5D48;  }
		/* 820E5D3Ch case    1:*/		return 0x820E5D40;
		  /* 820E5D40h */ case    2:  		/* mr R19, R11 */
		/* 820E5D40h case    2:*/		regs.R19 = regs.R11;
		/* 820E5D40h case    2:*/		return 0x820E5D44;
		  /* 820E5D44h */ case    3:  		/* b 20 */
		/* 820E5D44h case    3:*/		return 0x820E5D58;
		/* 820E5D44h case    3:*/		return 0x820E5D48;
	}
	return 0x820E5D48;
} // Block from 820E5D38h-820E5D48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D48);
		  /* 820E5D48h */ case    0:  		/* subf R11, R19, R11 */
		/* 820E5D48h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R19,regs.R11);
		/* 820E5D48h case    0:*/		return 0x820E5D4C;
		  /* 820E5D4Ch */ case    1:  		/* addic R11, R11, -1 */
		/* 820E5D4Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820E5D4Ch case    1:*/		return 0x820E5D50;
		  /* 820E5D50h */ case    2:  		/* subfe R11, R11, R11 */
		/* 820E5D50h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820E5D50h case    2:*/		return 0x820E5D54;
		  /* 820E5D54h */ case    3:  		/* and R10, R11, R10 */
		/* 820E5D54h case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 820E5D54h case    3:*/		return 0x820E5D58;
	}
	return 0x820E5D58;
} // Block from 820E5D48h-820E5D58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D58);
		  /* 820E5D58h */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 820E5D58h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820E5D58h case    0:*/		return 0x820E5D5C;
		  /* 820E5D5Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 820E5D5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5D74;  }
		/* 820E5D5Ch case    1:*/		return 0x820E5D60;
		  /* 820E5D60h */ case    2:  		/* addi R5, R5, 1 */
		/* 820E5D60h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820E5D60h case    2:*/		return 0x820E5D64;
		  /* 820E5D64h */ case    3:  		/* cmplw CR6, R5, R21 */
		/* 820E5D64h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R21);
		/* 820E5D64h case    3:*/		return 0x820E5D68;
		  /* 820E5D68h */ case    4:  		/* bc 12, CR6_LT, -376 */
		/* 820E5D68h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E5BF0;  }
		/* 820E5D68h case    4:*/		return 0x820E5D6C;
	}
	return 0x820E5D6C;
} // Block from 820E5D58h-820E5D6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D6C);
		  /* 820E5D6Ch */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 820E5D6Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820E5D6Ch case    0:*/		return 0x820E5D70;
		  /* 820E5D70h */ case    1:  		/* bc 4, CR6_EQ, 68 */
		/* 820E5D70h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E5DB4;  }
		/* 820E5D70h case    1:*/		return 0x820E5D74;
	}
	return 0x820E5D74;
} // Block from 820E5D6Ch-820E5D74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D74);
		  /* 820E5D74h */ case    0:  		/* addi R22, R22, 4 */
		/* 820E5D74h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 820E5D74h case    0:*/		return 0x820E5D78;
		  /* 820E5D78h */ case    1:  		/* cmplwi CR6, R22, 8 */
		/* 820E5D78h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000008);
		/* 820E5D78h case    1:*/		return 0x820E5D7C;
		  /* 820E5D7Ch */ case    2:  		/* bc 12, CR6_LT, -420 */
		/* 820E5D7Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x820E5BD8;  }
		/* 820E5D7Ch case    2:*/		return 0x820E5D80;
		  /* 820E5D80h */ case    3:  		/* addi R20, R20, 1 */
		/* 820E5D80h case    3:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 820E5D80h case    3:*/		return 0x820E5D84;
		  /* 820E5D84h */ case    4:  		/* cmplwi CR6, R20, 2 */
		/* 820E5D84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000002);
		/* 820E5D84h case    4:*/		return 0x820E5D88;
		  /* 820E5D88h */ case    5:  		/* bc 12, CR6_LT, -436 */
		/* 820E5D88h case    5:*/		if ( regs.CR[6].lt ) { return 0x820E5BD4;  }
		/* 820E5D88h case    5:*/		return 0x820E5D8C;
		  /* 820E5D8Ch */ case    6:  		/* li R29, 1 */
		/* 820E5D8Ch case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 820E5D8Ch case    6:*/		return 0x820E5D90;
	}
	return 0x820E5D90;
} // Block from 820E5D74h-820E5D90h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E5D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5D90);
		  /* 820E5D90h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 820E5D90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820E5D90h case    0:*/		return 0x820E5D94;
		  /* 820E5D94h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820E5D94h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5DA8;  }
		/* 820E5D94h case    1:*/		return 0x820E5D98;
		  /* 820E5D98h */ case    2:  		/* mr R3, R24 */
		/* 820E5D98h case    2:*/		regs.R3 = regs.R24;
		/* 820E5D98h case    2:*/		return 0x820E5D9C;
		  /* 820E5D9Ch */ case    3:  		/* bl 1275428 */
		/* 820E5D9Ch case    3:*/		regs.LR = 0x820E5DA0; return 0x8221D3C0;
		/* 820E5D9Ch case    3:*/		return 0x820E5DA0;
		  /* 820E5DA0h */ case    4:  		/* mr R3, R24 */
		/* 820E5DA0h case    4:*/		regs.R3 = regs.R24;
		/* 820E5DA0h case    4:*/		return 0x820E5DA4;
		  /* 820E5DA4h */ case    5:  		/* bl 92236 */
		/* 820E5DA4h case    5:*/		regs.LR = 0x820E5DA8; return 0x820FC5F0;
		/* 820E5DA4h case    5:*/		return 0x820E5DA8;
	}
	return 0x820E5DA8;
} // Block from 820E5D90h-820E5DA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E5DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5DA8);
		  /* 820E5DA8h */ case    0:  		/* mr R3, R29 */
		/* 820E5DA8h case    0:*/		regs.R3 = regs.R29;
		/* 820E5DA8h case    0:*/		return 0x820E5DAC;
	}
	return 0x820E5DAC;
} // Block from 820E5DA8h-820E5DACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E5DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5DAC);
		  /* 820E5DACh */ case    0:  		/* addi R1, R1, 496 */
		/* 820E5DACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1F0);
		/* 820E5DACh case    0:*/		return 0x820E5DB0;
		  /* 820E5DB0h */ case    1:  		/* b -346936 */
		/* 820E5DB0h case    1:*/		return 0x82091278;
		/* 820E5DB0h case    1:*/		return 0x820E5DB4;
	}
	return 0x820E5DB4;
} // Block from 820E5DACh-820E5DB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E5DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5DB4);
		  /* 820E5DB4h */ case    0:  		/* li R3, 116 */
		/* 820E5DB4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E5DB4h case    0:*/		return 0x820E5DB8;
		  /* 820E5DB8h */ case    1:  		/* bl 92128 */
		/* 820E5DB8h case    1:*/		regs.LR = 0x820E5DBC; return 0x820FC598;
		/* 820E5DB8h case    1:*/		return 0x820E5DBC;
		  /* 820E5DBCh */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E5DBCh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E5DBCh case    2:*/		return 0x820E5DC0;
		  /* 820E5DC0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 820E5DC0h case    3:*/		if ( regs.CR[0].eq ) { return 0x820E5DCC;  }
		/* 820E5DC0h case    3:*/		return 0x820E5DC4;
		  /* 820E5DC4h */ case    4:  		/* bl 90332 */
		/* 820E5DC4h case    4:*/		regs.LR = 0x820E5DC8; return 0x820FBEA0;
		/* 820E5DC4h case    4:*/		return 0x820E5DC8;
		  /* 820E5DC8h */ case    5:  		/* mr R24, R3 */
		/* 820E5DC8h case    5:*/		regs.R24 = regs.R3;
		/* 820E5DC8h case    5:*/		return 0x820E5DCC;
	}
	return 0x820E5DCC;
} // Block from 820E5DB4h-820E5DCCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E5DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5DCC);
		  /* 820E5DCCh */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 820E5DCCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820E5DCCh case    0:*/		return 0x820E5DD0;
		  /* 820E5DD0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E5DD0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E5DE0;  }
		/* 820E5DD0h case    1:*/		return 0x820E5DD4;
		  /* 820E5DD4h */ case    2:  		/* lis R29, -32761 */
		/* 820E5DD4h case    2:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 820E5DD4h case    2:*/		return 0x820E5DD8;
		  /* 820E5DD8h */ case    3:  		/* ori R29, R29, 14 */
		/* 820E5DD8h case    3:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 820E5DD8h case    3:*/		return 0x820E5DDC;
		  /* 820E5DDCh */ case    4:  		/* b -52 */
		/* 820E5DDCh case    4:*/		return 0x820E5DA8;
		/* 820E5DDCh case    4:*/		return 0x820E5DE0;
	}
	return 0x820E5DE0;
} // Block from 820E5DCCh-820E5DE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E5DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5DE0);
		  /* 820E5DE0h */ case    0:  		/* cmpwi CR6, R19, 0 */
		/* 820E5DE0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000000);
		/* 820E5DE0h case    0:*/		return 0x820E5DE4;
		  /* 820E5DE4h */ case    1:  		/* bc 12, CR6_EQ, 308 */
		/* 820E5DE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5F18;  }
		/* 820E5DE4h case    1:*/		return 0x820E5DE8;
		  /* 820E5DE8h */ case    2:  		/* cmplwi CR6, R20, 1 */
		/* 820E5DE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000001);
		/* 820E5DE8h case    2:*/		return 0x820E5DEC;
		  /* 820E5DECh */ case    3:  		/* bc 12, CR6_EQ, 308 */
		/* 820E5DECh case    3:*/		if ( regs.CR[6].eq ) { return 0x820E5F20;  }
		/* 820E5DECh case    3:*/		return 0x820E5DF0;
		  /* 820E5DF0h */ case    4:  		/* cmplwi CR6, R20, 0 */
		/* 820E5DF0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820E5DF0h case    4:*/		return 0x820E5DF4;
		  /* 820E5DF4h */ case    5:  		/* bc 4, CR6_EQ, 44 */
		/* 820E5DF4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E5E20;  }
		/* 820E5DF4h case    5:*/		return 0x820E5DF8;
		  /* 820E5DF8h */ case    6:  		/* li R11, 451 */
		/* 820E5DF8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1C3);
		/* 820E5DF8h case    6:*/		return 0x820E5DFC;
		  /* 820E5DFCh */ case    7:  		/* mr R4, R21 */
		/* 820E5DFCh case    7:*/		regs.R4 = regs.R21;
		/* 820E5DFCh case    7:*/		return 0x820E5E00;
		  /* 820E5E00h */ case    8:  		/* li R7, 0 */
		/* 820E5E00h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E5E00h case    8:*/		return 0x820E5E04;
		  /* 820E5E04h */ case    9:  		/* rlwimi R4, R11, 22, 0, 11 */
		/* 820E5E04h case    9:*/		cpu::op::rlwimi<0,22,0,11>(regs,&regs.R4,regs.R11);
		/* 820E5E04h case    9:*/		return 0x820E5E08;
		  /* 820E5E08h */ case   10:  		/* mr R6, R21 */
		/* 820E5E08h case   10:*/		regs.R6 = regs.R21;
		/* 820E5E08h case   10:*/		return 0x820E5E0C;
		  /* 820E5E0Ch */ case   11:  		/* rlwinm R5, R21, 1, 0, 30 */
		/* 820E5E0Ch case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R21);
		/* 820E5E0Ch case   11:*/		return 0x820E5E10;
		  /* 820E5E10h */ case   12:  		/* mr R3, R24 */
		/* 820E5E10h case   12:*/		regs.R3 = regs.R24;
		/* 820E5E10h case   12:*/		return 0x820E5E14;
		  /* 820E5E14h */ case   13:  		/* bl 92188 */
		/* 820E5E14h case   13:*/		regs.LR = 0x820E5E18; return 0x820FC630;
		/* 820E5E14h case   13:*/		return 0x820E5E18;
		  /* 820E5E18h */ case   14:  		/* or. R29, R3, R3 */
		/* 820E5E18h case   14:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E5E18h case   14:*/		return 0x820E5E1C;
		  /* 820E5E1Ch */ case   15:  		/* bc 12, CR0_LT, -140 */
		/* 820E5E1Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x820E5D90;  }
		/* 820E5E1Ch case   15:*/		return 0x820E5E20;
	}
	return 0x820E5E20;
} // Block from 820E5DE0h-820E5E20h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E5E20h
// Function '?MatchPOW@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5E20);
		  /* 820E5E20h */ case    0:  		/* mr R3, R24 */
		/* 820E5E20h case    0:*/		regs.R3 = regs.R24;
		/* 820E5E20h case    0:*/		return 0x820E5E24;
		  /* 820E5E24h */ case    1:  		/* lwz R4, <#[R23 + 260]> */
		/* 820E5E24h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5E24h case    1:*/		return 0x820E5E28;
		  /* 820E5E28h */ case    2:  		/* bl 90312 */
		/* 820E5E28h case    2:*/		regs.LR = 0x820E5E2C; return 0x820FBEF0;
		/* 820E5E28h case    2:*/		return 0x820E5E2C;
		  /* 820E5E2Ch */ case    3:  		/* or. R29, R3, R3 */
		/* 820E5E2Ch case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E5E2Ch case    3:*/		return 0x820E5E30;
		  /* 820E5E30h */ case    4:  		/* bc 12, CR0_LT, -160 */
		/* 820E5E30h case    4:*/		if ( regs.CR[0].lt ) { return 0x820E5D90;  }
		/* 820E5E30h case    4:*/		return 0x820E5E34;
		  /* 820E5E34h */ case    5:  		/* lwz R11, <#[R23 + 260]> */
		/* 820E5E34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000104) );
		/* 820E5E34h case    5:*/		return 0x820E5E38;
		  /* 820E5E38h */ case    6:  		/* rlwinm R31, R21, 2, 0, 29 */
		/* 820E5E38h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R21);
		/* 820E5E38h case    6:*/		return 0x820E5E3C;
		  /* 820E5E3Ch */ case    7:  		/* lwz R3, <#[R24 + 16]> */
		/* 820E5E3Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x00000010) );
		/* 820E5E3Ch case    7:*/		return 0x820E5E40;
		  /* 820E5E40h */ case    8:  		/* mr R5, R31 */
		/* 820E5E40h case    8:*/		regs.R5 = regs.R31;
		/* 820E5E40h case    8:*/		return 0x820E5E44;
		  /* 820E5E44h */ case    9:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E5E44h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E5E44h case    9:*/		return 0x820E5E48;
		  /* 820E5E48h */ case   10:  		/* bl -345240 */
		/* 820E5E48h case   10:*/		regs.LR = 0x820E5E4C; return 0x820919B0;
		/* 820E5E48h case   10:*/		return 0x820E5E4C;
		  /* 820E5E4Ch */ case   11:  		/* addi R11, R1, 128 */
		/* 820E5E4Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 820E5E4Ch case   11:*/		return 0x820E5E50;
		  /* 820E5E50h */ case   12:  		/* lwz R3, <#[R24 + 8]> */
		/* 820E5E50h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x00000008) );
		/* 820E5E50h case   12:*/		return 0x820E5E54;
		  /* 820E5E54h */ case   13:  		/* rlwinm R30, R20, 4, 0, 27 */
		/* 820E5E54h case   13:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R30,regs.R20);
		/* 820E5E54h case   13:*/		return 0x820E5E58;
		  /* 820E5E58h */ case   14:  		/* mr R5, R31 */
		/* 820E5E58h case   14:*/		regs.R5 = regs.R31;
		/* 820E5E58h case   14:*/		return 0x820E5E5C;
		  /* 820E5E5Ch */ case   15:  		/* add R4, R30, R11 */
		/* 820E5E5Ch case   15:*/		cpu::op::add<0>(regs,&regs.R4,regs.R30,regs.R11);
		/* 820E5E5Ch case   15:*/		return 0x820E5E60;
		  /* 820E5E60h */ case   16:  		/* bl -345264 */
		/* 820E5E60h case   16:*/		regs.LR = 0x820E5E64; return 0x820919B0;
		/* 820E5E60h case   16:*/		return 0x820E5E64;
		  /* 820E5E64h */ case   17:  		/* lwz R11, <#[R24 + 8]> */
		/* 820E5E64h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 820E5E64h case   17:*/		return 0x820E5E68;
		  /* 820E5E68h */ case   18:  		/* addi R10, R1, 144 */
		/* 820E5E68h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 820E5E68h case   18:*/		return 0x820E5E6C;
		  /* 820E5E6Ch */ case   19:  		/* mr R5, R31 */
		/* 820E5E6Ch case   19:*/		regs.R5 = regs.R31;
		/* 820E5E6Ch case   19:*/		return 0x820E5E70;
		  /* 820E5E70h */ case   20:  		/* subf R4, R30, R10 */
		/* 820E5E70h case   20:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R30,regs.R10);
		/* 820E5E70h case   20:*/		return 0x820E5E74;
		  /* 820E5E74h */ case   21:  		/* add R3, R31, R11 */
		/* 820E5E74h case   21:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 820E5E74h case   21:*/		return 0x820E5E78;
		  /* 820E5E78h */ case   22:  		/* bl -345288 */
		/* 820E5E78h case   22:*/		regs.LR = 0x820E5E7C; return 0x820919B0;
		/* 820E5E78h case   22:*/		return 0x820E5E7C;
		  /* 820E5E7Ch */ case   23:  		/* lwz R11, <#[R24 + 8]> */
		/* 820E5E7Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 820E5E7Ch case   23:*/		return 0x820E5E80;
		  /* 820E5E80h */ case   24:  		/* lwz R10, <#[R24 + 16]> */
		/* 820E5E80h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000010) );
		/* 820E5E80h case   24:*/		return 0x820E5E84;
		  /* 820E5E84h */ case   25:  		/* lwz R9, <#[R23 + 20]> */
		/* 820E5E84h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000014) );
		/* 820E5E84h case   25:*/		return 0x820E5E88;
		  /* 820E5E88h */ case   26:  		/* lwz R8, <#[R11]> */
		/* 820E5E88h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E5E88h case   26:*/		return 0x820E5E8C;
		  /* 820E5E8Ch */ case   27:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E5E8Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E5E8Ch case   27:*/		return 0x820E5E90;
		  /* 820E5E90h */ case   28:  		/* lwz R10, <#[R10]> */
		/* 820E5E90h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E5E90h case   28:*/		return 0x820E5E94;
		  /* 820E5E94h */ case   29:  		/* lwzx R11, <#[R31 + R11]> */
		/* 820E5E94h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 820E5E94h case   29:*/		return 0x820E5E98;
		  /* 820E5E98h */ case   30:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E5E98h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E5E98h case   30:*/		return 0x820E5E9C;
		  /* 820E5E9Ch */ case   31:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 820E5E9Ch case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 820E5E9Ch case   31:*/		return 0x820E5EA0;
		  /* 820E5EA0h */ case   32:  		/* lwzx R11, <#[R8 + R9]> */
		/* 820E5EA0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E5EA0h case   32:*/		return 0x820E5EA4;
		  /* 820E5EA4h */ case   33:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E5EA4h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E5EA4h case   33:*/		return 0x820E5EA8;
		  /* 820E5EA8h */ case   34:  		/* lwzx R8, <#[R7 + R9]> */
		/* 820E5EA8h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 820E5EA8h case   34:*/		return 0x820E5EAC;
		  /* 820E5EACh */ case   35:  		/* lwz R7, <#[R11 + 4]> */
		/* 820E5EACh case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820E5EACh case   35:*/		return 0x820E5EB0;
		  /* 820E5EB0h */ case   36:  		/* lwz R9, <#[R10 + 4]> */
		/* 820E5EB0h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820E5EB0h case   36:*/		return 0x820E5EB4;
		  /* 820E5EB4h */ case   37:  		/* cmplw CR6, R9, R7 */
		/* 820E5EB4h case   37:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 820E5EB4h case   37:*/		return 0x820E5EB8;
		  /* 820E5EB8h */ case   38:  		/* bc 4, CR6_EQ, 20 */
		/* 820E5EB8h case   38:*/		if ( !regs.CR[6].eq ) { return 0x820E5ECC;  }
		/* 820E5EB8h case   38:*/		return 0x820E5EBC;
		  /* 820E5EBCh */ case   39:  		/* lwz R7, <#[R10 + 12]> */
		/* 820E5EBCh case   39:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E5EBCh case   39:*/		return 0x820E5EC0;
		  /* 820E5EC0h */ case   40:  		/* lwz R11, <#[R11 + 12]> */
		/* 820E5EC0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E5EC0h case   40:*/		return 0x820E5EC4;
		  /* 820E5EC4h */ case   41:  		/* cmplw CR6, R7, R11 */
		/* 820E5EC4h case   41:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 820E5EC4h case   41:*/		return 0x820E5EC8;
		  /* 820E5EC8h */ case   42:  		/* bc 12, CR6_EQ, -316 */
		/* 820E5EC8h case   42:*/		if ( regs.CR[6].eq ) { return 0x820E5D8C;  }
		/* 820E5EC8h case   42:*/		return 0x820E5ECC;
	}
	return 0x820E5ECC;
} // Block from 820E5E20h-820E5ECCh (43 instructions)

//////////////////////////////////////////////////////
// Block at 820E5ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5ECC);
		  /* 820E5ECCh */ case    0:  		/* lwz R11, <#[R8 + 4]> */
		/* 820E5ECCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 820E5ECCh case    0:*/		return 0x820E5ED0;
		  /* 820E5ED0h */ case    1:  		/* cmplw CR6, R9, R11 */
		/* 820E5ED0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 820E5ED0h case    1:*/		return 0x820E5ED4;
		  /* 820E5ED4h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820E5ED4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E5EE8;  }
		/* 820E5ED4h case    2:*/		return 0x820E5ED8;
		  /* 820E5ED8h */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 820E5ED8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E5ED8h case    3:*/		return 0x820E5EDC;
		  /* 820E5EDCh */ case    4:  		/* lwz R10, <#[R8 + 12]> */
		/* 820E5EDCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 820E5EDCh case    4:*/		return 0x820E5EE0;
		  /* 820E5EE0h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 820E5EE0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E5EE0h case    5:*/		return 0x820E5EE4;
		  /* 820E5EE4h */ case    6:  		/* bc 12, CR6_EQ, -344 */
		/* 820E5EE4h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E5D8C;  }
		/* 820E5EE4h case    6:*/		return 0x820E5EE8;
	}
	return 0x820E5EE8;
} // Block from 820E5ECCh-820E5EE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E5EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5EE8);
		  /* 820E5EE8h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 820E5EE8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820E5EE8h case    0:*/		return 0x820E5EEC;
		  /* 820E5EECh */ case    1:  		/* bc 12, CR6_EQ, -896 */
		/* 820E5EECh case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5B6C;  }
		/* 820E5EECh case    1:*/		return 0x820E5EF0;
		  /* 820E5EF0h */ case    2:  		/* lwz R31, <#[R1 + 96]> */
		/* 820E5EF0h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E5EF0h case    2:*/		return 0x820E5EF4;
		  /* 820E5EF4h */ case    3:  		/* stw R24, <#[R18]> */
		/* 820E5EF4h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R18 + 0x00000000) );
		/* 820E5EF4h case    3:*/		return 0x820E5EF8;
		  /* 820E5EF8h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 820E5EF8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E5EF8h case    4:*/		return 0x820E5EFC;
		  /* 820E5EFCh */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 820E5EFCh case    5:*/		if ( regs.CR[6].eq ) { return 0x820E5F10;  }
		/* 820E5EFCh case    5:*/		return 0x820E5F00;
		  /* 820E5F00h */ case    6:  		/* addi R4, R1, 288 */
		/* 820E5F00h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x120);
		/* 820E5F00h case    6:*/		return 0x820E5F04;
		  /* 820E5F04h */ case    7:  		/* mr R3, R17 */
		/* 820E5F04h case    7:*/		regs.R3 = regs.R17;
		/* 820E5F04h case    7:*/		return 0x820E5F08;
		  /* 820E5F08h */ case    8:  		/* rlwinm R5, R31, 2, 0, 29 */
		/* 820E5F08h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R31);
		/* 820E5F08h case    8:*/		return 0x820E5F0C;
		  /* 820E5F0Ch */ case    9:  		/* bl -344276 */
		/* 820E5F0Ch case    9:*/		regs.LR = 0x820E5F10; return 0x82091E38;
		/* 820E5F0Ch case    9:*/		return 0x820E5F10;
	}
	return 0x820E5F10;
} // Block from 820E5EE8h-820E5F10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E5F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5F10);
		  /* 820E5F10h */ case    0:  		/* stw R31, <#[R16]> */
		/* 820E5F10h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R16 + 0x00000000) );
		/* 820E5F10h case    0:*/		return 0x820E5F14;
		  /* 820E5F14h */ case    1:  		/* b -364 */
		/* 820E5F14h case    1:*/		return 0x820E5DA8;
		/* 820E5F14h case    1:*/		return 0x820E5F18;
	}
	return 0x820E5F18;
} // Block from 820E5F10h-820E5F18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E5F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5F18);
		  /* 820E5F18h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 820E5F18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820E5F18h case    0:*/		return 0x820E5F1C;
		  /* 820E5F1Ch */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 820E5F1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E5F50;  }
		/* 820E5F1Ch case    1:*/		return 0x820E5F20;
	}
	return 0x820E5F20;
} // Block from 820E5F18h-820E5F20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E5F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5F20);
		  /* 820E5F20h */ case    0:  		/* li R11, 1803 */
		/* 820E5F20h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x70B);
		/* 820E5F20h case    0:*/		return 0x820E5F24;
		  /* 820E5F24h */ case    1:  		/* mr R4, R21 */
		/* 820E5F24h case    1:*/		regs.R4 = regs.R21;
		/* 820E5F24h case    1:*/		return 0x820E5F28;
		  /* 820E5F28h */ case    2:  		/* li R7, 0 */
		/* 820E5F28h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E5F28h case    2:*/		return 0x820E5F2C;
		  /* 820E5F2Ch */ case    3:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 820E5F2Ch case    3:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 820E5F2Ch case    3:*/		return 0x820E5F30;
		  /* 820E5F30h */ case    4:  		/* mr R6, R21 */
		/* 820E5F30h case    4:*/		regs.R6 = regs.R21;
		/* 820E5F30h case    4:*/		return 0x820E5F34;
		  /* 820E5F34h */ case    5:  		/* rlwinm R5, R21, 1, 0, 30 */
		/* 820E5F34h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R21);
		/* 820E5F34h case    5:*/		return 0x820E5F38;
		  /* 820E5F38h */ case    6:  		/* mr R3, R24 */
		/* 820E5F38h case    6:*/		regs.R3 = regs.R24;
		/* 820E5F38h case    6:*/		return 0x820E5F3C;
		  /* 820E5F3Ch */ case    7:  		/* bl 91892 */
		/* 820E5F3Ch case    7:*/		regs.LR = 0x820E5F40; return 0x820FC630;
		/* 820E5F3Ch case    7:*/		return 0x820E5F40;
		  /* 820E5F40h */ case    8:  		/* or. R29, R3, R3 */
		/* 820E5F40h case    8:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E5F40h case    8:*/		return 0x820E5F44;
		  /* 820E5F44h */ case    9:  		/* bc 12, CR0_LT, -436 */
		/* 820E5F44h case    9:*/		if ( regs.CR[0].lt ) { return 0x820E5D90;  }
		/* 820E5F44h case    9:*/		return 0x820E5F48;
		  /* 820E5F48h */ case   10:  		/* cmpwi CR6, R19, 0 */
		/* 820E5F48h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000000);
		/* 820E5F48h case   10:*/		return 0x820E5F4C;
		  /* 820E5F4Ch */ case   11:  		/* bc 4, CR6_EQ, -348 */
		/* 820E5F4Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E5DF0;  }
		/* 820E5F4Ch case   11:*/		return 0x820E5F50;
	}
	return 0x820E5F50;
} // Block from 820E5F20h-820E5F50h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E5F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5F50);
		  /* 820E5F50h */ case    0:  		/* cmplwi CR6, R20, 1 */
		/* 820E5F50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000001);
		/* 820E5F50h case    0:*/		return 0x820E5F54;
		  /* 820E5F54h */ case    1:  		/* bc 12, CR6_EQ, -348 */
		/* 820E5F54h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E5DF8;  }
		/* 820E5F54h case    1:*/		return 0x820E5F58;
		  /* 820E5F58h */ case    2:  		/* b -312 */
		/* 820E5F58h case    2:*/		return 0x820E5E20;
		/* 820E5F58h case    2:*/		return 0x820E5F5C;
		  /* 820E5F5Ch */ case    3:  		/* nop */
		/* 820E5F5Ch case    3:*/		cpu::op::nop();
		/* 820E5F5Ch case    3:*/		return 0x820E5F60;
	}
	return 0x820E5F60;
} // Block from 820E5F50h-820E5F60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E5F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5F60);
		  /* 820E5F60h */ case    0:  		/* mfspr R12, LR */
		/* 820E5F60h case    0:*/		regs.R12 = regs.LR;
		/* 820E5F60h case    0:*/		return 0x820E5F64;
		  /* 820E5F64h */ case    1:  		/* bl -347428 */
		/* 820E5F64h case    1:*/		regs.LR = 0x820E5F68; return 0x82091240;
		/* 820E5F64h case    1:*/		return 0x820E5F68;
		  /* 820E5F68h */ case    2:  		/* stwu R1, <#[R1 - 448]> */
		/* 820E5F68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE40);
		/* 820E5F68h case    2:*/		return 0x820E5F6C;
		  /* 820E5F6Ch */ case    3:  		/* mr R25, R4 */
		/* 820E5F6Ch case    3:*/		regs.R25 = regs.R4;
		/* 820E5F6Ch case    3:*/		return 0x820E5F70;
		  /* 820E5F70h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E5F70h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E5F70h case    4:*/		return 0x820E5F74;
		  /* 820E5F74h */ case    5:  		/* lis R11, -32254 */
		/* 820E5F74h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E5F74h case    5:*/		return 0x820E5F78;
		  /* 820E5F78h */ case    6:  		/* cntlzw R10, R25 */
		/* 820E5F78h case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R25);
		/* 820E5F78h case    6:*/		return 0x820E5F7C;
		  /* 820E5F7Ch */ case    7:  		/* li R8, 3 */
		/* 820E5F7Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E5F7Ch case    7:*/		return 0x820E5F80;
		  /* 820E5F80h */ case    8:  		/* li R7, 1 */
		/* 820E5F80h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820E5F80h case    8:*/		return 0x820E5F84;
		  /* 820E5F84h */ case    9:  		/* lwz R9, <#[R4]> */
		/* 820E5F84h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 820E5F84h case    9:*/		return 0x820E5F88;
		  /* 820E5F88h */ case   10:  		/* addi R31, R11, -24328 */
		/* 820E5F88h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFA0F8);
		/* 820E5F88h case   10:*/		return 0x820E5F8C;
		  /* 820E5F8Ch */ case   11:  		/* li R24, 0 */
		/* 820E5F8Ch case   11:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820E5F8Ch case   11:*/		return 0x820E5F90;
		  /* 820E5F90h */ case   12:  		/* stw R7, <#[R1 + 116]> */
		/* 820E5F90h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000074) );
		/* 820E5F90h case   12:*/		return 0x820E5F94;
		  /* 820E5F94h */ case   13:  		/* rlwinm R28, R9, 0, 12, 31 */
		/* 820E5F94h case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R9);
		/* 820E5F94h case   13:*/		return 0x820E5F98;
		  /* 820E5F98h */ case   14:  		/* stw R8, <#[R1 + 124]> */
		/* 820E5F98h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E5F98h case   14:*/		return 0x820E5F9C;
		  /* 820E5F9Ch */ case   15:  		/* rlwinm R29, R10, 27, 31, 31 */
		/* 820E5F9Ch case   15:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R10);
		/* 820E5F9Ch case   15:*/		return 0x820E5FA0;
		  /* 820E5FA0h */ case   16:  		/* stw R24, <#[R1 + 96]> */
		/* 820E5FA0h case   16:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000060) );
		/* 820E5FA0h case   16:*/		return 0x820E5FA4;
		  /* 820E5FA4h */ case   17:  		/* mr R23, R5 */
		/* 820E5FA4h case   17:*/		regs.R23 = regs.R5;
		/* 820E5FA4h case   17:*/		return 0x820E5FA8;
		  /* 820E5FA8h */ case   18:  		/* stw R24, <#[R1 + 112]> */
		/* 820E5FA8h case   18:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000070) );
		/* 820E5FA8h case   18:*/		return 0x820E5FAC;
		  /* 820E5FACh */ case   19:  		/* mr R22, R6 */
		/* 820E5FACh case   19:*/		regs.R22 = regs.R6;
		/* 820E5FACh case   19:*/		return 0x820E5FB0;
		  /* 820E5FB0h */ case   20:  		/* stw R29, <#[R1 + 84]> */
		/* 820E5FB0h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E5FB0h case   20:*/		return 0x820E5FB4;
		  /* 820E5FB4h */ case   21:  		/* li R11, 2 */
		/* 820E5FB4h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E5FB4h case   21:*/		return 0x820E5FB8;
	}
	return 0x820E5FB8;
} // Block from 820E5F60h-820E5FB8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E5FB8h
// Function '?RemapSamplerMove@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E5FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E5FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E5FB8);
		  /* 820E5FB8h */ case    0:  		/* addi R5, R31, -128 */
		/* 820E5FB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0xFFFFFF80);
		/* 820E5FB8h case    0:*/		return 0x820E5FBC;
		  /* 820E5FBCh */ case    1:  		/* addi R9, R1, 112 */
		/* 820E5FBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E5FBCh case    1:*/		return 0x820E5FC0;
		  /* 820E5FC0h */ case    2:  		/* stw R11, <#[R1 + 120]> */
		/* 820E5FC0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E5FC0h case    2:*/		return 0x820E5FC4;
		  /* 820E5FC4h */ case    3:  		/* addi R8, R1, 128 */
		/* 820E5FC4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820E5FC4h case    3:*/		return 0x820E5FC8;
		  /* 820E5FC8h */ case    4:  		/* addi R7, R1, 96 */
		/* 820E5FC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E5FC8h case    4:*/		return 0x820E5FCC;
		  /* 820E5FCCh */ case    5:  		/* addi R6, R1, 288 */
		/* 820E5FCCh case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820E5FCCh case    5:*/		return 0x820E5FD0;
		  /* 820E5FD0h */ case    6:  		/* mr R10, R28 */
		/* 820E5FD0h case    6:*/		regs.R10 = regs.R28;
		/* 820E5FD0h case    6:*/		return 0x820E5FD4;
		  /* 820E5FD4h */ case    7:  		/* mr R30, R3 */
		/* 820E5FD4h case    7:*/		regs.R30 = regs.R3;
		/* 820E5FD4h case    7:*/		return 0x820E5FD8;
		  /* 820E5FD8h */ case    8:  		/* mr R27, R24 */
		/* 820E5FD8h case    8:*/		regs.R27 = regs.R24;
		/* 820E5FD8h case    8:*/		return 0x820E5FDC;
		  /* 820E5FDCh */ case    9:  		/* mr R26, R24 */
		/* 820E5FDCh case    9:*/		regs.R26 = regs.R24;
		/* 820E5FDCh case    9:*/		return 0x820E5FE0;
		  /* 820E5FE0h */ case   10:  		/* bl -9056 */
		/* 820E5FE0h case   10:*/		regs.LR = 0x820E5FE4; return 0x820E3C80;
		/* 820E5FE0h case   10:*/		return 0x820E5FE4;
		  /* 820E5FE4h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820E5FE4h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E5FE4h case   11:*/		return 0x820E5FE8;
		  /* 820E5FE8h */ case   12:  		/* bc 12, CR0_EQ, 56 */
		/* 820E5FE8h case   12:*/		if ( regs.CR[0].eq ) { return 0x820E6020;  }
		/* 820E5FE8h case   12:*/		return 0x820E5FEC;
		  /* 820E5FECh */ case   13:  		/* mr R5, R31 */
		/* 820E5FECh case   13:*/		regs.R5 = regs.R31;
		/* 820E5FECh case   13:*/		return 0x820E5FF0;
		  /* 820E5FF0h */ case   14:  		/* lwz R4, <#[R30 + 260]> */
		/* 820E5FF0h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 820E5FF0h case   14:*/		return 0x820E5FF4;
		  /* 820E5FF4h */ case   15:  		/* mr R10, R28 */
		/* 820E5FF4h case   15:*/		regs.R10 = regs.R28;
		/* 820E5FF4h case   15:*/		return 0x820E5FF8;
		  /* 820E5FF8h */ case   16:  		/* stw R29, <#[R1 + 84]> */
		/* 820E5FF8h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E5FF8h case   16:*/		return 0x820E5FFC;
		  /* 820E5FFCh */ case   17:  		/* addi R9, R1, 112 */
		/* 820E5FFCh case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E5FFCh case   17:*/		return 0x820E6000;
		  /* 820E6000h */ case   18:  		/* addi R8, R1, 128 */
		/* 820E6000h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820E6000h case   18:*/		return 0x820E6004;
		  /* 820E6004h */ case   19:  		/* addi R7, R1, 96 */
		/* 820E6004h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E6004h case   19:*/		return 0x820E6008;
		  /* 820E6008h */ case   20:  		/* addi R6, R1, 288 */
		/* 820E6008h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820E6008h case   20:*/		return 0x820E600C;
		  /* 820E600Ch */ case   21:  		/* mr R3, R30 */
		/* 820E600Ch case   21:*/		regs.R3 = regs.R30;
		/* 820E600Ch case   21:*/		return 0x820E6010;
		  /* 820E6010h */ case   22:  		/* li R26, 1 */
		/* 820E6010h case   22:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820E6010h case   22:*/		return 0x820E6014;
		  /* 820E6014h */ case   23:  		/* bl -9108 */
		/* 820E6014h case   23:*/		regs.LR = 0x820E6018; return 0x820E3C80;
		/* 820E6014h case   23:*/		return 0x820E6018;
		  /* 820E6018h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820E6018h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E6018h case   24:*/		return 0x820E601C;
		  /* 820E601Ch */ case   25:  		/* bc 4, CR0_EQ, 364 */
		/* 820E601Ch case   25:*/		if ( !regs.CR[0].eq ) { return 0x820E6188;  }
		/* 820E601Ch case   25:*/		return 0x820E6020;
	}
	return 0x820E6020;
} // Block from 820E5FB8h-820E6020h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820E6020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6020);
		  /* 820E6020h */ case    0:  		/* lis R11, -32254 */
		/* 820E6020h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E6020h case    0:*/		return 0x820E6024;
		  /* 820E6024h */ case    1:  		/* mr R3, R24 */
		/* 820E6024h case    1:*/		regs.R3 = regs.R24;
		/* 820E6024h case    1:*/		return 0x820E6028;
		  /* 820E6028h */ case    2:  		/* lfd FR0, <#[R11 - 18352]> */
		/* 820E6028h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFB850) );
		/* 820E6028h case    2:*/		return 0x820E602C;
		  /* 820E602Ch */ case    3:  		/* mr R4, R24 */
		/* 820E602Ch case    3:*/		regs.R4 = regs.R24;
		/* 820E602Ch case    3:*/		return 0x820E6030;
		  /* 820E6030h */ case    4:  		/* mr R11, R24 */
		/* 820E6030h case    4:*/		regs.R11 = regs.R24;
		/* 820E6030h case    4:*/		return 0x820E6034;
		  /* 820E6034h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 820E6034h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820E6034h case    5:*/		return 0x820E6038;
		  /* 820E6038h */ case    6:  		/* bc 12, CR6_EQ, 272 */
		/* 820E6038h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E6148;  }
		/* 820E6038h case    6:*/		return 0x820E603C;
		  /* 820E603Ch */ case    7:  		/* lwz R8, <#[R30 + 20]> */
		/* 820E603Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 820E603Ch case    7:*/		return 0x820E6040;
		  /* 820E6040h */ case    8:  		/* addi R5, R1, 128 */
		/* 820E6040h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820E6040h case    8:*/		return 0x820E6044;
		  /* 820E6044h */ case    9:  		/* add R10, R3, R11 */
		/* 820E6044h case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R3,regs.R11);
		/* 820E6044h case    9:*/		return 0x820E6048;
		  /* 820E6048h */ case   10:  		/* lwz R9, <#[R5]> */
		/* 820E6048h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 820E6048h case   10:*/		return 0x820E604C;
		  /* 820E604Ch */ case   11:  		/* addi R7, R1, 144 */
		/* 820E604Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x90);
		/* 820E604Ch case   11:*/		return 0x820E6050;
		  /* 820E6050h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6050h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6050h case   12:*/		return 0x820E6054;
		  /* 820E6054h */ case   13:  		/* add R6, R4, R11 */
		/* 820E6054h case   13:*/		cpu::op::add<0>(regs,&regs.R6,regs.R4,regs.R11);
		/* 820E6054h case   13:*/		return 0x820E6058;
		  /* 820E6058h */ case   14:  		/* addi R31, R1, 176 */
		/* 820E6058h case   14:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xB0);
		/* 820E6058h case   14:*/		return 0x820E605C;
		  /* 820E605Ch */ case   15:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820E605Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820E605Ch case   15:*/		return 0x820E6060;
		  /* 820E6060h */ case   16:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E6060h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E6060h case   16:*/		return 0x820E6064;
		  /* 820E6064h */ case   17:  		/* lwzx R10, <#[R10 + R7]> */
		/* 820E6064h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 820E6064h case   17:*/		return 0x820E6068;
	}
	return 0x820E6068;
} // Block from 820E6020h-820E6068h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E6068h
// Function '?MatchMinMax@CShaderProgram@D3DXShader@@IAAJPAPAVCInstruction@2@0PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6068);
		  /* 820E6068h */ case    0:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6068h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6068h case    0:*/		return 0x820E606C;
		  /* 820E606Ch */ case    1:  		/* lwzx R6, <#[R6 + R31]> */
		/* 820E606Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R31 + 0x00000000) );
		/* 820E606Ch case    1:*/		return 0x820E6070;
		  /* 820E6070h */ case    2:  		/* lwzx R7, <#[R9 + R8]> */
		/* 820E6070h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820E6070h case    2:*/		return 0x820E6074;
		  /* 820E6074h */ case    3:  		/* rlwinm R9, R6, 2, 0, 29 */
		/* 820E6074h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R6);
		/* 820E6074h case    3:*/		return 0x820E6078;
		  /* 820E6078h */ case    4:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820E6078h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E6078h case    4:*/		return 0x820E607C;
		  /* 820E607Ch */ case    5:  		/* lwzx R6, <#[R9 + R8]> */
		/* 820E607Ch case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820E607Ch case    5:*/		return 0x820E6080;
		  /* 820E6080h */ case    6:  		/* lwz R9, <#[R10 + 8]> */
		/* 820E6080h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 820E6080h case    6:*/		return 0x820E6084;
		  /* 820E6084h */ case    7:  		/* cmpwi CR6, R9, -1 */
		/* 820E6084h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E6084h case    7:*/		return 0x820E6088;
		  /* 820E6088h */ case    8:  		/* bc 4, CR6_EQ, 192 */
		/* 820E6088h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820E6148;  }
		/* 820E6088h case    8:*/		return 0x820E608C;
		  /* 820E608Ch */ case    9:  		/* lwz R9, <#[R7 + 8]> */
		/* 820E608Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000008) );
		/* 820E608Ch case    9:*/		return 0x820E6090;
		  /* 820E6090h */ case   10:  		/* cmpwi CR6, R9, -1 */
		/* 820E6090h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E6090h case   10:*/		return 0x820E6094;
		  /* 820E6094h */ case   11:  		/* bc 4, CR6_EQ, 180 */
		/* 820E6094h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E6148;  }
		/* 820E6094h case   11:*/		return 0x820E6098;
		  /* 820E6098h */ case   12:  		/* lwz R9, <#[R6 + 8]> */
		/* 820E6098h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000008) );
		/* 820E6098h case   12:*/		return 0x820E609C;
		  /* 820E609Ch */ case   13:  		/* cmpwi CR6, R9, -1 */
		/* 820E609Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E609Ch case   13:*/		return 0x820E60A0;
		  /* 820E60A0h */ case   14:  		/* bc 4, CR6_EQ, 168 */
		/* 820E60A0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E6148;  }
		/* 820E60A0h case   14:*/		return 0x820E60A4;
		  /* 820E60A4h */ case   15:  		/* lwz R31, <#[R10 + 4]> */
		/* 820E60A4h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 820E60A4h case   15:*/		return 0x820E60A8;
		  /* 820E60A8h */ case   16:  		/* lwz R9, <#[R30 + 16]> */
		/* 820E60A8h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 820E60A8h case   16:*/		return 0x820E60AC;
		  /* 820E60ACh */ case   17:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 820E60ACh case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 820E60ACh case   17:*/		return 0x820E60B0;
		  /* 820E60B0h */ case   18:  		/* lwzx R31, <#[R31 + R9]> */
		/* 820E60B0h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 820E60B0h case   18:*/		return 0x820E60B4;
		  /* 820E60B4h */ case   19:  		/* lwz R31, <#[R31 + 4]> */
		/* 820E60B4h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 820E60B4h case   19:*/		return 0x820E60B8;
		  /* 820E60B8h */ case   20:  		/* rlwinm. R31, R31, 0, 23, 23 */
		/* 820E60B8h case   20:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R31,regs.R31);
		/* 820E60B8h case   20:*/		return 0x820E60BC;
		  /* 820E60BCh */ case   21:  		/* bc 12, CR0_EQ, 140 */
		/* 820E60BCh case   21:*/		if ( regs.CR[0].eq ) { return 0x820E6148;  }
		/* 820E60BCh case   21:*/		return 0x820E60C0;
		  /* 820E60C0h */ case   22:  		/* lwz R31, <#[R6 + 4]> */
		/* 820E60C0h case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R6 + 0x00000004) );
		/* 820E60C0h case   22:*/		return 0x820E60C4;
		  /* 820E60C4h */ case   23:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 820E60C4h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 820E60C4h case   23:*/		return 0x820E60C8;
		  /* 820E60C8h */ case   24:  		/* lwzx R31, <#[R31 + R9]> */
		/* 820E60C8h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 820E60C8h case   24:*/		return 0x820E60CC;
		  /* 820E60CCh */ case   25:  		/* lwz R31, <#[R31 + 4]> */
		/* 820E60CCh case   25:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 820E60CCh case   25:*/		return 0x820E60D0;
		  /* 820E60D0h */ case   26:  		/* rlwinm. R31, R31, 0, 23, 23 */
		/* 820E60D0h case   26:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R31,regs.R31);
		/* 820E60D0h case   26:*/		return 0x820E60D4;
		  /* 820E60D4h */ case   27:  		/* bc 12, CR0_EQ, 116 */
		/* 820E60D4h case   27:*/		if ( regs.CR[0].eq ) { return 0x820E6148;  }
		/* 820E60D4h case   27:*/		return 0x820E60D8;
		  /* 820E60D8h */ case   28:  		/* lwz R31, <#[R7 + 4]> */
		/* 820E60D8h case   28:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R7 + 0x00000004) );
		/* 820E60D8h case   28:*/		return 0x820E60DC;
		  /* 820E60DCh */ case   29:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 820E60DCh case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 820E60DCh case   29:*/		return 0x820E60E0;
		  /* 820E60E0h */ case   30:  		/* lwzx R9, <#[R31 + R9]> */
		/* 820E60E0h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 820E60E0h case   30:*/		return 0x820E60E4;
		  /* 820E60E4h */ case   31:  		/* lwz R9, <#[R9 + 4]> */
		/* 820E60E4h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 820E60E4h case   31:*/		return 0x820E60E8;
		  /* 820E60E8h */ case   32:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 820E60E8h case   32:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 820E60E8h case   32:*/		return 0x820E60EC;
		  /* 820E60ECh */ case   33:  		/* bc 12, CR0_EQ, 92 */
		/* 820E60ECh case   33:*/		if ( regs.CR[0].eq ) { return 0x820E6148;  }
		/* 820E60ECh case   33:*/		return 0x820E60F0;
		  /* 820E60F0h */ case   34:  		/* lfd FR12, <#[R10 + 32]> */
		/* 820E60F0h case   34:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000020) );
		/* 820E60F0h case   34:*/		return 0x820E60F4;
		  /* 820E60F4h */ case   35:  		/* lfd FR13, <#[R6 + 32]> */
		/* 820E60F4h case   35:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R6 + 0x00000020) );
		/* 820E60F4h case   35:*/		return 0x820E60F8;
		  /* 820E60F8h */ case   36:  		/* fsub FR13, FR13, FR12 */
		/* 820E60F8h case   36:*/		cpu::op::fsub<0>(regs,&regs.FR13,regs.FR13,regs.FR12);
		/* 820E60F8h case   36:*/		return 0x820E60FC;
		  /* 820E60FCh */ case   37:  		/* lfd FR12, <#[R7 + 32]> */
		/* 820E60FCh case   37:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R7 + 0x00000020) );
		/* 820E60FCh case   37:*/		return 0x820E6100;
		  /* 820E6100h */ case   38:  		/* fsub FR13, FR13, FR12 */
		/* 820E6100h case   38:*/		cpu::op::fsub<0>(regs,&regs.FR13,regs.FR13,regs.FR12);
		/* 820E6100h case   38:*/		return 0x820E6104;
		  /* 820E6104h */ case   39:  		/* fabs FR13, FR13 */
		/* 820E6104h case   39:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR13);
		/* 820E6104h case   39:*/		return 0x820E6108;
		  /* 820E6108h */ case   40:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E6108h case   40:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E6108h case   40:*/		return 0x820E610C;
		  /* 820E610Ch */ case   41:  		/* bc 12, CR6_GT, 60 */
		/* 820E610Ch case   41:*/		if ( regs.CR[6].gt ) { return 0x820E6148;  }
		/* 820E610Ch case   41:*/		return 0x820E6110;
		  /* 820E6110h */ case   42:  		/* subf R10, R3, R11 */
		/* 820E6110h case   42:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R3,regs.R11);
		/* 820E6110h case   42:*/		return 0x820E6114;
		  /* 820E6114h */ case   43:  		/* subf R9, R4, R11 */
		/* 820E6114h case   43:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R4,regs.R11);
		/* 820E6114h case   43:*/		return 0x820E6118;
		  /* 820E6118h */ case   44:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6118h case   44:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6118h case   44:*/		return 0x820E611C;
		  /* 820E611Ch */ case   45:  		/* addi R7, R1, 160 */
		/* 820E611Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820E611Ch case   45:*/		return 0x820E6120;
		  /* 820E6120h */ case   46:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E6120h case   46:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E6120h case   46:*/		return 0x820E6124;
		  /* 820E6124h */ case   47:  		/* addi R6, R1, 192 */
		/* 820E6124h case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 820E6124h case   47:*/		return 0x820E6128;
		  /* 820E6128h */ case   48:  		/* lwzx R10, <#[R10 + R7]> */
		/* 820E6128h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 820E6128h case   48:*/		return 0x820E612C;
		  /* 820E612Ch */ case   49:  		/* lwzx R9, <#[R9 + R6]> */
		/* 820E612Ch case   49:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 820E612Ch case   49:*/		return 0x820E6130;
		  /* 820E6130h */ case   50:  		/* cmplw CR6, R10, R9 */
		/* 820E6130h case   50:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E6130h case   50:*/		return 0x820E6134;
		  /* 820E6134h */ case   51:  		/* bc 4, CR6_EQ, 20 */
		/* 820E6134h case   51:*/		if ( !regs.CR[6].eq ) { return 0x820E6148;  }
		/* 820E6134h case   51:*/		return 0x820E6138;
		  /* 820E6138h */ case   52:  		/* addi R11, R11, 1 */
		/* 820E6138h case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E6138h case   52:*/		return 0x820E613C;
		  /* 820E613Ch */ case   53:  		/* addi R5, R5, 4 */
		/* 820E613Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 820E613Ch case   53:*/		return 0x820E6140;
		  /* 820E6140h */ case   54:  		/* cmplw CR6, R11, R28 */
		/* 820E6140h case   54:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 820E6140h case   54:*/		return 0x820E6144;
		  /* 820E6144h */ case   55:  		/* bc 12, CR6_LT, -256 */
		/* 820E6144h case   55:*/		if ( regs.CR[6].lt ) { return 0x820E6044;  }
		/* 820E6144h case   55:*/		return 0x820E6148;
	}
	return 0x820E6148;
} // Block from 820E6068h-820E6148h (56 instructions)

//////////////////////////////////////////////////////
// Block at 820E6148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6148);
		  /* 820E6148h */ case    0:  		/* cmplw CR6, R11, R28 */
		/* 820E6148h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 820E6148h case    0:*/		return 0x820E614C;
		  /* 820E614Ch */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 820E614Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6190;  }
		/* 820E614Ch case    1:*/		return 0x820E6150;
		  /* 820E6150h */ case    2:  		/* addi R4, R4, 4 */
		/* 820E6150h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 820E6150h case    2:*/		return 0x820E6154;
		  /* 820E6154h */ case    3:  		/* cmplwi CR6, R4, 8 */
		/* 820E6154h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000008);
		/* 820E6154h case    3:*/		return 0x820E6158;
		  /* 820E6158h */ case    4:  		/* bc 12, CR6_LT, -296 */
		/* 820E6158h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E6030;  }
		/* 820E6158h case    4:*/		return 0x820E615C;
		  /* 820E615Ch */ case    5:  		/* addi R3, R3, 4 */
		/* 820E615Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 820E615Ch case    5:*/		return 0x820E6160;
		  /* 820E6160h */ case    6:  		/* cmplwi CR6, R3, 8 */
		/* 820E6160h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000008);
		/* 820E6160h case    6:*/		return 0x820E6164;
		  /* 820E6164h */ case    7:  		/* bc 12, CR6_LT, -312 */
		/* 820E6164h case    7:*/		if ( regs.CR[6].lt ) { return 0x820E602C;  }
		/* 820E6164h case    7:*/		return 0x820E6168;
		  /* 820E6168h */ case    8:  		/* li R31, 1 */
		/* 820E6168h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 820E6168h case    8:*/		return 0x820E616C;
		  /* 820E616Ch */ case    9:  		/* cmplwi CR6, R27, 0 */
		/* 820E616Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820E616Ch case    9:*/		return 0x820E6170;
		  /* 820E6170h */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 820E6170h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E6184;  }
		/* 820E6170h case   10:*/		return 0x820E6174;
		  /* 820E6174h */ case   11:  		/* mr R3, R27 */
		/* 820E6174h case   11:*/		regs.R3 = regs.R27;
		/* 820E6174h case   11:*/		return 0x820E6178;
		  /* 820E6178h */ case   12:  		/* bl 1274440 */
		/* 820E6178h case   12:*/		regs.LR = 0x820E617C; return 0x8221D3C0;
		/* 820E6178h case   12:*/		return 0x820E617C;
		  /* 820E617Ch */ case   13:  		/* mr R3, R27 */
		/* 820E617Ch case   13:*/		regs.R3 = regs.R27;
		/* 820E617Ch case   13:*/		return 0x820E6180;
		  /* 820E6180h */ case   14:  		/* bl 91248 */
		/* 820E6180h case   14:*/		regs.LR = 0x820E6184; return 0x820FC5F0;
		/* 820E6180h case   14:*/		return 0x820E6184;
	}
	return 0x820E6184;
} // Block from 820E6148h-820E6184h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E6184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6184);
		  /* 820E6184h */ case    0:  		/* mr R3, R31 */
		/* 820E6184h case    0:*/		regs.R3 = regs.R31;
		/* 820E6184h case    0:*/		return 0x820E6188;
	}
	return 0x820E6188;
} // Block from 820E6184h-820E6188h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E6188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6188);
		  /* 820E6188h */ case    0:  		/* addi R1, R1, 448 */
		/* 820E6188h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1C0);
		/* 820E6188h case    0:*/		return 0x820E618C;
		  /* 820E618Ch */ case    1:  		/* b -347900 */
		/* 820E618Ch case    1:*/		return 0x82091290;
		/* 820E618Ch case    1:*/		return 0x820E6190;
	}
	return 0x820E6190;
} // Block from 820E6188h-820E6190h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E6190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6190);
		  /* 820E6190h */ case    0:  		/* li R3, 116 */
		/* 820E6190h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E6190h case    0:*/		return 0x820E6194;
		  /* 820E6194h */ case    1:  		/* bl 91140 */
		/* 820E6194h case    1:*/		regs.LR = 0x820E6198; return 0x820FC598;
		/* 820E6194h case    1:*/		return 0x820E6198;
		  /* 820E6198h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E6198h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E6198h case    2:*/		return 0x820E619C;
		  /* 820E619Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 820E619Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820E61AC;  }
		/* 820E619Ch case    3:*/		return 0x820E61A0;
		  /* 820E61A0h */ case    4:  		/* bl 89344 */
		/* 820E61A0h case    4:*/		regs.LR = 0x820E61A4; return 0x820FBEA0;
		/* 820E61A0h case    4:*/		return 0x820E61A4;
		  /* 820E61A4h */ case    5:  		/* mr R27, R3 */
		/* 820E61A4h case    5:*/		regs.R27 = regs.R3;
		/* 820E61A4h case    5:*/		return 0x820E61A8;
		  /* 820E61A8h */ case    6:  		/* b 8 */
		/* 820E61A8h case    6:*/		return 0x820E61B0;
		/* 820E61A8h case    6:*/		return 0x820E61AC;
	}
	return 0x820E61AC;
} // Block from 820E6190h-820E61ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E61ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E61AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E61AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E61AC);
		  /* 820E61ACh */ case    0:  		/* mr R27, R24 */
		/* 820E61ACh case    0:*/		regs.R27 = regs.R24;
		/* 820E61ACh case    0:*/		return 0x820E61B0;
	}
	return 0x820E61B0;
} // Block from 820E61ACh-820E61B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E61B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E61B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E61B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E61B0);
		  /* 820E61B0h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 820E61B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820E61B0h case    0:*/		return 0x820E61B4;
		  /* 820E61B4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E61B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E61C4;  }
		/* 820E61B4h case    1:*/		return 0x820E61B8;
		  /* 820E61B8h */ case    2:  		/* lis R31, -32761 */
		/* 820E61B8h case    2:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 820E61B8h case    2:*/		return 0x820E61BC;
		  /* 820E61BCh */ case    3:  		/* ori R31, R31, 14 */
		/* 820E61BCh case    3:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 820E61BCh case    3:*/		return 0x820E61C0;
		  /* 820E61C0h */ case    4:  		/* b -60 */
		/* 820E61C0h case    4:*/		return 0x820E6184;
		/* 820E61C0h case    4:*/		return 0x820E61C4;
	}
	return 0x820E61C4;
} // Block from 820E61B0h-820E61C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E61C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E61C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E61C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E61C4);
		  /* 820E61C4h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 820E61C4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E61C4h case    0:*/		return 0x820E61C8;
		  /* 820E61C8h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820E61C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E61E4;  }
		/* 820E61C8h case    1:*/		return 0x820E61CC;
		  /* 820E61CCh */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 820E61CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820E61CCh case    2:*/		return 0x820E61D0;
		  /* 820E61D0h */ case    3:  		/* bc 4, CR6_EQ, -104 */
		/* 820E61D0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E6168;  }
		/* 820E61D0h case    3:*/		return 0x820E61D4;
		  /* 820E61D4h */ case    4:  		/* mr R4, R28 */
		/* 820E61D4h case    4:*/		regs.R4 = regs.R28;
		/* 820E61D4h case    4:*/		return 0x820E61D8;
		  /* 820E61D8h */ case    5:  		/* li R11, 451 */
		/* 820E61D8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1C3);
		/* 820E61D8h case    5:*/		return 0x820E61DC;
		  /* 820E61DCh */ case    6:  		/* rlwimi R4, R11, 22, 0, 11 */
		/* 820E61DCh case    6:*/		cpu::op::rlwimi<0,22,0,11>(regs,&regs.R4,regs.R11);
		/* 820E61DCh case    6:*/		return 0x820E61E0;
		  /* 820E61E0h */ case    7:  		/* b 16 */
		/* 820E61E0h case    7:*/		return 0x820E61F0;
		/* 820E61E0h case    7:*/		return 0x820E61E4;
	}
	return 0x820E61E4;
} // Block from 820E61C4h-820E61E4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E61E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E61E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E61E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E61E4);
		  /* 820E61E4h */ case    0:  		/* mr R4, R28 */
		/* 820E61E4h case    0:*/		regs.R4 = regs.R28;
		/* 820E61E4h case    0:*/		return 0x820E61E8;
		  /* 820E61E8h */ case    1:  		/* li R11, 1803 */
		/* 820E61E8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x70B);
		/* 820E61E8h case    1:*/		return 0x820E61EC;
		  /* 820E61ECh */ case    2:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 820E61ECh case    2:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 820E61ECh case    2:*/		return 0x820E61F0;
	}
	return 0x820E61F0;
} // Block from 820E61E4h-820E61F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E61F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E61F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E61F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E61F0);
		  /* 820E61F0h */ case    0:  		/* li R7, 0 */
		/* 820E61F0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E61F0h case    0:*/		return 0x820E61F4;
		  /* 820E61F4h */ case    1:  		/* mr R6, R28 */
		/* 820E61F4h case    1:*/		regs.R6 = regs.R28;
		/* 820E61F4h case    1:*/		return 0x820E61F8;
		  /* 820E61F8h */ case    2:  		/* rlwinm R5, R28, 1, 0, 30 */
		/* 820E61F8h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R28);
		/* 820E61F8h case    2:*/		return 0x820E61FC;
		  /* 820E61FCh */ case    3:  		/* mr R3, R27 */
		/* 820E61FCh case    3:*/		regs.R3 = regs.R27;
		/* 820E61FCh case    3:*/		return 0x820E6200;
		  /* 820E6200h */ case    4:  		/* bl 91184 */
		/* 820E6200h case    4:*/		regs.LR = 0x820E6204; return 0x820FC630;
		/* 820E6200h case    4:*/		return 0x820E6204;
		  /* 820E6204h */ case    5:  		/* or. R31, R3, R3 */
		/* 820E6204h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820E6204h case    5:*/		return 0x820E6208;
		  /* 820E6208h */ case    6:  		/* bc 12, CR0_LT, -156 */
		/* 820E6208h case    6:*/		if ( regs.CR[0].lt ) { return 0x820E616C;  }
		/* 820E6208h case    6:*/		return 0x820E620C;
		  /* 820E620Ch */ case    7:  		/* mr R3, R27 */
		/* 820E620Ch case    7:*/		regs.R3 = regs.R27;
		/* 820E620Ch case    7:*/		return 0x820E6210;
		  /* 820E6210h */ case    8:  		/* lwz R4, <#[R30 + 260]> */
		/* 820E6210h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 820E6210h case    8:*/		return 0x820E6214;
		  /* 820E6214h */ case    9:  		/* bl 89308 */
		/* 820E6214h case    9:*/		regs.LR = 0x820E6218; return 0x820FBEF0;
		/* 820E6214h case    9:*/		return 0x820E6218;
		  /* 820E6218h */ case   10:  		/* or. R31, R3, R3 */
		/* 820E6218h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820E6218h case   10:*/		return 0x820E621C;
		  /* 820E621Ch */ case   11:  		/* bc 12, CR0_LT, -176 */
		/* 820E621Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x820E616C;  }
		/* 820E621Ch case   11:*/		return 0x820E6220;
		  /* 820E6220h */ case   12:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E6220h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E6220h case   12:*/		return 0x820E6224;
		  /* 820E6224h */ case   13:  		/* rlwinm R31, R28, 2, 0, 29 */
		/* 820E6224h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R28);
		/* 820E6224h case   13:*/		return 0x820E6228;
		  /* 820E6228h */ case   14:  		/* lwz R3, <#[R27 + 16]> */
		/* 820E6228h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000010) );
		/* 820E6228h case   14:*/		return 0x820E622C;
		  /* 820E622Ch */ case   15:  		/* mr R5, R31 */
		/* 820E622Ch case   15:*/		regs.R5 = regs.R31;
		/* 820E622Ch case   15:*/		return 0x820E6230;
		  /* 820E6230h */ case   16:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E6230h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E6230h case   16:*/		return 0x820E6234;
		  /* 820E6234h */ case   17:  		/* bl -346244 */
		/* 820E6234h case   17:*/		regs.LR = 0x820E6238; return 0x820919B0;
		/* 820E6234h case   17:*/		return 0x820E6238;
		  /* 820E6238h */ case   18:  		/* mr R5, R31 */
		/* 820E6238h case   18:*/		regs.R5 = regs.R31;
		/* 820E6238h case   18:*/		return 0x820E623C;
		  /* 820E623Ch */ case   19:  		/* lwz R3, <#[R27 + 8]> */
		/* 820E623Ch case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000008) );
		/* 820E623Ch case   19:*/		return 0x820E6240;
		  /* 820E6240h */ case   20:  		/* addi R4, R1, 128 */
		/* 820E6240h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E6240h case   20:*/		return 0x820E6244;
		  /* 820E6244h */ case   21:  		/* bl -346260 */
		/* 820E6244h case   21:*/		regs.LR = 0x820E6248; return 0x820919B0;
		/* 820E6244h case   21:*/		return 0x820E6248;
		  /* 820E6248h */ case   22:  		/* lwz R11, <#[R27 + 8]> */
		/* 820E6248h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 820E6248h case   22:*/		return 0x820E624C;
		  /* 820E624Ch */ case   23:  		/* cmpwi CR6, R26, 0 */
		/* 820E624Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E624Ch case   23:*/		return 0x820E6250;
		  /* 820E6250h */ case   24:  		/* mr R5, R31 */
		/* 820E6250h case   24:*/		regs.R5 = regs.R31;
		/* 820E6250h case   24:*/		return 0x820E6254;
		  /* 820E6254h */ case   25:  		/* add R3, R31, R11 */
		/* 820E6254h case   25:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 820E6254h case   25:*/		return 0x820E6258;
		  /* 820E6258h */ case   26:  		/* bc 12, CR6_EQ, 20 */
		/* 820E6258h case   26:*/		if ( regs.CR[6].eq ) { return 0x820E626C;  }
		/* 820E6258h case   26:*/		return 0x820E625C;
		  /* 820E625Ch */ case   27:  		/* lwz R10, <#[R30 + 260]> */
		/* 820E625Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 820E625Ch case   27:*/		return 0x820E6260;
		  /* 820E6260h */ case   28:  		/* lwz R11, <#[R10 + 8]> */
		/* 820E6260h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E6260h case   28:*/		return 0x820E6264;
		  /* 820E6264h */ case   29:  		/* add R4, R11, R31 */
		/* 820E6264h case   29:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R31);
		/* 820E6264h case   29:*/		return 0x820E6268;
		  /* 820E6268h */ case   30:  		/* b 20 */
		/* 820E6268h case   30:*/		return 0x820E627C;
		/* 820E6268h case   30:*/		return 0x820E626C;
	}
	return 0x820E626C;
} // Block from 820E61F0h-820E626Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 820E626Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E626C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E626C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E626C);
		  /* 820E626Ch */ case    0:  		/* lwz R9, <#[R30 + 260]> */
		/* 820E626Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000104) );
		/* 820E626Ch case    0:*/		return 0x820E6270;
		  /* 820E6270h */ case    1:  		/* rlwinm R10, R28, 3, 0, 28 */
		/* 820E6270h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R28);
		/* 820E6270h case    1:*/		return 0x820E6274;
		  /* 820E6274h */ case    2:  		/* lwz R11, <#[R9 + 8]> */
		/* 820E6274h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 820E6274h case    2:*/		return 0x820E6278;
		  /* 820E6278h */ case    3:  		/* add R4, R10, R11 */
		/* 820E6278h case    3:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 820E6278h case    3:*/		return 0x820E627C;
	}
	return 0x820E627C;
} // Block from 820E626Ch-820E627Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E627Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E627C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E627C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E627C);
		  /* 820E627Ch */ case    0:  		/* bl -346316 */
		/* 820E627Ch case    0:*/		regs.LR = 0x820E6280; return 0x820919B0;
		/* 820E627Ch case    0:*/		return 0x820E6280;
		  /* 820E6280h */ case    1:  		/* lwz R11, <#[R27 + 8]> */
		/* 820E6280h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 820E6280h case    1:*/		return 0x820E6284;
		  /* 820E6284h */ case    2:  		/* lwz R10, <#[R27 + 16]> */
		/* 820E6284h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 820E6284h case    2:*/		return 0x820E6288;
		  /* 820E6288h */ case    3:  		/* lwz R9, <#[R30 + 20]> */
		/* 820E6288h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 820E6288h case    3:*/		return 0x820E628C;
		  /* 820E628Ch */ case    4:  		/* lwz R8, <#[R11]> */
		/* 820E628Ch case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E628Ch case    4:*/		return 0x820E6290;
		  /* 820E6290h */ case    5:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E6290h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E6290h case    5:*/		return 0x820E6294;
		  /* 820E6294h */ case    6:  		/* lwz R10, <#[R10]> */
		/* 820E6294h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E6294h case    6:*/		return 0x820E6298;
		  /* 820E6298h */ case    7:  		/* lwzx R11, <#[R11 + R31]> */
		/* 820E6298h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 820E6298h case    7:*/		return 0x820E629C;
		  /* 820E629Ch */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E629Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E629Ch case    8:*/		return 0x820E62A0;
		  /* 820E62A0h */ case    9:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 820E62A0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 820E62A0h case    9:*/		return 0x820E62A4;
		  /* 820E62A4h */ case   10:  		/* lwzx R11, <#[R8 + R9]> */
		/* 820E62A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E62A4h case   10:*/		return 0x820E62A8;
		  /* 820E62A8h */ case   11:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E62A8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E62A8h case   11:*/		return 0x820E62AC;
		  /* 820E62ACh */ case   12:  		/* lwzx R8, <#[R7 + R9]> */
		/* 820E62ACh case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 820E62ACh case   12:*/		return 0x820E62B0;
		  /* 820E62B0h */ case   13:  		/* lwz R7, <#[R11 + 4]> */
		/* 820E62B0h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820E62B0h case   13:*/		return 0x820E62B4;
		  /* 820E62B4h */ case   14:  		/* lwz R9, <#[R10 + 4]> */
		/* 820E62B4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820E62B4h case   14:*/		return 0x820E62B8;
		  /* 820E62B8h */ case   15:  		/* cmplw CR6, R9, R7 */
		/* 820E62B8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 820E62B8h case   15:*/		return 0x820E62BC;
		  /* 820E62BCh */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 820E62BCh case   16:*/		if ( !regs.CR[6].eq ) { return 0x820E62D0;  }
		/* 820E62BCh case   16:*/		return 0x820E62C0;
		  /* 820E62C0h */ case   17:  		/* lwz R7, <#[R10 + 12]> */
		/* 820E62C0h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E62C0h case   17:*/		return 0x820E62C4;
		  /* 820E62C4h */ case   18:  		/* lwz R11, <#[R11 + 12]> */
		/* 820E62C4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E62C4h case   18:*/		return 0x820E62C8;
		  /* 820E62C8h */ case   19:  		/* cmplw CR6, R7, R11 */
		/* 820E62C8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 820E62C8h case   19:*/		return 0x820E62CC;
		  /* 820E62CCh */ case   20:  		/* bc 12, CR6_EQ, -356 */
		/* 820E62CCh case   20:*/		if ( regs.CR[6].eq ) { return 0x820E6168;  }
		/* 820E62CCh case   20:*/		return 0x820E62D0;
	}
	return 0x820E62D0;
} // Block from 820E627Ch-820E62D0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E62D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E62D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E62D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E62D0);
		  /* 820E62D0h */ case    0:  		/* lwz R11, <#[R8 + 4]> */
		/* 820E62D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 820E62D0h case    0:*/		return 0x820E62D4;
		  /* 820E62D4h */ case    1:  		/* cmplw CR6, R9, R11 */
		/* 820E62D4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 820E62D4h case    1:*/		return 0x820E62D8;
		  /* 820E62D8h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820E62D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E62EC;  }
		/* 820E62D8h case    2:*/		return 0x820E62DC;
		  /* 820E62DCh */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 820E62DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E62DCh case    3:*/		return 0x820E62E0;
		  /* 820E62E0h */ case    4:  		/* lwz R10, <#[R8 + 12]> */
		/* 820E62E0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 820E62E0h case    4:*/		return 0x820E62E4;
		  /* 820E62E4h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 820E62E4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E62E4h case    5:*/		return 0x820E62E8;
		  /* 820E62E8h */ case    6:  		/* bc 12, CR6_EQ, -384 */
		/* 820E62E8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E6168;  }
		/* 820E62E8h case    6:*/		return 0x820E62EC;
	}
	return 0x820E62EC;
} // Block from 820E62D0h-820E62ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E62ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E62EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E62EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E62EC);
		  /* 820E62ECh */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 820E62ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820E62ECh case    0:*/		return 0x820E62F0;
		  /* 820E62F0h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 820E62F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6320;  }
		/* 820E62F0h case    1:*/		return 0x820E62F4;
		  /* 820E62F4h */ case    2:  		/* lwz R31, <#[R1 + 96]> */
		/* 820E62F4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E62F4h case    2:*/		return 0x820E62F8;
		  /* 820E62F8h */ case    3:  		/* stw R27, <#[R25]> */
		/* 820E62F8h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R25 + 0x00000000) );
		/* 820E62F8h case    3:*/		return 0x820E62FC;
		  /* 820E62FCh */ case    4:  		/* mr R27, R24 */
		/* 820E62FCh case    4:*/		regs.R27 = regs.R24;
		/* 820E62FCh case    4:*/		return 0x820E6300;
		  /* 820E6300h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 820E6300h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E6300h case    5:*/		return 0x820E6304;
		  /* 820E6304h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 820E6304h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E6318;  }
		/* 820E6304h case    6:*/		return 0x820E6308;
		  /* 820E6308h */ case    7:  		/* addi R4, R1, 288 */
		/* 820E6308h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x120);
		/* 820E6308h case    7:*/		return 0x820E630C;
		  /* 820E630Ch */ case    8:  		/* mr R3, R23 */
		/* 820E630Ch case    8:*/		regs.R3 = regs.R23;
		/* 820E630Ch case    8:*/		return 0x820E6310;
		  /* 820E6310h */ case    9:  		/* rlwinm R5, R31, 2, 0, 29 */
		/* 820E6310h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R31);
		/* 820E6310h case    9:*/		return 0x820E6314;
		  /* 820E6314h */ case   10:  		/* bl -345308 */
		/* 820E6314h case   10:*/		regs.LR = 0x820E6318; return 0x82091E38;
		/* 820E6314h case   10:*/		return 0x820E6318;
	}
	return 0x820E6318;
} // Block from 820E62ECh-820E6318h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E6318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6318);
		  /* 820E6318h */ case    0:  		/* stw R31, <#[R22]> */
		/* 820E6318h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R22 + 0x00000000) );
		/* 820E6318h case    0:*/		return 0x820E631C;
		  /* 820E631Ch */ case    1:  		/* b 28 */
		/* 820E631Ch case    1:*/		return 0x820E6338;
		/* 820E631Ch case    1:*/		return 0x820E6320;
	}
	return 0x820E6320;
} // Block from 820E6318h-820E6320h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E6320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6320);
		  /* 820E6320h */ case    0:  		/* lwz R11, <#[R30 + 256]> */
		/* 820E6320h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000100) );
		/* 820E6320h case    0:*/		return 0x820E6324;
		  /* 820E6324h */ case    1:  		/* mr R4, R27 */
		/* 820E6324h case    1:*/		regs.R4 = regs.R27;
		/* 820E6324h case    1:*/		return 0x820E6328;
		  /* 820E6328h */ case    2:  		/* lwz R10, <#[R30 + 24]> */
		/* 820E6328h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 820E6328h case    2:*/		return 0x820E632C;
		  /* 820E632Ch */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E632Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E632Ch case    3:*/		return 0x820E6330;
		  /* 820E6330h */ case    4:  		/* lwzx R3, <#[R11 + R10]> */
		/* 820E6330h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E6330h case    4:*/		return 0x820E6334;
		  /* 820E6334h */ case    5:  		/* bl 91676 */
		/* 820E6334h case    5:*/		regs.LR = 0x820E6338; return 0x820FC950;
		/* 820E6334h case    5:*/		return 0x820E6338;
	}
	return 0x820E6338;
} // Block from 820E6320h-820E6338h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E6338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6338);
		  /* 820E6338h */ case    0:  		/* mr R31, R24 */
		/* 820E6338h case    0:*/		regs.R31 = regs.R24;
		/* 820E6338h case    0:*/		return 0x820E633C;
		  /* 820E633Ch */ case    1:  		/* b -464 */
		/* 820E633Ch case    1:*/		return 0x820E616C;
		/* 820E633Ch case    1:*/		return 0x820E6340;
	}
	return 0x820E6340;
} // Block from 820E6338h-820E6340h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E6340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6340);
		  /* 820E6340h */ case    0:  		/* mfspr R12, LR */
		/* 820E6340h case    0:*/		regs.R12 = regs.LR;
		/* 820E6340h case    0:*/		return 0x820E6344;
		  /* 820E6344h */ case    1:  		/* bl -348392 */
		/* 820E6344h case    1:*/		regs.LR = 0x820E6348; return 0x8209125C;
		/* 820E6344h case    1:*/		return 0x820E6348;
		  /* 820E6348h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820E6348h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820E6348h case    2:*/		return 0x820E634C;
		  /* 820E634Ch */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 820E634Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 820E634Ch case    3:*/		return 0x820E6350;
		  /* 820E6350h */ case    4:  		/* mr R31, R3 */
		/* 820E6350h case    4:*/		regs.R31 = regs.R3;
		/* 820E6350h case    4:*/		return 0x820E6354;
		  /* 820E6354h */ case    5:  		/* li R29, 0 */
		/* 820E6354h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820E6354h case    5:*/		return 0x820E6358;
		  /* 820E6358h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820E6358h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E6358h case    6:*/		return 0x820E635C;
		  /* 820E635Ch */ case    7:  		/* bc 4, CR6_GT, 120 */
		/* 820E635Ch case    7:*/		if ( !regs.CR[6].gt ) { return 0x820E63D4;  }
		/* 820E635Ch case    7:*/		return 0x820E6360;
		  /* 820E6360h */ case    8:  		/* li R30, 0 */
		/* 820E6360h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E6360h case    8:*/		return 0x820E6364;
		  /* 820E6364h */ case    9:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E6364h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E6364h case    9:*/		return 0x820E6368;
		  /* 820E6368h */ case   10:  		/* lwzx R3, <#[R30 + R9]> */
		/* 820E6368h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 820E6368h case   10:*/		return 0x820E636C;
		  /* 820E636Ch */ case   11:  		/* lwz R10, <#[R3 + 56]> */
		/* 820E636Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000038) );
		/* 820E636Ch case   11:*/		return 0x820E6370;
		  /* 820E6370h */ case   12:  		/* cmpwi CR6, R10, -1 */
		/* 820E6370h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E6370h case   12:*/		return 0x820E6374;
		  /* 820E6374h */ case   13:  		/* bc 12, CR6_EQ, 76 */
		/* 820E6374h case   13:*/		if ( regs.CR[6].eq ) { return 0x820E63C0;  }
		/* 820E6374h case   13:*/		return 0x820E6378;
		  /* 820E6378h */ case   14:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 820E6378h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 820E6378h case   14:*/		return 0x820E637C;
		  /* 820E637Ch */ case   15:  		/* mr R11, R10 */
		/* 820E637Ch case   15:*/		regs.R11 = regs.R10;
		/* 820E637Ch case   15:*/		return 0x820E6380;
		  /* 820E6380h */ case   16:  		/* b 32 */
		/* 820E6380h case   16:*/		return 0x820E63A0;
		/* 820E6380h case   16:*/		return 0x820E6384;
		  /* 820E6384h */ case   17:  		/* lwz R9, <#[R3 + 60]> */
		/* 820E6384h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000003C) );
		/* 820E6384h case   17:*/		return 0x820E6388;
		  /* 820E6388h */ case   18:  		/* lwz R11, <#[R4 + 60]> */
		/* 820E6388h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000003C) );
		/* 820E6388h case   18:*/		return 0x820E638C;
		  /* 820E638Ch */ case   19:  		/* or R11, R11, R9 */
		/* 820E638Ch case   19:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820E638Ch case   19:*/		return 0x820E6390;
		  /* 820E6390h */ case   20:  		/* stw R11, <#[R3 + 60]> */
		/* 820E6390h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000003C) );
		/* 820E6390h case   20:*/		return 0x820E6394;
		  /* 820E6394h */ case   21:  		/* lwz R11, <#[R4 + 56]> */
		/* 820E6394h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000038) );
		/* 820E6394h case   21:*/		return 0x820E6398;
		  /* 820E6398h */ case   22:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 820E6398h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 820E6398h case   22:*/		return 0x820E639C;
		  /* 820E639Ch */ case   23:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E639Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E639Ch case   23:*/		return 0x820E63A0;
	}
	return 0x820E63A0;
} // Block from 820E6340h-820E63A0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E63A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E63A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E63A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E63A0);
		  /* 820E63A0h */ case    0:  		/* lwzx R4, <#[R8 + R9]> */
		/* 820E63A0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E63A0h case    0:*/		return 0x820E63A4;
		  /* 820E63A4h */ case    1:  		/* lwz R9, <#[R4 + 56]> */
		/* 820E63A4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000038) );
		/* 820E63A4h case    1:*/		return 0x820E63A8;
		  /* 820E63A8h */ case    2:  		/* cmpwi CR6, R9, -1 */
		/* 820E63A8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E63A8h case    2:*/		return 0x820E63AC;
		  /* 820E63ACh */ case    3:  		/* bc 4, CR6_EQ, -40 */
		/* 820E63ACh case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E6384;  }
		/* 820E63ACh case    3:*/		return 0x820E63B0;
		  /* 820E63B0h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 820E63B0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E63B0h case    4:*/		return 0x820E63B4;
		  /* 820E63B4h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 820E63B4h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E63C0;  }
		/* 820E63B4h case    5:*/		return 0x820E63B8;
		  /* 820E63B8h */ case    6:  		/* stw R11, <#[R3 + 56]> */
		/* 820E63B8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 820E63B8h case    6:*/		return 0x820E63BC;
		  /* 820E63BCh */ case    7:  		/* bl 92388 */
		/* 820E63BCh case    7:*/		regs.LR = 0x820E63C0; return 0x820FCCA0;
		/* 820E63BCh case    7:*/		return 0x820E63C0;
	}
	return 0x820E63C0;
} // Block from 820E63A0h-820E63C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E63C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E63C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E63C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E63C0);
		  /* 820E63C0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E63C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E63C0h case    0:*/		return 0x820E63C4;
		  /* 820E63C4h */ case    1:  		/* addi R29, R29, 1 */
		/* 820E63C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820E63C4h case    1:*/		return 0x820E63C8;
		  /* 820E63C8h */ case    2:  		/* addi R30, R30, 4 */
		/* 820E63C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E63C8h case    2:*/		return 0x820E63CC;
		  /* 820E63CCh */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 820E63CCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820E63CCh case    3:*/		return 0x820E63D0;
		  /* 820E63D0h */ case    4:  		/* bc 12, CR6_LT, -108 */
		/* 820E63D0h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E6364;  }
		/* 820E63D0h case    4:*/		return 0x820E63D4;
	}
	return 0x820E63D4;
} // Block from 820E63C0h-820E63D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E63D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E63D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E63D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E63D4);
		  /* 820E63D4h */ case    0:  		/* li R3, 0 */
		/* 820E63D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E63D4h case    0:*/		return 0x820E63D8;
		  /* 820E63D8h */ case    1:  		/* addi R1, R1, 112 */
		/* 820E63D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820E63D8h case    1:*/		return 0x820E63DC;
		  /* 820E63DCh */ case    2:  		/* b -348464 */
		/* 820E63DCh case    2:*/		return 0x820912AC;
		/* 820E63DCh case    2:*/		return 0x820E63E0;
	}
	return 0x820E63E0;
} // Block from 820E63D4h-820E63E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E63E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E63E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E63E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E63E0);
		  /* 820E63E0h */ case    0:  		/* mfspr R12, LR */
		/* 820E63E0h case    0:*/		regs.R12 = regs.LR;
		/* 820E63E0h case    0:*/		return 0x820E63E4;
		  /* 820E63E4h */ case    1:  		/* bl -348560 */
		/* 820E63E4h case    1:*/		regs.LR = 0x820E63E8; return 0x82091254;
		/* 820E63E4h case    1:*/		return 0x820E63E8;
		  /* 820E63E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820E63E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820E63E8h case    2:*/		return 0x820E63EC;
		  /* 820E63ECh */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E63ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E63ECh case    3:*/		return 0x820E63F0;
		  /* 820E63F0h */ case    4:  		/* lis R9, 20480 */
		/* 820E63F0h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0x5000);
		/* 820E63F0h case    4:*/		return 0x820E63F4;
		  /* 820E63F4h */ case    5:  		/* mr R28, R3 */
		/* 820E63F4h case    5:*/		regs.R28 = regs.R3;
		/* 820E63F4h case    5:*/		return 0x820E63F8;
		  /* 820E63F8h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 820E63F8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E63F8h case    6:*/		return 0x820E63FC;
		  /* 820E63FCh */ case    7:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 820E63FCh case    7:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 820E63FCh case    7:*/		return 0x820E6400;
		  /* 820E6400h */ case    8:  		/* cmplw CR6, R10, R9 */
		/* 820E6400h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E6400h case    8:*/		return 0x820E6404;
		  /* 820E6404h */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 820E6404h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E6440;  }
		/* 820E6404h case    9:*/		return 0x820E6408;
		  /* 820E6408h */ case   10:  		/* lis R9, 4176 */
		/* 820E6408h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0x1050);
		/* 820E6408h case   10:*/		return 0x820E640C;
		  /* 820E640Ch */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 820E640Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E640Ch case   11:*/		return 0x820E6410;
		  /* 820E6410h */ case   12:  		/* bc 12, CR6_EQ, 48 */
		/* 820E6410h case   12:*/		if ( regs.CR[6].eq ) { return 0x820E6440;  }
		/* 820E6410h case   12:*/		return 0x820E6414;
		  /* 820E6414h */ case   13:  		/* lis R9, 4192 */
		/* 820E6414h case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0x1060);
		/* 820E6414h case   13:*/		return 0x820E6418;
		  /* 820E6418h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 820E6418h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E6418h case   14:*/		return 0x820E641C;
		  /* 820E641Ch */ case   15:  		/* bc 12, CR6_EQ, 36 */
		/* 820E641Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x820E6440;  }
		/* 820E641Ch case   15:*/		return 0x820E6420;
		  /* 820E6420h */ case   16:  		/* lis R9, 4144 */
		/* 820E6420h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0x1030);
		/* 820E6420h case   16:*/		return 0x820E6424;
		  /* 820E6424h */ case   17:  		/* cmplw CR6, R10, R9 */
		/* 820E6424h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E6424h case   17:*/		return 0x820E6428;
		  /* 820E6428h */ case   18:  		/* bc 12, CR6_EQ, 24 */
		/* 820E6428h case   18:*/		if ( regs.CR[6].eq ) { return 0x820E6440;  }
		/* 820E6428h case   18:*/		return 0x820E642C;
		  /* 820E642Ch */ case   19:  		/* lis R9, 4208 */
		/* 820E642Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0x1070);
		/* 820E642Ch case   19:*/		return 0x820E6430;
		  /* 820E6430h */ case   20:  		/* cmplw CR6, R10, R9 */
		/* 820E6430h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E6430h case   20:*/		return 0x820E6434;
		  /* 820E6434h */ case   21:  		/* bc 12, CR6_EQ, 12 */
		/* 820E6434h case   21:*/		if ( regs.CR[6].eq ) { return 0x820E6440;  }
		/* 820E6434h case   21:*/		return 0x820E6438;
		  /* 820E6438h */ case   22:  		/* li R3, 1 */
		/* 820E6438h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E6438h case   22:*/		return 0x820E643C;
		  /* 820E643Ch */ case   23:  		/* b 872 */
		/* 820E643Ch case   23:*/		return 0x820E67A4;
		/* 820E643Ch case   23:*/		return 0x820E6440;
	}
	return 0x820E6440;
} // Block from 820E63E0h-820E6440h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E6440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6440);
		  /* 820E6440h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 820E6440h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E6440h case    0:*/		return 0x820E6444;
		  /* 820E6444h */ case    1:  		/* cmplwi CR6, R10, 1 */
		/* 820E6444h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 820E6444h case    1:*/		return 0x820E6448;
		  /* 820E6448h */ case    2:  		/* bc 4, CR6_EQ, -16 */
		/* 820E6448h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E6448h case    2:*/		return 0x820E644C;
		  /* 820E644Ch */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E644Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E644Ch case    3:*/		return 0x820E6450;
		  /* 820E6450h */ case    4:  		/* li R27, 0 */
		/* 820E6450h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E6450h case    4:*/		return 0x820E6454;
		  /* 820E6454h */ case    5:  		/* lwz R3, <#[R28 + 20]> */
		/* 820E6454h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000014) );
		/* 820E6454h case    5:*/		return 0x820E6458;
		  /* 820E6458h */ case    6:  		/* lwz R31, <#[R11]> */
		/* 820E6458h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 820E6458h case    6:*/		return 0x820E645C;
		  /* 820E645Ch */ case    7:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 820E645Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 820E645Ch case    7:*/		return 0x820E6460;
		  /* 820E6460h */ case    8:  		/* lwzx R6, <#[R11 + R3]> */
		/* 820E6460h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820E6460h case    8:*/		return 0x820E6464;
		  /* 820E6464h */ case    9:  		/* lwz R5, <#[R6 + 84]> */
		/* 820E6464h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R6 + 0x00000054) );
		/* 820E6464h case    9:*/		return 0x820E6468;
		  /* 820E6468h */ case   10:  		/* cmpwi CR6, R5, -1 */
		/* 820E6468h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 820E6468h case   10:*/		return 0x820E646C;
		  /* 820E646Ch */ case   11:  		/* bc 12, CR6_EQ, -52 */
		/* 820E646Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E646Ch case   11:*/		return 0x820E6470;
		  /* 820E6470h */ case   12:  		/* lwz R11, <#[R28 + 24]> */
		/* 820E6470h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 820E6470h case   12:*/		return 0x820E6474;
		  /* 820E6474h */ case   13:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 820E6474h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 820E6474h case   13:*/		return 0x820E6478;
		  /* 820E6478h */ case   14:  		/* li R4, 0 */
		/* 820E6478h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E6478h case   14:*/		return 0x820E647C;
		  /* 820E647Ch */ case   15:  		/* li R8, 0 */
		/* 820E647Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E647Ch case   15:*/		return 0x820E6480;
		  /* 820E6480h */ case   16:  		/* lwzx R29, <#[R10 + R11]> */
		/* 820E6480h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E6480h case   16:*/		return 0x820E6484;
		  /* 820E6484h */ case   17:  		/* lwz R9, <#[R29 + 12]> */
		/* 820E6484h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 820E6484h case   17:*/		return 0x820E6488;
		  /* 820E6488h */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 820E6488h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820E6488h case   18:*/		return 0x820E648C;
		  /* 820E648Ch */ case   19:  		/* bc 12, CR6_EQ, 56 */
		/* 820E648Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x820E64C4;  }
		/* 820E648Ch case   19:*/		return 0x820E6490;
		  /* 820E6490h */ case   20:  		/* lwz R7, <#[R29 + 16]> */
		/* 820E6490h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000010) );
		/* 820E6490h case   20:*/		return 0x820E6494;
		  /* 820E6494h */ case   21:  		/* li R11, 0 */
		/* 820E6494h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E6494h case   21:*/		return 0x820E6498;
		  /* 820E6498h */ case   22:  		/* lwzx R10, <#[R11 + R7]> */
		/* 820E6498h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E6498h case   22:*/		return 0x820E649C;
		  /* 820E649Ch */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E649Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E649Ch case   23:*/		return 0x820E64A0;
		  /* 820E64A0h */ case   24:  		/* lwzx R10, <#[R10 + R3]> */
		/* 820E64A0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 820E64A0h case   24:*/		return 0x820E64A4;
		  /* 820E64A4h */ case   25:  		/* lwz R10, <#[R10 + 76]> */
		/* 820E64A4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 820E64A4h case   25:*/		return 0x820E64A8;
		  /* 820E64A8h */ case   26:  		/* cmplw CR6, R10, R4 */
		/* 820E64A8h case   26:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 820E64A8h case   26:*/		return 0x820E64AC;
		  /* 820E64ACh */ case   27:  		/* bc 4, CR6_GT, 8 */
		/* 820E64ACh case   27:*/		if ( !regs.CR[6].gt ) { return 0x820E64B4;  }
		/* 820E64ACh case   27:*/		return 0x820E64B0;
		  /* 820E64B0h */ case   28:  		/* mr R4, R10 */
		/* 820E64B0h case   28:*/		regs.R4 = regs.R10;
		/* 820E64B0h case   28:*/		return 0x820E64B4;
	}
	return 0x820E64B4;
} // Block from 820E6440h-820E64B4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820E64B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E64B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E64B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E64B4);
		  /* 820E64B4h */ case    0:  		/* addi R8, R8, 1 */
		/* 820E64B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E64B4h case    0:*/		return 0x820E64B8;
		  /* 820E64B8h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E64B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E64B8h case    1:*/		return 0x820E64BC;
		  /* 820E64BCh */ case    2:  		/* cmplw CR6, R8, R9 */
		/* 820E64BCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 820E64BCh case    2:*/		return 0x820E64C0;
		  /* 820E64C0h */ case    3:  		/* bc 12, CR6_LT, -40 */
		/* 820E64C0h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E6498;  }
		/* 820E64C0h case    3:*/		return 0x820E64C4;
	}
	return 0x820E64C4;
} // Block from 820E64B4h-820E64C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E64C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E64C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E64C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E64C4);
		  /* 820E64C4h */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E64C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E64C4h case    0:*/		return 0x820E64C8;
		  /* 820E64C8h */ case    1:  		/* lwz R9, <#[R6 + 4]> */
		/* 820E64C8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000004) );
		/* 820E64C8h case    1:*/		return 0x820E64CC;
		  /* 820E64CCh */ case    2:  		/* lwz R11, <#[R11]> */
		/* 820E64CCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E64CCh case    2:*/		return 0x820E64D0;
		  /* 820E64D0h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E64D0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E64D0h case    3:*/		return 0x820E64D4;
		  /* 820E64D4h */ case    4:  		/* lwzx R11, <#[R11 + R3]> */
		/* 820E64D4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820E64D4h case    4:*/		return 0x820E64D8;
		  /* 820E64D8h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 820E64D8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820E64D8h case    5:*/		return 0x820E64DC;
		  /* 820E64DCh */ case    6:  		/* cmplw CR6, R10, R9 */
		/* 820E64DCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E64DCh case    6:*/		return 0x820E64E0;
		  /* 820E64E0h */ case    7:  		/* bc 4, CR6_EQ, 52 */
		/* 820E64E0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E6514;  }
		/* 820E64E0h case    7:*/		return 0x820E64E4;
		  /* 820E64E4h */ case    8:  		/* lwz R9, <#[R11 + 12]> */
		/* 820E64E4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E64E4h case    8:*/		return 0x820E64E8;
		  /* 820E64E8h */ case    9:  		/* lwz R8, <#[R6 + 12]> */
		/* 820E64E8h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x0000000C) );
		/* 820E64E8h case    9:*/		return 0x820E64EC;
		  /* 820E64ECh */ case   10:  		/* cmplw CR6, R9, R8 */
		/* 820E64ECh case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 820E64ECh case   10:*/		return 0x820E64F0;
		  /* 820E64F0h */ case   11:  		/* bc 4, CR6_EQ, 36 */
		/* 820E64F0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E6514;  }
		/* 820E64F0h case   11:*/		return 0x820E64F4;
		  /* 820E64F4h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E64F4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E64F4h case   12:*/		return 0x820E64F8;
		  /* 820E64F8h */ case   13:  		/* lwz R9, <#[R6 + 8]> */
		/* 820E64F8h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000008) );
		/* 820E64F8h case   13:*/		return 0x820E64FC;
		  /* 820E64FCh */ case   14:  		/* cmplw CR6, R11, R9 */
		/* 820E64FCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E64FCh case   14:*/		return 0x820E6500;
		  /* 820E6500h */ case   15:  		/* bc 4, CR6_EQ, 20 */
		/* 820E6500h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E6514;  }
		/* 820E6500h case   15:*/		return 0x820E6504;
		  /* 820E6504h */ case   16:  		/* lwz R11, <#[R6 + 88]> */
		/* 820E6504h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000058) );
		/* 820E6504h case   16:*/		return 0x820E6508;
		  /* 820E6508h */ case   17:  		/* cmplw CR6, R5, R11 */
		/* 820E6508h case   17:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 820E6508h case   17:*/		return 0x820E650C;
		  /* 820E650Ch */ case   18:  		/* bc 12, CR6_EQ, 8 */
		/* 820E650Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x820E6514;  }
		/* 820E650Ch case   18:*/		return 0x820E6510;
		  /* 820E6510h */ case   19:  		/* li R27, 1 */
		/* 820E6510h case   19:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E6510h case   19:*/		return 0x820E6514;
	}
	return 0x820E6514;
} // Block from 820E64C4h-820E6514h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E6514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6514);
		  /* 820E6514h */ case    0:  		/* lwz R11, <#[R28 + 256]> */
		/* 820E6514h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000100) );
		/* 820E6514h case    0:*/		return 0x820E6518;
		  /* 820E6518h */ case    1:  		/* cmplw CR6, R4, R11 */
		/* 820E6518h case    1:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 820E6518h case    1:*/		return 0x820E651C;
		  /* 820E651Ch */ case    2:  		/* bc 12, CR6_GT, -228 */
		/* 820E651Ch case    2:*/		if ( regs.CR[6].gt ) { return 0x820E6438;  }
		/* 820E651Ch case    2:*/		return 0x820E6520;
		  /* 820E6520h */ case    3:  		/* cmpwi CR6, R27, 0 */
		/* 820E6520h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E6520h case    3:*/		return 0x820E6524;
		  /* 820E6524h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 820E6524h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E6534;  }
		/* 820E6524h case    4:*/		return 0x820E6528;
		  /* 820E6528h */ case    5:  		/* lwz R11, <#[R6 + 88]> */
		/* 820E6528h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000058) );
		/* 820E6528h case    5:*/		return 0x820E652C;
		  /* 820E652Ch */ case    6:  		/* cmplw CR6, R5, R11 */
		/* 820E652Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 820E652Ch case    6:*/		return 0x820E6530;
		  /* 820E6530h */ case    7:  		/* bc 4, CR6_EQ, -248 */
		/* 820E6530h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E6530h case    7:*/		return 0x820E6534;
	}
	return 0x820E6534;
} // Block from 820E6514h-820E6534h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E6534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6534);
		  /* 820E6534h */ case    0:  		/* lwz R11, <#[R28 + 108]> */
		/* 820E6534h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000006C) );
		/* 820E6534h case    0:*/		return 0x820E6538;
		  /* 820E6538h */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 820E6538h case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 820E6538h case    1:*/		return 0x820E653C;
		  /* 820E653Ch */ case    2:  		/* bc 12, CR0_EQ, 48 */
		/* 820E653Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x820E656C;  }
		/* 820E653Ch case    2:*/		return 0x820E6540;
		  /* 820E6540h */ case    3:  		/* lwz R11, <#[R29 + 12]> */
		/* 820E6540h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 820E6540h case    3:*/		return 0x820E6544;
		  /* 820E6544h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820E6544h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E6544h case    4:*/		return 0x820E6548;
		  /* 820E6548h */ case    5:  		/* bc 12, CR6_EQ, -272 */
		/* 820E6548h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E6548h case    5:*/		return 0x820E654C;
		  /* 820E654Ch */ case    6:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E654Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E654Ch case    6:*/		return 0x820E6550;
		  /* 820E6550h */ case    7:  		/* lwz R9, <#[R28 + 132]> */
		/* 820E6550h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000084) );
		/* 820E6550h case    7:*/		return 0x820E6554;
		  /* 820E6554h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 820E6554h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E6554h case    8:*/		return 0x820E6558;
		  /* 820E6558h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6558h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6558h case    9:*/		return 0x820E655C;
		  /* 820E655Ch */ case   10:  		/* lwzx R11, <#[R11 + R3]> */
		/* 820E655Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820E655Ch case   10:*/		return 0x820E6560;
		  /* 820E6560h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E6560h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6560h case   11:*/		return 0x820E6564;
		  /* 820E6564h */ case   12:  		/* cmplw CR6, R11, R9 */
		/* 820E6564h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E6564h case   12:*/		return 0x820E6568;
		  /* 820E6568h */ case   13:  		/* bc 12, CR6_EQ, -304 */
		/* 820E6568h case   13:*/		if ( regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E6568h case   13:*/		return 0x820E656C;
	}
	return 0x820E656C;
} // Block from 820E6534h-820E656Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E656Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E656C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E656C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E656C);
		  /* 820E656Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 820E656Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820E656Ch case    0:*/		return 0x820E6570;
		  /* 820E6570h */ case    1:  		/* lis R9, 4096 */
		/* 820E6570h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 820E6570h case    1:*/		return 0x820E6574;
		  /* 820E6574h */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820E6574h case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820E6574h case    2:*/		return 0x820E6578;
		  /* 820E6578h */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 820E6578h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E6578h case    3:*/		return 0x820E657C;
		  /* 820E657Ch */ case    4:  		/* bc 4, CR6_EQ, -324 */
		/* 820E657Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E657Ch case    4:*/		return 0x820E6580;
		  /* 820E6580h */ case    5:  		/* lwz R11, <#[R28 + 16]> */
		/* 820E6580h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 820E6580h case    5:*/		return 0x820E6584;
		  /* 820E6584h */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6584h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6584h case    6:*/		return 0x820E6588;
		  /* 820E6588h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E6588h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E6588h case    7:*/		return 0x820E658C;
		  /* 820E658Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E658Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E658Ch case    8:*/		return 0x820E6590;
		  /* 820E6590h */ case    9:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 820E6590h case    9:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 820E6590h case    9:*/		return 0x820E6594;
		  /* 820E6594h */ case   10:  		/* bc 4, CR0_EQ, -348 */
		/* 820E6594h case   10:*/		if ( !regs.CR[0].eq ) { return 0x820E6438;  }
		/* 820E6594h case   10:*/		return 0x820E6598;
		  /* 820E6598h */ case   11:  		/* lwz R11, <#[R29 + 4]> */
		/* 820E6598h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 820E6598h case   11:*/		return 0x820E659C;
		  /* 820E659Ch */ case   12:  		/* li R10, 0 */
		/* 820E659Ch case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E659Ch case   12:*/		return 0x820E65A0;
		  /* 820E65A0h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820E65A0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E65A0h case   13:*/		return 0x820E65A4;
		  /* 820E65A4h */ case   14:  		/* bc 4, CR6_GT, 44 */
		/* 820E65A4h case   14:*/		if ( !regs.CR[6].gt ) { return 0x820E65D0;  }
		/* 820E65A4h case   14:*/		return 0x820E65A8;
		  /* 820E65A8h */ case   15:  		/* lwz R9, <#[R29 + 8]> */
		/* 820E65A8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 820E65A8h case   15:*/		return 0x820E65AC;
		  /* 820E65ACh */ case   16:  		/* li R11, 0 */
		/* 820E65ACh case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E65ACh case   16:*/		return 0x820E65B0;
		  /* 820E65B0h */ case   17:  		/* lwzx R8, <#[R11 + R9]> */
		/* 820E65B0h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E65B0h case   17:*/		return 0x820E65B4;
		  /* 820E65B4h */ case   18:  		/* cmplw CR6, R8, R31 */
		/* 820E65B4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R31);
		/* 820E65B4h case   18:*/		return 0x820E65B8;
		  /* 820E65B8h */ case   19:  		/* bc 4, CR6_EQ, -384 */
		/* 820E65B8h case   19:*/		if ( !regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E65B8h case   19:*/		return 0x820E65BC;
		  /* 820E65BCh */ case   20:  		/* lwz R8, <#[R29 + 4]> */
		/* 820E65BCh case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000004) );
		/* 820E65BCh case   20:*/		return 0x820E65C0;
		  /* 820E65C0h */ case   21:  		/* addi R10, R10, 1 */
		/* 820E65C0h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E65C0h case   21:*/		return 0x820E65C4;
		  /* 820E65C4h */ case   22:  		/* addi R11, R11, 4 */
		/* 820E65C4h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E65C4h case   22:*/		return 0x820E65C8;
		  /* 820E65C8h */ case   23:  		/* cmplw CR6, R10, R8 */
		/* 820E65C8h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E65C8h case   23:*/		return 0x820E65CC;
		  /* 820E65CCh */ case   24:  		/* bc 12, CR6_LT, -28 */
		/* 820E65CCh case   24:*/		if ( regs.CR[6].lt ) { return 0x820E65B0;  }
		/* 820E65CCh case   24:*/		return 0x820E65D0;
	}
	return 0x820E65D0;
} // Block from 820E656Ch-820E65D0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E65D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E65D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E65D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E65D0);
		  /* 820E65D0h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 820E65D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 820E65D0h case    0:*/		return 0x820E65D4;
		  /* 820E65D4h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 820E65D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E65D4h case    1:*/		return 0x820E65D8;
		  /* 820E65D8h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E65D8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E65D8h case    2:*/		return 0x820E65DC;
		  /* 820E65DCh */ case    3:  		/* lwzx R11, <#[R11 + R3]> */
		/* 820E65DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820E65DCh case    3:*/		return 0x820E65E0;
		  /* 820E65E0h */ case    4:  		/* lwz R11, <#[R11 + 60]> */
		/* 820E65E0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E65E0h case    4:*/		return 0x820E65E4;
		  /* 820E65E4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820E65E4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E65E4h case    5:*/		return 0x820E65E8;
		  /* 820E65E8h */ case    6:  		/* bc 4, CR6_EQ, -432 */
		/* 820E65E8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E6438;  }
		/* 820E65E8h case    6:*/		return 0x820E65EC;
		  /* 820E65ECh */ case    7:  		/* li R3, 116 */
		/* 820E65ECh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E65ECh case    7:*/		return 0x820E65F0;
		  /* 820E65F0h */ case    8:  		/* bl 90024 */
		/* 820E65F0h case    8:*/		regs.LR = 0x820E65F4; return 0x820FC598;
		/* 820E65F0h case    8:*/		return 0x820E65F4;
		  /* 820E65F4h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 820E65F4h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E65F4h case    9:*/		return 0x820E65F8;
		  /* 820E65F8h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 820E65F8h case   10:*/		if ( regs.CR[0].eq ) { return 0x820E6608;  }
		/* 820E65F8h case   10:*/		return 0x820E65FC;
		  /* 820E65FCh */ case   11:  		/* bl 88228 */
		/* 820E65FCh case   11:*/		regs.LR = 0x820E6600; return 0x820FBEA0;
		/* 820E65FCh case   11:*/		return 0x820E6600;
		  /* 820E6600h */ case   12:  		/* mr R31, R3 */
		/* 820E6600h case   12:*/		regs.R31 = regs.R3;
		/* 820E6600h case   12:*/		return 0x820E6604;
		  /* 820E6604h */ case   13:  		/* b 8 */
		/* 820E6604h case   13:*/		return 0x820E660C;
		/* 820E6604h case   13:*/		return 0x820E6608;
	}
	return 0x820E6608;
} // Block from 820E65D0h-820E6608h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E6608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6608);
		  /* 820E6608h */ case    0:  		/* li R31, 0 */
		/* 820E6608h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E6608h case    0:*/		return 0x820E660C;
	}
	return 0x820E660C;
} // Block from 820E6608h-820E660Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E660Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E660C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E660C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E660C);
		  /* 820E660Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E660Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E660Ch case    0:*/		return 0x820E6610;
		  /* 820E6610h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E6610h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E6620;  }
		/* 820E6610h case    1:*/		return 0x820E6614;
		  /* 820E6614h */ case    2:  		/* lis R3, -32761 */
		/* 820E6614h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E6614h case    2:*/		return 0x820E6618;
		  /* 820E6618h */ case    3:  		/* ori R3, R3, 14 */
		/* 820E6618h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E6618h case    3:*/		return 0x820E661C;
		  /* 820E661Ch */ case    4:  		/* b 392 */
		/* 820E661Ch case    4:*/		return 0x820E67A4;
		/* 820E661Ch case    4:*/		return 0x820E6620;
	}
	return 0x820E6620;
} // Block from 820E660Ch-820E6620h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E6620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6620);
		  /* 820E6620h */ case    0:  		/* addic R10, R27, -1 */
		/* 820E6620h case    0:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R27,0xFFFFFFFF);
		/* 820E6620h case    0:*/		return 0x820E6624;
		  /* 820E6624h */ case    1:  		/* lwz R9, <#[R28 + 260]> */
		/* 820E6624h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6624h case    1:*/		return 0x820E6628;
		  /* 820E6628h */ case    2:  		/* lwz R11, <#[R29 + 12]> */
		/* 820E6628h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 820E6628h case    2:*/		return 0x820E662C;
		  /* 820E662Ch */ case    3:  		/* li R7, 1 */
		/* 820E662Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820E662Ch case    3:*/		return 0x820E6630;
		  /* 820E6630h */ case    4:  		/* subfe R10, R10, R27 */
		/* 820E6630h case    4:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 820E6630h case    4:*/		return 0x820E6634;
		  /* 820E6634h */ case    5:  		/* mr R3, R31 */
		/* 820E6634h case    5:*/		regs.R3 = regs.R31;
		/* 820E6634h case    5:*/		return 0x820E6638;
		  /* 820E6638h */ case    6:  		/* add R6, R10, R11 */
		/* 820E6638h case    6:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 820E6638h case    6:*/		return 0x820E663C;
		  /* 820E663Ch */ case    7:  		/* lwz R5, <#[R9 + 4]> */
		/* 820E663Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000004) );
		/* 820E663Ch case    7:*/		return 0x820E6640;
		  /* 820E6640h */ case    8:  		/* lwz R4, <#[R9]> */
		/* 820E6640h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000000) );
		/* 820E6640h case    8:*/		return 0x820E6644;
		  /* 820E6644h */ case    9:  		/* bl 90092 */
		/* 820E6644h case    9:*/		regs.LR = 0x820E6648; return 0x820FC630;
		/* 820E6644h case    9:*/		return 0x820E6648;
		  /* 820E6648h */ case   10:  		/* or. R30, R3, R3 */
		/* 820E6648h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E6648h case   10:*/		return 0x820E664C;
		  /* 820E664Ch */ case   11:  		/* bc 4, CR0_LT, 28 */
		/* 820E664Ch case   11:*/		if ( !regs.CR[0].lt ) { return 0x820E6668;  }
		/* 820E664Ch case   11:*/		return 0x820E6650;
		  /* 820E6650h */ case   12:  		/* mr R3, R31 */
		/* 820E6650h case   12:*/		regs.R3 = regs.R31;
		/* 820E6650h case   12:*/		return 0x820E6654;
		  /* 820E6654h */ case   13:  		/* bl 1273196 */
		/* 820E6654h case   13:*/		regs.LR = 0x820E6658; return 0x8221D3C0;
		/* 820E6654h case   13:*/		return 0x820E6658;
		  /* 820E6658h */ case   14:  		/* mr R3, R31 */
		/* 820E6658h case   14:*/		regs.R3 = regs.R31;
		/* 820E6658h case   14:*/		return 0x820E665C;
		  /* 820E665Ch */ case   15:  		/* bl 90004 */
		/* 820E665Ch case   15:*/		regs.LR = 0x820E6660; return 0x820FC5F0;
		/* 820E665Ch case   15:*/		return 0x820E6660;
		  /* 820E6660h */ case   16:  		/* mr R3, R30 */
		/* 820E6660h case   16:*/		regs.R3 = regs.R30;
		/* 820E6660h case   16:*/		return 0x820E6664;
		  /* 820E6664h */ case   17:  		/* b 320 */
		/* 820E6664h case   17:*/		return 0x820E67A4;
		/* 820E6664h case   17:*/		return 0x820E6668;
	}
	return 0x820E6668;
} // Block from 820E6620h-820E6668h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E6668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6668);
		  /* 820E6668h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 820E6668h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 820E6668h case    0:*/		return 0x820E666C;
		  /* 820E666Ch */ case    1:  		/* lwz R4, <#[R29 + 16]> */
		/* 820E666Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000010) );
		/* 820E666Ch case    1:*/		return 0x820E6670;
		  /* 820E6670h */ case    2:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 820E6670h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 820E6670h case    2:*/		return 0x820E6674;
		  /* 820E6674h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 820E6674h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820E6674h case    3:*/		return 0x820E6678;
		  /* 820E6678h */ case    4:  		/* bl -347336 */
		/* 820E6678h case    4:*/		regs.LR = 0x820E667C; return 0x820919B0;
		/* 820E6678h case    4:*/		return 0x820E667C;
		  /* 820E667Ch */ case    5:  		/* cmpwi CR6, R27, 0 */
		/* 820E667Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E667Ch case    5:*/		return 0x820E6680;
		  /* 820E6680h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 820E6680h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E66A0;  }
		/* 820E6680h case    6:*/		return 0x820E6684;
		  /* 820E6684h */ case    7:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E6684h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6684h case    7:*/		return 0x820E6688;
		  /* 820E6688h */ case    8:  		/* lwz R10, <#[R29 + 12]> */
		/* 820E6688h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 820E6688h case    8:*/		return 0x820E668C;
		  /* 820E668Ch */ case    9:  		/* lwz R9, <#[R31 + 16]> */
		/* 820E668Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 820E668Ch case    9:*/		return 0x820E6690;
		  /* 820E6690h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6690h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6690h case   10:*/		return 0x820E6694;
		  /* 820E6694h */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E6694h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E6694h case   11:*/		return 0x820E6698;
		  /* 820E6698h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820E6698h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E6698h case   12:*/		return 0x820E669C;
		  /* 820E669Ch */ case   13:  		/* stwx R11, <#[R10 + R9]> */
		/* 820E669Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E669Ch case   13:*/		return 0x820E66A0;
	}
	return 0x820E66A0;
} // Block from 820E6668h-820E66A0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E66A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E66A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E66A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E66A0);
		  /* 820E66A0h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 820E66A0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 820E66A0h case    0:*/		return 0x820E66A4;
		  /* 820E66A4h */ case    1:  		/* li R5, 0 */
		/* 820E66A4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E66A4h case    1:*/		return 0x820E66A8;
		  /* 820E66A8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 820E66A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E66A8h case    2:*/		return 0x820E66AC;
		  /* 820E66ACh */ case    3:  		/* bc 12, CR6_EQ, 156 */
		/* 820E66ACh case    3:*/		if ( regs.CR[6].eq ) { return 0x820E6748;  }
		/* 820E66ACh case    3:*/		return 0x820E66B0;
		  /* 820E66B0h */ case    4:  		/* li R9, 0 */
		/* 820E66B0h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E66B0h case    4:*/		return 0x820E66B4;
		  /* 820E66B4h */ case    5:  		/* li R6, 1 */
		/* 820E66B4h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E66B4h case    5:*/		return 0x820E66B8;
		  /* 820E66B8h */ case    6:  		/* mr R7, R6 */
		/* 820E66B8h case    6:*/		regs.R7 = regs.R6;
		/* 820E66B8h case    6:*/		return 0x820E66BC;
		  /* 820E66BCh */ case    7:  		/* cmplw CR6, R6, R10 */
		/* 820E66BCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 820E66BCh case    7:*/		return 0x820E66C0;
		  /* 820E66C0h */ case    8:  		/* bc 4, CR6_LT, 116 */
		/* 820E66C0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x820E6734;  }
		/* 820E66C0h case    8:*/		return 0x820E66C4;
		  /* 820E66C4h */ case    9:  		/* addi R11, R9, 4 */
		/* 820E66C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x4);
		/* 820E66C4h case    9:*/		return 0x820E66C8;
		  /* 820E66C8h */ case   10:  		/* lwz R10, <#[R31 + 16]> */
		/* 820E66C8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 820E66C8h case   10:*/		return 0x820E66CC;
		  /* 820E66CCh */ case   11:  		/* lwz R8, <#[R28 + 20]> */
		/* 820E66CCh case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 820E66CCh case   11:*/		return 0x820E66D0;
		  /* 820E66D0h */ case   12:  		/* lwzx R4, <#[R9 + R10]> */
		/* 820E66D0h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820E66D0h case   12:*/		return 0x820E66D4;
		  /* 820E66D4h */ case   13:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E66D4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E66D4h case   13:*/		return 0x820E66D8;
		  /* 820E66D8h */ case   14:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 820E66D8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 820E66D8h case   14:*/		return 0x820E66DC;
		  /* 820E66DCh */ case   15:  		/* rlwinm R3, R10, 2, 0, 29 */
		/* 820E66DCh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R10);
		/* 820E66DCh case   15:*/		return 0x820E66E0;
		  /* 820E66E0h */ case   16:  		/* lwzx R10, <#[R4 + R8]> */
		/* 820E66E0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + regs.R8 + 0x00000000) );
		/* 820E66E0h case   16:*/		return 0x820E66E4;
		  /* 820E66E4h */ case   17:  		/* lwzx R8, <#[R3 + R8]> */
		/* 820E66E4h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + regs.R8 + 0x00000000) );
		/* 820E66E4h case   17:*/		return 0x820E66E8;
		  /* 820E66E8h */ case   18:  		/* lwz R4, <#[R10 + 16]> */
		/* 820E66E8h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000010) );
		/* 820E66E8h case   18:*/		return 0x820E66EC;
		  /* 820E66ECh */ case   19:  		/* lwz R3, <#[R8 + 16]> */
		/* 820E66ECh case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000010) );
		/* 820E66ECh case   19:*/		return 0x820E66F0;
		  /* 820E66F0h */ case   20:  		/* cmplw CR6, R4, R3 */
		/* 820E66F0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820E66F0h case   20:*/		return 0x820E66F4;
		  /* 820E66F4h */ case   21:  		/* bc 4, CR6_GT, 28 */
		/* 820E66F4h case   21:*/		if ( !regs.CR[6].gt ) { return 0x820E6710;  }
		/* 820E66F4h case   21:*/		return 0x820E66F8;
		  /* 820E66F8h */ case   22:  		/* lwz R4, <#[R31 + 16]> */
		/* 820E66F8h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 820E66F8h case   22:*/		return 0x820E66FC;
		  /* 820E66FCh */ case   23:  		/* lwzx R3, <#[R9 + R4]> */
		/* 820E66FCh case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820E66FCh case   23:*/		return 0x820E6700;
	}
	return 0x820E6700;
} // Block from 820E66A0h-820E6700h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E6700h
// Function '?MatchMinMax2@CShaderProgram@D3DXShader@@IAAJPAPAVCInstruction@2@0PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6700);
		  /* 820E6700h */ case    0:  		/* lwzx R30, <#[R11 + R4]> */
		/* 820E6700h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E6700h case    0:*/		return 0x820E6704;
		  /* 820E6704h */ case    1:  		/* stwx R3, <#[R11 + R4]> */
		/* 820E6704h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E6704h case    1:*/		return 0x820E6708;
		  /* 820E6708h */ case    2:  		/* lwz R4, <#[R31 + 16]> */
		/* 820E6708h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 820E6708h case    2:*/		return 0x820E670C;
		  /* 820E670Ch */ case    3:  		/* stwx R30, <#[R9 + R4]> */
		/* 820E670Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820E670Ch case    3:*/		return 0x820E6710;
	}
	return 0x820E6710;
} // Block from 820E6700h-820E6710h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E6710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6710);
		  /* 820E6710h */ case    0:  		/* lwz R10, <#[R10 + 16]> */
		/* 820E6710h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820E6710h case    0:*/		return 0x820E6714;
		  /* 820E6714h */ case    1:  		/* lwz R8, <#[R8 + 16]> */
		/* 820E6714h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 820E6714h case    1:*/		return 0x820E6718;
		  /* 820E6718h */ case    2:  		/* cmplw CR6, R10, R8 */
		/* 820E6718h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E6718h case    2:*/		return 0x820E671C;
		  /* 820E671Ch */ case    3:  		/* bc 12, CR6_EQ, 144 */
		/* 820E671Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E67AC;  }
		/* 820E671Ch case    3:*/		return 0x820E6720;
		  /* 820E6720h */ case    4:  		/* lwz R10, <#[R31 + 12]> */
		/* 820E6720h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 820E6720h case    4:*/		return 0x820E6724;
		  /* 820E6724h */ case    5:  		/* addi R7, R7, 1 */
		/* 820E6724h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820E6724h case    5:*/		return 0x820E6728;
		  /* 820E6728h */ case    6:  		/* addi R11, R11, 4 */
		/* 820E6728h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E6728h case    6:*/		return 0x820E672C;
		  /* 820E672Ch */ case    7:  		/* cmplw CR6, R7, R10 */
		/* 820E672Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 820E672Ch case    7:*/		return 0x820E6730;
		  /* 820E6730h */ case    8:  		/* bc 12, CR6_LT, -104 */
		/* 820E6730h case    8:*/		if ( regs.CR[6].lt ) { return 0x820E66C8;  }
		/* 820E6730h case    8:*/		return 0x820E6734;
	}
	return 0x820E6734;
} // Block from 820E6710h-820E6734h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E6734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6734);
		  /* 820E6734h */ case    0:  		/* addi R5, R5, 1 */
		/* 820E6734h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820E6734h case    0:*/		return 0x820E6738;
		  /* 820E6738h */ case    1:  		/* addi R6, R6, 1 */
		/* 820E6738h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820E6738h case    1:*/		return 0x820E673C;
		  /* 820E673Ch */ case    2:  		/* addi R9, R9, 4 */
		/* 820E673Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E673Ch case    2:*/		return 0x820E6740;
		  /* 820E6740h */ case    3:  		/* cmplw CR6, R5, R10 */
		/* 820E6740h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 820E6740h case    3:*/		return 0x820E6744;
		  /* 820E6744h */ case    4:  		/* bc 12, CR6_LT, -140 */
		/* 820E6744h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E66B8;  }
		/* 820E6744h case    4:*/		return 0x820E6748;
	}
	return 0x820E6748;
} // Block from 820E6734h-820E6748h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E6748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6748);
		  /* 820E6748h */ case    0:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E6748h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6748h case    0:*/		return 0x820E674C;
		  /* 820E674Ch */ case    1:  		/* lwz R3, <#[R31 + 8]> */
		/* 820E674Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E674Ch case    1:*/		return 0x820E6750;
		  /* 820E6750h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 820E6750h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6750h case    2:*/		return 0x820E6754;
		  /* 820E6754h */ case    3:  		/* lwz R4, <#[R11 + 8]> */
		/* 820E6754h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 820E6754h case    3:*/		return 0x820E6758;
		  /* 820E6758h */ case    4:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 820E6758h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 820E6758h case    4:*/		return 0x820E675C;
		  /* 820E675Ch */ case    5:  		/* bl -347564 */
		/* 820E675Ch case    5:*/		regs.LR = 0x820E6760; return 0x820919B0;
		/* 820E675Ch case    5:*/		return 0x820E6760;
		  /* 820E6760h */ case    6:  		/* lwz R11, <#[R28 + 256]> */
		/* 820E6760h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000100) );
		/* 820E6760h case    6:*/		return 0x820E6764;
		  /* 820E6764h */ case    7:  		/* lwz R10, <#[R28 + 24]> */
		/* 820E6764h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 820E6764h case    7:*/		return 0x820E6768;
		  /* 820E6768h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6768h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6768h case    8:*/		return 0x820E676C;
		  /* 820E676Ch */ case    9:  		/* lwzx R30, <#[R11 + R10]> */
		/* 820E676Ch case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E676Ch case    9:*/		return 0x820E6770;
		  /* 820E6770h */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 820E6770h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E6770h case   10:*/		return 0x820E6774;
		  /* 820E6774h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 820E6774h case   11:*/		if ( regs.CR[6].eq ) { return 0x820E6788;  }
		/* 820E6774h case   11:*/		return 0x820E6778;
		  /* 820E6778h */ case   12:  		/* mr R3, R30 */
		/* 820E6778h case   12:*/		regs.R3 = regs.R30;
		/* 820E6778h case   12:*/		return 0x820E677C;
		  /* 820E677Ch */ case   13:  		/* bl 1272900 */
		/* 820E677Ch case   13:*/		regs.LR = 0x820E6780; return 0x8221D3C0;
		/* 820E677Ch case   13:*/		return 0x820E6780;
		  /* 820E6780h */ case   14:  		/* mr R3, R30 */
		/* 820E6780h case   14:*/		regs.R3 = regs.R30;
		/* 820E6780h case   14:*/		return 0x820E6784;
		  /* 820E6784h */ case   15:  		/* bl 89708 */
		/* 820E6784h case   15:*/		regs.LR = 0x820E6788; return 0x820FC5F0;
		/* 820E6784h case   15:*/		return 0x820E6788;
	}
	return 0x820E6788;
} // Block from 820E6748h-820E6788h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E6788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6788);
		  /* 820E6788h */ case    0:  		/* lwz R11, <#[R28 + 256]> */
		/* 820E6788h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000100) );
		/* 820E6788h case    0:*/		return 0x820E678C;
		  /* 820E678Ch */ case    1:  		/* li R10, 0 */
		/* 820E678Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E678Ch case    1:*/		return 0x820E6790;
		  /* 820E6790h */ case    2:  		/* lwz R9, <#[R28 + 24]> */
		/* 820E6790h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000018) );
		/* 820E6790h case    2:*/		return 0x820E6794;
		  /* 820E6794h */ case    3:  		/* li R3, 0 */
		/* 820E6794h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E6794h case    3:*/		return 0x820E6798;
		  /* 820E6798h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6798h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6798h case    4:*/		return 0x820E679C;
		  /* 820E679Ch */ case    5:  		/* stwx R31, <#[R11 + R9]> */
		/* 820E679Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E679Ch case    5:*/		return 0x820E67A0;
		  /* 820E67A0h */ case    6:  		/* stw R10, <#[R29]> */
		/* 820E67A0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 820E67A0h case    6:*/		return 0x820E67A4;
	}
	return 0x820E67A4;
} // Block from 820E6788h-820E67A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E67A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E67A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E67A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E67A4);
		  /* 820E67A4h */ case    0:  		/* addi R1, R1, 128 */
		/* 820E67A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820E67A4h case    0:*/		return 0x820E67A8;
		  /* 820E67A8h */ case    1:  		/* b -349444 */
		/* 820E67A8h case    1:*/		return 0x820912A4;
		/* 820E67A8h case    1:*/		return 0x820E67AC;
	}
	return 0x820E67AC;
} // Block from 820E67A4h-820E67ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E67ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E67AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E67AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E67AC);
		  /* 820E67ACh */ case    0:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E67ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E67ACh case    0:*/		return 0x820E67B0;
		  /* 820E67B0h */ case    1:  		/* lis R10, -32254 */
		/* 820E67B0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E67B0h case    1:*/		return 0x820E67B4;
		  /* 820E67B4h */ case    2:  		/* li R5, 4822 */
		/* 820E67B4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x12D6);
		/* 820E67B4h case    2:*/		return 0x820E67B8;
		  /* 820E67B8h */ case    3:  		/* addi R6, R10, -18344 */
		/* 820E67B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFB858);
		/* 820E67B8h case    3:*/		return 0x820E67BC;
		  /* 820E67BCh */ case    4:  		/* mr R3, R28 */
		/* 820E67BCh case    4:*/		regs.R3 = regs.R28;
		/* 820E67BCh case    4:*/		return 0x820E67C0;
		  /* 820E67C0h */ case    5:  		/* lwz R4, <#[R11 + 60]> */
		/* 820E67C0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E67C0h case    5:*/		return 0x820E67C4;
		  /* 820E67C4h */ case    6:  		/* bl 163692 */
		/* 820E67C4h case    6:*/		regs.LR = 0x820E67C8; return 0x8210E730;
		/* 820E67C4h case    6:*/		return 0x820E67C8;
		  /* 820E67C8h */ case    7:  		/* mr R3, R29 */
		/* 820E67C8h case    7:*/		regs.R3 = regs.R29;
		/* 820E67C8h case    7:*/		return 0x820E67CC;
		  /* 820E67CCh */ case    8:  		/* bl 1272820 */
		/* 820E67CCh case    8:*/		regs.LR = 0x820E67D0; return 0x8221D3C0;
		/* 820E67CCh case    8:*/		return 0x820E67D0;
		  /* 820E67D0h */ case    9:  		/* mr R3, R29 */
		/* 820E67D0h case    9:*/		regs.R3 = regs.R29;
		/* 820E67D0h case    9:*/		return 0x820E67D4;
		  /* 820E67D4h */ case   10:  		/* bl 89628 */
		/* 820E67D4h case   10:*/		regs.LR = 0x820E67D8; return 0x820FC5F0;
		/* 820E67D4h case   10:*/		return 0x820E67D8;
		  /* 820E67D8h */ case   11:  		/* lis R3, -32768 */
		/* 820E67D8h case   11:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820E67D8h case   11:*/		return 0x820E67DC;
		  /* 820E67DCh */ case   12:  		/* ori R3, R3, 16389 */
		/* 820E67DCh case   12:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820E67DCh case   12:*/		return 0x820E67E0;
		  /* 820E67E0h */ case   13:  		/* b -60 */
		/* 820E67E0h case   13:*/		return 0x820E67A4;
		/* 820E67E0h case   13:*/		return 0x820E67E4;
		  /* 820E67E4h */ case   14:  		/* nop */
		/* 820E67E4h case   14:*/		cpu::op::nop();
		/* 820E67E4h case   14:*/		return 0x820E67E8;
	}
	return 0x820E67E8;
} // Block from 820E67ACh-820E67E8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E67E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E67E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E67E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E67E8);
		  /* 820E67E8h */ case    0:  		/* mfspr R12, LR */
		/* 820E67E8h case    0:*/		regs.R12 = regs.LR;
		/* 820E67E8h case    0:*/		return 0x820E67EC;
		  /* 820E67ECh */ case    1:  		/* bl -349596 */
		/* 820E67ECh case    1:*/		regs.LR = 0x820E67F0; return 0x82091250;
		/* 820E67ECh case    1:*/		return 0x820E67F0;
		  /* 820E67F0h */ case    2:  		/* stwu R1, <#[R1 - 432]> */
		/* 820E67F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 820E67F0h case    2:*/		return 0x820E67F4;
		  /* 820E67F4h */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E67F4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E67F4h case    3:*/		return 0x820E67F8;
		  /* 820E67F8h */ case    4:  		/* lis R11, -32254 */
		/* 820E67F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E67F8h case    4:*/		return 0x820E67FC;
		  /* 820E67FCh */ case    5:  		/* li R8, 3 */
		/* 820E67FCh case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E67FCh case    5:*/		return 0x820E6800;
		  /* 820E6800h */ case    6:  		/* addi R29, R11, -22536 */
		/* 820E6800h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFA7F8);
		/* 820E6800h case    6:*/		return 0x820E6804;
		  /* 820E6804h */ case    7:  		/* li R31, 0 */
		/* 820E6804h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E6804h case    7:*/		return 0x820E6808;
		  /* 820E6808h */ case    8:  		/* stw R8, <#[R1 + 124]> */
		/* 820E6808h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E6808h case    8:*/		return 0x820E680C;
		  /* 820E680Ch */ case    9:  		/* li R27, 1 */
		/* 820E680Ch case    9:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820E680Ch case    9:*/		return 0x820E6810;
		  /* 820E6810h */ case   10:  		/* lwz R10, <#[R4]> */
		/* 820E6810h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820E6810h case   10:*/		return 0x820E6814;
		  /* 820E6814h */ case   11:  		/* li R11, 2 */
		/* 820E6814h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E6814h case   11:*/		return 0x820E6818;
		  /* 820E6818h */ case   12:  		/* addi R5, R29, -192 */
		/* 820E6818h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFF40);
		/* 820E6818h case   12:*/		return 0x820E681C;
		  /* 820E681Ch */ case   13:  		/* stw R31, <#[R1 + 96]> */
		/* 820E681Ch case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E681Ch case   13:*/		return 0x820E6820;
		  /* 820E6820h */ case   14:  		/* rlwinm R30, R10, 0, 12, 31 */
		/* 820E6820h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R10);
		/* 820E6820h case   14:*/		return 0x820E6824;
		  /* 820E6824h */ case   15:  		/* stw R31, <#[R1 + 112]> */
		/* 820E6824h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 820E6824h case   15:*/		return 0x820E6828;
		  /* 820E6828h */ case   16:  		/* addi R9, R1, 112 */
		/* 820E6828h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E6828h case   16:*/		return 0x820E682C;
		  /* 820E682Ch */ case   17:  		/* stw R27, <#[R1 + 116]> */
		/* 820E682Ch case   17:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000074) );
		/* 820E682Ch case   17:*/		return 0x820E6830;
		  /* 820E6830h */ case   18:  		/* addi R8, R1, 144 */
		/* 820E6830h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E6830h case   18:*/		return 0x820E6834;
		  /* 820E6834h */ case   19:  		/* stw R11, <#[R1 + 120]> */
		/* 820E6834h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E6834h case   19:*/		return 0x820E6838;
		  /* 820E6838h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E6838h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E6838h case   20:*/		return 0x820E683C;
		  /* 820E683Ch */ case   21:  		/* stw R27, <#[R1 + 84]> */
		/* 820E683Ch case   21:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 820E683Ch case   21:*/		return 0x820E6840;
		  /* 820E6840h */ case   22:  		/* addi R6, R1, 304 */
		/* 820E6840h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E6840h case   22:*/		return 0x820E6844;
		  /* 820E6844h */ case   23:  		/* mr R10, R30 */
		/* 820E6844h case   23:*/		regs.R10 = regs.R30;
		/* 820E6844h case   23:*/		return 0x820E6848;
		  /* 820E6848h */ case   24:  		/* mr R28, R3 */
		/* 820E6848h case   24:*/		regs.R28 = regs.R3;
		/* 820E6848h case   24:*/		return 0x820E684C;
		  /* 820E684Ch */ case   25:  		/* bl -11212 */
		/* 820E684Ch case   25:*/		regs.LR = 0x820E6850; return 0x820E3C80;
		/* 820E684Ch case   25:*/		return 0x820E6850;
		  /* 820E6850h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E6850h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E6850h case   26:*/		return 0x820E6854;
		  /* 820E6854h */ case   27:  		/* bc 4, CR0_EQ, 236 */
		/* 820E6854h case   27:*/		if ( !regs.CR[0].eq ) { return 0x820E6940;  }
		/* 820E6854h case   27:*/		return 0x820E6858;
		  /* 820E6858h */ case   28:  		/* li R3, 116 */
		/* 820E6858h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E6858h case   28:*/		return 0x820E685C;
		  /* 820E685Ch */ case   29:  		/* bl 89404 */
		/* 820E685Ch case   29:*/		regs.LR = 0x820E6860; return 0x820FC598;
		/* 820E685Ch case   29:*/		return 0x820E6860;
		  /* 820E6860h */ case   30:  		/* cmplwi CR0, R3, 0 */
		/* 820E6860h case   30:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E6860h case   30:*/		return 0x820E6864;
		  /* 820E6864h */ case   31:  		/* bc 12, CR0_EQ, 12 */
		/* 820E6864h case   31:*/		if ( regs.CR[0].eq ) { return 0x820E6870;  }
		/* 820E6864h case   31:*/		return 0x820E6868;
		  /* 820E6868h */ case   32:  		/* bl 87608 */
		/* 820E6868h case   32:*/		regs.LR = 0x820E686C; return 0x820FBEA0;
		/* 820E6868h case   32:*/		return 0x820E686C;
		  /* 820E686Ch */ case   33:  		/* mr R31, R3 */
		/* 820E686Ch case   33:*/		regs.R31 = regs.R3;
		/* 820E686Ch case   33:*/		return 0x820E6870;
	}
	return 0x820E6870;
} // Block from 820E67E8h-820E6870h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820E6870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6870);
		  /* 820E6870h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E6870h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E6870h case    0:*/		return 0x820E6874;
		  /* 820E6874h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E6874h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E6884;  }
		/* 820E6874h case    1:*/		return 0x820E6878;
		  /* 820E6878h */ case    2:  		/* lis R3, -32761 */
		/* 820E6878h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E6878h case    2:*/		return 0x820E687C;
		  /* 820E687Ch */ case    3:  		/* ori R3, R3, 14 */
		/* 820E687Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E687Ch case    3:*/		return 0x820E6880;
		  /* 820E6880h */ case    4:  		/* b 900 */
		/* 820E6880h case    4:*/		return 0x820E6C04;
		/* 820E6880h case    4:*/		return 0x820E6884;
	}
	return 0x820E6884;
} // Block from 820E6870h-820E6884h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E6884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6884);
		  /* 820E6884h */ case    0:  		/* mr R4, R30 */
		/* 820E6884h case    0:*/		regs.R4 = regs.R30;
		/* 820E6884h case    0:*/		return 0x820E6888;
		  /* 820E6888h */ case    1:  		/* li R11, 923 */
		/* 820E6888h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x39B);
		/* 820E6888h case    1:*/		return 0x820E688C;
		  /* 820E688Ch */ case    2:  		/* rlwimi R4, R11, 21, 0, 11 */
		/* 820E688Ch case    2:*/		cpu::op::rlwimi<0,21,0,11>(regs,&regs.R4,regs.R11);
		/* 820E688Ch case    2:*/		return 0x820E6890;
		  /* 820E6890h */ case    3:  		/* li R7, 0 */
		/* 820E6890h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E6890h case    3:*/		return 0x820E6894;
		  /* 820E6894h */ case    4:  		/* mr R6, R30 */
		/* 820E6894h case    4:*/		regs.R6 = regs.R30;
		/* 820E6894h case    4:*/		return 0x820E6898;
		  /* 820E6898h */ case    5:  		/* rlwinm R5, R30, 1, 0, 30 */
		/* 820E6898h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R30);
		/* 820E6898h case    5:*/		return 0x820E689C;
		  /* 820E689Ch */ case    6:  		/* mr R3, R31 */
		/* 820E689Ch case    6:*/		regs.R3 = regs.R31;
		/* 820E689Ch case    6:*/		return 0x820E68A0;
		  /* 820E68A0h */ case    7:  		/* bl 89488 */
		/* 820E68A0h case    7:*/		regs.LR = 0x820E68A4; return 0x820FC630;
		/* 820E68A0h case    7:*/		return 0x820E68A4;
		  /* 820E68A4h */ case    8:  		/* or. R29, R3, R3 */
		/* 820E68A4h case    8:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E68A4h case    8:*/		return 0x820E68A8;
		  /* 820E68A8h */ case    9:  		/* mr R3, R31 */
		/* 820E68A8h case    9:*/		regs.R3 = regs.R31;
		/* 820E68A8h case    9:*/		return 0x820E68AC;
		  /* 820E68ACh */ case   10:  		/* bc 4, CR0_LT, 24 */
		/* 820E68ACh case   10:*/		if ( !regs.CR[0].lt ) { return 0x820E68C4;  }
		/* 820E68ACh case   10:*/		return 0x820E68B0;
		  /* 820E68B0h */ case   11:  		/* bl 1272592 */
		/* 820E68B0h case   11:*/		regs.LR = 0x820E68B4; return 0x8221D3C0;
		/* 820E68B0h case   11:*/		return 0x820E68B4;
		  /* 820E68B4h */ case   12:  		/* mr R3, R31 */
		/* 820E68B4h case   12:*/		regs.R3 = regs.R31;
		/* 820E68B4h case   12:*/		return 0x820E68B8;
		  /* 820E68B8h */ case   13:  		/* bl 89400 */
		/* 820E68B8h case   13:*/		regs.LR = 0x820E68BC; return 0x820FC5F0;
		/* 820E68B8h case   13:*/		return 0x820E68BC;
		  /* 820E68BCh */ case   14:  		/* mr R3, R29 */
		/* 820E68BCh case   14:*/		regs.R3 = regs.R29;
		/* 820E68BCh case   14:*/		return 0x820E68C0;
		  /* 820E68C0h */ case   15:  		/* b 836 */
		/* 820E68C0h case   15:*/		return 0x820E6C04;
		/* 820E68C0h case   15:*/		return 0x820E68C4;
	}
	return 0x820E68C4;
} // Block from 820E6884h-820E68C4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E68C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E68C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E68C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E68C4);
		  /* 820E68C4h */ case    0:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E68C4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E68C4h case    0:*/		return 0x820E68C8;
		  /* 820E68C8h */ case    1:  		/* bl 87592 */
		/* 820E68C8h case    1:*/		regs.LR = 0x820E68CC; return 0x820FBEF0;
		/* 820E68C8h case    1:*/		return 0x820E68CC;
		  /* 820E68CCh */ case    2:  		/* or. R29, R3, R3 */
		/* 820E68CCh case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E68CCh case    2:*/		return 0x820E68D0;
		  /* 820E68D0h */ case    3:  		/* bc 4, CR0_LT, 12 */
		/* 820E68D0h case    3:*/		if ( !regs.CR[0].lt ) { return 0x820E68DC;  }
		/* 820E68D0h case    3:*/		return 0x820E68D4;
		  /* 820E68D4h */ case    4:  		/* mr R3, R31 */
		/* 820E68D4h case    4:*/		regs.R3 = regs.R31;
		/* 820E68D4h case    4:*/		return 0x820E68D8;
		  /* 820E68D8h */ case    5:  		/* b -40 */
		/* 820E68D8h case    5:*/		return 0x820E68B0;
		/* 820E68D8h case    5:*/		return 0x820E68DC;
	}
	return 0x820E68DC;
} // Block from 820E68C4h-820E68DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E68DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E68DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E68DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E68DC);
		  /* 820E68DCh */ case    0:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E68DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E68DCh case    0:*/		return 0x820E68E0;
		  /* 820E68E0h */ case    1:  		/* rlwinm R30, R30, 2, 0, 29 */
		/* 820E68E0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R30);
		/* 820E68E0h case    1:*/		return 0x820E68E4;
		  /* 820E68E4h */ case    2:  		/* lwz R3, <#[R31 + 16]> */
		/* 820E68E4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820E68E4h case    2:*/		return 0x820E68E8;
		  /* 820E68E8h */ case    3:  		/* mr R5, R30 */
		/* 820E68E8h case    3:*/		regs.R5 = regs.R30;
		/* 820E68E8h case    3:*/		return 0x820E68EC;
		  /* 820E68ECh */ case    4:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E68ECh case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E68ECh case    4:*/		return 0x820E68F0;
		  /* 820E68F0h */ case    5:  		/* bl -347968 */
		/* 820E68F0h case    5:*/		regs.LR = 0x820E68F4; return 0x820919B0;
		/* 820E68F0h case    5:*/		return 0x820E68F4;
		  /* 820E68F4h */ case    6:  		/* mr R5, R30 */
		/* 820E68F4h case    6:*/		regs.R5 = regs.R30;
		/* 820E68F4h case    6:*/		return 0x820E68F8;
		  /* 820E68F8h */ case    7:  		/* lwz R3, <#[R31 + 8]> */
		/* 820E68F8h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E68F8h case    7:*/		return 0x820E68FC;
		  /* 820E68FCh */ case    8:  		/* addi R4, R1, 144 */
		/* 820E68FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 820E68FCh case    8:*/		return 0x820E6900;
		  /* 820E6900h */ case    9:  		/* bl -347984 */
		/* 820E6900h case    9:*/		regs.LR = 0x820E6904; return 0x820919B0;
		/* 820E6900h case    9:*/		return 0x820E6904;
		  /* 820E6904h */ case   10:  		/* addi R4, R1, 160 */
		/* 820E6904h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820E6904h case   10:*/		return 0x820E6908;
		  /* 820E6908h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E6908h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E6908h case   11:*/		return 0x820E690C;
		  /* 820E690Ch */ case   12:  		/* mr R5, R30 */
		/* 820E690Ch case   12:*/		regs.R5 = regs.R30;
		/* 820E690Ch case   12:*/		return 0x820E6910;
		  /* 820E6910h */ case   13:  		/* add R3, R30, R11 */
		/* 820E6910h case   13:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 820E6910h case   13:*/		return 0x820E6914;
		  /* 820E6914h */ case   14:  		/* bl -348004 */
		/* 820E6914h case   14:*/		regs.LR = 0x820E6918; return 0x820919B0;
		/* 820E6914h case   14:*/		return 0x820E6918;
		  /* 820E6918h */ case   15:  		/* mr R4, R31 */
		/* 820E6918h case   15:*/		regs.R4 = regs.R31;
		/* 820E6918h case   15:*/		return 0x820E691C;
		  /* 820E691Ch */ case   16:  		/* lwz R3, <#[R28 + 260]> */
		/* 820E691Ch case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000104) );
		/* 820E691Ch case   16:*/		return 0x820E6920;
		  /* 820E6920h */ case   17:  		/* bl 90160 */
		/* 820E6920h case   17:*/		regs.LR = 0x820E6924; return 0x820FC950;
		/* 820E6920h case   17:*/		return 0x820E6924;
		  /* 820E6924h */ case   18:  		/* mr R30, R3 */
		/* 820E6924h case   18:*/		regs.R30 = regs.R3;
		/* 820E6924h case   18:*/		return 0x820E6928;
		  /* 820E6928h */ case   19:  		/* mr R3, R31 */
		/* 820E6928h case   19:*/		regs.R3 = regs.R31;
		/* 820E6928h case   19:*/		return 0x820E692C;
		  /* 820E692Ch */ case   20:  		/* bl 1272468 */
		/* 820E692Ch case   20:*/		regs.LR = 0x820E6930; return 0x8221D3C0;
		/* 820E692Ch case   20:*/		return 0x820E6930;
		  /* 820E6930h */ case   21:  		/* mr R3, R31 */
		/* 820E6930h case   21:*/		regs.R3 = regs.R31;
		/* 820E6930h case   21:*/		return 0x820E6934;
		  /* 820E6934h */ case   22:  		/* bl 89276 */
		/* 820E6934h case   22:*/		regs.LR = 0x820E6938; return 0x820FC5F0;
		/* 820E6934h case   22:*/		return 0x820E6938;
		  /* 820E6938h */ case   23:  		/* mr R3, R30 */
		/* 820E6938h case   23:*/		regs.R3 = regs.R30;
		/* 820E6938h case   23:*/		return 0x820E693C;
		  /* 820E693Ch */ case   24:  		/* b 712 */
		/* 820E693Ch case   24:*/		return 0x820E6C04;
		/* 820E693Ch case   24:*/		return 0x820E6940;
	}
	return 0x820E6940;
} // Block from 820E68DCh-820E6940h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E6940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6940);
		  /* 820E6940h */ case    0:  		/* addi R5, R29, -96 */
		/* 820E6940h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFFA0);
		/* 820E6940h case    0:*/		return 0x820E6944;
		  /* 820E6944h */ case    1:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E6944h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6944h case    1:*/		return 0x820E6948;
		  /* 820E6948h */ case    2:  		/* mr R10, R30 */
		/* 820E6948h case    2:*/		regs.R10 = regs.R30;
		/* 820E6948h case    2:*/		return 0x820E694C;
		  /* 820E694Ch */ case    3:  		/* stw R27, <#[R1 + 84]> */
		/* 820E694Ch case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 820E694Ch case    3:*/		return 0x820E6950;
		  /* 820E6950h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E6950h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E6950h case    4:*/		return 0x820E6954;
		  /* 820E6954h */ case    5:  		/* addi R8, R1, 144 */
		/* 820E6954h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E6954h case    5:*/		return 0x820E6958;
		  /* 820E6958h */ case    6:  		/* addi R7, R1, 96 */
		/* 820E6958h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E6958h case    6:*/		return 0x820E695C;
		  /* 820E695Ch */ case    7:  		/* addi R6, R1, 304 */
		/* 820E695Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E695Ch case    7:*/		return 0x820E6960;
		  /* 820E6960h */ case    8:  		/* mr R3, R28 */
		/* 820E6960h case    8:*/		regs.R3 = regs.R28;
		/* 820E6960h case    8:*/		return 0x820E6964;
		  /* 820E6964h */ case    9:  		/* bl -11492 */
		/* 820E6964h case    9:*/		regs.LR = 0x820E6968; return 0x820E3C80;
		/* 820E6964h case    9:*/		return 0x820E6968;
		  /* 820E6968h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E6968h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E6968h case   10:*/		return 0x820E696C;
		  /* 820E696Ch */ case   11:  		/* bc 4, CR0_EQ, 52 */
		/* 820E696Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x820E69A0;  }
		/* 820E696Ch case   11:*/		return 0x820E6970;
		  /* 820E6970h */ case   12:  		/* li R3, 116 */
		/* 820E6970h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E6970h case   12:*/		return 0x820E6974;
		  /* 820E6974h */ case   13:  		/* bl 89124 */
		/* 820E6974h case   13:*/		regs.LR = 0x820E6978; return 0x820FC598;
		/* 820E6974h case   13:*/		return 0x820E6978;
		  /* 820E6978h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 820E6978h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E6978h case   14:*/		return 0x820E697C;
		  /* 820E697Ch */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 820E697Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x820E6988;  }
		/* 820E697Ch case   15:*/		return 0x820E6980;
		  /* 820E6980h */ case   16:  		/* bl 87328 */
		/* 820E6980h case   16:*/		regs.LR = 0x820E6984; return 0x820FBEA0;
		/* 820E6980h case   16:*/		return 0x820E6984;
		  /* 820E6984h */ case   17:  		/* mr R31, R3 */
		/* 820E6984h case   17:*/		regs.R31 = regs.R3;
		/* 820E6984h case   17:*/		return 0x820E6988;
	}
	return 0x820E6988;
} // Block from 820E6940h-820E6988h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E6988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6988);
		  /* 820E6988h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E6988h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E6988h case    0:*/		return 0x820E698C;
		  /* 820E698Ch */ case    1:  		/* bc 12, CR6_EQ, -276 */
		/* 820E698Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6878;  }
		/* 820E698Ch case    1:*/		return 0x820E6990;
		  /* 820E6990h */ case    2:  		/* mr R4, R30 */
		/* 820E6990h case    2:*/		regs.R4 = regs.R30;
		/* 820E6990h case    2:*/		return 0x820E6994;
		  /* 820E6994h */ case    3:  		/* li R11, 1845 */
		/* 820E6994h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x735);
		/* 820E6994h case    3:*/		return 0x820E6998;
		  /* 820E6998h */ case    4:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 820E6998h case    4:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 820E6998h case    4:*/		return 0x820E699C;
		  /* 820E699Ch */ case    5:  		/* b -268 */
		/* 820E699Ch case    5:*/		return 0x820E6890;
		/* 820E699Ch case    5:*/		return 0x820E69A0;
	}
	return 0x820E69A0;
} // Block from 820E6988h-820E69A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E69A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E69A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E69A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E69A0);
		  /* 820E69A0h */ case    0:  		/* mr R5, R29 */
		/* 820E69A0h case    0:*/		regs.R5 = regs.R29;
		/* 820E69A0h case    0:*/		return 0x820E69A4;
		  /* 820E69A4h */ case    1:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E69A4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E69A4h case    1:*/		return 0x820E69A8;
		  /* 820E69A8h */ case    2:  		/* mr R10, R30 */
		/* 820E69A8h case    2:*/		regs.R10 = regs.R30;
		/* 820E69A8h case    2:*/		return 0x820E69AC;
		  /* 820E69ACh */ case    3:  		/* stw R27, <#[R1 + 84]> */
		/* 820E69ACh case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 820E69ACh case    3:*/		return 0x820E69B0;
		  /* 820E69B0h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E69B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E69B0h case    4:*/		return 0x820E69B4;
		  /* 820E69B4h */ case    5:  		/* addi R8, R1, 144 */
		/* 820E69B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E69B4h case    5:*/		return 0x820E69B8;
		  /* 820E69B8h */ case    6:  		/* addi R7, R1, 96 */
		/* 820E69B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E69B8h case    6:*/		return 0x820E69BC;
		  /* 820E69BCh */ case    7:  		/* addi R6, R1, 304 */
		/* 820E69BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E69BCh case    7:*/		return 0x820E69C0;
		  /* 820E69C0h */ case    8:  		/* mr R3, R28 */
		/* 820E69C0h case    8:*/		regs.R3 = regs.R28;
		/* 820E69C0h case    8:*/		return 0x820E69C4;
		  /* 820E69C4h */ case    9:  		/* bl -11588 */
		/* 820E69C4h case    9:*/		regs.LR = 0x820E69C8; return 0x820E3C80;
		/* 820E69C4h case    9:*/		return 0x820E69C8;
		  /* 820E69C8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E69C8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E69C8h case   10:*/		return 0x820E69CC;
		  /* 820E69CCh */ case   11:  		/* bc 4, CR0_EQ, 568 */
		/* 820E69CCh case   11:*/		if ( !regs.CR[0].eq ) { return 0x820E6C04;  }
		/* 820E69CCh case   11:*/		return 0x820E69D0;
		  /* 820E69D0h */ case   12:  		/* lwz R10, <#[R1 + 176]> */
		/* 820E69D0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 820E69D0h case   12:*/		return 0x820E69D4;
		  /* 820E69D4h */ case   13:  		/* lis R11, 8 */
		/* 820E69D4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0x8);
		/* 820E69D4h case   13:*/		return 0x820E69D8;
		  /* 820E69D8h */ case   14:  		/* lwz R26, <#[R28 + 20]> */
		/* 820E69D8h case   14:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R28 + 0x00000014) );
		/* 820E69D8h case   14:*/		return 0x820E69DC;
		  /* 820E69DCh */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E69DCh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E69DCh case   15:*/		return 0x820E69E0;
		  /* 820E69E0h */ case   16:  		/* lwzx R10, <#[R10 + R26]> */
		/* 820E69E0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 820E69E0h case   16:*/		return 0x820E69E4;
		  /* 820E69E4h */ case   17:  		/* lwz R10, <#[R10 + 60]> */
		/* 820E69E4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820E69E4h case   17:*/		return 0x820E69E8;
		  /* 820E69E8h */ case   18:  		/* cmplw CR6, R10, R11 */
		/* 820E69E8h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E69E8h case   18:*/		return 0x820E69EC;
		  /* 820E69ECh */ case   19:  		/* bc 4, CR6_EQ, 80 */
		/* 820E69ECh case   19:*/		if ( !regs.CR[6].eq ) { return 0x820E6A3C;  }
		/* 820E69ECh case   19:*/		return 0x820E69F0;
		  /* 820E69F0h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820E69F0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E69F0h case   20:*/		return 0x820E69F4;
		  /* 820E69F4h */ case   21:  		/* bc 12, CR6_EQ, 168 */
		/* 820E69F4h case   21:*/		if ( regs.CR[6].eq ) { return 0x820E6A9C;  }
		/* 820E69F4h case   21:*/		return 0x820E69F8;
		  /* 820E69F8h */ case   22:  		/* addi R4, R1, 192 */
		/* 820E69F8h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820E69F8h case   22:*/		return 0x820E69FC;
		  /* 820E69FCh */ case   23:  		/* addi R3, R1, 112 */
		/* 820E69FCh case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820E69FCh case   23:*/		return 0x820E6A00;
		  /* 820E6A00h */ case   24:  		/* rlwinm R5, R30, 2, 0, 29 */
		/* 820E6A00h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R30);
		/* 820E6A00h case   24:*/		return 0x820E6A04;
		  /* 820E6A04h */ case   25:  		/* mr R29, R30 */
		/* 820E6A04h case   25:*/		regs.R29 = regs.R30;
		/* 820E6A04h case   25:*/		return 0x820E6A08;
		  /* 820E6A08h */ case   26:  		/* bl -347088 */
		/* 820E6A08h case   26:*/		regs.LR = 0x820E6A0C; return 0x82091E38;
		/* 820E6A08h case   26:*/		return 0x820E6A0C;
		  /* 820E6A0Ch */ case   27:  		/* mr R11, R31 */
		/* 820E6A0Ch case   27:*/		regs.R11 = regs.R31;
		/* 820E6A0Ch case   27:*/		return 0x820E6A10;
		  /* 820E6A10h */ case   28:  		/* addi R10, R1, 176 */
		/* 820E6A10h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 820E6A10h case   28:*/		return 0x820E6A14;
		  /* 820E6A14h */ case   29:  		/* addi R9, R1, 128 */
		/* 820E6A14h case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E6A14h case   29:*/		return 0x820E6A18;
		  /* 820E6A18h */ case   30:  		/* addic. R29, R29, -1 */
		/* 820E6A18h case   30:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 820E6A18h case   30:*/		return 0x820E6A1C;
		  /* 820E6A1Ch */ case   31:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E6A1Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E6A1Ch case   31:*/		return 0x820E6A20;
		  /* 820E6A20h */ case   32:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6A20h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6A20h case   32:*/		return 0x820E6A24;
		  /* 820E6A24h */ case   33:  		/* lwzx R10, <#[R10 + R26]> */
		/* 820E6A24h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 820E6A24h case   33:*/		return 0x820E6A28;
		  /* 820E6A28h */ case   34:  		/* lwz R10, <#[R10 + 56]> */
		/* 820E6A28h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 820E6A28h case   34:*/		return 0x820E6A2C;
		  /* 820E6A2Ch */ case   35:  		/* stwx R10, <#[R11 + R9]> */
		/* 820E6A2Ch case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E6A2Ch case   35:*/		return 0x820E6A30;
		  /* 820E6A30h */ case   36:  		/* addi R11, R11, 4 */
		/* 820E6A30h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E6A30h case   36:*/		return 0x820E6A34;
		  /* 820E6A34h */ case   37:  		/* bc 4, CR0_EQ, -36 */
		/* 820E6A34h case   37:*/		if ( !regs.CR[0].eq ) { return 0x820E6A10;  }
		/* 820E6A34h case   37:*/		return 0x820E6A38;
		  /* 820E6A38h */ case   38:  		/* b 100 */
		/* 820E6A38h case   38:*/		return 0x820E6A9C;
		/* 820E6A38h case   38:*/		return 0x820E6A3C;
	}
	return 0x820E6A3C;
} // Block from 820E69A0h-820E6A3Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 820E6A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6A3C);
		  /* 820E6A3Ch */ case    0:  		/* lwz R10, <#[R1 + 192]> */
		/* 820E6A3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E6A3Ch case    0:*/		return 0x820E6A40;
		  /* 820E6A40h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6A40h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6A40h case    1:*/		return 0x820E6A44;
		  /* 820E6A44h */ case    2:  		/* lwzx R10, <#[R10 + R26]> */
		/* 820E6A44h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 820E6A44h case    2:*/		return 0x820E6A48;
		  /* 820E6A48h */ case    3:  		/* lwz R10, <#[R10 + 60]> */
		/* 820E6A48h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820E6A48h case    3:*/		return 0x820E6A4C;
		  /* 820E6A4Ch */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 820E6A4Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820E6A4Ch case    4:*/		return 0x820E6A50;
		  /* 820E6A50h */ case    5:  		/* bc 4, CR6_EQ, 432 */
		/* 820E6A50h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E6C00;  }
		/* 820E6A50h case    5:*/		return 0x820E6A54;
		  /* 820E6A54h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 820E6A54h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E6A54h case    6:*/		return 0x820E6A58;
		  /* 820E6A58h */ case    7:  		/* bc 12, CR6_EQ, 68 */
		/* 820E6A58h case    7:*/		if ( regs.CR[6].eq ) { return 0x820E6A9C;  }
		/* 820E6A58h case    7:*/		return 0x820E6A5C;
		  /* 820E6A5Ch */ case    8:  		/* addi R4, R1, 176 */
		/* 820E6A5Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 820E6A5Ch case    8:*/		return 0x820E6A60;
		  /* 820E6A60h */ case    9:  		/* addi R3, R1, 112 */
		/* 820E6A60h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820E6A60h case    9:*/		return 0x820E6A64;
		  /* 820E6A64h */ case   10:  		/* rlwinm R5, R30, 2, 0, 29 */
		/* 820E6A64h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R30);
		/* 820E6A64h case   10:*/		return 0x820E6A68;
		  /* 820E6A68h */ case   11:  		/* mr R29, R30 */
		/* 820E6A68h case   11:*/		regs.R29 = regs.R30;
		/* 820E6A68h case   11:*/		return 0x820E6A6C;
		  /* 820E6A6Ch */ case   12:  		/* bl -347188 */
		/* 820E6A6Ch case   12:*/		regs.LR = 0x820E6A70; return 0x82091E38;
		/* 820E6A6Ch case   12:*/		return 0x820E6A70;
		  /* 820E6A70h */ case   13:  		/* mr R11, R31 */
		/* 820E6A70h case   13:*/		regs.R11 = regs.R31;
		/* 820E6A70h case   13:*/		return 0x820E6A74;
		  /* 820E6A74h */ case   14:  		/* addi R10, R1, 192 */
		/* 820E6A74h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 820E6A74h case   14:*/		return 0x820E6A78;
		  /* 820E6A78h */ case   15:  		/* addi R9, R1, 128 */
		/* 820E6A78h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E6A78h case   15:*/		return 0x820E6A7C;
		  /* 820E6A7Ch */ case   16:  		/* addic. R29, R29, -1 */
		/* 820E6A7Ch case   16:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 820E6A7Ch case   16:*/		return 0x820E6A80;
		  /* 820E6A80h */ case   17:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E6A80h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E6A80h case   17:*/		return 0x820E6A84;
		  /* 820E6A84h */ case   18:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6A84h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6A84h case   18:*/		return 0x820E6A88;
		  /* 820E6A88h */ case   19:  		/* lwzx R10, <#[R10 + R26]> */
		/* 820E6A88h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 820E6A88h case   19:*/		return 0x820E6A8C;
		  /* 820E6A8Ch */ case   20:  		/* lwz R10, <#[R10 + 56]> */
		/* 820E6A8Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 820E6A8Ch case   20:*/		return 0x820E6A90;
		  /* 820E6A90h */ case   21:  		/* stwx R10, <#[R11 + R9]> */
		/* 820E6A90h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E6A90h case   21:*/		return 0x820E6A94;
		  /* 820E6A94h */ case   22:  		/* addi R11, R11, 4 */
		/* 820E6A94h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E6A94h case   22:*/		return 0x820E6A98;
		  /* 820E6A98h */ case   23:  		/* bc 4, CR0_EQ, -36 */
		/* 820E6A98h case   23:*/		if ( !regs.CR[0].eq ) { return 0x820E6A74;  }
		/* 820E6A98h case   23:*/		return 0x820E6A9C;
	}
	return 0x820E6A9C;
} // Block from 820E6A3Ch-820E6A9Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E6A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6A9C);
		  /* 820E6A9Ch */ case    0:  		/* mr R9, R27 */
		/* 820E6A9Ch case    0:*/		regs.R9 = regs.R27;
		/* 820E6A9Ch case    0:*/		return 0x820E6AA0;
		  /* 820E6AA0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820E6AA0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E6AA0h case    1:*/		return 0x820E6AA4;
		  /* 820E6AA4h */ case    2:  		/* bc 12, CR6_EQ, 200 */
		/* 820E6AA4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E6B6C;  }
		/* 820E6AA4h case    2:*/		return 0x820E6AA8;
		  /* 820E6AA8h */ case    3:  		/* lis R11, -32256 */
		/* 820E6AA8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E6AA8h case    3:*/		return 0x820E6AAC;
		  /* 820E6AACh */ case    4:  		/* lwz R8, <#[R28 + 16]> */
		/* 820E6AACh case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000010) );
		/* 820E6AACh case    4:*/		return 0x820E6AB0;
		  /* 820E6AB0h */ case    5:  		/* lis R7, -32256 */
		/* 820E6AB0h case    5:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 820E6AB0h case    5:*/		return 0x820E6AB4;
		  /* 820E6AB4h */ case    6:  		/* mtspr CTR, R30 */
		/* 820E6AB4h case    6:*/		regs.CTR = regs.R30;
		/* 820E6AB4h case    6:*/		return 0x820E6AB8;
		  /* 820E6AB8h */ case    7:  		/* addi R10, R1, 160 */
		/* 820E6AB8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 820E6AB8h case    7:*/		return 0x820E6ABC;
		  /* 820E6ABCh */ case    8:  		/* lfd FR12, <#[R11 + 1848]> */
		/* 820E6ABCh case    8:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000738) );
		/* 820E6ABCh case    8:*/		return 0x820E6AC0;
		  /* 820E6AC0h */ case    9:  		/* lfd FR13, <#[R7 + 1808]> */
		/* 820E6AC0h case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R7 + 0x00000710) );
		/* 820E6AC0h case    9:*/		return 0x820E6AC4;
		  /* 820E6AC4h */ case   10:  		/* lwz R11, <#[R10 - 16]> */
		/* 820E6AC4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFFFFF0) );
		/* 820E6AC4h case   10:*/		return 0x820E6AC8;
		  /* 820E6AC8h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6AC8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6AC8h case   11:*/		return 0x820E6ACC;
		  /* 820E6ACCh */ case   12:  		/* lwzx R11, <#[R11 + R26]> */
		/* 820E6ACCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 820E6ACCh case   12:*/		return 0x820E6AD0;
		  /* 820E6AD0h */ case   13:  		/* lwz R7, <#[R11 + 4]> */
		/* 820E6AD0h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6AD0h case   13:*/		return 0x820E6AD4;
		  /* 820E6AD4h */ case   14:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820E6AD4h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820E6AD4h case   14:*/		return 0x820E6AD8;
		  /* 820E6AD8h */ case   15:  		/* lwzx R7, <#[R7 + R8]> */
		/* 820E6AD8h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 820E6AD8h case   15:*/		return 0x820E6ADC;
		  /* 820E6ADCh */ case   16:  		/* lwz R7, <#[R7 + 4]> */
		/* 820E6ADCh case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820E6ADCh case   16:*/		return 0x820E6AE0;
	}
	return 0x820E6AE0;
} // Block from 820E6A9Ch-820E6AE0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820E6AE0h
// Function '?CompressOrigin@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6AE0);
		  /* 820E6AE0h */ case    0:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 820E6AE0h case    0:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 820E6AE0h case    0:*/		return 0x820E6AE4;
		  /* 820E6AE4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 820E6AE4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x820E6AF0;  }
		/* 820E6AE4h case    1:*/		return 0x820E6AE8;
		  /* 820E6AE8h */ case    2:  		/* mr R27, R31 */
		/* 820E6AE8h case    2:*/		regs.R27 = regs.R31;
		/* 820E6AE8h case    2:*/		return 0x820E6AEC;
		  /* 820E6AECh */ case    3:  		/* mr R9, R31 */
		/* 820E6AECh case    3:*/		regs.R9 = regs.R31;
		/* 820E6AECh case    3:*/		return 0x820E6AF0;
	}
	return 0x820E6AF0;
} // Block from 820E6AE0h-820E6AF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E6AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6AF0);
		  /* 820E6AF0h */ case    0:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820E6AF0h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820E6AF0h case    0:*/		return 0x820E6AF4;
		  /* 820E6AF4h */ case    1:  		/* fcmpu CR6, FR0, FR13 */
		/* 820E6AF4h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820E6AF4h case    1:*/		return 0x820E6AF8;
		  /* 820E6AF8h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 820E6AF8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E6B00;  }
		/* 820E6AF8h case    2:*/		return 0x820E6AFC;
		  /* 820E6AFCh */ case    3:  		/* mr R27, R31 */
		/* 820E6AFCh case    3:*/		regs.R27 = regs.R31;
		/* 820E6AFCh case    3:*/		return 0x820E6B00;
	}
	return 0x820E6B00;
} // Block from 820E6AF0h-820E6B00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B00);
		  /* 820E6B00h */ case    0:  		/* fcmpu CR6, FR0, FR12 */
		/* 820E6B00h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR12);
		/* 820E6B00h case    0:*/		return 0x820E6B04;
		  /* 820E6B04h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 820E6B04h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6B0C;  }
		/* 820E6B04h case    1:*/		return 0x820E6B08;
		  /* 820E6B08h */ case    2:  		/* mr R9, R31 */
		/* 820E6B08h case    2:*/		regs.R9 = regs.R31;
		/* 820E6B08h case    2:*/		return 0x820E6B0C;
	}
	return 0x820E6B0C;
} // Block from 820E6B00h-820E6B0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B0C);
		  /* 820E6B0Ch */ case    0:  		/* lwz R11, <#[R10]> */
		/* 820E6B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E6B0Ch case    0:*/		return 0x820E6B10;
		  /* 820E6B10h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6B10h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6B10h case    1:*/		return 0x820E6B14;
		  /* 820E6B14h */ case    2:  		/* lwzx R11, <#[R11 + R26]> */
		/* 820E6B14h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 820E6B14h case    2:*/		return 0x820E6B18;
		  /* 820E6B18h */ case    3:  		/* lwz R7, <#[R11 + 4]> */
		/* 820E6B18h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6B18h case    3:*/		return 0x820E6B1C;
		  /* 820E6B1Ch */ case    4:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820E6B1Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820E6B1Ch case    4:*/		return 0x820E6B20;
		  /* 820E6B20h */ case    5:  		/* lwzx R7, <#[R7 + R8]> */
		/* 820E6B20h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 820E6B20h case    5:*/		return 0x820E6B24;
		  /* 820E6B24h */ case    6:  		/* lwz R7, <#[R7 + 4]> */
		/* 820E6B24h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820E6B24h case    6:*/		return 0x820E6B28;
		  /* 820E6B28h */ case    7:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 820E6B28h case    7:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 820E6B28h case    7:*/		return 0x820E6B2C;
		  /* 820E6B2Ch */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 820E6B2Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x820E6B38;  }
		/* 820E6B2Ch case    8:*/		return 0x820E6B30;
		  /* 820E6B30h */ case    9:  		/* mr R27, R31 */
		/* 820E6B30h case    9:*/		regs.R27 = regs.R31;
		/* 820E6B30h case    9:*/		return 0x820E6B34;
		  /* 820E6B34h */ case   10:  		/* mr R9, R31 */
		/* 820E6B34h case   10:*/		regs.R9 = regs.R31;
		/* 820E6B34h case   10:*/		return 0x820E6B38;
	}
	return 0x820E6B38;
} // Block from 820E6B0Ch-820E6B38h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B38);
		  /* 820E6B38h */ case    0:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820E6B38h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820E6B38h case    0:*/		return 0x820E6B3C;
		  /* 820E6B3Ch */ case    1:  		/* fcmpu CR6, FR0, FR12 */
		/* 820E6B3Ch case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR12);
		/* 820E6B3Ch case    1:*/		return 0x820E6B40;
		  /* 820E6B40h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 820E6B40h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E6B48;  }
		/* 820E6B40h case    2:*/		return 0x820E6B44;
		  /* 820E6B44h */ case    3:  		/* mr R27, R31 */
		/* 820E6B44h case    3:*/		regs.R27 = regs.R31;
		/* 820E6B44h case    3:*/		return 0x820E6B48;
	}
	return 0x820E6B48;
} // Block from 820E6B38h-820E6B48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B48);
		  /* 820E6B48h */ case    0:  		/* fcmpu CR6, FR0, FR13 */
		/* 820E6B48h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820E6B48h case    0:*/		return 0x820E6B4C;
		  /* 820E6B4Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 820E6B4Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6B54;  }
		/* 820E6B4Ch case    1:*/		return 0x820E6B50;
		  /* 820E6B50h */ case    2:  		/* mr R9, R31 */
		/* 820E6B50h case    2:*/		regs.R9 = regs.R31;
		/* 820E6B50h case    2:*/		return 0x820E6B54;
	}
	return 0x820E6B54;
} // Block from 820E6B48h-820E6B54h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B54);
		  /* 820E6B54h */ case    0:  		/* addi R10, R10, 4 */
		/* 820E6B54h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E6B54h case    0:*/		return 0x820E6B58;
		  /* 820E6B58h */ case    1:  		/* bc 16, CR0_LT, -148 */
		/* 820E6B58h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E6AC4;  }
		/* 820E6B58h case    1:*/		return 0x820E6B5C;
		  /* 820E6B5Ch */ case    2:  		/* cmpwi CR6, R27, 0 */
		/* 820E6B5Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E6B5Ch case    2:*/		return 0x820E6B60;
		  /* 820E6B60h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 820E6B60h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E6B6C;  }
		/* 820E6B60h case    3:*/		return 0x820E6B64;
		  /* 820E6B64h */ case    4:  		/* cmpwi CR6, R9, 0 */
		/* 820E6B64h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E6B64h case    4:*/		return 0x820E6B68;
		  /* 820E6B68h */ case    5:  		/* bc 12, CR6_EQ, 152 */
		/* 820E6B68h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E6C00;  }
		/* 820E6B68h case    5:*/		return 0x820E6B6C;
	}
	return 0x820E6B6C;
} // Block from 820E6B54h-820E6B6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B6C);
		  /* 820E6B6Ch */ case    0:  		/* li R3, 116 */
		/* 820E6B6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E6B6Ch case    0:*/		return 0x820E6B70;
		  /* 820E6B70h */ case    1:  		/* bl 88616 */
		/* 820E6B70h case    1:*/		regs.LR = 0x820E6B74; return 0x820FC598;
		/* 820E6B70h case    1:*/		return 0x820E6B74;
		  /* 820E6B74h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E6B74h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E6B74h case    2:*/		return 0x820E6B78;
		  /* 820E6B78h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 820E6B78h case    3:*/		if ( regs.CR[0].eq ) { return 0x820E6B84;  }
		/* 820E6B78h case    3:*/		return 0x820E6B7C;
		  /* 820E6B7Ch */ case    4:  		/* bl 86820 */
		/* 820E6B7Ch case    4:*/		regs.LR = 0x820E6B80; return 0x820FBEA0;
		/* 820E6B7Ch case    4:*/		return 0x820E6B80;
	}
	return 0x820E6B80;
} // Block from 820E6B6Ch-820E6B80h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B80h
// Function '?MatchRepMov@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B80);
		  /* 820E6B80h */ case    0:  		/* mr R31, R3 */
		/* 820E6B80h case    0:*/		regs.R31 = regs.R3;
		/* 820E6B80h case    0:*/		return 0x820E6B84;
	}
	return 0x820E6B84;
} // Block from 820E6B80h-820E6B84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E6B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6B84);
		  /* 820E6B84h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E6B84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E6B84h case    0:*/		return 0x820E6B88;
		  /* 820E6B88h */ case    1:  		/* bc 12, CR6_EQ, -784 */
		/* 820E6B88h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6878;  }
		/* 820E6B88h case    1:*/		return 0x820E6B8C;
		  /* 820E6B8Ch */ case    2:  		/* rlwinm R11, R30, 0, 12, 31 */
		/* 820E6B8Ch case    2:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R30);
		/* 820E6B8Ch case    2:*/		return 0x820E6B90;
		  /* 820E6B90h */ case    3:  		/* cmpwi CR6, R27, 0 */
		/* 820E6B90h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E6B90h case    3:*/		return 0x820E6B94;
		  /* 820E6B94h */ case    4:  		/* oris R4, R11, 29536 */
		/* 820E6B94h case    4:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R11,0x7360);
		/* 820E6B94h case    4:*/		return 0x820E6B98;
		  /* 820E6B98h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 820E6B98h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E6BA0;  }
		/* 820E6B98h case    5:*/		return 0x820E6B9C;
		  /* 820E6B9Ch */ case    6:  		/* oris R4, R11, 29520 */
		/* 820E6B9Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R11,0x7350);
		/* 820E6B9Ch case    6:*/		return 0x820E6BA0;
	}
	return 0x820E6BA0;
} // Block from 820E6B84h-820E6BA0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E6BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6BA0);
		  /* 820E6BA0h */ case    0:  		/* li R7, 0 */
		/* 820E6BA0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E6BA0h case    0:*/		return 0x820E6BA4;
		  /* 820E6BA4h */ case    1:  		/* mr R6, R30 */
		/* 820E6BA4h case    1:*/		regs.R6 = regs.R30;
		/* 820E6BA4h case    1:*/		return 0x820E6BA8;
		  /* 820E6BA8h */ case    2:  		/* rlwinm R5, R30, 1, 0, 30 */
		/* 820E6BA8h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R30);
		/* 820E6BA8h case    2:*/		return 0x820E6BAC;
		  /* 820E6BACh */ case    3:  		/* mr R3, R31 */
		/* 820E6BACh case    3:*/		regs.R3 = regs.R31;
		/* 820E6BACh case    3:*/		return 0x820E6BB0;
		  /* 820E6BB0h */ case    4:  		/* bl 88704 */
		/* 820E6BB0h case    4:*/		regs.LR = 0x820E6BB4; return 0x820FC630;
		/* 820E6BB0h case    4:*/		return 0x820E6BB4;
		  /* 820E6BB4h */ case    5:  		/* or. R29, R3, R3 */
		/* 820E6BB4h case    5:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E6BB4h case    5:*/		return 0x820E6BB8;
		  /* 820E6BB8h */ case    6:  		/* mr R3, R31 */
		/* 820E6BB8h case    6:*/		regs.R3 = regs.R31;
		/* 820E6BB8h case    6:*/		return 0x820E6BBC;
		  /* 820E6BBCh */ case    7:  		/* bc 12, CR0_LT, -780 */
		/* 820E6BBCh case    7:*/		if ( regs.CR[0].lt ) { return 0x820E68B0;  }
		/* 820E6BBCh case    7:*/		return 0x820E6BC0;
		  /* 820E6BC0h */ case    8:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E6BC0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6BC0h case    8:*/		return 0x820E6BC4;
		  /* 820E6BC4h */ case    9:  		/* bl 86828 */
		/* 820E6BC4h case    9:*/		regs.LR = 0x820E6BC8; return 0x820FBEF0;
		/* 820E6BC4h case    9:*/		return 0x820E6BC8;
		  /* 820E6BC8h */ case   10:  		/* or. R29, R3, R3 */
		/* 820E6BC8h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E6BC8h case   10:*/		return 0x820E6BCC;
		  /* 820E6BCCh */ case   11:  		/* bc 12, CR0_LT, -760 */
		/* 820E6BCCh case   11:*/		if ( regs.CR[0].lt ) { return 0x820E68D4;  }
		/* 820E6BCCh case   11:*/		return 0x820E6BD0;
		  /* 820E6BD0h */ case   12:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E6BD0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6BD0h case   12:*/		return 0x820E6BD4;
		  /* 820E6BD4h */ case   13:  		/* rlwinm R30, R30, 2, 0, 29 */
		/* 820E6BD4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R30);
		/* 820E6BD4h case   13:*/		return 0x820E6BD8;
		  /* 820E6BD8h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 820E6BD8h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820E6BD8h case   14:*/		return 0x820E6BDC;
		  /* 820E6BDCh */ case   15:  		/* mr R5, R30 */
		/* 820E6BDCh case   15:*/		regs.R5 = regs.R30;
		/* 820E6BDCh case   15:*/		return 0x820E6BE0;
		  /* 820E6BE0h */ case   16:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E6BE0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E6BE0h case   16:*/		return 0x820E6BE4;
		  /* 820E6BE4h */ case   17:  		/* bl -348724 */
		/* 820E6BE4h case   17:*/		regs.LR = 0x820E6BE8; return 0x820919B0;
		/* 820E6BE4h case   17:*/		return 0x820E6BE8;
		  /* 820E6BE8h */ case   18:  		/* mr R5, R30 */
		/* 820E6BE8h case   18:*/		regs.R5 = regs.R30;
		/* 820E6BE8h case   18:*/		return 0x820E6BEC;
		  /* 820E6BECh */ case   19:  		/* lwz R3, <#[R31 + 8]> */
		/* 820E6BECh case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E6BECh case   19:*/		return 0x820E6BF0;
		  /* 820E6BF0h */ case   20:  		/* addi R4, R1, 112 */
		/* 820E6BF0h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820E6BF0h case   20:*/		return 0x820E6BF4;
		  /* 820E6BF4h */ case   21:  		/* bl -348740 */
		/* 820E6BF4h case   21:*/		regs.LR = 0x820E6BF8; return 0x820919B0;
		/* 820E6BF4h case   21:*/		return 0x820E6BF8;
		  /* 820E6BF8h */ case   22:  		/* addi R4, R1, 128 */
		/* 820E6BF8h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E6BF8h case   22:*/		return 0x820E6BFC;
		  /* 820E6BFCh */ case   23:  		/* b -756 */
		/* 820E6BFCh case   23:*/		return 0x820E6908;
		/* 820E6BFCh case   23:*/		return 0x820E6C00;
	}
	return 0x820E6C00;
} // Block from 820E6BA0h-820E6C00h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E6C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6C00);
		  /* 820E6C00h */ case    0:  		/* li R3, 1 */
		/* 820E6C00h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E6C00h case    0:*/		return 0x820E6C04;
	}
	return 0x820E6C04;
} // Block from 820E6C00h-820E6C04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E6C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6C04);
		  /* 820E6C04h */ case    0:  		/* addi R1, R1, 432 */
		/* 820E6C04h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 820E6C04h case    0:*/		return 0x820E6C08;
		  /* 820E6C08h */ case    1:  		/* b -350568 */
		/* 820E6C08h case    1:*/		return 0x820912A0;
		/* 820E6C08h case    1:*/		return 0x820E6C0C;
		  /* 820E6C0Ch */ case    2:  		/* nop */
		/* 820E6C0Ch case    2:*/		cpu::op::nop();
		/* 820E6C0Ch case    2:*/		return 0x820E6C10;
	}
	return 0x820E6C10;
} // Block from 820E6C04h-820E6C10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E6C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6C10);
		  /* 820E6C10h */ case    0:  		/* mfspr R12, LR */
		/* 820E6C10h case    0:*/		regs.R12 = regs.LR;
		/* 820E6C10h case    0:*/		return 0x820E6C14;
		  /* 820E6C14h */ case    1:  		/* bl -350656 */
		/* 820E6C14h case    1:*/		regs.LR = 0x820E6C18; return 0x82091254;
		/* 820E6C14h case    1:*/		return 0x820E6C18;
		  /* 820E6C18h */ case    2:  		/* stfd FR31, <#[R1 - 56]> */
		/* 820E6C18h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC8) );
		/* 820E6C18h case    2:*/		return 0x820E6C1C;
		  /* 820E6C1Ch */ case    3:  		/* stwu R1, <#[R1 - 416]> */
		/* 820E6C1Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 820E6C1Ch case    3:*/		return 0x820E6C20;
		  /* 820E6C20h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E6C20h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E6C20h case    4:*/		return 0x820E6C24;
		  /* 820E6C24h */ case    5:  		/* li R10, 2 */
		/* 820E6C24h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820E6C24h case    5:*/		return 0x820E6C28;
		  /* 820E6C28h */ case    6:  		/* li R7, 3 */
		/* 820E6C28h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820E6C28h case    6:*/		return 0x820E6C2C;
		  /* 820E6C2Ch */ case    7:  		/* lis R11, -32254 */
		/* 820E6C2Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E6C2Ch case    7:*/		return 0x820E6C30;
		  /* 820E6C30h */ case    8:  		/* stw R10, <#[R1 + 120]> */
		/* 820E6C30h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820E6C30h case    8:*/		return 0x820E6C34;
		  /* 820E6C34h */ case    9:  		/* li R31, 0 */
		/* 820E6C34h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E6C34h case    9:*/		return 0x820E6C38;
		  /* 820E6C38h */ case   10:  		/* stw R7, <#[R1 + 124]> */
		/* 820E6C38h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E6C38h case   10:*/		return 0x820E6C3C;
		  /* 820E6C3Ch */ case   11:  		/* li R30, 1 */
		/* 820E6C3Ch case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 820E6C3Ch case   11:*/		return 0x820E6C40;
		  /* 820E6C40h */ case   12:  		/* lwz R8, <#[R4]> */
		/* 820E6C40h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 820E6C40h case   12:*/		return 0x820E6C44;
		  /* 820E6C44h */ case   13:  		/* addi R5, R11, -23656 */
		/* 820E6C44h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA398);
		/* 820E6C44h case   13:*/		return 0x820E6C48;
		  /* 820E6C48h */ case   14:  		/* addi R9, R1, 112 */
		/* 820E6C48h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E6C48h case   14:*/		return 0x820E6C4C;
		  /* 820E6C4Ch */ case   15:  		/* stw R31, <#[R1 + 96]> */
		/* 820E6C4Ch case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E6C4Ch case   15:*/		return 0x820E6C50;
		  /* 820E6C50h */ case   16:  		/* rlwinm R29, R8, 0, 12, 31 */
		/* 820E6C50h case   16:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R8);
		/* 820E6C50h case   16:*/		return 0x820E6C54;
		  /* 820E6C54h */ case   17:  		/* stw R31, <#[R1 + 112]> */
		/* 820E6C54h case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 820E6C54h case   17:*/		return 0x820E6C58;
		  /* 820E6C58h */ case   18:  		/* addi R8, R1, 128 */
		/* 820E6C58h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820E6C58h case   18:*/		return 0x820E6C5C;
		  /* 820E6C5Ch */ case   19:  		/* stw R30, <#[R1 + 116]> */
		/* 820E6C5Ch case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 820E6C5Ch case   19:*/		return 0x820E6C60;
		  /* 820E6C60h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E6C60h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E6C60h case   20:*/		return 0x820E6C64;
		  /* 820E6C64h */ case   21:  		/* stw R30, <#[R1 + 84]> */
		/* 820E6C64h case   21:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 820E6C64h case   21:*/		return 0x820E6C68;
		  /* 820E6C68h */ case   22:  		/* addi R6, R1, 288 */
		/* 820E6C68h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820E6C68h case   22:*/		return 0x820E6C6C;
		  /* 820E6C6Ch */ case   23:  		/* mr R10, R29 */
		/* 820E6C6Ch case   23:*/		regs.R10 = regs.R29;
		/* 820E6C6Ch case   23:*/		return 0x820E6C70;
		  /* 820E6C70h */ case   24:  		/* mr R28, R3 */
		/* 820E6C70h case   24:*/		regs.R28 = regs.R3;
		/* 820E6C70h case   24:*/		return 0x820E6C74;
		  /* 820E6C74h */ case   25:  		/* bl -12276 */
		/* 820E6C74h case   25:*/		regs.LR = 0x820E6C78; return 0x820E3C80;
		/* 820E6C74h case   25:*/		return 0x820E6C78;
		  /* 820E6C78h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E6C78h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E6C78h case   26:*/		return 0x820E6C7C;
		  /* 820E6C7Ch */ case   27:  		/* bc 4, CR0_EQ, 296 */
		/* 820E6C7Ch case   27:*/		if ( !regs.CR[0].eq ) { return 0x820E6DA4;  }
		/* 820E6C7Ch case   27:*/		return 0x820E6C80;
		  /* 820E6C80h */ case   28:  		/* lis R11, -32256 */
		/* 820E6C80h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E6C80h case   28:*/		return 0x820E6C84;
		  /* 820E6C84h */ case   29:  		/* mr R5, R31 */
		/* 820E6C84h case   29:*/		regs.R5 = regs.R31;
		/* 820E6C84h case   29:*/		return 0x820E6C88;
		  /* 820E6C88h */ case   30:  		/* mr R4, R31 */
		/* 820E6C88h case   30:*/		regs.R4 = regs.R31;
		/* 820E6C88h case   30:*/		return 0x820E6C8C;
		  /* 820E6C8Ch */ case   31:  		/* mr R27, R31 */
		/* 820E6C8Ch case   31:*/		regs.R27 = regs.R31;
		/* 820E6C8Ch case   31:*/		return 0x820E6C90;
		  /* 820E6C90h */ case   32:  		/* mr R6, R31 */
		/* 820E6C90h case   32:*/		regs.R6 = regs.R31;
		/* 820E6C90h case   32:*/		return 0x820E6C94;
		  /* 820E6C94h */ case   33:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 820E6C94h case   33:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 820E6C94h case   33:*/		return 0x820E6C98;
		  /* 820E6C98h */ case   34:  		/* cmplwi CR6, R29, 0 */
		/* 820E6C98h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E6C98h case   34:*/		return 0x820E6C9C;
		  /* 820E6C9Ch */ case   35:  		/* bc 12, CR6_EQ, 224 */
		/* 820E6C9Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x820E6D7C;  }
		/* 820E6C9Ch case   35:*/		return 0x820E6CA0;
		  /* 820E6CA0h */ case   36:  		/* lwz R11, <#[R1 + 160]> */
		/* 820E6CA0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820E6CA0h case   36:*/		return 0x820E6CA4;
		  /* 820E6CA4h */ case   37:  		/* lwz R10, <#[R28 + 20]> */
		/* 820E6CA4h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 820E6CA4h case   37:*/		return 0x820E6CA8;
		  /* 820E6CA8h */ case   38:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6CA8h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6CA8h case   38:*/		return 0x820E6CAC;
		  /* 820E6CACh */ case   39:  		/* lwz R8, <#[R1 + 144]> */
		/* 820E6CACh case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 820E6CACh case   39:*/		return 0x820E6CB0;
		  /* 820E6CB0h */ case   40:  		/* lwz R9, <#[R28 + 16]> */
		/* 820E6CB0h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000010) );
		/* 820E6CB0h case   40:*/		return 0x820E6CB4;
		  /* 820E6CB4h */ case   41:  		/* rlwinm R7, R8, 2, 0, 29 */
		/* 820E6CB4h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R8);
		/* 820E6CB4h case   41:*/		return 0x820E6CB8;
		  /* 820E6CB8h */ case   42:  		/* lwzx R8, <#[R11 + R10]> */
		/* 820E6CB8h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E6CB8h case   42:*/		return 0x820E6CBC;
		  /* 820E6CBCh */ case   43:  		/* lis R11, -32256 */
		/* 820E6CBCh case   43:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E6CBCh case   43:*/		return 0x820E6CC0;
		  /* 820E6CC0h */ case   44:  		/* lfd FR13, <#[R11 + 1848]> */
		/* 820E6CC0h case   44:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000738) );
		/* 820E6CC0h case   44:*/		return 0x820E6CC4;
		  /* 820E6CC4h */ case   45:  		/* lwzx R11, <#[R10 + R7]> */
		/* 820E6CC4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 820E6CC4h case   45:*/		return 0x820E6CC8;
		  /* 820E6CC8h */ case   46:  		/* lwz R3, <#[R11 + 4]> */
		/* 820E6CC8h case   46:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6CC8h case   46:*/		return 0x820E6CCC;
		  /* 820E6CCCh */ case   47:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 820E6CCCh case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 820E6CCCh case   47:*/		return 0x820E6CD0;
		  /* 820E6CD0h */ case   48:  		/* lwzx R3, <#[R3 + R9]> */
		/* 820E6CD0h case   48:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R9 + 0x00000000) );
		/* 820E6CD0h case   48:*/		return 0x820E6CD4;
		  /* 820E6CD4h */ case   49:  		/* lwz R3, <#[R3 + 4]> */
		/* 820E6CD4h case   49:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 820E6CD4h case   49:*/		return 0x820E6CD8;
		  /* 820E6CD8h */ case   50:  		/* rlwinm. R3, R3, 0, 23, 23 */
		/* 820E6CD8h case   50:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R3,regs.R3);
		/* 820E6CD8h case   50:*/		return 0x820E6CDC;
		  /* 820E6CDCh */ case   51:  		/* bc 12, CR0_EQ, 212 */
		/* 820E6CDCh case   51:*/		if ( regs.CR[0].eq ) { return 0x820E6DB0;  }
		/* 820E6CDCh case   51:*/		return 0x820E6CE0;
		  /* 820E6CE0h */ case   52:  		/* lwz R3, <#[R8 + 4]> */
		/* 820E6CE0h case   52:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000004) );
		/* 820E6CE0h case   52:*/		return 0x820E6CE4;
		  /* 820E6CE4h */ case   53:  		/* rlwinm R3, R3, 2, 0, 29 */
		/* 820E6CE4h case   53:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R3);
		/* 820E6CE4h case   53:*/		return 0x820E6CE8;
		  /* 820E6CE8h */ case   54:  		/* lwzx R3, <#[R3 + R9]> */
		/* 820E6CE8h case   54:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R9 + 0x00000000) );
		/* 820E6CE8h case   54:*/		return 0x820E6CEC;
		  /* 820E6CECh */ case   55:  		/* lwz R3, <#[R3 + 4]> */
		/* 820E6CECh case   55:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 820E6CECh case   55:*/		return 0x820E6CF0;
		  /* 820E6CF0h */ case   56:  		/* rlwinm. R3, R3, 0, 23, 23 */
		/* 820E6CF0h case   56:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R3,regs.R3);
		/* 820E6CF0h case   56:*/		return 0x820E6CF4;
		  /* 820E6CF4h */ case   57:  		/* bc 12, CR0_EQ, 188 */
		/* 820E6CF4h case   57:*/		if ( regs.CR[0].eq ) { return 0x820E6DB0;  }
		/* 820E6CF4h case   57:*/		return 0x820E6CF8;
		  /* 820E6CF8h */ case   58:  		/* lwz R3, <#[R11 + 8]> */
		/* 820E6CF8h case   58:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820E6CF8h case   58:*/		return 0x820E6CFC;
		  /* 820E6CFCh */ case   59:  		/* cmpwi CR6, R3, -1 */
		/* 820E6CFCh case   59:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E6CFCh case   59:*/		return 0x820E6D00;
		  /* 820E6D00h */ case   60:  		/* bc 4, CR6_EQ, 176 */
		/* 820E6D00h case   60:*/		if ( !regs.CR[6].eq ) { return 0x820E6DB0;  }
		/* 820E6D00h case   60:*/		return 0x820E6D04;
		  /* 820E6D04h */ case   61:  		/* lwz R3, <#[R8 + 8]> */
		/* 820E6D04h case   61:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000008) );
		/* 820E6D04h case   61:*/		return 0x820E6D08;
		  /* 820E6D08h */ case   62:  		/* cmpwi CR6, R3, -1 */
		/* 820E6D08h case   62:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E6D08h case   62:*/		return 0x820E6D0C;
		  /* 820E6D0Ch */ case   63:  		/* bc 4, CR6_EQ, 164 */
		/* 820E6D0Ch case   63:*/		if ( !regs.CR[6].eq ) { return 0x820E6DB0;  }
		/* 820E6D0Ch case   63:*/		return 0x820E6D10;
		  /* 820E6D10h */ case   64:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820E6D10h case   64:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820E6D10h case   64:*/		return 0x820E6D14;
		  /* 820E6D14h */ case   65:  		/* fcmpu CR6, FR0, FR13 */
		/* 820E6D14h case   65:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820E6D14h case   65:*/		return 0x820E6D18;
		  /* 820E6D18h */ case   66:  		/* bc 4, CR6_EQ, 24 */
		/* 820E6D18h case   66:*/		if ( !regs.CR[6].eq ) { return 0x820E6D30;  }
		/* 820E6D18h case   66:*/		return 0x820E6D1C;
		  /* 820E6D1Ch */ case   67:  		/* lfd FR12, <#[R8 + 32]> */
		/* 820E6D1Ch case   67:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R8 + 0x00000020) );
		/* 820E6D1Ch case   67:*/		return 0x820E6D20;
		  /* 820E6D20h */ case   68:  		/* fcmpu CR6, FR12, FR31 */
		/* 820E6D20h case   68:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR31);
		/* 820E6D20h case   68:*/		return 0x820E6D24;
		  /* 820E6D24h */ case   69:  		/* bc 4, CR6_EQ, 12 */
		/* 820E6D24h case   69:*/		if ( !regs.CR[6].eq ) { return 0x820E6D30;  }
		/* 820E6D24h case   69:*/		return 0x820E6D28;
		  /* 820E6D28h */ case   70:  		/* mr R5, R30 */
		/* 820E6D28h case   70:*/		regs.R5 = regs.R30;
		/* 820E6D28h case   70:*/		return 0x820E6D2C;
		  /* 820E6D2Ch */ case   71:  		/* b 28 */
		/* 820E6D2Ch case   71:*/		return 0x820E6D48;
		/* 820E6D2Ch case   71:*/		return 0x820E6D30;
	}
	return 0x820E6D30;
} // Block from 820E6C10h-820E6D30h (72 instructions)

//////////////////////////////////////////////////////
// Block at 820E6D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6D30);
		  /* 820E6D30h */ case    0:  		/* lfd FR12, <#[R8 + 32]> */
		/* 820E6D30h case    0:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R8 + 0x00000020) );
		/* 820E6D30h case    0:*/		return 0x820E6D34;
		  /* 820E6D34h */ case    1:  		/* fcmpu CR6, FR12, FR13 */
		/* 820E6D34h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR13);
		/* 820E6D34h case    1:*/		return 0x820E6D38;
		  /* 820E6D38h */ case    2:  		/* bc 4, CR6_EQ, 120 */
		/* 820E6D38h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E6DB0;  }
		/* 820E6D38h case    2:*/		return 0x820E6D3C;
		  /* 820E6D3Ch */ case    3:  		/* fcmpu CR6, FR0, FR31 */
		/* 820E6D3Ch case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820E6D3Ch case    3:*/		return 0x820E6D40;
		  /* 820E6D40h */ case    4:  		/* bc 4, CR6_EQ, 112 */
		/* 820E6D40h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E6DB0;  }
		/* 820E6D40h case    4:*/		return 0x820E6D44;
		  /* 820E6D44h */ case    5:  		/* mr R4, R30 */
		/* 820E6D44h case    5:*/		regs.R4 = regs.R30;
		/* 820E6D44h case    5:*/		return 0x820E6D48;
	}
	return 0x820E6D48;
} // Block from 820E6D30h-820E6D48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E6D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6D48);
		  /* 820E6D48h */ case    0:  		/* addi R6, R6, 1 */
		/* 820E6D48h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820E6D48h case    0:*/		return 0x820E6D4C;
		  /* 820E6D4Ch */ case    1:  		/* cmplw CR6, R6, R29 */
		/* 820E6D4Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 820E6D4Ch case    1:*/		return 0x820E6D50;
		  /* 820E6D50h */ case    2:  		/* bc 12, CR6_LT, -140 */
		/* 820E6D50h case    2:*/		if ( regs.CR[6].lt ) { return 0x820E6CC4;  }
		/* 820E6D50h case    2:*/		return 0x820E6D54;
		  /* 820E6D54h */ case    3:  		/* cmpwi CR6, R5, 0 */
		/* 820E6D54h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 820E6D54h case    3:*/		return 0x820E6D58;
		  /* 820E6D58h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 820E6D58h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E6D6C;  }
		/* 820E6D58h case    4:*/		return 0x820E6D5C;
		  /* 820E6D5Ch */ case    5:  		/* cmpwi CR6, R4, 0 */
		/* 820E6D5Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 820E6D5Ch case    5:*/		return 0x820E6D60;
		  /* 820E6D60h */ case    6:  		/* bc 4, CR6_EQ, 80 */
		/* 820E6D60h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E6DB0;  }
		/* 820E6D60h case    6:*/		return 0x820E6D64;
		  /* 820E6D64h */ case    7:  		/* rlwinm R11, R29, 0, 12, 31 */
		/* 820E6D64h case    7:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R29);
		/* 820E6D64h case    7:*/		return 0x820E6D68;
		  /* 820E6D68h */ case    8:  		/* oris R27, R11, 29520 */
		/* 820E6D68h case    8:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R11,0x7350);
		/* 820E6D68h case    8:*/		return 0x820E6D6C;
	}
	return 0x820E6D6C;
} // Block from 820E6D48h-820E6D6Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E6D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6D6C);
		  /* 820E6D6Ch */ case    0:  		/* cmpwi CR6, R4, 0 */
		/* 820E6D6Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 820E6D6Ch case    0:*/		return 0x820E6D70;
		  /* 820E6D70h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820E6D70h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6D7C;  }
		/* 820E6D70h case    1:*/		return 0x820E6D74;
		  /* 820E6D74h */ case    2:  		/* rlwinm R11, R29, 0, 12, 31 */
		/* 820E6D74h case    2:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R29);
		/* 820E6D74h case    2:*/		return 0x820E6D78;
		  /* 820E6D78h */ case    3:  		/* oris R27, R11, 29536 */
		/* 820E6D78h case    3:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R11,0x7360);
		/* 820E6D78h case    3:*/		return 0x820E6D7C;
	}
	return 0x820E6D7C;
} // Block from 820E6D6Ch-820E6D7Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E6D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6D7C);
		  /* 820E6D7Ch */ case    0:  		/* li R3, 116 */
		/* 820E6D7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E6D7Ch case    0:*/		return 0x820E6D80;
		  /* 820E6D80h */ case    1:  		/* bl 88088 */
		/* 820E6D80h case    1:*/		regs.LR = 0x820E6D84; return 0x820FC598;
		/* 820E6D80h case    1:*/		return 0x820E6D84;
		  /* 820E6D84h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E6D84h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E6D84h case    2:*/		return 0x820E6D88;
		  /* 820E6D88h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 820E6D88h case    3:*/		if ( regs.CR[0].eq ) { return 0x820E6D94;  }
		/* 820E6D88h case    3:*/		return 0x820E6D8C;
		  /* 820E6D8Ch */ case    4:  		/* bl 86292 */
		/* 820E6D8Ch case    4:*/		regs.LR = 0x820E6D90; return 0x820FBEA0;
		/* 820E6D8Ch case    4:*/		return 0x820E6D90;
		  /* 820E6D90h */ case    5:  		/* mr R31, R3 */
		/* 820E6D90h case    5:*/		regs.R31 = regs.R3;
		/* 820E6D90h case    5:*/		return 0x820E6D94;
	}
	return 0x820E6D94;
} // Block from 820E6D7Ch-820E6D94h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E6D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6D94);
		  /* 820E6D94h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E6D94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E6D94h case    0:*/		return 0x820E6D98;
		  /* 820E6D98h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 820E6D98h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E6DB8;  }
		/* 820E6D98h case    1:*/		return 0x820E6D9C;
		  /* 820E6D9Ch */ case    2:  		/* lis R3, -32761 */
		/* 820E6D9Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E6D9Ch case    2:*/		return 0x820E6DA0;
		  /* 820E6DA0h */ case    3:  		/* ori R3, R3, 14 */
		/* 820E6DA0h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E6DA0h case    3:*/		return 0x820E6DA4;
	}
	return 0x820E6DA4;
} // Block from 820E6D94h-820E6DA4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E6DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6DA4);
		  /* 820E6DA4h */ case    0:  		/* addi R1, R1, 416 */
		/* 820E6DA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 820E6DA4h case    0:*/		return 0x820E6DA8;
		  /* 820E6DA8h */ case    1:  		/* lfd FR31, <#[R1 - 56]> */
		/* 820E6DA8h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC8) );
		/* 820E6DA8h case    1:*/		return 0x820E6DAC;
		  /* 820E6DACh */ case    2:  		/* b -350984 */
		/* 820E6DACh case    2:*/		return 0x820912A4;
		/* 820E6DACh case    2:*/		return 0x820E6DB0;
	}
	return 0x820E6DB0;
} // Block from 820E6DA4h-820E6DB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E6DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6DB0);
		  /* 820E6DB0h */ case    0:  		/* li R3, 1 */
		/* 820E6DB0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E6DB0h case    0:*/		return 0x820E6DB4;
		  /* 820E6DB4h */ case    1:  		/* b -16 */
		/* 820E6DB4h case    1:*/		return 0x820E6DA4;
		/* 820E6DB4h case    1:*/		return 0x820E6DB8;
	}
	return 0x820E6DB8;
} // Block from 820E6DB0h-820E6DB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E6DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6DB8);
		  /* 820E6DB8h */ case    0:  		/* li R7, 0 */
		/* 820E6DB8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E6DB8h case    0:*/		return 0x820E6DBC;
		  /* 820E6DBCh */ case    1:  		/* mr R6, R29 */
		/* 820E6DBCh case    1:*/		regs.R6 = regs.R29;
		/* 820E6DBCh case    1:*/		return 0x820E6DC0;
		  /* 820E6DC0h */ case    2:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 820E6DC0h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 820E6DC0h case    2:*/		return 0x820E6DC4;
		  /* 820E6DC4h */ case    3:  		/* mr R4, R27 */
		/* 820E6DC4h case    3:*/		regs.R4 = regs.R27;
		/* 820E6DC4h case    3:*/		return 0x820E6DC8;
		  /* 820E6DC8h */ case    4:  		/* mr R3, R31 */
		/* 820E6DC8h case    4:*/		regs.R3 = regs.R31;
		/* 820E6DC8h case    4:*/		return 0x820E6DCC;
		  /* 820E6DCCh */ case    5:  		/* bl 88164 */
		/* 820E6DCCh case    5:*/		regs.LR = 0x820E6DD0; return 0x820FC630;
		/* 820E6DCCh case    5:*/		return 0x820E6DD0;
		  /* 820E6DD0h */ case    6:  		/* or. R30, R3, R3 */
		/* 820E6DD0h case    6:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E6DD0h case    6:*/		return 0x820E6DD4;
		  /* 820E6DD4h */ case    7:  		/* mr R3, R31 */
		/* 820E6DD4h case    7:*/		regs.R3 = regs.R31;
		/* 820E6DD4h case    7:*/		return 0x820E6DD8;
		  /* 820E6DD8h */ case    8:  		/* bc 4, CR0_LT, 24 */
		/* 820E6DD8h case    8:*/		if ( !regs.CR[0].lt ) { return 0x820E6DF0;  }
		/* 820E6DD8h case    8:*/		return 0x820E6DDC;
		  /* 820E6DDCh */ case    9:  		/* bl 1271268 */
		/* 820E6DDCh case    9:*/		regs.LR = 0x820E6DE0; return 0x8221D3C0;
		/* 820E6DDCh case    9:*/		return 0x820E6DE0;
		  /* 820E6DE0h */ case   10:  		/* mr R3, R31 */
		/* 820E6DE0h case   10:*/		regs.R3 = regs.R31;
		/* 820E6DE0h case   10:*/		return 0x820E6DE4;
		  /* 820E6DE4h */ case   11:  		/* bl 88076 */
		/* 820E6DE4h case   11:*/		regs.LR = 0x820E6DE8; return 0x820FC5F0;
		/* 820E6DE4h case   11:*/		return 0x820E6DE8;
		  /* 820E6DE8h */ case   12:  		/* mr R3, R30 */
		/* 820E6DE8h case   12:*/		regs.R3 = regs.R30;
		/* 820E6DE8h case   12:*/		return 0x820E6DEC;
		  /* 820E6DECh */ case   13:  		/* b -72 */
		/* 820E6DECh case   13:*/		return 0x820E6DA4;
		/* 820E6DECh case   13:*/		return 0x820E6DF0;
	}
	return 0x820E6DF0;
} // Block from 820E6DB8h-820E6DF0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E6DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6DF0);
		  /* 820E6DF0h */ case    0:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E6DF0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6DF0h case    0:*/		return 0x820E6DF4;
		  /* 820E6DF4h */ case    1:  		/* bl 86268 */
		/* 820E6DF4h case    1:*/		regs.LR = 0x820E6DF8; return 0x820FBEF0;
		/* 820E6DF4h case    1:*/		return 0x820E6DF8;
		  /* 820E6DF8h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820E6DF8h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E6DF8h case    2:*/		return 0x820E6DFC;
		  /* 820E6DFCh */ case    3:  		/* bc 4, CR0_LT, 16 */
		/* 820E6DFCh case    3:*/		if ( !regs.CR[0].lt ) { return 0x820E6E0C;  }
		/* 820E6DFCh case    3:*/		return 0x820E6E00;
		  /* 820E6E00h */ case    4:  		/* mr R30, R3 */
		/* 820E6E00h case    4:*/		regs.R30 = regs.R3;
		/* 820E6E00h case    4:*/		return 0x820E6E04;
		  /* 820E6E04h */ case    5:  		/* mr R3, R31 */
		/* 820E6E04h case    5:*/		regs.R3 = regs.R31;
		/* 820E6E04h case    5:*/		return 0x820E6E08;
		  /* 820E6E08h */ case    6:  		/* b -44 */
		/* 820E6E08h case    6:*/		return 0x820E6DDC;
		/* 820E6E08h case    6:*/		return 0x820E6E0C;
	}
	return 0x820E6E0C;
} // Block from 820E6DF0h-820E6E0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E6E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6E0C);
		  /* 820E6E0Ch */ case    0:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E6E0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6E0Ch case    0:*/		return 0x820E6E10;
		  /* 820E6E10h */ case    1:  		/* rlwinm R30, R29, 2, 0, 29 */
		/* 820E6E10h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R29);
		/* 820E6E10h case    1:*/		return 0x820E6E14;
		  /* 820E6E14h */ case    2:  		/* lwz R3, <#[R31 + 16]> */
		/* 820E6E14h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820E6E14h case    2:*/		return 0x820E6E18;
		  /* 820E6E18h */ case    3:  		/* mr R5, R30 */
		/* 820E6E18h case    3:*/		regs.R5 = regs.R30;
		/* 820E6E18h case    3:*/		return 0x820E6E1C;
		  /* 820E6E1Ch */ case    4:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E6E1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E6E1Ch case    4:*/		return 0x820E6E20;
		  /* 820E6E20h */ case    5:  		/* bl -349296 */
		/* 820E6E20h case    5:*/		regs.LR = 0x820E6E24; return 0x820919B0;
		/* 820E6E20h case    5:*/		return 0x820E6E24;
		  /* 820E6E24h */ case    6:  		/* mr R5, R30 */
		/* 820E6E24h case    6:*/		regs.R5 = regs.R30;
		/* 820E6E24h case    6:*/		return 0x820E6E28;
		  /* 820E6E28h */ case    7:  		/* lwz R3, <#[R31 + 8]> */
		/* 820E6E28h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E6E28h case    7:*/		return 0x820E6E2C;
		  /* 820E6E2Ch */ case    8:  		/* addi R4, R1, 128 */
		/* 820E6E2Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E6E2Ch case    8:*/		return 0x820E6E30;
		  /* 820E6E30h */ case    9:  		/* bl -349312 */
		/* 820E6E30h case    9:*/		regs.LR = 0x820E6E34; return 0x820919B0;
		/* 820E6E30h case    9:*/		return 0x820E6E34;
		  /* 820E6E34h */ case   10:  		/* li R6, 0 */
		/* 820E6E34h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E6E34h case   10:*/		return 0x820E6E38;
		  /* 820E6E38h */ case   11:  		/* li R5, 0 */
		/* 820E6E38h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E6E38h case   11:*/		return 0x820E6E3C;
		  /* 820E6E3Ch */ case   12:  		/* lwz R4, <#[R28 + 120]> */
		/* 820E6E3Ch case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000078) );
		/* 820E6E3Ch case   12:*/		return 0x820E6E40;
		  /* 820E6E40h */ case   13:  		/* mr R3, R28 */
		/* 820E6E40h case   13:*/		regs.R3 = regs.R28;
		/* 820E6E40h case   13:*/		return 0x820E6E44;
		  /* 820E6E44h */ case   14:  		/* fmr FR1, FR31 */
		/* 820E6E44h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E6E44h case   14:*/		return 0x820E6E48;
		  /* 820E6E48h */ case   15:  		/* bl 91104 */
		/* 820E6E48h case   15:*/		regs.LR = 0x820E6E4C; return 0x820FD228;
		/* 820E6E48h case   15:*/		return 0x820E6E4C;
		  /* 820E6E4Ch */ case   16:  		/* cmpwi CR6, R3, -1 */
		/* 820E6E4Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E6E4Ch case   16:*/		return 0x820E6E50;
		  /* 820E6E50h */ case   17:  		/* bc 4, CR6_EQ, 16 */
		/* 820E6E50h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820E6E60;  }
		/* 820E6E50h case   17:*/		return 0x820E6E54;
		  /* 820E6E54h */ case   18:  		/* lis R30, -32761 */
		/* 820E6E54h case   18:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 820E6E54h case   18:*/		return 0x820E6E58;
		  /* 820E6E58h */ case   19:  		/* ori R30, R30, 14 */
		/* 820E6E58h case   19:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 820E6E58h case   19:*/		return 0x820E6E5C;
		  /* 820E6E5Ch */ case   20:  		/* b -88 */
		/* 820E6E5Ch case   20:*/		return 0x820E6E04;
		/* 820E6E5Ch case   20:*/		return 0x820E6E60;
	}
	return 0x820E6E60;
} // Block from 820E6E0Ch-820E6E60h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E6E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6E60);
		  /* 820E6E60h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 820E6E60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E6E60h case    0:*/		return 0x820E6E64;
		  /* 820E6E64h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 820E6E64h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E6E7C;  }
		/* 820E6E64h case    1:*/		return 0x820E6E68;
		  /* 820E6E68h */ case    2:  		/* mtspr CTR, R29 */
		/* 820E6E68h case    2:*/		regs.CTR = regs.R29;
		/* 820E6E68h case    2:*/		return 0x820E6E6C;
		  /* 820E6E6Ch */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E6E6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E6E6Ch case    3:*/		return 0x820E6E70;
		  /* 820E6E70h */ case    4:  		/* stwx R3, <#[R11 + R30]> */
		/* 820E6E70h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E6E70h case    4:*/		return 0x820E6E74;
		  /* 820E6E74h */ case    5:  		/* addi R30, R30, 4 */
		/* 820E6E74h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820E6E74h case    5:*/		return 0x820E6E78;
		  /* 820E6E78h */ case    6:  		/* bc 16, CR0_LT, -12 */
		/* 820E6E78h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E6E6C;  }
		/* 820E6E78h case    6:*/		return 0x820E6E7C;
	}
	return 0x820E6E7C;
} // Block from 820E6E60h-820E6E7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E6E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6E7C);
		  /* 820E6E7Ch */ case    0:  		/* mr R4, R31 */
		/* 820E6E7Ch case    0:*/		regs.R4 = regs.R31;
		/* 820E6E7Ch case    0:*/		return 0x820E6E80;
		  /* 820E6E80h */ case    1:  		/* lwz R3, <#[R28 + 260]> */
		/* 820E6E80h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000104) );
		/* 820E6E80h case    1:*/		return 0x820E6E84;
		  /* 820E6E84h */ case    2:  		/* bl 88780 */
		/* 820E6E84h case    2:*/		regs.LR = 0x820E6E88; return 0x820FC950;
		/* 820E6E84h case    2:*/		return 0x820E6E88;
		  /* 820E6E88h */ case    3:  		/* b -136 */
		/* 820E6E88h case    3:*/		return 0x820E6E00;
		/* 820E6E88h case    3:*/		return 0x820E6E8C;
		  /* 820E6E8Ch */ case    4:  		/* nop */
		/* 820E6E8Ch case    4:*/		cpu::op::nop();
		/* 820E6E8Ch case    4:*/		return 0x820E6E90;
	}
	return 0x820E6E90;
} // Block from 820E6E7Ch-820E6E90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E6E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6E90);
		  /* 820E6E90h */ case    0:  		/* mfspr R12, LR */
		/* 820E6E90h case    0:*/		regs.R12 = regs.LR;
		/* 820E6E90h case    0:*/		return 0x820E6E94;
		  /* 820E6E94h */ case    1:  		/* bl -351292 */
		/* 820E6E94h case    1:*/		regs.LR = 0x820E6E98; return 0x82091258;
		/* 820E6E94h case    1:*/		return 0x820E6E98;
		  /* 820E6E98h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820E6E98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820E6E98h case    2:*/		return 0x820E6E9C;
		  /* 820E6E9Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E6E9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E6E9Ch case    3:*/		return 0x820E6EA0;
		  /* 820E6EA0h */ case    4:  		/* mr R31, R3 */
		/* 820E6EA0h case    4:*/		regs.R31 = regs.R3;
		/* 820E6EA0h case    4:*/		return 0x820E6EA4;
		  /* 820E6EA4h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 820E6EA4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E6EA4h case    5:*/		return 0x820E6EA8;
		  /* 820E6EA8h */ case    6:  		/* rlwinm R10, R10, 0, 12, 31 */
		/* 820E6EA8h case    6:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R10,regs.R10);
		/* 820E6EA8h case    6:*/		return 0x820E6EAC;
		  /* 820E6EACh */ case    7:  		/* cmplwi CR6, R10, 1 */
		/* 820E6EACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 820E6EACh case    7:*/		return 0x820E6EB0;
		  /* 820E6EB0h */ case    8:  		/* bc 4, CR6_EQ, 256 */
		/* 820E6EB0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820E6FB0;  }
		/* 820E6EB0h case    8:*/		return 0x820E6EB4;
		  /* 820E6EB4h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E6EB4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E6EB4h case    9:*/		return 0x820E6EB8;
		  /* 820E6EB8h */ case   10:  		/* lwz R10, <#[R3 + 20]> */
		/* 820E6EB8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 820E6EB8h case   10:*/		return 0x820E6EBC;
		  /* 820E6EBCh */ case   11:  		/* lwz R9, <#[R3 + 16]> */
		/* 820E6EBCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 820E6EBCh case   11:*/		return 0x820E6EC0;
		  /* 820E6EC0h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E6EC0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6EC0h case   12:*/		return 0x820E6EC4;
		  /* 820E6EC4h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6EC4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6EC4h case   13:*/		return 0x820E6EC8;
		  /* 820E6EC8h */ case   14:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E6EC8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E6EC8h case   14:*/		return 0x820E6ECC;
		  /* 820E6ECCh */ case   15:  		/* lwz R10, <#[R11 + 4]> */
		/* 820E6ECCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6ECCh case   15:*/		return 0x820E6ED0;
		  /* 820E6ED0h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E6ED0h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E6ED0h case   16:*/		return 0x820E6ED4;
		  /* 820E6ED4h */ case   17:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E6ED4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E6ED4h case   17:*/		return 0x820E6ED8;
		  /* 820E6ED8h */ case   18:  		/* lwz R10, <#[R10 + 4]> */
		/* 820E6ED8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820E6ED8h case   18:*/		return 0x820E6EDC;
		  /* 820E6EDCh */ case   19:  		/* rlwinm. R10, R10, 0, 23, 23 */
		/* 820E6EDCh case   19:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R10);
		/* 820E6EDCh case   19:*/		return 0x820E6EE0;
		  /* 820E6EE0h */ case   20:  		/* bc 12, CR0_EQ, 208 */
		/* 820E6EE0h case   20:*/		if ( regs.CR[0].eq ) { return 0x820E6FB0;  }
		/* 820E6EE0h case   20:*/		return 0x820E6EE4;
		  /* 820E6EE4h */ case   21:  		/* lwz R10, <#[R11 + 8]> */
		/* 820E6EE4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820E6EE4h case   21:*/		return 0x820E6EE8;
		  /* 820E6EE8h */ case   22:  		/* cmpwi CR6, R10, -1 */
		/* 820E6EE8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E6EE8h case   22:*/		return 0x820E6EEC;
		  /* 820E6EECh */ case   23:  		/* bc 4, CR6_EQ, 196 */
		/* 820E6EECh case   23:*/		if ( !regs.CR[6].eq ) { return 0x820E6FB0;  }
		/* 820E6EECh case   23:*/		return 0x820E6EF0;
		  /* 820E6EF0h */ case   24:  		/* lis R10, -32256 */
		/* 820E6EF0h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820E6EF0h case   24:*/		return 0x820E6EF4;
		  /* 820E6EF4h */ case   25:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820E6EF4h case   25:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820E6EF4h case   25:*/		return 0x820E6EF8;
		  /* 820E6EF8h */ case   26:  		/* lfd FR1, <#[R10 + 1808]> */
		/* 820E6EF8h case   26:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00000710) );
		/* 820E6EF8h case   26:*/		return 0x820E6EFC;
		  /* 820E6EFCh */ case   27:  		/* fcmpu CR6, FR0, FR1 */
		/* 820E6EFCh case   27:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 820E6EFCh case   27:*/		return 0x820E6F00;
		  /* 820E6F00h */ case   28:  		/* bc 4, CR6_EQ, 176 */
		/* 820E6F00h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E6FB0;  }
		/* 820E6F00h case   28:*/		return 0x820E6F04;
		  /* 820E6F04h */ case   29:  		/* li R6, 0 */
		/* 820E6F04h case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E6F04h case   29:*/		return 0x820E6F08;
		  /* 820E6F08h */ case   30:  		/* li R5, 0 */
		/* 820E6F08h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E6F08h case   30:*/		return 0x820E6F0C;
		  /* 820E6F0Ch */ case   31:  		/* li R4, 0 */
		/* 820E6F0Ch case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E6F0Ch case   31:*/		return 0x820E6F10;
		  /* 820E6F10h */ case   32:  		/* bl 90904 */
		/* 820E6F10h case   32:*/		regs.LR = 0x820E6F14; return 0x820FD228;
		/* 820E6F10h case   32:*/		return 0x820E6F14;
		  /* 820E6F14h */ case   33:  		/* mr R28, R3 */
		/* 820E6F14h case   33:*/		regs.R28 = regs.R3;
		/* 820E6F14h case   33:*/		return 0x820E6F18;
		  /* 820E6F18h */ case   34:  		/* cmpwi CR6, R3, -1 */
		/* 820E6F18h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E6F18h case   34:*/		return 0x820E6F1C;
		  /* 820E6F1Ch */ case   35:  		/* bc 4, CR6_EQ, 16 */
		/* 820E6F1Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x820E6F2C;  }
		/* 820E6F1Ch case   35:*/		return 0x820E6F20;
		  /* 820E6F20h */ case   36:  		/* lis R3, -32761 */
		/* 820E6F20h case   36:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E6F20h case   36:*/		return 0x820E6F24;
		  /* 820E6F24h */ case   37:  		/* ori R3, R3, 14 */
		/* 820E6F24h case   37:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E6F24h case   37:*/		return 0x820E6F28;
		  /* 820E6F28h */ case   38:  		/* b 140 */
		/* 820E6F28h case   38:*/		return 0x820E6FB4;
		/* 820E6F28h case   38:*/		return 0x820E6F2C;
	}
	return 0x820E6F2C;
} // Block from 820E6E90h-820E6F2Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 820E6F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6F2C);
		  /* 820E6F2Ch */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E6F2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E6F2Ch case    0:*/		return 0x820E6F30;
		  /* 820E6F30h */ case    1:  		/* rlwinm R10, R28, 2, 0, 29 */
		/* 820E6F30h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R28);
		/* 820E6F30h case    1:*/		return 0x820E6F34;
		  /* 820E6F34h */ case    2:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E6F34h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E6F34h case    2:*/		return 0x820E6F38;
		  /* 820E6F38h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E6F38h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E6F38h case    3:*/		return 0x820E6F3C;
		  /* 820E6F3Ch */ case    4:  		/* lwzx R30, <#[R10 + R9]> */
		/* 820E6F3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E6F3Ch case    4:*/		return 0x820E6F40;
		  /* 820E6F40h */ case    5:  		/* mr R3, R30 */
		/* 820E6F40h case    5:*/		regs.R3 = regs.R30;
		/* 820E6F40h case    5:*/		return 0x820E6F44;
		  /* 820E6F44h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 820E6F44h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E6F44h case    6:*/		return 0x820E6F48;
		  /* 820E6F48h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E6F48h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E6F48h case    7:*/		return 0x820E6F4C;
		  /* 820E6F4Ch */ case    8:  		/* lwzx R29, <#[R11 + R9]> */
		/* 820E6F4Ch case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E6F4Ch case    8:*/		return 0x820E6F50;
		  /* 820E6F50h */ case    9:  		/* mr R4, R29 */
		/* 820E6F50h case    9:*/		regs.R4 = regs.R29;
		/* 820E6F50h case    9:*/		return 0x820E6F54;
		  /* 820E6F54h */ case   10:  		/* bl 89172 */
		/* 820E6F54h case   10:*/		regs.LR = 0x820E6F58; return 0x820FCBA8;
		/* 820E6F54h case   10:*/		return 0x820E6F58;
		  /* 820E6F58h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820E6F58h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E6F58h case   11:*/		return 0x820E6F5C;
		  /* 820E6F5Ch */ case   12:  		/* bc 12, CR0_LT, 88 */
		/* 820E6F5Ch case   12:*/		if ( regs.CR[0].lt ) { return 0x820E6FB4;  }
		/* 820E6F5Ch case   12:*/		return 0x820E6F60;
		  /* 820E6F60h */ case   13:  		/* mr R4, R29 */
		/* 820E6F60h case   13:*/		regs.R4 = regs.R29;
		/* 820E6F60h case   13:*/		return 0x820E6F64;
		  /* 820E6F64h */ case   14:  		/* mr R3, R30 */
		/* 820E6F64h case   14:*/		regs.R3 = regs.R30;
		/* 820E6F64h case   14:*/		return 0x820E6F68;
		  /* 820E6F68h */ case   15:  		/* bl 89400 */
		/* 820E6F68h case   15:*/		regs.LR = 0x820E6F6C; return 0x820FCCA0;
		/* 820E6F68h case   15:*/		return 0x820E6F6C;
		  /* 820E6F6Ch */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 820E6F6Ch case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E6F6Ch case   16:*/		return 0x820E6F70;
		  /* 820E6F70h */ case   17:  		/* bc 12, CR0_LT, 68 */
		/* 820E6F70h case   17:*/		if ( regs.CR[0].lt ) { return 0x820E6FB4;  }
		/* 820E6F70h case   17:*/		return 0x820E6F74;
		  /* 820E6F74h */ case   18:  		/* lwz R11, <#[R30 + 60]> */
		/* 820E6F74h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820E6F74h case   18:*/		return 0x820E6F78;
		  /* 820E6F78h */ case   19:  		/* lwz R10, <#[R30 + 56]> */
		/* 820E6F78h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 820E6F78h case   19:*/		return 0x820E6F7C;
		  /* 820E6F7Ch */ case   20:  		/* xoris R11, R11, 8 */
		/* 820E6F7Ch case   20:*/		cpu::op::xoris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820E6F7Ch case   20:*/		return 0x820E6F80;
		  /* 820E6F80h */ case   21:  		/* cmpwi CR6, R10, -1 */
		/* 820E6F80h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E6F80h case   21:*/		return 0x820E6F84;
		  /* 820E6F84h */ case   22:  		/* stw R11, <#[R30 + 60]> */
		/* 820E6F84h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820E6F84h case   22:*/		return 0x820E6F88;
	}
	return 0x820E6F88;
} // Block from 820E6F2Ch-820E6F88h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E6F88h
// Function '?MatchIF2@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6F88);
		  /* 820E6F88h */ case    0:  		/* bc 4, CR6_EQ, 20 */
		/* 820E6F88h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820E6F9C;  }
		/* 820E6F88h case    0:*/		return 0x820E6F8C;
		  /* 820E6F8Ch */ case    1:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E6F8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E6F8Ch case    1:*/		return 0x820E6F90;
		  /* 820E6F90h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E6F90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E6F90h case    2:*/		return 0x820E6F94;
		  /* 820E6F94h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 820E6F94h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E6F94h case    3:*/		return 0x820E6F98;
		  /* 820E6F98h */ case    4:  		/* stw R11, <#[R30 + 56]> */
		/* 820E6F98h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820E6F98h case    4:*/		return 0x820E6F9C;
	}
	return 0x820E6F9C;
} // Block from 820E6F88h-820E6F9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E6F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6F9C);
		  /* 820E6F9Ch */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E6F9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E6F9Ch case    0:*/		return 0x820E6FA0;
		  /* 820E6FA0h */ case    1:  		/* li R3, 0 */
		/* 820E6FA0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E6FA0h case    1:*/		return 0x820E6FA4;
		  /* 820E6FA4h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E6FA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E6FA4h case    2:*/		return 0x820E6FA8;
		  /* 820E6FA8h */ case    3:  		/* stw R28, <#[R11 + 4]> */
		/* 820E6FA8h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 820E6FA8h case    3:*/		return 0x820E6FAC;
		  /* 820E6FACh */ case    4:  		/* b 8 */
		/* 820E6FACh case    4:*/		return 0x820E6FB4;
		/* 820E6FACh case    4:*/		return 0x820E6FB0;
	}
	return 0x820E6FB0;
} // Block from 820E6F9Ch-820E6FB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E6FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6FB0);
		  /* 820E6FB0h */ case    0:  		/* li R3, 1 */
		/* 820E6FB0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E6FB0h case    0:*/		return 0x820E6FB4;
	}
	return 0x820E6FB4;
} // Block from 820E6FB0h-820E6FB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E6FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6FB4);
		  /* 820E6FB4h */ case    0:  		/* addi R1, R1, 128 */
		/* 820E6FB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820E6FB4h case    0:*/		return 0x820E6FB8;
		  /* 820E6FB8h */ case    1:  		/* b -351504 */
		/* 820E6FB8h case    1:*/		return 0x820912A8;
		/* 820E6FB8h case    1:*/		return 0x820E6FBC;
		  /* 820E6FBCh */ case    2:  		/* nop */
		/* 820E6FBCh case    2:*/		cpu::op::nop();
		/* 820E6FBCh case    2:*/		return 0x820E6FC0;
	}
	return 0x820E6FC0;
} // Block from 820E6FB4h-820E6FC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E6FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E6FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E6FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E6FC0);
		  /* 820E6FC0h */ case    0:  		/* mfspr R12, LR */
		/* 820E6FC0h case    0:*/		regs.R12 = regs.LR;
		/* 820E6FC0h case    0:*/		return 0x820E6FC4;
		  /* 820E6FC4h */ case    1:  		/* bl -351604 */
		/* 820E6FC4h case    1:*/		regs.LR = 0x820E6FC8; return 0x82091250;
		/* 820E6FC4h case    1:*/		return 0x820E6FC8;
		  /* 820E6FC8h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 820E6FC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 820E6FC8h case    2:*/		return 0x820E6FCC;
		  /* 820E6FCCh */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E6FCCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E6FCCh case    3:*/		return 0x820E6FD0;
		  /* 820E6FD0h */ case    4:  		/* lis R11, -32254 */
		/* 820E6FD0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E6FD0h case    4:*/		return 0x820E6FD4;
		  /* 820E6FD4h */ case    5:  		/* li R8, 3 */
		/* 820E6FD4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E6FD4h case    5:*/		return 0x820E6FD8;
		  /* 820E6FD8h */ case    6:  		/* addi R29, R11, -23080 */
		/* 820E6FD8h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFA5D8);
		/* 820E6FD8h case    6:*/		return 0x820E6FDC;
		  /* 820E6FDCh */ case    7:  		/* li R26, 0 */
		/* 820E6FDCh case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E6FDCh case    7:*/		return 0x820E6FE0;
		  /* 820E6FE0h */ case    8:  		/* stw R8, <#[R1 + 124]> */
		/* 820E6FE0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E6FE0h case    8:*/		return 0x820E6FE4;
		  /* 820E6FE4h */ case    9:  		/* li R28, 1 */
		/* 820E6FE4h case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820E6FE4h case    9:*/		return 0x820E6FE8;
		  /* 820E6FE8h */ case   10:  		/* lwz R10, <#[R4]> */
		/* 820E6FE8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820E6FE8h case   10:*/		return 0x820E6FEC;
		  /* 820E6FECh */ case   11:  		/* li R11, 2 */
		/* 820E6FECh case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E6FECh case   11:*/		return 0x820E6FF0;
		  /* 820E6FF0h */ case   12:  		/* addi R5, R29, -96 */
		/* 820E6FF0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFFA0);
		/* 820E6FF0h case   12:*/		return 0x820E6FF4;
		  /* 820E6FF4h */ case   13:  		/* stw R26, <#[R1 + 96]> */
		/* 820E6FF4h case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 820E6FF4h case   13:*/		return 0x820E6FF8;
		  /* 820E6FF8h */ case   14:  		/* rlwinm R31, R10, 0, 12, 31 */
		/* 820E6FF8h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R10);
		/* 820E6FF8h case   14:*/		return 0x820E6FFC;
		  /* 820E6FFCh */ case   15:  		/* stw R26, <#[R1 + 112]> */
		/* 820E6FFCh case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 820E6FFCh case   15:*/		return 0x820E7000;
		  /* 820E7000h */ case   16:  		/* addi R9, R1, 112 */
		/* 820E7000h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E7000h case   16:*/		return 0x820E7004;
		  /* 820E7004h */ case   17:  		/* stw R28, <#[R1 + 116]> */
		/* 820E7004h case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 820E7004h case   17:*/		return 0x820E7008;
		  /* 820E7008h */ case   18:  		/* addi R8, R1, 192 */
		/* 820E7008h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E7008h case   18:*/		return 0x820E700C;
		  /* 820E700Ch */ case   19:  		/* stw R11, <#[R1 + 120]> */
		/* 820E700Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E700Ch case   19:*/		return 0x820E7010;
		  /* 820E7010h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E7010h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E7010h case   20:*/		return 0x820E7014;
		  /* 820E7014h */ case   21:  		/* stw R28, <#[R1 + 84]> */
		/* 820E7014h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7014h case   21:*/		return 0x820E7018;
		  /* 820E7018h */ case   22:  		/* addi R6, R1, 128 */
		/* 820E7018h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E7018h case   22:*/		return 0x820E701C;
		  /* 820E701Ch */ case   23:  		/* mr R10, R31 */
		/* 820E701Ch case   23:*/		regs.R10 = regs.R31;
		/* 820E701Ch case   23:*/		return 0x820E7020;
		  /* 820E7020h */ case   24:  		/* mr R30, R3 */
		/* 820E7020h case   24:*/		regs.R30 = regs.R3;
		/* 820E7020h case   24:*/		return 0x820E7024;
		  /* 820E7024h */ case   25:  		/* mr R27, R26 */
		/* 820E7024h case   25:*/		regs.R27 = regs.R26;
		/* 820E7024h case   25:*/		return 0x820E7028;
		  /* 820E7028h */ case   26:  		/* bl -13224 */
		/* 820E7028h case   26:*/		regs.LR = 0x820E702C; return 0x820E3C80;
		/* 820E7028h case   26:*/		return 0x820E702C;
		  /* 820E702Ch */ case   27:  		/* cmpwi CR6, R3, 1 */
		/* 820E702Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E702Ch case   27:*/		return 0x820E7030;
		  /* 820E7030h */ case   28:  		/* bc 4, CR6_EQ, 48 */
		/* 820E7030h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E7060;  }
		/* 820E7030h case   28:*/		return 0x820E7034;
		  /* 820E7034h */ case   29:  		/* mr R5, R29 */
		/* 820E7034h case   29:*/		regs.R5 = regs.R29;
		/* 820E7034h case   29:*/		return 0x820E7038;
		  /* 820E7038h */ case   30:  		/* lwz R4, <#[R30 + 260]> */
		/* 820E7038h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 820E7038h case   30:*/		return 0x820E703C;
		  /* 820E703Ch */ case   31:  		/* mr R10, R31 */
		/* 820E703Ch case   31:*/		regs.R10 = regs.R31;
		/* 820E703Ch case   31:*/		return 0x820E7040;
		  /* 820E7040h */ case   32:  		/* stw R28, <#[R1 + 84]> */
		/* 820E7040h case   32:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7040h case   32:*/		return 0x820E7044;
		  /* 820E7044h */ case   33:  		/* addi R9, R1, 112 */
		/* 820E7044h case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E7044h case   33:*/		return 0x820E7048;
		  /* 820E7048h */ case   34:  		/* addi R8, R1, 192 */
		/* 820E7048h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E7048h case   34:*/		return 0x820E704C;
		  /* 820E704Ch */ case   35:  		/* addi R7, R1, 96 */
		/* 820E704Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E704Ch case   35:*/		return 0x820E7050;
		  /* 820E7050h */ case   36:  		/* addi R6, R1, 128 */
		/* 820E7050h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E7050h case   36:*/		return 0x820E7054;
		  /* 820E7054h */ case   37:  		/* mr R3, R30 */
		/* 820E7054h case   37:*/		regs.R3 = regs.R30;
		/* 820E7054h case   37:*/		return 0x820E7058;
		  /* 820E7058h */ case   38:  		/* mr R27, R28 */
		/* 820E7058h case   38:*/		regs.R27 = regs.R28;
		/* 820E7058h case   38:*/		return 0x820E705C;
		  /* 820E705Ch */ case   39:  		/* bl -13276 */
		/* 820E705Ch case   39:*/		regs.LR = 0x820E7060; return 0x820E3C80;
		/* 820E705Ch case   39:*/		return 0x820E7060;
	}
	return 0x820E7060;
} // Block from 820E6FC0h-820E7060h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820E7060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7060);
		  /* 820E7060h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E7060h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E7060h case    0:*/		return 0x820E7064;
		  /* 820E7064h */ case    1:  		/* bc 4, CR6_EQ, 240 */
		/* 820E7064h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E7154;  }
		/* 820E7064h case    1:*/		return 0x820E7068;
		  /* 820E7068h */ case    2:  		/* mr R8, R26 */
		/* 820E7068h case    2:*/		regs.R8 = regs.R26;
		/* 820E7068h case    2:*/		return 0x820E706C;
		  /* 820E706Ch */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 820E706Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E706Ch case    3:*/		return 0x820E7070;
		  /* 820E7070h */ case    4:  		/* bc 12, CR6_EQ, 132 */
		/* 820E7070h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E70F4;  }
		/* 820E7070h case    4:*/		return 0x820E7074;
		  /* 820E7074h */ case    5:  		/* lis R9, -32256 */
		/* 820E7074h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820E7074h case    5:*/		return 0x820E7078;
		  /* 820E7078h */ case    6:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 820E7078h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 820E7078h case    6:*/		return 0x820E707C;
		  /* 820E707Ch */ case    7:  		/* addi R10, R1, 208 */
		/* 820E707Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 820E707Ch case    7:*/		return 0x820E7080;
		  /* 820E7080h */ case    8:  		/* lfd FR0, <#[R9 + 1808]> */
		/* 820E7080h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000710) );
		/* 820E7080h case    8:*/		return 0x820E7084;
		  /* 820E7084h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 820E7084h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7084h case    9:*/		return 0x820E7088;
		  /* 820E7088h */ case   10:  		/* lwz R7, <#[R10 + 16]> */
		/* 820E7088h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000010) );
		/* 820E7088h case   10:*/		return 0x820E708C;
		  /* 820E708Ch */ case   11:  		/* cmplw CR6, R9, R7 */
		/* 820E708Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 820E708Ch case   11:*/		return 0x820E7090;
		  /* 820E7090h */ case   12:  		/* bc 4, CR6_EQ, 128 */
		/* 820E7090h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E7110;  }
		/* 820E7090h case   12:*/		return 0x820E7094;
		  /* 820E7094h */ case   13:  		/* lwz R9, <#[R30 + 260]> */
		/* 820E7094h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000104) );
		/* 820E7094h case   13:*/		return 0x820E7098;
		  /* 820E7098h */ case   14:  		/* lwz R7, <#[R30 + 20]> */
		/* 820E7098h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000014) );
		/* 820E7098h case   14:*/		return 0x820E709C;
		  /* 820E709Ch */ case   15:  		/* lwz R6, <#[R30 + 16]> */
		/* 820E709Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 820E709Ch case   15:*/		return 0x820E70A0;
		  /* 820E70A0h */ case   16:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E70A0h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E70A0h case   16:*/		return 0x820E70A4;
		  /* 820E70A4h */ case   17:  		/* lwzx R9, <#[R9 + R11]> */
		/* 820E70A4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E70A4h case   17:*/		return 0x820E70A8;
		  /* 820E70A8h */ case   18:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E70A8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E70A8h case   18:*/		return 0x820E70AC;
		  /* 820E70ACh */ case   19:  		/* lwzx R9, <#[R9 + R7]> */
		/* 820E70ACh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 820E70ACh case   19:*/		return 0x820E70B0;
		  /* 820E70B0h */ case   20:  		/* lwz R7, <#[R9 + 4]> */
		/* 820E70B0h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000004) );
		/* 820E70B0h case   20:*/		return 0x820E70B4;
		  /* 820E70B4h */ case   21:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820E70B4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820E70B4h case   21:*/		return 0x820E70B8;
		  /* 820E70B8h */ case   22:  		/* lwzx R7, <#[R7 + R6]> */
		/* 820E70B8h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 820E70B8h case   22:*/		return 0x820E70BC;
		  /* 820E70BCh */ case   23:  		/* lwz R7, <#[R7 + 4]> */
		/* 820E70BCh case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820E70BCh case   23:*/		return 0x820E70C0;
		  /* 820E70C0h */ case   24:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 820E70C0h case   24:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 820E70C0h case   24:*/		return 0x820E70C4;
		  /* 820E70C4h */ case   25:  		/* bc 12, CR0_EQ, 76 */
		/* 820E70C4h case   25:*/		if ( regs.CR[0].eq ) { return 0x820E7110;  }
		/* 820E70C4h case   25:*/		return 0x820E70C8;
		  /* 820E70C8h */ case   26:  		/* lfd FR13, <#[R9 + 32]> */
		/* 820E70C8h case   26:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000020) );
		/* 820E70C8h case   26:*/		return 0x820E70CC;
		  /* 820E70CCh */ case   27:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E70CCh case   27:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E70CCh case   27:*/		return 0x820E70D0;
		  /* 820E70D0h */ case   28:  		/* bc 4, CR6_EQ, 64 */
		/* 820E70D0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E7110;  }
		/* 820E70D0h case   28:*/		return 0x820E70D4;
		  /* 820E70D4h */ case   29:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E70D4h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E70D4h case   29:*/		return 0x820E70D8;
		  /* 820E70D8h */ case   30:  		/* cmpwi CR6, R9, -1 */
		/* 820E70D8h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E70D8h case   30:*/		return 0x820E70DC;
		  /* 820E70DCh */ case   31:  		/* bc 4, CR6_EQ, 52 */
		/* 820E70DCh case   31:*/		if ( !regs.CR[6].eq ) { return 0x820E7110;  }
		/* 820E70DCh case   31:*/		return 0x820E70E0;
		  /* 820E70E0h */ case   32:  		/* addi R8, R8, 1 */
		/* 820E70E0h case   32:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E70E0h case   32:*/		return 0x820E70E4;
		  /* 820E70E4h */ case   33:  		/* addi R10, R10, 4 */
		/* 820E70E4h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E70E4h case   33:*/		return 0x820E70E8;
		  /* 820E70E8h */ case   34:  		/* addi R11, R11, 4 */
		/* 820E70E8h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E70E8h case   34:*/		return 0x820E70EC;
		  /* 820E70ECh */ case   35:  		/* cmplw CR6, R8, R31 */
		/* 820E70ECh case   35:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R31);
		/* 820E70ECh case   35:*/		return 0x820E70F0;
		  /* 820E70F0h */ case   36:  		/* bc 12, CR6_LT, -108 */
		/* 820E70F0h case   36:*/		if ( regs.CR[6].lt ) { return 0x820E7084;  }
		/* 820E70F0h case   36:*/		return 0x820E70F4;
	}
	return 0x820E70F4;
} // Block from 820E7060h-820E70F4h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820E70F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E70F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E70F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E70F4);
		  /* 820E70F4h */ case    0:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E70F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E70F4h case    0:*/		return 0x820E70F8;
		  /* 820E70F8h */ case    1:  		/* cmpwi CR6, R27, 0 */
		/* 820E70F8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E70F8h case    1:*/		return 0x820E70FC;
		  /* 820E70FCh */ case    2:  		/* mr R10, R31 */
		/* 820E70FCh case    2:*/		regs.R10 = regs.R31;
		/* 820E70FCh case    2:*/		return 0x820E7100;
		  /* 820E7100h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 820E7100h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E7118;  }
		/* 820E7100h case    3:*/		return 0x820E7104;
		  /* 820E7104h */ case    4:  		/* li R9, 1847 */
		/* 820E7104h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x737);
		/* 820E7104h case    4:*/		return 0x820E7108;
		  /* 820E7108h */ case    5:  		/* rlwimi R10, R9, 20, 0, 11 */
		/* 820E7108h case    5:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R10,regs.R9);
		/* 820E7108h case    5:*/		return 0x820E710C;
		  /* 820E710Ch */ case    6:  		/* b 20 */
		/* 820E710Ch case    6:*/		return 0x820E7120;
		/* 820E710Ch case    6:*/		return 0x820E7110;
	}
	return 0x820E7110;
} // Block from 820E70F4h-820E7110h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E7110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7110);
		  /* 820E7110h */ case    0:  		/* li R3, 1 */
		/* 820E7110h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E7110h case    0:*/		return 0x820E7114;
		  /* 820E7114h */ case    1:  		/* b 64 */
		/* 820E7114h case    1:*/		return 0x820E7154;
		/* 820E7114h case    1:*/		return 0x820E7118;
	}
	return 0x820E7118;
} // Block from 820E7110h-820E7118h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E7118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7118);
		  /* 820E7118h */ case    0:  		/* li R9, 231 */
		/* 820E7118h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0xE7);
		/* 820E7118h case    0:*/		return 0x820E711C;
		  /* 820E711Ch */ case    1:  		/* rlwimi R10, R9, 23, 0, 11 */
		/* 820E711Ch case    1:*/		cpu::op::rlwimi<0,23,0,11>(regs,&regs.R10,regs.R9);
		/* 820E711Ch case    1:*/		return 0x820E7120;
	}
	return 0x820E7120;
} // Block from 820E7118h-820E7120h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E7120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7120);
		  /* 820E7120h */ case    0:  		/* stw R10, <#[R11]> */
		/* 820E7120h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E7120h case    0:*/		return 0x820E7124;
		  /* 820E7124h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 820E7124h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E7124h case    1:*/		return 0x820E7128;
		  /* 820E7128h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 820E7128h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E7150;  }
		/* 820E7128h case    2:*/		return 0x820E712C;
		  /* 820E712Ch */ case    3:  		/* mr R11, R26 */
		/* 820E712Ch case    3:*/		regs.R11 = regs.R26;
		/* 820E712Ch case    3:*/		return 0x820E7130;
		  /* 820E7130h */ case    4:  		/* mtspr CTR, R31 */
		/* 820E7130h case    4:*/		regs.CTR = regs.R31;
		/* 820E7130h case    4:*/		return 0x820E7134;
		  /* 820E7134h */ case    5:  		/* lwz R10, <#[R30 + 260]> */
		/* 820E7134h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 820E7134h case    5:*/		return 0x820E7138;
		  /* 820E7138h */ case    6:  		/* addi R9, R1, 208 */
		/* 820E7138h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xD0);
		/* 820E7138h case    6:*/		return 0x820E713C;
		  /* 820E713Ch */ case    7:  		/* lwzx R9, <#[R11 + R9]> */
		/* 820E713Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E713Ch case    7:*/		return 0x820E7140;
		  /* 820E7140h */ case    8:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E7140h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E7140h case    8:*/		return 0x820E7144;
		  /* 820E7144h */ case    9:  		/* stwx R9, <#[R10 + R11]> */
		/* 820E7144h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7144h case    9:*/		return 0x820E7148;
		  /* 820E7148h */ case   10:  		/* addi R11, R11, 4 */
		/* 820E7148h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E7148h case   10:*/		return 0x820E714C;
		  /* 820E714Ch */ case   11:  		/* bc 16, CR0_LT, -24 */
		/* 820E714Ch case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E7134;  }
		/* 820E714Ch case   11:*/		return 0x820E7150;
	}
	return 0x820E7150;
} // Block from 820E7120h-820E7150h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E7150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7150);
		  /* 820E7150h */ case    0:  		/* li R3, 0 */
		/* 820E7150h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E7150h case    0:*/		return 0x820E7154;
	}
	return 0x820E7154;
} // Block from 820E7150h-820E7154h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E7154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7154);
		  /* 820E7154h */ case    0:  		/* addi R1, R1, 416 */
		/* 820E7154h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 820E7154h case    0:*/		return 0x820E7158;
		  /* 820E7158h */ case    1:  		/* b -351928 */
		/* 820E7158h case    1:*/		return 0x820912A0;
		/* 820E7158h case    1:*/		return 0x820E715C;
		  /* 820E715Ch */ case    2:  		/* nop */
		/* 820E715Ch case    2:*/		cpu::op::nop();
		/* 820E715Ch case    2:*/		return 0x820E7160;
	}
	return 0x820E7160;
} // Block from 820E7154h-820E7160h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E7160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7160);
		  /* 820E7160h */ case    0:  		/* mfspr R12, LR */
		/* 820E7160h case    0:*/		regs.R12 = regs.LR;
		/* 820E7160h case    0:*/		return 0x820E7164;
		  /* 820E7164h */ case    1:  		/* bl -352020 */
		/* 820E7164h case    1:*/		regs.LR = 0x820E7168; return 0x82091250;
		/* 820E7164h case    1:*/		return 0x820E7168;
		  /* 820E7168h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 820E7168h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 820E7168h case    2:*/		return 0x820E716C;
		  /* 820E716Ch */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E716Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E716Ch case    3:*/		return 0x820E7170;
		  /* 820E7170h */ case    4:  		/* lis R11, -32254 */
		/* 820E7170h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E7170h case    4:*/		return 0x820E7174;
		  /* 820E7174h */ case    5:  		/* li R8, 3 */
		/* 820E7174h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E7174h case    5:*/		return 0x820E7178;
		  /* 820E7178h */ case    6:  		/* addi R29, R11, -22856 */
		/* 820E7178h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFA6B8);
		/* 820E7178h case    6:*/		return 0x820E717C;
		  /* 820E717Ch */ case    7:  		/* li R26, 0 */
		/* 820E717Ch case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E717Ch case    7:*/		return 0x820E7180;
		  /* 820E7180h */ case    8:  		/* stw R8, <#[R1 + 124]> */
		/* 820E7180h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E7180h case    8:*/		return 0x820E7184;
		  /* 820E7184h */ case    9:  		/* li R28, 1 */
		/* 820E7184h case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820E7184h case    9:*/		return 0x820E7188;
		  /* 820E7188h */ case   10:  		/* lwz R10, <#[R4]> */
		/* 820E7188h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820E7188h case   10:*/		return 0x820E718C;
		  /* 820E718Ch */ case   11:  		/* li R11, 2 */
		/* 820E718Ch case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E718Ch case   11:*/		return 0x820E7190;
		  /* 820E7190h */ case   12:  		/* addi R5, R29, -128 */
		/* 820E7190h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFF80);
		/* 820E7190h case   12:*/		return 0x820E7194;
		  /* 820E7194h */ case   13:  		/* stw R26, <#[R1 + 96]> */
		/* 820E7194h case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 820E7194h case   13:*/		return 0x820E7198;
		  /* 820E7198h */ case   14:  		/* rlwinm R30, R10, 0, 12, 31 */
		/* 820E7198h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R10);
		/* 820E7198h case   14:*/		return 0x820E719C;
		  /* 820E719Ch */ case   15:  		/* stw R26, <#[R1 + 112]> */
		/* 820E719Ch case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 820E719Ch case   15:*/		return 0x820E71A0;
		  /* 820E71A0h */ case   16:  		/* addi R9, R1, 112 */
		/* 820E71A0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E71A0h case   16:*/		return 0x820E71A4;
		  /* 820E71A4h */ case   17:  		/* stw R28, <#[R1 + 116]> */
		/* 820E71A4h case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 820E71A4h case   17:*/		return 0x820E71A8;
		  /* 820E71A8h */ case   18:  		/* addi R8, R1, 192 */
		/* 820E71A8h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E71A8h case   18:*/		return 0x820E71AC;
		  /* 820E71ACh */ case   19:  		/* stw R11, <#[R1 + 120]> */
		/* 820E71ACh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E71ACh case   19:*/		return 0x820E71B0;
		  /* 820E71B0h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E71B0h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E71B0h case   20:*/		return 0x820E71B4;
		  /* 820E71B4h */ case   21:  		/* stw R28, <#[R1 + 84]> */
		/* 820E71B4h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E71B4h case   21:*/		return 0x820E71B8;
		  /* 820E71B8h */ case   22:  		/* addi R6, R1, 128 */
		/* 820E71B8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E71B8h case   22:*/		return 0x820E71BC;
		  /* 820E71BCh */ case   23:  		/* mr R10, R30 */
		/* 820E71BCh case   23:*/		regs.R10 = regs.R30;
		/* 820E71BCh case   23:*/		return 0x820E71C0;
		  /* 820E71C0h */ case   24:  		/* mr R31, R3 */
		/* 820E71C0h case   24:*/		regs.R31 = regs.R3;
		/* 820E71C0h case   24:*/		return 0x820E71C4;
		  /* 820E71C4h */ case   25:  		/* mr R27, R26 */
		/* 820E71C4h case   25:*/		regs.R27 = regs.R26;
		/* 820E71C4h case   25:*/		return 0x820E71C8;
		  /* 820E71C8h */ case   26:  		/* bl -13640 */
		/* 820E71C8h case   26:*/		regs.LR = 0x820E71CC; return 0x820E3C80;
		/* 820E71C8h case   26:*/		return 0x820E71CC;
		  /* 820E71CCh */ case   27:  		/* cmpwi CR6, R3, 1 */
		/* 820E71CCh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E71CCh case   27:*/		return 0x820E71D0;
		  /* 820E71D0h */ case   28:  		/* bc 4, CR6_EQ, 48 */
		/* 820E71D0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E7200;  }
		/* 820E71D0h case   28:*/		return 0x820E71D4;
		  /* 820E71D4h */ case   29:  		/* mr R5, R29 */
		/* 820E71D4h case   29:*/		regs.R5 = regs.R29;
		/* 820E71D4h case   29:*/		return 0x820E71D8;
		  /* 820E71D8h */ case   30:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E71D8h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E71D8h case   30:*/		return 0x820E71DC;
		  /* 820E71DCh */ case   31:  		/* mr R10, R30 */
		/* 820E71DCh case   31:*/		regs.R10 = regs.R30;
		/* 820E71DCh case   31:*/		return 0x820E71E0;
		  /* 820E71E0h */ case   32:  		/* stw R28, <#[R1 + 84]> */
		/* 820E71E0h case   32:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E71E0h case   32:*/		return 0x820E71E4;
		  /* 820E71E4h */ case   33:  		/* addi R9, R1, 112 */
		/* 820E71E4h case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E71E4h case   33:*/		return 0x820E71E8;
		  /* 820E71E8h */ case   34:  		/* addi R8, R1, 192 */
		/* 820E71E8h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E71E8h case   34:*/		return 0x820E71EC;
		  /* 820E71ECh */ case   35:  		/* addi R7, R1, 96 */
		/* 820E71ECh case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E71ECh case   35:*/		return 0x820E71F0;
		  /* 820E71F0h */ case   36:  		/* addi R6, R1, 128 */
		/* 820E71F0h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E71F0h case   36:*/		return 0x820E71F4;
		  /* 820E71F4h */ case   37:  		/* mr R3, R31 */
		/* 820E71F4h case   37:*/		regs.R3 = regs.R31;
		/* 820E71F4h case   37:*/		return 0x820E71F8;
		  /* 820E71F8h */ case   38:  		/* mr R27, R28 */
		/* 820E71F8h case   38:*/		regs.R27 = regs.R28;
		/* 820E71F8h case   38:*/		return 0x820E71FC;
		  /* 820E71FCh */ case   39:  		/* bl -13692 */
		/* 820E71FCh case   39:*/		regs.LR = 0x820E7200; return 0x820E3C80;
		/* 820E71FCh case   39:*/		return 0x820E7200;
	}
	return 0x820E7200;
} // Block from 820E7160h-820E7200h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820E7200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7200);
		  /* 820E7200h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E7200h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E7200h case    0:*/		return 0x820E7204;
		  /* 820E7204h */ case    1:  		/* bc 4, CR6_EQ, 240 */
		/* 820E7204h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E72F4;  }
		/* 820E7204h case    1:*/		return 0x820E7208;
		  /* 820E7208h */ case    2:  		/* mr R8, R26 */
		/* 820E7208h case    2:*/		regs.R8 = regs.R26;
		/* 820E7208h case    2:*/		return 0x820E720C;
		  /* 820E720Ch */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 820E720Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E720Ch case    3:*/		return 0x820E7210;
		  /* 820E7210h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 820E7210h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E7250;  }
		/* 820E7210h case    4:*/		return 0x820E7214;
		  /* 820E7214h */ case    5:  		/* addi R11, R1, 208 */
		/* 820E7214h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 820E7214h case    5:*/		return 0x820E7218;
		  /* 820E7218h */ case    6:  		/* lwz R9, <#[R11 - 16]> */
		/* 820E7218h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 820E7218h case    6:*/		return 0x820E721C;
		  /* 820E721Ch */ case    7:  		/* lwz R10, <#[R11]> */
		/* 820E721Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E721Ch case    7:*/		return 0x820E7220;
		  /* 820E7220h */ case    8:  		/* cmplw CR6, R9, R10 */
		/* 820E7220h case    8:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E7220h case    8:*/		return 0x820E7224;
		  /* 820E7224h */ case    9:  		/* bc 4, CR6_EQ, 72 */
		/* 820E7224h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E726C;  }
		/* 820E7224h case    9:*/		return 0x820E7228;
		  /* 820E7228h */ case   10:  		/* lwz R7, <#[R11 + 16]> */
		/* 820E7228h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 820E7228h case   10:*/		return 0x820E722C;
		  /* 820E722Ch */ case   11:  		/* cmplw CR6, R10, R7 */
		/* 820E722Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820E722Ch case   11:*/		return 0x820E7230;
		  /* 820E7230h */ case   12:  		/* bc 4, CR6_EQ, 60 */
		/* 820E7230h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E726C;  }
		/* 820E7230h case   12:*/		return 0x820E7234;
		  /* 820E7234h */ case   13:  		/* lwz R10, <#[R11 + 32]> */
		/* 820E7234h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 820E7234h case   13:*/		return 0x820E7238;
		  /* 820E7238h */ case   14:  		/* cmplw CR6, R9, R10 */
		/* 820E7238h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E7238h case   14:*/		return 0x820E723C;
		  /* 820E723Ch */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 820E723Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E726C;  }
		/* 820E723Ch case   15:*/		return 0x820E7240;
		  /* 820E7240h */ case   16:  		/* addi R8, R8, 1 */
		/* 820E7240h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E7240h case   16:*/		return 0x820E7244;
		  /* 820E7244h */ case   17:  		/* addi R11, R11, 4 */
		/* 820E7244h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E7244h case   17:*/		return 0x820E7248;
		  /* 820E7248h */ case   18:  		/* cmplw CR6, R8, R30 */
		/* 820E7248h case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R30);
		/* 820E7248h case   18:*/		return 0x820E724C;
		  /* 820E724Ch */ case   19:  		/* bc 12, CR6_LT, -52 */
		/* 820E724Ch case   19:*/		if ( regs.CR[6].lt ) { return 0x820E7218;  }
		/* 820E724Ch case   19:*/		return 0x820E7250;
	}
	return 0x820E7250;
} // Block from 820E7200h-820E7250h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E7250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7250);
		  /* 820E7250h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E7250h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E7250h case    0:*/		return 0x820E7254;
		  /* 820E7254h */ case    1:  		/* cmpwi CR6, R27, 0 */
		/* 820E7254h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E7254h case    1:*/		return 0x820E7258;
		  /* 820E7258h */ case    2:  		/* mr R10, R30 */
		/* 820E7258h case    2:*/		regs.R10 = regs.R30;
		/* 820E7258h case    2:*/		return 0x820E725C;
		  /* 820E725Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 820E725Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E7274;  }
		/* 820E725Ch case    3:*/		return 0x820E7260;
		  /* 820E7260h */ case    4:  		/* li R9, 1847 */
		/* 820E7260h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x737);
		/* 820E7260h case    4:*/		return 0x820E7264;
		  /* 820E7264h */ case    5:  		/* rlwimi R10, R9, 20, 0, 11 */
		/* 820E7264h case    5:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R10,regs.R9);
		/* 820E7264h case    5:*/		return 0x820E7268;
		  /* 820E7268h */ case    6:  		/* b 20 */
		/* 820E7268h case    6:*/		return 0x820E727C;
		/* 820E7268h case    6:*/		return 0x820E726C;
	}
	return 0x820E726C;
} // Block from 820E7250h-820E726Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E726Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E726C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E726C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E726C);
		  /* 820E726Ch */ case    0:  		/* li R3, 1 */
		/* 820E726Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E726Ch case    0:*/		return 0x820E7270;
		  /* 820E7270h */ case    1:  		/* b 132 */
		/* 820E7270h case    1:*/		return 0x820E72F4;
		/* 820E7270h case    1:*/		return 0x820E7274;
	}
	return 0x820E7274;
} // Block from 820E726Ch-820E7274h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E7274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7274);
		  /* 820E7274h */ case    0:  		/* li R9, 231 */
		/* 820E7274h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0xE7);
		/* 820E7274h case    0:*/		return 0x820E7278;
		  /* 820E7278h */ case    1:  		/* rlwimi R10, R9, 23, 0, 11 */
		/* 820E7278h case    1:*/		cpu::op::rlwimi<0,23,0,11>(regs,&regs.R10,regs.R9);
		/* 820E7278h case    1:*/		return 0x820E727C;
	}
	return 0x820E727C;
} // Block from 820E7274h-820E727Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E727Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E727C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E727C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E727C);
		  /* 820E727Ch */ case    0:  		/* stw R10, <#[R11]> */
		/* 820E727Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E727Ch case    0:*/		return 0x820E7280;
		  /* 820E7280h */ case    1:  		/* lis R11, -32256 */
		/* 820E7280h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E7280h case    1:*/		return 0x820E7284;
		  /* 820E7284h */ case    2:  		/* li R6, 0 */
		/* 820E7284h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E7284h case    2:*/		return 0x820E7288;
		  /* 820E7288h */ case    3:  		/* lwz R4, <#[R31 + 120]> */
		/* 820E7288h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820E7288h case    3:*/		return 0x820E728C;
		  /* 820E728Ch */ case    4:  		/* li R5, 0 */
		/* 820E728Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E728Ch case    4:*/		return 0x820E7290;
		  /* 820E7290h */ case    5:  		/* mr R3, R31 */
		/* 820E7290h case    5:*/		regs.R3 = regs.R31;
		/* 820E7290h case    5:*/		return 0x820E7294;
		  /* 820E7294h */ case    6:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 820E7294h case    6:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 820E7294h case    6:*/		return 0x820E7298;
		  /* 820E7298h */ case    7:  		/* bl 90000 */
		/* 820E7298h case    7:*/		regs.LR = 0x820E729C; return 0x820FD228;
		/* 820E7298h case    7:*/		return 0x820E729C;
		  /* 820E729Ch */ case    8:  		/* cmpwi CR6, R3, -1 */
		/* 820E729Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E729Ch case    8:*/		return 0x820E72A0;
		  /* 820E72A0h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 820E72A0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E72B0;  }
		/* 820E72A0h case    9:*/		return 0x820E72A4;
		  /* 820E72A4h */ case   10:  		/* lis R3, -32761 */
		/* 820E72A4h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E72A4h case   10:*/		return 0x820E72A8;
		  /* 820E72A8h */ case   11:  		/* ori R3, R3, 14 */
		/* 820E72A8h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E72A8h case   11:*/		return 0x820E72AC;
		  /* 820E72ACh */ case   12:  		/* b 72 */
		/* 820E72ACh case   12:*/		return 0x820E72F4;
		/* 820E72ACh case   12:*/		return 0x820E72B0;
	}
	return 0x820E72B0;
} // Block from 820E727Ch-820E72B0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E72B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E72B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E72B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E72B0);
		  /* 820E72B0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820E72B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E72B0h case    0:*/		return 0x820E72B4;
		  /* 820E72B4h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 820E72B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E72F0;  }
		/* 820E72B4h case    1:*/		return 0x820E72B8;
		  /* 820E72B8h */ case    2:  		/* mr R11, R26 */
		/* 820E72B8h case    2:*/		regs.R11 = regs.R26;
		/* 820E72B8h case    2:*/		return 0x820E72BC;
		  /* 820E72BCh */ case    3:  		/* mtspr CTR, R30 */
		/* 820E72BCh case    3:*/		regs.CTR = regs.R30;
		/* 820E72BCh case    3:*/		return 0x820E72C0;
		  /* 820E72C0h */ case    4:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 820E72C0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 820E72C0h case    4:*/		return 0x820E72C4;
		  /* 820E72C4h */ case    5:  		/* lwz R9, <#[R31 + 260]> */
		/* 820E72C4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000104) );
		/* 820E72C4h case    5:*/		return 0x820E72C8;
		  /* 820E72C8h */ case    6:  		/* addi R8, R1, 192 */
		/* 820E72C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E72C8h case    6:*/		return 0x820E72CC;
		  /* 820E72CCh */ case    7:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E72CCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E72CCh case    7:*/		return 0x820E72D0;
		  /* 820E72D0h */ case    8:  		/* lwzx R8, <#[R11 + R8]> */
		/* 820E72D0h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E72D0h case    8:*/		return 0x820E72D4;
		  /* 820E72D4h */ case    9:  		/* stwx R8, <#[R9 + R11]> */
		/* 820E72D4h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E72D4h case    9:*/		return 0x820E72D8;
		  /* 820E72D8h */ case   10:  		/* addi R11, R11, 4 */
		/* 820E72D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E72D8h case   10:*/		return 0x820E72DC;
		  /* 820E72DCh */ case   11:  		/* lwz R9, <#[R31 + 260]> */
		/* 820E72DCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000104) );
		/* 820E72DCh case   11:*/		return 0x820E72E0;
		  /* 820E72E0h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E72E0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E72E0h case   12:*/		return 0x820E72E4;
		  /* 820E72E4h */ case   13:  		/* stwx R3, <#[R9 + R10]> */
		/* 820E72E4h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820E72E4h case   13:*/		return 0x820E72E8;
		  /* 820E72E8h */ case   14:  		/* addi R10, R10, 4 */
		/* 820E72E8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E72E8h case   14:*/		return 0x820E72EC;
		  /* 820E72ECh */ case   15:  		/* bc 16, CR0_LT, -40 */
		/* 820E72ECh case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E72C4;  }
		/* 820E72ECh case   15:*/		return 0x820E72F0;
	}
	return 0x820E72F0;
} // Block from 820E72B0h-820E72F0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E72F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E72F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E72F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E72F0);
		  /* 820E72F0h */ case    0:  		/* li R3, 0 */
		/* 820E72F0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E72F0h case    0:*/		return 0x820E72F4;
	}
	return 0x820E72F4;
} // Block from 820E72F0h-820E72F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E72F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E72F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E72F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E72F4);
		  /* 820E72F4h */ case    0:  		/* addi R1, R1, 416 */
		/* 820E72F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 820E72F4h case    0:*/		return 0x820E72F8;
		  /* 820E72F8h */ case    1:  		/* b -352344 */
		/* 820E72F8h case    1:*/		return 0x820912A0;
		/* 820E72F8h case    1:*/		return 0x820E72FC;
		  /* 820E72FCh */ case    2:  		/* nop */
		/* 820E72FCh case    2:*/		cpu::op::nop();
		/* 820E72FCh case    2:*/		return 0x820E7300;
	}
	return 0x820E7300;
} // Block from 820E72F4h-820E7300h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E7300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7300);
		  /* 820E7300h */ case    0:  		/* mfspr R12, LR */
		/* 820E7300h case    0:*/		regs.R12 = regs.LR;
		/* 820E7300h case    0:*/		return 0x820E7304;
		  /* 820E7304h */ case    1:  		/* bl -352440 */
		/* 820E7304h case    1:*/		regs.LR = 0x820E7308; return 0x8209124C;
		/* 820E7304h case    1:*/		return 0x820E7308;
		  /* 820E7308h */ case    2:  		/* stfd FR31, <#[R1 - 72]> */
		/* 820E7308h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E7308h case    2:*/		return 0x820E730C;
		  /* 820E730Ch */ case    3:  		/* stwu R1, <#[R1 - 432]> */
		/* 820E730Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 820E730Ch case    3:*/		return 0x820E7310;
		  /* 820E7310h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E7310h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E7310h case    4:*/		return 0x820E7314;
		  /* 820E7314h */ case    5:  		/* li R11, 2 */
		/* 820E7314h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E7314h case    5:*/		return 0x820E7318;
		  /* 820E7318h */ case    6:  		/* li R25, 0 */
		/* 820E7318h case    6:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820E7318h case    6:*/		return 0x820E731C;
		  /* 820E731Ch */ case    7:  		/* stw R11, <#[R1 + 120]> */
		/* 820E731Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E731Ch case    7:*/		return 0x820E7320;
		  /* 820E7320h */ case    8:  		/* li R29, 1 */
		/* 820E7320h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 820E7320h case    8:*/		return 0x820E7324;
		  /* 820E7324h */ case    9:  		/* li R10, 3 */
		/* 820E7324h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820E7324h case    9:*/		return 0x820E7328;
		  /* 820E7328h */ case   10:  		/* stw R25, <#[R1 + 96]> */
		/* 820E7328h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000060) );
		/* 820E7328h case   10:*/		return 0x820E732C;
		  /* 820E732Ch */ case   11:  		/* mr R31, R3 */
		/* 820E732Ch case   11:*/		regs.R31 = regs.R3;
		/* 820E732Ch case   11:*/		return 0x820E7330;
		  /* 820E7330h */ case   12:  		/* stw R25, <#[R1 + 112]> */
		/* 820E7330h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000070) );
		/* 820E7330h case   12:*/		return 0x820E7334;
		  /* 820E7334h */ case   13:  		/* lwz R9, <#[R4]> */
		/* 820E7334h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 820E7334h case   13:*/		return 0x820E7338;
		  /* 820E7338h */ case   14:  		/* stw R29, <#[R1 + 116]> */
		/* 820E7338h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000074) );
		/* 820E7338h case   14:*/		return 0x820E733C;
		  /* 820E733Ch */ case   15:  		/* rlwinm R11, R9, 0, 12, 31 */
		/* 820E733Ch case   15:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R9);
		/* 820E733Ch case   15:*/		return 0x820E7340;
		  /* 820E7340h */ case   16:  		/* stw R10, <#[R1 + 124]> */
		/* 820E7340h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E7340h case   16:*/		return 0x820E7344;
		  /* 820E7344h */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 820E7344h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820E7344h case   17:*/		return 0x820E7348;
		  /* 820E7348h */ case   18:  		/* bc 12, CR6_EQ, 12 */
		/* 820E7348h case   18:*/		if ( regs.CR[6].eq ) { return 0x820E7354;  }
		/* 820E7348h case   18:*/		return 0x820E734C;
		  /* 820E734Ch */ case   19:  		/* li R3, 1 */
		/* 820E734Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E734Ch case   19:*/		return 0x820E7350;
		  /* 820E7350h */ case   20:  		/* b 536 */
		/* 820E7350h case   20:*/		return 0x820E7568;
		/* 820E7350h case   20:*/		return 0x820E7354;
	}
	return 0x820E7354;
} // Block from 820E7300h-820E7354h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E7354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7354);
		  /* 820E7354h */ case    0:  		/* lis R11, -32254 */
		/* 820E7354h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E7354h case    0:*/		return 0x820E7358;
		  /* 820E7358h */ case    1:  		/* stw R29, <#[R1 + 84]> */
		/* 820E7358h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7358h case    1:*/		return 0x820E735C;
		  /* 820E735Ch */ case    2:  		/* li R10, 1 */
		/* 820E735Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E735Ch case    2:*/		return 0x820E7360;
		  /* 820E7360h */ case    3:  		/* addi R30, R11, -23272 */
		/* 820E7360h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFA518);
		/* 820E7360h case    3:*/		return 0x820E7364;
		  /* 820E7364h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E7364h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E7364h case    4:*/		return 0x820E7368;
		  /* 820E7368h */ case    5:  		/* addi R5, R30, -288 */
		/* 820E7368h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFEE0);
		/* 820E7368h case    5:*/		return 0x820E736C;
		  /* 820E736Ch */ case    6:  		/* addi R8, R1, 192 */
		/* 820E736Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E736Ch case    6:*/		return 0x820E7370;
		  /* 820E7370h */ case    7:  		/* addi R7, R1, 96 */
		/* 820E7370h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E7370h case    7:*/		return 0x820E7374;
		  /* 820E7374h */ case    8:  		/* addi R6, R1, 128 */
		/* 820E7374h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E7374h case    8:*/		return 0x820E7378;
		  /* 820E7378h */ case    9:  		/* mr R3, R31 */
		/* 820E7378h case    9:*/		regs.R3 = regs.R31;
		/* 820E7378h case    9:*/		return 0x820E737C;
		  /* 820E737Ch */ case   10:  		/* bl -14076 */
		/* 820E737Ch case   10:*/		regs.LR = 0x820E7380; return 0x820E3C80;
		/* 820E737Ch case   10:*/		return 0x820E7380;
		  /* 820E7380h */ case   11:  		/* cmpwi CR6, R3, 1 */
		/* 820E7380h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E7380h case   11:*/		return 0x820E7384;
		  /* 820E7384h */ case   12:  		/* bc 4, CR6_EQ, 140 */
		/* 820E7384h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E7410;  }
		/* 820E7384h case   12:*/		return 0x820E7388;
		  /* 820E7388h */ case   13:  		/* addi R5, R30, -192 */
		/* 820E7388h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFF40);
		/* 820E7388h case   13:*/		return 0x820E738C;
		  /* 820E738Ch */ case   14:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E738Ch case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E738Ch case   14:*/		return 0x820E7390;
		  /* 820E7390h */ case   15:  		/* li R10, 1 */
		/* 820E7390h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E7390h case   15:*/		return 0x820E7394;
		  /* 820E7394h */ case   16:  		/* stw R29, <#[R1 + 84]> */
		/* 820E7394h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7394h case   16:*/		return 0x820E7398;
		  /* 820E7398h */ case   17:  		/* addi R9, R1, 112 */
		/* 820E7398h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E7398h case   17:*/		return 0x820E739C;
		  /* 820E739Ch */ case   18:  		/* addi R8, R1, 192 */
		/* 820E739Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E739Ch case   18:*/		return 0x820E73A0;
		  /* 820E73A0h */ case   19:  		/* addi R7, R1, 96 */
		/* 820E73A0h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E73A0h case   19:*/		return 0x820E73A4;
		  /* 820E73A4h */ case   20:  		/* addi R6, R1, 128 */
		/* 820E73A4h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E73A4h case   20:*/		return 0x820E73A8;
		  /* 820E73A8h */ case   21:  		/* mr R3, R31 */
		/* 820E73A8h case   21:*/		regs.R3 = regs.R31;
		/* 820E73A8h case   21:*/		return 0x820E73AC;
		  /* 820E73ACh */ case   22:  		/* bl -14124 */
		/* 820E73ACh case   22:*/		regs.LR = 0x820E73B0; return 0x820E3C80;
		/* 820E73ACh case   22:*/		return 0x820E73B0;
	}
	return 0x820E73B0;
} // Block from 820E7354h-820E73B0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E73B0h
// Function '?MatchIF@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E73B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E73B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E73B0);
		  /* 820E73B0h */ case    0:  		/* cmpwi CR6, R3, 1 */
		/* 820E73B0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E73B0h case    0:*/		return 0x820E73B4;
		  /* 820E73B4h */ case    1:  		/* bc 4, CR6_EQ, 92 */
		/* 820E73B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E7410;  }
		/* 820E73B4h case    1:*/		return 0x820E73B8;
		  /* 820E73B8h */ case    2:  		/* addi R5, R30, -96 */
		/* 820E73B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFFA0);
		/* 820E73B8h case    2:*/		return 0x820E73BC;
		  /* 820E73BCh */ case    3:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E73BCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E73BCh case    3:*/		return 0x820E73C0;
		  /* 820E73C0h */ case    4:  		/* li R10, 1 */
		/* 820E73C0h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E73C0h case    4:*/		return 0x820E73C4;
		  /* 820E73C4h */ case    5:  		/* stw R29, <#[R1 + 84]> */
		/* 820E73C4h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E73C4h case    5:*/		return 0x820E73C8;
		  /* 820E73C8h */ case    6:  		/* addi R9, R1, 112 */
		/* 820E73C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E73C8h case    6:*/		return 0x820E73CC;
		  /* 820E73CCh */ case    7:  		/* addi R8, R1, 192 */
		/* 820E73CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E73CCh case    7:*/		return 0x820E73D0;
		  /* 820E73D0h */ case    8:  		/* addi R7, R1, 96 */
		/* 820E73D0h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E73D0h case    8:*/		return 0x820E73D4;
		  /* 820E73D4h */ case    9:  		/* addi R6, R1, 128 */
		/* 820E73D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E73D4h case    9:*/		return 0x820E73D8;
		  /* 820E73D8h */ case   10:  		/* mr R3, R31 */
		/* 820E73D8h case   10:*/		regs.R3 = regs.R31;
		/* 820E73D8h case   10:*/		return 0x820E73DC;
		  /* 820E73DCh */ case   11:  		/* bl -14172 */
		/* 820E73DCh case   11:*/		regs.LR = 0x820E73E0; return 0x820E3C80;
		/* 820E73DCh case   11:*/		return 0x820E73E0;
		  /* 820E73E0h */ case   12:  		/* cmpwi CR6, R3, 1 */
		/* 820E73E0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E73E0h case   12:*/		return 0x820E73E4;
		  /* 820E73E4h */ case   13:  		/* bc 4, CR6_EQ, 44 */
		/* 820E73E4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820E7410;  }
		/* 820E73E4h case   13:*/		return 0x820E73E8;
		  /* 820E73E8h */ case   14:  		/* stw R29, <#[R1 + 84]> */
		/* 820E73E8h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E73E8h case   14:*/		return 0x820E73EC;
		  /* 820E73ECh */ case   15:  		/* mr R5, R30 */
		/* 820E73ECh case   15:*/		regs.R5 = regs.R30;
		/* 820E73ECh case   15:*/		return 0x820E73F0;
		  /* 820E73F0h */ case   16:  		/* li R10, 1 */
		/* 820E73F0h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E73F0h case   16:*/		return 0x820E73F4;
		  /* 820E73F4h */ case   17:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E73F4h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E73F4h case   17:*/		return 0x820E73F8;
		  /* 820E73F8h */ case   18:  		/* addi R9, R1, 112 */
		/* 820E73F8h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E73F8h case   18:*/		return 0x820E73FC;
		  /* 820E73FCh */ case   19:  		/* addi R8, R1, 192 */
		/* 820E73FCh case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E73FCh case   19:*/		return 0x820E7400;
		  /* 820E7400h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E7400h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E7400h case   20:*/		return 0x820E7404;
		  /* 820E7404h */ case   21:  		/* addi R6, R1, 128 */
		/* 820E7404h case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E7404h case   21:*/		return 0x820E7408;
		  /* 820E7408h */ case   22:  		/* mr R3, R31 */
		/* 820E7408h case   22:*/		regs.R3 = regs.R31;
		/* 820E7408h case   22:*/		return 0x820E740C;
		  /* 820E740Ch */ case   23:  		/* bl -14220 */
		/* 820E740Ch case   23:*/		regs.LR = 0x820E7410; return 0x820E3C80;
		/* 820E740Ch case   23:*/		return 0x820E7410;
	}
	return 0x820E7410;
} // Block from 820E73B0h-820E7410h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E7410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7410);
		  /* 820E7410h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E7410h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E7410h case    0:*/		return 0x820E7414;
		  /* 820E7414h */ case    1:  		/* bc 4, CR6_EQ, 340 */
		/* 820E7414h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E7568;  }
		/* 820E7414h case    1:*/		return 0x820E7418;
		  /* 820E7418h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E7418h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E7418h case    2:*/		return 0x820E741C;
		  /* 820E741Ch */ case    3:  		/* li R10, 4 */
		/* 820E741Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820E741Ch case    3:*/		return 0x820E7420;
		  /* 820E7420h */ case    4:  		/* lwz R7, <#[R31 + 16]> */
		/* 820E7420h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 820E7420h case    4:*/		return 0x820E7424;
		  /* 820E7424h */ case    5:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E7424h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E7424h case    5:*/		return 0x820E7428;
		  /* 820E7428h */ case    6:  		/* lwz R8, <#[R11 + 8]> */
		/* 820E7428h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 820E7428h case    6:*/		return 0x820E742C;
		  /* 820E742Ch */ case    7:  		/* lis R11, -32256 */
		/* 820E742Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E742Ch case    7:*/		return 0x820E7430;
		  /* 820E7430h */ case    8:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 820E7430h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 820E7430h case    8:*/		return 0x820E7434;
		  /* 820E7434h */ case    9:  		/* lwzx R11, <#[R10 + R8]> */
		/* 820E7434h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E7434h case    9:*/		return 0x820E7438;
		  /* 820E7438h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7438h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7438h case   10:*/		return 0x820E743C;
		  /* 820E743Ch */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E743Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E743Ch case   11:*/		return 0x820E7440;
		  /* 820E7440h */ case   12:  		/* lwz R6, <#[R11 + 4]> */
		/* 820E7440h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 820E7440h case   12:*/		return 0x820E7444;
		  /* 820E7444h */ case   13:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820E7444h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820E7444h case   13:*/		return 0x820E7448;
		  /* 820E7448h */ case   14:  		/* lwzx R6, <#[R6 + R7]> */
		/* 820E7448h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 820E7448h case   14:*/		return 0x820E744C;
		  /* 820E744Ch */ case   15:  		/* lwz R6, <#[R6 + 4]> */
		/* 820E744Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000004) );
		/* 820E744Ch case   15:*/		return 0x820E7450;
		  /* 820E7450h */ case   16:  		/* rlwinm. R6, R6, 0, 23, 23 */
		/* 820E7450h case   16:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R6,regs.R6);
		/* 820E7450h case   16:*/		return 0x820E7454;
		  /* 820E7454h */ case   17:  		/* bc 12, CR0_EQ, -264 */
		/* 820E7454h case   17:*/		if ( regs.CR[0].eq ) { return 0x820E734C;  }
		/* 820E7454h case   17:*/		return 0x820E7458;
		  /* 820E7458h */ case   18:  		/* lfd FR13, <#[R11 + 32]> */
		/* 820E7458h case   18:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 820E7458h case   18:*/		return 0x820E745C;
		  /* 820E745Ch */ case   19:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E745Ch case   19:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E745Ch case   19:*/		return 0x820E7460;
		  /* 820E7460h */ case   20:  		/* bc 4, CR6_EQ, -276 */
		/* 820E7460h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820E734C;  }
		/* 820E7460h case   20:*/		return 0x820E7464;
		  /* 820E7464h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E7464h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E7464h case   21:*/		return 0x820E7468;
		  /* 820E7468h */ case   22:  		/* cmpwi CR6, R11, -1 */
		/* 820E7468h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7468h case   22:*/		return 0x820E746C;
		  /* 820E746Ch */ case   23:  		/* bc 4, CR6_EQ, -288 */
		/* 820E746Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x820E734C;  }
		/* 820E746Ch case   23:*/		return 0x820E7470;
		  /* 820E7470h */ case   24:  		/* addi R10, R10, 4 */
		/* 820E7470h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E7470h case   24:*/		return 0x820E7474;
		  /* 820E7474h */ case   25:  		/* cmplwi CR6, R10, 8 */
		/* 820E7474h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 820E7474h case   25:*/		return 0x820E7478;
		  /* 820E7478h */ case   26:  		/* bc 12, CR6_LT, -68 */
		/* 820E7478h case   26:*/		if ( regs.CR[6].lt ) { return 0x820E7434;  }
		/* 820E7478h case   26:*/		return 0x820E747C;
		  /* 820E747Ch */ case   27:  		/* lwz R11, <#[R1 + 224]> */
		/* 820E747Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820E747Ch case   27:*/		return 0x820E7480;
		  /* 820E7480h */ case   28:  		/* mr R26, R25 */
		/* 820E7480h case   28:*/		regs.R26 = regs.R25;
		/* 820E7480h case   28:*/		return 0x820E7484;
		  /* 820E7484h */ case   29:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7484h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7484h case   29:*/		return 0x820E7488;
		  /* 820E7488h */ case   30:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E7488h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E7488h case   30:*/		return 0x820E748C;
		  /* 820E748Ch */ case   31:  		/* lwz R10, <#[R11 + 8]> */
		/* 820E748Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820E748Ch case   31:*/		return 0x820E7490;
		  /* 820E7490h */ case   32:  		/* cmpwi CR6, R10, -1 */
		/* 820E7490h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E7490h case   32:*/		return 0x820E7494;
		  /* 820E7494h */ case   33:  		/* bc 4, CR6_EQ, 32 */
		/* 820E7494h case   33:*/		if ( !regs.CR[6].eq ) { return 0x820E74B4;  }
		/* 820E7494h case   33:*/		return 0x820E7498;
		  /* 820E7498h */ case   34:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E7498h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E7498h case   34:*/		return 0x820E749C;
		  /* 820E749Ch */ case   35:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E749Ch case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E749Ch case   35:*/		return 0x820E74A0;
		  /* 820E74A0h */ case   36:  		/* lwzx R11, <#[R11 + R7]> */
		/* 820E74A0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E74A0h case   36:*/		return 0x820E74A4;
		  /* 820E74A4h */ case   37:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E74A4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E74A4h case   37:*/		return 0x820E74A8;
		  /* 820E74A8h */ case   38:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 820E74A8h case   38:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 820E74A8h case   38:*/		return 0x820E74AC;
		  /* 820E74ACh */ case   39:  		/* bc 12, CR0_EQ, 8 */
		/* 820E74ACh case   39:*/		if ( regs.CR[0].eq ) { return 0x820E74B4;  }
		/* 820E74ACh case   39:*/		return 0x820E74B0;
		  /* 820E74B0h */ case   40:  		/* mr R26, R29 */
		/* 820E74B0h case   40:*/		regs.R26 = regs.R29;
		/* 820E74B0h case   40:*/		return 0x820E74B4;
	}
	return 0x820E74B4;
} // Block from 820E7410h-820E74B4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 820E74B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E74B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E74B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E74B4);
		  /* 820E74B4h */ case    0:  		/* lis R11, -32255 */
		/* 820E74B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E74B4h case    0:*/		return 0x820E74B8;
		  /* 820E74B8h */ case    1:  		/* mr R29, R25 */
		/* 820E74B8h case    1:*/		regs.R29 = regs.R25;
		/* 820E74B8h case    1:*/		return 0x820E74BC;
		  /* 820E74BCh */ case    2:  		/* lfd FR31, <#[R11 - 24488]> */
		/* 820E74BCh case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0xFFFFA058) );
		/* 820E74BCh case    2:*/		return 0x820E74C0;
		  /* 820E74C0h */ case    3:  		/* addi R11, R1, 224 */
		/* 820E74C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 820E74C0h case    3:*/		return 0x820E74C4;
		  /* 820E74C4h */ case    4:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E74C4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E74C4h case    4:*/		return 0x820E74C8;
		  /* 820E74C8h */ case    5:  		/* mr R3, R31 */
		/* 820E74C8h case    5:*/		regs.R3 = regs.R31;
		/* 820E74C8h case    5:*/		return 0x820E74CC;
		  /* 820E74CCh */ case    6:  		/* add R11, R29, R11 */
		/* 820E74CCh case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 820E74CCh case    6:*/		return 0x820E74D0;
		  /* 820E74D0h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E74D0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E74D0h case    7:*/		return 0x820E74D4;
		  /* 820E74D4h */ case    8:  		/* lwz R9, <#[R11 - 16]> */
		/* 820E74D4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 820E74D4h case    8:*/		return 0x820E74D8;
		  /* 820E74D8h */ case    9:  		/* lwz R27, <#[R11]> */
		/* 820E74D8h case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 820E74D8h case    9:*/		return 0x820E74DC;
		  /* 820E74DCh */ case   10:  		/* rlwinm R11, R27, 2, 0, 29 */
		/* 820E74DCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R27);
		/* 820E74DCh case   10:*/		return 0x820E74E0;
		  /* 820E74E0h */ case   11:  		/* stwx R9, <#[R10 + R29]> */
		/* 820E74E0h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 820E74E0h case   11:*/		return 0x820E74E4;
		  /* 820E74E4h */ case   12:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E74E4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E74E4h case   12:*/		return 0x820E74E8;
		  /* 820E74E8h */ case   13:  		/* lwzx R30, <#[R11 + R10]> */
		/* 820E74E8h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E74E8h case   13:*/		return 0x820E74EC;
		  /* 820E74ECh */ case   14:  		/* lfd FR1, <#[R30 + 32]> */
		/* 820E74ECh case   14:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000020) );
		/* 820E74ECh case   14:*/		return 0x820E74F0;
		  /* 820E74F0h */ case   15:  		/* lwz R6, <#[R30 + 16]> */
		/* 820E74F0h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 820E74F0h case   15:*/		return 0x820E74F4;
		  /* 820E74F4h */ case   16:  		/* lwz R5, <#[R30 + 12]> */
		/* 820E74F4h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 820E74F4h case   16:*/		return 0x820E74F8;
		  /* 820E74F8h */ case   17:  		/* lwz R4, <#[R30 + 4]> */
		/* 820E74F8h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 820E74F8h case   17:*/		return 0x820E74FC;
		  /* 820E74FCh */ case   18:  		/* bl 89388 */
		/* 820E74FCh case   18:*/		regs.LR = 0x820E7500; return 0x820FD228;
		/* 820E74FCh case   18:*/		return 0x820E7500;
		  /* 820E7500h */ case   19:  		/* mr R28, R3 */
		/* 820E7500h case   19:*/		regs.R28 = regs.R3;
		/* 820E7500h case   19:*/		return 0x820E7504;
		  /* 820E7504h */ case   20:  		/* cmpwi CR6, R3, -1 */
		/* 820E7504h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E7504h case   20:*/		return 0x820E7508;
		  /* 820E7508h */ case   21:  		/* bc 12, CR6_EQ, 124 */
		/* 820E7508h case   21:*/		if ( regs.CR[6].eq ) { return 0x820E7584;  }
		/* 820E7508h case   21:*/		return 0x820E750C;
		  /* 820E750Ch */ case   22:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E750Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E750Ch case   22:*/		return 0x820E7510;
		  /* 820E7510h */ case   23:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E7510h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E7510h case   23:*/		return 0x820E7514;
		  /* 820E7514h */ case   24:  		/* mr R4, R30 */
		/* 820E7514h case   24:*/		regs.R4 = regs.R30;
		/* 820E7514h case   24:*/		return 0x820E7518;
		  /* 820E7518h */ case   25:  		/* lwzx R30, <#[R10 + R11]> */
		/* 820E7518h case   25:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7518h case   25:*/		return 0x820E751C;
		  /* 820E751Ch */ case   26:  		/* mr R3, R30 */
		/* 820E751Ch case   26:*/		regs.R3 = regs.R30;
		/* 820E751Ch case   26:*/		return 0x820E7520;
		  /* 820E7520h */ case   27:  		/* bl 87688 */
		/* 820E7520h case   27:*/		regs.LR = 0x820E7524; return 0x820FCBA8;
		/* 820E7520h case   27:*/		return 0x820E7524;
		  /* 820E7524h */ case   28:  		/* cmpwi CR6, R26, 0 */
		/* 820E7524h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E7524h case   28:*/		return 0x820E7528;
		  /* 820E7528h */ case   29:  		/* bc 4, CR6_EQ, 76 */
		/* 820E7528h case   29:*/		if ( !regs.CR[6].eq ) { return 0x820E7574;  }
		/* 820E7528h case   29:*/		return 0x820E752C;
		  /* 820E752Ch */ case   30:  		/* lwz R11, <#[R30 + 56]> */
		/* 820E752Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820E752Ch case   30:*/		return 0x820E7530;
		  /* 820E7530h */ case   31:  		/* cmpwi CR6, R11, -1 */
		/* 820E7530h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7530h case   31:*/		return 0x820E7534;
		  /* 820E7534h */ case   32:  		/* bc 4, CR6_EQ, 8 */
		/* 820E7534h case   32:*/		if ( !regs.CR[6].eq ) { return 0x820E753C;  }
		/* 820E7534h case   32:*/		return 0x820E7538;
		  /* 820E7538h */ case   33:  		/* stw R27, <#[R30 + 56]> */
		/* 820E7538h case   33:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000038) );
		/* 820E7538h case   33:*/		return 0x820E753C;
	}
	return 0x820E753C;
} // Block from 820E74B4h-820E753Ch (34 instructions)

//////////////////////////////////////////////////////
// Block at 820E753Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E753C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E753C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E753C);
		  /* 820E753Ch */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 820E753Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820E753Ch case    0:*/		return 0x820E7540;
		  /* 820E7540h */ case    1:  		/* xoris R11, R11, 8 */
		/* 820E7540h case    1:*/		cpu::op::xoris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820E7540h case    1:*/		return 0x820E7544;
		  /* 820E7544h */ case    2:  		/* stw R11, <#[R30 + 60]> */
		/* 820E7544h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820E7544h case    2:*/		return 0x820E7548;
		  /* 820E7548h */ case    3:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E7548h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E7548h case    3:*/		return 0x820E754C;
		  /* 820E754Ch */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E754Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E754Ch case    4:*/		return 0x820E7550;
		  /* 820E7550h */ case    5:  		/* add R11, R11, R29 */
		/* 820E7550h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 820E7550h case    5:*/		return 0x820E7554;
		  /* 820E7554h */ case    6:  		/* addi R29, R29, 4 */
		/* 820E7554h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820E7554h case    6:*/		return 0x820E7558;
		  /* 820E7558h */ case    7:  		/* cmplwi CR6, R29, 4 */
		/* 820E7558h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 820E7558h case    7:*/		return 0x820E755C;
		  /* 820E755Ch */ case    8:  		/* stw R28, <#[R11 + 4]> */
		/* 820E755Ch case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 820E755Ch case    8:*/		return 0x820E7560;
		  /* 820E7560h */ case    9:  		/* bc 12, CR6_LT, -160 */
		/* 820E7560h case    9:*/		if ( regs.CR[6].lt ) { return 0x820E74C0;  }
		/* 820E7560h case    9:*/		return 0x820E7564;
		  /* 820E7564h */ case   10:  		/* mr R3, R25 */
		/* 820E7564h case   10:*/		regs.R3 = regs.R25;
		/* 820E7564h case   10:*/		return 0x820E7568;
	}
	return 0x820E7568;
} // Block from 820E753Ch-820E7568h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E7568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7568);
		  /* 820E7568h */ case    0:  		/* addi R1, R1, 432 */
		/* 820E7568h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 820E7568h case    0:*/		return 0x820E756C;
		  /* 820E756Ch */ case    1:  		/* lfd FR31, <#[R1 - 72]> */
		/* 820E756Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E756Ch case    1:*/		return 0x820E7570;
		  /* 820E7570h */ case    2:  		/* b -352980 */
		/* 820E7570h case    2:*/		return 0x8209129C;
		/* 820E7570h case    2:*/		return 0x820E7574;
	}
	return 0x820E7574;
} // Block from 820E7568h-820E7574h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E7574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7574);
		  /* 820E7574h */ case    0:  		/* lfd FR0, <#[R30 + 32]> */
		/* 820E7574h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000020) );
		/* 820E7574h case    0:*/		return 0x820E7578;
		  /* 820E7578h */ case    1:  		/* fmul FR0, FR0, FR31 */
		/* 820E7578h case    1:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR31);
		/* 820E7578h case    1:*/		return 0x820E757C;
		  /* 820E757Ch */ case    2:  		/* stfd FR0, <#[R30 + 32]> */
		/* 820E757Ch case    2:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R30 + 0x00000020) );
		/* 820E757Ch case    2:*/		return 0x820E7580;
		  /* 820E7580h */ case    3:  		/* b -56 */
		/* 820E7580h case    3:*/		return 0x820E7548;
		/* 820E7580h case    3:*/		return 0x820E7584;
	}
	return 0x820E7584;
} // Block from 820E7574h-820E7584h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E7584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7584);
		  /* 820E7584h */ case    0:  		/* lis R3, -32761 */
		/* 820E7584h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E7584h case    0:*/		return 0x820E7588;
		  /* 820E7588h */ case    1:  		/* ori R3, R3, 14 */
		/* 820E7588h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E7588h case    1:*/		return 0x820E758C;
		  /* 820E758Ch */ case    2:  		/* b -36 */
		/* 820E758Ch case    2:*/		return 0x820E7568;
		/* 820E758Ch case    2:*/		return 0x820E7590;
	}
	return 0x820E7590;
} // Block from 820E7584h-820E7590h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E7590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7590);
		  /* 820E7590h */ case    0:  		/* mfspr R12, LR */
		/* 820E7590h case    0:*/		regs.R12 = regs.LR;
		/* 820E7590h case    0:*/		return 0x820E7594;
		  /* 820E7594h */ case    1:  		/* bl -353092 */
		/* 820E7594h case    1:*/		regs.LR = 0x820E7598; return 0x82091250;
		/* 820E7594h case    1:*/		return 0x820E7598;
		  /* 820E7598h */ case    2:  		/* stwu R1, <#[R1 - 432]> */
		/* 820E7598h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 820E7598h case    2:*/		return 0x820E759C;
		  /* 820E759Ch */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E759Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E759Ch case    3:*/		return 0x820E75A0;
		  /* 820E75A0h */ case    4:  		/* lis R11, -32254 */
		/* 820E75A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E75A0h case    4:*/		return 0x820E75A4;
		  /* 820E75A4h */ case    5:  		/* li R8, 3 */
		/* 820E75A4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E75A4h case    5:*/		return 0x820E75A8;
		  /* 820E75A8h */ case    6:  		/* addi R30, R11, -21384 */
		/* 820E75A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFAC78);
		/* 820E75A8h case    6:*/		return 0x820E75AC;
		  /* 820E75ACh */ case    7:  		/* li R31, 0 */
		/* 820E75ACh case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E75ACh case    7:*/		return 0x820E75B0;
		  /* 820E75B0h */ case    8:  		/* stw R8, <#[R1 + 124]> */
		/* 820E75B0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E75B0h case    8:*/		return 0x820E75B4;
		  /* 820E75B4h */ case    9:  		/* li R26, 1 */
		/* 820E75B4h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820E75B4h case    9:*/		return 0x820E75B8;
		  /* 820E75B8h */ case   10:  		/* lwz R10, <#[R4]> */
		/* 820E75B8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820E75B8h case   10:*/		return 0x820E75BC;
		  /* 820E75BCh */ case   11:  		/* li R11, 2 */
		/* 820E75BCh case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E75BCh case   11:*/		return 0x820E75C0;
		  /* 820E75C0h */ case   12:  		/* addi R5, R30, -96 */
		/* 820E75C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFFA0);
		/* 820E75C0h case   12:*/		return 0x820E75C4;
		  /* 820E75C4h */ case   13:  		/* stw R31, <#[R1 + 96]> */
		/* 820E75C4h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 820E75C4h case   13:*/		return 0x820E75C8;
		  /* 820E75C8h */ case   14:  		/* rlwinm R29, R10, 0, 12, 31 */
		/* 820E75C8h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R10);
		/* 820E75C8h case   14:*/		return 0x820E75CC;
		  /* 820E75CCh */ case   15:  		/* stw R31, <#[R1 + 112]> */
		/* 820E75CCh case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 820E75CCh case   15:*/		return 0x820E75D0;
		  /* 820E75D0h */ case   16:  		/* addi R9, R1, 112 */
		/* 820E75D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E75D0h case   16:*/		return 0x820E75D4;
		  /* 820E75D4h */ case   17:  		/* stw R26, <#[R1 + 116]> */
		/* 820E75D4h case   17:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000074) );
		/* 820E75D4h case   17:*/		return 0x820E75D8;
		  /* 820E75D8h */ case   18:  		/* addi R8, R1, 144 */
		/* 820E75D8h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E75D8h case   18:*/		return 0x820E75DC;
		  /* 820E75DCh */ case   19:  		/* stw R11, <#[R1 + 120]> */
		/* 820E75DCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E75DCh case   19:*/		return 0x820E75E0;
		  /* 820E75E0h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E75E0h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E75E0h case   20:*/		return 0x820E75E4;
		  /* 820E75E4h */ case   21:  		/* stw R26, <#[R1 + 84]> */
		/* 820E75E4h case   21:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 820E75E4h case   21:*/		return 0x820E75E8;
		  /* 820E75E8h */ case   22:  		/* addi R6, R1, 304 */
		/* 820E75E8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E75E8h case   22:*/		return 0x820E75EC;
		  /* 820E75ECh */ case   23:  		/* mr R10, R29 */
		/* 820E75ECh case   23:*/		regs.R10 = regs.R29;
		/* 820E75ECh case   23:*/		return 0x820E75F0;
		  /* 820E75F0h */ case   24:  		/* mr R28, R3 */
		/* 820E75F0h case   24:*/		regs.R28 = regs.R3;
		/* 820E75F0h case   24:*/		return 0x820E75F4;
		  /* 820E75F4h */ case   25:  		/* bl -14708 */
		/* 820E75F4h case   25:*/		regs.LR = 0x820E75F8; return 0x820E3C80;
		/* 820E75F4h case   25:*/		return 0x820E75F8;
		  /* 820E75F8h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 820E75F8h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E75F8h case   26:*/		return 0x820E75FC;
		  /* 820E75FCh */ case   27:  		/* bc 4, CR0_EQ, 184 */
		/* 820E75FCh case   27:*/		if ( !regs.CR[0].eq ) { return 0x820E76B4;  }
		/* 820E75FCh case   27:*/		return 0x820E7600;
		  /* 820E7600h */ case   28:  		/* li R3, 116 */
		/* 820E7600h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E7600h case   28:*/		return 0x820E7604;
		  /* 820E7604h */ case   29:  		/* bl 85908 */
		/* 820E7604h case   29:*/		regs.LR = 0x820E7608; return 0x820FC598;
		/* 820E7604h case   29:*/		return 0x820E7608;
		  /* 820E7608h */ case   30:  		/* cmplwi CR0, R3, 0 */
		/* 820E7608h case   30:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E7608h case   30:*/		return 0x820E760C;
		  /* 820E760Ch */ case   31:  		/* bc 12, CR0_EQ, 12 */
		/* 820E760Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x820E7618;  }
		/* 820E760Ch case   31:*/		return 0x820E7610;
		  /* 820E7610h */ case   32:  		/* bl 84112 */
		/* 820E7610h case   32:*/		regs.LR = 0x820E7614; return 0x820FBEA0;
		/* 820E7610h case   32:*/		return 0x820E7614;
		  /* 820E7614h */ case   33:  		/* mr R31, R3 */
		/* 820E7614h case   33:*/		regs.R31 = regs.R3;
		/* 820E7614h case   33:*/		return 0x820E7618;
	}
	return 0x820E7618;
} // Block from 820E7590h-820E7618h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820E7618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7618);
		  /* 820E7618h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E7618h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E7618h case    0:*/		return 0x820E761C;
		  /* 820E761Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E761Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E762C;  }
		/* 820E761Ch case    1:*/		return 0x820E7620;
		  /* 820E7620h */ case    2:  		/* lis R3, -32761 */
		/* 820E7620h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E7620h case    2:*/		return 0x820E7624;
		  /* 820E7624h */ case    3:  		/* ori R3, R3, 14 */
		/* 820E7624h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E7624h case    3:*/		return 0x820E7628;
		  /* 820E7628h */ case    4:  		/* b 1044 */
		/* 820E7628h case    4:*/		return 0x820E7A3C;
		/* 820E7628h case    4:*/		return 0x820E762C;
	}
	return 0x820E762C;
} // Block from 820E7618h-820E762Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E762Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E762C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E762C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E762C);
		  /* 820E762Ch */ case    0:  		/* mr R4, R29 */
		/* 820E762Ch case    0:*/		regs.R4 = regs.R29;
		/* 820E762Ch case    0:*/		return 0x820E7630;
	}
	return 0x820E7630;
} // Block from 820E762Ch-820E7630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E7630h
// Function '?MatchNEZero@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7630);
		  /* 820E7630h */ case    0:  		/* li R11, 931 */
		/* 820E7630h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3A3);
		/* 820E7630h case    0:*/		return 0x820E7634;
		  /* 820E7634h */ case    1:  		/* rlwimi R4, R11, 21, 0, 11 */
		/* 820E7634h case    1:*/		cpu::op::rlwimi<0,21,0,11>(regs,&regs.R4,regs.R11);
		/* 820E7634h case    1:*/		return 0x820E7638;
		  /* 820E7638h */ case    2:  		/* b 216 */
		/* 820E7638h case    2:*/		return 0x820E7710;
		/* 820E7638h case    2:*/		return 0x820E763C;
		  /* 820E763Ch */ case    3:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E763Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E763Ch case    3:*/		return 0x820E7640;
		  /* 820E7640h */ case    4:  		/* bl 84144 */
		/* 820E7640h case    4:*/		regs.LR = 0x820E7644; return 0x820FBEF0;
		/* 820E7640h case    4:*/		return 0x820E7644;
		  /* 820E7644h */ case    5:  		/* or. R30, R3, R3 */
		/* 820E7644h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E7644h case    5:*/		return 0x820E7648;
		  /* 820E7648h */ case    6:  		/* bc 4, CR0_LT, 28 */
		/* 820E7648h case    6:*/		if ( !regs.CR[0].lt ) { return 0x820E7664;  }
		/* 820E7648h case    6:*/		return 0x820E764C;
		  /* 820E764Ch */ case    7:  		/* mr R3, R31 */
		/* 820E764Ch case    7:*/		regs.R3 = regs.R31;
		/* 820E764Ch case    7:*/		return 0x820E7650;
		  /* 820E7650h */ case    8:  		/* bl 1269104 */
		/* 820E7650h case    8:*/		regs.LR = 0x820E7654; return 0x8221D3C0;
		/* 820E7650h case    8:*/		return 0x820E7654;
		  /* 820E7654h */ case    9:  		/* mr R3, R31 */
		/* 820E7654h case    9:*/		regs.R3 = regs.R31;
		/* 820E7654h case    9:*/		return 0x820E7658;
		  /* 820E7658h */ case   10:  		/* bl 85912 */
		/* 820E7658h case   10:*/		regs.LR = 0x820E765C; return 0x820FC5F0;
		/* 820E7658h case   10:*/		return 0x820E765C;
		  /* 820E765Ch */ case   11:  		/* mr R3, R30 */
		/* 820E765Ch case   11:*/		regs.R3 = regs.R30;
		/* 820E765Ch case   11:*/		return 0x820E7660;
		  /* 820E7660h */ case   12:  		/* b 988 */
		/* 820E7660h case   12:*/		return 0x820E7A3C;
		/* 820E7660h case   12:*/		return 0x820E7664;
	}
	return 0x820E7664;
} // Block from 820E7630h-820E7664h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E7664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7664);
		  /* 820E7664h */ case    0:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E7664h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E7664h case    0:*/		return 0x820E7668;
		  /* 820E7668h */ case    1:  		/* rlwinm R30, R29, 2, 0, 29 */
		/* 820E7668h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R29);
		/* 820E7668h case    1:*/		return 0x820E766C;
		  /* 820E766Ch */ case    2:  		/* lwz R3, <#[R31 + 16]> */
		/* 820E766Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820E766Ch case    2:*/		return 0x820E7670;
		  /* 820E7670h */ case    3:  		/* mr R5, R30 */
		/* 820E7670h case    3:*/		regs.R5 = regs.R30;
		/* 820E7670h case    3:*/		return 0x820E7674;
		  /* 820E7674h */ case    4:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E7674h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E7674h case    4:*/		return 0x820E7678;
		  /* 820E7678h */ case    5:  		/* bl -351432 */
		/* 820E7678h case    5:*/		regs.LR = 0x820E767C; return 0x820919B0;
		/* 820E7678h case    5:*/		return 0x820E767C;
		  /* 820E767Ch */ case    6:  		/* mr R5, R30 */
		/* 820E767Ch case    6:*/		regs.R5 = regs.R30;
		/* 820E767Ch case    6:*/		return 0x820E7680;
		  /* 820E7680h */ case    7:  		/* lwz R3, <#[R31 + 8]> */
		/* 820E7680h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E7680h case    7:*/		return 0x820E7684;
		  /* 820E7684h */ case    8:  		/* addi R4, R1, 144 */
		/* 820E7684h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 820E7684h case    8:*/		return 0x820E7688;
		  /* 820E7688h */ case    9:  		/* bl -351448 */
		/* 820E7688h case    9:*/		regs.LR = 0x820E768C; return 0x820919B0;
		/* 820E7688h case    9:*/		return 0x820E768C;
		  /* 820E768Ch */ case   10:  		/* addi R4, R1, 160 */
		/* 820E768Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 820E768Ch case   10:*/		return 0x820E7690;
		  /* 820E7690h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E7690h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E7690h case   11:*/		return 0x820E7694;
		  /* 820E7694h */ case   12:  		/* mr R5, R30 */
		/* 820E7694h case   12:*/		regs.R5 = regs.R30;
		/* 820E7694h case   12:*/		return 0x820E7698;
		  /* 820E7698h */ case   13:  		/* add R3, R30, R11 */
		/* 820E7698h case   13:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 820E7698h case   13:*/		return 0x820E769C;
		  /* 820E769Ch */ case   14:  		/* bl -351468 */
		/* 820E769Ch case   14:*/		regs.LR = 0x820E76A0; return 0x820919B0;
		/* 820E769Ch case   14:*/		return 0x820E76A0;
		  /* 820E76A0h */ case   15:  		/* mr R4, R31 */
		/* 820E76A0h case   15:*/		regs.R4 = regs.R31;
		/* 820E76A0h case   15:*/		return 0x820E76A4;
		  /* 820E76A4h */ case   16:  		/* lwz R3, <#[R28 + 260]> */
		/* 820E76A4h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000104) );
		/* 820E76A4h case   16:*/		return 0x820E76A8;
		  /* 820E76A8h */ case   17:  		/* bl 86696 */
		/* 820E76A8h case   17:*/		regs.LR = 0x820E76AC; return 0x820FC950;
		/* 820E76A8h case   17:*/		return 0x820E76AC;
		  /* 820E76ACh */ case   18:  		/* mr R30, R3 */
		/* 820E76ACh case   18:*/		regs.R30 = regs.R3;
		/* 820E76ACh case   18:*/		return 0x820E76B0;
		  /* 820E76B0h */ case   19:  		/* b -100 */
		/* 820E76B0h case   19:*/		return 0x820E764C;
		/* 820E76B0h case   19:*/		return 0x820E76B4;
	}
	return 0x820E76B4;
} // Block from 820E7664h-820E76B4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E76B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E76B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E76B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E76B4);
		  /* 820E76B4h */ case    0:  		/* addi R5, R30, -192 */
		/* 820E76B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFF40);
		/* 820E76B4h case    0:*/		return 0x820E76B8;
		  /* 820E76B8h */ case    1:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E76B8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E76B8h case    1:*/		return 0x820E76BC;
		  /* 820E76BCh */ case    2:  		/* mr R10, R29 */
		/* 820E76BCh case    2:*/		regs.R10 = regs.R29;
		/* 820E76BCh case    2:*/		return 0x820E76C0;
		  /* 820E76C0h */ case    3:  		/* stw R26, <#[R1 + 84]> */
		/* 820E76C0h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 820E76C0h case    3:*/		return 0x820E76C4;
		  /* 820E76C4h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E76C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E76C4h case    4:*/		return 0x820E76C8;
		  /* 820E76C8h */ case    5:  		/* addi R8, R1, 144 */
		/* 820E76C8h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E76C8h case    5:*/		return 0x820E76CC;
		  /* 820E76CCh */ case    6:  		/* addi R7, R1, 96 */
		/* 820E76CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E76CCh case    6:*/		return 0x820E76D0;
		  /* 820E76D0h */ case    7:  		/* addi R6, R1, 304 */
		/* 820E76D0h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E76D0h case    7:*/		return 0x820E76D4;
		  /* 820E76D4h */ case    8:  		/* mr R3, R28 */
		/* 820E76D4h case    8:*/		regs.R3 = regs.R28;
		/* 820E76D4h case    8:*/		return 0x820E76D8;
		  /* 820E76D8h */ case    9:  		/* bl -14936 */
		/* 820E76D8h case    9:*/		regs.LR = 0x820E76DC; return 0x820E3C80;
		/* 820E76D8h case    9:*/		return 0x820E76DC;
		  /* 820E76DCh */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E76DCh case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E76DCh case   10:*/		return 0x820E76E0;
		  /* 820E76E0h */ case   11:  		/* bc 4, CR0_EQ, 84 */
		/* 820E76E0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x820E7734;  }
		/* 820E76E0h case   11:*/		return 0x820E76E4;
		  /* 820E76E4h */ case   12:  		/* li R3, 116 */
		/* 820E76E4h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E76E4h case   12:*/		return 0x820E76E8;
		  /* 820E76E8h */ case   13:  		/* bl 85680 */
		/* 820E76E8h case   13:*/		regs.LR = 0x820E76EC; return 0x820FC598;
		/* 820E76E8h case   13:*/		return 0x820E76EC;
		  /* 820E76ECh */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 820E76ECh case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E76ECh case   14:*/		return 0x820E76F0;
		  /* 820E76F0h */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 820E76F0h case   15:*/		if ( regs.CR[0].eq ) { return 0x820E76FC;  }
		/* 820E76F0h case   15:*/		return 0x820E76F4;
		  /* 820E76F4h */ case   16:  		/* bl 83884 */
		/* 820E76F4h case   16:*/		regs.LR = 0x820E76F8; return 0x820FBEA0;
		/* 820E76F4h case   16:*/		return 0x820E76F8;
		  /* 820E76F8h */ case   17:  		/* mr R31, R3 */
		/* 820E76F8h case   17:*/		regs.R31 = regs.R3;
		/* 820E76F8h case   17:*/		return 0x820E76FC;
	}
	return 0x820E76FC;
} // Block from 820E76B4h-820E76FCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E76FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E76FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E76FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E76FC);
		  /* 820E76FCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E76FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E76FCh case    0:*/		return 0x820E7700;
		  /* 820E7700h */ case    1:  		/* bc 12, CR6_EQ, -224 */
		/* 820E7700h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E7620;  }
		/* 820E7700h case    1:*/		return 0x820E7704;
		  /* 820E7704h */ case    2:  		/* mr R4, R29 */
		/* 820E7704h case    2:*/		regs.R4 = regs.R29;
		/* 820E7704h case    2:*/		return 0x820E7708;
		  /* 820E7708h */ case    3:  		/* li R11, 1863 */
		/* 820E7708h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x747);
		/* 820E7708h case    3:*/		return 0x820E770C;
		  /* 820E770Ch */ case    4:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 820E770Ch case    4:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 820E770Ch case    4:*/		return 0x820E7710;
	}
	return 0x820E7710;
} // Block from 820E76FCh-820E7710h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E7710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7710);
		  /* 820E7710h */ case    0:  		/* li R7, 0 */
		/* 820E7710h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E7710h case    0:*/		return 0x820E7714;
		  /* 820E7714h */ case    1:  		/* mr R6, R29 */
		/* 820E7714h case    1:*/		regs.R6 = regs.R29;
		/* 820E7714h case    1:*/		return 0x820E7718;
		  /* 820E7718h */ case    2:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 820E7718h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 820E7718h case    2:*/		return 0x820E771C;
		  /* 820E771Ch */ case    3:  		/* mr R3, R31 */
		/* 820E771Ch case    3:*/		regs.R3 = regs.R31;
		/* 820E771Ch case    3:*/		return 0x820E7720;
		  /* 820E7720h */ case    4:  		/* bl 85776 */
		/* 820E7720h case    4:*/		regs.LR = 0x820E7724; return 0x820FC630;
		/* 820E7720h case    4:*/		return 0x820E7724;
		  /* 820E7724h */ case    5:  		/* or. R30, R3, R3 */
		/* 820E7724h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E7724h case    5:*/		return 0x820E7728;
		  /* 820E7728h */ case    6:  		/* mr R3, R31 */
		/* 820E7728h case    6:*/		regs.R3 = regs.R31;
		/* 820E7728h case    6:*/		return 0x820E772C;
		  /* 820E772Ch */ case    7:  		/* bc 12, CR0_LT, -220 */
		/* 820E772Ch case    7:*/		if ( regs.CR[0].lt ) { return 0x820E7650;  }
		/* 820E772Ch case    7:*/		return 0x820E7730;
		  /* 820E7730h */ case    8:  		/* b -244 */
		/* 820E7730h case    8:*/		return 0x820E763C;
		/* 820E7730h case    8:*/		return 0x820E7734;
	}
	return 0x820E7734;
} // Block from 820E7710h-820E7734h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E7734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7734);
		  /* 820E7734h */ case    0:  		/* mr R5, R30 */
		/* 820E7734h case    0:*/		regs.R5 = regs.R30;
		/* 820E7734h case    0:*/		return 0x820E7738;
		  /* 820E7738h */ case    1:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E7738h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E7738h case    1:*/		return 0x820E773C;
		  /* 820E773Ch */ case    2:  		/* mr R10, R29 */
		/* 820E773Ch case    2:*/		regs.R10 = regs.R29;
		/* 820E773Ch case    2:*/		return 0x820E7740;
		  /* 820E7740h */ case    3:  		/* stw R26, <#[R1 + 84]> */
		/* 820E7740h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7740h case    3:*/		return 0x820E7744;
		  /* 820E7744h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E7744h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E7744h case    4:*/		return 0x820E7748;
		  /* 820E7748h */ case    5:  		/* addi R8, R1, 144 */
		/* 820E7748h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E7748h case    5:*/		return 0x820E774C;
		  /* 820E774Ch */ case    6:  		/* addi R7, R1, 96 */
		/* 820E774Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E774Ch case    6:*/		return 0x820E7750;
		  /* 820E7750h */ case    7:  		/* addi R6, R1, 304 */
		/* 820E7750h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E7750h case    7:*/		return 0x820E7754;
		  /* 820E7754h */ case    8:  		/* mr R3, R28 */
		/* 820E7754h case    8:*/		regs.R3 = regs.R28;
		/* 820E7754h case    8:*/		return 0x820E7758;
		  /* 820E7758h */ case    9:  		/* bl -15064 */
		/* 820E7758h case    9:*/		regs.LR = 0x820E775C; return 0x820E3C80;
		/* 820E7758h case    9:*/		return 0x820E775C;
		  /* 820E775Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E775Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E775Ch case   10:*/		return 0x820E7760;
	}
	return 0x820E7760;
} // Block from 820E7734h-820E7760h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E7760h
// Function '?MatchNEEQ@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7760);
		  /* 820E7760h */ case    0:  		/* bc 4, CR0_EQ, 732 */
		/* 820E7760h case    0:*/		if ( !regs.CR[0].eq ) { return 0x820E7A3C;  }
		/* 820E7760h case    0:*/		return 0x820E7764;
		  /* 820E7764h */ case    1:  		/* lwz R4, <#[R1 + 176]> */
		/* 820E7764h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 820E7764h case    1:*/		return 0x820E7768;
		  /* 820E7768h */ case    2:  		/* lis R11, 8 */
		/* 820E7768h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x8);
		/* 820E7768h case    2:*/		return 0x820E776C;
		  /* 820E776Ch */ case    3:  		/* lwz R27, <#[R28 + 20]> */
		/* 820E776Ch case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R28 + 0x00000014) );
		/* 820E776Ch case    3:*/		return 0x820E7770;
		  /* 820E7770h */ case    4:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 820E7770h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 820E7770h case    4:*/		return 0x820E7774;
		  /* 820E7774h */ case    5:  		/* lwzx R10, <#[R10 + R27]> */
		/* 820E7774h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 820E7774h case    5:*/		return 0x820E7778;
		  /* 820E7778h */ case    6:  		/* lwz R7, <#[R10 + 60]> */
		/* 820E7778h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000003C) );
		/* 820E7778h case    6:*/		return 0x820E777C;
		  /* 820E777Ch */ case    7:  		/* cmplw CR6, R7, R11 */
		/* 820E777Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 820E777Ch case    7:*/		return 0x820E7780;
		  /* 820E7780h */ case    8:  		/* bc 4, CR6_EQ, 80 */
		/* 820E7780h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820E77D0;  }
		/* 820E7780h case    8:*/		return 0x820E7784;
		  /* 820E7784h */ case    9:  		/* cmplwi CR6, R29, 0 */
		/* 820E7784h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E7784h case    9:*/		return 0x820E7788;
		  /* 820E7788h */ case   10:  		/* bc 12, CR6_EQ, 328 */
		/* 820E7788h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E78D0;  }
		/* 820E7788h case   10:*/		return 0x820E778C;
		  /* 820E778Ch */ case   11:  		/* addi R4, R1, 192 */
		/* 820E778Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820E778Ch case   11:*/		return 0x820E7790;
		  /* 820E7790h */ case   12:  		/* addi R3, R1, 112 */
		/* 820E7790h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820E7790h case   12:*/		return 0x820E7794;
		  /* 820E7794h */ case   13:  		/* rlwinm R5, R29, 2, 0, 29 */
		/* 820E7794h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R29);
		/* 820E7794h case   13:*/		return 0x820E7798;
		  /* 820E7798h */ case   14:  		/* mr R30, R29 */
		/* 820E7798h case   14:*/		regs.R30 = regs.R29;
		/* 820E7798h case   14:*/		return 0x820E779C;
		  /* 820E779Ch */ case   15:  		/* bl -350564 */
		/* 820E779Ch case   15:*/		regs.LR = 0x820E77A0; return 0x82091E38;
		/* 820E779Ch case   15:*/		return 0x820E77A0;
		  /* 820E77A0h */ case   16:  		/* mr R11, R31 */
		/* 820E77A0h case   16:*/		regs.R11 = regs.R31;
		/* 820E77A0h case   16:*/		return 0x820E77A4;
		  /* 820E77A4h */ case   17:  		/* addi R10, R1, 176 */
		/* 820E77A4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 820E77A4h case   17:*/		return 0x820E77A8;
		  /* 820E77A8h */ case   18:  		/* addi R9, R1, 128 */
		/* 820E77A8h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E77A8h case   18:*/		return 0x820E77AC;
		  /* 820E77ACh */ case   19:  		/* addic. R30, R30, -1 */
		/* 820E77ACh case   19:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 820E77ACh case   19:*/		return 0x820E77B0;
		  /* 820E77B0h */ case   20:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E77B0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E77B0h case   20:*/		return 0x820E77B4;
		  /* 820E77B4h */ case   21:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E77B4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E77B4h case   21:*/		return 0x820E77B8;
		  /* 820E77B8h */ case   22:  		/* lwzx R10, <#[R10 + R27]> */
		/* 820E77B8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 820E77B8h case   22:*/		return 0x820E77BC;
		  /* 820E77BCh */ case   23:  		/* lwz R10, <#[R10 + 56]> */
		/* 820E77BCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 820E77BCh case   23:*/		return 0x820E77C0;
		  /* 820E77C0h */ case   24:  		/* stwx R10, <#[R11 + R9]> */
		/* 820E77C0h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E77C0h case   24:*/		return 0x820E77C4;
		  /* 820E77C4h */ case   25:  		/* addi R11, R11, 4 */
		/* 820E77C4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E77C4h case   25:*/		return 0x820E77C8;
		  /* 820E77C8h */ case   26:  		/* bc 4, CR0_EQ, -36 */
		/* 820E77C8h case   26:*/		if ( !regs.CR[0].eq ) { return 0x820E77A4;  }
		/* 820E77C8h case   26:*/		return 0x820E77CC;
		  /* 820E77CCh */ case   27:  		/* b 260 */
		/* 820E77CCh case   27:*/		return 0x820E78D0;
		/* 820E77CCh case   27:*/		return 0x820E77D0;
	}
	return 0x820E77D0;
} // Block from 820E7760h-820E77D0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820E77D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E77D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E77D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E77D0);
		  /* 820E77D0h */ case    0:  		/* lwz R6, <#[R1 + 192]> */
		/* 820E77D0h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E77D0h case    0:*/		return 0x820E77D4;
		  /* 820E77D4h */ case    1:  		/* rlwinm R9, R6, 2, 0, 29 */
		/* 820E77D4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R6);
		/* 820E77D4h case    1:*/		return 0x820E77D8;
		  /* 820E77D8h */ case    2:  		/* lwzx R8, <#[R9 + R27]> */
		/* 820E77D8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R27 + 0x00000000) );
		/* 820E77D8h case    2:*/		return 0x820E77DC;
		  /* 820E77DCh */ case    3:  		/* lwz R5, <#[R8 + 60]> */
		/* 820E77DCh case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x0000003C) );
		/* 820E77DCh case    3:*/		return 0x820E77E0;
		  /* 820E77E0h */ case    4:  		/* cmplw CR6, R5, R11 */
		/* 820E77E0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 820E77E0h case    4:*/		return 0x820E77E4;
		  /* 820E77E4h */ case    5:  		/* bc 4, CR6_EQ, 80 */
		/* 820E77E4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E7834;  }
		/* 820E77E4h case    5:*/		return 0x820E77E8;
		  /* 820E77E8h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 820E77E8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E77E8h case    6:*/		return 0x820E77EC;
		  /* 820E77ECh */ case    7:  		/* bc 12, CR6_EQ, 228 */
		/* 820E77ECh case    7:*/		if ( regs.CR[6].eq ) { return 0x820E78D0;  }
		/* 820E77ECh case    7:*/		return 0x820E77F0;
		  /* 820E77F0h */ case    8:  		/* addi R4, R1, 176 */
		/* 820E77F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 820E77F0h case    8:*/		return 0x820E77F4;
		  /* 820E77F4h */ case    9:  		/* addi R3, R1, 112 */
		/* 820E77F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820E77F4h case    9:*/		return 0x820E77F8;
		  /* 820E77F8h */ case   10:  		/* rlwinm R5, R29, 2, 0, 29 */
		/* 820E77F8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R29);
		/* 820E77F8h case   10:*/		return 0x820E77FC;
		  /* 820E77FCh */ case   11:  		/* mr R30, R29 */
		/* 820E77FCh case   11:*/		regs.R30 = regs.R29;
		/* 820E77FCh case   11:*/		return 0x820E7800;
		  /* 820E7800h */ case   12:  		/* bl -350664 */
		/* 820E7800h case   12:*/		regs.LR = 0x820E7804; return 0x82091E38;
		/* 820E7800h case   12:*/		return 0x820E7804;
		  /* 820E7804h */ case   13:  		/* mr R11, R31 */
		/* 820E7804h case   13:*/		regs.R11 = regs.R31;
		/* 820E7804h case   13:*/		return 0x820E7808;
		  /* 820E7808h */ case   14:  		/* addi R10, R1, 192 */
		/* 820E7808h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 820E7808h case   14:*/		return 0x820E780C;
		  /* 820E780Ch */ case   15:  		/* addi R9, R1, 128 */
		/* 820E780Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E780Ch case   15:*/		return 0x820E7810;
		  /* 820E7810h */ case   16:  		/* addic. R30, R30, -1 */
		/* 820E7810h case   16:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 820E7810h case   16:*/		return 0x820E7814;
		  /* 820E7814h */ case   17:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E7814h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E7814h case   17:*/		return 0x820E7818;
		  /* 820E7818h */ case   18:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7818h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7818h case   18:*/		return 0x820E781C;
		  /* 820E781Ch */ case   19:  		/* lwzx R10, <#[R10 + R27]> */
		/* 820E781Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R27 + 0x00000000) );
		/* 820E781Ch case   19:*/		return 0x820E7820;
		  /* 820E7820h */ case   20:  		/* lwz R10, <#[R10 + 56]> */
		/* 820E7820h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 820E7820h case   20:*/		return 0x820E7824;
		  /* 820E7824h */ case   21:  		/* stwx R10, <#[R11 + R9]> */
		/* 820E7824h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E7824h case   21:*/		return 0x820E7828;
		  /* 820E7828h */ case   22:  		/* addi R11, R11, 4 */
		/* 820E7828h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E7828h case   22:*/		return 0x820E782C;
		  /* 820E782Ch */ case   23:  		/* bc 4, CR0_EQ, -36 */
		/* 820E782Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x820E7808;  }
		/* 820E782Ch case   23:*/		return 0x820E7830;
		  /* 820E7830h */ case   24:  		/* b 160 */
		/* 820E7830h case   24:*/		return 0x820E78D0;
		/* 820E7830h case   24:*/		return 0x820E7834;
	}
	return 0x820E7834;
} // Block from 820E77D0h-820E7834h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E7834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7834);
		  /* 820E7834h */ case    0:  		/* cmplwi CR6, R29, 1 */
		/* 820E7834h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 820E7834h case    0:*/		return 0x820E7838;
		  /* 820E7838h */ case    1:  		/* bc 4, CR6_EQ, 512 */
		/* 820E7838h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E7A38;  }
		/* 820E7838h case    1:*/		return 0x820E783C;
		  /* 820E783Ch */ case    2:  		/* lwz R11, <#[R10 + 72]> */
		/* 820E783Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000048) );
		/* 820E783Ch case    2:*/		return 0x820E7840;
		  /* 820E7840h */ case    3:  		/* lis R9, 4112 */
		/* 820E7840h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0x1010);
		/* 820E7840h case    3:*/		return 0x820E7844;
		  /* 820E7844h */ case    4:  		/* cmpwi CR6, R11, -1 */
		/* 820E7844h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7844h case    4:*/		return 0x820E7848;
		  /* 820E7848h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 820E7848h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E7884;  }
		/* 820E7848h case    5:*/		return 0x820E784C;
		  /* 820E784Ch */ case    6:  		/* lwz R10, <#[R28 + 24]> */
		/* 820E784Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 820E784Ch case    6:*/		return 0x820E7850;
		  /* 820E7850h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7850h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7850h case    7:*/		return 0x820E7854;
		  /* 820E7854h */ case    8:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E7854h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E7854h case    8:*/		return 0x820E7858;
		  /* 820E7858h */ case    9:  		/* lwz R11, <#[R10]> */
		/* 820E7858h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7858h case    9:*/		return 0x820E785C;
		  /* 820E785Ch */ case   10:  		/* rlwinm R3, R11, 0, 0, 11 */
		/* 820E785Ch case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R3,regs.R11);
		/* 820E785Ch case   10:*/		return 0x820E7860;
		  /* 820E7860h */ case   11:  		/* cmplw CR6, R3, R9 */
		/* 820E7860h case   11:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R9);
		/* 820E7860h case   11:*/		return 0x820E7864;
		  /* 820E7864h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 820E7864h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E7884;  }
		/* 820E7864h case   12:*/		return 0x820E7868;
		  /* 820E7868h */ case   13:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820E7868h case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820E7868h case   13:*/		return 0x820E786C;
		  /* 820E786Ch */ case   14:  		/* cmplwi CR6, R11, 1 */
		/* 820E786Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820E786Ch case   14:*/		return 0x820E7870;
		  /* 820E7870h */ case   15:  		/* bc 4, CR6_EQ, 20 */
		/* 820E7870h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E7884;  }
		/* 820E7870h case   15:*/		return 0x820E7874;
		  /* 820E7874h */ case   16:  		/* cmplwi CR6, R7, 0 */
		/* 820E7874h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 820E7874h case   16:*/		return 0x820E7878;
		  /* 820E7878h */ case   17:  		/* bc 4, CR6_EQ, 12 */
		/* 820E7878h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820E7884;  }
		/* 820E7878h case   17:*/		return 0x820E787C;
		  /* 820E787Ch */ case   18:  		/* stw R6, <#[R1 + 112]> */
		/* 820E787Ch case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 820E787Ch case   18:*/		return 0x820E7880;
		  /* 820E7880h */ case   19:  		/* b 68 */
		/* 820E7880h case   19:*/		return 0x820E78C4;
		/* 820E7880h case   19:*/		return 0x820E7884;
	}
	return 0x820E7884;
} // Block from 820E7834h-820E7884h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E7884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7884);
		  /* 820E7884h */ case    0:  		/* lwz R11, <#[R8 + 72]> */
		/* 820E7884h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000048) );
		/* 820E7884h case    0:*/		return 0x820E7888;
		  /* 820E7888h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 820E7888h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7888h case    1:*/		return 0x820E788C;
		  /* 820E788Ch */ case    2:  		/* bc 12, CR6_EQ, 428 */
		/* 820E788Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820E7A38;  }
		/* 820E788Ch case    2:*/		return 0x820E7890;
		  /* 820E7890h */ case    3:  		/* lwz R10, <#[R28 + 24]> */
		/* 820E7890h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 820E7890h case    3:*/		return 0x820E7894;
		  /* 820E7894h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7894h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7894h case    4:*/		return 0x820E7898;
		  /* 820E7898h */ case    5:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E7898h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E7898h case    5:*/		return 0x820E789C;
		  /* 820E789Ch */ case    6:  		/* lwz R11, <#[R10]> */
		/* 820E789Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E789Ch case    6:*/		return 0x820E78A0;
		  /* 820E78A0h */ case    7:  		/* rlwinm R8, R11, 0, 0, 11 */
		/* 820E78A0h case    7:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R8,regs.R11);
		/* 820E78A0h case    7:*/		return 0x820E78A4;
		  /* 820E78A4h */ case    8:  		/* cmplw CR6, R8, R9 */
		/* 820E78A4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 820E78A4h case    8:*/		return 0x820E78A8;
		  /* 820E78A8h */ case    9:  		/* bc 4, CR6_EQ, 400 */
		/* 820E78A8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E7A38;  }
		/* 820E78A8h case    9:*/		return 0x820E78AC;
		  /* 820E78ACh */ case   10:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820E78ACh case   10:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820E78ACh case   10:*/		return 0x820E78B0;
		  /* 820E78B0h */ case   11:  		/* cmplwi CR6, R11, 1 */
		/* 820E78B0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820E78B0h case   11:*/		return 0x820E78B4;
		  /* 820E78B4h */ case   12:  		/* bc 4, CR6_EQ, 388 */
		/* 820E78B4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E7A38;  }
		/* 820E78B4h case   12:*/		return 0x820E78B8;
		  /* 820E78B8h */ case   13:  		/* cmplwi CR6, R5, 0 */
		/* 820E78B8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E78B8h case   13:*/		return 0x820E78BC;
		  /* 820E78BCh */ case   14:  		/* bc 4, CR6_EQ, 380 */
		/* 820E78BCh case   14:*/		if ( !regs.CR[6].eq ) { return 0x820E7A38;  }
		/* 820E78BCh case   14:*/		return 0x820E78C0;
		  /* 820E78C0h */ case   15:  		/* stw R4, <#[R1 + 112]> */
		/* 820E78C0h case   15:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000070) );
		/* 820E78C0h case   15:*/		return 0x820E78C4;
	}
	return 0x820E78C4;
} // Block from 820E7884h-820E78C4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E78C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E78C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E78C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E78C4);
		  /* 820E78C4h */ case    0:  		/* lwz R11, <#[R10 + 8]> */
		/* 820E78C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E78C4h case    0:*/		return 0x820E78C8;
		  /* 820E78C8h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 820E78C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E78C8h case    1:*/		return 0x820E78CC;
		  /* 820E78CCh */ case    2:  		/* stw R11, <#[R1 + 128]> */
		/* 820E78CCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E78CCh case    2:*/		return 0x820E78D0;
	}
	return 0x820E78D0;
} // Block from 820E78C4h-820E78D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E78D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E78D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E78D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E78D0);
		  /* 820E78D0h */ case    0:  		/* mr R9, R26 */
		/* 820E78D0h case    0:*/		regs.R9 = regs.R26;
		/* 820E78D0h case    0:*/		return 0x820E78D4;
		  /* 820E78D4h */ case    1:  		/* mr R30, R26 */
		/* 820E78D4h case    1:*/		regs.R30 = regs.R26;
		/* 820E78D4h case    1:*/		return 0x820E78D8;
		  /* 820E78D8h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 820E78D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820E78D8h case    2:*/		return 0x820E78DC;
		  /* 820E78DCh */ case    3:  		/* bc 12, CR6_EQ, 200 */
		/* 820E78DCh case    3:*/		if ( regs.CR[6].eq ) { return 0x820E79A4;  }
		/* 820E78DCh case    3:*/		return 0x820E78E0;
		  /* 820E78E0h */ case    4:  		/* lis R11, -32256 */
		/* 820E78E0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E78E0h case    4:*/		return 0x820E78E4;
		  /* 820E78E4h */ case    5:  		/* lwz R8, <#[R28 + 16]> */
		/* 820E78E4h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000010) );
		/* 820E78E4h case    5:*/		return 0x820E78E8;
		  /* 820E78E8h */ case    6:  		/* lis R7, -32256 */
		/* 820E78E8h case    6:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 820E78E8h case    6:*/		return 0x820E78EC;
		  /* 820E78ECh */ case    7:  		/* mtspr CTR, R29 */
		/* 820E78ECh case    7:*/		regs.CTR = regs.R29;
		/* 820E78ECh case    7:*/		return 0x820E78F0;
		  /* 820E78F0h */ case    8:  		/* addi R10, R1, 160 */
		/* 820E78F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 820E78F0h case    8:*/		return 0x820E78F4;
		  /* 820E78F4h */ case    9:  		/* lfd FR12, <#[R11 + 1808]> */
		/* 820E78F4h case    9:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000710) );
		/* 820E78F4h case    9:*/		return 0x820E78F8;
		  /* 820E78F8h */ case   10:  		/* lfd FR13, <#[R7 + 1848]> */
		/* 820E78F8h case   10:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R7 + 0x00000738) );
		/* 820E78F8h case   10:*/		return 0x820E78FC;
		  /* 820E78FCh */ case   11:  		/* lwz R11, <#[R10 - 16]> */
		/* 820E78FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFFFFF0) );
		/* 820E78FCh case   11:*/		return 0x820E7900;
	}
	return 0x820E7900;
} // Block from 820E78D0h-820E7900h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E7900h
// Function '?MatchNEEQ2@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7900);
		  /* 820E7900h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7900h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7900h case    0:*/		return 0x820E7904;
		  /* 820E7904h */ case    1:  		/* lwzx R11, <#[R11 + R27]> */
		/* 820E7904h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820E7904h case    1:*/		return 0x820E7908;
		  /* 820E7908h */ case    2:  		/* lwz R7, <#[R11 + 4]> */
		/* 820E7908h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820E7908h case    2:*/		return 0x820E790C;
		  /* 820E790Ch */ case    3:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820E790Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820E790Ch case    3:*/		return 0x820E7910;
		  /* 820E7910h */ case    4:  		/* lwzx R7, <#[R7 + R8]> */
		/* 820E7910h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 820E7910h case    4:*/		return 0x820E7914;
		  /* 820E7914h */ case    5:  		/* lwz R7, <#[R7 + 4]> */
		/* 820E7914h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820E7914h case    5:*/		return 0x820E7918;
		  /* 820E7918h */ case    6:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 820E7918h case    6:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 820E7918h case    6:*/		return 0x820E791C;
		  /* 820E791Ch */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 820E791Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x820E7928;  }
		/* 820E791Ch case    7:*/		return 0x820E7920;
		  /* 820E7920h */ case    8:  		/* mr R30, R31 */
		/* 820E7920h case    8:*/		regs.R30 = regs.R31;
		/* 820E7920h case    8:*/		return 0x820E7924;
		  /* 820E7924h */ case    9:  		/* mr R9, R31 */
		/* 820E7924h case    9:*/		regs.R9 = regs.R31;
		/* 820E7924h case    9:*/		return 0x820E7928;
	}
	return 0x820E7928;
} // Block from 820E7900h-820E7928h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E7928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7928);
		  /* 820E7928h */ case    0:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820E7928h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820E7928h case    0:*/		return 0x820E792C;
		  /* 820E792Ch */ case    1:  		/* fcmpu CR6, FR0, FR13 */
		/* 820E792Ch case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820E792Ch case    1:*/		return 0x820E7930;
		  /* 820E7930h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 820E7930h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E7938;  }
		/* 820E7930h case    2:*/		return 0x820E7934;
		  /* 820E7934h */ case    3:  		/* mr R30, R31 */
		/* 820E7934h case    3:*/		regs.R30 = regs.R31;
		/* 820E7934h case    3:*/		return 0x820E7938;
	}
	return 0x820E7938;
} // Block from 820E7928h-820E7938h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E7938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7938);
		  /* 820E7938h */ case    0:  		/* fcmpu CR6, FR0, FR12 */
		/* 820E7938h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR12);
		/* 820E7938h case    0:*/		return 0x820E793C;
		  /* 820E793Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 820E793Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E7944;  }
		/* 820E793Ch case    1:*/		return 0x820E7940;
		  /* 820E7940h */ case    2:  		/* mr R9, R31 */
		/* 820E7940h case    2:*/		regs.R9 = regs.R31;
		/* 820E7940h case    2:*/		return 0x820E7944;
	}
	return 0x820E7944;
} // Block from 820E7938h-820E7944h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E7944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7944);
		  /* 820E7944h */ case    0:  		/* lwz R11, <#[R10]> */
		/* 820E7944h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7944h case    0:*/		return 0x820E7948;
		  /* 820E7948h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7948h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7948h case    1:*/		return 0x820E794C;
		  /* 820E794Ch */ case    2:  		/* lwzx R11, <#[R11 + R27]> */
		/* 820E794Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 820E794Ch case    2:*/		return 0x820E7950;
		  /* 820E7950h */ case    3:  		/* lwz R7, <#[R11 + 4]> */
		/* 820E7950h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 820E7950h case    3:*/		return 0x820E7954;
		  /* 820E7954h */ case    4:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820E7954h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820E7954h case    4:*/		return 0x820E7958;
		  /* 820E7958h */ case    5:  		/* lwzx R7, <#[R7 + R8]> */
		/* 820E7958h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 820E7958h case    5:*/		return 0x820E795C;
		  /* 820E795Ch */ case    6:  		/* lwz R7, <#[R7 + 4]> */
		/* 820E795Ch case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820E795Ch case    6:*/		return 0x820E7960;
		  /* 820E7960h */ case    7:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 820E7960h case    7:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 820E7960h case    7:*/		return 0x820E7964;
		  /* 820E7964h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 820E7964h case    8:*/		if ( !regs.CR[0].eq ) { return 0x820E7970;  }
		/* 820E7964h case    8:*/		return 0x820E7968;
		  /* 820E7968h */ case    9:  		/* mr R30, R31 */
		/* 820E7968h case    9:*/		regs.R30 = regs.R31;
		/* 820E7968h case    9:*/		return 0x820E796C;
		  /* 820E796Ch */ case   10:  		/* mr R9, R31 */
		/* 820E796Ch case   10:*/		regs.R9 = regs.R31;
		/* 820E796Ch case   10:*/		return 0x820E7970;
	}
	return 0x820E7970;
} // Block from 820E7944h-820E7970h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E7970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7970);
		  /* 820E7970h */ case    0:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820E7970h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820E7970h case    0:*/		return 0x820E7974;
		  /* 820E7974h */ case    1:  		/* fcmpu CR6, FR0, FR12 */
		/* 820E7974h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR12);
		/* 820E7974h case    1:*/		return 0x820E7978;
		  /* 820E7978h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 820E7978h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E7980;  }
		/* 820E7978h case    2:*/		return 0x820E797C;
		  /* 820E797Ch */ case    3:  		/* mr R30, R31 */
		/* 820E797Ch case    3:*/		regs.R30 = regs.R31;
		/* 820E797Ch case    3:*/		return 0x820E7980;
	}
	return 0x820E7980;
} // Block from 820E7970h-820E7980h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E7980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7980);
		  /* 820E7980h */ case    0:  		/* fcmpu CR6, FR0, FR13 */
		/* 820E7980h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820E7980h case    0:*/		return 0x820E7984;
		  /* 820E7984h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 820E7984h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E798C;  }
		/* 820E7984h case    1:*/		return 0x820E7988;
		  /* 820E7988h */ case    2:  		/* mr R9, R31 */
		/* 820E7988h case    2:*/		regs.R9 = regs.R31;
		/* 820E7988h case    2:*/		return 0x820E798C;
	}
	return 0x820E798C;
} // Block from 820E7980h-820E798Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E798Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E798C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E798C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E798C);
		  /* 820E798Ch */ case    0:  		/* addi R10, R10, 4 */
		/* 820E798Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E798Ch case    0:*/		return 0x820E7990;
		  /* 820E7990h */ case    1:  		/* bc 16, CR0_LT, -148 */
		/* 820E7990h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E78FC;  }
		/* 820E7990h case    1:*/		return 0x820E7994;
		  /* 820E7994h */ case    2:  		/* cmpwi CR6, R30, 0 */
		/* 820E7994h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820E7994h case    2:*/		return 0x820E7998;
		  /* 820E7998h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 820E7998h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E79A4;  }
		/* 820E7998h case    3:*/		return 0x820E799C;
		  /* 820E799Ch */ case    4:  		/* cmpwi CR6, R9, 0 */
		/* 820E799Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820E799Ch case    4:*/		return 0x820E79A0;
		  /* 820E79A0h */ case    5:  		/* bc 12, CR6_EQ, 152 */
		/* 820E79A0h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E7A38;  }
		/* 820E79A0h case    5:*/		return 0x820E79A4;
	}
	return 0x820E79A4;
} // Block from 820E798Ch-820E79A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E79A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E79A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E79A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E79A4);
		  /* 820E79A4h */ case    0:  		/* li R3, 116 */
		/* 820E79A4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E79A4h case    0:*/		return 0x820E79A8;
		  /* 820E79A8h */ case    1:  		/* bl 84976 */
		/* 820E79A8h case    1:*/		regs.LR = 0x820E79AC; return 0x820FC598;
		/* 820E79A8h case    1:*/		return 0x820E79AC;
		  /* 820E79ACh */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E79ACh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E79ACh case    2:*/		return 0x820E79B0;
		  /* 820E79B0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 820E79B0h case    3:*/		if ( regs.CR[0].eq ) { return 0x820E79BC;  }
		/* 820E79B0h case    3:*/		return 0x820E79B4;
		  /* 820E79B4h */ case    4:  		/* bl 83180 */
		/* 820E79B4h case    4:*/		regs.LR = 0x820E79B8; return 0x820FBEA0;
		/* 820E79B4h case    4:*/		return 0x820E79B8;
		  /* 820E79B8h */ case    5:  		/* mr R31, R3 */
		/* 820E79B8h case    5:*/		regs.R31 = regs.R3;
		/* 820E79B8h case    5:*/		return 0x820E79BC;
	}
	return 0x820E79BC;
} // Block from 820E79A4h-820E79BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E79BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E79BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E79BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E79BC);
		  /* 820E79BCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E79BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E79BCh case    0:*/		return 0x820E79C0;
		  /* 820E79C0h */ case    1:  		/* bc 12, CR6_EQ, -928 */
		/* 820E79C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E7620;  }
		/* 820E79C0h case    1:*/		return 0x820E79C4;
		  /* 820E79C4h */ case    2:  		/* rlwinm R11, R29, 0, 12, 31 */
		/* 820E79C4h case    2:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R29);
		/* 820E79C4h case    2:*/		return 0x820E79C8;
		  /* 820E79C8h */ case    3:  		/* cmpwi CR6, R30, 0 */
		/* 820E79C8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820E79C8h case    3:*/		return 0x820E79CC;
		  /* 820E79CCh */ case    4:  		/* oris R4, R11, 29792 */
		/* 820E79CCh case    4:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R11,0x7460);
		/* 820E79CCh case    4:*/		return 0x820E79D0;
		  /* 820E79D0h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 820E79D0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E79D8;  }
		/* 820E79D0h case    5:*/		return 0x820E79D4;
		  /* 820E79D4h */ case    6:  		/* oris R4, R11, 29808 */
		/* 820E79D4h case    6:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R11,0x7470);
		/* 820E79D4h case    6:*/		return 0x820E79D8;
	}
	return 0x820E79D8;
} // Block from 820E79BCh-820E79D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E79D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E79D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E79D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E79D8);
		  /* 820E79D8h */ case    0:  		/* li R7, 0 */
		/* 820E79D8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E79D8h case    0:*/		return 0x820E79DC;
		  /* 820E79DCh */ case    1:  		/* mr R6, R29 */
		/* 820E79DCh case    1:*/		regs.R6 = regs.R29;
		/* 820E79DCh case    1:*/		return 0x820E79E0;
		  /* 820E79E0h */ case    2:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 820E79E0h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 820E79E0h case    2:*/		return 0x820E79E4;
		  /* 820E79E4h */ case    3:  		/* mr R3, R31 */
		/* 820E79E4h case    3:*/		regs.R3 = regs.R31;
		/* 820E79E4h case    3:*/		return 0x820E79E8;
		  /* 820E79E8h */ case    4:  		/* bl 85064 */
		/* 820E79E8h case    4:*/		regs.LR = 0x820E79EC; return 0x820FC630;
		/* 820E79E8h case    4:*/		return 0x820E79EC;
		  /* 820E79ECh */ case    5:  		/* or. R30, R3, R3 */
		/* 820E79ECh case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E79ECh case    5:*/		return 0x820E79F0;
		  /* 820E79F0h */ case    6:  		/* mr R3, R31 */
		/* 820E79F0h case    6:*/		regs.R3 = regs.R31;
		/* 820E79F0h case    6:*/		return 0x820E79F4;
		  /* 820E79F4h */ case    7:  		/* bc 12, CR0_LT, -932 */
		/* 820E79F4h case    7:*/		if ( regs.CR[0].lt ) { return 0x820E7650;  }
		/* 820E79F4h case    7:*/		return 0x820E79F8;
		  /* 820E79F8h */ case    8:  		/* lwz R4, <#[R28 + 260]> */
		/* 820E79F8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820E79F8h case    8:*/		return 0x820E79FC;
		  /* 820E79FCh */ case    9:  		/* bl 83188 */
		/* 820E79FCh case    9:*/		regs.LR = 0x820E7A00; return 0x820FBEF0;
		/* 820E79FCh case    9:*/		return 0x820E7A00;
		  /* 820E7A00h */ case   10:  		/* or. R30, R3, R3 */
		/* 820E7A00h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E7A00h case   10:*/		return 0x820E7A04;
		  /* 820E7A04h */ case   11:  		/* bc 12, CR0_LT, -952 */
		/* 820E7A04h case   11:*/		if ( regs.CR[0].lt ) { return 0x820E764C;  }
		/* 820E7A04h case   11:*/		return 0x820E7A08;
		  /* 820E7A08h */ case   12:  		/* lwz R11, <#[R28 + 260]> */
		/* 820E7A08h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820E7A08h case   12:*/		return 0x820E7A0C;
		  /* 820E7A0Ch */ case   13:  		/* rlwinm R30, R29, 2, 0, 29 */
		/* 820E7A0Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R29);
		/* 820E7A0Ch case   13:*/		return 0x820E7A10;
		  /* 820E7A10h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 820E7A10h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820E7A10h case   14:*/		return 0x820E7A14;
		  /* 820E7A14h */ case   15:  		/* mr R5, R30 */
		/* 820E7A14h case   15:*/		regs.R5 = regs.R30;
		/* 820E7A14h case   15:*/		return 0x820E7A18;
		  /* 820E7A18h */ case   16:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E7A18h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E7A18h case   16:*/		return 0x820E7A1C;
		  /* 820E7A1Ch */ case   17:  		/* bl -352364 */
		/* 820E7A1Ch case   17:*/		regs.LR = 0x820E7A20; return 0x820919B0;
		/* 820E7A1Ch case   17:*/		return 0x820E7A20;
		  /* 820E7A20h */ case   18:  		/* mr R5, R30 */
		/* 820E7A20h case   18:*/		regs.R5 = regs.R30;
		/* 820E7A20h case   18:*/		return 0x820E7A24;
		  /* 820E7A24h */ case   19:  		/* lwz R3, <#[R31 + 8]> */
		/* 820E7A24h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E7A24h case   19:*/		return 0x820E7A28;
		  /* 820E7A28h */ case   20:  		/* addi R4, R1, 112 */
		/* 820E7A28h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 820E7A28h case   20:*/		return 0x820E7A2C;
		  /* 820E7A2Ch */ case   21:  		/* bl -352380 */
		/* 820E7A2Ch case   21:*/		regs.LR = 0x820E7A30; return 0x820919B0;
		/* 820E7A2Ch case   21:*/		return 0x820E7A30;
		  /* 820E7A30h */ case   22:  		/* addi R4, R1, 128 */
		/* 820E7A30h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E7A30h case   22:*/		return 0x820E7A34;
		  /* 820E7A34h */ case   23:  		/* b -932 */
		/* 820E7A34h case   23:*/		return 0x820E7690;
		/* 820E7A34h case   23:*/		return 0x820E7A38;
	}
	return 0x820E7A38;
} // Block from 820E79D8h-820E7A38h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E7A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7A38);
		  /* 820E7A38h */ case    0:  		/* li R3, 1 */
		/* 820E7A38h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E7A38h case    0:*/		return 0x820E7A3C;
	}
	return 0x820E7A3C;
} // Block from 820E7A38h-820E7A3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E7A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7A3C);
		  /* 820E7A3Ch */ case    0:  		/* addi R1, R1, 432 */
		/* 820E7A3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 820E7A3Ch case    0:*/		return 0x820E7A40;
		  /* 820E7A40h */ case    1:  		/* b -354208 */
		/* 820E7A40h case    1:*/		return 0x820912A0;
		/* 820E7A40h case    1:*/		return 0x820E7A44;
		  /* 820E7A44h */ case    2:  		/* nop */
		/* 820E7A44h case    2:*/		cpu::op::nop();
		/* 820E7A44h case    2:*/		return 0x820E7A48;
	}
	return 0x820E7A48;
} // Block from 820E7A3Ch-820E7A48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E7A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7A48);
		  /* 820E7A48h */ case    0:  		/* mfspr R12, LR */
		/* 820E7A48h case    0:*/		regs.R12 = regs.LR;
		/* 820E7A48h case    0:*/		return 0x820E7A4C;
		  /* 820E7A4Ch */ case    1:  		/* bl -354348 */
		/* 820E7A4Ch case    1:*/		regs.LR = 0x820E7A50; return 0x82091220;
		/* 820E7A4Ch case    1:*/		return 0x820E7A50;
		  /* 820E7A50h */ case    2:  		/* stfd FR30, <#[R1 - 168]> */
		/* 820E7A50h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820E7A50h case    2:*/		return 0x820E7A54;
		  /* 820E7A54h */ case    3:  		/* stfd FR31, <#[R1 - 160]> */
		/* 820E7A54h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820E7A54h case    3:*/		return 0x820E7A58;
		  /* 820E7A58h */ case    4:  		/* stwu R1, <#[R1 - 768]> */
		/* 820E7A58h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD00);
		/* 820E7A58h case    4:*/		return 0x820E7A5C;
		  /* 820E7A5Ch */ case    5:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E7A5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E7A5Ch case    5:*/		return 0x820E7A60;
		  /* 820E7A60h */ case    6:  		/* li R20, -1 */
		/* 820E7A60h case    6:*/		cpu::op::li<0>(regs,&regs.R20,0xFFFFFFFF);
		/* 820E7A60h case    6:*/		return 0x820E7A64;
		  /* 820E7A64h */ case    7:  		/* li R18, 0 */
		/* 820E7A64h case    7:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 820E7A64h case    7:*/		return 0x820E7A68;
		  /* 820E7A68h */ case    8:  		/* lis R10, 8336 */
		/* 820E7A68h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x2090);
		/* 820E7A68h case    8:*/		return 0x820E7A6C;
		  /* 820E7A6Ch */ case    9:  		/* stw R20, <#[R1 + 116]> */
		/* 820E7A6Ch case    9:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000074) );
		/* 820E7A6Ch case    9:*/		return 0x820E7A70;
		  /* 820E7A70h */ case   10:  		/* mr R29, R3 */
		/* 820E7A70h case   10:*/		regs.R29 = regs.R3;
		/* 820E7A70h case   10:*/		return 0x820E7A74;
		  /* 820E7A74h */ case   11:  		/* stw R18, <#[R1 + 112]> */
		/* 820E7A74h case   11:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000070) );
		/* 820E7A74h case   11:*/		return 0x820E7A78;
		  /* 820E7A78h */ case   12:  		/* stw R20, <#[R1 + 120]> */
		/* 820E7A78h case   12:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000078) );
		/* 820E7A78h case   12:*/		return 0x820E7A7C;
		  /* 820E7A7Ch */ case   13:  		/* lwz R11, <#[R11]> */
		/* 820E7A7Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E7A7Ch case   13:*/		return 0x820E7A80;
		  /* 820E7A80h */ case   14:  		/* stw R20, <#[R1 + 124]> */
		/* 820E7A80h case   14:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E7A80h case   14:*/		return 0x820E7A84;
		  /* 820E7A84h */ case   15:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 820E7A84h case   15:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 820E7A84h case   15:*/		return 0x820E7A88;
		  /* 820E7A88h */ case   16:  		/* stw R18, <#[R1 + 128]> */
		/* 820E7A88h case   16:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000080) );
		/* 820E7A88h case   16:*/		return 0x820E7A8C;
		  /* 820E7A8Ch */ case   17:  		/* rlwinm R28, R11, 0, 12, 31 */
		/* 820E7A8Ch case   17:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R11);
		/* 820E7A8Ch case   17:*/		return 0x820E7A90;
		  /* 820E7A90h */ case   18:  		/* stw R20, <#[R1 + 132]> */
		/* 820E7A90h case   18:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000084) );
		/* 820E7A90h case   18:*/		return 0x820E7A94;
		  /* 820E7A94h */ case   19:  		/* stw R20, <#[R1 + 136]> */
		/* 820E7A94h case   19:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000088) );
		/* 820E7A94h case   19:*/		return 0x820E7A98;
		  /* 820E7A98h */ case   20:  		/* cmplw CR6, R9, R10 */
		/* 820E7A98h case   20:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E7A98h case   20:*/		return 0x820E7A9C;
		  /* 820E7A9Ch */ case   21:  		/* stw R20, <#[R1 + 140]> */
		/* 820E7A9Ch case   21:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x0000008C) );
		/* 820E7A9Ch case   21:*/		return 0x820E7AA0;
	}
	return 0x820E7AA0;
} // Block from 820E7A48h-820E7AA0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820E7AA0h
// Function '?MatchIFCOND@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7AA0);
		  /* 820E7AA0h */ case    0:  		/* stw R28, <#[R1 + 108]> */
		/* 820E7AA0h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E7AA0h case    0:*/		return 0x820E7AA4;
		  /* 820E7AA4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820E7AA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E7AB0;  }
		/* 820E7AA4h case    1:*/		return 0x820E7AA8;
		  /* 820E7AA8h */ case    2:  		/* li R3, 1 */
		/* 820E7AA8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E7AA8h case    2:*/		return 0x820E7AAC;
		  /* 820E7AACh */ case    3:  		/* b 1488 */
		/* 820E7AACh case    3:*/		return 0x820E807C;
		/* 820E7AACh case    3:*/		return 0x820E7AB0;
	}
	return 0x820E7AB0;
} // Block from 820E7AA0h-820E7AB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E7AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7AB0);
		  /* 820E7AB0h */ case    0:  		/* li R3, 116 */
		/* 820E7AB0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E7AB0h case    0:*/		return 0x820E7AB4;
		  /* 820E7AB4h */ case    1:  		/* bl 84708 */
		/* 820E7AB4h case    1:*/		regs.LR = 0x820E7AB8; return 0x820FC598;
		/* 820E7AB4h case    1:*/		return 0x820E7AB8;
		  /* 820E7AB8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E7AB8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E7AB8h case    2:*/		return 0x820E7ABC;
		  /* 820E7ABCh */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 820E7ABCh case    3:*/		if ( regs.CR[0].eq ) { return 0x820E7ACC;  }
		/* 820E7ABCh case    3:*/		return 0x820E7AC0;
		  /* 820E7AC0h */ case    4:  		/* bl 82912 */
		/* 820E7AC0h case    4:*/		regs.LR = 0x820E7AC4; return 0x820FBEA0;
		/* 820E7AC0h case    4:*/		return 0x820E7AC4;
		  /* 820E7AC4h */ case    5:  		/* mr R23, R3 */
		/* 820E7AC4h case    5:*/		regs.R23 = regs.R3;
		/* 820E7AC4h case    5:*/		return 0x820E7AC8;
		  /* 820E7AC8h */ case    6:  		/* b 8 */
		/* 820E7AC8h case    6:*/		return 0x820E7AD0;
		/* 820E7AC8h case    6:*/		return 0x820E7ACC;
	}
	return 0x820E7ACC;
} // Block from 820E7AB0h-820E7ACCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E7ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7ACC);
		  /* 820E7ACCh */ case    0:  		/* mr R23, R18 */
		/* 820E7ACCh case    0:*/		regs.R23 = regs.R18;
		/* 820E7ACCh case    0:*/		return 0x820E7AD0;
	}
	return 0x820E7AD0;
} // Block from 820E7ACCh-820E7AD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E7AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7AD0);
		  /* 820E7AD0h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 820E7AD0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 820E7AD0h case    0:*/		return 0x820E7AD4;
		  /* 820E7AD4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E7AD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E7AE4;  }
		/* 820E7AD4h case    1:*/		return 0x820E7AD8;
		  /* 820E7AD8h */ case    2:  		/* lis R3, -32761 */
		/* 820E7AD8h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E7AD8h case    2:*/		return 0x820E7ADC;
		  /* 820E7ADCh */ case    3:  		/* ori R3, R3, 14 */
		/* 820E7ADCh case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E7ADCh case    3:*/		return 0x820E7AE0;
		  /* 820E7AE0h */ case    4:  		/* b 1436 */
		/* 820E7AE0h case    4:*/		return 0x820E807C;
		/* 820E7AE0h case    4:*/		return 0x820E7AE4;
	}
	return 0x820E7AE4;
} // Block from 820E7AD0h-820E7AE4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E7AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7AE4);
		  /* 820E7AE4h */ case    0:  		/* mr R3, R23 */
		/* 820E7AE4h case    0:*/		regs.R3 = regs.R23;
		/* 820E7AE4h case    0:*/		return 0x820E7AE8;
		  /* 820E7AE8h */ case    1:  		/* lwz R4, <#[R29 + 260]> */
		/* 820E7AE8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000104) );
		/* 820E7AE8h case    1:*/		return 0x820E7AEC;
		  /* 820E7AECh */ case    2:  		/* bl 85604 */
		/* 820E7AECh case    2:*/		regs.LR = 0x820E7AF0; return 0x820FC950;
		/* 820E7AECh case    2:*/		return 0x820E7AF0;
		  /* 820E7AF0h */ case    3:  		/* or. R31, R3, R3 */
		/* 820E7AF0h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820E7AF0h case    3:*/		return 0x820E7AF4;
		  /* 820E7AF4h */ case    4:  		/* bc 4, CR0_LT, 28 */
		/* 820E7AF4h case    4:*/		if ( !regs.CR[0].lt ) { return 0x820E7B10;  }
		/* 820E7AF4h case    4:*/		return 0x820E7AF8;
		  /* 820E7AF8h */ case    5:  		/* mr R3, R23 */
		/* 820E7AF8h case    5:*/		regs.R3 = regs.R23;
		/* 820E7AF8h case    5:*/		return 0x820E7AFC;
		  /* 820E7AFCh */ case    6:  		/* bl 1267908 */
		/* 820E7AFCh case    6:*/		regs.LR = 0x820E7B00; return 0x8221D3C0;
		/* 820E7AFCh case    6:*/		return 0x820E7B00;
		  /* 820E7B00h */ case    7:  		/* mr R3, R23 */
		/* 820E7B00h case    7:*/		regs.R3 = regs.R23;
		/* 820E7B00h case    7:*/		return 0x820E7B04;
		  /* 820E7B04h */ case    8:  		/* bl 84716 */
		/* 820E7B04h case    8:*/		regs.LR = 0x820E7B08; return 0x820FC5F0;
		/* 820E7B04h case    8:*/		return 0x820E7B08;
		  /* 820E7B08h */ case    9:  		/* mr R3, R31 */
		/* 820E7B08h case    9:*/		regs.R3 = regs.R31;
		/* 820E7B08h case    9:*/		return 0x820E7B0C;
		  /* 820E7B0Ch */ case   10:  		/* b 1392 */
		/* 820E7B0Ch case   10:*/		return 0x820E807C;
		/* 820E7B0Ch case   10:*/		return 0x820E7B10;
	}
	return 0x820E7B10;
} // Block from 820E7AE4h-820E7B10h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E7B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7B10);
		  /* 820E7B10h */ case    0:  		/* lis R11, 8336 */
		/* 820E7B10h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2090);
		/* 820E7B10h case    0:*/		return 0x820E7B14;
		  /* 820E7B14h */ case    1:  		/* stw R18, <#[R1 + 100]> */
		/* 820E7B14h case    1:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000064) );
		/* 820E7B14h case    1:*/		return 0x820E7B18;
		  /* 820E7B18h */ case    2:  		/* li R17, 1 */
		/* 820E7B18h case    2:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 820E7B18h case    2:*/		return 0x820E7B1C;
		  /* 820E7B1Ch */ case    3:  		/* li R10, 2 */
		/* 820E7B1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820E7B1Ch case    3:*/		return 0x820E7B20;
		  /* 820E7B20h */ case    4:  		/* ori R11, R11, 1 */
		/* 820E7B20h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E7B20h case    4:*/		return 0x820E7B24;
		  /* 820E7B24h */ case    5:  		/* stw R17, <#[R23 + 12]> */
		/* 820E7B24h case    5:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R23 + 0x0000000C) );
		/* 820E7B24h case    5:*/		return 0x820E7B28;
		  /* 820E7B28h */ case    6:  		/* stw R10, <#[R23 + 4]> */
		/* 820E7B28h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 820E7B28h case    6:*/		return 0x820E7B2C;
		  /* 820E7B2Ch */ case    7:  		/* cmplwi CR6, R28, 0 */
		/* 820E7B2Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820E7B2Ch case    7:*/		return 0x820E7B30;
		  /* 820E7B30h */ case    8:  		/* stw R11, <#[R23]> */
		/* 820E7B30h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 820E7B30h case    8:*/		return 0x820E7B34;
		  /* 820E7B34h */ case    9:  		/* bc 12, CR6_EQ, 1348 */
		/* 820E7B34h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E8078;  }
		/* 820E7B34h case    9:*/		return 0x820E7B38;
		  /* 820E7B38h */ case   10:  		/* lis R9, -32256 */
		/* 820E7B38h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820E7B38h case   10:*/		return 0x820E7B3C;
		  /* 820E7B3Ch */ case   11:  		/* lis R8, -32256 */
		/* 820E7B3Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820E7B3Ch case   11:*/		return 0x820E7B40;
		  /* 820E7B40h */ case   12:  		/* lis R10, -32254 */
		/* 820E7B40h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 820E7B40h case   12:*/		return 0x820E7B44;
		  /* 820E7B44h */ case   13:  		/* lis R11, -32254 */
		/* 820E7B44h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E7B44h case   13:*/		return 0x820E7B48;
		  /* 820E7B48h */ case   14:  		/* addi R10, R10, -18296 */
		/* 820E7B48h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFB888);
		/* 820E7B48h case   14:*/		return 0x820E7B4C;
		  /* 820E7B4Ch */ case   15:  		/* lfd FR31, <#[R9 + 1808]> */
		/* 820E7B4Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R9 + 0x00000710) );
		/* 820E7B4Ch case   15:*/		return 0x820E7B50;
		  /* 820E7B50h */ case   16:  		/* mr R16, R18 */
		/* 820E7B50h case   16:*/		regs.R16 = regs.R18;
		/* 820E7B50h case   16:*/		return 0x820E7B54;
		  /* 820E7B54h */ case   17:  		/* lfd FR30, <#[R8 + 1848]> */
		/* 820E7B54h case   17:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R8 + 0x00000738) );
		/* 820E7B54h case   17:*/		return 0x820E7B58;
		  /* 820E7B58h */ case   18:  		/* rlwinm R15, R28, 2, 0, 29 */
		/* 820E7B58h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R15,regs.R28);
		/* 820E7B58h case   18:*/		return 0x820E7B5C;
		  /* 820E7B5Ch */ case   19:  		/* lis R14, 4096 */
		/* 820E7B5Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R14,0x1000);
		/* 820E7B5Ch case   19:*/		return 0x820E7B60;
		  /* 820E7B60h */ case   20:  		/* stw R10, <#[R1 + 104]> */
		/* 820E7B60h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 820E7B60h case   20:*/		return 0x820E7B64;
		  /* 820E7B64h */ case   21:  		/* addi R19, R11, -18952 */
		/* 820E7B64h case   21:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFFB5F8);
		/* 820E7B64h case   21:*/		return 0x820E7B68;
		  /* 820E7B68h */ case   22:  		/* lwz R11, <#[R29 + 260]> */
		/* 820E7B68h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000104) );
		/* 820E7B68h case   22:*/		return 0x820E7B6C;
		  /* 820E7B6Ch */ case   23:  		/* li R5, 160 */
		/* 820E7B6Ch case   23:*/		cpu::op::li<0>(regs,&regs.R5,0xA0);
		/* 820E7B6Ch case   23:*/		return 0x820E7B70;
		  /* 820E7B70h */ case   24:  		/* lwz R10, <#[R23 + 16]> */
		/* 820E7B70h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000010) );
		/* 820E7B70h case   24:*/		return 0x820E7B74;
		  /* 820E7B74h */ case   25:  		/* li R4, 255 */
		/* 820E7B74h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 820E7B74h case   25:*/		return 0x820E7B78;
		  /* 820E7B78h */ case   26:  		/* addi R3, R1, 144 */
		/* 820E7B78h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 820E7B78h case   26:*/		return 0x820E7B7C;
		  /* 820E7B7Ch */ case   27:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E7B7Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E7B7Ch case   27:*/		return 0x820E7B80;
		  /* 820E7B80h */ case   28:  		/* lwzx R11, <#[R11 + R16]> */
		/* 820E7B80h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 820E7B80h case   28:*/		return 0x820E7B84;
		  /* 820E7B84h */ case   29:  		/* stw R11, <#[R10]> */
		/* 820E7B84h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7B84h case   29:*/		return 0x820E7B88;
		  /* 820E7B88h */ case   30:  		/* lwz R11, <#[R29 + 260]> */
		/* 820E7B88h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000104) );
		/* 820E7B88h case   30:*/		return 0x820E7B8C;
		  /* 820E7B8Ch */ case   31:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E7B8Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E7B8Ch case   31:*/		return 0x820E7B90;
		  /* 820E7B90h */ case   32:  		/* lwzx R11, <#[R11 + R16]> */
		/* 820E7B90h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 820E7B90h case   32:*/		return 0x820E7B94;
		  /* 820E7B94h */ case   33:  		/* lwz R10, <#[R23 + 8]> */
		/* 820E7B94h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 820E7B94h case   33:*/		return 0x820E7B98;
		  /* 820E7B98h */ case   34:  		/* stw R11, <#[R10]> */
		/* 820E7B98h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7B98h case   34:*/		return 0x820E7B9C;
		  /* 820E7B9Ch */ case   35:  		/* lwz R11, <#[R29 + 260]> */
		/* 820E7B9Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000104) );
		/* 820E7B9Ch case   35:*/		return 0x820E7BA0;
		  /* 820E7BA0h */ case   36:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E7BA0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E7BA0h case   36:*/		return 0x820E7BA4;
		  /* 820E7BA4h */ case   37:  		/* lwz R10, <#[R23 + 8]> */
		/* 820E7BA4h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 820E7BA4h case   37:*/		return 0x820E7BA8;
		  /* 820E7BA8h */ case   38:  		/* lwzx R11, <#[R11 + R15]> */
		/* 820E7BA8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 820E7BA8h case   38:*/		return 0x820E7BAC;
		  /* 820E7BACh */ case   39:  		/* stw R11, <#[R10 + 4]> */
		/* 820E7BACh case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820E7BACh case   39:*/		return 0x820E7BB0;
		  /* 820E7BB0h */ case   40:  		/* bl -354416 */
		/* 820E7BB0h case   40:*/		regs.LR = 0x820E7BB4; return 0x82091340;
		/* 820E7BB0h case   40:*/		return 0x820E7BB4;
		  /* 820E7BB4h */ case   41:  		/* addi R5, R19, -512 */
		/* 820E7BB4h case   41:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R19,0xFFFFFE00);
		/* 820E7BB4h case   41:*/		return 0x820E7BB8;
		  /* 820E7BB8h */ case   42:  		/* stw R18, <#[R1 + 96]> */
		/* 820E7BB8h case   42:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 820E7BB8h case   42:*/		return 0x820E7BBC;
		  /* 820E7BBCh */ case   43:  		/* li R10, 1 */
		/* 820E7BBCh case   43:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E7BBCh case   43:*/		return 0x820E7BC0;
		  /* 820E7BC0h */ case   44:  		/* stw R17, <#[R1 + 84]> */
		/* 820E7BC0h case   44:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7BC0h case   44:*/		return 0x820E7BC4;
		  /* 820E7BC4h */ case   45:  		/* addi R9, R1, 112 */
		/* 820E7BC4h case   45:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E7BC4h case   45:*/		return 0x820E7BC8;
		  /* 820E7BC8h */ case   46:  		/* addi R8, R1, 144 */
		/* 820E7BC8h case   46:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E7BC8h case   46:*/		return 0x820E7BCC;
		  /* 820E7BCCh */ case   47:  		/* addi R7, R1, 96 */
		/* 820E7BCCh case   47:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E7BCCh case   47:*/		return 0x820E7BD0;
		  /* 820E7BD0h */ case   48:  		/* addi R6, R1, 368 */
		/* 820E7BD0h case   48:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x170);
		/* 820E7BD0h case   48:*/		return 0x820E7BD4;
		  /* 820E7BD4h */ case   49:  		/* mr R4, R23 */
		/* 820E7BD4h case   49:*/		regs.R4 = regs.R23;
		/* 820E7BD4h case   49:*/		return 0x820E7BD8;
		  /* 820E7BD8h */ case   50:  		/* mr R3, R29 */
		/* 820E7BD8h case   50:*/		regs.R3 = regs.R29;
		/* 820E7BD8h case   50:*/		return 0x820E7BDC;
		  /* 820E7BDCh */ case   51:  		/* bl -16220 */
		/* 820E7BDCh case   51:*/		regs.LR = 0x820E7BE0; return 0x820E3C80;
		/* 820E7BDCh case   51:*/		return 0x820E7BE0;
		  /* 820E7BE0h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 820E7BE0h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E7BE0h case   52:*/		return 0x820E7BE4;
		  /* 820E7BE4h */ case   53:  		/* bc 12, CR0_EQ, 52 */
		/* 820E7BE4h case   53:*/		if ( regs.CR[0].eq ) { return 0x820E7C18;  }
		/* 820E7BE4h case   53:*/		return 0x820E7BE8;
		  /* 820E7BE8h */ case   54:  		/* stw R17, <#[R1 + 84]> */
		/* 820E7BE8h case   54:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7BE8h case   54:*/		return 0x820E7BEC;
		  /* 820E7BECh */ case   55:  		/* addi R5, R19, -320 */
		/* 820E7BECh case   55:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R19,0xFFFFFEC0);
		/* 820E7BECh case   55:*/		return 0x820E7BF0;
		  /* 820E7BF0h */ case   56:  		/* li R10, 1 */
		/* 820E7BF0h case   56:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E7BF0h case   56:*/		return 0x820E7BF4;
		  /* 820E7BF4h */ case   57:  		/* addi R9, R1, 112 */
		/* 820E7BF4h case   57:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E7BF4h case   57:*/		return 0x820E7BF8;
		  /* 820E7BF8h */ case   58:  		/* addi R8, R1, 144 */
		/* 820E7BF8h case   58:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 820E7BF8h case   58:*/		return 0x820E7BFC;
		  /* 820E7BFCh */ case   59:  		/* addi R7, R1, 96 */
		/* 820E7BFCh case   59:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E7BFCh case   59:*/		return 0x820E7C00;
		  /* 820E7C00h */ case   60:  		/* addi R6, R1, 368 */
		/* 820E7C00h case   60:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x170);
		/* 820E7C00h case   60:*/		return 0x820E7C04;
		  /* 820E7C04h */ case   61:  		/* mr R4, R23 */
		/* 820E7C04h case   61:*/		regs.R4 = regs.R23;
		/* 820E7C04h case   61:*/		return 0x820E7C08;
		  /* 820E7C08h */ case   62:  		/* mr R3, R29 */
		/* 820E7C08h case   62:*/		regs.R3 = regs.R29;
		/* 820E7C08h case   62:*/		return 0x820E7C0C;
		  /* 820E7C0Ch */ case   63:  		/* bl -16268 */
		/* 820E7C0Ch case   63:*/		regs.LR = 0x820E7C10; return 0x820E3C80;
		/* 820E7C0Ch case   63:*/		return 0x820E7C10;
		  /* 820E7C10h */ case   64:  		/* cmpwi CR0, R3, 0 */
		/* 820E7C10h case   64:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E7C10h case   64:*/		return 0x820E7C14;
		  /* 820E7C14h */ case   65:  		/* bc 4, CR0_EQ, 1096 */
		/* 820E7C14h case   65:*/		if ( !regs.CR[0].eq ) { return 0x820E805C;  }
		/* 820E7C14h case   65:*/		return 0x820E7C18;
	}
	return 0x820E7C18;
} // Block from 820E7B10h-820E7C18h (66 instructions)

//////////////////////////////////////////////////////
// Block at 820E7C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7C18);
		  /* 820E7C18h */ case    0:  		/* lwz R11, <#[R1 + 176]> */
		/* 820E7C18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 820E7C18h case    0:*/		return 0x820E7C1C;
		  /* 820E7C1Ch */ case    1:  		/* lwz R31, <#[R1 + 160]> */
		/* 820E7C1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 820E7C1Ch case    1:*/		return 0x820E7C20;
		  /* 820E7C20h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 820E7C20h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820E7C20h case    2:*/		return 0x820E7C24;
		  /* 820E7C24h */ case    3:  		/* bc 4, CR6_EQ, 1080 */
		/* 820E7C24h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7C24h case    3:*/		return 0x820E7C28;
		  /* 820E7C28h */ case    4:  		/* stw R18, <#[R1 + 96]> */
		/* 820E7C28h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 820E7C28h case    4:*/		return 0x820E7C2C;
		  /* 820E7C2Ch */ case    5:  		/* addi R5, R19, -96 */
		/* 820E7C2Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R19,0xFFFFFFA0);
		/* 820E7C2Ch case    5:*/		return 0x820E7C30;
		  /* 820E7C30h */ case    6:  		/* li R10, 1 */
		/* 820E7C30h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E7C30h case    6:*/		return 0x820E7C34;
		  /* 820E7C34h */ case    7:  		/* stw R17, <#[R1 + 84]> */
		/* 820E7C34h case    7:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7C34h case    7:*/		return 0x820E7C38;
		  /* 820E7C38h */ case    8:  		/* addi R9, R1, 128 */
		/* 820E7C38h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E7C38h case    8:*/		return 0x820E7C3C;
		  /* 820E7C3Ch */ case    9:  		/* addi R8, R1, 432 */
		/* 820E7C3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1B0);
		/* 820E7C3Ch case    9:*/		return 0x820E7C40;
		  /* 820E7C40h */ case   10:  		/* addi R7, R1, 96 */
		/* 820E7C40h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E7C40h case   10:*/		return 0x820E7C44;
		  /* 820E7C44h */ case   11:  		/* addi R6, R1, 304 */
		/* 820E7C44h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E7C44h case   11:*/		return 0x820E7C48;
		  /* 820E7C48h */ case   12:  		/* mr R4, R23 */
		/* 820E7C48h case   12:*/		regs.R4 = regs.R23;
		/* 820E7C48h case   12:*/		return 0x820E7C4C;
		  /* 820E7C4Ch */ case   13:  		/* mr R3, R29 */
		/* 820E7C4Ch case   13:*/		regs.R3 = regs.R29;
		/* 820E7C4Ch case   13:*/		return 0x820E7C50;
		  /* 820E7C50h */ case   14:  		/* bl -16336 */
		/* 820E7C50h case   14:*/		regs.LR = 0x820E7C54; return 0x820E3C80;
		/* 820E7C50h case   14:*/		return 0x820E7C54;
		  /* 820E7C54h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820E7C54h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E7C54h case   15:*/		return 0x820E7C58;
		  /* 820E7C58h */ case   16:  		/* bc 12, CR0_EQ, 44 */
		/* 820E7C58h case   16:*/		if ( regs.CR[0].eq ) { return 0x820E7C84;  }
		/* 820E7C58h case   16:*/		return 0x820E7C5C;
		  /* 820E7C5Ch */ case   17:  		/* mr R5, R19 */
		/* 820E7C5Ch case   17:*/		regs.R5 = regs.R19;
		/* 820E7C5Ch case   17:*/		return 0x820E7C60;
		  /* 820E7C60h */ case   18:  		/* stw R17, <#[R1 + 84]> */
		/* 820E7C60h case   18:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 820E7C60h case   18:*/		return 0x820E7C64;
		  /* 820E7C64h */ case   19:  		/* li R10, 1 */
		/* 820E7C64h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E7C64h case   19:*/		return 0x820E7C68;
		  /* 820E7C68h */ case   20:  		/* addi R9, R1, 128 */
		/* 820E7C68h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E7C68h case   20:*/		return 0x820E7C6C;
		  /* 820E7C6Ch */ case   21:  		/* addi R8, R1, 432 */
		/* 820E7C6Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1B0);
		/* 820E7C6Ch case   21:*/		return 0x820E7C70;
		  /* 820E7C70h */ case   22:  		/* addi R7, R1, 96 */
		/* 820E7C70h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E7C70h case   22:*/		return 0x820E7C74;
		  /* 820E7C74h */ case   23:  		/* addi R6, R1, 304 */
		/* 820E7C74h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820E7C74h case   23:*/		return 0x820E7C78;
		  /* 820E7C78h */ case   24:  		/* mr R4, R23 */
		/* 820E7C78h case   24:*/		regs.R4 = regs.R23;
		/* 820E7C78h case   24:*/		return 0x820E7C7C;
		  /* 820E7C7Ch */ case   25:  		/* mr R3, R29 */
		/* 820E7C7Ch case   25:*/		regs.R3 = regs.R29;
		/* 820E7C7Ch case   25:*/		return 0x820E7C80;
		  /* 820E7C80h */ case   26:  		/* bl -16384 */
		/* 820E7C80h case   26:*/		regs.LR = 0x820E7C84; return 0x820E3C80;
		/* 820E7C80h case   26:*/		return 0x820E7C84;
	}
	return 0x820E7C84;
} // Block from 820E7C18h-820E7C84h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E7C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7C84);
		  /* 820E7C84h */ case    0:  		/* lwz R11, <#[R1 + 432]> */
		/* 820E7C84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001B0) );
		/* 820E7C84h case    0:*/		return 0x820E7C88;
		  /* 820E7C88h */ case    1:  		/* lwz R10, <#[R1 + 144]> */
		/* 820E7C88h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820E7C88h case    1:*/		return 0x820E7C8C;
		  /* 820E7C8Ch */ case    2:  		/* lwz R21, <#[R1 + 448]> */
		/* 820E7C8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000001C0) );
		/* 820E7C8Ch case    2:*/		return 0x820E7C90;
		  /* 820E7C90h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 820E7C90h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E7C90h case    3:*/		return 0x820E7C94;
		  /* 820E7C94h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 820E7C94h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E7C9C;  }
		/* 820E7C94h case    4:*/		return 0x820E7C98;
		  /* 820E7C98h */ case    5:  		/* mr R21, R10 */
		/* 820E7C98h case    5:*/		regs.R21 = regs.R10;
		/* 820E7C98h case    5:*/		return 0x820E7C9C;
	}
	return 0x820E7C9C;
} // Block from 820E7C84h-820E7C9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E7C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7C9C);
		  /* 820E7C9Ch */ case    0:  		/* cmpwi CR6, R21, -1 */
		/* 820E7C9Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R21,0xFFFFFFFF);
		/* 820E7C9Ch case    0:*/		return 0x820E7CA0;
		  /* 820E7CA0h */ case    1:  		/* bc 12, CR6_EQ, 956 */
		/* 820E7CA0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7CA0h case    1:*/		return 0x820E7CA4;
		  /* 820E7CA4h */ case    2:  		/* lwz R11, <#[R23 + 16]> */
		/* 820E7CA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 820E7CA4h case    2:*/		return 0x820E7CA8;
		  /* 820E7CA8h */ case    3:  		/* lwz R30, <#[R29 + 20]> */
		/* 820E7CA8h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000014) );
		/* 820E7CA8h case    3:*/		return 0x820E7CAC;
		  /* 820E7CACh */ case    4:  		/* lwz R11, <#[R11]> */
		/* 820E7CACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E7CACh case    4:*/		return 0x820E7CB0;
		  /* 820E7CB0h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7CB0h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7CB0h case    5:*/		return 0x820E7CB4;
		  /* 820E7CB4h */ case    6:  		/* lwzx R9, <#[R30 + R11]> */
		/* 820E7CB4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820E7CB4h case    6:*/		return 0x820E7CB8;
		  /* 820E7CB8h */ case    7:  		/* lwz R9, <#[R9 + 20]> */
		/* 820E7CB8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 820E7CB8h case    7:*/		return 0x820E7CBC;
		  /* 820E7CBCh */ case    8:  		/* cmpwi CR6, R9, -1 */
		/* 820E7CBCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E7CBCh case    8:*/		return 0x820E7CC0;
		  /* 820E7CC0h */ case    9:  		/* bc 12, CR6_EQ, 924 */
		/* 820E7CC0h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7CC0h case    9:*/		return 0x820E7CC4;
		  /* 820E7CC4h */ case   10:  		/* rlwinm R9, R30, 0, 0, 31 */
		/* 820E7CC4h case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R30);
		/* 820E7CC4h case   10:*/		return 0x820E7CC8;
		  /* 820E7CC8h */ case   11:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820E7CC8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E7CC8h case   11:*/		return 0x820E7CCC;
		  /* 820E7CCCh */ case   12:  		/* lwz R11, <#[R11 + 20]> */
		/* 820E7CCCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820E7CCCh case   12:*/		return 0x820E7CD0;
		  /* 820E7CD0h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7CD0h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7CD0h case   13:*/		return 0x820E7CD4;
		  /* 820E7CD4h */ case   14:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E7CD4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E7CD4h case   14:*/		return 0x820E7CD8;
		  /* 820E7CD8h */ case   15:  		/* lwz R11, <#[R11 + 72]> */
		/* 820E7CD8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 820E7CD8h case   15:*/		return 0x820E7CDC;
		  /* 820E7CDCh */ case   16:  		/* cmpwi CR6, R11, -1 */
		/* 820E7CDCh case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7CDCh case   16:*/		return 0x820E7CE0;
		  /* 820E7CE0h */ case   17:  		/* bc 12, CR6_EQ, 892 */
		/* 820E7CE0h case   17:*/		if ( regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7CE0h case   17:*/		return 0x820E7CE4;
		  /* 820E7CE4h */ case   18:  		/* lwz R4, <#[R29 + 24]> */
		/* 820E7CE4h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000018) );
		/* 820E7CE4h case   18:*/		return 0x820E7CE8;
		  /* 820E7CE8h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7CE8h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7CE8h case   19:*/		return 0x820E7CEC;
		  /* 820E7CECh */ case   20:  		/* lis R9, 4368 */
		/* 820E7CECh case   20:*/		cpu::op::lis<0>(regs,&regs.R9,0x1110);
		/* 820E7CECh case   20:*/		return 0x820E7CF0;
		  /* 820E7CF0h */ case   21:  		/* ori R9, R9, 1 */
		/* 820E7CF0h case   21:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E7CF0h case   21:*/		return 0x820E7CF4;
		  /* 820E7CF4h */ case   22:  		/* lwzx R22, <#[R11 + R4]> */
		/* 820E7CF4h case   22:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E7CF4h case   22:*/		return 0x820E7CF8;
		  /* 820E7CF8h */ case   23:  		/* lwz R11, <#[R22]> */
		/* 820E7CF8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 820E7CF8h case   23:*/		return 0x820E7CFC;
		  /* 820E7CFCh */ case   24:  		/* cmplw CR6, R11, R9 */
		/* 820E7CFCh case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E7CFCh case   24:*/		return 0x820E7D00;
		  /* 820E7D00h */ case   25:  		/* bc 4, CR6_EQ, 860 */
		/* 820E7D00h case   25:*/		if ( !regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7D00h case   25:*/		return 0x820E7D04;
		  /* 820E7D04h */ case   26:  		/* rlwinm R11, R30, 0, 0, 31 */
		/* 820E7D04h case   26:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R30);
		/* 820E7D04h case   26:*/		return 0x820E7D08;
		  /* 820E7D08h */ case   27:  		/* rlwinm R9, R31, 2, 0, 29 */
		/* 820E7D08h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R31);
		/* 820E7D08h case   27:*/		return 0x820E7D0C;
		  /* 820E7D0Ch */ case   28:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7D0Ch case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7D0Ch case   28:*/		return 0x820E7D10;
		  /* 820E7D10h */ case   29:  		/* mr R7, R31 */
		/* 820E7D10h case   29:*/		regs.R7 = regs.R31;
		/* 820E7D10h case   29:*/		return 0x820E7D14;
		  /* 820E7D14h */ case   30:  		/* lwzx R8, <#[R9 + R11]> */
		/* 820E7D14h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E7D14h case   30:*/		return 0x820E7D18;
		  /* 820E7D18h */ case   31:  		/* lwzx R3, <#[R10 + R11]> */
		/* 820E7D18h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7D18h case   31:*/		return 0x820E7D1C;
		  /* 820E7D1Ch */ case   32:  		/* b 112 */
		/* 820E7D1Ch case   32:*/		return 0x820E7D8C;
		/* 820E7D1Ch case   32:*/		return 0x820E7D20;
		  /* 820E7D20h */ case   33:  		/* lwz R10, <#[R8 + 8]> */
		/* 820E7D20h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 820E7D20h case   33:*/		return 0x820E7D24;
		  /* 820E7D24h */ case   34:  		/* cmpwi CR6, R10, -1 */
		/* 820E7D24h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E7D24h case   34:*/		return 0x820E7D28;
		  /* 820E7D28h */ case   35:  		/* bc 4, CR6_EQ, 112 */
		/* 820E7D28h case   35:*/		if ( !regs.CR[6].eq ) { return 0x820E7D98;  }
		/* 820E7D28h case   35:*/		return 0x820E7D2C;
		  /* 820E7D2Ch */ case   36:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7D2Ch case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7D2Ch case   36:*/		return 0x820E7D30;
	}
	return 0x820E7D30;
} // Block from 820E7C9Ch-820E7D30h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820E7D30h
// Function '?MatchBREAK@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7D30);
		  /* 820E7D30h */ case    0:  		/* lwzx R9, <#[R11 + R4]> */
		/* 820E7D30h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820E7D30h case    0:*/		return 0x820E7D34;
		  /* 820E7D34h */ case    1:  		/* lwz R11, <#[R9]> */
		/* 820E7D34h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820E7D34h case    1:*/		return 0x820E7D38;
		  /* 820E7D38h */ case    2:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 820E7D38h case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 820E7D38h case    2:*/		return 0x820E7D3C;
		  /* 820E7D3Ch */ case    3:  		/* cmplw CR6, R10, R14 */
		/* 820E7D3Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R14);
		/* 820E7D3Ch case    3:*/		return 0x820E7D40;
		  /* 820E7D40h */ case    4:  		/* bc 4, CR6_EQ, 88 */
		/* 820E7D40h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E7D98;  }
		/* 820E7D40h case    4:*/		return 0x820E7D44;
		  /* 820E7D44h */ case    5:  		/* rlwinm. R5, R11, 0, 12, 31 */
		/* 820E7D44h case    5:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R5,regs.R11);
		/* 820E7D44h case    5:*/		return 0x820E7D48;
		  /* 820E7D48h */ case    6:  		/* mr R10, R18 */
		/* 820E7D48h case    6:*/		regs.R10 = regs.R18;
		/* 820E7D48h case    6:*/		return 0x820E7D4C;
		  /* 820E7D4Ch */ case    7:  		/* bc 12, CR0_EQ, 76 */
		/* 820E7D4Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x820E7D98;  }
		/* 820E7D4Ch case    7:*/		return 0x820E7D50;
		  /* 820E7D50h */ case    8:  		/* lwz R6, <#[R9 + 16]> */
		/* 820E7D50h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000010) );
		/* 820E7D50h case    8:*/		return 0x820E7D54;
		  /* 820E7D54h */ case    9:  		/* mr R11, R18 */
		/* 820E7D54h case    9:*/		regs.R11 = regs.R18;
		/* 820E7D54h case    9:*/		return 0x820E7D58;
		  /* 820E7D58h */ case   10:  		/* lwzx R31, <#[R6 + R11]> */
		/* 820E7D58h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 820E7D58h case   10:*/		return 0x820E7D5C;
		  /* 820E7D5Ch */ case   11:  		/* cmplw CR6, R31, R7 */
		/* 820E7D5Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R7);
		/* 820E7D5Ch case   11:*/		return 0x820E7D60;
		  /* 820E7D60h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 820E7D60h case   12:*/		if ( regs.CR[6].eq ) { return 0x820E7D78;  }
		/* 820E7D60h case   12:*/		return 0x820E7D64;
		  /* 820E7D64h */ case   13:  		/* addi R10, R10, 1 */
		/* 820E7D64h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E7D64h case   13:*/		return 0x820E7D68;
		  /* 820E7D68h */ case   14:  		/* addi R11, R11, 4 */
		/* 820E7D68h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E7D68h case   14:*/		return 0x820E7D6C;
		  /* 820E7D6Ch */ case   15:  		/* cmplw CR6, R10, R5 */
		/* 820E7D6Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 820E7D6Ch case   15:*/		return 0x820E7D70;
		  /* 820E7D70h */ case   16:  		/* bc 12, CR6_LT, -24 */
		/* 820E7D70h case   16:*/		if ( regs.CR[6].lt ) { return 0x820E7D58;  }
		/* 820E7D70h case   16:*/		return 0x820E7D74;
		  /* 820E7D74h */ case   17:  		/* b 36 */
		/* 820E7D74h case   17:*/		return 0x820E7D98;
		/* 820E7D74h case   17:*/		return 0x820E7D78;
	}
	return 0x820E7D78;
} // Block from 820E7D30h-820E7D78h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E7D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7D78);
		  /* 820E7D78h */ case    0:  		/* lwz R11, <#[R9 + 8]> */
		/* 820E7D78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 820E7D78h case    0:*/		return 0x820E7D7C;
		  /* 820E7D7Ch */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7D7Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7D7Ch case    1:*/		return 0x820E7D80;
		  /* 820E7D80h */ case    2:  		/* lwzx R7, <#[R10 + R11]> */
		/* 820E7D80h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7D80h case    2:*/		return 0x820E7D84;
		  /* 820E7D84h */ case    3:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 820E7D84h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 820E7D84h case    3:*/		return 0x820E7D88;
		  /* 820E7D88h */ case    4:  		/* lwzx R8, <#[R11 + R30]> */
		/* 820E7D88h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E7D88h case    4:*/		return 0x820E7D8C;
	}
	return 0x820E7D8C;
} // Block from 820E7D78h-820E7D8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E7D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7D8C);
		  /* 820E7D8Ch */ case    0:  		/* lwz R11, <#[R8 + 72]> */
		/* 820E7D8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000048) );
		/* 820E7D8Ch case    0:*/		return 0x820E7D90;
		  /* 820E7D90h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 820E7D90h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7D90h case    1:*/		return 0x820E7D94;
		  /* 820E7D94h */ case    2:  		/* bc 4, CR6_EQ, -116 */
		/* 820E7D94h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E7D20;  }
		/* 820E7D94h case    2:*/		return 0x820E7D98;
	}
	return 0x820E7D98;
} // Block from 820E7D8Ch-820E7D98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E7D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7D98);
		  /* 820E7D98h */ case    0:  		/* lwz R10, <#[R3 + 4]> */
		/* 820E7D98h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 820E7D98h case    0:*/		return 0x820E7D9C;
		  /* 820E7D9Ch */ case    1:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E7D9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E7D9Ch case    1:*/		return 0x820E7DA0;
		  /* 820E7DA0h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7DA0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7DA0h case    2:*/		return 0x820E7DA4;
		  /* 820E7DA4h */ case    3:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E7DA4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7DA4h case    3:*/		return 0x820E7DA8;
		  /* 820E7DA8h */ case    4:  		/* lwz R10, <#[R10 + 4]> */
		/* 820E7DA8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820E7DA8h case    4:*/		return 0x820E7DAC;
		  /* 820E7DACh */ case    5:  		/* rlwinm. R10, R10, 0, 23, 23 */
		/* 820E7DACh case    5:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R10);
		/* 820E7DACh case    5:*/		return 0x820E7DB0;
		  /* 820E7DB0h */ case    6:  		/* bc 12, CR0_EQ, 684 */
		/* 820E7DB0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E805C;  }
		/* 820E7DB0h case    6:*/		return 0x820E7DB4;
		  /* 820E7DB4h */ case    7:  		/* lwz R10, <#[R8 + 4]> */
		/* 820E7DB4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 820E7DB4h case    7:*/		return 0x820E7DB8;
		  /* 820E7DB8h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7DB8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7DB8h case    8:*/		return 0x820E7DBC;
		  /* 820E7DBCh */ case    9:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E7DBCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7DBCh case    9:*/		return 0x820E7DC0;
		  /* 820E7DC0h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E7DC0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E7DC0h case   10:*/		return 0x820E7DC4;
		  /* 820E7DC4h */ case   11:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 820E7DC4h case   11:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 820E7DC4h case   11:*/		return 0x820E7DC8;
		  /* 820E7DC8h */ case   12:  		/* bc 12, CR0_EQ, 660 */
		/* 820E7DC8h case   12:*/		if ( regs.CR[0].eq ) { return 0x820E805C;  }
		/* 820E7DC8h case   12:*/		return 0x820E7DCC;
		  /* 820E7DCCh */ case   13:  		/* lfd FR0, <#[R3 + 32]> */
		/* 820E7DCCh case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R3 + 0x00000020) );
		/* 820E7DCCh case   13:*/		return 0x820E7DD0;
		  /* 820E7DD0h */ case   14:  		/* fcmpu CR6, FR0, FR30 */
		/* 820E7DD0h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR30);
		/* 820E7DD0h case   14:*/		return 0x820E7DD4;
		  /* 820E7DD4h */ case   15:  		/* bc 4, CR6_EQ, 648 */
		/* 820E7DD4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7DD4h case   15:*/		return 0x820E7DD8;
		  /* 820E7DD8h */ case   16:  		/* lfd FR0, <#[R8 + 32]> */
		/* 820E7DD8h case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R8 + 0x00000020) );
		/* 820E7DD8h case   16:*/		return 0x820E7DDC;
		  /* 820E7DDCh */ case   17:  		/* fcmpu CR6, FR0, FR31 */
		/* 820E7DDCh case   17:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820E7DDCh case   17:*/		return 0x820E7DE0;
		  /* 820E7DE0h */ case   18:  		/* bc 4, CR6_EQ, 636 */
		/* 820E7DE0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7DE0h case   18:*/		return 0x820E7DE4;
		  /* 820E7DE4h */ case   19:  		/* rlwinm R11, R21, 2, 0, 29 */
		/* 820E7DE4h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R21);
		/* 820E7DE4h case   19:*/		return 0x820E7DE8;
		  /* 820E7DE8h */ case   20:  		/* mr R3, R20 */
		/* 820E7DE8h case   20:*/		regs.R3 = regs.R20;
		/* 820E7DE8h case   20:*/		return 0x820E7DEC;
		  /* 820E7DECh */ case   21:  		/* lwzx R25, <#[R11 + R30]> */
		/* 820E7DECh case   21:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E7DECh case   21:*/		return 0x820E7DF0;
		  /* 820E7DF0h */ case   22:  		/* lwz R27, <#[R25 + 84]> */
		/* 820E7DF0h case   22:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + 0x00000054) );
		/* 820E7DF0h case   22:*/		return 0x820E7DF4;
		  /* 820E7DF4h */ case   23:  		/* lwz R11, <#[R25 + 88]> */
		/* 820E7DF4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000058) );
		/* 820E7DF4h case   23:*/		return 0x820E7DF8;
		  /* 820E7DF8h */ case   24:  		/* cmplw CR6, R27, R11 */
		/* 820E7DF8h case   24:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 820E7DF8h case   24:*/		return 0x820E7DFC;
		  /* 820E7DFCh */ case   25:  		/* bc 12, CR6_GT, 608 */
		/* 820E7DFCh case   25:*/		if ( regs.CR[6].gt ) { return 0x820E805C;  }
		/* 820E7DFCh case   25:*/		return 0x820E7E00;
		  /* 820E7E00h */ case   26:  		/* rlwinm R24, R27, 2, 0, 29 */
		/* 820E7E00h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R27);
		/* 820E7E00h case   26:*/		return 0x820E7E04;
		  /* 820E7E04h */ case   27:  		/* lwz R11, <#[R29 + 24]> */
		/* 820E7E04h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 820E7E04h case   27:*/		return 0x820E7E08;
		  /* 820E7E08h */ case   28:  		/* lwzx R30, <#[R11 + R24]> */
		/* 820E7E08h case   28:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 820E7E08h case   28:*/		return 0x820E7E0C;
		  /* 820E7E0Ch */ case   29:  		/* lwz R11, <#[R30 + 12]> */
		/* 820E7E0Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820E7E0Ch case   29:*/		return 0x820E7E10;
		  /* 820E7E10h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 820E7E10h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E7E10h case   30:*/		return 0x820E7E14;
		  /* 820E7E14h */ case   31:  		/* bc 12, CR6_EQ, 304 */
		/* 820E7E14h case   31:*/		if ( regs.CR[6].eq ) { return 0x820E7F44;  }
		/* 820E7E14h case   31:*/		return 0x820E7E18;
		  /* 820E7E18h */ case   32:  		/* lwz R11, <#[R30 + 4]> */
		/* 820E7E18h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820E7E18h case   32:*/		return 0x820E7E1C;
		  /* 820E7E1Ch */ case   33:  		/* mr R26, R18 */
		/* 820E7E1Ch case   33:*/		regs.R26 = regs.R18;
		/* 820E7E1Ch case   33:*/		return 0x820E7E20;
		  /* 820E7E20h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 820E7E20h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E7E20h case   34:*/		return 0x820E7E24;
		  /* 820E7E24h */ case   35:  		/* bc 4, CR6_GT, 288 */
		/* 820E7E24h case   35:*/		if ( !regs.CR[6].gt ) { return 0x820E7F44;  }
		/* 820E7E24h case   35:*/		return 0x820E7E28;
		  /* 820E7E28h */ case   36:  		/* mr R28, R18 */
		/* 820E7E28h case   36:*/		regs.R28 = regs.R18;
		/* 820E7E28h case   36:*/		return 0x820E7E2C;
		  /* 820E7E2Ch */ case   37:  		/* lwz R10, <#[R30 + 8]> */
		/* 820E7E2Ch case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820E7E2Ch case   37:*/		return 0x820E7E30;
		  /* 820E7E30h */ case   38:  		/* mr R5, R20 */
		/* 820E7E30h case   38:*/		regs.R5 = regs.R20;
		/* 820E7E30h case   38:*/		return 0x820E7E34;
		  /* 820E7E34h */ case   39:  		/* lwz R11, <#[R29 + 20]> */
		/* 820E7E34h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 820E7E34h case   39:*/		return 0x820E7E38;
		  /* 820E7E38h */ case   40:  		/* lwzx R10, <#[R10 + R28]> */
		/* 820E7E38h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R28 + 0x00000000) );
		/* 820E7E38h case   40:*/		return 0x820E7E3C;
		  /* 820E7E3Ch */ case   41:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7E3Ch case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7E3Ch case   41:*/		return 0x820E7E40;
		  /* 820E7E40h */ case   42:  		/* lwzx R31, <#[R10 + R11]> */
		/* 820E7E40h case   42:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7E40h case   42:*/		return 0x820E7E44;
		  /* 820E7E44h */ case   43:  		/* lwz R9, <#[R31 + 8]> */
		/* 820E7E44h case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820E7E44h case   43:*/		return 0x820E7E48;
		  /* 820E7E48h */ case   44:  		/* cmpwi CR6, R9, -1 */
		/* 820E7E48h case   44:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E7E48h case   44:*/		return 0x820E7E4C;
		  /* 820E7E4Ch */ case   45:  		/* bc 12, CR6_EQ, 124 */
		/* 820E7E4Ch case   45:*/		if ( regs.CR[6].eq ) { return 0x820E7EC8;  }
		/* 820E7E4Ch case   45:*/		return 0x820E7E50;
		  /* 820E7E50h */ case   46:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 820E7E50h case   46:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 820E7E50h case   46:*/		return 0x820E7E54;
		  /* 820E7E54h */ case   47:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E7E54h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7E54h case   47:*/		return 0x820E7E58;
		  /* 820E7E58h */ case   48:  		/* lwz R11, <#[R11 + 72]> */
		/* 820E7E58h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 820E7E58h case   48:*/		return 0x820E7E5C;
		  /* 820E7E5Ch */ case   49:  		/* cmpwi CR6, R11, -1 */
		/* 820E7E5Ch case   49:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7E5Ch case   49:*/		return 0x820E7E60;
		  /* 820E7E60h */ case   50:  		/* bc 12, CR6_EQ, 204 */
		/* 820E7E60h case   50:*/		if ( regs.CR[6].eq ) { return 0x820E7F2C;  }
		/* 820E7E60h case   50:*/		return 0x820E7E64;
		  /* 820E7E64h */ case   51:  		/* lwz R10, <#[R29 + 24]> */
		/* 820E7E64h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000018) );
		/* 820E7E64h case   51:*/		return 0x820E7E68;
		  /* 820E7E68h */ case   52:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7E68h case   52:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7E68h case   52:*/		return 0x820E7E6C;
		  /* 820E7E6Ch */ case   53:  		/* lwzx R8, <#[R11 + R10]> */
		/* 820E7E6Ch case   53:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E7E6Ch case   53:*/		return 0x820E7E70;
		  /* 820E7E70h */ case   54:  		/* lwz R11, <#[R8]> */
		/* 820E7E70h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E7E70h case   54:*/		return 0x820E7E74;
		  /* 820E7E74h */ case   55:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 820E7E74h case   55:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 820E7E74h case   55:*/		return 0x820E7E78;
		  /* 820E7E78h */ case   56:  		/* cmplw CR6, R10, R14 */
		/* 820E7E78h case   56:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R14);
		/* 820E7E78h case   56:*/		return 0x820E7E7C;
		  /* 820E7E7Ch */ case   57:  		/* bc 4, CR6_EQ, 72 */
		/* 820E7E7Ch case   57:*/		if ( !regs.CR[6].eq ) { return 0x820E7EC4;  }
		/* 820E7E7Ch case   57:*/		return 0x820E7E80;
		  /* 820E7E80h */ case   58:  		/* rlwinm. R6, R11, 0, 12, 31 */
		/* 820E7E80h case   58:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R6,regs.R11);
		/* 820E7E80h case   58:*/		return 0x820E7E84;
		  /* 820E7E84h */ case   59:  		/* mr R10, R18 */
		/* 820E7E84h case   59:*/		regs.R10 = regs.R18;
		/* 820E7E84h case   59:*/		return 0x820E7E88;
		  /* 820E7E88h */ case   60:  		/* bc 12, CR0_EQ, 64 */
		/* 820E7E88h case   60:*/		if ( regs.CR[0].eq ) { return 0x820E7EC8;  }
		/* 820E7E88h case   60:*/		return 0x820E7E8C;
		  /* 820E7E8Ch */ case   61:  		/* lwz R7, <#[R8 + 16]> */
		/* 820E7E8Ch case   61:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000010) );
		/* 820E7E8Ch case   61:*/		return 0x820E7E90;
		  /* 820E7E90h */ case   62:  		/* mr R11, R18 */
		/* 820E7E90h case   62:*/		regs.R11 = regs.R18;
		/* 820E7E90h case   62:*/		return 0x820E7E94;
		  /* 820E7E94h */ case   63:  		/* lwzx R4, <#[R7 + R11]> */
		/* 820E7E94h case   63:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820E7E94h case   63:*/		return 0x820E7E98;
		  /* 820E7E98h */ case   64:  		/* cmplw CR6, R4, R9 */
		/* 820E7E98h case   64:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 820E7E98h case   64:*/		return 0x820E7E9C;
		  /* 820E7E9Ch */ case   65:  		/* bc 12, CR6_EQ, 24 */
		/* 820E7E9Ch case   65:*/		if ( regs.CR[6].eq ) { return 0x820E7EB4;  }
		/* 820E7E9Ch case   65:*/		return 0x820E7EA0;
		  /* 820E7EA0h */ case   66:  		/* addi R10, R10, 1 */
		/* 820E7EA0h case   66:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E7EA0h case   66:*/		return 0x820E7EA4;
		  /* 820E7EA4h */ case   67:  		/* addi R11, R11, 4 */
		/* 820E7EA4h case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E7EA4h case   67:*/		return 0x820E7EA8;
		  /* 820E7EA8h */ case   68:  		/* cmplw CR6, R10, R6 */
		/* 820E7EA8h case   68:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 820E7EA8h case   68:*/		return 0x820E7EAC;
		  /* 820E7EACh */ case   69:  		/* bc 12, CR6_LT, -24 */
		/* 820E7EACh case   69:*/		if ( regs.CR[6].lt ) { return 0x820E7E94;  }
		/* 820E7EACh case   69:*/		return 0x820E7EB0;
		  /* 820E7EB0h */ case   70:  		/* b 24 */
		/* 820E7EB0h case   70:*/		return 0x820E7EC8;
		/* 820E7EB0h case   70:*/		return 0x820E7EB4;
	}
	return 0x820E7EB4;
} // Block from 820E7D98h-820E7EB4h (71 instructions)

//////////////////////////////////////////////////////
// Block at 820E7EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7EB4);
		  /* 820E7EB4h */ case    0:  		/* lwz R11, <#[R8 + 8]> */
		/* 820E7EB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 820E7EB4h case    0:*/		return 0x820E7EB8;
		  /* 820E7EB8h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7EB8h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7EB8h case    1:*/		return 0x820E7EBC;
		  /* 820E7EBCh */ case    2:  		/* lwzx R5, <#[R10 + R11]> */
		/* 820E7EBCh case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7EBCh case    2:*/		return 0x820E7EC0;
		  /* 820E7EC0h */ case    3:  		/* b 8 */
		/* 820E7EC0h case    3:*/		return 0x820E7EC8;
		/* 820E7EC0h case    3:*/		return 0x820E7EC4;
	}
	return 0x820E7EC4;
} // Block from 820E7EB4h-820E7EC4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E7EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7EC4);
		  /* 820E7EC4h */ case    0:  		/* mr R5, R9 */
		/* 820E7EC4h case    0:*/		regs.R5 = regs.R9;
		/* 820E7EC4h case    0:*/		return 0x820E7EC8;
	}
	return 0x820E7EC8;
} // Block from 820E7EC4h-820E7EC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E7EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7EC8);
		  /* 820E7EC8h */ case    0:  		/* cmplw CR6, R5, R21 */
		/* 820E7EC8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R21);
		/* 820E7EC8h case    0:*/		return 0x820E7ECC;
		  /* 820E7ECCh */ case    1:  		/* bc 4, CR6_EQ, 96 */
		/* 820E7ECCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E7F2C;  }
		/* 820E7ECCh case    1:*/		return 0x820E7ED0;
		  /* 820E7ED0h */ case    2:  		/* cmpwi CR6, R3, -1 */
		/* 820E7ED0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E7ED0h case    2:*/		return 0x820E7ED4;
		  /* 820E7ED4h */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 820E7ED4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E7F0C;  }
		/* 820E7ED4h case    3:*/		return 0x820E7ED8;
		  /* 820E7ED8h */ case    4:  		/* li R7, 4 */
		/* 820E7ED8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 820E7ED8h case    4:*/		return 0x820E7EDC;
		  /* 820E7EDCh */ case    5:  		/* lwz R4, <#[R1 + 104]> */
		/* 820E7EDCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000068) );
		/* 820E7EDCh case    5:*/		return 0x820E7EE0;
		  /* 820E7EE0h */ case    6:  		/* mr R6, R20 */
		/* 820E7EE0h case    6:*/		regs.R6 = regs.R20;
		/* 820E7EE0h case    6:*/		return 0x820E7EE4;
		  /* 820E7EE4h */ case    7:  		/* li R5, 21 */
		/* 820E7EE4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x15);
		/* 820E7EE4h case    7:*/		return 0x820E7EE8;
		  /* 820E7EE8h */ case    8:  		/* mr R3, R29 */
		/* 820E7EE8h case    8:*/		regs.R3 = regs.R29;
		/* 820E7EE8h case    8:*/		return 0x820E7EEC;
		  /* 820E7EECh */ case    9:  		/* bl 86684 */
		/* 820E7EECh case    9:*/		regs.LR = 0x820E7EF0; return 0x820FD188;
		/* 820E7EECh case    9:*/		return 0x820E7EF0;
		  /* 820E7EF0h */ case   10:  		/* mr R4, R3 */
		/* 820E7EF0h case   10:*/		regs.R4 = regs.R3;
		/* 820E7EF0h case   10:*/		return 0x820E7EF4;
		  /* 820E7EF4h */ case   11:  		/* li R6, 0 */
		/* 820E7EF4h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E7EF4h case   11:*/		return 0x820E7EF8;
		  /* 820E7EF8h */ case   12:  		/* fmr FR1, FR31 */
		/* 820E7EF8h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E7EF8h case   12:*/		return 0x820E7EFC;
		  /* 820E7EFCh */ case   13:  		/* li R5, 0 */
		/* 820E7EFCh case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E7EFCh case   13:*/		return 0x820E7F00;
		  /* 820E7F00h */ case   14:  		/* mr R3, R29 */
		/* 820E7F00h case   14:*/		regs.R3 = regs.R29;
		/* 820E7F00h case   14:*/		return 0x820E7F04;
		  /* 820E7F04h */ case   15:  		/* bl 86820 */
		/* 820E7F04h case   15:*/		regs.LR = 0x820E7F08; return 0x820FD228;
		/* 820E7F04h case   15:*/		return 0x820E7F08;
		  /* 820E7F08h */ case   16:  		/* stw R3, <#[R31 + 8]> */
		/* 820E7F08h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E7F08h case   16:*/		return 0x820E7F0C;
	}
	return 0x820E7F0C;
} // Block from 820E7EC8h-820E7F0Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 820E7F0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7F0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7F0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7F0C);
		  /* 820E7F0Ch */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 820E7F0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 820E7F0Ch case    0:*/		return 0x820E7F10;
		  /* 820E7F10h */ case    1:  		/* stw R3, <#[R31 + 8]> */
		/* 820E7F10h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820E7F10h case    1:*/		return 0x820E7F14;
		  /* 820E7F14h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 820E7F14h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E7F14h case    2:*/		return 0x820E7F18;
		  /* 820E7F18h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 820E7F18h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E7F2C;  }
		/* 820E7F18h case    3:*/		return 0x820E7F1C;
		  /* 820E7F1Ch */ case    4:  		/* lwz R10, <#[R29 + 20]> */
		/* 820E7F1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000014) );
		/* 820E7F1Ch case    4:*/		return 0x820E7F20;
		  /* 820E7F20h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E7F20h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E7F20h case    5:*/		return 0x820E7F24;
		  /* 820E7F24h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E7F24h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E7F24h case    6:*/		return 0x820E7F28;
		  /* 820E7F28h */ case    7:  		/* stw R3, <#[R11 + 8]> */
		/* 820E7F28h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820E7F28h case    7:*/		return 0x820E7F2C;
	}
	return 0x820E7F2C;
} // Block from 820E7F0Ch-820E7F2Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E7F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7F2C);
		  /* 820E7F2Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 820E7F2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820E7F2Ch case    0:*/		return 0x820E7F30;
		  /* 820E7F30h */ case    1:  		/* addi R26, R26, 1 */
		/* 820E7F30h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 820E7F30h case    1:*/		return 0x820E7F34;
		  /* 820E7F34h */ case    2:  		/* addi R28, R28, 4 */
		/* 820E7F34h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 820E7F34h case    2:*/		return 0x820E7F38;
		  /* 820E7F38h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 820E7F38h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820E7F38h case    3:*/		return 0x820E7F3C;
		  /* 820E7F3Ch */ case    4:  		/* bc 12, CR6_LT, -272 */
		/* 820E7F3Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x820E7E2C;  }
		/* 820E7F3Ch case    4:*/		return 0x820E7F40;
		  /* 820E7F40h */ case    5:  		/* lwz R28, <#[R1 + 108]> */
		/* 820E7F40h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000006C) );
		/* 820E7F40h case    5:*/		return 0x820E7F44;
	}
	return 0x820E7F44;
} // Block from 820E7F2Ch-820E7F44h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E7F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7F44);
		  /* 820E7F44h */ case    0:  		/* lwz R11, <#[R25 + 88]> */
		/* 820E7F44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000058) );
		/* 820E7F44h case    0:*/		return 0x820E7F48;
		  /* 820E7F48h */ case    1:  		/* addi R27, R27, 1 */
		/* 820E7F48h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820E7F48h case    1:*/		return 0x820E7F4C;
		  /* 820E7F4Ch */ case    2:  		/* addi R24, R24, 4 */
		/* 820E7F4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 820E7F4Ch case    2:*/		return 0x820E7F50;
		  /* 820E7F50h */ case    3:  		/* cmplw CR6, R27, R11 */
		/* 820E7F50h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 820E7F50h case    3:*/		return 0x820E7F54;
		  /* 820E7F54h */ case    4:  		/* bc 4, CR6_GT, -336 */
		/* 820E7F54h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820E7E04;  }
		/* 820E7F54h case    4:*/		return 0x820E7F58;
		  /* 820E7F58h */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 820E7F58h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E7F58h case    5:*/		return 0x820E7F5C;
		  /* 820E7F5Ch */ case    6:  		/* bc 12, CR6_EQ, 256 */
		/* 820E7F5Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x820E805C;  }
		/* 820E7F5Ch case    6:*/		return 0x820E7F60;
		  /* 820E7F60h */ case    7:  		/* li R3, 116 */
		/* 820E7F60h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E7F60h case    7:*/		return 0x820E7F64;
		  /* 820E7F64h */ case    8:  		/* bl 83508 */
		/* 820E7F64h case    8:*/		regs.LR = 0x820E7F68; return 0x820FC598;
		/* 820E7F64h case    8:*/		return 0x820E7F68;
		  /* 820E7F68h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 820E7F68h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E7F68h case    9:*/		return 0x820E7F6C;
		  /* 820E7F6Ch */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 820E7F6Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x820E7F7C;  }
		/* 820E7F6Ch case   10:*/		return 0x820E7F70;
		  /* 820E7F70h */ case   11:  		/* bl 81712 */
		/* 820E7F70h case   11:*/		regs.LR = 0x820E7F74; return 0x820FBEA0;
		/* 820E7F70h case   11:*/		return 0x820E7F74;
		  /* 820E7F74h */ case   12:  		/* mr R31, R3 */
		/* 820E7F74h case   12:*/		regs.R31 = regs.R3;
		/* 820E7F74h case   12:*/		return 0x820E7F78;
		  /* 820E7F78h */ case   13:  		/* b 8 */
		/* 820E7F78h case   13:*/		return 0x820E7F80;
		/* 820E7F78h case   13:*/		return 0x820E7F7C;
	}
	return 0x820E7F7C;
} // Block from 820E7F44h-820E7F7Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E7F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7F7C);
		  /* 820E7F7Ch */ case    0:  		/* mr R31, R18 */
		/* 820E7F7Ch case    0:*/		regs.R31 = regs.R18;
		/* 820E7F7Ch case    0:*/		return 0x820E7F80;
	}
	return 0x820E7F80;
} // Block from 820E7F7Ch-820E7F80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E7F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E7F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E7F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E7F80);
		  /* 820E7F80h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E7F80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E7F80h case    0:*/		return 0x820E7F84;
		  /* 820E7F84h */ case    1:  		/* bc 12, CR6_EQ, -1196 */
		/* 820E7F84h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E7AD8;  }
		/* 820E7F84h case    1:*/		return 0x820E7F88;
		  /* 820E7F88h */ case    2:  		/* lis R4, 29712 */
		/* 820E7F88h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x7410);
		/* 820E7F88h case    2:*/		return 0x820E7F8C;
		  /* 820E7F8Ch */ case    3:  		/* li R7, 0 */
		/* 820E7F8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E7F8Ch case    3:*/		return 0x820E7F90;
		  /* 820E7F90h */ case    4:  		/* li R6, 1 */
		/* 820E7F90h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E7F90h case    4:*/		return 0x820E7F94;
		  /* 820E7F94h */ case    5:  		/* li R5, 3 */
		/* 820E7F94h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820E7F94h case    5:*/		return 0x820E7F98;
		  /* 820E7F98h */ case    6:  		/* ori R4, R4, 1 */
		/* 820E7F98h case    6:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E7F98h case    6:*/		return 0x820E7F9C;
		  /* 820E7F9Ch */ case    7:  		/* mr R3, R31 */
		/* 820E7F9Ch case    7:*/		regs.R3 = regs.R31;
		/* 820E7F9Ch case    7:*/		return 0x820E7FA0;
		  /* 820E7FA0h */ case    8:  		/* bl 83600 */
		/* 820E7FA0h case    8:*/		regs.LR = 0x820E7FA4; return 0x820FC630;
		/* 820E7FA0h case    8:*/		return 0x820E7FA4;
		  /* 820E7FA4h */ case    9:  		/* or. R30, R3, R3 */
		/* 820E7FA4h case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E7FA4h case    9:*/		return 0x820E7FA8;
		  /* 820E7FA8h */ case   10:  		/* mr R3, R31 */
		/* 820E7FA8h case   10:*/		regs.R3 = regs.R31;
		/* 820E7FA8h case   10:*/		return 0x820E7FAC;
		  /* 820E7FACh */ case   11:  		/* bc 12, CR0_LT, 224 */
		/* 820E7FACh case   11:*/		if ( regs.CR[0].lt ) { return 0x820E808C;  }
		/* 820E7FACh case   11:*/		return 0x820E7FB0;
		  /* 820E7FB0h */ case   12:  		/* mr R4, R22 */
		/* 820E7FB0h case   12:*/		regs.R4 = regs.R22;
		/* 820E7FB0h case   12:*/		return 0x820E7FB4;
		  /* 820E7FB4h */ case   13:  		/* bl 81724 */
		/* 820E7FB4h case   13:*/		regs.LR = 0x820E7FB8; return 0x820FBEF0;
		/* 820E7FB4h case   13:*/		return 0x820E7FB8;
		  /* 820E7FB8h */ case   14:  		/* or. R30, R3, R3 */
		/* 820E7FB8h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820E7FB8h case   14:*/		return 0x820E7FBC;
		  /* 820E7FBCh */ case   15:  		/* bc 12, CR0_LT, 228 */
		/* 820E7FBCh case   15:*/		if ( regs.CR[0].lt ) { return 0x820E80A0;  }
		/* 820E7FBCh case   15:*/		return 0x820E7FC0;
		  /* 820E7FC0h */ case   16:  		/* lwz R11, <#[R22 + 16]> */
		/* 820E7FC0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000010) );
		/* 820E7FC0h case   16:*/		return 0x820E7FC4;
		  /* 820E7FC4h */ case   17:  		/* li R6, 2 */
		/* 820E7FC4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 820E7FC4h case   17:*/		return 0x820E7FC8;
		  /* 820E7FC8h */ case   18:  		/* lwz R10, <#[R31 + 16]> */
		/* 820E7FC8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 820E7FC8h case   18:*/		return 0x820E7FCC;
		  /* 820E7FCCh */ case   19:  		/* mr R3, R29 */
		/* 820E7FCCh case   19:*/		regs.R3 = regs.R29;
		/* 820E7FCCh case   19:*/		return 0x820E7FD0;
		  /* 820E7FD0h */ case   20:  		/* fmr FR1, FR31 */
		/* 820E7FD0h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E7FD0h case   20:*/		return 0x820E7FD4;
		  /* 820E7FD4h */ case   21:  		/* lwz R11, <#[R11]> */
		/* 820E7FD4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E7FD4h case   21:*/		return 0x820E7FD8;
		  /* 820E7FD8h */ case   22:  		/* stw R11, <#[R10]> */
		/* 820E7FD8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7FD8h case   22:*/		return 0x820E7FDC;
		  /* 820E7FDCh */ case   23:  		/* lwz R11, <#[R22 + 8]> */
		/* 820E7FDCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 820E7FDCh case   23:*/		return 0x820E7FE0;
		  /* 820E7FE0h */ case   24:  		/* lwz R10, <#[R31 + 8]> */
		/* 820E7FE0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820E7FE0h case   24:*/		return 0x820E7FE4;
		  /* 820E7FE4h */ case   25:  		/* lwz R11, <#[R11]> */
		/* 820E7FE4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E7FE4h case   25:*/		return 0x820E7FE8;
		  /* 820E7FE8h */ case   26:  		/* stw R11, <#[R10]> */
		/* 820E7FE8h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7FE8h case   26:*/		return 0x820E7FEC;
		  /* 820E7FECh */ case   27:  		/* lwz R10, <#[R22 + 8]> */
		/* 820E7FECh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000008) );
		/* 820E7FECh case   27:*/		return 0x820E7FF0;
		  /* 820E7FF0h */ case   28:  		/* lwz R11, <#[R29 + 20]> */
		/* 820E7FF0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 820E7FF0h case   28:*/		return 0x820E7FF4;
		  /* 820E7FF4h */ case   29:  		/* lwz R10, <#[R10]> */
		/* 820E7FF4h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E7FF4h case   29:*/		return 0x820E7FF8;
		  /* 820E7FF8h */ case   30:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E7FF8h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E7FF8h case   30:*/		return 0x820E7FFC;
		  /* 820E7FFCh */ case   31:  		/* lwzx R30, <#[R10 + R11]> */
		/* 820E7FFCh case   31:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E7FFCh case   31:*/		return 0x820E8000;
		  /* 820E8000h */ case   32:  		/* lwz R5, <#[R30 + 12]> */
		/* 820E8000h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 820E8000h case   32:*/		return 0x820E8004;
		  /* 820E8004h */ case   33:  		/* lwz R4, <#[R30 + 4]> */
		/* 820E8004h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 820E8004h case   33:*/		return 0x820E8008;
		  /* 820E8008h */ case   34:  		/* bl 86560 */
		/* 820E8008h case   34:*/		regs.LR = 0x820E800C; return 0x820FD228;
		/* 820E8008h case   34:*/		return 0x820E800C;
		  /* 820E800Ch */ case   35:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E800Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E800Ch case   35:*/		return 0x820E8010;
		  /* 820E8010h */ case   36:  		/* li R6, 2 */
		/* 820E8010h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 820E8010h case   36:*/		return 0x820E8014;
		  /* 820E8014h */ case   37:  		/* fmr FR1, FR30 */
		/* 820E8014h case   37:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 820E8014h case   37:*/		return 0x820E8018;
		  /* 820E8018h */ case   38:  		/* stw R3, <#[R11 + 4]> */
		/* 820E8018h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 820E8018h case   38:*/		return 0x820E801C;
		  /* 820E801Ch */ case   39:  		/* mr R3, R29 */
		/* 820E801Ch case   39:*/		regs.R3 = regs.R29;
		/* 820E801Ch case   39:*/		return 0x820E8020;
		  /* 820E8020h */ case   40:  		/* lwz R5, <#[R30 + 12]> */
		/* 820E8020h case   40:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 820E8020h case   40:*/		return 0x820E8024;
		  /* 820E8024h */ case   41:  		/* lwz R4, <#[R30 + 4]> */
		/* 820E8024h case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 820E8024h case   41:*/		return 0x820E8028;
		  /* 820E8028h */ case   42:  		/* bl 86528 */
		/* 820E8028h case   42:*/		regs.LR = 0x820E802C; return 0x820FD228;
		/* 820E8028h case   42:*/		return 0x820E802C;
		  /* 820E802Ch */ case   43:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E802Ch case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E802Ch case   43:*/		return 0x820E8030;
		  /* 820E8030h */ case   44:  		/* stw R3, <#[R11 + 8]> */
		/* 820E8030h case   44:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820E8030h case   44:*/		return 0x820E8034;
		  /* 820E8034h */ case   45:  		/* mr R4, R31 */
		/* 820E8034h case   45:*/		regs.R4 = regs.R31;
		/* 820E8034h case   45:*/		return 0x820E8038;
		  /* 820E8038h */ case   46:  		/* mr R3, R22 */
		/* 820E8038h case   46:*/		regs.R3 = regs.R22;
		/* 820E8038h case   46:*/		return 0x820E803C;
		  /* 820E803Ch */ case   47:  		/* bl 84244 */
		/* 820E803Ch case   47:*/		regs.LR = 0x820E8040; return 0x820FC950;
		/* 820E803Ch case   47:*/		return 0x820E8040;
		  /* 820E8040h */ case   48:  		/* mr R30, R3 */
		/* 820E8040h case   48:*/		regs.R30 = regs.R3;
		/* 820E8040h case   48:*/		return 0x820E8044;
		  /* 820E8044h */ case   49:  		/* mr R3, R31 */
		/* 820E8044h case   49:*/		regs.R3 = regs.R31;
		/* 820E8044h case   49:*/		return 0x820E8048;
		  /* 820E8048h */ case   50:  		/* bl 1266552 */
		/* 820E8048h case   50:*/		regs.LR = 0x820E804C; return 0x8221D3C0;
		/* 820E8048h case   50:*/		return 0x820E804C;
		  /* 820E804Ch */ case   51:  		/* mr R3, R31 */
		/* 820E804Ch case   51:*/		regs.R3 = regs.R31;
		/* 820E804Ch case   51:*/		return 0x820E8050;
		  /* 820E8050h */ case   52:  		/* bl 83360 */
		/* 820E8050h case   52:*/		regs.LR = 0x820E8054; return 0x820FC5F0;
		/* 820E8050h case   52:*/		return 0x820E8054;
		  /* 820E8054h */ case   53:  		/* cmpwi CR6, R30, 0 */
		/* 820E8054h case   53:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820E8054h case   53:*/		return 0x820E8058;
		  /* 820E8058h */ case   54:  		/* bc 12, CR6_LT, 64 */
		/* 820E8058h case   54:*/		if ( regs.CR[6].lt ) { return 0x820E8098;  }
		/* 820E8058h case   54:*/		return 0x820E805C;
	}
	return 0x820E805C;
} // Block from 820E7F80h-820E805Ch (55 instructions)

//////////////////////////////////////////////////////
// Block at 820E805Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E805C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E805C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E805C);
		  /* 820E805Ch */ case    0:  		/* lwz R11, <#[R1 + 100]> */
		/* 820E805Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 820E805Ch case    0:*/		return 0x820E8060;
		  /* 820E8060h */ case    1:  		/* addi R16, R16, 4 */
		/* 820E8060h case    1:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R16,0x4);
		/* 820E8060h case    1:*/		return 0x820E8064;
		  /* 820E8064h */ case    2:  		/* addi R15, R15, 4 */
		/* 820E8064h case    2:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R15,0x4);
		/* 820E8064h case    2:*/		return 0x820E8068;
		  /* 820E8068h */ case    3:  		/* addi R11, R11, 1 */
		/* 820E8068h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E8068h case    3:*/		return 0x820E806C;
		  /* 820E806Ch */ case    4:  		/* stw R11, <#[R1 + 100]> */
		/* 820E806Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 820E806Ch case    4:*/		return 0x820E8070;
		  /* 820E8070h */ case    5:  		/* cmplw CR6, R11, R28 */
		/* 820E8070h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 820E8070h case    5:*/		return 0x820E8074;
		  /* 820E8074h */ case    6:  		/* bc 12, CR6_LT, -1292 */
		/* 820E8074h case    6:*/		if ( regs.CR[6].lt ) { return 0x820E7B68;  }
		/* 820E8074h case    6:*/		return 0x820E8078;
	}
	return 0x820E8078;
} // Block from 820E805Ch-820E8078h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E8078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8078);
		  /* 820E8078h */ case    0:  		/* li R3, 0 */
		/* 820E8078h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E8078h case    0:*/		return 0x820E807C;
	}
	return 0x820E807C;
} // Block from 820E8078h-820E807Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E807Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E807C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E807C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E807C);
		  /* 820E807Ch */ case    0:  		/* addi R1, R1, 768 */
		/* 820E807Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x300);
		/* 820E807Ch case    0:*/		return 0x820E8080;
		  /* 820E8080h */ case    1:  		/* lfd FR30, <#[R1 - 168]> */
		/* 820E8080h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820E8080h case    1:*/		return 0x820E8084;
		  /* 820E8084h */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 820E8084h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820E8084h case    2:*/		return 0x820E8088;
		  /* 820E8088h */ case    3:  		/* b -355864 */
		/* 820E8088h case    3:*/		return 0x82091270;
		/* 820E8088h case    3:*/		return 0x820E808C;
	}
	return 0x820E808C;
} // Block from 820E807Ch-820E808Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E808Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E808C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E808C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E808C);
		  /* 820E808Ch */ case    0:  		/* bl 1266484 */
		/* 820E808Ch case    0:*/		regs.LR = 0x820E8090; return 0x8221D3C0;
		/* 820E808Ch case    0:*/		return 0x820E8090;
		  /* 820E8090h */ case    1:  		/* mr R3, R31 */
		/* 820E8090h case    1:*/		regs.R3 = regs.R31;
		/* 820E8090h case    1:*/		return 0x820E8094;
		  /* 820E8094h */ case    2:  		/* bl 83292 */
		/* 820E8094h case    2:*/		regs.LR = 0x820E8098; return 0x820FC5F0;
		/* 820E8094h case    2:*/		return 0x820E8098;
	}
	return 0x820E8098;
} // Block from 820E808Ch-820E8098h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E8098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8098);
		  /* 820E8098h */ case    0:  		/* mr R3, R30 */
		/* 820E8098h case    0:*/		regs.R3 = regs.R30;
		/* 820E8098h case    0:*/		return 0x820E809C;
		  /* 820E809Ch */ case    1:  		/* b -32 */
		/* 820E809Ch case    1:*/		return 0x820E807C;
		/* 820E809Ch case    1:*/		return 0x820E80A0;
	}
	return 0x820E80A0;
} // Block from 820E8098h-820E80A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E80A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E80A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E80A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E80A0);
		  /* 820E80A0h */ case    0:  		/* mr R3, R31 */
		/* 820E80A0h case    0:*/		regs.R3 = regs.R31;
		/* 820E80A0h case    0:*/		return 0x820E80A4;
		  /* 820E80A4h */ case    1:  		/* b -24 */
		/* 820E80A4h case    1:*/		return 0x820E808C;
		/* 820E80A4h case    1:*/		return 0x820E80A8;
	}
	return 0x820E80A8;
} // Block from 820E80A0h-820E80A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E80A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E80A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E80A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E80A8);
		  /* 820E80A8h */ case    0:  		/* mfspr R12, LR */
		/* 820E80A8h case    0:*/		regs.R12 = regs.LR;
		/* 820E80A8h case    0:*/		return 0x820E80AC;
		  /* 820E80ACh */ case    1:  		/* bl -355980 */
		/* 820E80ACh case    1:*/		regs.LR = 0x820E80B0; return 0x82091220;
		/* 820E80ACh case    1:*/		return 0x820E80B0;
		  /* 820E80B0h */ case    2:  		/* stfd FR30, <#[R1 - 168]> */
		/* 820E80B0h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820E80B0h case    2:*/		return 0x820E80B4;
		  /* 820E80B4h */ case    3:  		/* stfd FR31, <#[R1 - 160]> */
		/* 820E80B4h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820E80B4h case    3:*/		return 0x820E80B8;
		  /* 820E80B8h */ case    4:  		/* stwu R1, <#[R1 - 784]> */
		/* 820E80B8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFCF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFCF0);
		/* 820E80B8h case    4:*/		return 0x820E80BC;
		  /* 820E80BCh */ case    5:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E80BCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E80BCh case    5:*/		return 0x820E80C0;
		  /* 820E80C0h */ case    6:  		/* li R14, -1 */
		/* 820E80C0h case    6:*/		cpu::op::li<0>(regs,&regs.R14,0xFFFFFFFF);
		/* 820E80C0h case    6:*/		return 0x820E80C4;
		  /* 820E80C4h */ case    7:  		/* li R27, 0 */
		/* 820E80C4h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E80C4h case    7:*/		return 0x820E80C8;
		  /* 820E80C8h */ case    8:  		/* lis R10, 8336 */
		/* 820E80C8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x2090);
		/* 820E80C8h case    8:*/		return 0x820E80CC;
		  /* 820E80CCh */ case    9:  		/* stw R14, <#[R1 + 116]> */
		/* 820E80CCh case    9:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000074) );
		/* 820E80CCh case    9:*/		return 0x820E80D0;
		  /* 820E80D0h */ case   10:  		/* mr R31, R3 */
		/* 820E80D0h case   10:*/		regs.R31 = regs.R3;
		/* 820E80D0h case   10:*/		return 0x820E80D4;
		  /* 820E80D4h */ case   11:  		/* stw R27, <#[R1 + 112]> */
		/* 820E80D4h case   11:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000070) );
		/* 820E80D4h case   11:*/		return 0x820E80D8;
		  /* 820E80D8h */ case   12:  		/* stw R14, <#[R1 + 120]> */
		/* 820E80D8h case   12:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000078) );
		/* 820E80D8h case   12:*/		return 0x820E80DC;
		  /* 820E80DCh */ case   13:  		/* lwz R11, <#[R11]> */
		/* 820E80DCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E80DCh case   13:*/		return 0x820E80E0;
		  /* 820E80E0h */ case   14:  		/* stw R14, <#[R1 + 124]> */
		/* 820E80E0h case   14:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E80E0h case   14:*/		return 0x820E80E4;
		  /* 820E80E4h */ case   15:  		/* rlwinm R9, R11, 0, 0, 11 */
		/* 820E80E4h case   15:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R11);
		/* 820E80E4h case   15:*/		return 0x820E80E8;
		  /* 820E80E8h */ case   16:  		/* stw R27, <#[R1 + 128]> */
		/* 820E80E8h case   16:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 820E80E8h case   16:*/		return 0x820E80EC;
		  /* 820E80ECh */ case   17:  		/* stw R14, <#[R1 + 132]> */
		/* 820E80ECh case   17:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000084) );
		/* 820E80ECh case   17:*/		return 0x820E80F0;
		  /* 820E80F0h */ case   18:  		/* rlwinm R16, R11, 0, 12, 31 */
		/* 820E80F0h case   18:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R16,regs.R11);
		/* 820E80F0h case   18:*/		return 0x820E80F4;
		  /* 820E80F4h */ case   19:  		/* stw R14, <#[R1 + 136]> */
		/* 820E80F4h case   19:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000088) );
		/* 820E80F4h case   19:*/		return 0x820E80F8;
		  /* 820E80F8h */ case   20:  		/* cmplw CR6, R9, R10 */
		/* 820E80F8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E80F8h case   20:*/		return 0x820E80FC;
		  /* 820E80FCh */ case   21:  		/* stw R14, <#[R1 + 140]> */
		/* 820E80FCh case   21:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x0000008C) );
		/* 820E80FCh case   21:*/		return 0x820E8100;
		  /* 820E8100h */ case   22:  		/* bc 12, CR6_EQ, 12 */
		/* 820E8100h case   22:*/		if ( regs.CR[6].eq ) { return 0x820E810C;  }
		/* 820E8100h case   22:*/		return 0x820E8104;
		  /* 820E8104h */ case   23:  		/* li R3, 1 */
		/* 820E8104h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E8104h case   23:*/		return 0x820E8108;
		  /* 820E8108h */ case   24:  		/* b 2452 */
		/* 820E8108h case   24:*/		return 0x820E8A9C;
		/* 820E8108h case   24:*/		return 0x820E810C;
	}
	return 0x820E810C;
} // Block from 820E80A8h-820E810Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 820E810Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E810C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E810C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E810C);
		  /* 820E810Ch */ case    0:  		/* li R3, 116 */
		/* 820E810Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E810Ch case    0:*/		return 0x820E8110;
		  /* 820E8110h */ case    1:  		/* bl 83080 */
		/* 820E8110h case    1:*/		regs.LR = 0x820E8114; return 0x820FC598;
		/* 820E8110h case    1:*/		return 0x820E8114;
		  /* 820E8114h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E8114h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E8114h case    2:*/		return 0x820E8118;
		  /* 820E8118h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 820E8118h case    3:*/		if ( regs.CR[0].eq ) { return 0x820E8128;  }
		/* 820E8118h case    3:*/		return 0x820E811C;
		  /* 820E811Ch */ case    4:  		/* bl 81284 */
		/* 820E811Ch case    4:*/		regs.LR = 0x820E8120; return 0x820FBEA0;
		/* 820E811Ch case    4:*/		return 0x820E8120;
		  /* 820E8120h */ case    5:  		/* mr R18, R3 */
		/* 820E8120h case    5:*/		regs.R18 = regs.R3;
		/* 820E8120h case    5:*/		return 0x820E8124;
		  /* 820E8124h */ case    6:  		/* b 8 */
		/* 820E8124h case    6:*/		return 0x820E812C;
		/* 820E8124h case    6:*/		return 0x820E8128;
	}
	return 0x820E8128;
} // Block from 820E810Ch-820E8128h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E8128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8128);
		  /* 820E8128h */ case    0:  		/* mr R18, R27 */
		/* 820E8128h case    0:*/		regs.R18 = regs.R27;
		/* 820E8128h case    0:*/		return 0x820E812C;
	}
	return 0x820E812C;
} // Block from 820E8128h-820E812Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E812Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E812C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E812C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E812C);
		  /* 820E812Ch */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 820E812Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820E812Ch case    0:*/		return 0x820E8130;
		  /* 820E8130h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E8130h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E8140;  }
		/* 820E8130h case    1:*/		return 0x820E8134;
		  /* 820E8134h */ case    2:  		/* lis R3, -32761 */
		/* 820E8134h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E8134h case    2:*/		return 0x820E8138;
		  /* 820E8138h */ case    3:  		/* ori R3, R3, 14 */
		/* 820E8138h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E8138h case    3:*/		return 0x820E813C;
		  /* 820E813Ch */ case    4:  		/* b 2400 */
		/* 820E813Ch case    4:*/		return 0x820E8A9C;
		/* 820E813Ch case    4:*/		return 0x820E8140;
	}
	return 0x820E8140;
} // Block from 820E812Ch-820E8140h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E8140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8140);
		  /* 820E8140h */ case    0:  		/* mr R3, R18 */
		/* 820E8140h case    0:*/		regs.R3 = regs.R18;
		/* 820E8140h case    0:*/		return 0x820E8144;
		  /* 820E8144h */ case    1:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E8144h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8144h case    1:*/		return 0x820E8148;
		  /* 820E8148h */ case    2:  		/* bl 83976 */
		/* 820E8148h case    2:*/		regs.LR = 0x820E814C; return 0x820FC950;
		/* 820E8148h case    2:*/		return 0x820E814C;
		  /* 820E814Ch */ case    3:  		/* or. R20, R3, R3 */
		/* 820E814Ch case    3:*/		cpu::op::or<1>(regs,&regs.R20,regs.R3,regs.R3);
		/* 820E814Ch case    3:*/		return 0x820E8150;
		  /* 820E8150h */ case    4:  		/* bc 12, CR0_LT, 2360 */
		/* 820E8150h case    4:*/		if ( regs.CR[0].lt ) { return 0x820E8A88;  }
		/* 820E8150h case    4:*/		return 0x820E8154;
		  /* 820E8154h */ case    5:  		/* lis R11, 8336 */
		/* 820E8154h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0x2090);
		/* 820E8154h case    5:*/		return 0x820E8158;
		  /* 820E8158h */ case    6:  		/* li R19, 1 */
		/* 820E8158h case    6:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 820E8158h case    6:*/		return 0x820E815C;
		  /* 820E815Ch */ case    7:  		/* ori R11, R11, 1 */
		/* 820E815Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E815Ch case    7:*/		return 0x820E8160;
		  /* 820E8160h */ case    8:  		/* li R10, 2 */
		/* 820E8160h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820E8160h case    8:*/		return 0x820E8164;
		  /* 820E8164h */ case    9:  		/* stw R19, <#[R18 + 12]> */
		/* 820E8164h case    9:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R18 + 0x0000000C) );
		/* 820E8164h case    9:*/		return 0x820E8168;
		  /* 820E8168h */ case   10:  		/* mr R17, R27 */
		/* 820E8168h case   10:*/		regs.R17 = regs.R27;
		/* 820E8168h case   10:*/		return 0x820E816C;
		  /* 820E816Ch */ case   11:  		/* stw R11, <#[R18]> */
		/* 820E816Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 820E816Ch case   11:*/		return 0x820E8170;
		  /* 820E8170h */ case   12:  		/* stw R10, <#[R18 + 4]> */
		/* 820E8170h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R18 + 0x00000004) );
		/* 820E8170h case   12:*/		return 0x820E8174;
		  /* 820E8174h */ case   13:  		/* cmplwi CR6, R16, 0 */
		/* 820E8174h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820E8174h case   13:*/		return 0x820E8178;
		  /* 820E8178h */ case   14:  		/* bc 12, CR6_EQ, 2320 */
		/* 820E8178h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E8A88;  }
		/* 820E8178h case   14:*/		return 0x820E817C;
		  /* 820E817Ch */ case   15:  		/* lis R10, -32256 */
		/* 820E817Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820E817Ch case   15:*/		return 0x820E8180;
		  /* 820E8180h */ case   16:  		/* lis R9, -32256 */
		/* 820E8180h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820E8180h case   16:*/		return 0x820E8184;
		  /* 820E8184h */ case   17:  		/* lis R8, 4368 */
		/* 820E8184h case   17:*/		cpu::op::lis<0>(regs,&regs.R8,0x1110);
		/* 820E8184h case   17:*/		return 0x820E8188;
		  /* 820E8188h */ case   18:  		/* lis R11, -32254 */
		/* 820E8188h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E8188h case   18:*/		return 0x820E818C;
		  /* 820E818Ch */ case   19:  		/* mr R24, R27 */
		/* 820E818Ch case   19:*/		regs.R24 = regs.R27;
		/* 820E818Ch case   19:*/		return 0x820E8190;
		  /* 820E8190h */ case   20:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 820E8190h case   20:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 820E8190h case   20:*/		return 0x820E8194;
		  /* 820E8194h */ case   21:  		/* rlwinm R21, R16, 2, 0, 29 */
		/* 820E8194h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R21,regs.R16);
		/* 820E8194h case   21:*/		return 0x820E8198;
		  /* 820E8198h */ case   22:  		/* lfd FR30, <#[R9 + 1848]> */
		/* 820E8198h case   22:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R9 + 0x00000738) );
		/* 820E8198h case   22:*/		return 0x820E819C;
		  /* 820E819Ch */ case   23:  		/* ori R23, R8, 1 */
		/* 820E819Ch case   23:*/		cpu::op::ori<0>(regs,&regs.R23,regs.R8,0x1);
		/* 820E819Ch case   23:*/		return 0x820E81A0;
		  /* 820E81A0h */ case   24:  		/* addi R25, R11, -20904 */
		/* 820E81A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFAE58);
		/* 820E81A0h case   24:*/		return 0x820E81A4;
		  /* 820E81A4h */ case   25:  		/* b 8 */
		/* 820E81A4h case   25:*/		return 0x820E81AC;
		/* 820E81A4h case   25:*/		return 0x820E81A8;
		  /* 820E81A8h */ case   26:  		/* li R27, 0 */
		/* 820E81A8h case   26:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E81A8h case   26:*/		return 0x820E81AC;
	}
	return 0x820E81AC;
} // Block from 820E8140h-820E81ACh (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E81ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E81AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E81AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E81AC);
		  /* 820E81ACh */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E81ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E81ACh case    0:*/		return 0x820E81B0;
		  /* 820E81B0h */ case    1:  		/* li R5, 160 */
		/* 820E81B0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xA0);
		/* 820E81B0h case    1:*/		return 0x820E81B4;
		  /* 820E81B4h */ case    2:  		/* lwz R10, <#[R18 + 16]> */
		/* 820E81B4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000010) );
		/* 820E81B4h case    2:*/		return 0x820E81B8;
		  /* 820E81B8h */ case    3:  		/* li R4, 255 */
		/* 820E81B8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 820E81B8h case    3:*/		return 0x820E81BC;
		  /* 820E81BCh */ case    4:  		/* addi R3, R1, 288 */
		/* 820E81BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 820E81BCh case    4:*/		return 0x820E81C0;
		  /* 820E81C0h */ case    5:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E81C0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E81C0h case    5:*/		return 0x820E81C4;
		  /* 820E81C4h */ case    6:  		/* lwzx R11, <#[R11 + R24]> */
		/* 820E81C4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 820E81C4h case    6:*/		return 0x820E81C8;
		  /* 820E81C8h */ case    7:  		/* stw R11, <#[R10]> */
		/* 820E81C8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E81C8h case    7:*/		return 0x820E81CC;
		  /* 820E81CCh */ case    8:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E81CCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E81CCh case    8:*/		return 0x820E81D0;
		  /* 820E81D0h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E81D0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E81D0h case    9:*/		return 0x820E81D4;
		  /* 820E81D4h */ case   10:  		/* lwzx R11, <#[R11 + R24]> */
		/* 820E81D4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 820E81D4h case   10:*/		return 0x820E81D8;
		  /* 820E81D8h */ case   11:  		/* lwz R10, <#[R18 + 8]> */
		/* 820E81D8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000008) );
		/* 820E81D8h case   11:*/		return 0x820E81DC;
		  /* 820E81DCh */ case   12:  		/* stw R11, <#[R10]> */
		/* 820E81DCh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E81DCh case   12:*/		return 0x820E81E0;
		  /* 820E81E0h */ case   13:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E81E0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E81E0h case   13:*/		return 0x820E81E4;
		  /* 820E81E4h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E81E4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E81E4h case   14:*/		return 0x820E81E8;
	}
	return 0x820E81E8;
} // Block from 820E81ACh-820E81E8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E81E8h
// Function '?FoldIterator@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E81E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E81E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E81E8);
		  /* 820E81E8h */ case    0:  		/* lwz R10, <#[R18 + 8]> */
		/* 820E81E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000008) );
		/* 820E81E8h case    0:*/		return 0x820E81EC;
		  /* 820E81ECh */ case    1:  		/* lwzx R11, <#[R11 + R21]> */
		/* 820E81ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 820E81ECh case    1:*/		return 0x820E81F0;
		  /* 820E81F0h */ case    2:  		/* stw R11, <#[R10 + 4]> */
		/* 820E81F0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820E81F0h case    2:*/		return 0x820E81F4;
		  /* 820E81F4h */ case    3:  		/* bl -356020 */
		/* 820E81F4h case    3:*/		regs.LR = 0x820E81F8; return 0x82091340;
		/* 820E81F4h case    3:*/		return 0x820E81F8;
		  /* 820E81F8h */ case    4:  		/* addi R5, R25, -224 */
		/* 820E81F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0xFFFFFF20);
		/* 820E81F8h case    4:*/		return 0x820E81FC;
		  /* 820E81FCh */ case    5:  		/* stw R27, <#[R1 + 96]> */
		/* 820E81FCh case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 820E81FCh case    5:*/		return 0x820E8200;
		  /* 820E8200h */ case    6:  		/* li R10, 1 */
		/* 820E8200h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E8200h case    6:*/		return 0x820E8204;
		  /* 820E8204h */ case    7:  		/* stw R19, <#[R1 + 84]> */
		/* 820E8204h case    7:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8204h case    7:*/		return 0x820E8208;
		  /* 820E8208h */ case    8:  		/* addi R9, R1, 112 */
		/* 820E8208h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8208h case    8:*/		return 0x820E820C;
		  /* 820E820Ch */ case    9:  		/* addi R8, R1, 288 */
		/* 820E820Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x120);
		/* 820E820Ch case    9:*/		return 0x820E8210;
		  /* 820E8210h */ case   10:  		/* addi R7, R1, 96 */
		/* 820E8210h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8210h case   10:*/		return 0x820E8214;
		  /* 820E8214h */ case   11:  		/* addi R6, R1, 160 */
		/* 820E8214h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E8214h case   11:*/		return 0x820E8218;
		  /* 820E8218h */ case   12:  		/* mr R4, R18 */
		/* 820E8218h case   12:*/		regs.R4 = regs.R18;
		/* 820E8218h case   12:*/		return 0x820E821C;
		  /* 820E821Ch */ case   13:  		/* mr R3, R31 */
		/* 820E821Ch case   13:*/		regs.R3 = regs.R31;
		/* 820E821Ch case   13:*/		return 0x820E8220;
		  /* 820E8220h */ case   14:  		/* mr R28, R27 */
		/* 820E8220h case   14:*/		regs.R28 = regs.R27;
		/* 820E8220h case   14:*/		return 0x820E8224;
		  /* 820E8224h */ case   15:  		/* mr R29, R27 */
		/* 820E8224h case   15:*/		regs.R29 = regs.R27;
		/* 820E8224h case   15:*/		return 0x820E8228;
		  /* 820E8228h */ case   16:  		/* mr R30, R27 */
		/* 820E8228h case   16:*/		regs.R30 = regs.R27;
		/* 820E8228h case   16:*/		return 0x820E822C;
		  /* 820E822Ch */ case   17:  		/* bl -17836 */
		/* 820E822Ch case   17:*/		regs.LR = 0x820E8230; return 0x820E3C80;
		/* 820E822Ch case   17:*/		return 0x820E8230;
		  /* 820E8230h */ case   18:  		/* or. R20, R3, R3 */
		/* 820E8230h case   18:*/		cpu::op::or<1>(regs,&regs.R20,regs.R3,regs.R3);
		/* 820E8230h case   18:*/		return 0x820E8234;
		  /* 820E8234h */ case   19:  		/* bc 12, CR0_EQ, 180 */
		/* 820E8234h case   19:*/		if ( regs.CR[0].eq ) { return 0x820E82E8;  }
		/* 820E8234h case   19:*/		return 0x820E8238;
		  /* 820E8238h */ case   20:  		/* stw R27, <#[R1 + 96]> */
		/* 820E8238h case   20:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 820E8238h case   20:*/		return 0x820E823C;
		  /* 820E823Ch */ case   21:  		/* addi R5, R25, 128 */
		/* 820E823Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x80);
		/* 820E823Ch case   21:*/		return 0x820E8240;
		  /* 820E8240h */ case   22:  		/* li R10, 1 */
		/* 820E8240h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E8240h case   22:*/		return 0x820E8244;
		  /* 820E8244h */ case   23:  		/* stw R19, <#[R1 + 84]> */
		/* 820E8244h case   23:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8244h case   23:*/		return 0x820E8248;
		  /* 820E8248h */ case   24:  		/* addi R9, R1, 112 */
		/* 820E8248h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8248h case   24:*/		return 0x820E824C;
		  /* 820E824Ch */ case   25:  		/* addi R8, R1, 288 */
		/* 820E824Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x120);
		/* 820E824Ch case   25:*/		return 0x820E8250;
		  /* 820E8250h */ case   26:  		/* addi R7, R1, 96 */
		/* 820E8250h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8250h case   26:*/		return 0x820E8254;
		  /* 820E8254h */ case   27:  		/* addi R6, R1, 160 */
		/* 820E8254h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E8254h case   27:*/		return 0x820E8258;
		  /* 820E8258h */ case   28:  		/* mr R4, R18 */
		/* 820E8258h case   28:*/		regs.R4 = regs.R18;
		/* 820E8258h case   28:*/		return 0x820E825C;
		  /* 820E825Ch */ case   29:  		/* mr R3, R31 */
		/* 820E825Ch case   29:*/		regs.R3 = regs.R31;
		/* 820E825Ch case   29:*/		return 0x820E8260;
		  /* 820E8260h */ case   30:  		/* bl -17888 */
		/* 820E8260h case   30:*/		regs.LR = 0x820E8264; return 0x820E3C80;
		/* 820E8260h case   30:*/		return 0x820E8264;
		  /* 820E8264h */ case   31:  		/* or. R20, R3, R3 */
		/* 820E8264h case   31:*/		cpu::op::or<1>(regs,&regs.R20,regs.R3,regs.R3);
		/* 820E8264h case   31:*/		return 0x820E8268;
		  /* 820E8268h */ case   32:  		/* bc 4, CR0_EQ, 12 */
		/* 820E8268h case   32:*/		if ( !regs.CR[0].eq ) { return 0x820E8274;  }
		/* 820E8268h case   32:*/		return 0x820E826C;
		  /* 820E826Ch */ case   33:  		/* mr R28, R19 */
		/* 820E826Ch case   33:*/		regs.R28 = regs.R19;
		/* 820E826Ch case   33:*/		return 0x820E8270;
		  /* 820E8270h */ case   34:  		/* b 120 */
		/* 820E8270h case   34:*/		return 0x820E82E8;
		/* 820E8270h case   34:*/		return 0x820E8274;
	}
	return 0x820E8274;
} // Block from 820E81E8h-820E8274h (35 instructions)

//////////////////////////////////////////////////////
// Block at 820E8274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8274);
		  /* 820E8274h */ case    0:  		/* addi R5, R25, 544 */
		/* 820E8274h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x220);
		/* 820E8274h case    0:*/		return 0x820E8278;
		  /* 820E8278h */ case    1:  		/* stw R19, <#[R1 + 84]> */
		/* 820E8278h case    1:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8278h case    1:*/		return 0x820E827C;
		  /* 820E827Ch */ case    2:  		/* li R10, 1 */
		/* 820E827Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E827Ch case    2:*/		return 0x820E8280;
		  /* 820E8280h */ case    3:  		/* stw R27, <#[R1 + 96]> */
		/* 820E8280h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 820E8280h case    3:*/		return 0x820E8284;
		  /* 820E8284h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E8284h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8284h case    4:*/		return 0x820E8288;
		  /* 820E8288h */ case    5:  		/* addi R8, R1, 288 */
		/* 820E8288h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x120);
		/* 820E8288h case    5:*/		return 0x820E828C;
		  /* 820E828Ch */ case    6:  		/* addi R7, R1, 96 */
		/* 820E828Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E828Ch case    6:*/		return 0x820E8290;
		  /* 820E8290h */ case    7:  		/* addi R6, R1, 160 */
		/* 820E8290h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E8290h case    7:*/		return 0x820E8294;
		  /* 820E8294h */ case    8:  		/* mr R4, R18 */
		/* 820E8294h case    8:*/		regs.R4 = regs.R18;
		/* 820E8294h case    8:*/		return 0x820E8298;
		  /* 820E8298h */ case    9:  		/* mr R3, R31 */
		/* 820E8298h case    9:*/		regs.R3 = regs.R31;
		/* 820E8298h case    9:*/		return 0x820E829C;
		  /* 820E829Ch */ case   10:  		/* bl -17948 */
		/* 820E829Ch case   10:*/		regs.LR = 0x820E82A0; return 0x820E3C80;
		/* 820E829Ch case   10:*/		return 0x820E82A0;
		  /* 820E82A0h */ case   11:  		/* or. R20, R3, R3 */
		/* 820E82A0h case   11:*/		cpu::op::or<1>(regs,&regs.R20,regs.R3,regs.R3);
		/* 820E82A0h case   11:*/		return 0x820E82A4;
		  /* 820E82A4h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 820E82A4h case   12:*/		if ( !regs.CR[0].eq ) { return 0x820E82B0;  }
		/* 820E82A4h case   12:*/		return 0x820E82A8;
		  /* 820E82A8h */ case   13:  		/* mr R29, R19 */
		/* 820E82A8h case   13:*/		regs.R29 = regs.R19;
		/* 820E82A8h case   13:*/		return 0x820E82AC;
		  /* 820E82ACh */ case   14:  		/* b 60 */
		/* 820E82ACh case   14:*/		return 0x820E82E8;
		/* 820E82ACh case   14:*/		return 0x820E82B0;
	}
	return 0x820E82B0;
} // Block from 820E8274h-820E82B0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E82B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E82B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E82B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E82B0);
		  /* 820E82B0h */ case    0:  		/* stw R19, <#[R1 + 84]> */
		/* 820E82B0h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E82B0h case    0:*/		return 0x820E82B4;
		  /* 820E82B4h */ case    1:  		/* addi R5, R25, 960 */
		/* 820E82B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x3C0);
		/* 820E82B4h case    1:*/		return 0x820E82B8;
		  /* 820E82B8h */ case    2:  		/* stw R27, <#[R1 + 96]> */
		/* 820E82B8h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 820E82B8h case    2:*/		return 0x820E82BC;
		  /* 820E82BCh */ case    3:  		/* li R10, 1 */
		/* 820E82BCh case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E82BCh case    3:*/		return 0x820E82C0;
		  /* 820E82C0h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E82C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E82C0h case    4:*/		return 0x820E82C4;
		  /* 820E82C4h */ case    5:  		/* addi R8, R1, 288 */
		/* 820E82C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x120);
		/* 820E82C4h case    5:*/		return 0x820E82C8;
		  /* 820E82C8h */ case    6:  		/* addi R7, R1, 96 */
		/* 820E82C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E82C8h case    6:*/		return 0x820E82CC;
		  /* 820E82CCh */ case    7:  		/* addi R6, R1, 160 */
		/* 820E82CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820E82CCh case    7:*/		return 0x820E82D0;
		  /* 820E82D0h */ case    8:  		/* mr R4, R18 */
		/* 820E82D0h case    8:*/		regs.R4 = regs.R18;
		/* 820E82D0h case    8:*/		return 0x820E82D4;
		  /* 820E82D4h */ case    9:  		/* mr R3, R31 */
		/* 820E82D4h case    9:*/		regs.R3 = regs.R31;
		/* 820E82D4h case    9:*/		return 0x820E82D8;
		  /* 820E82D8h */ case   10:  		/* bl -18008 */
		/* 820E82D8h case   10:*/		regs.LR = 0x820E82DC; return 0x820E3C80;
		/* 820E82D8h case   10:*/		return 0x820E82DC;
		  /* 820E82DCh */ case   11:  		/* or. R20, R3, R3 */
		/* 820E82DCh case   11:*/		cpu::op::or<1>(regs,&regs.R20,regs.R3,regs.R3);
		/* 820E82DCh case   11:*/		return 0x820E82E0;
		  /* 820E82E0h */ case   12:  		/* bc 4, CR0_EQ, 8 */
		/* 820E82E0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x820E82E8;  }
		/* 820E82E0h case   12:*/		return 0x820E82E4;
		  /* 820E82E4h */ case   13:  		/* mr R30, R19 */
		/* 820E82E4h case   13:*/		regs.R30 = regs.R19;
		/* 820E82E4h case   13:*/		return 0x820E82E8;
	}
	return 0x820E82E8;
} // Block from 820E82B0h-820E82E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E82E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E82E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E82E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E82E8);
		  /* 820E82E8h */ case    0:  		/* lwz R11, <#[R1 + 320]> */
		/* 820E82E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000140) );
		/* 820E82E8h case    0:*/		return 0x820E82EC;
		  /* 820E82ECh */ case    1:  		/* lwz R26, <#[R1 + 304]> */
		/* 820E82ECh case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000130) );
		/* 820E82ECh case    1:*/		return 0x820E82F0;
		  /* 820E82F0h */ case    2:  		/* cmplw CR6, R26, R11 */
		/* 820E82F0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820E82F0h case    2:*/		return 0x820E82F4;
		  /* 820E82F4h */ case    3:  		/* bc 4, CR6_EQ, 844 */
		/* 820E82F4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E82F4h case    3:*/		return 0x820E82F8;
		  /* 820E82F8h */ case    4:  		/* cmpwi CR6, R20, 0 */
		/* 820E82F8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 820E82F8h case    4:*/		return 0x820E82FC;
		  /* 820E82FCh */ case    5:  		/* bc 4, CR6_EQ, 836 */
		/* 820E82FCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E82FCh case    5:*/		return 0x820E8300;
		  /* 820E8300h */ case    6:  		/* lwz R11, <#[R1 + 160]> */
		/* 820E8300h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820E8300h case    6:*/		return 0x820E8304;
		  /* 820E8304h */ case    7:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E8304h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8304h case    7:*/		return 0x820E8308;
		  /* 820E8308h */ case    8:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E8308h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E8308h case    8:*/		return 0x820E830C;
		  /* 820E830Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 820E830Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E830Ch case    9:*/		return 0x820E8310;
		  /* 820E8310h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8310h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8310h case   10:*/		return 0x820E8314;
		  /* 820E8314h */ case   11:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E8314h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E8314h case   11:*/		return 0x820E8318;
		  /* 820E8318h */ case   12:  		/* lwz R11, <#[R11 + 20]> */
		/* 820E8318h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820E8318h case   12:*/		return 0x820E831C;
		  /* 820E831Ch */ case   13:  		/* cmpwi CR6, R11, -1 */
		/* 820E831Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E831Ch case   13:*/		return 0x820E8320;
		  /* 820E8320h */ case   14:  		/* bc 12, CR6_EQ, 800 */
		/* 820E8320h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8320h case   14:*/		return 0x820E8324;
		  /* 820E8324h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8324h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8324h case   15:*/		return 0x820E8328;
		  /* 820E8328h */ case   16:  		/* lwz R7, <#[R31 + 24]> */
		/* 820E8328h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 820E8328h case   16:*/		return 0x820E832C;
		  /* 820E832Ch */ case   17:  		/* mr R15, R27 */
		/* 820E832Ch case   17:*/		regs.R15 = regs.R27;
		/* 820E832Ch case   17:*/		return 0x820E8330;
		  /* 820E8330h */ case   18:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E8330h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E8330h case   18:*/		return 0x820E8334;
		  /* 820E8334h */ case   19:  		/* lwz R11, <#[R11 + 72]> */
		/* 820E8334h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 820E8334h case   19:*/		return 0x820E8338;
		  /* 820E8338h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8338h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8338h case   20:*/		return 0x820E833C;
		  /* 820E833Ch */ case   21:  		/* lwzx R11, <#[R11 + R7]> */
		/* 820E833Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E833Ch case   21:*/		return 0x820E8340;
		  /* 820E8340h */ case   22:  		/* lwz R9, <#[R11]> */
		/* 820E8340h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8340h case   22:*/		return 0x820E8344;
		  /* 820E8344h */ case   23:  		/* cmplw CR6, R9, R23 */
		/* 820E8344h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 820E8344h case   23:*/		return 0x820E8348;
		  /* 820E8348h */ case   24:  		/* bc 4, CR6_EQ, 760 */
		/* 820E8348h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8348h case   24:*/		return 0x820E834C;
		  /* 820E834Ch */ case   25:  		/* lwz R11, <#[R11 + 16]> */
		/* 820E834Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820E834Ch case   25:*/		return 0x820E8350;
		  /* 820E8350h */ case   26:  		/* lwz R6, <#[R11]> */
		/* 820E8350h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8350h case   26:*/		return 0x820E8354;
		  /* 820E8354h */ case   27:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 820E8354h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 820E8354h case   27:*/		return 0x820E8358;
		  /* 820E8358h */ case   28:  		/* lwzx R9, <#[R11 + R10]> */
		/* 820E8358h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E8358h case   28:*/		return 0x820E835C;
		  /* 820E835Ch */ case   29:  		/* lwz R11, <#[R9 + 84]> */
		/* 820E835Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000054) );
		/* 820E835Ch case   29:*/		return 0x820E8360;
		  /* 820E8360h */ case   30:  		/* lwz R5, <#[R9 + 88]> */
		/* 820E8360h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000058) );
		/* 820E8360h case   30:*/		return 0x820E8364;
		  /* 820E8364h */ case   31:  		/* cmplw CR6, R11, R5 */
		/* 820E8364h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820E8364h case   31:*/		return 0x820E8368;
		  /* 820E8368h */ case   32:  		/* bc 12, CR6_GT, 728 */
		/* 820E8368h case   32:*/		if ( regs.CR[6].gt ) { return 0x820E8640;  }
		/* 820E8368h case   32:*/		return 0x820E836C;
		  /* 820E836Ch */ case   33:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 820E836Ch case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 820E836Ch case   33:*/		return 0x820E8370;
		  /* 820E8370h */ case   34:  		/* lwzx R9, <#[R8 + R7]> */
		/* 820E8370h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820E8370h case   34:*/		return 0x820E8374;
		  /* 820E8374h */ case   35:  		/* lwz R4, <#[R9 + 16]> */
		/* 820E8374h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000010) );
		/* 820E8374h case   35:*/		return 0x820E8378;
		  /* 820E8378h */ case   36:  		/* lwz R4, <#[R4]> */
		/* 820E8378h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000000) );
		/* 820E8378h case   36:*/		return 0x820E837C;
		  /* 820E837Ch */ case   37:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 820E837Ch case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 820E837Ch case   37:*/		return 0x820E8380;
		  /* 820E8380h */ case   38:  		/* lwzx R4, <#[R4 + R10]> */
		/* 820E8380h case   38:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R10 + 0x00000000) );
		/* 820E8380h case   38:*/		return 0x820E8384;
		  /* 820E8384h */ case   39:  		/* lwz R4, <#[R4 + 20]> */
		/* 820E8384h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000014) );
		/* 820E8384h case   39:*/		return 0x820E8388;
		  /* 820E8388h */ case   40:  		/* cmplw CR6, R4, R6 */
		/* 820E8388h case   40:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R6);
		/* 820E8388h case   40:*/		return 0x820E838C;
		  /* 820E838Ch */ case   41:  		/* bc 4, CR6_EQ, 36 */
		/* 820E838Ch case   41:*/		if ( !regs.CR[6].eq ) { return 0x820E83B0;  }
		/* 820E838Ch case   41:*/		return 0x820E8390;
		  /* 820E8390h */ case   42:  		/* lis R4, 29808 */
		/* 820E8390h case   42:*/		cpu::op::lis<0>(regs,&regs.R4,0x7470);
		/* 820E8390h case   42:*/		return 0x820E8394;
		  /* 820E8394h */ case   43:  		/* lwz R3, <#[R9]> */
		/* 820E8394h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x00000000) );
		/* 820E8394h case   43:*/		return 0x820E8398;
		  /* 820E8398h */ case   44:  		/* ori R4, R4, 1 */
		/* 820E8398h case   44:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E8398h case   44:*/		return 0x820E839C;
		  /* 820E839Ch */ case   45:  		/* cmplw CR6, R3, R4 */
		/* 820E839Ch case   45:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R4);
		/* 820E839Ch case   45:*/		return 0x820E83A0;
		  /* 820E83A0h */ case   46:  		/* bc 4, CR6_EQ, 16 */
		/* 820E83A0h case   46:*/		if ( !regs.CR[6].eq ) { return 0x820E83B0;  }
		/* 820E83A0h case   46:*/		return 0x820E83A4;
		  /* 820E83A4h */ case   47:  		/* cmplwi CR6, R15, 0 */
		/* 820E83A4h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820E83A4h case   47:*/		return 0x820E83A8;
		  /* 820E83A8h */ case   48:  		/* bc 4, CR6_EQ, 688 */
		/* 820E83A8h case   48:*/		if ( !regs.CR[6].eq ) { return 0x820E8658;  }
		/* 820E83A8h case   48:*/		return 0x820E83AC;
		  /* 820E83ACh */ case   49:  		/* mr R15, R9 */
		/* 820E83ACh case   49:*/		regs.R15 = regs.R9;
		/* 820E83ACh case   49:*/		return 0x820E83B0;
	}
	return 0x820E83B0;
} // Block from 820E82E8h-820E83B0h (50 instructions)

//////////////////////////////////////////////////////
// Block at 820E83B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E83B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E83B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E83B0);
		  /* 820E83B0h */ case    0:  		/* addi R11, R11, 1 */
		/* 820E83B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E83B0h case    0:*/		return 0x820E83B4;
		  /* 820E83B4h */ case    1:  		/* addi R8, R8, 4 */
		/* 820E83B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820E83B4h case    1:*/		return 0x820E83B8;
		  /* 820E83B8h */ case    2:  		/* cmplw CR6, R11, R5 */
		/* 820E83B8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820E83B8h case    2:*/		return 0x820E83BC;
		  /* 820E83BCh */ case    3:  		/* bc 4, CR6_GT, -76 */
		/* 820E83BCh case    3:*/		if ( !regs.CR[6].gt ) { return 0x820E8370;  }
		/* 820E83BCh case    3:*/		return 0x820E83C0;
		  /* 820E83C0h */ case    4:  		/* cmplwi CR6, R15, 0 */
		/* 820E83C0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820E83C0h case    4:*/		return 0x820E83C4;
		  /* 820E83C4h */ case    5:  		/* bc 12, CR6_EQ, 636 */
		/* 820E83C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E83C4h case    5:*/		return 0x820E83C8;
		  /* 820E83C8h */ case    6:  		/* cmpwi CR6, R30, 0 */
		/* 820E83C8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820E83C8h case    6:*/		return 0x820E83CC;
		  /* 820E83CCh */ case    7:  		/* stw R27, <#[R1 + 96]> */
		/* 820E83CCh case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 820E83CCh case    7:*/		return 0x820E83D0;
		  /* 820E83D0h */ case    8:  		/* li R10, 1 */
		/* 820E83D0h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E83D0h case    8:*/		return 0x820E83D4;
		  /* 820E83D4h */ case    9:  		/* addi R8, R1, 448 */
		/* 820E83D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1C0);
		/* 820E83D4h case    9:*/		return 0x820E83D8;
		  /* 820E83D8h */ case   10:  		/* addi R7, R1, 96 */
		/* 820E83D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E83D8h case   10:*/		return 0x820E83DC;
		  /* 820E83DCh */ case   11:  		/* addi R6, R1, 224 */
		/* 820E83DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 820E83DCh case   11:*/		return 0x820E83E0;
		  /* 820E83E0h */ case   12:  		/* mr R4, R18 */
		/* 820E83E0h case   12:*/		regs.R4 = regs.R18;
		/* 820E83E0h case   12:*/		return 0x820E83E4;
		  /* 820E83E4h */ case   13:  		/* mr R3, R31 */
		/* 820E83E4h case   13:*/		regs.R3 = regs.R31;
		/* 820E83E4h case   13:*/		return 0x820E83E8;
		  /* 820E83E8h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 820E83E8h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E8400;  }
		/* 820E83E8h case   14:*/		return 0x820E83EC;
		  /* 820E83ECh */ case   15:  		/* addi R5, R25, 1248 */
		/* 820E83ECh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x4E0);
		/* 820E83ECh case   15:*/		return 0x820E83F0;
		  /* 820E83F0h */ case   16:  		/* stw R19, <#[R1 + 84]> */
		/* 820E83F0h case   16:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E83F0h case   16:*/		return 0x820E83F4;
		  /* 820E83F4h */ case   17:  		/* addi R9, R1, 112 */
		/* 820E83F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E83F4h case   17:*/		return 0x820E83F8;
		  /* 820E83F8h */ case   18:  		/* bl -18296 */
		/* 820E83F8h case   18:*/		regs.LR = 0x820E83FC; return 0x820E3C80;
		/* 820E83F8h case   18:*/		return 0x820E83FC;
		  /* 820E83FCh */ case   19:  		/* b 76 */
		/* 820E83FCh case   19:*/		return 0x820E8448;
		/* 820E83FCh case   19:*/		return 0x820E8400;
	}
	return 0x820E8400;
} // Block from 820E83B0h-820E8400h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E8400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8400);
		  /* 820E8400h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 820E8400h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820E8400h case    0:*/		return 0x820E8404;
		  /* 820E8404h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 820E8404h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E841C;  }
		/* 820E8404h case    1:*/		return 0x820E8408;
		  /* 820E8408h */ case    2:  		/* addi R5, R25, 800 */
		/* 820E8408h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x320);
		/* 820E8408h case    2:*/		return 0x820E840C;
		  /* 820E840Ch */ case    3:  		/* stw R19, <#[R1 + 84]> */
		/* 820E840Ch case    3:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E840Ch case    3:*/		return 0x820E8410;
		  /* 820E8410h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E8410h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8410h case    4:*/		return 0x820E8414;
		  /* 820E8414h */ case    5:  		/* bl -18324 */
		/* 820E8414h case    5:*/		regs.LR = 0x820E8418; return 0x820E3C80;
		/* 820E8414h case    5:*/		return 0x820E8418;
		  /* 820E8418h */ case    6:  		/* b 48 */
		/* 820E8418h case    6:*/		return 0x820E8448;
		/* 820E8418h case    6:*/		return 0x820E841C;
	}
	return 0x820E841C;
} // Block from 820E8400h-820E841Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E841Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E841C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E841C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E841C);
		  /* 820E841Ch */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 820E841Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820E841Ch case    0:*/		return 0x820E8420;
		  /* 820E8420h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 820E8420h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E8438;  }
		/* 820E8420h case    1:*/		return 0x820E8424;
		  /* 820E8424h */ case    2:  		/* stw R19, <#[R1 + 84]> */
		/* 820E8424h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8424h case    2:*/		return 0x820E8428;
		  /* 820E8428h */ case    3:  		/* addi R5, R25, 384 */
		/* 820E8428h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x180);
		/* 820E8428h case    3:*/		return 0x820E842C;
		  /* 820E842Ch */ case    4:  		/* addi R9, R1, 112 */
		/* 820E842Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E842Ch case    4:*/		return 0x820E8430;
		  /* 820E8430h */ case    5:  		/* bl -18352 */
		/* 820E8430h case    5:*/		regs.LR = 0x820E8434; return 0x820E3C80;
		/* 820E8430h case    5:*/		return 0x820E8434;
		  /* 820E8434h */ case    6:  		/* b 20 */
		/* 820E8434h case    6:*/		return 0x820E8448;
		/* 820E8434h case    6:*/		return 0x820E8438;
	}
	return 0x820E8438;
} // Block from 820E841Ch-820E8438h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E8438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8438);
		  /* 820E8438h */ case    0:  		/* stw R19, <#[R1 + 84]> */
		/* 820E8438h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8438h case    0:*/		return 0x820E843C;
		  /* 820E843Ch */ case    1:  		/* mr R5, R25 */
		/* 820E843Ch case    1:*/		regs.R5 = regs.R25;
		/* 820E843Ch case    1:*/		return 0x820E8440;
		  /* 820E8440h */ case    2:  		/* addi R9, R1, 128 */
		/* 820E8440h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 820E8440h case    2:*/		return 0x820E8444;
		  /* 820E8444h */ case    3:  		/* bl -18372 */
		/* 820E8444h case    3:*/		regs.LR = 0x820E8448; return 0x820E3C80;
		/* 820E8444h case    3:*/		return 0x820E8448;
	}
	return 0x820E8448;
} // Block from 820E8438h-820E8448h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E8448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8448);
		  /* 820E8448h */ case    0:  		/* lwz R11, <#[R1 + 448]> */
		/* 820E8448h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001C0) );
		/* 820E8448h case    0:*/		return 0x820E844C;
		  /* 820E844Ch */ case    1:  		/* mr R20, R3 */
		/* 820E844Ch case    1:*/		regs.R20 = regs.R3;
		/* 820E844Ch case    1:*/		return 0x820E8450;
		  /* 820E8450h */ case    2:  		/* lwz R9, <#[R1 + 288]> */
		/* 820E8450h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000120) );
		/* 820E8450h case    2:*/		return 0x820E8454;
		  /* 820E8454h */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 820E8454h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E8454h case    3:*/		return 0x820E8458;
		  /* 820E8458h */ case    4:  		/* lwz R11, <#[R1 + 464]> */
		/* 820E8458h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001D0) );
		/* 820E8458h case    4:*/		return 0x820E845C;
		  /* 820E845Ch */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 820E845Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820E8464;  }
		/* 820E845Ch case    5:*/		return 0x820E8460;
		  /* 820E8460h */ case    6:  		/* mr R11, R9 */
		/* 820E8460h case    6:*/		regs.R11 = regs.R9;
		/* 820E8460h case    6:*/		return 0x820E8464;
	}
	return 0x820E8464;
} // Block from 820E8448h-820E8464h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E8464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8464);
		  /* 820E8464h */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 820E8464h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E8464h case    0:*/		return 0x820E8468;
		  /* 820E8468h */ case    1:  		/* bc 12, CR6_EQ, 472 */
		/* 820E8468h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8468h case    1:*/		return 0x820E846C;
		  /* 820E846Ch */ case    2:  		/* lwz R10, <#[R15 + 8]> */
		/* 820E846Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 820E846Ch case    2:*/		return 0x820E8470;
		  /* 820E8470h */ case    3:  		/* lwz R8, <#[R10]> */
		/* 820E8470h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820E8470h case    3:*/		return 0x820E8474;
		  /* 820E8474h */ case    4:  		/* cmplw CR6, R8, R11 */
		/* 820E8474h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 820E8474h case    4:*/		return 0x820E8478;
		  /* 820E8478h */ case    5:  		/* bc 4, CR6_EQ, 456 */
		/* 820E8478h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8478h case    5:*/		return 0x820E847C;
		  /* 820E847Ch */ case    6:  		/* lwz R11, <#[R15 + 16]> */
		/* 820E847Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000010) );
		/* 820E847Ch case    6:*/		return 0x820E8480;
		  /* 820E8480h */ case    7:  		/* lwz R28, <#[R31 + 20]> */
		/* 820E8480h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8480h case    7:*/		return 0x820E8484;
		  /* 820E8484h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 820E8484h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8484h case    8:*/		return 0x820E8488;
		  /* 820E8488h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8488h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8488h case    9:*/		return 0x820E848C;
		  /* 820E848Ch */ case   10:  		/* lwzx R11, <#[R11 + R28]> */
		/* 820E848Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 820E848Ch case   10:*/		return 0x820E8490;
		  /* 820E8490h */ case   11:  		/* lwz R11, <#[R11 + 20]> */
		/* 820E8490h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820E8490h case   11:*/		return 0x820E8494;
		  /* 820E8494h */ case   12:  		/* cmpwi CR6, R11, -1 */
		/* 820E8494h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E8494h case   12:*/		return 0x820E8498;
		  /* 820E8498h */ case   13:  		/* bc 12, CR6_EQ, 424 */
		/* 820E8498h case   13:*/		if ( regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8498h case   13:*/		return 0x820E849C;
		  /* 820E849Ch */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E849Ch case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E849Ch case   14:*/		return 0x820E84A0;
		  /* 820E84A0h */ case   15:  		/* lwz R30, <#[R31 + 24]> */
		/* 820E84A0h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000018) );
		/* 820E84A0h case   15:*/		return 0x820E84A4;
		  /* 820E84A4h */ case   16:  		/* rlwinm R8, R28, 0, 0, 31 */
		/* 820E84A4h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R28);
		/* 820E84A4h case   16:*/		return 0x820E84A8;
		  /* 820E84A8h */ case   17:  		/* lwzx R11, <#[R11 + R8]> */
		/* 820E84A8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E84A8h case   17:*/		return 0x820E84AC;
		  /* 820E84ACh */ case   18:  		/* lwz R11, <#[R11 + 72]> */
		/* 820E84ACh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 820E84ACh case   18:*/		return 0x820E84B0;
		  /* 820E84B0h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E84B0h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E84B0h case   19:*/		return 0x820E84B4;
		  /* 820E84B4h */ case   20:  		/* lwzx R22, <#[R11 + R30]> */
		/* 820E84B4h case   20:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E84B4h case   20:*/		return 0x820E84B8;
		  /* 820E84B8h */ case   21:  		/* lwz R27, <#[R22 + 8]> */
		/* 820E84B8h case   21:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R22 + 0x00000008) );
		/* 820E84B8h case   21:*/		return 0x820E84BC;
		  /* 820E84BCh */ case   22:  		/* lwz R11, <#[R22]> */
		/* 820E84BCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 820E84BCh case   22:*/		return 0x820E84C0;
		  /* 820E84C0h */ case   23:  		/* cmplw CR6, R11, R23 */
		/* 820E84C0h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 820E84C0h case   23:*/		return 0x820E84C4;
		  /* 820E84C4h */ case   24:  		/* lwz R11, <#[R27]> */
		/* 820E84C4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 820E84C4h case   24:*/		return 0x820E84C8;
		  /* 820E84C8h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E84C8h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E84C8h case   25:*/		return 0x820E84CC;
		  /* 820E84CCh */ case   26:  		/* lwzx R11, <#[R11 + R8]> */
		/* 820E84CCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E84CCh case   26:*/		return 0x820E84D0;
		  /* 820E84D0h */ case   27:  		/* bc 4, CR6_EQ, 368 */
		/* 820E84D0h case   27:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E84D0h case   27:*/		return 0x820E84D4;
		  /* 820E84D4h */ case   28:  		/* lwz R8, <#[R11 + 4]> */
		/* 820E84D4h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 820E84D4h case   28:*/		return 0x820E84D8;
		  /* 820E84D8h */ case   29:  		/* lwz R7, <#[R31 + 16]> */
		/* 820E84D8h case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 820E84D8h case   29:*/		return 0x820E84DC;
		  /* 820E84DCh */ case   30:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E84DCh case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E84DCh case   30:*/		return 0x820E84E0;
		  /* 820E84E0h */ case   31:  		/* lwzx R8, <#[R8 + R7]> */
		/* 820E84E0h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820E84E0h case   31:*/		return 0x820E84E4;
		  /* 820E84E4h */ case   32:  		/* lwz R8, <#[R8 + 4]> */
		/* 820E84E4h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 820E84E4h case   32:*/		return 0x820E84E8;
		  /* 820E84E8h */ case   33:  		/* rlwinm. R8, R8, 0, 23, 23 */
		/* 820E84E8h case   33:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R8,regs.R8);
		/* 820E84E8h case   33:*/		return 0x820E84EC;
		  /* 820E84ECh */ case   34:  		/* bc 12, CR0_EQ, 340 */
		/* 820E84ECh case   34:*/		if ( regs.CR[0].eq ) { return 0x820E8640;  }
		/* 820E84ECh case   34:*/		return 0x820E84F0;
		  /* 820E84F0h */ case   35:  		/* lwz R8, <#[R31 + 104]> */
		/* 820E84F0h case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000068) );
		/* 820E84F0h case   35:*/		return 0x820E84F4;
		  /* 820E84F4h */ case   36:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820E84F4h case   36:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820E84F4h case   36:*/		return 0x820E84F8;
		  /* 820E84F8h */ case   37:  		/* mr R11, R8 */
		/* 820E84F8h case   37:*/		regs.R11 = regs.R8;
		/* 820E84F8h case   37:*/		return 0x820E84FC;
		  /* 820E84FCh */ case   38:  		/* std R8, <#[R1 + 144]> */
		/* 820E84FCh case   38:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 820E84FCh case   38:*/		return 0x820E8500;
		  /* 820E8500h */ case   39:  		/* lfd FR13, <#[R1 + 144]> */
		/* 820E8500h case   39:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000090) );
		/* 820E8500h case   39:*/		return 0x820E8504;
		  /* 820E8504h */ case   40:  		/* fcfid FR13, FR13 */
		/* 820E8504h case   40:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 820E8504h case   40:*/		return 0x820E8508;
		  /* 820E8508h */ case   41:  		/* frsp FR13, FR13 */
		/* 820E8508h case   41:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 820E8508h case   41:*/		return 0x820E850C;
		  /* 820E850Ch */ case   42:  		/* fcmpu CR6, FR0, FR13 */
		/* 820E850Ch case   42:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820E850Ch case   42:*/		return 0x820E8510;
		  /* 820E8510h */ case   43:  		/* bc 4, CR6_EQ, 304 */
		/* 820E8510h case   43:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8510h case   43:*/		return 0x820E8514;
		  /* 820E8514h */ case   44:  		/* lwz R4, <#[R10 + 4]> */
		/* 820E8514h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 820E8514h case   44:*/		return 0x820E8518;
		  /* 820E8518h */ case   45:  		/* rlwinm R11, R28, 0, 0, 31 */
		/* 820E8518h case   45:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R28);
		/* 820E8518h case   45:*/		return 0x820E851C;
		  /* 820E851Ch */ case   46:  		/* rlwinm R8, R26, 2, 0, 29 */
		/* 820E851Ch case   46:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R26);
		/* 820E851Ch case   46:*/		return 0x820E8520;
		  /* 820E8520h */ case   47:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E8520h case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E8520h case   47:*/		return 0x820E8524;
		  /* 820E8524h */ case   48:  		/* rlwinm R6, R4, 2, 0, 29 */
		/* 820E8524h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R4);
		/* 820E8524h case   48:*/		return 0x820E8528;
		  /* 820E8528h */ case   49:  		/* mr R7, R26 */
		/* 820E8528h case   49:*/		regs.R7 = regs.R26;
		/* 820E8528h case   49:*/		return 0x820E852C;
		  /* 820E852Ch */ case   50:  		/* lwzx R10, <#[R8 + R11]> */
		/* 820E852Ch case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820E852Ch case   50:*/		return 0x820E8530;
		  /* 820E8530h */ case   51:  		/* lwzx R3, <#[R9 + R11]> */
		/* 820E8530h case   51:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E8530h case   51:*/		return 0x820E8534;
		  /* 820E8534h */ case   52:  		/* lwzx R29, <#[R6 + R11]> */
		/* 820E8534h case   52:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 820E8534h case   52:*/		return 0x820E8538;
		  /* 820E8538h */ case   53:  		/* b 116 */
		/* 820E8538h case   53:*/		return 0x820E85AC;
		/* 820E8538h case   53:*/		return 0x820E853C;
		  /* 820E853Ch */ case   54:  		/* lwz R9, <#[R10 + 8]> */
		/* 820E853Ch case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 820E853Ch case   54:*/		return 0x820E8540;
		  /* 820E8540h */ case   55:  		/* cmpwi CR6, R9, -1 */
		/* 820E8540h case   55:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E8540h case   55:*/		return 0x820E8544;
		  /* 820E8544h */ case   56:  		/* bc 4, CR6_EQ, 116 */
		/* 820E8544h case   56:*/		if ( !regs.CR[6].eq ) { return 0x820E85B8;  }
		/* 820E8544h case   56:*/		return 0x820E8548;
		  /* 820E8548h */ case   57:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8548h case   57:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8548h case   57:*/		return 0x820E854C;
		  /* 820E854Ch */ case   58:  		/* lis R9, 4096 */
		/* 820E854Ch case   58:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 820E854Ch case   58:*/		return 0x820E8550;
		  /* 820E8550h */ case   59:  		/* lwzx R8, <#[R11 + R30]> */
		/* 820E8550h case   59:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820E8550h case   59:*/		return 0x820E8554;
		  /* 820E8554h */ case   60:  		/* lwz R11, <#[R8]> */
		/* 820E8554h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E8554h case   60:*/		return 0x820E8558;
		  /* 820E8558h */ case   61:  		/* rlwinm R6, R11, 0, 0, 11 */
		/* 820E8558h case   61:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R6,regs.R11);
		/* 820E8558h case   61:*/		return 0x820E855C;
		  /* 820E855Ch */ case   62:  		/* cmplw CR6, R6, R9 */
		/* 820E855Ch case   62:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 820E855Ch case   62:*/		return 0x820E8560;
		  /* 820E8560h */ case   63:  		/* bc 4, CR6_EQ, 88 */
		/* 820E8560h case   63:*/		if ( !regs.CR[6].eq ) { return 0x820E85B8;  }
		/* 820E8560h case   63:*/		return 0x820E8564;
		  /* 820E8564h */ case   64:  		/* rlwinm. R5, R11, 0, 12, 31 */
		/* 820E8564h case   64:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R5,regs.R11);
		/* 820E8564h case   64:*/		return 0x820E8568;
		  /* 820E8568h */ case   65:  		/* li R9, 0 */
		/* 820E8568h case   65:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E8568h case   65:*/		return 0x820E856C;
		  /* 820E856Ch */ case   66:  		/* bc 12, CR0_EQ, 76 */
		/* 820E856Ch case   66:*/		if ( regs.CR[0].eq ) { return 0x820E85B8;  }
		/* 820E856Ch case   66:*/		return 0x820E8570;
		  /* 820E8570h */ case   67:  		/* lwz R6, <#[R8 + 16]> */
		/* 820E8570h case   67:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000010) );
		/* 820E8570h case   67:*/		return 0x820E8574;
		  /* 820E8574h */ case   68:  		/* li R11, 0 */
		/* 820E8574h case   68:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E8574h case   68:*/		return 0x820E8578;
		  /* 820E8578h */ case   69:  		/* lwzx R26, <#[R11 + R6]> */
		/* 820E8578h case   69:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820E8578h case   69:*/		return 0x820E857C;
		  /* 820E857Ch */ case   70:  		/* cmplw CR6, R26, R7 */
		/* 820E857Ch case   70:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R7);
		/* 820E857Ch case   70:*/		return 0x820E8580;
		  /* 820E8580h */ case   71:  		/* bc 12, CR6_EQ, 24 */
		/* 820E8580h case   71:*/		if ( regs.CR[6].eq ) { return 0x820E8598;  }
		/* 820E8580h case   71:*/		return 0x820E8584;
		  /* 820E8584h */ case   72:  		/* addi R9, R9, 1 */
		/* 820E8584h case   72:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E8584h case   72:*/		return 0x820E8588;
		  /* 820E8588h */ case   73:  		/* addi R11, R11, 4 */
		/* 820E8588h case   73:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E8588h case   73:*/		return 0x820E858C;
		  /* 820E858Ch */ case   74:  		/* cmplw CR6, R9, R5 */
		/* 820E858Ch case   74:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R5);
		/* 820E858Ch case   74:*/		return 0x820E8590;
		  /* 820E8590h */ case   75:  		/* bc 12, CR6_LT, -24 */
		/* 820E8590h case   75:*/		if ( regs.CR[6].lt ) { return 0x820E8578;  }
		/* 820E8590h case   75:*/		return 0x820E8594;
		  /* 820E8594h */ case   76:  		/* b 36 */
		/* 820E8594h case   76:*/		return 0x820E85B8;
		/* 820E8594h case   76:*/		return 0x820E8598;
	}
	return 0x820E8598;
} // Block from 820E8464h-820E8598h (77 instructions)

//////////////////////////////////////////////////////
// Block at 820E8598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8598);
		  /* 820E8598h */ case    0:  		/* lwz R11, <#[R8 + 8]> */
		/* 820E8598h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 820E8598h case    0:*/		return 0x820E859C;
		  /* 820E859Ch */ case    1:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 820E859Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 820E859Ch case    1:*/		return 0x820E85A0;
		  /* 820E85A0h */ case    2:  		/* lwzx R7, <#[R10 + R11]> */
		/* 820E85A0h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E85A0h case    2:*/		return 0x820E85A4;
		  /* 820E85A4h */ case    3:  		/* rlwinm R11, R7, 2, 0, 29 */
		/* 820E85A4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 820E85A4h case    3:*/		return 0x820E85A8;
		  /* 820E85A8h */ case    4:  		/* lwzx R10, <#[R11 + R28]> */
		/* 820E85A8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 820E85A8h case    4:*/		return 0x820E85AC;
	}
	return 0x820E85AC;
} // Block from 820E8598h-820E85ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E85ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E85AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E85AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E85AC);
		  /* 820E85ACh */ case    0:  		/* lwz R11, <#[R10 + 72]> */
		/* 820E85ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000048) );
		/* 820E85ACh case    0:*/		return 0x820E85B0;
		  /* 820E85B0h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 820E85B0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E85B0h case    1:*/		return 0x820E85B4;
		  /* 820E85B4h */ case    2:  		/* bc 4, CR6_EQ, -120 */
		/* 820E85B4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E853C;  }
		/* 820E85B4h case    2:*/		return 0x820E85B8;
	}
	return 0x820E85B8;
} // Block from 820E85ACh-820E85B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E85B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E85B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E85B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E85B8);
		  /* 820E85B8h */ case    0:  		/* lwz R9, <#[R3 + 4]> */
		/* 820E85B8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 820E85B8h case    0:*/		return 0x820E85BC;
		  /* 820E85BCh */ case    1:  		/* lwz R11, <#[R31 + 16]> */
		/* 820E85BCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820E85BCh case    1:*/		return 0x820E85C0;
		  /* 820E85C0h */ case    2:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E85C0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E85C0h case    2:*/		return 0x820E85C4;
		  /* 820E85C4h */ case    3:  		/* lwzx R9, <#[R9 + R11]> */
		/* 820E85C4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E85C4h case    3:*/		return 0x820E85C8;
		  /* 820E85C8h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 820E85C8h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 820E85C8h case    4:*/		return 0x820E85CC;
		  /* 820E85CCh */ case    5:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 820E85CCh case    5:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 820E85CCh case    5:*/		return 0x820E85D0;
		  /* 820E85D0h */ case    6:  		/* bc 12, CR0_EQ, 112 */
		/* 820E85D0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820E8640;  }
		/* 820E85D0h case    6:*/		return 0x820E85D4;
		  /* 820E85D4h */ case    7:  		/* lwz R9, <#[R10 + 4]> */
		/* 820E85D4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820E85D4h case    7:*/		return 0x820E85D8;
		  /* 820E85D8h */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E85D8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E85D8h case    8:*/		return 0x820E85DC;
		  /* 820E85DCh */ case    9:  		/* lwzx R9, <#[R9 + R11]> */
		/* 820E85DCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E85DCh case    9:*/		return 0x820E85E0;
		  /* 820E85E0h */ case   10:  		/* lwz R9, <#[R9 + 4]> */
		/* 820E85E0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 820E85E0h case   10:*/		return 0x820E85E4;
		  /* 820E85E4h */ case   11:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 820E85E4h case   11:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 820E85E4h case   11:*/		return 0x820E85E8;
		  /* 820E85E8h */ case   12:  		/* bc 12, CR0_EQ, 88 */
		/* 820E85E8h case   12:*/		if ( regs.CR[0].eq ) { return 0x820E8640;  }
		/* 820E85E8h case   12:*/		return 0x820E85EC;
		  /* 820E85ECh */ case   13:  		/* lfd FR0, <#[R3 + 32]> */
		/* 820E85ECh case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R3 + 0x00000020) );
		/* 820E85ECh case   13:*/		return 0x820E85F0;
		  /* 820E85F0h */ case   14:  		/* fcmpu CR6, FR0, FR30 */
		/* 820E85F0h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR30);
		/* 820E85F0h case   14:*/		return 0x820E85F4;
		  /* 820E85F4h */ case   15:  		/* bc 4, CR6_EQ, 76 */
		/* 820E85F4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E85F4h case   15:*/		return 0x820E85F8;
		  /* 820E85F8h */ case   16:  		/* lfd FR0, <#[R10 + 32]> */
		/* 820E85F8h case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000020) );
		/* 820E85F8h case   16:*/		return 0x820E85FC;
		  /* 820E85FCh */ case   17:  		/* fcmpu CR6, FR0, FR31 */
		/* 820E85FCh case   17:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820E85FCh case   17:*/		return 0x820E8600;
		  /* 820E8600h */ case   18:  		/* bc 4, CR6_EQ, 64 */
		/* 820E8600h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8600h case   18:*/		return 0x820E8604;
		  /* 820E8604h */ case   19:  		/* lwz R10, <#[R29 + 4]> */
		/* 820E8604h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 820E8604h case   19:*/		return 0x820E8608;
		  /* 820E8608h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E8608h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E8608h case   20:*/		return 0x820E860C;
		  /* 820E860Ch */ case   21:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E860Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E860Ch case   21:*/		return 0x820E8610;
		  /* 820E8610h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E8610h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E8610h case   22:*/		return 0x820E8614;
		  /* 820E8614h */ case   23:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 820E8614h case   23:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 820E8614h case   23:*/		return 0x820E8618;
		  /* 820E8618h */ case   24:  		/* bc 12, CR0_EQ, 40 */
		/* 820E8618h case   24:*/		if ( regs.CR[0].eq ) { return 0x820E8640;  }
		/* 820E8618h case   24:*/		return 0x820E861C;
		  /* 820E861Ch */ case   25:  		/* lwz R11, <#[R29]> */
		/* 820E861Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820E861Ch case   25:*/		return 0x820E8620;
		  /* 820E8620h */ case   26:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 820E8620h case   26:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 820E8620h case   26:*/		return 0x820E8624;
		  /* 820E8624h */ case   27:  		/* bc 12, CR0_EQ, 28 */
		/* 820E8624h case   27:*/		if ( regs.CR[0].eq ) { return 0x820E8640;  }
		/* 820E8624h case   27:*/		return 0x820E8628;
		  /* 820E8628h */ case   28:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E8628h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E8628h case   28:*/		return 0x820E862C;
		  /* 820E862Ch */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 820E862Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E862Ch case   29:*/		return 0x820E8630;
		  /* 820E8630h */ case   30:  		/* bc 4, CR6_EQ, 16 */
		/* 820E8630h case   30:*/		if ( !regs.CR[6].eq ) { return 0x820E8640;  }
		/* 820E8630h case   30:*/		return 0x820E8634;
		  /* 820E8634h */ case   31:  		/* lwz R11, <#[R29 + 8]> */
		/* 820E8634h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 820E8634h case   31:*/		return 0x820E8638;
		  /* 820E8638h */ case   32:  		/* cmpwi CR6, R11, -1 */
		/* 820E8638h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E8638h case   32:*/		return 0x820E863C;
		  /* 820E863Ch */ case   33:  		/* bc 12, CR6_EQ, 64 */
		/* 820E863Ch case   33:*/		if ( regs.CR[6].eq ) { return 0x820E867C;  }
		/* 820E863Ch case   33:*/		return 0x820E8640;
	}
	return 0x820E8640;
} // Block from 820E85B8h-820E8640h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820E8640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8640);
		  /* 820E8640h */ case    0:  		/* addi R17, R17, 1 */
		/* 820E8640h case    0:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 820E8640h case    0:*/		return 0x820E8644;
		  /* 820E8644h */ case    1:  		/* addi R24, R24, 4 */
		/* 820E8644h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 820E8644h case    1:*/		return 0x820E8648;
		  /* 820E8648h */ case    2:  		/* addi R21, R21, 4 */
		/* 820E8648h case    2:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 820E8648h case    2:*/		return 0x820E864C;
		  /* 820E864Ch */ case    3:  		/* cmplw CR6, R17, R16 */
		/* 820E864Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R16);
		/* 820E864Ch case    3:*/		return 0x820E8650;
		  /* 820E8650h */ case    4:  		/* bc 12, CR6_LT, -1192 */
		/* 820E8650h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E81A8;  }
		/* 820E8650h case    4:*/		return 0x820E8654;
		  /* 820E8654h */ case    5:  		/* b 1076 */
		/* 820E8654h case    5:*/		return 0x820E8A88;
		/* 820E8654h case    5:*/		return 0x820E8658;
	}
	return 0x820E8658;
} // Block from 820E8640h-820E8658h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E8658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8658);
		  /* 820E8658h */ case    0:  		/* lis R11, -32254 */
		/* 820E8658h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E8658h case    0:*/		return 0x820E865C;
		  /* 820E865Ch */ case    1:  		/* li R5, 4835 */
		/* 820E865Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x12E3);
		/* 820E865Ch case    1:*/		return 0x820E8660;
		  /* 820E8660h */ case    2:  		/* addi R6, R11, -18292 */
		/* 820E8660h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB88C);
		/* 820E8660h case    2:*/		return 0x820E8664;
		  /* 820E8664h */ case    3:  		/* li R4, 0 */
		/* 820E8664h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E8664h case    3:*/		return 0x820E8668;
		  /* 820E8668h */ case    4:  		/* mr R3, R31 */
		/* 820E8668h case    4:*/		regs.R3 = regs.R31;
		/* 820E8668h case    4:*/		return 0x820E866C;
		  /* 820E866Ch */ case    5:  		/* bl 155844 */
		/* 820E866Ch case    5:*/		regs.LR = 0x820E8670; return 0x8210E730;
		/* 820E866Ch case    5:*/		return 0x820E8670;
		  /* 820E8670h */ case    6:  		/* lis R3, -32768 */
		/* 820E8670h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820E8670h case    6:*/		return 0x820E8674;
		  /* 820E8674h */ case    7:  		/* ori R3, R3, 16389 */
		/* 820E8674h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820E8674h case    7:*/		return 0x820E8678;
		  /* 820E8678h */ case    8:  		/* b 1060 */
		/* 820E8678h case    8:*/		return 0x820E8A9C;
		/* 820E8678h case    8:*/		return 0x820E867C;
	}
	return 0x820E867C;
} // Block from 820E8658h-820E867Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E867Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E867C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E867C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E867C);
		  /* 820E867Ch */ case    0:  		/* stw R4, <#[R27]> */
		/* 820E867Ch case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 820E867Ch case    0:*/		return 0x820E8680;
		  /* 820E8680h */ case    1:  		/* li R11, 0 */
		/* 820E8680h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E8680h case    1:*/		return 0x820E8684;
		  /* 820E8684h */ case    2:  		/* mr R3, R14 */
		/* 820E8684h case    2:*/		regs.R3 = regs.R14;
		/* 820E8684h case    2:*/		return 0x820E8688;
		  /* 820E8688h */ case    3:  		/* stw R11, <#[R15]> */
		/* 820E8688h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 820E8688h case    3:*/		return 0x820E868C;
		  /* 820E868Ch */ case    4:  		/* lwz R11, <#[R22 + 16]> */
		/* 820E868Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000010) );
		/* 820E868Ch case    4:*/		return 0x820E8690;
		  /* 820E8690h */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E8690h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8690h case    5:*/		return 0x820E8694;
		  /* 820E8694h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 820E8694h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8694h case    6:*/		return 0x820E8698;
		  /* 820E8698h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8698h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8698h case    7:*/		return 0x820E869C;
		  /* 820E869Ch */ case    8:  		/* lwzx R23, <#[R11 + R10]> */
		/* 820E869Ch case    8:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E869Ch case    8:*/		return 0x820E86A0;
		  /* 820E86A0h */ case    9:  		/* lwz R27, <#[R23 + 84]> */
		/* 820E86A0h case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R23 + 0x00000054) );
		/* 820E86A0h case    9:*/		return 0x820E86A4;
		  /* 820E86A4h */ case   10:  		/* lwz R11, <#[R23 + 88]> */
		/* 820E86A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000058) );
		/* 820E86A4h case   10:*/		return 0x820E86A8;
		  /* 820E86A8h */ case   11:  		/* cmplw CR6, R27, R11 */
		/* 820E86A8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 820E86A8h case   11:*/		return 0x820E86AC;
		  /* 820E86ACh */ case   12:  		/* bc 12, CR6_GT, 780 */
		/* 820E86ACh case   12:*/		if ( regs.CR[6].gt ) { return 0x820E89B8;  }
		/* 820E86ACh case   12:*/		return 0x820E86B0;
		  /* 820E86B0h */ case   13:  		/* lis R11, -32254 */
		/* 820E86B0h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E86B0h case   13:*/		return 0x820E86B4;
		  /* 820E86B4h */ case   14:  		/* rlwinm R25, R27, 2, 0, 29 */
		/* 820E86B4h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R27);
		/* 820E86B4h case   14:*/		return 0x820E86B8;
		  /* 820E86B8h */ case   15:  		/* addi R24, R11, -18296 */
		/* 820E86B8h case   15:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFB888);
		/* 820E86B8h case   15:*/		return 0x820E86BC;
		  /* 820E86BCh */ case   16:  		/* lwz R11, <#[R31 + 24]> */
		/* 820E86BCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820E86BCh case   16:*/		return 0x820E86C0;
		  /* 820E86C0h */ case   17:  		/* lwzx R29, <#[R25 + R11]> */
		/* 820E86C0h case   17:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 820E86C0h case   17:*/		return 0x820E86C4;
		  /* 820E86C4h */ case   18:  		/* lwz R11, <#[R29 + 12]> */
		/* 820E86C4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 820E86C4h case   18:*/		return 0x820E86C8;
		  /* 820E86C8h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 820E86C8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E86C8h case   19:*/		return 0x820E86CC;
		  /* 820E86CCh */ case   20:  		/* bc 12, CR6_EQ, 352 */
		/* 820E86CCh case   20:*/		if ( regs.CR[6].eq ) { return 0x820E882C;  }
		/* 820E86CCh case   20:*/		return 0x820E86D0;
		  /* 820E86D0h */ case   21:  		/* lwz R11, <#[R29 + 16]> */
		/* 820E86D0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E86D0h case   21:*/		return 0x820E86D4;
		  /* 820E86D4h */ case   22:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E86D4h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E86D4h case   22:*/		return 0x820E86D8;
		  /* 820E86D8h */ case   23:  		/* lwz R9, <#[R15 + 16]> */
		/* 820E86D8h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R15 + 0x00000010) );
		/* 820E86D8h case   23:*/		return 0x820E86DC;
		  /* 820E86DCh */ case   24:  		/* lwz R11, <#[R11]> */
		/* 820E86DCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E86DCh case   24:*/		return 0x820E86E0;
		  /* 820E86E0h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E86E0h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E86E0h case   25:*/		return 0x820E86E4;
		  /* 820E86E4h */ case   26:  		/* lwz R9, <#[R9]> */
		/* 820E86E4h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 820E86E4h case   26:*/		return 0x820E86E8;
		  /* 820E86E8h */ case   27:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E86E8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E86E8h case   27:*/		return 0x820E86EC;
		  /* 820E86ECh */ case   28:  		/* lwz R11, <#[R11 + 20]> */
		/* 820E86ECh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820E86ECh case   28:*/		return 0x820E86F0;
		  /* 820E86F0h */ case   29:  		/* cmplw CR6, R11, R9 */
		/* 820E86F0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E86F0h case   29:*/		return 0x820E86F4;
		  /* 820E86F4h */ case   30:  		/* bc 4, CR6_EQ, 312 */
		/* 820E86F4h case   30:*/		if ( !regs.CR[6].eq ) { return 0x820E882C;  }
		/* 820E86F4h case   30:*/		return 0x820E86F8;
		  /* 820E86F8h */ case   31:  		/* lwz R11, <#[R29 + 4]> */
		/* 820E86F8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 820E86F8h case   31:*/		return 0x820E86FC;
		  /* 820E86FCh */ case   32:  		/* li R26, 0 */
		/* 820E86FCh case   32:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E86FCh case   32:*/		return 0x820E8700;
		  /* 820E8700h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 820E8700h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E8700h case   33:*/		return 0x820E8704;
		  /* 820E8704h */ case   34:  		/* bc 4, CR6_GT, 296 */
		/* 820E8704h case   34:*/		if ( !regs.CR[6].gt ) { return 0x820E882C;  }
		/* 820E8704h case   34:*/		return 0x820E8708;
		  /* 820E8708h */ case   35:  		/* li R28, 0 */
		/* 820E8708h case   35:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820E8708h case   35:*/		return 0x820E870C;
		  /* 820E870Ch */ case   36:  		/* lwz R10, <#[R29 + 8]> */
		/* 820E870Ch case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 820E870Ch case   36:*/		return 0x820E8710;
		  /* 820E8710h */ case   37:  		/* mr R5, R14 */
		/* 820E8710h case   37:*/		regs.R5 = regs.R14;
		/* 820E8710h case   37:*/		return 0x820E8714;
		  /* 820E8714h */ case   38:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E8714h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8714h case   38:*/		return 0x820E8718;
		  /* 820E8718h */ case   39:  		/* lwzx R10, <#[R28 + R10]> */
		/* 820E8718h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 820E8718h case   39:*/		return 0x820E871C;
		  /* 820E871Ch */ case   40:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E871Ch case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E871Ch case   40:*/		return 0x820E8720;
		  /* 820E8720h */ case   41:  		/* lwzx R30, <#[R10 + R11]> */
		/* 820E8720h case   41:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E8720h case   41:*/		return 0x820E8724;
		  /* 820E8724h */ case   42:  		/* lwz R9, <#[R30 + 8]> */
		/* 820E8724h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 820E8724h case   42:*/		return 0x820E8728;
		  /* 820E8728h */ case   43:  		/* cmpwi CR6, R9, -1 */
		/* 820E8728h case   43:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E8728h case   43:*/		return 0x820E872C;
		  /* 820E872Ch */ case   44:  		/* bc 12, CR6_EQ, 128 */
		/* 820E872Ch case   44:*/		if ( regs.CR[6].eq ) { return 0x820E87AC;  }
		/* 820E872Ch case   44:*/		return 0x820E8730;
		  /* 820E8730h */ case   45:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 820E8730h case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 820E8730h case   45:*/		return 0x820E8734;
		  /* 820E8734h */ case   46:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E8734h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E8734h case   46:*/		return 0x820E8738;
		  /* 820E8738h */ case   47:  		/* lwz R11, <#[R11 + 72]> */
		/* 820E8738h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 820E8738h case   47:*/		return 0x820E873C;
		  /* 820E873Ch */ case   48:  		/* cmpwi CR6, R11, -1 */
		/* 820E873Ch case   48:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E873Ch case   48:*/		return 0x820E8740;
		  /* 820E8740h */ case   49:  		/* bc 12, CR6_EQ, 216 */
		/* 820E8740h case   49:*/		if ( regs.CR[6].eq ) { return 0x820E8818;  }
		/* 820E8740h case   49:*/		return 0x820E8744;
		  /* 820E8744h */ case   50:  		/* lwz R10, <#[R31 + 24]> */
		/* 820E8744h case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820E8744h case   50:*/		return 0x820E8748;
		  /* 820E8748h */ case   51:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8748h case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8748h case   51:*/		return 0x820E874C;
		  /* 820E874Ch */ case   52:  		/* lis R7, 4096 */
		/* 820E874Ch case   52:*/		cpu::op::lis<0>(regs,&regs.R7,0x1000);
		/* 820E874Ch case   52:*/		return 0x820E8750;
		  /* 820E8750h */ case   53:  		/* lwzx R8, <#[R11 + R10]> */
		/* 820E8750h case   53:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E8750h case   53:*/		return 0x820E8754;
		  /* 820E8754h */ case   54:  		/* lwz R11, <#[R8]> */
		/* 820E8754h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E8754h case   54:*/		return 0x820E8758;
		  /* 820E8758h */ case   55:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 820E8758h case   55:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 820E8758h case   55:*/		return 0x820E875C;
		  /* 820E875Ch */ case   56:  		/* cmplw CR6, R10, R7 */
		/* 820E875Ch case   56:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820E875Ch case   56:*/		return 0x820E8760;
		  /* 820E8760h */ case   57:  		/* bc 4, CR6_EQ, 72 */
		/* 820E8760h case   57:*/		if ( !regs.CR[6].eq ) { return 0x820E87A8;  }
		/* 820E8760h case   57:*/		return 0x820E8764;
		  /* 820E8764h */ case   58:  		/* rlwinm. R6, R11, 0, 12, 31 */
		/* 820E8764h case   58:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R6,regs.R11);
		/* 820E8764h case   58:*/		return 0x820E8768;
		  /* 820E8768h */ case   59:  		/* li R10, 0 */
		/* 820E8768h case   59:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E8768h case   59:*/		return 0x820E876C;
		  /* 820E876Ch */ case   60:  		/* bc 12, CR0_EQ, 64 */
		/* 820E876Ch case   60:*/		if ( regs.CR[0].eq ) { return 0x820E87AC;  }
		/* 820E876Ch case   60:*/		return 0x820E8770;
		  /* 820E8770h */ case   61:  		/* lwz R7, <#[R8 + 16]> */
		/* 820E8770h case   61:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000010) );
		/* 820E8770h case   61:*/		return 0x820E8774;
		  /* 820E8774h */ case   62:  		/* li R11, 0 */
		/* 820E8774h case   62:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E8774h case   62:*/		return 0x820E8778;
		  /* 820E8778h */ case   63:  		/* lwzx R4, <#[R11 + R7]> */
		/* 820E8778h case   63:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E8778h case   63:*/		return 0x820E877C;
		  /* 820E877Ch */ case   64:  		/* cmplw CR6, R4, R9 */
		/* 820E877Ch case   64:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 820E877Ch case   64:*/		return 0x820E8780;
		  /* 820E8780h */ case   65:  		/* bc 12, CR6_EQ, 24 */
		/* 820E8780h case   65:*/		if ( regs.CR[6].eq ) { return 0x820E8798;  }
		/* 820E8780h case   65:*/		return 0x820E8784;
		  /* 820E8784h */ case   66:  		/* addi R10, R10, 1 */
		/* 820E8784h case   66:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E8784h case   66:*/		return 0x820E8788;
		  /* 820E8788h */ case   67:  		/* addi R11, R11, 4 */
		/* 820E8788h case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E8788h case   67:*/		return 0x820E878C;
		  /* 820E878Ch */ case   68:  		/* cmplw CR6, R10, R6 */
		/* 820E878Ch case   68:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 820E878Ch case   68:*/		return 0x820E8790;
		  /* 820E8790h */ case   69:  		/* bc 12, CR6_LT, -24 */
		/* 820E8790h case   69:*/		if ( regs.CR[6].lt ) { return 0x820E8778;  }
		/* 820E8790h case   69:*/		return 0x820E8794;
		  /* 820E8794h */ case   70:  		/* b 24 */
		/* 820E8794h case   70:*/		return 0x820E87AC;
		/* 820E8794h case   70:*/		return 0x820E8798;
	}
	return 0x820E8798;
} // Block from 820E867Ch-820E8798h (71 instructions)

//////////////////////////////////////////////////////
// Block at 820E8798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8798);
		  /* 820E8798h */ case    0:  		/* lwz R11, <#[R8 + 8]> */
		/* 820E8798h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 820E8798h case    0:*/		return 0x820E879C;
		  /* 820E879Ch */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E879Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E879Ch case    1:*/		return 0x820E87A0;
		  /* 820E87A0h */ case    2:  		/* lwzx R5, <#[R10 + R11]> */
		/* 820E87A0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E87A0h case    2:*/		return 0x820E87A4;
		  /* 820E87A4h */ case    3:  		/* b 8 */
		/* 820E87A4h case    3:*/		return 0x820E87AC;
		/* 820E87A4h case    3:*/		return 0x820E87A8;
	}
	return 0x820E87A8;
} // Block from 820E8798h-820E87A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E87A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E87A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E87A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E87A8);
		  /* 820E87A8h */ case    0:  		/* mr R5, R9 */
		/* 820E87A8h case    0:*/		regs.R5 = regs.R9;
		/* 820E87A8h case    0:*/		return 0x820E87AC;
	}
	return 0x820E87AC;
} // Block from 820E87A8h-820E87ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E87ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E87AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E87AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E87AC);
		  /* 820E87ACh */ case    0:  		/* lwz R11, <#[R15 + 8]> */
		/* 820E87ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 820E87ACh case    0:*/		return 0x820E87B0;
		  /* 820E87B0h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 820E87B0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E87B0h case    1:*/		return 0x820E87B4;
		  /* 820E87B4h */ case    2:  		/* cmplw CR6, R5, R11 */
		/* 820E87B4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 820E87B4h case    2:*/		return 0x820E87B8;
		  /* 820E87B8h */ case    3:  		/* bc 4, CR6_EQ, 96 */
		/* 820E87B8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E8818;  }
		/* 820E87B8h case    3:*/		return 0x820E87BC;
		  /* 820E87BCh */ case    4:  		/* cmpwi CR6, R3, -1 */
		/* 820E87BCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E87BCh case    4:*/		return 0x820E87C0;
		  /* 820E87C0h */ case    5:  		/* bc 4, CR6_EQ, 56 */
		/* 820E87C0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820E87F8;  }
		/* 820E87C0h case    5:*/		return 0x820E87C4;
		  /* 820E87C4h */ case    6:  		/* mr R4, R24 */
		/* 820E87C4h case    6:*/		regs.R4 = regs.R24;
		/* 820E87C4h case    6:*/		return 0x820E87C8;
		  /* 820E87C8h */ case    7:  		/* li R7, 4 */
		/* 820E87C8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 820E87C8h case    7:*/		return 0x820E87CC;
		  /* 820E87CCh */ case    8:  		/* mr R6, R14 */
		/* 820E87CCh case    8:*/		regs.R6 = regs.R14;
		/* 820E87CCh case    8:*/		return 0x820E87D0;
		  /* 820E87D0h */ case    9:  		/* li R5, 21 */
		/* 820E87D0h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x15);
		/* 820E87D0h case    9:*/		return 0x820E87D4;
		  /* 820E87D4h */ case   10:  		/* mr R3, R31 */
		/* 820E87D4h case   10:*/		regs.R3 = regs.R31;
		/* 820E87D4h case   10:*/		return 0x820E87D8;
		  /* 820E87D8h */ case   11:  		/* bl 84400 */
		/* 820E87D8h case   11:*/		regs.LR = 0x820E87DC; return 0x820FD188;
		/* 820E87D8h case   11:*/		return 0x820E87DC;
		  /* 820E87DCh */ case   12:  		/* mr R4, R3 */
		/* 820E87DCh case   12:*/		regs.R4 = regs.R3;
		/* 820E87DCh case   12:*/		return 0x820E87E0;
		  /* 820E87E0h */ case   13:  		/* li R6, 0 */
		/* 820E87E0h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E87E0h case   13:*/		return 0x820E87E4;
		  /* 820E87E4h */ case   14:  		/* fmr FR1, FR31 */
		/* 820E87E4h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E87E4h case   14:*/		return 0x820E87E8;
		  /* 820E87E8h */ case   15:  		/* li R5, 0 */
		/* 820E87E8h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E87E8h case   15:*/		return 0x820E87EC;
		  /* 820E87ECh */ case   16:  		/* mr R3, R31 */
		/* 820E87ECh case   16:*/		regs.R3 = regs.R31;
		/* 820E87ECh case   16:*/		return 0x820E87F0;
		  /* 820E87F0h */ case   17:  		/* bl 84536 */
		/* 820E87F0h case   17:*/		regs.LR = 0x820E87F4; return 0x820FD228;
		/* 820E87F0h case   17:*/		return 0x820E87F4;
		  /* 820E87F4h */ case   18:  		/* stw R3, <#[R30 + 8]> */
		/* 820E87F4h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820E87F4h case   18:*/		return 0x820E87F8;
	}
	return 0x820E87F8;
} // Block from 820E87ACh-820E87F8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820E87F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E87F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E87F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E87F8);
		  /* 820E87F8h */ case    0:  		/* lwz R11, <#[R30 + 56]> */
		/* 820E87F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820E87F8h case    0:*/		return 0x820E87FC;
		  /* 820E87FCh */ case    1:  		/* stw R3, <#[R30 + 8]> */
		/* 820E87FCh case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820E87FCh case    1:*/		return 0x820E8800;
		  /* 820E8800h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 820E8800h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E8800h case    2:*/		return 0x820E8804;
		  /* 820E8804h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 820E8804h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E8818;  }
		/* 820E8804h case    3:*/		return 0x820E8808;
		  /* 820E8808h */ case    4:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E8808h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8808h case    4:*/		return 0x820E880C;
		  /* 820E880Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E880Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E880Ch case    5:*/		return 0x820E8810;
		  /* 820E8810h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E8810h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E8810h case    6:*/		return 0x820E8814;
		  /* 820E8814h */ case    7:  		/* stw R3, <#[R11 + 8]> */
		/* 820E8814h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820E8814h case    7:*/		return 0x820E8818;
	}
	return 0x820E8818;
} // Block from 820E87F8h-820E8818h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E8818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8818);
		  /* 820E8818h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 820E8818h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 820E8818h case    0:*/		return 0x820E881C;
		  /* 820E881Ch */ case    1:  		/* addi R26, R26, 1 */
		/* 820E881Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 820E881Ch case    1:*/		return 0x820E8820;
		  /* 820E8820h */ case    2:  		/* addi R28, R28, 4 */
		/* 820E8820h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 820E8820h case    2:*/		return 0x820E8824;
		  /* 820E8824h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 820E8824h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820E8824h case    3:*/		return 0x820E8828;
		  /* 820E8828h */ case    4:  		/* bc 12, CR6_LT, -284 */
		/* 820E8828h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E870C;  }
		/* 820E8828h case    4:*/		return 0x820E882C;
	}
	return 0x820E882C;
} // Block from 820E8818h-820E882Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E882Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E882C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E882C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E882C);
		  /* 820E882Ch */ case    0:  		/* lwz R11, <#[R23 + 88]> */
		/* 820E882Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000058) );
		/* 820E882Ch case    0:*/		return 0x820E8830;
		  /* 820E8830h */ case    1:  		/* addi R27, R27, 1 */
		/* 820E8830h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820E8830h case    1:*/		return 0x820E8834;
		  /* 820E8834h */ case    2:  		/* addi R25, R25, 4 */
		/* 820E8834h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 820E8834h case    2:*/		return 0x820E8838;
		  /* 820E8838h */ case    3:  		/* cmplw CR6, R27, R11 */
		/* 820E8838h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 820E8838h case    3:*/		return 0x820E883C;
		  /* 820E883Ch */ case    4:  		/* bc 4, CR6_GT, -384 */
		/* 820E883Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x820E86BC;  }
		/* 820E883Ch case    4:*/		return 0x820E8840;
		  /* 820E8840h */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 820E8840h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E8840h case    5:*/		return 0x820E8844;
		  /* 820E8844h */ case    6:  		/* bc 12, CR6_EQ, 372 */
		/* 820E8844h case    6:*/		if ( regs.CR[6].eq ) { return 0x820E89B8;  }
		/* 820E8844h case    6:*/		return 0x820E8848;
	}
	return 0x820E8848;
} // Block from 820E882Ch-820E8848h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E8848h
// Function '?FoldBreak@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8848);
		  /* 820E8848h */ case    0:  		/* li R6, 0 */
		/* 820E8848h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E8848h case    0:*/		return 0x820E884C;
		  /* 820E884Ch */ case    1:  		/* fmr FR1, FR31 */
		/* 820E884Ch case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E884Ch case    1:*/		return 0x820E8850;
		  /* 820E8850h */ case    2:  		/* li R5, 0 */
		/* 820E8850h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E8850h case    2:*/		return 0x820E8854;
		  /* 820E8854h */ case    3:  		/* li R4, 0 */
		/* 820E8854h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E8854h case    3:*/		return 0x820E8858;
		  /* 820E8858h */ case    4:  		/* mr R3, R31 */
		/* 820E8858h case    4:*/		regs.R3 = regs.R31;
		/* 820E8858h case    4:*/		return 0x820E885C;
		  /* 820E885Ch */ case    5:  		/* bl 84428 */
		/* 820E885Ch case    5:*/		regs.LR = 0x820E8860; return 0x820FD228;
		/* 820E885Ch case    5:*/		return 0x820E8860;
		  /* 820E8860h */ case    6:  		/* mr R30, R3 */
		/* 820E8860h case    6:*/		regs.R30 = regs.R3;
		/* 820E8860h case    6:*/		return 0x820E8864;
		  /* 820E8864h */ case    7:  		/* li R6, 0 */
		/* 820E8864h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E8864h case    7:*/		return 0x820E8868;
		  /* 820E8868h */ case    8:  		/* fmr FR1, FR31 */
		/* 820E8868h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E8868h case    8:*/		return 0x820E886C;
		  /* 820E886Ch */ case    9:  		/* li R5, 0 */
		/* 820E886Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E886Ch case    9:*/		return 0x820E8870;
		  /* 820E8870h */ case   10:  		/* li R4, 0 */
		/* 820E8870h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E8870h case   10:*/		return 0x820E8874;
		  /* 820E8874h */ case   11:  		/* mr R3, R31 */
		/* 820E8874h case   11:*/		regs.R3 = regs.R31;
		/* 820E8874h case   11:*/		return 0x820E8878;
		  /* 820E8878h */ case   12:  		/* bl 84400 */
		/* 820E8878h case   12:*/		regs.LR = 0x820E887C; return 0x820FD228;
		/* 820E8878h case   12:*/		return 0x820E887C;
		  /* 820E887Ch */ case   13:  		/* cmpwi CR6, R30, -1 */
		/* 820E887Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R30,0xFFFFFFFF);
		/* 820E887Ch case   13:*/		return 0x820E8880;
		  /* 820E8880h */ case   14:  		/* bc 12, CR6_EQ, -1868 */
		/* 820E8880h case   14:*/		if ( regs.CR[6].eq ) { return 0x820E8134;  }
		/* 820E8880h case   14:*/		return 0x820E8884;
		  /* 820E8884h */ case   15:  		/* cmpwi CR6, R3, -1 */
		/* 820E8884h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E8884h case   15:*/		return 0x820E8888;
		  /* 820E8888h */ case   16:  		/* bc 12, CR6_EQ, -1876 */
		/* 820E8888h case   16:*/		if ( regs.CR[6].eq ) { return 0x820E8134;  }
		/* 820E8888h case   16:*/		return 0x820E888C;
		  /* 820E888Ch */ case   17:  		/* lwz R11, <#[R22 + 8]> */
		/* 820E888Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 820E888Ch case   17:*/		return 0x820E8890;
		  /* 820E8890h */ case   18:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 820E8890h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 820E8890h case   18:*/		return 0x820E8894;
		  /* 820E8894h */ case   19:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E8894h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8894h case   19:*/		return 0x820E8898;
		  /* 820E8898h */ case   20:  		/* rlwinm R8, R3, 2, 0, 29 */
		/* 820E8898h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R3);
		/* 820E8898h case   20:*/		return 0x820E889C;
		  /* 820E889Ch */ case   21:  		/* lwz R11, <#[R11]> */
		/* 820E889Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E889Ch case   21:*/		return 0x820E88A0;
		  /* 820E88A0h */ case   22:  		/* lwzx R30, <#[R10 + R9]> */
		/* 820E88A0h case   22:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E88A0h case   22:*/		return 0x820E88A4;
		  /* 820E88A4h */ case   23:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E88A4h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E88A4h case   23:*/		return 0x820E88A8;
		  /* 820E88A8h */ case   24:  		/* lwzx R29, <#[R8 + R9]> */
		/* 820E88A8h case   24:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E88A8h case   24:*/		return 0x820E88AC;
		  /* 820E88ACh */ case   25:  		/* mr R3, R30 */
		/* 820E88ACh case   25:*/		regs.R3 = regs.R30;
		/* 820E88ACh case   25:*/		return 0x820E88B0;
		  /* 820E88B0h */ case   26:  		/* lwzx R28, <#[R11 + R9]> */
		/* 820E88B0h case   26:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E88B0h case   26:*/		return 0x820E88B4;
		  /* 820E88B4h */ case   27:  		/* mr R4, R28 */
		/* 820E88B4h case   27:*/		regs.R4 = regs.R28;
		/* 820E88B4h case   27:*/		return 0x820E88B8;
		  /* 820E88B8h */ case   28:  		/* bl 82672 */
		/* 820E88B8h case   28:*/		regs.LR = 0x820E88BC; return 0x820FCBA8;
		/* 820E88B8h case   28:*/		return 0x820E88BC;
		  /* 820E88BCh */ case   29:  		/* mr R4, R28 */
		/* 820E88BCh case   29:*/		regs.R4 = regs.R28;
		/* 820E88BCh case   29:*/		return 0x820E88C0;
		  /* 820E88C0h */ case   30:  		/* mr R3, R29 */
		/* 820E88C0h case   30:*/		regs.R3 = regs.R29;
		/* 820E88C0h case   30:*/		return 0x820E88C4;
		  /* 820E88C4h */ case   31:  		/* bl 82660 */
		/* 820E88C4h case   31:*/		regs.LR = 0x820E88C8; return 0x820FCBA8;
		/* 820E88C4h case   31:*/		return 0x820E88C8;
		  /* 820E88C8h */ case   32:  		/* li R11, 2 */
		/* 820E88C8h case   32:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E88C8h case   32:*/		return 0x820E88CC;
		  /* 820E88CCh */ case   33:  		/* stw R19, <#[R30 + 16]> */
		/* 820E88CCh case   33:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000010) );
		/* 820E88CCh case   33:*/		return 0x820E88D0;
		  /* 820E88D0h */ case   34:  		/* li R3, 116 */
		/* 820E88D0h case   34:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E88D0h case   34:*/		return 0x820E88D4;
		  /* 820E88D4h */ case   35:  		/* stw R11, <#[R29 + 16]> */
		/* 820E88D4h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820E88D4h case   35:*/		return 0x820E88D8;
		  /* 820E88D8h */ case   36:  		/* bl 81088 */
		/* 820E88D8h case   36:*/		regs.LR = 0x820E88DC; return 0x820FC598;
		/* 820E88D8h case   36:*/		return 0x820E88DC;
		  /* 820E88DCh */ case   37:  		/* cmplwi CR0, R3, 0 */
		/* 820E88DCh case   37:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E88DCh case   37:*/		return 0x820E88E0;
		  /* 820E88E0h */ case   38:  		/* bc 12, CR0_EQ, 16 */
		/* 820E88E0h case   38:*/		if ( regs.CR[0].eq ) { return 0x820E88F0;  }
		/* 820E88E0h case   38:*/		return 0x820E88E4;
		  /* 820E88E4h */ case   39:  		/* bl 79292 */
		/* 820E88E4h case   39:*/		regs.LR = 0x820E88E8; return 0x820FBEA0;
		/* 820E88E4h case   39:*/		return 0x820E88E8;
		  /* 820E88E8h */ case   40:  		/* mr R30, R3 */
		/* 820E88E8h case   40:*/		regs.R30 = regs.R3;
		/* 820E88E8h case   40:*/		return 0x820E88EC;
		  /* 820E88ECh */ case   41:  		/* b 8 */
		/* 820E88ECh case   41:*/		return 0x820E88F4;
		/* 820E88ECh case   41:*/		return 0x820E88F0;
	}
	return 0x820E88F0;
} // Block from 820E8848h-820E88F0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820E88F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E88F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E88F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E88F0);
		  /* 820E88F0h */ case    0:  		/* li R30, 0 */
		/* 820E88F0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E88F0h case    0:*/		return 0x820E88F4;
	}
	return 0x820E88F4;
} // Block from 820E88F0h-820E88F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E88F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E88F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E88F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E88F4);
		  /* 820E88F4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820E88F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E88F4h case    0:*/		return 0x820E88F8;
		  /* 820E88F8h */ case    1:  		/* bc 12, CR6_EQ, -1988 */
		/* 820E88F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E8134;  }
		/* 820E88F8h case    1:*/		return 0x820E88FC;
		  /* 820E88FCh */ case    2:  		/* lis R4, 29712 */
		/* 820E88FCh case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x7410);
		/* 820E88FCh case    2:*/		return 0x820E8900;
		  /* 820E8900h */ case    3:  		/* li R7, 0 */
		/* 820E8900h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E8900h case    3:*/		return 0x820E8904;
		  /* 820E8904h */ case    4:  		/* li R6, 1 */
		/* 820E8904h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E8904h case    4:*/		return 0x820E8908;
		  /* 820E8908h */ case    5:  		/* li R5, 3 */
		/* 820E8908h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820E8908h case    5:*/		return 0x820E890C;
		  /* 820E890Ch */ case    6:  		/* ori R4, R4, 1 */
		/* 820E890Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E890Ch case    6:*/		return 0x820E8910;
		  /* 820E8910h */ case    7:  		/* mr R3, R30 */
		/* 820E8910h case    7:*/		regs.R3 = regs.R30;
		/* 820E8910h case    7:*/		return 0x820E8914;
		  /* 820E8914h */ case    8:  		/* bl 81180 */
		/* 820E8914h case    8:*/		regs.LR = 0x820E8918; return 0x820FC630;
		/* 820E8914h case    8:*/		return 0x820E8918;
		  /* 820E8918h */ case    9:  		/* or. R29, R3, R3 */
		/* 820E8918h case    9:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E8918h case    9:*/		return 0x820E891C;
		  /* 820E891Ch */ case   10:  		/* mr R3, R30 */
		/* 820E891Ch case   10:*/		regs.R3 = regs.R30;
		/* 820E891Ch case   10:*/		return 0x820E8920;
		  /* 820E8920h */ case   11:  		/* bc 4, CR0_LT, 24 */
		/* 820E8920h case   11:*/		if ( !regs.CR[0].lt ) { return 0x820E8938;  }
		/* 820E8920h case   11:*/		return 0x820E8924;
		  /* 820E8924h */ case   12:  		/* bl 1264284 */
		/* 820E8924h case   12:*/		regs.LR = 0x820E8928; return 0x8221D3C0;
		/* 820E8924h case   12:*/		return 0x820E8928;
		  /* 820E8928h */ case   13:  		/* mr R3, R30 */
		/* 820E8928h case   13:*/		regs.R3 = regs.R30;
		/* 820E8928h case   13:*/		return 0x820E892C;
		  /* 820E892Ch */ case   14:  		/* bl 81092 */
		/* 820E892Ch case   14:*/		regs.LR = 0x820E8930; return 0x820FC5F0;
		/* 820E892Ch case   14:*/		return 0x820E8930;
		  /* 820E8930h */ case   15:  		/* mr R3, R29 */
		/* 820E8930h case   15:*/		regs.R3 = regs.R29;
		/* 820E8930h case   15:*/		return 0x820E8934;
		  /* 820E8934h */ case   16:  		/* b 360 */
		/* 820E8934h case   16:*/		return 0x820E8A9C;
		/* 820E8934h case   16:*/		return 0x820E8938;
	}
	return 0x820E8938;
} // Block from 820E88F4h-820E8938h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820E8938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8938);
		  /* 820E8938h */ case    0:  		/* mr R4, R22 */
		/* 820E8938h case    0:*/		regs.R4 = regs.R22;
		/* 820E8938h case    0:*/		return 0x820E893C;
		  /* 820E893Ch */ case    1:  		/* bl 79284 */
		/* 820E893Ch case    1:*/		regs.LR = 0x820E8940; return 0x820FBEF0;
		/* 820E893Ch case    1:*/		return 0x820E8940;
		  /* 820E8940h */ case    2:  		/* or. R29, R3, R3 */
		/* 820E8940h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E8940h case    2:*/		return 0x820E8944;
		  /* 820E8944h */ case    3:  		/* bc 4, CR0_LT, 12 */
		/* 820E8944h case    3:*/		if ( !regs.CR[0].lt ) { return 0x820E8950;  }
		/* 820E8944h case    3:*/		return 0x820E8948;
		  /* 820E8948h */ case    4:  		/* mr R3, R30 */
		/* 820E8948h case    4:*/		regs.R3 = regs.R30;
		/* 820E8948h case    4:*/		return 0x820E894C;
		  /* 820E894Ch */ case    5:  		/* b -40 */
		/* 820E894Ch case    5:*/		return 0x820E8924;
		/* 820E894Ch case    5:*/		return 0x820E8950;
	}
	return 0x820E8950;
} // Block from 820E8938h-820E8950h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E8950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8950);
		  /* 820E8950h */ case    0:  		/* lwz R11, <#[R22 + 16]> */
		/* 820E8950h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000010) );
		/* 820E8950h case    0:*/		return 0x820E8954;
		  /* 820E8954h */ case    1:  		/* mr R4, R30 */
		/* 820E8954h case    1:*/		regs.R4 = regs.R30;
		/* 820E8954h case    1:*/		return 0x820E8958;
		  /* 820E8958h */ case    2:  		/* lwz R10, <#[R30 + 16]> */
		/* 820E8958h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 820E8958h case    2:*/		return 0x820E895C;
		  /* 820E895Ch */ case    3:  		/* mr R3, R22 */
		/* 820E895Ch case    3:*/		regs.R3 = regs.R22;
		/* 820E895Ch case    3:*/		return 0x820E8960;
		  /* 820E8960h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 820E8960h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8960h case    4:*/		return 0x820E8964;
		  /* 820E8964h */ case    5:  		/* stw R11, <#[R10]> */
		/* 820E8964h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E8964h case    5:*/		return 0x820E8968;
		  /* 820E8968h */ case    6:  		/* lwz R11, <#[R22 + 8]> */
		/* 820E8968h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 820E8968h case    6:*/		return 0x820E896C;
		  /* 820E896Ch */ case    7:  		/* lwz R11, <#[R11]> */
		/* 820E896Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E896Ch case    7:*/		return 0x820E8970;
		  /* 820E8970h */ case    8:  		/* lwz R10, <#[R30 + 8]> */
		/* 820E8970h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820E8970h case    8:*/		return 0x820E8974;
		  /* 820E8974h */ case    9:  		/* stw R11, <#[R10]> */
		/* 820E8974h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E8974h case    9:*/		return 0x820E8978;
		  /* 820E8978h */ case   10:  		/* lwz R10, <#[R22 + 8]> */
		/* 820E8978h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000008) );
		/* 820E8978h case   10:*/		return 0x820E897C;
		  /* 820E897Ch */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 820E897Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820E897Ch case   11:*/		return 0x820E8980;
		  /* 820E8980h */ case   12:  		/* lwz R10, <#[R10]> */
		/* 820E8980h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820E8980h case   12:*/		return 0x820E8984;
		  /* 820E8984h */ case   13:  		/* stw R10, <#[R11 + 4]> */
		/* 820E8984h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820E8984h case   13:*/		return 0x820E8988;
		  /* 820E8988h */ case   14:  		/* lwz R11, <#[R22 + 8]> */
		/* 820E8988h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 820E8988h case   14:*/		return 0x820E898C;
		  /* 820E898Ch */ case   15:  		/* lwz R10, <#[R30 + 8]> */
		/* 820E898Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820E898Ch case   15:*/		return 0x820E8990;
		  /* 820E8990h */ case   16:  		/* lwz R11, <#[R11]> */
		/* 820E8990h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8990h case   16:*/		return 0x820E8994;
		  /* 820E8994h */ case   17:  		/* stw R11, <#[R10 + 8]> */
		/* 820E8994h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 820E8994h case   17:*/		return 0x820E8998;
		  /* 820E8998h */ case   18:  		/* bl 81848 */
		/* 820E8998h case   18:*/		regs.LR = 0x820E899C; return 0x820FC950;
		/* 820E8998h case   18:*/		return 0x820E899C;
		  /* 820E899Ch */ case   19:  		/* mr R20, R3 */
		/* 820E899Ch case   19:*/		regs.R20 = regs.R3;
		/* 820E899Ch case   19:*/		return 0x820E89A0;
		  /* 820E89A0h */ case   20:  		/* mr R3, R30 */
		/* 820E89A0h case   20:*/		regs.R3 = regs.R30;
		/* 820E89A0h case   20:*/		return 0x820E89A4;
		  /* 820E89A4h */ case   21:  		/* bl 1264156 */
		/* 820E89A4h case   21:*/		regs.LR = 0x820E89A8; return 0x8221D3C0;
		/* 820E89A4h case   21:*/		return 0x820E89A8;
		  /* 820E89A8h */ case   22:  		/* mr R3, R30 */
		/* 820E89A8h case   22:*/		regs.R3 = regs.R30;
		/* 820E89A8h case   22:*/		return 0x820E89AC;
		  /* 820E89ACh */ case   23:  		/* bl 80964 */
		/* 820E89ACh case   23:*/		regs.LR = 0x820E89B0; return 0x820FC5F0;
		/* 820E89ACh case   23:*/		return 0x820E89B0;
		  /* 820E89B0h */ case   24:  		/* cmpwi CR6, R20, 0 */
		/* 820E89B0h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 820E89B0h case   24:*/		return 0x820E89B4;
		  /* 820E89B4h */ case   25:  		/* bc 12, CR6_LT, 228 */
		/* 820E89B4h case   25:*/		if ( regs.CR[6].lt ) { return 0x820E8A98;  }
		/* 820E89B4h case   25:*/		return 0x820E89B8;
	}
	return 0x820E89B8;
} // Block from 820E8950h-820E89B8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820E89B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E89B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E89B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E89B8);
		  /* 820E89B8h */ case    0:  		/* lwz R8, <#[R23 + 84]> */
		/* 820E89B8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x00000054) );
		/* 820E89B8h case    0:*/		return 0x820E89BC;
		  /* 820E89BCh */ case    1:  		/* lwz R11, <#[R23 + 88]> */
		/* 820E89BCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000058) );
		/* 820E89BCh case    1:*/		return 0x820E89C0;
		  /* 820E89C0h */ case    2:  		/* cmplw CR6, R8, R11 */
		/* 820E89C0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 820E89C0h case    2:*/		return 0x820E89C4;
		  /* 820E89C4h */ case    3:  		/* bc 12, CR6_GT, 116 */
		/* 820E89C4h case    3:*/		if ( regs.CR[6].gt ) { return 0x820E8A38;  }
		/* 820E89C4h case    3:*/		return 0x820E89C8;
		  /* 820E89C8h */ case    4:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 820E89C8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 820E89C8h case    4:*/		return 0x820E89CC;
		  /* 820E89CCh */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 820E89CCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820E89CCh case    5:*/		return 0x820E89D0;
		  /* 820E89D0h */ case    6:  		/* lis R7, 8320 */
		/* 820E89D0h case    6:*/		cpu::op::lis<0>(regs,&regs.R7,0x2080);
		/* 820E89D0h case    6:*/		return 0x820E89D4;
		  /* 820E89D4h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E89D4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E89D4h case    7:*/		return 0x820E89D8;
		  /* 820E89D8h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 820E89D8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E89D8h case    8:*/		return 0x820E89DC;
		  /* 820E89DCh */ case    9:  		/* rlwinm R6, R9, 0, 0, 11 */
		/* 820E89DCh case    9:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R6,regs.R9);
		/* 820E89DCh case    9:*/		return 0x820E89E0;
		  /* 820E89E0h */ case   10:  		/* cmplw CR6, R6, R7 */
		/* 820E89E0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 820E89E0h case   10:*/		return 0x820E89E4;
		  /* 820E89E4h */ case   11:  		/* bc 4, CR6_EQ, 64 */
		/* 820E89E4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E8A24;  }
		/* 820E89E4h case   11:*/		return 0x820E89E8;
		  /* 820E89E8h */ case   12:  		/* lwz R7, <#[R11 + 8]> */
		/* 820E89E8h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 820E89E8h case   12:*/		return 0x820E89EC;
		  /* 820E89ECh */ case   13:  		/* lwz R6, <#[R31 + 20]> */
		/* 820E89ECh case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 820E89ECh case   13:*/		return 0x820E89F0;
		  /* 820E89F0h */ case   14:  		/* lwz R5, <#[R15 + 16]> */
		/* 820E89F0h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R15 + 0x00000010) );
		/* 820E89F0h case   14:*/		return 0x820E89F4;
		  /* 820E89F4h */ case   15:  		/* lwz R7, <#[R7]> */
		/* 820E89F4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 820E89F4h case   15:*/		return 0x820E89F8;
		  /* 820E89F8h */ case   16:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820E89F8h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820E89F8h case   16:*/		return 0x820E89FC;
		  /* 820E89FCh */ case   17:  		/* lwz R5, <#[R5]> */
		/* 820E89FCh case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000000) );
		/* 820E89FCh case   17:*/		return 0x820E8A00;
		  /* 820E8A00h */ case   18:  		/* lwzx R7, <#[R7 + R6]> */
		/* 820E8A00h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 820E8A00h case   18:*/		return 0x820E8A04;
		  /* 820E8A04h */ case   19:  		/* lwz R7, <#[R7 + 20]> */
		/* 820E8A04h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000014) );
		/* 820E8A04h case   19:*/		return 0x820E8A08;
		  /* 820E8A08h */ case   20:  		/* cmplw CR6, R7, R5 */
		/* 820E8A08h case   20:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R5);
		/* 820E8A08h case   20:*/		return 0x820E8A0C;
		  /* 820E8A0Ch */ case   21:  		/* bc 4, CR6_EQ, 24 */
		/* 820E8A0Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x820E8A24;  }
		/* 820E8A0Ch case   21:*/		return 0x820E8A10;
		  /* 820E8A10h */ case   22:  		/* rlwinm R9, R9, 0, 12, 31 */
		/* 820E8A10h case   22:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R9,regs.R9);
		/* 820E8A10h case   22:*/		return 0x820E8A14;
		  /* 820E8A14h */ case   23:  		/* oris R7, R9, 4096 */
		/* 820E8A14h case   23:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R9,0x1000);
		/* 820E8A14h case   23:*/		return 0x820E8A18;
		  /* 820E8A18h */ case   24:  		/* stw R9, <#[R11 + 12]> */
		/* 820E8A18h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E8A18h case   24:*/		return 0x820E8A1C;
		  /* 820E8A1Ch */ case   25:  		/* stw R9, <#[R11 + 4]> */
		/* 820E8A1Ch case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820E8A1Ch case   25:*/		return 0x820E8A20;
		  /* 820E8A20h */ case   26:  		/* stw R7, <#[R11]> */
		/* 820E8A20h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8A20h case   26:*/		return 0x820E8A24;
	}
	return 0x820E8A24;
} // Block from 820E89B8h-820E8A24h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820E8A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8A24);
		  /* 820E8A24h */ case    0:  		/* lwz R11, <#[R23 + 88]> */
		/* 820E8A24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000058) );
		/* 820E8A24h case    0:*/		return 0x820E8A28;
		  /* 820E8A28h */ case    1:  		/* addi R8, R8, 1 */
		/* 820E8A28h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E8A28h case    1:*/		return 0x820E8A2C;
		  /* 820E8A2Ch */ case    2:  		/* addi R10, R10, 4 */
		/* 820E8A2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E8A2Ch case    2:*/		return 0x820E8A30;
		  /* 820E8A30h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 820E8A30h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 820E8A30h case    3:*/		return 0x820E8A34;
		  /* 820E8A34h */ case    4:  		/* bc 4, CR6_GT, -104 */
		/* 820E8A34h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820E89CC;  }
		/* 820E8A34h case    4:*/		return 0x820E8A38;
	}
	return 0x820E8A38;
} // Block from 820E8A24h-820E8A38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E8A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8A38);
		  /* 820E8A38h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820E8A38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820E8A38h case    0:*/		return 0x820E8A3C;
		  /* 820E8A3Ch */ case    1:  		/* li R9, 0 */
		/* 820E8A3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E8A3Ch case    1:*/		return 0x820E8A40;
		  /* 820E8A40h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820E8A40h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E8A40h case    2:*/		return 0x820E8A44;
		  /* 820E8A44h */ case    3:  		/* bc 4, CR6_GT, 68 */
		/* 820E8A44h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820E8A88;  }
		/* 820E8A44h case    3:*/		return 0x820E8A48;
		  /* 820E8A48h */ case    4:  		/* li R11, 0 */
		/* 820E8A48h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E8A48h case    4:*/		return 0x820E8A4C;
		  /* 820E8A4Ch */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E8A4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8A4Ch case    5:*/		return 0x820E8A50;
		  /* 820E8A50h */ case    6:  		/* lwz R8, <#[R15 + 16]> */
		/* 820E8A50h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R15 + 0x00000010) );
		/* 820E8A50h case    6:*/		return 0x820E8A54;
		  /* 820E8A54h */ case    7:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820E8A54h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E8A54h case    7:*/		return 0x820E8A58;
		  /* 820E8A58h */ case    8:  		/* lwz R8, <#[R8]> */
		/* 820E8A58h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 820E8A58h case    8:*/		return 0x820E8A5C;
		  /* 820E8A5Ch */ case    9:  		/* lwz R7, <#[R10 + 20]> */
		/* 820E8A5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000014) );
		/* 820E8A5Ch case    9:*/		return 0x820E8A60;
		  /* 820E8A60h */ case   10:  		/* cmplw CR6, R7, R8 */
		/* 820E8A60h case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 820E8A60h case   10:*/		return 0x820E8A64;
		  /* 820E8A64h */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 820E8A64h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E8A74;  }
		/* 820E8A64h case   11:*/		return 0x820E8A68;
		  /* 820E8A68h */ case   12:  		/* lwz R8, <#[R22 + 16]> */
		/* 820E8A68h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R22 + 0x00000010) );
		/* 820E8A68h case   12:*/		return 0x820E8A6C;
		  /* 820E8A6Ch */ case   13:  		/* lwz R8, <#[R8]> */
		/* 820E8A6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 820E8A6Ch case   13:*/		return 0x820E8A70;
		  /* 820E8A70h */ case   14:  		/* stw R8, <#[R10 + 20]> */
		/* 820E8A70h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 820E8A70h case   14:*/		return 0x820E8A74;
	}
	return 0x820E8A74;
} // Block from 820E8A38h-820E8A74h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E8A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8A74);
		  /* 820E8A74h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 820E8A74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820E8A74h case    0:*/		return 0x820E8A78;
		  /* 820E8A78h */ case    1:  		/* addi R9, R9, 1 */
		/* 820E8A78h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E8A78h case    1:*/		return 0x820E8A7C;
		  /* 820E8A7Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 820E8A7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E8A7Ch case    2:*/		return 0x820E8A80;
		  /* 820E8A80h */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 820E8A80h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E8A80h case    3:*/		return 0x820E8A84;
		  /* 820E8A84h */ case    4:  		/* bc 12, CR6_LT, -56 */
		/* 820E8A84h case    4:*/		if ( regs.CR[6].lt ) { return 0x820E8A4C;  }
		/* 820E8A84h case    4:*/		return 0x820E8A88;
	}
	return 0x820E8A88;
} // Block from 820E8A74h-820E8A88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E8A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8A88);
		  /* 820E8A88h */ case    0:  		/* mr R3, R18 */
		/* 820E8A88h case    0:*/		regs.R3 = regs.R18;
		/* 820E8A88h case    0:*/		return 0x820E8A8C;
		  /* 820E8A8Ch */ case    1:  		/* bl 1263924 */
		/* 820E8A8Ch case    1:*/		regs.LR = 0x820E8A90; return 0x8221D3C0;
		/* 820E8A8Ch case    1:*/		return 0x820E8A90;
		  /* 820E8A90h */ case    2:  		/* mr R3, R18 */
		/* 820E8A90h case    2:*/		regs.R3 = regs.R18;
		/* 820E8A90h case    2:*/		return 0x820E8A94;
		  /* 820E8A94h */ case    3:  		/* bl 80732 */
		/* 820E8A94h case    3:*/		regs.LR = 0x820E8A98; return 0x820FC5F0;
		/* 820E8A94h case    3:*/		return 0x820E8A98;
	}
	return 0x820E8A98;
} // Block from 820E8A88h-820E8A98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E8A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8A98);
		  /* 820E8A98h */ case    0:  		/* mr R3, R20 */
		/* 820E8A98h case    0:*/		regs.R3 = regs.R20;
		/* 820E8A98h case    0:*/		return 0x820E8A9C;
	}
	return 0x820E8A9C;
} // Block from 820E8A98h-820E8A9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E8A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8A9C);
		  /* 820E8A9Ch */ case    0:  		/* addi R1, R1, 784 */
		/* 820E8A9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x310);
		/* 820E8A9Ch case    0:*/		return 0x820E8AA0;
		  /* 820E8AA0h */ case    1:  		/* lfd FR30, <#[R1 - 168]> */
		/* 820E8AA0h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820E8AA0h case    1:*/		return 0x820E8AA4;
		  /* 820E8AA4h */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 820E8AA4h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820E8AA4h case    2:*/		return 0x820E8AA8;
		  /* 820E8AA8h */ case    3:  		/* b -358456 */
		/* 820E8AA8h case    3:*/		return 0x82091270;
		/* 820E8AA8h case    3:*/		return 0x820E8AAC;
		  /* 820E8AACh */ case    4:  		/* nop */
		/* 820E8AACh case    4:*/		cpu::op::nop();
		/* 820E8AACh case    4:*/		return 0x820E8AB0;
	}
	return 0x820E8AB0;
} // Block from 820E8A9Ch-820E8AB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E8AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8AB0);
		  /* 820E8AB0h */ case    0:  		/* mfspr R12, LR */
		/* 820E8AB0h case    0:*/		regs.R12 = regs.LR;
		/* 820E8AB0h case    0:*/		return 0x820E8AB4;
		  /* 820E8AB4h */ case    1:  		/* bl -358500 */
		/* 820E8AB4h case    1:*/		regs.LR = 0x820E8AB8; return 0x82091250;
		/* 820E8AB4h case    1:*/		return 0x820E8AB8;
		  /* 820E8AB8h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 820E8AB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 820E8AB8h case    2:*/		return 0x820E8ABC;
		  /* 820E8ABCh */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E8ABCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E8ABCh case    3:*/		return 0x820E8AC0;
		  /* 820E8AC0h */ case    4:  		/* lis R11, -32254 */
		/* 820E8AC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E8AC0h case    4:*/		return 0x820E8AC4;
		  /* 820E8AC4h */ case    5:  		/* li R8, 3 */
		/* 820E8AC4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E8AC4h case    5:*/		return 0x820E8AC8;
		  /* 820E8AC8h */ case    6:  		/* addi R29, R11, -21928 */
		/* 820E8AC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFAA58);
		/* 820E8AC8h case    6:*/		return 0x820E8ACC;
		  /* 820E8ACCh */ case    7:  		/* li R26, 0 */
		/* 820E8ACCh case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E8ACCh case    7:*/		return 0x820E8AD0;
		  /* 820E8AD0h */ case    8:  		/* stw R8, <#[R1 + 124]> */
		/* 820E8AD0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E8AD0h case    8:*/		return 0x820E8AD4;
		  /* 820E8AD4h */ case    9:  		/* li R28, 1 */
		/* 820E8AD4h case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820E8AD4h case    9:*/		return 0x820E8AD8;
		  /* 820E8AD8h */ case   10:  		/* lwz R10, <#[R4]> */
		/* 820E8AD8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820E8AD8h case   10:*/		return 0x820E8ADC;
		  /* 820E8ADCh */ case   11:  		/* li R11, 2 */
		/* 820E8ADCh case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E8ADCh case   11:*/		return 0x820E8AE0;
		  /* 820E8AE0h */ case   12:  		/* addi R5, R29, -96 */
		/* 820E8AE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFFA0);
		/* 820E8AE0h case   12:*/		return 0x820E8AE4;
		  /* 820E8AE4h */ case   13:  		/* stw R26, <#[R1 + 96]> */
		/* 820E8AE4h case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 820E8AE4h case   13:*/		return 0x820E8AE8;
		  /* 820E8AE8h */ case   14:  		/* rlwinm R31, R10, 0, 12, 31 */
		/* 820E8AE8h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R10);
		/* 820E8AE8h case   14:*/		return 0x820E8AEC;
		  /* 820E8AECh */ case   15:  		/* stw R26, <#[R1 + 112]> */
		/* 820E8AECh case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 820E8AECh case   15:*/		return 0x820E8AF0;
		  /* 820E8AF0h */ case   16:  		/* addi R9, R1, 112 */
		/* 820E8AF0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8AF0h case   16:*/		return 0x820E8AF4;
		  /* 820E8AF4h */ case   17:  		/* stw R28, <#[R1 + 116]> */
		/* 820E8AF4h case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 820E8AF4h case   17:*/		return 0x820E8AF8;
		  /* 820E8AF8h */ case   18:  		/* addi R8, R1, 192 */
		/* 820E8AF8h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8AF8h case   18:*/		return 0x820E8AFC;
		  /* 820E8AFCh */ case   19:  		/* stw R11, <#[R1 + 120]> */
		/* 820E8AFCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E8AFCh case   19:*/		return 0x820E8B00;
		  /* 820E8B00h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E8B00h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8B00h case   20:*/		return 0x820E8B04;
		  /* 820E8B04h */ case   21:  		/* stw R28, <#[R1 + 84]> */
		/* 820E8B04h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8B04h case   21:*/		return 0x820E8B08;
		  /* 820E8B08h */ case   22:  		/* addi R6, R1, 128 */
		/* 820E8B08h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8B08h case   22:*/		return 0x820E8B0C;
		  /* 820E8B0Ch */ case   23:  		/* mr R10, R31 */
		/* 820E8B0Ch case   23:*/		regs.R10 = regs.R31;
		/* 820E8B0Ch case   23:*/		return 0x820E8B10;
		  /* 820E8B10h */ case   24:  		/* mr R30, R3 */
		/* 820E8B10h case   24:*/		regs.R30 = regs.R3;
		/* 820E8B10h case   24:*/		return 0x820E8B14;
		  /* 820E8B14h */ case   25:  		/* mr R27, R26 */
		/* 820E8B14h case   25:*/		regs.R27 = regs.R26;
		/* 820E8B14h case   25:*/		return 0x820E8B18;
		  /* 820E8B18h */ case   26:  		/* bl -20120 */
		/* 820E8B18h case   26:*/		regs.LR = 0x820E8B1C; return 0x820E3C80;
		/* 820E8B18h case   26:*/		return 0x820E8B1C;
		  /* 820E8B1Ch */ case   27:  		/* cmpwi CR6, R3, 1 */
		/* 820E8B1Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E8B1Ch case   27:*/		return 0x820E8B20;
		  /* 820E8B20h */ case   28:  		/* bc 4, CR6_EQ, 48 */
		/* 820E8B20h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E8B50;  }
		/* 820E8B20h case   28:*/		return 0x820E8B24;
		  /* 820E8B24h */ case   29:  		/* mr R5, R29 */
		/* 820E8B24h case   29:*/		regs.R5 = regs.R29;
		/* 820E8B24h case   29:*/		return 0x820E8B28;
		  /* 820E8B28h */ case   30:  		/* lwz R4, <#[R30 + 260]> */
		/* 820E8B28h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 820E8B28h case   30:*/		return 0x820E8B2C;
		  /* 820E8B2Ch */ case   31:  		/* mr R10, R31 */
		/* 820E8B2Ch case   31:*/		regs.R10 = regs.R31;
		/* 820E8B2Ch case   31:*/		return 0x820E8B30;
		  /* 820E8B30h */ case   32:  		/* stw R28, <#[R1 + 84]> */
		/* 820E8B30h case   32:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8B30h case   32:*/		return 0x820E8B34;
		  /* 820E8B34h */ case   33:  		/* addi R9, R1, 112 */
		/* 820E8B34h case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8B34h case   33:*/		return 0x820E8B38;
		  /* 820E8B38h */ case   34:  		/* addi R8, R1, 192 */
		/* 820E8B38h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8B38h case   34:*/		return 0x820E8B3C;
		  /* 820E8B3Ch */ case   35:  		/* addi R7, R1, 96 */
		/* 820E8B3Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8B3Ch case   35:*/		return 0x820E8B40;
		  /* 820E8B40h */ case   36:  		/* addi R6, R1, 128 */
		/* 820E8B40h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8B40h case   36:*/		return 0x820E8B44;
		  /* 820E8B44h */ case   37:  		/* mr R3, R30 */
		/* 820E8B44h case   37:*/		regs.R3 = regs.R30;
		/* 820E8B44h case   37:*/		return 0x820E8B48;
		  /* 820E8B48h */ case   38:  		/* mr R27, R28 */
		/* 820E8B48h case   38:*/		regs.R27 = regs.R28;
		/* 820E8B48h case   38:*/		return 0x820E8B4C;
		  /* 820E8B4Ch */ case   39:  		/* bl -20172 */
		/* 820E8B4Ch case   39:*/		regs.LR = 0x820E8B50; return 0x820E3C80;
		/* 820E8B4Ch case   39:*/		return 0x820E8B50;
	}
	return 0x820E8B50;
} // Block from 820E8AB0h-820E8B50h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820E8B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8B50);
		  /* 820E8B50h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E8B50h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E8B50h case    0:*/		return 0x820E8B54;
		  /* 820E8B54h */ case    1:  		/* bc 4, CR6_EQ, 240 */
		/* 820E8B54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E8C44;  }
		/* 820E8B54h case    1:*/		return 0x820E8B58;
		  /* 820E8B58h */ case    2:  		/* mr R8, R26 */
		/* 820E8B58h case    2:*/		regs.R8 = regs.R26;
		/* 820E8B58h case    2:*/		return 0x820E8B5C;
		  /* 820E8B5Ch */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 820E8B5Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E8B5Ch case    3:*/		return 0x820E8B60;
		  /* 820E8B60h */ case    4:  		/* bc 12, CR6_EQ, 132 */
		/* 820E8B60h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E8BE4;  }
		/* 820E8B60h case    4:*/		return 0x820E8B64;
		  /* 820E8B64h */ case    5:  		/* lis R9, -32256 */
		/* 820E8B64h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820E8B64h case    5:*/		return 0x820E8B68;
		  /* 820E8B68h */ case    6:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 820E8B68h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 820E8B68h case    6:*/		return 0x820E8B6C;
		  /* 820E8B6Ch */ case    7:  		/* addi R10, R1, 208 */
		/* 820E8B6Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 820E8B6Ch case    7:*/		return 0x820E8B70;
		  /* 820E8B70h */ case    8:  		/* lfd FR0, <#[R9 + 1808]> */
		/* 820E8B70h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000710) );
		/* 820E8B70h case    8:*/		return 0x820E8B74;
		  /* 820E8B74h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 820E8B74h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E8B74h case    9:*/		return 0x820E8B78;
		  /* 820E8B78h */ case   10:  		/* lwz R7, <#[R10 + 16]> */
		/* 820E8B78h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000010) );
		/* 820E8B78h case   10:*/		return 0x820E8B7C;
		  /* 820E8B7Ch */ case   11:  		/* cmplw CR6, R9, R7 */
		/* 820E8B7Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 820E8B7Ch case   11:*/		return 0x820E8B80;
		  /* 820E8B80h */ case   12:  		/* bc 4, CR6_EQ, 128 */
		/* 820E8B80h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E8C00;  }
		/* 820E8B80h case   12:*/		return 0x820E8B84;
		  /* 820E8B84h */ case   13:  		/* lwz R9, <#[R30 + 260]> */
		/* 820E8B84h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000104) );
		/* 820E8B84h case   13:*/		return 0x820E8B88;
		  /* 820E8B88h */ case   14:  		/* lwz R7, <#[R30 + 20]> */
		/* 820E8B88h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000014) );
		/* 820E8B88h case   14:*/		return 0x820E8B8C;
		  /* 820E8B8Ch */ case   15:  		/* lwz R6, <#[R30 + 16]> */
		/* 820E8B8Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 820E8B8Ch case   15:*/		return 0x820E8B90;
		  /* 820E8B90h */ case   16:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E8B90h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E8B90h case   16:*/		return 0x820E8B94;
		  /* 820E8B94h */ case   17:  		/* lwzx R9, <#[R9 + R11]> */
		/* 820E8B94h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E8B94h case   17:*/		return 0x820E8B98;
		  /* 820E8B98h */ case   18:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E8B98h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E8B98h case   18:*/		return 0x820E8B9C;
		  /* 820E8B9Ch */ case   19:  		/* lwzx R9, <#[R9 + R7]> */
		/* 820E8B9Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 820E8B9Ch case   19:*/		return 0x820E8BA0;
		  /* 820E8BA0h */ case   20:  		/* lwz R7, <#[R9 + 4]> */
		/* 820E8BA0h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000004) );
		/* 820E8BA0h case   20:*/		return 0x820E8BA4;
		  /* 820E8BA4h */ case   21:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820E8BA4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820E8BA4h case   21:*/		return 0x820E8BA8;
		  /* 820E8BA8h */ case   22:  		/* lwzx R7, <#[R7 + R6]> */
		/* 820E8BA8h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 820E8BA8h case   22:*/		return 0x820E8BAC;
		  /* 820E8BACh */ case   23:  		/* lwz R7, <#[R7 + 4]> */
		/* 820E8BACh case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820E8BACh case   23:*/		return 0x820E8BB0;
		  /* 820E8BB0h */ case   24:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 820E8BB0h case   24:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 820E8BB0h case   24:*/		return 0x820E8BB4;
		  /* 820E8BB4h */ case   25:  		/* bc 12, CR0_EQ, 76 */
		/* 820E8BB4h case   25:*/		if ( regs.CR[0].eq ) { return 0x820E8C00;  }
		/* 820E8BB4h case   25:*/		return 0x820E8BB8;
		  /* 820E8BB8h */ case   26:  		/* lfd FR13, <#[R9 + 32]> */
		/* 820E8BB8h case   26:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000020) );
		/* 820E8BB8h case   26:*/		return 0x820E8BBC;
		  /* 820E8BBCh */ case   27:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E8BBCh case   27:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E8BBCh case   27:*/		return 0x820E8BC0;
		  /* 820E8BC0h */ case   28:  		/* bc 4, CR6_EQ, 64 */
		/* 820E8BC0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E8C00;  }
		/* 820E8BC0h case   28:*/		return 0x820E8BC4;
		  /* 820E8BC4h */ case   29:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E8BC4h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E8BC4h case   29:*/		return 0x820E8BC8;
		  /* 820E8BC8h */ case   30:  		/* cmpwi CR6, R9, -1 */
		/* 820E8BC8h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820E8BC8h case   30:*/		return 0x820E8BCC;
		  /* 820E8BCCh */ case   31:  		/* bc 4, CR6_EQ, 52 */
		/* 820E8BCCh case   31:*/		if ( !regs.CR[6].eq ) { return 0x820E8C00;  }
		/* 820E8BCCh case   31:*/		return 0x820E8BD0;
		  /* 820E8BD0h */ case   32:  		/* addi R8, R8, 1 */
		/* 820E8BD0h case   32:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E8BD0h case   32:*/		return 0x820E8BD4;
		  /* 820E8BD4h */ case   33:  		/* addi R10, R10, 4 */
		/* 820E8BD4h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E8BD4h case   33:*/		return 0x820E8BD8;
		  /* 820E8BD8h */ case   34:  		/* addi R11, R11, 4 */
		/* 820E8BD8h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E8BD8h case   34:*/		return 0x820E8BDC;
		  /* 820E8BDCh */ case   35:  		/* cmplw CR6, R8, R31 */
		/* 820E8BDCh case   35:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R31);
		/* 820E8BDCh case   35:*/		return 0x820E8BE0;
		  /* 820E8BE0h */ case   36:  		/* bc 12, CR6_LT, -108 */
		/* 820E8BE0h case   36:*/		if ( regs.CR[6].lt ) { return 0x820E8B74;  }
		/* 820E8BE0h case   36:*/		return 0x820E8BE4;
	}
	return 0x820E8BE4;
} // Block from 820E8B50h-820E8BE4h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820E8BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8BE4);
		  /* 820E8BE4h */ case    0:  		/* lwz R11, <#[R30 + 260]> */
		/* 820E8BE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000104) );
		/* 820E8BE4h case    0:*/		return 0x820E8BE8;
		  /* 820E8BE8h */ case    1:  		/* cmpwi CR6, R27, 0 */
		/* 820E8BE8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E8BE8h case    1:*/		return 0x820E8BEC;
		  /* 820E8BECh */ case    2:  		/* mr R10, R31 */
		/* 820E8BECh case    2:*/		regs.R10 = regs.R31;
		/* 820E8BECh case    2:*/		return 0x820E8BF0;
		  /* 820E8BF0h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 820E8BF0h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E8C08;  }
		/* 820E8BF0h case    3:*/		return 0x820E8BF4;
		  /* 820E8BF4h */ case    4:  		/* li R9, 465 */
		/* 820E8BF4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x1D1);
		/* 820E8BF4h case    4:*/		return 0x820E8BF8;
		  /* 820E8BF8h */ case    5:  		/* rlwimi R10, R9, 22, 0, 11 */
		/* 820E8BF8h case    5:*/		cpu::op::rlwimi<0,22,0,11>(regs,&regs.R10,regs.R9);
		/* 820E8BF8h case    5:*/		return 0x820E8BFC;
		  /* 820E8BFCh */ case    6:  		/* b 20 */
		/* 820E8BFCh case    6:*/		return 0x820E8C10;
		/* 820E8BFCh case    6:*/		return 0x820E8C00;
	}
	return 0x820E8C00;
} // Block from 820E8BE4h-820E8C00h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E8C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8C00);
		  /* 820E8C00h */ case    0:  		/* li R3, 1 */
		/* 820E8C00h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E8C00h case    0:*/		return 0x820E8C04;
		  /* 820E8C04h */ case    1:  		/* b 64 */
		/* 820E8C04h case    1:*/		return 0x820E8C44;
		/* 820E8C04h case    1:*/		return 0x820E8C08;
	}
	return 0x820E8C08;
} // Block from 820E8C00h-820E8C08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E8C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8C08);
		  /* 820E8C08h */ case    0:  		/* li R9, 1861 */
		/* 820E8C08h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x745);
		/* 820E8C08h case    0:*/		return 0x820E8C0C;
		  /* 820E8C0Ch */ case    1:  		/* rlwimi R10, R9, 20, 0, 11 */
		/* 820E8C0Ch case    1:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R10,regs.R9);
		/* 820E8C0Ch case    1:*/		return 0x820E8C10;
	}
	return 0x820E8C10;
} // Block from 820E8C08h-820E8C10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E8C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8C10);
		  /* 820E8C10h */ case    0:  		/* stw R10, <#[R11]> */
		/* 820E8C10h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8C10h case    0:*/		return 0x820E8C14;
		  /* 820E8C14h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 820E8C14h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E8C14h case    1:*/		return 0x820E8C18;
		  /* 820E8C18h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 820E8C18h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E8C40;  }
		/* 820E8C18h case    2:*/		return 0x820E8C1C;
		  /* 820E8C1Ch */ case    3:  		/* mr R11, R26 */
		/* 820E8C1Ch case    3:*/		regs.R11 = regs.R26;
		/* 820E8C1Ch case    3:*/		return 0x820E8C20;
		  /* 820E8C20h */ case    4:  		/* mtspr CTR, R31 */
		/* 820E8C20h case    4:*/		regs.CTR = regs.R31;
		/* 820E8C20h case    4:*/		return 0x820E8C24;
		  /* 820E8C24h */ case    5:  		/* lwz R10, <#[R30 + 260]> */
		/* 820E8C24h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 820E8C24h case    5:*/		return 0x820E8C28;
		  /* 820E8C28h */ case    6:  		/* addi R9, R1, 208 */
		/* 820E8C28h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xD0);
		/* 820E8C28h case    6:*/		return 0x820E8C2C;
		  /* 820E8C2Ch */ case    7:  		/* lwzx R9, <#[R11 + R9]> */
		/* 820E8C2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E8C2Ch case    7:*/		return 0x820E8C30;
		  /* 820E8C30h */ case    8:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E8C30h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E8C30h case    8:*/		return 0x820E8C34;
		  /* 820E8C34h */ case    9:  		/* stwx R9, <#[R10 + R11]> */
		/* 820E8C34h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E8C34h case    9:*/		return 0x820E8C38;
		  /* 820E8C38h */ case   10:  		/* addi R11, R11, 4 */
		/* 820E8C38h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E8C38h case   10:*/		return 0x820E8C3C;
		  /* 820E8C3Ch */ case   11:  		/* bc 16, CR0_LT, -24 */
		/* 820E8C3Ch case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E8C24;  }
		/* 820E8C3Ch case   11:*/		return 0x820E8C40;
	}
	return 0x820E8C40;
} // Block from 820E8C10h-820E8C40h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E8C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8C40);
		  /* 820E8C40h */ case    0:  		/* li R3, 0 */
		/* 820E8C40h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E8C40h case    0:*/		return 0x820E8C44;
	}
	return 0x820E8C44;
} // Block from 820E8C40h-820E8C44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E8C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8C44);
		  /* 820E8C44h */ case    0:  		/* addi R1, R1, 416 */
		/* 820E8C44h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 820E8C44h case    0:*/		return 0x820E8C48;
		  /* 820E8C48h */ case    1:  		/* b -358824 */
		/* 820E8C48h case    1:*/		return 0x820912A0;
		/* 820E8C48h case    1:*/		return 0x820E8C4C;
		  /* 820E8C4Ch */ case    2:  		/* nop */
		/* 820E8C4Ch case    2:*/		cpu::op::nop();
		/* 820E8C4Ch case    2:*/		return 0x820E8C50;
	}
	return 0x820E8C50;
} // Block from 820E8C44h-820E8C50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E8C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8C50);
		  /* 820E8C50h */ case    0:  		/* mfspr R12, LR */
		/* 820E8C50h case    0:*/		regs.R12 = regs.LR;
		/* 820E8C50h case    0:*/		return 0x820E8C54;
		  /* 820E8C54h */ case    1:  		/* bl -358916 */
		/* 820E8C54h case    1:*/		regs.LR = 0x820E8C58; return 0x82091250;
		/* 820E8C54h case    1:*/		return 0x820E8C58;
		  /* 820E8C58h */ case    2:  		/* stwu R1, <#[R1 - 416]> */
		/* 820E8C58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 820E8C58h case    2:*/		return 0x820E8C5C;
		  /* 820E8C5Ch */ case    3:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E8C5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E8C5Ch case    3:*/		return 0x820E8C60;
		  /* 820E8C60h */ case    4:  		/* lis R11, -32254 */
		/* 820E8C60h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E8C60h case    4:*/		return 0x820E8C64;
		  /* 820E8C64h */ case    5:  		/* li R8, 3 */
		/* 820E8C64h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E8C64h case    5:*/		return 0x820E8C68;
		  /* 820E8C68h */ case    6:  		/* addi R29, R11, -21704 */
		/* 820E8C68h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFAB38);
		/* 820E8C68h case    6:*/		return 0x820E8C6C;
		  /* 820E8C6Ch */ case    7:  		/* li R26, 0 */
		/* 820E8C6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E8C6Ch case    7:*/		return 0x820E8C70;
		  /* 820E8C70h */ case    8:  		/* stw R8, <#[R1 + 124]> */
		/* 820E8C70h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E8C70h case    8:*/		return 0x820E8C74;
		  /* 820E8C74h */ case    9:  		/* li R28, 1 */
		/* 820E8C74h case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820E8C74h case    9:*/		return 0x820E8C78;
		  /* 820E8C78h */ case   10:  		/* lwz R10, <#[R4]> */
		/* 820E8C78h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820E8C78h case   10:*/		return 0x820E8C7C;
		  /* 820E8C7Ch */ case   11:  		/* li R11, 2 */
		/* 820E8C7Ch case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E8C7Ch case   11:*/		return 0x820E8C80;
		  /* 820E8C80h */ case   12:  		/* addi R5, R29, -128 */
		/* 820E8C80h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFF80);
		/* 820E8C80h case   12:*/		return 0x820E8C84;
		  /* 820E8C84h */ case   13:  		/* stw R26, <#[R1 + 96]> */
		/* 820E8C84h case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 820E8C84h case   13:*/		return 0x820E8C88;
		  /* 820E8C88h */ case   14:  		/* rlwinm R30, R10, 0, 12, 31 */
		/* 820E8C88h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R10);
		/* 820E8C88h case   14:*/		return 0x820E8C8C;
		  /* 820E8C8Ch */ case   15:  		/* stw R26, <#[R1 + 112]> */
		/* 820E8C8Ch case   15:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 820E8C8Ch case   15:*/		return 0x820E8C90;
		  /* 820E8C90h */ case   16:  		/* addi R9, R1, 112 */
		/* 820E8C90h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8C90h case   16:*/		return 0x820E8C94;
		  /* 820E8C94h */ case   17:  		/* stw R28, <#[R1 + 116]> */
		/* 820E8C94h case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 820E8C94h case   17:*/		return 0x820E8C98;
		  /* 820E8C98h */ case   18:  		/* addi R8, R1, 192 */
		/* 820E8C98h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8C98h case   18:*/		return 0x820E8C9C;
		  /* 820E8C9Ch */ case   19:  		/* stw R11, <#[R1 + 120]> */
		/* 820E8C9Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E8C9Ch case   19:*/		return 0x820E8CA0;
		  /* 820E8CA0h */ case   20:  		/* addi R7, R1, 96 */
		/* 820E8CA0h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8CA0h case   20:*/		return 0x820E8CA4;
		  /* 820E8CA4h */ case   21:  		/* stw R28, <#[R1 + 84]> */
		/* 820E8CA4h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8CA4h case   21:*/		return 0x820E8CA8;
		  /* 820E8CA8h */ case   22:  		/* addi R6, R1, 128 */
		/* 820E8CA8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8CA8h case   22:*/		return 0x820E8CAC;
		  /* 820E8CACh */ case   23:  		/* mr R10, R30 */
		/* 820E8CACh case   23:*/		regs.R10 = regs.R30;
		/* 820E8CACh case   23:*/		return 0x820E8CB0;
		  /* 820E8CB0h */ case   24:  		/* mr R31, R3 */
		/* 820E8CB0h case   24:*/		regs.R31 = regs.R3;
		/* 820E8CB0h case   24:*/		return 0x820E8CB4;
		  /* 820E8CB4h */ case   25:  		/* mr R27, R26 */
		/* 820E8CB4h case   25:*/		regs.R27 = regs.R26;
		/* 820E8CB4h case   25:*/		return 0x820E8CB8;
		  /* 820E8CB8h */ case   26:  		/* bl -20536 */
		/* 820E8CB8h case   26:*/		regs.LR = 0x820E8CBC; return 0x820E3C80;
		/* 820E8CB8h case   26:*/		return 0x820E8CBC;
		  /* 820E8CBCh */ case   27:  		/* cmpwi CR6, R3, 1 */
		/* 820E8CBCh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E8CBCh case   27:*/		return 0x820E8CC0;
		  /* 820E8CC0h */ case   28:  		/* bc 4, CR6_EQ, 48 */
		/* 820E8CC0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E8CF0;  }
		/* 820E8CC0h case   28:*/		return 0x820E8CC4;
		  /* 820E8CC4h */ case   29:  		/* mr R5, R29 */
		/* 820E8CC4h case   29:*/		regs.R5 = regs.R29;
		/* 820E8CC4h case   29:*/		return 0x820E8CC8;
		  /* 820E8CC8h */ case   30:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E8CC8h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8CC8h case   30:*/		return 0x820E8CCC;
		  /* 820E8CCCh */ case   31:  		/* mr R10, R30 */
		/* 820E8CCCh case   31:*/		regs.R10 = regs.R30;
		/* 820E8CCCh case   31:*/		return 0x820E8CD0;
		  /* 820E8CD0h */ case   32:  		/* stw R28, <#[R1 + 84]> */
		/* 820E8CD0h case   32:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8CD0h case   32:*/		return 0x820E8CD4;
		  /* 820E8CD4h */ case   33:  		/* addi R9, R1, 112 */
		/* 820E8CD4h case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8CD4h case   33:*/		return 0x820E8CD8;
		  /* 820E8CD8h */ case   34:  		/* addi R8, R1, 192 */
		/* 820E8CD8h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8CD8h case   34:*/		return 0x820E8CDC;
		  /* 820E8CDCh */ case   35:  		/* addi R7, R1, 96 */
		/* 820E8CDCh case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8CDCh case   35:*/		return 0x820E8CE0;
		  /* 820E8CE0h */ case   36:  		/* addi R6, R1, 128 */
		/* 820E8CE0h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8CE0h case   36:*/		return 0x820E8CE4;
		  /* 820E8CE4h */ case   37:  		/* mr R3, R31 */
		/* 820E8CE4h case   37:*/		regs.R3 = regs.R31;
		/* 820E8CE4h case   37:*/		return 0x820E8CE8;
		  /* 820E8CE8h */ case   38:  		/* mr R27, R28 */
		/* 820E8CE8h case   38:*/		regs.R27 = regs.R28;
		/* 820E8CE8h case   38:*/		return 0x820E8CEC;
		  /* 820E8CECh */ case   39:  		/* bl -20588 */
		/* 820E8CECh case   39:*/		regs.LR = 0x820E8CF0; return 0x820E3C80;
		/* 820E8CECh case   39:*/		return 0x820E8CF0;
	}
	return 0x820E8CF0;
} // Block from 820E8C50h-820E8CF0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820E8CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8CF0);
		  /* 820E8CF0h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E8CF0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E8CF0h case    0:*/		return 0x820E8CF4;
		  /* 820E8CF4h */ case    1:  		/* bc 4, CR6_EQ, 240 */
		/* 820E8CF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E8DE4;  }
		/* 820E8CF4h case    1:*/		return 0x820E8CF8;
		  /* 820E8CF8h */ case    2:  		/* mr R8, R26 */
		/* 820E8CF8h case    2:*/		regs.R8 = regs.R26;
		/* 820E8CF8h case    2:*/		return 0x820E8CFC;
		  /* 820E8CFCh */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 820E8CFCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E8CFCh case    3:*/		return 0x820E8D00;
		  /* 820E8D00h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 820E8D00h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E8D40;  }
		/* 820E8D00h case    4:*/		return 0x820E8D04;
		  /* 820E8D04h */ case    5:  		/* addi R11, R1, 208 */
		/* 820E8D04h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 820E8D04h case    5:*/		return 0x820E8D08;
		  /* 820E8D08h */ case    6:  		/* lwz R9, <#[R11 - 16]> */
		/* 820E8D08h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 820E8D08h case    6:*/		return 0x820E8D0C;
		  /* 820E8D0Ch */ case    7:  		/* lwz R10, <#[R11]> */
		/* 820E8D0Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8D0Ch case    7:*/		return 0x820E8D10;
		  /* 820E8D10h */ case    8:  		/* cmplw CR6, R9, R10 */
		/* 820E8D10h case    8:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E8D10h case    8:*/		return 0x820E8D14;
		  /* 820E8D14h */ case    9:  		/* bc 4, CR6_EQ, 72 */
		/* 820E8D14h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E8D5C;  }
		/* 820E8D14h case    9:*/		return 0x820E8D18;
		  /* 820E8D18h */ case   10:  		/* lwz R7, <#[R11 + 16]> */
		/* 820E8D18h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000010) );
		/* 820E8D18h case   10:*/		return 0x820E8D1C;
		  /* 820E8D1Ch */ case   11:  		/* cmplw CR6, R10, R7 */
		/* 820E8D1Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820E8D1Ch case   11:*/		return 0x820E8D20;
		  /* 820E8D20h */ case   12:  		/* bc 4, CR6_EQ, 60 */
		/* 820E8D20h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E8D5C;  }
		/* 820E8D20h case   12:*/		return 0x820E8D24;
		  /* 820E8D24h */ case   13:  		/* lwz R10, <#[R11 + 32]> */
		/* 820E8D24h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 820E8D24h case   13:*/		return 0x820E8D28;
		  /* 820E8D28h */ case   14:  		/* cmplw CR6, R9, R10 */
		/* 820E8D28h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820E8D28h case   14:*/		return 0x820E8D2C;
		  /* 820E8D2Ch */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 820E8D2Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E8D5C;  }
		/* 820E8D2Ch case   15:*/		return 0x820E8D30;
		  /* 820E8D30h */ case   16:  		/* addi R8, R8, 1 */
		/* 820E8D30h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820E8D30h case   16:*/		return 0x820E8D34;
		  /* 820E8D34h */ case   17:  		/* addi R11, R11, 4 */
		/* 820E8D34h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E8D34h case   17:*/		return 0x820E8D38;
		  /* 820E8D38h */ case   18:  		/* cmplw CR6, R8, R30 */
		/* 820E8D38h case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R30);
		/* 820E8D38h case   18:*/		return 0x820E8D3C;
		  /* 820E8D3Ch */ case   19:  		/* bc 12, CR6_LT, -52 */
		/* 820E8D3Ch case   19:*/		if ( regs.CR[6].lt ) { return 0x820E8D08;  }
		/* 820E8D3Ch case   19:*/		return 0x820E8D40;
	}
	return 0x820E8D40;
} // Block from 820E8CF0h-820E8D40h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E8D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8D40);
		  /* 820E8D40h */ case    0:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E8D40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8D40h case    0:*/		return 0x820E8D44;
		  /* 820E8D44h */ case    1:  		/* cmpwi CR6, R27, 0 */
		/* 820E8D44h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E8D44h case    1:*/		return 0x820E8D48;
		  /* 820E8D48h */ case    2:  		/* mr R10, R30 */
		/* 820E8D48h case    2:*/		regs.R10 = regs.R30;
		/* 820E8D48h case    2:*/		return 0x820E8D4C;
		  /* 820E8D4Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 820E8D4Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820E8D64;  }
		/* 820E8D4Ch case    3:*/		return 0x820E8D50;
		  /* 820E8D50h */ case    4:  		/* li R9, 465 */
		/* 820E8D50h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x1D1);
		/* 820E8D50h case    4:*/		return 0x820E8D54;
		  /* 820E8D54h */ case    5:  		/* rlwimi R10, R9, 22, 0, 11 */
		/* 820E8D54h case    5:*/		cpu::op::rlwimi<0,22,0,11>(regs,&regs.R10,regs.R9);
		/* 820E8D54h case    5:*/		return 0x820E8D58;
		  /* 820E8D58h */ case    6:  		/* b 20 */
		/* 820E8D58h case    6:*/		return 0x820E8D6C;
		/* 820E8D58h case    6:*/		return 0x820E8D5C;
	}
	return 0x820E8D5C;
} // Block from 820E8D40h-820E8D5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E8D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8D5C);
		  /* 820E8D5Ch */ case    0:  		/* li R3, 1 */
		/* 820E8D5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E8D5Ch case    0:*/		return 0x820E8D60;
		  /* 820E8D60h */ case    1:  		/* b 132 */
		/* 820E8D60h case    1:*/		return 0x820E8DE4;
		/* 820E8D60h case    1:*/		return 0x820E8D64;
	}
	return 0x820E8D64;
} // Block from 820E8D5Ch-820E8D64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E8D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8D64);
		  /* 820E8D64h */ case    0:  		/* li R9, 1861 */
		/* 820E8D64h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x745);
		/* 820E8D64h case    0:*/		return 0x820E8D68;
		  /* 820E8D68h */ case    1:  		/* rlwimi R10, R9, 20, 0, 11 */
		/* 820E8D68h case    1:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R10,regs.R9);
		/* 820E8D68h case    1:*/		return 0x820E8D6C;
	}
	return 0x820E8D6C;
} // Block from 820E8D64h-820E8D6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E8D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8D6C);
		  /* 820E8D6Ch */ case    0:  		/* stw R10, <#[R11]> */
		/* 820E8D6Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8D6Ch case    0:*/		return 0x820E8D70;
		  /* 820E8D70h */ case    1:  		/* lis R11, -32256 */
		/* 820E8D70h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E8D70h case    1:*/		return 0x820E8D74;
		  /* 820E8D74h */ case    2:  		/* li R6, 0 */
		/* 820E8D74h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E8D74h case    2:*/		return 0x820E8D78;
		  /* 820E8D78h */ case    3:  		/* lwz R4, <#[R31 + 120]> */
		/* 820E8D78h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820E8D78h case    3:*/		return 0x820E8D7C;
		  /* 820E8D7Ch */ case    4:  		/* li R5, 0 */
		/* 820E8D7Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E8D7Ch case    4:*/		return 0x820E8D80;
		  /* 820E8D80h */ case    5:  		/* mr R3, R31 */
		/* 820E8D80h case    5:*/		regs.R3 = regs.R31;
		/* 820E8D80h case    5:*/		return 0x820E8D84;
		  /* 820E8D84h */ case    6:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 820E8D84h case    6:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 820E8D84h case    6:*/		return 0x820E8D88;
		  /* 820E8D88h */ case    7:  		/* bl 83104 */
		/* 820E8D88h case    7:*/		regs.LR = 0x820E8D8C; return 0x820FD228;
		/* 820E8D88h case    7:*/		return 0x820E8D8C;
		  /* 820E8D8Ch */ case    8:  		/* cmpwi CR6, R3, -1 */
		/* 820E8D8Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E8D8Ch case    8:*/		return 0x820E8D90;
		  /* 820E8D90h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 820E8D90h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E8DA0;  }
		/* 820E8D90h case    9:*/		return 0x820E8D94;
		  /* 820E8D94h */ case   10:  		/* lis R3, -32761 */
		/* 820E8D94h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E8D94h case   10:*/		return 0x820E8D98;
		  /* 820E8D98h */ case   11:  		/* ori R3, R3, 14 */
		/* 820E8D98h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E8D98h case   11:*/		return 0x820E8D9C;
		  /* 820E8D9Ch */ case   12:  		/* b 72 */
		/* 820E8D9Ch case   12:*/		return 0x820E8DE4;
		/* 820E8D9Ch case   12:*/		return 0x820E8DA0;
	}
	return 0x820E8DA0;
} // Block from 820E8D6Ch-820E8DA0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E8DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8DA0);
		  /* 820E8DA0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820E8DA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E8DA0h case    0:*/		return 0x820E8DA4;
		  /* 820E8DA4h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 820E8DA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E8DE0;  }
		/* 820E8DA4h case    1:*/		return 0x820E8DA8;
		  /* 820E8DA8h */ case    2:  		/* mr R11, R26 */
		/* 820E8DA8h case    2:*/		regs.R11 = regs.R26;
		/* 820E8DA8h case    2:*/		return 0x820E8DAC;
		  /* 820E8DACh */ case    3:  		/* mtspr CTR, R30 */
		/* 820E8DACh case    3:*/		regs.CTR = regs.R30;
		/* 820E8DACh case    3:*/		return 0x820E8DB0;
		  /* 820E8DB0h */ case    4:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 820E8DB0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 820E8DB0h case    4:*/		return 0x820E8DB4;
		  /* 820E8DB4h */ case    5:  		/* lwz R9, <#[R31 + 260]> */
		/* 820E8DB4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8DB4h case    5:*/		return 0x820E8DB8;
		  /* 820E8DB8h */ case    6:  		/* addi R8, R1, 192 */
		/* 820E8DB8h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8DB8h case    6:*/		return 0x820E8DBC;
		  /* 820E8DBCh */ case    7:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E8DBCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E8DBCh case    7:*/		return 0x820E8DC0;
		  /* 820E8DC0h */ case    8:  		/* lwzx R8, <#[R11 + R8]> */
		/* 820E8DC0h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 820E8DC0h case    8:*/		return 0x820E8DC4;
		  /* 820E8DC4h */ case    9:  		/* stwx R8, <#[R9 + R11]> */
		/* 820E8DC4h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E8DC4h case    9:*/		return 0x820E8DC8;
		  /* 820E8DC8h */ case   10:  		/* addi R11, R11, 4 */
		/* 820E8DC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E8DC8h case   10:*/		return 0x820E8DCC;
		  /* 820E8DCCh */ case   11:  		/* lwz R9, <#[R31 + 260]> */
		/* 820E8DCCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8DCCh case   11:*/		return 0x820E8DD0;
		  /* 820E8DD0h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E8DD0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E8DD0h case   12:*/		return 0x820E8DD4;
		  /* 820E8DD4h */ case   13:  		/* stwx R3, <#[R9 + R10]> */
		/* 820E8DD4h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820E8DD4h case   13:*/		return 0x820E8DD8;
		  /* 820E8DD8h */ case   14:  		/* addi R10, R10, 4 */
		/* 820E8DD8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E8DD8h case   14:*/		return 0x820E8DDC;
		  /* 820E8DDCh */ case   15:  		/* bc 16, CR0_LT, -40 */
		/* 820E8DDCh case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E8DB4;  }
		/* 820E8DDCh case   15:*/		return 0x820E8DE0;
	}
	return 0x820E8DE0;
} // Block from 820E8DA0h-820E8DE0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E8DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8DE0);
		  /* 820E8DE0h */ case    0:  		/* li R3, 0 */
		/* 820E8DE0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E8DE0h case    0:*/		return 0x820E8DE4;
	}
	return 0x820E8DE4;
} // Block from 820E8DE0h-820E8DE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E8DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8DE4);
		  /* 820E8DE4h */ case    0:  		/* addi R1, R1, 416 */
		/* 820E8DE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 820E8DE4h case    0:*/		return 0x820E8DE8;
		  /* 820E8DE8h */ case    1:  		/* b -359240 */
		/* 820E8DE8h case    1:*/		return 0x820912A0;
		/* 820E8DE8h case    1:*/		return 0x820E8DEC;
		  /* 820E8DECh */ case    2:  		/* nop */
		/* 820E8DECh case    2:*/		cpu::op::nop();
		/* 820E8DECh case    2:*/		return 0x820E8DF0;
	}
	return 0x820E8DF0;
} // Block from 820E8DE4h-820E8DF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E8DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8DF0);
		  /* 820E8DF0h */ case    0:  		/* mfspr R12, LR */
		/* 820E8DF0h case    0:*/		regs.R12 = regs.LR;
		/* 820E8DF0h case    0:*/		return 0x820E8DF4;
		  /* 820E8DF4h */ case    1:  		/* bl -359336 */
		/* 820E8DF4h case    1:*/		regs.LR = 0x820E8DF8; return 0x8209124C;
		/* 820E8DF4h case    1:*/		return 0x820E8DF8;
		  /* 820E8DF8h */ case    2:  		/* stfd FR31, <#[R1 - 72]> */
		/* 820E8DF8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E8DF8h case    2:*/		return 0x820E8DFC;
		  /* 820E8DFCh */ case    3:  		/* stwu R1, <#[R1 - 432]> */
		/* 820E8DFCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 820E8DFCh case    3:*/		return 0x820E8E00;
		  /* 820E8E00h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E8E00h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E8E00h case    4:*/		return 0x820E8E04;
		  /* 820E8E04h */ case    5:  		/* li R11, 2 */
		/* 820E8E04h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E8E04h case    5:*/		return 0x820E8E08;
		  /* 820E8E08h */ case    6:  		/* li R25, 0 */
		/* 820E8E08h case    6:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820E8E08h case    6:*/		return 0x820E8E0C;
		  /* 820E8E0Ch */ case    7:  		/* stw R11, <#[R1 + 120]> */
		/* 820E8E0Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E8E0Ch case    7:*/		return 0x820E8E10;
		  /* 820E8E10h */ case    8:  		/* li R29, 1 */
		/* 820E8E10h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 820E8E10h case    8:*/		return 0x820E8E14;
		  /* 820E8E14h */ case    9:  		/* li R10, 3 */
		/* 820E8E14h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820E8E14h case    9:*/		return 0x820E8E18;
		  /* 820E8E18h */ case   10:  		/* stw R25, <#[R1 + 96]> */
		/* 820E8E18h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000060) );
		/* 820E8E18h case   10:*/		return 0x820E8E1C;
		  /* 820E8E1Ch */ case   11:  		/* mr R31, R3 */
		/* 820E8E1Ch case   11:*/		regs.R31 = regs.R3;
		/* 820E8E1Ch case   11:*/		return 0x820E8E20;
		  /* 820E8E20h */ case   12:  		/* stw R25, <#[R1 + 112]> */
		/* 820E8E20h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000070) );
		/* 820E8E20h case   12:*/		return 0x820E8E24;
		  /* 820E8E24h */ case   13:  		/* lwz R9, <#[R4]> */
		/* 820E8E24h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 820E8E24h case   13:*/		return 0x820E8E28;
		  /* 820E8E28h */ case   14:  		/* stw R29, <#[R1 + 116]> */
		/* 820E8E28h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000074) );
		/* 820E8E28h case   14:*/		return 0x820E8E2C;
		  /* 820E8E2Ch */ case   15:  		/* rlwinm R11, R9, 0, 12, 31 */
		/* 820E8E2Ch case   15:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R9);
		/* 820E8E2Ch case   15:*/		return 0x820E8E30;
		  /* 820E8E30h */ case   16:  		/* stw R10, <#[R1 + 124]> */
		/* 820E8E30h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E8E30h case   16:*/		return 0x820E8E34;
		  /* 820E8E34h */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 820E8E34h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820E8E34h case   17:*/		return 0x820E8E38;
		  /* 820E8E38h */ case   18:  		/* bc 12, CR6_EQ, 12 */
		/* 820E8E38h case   18:*/		if ( regs.CR[6].eq ) { return 0x820E8E44;  }
		/* 820E8E38h case   18:*/		return 0x820E8E3C;
		  /* 820E8E3Ch */ case   19:  		/* li R3, 1 */
		/* 820E8E3Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E8E3Ch case   19:*/		return 0x820E8E40;
		  /* 820E8E40h */ case   20:  		/* b 536 */
		/* 820E8E40h case   20:*/		return 0x820E9058;
		/* 820E8E40h case   20:*/		return 0x820E8E44;
	}
	return 0x820E8E44;
} // Block from 820E8DF0h-820E8E44h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E8E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8E44);
		  /* 820E8E44h */ case    0:  		/* lis R11, -32254 */
		/* 820E8E44h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E8E44h case    0:*/		return 0x820E8E48;
		  /* 820E8E48h */ case    1:  		/* stw R29, <#[R1 + 84]> */
		/* 820E8E48h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8E48h case    1:*/		return 0x820E8E4C;
		  /* 820E8E4Ch */ case    2:  		/* li R10, 1 */
		/* 820E8E4Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E8E4Ch case    2:*/		return 0x820E8E50;
		  /* 820E8E50h */ case    3:  		/* addi R30, R11, -22120 */
		/* 820E8E50h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFA998);
		/* 820E8E50h case    3:*/		return 0x820E8E54;
		  /* 820E8E54h */ case    4:  		/* addi R9, R1, 112 */
		/* 820E8E54h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8E54h case    4:*/		return 0x820E8E58;
		  /* 820E8E58h */ case    5:  		/* addi R5, R30, -288 */
		/* 820E8E58h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFEE0);
		/* 820E8E58h case    5:*/		return 0x820E8E5C;
		  /* 820E8E5Ch */ case    6:  		/* addi R8, R1, 192 */
		/* 820E8E5Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8E5Ch case    6:*/		return 0x820E8E60;
		  /* 820E8E60h */ case    7:  		/* addi R7, R1, 96 */
		/* 820E8E60h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8E60h case    7:*/		return 0x820E8E64;
		  /* 820E8E64h */ case    8:  		/* addi R6, R1, 128 */
		/* 820E8E64h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8E64h case    8:*/		return 0x820E8E68;
		  /* 820E8E68h */ case    9:  		/* mr R3, R31 */
		/* 820E8E68h case    9:*/		regs.R3 = regs.R31;
		/* 820E8E68h case    9:*/		return 0x820E8E6C;
		  /* 820E8E6Ch */ case   10:  		/* bl -20972 */
		/* 820E8E6Ch case   10:*/		regs.LR = 0x820E8E70; return 0x820E3C80;
		/* 820E8E6Ch case   10:*/		return 0x820E8E70;
		  /* 820E8E70h */ case   11:  		/* cmpwi CR6, R3, 1 */
		/* 820E8E70h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E8E70h case   11:*/		return 0x820E8E74;
		  /* 820E8E74h */ case   12:  		/* bc 4, CR6_EQ, 140 */
		/* 820E8E74h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820E8F00;  }
		/* 820E8E74h case   12:*/		return 0x820E8E78;
		  /* 820E8E78h */ case   13:  		/* addi R5, R30, -192 */
		/* 820E8E78h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFF40);
		/* 820E8E78h case   13:*/		return 0x820E8E7C;
		  /* 820E8E7Ch */ case   14:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E8E7Ch case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8E7Ch case   14:*/		return 0x820E8E80;
		  /* 820E8E80h */ case   15:  		/* li R10, 1 */
		/* 820E8E80h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E8E80h case   15:*/		return 0x820E8E84;
		  /* 820E8E84h */ case   16:  		/* stw R29, <#[R1 + 84]> */
		/* 820E8E84h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8E84h case   16:*/		return 0x820E8E88;
		  /* 820E8E88h */ case   17:  		/* addi R9, R1, 112 */
		/* 820E8E88h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8E88h case   17:*/		return 0x820E8E8C;
		  /* 820E8E8Ch */ case   18:  		/* addi R8, R1, 192 */
		/* 820E8E8Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8E8Ch case   18:*/		return 0x820E8E90;
		  /* 820E8E90h */ case   19:  		/* addi R7, R1, 96 */
		/* 820E8E90h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8E90h case   19:*/		return 0x820E8E94;
		  /* 820E8E94h */ case   20:  		/* addi R6, R1, 128 */
		/* 820E8E94h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8E94h case   20:*/		return 0x820E8E98;
		  /* 820E8E98h */ case   21:  		/* mr R3, R31 */
		/* 820E8E98h case   21:*/		regs.R3 = regs.R31;
		/* 820E8E98h case   21:*/		return 0x820E8E9C;
		  /* 820E8E9Ch */ case   22:  		/* bl -21020 */
		/* 820E8E9Ch case   22:*/		regs.LR = 0x820E8EA0; return 0x820E3C80;
		/* 820E8E9Ch case   22:*/		return 0x820E8EA0;
		  /* 820E8EA0h */ case   23:  		/* cmpwi CR6, R3, 1 */
		/* 820E8EA0h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E8EA0h case   23:*/		return 0x820E8EA4;
		  /* 820E8EA4h */ case   24:  		/* bc 4, CR6_EQ, 92 */
		/* 820E8EA4h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820E8F00;  }
		/* 820E8EA4h case   24:*/		return 0x820E8EA8;
		  /* 820E8EA8h */ case   25:  		/* addi R5, R30, -96 */
		/* 820E8EA8h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xFFFFFFA0);
		/* 820E8EA8h case   25:*/		return 0x820E8EAC;
		  /* 820E8EACh */ case   26:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E8EACh case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8EACh case   26:*/		return 0x820E8EB0;
		  /* 820E8EB0h */ case   27:  		/* li R10, 1 */
		/* 820E8EB0h case   27:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E8EB0h case   27:*/		return 0x820E8EB4;
		  /* 820E8EB4h */ case   28:  		/* stw R29, <#[R1 + 84]> */
		/* 820E8EB4h case   28:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8EB4h case   28:*/		return 0x820E8EB8;
		  /* 820E8EB8h */ case   29:  		/* addi R9, R1, 112 */
		/* 820E8EB8h case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8EB8h case   29:*/		return 0x820E8EBC;
		  /* 820E8EBCh */ case   30:  		/* addi R8, R1, 192 */
		/* 820E8EBCh case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8EBCh case   30:*/		return 0x820E8EC0;
		  /* 820E8EC0h */ case   31:  		/* addi R7, R1, 96 */
		/* 820E8EC0h case   31:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8EC0h case   31:*/		return 0x820E8EC4;
		  /* 820E8EC4h */ case   32:  		/* addi R6, R1, 128 */
		/* 820E8EC4h case   32:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8EC4h case   32:*/		return 0x820E8EC8;
		  /* 820E8EC8h */ case   33:  		/* mr R3, R31 */
		/* 820E8EC8h case   33:*/		regs.R3 = regs.R31;
		/* 820E8EC8h case   33:*/		return 0x820E8ECC;
		  /* 820E8ECCh */ case   34:  		/* bl -21068 */
		/* 820E8ECCh case   34:*/		regs.LR = 0x820E8ED0; return 0x820E3C80;
		/* 820E8ECCh case   34:*/		return 0x820E8ED0;
		  /* 820E8ED0h */ case   35:  		/* cmpwi CR6, R3, 1 */
		/* 820E8ED0h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 820E8ED0h case   35:*/		return 0x820E8ED4;
		  /* 820E8ED4h */ case   36:  		/* bc 4, CR6_EQ, 44 */
		/* 820E8ED4h case   36:*/		if ( !regs.CR[6].eq ) { return 0x820E8F00;  }
		/* 820E8ED4h case   36:*/		return 0x820E8ED8;
		  /* 820E8ED8h */ case   37:  		/* stw R29, <#[R1 + 84]> */
		/* 820E8ED8h case   37:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 820E8ED8h case   37:*/		return 0x820E8EDC;
		  /* 820E8EDCh */ case   38:  		/* mr R5, R30 */
		/* 820E8EDCh case   38:*/		regs.R5 = regs.R30;
		/* 820E8EDCh case   38:*/		return 0x820E8EE0;
		  /* 820E8EE0h */ case   39:  		/* li R10, 1 */
		/* 820E8EE0h case   39:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820E8EE0h case   39:*/		return 0x820E8EE4;
		  /* 820E8EE4h */ case   40:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E8EE4h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8EE4h case   40:*/		return 0x820E8EE8;
		  /* 820E8EE8h */ case   41:  		/* addi R9, R1, 112 */
		/* 820E8EE8h case   41:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E8EE8h case   41:*/		return 0x820E8EEC;
		  /* 820E8EECh */ case   42:  		/* addi R8, R1, 192 */
		/* 820E8EECh case   42:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E8EECh case   42:*/		return 0x820E8EF0;
		  /* 820E8EF0h */ case   43:  		/* addi R7, R1, 96 */
		/* 820E8EF0h case   43:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E8EF0h case   43:*/		return 0x820E8EF4;
		  /* 820E8EF4h */ case   44:  		/* addi R6, R1, 128 */
		/* 820E8EF4h case   44:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E8EF4h case   44:*/		return 0x820E8EF8;
		  /* 820E8EF8h */ case   45:  		/* mr R3, R31 */
		/* 820E8EF8h case   45:*/		regs.R3 = regs.R31;
		/* 820E8EF8h case   45:*/		return 0x820E8EFC;
		  /* 820E8EFCh */ case   46:  		/* bl -21116 */
		/* 820E8EFCh case   46:*/		regs.LR = 0x820E8F00; return 0x820E3C80;
		/* 820E8EFCh case   46:*/		return 0x820E8F00;
	}
	return 0x820E8F00;
} // Block from 820E8E44h-820E8F00h (47 instructions)

//////////////////////////////////////////////////////
// Block at 820E8F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8F00);
		  /* 820E8F00h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 820E8F00h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820E8F00h case    0:*/		return 0x820E8F04;
		  /* 820E8F04h */ case    1:  		/* bc 4, CR6_EQ, 340 */
		/* 820E8F04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E9058;  }
		/* 820E8F04h case    1:*/		return 0x820E8F08;
		  /* 820E8F08h */ case    2:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E8F08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8F08h case    2:*/		return 0x820E8F0C;
		  /* 820E8F0Ch */ case    3:  		/* li R10, 4 */
		/* 820E8F0Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820E8F0Ch case    3:*/		return 0x820E8F10;
		  /* 820E8F10h */ case    4:  		/* lwz R7, <#[R31 + 16]> */
		/* 820E8F10h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000010) );
		/* 820E8F10h case    4:*/		return 0x820E8F14;
		  /* 820E8F14h */ case    5:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E8F14h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8F14h case    5:*/		return 0x820E8F18;
		  /* 820E8F18h */ case    6:  		/* lwz R8, <#[R11 + 8]> */
		/* 820E8F18h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 820E8F18h case    6:*/		return 0x820E8F1C;
		  /* 820E8F1Ch */ case    7:  		/* lis R11, -32256 */
		/* 820E8F1Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E8F1Ch case    7:*/		return 0x820E8F20;
		  /* 820E8F20h */ case    8:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 820E8F20h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 820E8F20h case    8:*/		return 0x820E8F24;
		  /* 820E8F24h */ case    9:  		/* lwzx R11, <#[R10 + R8]> */
		/* 820E8F24h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E8F24h case    9:*/		return 0x820E8F28;
		  /* 820E8F28h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8F28h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8F28h case   10:*/		return 0x820E8F2C;
		  /* 820E8F2Ch */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E8F2Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E8F2Ch case   11:*/		return 0x820E8F30;
		  /* 820E8F30h */ case   12:  		/* lwz R6, <#[R11 + 4]> */
		/* 820E8F30h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 820E8F30h case   12:*/		return 0x820E8F34;
		  /* 820E8F34h */ case   13:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820E8F34h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820E8F34h case   13:*/		return 0x820E8F38;
		  /* 820E8F38h */ case   14:  		/* lwzx R6, <#[R6 + R7]> */
		/* 820E8F38h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 820E8F38h case   14:*/		return 0x820E8F3C;
		  /* 820E8F3Ch */ case   15:  		/* lwz R6, <#[R6 + 4]> */
		/* 820E8F3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000004) );
		/* 820E8F3Ch case   15:*/		return 0x820E8F40;
		  /* 820E8F40h */ case   16:  		/* rlwinm. R6, R6, 0, 23, 23 */
		/* 820E8F40h case   16:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R6,regs.R6);
		/* 820E8F40h case   16:*/		return 0x820E8F44;
		  /* 820E8F44h */ case   17:  		/* bc 12, CR0_EQ, -264 */
		/* 820E8F44h case   17:*/		if ( regs.CR[0].eq ) { return 0x820E8E3C;  }
		/* 820E8F44h case   17:*/		return 0x820E8F48;
		  /* 820E8F48h */ case   18:  		/* lfd FR13, <#[R11 + 32]> */
		/* 820E8F48h case   18:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 820E8F48h case   18:*/		return 0x820E8F4C;
		  /* 820E8F4Ch */ case   19:  		/* fcmpu CR6, FR13, FR0 */
		/* 820E8F4Ch case   19:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820E8F4Ch case   19:*/		return 0x820E8F50;
		  /* 820E8F50h */ case   20:  		/* bc 4, CR6_EQ, -276 */
		/* 820E8F50h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820E8E3C;  }
		/* 820E8F50h case   20:*/		return 0x820E8F54;
		  /* 820E8F54h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E8F54h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E8F54h case   21:*/		return 0x820E8F58;
		  /* 820E8F58h */ case   22:  		/* cmpwi CR6, R11, -1 */
		/* 820E8F58h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E8F58h case   22:*/		return 0x820E8F5C;
		  /* 820E8F5Ch */ case   23:  		/* bc 4, CR6_EQ, -288 */
		/* 820E8F5Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x820E8E3C;  }
		/* 820E8F5Ch case   23:*/		return 0x820E8F60;
		  /* 820E8F60h */ case   24:  		/* addi R10, R10, 4 */
		/* 820E8F60h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E8F60h case   24:*/		return 0x820E8F64;
		  /* 820E8F64h */ case   25:  		/* cmplwi CR6, R10, 8 */
		/* 820E8F64h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 820E8F64h case   25:*/		return 0x820E8F68;
		  /* 820E8F68h */ case   26:  		/* bc 12, CR6_LT, -68 */
		/* 820E8F68h case   26:*/		if ( regs.CR[6].lt ) { return 0x820E8F24;  }
		/* 820E8F68h case   26:*/		return 0x820E8F6C;
		  /* 820E8F6Ch */ case   27:  		/* lwz R11, <#[R1 + 224]> */
		/* 820E8F6Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820E8F6Ch case   27:*/		return 0x820E8F70;
		  /* 820E8F70h */ case   28:  		/* mr R26, R25 */
		/* 820E8F70h case   28:*/		regs.R26 = regs.R25;
		/* 820E8F70h case   28:*/		return 0x820E8F74;
		  /* 820E8F74h */ case   29:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8F74h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8F74h case   29:*/		return 0x820E8F78;
		  /* 820E8F78h */ case   30:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820E8F78h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E8F78h case   30:*/		return 0x820E8F7C;
		  /* 820E8F7Ch */ case   31:  		/* lwz R10, <#[R11 + 8]> */
		/* 820E8F7Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820E8F7Ch case   31:*/		return 0x820E8F80;
		  /* 820E8F80h */ case   32:  		/* cmpwi CR6, R10, -1 */
		/* 820E8F80h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E8F80h case   32:*/		return 0x820E8F84;
		  /* 820E8F84h */ case   33:  		/* bc 4, CR6_EQ, 32 */
		/* 820E8F84h case   33:*/		if ( !regs.CR[6].eq ) { return 0x820E8FA4;  }
		/* 820E8F84h case   33:*/		return 0x820E8F88;
		  /* 820E8F88h */ case   34:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E8F88h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E8F88h case   34:*/		return 0x820E8F8C;
		  /* 820E8F8Ch */ case   35:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E8F8Ch case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E8F8Ch case   35:*/		return 0x820E8F90;
		  /* 820E8F90h */ case   36:  		/* lwzx R11, <#[R11 + R7]> */
		/* 820E8F90h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E8F90h case   36:*/		return 0x820E8F94;
		  /* 820E8F94h */ case   37:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E8F94h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E8F94h case   37:*/		return 0x820E8F98;
		  /* 820E8F98h */ case   38:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 820E8F98h case   38:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 820E8F98h case   38:*/		return 0x820E8F9C;
		  /* 820E8F9Ch */ case   39:  		/* bc 12, CR0_EQ, 8 */
		/* 820E8F9Ch case   39:*/		if ( regs.CR[0].eq ) { return 0x820E8FA4;  }
		/* 820E8F9Ch case   39:*/		return 0x820E8FA0;
		  /* 820E8FA0h */ case   40:  		/* mr R26, R29 */
		/* 820E8FA0h case   40:*/		regs.R26 = regs.R29;
		/* 820E8FA0h case   40:*/		return 0x820E8FA4;
	}
	return 0x820E8FA4;
} // Block from 820E8F00h-820E8FA4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 820E8FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E8FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E8FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E8FA4);
		  /* 820E8FA4h */ case    0:  		/* lis R11, -32255 */
		/* 820E8FA4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820E8FA4h case    0:*/		return 0x820E8FA8;
		  /* 820E8FA8h */ case    1:  		/* mr R29, R25 */
		/* 820E8FA8h case    1:*/		regs.R29 = regs.R25;
		/* 820E8FA8h case    1:*/		return 0x820E8FAC;
		  /* 820E8FACh */ case    2:  		/* lfd FR31, <#[R11 - 24488]> */
		/* 820E8FACh case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0xFFFFA058) );
		/* 820E8FACh case    2:*/		return 0x820E8FB0;
		  /* 820E8FB0h */ case    3:  		/* addi R11, R1, 224 */
		/* 820E8FB0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 820E8FB0h case    3:*/		return 0x820E8FB4;
		  /* 820E8FB4h */ case    4:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E8FB4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E8FB4h case    4:*/		return 0x820E8FB8;
		  /* 820E8FB8h */ case    5:  		/* mr R3, R31 */
		/* 820E8FB8h case    5:*/		regs.R3 = regs.R31;
		/* 820E8FB8h case    5:*/		return 0x820E8FBC;
		  /* 820E8FBCh */ case    6:  		/* add R11, R29, R11 */
		/* 820E8FBCh case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 820E8FBCh case    6:*/		return 0x820E8FC0;
		  /* 820E8FC0h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E8FC0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E8FC0h case    7:*/		return 0x820E8FC4;
		  /* 820E8FC4h */ case    8:  		/* lwz R9, <#[R11 - 16]> */
		/* 820E8FC4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 820E8FC4h case    8:*/		return 0x820E8FC8;
		  /* 820E8FC8h */ case    9:  		/* lwz R27, <#[R11]> */
		/* 820E8FC8h case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 820E8FC8h case    9:*/		return 0x820E8FCC;
		  /* 820E8FCCh */ case   10:  		/* rlwinm R11, R27, 2, 0, 29 */
		/* 820E8FCCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R27);
		/* 820E8FCCh case   10:*/		return 0x820E8FD0;
		  /* 820E8FD0h */ case   11:  		/* stwx R9, <#[R10 + R29]> */
		/* 820E8FD0h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 820E8FD0h case   11:*/		return 0x820E8FD4;
		  /* 820E8FD4h */ case   12:  		/* lwz R10, <#[R31 + 20]> */
		/* 820E8FD4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8FD4h case   12:*/		return 0x820E8FD8;
		  /* 820E8FD8h */ case   13:  		/* lwzx R30, <#[R11 + R10]> */
		/* 820E8FD8h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E8FD8h case   13:*/		return 0x820E8FDC;
		  /* 820E8FDCh */ case   14:  		/* lfd FR1, <#[R30 + 32]> */
		/* 820E8FDCh case   14:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R30 + 0x00000020) );
		/* 820E8FDCh case   14:*/		return 0x820E8FE0;
		  /* 820E8FE0h */ case   15:  		/* lwz R6, <#[R30 + 16]> */
		/* 820E8FE0h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 820E8FE0h case   15:*/		return 0x820E8FE4;
		  /* 820E8FE4h */ case   16:  		/* lwz R5, <#[R30 + 12]> */
		/* 820E8FE4h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 820E8FE4h case   16:*/		return 0x820E8FE8;
		  /* 820E8FE8h */ case   17:  		/* lwz R4, <#[R30 + 4]> */
		/* 820E8FE8h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 820E8FE8h case   17:*/		return 0x820E8FEC;
		  /* 820E8FECh */ case   18:  		/* bl 82492 */
		/* 820E8FECh case   18:*/		regs.LR = 0x820E8FF0; return 0x820FD228;
		/* 820E8FECh case   18:*/		return 0x820E8FF0;
		  /* 820E8FF0h */ case   19:  		/* mr R28, R3 */
		/* 820E8FF0h case   19:*/		regs.R28 = regs.R3;
		/* 820E8FF0h case   19:*/		return 0x820E8FF4;
		  /* 820E8FF4h */ case   20:  		/* cmpwi CR6, R3, -1 */
		/* 820E8FF4h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E8FF4h case   20:*/		return 0x820E8FF8;
		  /* 820E8FF8h */ case   21:  		/* bc 12, CR6_EQ, 124 */
		/* 820E8FF8h case   21:*/		if ( regs.CR[6].eq ) { return 0x820E9074;  }
		/* 820E8FF8h case   21:*/		return 0x820E8FFC;
		  /* 820E8FFCh */ case   22:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E8FFCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E8FFCh case   22:*/		return 0x820E9000;
		  /* 820E9000h */ case   23:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820E9000h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820E9000h case   23:*/		return 0x820E9004;
		  /* 820E9004h */ case   24:  		/* mr R4, R30 */
		/* 820E9004h case   24:*/		regs.R4 = regs.R30;
		/* 820E9004h case   24:*/		return 0x820E9008;
		  /* 820E9008h */ case   25:  		/* lwzx R30, <#[R10 + R11]> */
		/* 820E9008h case   25:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E9008h case   25:*/		return 0x820E900C;
		  /* 820E900Ch */ case   26:  		/* mr R3, R30 */
		/* 820E900Ch case   26:*/		regs.R3 = regs.R30;
		/* 820E900Ch case   26:*/		return 0x820E9010;
		  /* 820E9010h */ case   27:  		/* bl 80792 */
		/* 820E9010h case   27:*/		regs.LR = 0x820E9014; return 0x820FCBA8;
		/* 820E9010h case   27:*/		return 0x820E9014;
		  /* 820E9014h */ case   28:  		/* cmpwi CR6, R26, 0 */
		/* 820E9014h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 820E9014h case   28:*/		return 0x820E9018;
		  /* 820E9018h */ case   29:  		/* bc 4, CR6_EQ, 76 */
		/* 820E9018h case   29:*/		if ( !regs.CR[6].eq ) { return 0x820E9064;  }
		/* 820E9018h case   29:*/		return 0x820E901C;
		  /* 820E901Ch */ case   30:  		/* lwz R11, <#[R30 + 56]> */
		/* 820E901Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820E901Ch case   30:*/		return 0x820E9020;
		  /* 820E9020h */ case   31:  		/* cmpwi CR6, R11, -1 */
		/* 820E9020h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E9020h case   31:*/		return 0x820E9024;
		  /* 820E9024h */ case   32:  		/* bc 4, CR6_EQ, 8 */
		/* 820E9024h case   32:*/		if ( !regs.CR[6].eq ) { return 0x820E902C;  }
		/* 820E9024h case   32:*/		return 0x820E9028;
		  /* 820E9028h */ case   33:  		/* stw R27, <#[R30 + 56]> */
		/* 820E9028h case   33:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000038) );
		/* 820E9028h case   33:*/		return 0x820E902C;
	}
	return 0x820E902C;
} // Block from 820E8FA4h-820E902Ch (34 instructions)

//////////////////////////////////////////////////////
// Block at 820E902Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E902C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E902C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E902C);
		  /* 820E902Ch */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 820E902Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820E902Ch case    0:*/		return 0x820E9030;
		  /* 820E9030h */ case    1:  		/* xoris R11, R11, 8 */
		/* 820E9030h case    1:*/		cpu::op::xoris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820E9030h case    1:*/		return 0x820E9034;
		  /* 820E9034h */ case    2:  		/* stw R11, <#[R30 + 60]> */
		/* 820E9034h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820E9034h case    2:*/		return 0x820E9038;
		  /* 820E9038h */ case    3:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E9038h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9038h case    3:*/		return 0x820E903C;
		  /* 820E903Ch */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E903Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E903Ch case    4:*/		return 0x820E9040;
		  /* 820E9040h */ case    5:  		/* add R11, R11, R29 */
		/* 820E9040h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 820E9040h case    5:*/		return 0x820E9044;
		  /* 820E9044h */ case    6:  		/* addi R29, R29, 4 */
		/* 820E9044h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820E9044h case    6:*/		return 0x820E9048;
		  /* 820E9048h */ case    7:  		/* cmplwi CR6, R29, 4 */
		/* 820E9048h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 820E9048h case    7:*/		return 0x820E904C;
		  /* 820E904Ch */ case    8:  		/* stw R28, <#[R11 + 4]> */
		/* 820E904Ch case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 820E904Ch case    8:*/		return 0x820E9050;
		  /* 820E9050h */ case    9:  		/* bc 12, CR6_LT, -160 */
		/* 820E9050h case    9:*/		if ( regs.CR[6].lt ) { return 0x820E8FB0;  }
		/* 820E9050h case    9:*/		return 0x820E9054;
		  /* 820E9054h */ case   10:  		/* mr R3, R25 */
		/* 820E9054h case   10:*/		regs.R3 = regs.R25;
		/* 820E9054h case   10:*/		return 0x820E9058;
	}
	return 0x820E9058;
} // Block from 820E902Ch-820E9058h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E9058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9058);
		  /* 820E9058h */ case    0:  		/* addi R1, R1, 432 */
		/* 820E9058h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 820E9058h case    0:*/		return 0x820E905C;
		  /* 820E905Ch */ case    1:  		/* lfd FR31, <#[R1 - 72]> */
		/* 820E905Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E905Ch case    1:*/		return 0x820E9060;
		  /* 820E9060h */ case    2:  		/* b -359876 */
		/* 820E9060h case    2:*/		return 0x8209129C;
		/* 820E9060h case    2:*/		return 0x820E9064;
	}
	return 0x820E9064;
} // Block from 820E9058h-820E9064h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E9064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9064);
		  /* 820E9064h */ case    0:  		/* lfd FR0, <#[R30 + 32]> */
		/* 820E9064h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000020) );
		/* 820E9064h case    0:*/		return 0x820E9068;
		  /* 820E9068h */ case    1:  		/* fmul FR0, FR0, FR31 */
		/* 820E9068h case    1:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR31);
		/* 820E9068h case    1:*/		return 0x820E906C;
		  /* 820E906Ch */ case    2:  		/* stfd FR0, <#[R30 + 32]> */
		/* 820E906Ch case    2:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R30 + 0x00000020) );
		/* 820E906Ch case    2:*/		return 0x820E9070;
		  /* 820E9070h */ case    3:  		/* b -56 */
		/* 820E9070h case    3:*/		return 0x820E9038;
		/* 820E9070h case    3:*/		return 0x820E9074;
	}
	return 0x820E9074;
} // Block from 820E9064h-820E9074h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E9074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9074);
		  /* 820E9074h */ case    0:  		/* lis R3, -32761 */
		/* 820E9074h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E9074h case    0:*/		return 0x820E9078;
		  /* 820E9078h */ case    1:  		/* ori R3, R3, 14 */
		/* 820E9078h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E9078h case    1:*/		return 0x820E907C;
		  /* 820E907Ch */ case    2:  		/* b -36 */
		/* 820E907Ch case    2:*/		return 0x820E9058;
		/* 820E907Ch case    2:*/		return 0x820E9080;
	}
	return 0x820E9080;
} // Block from 820E9074h-820E9080h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E9080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9080);
		  /* 820E9080h */ case    0:  		/* mfspr R12, LR */
		/* 820E9080h case    0:*/		regs.R12 = regs.LR;
		/* 820E9080h case    0:*/		return 0x820E9084;
		  /* 820E9084h */ case    1:  		/* bl -359980 */
		/* 820E9084h case    1:*/		regs.LR = 0x820E9088; return 0x82091258;
		/* 820E9084h case    1:*/		return 0x820E9088;
		  /* 820E9088h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 820E9088h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 820E9088h case    2:*/		return 0x820E908C;
		  /* 820E908Ch */ case    3:  		/* mr R29, R3 */
		/* 820E908Ch case    3:*/		regs.R29 = regs.R3;
		/* 820E908Ch case    3:*/		return 0x820E9090;
		  /* 820E9090h */ case    4:  		/* li R30, 0 */
		/* 820E9090h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E9090h case    4:*/		return 0x820E9094;
		  /* 820E9094h */ case    5:  		/* li R11, 2 */
		/* 820E9094h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E9094h case    5:*/		return 0x820E9098;
		  /* 820E9098h */ case    6:  		/* li R10, 3 */
		/* 820E9098h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820E9098h case    6:*/		return 0x820E909C;
		  /* 820E909Ch */ case    7:  		/* stw R30, <#[R1 + 96]> */
		/* 820E909Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 820E909Ch case    7:*/		return 0x820E90A0;
		  /* 820E90A0h */ case    8:  		/* li R31, 1 */
		/* 820E90A0h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 820E90A0h case    8:*/		return 0x820E90A4;
		  /* 820E90A4h */ case    9:  		/* stw R30, <#[R1 + 112]> */
		/* 820E90A4h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 820E90A4h case    9:*/		return 0x820E90A8;
		  /* 820E90A8h */ case   10:  		/* li R5, 160 */
		/* 820E90A8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xA0);
		/* 820E90A8h case   10:*/		return 0x820E90AC;
		  /* 820E90ACh */ case   11:  		/* stw R11, <#[R1 + 120]> */
		/* 820E90ACh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E90ACh case   11:*/		return 0x820E90B0;
		  /* 820E90B0h */ case   12:  		/* li R4, 255 */
		/* 820E90B0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 820E90B0h case   12:*/		return 0x820E90B4;
		  /* 820E90B4h */ case   13:  		/* stw R31, <#[R1 + 116]> */
		/* 820E90B4h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 820E90B4h case   13:*/		return 0x820E90B8;
		  /* 820E90B8h */ case   14:  		/* addi R3, R1, 192 */
		/* 820E90B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820E90B8h case   14:*/		return 0x820E90BC;
		  /* 820E90BCh */ case   15:  		/* stw R10, <#[R1 + 124]> */
		/* 820E90BCh case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E90BCh case   15:*/		return 0x820E90C0;
		  /* 820E90C0h */ case   16:  		/* bl -359808 */
		/* 820E90C0h case   16:*/		regs.LR = 0x820E90C4; return 0x82091340;
		/* 820E90C0h case   16:*/		return 0x820E90C4;
		  /* 820E90C4h */ case   17:  		/* lwz R4, <#[R29 + 260]> */
		/* 820E90C4h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000104) );
		/* 820E90C4h case   17:*/		return 0x820E90C8;
		  /* 820E90C8h */ case   18:  		/* lis R11, -32254 */
		/* 820E90C8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E90C8h case   18:*/		return 0x820E90CC;
		  /* 820E90CCh */ case   19:  		/* stw R31, <#[R1 + 84]> */
		/* 820E90CCh case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 820E90CCh case   19:*/		return 0x820E90D0;
		  /* 820E90D0h */ case   20:  		/* addi R9, R1, 112 */
		/* 820E90D0h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E90D0h case   20:*/		return 0x820E90D4;
		  /* 820E90D4h */ case   21:  		/* addi R5, R11, -24072 */
		/* 820E90D4h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA1F8);
		/* 820E90D4h case   21:*/		return 0x820E90D8;
		  /* 820E90D8h */ case   22:  		/* addi R8, R1, 192 */
		/* 820E90D8h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E90D8h case   22:*/		return 0x820E90DC;
		  /* 820E90DCh */ case   23:  		/* lwz R11, <#[R4]> */
		/* 820E90DCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E90DCh case   23:*/		return 0x820E90E0;
		  /* 820E90E0h */ case   24:  		/* addi R7, R1, 96 */
		/* 820E90E0h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E90E0h case   24:*/		return 0x820E90E4;
		  /* 820E90E4h */ case   25:  		/* addi R6, R1, 128 */
		/* 820E90E4h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E90E4h case   25:*/		return 0x820E90E8;
		  /* 820E90E8h */ case   26:  		/* rlwinm R31, R11, 0, 12, 31 */
		/* 820E90E8h case   26:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R11);
		/* 820E90E8h case   26:*/		return 0x820E90EC;
		  /* 820E90ECh */ case   27:  		/* mr R3, R29 */
		/* 820E90ECh case   27:*/		regs.R3 = regs.R29;
		/* 820E90ECh case   27:*/		return 0x820E90F0;
		  /* 820E90F0h */ case   28:  		/* mr R10, R31 */
		/* 820E90F0h case   28:*/		regs.R10 = regs.R31;
		/* 820E90F0h case   28:*/		return 0x820E90F4;
		  /* 820E90F4h */ case   29:  		/* bl -21620 */
		/* 820E90F4h case   29:*/		regs.LR = 0x820E90F8; return 0x820E3C80;
		/* 820E90F4h case   29:*/		return 0x820E90F8;
		  /* 820E90F8h */ case   30:  		/* or. R28, R3, R3 */
		/* 820E90F8h case   30:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820E90F8h case   30:*/		return 0x820E90FC;
		  /* 820E90FCh */ case   31:  		/* bc 4, CR0_EQ, 272 */
		/* 820E90FCh case   31:*/		if ( !regs.CR[0].eq ) { return 0x820E920C;  }
		/* 820E90FCh case   31:*/		return 0x820E9100;
		  /* 820E9100h */ case   32:  		/* lwz R11, <#[R1 + 96]> */
		/* 820E9100h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820E9100h case   32:*/		return 0x820E9104;
		  /* 820E9104h */ case   33:  		/* mr R4, R30 */
		/* 820E9104h case   33:*/		regs.R4 = regs.R30;
		/* 820E9104h case   33:*/		return 0x820E9108;
		  /* 820E9108h */ case   34:  		/* mr R5, R30 */
		/* 820E9108h case   34:*/		regs.R5 = regs.R30;
		/* 820E9108h case   34:*/		return 0x820E910C;
		  /* 820E910Ch */ case   35:  		/* addic. R7, R11, -3 */
		/* 820E910Ch case   35:*/		cpu::op::addic<1>(regs,&regs.R7,regs.R11,0xFFFFFFFD);
		/* 820E910Ch case   35:*/		return 0x820E9110;
		  /* 820E9110h */ case   36:  		/* mr R8, R30 */
		/* 820E9110h case   36:*/		regs.R8 = regs.R30;
		/* 820E9110h case   36:*/		return 0x820E9114;
		  /* 820E9114h */ case   37:  		/* mr R9, R30 */
		/* 820E9114h case   37:*/		regs.R9 = regs.R30;
		/* 820E9114h case   37:*/		return 0x820E9118;
		  /* 820E9118h */ case   38:  		/* bc 12, CR0_EQ, 132 */
		/* 820E9118h case   38:*/		if ( regs.CR[0].eq ) { return 0x820E919C;  }
		/* 820E9118h case   38:*/		return 0x820E911C;
		  /* 820E911Ch */ case   39:  		/* addi R6, R1, 128 */
		/* 820E911Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E911Ch case   39:*/		return 0x820E9120;
		  /* 820E9120h */ case   40:  		/* lwz R11, <#[R6]> */
		/* 820E9120h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 820E9120h case   40:*/		return 0x820E9124;
		  /* 820E9124h */ case   41:  		/* lis R3, 20480 */
		/* 820E9124h case   41:*/		cpu::op::lis<0>(regs,&regs.R3,0x5000);
		/* 820E9124h case   41:*/		return 0x820E9128;
		  /* 820E9128h */ case   42:  		/* lwz R10, <#[R11]> */
		/* 820E9128h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E9128h case   42:*/		return 0x820E912C;
		  /* 820E912Ch */ case   43:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 820E912Ch case   43:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 820E912Ch case   43:*/		return 0x820E9130;
		  /* 820E9130h */ case   44:  		/* cmplw CR6, R10, R3 */
		/* 820E9130h case   44:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 820E9130h case   44:*/		return 0x820E9134;
		  /* 820E9134h */ case   45:  		/* bc 4, CR6_EQ, 24 */
		/* 820E9134h case   45:*/		if ( !regs.CR[6].eq ) { return 0x820E914C;  }
		/* 820E9134h case   45:*/		return 0x820E9138;
		  /* 820E9138h */ case   46:  		/* cmplwi CR6, R8, 0 */
		/* 820E9138h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820E9138h case   46:*/		return 0x820E913C;
		  /* 820E913Ch */ case   47:  		/* bc 12, CR6_EQ, 12 */
		/* 820E913Ch case   47:*/		if ( regs.CR[6].eq ) { return 0x820E9148;  }
		/* 820E913Ch case   47:*/		return 0x820E9140;
		  /* 820E9140h */ case   48:  		/* cmplw CR6, R8, R11 */
		/* 820E9140h case   48:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 820E9140h case   48:*/		return 0x820E9144;
		  /* 820E9144h */ case   49:  		/* bc 4, CR6_EQ, 212 */
		/* 820E9144h case   49:*/		if ( !regs.CR[6].eq ) { return 0x820E9218;  }
		/* 820E9144h case   49:*/		return 0x820E9148;
	}
	return 0x820E9148;
} // Block from 820E9080h-820E9148h (50 instructions)

//////////////////////////////////////////////////////
// Block at 820E9148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9148);
		  /* 820E9148h */ case    0:  		/* mr R8, R11 */
		/* 820E9148h case    0:*/		regs.R8 = regs.R11;
		/* 820E9148h case    0:*/		return 0x820E914C;
	}
	return 0x820E914C;
} // Block from 820E9148h-820E914Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E914Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E914C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E914C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E914C);
		  /* 820E914Ch */ case    0:  		/* lis R3, 8272 */
		/* 820E914Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0x2050);
		/* 820E914Ch case    0:*/		return 0x820E9150;
		  /* 820E9150h */ case    1:  		/* cmplw CR6, R10, R3 */
		/* 820E9150h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 820E9150h case    1:*/		return 0x820E9154;
		  /* 820E9154h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 820E9154h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E916C;  }
		/* 820E9154h case    2:*/		return 0x820E9158;
		  /* 820E9158h */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 820E9158h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820E9158h case    3:*/		return 0x820E915C;
		  /* 820E915Ch */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 820E915Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x820E9168;  }
		/* 820E915Ch case    4:*/		return 0x820E9160;
		  /* 820E9160h */ case    5:  		/* cmplw CR6, R4, R11 */
		/* 820E9160h case    5:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 820E9160h case    5:*/		return 0x820E9164;
		  /* 820E9164h */ case    6:  		/* bc 4, CR6_EQ, 180 */
		/* 820E9164h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E9218;  }
		/* 820E9164h case    6:*/		return 0x820E9168;
	}
	return 0x820E9168;
} // Block from 820E914Ch-820E9168h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E9168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9168);
		  /* 820E9168h */ case    0:  		/* mr R4, R11 */
		/* 820E9168h case    0:*/		regs.R4 = regs.R11;
		/* 820E9168h case    0:*/		return 0x820E916C;
	}
	return 0x820E916C;
} // Block from 820E9168h-820E916Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E916Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E916C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E916C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E916C);
		  /* 820E916Ch */ case    0:  		/* lis R3, 4208 */
		/* 820E916Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0x1070);
		/* 820E916Ch case    0:*/		return 0x820E9170;
		  /* 820E9170h */ case    1:  		/* cmplw CR6, R10, R3 */
		/* 820E9170h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 820E9170h case    1:*/		return 0x820E9174;
		  /* 820E9174h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 820E9174h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820E918C;  }
		/* 820E9174h case    2:*/		return 0x820E9178;
		  /* 820E9178h */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 820E9178h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E9178h case    3:*/		return 0x820E917C;
		  /* 820E917Ch */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 820E917Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x820E9188;  }
		/* 820E917Ch case    4:*/		return 0x820E9180;
		  /* 820E9180h */ case    5:  		/* cmplw CR6, R5, R11 */
		/* 820E9180h case    5:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 820E9180h case    5:*/		return 0x820E9184;
		  /* 820E9184h */ case    6:  		/* bc 4, CR6_EQ, 148 */
		/* 820E9184h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E9218;  }
		/* 820E9184h case    6:*/		return 0x820E9188;
	}
	return 0x820E9188;
} // Block from 820E916Ch-820E9188h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E9188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9188);
		  /* 820E9188h */ case    0:  		/* mr R5, R11 */
		/* 820E9188h case    0:*/		regs.R5 = regs.R11;
		/* 820E9188h case    0:*/		return 0x820E918C;
	}
	return 0x820E918C;
} // Block from 820E9188h-820E918Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E918Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E918C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E918C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E918C);
		  /* 820E918Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 820E918Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E918Ch case    0:*/		return 0x820E9190;
		  /* 820E9190h */ case    1:  		/* addi R6, R6, 4 */
		/* 820E9190h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 820E9190h case    1:*/		return 0x820E9194;
		  /* 820E9194h */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 820E9194h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 820E9194h case    2:*/		return 0x820E9198;
		  /* 820E9198h */ case    3:  		/* bc 12, CR6_LT, -120 */
		/* 820E9198h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E9120;  }
		/* 820E9198h case    3:*/		return 0x820E919C;
	}
	return 0x820E919C;
} // Block from 820E918Ch-820E919Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E919Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E919C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E919C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E919C);
		  /* 820E919Ch */ case    0:  		/* lwz R11, <#[R8]> */
		/* 820E919Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820E919Ch case    0:*/		return 0x820E91A0;
		  /* 820E91A0h */ case    1:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820E91A0h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820E91A0h case    1:*/		return 0x820E91A4;
		  /* 820E91A4h */ case    2:  		/* cmplw CR6, R11, R31 */
		/* 820E91A4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 820E91A4h case    2:*/		return 0x820E91A8;
		  /* 820E91A8h */ case    3:  		/* bc 4, CR6_EQ, 112 */
		/* 820E91A8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820E9218;  }
		/* 820E91A8h case    3:*/		return 0x820E91AC;
		  /* 820E91ACh */ case    4:  		/* lwz R11, <#[R4]> */
		/* 820E91ACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E91ACh case    4:*/		return 0x820E91B0;
		  /* 820E91B0h */ case    5:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820E91B0h case    5:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820E91B0h case    5:*/		return 0x820E91B4;
		  /* 820E91B4h */ case    6:  		/* cmplw CR6, R11, R31 */
		/* 820E91B4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 820E91B4h case    6:*/		return 0x820E91B8;
		  /* 820E91B8h */ case    7:  		/* bc 4, CR6_EQ, 96 */
		/* 820E91B8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E9218;  }
		/* 820E91B8h case    7:*/		return 0x820E91BC;
		  /* 820E91BCh */ case    8:  		/* mr R10, R30 */
		/* 820E91BCh case    8:*/		regs.R10 = regs.R30;
		/* 820E91BCh case    8:*/		return 0x820E91C0;
		  /* 820E91C0h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 820E91C0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E91C0h case    9:*/		return 0x820E91C4;
		  /* 820E91C4h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 820E91C4h case   10:*/		if ( regs.CR[6].eq ) { return 0x820E91F8;  }
		/* 820E91C4h case   10:*/		return 0x820E91C8;
		  /* 820E91C8h */ case   11:  		/* addi R11, R1, 192 */
		/* 820E91C8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC0);
		/* 820E91C8h case   11:*/		return 0x820E91CC;
		  /* 820E91CCh */ case   12:  		/* lwz R9, <#[R11]> */
		/* 820E91CCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820E91CCh case   12:*/		return 0x820E91D0;
		  /* 820E91D0h */ case   13:  		/* lwz R8, <#[R11 + 16]> */
		/* 820E91D0h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 820E91D0h case   13:*/		return 0x820E91D4;
		  /* 820E91D4h */ case   14:  		/* cmplw CR6, R9, R8 */
		/* 820E91D4h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 820E91D4h case   14:*/		return 0x820E91D8;
		  /* 820E91D8h */ case   15:  		/* bc 4, CR6_EQ, 64 */
		/* 820E91D8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820E9218;  }
		/* 820E91D8h case   15:*/		return 0x820E91DC;
		  /* 820E91DCh */ case   16:  		/* lwz R8, <#[R11 + 32]> */
		/* 820E91DCh case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000020) );
		/* 820E91DCh case   16:*/		return 0x820E91E0;
		  /* 820E91E0h */ case   17:  		/* cmplw CR6, R9, R8 */
		/* 820E91E0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 820E91E0h case   17:*/		return 0x820E91E4;
		  /* 820E91E4h */ case   18:  		/* bc 4, CR6_EQ, 52 */
		/* 820E91E4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820E9218;  }
		/* 820E91E4h case   18:*/		return 0x820E91E8;
		  /* 820E91E8h */ case   19:  		/* addi R10, R10, 1 */
		/* 820E91E8h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E91E8h case   19:*/		return 0x820E91EC;
		  /* 820E91ECh */ case   20:  		/* addi R11, R11, 4 */
		/* 820E91ECh case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E91ECh case   20:*/		return 0x820E91F0;
		  /* 820E91F0h */ case   21:  		/* cmplw CR6, R10, R31 */
		/* 820E91F0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 820E91F0h case   21:*/		return 0x820E91F4;
		  /* 820E91F4h */ case   22:  		/* bc 12, CR6_LT, -40 */
		/* 820E91F4h case   22:*/		if ( regs.CR[6].lt ) { return 0x820E91CC;  }
		/* 820E91F4h case   22:*/		return 0x820E91F8;
	}
	return 0x820E91F8;
} // Block from 820E919Ch-820E91F8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E91F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E91F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E91F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E91F8);
		  /* 820E91F8h */ case    0:  		/* lwz R11, <#[R29 + 260]> */
		/* 820E91F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000104) );
		/* 820E91F8h case    0:*/		return 0x820E91FC;
		  /* 820E91FCh */ case    1:  		/* rlwinm R5, R31, 3, 0, 28 */
		/* 820E91FCh case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R31);
		/* 820E91FCh case    1:*/		return 0x820E9200;
		  /* 820E9200h */ case    2:  		/* lwz R4, <#[R4 + 8]> */
		/* 820E9200h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 820E9200h case    2:*/		return 0x820E9204;
		  /* 820E9204h */ case    3:  		/* lwz R3, <#[R11 + 8]> */
		/* 820E9204h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820E9204h case    3:*/		return 0x820E9208;
		  /* 820E9208h */ case    4:  		/* bl -358488 */
		/* 820E9208h case    4:*/		regs.LR = 0x820E920C; return 0x820919B0;
		/* 820E9208h case    4:*/		return 0x820E920C;
	}
	return 0x820E920C;
} // Block from 820E91F8h-820E920Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E920Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E920C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E920C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E920C);
		  /* 820E920Ch */ case    0:  		/* mr R3, R28 */
		/* 820E920Ch case    0:*/		regs.R3 = regs.R28;
		/* 820E920Ch case    0:*/		return 0x820E9210;
		  /* 820E9210h */ case    1:  		/* addi R1, R1, 400 */
		/* 820E9210h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 820E9210h case    1:*/		return 0x820E9214;
		  /* 820E9214h */ case    2:  		/* b -360300 */
		/* 820E9214h case    2:*/		return 0x820912A8;
		/* 820E9214h case    2:*/		return 0x820E9218;
	}
	return 0x820E9218;
} // Block from 820E920Ch-820E9218h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E9218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9218);
		  /* 820E9218h */ case    0:  		/* li R3, 1 */
		/* 820E9218h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E9218h case    0:*/		return 0x820E921C;
		  /* 820E921Ch */ case    1:  		/* b -12 */
		/* 820E921Ch case    1:*/		return 0x820E9210;
		/* 820E921Ch case    1:*/		return 0x820E9220;
	}
	return 0x820E9220;
} // Block from 820E9218h-820E9220h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E9220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9220);
		  /* 820E9220h */ case    0:  		/* mfspr R12, LR */
		/* 820E9220h case    0:*/		regs.R12 = regs.LR;
		/* 820E9220h case    0:*/		return 0x820E9224;
		  /* 820E9224h */ case    1:  		/* bl -360400 */
		/* 820E9224h case    1:*/		regs.LR = 0x820E9228; return 0x82091254;
		/* 820E9224h case    1:*/		return 0x820E9228;
		  /* 820E9228h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 820E9228h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 820E9228h case    2:*/		return 0x820E922C;
		  /* 820E922Ch */ case    3:  		/* mr R31, R3 */
		/* 820E922Ch case    3:*/		regs.R31 = regs.R3;
		/* 820E922Ch case    3:*/		return 0x820E9230;
		  /* 820E9230h */ case    4:  		/* li R27, 0 */
		/* 820E9230h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820E9230h case    4:*/		return 0x820E9234;
		  /* 820E9234h */ case    5:  		/* li R11, 1 */
		/* 820E9234h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820E9234h case    5:*/		return 0x820E9238;
		  /* 820E9238h */ case    6:  		/* li R10, 2 */
		/* 820E9238h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820E9238h case    6:*/		return 0x820E923C;
		  /* 820E923Ch */ case    7:  		/* stw R27, <#[R1 + 96]> */
		/* 820E923Ch case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 820E923Ch case    7:*/		return 0x820E9240;
		  /* 820E9240h */ case    8:  		/* li R9, 3 */
		/* 820E9240h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 820E9240h case    8:*/		return 0x820E9244;
		  /* 820E9244h */ case    9:  		/* stw R27, <#[R1 + 112]> */
		/* 820E9244h case    9:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000070) );
		/* 820E9244h case    9:*/		return 0x820E9248;
		  /* 820E9248h */ case   10:  		/* li R5, 160 */
		/* 820E9248h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xA0);
		/* 820E9248h case   10:*/		return 0x820E924C;
		  /* 820E924Ch */ case   11:  		/* stw R11, <#[R1 + 116]> */
		/* 820E924Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820E924Ch case   11:*/		return 0x820E9250;
	}
	return 0x820E9250;
} // Block from 820E9220h-820E9250h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E9250h
// Function '?MatchBREAK_NEEQ@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9250);
		  /* 820E9250h */ case    0:  		/* li R4, 255 */
		/* 820E9250h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 820E9250h case    0:*/		return 0x820E9254;
		  /* 820E9254h */ case    1:  		/* stw R10, <#[R1 + 120]> */
		/* 820E9254h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 820E9254h case    1:*/		return 0x820E9258;
		  /* 820E9258h */ case    2:  		/* addi R3, R1, 128 */
		/* 820E9258h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820E9258h case    2:*/		return 0x820E925C;
		  /* 820E925Ch */ case    3:  		/* stw R9, <#[R1 + 124]> */
		/* 820E925Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E925Ch case    3:*/		return 0x820E9260;
		  /* 820E9260h */ case    4:  		/* bl -360224 */
		/* 820E9260h case    4:*/		regs.LR = 0x820E9264; return 0x82091340;
		/* 820E9260h case    4:*/		return 0x820E9264;
		  /* 820E9264h */ case    5:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E9264h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9264h case    5:*/		return 0x820E9268;
		  /* 820E9268h */ case    6:  		/* lis R11, -32254 */
		/* 820E9268h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E9268h case    6:*/		return 0x820E926C;
		  /* 820E926Ch */ case    7:  		/* stw R27, <#[R1 + 84]> */
		/* 820E926Ch case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 820E926Ch case    7:*/		return 0x820E9270;
		  /* 820E9270h */ case    8:  		/* addi R9, R1, 112 */
		/* 820E9270h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E9270h case    8:*/		return 0x820E9274;
		  /* 820E9274h */ case    9:  		/* addi R5, R11, -24200 */
		/* 820E9274h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA178);
		/* 820E9274h case    9:*/		return 0x820E9278;
		  /* 820E9278h */ case   10:  		/* addi R8, R1, 128 */
		/* 820E9278h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820E9278h case   10:*/		return 0x820E927C;
		  /* 820E927Ch */ case   11:  		/* lwz R11, <#[R4]> */
		/* 820E927Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E927Ch case   11:*/		return 0x820E9280;
		  /* 820E9280h */ case   12:  		/* addi R7, R1, 96 */
		/* 820E9280h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E9280h case   12:*/		return 0x820E9284;
		  /* 820E9284h */ case   13:  		/* addi R6, R1, 288 */
		/* 820E9284h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820E9284h case   13:*/		return 0x820E9288;
		  /* 820E9288h */ case   14:  		/* rlwinm R28, R11, 0, 12, 31 */
		/* 820E9288h case   14:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R11);
		/* 820E9288h case   14:*/		return 0x820E928C;
		  /* 820E928Ch */ case   15:  		/* mr R3, R31 */
		/* 820E928Ch case   15:*/		regs.R3 = regs.R31;
		/* 820E928Ch case   15:*/		return 0x820E9290;
		  /* 820E9290h */ case   16:  		/* mr R10, R28 */
		/* 820E9290h case   16:*/		regs.R10 = regs.R28;
		/* 820E9290h case   16:*/		return 0x820E9294;
		  /* 820E9294h */ case   17:  		/* bl -22036 */
		/* 820E9294h case   17:*/		regs.LR = 0x820E9298; return 0x820E3C80;
		/* 820E9294h case   17:*/		return 0x820E9298;
		  /* 820E9298h */ case   18:  		/* mr R29, R3 */
		/* 820E9298h case   18:*/		regs.R29 = regs.R3;
		/* 820E9298h case   18:*/		return 0x820E929C;
		  /* 820E929Ch */ case   19:  		/* cmplwi CR6, R28, 3 */
		/* 820E929Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000003);
		/* 820E929Ch case   19:*/		return 0x820E92A0;
		  /* 820E92A0h */ case   20:  		/* bc 4, CR6_LT, 12 */
		/* 820E92A0h case   20:*/		if ( !regs.CR[6].lt ) { return 0x820E92AC;  }
		/* 820E92A0h case   20:*/		return 0x820E92A4;
		  /* 820E92A4h */ case   21:  		/* li R3, 1 */
		/* 820E92A4h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E92A4h case   21:*/		return 0x820E92A8;
		  /* 820E92A8h */ case   22:  		/* b 600 */
		/* 820E92A8h case   22:*/		return 0x820E9500;
		/* 820E92A8h case   22:*/		return 0x820E92AC;
	}
	return 0x820E92AC;
} // Block from 820E9250h-820E92ACh (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E92ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E92AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E92AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E92AC);
		  /* 820E92ACh */ case    0:  		/* mr R6, R27 */
		/* 820E92ACh case    0:*/		regs.R6 = regs.R27;
		/* 820E92ACh case    0:*/		return 0x820E92B0;
		  /* 820E92B0h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 820E92B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820E92B0h case    1:*/		return 0x820E92B4;
		  /* 820E92B4h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 820E92B4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E930C;  }
		/* 820E92B4h case    2:*/		return 0x820E92B8;
		  /* 820E92B8h */ case    3:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E92B8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E92B8h case    3:*/		return 0x820E92BC;
		  /* 820E92BCh */ case    4:  		/* mr R11, R27 */
		/* 820E92BCh case    4:*/		regs.R11 = regs.R27;
		/* 820E92BCh case    4:*/		return 0x820E92C0;
		  /* 820E92C0h */ case    5:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E92C0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E92C0h case    5:*/		return 0x820E92C4;
		  /* 820E92C4h */ case    6:  		/* lwz R8, <#[R31 + 16]> */
		/* 820E92C4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 820E92C4h case    6:*/		return 0x820E92C8;
		  /* 820E92C8h */ case    7:  		/* lwz R7, <#[R10 + 16]> */
		/* 820E92C8h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000010) );
		/* 820E92C8h case    7:*/		return 0x820E92CC;
		  /* 820E92CCh */ case    8:  		/* lwzx R10, <#[R11 + R7]> */
		/* 820E92CCh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E92CCh case    8:*/		return 0x820E92D0;
		  /* 820E92D0h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E92D0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E92D0h case    9:*/		return 0x820E92D4;
		  /* 820E92D4h */ case   10:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E92D4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E92D4h case   10:*/		return 0x820E92D8;
		  /* 820E92D8h */ case   11:  		/* lwz R5, <#[R10 + 4]> */
		/* 820E92D8h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 820E92D8h case   11:*/		return 0x820E92DC;
		  /* 820E92DCh */ case   12:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 820E92DCh case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 820E92DCh case   12:*/		return 0x820E92E0;
		  /* 820E92E0h */ case   13:  		/* lwzx R5, <#[R5 + R8]> */
		/* 820E92E0h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R8 + 0x00000000) );
		/* 820E92E0h case   13:*/		return 0x820E92E4;
		  /* 820E92E4h */ case   14:  		/* lwz R5, <#[R5 + 4]> */
		/* 820E92E4h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000004) );
		/* 820E92E4h case   14:*/		return 0x820E92E8;
		  /* 820E92E8h */ case   15:  		/* rlwinm. R5, R5, 0, 26, 26 */
		/* 820E92E8h case   15:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R5,regs.R5);
		/* 820E92E8h case   15:*/		return 0x820E92EC;
		  /* 820E92ECh */ case   16:  		/* bc 4, CR0_EQ, -72 */
		/* 820E92ECh case   16:*/		if ( !regs.CR[0].eq ) { return 0x820E92A4;  }
		/* 820E92ECh case   16:*/		return 0x820E92F0;
		  /* 820E92F0h */ case   17:  		/* lwz R10, <#[R10 + 16]> */
		/* 820E92F0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820E92F0h case   17:*/		return 0x820E92F4;
		  /* 820E92F4h */ case   18:  		/* cmplw CR6, R10, R6 */
		/* 820E92F4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 820E92F4h case   18:*/		return 0x820E92F8;
		  /* 820E92F8h */ case   19:  		/* bc 4, CR6_EQ, -84 */
		/* 820E92F8h case   19:*/		if ( !regs.CR[6].eq ) { return 0x820E92A4;  }
		/* 820E92F8h case   19:*/		return 0x820E92FC;
		  /* 820E92FCh */ case   20:  		/* addi R6, R6, 1 */
		/* 820E92FCh case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820E92FCh case   20:*/		return 0x820E9300;
		  /* 820E9300h */ case   21:  		/* addi R11, R11, 4 */
		/* 820E9300h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E9300h case   21:*/		return 0x820E9304;
		  /* 820E9304h */ case   22:  		/* cmplw CR6, R6, R28 */
		/* 820E9304h case   22:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R28);
		/* 820E9304h case   22:*/		return 0x820E9308;
		  /* 820E9308h */ case   23:  		/* bc 12, CR6_LT, -60 */
		/* 820E9308h case   23:*/		if ( regs.CR[6].lt ) { return 0x820E92CC;  }
		/* 820E9308h case   23:*/		return 0x820E930C;
	}
	return 0x820E930C;
} // Block from 820E92ACh-820E930Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 820E930Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E930C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E930C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E930C);
		  /* 820E930Ch */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 820E930Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820E930Ch case    0:*/		return 0x820E9310;
		  /* 820E9310h */ case    1:  		/* bc 4, CR6_EQ, 492 */
		/* 820E9310h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E94FC;  }
		/* 820E9310h case    1:*/		return 0x820E9314;
		  /* 820E9314h */ case    2:  		/* mr R9, R27 */
		/* 820E9314h case    2:*/		regs.R9 = regs.R27;
		/* 820E9314h case    2:*/		return 0x820E9318;
		  /* 820E9318h */ case    3:  		/* addi R11, R1, 128 */
		/* 820E9318h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 820E9318h case    3:*/		return 0x820E931C;
		  /* 820E931Ch */ case    4:  		/* lwz R10, <#[R11]> */
		/* 820E931Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E931Ch case    4:*/		return 0x820E9320;
		  /* 820E9320h */ case    5:  		/* lwz R8, <#[R11 + 16]> */
		/* 820E9320h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 820E9320h case    5:*/		return 0x820E9324;
		  /* 820E9324h */ case    6:  		/* cmplw CR6, R10, R8 */
		/* 820E9324h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E9324h case    6:*/		return 0x820E9328;
		  /* 820E9328h */ case    7:  		/* bc 4, CR6_EQ, -132 */
		/* 820E9328h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820E92A4;  }
		/* 820E9328h case    7:*/		return 0x820E932C;
		  /* 820E932Ch */ case    8:  		/* lwz R8, <#[R11 + 32]> */
		/* 820E932Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000020) );
		/* 820E932Ch case    8:*/		return 0x820E9330;
		  /* 820E9330h */ case    9:  		/* cmplw CR6, R10, R8 */
		/* 820E9330h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820E9330h case    9:*/		return 0x820E9334;
		  /* 820E9334h */ case   10:  		/* bc 4, CR6_EQ, -144 */
		/* 820E9334h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820E92A4;  }
		/* 820E9334h case   10:*/		return 0x820E9338;
		  /* 820E9338h */ case   11:  		/* lwz R8, <#[R31 + 20]> */
		/* 820E9338h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 820E9338h case   11:*/		return 0x820E933C;
		  /* 820E933Ch */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E933Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E933Ch case   12:*/		return 0x820E9340;
		  /* 820E9340h */ case   13:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820E9340h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820E9340h case   13:*/		return 0x820E9344;
		  /* 820E9344h */ case   14:  		/* lwz R10, <#[R10 + 16]> */
		/* 820E9344h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820E9344h case   14:*/		return 0x820E9348;
		  /* 820E9348h */ case   15:  		/* cmplw CR6, R10, R9 */
		/* 820E9348h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E9348h case   15:*/		return 0x820E934C;
		  /* 820E934Ch */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 820E934Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x820E935C;  }
		/* 820E934Ch case   16:*/		return 0x820E9350;
		  /* 820E9350h */ case   17:  		/* lwz R10, <#[R31 + 108]> */
		/* 820E9350h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 820E9350h case   17:*/		return 0x820E9354;
		  /* 820E9354h */ case   18:  		/* rlwinm. R10, R10, 0, 2, 2 */
		/* 820E9354h case   18:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R10);
		/* 820E9354h case   18:*/		return 0x820E9358;
		  /* 820E9358h */ case   19:  		/* bc 4, CR0_EQ, -180 */
		/* 820E9358h case   19:*/		if ( !regs.CR[0].eq ) { return 0x820E92A4;  }
		/* 820E9358h case   19:*/		return 0x820E935C;
	}
	return 0x820E935C;
} // Block from 820E930Ch-820E935Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 820E935Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E935C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E935C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E935C);
		  /* 820E935Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 820E935Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E935Ch case    0:*/		return 0x820E9360;
		  /* 820E9360h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E9360h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E9360h case    1:*/		return 0x820E9364;
		  /* 820E9364h */ case    2:  		/* cmplwi CR6, R9, 3 */
		/* 820E9364h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 820E9364h case    2:*/		return 0x820E9368;
		  /* 820E9368h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 820E9368h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E931C;  }
		/* 820E9368h case    3:*/		return 0x820E936C;
		  /* 820E936Ch */ case    4:  		/* lwz R11, <#[R1 + 156]> */
		/* 820E936Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 820E936Ch case    4:*/		return 0x820E9370;
		  /* 820E9370h */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 820E9370h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E9370h case    5:*/		return 0x820E9374;
		  /* 820E9374h */ case    6:  		/* bc 4, CR6_EQ, -208 */
		/* 820E9374h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820E92A4;  }
		/* 820E9374h case    6:*/		return 0x820E9378;
		  /* 820E9378h */ case    7:  		/* lwz R11, <#[R1 + 172]> */
		/* 820E9378h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 820E9378h case    7:*/		return 0x820E937C;
		  /* 820E937Ch */ case    8:  		/* cmpwi CR6, R11, -1 */
		/* 820E937Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E937Ch case    8:*/		return 0x820E9380;
		  /* 820E9380h */ case    9:  		/* bc 4, CR6_EQ, -220 */
		/* 820E9380h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820E92A4;  }
		/* 820E9380h case    9:*/		return 0x820E9384;
		  /* 820E9384h */ case   10:  		/* li R3, 116 */
		/* 820E9384h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E9384h case   10:*/		return 0x820E9388;
		  /* 820E9388h */ case   11:  		/* bl 78352 */
		/* 820E9388h case   11:*/		regs.LR = 0x820E938C; return 0x820FC598;
		/* 820E9388h case   11:*/		return 0x820E938C;
		  /* 820E938Ch */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 820E938Ch case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E938Ch case   12:*/		return 0x820E9390;
		  /* 820E9390h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 820E9390h case   13:*/		if ( regs.CR[0].eq ) { return 0x820E93A0;  }
		/* 820E9390h case   13:*/		return 0x820E9394;
		  /* 820E9394h */ case   14:  		/* bl 76556 */
		/* 820E9394h case   14:*/		regs.LR = 0x820E9398; return 0x820FBEA0;
		/* 820E9394h case   14:*/		return 0x820E9398;
		  /* 820E9398h */ case   15:  		/* mr R30, R3 */
		/* 820E9398h case   15:*/		regs.R30 = regs.R3;
		/* 820E9398h case   15:*/		return 0x820E939C;
		  /* 820E939Ch */ case   16:  		/* b 8 */
		/* 820E939Ch case   16:*/		return 0x820E93A4;
		/* 820E939Ch case   16:*/		return 0x820E93A0;
	}
	return 0x820E93A0;
} // Block from 820E935Ch-820E93A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820E93A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E93A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E93A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E93A0);
		  /* 820E93A0h */ case    0:  		/* mr R30, R27 */
		/* 820E93A0h case    0:*/		regs.R30 = regs.R27;
		/* 820E93A0h case    0:*/		return 0x820E93A4;
	}
	return 0x820E93A4;
} // Block from 820E93A0h-820E93A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E93A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E93A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E93A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E93A4);
		  /* 820E93A4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820E93A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E93A4h case    0:*/		return 0x820E93A8;
		  /* 820E93A8h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E93A8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E93B8;  }
		/* 820E93A8h case    1:*/		return 0x820E93AC;
		  /* 820E93ACh */ case    2:  		/* lis R3, -32761 */
		/* 820E93ACh case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E93ACh case    2:*/		return 0x820E93B0;
		  /* 820E93B0h */ case    3:  		/* ori R3, R3, 14 */
		/* 820E93B0h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E93B0h case    3:*/		return 0x820E93B4;
		  /* 820E93B4h */ case    4:  		/* b 332 */
		/* 820E93B4h case    4:*/		return 0x820E9500;
		/* 820E93B4h case    4:*/		return 0x820E93B8;
	}
	return 0x820E93B8;
} // Block from 820E93A4h-820E93B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E93B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E93B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E93B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E93B8);
		  /* 820E93B8h */ case    0:  		/* li R11, 897 */
		/* 820E93B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x381);
		/* 820E93B8h case    0:*/		return 0x820E93BC;
		  /* 820E93BCh */ case    1:  		/* mr R4, R28 */
		/* 820E93BCh case    1:*/		regs.R4 = regs.R28;
		/* 820E93BCh case    1:*/		return 0x820E93C0;
		  /* 820E93C0h */ case    2:  		/* li R7, 0 */
		/* 820E93C0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E93C0h case    2:*/		return 0x820E93C4;
		  /* 820E93C4h */ case    3:  		/* rlwimi R4, R11, 21, 0, 11 */
		/* 820E93C4h case    3:*/		cpu::op::rlwimi<0,21,0,11>(regs,&regs.R4,regs.R11);
		/* 820E93C4h case    3:*/		return 0x820E93C8;
		  /* 820E93C8h */ case    4:  		/* mr R6, R28 */
		/* 820E93C8h case    4:*/		regs.R6 = regs.R28;
		/* 820E93C8h case    4:*/		return 0x820E93CC;
		  /* 820E93CCh */ case    5:  		/* mr R5, R28 */
		/* 820E93CCh case    5:*/		regs.R5 = regs.R28;
		/* 820E93CCh case    5:*/		return 0x820E93D0;
		  /* 820E93D0h */ case    6:  		/* mr R3, R30 */
		/* 820E93D0h case    6:*/		regs.R3 = regs.R30;
		/* 820E93D0h case    6:*/		return 0x820E93D4;
		  /* 820E93D4h */ case    7:  		/* bl 78428 */
		/* 820E93D4h case    7:*/		regs.LR = 0x820E93D8; return 0x820FC630;
		/* 820E93D4h case    7:*/		return 0x820E93D8;
		  /* 820E93D8h */ case    8:  		/* or. R29, R3, R3 */
		/* 820E93D8h case    8:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E93D8h case    8:*/		return 0x820E93DC;
		  /* 820E93DCh */ case    9:  		/* mr R3, R30 */
		/* 820E93DCh case    9:*/		regs.R3 = regs.R30;
		/* 820E93DCh case    9:*/		return 0x820E93E0;
		  /* 820E93E0h */ case   10:  		/* bc 12, CR0_LT, 272 */
		/* 820E93E0h case   10:*/		if ( regs.CR[0].lt ) { return 0x820E94F0;  }
		/* 820E93E0h case   10:*/		return 0x820E93E4;
		  /* 820E93E4h */ case   11:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E93E4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E93E4h case   11:*/		return 0x820E93E8;
		  /* 820E93E8h */ case   12:  		/* bl 76552 */
		/* 820E93E8h case   12:*/		regs.LR = 0x820E93EC; return 0x820FBEF0;
		/* 820E93E8h case   12:*/		return 0x820E93EC;
		  /* 820E93ECh */ case   13:  		/* or. R29, R3, R3 */
		/* 820E93ECh case   13:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E93ECh case   13:*/		return 0x820E93F0;
	}
	return 0x820E93F0;
} // Block from 820E93B8h-820E93F0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E93F0h
// Function '?MatchBREAK_NEEQ2@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E93F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E93F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E93F0);
		  /* 820E93F0h */ case    0:  		/* bc 12, CR0_LT, 252 */
		/* 820E93F0h case    0:*/		if ( regs.CR[0].lt ) { return 0x820E94EC;  }
		/* 820E93F0h case    0:*/		return 0x820E93F4;
		  /* 820E93F4h */ case    1:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E93F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E93F4h case    1:*/		return 0x820E93F8;
		  /* 820E93F8h */ case    2:  		/* rlwinm R29, R28, 2, 0, 29 */
		/* 820E93F8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R28);
		/* 820E93F8h case    2:*/		return 0x820E93FC;
		  /* 820E93FCh */ case    3:  		/* lwz R3, <#[R30 + 16]> */
		/* 820E93FCh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 820E93FCh case    3:*/		return 0x820E9400;
		  /* 820E9400h */ case    4:  		/* mr R5, R29 */
		/* 820E9400h case    4:*/		regs.R5 = regs.R29;
		/* 820E9400h case    4:*/		return 0x820E9404;
		  /* 820E9404h */ case    5:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E9404h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E9404h case    5:*/		return 0x820E9408;
		  /* 820E9408h */ case    6:  		/* bl -359000 */
		/* 820E9408h case    6:*/		regs.LR = 0x820E940C; return 0x820919B0;
		/* 820E9408h case    6:*/		return 0x820E940C;
		  /* 820E940Ch */ case    7:  		/* mr R5, R29 */
		/* 820E940Ch case    7:*/		regs.R5 = regs.R29;
		/* 820E940Ch case    7:*/		return 0x820E9410;
		  /* 820E9410h */ case    8:  		/* lwz R3, <#[R30 + 8]> */
		/* 820E9410h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820E9410h case    8:*/		return 0x820E9414;
		  /* 820E9414h */ case    9:  		/* addi R4, R1, 128 */
		/* 820E9414h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 820E9414h case    9:*/		return 0x820E9418;
		  /* 820E9418h */ case   10:  		/* bl -359016 */
		/* 820E9418h case   10:*/		regs.LR = 0x820E941C; return 0x820919B0;
		/* 820E9418h case   10:*/		return 0x820E941C;
		  /* 820E941Ch */ case   11:  		/* cmplwi CR6, R28, 0 */
		/* 820E941Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820E941Ch case   11:*/		return 0x820E9420;
		  /* 820E9420h */ case   12:  		/* bc 12, CR6_EQ, 188 */
		/* 820E9420h case   12:*/		if ( regs.CR[6].eq ) { return 0x820E94DC;  }
		/* 820E9420h case   12:*/		return 0x820E9424;
		  /* 820E9424h */ case   13:  		/* mtspr CTR, R28 */
		/* 820E9424h case   13:*/		regs.CTR = regs.R28;
		/* 820E9424h case   13:*/		return 0x820E9428;
		  /* 820E9428h */ case   14:  		/* mr R11, R27 */
		/* 820E9428h case   14:*/		regs.R11 = regs.R27;
		/* 820E9428h case   14:*/		return 0x820E942C;
		  /* 820E942Ch */ case   15:  		/* lwz R10, <#[R31 + 108]> */
		/* 820E942Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 820E942Ch case   15:*/		return 0x820E9430;
		  /* 820E9430h */ case   16:  		/* rlwinm. R10, R10, 0, 2, 2 */
		/* 820E9430h case   16:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R10);
		/* 820E9430h case   16:*/		return 0x820E9434;
		  /* 820E9434h */ case   17:  		/* bc 12, CR0_EQ, 124 */
		/* 820E9434h case   17:*/		if ( regs.CR[0].eq ) { return 0x820E94B0;  }
		/* 820E9434h case   17:*/		return 0x820E9438;
		  /* 820E9438h */ case   18:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E9438h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9438h case   18:*/		return 0x820E943C;
		  /* 820E943Ch */ case   19:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E943Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E943Ch case   19:*/		return 0x820E9440;
		  /* 820E9440h */ case   20:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E9440h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E9440h case   20:*/		return 0x820E9444;
		  /* 820E9444h */ case   21:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E9444h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E9444h case   21:*/		return 0x820E9448;
		  /* 820E9448h */ case   22:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E9448h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E9448h case   22:*/		return 0x820E944C;
		  /* 820E944Ch */ case   23:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E944Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E944Ch case   23:*/		return 0x820E9450;
		  /* 820E9450h */ case   24:  		/* lwz R9, <#[R10]> */
		/* 820E9450h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E9450h case   24:*/		return 0x820E9454;
		  /* 820E9454h */ case   25:  		/* oris R9, R9, 32768 */
		/* 820E9454h case   25:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x8000);
		/* 820E9454h case   25:*/		return 0x820E9458;
		  /* 820E9458h */ case   26:  		/* stw R9, <#[R10]> */
		/* 820E9458h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E9458h case   26:*/		return 0x820E945C;
		  /* 820E945Ch */ case   27:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E945Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E945Ch case   27:*/		return 0x820E9460;
		  /* 820E9460h */ case   28:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E9460h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E9460h case   28:*/		return 0x820E9464;
		  /* 820E9464h */ case   29:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E9464h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E9464h case   29:*/		return 0x820E9468;
		  /* 820E9468h */ case   30:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E9468h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E9468h case   30:*/		return 0x820E946C;
		  /* 820E946Ch */ case   31:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E946Ch case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E946Ch case   31:*/		return 0x820E9470;
		  /* 820E9470h */ case   32:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E9470h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E9470h case   32:*/		return 0x820E9474;
		  /* 820E9474h */ case   33:  		/* lwz R10, <#[R10 + 56]> */
		/* 820E9474h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 820E9474h case   33:*/		return 0x820E9478;
		  /* 820E9478h */ case   34:  		/* cmpwi CR6, R10, -1 */
		/* 820E9478h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E9478h case   34:*/		return 0x820E947C;
		  /* 820E947Ch */ case   35:  		/* bc 12, CR6_EQ, 52 */
		/* 820E947Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x820E94B0;  }
		/* 820E947Ch case   35:*/		return 0x820E9480;
		  /* 820E9480h */ case   36:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E9480h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9480h case   36:*/		return 0x820E9484;
		  /* 820E9484h */ case   37:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 820E9484h case   37:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 820E9484h case   37:*/		return 0x820E9488;
		  /* 820E9488h */ case   38:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E9488h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E9488h case   38:*/		return 0x820E948C;
		  /* 820E948Ch */ case   39:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E948Ch case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E948Ch case   39:*/		return 0x820E9490;
		  /* 820E9490h */ case   40:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E9490h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E9490h case   40:*/		return 0x820E9494;
		  /* 820E9494h */ case   41:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E9494h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E9494h case   41:*/		return 0x820E9498;
		  /* 820E9498h */ case   42:  		/* lwz R10, <#[R10 + 56]> */
		/* 820E9498h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000038) );
		/* 820E9498h case   42:*/		return 0x820E949C;
		  /* 820E949Ch */ case   43:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E949Ch case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E949Ch case   43:*/		return 0x820E94A0;
		  /* 820E94A0h */ case   44:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E94A0h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E94A0h case   44:*/		return 0x820E94A4;
		  /* 820E94A4h */ case   45:  		/* lwz R9, <#[R10]> */
		/* 820E94A4h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E94A4h case   45:*/		return 0x820E94A8;
		  /* 820E94A8h */ case   46:  		/* oris R9, R9, 32768 */
		/* 820E94A8h case   46:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x8000);
		/* 820E94A8h case   46:*/		return 0x820E94AC;
		  /* 820E94ACh */ case   47:  		/* stw R9, <#[R10]> */
		/* 820E94ACh case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E94ACh case   47:*/		return 0x820E94B0;
	}
	return 0x820E94B0;
} // Block from 820E93F0h-820E94B0h (48 instructions)

//////////////////////////////////////////////////////
// Block at 820E94B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E94B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E94B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E94B0);
		  /* 820E94B0h */ case    0:  		/* lwz R10, <#[R31 + 260]> */
		/* 820E94B0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000104) );
		/* 820E94B0h case    0:*/		return 0x820E94B4;
		  /* 820E94B4h */ case    1:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E94B4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E94B4h case    1:*/		return 0x820E94B8;
		  /* 820E94B8h */ case    2:  		/* lwz R10, <#[R10 + 16]> */
		/* 820E94B8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820E94B8h case    2:*/		return 0x820E94BC;
		  /* 820E94BCh */ case    3:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E94BCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E94BCh case    3:*/		return 0x820E94C0;
		  /* 820E94C0h */ case    4:  		/* addi R11, R11, 4 */
		/* 820E94C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E94C0h case    4:*/		return 0x820E94C4;
		  /* 820E94C4h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E94C4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E94C4h case    5:*/		return 0x820E94C8;
		  /* 820E94C8h */ case    6:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820E94C8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E94C8h case    6:*/		return 0x820E94CC;
		  /* 820E94CCh */ case    7:  		/* lwz R9, <#[R10]> */
		/* 820E94CCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E94CCh case    7:*/		return 0x820E94D0;
		  /* 820E94D0h */ case    8:  		/* oris R9, R9, 32768 */
		/* 820E94D0h case    8:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x8000);
		/* 820E94D0h case    8:*/		return 0x820E94D4;
		  /* 820E94D4h */ case    9:  		/* stw R9, <#[R10]> */
		/* 820E94D4h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E94D4h case    9:*/		return 0x820E94D8;
		  /* 820E94D8h */ case   10:  		/* bc 16, CR0_LT, -172 */
		/* 820E94D8h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E942C;  }
		/* 820E94D8h case   10:*/		return 0x820E94DC;
	}
	return 0x820E94DC;
} // Block from 820E94B0h-820E94DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E94DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E94DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E94DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E94DC);
		  /* 820E94DCh */ case    0:  		/* mr R4, R30 */
		/* 820E94DCh case    0:*/		regs.R4 = regs.R30;
		/* 820E94DCh case    0:*/		return 0x820E94E0;
		  /* 820E94E0h */ case    1:  		/* lwz R3, <#[R31 + 260]> */
		/* 820E94E0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000104) );
		/* 820E94E0h case    1:*/		return 0x820E94E4;
		  /* 820E94E4h */ case    2:  		/* bl 78956 */
		/* 820E94E4h case    2:*/		regs.LR = 0x820E94E8; return 0x820FC950;
		/* 820E94E4h case    2:*/		return 0x820E94E8;
		  /* 820E94E8h */ case    3:  		/* mr R29, R3 */
		/* 820E94E8h case    3:*/		regs.R29 = regs.R3;
		/* 820E94E8h case    3:*/		return 0x820E94EC;
	}
	return 0x820E94EC;
} // Block from 820E94DCh-820E94ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E94ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E94EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E94EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E94EC);
		  /* 820E94ECh */ case    0:  		/* mr R3, R30 */
		/* 820E94ECh case    0:*/		regs.R3 = regs.R30;
		/* 820E94ECh case    0:*/		return 0x820E94F0;
	}
	return 0x820E94F0;
} // Block from 820E94ECh-820E94F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E94F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E94F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E94F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E94F0);
		  /* 820E94F0h */ case    0:  		/* bl 1261264 */
		/* 820E94F0h case    0:*/		regs.LR = 0x820E94F4; return 0x8221D3C0;
		/* 820E94F0h case    0:*/		return 0x820E94F4;
		  /* 820E94F4h */ case    1:  		/* mr R3, R30 */
		/* 820E94F4h case    1:*/		regs.R3 = regs.R30;
		/* 820E94F4h case    1:*/		return 0x820E94F8;
		  /* 820E94F8h */ case    2:  		/* bl 78072 */
		/* 820E94F8h case    2:*/		regs.LR = 0x820E94FC; return 0x820FC5F0;
		/* 820E94F8h case    2:*/		return 0x820E94FC;
	}
	return 0x820E94FC;
} // Block from 820E94F0h-820E94FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E94FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E94FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E94FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E94FC);
		  /* 820E94FCh */ case    0:  		/* mr R3, R29 */
		/* 820E94FCh case    0:*/		regs.R3 = regs.R29;
		/* 820E94FCh case    0:*/		return 0x820E9500;
	}
	return 0x820E9500;
} // Block from 820E94FCh-820E9500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E9500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9500);
		  /* 820E9500h */ case    0:  		/* addi R1, R1, 400 */
		/* 820E9500h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 820E9500h case    0:*/		return 0x820E9504;
		  /* 820E9504h */ case    1:  		/* b -361056 */
		/* 820E9504h case    1:*/		return 0x820912A4;
		/* 820E9504h case    1:*/		return 0x820E9508;
	}
	return 0x820E9508;
} // Block from 820E9500h-820E9508h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E9508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9508);
		  /* 820E9508h */ case    0:  		/* mfspr R12, LR */
		/* 820E9508h case    0:*/		regs.R12 = regs.LR;
		/* 820E9508h case    0:*/		return 0x820E950C;
		  /* 820E950Ch */ case    1:  		/* bl -361152 */
		/* 820E950Ch case    1:*/		regs.LR = 0x820E9510; return 0x8209124C;
		/* 820E950Ch case    1:*/		return 0x820E9510;
		  /* 820E9510h */ case    2:  		/* stfd FR31, <#[R1 - 72]> */
		/* 820E9510h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E9510h case    2:*/		return 0x820E9514;
		  /* 820E9514h */ case    3:  		/* stwu R1, <#[R1 - 432]> */
		/* 820E9514h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 820E9514h case    3:*/		return 0x820E9518;
		  /* 820E9518h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 820E9518h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9518h case    4:*/		return 0x820E951C;
		  /* 820E951Ch */ case    5:  		/* lis R11, -32254 */
		/* 820E951Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820E951Ch case    5:*/		return 0x820E9520;
		  /* 820E9520h */ case    6:  		/* li R8, 3 */
		/* 820E9520h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 820E9520h case    6:*/		return 0x820E9524;
		  /* 820E9524h */ case    7:  		/* addi R29, R11, -18728 */
		/* 820E9524h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFB6D8);
		/* 820E9524h case    7:*/		return 0x820E9528;
		  /* 820E9528h */ case    8:  		/* li R28, 0 */
		/* 820E9528h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820E9528h case    8:*/		return 0x820E952C;
		  /* 820E952Ch */ case    9:  		/* stw R8, <#[R1 + 124]> */
		/* 820E952Ch case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 820E952Ch case    9:*/		return 0x820E9530;
		  /* 820E9530h */ case   10:  		/* li R25, 1 */
		/* 820E9530h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 820E9530h case   10:*/		return 0x820E9534;
		  /* 820E9534h */ case   11:  		/* lwz R10, <#[R4]> */
		/* 820E9534h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 820E9534h case   11:*/		return 0x820E9538;
		  /* 820E9538h */ case   12:  		/* li R11, 2 */
		/* 820E9538h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820E9538h case   12:*/		return 0x820E953C;
		  /* 820E953Ch */ case   13:  		/* addi R5, R29, -96 */
		/* 820E953Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xFFFFFFA0);
		/* 820E953Ch case   13:*/		return 0x820E9540;
		  /* 820E9540h */ case   14:  		/* stw R28, <#[R1 + 96]> */
		/* 820E9540h case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000060) );
		/* 820E9540h case   14:*/		return 0x820E9544;
		  /* 820E9544h */ case   15:  		/* rlwinm R30, R10, 0, 12, 31 */
		/* 820E9544h case   15:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R10);
		/* 820E9544h case   15:*/		return 0x820E9548;
		  /* 820E9548h */ case   16:  		/* stw R28, <#[R1 + 112]> */
		/* 820E9548h case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 820E9548h case   16:*/		return 0x820E954C;
		  /* 820E954Ch */ case   17:  		/* addi R9, R1, 112 */
		/* 820E954Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E954Ch case   17:*/		return 0x820E9550;
		  /* 820E9550h */ case   18:  		/* stw R25, <#[R1 + 116]> */
		/* 820E9550h case   18:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000074) );
		/* 820E9550h case   18:*/		return 0x820E9554;
		  /* 820E9554h */ case   19:  		/* addi R8, R1, 192 */
		/* 820E9554h case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E9554h case   19:*/		return 0x820E9558;
		  /* 820E9558h */ case   20:  		/* stw R11, <#[R1 + 120]> */
		/* 820E9558h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820E9558h case   20:*/		return 0x820E955C;
		  /* 820E955Ch */ case   21:  		/* addi R7, R1, 96 */
		/* 820E955Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E955Ch case   21:*/		return 0x820E9560;
		  /* 820E9560h */ case   22:  		/* stw R25, <#[R1 + 84]> */
		/* 820E9560h case   22:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 820E9560h case   22:*/		return 0x820E9564;
		  /* 820E9564h */ case   23:  		/* addi R6, R1, 128 */
		/* 820E9564h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E9564h case   23:*/		return 0x820E9568;
		  /* 820E9568h */ case   24:  		/* mr R10, R30 */
		/* 820E9568h case   24:*/		regs.R10 = regs.R30;
		/* 820E9568h case   24:*/		return 0x820E956C;
		  /* 820E956Ch */ case   25:  		/* mr R31, R3 */
		/* 820E956Ch case   25:*/		regs.R31 = regs.R3;
		/* 820E956Ch case   25:*/		return 0x820E9570;
		  /* 820E9570h */ case   26:  		/* mr R27, R28 */
		/* 820E9570h case   26:*/		regs.R27 = regs.R28;
		/* 820E9570h case   26:*/		return 0x820E9574;
		  /* 820E9574h */ case   27:  		/* bl -22772 */
		/* 820E9574h case   27:*/		regs.LR = 0x820E9578; return 0x820E3C80;
		/* 820E9574h case   27:*/		return 0x820E9578;
		  /* 820E9578h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820E9578h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E9578h case   28:*/		return 0x820E957C;
		  /* 820E957Ch */ case   29:  		/* bc 12, CR0_EQ, 56 */
		/* 820E957Ch case   29:*/		if ( regs.CR[0].eq ) { return 0x820E95B4;  }
		/* 820E957Ch case   29:*/		return 0x820E9580;
		  /* 820E9580h */ case   30:  		/* mr R5, R29 */
		/* 820E9580h case   30:*/		regs.R5 = regs.R29;
		/* 820E9580h case   30:*/		return 0x820E9584;
		  /* 820E9584h */ case   31:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E9584h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9584h case   31:*/		return 0x820E9588;
		  /* 820E9588h */ case   32:  		/* mr R10, R30 */
		/* 820E9588h case   32:*/		regs.R10 = regs.R30;
		/* 820E9588h case   32:*/		return 0x820E958C;
		  /* 820E958Ch */ case   33:  		/* stw R25, <#[R1 + 84]> */
		/* 820E958Ch case   33:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 820E958Ch case   33:*/		return 0x820E9590;
	}
	return 0x820E9590;
} // Block from 820E9508h-820E9590h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820E9590h
// Function '?MatchBREAK_COND@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9590);
		  /* 820E9590h */ case    0:  		/* addi R9, R1, 112 */
		/* 820E9590h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820E9590h case    0:*/		return 0x820E9594;
		  /* 820E9594h */ case    1:  		/* addi R8, R1, 192 */
		/* 820E9594h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820E9594h case    1:*/		return 0x820E9598;
		  /* 820E9598h */ case    2:  		/* addi R7, R1, 96 */
		/* 820E9598h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820E9598h case    2:*/		return 0x820E959C;
		  /* 820E959Ch */ case    3:  		/* addi R6, R1, 128 */
		/* 820E959Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820E959Ch case    3:*/		return 0x820E95A0;
		  /* 820E95A0h */ case    4:  		/* mr R3, R31 */
		/* 820E95A0h case    4:*/		regs.R3 = regs.R31;
		/* 820E95A0h case    4:*/		return 0x820E95A4;
		  /* 820E95A4h */ case    5:  		/* bl -22820 */
		/* 820E95A4h case    5:*/		regs.LR = 0x820E95A8; return 0x820E3C80;
		/* 820E95A4h case    5:*/		return 0x820E95A8;
		  /* 820E95A8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820E95A8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E95A8h case    6:*/		return 0x820E95AC;
		  /* 820E95ACh */ case    7:  		/* bc 4, CR0_EQ, 644 */
		/* 820E95ACh case    7:*/		if ( !regs.CR[0].eq ) { return 0x820E9830;  }
		/* 820E95ACh case    7:*/		return 0x820E95B0;
		  /* 820E95B0h */ case    8:  		/* mr R27, R25 */
		/* 820E95B0h case    8:*/		regs.R27 = regs.R25;
		/* 820E95B0h case    8:*/		return 0x820E95B4;
	}
	return 0x820E95B4;
} // Block from 820E9590h-820E95B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E95B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E95B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E95B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E95B4);
		  /* 820E95B4h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 820E95B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820E95B4h case    0:*/		return 0x820E95B8;
		  /* 820E95B8h */ case    1:  		/* lis R10, 20480 */
		/* 820E95B8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 820E95B8h case    1:*/		return 0x820E95BC;
		  /* 820E95BCh */ case    2:  		/* ori R10, R10, 2 */
		/* 820E95BCh case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 820E95BCh case    2:*/		return 0x820E95C0;
		  /* 820E95C0h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 820E95C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E95C0h case    3:*/		return 0x820E95C4;
		  /* 820E95C4h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 820E95C4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E95C4h case    4:*/		return 0x820E95C8;
		  /* 820E95C8h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 820E95C8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820E95D4;  }
		/* 820E95C8h case    5:*/		return 0x820E95CC;
		  /* 820E95CCh */ case    6:  		/* li R3, 1 */
		/* 820E95CCh case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E95CCh case    6:*/		return 0x820E95D0;
		  /* 820E95D0h */ case    7:  		/* b 608 */
		/* 820E95D0h case    7:*/		return 0x820E9830;
		/* 820E95D0h case    7:*/		return 0x820E95D4;
	}
	return 0x820E95D4;
} // Block from 820E95B4h-820E95D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E95D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E95D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E95D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E95D4);
		  /* 820E95D4h */ case    0:  		/* mr R9, R25 */
		/* 820E95D4h case    0:*/		regs.R9 = regs.R25;
		/* 820E95D4h case    0:*/		return 0x820E95D8;
		  /* 820E95D8h */ case    1:  		/* cmplwi CR6, R30, 1 */
		/* 820E95D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 820E95D8h case    1:*/		return 0x820E95DC;
		  /* 820E95DCh */ case    2:  		/* bc 4, CR6_GT, 84 */
		/* 820E95DCh case    2:*/		if ( !regs.CR[6].gt ) { return 0x820E9630;  }
		/* 820E95DCh case    2:*/		return 0x820E95E0;
		  /* 820E95E0h */ case    3:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820E95E0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820E95E0h case    3:*/		return 0x820E95E4;
		  /* 820E95E4h */ case    4:  		/* li R10, 4 */
		/* 820E95E4h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820E95E4h case    4:*/		return 0x820E95E8;
		  /* 820E95E8h */ case    5:  		/* addi R11, R8, 4 */
		/* 820E95E8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0x4);
		/* 820E95E8h case    5:*/		return 0x820E95EC;
		  /* 820E95ECh */ case    6:  		/* lwz R7, <#[R31 + 260]> */
		/* 820E95ECh case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000104) );
		/* 820E95ECh case    6:*/		return 0x820E95F0;
		  /* 820E95F0h */ case    7:  		/* lwz R7, <#[R7 + 8]> */
		/* 820E95F0h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 820E95F0h case    7:*/		return 0x820E95F4;
		  /* 820E95F4h */ case    8:  		/* lwzx R6, <#[R10 + R7]> */
		/* 820E95F4h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 820E95F4h case    8:*/		return 0x820E95F8;
		  /* 820E95F8h */ case    9:  		/* lwz R7, <#[R7]> */
		/* 820E95F8h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 820E95F8h case    9:*/		return 0x820E95FC;
		  /* 820E95FCh */ case   10:  		/* cmplw CR6, R6, R7 */
		/* 820E95FCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 820E95FCh case   10:*/		return 0x820E9600;
		  /* 820E9600h */ case   11:  		/* bc 4, CR6_EQ, -52 */
		/* 820E9600h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820E95CC;  }
		/* 820E9600h case   11:*/		return 0x820E9604;
		  /* 820E9604h */ case   12:  		/* lwz R7, <#[R31 + 260]> */
		/* 820E9604h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9604h case   12:*/		return 0x820E9608;
		  /* 820E9608h */ case   13:  		/* lwz R7, <#[R7 + 8]> */
		/* 820E9608h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 820E9608h case   13:*/		return 0x820E960C;
		  /* 820E960Ch */ case   14:  		/* lwzx R6, <#[R11 + R7]> */
		/* 820E960Ch case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E960Ch case   14:*/		return 0x820E9610;
		  /* 820E9610h */ case   15:  		/* lwzx R7, <#[R8 + R7]> */
		/* 820E9610h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820E9610h case   15:*/		return 0x820E9614;
		  /* 820E9614h */ case   16:  		/* cmplw CR6, R6, R7 */
		/* 820E9614h case   16:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 820E9614h case   16:*/		return 0x820E9618;
		  /* 820E9618h */ case   17:  		/* bc 4, CR6_EQ, -76 */
		/* 820E9618h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820E95CC;  }
		/* 820E9618h case   17:*/		return 0x820E961C;
		  /* 820E961Ch */ case   18:  		/* addi R9, R9, 1 */
		/* 820E961Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820E961Ch case   18:*/		return 0x820E9620;
		  /* 820E9620h */ case   19:  		/* addi R10, R10, 4 */
		/* 820E9620h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E9620h case   19:*/		return 0x820E9624;
		  /* 820E9624h */ case   20:  		/* addi R11, R11, 4 */
		/* 820E9624h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E9624h case   20:*/		return 0x820E9628;
		  /* 820E9628h */ case   21:  		/* cmplw CR6, R9, R30 */
		/* 820E9628h case   21:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 820E9628h case   21:*/		return 0x820E962C;
		  /* 820E962Ch */ case   22:  		/* bc 12, CR6_LT, -64 */
		/* 820E962Ch case   22:*/		if ( regs.CR[6].lt ) { return 0x820E95EC;  }
		/* 820E962Ch case   22:*/		return 0x820E9630;
	}
	return 0x820E9630;
} // Block from 820E95D4h-820E9630h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E9630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9630);
		  /* 820E9630h */ case    0:  		/* li R3, 116 */
		/* 820E9630h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E9630h case    0:*/		return 0x820E9634;
		  /* 820E9634h */ case    1:  		/* bl 77668 */
		/* 820E9634h case    1:*/		regs.LR = 0x820E9638; return 0x820FC598;
		/* 820E9634h case    1:*/		return 0x820E9638;
		  /* 820E9638h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E9638h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E9638h case    2:*/		return 0x820E963C;
		  /* 820E963Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 820E963Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820E9648;  }
		/* 820E963Ch case    3:*/		return 0x820E9640;
		  /* 820E9640h */ case    4:  		/* bl 75872 */
		/* 820E9640h case    4:*/		regs.LR = 0x820E9644; return 0x820FBEA0;
		/* 820E9640h case    4:*/		return 0x820E9644;
		  /* 820E9644h */ case    5:  		/* mr R28, R3 */
		/* 820E9644h case    5:*/		regs.R28 = regs.R3;
		/* 820E9644h case    5:*/		return 0x820E9648;
	}
	return 0x820E9648;
} // Block from 820E9630h-820E9648h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E9648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9648);
		  /* 820E9648h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 820E9648h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820E9648h case    0:*/		return 0x820E964C;
		  /* 820E964Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E964Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E965C;  }
		/* 820E964Ch case    1:*/		return 0x820E9650;
		  /* 820E9650h */ case    2:  		/* lis R29, -32761 */
		/* 820E9650h case    2:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 820E9650h case    2:*/		return 0x820E9654;
		  /* 820E9654h */ case    3:  		/* ori R29, R29, 14 */
		/* 820E9654h case    3:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 820E9654h case    3:*/		return 0x820E9658;
		  /* 820E9658h */ case    4:  		/* b 468 */
		/* 820E9658h case    4:*/		return 0x820E982C;
		/* 820E9658h case    4:*/		return 0x820E965C;
	}
	return 0x820E965C;
} // Block from 820E9648h-820E965Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E965Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E965C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E965C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E965C);
		  /* 820E965Ch */ case    0:  		/* lis R4, 28800 */
		/* 820E965Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x7080);
		/* 820E965Ch case    0:*/		return 0x820E9660;
		  /* 820E9660h */ case    1:  		/* li R7, 0 */
		/* 820E9660h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E9660h case    1:*/		return 0x820E9664;
		  /* 820E9664h */ case    2:  		/* mr R6, R30 */
		/* 820E9664h case    2:*/		regs.R6 = regs.R30;
		/* 820E9664h case    2:*/		return 0x820E9668;
		  /* 820E9668h */ case    3:  		/* li R5, 6 */
		/* 820E9668h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 820E9668h case    3:*/		return 0x820E966C;
		  /* 820E966Ch */ case    4:  		/* ori R4, R4, 2 */
		/* 820E966Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x2);
		/* 820E966Ch case    4:*/		return 0x820E9670;
		  /* 820E9670h */ case    5:  		/* mr R3, R28 */
		/* 820E9670h case    5:*/		regs.R3 = regs.R28;
		/* 820E9670h case    5:*/		return 0x820E9674;
		  /* 820E9674h */ case    6:  		/* bl 77756 */
		/* 820E9674h case    6:*/		regs.LR = 0x820E9678; return 0x820FC630;
		/* 820E9674h case    6:*/		return 0x820E9678;
		  /* 820E9678h */ case    7:  		/* or. R29, R3, R3 */
		/* 820E9678h case    7:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E9678h case    7:*/		return 0x820E967C;
		  /* 820E967Ch */ case    8:  		/* bc 12, CR0_LT, 416 */
		/* 820E967Ch case    8:*/		if ( regs.CR[0].lt ) { return 0x820E981C;  }
		/* 820E967Ch case    8:*/		return 0x820E9680;
		  /* 820E9680h */ case    9:  		/* mr R3, R28 */
		/* 820E9680h case    9:*/		regs.R3 = regs.R28;
		/* 820E9680h case    9:*/		return 0x820E9684;
		  /* 820E9684h */ case   10:  		/* lwz R4, <#[R31 + 260]> */
		/* 820E9684h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9684h case   10:*/		return 0x820E9688;
		  /* 820E9688h */ case   11:  		/* bl 75880 */
		/* 820E9688h case   11:*/		regs.LR = 0x820E968C; return 0x820FBEF0;
		/* 820E9688h case   11:*/		return 0x820E968C;
		  /* 820E968Ch */ case   12:  		/* or. R29, R3, R3 */
		/* 820E968Ch case   12:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E968Ch case   12:*/		return 0x820E9690;
		  /* 820E9690h */ case   13:  		/* bc 12, CR0_LT, 396 */
		/* 820E9690h case   13:*/		if ( regs.CR[0].lt ) { return 0x820E981C;  }
		/* 820E9690h case   13:*/		return 0x820E9694;
		  /* 820E9694h */ case   14:  		/* lwz R11, <#[R31 + 260]> */
		/* 820E9694h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9694h case   14:*/		return 0x820E9698;
		  /* 820E9698h */ case   15:  		/* rlwinm R5, R30, 2, 0, 29 */
		/* 820E9698h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R30);
		/* 820E9698h case   15:*/		return 0x820E969C;
		  /* 820E969Ch */ case   16:  		/* lwz R3, <#[R28 + 16]> */
		/* 820E969Ch case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 820E969Ch case   16:*/		return 0x820E96A0;
		  /* 820E96A0h */ case   17:  		/* lwz R4, <#[R11 + 16]> */
		/* 820E96A0h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820E96A0h case   17:*/		return 0x820E96A4;
		  /* 820E96A4h */ case   18:  		/* bl -359668 */
		/* 820E96A4h case   18:*/		regs.LR = 0x820E96A8; return 0x820919B0;
		/* 820E96A4h case   18:*/		return 0x820E96A8;
		  /* 820E96A8h */ case   19:  		/* ld R11, <#[R1 + 192]> */
		/* 820E96A8h case   19:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820E96A8h case   19:*/		return 0x820E96AC;
		  /* 820E96ACh */ case   20:  		/* cmpwi CR6, R27, 0 */
		/* 820E96ACh case   20:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820E96ACh case   20:*/		return 0x820E96B0;
		  /* 820E96B0h */ case   21:  		/* lwz R10, <#[R28 + 8]> */
		/* 820E96B0h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 820E96B0h case   21:*/		return 0x820E96B4;
		  /* 820E96B4h */ case   22:  		/* std R11, <#[R10]> */
		/* 820E96B4h case   22:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820E96B4h case   22:*/		return 0x820E96B8;
		  /* 820E96B8h */ case   23:  		/* bc 4, CR6_EQ, 20 */
		/* 820E96B8h case   23:*/		if ( !regs.CR[6].eq ) { return 0x820E96CC;  }
		/* 820E96B8h case   23:*/		return 0x820E96BC;
		  /* 820E96BCh */ case   24:  		/* lwz R11, <#[R28 + 8]> */
		/* 820E96BCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 820E96BCh case   24:*/		return 0x820E96C0;
		  /* 820E96C0h */ case   25:  		/* ld R10, <#[R1 + 208]> */
		/* 820E96C0h case   25:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x000000D0) );
		/* 820E96C0h case   25:*/		return 0x820E96C4;
		  /* 820E96C4h */ case   26:  		/* std R10, <#[R11 + 8]> */
		/* 820E96C4h case   26:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820E96C4h case   26:*/		return 0x820E96C8;
		  /* 820E96C8h */ case   27:  		/* b 252 */
		/* 820E96C8h case   27:*/		return 0x820E97C4;
		/* 820E96C8h case   27:*/		return 0x820E96CC;
	}
	return 0x820E96CC;
} // Block from 820E965Ch-820E96CCh (28 instructions)

//////////////////////////////////////////////////////
// Block at 820E96CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E96CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E96CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E96CC);
		  /* 820E96CCh */ case    0:  		/* lwz R11, <#[R1 + 208]> */
		/* 820E96CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 820E96CCh case    0:*/		return 0x820E96D0;
		  /* 820E96D0h */ case    1:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E96D0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E96D0h case    1:*/		return 0x820E96D4;
		  /* 820E96D4h */ case    2:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 820E96D4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 820E96D4h case    2:*/		return 0x820E96D8;
		  /* 820E96D8h */ case    3:  		/* lwz R10, <#[R1 + 212]> */
		/* 820E96D8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000D4) );
		/* 820E96D8h case    3:*/		return 0x820E96DC;
		  /* 820E96DCh */ case    4:  		/* mr R26, R11 */
		/* 820E96DCh case    4:*/		regs.R26 = regs.R11;
		/* 820E96DCh case    4:*/		return 0x820E96E0;
		  /* 820E96E0h */ case    5:  		/* rlwinm R7, R10, 2, 0, 29 */
		/* 820E96E0h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R10);
		/* 820E96E0h case    5:*/		return 0x820E96E4;
		  /* 820E96E4h */ case    6:  		/* mr R27, R10 */
		/* 820E96E4h case    6:*/		regs.R27 = regs.R10;
		/* 820E96E4h case    6:*/		return 0x820E96E8;
		  /* 820E96E8h */ case    7:  		/* lwzx R11, <#[R8 + R9]> */
		/* 820E96E8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E96E8h case    7:*/		return 0x820E96EC;
		  /* 820E96ECh */ case    8:  		/* lwzx R30, <#[R7 + R9]> */
		/* 820E96ECh case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 820E96ECh case    8:*/		return 0x820E96F0;
		  /* 820E96F0h */ case    9:  		/* lwz R10, <#[R11 + 56]> */
		/* 820E96F0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 820E96F0h case    9:*/		return 0x820E96F4;
		  /* 820E96F4h */ case   10:  		/* cmpwi CR6, R10, -1 */
		/* 820E96F4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E96F4h case   10:*/		return 0x820E96F8;
		  /* 820E96F8h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 820E96F8h case   11:*/		if ( regs.CR[6].eq ) { return 0x820E970C;  }
		/* 820E96F8h case   11:*/		return 0x820E96FC;
		  /* 820E96FCh */ case   12:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 820E96FCh case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 820E96FCh case   12:*/		return 0x820E9700;
		  /* 820E9700h */ case   13:  		/* rlwinm R9, R10, 2, 0, 29 */
		/* 820E9700h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 820E9700h case   13:*/		return 0x820E9704;
		  /* 820E9704h */ case   14:  		/* mr R26, R10 */
		/* 820E9704h case   14:*/		regs.R26 = regs.R10;
		/* 820E9704h case   14:*/		return 0x820E9708;
		  /* 820E9708h */ case   15:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820E9708h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E9708h case   15:*/		return 0x820E970C;
	}
	return 0x820E970C;
} // Block from 820E96CCh-820E970Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E970Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E970C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E970C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E970C);
		  /* 820E970Ch */ case    0:  		/* lwz R10, <#[R30 + 56]> */
		/* 820E970Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 820E970Ch case    0:*/		return 0x820E9710;
		  /* 820E9710h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 820E9710h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E9710h case    1:*/		return 0x820E9714;
		  /* 820E9714h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820E9714h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E9728;  }
		/* 820E9714h case    2:*/		return 0x820E9718;
		  /* 820E9718h */ case    3:  		/* lwz R9, <#[R31 + 20]> */
		/* 820E9718h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 820E9718h case    3:*/		return 0x820E971C;
		  /* 820E971Ch */ case    4:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 820E971Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 820E971Ch case    4:*/		return 0x820E9720;
		  /* 820E9720h */ case    5:  		/* mr R27, R10 */
		/* 820E9720h case    5:*/		regs.R27 = regs.R10;
		/* 820E9720h case    5:*/		return 0x820E9724;
		  /* 820E9724h */ case    6:  		/* lwzx R30, <#[R8 + R9]> */
		/* 820E9724h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E9724h case    6:*/		return 0x820E9728;
	}
	return 0x820E9728;
} // Block from 820E970Ch-820E9728h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E9728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9728);
		  /* 820E9728h */ case    0:  		/* lis R10, -32256 */
		/* 820E9728h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820E9728h case    0:*/		return 0x820E972C;
		  /* 820E972Ch */ case    1:  		/* lwz R6, <#[R11 + 16]> */
		/* 820E972Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 820E972Ch case    1:*/		return 0x820E9730;
		  /* 820E9730h */ case    2:  		/* mr R3, R31 */
		/* 820E9730h case    2:*/		regs.R3 = regs.R31;
		/* 820E9730h case    2:*/		return 0x820E9734;
		  /* 820E9734h */ case    3:  		/* lwz R5, <#[R11 + 12]> */
		/* 820E9734h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E9734h case    3:*/		return 0x820E9738;
		  /* 820E9738h */ case    4:  		/* lwz R4, <#[R11 + 4]> */
		/* 820E9738h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 820E9738h case    4:*/		return 0x820E973C;
		  /* 820E973Ch */ case    5:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 820E973Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 820E973Ch case    5:*/		return 0x820E9740;
		  /* 820E9740h */ case    6:  		/* fmr FR1, FR31 */
		/* 820E9740h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E9740h case    6:*/		return 0x820E9744;
		  /* 820E9744h */ case    7:  		/* bl 80612 */
		/* 820E9744h case    7:*/		regs.LR = 0x820E9748; return 0x820FD228;
		/* 820E9744h case    7:*/		return 0x820E9748;
		  /* 820E9748h */ case    8:  		/* mr R29, R3 */
		/* 820E9748h case    8:*/		regs.R29 = regs.R3;
		/* 820E9748h case    8:*/		return 0x820E974C;
		  /* 820E974Ch */ case    9:  		/* lwz R6, <#[R30 + 16]> */
		/* 820E974Ch case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 820E974Ch case    9:*/		return 0x820E9750;
		  /* 820E9750h */ case   10:  		/* mr R3, R31 */
		/* 820E9750h case   10:*/		regs.R3 = regs.R31;
		/* 820E9750h case   10:*/		return 0x820E9754;
		  /* 820E9754h */ case   11:  		/* lwz R5, <#[R30 + 12]> */
		/* 820E9754h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 820E9754h case   11:*/		return 0x820E9758;
		  /* 820E9758h */ case   12:  		/* lwz R4, <#[R30 + 4]> */
		/* 820E9758h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 820E9758h case   12:*/		return 0x820E975C;
		  /* 820E975Ch */ case   13:  		/* fmr FR1, FR31 */
		/* 820E975Ch case   13:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820E975Ch case   13:*/		return 0x820E9760;
		  /* 820E9760h */ case   14:  		/* bl 80584 */
		/* 820E9760h case   14:*/		regs.LR = 0x820E9764; return 0x820FD228;
		/* 820E9760h case   14:*/		return 0x820E9764;
		  /* 820E9764h */ case   15:  		/* cmpwi CR6, R29, -1 */
		/* 820E9764h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 820E9764h case   15:*/		return 0x820E9768;
		  /* 820E9768h */ case   16:  		/* bc 12, CR6_EQ, 172 */
		/* 820E9768h case   16:*/		if ( regs.CR[6].eq ) { return 0x820E9814;  }
		/* 820E9768h case   16:*/		return 0x820E976C;
		  /* 820E976Ch */ case   17:  		/* cmpwi CR6, R3, -1 */
		/* 820E976Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E976Ch case   17:*/		return 0x820E9770;
		  /* 820E9770h */ case   18:  		/* bc 12, CR6_EQ, 164 */
		/* 820E9770h case   18:*/		if ( regs.CR[6].eq ) { return 0x820E9814;  }
		/* 820E9770h case   18:*/		return 0x820E9774;
		  /* 820E9774h */ case   19:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E9774h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E9774h case   19:*/		return 0x820E9778;
		  /* 820E9778h */ case   20:  		/* rlwinm R10, R29, 2, 0, 29 */
		/* 820E9778h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R29);
		/* 820E9778h case   20:*/		return 0x820E977C;
		  /* 820E977Ch */ case   21:  		/* rlwinm R9, R3, 2, 0, 29 */
		/* 820E977Ch case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R3);
		/* 820E977Ch case   21:*/		return 0x820E9780;
		  /* 820E9780h */ case   22:  		/* xoris R8, R26, 8 */
		/* 820E9780h case   22:*/		cpu::op::xoris<0>(regs,&regs.R8,regs.R26,0x8);
		/* 820E9780h case   22:*/		return 0x820E9784;
		  /* 820E9784h */ case   23:  		/* xoris R7, R27, 8 */
		/* 820E9784h case   23:*/		cpu::op::xoris<0>(regs,&regs.R7,regs.R27,0x8);
		/* 820E9784h case   23:*/		return 0x820E9788;
		  /* 820E9788h */ case   24:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E9788h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E9788h case   24:*/		return 0x820E978C;
		  /* 820E978Ch */ case   25:  		/* stw R8, <#[R11 + 60]> */
		/* 820E978Ch case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E978Ch case   25:*/		return 0x820E9790;
		  /* 820E9790h */ case   26:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E9790h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E9790h case   26:*/		return 0x820E9794;
		  /* 820E9794h */ case   27:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820E9794h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E9794h case   27:*/		return 0x820E9798;
		  /* 820E9798h */ case   28:  		/* stw R7, <#[R11 + 60]> */
		/* 820E9798h case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E9798h case   28:*/		return 0x820E979C;
		  /* 820E979Ch */ case   29:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E979Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E979Ch case   29:*/		return 0x820E97A0;
		  /* 820E97A0h */ case   30:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E97A0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E97A0h case   30:*/		return 0x820E97A4;
		  /* 820E97A4h */ case   31:  		/* stw R26, <#[R11 + 56]> */
		/* 820E97A4h case   31:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000038) );
		/* 820E97A4h case   31:*/		return 0x820E97A8;
		  /* 820E97A8h */ case   32:  		/* lwz R11, <#[R31 + 20]> */
		/* 820E97A8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820E97A8h case   32:*/		return 0x820E97AC;
		  /* 820E97ACh */ case   33:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820E97ACh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820E97ACh case   33:*/		return 0x820E97B0;
		  /* 820E97B0h */ case   34:  		/* stw R27, <#[R11 + 56]> */
		/* 820E97B0h case   34:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000038) );
		/* 820E97B0h case   34:*/		return 0x820E97B4;
		  /* 820E97B4h */ case   35:  		/* lwz R11, <#[R28 + 8]> */
		/* 820E97B4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 820E97B4h case   35:*/		return 0x820E97B8;
		  /* 820E97B8h */ case   36:  		/* stw R29, <#[R11 + 8]> */
		/* 820E97B8h case   36:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 820E97B8h case   36:*/		return 0x820E97BC;
		  /* 820E97BCh */ case   37:  		/* lwz R11, <#[R28 + 8]> */
		/* 820E97BCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 820E97BCh case   37:*/		return 0x820E97C0;
		  /* 820E97C0h */ case   38:  		/* stw R3, <#[R11 + 12]> */
		/* 820E97C0h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E97C0h case   38:*/		return 0x820E97C4;
	}
	return 0x820E97C4;
} // Block from 820E9728h-820E97C4h (39 instructions)

//////////////////////////////////////////////////////
// Block at 820E97C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E97C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E97C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E97C4);
		  /* 820E97C4h */ case    0:  		/* lwz R10, <#[R28 + 8]> */
		/* 820E97C4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 820E97C4h case    0:*/		return 0x820E97C8;
		  /* 820E97C8h */ case    1:  		/* mr R4, R28 */
		/* 820E97C8h case    1:*/		regs.R4 = regs.R28;
		/* 820E97C8h case    1:*/		return 0x820E97CC;
		  /* 820E97CCh */ case    2:  		/* lwz R11, <#[R1 + 224]> */
		/* 820E97CCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820E97CCh case    2:*/		return 0x820E97D0;
		  /* 820E97D0h */ case    3:  		/* mr R3, R31 */
		/* 820E97D0h case    3:*/		regs.R3 = regs.R31;
		/* 820E97D0h case    3:*/		return 0x820E97D4;
		  /* 820E97D4h */ case    4:  		/* stw R11, <#[R10 + 16]> */
		/* 820E97D4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 820E97D4h case    4:*/		return 0x820E97D8;
		  /* 820E97D8h */ case    5:  		/* lwz R10, <#[R28 + 8]> */
		/* 820E97D8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 820E97D8h case    5:*/		return 0x820E97DC;
		  /* 820E97DCh */ case    6:  		/* stw R11, <#[R10 + 20]> */
		/* 820E97DCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 820E97DCh case    6:*/		return 0x820E97E0;
		  /* 820E97E0h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 820E97E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820E97E0h case    7:*/		return 0x820E97E4;
		  /* 820E97E4h */ case    8:  		/* lwz R11, <#[R11 + 48]> */
		/* 820E97E4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 820E97E4h case    8:*/		return 0x820E97E8;
		  /* 820E97E8h */ case    9:  		/* mtspr CTR, R11 */
		/* 820E97E8h case    9:*/		regs.CTR = regs.R11;
		/* 820E97E8h case    9:*/		return 0x820E97EC;
		  /* 820E97ECh */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 820E97ECh case   10:*/		if ( 1 ) { regs.LR = 0x820E97F0; return (uint32)regs.CTR; }
		/* 820E97ECh case   10:*/		return 0x820E97F0;
		  /* 820E97F0h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820E97F0h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E97F0h case   11:*/		return 0x820E97F4;
		  /* 820E97F4h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 820E97F4h case   12:*/		if ( regs.CR[0].eq ) { return 0x820E9800;  }
		/* 820E97F4h case   12:*/		return 0x820E97F8;
		  /* 820E97F8h */ case   13:  		/* mr R29, R25 */
		/* 820E97F8h case   13:*/		regs.R29 = regs.R25;
		/* 820E97F8h case   13:*/		return 0x820E97FC;
		  /* 820E97FCh */ case   14:  		/* b 32 */
		/* 820E97FCh case   14:*/		return 0x820E981C;
		/* 820E97FCh case   14:*/		return 0x820E9800;
	}
	return 0x820E9800;
} // Block from 820E97C4h-820E9800h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820E9800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9800);
		  /* 820E9800h */ case    0:  		/* mr R4, R28 */
		/* 820E9800h case    0:*/		regs.R4 = regs.R28;
		/* 820E9800h case    0:*/		return 0x820E9804;
		  /* 820E9804h */ case    1:  		/* lwz R3, <#[R31 + 260]> */
		/* 820E9804h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000104) );
		/* 820E9804h case    1:*/		return 0x820E9808;
		  /* 820E9808h */ case    2:  		/* bl 78152 */
		/* 820E9808h case    2:*/		regs.LR = 0x820E980C; return 0x820FC950;
		/* 820E9808h case    2:*/		return 0x820E980C;
		  /* 820E980Ch */ case    3:  		/* mr R29, R3 */
		/* 820E980Ch case    3:*/		regs.R29 = regs.R3;
		/* 820E980Ch case    3:*/		return 0x820E9810;
		  /* 820E9810h */ case    4:  		/* b 12 */
		/* 820E9810h case    4:*/		return 0x820E981C;
		/* 820E9810h case    4:*/		return 0x820E9814;
	}
	return 0x820E9814;
} // Block from 820E9800h-820E9814h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E9814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9814);
		  /* 820E9814h */ case    0:  		/* lis R29, -32761 */
		/* 820E9814h case    0:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 820E9814h case    0:*/		return 0x820E9818;
		  /* 820E9818h */ case    1:  		/* ori R29, R29, 14 */
		/* 820E9818h case    1:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 820E9818h case    1:*/		return 0x820E981C;
	}
	return 0x820E981C;
} // Block from 820E9814h-820E981Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E981Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E981C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E981C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E981C);
		  /* 820E981Ch */ case    0:  		/* mr R3, R28 */
		/* 820E981Ch case    0:*/		regs.R3 = regs.R28;
		/* 820E981Ch case    0:*/		return 0x820E9820;
	}
	return 0x820E9820;
} // Block from 820E981Ch-820E9820h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E9820h
// Function '?MatchRepeatedNRM@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9820);
		  /* 820E9820h */ case    0:  		/* bl 1260448 */
		/* 820E9820h case    0:*/		regs.LR = 0x820E9824; return 0x8221D3C0;
		/* 820E9820h case    0:*/		return 0x820E9824;
		  /* 820E9824h */ case    1:  		/* mr R3, R28 */
		/* 820E9824h case    1:*/		regs.R3 = regs.R28;
		/* 820E9824h case    1:*/		return 0x820E9828;
		  /* 820E9828h */ case    2:  		/* bl 77256 */
		/* 820E9828h case    2:*/		regs.LR = 0x820E982C; return 0x820FC5F0;
		/* 820E9828h case    2:*/		return 0x820E982C;
	}
	return 0x820E982C;
} // Block from 820E9820h-820E982Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820E982Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E982C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E982C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E982C);
		  /* 820E982Ch */ case    0:  		/* mr R3, R29 */
		/* 820E982Ch case    0:*/		regs.R3 = regs.R29;
		/* 820E982Ch case    0:*/		return 0x820E9830;
	}
	return 0x820E9830;
} // Block from 820E982Ch-820E9830h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E9830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9830);
		  /* 820E9830h */ case    0:  		/* addi R1, R1, 432 */
		/* 820E9830h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 820E9830h case    0:*/		return 0x820E9834;
		  /* 820E9834h */ case    1:  		/* lfd FR31, <#[R1 - 72]> */
		/* 820E9834h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFB8) );
		/* 820E9834h case    1:*/		return 0x820E9838;
		  /* 820E9838h */ case    2:  		/* b -361884 */
		/* 820E9838h case    2:*/		return 0x8209129C;
		/* 820E9838h case    2:*/		return 0x820E983C;
		  /* 820E983Ch */ case    3:  		/* nop */
		/* 820E983Ch case    3:*/		cpu::op::nop();
		/* 820E983Ch case    3:*/		return 0x820E9840;
	}
	return 0x820E9840;
} // Block from 820E9830h-820E9840h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E9840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9840);
		  /* 820E9840h */ case    0:  		/* mfspr R12, LR */
		/* 820E9840h case    0:*/		regs.R12 = regs.LR;
		/* 820E9840h case    0:*/		return 0x820E9844;
		  /* 820E9844h */ case    1:  		/* bl -361960 */
		/* 820E9844h case    1:*/		regs.LR = 0x820E9848; return 0x8209125C;
		/* 820E9844h case    1:*/		return 0x820E9848;
		  /* 820E9848h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820E9848h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820E9848h case    2:*/		return 0x820E984C;
		  /* 820E984Ch */ case    3:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E984Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E984Ch case    3:*/		return 0x820E9850;
		  /* 820E9850h */ case    4:  		/* lis R10, 20480 */
		/* 820E9850h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 820E9850h case    4:*/		return 0x820E9854;
		  /* 820E9854h */ case    5:  		/* mr R30, R3 */
		/* 820E9854h case    5:*/		regs.R30 = regs.R3;
		/* 820E9854h case    5:*/		return 0x820E9858;
		  /* 820E9858h */ case    6:  		/* ori R10, R10, 2 */
		/* 820E9858h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 820E9858h case    6:*/		return 0x820E985C;
		  /* 820E985Ch */ case    7:  		/* lwz R11, <#[R11]> */
		/* 820E985Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E985Ch case    7:*/		return 0x820E9860;
		  /* 820E9860h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 820E9860h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820E9860h case    8:*/		return 0x820E9864;
		  /* 820E9864h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 820E9864h case    9:*/		if ( regs.CR[6].eq ) { return 0x820E9870;  }
		/* 820E9864h case    9:*/		return 0x820E9868;
		  /* 820E9868h */ case   10:  		/* li R3, 1 */
		/* 820E9868h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E9868h case   10:*/		return 0x820E986C;
		  /* 820E986Ch */ case   11:  		/* b 316 */
		/* 820E986Ch case   11:*/		return 0x820E99A8;
		/* 820E986Ch case   11:*/		return 0x820E9870;
	}
	return 0x820E9870;
} // Block from 820E9840h-820E9870h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820E9870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9870);
		  /* 820E9870h */ case    0:  		/* li R3, 116 */
		/* 820E9870h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820E9870h case    0:*/		return 0x820E9874;
		  /* 820E9874h */ case    1:  		/* bl 77092 */
		/* 820E9874h case    1:*/		regs.LR = 0x820E9878; return 0x820FC598;
		/* 820E9874h case    1:*/		return 0x820E9878;
		  /* 820E9878h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820E9878h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820E9878h case    2:*/		return 0x820E987C;
		  /* 820E987Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 820E987Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820E988C;  }
		/* 820E987Ch case    3:*/		return 0x820E9880;
		  /* 820E9880h */ case    4:  		/* bl 75296 */
		/* 820E9880h case    4:*/		regs.LR = 0x820E9884; return 0x820FBEA0;
		/* 820E9880h case    4:*/		return 0x820E9884;
		  /* 820E9884h */ case    5:  		/* mr R31, R3 */
		/* 820E9884h case    5:*/		regs.R31 = regs.R3;
		/* 820E9884h case    5:*/		return 0x820E9888;
		  /* 820E9888h */ case    6:  		/* b 8 */
		/* 820E9888h case    6:*/		return 0x820E9890;
		/* 820E9888h case    6:*/		return 0x820E988C;
	}
	return 0x820E988C;
} // Block from 820E9870h-820E988Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E988Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E988C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E988C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E988C);
		  /* 820E988Ch */ case    0:  		/* li R31, 0 */
		/* 820E988Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E988Ch case    0:*/		return 0x820E9890;
	}
	return 0x820E9890;
} // Block from 820E988Ch-820E9890h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E9890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9890);
		  /* 820E9890h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820E9890h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820E9890h case    0:*/		return 0x820E9894;
		  /* 820E9894h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820E9894h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820E98A4;  }
		/* 820E9894h case    1:*/		return 0x820E9898;
		  /* 820E9898h */ case    2:  		/* lis R29, -32761 */
		/* 820E9898h case    2:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 820E9898h case    2:*/		return 0x820E989C;
		  /* 820E989Ch */ case    3:  		/* ori R29, R29, 14 */
		/* 820E989Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 820E989Ch case    3:*/		return 0x820E98A0;
		  /* 820E98A0h */ case    4:  		/* b 260 */
		/* 820E98A0h case    4:*/		return 0x820E99A4;
		/* 820E98A0h case    4:*/		return 0x820E98A4;
	}
	return 0x820E98A4;
} // Block from 820E9890h-820E98A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820E98A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E98A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E98A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E98A4);
		  /* 820E98A4h */ case    0:  		/* lis R4, 28800 */
		/* 820E98A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x7080);
		/* 820E98A4h case    0:*/		return 0x820E98A8;
		  /* 820E98A8h */ case    1:  		/* li R7, 0 */
		/* 820E98A8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820E98A8h case    1:*/		return 0x820E98AC;
		  /* 820E98ACh */ case    2:  		/* li R6, 1 */
		/* 820E98ACh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820E98ACh case    2:*/		return 0x820E98B0;
		  /* 820E98B0h */ case    3:  		/* li R5, 6 */
		/* 820E98B0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 820E98B0h case    3:*/		return 0x820E98B4;
		  /* 820E98B4h */ case    4:  		/* ori R4, R4, 2 */
		/* 820E98B4h case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x2);
		/* 820E98B4h case    4:*/		return 0x820E98B8;
		  /* 820E98B8h */ case    5:  		/* mr R3, R31 */
		/* 820E98B8h case    5:*/		regs.R3 = regs.R31;
		/* 820E98B8h case    5:*/		return 0x820E98BC;
		  /* 820E98BCh */ case    6:  		/* bl 77172 */
		/* 820E98BCh case    6:*/		regs.LR = 0x820E98C0; return 0x820FC630;
		/* 820E98BCh case    6:*/		return 0x820E98C0;
		  /* 820E98C0h */ case    7:  		/* or. R29, R3, R3 */
		/* 820E98C0h case    7:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E98C0h case    7:*/		return 0x820E98C4;
		  /* 820E98C4h */ case    8:  		/* bc 12, CR0_LT, 208 */
		/* 820E98C4h case    8:*/		if ( regs.CR[0].lt ) { return 0x820E9994;  }
		/* 820E98C4h case    8:*/		return 0x820E98C8;
		  /* 820E98C8h */ case    9:  		/* mr R3, R31 */
		/* 820E98C8h case    9:*/		regs.R3 = regs.R31;
		/* 820E98C8h case    9:*/		return 0x820E98CC;
		  /* 820E98CCh */ case   10:  		/* lwz R4, <#[R30 + 260]> */
		/* 820E98CCh case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000104) );
		/* 820E98CCh case   10:*/		return 0x820E98D0;
		  /* 820E98D0h */ case   11:  		/* bl 75296 */
		/* 820E98D0h case   11:*/		regs.LR = 0x820E98D4; return 0x820FBEF0;
		/* 820E98D0h case   11:*/		return 0x820E98D4;
		  /* 820E98D4h */ case   12:  		/* or. R29, R3, R3 */
		/* 820E98D4h case   12:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820E98D4h case   12:*/		return 0x820E98D8;
		  /* 820E98D8h */ case   13:  		/* bc 12, CR0_LT, 188 */
		/* 820E98D8h case   13:*/		if ( regs.CR[0].lt ) { return 0x820E9994;  }
		/* 820E98D8h case   13:*/		return 0x820E98DC;
		  /* 820E98DCh */ case   14:  		/* lwz R9, <#[R30 + 260]> */
		/* 820E98DCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000104) );
		/* 820E98DCh case   14:*/		return 0x820E98E0;
		  /* 820E98E0h */ case   15:  		/* li R10, 4 */
		/* 820E98E0h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820E98E0h case   15:*/		return 0x820E98E4;
		  /* 820E98E4h */ case   16:  		/* lwz R8, <#[R31 + 16]> */
		/* 820E98E4h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 820E98E4h case   16:*/		return 0x820E98E8;
		  /* 820E98E8h */ case   17:  		/* li R11, 0 */
		/* 820E98E8h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E98E8h case   17:*/		return 0x820E98EC;
		  /* 820E98ECh */ case   18:  		/* lwz R9, <#[R9 + 16]> */
		/* 820E98ECh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000010) );
		/* 820E98ECh case   18:*/		return 0x820E98F0;
		  /* 820E98F0h */ case   19:  		/* mtspr CTR, R10 */
		/* 820E98F0h case   19:*/		regs.CTR = regs.R10;
		/* 820E98F0h case   19:*/		return 0x820E98F4;
		  /* 820E98F4h */ case   20:  		/* lwz R10, <#[R9]> */
		/* 820E98F4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 820E98F4h case   20:*/		return 0x820E98F8;
		  /* 820E98F8h */ case   21:  		/* stw R10, <#[R8]> */
		/* 820E98F8h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 820E98F8h case   21:*/		return 0x820E98FC;
		  /* 820E98FCh */ case   22:  		/* lwz R10, <#[R30 + 260]> */
		/* 820E98FCh case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000104) );
		/* 820E98FCh case   22:*/		return 0x820E9900;
		  /* 820E9900h */ case   23:  		/* lwz R9, <#[R31 + 8]> */
		/* 820E9900h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820E9900h case   23:*/		return 0x820E9904;
		  /* 820E9904h */ case   24:  		/* lwz R10, <#[R10 + 8]> */
		/* 820E9904h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820E9904h case   24:*/		return 0x820E9908;
		  /* 820E9908h */ case   25:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820E9908h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E9908h case   25:*/		return 0x820E990C;
		  /* 820E990Ch */ case   26:  		/* stwx R10, <#[R11 + R9]> */
		/* 820E990Ch case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E990Ch case   26:*/		return 0x820E9910;
		  /* 820E9910h */ case   27:  		/* addi R11, R11, 4 */
		/* 820E9910h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E9910h case   27:*/		return 0x820E9914;
		  /* 820E9914h */ case   28:  		/* bc 16, CR0_LT, -24 */
		/* 820E9914h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E98FC;  }
		/* 820E9914h case   28:*/		return 0x820E9918;
		  /* 820E9918h */ case   29:  		/* lis R11, -32256 */
		/* 820E9918h case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820E9918h case   29:*/		return 0x820E991C;
		  /* 820E991Ch */ case   30:  		/* lwz R4, <#[R30 + 120]> */
		/* 820E991Ch case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000078) );
		/* 820E991Ch case   30:*/		return 0x820E9920;
		  /* 820E9920h */ case   31:  		/* li R6, 0 */
		/* 820E9920h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E9920h case   31:*/		return 0x820E9924;
		  /* 820E9924h */ case   32:  		/* li R5, 0 */
		/* 820E9924h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E9924h case   32:*/		return 0x820E9928;
		  /* 820E9928h */ case   33:  		/* mr R3, R30 */
		/* 820E9928h case   33:*/		regs.R3 = regs.R30;
		/* 820E9928h case   33:*/		return 0x820E992C;
		  /* 820E992Ch */ case   34:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 820E992Ch case   34:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 820E992Ch case   34:*/		return 0x820E9930;
		  /* 820E9930h */ case   35:  		/* bl 80120 */
		/* 820E9930h case   35:*/		regs.LR = 0x820E9934; return 0x820FD228;
		/* 820E9930h case   35:*/		return 0x820E9934;
		  /* 820E9934h */ case   36:  		/* mr R11, R3 */
		/* 820E9934h case   36:*/		regs.R11 = regs.R3;
		/* 820E9934h case   36:*/		return 0x820E9938;
		  /* 820E9938h */ case   37:  		/* cmpwi CR6, R3, -1 */
		/* 820E9938h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820E9938h case   37:*/		return 0x820E993C;
		  /* 820E993Ch */ case   38:  		/* bc 4, CR6_EQ, 16 */
		/* 820E993Ch case   38:*/		if ( !regs.CR[6].eq ) { return 0x820E994C;  }
		/* 820E993Ch case   38:*/		return 0x820E9940;
		  /* 820E9940h */ case   39:  		/* lis R3, -32761 */
		/* 820E9940h case   39:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820E9940h case   39:*/		return 0x820E9944;
		  /* 820E9944h */ case   40:  		/* ori R3, R3, 14 */
		/* 820E9944h case   40:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820E9944h case   40:*/		return 0x820E9948;
		  /* 820E9948h */ case   41:  		/* b 96 */
		/* 820E9948h case   41:*/		return 0x820E99A8;
		/* 820E9948h case   41:*/		return 0x820E994C;
	}
	return 0x820E994C;
} // Block from 820E98A4h-820E994Ch (42 instructions)

//////////////////////////////////////////////////////
// Block at 820E994Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E994C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E994C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E994C);
		  /* 820E994Ch */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 820E994Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820E994Ch case    0:*/		return 0x820E9950;
		  /* 820E9950h */ case    1:  		/* mr R4, R31 */
		/* 820E9950h case    1:*/		regs.R4 = regs.R31;
		/* 820E9950h case    1:*/		return 0x820E9954;
		  /* 820E9954h */ case    2:  		/* mr R3, R30 */
		/* 820E9954h case    2:*/		regs.R3 = regs.R30;
		/* 820E9954h case    2:*/		return 0x820E9958;
		  /* 820E9958h */ case    3:  		/* stw R11, <#[R10 + 16]> */
		/* 820E9958h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 820E9958h case    3:*/		return 0x820E995C;
		  /* 820E995Ch */ case    4:  		/* lwz R10, <#[R31 + 8]> */
		/* 820E995Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820E995Ch case    4:*/		return 0x820E9960;
		  /* 820E9960h */ case    5:  		/* stw R11, <#[R10 + 20]> */
		/* 820E9960h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 820E9960h case    5:*/		return 0x820E9964;
		  /* 820E9964h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 820E9964h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820E9964h case    6:*/		return 0x820E9968;
		  /* 820E9968h */ case    7:  		/* lwz R11, <#[R11 + 48]> */
		/* 820E9968h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 820E9968h case    7:*/		return 0x820E996C;
		  /* 820E996Ch */ case    8:  		/* mtspr CTR, R11 */
		/* 820E996Ch case    8:*/		regs.CTR = regs.R11;
		/* 820E996Ch case    8:*/		return 0x820E9970;
		  /* 820E9970h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 820E9970h case    9:*/		if ( 1 ) { regs.LR = 0x820E9974; return (uint32)regs.CTR; }
		/* 820E9970h case    9:*/		return 0x820E9974;
		  /* 820E9974h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820E9974h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E9974h case   10:*/		return 0x820E9978;
		  /* 820E9978h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 820E9978h case   11:*/		if ( regs.CR[0].eq ) { return 0x820E9984;  }
		/* 820E9978h case   11:*/		return 0x820E997C;
		  /* 820E997Ch */ case   12:  		/* li R29, 1 */
		/* 820E997Ch case   12:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 820E997Ch case   12:*/		return 0x820E9980;
		  /* 820E9980h */ case   13:  		/* b 20 */
		/* 820E9980h case   13:*/		return 0x820E9994;
		/* 820E9980h case   13:*/		return 0x820E9984;
	}
	return 0x820E9984;
} // Block from 820E994Ch-820E9984h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820E9984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9984);
		  /* 820E9984h */ case    0:  		/* mr R4, R31 */
		/* 820E9984h case    0:*/		regs.R4 = regs.R31;
		/* 820E9984h case    0:*/		return 0x820E9988;
		  /* 820E9988h */ case    1:  		/* lwz R3, <#[R30 + 260]> */
		/* 820E9988h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000104) );
		/* 820E9988h case    1:*/		return 0x820E998C;
		  /* 820E998Ch */ case    2:  		/* bl 77764 */
		/* 820E998Ch case    2:*/		regs.LR = 0x820E9990; return 0x820FC950;
		/* 820E998Ch case    2:*/		return 0x820E9990;
		  /* 820E9990h */ case    3:  		/* mr R29, R3 */
		/* 820E9990h case    3:*/		regs.R29 = regs.R3;
		/* 820E9990h case    3:*/		return 0x820E9994;
	}
	return 0x820E9994;
} // Block from 820E9984h-820E9994h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E9994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9994);
		  /* 820E9994h */ case    0:  		/* mr R3, R31 */
		/* 820E9994h case    0:*/		regs.R3 = regs.R31;
		/* 820E9994h case    0:*/		return 0x820E9998;
		  /* 820E9998h */ case    1:  		/* bl 1260072 */
		/* 820E9998h case    1:*/		regs.LR = 0x820E999C; return 0x8221D3C0;
		/* 820E9998h case    1:*/		return 0x820E999C;
		  /* 820E999Ch */ case    2:  		/* mr R3, R31 */
		/* 820E999Ch case    2:*/		regs.R3 = regs.R31;
		/* 820E999Ch case    2:*/		return 0x820E99A0;
		  /* 820E99A0h */ case    3:  		/* bl 76880 */
		/* 820E99A0h case    3:*/		regs.LR = 0x820E99A4; return 0x820FC5F0;
		/* 820E99A0h case    3:*/		return 0x820E99A4;
	}
	return 0x820E99A4;
} // Block from 820E9994h-820E99A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E99A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E99A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E99A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E99A4);
		  /* 820E99A4h */ case    0:  		/* mr R3, R29 */
		/* 820E99A4h case    0:*/		regs.R3 = regs.R29;
		/* 820E99A4h case    0:*/		return 0x820E99A8;
	}
	return 0x820E99A8;
} // Block from 820E99A4h-820E99A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E99A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E99A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E99A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E99A8);
		  /* 820E99A8h */ case    0:  		/* addi R1, R1, 112 */
		/* 820E99A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820E99A8h case    0:*/		return 0x820E99AC;
		  /* 820E99ACh */ case    1:  		/* b -362240 */
		/* 820E99ACh case    1:*/		return 0x820912AC;
		/* 820E99ACh case    1:*/		return 0x820E99B0;
	}
	return 0x820E99B0;
} // Block from 820E99A8h-820E99B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E99B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E99B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E99B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E99B0);
		  /* 820E99B0h */ case    0:  		/* mfspr R12, LR */
		/* 820E99B0h case    0:*/		regs.R12 = regs.LR;
		/* 820E99B0h case    0:*/		return 0x820E99B4;
		  /* 820E99B4h */ case    1:  		/* bl -362344 */
		/* 820E99B4h case    1:*/		regs.LR = 0x820E99B8; return 0x8209124C;
		/* 820E99B4h case    1:*/		return 0x820E99B8;
		  /* 820E99B8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820E99B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820E99B8h case    2:*/		return 0x820E99BC;
		  /* 820E99BCh */ case    3:  		/* lwz R11, <#[R3]> */
		/* 820E99BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820E99BCh case    3:*/		return 0x820E99C0;
	}
	return 0x820E99C0;
} // Block from 820E99B0h-820E99C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E99C0h
// Function '?MatchNRM@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E99C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E99C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E99C0);
		  /* 820E99C0h */ case    0:  		/* mr R25, R5 */
		/* 820E99C0h case    0:*/		regs.R25 = regs.R5;
		/* 820E99C0h case    0:*/		return 0x820E99C4;
		  /* 820E99C4h */ case    1:  		/* li R5, 0 */
		/* 820E99C4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820E99C4h case    1:*/		return 0x820E99C8;
		  /* 820E99C8h */ case    2:  		/* mr R28, R3 */
		/* 820E99C8h case    2:*/		regs.R28 = regs.R3;
		/* 820E99C8h case    2:*/		return 0x820E99CC;
		  /* 820E99CCh */ case    3:  		/* mr R27, R4 */
		/* 820E99CCh case    3:*/		regs.R27 = regs.R4;
		/* 820E99CCh case    3:*/		return 0x820E99D0;
		  /* 820E99D0h */ case    4:  		/* mr R30, R6 */
		/* 820E99D0h case    4:*/		regs.R30 = regs.R6;
		/* 820E99D0h case    4:*/		return 0x820E99D4;
		  /* 820E99D4h */ case    5:  		/* lwz R11, <#[R11 + 32]> */
		/* 820E99D4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 820E99D4h case    5:*/		return 0x820E99D8;
		  /* 820E99D8h */ case    6:  		/* mtspr CTR, R11 */
		/* 820E99D8h case    6:*/		regs.CTR = regs.R11;
		/* 820E99D8h case    6:*/		return 0x820E99DC;
		  /* 820E99DCh */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 820E99DCh case    7:*/		if ( 1 ) { regs.LR = 0x820E99E0; return (uint32)regs.CTR; }
		/* 820E99DCh case    7:*/		return 0x820E99E0;
		  /* 820E99E0h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820E99E0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E99E0h case    8:*/		return 0x820E99E4;
		  /* 820E99E4h */ case    9:  		/* bc 4, CR0_EQ, 532 */
		/* 820E99E4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x820E9BF8;  }
		/* 820E99E4h case    9:*/		return 0x820E99E8;
		  /* 820E99E8h */ case   10:  		/* lwz R5, <#[R27 + 12]> */
		/* 820E99E8h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 820E99E8h case   10:*/		return 0x820E99EC;
		  /* 820E99ECh */ case   11:  		/* li R26, 0 */
		/* 820E99ECh case   11:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820E99ECh case   11:*/		return 0x820E99F0;
		  /* 820E99F0h */ case   12:  		/* li R31, -1 */
		/* 820E99F0h case   12:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 820E99F0h case   12:*/		return 0x820E99F4;
		  /* 820E99F4h */ case   13:  		/* li R6, 0 */
		/* 820E99F4h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820E99F4h case   13:*/		return 0x820E99F8;
		  /* 820E99F8h */ case   14:  		/* cmplwi CR6, R5, 0 */
		/* 820E99F8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820E99F8h case   14:*/		return 0x820E99FC;
		  /* 820E99FCh */ case   15:  		/* bc 12, CR6_EQ, 84 */
		/* 820E99FCh case   15:*/		if ( regs.CR[6].eq ) { return 0x820E9A50;  }
		/* 820E99FCh case   15:*/		return 0x820E9A00;
		  /* 820E9A00h */ case   16:  		/* lwz R8, <#[R27 + 16]> */
		/* 820E9A00h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000010) );
		/* 820E9A00h case   16:*/		return 0x820E9A04;
		  /* 820E9A04h */ case   17:  		/* li R9, 0 */
		/* 820E9A04h case   17:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E9A04h case   17:*/		return 0x820E9A08;
		  /* 820E9A08h */ case   18:  		/* lwz R7, <#[R28 + 20]> */
		/* 820E9A08h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000014) );
		/* 820E9A08h case   18:*/		return 0x820E9A0C;
		  /* 820E9A0Ch */ case   19:  		/* lwzx R11, <#[R9 + R8]> */
		/* 820E9A0Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820E9A0Ch case   19:*/		return 0x820E9A10;
		  /* 820E9A10h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E9A10h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E9A10h case   20:*/		return 0x820E9A14;
		  /* 820E9A14h */ case   21:  		/* lwzx R10, <#[R11 + R7]> */
		/* 820E9A14h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E9A14h case   21:*/		return 0x820E9A18;
		  /* 820E9A18h */ case   22:  		/* lwz R11, <#[R10 + 76]> */
		/* 820E9A18h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 820E9A18h case   22:*/		return 0x820E9A1C;
		  /* 820E9A1Ch */ case   23:  		/* cmpwi CR6, R11, -1 */
		/* 820E9A1Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E9A1Ch case   23:*/		return 0x820E9A20;
		  /* 820E9A20h */ case   24:  		/* bc 12, CR6_EQ, 16 */
		/* 820E9A20h case   24:*/		if ( regs.CR[6].eq ) { return 0x820E9A30;  }
		/* 820E9A20h case   24:*/		return 0x820E9A24;
		  /* 820E9A24h */ case   25:  		/* cmplw CR6, R26, R11 */
		/* 820E9A24h case   25:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820E9A24h case   25:*/		return 0x820E9A28;
		  /* 820E9A28h */ case   26:  		/* bc 4, CR6_LT, 8 */
		/* 820E9A28h case   26:*/		if ( !regs.CR[6].lt ) { return 0x820E9A30;  }
		/* 820E9A28h case   26:*/		return 0x820E9A2C;
		  /* 820E9A2Ch */ case   27:  		/* mr R26, R11 */
		/* 820E9A2Ch case   27:*/		regs.R26 = regs.R11;
		/* 820E9A2Ch case   27:*/		return 0x820E9A30;
	}
	return 0x820E9A30;
} // Block from 820E99C0h-820E9A30h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820E9A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9A30);
		  /* 820E9A30h */ case    0:  		/* lwz R11, <#[R10 + 72]> */
		/* 820E9A30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000048) );
		/* 820E9A30h case    0:*/		return 0x820E9A34;
		  /* 820E9A34h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 820E9A34h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820E9A34h case    1:*/		return 0x820E9A38;
		  /* 820E9A38h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 820E9A38h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820E9A40;  }
		/* 820E9A38h case    2:*/		return 0x820E9A3C;
		  /* 820E9A3Ch */ case    3:  		/* mr R31, R11 */
		/* 820E9A3Ch case    3:*/		regs.R31 = regs.R11;
		/* 820E9A3Ch case    3:*/		return 0x820E9A40;
	}
	return 0x820E9A40;
} // Block from 820E9A30h-820E9A40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E9A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9A40);
		  /* 820E9A40h */ case    0:  		/* addi R6, R6, 1 */
		/* 820E9A40h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820E9A40h case    0:*/		return 0x820E9A44;
		  /* 820E9A44h */ case    1:  		/* addi R9, R9, 4 */
		/* 820E9A44h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820E9A44h case    1:*/		return 0x820E9A48;
		  /* 820E9A48h */ case    2:  		/* cmplw CR6, R6, R5 */
		/* 820E9A48h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 820E9A48h case    2:*/		return 0x820E9A4C;
		  /* 820E9A4Ch */ case    3:  		/* bc 12, CR6_LT, -64 */
		/* 820E9A4Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x820E9A0C;  }
		/* 820E9A4Ch case    3:*/		return 0x820E9A50;
	}
	return 0x820E9A50;
} // Block from 820E9A40h-820E9A50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E9A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9A50);
		  /* 820E9A50h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 820E9A50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 820E9A50h case    0:*/		return 0x820E9A54;
		  /* 820E9A54h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820E9A54h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820E9A54h case    1:*/		return 0x820E9A58;
		  /* 820E9A58h */ case    2:  		/* bc 12, CR6_EQ, 292 */
		/* 820E9A58h case    2:*/		if ( regs.CR[6].eq ) { return 0x820E9B7C;  }
		/* 820E9A58h case    2:*/		return 0x820E9A5C;
		  /* 820E9A5Ch */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 820E9A5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 820E9A5Ch case    3:*/		return 0x820E9A60;
		  /* 820E9A60h */ case    4:  		/* mtspr CTR, R11 */
		/* 820E9A60h case    4:*/		regs.CTR = regs.R11;
		/* 820E9A60h case    4:*/		return 0x820E9A64;
		  /* 820E9A64h */ case    5:  		/* lwz R5, <#[R28 + 20]> */
		/* 820E9A64h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000014) );
		/* 820E9A64h case    5:*/		return 0x820E9A68;
		  /* 820E9A68h */ case    6:  		/* lwz R4, <#[R27 + 8]> */
		/* 820E9A68h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000008) );
		/* 820E9A68h case    6:*/		return 0x820E9A6C;
		  /* 820E9A6Ch */ case    7:  		/* lwz R11, <#[R4]> */
		/* 820E9A6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820E9A6Ch case    7:*/		return 0x820E9A70;
		  /* 820E9A70h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E9A70h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E9A70h case    8:*/		return 0x820E9A74;
		  /* 820E9A74h */ case    9:  		/* lwzx R7, <#[R11 + R5]> */
		/* 820E9A74h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 820E9A74h case    9:*/		return 0x820E9A78;
		  /* 820E9A78h */ case   10:  		/* lwz R11, <#[R7 + 4]> */
		/* 820E9A78h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 820E9A78h case   10:*/		return 0x820E9A7C;
		  /* 820E9A7Ch */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E9A7Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E9A7Ch case   11:*/		return 0x820E9A80;
		  /* 820E9A80h */ case   12:  		/* lwzx R11, <#[R11 + R3]> */
		/* 820E9A80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820E9A80h case   12:*/		return 0x820E9A84;
		  /* 820E9A84h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 820E9A84h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820E9A84h case   13:*/		return 0x820E9A88;
		  /* 820E9A88h */ case   14:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 820E9A88h case   14:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 820E9A88h case   14:*/		return 0x820E9A8C;
		  /* 820E9A8Ch */ case   15:  		/* bc 12, CR0_EQ, 232 */
		/* 820E9A8Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x820E9B74;  }
		/* 820E9A8Ch case   15:*/		return 0x820E9A90;
		  /* 820E9A90h */ case   16:  		/* lwz R11, <#[R7 + 72]> */
		/* 820E9A90h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000048) );
		/* 820E9A90h case   16:*/		return 0x820E9A94;
		  /* 820E9A94h */ case   17:  		/* cmpwi CR6, R11, -1 */
		/* 820E9A94h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820E9A94h case   17:*/		return 0x820E9A98;
		  /* 820E9A98h */ case   18:  		/* bc 12, CR6_EQ, 220 */
		/* 820E9A98h case   18:*/		if ( regs.CR[6].eq ) { return 0x820E9B74;  }
		/* 820E9A98h case   18:*/		return 0x820E9A9C;
		  /* 820E9A9Ch */ case   19:  		/* addi R11, R11, 1 */
		/* 820E9A9Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E9A9Ch case   19:*/		return 0x820E9AA0;
		  /* 820E9AA0h */ case   20:  		/* cmplw CR6, R26, R11 */
		/* 820E9AA0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820E9AA0h case   20:*/		return 0x820E9AA4;
		  /* 820E9AA4h */ case   21:  		/* bc 4, CR6_LT, 188 */
		/* 820E9AA4h case   21:*/		if ( !regs.CR[6].lt ) { return 0x820E9B60;  }
		/* 820E9AA4h case   21:*/		return 0x820E9AA8;
		  /* 820E9AA8h */ case   22:  		/* mr R26, R11 */
		/* 820E9AA8h case   22:*/		regs.R26 = regs.R11;
		/* 820E9AA8h case   22:*/		return 0x820E9AAC;
		  /* 820E9AACh */ case   23:  		/* b 180 */
		/* 820E9AACh case   23:*/		return 0x820E9B60;
		/* 820E9AACh case   23:*/		return 0x820E9AB0;
		  /* 820E9AB0h */ case   24:  		/* cmpwi CR6, R6, -1 */
		/* 820E9AB0h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R6,0xFFFFFFFF);
		/* 820E9AB0h case   24:*/		return 0x820E9AB4;
		  /* 820E9AB4h */ case   25:  		/* bc 12, CR6_EQ, 188 */
		/* 820E9AB4h case   25:*/		if ( regs.CR[6].eq ) { return 0x820E9B70;  }
		/* 820E9AB4h case   25:*/		return 0x820E9AB8;
		  /* 820E9AB8h */ case   26:  		/* li R11, 0 */
		/* 820E9AB8h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E9AB8h case   26:*/		return 0x820E9ABC;
		  /* 820E9ABCh */ case   27:  		/* cmplwi CR6, R30, 0 */
		/* 820E9ABCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E9ABCh case   27:*/		return 0x820E9AC0;
		  /* 820E9AC0h */ case   28:  		/* bc 12, CR6_EQ, 176 */
		/* 820E9AC0h case   28:*/		if ( regs.CR[6].eq ) { return 0x820E9B70;  }
		/* 820E9AC0h case   28:*/		return 0x820E9AC4;
		  /* 820E9AC4h */ case   29:  		/* lwz R9, <#[R28 + 24]> */
		/* 820E9AC4h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000018) );
		/* 820E9AC4h case   29:*/		return 0x820E9AC8;
		  /* 820E9AC8h */ case   30:  		/* rlwinm R8, R6, 2, 0, 29 */
		/* 820E9AC8h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R6);
		/* 820E9AC8h case   30:*/		return 0x820E9ACC;
		  /* 820E9ACCh */ case   31:  		/* mr R10, R25 */
		/* 820E9ACCh case   31:*/		regs.R10 = regs.R25;
		/* 820E9ACCh case   31:*/		return 0x820E9AD0;
		  /* 820E9AD0h */ case   32:  		/* lwzx R9, <#[R8 + R9]> */
		/* 820E9AD0h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E9AD0h case   32:*/		return 0x820E9AD4;
		  /* 820E9AD4h */ case   33:  		/* lwz R8, <#[R10]> */
		/* 820E9AD4h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820E9AD4h case   33:*/		return 0x820E9AD8;
		  /* 820E9AD8h */ case   34:  		/* cmplw CR6, R8, R9 */
		/* 820E9AD8h case   34:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 820E9AD8h case   34:*/		return 0x820E9ADC;
		  /* 820E9ADCh */ case   35:  		/* bc 12, CR6_EQ, 20 */
		/* 820E9ADCh case   35:*/		if ( regs.CR[6].eq ) { return 0x820E9AF0;  }
		/* 820E9ADCh case   35:*/		return 0x820E9AE0;
		  /* 820E9AE0h */ case   36:  		/* addi R11, R11, 1 */
		/* 820E9AE0h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E9AE0h case   36:*/		return 0x820E9AE4;
		  /* 820E9AE4h */ case   37:  		/* addi R10, R10, 4 */
		/* 820E9AE4h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E9AE4h case   37:*/		return 0x820E9AE8;
		  /* 820E9AE8h */ case   38:  		/* cmplw CR6, R11, R30 */
		/* 820E9AE8h case   38:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820E9AE8h case   38:*/		return 0x820E9AEC;
		  /* 820E9AECh */ case   39:  		/* bc 12, CR6_LT, -24 */
		/* 820E9AECh case   39:*/		if ( regs.CR[6].lt ) { return 0x820E9AD4;  }
		/* 820E9AECh case   39:*/		return 0x820E9AF0;
	}
	return 0x820E9AF0;
} // Block from 820E9A50h-820E9AF0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820E9AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9AF0);
		  /* 820E9AF0h */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 820E9AF0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 820E9AF0h case    0:*/		return 0x820E9AF4;
		  /* 820E9AF4h */ case    1:  		/* bc 4, CR6_LT, 124 */
		/* 820E9AF4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x820E9B70;  }
		/* 820E9AF4h case    1:*/		return 0x820E9AF8;
		  /* 820E9AF8h */ case    2:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 820E9AF8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 820E9AF8h case    2:*/		return 0x820E9AFC;
		  /* 820E9AFCh */ case    3:  		/* li R11, 0 */
		/* 820E9AFCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E9AFCh case    3:*/		return 0x820E9B00;
		  /* 820E9B00h */ case    4:  		/* lwzx R9, <#[R10 + R25]> */
		/* 820E9B00h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R25 + 0x00000000) );
		/* 820E9B00h case    4:*/		return 0x820E9B04;
		  /* 820E9B04h */ case    5:  		/* lwz R8, <#[R9 + 12]> */
		/* 820E9B04h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x0000000C) );
		/* 820E9B04h case    5:*/		return 0x820E9B08;
		  /* 820E9B08h */ case    6:  		/* cmplwi CR6, R8, 0 */
		/* 820E9B08h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820E9B08h case    6:*/		return 0x820E9B0C;
		  /* 820E9B0Ch */ case    7:  		/* bc 12, CR6_EQ, 56 */
		/* 820E9B0Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820E9B44;  }
		/* 820E9B0Ch case    7:*/		return 0x820E9B10;
		  /* 820E9B10h */ case    8:  		/* lwz R7, <#[R7 + 16]> */
		/* 820E9B10h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 820E9B10h case    8:*/		return 0x820E9B14;
		  /* 820E9B14h */ case    9:  		/* li R10, 0 */
		/* 820E9B14h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E9B14h case    9:*/		return 0x820E9B18;
		  /* 820E9B18h */ case   10:  		/* lwz R29, <#[R9 + 16]> */
		/* 820E9B18h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + 0x00000010) );
		/* 820E9B18h case   10:*/		return 0x820E9B1C;
		  /* 820E9B1Ch */ case   11:  		/* lwzx R29, <#[R29 + R10]> */
		/* 820E9B1Ch case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R10 + 0x00000000) );
		/* 820E9B1Ch case   11:*/		return 0x820E9B20;
		  /* 820E9B20h */ case   12:  		/* rlwinm R29, R29, 2, 0, 29 */
		/* 820E9B20h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R29);
		/* 820E9B20h case   12:*/		return 0x820E9B24;
		  /* 820E9B24h */ case   13:  		/* lwzx R29, <#[R29 + R5]> */
		/* 820E9B24h case   13:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R5 + 0x00000000) );
		/* 820E9B24h case   13:*/		return 0x820E9B28;
		  /* 820E9B28h */ case   14:  		/* lwz R29, <#[R29 + 16]> */
		/* 820E9B28h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000010) );
		/* 820E9B28h case   14:*/		return 0x820E9B2C;
		  /* 820E9B2Ch */ case   15:  		/* cmplw CR6, R7, R29 */
		/* 820E9B2Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R29);
		/* 820E9B2Ch case   15:*/		return 0x820E9B30;
		  /* 820E9B30h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 820E9B30h case   16:*/		if ( regs.CR[6].eq ) { return 0x820E9B44;  }
		/* 820E9B30h case   16:*/		return 0x820E9B34;
		  /* 820E9B34h */ case   17:  		/* addi R11, R11, 1 */
		/* 820E9B34h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E9B34h case   17:*/		return 0x820E9B38;
		  /* 820E9B38h */ case   18:  		/* addi R10, R10, 4 */
		/* 820E9B38h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E9B38h case   18:*/		return 0x820E9B3C;
		  /* 820E9B3Ch */ case   19:  		/* cmplw CR6, R11, R8 */
		/* 820E9B3Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 820E9B3Ch case   19:*/		return 0x820E9B40;
		  /* 820E9B40h */ case   20:  		/* bc 12, CR6_LT, -40 */
		/* 820E9B40h case   20:*/		if ( regs.CR[6].lt ) { return 0x820E9B18;  }
		/* 820E9B40h case   20:*/		return 0x820E9B44;
	}
	return 0x820E9B44;
} // Block from 820E9AF0h-820E9B44h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820E9B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9B44);
		  /* 820E9B44h */ case    0:  		/* cmplw CR6, R11, R8 */
		/* 820E9B44h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 820E9B44h case    0:*/		return 0x820E9B48;
		  /* 820E9B48h */ case    1:  		/* bc 4, CR6_LT, 40 */
		/* 820E9B48h case    1:*/		if ( !regs.CR[6].lt ) { return 0x820E9B70;  }
		/* 820E9B48h case    1:*/		return 0x820E9B4C;
		  /* 820E9B4Ch */ case    2:  		/* lwz R10, <#[R9 + 16]> */
		/* 820E9B4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000010) );
		/* 820E9B4Ch case    2:*/		return 0x820E9B50;
		  /* 820E9B50h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E9B50h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E9B50h case    3:*/		return 0x820E9B54;
		  /* 820E9B54h */ case    4:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820E9B54h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820E9B54h case    4:*/		return 0x820E9B58;
		  /* 820E9B58h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E9B58h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E9B58h case    5:*/		return 0x820E9B5C;
		  /* 820E9B5Ch */ case    6:  		/* lwzx R7, <#[R11 + R5]> */
		/* 820E9B5Ch case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 820E9B5Ch case    6:*/		return 0x820E9B60;
	}
	return 0x820E9B60;
} // Block from 820E9B44h-820E9B60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E9B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9B60);
		  /* 820E9B60h */ case    0:  		/* lwz R6, <#[R7 + 80]> */
		/* 820E9B60h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + 0x00000050) );
		/* 820E9B60h case    0:*/		return 0x820E9B64;
		  /* 820E9B64h */ case    1:  		/* cmplw CR6, R31, R6 */
		/* 820E9B64h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R6);
		/* 820E9B64h case    1:*/		return 0x820E9B68;
		  /* 820E9B68h */ case    2:  		/* bc 4, CR6_LT, -184 */
		/* 820E9B68h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820E9AB0;  }
		/* 820E9B68h case    2:*/		return 0x820E9B6C;
		  /* 820E9B6Ch */ case    3:  		/* b 8 */
		/* 820E9B6Ch case    3:*/		return 0x820E9B74;
		/* 820E9B6Ch case    3:*/		return 0x820E9B70;
	}
	return 0x820E9B70;
} // Block from 820E9B60h-820E9B70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E9B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9B70);
		  /* 820E9B70h */ case    0:  		/* addi R31, R6, -1 */
		/* 820E9B70h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R6,0xFFFFFFFF);
		/* 820E9B70h case    0:*/		return 0x820E9B74;
	}
	return 0x820E9B74;
} // Block from 820E9B70h-820E9B74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E9B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9B74);
		  /* 820E9B74h */ case    0:  		/* addi R4, R4, 4 */
		/* 820E9B74h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 820E9B74h case    0:*/		return 0x820E9B78;
		  /* 820E9B78h */ case    1:  		/* bc 16, CR0_LT, -268 */
		/* 820E9B78h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E9A6C;  }
		/* 820E9B78h case    1:*/		return 0x820E9B7C;
	}
	return 0x820E9B7C;
} // Block from 820E9B74h-820E9B7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E9B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9B7C);
		  /* 820E9B7Ch */ case    0:  		/* li R29, 0 */
		/* 820E9B7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820E9B7Ch case    0:*/		return 0x820E9B80;
		  /* 820E9B80h */ case    1:  		/* li R10, 0 */
		/* 820E9B80h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E9B80h case    1:*/		return 0x820E9B84;
		  /* 820E9B84h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820E9B84h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E9B84h case    2:*/		return 0x820E9B88;
		  /* 820E9B88h */ case    3:  		/* bc 12, CR6_EQ, 68 */
		/* 820E9B88h case    3:*/		if ( regs.CR[6].eq ) { return 0x820E9BCC;  }
		/* 820E9B88h case    3:*/		return 0x820E9B8C;
		  /* 820E9B8Ch */ case    4:  		/* lwz R9, <#[R28 + 20]> */
		/* 820E9B8Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000014) );
		/* 820E9B8Ch case    4:*/		return 0x820E9B90;
		  /* 820E9B90h */ case    5:  		/* mr R11, R25 */
		/* 820E9B90h case    5:*/		regs.R11 = regs.R25;
		/* 820E9B90h case    5:*/		return 0x820E9B94;
		  /* 820E9B94h */ case    6:  		/* lwz R8, <#[R11]> */
		/* 820E9B94h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E9B94h case    6:*/		return 0x820E9B98;
		  /* 820E9B98h */ case    7:  		/* lwz R8, <#[R8 + 16]> */
		/* 820E9B98h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 820E9B98h case    7:*/		return 0x820E9B9C;
		  /* 820E9B9Ch */ case    8:  		/* lwz R8, <#[R8]> */
		/* 820E9B9Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 820E9B9Ch case    8:*/		return 0x820E9BA0;
		  /* 820E9BA0h */ case    9:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820E9BA0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820E9BA0h case    9:*/		return 0x820E9BA4;
		  /* 820E9BA4h */ case   10:  		/* lwzx R8, <#[R8 + R9]> */
		/* 820E9BA4h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820E9BA4h case   10:*/		return 0x820E9BA8;
		  /* 820E9BA8h */ case   11:  		/* lwz R29, <#[R8 + 72]> */
		/* 820E9BA8h case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R8 + 0x00000048) );
		/* 820E9BA8h case   11:*/		return 0x820E9BAC;
		  /* 820E9BACh */ case   12:  		/* cmplw CR6, R29, R26 */
		/* 820E9BACh case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R26);
		/* 820E9BACh case   12:*/		return 0x820E9BB0;
		  /* 820E9BB0h */ case   13:  		/* bc 12, CR6_LT, 12 */
		/* 820E9BB0h case   13:*/		if ( regs.CR[6].lt ) { return 0x820E9BBC;  }
		/* 820E9BB0h case   13:*/		return 0x820E9BB4;
		  /* 820E9BB4h */ case   14:  		/* cmplw CR6, R29, R31 */
		/* 820E9BB4h case   14:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 820E9BB4h case   14:*/		return 0x820E9BB8;
		  /* 820E9BB8h */ case   15:  		/* bc 4, CR6_GT, 20 */
		/* 820E9BB8h case   15:*/		if ( !regs.CR[6].gt ) { return 0x820E9BCC;  }
		/* 820E9BB8h case   15:*/		return 0x820E9BBC;
	}
	return 0x820E9BBC;
} // Block from 820E9B7Ch-820E9BBCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 820E9BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9BBC);
		  /* 820E9BBCh */ case    0:  		/* addi R10, R10, 1 */
		/* 820E9BBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820E9BBCh case    0:*/		return 0x820E9BC0;
		  /* 820E9BC0h */ case    1:  		/* addi R11, R11, 4 */
		/* 820E9BC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E9BC0h case    1:*/		return 0x820E9BC4;
		  /* 820E9BC4h */ case    2:  		/* cmplw CR6, R10, R30 */
		/* 820E9BC4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 820E9BC4h case    2:*/		return 0x820E9BC8;
		  /* 820E9BC8h */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 820E9BC8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820E9B94;  }
		/* 820E9BC8h case    3:*/		return 0x820E9BCC;
	}
	return 0x820E9BCC;
} // Block from 820E9BBCh-820E9BCCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820E9BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9BCC);
		  /* 820E9BCCh */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 820E9BCCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 820E9BCCh case    0:*/		return 0x820E9BD0;
		  /* 820E9BD0h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 820E9BD0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820E9BF8;  }
		/* 820E9BD0h case    1:*/		return 0x820E9BD4;
		  /* 820E9BD4h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 820E9BD4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 820E9BD4h case    2:*/		return 0x820E9BD8;
		  /* 820E9BD8h */ case    3:  		/* mr R5, R29 */
		/* 820E9BD8h case    3:*/		regs.R5 = regs.R29;
		/* 820E9BD8h case    3:*/		return 0x820E9BDC;
		  /* 820E9BDCh */ case    4:  		/* mr R4, R27 */
		/* 820E9BDCh case    4:*/		regs.R4 = regs.R27;
		/* 820E9BDCh case    4:*/		return 0x820E9BE0;
		  /* 820E9BE0h */ case    5:  		/* mr R3, R28 */
		/* 820E9BE0h case    5:*/		regs.R3 = regs.R28;
		/* 820E9BE0h case    5:*/		return 0x820E9BE4;
		  /* 820E9BE4h */ case    6:  		/* lwz R11, <#[R11 + 52]> */
		/* 820E9BE4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 820E9BE4h case    6:*/		return 0x820E9BE8;
		  /* 820E9BE8h */ case    7:  		/* mtspr CTR, R11 */
		/* 820E9BE8h case    7:*/		regs.CTR = regs.R11;
		/* 820E9BE8h case    7:*/		return 0x820E9BEC;
		  /* 820E9BECh */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 820E9BECh case    8:*/		if ( 1 ) { regs.LR = 0x820E9BF0; return (uint32)regs.CTR; }
		/* 820E9BECh case    8:*/		return 0x820E9BF0;
		  /* 820E9BF0h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820E9BF0h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820E9BF0h case    9:*/		return 0x820E9BF4;
		  /* 820E9BF4h */ case   10:  		/* bc 12, CR0_EQ, 36 */
		/* 820E9BF4h case   10:*/		if ( regs.CR[0].eq ) { return 0x820E9C18;  }
		/* 820E9BF4h case   10:*/		return 0x820E9BF8;
	}
	return 0x820E9BF8;
} // Block from 820E9BCCh-820E9BF8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820E9BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9BF8);
		  /* 820E9BF8h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 820E9BF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820E9BF8h case    0:*/		return 0x820E9BFC;
		  /* 820E9BFCh */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820E9BFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820E9C10;  }
		/* 820E9BFCh case    1:*/		return 0x820E9C00;
		  /* 820E9C00h */ case    2:  		/* mr R3, R27 */
		/* 820E9C00h case    2:*/		regs.R3 = regs.R27;
		/* 820E9C00h case    2:*/		return 0x820E9C04;
		  /* 820E9C04h */ case    3:  		/* bl 1259452 */
		/* 820E9C04h case    3:*/		regs.LR = 0x820E9C08; return 0x8221D3C0;
		/* 820E9C04h case    3:*/		return 0x820E9C08;
		  /* 820E9C08h */ case    4:  		/* mr R3, R27 */
		/* 820E9C08h case    4:*/		regs.R3 = regs.R27;
		/* 820E9C08h case    4:*/		return 0x820E9C0C;
		  /* 820E9C0Ch */ case    5:  		/* bl 76260 */
		/* 820E9C0Ch case    5:*/		regs.LR = 0x820E9C10; return 0x820FC5F0;
		/* 820E9C0Ch case    5:*/		return 0x820E9C10;
	}
	return 0x820E9C10;
} // Block from 820E9BF8h-820E9C10h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820E9C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9C10);
		  /* 820E9C10h */ case    0:  		/* li R3, 1 */
		/* 820E9C10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E9C10h case    0:*/		return 0x820E9C14;
		  /* 820E9C14h */ case    1:  		/* b 148 */
		/* 820E9C14h case    1:*/		return 0x820E9CA8;
		/* 820E9C14h case    1:*/		return 0x820E9C18;
	}
	return 0x820E9C18;
} // Block from 820E9C10h-820E9C18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E9C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9C18);
		  /* 820E9C18h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820E9C18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E9C18h case    0:*/		return 0x820E9C1C;
		  /* 820E9C1Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820E9C1Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820E9C38;  }
		/* 820E9C1Ch case    1:*/		return 0x820E9C20;
		  /* 820E9C20h */ case    2:  		/* addi R11, R25, -4 */
		/* 820E9C20h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820E9C20h case    2:*/		return 0x820E9C24;
		  /* 820E9C24h */ case    3:  		/* mtspr CTR, R30 */
		/* 820E9C24h case    3:*/		regs.CTR = regs.R30;
		/* 820E9C24h case    3:*/		return 0x820E9C28;
		  /* 820E9C28h */ case    4:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820E9C28h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820E9C28h case    4:*/		return 0x820E9C2C;
		  /* 820E9C2Ch */ case    5:  		/* li R9, 0 */
		/* 820E9C2Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820E9C2Ch case    5:*/		return 0x820E9C30;
		  /* 820E9C30h */ case    6:  		/* stw R9, <#[R10]> */
		/* 820E9C30h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E9C30h case    6:*/		return 0x820E9C34;
		  /* 820E9C34h */ case    7:  		/* bc 16, CR0_LT, -12 */
		/* 820E9C34h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820E9C28;  }
		/* 820E9C34h case    7:*/		return 0x820E9C38;
	}
	return 0x820E9C38;
} // Block from 820E9C18h-820E9C38h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E9C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9C38);
		  /* 820E9C38h */ case    0:  		/* lwz R11, <#[R28 + 24]> */
		/* 820E9C38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 820E9C38h case    0:*/		return 0x820E9C3C;
		  /* 820E9C3Ch */ case    1:  		/* rlwinm R31, R29, 2, 0, 29 */
		/* 820E9C3Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R29);
		/* 820E9C3Ch case    1:*/		return 0x820E9C40;
		  /* 820E9C40h */ case    2:  		/* lwzx R30, <#[R31 + R11]> */
		/* 820E9C40h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 820E9C40h case    2:*/		return 0x820E9C44;
		  /* 820E9C44h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 820E9C44h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820E9C44h case    3:*/		return 0x820E9C48;
		  /* 820E9C48h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 820E9C48h case    4:*/		if ( regs.CR[6].eq ) { return 0x820E9C5C;  }
		/* 820E9C48h case    4:*/		return 0x820E9C4C;
		  /* 820E9C4Ch */ case    5:  		/* mr R3, R30 */
		/* 820E9C4Ch case    5:*/		regs.R3 = regs.R30;
		/* 820E9C4Ch case    5:*/		return 0x820E9C50;
		  /* 820E9C50h */ case    6:  		/* bl 1259376 */
		/* 820E9C50h case    6:*/		regs.LR = 0x820E9C54; return 0x8221D3C0;
		/* 820E9C50h case    6:*/		return 0x820E9C54;
		  /* 820E9C54h */ case    7:  		/* mr R3, R30 */
		/* 820E9C54h case    7:*/		regs.R3 = regs.R30;
		/* 820E9C54h case    7:*/		return 0x820E9C58;
		  /* 820E9C58h */ case    8:  		/* bl 76184 */
		/* 820E9C58h case    8:*/		regs.LR = 0x820E9C5C; return 0x820FC5F0;
		/* 820E9C58h case    8:*/		return 0x820E9C5C;
	}
	return 0x820E9C5C;
} // Block from 820E9C38h-820E9C5Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E9C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9C5C);
		  /* 820E9C5Ch */ case    0:  		/* lwz R10, <#[R28 + 24]> */
		/* 820E9C5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 820E9C5Ch case    0:*/		return 0x820E9C60;
		  /* 820E9C60h */ case    1:  		/* li R11, 0 */
		/* 820E9C60h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E9C60h case    1:*/		return 0x820E9C64;
		  /* 820E9C64h */ case    2:  		/* stwx R27, <#[R31 + R10]> */
		/* 820E9C64h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 820E9C64h case    2:*/		return 0x820E9C68;
		  /* 820E9C68h */ case    3:  		/* lwz R10, <#[R27 + 12]> */
		/* 820E9C68h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000000C) );
		/* 820E9C68h case    3:*/		return 0x820E9C6C;
		  /* 820E9C6Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 820E9C6Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820E9C6Ch case    4:*/		return 0x820E9C70;
		  /* 820E9C70h */ case    5:  		/* bc 4, CR6_GT, 52 */
		/* 820E9C70h case    5:*/		if ( !regs.CR[6].gt ) { return 0x820E9CA4;  }
		/* 820E9C70h case    5:*/		return 0x820E9C74;
		  /* 820E9C74h */ case    6:  		/* li R10, 0 */
		/* 820E9C74h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820E9C74h case    6:*/		return 0x820E9C78;
		  /* 820E9C78h */ case    7:  		/* lwz R9, <#[R27 + 16]> */
		/* 820E9C78h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 820E9C78h case    7:*/		return 0x820E9C7C;
		  /* 820E9C7Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 820E9C7Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820E9C7Ch case    8:*/		return 0x820E9C80;
		  /* 820E9C80h */ case    9:  		/* lwz R8, <#[R28 + 20]> */
		/* 820E9C80h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000014) );
		/* 820E9C80h case    9:*/		return 0x820E9C84;
		  /* 820E9C84h */ case   10:  		/* lwzx R9, <#[R10 + R9]> */
		/* 820E9C84h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E9C84h case   10:*/		return 0x820E9C88;
		  /* 820E9C88h */ case   11:  		/* addi R10, R10, 4 */
		/* 820E9C88h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820E9C88h case   11:*/		return 0x820E9C8C;
		  /* 820E9C8Ch */ case   12:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820E9C8Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820E9C8Ch case   12:*/		return 0x820E9C90;
		  /* 820E9C90h */ case   13:  		/* lwzx R9, <#[R9 + R8]> */
		/* 820E9C90h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820E9C90h case   13:*/		return 0x820E9C94;
		  /* 820E9C94h */ case   14:  		/* stw R29, <#[R9 + 72]> */
		/* 820E9C94h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R9 + 0x00000048) );
		/* 820E9C94h case   14:*/		return 0x820E9C98;
		  /* 820E9C98h */ case   15:  		/* lwz R9, <#[R27 + 12]> */
		/* 820E9C98h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000000C) );
		/* 820E9C98h case   15:*/		return 0x820E9C9C;
		  /* 820E9C9Ch */ case   16:  		/* cmplw CR6, R11, R9 */
		/* 820E9C9Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820E9C9Ch case   16:*/		return 0x820E9CA0;
		  /* 820E9CA0h */ case   17:  		/* bc 12, CR6_LT, -40 */
		/* 820E9CA0h case   17:*/		if ( regs.CR[6].lt ) { return 0x820E9C78;  }
		/* 820E9CA0h case   17:*/		return 0x820E9CA4;
	}
	return 0x820E9CA4;
} // Block from 820E9C5Ch-820E9CA4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820E9CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9CA4);
		  /* 820E9CA4h */ case    0:  		/* li R3, 0 */
		/* 820E9CA4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E9CA4h case    0:*/		return 0x820E9CA8;
	}
	return 0x820E9CA8;
} // Block from 820E9CA4h-820E9CA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820E9CA8h
// Function '?MatchDP2Add@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9CA8);
		  /* 820E9CA8h */ case    0:  		/* addi R1, R1, 144 */
		/* 820E9CA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820E9CA8h case    0:*/		return 0x820E9CAC;
		  /* 820E9CACh */ case    1:  		/* b -363024 */
		/* 820E9CACh case    1:*/		return 0x8209129C;
		/* 820E9CACh case    1:*/		return 0x820E9CB0;
	}
	return 0x820E9CB0;
} // Block from 820E9CA8h-820E9CB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E9CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9CB0);
		  /* 820E9CB0h */ case    0:  		/* mfspr R12, LR */
		/* 820E9CB0h case    0:*/		regs.R12 = regs.LR;
		/* 820E9CB0h case    0:*/		return 0x820E9CB4;
		  /* 820E9CB4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820E9CB4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E9CB4h case    1:*/		return 0x820E9CB8;
		  /* 820E9CB8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820E9CB8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E9CB8h case    2:*/		return 0x820E9CBC;
		  /* 820E9CBCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820E9CBCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E9CBCh case    3:*/		return 0x820E9CC0;
		  /* 820E9CC0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820E9CC0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820E9CC0h case    4:*/		return 0x820E9CC4;
		  /* 820E9CC4h */ case    5:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E9CC4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9CC4h case    5:*/		return 0x820E9CC8;
		  /* 820E9CC8h */ case    6:  		/* li R4, 0 */
		/* 820E9CC8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E9CC8h case    6:*/		return 0x820E9CCC;
		  /* 820E9CCCh */ case    7:  		/* lwz R11, <#[R11]> */
		/* 820E9CCCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E9CCCh case    7:*/		return 0x820E9CD0;
		  /* 820E9CD0h */ case    8:  		/* rlwinm. R9, R11, 0, 12, 31 */
		/* 820E9CD0h case    8:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R9,regs.R11);
		/* 820E9CD0h case    8:*/		return 0x820E9CD4;
		  /* 820E9CD4h */ case    9:  		/* bc 12, CR0_EQ, 156 */
		/* 820E9CD4h case    9:*/		if ( regs.CR[0].eq ) { return 0x820E9D70;  }
		/* 820E9CD4h case    9:*/		return 0x820E9CD8;
		  /* 820E9CD8h */ case   10:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E9CD8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9CD8h case   10:*/		return 0x820E9CDC;
		  /* 820E9CDCh */ case   11:  		/* li R8, 0 */
		/* 820E9CDCh case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820E9CDCh case   11:*/		return 0x820E9CE0;
		  /* 820E9CE0h */ case   12:  		/* lwz R6, <#[R3 + 20]> */
		/* 820E9CE0h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000014) );
		/* 820E9CE0h case   12:*/		return 0x820E9CE4;
		  /* 820E9CE4h */ case   13:  		/* rlwinm R7, R9, 2, 0, 29 */
		/* 820E9CE4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 820E9CE4h case   13:*/		return 0x820E9CE8;
		  /* 820E9CE8h */ case   14:  		/* lwz R5, <#[R11 + 8]> */
		/* 820E9CE8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 820E9CE8h case   14:*/		return 0x820E9CEC;
		  /* 820E9CECh */ case   15:  		/* lwzx R11, <#[R8 + R5]> */
		/* 820E9CECh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R5 + 0x00000000) );
		/* 820E9CECh case   15:*/		return 0x820E9CF0;
		  /* 820E9CF0h */ case   16:  		/* lwzx R10, <#[R7 + R5]> */
		/* 820E9CF0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R5 + 0x00000000) );
		/* 820E9CF0h case   16:*/		return 0x820E9CF4;
		  /* 820E9CF4h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E9CF4h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E9CF4h case   17:*/		return 0x820E9CF8;
		  /* 820E9CF8h */ case   18:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E9CF8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E9CF8h case   18:*/		return 0x820E9CFC;
		  /* 820E9CFCh */ case   19:  		/* lwzx R11, <#[R11 + R6]> */
		/* 820E9CFCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820E9CFCh case   19:*/		return 0x820E9D00;
		  /* 820E9D00h */ case   20:  		/* lwzx R10, <#[R10 + R6]> */
		/* 820E9D00h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 820E9D00h case   20:*/		return 0x820E9D04;
		  /* 820E9D04h */ case   21:  		/* lwz R31, <#[R11 + 4]> */
		/* 820E9D04h case   21:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 820E9D04h case   21:*/		return 0x820E9D08;
		  /* 820E9D08h */ case   22:  		/* lwz R30, <#[R10 + 4]> */
		/* 820E9D08h case   22:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000004) );
		/* 820E9D08h case   22:*/		return 0x820E9D0C;
		  /* 820E9D0Ch */ case   23:  		/* cmplw CR6, R31, R30 */
		/* 820E9D0Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820E9D0Ch case   23:*/		return 0x820E9D10;
		  /* 820E9D10h */ case   24:  		/* bc 4, CR6_EQ, 216 */
		/* 820E9D10h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820E9DE8;  }
		/* 820E9D10h case   24:*/		return 0x820E9D14;
		  /* 820E9D14h */ case   25:  		/* lwz R31, <#[R11 + 8]> */
		/* 820E9D14h case   25:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 820E9D14h case   25:*/		return 0x820E9D18;
		  /* 820E9D18h */ case   26:  		/* lwz R30, <#[R10 + 8]> */
		/* 820E9D18h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000008) );
		/* 820E9D18h case   26:*/		return 0x820E9D1C;
		  /* 820E9D1Ch */ case   27:  		/* cmplw CR6, R31, R30 */
		/* 820E9D1Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820E9D1Ch case   27:*/		return 0x820E9D20;
		  /* 820E9D20h */ case   28:  		/* bc 4, CR6_EQ, 200 */
		/* 820E9D20h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820E9DE8;  }
		/* 820E9D20h case   28:*/		return 0x820E9D24;
		  /* 820E9D24h */ case   29:  		/* lwz R31, <#[R11 + 12]> */
		/* 820E9D24h case   29:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 820E9D24h case   29:*/		return 0x820E9D28;
		  /* 820E9D28h */ case   30:  		/* lwz R30, <#[R10 + 12]> */
		/* 820E9D28h case   30:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x0000000C) );
		/* 820E9D28h case   30:*/		return 0x820E9D2C;
		  /* 820E9D2Ch */ case   31:  		/* cmplw CR6, R31, R30 */
		/* 820E9D2Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820E9D2Ch case   31:*/		return 0x820E9D30;
		  /* 820E9D30h */ case   32:  		/* bc 4, CR6_EQ, 184 */
		/* 820E9D30h case   32:*/		if ( !regs.CR[6].eq ) { return 0x820E9DE8;  }
		/* 820E9D30h case   32:*/		return 0x820E9D34;
		  /* 820E9D34h */ case   33:  		/* lwz R31, <#[R11 + 16]> */
		/* 820E9D34h case   33:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 820E9D34h case   33:*/		return 0x820E9D38;
		  /* 820E9D38h */ case   34:  		/* lwz R30, <#[R10 + 16]> */
		/* 820E9D38h case   34:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000010) );
		/* 820E9D38h case   34:*/		return 0x820E9D3C;
		  /* 820E9D3Ch */ case   35:  		/* cmplw CR6, R31, R30 */
		/* 820E9D3Ch case   35:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820E9D3Ch case   35:*/		return 0x820E9D40;
		  /* 820E9D40h */ case   36:  		/* bc 4, CR6_EQ, 168 */
		/* 820E9D40h case   36:*/		if ( !regs.CR[6].eq ) { return 0x820E9DE8;  }
		/* 820E9D40h case   36:*/		return 0x820E9D44;
		  /* 820E9D44h */ case   37:  		/* lwz R10, <#[R10 + 60]> */
		/* 820E9D44h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820E9D44h case   37:*/		return 0x820E9D48;
		  /* 820E9D48h */ case   38:  		/* lis R31, 8 */
		/* 820E9D48h case   38:*/		cpu::op::lis<0>(regs,&regs.R31,0x8);
		/* 820E9D48h case   38:*/		return 0x820E9D4C;
		  /* 820E9D4Ch */ case   39:  		/* lwz R11, <#[R11 + 60]> */
		/* 820E9D4Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E9D4Ch case   39:*/		return 0x820E9D50;
		  /* 820E9D50h */ case   40:  		/* xor R11, R10, R11 */
		/* 820E9D50h case   40:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820E9D50h case   40:*/		return 0x820E9D54;
		  /* 820E9D54h */ case   41:  		/* cmplw CR6, R11, R31 */
		/* 820E9D54h case   41:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 820E9D54h case   41:*/		return 0x820E9D58;
		  /* 820E9D58h */ case   42:  		/* bc 4, CR6_EQ, 144 */
		/* 820E9D58h case   42:*/		if ( !regs.CR[6].eq ) { return 0x820E9DE8;  }
		/* 820E9D58h case   42:*/		return 0x820E9D5C;
		  /* 820E9D5Ch */ case   43:  		/* addi R4, R4, 1 */
		/* 820E9D5Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E9D5Ch case   43:*/		return 0x820E9D60;
		  /* 820E9D60h */ case   44:  		/* addi R8, R8, 4 */
		/* 820E9D60h case   44:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820E9D60h case   44:*/		return 0x820E9D64;
		  /* 820E9D64h */ case   45:  		/* addi R7, R7, 4 */
		/* 820E9D64h case   45:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 820E9D64h case   45:*/		return 0x820E9D68;
		  /* 820E9D68h */ case   46:  		/* cmplw CR6, R4, R9 */
		/* 820E9D68h case   46:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 820E9D68h case   46:*/		return 0x820E9D6C;
		  /* 820E9D6Ch */ case   47:  		/* bc 12, CR6_LT, -128 */
		/* 820E9D6Ch case   47:*/		if ( regs.CR[6].lt ) { return 0x820E9CEC;  }
		/* 820E9D6Ch case   47:*/		return 0x820E9D70;
	}
	return 0x820E9D70;
} // Block from 820E9CB0h-820E9D70h (48 instructions)

//////////////////////////////////////////////////////
// Block at 820E9D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9D70);
		  /* 820E9D70h */ case    0:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E9D70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9D70h case    0:*/		return 0x820E9D74;
		  /* 820E9D74h */ case    1:  		/* mr R10, R9 */
		/* 820E9D74h case    1:*/		regs.R10 = regs.R9;
		/* 820E9D74h case    1:*/		return 0x820E9D78;
		  /* 820E9D78h */ case    2:  		/* li R8, 7 */
		/* 820E9D78h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x7);
		/* 820E9D78h case    2:*/		return 0x820E9D7C;
		  /* 820E9D7Ch */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 820E9D7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820E9D7Ch case    3:*/		return 0x820E9D80;
		  /* 820E9D80h */ case    4:  		/* rlwimi R10, R8, 28, 0, 11 */
		/* 820E9D80h case    4:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R10,regs.R8);
		/* 820E9D80h case    4:*/		return 0x820E9D84;
		  /* 820E9D84h */ case    5:  		/* stw R10, <#[R11]> */
		/* 820E9D84h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820E9D84h case    5:*/		return 0x820E9D88;
		  /* 820E9D88h */ case    6:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E9D88h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9D88h case    6:*/		return 0x820E9D8C;
		  /* 820E9D8Ch */ case    7:  		/* stw R9, <#[R11 + 4]> */
		/* 820E9D8Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820E9D8Ch case    7:*/		return 0x820E9D90;
		  /* 820E9D90h */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 820E9D90h case    8:*/		if ( regs.CR[6].eq ) { return 0x820E9DCC;  }
		/* 820E9D90h case    8:*/		return 0x820E9D94;
		  /* 820E9D94h */ case    9:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E9D94h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9D94h case    9:*/		return 0x820E9D98;
		  /* 820E9D98h */ case   10:  		/* lwz R10, <#[R3 + 20]> */
		/* 820E9D98h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 820E9D98h case   10:*/		return 0x820E9D9C;
		  /* 820E9D9Ch */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 820E9D9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820E9D9Ch case   11:*/		return 0x820E9DA0;
		  /* 820E9DA0h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820E9DA0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820E9DA0h case   12:*/		return 0x820E9DA4;
		  /* 820E9DA4h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820E9DA4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820E9DA4h case   13:*/		return 0x820E9DA8;
		  /* 820E9DA8h */ case   14:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820E9DA8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820E9DA8h case   14:*/		return 0x820E9DAC;
		  /* 820E9DACh */ case   15:  		/* lwz R11, <#[R11 + 60]> */
		/* 820E9DACh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820E9DACh case   15:*/		return 0x820E9DB0;
		  /* 820E9DB0h */ case   16:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 820E9DB0h case   16:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 820E9DB0h case   16:*/		return 0x820E9DB4;
		  /* 820E9DB4h */ case   17:  		/* bc 12, CR0_EQ, 24 */
		/* 820E9DB4h case   17:*/		if ( regs.CR[0].eq ) { return 0x820E9DCC;  }
		/* 820E9DB4h case   17:*/		return 0x820E9DB8;
		  /* 820E9DB8h */ case   18:  		/* lwz R11, <#[R3 + 260]> */
		/* 820E9DB8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9DB8h case   18:*/		return 0x820E9DBC;
		  /* 820E9DBCh */ case   19:  		/* rlwinm R5, R9, 2, 0, 29 */
		/* 820E9DBCh case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R9);
		/* 820E9DBCh case   19:*/		return 0x820E9DC0;
		  /* 820E9DC0h */ case   20:  		/* lwz R3, <#[R11 + 8]> */
		/* 820E9DC0h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820E9DC0h case   20:*/		return 0x820E9DC4;
		  /* 820E9DC4h */ case   21:  		/* add R4, R3, R5 */
		/* 820E9DC4h case   21:*/		cpu::op::add<0>(regs,&regs.R4,regs.R3,regs.R5);
		/* 820E9DC4h case   21:*/		return 0x820E9DC8;
		  /* 820E9DC8h */ case   22:  		/* bl -361496 */
		/* 820E9DC8h case   22:*/		regs.LR = 0x820E9DCC; return 0x820919B0;
		/* 820E9DC8h case   22:*/		return 0x820E9DCC;
	}
	return 0x820E9DCC;
} // Block from 820E9D70h-820E9DCCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 820E9DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9DCC);
		  /* 820E9DCCh */ case    0:  		/* li R3, 0 */
		/* 820E9DCCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E9DCCh case    0:*/		return 0x820E9DD0;
		  /* 820E9DD0h */ case    1:  		/* addi R1, R1, 112 */
		/* 820E9DD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820E9DD0h case    1:*/		return 0x820E9DD4;
		  /* 820E9DD4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 820E9DD4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820E9DD4h case    2:*/		return 0x820E9DD8;
		  /* 820E9DD8h */ case    3:  		/* mtspr LR, R12 */
		/* 820E9DD8h case    3:*/		regs.LR = regs.R12;
		/* 820E9DD8h case    3:*/		return 0x820E9DDC;
		  /* 820E9DDCh */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 820E9DDCh case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820E9DDCh case    4:*/		return 0x820E9DE0;
		  /* 820E9DE0h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 820E9DE0h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820E9DE0h case    5:*/		return 0x820E9DE4;
		  /* 820E9DE4h */ case    6:  		/* bclr 20, CR0_LT */
		/* 820E9DE4h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820E9DE4h case    6:*/		return 0x820E9DE8;
	}
	return 0x820E9DE8;
} // Block from 820E9DCCh-820E9DE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820E9DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9DE8);
		  /* 820E9DE8h */ case    0:  		/* li R3, 1 */
		/* 820E9DE8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E9DE8h case    0:*/		return 0x820E9DEC;
		  /* 820E9DECh */ case    1:  		/* b -28 */
		/* 820E9DECh case    1:*/		return 0x820E9DD0;
		/* 820E9DECh case    1:*/		return 0x820E9DF0;
	}
	return 0x820E9DF0;
} // Block from 820E9DE8h-820E9DF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E9DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9DF0);
		  /* 820E9DF0h */ case    0:  		/* mfspr R12, LR */
		/* 820E9DF0h case    0:*/		regs.R12 = regs.LR;
		/* 820E9DF0h case    0:*/		return 0x820E9DF4;
		  /* 820E9DF4h */ case    1:  		/* bl -363416 */
		/* 820E9DF4h case    1:*/		regs.LR = 0x820E9DF8; return 0x8209125C;
		/* 820E9DF4h case    1:*/		return 0x820E9DF8;
		  /* 820E9DF8h */ case    2:  		/* lwz R30, <#[R3 + 260]> */
		/* 820E9DF8h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9DF8h case    2:*/		return 0x820E9DFC;
		  /* 820E9DFCh */ case    3:  		/* mr R10, R3 */
		/* 820E9DFCh case    3:*/		regs.R10 = regs.R3;
		/* 820E9DFCh case    3:*/		return 0x820E9E00;
		  /* 820E9E00h */ case    4:  		/* li R4, 0 */
		/* 820E9E00h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820E9E00h case    4:*/		return 0x820E9E04;
		  /* 820E9E04h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 820E9E04h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820E9E04h case    5:*/		return 0x820E9E08;
		  /* 820E9E08h */ case    6:  		/* rlwinm. R9, R11, 0, 12, 31 */
		/* 820E9E08h case    6:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R9,regs.R11);
		/* 820E9E08h case    6:*/		return 0x820E9E0C;
		  /* 820E9E0Ch */ case    7:  		/* bc 12, CR0_EQ, 152 */
		/* 820E9E0Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x820E9EA4;  }
		/* 820E9E0Ch case    7:*/		return 0x820E9E10;
		  /* 820E9E10h */ case    8:  		/* lwz R5, <#[R3 + 20]> */
		/* 820E9E10h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000014) );
		/* 820E9E10h case    8:*/		return 0x820E9E14;
		  /* 820E9E14h */ case    9:  		/* rlwinm R31, R9, 1, 0, 30 */
		/* 820E9E14h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R31,regs.R9);
		/* 820E9E14h case    9:*/		return 0x820E9E18;
		  /* 820E9E18h */ case   10:  		/* li R11, 0 */
		/* 820E9E18h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820E9E18h case   10:*/		return 0x820E9E1C;
		  /* 820E9E1Ch */ case   11:  		/* rlwinm R8, R9, 2, 0, 29 */
		/* 820E9E1Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 820E9E1Ch case   11:*/		return 0x820E9E20;
		  /* 820E9E20h */ case   12:  		/* lwz R7, <#[R10 + 260]> */
		/* 820E9E20h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000104) );
		/* 820E9E20h case   12:*/		return 0x820E9E24;
		  /* 820E9E24h */ case   13:  		/* add R6, R31, R4 */
		/* 820E9E24h case   13:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R4);
		/* 820E9E24h case   13:*/		return 0x820E9E28;
		  /* 820E9E28h */ case   14:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820E9E28h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820E9E28h case   14:*/		return 0x820E9E2C;
		  /* 820E9E2Ch */ case   15:  		/* lwz R7, <#[R7 + 8]> */
		/* 820E9E2Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 820E9E2Ch case   15:*/		return 0x820E9E30;
		  /* 820E9E30h */ case   16:  		/* lwzx R3, <#[R11 + R7]> */
		/* 820E9E30h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820E9E30h case   16:*/		return 0x820E9E34;
		  /* 820E9E34h */ case   17:  		/* lwzx R6, <#[R6 + R7]> */
		/* 820E9E34h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 820E9E34h case   17:*/		return 0x820E9E38;
		  /* 820E9E38h */ case   18:  		/* rlwinm R29, R3, 2, 0, 29 */
		/* 820E9E38h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R3);
		/* 820E9E38h case   18:*/		return 0x820E9E3C;
		  /* 820E9E3Ch */ case   19:  		/* lwzx R7, <#[R8 + R7]> */
		/* 820E9E3Ch case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820E9E3Ch case   19:*/		return 0x820E9E40;
		  /* 820E9E40h */ case   20:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820E9E40h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820E9E40h case   20:*/		return 0x820E9E44;
		  /* 820E9E44h */ case   21:  		/* cmplw CR6, R3, R7 */
		/* 820E9E44h case   21:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R7);
		/* 820E9E44h case   21:*/		return 0x820E9E48;
		  /* 820E9E48h */ case   22:  		/* lwzx R3, <#[R29 + R5]> */
		/* 820E9E48h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + regs.R5 + 0x00000000) );
		/* 820E9E48h case   22:*/		return 0x820E9E4C;
		  /* 820E9E4Ch */ case   23:  		/* lwzx R6, <#[R6 + R5]> */
		/* 820E9E4Ch case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R5 + 0x00000000) );
		/* 820E9E4Ch case   23:*/		return 0x820E9E50;
		  /* 820E9E50h */ case   24:  		/* bc 4, CR6_EQ, 120 */
		/* 820E9E50h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820E9EC8;  }
		/* 820E9E50h case   24:*/		return 0x820E9E54;
		  /* 820E9E54h */ case   25:  		/* lwz R29, <#[R30 + 8]> */
		/* 820E9E54h case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 820E9E54h case   25:*/		return 0x820E9E58;
		  /* 820E9E58h */ case   26:  		/* lwz R7, <#[R6 + 56]> */
		/* 820E9E58h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x00000038) );
		/* 820E9E58h case   26:*/		return 0x820E9E5C;
		  /* 820E9E5Ch */ case   27:  		/* lwzx R29, <#[R29 + R11]> */
		/* 820E9E5Ch case   27:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 820E9E5Ch case   27:*/		return 0x820E9E60;
		  /* 820E9E60h */ case   28:  		/* cmplw CR6, R7, R29 */
		/* 820E9E60h case   28:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R29);
		/* 820E9E60h case   28:*/		return 0x820E9E64;
		  /* 820E9E64h */ case   29:  		/* bc 12, CR6_EQ, 24 */
		/* 820E9E64h case   29:*/		if ( regs.CR[6].eq ) { return 0x820E9E7C;  }
		/* 820E9E64h case   29:*/		return 0x820E9E68;
		  /* 820E9E68h */ case   30:  		/* cmpwi CR6, R7, -1 */
		/* 820E9E68h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R7,0xFFFFFFFF);
		/* 820E9E68h case   30:*/		return 0x820E9E6C;
		  /* 820E9E6Ch */ case   31:  		/* bc 12, CR6_EQ, 92 */
		/* 820E9E6Ch case   31:*/		if ( regs.CR[6].eq ) { return 0x820E9EC8;  }
		/* 820E9E6Ch case   31:*/		return 0x820E9E70;
		  /* 820E9E70h */ case   32:  		/* lwz R29, <#[R3 + 56]> */
		/* 820E9E70h case   32:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000038) );
		/* 820E9E70h case   32:*/		return 0x820E9E74;
		  /* 820E9E74h */ case   33:  		/* cmplw CR6, R7, R29 */
		/* 820E9E74h case   33:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R29);
		/* 820E9E74h case   33:*/		return 0x820E9E78;
		  /* 820E9E78h */ case   34:  		/* bc 4, CR6_EQ, 80 */
		/* 820E9E78h case   34:*/		if ( !regs.CR[6].eq ) { return 0x820E9EC8;  }
		/* 820E9E78h case   34:*/		return 0x820E9E7C;
	}
	return 0x820E9E7C;
} // Block from 820E9DF0h-820E9E7Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 820E9E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9E7C);
		  /* 820E9E7Ch */ case    0:  		/* lwz R7, <#[R6 + 60]> */
		/* 820E9E7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x0000003C) );
		/* 820E9E7Ch case    0:*/		return 0x820E9E80;
		  /* 820E9E80h */ case    1:  		/* lwz R6, <#[R3 + 60]> */
		/* 820E9E80h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x0000003C) );
		/* 820E9E80h case    1:*/		return 0x820E9E84;
		  /* 820E9E84h */ case    2:  		/* xoris R7, R7, 8 */
		/* 820E9E84h case    2:*/		cpu::op::xoris<0>(regs,&regs.R7,regs.R7,0x8);
		/* 820E9E84h case    2:*/		return 0x820E9E88;
		  /* 820E9E88h */ case    3:  		/* cmplw CR6, R7, R6 */
		/* 820E9E88h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 820E9E88h case    3:*/		return 0x820E9E8C;
		  /* 820E9E8Ch */ case    4:  		/* bc 4, CR6_EQ, 60 */
		/* 820E9E8Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x820E9EC8;  }
		/* 820E9E8Ch case    4:*/		return 0x820E9E90;
		  /* 820E9E90h */ case    5:  		/* addi R4, R4, 1 */
		/* 820E9E90h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 820E9E90h case    5:*/		return 0x820E9E94;
		  /* 820E9E94h */ case    6:  		/* addi R11, R11, 4 */
		/* 820E9E94h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E9E94h case    6:*/		return 0x820E9E98;
		  /* 820E9E98h */ case    7:  		/* addi R8, R8, 4 */
		/* 820E9E98h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820E9E98h case    7:*/		return 0x820E9E9C;
		  /* 820E9E9Ch */ case    8:  		/* cmplw CR6, R4, R9 */
		/* 820E9E9Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 820E9E9Ch case    8:*/		return 0x820E9EA0;
		  /* 820E9EA0h */ case    9:  		/* bc 12, CR6_LT, -128 */
		/* 820E9EA0h case    9:*/		if ( regs.CR[6].lt ) { return 0x820E9E20;  }
		/* 820E9EA0h case    9:*/		return 0x820E9EA4;
	}
	return 0x820E9EA4;
} // Block from 820E9E7Ch-820E9EA4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820E9EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9EA4);
		  /* 820E9EA4h */ case    0:  		/* lwz R11, <#[R10 + 260]> */
		/* 820E9EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000104) );
		/* 820E9EA4h case    0:*/		return 0x820E9EA8;
		  /* 820E9EA8h */ case    1:  		/* mr R8, R9 */
		/* 820E9EA8h case    1:*/		regs.R8 = regs.R9;
		/* 820E9EA8h case    1:*/		return 0x820E9EAC;
		  /* 820E9EACh */ case    2:  		/* li R7, 7 */
		/* 820E9EACh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x7);
		/* 820E9EACh case    2:*/		return 0x820E9EB0;
		  /* 820E9EB0h */ case    3:  		/* li R3, 0 */
		/* 820E9EB0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E9EB0h case    3:*/		return 0x820E9EB4;
		  /* 820E9EB4h */ case    4:  		/* rlwimi R8, R7, 28, 0, 11 */
		/* 820E9EB4h case    4:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R8,regs.R7);
		/* 820E9EB4h case    4:*/		return 0x820E9EB8;
		  /* 820E9EB8h */ case    5:  		/* stw R8, <#[R11]> */
		/* 820E9EB8h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820E9EB8h case    5:*/		return 0x820E9EBC;
		  /* 820E9EBCh */ case    6:  		/* lwz R11, <#[R10 + 260]> */
		/* 820E9EBCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000104) );
		/* 820E9EBCh case    6:*/		return 0x820E9EC0;
		  /* 820E9EC0h */ case    7:  		/* stw R9, <#[R11 + 4]> */
		/* 820E9EC0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820E9EC0h case    7:*/		return 0x820E9EC4;
		  /* 820E9EC4h */ case    8:  		/* b -363544 */
		/* 820E9EC4h case    8:*/		return 0x820912AC;
		/* 820E9EC4h case    8:*/		return 0x820E9EC8;
	}
	return 0x820E9EC8;
} // Block from 820E9EA4h-820E9EC8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E9EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9EC8);
		  /* 820E9EC8h */ case    0:  		/* li R3, 1 */
		/* 820E9EC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820E9EC8h case    0:*/		return 0x820E9ECC;
		  /* 820E9ECCh */ case    1:  		/* b -8 */
		/* 820E9ECCh case    1:*/		return 0x820E9EC4;
		/* 820E9ECCh case    1:*/		return 0x820E9ED0;
	}
	return 0x820E9ED0;
} // Block from 820E9EC8h-820E9ED0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820E9ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9ED0);
		  /* 820E9ED0h */ case    0:  		/* mfspr R12, LR */
		/* 820E9ED0h case    0:*/		regs.R12 = regs.LR;
		/* 820E9ED0h case    0:*/		return 0x820E9ED4;
		  /* 820E9ED4h */ case    1:  		/* bl -363648 */
		/* 820E9ED4h case    1:*/		regs.LR = 0x820E9ED8; return 0x82091254;
		/* 820E9ED4h case    1:*/		return 0x820E9ED8;
		  /* 820E9ED8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820E9ED8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820E9ED8h case    2:*/		return 0x820E9EDC;
		  /* 820E9EDCh */ case    3:  		/* lwz R27, <#[R3 + 260]> */
		/* 820E9EDCh case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9EDCh case    3:*/		return 0x820E9EE0;
		  /* 820E9EE0h */ case    4:  		/* li R30, 0 */
		/* 820E9EE0h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820E9EE0h case    4:*/		return 0x820E9EE4;
		  /* 820E9EE4h */ case    5:  		/* lwz R11, <#[R27]> */
		/* 820E9EE4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 820E9EE4h case    5:*/		return 0x820E9EE8;
		  /* 820E9EE8h */ case    6:  		/* rlwinm. R8, R11, 0, 12, 31 */
		/* 820E9EE8h case    6:*/		cpu::op::rlwinm<1,0,12,31>(regs,&regs.R8,regs.R11);
		/* 820E9EE8h case    6:*/		return 0x820E9EEC;
		  /* 820E9EECh */ case    7:  		/* bc 12, CR0_EQ, 212 */
		/* 820E9EECh case    7:*/		if ( regs.CR[0].eq ) { return 0x820E9FC0;  }
		/* 820E9EECh case    7:*/		return 0x820E9EF0;
		  /* 820E9EF0h */ case    8:  		/* lwz R7, <#[R3 + 20]> */
		/* 820E9EF0h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000014) );
		/* 820E9EF0h case    8:*/		return 0x820E9EF4;
		  /* 820E9EF4h */ case    9:  		/* rlwinm R28, R8, 1, 0, 30 */
		/* 820E9EF4h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R8);
		/* 820E9EF4h case    9:*/		return 0x820E9EF8;
		  /* 820E9EF8h */ case   10:  		/* li R31, 0 */
		/* 820E9EF8h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820E9EF8h case   10:*/		return 0x820E9EFC;
		  /* 820E9EFCh */ case   11:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 820E9EFCh case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 820E9EFCh case   11:*/		return 0x820E9F00;
		  /* 820E9F00h */ case   12:  		/* lwz R9, <#[R3 + 260]> */
		/* 820E9F00h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9F00h case   12:*/		return 0x820E9F04;
		  /* 820E9F04h */ case   13:  		/* add R10, R28, R30 */
		/* 820E9F04h case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R28,regs.R30);
		/* 820E9F04h case   13:*/		return 0x820E9F08;
		  /* 820E9F08h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820E9F08h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820E9F08h case   14:*/		return 0x820E9F0C;
		  /* 820E9F0Ch */ case   15:  		/* lwz R9, <#[R9 + 8]> */
		/* 820E9F0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 820E9F0Ch case   15:*/		return 0x820E9F10;
		  /* 820E9F10h */ case   16:  		/* lwzx R6, <#[R31 + R9]> */
		/* 820E9F10h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 820E9F10h case   16:*/		return 0x820E9F14;
		  /* 820E9F14h */ case   17:  		/* lwzx R5, <#[R11 + R9]> */
		/* 820E9F14h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E9F14h case   17:*/		return 0x820E9F18;
		  /* 820E9F18h */ case   18:  		/* lwzx R4, <#[R10 + R9]> */
		/* 820E9F18h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820E9F18h case   18:*/		return 0x820E9F1C;
		  /* 820E9F1Ch */ case   19:  		/* rlwinm R29, R6, 2, 0, 29 */
		/* 820E9F1Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R6);
		/* 820E9F1Ch case   19:*/		return 0x820E9F20;
		  /* 820E9F20h */ case   20:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 820E9F20h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 820E9F20h case   20:*/		return 0x820E9F24;
		  /* 820E9F24h */ case   21:  		/* lwzx R9, <#[R11 + R9]> */
		/* 820E9F24h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820E9F24h case   21:*/		return 0x820E9F28;
		  /* 820E9F28h */ case   22:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 820E9F28h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 820E9F28h case   22:*/		return 0x820E9F2C;
		  /* 820E9F2Ch */ case   23:  		/* cmplw CR6, R6, R9 */
		/* 820E9F2Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 820E9F2Ch case   23:*/		return 0x820E9F30;
		  /* 820E9F30h */ case   24:  		/* lwzx R29, <#[R29 + R7]> */
		/* 820E9F30h case   24:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + regs.R7 + 0x00000000) );
		/* 820E9F30h case   24:*/		return 0x820E9F34;
		  /* 820E9F34h */ case   25:  		/* lwzx R9, <#[R5 + R7]> */
		/* 820E9F34h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 820E9F34h case   25:*/		return 0x820E9F38;
		  /* 820E9F38h */ case   26:  		/* lwzx R4, <#[R4 + R7]> */
		/* 820E9F38h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R7 + 0x00000000) );
		/* 820E9F38h case   26:*/		return 0x820E9F3C;
		  /* 820E9F3Ch */ case   27:  		/* bc 4, CR6_EQ, 196 */
		/* 820E9F3Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x820EA000;  }
		/* 820E9F3Ch case   27:*/		return 0x820E9F40;
		  /* 820E9F40h */ case   28:  		/* lwz R5, <#[R27 + 8]> */
		/* 820E9F40h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000008) );
		/* 820E9F40h case   28:*/		return 0x820E9F44;
		  /* 820E9F44h */ case   29:  		/* lwz R6, <#[R9 + 56]> */
		/* 820E9F44h case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000038) );
		/* 820E9F44h case   29:*/		return 0x820E9F48;
		  /* 820E9F48h */ case   30:  		/* lwzx R5, <#[R5 + R10]> */
		/* 820E9F48h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 820E9F48h case   30:*/		return 0x820E9F4C;
		  /* 820E9F4Ch */ case   31:  		/* cmplw CR6, R6, R5 */
		/* 820E9F4Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 820E9F4Ch case   31:*/		return 0x820E9F50;
		  /* 820E9F50h */ case   32:  		/* bc 12, CR6_EQ, 24 */
		/* 820E9F50h case   32:*/		if ( regs.CR[6].eq ) { return 0x820E9F68;  }
		/* 820E9F50h case   32:*/		return 0x820E9F54;
		  /* 820E9F54h */ case   33:  		/* cmpwi CR6, R6, -1 */
		/* 820E9F54h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R6,0xFFFFFFFF);
		/* 820E9F54h case   33:*/		return 0x820E9F58;
		  /* 820E9F58h */ case   34:  		/* bc 12, CR6_EQ, 168 */
		/* 820E9F58h case   34:*/		if ( regs.CR[6].eq ) { return 0x820EA000;  }
		/* 820E9F58h case   34:*/		return 0x820E9F5C;
		  /* 820E9F5Ch */ case   35:  		/* lwz R10, <#[R4 + 56]> */
		/* 820E9F5Ch case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000038) );
		/* 820E9F5Ch case   35:*/		return 0x820E9F60;
		  /* 820E9F60h */ case   36:  		/* cmplw CR6, R6, R10 */
		/* 820E9F60h case   36:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 820E9F60h case   36:*/		return 0x820E9F64;
		  /* 820E9F64h */ case   37:  		/* bc 4, CR6_EQ, 156 */
		/* 820E9F64h case   37:*/		if ( !regs.CR[6].eq ) { return 0x820EA000;  }
		/* 820E9F64h case   37:*/		return 0x820E9F68;
	}
	return 0x820E9F68;
} // Block from 820E9ED0h-820E9F68h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820E9F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9F68);
		  /* 820E9F68h */ case    0:  		/* lwz R10, <#[R9 + 60]> */
		/* 820E9F68h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000003C) );
		/* 820E9F68h case    0:*/		return 0x820E9F6C;
		  /* 820E9F6Ch */ case    1:  		/* lwz R9, <#[R4 + 60]> */
		/* 820E9F6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000003C) );
		/* 820E9F6Ch case    1:*/		return 0x820E9F70;
		  /* 820E9F70h */ case    2:  		/* xoris R10, R10, 8 */
		/* 820E9F70h case    2:*/		cpu::op::xoris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 820E9F70h case    2:*/		return 0x820E9F74;
		  /* 820E9F74h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 820E9F74h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E9F74h case    3:*/		return 0x820E9F78;
		  /* 820E9F78h */ case    4:  		/* bc 4, CR6_EQ, 136 */
		/* 820E9F78h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820EA000;  }
		/* 820E9F78h case    4:*/		return 0x820E9F7C;
		  /* 820E9F7Ch */ case    5:  		/* lwz R10, <#[R29 + 56]> */
		/* 820E9F7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000038) );
		/* 820E9F7Ch case    5:*/		return 0x820E9F80;
		  /* 820E9F80h */ case    6:  		/* cmplw CR6, R10, R5 */
		/* 820E9F80h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 820E9F80h case    6:*/		return 0x820E9F84;
		  /* 820E9F84h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 820E9F84h case    7:*/		if ( regs.CR[6].eq ) { return 0x820E9F9C;  }
		/* 820E9F84h case    7:*/		return 0x820E9F88;
		  /* 820E9F88h */ case    8:  		/* cmpwi CR6, R10, -1 */
		/* 820E9F88h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820E9F88h case    8:*/		return 0x820E9F8C;
		  /* 820E9F8Ch */ case    9:  		/* bc 12, CR6_EQ, 116 */
		/* 820E9F8Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820EA000;  }
		/* 820E9F8Ch case    9:*/		return 0x820E9F90;
		  /* 820E9F90h */ case   10:  		/* lwz R6, <#[R4 + 56]> */
		/* 820E9F90h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000038) );
		/* 820E9F90h case   10:*/		return 0x820E9F94;
		  /* 820E9F94h */ case   11:  		/* cmplw CR6, R10, R6 */
		/* 820E9F94h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 820E9F94h case   11:*/		return 0x820E9F98;
		  /* 820E9F98h */ case   12:  		/* bc 4, CR6_EQ, 104 */
		/* 820E9F98h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820EA000;  }
		/* 820E9F98h case   12:*/		return 0x820E9F9C;
	}
	return 0x820E9F9C;
} // Block from 820E9F68h-820E9F9Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820E9F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9F9C);
		  /* 820E9F9Ch */ case    0:  		/* lwz R10, <#[R29 + 60]> */
		/* 820E9F9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000003C) );
		/* 820E9F9Ch case    0:*/		return 0x820E9FA0;
		  /* 820E9FA0h */ case    1:  		/* xoris R10, R10, 8 */
		/* 820E9FA0h case    1:*/		cpu::op::xoris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 820E9FA0h case    1:*/		return 0x820E9FA4;
		  /* 820E9FA4h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 820E9FA4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820E9FA4h case    2:*/		return 0x820E9FA8;
		  /* 820E9FA8h */ case    3:  		/* bc 4, CR6_EQ, 88 */
		/* 820E9FA8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820EA000;  }
		/* 820E9FA8h case    3:*/		return 0x820E9FAC;
		  /* 820E9FACh */ case    4:  		/* addi R30, R30, 1 */
		/* 820E9FACh case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820E9FACh case    4:*/		return 0x820E9FB0;
		  /* 820E9FB0h */ case    5:  		/* addi R31, R31, 4 */
		/* 820E9FB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820E9FB0h case    5:*/		return 0x820E9FB4;
		  /* 820E9FB4h */ case    6:  		/* addi R11, R11, 4 */
		/* 820E9FB4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820E9FB4h case    6:*/		return 0x820E9FB8;
		  /* 820E9FB8h */ case    7:  		/* cmplw CR6, R30, R8 */
		/* 820E9FB8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R8);
		/* 820E9FB8h case    7:*/		return 0x820E9FBC;
		  /* 820E9FBCh */ case    8:  		/* bc 12, CR6_LT, -188 */
		/* 820E9FBCh case    8:*/		if ( regs.CR[6].lt ) { return 0x820E9F00;  }
		/* 820E9FBCh case    8:*/		return 0x820E9FC0;
	}
	return 0x820E9FC0;
} // Block from 820E9F9Ch-820E9FC0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820E9FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9FC0);
		  /* 820E9FC0h */ case    0:  		/* lwz R10, <#[R3 + 260]> */
		/* 820E9FC0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9FC0h case    0:*/		return 0x820E9FC4;
		  /* 820E9FC4h */ case    1:  		/* mr R9, R8 */
		/* 820E9FC4h case    1:*/		regs.R9 = regs.R8;
		/* 820E9FC4h case    1:*/		return 0x820E9FC8;
		  /* 820E9FC8h */ case    2:  		/* li R7, 7 */
		/* 820E9FC8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x7);
		/* 820E9FC8h case    2:*/		return 0x820E9FCC;
		  /* 820E9FCCh */ case    3:  		/* rlwinm R11, R8, 3, 0, 28 */
		/* 820E9FCCh case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R8);
		/* 820E9FCCh case    3:*/		return 0x820E9FD0;
		  /* 820E9FD0h */ case    4:  		/* rlwimi R9, R7, 28, 0, 11 */
		/* 820E9FD0h case    4:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R9,regs.R7);
		/* 820E9FD0h case    4:*/		return 0x820E9FD4;
		  /* 820E9FD4h */ case    5:  		/* rlwinm R5, R8, 2, 0, 29 */
		/* 820E9FD4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R8);
		/* 820E9FD4h case    5:*/		return 0x820E9FD8;
		  /* 820E9FD8h */ case    6:  		/* stw R9, <#[R10]> */
		/* 820E9FD8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820E9FD8h case    6:*/		return 0x820E9FDC;
		  /* 820E9FDCh */ case    7:  		/* lwz R10, <#[R3 + 260]> */
		/* 820E9FDCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9FDCh case    7:*/		return 0x820E9FE0;
	}
	return 0x820E9FE0;
} // Block from 820E9FC0h-820E9FE0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820E9FE0h
// Function '?ConvertDP2@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820E9FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820E9FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820E9FE0);
		  /* 820E9FE0h */ case    0:  		/* stw R8, <#[R10 + 4]> */
		/* 820E9FE0h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 820E9FE0h case    0:*/		return 0x820E9FE4;
		  /* 820E9FE4h */ case    1:  		/* lwz R10, <#[R3 + 260]> */
		/* 820E9FE4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000104) );
		/* 820E9FE4h case    1:*/		return 0x820E9FE8;
		  /* 820E9FE8h */ case    2:  		/* lwz R3, <#[R10 + 8]> */
		/* 820E9FE8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 820E9FE8h case    2:*/		return 0x820E9FEC;
		  /* 820E9FECh */ case    3:  		/* add R4, R11, R3 */
		/* 820E9FECh case    3:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R3);
		/* 820E9FECh case    3:*/		return 0x820E9FF0;
		  /* 820E9FF0h */ case    4:  		/* bl -362048 */
		/* 820E9FF0h case    4:*/		regs.LR = 0x820E9FF4; return 0x820919B0;
		/* 820E9FF0h case    4:*/		return 0x820E9FF4;
		  /* 820E9FF4h */ case    5:  		/* li R3, 0 */
		/* 820E9FF4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820E9FF4h case    5:*/		return 0x820E9FF8;
		  /* 820E9FF8h */ case    6:  		/* addi R1, R1, 128 */
		/* 820E9FF8h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820E9FF8h case    6:*/		return 0x820E9FFC;
		  /* 820E9FFCh */ case    7:  		/* b -363864 */
		/* 820E9FFCh case    7:*/		return 0x820912A4;
		/* 820E9FFCh case    7:*/		return 0x820EA000;
	}
	return 0x820EA000;
} // Block from 820E9FE0h-820EA000h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820EA000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA000);
		  /* 820EA000h */ case    0:  		/* li R3, 1 */
		/* 820EA000h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820EA000h case    0:*/		return 0x820EA004;
		  /* 820EA004h */ case    1:  		/* b -12 */
		/* 820EA004h case    1:*/		return 0x820E9FF8;
		/* 820EA004h case    1:*/		return 0x820EA008;
	}
	return 0x820EA008;
} // Block from 820EA000h-820EA008h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820EA008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA008);
		  /* 820EA008h */ case    0:  		/* mfspr R12, LR */
		/* 820EA008h case    0:*/		regs.R12 = regs.LR;
		/* 820EA008h case    0:*/		return 0x820EA00C;
		  /* 820EA00Ch */ case    1:  		/* bl -363952 */
		/* 820EA00Ch case    1:*/		regs.LR = 0x820EA010; return 0x8209125C;
		/* 820EA00Ch case    1:*/		return 0x820EA010;
		  /* 820EA010h */ case    2:  		/* lwz R10, <#[R3 + 20]> */
		/* 820EA010h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 820EA010h case    2:*/		return 0x820EA014;
		  /* 820EA014h */ case    3:  		/* rlwinm R11, R4, 2, 0, 29 */
		/* 820EA014h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R4);
		/* 820EA014h case    3:*/		return 0x820EA018;
		  /* 820EA018h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820EA018h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EA018h case    4:*/		return 0x820EA01C;
		  /* 820EA01Ch */ case    5:  		/* lwz R10, <#[R11 + 84]> */
		/* 820EA01Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000054) );
		/* 820EA01Ch case    5:*/		return 0x820EA020;
		  /* 820EA020h */ case    6:  		/* lwz R9, <#[R11 + 72]> */
		/* 820EA020h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000048) );
		/* 820EA020h case    6:*/		return 0x820EA024;
		  /* 820EA024h */ case    7:  		/* mr R8, R10 */
		/* 820EA024h case    7:*/		regs.R8 = regs.R10;
		/* 820EA024h case    7:*/		return 0x820EA028;
		  /* 820EA028h */ case    8:  		/* cmplw CR6, R10, R10 */
		/* 820EA028h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R10);
		/* 820EA028h case    8:*/		return 0x820EA02C;
		  /* 820EA02Ch */ case    9:  		/* bc 4, CR6_EQ, 332 */
		/* 820EA02Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA02Ch case    9:*/		return 0x820EA030;
		  /* 820EA030h */ case   10:  		/* lwz R11, <#[R11 + 88]> */
		/* 820EA030h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 820EA030h case   10:*/		return 0x820EA034;
		  /* 820EA034h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 820EA034h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820EA034h case   11:*/		return 0x820EA038;
		  /* 820EA038h */ case   12:  		/* bc 4, CR6_EQ, 320 */
		/* 820EA038h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA038h case   12:*/		return 0x820EA03C;
		  /* 820EA03Ch */ case   13:  		/* cmpwi CR6, R9, -1 */
		/* 820EA03Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820EA03Ch case   13:*/		return 0x820EA040;
		  /* 820EA040h */ case   14:  		/* bc 12, CR6_EQ, 312 */
		/* 820EA040h case   14:*/		if ( regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA040h case   14:*/		return 0x820EA044;
		  /* 820EA044h */ case   15:  		/* lwz R11, <#[R3 + 24]> */
		/* 820EA044h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 820EA044h case   15:*/		return 0x820EA048;
		  /* 820EA048h */ case   16:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 820EA048h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 820EA048h case   16:*/		return 0x820EA04C;
		  /* 820EA04Ch */ case   17:  		/* lis R9, 8256 */
		/* 820EA04Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R9,0x2040);
		/* 820EA04Ch case   17:*/		return 0x820EA050;
		  /* 820EA050h */ case   18:  		/* lwzx R31, <#[R10 + R11]> */
		/* 820EA050h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820EA050h case   18:*/		return 0x820EA054;
		  /* 820EA054h */ case   19:  		/* lwz R11, <#[R31]> */
		/* 820EA054h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820EA054h case   19:*/		return 0x820EA058;
		  /* 820EA058h */ case   20:  		/* rlwinm R10, R11, 0, 0, 11 */
		/* 820EA058h case   20:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R11);
		/* 820EA058h case   20:*/		return 0x820EA05C;
		  /* 820EA05Ch */ case   21:  		/* cmplw CR6, R10, R9 */
		/* 820EA05Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820EA05Ch case   21:*/		return 0x820EA060;
		  /* 820EA060h */ case   22:  		/* bc 4, CR6_EQ, 280 */
		/* 820EA060h case   22:*/		if ( !regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA060h case   22:*/		return 0x820EA064;
		  /* 820EA064h */ case   23:  		/* lwz R8, <#[R31 + 12]> */
		/* 820EA064h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 820EA064h case   23:*/		return 0x820EA068;
		  /* 820EA068h */ case   24:  		/* rlwinm R7, R11, 0, 12, 31 */
		/* 820EA068h case   24:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R7,regs.R11);
		/* 820EA068h case   24:*/		return 0x820EA06C;
		  /* 820EA06Ch */ case   25:  		/* li R9, -1 */
		/* 820EA06Ch case   25:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 820EA06Ch case   25:*/		return 0x820EA070;
		  /* 820EA070h */ case   26:  		/* li R11, 0 */
		/* 820EA070h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820EA070h case   26:*/		return 0x820EA074;
		  /* 820EA074h */ case   27:  		/* cmplwi CR6, R8, 0 */
		/* 820EA074h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820EA074h case   27:*/		return 0x820EA078;
		  /* 820EA078h */ case   28:  		/* bc 12, CR6_EQ, 256 */
		/* 820EA078h case   28:*/		if ( regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA078h case   28:*/		return 0x820EA07C;
		  /* 820EA07Ch */ case   29:  		/* lwz R30, <#[R31 + 16]> */
		/* 820EA07Ch case   29:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 820EA07Ch case   29:*/		return 0x820EA080;
		  /* 820EA080h */ case   30:  		/* li R10, 0 */
		/* 820EA080h case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820EA080h case   30:*/		return 0x820EA084;
		  /* 820EA084h */ case   31:  		/* lwzx R29, <#[R10 + R30]> */
		/* 820EA084h case   31:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820EA084h case   31:*/		return 0x820EA088;
		  /* 820EA088h */ case   32:  		/* cmplw CR6, R29, R4 */
		/* 820EA088h case   32:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R4);
		/* 820EA088h case   32:*/		return 0x820EA08C;
		  /* 820EA08Ch */ case   33:  		/* bc 4, CR6_EQ, 8 */
		/* 820EA08Ch case   33:*/		if ( !regs.CR[6].eq ) { return 0x820EA094;  }
		/* 820EA08Ch case   33:*/		return 0x820EA090;
		  /* 820EA090h */ case   34:  		/* mr R9, R11 */
		/* 820EA090h case   34:*/		regs.R9 = regs.R11;
		/* 820EA090h case   34:*/		return 0x820EA094;
	}
	return 0x820EA094;
} // Block from 820EA008h-820EA094h (35 instructions)

//////////////////////////////////////////////////////
// Block at 820EA094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA094);
		  /* 820EA094h */ case    0:  		/* addi R11, R11, 1 */
		/* 820EA094h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820EA094h case    0:*/		return 0x820EA098;
		  /* 820EA098h */ case    1:  		/* addi R10, R10, 4 */
		/* 820EA098h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820EA098h case    1:*/		return 0x820EA09C;
		  /* 820EA09Ch */ case    2:  		/* cmplw CR6, R11, R8 */
		/* 820EA09Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 820EA09Ch case    2:*/		return 0x820EA0A0;
		  /* 820EA0A0h */ case    3:  		/* bc 12, CR6_LT, -28 */
		/* 820EA0A0h case    3:*/		if ( regs.CR[6].lt ) { return 0x820EA084;  }
		/* 820EA0A0h case    3:*/		return 0x820EA0A4;
		  /* 820EA0A4h */ case    4:  		/* cmpwi CR6, R9, -1 */
		/* 820EA0A4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820EA0A4h case    4:*/		return 0x820EA0A8;
		  /* 820EA0A8h */ case    5:  		/* bc 12, CR6_EQ, 208 */
		/* 820EA0A8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA0A8h case    5:*/		return 0x820EA0AC;
		  /* 820EA0ACh */ case    6:  		/* add R7, R9, R7 */
		/* 820EA0ACh case    6:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R7);
		/* 820EA0ACh case    6:*/		return 0x820EA0B0;
		  /* 820EA0B0h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 820EA0B0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA0B0h case    7:*/		return 0x820EA0B4;
		  /* 820EA0B4h */ case    8:  		/* rlwinm R8, R9, 2, 0, 29 */
		/* 820EA0B4h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 820EA0B4h case    8:*/		return 0x820EA0B8;
		  /* 820EA0B8h */ case    9:  		/* lwz R10, <#[R3 + 20]> */
		/* 820EA0B8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 820EA0B8h case    9:*/		return 0x820EA0BC;
		  /* 820EA0BCh */ case   10:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820EA0BCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820EA0BCh case   10:*/		return 0x820EA0C0;
		  /* 820EA0C0h */ case   11:  		/* lwz R9, <#[R3 + 16]> */
		/* 820EA0C0h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 820EA0C0h case   11:*/		return 0x820EA0C4;
		  /* 820EA0C4h */ case   12:  		/* add R8, R8, R11 */
		/* 820EA0C4h case   12:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 820EA0C4h case   12:*/		return 0x820EA0C8;
		  /* 820EA0C8h */ case   13:  		/* add R11, R7, R11 */
		/* 820EA0C8h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 820EA0C8h case   13:*/		return 0x820EA0CC;
		  /* 820EA0CCh */ case   14:  		/* lwz R7, <#[R11]> */
		/* 820EA0CCh case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA0CCh case   14:*/		return 0x820EA0D0;
		  /* 820EA0D0h */ case   15:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820EA0D0h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820EA0D0h case   15:*/		return 0x820EA0D4;
		  /* 820EA0D4h */ case   16:  		/* lwzx R7, <#[R7 + R10]> */
		/* 820EA0D4h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 820EA0D4h case   16:*/		return 0x820EA0D8;
		  /* 820EA0D8h */ case   17:  		/* lwz R7, <#[R7 + 4]> */
		/* 820EA0D8h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820EA0D8h case   17:*/		return 0x820EA0DC;
		  /* 820EA0DCh */ case   18:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820EA0DCh case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820EA0DCh case   18:*/		return 0x820EA0E0;
		  /* 820EA0E0h */ case   19:  		/* lwzx R7, <#[R7 + R9]> */
		/* 820EA0E0h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 820EA0E0h case   19:*/		return 0x820EA0E4;
		  /* 820EA0E4h */ case   20:  		/* lwz R7, <#[R7 + 4]> */
		/* 820EA0E4h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820EA0E4h case   20:*/		return 0x820EA0E8;
		  /* 820EA0E8h */ case   21:  		/* rlwinm. R7, R7, 0, 23, 23 */
		/* 820EA0E8h case   21:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R7,regs.R7);
		/* 820EA0E8h case   21:*/		return 0x820EA0EC;
		  /* 820EA0ECh */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 820EA0ECh case   22:*/		if ( regs.CR[0].eq ) { return 0x820EA0F8;  }
		/* 820EA0ECh case   22:*/		return 0x820EA0F0;
		  /* 820EA0F0h */ case   23:  		/* mr R9, R8 */
		/* 820EA0F0h case   23:*/		regs.R9 = regs.R8;
		/* 820EA0F0h case   23:*/		return 0x820EA0F4;
		  /* 820EA0F4h */ case   24:  		/* b 48 */
		/* 820EA0F4h case   24:*/		return 0x820EA124;
		/* 820EA0F4h case   24:*/		return 0x820EA0F8;
	}
	return 0x820EA0F8;
} // Block from 820EA094h-820EA0F8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820EA0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA0F8);
		  /* 820EA0F8h */ case    0:  		/* lwz R7, <#[R8]> */
		/* 820EA0F8h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + 0x00000000) );
		/* 820EA0F8h case    0:*/		return 0x820EA0FC;
		  /* 820EA0FCh */ case    1:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820EA0FCh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820EA0FCh case    1:*/		return 0x820EA100;
		  /* 820EA100h */ case    2:  		/* lwzx R10, <#[R7 + R10]> */
		/* 820EA100h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 820EA100h case    2:*/		return 0x820EA104;
		  /* 820EA104h */ case    3:  		/* lwz R10, <#[R10 + 4]> */
		/* 820EA104h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820EA104h case    3:*/		return 0x820EA108;
		  /* 820EA108h */ case    4:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820EA108h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820EA108h case    4:*/		return 0x820EA10C;
		  /* 820EA10Ch */ case    5:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820EA10Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820EA10Ch case    5:*/		return 0x820EA110;
		  /* 820EA110h */ case    6:  		/* lwz R10, <#[R10 + 4]> */
		/* 820EA110h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820EA110h case    6:*/		return 0x820EA114;
		  /* 820EA114h */ case    7:  		/* rlwinm. R10, R10, 0, 23, 23 */
		/* 820EA114h case    7:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R10,regs.R10);
		/* 820EA114h case    7:*/		return 0x820EA118;
		  /* 820EA118h */ case    8:  		/* bc 12, CR0_EQ, 96 */
		/* 820EA118h case    8:*/		if ( regs.CR[0].eq ) { return 0x820EA178;  }
		/* 820EA118h case    8:*/		return 0x820EA11C;
		  /* 820EA11Ch */ case    9:  		/* mr R9, R11 */
		/* 820EA11Ch case    9:*/		regs.R9 = regs.R11;
		/* 820EA11Ch case    9:*/		return 0x820EA120;
		  /* 820EA120h */ case   10:  		/* mr R11, R8 */
		/* 820EA120h case   10:*/		regs.R11 = regs.R8;
		/* 820EA120h case   10:*/		return 0x820EA124;
	}
	return 0x820EA124;
} // Block from 820EA0F8h-820EA124h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820EA124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA124);
		  /* 820EA124h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 820EA124h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA124h case    0:*/		return 0x820EA128;
		  /* 820EA128h */ case    1:  		/* lis R8, -32256 */
		/* 820EA128h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820EA128h case    1:*/		return 0x820EA12C;
		  /* 820EA12Ch */ case    2:  		/* lwz R10, <#[R3 + 20]> */
		/* 820EA12Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 820EA12Ch case    2:*/		return 0x820EA130;
		  /* 820EA130h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EA130h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EA130h case    3:*/		return 0x820EA134;
		  /* 820EA134h */ case    4:  		/* lfd FR0, <#[R8 + 1848]> */
		/* 820EA134h case    4:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R8 + 0x00000738) );
		/* 820EA134h case    4:*/		return 0x820EA138;
		  /* 820EA138h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820EA138h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EA138h case    5:*/		return 0x820EA13C;
		  /* 820EA13Ch */ case    6:  		/* lfd FR13, <#[R11 + 32]> */
		/* 820EA13Ch case    6:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000020) );
		/* 820EA13Ch case    6:*/		return 0x820EA140;
		  /* 820EA140h */ case    7:  		/* fcmpu CR6, FR13, FR0 */
		/* 820EA140h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820EA140h case    7:*/		return 0x820EA144;
		  /* 820EA144h */ case    8:  		/* bc 4, CR6_EQ, 52 */
		/* 820EA144h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA144h case    8:*/		return 0x820EA148;
		  /* 820EA148h */ case    9:  		/* lwz R11, <#[R9]> */
		/* 820EA148h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820EA148h case    9:*/		return 0x820EA14C;
		  /* 820EA14Ch */ case   10:  		/* lis R9, 8 */
		/* 820EA14Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0x8);
		/* 820EA14Ch case   10:*/		return 0x820EA150;
	}
	return 0x820EA150;
} // Block from 820EA124h-820EA150h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820EA150h
// Function '?PlaceInstruction@CShaderProgram@D3DXShader@@IAAJPAVCInstruction@2@PAPAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA150);
		  /* 820EA150h */ case    0:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 820EA150h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 820EA150h case    0:*/		return 0x820EA154;
		  /* 820EA154h */ case    1:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820EA154h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820EA154h case    1:*/		return 0x820EA158;
		  /* 820EA158h */ case    2:  		/* lwz R10, <#[R10 + 60]> */
		/* 820EA158h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820EA158h case    2:*/		return 0x820EA15C;
		  /* 820EA15Ch */ case    3:  		/* rlwinm R10, R10, 0, 11, 15 */
		/* 820EA15Ch case    3:*/		cpu::op::rlwinm<0,0,11,15>(regs,&regs.R10,regs.R10);
		/* 820EA15Ch case    3:*/		return 0x820EA160;
		  /* 820EA160h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 820EA160h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820EA160h case    4:*/		return 0x820EA164;
		  /* 820EA164h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 820EA164h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820EA178;  }
		/* 820EA164h case    5:*/		return 0x820EA168;
		  /* 820EA168h */ case    6:  		/* stw R11, <#[R6]> */
		/* 820EA168h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 820EA168h case    6:*/		return 0x820EA16C;
		  /* 820EA16Ch */ case    7:  		/* li R3, 0 */
		/* 820EA16Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820EA16Ch case    7:*/		return 0x820EA170;
		  /* 820EA170h */ case    8:  		/* stw R31, <#[R5]> */
		/* 820EA170h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R5 + 0x00000000) );
		/* 820EA170h case    8:*/		return 0x820EA174;
		  /* 820EA174h */ case    9:  		/* b 8 */
		/* 820EA174h case    9:*/		return 0x820EA17C;
		/* 820EA174h case    9:*/		return 0x820EA178;
	}
	return 0x820EA178;
} // Block from 820EA150h-820EA178h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820EA178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA178);
		  /* 820EA178h */ case    0:  		/* li R3, 1 */
		/* 820EA178h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820EA178h case    0:*/		return 0x820EA17C;
	}
	return 0x820EA17C;
} // Block from 820EA178h-820EA17Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EA17Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA17C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA17C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA17C);
		  /* 820EA17Ch */ case    0:  		/* b -364240 */
		/* 820EA17Ch case    0:*/		return 0x820912AC;
		/* 820EA17Ch case    0:*/		return 0x820EA180;
	}
	return 0x820EA180;
} // Block from 820EA17Ch-820EA180h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EA180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA180);
		  /* 820EA180h */ case    0:  		/* mfspr R12, LR */
		/* 820EA180h case    0:*/		regs.R12 = regs.LR;
		/* 820EA180h case    0:*/		return 0x820EA184;
		  /* 820EA184h */ case    1:  		/* bl -364368 */
		/* 820EA184h case    1:*/		regs.LR = 0x820EA188; return 0x82091234;
		/* 820EA184h case    1:*/		return 0x820EA188;
		  /* 820EA188h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 820EA188h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 820EA188h case    2:*/		return 0x820EA18C;
		  /* 820EA18Ch */ case    3:  		/* addi R11, R1, 80 */
		/* 820EA18Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 820EA18Ch case    3:*/		return 0x820EA190;
		  /* 820EA190h */ case    4:  		/* mr R22, R9 */
		/* 820EA190h case    4:*/		regs.R22 = regs.R9;
		/* 820EA190h case    4:*/		return 0x820EA194;
		  /* 820EA194h */ case    5:  		/* lwz R9, <#[R8]> */
		/* 820EA194h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 820EA194h case    5:*/		return 0x820EA198;
		  /* 820EA198h */ case    6:  		/* li R21, 0 */
		/* 820EA198h case    6:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 820EA198h case    6:*/		return 0x820EA19C;
		  /* 820EA19Ch */ case    7:  		/* mr R19, R10 */
		/* 820EA19Ch case    7:*/		regs.R19 = regs.R10;
		/* 820EA19Ch case    7:*/		return 0x820EA1A0;
		  /* 820EA1A0h */ case    8:  		/* lwz R10, <#[R3 + 108]> */
		/* 820EA1A0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000006C) );
		/* 820EA1A0h case    8:*/		return 0x820EA1A4;
		  /* 820EA1A4h */ case    9:  		/* rlwinm R29, R9, 0, 12, 31 */
		/* 820EA1A4h case    9:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R9);
		/* 820EA1A4h case    9:*/		return 0x820EA1A8;
		  /* 820EA1A8h */ case   10:  		/* std R21, <#[R11]> */
		/* 820EA1A8h case   10:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA1A8h case   10:*/		return 0x820EA1AC;
		  /* 820EA1ACh */ case   11:  		/* mr R27, R3 */
		/* 820EA1ACh case   11:*/		regs.R27 = regs.R3;
		/* 820EA1ACh case   11:*/		return 0x820EA1B0;
		  /* 820EA1B0h */ case   12:  		/* std R21, <#[R11 + 8]> */
		/* 820EA1B0h case   12:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 820EA1B0h case   12:*/		return 0x820EA1B4;
		  /* 820EA1B4h */ case   13:  		/* mr R28, R4 */
		/* 820EA1B4h case   13:*/		regs.R28 = regs.R4;
		/* 820EA1B4h case   13:*/		return 0x820EA1B8;
		  /* 820EA1B8h */ case   14:  		/* mr R24, R5 */
		/* 820EA1B8h case   14:*/		regs.R24 = regs.R5;
		/* 820EA1B8h case   14:*/		return 0x820EA1BC;
		  /* 820EA1BCh */ case   15:  		/* mr R26, R6 */
		/* 820EA1BCh case   15:*/		regs.R26 = regs.R6;
		/* 820EA1BCh case   15:*/		return 0x820EA1C0;
		  /* 820EA1C0h */ case   16:  		/* mr R23, R7 */
		/* 820EA1C0h case   16:*/		regs.R23 = regs.R7;
		/* 820EA1C0h case   16:*/		return 0x820EA1C4;
		  /* 820EA1C4h */ case   17:  		/* mr R20, R8 */
		/* 820EA1C4h case   17:*/		regs.R20 = regs.R8;
		/* 820EA1C4h case   17:*/		return 0x820EA1C8;
		  /* 820EA1C8h */ case   18:  		/* rlwinm. R10, R10, 0, 26, 26 */
		/* 820EA1C8h case   18:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R10);
		/* 820EA1C8h case   18:*/		return 0x820EA1CC;
		  /* 820EA1CCh */ case   19:  		/* cmplwi CR6, R29, 0 */
		/* 820EA1CCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820EA1CCh case   19:*/		return 0x820EA1D0;
		  /* 820EA1D0h */ case   20:  		/* bc 4, CR0_EQ, 288 */
		/* 820EA1D0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x820EA2F0;  }
		/* 820EA1D0h case   20:*/		return 0x820EA1D4;
		  /* 820EA1D4h */ case   21:  		/* mr R30, R21 */
		/* 820EA1D4h case   21:*/		regs.R30 = regs.R21;
		/* 820EA1D4h case   21:*/		return 0x820EA1D8;
		  /* 820EA1D8h */ case   22:  		/* bc 12, CR6_EQ, 60 */
		/* 820EA1D8h case   22:*/		if ( regs.CR[6].eq ) { return 0x820EA214;  }
		/* 820EA1D8h case   22:*/		return 0x820EA1DC;
		  /* 820EA1DCh */ case   23:  		/* mr R31, R21 */
		/* 820EA1DCh case   23:*/		regs.R31 = regs.R21;
		/* 820EA1DCh case   23:*/		return 0x820EA1E0;
		  /* 820EA1E0h */ case   24:  		/* addi R11, R1, 96 */
		/* 820EA1E0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 820EA1E0h case   24:*/		return 0x820EA1E4;
		  /* 820EA1E4h */ case   25:  		/* lwzx R4, <#[R31 + R28]> */
		/* 820EA1E4h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + regs.R28 + 0x00000000) );
		/* 820EA1E4h case   25:*/		return 0x820EA1E8;
		  /* 820EA1E8h */ case   26:  		/* addi R10, R1, 80 */
		/* 820EA1E8h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 820EA1E8h case   26:*/		return 0x820EA1EC;
		  /* 820EA1ECh */ case   27:  		/* add R6, R31, R11 */
		/* 820EA1ECh case   27:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R11);
		/* 820EA1ECh case   27:*/		return 0x820EA1F0;
		  /* 820EA1F0h */ case   28:  		/* add R5, R31, R10 */
		/* 820EA1F0h case   28:*/		cpu::op::add<0>(regs,&regs.R5,regs.R31,regs.R10);
		/* 820EA1F0h case   28:*/		return 0x820EA1F4;
		  /* 820EA1F4h */ case   29:  		/* mr R3, R27 */
		/* 820EA1F4h case   29:*/		regs.R3 = regs.R27;
		/* 820EA1F4h case   29:*/		return 0x820EA1F8;
		  /* 820EA1F8h */ case   30:  		/* bl -496 */
		/* 820EA1F8h case   30:*/		regs.LR = 0x820EA1FC; return 0x820EA008;
		/* 820EA1F8h case   30:*/		return 0x820EA1FC;
		  /* 820EA1FCh */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820EA1FCh case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA1FCh case   31:*/		return 0x820EA200;
		  /* 820EA200h */ case   32:  		/* bc 4, CR0_EQ, 880 */
		/* 820EA200h case   32:*/		if ( !regs.CR[0].eq ) { return 0x820EA570;  }
		/* 820EA200h case   32:*/		return 0x820EA204;
		  /* 820EA204h */ case   33:  		/* addi R30, R30, 1 */
		/* 820EA204h case   33:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820EA204h case   33:*/		return 0x820EA208;
		  /* 820EA208h */ case   34:  		/* addi R31, R31, 4 */
		/* 820EA208h case   34:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820EA208h case   34:*/		return 0x820EA20C;
		  /* 820EA20Ch */ case   35:  		/* cmplw CR6, R30, R29 */
		/* 820EA20Ch case   35:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 820EA20Ch case   35:*/		return 0x820EA210;
		  /* 820EA210h */ case   36:  		/* bc 12, CR6_LT, -48 */
		/* 820EA210h case   36:*/		if ( regs.CR[6].lt ) { return 0x820EA1E0;  }
		/* 820EA210h case   36:*/		return 0x820EA214;
	}
	return 0x820EA214;
} // Block from 820EA180h-820EA214h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820EA214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA214);
		  /* 820EA214h */ case    0:  		/* lwz R25, <#[R1 + 80]> */
		/* 820EA214h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000050) );
		/* 820EA214h case    0:*/		return 0x820EA218;
		  /* 820EA218h */ case    1:  		/* mr R6, R21 */
		/* 820EA218h case    1:*/		regs.R6 = regs.R21;
		/* 820EA218h case    1:*/		return 0x820EA21C;
		  /* 820EA21Ch */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 820EA21Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820EA21Ch case    2:*/		return 0x820EA220;
		  /* 820EA220h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 820EA220h case    3:*/		if ( regs.CR[6].eq ) { return 0x820EA288;  }
		/* 820EA220h case    3:*/		return 0x820EA224;
		  /* 820EA224h */ case    4:  		/* addi R10, R1, 96 */
		/* 820EA224h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 820EA224h case    4:*/		return 0x820EA228;
		  /* 820EA228h */ case    5:  		/* lwz R9, <#[R27 + 20]> */
		/* 820EA228h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000014) );
		/* 820EA228h case    5:*/		return 0x820EA22C;
		  /* 820EA22Ch */ case    6:  		/* addi R7, R1, 80 */
		/* 820EA22Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820EA22Ch case    6:*/		return 0x820EA230;
		  /* 820EA230h */ case    7:  		/* mr R11, R26 */
		/* 820EA230h case    7:*/		regs.R11 = regs.R26;
		/* 820EA230h case    7:*/		return 0x820EA234;
		  /* 820EA234h */ case    8:  		/* subf R8, R26, R10 */
		/* 820EA234h case    8:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R26,regs.R10);
		/* 820EA234h case    8:*/		return 0x820EA238;
		  /* 820EA238h */ case    9:  		/* subf R7, R26, R7 */
		/* 820EA238h case    9:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R26,regs.R7);
		/* 820EA238h case    9:*/		return 0x820EA23C;
		  /* 820EA23Ch */ case   10:  		/* lwzx R5, <#[R8 + R11]> */
		/* 820EA23Ch case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820EA23Ch case   10:*/		return 0x820EA240;
		  /* 820EA240h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 820EA240h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA240h case   11:*/		return 0x820EA244;
		  /* 820EA244h */ case   12:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 820EA244h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 820EA244h case   12:*/		return 0x820EA248;
		  /* 820EA248h */ case   13:  		/* lwzx R5, <#[R5 + R9]> */
		/* 820EA248h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 820EA248h case   13:*/		return 0x820EA24C;
		  /* 820EA24Ch */ case   14:  		/* lwz R5, <#[R5 + 56]> */
		/* 820EA24Ch case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000038) );
		/* 820EA24Ch case   14:*/		return 0x820EA250;
		  /* 820EA250h */ case   15:  		/* cmplw CR6, R5, R10 */
		/* 820EA250h case   15:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 820EA250h case   15:*/		return 0x820EA254;
		  /* 820EA254h */ case   16:  		/* bc 4, CR6_EQ, 792 */
		/* 820EA254h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820EA56C;  }
		/* 820EA254h case   16:*/		return 0x820EA258;
		  /* 820EA258h */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820EA258h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820EA258h case   17:*/		return 0x820EA25C;
		  /* 820EA25Ch */ case   18:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820EA25Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820EA25Ch case   18:*/		return 0x820EA260;
		  /* 820EA260h */ case   19:  		/* lwz R10, <#[R10 + 60]> */
		/* 820EA260h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820EA260h case   19:*/		return 0x820EA264;
		  /* 820EA264h */ case   20:  		/* rlwinm. R10, R10, 0, 11, 15 */
		/* 820EA264h case   20:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R10,regs.R10);
		/* 820EA264h case   20:*/		return 0x820EA268;
		  /* 820EA268h */ case   21:  		/* bc 4, CR0_EQ, 772 */
		/* 820EA268h case   21:*/		if ( !regs.CR[0].eq ) { return 0x820EA56C;  }
		/* 820EA268h case   21:*/		return 0x820EA26C;
		  /* 820EA26Ch */ case   22:  		/* lwzx R10, <#[R7 + R11]> */
		/* 820EA26Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820EA26Ch case   22:*/		return 0x820EA270;
		  /* 820EA270h */ case   23:  		/* cmplw CR6, R10, R25 */
		/* 820EA270h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 820EA270h case   23:*/		return 0x820EA274;
		  /* 820EA274h */ case   24:  		/* bc 4, CR6_EQ, 760 */
		/* 820EA274h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820EA56C;  }
		/* 820EA274h case   24:*/		return 0x820EA278;
		  /* 820EA278h */ case   25:  		/* addi R6, R6, 1 */
		/* 820EA278h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820EA278h case   25:*/		return 0x820EA27C;
		  /* 820EA27Ch */ case   26:  		/* addi R11, R11, 4 */
		/* 820EA27Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820EA27Ch case   26:*/		return 0x820EA280;
		  /* 820EA280h */ case   27:  		/* cmplw CR6, R6, R29 */
		/* 820EA280h case   27:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 820EA280h case   27:*/		return 0x820EA284;
		  /* 820EA284h */ case   28:  		/* bc 12, CR6_LT, -72 */
		/* 820EA284h case   28:*/		if ( regs.CR[6].lt ) { return 0x820EA23C;  }
		/* 820EA284h case   28:*/		return 0x820EA288;
	}
	return 0x820EA288;
} // Block from 820EA214h-820EA288h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820EA288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA288);
		  /* 820EA288h */ case    0:  		/* lwz R6, <#[R25 + 12]> */
		/* 820EA288h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x0000000C) );
		/* 820EA288h case    0:*/		return 0x820EA28C;
		  /* 820EA28Ch */ case    1:  		/* mr R7, R21 */
		/* 820EA28Ch case    1:*/		regs.R7 = regs.R21;
		/* 820EA28Ch case    1:*/		return 0x820EA290;
		  /* 820EA290h */ case    2:  		/* cmplwi CR6, R6, 0 */
		/* 820EA290h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820EA290h case    2:*/		return 0x820EA294;
		  /* 820EA294h */ case    3:  		/* bc 12, CR6_EQ, 228 */
		/* 820EA294h case    3:*/		if ( regs.CR[6].eq ) { return 0x820EA378;  }
		/* 820EA294h case    3:*/		return 0x820EA298;
		  /* 820EA298h */ case    4:  		/* mr R9, R21 */
		/* 820EA298h case    4:*/		regs.R9 = regs.R21;
		/* 820EA298h case    4:*/		return 0x820EA29C;
		  /* 820EA29Ch */ case    5:  		/* li R8, 1 */
		/* 820EA29Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820EA29Ch case    5:*/		return 0x820EA2A0;
		  /* 820EA2A0h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 820EA2A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820EA2A0h case    6:*/		return 0x820EA2A4;
		  /* 820EA2A4h */ case    7:  		/* bc 12, CR6_EQ, 712 */
		/* 820EA2A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x820EA56C;  }
		/* 820EA2A4h case    7:*/		return 0x820EA2A8;
		  /* 820EA2A8h */ case    8:  		/* lwz R10, <#[R25 + 16]> */
		/* 820EA2A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000010) );
		/* 820EA2A8h case    8:*/		return 0x820EA2AC;
		  /* 820EA2ACh */ case    9:  		/* mr R11, R28 */
		/* 820EA2ACh case    9:*/		regs.R11 = regs.R28;
		/* 820EA2ACh case    9:*/		return 0x820EA2B0;
		  /* 820EA2B0h */ case   10:  		/* mtspr CTR, R29 */
		/* 820EA2B0h case   10:*/		regs.CTR = regs.R29;
		/* 820EA2B0h case   10:*/		return 0x820EA2B4;
		  /* 820EA2B4h */ case   11:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820EA2B4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820EA2B4h case   11:*/		return 0x820EA2B8;
		  /* 820EA2B8h */ case   12:  		/* lwz R5, <#[R11]> */
		/* 820EA2B8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA2B8h case   12:*/		return 0x820EA2BC;
		  /* 820EA2BCh */ case   13:  		/* addi R11, R11, 4 */
		/* 820EA2BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820EA2BCh case   13:*/		return 0x820EA2C0;
		  /* 820EA2C0h */ case   14:  		/* subf R5, R10, R5 */
		/* 820EA2C0h case   14:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R10,regs.R5);
		/* 820EA2C0h case   14:*/		return 0x820EA2C4;
		  /* 820EA2C4h */ case   15:  		/* subfic R5, R5, 0 */
		/* 820EA2C4h case   15:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R5,0x0);
		/* 820EA2C4h case   15:*/		return 0x820EA2C8;
		  /* 820EA2C8h */ case   16:  		/* subfe R5, R5, R5 */
		/* 820EA2C8h case   16:*/		cpu::op::subfe<0>(regs,&regs.R5,regs.R5,regs.R5);
		/* 820EA2C8h case   16:*/		return 0x820EA2CC;
		  /* 820EA2CCh */ case   17:  		/* and R8, R5, R8 */
		/* 820EA2CCh case   17:*/		cpu::op::and<0>(regs,&regs.R8,regs.R5,regs.R8);
		/* 820EA2CCh case   17:*/		return 0x820EA2D0;
		  /* 820EA2D0h */ case   18:  		/* bc 16, CR0_LT, -24 */
		/* 820EA2D0h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820EA2B8;  }
		/* 820EA2D0h case   18:*/		return 0x820EA2D4;
		  /* 820EA2D4h */ case   19:  		/* cmpwi CR6, R8, 0 */
		/* 820EA2D4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820EA2D4h case   19:*/		return 0x820EA2D8;
		  /* 820EA2D8h */ case   20:  		/* bc 4, CR6_EQ, 660 */
		/* 820EA2D8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820EA56C;  }
		/* 820EA2D8h case   20:*/		return 0x820EA2DC;
		  /* 820EA2DCh */ case   21:  		/* addi R7, R7, 1 */
		/* 820EA2DCh case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820EA2DCh case   21:*/		return 0x820EA2E0;
		  /* 820EA2E0h */ case   22:  		/* addi R9, R9, 4 */
		/* 820EA2E0h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820EA2E0h case   22:*/		return 0x820EA2E4;
		  /* 820EA2E4h */ case   23:  		/* cmplw CR6, R7, R6 */
		/* 820EA2E4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 820EA2E4h case   23:*/		return 0x820EA2E8;
		  /* 820EA2E8h */ case   24:  		/* bc 12, CR6_LT, -76 */
		/* 820EA2E8h case   24:*/		if ( regs.CR[6].lt ) { return 0x820EA29C;  }
		/* 820EA2E8h case   24:*/		return 0x820EA2EC;
		  /* 820EA2ECh */ case   25:  		/* b 140 */
		/* 820EA2ECh case   25:*/		return 0x820EA378;
		/* 820EA2ECh case   25:*/		return 0x820EA2F0;
	}
	return 0x820EA2F0;
} // Block from 820EA288h-820EA2F0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820EA2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA2F0);
		  /* 820EA2F0h */ case    0:  		/* mr R6, R21 */
		/* 820EA2F0h case    0:*/		regs.R6 = regs.R21;
		/* 820EA2F0h case    0:*/		return 0x820EA2F4;
		  /* 820EA2F4h */ case    1:  		/* bc 12, CR6_EQ, 128 */
		/* 820EA2F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820EA374;  }
		/* 820EA2F4h case    1:*/		return 0x820EA2F8;
		  /* 820EA2F8h */ case    2:  		/* lwz R8, <#[R27 + 20]> */
		/* 820EA2F8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000014) );
		/* 820EA2F8h case    2:*/		return 0x820EA2FC;
		  /* 820EA2FCh */ case    3:  		/* mr R11, R26 */
		/* 820EA2FCh case    3:*/		regs.R11 = regs.R26;
		/* 820EA2FCh case    3:*/		return 0x820EA300;
		  /* 820EA300h */ case    4:  		/* subf R7, R26, R28 */
		/* 820EA300h case    4:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R26,regs.R28);
		/* 820EA300h case    4:*/		return 0x820EA304;
		  /* 820EA304h */ case    5:  		/* lwzx R9, <#[R7 + R11]> */
		/* 820EA304h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820EA304h case    5:*/		return 0x820EA308;
		  /* 820EA308h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 820EA308h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA308h case    6:*/		return 0x820EA30C;
		  /* 820EA30Ch */ case    7:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820EA30Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820EA30Ch case    7:*/		return 0x820EA310;
		  /* 820EA310h */ case    8:  		/* lwzx R9, <#[R9 + R8]> */
		/* 820EA310h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820EA310h case    8:*/		return 0x820EA314;
		  /* 820EA314h */ case    9:  		/* lwz R5, <#[R9 + 56]> */
		/* 820EA314h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000038) );
		/* 820EA314h case    9:*/		return 0x820EA318;
		  /* 820EA318h */ case   10:  		/* cmplw CR6, R5, R10 */
		/* 820EA318h case   10:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 820EA318h case   10:*/		return 0x820EA31C;
		  /* 820EA31Ch */ case   11:  		/* bc 4, CR6_EQ, 592 */
		/* 820EA31Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x820EA56C;  }
		/* 820EA31Ch case   11:*/		return 0x820EA320;
		  /* 820EA320h */ case   12:  		/* lwz R9, <#[R9 + 60]> */
		/* 820EA320h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000003C) );
		/* 820EA320h case   12:*/		return 0x820EA324;
		  /* 820EA324h */ case   13:  		/* lis R5, 1 */
		/* 820EA324h case   13:*/		cpu::op::lis<0>(regs,&regs.R5,0x1);
		/* 820EA324h case   13:*/		return 0x820EA328;
		  /* 820EA328h */ case   14:  		/* rlwinm R9, R9, 0, 11, 15 */
		/* 820EA328h case   14:*/		cpu::op::rlwinm<0,0,11,15>(regs,&regs.R9,regs.R9);
		/* 820EA328h case   14:*/		return 0x820EA32C;
		  /* 820EA32Ch */ case   15:  		/* cmplw CR6, R9, R5 */
		/* 820EA32Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R5);
		/* 820EA32Ch case   15:*/		return 0x820EA330;
		  /* 820EA330h */ case   16:  		/* bc 4, CR6_EQ, 572 */
		/* 820EA330h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820EA56C;  }
		/* 820EA330h case   16:*/		return 0x820EA334;
		  /* 820EA334h */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820EA334h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820EA334h case   17:*/		return 0x820EA338;
		  /* 820EA338h */ case   18:  		/* lwzx R10, <#[R10 + R8]> */
		/* 820EA338h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820EA338h case   18:*/		return 0x820EA33C;
		  /* 820EA33Ch */ case   19:  		/* lwz R9, <#[R10 + 60]> */
		/* 820EA33Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000003C) );
		/* 820EA33Ch case   19:*/		return 0x820EA340;
		  /* 820EA340h */ case   20:  		/* rlwinm. R5, R9, 0, 11, 15 */
		/* 820EA340h case   20:*/		cpu::op::rlwinm<1,0,11,15>(regs,&regs.R5,regs.R9);
		/* 820EA340h case   20:*/		return 0x820EA344;
		  /* 820EA344h */ case   21:  		/* bc 4, CR0_EQ, 552 */
		/* 820EA344h case   21:*/		if ( !regs.CR[0].eq ) { return 0x820EA56C;  }
		/* 820EA344h case   21:*/		return 0x820EA348;
		  /* 820EA348h */ case   22:  		/* rlwinm. R9, R9, 0, 22, 22 */
		/* 820EA348h case   22:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R9,regs.R9);
		/* 820EA348h case   22:*/		return 0x820EA34C;
		  /* 820EA34Ch */ case   23:  		/* bc 4, CR0_EQ, 24 */
		/* 820EA34Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x820EA364;  }
		/* 820EA34Ch case   23:*/		return 0x820EA350;
		  /* 820EA350h */ case   24:  		/* lwz R10, <#[R10]> */
		/* 820EA350h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820EA350h case   24:*/		return 0x820EA354;
		  /* 820EA354h */ case   25:  		/* rlwinm. R9, R10, 0, 29, 29 */
		/* 820EA354h case   25:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R10);
		/* 820EA354h case   25:*/		return 0x820EA358;
		  /* 820EA358h */ case   26:  		/* bc 12, CR0_EQ, 532 */
		/* 820EA358h case   26:*/		if ( regs.CR[0].eq ) { return 0x820EA56C;  }
		/* 820EA358h case   26:*/		return 0x820EA35C;
		  /* 820EA35Ch */ case   27:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 820EA35Ch case   27:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 820EA35Ch case   27:*/		return 0x820EA360;
		  /* 820EA360h */ case   28:  		/* bc 12, CR0_EQ, 524 */
		/* 820EA360h case   28:*/		if ( regs.CR[0].eq ) { return 0x820EA56C;  }
		/* 820EA360h case   28:*/		return 0x820EA364;
	}
	return 0x820EA364;
} // Block from 820EA2F0h-820EA364h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820EA364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA364);
		  /* 820EA364h */ case    0:  		/* addi R6, R6, 1 */
		/* 820EA364h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820EA364h case    0:*/		return 0x820EA368;
		  /* 820EA368h */ case    1:  		/* addi R11, R11, 4 */
		/* 820EA368h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820EA368h case    1:*/		return 0x820EA36C;
		  /* 820EA36Ch */ case    2:  		/* cmplw CR6, R6, R29 */
		/* 820EA36Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R29);
		/* 820EA36Ch case    2:*/		return 0x820EA370;
		  /* 820EA370h */ case    3:  		/* bc 12, CR6_LT, -108 */
		/* 820EA370h case    3:*/		if ( regs.CR[6].lt ) { return 0x820EA304;  }
		/* 820EA370h case    3:*/		return 0x820EA374;
	}
	return 0x820EA374;
} // Block from 820EA364h-820EA374h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EA374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA374);
		  /* 820EA374h */ case    0:  		/* lwz R25, <#[R1 + 80]> */
		/* 820EA374h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000050) );
		/* 820EA374h case    0:*/		return 0x820EA378;
	}
	return 0x820EA378;
} // Block from 820EA374h-820EA378h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EA378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA378);
		  /* 820EA378h */ case    0:  		/* li R3, 116 */
		/* 820EA378h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820EA378h case    0:*/		return 0x820EA37C;
		  /* 820EA37Ch */ case    1:  		/* bl 74268 */
		/* 820EA37Ch case    1:*/		regs.LR = 0x820EA380; return 0x820FC598;
		/* 820EA37Ch case    1:*/		return 0x820EA380;
		  /* 820EA380h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820EA380h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820EA380h case    2:*/		return 0x820EA384;
		  /* 820EA384h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 820EA384h case    3:*/		if ( regs.CR[0].eq ) { return 0x820EA394;  }
		/* 820EA384h case    3:*/		return 0x820EA388;
		  /* 820EA388h */ case    4:  		/* bl 72472 */
		/* 820EA388h case    4:*/		regs.LR = 0x820EA38C; return 0x820FBEA0;
		/* 820EA388h case    4:*/		return 0x820EA38C;
		  /* 820EA38Ch */ case    5:  		/* mr R31, R3 */
		/* 820EA38Ch case    5:*/		regs.R31 = regs.R3;
		/* 820EA38Ch case    5:*/		return 0x820EA390;
		  /* 820EA390h */ case    6:  		/* b 8 */
		/* 820EA390h case    6:*/		return 0x820EA398;
		/* 820EA390h case    6:*/		return 0x820EA394;
	}
	return 0x820EA394;
} // Block from 820EA378h-820EA394h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820EA394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA394);
		  /* 820EA394h */ case    0:  		/* mr R31, R21 */
		/* 820EA394h case    0:*/		regs.R31 = regs.R21;
		/* 820EA394h case    0:*/		return 0x820EA398;
	}
	return 0x820EA398;
} // Block from 820EA394h-820EA398h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EA398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA398);
		  /* 820EA398h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820EA398h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820EA398h case    0:*/		return 0x820EA39C;
		  /* 820EA39Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820EA39Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820EA3AC;  }
		/* 820EA39Ch case    1:*/		return 0x820EA3A0;
		  /* 820EA3A0h */ case    2:  		/* lis R3, -32761 */
		/* 820EA3A0h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820EA3A0h case    2:*/		return 0x820EA3A4;
		  /* 820EA3A4h */ case    3:  		/* ori R3, R3, 14 */
		/* 820EA3A4h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820EA3A4h case    3:*/		return 0x820EA3A8;
		  /* 820EA3A8h */ case    4:  		/* b 456 */
		/* 820EA3A8h case    4:*/		return 0x820EA570;
		/* 820EA3A8h case    4:*/		return 0x820EA3AC;
	}
	return 0x820EA3AC;
} // Block from 820EA398h-820EA3ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820EA3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA3AC);
		  /* 820EA3ACh */ case    0:  		/* li R11, 1793 */
		/* 820EA3ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x701);
		/* 820EA3ACh case    0:*/		return 0x820EA3B0;
		  /* 820EA3B0h */ case    1:  		/* mr R4, R29 */
		/* 820EA3B0h case    1:*/		regs.R4 = regs.R29;
		/* 820EA3B0h case    1:*/		return 0x820EA3B4;
		  /* 820EA3B4h */ case    2:  		/* li R7, 0 */
		/* 820EA3B4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820EA3B4h case    2:*/		return 0x820EA3B8;
		  /* 820EA3B8h */ case    3:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 820EA3B8h case    3:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 820EA3B8h case    3:*/		return 0x820EA3BC;
		  /* 820EA3BCh */ case    4:  		/* mr R6, R29 */
		/* 820EA3BCh case    4:*/		regs.R6 = regs.R29;
		/* 820EA3BCh case    4:*/		return 0x820EA3C0;
		  /* 820EA3C0h */ case    5:  		/* mulli R5, R29, 3 */
		/* 820EA3C0h case    5:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 820EA3C0h case    5:*/		return 0x820EA3C4;
		  /* 820EA3C4h */ case    6:  		/* mr R3, R31 */
		/* 820EA3C4h case    6:*/		regs.R3 = regs.R31;
		/* 820EA3C4h case    6:*/		return 0x820EA3C8;
		  /* 820EA3C8h */ case    7:  		/* bl 74344 */
		/* 820EA3C8h case    7:*/		regs.LR = 0x820EA3CC; return 0x820FC630;
		/* 820EA3C8h case    7:*/		return 0x820EA3CC;
		  /* 820EA3CCh */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820EA3CCh case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA3CCh case    8:*/		return 0x820EA3D0;
		  /* 820EA3D0h */ case    9:  		/* bc 12, CR0_LT, 416 */
		/* 820EA3D0h case    9:*/		if ( regs.CR[0].lt ) { return 0x820EA570;  }
		/* 820EA3D0h case    9:*/		return 0x820EA3D4;
		  /* 820EA3D4h */ case   10:  		/* mr R4, R20 */
		/* 820EA3D4h case   10:*/		regs.R4 = regs.R20;
		/* 820EA3D4h case   10:*/		return 0x820EA3D8;
		  /* 820EA3D8h */ case   11:  		/* mr R3, R31 */
		/* 820EA3D8h case   11:*/		regs.R3 = regs.R31;
		/* 820EA3D8h case   11:*/		return 0x820EA3DC;
		  /* 820EA3DCh */ case   12:  		/* bl 72468 */
		/* 820EA3DCh case   12:*/		regs.LR = 0x820EA3E0; return 0x820FBEF0;
		/* 820EA3DCh case   12:*/		return 0x820EA3E0;
		  /* 820EA3E0h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820EA3E0h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA3E0h case   13:*/		return 0x820EA3E4;
		  /* 820EA3E4h */ case   14:  		/* bc 12, CR0_LT, 396 */
		/* 820EA3E4h case   14:*/		if ( regs.CR[0].lt ) { return 0x820EA570;  }
		/* 820EA3E4h case   14:*/		return 0x820EA3E8;
		  /* 820EA3E8h */ case   15:  		/* rlwinm R30, R29, 2, 0, 29 */
		/* 820EA3E8h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R29);
		/* 820EA3E8h case   15:*/		return 0x820EA3EC;
		  /* 820EA3ECh */ case   16:  		/* lwz R4, <#[R22 + 16]> */
		/* 820EA3ECh case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R22 + 0x00000010) );
		/* 820EA3ECh case   16:*/		return 0x820EA3F0;
		  /* 820EA3F0h */ case   17:  		/* lwz R3, <#[R31 + 16]> */
		/* 820EA3F0h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820EA3F0h case   17:*/		return 0x820EA3F4;
		  /* 820EA3F4h */ case   18:  		/* mr R5, R30 */
		/* 820EA3F4h case   18:*/		regs.R5 = regs.R30;
		/* 820EA3F4h case   18:*/		return 0x820EA3F8;
		  /* 820EA3F8h */ case   19:  		/* bl -363080 */
		/* 820EA3F8h case   19:*/		regs.LR = 0x820EA3FC; return 0x820919B0;
		/* 820EA3F8h case   19:*/		return 0x820EA3FC;
		  /* 820EA3FCh */ case   20:  		/* mr R5, R30 */
		/* 820EA3FCh case   20:*/		regs.R5 = regs.R30;
		/* 820EA3FCh case   20:*/		return 0x820EA400;
		  /* 820EA400h */ case   21:  		/* mr R4, R26 */
		/* 820EA400h case   21:*/		regs.R4 = regs.R26;
		/* 820EA400h case   21:*/		return 0x820EA404;
		  /* 820EA404h */ case   22:  		/* lwz R3, <#[R31 + 8]> */
		/* 820EA404h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA404h case   22:*/		return 0x820EA408;
		  /* 820EA408h */ case   23:  		/* bl -363096 */
		/* 820EA408h case   23:*/		regs.LR = 0x820EA40C; return 0x820919B0;
		/* 820EA408h case   23:*/		return 0x820EA40C;
		  /* 820EA40Ch */ case   24:  		/* lwz R11, <#[R31 + 8]> */
		/* 820EA40Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA40Ch case   24:*/		return 0x820EA410;
		  /* 820EA410h */ case   25:  		/* rlwinm R29, R29, 3, 0, 28 */
		/* 820EA410h case   25:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R29,regs.R29);
		/* 820EA410h case   25:*/		return 0x820EA414;
		  /* 820EA414h */ case   26:  		/* mr R5, R30 */
		/* 820EA414h case   26:*/		regs.R5 = regs.R30;
		/* 820EA414h case   26:*/		return 0x820EA418;
		  /* 820EA418h */ case   27:  		/* mr R4, R24 */
		/* 820EA418h case   27:*/		regs.R4 = regs.R24;
		/* 820EA418h case   27:*/		return 0x820EA41C;
		  /* 820EA41Ch */ case   28:  		/* add R3, R29, R11 */
		/* 820EA41Ch case   28:*/		cpu::op::add<0>(regs,&regs.R3,regs.R29,regs.R11);
		/* 820EA41Ch case   28:*/		return 0x820EA420;
		  /* 820EA420h */ case   29:  		/* bl -363120 */
		/* 820EA420h case   29:*/		regs.LR = 0x820EA424; return 0x820919B0;
		/* 820EA420h case   29:*/		return 0x820EA424;
		  /* 820EA424h */ case   30:  		/* lwz R11, <#[R31 + 8]> */
		/* 820EA424h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA424h case   30:*/		return 0x820EA428;
		  /* 820EA428h */ case   31:  		/* mr R5, R30 */
		/* 820EA428h case   31:*/		regs.R5 = regs.R30;
		/* 820EA428h case   31:*/		return 0x820EA42C;
		  /* 820EA42Ch */ case   32:  		/* mr R4, R23 */
		/* 820EA42Ch case   32:*/		regs.R4 = regs.R23;
		/* 820EA42Ch case   32:*/		return 0x820EA430;
		  /* 820EA430h */ case   33:  		/* add R3, R30, R11 */
		/* 820EA430h case   33:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 820EA430h case   33:*/		return 0x820EA434;
		  /* 820EA434h */ case   34:  		/* bl -363140 */
		/* 820EA434h case   34:*/		regs.LR = 0x820EA438; return 0x820919B0;
		/* 820EA434h case   34:*/		return 0x820EA438;
		  /* 820EA438h */ case   35:  		/* lwz R11, <#[R31 + 8]> */
		/* 820EA438h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA438h case   35:*/		return 0x820EA43C;
		  /* 820EA43Ch */ case   36:  		/* lwz R10, <#[R31 + 16]> */
		/* 820EA43Ch case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 820EA43Ch case   36:*/		return 0x820EA440;
		  /* 820EA440h */ case   37:  		/* mr R28, R21 */
		/* 820EA440h case   37:*/		regs.R28 = regs.R21;
		/* 820EA440h case   37:*/		return 0x820EA444;
		  /* 820EA444h */ case   38:  		/* lwz R9, <#[R27 + 20]> */
		/* 820EA444h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000014) );
		/* 820EA444h case   38:*/		return 0x820EA448;
		  /* 820EA448h */ case   39:  		/* lwz R8, <#[R11]> */
		/* 820EA448h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA448h case   39:*/		return 0x820EA44C;
		  /* 820EA44Ch */ case   40:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820EA44Ch case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820EA44Ch case   40:*/		return 0x820EA450;
	}
	return 0x820EA450;
} // Block from 820EA3ACh-820EA450h (41 instructions)

//////////////////////////////////////////////////////
// Block at 820EA450h
// Function '?MatchMAX@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA450);
		  /* 820EA450h */ case    0:  		/* lwz R10, <#[R10]> */
		/* 820EA450h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820EA450h case    0:*/		return 0x820EA454;
		  /* 820EA454h */ case    1:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820EA454h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820EA454h case    1:*/		return 0x820EA458;
		  /* 820EA458h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820EA458h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820EA458h case    2:*/		return 0x820EA45C;
		  /* 820EA45Ch */ case    3:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 820EA45Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 820EA45Ch case    3:*/		return 0x820EA460;
		  /* 820EA460h */ case    4:  		/* lwzx R11, <#[R8 + R9]> */
		/* 820EA460h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820EA460h case    4:*/		return 0x820EA464;
		  /* 820EA464h */ case    5:  		/* lwzx R30, <#[R10 + R9]> */
		/* 820EA464h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820EA464h case    5:*/		return 0x820EA468;
		  /* 820EA468h */ case    6:  		/* lwz R8, <#[R11 + 4]> */
		/* 820EA468h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 820EA468h case    6:*/		return 0x820EA46C;
		  /* 820EA46Ch */ case    7:  		/* lwzx R9, <#[R7 + R9]> */
		/* 820EA46Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 820EA46Ch case    7:*/		return 0x820EA470;
		  /* 820EA470h */ case    8:  		/* lwz R10, <#[R30 + 4]> */
		/* 820EA470h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 820EA470h case    8:*/		return 0x820EA474;
		  /* 820EA474h */ case    9:  		/* cmplw CR6, R10, R8 */
		/* 820EA474h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820EA474h case    9:*/		return 0x820EA478;
		  /* 820EA478h */ case   10:  		/* bc 4, CR6_EQ, 20 */
		/* 820EA478h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820EA48C;  }
		/* 820EA478h case   10:*/		return 0x820EA47C;
		  /* 820EA47Ch */ case   11:  		/* lwz R8, <#[R30 + 12]> */
		/* 820EA47Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000000C) );
		/* 820EA47Ch case   11:*/		return 0x820EA480;
		  /* 820EA480h */ case   12:  		/* lwz R11, <#[R11 + 12]> */
		/* 820EA480h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820EA480h case   12:*/		return 0x820EA484;
		  /* 820EA484h */ case   13:  		/* cmplw CR6, R8, R11 */
		/* 820EA484h case   13:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 820EA484h case   13:*/		return 0x820EA488;
		  /* 820EA488h */ case   14:  		/* bc 12, CR6_EQ, 44 */
		/* 820EA488h case   14:*/		if ( regs.CR[6].eq ) { return 0x820EA4B4;  }
		/* 820EA488h case   14:*/		return 0x820EA48C;
	}
	return 0x820EA48C;
} // Block from 820EA450h-820EA48Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820EA48Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA48C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA48C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA48C);
		  /* 820EA48Ch */ case    0:  		/* lwz R11, <#[R9 + 4]> */
		/* 820EA48Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 820EA48Ch case    0:*/		return 0x820EA490;
		  /* 820EA490h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 820EA490h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820EA490h case    1:*/		return 0x820EA494;
		  /* 820EA494h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820EA494h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820EA4A8;  }
		/* 820EA494h case    2:*/		return 0x820EA498;
		  /* 820EA498h */ case    3:  		/* lwz R11, <#[R30 + 12]> */
		/* 820EA498h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820EA498h case    3:*/		return 0x820EA49C;
		  /* 820EA49Ch */ case    4:  		/* lwz R9, <#[R9 + 12]> */
		/* 820EA49Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 820EA49Ch case    4:*/		return 0x820EA4A0;
		  /* 820EA4A0h */ case    5:  		/* cmplw CR6, R11, R9 */
		/* 820EA4A0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820EA4A0h case    5:*/		return 0x820EA4A4;
		  /* 820EA4A4h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 820EA4A4h case    6:*/		if ( regs.CR[6].eq ) { return 0x820EA4B4;  }
		/* 820EA4A4h case    6:*/		return 0x820EA4A8;
	}
	return 0x820EA4A8;
} // Block from 820EA48Ch-820EA4A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820EA4A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA4A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA4A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA4A8);
		  /* 820EA4A8h */ case    0:  		/* lwz R11, <#[R27 + 136]> */
		/* 820EA4A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000088) );
		/* 820EA4A8h case    0:*/		return 0x820EA4AC;
		  /* 820EA4ACh */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 820EA4ACh case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820EA4ACh case    1:*/		return 0x820EA4B0;
		  /* 820EA4B0h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820EA4B0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820EA4C4;  }
		/* 820EA4B0h case    2:*/		return 0x820EA4B4;
	}
	return 0x820EA4B4;
} // Block from 820EA4A8h-820EA4B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EA4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA4B4);
		  /* 820EA4B4h */ case    0:  		/* lwz R11, <#[R27 + 108]> */
		/* 820EA4B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 820EA4B4h case    0:*/		return 0x820EA4B8;
		  /* 820EA4B8h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820EA4B8h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820EA4B8h case    1:*/		return 0x820EA4BC;
		  /* 820EA4BCh */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 820EA4BCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x820EA4C4;  }
		/* 820EA4BCh case    2:*/		return 0x820EA4C0;
		  /* 820EA4C0h */ case    3:  		/* li R28, 1 */
		/* 820EA4C0h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820EA4C0h case    3:*/		return 0x820EA4C4;
	}
	return 0x820EA4C4;
} // Block from 820EA4B4h-820EA4C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EA4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA4C4);
		  /* 820EA4C4h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 820EA4C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 820EA4C4h case    0:*/		return 0x820EA4C8;
		  /* 820EA4C8h */ case    1:  		/* li R5, 0 */
		/* 820EA4C8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820EA4C8h case    1:*/		return 0x820EA4CC;
		  /* 820EA4CCh */ case    2:  		/* mr R4, R31 */
		/* 820EA4CCh case    2:*/		regs.R4 = regs.R31;
		/* 820EA4CCh case    2:*/		return 0x820EA4D0;
		  /* 820EA4D0h */ case    3:  		/* mr R3, R27 */
		/* 820EA4D0h case    3:*/		regs.R3 = regs.R27;
		/* 820EA4D0h case    3:*/		return 0x820EA4D4;
		  /* 820EA4D4h */ case    4:  		/* lwz R11, <#[R11 + 32]> */
		/* 820EA4D4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 820EA4D4h case    4:*/		return 0x820EA4D8;
		  /* 820EA4D8h */ case    5:  		/* mtspr CTR, R11 */
		/* 820EA4D8h case    5:*/		regs.CTR = regs.R11;
		/* 820EA4D8h case    5:*/		return 0x820EA4DC;
		  /* 820EA4DCh */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 820EA4DCh case    6:*/		if ( 1 ) { regs.LR = 0x820EA4E0; return (uint32)regs.CTR; }
		/* 820EA4DCh case    6:*/		return 0x820EA4E0;
		  /* 820EA4E0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820EA4E0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA4E0h case    7:*/		return 0x820EA4E4;
		  /* 820EA4E4h */ case    8:  		/* bc 4, CR0_EQ, 120 */
		/* 820EA4E4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x820EA55C;  }
		/* 820EA4E4h case    8:*/		return 0x820EA4E8;
		  /* 820EA4E8h */ case    9:  		/* lwz R11, <#[R30 + 4]> */
		/* 820EA4E8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820EA4E8h case    9:*/		return 0x820EA4EC;
		  /* 820EA4ECh */ case   10:  		/* lwz R10, <#[R27 + 16]> */
		/* 820EA4ECh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 820EA4ECh case   10:*/		return 0x820EA4F0;
		  /* 820EA4F0h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EA4F0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EA4F0h case   11:*/		return 0x820EA4F4;
		  /* 820EA4F4h */ case   12:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820EA4F4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EA4F4h case   12:*/		return 0x820EA4F8;
		  /* 820EA4F8h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 820EA4F8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820EA4F8h case   13:*/		return 0x820EA4FC;
		  /* 820EA4FCh */ case   14:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820EA4FCh case   14:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820EA4FCh case   14:*/		return 0x820EA500;
		  /* 820EA500h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 820EA500h case   15:*/		if ( !regs.CR[0].eq ) { return 0x820EA50C;  }
		/* 820EA500h case   15:*/		return 0x820EA504;
		  /* 820EA504h */ case   16:  		/* cmpwi CR6, R28, 0 */
		/* 820EA504h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820EA504h case   16:*/		return 0x820EA508;
		  /* 820EA508h */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 820EA508h case   17:*/		if ( regs.CR[6].eq ) { return 0x820EA518;  }
		/* 820EA508h case   17:*/		return 0x820EA50C;
	}
	return 0x820EA50C;
} // Block from 820EA4C4h-820EA50Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 820EA50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA50C);
		  /* 820EA50Ch */ case    0:  		/* lwz R11, <#[R27 + 108]> */
		/* 820EA50Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 820EA50Ch case    0:*/		return 0x820EA510;
		  /* 820EA510h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820EA510h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820EA510h case    1:*/		return 0x820EA514;
		  /* 820EA514h */ case    2:  		/* bc 12, CR0_EQ, 72 */
		/* 820EA514h case    2:*/		if ( regs.CR[0].eq ) { return 0x820EA55C;  }
		/* 820EA514h case    2:*/		return 0x820EA518;
	}
	return 0x820EA518;
} // Block from 820EA50Ch-820EA518h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EA518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA518);
		  /* 820EA518h */ case    0:  		/* lwz R11, <#[R27 + 24]> */
		/* 820EA518h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 820EA518h case    0:*/		return 0x820EA51C;
		  /* 820EA51Ch */ case    1:  		/* rlwinm R10, R19, 2, 0, 29 */
		/* 820EA51Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R19);
		/* 820EA51Ch case    1:*/		return 0x820EA520;
		  /* 820EA520h */ case    2:  		/* mr R4, R31 */
		/* 820EA520h case    2:*/		regs.R4 = regs.R31;
		/* 820EA520h case    2:*/		return 0x820EA524;
		  /* 820EA524h */ case    3:  		/* lwzx R3, <#[R11 + R10]> */
		/* 820EA524h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EA524h case    3:*/		return 0x820EA528;
		  /* 820EA528h */ case    4:  		/* bl 74792 */
		/* 820EA528h case    4:*/		regs.LR = 0x820EA52C; return 0x820FC950;
		/* 820EA528h case    4:*/		return 0x820EA52C;
		  /* 820EA52Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820EA52Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA52Ch case    5:*/		return 0x820EA530;
		  /* 820EA530h */ case    6:  		/* bc 12, CR0_LT, 64 */
		/* 820EA530h case    6:*/		if ( regs.CR[0].lt ) { return 0x820EA570;  }
		/* 820EA530h case    6:*/		return 0x820EA534;
		  /* 820EA534h */ case    7:  		/* mr R3, R31 */
		/* 820EA534h case    7:*/		regs.R3 = regs.R31;
		/* 820EA534h case    7:*/		return 0x820EA538;
		  /* 820EA538h */ case    8:  		/* bl 1257096 */
		/* 820EA538h case    8:*/		regs.LR = 0x820EA53C; return 0x8221D3C0;
		/* 820EA538h case    8:*/		return 0x820EA53C;
		  /* 820EA53Ch */ case    9:  		/* mr R3, R31 */
		/* 820EA53Ch case    9:*/		regs.R3 = regs.R31;
		/* 820EA53Ch case    9:*/		return 0x820EA540;
		  /* 820EA540h */ case   10:  		/* bl 73904 */
		/* 820EA540h case   10:*/		regs.LR = 0x820EA544; return 0x820FC5F0;
		/* 820EA540h case   10:*/		return 0x820EA544;
		  /* 820EA544h */ case   11:  		/* cmplwi CR6, R25, 0 */
		/* 820EA544h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820EA544h case   11:*/		return 0x820EA548;
		  /* 820EA548h */ case   12:  		/* stw R21, <#[R20]> */
		/* 820EA548h case   12:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R20 + 0x00000000) );
		/* 820EA548h case   12:*/		return 0x820EA54C;
		  /* 820EA54Ch */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 820EA54Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x820EA554;  }
		/* 820EA54Ch case   13:*/		return 0x820EA550;
		  /* 820EA550h */ case   14:  		/* stw R21, <#[R25]> */
		/* 820EA550h case   14:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R25 + 0x00000000) );
		/* 820EA550h case   14:*/		return 0x820EA554;
	}
	return 0x820EA554;
} // Block from 820EA518h-820EA554h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820EA554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA554);
		  /* 820EA554h */ case    0:  		/* li R3, 0 */
		/* 820EA554h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820EA554h case    0:*/		return 0x820EA558;
		  /* 820EA558h */ case    1:  		/* b 24 */
		/* 820EA558h case    1:*/		return 0x820EA570;
		/* 820EA558h case    1:*/		return 0x820EA55C;
	}
	return 0x820EA55C;
} // Block from 820EA554h-820EA55Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820EA55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA55C);
		  /* 820EA55Ch */ case    0:  		/* mr R3, R31 */
		/* 820EA55Ch case    0:*/		regs.R3 = regs.R31;
		/* 820EA55Ch case    0:*/		return 0x820EA560;
		  /* 820EA560h */ case    1:  		/* bl 1257056 */
		/* 820EA560h case    1:*/		regs.LR = 0x820EA564; return 0x8221D3C0;
		/* 820EA560h case    1:*/		return 0x820EA564;
		  /* 820EA564h */ case    2:  		/* mr R3, R31 */
		/* 820EA564h case    2:*/		regs.R3 = regs.R31;
		/* 820EA564h case    2:*/		return 0x820EA568;
		  /* 820EA568h */ case    3:  		/* bl 73864 */
		/* 820EA568h case    3:*/		regs.LR = 0x820EA56C; return 0x820FC5F0;
		/* 820EA568h case    3:*/		return 0x820EA56C;
	}
	return 0x820EA56C;
} // Block from 820EA55Ch-820EA56Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EA56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA56C);
		  /* 820EA56Ch */ case    0:  		/* li R3, 1 */
		/* 820EA56Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820EA56Ch case    0:*/		return 0x820EA570;
	}
	return 0x820EA570;
} // Block from 820EA56Ch-820EA570h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EA570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA570);
		  /* 820EA570h */ case    0:  		/* addi R1, R1, 224 */
		/* 820EA570h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 820EA570h case    0:*/		return 0x820EA574;
		  /* 820EA574h */ case    1:  		/* b -365296 */
		/* 820EA574h case    1:*/		return 0x82091284;
		/* 820EA574h case    1:*/		return 0x820EA578;
	}
	return 0x820EA578;
} // Block from 820EA570h-820EA578h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820EA578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA578);
		  /* 820EA578h */ case    0:  		/* mfspr R12, LR */
		/* 820EA578h case    0:*/		regs.R12 = regs.LR;
		/* 820EA578h case    0:*/		return 0x820EA57C;
		  /* 820EA57Ch */ case    1:  		/* bl -365376 */
		/* 820EA57Ch case    1:*/		regs.LR = 0x820EA580; return 0x8209123C;
		/* 820EA57Ch case    1:*/		return 0x820EA580;
		  /* 820EA580h */ case    2:  		/* stwu R1, <#[R1 - 448]> */
		/* 820EA580h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE40);
		/* 820EA580h case    2:*/		return 0x820EA584;
		  /* 820EA584h */ case    3:  		/* mr R22, R4 */
		/* 820EA584h case    3:*/		regs.R22 = regs.R4;
		/* 820EA584h case    3:*/		return 0x820EA588;
		  /* 820EA588h */ case    4:  		/* lwz R4, <#[R3 + 260]> */
		/* 820EA588h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000104) );
		/* 820EA588h case    4:*/		return 0x820EA58C;
		  /* 820EA58Ch */ case    5:  		/* lis R11, -32254 */
		/* 820EA58Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820EA58Ch case    5:*/		return 0x820EA590;
	}
	return 0x820EA590;
} // Block from 820EA578h-820EA590h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820EA590h
// Function '?MatchABS@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA590);
		  /* 820EA590h */ case    0:  		/* li R10, 3 */
		/* 820EA590h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820EA590h case    0:*/		return 0x820EA594;
		  /* 820EA594h */ case    1:  		/* stw R22, <#[R1 + 84]> */
		/* 820EA594h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 820EA594h case    1:*/		return 0x820EA598;
		  /* 820EA598h */ case    2:  		/* li R8, 1 */
		/* 820EA598h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820EA598h case    2:*/		return 0x820EA59C;
		  /* 820EA59Ch */ case    3:  		/* addi R31, R11, -25352 */
		/* 820EA59Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF9CF8);
		/* 820EA59Ch case    3:*/		return 0x820EA5A0;
		  /* 820EA5A0h */ case    4:  		/* stw R10, <#[R1 + 124]> */
		/* 820EA5A0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 820EA5A0h case    4:*/		return 0x820EA5A4;
		  /* 820EA5A4h */ case    5:  		/* lwz R9, <#[R4]> */
		/* 820EA5A4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 820EA5A4h case    5:*/		return 0x820EA5A8;
		  /* 820EA5A8h */ case    6:  		/* li R23, 0 */
		/* 820EA5A8h case    6:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 820EA5A8h case    6:*/		return 0x820EA5AC;
		  /* 820EA5ACh */ case    7:  		/* li R11, 2 */
		/* 820EA5ACh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820EA5ACh case    7:*/		return 0x820EA5B0;
		  /* 820EA5B0h */ case    8:  		/* stw R8, <#[R1 + 116]> */
		/* 820EA5B0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 820EA5B0h case    8:*/		return 0x820EA5B4;
		  /* 820EA5B4h */ case    9:  		/* rlwinm R26, R9, 0, 12, 31 */
		/* 820EA5B4h case    9:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R9);
		/* 820EA5B4h case    9:*/		return 0x820EA5B8;
		  /* 820EA5B8h */ case   10:  		/* stw R23, <#[R1 + 96]> */
		/* 820EA5B8h case   10:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000060) );
		/* 820EA5B8h case   10:*/		return 0x820EA5BC;
		  /* 820EA5BCh */ case   11:  		/* addi R5, R31, -96 */
		/* 820EA5BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0xFFFFFFA0);
		/* 820EA5BCh case   11:*/		return 0x820EA5C0;
		  /* 820EA5C0h */ case   12:  		/* stw R23, <#[R1 + 112]> */
		/* 820EA5C0h case   12:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000070) );
		/* 820EA5C0h case   12:*/		return 0x820EA5C4;
		  /* 820EA5C4h */ case   13:  		/* addi R9, R1, 112 */
		/* 820EA5C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820EA5C4h case   13:*/		return 0x820EA5C8;
		  /* 820EA5C8h */ case   14:  		/* stw R11, <#[R1 + 120]> */
		/* 820EA5C8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 820EA5C8h case   14:*/		return 0x820EA5CC;
		  /* 820EA5CCh */ case   15:  		/* addi R8, R1, 192 */
		/* 820EA5CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820EA5CCh case   15:*/		return 0x820EA5D0;
		  /* 820EA5D0h */ case   16:  		/* addi R7, R1, 96 */
		/* 820EA5D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820EA5D0h case   16:*/		return 0x820EA5D4;
		  /* 820EA5D4h */ case   17:  		/* addi R6, R1, 128 */
		/* 820EA5D4h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820EA5D4h case   17:*/		return 0x820EA5D8;
		  /* 820EA5D8h */ case   18:  		/* mr R10, R26 */
		/* 820EA5D8h case   18:*/		regs.R10 = regs.R26;
		/* 820EA5D8h case   18:*/		return 0x820EA5DC;
		  /* 820EA5DCh */ case   19:  		/* mr R28, R3 */
		/* 820EA5DCh case   19:*/		regs.R28 = regs.R3;
		/* 820EA5DCh case   19:*/		return 0x820EA5E0;
		  /* 820EA5E0h */ case   20:  		/* bl -26976 */
		/* 820EA5E0h case   20:*/		regs.LR = 0x820EA5E4; return 0x820E3C80;
		/* 820EA5E0h case   20:*/		return 0x820EA5E4;
		  /* 820EA5E4h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820EA5E4h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA5E4h case   21:*/		return 0x820EA5E8;
		  /* 820EA5E8h */ case   22:  		/* bc 12, CR0_EQ, 52 */
		/* 820EA5E8h case   22:*/		if ( regs.CR[0].eq ) { return 0x820EA61C;  }
		/* 820EA5E8h case   22:*/		return 0x820EA5EC;
		  /* 820EA5ECh */ case   23:  		/* mr R5, R31 */
		/* 820EA5ECh case   23:*/		regs.R5 = regs.R31;
		/* 820EA5ECh case   23:*/		return 0x820EA5F0;
		  /* 820EA5F0h */ case   24:  		/* lwz R4, <#[R28 + 260]> */
		/* 820EA5F0h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820EA5F0h case   24:*/		return 0x820EA5F4;
		  /* 820EA5F4h */ case   25:  		/* mr R10, R26 */
		/* 820EA5F4h case   25:*/		regs.R10 = regs.R26;
		/* 820EA5F4h case   25:*/		return 0x820EA5F8;
		  /* 820EA5F8h */ case   26:  		/* stw R22, <#[R1 + 84]> */
		/* 820EA5F8h case   26:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 820EA5F8h case   26:*/		return 0x820EA5FC;
		  /* 820EA5FCh */ case   27:  		/* addi R9, R1, 112 */
		/* 820EA5FCh case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 820EA5FCh case   27:*/		return 0x820EA600;
		  /* 820EA600h */ case   28:  		/* addi R8, R1, 192 */
		/* 820EA600h case   28:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820EA600h case   28:*/		return 0x820EA604;
		  /* 820EA604h */ case   29:  		/* addi R7, R1, 96 */
		/* 820EA604h case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820EA604h case   29:*/		return 0x820EA608;
		  /* 820EA608h */ case   30:  		/* addi R6, R1, 128 */
		/* 820EA608h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 820EA608h case   30:*/		return 0x820EA60C;
		  /* 820EA60Ch */ case   31:  		/* mr R3, R28 */
		/* 820EA60Ch case   31:*/		regs.R3 = regs.R28;
		/* 820EA60Ch case   31:*/		return 0x820EA610;
		  /* 820EA610h */ case   32:  		/* bl -27024 */
		/* 820EA610h case   32:*/		regs.LR = 0x820EA614; return 0x820E3C80;
		/* 820EA610h case   32:*/		return 0x820EA614;
		  /* 820EA614h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 820EA614h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA614h case   33:*/		return 0x820EA618;
		  /* 820EA618h */ case   34:  		/* bc 4, CR0_EQ, 672 */
		/* 820EA618h case   34:*/		if ( !regs.CR[0].eq ) { return 0x820EA8B8;  }
		/* 820EA618h case   34:*/		return 0x820EA61C;
	}
	return 0x820EA61C;
} // Block from 820EA590h-820EA61Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 820EA61Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA61C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA61C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA61C);
		  /* 820EA61Ch */ case    0:  		/* mr R24, R23 */
		/* 820EA61Ch case    0:*/		regs.R24 = regs.R23;
		/* 820EA61Ch case    0:*/		return 0x820EA620;
		  /* 820EA620h */ case    1:  		/* addi R25, R1, 208 */
		/* 820EA620h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0xD0);
		/* 820EA620h case    1:*/		return 0x820EA624;
		  /* 820EA624h */ case    2:  		/* lis R21, 8 */
		/* 820EA624h case    2:*/		cpu::op::lis<0>(regs,&regs.R21,0x8);
		/* 820EA624h case    2:*/		return 0x820EA628;
		  /* 820EA628h */ case    3:  		/* mr R8, R23 */
		/* 820EA628h case    3:*/		regs.R8 = regs.R23;
		/* 820EA628h case    3:*/		return 0x820EA62C;
		  /* 820EA62Ch */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 820EA62Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820EA62Ch case    4:*/		return 0x820EA630;
		  /* 820EA630h */ case    5:  		/* bc 12, CR6_EQ, 200 */
		/* 820EA630h case    5:*/		if ( regs.CR[6].eq ) { return 0x820EA6F8;  }
		/* 820EA630h case    5:*/		return 0x820EA634;
		  /* 820EA634h */ case    6:  		/* lwz R11, <#[R28 + 108]> */
		/* 820EA634h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000006C) );
		/* 820EA634h case    6:*/		return 0x820EA638;
		  /* 820EA638h */ case    7:  		/* addi R7, R1, 240 */
		/* 820EA638h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF0);
		/* 820EA638h case    7:*/		return 0x820EA63C;
		  /* 820EA63Ch */ case    8:  		/* lwz R6, <#[R28 + 20]> */
		/* 820EA63Ch case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000014) );
		/* 820EA63Ch case    8:*/		return 0x820EA640;
		  /* 820EA640h */ case    9:  		/* rlwinm R11, R11, 26, 0, 5 */
		/* 820EA640h case    9:*/		cpu::op::rlwinm<0,26,0,5>(regs,&regs.R11,regs.R11);
		/* 820EA640h case    9:*/		return 0x820EA644;
		  /* 820EA644h */ case   10:  		/* srawi R5, R11, 31 */
		/* 820EA644h case   10:*/		cpu::op::srawi<0,31>(regs,&regs.R5,regs.R11);
		/* 820EA644h case   10:*/		return 0x820EA648;
		  /* 820EA648h */ case   11:  		/* add R11, R24, R8 */
		/* 820EA648h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R24,regs.R8);
		/* 820EA648h case   11:*/		return 0x820EA64C;
		  /* 820EA64Ch */ case   12:  		/* lwz R10, <#[R7]> */
		/* 820EA64Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 820EA64Ch case   12:*/		return 0x820EA650;
		  /* 820EA650h */ case   13:  		/* addi R9, R1, 192 */
		/* 820EA650h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xC0);
		/* 820EA650h case   13:*/		return 0x820EA654;
		  /* 820EA654h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EA654h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EA654h case   14:*/		return 0x820EA658;
		  /* 820EA658h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820EA658h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820EA658h case   15:*/		return 0x820EA65C;
		  /* 820EA65Ch */ case   16:  		/* cmpwi CR6, R5, 0 */
		/* 820EA65Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 820EA65Ch case   16:*/		return 0x820EA660;
		  /* 820EA660h */ case   17:  		/* lwzx R9, <#[R11 + R9]> */
		/* 820EA660h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820EA660h case   17:*/		return 0x820EA664;
		  /* 820EA664h */ case   18:  		/* lwzx R11, <#[R10 + R6]> */
		/* 820EA664h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 820EA664h case   18:*/		return 0x820EA668;
		  /* 820EA668h */ case   19:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 820EA668h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 820EA668h case   19:*/		return 0x820EA66C;
		  /* 820EA66Ch */ case   20:  		/* lwzx R10, <#[R10 + R6]> */
		/* 820EA66Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 820EA66Ch case   20:*/		return 0x820EA670;
	}
	return 0x820EA670;
} // Block from 820EA61Ch-820EA670h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820EA670h
// Function '?MatchABS2@CShaderProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA670);
		  /* 820EA670h */ case    0:  		/* bc 12, CR6_EQ, 36 */
		/* 820EA670h case    0:*/		if ( regs.CR[6].eq ) { return 0x820EA694;  }
		/* 820EA670h case    0:*/		return 0x820EA674;
		  /* 820EA674h */ case    1:  		/* lwz R4, <#[R11 + 60]> */
		/* 820EA674h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 820EA674h case    1:*/		return 0x820EA678;
		  /* 820EA678h */ case    2:  		/* lwz R10, <#[R10 + 60]> */
		/* 820EA678h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820EA678h case    2:*/		return 0x820EA67C;
		  /* 820EA67Ch */ case    3:  		/* xor R10, R4, R10 */
		/* 820EA67Ch case    3:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R4,regs.R10);
		/* 820EA67Ch case    3:*/		return 0x820EA680;
		  /* 820EA680h */ case    4:  		/* cmplw CR6, R10, R21 */
		/* 820EA680h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 820EA680h case    4:*/		return 0x820EA684;
		  /* 820EA684h */ case    5:  		/* bc 4, CR6_EQ, 116 */
		/* 820EA684h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820EA6F8;  }
		/* 820EA684h case    5:*/		return 0x820EA688;
		  /* 820EA688h */ case    6:  		/* lwz R11, <#[R11 + 56]> */
		/* 820EA688h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 820EA688h case    6:*/		return 0x820EA68C;
		  /* 820EA68Ch */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 820EA68Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820EA68Ch case    7:*/		return 0x820EA690;
		  /* 820EA690h */ case    8:  		/* b 84 */
		/* 820EA690h case    8:*/		return 0x820EA6E4;
		/* 820EA690h case    8:*/		return 0x820EA694;
	}
	return 0x820EA694;
} // Block from 820EA670h-820EA694h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820EA694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA694);
		  /* 820EA694h */ case    0:  		/* lwz R9, <#[R10 + 4]> */
		/* 820EA694h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820EA694h case    0:*/		return 0x820EA698;
		  /* 820EA698h */ case    1:  		/* lwz R4, <#[R11 + 4]> */
		/* 820EA698h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 820EA698h case    1:*/		return 0x820EA69C;
		  /* 820EA69Ch */ case    2:  		/* cmplw CR6, R9, R4 */
		/* 820EA69Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 820EA69Ch case    2:*/		return 0x820EA6A0;
		  /* 820EA6A0h */ case    3:  		/* bc 4, CR6_EQ, 88 */
		/* 820EA6A0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820EA6F8;  }
		/* 820EA6A0h case    3:*/		return 0x820EA6A4;
		  /* 820EA6A4h */ case    4:  		/* lwz R9, <#[R10 + 8]> */
		/* 820EA6A4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 820EA6A4h case    4:*/		return 0x820EA6A8;
		  /* 820EA6A8h */ case    5:  		/* lwz R4, <#[R11 + 8]> */
		/* 820EA6A8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 820EA6A8h case    5:*/		return 0x820EA6AC;
		  /* 820EA6ACh */ case    6:  		/* cmplw CR6, R9, R4 */
		/* 820EA6ACh case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 820EA6ACh case    6:*/		return 0x820EA6B0;
		  /* 820EA6B0h */ case    7:  		/* bc 4, CR6_EQ, 72 */
		/* 820EA6B0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820EA6F8;  }
		/* 820EA6B0h case    7:*/		return 0x820EA6B4;
		  /* 820EA6B4h */ case    8:  		/* lwz R9, <#[R10 + 12]> */
		/* 820EA6B4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 820EA6B4h case    8:*/		return 0x820EA6B8;
		  /* 820EA6B8h */ case    9:  		/* lwz R4, <#[R11 + 12]> */
		/* 820EA6B8h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 820EA6B8h case    9:*/		return 0x820EA6BC;
		  /* 820EA6BCh */ case   10:  		/* cmplw CR6, R9, R4 */
		/* 820EA6BCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 820EA6BCh case   10:*/		return 0x820EA6C0;
		  /* 820EA6C0h */ case   11:  		/* bc 4, CR6_EQ, 56 */
		/* 820EA6C0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820EA6F8;  }
		/* 820EA6C0h case   11:*/		return 0x820EA6C4;
		  /* 820EA6C4h */ case   12:  		/* lwz R9, <#[R10 + 16]> */
		/* 820EA6C4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 820EA6C4h case   12:*/		return 0x820EA6C8;
		  /* 820EA6C8h */ case   13:  		/* lwz R4, <#[R11 + 16]> */
		/* 820EA6C8h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820EA6C8h case   13:*/		return 0x820EA6CC;
		  /* 820EA6CCh */ case   14:  		/* cmplw CR6, R9, R4 */
		/* 820EA6CCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 820EA6CCh case   14:*/		return 0x820EA6D0;
		  /* 820EA6D0h */ case   15:  		/* bc 4, CR6_EQ, 40 */
		/* 820EA6D0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820EA6F8;  }
		/* 820EA6D0h case   15:*/		return 0x820EA6D4;
		  /* 820EA6D4h */ case   16:  		/* lwz R11, <#[R11 + 60]> */
		/* 820EA6D4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820EA6D4h case   16:*/		return 0x820EA6D8;
		  /* 820EA6D8h */ case   17:  		/* lwz R10, <#[R10 + 60]> */
		/* 820EA6D8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000003C) );
		/* 820EA6D8h case   17:*/		return 0x820EA6DC;
		  /* 820EA6DCh */ case   18:  		/* xor R11, R11, R10 */
		/* 820EA6DCh case   18:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820EA6DCh case   18:*/		return 0x820EA6E0;
		  /* 820EA6E0h */ case   19:  		/* cmplw CR6, R11, R21 */
		/* 820EA6E0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 820EA6E0h case   19:*/		return 0x820EA6E4;
	}
	return 0x820EA6E4;
} // Block from 820EA694h-820EA6E4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820EA6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA6E4);
		  /* 820EA6E4h */ case    0:  		/* bc 4, CR6_EQ, 20 */
		/* 820EA6E4h case    0:*/		if ( !regs.CR[6].eq ) { return 0x820EA6F8;  }
		/* 820EA6E4h case    0:*/		return 0x820EA6E8;
		  /* 820EA6E8h */ case    1:  		/* addi R8, R8, 1 */
		/* 820EA6E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820EA6E8h case    1:*/		return 0x820EA6EC;
		  /* 820EA6ECh */ case    2:  		/* addi R7, R7, 4 */
		/* 820EA6ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 820EA6ECh case    2:*/		return 0x820EA6F0;
		  /* 820EA6F0h */ case    3:  		/* cmplw CR6, R8, R26 */
		/* 820EA6F0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R26);
		/* 820EA6F0h case    3:*/		return 0x820EA6F4;
		  /* 820EA6F4h */ case    4:  		/* bc 12, CR6_LT, -172 */
		/* 820EA6F4h case    4:*/		if ( regs.CR[6].lt ) { return 0x820EA648;  }
		/* 820EA6F4h case    4:*/		return 0x820EA6F8;
	}
	return 0x820EA6F8;
} // Block from 820EA6E4h-820EA6F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820EA6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA6F8);
		  /* 820EA6F8h */ case    0:  		/* cmplw CR6, R8, R26 */
		/* 820EA6F8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R26);
		/* 820EA6F8h case    0:*/		return 0x820EA6FC;
		  /* 820EA6FCh */ case    1:  		/* bc 4, CR6_EQ, 428 */
		/* 820EA6FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x820EA8A8;  }
		/* 820EA6FCh case    1:*/		return 0x820EA700;
		  /* 820EA700h */ case    2:  		/* li R3, 116 */
		/* 820EA700h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 820EA700h case    2:*/		return 0x820EA704;
		  /* 820EA704h */ case    3:  		/* bl 73364 */
		/* 820EA704h case    3:*/		regs.LR = 0x820EA708; return 0x820FC598;
		/* 820EA704h case    3:*/		return 0x820EA708;
		  /* 820EA708h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 820EA708h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820EA708h case    4:*/		return 0x820EA70C;
		  /* 820EA70Ch */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820EA70Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x820EA71C;  }
		/* 820EA70Ch case    5:*/		return 0x820EA710;
		  /* 820EA710h */ case    6:  		/* bl 71568 */
		/* 820EA710h case    6:*/		regs.LR = 0x820EA714; return 0x820FBEA0;
		/* 820EA710h case    6:*/		return 0x820EA714;
		  /* 820EA714h */ case    7:  		/* mr R31, R3 */
		/* 820EA714h case    7:*/		regs.R31 = regs.R3;
		/* 820EA714h case    7:*/		return 0x820EA718;
		  /* 820EA718h */ case    8:  		/* b 8 */
		/* 820EA718h case    8:*/		return 0x820EA720;
		/* 820EA718h case    8:*/		return 0x820EA71C;
	}
	return 0x820EA71C;
} // Block from 820EA6F8h-820EA71Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820EA71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA71C);
		  /* 820EA71Ch */ case    0:  		/* mr R31, R23 */
		/* 820EA71Ch case    0:*/		regs.R31 = regs.R23;
		/* 820EA71Ch case    0:*/		return 0x820EA720;
	}
	return 0x820EA720;
} // Block from 820EA71Ch-820EA720h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EA720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA720);
		  /* 820EA720h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820EA720h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820EA720h case    0:*/		return 0x820EA724;
		  /* 820EA724h */ case    1:  		/* bc 12, CR6_EQ, 416 */
		/* 820EA724h case    1:*/		if ( regs.CR[6].eq ) { return 0x820EA8C4;  }
		/* 820EA724h case    1:*/		return 0x820EA728;
		  /* 820EA728h */ case    2:  		/* li R11, 1793 */
		/* 820EA728h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x701);
		/* 820EA728h case    2:*/		return 0x820EA72C;
		  /* 820EA72Ch */ case    3:  		/* mr R4, R26 */
		/* 820EA72Ch case    3:*/		regs.R4 = regs.R26;
		/* 820EA72Ch case    3:*/		return 0x820EA730;
		  /* 820EA730h */ case    4:  		/* li R7, 0 */
		/* 820EA730h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820EA730h case    4:*/		return 0x820EA734;
		  /* 820EA734h */ case    5:  		/* rlwimi R4, R11, 20, 0, 11 */
		/* 820EA734h case    5:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R4,regs.R11);
		/* 820EA734h case    5:*/		return 0x820EA738;
		  /* 820EA738h */ case    6:  		/* mr R6, R26 */
		/* 820EA738h case    6:*/		regs.R6 = regs.R26;
		/* 820EA738h case    6:*/		return 0x820EA73C;
		  /* 820EA73Ch */ case    7:  		/* mulli R5, R26, 3 */
		/* 820EA73Ch case    7:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R26,0x3);
		/* 820EA73Ch case    7:*/		return 0x820EA740;
		  /* 820EA740h */ case    8:  		/* mr R3, R31 */
		/* 820EA740h case    8:*/		regs.R3 = regs.R31;
		/* 820EA740h case    8:*/		return 0x820EA744;
		  /* 820EA744h */ case    9:  		/* bl 73452 */
		/* 820EA744h case    9:*/		regs.LR = 0x820EA748; return 0x820FC630;
		/* 820EA744h case    9:*/		return 0x820EA748;
		  /* 820EA748h */ case   10:  		/* or. R30, R3, R3 */
		/* 820EA748h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820EA748h case   10:*/		return 0x820EA74C;
		  /* 820EA74Ch */ case   11:  		/* mr R3, R31 */
		/* 820EA74Ch case   11:*/		regs.R3 = regs.R31;
		/* 820EA74Ch case   11:*/		return 0x820EA750;
		  /* 820EA750h */ case   12:  		/* bc 12, CR0_LT, 384 */
		/* 820EA750h case   12:*/		if ( regs.CR[0].lt ) { return 0x820EA8D0;  }
		/* 820EA750h case   12:*/		return 0x820EA754;
		  /* 820EA754h */ case   13:  		/* lwz R4, <#[R28 + 260]> */
		/* 820EA754h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000104) );
		/* 820EA754h case   13:*/		return 0x820EA758;
		  /* 820EA758h */ case   14:  		/* bl 71576 */
		/* 820EA758h case   14:*/		regs.LR = 0x820EA75C; return 0x820FBEF0;
		/* 820EA758h case   14:*/		return 0x820EA75C;
		  /* 820EA75Ch */ case   15:  		/* or. R30, R3, R3 */
		/* 820EA75Ch case   15:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820EA75Ch case   15:*/		return 0x820EA760;
		  /* 820EA760h */ case   16:  		/* bc 12, CR0_LT, 388 */
		/* 820EA760h case   16:*/		if ( regs.CR[0].lt ) { return 0x820EA8E4;  }
		/* 820EA760h case   16:*/		return 0x820EA764;
		  /* 820EA764h */ case   17:  		/* lwz R11, <#[R28 + 260]> */
		/* 820EA764h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820EA764h case   17:*/		return 0x820EA768;
		  /* 820EA768h */ case   18:  		/* rlwinm R30, R26, 2, 0, 29 */
		/* 820EA768h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R26);
		/* 820EA768h case   18:*/		return 0x820EA76C;
		  /* 820EA76Ch */ case   19:  		/* lwz R3, <#[R31 + 16]> */
		/* 820EA76Ch case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 820EA76Ch case   19:*/		return 0x820EA770;
		  /* 820EA770h */ case   20:  		/* mr R5, R30 */
		/* 820EA770h case   20:*/		regs.R5 = regs.R30;
		/* 820EA770h case   20:*/		return 0x820EA774;
		  /* 820EA774h */ case   21:  		/* lwz R4, <#[R11 + 16]> */
		/* 820EA774h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 820EA774h case   21:*/		return 0x820EA778;
		  /* 820EA778h */ case   22:  		/* bl -363976 */
		/* 820EA778h case   22:*/		regs.LR = 0x820EA77C; return 0x820919B0;
		/* 820EA778h case   22:*/		return 0x820EA77C;
		  /* 820EA77Ch */ case   23:  		/* mr R5, R30 */
		/* 820EA77Ch case   23:*/		regs.R5 = regs.R30;
		/* 820EA77Ch case   23:*/		return 0x820EA780;
		  /* 820EA780h */ case   24:  		/* lwz R3, <#[R31 + 8]> */
		/* 820EA780h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA780h case   24:*/		return 0x820EA784;
		  /* 820EA784h */ case   25:  		/* addi R4, R1, 224 */
		/* 820EA784h case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xE0);
		/* 820EA784h case   25:*/		return 0x820EA788;
		  /* 820EA788h */ case   26:  		/* bl -363992 */
		/* 820EA788h case   26:*/		regs.LR = 0x820EA78C; return 0x820919B0;
		/* 820EA788h case   26:*/		return 0x820EA78C;
		  /* 820EA78Ch */ case   27:  		/* lwz R11, <#[R31 + 8]> */
		/* 820EA78Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA78Ch case   27:*/		return 0x820EA790;
		  /* 820EA790h */ case   28:  		/* mr R5, R30 */
		/* 820EA790h case   28:*/		regs.R5 = regs.R30;
		/* 820EA790h case   28:*/		return 0x820EA794;
		  /* 820EA794h */ case   29:  		/* add R3, R30, R11 */
		/* 820EA794h case   29:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 820EA794h case   29:*/		return 0x820EA798;
		  /* 820EA798h */ case   30:  		/* mr R4, R25 */
		/* 820EA798h case   30:*/		regs.R4 = regs.R25;
		/* 820EA798h case   30:*/		return 0x820EA79C;
		  /* 820EA79Ch */ case   31:  		/* bl -364012 */
		/* 820EA79Ch case   31:*/		regs.LR = 0x820EA7A0; return 0x820919B0;
		/* 820EA79Ch case   31:*/		return 0x820EA7A0;
		  /* 820EA7A0h */ case   32:  		/* lwz R11, <#[R31 + 8]> */
		/* 820EA7A0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA7A0h case   32:*/		return 0x820EA7A4;
		  /* 820EA7A4h */ case   33:  		/* rlwinm R29, R26, 3, 0, 28 */
		/* 820EA7A4h case   33:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R29,regs.R26);
		/* 820EA7A4h case   33:*/		return 0x820EA7A8;
	}
	return 0x820EA7A8;
} // Block from 820EA720h-820EA7A8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820EA7A8h
// Function '?FindComp@CShaderProgram@D3DXShader@@IAAJIPAPAVCInstruction@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA7A8);
		  /* 820EA7A8h */ case    0:  		/* mr R5, R30 */
		/* 820EA7A8h case    0:*/		regs.R5 = regs.R30;
		/* 820EA7A8h case    0:*/		return 0x820EA7AC;
		  /* 820EA7ACh */ case    1:  		/* addi R4, R1, 240 */
		/* 820EA7ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xF0);
		/* 820EA7ACh case    1:*/		return 0x820EA7B0;
		  /* 820EA7B0h */ case    2:  		/* add R3, R29, R11 */
		/* 820EA7B0h case    2:*/		cpu::op::add<0>(regs,&regs.R3,regs.R29,regs.R11);
		/* 820EA7B0h case    2:*/		return 0x820EA7B4;
		  /* 820EA7B4h */ case    3:  		/* bl -364036 */
		/* 820EA7B4h case    3:*/		regs.LR = 0x820EA7B8; return 0x820919B0;
		/* 820EA7B4h case    3:*/		return 0x820EA7B8;
		  /* 820EA7B8h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 820EA7B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820EA7B8h case    4:*/		return 0x820EA7BC;
		  /* 820EA7BCh */ case    5:  		/* lwz R10, <#[R31 + 16]> */
		/* 820EA7BCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 820EA7BCh case    5:*/		return 0x820EA7C0;
		  /* 820EA7C0h */ case    6:  		/* mr R27, R23 */
		/* 820EA7C0h case    6:*/		regs.R27 = regs.R23;
		/* 820EA7C0h case    6:*/		return 0x820EA7C4;
		  /* 820EA7C4h */ case    7:  		/* lwz R9, <#[R28 + 20]> */
		/* 820EA7C4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000014) );
		/* 820EA7C4h case    7:*/		return 0x820EA7C8;
		  /* 820EA7C8h */ case    8:  		/* lwz R8, <#[R11]> */
		/* 820EA7C8h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820EA7C8h case    8:*/		return 0x820EA7CC;
		  /* 820EA7CCh */ case    9:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820EA7CCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820EA7CCh case    9:*/		return 0x820EA7D0;
		  /* 820EA7D0h */ case   10:  		/* lwz R10, <#[R10]> */
		/* 820EA7D0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820EA7D0h case   10:*/		return 0x820EA7D4;
		  /* 820EA7D4h */ case   11:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820EA7D4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820EA7D4h case   11:*/		return 0x820EA7D8;
		  /* 820EA7D8h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820EA7D8h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820EA7D8h case   12:*/		return 0x820EA7DC;
		  /* 820EA7DCh */ case   13:  		/* lwzx R29, <#[R8 + R9]> */
		/* 820EA7DCh case   13:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820EA7DCh case   13:*/		return 0x820EA7E0;
		  /* 820EA7E0h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EA7E0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EA7E0h case   14:*/		return 0x820EA7E4;
		  /* 820EA7E4h */ case   15:  		/* lwzx R30, <#[R10 + R9]> */
		/* 820EA7E4h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820EA7E4h case   15:*/		return 0x820EA7E8;
		  /* 820EA7E8h */ case   16:  		/* lwzx R10, <#[R11 + R9]> */
		/* 820EA7E8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820EA7E8h case   16:*/		return 0x820EA7EC;
		  /* 820EA7ECh */ case   17:  		/* lwz R9, <#[R29 + 4]> */
		/* 820EA7ECh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 820EA7ECh case   17:*/		return 0x820EA7F0;
		  /* 820EA7F0h */ case   18:  		/* lwz R11, <#[R30 + 4]> */
		/* 820EA7F0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820EA7F0h case   18:*/		return 0x820EA7F4;
		  /* 820EA7F4h */ case   19:  		/* cmplw CR6, R11, R9 */
		/* 820EA7F4h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820EA7F4h case   19:*/		return 0x820EA7F8;
		  /* 820EA7F8h */ case   20:  		/* bc 4, CR6_EQ, 20 */
		/* 820EA7F8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820EA80C;  }
		/* 820EA7F8h case   20:*/		return 0x820EA7FC;
		  /* 820EA7FCh */ case   21:  		/* lwz R9, <#[R30 + 12]> */
		/* 820EA7FCh case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000000C) );
		/* 820EA7FCh case   21:*/		return 0x820EA800;
		  /* 820EA800h */ case   22:  		/* lwz R8, <#[R29 + 12]> */
		/* 820EA800h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x0000000C) );
		/* 820EA800h case   22:*/		return 0x820EA804;
		  /* 820EA804h */ case   23:  		/* cmplw CR6, R9, R8 */
		/* 820EA804h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 820EA804h case   23:*/		return 0x820EA808;
		  /* 820EA808h */ case   24:  		/* bc 12, CR6_EQ, 44 */
		/* 820EA808h case   24:*/		if ( regs.CR[6].eq ) { return 0x820EA834;  }
		/* 820EA808h case   24:*/		return 0x820EA80C;
	}
	return 0x820EA80C;
} // Block from 820EA7A8h-820EA80Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 820EA80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA80C);
		  /* 820EA80Ch */ case    0:  		/* lwz R9, <#[R10 + 4]> */
		/* 820EA80Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820EA80Ch case    0:*/		return 0x820EA810;
		  /* 820EA810h */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 820EA810h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820EA810h case    1:*/		return 0x820EA814;
		  /* 820EA814h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820EA814h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820EA828;  }
		/* 820EA814h case    2:*/		return 0x820EA818;
		  /* 820EA818h */ case    3:  		/* lwz R9, <#[R30 + 12]> */
		/* 820EA818h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000000C) );
		/* 820EA818h case    3:*/		return 0x820EA81C;
		  /* 820EA81Ch */ case    4:  		/* lwz R10, <#[R10 + 12]> */
		/* 820EA81Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 820EA81Ch case    4:*/		return 0x820EA820;
		  /* 820EA820h */ case    5:  		/* cmplw CR6, R9, R10 */
		/* 820EA820h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820EA820h case    5:*/		return 0x820EA824;
		  /* 820EA824h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 820EA824h case    6:*/		if ( regs.CR[6].eq ) { return 0x820EA834;  }
		/* 820EA824h case    6:*/		return 0x820EA828;
	}
	return 0x820EA828;
} // Block from 820EA80Ch-820EA828h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820EA828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA828);
		  /* 820EA828h */ case    0:  		/* lwz R10, <#[R28 + 136]> */
		/* 820EA828h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000088) );
		/* 820EA828h case    0:*/		return 0x820EA82C;
		  /* 820EA82Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820EA82Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820EA82Ch case    1:*/		return 0x820EA830;
		  /* 820EA830h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820EA830h case    2:*/		if ( regs.CR[6].eq ) { return 0x820EA844;  }
		/* 820EA830h case    2:*/		return 0x820EA834;
	}
	return 0x820EA834;
} // Block from 820EA828h-820EA834h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EA834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA834);
		  /* 820EA834h */ case    0:  		/* lwz R11, <#[R28 + 108]> */
		/* 820EA834h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000006C) );
		/* 820EA834h case    0:*/		return 0x820EA838;
		  /* 820EA838h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820EA838h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820EA838h case    1:*/		return 0x820EA83C;
		  /* 820EA83Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 820EA83Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x820EA844;  }
		/* 820EA83Ch case    2:*/		return 0x820EA840;
		  /* 820EA840h */ case    3:  		/* li R27, 1 */
		/* 820EA840h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 820EA840h case    3:*/		return 0x820EA844;
	}
	return 0x820EA844;
} // Block from 820EA834h-820EA844h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EA844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA844);
		  /* 820EA844h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 820EA844h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 820EA844h case    0:*/		return 0x820EA848;
		  /* 820EA848h */ case    1:  		/* li R5, 0 */
		/* 820EA848h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820EA848h case    1:*/		return 0x820EA84C;
		  /* 820EA84Ch */ case    2:  		/* mr R4, R31 */
		/* 820EA84Ch case    2:*/		regs.R4 = regs.R31;
		/* 820EA84Ch case    2:*/		return 0x820EA850;
		  /* 820EA850h */ case    3:  		/* mr R3, R28 */
		/* 820EA850h case    3:*/		regs.R3 = regs.R28;
		/* 820EA850h case    3:*/		return 0x820EA854;
		  /* 820EA854h */ case    4:  		/* lwz R11, <#[R11 + 32]> */
		/* 820EA854h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 820EA854h case    4:*/		return 0x820EA858;
		  /* 820EA858h */ case    5:  		/* mtspr CTR, R11 */
		/* 820EA858h case    5:*/		regs.CTR = regs.R11;
		/* 820EA858h case    5:*/		return 0x820EA85C;
		  /* 820EA85Ch */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 820EA85Ch case    6:*/		if ( 1 ) { regs.LR = 0x820EA860; return (uint32)regs.CTR; }
		/* 820EA85Ch case    6:*/		return 0x820EA860;
		  /* 820EA860h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820EA860h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EA860h case    7:*/		return 0x820EA864;
		  /* 820EA864h */ case    8:  		/* bc 4, CR0_EQ, 52 */
		/* 820EA864h case    8:*/		if ( !regs.CR[0].eq ) { return 0x820EA898;  }
		/* 820EA864h case    8:*/		return 0x820EA868;
		  /* 820EA868h */ case    9:  		/* lwz R11, <#[R30 + 4]> */
		/* 820EA868h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820EA868h case    9:*/		return 0x820EA86C;
		  /* 820EA86Ch */ case   10:  		/* lwz R10, <#[R28 + 16]> */
		/* 820EA86Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 820EA86Ch case   10:*/		return 0x820EA870;
		  /* 820EA870h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EA870h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EA870h case   11:*/		return 0x820EA874;
		  /* 820EA874h */ case   12:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820EA874h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EA874h case   12:*/		return 0x820EA878;
		  /* 820EA878h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 820EA878h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 820EA878h case   13:*/		return 0x820EA87C;
		  /* 820EA87Ch */ case   14:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820EA87Ch case   14:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820EA87Ch case   14:*/		return 0x820EA880;
		  /* 820EA880h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 820EA880h case   15:*/		if ( !regs.CR[0].eq ) { return 0x820EA88C;  }
		/* 820EA880h case   15:*/		return 0x820EA884;
		  /* 820EA884h */ case   16:  		/* cmpwi CR6, R27, 0 */
		/* 820EA884h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820EA884h case   16:*/		return 0x820EA888;
		  /* 820EA888h */ case   17:  		/* bc 12, CR6_EQ, 100 */
		/* 820EA888h case   17:*/		if ( regs.CR[6].eq ) { return 0x820EA8EC;  }
		/* 820EA888h case   17:*/		return 0x820EA88C;
	}
	return 0x820EA88C;
} // Block from 820EA844h-820EA88Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 820EA88Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA88C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA88C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA88C);
		  /* 820EA88Ch */ case    0:  		/* lwz R11, <#[R28 + 108]> */
		/* 820EA88Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000006C) );
		/* 820EA88Ch case    0:*/		return 0x820EA890;
		  /* 820EA890h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820EA890h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820EA890h case    1:*/		return 0x820EA894;
		  /* 820EA894h */ case    2:  		/* bc 4, CR0_EQ, 88 */
		/* 820EA894h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820EA8EC;  }
		/* 820EA894h case    2:*/		return 0x820EA898;
	}
	return 0x820EA898;
} // Block from 820EA88Ch-820EA898h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EA898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA898);
		  /* 820EA898h */ case    0:  		/* mr R3, R31 */
		/* 820EA898h case    0:*/		regs.R3 = regs.R31;
		/* 820EA898h case    0:*/		return 0x820EA89C;
		  /* 820EA89Ch */ case    1:  		/* bl 1256228 */
		/* 820EA89Ch case    1:*/		regs.LR = 0x820EA8A0; return 0x8221D3C0;
		/* 820EA89Ch case    1:*/		return 0x820EA8A0;
		  /* 820EA8A0h */ case    2:  		/* mr R3, R31 */
		/* 820EA8A0h case    2:*/		regs.R3 = regs.R31;
		/* 820EA8A0h case    2:*/		return 0x820EA8A4;
		  /* 820EA8A4h */ case    3:  		/* bl 73036 */
		/* 820EA8A4h case    3:*/		regs.LR = 0x820EA8A8; return 0x820FC5F0;
		/* 820EA8A4h case    3:*/		return 0x820EA8A8;
	}
	return 0x820EA8A8;
} // Block from 820EA898h-820EA8A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EA8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA8A8);
		  /* 820EA8A8h */ case    0:  		/* addi R24, R24, 4 */
		/* 820EA8A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 820EA8A8h case    0:*/		return 0x820EA8AC;
		  /* 820EA8ACh */ case    1:  		/* addi R25, R25, -16 */
		/* 820EA8ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0xFFFFFFF0);
		/* 820EA8ACh case    1:*/		return 0x820EA8B0;
		  /* 820EA8B0h */ case    2:  		/* cmplwi CR6, R24, 8 */
		/* 820EA8B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000008);
		/* 820EA8B0h case    2:*/		return 0x820EA8B4;
		  /* 820EA8B4h */ case    3:  		/* bc 12, CR6_LT, -652 */
		/* 820EA8B4h case    3:*/		if ( regs.CR[6].lt ) { return 0x820EA628;  }
		/* 820EA8B4h case    3:*/		return 0x820EA8B8;
	}
	return 0x820EA8B8;
} // Block from 820EA8A8h-820EA8B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EA8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA8B8);
		  /* 820EA8B8h */ case    0:  		/* li R3, 1 */
		/* 820EA8B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820EA8B8h case    0:*/		return 0x820EA8BC;
		  /* 820EA8BCh */ case    1:  		/* addi R1, R1, 448 */
		/* 820EA8BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1C0);
		/* 820EA8BCh case    1:*/		return 0x820EA8C0;
		  /* 820EA8C0h */ case    2:  		/* b -366132 */
		/* 820EA8C0h case    2:*/		return 0x8209128C;
		/* 820EA8C0h case    2:*/		return 0x820EA8C4;
	}
	return 0x820EA8C4;
} // Block from 820EA8B8h-820EA8C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EA8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA8C4);
		  /* 820EA8C4h */ case    0:  		/* lis R3, -32761 */
		/* 820EA8C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820EA8C4h case    0:*/		return 0x820EA8C8;
		  /* 820EA8C8h */ case    1:  		/* ori R3, R3, 14 */
		/* 820EA8C8h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820EA8C8h case    1:*/		return 0x820EA8CC;
		  /* 820EA8CCh */ case    2:  		/* b -16 */
		/* 820EA8CCh case    2:*/		return 0x820EA8BC;
		/* 820EA8CCh case    2:*/		return 0x820EA8D0;
	}
	return 0x820EA8D0;
} // Block from 820EA8C4h-820EA8D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EA8D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA8D0);
		  /* 820EA8D0h */ case    0:  		/* bl 1256176 */
		/* 820EA8D0h case    0:*/		regs.LR = 0x820EA8D4; return 0x8221D3C0;
		/* 820EA8D0h case    0:*/		return 0x820EA8D4;
		  /* 820EA8D4h */ case    1:  		/* mr R3, R31 */
		/* 820EA8D4h case    1:*/		regs.R3 = regs.R31;
		/* 820EA8D4h case    1:*/		return 0x820EA8D8;
		  /* 820EA8D8h */ case    2:  		/* bl 72984 */
		/* 820EA8D8h case    2:*/		regs.LR = 0x820EA8DC; return 0x820FC5F0;
		/* 820EA8D8h case    2:*/		return 0x820EA8DC;
		  /* 820EA8DCh */ case    3:  		/* mr R3, R30 */
		/* 820EA8DCh case    3:*/		regs.R3 = regs.R30;
		/* 820EA8DCh case    3:*/		return 0x820EA8E0;
		  /* 820EA8E0h */ case    4:  		/* b -36 */
		/* 820EA8E0h case    4:*/		return 0x820EA8BC;
		/* 820EA8E0h case    4:*/		return 0x820EA8E4;
	}
	return 0x820EA8E4;
} // Block from 820EA8D0h-820EA8E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820EA8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA8E4);
		  /* 820EA8E4h */ case    0:  		/* mr R3, R31 */
		/* 820EA8E4h case    0:*/		regs.R3 = regs.R31;
		/* 820EA8E4h case    0:*/		return 0x820EA8E8;
		  /* 820EA8E8h */ case    1:  		/* b -24 */
		/* 820EA8E8h case    1:*/		return 0x820EA8D0;
		/* 820EA8E8h case    1:*/		return 0x820EA8EC;
	}
	return 0x820EA8EC;
} // Block from 820EA8E4h-820EA8ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820EA8ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA8EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA8EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA8EC);
		  /* 820EA8ECh */ case    0:  		/* lwz R27, <#[R1 + 128]> */
		/* 820EA8ECh case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 820EA8ECh case    0:*/		return 0x820EA8F0;
		  /* 820EA8F0h */ case    1:  		/* mr R30, R23 */
		/* 820EA8F0h case    1:*/		regs.R30 = regs.R23;
		/* 820EA8F0h case    1:*/		return 0x820EA8F4;
		  /* 820EA8F4h */ case    2:  		/* cmpwi CR6, R22, 0 */
		/* 820EA8F4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820EA8F4h case    2:*/		return 0x820EA8F8;
		  /* 820EA8F8h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 820EA8F8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820EA904;  }
		/* 820EA8F8h case    3:*/		return 0x820EA8FC;
		  /* 820EA8FCh */ case    4:  		/* lwz R30, <#[R27]> */
		/* 820EA8FCh case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 820EA8FCh case    4:*/		return 0x820EA900;
		  /* 820EA900h */ case    5:  		/* stw R23, <#[R27]> */
		/* 820EA900h case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x00000000) );
		/* 820EA900h case    5:*/		return 0x820EA904;
	}
	return 0x820EA904;
} // Block from 820EA8ECh-820EA904h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820EA904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA904);
		  /* 820EA904h */ case    0:  		/* lwz R11, <#[R28 + 108]> */
		/* 820EA904h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000006C) );
		/* 820EA904h case    0:*/		return 0x820EA908;
		  /* 820EA908h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820EA908h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820EA908h case    1:*/		return 0x820EA90C;
		  /* 820EA90Ch */ case    2:  		/* bc 12, CR0_EQ, 96 */
		/* 820EA90Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x820EA96C;  }
		/* 820EA90Ch case    2:*/		return 0x820EA910;
		  /* 820EA910h */ case    3:  		/* lwz R11, <#[R29 + 60]> */
		/* 820EA910h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000003C) );
		/* 820EA910h case    3:*/		return 0x820EA914;
		  /* 820EA914h */ case    4:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 820EA914h case    4:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 820EA914h case    4:*/		return 0x820EA918;
		  /* 820EA918h */ case    5:  		/* bc 4, CR0_EQ, 84 */
		/* 820EA918h case    5:*/		if ( !regs.CR[0].eq ) { return 0x820EA96C;  }
		/* 820EA918h case    5:*/		return 0x820EA91C;
		  /* 820EA91Ch */ case    6:  		/* lwz R11, <#[R29]> */
		/* 820EA91Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820EA91Ch case    6:*/		return 0x820EA920;
	}
	return 0x820EA920;
} // Block from 820EA904h-820EA920h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820EA920h
// Function '?BuildLRP@CShaderProgram@D3DXShader@@IAAJPAI000PAVCInstruction@2@1I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA920);
		  /* 820EA920h */ case    0:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 820EA920h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 820EA920h case    0:*/		return 0x820EA924;
		  /* 820EA924h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 820EA924h case    1:*/		if ( regs.CR[0].eq ) { return 0x820EA930;  }
		/* 820EA924h case    1:*/		return 0x820EA928;
		  /* 820EA928h */ case    2:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 820EA928h case    2:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 820EA928h case    2:*/		return 0x820EA92C;
		  /* 820EA92Ch */ case    3:  		/* bc 4, CR0_EQ, 64 */
		/* 820EA92Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x820EA96C;  }
		/* 820EA92Ch case    3:*/		return 0x820EA930;
	}
	return 0x820EA930;
} // Block from 820EA920h-820EA930h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EA930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA930);
		  /* 820EA930h */ case    0:  		/* mr R3, R31 */
		/* 820EA930h case    0:*/		regs.R3 = regs.R31;
		/* 820EA930h case    0:*/		return 0x820EA934;
		  /* 820EA934h */ case    1:  		/* bl 1256076 */
		/* 820EA934h case    1:*/		regs.LR = 0x820EA938; return 0x8221D3C0;
		/* 820EA934h case    1:*/		return 0x820EA938;
		  /* 820EA938h */ case    2:  		/* mr R3, R31 */
		/* 820EA938h case    2:*/		regs.R3 = regs.R31;
		/* 820EA938h case    2:*/		return 0x820EA93C;
		  /* 820EA93Ch */ case    3:  		/* bl 72884 */
		/* 820EA93Ch case    3:*/		regs.LR = 0x820EA940; return 0x820FC5F0;
		/* 820EA93Ch case    3:*/		return 0x820EA940;
		  /* 820EA940h */ case    4:  		/* lis R11, -32254 */
		/* 820EA940h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 820EA940h case    4:*/		return 0x820EA944;
		  /* 820EA944h */ case    5:  		/* li R5, 4703 */
		/* 820EA944h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x125F);
		/* 820EA944h case    5:*/		return 0x820EA948;
		  /* 820EA948h */ case    6:  		/* addi R6, R11, -18252 */
		/* 820EA948h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB8B4);
		/* 820EA948h case    6:*/		return 0x820EA94C;
		  /* 820EA94Ch */ case    7:  		/* mr R3, R28 */
		/* 820EA94Ch case    7:*/		regs.R3 = regs.R28;
		/* 820EA94Ch case    7:*/		return 0x820EA950;
		  /* 820EA950h */ case    8:  		/* lwz R11, <#[R28 + 260]> */
		/* 820EA950h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000104) );
		/* 820EA950h case    8:*/		return 0x820EA954;
		  /* 820EA954h */ case    9:  		/* lwz R4, <#[R11 + 60]> */
		/* 820EA954h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000003C) );
		/* 820EA954h case    9:*/		return 0x820EA958;
		  /* 820EA958h */ case   10:  		/* bl 147096 */
		/* 820EA958h case   10:*/		regs.LR = 0x820EA95C; return 0x8210E7F0;
		/* 820EA958h case   10:*/		return 0x820EA95C;
		  /* 820EA95Ch */ case   11:  		/* cmpwi CR6, R22, 0 */
		/* 820EA95Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820EA95Ch case   11:*/		return 0x820EA960;
		  /* 820EA960h */ case   12:  		/* bc 4, CR6_EQ, -168 */
		/* 820EA960h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820EA8B8;  }
		/* 820EA960h case   12:*/		return 0x820EA964;
		  /* 820EA964h */ case   13:  		/* stw R30, <#[R27]> */
		/* 820EA964h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 820EA964h case   13:*/		return 0x820EA968;
		  /* 820EA968h */ case   14:  		/* b -176 */
		/* 820EA968h case   14:*/		return 0x820EA8B8;
		/* 820EA968h case   14:*/		return 0x820EA96C;
	}
	return 0x820EA96C;
} // Block from 820EA930h-820EA96Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820EA96Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA96C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA96C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA96C);
		  /* 820EA96Ch */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 820EA96Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820EA96Ch case    0:*/		return 0x820EA970;
		  /* 820EA970h */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 820EA970h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820EA9D4;  }
		/* 820EA970h case    1:*/		return 0x820EA974;
		  /* 820EA974h */ case    2:  		/* lwz R11, <#[R1 + 96]> */
		/* 820EA974h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820EA974h case    2:*/		return 0x820EA978;
		  /* 820EA978h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820EA978h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820EA978h case    3:*/		return 0x820EA97C;
		  /* 820EA97Ch */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 820EA97Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x820EA998;  }
		/* 820EA97Ch case    4:*/		return 0x820EA980;
		  /* 820EA980h */ case    5:  		/* addi R10, R1, 128 */
		/* 820EA980h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 820EA980h case    5:*/		return 0x820EA984;
		  /* 820EA984h */ case    6:  		/* mtspr CTR, R11 */
		/* 820EA984h case    6:*/		regs.CTR = regs.R11;
		/* 820EA984h case    6:*/		return 0x820EA988;
		  /* 820EA988h */ case    7:  		/* addi R11, R10, -4 */
		/* 820EA988h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFC);
		/* 820EA988h case    7:*/		return 0x820EA98C;
		  /* 820EA98Ch */ case    8:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820EA98Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820EA98Ch case    8:*/		return 0x820EA990;
		  /* 820EA990h */ case    9:  		/* stw R23, <#[R10]> */
		/* 820EA990h case    9:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + 0x00000000) );
		/* 820EA990h case    9:*/		return 0x820EA994;
		  /* 820EA994h */ case   10:  		/* bc 16, CR0_LT, -8 */
		/* 820EA994h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820EA98C;  }
		/* 820EA994h case   10:*/		return 0x820EA998;
	}
	return 0x820EA998;
} // Block from 820EA96Ch-820EA998h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820EA998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA998);
		  /* 820EA998h */ case    0:  		/* lwz R11, <#[R28 + 256]> */
		/* 820EA998h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000100) );
		/* 820EA998h case    0:*/		return 0x820EA99C;
		  /* 820EA99Ch */ case    1:  		/* lwz R10, <#[R28 + 24]> */
		/* 820EA99Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 820EA99Ch case    1:*/		return 0x820EA9A0;
		  /* 820EA9A0h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EA9A0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EA9A0h case    2:*/		return 0x820EA9A4;
		  /* 820EA9A4h */ case    3:  		/* lwzx R30, <#[R11 + R10]> */
		/* 820EA9A4h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EA9A4h case    3:*/		return 0x820EA9A8;
		  /* 820EA9A8h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 820EA9A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820EA9A8h case    4:*/		return 0x820EA9AC;
		  /* 820EA9ACh */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 820EA9ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x820EA9C0;  }
		/* 820EA9ACh case    5:*/		return 0x820EA9B0;
		  /* 820EA9B0h */ case    6:  		/* mr R3, R30 */
		/* 820EA9B0h case    6:*/		regs.R3 = regs.R30;
		/* 820EA9B0h case    6:*/		return 0x820EA9B4;
		  /* 820EA9B4h */ case    7:  		/* bl 1255948 */
		/* 820EA9B4h case    7:*/		regs.LR = 0x820EA9B8; return 0x8221D3C0;
		/* 820EA9B4h case    7:*/		return 0x820EA9B8;
		  /* 820EA9B8h */ case    8:  		/* mr R3, R30 */
		/* 820EA9B8h case    8:*/		regs.R3 = regs.R30;
		/* 820EA9B8h case    8:*/		return 0x820EA9BC;
		  /* 820EA9BCh */ case    9:  		/* bl 72756 */
		/* 820EA9BCh case    9:*/		regs.LR = 0x820EA9C0; return 0x820FC5F0;
		/* 820EA9BCh case    9:*/		return 0x820EA9C0;
	}
	return 0x820EA9C0;
} // Block from 820EA998h-820EA9C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820EA9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA9C0);
		  /* 820EA9C0h */ case    0:  		/* lwz R11, <#[R28 + 256]> */
		/* 820EA9C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000100) );
		/* 820EA9C0h case    0:*/		return 0x820EA9C4;
		  /* 820EA9C4h */ case    1:  		/* lwz R10, <#[R28 + 24]> */
		/* 820EA9C4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000018) );
		/* 820EA9C4h case    1:*/		return 0x820EA9C8;
		  /* 820EA9C8h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EA9C8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EA9C8h case    2:*/		return 0x820EA9CC;
		  /* 820EA9CCh */ case    3:  		/* stwx R31, <#[R11 + R10]> */
		/* 820EA9CCh case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EA9CCh case    3:*/		return 0x820EA9D0;
		  /* 820EA9D0h */ case    4:  		/* b 64 */
		/* 820EA9D0h case    4:*/		return 0x820EAA10;
		/* 820EA9D0h case    4:*/		return 0x820EA9D4;
	}
	return 0x820EA9D4;
} // Block from 820EA9C0h-820EA9D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820EA9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EA9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EA9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EA9D4);
		  /* 820EA9D4h */ case    0:  		/* mr R4, R31 */
		/* 820EA9D4h case    0:*/		regs.R4 = regs.R31;
		/* 820EA9D4h case    0:*/		return 0x820EA9D8;
		  /* 820EA9D8h */ case    1:  		/* lwz R3, <#[R28 + 260]> */
		/* 820EA9D8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000104) );
		/* 820EA9D8h case    1:*/		return 0x820EA9DC;
		  /* 820EA9DCh */ case    2:  		/* bl 73588 */
		/* 820EA9DCh case    2:*/		regs.LR = 0x820EA9E0; return 0x820FC950;
		/* 820EA9DCh case    2:*/		return 0x820EA9E0;
		  /* 820EA9E0h */ case    3:  		/* mr R30, R3 */
		/* 820EA9E0h case    3:*/		regs.R30 = regs.R3;
		/* 820EA9E0h case    3:*/		return 0x820EA9E4;
		  /* 820EA9E4h */ case    4:  		/* mr R3, R31 */
		/* 820EA9E4h case    4:*/		regs.R3 = regs.R31;
		/* 820EA9E4h case    4:*/		return 0x820EA9E8;
		  /* 820EA9E8h */ case    5:  		/* bl 1255896 */
		/* 820EA9E8h case    5:*/		regs.LR = 0x820EA9EC; return 0x8221D3C0;
		/* 820EA9E8h case    5:*/		return 0x820EA9EC;
		  /* 820EA9ECh */ case    6:  		/* mr R3, R31 */
		/* 820EA9ECh case    6:*/		regs.R3 = regs.R31;
		/* 820EA9ECh case    6:*/		return 0x820EA9F0;
		  /* 820EA9F0h */ case    7:  		/* bl 72704 */
		/* 820EA9F0h case    7:*/		regs.LR = 0x820EA9F4; return 0x820FC5F0;
		/* 820EA9F0h case    7:*/		return 0x820EA9F4;
		  /* 820EA9F4h */ case    8:  		/* cmpwi CR6, R30, 0 */
		/* 820EA9F4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820EA9F4h case    8:*/		return 0x820EA9F8;
		  /* 820EA9F8h */ case    9:  		/* bc 12, CR6_LT, -284 */
		/* 820EA9F8h case    9:*/		if ( regs.CR[6].lt ) { return 0x820EA8DC;  }
		/* 820EA9F8h case    9:*/		return 0x820EA9FC;
		  /* 820EA9FCh */ case   10:  		/* lwz R3, <#[R28 + 260]> */
		/* 820EA9FCh case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000104) );
		/* 820EA9FCh case   10:*/		return 0x820EAA00;
		  /* 820EAA00h */ case   11:  		/* mr R4, R3 */
		/* 820EAA00h case   11:*/		regs.R4 = regs.R3;
		/* 820EAA00h case   11:*/		return 0x820EAA04;
		  /* 820EAA04h */ case   12:  		/* bl 70892 */
		/* 820EAA04h case   12:*/		regs.LR = 0x820EAA08; return 0x820FBEF0;
		/* 820EAA04h case   12:*/		return 0x820EAA08;
		  /* 820EAA08h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820EAA08h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820EAA08h case   13:*/		return 0x820EAA0C;
		  /* 820EAA0Ch */ case   14:  		/* bc 12, CR0_LT, -336 */
		/* 820EAA0Ch case   14:*/		if ( regs.CR[0].lt ) { return 0x820EA8BC;  }
		/* 820EAA0Ch case   14:*/		return 0x820EAA10;
	}
	return 0x820EAA10;
} // Block from 820EA9D4h-820EAA10h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820EAA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAA10);
		  /* 820EAA10h */ case    0:  		/* li R3, 0 */
		/* 820EAA10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820EAA10h case    0:*/		return 0x820EAA14;
		  /* 820EAA14h */ case    1:  		/* b -344 */
		/* 820EAA14h case    1:*/		return 0x820EA8BC;
		/* 820EAA14h case    1:*/		return 0x820EAA18;
	}
	return 0x820EAA18;
} // Block from 820EAA10h-820EAA18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820EAA18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAA18);
		  /* 820EAA18h */ case    0:  		/* mfspr R12, LR */
		/* 820EAA18h case    0:*/		regs.R12 = regs.LR;
		/* 820EAA18h case    0:*/		return 0x820EAA1C;
		  /* 820EAA1Ch */ case    1:  		/* bl -366560 */
		/* 820EAA1Ch case    1:*/		regs.LR = 0x820EAA20; return 0x8209123C;
		/* 820EAA1Ch case    1:*/		return 0x820EAA20;
		  /* 820EAA20h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820EAA20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820EAA20h case    2:*/		return 0x820EAA24;
		  /* 820EAA24h */ case    3:  		/* mr R31, R3 */
		/* 820EAA24h case    3:*/		regs.R31 = regs.R3;
		/* 820EAA24h case    3:*/		return 0x820EAA28;
		  /* 820EAA28h */ case    4:  		/* mr R28, R4 */
		/* 820EAA28h case    4:*/		regs.R28 = regs.R4;
		/* 820EAA28h case    4:*/		return 0x820EAA2C;
		  /* 820EAA2Ch */ case    5:  		/* mr R29, R5 */
		/* 820EAA2Ch case    5:*/		regs.R29 = regs.R5;
		/* 820EAA2Ch case    5:*/		return 0x820EAA30;
		  /* 820EAA30h */ case    6:  		/* mr R30, R6 */
		/* 820EAA30h case    6:*/		regs.R30 = regs.R6;
		/* 820EAA30h case    6:*/		return 0x820EAA34;
		  /* 820EAA34h */ case    7:  		/* mr R21, R7 */
		/* 820EAA34h case    7:*/		regs.R21 = regs.R7;
		/* 820EAA34h case    7:*/		return 0x820EAA38;
		  /* 820EAA38h */ case    8:  		/* cmplwi CR6, R6, 30 */
		/* 820EAA38h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x0000001E);
		/* 820EAA38h case    8:*/		return 0x820EAA3C;
		  /* 820EAA3Ch */ case    9:  		/* bc 4, CR6_GT, 16 */
		/* 820EAA3Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x820EAA4C;  }
		/* 820EAA3Ch case    9:*/		return 0x820EAA40;
		  /* 820EAA40h */ case   10:  		/* lis R3, -32768 */
		/* 820EAA40h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820EAA40h case   10:*/		return 0x820EAA44;
		  /* 820EAA44h */ case   11:  		/* ori R3, R3, 16389 */
		/* 820EAA44h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820EAA44h case   11:*/		return 0x820EAA48;
		  /* 820EAA48h */ case   12:  		/* b 584 */
		/* 820EAA48h case   12:*/		return 0x820EAC90;
		/* 820EAA48h case   12:*/		return 0x820EAA4C;
	}
	return 0x820EAA4C;
} // Block from 820EAA18h-820EAA4Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 820EAA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAA4C);
		  /* 820EAA4Ch */ case    0:  		/* lwz R11, <#[R31 + 256]> */
		/* 820EAA4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 820EAA4Ch case    0:*/		return 0x820EAA50;
		  /* 820EAA50h */ case    1:  		/* lwz R10, <#[R31 + 12]> */
		/* 820EAA50h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 820EAA50h case    1:*/		return 0x820EAA54;
		  /* 820EAA54h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 820EAA54h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820EAA54h case    2:*/		return 0x820EAA58;
		  /* 820EAA58h */ case    3:  		/* bc 4, CR6_LT, 564 */
		/* 820EAA58h case    3:*/		if ( !regs.CR[6].lt ) { return 0x820EAC8C;  }
		/* 820EAA58h case    3:*/		return 0x820EAA5C;
		  /* 820EAA5Ch */ case    4:  		/* lis R27, 29504 */
		/* 820EAA5Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R27,0x7340);
		/* 820EAA5Ch case    4:*/		return 0x820EAA60;
		  /* 820EAA60h */ case    5:  		/* lis R26, 29456 */
		/* 820EAA60h case    5:*/		cpu::op::lis<0>(regs,&regs.R26,0x7310);
		/* 820EAA60h case    5:*/		return 0x820EAA64;
		  /* 820EAA64h */ case    6:  		/* lis R24, 29488 */
		/* 820EAA64h case    6:*/		cpu::op::lis<0>(regs,&regs.R24,0x7330);
		/* 820EAA64h case    6:*/		return 0x820EAA68;
		  /* 820EAA68h */ case    7:  		/* lis R22, 29440 */
		/* 820EAA68h case    7:*/		cpu::op::lis<0>(regs,&regs.R22,0x7300);
		/* 820EAA68h case    7:*/		return 0x820EAA6C;
		  /* 820EAA6Ch */ case    8:  		/* lis R25, 29472 */
		/* 820EAA6Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R25,0x7320);
		/* 820EAA6Ch case    8:*/		return 0x820EAA70;
		  /* 820EAA70h */ case    9:  		/* li R23, 0 */
		/* 820EAA70h case    9:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 820EAA70h case    9:*/		return 0x820EAA74;
		  /* 820EAA74h */ case   10:  		/* lwz R5, <#[R31 + 256]> */
		/* 820EAA74h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000100) );
		/* 820EAA74h case   10:*/		return 0x820EAA78;
		  /* 820EAA78h */ case   11:  		/* lwz R11, <#[R31 + 24]> */
		/* 820EAA78h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820EAA78h case   11:*/		return 0x820EAA7C;
		  /* 820EAA7Ch */ case   12:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 820EAA7Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 820EAA7Ch case   12:*/		return 0x820EAA80;
		  /* 820EAA80h */ case   13:  		/* lwzx R6, <#[R10 + R11]> */
		/* 820EAA80h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820EAA80h case   13:*/		return 0x820EAA84;
		  /* 820EAA84h */ case   14:  		/* lwz R11, <#[R6]> */
		/* 820EAA84h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 820EAA84h case   14:*/		return 0x820EAA88;
		  /* 820EAA88h */ case   15:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820EAA88h case   15:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820EAA88h case   15:*/		return 0x820EAA8C;
		  /* 820EAA8Ch */ case   16:  		/* cmplw CR6, R11, R27 */
		/* 820EAA8Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 820EAA8Ch case   16:*/		return 0x820EAA90;
		  /* 820EAA90h */ case   17:  		/* bc 12, CR6_EQ, 508 */
		/* 820EAA90h case   17:*/		if ( regs.CR[6].eq ) { return 0x820EAC8C;  }
		/* 820EAA90h case   17:*/		return 0x820EAA94;
		  /* 820EAA94h */ case   18:  		/* cmpwi CR6, R21, 0 */
		/* 820EAA94h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 820EAA94h case   18:*/		return 0x820EAA98;
		  /* 820EAA98h */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 820EAA98h case   19:*/		if ( regs.CR[6].eq ) { return 0x820EAAAC;  }
		/* 820EAA98h case   19:*/		return 0x820EAA9C;
		  /* 820EAA9Ch */ case   20:  		/* cmplw CR6, R11, R26 */
		/* 820EAA9Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 820EAA9Ch case   20:*/		return 0x820EAAA0;
		  /* 820EAAA0h */ case   21:  		/* bc 12, CR6_EQ, 492 */
		/* 820EAAA0h case   21:*/		if ( regs.CR[6].eq ) { return 0x820EAC8C;  }
		/* 820EAAA0h case   21:*/		return 0x820EAAA4;
		  /* 820EAAA4h */ case   22:  		/* cmplw CR6, R11, R24 */
		/* 820EAAA4h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 820EAAA4h case   22:*/		return 0x820EAAA8;
		  /* 820EAAA8h */ case   23:  		/* bc 12, CR6_EQ, 484 */
		/* 820EAAA8h case   23:*/		if ( regs.CR[6].eq ) { return 0x820EAC8C;  }
		/* 820EAAA8h case   23:*/		return 0x820EAAAC;
	}
	return 0x820EAAAC;
} // Block from 820EAA4Ch-820EAAACh (24 instructions)

//////////////////////////////////////////////////////
// Block at 820EAAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAAAC);
		  /* 820EAAACh */ case    0:  		/* cmplw CR6, R11, R22 */
		/* 820EAAACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 820EAAACh case    0:*/		return 0x820EAAB0;
		  /* 820EAAB0h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820EAAB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820EAACC;  }
		/* 820EAAB0h case    1:*/		return 0x820EAAB4;
		  /* 820EAAB4h */ case    2:  		/* cmplw CR6, R11, R24 */
		/* 820EAAB4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 820EAAB4h case    2:*/		return 0x820EAAB8;
		  /* 820EAAB8h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 820EAAB8h case    3:*/		if ( regs.CR[6].eq ) { return 0x820EAACC;  }
		/* 820EAAB8h case    3:*/		return 0x820EAABC;
		  /* 820EAABCh */ case    4:  		/* cmplw CR6, R11, R26 */
		/* 820EAABCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 820EAABCh case    4:*/		return 0x820EAAC0;
		  /* 820EAAC0h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 820EAAC0h case    5:*/		if ( regs.CR[6].eq ) { return 0x820EAACC;  }
		/* 820EAAC0h case    5:*/		return 0x820EAAC4;
		  /* 820EAAC4h */ case    6:  		/* cmplw CR6, R11, R25 */
		/* 820EAAC4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820EAAC4h case    6:*/		return 0x820EAAC8;
		  /* 820EAAC8h */ case    7:  		/* bc 4, CR6_EQ, 352 */
		/* 820EAAC8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820EAC28;  }
		/* 820EAAC8h case    7:*/		return 0x820EAACC;
	}
	return 0x820EAACC;
} // Block from 820EAAACh-820EAACCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 820EAACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAACC);
		  /* 820EAACCh */ case    0:  		/* li R3, 1 */
		/* 820EAACCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820EAACCh case    0:*/		return 0x820EAAD0;
		  /* 820EAAD0h */ case    1:  		/* cmplw CR6, R11, R26 */
		/* 820EAAD0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 820EAAD0h case    1:*/		return 0x820EAAD4;
		  /* 820EAAD4h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 820EAAD4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820EAAE0;  }
		/* 820EAAD4h case    2:*/		return 0x820EAAD8;
		  /* 820EAAD8h */ case    3:  		/* cmplw CR6, R11, R25 */
		/* 820EAAD8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820EAAD8h case    3:*/		return 0x820EAADC;
		  /* 820EAADCh */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 820EAADCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x820EAAE4;  }
		/* 820EAADCh case    4:*/		return 0x820EAAE0;
	}
	return 0x820EAAE0;
} // Block from 820EAACCh-820EAAE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820EAAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAAE0);
		  /* 820EAAE0h */ case    0:  		/* mr R3, R23 */
		/* 820EAAE0h case    0:*/		regs.R3 = regs.R23;
		/* 820EAAE0h case    0:*/		return 0x820EAAE4;
	}
	return 0x820EAAE4;
} // Block from 820EAAE0h-820EAAE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EAAE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAAE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAAE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAAE4);
		  /* 820EAAE4h */ case    0:  		/* mr R7, R23 */
		/* 820EAAE4h case    0:*/		regs.R7 = regs.R23;
		/* 820EAAE4h case    0:*/		return 0x820EAAE8;
		  /* 820EAAE8h */ case    1:  		/* cmplwi CR6, R30, 1 */
		/* 820EAAE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 820EAAE8h case    1:*/		return 0x820EAAEC;
		  /* 820EAAECh */ case    2:  		/* bc 12, CR6_LT, 240 */
		/* 820EAAECh case    2:*/		if ( regs.CR[6].lt ) { return 0x820EABDC;  }
		/* 820EAAECh case    2:*/		return 0x820EAAF0;
		  /* 820EAAF0h */ case    3:  		/* lwz R8, <#[R6 + 16]> */
		/* 820EAAF0h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000010) );
		/* 820EAAF0h case    3:*/		return 0x820EAAF4;
		  /* 820EAAF4h */ case    4:  		/* addi R10, R29, 4 */
		/* 820EAAF4h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 820EAAF4h case    4:*/		return 0x820EAAF8;
		  /* 820EAAF8h */ case    5:  		/* mtspr CTR, R30 */
		/* 820EAAF8h case    5:*/		regs.CTR = regs.R30;
		/* 820EAAF8h case    5:*/		return 0x820EAAFC;
		  /* 820EAAFCh */ case    6:  		/* subf R9, R29, R28 */
		/* 820EAAFCh case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R29,regs.R28);
		/* 820EAAFCh case    6:*/		return 0x820EAB00;
		  /* 820EAB00h */ case    7:  		/* lwz R8, <#[R8]> */
		/* 820EAB00h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 820EAB00h case    7:*/		return 0x820EAB04;
		  /* 820EAB04h */ case    8:  		/* lwzx R4, <#[R9 + R10]> */
		/* 820EAB04h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820EAB04h case    8:*/		return 0x820EAB08;
		  /* 820EAB08h */ case    9:  		/* cmplw CR6, R8, R4 */
		/* 820EAB08h case    9:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R4);
		/* 820EAB08h case    9:*/		return 0x820EAB0C;
		  /* 820EAB0Ch */ case   10:  		/* bc 4, CR6_EQ, 20 */
		/* 820EAB0Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x820EAB20;  }
		/* 820EAB0Ch case   10:*/		return 0x820EAB10;
		  /* 820EAB10h */ case   11:  		/* lwz R4, <#[R10]> */
		/* 820EAB10h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 820EAB10h case   11:*/		return 0x820EAB14;
		  /* 820EAB14h */ case   12:  		/* cmpw CR6, R4, R3 */
		/* 820EAB14h case   12:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R3);
		/* 820EAB14h case   12:*/		return 0x820EAB18;
		  /* 820EAB18h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 820EAB18h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820EAB20;  }
		/* 820EAB18h case   13:*/		return 0x820EAB1C;
		  /* 820EAB1Ch */ case   14:  		/* li R7, 1 */
		/* 820EAB1Ch case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820EAB1Ch case   14:*/		return 0x820EAB20;
	}
	return 0x820EAB20;
} // Block from 820EAAE4h-820EAB20h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820EAB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAB20);
		  /* 820EAB20h */ case    0:  		/* addi R10, R10, 4 */
		/* 820EAB20h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820EAB20h case    0:*/		return 0x820EAB24;
		  /* 820EAB24h */ case    1:  		/* bc 16, CR0_LT, -32 */
		/* 820EAB24h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820EAB04;  }
		/* 820EAB24h case    1:*/		return 0x820EAB28;
		  /* 820EAB28h */ case    2:  		/* cmpwi CR6, R7, 0 */
		/* 820EAB28h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 820EAB28h case    2:*/		return 0x820EAB2C;
		  /* 820EAB2Ch */ case    3:  		/* bc 12, CR6_EQ, 176 */
		/* 820EAB2Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820EABDC;  }
		/* 820EAB2Ch case    3:*/		return 0x820EAB30;
		  /* 820EAB30h */ case    4:  		/* cmplw CR6, R11, R22 */
		/* 820EAB30h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 820EAB30h case    4:*/		return 0x820EAB34;
		  /* 820EAB34h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 820EAB34h case    5:*/		if ( regs.CR[6].eq ) { return 0x820EAB48;  }
		/* 820EAB34h case    5:*/		return 0x820EAB38;
		  /* 820EAB38h */ case    6:  		/* cmplw CR6, R11, R25 */
		/* 820EAB38h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820EAB38h case    6:*/		return 0x820EAB3C;
		  /* 820EAB3Ch */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 820EAB3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820EAB48;  }
		/* 820EAB3Ch case    7:*/		return 0x820EAB40;
		  /* 820EAB40h */ case    8:  		/* stw R27, <#[R6]> */
		/* 820EAB40h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R6 + 0x00000000) );
		/* 820EAB40h case    8:*/		return 0x820EAB44;
		  /* 820EAB44h */ case    9:  		/* b 8 */
		/* 820EAB44h case    9:*/		return 0x820EAB4C;
		/* 820EAB44h case    9:*/		return 0x820EAB48;
	}
	return 0x820EAB48;
} // Block from 820EAB20h-820EAB48h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820EAB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAB48);
		  /* 820EAB48h */ case    0:  		/* stw R23, <#[R6]> */
		/* 820EAB48h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R6 + 0x00000000) );
		/* 820EAB48h case    0:*/		return 0x820EAB4C;
	}
	return 0x820EAB4C;
} // Block from 820EAB48h-820EAB4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820EAB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAB4C);
		  /* 820EAB4Ch */ case    0:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 820EAB4Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 820EAB4Ch case    0:*/		return 0x820EAB50;
		  /* 820EAB50h */ case    1:  		/* lwz R8, <#[R31 + 256]> */
		/* 820EAB50h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000100) );
		/* 820EAB50h case    1:*/		return 0x820EAB54;
		  /* 820EAB54h */ case    2:  		/* li R7, 1 */
		/* 820EAB54h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820EAB54h case    2:*/		return 0x820EAB58;
		  /* 820EAB58h */ case    3:  		/* add R9, R11, R28 */
		/* 820EAB58h case    3:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R28);
		/* 820EAB58h case    3:*/		return 0x820EAB5C;
		  /* 820EAB5Ch */ case    4:  		/* addi R8, R8, 1 */
		/* 820EAB5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820EAB5Ch case    4:*/		return 0x820EAB60;
		  /* 820EAB60h */ case    5:  		/* add R10, R11, R29 */
		/* 820EAB60h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R29);
		/* 820EAB60h case    5:*/		return 0x820EAB64;
		  /* 820EAB64h */ case    6:  		/* stw R8, <#[R31 + 256]> */
		/* 820EAB64h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000100) );
		/* 820EAB64h case    6:*/		return 0x820EAB68;
		  /* 820EAB68h */ case    7:  		/* addi R6, R30, 1 */
		/* 820EAB68h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0x1);
		/* 820EAB68h case    7:*/		return 0x820EAB6C;
		  /* 820EAB6Ch */ case    8:  		/* lwzx R8, <#[R11 + R28]> */
		/* 820EAB6Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 820EAB6Ch case    8:*/		return 0x820EAB70;
		  /* 820EAB70h */ case    9:  		/* mr R5, R29 */
		/* 820EAB70h case    9:*/		regs.R5 = regs.R29;
		/* 820EAB70h case    9:*/		return 0x820EAB74;
		  /* 820EAB74h */ case   10:  		/* stw R8, <#[R9 + 4]> */
		/* 820EAB74h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 820EAB74h case   10:*/		return 0x820EAB78;
		  /* 820EAB78h */ case   11:  		/* mr R4, R28 */
		/* 820EAB78h case   11:*/		regs.R4 = regs.R28;
		/* 820EAB78h case   11:*/		return 0x820EAB7C;
		  /* 820EAB7Ch */ case   12:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820EAB7Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820EAB7Ch case   12:*/		return 0x820EAB80;
		  /* 820EAB80h */ case   13:  		/* mr R3, R31 */
		/* 820EAB80h case   13:*/		regs.R3 = regs.R31;
		/* 820EAB80h case   13:*/		return 0x820EAB84;
		  /* 820EAB84h */ case   14:  		/* stw R11, <#[R10 + 4]> */
		/* 820EAB84h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820EAB84h case   14:*/		return 0x820EAB88;
		  /* 820EAB88h */ case   15:  		/* bl -368 */
		/* 820EAB88h case   15:*/		regs.LR = 0x820EAB8C; return 0x820EAA18;
		/* 820EAB88h case   15:*/		return 0x820EAB8C;
		  /* 820EAB8Ch */ case   16:  		/* lwz R11, <#[R31 + 256]> */
		/* 820EAB8Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 820EAB8Ch case   16:*/		return 0x820EAB90;
		  /* 820EAB90h */ case   17:  		/* lwz R10, <#[R31 + 24]> */
		/* 820EAB90h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820EAB90h case   17:*/		return 0x820EAB94;
		  /* 820EAB94h */ case   18:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EAB94h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EAB94h case   18:*/		return 0x820EAB98;
		  /* 820EAB98h */ case   19:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820EAB98h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EAB98h case   19:*/		return 0x820EAB9C;
		  /* 820EAB9Ch */ case   20:  		/* lwz R11, <#[R10]> */
		/* 820EAB9Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820EAB9Ch case   20:*/		return 0x820EABA0;
		  /* 820EABA0h */ case   21:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820EABA0h case   21:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820EABA0h case   21:*/		return 0x820EABA4;
		  /* 820EABA4h */ case   22:  		/* cmplw CR6, R11, R27 */
		/* 820EABA4h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 820EABA4h case   22:*/		return 0x820EABA8;
		  /* 820EABA8h */ case   23:  		/* bc 4, CR6_EQ, 12 */
		/* 820EABA8h case   23:*/		if ( !regs.CR[6].eq ) { return 0x820EABB4;  }
		/* 820EABA8h case   23:*/		return 0x820EABAC;
		  /* 820EABACh */ case   24:  		/* stw R23, <#[R10]> */
		/* 820EABACh case   24:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + 0x00000000) );
		/* 820EABACh case   24:*/		return 0x820EABB0;
		  /* 820EABB0h */ case   25:  		/* b 120 */
		/* 820EABB0h case   25:*/		return 0x820EAC28;
		/* 820EABB0h case   25:*/		return 0x820EABB4;
	}
	return 0x820EABB4;
} // Block from 820EAB4Ch-820EABB4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820EABB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EABB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EABB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EABB4);
		  /* 820EABB4h */ case    0:  		/* cmplw CR6, R11, R26 */
		/* 820EABB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 820EABB4h case    0:*/		return 0x820EABB8;
		  /* 820EABB8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820EABB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820EABC4;  }
		/* 820EABB8h case    1:*/		return 0x820EABBC;
		  /* 820EABBCh */ case    2:  		/* lis R11, 29472 */
		/* 820EABBCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x7320);
		/* 820EABBCh case    2:*/		return 0x820EABC0;
		  /* 820EABC0h */ case    3:  		/* b 16 */
		/* 820EABC0h case    3:*/		return 0x820EABD0;
		/* 820EABC0h case    3:*/		return 0x820EABC4;
	}
	return 0x820EABC4;
} // Block from 820EABB4h-820EABC4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EABC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EABC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EABC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EABC4);
		  /* 820EABC4h */ case    0:  		/* cmplw CR6, R11, R24 */
		/* 820EABC4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 820EABC4h case    0:*/		return 0x820EABC8;
		  /* 820EABC8h */ case    1:  		/* bc 4, CR6_EQ, 96 */
		/* 820EABC8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820EAC28;  }
		/* 820EABC8h case    1:*/		return 0x820EABCC;
		  /* 820EABCCh */ case    2:  		/* lis R11, 29440 */
		/* 820EABCCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x7300);
		/* 820EABCCh case    2:*/		return 0x820EABD0;
	}
	return 0x820EABD0;
} // Block from 820EABC4h-820EABD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EABD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EABD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EABD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EABD0);
		  /* 820EABD0h */ case    0:  		/* ori R11, R11, 1 */
		/* 820EABD0h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820EABD0h case    0:*/		return 0x820EABD4;
		  /* 820EABD4h */ case    1:  		/* stw R11, <#[R10]> */
		/* 820EABD4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820EABD4h case    1:*/		return 0x820EABD8;
		  /* 820EABD8h */ case    2:  		/* b 80 */
		/* 820EABD8h case    2:*/		return 0x820EAC28;
		/* 820EABD8h case    2:*/		return 0x820EABDC;
	}
	return 0x820EABDC;
} // Block from 820EABD0h-820EABDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820EABDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EABDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EABDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EABDC);
		  /* 820EABDCh */ case    0:  		/* cmplw CR6, R11, R22 */
		/* 820EABDCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 820EABDCh case    0:*/		return 0x820EABE0;
		  /* 820EABE0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820EABE0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820EABEC;  }
		/* 820EABE0h case    1:*/		return 0x820EABE4;
		  /* 820EABE4h */ case    2:  		/* cmplw CR6, R11, R25 */
		/* 820EABE4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820EABE4h case    2:*/		return 0x820EABE8;
		  /* 820EABE8h */ case    3:  		/* bc 4, CR6_EQ, 64 */
		/* 820EABE8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820EAC28;  }
		/* 820EABE8h case    3:*/		return 0x820EABEC;
	}
	return 0x820EABEC;
} // Block from 820EABDCh-820EABECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820EABECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EABEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EABEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EABEC);
		  /* 820EABECh */ case    0:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 820EABECh case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 820EABECh case    0:*/		return 0x820EABF0;
		  /* 820EABF0h */ case    1:  		/* addi R10, R5, 1 */
		/* 820EABF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0x1);
		/* 820EABF0h case    1:*/		return 0x820EABF4;
		  /* 820EABF4h */ case    2:  		/* add R9, R11, R28 */
		/* 820EABF4h case    2:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R28);
		/* 820EABF4h case    2:*/		return 0x820EABF8;
		  /* 820EABF8h */ case    3:  		/* add R11, R11, R29 */
		/* 820EABF8h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 820EABF8h case    3:*/		return 0x820EABFC;
		  /* 820EABFCh */ case    4:  		/* stw R10, <#[R31 + 256]> */
		/* 820EABFCh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000100) );
		/* 820EABFCh case    4:*/		return 0x820EAC00;
		  /* 820EAC00h */ case    5:  		/* lwz R10, <#[R6 + 16]> */
		/* 820EAC00h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000010) );
		/* 820EAC00h case    5:*/		return 0x820EAC04;
		  /* 820EAC04h */ case    6:  		/* li R7, 0 */
		/* 820EAC04h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820EAC04h case    6:*/		return 0x820EAC08;
		  /* 820EAC08h */ case    7:  		/* lwz R10, <#[R10]> */
		/* 820EAC08h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820EAC08h case    7:*/		return 0x820EAC0C;
		  /* 820EAC0Ch */ case    8:  		/* addi R6, R30, 1 */
		/* 820EAC0Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0x1);
		/* 820EAC0Ch case    8:*/		return 0x820EAC10;
		  /* 820EAC10h */ case    9:  		/* mr R5, R29 */
		/* 820EAC10h case    9:*/		regs.R5 = regs.R29;
		/* 820EAC10h case    9:*/		return 0x820EAC14;
		  /* 820EAC14h */ case   10:  		/* stw R10, <#[R9 + 4]> */
		/* 820EAC14h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 820EAC14h case   10:*/		return 0x820EAC18;
		  /* 820EAC18h */ case   11:  		/* mr R4, R28 */
		/* 820EAC18h case   11:*/		regs.R4 = regs.R28;
		/* 820EAC18h case   11:*/		return 0x820EAC1C;
		  /* 820EAC1Ch */ case   12:  		/* stw R3, <#[R11 + 4]> */
		/* 820EAC1Ch case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 820EAC1Ch case   12:*/		return 0x820EAC20;
		  /* 820EAC20h */ case   13:  		/* mr R3, R31 */
		/* 820EAC20h case   13:*/		regs.R3 = regs.R31;
		/* 820EAC20h case   13:*/		return 0x820EAC24;
		  /* 820EAC24h */ case   14:  		/* bl -524 */
		/* 820EAC24h case   14:*/		regs.LR = 0x820EAC28; return 0x820EAA18;
		/* 820EAC24h case   14:*/		return 0x820EAC28;
	}
	return 0x820EAC28;
} // Block from 820EABECh-820EAC28h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820EAC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820EAC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820EAC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820EAC28);
		  /* 820EAC28h */ case    0:  		/* lwz R11, <#[R31 + 256]> */
		/* 820EAC28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000100) );
		/* 820EAC28h case    0:*/		return 0x820EAC2C;
		  /* 820EAC2Ch */ case    1:  		/* lwz R10, <#[R31 + 12]> */
		/* 820EAC2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 820EAC2Ch case    1:*/		return 0x820EAC30;
		  /* 820EAC30h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 820EAC30h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820EAC30h case    2:*/		return 0x820EAC34;
		  /* 820EAC34h */ case    3:  		/* bc 4, CR6_LT, -500 */
		/* 820EAC34h case    3:*/		if ( !regs.CR[6].lt ) { return 0x820EAA40;  }
		/* 820EAC34h case    3:*/		return 0x820EAC38;
		  /* 820EAC38h */ case    4:  		/* lwz R10, <#[R31 + 24]> */
		/* 820EAC38h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 820EAC38h case    4:*/		return 0x820EAC3C;
		  /* 820EAC3Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820EAC3Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820EAC3Ch case    5:*/		return 0x820EAC40;
		  /* 820EAC40h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820EAC40h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820EAC40h case    6:*/		return 0x820EAC44;
		  /* 820EAC44h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 820EAC44h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820EAC44h case    7:*/		return 0x820EAC48;
		  /* 820EAC48h */ case    8:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820EAC48h case    8:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820EAC48h case    8:*/		return 0x820EAC4C;
		  /* 820EAC4Ch */ case    9:  		/* cmplw CR6, R11, R26 */
		/* 820EAC4Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 820EAC4Ch case    9:*/		return 0x820EAC50;
		  /* 820EAC50h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 820EAC50h case   10:*/		if ( regs.CR[6].eq ) { return 0x820EAC5C;  }
		/* 820EAC50h case   10:*/		return 0x820EAC54;
		  /* 820EAC54h */ case   11:  		/* cmplw CR6, R11, R24 */
		/* 820EAC54h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 820EAC54h case   11:*/		return 0x820EAC58;
		  /* 820EAC58h */ case   12:  		/* bc 4, CR6_EQ, 24 */
		/* 820EAC58h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820EAC70;  }
		/* 820EAC58h case   12:*/		return 0x820EAC5C;
	}
	return 0x820EAC5C;
} // Block from 820EAC28h-820EAC5Ch (13 instructions)

