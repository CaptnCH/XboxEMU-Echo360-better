#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82115884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115884);
		  /* 82115884h */ case    0:  		/* mr R22, R14 */
		/* 82115884h case    0:*/		regs.R22 = regs.R14;
		/* 82115884h case    0:*/		return 0x82115888;
	}
	return 0x82115888;
} // Block from 82115884h-82115888h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82115888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115888);
		  /* 82115888h */ case    0:  		/* addi R11, R1, 112 */
		/* 82115888h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82115888h case    0:*/		return 0x8211588C;
		  /* 8211588Ch */ case    1:  		/* mr R23, R14 */
		/* 8211588Ch case    1:*/		regs.R23 = regs.R14;
		/* 8211588Ch case    1:*/		return 0x82115890;
		  /* 82115890h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 82115890h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82115890h case    2:*/		return 0x82115894;
		  /* 82115894h */ case    3:  		/* std R14, <#[R11]> */
		/* 82115894h case    3:*/		cpu::mem::store64( regs, regs.R14, (uint32)(regs.R11 + 0x00000000) );
		/* 82115894h case    3:*/		return 0x82115898;
		  /* 82115898h */ case    4:  		/* std R14, <#[R11 + 8]> */
		/* 82115898h case    4:*/		cpu::mem::store64( regs, regs.R14, (uint32)(regs.R11 + 0x00000008) );
		/* 82115898h case    4:*/		return 0x8211589C;
		  /* 8211589Ch */ case    5:  		/* bc 12, CR6_EQ, 1308 */
		/* 8211589Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82115DB8;  }
		/* 8211589Ch case    5:*/		return 0x821158A0;
		  /* 821158A0h */ case    6:  		/* addi R11, R1, 112 */
		/* 821158A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821158A0h case    6:*/		return 0x821158A4;
		  /* 821158A4h */ case    7:  		/* lwz R18, <#[R1 + 80]> */
		/* 821158A4h case    7:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000050) );
		/* 821158A4h case    7:*/		return 0x821158A8;
		  /* 821158A8h */ case    8:  		/* mr R24, R14 */
		/* 821158A8h case    8:*/		regs.R24 = regs.R14;
		/* 821158A8h case    8:*/		return 0x821158AC;
		  /* 821158ACh */ case    9:  		/* addi R21, R1, 128 */
		/* 821158ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R1,0x80);
		/* 821158ACh case    9:*/		return 0x821158B0;
		  /* 821158B0h */ case   10:  		/* addi R19, R11, -4 */
		/* 821158B0h case   10:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFFFFFC);
		/* 821158B0h case   10:*/		return 0x821158B4;
		  /* 821158B4h */ case   11:  		/* addi R10, R24, 4 */
		/* 821158B4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R24,0x4);
		/* 821158B4h case   11:*/		return 0x821158B8;
		  /* 821158B8h */ case   12:  		/* lwzx R11, <#[R10 + R19]> */
		/* 821158B8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R19 + 0x00000000) );
		/* 821158B8h case   12:*/		return 0x821158BC;
		  /* 821158BCh */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 821158BCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821158BCh case   13:*/		return 0x821158C0;
		  /* 821158C0h */ case   14:  		/* bc 4, CR6_EQ, 856 */
		/* 821158C0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82115C18;  }
		/* 821158C0h case   14:*/		return 0x821158C4;
		  /* 821158C4h */ case   15:  		/* addi R11, R23, 1 */
		/* 821158C4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x1);
		/* 821158C4h case   15:*/		return 0x821158C8;
		  /* 821158C8h */ case   16:  		/* li R25, 1 */
		/* 821158C8h case   16:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821158C8h case   16:*/		return 0x821158CC;
		  /* 821158CCh */ case   17:  		/* cmplw CR6, R11, R26 */
		/* 821158CCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821158CCh case   17:*/		return 0x821158D0;
		  /* 821158D0h */ case   18:  		/* bc 4, CR6_LT, 196 */
		/* 821158D0h case   18:*/		if ( !regs.CR[6].lt ) { return 0x82115994;  }
		/* 821158D0h case   18:*/		return 0x821158D4;
		  /* 821158D4h */ case   19:  		/* subf R11, R11, R26 */
		/* 821158D4h case   19:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821158D4h case   19:*/		return 0x821158D8;
		  /* 821158D8h */ case   20:  		/* mr R5, R10 */
		/* 821158D8h case   20:*/		regs.R5 = regs.R10;
		/* 821158D8h case   20:*/		return 0x821158DC;
		  /* 821158DCh */ case   21:  		/* mtspr CTR, R11 */
		/* 821158DCh case   21:*/		regs.CTR = regs.R11;
		/* 821158DCh case   21:*/		return 0x821158E0;
		  /* 821158E0h */ case   22:  		/* addi R11, R1, 112 */
		/* 821158E0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821158E0h case   22:*/		return 0x821158E4;
		  /* 821158E4h */ case   23:  		/* lwzx R11, <#[R5 + R11]> */
		/* 821158E4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 821158E4h case   23:*/		return 0x821158E8;
		  /* 821158E8h */ case   24:  		/* cmpwi CR6, R11, 0 */
		/* 821158E8h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821158E8h case   24:*/		return 0x821158EC;
		  /* 821158ECh */ case   25:  		/* bc 4, CR6_EQ, 160 */
		/* 821158ECh case   25:*/		if ( !regs.CR[6].eq ) { return 0x8211598C;  }
		/* 821158ECh case   25:*/		return 0x821158F0;
		  /* 821158F0h */ case   26:  		/* mr R7, R14 */
		/* 821158F0h case   26:*/		regs.R7 = regs.R14;
		/* 821158F0h case   26:*/		return 0x821158F4;
		  /* 821158F4h */ case   27:  		/* cmplwi CR6, R22, 0 */
		/* 821158F4h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821158F4h case   27:*/		return 0x821158F8;
		  /* 821158F8h */ case   28:  		/* bc 12, CR6_EQ, 136 */
		/* 821158F8h case   28:*/		if ( regs.CR[6].eq ) { return 0x82115980;  }
		/* 821158F8h case   28:*/		return 0x821158FC;
		  /* 821158FCh */ case   29:  		/* lwz R8, <#[R29 + 8]> */
		/* 821158FCh case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 821158FCh case   29:*/		return 0x82115900;
		  /* 82115900h */ case   30:  		/* mr R9, R14 */
		/* 82115900h case   30:*/		regs.R9 = regs.R14;
		/* 82115900h case   30:*/		return 0x82115904;
		  /* 82115904h */ case   31:  		/* rlwinm R6, R26, 2, 0, 29 */
		/* 82115904h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R26);
		/* 82115904h case   31:*/		return 0x82115908;
		  /* 82115908h */ case   32:  		/* add R11, R9, R8 */
		/* 82115908h case   32:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 82115908h case   32:*/		return 0x8211590C;
		  /* 8211590Ch */ case   33:  		/* lwz R4, <#[R31 + 20]> */
		/* 8211590Ch case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8211590Ch case   33:*/		return 0x82115910;
		  /* 82115910h */ case   34:  		/* lwzx R10, <#[R24 + R11]> */
		/* 82115910h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + regs.R11 + 0x00000000) );
		/* 82115910h case   34:*/		return 0x82115914;
		  /* 82115914h */ case   35:  		/* lwzx R11, <#[R5 + R11]> */
		/* 82115914h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 82115914h case   35:*/		return 0x82115918;
		  /* 82115918h */ case   36:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82115918h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82115918h case   36:*/		return 0x8211591C;
		  /* 8211591Ch */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211591Ch case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211591Ch case   37:*/		return 0x82115920;
		  /* 82115920h */ case   38:  		/* lwzx R3, <#[R10 + R4]> */
		/* 82115920h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82115920h case   38:*/		return 0x82115924;
		  /* 82115924h */ case   39:  		/* lwzx R4, <#[R11 + R4]> */
		/* 82115924h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82115924h case   39:*/		return 0x82115928;
		  /* 82115928h */ case   40:  		/* lwz R3, <#[R3 + 4]> */
		/* 82115928h case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82115928h case   40:*/		return 0x8211592C;
		  /* 8211592Ch */ case   41:  		/* lwz R4, <#[R4 + 4]> */
		/* 8211592Ch case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000004) );
		/* 8211592Ch case   41:*/		return 0x82115930;
		  /* 82115930h */ case   42:  		/* cmplw CR6, R3, R4 */
		/* 82115930h case   42:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R4);
		/* 82115930h case   42:*/		return 0x82115934;
		  /* 82115934h */ case   43:  		/* bc 4, CR6_EQ, 76 */
		/* 82115934h case   43:*/		if ( !regs.CR[6].eq ) { return 0x82115980;  }
		/* 82115934h case   43:*/		return 0x82115938;
		  /* 82115938h */ case   44:  		/* lwz R4, <#[R31 + 20]> */
		/* 82115938h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 82115938h case   44:*/		return 0x8211593C;
		  /* 8211593Ch */ case   45:  		/* lwzx R3, <#[R10 + R4]> */
		/* 8211593Ch case   45:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8211593Ch case   45:*/		return 0x82115940;
		  /* 82115940h */ case   46:  		/* lwzx R4, <#[R11 + R4]> */
		/* 82115940h case   46:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82115940h case   46:*/		return 0x82115944;
		  /* 82115944h */ case   47:  		/* lwz R3, <#[R3 + 8]> */
		/* 82115944h case   47:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000008) );
		/* 82115944h case   47:*/		return 0x82115948;
		  /* 82115948h */ case   48:  		/* lwz R4, <#[R4 + 8]> */
		/* 82115948h case   48:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82115948h case   48:*/		return 0x8211594C;
		  /* 8211594Ch */ case   49:  		/* cmplw CR6, R3, R4 */
		/* 8211594Ch case   49:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R4);
		/* 8211594Ch case   49:*/		return 0x82115950;
		  /* 82115950h */ case   50:  		/* bc 4, CR6_EQ, 48 */
		/* 82115950h case   50:*/		if ( !regs.CR[6].eq ) { return 0x82115980;  }
		/* 82115950h case   50:*/		return 0x82115954;
		  /* 82115954h */ case   51:  		/* lwz R4, <#[R31 + 20]> */
		/* 82115954h case   51:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 82115954h case   51:*/		return 0x82115958;
		  /* 82115958h */ case   52:  		/* lwzx R10, <#[R4 + R10]> */
		/* 82115958h case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + regs.R10 + 0x00000000) );
		/* 82115958h case   52:*/		return 0x8211595C;
		  /* 8211595Ch */ case   53:  		/* lwzx R11, <#[R11 + R4]> */
		/* 8211595Ch case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8211595Ch case   53:*/		return 0x82115960;
		  /* 82115960h */ case   54:  		/* lwz R10, <#[R10 + 12]> */
		/* 82115960h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82115960h case   54:*/		return 0x82115964;
		  /* 82115964h */ case   55:  		/* lwz R11, <#[R11 + 12]> */
		/* 82115964h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82115964h case   55:*/		return 0x82115968;
		  /* 82115968h */ case   56:  		/* cmplw CR6, R10, R11 */
		/* 82115968h case   56:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82115968h case   56:*/		return 0x8211596C;
		  /* 8211596Ch */ case   57:  		/* bc 4, CR6_EQ, 20 */
		/* 8211596Ch case   57:*/		if ( !regs.CR[6].eq ) { return 0x82115980;  }
		/* 8211596Ch case   57:*/		return 0x82115970;
		  /* 82115970h */ case   58:  		/* addi R7, R7, 1 */
		/* 82115970h case   58:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82115970h case   58:*/		return 0x82115974;
		  /* 82115974h */ case   59:  		/* add R9, R6, R9 */
		/* 82115974h case   59:*/		cpu::op::add<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 82115974h case   59:*/		return 0x82115978;
		  /* 82115978h */ case   60:  		/* cmplw CR6, R7, R22 */
		/* 82115978h case   60:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R22);
		/* 82115978h case   60:*/		return 0x8211597C;
		  /* 8211597Ch */ case   61:  		/* bc 12, CR6_LT, -116 */
		/* 8211597Ch case   61:*/		if ( regs.CR[6].lt ) { return 0x82115908;  }
		/* 8211597Ch case   61:*/		return 0x82115980;
	}
	return 0x82115980;
} // Block from 82115888h-82115980h (62 instructions)

//////////////////////////////////////////////////////
// Block at 82115980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115980);
		  /* 82115980h */ case    0:  		/* cmplw CR6, R7, R22 */
		/* 82115980h case    0:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R22);
		/* 82115980h case    0:*/		return 0x82115984;
		  /* 82115984h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82115984h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211598C;  }
		/* 82115984h case    1:*/		return 0x82115988;
		  /* 82115988h */ case    2:  		/* addi R25, R25, 1 */
		/* 82115988h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82115988h case    2:*/		return 0x8211598C;
	}
	return 0x8211598C;
} // Block from 82115980h-8211598Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211598Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211598C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211598C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211598C);
		  /* 8211598Ch */ case    0:  		/* addi R5, R5, 4 */
		/* 8211598Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x4);
		/* 8211598Ch case    0:*/		return 0x82115990;
		  /* 82115990h */ case    1:  		/* bc 16, CR0_LT, -176 */
		/* 82115990h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821158E0;  }
		/* 82115990h case    1:*/		return 0x82115994;
	}
	return 0x82115994;
} // Block from 8211598Ch-82115994h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82115994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115994);
		  /* 82115994h */ case    0:  		/* lwz R4, <#[R29]> */
		/* 82115994h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 82115994h case    0:*/		return 0x82115998;
		  /* 82115998h */ case    1:  		/* mr R6, R15 */
		/* 82115998h case    1:*/		regs.R6 = regs.R15;
		/* 82115998h case    1:*/		return 0x8211599C;
		  /* 8211599Ch */ case    2:  		/* mr R5, R15 */
		/* 8211599Ch case    2:*/		regs.R5 = regs.R15;
		/* 8211599Ch case    2:*/		return 0x821159A0;
		  /* 821159A0h */ case    3:  		/* rlwimi R4, R25, 0, 12, 31 */
		/* 821159A0h case    3:*/		cpu::op::rlwimi<0,0,12,31>(regs,&regs.R4,regs.R25);
		/* 821159A0h case    3:*/		return 0x821159A4;
		  /* 821159A4h */ case    4:  		/* mr R3, R31 */
		/* 821159A4h case    4:*/		regs.R3 = regs.R31;
		/* 821159A4h case    4:*/		return 0x821159A8;
		  /* 821159A8h */ case    5:  		/* bl -100064 */
		/* 821159A8h case    5:*/		regs.LR = 0x821159AC; return 0x820FD2C8;
		/* 821159A8h case    5:*/		return 0x821159AC;
		  /* 821159ACh */ case    6:  		/* mr R28, R3 */
		/* 821159ACh case    6:*/		regs.R28 = regs.R3;
		/* 821159ACh case    6:*/		return 0x821159B0;
		  /* 821159B0h */ case    7:  		/* cmpwi CR6, R3, -1 */
		/* 821159B0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821159B0h case    7:*/		return 0x821159B4;
		  /* 821159B4h */ case    8:  		/* bc 12, CR6_EQ, 1372 */
		/* 821159B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x82115F10;  }
		/* 821159B4h case    8:*/		return 0x821159B8;
		  /* 821159B8h */ case    9:  		/* lwz R11, <#[R31 + 24]> */
		/* 821159B8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821159B8h case    9:*/		return 0x821159BC;
		  /* 821159BCh */ case   10:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 821159BCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 821159BCh case   10:*/		return 0x821159C0;
		  /* 821159C0h */ case   11:  		/* mr R4, R29 */
		/* 821159C0h case   11:*/		regs.R4 = regs.R29;
		/* 821159C0h case   11:*/		return 0x821159C4;
		  /* 821159C4h */ case   12:  		/* lwzx R30, <#[R10 + R11]> */
		/* 821159C4h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821159C4h case   12:*/		return 0x821159C8;
		  /* 821159C8h */ case   13:  		/* mr R3, R30 */
		/* 821159C8h case   13:*/		regs.R3 = regs.R30;
		/* 821159C8h case   13:*/		return 0x821159CC;
		  /* 821159CCh */ case   14:  		/* bl -105180 */
		/* 821159CCh case   14:*/		regs.LR = 0x821159D0; return 0x820FBEF0;
		/* 821159CCh case   14:*/		return 0x821159D0;
		  /* 821159D0h */ case   15:  		/* addi R11, R25, -1 */
		/* 821159D0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821159D0h case   15:*/		return 0x821159D4;
		  /* 821159D4h */ case   16:  		/* cmplw CR6, R26, R23 */
		/* 821159D4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R23);
		/* 821159D4h case   16:*/		return 0x821159D8;
		  /* 821159D8h */ case   17:  		/* bc 4, CR6_GT, 332 */
		/* 821159D8h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82115B24;  }
		/* 821159D8h case   17:*/		return 0x821159DC;
		  /* 821159DCh */ case   18:  		/* rlwinm R4, R26, 2, 0, 29 */
		/* 821159DCh case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R26);
		/* 821159DCh case   18:*/		return 0x821159E0;
		  /* 821159E0h */ case   19:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821159E0h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821159E0h case   19:*/		return 0x821159E4;
		  /* 821159E4h */ case   20:  		/* mr R9, R4 */
		/* 821159E4h case   20:*/		regs.R9 = regs.R4;
		/* 821159E4h case   20:*/		return 0x821159E8;
		  /* 821159E8h */ case   21:  		/* subf R27, R23, R26 */
		/* 821159E8h case   21:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R23,regs.R26);
		/* 821159E8h case   21:*/		return 0x821159EC;
		  /* 821159ECh */ case   22:  		/* addi R9, R9, -4 */
		/* 821159ECh case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 821159ECh case   22:*/		return 0x821159F0;
		  /* 821159F0h */ case   23:  		/* addi R3, R1, 112 */
		/* 821159F0h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821159F0h case   23:*/		return 0x821159F4;
		  /* 821159F4h */ case   24:  		/* lwzx R11, <#[R9 + R3]> */
		/* 821159F4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 821159F4h case   24:*/		return 0x821159F8;
		  /* 821159F8h */ case   25:  		/* cmpwi CR6, R11, 0 */
		/* 821159F8h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821159F8h case   25:*/		return 0x821159FC;
		  /* 821159FCh */ case   26:  		/* bc 4, CR6_EQ, 288 */
		/* 821159FCh case   26:*/		if ( !regs.CR[6].eq ) { return 0x82115B1C;  }
		/* 821159FCh case   26:*/		return 0x82115A00;
		  /* 82115A00h */ case   27:  		/* mr R6, R14 */
		/* 82115A00h case   27:*/		regs.R6 = regs.R14;
		/* 82115A00h case   27:*/		return 0x82115A04;
		  /* 82115A04h */ case   28:  		/* cmplwi CR6, R22, 0 */
		/* 82115A04h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82115A04h case   28:*/		return 0x82115A08;
		  /* 82115A08h */ case   29:  		/* bc 12, CR6_EQ, 200 */
		/* 82115A08h case   29:*/		if ( regs.CR[6].eq ) { return 0x82115AD0;  }
		/* 82115A08h case   29:*/		return 0x82115A0C;
		  /* 82115A0Ch */ case   30:  		/* lwz R7, <#[R29 + 8]> */
		/* 82115A0Ch case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82115A0Ch case   30:*/		return 0x82115A10;
		  /* 82115A10h */ case   31:  		/* mr R8, R14 */
		/* 82115A10h case   31:*/		regs.R8 = regs.R14;
		/* 82115A10h case   31:*/		return 0x82115A14;
		  /* 82115A14h */ case   32:  		/* add R11, R8, R7 */
		/* 82115A14h case   32:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R7);
		/* 82115A14h case   32:*/		return 0x82115A18;
		  /* 82115A18h */ case   33:  		/* lwz R15, <#[R31 + 20]> */
		/* 82115A18h case   33:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R31 + 0x00000014) );
		/* 82115A18h case   33:*/		return 0x82115A1C;
		  /* 82115A1Ch */ case   34:  		/* lwzx R10, <#[R24 + R11]> */
		/* 82115A1Ch case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + regs.R11 + 0x00000000) );
		/* 82115A1Ch case   34:*/		return 0x82115A20;
		  /* 82115A20h */ case   35:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82115A20h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82115A20h case   35:*/		return 0x82115A24;
		  /* 82115A24h */ case   36:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82115A24h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82115A24h case   36:*/		return 0x82115A28;
		  /* 82115A28h */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82115A28h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82115A28h case   37:*/		return 0x82115A2C;
		  /* 82115A2Ch */ case   38:  		/* lwzx R14, <#[R15 + R10]> */
		/* 82115A2Ch case   38:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R15 + regs.R10 + 0x00000000) );
		/* 82115A2Ch case   38:*/		return 0x82115A30;
		  /* 82115A30h */ case   39:  		/* lwzx R15, <#[R11 + R15]> */
		/* 82115A30h case   39:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82115A30h case   39:*/		return 0x82115A34;
		  /* 82115A34h */ case   40:  		/* lwz R14, <#[R14 + 4]> */
		/* 82115A34h case   40:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000004) );
		/* 82115A34h case   40:*/		return 0x82115A38;
		  /* 82115A38h */ case   41:  		/* lwz R15, <#[R15 + 4]> */
		/* 82115A38h case   41:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R15 + 0x00000004) );
		/* 82115A38h case   41:*/		return 0x82115A3C;
		  /* 82115A3Ch */ case   42:  		/* cmplw CR6, R14, R15 */
		/* 82115A3Ch case   42:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R15);
		/* 82115A3Ch case   42:*/		return 0x82115A40;
		  /* 82115A40h */ case   43:  		/* bc 4, CR6_EQ, 76 */
		/* 82115A40h case   43:*/		if ( !regs.CR[6].eq ) { return 0x82115A8C;  }
		/* 82115A40h case   43:*/		return 0x82115A44;
		  /* 82115A44h */ case   44:  		/* lwz R15, <#[R31 + 20]> */
		/* 82115A44h case   44:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R31 + 0x00000014) );
		/* 82115A44h case   44:*/		return 0x82115A48;
		  /* 82115A48h */ case   45:  		/* lwzx R14, <#[R15 + R10]> */
		/* 82115A48h case   45:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R15 + regs.R10 + 0x00000000) );
		/* 82115A48h case   45:*/		return 0x82115A4C;
		  /* 82115A4Ch */ case   46:  		/* lwzx R15, <#[R11 + R15]> */
		/* 82115A4Ch case   46:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82115A4Ch case   46:*/		return 0x82115A50;
		  /* 82115A50h */ case   47:  		/* lwz R14, <#[R14 + 8]> */
		/* 82115A50h case   47:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000008) );
		/* 82115A50h case   47:*/		return 0x82115A54;
		  /* 82115A54h */ case   48:  		/* lwz R15, <#[R15 + 8]> */
		/* 82115A54h case   48:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R15 + 0x00000008) );
		/* 82115A54h case   48:*/		return 0x82115A58;
		  /* 82115A58h */ case   49:  		/* cmplw CR6, R14, R15 */
		/* 82115A58h case   49:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R15);
		/* 82115A58h case   49:*/		return 0x82115A5C;
		  /* 82115A5Ch */ case   50:  		/* bc 4, CR6_EQ, 48 */
		/* 82115A5Ch case   50:*/		if ( !regs.CR[6].eq ) { return 0x82115A8C;  }
		/* 82115A5Ch case   50:*/		return 0x82115A60;
		  /* 82115A60h */ case   51:  		/* lwz R15, <#[R31 + 20]> */
		/* 82115A60h case   51:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R31 + 0x00000014) );
		/* 82115A60h case   51:*/		return 0x82115A64;
		  /* 82115A64h */ case   52:  		/* lwzx R10, <#[R15 + R10]> */
		/* 82115A64h case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + regs.R10 + 0x00000000) );
		/* 82115A64h case   52:*/		return 0x82115A68;
		  /* 82115A68h */ case   53:  		/* lwzx R11, <#[R11 + R15]> */
		/* 82115A68h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R15 + 0x00000000) );
		/* 82115A68h case   53:*/		return 0x82115A6C;
		  /* 82115A6Ch */ case   54:  		/* lwz R10, <#[R10 + 12]> */
		/* 82115A6Ch case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82115A6Ch case   54:*/		return 0x82115A70;
		  /* 82115A70h */ case   55:  		/* lwz R11, <#[R11 + 12]> */
		/* 82115A70h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82115A70h case   55:*/		return 0x82115A74;
		  /* 82115A74h */ case   56:  		/* cmplw CR6, R10, R11 */
		/* 82115A74h case   56:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82115A74h case   56:*/		return 0x82115A78;
		  /* 82115A78h */ case   57:  		/* bc 4, CR6_EQ, 20 */
		/* 82115A78h case   57:*/		if ( !regs.CR[6].eq ) { return 0x82115A8C;  }
		/* 82115A78h case   57:*/		return 0x82115A7C;
		  /* 82115A7Ch */ case   58:  		/* addi R6, R6, 1 */
		/* 82115A7Ch case   58:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82115A7Ch case   58:*/		return 0x82115A80;
		  /* 82115A80h */ case   59:  		/* add R8, R8, R4 */
		/* 82115A80h case   59:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R4);
		/* 82115A80h case   59:*/		return 0x82115A84;
		  /* 82115A84h */ case   60:  		/* cmplw CR6, R6, R22 */
		/* 82115A84h case   60:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R22);
		/* 82115A84h case   60:*/		return 0x82115A88;
		  /* 82115A88h */ case   61:  		/* bc 12, CR6_LT, -116 */
		/* 82115A88h case   61:*/		if ( regs.CR[6].lt ) { return 0x82115A14;  }
		/* 82115A88h case   61:*/		return 0x82115A8C;
	}
	return 0x82115A8C;
} // Block from 82115994h-82115A8Ch (62 instructions)

//////////////////////////////////////////////////////
// Block at 82115A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115A8C);
		  /* 82115A8Ch */ case    0:  		/* cmplw CR6, R6, R22 */
		/* 82115A8Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R22);
		/* 82115A8Ch case    0:*/		return 0x82115A90;
		  /* 82115A90h */ case    1:  		/* bc 12, CR6_LT, 132 */
		/* 82115A90h case    1:*/		if ( regs.CR[6].lt ) { return 0x82115B14;  }
		/* 82115A90h case    1:*/		return 0x82115A94;
		  /* 82115A94h */ case    2:  		/* mtspr CTR, R22 */
		/* 82115A94h case    2:*/		regs.CTR = regs.R22;
		/* 82115A94h case    2:*/		return 0x82115A98;
		  /* 82115A98h */ case    3:  		/* rlwinm R8, R25, 2, 0, 29 */
		/* 82115A98h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R25);
		/* 82115A98h case    3:*/		return 0x82115A9C;
		  /* 82115A9Ch */ case    4:  		/* mr R10, R5 */
		/* 82115A9Ch case    4:*/		regs.R10 = regs.R5;
		/* 82115A9Ch case    4:*/		return 0x82115AA0;
		  /* 82115AA0h */ case    5:  		/* mr R11, R9 */
		/* 82115AA0h case    5:*/		regs.R11 = regs.R9;
		/* 82115AA0h case    5:*/		return 0x82115AA4;
		  /* 82115AA4h */ case    6:  		/* lwz R7, <#[R29 + 8]> */
		/* 82115AA4h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000008) );
		/* 82115AA4h case    6:*/		return 0x82115AA8;
		  /* 82115AA8h */ case    7:  		/* li R6, 1 */
		/* 82115AA8h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82115AA8h case    7:*/		return 0x82115AAC;
		  /* 82115AACh */ case    8:  		/* lwz R15, <#[R30 + 8]> */
		/* 82115AACh case    8:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R30 + 0x00000008) );
		/* 82115AACh case    8:*/		return 0x82115AB0;
		  /* 82115AB0h */ case    9:  		/* stwx R6, <#[R9 + R3]> */
		/* 82115AB0h case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82115AB0h case    9:*/		return 0x82115AB4;
		  /* 82115AB4h */ case   10:  		/* lwzx R7, <#[R11 + R7]> */
		/* 82115AB4h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82115AB4h case   10:*/		return 0x82115AB8;
		  /* 82115AB8h */ case   11:  		/* add R11, R11, R4 */
		/* 82115AB8h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82115AB8h case   11:*/		return 0x82115ABC;
		  /* 82115ABCh */ case   12:  		/* stwx R7, <#[R10 + R15]> */
		/* 82115ABCh case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R15 + 0x00000000) );
		/* 82115ABCh case   12:*/		return 0x82115AC0;
		  /* 82115AC0h */ case   13:  		/* add R10, R8, R10 */
		/* 82115AC0h case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82115AC0h case   13:*/		return 0x82115AC4;
		  /* 82115AC4h */ case   14:  		/* bc 16, CR0_LT, -32 */
		/* 82115AC4h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82115AA4;  }
		/* 82115AC4h case   14:*/		return 0x82115AC8;
		  /* 82115AC8h */ case   15:  		/* li R14, 0 */
		/* 82115AC8h case   15:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 82115AC8h case   15:*/		return 0x82115ACC;
		  /* 82115ACCh */ case   16:  		/* li R15, -1 */
		/* 82115ACCh case   16:*/		cpu::op::li<0>(regs,&regs.R15,0xFFFFFFFF);
		/* 82115ACCh case   16:*/		return 0x82115AD0;
	}
	return 0x82115AD0;
} // Block from 82115A8Ch-82115AD0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82115AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115AD0);
		  /* 82115AD0h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82115AD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82115AD0h case    0:*/		return 0x82115AD4;
		  /* 82115AD4h */ case    1:  		/* lis R10, 20480 */
		/* 82115AD4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 82115AD4h case    1:*/		return 0x82115AD8;
		  /* 82115AD8h */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82115AD8h case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82115AD8h case    2:*/		return 0x82115ADC;
		  /* 82115ADCh */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82115ADCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82115ADCh case    3:*/		return 0x82115AE0;
		  /* 82115AE0h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 82115AE0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82115B0C;  }
		/* 82115AE0h case    4:*/		return 0x82115AE4;
		  /* 82115AE4h */ case    5:  		/* lwz R11, <#[R29 + 16]> */
		/* 82115AE4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82115AE4h case    5:*/		return 0x82115AE8;
		  /* 82115AE8h */ case    6:  		/* lwz R10, <#[R30 + 16]> */
		/* 82115AE8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82115AE8h case    6:*/		return 0x82115AEC;
		  /* 82115AECh */ case    7:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82115AECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82115AECh case    7:*/		return 0x82115AF0;
		  /* 82115AF0h */ case    8:  		/* stwx R11, <#[R5 + R10]> */
		/* 82115AF0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 82115AF0h case    8:*/		return 0x82115AF4;
		  /* 82115AF4h */ case    9:  		/* lwz R11, <#[R30 + 16]> */
		/* 82115AF4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82115AF4h case    9:*/		return 0x82115AF8;
		  /* 82115AF8h */ case   10:  		/* lwz R10, <#[R31 + 20]> */
		/* 82115AF8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82115AF8h case   10:*/		return 0x82115AFC;
		  /* 82115AFCh */ case   11:  		/* lwzx R11, <#[R5 + R11]> */
		/* 82115AFCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 82115AFCh case   11:*/		return 0x82115B00;
		  /* 82115B00h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82115B00h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82115B00h case   12:*/		return 0x82115B04;
		  /* 82115B04h */ case   13:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82115B04h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82115B04h case   13:*/		return 0x82115B08;
		  /* 82115B08h */ case   14:  		/* stw R28, <#[R11 + 72]> */
		/* 82115B08h case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000048) );
		/* 82115B08h case   14:*/		return 0x82115B0C;
	}
	return 0x82115B0C;
} // Block from 82115AD0h-82115B0Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82115B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115B0C);
		  /* 82115B0Ch */ case    0:  		/* addi R5, R5, -4 */
		/* 82115B0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFFFC);
		/* 82115B0Ch case    0:*/		return 0x82115B10;
		  /* 82115B10h */ case    1:  		/* b 12 */
		/* 82115B10h case    1:*/		return 0x82115B1C;
		/* 82115B10h case    1:*/		return 0x82115B14;
	}
	return 0x82115B14;
} // Block from 82115B0Ch-82115B14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82115B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115B14);
		  /* 82115B14h */ case    0:  		/* li R14, 0 */
		/* 82115B14h case    0:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 82115B14h case    0:*/		return 0x82115B18;
		  /* 82115B18h */ case    1:  		/* li R15, -1 */
		/* 82115B18h case    1:*/		cpu::op::li<0>(regs,&regs.R15,0xFFFFFFFF);
		/* 82115B18h case    1:*/		return 0x82115B1C;
	}
	return 0x82115B1C;
} // Block from 82115B14h-82115B1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82115B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115B1C);
		  /* 82115B1Ch */ case    0:  		/* addic. R27, R27, -1 */
		/* 82115B1Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 82115B1Ch case    0:*/		return 0x82115B20;
		  /* 82115B20h */ case    1:  		/* bc 4, CR0_EQ, -308 */
		/* 82115B20h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821159EC;  }
		/* 82115B20h case    1:*/		return 0x82115B24;
	}
	return 0x82115B24;
} // Block from 82115B1Ch-82115B24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82115B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115B24);
		  /* 82115B24h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82115B24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82115B24h case    0:*/		return 0x82115B28;
		  /* 82115B28h */ case    1:  		/* lis R10, 20480 */
		/* 82115B28h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 82115B28h case    1:*/		return 0x82115B2C;
		  /* 82115B2Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82115B2Ch case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82115B2Ch case    2:*/		return 0x82115B30;
		  /* 82115B30h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82115B30h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82115B30h case    3:*/		return 0x82115B34;
		  /* 82115B34h */ case    4:  		/* bc 4, CR6_EQ, 228 */
		/* 82115B34h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82115C18;  }
		/* 82115B34h case    4:*/		return 0x82115B38;
		  /* 82115B38h */ case    5:  		/* cmplw CR6, R25, R26 */
		/* 82115B38h case    5:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R26);
		/* 82115B38h case    5:*/		return 0x82115B3C;
		  /* 82115B3Ch */ case    6:  		/* bc 4, CR6_EQ, 24 */
		/* 82115B3Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82115B54;  }
		/* 82115B3Ch case    6:*/		return 0x82115B40;
		  /* 82115B40h */ case    7:  		/* lwz R11, <#[R29 + 16]> */
		/* 82115B40h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82115B40h case    7:*/		return 0x82115B44;
		  /* 82115B44h */ case    8:  		/* lwz R10, <#[R30 + 16]> */
		/* 82115B44h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82115B44h case    8:*/		return 0x82115B48;
		  /* 82115B48h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 82115B48h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82115B48h case    9:*/		return 0x82115B4C;
		  /* 82115B4Ch */ case   10:  		/* stw R11, <#[R10]> */
		/* 82115B4Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82115B4Ch case   10:*/		return 0x82115B50;
		  /* 82115B50h */ case   11:  		/* b 176 */
		/* 82115B50h case   11:*/		return 0x82115C00;
		/* 82115B50h case   11:*/		return 0x82115B54;
	}
	return 0x82115B54;
} // Block from 82115B24h-82115B54h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82115B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115B54);
		  /* 82115B54h */ case    0:  		/* mr R6, R20 */
		/* 82115B54h case    0:*/		regs.R6 = regs.R20;
		/* 82115B54h case    0:*/		return 0x82115B58;
		  /* 82115B58h */ case    1:  		/* lwz R4, <#[R31 + 136]> */
		/* 82115B58h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 82115B58h case    1:*/		return 0x82115B5C;
		  /* 82115B5Ch */ case    2:  		/* mr R5, R18 */
		/* 82115B5Ch case    2:*/		regs.R5 = regs.R18;
		/* 82115B5Ch case    2:*/		return 0x82115B60;
		  /* 82115B60h */ case    3:  		/* fmr FR1, FR31 */
		/* 82115B60h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82115B60h case    3:*/		return 0x82115B64;
		  /* 82115B64h */ case    4:  		/* mr R3, R31 */
		/* 82115B64h case    4:*/		regs.R3 = regs.R31;
		/* 82115B64h case    4:*/		return 0x82115B68;
		  /* 82115B68h */ case    5:  		/* bl -100672 */
		/* 82115B68h case    5:*/		regs.LR = 0x82115B6C; return 0x820FD228;
		/* 82115B68h case    5:*/		return 0x82115B6C;
		  /* 82115B6Ch */ case    6:  		/* lwz R11, <#[R30 + 16]> */
		/* 82115B6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82115B6Ch case    6:*/		return 0x82115B70;
		  /* 82115B70h */ case    7:  		/* stw R3, <#[R21]> */
		/* 82115B70h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R21 + 0x00000000) );
		/* 82115B70h case    7:*/		return 0x82115B74;
		  /* 82115B74h */ case    8:  		/* stw R3, <#[R11]> */
		/* 82115B74h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82115B74h case    8:*/		return 0x82115B78;
		  /* 82115B78h */ case    9:  		/* lwz R11, <#[R30 + 16]> */
		/* 82115B78h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82115B78h case    9:*/		return 0x82115B7C;
		  /* 82115B7Ch */ case   10:  		/* lwz R11, <#[R11]> */
		/* 82115B7Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82115B7Ch case   10:*/		return 0x82115B80;
		  /* 82115B80h */ case   11:  		/* cmpwi CR6, R11, -1 */
		/* 82115B80h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82115B80h case   11:*/		return 0x82115B84;
		  /* 82115B84h */ case   12:  		/* bc 12, CR6_EQ, 908 */
		/* 82115B84h case   12:*/		if ( regs.CR[6].eq ) { return 0x82115F10;  }
		/* 82115B84h case   12:*/		return 0x82115B88;
		  /* 82115B88h */ case   13:  		/* lwz R11, <#[R29 + 16]> */
		/* 82115B88h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82115B88h case   13:*/		return 0x82115B8C;
		  /* 82115B8Ch */ case   14:  		/* li R5, 0 */
		/* 82115B8Ch case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82115B8Ch case   14:*/		return 0x82115B90;
		  /* 82115B90h */ case   15:  		/* lwz R10, <#[R30 + 16]> */
		/* 82115B90h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82115B90h case   15:*/		return 0x82115B94;
		  /* 82115B94h */ case   16:  		/* mr R4, R30 */
		/* 82115B94h case   16:*/		regs.R4 = regs.R30;
		/* 82115B94h case   16:*/		return 0x82115B98;
		  /* 82115B98h */ case   17:  		/* lwz R9, <#[R31 + 20]> */
		/* 82115B98h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82115B98h case   17:*/		return 0x82115B9C;
		  /* 82115B9Ch */ case   18:  		/* mr R3, R31 */
		/* 82115B9Ch case   18:*/		regs.R3 = regs.R31;
		/* 82115B9Ch case   18:*/		return 0x82115BA0;
		  /* 82115BA0h */ case   19:  		/* lwz R11, <#[R11]> */
		/* 82115BA0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82115BA0h case   19:*/		return 0x82115BA4;
		  /* 82115BA4h */ case   20:  		/* lwz R10, <#[R10]> */
		/* 82115BA4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82115BA4h case   20:*/		return 0x82115BA8;
		  /* 82115BA8h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82115BA8h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82115BA8h case   21:*/		return 0x82115BAC;
		  /* 82115BACh */ case   22:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82115BACh case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82115BACh case   22:*/		return 0x82115BB0;
		  /* 82115BB0h */ case   23:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82115BB0h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82115BB0h case   23:*/		return 0x82115BB4;
		  /* 82115BB4h */ case   24:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82115BB4h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82115BB4h case   24:*/		return 0x82115BB8;
		  /* 82115BB8h */ case   25:  		/* lwz R11, <#[R11 + 20]> */
		/* 82115BB8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82115BB8h case   25:*/		return 0x82115BBC;
		  /* 82115BBCh */ case   26:  		/* stw R11, <#[R10 + 20]> */
		/* 82115BBCh case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 82115BBCh case   26:*/		return 0x82115BC0;
		  /* 82115BC0h */ case   27:  		/* lwz R11, <#[R30 + 16]> */
		/* 82115BC0h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82115BC0h case   27:*/		return 0x82115BC4;
		  /* 82115BC4h */ case   28:  		/* lwz R10, <#[R29 + 16]> */
		/* 82115BC4h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 82115BC4h case   28:*/		return 0x82115BC8;
		  /* 82115BC8h */ case   29:  		/* lwz R9, <#[R31 + 20]> */
		/* 82115BC8h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82115BC8h case   29:*/		return 0x82115BCC;
		  /* 82115BCCh */ case   30:  		/* lwz R11, <#[R11]> */
		/* 82115BCCh case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82115BCCh case   30:*/		return 0x82115BD0;
		  /* 82115BD0h */ case   31:  		/* lwz R10, <#[R10]> */
		/* 82115BD0h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82115BD0h case   31:*/		return 0x82115BD4;
		  /* 82115BD4h */ case   32:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82115BD4h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82115BD4h case   32:*/		return 0x82115BD8;
		  /* 82115BD8h */ case   33:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82115BD8h case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82115BD8h case   33:*/		return 0x82115BDC;
		  /* 82115BDCh */ case   34:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82115BDCh case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82115BDCh case   34:*/		return 0x82115BE0;
		  /* 82115BE0h */ case   35:  		/* lwz R10, <#[R10 + 24]> */
		/* 82115BE0h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 82115BE0h case   35:*/		return 0x82115BE4;
		  /* 82115BE4h */ case   36:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82115BE4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82115BE4h case   36:*/		return 0x82115BE8;
		  /* 82115BE8h */ case   37:  		/* stw R10, <#[R11 + 24]> */
		/* 82115BE8h case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 82115BE8h case   37:*/		return 0x82115BEC;
		  /* 82115BECh */ case   38:  		/* bl -72316 */
		/* 82115BECh case   38:*/		regs.LR = 0x82115BF0; return 0x82104170;
		/* 82115BECh case   38:*/		return 0x82115BF0;
		  /* 82115BF0h */ case   39:  		/* cmpwi CR0, R3, 0 */
		/* 82115BF0h case   39:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82115BF0h case   39:*/		return 0x82115BF4;
		  /* 82115BF4h */ case   40:  		/* bc 12, CR0_LT, 616 */
		/* 82115BF4h case   40:*/		if ( regs.CR[0].lt ) { return 0x82115E5C;  }
		/* 82115BF4h case   40:*/		return 0x82115BF8;
		  /* 82115BF8h */ case   41:  		/* addi R20, R20, 1 */
		/* 82115BF8h case   41:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 82115BF8h case   41:*/		return 0x82115BFC;
		  /* 82115BFCh */ case   42:  		/* addi R21, R21, 4 */
		/* 82115BFCh case   42:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 82115BFCh case   42:*/		return 0x82115C00;
	}
	return 0x82115C00;
} // Block from 82115B54h-82115C00h (43 instructions)

//////////////////////////////////////////////////////
// Block at 82115C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115C00);
		  /* 82115C00h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 82115C00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82115C00h case    0:*/		return 0x82115C04;
		  /* 82115C04h */ case    1:  		/* lwz R10, <#[R31 + 20]> */
		/* 82115C04h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82115C04h case    1:*/		return 0x82115C08;
		  /* 82115C08h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 82115C08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82115C08h case    2:*/		return 0x82115C0C;
		  /* 82115C0Ch */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82115C0Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82115C0Ch case    3:*/		return 0x82115C10;
		  /* 82115C10h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82115C10h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82115C10h case    4:*/		return 0x82115C14;
		  /* 82115C14h */ case    5:  		/* stw R28, <#[R11 + 72]> */
		/* 82115C14h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000048) );
		/* 82115C14h case    5:*/		return 0x82115C18;
	}
	return 0x82115C18;
} // Block from 82115C00h-82115C18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82115C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115C18);
		  /* 82115C18h */ case    0:  		/* addi R23, R23, 1 */
		/* 82115C18h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82115C18h case    0:*/		return 0x82115C1C;
		  /* 82115C1Ch */ case    1:  		/* addi R24, R24, 4 */
		/* 82115C1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 82115C1Ch case    1:*/		return 0x82115C20;
		  /* 82115C20h */ case    2:  		/* cmplw CR6, R23, R26 */
		/* 82115C20h case    2:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R26);
		/* 82115C20h case    2:*/		return 0x82115C24;
		  /* 82115C24h */ case    3:  		/* bc 12, CR6_LT, -880 */
		/* 82115C24h case    3:*/		if ( regs.CR[6].lt ) { return 0x821158B4;  }
		/* 82115C24h case    3:*/		return 0x82115C28;
		  /* 82115C28h */ case    4:  		/* cmplwi CR6, R20, 0 */
		/* 82115C28h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82115C28h case    4:*/		return 0x82115C2C;
		  /* 82115C2Ch */ case    5:  		/* bc 12, CR6_EQ, 392 */
		/* 82115C2Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82115DB4;  }
		/* 82115C2Ch case    5:*/		return 0x82115C30;
		  /* 82115C30h */ case    6:  		/* cmplwi CR6, R20, 2 */
		/* 82115C30h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000002);
		/* 82115C30h case    6:*/		return 0x82115C34;
		  /* 82115C34h */ case    7:  		/* mr R6, R15 */
		/* 82115C34h case    7:*/		regs.R6 = regs.R15;
		/* 82115C34h case    7:*/		return 0x82115C38;
		  /* 82115C38h */ case    8:  		/* mr R3, R31 */
		/* 82115C38h case    8:*/		regs.R3 = regs.R31;
		/* 82115C38h case    8:*/		return 0x82115C3C;
		  /* 82115C3Ch */ case    9:  		/* mr R5, R15 */
		/* 82115C3Ch case    9:*/		regs.R5 = regs.R15;
		/* 82115C3Ch case    9:*/		return 0x82115C40;
		  /* 82115C40h */ case   10:  		/* bc 4, CR6_EQ, 160 */
		/* 82115C40h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82115CE0;  }
		/* 82115C40h case   10:*/		return 0x82115C44;
		  /* 82115C44h */ case   11:  		/* lis R4, 8256 */
		/* 82115C44h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2040);
		/* 82115C44h case   11:*/		return 0x82115C48;
		  /* 82115C48h */ case   12:  		/* ori R4, R4, 1 */
		/* 82115C48h case   12:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 82115C48h case   12:*/		return 0x82115C4C;
		  /* 82115C4Ch */ case   13:  		/* bl -100740 */
		/* 82115C4Ch case   13:*/		regs.LR = 0x82115C50; return 0x820FD2C8;
		/* 82115C4Ch case   13:*/		return 0x82115C50;
		  /* 82115C50h */ case   14:  		/* li R10, 2 */
		/* 82115C50h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82115C50h case   14:*/		return 0x82115C54;
		  /* 82115C54h */ case   15:  		/* mr R28, R3 */
		/* 82115C54h case   15:*/		regs.R28 = regs.R3;
		/* 82115C54h case   15:*/		return 0x82115C58;
		  /* 82115C58h */ case   16:  		/* addi R11, R1, 128 */
		/* 82115C58h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82115C58h case   16:*/		return 0x82115C5C;
		  /* 82115C5Ch */ case   17:  		/* mtspr CTR, R10 */
		/* 82115C5Ch case   17:*/		regs.CTR = regs.R10;
		/* 82115C5Ch case   17:*/		return 0x82115C60;
		  /* 82115C60h */ case   18:  		/* lwz R10, <#[R11]> */
		/* 82115C60h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82115C60h case   18:*/		return 0x82115C64;
		  /* 82115C64h */ case   19:  		/* lis R9, 4096 */
		/* 82115C64h case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 82115C64h case   19:*/		return 0x82115C68;
		  /* 82115C68h */ case   20:  		/* lwz R8, <#[R31 + 20]> */
		/* 82115C68h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82115C68h case   20:*/		return 0x82115C6C;
		  /* 82115C6Ch */ case   21:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82115C6Ch case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82115C6Ch case   21:*/		return 0x82115C70;
		  /* 82115C70h */ case   22:  		/* lwz R7, <#[R31 + 24]> */
		/* 82115C70h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 82115C70h case   22:*/		return 0x82115C74;
		  /* 82115C74h */ case   23:  		/* lwzx R8, <#[R8 + R10]> */
		/* 82115C74h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82115C74h case   23:*/		return 0x82115C78;
		  /* 82115C78h */ case   24:  		/* lwz R8, <#[R8 + 72]> */
		/* 82115C78h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000048) );
		/* 82115C78h case   24:*/		return 0x82115C7C;
		  /* 82115C7Ch */ case   25:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82115C7Ch case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82115C7Ch case   25:*/		return 0x82115C80;
		  /* 82115C80h */ case   26:  		/* lwzx R8, <#[R8 + R7]> */
		/* 82115C80h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 82115C80h case   26:*/		return 0x82115C84;
		  /* 82115C84h */ case   27:  		/* lwz R8, <#[R8]> */
		/* 82115C84h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 82115C84h case   27:*/		return 0x82115C88;
		  /* 82115C88h */ case   28:  		/* rlwinm R8, R8, 0, 0, 11 */
		/* 82115C88h case   28:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R8,regs.R8);
		/* 82115C88h case   28:*/		return 0x82115C8C;
		  /* 82115C8Ch */ case   29:  		/* cmplw CR6, R8, R9 */
		/* 82115C8Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 82115C8Ch case   29:*/		return 0x82115C90;
		  /* 82115C90h */ case   30:  		/* bc 4, CR6_EQ, 68 */
		/* 82115C90h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82115CD4;  }
		/* 82115C90h case   30:*/		return 0x82115C94;
		  /* 82115C94h */ case   31:  		/* lwz R9, <#[R31 + 20]> */
		/* 82115C94h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82115C94h case   31:*/		return 0x82115C98;
		  /* 82115C98h */ case   32:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 82115C98h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 82115C98h case   32:*/		return 0x82115C9C;
		  /* 82115C9Ch */ case   33:  		/* lwzx R9, <#[R9 + R10]> */
		/* 82115C9Ch case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82115C9Ch case   33:*/		return 0x82115CA0;
		  /* 82115CA0h */ case   34:  		/* lwz R9, <#[R9 + 72]> */
		/* 82115CA0h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000048) );
		/* 82115CA0h case   34:*/		return 0x82115CA4;
		  /* 82115CA4h */ case   35:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82115CA4h case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82115CA4h case   35:*/		return 0x82115CA8;
		  /* 82115CA8h */ case   36:  		/* lwzx R9, <#[R9 + R8]> */
		/* 82115CA8h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82115CA8h case   36:*/		return 0x82115CAC;
		  /* 82115CACh */ case   37:  		/* stw R14, <#[R9]> */
		/* 82115CACh case   37:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R9 + 0x00000000) );
		/* 82115CACh case   37:*/		return 0x82115CB0;
		  /* 82115CB0h */ case   38:  		/* lwz R9, <#[R31 + 20]> */
		/* 82115CB0h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82115CB0h case   38:*/		return 0x82115CB4;
		  /* 82115CB4h */ case   39:  		/* lwz R8, <#[R31 + 24]> */
		/* 82115CB4h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 82115CB4h case   39:*/		return 0x82115CB8;
		  /* 82115CB8h */ case   40:  		/* lwzx R10, <#[R9 + R10]> */
		/* 82115CB8h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82115CB8h case   40:*/		return 0x82115CBC;
		  /* 82115CBCh */ case   41:  		/* lwz R10, <#[R10 + 72]> */
		/* 82115CBCh case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000048) );
		/* 82115CBCh case   41:*/		return 0x82115CC0;
		  /* 82115CC0h */ case   42:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82115CC0h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82115CC0h case   42:*/		return 0x82115CC4;
		  /* 82115CC4h */ case   43:  		/* lwzx R10, <#[R10 + R8]> */
		/* 82115CC4h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82115CC4h case   43:*/		return 0x82115CC8;
		  /* 82115CC8h */ case   44:  		/* lwz R10, <#[R10 + 8]> */
		/* 82115CC8h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82115CC8h case   44:*/		return 0x82115CCC;
		  /* 82115CCCh */ case   45:  		/* lwz R10, <#[R10]> */
		/* 82115CCCh case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82115CCCh case   45:*/		return 0x82115CD0;
		  /* 82115CD0h */ case   46:  		/* stw R10, <#[R11]> */
		/* 82115CD0h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82115CD0h case   46:*/		return 0x82115CD4;
	}
	return 0x82115CD4;
} // Block from 82115C18h-82115CD4h (47 instructions)

//////////////////////////////////////////////////////
// Block at 82115CD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115CD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115CD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115CD4);
		  /* 82115CD4h */ case    0:  		/* addi R11, R11, 4 */
		/* 82115CD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82115CD4h case    0:*/		return 0x82115CD8;
		  /* 82115CD8h */ case    1:  		/* bc 16, CR0_LT, -120 */
		/* 82115CD8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82115C60;  }
		/* 82115CD8h case    1:*/		return 0x82115CDC;
		  /* 82115CDCh */ case    2:  		/* b 24 */
		/* 82115CDCh case    2:*/		return 0x82115CF4;
		/* 82115CDCh case    2:*/		return 0x82115CE0;
	}
	return 0x82115CE0;
} // Block from 82115CD4h-82115CE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82115CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115CE0);
		  /* 82115CE0h */ case    0:  		/* li R11, 5 */
		/* 82115CE0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82115CE0h case    0:*/		return 0x82115CE4;
		  /* 82115CE4h */ case    1:  		/* mr R4, R20 */
		/* 82115CE4h case    1:*/		regs.R4 = regs.R20;
		/* 82115CE4h case    1:*/		return 0x82115CE8;
		  /* 82115CE8h */ case    2:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 82115CE8h case    2:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 82115CE8h case    2:*/		return 0x82115CEC;
		  /* 82115CECh */ case    3:  		/* bl -100900 */
		/* 82115CECh case    3:*/		regs.LR = 0x82115CF0; return 0x820FD2C8;
		/* 82115CECh case    3:*/		return 0x82115CF0;
		  /* 82115CF0h */ case    4:  		/* mr R28, R3 */
		/* 82115CF0h case    4:*/		regs.R28 = regs.R3;
		/* 82115CF0h case    4:*/		return 0x82115CF4;
	}
	return 0x82115CF4;
} // Block from 82115CE0h-82115CF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82115CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115CF4);
		  /* 82115CF4h */ case    0:  		/* cmpwi CR6, R28, -1 */
		/* 82115CF4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0xFFFFFFFF);
		/* 82115CF4h case    0:*/		return 0x82115CF8;
		  /* 82115CF8h */ case    1:  		/* bc 12, CR6_EQ, -1496 */
		/* 82115CF8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82115720;  }
		/* 82115CF8h case    1:*/		return 0x82115CFC;
		  /* 82115CFCh */ case    2:  		/* lwz R11, <#[R31 + 24]> */
		/* 82115CFCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82115CFCh case    2:*/		return 0x82115D00;
		  /* 82115D00h */ case    3:  		/* rlwinm R10, R28, 2, 0, 29 */
		/* 82115D00h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R28);
		/* 82115D00h case    3:*/		return 0x82115D04;
		  /* 82115D04h */ case    4:  		/* mr R4, R29 */
		/* 82115D04h case    4:*/		regs.R4 = regs.R29;
		/* 82115D04h case    4:*/		return 0x82115D08;
		  /* 82115D08h */ case    5:  		/* lwzx R30, <#[R10 + R11]> */
		/* 82115D08h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82115D08h case    5:*/		return 0x82115D0C;
		  /* 82115D0Ch */ case    6:  		/* mr R3, R30 */
		/* 82115D0Ch case    6:*/		regs.R3 = regs.R30;
		/* 82115D0Ch case    6:*/		return 0x82115D10;
		  /* 82115D10h */ case    7:  		/* bl -106016 */
		/* 82115D10h case    7:*/		regs.LR = 0x82115D14; return 0x820FBEF0;
		/* 82115D10h case    7:*/		return 0x82115D14;
		  /* 82115D14h */ case    8:  		/* lwz R11, <#[R29 + 16]> */
		/* 82115D14h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82115D14h case    8:*/		return 0x82115D18;
		  /* 82115D18h */ case    9:  		/* lwz R10, <#[R30 + 16]> */
		/* 82115D18h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82115D18h case    9:*/		return 0x82115D1C;
		  /* 82115D1Ch */ case   10:  		/* rlwinm R27, R20, 2, 0, 29 */
		/* 82115D1Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R20);
		/* 82115D1Ch case   10:*/		return 0x82115D20;
		  /* 82115D20h */ case   11:  		/* addi R4, R1, 128 */
		/* 82115D20h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82115D20h case   11:*/		return 0x82115D24;
		  /* 82115D24h */ case   12:  		/* mr R5, R27 */
		/* 82115D24h case   12:*/		regs.R5 = regs.R27;
		/* 82115D24h case   12:*/		return 0x82115D28;
		  /* 82115D28h */ case   13:  		/* lwz R11, <#[R11]> */
		/* 82115D28h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82115D28h case   13:*/		return 0x82115D2C;
		  /* 82115D2Ch */ case   14:  		/* stw R11, <#[R10]> */
		/* 82115D2Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82115D2Ch case   14:*/		return 0x82115D30;
		  /* 82115D30h */ case   15:  		/* lwz R11, <#[R30 + 16]> */
		/* 82115D30h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82115D30h case   15:*/		return 0x82115D34;
		  /* 82115D34h */ case   16:  		/* lwz R10, <#[R31 + 20]> */
		/* 82115D34h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82115D34h case   16:*/		return 0x82115D38;
		  /* 82115D38h */ case   17:  		/* lwz R11, <#[R11]> */
		/* 82115D38h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82115D38h case   17:*/		return 0x82115D3C;
		  /* 82115D3Ch */ case   18:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82115D3Ch case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82115D3Ch case   18:*/		return 0x82115D40;
		  /* 82115D40h */ case   19:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82115D40h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82115D40h case   19:*/		return 0x82115D44;
		  /* 82115D44h */ case   20:  		/* stw R28, <#[R11 + 72]> */
		/* 82115D44h case   20:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000048) );
		/* 82115D44h case   20:*/		return 0x82115D48;
		  /* 82115D48h */ case   21:  		/* lwz R3, <#[R30 + 8]> */
		/* 82115D48h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 82115D48h case   21:*/		return 0x82115D4C;
		  /* 82115D4Ch */ case   22:  		/* bl -541596 */
		/* 82115D4Ch case   22:*/		regs.LR = 0x82115D50; return 0x820919B0;
		/* 82115D4Ch case   22:*/		return 0x82115D50;
		  /* 82115D50h */ case   23:  		/* cmplwi CR6, R20, 2 */
		/* 82115D50h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000002);
		/* 82115D50h case   23:*/		return 0x82115D54;
		  /* 82115D54h */ case   24:  		/* bc 12, CR6_EQ, 88 */
		/* 82115D54h case   24:*/		if ( regs.CR[6].eq ) { return 0x82115DAC;  }
		/* 82115D54h case   24:*/		return 0x82115D58;
		  /* 82115D58h */ case   25:  		/* lwz R11, <#[R1 + 84]> */
		/* 82115D58h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82115D58h case   25:*/		return 0x82115D5C;
		  /* 82115D5Ch */ case   26:  		/* cmpwi CR6, R11, -1 */
		/* 82115D5Ch case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82115D5Ch case   26:*/		return 0x82115D60;
		  /* 82115D60h */ case   27:  		/* bc 4, CR6_EQ, 40 */
		/* 82115D60h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82115D88;  }
		/* 82115D60h case   27:*/		return 0x82115D64;
		  /* 82115D64h */ case   28:  		/* li R6, 0 */
		/* 82115D64h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82115D64h case   28:*/		return 0x82115D68;
		  /* 82115D68h */ case   29:  		/* lwz R4, <#[R31 + 120]> */
		/* 82115D68h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 82115D68h case   29:*/		return 0x82115D6C;
		  /* 82115D6Ch */ case   30:  		/* li R5, 0 */
		/* 82115D6Ch case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82115D6Ch case   30:*/		return 0x82115D70;
		  /* 82115D70h */ case   31:  		/* fmr FR1, FR30 */
		/* 82115D70h case   31:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82115D70h case   31:*/		return 0x82115D74;
		  /* 82115D74h */ case   32:  		/* mr R3, R31 */
		/* 82115D74h case   32:*/		regs.R3 = regs.R31;
		/* 82115D74h case   32:*/		return 0x82115D78;
		  /* 82115D78h */ case   33:  		/* bl -101200 */
		/* 82115D78h case   33:*/		regs.LR = 0x82115D7C; return 0x820FD228;
		/* 82115D78h case   33:*/		return 0x82115D7C;
		  /* 82115D7Ch */ case   34:  		/* stw R3, <#[R1 + 84]> */
		/* 82115D7Ch case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 82115D7Ch case   34:*/		return 0x82115D80;
		  /* 82115D80h */ case   35:  		/* cmpwi CR6, R3, -1 */
		/* 82115D80h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82115D80h case   35:*/		return 0x82115D84;
		  /* 82115D84h */ case   36:  		/* bc 12, CR6_EQ, 396 */
		/* 82115D84h case   36:*/		if ( regs.CR[6].eq ) { return 0x82115F10;  }
		/* 82115D84h case   36:*/		return 0x82115D88;
	}
	return 0x82115D88;
} // Block from 82115CF4h-82115D88h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82115D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115D88);
		  /* 82115D88h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 82115D88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82115D88h case    0:*/		return 0x82115D8C;
		  /* 82115D8Ch */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 82115D8Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82115DAC;  }
		/* 82115D8Ch case    1:*/		return 0x82115D90;
		  /* 82115D90h */ case    2:  		/* mr R11, R27 */
		/* 82115D90h case    2:*/		regs.R11 = regs.R27;
		/* 82115D90h case    2:*/		return 0x82115D94;
		  /* 82115D94h */ case    3:  		/* mtspr CTR, R20 */
		/* 82115D94h case    3:*/		regs.CTR = regs.R20;
		/* 82115D94h case    3:*/		return 0x82115D98;
		  /* 82115D98h */ case    4:  		/* lwz R10, <#[R30 + 8]> */
		/* 82115D98h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 82115D98h case    4:*/		return 0x82115D9C;
		  /* 82115D9Ch */ case    5:  		/* lwz R9, <#[R1 + 84]> */
		/* 82115D9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82115D9Ch case    5:*/		return 0x82115DA0;
		  /* 82115DA0h */ case    6:  		/* stwx R9, <#[R10 + R11]> */
		/* 82115DA0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82115DA0h case    6:*/		return 0x82115DA4;
		  /* 82115DA4h */ case    7:  		/* addi R11, R11, 4 */
		/* 82115DA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82115DA4h case    7:*/		return 0x82115DA8;
		  /* 82115DA8h */ case    8:  		/* bc 16, CR0_LT, -16 */
		/* 82115DA8h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82115D98;  }
		/* 82115DA8h case    8:*/		return 0x82115DAC;
	}
	return 0x82115DAC;
} // Block from 82115D88h-82115DACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82115DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115DAC);
		  /* 82115DACh */ case    0:  		/* addi R11, R18, 1 */
		/* 82115DACh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0x1);
		/* 82115DACh case    0:*/		return 0x82115DB0;
		  /* 82115DB0h */ case    1:  		/* stw R11, <#[R1 + 80]> */
		/* 82115DB0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82115DB0h case    1:*/		return 0x82115DB4;
	}
	return 0x82115DB4;
} // Block from 82115DACh-82115DB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82115DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115DB4);
		  /* 82115DB4h */ case    0:  		/* lwz R27, <#[R1 + 88]> */
		/* 82115DB4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 82115DB4h case    0:*/		return 0x82115DB8;
	}
	return 0x82115DB8;
} // Block from 82115DB4h-82115DB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82115DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115DB8);
		  /* 82115DB8h */ case    0:  		/* lwz R11, <#[R1 + 96]> */
		/* 82115DB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82115DB8h case    0:*/		return 0x82115DBC;
		  /* 82115DBCh */ case    1:  		/* addi R16, R16, 4 */
		/* 82115DBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R16,0x4);
		/* 82115DBCh case    1:*/		return 0x82115DC0;
		  /* 82115DC0h */ case    2:  		/* addi R11, R11, 1 */
		/* 82115DC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82115DC0h case    2:*/		return 0x82115DC4;
		  /* 82115DC4h */ case    3:  		/* stw R11, <#[R1 + 96]> */
		/* 82115DC4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82115DC4h case    3:*/		return 0x82115DC8;
		  /* 82115DC8h */ case    4:  		/* cmplw CR6, R11, R17 */
		/* 82115DC8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 82115DC8h case    4:*/		return 0x82115DCC;
		  /* 82115DCCh */ case    5:  		/* bc 12, CR6_LT, -1548 */
		/* 82115DCCh case    5:*/		if ( regs.CR[6].lt ) { return 0x821157C0;  }
		/* 82115DCCh case    5:*/		return 0x82115DD0;
		  /* 82115DD0h */ case    6:  		/* cmplwi CR6, R17, 0 */
		/* 82115DD0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 82115DD0h case    6:*/		return 0x82115DD4;
		  /* 82115DD4h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 82115DD4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82115DF4;  }
		/* 82115DD4h case    7:*/		return 0x82115DD8;
		  /* 82115DD8h */ case    8:  		/* mtspr CTR, R17 */
		/* 82115DD8h case    8:*/		regs.CTR = regs.R17;
		/* 82115DD8h case    8:*/		return 0x82115DDC;
		  /* 82115DDCh */ case    9:  		/* mr R11, R14 */
		/* 82115DDCh case    9:*/		regs.R11 = regs.R14;
		/* 82115DDCh case    9:*/		return 0x82115DE0;
		  /* 82115DE0h */ case   10:  		/* lwz R10, <#[R31 + 24]> */
		/* 82115DE0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82115DE0h case   10:*/		return 0x82115DE4;
		  /* 82115DE4h */ case   11:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82115DE4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82115DE4h case   11:*/		return 0x82115DE8;
		  /* 82115DE8h */ case   12:  		/* addi R11, R11, 4 */
		/* 82115DE8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82115DE8h case   12:*/		return 0x82115DEC;
		  /* 82115DECh */ case   13:  		/* stw R14, <#[R10]> */
		/* 82115DECh case   13:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R10 + 0x00000000) );
		/* 82115DECh case   13:*/		return 0x82115DF0;
		  /* 82115DF0h */ case   14:  		/* bc 16, CR0_LT, -16 */
		/* 82115DF0h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82115DE0;  }
		/* 82115DF0h case   14:*/		return 0x82115DF4;
	}
	return 0x82115DF4;
} // Block from 82115DB8h-82115DF4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82115DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115DF4);
		  /* 82115DF4h */ case    0:  		/* mr R3, R31 */
		/* 82115DF4h case    0:*/		regs.R3 = regs.R31;
		/* 82115DF4h case    0:*/		return 0x82115DF8;
		  /* 82115DF8h */ case    1:  		/* bl -60816 */
		/* 82115DF8h case    1:*/		regs.LR = 0x82115DFC; return 0x82107068;
		/* 82115DF8h case    1:*/		return 0x82115DFC;
		  /* 82115DFCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82115DFCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82115DFCh case    2:*/		return 0x82115E00;
		  /* 82115E00h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82115E00h case    3:*/		if ( regs.CR[0].eq ) { return 0x82115E10;  }
		/* 82115E00h case    3:*/		return 0x82115E04;
		  /* 82115E04h */ case    4:  		/* mr R30, R3 */
		/* 82115E04h case    4:*/		regs.R30 = regs.R3;
		/* 82115E04h case    4:*/		return 0x82115E08;
		  /* 82115E08h */ case    5:  		/* cmpwi CR6, R3, 0 */
		/* 82115E08h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82115E08h case    5:*/		return 0x82115E0C;
		  /* 82115E0Ch */ case    6:  		/* bc 12, CR6_LT, 64 */
		/* 82115E0Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x82115E4C;  }
		/* 82115E0Ch case    6:*/		return 0x82115E10;
	}
	return 0x82115E10;
} // Block from 82115DF4h-82115E10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82115E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115E10);
		  /* 82115E10h */ case    0:  		/* mr R3, R31 */
		/* 82115E10h case    0:*/		regs.R3 = regs.R31;
		/* 82115E10h case    0:*/		return 0x82115E14;
		  /* 82115E14h */ case    1:  		/* bl -82356 */
		/* 82115E14h case    1:*/		regs.LR = 0x82115E18; return 0x82101C60;
		/* 82115E14h case    1:*/		return 0x82115E18;
		  /* 82115E18h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82115E18h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82115E18h case    2:*/		return 0x82115E1C;
		  /* 82115E1Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82115E1Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82115E2C;  }
		/* 82115E1Ch case    3:*/		return 0x82115E20;
		  /* 82115E20h */ case    4:  		/* mr R30, R3 */
		/* 82115E20h case    4:*/		regs.R30 = regs.R3;
		/* 82115E20h case    4:*/		return 0x82115E24;
		  /* 82115E24h */ case    5:  		/* cmpwi CR6, R3, 0 */
		/* 82115E24h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82115E24h case    5:*/		return 0x82115E28;
		  /* 82115E28h */ case    6:  		/* bc 12, CR6_LT, 36 */
		/* 82115E28h case    6:*/		if ( regs.CR[6].lt ) { return 0x82115E4C;  }
		/* 82115E28h case    6:*/		return 0x82115E2C;
	}
	return 0x82115E2C;
} // Block from 82115E10h-82115E2Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82115E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115E2C);
		  /* 82115E2Ch */ case    0:  		/* mr R3, R31 */
		/* 82115E2Ch case    0:*/		regs.R3 = regs.R31;
		/* 82115E2Ch case    0:*/		return 0x82115E30;
		  /* 82115E30h */ case    1:  		/* bl -59080 */
		/* 82115E30h case    1:*/		regs.LR = 0x82115E34; return 0x82107768;
		/* 82115E30h case    1:*/		return 0x82115E34;
		  /* 82115E34h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82115E34h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82115E34h case    2:*/		return 0x82115E38;
		  /* 82115E38h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82115E38h case    3:*/		if ( regs.CR[0].eq ) { return 0x82115E48;  }
		/* 82115E38h case    3:*/		return 0x82115E3C;
		  /* 82115E3Ch */ case    4:  		/* mr R30, R3 */
		/* 82115E3Ch case    4:*/		regs.R30 = regs.R3;
		/* 82115E3Ch case    4:*/		return 0x82115E40;
		  /* 82115E40h */ case    5:  		/* cmpwi CR6, R3, 0 */
		/* 82115E40h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82115E40h case    5:*/		return 0x82115E44;
		  /* 82115E44h */ case    6:  		/* bc 12, CR6_LT, 8 */
		/* 82115E44h case    6:*/		if ( regs.CR[6].lt ) { return 0x82115E4C;  }
		/* 82115E44h case    6:*/		return 0x82115E48;
	}
	return 0x82115E48;
} // Block from 82115E2Ch-82115E48h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82115E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115E48);
		  /* 82115E48h */ case    0:  		/* mr R30, R14 */
		/* 82115E48h case    0:*/		regs.R30 = regs.R14;
		/* 82115E48h case    0:*/		return 0x82115E4C;
	}
	return 0x82115E4C;
} // Block from 82115E48h-82115E4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82115E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115E4C);
		  /* 82115E4Ch */ case    0:  		/* lis R4, 9345 */
		/* 82115E4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82115E4Ch case    0:*/		return 0x82115E50;
		  /* 82115E50h */ case    1:  		/* mr R3, R27 */
		/* 82115E50h case    1:*/		regs.R3 = regs.R27;
		/* 82115E50h case    1:*/		return 0x82115E54;
		  /* 82115E54h */ case    2:  		/* bl -580380 */
		/* 82115E54h case    2:*/		regs.LR = 0x82115E58; return 0x82088338;
		/* 82115E54h case    2:*/		return 0x82115E58;
		  /* 82115E58h */ case    3:  		/* mr R3, R30 */
		/* 82115E58h case    3:*/		regs.R3 = regs.R30;
		/* 82115E58h case    3:*/		return 0x82115E5C;
	}
	return 0x82115E5C;
} // Block from 82115E4Ch-82115E5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82115E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115E5C);
		  /* 82115E5Ch */ case    0:  		/* addi R1, R1, 320 */
		/* 82115E5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 82115E5Ch case    0:*/		return 0x82115E60;
		  /* 82115E60h */ case    1:  		/* lfd FR30, <#[R1 - 168]> */
		/* 82115E60h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82115E60h case    1:*/		return 0x82115E64;
		  /* 82115E64h */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 82115E64h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82115E64h case    2:*/		return 0x82115E68;
		  /* 82115E68h */ case    3:  		/* b -543736 */
		/* 82115E68h case    3:*/		return 0x82091270;
		/* 82115E68h case    3:*/		return 0x82115E6C;
	}
	return 0x82115E6C;
} // Block from 82115E5Ch-82115E6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82115E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115E6C);
		  /* 82115E6Ch */ case    0:  		/* mr R3, R31 */
		/* 82115E6Ch case    0:*/		regs.R3 = regs.R31;
		/* 82115E6Ch case    0:*/		return 0x82115E70;
		  /* 82115E70h */ case    1:  		/* lwz R4, <#[R29]> */
		/* 82115E70h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 82115E70h case    1:*/		return 0x82115E74;
		  /* 82115E74h */ case    2:  		/* lwz R6, <#[R29 + 12]> */
		/* 82115E74h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x0000000C) );
		/* 82115E74h case    2:*/		return 0x82115E78;
		  /* 82115E78h */ case    3:  		/* lwz R5, <#[R29 + 4]> */
		/* 82115E78h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000004) );
		/* 82115E78h case    3:*/		return 0x82115E7C;
		  /* 82115E7Ch */ case    4:  		/* bl -101300 */
		/* 82115E7Ch case    4:*/		regs.LR = 0x82115E80; return 0x820FD2C8;
		/* 82115E7Ch case    4:*/		return 0x82115E80;
		  /* 82115E80h */ case    5:  		/* mr R28, R3 */
		/* 82115E80h case    5:*/		regs.R28 = regs.R3;
		/* 82115E80h case    5:*/		return 0x82115E84;
		  /* 82115E84h */ case    6:  		/* cmpwi CR6, R3, -1 */
		/* 82115E84h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82115E84h case    6:*/		return 0x82115E88;
		  /* 82115E88h */ case    7:  		/* bc 12, CR6_EQ, 136 */
		/* 82115E88h case    7:*/		if ( regs.CR[6].eq ) { return 0x82115F10;  }
		/* 82115E88h case    7:*/		return 0x82115E8C;
		  /* 82115E8Ch */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 82115E8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82115E8Ch case    8:*/		return 0x82115E90;
		  /* 82115E90h */ case    9:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 82115E90h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 82115E90h case    9:*/		return 0x82115E94;
		  /* 82115E94h */ case   10:  		/* mr R4, R29 */
		/* 82115E94h case   10:*/		regs.R4 = regs.R29;
		/* 82115E94h case   10:*/		return 0x82115E98;
		  /* 82115E98h */ case   11:  		/* lwzx R30, <#[R10 + R11]> */
		/* 82115E98h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82115E98h case   11:*/		return 0x82115E9C;
		  /* 82115E9Ch */ case   12:  		/* mr R3, R30 */
		/* 82115E9Ch case   12:*/		regs.R3 = regs.R30;
		/* 82115E9Ch case   12:*/		return 0x82115EA0;
		  /* 82115EA0h */ case   13:  		/* bl -106416 */
		/* 82115EA0h case   13:*/		regs.LR = 0x82115EA4; return 0x820FBEF0;
		/* 82115EA0h case   13:*/		return 0x82115EA4;
		  /* 82115EA4h */ case   14:  		/* lwz R11, <#[R29 + 4]> */
		/* 82115EA4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82115EA4h case   14:*/		return 0x82115EA8;
		  /* 82115EA8h */ case   15:  		/* lwz R4, <#[R29 + 8]> */
		/* 82115EA8h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000008) );
		/* 82115EA8h case   15:*/		return 0x82115EAC;
		  /* 82115EACh */ case   16:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82115EACh case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82115EACh case   16:*/		return 0x82115EB0;
		  /* 82115EB0h */ case   17:  		/* lwz R3, <#[R30 + 8]> */
		/* 82115EB0h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 82115EB0h case   17:*/		return 0x82115EB4;
		  /* 82115EB4h */ case   18:  		/* bl -541956 */
		/* 82115EB4h case   18:*/		regs.LR = 0x82115EB8; return 0x820919B0;
		/* 82115EB4h case   18:*/		return 0x82115EB8;
		  /* 82115EB8h */ case   19:  		/* lwz R11, <#[R29 + 12]> */
		/* 82115EB8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82115EB8h case   19:*/		return 0x82115EBC;
		  /* 82115EBCh */ case   20:  		/* lwz R4, <#[R29 + 16]> */
		/* 82115EBCh case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000010) );
		/* 82115EBCh case   20:*/		return 0x82115EC0;
		  /* 82115EC0h */ case   21:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82115EC0h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82115EC0h case   21:*/		return 0x82115EC4;
		  /* 82115EC4h */ case   22:  		/* lwz R3, <#[R30 + 16]> */
		/* 82115EC4h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82115EC4h case   22:*/		return 0x82115EC8;
		  /* 82115EC8h */ case   23:  		/* bl -541976 */
		/* 82115EC8h case   23:*/		regs.LR = 0x82115ECC; return 0x820919B0;
		/* 82115EC8h case   23:*/		return 0x82115ECC;
		  /* 82115ECCh */ case   24:  		/* lwz R10, <#[R29 + 12]> */
		/* 82115ECCh case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 82115ECCh case   24:*/		return 0x82115ED0;
		  /* 82115ED0h */ case   25:  		/* mr R11, R14 */
		/* 82115ED0h case   25:*/		regs.R11 = regs.R14;
		/* 82115ED0h case   25:*/		return 0x82115ED4;
		  /* 82115ED4h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 82115ED4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82115ED4h case   26:*/		return 0x82115ED8;
		  /* 82115ED8h */ case   27:  		/* bc 4, CR6_GT, -288 */
		/* 82115ED8h case   27:*/		if ( !regs.CR[6].gt ) { return 0x82115DB8;  }
		/* 82115ED8h case   27:*/		return 0x82115EDC;
		  /* 82115EDCh */ case   28:  		/* mr R10, R14 */
		/* 82115EDCh case   28:*/		regs.R10 = regs.R14;
		/* 82115EDCh case   28:*/		return 0x82115EE0;
		  /* 82115EE0h */ case   29:  		/* lwz R9, <#[R30 + 16]> */
		/* 82115EE0h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 82115EE0h case   29:*/		return 0x82115EE4;
		  /* 82115EE4h */ case   30:  		/* addi R11, R11, 1 */
		/* 82115EE4h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82115EE4h case   30:*/		return 0x82115EE8;
		  /* 82115EE8h */ case   31:  		/* lwz R8, <#[R31 + 20]> */
		/* 82115EE8h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000014) );
		/* 82115EE8h case   31:*/		return 0x82115EEC;
		  /* 82115EECh */ case   32:  		/* lwzx R9, <#[R9 + R10]> */
		/* 82115EECh case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82115EECh case   32:*/		return 0x82115EF0;
		  /* 82115EF0h */ case   33:  		/* addi R10, R10, 4 */
		/* 82115EF0h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82115EF0h case   33:*/		return 0x82115EF4;
		  /* 82115EF4h */ case   34:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82115EF4h case   34:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82115EF4h case   34:*/		return 0x82115EF8;
		  /* 82115EF8h */ case   35:  		/* lwzx R9, <#[R9 + R8]> */
		/* 82115EF8h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82115EF8h case   35:*/		return 0x82115EFC;
		  /* 82115EFCh */ case   36:  		/* stw R28, <#[R9 + 72]> */
		/* 82115EFCh case   36:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R9 + 0x00000048) );
		/* 82115EFCh case   36:*/		return 0x82115F00;
		  /* 82115F00h */ case   37:  		/* lwz R9, <#[R29 + 12]> */
		/* 82115F00h case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 82115F00h case   37:*/		return 0x82115F04;
		  /* 82115F04h */ case   38:  		/* cmplw CR6, R11, R9 */
		/* 82115F04h case   38:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82115F04h case   38:*/		return 0x82115F08;
		  /* 82115F08h */ case   39:  		/* bc 12, CR6_LT, -40 */
		/* 82115F08h case   39:*/		if ( regs.CR[6].lt ) { return 0x82115EE0;  }
		/* 82115F08h case   39:*/		return 0x82115F0C;
		  /* 82115F0Ch */ case   40:  		/* b -340 */
		/* 82115F0Ch case   40:*/		return 0x82115DB8;
		/* 82115F0Ch case   40:*/		return 0x82115F10;
	}
	return 0x82115F10;
} // Block from 82115E6Ch-82115F10h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82115F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115F10);
		  /* 82115F10h */ case    0:  		/* lis R30, -32761 */
		/* 82115F10h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 82115F10h case    0:*/		return 0x82115F14;
		  /* 82115F14h */ case    1:  		/* lwz R27, <#[R1 + 88]> */
		/* 82115F14h case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 82115F14h case    1:*/		return 0x82115F18;
		  /* 82115F18h */ case    2:  		/* ori R30, R30, 14 */
		/* 82115F18h case    2:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 82115F18h case    2:*/		return 0x82115F1C;
		  /* 82115F1Ch */ case    3:  		/* b -208 */
		/* 82115F1Ch case    3:*/		return 0x82115E4C;
		/* 82115F1Ch case    3:*/		return 0x82115F20;
	}
	return 0x82115F20;
} // Block from 82115F10h-82115F20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82115F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115F20);
		  /* 82115F20h */ case    0:  		/* mfspr R12, LR */
		/* 82115F20h case    0:*/		regs.R12 = regs.LR;
		/* 82115F20h case    0:*/		return 0x82115F24;
		  /* 82115F24h */ case    1:  		/* bl -544004 */
		/* 82115F24h case    1:*/		regs.LR = 0x82115F28; return 0x82091220;
		/* 82115F24h case    1:*/		return 0x82115F28;
		  /* 82115F28h */ case    2:  		/* stwu R1, <#[R1 - 432]> */
		/* 82115F28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 82115F28h case    2:*/		return 0x82115F2C;
		  /* 82115F2Ch */ case    3:  		/* lwz R11, <#[R3 + 204]> */
		/* 82115F2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000CC) );
		/* 82115F2Ch case    3:*/		return 0x82115F30;
		  /* 82115F30h */ case    4:  		/* mr R27, R3 */
		/* 82115F30h case    4:*/		regs.R27 = regs.R3;
		/* 82115F30h case    4:*/		return 0x82115F34;
		  /* 82115F34h */ case    5:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 82115F34h case    5:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 82115F34h case    5:*/		return 0x82115F38;
		  /* 82115F38h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 82115F38h case    6:*/		if ( regs.CR[0].eq ) { return 0x82115F44;  }
		/* 82115F38h case    6:*/		return 0x82115F3C;
		  /* 82115F3Ch */ case    7:  		/* li R3, 1 */
		/* 82115F3Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82115F3Ch case    7:*/		return 0x82115F40;
		  /* 82115F40h */ case    8:  		/* b 4372 */
		/* 82115F40h case    8:*/		return 0x82117054;
		/* 82115F40h case    8:*/		return 0x82115F44;
	}
	return 0x82115F44;
} // Block from 82115F20h-82115F44h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82115F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115F44);
		  /* 82115F44h */ case    0:  		/* lwz R10, <#[R27 + 4]> */
		/* 82115F44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 82115F44h case    0:*/		return 0x82115F48;
		  /* 82115F48h */ case    1:  		/* li R17, 0 */
		/* 82115F48h case    1:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 82115F48h case    1:*/		return 0x82115F4C;
		  /* 82115F4Ch */ case    2:  		/* stw R17, <#[R1 + 120]> */
		/* 82115F4Ch case    2:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000078) );
		/* 82115F4Ch case    2:*/		return 0x82115F50;
		  /* 82115F50h */ case    3:  		/* mr R11, R17 */
		/* 82115F50h case    3:*/		regs.R11 = regs.R17;
		/* 82115F50h case    3:*/		return 0x82115F54;
		  /* 82115F54h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82115F54h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82115F54h case    4:*/		return 0x82115F58;
		  /* 82115F58h */ case    5:  		/* bc 4, CR6_GT, 40 */
		/* 82115F58h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82115F80;  }
		/* 82115F58h case    5:*/		return 0x82115F5C;
		  /* 82115F5Ch */ case    6:  		/* mr R10, R17 */
		/* 82115F5Ch case    6:*/		regs.R10 = regs.R17;
		/* 82115F5Ch case    6:*/		return 0x82115F60;
		  /* 82115F60h */ case    7:  		/* lwz R9, <#[R27 + 16]> */
		/* 82115F60h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 82115F60h case    7:*/		return 0x82115F64;
		  /* 82115F64h */ case    8:  		/* addi R11, R11, 1 */
		/* 82115F64h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82115F64h case    8:*/		return 0x82115F68;
		  /* 82115F68h */ case    9:  		/* lwzx R9, <#[R9 + R10]> */
		/* 82115F68h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82115F68h case    9:*/		return 0x82115F6C;
		  /* 82115F6Ch */ case   10:  		/* addi R10, R10, 4 */
		/* 82115F6Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82115F6Ch case   10:*/		return 0x82115F70;
		  /* 82115F70h */ case   11:  		/* stw R17, <#[R9 + 16]> */
		/* 82115F70h case   11:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R9 + 0x00000010) );
		/* 82115F70h case   11:*/		return 0x82115F74;
		  /* 82115F74h */ case   12:  		/* lwz R9, <#[R27 + 4]> */
		/* 82115F74h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000004) );
		/* 82115F74h case   12:*/		return 0x82115F78;
		  /* 82115F78h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 82115F78h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82115F78h case   13:*/		return 0x82115F7C;
		  /* 82115F7Ch */ case   14:  		/* bc 12, CR6_LT, -28 */
		/* 82115F7Ch case   14:*/		if ( regs.CR[6].lt ) { return 0x82115F60;  }
		/* 82115F7Ch case   14:*/		return 0x82115F80;
	}
	return 0x82115F80;
} // Block from 82115F44h-82115F80h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82115F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115F80);
		  /* 82115F80h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 82115F80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82115F80h case    0:*/		return 0x82115F84;
		  /* 82115F84h */ case    1:  		/* mr R7, R17 */
		/* 82115F84h case    1:*/		regs.R7 = regs.R17;
		/* 82115F84h case    1:*/		return 0x82115F88;
		  /* 82115F88h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82115F88h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82115F88h case    2:*/		return 0x82115F8C;
		  /* 82115F8Ch */ case    3:  		/* bc 4, CR6_GT, 108 */
		/* 82115F8Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x82115FF8;  }
		/* 82115F8Ch case    3:*/		return 0x82115F90;
		  /* 82115F90h */ case    4:  		/* mr R8, R17 */
		/* 82115F90h case    4:*/		regs.R8 = regs.R17;
		/* 82115F90h case    4:*/		return 0x82115F94;
		  /* 82115F94h */ case    5:  		/* lwz R11, <#[R27 + 20]> */
		/* 82115F94h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82115F94h case    5:*/		return 0x82115F98;
		  /* 82115F98h */ case    6:  		/* lwz R10, <#[R27 + 116]> */
		/* 82115F98h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000074) );
		/* 82115F98h case    6:*/		return 0x82115F9C;
		  /* 82115F9Ch */ case    7:  		/* lwzx R9, <#[R11 + R8]> */
		/* 82115F9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82115F9Ch case    7:*/		return 0x82115FA0;
		  /* 82115FA0h */ case    8:  		/* lwz R11, <#[R9 + 4]> */
		/* 82115FA0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 82115FA0h case    8:*/		return 0x82115FA4;
		  /* 82115FA4h */ case    9:  		/* cmplw CR6, R10, R11 */
		/* 82115FA4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82115FA4h case    9:*/		return 0x82115FA8;
		  /* 82115FA8h */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 82115FA8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82115FE4;  }
		/* 82115FA8h case   10:*/		return 0x82115FAC;
		  /* 82115FACh */ case   11:  		/* lwz R10, <#[R27 + 16]> */
		/* 82115FACh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 82115FACh case   11:*/		return 0x82115FB0;
		  /* 82115FB0h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82115FB0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82115FB0h case   12:*/		return 0x82115FB4;
		  /* 82115FB4h */ case   13:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82115FB4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82115FB4h case   13:*/		return 0x82115FB8;
		  /* 82115FB8h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 82115FB8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82115FB8h case   14:*/		return 0x82115FBC;
		  /* 82115FBCh */ case   15:  		/* rlwinm. R6, R10, 0, 30, 30 */
		/* 82115FBCh case   15:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R6,regs.R10);
		/* 82115FBCh case   15:*/		return 0x82115FC0;
		  /* 82115FC0h */ case   16:  		/* bc 12, CR0_EQ, 36 */
		/* 82115FC0h case   16:*/		if ( regs.CR[0].eq ) { return 0x82115FE4;  }
		/* 82115FC0h case   16:*/		return 0x82115FC4;
		  /* 82115FC4h */ case   17:  		/* rlwinm. R10, R10, 0, 21, 21 */
		/* 82115FC4h case   17:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R10,regs.R10);
		/* 82115FC4h case   17:*/		return 0x82115FC8;
		  /* 82115FC8h */ case   18:  		/* bc 4, CR0_EQ, 28 */
		/* 82115FC8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82115FE4;  }
		/* 82115FC8h case   18:*/		return 0x82115FCC;
		  /* 82115FCCh */ case   19:  		/* lwz R10, <#[R9 + 12]> */
		/* 82115FCCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000000C) );
		/* 82115FCCh case   19:*/		return 0x82115FD0;
		  /* 82115FD0h */ case   20:  		/* lwz R9, <#[R11 + 16]> */
		/* 82115FD0h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82115FD0h case   20:*/		return 0x82115FD4;
		  /* 82115FD4h */ case   21:  		/* addi R10, R10, 1 */
		/* 82115FD4h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82115FD4h case   21:*/		return 0x82115FD8;
		  /* 82115FD8h */ case   22:  		/* cmplw CR6, R9, R10 */
		/* 82115FD8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82115FD8h case   22:*/		return 0x82115FDC;
		  /* 82115FDCh */ case   23:  		/* bc 4, CR6_LT, 8 */
		/* 82115FDCh case   23:*/		if ( !regs.CR[6].lt ) { return 0x82115FE4;  }
		/* 82115FDCh case   23:*/		return 0x82115FE0;
		  /* 82115FE0h */ case   24:  		/* stw R10, <#[R11 + 16]> */
		/* 82115FE0h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82115FE0h case   24:*/		return 0x82115FE4;
	}
	return 0x82115FE4;
} // Block from 82115F80h-82115FE4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82115FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115FE4);
		  /* 82115FE4h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 82115FE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82115FE4h case    0:*/		return 0x82115FE8;
		  /* 82115FE8h */ case    1:  		/* addi R7, R7, 1 */
		/* 82115FE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82115FE8h case    1:*/		return 0x82115FEC;
		  /* 82115FECh */ case    2:  		/* addi R8, R8, 4 */
		/* 82115FECh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82115FECh case    2:*/		return 0x82115FF0;
		  /* 82115FF0h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 82115FF0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 82115FF0h case    3:*/		return 0x82115FF4;
		  /* 82115FF4h */ case    4:  		/* bc 12, CR6_LT, -96 */
		/* 82115FF4h case    4:*/		if ( regs.CR[6].lt ) { return 0x82115F94;  }
		/* 82115FF4h case    4:*/		return 0x82115FF8;
	}
	return 0x82115FF8;
} // Block from 82115FE4h-82115FF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82115FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82115FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82115FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82115FF8);
		  /* 82115FF8h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 82115FF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82115FF8h case    0:*/		return 0x82115FFC;
		  /* 82115FFCh */ case    1:  		/* mr R9, R17 */
		/* 82115FFCh case    1:*/		regs.R9 = regs.R17;
		/* 82115FFCh case    1:*/		return 0x82116000;
		  /* 82116000h */ case    2:  		/* mr R10, R17 */
		/* 82116000h case    2:*/		regs.R10 = regs.R17;
		/* 82116000h case    2:*/		return 0x82116004;
		  /* 82116004h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82116004h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82116004h case    3:*/		return 0x82116008;
		  /* 82116008h */ case    4:  		/* bc 4, CR6_GT, 44 */
		/* 82116008h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82116034;  }
		/* 82116008h case    4:*/		return 0x8211600C;
		  /* 8211600Ch */ case    5:  		/* lwz R7, <#[R27 + 16]> */
		/* 8211600Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000010) );
		/* 8211600Ch case    5:*/		return 0x82116010;
		  /* 82116010h */ case    6:  		/* mr R11, R17 */
		/* 82116010h case    6:*/		regs.R11 = regs.R17;
		/* 82116010h case    6:*/		return 0x82116014;
		  /* 82116014h */ case    7:  		/* lwz R6, <#[R27 + 4]> */
		/* 82116014h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000004) );
		/* 82116014h case    7:*/		return 0x82116018;
		  /* 82116018h */ case    8:  		/* lwzx R8, <#[R11 + R7]> */
		/* 82116018h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82116018h case    8:*/		return 0x8211601C;
		  /* 8211601Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 8211601Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211601Ch case    9:*/		return 0x82116020;
		  /* 82116020h */ case   10:  		/* addi R11, R11, 4 */
		/* 82116020h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82116020h case   10:*/		return 0x82116024;
		  /* 82116024h */ case   11:  		/* cmplw CR6, R10, R6 */
		/* 82116024h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 82116024h case   11:*/		return 0x82116028;
		  /* 82116028h */ case   12:  		/* lwz R8, <#[R8 + 16]> */
		/* 82116028h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000010) );
		/* 82116028h case   12:*/		return 0x8211602C;
		  /* 8211602Ch */ case   13:  		/* add R9, R8, R9 */
		/* 8211602Ch case   13:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8211602Ch case   13:*/		return 0x82116030;
		  /* 82116030h */ case   14:  		/* bc 12, CR6_LT, -24 */
		/* 82116030h case   14:*/		if ( regs.CR[6].lt ) { return 0x82116018;  }
		/* 82116030h case   14:*/		return 0x82116034;
	}
	return 0x82116034;
} // Block from 82115FF8h-82116034h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82116034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116034);
		  /* 82116034h */ case    0:  		/* rlwinm R31, R9, 2, 0, 29 */
		/* 82116034h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R9);
		/* 82116034h case    0:*/		return 0x82116038;
		  /* 82116038h */ case    1:  		/* lis R4, 9345 */
		/* 82116038h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82116038h case    1:*/		return 0x8211603C;
		  /* 8211603Ch */ case    2:  		/* mr R3, R31 */
		/* 8211603Ch case    2:*/		regs.R3 = regs.R31;
		/* 8211603Ch case    2:*/		return 0x82116040;
		  /* 82116040h */ case    3:  		/* bl -581184 */
		/* 82116040h case    3:*/		regs.LR = 0x82116044; return 0x82088200;
		/* 82116040h case    3:*/		return 0x82116044;
		  /* 82116044h */ case    4:  		/* or. R30, R3, R3 */
		/* 82116044h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82116044h case    4:*/		return 0x82116048;
		  /* 82116048h */ case    5:  		/* stw R30, <#[R1 + 144]> */
		/* 82116048h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 82116048h case    5:*/		return 0x8211604C;
		  /* 8211604Ch */ case    6:  		/* bc 12, CR0_EQ, 4112 */
		/* 8211604Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8211705C;  }
		/* 8211604Ch case    6:*/		return 0x82116050;
		  /* 82116050h */ case    7:  		/* mr R5, R31 */
		/* 82116050h case    7:*/		regs.R5 = regs.R31;
		/* 82116050h case    7:*/		return 0x82116054;
		  /* 82116054h */ case    8:  		/* li R4, 0 */
		/* 82116054h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82116054h case    8:*/		return 0x82116058;
		  /* 82116058h */ case    9:  		/* mr R3, R30 */
		/* 82116058h case    9:*/		regs.R3 = regs.R30;
		/* 82116058h case    9:*/		return 0x8211605C;
		  /* 8211605Ch */ case   10:  		/* bl -544028 */
		/* 8211605Ch case   10:*/		regs.LR = 0x82116060; return 0x82091340;
		/* 8211605Ch case   10:*/		return 0x82116060;
		  /* 82116060h */ case   11:  		/* lwz R11, <#[R27 + 4]> */
		/* 82116060h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82116060h case   11:*/		return 0x82116064;
		  /* 82116064h */ case   12:  		/* mr R8, R17 */
		/* 82116064h case   12:*/		regs.R8 = regs.R17;
		/* 82116064h case   12:*/		return 0x82116068;
		  /* 82116068h */ case   13:  		/* mr R9, R17 */
		/* 82116068h case   13:*/		regs.R9 = regs.R17;
		/* 82116068h case   13:*/		return 0x8211606C;
		  /* 8211606Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8211606Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211606Ch case   14:*/		return 0x82116070;
		  /* 82116070h */ case   15:  		/* bc 4, CR6_GT, 84 */
		/* 82116070h case   15:*/		if ( !regs.CR[6].gt ) { return 0x821160C4;  }
		/* 82116070h case   15:*/		return 0x82116074;
		  /* 82116074h */ case   16:  		/* lwz R10, <#[R27 + 16]> */
		/* 82116074h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 82116074h case   16:*/		return 0x82116078;
		  /* 82116078h */ case   17:  		/* mr R11, R17 */
		/* 82116078h case   17:*/		regs.R11 = regs.R17;
		/* 82116078h case   17:*/		return 0x8211607C;
		  /* 8211607Ch */ case   18:  		/* lwzx R7, <#[R11 + R10]> */
		/* 8211607Ch case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211607Ch case   18:*/		return 0x82116080;
		  /* 82116080h */ case   19:  		/* lwz R10, <#[R7 + 16]> */
		/* 82116080h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000010) );
		/* 82116080h case   19:*/		return 0x82116084;
		  /* 82116084h */ case   20:  		/* cmplwi CR6, R10, 0 */
		/* 82116084h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82116084h case   20:*/		return 0x82116088;
		  /* 82116088h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 82116088h case   21:*/		if ( regs.CR[6].eq ) { return 0x82116098;  }
		/* 82116088h case   21:*/		return 0x8211608C;
		  /* 8211608Ch */ case   22:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 8211608Ch case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 8211608Ch case   22:*/		return 0x82116090;
		  /* 82116090h */ case   23:  		/* add R10, R10, R30 */
		/* 82116090h case   23:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 82116090h case   23:*/		return 0x82116094;
		  /* 82116094h */ case   24:  		/* b 8 */
		/* 82116094h case   24:*/		return 0x8211609C;
		/* 82116094h case   24:*/		return 0x82116098;
	}
	return 0x82116098;
} // Block from 82116034h-82116098h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82116098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116098);
		  /* 82116098h */ case    0:  		/* mr R10, R17 */
		/* 82116098h case    0:*/		regs.R10 = regs.R17;
		/* 82116098h case    0:*/		return 0x8211609C;
	}
	return 0x8211609C;
} // Block from 82116098h-8211609Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211609Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211609C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211609C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211609C);
		  /* 8211609Ch */ case    0:  		/* stw R10, <#[R7 + 28]> */
		/* 8211609Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x0000001C) );
		/* 8211609Ch case    0:*/		return 0x821160A0;
		  /* 821160A0h */ case    1:  		/* addi R9, R9, 1 */
		/* 821160A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821160A0h case    1:*/		return 0x821160A4;
		  /* 821160A4h */ case    2:  		/* lwz R10, <#[R27 + 16]> */
		/* 821160A4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000010) );
		/* 821160A4h case    2:*/		return 0x821160A8;
		  /* 821160A8h */ case    3:  		/* lwz R7, <#[R27 + 4]> */
		/* 821160A8h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000004) );
		/* 821160A8h case    3:*/		return 0x821160AC;
		  /* 821160ACh */ case    4:  		/* cmplw CR6, R9, R7 */
		/* 821160ACh case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821160ACh case    4:*/		return 0x821160B0;
		  /* 821160B0h */ case    5:  		/* lwzx R7, <#[R11 + R10]> */
		/* 821160B0h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821160B0h case    5:*/		return 0x821160B4;
		  /* 821160B4h */ case    6:  		/* addi R11, R11, 4 */
		/* 821160B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821160B4h case    6:*/		return 0x821160B8;
		  /* 821160B8h */ case    7:  		/* lwz R7, <#[R7 + 16]> */
		/* 821160B8h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000010) );
		/* 821160B8h case    7:*/		return 0x821160BC;
		  /* 821160BCh */ case    8:  		/* add R8, R7, R8 */
		/* 821160BCh case    8:*/		cpu::op::add<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821160BCh case    8:*/		return 0x821160C0;
		  /* 821160C0h */ case    9:  		/* bc 12, CR6_LT, -68 */
		/* 821160C0h case    9:*/		if ( regs.CR[6].lt ) { return 0x8211607C;  }
		/* 821160C0h case    9:*/		return 0x821160C4;
	}
	return 0x821160C4;
} // Block from 8211609Ch-821160C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821160C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821160C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821160C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821160C4);
		  /* 821160C4h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821160C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821160C4h case    0:*/		return 0x821160C8;
		  /* 821160C8h */ case    1:  		/* mr R7, R17 */
		/* 821160C8h case    1:*/		regs.R7 = regs.R17;
		/* 821160C8h case    1:*/		return 0x821160CC;
		  /* 821160CCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821160CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821160CCh case    2:*/		return 0x821160D0;
		  /* 821160D0h */ case    3:  		/* bc 4, CR6_GT, 108 */
		/* 821160D0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8211613C;  }
		/* 821160D0h case    3:*/		return 0x821160D4;
		  /* 821160D4h */ case    4:  		/* mr R8, R17 */
		/* 821160D4h case    4:*/		regs.R8 = regs.R17;
		/* 821160D4h case    4:*/		return 0x821160D8;
		  /* 821160D8h */ case    5:  		/* lwz R11, <#[R27 + 20]> */
		/* 821160D8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821160D8h case    5:*/		return 0x821160DC;
		  /* 821160DCh */ case    6:  		/* lwz R9, <#[R27 + 116]> */
		/* 821160DCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000074) );
		/* 821160DCh case    6:*/		return 0x821160E0;
		  /* 821160E0h */ case    7:  		/* lwzx R11, <#[R11 + R8]> */
		/* 821160E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821160E0h case    7:*/		return 0x821160E4;
		  /* 821160E4h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821160E4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821160E4h case    8:*/		return 0x821160E8;
		  /* 821160E8h */ case    9:  		/* cmplw CR6, R9, R10 */
		/* 821160E8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821160E8h case    9:*/		return 0x821160EC;
		  /* 821160ECh */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 821160ECh case   10:*/		if ( regs.CR[6].eq ) { return 0x82116128;  }
		/* 821160ECh case   10:*/		return 0x821160F0;
		  /* 821160F0h */ case   11:  		/* lwz R9, <#[R27 + 16]> */
		/* 821160F0h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 821160F0h case   11:*/		return 0x821160F4;
		  /* 821160F4h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821160F4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821160F4h case   12:*/		return 0x821160F8;
		  /* 821160F8h */ case   13:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821160F8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821160F8h case   13:*/		return 0x821160FC;
		  /* 821160FCh */ case   14:  		/* lwz R10, <#[R10 + 28]> */
		/* 821160FCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821160FCh case   14:*/		return 0x82116100;
		  /* 82116100h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 82116100h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82116100h case   15:*/		return 0x82116104;
		  /* 82116104h */ case   16:  		/* bc 12, CR6_EQ, 36 */
		/* 82116104h case   16:*/		if ( regs.CR[6].eq ) { return 0x82116128;  }
		/* 82116104h case   16:*/		return 0x82116108;
		  /* 82116108h */ case   17:  		/* lwz R9, <#[R11 + 12]> */
		/* 82116108h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82116108h case   17:*/		return 0x8211610C;
		  /* 8211610Ch */ case   18:  		/* lwz R11, <#[R11 + 16]> */
		/* 8211610Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8211610Ch case   18:*/		return 0x82116110;
		  /* 82116110h */ case   19:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82116110h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82116110h case   19:*/		return 0x82116114;
		  /* 82116114h */ case   20:  		/* addi R11, R11, 1 */
		/* 82116114h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82116114h case   20:*/		return 0x82116118;
		  /* 82116118h */ case   21:  		/* lwzx R6, <#[R9 + R10]> */
		/* 82116118h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82116118h case   21:*/		return 0x8211611C;
		  /* 8211611Ch */ case   22:  		/* cmplw CR6, R6, R11 */
		/* 8211611Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 8211611Ch case   22:*/		return 0x82116120;
		  /* 82116120h */ case   23:  		/* bc 4, CR6_LT, 8 */
		/* 82116120h case   23:*/		if ( !regs.CR[6].lt ) { return 0x82116128;  }
		/* 82116120h case   23:*/		return 0x82116124;
		  /* 82116124h */ case   24:  		/* stwx R11, <#[R9 + R10]> */
		/* 82116124h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82116124h case   24:*/		return 0x82116128;
	}
	return 0x82116128;
} // Block from 821160C4h-82116128h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82116128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116128);
		  /* 82116128h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 82116128h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82116128h case    0:*/		return 0x8211612C;
		  /* 8211612Ch */ case    1:  		/* addi R7, R7, 1 */
		/* 8211612Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8211612Ch case    1:*/		return 0x82116130;
		  /* 82116130h */ case    2:  		/* addi R8, R8, 4 */
		/* 82116130h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82116130h case    2:*/		return 0x82116134;
		  /* 82116134h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 82116134h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 82116134h case    3:*/		return 0x82116138;
		  /* 82116138h */ case    4:  		/* bc 12, CR6_LT, -96 */
		/* 82116138h case    4:*/		if ( regs.CR[6].lt ) { return 0x821160D8;  }
		/* 82116138h case    4:*/		return 0x8211613C;
	}
	return 0x8211613C;
} // Block from 82116128h-8211613Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211613Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211613C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211613C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211613C);
		  /* 8211613Ch */ case    0:  		/* lwz R11, <#[R27 + 12]> */
		/* 8211613Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 8211613Ch case    0:*/		return 0x82116140;
		  /* 82116140h */ case    1:  		/* mr R5, R17 */
		/* 82116140h case    1:*/		regs.R5 = regs.R17;
		/* 82116140h case    1:*/		return 0x82116144;
		  /* 82116144h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82116144h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82116144h case    2:*/		return 0x82116148;
		  /* 82116148h */ case    3:  		/* bc 4, CR6_GT, 176 */
		/* 82116148h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821161F8;  }
		/* 82116148h case    3:*/		return 0x8211614C;
		  /* 8211614Ch */ case    4:  		/* mr R6, R17 */
		/* 8211614Ch case    4:*/		regs.R6 = regs.R17;
		/* 8211614Ch case    4:*/		return 0x82116150;
		  /* 82116150h */ case    5:  		/* lwz R11, <#[R27 + 24]> */
		/* 82116150h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 82116150h case    5:*/		return 0x82116154;
		  /* 82116154h */ case    6:  		/* lis R9, 24576 */
		/* 82116154h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x6000);
		/* 82116154h case    6:*/		return 0x82116158;
		  /* 82116158h */ case    7:  		/* lwzx R11, <#[R11 + R6]> */
		/* 82116158h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 82116158h case    7:*/		return 0x8211615C;
		  /* 8211615Ch */ case    8:  		/* lwz R10, <#[R11]> */
		/* 8211615Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211615Ch case    8:*/		return 0x82116160;
		  /* 82116160h */ case    9:  		/* rlwinm R8, R10, 0, 0, 3 */
		/* 82116160h case    9:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R8,regs.R10);
		/* 82116160h case    9:*/		return 0x82116164;
		  /* 82116164h */ case   10:  		/* cmplw CR6, R8, R9 */
		/* 82116164h case   10:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 82116164h case   10:*/		return 0x82116168;
		  /* 82116168h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82116168h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211617C;  }
		/* 82116168h case   11:*/		return 0x8211616C;
		  /* 8211616Ch */ case   12:  		/* rlwinm R10, R10, 0, 0, 11 */
		/* 8211616Ch case   12:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R10,regs.R10);
		/* 8211616Ch case   12:*/		return 0x82116170;
		  /* 82116170h */ case   13:  		/* lis R9, 4352 */
		/* 82116170h case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0x1100);
		/* 82116170h case   13:*/		return 0x82116174;
		  /* 82116174h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 82116174h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82116174h case   14:*/		return 0x82116178;
		  /* 82116178h */ case   15:  		/* bc 4, CR6_EQ, 108 */
		/* 82116178h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821161E4;  }
		/* 82116178h case   15:*/		return 0x8211617C;
	}
	return 0x8211617C;
} // Block from 8211613Ch-8211617Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211617Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211617C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211617C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211617C);
		  /* 8211617Ch */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211617Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211617Ch case    0:*/		return 0x82116180;
		  /* 82116180h */ case    1:  		/* mr R7, R17 */
		/* 82116180h case    1:*/		regs.R7 = regs.R17;
		/* 82116180h case    1:*/		return 0x82116184;
		  /* 82116184h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82116184h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82116184h case    2:*/		return 0x82116188;
		  /* 82116188h */ case    3:  		/* bc 4, CR6_GT, 92 */
		/* 82116188h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821161E4;  }
		/* 82116188h case    3:*/		return 0x8211618C;
		  /* 8211618Ch */ case    4:  		/* mr R8, R17 */
		/* 8211618Ch case    4:*/		regs.R8 = regs.R17;
		/* 8211618Ch case    4:*/		return 0x82116190;
		  /* 82116190h */ case    5:  		/* lwz R10, <#[R11 + 8]> */
		/* 82116190h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82116190h case    5:*/		return 0x82116194;
		  /* 82116194h */ case    6:  		/* lwz R9, <#[R27 + 20]> */
		/* 82116194h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000014) );
		/* 82116194h case    6:*/		return 0x82116198;
		  /* 82116198h */ case    7:  		/* lwz R4, <#[R27 + 16]> */
		/* 82116198h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000010) );
		/* 82116198h case    7:*/		return 0x8211619C;
		  /* 8211619Ch */ case    8:  		/* lwzx R10, <#[R8 + R10]> */
		/* 8211619Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8211619Ch case    8:*/		return 0x821161A0;
		  /* 821161A0h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821161A0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821161A0h case    9:*/		return 0x821161A4;
		  /* 821161A4h */ case   10:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821161A4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821161A4h case   10:*/		return 0x821161A8;
		  /* 821161A8h */ case   11:  		/* lwz R9, <#[R10 + 4]> */
		/* 821161A8h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 821161A8h case   11:*/		return 0x821161AC;
		  /* 821161ACh */ case   12:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821161ACh case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821161ACh case   12:*/		return 0x821161B0;
		  /* 821161B0h */ case   13:  		/* lwzx R9, <#[R9 + R4]> */
		/* 821161B0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 821161B0h case   13:*/		return 0x821161B4;
		  /* 821161B4h */ case   14:  		/* lwz R9, <#[R9 + 28]> */
		/* 821161B4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000001C) );
		/* 821161B4h case   14:*/		return 0x821161B8;
		  /* 821161B8h */ case   15:  		/* cmplwi CR6, R9, 0 */
		/* 821161B8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821161B8h case   15:*/		return 0x821161BC;
		  /* 821161BCh */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821161BCh case   16:*/		if ( regs.CR[6].eq ) { return 0x821161D0;  }
		/* 821161BCh case   16:*/		return 0x821161C0;
		  /* 821161C0h */ case   17:  		/* lwz R10, <#[R10 + 12]> */
		/* 821161C0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821161C0h case   17:*/		return 0x821161C4;
		  /* 821161C4h */ case   18:  		/* li R4, 4 */
		/* 821161C4h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821161C4h case   18:*/		return 0x821161C8;
		  /* 821161C8h */ case   19:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821161C8h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821161C8h case   19:*/		return 0x821161CC;
		  /* 821161CCh */ case   20:  		/* stwx R4, <#[R10 + R9]> */
		/* 821161CCh case   20:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821161CCh case   20:*/		return 0x821161D0;
	}
	return 0x821161D0;
} // Block from 8211617Ch-821161D0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821161D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821161D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821161D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821161D0);
		  /* 821161D0h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 821161D0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821161D0h case    0:*/		return 0x821161D4;
		  /* 821161D4h */ case    1:  		/* addi R7, R7, 1 */
		/* 821161D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821161D4h case    1:*/		return 0x821161D8;
		  /* 821161D8h */ case    2:  		/* addi R8, R8, 4 */
		/* 821161D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821161D8h case    2:*/		return 0x821161DC;
		  /* 821161DCh */ case    3:  		/* cmplw CR6, R7, R10 */
		/* 821161DCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 821161DCh case    3:*/		return 0x821161E0;
	}
	return 0x821161E0;
} // Block from 821161D0h-821161E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821161E0h
// Function '?VectorizeRight@CProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821161E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821161E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821161E0);
		  /* 821161E0h */ case    0:  		/* bc 12, CR6_LT, -80 */
		/* 821161E0h case    0:*/		if ( regs.CR[6].lt ) { return 0x82116190;  }
		/* 821161E0h case    0:*/		return 0x821161E4;
	}
	return 0x821161E4;
} // Block from 821161E0h-821161E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821161E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821161E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821161E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821161E4);
		  /* 821161E4h */ case    0:  		/* lwz R11, <#[R27 + 12]> */
		/* 821161E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821161E4h case    0:*/		return 0x821161E8;
		  /* 821161E8h */ case    1:  		/* addi R5, R5, 1 */
		/* 821161E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821161E8h case    1:*/		return 0x821161EC;
		  /* 821161ECh */ case    2:  		/* addi R6, R6, 4 */
		/* 821161ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 821161ECh case    2:*/		return 0x821161F0;
		  /* 821161F0h */ case    3:  		/* cmplw CR6, R5, R11 */
		/* 821161F0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821161F0h case    3:*/		return 0x821161F4;
		  /* 821161F4h */ case    4:  		/* bc 12, CR6_LT, -164 */
		/* 821161F4h case    4:*/		if ( regs.CR[6].lt ) { return 0x82116150;  }
		/* 821161F4h case    4:*/		return 0x821161F8;
	}
	return 0x821161F8;
} // Block from 821161E4h-821161F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821161F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821161F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821161F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821161F8);
		  /* 821161F8h */ case    0:  		/* lwz R11, <#[R27 + 108]> */
		/* 821161F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 821161F8h case    0:*/		return 0x821161FC;
		  /* 821161FCh */ case    1:  		/* rlwinm. R10, R11, 0, 3, 3 */
		/* 821161FCh case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R11);
		/* 821161FCh case    1:*/		return 0x82116200;
		  /* 82116200h */ case    2:  		/* bc 4, CR0_EQ, 960 */
		/* 82116200h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821165C0;  }
		/* 82116200h case    2:*/		return 0x82116204;
		  /* 82116204h */ case    3:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 82116204h case    3:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 82116204h case    3:*/		return 0x82116208;
		  /* 82116208h */ case    4:  		/* bc 4, CR0_EQ, 952 */
		/* 82116208h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821165C0;  }
		/* 82116208h case    4:*/		return 0x8211620C;
		  /* 8211620Ch */ case    5:  		/* mr R3, R27 */
		/* 8211620Ch case    5:*/		regs.R3 = regs.R27;
		/* 8211620Ch case    5:*/		return 0x82116210;
		  /* 82116210h */ case    6:  		/* bl -67192 */
		/* 82116210h case    6:*/		regs.LR = 0x82116214; return 0x82105B98;
		/* 82116210h case    6:*/		return 0x82116214;
		  /* 82116214h */ case    7:  		/* lwz R11, <#[R27 + 12]> */
		/* 82116214h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82116214h case    7:*/		return 0x82116218;
		  /* 82116218h */ case    8:  		/* mr R20, R17 */
		/* 82116218h case    8:*/		regs.R20 = regs.R17;
		/* 82116218h case    8:*/		return 0x8211621C;
		  /* 8211621Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8211621Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211621Ch case    9:*/		return 0x82116220;
		  /* 82116220h */ case   10:  		/* bc 4, CR6_GT, 928 */
		/* 82116220h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821165C0;  }
		/* 82116220h case   10:*/		return 0x82116224;
		  /* 82116224h */ case   11:  		/* lis R11, 8272 */
		/* 82116224h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0x2050);
		/* 82116224h case   11:*/		return 0x82116228;
		  /* 82116228h */ case   12:  		/* mr R21, R17 */
		/* 82116228h case   12:*/		regs.R21 = regs.R17;
		/* 82116228h case   12:*/		return 0x8211622C;
		  /* 8211622Ch */ case   13:  		/* lis R18, 20480 */
		/* 8211622Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R18,0x5000);
		/* 8211622Ch case   13:*/		return 0x82116230;
		  /* 82116230h */ case   14:  		/* ori R19, R11, 1 */
		/* 82116230h case   14:*/		cpu::op::ori<0>(regs,&regs.R19,regs.R11,0x1);
		/* 82116230h case   14:*/		return 0x82116234;
		  /* 82116234h */ case   15:  		/* li R22, -1 */
		/* 82116234h case   15:*/		cpu::op::li<0>(regs,&regs.R22,0xFFFFFFFF);
		/* 82116234h case   15:*/		return 0x82116238;
		  /* 82116238h */ case   16:  		/* lwz R8, <#[R27 + 24]> */
		/* 82116238h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000018) );
		/* 82116238h case   16:*/		return 0x8211623C;
		  /* 8211623Ch */ case   17:  		/* lis R11, 8256 */
		/* 8211623Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0x2040);
		/* 8211623Ch case   17:*/		return 0x82116240;
		  /* 82116240h */ case   18:  		/* ori R11, R11, 1 */
		/* 82116240h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82116240h case   18:*/		return 0x82116244;
		  /* 82116244h */ case   19:  		/* lwzx R25, <#[R21 + R8]> */
		/* 82116244h case   19:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R21 + regs.R8 + 0x00000000) );
		/* 82116244h case   19:*/		return 0x82116248;
		  /* 82116248h */ case   20:  		/* lwz R10, <#[R25]> */
		/* 82116248h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 82116248h case   20:*/		return 0x8211624C;
		  /* 8211624Ch */ case   21:  		/* cmplw CR6, R10, R11 */
		/* 8211624Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8211624Ch case   21:*/		return 0x82116250;
		  /* 82116250h */ case   22:  		/* bc 4, CR6_EQ, 860 */
		/* 82116250h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821165AC;  }
		/* 82116250h case   22:*/		return 0x82116254;
		  /* 82116254h */ case   23:  		/* lwz R11, <#[R25 + 8]> */
		/* 82116254h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82116254h case   23:*/		return 0x82116258;
		  /* 82116258h */ case   24:  		/* lwz R7, <#[R27 + 20]> */
		/* 82116258h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000014) );
		/* 82116258h case   24:*/		return 0x8211625C;
		  /* 8211625Ch */ case   25:  		/* lwz R9, <#[R27 + 16]> */
		/* 8211625Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 8211625Ch case   25:*/		return 0x82116260;
		  /* 82116260h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 82116260h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82116260h case   26:*/		return 0x82116264;
		  /* 82116264h */ case   27:  		/* lwz R11, <#[R11 + 4]> */
		/* 82116264h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82116264h case   27:*/		return 0x82116268;
		  /* 82116268h */ case   28:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82116268h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82116268h case   28:*/		return 0x8211626C;
		  /* 8211626Ch */ case   29:  		/* rlwinm R6, R11, 2, 0, 29 */
		/* 8211626Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R11);
		/* 8211626Ch case   29:*/		return 0x82116270;
		  /* 82116270h */ case   30:  		/* lwzx R11, <#[R10 + R7]> */
		/* 82116270h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82116270h case   30:*/		return 0x82116274;
		  /* 82116274h */ case   31:  		/* lwzx R10, <#[R6 + R7]> */
		/* 82116274h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 82116274h case   31:*/		return 0x82116278;
		  /* 82116278h */ case   32:  		/* lwz R6, <#[R11 + 4]> */
		/* 82116278h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82116278h case   32:*/		return 0x8211627C;
		  /* 8211627Ch */ case   33:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8211627Ch case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8211627Ch case   33:*/		return 0x82116280;
		  /* 82116280h */ case   34:  		/* lwzx R6, <#[R6 + R9]> */
		/* 82116280h case   34:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 82116280h case   34:*/		return 0x82116284;
		  /* 82116284h */ case   35:  		/* lwz R6, <#[R6 + 4]> */
		/* 82116284h case   35:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000004) );
		/* 82116284h case   35:*/		return 0x82116288;
		  /* 82116288h */ case   36:  		/* rlwinm. R6, R6, 0, 30, 30 */
		/* 82116288h case   36:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R6,regs.R6);
		/* 82116288h case   36:*/		return 0x8211628C;
		  /* 8211628Ch */ case   37:  		/* bc 12, CR0_EQ, 800 */
		/* 8211628Ch case   37:*/		if ( regs.CR[0].eq ) { return 0x821165AC;  }
		/* 8211628Ch case   37:*/		return 0x82116290;
		  /* 82116290h */ case   38:  		/* lwz R6, <#[R10 + 4]> */
		/* 82116290h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 82116290h case   38:*/		return 0x82116294;
		  /* 82116294h */ case   39:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82116294h case   39:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82116294h case   39:*/		return 0x82116298;
		  /* 82116298h */ case   40:  		/* lwzx R9, <#[R6 + R9]> */
		/* 82116298h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 82116298h case   40:*/		return 0x8211629C;
		  /* 8211629Ch */ case   41:  		/* lwz R9, <#[R9 + 4]> */
		/* 8211629Ch case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8211629Ch case   41:*/		return 0x821162A0;
		  /* 821162A0h */ case   42:  		/* rlwinm. R9, R9, 0, 30, 30 */
		/* 821162A0h case   42:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R9);
		/* 821162A0h case   42:*/		return 0x821162A4;
		  /* 821162A4h */ case   43:  		/* bc 12, CR0_EQ, 776 */
		/* 821162A4h case   43:*/		if ( regs.CR[0].eq ) { return 0x821165AC;  }
		/* 821162A4h case   43:*/		return 0x821162A8;
		  /* 821162A8h */ case   44:  		/* lwz R11, <#[R11 + 72]> */
		/* 821162A8h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 821162A8h case   44:*/		return 0x821162AC;
		  /* 821162ACh */ case   45:  		/* lwz R10, <#[R10 + 72]> */
		/* 821162ACh case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000048) );
		/* 821162ACh case   45:*/		return 0x821162B0;
		  /* 821162B0h */ case   46:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821162B0h case   46:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821162B0h case   46:*/		return 0x821162B4;
		  /* 821162B4h */ case   47:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821162B4h case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821162B4h case   47:*/		return 0x821162B8;
		  /* 821162B8h */ case   48:  		/* lwzx R24, <#[R11 + R8]> */
		/* 821162B8h case   48:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821162B8h case   48:*/		return 0x821162BC;
		  /* 821162BCh */ case   49:  		/* lwzx R23, <#[R10 + R8]> */
		/* 821162BCh case   49:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821162BCh case   49:*/		return 0x821162C0;
		  /* 821162C0h */ case   50:  		/* lwz R11, <#[R24]> */
		/* 821162C0h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821162C0h case   50:*/		return 0x821162C4;
		  /* 821162C4h */ case   51:  		/* cmplw CR6, R11, R19 */
		/* 821162C4h case   51:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821162C4h case   51:*/		return 0x821162C8;
		  /* 821162C8h */ case   52:  		/* bc 12, CR6_EQ, 16 */
		/* 821162C8h case   52:*/		if ( regs.CR[6].eq ) { return 0x821162D8;  }
		/* 821162C8h case   52:*/		return 0x821162CC;
		  /* 821162CCh */ case   53:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 821162CCh case   53:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 821162CCh case   53:*/		return 0x821162D0;
		  /* 821162D0h */ case   54:  		/* cmplw CR6, R11, R18 */
		/* 821162D0h case   54:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821162D0h case   54:*/		return 0x821162D4;
		  /* 821162D4h */ case   55:  		/* bc 4, CR6_EQ, 728 */
		/* 821162D4h case   55:*/		if ( !regs.CR[6].eq ) { return 0x821165AC;  }
		/* 821162D4h case   55:*/		return 0x821162D8;
	}
	return 0x821162D8;
} // Block from 821161F8h-821162D8h (56 instructions)

//////////////////////////////////////////////////////
// Block at 821162D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821162D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821162D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821162D8);
		  /* 821162D8h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821162D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821162D8h case    0:*/		return 0x821162DC;
		  /* 821162DCh */ case    1:  		/* cmplw CR6, R11, R19 */
		/* 821162DCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821162DCh case    1:*/		return 0x821162E0;
		  /* 821162E0h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821162E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821162F0;  }
		/* 821162E0h case    2:*/		return 0x821162E4;
		  /* 821162E4h */ case    3:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 821162E4h case    3:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 821162E4h case    3:*/		return 0x821162E8;
		  /* 821162E8h */ case    4:  		/* cmplw CR6, R11, R18 */
		/* 821162E8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821162E8h case    4:*/		return 0x821162EC;
		  /* 821162ECh */ case    5:  		/* bc 4, CR6_EQ, 704 */
		/* 821162ECh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821165AC;  }
		/* 821162ECh case    5:*/		return 0x821162F0;
	}
	return 0x821162F0;
} // Block from 821162D8h-821162F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821162F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821162F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821162F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821162F0);
		  /* 821162F0h */ case    0:  		/* lwz R9, <#[R23 + 4]> */
		/* 821162F0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000004) );
		/* 821162F0h case    0:*/		return 0x821162F4;
		  /* 821162F4h */ case    1:  		/* li R10, 2 */
		/* 821162F4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821162F4h case    1:*/		return 0x821162F8;
		  /* 821162F8h */ case    2:  		/* lwz R11, <#[R24 + 4]> */
		/* 821162F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821162F8h case    2:*/		return 0x821162FC;
		  /* 821162FCh */ case    3:  		/* lwz R8, <#[R27 + 108]> */
		/* 821162FCh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x0000006C) );
		/* 821162FCh case    3:*/		return 0x82116300;
		  /* 82116300h */ case    4:  		/* rlwinm R30, R9, 31, 1, 31 */
		/* 82116300h case    4:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R30,regs.R9);
		/* 82116300h case    4:*/		return 0x82116304;
		  /* 82116304h */ case    5:  		/* rlwinm R11, R11, 31, 1, 31 */
		/* 82116304h case    5:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R11);
		/* 82116304h case    5:*/		return 0x82116308;
		  /* 82116308h */ case    6:  		/* nor R9, R8, R8 */
		/* 82116308h case    6:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R8,regs.R8);
		/* 82116308h case    6:*/		return 0x8211630C;
		  /* 8211630Ch */ case    7:  		/* add R26, R30, R11 */
		/* 8211630Ch case    7:*/		cpu::op::add<0>(regs,&regs.R26,regs.R30,regs.R11);
		/* 8211630Ch case    7:*/		return 0x82116310;
		  /* 82116310h */ case    8:  		/* rlwimi R10, R9, 7, 31, 31 */
		/* 82116310h case    8:*/		cpu::op::rlwimi<0,7,31,31>(regs,&regs.R10,regs.R9);
		/* 82116310h case    8:*/		return 0x82116314;
		  /* 82116314h */ case    9:  		/* cmplw CR6, R26, R10 */
		/* 82116314h case    9:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 82116314h case    9:*/		return 0x82116318;
		  /* 82116318h */ case   10:  		/* bc 12, CR6_LT, 660 */
		/* 82116318h case   10:*/		if ( regs.CR[6].lt ) { return 0x821165AC;  }
		/* 82116318h case   10:*/		return 0x8211631C;
		  /* 8211631Ch */ case   11:  		/* cmplwi CR6, R26, 4 */
		/* 8211631Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 8211631Ch case   11:*/		return 0x82116320;
		  /* 82116320h */ case   12:  		/* bc 12, CR6_GT, 652 */
		/* 82116320h case   12:*/		if ( regs.CR[6].gt ) { return 0x821165AC;  }
		/* 82116320h case   12:*/		return 0x82116324;
		  /* 82116324h */ case   13:  		/* lwz R10, <#[R24 + 16]> */
		/* 82116324h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000010) );
		/* 82116324h case   13:*/		return 0x82116328;
		  /* 82116328h */ case   14:  		/* lwz R10, <#[R10]> */
		/* 82116328h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82116328h case   14:*/		return 0x8211632C;
		  /* 8211632Ch */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8211632Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8211632Ch case   15:*/		return 0x82116330;
		  /* 82116330h */ case   16:  		/* lwzx R10, <#[R10 + R7]> */
		/* 82116330h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82116330h case   16:*/		return 0x82116334;
		  /* 82116334h */ case   17:  		/* lwz R9, <#[R10 + 84]> */
		/* 82116334h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000054) );
		/* 82116334h case   17:*/		return 0x82116338;
		  /* 82116338h */ case   18:  		/* cmplw CR6, R20, R9 */
		/* 82116338h case   18:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R9);
		/* 82116338h case   18:*/		return 0x8211633C;
		  /* 8211633Ch */ case   19:  		/* bc 4, CR6_EQ, 624 */
		/* 8211633Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x821165AC;  }
		/* 8211633Ch case   19:*/		return 0x82116340;
		  /* 82116340h */ case   20:  		/* lwz R10, <#[R10 + 88]> */
		/* 82116340h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000058) );
		/* 82116340h case   20:*/		return 0x82116344;
		  /* 82116344h */ case   21:  		/* cmplw CR6, R20, R10 */
		/* 82116344h case   21:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R10);
		/* 82116344h case   21:*/		return 0x82116348;
		  /* 82116348h */ case   22:  		/* bc 4, CR6_EQ, 612 */
		/* 82116348h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821165AC;  }
		/* 82116348h case   22:*/		return 0x8211634C;
		  /* 8211634Ch */ case   23:  		/* lwz R10, <#[R23 + 16]> */
		/* 8211634Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000010) );
		/* 8211634Ch case   23:*/		return 0x82116350;
		  /* 82116350h */ case   24:  		/* lwz R10, <#[R10]> */
		/* 82116350h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82116350h case   24:*/		return 0x82116354;
		  /* 82116354h */ case   25:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82116354h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82116354h case   25:*/		return 0x82116358;
		  /* 82116358h */ case   26:  		/* lwzx R10, <#[R10 + R7]> */
		/* 82116358h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82116358h case   26:*/		return 0x8211635C;
		  /* 8211635Ch */ case   27:  		/* lwz R9, <#[R10 + 84]> */
		/* 8211635Ch case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000054) );
		/* 8211635Ch case   27:*/		return 0x82116360;
		  /* 82116360h */ case   28:  		/* cmplw CR6, R20, R9 */
		/* 82116360h case   28:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R9);
		/* 82116360h case   28:*/		return 0x82116364;
		  /* 82116364h */ case   29:  		/* bc 4, CR6_EQ, 584 */
		/* 82116364h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821165AC;  }
		/* 82116364h case   29:*/		return 0x82116368;
		  /* 82116368h */ case   30:  		/* lwz R10, <#[R10 + 88]> */
		/* 82116368h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000058) );
		/* 82116368h case   30:*/		return 0x8211636C;
		  /* 8211636Ch */ case   31:  		/* cmplw CR6, R20, R10 */
		/* 8211636Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R10);
		/* 8211636Ch case   31:*/		return 0x82116370;
		  /* 82116370h */ case   32:  		/* bc 4, CR6_EQ, 572 */
		/* 82116370h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821165AC;  }
		/* 82116370h case   32:*/		return 0x82116374;
		  /* 82116374h */ case   33:  		/* lwz R29, <#[R24 + 8]> */
		/* 82116374h case   33:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R24 + 0x00000008) );
		/* 82116374h case   33:*/		return 0x82116378;
		  /* 82116378h */ case   34:  		/* rlwinm R31, R11, 2, 0, 29 */
		/* 82116378h case   34:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R11);
		/* 82116378h case   34:*/		return 0x8211637C;
		  /* 8211637Ch */ case   35:  		/* addi R3, R1, 128 */
		/* 8211637Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8211637Ch case   35:*/		return 0x82116380;
		  /* 82116380h */ case   36:  		/* mr R5, R31 */
		/* 82116380h case   36:*/		regs.R5 = regs.R31;
		/* 82116380h case   36:*/		return 0x82116384;
		  /* 82116384h */ case   37:  		/* mr R4, R29 */
		/* 82116384h case   37:*/		regs.R4 = regs.R29;
		/* 82116384h case   37:*/		return 0x82116388;
		  /* 82116388h */ case   38:  		/* bl -543192 */
		/* 82116388h case   38:*/		regs.LR = 0x8211638C; return 0x820919B0;
		/* 82116388h case   38:*/		return 0x8211638C;
		  /* 8211638Ch */ case   39:  		/* lwz R28, <#[R23 + 8]> */
		/* 8211638Ch case   39:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R23 + 0x00000008) );
		/* 8211638Ch case   39:*/		return 0x82116390;
		  /* 82116390h */ case   40:  		/* addi R11, R1, 128 */
		/* 82116390h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82116390h case   40:*/		return 0x82116394;
		  /* 82116394h */ case   41:  		/* rlwinm R30, R30, 2, 0, 29 */
		/* 82116394h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R30);
		/* 82116394h case   41:*/		return 0x82116398;
		  /* 82116398h */ case   42:  		/* add R3, R31, R11 */
		/* 82116398h case   42:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116398h case   42:*/		return 0x8211639C;
		  /* 8211639Ch */ case   43:  		/* mr R5, R30 */
		/* 8211639Ch case   43:*/		regs.R5 = regs.R30;
		/* 8211639Ch case   43:*/		return 0x821163A0;
		  /* 821163A0h */ case   44:  		/* mr R4, R28 */
		/* 821163A0h case   44:*/		regs.R4 = regs.R28;
		/* 821163A0h case   44:*/		return 0x821163A4;
		  /* 821163A4h */ case   45:  		/* bl -543220 */
		/* 821163A4h case   45:*/		regs.LR = 0x821163A8; return 0x820919B0;
		/* 821163A4h case   45:*/		return 0x821163A8;
		  /* 821163A8h */ case   46:  		/* mr R5, R31 */
		/* 821163A8h case   46:*/		regs.R5 = regs.R31;
		/* 821163A8h case   46:*/		return 0x821163AC;
		  /* 821163ACh */ case   47:  		/* add R4, R29, R31 */
		/* 821163ACh case   47:*/		cpu::op::add<0>(regs,&regs.R4,regs.R29,regs.R31);
		/* 821163ACh case   47:*/		return 0x821163B0;
		  /* 821163B0h */ case   48:  		/* addi R3, R1, 192 */
		/* 821163B0h case   48:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 821163B0h case   48:*/		return 0x821163B4;
		  /* 821163B4h */ case   49:  		/* bl -543236 */
		/* 821163B4h case   49:*/		regs.LR = 0x821163B8; return 0x820919B0;
		/* 821163B4h case   49:*/		return 0x821163B8;
		  /* 821163B8h */ case   50:  		/* addi R11, R1, 192 */
		/* 821163B8h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC0);
		/* 821163B8h case   50:*/		return 0x821163BC;
		  /* 821163BCh */ case   51:  		/* mr R5, R30 */
		/* 821163BCh case   51:*/		regs.R5 = regs.R30;
		/* 821163BCh case   51:*/		return 0x821163C0;
		  /* 821163C0h */ case   52:  		/* add R4, R28, R30 */
		/* 821163C0h case   52:*/		cpu::op::add<0>(regs,&regs.R4,regs.R28,regs.R30);
		/* 821163C0h case   52:*/		return 0x821163C4;
		  /* 821163C4h */ case   53:  		/* add R3, R31, R11 */
		/* 821163C4h case   53:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 821163C4h case   53:*/		return 0x821163C8;
		  /* 821163C8h */ case   54:  		/* bl -543256 */
		/* 821163C8h case   54:*/		regs.LR = 0x821163CC; return 0x820919B0;
		/* 821163C8h case   54:*/		return 0x821163CC;
		  /* 821163CCh */ case   55:  		/* mr R10, R22 */
		/* 821163CCh case   55:*/		regs.R10 = regs.R22;
		/* 821163CCh case   55:*/		return 0x821163D0;
		  /* 821163D0h */ case   56:  		/* li R9, 0 */
		/* 821163D0h case   56:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821163D0h case   56:*/		return 0x821163D4;
		  /* 821163D4h */ case   57:  		/* mr R8, R25 */
		/* 821163D4h case   57:*/		regs.R8 = regs.R25;
		/* 821163D4h case   57:*/		return 0x821163D8;
		  /* 821163D8h */ case   58:  		/* li R7, 0 */
		/* 821163D8h case   58:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821163D8h case   58:*/		return 0x821163DC;
		  /* 821163DCh */ case   59:  		/* li R6, 0 */
		/* 821163DCh case   59:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821163DCh case   59:*/		return 0x821163E0;
		  /* 821163E0h */ case   60:  		/* mr R5, R26 */
		/* 821163E0h case   60:*/		regs.R5 = regs.R26;
		/* 821163E0h case   60:*/		return 0x821163E4;
		  /* 821163E4h */ case   61:  		/* addi R4, R1, 128 */
		/* 821163E4h case   61:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 821163E4h case   61:*/		return 0x821163E8;
		  /* 821163E8h */ case   62:  		/* mr R3, R27 */
		/* 821163E8h case   62:*/		regs.R3 = regs.R27;
		/* 821163E8h case   62:*/		return 0x821163EC;
		  /* 821163ECh */ case   63:  		/* bl -17172 */
		/* 821163ECh case   63:*/		regs.LR = 0x821163F0; return 0x821120D8;
		/* 821163ECh case   63:*/		return 0x821163F0;
		  /* 821163F0h */ case   64:  		/* cmpwi CR0, R3, 0 */
		/* 821163F0h case   64:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821163F0h case   64:*/		return 0x821163F4;
		  /* 821163F4h */ case   65:  		/* bc 12, CR0_EQ, 56 */
		/* 821163F4h case   65:*/		if ( regs.CR[0].eq ) { return 0x8211642C;  }
		/* 821163F4h case   65:*/		return 0x821163F8;
		  /* 821163F8h */ case   66:  		/* mr R10, R22 */
		/* 821163F8h case   66:*/		regs.R10 = regs.R22;
		/* 821163F8h case   66:*/		return 0x821163FC;
		  /* 821163FCh */ case   67:  		/* li R9, 0 */
		/* 821163FCh case   67:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821163FCh case   67:*/		return 0x82116400;
		  /* 82116400h */ case   68:  		/* mr R8, R25 */
		/* 82116400h case   68:*/		regs.R8 = regs.R25;
		/* 82116400h case   68:*/		return 0x82116404;
		  /* 82116404h */ case   69:  		/* li R7, 0 */
		/* 82116404h case   69:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116404h case   69:*/		return 0x82116408;
		  /* 82116408h */ case   70:  		/* li R6, 0 */
		/* 82116408h case   70:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82116408h case   70:*/		return 0x8211640C;
		  /* 8211640Ch */ case   71:  		/* mr R5, R26 */
		/* 8211640Ch case   71:*/		regs.R5 = regs.R26;
		/* 8211640Ch case   71:*/		return 0x82116410;
		  /* 82116410h */ case   72:  		/* addi R4, R1, 192 */
		/* 82116410h case   72:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82116410h case   72:*/		return 0x82116414;
		  /* 82116414h */ case   73:  		/* mr R3, R27 */
		/* 82116414h case   73:*/		regs.R3 = regs.R27;
		/* 82116414h case   73:*/		return 0x82116418;
		  /* 82116418h */ case   74:  		/* bl -17216 */
		/* 82116418h case   74:*/		regs.LR = 0x8211641C; return 0x821120D8;
		/* 82116418h case   74:*/		return 0x8211641C;
		  /* 8211641Ch */ case   75:  		/* cmpwi CR0, R3, 0 */
		/* 8211641Ch case   75:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211641Ch case   75:*/		return 0x82116420;
		  /* 82116420h */ case   76:  		/* bc 12, CR0_EQ, 12 */
		/* 82116420h case   76:*/		if ( regs.CR[0].eq ) { return 0x8211642C;  }
		/* 82116420h case   76:*/		return 0x82116424;
		  /* 82116424h */ case   77:  		/* mr R28, R17 */
		/* 82116424h case   77:*/		regs.R28 = regs.R17;
		/* 82116424h case   77:*/		return 0x82116428;
		  /* 82116428h */ case   78:  		/* b 176 */
		/* 82116428h case   78:*/		return 0x821164D8;
		/* 82116428h case   78:*/		return 0x8211642C;
	}
	return 0x8211642C;
} // Block from 821162F0h-8211642Ch (79 instructions)

//////////////////////////////////////////////////////
// Block at 8211642Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211642C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211642C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211642C);
		  /* 8211642Ch */ case    0:  		/* lwz R28, <#[R24 + 8]> */
		/* 8211642Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000008) );
		/* 8211642Ch case    0:*/		return 0x82116430;
		  /* 82116430h */ case    1:  		/* mr R5, R31 */
		/* 82116430h case    1:*/		regs.R5 = regs.R31;
		/* 82116430h case    1:*/		return 0x82116434;
		  /* 82116434h */ case    2:  		/* addi R3, R1, 96 */
		/* 82116434h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82116434h case    2:*/		return 0x82116438;
		  /* 82116438h */ case    3:  		/* mr R4, R28 */
		/* 82116438h case    3:*/		regs.R4 = regs.R28;
		/* 82116438h case    3:*/		return 0x8211643C;
		  /* 8211643Ch */ case    4:  		/* bl -543372 */
		/* 8211643Ch case    4:*/		regs.LR = 0x82116440; return 0x820919B0;
		/* 8211643Ch case    4:*/		return 0x82116440;
		  /* 82116440h */ case    5:  		/* lwz R29, <#[R23 + 8]> */
		/* 82116440h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + 0x00000008) );
		/* 82116440h case    5:*/		return 0x82116444;
		  /* 82116444h */ case    6:  		/* addi R11, R1, 96 */
		/* 82116444h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82116444h case    6:*/		return 0x82116448;
		  /* 82116448h */ case    7:  		/* add R4, R29, R30 */
		/* 82116448h case    7:*/		cpu::op::add<0>(regs,&regs.R4,regs.R29,regs.R30);
		/* 82116448h case    7:*/		return 0x8211644C;
		  /* 8211644Ch */ case    8:  		/* mr R5, R30 */
		/* 8211644Ch case    8:*/		regs.R5 = regs.R30;
		/* 8211644Ch case    8:*/		return 0x82116450;
		  /* 82116450h */ case    9:  		/* add R3, R31, R11 */
		/* 82116450h case    9:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116450h case    9:*/		return 0x82116454;
		  /* 82116454h */ case   10:  		/* bl -543396 */
		/* 82116454h case   10:*/		regs.LR = 0x82116458; return 0x820919B0;
		/* 82116454h case   10:*/		return 0x82116458;
		  /* 82116458h */ case   11:  		/* mr R5, R31 */
		/* 82116458h case   11:*/		regs.R5 = regs.R31;
		/* 82116458h case   11:*/		return 0x8211645C;
		  /* 8211645Ch */ case   12:  		/* add R4, R28, R31 */
		/* 8211645Ch case   12:*/		cpu::op::add<0>(regs,&regs.R4,regs.R28,regs.R31);
		/* 8211645Ch case   12:*/		return 0x82116460;
		  /* 82116460h */ case   13:  		/* addi R3, R1, 160 */
		/* 82116460h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82116460h case   13:*/		return 0x82116464;
		  /* 82116464h */ case   14:  		/* bl -543412 */
		/* 82116464h case   14:*/		regs.LR = 0x82116468; return 0x820919B0;
		/* 82116464h case   14:*/		return 0x82116468;
		  /* 82116468h */ case   15:  		/* addi R11, R1, 160 */
		/* 82116468h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 82116468h case   15:*/		return 0x8211646C;
		  /* 8211646Ch */ case   16:  		/* mr R5, R30 */
		/* 8211646Ch case   16:*/		regs.R5 = regs.R30;
		/* 8211646Ch case   16:*/		return 0x82116470;
		  /* 82116470h */ case   17:  		/* mr R4, R29 */
		/* 82116470h case   17:*/		regs.R4 = regs.R29;
		/* 82116470h case   17:*/		return 0x82116474;
		  /* 82116474h */ case   18:  		/* add R3, R31, R11 */
		/* 82116474h case   18:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116474h case   18:*/		return 0x82116478;
		  /* 82116478h */ case   19:  		/* bl -543432 */
		/* 82116478h case   19:*/		regs.LR = 0x8211647C; return 0x820919B0;
		/* 82116478h case   19:*/		return 0x8211647C;
		  /* 8211647Ch */ case   20:  		/* mr R10, R22 */
		/* 8211647Ch case   20:*/		regs.R10 = regs.R22;
		/* 8211647Ch case   20:*/		return 0x82116480;
		  /* 82116480h */ case   21:  		/* li R9, 0 */
		/* 82116480h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116480h case   21:*/		return 0x82116484;
		  /* 82116484h */ case   22:  		/* mr R8, R25 */
		/* 82116484h case   22:*/		regs.R8 = regs.R25;
		/* 82116484h case   22:*/		return 0x82116488;
		  /* 82116488h */ case   23:  		/* li R7, 0 */
		/* 82116488h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116488h case   23:*/		return 0x8211648C;
		  /* 8211648Ch */ case   24:  		/* li R6, 0 */
		/* 8211648Ch case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211648Ch case   24:*/		return 0x82116490;
		  /* 82116490h */ case   25:  		/* mr R5, R26 */
		/* 82116490h case   25:*/		regs.R5 = regs.R26;
		/* 82116490h case   25:*/		return 0x82116494;
		  /* 82116494h */ case   26:  		/* addi R4, R1, 96 */
		/* 82116494h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82116494h case   26:*/		return 0x82116498;
		  /* 82116498h */ case   27:  		/* mr R3, R27 */
		/* 82116498h case   27:*/		regs.R3 = regs.R27;
		/* 82116498h case   27:*/		return 0x8211649C;
		  /* 8211649Ch */ case   28:  		/* bl -17348 */
		/* 8211649Ch case   28:*/		regs.LR = 0x821164A0; return 0x821120D8;
		/* 8211649Ch case   28:*/		return 0x821164A0;
		  /* 821164A0h */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 821164A0h case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821164A0h case   29:*/		return 0x821164A4;
		  /* 821164A4h */ case   30:  		/* bc 12, CR0_EQ, 264 */
		/* 821164A4h case   30:*/		if ( regs.CR[0].eq ) { return 0x821165AC;  }
		/* 821164A4h case   30:*/		return 0x821164A8;
		  /* 821164A8h */ case   31:  		/* mr R10, R22 */
		/* 821164A8h case   31:*/		regs.R10 = regs.R22;
		/* 821164A8h case   31:*/		return 0x821164AC;
		  /* 821164ACh */ case   32:  		/* li R9, 0 */
		/* 821164ACh case   32:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821164ACh case   32:*/		return 0x821164B0;
		  /* 821164B0h */ case   33:  		/* mr R8, R25 */
		/* 821164B0h case   33:*/		regs.R8 = regs.R25;
		/* 821164B0h case   33:*/		return 0x821164B4;
		  /* 821164B4h */ case   34:  		/* li R7, 0 */
		/* 821164B4h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821164B4h case   34:*/		return 0x821164B8;
		  /* 821164B8h */ case   35:  		/* li R6, 0 */
		/* 821164B8h case   35:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821164B8h case   35:*/		return 0x821164BC;
		  /* 821164BCh */ case   36:  		/* mr R5, R26 */
		/* 821164BCh case   36:*/		regs.R5 = regs.R26;
		/* 821164BCh case   36:*/		return 0x821164C0;
		  /* 821164C0h */ case   37:  		/* addi R4, R1, 160 */
		/* 821164C0h case   37:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 821164C0h case   37:*/		return 0x821164C4;
		  /* 821164C4h */ case   38:  		/* mr R3, R27 */
		/* 821164C4h case   38:*/		regs.R3 = regs.R27;
		/* 821164C4h case   38:*/		return 0x821164C8;
		  /* 821164C8h */ case   39:  		/* bl -17392 */
		/* 821164C8h case   39:*/		regs.LR = 0x821164CC; return 0x821120D8;
		/* 821164C8h case   39:*/		return 0x821164CC;
		  /* 821164CCh */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 821164CCh case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821164CCh case   40:*/		return 0x821164D0;
		  /* 821164D0h */ case   41:  		/* bc 12, CR0_EQ, 220 */
		/* 821164D0h case   41:*/		if ( regs.CR[0].eq ) { return 0x821165AC;  }
		/* 821164D0h case   41:*/		return 0x821164D4;
		  /* 821164D4h */ case   42:  		/* li R28, 1 */
		/* 821164D4h case   42:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821164D4h case   42:*/		return 0x821164D8;
	}
	return 0x821164D8;
} // Block from 8211642Ch-821164D8h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821164D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821164D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821164D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821164D8);
		  /* 821164D8h */ case    0:  		/* li R3, 116 */
		/* 821164D8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 821164D8h case    0:*/		return 0x821164DC;
		  /* 821164DCh */ case    1:  		/* bl -106308 */
		/* 821164DCh case    1:*/		regs.LR = 0x821164E0; return 0x820FC598;
		/* 821164DCh case    1:*/		return 0x821164E0;
		  /* 821164E0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821164E0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821164E0h case    2:*/		return 0x821164E4;
		  /* 821164E4h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821164E4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821164F4;  }
		/* 821164E4h case    3:*/		return 0x821164E8;
		  /* 821164E8h */ case    4:  		/* bl -108104 */
		/* 821164E8h case    4:*/		regs.LR = 0x821164EC; return 0x820FBEA0;
		/* 821164E8h case    4:*/		return 0x821164EC;
		  /* 821164ECh */ case    5:  		/* mr R31, R3 */
		/* 821164ECh case    5:*/		regs.R31 = regs.R3;
		/* 821164ECh case    5:*/		return 0x821164F0;
		  /* 821164F0h */ case    6:  		/* b 8 */
		/* 821164F0h case    6:*/		return 0x821164F8;
		/* 821164F0h case    6:*/		return 0x821164F4;
	}
	return 0x821164F4;
} // Block from 821164D8h-821164F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821164F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821164F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821164F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821164F4);
		  /* 821164F4h */ case    0:  		/* mr R31, R17 */
		/* 821164F4h case    0:*/		regs.R31 = regs.R17;
		/* 821164F4h case    0:*/		return 0x821164F8;
	}
	return 0x821164F8;
} // Block from 821164F4h-821164F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821164F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821164F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821164F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821164F8);
		  /* 821164F8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821164F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821164F8h case    0:*/		return 0x821164FC;
		  /* 821164FCh */ case    1:  		/* bc 12, CR6_EQ, 2912 */
		/* 821164FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8211705C;  }
		/* 821164FCh case    1:*/		return 0x82116500;
		  /* 82116500h */ case    2:  		/* li R11, 5 */
		/* 82116500h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82116500h case    2:*/		return 0x82116504;
		  /* 82116504h */ case    3:  		/* mr R4, R26 */
		/* 82116504h case    3:*/		regs.R4 = regs.R26;
		/* 82116504h case    3:*/		return 0x82116508;
		  /* 82116508h */ case    4:  		/* li R7, 0 */
		/* 82116508h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116508h case    4:*/		return 0x8211650C;
		  /* 8211650Ch */ case    5:  		/* rlwimi R4, R11, 28, 0, 11 */
		/* 8211650Ch case    5:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R4,regs.R11);
		/* 8211650Ch case    5:*/		return 0x82116510;
		  /* 82116510h */ case    6:  		/* li R6, 1 */
		/* 82116510h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82116510h case    6:*/		return 0x82116514;
		  /* 82116514h */ case    7:  		/* rlwinm R5, R26, 1, 0, 30 */
		/* 82116514h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R26);
		/* 82116514h case    7:*/		return 0x82116518;
		  /* 82116518h */ case    8:  		/* mr R3, R31 */
		/* 82116518h case    8:*/		regs.R3 = regs.R31;
		/* 82116518h case    8:*/		return 0x8211651C;
		  /* 8211651Ch */ case    9:  		/* bl -106220 */
		/* 8211651Ch case    9:*/		regs.LR = 0x82116520; return 0x820FC630;
		/* 8211651Ch case    9:*/		return 0x82116520;
		  /* 82116520h */ case   10:  		/* or. R29, R3, R3 */
		/* 82116520h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82116520h case   10:*/		return 0x82116524;
		  /* 82116524h */ case   11:  		/* bc 12, CR0_LT, 2884 */
		/* 82116524h case   11:*/		if ( regs.CR[0].lt ) { return 0x82117068;  }
		/* 82116524h case   11:*/		return 0x82116528;
		  /* 82116528h */ case   12:  		/* mr R4, R25 */
		/* 82116528h case   12:*/		regs.R4 = regs.R25;
		/* 82116528h case   12:*/		return 0x8211652C;
		  /* 8211652Ch */ case   13:  		/* mr R3, R31 */
		/* 8211652Ch case   13:*/		regs.R3 = regs.R31;
		/* 8211652Ch case   13:*/		return 0x82116530;
		  /* 82116530h */ case   14:  		/* bl -108096 */
		/* 82116530h case   14:*/		regs.LR = 0x82116534; return 0x820FBEF0;
		/* 82116530h case   14:*/		return 0x82116534;
		  /* 82116534h */ case   15:  		/* or. R29, R3, R3 */
		/* 82116534h case   15:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82116534h case   15:*/		return 0x82116538;
		  /* 82116538h */ case   16:  		/* bc 12, CR0_LT, 2864 */
		/* 82116538h case   16:*/		if ( regs.CR[0].lt ) { return 0x82117068;  }
		/* 82116538h case   16:*/		return 0x8211653C;
		  /* 8211653Ch */ case   17:  		/* lwz R11, <#[R25 + 16]> */
		/* 8211653Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 8211653Ch case   17:*/		return 0x82116540;
		  /* 82116540h */ case   18:  		/* cmpwi CR6, R28, 0 */
		/* 82116540h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82116540h case   18:*/		return 0x82116544;
		  /* 82116544h */ case   19:  		/* lwz R10, <#[R31 + 16]> */
		/* 82116544h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82116544h case   19:*/		return 0x82116548;
		  /* 82116548h */ case   20:  		/* addi R4, R1, 128 */
		/* 82116548h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82116548h case   20:*/		return 0x8211654C;
		  /* 8211654Ch */ case   21:  		/* lwz R11, <#[R11]> */
		/* 8211654Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8211654Ch case   21:*/		return 0x82116550;
		  /* 82116550h */ case   22:  		/* stw R11, <#[R10]> */
		/* 82116550h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82116550h case   22:*/		return 0x82116554;
		  /* 82116554h */ case   23:  		/* bc 12, CR6_EQ, 8 */
		/* 82116554h case   23:*/		if ( regs.CR[6].eq ) { return 0x8211655C;  }
		/* 82116554h case   23:*/		return 0x82116558;
		  /* 82116558h */ case   24:  		/* addi R4, R1, 96 */
		/* 82116558h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82116558h case   24:*/		return 0x8211655C;
	}
	return 0x8211655C;
} // Block from 821164F8h-8211655Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8211655Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211655C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211655C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211655C);
		  /* 8211655Ch */ case    0:  		/* rlwinm R30, R26, 2, 0, 29 */
		/* 8211655Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R26);
		/* 8211655Ch case    0:*/		return 0x82116560;
		  /* 82116560h */ case    1:  		/* lwz R3, <#[R31 + 8]> */
		/* 82116560h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82116560h case    1:*/		return 0x82116564;
		  /* 82116564h */ case    2:  		/* mr R5, R30 */
		/* 82116564h case    2:*/		regs.R5 = regs.R30;
		/* 82116564h case    2:*/		return 0x82116568;
		  /* 82116568h */ case    3:  		/* bl -543672 */
		/* 82116568h case    3:*/		regs.LR = 0x8211656C; return 0x820919B0;
		/* 82116568h case    3:*/		return 0x8211656C;
		  /* 8211656Ch */ case    4:  		/* cmpwi CR6, R28, 0 */
		/* 8211656Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8211656Ch case    4:*/		return 0x82116570;
		  /* 82116570h */ case    5:  		/* addi R4, R1, 192 */
		/* 82116570h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82116570h case    5:*/		return 0x82116574;
		  /* 82116574h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 82116574h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211657C;  }
		/* 82116574h case    6:*/		return 0x82116578;
		  /* 82116578h */ case    7:  		/* addi R4, R1, 160 */
		/* 82116578h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 82116578h case    7:*/		return 0x8211657C;
	}
	return 0x8211657C;
} // Block from 8211655Ch-8211657Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211657Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211657C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211657C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211657C);
		  /* 8211657Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8211657Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8211657Ch case    0:*/		return 0x82116580;
		  /* 82116580h */ case    1:  		/* mr R5, R30 */
		/* 82116580h case    1:*/		regs.R5 = regs.R30;
		/* 82116580h case    1:*/		return 0x82116584;
		  /* 82116584h */ case    2:  		/* add R3, R30, R11 */
		/* 82116584h case    2:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 82116584h case    2:*/		return 0x82116588;
		  /* 82116588h */ case    3:  		/* bl -543704 */
		/* 82116588h case    3:*/		regs.LR = 0x8211658C; return 0x820919B0;
		/* 82116588h case    3:*/		return 0x8211658C;
		  /* 8211658Ch */ case    4:  		/* lwz R11, <#[R27 + 24]> */
		/* 8211658Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 8211658Ch case    4:*/		return 0x82116590;
		  /* 82116590h */ case    5:  		/* mr R3, R25 */
		/* 82116590h case    5:*/		regs.R3 = regs.R25;
		/* 82116590h case    5:*/		return 0x82116594;
		  /* 82116594h */ case    6:  		/* stwx R31, <#[R11 + R21]> */
		/* 82116594h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R21 + 0x00000000) );
		/* 82116594h case    6:*/		return 0x82116598;
		  /* 82116598h */ case    7:  		/* bl 1076776 */
		/* 82116598h case    7:*/		regs.LR = 0x8211659C; return 0x8221D3C0;
		/* 82116598h case    7:*/		return 0x8211659C;
		  /* 8211659Ch */ case    8:  		/* mr R3, R25 */
		/* 8211659Ch case    8:*/		regs.R3 = regs.R25;
		/* 8211659Ch case    8:*/		return 0x821165A0;
		  /* 821165A0h */ case    9:  		/* bl -106416 */
		/* 821165A0h case    9:*/		regs.LR = 0x821165A4; return 0x820FC5F0;
		/* 821165A0h case    9:*/		return 0x821165A4;
		  /* 821165A4h */ case   10:  		/* stw R17, <#[R24]> */
		/* 821165A4h case   10:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R24 + 0x00000000) );
		/* 821165A4h case   10:*/		return 0x821165A8;
		  /* 821165A8h */ case   11:  		/* stw R17, <#[R23]> */
		/* 821165A8h case   11:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R23 + 0x00000000) );
		/* 821165A8h case   11:*/		return 0x821165AC;
	}
	return 0x821165AC;
} // Block from 8211657Ch-821165ACh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821165ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821165AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821165AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821165AC);
		  /* 821165ACh */ case    0:  		/* lwz R11, <#[R27 + 12]> */
		/* 821165ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821165ACh case    0:*/		return 0x821165B0;
		  /* 821165B0h */ case    1:  		/* addi R20, R20, 1 */
		/* 821165B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821165B0h case    1:*/		return 0x821165B4;
		  /* 821165B4h */ case    2:  		/* addi R21, R21, 4 */
		/* 821165B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 821165B4h case    2:*/		return 0x821165B8;
		  /* 821165B8h */ case    3:  		/* cmplw CR6, R20, R11 */
		/* 821165B8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R11);
		/* 821165B8h case    3:*/		return 0x821165BC;
		  /* 821165BCh */ case    4:  		/* bc 12, CR6_LT, -900 */
		/* 821165BCh case    4:*/		if ( regs.CR[6].lt ) { return 0x82116238;  }
		/* 821165BCh case    4:*/		return 0x821165C0;
	}
	return 0x821165C0;
} // Block from 821165ACh-821165C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821165C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821165C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821165C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821165C0);
		  /* 821165C0h */ case    0:  		/* mr R3, R27 */
		/* 821165C0h case    0:*/		regs.R3 = regs.R27;
		/* 821165C0h case    0:*/		return 0x821165C4;
		  /* 821165C4h */ case    1:  		/* bl -68140 */
		/* 821165C4h case    1:*/		regs.LR = 0x821165C8; return 0x82105B98;
		/* 821165C4h case    1:*/		return 0x821165C8;
		  /* 821165C8h */ case    2:  		/* lwz R11, <#[R27 + 12]> */
		/* 821165C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821165C8h case    2:*/		return 0x821165CC;
		  /* 821165CCh */ case    3:  		/* mr R14, R17 */
		/* 821165CCh case    3:*/		regs.R14 = regs.R17;
		/* 821165CCh case    3:*/		return 0x821165D0;
		  /* 821165D0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821165D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821165D0h case    4:*/		return 0x821165D4;
		  /* 821165D4h */ case    5:  		/* bc 4, CR6_GT, 2660 */
		/* 821165D4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82117038;  }
		/* 821165D4h case    5:*/		return 0x821165D8;
		  /* 821165D8h */ case    6:  		/* lwz R11, <#[R27 + 24]> */
		/* 821165D8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 821165D8h case    6:*/		return 0x821165DC;
		  /* 821165DCh */ case    7:  		/* rlwinm R10, R14, 2, 0, 29 */
		/* 821165DCh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R14);
		/* 821165DCh case    7:*/		return 0x821165E0;
		  /* 821165E0h */ case    8:  		/* lis R9, 4096 */
		/* 821165E0h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 821165E0h case    8:*/		return 0x821165E4;
		  /* 821165E4h */ case    9:  		/* lwzx R31, <#[R10 + R11]> */
		/* 821165E4h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821165E4h case    9:*/		return 0x821165E8;
		  /* 821165E8h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821165E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821165E8h case   10:*/		return 0x821165EC;
		  /* 821165ECh */ case   11:  		/* stw R31, <#[R1 + 116]> */
		/* 821165ECh case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 821165ECh case   11:*/		return 0x821165F0;
		  /* 821165F0h */ case   12:  		/* rlwinm R10, R11, 0, 0, 3 */
		/* 821165F0h case   12:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R10,regs.R11);
		/* 821165F0h case   12:*/		return 0x821165F4;
		  /* 821165F4h */ case   13:  		/* cmplw CR6, R10, R9 */
		/* 821165F4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821165F4h case   13:*/		return 0x821165F8;
		  /* 821165F8h */ case   14:  		/* bc 12, CR6_LT, 2608 */
		/* 821165F8h case   14:*/		if ( regs.CR[6].lt ) { return 0x82117028;  }
		/* 821165F8h case   14:*/		return 0x821165FC;
		  /* 821165FCh */ case   15:  		/* lis R8, 16384 */
		/* 821165FCh case   15:*/		cpu::op::lis<0>(regs,&regs.R8,0x4000);
		/* 821165FCh case   15:*/		return 0x82116600;
		  /* 82116600h */ case   16:  		/* cmplw CR6, R10, R8 */
		/* 82116600h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82116600h case   16:*/		return 0x82116604;
		  /* 82116604h */ case   17:  		/* bc 12, CR6_GT, 2596 */
		/* 82116604h case   17:*/		if ( regs.CR[6].gt ) { return 0x82117028;  }
		/* 82116604h case   17:*/		return 0x82116608;
		  /* 82116608h */ case   18:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82116608h case   18:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82116608h case   18:*/		return 0x8211660C;
		  /* 8211660Ch */ case   19:  		/* cmplw CR6, R11, R9 */
		/* 8211660Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211660Ch case   19:*/		return 0x82116610;
		  /* 82116610h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 82116610h case   20:*/		if ( regs.CR[6].eq ) { return 0x82116628;  }
		/* 82116610h case   20:*/		return 0x82116614;
		  /* 82116614h */ case   21:  		/* lwz R11, <#[R27 + 108]> */
		/* 82116614h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 82116614h case   21:*/		return 0x82116618;
		  /* 82116618h */ case   22:  		/* rlwinm. R10, R11, 0, 3, 3 */
		/* 82116618h case   22:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R11);
		/* 82116618h case   22:*/		return 0x8211661C;
		  /* 8211661Ch */ case   23:  		/* bc 4, CR0_EQ, 2572 */
		/* 8211661Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x82117028;  }
		/* 8211661Ch case   23:*/		return 0x82116620;
		  /* 82116620h */ case   24:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 82116620h case   24:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 82116620h case   24:*/		return 0x82116624;
		  /* 82116624h */ case   25:  		/* bc 4, CR0_EQ, 2564 */
		/* 82116624h case   25:*/		if ( !regs.CR[0].eq ) { return 0x82117028;  }
		/* 82116624h case   25:*/		return 0x82116628;
	}
	return 0x82116628;
} // Block from 821165C0h-82116628h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82116628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116628);
		  /* 82116628h */ case    0:  		/* mr R3, R31 */
		/* 82116628h case    0:*/		regs.R3 = regs.R31;
		/* 82116628h case    0:*/		return 0x8211662C;
		  /* 8211662Ch */ case    1:  		/* bl -107396 */
		/* 8211662Ch case    1:*/		regs.LR = 0x82116630; return 0x820FC2A8;
		/* 8211662Ch case    1:*/		return 0x82116630;
		  /* 82116630h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82116630h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82116630h case    2:*/		return 0x82116634;
		  /* 82116634h */ case    3:  		/* bc 4, CR0_EQ, 2548 */
		/* 82116634h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82117028;  }
		/* 82116634h case    3:*/		return 0x82116638;
		  /* 82116638h */ case    4:  		/* lwz R9, <#[R31 + 16]> */
		/* 82116638h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82116638h case    4:*/		return 0x8211663C;
		  /* 8211663Ch */ case    5:  		/* lwz R7, <#[R27 + 20]> */
		/* 8211663Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000014) );
		/* 8211663Ch case    5:*/		return 0x82116640;
		  /* 82116640h */ case    6:  		/* lwz R6, <#[R27 + 16]> */
		/* 82116640h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000010) );
		/* 82116640h case    6:*/		return 0x82116644;
		  /* 82116644h */ case    7:  		/* lwz R11, <#[R9]> */
		/* 82116644h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82116644h case    7:*/		return 0x82116648;
		  /* 82116648h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82116648h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82116648h case    8:*/		return 0x8211664C;
		  /* 8211664Ch */ case    9:  		/* lwzx R11, <#[R11 + R7]> */
		/* 8211664Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8211664Ch case    9:*/		return 0x82116650;
		  /* 82116650h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 82116650h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82116650h case   10:*/		return 0x82116654;
		  /* 82116654h */ case   11:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 82116654h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 82116654h case   11:*/		return 0x82116658;
		  /* 82116658h */ case   12:  		/* stw R11, <#[R1 + 208]> */
		/* 82116658h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 82116658h case   12:*/		return 0x8211665C;
		  /* 8211665Ch */ case   13:  		/* lwzx R11, <#[R10 + R6]> */
		/* 8211665Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8211665Ch case   13:*/		return 0x82116660;
		  /* 82116660h */ case   14:  		/* lwz R16, <#[R11 + 28]> */
		/* 82116660h case   14:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R11 + 0x0000001C) );
		/* 82116660h case   14:*/		return 0x82116664;
		  /* 82116664h */ case   15:  		/* cmplwi CR6, R16, 0 */
		/* 82116664h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 82116664h case   15:*/		return 0x82116668;
		  /* 82116668h */ case   16:  		/* bc 12, CR6_EQ, 2496 */
		/* 82116668h case   16:*/		if ( regs.CR[6].eq ) { return 0x82117028;  }
		/* 82116668h case   16:*/		return 0x8211666C;
		  /* 8211666Ch */ case   17:  		/* lwz R11, <#[R27 + 12]> */
		/* 8211666Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 8211666Ch case   17:*/		return 0x82116670;
		  /* 82116670h */ case   18:  		/* mr R5, R17 */
		/* 82116670h case   18:*/		regs.R5 = regs.R17;
		/* 82116670h case   18:*/		return 0x82116674;
		  /* 82116674h */ case   19:  		/* lwz R10, <#[R31 + 4]> */
		/* 82116674h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82116674h case   19:*/		return 0x82116678;
		  /* 82116678h */ case   20:  		/* stw R17, <#[R1 + 84]> */
		/* 82116678h case   20:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 82116678h case   20:*/		return 0x8211667C;
		  /* 8211667Ch */ case   21:  		/* mr R15, R11 */
		/* 8211667Ch case   21:*/		regs.R15 = regs.R11;
		/* 8211667Ch case   21:*/		return 0x82116680;
		  /* 82116680h */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 82116680h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82116680h case   22:*/		return 0x82116684;
		  /* 82116684h */ case   23:  		/* stw R11, <#[R1 + 112]> */
		/* 82116684h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 82116684h case   23:*/		return 0x82116688;
		  /* 82116688h */ case   24:  		/* bc 4, CR6_GT, 100 */
		/* 82116688h case   24:*/		if ( !regs.CR[6].gt ) { return 0x821166EC;  }
		/* 82116688h case   24:*/		return 0x8211668C;
		  /* 8211668Ch */ case   25:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8211668Ch case   25:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8211668Ch case   25:*/		return 0x82116690;
		  /* 82116690h */ case   26:  		/* lwz R8, <#[R31 + 8]> */
		/* 82116690h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 82116690h case   26:*/		return 0x82116694;
		  /* 82116694h */ case   27:  		/* mtspr CTR, R11 */
		/* 82116694h case   27:*/		regs.CTR = regs.R11;
		/* 82116694h case   27:*/		return 0x82116698;
		  /* 82116698h */ case   28:  		/* lwz R11, <#[R8]> */
		/* 82116698h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 82116698h case   28:*/		return 0x8211669C;
		  /* 8211669Ch */ case   29:  		/* b 60 */
		/* 8211669Ch case   29:*/		return 0x821166D8;
		/* 8211669Ch case   29:*/		return 0x821166A0;
		  /* 821166A0h */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821166A0h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821166A0h case   30:*/		return 0x821166A4;
		  /* 821166A4h */ case   31:  		/* lwzx R11, <#[R11 + R7]> */
		/* 821166A4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821166A4h case   31:*/		return 0x821166A8;
		  /* 821166A8h */ case   32:  		/* lwz R10, <#[R11 + 4]> */
		/* 821166A8h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821166A8h case   32:*/		return 0x821166AC;
		  /* 821166ACh */ case   33:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821166ACh case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821166ACh case   33:*/		return 0x821166B0;
		  /* 821166B0h */ case   34:  		/* lwzx R10, <#[R10 + R6]> */
		/* 821166B0h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821166B0h case   34:*/		return 0x821166B4;
		  /* 821166B4h */ case   35:  		/* lwz R10, <#[R10 + 4]> */
		/* 821166B4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821166B4h case   35:*/		return 0x821166B8;
		  /* 821166B8h */ case   36:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 821166B8h case   36:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 821166B8h case   36:*/		return 0x821166BC;
		  /* 821166BCh */ case   37:  		/* bc 12, CR0_EQ, 24 */
		/* 821166BCh case   37:*/		if ( regs.CR[0].eq ) { return 0x821166D4;  }
		/* 821166BCh case   37:*/		return 0x821166C0;
		  /* 821166C0h */ case   38:  		/* lwz R10, <#[R11 + 72]> */
		/* 821166C0h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 821166C0h case   38:*/		return 0x821166C4;
		  /* 821166C4h */ case   39:  		/* addi R10, R10, 1 */
		/* 821166C4h case   39:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821166C4h case   39:*/		return 0x821166C8;
		  /* 821166C8h */ case   40:  		/* cmplw CR6, R5, R10 */
		/* 821166C8h case   40:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 821166C8h case   40:*/		return 0x821166CC;
		  /* 821166CCh */ case   41:  		/* bc 4, CR6_LT, 8 */
		/* 821166CCh case   41:*/		if ( !regs.CR[6].lt ) { return 0x821166D4;  }
		/* 821166CCh case   41:*/		return 0x821166D0;
		  /* 821166D0h */ case   42:  		/* mr R5, R10 */
		/* 821166D0h case   42:*/		regs.R5 = regs.R10;
		/* 821166D0h case   42:*/		return 0x821166D4;
	}
	return 0x821166D4;
} // Block from 82116628h-821166D4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821166D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821166D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821166D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821166D4);
		  /* 821166D4h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821166D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821166D4h case    0:*/		return 0x821166D8;
	}
	return 0x821166D8;
} // Block from 821166D4h-821166D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821166D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821166D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821166D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821166D8);
		  /* 821166D8h */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 821166D8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 821166D8h case    0:*/		return 0x821166DC;
		  /* 821166DCh */ case    1:  		/* bc 4, CR6_EQ, -60 */
		/* 821166DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821166A0;  }
		/* 821166DCh case    1:*/		return 0x821166E0;
		  /* 821166E0h */ case    2:  		/* addi R8, R8, 4 */
		/* 821166E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821166E0h case    2:*/		return 0x821166E4;
		  /* 821166E4h */ case    3:  		/* bc 16, CR0_LT, -76 */
		/* 821166E4h case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82116698;  }
		/* 821166E4h case    3:*/		return 0x821166E8;
		  /* 821166E8h */ case    4:  		/* stw R5, <#[R1 + 84]> */
		/* 821166E8h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821166E8h case    4:*/		return 0x821166EC;
	}
	return 0x821166EC;
} // Block from 821166D8h-821166ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821166ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821166EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821166EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821166EC);
		  /* 821166ECh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821166ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821166ECh case    0:*/		return 0x821166F0;
		  /* 821166F0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821166F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821166F0h case    1:*/		return 0x821166F4;
		  /* 821166F4h */ case    2:  		/* bc 4, CR6_GT, 124 */
		/* 821166F4h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82116770;  }
		/* 821166F4h case    2:*/		return 0x821166F8;
		  /* 821166F8h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821166F8h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821166F8h case    3:*/		return 0x821166FC;
		  /* 821166FCh */ case    4:  		/* mtspr CTR, R11 */
		/* 821166FCh case    4:*/		regs.CTR = regs.R11;
		/* 821166FCh case    4:*/		return 0x82116700;
		  /* 82116700h */ case    5:  		/* lwz R11, <#[R9]> */
		/* 82116700h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82116700h case    5:*/		return 0x82116704;
		  /* 82116704h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82116704h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82116704h case    6:*/		return 0x82116708;
		  /* 82116708h */ case    7:  		/* lwzx R10, <#[R11 + R7]> */
		/* 82116708h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82116708h case    7:*/		return 0x8211670C;
		  /* 8211670Ch */ case    8:  		/* lwz R11, <#[R10 + 84]> */
		/* 8211670Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000054) );
		/* 8211670Ch case    8:*/		return 0x82116710;
		  /* 82116710h */ case    9:  		/* cmplw CR6, R15, R11 */
		/* 82116710h case    9:*/		cpu::op::cmplw<6>(regs,regs.R15,regs.R11);
		/* 82116710h case    9:*/		return 0x82116714;
		  /* 82116714h */ case   10:  		/* bc 4, CR6_GT, 8 */
		/* 82116714h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8211671C;  }
		/* 82116714h case   10:*/		return 0x82116718;
		  /* 82116718h */ case   11:  		/* mr R15, R11 */
		/* 82116718h case   11:*/		regs.R15 = regs.R11;
		/* 82116718h case   11:*/		return 0x8211671C;
	}
	return 0x8211671C;
} // Block from 821166ECh-8211671Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211671Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211671C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211671C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211671C);
		  /* 8211671Ch */ case    0:  		/* lwz R11, <#[R10 + 8]> */
		/* 8211671Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8211671Ch case    0:*/		return 0x82116720;
		  /* 82116720h */ case    1:  		/* b 60 */
		/* 82116720h case    1:*/		return 0x8211675C;
		/* 82116720h case    1:*/		return 0x82116724;
		  /* 82116724h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82116724h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82116724h case    2:*/		return 0x82116728;
		  /* 82116728h */ case    3:  		/* lwzx R11, <#[R11 + R7]> */
		/* 82116728h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82116728h case    3:*/		return 0x8211672C;
		  /* 8211672Ch */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211672Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211672Ch case    4:*/		return 0x82116730;
		  /* 82116730h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82116730h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82116730h case    5:*/		return 0x82116734;
		  /* 82116734h */ case    6:  		/* lwzx R10, <#[R10 + R6]> */
		/* 82116734h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 82116734h case    6:*/		return 0x82116738;
		  /* 82116738h */ case    7:  		/* lwz R10, <#[R10 + 4]> */
		/* 82116738h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82116738h case    7:*/		return 0x8211673C;
		  /* 8211673Ch */ case    8:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 8211673Ch case    8:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 8211673Ch case    8:*/		return 0x82116740;
		  /* 82116740h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82116740h case    9:*/		if ( regs.CR[0].eq ) { return 0x82116758;  }
		/* 82116740h case    9:*/		return 0x82116744;
		  /* 82116744h */ case   10:  		/* lwz R10, <#[R11 + 72]> */
		/* 82116744h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 82116744h case   10:*/		return 0x82116748;
		  /* 82116748h */ case   11:  		/* addi R10, R10, 1 */
		/* 82116748h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82116748h case   11:*/		return 0x8211674C;
		  /* 8211674Ch */ case   12:  		/* cmplw CR6, R5, R10 */
		/* 8211674Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 8211674Ch case   12:*/		return 0x82116750;
		  /* 82116750h */ case   13:  		/* bc 4, CR6_LT, 8 */
		/* 82116750h case   13:*/		if ( !regs.CR[6].lt ) { return 0x82116758;  }
		/* 82116750h case   13:*/		return 0x82116754;
		  /* 82116754h */ case   14:  		/* mr R5, R10 */
		/* 82116754h case   14:*/		regs.R5 = regs.R10;
		/* 82116754h case   14:*/		return 0x82116758;
	}
	return 0x82116758;
} // Block from 8211671Ch-82116758h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82116758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116758);
		  /* 82116758h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 82116758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82116758h case    0:*/		return 0x8211675C;
	}
	return 0x8211675C;
} // Block from 82116758h-8211675Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211675Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211675C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211675C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211675C);
		  /* 8211675Ch */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 8211675Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211675Ch case    0:*/		return 0x82116760;
		  /* 82116760h */ case    1:  		/* bc 4, CR6_EQ, -60 */
		/* 82116760h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82116724;  }
		/* 82116760h case    1:*/		return 0x82116764;
		  /* 82116764h */ case    2:  		/* addi R9, R9, 4 */
		/* 82116764h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82116764h case    2:*/		return 0x82116768;
		  /* 82116768h */ case    3:  		/* bc 16, CR0_LT, -104 */
		/* 82116768h case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82116700;  }
		/* 82116768h case    3:*/		return 0x8211676C;
		  /* 8211676Ch */ case    4:  		/* stw R5, <#[R1 + 84]> */
		/* 8211676Ch case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 8211676Ch case    4:*/		return 0x82116770;
	}
	return 0x82116770;
} // Block from 8211675Ch-82116770h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82116770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116770);
		  /* 82116770h */ case    0:  		/* stw R5, <#[R1 + 80]> */
		/* 82116770h case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 82116770h case    0:*/		return 0x82116774;
		  /* 82116774h */ case    1:  		/* cmplw CR6, R5, R15 */
		/* 82116774h case    1:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R15);
		/* 82116774h case    1:*/		return 0x82116778;
		  /* 82116778h */ case    2:  		/* bc 4, CR6_LT, 2224 */
		/* 82116778h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82117028;  }
		/* 82116778h case    2:*/		return 0x8211677C;
		  /* 8211677Ch */ case    3:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211677Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211677Ch case    3:*/		return 0x82116780;
		  /* 82116780h */ case    4:  		/* rlwinm R29, R5, 0, 0, 31 */
		/* 82116780h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R29,regs.R5);
		/* 82116780h case    4:*/		return 0x82116784;
		  /* 82116784h */ case    5:  		/* rlwinm R17, R11, 2, 0, 29 */
		/* 82116784h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R17,regs.R11);
		/* 82116784h case    5:*/		return 0x82116788;
		  /* 82116788h */ case    6:  		/* cmplw CR6, R14, R29 */
		/* 82116788h case    6:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R29);
		/* 82116788h case    6:*/		return 0x8211678C;
		  /* 8211678Ch */ case    7:  		/* bc 12, CR6_EQ, 1324 */
		/* 8211678Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82116CB8;  }
		/* 8211678Ch case    7:*/		return 0x82116790;
		  /* 82116790h */ case    8:  		/* lwz R11, <#[R27 + 24]> */
		/* 82116790h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 82116790h case    8:*/		return 0x82116794;
		  /* 82116794h */ case    9:  		/* cmplw CR6, R14, R29 */
		/* 82116794h case    9:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R29);
		/* 82116794h case    9:*/		return 0x82116798;
		  /* 82116798h */ case   10:  		/* lwzx R30, <#[R11 + R17]> */
		/* 82116798h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R17 + 0x00000000) );
		/* 82116798h case   10:*/		return 0x8211679C;
		  /* 8211679Ch */ case   11:  		/* mr R21, R30 */
		/* 8211679Ch case   11:*/		regs.R21 = regs.R30;
		/* 8211679Ch case   11:*/		return 0x821167A0;
		  /* 821167A0h */ case   12:  		/* stw R30, <#[R1 + 176]> */
		/* 821167A0h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000B0) );
		/* 821167A0h case   12:*/		return 0x821167A4;
		  /* 821167A4h */ case   13:  		/* bc 12, CR6_LT, 12 */
		/* 821167A4h case   13:*/		if ( regs.CR[6].lt ) { return 0x821167B0;  }
		/* 821167A4h case   13:*/		return 0x821167A8;
		  /* 821167A8h */ case   14:  		/* lwz R21, <#[R1 + 116]> */
		/* 821167A8h case   14:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000074) );
		/* 821167A8h case   14:*/		return 0x821167AC;
		  /* 821167ACh */ case   15:  		/* bc 4, CR6_LT, 8 */
		/* 821167ACh case   15:*/		if ( !regs.CR[6].lt ) { return 0x821167B4;  }
		/* 821167ACh case   15:*/		return 0x821167B0;
	}
	return 0x821167B0;
} // Block from 82116770h-821167B0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821167B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821167B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821167B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821167B0);
		  /* 821167B0h */ case    0:  		/* lwz R30, <#[R1 + 116]> */
		/* 821167B0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821167B0h case    0:*/		return 0x821167B4;
	}
	return 0x821167B4;
} // Block from 821167B0h-821167B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821167B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821167B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821167B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821167B4);
		  /* 821167B4h */ case    0:  		/* lwz R4, <#[R21]> */
		/* 821167B4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000000) );
		/* 821167B4h case    0:*/		return 0x821167B8;
		  /* 821167B8h */ case    1:  		/* lwz R11, <#[R30]> */
		/* 821167B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821167B8h case    1:*/		return 0x821167BC;
		  /* 821167BCh */ case    2:  		/* rlwinm R5, R4, 0, 0, 11 */
		/* 821167BCh case    2:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R5,regs.R4);
		/* 821167BCh case    2:*/		return 0x821167C0;
		  /* 821167C0h */ case    3:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 821167C0h case    3:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 821167C0h case    3:*/		return 0x821167C4;
		  /* 821167C4h */ case    4:  		/* cmplw CR6, R5, R11 */
		/* 821167C4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821167C4h case    4:*/		return 0x821167C8;
		  /* 821167C8h */ case    5:  		/* bc 4, CR6_EQ, 1264 */
		/* 821167C8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82116CB8;  }
		/* 821167C8h case    5:*/		return 0x821167CC;
		  /* 821167CCh */ case    6:  		/* lwz R11, <#[R30 + 16]> */
		/* 821167CCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821167CCh case    6:*/		return 0x821167D0;
		  /* 821167D0h */ case    7:  		/* lwz R10, <#[R21 + 16]> */
		/* 821167D0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000010) );
		/* 821167D0h case    7:*/		return 0x821167D4;
		  /* 821167D4h */ case    8:  		/* lwz R7, <#[R27 + 20]> */
		/* 821167D4h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000014) );
		/* 821167D4h case    8:*/		return 0x821167D8;
		  /* 821167D8h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821167D8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821167D8h case    9:*/		return 0x821167DC;
		  /* 821167DCh */ case   10:  		/* lwz R10, <#[R10]> */
		/* 821167DCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821167DCh case   10:*/		return 0x821167E0;
		  /* 821167E0h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821167E0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821167E0h case   11:*/		return 0x821167E4;
		  /* 821167E4h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821167E4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821167E4h case   12:*/		return 0x821167E8;
		  /* 821167E8h */ case   13:  		/* lwzx R11, <#[R11 + R7]> */
		/* 821167E8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821167E8h case   13:*/		return 0x821167EC;
		  /* 821167ECh */ case   14:  		/* lwzx R10, <#[R10 + R7]> */
		/* 821167ECh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 821167ECh case   14:*/		return 0x821167F0;
		  /* 821167F0h */ case   15:  		/* lwz R9, <#[R11 + 4]> */
		/* 821167F0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821167F0h case   15:*/		return 0x821167F4;
		  /* 821167F4h */ case   16:  		/* lwz R6, <#[R10 + 4]> */
		/* 821167F4h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 821167F4h case   16:*/		return 0x821167F8;
		  /* 821167F8h */ case   17:  		/* cmplw CR6, R6, R9 */
		/* 821167F8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 821167F8h case   17:*/		return 0x821167FC;
		  /* 821167FCh */ case   18:  		/* bc 4, CR6_EQ, 1212 */
		/* 821167FCh case   18:*/		if ( !regs.CR[6].eq ) { return 0x82116CB8;  }
		/* 821167FCh case   18:*/		return 0x82116800;
		  /* 82116800h */ case   19:  		/* lwz R9, <#[R10 + 8]> */
		/* 82116800h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 82116800h case   19:*/		return 0x82116804;
		  /* 82116804h */ case   20:  		/* lwz R8, <#[R11 + 8]> */
		/* 82116804h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82116804h case   20:*/		return 0x82116808;
		  /* 82116808h */ case   21:  		/* cmplw CR6, R9, R8 */
		/* 82116808h case   21:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82116808h case   21:*/		return 0x8211680C;
		  /* 8211680Ch */ case   22:  		/* bc 4, CR6_EQ, 1196 */
		/* 8211680Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x82116CB8;  }
		/* 8211680Ch case   22:*/		return 0x82116810;
		  /* 82116810h */ case   23:  		/* lwz R9, <#[R10 + 20]> */
		/* 82116810h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000014) );
		/* 82116810h case   23:*/		return 0x82116814;
		  /* 82116814h */ case   24:  		/* lwz R8, <#[R11 + 20]> */
		/* 82116814h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000014) );
		/* 82116814h case   24:*/		return 0x82116818;
		  /* 82116818h */ case   25:  		/* cmplw CR6, R9, R8 */
		/* 82116818h case   25:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82116818h case   25:*/		return 0x8211681C;
		  /* 8211681Ch */ case   26:  		/* bc 4, CR6_EQ, 1180 */
		/* 8211681Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x82116CB8;  }
		/* 8211681Ch case   26:*/		return 0x82116820;
		  /* 82116820h */ case   27:  		/* lwz R9, <#[R10 + 24]> */
		/* 82116820h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000018) );
		/* 82116820h case   27:*/		return 0x82116824;
		  /* 82116824h */ case   28:  		/* lwz R8, <#[R11 + 24]> */
		/* 82116824h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000018) );
		/* 82116824h case   28:*/		return 0x82116828;
		  /* 82116828h */ case   29:  		/* cmpw CR6, R9, R8 */
		/* 82116828h case   29:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R8);
		/* 82116828h case   29:*/		return 0x8211682C;
		  /* 8211682Ch */ case   30:  		/* bc 4, CR6_EQ, 1164 */
		/* 8211682Ch case   30:*/		if ( !regs.CR[6].eq ) { return 0x82116CB8;  }
		/* 8211682Ch case   30:*/		return 0x82116830;
		  /* 82116830h */ case   31:  		/* lwz R23, <#[R30 + 12]> */
		/* 82116830h case   31:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R30 + 0x0000000C) );
		/* 82116830h case   31:*/		return 0x82116834;
		  /* 82116834h */ case   32:  		/* lwz R22, <#[R21 + 12]> */
		/* 82116834h case   32:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R21 + 0x0000000C) );
		/* 82116834h case   32:*/		return 0x82116838;
		  /* 82116838h */ case   33:  		/* lwz R8, <#[R30 + 4]> */
		/* 82116838h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 82116838h case   33:*/		return 0x8211683C;
		  /* 8211683Ch */ case   34:  		/* lwz R9, <#[R21 + 4]> */
		/* 8211683Ch case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000004) );
		/* 8211683Ch case   34:*/		return 0x82116840;
		  /* 82116840h */ case   35:  		/* add R24, R22, R23 */
		/* 82116840h case   35:*/		cpu::op::add<0>(regs,&regs.R24,regs.R22,regs.R23);
		/* 82116840h case   35:*/		return 0x82116844;
		  /* 82116844h */ case   36:  		/* add R18, R8, R9 */
		/* 82116844h case   36:*/		cpu::op::add<0>(regs,&regs.R18,regs.R8,regs.R9);
		/* 82116844h case   36:*/		return 0x82116848;
		  /* 82116848h */ case   37:  		/* cmplwi CR6, R24, 4 */
		/* 82116848h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000004);
		/* 82116848h case   37:*/		return 0x8211684C;
		  /* 8211684Ch */ case   38:  		/* bc 12, CR6_GT, 1132 */
		/* 8211684Ch case   38:*/		if ( regs.CR[6].gt ) { return 0x82116CB8;  }
		/* 8211684Ch case   38:*/		return 0x82116850;
		  /* 82116850h */ case   39:  		/* lwz R19, <#[R10 + 12]> */
		/* 82116850h case   39:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R10 + 0x0000000C) );
		/* 82116850h case   39:*/		return 0x82116854;
		  /* 82116854h */ case   40:  		/* lwz R20, <#[R11 + 12]> */
		/* 82116854h case   40:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R11 + 0x0000000C) );
		/* 82116854h case   40:*/		return 0x82116858;
		  /* 82116858h */ case   41:  		/* cmplw CR6, R19, R20 */
		/* 82116858h case   41:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R20);
		/* 82116858h case   41:*/		return 0x8211685C;
		  /* 8211685Ch */ case   42:  		/* bc 12, CR6_EQ, 76 */
		/* 8211685Ch case   42:*/		if ( regs.CR[6].eq ) { return 0x821168A8;  }
		/* 8211685Ch case   42:*/		return 0x82116860;
		  /* 82116860h */ case   43:  		/* lwz R11, <#[R27 + 108]> */
		/* 82116860h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 82116860h case   43:*/		return 0x82116864;
		  /* 82116864h */ case   44:  		/* rlwinm. R10, R11, 0, 3, 3 */
		/* 82116864h case   44:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R11);
		/* 82116864h case   44:*/		return 0x82116868;
		  /* 82116868h */ case   45:  		/* bc 4, CR0_EQ, 1104 */
		/* 82116868h case   45:*/		if ( !regs.CR[0].eq ) { return 0x82116CB8;  }
		/* 82116868h case   45:*/		return 0x8211686C;
		  /* 8211686Ch */ case   46:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 8211686Ch case   46:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 8211686Ch case   46:*/		return 0x82116870;
		  /* 82116870h */ case   47:  		/* bc 4, CR0_EQ, 1096 */
		/* 82116870h case   47:*/		if ( !regs.CR[0].eq ) { return 0x82116CB8;  }
		/* 82116870h case   47:*/		return 0x82116874;
		  /* 82116874h */ case   48:  		/* lwz R11, <#[R27 + 16]> */
		/* 82116874h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82116874h case   48:*/		return 0x82116878;
		  /* 82116878h */ case   49:  		/* rlwinm R10, R6, 2, 0, 29 */
		/* 82116878h case   49:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R6);
		/* 82116878h case   49:*/		return 0x8211687C;
		  /* 8211687Ch */ case   50:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8211687Ch case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211687Ch case   50:*/		return 0x82116880;
		  /* 82116880h */ case   51:  		/* lwz R11, <#[R11 + 4]> */
		/* 82116880h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82116880h case   51:*/		return 0x82116884;
		  /* 82116884h */ case   52:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82116884h case   52:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82116884h case   52:*/		return 0x82116888;
		  /* 82116888h */ case   53:  		/* bc 4, CR0_EQ, 1072 */
		/* 82116888h case   53:*/		if ( !regs.CR[0].eq ) { return 0x82116CB8;  }
		/* 82116888h case   53:*/		return 0x8211688C;
		  /* 8211688Ch */ case   54:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 8211688Ch case   54:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 8211688Ch case   54:*/		return 0x82116890;
		  /* 82116890h */ case   55:  		/* rlwinm R9, R19, 2, 0, 29 */
		/* 82116890h case   55:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R19);
		/* 82116890h case   55:*/		return 0x82116894;
		  /* 82116894h */ case   56:  		/* lwzx R10, <#[R11 + R16]> */
		/* 82116894h case   56:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 82116894h case   56:*/		return 0x82116898;
		  /* 82116898h */ case   57:  		/* lwzx R11, <#[R9 + R16]> */
		/* 82116898h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R16 + 0x00000000) );
		/* 82116898h case   57:*/		return 0x8211689C;
		  /* 8211689Ch */ case   58:  		/* add R11, R10, R11 */
		/* 8211689Ch case   58:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8211689Ch case   58:*/		return 0x821168A0;
		  /* 821168A0h */ case   59:  		/* cmplwi CR6, R11, 4 */
		/* 821168A0h case   59:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821168A0h case   59:*/		return 0x821168A4;
		  /* 821168A4h */ case   60:  		/* bc 12, CR6_GT, 1044 */
		/* 821168A4h case   60:*/		if ( regs.CR[6].gt ) { return 0x82116CB8;  }
		/* 821168A4h case   60:*/		return 0x821168A8;
	}
	return 0x821168A8;
} // Block from 821167B4h-821168A8h (61 instructions)

//////////////////////////////////////////////////////
// Block at 821168A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821168A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821168A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821168A8);
		  /* 821168A8h */ case    0:  		/* cmplw CR6, R14, R29 */
		/* 821168A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R29);
		/* 821168A8h case    0:*/		return 0x821168AC;
		  /* 821168ACh */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 821168ACh case    1:*/		if ( !regs.CR[6].lt ) { return 0x821168B4;  }
		/* 821168ACh case    1:*/		return 0x821168B0;
		  /* 821168B0h */ case    2:  		/* mr R29, R14 */
		/* 821168B0h case    2:*/		regs.R29 = regs.R14;
		/* 821168B0h case    2:*/		return 0x821168B4;
	}
	return 0x821168B4;
} // Block from 821168A8h-821168B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821168B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821168B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821168B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821168B4);
		  /* 821168B4h */ case    0:  		/* lis R10, 4096 */
		/* 821168B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 821168B4h case    0:*/		return 0x821168B8;
		  /* 821168B8h */ case    1:  		/* cmplw CR6, R5, R10 */
		/* 821168B8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 821168B8h case    1:*/		return 0x821168BC;
		  /* 821168BCh */ case    2:  		/* bc 12, CR6_EQ, 792 */
		/* 821168BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82116BD4;  }
		/* 821168BCh case    2:*/		return 0x821168C0;
		  /* 821168C0h */ case    3:  		/* lis R11, 4112 */
		/* 821168C0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x1010);
		/* 821168C0h case    3:*/		return 0x821168C4;
		  /* 821168C4h */ case    4:  		/* cmplw CR6, R5, R11 */
		/* 821168C4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821168C4h case    4:*/		return 0x821168C8;
		  /* 821168C8h */ case    5:  		/* bc 12, CR6_EQ, 780 */
		/* 821168C8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82116BD4;  }
		/* 821168C8h case    5:*/		return 0x821168CC;
		  /* 821168CCh */ case    6:  		/* rlwinm R11, R4, 0, 0, 3 */
		/* 821168CCh case    6:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R11,regs.R4);
		/* 821168CCh case    6:*/		return 0x821168D0;
		  /* 821168D0h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821168D0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821168D0h case    7:*/		return 0x821168D4;
		  /* 821168D4h */ case    8:  		/* bc 4, CR6_EQ, 92 */
		/* 821168D4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82116930;  }
		/* 821168D4h case    8:*/		return 0x821168D8;
		  /* 821168D8h */ case    9:  		/* rlwinm R31, R23, 2, 0, 29 */
		/* 821168D8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R23);
		/* 821168D8h case    9:*/		return 0x821168DC;
		  /* 821168DCh */ case   10:  		/* lwz R4, <#[R30 + 8]> */
		/* 821168DCh case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 821168DCh case   10:*/		return 0x821168E0;
		  /* 821168E0h */ case   11:  		/* addi R3, R1, 96 */
		/* 821168E0h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821168E0h case   11:*/		return 0x821168E4;
		  /* 821168E4h */ case   12:  		/* mr R5, R31 */
		/* 821168E4h case   12:*/		regs.R5 = regs.R31;
		/* 821168E4h case   12:*/		return 0x821168E8;
		  /* 821168E8h */ case   13:  		/* bl -544568 */
		/* 821168E8h case   13:*/		regs.LR = 0x821168EC; return 0x820919B0;
		/* 821168E8h case   13:*/		return 0x821168EC;
		  /* 821168ECh */ case   14:  		/* addi R11, R1, 96 */
		/* 821168ECh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821168ECh case   14:*/		return 0x821168F0;
		  /* 821168F0h */ case   15:  		/* rlwinm R5, R22, 2, 0, 29 */
		/* 821168F0h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R22);
		/* 821168F0h case   15:*/		return 0x821168F4;
		  /* 821168F4h */ case   16:  		/* lwz R4, <#[R21 + 8]> */
		/* 821168F4h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000008) );
		/* 821168F4h case   16:*/		return 0x821168F8;
		  /* 821168F8h */ case   17:  		/* add R3, R31, R11 */
		/* 821168F8h case   17:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 821168F8h case   17:*/		return 0x821168FC;
		  /* 821168FCh */ case   18:  		/* bl -544588 */
		/* 821168FCh case   18:*/		regs.LR = 0x82116900; return 0x820919B0;
		/* 821168FCh case   18:*/		return 0x82116900;
		  /* 82116900h */ case   19:  		/* mr R10, R29 */
		/* 82116900h case   19:*/		regs.R10 = regs.R29;
		/* 82116900h case   19:*/		return 0x82116904;
		  /* 82116904h */ case   20:  		/* li R9, 0 */
		/* 82116904h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116904h case   20:*/		return 0x82116908;
		  /* 82116908h */ case   21:  		/* mr R8, R30 */
		/* 82116908h case   21:*/		regs.R8 = regs.R30;
		/* 82116908h case   21:*/		return 0x8211690C;
		  /* 8211690Ch */ case   22:  		/* li R7, 0 */
		/* 8211690Ch case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211690Ch case   22:*/		return 0x82116910;
		  /* 82116910h */ case   23:  		/* li R6, 0 */
		/* 82116910h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82116910h case   23:*/		return 0x82116914;
		  /* 82116914h */ case   24:  		/* mr R5, R24 */
		/* 82116914h case   24:*/		regs.R5 = regs.R24;
		/* 82116914h case   24:*/		return 0x82116918;
		  /* 82116918h */ case   25:  		/* addi R4, R1, 96 */
		/* 82116918h case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82116918h case   25:*/		return 0x8211691C;
		  /* 8211691Ch */ case   26:  		/* mr R3, R27 */
		/* 8211691Ch case   26:*/		regs.R3 = regs.R27;
		/* 8211691Ch case   26:*/		return 0x82116920;
		  /* 82116920h */ case   27:  		/* bl -18504 */
		/* 82116920h case   27:*/		regs.LR = 0x82116924; return 0x821120D8;
		/* 82116920h case   27:*/		return 0x82116924;
		  /* 82116924h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 82116924h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82116924h case   28:*/		return 0x82116928;
		  /* 82116928h */ case   29:  		/* bc 12, CR0_EQ, 840 */
		/* 82116928h case   29:*/		if ( regs.CR[0].eq ) { return 0x82116C70;  }
		/* 82116928h case   29:*/		return 0x8211692C;
		  /* 8211692Ch */ case   30:  		/* b 796 */
		/* 8211692Ch case   30:*/		return 0x82116C48;
		/* 8211692Ch case   30:*/		return 0x82116930;
	}
	return 0x82116930;
} // Block from 821168B4h-82116930h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82116930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116930);
		  /* 82116930h */ case    0:  		/* lis R10, 8192 */
		/* 82116930h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x2000);
		/* 82116930h case    0:*/		return 0x82116934;
		  /* 82116934h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82116934h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82116934h case    1:*/		return 0x82116938;
		  /* 82116938h */ case    2:  		/* bc 4, CR6_EQ, 380 */
		/* 82116938h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82116AB4;  }
		/* 82116938h case    2:*/		return 0x8211693C;
		  /* 8211693Ch */ case    3:  		/* lwz R26, <#[R30 + 8]> */
		/* 8211693Ch case    3:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R30 + 0x00000008) );
		/* 8211693Ch case    3:*/		return 0x82116940;
		  /* 82116940h */ case    4:  		/* rlwinm R31, R23, 2, 0, 29 */
		/* 82116940h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R23);
		/* 82116940h case    4:*/		return 0x82116944;
		  /* 82116944h */ case    5:  		/* addi R3, R1, 96 */
		/* 82116944h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82116944h case    5:*/		return 0x82116948;
		  /* 82116948h */ case    6:  		/* mr R5, R31 */
		/* 82116948h case    6:*/		regs.R5 = regs.R31;
		/* 82116948h case    6:*/		return 0x8211694C;
		  /* 8211694Ch */ case    7:  		/* mr R4, R26 */
		/* 8211694Ch case    7:*/		regs.R4 = regs.R26;
		/* 8211694Ch case    7:*/		return 0x82116950;
		  /* 82116950h */ case    8:  		/* bl -544672 */
		/* 82116950h case    8:*/		regs.LR = 0x82116954; return 0x820919B0;
		/* 82116950h case    8:*/		return 0x82116954;
		  /* 82116954h */ case    9:  		/* lwz R25, <#[R21 + 8]> */
		/* 82116954h case    9:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R21 + 0x00000008) );
		/* 82116954h case    9:*/		return 0x82116958;
		  /* 82116958h */ case   10:  		/* addi R11, R1, 96 */
		/* 82116958h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82116958h case   10:*/		return 0x8211695C;
		  /* 8211695Ch */ case   11:  		/* rlwinm R28, R22, 2, 0, 29 */
		/* 8211695Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R22);
		/* 8211695Ch case   11:*/		return 0x82116960;
		  /* 82116960h */ case   12:  		/* add R3, R31, R11 */
		/* 82116960h case   12:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116960h case   12:*/		return 0x82116964;
		  /* 82116964h */ case   13:  		/* mr R5, R28 */
		/* 82116964h case   13:*/		regs.R5 = regs.R28;
		/* 82116964h case   13:*/		return 0x82116968;
		  /* 82116968h */ case   14:  		/* mr R4, R25 */
		/* 82116968h case   14:*/		regs.R4 = regs.R25;
		/* 82116968h case   14:*/		return 0x8211696C;
		  /* 8211696Ch */ case   15:  		/* bl -544700 */
		/* 8211696Ch case   15:*/		regs.LR = 0x82116970; return 0x820919B0;
		/* 8211696Ch case   15:*/		return 0x82116970;
		  /* 82116970h */ case   16:  		/* mr R5, R31 */
		/* 82116970h case   16:*/		regs.R5 = regs.R31;
		/* 82116970h case   16:*/		return 0x82116974;
		  /* 82116974h */ case   17:  		/* add R4, R26, R31 */
		/* 82116974h case   17:*/		cpu::op::add<0>(regs,&regs.R4,regs.R26,regs.R31);
		/* 82116974h case   17:*/		return 0x82116978;
		  /* 82116978h */ case   18:  		/* addi R3, R1, 128 */
		/* 82116978h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82116978h case   18:*/		return 0x8211697C;
		  /* 8211697Ch */ case   19:  		/* bl -544716 */
		/* 8211697Ch case   19:*/		regs.LR = 0x82116980; return 0x820919B0;
		/* 8211697Ch case   19:*/		return 0x82116980;
		  /* 82116980h */ case   20:  		/* addi R11, R1, 128 */
		/* 82116980h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82116980h case   20:*/		return 0x82116984;
		  /* 82116984h */ case   21:  		/* mr R5, R28 */
		/* 82116984h case   21:*/		regs.R5 = regs.R28;
		/* 82116984h case   21:*/		return 0x82116988;
		  /* 82116988h */ case   22:  		/* add R4, R25, R28 */
		/* 82116988h case   22:*/		cpu::op::add<0>(regs,&regs.R4,regs.R25,regs.R28);
		/* 82116988h case   22:*/		return 0x8211698C;
		  /* 8211698Ch */ case   23:  		/* add R3, R31, R11 */
		/* 8211698Ch case   23:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 8211698Ch case   23:*/		return 0x82116990;
		  /* 82116990h */ case   24:  		/* bl -544736 */
		/* 82116990h case   24:*/		regs.LR = 0x82116994; return 0x820919B0;
		/* 82116990h case   24:*/		return 0x82116994;
		  /* 82116994h */ case   25:  		/* mr R10, R29 */
		/* 82116994h case   25:*/		regs.R10 = regs.R29;
		/* 82116994h case   25:*/		return 0x82116998;
		  /* 82116998h */ case   26:  		/* li R9, 0 */
		/* 82116998h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116998h case   26:*/		return 0x8211699C;
		  /* 8211699Ch */ case   27:  		/* mr R8, R30 */
		/* 8211699Ch case   27:*/		regs.R8 = regs.R30;
		/* 8211699Ch case   27:*/		return 0x821169A0;
		  /* 821169A0h */ case   28:  		/* li R7, 0 */
		/* 821169A0h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821169A0h case   28:*/		return 0x821169A4;
		  /* 821169A4h */ case   29:  		/* li R6, 0 */
		/* 821169A4h case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821169A4h case   29:*/		return 0x821169A8;
		  /* 821169A8h */ case   30:  		/* mr R5, R24 */
		/* 821169A8h case   30:*/		regs.R5 = regs.R24;
		/* 821169A8h case   30:*/		return 0x821169AC;
		  /* 821169ACh */ case   31:  		/* addi R4, R1, 96 */
		/* 821169ACh case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821169ACh case   31:*/		return 0x821169B0;
		  /* 821169B0h */ case   32:  		/* mr R3, R27 */
		/* 821169B0h case   32:*/		regs.R3 = regs.R27;
		/* 821169B0h case   32:*/		return 0x821169B4;
		  /* 821169B4h */ case   33:  		/* bl -18652 */
		/* 821169B4h case   33:*/		regs.LR = 0x821169B8; return 0x821120D8;
		/* 821169B4h case   33:*/		return 0x821169B8;
		  /* 821169B8h */ case   34:  		/* mr R26, R3 */
		/* 821169B8h case   34:*/		regs.R26 = regs.R3;
		/* 821169B8h case   34:*/		return 0x821169BC;
		  /* 821169BCh */ case   35:  		/* mr R10, R29 */
		/* 821169BCh case   35:*/		regs.R10 = regs.R29;
		/* 821169BCh case   35:*/		return 0x821169C0;
		  /* 821169C0h */ case   36:  		/* li R9, 0 */
		/* 821169C0h case   36:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821169C0h case   36:*/		return 0x821169C4;
		  /* 821169C4h */ case   37:  		/* mr R8, R30 */
		/* 821169C4h case   37:*/		regs.R8 = regs.R30;
		/* 821169C4h case   37:*/		return 0x821169C8;
		  /* 821169C8h */ case   38:  		/* li R7, 0 */
		/* 821169C8h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821169C8h case   38:*/		return 0x821169CC;
		  /* 821169CCh */ case   39:  		/* li R6, 0 */
		/* 821169CCh case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821169CCh case   39:*/		return 0x821169D0;
		  /* 821169D0h */ case   40:  		/* mr R5, R24 */
		/* 821169D0h case   40:*/		regs.R5 = regs.R24;
		/* 821169D0h case   40:*/		return 0x821169D4;
		  /* 821169D4h */ case   41:  		/* addi R4, R1, 128 */
		/* 821169D4h case   41:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 821169D4h case   41:*/		return 0x821169D8;
		  /* 821169D8h */ case   42:  		/* mr R3, R27 */
		/* 821169D8h case   42:*/		regs.R3 = regs.R27;
		/* 821169D8h case   42:*/		return 0x821169DC;
		  /* 821169DCh */ case   43:  		/* bl -18692 */
		/* 821169DCh case   43:*/		regs.LR = 0x821169E0; return 0x821120D8;
		/* 821169DCh case   43:*/		return 0x821169E0;
		  /* 821169E0h */ case   44:  		/* cmpwi CR6, R26, 0 */
		/* 821169E0h case   44:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821169E0h case   44:*/		return 0x821169E4;
		  /* 821169E4h */ case   45:  		/* bc 12, CR6_EQ, 12 */
		/* 821169E4h case   45:*/		if ( regs.CR[6].eq ) { return 0x821169F0;  }
		/* 821169E4h case   45:*/		return 0x821169E8;
		  /* 821169E8h */ case   46:  		/* cmpwi CR6, R3, 0 */
		/* 821169E8h case   46:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821169E8h case   46:*/		return 0x821169EC;
		  /* 821169ECh */ case   47:  		/* bc 4, CR6_EQ, 604 */
		/* 821169ECh case   47:*/		if ( !regs.CR[6].eq ) { return 0x82116C48;  }
		/* 821169ECh case   47:*/		return 0x821169F0;
	}
	return 0x821169F0;
} // Block from 82116930h-821169F0h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821169F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821169F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821169F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821169F0);
		  /* 821169F0h */ case    0:  		/* mr R3, R21 */
		/* 821169F0h case    0:*/		regs.R3 = regs.R21;
		/* 821169F0h case    0:*/		return 0x821169F4;
		  /* 821169F4h */ case    1:  		/* bl -109044 */
		/* 821169F4h case    1:*/		regs.LR = 0x821169F8; return 0x820FC000;
		/* 821169F4h case    1:*/		return 0x821169F8;
		  /* 821169F8h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 821169F8h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821169F8h case    2:*/		return 0x821169FC;
		  /* 821169FCh */ case    3:  		/* bc 12, CR0_EQ, 628 */
		/* 821169FCh case    3:*/		if ( regs.CR[0].eq ) { return 0x82116C70;  }
		/* 821169FCh case    3:*/		return 0x82116A00;
		  /* 82116A00h */ case    4:  		/* lwz R25, <#[R30 + 8]> */
		/* 82116A00h case    4:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R30 + 0x00000008) );
		/* 82116A00h case    4:*/		return 0x82116A04;
		  /* 82116A04h */ case    5:  		/* mr R5, R31 */
		/* 82116A04h case    5:*/		regs.R5 = regs.R31;
		/* 82116A04h case    5:*/		return 0x82116A08;
		  /* 82116A08h */ case    6:  		/* addi R3, R1, 160 */
		/* 82116A08h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 82116A08h case    6:*/		return 0x82116A0C;
		  /* 82116A0Ch */ case    7:  		/* mr R4, R25 */
		/* 82116A0Ch case    7:*/		regs.R4 = regs.R25;
		/* 82116A0Ch case    7:*/		return 0x82116A10;
		  /* 82116A10h */ case    8:  		/* bl -544864 */
		/* 82116A10h case    8:*/		regs.LR = 0x82116A14; return 0x820919B0;
		/* 82116A10h case    8:*/		return 0x82116A14;
		  /* 82116A14h */ case    9:  		/* lwz R26, <#[R21 + 8]> */
		/* 82116A14h case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R21 + 0x00000008) );
		/* 82116A14h case    9:*/		return 0x82116A18;
		  /* 82116A18h */ case   10:  		/* addi R11, R1, 160 */
		/* 82116A18h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 82116A18h case   10:*/		return 0x82116A1C;
		  /* 82116A1Ch */ case   11:  		/* add R4, R26, R28 */
		/* 82116A1Ch case   11:*/		cpu::op::add<0>(regs,&regs.R4,regs.R26,regs.R28);
		/* 82116A1Ch case   11:*/		return 0x82116A20;
		  /* 82116A20h */ case   12:  		/* mr R5, R28 */
		/* 82116A20h case   12:*/		regs.R5 = regs.R28;
		/* 82116A20h case   12:*/		return 0x82116A24;
		  /* 82116A24h */ case   13:  		/* add R3, R31, R11 */
		/* 82116A24h case   13:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116A24h case   13:*/		return 0x82116A28;
		  /* 82116A28h */ case   14:  		/* bl -544888 */
		/* 82116A28h case   14:*/		regs.LR = 0x82116A2C; return 0x820919B0;
		/* 82116A28h case   14:*/		return 0x82116A2C;
		  /* 82116A2Ch */ case   15:  		/* mr R5, R31 */
		/* 82116A2Ch case   15:*/		regs.R5 = regs.R31;
		/* 82116A2Ch case   15:*/		return 0x82116A30;
		  /* 82116A30h */ case   16:  		/* add R4, R25, R31 */
		/* 82116A30h case   16:*/		cpu::op::add<0>(regs,&regs.R4,regs.R25,regs.R31);
		/* 82116A30h case   16:*/		return 0x82116A34;
		  /* 82116A34h */ case   17:  		/* addi R3, R1, 192 */
		/* 82116A34h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82116A34h case   17:*/		return 0x82116A38;
		  /* 82116A38h */ case   18:  		/* bl -544904 */
		/* 82116A38h case   18:*/		regs.LR = 0x82116A3C; return 0x820919B0;
		/* 82116A38h case   18:*/		return 0x82116A3C;
		  /* 82116A3Ch */ case   19:  		/* addi R11, R1, 192 */
		/* 82116A3Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC0);
		/* 82116A3Ch case   19:*/		return 0x82116A40;
		  /* 82116A40h */ case   20:  		/* mr R5, R28 */
		/* 82116A40h case   20:*/		regs.R5 = regs.R28;
		/* 82116A40h case   20:*/		return 0x82116A44;
		  /* 82116A44h */ case   21:  		/* mr R4, R26 */
		/* 82116A44h case   21:*/		regs.R4 = regs.R26;
		/* 82116A44h case   21:*/		return 0x82116A48;
		  /* 82116A48h */ case   22:  		/* add R3, R31, R11 */
		/* 82116A48h case   22:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116A48h case   22:*/		return 0x82116A4C;
		  /* 82116A4Ch */ case   23:  		/* bl -544924 */
		/* 82116A4Ch case   23:*/		regs.LR = 0x82116A50; return 0x820919B0;
		/* 82116A4Ch case   23:*/		return 0x82116A50;
		  /* 82116A50h */ case   24:  		/* mr R10, R29 */
		/* 82116A50h case   24:*/		regs.R10 = regs.R29;
		/* 82116A50h case   24:*/		return 0x82116A54;
		  /* 82116A54h */ case   25:  		/* li R9, 0 */
		/* 82116A54h case   25:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116A54h case   25:*/		return 0x82116A58;
		  /* 82116A58h */ case   26:  		/* mr R8, R30 */
		/* 82116A58h case   26:*/		regs.R8 = regs.R30;
		/* 82116A58h case   26:*/		return 0x82116A5C;
		  /* 82116A5Ch */ case   27:  		/* li R7, 0 */
		/* 82116A5Ch case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116A5Ch case   27:*/		return 0x82116A60;
		  /* 82116A60h */ case   28:  		/* li R6, 0 */
		/* 82116A60h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82116A60h case   28:*/		return 0x82116A64;
		  /* 82116A64h */ case   29:  		/* mr R5, R24 */
		/* 82116A64h case   29:*/		regs.R5 = regs.R24;
		/* 82116A64h case   29:*/		return 0x82116A68;
		  /* 82116A68h */ case   30:  		/* addi R4, R1, 160 */
		/* 82116A68h case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 82116A68h case   30:*/		return 0x82116A6C;
		  /* 82116A6Ch */ case   31:  		/* mr R3, R27 */
		/* 82116A6Ch case   31:*/		regs.R3 = regs.R27;
		/* 82116A6Ch case   31:*/		return 0x82116A70;
		  /* 82116A70h */ case   32:  		/* bl -18840 */
		/* 82116A70h case   32:*/		regs.LR = 0x82116A74; return 0x821120D8;
		/* 82116A70h case   32:*/		return 0x82116A74;
		  /* 82116A74h */ case   33:  		/* mr R31, R3 */
		/* 82116A74h case   33:*/		regs.R31 = regs.R3;
		/* 82116A74h case   33:*/		return 0x82116A78;
		  /* 82116A78h */ case   34:  		/* mr R10, R29 */
		/* 82116A78h case   34:*/		regs.R10 = regs.R29;
		/* 82116A78h case   34:*/		return 0x82116A7C;
		  /* 82116A7Ch */ case   35:  		/* li R9, 0 */
		/* 82116A7Ch case   35:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116A7Ch case   35:*/		return 0x82116A80;
		  /* 82116A80h */ case   36:  		/* mr R8, R30 */
		/* 82116A80h case   36:*/		regs.R8 = regs.R30;
		/* 82116A80h case   36:*/		return 0x82116A84;
		  /* 82116A84h */ case   37:  		/* li R7, 0 */
		/* 82116A84h case   37:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116A84h case   37:*/		return 0x82116A88;
	}
	return 0x82116A88;
} // Block from 821169F0h-82116A88h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82116A88h
// Function '?CombineInstructions@CProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116A88);
		  /* 82116A88h */ case    0:  		/* li R6, 0 */
		/* 82116A88h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82116A88h case    0:*/		return 0x82116A8C;
		  /* 82116A8Ch */ case    1:  		/* mr R5, R24 */
		/* 82116A8Ch case    1:*/		regs.R5 = regs.R24;
		/* 82116A8Ch case    1:*/		return 0x82116A90;
		  /* 82116A90h */ case    2:  		/* addi R4, R1, 192 */
		/* 82116A90h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82116A90h case    2:*/		return 0x82116A94;
		  /* 82116A94h */ case    3:  		/* mr R3, R27 */
		/* 82116A94h case    3:*/		regs.R3 = regs.R27;
		/* 82116A94h case    3:*/		return 0x82116A98;
		  /* 82116A98h */ case    4:  		/* bl -18880 */
		/* 82116A98h case    4:*/		regs.LR = 0x82116A9C; return 0x821120D8;
		/* 82116A98h case    4:*/		return 0x82116A9C;
		  /* 82116A9Ch */ case    5:  		/* cmpwi CR6, R31, 0 */
		/* 82116A9Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82116A9Ch case    5:*/		return 0x82116AA0;
		  /* 82116AA0h */ case    6:  		/* bc 12, CR6_EQ, 464 */
		/* 82116AA0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116AA0h case    6:*/		return 0x82116AA4;
		  /* 82116AA4h */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 82116AA4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82116AA4h case    7:*/		return 0x82116AA8;
		  /* 82116AA8h */ case    8:  		/* bc 12, CR6_EQ, 456 */
		/* 82116AA8h case    8:*/		if ( regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116AA8h case    8:*/		return 0x82116AAC;
		  /* 82116AACh */ case    9:  		/* li R28, 1 */
		/* 82116AACh case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82116AACh case    9:*/		return 0x82116AB0;
		  /* 82116AB0h */ case   10:  		/* b 412 */
		/* 82116AB0h case   10:*/		return 0x82116C4C;
		/* 82116AB0h case   10:*/		return 0x82116AB4;
	}
	return 0x82116AB4;
} // Block from 82116A88h-82116AB4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82116AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116AB4);
		  /* 82116AB4h */ case    0:  		/* lis R10, 12288 */
		/* 82116AB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x3000);
		/* 82116AB4h case    0:*/		return 0x82116AB8;
		  /* 82116AB8h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82116AB8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82116AB8h case    1:*/		return 0x82116ABC;
		  /* 82116ABCh */ case    2:  		/* bc 4, CR6_EQ, 436 */
		/* 82116ABCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116ABCh case    2:*/		return 0x82116AC0;
		  /* 82116AC0h */ case    3:  		/* lwz R25, <#[R30 + 8]> */
		/* 82116AC0h case    3:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R30 + 0x00000008) );
		/* 82116AC0h case    3:*/		return 0x82116AC4;
		  /* 82116AC4h */ case    4:  		/* rlwinm R31, R23, 2, 0, 29 */
		/* 82116AC4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R23);
		/* 82116AC4h case    4:*/		return 0x82116AC8;
		  /* 82116AC8h */ case    5:  		/* addi R3, R1, 96 */
		/* 82116AC8h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82116AC8h case    5:*/		return 0x82116ACC;
		  /* 82116ACCh */ case    6:  		/* mr R4, R25 */
		/* 82116ACCh case    6:*/		regs.R4 = regs.R25;
		/* 82116ACCh case    6:*/		return 0x82116AD0;
		  /* 82116AD0h */ case    7:  		/* mr R5, R31 */
		/* 82116AD0h case    7:*/		regs.R5 = regs.R31;
		/* 82116AD0h case    7:*/		return 0x82116AD4;
		  /* 82116AD4h */ case    8:  		/* bl -545060 */
		/* 82116AD4h case    8:*/		regs.LR = 0x82116AD8; return 0x820919B0;
		/* 82116AD4h case    8:*/		return 0x82116AD8;
		  /* 82116AD8h */ case    9:  		/* lwz R26, <#[R21 + 8]> */
		/* 82116AD8h case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R21 + 0x00000008) );
		/* 82116AD8h case    9:*/		return 0x82116ADC;
		  /* 82116ADCh */ case   10:  		/* addi R11, R1, 96 */
		/* 82116ADCh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82116ADCh case   10:*/		return 0x82116AE0;
		  /* 82116AE0h */ case   11:  		/* rlwinm R28, R22, 2, 0, 29 */
		/* 82116AE0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R22);
		/* 82116AE0h case   11:*/		return 0x82116AE4;
		  /* 82116AE4h */ case   12:  		/* mr R4, R26 */
		/* 82116AE4h case   12:*/		regs.R4 = regs.R26;
		/* 82116AE4h case   12:*/		return 0x82116AE8;
		  /* 82116AE8h */ case   13:  		/* mr R5, R28 */
		/* 82116AE8h case   13:*/		regs.R5 = regs.R28;
		/* 82116AE8h case   13:*/		return 0x82116AEC;
		  /* 82116AECh */ case   14:  		/* add R3, R31, R11 */
		/* 82116AECh case   14:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116AECh case   14:*/		return 0x82116AF0;
		  /* 82116AF0h */ case   15:  		/* bl -545088 */
		/* 82116AF0h case   15:*/		regs.LR = 0x82116AF4; return 0x820919B0;
		/* 82116AF0h case   15:*/		return 0x82116AF4;
		  /* 82116AF4h */ case   16:  		/* mr R5, R31 */
		/* 82116AF4h case   16:*/		regs.R5 = regs.R31;
		/* 82116AF4h case   16:*/		return 0x82116AF8;
		  /* 82116AF8h */ case   17:  		/* add R4, R25, R31 */
		/* 82116AF8h case   17:*/		cpu::op::add<0>(regs,&regs.R4,regs.R25,regs.R31);
		/* 82116AF8h case   17:*/		return 0x82116AFC;
		  /* 82116AFCh */ case   18:  		/* addi R3, R1, 128 */
		/* 82116AFCh case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82116AFCh case   18:*/		return 0x82116B00;
		  /* 82116B00h */ case   19:  		/* bl -545104 */
		/* 82116B00h case   19:*/		regs.LR = 0x82116B04; return 0x820919B0;
		/* 82116B00h case   19:*/		return 0x82116B04;
		  /* 82116B04h */ case   20:  		/* addi R11, R1, 128 */
		/* 82116B04h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82116B04h case   20:*/		return 0x82116B08;
		  /* 82116B08h */ case   21:  		/* mr R5, R28 */
		/* 82116B08h case   21:*/		regs.R5 = regs.R28;
		/* 82116B08h case   21:*/		return 0x82116B0C;
		  /* 82116B0Ch */ case   22:  		/* add R4, R26, R28 */
		/* 82116B0Ch case   22:*/		cpu::op::add<0>(regs,&regs.R4,regs.R26,regs.R28);
		/* 82116B0Ch case   22:*/		return 0x82116B10;
		  /* 82116B10h */ case   23:  		/* add R3, R31, R11 */
		/* 82116B10h case   23:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116B10h case   23:*/		return 0x82116B14;
		  /* 82116B14h */ case   24:  		/* bl -545124 */
		/* 82116B14h case   24:*/		regs.LR = 0x82116B18; return 0x820919B0;
		/* 82116B14h case   24:*/		return 0x82116B18;
		  /* 82116B18h */ case   25:  		/* rlwinm R11, R23, 3, 0, 28 */
		/* 82116B18h case   25:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R23);
		/* 82116B18h case   25:*/		return 0x82116B1C;
		  /* 82116B1Ch */ case   26:  		/* mr R5, R31 */
		/* 82116B1Ch case   26:*/		regs.R5 = regs.R31;
		/* 82116B1Ch case   26:*/		return 0x82116B20;
		  /* 82116B20h */ case   27:  		/* add R4, R11, R25 */
		/* 82116B20h case   27:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R25);
		/* 82116B20h case   27:*/		return 0x82116B24;
		  /* 82116B24h */ case   28:  		/* addi R3, R1, 224 */
		/* 82116B24h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 82116B24h case   28:*/		return 0x82116B28;
		  /* 82116B28h */ case   29:  		/* bl -545144 */
		/* 82116B28h case   29:*/		regs.LR = 0x82116B2C; return 0x820919B0;
		/* 82116B28h case   29:*/		return 0x82116B2C;
		  /* 82116B2Ch */ case   30:  		/* rlwinm R10, R22, 3, 0, 28 */
		/* 82116B2Ch case   30:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R22);
		/* 82116B2Ch case   30:*/		return 0x82116B30;
		  /* 82116B30h */ case   31:  		/* addi R11, R1, 224 */
		/* 82116B30h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 82116B30h case   31:*/		return 0x82116B34;
		  /* 82116B34h */ case   32:  		/* mr R5, R28 */
		/* 82116B34h case   32:*/		regs.R5 = regs.R28;
		/* 82116B34h case   32:*/		return 0x82116B38;
		  /* 82116B38h */ case   33:  		/* add R4, R10, R26 */
		/* 82116B38h case   33:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R26);
		/* 82116B38h case   33:*/		return 0x82116B3C;
		  /* 82116B3Ch */ case   34:  		/* add R3, R31, R11 */
		/* 82116B3Ch case   34:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116B3Ch case   34:*/		return 0x82116B40;
		  /* 82116B40h */ case   35:  		/* bl -545168 */
		/* 82116B40h case   35:*/		regs.LR = 0x82116B44; return 0x820919B0;
		/* 82116B40h case   35:*/		return 0x82116B44;
		  /* 82116B44h */ case   36:  		/* mr R10, R29 */
		/* 82116B44h case   36:*/		regs.R10 = regs.R29;
		/* 82116B44h case   36:*/		return 0x82116B48;
		  /* 82116B48h */ case   37:  		/* li R9, 0 */
		/* 82116B48h case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116B48h case   37:*/		return 0x82116B4C;
		  /* 82116B4Ch */ case   38:  		/* mr R8, R30 */
		/* 82116B4Ch case   38:*/		regs.R8 = regs.R30;
		/* 82116B4Ch case   38:*/		return 0x82116B50;
		  /* 82116B50h */ case   39:  		/* li R7, 0 */
		/* 82116B50h case   39:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116B50h case   39:*/		return 0x82116B54;
		  /* 82116B54h */ case   40:  		/* li R6, 0 */
		/* 82116B54h case   40:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82116B54h case   40:*/		return 0x82116B58;
		  /* 82116B58h */ case   41:  		/* mr R5, R24 */
		/* 82116B58h case   41:*/		regs.R5 = regs.R24;
		/* 82116B58h case   41:*/		return 0x82116B5C;
		  /* 82116B5Ch */ case   42:  		/* addi R4, R1, 96 */
		/* 82116B5Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82116B5Ch case   42:*/		return 0x82116B60;
		  /* 82116B60h */ case   43:  		/* mr R3, R27 */
		/* 82116B60h case   43:*/		regs.R3 = regs.R27;
		/* 82116B60h case   43:*/		return 0x82116B64;
		  /* 82116B64h */ case   44:  		/* bl -19084 */
		/* 82116B64h case   44:*/		regs.LR = 0x82116B68; return 0x821120D8;
		/* 82116B64h case   44:*/		return 0x82116B68;
		  /* 82116B68h */ case   45:  		/* mr R28, R3 */
		/* 82116B68h case   45:*/		regs.R28 = regs.R3;
		/* 82116B68h case   45:*/		return 0x82116B6C;
		  /* 82116B6Ch */ case   46:  		/* mr R10, R29 */
		/* 82116B6Ch case   46:*/		regs.R10 = regs.R29;
		/* 82116B6Ch case   46:*/		return 0x82116B70;
		  /* 82116B70h */ case   47:  		/* li R9, 0 */
		/* 82116B70h case   47:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116B70h case   47:*/		return 0x82116B74;
		  /* 82116B74h */ case   48:  		/* mr R8, R30 */
		/* 82116B74h case   48:*/		regs.R8 = regs.R30;
		/* 82116B74h case   48:*/		return 0x82116B78;
		  /* 82116B78h */ case   49:  		/* li R7, 0 */
		/* 82116B78h case   49:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116B78h case   49:*/		return 0x82116B7C;
		  /* 82116B7Ch */ case   50:  		/* li R6, 0 */
		/* 82116B7Ch case   50:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82116B7Ch case   50:*/		return 0x82116B80;
		  /* 82116B80h */ case   51:  		/* mr R5, R24 */
		/* 82116B80h case   51:*/		regs.R5 = regs.R24;
		/* 82116B80h case   51:*/		return 0x82116B84;
		  /* 82116B84h */ case   52:  		/* addi R4, R1, 128 */
		/* 82116B84h case   52:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82116B84h case   52:*/		return 0x82116B88;
		  /* 82116B88h */ case   53:  		/* mr R3, R27 */
		/* 82116B88h case   53:*/		regs.R3 = regs.R27;
		/* 82116B88h case   53:*/		return 0x82116B8C;
		  /* 82116B8Ch */ case   54:  		/* bl -19124 */
		/* 82116B8Ch case   54:*/		regs.LR = 0x82116B90; return 0x821120D8;
		/* 82116B8Ch case   54:*/		return 0x82116B90;
		  /* 82116B90h */ case   55:  		/* mr R31, R3 */
		/* 82116B90h case   55:*/		regs.R31 = regs.R3;
		/* 82116B90h case   55:*/		return 0x82116B94;
		  /* 82116B94h */ case   56:  		/* mr R10, R29 */
		/* 82116B94h case   56:*/		regs.R10 = regs.R29;
		/* 82116B94h case   56:*/		return 0x82116B98;
		  /* 82116B98h */ case   57:  		/* li R9, 0 */
		/* 82116B98h case   57:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82116B98h case   57:*/		return 0x82116B9C;
		  /* 82116B9Ch */ case   58:  		/* mr R8, R30 */
		/* 82116B9Ch case   58:*/		regs.R8 = regs.R30;
		/* 82116B9Ch case   58:*/		return 0x82116BA0;
		  /* 82116BA0h */ case   59:  		/* li R7, 0 */
		/* 82116BA0h case   59:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116BA0h case   59:*/		return 0x82116BA4;
		  /* 82116BA4h */ case   60:  		/* li R6, 0 */
		/* 82116BA4h case   60:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82116BA4h case   60:*/		return 0x82116BA8;
		  /* 82116BA8h */ case   61:  		/* mr R5, R24 */
		/* 82116BA8h case   61:*/		regs.R5 = regs.R24;
		/* 82116BA8h case   61:*/		return 0x82116BAC;
		  /* 82116BACh */ case   62:  		/* addi R4, R1, 224 */
		/* 82116BACh case   62:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xE0);
		/* 82116BACh case   62:*/		return 0x82116BB0;
		  /* 82116BB0h */ case   63:  		/* mr R3, R27 */
		/* 82116BB0h case   63:*/		regs.R3 = regs.R27;
		/* 82116BB0h case   63:*/		return 0x82116BB4;
		  /* 82116BB4h */ case   64:  		/* bl -19164 */
		/* 82116BB4h case   64:*/		regs.LR = 0x82116BB8; return 0x821120D8;
		/* 82116BB4h case   64:*/		return 0x82116BB8;
		  /* 82116BB8h */ case   65:  		/* cmpwi CR6, R28, 0 */
		/* 82116BB8h case   65:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82116BB8h case   65:*/		return 0x82116BBC;
		  /* 82116BBCh */ case   66:  		/* bc 12, CR6_EQ, 180 */
		/* 82116BBCh case   66:*/		if ( regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116BBCh case   66:*/		return 0x82116BC0;
		  /* 82116BC0h */ case   67:  		/* cmpwi CR6, R31, 0 */
		/* 82116BC0h case   67:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82116BC0h case   67:*/		return 0x82116BC4;
		  /* 82116BC4h */ case   68:  		/* bc 12, CR6_EQ, 172 */
		/* 82116BC4h case   68:*/		if ( regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116BC4h case   68:*/		return 0x82116BC8;
		  /* 82116BC8h */ case   69:  		/* cmpwi CR6, R3, 0 */
		/* 82116BC8h case   69:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82116BC8h case   69:*/		return 0x82116BCC;
		  /* 82116BCCh */ case   70:  		/* bc 12, CR6_EQ, 164 */
		/* 82116BCCh case   70:*/		if ( regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116BCCh case   70:*/		return 0x82116BD0;
		  /* 82116BD0h */ case   71:  		/* b 120 */
		/* 82116BD0h case   71:*/		return 0x82116C48;
		/* 82116BD0h case   71:*/		return 0x82116BD4;
	}
	return 0x82116BD4;
} // Block from 82116AB4h-82116BD4h (72 instructions)

//////////////////////////////////////////////////////
// Block at 82116BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116BD4);
		  /* 82116BD4h */ case    0:  		/* lwz R29, <#[R21 + 8]> */
		/* 82116BD4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R21 + 0x00000008) );
		/* 82116BD4h case    0:*/		return 0x82116BD8;
		  /* 82116BD8h */ case    1:  		/* lwz R4, <#[R30 + 8]> */
		/* 82116BD8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 82116BD8h case    1:*/		return 0x82116BDC;
		  /* 82116BDCh */ case    2:  		/* lwz R11, <#[R29]> */
		/* 82116BDCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82116BDCh case    2:*/		return 0x82116BE0;
		  /* 82116BE0h */ case    3:  		/* lwz R10, <#[R4]> */
		/* 82116BE0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82116BE0h case    3:*/		return 0x82116BE4;
		  /* 82116BE4h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82116BE4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82116BE4h case    4:*/		return 0x82116BE8;
		  /* 82116BE8h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82116BE8h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82116BE8h case    5:*/		return 0x82116BEC;
		  /* 82116BECh */ case    6:  		/* lwzx R11, <#[R11 + R7]> */
		/* 82116BECh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82116BECh case    6:*/		return 0x82116BF0;
		  /* 82116BF0h */ case    7:  		/* lwzx R10, <#[R10 + R7]> */
		/* 82116BF0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82116BF0h case    7:*/		return 0x82116BF4;
		  /* 82116BF4h */ case    8:  		/* lwz R9, <#[R11 + 4]> */
		/* 82116BF4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82116BF4h case    8:*/		return 0x82116BF8;
		  /* 82116BF8h */ case    9:  		/* lwz R8, <#[R10 + 4]> */
		/* 82116BF8h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 82116BF8h case    9:*/		return 0x82116BFC;
		  /* 82116BFCh */ case   10:  		/* cmplw CR6, R9, R8 */
		/* 82116BFCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82116BFCh case   10:*/		return 0x82116C00;
		  /* 82116C00h */ case   11:  		/* bc 4, CR6_EQ, 112 */
		/* 82116C00h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116C00h case   11:*/		return 0x82116C04;
		  /* 82116C04h */ case   12:  		/* lwz R9, <#[R11 + 8]> */
		/* 82116C04h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82116C04h case   12:*/		return 0x82116C08;
		  /* 82116C08h */ case   13:  		/* lwz R8, <#[R10 + 8]> */
		/* 82116C08h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 82116C08h case   13:*/		return 0x82116C0C;
		  /* 82116C0Ch */ case   14:  		/* cmplw CR6, R9, R8 */
		/* 82116C0Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 82116C0Ch case   14:*/		return 0x82116C10;
		  /* 82116C10h */ case   15:  		/* bc 4, CR6_EQ, 96 */
		/* 82116C10h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116C10h case   15:*/		return 0x82116C14;
		  /* 82116C14h */ case   16:  		/* lwz R11, <#[R11 + 12]> */
		/* 82116C14h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82116C14h case   16:*/		return 0x82116C18;
		  /* 82116C18h */ case   17:  		/* lwz R10, <#[R10 + 12]> */
		/* 82116C18h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82116C18h case   17:*/		return 0x82116C1C;
		  /* 82116C1Ch */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 82116C1Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82116C1Ch case   18:*/		return 0x82116C20;
		  /* 82116C20h */ case   19:  		/* bc 4, CR6_EQ, 80 */
		/* 82116C20h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82116C70;  }
		/* 82116C20h case   19:*/		return 0x82116C24;
		  /* 82116C24h */ case   20:  		/* rlwinm R31, R23, 2, 0, 29 */
		/* 82116C24h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R23);
		/* 82116C24h case   20:*/		return 0x82116C28;
		  /* 82116C28h */ case   21:  		/* addi R3, R1, 96 */
		/* 82116C28h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82116C28h case   21:*/		return 0x82116C2C;
		  /* 82116C2Ch */ case   22:  		/* mr R5, R31 */
		/* 82116C2Ch case   22:*/		regs.R5 = regs.R31;
		/* 82116C2Ch case   22:*/		return 0x82116C30;
		  /* 82116C30h */ case   23:  		/* bl -545408 */
		/* 82116C30h case   23:*/		regs.LR = 0x82116C34; return 0x820919B0;
		/* 82116C30h case   23:*/		return 0x82116C34;
		  /* 82116C34h */ case   24:  		/* addi R11, R1, 96 */
		/* 82116C34h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82116C34h case   24:*/		return 0x82116C38;
		  /* 82116C38h */ case   25:  		/* rlwinm R5, R22, 2, 0, 29 */
		/* 82116C38h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R22);
		/* 82116C38h case   25:*/		return 0x82116C3C;
		  /* 82116C3Ch */ case   26:  		/* mr R4, R29 */
		/* 82116C3Ch case   26:*/		regs.R4 = regs.R29;
		/* 82116C3Ch case   26:*/		return 0x82116C40;
		  /* 82116C40h */ case   27:  		/* add R3, R31, R11 */
		/* 82116C40h case   27:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R11);
		/* 82116C40h case   27:*/		return 0x82116C44;
		  /* 82116C44h */ case   28:  		/* bl -545428 */
		/* 82116C44h case   28:*/		regs.LR = 0x82116C48; return 0x820919B0;
		/* 82116C44h case   28:*/		return 0x82116C48;
	}
	return 0x82116C48;
} // Block from 82116BD4h-82116C48h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82116C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116C48);
		  /* 82116C48h */ case    0:  		/* li R28, 0 */
		/* 82116C48h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82116C48h case    0:*/		return 0x82116C4C;
	}
	return 0x82116C4C;
} // Block from 82116C48h-82116C4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82116C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116C4C);
		  /* 82116C4Ch */ case    0:  		/* cmplw CR6, R19, R20 */
		/* 82116C4Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R20);
		/* 82116C4Ch case    0:*/		return 0x82116C50;
		  /* 82116C50h */ case    1:  		/* bc 12, CR6_EQ, 128 */
		/* 82116C50h case    1:*/		if ( regs.CR[6].eq ) { return 0x82116CD0;  }
		/* 82116C50h case    1:*/		return 0x82116C54;
		  /* 82116C54h */ case    2:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 82116C54h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 82116C54h case    2:*/		return 0x82116C58;
		  /* 82116C58h */ case    3:  		/* rlwinm R10, R19, 2, 0, 29 */
		/* 82116C58h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R19);
		/* 82116C58h case    3:*/		return 0x82116C5C;
		  /* 82116C5Ch */ case    4:  		/* lwzx R11, <#[R11 + R16]> */
		/* 82116C5Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 82116C5Ch case    4:*/		return 0x82116C60;
		  /* 82116C60h */ case    5:  		/* lwzx R10, <#[R10 + R16]> */
		/* 82116C60h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R16 + 0x00000000) );
		/* 82116C60h case    5:*/		return 0x82116C64;
		  /* 82116C64h */ case    6:  		/* add R11, R11, R10 */
		/* 82116C64h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82116C64h case    6:*/		return 0x82116C68;
		  /* 82116C68h */ case    7:  		/* cmplwi CR6, R11, 4 */
		/* 82116C68h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82116C68h case    7:*/		return 0x82116C6C;
		  /* 82116C6Ch */ case    8:  		/* bc 4, CR6_GT, 100 */
		/* 82116C6Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x82116CD0;  }
		/* 82116C6Ch case    8:*/		return 0x82116C70;
	}
	return 0x82116C70;
} // Block from 82116C4Ch-82116C70h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82116C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116C70);
		  /* 82116C70h */ case    0:  		/* lwz R30, <#[R1 + 112]> */
		/* 82116C70h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 82116C70h case    0:*/		return 0x82116C74;
		  /* 82116C74h */ case    1:  		/* lwz R11, <#[R27 + 12]> */
		/* 82116C74h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82116C74h case    1:*/		return 0x82116C78;
		  /* 82116C78h */ case    2:  		/* cmplw CR6, R11, R30 */
		/* 82116C78h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82116C78h case    2:*/		return 0x82116C7C;
		  /* 82116C7Ch */ case    3:  		/* bc 4, CR6_GT, 56 */
		/* 82116C7Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x82116CB4;  }
		/* 82116C7Ch case    3:*/		return 0x82116C80;
		  /* 82116C80h */ case    4:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82116C80h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82116C80h case    4:*/		return 0x82116C84;
		  /* 82116C84h */ case    5:  		/* lwz R10, <#[R27 + 24]> */
		/* 82116C84h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 82116C84h case    5:*/		return 0x82116C88;
		  /* 82116C88h */ case    6:  		/* addi R11, R11, -1 */
		/* 82116C88h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82116C88h case    6:*/		return 0x82116C8C;
		  /* 82116C8Ch */ case    7:  		/* stw R11, <#[R27 + 12]> */
		/* 82116C8Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82116C8Ch case    7:*/		return 0x82116C90;
		  /* 82116C90h */ case    8:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 82116C90h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 82116C90h case    8:*/		return 0x82116C94;
		  /* 82116C94h */ case    9:  		/* lwzx R31, <#[R9 + R10]> */
		/* 82116C94h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82116C94h case    9:*/		return 0x82116C98;
		  /* 82116C98h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 82116C98h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82116C98h case   10:*/		return 0x82116C9C;
		  /* 82116C9Ch */ case   11:  		/* bc 12, CR6_EQ, -40 */
		/* 82116C9Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82116C74;  }
		/* 82116C9Ch case   11:*/		return 0x82116CA0;
		  /* 82116CA0h */ case   12:  		/* mr R3, R31 */
		/* 82116CA0h case   12:*/		regs.R3 = regs.R31;
		/* 82116CA0h case   12:*/		return 0x82116CA4;
		  /* 82116CA4h */ case   13:  		/* bl 1074972 */
		/* 82116CA4h case   13:*/		regs.LR = 0x82116CA8; return 0x8221D3C0;
		/* 82116CA4h case   13:*/		return 0x82116CA8;
		  /* 82116CA8h */ case   14:  		/* mr R3, R31 */
		/* 82116CA8h case   14:*/		regs.R3 = regs.R31;
		/* 82116CA8h case   14:*/		return 0x82116CAC;
		  /* 82116CACh */ case   15:  		/* bl -108220 */
		/* 82116CACh case   15:*/		regs.LR = 0x82116CB0; return 0x820FC5F0;
		/* 82116CACh case   15:*/		return 0x82116CB0;
		  /* 82116CB0h */ case   16:  		/* b -60 */
		/* 82116CB0h case   16:*/		return 0x82116C74;
		/* 82116CB0h case   16:*/		return 0x82116CB4;
	}
	return 0x82116CB4;
} // Block from 82116C70h-82116CB4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82116CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116CB4);
		  /* 82116CB4h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 82116CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82116CB4h case    0:*/		return 0x82116CB8;
	}
	return 0x82116CB8;
} // Block from 82116CB4h-82116CB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82116CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116CB8);
		  /* 82116CB8h */ case    0:  		/* addi R29, R29, 1 */
		/* 82116CB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82116CB8h case    0:*/		return 0x82116CBC;
		  /* 82116CBCh */ case    1:  		/* addi R17, R17, 4 */
		/* 82116CBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x4);
		/* 82116CBCh case    1:*/		return 0x82116CC0;
		  /* 82116CC0h */ case    2:  		/* stw R29, <#[R1 + 80]> */
		/* 82116CC0h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82116CC0h case    2:*/		return 0x82116CC4;
		  /* 82116CC4h */ case    3:  		/* cmplw CR6, R29, R15 */
		/* 82116CC4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R15);
		/* 82116CC4h case    3:*/		return 0x82116CC8;
		  /* 82116CC8h */ case    4:  		/* bc 12, CR6_LT, -1344 */
		/* 82116CC8h case    4:*/		if ( regs.CR[6].lt ) { return 0x82116788;  }
		/* 82116CC8h case    4:*/		return 0x82116CCC;
		  /* 82116CCCh */ case    5:  		/* b 856 */
		/* 82116CCCh case    5:*/		return 0x82117024;
		/* 82116CCCh case    5:*/		return 0x82116CD0;
	}
	return 0x82116CD0;
} // Block from 82116CB8h-82116CD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82116CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116CD0);
		  /* 82116CD0h */ case    0:  		/* li R3, 116 */
		/* 82116CD0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x74);
		/* 82116CD0h case    0:*/		return 0x82116CD4;
		  /* 82116CD4h */ case    1:  		/* bl -108348 */
		/* 82116CD4h case    1:*/		regs.LR = 0x82116CD8; return 0x820FC598;
		/* 82116CD4h case    1:*/		return 0x82116CD8;
		  /* 82116CD8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82116CD8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82116CD8h case    2:*/		return 0x82116CDC;
		  /* 82116CDCh */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82116CDCh case    3:*/		if ( regs.CR[0].eq ) { return 0x82116CEC;  }
		/* 82116CDCh case    3:*/		return 0x82116CE0;
		  /* 82116CE0h */ case    4:  		/* bl -110144 */
		/* 82116CE0h case    4:*/		regs.LR = 0x82116CE4; return 0x820FBEA0;
		/* 82116CE0h case    4:*/		return 0x82116CE4;
		  /* 82116CE4h */ case    5:  		/* mr R31, R3 */
		/* 82116CE4h case    5:*/		regs.R31 = regs.R3;
		/* 82116CE4h case    5:*/		return 0x82116CE8;
		  /* 82116CE8h */ case    6:  		/* b 8 */
		/* 82116CE8h case    6:*/		return 0x82116CF0;
		/* 82116CE8h case    6:*/		return 0x82116CEC;
	}
	return 0x82116CEC;
} // Block from 82116CD0h-82116CECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82116CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116CEC);
		  /* 82116CECh */ case    0:  		/* li R31, 0 */
		/* 82116CECh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82116CECh case    0:*/		return 0x82116CF0;
	}
	return 0x82116CF0;
} // Block from 82116CECh-82116CF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82116CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116CF0);
		  /* 82116CF0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82116CF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82116CF0h case    0:*/		return 0x82116CF4;
		  /* 82116CF4h */ case    1:  		/* bc 12, CR6_EQ, 872 */
		/* 82116CF4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211705C;  }
		/* 82116CF4h case    1:*/		return 0x82116CF8;
		  /* 82116CF8h */ case    2:  		/* lwz R4, <#[R21]> */
		/* 82116CF8h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000000) );
		/* 82116CF8h case    2:*/		return 0x82116CFC;
		  /* 82116CFCh */ case    3:  		/* li R7, 0 */
		/* 82116CFCh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82116CFCh case    3:*/		return 0x82116D00;
		  /* 82116D00h */ case    4:  		/* mr R6, R24 */
		/* 82116D00h case    4:*/		regs.R6 = regs.R24;
		/* 82116D00h case    4:*/		return 0x82116D04;
		  /* 82116D04h */ case    5:  		/* rlwimi R4, R24, 0, 12, 31 */
		/* 82116D04h case    5:*/		cpu::op::rlwimi<0,0,12,31>(regs,&regs.R4,regs.R24);
		/* 82116D04h case    5:*/		return 0x82116D08;
		  /* 82116D08h */ case    6:  		/* mr R5, R18 */
		/* 82116D08h case    6:*/		regs.R5 = regs.R18;
		/* 82116D08h case    6:*/		return 0x82116D0C;
		  /* 82116D0Ch */ case    7:  		/* mr R3, R31 */
		/* 82116D0Ch case    7:*/		regs.R3 = regs.R31;
		/* 82116D0Ch case    7:*/		return 0x82116D10;
		  /* 82116D10h */ case    8:  		/* bl -108256 */
		/* 82116D10h case    8:*/		regs.LR = 0x82116D14; return 0x820FC630;
		/* 82116D10h case    8:*/		return 0x82116D14;
		  /* 82116D14h */ case    9:  		/* or. R29, R3, R3 */
		/* 82116D14h case    9:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82116D14h case    9:*/		return 0x82116D18;
		  /* 82116D18h */ case   10:  		/* bc 12, CR0_LT, 848 */
		/* 82116D18h case   10:*/		if ( regs.CR[0].lt ) { return 0x82117068;  }
		/* 82116D18h case   10:*/		return 0x82116D1C;
		  /* 82116D1Ch */ case   11:  		/* mr R4, R21 */
		/* 82116D1Ch case   11:*/		regs.R4 = regs.R21;
		/* 82116D1Ch case   11:*/		return 0x82116D20;
		  /* 82116D20h */ case   12:  		/* mr R3, R31 */
		/* 82116D20h case   12:*/		regs.R3 = regs.R31;
		/* 82116D20h case   12:*/		return 0x82116D24;
		  /* 82116D24h */ case   13:  		/* bl -110132 */
		/* 82116D24h case   13:*/		regs.LR = 0x82116D28; return 0x820FBEF0;
		/* 82116D24h case   13:*/		return 0x82116D28;
		  /* 82116D28h */ case   14:  		/* or. R29, R3, R3 */
		/* 82116D28h case   14:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82116D28h case   14:*/		return 0x82116D2C;
		  /* 82116D2Ch */ case   15:  		/* bc 12, CR0_LT, 828 */
		/* 82116D2Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x82117068;  }
		/* 82116D2Ch case   15:*/		return 0x82116D30;
		  /* 82116D30h */ case   16:  		/* cmplw CR6, R19, R20 */
		/* 82116D30h case   16:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R20);
		/* 82116D30h case   16:*/		return 0x82116D34;
		  /* 82116D34h */ case   17:  		/* li R26, 0 */
		/* 82116D34h case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82116D34h case   17:*/		return 0x82116D38;
		  /* 82116D38h */ case   18:  		/* bc 12, CR6_EQ, 132 */
		/* 82116D38h case   18:*/		if ( regs.CR[6].eq ) { return 0x82116DBC;  }
		/* 82116D38h case   18:*/		return 0x82116D3C;
		  /* 82116D3Ch */ case   19:  		/* lwz R11, <#[R27 + 8]> */
		/* 82116D3Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82116D3Ch case   19:*/		return 0x82116D40;
		  /* 82116D40h */ case   20:  		/* mr R7, R26 */
		/* 82116D40h case   20:*/		regs.R7 = regs.R26;
		/* 82116D40h case   20:*/		return 0x82116D44;
		  /* 82116D44h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82116D44h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82116D44h case   21:*/		return 0x82116D48;
		  /* 82116D48h */ case   22:  		/* bc 4, CR6_GT, 88 */
		/* 82116D48h case   22:*/		if ( !regs.CR[6].gt ) { return 0x82116DA0;  }
		/* 82116D48h case   22:*/		return 0x82116D4C;
		  /* 82116D4Ch */ case   23:  		/* mr R8, R26 */
		/* 82116D4Ch case   23:*/		regs.R8 = regs.R26;
		/* 82116D4Ch case   23:*/		return 0x82116D50;
		  /* 82116D50h */ case   24:  		/* lwz R11, <#[R27 + 20]> */
		/* 82116D50h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 82116D50h case   24:*/		return 0x82116D54;
		  /* 82116D54h */ case   25:  		/* lwz R10, <#[R1 + 208]> */
		/* 82116D54h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000D0) );
		/* 82116D54h case   25:*/		return 0x82116D58;
		  /* 82116D58h */ case   26:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82116D58h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82116D58h case   26:*/		return 0x82116D5C;
		  /* 82116D5Ch */ case   27:  		/* lwz R9, <#[R11 + 4]> */
		/* 82116D5Ch case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82116D5Ch case   27:*/		return 0x82116D60;
		  /* 82116D60h */ case   28:  		/* cmplw CR6, R10, R9 */
		/* 82116D60h case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82116D60h case   28:*/		return 0x82116D64;
		  /* 82116D64h */ case   29:  		/* bc 4, CR6_EQ, 40 */
		/* 82116D64h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82116D8C;  }
		/* 82116D64h case   29:*/		return 0x82116D68;
		  /* 82116D68h */ case   30:  		/* lwz R10, <#[R11 + 12]> */
		/* 82116D68h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82116D68h case   30:*/		return 0x82116D6C;
		  /* 82116D6Ch */ case   31:  		/* cmplw CR6, R19, R10 */
		/* 82116D6Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R10);
		/* 82116D6Ch case   31:*/		return 0x82116D70;
		  /* 82116D70h */ case   32:  		/* bc 4, CR6_EQ, 28 */
		/* 82116D70h case   32:*/		if ( !regs.CR[6].eq ) { return 0x82116D8C;  }
		/* 82116D70h case   32:*/		return 0x82116D74;
		  /* 82116D74h */ case   33:  		/* rlwinm R10, R20, 2, 0, 29 */
		/* 82116D74h case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R20);
		/* 82116D74h case   33:*/		return 0x82116D78;
		  /* 82116D78h */ case   34:  		/* lwz R9, <#[R11 + 16]> */
		/* 82116D78h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82116D78h case   34:*/		return 0x82116D7C;
		  /* 82116D7Ch */ case   35:  		/* stw R20, <#[R11 + 12]> */
		/* 82116D7Ch case   35:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x0000000C) );
		/* 82116D7Ch case   35:*/		return 0x82116D80;
		  /* 82116D80h */ case   36:  		/* lwzx R10, <#[R10 + R16]> */
		/* 82116D80h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R16 + 0x00000000) );
		/* 82116D80h case   36:*/		return 0x82116D84;
		  /* 82116D84h */ case   37:  		/* add R10, R10, R9 */
		/* 82116D84h case   37:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82116D84h case   37:*/		return 0x82116D88;
		  /* 82116D88h */ case   38:  		/* stw R10, <#[R11 + 16]> */
		/* 82116D88h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82116D88h case   38:*/		return 0x82116D8C;
	}
	return 0x82116D8C;
} // Block from 82116CF0h-82116D8Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 82116D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116D8C);
		  /* 82116D8Ch */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 82116D8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 82116D8Ch case    0:*/		return 0x82116D90;
		  /* 82116D90h */ case    1:  		/* addi R7, R7, 1 */
		/* 82116D90h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82116D90h case    1:*/		return 0x82116D94;
		  /* 82116D94h */ case    2:  		/* addi R8, R8, 4 */
		/* 82116D94h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82116D94h case    2:*/		return 0x82116D98;
		  /* 82116D98h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 82116D98h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 82116D98h case    3:*/		return 0x82116D9C;
		  /* 82116D9Ch */ case    4:  		/* bc 12, CR6_LT, -76 */
		/* 82116D9Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82116D50;  }
		/* 82116D9Ch case    4:*/		return 0x82116DA0;
	}
	return 0x82116DA0;
} // Block from 82116D8Ch-82116DA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82116DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116DA0);
		  /* 82116DA0h */ case    0:  		/* rlwinm R10, R20, 2, 0, 29 */
		/* 82116DA0h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R20);
		/* 82116DA0h case    0:*/		return 0x82116DA4;
		  /* 82116DA4h */ case    1:  		/* rlwinm R11, R19, 2, 0, 29 */
		/* 82116DA4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R19);
		/* 82116DA4h case    1:*/		return 0x82116DA8;
		  /* 82116DA8h */ case    2:  		/* lwzx R8, <#[R10 + R16]> */
		/* 82116DA8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R16 + 0x00000000) );
		/* 82116DA8h case    2:*/		return 0x82116DAC;
		  /* 82116DACh */ case    3:  		/* lwzx R9, <#[R11 + R16]> */
		/* 82116DACh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 82116DACh case    3:*/		return 0x82116DB0;
		  /* 82116DB0h */ case    4:  		/* add R9, R9, R8 */
		/* 82116DB0h case    4:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82116DB0h case    4:*/		return 0x82116DB4;
		  /* 82116DB4h */ case    5:  		/* stwx R9, <#[R10 + R16]> */
		/* 82116DB4h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R16 + 0x00000000) );
		/* 82116DB4h case    5:*/		return 0x82116DB8;
		  /* 82116DB8h */ case    6:  		/* stwx R26, <#[R11 + R16]> */
		/* 82116DB8h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 82116DB8h case    6:*/		return 0x82116DBC;
	}
	return 0x82116DBC;
} // Block from 82116DA0h-82116DBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82116DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116DBC);
		  /* 82116DBCh */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 82116DBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82116DBCh case    0:*/		return 0x82116DC0;
		  /* 82116DC0h */ case    1:  		/* lwz R4, <#[R30 + 16]> */
		/* 82116DC0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 82116DC0h case    1:*/		return 0x82116DC4;
		  /* 82116DC4h */ case    2:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82116DC4h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82116DC4h case    2:*/		return 0x82116DC8;
		  /* 82116DC8h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 82116DC8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82116DC8h case    3:*/		return 0x82116DCC;
		  /* 82116DCCh */ case    4:  		/* bl -545820 */
		/* 82116DCCh case    4:*/		regs.LR = 0x82116DD0; return 0x820919B0;
		/* 82116DCCh case    4:*/		return 0x82116DD0;
		  /* 82116DD0h */ case    5:  		/* lwz R11, <#[R30 + 12]> */
		/* 82116DD0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82116DD0h case    5:*/		return 0x82116DD4;
		  /* 82116DD4h */ case    6:  		/* lwz R10, <#[R31 + 16]> */
		/* 82116DD4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82116DD4h case    6:*/		return 0x82116DD8;
		  /* 82116DD8h */ case    7:  		/* lwz R9, <#[R21 + 12]> */
		/* 82116DD8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x0000000C) );
		/* 82116DD8h case    7:*/		return 0x82116DDC;
		  /* 82116DDCh */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82116DDCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82116DDCh case    8:*/		return 0x82116DE0;
		  /* 82116DE0h */ case    9:  		/* lwz R4, <#[R21 + 16]> */
		/* 82116DE0h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000010) );
		/* 82116DE0h case    9:*/		return 0x82116DE4;
		  /* 82116DE4h */ case   10:  		/* rlwinm R5, R9, 2, 0, 29 */
		/* 82116DE4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R9);
		/* 82116DE4h case   10:*/		return 0x82116DE8;
		  /* 82116DE8h */ case   11:  		/* add R3, R11, R10 */
		/* 82116DE8h case   11:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82116DE8h case   11:*/		return 0x82116DEC;
		  /* 82116DECh */ case   12:  		/* bl -545852 */
		/* 82116DECh case   12:*/		regs.LR = 0x82116DF0; return 0x820919B0;
		/* 82116DECh case   12:*/		return 0x82116DF0;
		  /* 82116DF0h */ case   13:  		/* lwz R10, <#[R21]> */
		/* 82116DF0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 82116DF0h case   13:*/		return 0x82116DF4;
		  /* 82116DF4h */ case   14:  		/* lis R11, 4096 */
		/* 82116DF4h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0x1000);
		/* 82116DF4h case   14:*/		return 0x82116DF8;
		  /* 82116DF8h */ case   15:  		/* rlwinm R10, R10, 0, 0, 3 */
		/* 82116DF8h case   15:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R10,regs.R10);
		/* 82116DF8h case   15:*/		return 0x82116DFC;
		  /* 82116DFCh */ case   16:  		/* cmplw CR6, R10, R11 */
		/* 82116DFCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82116DFCh case   16:*/		return 0x82116E00;
		  /* 82116E00h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 82116E00h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82116E14;  }
		/* 82116E00h case   17:*/		return 0x82116E04;
		  /* 82116E04h */ case   18:  		/* rlwinm R5, R24, 2, 0, 29 */
		/* 82116E04h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R24);
		/* 82116E04h case   18:*/		return 0x82116E08;
		  /* 82116E08h */ case   19:  		/* lwz R3, <#[R31 + 8]> */
		/* 82116E08h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82116E08h case   19:*/		return 0x82116E0C;
		  /* 82116E0Ch */ case   20:  		/* addi R4, R1, 96 */
		/* 82116E0Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82116E0Ch case   20:*/		return 0x82116E10;
		  /* 82116E10h */ case   21:  		/* bl -545888 */
		/* 82116E10h case   21:*/		regs.LR = 0x82116E14; return 0x820919B0;
		/* 82116E10h case   21:*/		return 0x82116E14;
	}
	return 0x82116E14;
} // Block from 82116DBCh-82116E14h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82116E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116E14);
		  /* 82116E14h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 82116E14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 82116E14h case    0:*/		return 0x82116E18;
		  /* 82116E18h */ case    1:  		/* lis R10, 8192 */
		/* 82116E18h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x2000);
		/* 82116E18h case    1:*/		return 0x82116E1C;
		  /* 82116E1Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 3 */
		/* 82116E1Ch case    2:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R11,regs.R11);
		/* 82116E1Ch case    2:*/		return 0x82116E20;
		  /* 82116E20h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82116E20h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82116E20h case    3:*/		return 0x82116E24;
		  /* 82116E24h */ case    4:  		/* bc 4, CR6_EQ, 64 */
		/* 82116E24h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82116E64;  }
		/* 82116E24h case    4:*/		return 0x82116E28;
		  /* 82116E28h */ case    5:  		/* cmpwi CR6, R28, 0 */
		/* 82116E28h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82116E28h case    5:*/		return 0x82116E2C;
		  /* 82116E2Ch */ case    6:  		/* addi R4, R1, 96 */
		/* 82116E2Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82116E2Ch case    6:*/		return 0x82116E30;
		  /* 82116E30h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 82116E30h case    7:*/		if ( regs.CR[6].eq ) { return 0x82116E38;  }
		/* 82116E30h case    7:*/		return 0x82116E34;
		  /* 82116E34h */ case    8:  		/* addi R4, R1, 160 */
		/* 82116E34h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 82116E34h case    8:*/		return 0x82116E38;
	}
	return 0x82116E38;
} // Block from 82116E14h-82116E38h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82116E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116E38);
		  /* 82116E38h */ case    0:  		/* rlwinm R30, R24, 2, 0, 29 */
		/* 82116E38h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R24);
		/* 82116E38h case    0:*/		return 0x82116E3C;
		  /* 82116E3Ch */ case    1:  		/* lwz R3, <#[R31 + 8]> */
		/* 82116E3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82116E3Ch case    1:*/		return 0x82116E40;
		  /* 82116E40h */ case    2:  		/* mr R5, R30 */
		/* 82116E40h case    2:*/		regs.R5 = regs.R30;
		/* 82116E40h case    2:*/		return 0x82116E44;
		  /* 82116E44h */ case    3:  		/* bl -545940 */
		/* 82116E44h case    3:*/		regs.LR = 0x82116E48; return 0x820919B0;
		/* 82116E44h case    3:*/		return 0x82116E48;
		  /* 82116E48h */ case    4:  		/* cmpwi CR6, R28, 0 */
		/* 82116E48h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82116E48h case    4:*/		return 0x82116E4C;
		  /* 82116E4Ch */ case    5:  		/* addi R4, R1, 128 */
		/* 82116E4Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82116E4Ch case    5:*/		return 0x82116E50;
		  /* 82116E50h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 82116E50h case    6:*/		if ( regs.CR[6].eq ) { return 0x82116E58;  }
		/* 82116E50h case    6:*/		return 0x82116E54;
		  /* 82116E54h */ case    7:  		/* addi R4, R1, 192 */
		/* 82116E54h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82116E54h case    7:*/		return 0x82116E58;
	}
	return 0x82116E58;
} // Block from 82116E38h-82116E58h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82116E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116E58);
		  /* 82116E58h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82116E58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82116E58h case    0:*/		return 0x82116E5C;
		  /* 82116E5Ch */ case    1:  		/* add R3, R30, R11 */
		/* 82116E5Ch case    1:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 82116E5Ch case    1:*/		return 0x82116E60;
		  /* 82116E60h */ case    2:  		/* b 72 */
		/* 82116E60h case    2:*/		return 0x82116EA8;
		/* 82116E60h case    2:*/		return 0x82116E64;
	}
	return 0x82116E64;
} // Block from 82116E58h-82116E64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82116E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116E64);
		  /* 82116E64h */ case    0:  		/* lis R10, 12288 */
		/* 82116E64h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x3000);
		/* 82116E64h case    0:*/		return 0x82116E68;
		  /* 82116E68h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82116E68h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82116E68h case    1:*/		return 0x82116E6C;
		  /* 82116E6Ch */ case    2:  		/* bc 4, CR6_EQ, 68 */
		/* 82116E6Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82116EB0;  }
		/* 82116E6Ch case    2:*/		return 0x82116E70;
		  /* 82116E70h */ case    3:  		/* rlwinm R30, R24, 2, 0, 29 */
		/* 82116E70h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R24);
		/* 82116E70h case    3:*/		return 0x82116E74;
		  /* 82116E74h */ case    4:  		/* lwz R3, <#[R31 + 8]> */
		/* 82116E74h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 82116E74h case    4:*/		return 0x82116E78;
		  /* 82116E78h */ case    5:  		/* addi R4, R1, 96 */
		/* 82116E78h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82116E78h case    5:*/		return 0x82116E7C;
		  /* 82116E7Ch */ case    6:  		/* mr R5, R30 */
		/* 82116E7Ch case    6:*/		regs.R5 = regs.R30;
		/* 82116E7Ch case    6:*/		return 0x82116E80;
		  /* 82116E80h */ case    7:  		/* bl -546000 */
		/* 82116E80h case    7:*/		regs.LR = 0x82116E84; return 0x820919B0;
		/* 82116E80h case    7:*/		return 0x82116E84;
		  /* 82116E84h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 82116E84h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82116E84h case    8:*/		return 0x82116E88;
		  /* 82116E88h */ case    9:  		/* mr R5, R30 */
		/* 82116E88h case    9:*/		regs.R5 = regs.R30;
		/* 82116E88h case    9:*/		return 0x82116E8C;
		  /* 82116E8Ch */ case   10:  		/* add R3, R30, R11 */
		/* 82116E8Ch case   10:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 82116E8Ch case   10:*/		return 0x82116E90;
		  /* 82116E90h */ case   11:  		/* addi R4, R1, 128 */
		/* 82116E90h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82116E90h case   11:*/		return 0x82116E94;
		  /* 82116E94h */ case   12:  		/* bl -546020 */
		/* 82116E94h case   12:*/		regs.LR = 0x82116E98; return 0x820919B0;
		/* 82116E94h case   12:*/		return 0x82116E98;
		  /* 82116E98h */ case   13:  		/* lwz R10, <#[R31 + 8]> */
		/* 82116E98h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82116E98h case   13:*/		return 0x82116E9C;
		  /* 82116E9Ch */ case   14:  		/* rlwinm R11, R24, 3, 0, 28 */
		/* 82116E9Ch case   14:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R24);
		/* 82116E9Ch case   14:*/		return 0x82116EA0;
		  /* 82116EA0h */ case   15:  		/* addi R4, R1, 224 */
		/* 82116EA0h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xE0);
		/* 82116EA0h case   15:*/		return 0x82116EA4;
		  /* 82116EA4h */ case   16:  		/* add R3, R11, R10 */
		/* 82116EA4h case   16:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82116EA4h case   16:*/		return 0x82116EA8;
	}
	return 0x82116EA8;
} // Block from 82116E64h-82116EA8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82116EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116EA8);
		  /* 82116EA8h */ case    0:  		/* mr R5, R30 */
		/* 82116EA8h case    0:*/		regs.R5 = regs.R30;
		/* 82116EA8h case    0:*/		return 0x82116EAC;
		  /* 82116EACh */ case    1:  		/* bl -546044 */
		/* 82116EACh case    1:*/		regs.LR = 0x82116EB0; return 0x820919B0;
		/* 82116EACh case    1:*/		return 0x82116EB0;
	}
	return 0x82116EB0;
} // Block from 82116EA8h-82116EB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82116EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116EB0);
		  /* 82116EB0h */ case    0:  		/* lwz R28, <#[R1 + 116]> */
		/* 82116EB0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 82116EB0h case    0:*/		return 0x82116EB4;
		  /* 82116EB4h */ case    1:  		/* li R7, 1 */
		/* 82116EB4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82116EB4h case    1:*/		return 0x82116EB8;
		  /* 82116EB8h */ case    2:  		/* mr R6, R24 */
		/* 82116EB8h case    2:*/		regs.R6 = regs.R24;
		/* 82116EB8h case    2:*/		return 0x82116EBC;
		  /* 82116EBCh */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 82116EBCh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82116EBCh case    3:*/		return 0x82116EC0;
		  /* 82116EC0h */ case    4:  		/* addi R5, R1, 240 */
		/* 82116EC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 82116EC0h case    4:*/		return 0x82116EC4;
		  /* 82116EC4h */ case    5:  		/* mr R3, R27 */
		/* 82116EC4h case    5:*/		regs.R3 = regs.R27;
		/* 82116EC4h case    5:*/		return 0x82116EC8;
		  /* 82116EC8h */ case    6:  		/* lwz R11, <#[R28]> */
		/* 82116EC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82116EC8h case    6:*/		return 0x82116ECC;
		  /* 82116ECCh */ case    7:  		/* lwz R10, <#[R28 + 4]> */
		/* 82116ECCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 82116ECCh case    7:*/		return 0x82116ED0;
		  /* 82116ED0h */ case    8:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 82116ED0h case    8:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 82116ED0h case    8:*/		return 0x82116ED4;
		  /* 82116ED4h */ case    9:  		/* divwu R29, R10, R11 */
		/* 82116ED4h case    9:*/		cpu::op::divwu<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 82116ED4h case    9:*/		return 0x82116ED8;
		  /* 82116ED8h */ case   10:  		/* twi 6, R11, 0 */
		/* 82116ED8h case   10:*/		cpu::op::tw<6>(regs, 0x82116ED8, regs.R11, 0x00000000);
		/* 82116ED8h case   10:*/		return 0x82116EDC;
		  /* 82116EDCh */ case   11:  		/* bl -89572 */
		/* 82116EDCh case   11:*/		regs.LR = 0x82116EE0; return 0x821010F8;
		/* 82116EDCh case   11:*/		return 0x82116EE0;
		  /* 82116EE0h */ case   12:  		/* mr R30, R26 */
		/* 82116EE0h case   12:*/		regs.R30 = regs.R26;
		/* 82116EE0h case   12:*/		return 0x82116EE4;
		  /* 82116EE4h */ case   13:  		/* cmplwi CR6, R29, 0 */
		/* 82116EE4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82116EE4h case   13:*/		return 0x82116EE8;
		  /* 82116EE8h */ case   14:  		/* bc 12, CR6_EQ, 96 */
		/* 82116EE8h case   14:*/		if ( regs.CR[6].eq ) { return 0x82116F48;  }
		/* 82116EE8h case   14:*/		return 0x82116EEC;
		  /* 82116EECh */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 82116EECh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82116EECh case   15:*/		return 0x82116EF0;
		  /* 82116EF0h */ case   16:  		/* cmplwi CR6, R24, 0 */
		/* 82116EF0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82116EF0h case   16:*/		return 0x82116EF4;
		  /* 82116EF4h */ case   17:  		/* lwz R10, <#[R31 + 8]> */
		/* 82116EF4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82116EF4h case   17:*/		return 0x82116EF8;
		  /* 82116EF8h */ case   18:  		/* mullw R11, R30, R11 */
		/* 82116EF8h case   18:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 82116EF8h case   18:*/		return 0x82116EFC;
		  /* 82116EFCh */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82116EFCh case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82116EFCh case   19:*/		return 0x82116F00;
		  /* 82116F00h */ case   20:  		/* add R3, R11, R10 */
		/* 82116F00h case   20:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82116F00h case   20:*/		return 0x82116F04;
		  /* 82116F04h */ case   21:  		/* bc 12, CR6_EQ, 56 */
		/* 82116F04h case   21:*/		if ( regs.CR[6].eq ) { return 0x82116F3C;  }
		/* 82116F04h case   21:*/		return 0x82116F08;
		  /* 82116F08h */ case   22:  		/* mr R11, R26 */
		/* 82116F08h case   22:*/		regs.R11 = regs.R26;
		/* 82116F08h case   22:*/		return 0x82116F0C;
		  /* 82116F0Ch */ case   23:  		/* mtspr CTR, R24 */
		/* 82116F0Ch case   23:*/		regs.CTR = regs.R24;
		/* 82116F0Ch case   23:*/		return 0x82116F10;
		  /* 82116F10h */ case   24:  		/* addi R10, R1, 240 */
		/* 82116F10h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 82116F10h case   24:*/		return 0x82116F14;
		  /* 82116F14h */ case   25:  		/* addi R9, R1, 256 */
		/* 82116F14h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x100);
		/* 82116F14h case   25:*/		return 0x82116F18;
		  /* 82116F18h */ case   26:  		/* lwzx R10, <#[R11 + R10]> */
		/* 82116F18h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82116F18h case   26:*/		return 0x82116F1C;
		  /* 82116F1Ch */ case   27:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82116F1Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82116F1Ch case   27:*/		return 0x82116F20;
		  /* 82116F20h */ case   28:  		/* lwzx R10, <#[R10 + R3]> */
		/* 82116F20h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82116F20h case   28:*/		return 0x82116F24;
		  /* 82116F24h */ case   29:  		/* stwx R10, <#[R11 + R9]> */
		/* 82116F24h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82116F24h case   29:*/		return 0x82116F28;
		  /* 82116F28h */ case   30:  		/* addi R11, R11, 4 */
		/* 82116F28h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82116F28h case   30:*/		return 0x82116F2C;
		  /* 82116F2Ch */ case   31:  		/* bc 16, CR0_LT, -28 */
		/* 82116F2Ch case   31:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82116F10;  }
		/* 82116F2Ch case   31:*/		return 0x82116F30;
		  /* 82116F30h */ case   32:  		/* addi R4, R1, 256 */
		/* 82116F30h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x100);
		/* 82116F30h case   32:*/		return 0x82116F34;
		  /* 82116F34h */ case   33:  		/* rlwinm R5, R24, 2, 0, 29 */
		/* 82116F34h case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R24);
		/* 82116F34h case   33:*/		return 0x82116F38;
		  /* 82116F38h */ case   34:  		/* bl -545024 */
		/* 82116F38h case   34:*/		regs.LR = 0x82116F3C; return 0x82091E38;
		/* 82116F38h case   34:*/		return 0x82116F3C;
	}
	return 0x82116F3C;
} // Block from 82116EB0h-82116F3Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 82116F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116F3C);
		  /* 82116F3Ch */ case    0:  		/* addi R30, R30, 1 */
		/* 82116F3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82116F3Ch case    0:*/		return 0x82116F40;
		  /* 82116F40h */ case    1:  		/* cmplw CR6, R30, R29 */
		/* 82116F40h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 82116F40h case    1:*/		return 0x82116F44;
		  /* 82116F44h */ case    2:  		/* bc 12, CR6_LT, -88 */
		/* 82116F44h case    2:*/		if ( regs.CR[6].lt ) { return 0x82116EEC;  }
		/* 82116F44h case    2:*/		return 0x82116F48;
	}
	return 0x82116F48;
} // Block from 82116F3Ch-82116F48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82116F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116F48);
		  /* 82116F48h */ case    0:  		/* lwz R30, <#[R1 + 176]> */
		/* 82116F48h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000B0) );
		/* 82116F48h case    0:*/		return 0x82116F4C;
		  /* 82116F4Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 82116F4Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82116F4Ch case    1:*/		return 0x82116F50;
		  /* 82116F50h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82116F50h case    2:*/		if ( regs.CR[6].eq ) { return 0x82116F64;  }
		/* 82116F50h case    2:*/		return 0x82116F54;
		  /* 82116F54h */ case    3:  		/* mr R3, R30 */
		/* 82116F54h case    3:*/		regs.R3 = regs.R30;
		/* 82116F54h case    3:*/		return 0x82116F58;
		  /* 82116F58h */ case    4:  		/* bl 1074280 */
		/* 82116F58h case    4:*/		regs.LR = 0x82116F5C; return 0x8221D3C0;
		/* 82116F58h case    4:*/		return 0x82116F5C;
		  /* 82116F5Ch */ case    5:  		/* mr R3, R30 */
		/* 82116F5Ch case    5:*/		regs.R3 = regs.R30;
		/* 82116F5Ch case    5:*/		return 0x82116F60;
		  /* 82116F60h */ case    6:  		/* bl -108912 */
		/* 82116F60h case    6:*/		regs.LR = 0x82116F64; return 0x820FC5F0;
		/* 82116F60h case    6:*/		return 0x82116F64;
	}
	return 0x82116F64;
} // Block from 82116F48h-82116F64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82116F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82116F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82116F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82116F64);
		  /* 82116F64h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82116F64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82116F64h case    0:*/		return 0x82116F68;
		  /* 82116F68h */ case    1:  		/* lwz R9, <#[R27 + 24]> */
		/* 82116F68h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000018) );
		/* 82116F68h case    1:*/		return 0x82116F6C;
		  /* 82116F6Ch */ case    2:  		/* rlwinm R30, R11, 2, 0, 29 */
		/* 82116F6Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R11);
		/* 82116F6Ch case    2:*/		return 0x82116F70;
		  /* 82116F70h */ case    3:  		/* lwz R10, <#[R1 + 112]> */
		/* 82116F70h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 82116F70h case    3:*/		return 0x82116F74;
		  /* 82116F74h */ case    4:  		/* stwx R31, <#[R9 + R30]> */
		/* 82116F74h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 82116F74h case    4:*/		return 0x82116F78;
		  /* 82116F78h */ case    5:  		/* stw R26, <#[R28 + 4]> */
		/* 82116F78h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R28 + 0x00000004) );
		/* 82116F78h case    5:*/		return 0x82116F7C;
		  /* 82116F7Ch */ case    6:  		/* stw R26, <#[R28]> */
		/* 82116F7Ch case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R28 + 0x00000000) );
		/* 82116F7Ch case    6:*/		return 0x82116F80;
		  /* 82116F80h */ case    7:  		/* stw R26, <#[R28 + 12]> */
		/* 82116F80h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R28 + 0x0000000C) );
		/* 82116F80h case    7:*/		return 0x82116F84;
		  /* 82116F84h */ case    8:  		/* lwz R11, <#[R27 + 12]> */
		/* 82116F84h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82116F84h case    8:*/		return 0x82116F88;
		  /* 82116F88h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 82116F88h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82116F88h case    9:*/		return 0x82116F8C;
		  /* 82116F8Ch */ case   10:  		/* bc 4, CR6_GT, 128 */
		/* 82116F8Ch case   10:*/		if ( !regs.CR[6].gt ) { return 0x8211700C;  }
		/* 82116F8Ch case   10:*/		return 0x82116F90;
		  /* 82116F90h */ case   11:  		/* subf R28, R10, R11 */
		/* 82116F90h case   11:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 82116F90h case   11:*/		return 0x82116F94;
		  /* 82116F94h */ case   12:  		/* lis R4, 9345 */
		/* 82116F94h case   12:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82116F94h case   12:*/		return 0x82116F98;
		  /* 82116F98h */ case   13:  		/* rlwinm R29, R28, 2, 0, 29 */
		/* 82116F98h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R28);
		/* 82116F98h case   13:*/		return 0x82116F9C;
		  /* 82116F9Ch */ case   14:  		/* mr R3, R29 */
		/* 82116F9Ch case   14:*/		regs.R3 = regs.R29;
		/* 82116F9Ch case   14:*/		return 0x82116FA0;
		  /* 82116FA0h */ case   15:  		/* bl -585120 */
		/* 82116FA0h case   15:*/		regs.LR = 0x82116FA4; return 0x82088200;
		/* 82116FA0h case   15:*/		return 0x82116FA4;
		  /* 82116FA4h */ case   16:  		/* or. R31, R3, R3 */
		/* 82116FA4h case   16:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82116FA4h case   16:*/		return 0x82116FA8;
		  /* 82116FA8h */ case   17:  		/* bc 12, CR0_EQ, 180 */
		/* 82116FA8h case   17:*/		if ( regs.CR[0].eq ) { return 0x8211705C;  }
		/* 82116FA8h case   17:*/		return 0x82116FAC;
		  /* 82116FACh */ case   18:  		/* lwz R26, <#[R1 + 112]> */
		/* 82116FACh case   18:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 82116FACh case   18:*/		return 0x82116FB0;
		  /* 82116FB0h */ case   19:  		/* mr R5, R29 */
		/* 82116FB0h case   19:*/		regs.R5 = regs.R29;
		/* 82116FB0h case   19:*/		return 0x82116FB4;
		  /* 82116FB4h */ case   20:  		/* lwz R10, <#[R27 + 24]> */
		/* 82116FB4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000018) );
		/* 82116FB4h case   20:*/		return 0x82116FB8;
		  /* 82116FB8h */ case   21:  		/* mr R3, R31 */
		/* 82116FB8h case   21:*/		regs.R3 = regs.R31;
		/* 82116FB8h case   21:*/		return 0x82116FBC;
		  /* 82116FBCh */ case   22:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 82116FBCh case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 82116FBCh case   22:*/		return 0x82116FC0;
		  /* 82116FC0h */ case   23:  		/* add R4, R11, R10 */
		/* 82116FC0h case   23:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 82116FC0h case   23:*/		return 0x82116FC4;
		  /* 82116FC4h */ case   24:  		/* bl -546324 */
		/* 82116FC4h case   24:*/		regs.LR = 0x82116FC8; return 0x820919B0;
		/* 82116FC4h case   24:*/		return 0x82116FC8;
		  /* 82116FC8h */ case   25:  		/* lwz R11, <#[R1 + 80]> */
		/* 82116FC8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82116FC8h case   25:*/		return 0x82116FCC;
		  /* 82116FCCh */ case   26:  		/* add R10, R28, R11 */
		/* 82116FCCh case   26:*/		cpu::op::add<0>(regs,&regs.R10,regs.R28,regs.R11);
		/* 82116FCCh case   26:*/		return 0x82116FD0;
		  /* 82116FD0h */ case   27:  		/* subf R11, R11, R26 */
		/* 82116FD0h case   27:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 82116FD0h case   27:*/		return 0x82116FD4;
		  /* 82116FD4h */ case   28:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82116FD4h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82116FD4h case   28:*/		return 0x82116FD8;
		  /* 82116FD8h */ case   29:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82116FD8h case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82116FD8h case   29:*/		return 0x82116FDC;
		  /* 82116FDCh */ case   30:  		/* lwz R11, <#[R27 + 24]> */
		/* 82116FDCh case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 82116FDCh case   30:*/		return 0x82116FE0;
		  /* 82116FE0h */ case   31:  		/* add R4, R30, R11 */
		/* 82116FE0h case   31:*/		cpu::op::add<0>(regs,&regs.R4,regs.R30,regs.R11);
		/* 82116FE0h case   31:*/		return 0x82116FE4;
		  /* 82116FE4h */ case   32:  		/* add R3, R10, R11 */
		/* 82116FE4h case   32:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82116FE4h case   32:*/		return 0x82116FE8;
		  /* 82116FE8h */ case   33:  		/* bl -544968 */
		/* 82116FE8h case   33:*/		regs.LR = 0x82116FEC; return 0x82091F20;
		/* 82116FE8h case   33:*/		return 0x82116FEC;
		  /* 82116FECh */ case   34:  		/* lwz R11, <#[R27 + 24]> */
		/* 82116FECh case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 82116FECh case   34:*/		return 0x82116FF0;
		  /* 82116FF0h */ case   35:  		/* mr R5, R29 */
		/* 82116FF0h case   35:*/		regs.R5 = regs.R29;
		/* 82116FF0h case   35:*/		return 0x82116FF4;
		  /* 82116FF4h */ case   36:  		/* mr R4, R31 */
		/* 82116FF4h case   36:*/		regs.R4 = regs.R31;
		/* 82116FF4h case   36:*/		return 0x82116FF8;
		  /* 82116FF8h */ case   37:  		/* add R3, R11, R30 */
		/* 82116FF8h case   37:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R30);
		/* 82116FF8h case   37:*/		return 0x82116FFC;
		  /* 82116FFCh */ case   38:  		/* bl -546380 */
		/* 82116FFCh case   38:*/		regs.LR = 0x82117000; return 0x820919B0;
		/* 82116FFCh case   38:*/		return 0x82117000;
		  /* 82117000h */ case   39:  		/* lis R4, 9345 */
		/* 82117000h case   39:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82117000h case   39:*/		return 0x82117004;
		  /* 82117004h */ case   40:  		/* mr R3, R31 */
		/* 82117004h case   40:*/		regs.R3 = regs.R31;
		/* 82117004h case   40:*/		return 0x82117008;
		  /* 82117008h */ case   41:  		/* bl -584912 */
		/* 82117008h case   41:*/		regs.LR = 0x8211700C; return 0x82088338;
		/* 82117008h case   41:*/		return 0x8211700C;
	}
	return 0x8211700C;
} // Block from 82116F64h-8211700Ch (42 instructions)

//////////////////////////////////////////////////////
// Block at 8211700Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211700C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211700C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211700C);
		  /* 8211700Ch */ case    0:  		/* mr R3, R27 */
		/* 8211700Ch case    0:*/		regs.R3 = regs.R27;
		/* 8211700Ch case    0:*/		return 0x82117010;
		  /* 82117010h */ case    1:  		/* bl -70776 */
		/* 82117010h case    1:*/		regs.LR = 0x82117014; return 0x82105B98;
		/* 82117010h case    1:*/		return 0x82117014;
		  /* 82117014h */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 82117014h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82117014h case    2:*/		return 0x82117018;
		  /* 82117018h */ case    3:  		/* li R10, 1 */
		/* 82117018h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82117018h case    3:*/		return 0x8211701C;
		  /* 8211701Ch */ case    4:  		/* addi R14, R11, -1 */
		/* 8211701Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R11,0xFFFFFFFF);
		/* 8211701Ch case    4:*/		return 0x82117020;
		  /* 82117020h */ case    5:  		/* stw R10, <#[R1 + 120]> */
		/* 82117020h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 82117020h case    5:*/		return 0x82117024;
	}
	return 0x82117024;
} // Block from 8211700Ch-82117024h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117024);
		  /* 82117024h */ case    0:  		/* li R17, 0 */
		/* 82117024h case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 82117024h case    0:*/		return 0x82117028;
	}
	return 0x82117028;
} // Block from 82117024h-82117028h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117028);
		  /* 82117028h */ case    0:  		/* lwz R11, <#[R27 + 12]> */
		/* 82117028h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 82117028h case    0:*/		return 0x8211702C;
		  /* 8211702Ch */ case    1:  		/* addi R14, R14, 1 */
		/* 8211702Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x1);
		/* 8211702Ch case    1:*/		return 0x82117030;
		  /* 82117030h */ case    2:  		/* cmplw CR6, R14, R11 */
		/* 82117030h case    2:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R11);
		/* 82117030h case    2:*/		return 0x82117034;
		  /* 82117034h */ case    3:  		/* bc 12, CR6_LT, -2652 */
		/* 82117034h case    3:*/		if ( regs.CR[6].lt ) { return 0x821165D8;  }
		/* 82117034h case    3:*/		return 0x82117038;
	}
	return 0x82117038;
} // Block from 82117028h-82117038h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82117038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117038);
		  /* 82117038h */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 82117038h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 82117038h case    0:*/		return 0x8211703C;
		  /* 8211703Ch */ case    1:  		/* cntlzw R11, R11 */
		/* 8211703Ch case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8211703Ch case    1:*/		return 0x82117040;
		  /* 82117040h */ case    2:  		/* rlwinm R29, R11, 27, 31, 31 */
		/* 82117040h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R11);
		/* 82117040h case    2:*/		return 0x82117044;
		  /* 82117044h */ case    3:  		/* lis R4, 9345 */
		/* 82117044h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 82117044h case    3:*/		return 0x82117048;
		  /* 82117048h */ case    4:  		/* lwz R3, <#[R1 + 144]> */
		/* 82117048h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 82117048h case    4:*/		return 0x8211704C;
		  /* 8211704Ch */ case    5:  		/* bl -584980 */
		/* 8211704Ch case    5:*/		regs.LR = 0x82117050; return 0x82088338;
		/* 8211704Ch case    5:*/		return 0x82117050;
		  /* 82117050h */ case    6:  		/* mr R3, R29 */
		/* 82117050h case    6:*/		regs.R3 = regs.R29;
		/* 82117050h case    6:*/		return 0x82117054;
	}
	return 0x82117054;
} // Block from 82117038h-82117054h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82117054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117054);
		  /* 82117054h */ case    0:  		/* addi R1, R1, 432 */
		/* 82117054h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 82117054h case    0:*/		return 0x82117058;
		  /* 82117058h */ case    1:  		/* b -548328 */
		/* 82117058h case    1:*/		return 0x82091270;
		/* 82117058h case    1:*/		return 0x8211705C;
	}
	return 0x8211705C;
} // Block from 82117054h-8211705Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211705Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211705C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211705C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211705C);
		  /* 8211705Ch */ case    0:  		/* lis R29, -32761 */
		/* 8211705Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 8211705Ch case    0:*/		return 0x82117060;
		  /* 82117060h */ case    1:  		/* ori R29, R29, 14 */
		/* 82117060h case    1:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 82117060h case    1:*/		return 0x82117064;
		  /* 82117064h */ case    2:  		/* b -32 */
		/* 82117064h case    2:*/		return 0x82117044;
		/* 82117064h case    2:*/		return 0x82117068;
	}
	return 0x82117068;
} // Block from 8211705Ch-82117068h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117068);
		  /* 82117068h */ case    0:  		/* mr R3, R31 */
		/* 82117068h case    0:*/		regs.R3 = regs.R31;
		/* 82117068h case    0:*/		return 0x8211706C;
		  /* 8211706Ch */ case    1:  		/* bl 1074004 */
		/* 8211706Ch case    1:*/		regs.LR = 0x82117070; return 0x8221D3C0;
		/* 8211706Ch case    1:*/		return 0x82117070;
		  /* 82117070h */ case    2:  		/* mr R3, R31 */
		/* 82117070h case    2:*/		regs.R3 = regs.R31;
		/* 82117070h case    2:*/		return 0x82117074;
		  /* 82117074h */ case    3:  		/* bl -109188 */
		/* 82117074h case    3:*/		regs.LR = 0x82117078; return 0x820FC5F0;
		/* 82117074h case    3:*/		return 0x82117078;
		  /* 82117078h */ case    4:  		/* b -52 */
		/* 82117078h case    4:*/		return 0x82117044;
		/* 82117078h case    4:*/		return 0x8211707C;
		  /* 8211707Ch */ case    5:  		/* nop */
		/* 8211707Ch case    5:*/		cpu::op::nop();
		/* 8211707Ch case    5:*/		return 0x82117080;
	}
	return 0x82117080;
} // Block from 82117068h-82117080h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117080);
		  /* 82117080h */ case    0:  		/* mfspr R12, LR */
		/* 82117080h case    0:*/		regs.R12 = regs.LR;
		/* 82117080h case    0:*/		return 0x82117084;
		  /* 82117084h */ case    1:  		/* bl -548412 */
		/* 82117084h case    1:*/		regs.LR = 0x82117088; return 0x82091248;
		/* 82117084h case    1:*/		return 0x82117088;
		  /* 82117088h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82117088h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82117088h case    2:*/		return 0x8211708C;
		  /* 8211708Ch */ case    3:  		/* lwz R11, <#[R3 + 108]> */
		/* 8211708Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8211708Ch case    3:*/		return 0x82117090;
		  /* 82117090h */ case    4:  		/* mr R31, R3 */
		/* 82117090h case    4:*/		regs.R31 = regs.R3;
		/* 82117090h case    4:*/		return 0x82117094;
		  /* 82117094h */ case    5:  		/* li R24, 0 */
		/* 82117094h case    5:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82117094h case    5:*/		return 0x82117098;
		  /* 82117098h */ case    6:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 82117098h case    6:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 82117098h case    6:*/		return 0x8211709C;
		  /* 8211709Ch */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 8211709Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821170B0;  }
		/* 8211709Ch case    7:*/		return 0x821170A0;
		  /* 821170A0h */ case    8:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821170A0h case    8:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821170A0h case    8:*/		return 0x821170A4;
		  /* 821170A4h */ case    9:  		/* bc 4, CR0_EQ, 12 */
		/* 821170A4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821170B0;  }
		/* 821170A4h case    9:*/		return 0x821170A8;
		  /* 821170A8h */ case   10:  		/* li R3, 1 */
		/* 821170A8h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821170A8h case   10:*/		return 0x821170AC;
		  /* 821170ACh */ case   11:  		/* b 640 */
		/* 821170ACh case   11:*/		return 0x8211732C;
		/* 821170ACh case   11:*/		return 0x821170B0;
	}
	return 0x821170B0;
} // Block from 82117080h-821170B0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821170B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821170B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821170B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821170B0);
		  /* 821170B0h */ case    0:  		/* mr R3, R31 */
		/* 821170B0h case    0:*/		regs.R3 = regs.R31;
		/* 821170B0h case    0:*/		return 0x821170B4;
		  /* 821170B4h */ case    1:  		/* bl -87124 */
		/* 821170B4h case    1:*/		regs.LR = 0x821170B8; return 0x82101C60;
		/* 821170B4h case    1:*/		return 0x821170B8;
		  /* 821170B8h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 821170B8h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821170B8h case    2:*/		return 0x821170BC;
		  /* 821170BCh */ case    3:  		/* bc 12, CR0_LT, 624 */
		/* 821170BCh case    3:*/		if ( regs.CR[0].lt ) { return 0x8211732C;  }
		/* 821170BCh case    3:*/		return 0x821170C0;
		  /* 821170C0h */ case    4:  		/* lwz R11, <#[R31 + 44]> */
		/* 821170C0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821170C0h case    4:*/		return 0x821170C4;
		  /* 821170C4h */ case    5:  		/* addi R4, R1, 80 */
		/* 821170C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821170C4h case    5:*/		return 0x821170C8;
		  /* 821170C8h */ case    6:  		/* mr R3, R31 */
		/* 821170C8h case    6:*/		regs.R3 = regs.R31;
		/* 821170C8h case    6:*/		return 0x821170CC;
		  /* 821170CCh */ case    7:  		/* lwz R5, <#[R31 + 136]> */
		/* 821170CCh case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000088) );
		/* 821170CCh case    7:*/		return 0x821170D0;
		  /* 821170D0h */ case    8:  		/* addi R6, R11, -1 */
		/* 821170D0h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFFF);
		/* 821170D0h case    8:*/		return 0x821170D4;
		  /* 821170D4h */ case    9:  		/* bl -37852 */
		/* 821170D4h case    9:*/		regs.LR = 0x821170D8; return 0x8210DCF8;
		/* 821170D4h case    9:*/		return 0x821170D8;
		  /* 821170D8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 821170D8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821170D8h case   10:*/		return 0x821170DC;
		  /* 821170DCh */ case   11:  		/* bc 12, CR0_LT, 28 */
		/* 821170DCh case   11:*/		if ( regs.CR[0].lt ) { return 0x821170F8;  }
		/* 821170DCh case   11:*/		return 0x821170E0;
		  /* 821170E0h */ case   12:  		/* li R5, 0 */
		/* 821170E0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821170E0h case   12:*/		return 0x821170E4;
		  /* 821170E4h */ case   13:  		/* addi R4, R1, 80 */
		/* 821170E4h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821170E4h case   13:*/		return 0x821170E8;
		  /* 821170E8h */ case   14:  		/* mr R3, R31 */
		/* 821170E8h case   14:*/		regs.R3 = regs.R31;
		/* 821170E8h case   14:*/		return 0x821170EC;
		  /* 821170ECh */ case   15:  		/* bl -13852 */
		/* 821170ECh case   15:*/		regs.LR = 0x821170F0; return 0x82113AD0;
		/* 821170ECh case   15:*/		return 0x821170F0;
		  /* 821170F0h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 821170F0h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821170F0h case   16:*/		return 0x821170F4;
		  /* 821170F4h */ case   17:  		/* bc 4, CR0_LT, 68 */
		/* 821170F4h case   17:*/		if ( !regs.CR[0].lt ) { return 0x82117138;  }
		/* 821170F4h case   17:*/		return 0x821170F8;
	}
	return 0x821170F8;
} // Block from 821170B0h-821170F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821170F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821170F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821170F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821170F8);
		  /* 821170F8h */ case    0:  		/* addi R4, R1, 80 */
		/* 821170F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821170F8h case    0:*/		return 0x821170FC;
		  /* 821170FCh */ case    1:  		/* mr R3, R31 */
		/* 821170FCh case    1:*/		regs.R3 = regs.R31;
		/* 821170FCh case    1:*/		return 0x82117100;
		  /* 82117100h */ case    2:  		/* bl -71280 */
		/* 82117100h case    2:*/		regs.LR = 0x82117104; return 0x82105A90;
		/* 82117100h case    2:*/		return 0x82117104;
		  /* 82117104h */ case    3:  		/* addi R4, R1, 80 */
		/* 82117104h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117104h case    3:*/		return 0x82117108;
		  /* 82117108h */ case    4:  		/* mr R3, R31 */
		/* 82117108h case    4:*/		regs.R3 = regs.R31;
		/* 82117108h case    4:*/		return 0x8211710C;
		  /* 8211710Ch */ case    5:  		/* lwz R6, <#[R31 + 44]> */
		/* 8211710Ch case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 8211710Ch case    5:*/		return 0x82117110;
		  /* 82117110h */ case    6:  		/* lwz R5, <#[R31 + 136]> */
		/* 82117110h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000088) );
		/* 82117110h case    6:*/		return 0x82117114;
		  /* 82117114h */ case    7:  		/* bl -37916 */
		/* 82117114h case    7:*/		regs.LR = 0x82117118; return 0x8210DCF8;
		/* 82117114h case    7:*/		return 0x82117118;
		  /* 82117118h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82117118h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117118h case    8:*/		return 0x8211711C;
		  /* 8211711Ch */ case    9:  		/* bc 12, CR0_LT, 500 */
		/* 8211711Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x82117310;  }
		/* 8211711Ch case    9:*/		return 0x82117120;
		  /* 82117120h */ case   10:  		/* li R5, 0 */
		/* 82117120h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82117120h case   10:*/		return 0x82117124;
		  /* 82117124h */ case   11:  		/* addi R4, R1, 80 */
		/* 82117124h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117124h case   11:*/		return 0x82117128;
		  /* 82117128h */ case   12:  		/* mr R3, R31 */
		/* 82117128h case   12:*/		regs.R3 = regs.R31;
		/* 82117128h case   12:*/		return 0x8211712C;
		  /* 8211712Ch */ case   13:  		/* bl -13916 */
		/* 8211712Ch case   13:*/		regs.LR = 0x82117130; return 0x82113AD0;
		/* 8211712Ch case   13:*/		return 0x82117130;
		  /* 82117130h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 82117130h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117130h case   14:*/		return 0x82117134;
		  /* 82117134h */ case   15:  		/* bc 12, CR0_LT, 476 */
		/* 82117134h case   15:*/		if ( regs.CR[0].lt ) { return 0x82117310;  }
		/* 82117134h case   15:*/		return 0x82117138;
	}
	return 0x82117138;
} // Block from 821170F8h-82117138h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82117138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117138);
		  /* 82117138h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82117138h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117138h case    0:*/		return 0x8211713C;
		  /* 8211713Ch */ case    1:  		/* lis R4, 9345 */
		/* 8211713Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211713Ch case    1:*/		return 0x82117140;
		  /* 82117140h */ case    2:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 82117140h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 82117140h case    2:*/		return 0x82117144;
		  /* 82117144h */ case    3:  		/* bl -585540 */
		/* 82117144h case    3:*/		regs.LR = 0x82117148; return 0x82088200;
		/* 82117144h case    3:*/		return 0x82117148;
		  /* 82117148h */ case    4:  		/* or. R24, R3, R3 */
		/* 82117148h case    4:*/		cpu::op::or<1>(regs,&regs.R24,regs.R3,regs.R3);
		/* 82117148h case    4:*/		return 0x8211714C;
		  /* 8211714Ch */ case    5:  		/* bc 12, CR0_EQ, 452 */
		/* 8211714Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82117310;  }
		/* 8211714Ch case    5:*/		return 0x82117150;
		  /* 82117150h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 82117150h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117150h case    6:*/		return 0x82117154;
		  /* 82117154h */ case    7:  		/* mr R3, R24 */
		/* 82117154h case    7:*/		regs.R3 = regs.R24;
		/* 82117154h case    7:*/		return 0x82117158;
		  /* 82117158h */ case    8:  		/* lwz R4, <#[R31 + 24]> */
		/* 82117158h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 82117158h case    8:*/		return 0x8211715C;
		  /* 8211715Ch */ case    9:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8211715Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8211715Ch case    9:*/		return 0x82117160;
		  /* 82117160h */ case   10:  		/* bl -546736 */
		/* 82117160h case   10:*/		regs.LR = 0x82117164; return 0x820919B0;
		/* 82117160h case   10:*/		return 0x82117164;
		  /* 82117164h */ case   11:  		/* mr R3, R31 */
		/* 82117164h case   11:*/		regs.R3 = regs.R31;
		/* 82117164h case   11:*/		return 0x82117168;
		  /* 82117168h */ case   12:  		/* bl -95872 */
		/* 82117168h case   12:*/		regs.LR = 0x8211716C; return 0x820FFAE8;
		/* 82117168h case   12:*/		return 0x8211716C;
		  /* 8211716Ch */ case   13:  		/* lwz R10, <#[R31 + 12]> */
		/* 8211716Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8211716Ch case   13:*/		return 0x82117170;
		  /* 82117170h */ case   14:  		/* mr R25, R3 */
		/* 82117170h case   14:*/		regs.R25 = regs.R3;
		/* 82117170h case   14:*/		return 0x82117174;
		  /* 82117174h */ case   15:  		/* li R27, 0 */
		/* 82117174h case   15:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82117174h case   15:*/		return 0x82117178;
		  /* 82117178h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 82117178h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82117178h case   16:*/		return 0x8211717C;
		  /* 8211717Ch */ case   17:  		/* bc 12, CR6_EQ, 224 */
		/* 8211717Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8211725C;  }
		/* 8211717Ch case   17:*/		return 0x82117180;
		  /* 82117180h */ case   18:  		/* li R29, 0 */
		/* 82117180h case   18:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82117180h case   18:*/		return 0x82117184;
		  /* 82117184h */ case   19:  		/* lwz R11, <#[R31 + 24]> */
		/* 82117184h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82117184h case   19:*/		return 0x82117188;
		  /* 82117188h */ case   20:  		/* lwzx R11, <#[R29 + R11]> */
		/* 82117188h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82117188h case   20:*/		return 0x8211718C;
		  /* 8211718Ch */ case   21:  		/* lwz R11, <#[R11 + 44]> */
		/* 8211718Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 8211718Ch case   21:*/		return 0x82117190;
		  /* 82117190h */ case   22:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82117190h case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82117190h case   22:*/		return 0x82117194;
		  /* 82117194h */ case   23:  		/* bc 12, CR0_EQ, 180 */
		/* 82117194h case   23:*/		if ( regs.CR[0].eq ) { return 0x82117248;  }
		/* 82117194h case   23:*/		return 0x82117198;
		  /* 82117198h */ case   24:  		/* mr R26, R27 */
		/* 82117198h case   24:*/		regs.R26 = regs.R27;
		/* 82117198h case   24:*/		return 0x8211719C;
		  /* 8211719Ch */ case   25:  		/* cmplwi CR6, R27, 0 */
		/* 8211719Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211719Ch case   25:*/		return 0x821171A0;
		  /* 821171A0h */ case   26:  		/* bc 12, CR6_EQ, 152 */
		/* 821171A0h case   26:*/		if ( regs.CR[6].eq ) { return 0x82117238;  }
		/* 821171A0h case   26:*/		return 0x821171A4;
		  /* 821171A4h */ case   27:  		/* mr R28, R29 */
		/* 821171A4h case   27:*/		regs.R28 = regs.R29;
		/* 821171A4h case   27:*/		return 0x821171A8;
		  /* 821171A8h */ case   28:  		/* mr R4, R26 */
		/* 821171A8h case   28:*/		regs.R4 = regs.R26;
		/* 821171A8h case   28:*/		return 0x821171AC;
		  /* 821171ACh */ case   29:  		/* mr R3, R31 */
		/* 821171ACh case   29:*/		regs.R3 = regs.R31;
		/* 821171ACh case   29:*/		return 0x821171B0;
		  /* 821171B0h */ case   30:  		/* bl -95664 */
		/* 821171B0h case   30:*/		regs.LR = 0x821171B4; return 0x820FFC00;
		/* 821171B0h case   30:*/		return 0x821171B4;
		  /* 821171B4h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 821171B4h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821171B4h case   31:*/		return 0x821171B8;
		  /* 821171B8h */ case   32:  		/* bc 12, CR0_EQ, 128 */
		/* 821171B8h case   32:*/		if ( regs.CR[0].eq ) { return 0x82117238;  }
		/* 821171B8h case   32:*/		return 0x821171BC;
		  /* 821171BCh */ case   33:  		/* mr R3, R31 */
		/* 821171BCh case   33:*/		regs.R3 = regs.R31;
		/* 821171BCh case   33:*/		return 0x821171C0;
		  /* 821171C0h */ case   34:  		/* bl -95960 */
		/* 821171C0h case   34:*/		regs.LR = 0x821171C4; return 0x820FFAE8;
		/* 821171C0h case   34:*/		return 0x821171C4;
		  /* 821171C4h */ case   35:  		/* mr R30, R3 */
		/* 821171C4h case   35:*/		regs.R30 = regs.R3;
		/* 821171C4h case   35:*/		return 0x821171C8;
		  /* 821171C8h */ case   36:  		/* cmplw CR6, R3, R25 */
		/* 821171C8h case   36:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R25);
		/* 821171C8h case   36:*/		return 0x821171CC;
		  /* 821171CCh */ case   37:  		/* bc 12, CR6_GT, 96 */
		/* 821171CCh case   37:*/		if ( regs.CR[6].gt ) { return 0x8211722C;  }
		/* 821171CCh case   37:*/		return 0x821171D0;
		  /* 821171D0h */ case   38:  		/* bc 4, CR6_EQ, 48 */
		/* 821171D0h case   38:*/		if ( !regs.CR[6].eq ) { return 0x82117200;  }
		/* 821171D0h case   38:*/		return 0x821171D4;
		  /* 821171D4h */ case   39:  		/* lwz R11, <#[R31 + 108]> */
		/* 821171D4h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 821171D4h case   39:*/		return 0x821171D8;
		  /* 821171D8h */ case   40:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821171D8h case   40:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821171D8h case   40:*/		return 0x821171DC;
		  /* 821171DCh */ case   41:  		/* bc 4, CR0_EQ, 80 */
		/* 821171DCh case   41:*/		if ( !regs.CR[0].eq ) { return 0x8211722C;  }
		/* 821171DCh case   41:*/		return 0x821171E0;
		  /* 821171E0h */ case   42:  		/* lwz R11, <#[R31 + 24]> */
		/* 821171E0h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821171E0h case   42:*/		return 0x821171E4;
		  /* 821171E4h */ case   43:  		/* add R11, R28, R11 */
		/* 821171E4h case   43:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821171E4h case   43:*/		return 0x821171E8;
		  /* 821171E8h */ case   44:  		/* lwz R10, <#[R11 - 4]> */
		/* 821171E8h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821171E8h case   44:*/		return 0x821171EC;
		  /* 821171ECh */ case   45:  		/* lwz R11, <#[R11]> */
		/* 821171ECh case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821171ECh case   45:*/		return 0x821171F0;
		  /* 821171F0h */ case   46:  		/* lwz R10, <#[R10 + 44]> */
		/* 821171F0h case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000002C) );
		/* 821171F0h case   46:*/		return 0x821171F4;
		  /* 821171F4h */ case   47:  		/* lwz R11, <#[R11 + 44]> */
		/* 821171F4h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821171F4h case   47:*/		return 0x821171F8;
		  /* 821171F8h */ case   48:  		/* cmplw CR6, R11, R10 */
		/* 821171F8h case   48:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821171F8h case   48:*/		return 0x821171FC;
		  /* 821171FCh */ case   49:  		/* bc 4, CR6_EQ, 48 */
		/* 821171FCh case   49:*/		if ( !regs.CR[6].eq ) { return 0x8211722C;  }
		/* 821171FCh case   49:*/		return 0x82117200;
	}
	return 0x82117200;
} // Block from 82117138h-82117200h (50 instructions)

//////////////////////////////////////////////////////
// Block at 82117200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117200);
		  /* 82117200h */ case    0:  		/* li R5, 0 */
		/* 82117200h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82117200h case    0:*/		return 0x82117204;
		  /* 82117204h */ case    1:  		/* addi R4, R1, 80 */
		/* 82117204h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117204h case    1:*/		return 0x82117208;
		  /* 82117208h */ case    2:  		/* mr R3, R31 */
		/* 82117208h case    2:*/		regs.R3 = regs.R31;
		/* 82117208h case    2:*/		return 0x8211720C;
		  /* 8211720Ch */ case    3:  		/* bl -14140 */
		/* 8211720Ch case    3:*/		regs.LR = 0x82117210; return 0x82113AD0;
		/* 8211720Ch case    3:*/		return 0x82117210;
		  /* 82117210h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82117210h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117210h case    4:*/		return 0x82117214;
		  /* 82117214h */ case    5:  		/* bc 12, CR0_LT, 24 */
		/* 82117214h case    5:*/		if ( regs.CR[0].lt ) { return 0x8211722C;  }
		/* 82117214h case    5:*/		return 0x82117218;
		  /* 82117218h */ case    6:  		/* addi R5, R29, 4 */
		/* 82117218h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x4);
		/* 82117218h case    6:*/		return 0x8211721C;
		  /* 8211721Ch */ case    7:  		/* lwz R4, <#[R31 + 24]> */
		/* 8211721Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 8211721Ch case    7:*/		return 0x82117220;
		  /* 82117220h */ case    8:  		/* mr R3, R24 */
		/* 82117220h case    8:*/		regs.R3 = regs.R24;
		/* 82117220h case    8:*/		return 0x82117224;
		  /* 82117224h */ case    9:  		/* bl -546932 */
		/* 82117224h case    9:*/		regs.LR = 0x82117228; return 0x820919B0;
		/* 82117224h case    9:*/		return 0x82117228;
		  /* 82117228h */ case   10:  		/* mr R25, R30 */
		/* 82117228h case   10:*/		regs.R25 = regs.R30;
		/* 82117228h case   10:*/		return 0x8211722C;
	}
	return 0x8211722C;
} // Block from 82117200h-8211722Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211722Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211722C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211722C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211722C);
		  /* 8211722Ch */ case    0:  		/* addic. R26, R26, -1 */
		/* 8211722Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 8211722Ch case    0:*/		return 0x82117230;
		  /* 82117230h */ case    1:  		/* addi R28, R28, -4 */
		/* 82117230h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFC);
		/* 82117230h case    1:*/		return 0x82117234;
		  /* 82117234h */ case    2:  		/* bc 4, CR0_EQ, -140 */
		/* 82117234h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821171A8;  }
		/* 82117234h case    2:*/		return 0x82117238;
	}
	return 0x82117238;
} // Block from 8211722Ch-82117238h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117238);
		  /* 82117238h */ case    0:  		/* addi R5, R29, 4 */
		/* 82117238h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x4);
		/* 82117238h case    0:*/		return 0x8211723C;
		  /* 8211723Ch */ case    1:  		/* lwz R3, <#[R31 + 24]> */
		/* 8211723Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8211723Ch case    1:*/		return 0x82117240;
		  /* 82117240h */ case    2:  		/* mr R4, R24 */
		/* 82117240h case    2:*/		regs.R4 = regs.R24;
		/* 82117240h case    2:*/		return 0x82117244;
		  /* 82117244h */ case    3:  		/* bl -546964 */
		/* 82117244h case    3:*/		regs.LR = 0x82117248; return 0x820919B0;
		/* 82117244h case    3:*/		return 0x82117248;
	}
	return 0x82117248;
} // Block from 82117238h-82117248h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82117248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117248);
		  /* 82117248h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 82117248h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117248h case    0:*/		return 0x8211724C;
		  /* 8211724Ch */ case    1:  		/* addi R27, R27, 1 */
		/* 8211724Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8211724Ch case    1:*/		return 0x82117250;
		  /* 82117250h */ case    2:  		/* addi R29, R29, 4 */
		/* 82117250h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82117250h case    2:*/		return 0x82117254;
		  /* 82117254h */ case    3:  		/* cmplw CR6, R27, R10 */
		/* 82117254h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 82117254h case    3:*/		return 0x82117258;
		  /* 82117258h */ case    4:  		/* bc 12, CR6_LT, -212 */
		/* 82117258h case    4:*/		if ( regs.CR[6].lt ) { return 0x82117184;  }
		/* 82117258h case    4:*/		return 0x8211725C;
	}
	return 0x8211725C;
} // Block from 82117248h-8211725Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211725Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211725C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211725C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211725C);
		  /* 8211725Ch */ case    0:  		/* li R6, 0 */
		/* 8211725Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211725Ch case    0:*/		return 0x82117260;
		  /* 82117260h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82117260h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82117260h case    1:*/		return 0x82117264;
		  /* 82117264h */ case    2:  		/* bc 12, CR6_EQ, 172 */
		/* 82117264h case    2:*/		if ( regs.CR[6].eq ) { return 0x82117310;  }
		/* 82117264h case    2:*/		return 0x82117268;
		  /* 82117268h */ case    3:  		/* lwz R9, <#[R31 + 24]> */
		/* 82117268h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 82117268h case    3:*/		return 0x8211726C;
		  /* 8211726Ch */ case    4:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 8211726Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 8211726Ch case    4:*/		return 0x82117270;
		  /* 82117270h */ case    5:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82117270h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82117270h case    5:*/		return 0x82117274;
		  /* 82117274h */ case    6:  		/* lwz R9, <#[R9 + 44]> */
		/* 82117274h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000002C) );
		/* 82117274h case    6:*/		return 0x82117278;
		  /* 82117278h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 82117278h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 82117278h case    7:*/		return 0x8211727C;
		  /* 8211727Ch */ case    8:  		/* bc 12, CR0_EQ, 132 */
		/* 8211727Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x82117300;  }
		/* 8211727Ch case    8:*/		return 0x82117280;
		  /* 82117280h */ case    9:  		/* addi R8, R6, 1 */
		/* 82117280h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R6,0x1);
		/* 82117280h case    9:*/		return 0x82117284;
		  /* 82117284h */ case   10:  		/* cmplw CR6, R8, R10 */
		/* 82117284h case   10:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 82117284h case   10:*/		return 0x82117288;
		  /* 82117288h */ case   11:  		/* bc 4, CR6_LT, 52 */
		/* 82117288h case   11:*/		if ( !regs.CR[6].lt ) { return 0x821172BC;  }
		/* 82117288h case   11:*/		return 0x8211728C;
		  /* 8211728Ch */ case   12:  		/* lwz R7, <#[R31 + 24]> */
		/* 8211728Ch case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 8211728Ch case   12:*/		return 0x82117290;
		  /* 82117290h */ case   13:  		/* rlwinm R9, R8, 2, 0, 29 */
		/* 82117290h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 82117290h case   13:*/		return 0x82117294;
		  /* 82117294h */ case   14:  		/* lwzx R5, <#[R7 + R11]> */
		/* 82117294h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82117294h case   14:*/		return 0x82117298;
		  /* 82117298h */ case   15:  		/* lwz R5, <#[R5 + 44]> */
		/* 82117298h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x0000002C) );
		/* 82117298h case   15:*/		return 0x8211729C;
		  /* 8211729Ch */ case   16:  		/* lwzx R4, <#[R9 + R7]> */
		/* 8211729Ch case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 8211729Ch case   16:*/		return 0x821172A0;
		  /* 821172A0h */ case   17:  		/* lwz R4, <#[R4 + 44]> */
		/* 821172A0h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000002C) );
		/* 821172A0h case   17:*/		return 0x821172A4;
		  /* 821172A4h */ case   18:  		/* cmplw CR6, R5, R4 */
		/* 821172A4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R4);
		/* 821172A4h case   18:*/		return 0x821172A8;
		  /* 821172A8h */ case   19:  		/* bc 4, CR6_EQ, 20 */
		/* 821172A8h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821172BC;  }
		/* 821172A8h case   19:*/		return 0x821172AC;
		  /* 821172ACh */ case   20:  		/* addi R8, R8, 1 */
		/* 821172ACh case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821172ACh case   20:*/		return 0x821172B0;
		  /* 821172B0h */ case   21:  		/* addi R9, R9, 4 */
		/* 821172B0h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821172B0h case   21:*/		return 0x821172B4;
		  /* 821172B4h */ case   22:  		/* cmplw CR6, R8, R10 */
		/* 821172B4h case   22:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 821172B4h case   22:*/		return 0x821172B8;
		  /* 821172B8h */ case   23:  		/* bc 12, CR6_LT, -28 */
		/* 821172B8h case   23:*/		if ( regs.CR[6].lt ) { return 0x8211729C;  }
		/* 821172B8h case   23:*/		return 0x821172BC;
	}
	return 0x821172BC;
} // Block from 8211725Ch-821172BCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821172BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821172BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821172BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821172BC);
		  /* 821172BCh */ case    0:  		/* subf R10, R6, R8 */
		/* 821172BCh case    0:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R6,regs.R8);
		/* 821172BCh case    0:*/		return 0x821172C0;
		  /* 821172C0h */ case    1:  		/* rlwinm. R10, R10, 31, 1, 31 */
		/* 821172C0h case    1:*/		cpu::op::rlwinm<1,31,1,31>(regs,&regs.R10,regs.R10);
		/* 821172C0h case    1:*/		return 0x821172C4;
		  /* 821172C4h */ case    2:  		/* bc 12, CR0_EQ, 56 */
		/* 821172C4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821172FC;  }
		/* 821172C4h case    2:*/		return 0x821172C8;
		  /* 821172C8h */ case    3:  		/* mtspr CTR, R10 */
		/* 821172C8h case    3:*/		regs.CTR = regs.R10;
		/* 821172C8h case    3:*/		return 0x821172CC;
		  /* 821172CCh */ case    4:  		/* rlwinm R10, R8, 2, 0, 29 */
		/* 821172CCh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821172CCh case    4:*/		return 0x821172D0;
		  /* 821172D0h */ case    5:  		/* lwz R9, <#[R31 + 24]> */
		/* 821172D0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 821172D0h case    5:*/		return 0x821172D4;
		  /* 821172D4h */ case    6:  		/* add R7, R10, R9 */
		/* 821172D4h case    6:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R9);
		/* 821172D4h case    6:*/		return 0x821172D8;
		  /* 821172D8h */ case    7:  		/* lwzx R6, <#[R11 + R9]> */
		/* 821172D8h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821172D8h case    7:*/		return 0x821172DC;
		  /* 821172DCh */ case    8:  		/* lwz R7, <#[R7 - 4]> */
		/* 821172DCh case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0xFFFFFFFC) );
		/* 821172DCh case    8:*/		return 0x821172E0;
		  /* 821172E0h */ case    9:  		/* stwx R7, <#[R11 + R9]> */
		/* 821172E0h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821172E0h case    9:*/		return 0x821172E4;
		  /* 821172E4h */ case   10:  		/* addi R11, R11, 4 */
		/* 821172E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821172E4h case   10:*/		return 0x821172E8;
		  /* 821172E8h */ case   11:  		/* lwz R9, <#[R31 + 24]> */
		/* 821172E8h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 821172E8h case   11:*/		return 0x821172EC;
		  /* 821172ECh */ case   12:  		/* add R9, R10, R9 */
		/* 821172ECh case   12:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821172ECh case   12:*/		return 0x821172F0;
		  /* 821172F0h */ case   13:  		/* addi R10, R10, -4 */
		/* 821172F0h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821172F0h case   13:*/		return 0x821172F4;
		  /* 821172F4h */ case   14:  		/* stw R6, <#[R9 - 4]> */
		/* 821172F4h case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 821172F4h case   14:*/		return 0x821172F8;
		  /* 821172F8h */ case   15:  		/* bc 16, CR0_LT, -40 */
		/* 821172F8h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821172D0;  }
		/* 821172F8h case   15:*/		return 0x821172FC;
	}
	return 0x821172FC;
} // Block from 821172BCh-821172FCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821172FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821172FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821172FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821172FC);
		  /* 821172FCh */ case    0:  		/* addi R6, R8, -1 */
		/* 821172FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0xFFFFFFFF);
		/* 821172FCh case    0:*/		return 0x82117300;
	}
	return 0x82117300;
} // Block from 821172FCh-82117300h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117300);
		  /* 82117300h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 82117300h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117300h case    0:*/		return 0x82117304;
		  /* 82117304h */ case    1:  		/* addi R6, R6, 1 */
		/* 82117304h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82117304h case    1:*/		return 0x82117308;
		  /* 82117308h */ case    2:  		/* cmplw CR6, R6, R10 */
		/* 82117308h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 82117308h case    2:*/		return 0x8211730C;
		  /* 8211730Ch */ case    3:  		/* bc 12, CR6_LT, -164 */
		/* 8211730Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82117268;  }
		/* 8211730Ch case    3:*/		return 0x82117310;
	}
	return 0x82117310;
} // Block from 82117300h-82117310h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82117310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117310);
		  /* 82117310h */ case    0:  		/* addi R4, R1, 80 */
		/* 82117310h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117310h case    0:*/		return 0x82117314;
		  /* 82117314h */ case    1:  		/* mr R3, R31 */
		/* 82117314h case    1:*/		regs.R3 = regs.R31;
		/* 82117314h case    1:*/		return 0x82117318;
		  /* 82117318h */ case    2:  		/* bl -71816 */
		/* 82117318h case    2:*/		regs.LR = 0x8211731C; return 0x82105A90;
		/* 82117318h case    2:*/		return 0x8211731C;
		  /* 8211731Ch */ case    3:  		/* lis R4, 9345 */
		/* 8211731Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211731Ch case    3:*/		return 0x82117320;
		  /* 82117320h */ case    4:  		/* mr R3, R24 */
		/* 82117320h case    4:*/		regs.R3 = regs.R24;
		/* 82117320h case    4:*/		return 0x82117324;
		  /* 82117324h */ case    5:  		/* bl -585708 */
		/* 82117324h case    5:*/		regs.LR = 0x82117328; return 0x82088338;
		/* 82117324h case    5:*/		return 0x82117328;
		  /* 82117328h */ case    6:  		/* li R3, 0 */
		/* 82117328h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82117328h case    6:*/		return 0x8211732C;
	}
	return 0x8211732C;
} // Block from 82117310h-8211732Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211732Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211732C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211732C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211732C);
		  /* 8211732Ch */ case    0:  		/* addi R1, R1, 256 */
		/* 8211732Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8211732Ch case    0:*/		return 0x82117330;
		  /* 82117330h */ case    1:  		/* b -549016 */
		/* 82117330h case    1:*/		return 0x82091298;
		/* 82117330h case    1:*/		return 0x82117334;
		  /* 82117334h */ case    2:  		/* nop */
		/* 82117334h case    2:*/		cpu::op::nop();
		/* 82117334h case    2:*/		return 0x82117338;
	}
	return 0x82117338;
} // Block from 8211732Ch-82117338h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117338);
		  /* 82117338h */ case    0:  		/* mfspr R12, LR */
		/* 82117338h case    0:*/		regs.R12 = regs.LR;
		/* 82117338h case    0:*/		return 0x8211733C;
		  /* 8211733Ch */ case    1:  		/* bl -549104 */
		/* 8211733Ch case    1:*/		regs.LR = 0x82117340; return 0x8209124C;
		/* 8211733Ch case    1:*/		return 0x82117340;
		  /* 82117340h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82117340h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82117340h case    2:*/		return 0x82117344;
		  /* 82117344h */ case    3:  		/* lis R6, 2 */
		/* 82117344h case    3:*/		cpu::op::lis<0>(regs,&regs.R6,0x2);
		/* 82117344h case    3:*/		return 0x82117348;
		  /* 82117348h */ case    4:  		/* lwz R4, <#[R3 + 136]> */
		/* 82117348h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000088) );
		/* 82117348h case    4:*/		return 0x8211734C;
		  /* 8211734Ch */ case    5:  		/* li R5, 3 */
		/* 8211734Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8211734Ch case    5:*/		return 0x82117350;
		  /* 82117350h */ case    6:  		/* ori R6, R6, 1024 */
		/* 82117350h case    6:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x400);
		/* 82117350h case    6:*/		return 0x82117354;
		  /* 82117354h */ case    7:  		/* mr R31, R3 */
		/* 82117354h case    7:*/		regs.R31 = regs.R3;
		/* 82117354h case    7:*/		return 0x82117358;
		  /* 82117358h */ case    8:  		/* bl -91752 */
		/* 82117358h case    8:*/		regs.LR = 0x8211735C; return 0x82100CF0;
		/* 82117358h case    8:*/		return 0x8211735C;
		  /* 8211735Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 8211735Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211735Ch case    9:*/		return 0x82117360;
		  /* 82117360h */ case   10:  		/* bc 12, CR0_LT, 420 */
		/* 82117360h case   10:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117360h case   10:*/		return 0x82117364;
		  /* 82117364h */ case   11:  		/* li R6, 1025 */
		/* 82117364h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x401);
		/* 82117364h case   11:*/		return 0x82117368;
		  /* 82117368h */ case   12:  		/* lwz R4, <#[R31 + 140]> */
		/* 82117368h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000008C) );
		/* 82117368h case   12:*/		return 0x8211736C;
		  /* 8211736Ch */ case   13:  		/* li R5, 6 */
		/* 8211736Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8211736Ch case   13:*/		return 0x82117370;
		  /* 82117370h */ case   14:  		/* mr R3, R31 */
		/* 82117370h case   14:*/		regs.R3 = regs.R31;
		/* 82117370h case   14:*/		return 0x82117374;
		  /* 82117374h */ case   15:  		/* bl -91780 */
		/* 82117374h case   15:*/		regs.LR = 0x82117378; return 0x82100CF0;
		/* 82117374h case   15:*/		return 0x82117378;
		  /* 82117378h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 82117378h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117378h case   16:*/		return 0x8211737C;
		  /* 8211737Ch */ case   17:  		/* bc 12, CR0_LT, 392 */
		/* 8211737Ch case   17:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 8211737Ch case   17:*/		return 0x82117380;
		  /* 82117380h */ case   18:  		/* li R6, 17409 */
		/* 82117380h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x4401);
		/* 82117380h case   18:*/		return 0x82117384;
		  /* 82117384h */ case   19:  		/* lwz R4, <#[R31 + 144]> */
		/* 82117384h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000090) );
		/* 82117384h case   19:*/		return 0x82117388;
		  /* 82117388h */ case   20:  		/* li R5, 10 */
		/* 82117388h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0xA);
		/* 82117388h case   20:*/		return 0x8211738C;
		  /* 8211738Ch */ case   21:  		/* mr R3, R31 */
		/* 8211738Ch case   21:*/		regs.R3 = regs.R31;
		/* 8211738Ch case   21:*/		return 0x82117390;
		  /* 82117390h */ case   22:  		/* bl -91808 */
		/* 82117390h case   22:*/		regs.LR = 0x82117394; return 0x82100CF0;
		/* 82117390h case   22:*/		return 0x82117394;
		  /* 82117394h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 82117394h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117394h case   23:*/		return 0x82117398;
		  /* 82117398h */ case   24:  		/* bc 12, CR0_LT, 364 */
		/* 82117398h case   24:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117398h case   24:*/		return 0x8211739C;
		  /* 8211739Ch */ case   25:  		/* lwz R11, <#[R31 + 200]> */
		/* 8211739Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C8) );
		/* 8211739Ch case   25:*/		return 0x821173A0;
		  /* 821173A0h */ case   26:  		/* lis R10, 18008 */
		/* 821173A0h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0x4658);
		/* 821173A0h case   26:*/		return 0x821173A4;
		  /* 821173A4h */ case   27:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821173A4h case   27:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821173A4h case   27:*/		return 0x821173A8;
		  /* 821173A8h */ case   28:  		/* cmplw CR6, R11, R10 */
		/* 821173A8h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821173A8h case   28:*/		return 0x821173AC;
		  /* 821173ACh */ case   29:  		/* bc 12, CR6_EQ, 16 */
		/* 821173ACh case   29:*/		if ( regs.CR[6].eq ) { return 0x821173BC;  }
		/* 821173ACh case   29:*/		return 0x821173B0;
		  /* 821173B0h */ case   30:  		/* lis R10, 21592 */
		/* 821173B0h case   30:*/		cpu::op::lis<0>(regs,&regs.R10,0x5458);
		/* 821173B0h case   30:*/		return 0x821173B4;
		  /* 821173B4h */ case   31:  		/* cmplw CR6, R11, R10 */
		/* 821173B4h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821173B4h case   31:*/		return 0x821173B8;
		  /* 821173B8h */ case   32:  		/* bc 4, CR6_EQ, 36 */
		/* 821173B8h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821173DC;  }
		/* 821173B8h case   32:*/		return 0x821173BC;
	}
	return 0x821173BC;
} // Block from 82117338h-821173BCh (33 instructions)

//////////////////////////////////////////////////////
// Block at 821173BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821173BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821173BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821173BC);
		  /* 821173BCh */ case    0:  		/* lis R6, 3 */
		/* 821173BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R6,0x3);
		/* 821173BCh case    0:*/		return 0x821173C0;
		  /* 821173C0h */ case    1:  		/* lwz R4, <#[R31 + 136]> */
		/* 821173C0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 821173C0h case    1:*/		return 0x821173C4;
		  /* 821173C4h */ case    2:  		/* li R5, 2 */
		/* 821173C4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821173C4h case    2:*/		return 0x821173C8;
		  /* 821173C8h */ case    3:  		/* ori R6, R6, 4136 */
		/* 821173C8h case    3:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x1028);
		/* 821173C8h case    3:*/		return 0x821173CC;
		  /* 821173CCh */ case    4:  		/* mr R3, R31 */
		/* 821173CCh case    4:*/		regs.R3 = regs.R31;
		/* 821173CCh case    4:*/		return 0x821173D0;
		  /* 821173D0h */ case    5:  		/* bl -91872 */
		/* 821173D0h case    5:*/		regs.LR = 0x821173D4; return 0x82100CF0;
		/* 821173D0h case    5:*/		return 0x821173D4;
		  /* 821173D4h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821173D4h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821173D4h case    6:*/		return 0x821173D8;
		  /* 821173D8h */ case    7:  		/* bc 12, CR0_LT, 300 */
		/* 821173D8h case    7:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 821173D8h case    7:*/		return 0x821173DC;
	}
	return 0x821173DC;
} // Block from 821173BCh-821173DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821173DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821173DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821173DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821173DC);
		  /* 821173DCh */ case    0:  		/* lwz R11, <#[R31 + 200]> */
		/* 821173DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C8) );
		/* 821173DCh case    0:*/		return 0x821173E0;
		  /* 821173E0h */ case    1:  		/* lis R10, -2 */
		/* 821173E0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFE);
		/* 821173E0h case    1:*/		return 0x821173E4;
		  /* 821173E4h */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821173E4h case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821173E4h case    2:*/		return 0x821173E8;
		  /* 821173E8h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 821173E8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821173E8h case    3:*/		return 0x821173EC;
		  /* 821173ECh */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821173ECh case    4:*/		if ( regs.CR[6].eq ) { return 0x8211740C;  }
		/* 821173ECh case    4:*/		return 0x821173F0;
		  /* 821173F0h */ case    5:  		/* li R6, 512 */
		/* 821173F0h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x200);
		/* 821173F0h case    5:*/		return 0x821173F4;
		  /* 821173F4h */ case    6:  		/* lwz R4, <#[R31 + 128]> */
		/* 821173F4h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000080) );
		/* 821173F4h case    6:*/		return 0x821173F8;
		  /* 821173F8h */ case    7:  		/* li R5, 16 */
		/* 821173F8h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 821173F8h case    7:*/		return 0x821173FC;
		  /* 821173FCh */ case    8:  		/* mr R3, R31 */
		/* 821173FCh case    8:*/		regs.R3 = regs.R31;
		/* 821173FCh case    8:*/		return 0x82117400;
		  /* 82117400h */ case    9:  		/* bl -91920 */
		/* 82117400h case    9:*/		regs.LR = 0x82117404; return 0x82100CF0;
		/* 82117400h case    9:*/		return 0x82117404;
		  /* 82117404h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82117404h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117404h case   10:*/		return 0x82117408;
		  /* 82117408h */ case   11:  		/* bc 12, CR0_LT, 252 */
		/* 82117408h case   11:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117408h case   11:*/		return 0x8211740C;
	}
	return 0x8211740C;
} // Block from 821173DCh-8211740Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211740Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211740C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211740C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211740C);
		  /* 8211740Ch */ case    0:  		/* lis R6, 4 */
		/* 8211740Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R6,0x4);
		/* 8211740Ch case    0:*/		return 0x82117410;
		  /* 82117410h */ case    1:  		/* lwz R4, <#[R31 + 132]> */
		/* 82117410h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000084) );
		/* 82117410h case    1:*/		return 0x82117414;
		  /* 82117414h */ case    2:  		/* li R5, 32 */
		/* 82117414h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 82117414h case    2:*/		return 0x82117418;
		  /* 82117418h */ case    3:  		/* ori R6, R6, 8192 */
		/* 82117418h case    3:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x2000);
		/* 82117418h case    3:*/		return 0x8211741C;
		  /* 8211741Ch */ case    4:  		/* mr R3, R31 */
		/* 8211741Ch case    4:*/		regs.R3 = regs.R31;
		/* 8211741Ch case    4:*/		return 0x82117420;
		  /* 82117420h */ case    5:  		/* bl -91952 */
		/* 82117420h case    5:*/		regs.LR = 0x82117424; return 0x82100CF0;
		/* 82117420h case    5:*/		return 0x82117424;
		  /* 82117424h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82117424h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117424h case    6:*/		return 0x82117428;
		  /* 82117428h */ case    7:  		/* bc 12, CR0_LT, 220 */
		/* 82117428h case    7:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117428h case    7:*/		return 0x8211742C;
		  /* 8211742Ch */ case    8:  		/* lis R6, 4 */
		/* 8211742Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R6,0x4);
		/* 8211742Ch case    8:*/		return 0x82117430;
		  /* 82117430h */ case    9:  		/* lwz R4, <#[R31 + 180]> */
		/* 82117430h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000B4) );
		/* 82117430h case    9:*/		return 0x82117434;
		  /* 82117434h */ case   10:  		/* li R5, 8224 */
		/* 82117434h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2020);
		/* 82117434h case   10:*/		return 0x82117438;
		  /* 82117438h */ case   11:  		/* mr R3, R31 */
		/* 82117438h case   11:*/		regs.R3 = regs.R31;
		/* 82117438h case   11:*/		return 0x8211743C;
		  /* 8211743Ch */ case   12:  		/* bl -91980 */
		/* 8211743Ch case   12:*/		regs.LR = 0x82117440; return 0x82100CF0;
		/* 8211743Ch case   12:*/		return 0x82117440;
		  /* 82117440h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82117440h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117440h case   13:*/		return 0x82117444;
		  /* 82117444h */ case   14:  		/* bc 12, CR0_LT, 192 */
		/* 82117444h case   14:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117444h case   14:*/		return 0x82117448;
		  /* 82117448h */ case   15:  		/* lis R5, 4 */
		/* 82117448h case   15:*/		cpu::op::lis<0>(regs,&regs.R5,0x4);
		/* 82117448h case   15:*/		return 0x8211744C;
		  /* 8211744Ch */ case   16:  		/* lwz R4, <#[R31 + 184]> */
		/* 8211744Ch case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000B8) );
		/* 8211744Ch case   16:*/		return 0x82117450;
		  /* 82117450h */ case   17:  		/* li R6, 8192 */
		/* 82117450h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x2000);
		/* 82117450h case   17:*/		return 0x82117454;
		  /* 82117454h */ case   18:  		/* ori R5, R5, 32 */
		/* 82117454h case   18:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x20);
		/* 82117454h case   18:*/		return 0x82117458;
		  /* 82117458h */ case   19:  		/* mr R3, R31 */
		/* 82117458h case   19:*/		regs.R3 = regs.R31;
		/* 82117458h case   19:*/		return 0x8211745C;
		  /* 8211745Ch */ case   20:  		/* bl -92012 */
		/* 8211745Ch case   20:*/		regs.LR = 0x82117460; return 0x82100CF0;
		/* 8211745Ch case   20:*/		return 0x82117460;
		  /* 82117460h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 82117460h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117460h case   21:*/		return 0x82117464;
		  /* 82117464h */ case   22:  		/* bc 12, CR0_LT, 160 */
		/* 82117464h case   22:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117464h case   22:*/		return 0x82117468;
		  /* 82117468h */ case   23:  		/* lwz R11, <#[R31 + 200]> */
		/* 82117468h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C8) );
		/* 82117468h case   23:*/		return 0x8211746C;
		  /* 8211746Ch */ case   24:  		/* lis R10, -1 */
		/* 8211746Ch case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8211746Ch case   24:*/		return 0x82117470;
		  /* 82117470h */ case   25:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82117470h case   25:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82117470h case   25:*/		return 0x82117474;
		  /* 82117474h */ case   26:  		/* cmplw CR6, R11, R10 */
		/* 82117474h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82117474h case   26:*/		return 0x82117478;
		  /* 82117478h */ case   27:  		/* bc 12, CR6_EQ, 32 */
		/* 82117478h case   27:*/		if ( regs.CR[6].eq ) { return 0x82117498;  }
		/* 82117478h case   27:*/		return 0x8211747C;
		  /* 8211747Ch */ case   28:  		/* li R6, 0 */
		/* 8211747Ch case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211747Ch case   28:*/		return 0x82117480;
		  /* 82117480h */ case   29:  		/* lwz R4, <#[R31 + 148]> */
		/* 82117480h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000094) );
		/* 82117480h case   29:*/		return 0x82117484;
		  /* 82117484h */ case   30:  		/* li R5, 128 */
		/* 82117484h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x80);
		/* 82117484h case   30:*/		return 0x82117488;
		  /* 82117488h */ case   31:  		/* mr R3, R31 */
		/* 82117488h case   31:*/		regs.R3 = regs.R31;
		/* 82117488h case   31:*/		return 0x8211748C;
		  /* 8211748Ch */ case   32:  		/* bl -92060 */
		/* 8211748Ch case   32:*/		regs.LR = 0x82117490; return 0x82100CF0;
		/* 8211748Ch case   32:*/		return 0x82117490;
		  /* 82117490h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 82117490h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117490h case   33:*/		return 0x82117494;
		  /* 82117494h */ case   34:  		/* bc 12, CR0_LT, 112 */
		/* 82117494h case   34:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117494h case   34:*/		return 0x82117498;
	}
	return 0x82117498;
} // Block from 8211740Ch-82117498h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82117498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117498);
		  /* 82117498h */ case    0:  		/* lwz R6, <#[R31 + 48]> */
		/* 82117498h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000030) );
		/* 82117498h case    0:*/		return 0x8211749C;
		  /* 8211749Ch */ case    1:  		/* cmplwi CR6, R6, 0 */
		/* 8211749Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8211749Ch case    1:*/		return 0x821174A0;
		  /* 821174A0h */ case    2:  		/* bc 12, CR6_EQ, 140 */
		/* 821174A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211752C;  }
		/* 821174A0h case    2:*/		return 0x821174A4;
		  /* 821174A4h */ case    3:  		/* addi R4, R1, 80 */
		/* 821174A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821174A4h case    3:*/		return 0x821174A8;
		  /* 821174A8h */ case    4:  		/* lwz R5, <#[R31 + 140]> */
		/* 821174A8h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000008C) );
		/* 821174A8h case    4:*/		return 0x821174AC;
		  /* 821174ACh */ case    5:  		/* mr R3, R31 */
		/* 821174ACh case    5:*/		regs.R3 = regs.R31;
		/* 821174ACh case    5:*/		return 0x821174B0;
		  /* 821174B0h */ case    6:  		/* bl -38840 */
		/* 821174B0h case    6:*/		regs.LR = 0x821174B4; return 0x8210DCF8;
		/* 821174B0h case    6:*/		return 0x821174B4;
		  /* 821174B4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 821174B4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821174B4h case    7:*/		return 0x821174B8;
		  /* 821174B8h */ case    8:  		/* bc 12, CR0_LT, 76 */
		/* 821174B8h case    8:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 821174B8h case    8:*/		return 0x821174BC;
		  /* 821174BCh */ case    9:  		/* li R5, 0 */
		/* 821174BCh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821174BCh case    9:*/		return 0x821174C0;
		  /* 821174C0h */ case   10:  		/* addi R4, R1, 80 */
		/* 821174C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821174C0h case   10:*/		return 0x821174C4;
		  /* 821174C4h */ case   11:  		/* mr R3, R31 */
		/* 821174C4h case   11:*/		regs.R3 = regs.R31;
		/* 821174C4h case   11:*/		return 0x821174C8;
		  /* 821174C8h */ case   12:  		/* bl -14840 */
		/* 821174C8h case   12:*/		regs.LR = 0x821174CC; return 0x82113AD0;
		/* 821174C8h case   12:*/		return 0x821174CC;
		  /* 821174CCh */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 821174CCh case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821174CCh case   13:*/		return 0x821174D0;
		  /* 821174D0h */ case   14:  		/* mr R3, R31 */
		/* 821174D0h case   14:*/		regs.R3 = regs.R31;
		/* 821174D0h case   14:*/		return 0x821174D4;
		  /* 821174D4h */ case   15:  		/* bc 4, CR0_LT, 56 */
		/* 821174D4h case   15:*/		if ( !regs.CR[0].lt ) { return 0x8211750C;  }
		/* 821174D4h case   15:*/		return 0x821174D8;
		  /* 821174D8h */ case   16:  		/* lis R6, 3 */
		/* 821174D8h case   16:*/		cpu::op::lis<0>(regs,&regs.R6,0x3);
		/* 821174D8h case   16:*/		return 0x821174DC;
		  /* 821174DCh */ case   17:  		/* lwz R4, <#[R31 + 136]> */
		/* 821174DCh case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000088) );
		/* 821174DCh case   17:*/		return 0x821174E0;
		  /* 821174E0h */ case   18:  		/* li R5, 2 */
		/* 821174E0h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821174E0h case   18:*/		return 0x821174E4;
		  /* 821174E4h */ case   19:  		/* ori R6, R6, 40 */
		/* 821174E4h case   19:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x28);
		/* 821174E4h case   19:*/		return 0x821174E8;
		  /* 821174E8h */ case   20:  		/* bl -92152 */
		/* 821174E8h case   20:*/		regs.LR = 0x821174EC; return 0x82100CF0;
		/* 821174E8h case   20:*/		return 0x821174EC;
		  /* 821174ECh */ case   21:  		/* or. R30, R3, R3 */
		/* 821174ECh case   21:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821174ECh case   21:*/		return 0x821174F0;
		  /* 821174F0h */ case   22:  		/* bc 4, CR0_LT, 40 */
		/* 821174F0h case   22:*/		if ( !regs.CR[0].lt ) { return 0x82117518;  }
		/* 821174F0h case   22:*/		return 0x821174F4;
		  /* 821174F4h */ case   23:  		/* addi R4, R1, 80 */
		/* 821174F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821174F4h case   23:*/		return 0x821174F8;
		  /* 821174F8h */ case   24:  		/* mr R3, R31 */
		/* 821174F8h case   24:*/		regs.R3 = regs.R31;
		/* 821174F8h case   24:*/		return 0x821174FC;
		  /* 821174FCh */ case   25:  		/* bl -72300 */
		/* 821174FCh case   25:*/		regs.LR = 0x82117500; return 0x82105A90;
		/* 821174FCh case   25:*/		return 0x82117500;
		  /* 82117500h */ case   26:  		/* mr R3, R30 */
		/* 82117500h case   26:*/		regs.R3 = regs.R30;
		/* 82117500h case   26:*/		return 0x82117504;
	}
	return 0x82117504;
} // Block from 82117498h-82117504h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82117504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117504);
		  /* 82117504h */ case    0:  		/* addi R1, R1, 256 */
		/* 82117504h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82117504h case    0:*/		return 0x82117508;
		  /* 82117508h */ case    1:  		/* b -549484 */
		/* 82117508h case    1:*/		return 0x8209129C;
		/* 82117508h case    1:*/		return 0x8211750C;
	}
	return 0x8211750C;
} // Block from 82117504h-8211750Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211750Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211750C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211750C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211750C);
		  /* 8211750Ch */ case    0:  		/* li R5, 1 */
		/* 8211750Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8211750Ch case    0:*/		return 0x82117510;
		  /* 82117510h */ case    1:  		/* addi R4, R1, 80 */
		/* 82117510h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117510h case    1:*/		return 0x82117514;
		  /* 82117514h */ case    2:  		/* bl -14916 */
		/* 82117514h case    2:*/		regs.LR = 0x82117518; return 0x82113AD0;
		/* 82117514h case    2:*/		return 0x82117518;
	}
	return 0x82117518;
} // Block from 8211750Ch-82117518h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117518);
		  /* 82117518h */ case    0:  		/* addi R4, R1, 80 */
		/* 82117518h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117518h case    0:*/		return 0x8211751C;
		  /* 8211751Ch */ case    1:  		/* mr R3, R31 */
		/* 8211751Ch case    1:*/		regs.R3 = regs.R31;
		/* 8211751Ch case    1:*/		return 0x82117520;
		  /* 82117520h */ case    2:  		/* bl -72336 */
		/* 82117520h case    2:*/		regs.LR = 0x82117524; return 0x82105A90;
		/* 82117520h case    2:*/		return 0x82117524;
		  /* 82117524h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82117524h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117524h case    3:*/		return 0x82117528;
		  /* 82117528h */ case    4:  		/* bc 12, CR0_LT, -36 */
		/* 82117528h case    4:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117528h case    4:*/		return 0x8211752C;
	}
	return 0x8211752C;
} // Block from 82117518h-8211752Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211752Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211752C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211752C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211752C);
		  /* 8211752Ch */ case    0:  		/* addi R4, R1, 80 */
		/* 8211752Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8211752Ch case    0:*/		return 0x82117530;
		  /* 82117530h */ case    1:  		/* lwz R6, <#[R31 + 44]> */
		/* 82117530h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 82117530h case    1:*/		return 0x82117534;
		  /* 82117534h */ case    2:  		/* mr R3, R31 */
		/* 82117534h case    2:*/		regs.R3 = regs.R31;
		/* 82117534h case    2:*/		return 0x82117538;
		  /* 82117538h */ case    3:  		/* lwz R5, <#[R31 + 136]> */
		/* 82117538h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000088) );
		/* 82117538h case    3:*/		return 0x8211753C;
		  /* 8211753Ch */ case    4:  		/* bl -38980 */
		/* 8211753Ch case    4:*/		regs.LR = 0x82117540; return 0x8210DCF8;
		/* 8211753Ch case    4:*/		return 0x82117540;
		  /* 82117540h */ case    5:  		/* or. R30, R3, R3 */
		/* 82117540h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82117540h case    5:*/		return 0x82117544;
		  /* 82117544h */ case    6:  		/* bc 12, CR0_LT, -80 */
		/* 82117544h case    6:*/		if ( regs.CR[0].lt ) { return 0x821174F4;  }
		/* 82117544h case    6:*/		return 0x82117548;
		  /* 82117548h */ case    7:  		/* li R5, 1 */
		/* 82117548h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82117548h case    7:*/		return 0x8211754C;
		  /* 8211754Ch */ case    8:  		/* addi R4, R1, 80 */
		/* 8211754Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8211754Ch case    8:*/		return 0x82117550;
		  /* 82117550h */ case    9:  		/* mr R3, R31 */
		/* 82117550h case    9:*/		regs.R3 = regs.R31;
		/* 82117550h case    9:*/		return 0x82117554;
		  /* 82117554h */ case   10:  		/* bl -14980 */
		/* 82117554h case   10:*/		regs.LR = 0x82117558; return 0x82113AD0;
		/* 82117554h case   10:*/		return 0x82117558;
		  /* 82117558h */ case   11:  		/* or. R30, R3, R3 */
		/* 82117558h case   11:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82117558h case   11:*/		return 0x8211755C;
		  /* 8211755Ch */ case   12:  		/* bc 12, CR0_LT, -104 */
		/* 8211755Ch case   12:*/		if ( regs.CR[0].lt ) { return 0x821174F4;  }
		/* 8211755Ch case   12:*/		return 0x82117560;
		  /* 82117560h */ case   13:  		/* addi R4, R1, 80 */
		/* 82117560h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117560h case   13:*/		return 0x82117564;
		  /* 82117564h */ case   14:  		/* mr R3, R31 */
		/* 82117564h case   14:*/		regs.R3 = regs.R31;
		/* 82117564h case   14:*/		return 0x82117568;
		  /* 82117568h */ case   15:  		/* bl -72408 */
		/* 82117568h case   15:*/		regs.LR = 0x8211756C; return 0x82105A90;
		/* 82117568h case   15:*/		return 0x8211756C;
		  /* 8211756Ch */ case   16:  		/* or. R30, R3, R3 */
		/* 8211756Ch case   16:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8211756Ch case   16:*/		return 0x82117570;
		  /* 82117570h */ case   17:  		/* bc 12, CR0_LT, -124 */
		/* 82117570h case   17:*/		if ( regs.CR[0].lt ) { return 0x821174F4;  }
		/* 82117570h case   17:*/		return 0x82117574;
		  /* 82117574h */ case   18:  		/* addi R4, R1, 80 */
		/* 82117574h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117574h case   18:*/		return 0x82117578;
		  /* 82117578h */ case   19:  		/* lwz R6, <#[R31 + 52]> */
		/* 82117578h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000034) );
		/* 82117578h case   19:*/		return 0x8211757C;
		  /* 8211757Ch */ case   20:  		/* mr R3, R31 */
		/* 8211757Ch case   20:*/		regs.R3 = regs.R31;
		/* 8211757Ch case   20:*/		return 0x82117580;
		  /* 82117580h */ case   21:  		/* lwz R5, <#[R31 + 144]> */
		/* 82117580h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000090) );
		/* 82117580h case   21:*/		return 0x82117584;
		  /* 82117584h */ case   22:  		/* bl -39052 */
		/* 82117584h case   22:*/		regs.LR = 0x82117588; return 0x8210DCF8;
		/* 82117584h case   22:*/		return 0x82117588;
		  /* 82117588h */ case   23:  		/* or. R30, R3, R3 */
		/* 82117588h case   23:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82117588h case   23:*/		return 0x8211758C;
		  /* 8211758Ch */ case   24:  		/* bc 12, CR0_LT, -152 */
		/* 8211758Ch case   24:*/		if ( regs.CR[0].lt ) { return 0x821174F4;  }
		/* 8211758Ch case   24:*/		return 0x82117590;
		  /* 82117590h */ case   25:  		/* li R5, 1 */
		/* 82117590h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82117590h case   25:*/		return 0x82117594;
		  /* 82117594h */ case   26:  		/* addi R4, R1, 80 */
		/* 82117594h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82117594h case   26:*/		return 0x82117598;
		  /* 82117598h */ case   27:  		/* mr R3, R31 */
		/* 82117598h case   27:*/		regs.R3 = regs.R31;
		/* 82117598h case   27:*/		return 0x8211759C;
		  /* 8211759Ch */ case   28:  		/* bl -15052 */
		/* 8211759Ch case   28:*/		regs.LR = 0x821175A0; return 0x82113AD0;
		/* 8211759Ch case   28:*/		return 0x821175A0;
		  /* 821175A0h */ case   29:  		/* or. R30, R3, R3 */
		/* 821175A0h case   29:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821175A0h case   29:*/		return 0x821175A4;
		  /* 821175A4h */ case   30:  		/* bc 12, CR0_LT, -176 */
		/* 821175A4h case   30:*/		if ( regs.CR[0].lt ) { return 0x821174F4;  }
		/* 821175A4h case   30:*/		return 0x821175A8;
		  /* 821175A8h */ case   31:  		/* addi R4, R1, 80 */
		/* 821175A8h case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821175A8h case   31:*/		return 0x821175AC;
		  /* 821175ACh */ case   32:  		/* mr R3, R31 */
		/* 821175ACh case   32:*/		regs.R3 = regs.R31;
		/* 821175ACh case   32:*/		return 0x821175B0;
		  /* 821175B0h */ case   33:  		/* bl -72480 */
		/* 821175B0h case   33:*/		regs.LR = 0x821175B4; return 0x82105A90;
		/* 821175B0h case   33:*/		return 0x821175B4;
		  /* 821175B4h */ case   34:  		/* or. R30, R3, R3 */
		/* 821175B4h case   34:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821175B4h case   34:*/		return 0x821175B8;
		  /* 821175B8h */ case   35:  		/* bc 12, CR0_LT, -196 */
		/* 821175B8h case   35:*/		if ( regs.CR[0].lt ) { return 0x821174F4;  }
		/* 821175B8h case   35:*/		return 0x821175BC;
		  /* 821175BCh */ case   36:  		/* lwz R11, <#[R31 + 204]> */
		/* 821175BCh case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 821175BCh case   36:*/		return 0x821175C0;
		  /* 821175C0h */ case   37:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821175C0h case   37:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821175C0h case   37:*/		return 0x821175C4;
		  /* 821175C4h */ case   38:  		/* bc 4, CR0_EQ, 504 */
		/* 821175C4h case   38:*/		if ( !regs.CR[0].eq ) { return 0x821177BC;  }
		/* 821175C4h case   38:*/		return 0x821175C8;
		  /* 821175C8h */ case   39:  		/* lwz R10, <#[R31 + 8]> */
		/* 821175C8h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821175C8h case   39:*/		return 0x821175CC;
		  /* 821175CCh */ case   40:  		/* li R27, 0 */
		/* 821175CCh case   40:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821175CCh case   40:*/		return 0x821175D0;
		  /* 821175D0h */ case   41:  		/* li R11, 0 */
		/* 821175D0h case   41:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821175D0h case   41:*/		return 0x821175D4;
		  /* 821175D4h */ case   42:  		/* cmplwi CR6, R10, 0 */
		/* 821175D4h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821175D4h case   42:*/		return 0x821175D8;
		  /* 821175D8h */ case   43:  		/* bc 4, CR6_GT, 40 */
		/* 821175D8h case   43:*/		if ( !regs.CR[6].gt ) { return 0x82117600;  }
		/* 821175D8h case   43:*/		return 0x821175DC;
		  /* 821175DCh */ case   44:  		/* li R10, 0 */
		/* 821175DCh case   44:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821175DCh case   44:*/		return 0x821175E0;
		  /* 821175E0h */ case   45:  		/* lwz R9, <#[R31 + 20]> */
		/* 821175E0h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 821175E0h case   45:*/		return 0x821175E4;
		  /* 821175E4h */ case   46:  		/* lwzx R9, <#[R9 + R10]> */
		/* 821175E4h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821175E4h case   46:*/		return 0x821175E8;
		  /* 821175E8h */ case   47:  		/* addi R10, R10, 4 */
		/* 821175E8h case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821175E8h case   47:*/		return 0x821175EC;
		  /* 821175ECh */ case   48:  		/* stw R11, <#[R9 + 48]> */
		/* 821175ECh case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000030) );
		/* 821175ECh case   48:*/		return 0x821175F0;
		  /* 821175F0h */ case   49:  		/* addi R11, R11, 1 */
		/* 821175F0h case   49:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821175F0h case   49:*/		return 0x821175F4;
		  /* 821175F4h */ case   50:  		/* lwz R9, <#[R31 + 8]> */
		/* 821175F4h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821175F4h case   50:*/		return 0x821175F8;
		  /* 821175F8h */ case   51:  		/* cmplw CR6, R11, R9 */
		/* 821175F8h case   51:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821175F8h case   51:*/		return 0x821175FC;
		  /* 821175FCh */ case   52:  		/* bc 12, CR6_LT, -28 */
		/* 821175FCh case   52:*/		if ( regs.CR[6].lt ) { return 0x821175E0;  }
		/* 821175FCh case   52:*/		return 0x82117600;
	}
	return 0x82117600;
} // Block from 8211752Ch-82117600h (53 instructions)

//////////////////////////////////////////////////////
// Block at 82117600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117600);
		  /* 82117600h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82117600h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117600h case    0:*/		return 0x82117604;
		  /* 82117604h */ case    1:  		/* li R28, 0 */
		/* 82117604h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82117604h case    1:*/		return 0x82117608;
		  /* 82117608h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82117608h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117608h case    2:*/		return 0x8211760C;
		  /* 8211760Ch */ case    3:  		/* bc 4, CR6_GT, 432 */
		/* 8211760Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x821177BC;  }
		/* 8211760Ch case    3:*/		return 0x82117610;
		  /* 82117610h */ case    4:  		/* li R29, 0 */
		/* 82117610h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82117610h case    4:*/		return 0x82117614;
		  /* 82117614h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 82117614h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82117614h case    5:*/		return 0x82117618;
		  /* 82117618h */ case    6:  		/* lis R10, 4096 */
		/* 82117618h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 82117618h case    6:*/		return 0x8211761C;
		  /* 8211761Ch */ case    7:  		/* lwzx R9, <#[R29 + R11]> */
		/* 8211761Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8211761Ch case    7:*/		return 0x82117620;
		  /* 82117620h */ case    8:  		/* lwz R11, <#[R9]> */
		/* 82117620h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82117620h case    8:*/		return 0x82117624;
		  /* 82117624h */ case    9:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 82117624h case    9:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 82117624h case    9:*/		return 0x82117628;
		  /* 82117628h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 82117628h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82117628h case   10:*/		return 0x8211762C;
		  /* 8211762Ch */ case   11:  		/* bc 4, CR6_EQ, 324 */
		/* 8211762Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x82117770;  }
		/* 8211762Ch case   11:*/		return 0x82117630;
		  /* 82117630h */ case   12:  		/* lwz R11, <#[R9 + 12]> */
		/* 82117630h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 82117630h case   12:*/		return 0x82117634;
		  /* 82117634h */ case   13:  		/* li R3, 0 */
		/* 82117634h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82117634h case   13:*/		return 0x82117638;
		  /* 82117638h */ case   14:  		/* li R30, 0 */
		/* 82117638h case   14:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82117638h case   14:*/		return 0x8211763C;
		  /* 8211763Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8211763Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211763Ch case   15:*/		return 0x82117640;
		  /* 82117640h */ case   16:  		/* bc 4, CR6_GT, 252 */
		/* 82117640h case   16:*/		if ( !regs.CR[6].gt ) { return 0x8211773C;  }
		/* 82117640h case   16:*/		return 0x82117644;
		  /* 82117644h */ case   17:  		/* li R4, 0 */
		/* 82117644h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82117644h case   17:*/		return 0x82117648;
		  /* 82117648h */ case   18:  		/* li R8, 0 */
		/* 82117648h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82117648h case   18:*/		return 0x8211764C;
		  /* 8211764Ch */ case   19:  		/* lwz R7, <#[R9 + 16]> */
		/* 8211764Ch case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000010) );
		/* 8211764Ch case   19:*/		return 0x82117650;
		  /* 82117650h */ case   20:  		/* lwz R11, <#[R9 + 8]> */
		/* 82117650h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 82117650h case   20:*/		return 0x82117654;
		  /* 82117654h */ case   21:  		/* lwz R26, <#[R31 + 20]> */
		/* 82117654h case   21:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x00000014) );
		/* 82117654h case   21:*/		return 0x82117658;
		  /* 82117658h */ case   22:  		/* lwzx R6, <#[R8 + R7]> */
		/* 82117658h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 82117658h case   22:*/		return 0x8211765C;
		  /* 8211765Ch */ case   23:  		/* lwzx R5, <#[R8 + R11]> */
		/* 8211765Ch case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8211765Ch case   23:*/		return 0x82117660;
		  /* 82117660h */ case   24:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 82117660h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 82117660h case   24:*/		return 0x82117664;
		  /* 82117664h */ case   25:  		/* rlwinm R25, R5, 2, 0, 29 */
		/* 82117664h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R5);
		/* 82117664h case   25:*/		return 0x82117668;
		  /* 82117668h */ case   26:  		/* lwzx R10, <#[R11 + R26]> */
		/* 82117668h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82117668h case   26:*/		return 0x8211766C;
		  /* 8211766Ch */ case   27:  		/* lwzx R11, <#[R25 + R26]> */
		/* 8211766Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + regs.R26 + 0x00000000) );
		/* 8211766Ch case   27:*/		return 0x82117670;
		  /* 82117670h */ case   28:  		/* lwz R26, <#[R10 + 4]> */
		/* 82117670h case   28:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000004) );
		/* 82117670h case   28:*/		return 0x82117674;
		  /* 82117674h */ case   29:  		/* lwz R25, <#[R11 + 4]> */
		/* 82117674h case   29:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000004) );
		/* 82117674h case   29:*/		return 0x82117678;
		  /* 82117678h */ case   30:  		/* cmplw CR6, R26, R25 */
		/* 82117678h case   30:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 82117678h case   30:*/		return 0x8211767C;
		  /* 8211767Ch */ case   31:  		/* bc 4, CR6_EQ, 148 */
		/* 8211767Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 8211767Ch case   31:*/		return 0x82117680;
		  /* 82117680h */ case   32:  		/* lwz R26, <#[R10 + 8]> */
		/* 82117680h case   32:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000008) );
		/* 82117680h case   32:*/		return 0x82117684;
		  /* 82117684h */ case   33:  		/* lwz R25, <#[R11 + 8]> */
		/* 82117684h case   33:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000008) );
		/* 82117684h case   33:*/		return 0x82117688;
		  /* 82117688h */ case   34:  		/* cmplw CR6, R26, R25 */
		/* 82117688h case   34:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 82117688h case   34:*/		return 0x8211768C;
		  /* 8211768Ch */ case   35:  		/* bc 4, CR6_EQ, 132 */
		/* 8211768Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 8211768Ch case   35:*/		return 0x82117690;
		  /* 82117690h */ case   36:  		/* lwz R26, <#[R10 + 12]> */
		/* 82117690h case   36:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x0000000C) );
		/* 82117690h case   36:*/		return 0x82117694;
		  /* 82117694h */ case   37:  		/* lwz R25, <#[R11 + 12]> */
		/* 82117694h case   37:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x0000000C) );
		/* 82117694h case   37:*/		return 0x82117698;
		  /* 82117698h */ case   38:  		/* cmplw CR6, R26, R25 */
		/* 82117698h case   38:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 82117698h case   38:*/		return 0x8211769C;
		  /* 8211769Ch */ case   39:  		/* bc 4, CR6_EQ, 116 */
		/* 8211769Ch case   39:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 8211769Ch case   39:*/		return 0x821176A0;
		  /* 821176A0h */ case   40:  		/* lwz R26, <#[R10 + 16]> */
		/* 821176A0h case   40:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000010) );
		/* 821176A0h case   40:*/		return 0x821176A4;
		  /* 821176A4h */ case   41:  		/* lwz R25, <#[R11 + 16]> */
		/* 821176A4h case   41:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000010) );
		/* 821176A4h case   41:*/		return 0x821176A8;
		  /* 821176A8h */ case   42:  		/* cmplw CR6, R26, R25 */
		/* 821176A8h case   42:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 821176A8h case   42:*/		return 0x821176AC;
		  /* 821176ACh */ case   43:  		/* bc 4, CR6_EQ, 100 */
		/* 821176ACh case   43:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 821176ACh case   43:*/		return 0x821176B0;
		  /* 821176B0h */ case   44:  		/* lwz R26, <#[R10 + 20]> */
		/* 821176B0h case   44:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000014) );
		/* 821176B0h case   44:*/		return 0x821176B4;
		  /* 821176B4h */ case   45:  		/* lwz R25, <#[R11 + 20]> */
		/* 821176B4h case   45:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000014) );
		/* 821176B4h case   45:*/		return 0x821176B8;
		  /* 821176B8h */ case   46:  		/* cmplw CR6, R26, R25 */
		/* 821176B8h case   46:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 821176B8h case   46:*/		return 0x821176BC;
		  /* 821176BCh */ case   47:  		/* bc 4, CR6_EQ, 84 */
		/* 821176BCh case   47:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 821176BCh case   47:*/		return 0x821176C0;
		  /* 821176C0h */ case   48:  		/* lwz R26, <#[R10 + 24]> */
		/* 821176C0h case   48:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000018) );
		/* 821176C0h case   48:*/		return 0x821176C4;
		  /* 821176C4h */ case   49:  		/* lwz R25, <#[R11 + 24]> */
		/* 821176C4h case   49:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000018) );
		/* 821176C4h case   49:*/		return 0x821176C8;
		  /* 821176C8h */ case   50:  		/* cmpw CR6, R26, R25 */
		/* 821176C8h case   50:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R25);
		/* 821176C8h case   50:*/		return 0x821176CC;
		  /* 821176CCh */ case   51:  		/* bc 4, CR6_EQ, 68 */
		/* 821176CCh case   51:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 821176CCh case   51:*/		return 0x821176D0;
		  /* 821176D0h */ case   52:  		/* lwz R26, <#[R10 + 60]> */
		/* 821176D0h case   52:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x0000003C) );
		/* 821176D0h case   52:*/		return 0x821176D4;
		  /* 821176D4h */ case   53:  		/* cmplwi CR6, R26, 0 */
		/* 821176D4h case   53:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821176D4h case   53:*/		return 0x821176D8;
		  /* 821176D8h */ case   54:  		/* bc 4, CR6_EQ, 56 */
		/* 821176D8h case   54:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 821176D8h case   54:*/		return 0x821176DC;
		  /* 821176DCh */ case   55:  		/* lwz R11, <#[R11 + 60]> */
		/* 821176DCh case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 821176DCh case   55:*/		return 0x821176E0;
		  /* 821176E0h */ case   56:  		/* cmplwi CR6, R11, 0 */
		/* 821176E0h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821176E0h case   56:*/		return 0x821176E4;
		  /* 821176E4h */ case   57:  		/* bc 4, CR6_EQ, 44 */
		/* 821176E4h case   57:*/		if ( !regs.CR[6].eq ) { return 0x82117710;  }
		/* 821176E4h case   57:*/		return 0x821176E8;
		  /* 821176E8h */ case   58:  		/* cmpwi CR6, R5, -1 */
		/* 821176E8h case   58:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 821176E8h case   58:*/		return 0x821176EC;
		  /* 821176ECh */ case   59:  		/* bc 12, CR6_EQ, 24 */
		/* 821176ECh case   59:*/		if ( regs.CR[6].eq ) { return 0x82117704;  }
		/* 821176ECh case   59:*/		return 0x821176F0;
		  /* 821176F0h */ case   60:  		/* lwz R11, <#[R31 + 20]> */
		/* 821176F0h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821176F0h case   60:*/		return 0x821176F4;
		  /* 821176F4h */ case   61:  		/* rlwinm R7, R5, 2, 0, 29 */
		/* 821176F4h case   61:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R5);
		/* 821176F4h case   61:*/		return 0x821176F8;
		  /* 821176F8h */ case   62:  		/* lwzx R11, <#[R7 + R11]> */
		/* 821176F8h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821176F8h case   62:*/		return 0x821176FC;
		  /* 821176FCh */ case   63:  		/* lwz R11, <#[R11 + 48]> */
		/* 821176FCh case   63:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821176FCh case   63:*/		return 0x82117700;
		  /* 82117700h */ case   64:  		/* b 8 */
		/* 82117700h case   64:*/		return 0x82117708;
		/* 82117700h case   64:*/		return 0x82117704;
	}
	return 0x82117704;
} // Block from 82117600h-82117704h (65 instructions)

//////////////////////////////////////////////////////
// Block at 82117704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117704);
		  /* 82117704h */ case    0:  		/* li R11, -1 */
		/* 82117704h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82117704h case    0:*/		return 0x82117708;
	}
	return 0x82117708;
} // Block from 82117704h-82117708h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117708);
		  /* 82117708h */ case    0:  		/* stw R11, <#[R10 + 48]> */
		/* 82117708h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000030) );
		/* 82117708h case    0:*/		return 0x8211770C;
		  /* 8211770Ch */ case    1:  		/* b 28 */
		/* 8211770Ch case    1:*/		return 0x82117728;
		/* 8211770Ch case    1:*/		return 0x82117710;
	}
	return 0x82117710;
} // Block from 82117708h-82117710h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82117710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117710);
		  /* 82117710h */ case    0:  		/* stwx R6, <#[R4 + R7]> */
		/* 82117710h case    0:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R4 + regs.R7 + 0x00000000) );
		/* 82117710h case    0:*/		return 0x82117714;
		  /* 82117714h */ case    1:  		/* addi R3, R3, 1 */
		/* 82117714h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 82117714h case    1:*/		return 0x82117718;
		  /* 82117718h */ case    2:  		/* lwz R11, <#[R9 + 8]> */
		/* 82117718h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 82117718h case    2:*/		return 0x8211771C;
		  /* 8211771Ch */ case    3:  		/* lwzx R10, <#[R8 + R11]> */
		/* 8211771Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8211771Ch case    3:*/		return 0x82117720;
		  /* 82117720h */ case    4:  		/* stwx R10, <#[R4 + R11]> */
		/* 82117720h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 82117720h case    4:*/		return 0x82117724;
		  /* 82117724h */ case    5:  		/* addi R4, R4, 4 */
		/* 82117724h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x4);
		/* 82117724h case    5:*/		return 0x82117728;
	}
	return 0x82117728;
} // Block from 82117710h-82117728h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117728);
		  /* 82117728h */ case    0:  		/* lwz R11, <#[R9 + 12]> */
		/* 82117728h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 82117728h case    0:*/		return 0x8211772C;
		  /* 8211772Ch */ case    1:  		/* addi R30, R30, 1 */
		/* 8211772Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8211772Ch case    1:*/		return 0x82117730;
		  /* 82117730h */ case    2:  		/* addi R8, R8, 4 */
		/* 82117730h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82117730h case    2:*/		return 0x82117734;
		  /* 82117734h */ case    3:  		/* cmplw CR6, R30, R11 */
		/* 82117734h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82117734h case    3:*/		return 0x82117738;
		  /* 82117738h */ case    4:  		/* bc 12, CR6_LT, -236 */
		/* 82117738h case    4:*/		if ( regs.CR[6].lt ) { return 0x8211764C;  }
		/* 82117738h case    4:*/		return 0x8211773C;
	}
	return 0x8211773C;
} // Block from 82117728h-8211773Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211773Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211773C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211773C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211773C);
		  /* 8211773Ch */ case    0:  		/* lwz R11, <#[R9 + 12]> */
		/* 8211773Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 8211773Ch case    0:*/		return 0x82117740;
		  /* 82117740h */ case    1:  		/* cmplw CR6, R3, R11 */
		/* 82117740h case    1:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82117740h case    1:*/		return 0x82117744;
		  /* 82117744h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 82117744h case    2:*/		if ( regs.CR[6].eq ) { return 0x82117770;  }
		/* 82117744h case    2:*/		return 0x82117748;
		  /* 82117748h */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 82117748h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82117748h case    3:*/		return 0x8211774C;
		  /* 8211774Ch */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8211774Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8211775C;  }
		/* 8211774Ch case    4:*/		return 0x82117750;
		  /* 82117750h */ case    5:  		/* rlwinm R11, R3, 0, 12, 31 */
		/* 82117750h case    5:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R3);
		/* 82117750h case    5:*/		return 0x82117754;
		  /* 82117754h */ case    6:  		/* oris R11, R11, 4096 */
		/* 82117754h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 82117754h case    6:*/		return 0x82117758;
		  /* 82117758h */ case    7:  		/* b 8 */
		/* 82117758h case    7:*/		return 0x82117760;
		/* 82117758h case    7:*/		return 0x8211775C;
	}
	return 0x8211775C;
} // Block from 8211773Ch-8211775Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211775Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211775C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211775C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211775C);
		  /* 8211775Ch */ case    0:  		/* li R11, 0 */
		/* 8211775Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211775Ch case    0:*/		return 0x82117760;
	}
	return 0x82117760;
} // Block from 8211775Ch-82117760h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117760);
		  /* 82117760h */ case    0:  		/* stw R11, <#[R9]> */
		/* 82117760h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82117760h case    0:*/		return 0x82117764;
		  /* 82117764h */ case    1:  		/* li R27, 1 */
		/* 82117764h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82117764h case    1:*/		return 0x82117768;
		  /* 82117768h */ case    2:  		/* stw R3, <#[R9 + 4]> */
		/* 82117768h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + 0x00000004) );
		/* 82117768h case    2:*/		return 0x8211776C;
		  /* 8211776Ch */ case    3:  		/* stw R3, <#[R9 + 12]> */
		/* 8211776Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + 0x0000000C) );
		/* 8211776Ch case    3:*/		return 0x82117770;
	}
	return 0x82117770;
} // Block from 82117760h-82117770h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82117770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117770);
		  /* 82117770h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82117770h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117770h case    0:*/		return 0x82117774;
		  /* 82117774h */ case    1:  		/* addi R28, R28, 1 */
		/* 82117774h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82117774h case    1:*/		return 0x82117778;
		  /* 82117778h */ case    2:  		/* addi R29, R29, 4 */
		/* 82117778h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82117778h case    2:*/		return 0x8211777C;
		  /* 8211777Ch */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 8211777Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8211777Ch case    3:*/		return 0x82117780;
		  /* 82117780h */ case    4:  		/* bc 12, CR6_LT, -364 */
		/* 82117780h case    4:*/		if ( regs.CR[6].lt ) { return 0x82117614;  }
		/* 82117780h case    4:*/		return 0x82117784;
		  /* 82117784h */ case    5:  		/* cmpwi CR6, R27, 0 */
		/* 82117784h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82117784h case    5:*/		return 0x82117788;
		  /* 82117788h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 82117788h case    6:*/		if ( regs.CR[6].eq ) { return 0x821177BC;  }
		/* 82117788h case    6:*/		return 0x8211778C;
		  /* 8211778Ch */ case    7:  		/* mr R3, R31 */
		/* 8211778Ch case    7:*/		regs.R3 = regs.R31;
		/* 8211778Ch case    7:*/		return 0x82117790;
		  /* 82117790h */ case    8:  		/* bl -70512 */
		/* 82117790h case    8:*/		regs.LR = 0x82117794; return 0x82106420;
		/* 82117790h case    8:*/		return 0x82117794;
		  /* 82117794h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82117794h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117794h case    9:*/		return 0x82117798;
		  /* 82117798h */ case   10:  		/* bc 12, CR0_LT, -660 */
		/* 82117798h case   10:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 82117798h case   10:*/		return 0x8211779C;
		  /* 8211779Ch */ case   11:  		/* mr R3, R31 */
		/* 8211779Ch case   11:*/		regs.R3 = regs.R31;
		/* 8211779Ch case   11:*/		return 0x821177A0;
		  /* 821177A0h */ case   12:  		/* bl -54768 */
		/* 821177A0h case   12:*/		regs.LR = 0x821177A4; return 0x8210A1B0;
		/* 821177A0h case   12:*/		return 0x821177A4;
		  /* 821177A4h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 821177A4h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821177A4h case   13:*/		return 0x821177A8;
		  /* 821177A8h */ case   14:  		/* bc 12, CR0_LT, -676 */
		/* 821177A8h case   14:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 821177A8h case   14:*/		return 0x821177AC;
		  /* 821177ACh */ case   15:  		/* mr R3, R31 */
		/* 821177ACh case   15:*/		regs.R3 = regs.R31;
		/* 821177ACh case   15:*/		return 0x821177B0;
		  /* 821177B0h */ case   16:  		/* bl -88912 */
		/* 821177B0h case   16:*/		regs.LR = 0x821177B4; return 0x82101C60;
		/* 821177B0h case   16:*/		return 0x821177B4;
		  /* 821177B4h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 821177B4h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821177B4h case   17:*/		return 0x821177B8;
		  /* 821177B8h */ case   18:  		/* bc 12, CR0_LT, -692 */
		/* 821177B8h case   18:*/		if ( regs.CR[0].lt ) { return 0x82117504;  }
		/* 821177B8h case   18:*/		return 0x821177BC;
	}
	return 0x821177BC;
} // Block from 82117770h-821177BCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821177BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821177BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821177BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821177BC);
		  /* 821177BCh */ case    0:  		/* li R3, 0 */
		/* 821177BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821177BCh case    0:*/		return 0x821177C0;
		  /* 821177C0h */ case    1:  		/* b -700 */
		/* 821177C0h case    1:*/		return 0x82117504;
		/* 821177C0h case    1:*/		return 0x821177C4;
		  /* 821177C4h */ case    2:  		/* nop */
		/* 821177C4h case    2:*/		cpu::op::nop();
		/* 821177C4h case    2:*/		return 0x821177C8;
	}
	return 0x821177C8;
} // Block from 821177BCh-821177C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821177C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821177C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821177C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821177C8);
		  /* 821177C8h */ case    0:  		/* mfspr R12, LR */
		/* 821177C8h case    0:*/		regs.R12 = regs.LR;
		/* 821177C8h case    0:*/		return 0x821177CC;
		  /* 821177CCh */ case    1:  		/* bl -550260 */
		/* 821177CCh case    1:*/		regs.LR = 0x821177D0; return 0x82091258;
		/* 821177CCh case    1:*/		return 0x821177D0;
		  /* 821177D0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821177D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821177D0h case    2:*/		return 0x821177D4;
		  /* 821177D4h */ case    3:  		/* mr R31, R3 */
		/* 821177D4h case    3:*/		regs.R31 = regs.R3;
		/* 821177D4h case    3:*/		return 0x821177D8;
		  /* 821177D8h */ case    4:  		/* bl -36656 */
		/* 821177D8h case    4:*/		regs.LR = 0x821177DC; return 0x8210E8A8;
		/* 821177D8h case    4:*/		return 0x821177DC;
		  /* 821177DCh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 821177DCh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821177DCh case    5:*/		return 0x821177E0;
		  /* 821177E0h */ case    6:  		/* bc 12, CR0_LT, 1036 */
		/* 821177E0h case    6:*/		if ( regs.CR[0].lt ) { return 0x82117BEC;  }
		/* 821177E0h case    6:*/		return 0x821177E4;
		  /* 821177E4h */ case    7:  		/* mr R3, R31 */
		/* 821177E4h case    7:*/		regs.R3 = regs.R31;
		/* 821177E4h case    7:*/		return 0x821177E8;
		  /* 821177E8h */ case    8:  		/* bl -67456 */
		/* 821177E8h case    8:*/		regs.LR = 0x821177EC; return 0x82107068;
		/* 821177E8h case    8:*/		return 0x821177EC;
		  /* 821177ECh */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 821177ECh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821177ECh case    9:*/		return 0x821177F0;
		  /* 821177F0h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821177F0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821177FC;  }
		/* 821177F0h case   10:*/		return 0x821177F4;
		  /* 821177F4h */ case   11:  		/* cmpwi CR6, R3, 0 */
		/* 821177F4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821177F4h case   11:*/		return 0x821177F8;
		  /* 821177F8h */ case   12:  		/* bc 12, CR6_LT, 1012 */
		/* 821177F8h case   12:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 821177F8h case   12:*/		return 0x821177FC;
	}
	return 0x821177FC;
} // Block from 821177C8h-821177FCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821177FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821177FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821177FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821177FC);
		  /* 821177FCh */ case    0:  		/* mr R3, R31 */
		/* 821177FCh case    0:*/		regs.R3 = regs.R31;
		/* 821177FCh case    0:*/		return 0x82117800;
		  /* 82117800h */ case    1:  		/* bl -65688 */
		/* 82117800h case    1:*/		regs.LR = 0x82117804; return 0x82107768;
		/* 82117800h case    1:*/		return 0x82117804;
		  /* 82117804h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117804h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117804h case    2:*/		return 0x82117808;
		  /* 82117808h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117808h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117814;  }
		/* 82117808h case    3:*/		return 0x8211780C;
		  /* 8211780Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 8211780Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8211780Ch case    4:*/		return 0x82117810;
		  /* 82117810h */ case    5:  		/* bc 12, CR6_LT, 988 */
		/* 82117810h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117810h case    5:*/		return 0x82117814;
	}
	return 0x82117814;
} // Block from 821177FCh-82117814h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117814);
		  /* 82117814h */ case    0:  		/* mr R3, R31 */
		/* 82117814h case    0:*/		regs.R3 = regs.R31;
		/* 82117814h case    0:*/		return 0x82117818;
		  /* 82117818h */ case    1:  		/* bl -89016 */
		/* 82117818h case    1:*/		regs.LR = 0x8211781C; return 0x82101C60;
		/* 82117818h case    1:*/		return 0x8211781C;
		  /* 8211781Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8211781Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211781Ch case    2:*/		return 0x82117820;
		  /* 82117820h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117820h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211782C;  }
		/* 82117820h case    3:*/		return 0x82117824;
		  /* 82117824h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117824h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117824h case    4:*/		return 0x82117828;
		  /* 82117828h */ case    5:  		/* bc 12, CR6_LT, 964 */
		/* 82117828h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117828h case    5:*/		return 0x8211782C;
	}
	return 0x8211782C;
} // Block from 82117814h-8211782Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211782Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211782C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211782C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211782C);
		  /* 8211782Ch */ case    0:  		/* mr R3, R31 */
		/* 8211782Ch case    0:*/		regs.R3 = regs.R31;
		/* 8211782Ch case    0:*/		return 0x82117830;
		  /* 82117830h */ case    1:  		/* bl -54912 */
		/* 82117830h case    1:*/		regs.LR = 0x82117834; return 0x8210A1B0;
		/* 82117830h case    1:*/		return 0x82117834;
		  /* 82117834h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117834h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117834h case    2:*/		return 0x82117838;
		  /* 82117838h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117838h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117844;  }
		/* 82117838h case    3:*/		return 0x8211783C;
		  /* 8211783Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 8211783Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8211783Ch case    4:*/		return 0x82117840;
		  /* 82117840h */ case    5:  		/* bc 12, CR6_LT, 940 */
		/* 82117840h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117840h case    5:*/		return 0x82117844;
	}
	return 0x82117844;
} // Block from 8211782Ch-82117844h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117844);
		  /* 82117844h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82117844h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117844h case    0:*/		return 0x82117848;
		  /* 82117848h */ case    1:  		/* li R28, 1 */
		/* 82117848h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82117848h case    1:*/		return 0x8211784C;
		  /* 8211784Ch */ case    2:  		/* li R9, 0 */
		/* 8211784Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8211784Ch case    2:*/		return 0x82117850;
		  /* 82117850h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82117850h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117850h case    3:*/		return 0x82117854;
		  /* 82117854h */ case    4:  		/* bc 4, CR6_GT, 68 */
		/* 82117854h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82117898;  }
		/* 82117854h case    4:*/		return 0x82117858;
		  /* 82117858h */ case    5:  		/* li R10, 0 */
		/* 82117858h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82117858h case    5:*/		return 0x8211785C;
		  /* 8211785Ch */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 8211785Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8211785Ch case    6:*/		return 0x82117860;
		  /* 82117860h */ case    7:  		/* lis R8, 4128 */
		/* 82117860h case    7:*/		cpu::op::lis<0>(regs,&regs.R8,0x1020);
		/* 82117860h case    7:*/		return 0x82117864;
		  /* 82117864h */ case    8:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82117864h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82117864h case    8:*/		return 0x82117868;
		  /* 82117868h */ case    9:  		/* lwz R7, <#[R11]> */
		/* 82117868h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82117868h case    9:*/		return 0x8211786C;
		  /* 8211786Ch */ case   10:  		/* rlwinm R7, R7, 0, 0, 11 */
		/* 8211786Ch case   10:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R7,regs.R7);
		/* 8211786Ch case   10:*/		return 0x82117870;
		  /* 82117870h */ case   11:  		/* cmplw CR6, R7, R8 */
		/* 82117870h case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 82117870h case   11:*/		return 0x82117874;
		  /* 82117874h */ case   12:  		/* bc 4, CR6_EQ, 16 */
		/* 82117874h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82117884;  }
		/* 82117874h case   12:*/		return 0x82117878;
		  /* 82117878h */ case   13:  		/* lwz R8, <#[R11 + 12]> */
		/* 82117878h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82117878h case   13:*/		return 0x8211787C;
		  /* 8211787Ch */ case   14:  		/* rlwimi R8, R28, 28, 0, 11 */
		/* 8211787Ch case   14:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R8,regs.R28);
		/* 8211787Ch case   14:*/		return 0x82117880;
		  /* 82117880h */ case   15:  		/* stw R8, <#[R11]> */
		/* 82117880h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82117880h case   15:*/		return 0x82117884;
	}
	return 0x82117884;
} // Block from 82117844h-82117884h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82117884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117884);
		  /* 82117884h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82117884h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82117884h case    0:*/		return 0x82117888;
		  /* 82117888h */ case    1:  		/* addi R9, R9, 1 */
		/* 82117888h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82117888h case    1:*/		return 0x8211788C;
		  /* 8211788Ch */ case    2:  		/* addi R10, R10, 4 */
		/* 8211788Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8211788Ch case    2:*/		return 0x82117890;
		  /* 82117890h */ case    3:  		/* cmplw CR6, R9, R11 */
		/* 82117890h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82117890h case    3:*/		return 0x82117894;
		  /* 82117894h */ case    4:  		/* bc 12, CR6_LT, -56 */
		/* 82117894h case    4:*/		if ( regs.CR[6].lt ) { return 0x8211785C;  }
		/* 82117894h case    4:*/		return 0x82117898;
	}
	return 0x82117898;
} // Block from 82117884h-82117898h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82117898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117898);
		  /* 82117898h */ case    0:  		/* lwz R11, <#[R31 + 204]> */
		/* 82117898h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 82117898h case    0:*/		return 0x8211789C;
		  /* 8211789Ch */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8211789Ch case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8211789Ch case    1:*/		return 0x821178A0;
		  /* 821178A0h */ case    2:  		/* bc 12, CR0_EQ, 36 */
		/* 821178A0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821178C4;  }
		/* 821178A0h case    2:*/		return 0x821178A4;
		  /* 821178A4h */ case    3:  		/* stw R28, <#[R31 + 216]> */
		/* 821178A4h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x000000D8) );
		/* 821178A4h case    3:*/		return 0x821178A8;
		  /* 821178A8h */ case    4:  		/* mr R3, R31 */
		/* 821178A8h case    4:*/		regs.R3 = regs.R31;
		/* 821178A8h case    4:*/		return 0x821178AC;
		  /* 821178ACh */ case    5:  		/* bl -65860 */
		/* 821178ACh case    5:*/		regs.LR = 0x821178B0; return 0x82107768;
		/* 821178ACh case    5:*/		return 0x821178B0;
		  /* 821178B0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821178B0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821178B0h case    6:*/		return 0x821178B4;
		  /* 821178B4h */ case    7:  		/* bc 12, CR0_EQ, 820 */
		/* 821178B4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82117BE8;  }
		/* 821178B4h case    7:*/		return 0x821178B8;
		  /* 821178B8h */ case    8:  		/* cmpwi CR6, R3, 0 */
		/* 821178B8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821178B8h case    8:*/		return 0x821178BC;
		  /* 821178BCh */ case    9:  		/* bc 12, CR6_LT, 816 */
		/* 821178BCh case    9:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 821178BCh case    9:*/		return 0x821178C0;
		  /* 821178C0h */ case   10:  		/* b 808 */
		/* 821178C0h case   10:*/		return 0x82117BE8;
		/* 821178C0h case   10:*/		return 0x821178C4;
	}
	return 0x821178C4;
} // Block from 82117898h-821178C4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821178C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821178C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821178C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821178C4);
		  /* 821178C4h */ case    0:  		/* mr R3, R31 */
		/* 821178C4h case    0:*/		regs.R3 = regs.R31;
		/* 821178C4h case    0:*/		return 0x821178C8;
		  /* 821178C8h */ case    1:  		/* bl -53568 */
		/* 821178C8h case    1:*/		regs.LR = 0x821178CC; return 0x8210A788;
		/* 821178C8h case    1:*/		return 0x821178CC;
		  /* 821178CCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 821178CCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821178CCh case    2:*/		return 0x821178D0;
		  /* 821178D0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821178D0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821178DC;  }
		/* 821178D0h case    3:*/		return 0x821178D4;
		  /* 821178D4h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 821178D4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821178D4h case    4:*/		return 0x821178D8;
		  /* 821178D8h */ case    5:  		/* bc 12, CR6_LT, 788 */
		/* 821178D8h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 821178D8h case    5:*/		return 0x821178DC;
	}
	return 0x821178DC;
} // Block from 821178C4h-821178DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821178DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821178DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821178DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821178DC);
		  /* 821178DCh */ case    0:  		/* mr R3, R31 */
		/* 821178DCh case    0:*/		regs.R3 = regs.R31;
		/* 821178DCh case    0:*/		return 0x821178E0;
		  /* 821178E0h */ case    1:  		/* bl -68592 */
		/* 821178E0h case    1:*/		regs.LR = 0x821178E4; return 0x82106CF0;
		/* 821178E0h case    1:*/		return 0x821178E4;
		  /* 821178E4h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 821178E4h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821178E4h case    2:*/		return 0x821178E8;
		  /* 821178E8h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821178E8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821178F4;  }
		/* 821178E8h case    3:*/		return 0x821178EC;
		  /* 821178ECh */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 821178ECh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821178ECh case    4:*/		return 0x821178F0;
		  /* 821178F0h */ case    5:  		/* bc 12, CR6_LT, 764 */
		/* 821178F0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 821178F0h case    5:*/		return 0x821178F4;
	}
	return 0x821178F4;
} // Block from 821178DCh-821178F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821178F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821178F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821178F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821178F4);
		  /* 821178F4h */ case    0:  		/* li R29, 0 */
		/* 821178F4h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821178F4h case    0:*/		return 0x821178F8;
		  /* 821178F8h */ case    1:  		/* mr R3, R31 */
		/* 821178F8h case    1:*/		regs.R3 = regs.R31;
		/* 821178F8h case    1:*/		return 0x821178FC;
		  /* 821178FCh */ case    2:  		/* bl -13484 */
		/* 821178FCh case    2:*/		regs.LR = 0x82117900; return 0x82114450;
		/* 821178FCh case    2:*/		return 0x82117900;
		  /* 82117900h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82117900h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117900h case    3:*/		return 0x82117904;
		  /* 82117904h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 82117904h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82117910;  }
		/* 82117904h case    4:*/		return 0x82117908;
		  /* 82117908h */ case    5:  		/* li R11, 0 */
		/* 82117908h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117908h case    5:*/		return 0x8211790C;
		  /* 8211790Ch */ case    6:  		/* b 16 */
		/* 8211790Ch case    6:*/		return 0x8211791C;
		/* 8211790Ch case    6:*/		return 0x82117910;
	}
	return 0x82117910;
} // Block from 821178F4h-82117910h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82117910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117910);
		  /* 82117910h */ case    0:  		/* mr R11, R3 */
		/* 82117910h case    0:*/		regs.R11 = regs.R3;
		/* 82117910h case    0:*/		return 0x82117914;
		  /* 82117914h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 82117914h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117914h case    1:*/		return 0x82117918;
		  /* 82117918h */ case    2:  		/* bc 12, CR6_LT, 724 */
		/* 82117918h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117918h case    2:*/		return 0x8211791C;
	}
	return 0x8211791C;
} // Block from 82117910h-8211791Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211791Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211791C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211791C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211791C);
		  /* 8211791Ch */ case    0:  		/* addi R11, R11, 0 */
		/* 8211791Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8211791Ch case    0:*/		return 0x82117920;
		  /* 82117920h */ case    1:  		/* mr R3, R31 */
		/* 82117920h case    1:*/		regs.R3 = regs.R31;
		/* 82117920h case    1:*/		return 0x82117924;
		  /* 82117924h */ case    2:  		/* cntlzw R11, R11 */
		/* 82117924h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82117924h case    2:*/		return 0x82117928;
		  /* 82117928h */ case    3:  		/* rlwinm R30, R11, 27, 31, 31 */
		/* 82117928h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R30,regs.R11);
		/* 82117928h case    3:*/		return 0x8211792C;
		  /* 8211792Ch */ case    4:  		/* bl -67780 */
		/* 8211792Ch case    4:*/		regs.LR = 0x82117930; return 0x82107068;
		/* 8211792Ch case    4:*/		return 0x82117930;
		  /* 82117930h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82117930h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117930h case    5:*/		return 0x82117934;
		  /* 82117934h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 82117934h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82117940;  }
		/* 82117934h case    6:*/		return 0x82117938;
		  /* 82117938h */ case    7:  		/* li R11, 0 */
		/* 82117938h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117938h case    7:*/		return 0x8211793C;
		  /* 8211793Ch */ case    8:  		/* b 16 */
		/* 8211793Ch case    8:*/		return 0x8211794C;
		/* 8211793Ch case    8:*/		return 0x82117940;
	}
	return 0x82117940;
} // Block from 8211791Ch-82117940h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82117940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117940);
		  /* 82117940h */ case    0:  		/* mr R11, R3 */
		/* 82117940h case    0:*/		regs.R11 = regs.R3;
		/* 82117940h case    0:*/		return 0x82117944;
		  /* 82117944h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 82117944h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117944h case    1:*/		return 0x82117948;
		  /* 82117948h */ case    2:  		/* bc 12, CR6_LT, 676 */
		/* 82117948h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117948h case    2:*/		return 0x8211794C;
	}
	return 0x8211794C;
} // Block from 82117940h-8211794Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211794Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211794C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211794C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211794C);
		  /* 8211794Ch */ case    0:  		/* addi R11, R11, 0 */
		/* 8211794Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8211794Ch case    0:*/		return 0x82117950;
		  /* 82117950h */ case    1:  		/* mr R3, R31 */
		/* 82117950h case    1:*/		regs.R3 = regs.R31;
		/* 82117950h case    1:*/		return 0x82117954;
		  /* 82117954h */ case    2:  		/* cntlzw R11, R11 */
		/* 82117954h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82117954h case    2:*/		return 0x82117958;
		  /* 82117958h */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82117958h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82117958h case    3:*/		return 0x8211795C;
		  /* 8211795Ch */ case    4:  		/* or R30, R11, R30 */
		/* 8211795Ch case    4:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 8211795Ch case    4:*/		return 0x82117960;
		  /* 82117960h */ case    5:  		/* bl -65360 */
		/* 82117960h case    5:*/		regs.LR = 0x82117964; return 0x82107A10;
		/* 82117960h case    5:*/		return 0x82117964;
		  /* 82117964h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82117964h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117964h case    6:*/		return 0x82117968;
		  /* 82117968h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 82117968h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82117974;  }
		/* 82117968h case    7:*/		return 0x8211796C;
		  /* 8211796Ch */ case    8:  		/* li R11, 0 */
		/* 8211796Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211796Ch case    8:*/		return 0x82117970;
		  /* 82117970h */ case    9:  		/* b 16 */
		/* 82117970h case    9:*/		return 0x82117980;
		/* 82117970h case    9:*/		return 0x82117974;
	}
	return 0x82117974;
} // Block from 8211794Ch-82117974h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82117974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117974);
		  /* 82117974h */ case    0:  		/* mr R11, R3 */
		/* 82117974h case    0:*/		regs.R11 = regs.R3;
		/* 82117974h case    0:*/		return 0x82117978;
		  /* 82117978h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 82117978h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117978h case    1:*/		return 0x8211797C;
		  /* 8211797Ch */ case    2:  		/* bc 12, CR6_LT, 624 */
		/* 8211797Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 8211797Ch case    2:*/		return 0x82117980;
	}
	return 0x82117980;
} // Block from 82117974h-82117980h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117980);
		  /* 82117980h */ case    0:  		/* addi R11, R11, 0 */
		/* 82117980h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82117980h case    0:*/		return 0x82117984;
		  /* 82117984h */ case    1:  		/* li R4, 0 */
		/* 82117984h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82117984h case    1:*/		return 0x82117988;
		  /* 82117988h */ case    2:  		/* cntlzw R11, R11 */
		/* 82117988h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82117988h case    2:*/		return 0x8211798C;
		  /* 8211798Ch */ case    3:  		/* mr R3, R31 */
		/* 8211798Ch case    3:*/		regs.R3 = regs.R31;
		/* 8211798Ch case    3:*/		return 0x82117990;
		  /* 82117990h */ case    4:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82117990h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82117990h case    4:*/		return 0x82117994;
		  /* 82117994h */ case    5:  		/* or R30, R11, R30 */
		/* 82117994h case    5:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82117994h case    5:*/		return 0x82117998;
		  /* 82117998h */ case    6:  		/* bl -63776 */
		/* 82117998h case    6:*/		regs.LR = 0x8211799C; return 0x82108078;
		/* 82117998h case    6:*/		return 0x8211799C;
		  /* 8211799Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8211799Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211799Ch case    7:*/		return 0x821179A0;
		  /* 821179A0h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 821179A0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821179AC;  }
		/* 821179A0h case    8:*/		return 0x821179A4;
		  /* 821179A4h */ case    9:  		/* li R11, 0 */
		/* 821179A4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821179A4h case    9:*/		return 0x821179A8;
		  /* 821179A8h */ case   10:  		/* b 16 */
		/* 821179A8h case   10:*/		return 0x821179B8;
		/* 821179A8h case   10:*/		return 0x821179AC;
	}
	return 0x821179AC;
} // Block from 82117980h-821179ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821179ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821179AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821179AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821179AC);
		  /* 821179ACh */ case    0:  		/* mr R11, R3 */
		/* 821179ACh case    0:*/		regs.R11 = regs.R3;
		/* 821179ACh case    0:*/		return 0x821179B0;
		  /* 821179B0h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 821179B0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821179B0h case    1:*/		return 0x821179B4;
		  /* 821179B4h */ case    2:  		/* bc 12, CR6_LT, 568 */
		/* 821179B4h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 821179B4h case    2:*/		return 0x821179B8;
	}
	return 0x821179B8;
} // Block from 821179ACh-821179B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821179B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821179B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821179B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821179B8);
		  /* 821179B8h */ case    0:  		/* addi R11, R11, 0 */
		/* 821179B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 821179B8h case    0:*/		return 0x821179BC;
		  /* 821179BCh */ case    1:  		/* mr R3, R31 */
		/* 821179BCh case    1:*/		regs.R3 = regs.R31;
		/* 821179BCh case    1:*/		return 0x821179C0;
		  /* 821179C0h */ case    2:  		/* cntlzw R11, R11 */
		/* 821179C0h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821179C0h case    2:*/		return 0x821179C4;
		  /* 821179C4h */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821179C4h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821179C4h case    3:*/		return 0x821179C8;
		  /* 821179C8h */ case    4:  		/* or R30, R11, R30 */
		/* 821179C8h case    4:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 821179C8h case    4:*/		return 0x821179CC;
		  /* 821179CCh */ case    5:  		/* bl -62516 */
		/* 821179CCh case    5:*/		regs.LR = 0x821179D0; return 0x82108598;
		/* 821179CCh case    5:*/		return 0x821179D0;
		  /* 821179D0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821179D0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821179D0h case    6:*/		return 0x821179D4;
		  /* 821179D4h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 821179D4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821179E0;  }
		/* 821179D4h case    7:*/		return 0x821179D8;
		  /* 821179D8h */ case    8:  		/* li R11, 0 */
		/* 821179D8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821179D8h case    8:*/		return 0x821179DC;
		  /* 821179DCh */ case    9:  		/* b 16 */
		/* 821179DCh case    9:*/		return 0x821179EC;
		/* 821179DCh case    9:*/		return 0x821179E0;
	}
	return 0x821179E0;
} // Block from 821179B8h-821179E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821179E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821179E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821179E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821179E0);
		  /* 821179E0h */ case    0:  		/* mr R11, R3 */
		/* 821179E0h case    0:*/		regs.R11 = regs.R3;
		/* 821179E0h case    0:*/		return 0x821179E4;
		  /* 821179E4h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 821179E4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821179E4h case    1:*/		return 0x821179E8;
		  /* 821179E8h */ case    2:  		/* bc 12, CR6_LT, 516 */
		/* 821179E8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 821179E8h case    2:*/		return 0x821179EC;
	}
	return 0x821179EC;
} // Block from 821179E0h-821179ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821179ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821179EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821179EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821179EC);
		  /* 821179ECh */ case    0:  		/* addi R11, R11, 0 */
		/* 821179ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 821179ECh case    0:*/		return 0x821179F0;
		  /* 821179F0h */ case    1:  		/* mr R3, R31 */
		/* 821179F0h case    1:*/		regs.R3 = regs.R31;
		/* 821179F0h case    1:*/		return 0x821179F4;
		  /* 821179F4h */ case    2:  		/* cntlzw R11, R11 */
		/* 821179F4h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821179F4h case    2:*/		return 0x821179F8;
		  /* 821179F8h */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821179F8h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821179F8h case    3:*/		return 0x821179FC;
		  /* 821179FCh */ case    4:  		/* or R30, R11, R30 */
		/* 821179FCh case    4:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 821179FCh case    4:*/		return 0x82117A00;
		  /* 82117A00h */ case    5:  		/* bl -34000 */
		/* 82117A00h case    5:*/		regs.LR = 0x82117A04; return 0x8210F530;
		/* 82117A00h case    5:*/		return 0x82117A04;
		  /* 82117A04h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82117A04h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117A04h case    6:*/		return 0x82117A08;
		  /* 82117A08h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 82117A08h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82117A14;  }
		/* 82117A08h case    7:*/		return 0x82117A0C;
		  /* 82117A0Ch */ case    8:  		/* li R11, 0 */
		/* 82117A0Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117A0Ch case    8:*/		return 0x82117A10;
		  /* 82117A10h */ case    9:  		/* b 16 */
		/* 82117A10h case    9:*/		return 0x82117A20;
		/* 82117A10h case    9:*/		return 0x82117A14;
	}
	return 0x82117A14;
} // Block from 821179ECh-82117A14h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82117A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117A14);
		  /* 82117A14h */ case    0:  		/* mr R11, R3 */
		/* 82117A14h case    0:*/		regs.R11 = regs.R3;
		/* 82117A14h case    0:*/		return 0x82117A18;
		  /* 82117A18h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 82117A18h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117A18h case    1:*/		return 0x82117A1C;
		  /* 82117A1Ch */ case    2:  		/* bc 12, CR6_LT, 464 */
		/* 82117A1Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117A1Ch case    2:*/		return 0x82117A20;
	}
	return 0x82117A20;
} // Block from 82117A14h-82117A20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117A20);
		  /* 82117A20h */ case    0:  		/* addi R11, R11, 0 */
		/* 82117A20h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82117A20h case    0:*/		return 0x82117A24;
		  /* 82117A24h */ case    1:  		/* mr R3, R31 */
		/* 82117A24h case    1:*/		regs.R3 = regs.R31;
		/* 82117A24h case    1:*/		return 0x82117A28;
		  /* 82117A28h */ case    2:  		/* cntlzw R11, R11 */
		/* 82117A28h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82117A28h case    2:*/		return 0x82117A2C;
		  /* 82117A2Ch */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82117A2Ch case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82117A2Ch case    3:*/		return 0x82117A30;
		  /* 82117A30h */ case    4:  		/* or R30, R11, R30 */
		/* 82117A30h case    4:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82117A30h case    4:*/		return 0x82117A34;
		  /* 82117A34h */ case    5:  		/* bl -26196 */
		/* 82117A34h case    5:*/		regs.LR = 0x82117A38; return 0x821113E0;
		/* 82117A34h case    5:*/		return 0x82117A38;
		  /* 82117A38h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82117A38h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117A38h case    6:*/		return 0x82117A3C;
		  /* 82117A3Ch */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 82117A3Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x82117A48;  }
		/* 82117A3Ch case    7:*/		return 0x82117A40;
		  /* 82117A40h */ case    8:  		/* li R11, 0 */
		/* 82117A40h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117A40h case    8:*/		return 0x82117A44;
		  /* 82117A44h */ case    9:  		/* b 16 */
		/* 82117A44h case    9:*/		return 0x82117A54;
		/* 82117A44h case    9:*/		return 0x82117A48;
	}
	return 0x82117A48;
} // Block from 82117A20h-82117A48h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82117A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117A48);
		  /* 82117A48h */ case    0:  		/* mr R11, R3 */
		/* 82117A48h case    0:*/		regs.R11 = regs.R3;
		/* 82117A48h case    0:*/		return 0x82117A4C;
		  /* 82117A4Ch */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 82117A4Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117A4Ch case    1:*/		return 0x82117A50;
		  /* 82117A50h */ case    2:  		/* bc 12, CR6_LT, 412 */
		/* 82117A50h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117A50h case    2:*/		return 0x82117A54;
	}
	return 0x82117A54;
} // Block from 82117A48h-82117A54h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117A54);
		  /* 82117A54h */ case    0:  		/* addi R11, R11, 0 */
		/* 82117A54h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82117A54h case    0:*/		return 0x82117A58;
		  /* 82117A58h */ case    1:  		/* mr R3, R31 */
		/* 82117A58h case    1:*/		regs.R3 = regs.R31;
		/* 82117A58h case    1:*/		return 0x82117A5C;
		  /* 82117A5Ch */ case    2:  		/* cntlzw R11, R11 */
		/* 82117A5Ch case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82117A5Ch case    2:*/		return 0x82117A60;
		  /* 82117A60h */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82117A60h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82117A60h case    3:*/		return 0x82117A64;
		  /* 82117A64h */ case    4:  		/* or R30, R11, R30 */
		/* 82117A64h case    4:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82117A64h case    4:*/		return 0x82117A68;
		  /* 82117A68h */ case    5:  		/* bl -61144 */
		/* 82117A68h case    5:*/		regs.LR = 0x82117A6C; return 0x82108B90;
		/* 82117A68h case    5:*/		return 0x82117A6C;
		  /* 82117A6Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82117A6Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117A6Ch case    6:*/		return 0x82117A70;
		  /* 82117A70h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 82117A70h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82117A7C;  }
		/* 82117A70h case    7:*/		return 0x82117A74;
		  /* 82117A74h */ case    8:  		/* li R11, 0 */
		/* 82117A74h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117A74h case    8:*/		return 0x82117A78;
		  /* 82117A78h */ case    9:  		/* b 16 */
		/* 82117A78h case    9:*/		return 0x82117A88;
		/* 82117A78h case    9:*/		return 0x82117A7C;
	}
	return 0x82117A7C;
} // Block from 82117A54h-82117A7Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82117A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117A7C);
		  /* 82117A7Ch */ case    0:  		/* mr R11, R3 */
		/* 82117A7Ch case    0:*/		regs.R11 = regs.R3;
		/* 82117A7Ch case    0:*/		return 0x82117A80;
		  /* 82117A80h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 82117A80h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117A80h case    1:*/		return 0x82117A84;
		  /* 82117A84h */ case    2:  		/* bc 12, CR6_LT, 360 */
		/* 82117A84h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117A84h case    2:*/		return 0x82117A88;
	}
	return 0x82117A88;
} // Block from 82117A7Ch-82117A88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117A88);
		  /* 82117A88h */ case    0:  		/* addi R11, R11, 0 */
		/* 82117A88h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82117A88h case    0:*/		return 0x82117A8C;
		  /* 82117A8Ch */ case    1:  		/* mr R3, R31 */
		/* 82117A8Ch case    1:*/		regs.R3 = regs.R31;
		/* 82117A8Ch case    1:*/		return 0x82117A90;
		  /* 82117A90h */ case    2:  		/* cntlzw R11, R11 */
		/* 82117A90h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82117A90h case    2:*/		return 0x82117A94;
		  /* 82117A94h */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82117A94h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82117A94h case    3:*/		return 0x82117A98;
		  /* 82117A98h */ case    4:  		/* or R30, R11, R30 */
		/* 82117A98h case    4:*/		cpu::op::or<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82117A98h case    4:*/		return 0x82117A9C;
		  /* 82117A9Ch */ case    5:  		/* bl -58820 */
		/* 82117A9Ch case    5:*/		regs.LR = 0x82117AA0; return 0x821094D8;
		/* 82117A9Ch case    5:*/		return 0x82117AA0;
		  /* 82117AA0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82117AA0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117AA0h case    6:*/		return 0x82117AA4;
		  /* 82117AA4h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 82117AA4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82117AB0;  }
		/* 82117AA4h case    7:*/		return 0x82117AA8;
		  /* 82117AA8h */ case    8:  		/* li R11, 0 */
		/* 82117AA8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117AA8h case    8:*/		return 0x82117AAC;
		  /* 82117AACh */ case    9:  		/* b 16 */
		/* 82117AACh case    9:*/		return 0x82117ABC;
		/* 82117AACh case    9:*/		return 0x82117AB0;
	}
	return 0x82117AB0;
} // Block from 82117A88h-82117AB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82117AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117AB0);
		  /* 82117AB0h */ case    0:  		/* mr R11, R3 */
		/* 82117AB0h case    0:*/		regs.R11 = regs.R3;
		/* 82117AB0h case    0:*/		return 0x82117AB4;
		  /* 82117AB4h */ case    1:  		/* cmpwi CR6, R3, 0 */
		/* 82117AB4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117AB4h case    1:*/		return 0x82117AB8;
		  /* 82117AB8h */ case    2:  		/* bc 12, CR6_LT, 308 */
		/* 82117AB8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117AB8h case    2:*/		return 0x82117ABC;
	}
	return 0x82117ABC;
} // Block from 82117AB0h-82117ABCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117ABC);
		  /* 82117ABCh */ case    0:  		/* addi R11, R11, 0 */
		/* 82117ABCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82117ABCh case    0:*/		return 0x82117AC0;
		  /* 82117AC0h */ case    1:  		/* cntlzw R11, R11 */
		/* 82117AC0h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82117AC0h case    1:*/		return 0x82117AC4;
		  /* 82117AC4h */ case    2:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82117AC4h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82117AC4h case    2:*/		return 0x82117AC8;
		  /* 82117AC8h */ case    3:  		/* or. R11, R11, R30 */
		/* 82117AC8h case    3:*/		cpu::op::or<1>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82117AC8h case    3:*/		return 0x82117ACC;
		  /* 82117ACCh */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82117ACCh case    4:*/		if ( regs.CR[0].eq ) { return 0x82117ADC;  }
		/* 82117ACCh case    4:*/		return 0x82117AD0;
		  /* 82117AD0h */ case    5:  		/* addi R29, R29, 1 */
		/* 82117AD0h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82117AD0h case    5:*/		return 0x82117AD4;
		  /* 82117AD4h */ case    6:  		/* cmplwi CR6, R29, 256 */
		/* 82117AD4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000100);
		/* 82117AD4h case    6:*/		return 0x82117AD8;
		  /* 82117AD8h */ case    7:  		/* bc 12, CR6_LT, -480 */
		/* 82117AD8h case    7:*/		if ( regs.CR[6].lt ) { return 0x821178F8;  }
		/* 82117AD8h case    7:*/		return 0x82117ADC;
	}
	return 0x82117ADC;
} // Block from 82117ABCh-82117ADCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82117ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117ADC);
		  /* 82117ADCh */ case    0:  		/* cmplwi CR6, R29, 256 */
		/* 82117ADCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000100);
		/* 82117ADCh case    0:*/		return 0x82117AE0;
		  /* 82117AE0h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 82117AE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82117AFC;  }
		/* 82117AE0h case    1:*/		return 0x82117AE4;
		  /* 82117AE4h */ case    2:  		/* lis R11, -32254 */
		/* 82117AE4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82117AE4h case    2:*/		return 0x82117AE8;
		  /* 82117AE8h */ case    3:  		/* li R5, 0 */
		/* 82117AE8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82117AE8h case    3:*/		return 0x82117AEC;
		  /* 82117AECh */ case    4:  		/* addi R6, R11, -13660 */
		/* 82117AECh case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFCAA4);
		/* 82117AECh case    4:*/		return 0x82117AF0;
		  /* 82117AF0h */ case    5:  		/* li R4, 0 */
		/* 82117AF0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82117AF0h case    5:*/		return 0x82117AF4;
		  /* 82117AF4h */ case    6:  		/* mr R3, R31 */
		/* 82117AF4h case    6:*/		regs.R3 = regs.R31;
		/* 82117AF4h case    6:*/		return 0x82117AF8;
		  /* 82117AF8h */ case    7:  		/* bl -37640 */
		/* 82117AF8h case    7:*/		regs.LR = 0x82117AFC; return 0x8210E7F0;
		/* 82117AF8h case    7:*/		return 0x82117AFC;
	}
	return 0x82117AFC;
} // Block from 82117ADCh-82117AFCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82117AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117AFC);
		  /* 82117AFCh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82117AFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82117AFCh case    0:*/		return 0x82117B00;
		  /* 82117B00h */ case    1:  		/* li R7, 0 */
		/* 82117B00h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82117B00h case    1:*/		return 0x82117B04;
		  /* 82117B04h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82117B04h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117B04h case    2:*/		return 0x82117B08;
		  /* 82117B08h */ case    3:  		/* bc 4, CR6_GT, 100 */
		/* 82117B08h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82117B6C;  }
		/* 82117B08h case    3:*/		return 0x82117B0C;
		  /* 82117B0Ch */ case    4:  		/* li R9, 0 */
		/* 82117B0Ch case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82117B0Ch case    4:*/		return 0x82117B10;
		  /* 82117B10h */ case    5:  		/* li R8, -1 */
		/* 82117B10h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 82117B10h case    5:*/		return 0x82117B14;
		  /* 82117B14h */ case    6:  		/* lwz R11, <#[R31 + 20]> */
		/* 82117B14h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82117B14h case    6:*/		return 0x82117B18;
		  /* 82117B18h */ case    7:  		/* lwz R10, <#[R31 + 16]> */
		/* 82117B18h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82117B18h case    7:*/		return 0x82117B1C;
		  /* 82117B1Ch */ case    8:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82117B1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82117B1Ch case    8:*/		return 0x82117B20;
		  /* 82117B20h */ case    9:  		/* lwz R6, <#[R11 + 4]> */
		/* 82117B20h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82117B20h case    9:*/		return 0x82117B24;
		  /* 82117B24h */ case   10:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82117B24h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82117B24h case   10:*/		return 0x82117B28;
		  /* 82117B28h */ case   11:  		/* lwzx R10, <#[R6 + R10]> */
		/* 82117B28h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 82117B28h case   11:*/		return 0x82117B2C;
		  /* 82117B2Ch */ case   12:  		/* lwz R10, <#[R10 + 4]> */
		/* 82117B2Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82117B2Ch case   12:*/		return 0x82117B30;
		  /* 82117B30h */ case   13:  		/* rlwinm. R6, R10, 0, 23, 23 */
		/* 82117B30h case   13:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R6,regs.R10);
		/* 82117B30h case   13:*/		return 0x82117B34;
		  /* 82117B34h */ case   14:  		/* bc 12, CR0_EQ, 36 */
		/* 82117B34h case   14:*/		if ( regs.CR[0].eq ) { return 0x82117B58;  }
		/* 82117B34h case   14:*/		return 0x82117B38;
		  /* 82117B38h */ case   15:  		/* rlwinm. R6, R10, 0, 21, 21 */
		/* 82117B38h case   15:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R6,regs.R10);
		/* 82117B38h case   15:*/		return 0x82117B3C;
		  /* 82117B3Ch */ case   16:  		/* bc 4, CR0_EQ, 28 */
		/* 82117B3Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x82117B58;  }
		/* 82117B3Ch case   16:*/		return 0x82117B40;
		  /* 82117B40h */ case   17:  		/* rlwinm. R10, R10, 0, 20, 20 */
		/* 82117B40h case   17:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R10,regs.R10);
		/* 82117B40h case   17:*/		return 0x82117B44;
		  /* 82117B44h */ case   18:  		/* bc 4, CR0_EQ, 20 */
		/* 82117B44h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82117B58;  }
		/* 82117B44h case   18:*/		return 0x82117B48;
		  /* 82117B48h */ case   19:  		/* lwz R10, <#[R31 + 120]> */
		/* 82117B48h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000078) );
		/* 82117B48h case   19:*/		return 0x82117B4C;
		  /* 82117B4Ch */ case   20:  		/* stw R8, <#[R11 + 12]> */
		/* 82117B4Ch case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82117B4Ch case   20:*/		return 0x82117B50;
		  /* 82117B50h */ case   21:  		/* stw R8, <#[R11 + 16]> */
		/* 82117B50h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 82117B50h case   21:*/		return 0x82117B54;
		  /* 82117B54h */ case   22:  		/* stw R10, <#[R11 + 4]> */
		/* 82117B54h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82117B54h case   22:*/		return 0x82117B58;
	}
	return 0x82117B58;
} // Block from 82117AFCh-82117B58h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82117B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117B58);
		  /* 82117B58h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82117B58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82117B58h case    0:*/		return 0x82117B5C;
		  /* 82117B5Ch */ case    1:  		/* addi R7, R7, 1 */
		/* 82117B5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82117B5Ch case    1:*/		return 0x82117B60;
		  /* 82117B60h */ case    2:  		/* addi R9, R9, 4 */
		/* 82117B60h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82117B60h case    2:*/		return 0x82117B64;
		  /* 82117B64h */ case    3:  		/* cmplw CR6, R7, R11 */
		/* 82117B64h case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 82117B64h case    3:*/		return 0x82117B68;
		  /* 82117B68h */ case    4:  		/* bc 12, CR6_LT, -84 */
		/* 82117B68h case    4:*/		if ( regs.CR[6].lt ) { return 0x82117B14;  }
		/* 82117B68h case    4:*/		return 0x82117B6C;
	}
	return 0x82117B6C;
} // Block from 82117B58h-82117B6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82117B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117B6C);
		  /* 82117B6Ch */ case    0:  		/* mr R3, R31 */
		/* 82117B6Ch case    0:*/		regs.R3 = regs.R31;
		/* 82117B6Ch case    0:*/		return 0x82117B70;
		  /* 82117B70h */ case    1:  		/* bl -36248 */
		/* 82117B70h case    1:*/		regs.LR = 0x82117B74; return 0x8210EDD8;
		/* 82117B70h case    1:*/		return 0x82117B74;
		  /* 82117B74h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117B74h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117B74h case    2:*/		return 0x82117B78;
		  /* 82117B78h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117B78h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117B84;  }
		/* 82117B78h case    3:*/		return 0x82117B7C;
		  /* 82117B7Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117B7Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117B7Ch case    4:*/		return 0x82117B80;
		  /* 82117B80h */ case    5:  		/* bc 12, CR6_LT, 108 */
		/* 82117B80h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117B80h case    5:*/		return 0x82117B84;
	}
	return 0x82117B84;
} // Block from 82117B6Ch-82117B84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117B84);
		  /* 82117B84h */ case    0:  		/* mr R3, R31 */
		/* 82117B84h case    0:*/		regs.R3 = regs.R31;
		/* 82117B84h case    0:*/		return 0x82117B88;
		  /* 82117B88h */ case    1:  		/* bl -56792 */
		/* 82117B88h case    1:*/		regs.LR = 0x82117B8C; return 0x82109DB0;
		/* 82117B88h case    1:*/		return 0x82117B8C;
		  /* 82117B8Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117B8Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117B8Ch case    2:*/		return 0x82117B90;
		  /* 82117B90h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117B90h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117B9C;  }
		/* 82117B90h case    3:*/		return 0x82117B94;
		  /* 82117B94h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117B94h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117B94h case    4:*/		return 0x82117B98;
		  /* 82117B98h */ case    5:  		/* bc 12, CR6_LT, 84 */
		/* 82117B98h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117B98h case    5:*/		return 0x82117B9C;
	}
	return 0x82117B9C;
} // Block from 82117B84h-82117B9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117B9C);
		  /* 82117B9Ch */ case    0:  		/* mr R3, R31 */
		/* 82117B9Ch case    0:*/		regs.R3 = regs.R31;
		/* 82117B9Ch case    0:*/		return 0x82117BA0;
		  /* 82117BA0h */ case    1:  		/* bl -66616 */
		/* 82117BA0h case    1:*/		regs.LR = 0x82117BA4; return 0x82107768;
		/* 82117BA0h case    1:*/		return 0x82117BA4;
		  /* 82117BA4h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117BA4h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117BA4h case    2:*/		return 0x82117BA8;
		  /* 82117BA8h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117BA8h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117BB4;  }
		/* 82117BA8h case    3:*/		return 0x82117BAC;
		  /* 82117BACh */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117BACh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117BACh case    4:*/		return 0x82117BB0;
		  /* 82117BB0h */ case    5:  		/* bc 12, CR6_LT, 60 */
		/* 82117BB0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117BB0h case    5:*/		return 0x82117BB4;
	}
	return 0x82117BB4;
} // Block from 82117B9Ch-82117BB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117BB4);
		  /* 82117BB4h */ case    0:  		/* mr R3, R31 */
		/* 82117BB4h case    0:*/		regs.R3 = regs.R31;
		/* 82117BB4h case    0:*/		return 0x82117BB8;
		  /* 82117BB8h */ case    1:  		/* bl -89944 */
		/* 82117BB8h case    1:*/		regs.LR = 0x82117BBC; return 0x82101C60;
		/* 82117BB8h case    1:*/		return 0x82117BBC;
		  /* 82117BBCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117BBCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117BBCh case    2:*/		return 0x82117BC0;
		  /* 82117BC0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117BC0h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117BCC;  }
		/* 82117BC0h case    3:*/		return 0x82117BC4;
		  /* 82117BC4h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117BC4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117BC4h case    4:*/		return 0x82117BC8;
		  /* 82117BC8h */ case    5:  		/* bc 12, CR6_LT, 36 */
		/* 82117BC8h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117BC8h case    5:*/		return 0x82117BCC;
	}
	return 0x82117BCC;
} // Block from 82117BB4h-82117BCCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117BCC);
		  /* 82117BCCh */ case    0:  		/* mr R3, R31 */
		/* 82117BCCh case    0:*/		regs.R3 = regs.R31;
		/* 82117BCCh case    0:*/		return 0x82117BD0;
		  /* 82117BD0h */ case    1:  		/* bl -55840 */
		/* 82117BD0h case    1:*/		regs.LR = 0x82117BD4; return 0x8210A1B0;
		/* 82117BD0h case    1:*/		return 0x82117BD4;
		  /* 82117BD4h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117BD4h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117BD4h case    2:*/		return 0x82117BD8;
		  /* 82117BD8h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117BD8h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117BE4;  }
		/* 82117BD8h case    3:*/		return 0x82117BDC;
		  /* 82117BDCh */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117BDCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117BDCh case    4:*/		return 0x82117BE0;
		  /* 82117BE0h */ case    5:  		/* bc 12, CR6_LT, 12 */
		/* 82117BE0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117BEC;  }
		/* 82117BE0h case    5:*/		return 0x82117BE4;
	}
	return 0x82117BE4;
} // Block from 82117BCCh-82117BE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117BE4);
		  /* 82117BE4h */ case    0:  		/* stw R28, <#[R31 + 216]> */
		/* 82117BE4h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x000000D8) );
		/* 82117BE4h case    0:*/		return 0x82117BE8;
	}
	return 0x82117BE8;
} // Block from 82117BE4h-82117BE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117BE8h
// Function '?SeparatePhases@CProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117BE8);
		  /* 82117BE8h */ case    0:  		/* li R3, 0 */
		/* 82117BE8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82117BE8h case    0:*/		return 0x82117BEC;
	}
	return 0x82117BEC;
} // Block from 82117BE8h-82117BECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117BEC);
		  /* 82117BECh */ case    0:  		/* addi R1, R1, 160 */
		/* 82117BECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82117BECh case    0:*/		return 0x82117BF0;
		  /* 82117BF0h */ case    1:  		/* b -551240 */
		/* 82117BF0h case    1:*/		return 0x820912A8;
		/* 82117BF0h case    1:*/		return 0x82117BF4;
		  /* 82117BF4h */ case    2:  		/* nop */
		/* 82117BF4h case    2:*/		cpu::op::nop();
		/* 82117BF4h case    2:*/		return 0x82117BF8;
	}
	return 0x82117BF8;
} // Block from 82117BECh-82117BF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117BF8);
		  /* 82117BF8h */ case    0:  		/* mfspr R12, LR */
		/* 82117BF8h case    0:*/		regs.R12 = regs.LR;
		/* 82117BF8h case    0:*/		return 0x82117BFC;
		  /* 82117BFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82117BFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82117BFCh case    1:*/		return 0x82117C00;
		  /* 82117C00h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82117C00h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82117C00h case    2:*/		return 0x82117C04;
		  /* 82117C04h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82117C04h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82117C04h case    3:*/		return 0x82117C08;
		  /* 82117C08h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82117C08h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82117C08h case    4:*/		return 0x82117C0C;
		  /* 82117C0Ch */ case    5:  		/* mr R31, R3 */
		/* 82117C0Ch case    5:*/		regs.R31 = regs.R3;
		/* 82117C0Ch case    5:*/		return 0x82117C10;
		  /* 82117C10h */ case    6:  		/* bl -54408 */
		/* 82117C10h case    6:*/		regs.LR = 0x82117C14; return 0x8210A788;
		/* 82117C10h case    6:*/		return 0x82117C14;
		  /* 82117C14h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82117C14h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117C14h case    7:*/		return 0x82117C18;
		  /* 82117C18h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 82117C18h case    8:*/		if ( regs.CR[0].eq ) { return 0x82117C24;  }
		/* 82117C18h case    8:*/		return 0x82117C1C;
		  /* 82117C1Ch */ case    9:  		/* cmpwi CR6, R3, 0 */
		/* 82117C1Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117C1Ch case    9:*/		return 0x82117C20;
		  /* 82117C20h */ case   10:  		/* bc 12, CR6_LT, 496 */
		/* 82117C20h case   10:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117C20h case   10:*/		return 0x82117C24;
	}
	return 0x82117C24;
} // Block from 82117BF8h-82117C24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82117C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117C24);
		  /* 82117C24h */ case    0:  		/* mr R3, R31 */
		/* 82117C24h case    0:*/		regs.R3 = regs.R31;
		/* 82117C24h case    0:*/		return 0x82117C28;
		  /* 82117C28h */ case    1:  		/* bl -9648 */
		/* 82117C28h case    1:*/		regs.LR = 0x82117C2C; return 0x82115678;
		/* 82117C28h case    1:*/		return 0x82117C2C;
		  /* 82117C2Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117C2Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117C2Ch case    2:*/		return 0x82117C30;
		  /* 82117C30h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117C30h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117C3C;  }
		/* 82117C30h case    3:*/		return 0x82117C34;
		  /* 82117C34h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117C34h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117C34h case    4:*/		return 0x82117C38;
		  /* 82117C38h */ case    5:  		/* bc 12, CR6_LT, 472 */
		/* 82117C38h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117C38h case    5:*/		return 0x82117C3C;
	}
	return 0x82117C3C;
} // Block from 82117C24h-82117C3Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117C3C);
		  /* 82117C3Ch */ case    0:  		/* li R4, 1 */
		/* 82117C3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82117C3Ch case    0:*/		return 0x82117C40;
		  /* 82117C40h */ case    1:  		/* mr R3, R31 */
		/* 82117C40h case    1:*/		regs.R3 = regs.R31;
		/* 82117C40h case    1:*/		return 0x82117C44;
		  /* 82117C44h */ case    2:  		/* bl -45700 */
		/* 82117C44h case    2:*/		regs.LR = 0x82117C48; return 0x8210C9C0;
		/* 82117C44h case    2:*/		return 0x82117C48;
		  /* 82117C48h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82117C48h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117C48h case    3:*/		return 0x82117C4C;
		  /* 82117C4Ch */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82117C4Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82117C58;  }
		/* 82117C4Ch case    4:*/		return 0x82117C50;
		  /* 82117C50h */ case    5:  		/* cmpwi CR6, R3, 0 */
		/* 82117C50h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117C50h case    5:*/		return 0x82117C54;
		  /* 82117C54h */ case    6:  		/* bc 12, CR6_LT, 444 */
		/* 82117C54h case    6:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117C54h case    6:*/		return 0x82117C58;
	}
	return 0x82117C58;
} // Block from 82117C3Ch-82117C58h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82117C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117C58);
		  /* 82117C58h */ case    0:  		/* li R30, 0 */
		/* 82117C58h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82117C58h case    0:*/		return 0x82117C5C;
		  /* 82117C5Ch */ case    1:  		/* li R4, 1 */
		/* 82117C5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82117C5Ch case    1:*/		return 0x82117C60;
		  /* 82117C60h */ case    2:  		/* mr R3, R31 */
		/* 82117C60h case    2:*/		regs.R3 = regs.R31;
		/* 82117C60h case    2:*/		return 0x82117C64;
		  /* 82117C64h */ case    3:  		/* bl -64492 */
		/* 82117C64h case    3:*/		regs.LR = 0x82117C68; return 0x82108078;
		/* 82117C64h case    3:*/		return 0x82117C68;
		  /* 82117C68h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82117C68h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117C68h case    4:*/		return 0x82117C6C;
		  /* 82117C6Ch */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 82117C6Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82117C80;  }
		/* 82117C6Ch case    5:*/		return 0x82117C70;
		  /* 82117C70h */ case    6:  		/* cmpwi CR6, R3, 0 */
		/* 82117C70h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117C70h case    6:*/		return 0x82117C74;
		  /* 82117C74h */ case    7:  		/* bc 12, CR6_LT, 412 */
		/* 82117C74h case    7:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117C74h case    7:*/		return 0x82117C78;
		  /* 82117C78h */ case    8:  		/* cmpwi CR6, R3, 1 */
		/* 82117C78h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 82117C78h case    8:*/		return 0x82117C7C;
		  /* 82117C7Ch */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82117C7Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82117C8C;  }
		/* 82117C7Ch case    9:*/		return 0x82117C80;
	}
	return 0x82117C80;
} // Block from 82117C58h-82117C80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82117C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117C80);
		  /* 82117C80h */ case    0:  		/* addi R30, R30, 1 */
		/* 82117C80h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82117C80h case    0:*/		return 0x82117C84;
		  /* 82117C84h */ case    1:  		/* cmplwi CR6, R30, 256 */
		/* 82117C84h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000100);
		/* 82117C84h case    1:*/		return 0x82117C88;
		  /* 82117C88h */ case    2:  		/* bc 12, CR6_LT, -44 */
		/* 82117C88h case    2:*/		if ( regs.CR[6].lt ) { return 0x82117C5C;  }
		/* 82117C88h case    2:*/		return 0x82117C8C;
	}
	return 0x82117C8C;
} // Block from 82117C80h-82117C8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117C8C);
		  /* 82117C8Ch */ case    0:  		/* mr R3, R31 */
		/* 82117C8Ch case    0:*/		regs.R3 = regs.R31;
		/* 82117C8Ch case    0:*/		return 0x82117C90;
		  /* 82117C90h */ case    1:  		/* bl -53648 */
		/* 82117C90h case    1:*/		regs.LR = 0x82117C94; return 0x8210AB00;
		/* 82117C90h case    1:*/		return 0x82117C94;
		  /* 82117C94h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117C94h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117C94h case    2:*/		return 0x82117C98;
		  /* 82117C98h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117C98h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117CA4;  }
		/* 82117C98h case    3:*/		return 0x82117C9C;
		  /* 82117C9Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117C9Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117C9Ch case    4:*/		return 0x82117CA0;
		  /* 82117CA0h */ case    5:  		/* bc 12, CR6_LT, 368 */
		/* 82117CA0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117CA0h case    5:*/		return 0x82117CA4;
	}
	return 0x82117CA4;
} // Block from 82117C8Ch-82117CA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117CA4);
		  /* 82117CA4h */ case    0:  		/* mr R3, R31 */
		/* 82117CA4h case    0:*/		regs.R3 = regs.R31;
		/* 82117CA4h case    0:*/		return 0x82117CA8;
		  /* 82117CA8h */ case    1:  		/* bl -7560 */
		/* 82117CA8h case    1:*/		regs.LR = 0x82117CAC; return 0x82115F20;
		/* 82117CA8h case    1:*/		return 0x82117CAC;
		  /* 82117CACh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117CACh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117CACh case    2:*/		return 0x82117CB0;
		  /* 82117CB0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117CB0h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117CBC;  }
		/* 82117CB0h case    3:*/		return 0x82117CB4;
		  /* 82117CB4h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117CB4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117CB4h case    4:*/		return 0x82117CB8;
		  /* 82117CB8h */ case    5:  		/* bc 12, CR6_LT, 344 */
		/* 82117CB8h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117CB8h case    5:*/		return 0x82117CBC;
	}
	return 0x82117CBC;
} // Block from 82117CA4h-82117CBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117CBC);
		  /* 82117CBCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82117CBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117CBCh case    0:*/		return 0x82117CC0;
		  /* 82117CC0h */ case    1:  		/* mr R3, R31 */
		/* 82117CC0h case    1:*/		regs.R3 = regs.R31;
		/* 82117CC0h case    1:*/		return 0x82117CC4;
		  /* 82117CC4h */ case    2:  		/* lwz R11, <#[R11 + 16]> */
		/* 82117CC4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82117CC4h case    2:*/		return 0x82117CC8;
		  /* 82117CC8h */ case    3:  		/* mtspr CTR, R11 */
		/* 82117CC8h case    3:*/		regs.CTR = regs.R11;
		/* 82117CC8h case    3:*/		return 0x82117CCC;
		  /* 82117CCCh */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82117CCCh case    4:*/		if ( 1 ) { regs.LR = 0x82117CD0; return (uint32)regs.CTR; }
		/* 82117CCCh case    4:*/		return 0x82117CD0;
		  /* 82117CD0h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82117CD0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117CD0h case    5:*/		return 0x82117CD4;
		  /* 82117CD4h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 82117CD4h case    6:*/		if ( regs.CR[0].eq ) { return 0x82117CE0;  }
		/* 82117CD4h case    6:*/		return 0x82117CD8;
		  /* 82117CD8h */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 82117CD8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117CD8h case    7:*/		return 0x82117CDC;
		  /* 82117CDCh */ case    8:  		/* bc 12, CR6_LT, 308 */
		/* 82117CDCh case    8:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117CDCh case    8:*/		return 0x82117CE0;
	}
	return 0x82117CE0;
} // Block from 82117CBCh-82117CE0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82117CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117CE0);
		  /* 82117CE0h */ case    0:  		/* li R4, 0 */
		/* 82117CE0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82117CE0h case    0:*/		return 0x82117CE4;
		  /* 82117CE4h */ case    1:  		/* mr R3, R31 */
		/* 82117CE4h case    1:*/		regs.R3 = regs.R31;
		/* 82117CE4h case    1:*/		return 0x82117CE8;
		  /* 82117CE8h */ case    2:  		/* bl -45864 */
		/* 82117CE8h case    2:*/		regs.LR = 0x82117CEC; return 0x8210C9C0;
		/* 82117CE8h case    2:*/		return 0x82117CEC;
		  /* 82117CECh */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 82117CECh case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117CECh case    3:*/		return 0x82117CF0;
		  /* 82117CF0h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82117CF0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82117CFC;  }
		/* 82117CF0h case    4:*/		return 0x82117CF4;
		  /* 82117CF4h */ case    5:  		/* cmpwi CR6, R3, 0 */
		/* 82117CF4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117CF4h case    5:*/		return 0x82117CF8;
		  /* 82117CF8h */ case    6:  		/* bc 12, CR6_LT, 280 */
		/* 82117CF8h case    6:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117CF8h case    6:*/		return 0x82117CFC;
	}
	return 0x82117CFC;
} // Block from 82117CE0h-82117CFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82117CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117CFC);
		  /* 82117CFCh */ case    0:  		/* mr R3, R31 */
		/* 82117CFCh case    0:*/		regs.R3 = regs.R31;
		/* 82117CFCh case    0:*/		return 0x82117D00;
		  /* 82117D00h */ case    1:  		/* bl -45040 */
		/* 82117D00h case    1:*/		regs.LR = 0x82117D04; return 0x8210CD10;
		/* 82117D00h case    1:*/		return 0x82117D04;
		  /* 82117D04h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117D04h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117D04h case    2:*/		return 0x82117D08;
		  /* 82117D08h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117D08h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117D14;  }
		/* 82117D08h case    3:*/		return 0x82117D0C;
		  /* 82117D0Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117D0Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117D0Ch case    4:*/		return 0x82117D10;
		  /* 82117D10h */ case    5:  		/* bc 12, CR6_LT, 256 */
		/* 82117D10h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117D10h case    5:*/		return 0x82117D14;
	}
	return 0x82117D14;
} // Block from 82117CFCh-82117D14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117D14);
		  /* 82117D14h */ case    0:  		/* li R11, 1 */
		/* 82117D14h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82117D14h case    0:*/		return 0x82117D18;
		  /* 82117D18h */ case    1:  		/* mr R3, R31 */
		/* 82117D18h case    1:*/		regs.R3 = regs.R31;
		/* 82117D18h case    1:*/		return 0x82117D1C;
		  /* 82117D1Ch */ case    2:  		/* stw R11, <#[R31 + 220]> */
		/* 82117D1Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000000DC) );
		/* 82117D1Ch case    2:*/		return 0x82117D20;
		  /* 82117D20h */ case    3:  		/* bl -42920 */
		/* 82117D20h case    3:*/		regs.LR = 0x82117D24; return 0x8210D578;
		/* 82117D20h case    3:*/		return 0x82117D24;
		  /* 82117D24h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82117D24h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117D24h case    4:*/		return 0x82117D28;
		  /* 82117D28h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82117D28h case    5:*/		if ( regs.CR[0].eq ) { return 0x82117D34;  }
		/* 82117D28h case    5:*/		return 0x82117D2C;
		  /* 82117D2Ch */ case    6:  		/* cmpwi CR6, R3, 0 */
		/* 82117D2Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117D2Ch case    6:*/		return 0x82117D30;
		  /* 82117D30h */ case    7:  		/* bc 12, CR6_LT, 224 */
		/* 82117D30h case    7:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117D30h case    7:*/		return 0x82117D34;
	}
	return 0x82117D34;
} // Block from 82117D14h-82117D34h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82117D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117D34);
		  /* 82117D34h */ case    0:  		/* mr R3, R31 */
		/* 82117D34h case    0:*/		regs.R3 = regs.R31;
		/* 82117D34h case    0:*/		return 0x82117D38;
		  /* 82117D38h */ case    1:  		/* bl -3256 */
		/* 82117D38h case    1:*/		regs.LR = 0x82117D3C; return 0x82117080;
		/* 82117D38h case    1:*/		return 0x82117D3C;
		  /* 82117D3Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117D3Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117D3Ch case    2:*/		return 0x82117D40;
		  /* 82117D40h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117D40h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117D4C;  }
		/* 82117D40h case    3:*/		return 0x82117D44;
		  /* 82117D44h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117D44h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117D44h case    4:*/		return 0x82117D48;
		  /* 82117D48h */ case    5:  		/* bc 12, CR6_LT, 200 */
		/* 82117D48h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117D48h case    5:*/		return 0x82117D4C;
	}
	return 0x82117D4C;
} // Block from 82117D34h-82117D4Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117D4C);
		  /* 82117D4Ch */ case    0:  		/* mr R3, R31 */
		/* 82117D4Ch case    0:*/		regs.R3 = regs.R31;
		/* 82117D4Ch case    0:*/		return 0x82117D50;
		  /* 82117D50h */ case    1:  		/* bl -76472 */
		/* 82117D50h case    1:*/		regs.LR = 0x82117D54; return 0x82105298;
		/* 82117D50h case    1:*/		return 0x82117D54;
		  /* 82117D54h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117D54h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117D54h case    2:*/		return 0x82117D58;
		  /* 82117D58h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117D58h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117D64;  }
		/* 82117D58h case    3:*/		return 0x82117D5C;
		  /* 82117D5Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117D5Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117D5Ch case    4:*/		return 0x82117D60;
		  /* 82117D60h */ case    5:  		/* bc 12, CR6_LT, 176 */
		/* 82117D60h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117D60h case    5:*/		return 0x82117D64;
	}
	return 0x82117D64;
} // Block from 82117D4Ch-82117D64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117D64);
		  /* 82117D64h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82117D64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117D64h case    0:*/		return 0x82117D68;
		  /* 82117D68h */ case    1:  		/* mr R3, R31 */
		/* 82117D68h case    1:*/		regs.R3 = regs.R31;
		/* 82117D68h case    1:*/		return 0x82117D6C;
		  /* 82117D6Ch */ case    2:  		/* lwz R11, <#[R11 + 20]> */
		/* 82117D6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82117D6Ch case    2:*/		return 0x82117D70;
		  /* 82117D70h */ case    3:  		/* mtspr CTR, R11 */
		/* 82117D70h case    3:*/		regs.CTR = regs.R11;
		/* 82117D70h case    3:*/		return 0x82117D74;
		  /* 82117D74h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82117D74h case    4:*/		if ( 1 ) { regs.LR = 0x82117D78; return (uint32)regs.CTR; }
		/* 82117D74h case    4:*/		return 0x82117D78;
		  /* 82117D78h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82117D78h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117D78h case    5:*/		return 0x82117D7C;
		  /* 82117D7Ch */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 82117D7Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82117D88;  }
		/* 82117D7Ch case    6:*/		return 0x82117D80;
		  /* 82117D80h */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 82117D80h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117D80h case    7:*/		return 0x82117D84;
		  /* 82117D84h */ case    8:  		/* bc 12, CR6_LT, 140 */
		/* 82117D84h case    8:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117D84h case    8:*/		return 0x82117D88;
	}
	return 0x82117D88;
} // Block from 82117D64h-82117D88h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82117D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117D88);
		  /* 82117D88h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82117D88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117D88h case    0:*/		return 0x82117D8C;
		  /* 82117D8Ch */ case    1:  		/* mr R3, R31 */
		/* 82117D8Ch case    1:*/		regs.R3 = regs.R31;
		/* 82117D8Ch case    1:*/		return 0x82117D90;
		  /* 82117D90h */ case    2:  		/* lwz R11, <#[R11 + 24]> */
		/* 82117D90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82117D90h case    2:*/		return 0x82117D94;
		  /* 82117D94h */ case    3:  		/* mtspr CTR, R11 */
		/* 82117D94h case    3:*/		regs.CTR = regs.R11;
		/* 82117D94h case    3:*/		return 0x82117D98;
		  /* 82117D98h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82117D98h case    4:*/		if ( 1 ) { regs.LR = 0x82117D9C; return (uint32)regs.CTR; }
		/* 82117D98h case    4:*/		return 0x82117D9C;
		  /* 82117D9Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82117D9Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117D9Ch case    5:*/		return 0x82117DA0;
		  /* 82117DA0h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 82117DA0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82117DAC;  }
		/* 82117DA0h case    6:*/		return 0x82117DA4;
		  /* 82117DA4h */ case    7:  		/* cmpwi CR6, R3, 0 */
		/* 82117DA4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117DA4h case    7:*/		return 0x82117DA8;
		  /* 82117DA8h */ case    8:  		/* bc 12, CR6_LT, 104 */
		/* 82117DA8h case    8:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117DA8h case    8:*/		return 0x82117DAC;
	}
	return 0x82117DAC;
} // Block from 82117D88h-82117DACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82117DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117DAC);
		  /* 82117DACh */ case    0:  		/* mr R3, R31 */
		/* 82117DACh case    0:*/		regs.R3 = regs.R31;
		/* 82117DACh case    0:*/		return 0x82117DB0;
		  /* 82117DB0h */ case    1:  		/* bl -90448 */
		/* 82117DB0h case    1:*/		regs.LR = 0x82117DB4; return 0x82101C60;
		/* 82117DB0h case    1:*/		return 0x82117DB4;
		  /* 82117DB4h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117DB4h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117DB4h case    2:*/		return 0x82117DB8;
		  /* 82117DB8h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117DB8h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117DC4;  }
		/* 82117DB8h case    3:*/		return 0x82117DBC;
		  /* 82117DBCh */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117DBCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117DBCh case    4:*/		return 0x82117DC0;
		  /* 82117DC0h */ case    5:  		/* bc 12, CR6_LT, 80 */
		/* 82117DC0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117DC0h case    5:*/		return 0x82117DC4;
	}
	return 0x82117DC4;
} // Block from 82117DACh-82117DC4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117DC4);
		  /* 82117DC4h */ case    0:  		/* mr R3, R31 */
		/* 82117DC4h case    0:*/		regs.R3 = regs.R31;
		/* 82117DC4h case    0:*/		return 0x82117DC8;
		  /* 82117DC8h */ case    1:  		/* bl -56344 */
		/* 82117DC8h case    1:*/		regs.LR = 0x82117DCC; return 0x8210A1B0;
		/* 82117DC8h case    1:*/		return 0x82117DCC;
		  /* 82117DCCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117DCCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117DCCh case    2:*/		return 0x82117DD0;
		  /* 82117DD0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117DD0h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117DDC;  }
		/* 82117DD0h case    3:*/		return 0x82117DD4;
		  /* 82117DD4h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117DD4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117DD4h case    4:*/		return 0x82117DD8;
		  /* 82117DD8h */ case    5:  		/* bc 12, CR6_LT, 56 */
		/* 82117DD8h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117DD8h case    5:*/		return 0x82117DDC;
	}
	return 0x82117DDC;
} // Block from 82117DC4h-82117DDCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117DDC);
		  /* 82117DDCh */ case    0:  		/* mr R3, R31 */
		/* 82117DDCh case    0:*/		regs.R3 = regs.R31;
		/* 82117DDCh case    0:*/		return 0x82117DE0;
		  /* 82117DE0h */ case    1:  		/* bl -2728 */
		/* 82117DE0h case    1:*/		regs.LR = 0x82117DE4; return 0x82117338;
		/* 82117DE0h case    1:*/		return 0x82117DE4;
		  /* 82117DE4h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117DE4h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117DE4h case    2:*/		return 0x82117DE8;
		  /* 82117DE8h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117DE8h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117DF4;  }
		/* 82117DE8h case    3:*/		return 0x82117DEC;
		  /* 82117DECh */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117DECh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117DECh case    4:*/		return 0x82117DF0;
		  /* 82117DF0h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 82117DF0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117DF0h case    5:*/		return 0x82117DF4;
	}
	return 0x82117DF4;
} // Block from 82117DDCh-82117DF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117DF4);
		  /* 82117DF4h */ case    0:  		/* mr R3, R31 */
		/* 82117DF4h case    0:*/		regs.R3 = regs.R31;
		/* 82117DF4h case    0:*/		return 0x82117DF8;
		  /* 82117DF8h */ case    1:  		/* bl -41936 */
		/* 82117DF8h case    1:*/		regs.LR = 0x82117DFC; return 0x8210DA28;
		/* 82117DF8h case    1:*/		return 0x82117DFC;
		  /* 82117DFCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117DFCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117DFCh case    2:*/		return 0x82117E00;
		  /* 82117E00h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117E00h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117E0C;  }
		/* 82117E00h case    3:*/		return 0x82117E04;
		  /* 82117E04h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117E04h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117E04h case    4:*/		return 0x82117E08;
		  /* 82117E08h */ case    5:  		/* bc 12, CR6_LT, 8 */
		/* 82117E08h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E10;  }
		/* 82117E08h case    5:*/		return 0x82117E0C;
	}
	return 0x82117E0C;
} // Block from 82117DF4h-82117E0Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E0C);
		  /* 82117E0Ch */ case    0:  		/* li R3, 0 */
		/* 82117E0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82117E0Ch case    0:*/		return 0x82117E10;
	}
	return 0x82117E10;
} // Block from 82117E0Ch-82117E10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E10);
		  /* 82117E10h */ case    0:  		/* addi R1, R1, 112 */
		/* 82117E10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82117E10h case    0:*/		return 0x82117E14;
		  /* 82117E14h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82117E14h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82117E14h case    1:*/		return 0x82117E18;
		  /* 82117E18h */ case    2:  		/* mtspr LR, R12 */
		/* 82117E18h case    2:*/		regs.LR = regs.R12;
		/* 82117E18h case    2:*/		return 0x82117E1C;
		  /* 82117E1Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82117E1Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82117E1Ch case    3:*/		return 0x82117E20;
		  /* 82117E20h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82117E20h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82117E20h case    4:*/		return 0x82117E24;
		  /* 82117E24h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82117E24h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82117E24h case    5:*/		return 0x82117E28;
	}
	return 0x82117E28;
} // Block from 82117E10h-82117E28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117E28h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E28);
		  /* 82117E28h */ case    0:  		/* mfspr R12, LR */
		/* 82117E28h case    0:*/		regs.R12 = regs.LR;
		/* 82117E28h case    0:*/		return 0x82117E2C;
		  /* 82117E2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82117E2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82117E2Ch case    1:*/		return 0x82117E30;
		  /* 82117E30h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82117E30h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82117E30h case    2:*/		return 0x82117E34;
		  /* 82117E34h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82117E34h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82117E34h case    3:*/		return 0x82117E38;
		  /* 82117E38h */ case    4:  		/* li R11, 0 */
		/* 82117E38h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117E38h case    4:*/		return 0x82117E3C;
		  /* 82117E3Ch */ case    5:  		/* mr R31, R3 */
		/* 82117E3Ch case    5:*/		regs.R31 = regs.R3;
		/* 82117E3Ch case    5:*/		return 0x82117E40;
		  /* 82117E40h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 82117E40h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82117E40h case    6:*/		return 0x82117E44;
		  /* 82117E44h */ case    7:  		/* stw R11, <#[R3 + 216]> */
		/* 82117E44h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000000D8) );
		/* 82117E44h case    7:*/		return 0x82117E48;
		  /* 82117E48h */ case    8:  		/* stw R11, <#[R3 + 220]> */
		/* 82117E48h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000000DC) );
		/* 82117E48h case    8:*/		return 0x82117E4C;
		  /* 82117E4Ch */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 82117E4Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82117E54;  }
		/* 82117E4Ch case    9:*/		return 0x82117E50;
		  /* 82117E50h */ case   10:  		/* stw R11, <#[R4]> */
		/* 82117E50h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82117E50h case   10:*/		return 0x82117E54;
	}
	return 0x82117E54;
} // Block from 82117E28h-82117E54h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82117E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E54);
		  /* 82117E54h */ case    0:  		/* mr R3, R31 */
		/* 82117E54h case    0:*/		regs.R3 = regs.R31;
		/* 82117E54h case    0:*/		return 0x82117E58;
		  /* 82117E58h */ case    1:  		/* bl -1680 */
		/* 82117E58h case    1:*/		regs.LR = 0x82117E5C; return 0x821177C8;
		/* 82117E58h case    1:*/		return 0x82117E5C;
		  /* 82117E5Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117E5Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117E5Ch case    2:*/		return 0x82117E60;
		  /* 82117E60h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117E60h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117E6C;  }
		/* 82117E60h case    3:*/		return 0x82117E64;
		  /* 82117E64h */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117E64h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117E64h case    4:*/		return 0x82117E68;
		  /* 82117E68h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 82117E68h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E88;  }
		/* 82117E68h case    5:*/		return 0x82117E6C;
	}
	return 0x82117E6C;
} // Block from 82117E54h-82117E6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E6C);
		  /* 82117E6Ch */ case    0:  		/* mr R3, R31 */
		/* 82117E6Ch case    0:*/		regs.R3 = regs.R31;
		/* 82117E6Ch case    0:*/		return 0x82117E70;
		  /* 82117E70h */ case    1:  		/* bl -632 */
		/* 82117E70h case    1:*/		regs.LR = 0x82117E74; return 0x82117BF8;
		/* 82117E70h case    1:*/		return 0x82117E74;
		  /* 82117E74h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82117E74h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82117E74h case    2:*/		return 0x82117E78;
		  /* 82117E78h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82117E78h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117E84;  }
		/* 82117E78h case    3:*/		return 0x82117E7C;
		  /* 82117E7Ch */ case    4:  		/* cmpwi CR6, R3, 0 */
		/* 82117E7Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82117E7Ch case    4:*/		return 0x82117E80;
		  /* 82117E80h */ case    5:  		/* bc 12, CR6_LT, 8 */
		/* 82117E80h case    5:*/		if ( regs.CR[6].lt ) { return 0x82117E88;  }
		/* 82117E80h case    5:*/		return 0x82117E84;
	}
	return 0x82117E84;
} // Block from 82117E6Ch-82117E84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E84);
		  /* 82117E84h */ case    0:  		/* li R3, 0 */
		/* 82117E84h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82117E84h case    0:*/		return 0x82117E88;
	}
	return 0x82117E88;
} // Block from 82117E84h-82117E88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E88);
		  /* 82117E88h */ case    0:  		/* addi R1, R1, 96 */
		/* 82117E88h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82117E88h case    0:*/		return 0x82117E8C;
		  /* 82117E8Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82117E8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82117E8Ch case    1:*/		return 0x82117E90;
		  /* 82117E90h */ case    2:  		/* mtspr LR, R12 */
		/* 82117E90h case    2:*/		regs.LR = regs.R12;
		/* 82117E90h case    2:*/		return 0x82117E94;
		  /* 82117E94h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82117E94h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82117E94h case    3:*/		return 0x82117E98;
		  /* 82117E98h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82117E98h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82117E98h case    4:*/		return 0x82117E9C;
	}
	return 0x82117E9C;
} // Block from 82117E88h-82117E9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82117E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117E9C);
		  /* 82117E9Ch */ case    0:  		/* nop */
		/* 82117E9Ch case    0:*/		cpu::op::nop();
		/* 82117E9Ch case    0:*/		return 0x82117EA0;
	}
	return 0x82117EA0;
} // Block from 82117E9Ch-82117EA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117EA0h
// Function '?CompactRegisters@CProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117EA0);
		  /* 82117EA0h */ case    0:  		/* li R11, 0 */
		/* 82117EA0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82117EA0h case    0:*/		return 0x82117EA4;
		  /* 82117EA4h */ case    1:  		/* stw R11, <#[R3 + 4]> */
		/* 82117EA4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82117EA4h case    1:*/		return 0x82117EA8;
		  /* 82117EA8h */ case    2:  		/* stw R11, <#[R3 + 8]> */
		/* 82117EA8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82117EA8h case    2:*/		return 0x82117EAC;
		  /* 82117EACh */ case    3:  		/* stw R11, <#[R3 + 12]> */
		/* 82117EACh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 82117EACh case    3:*/		return 0x82117EB0;
		  /* 82117EB0h */ case    4:  		/* stw R11, <#[R3 + 20]> */
		/* 82117EB0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82117EB0h case    4:*/		return 0x82117EB4;
		  /* 82117EB4h */ case    5:  		/* stw R11, <#[R3 + 24]> */
		/* 82117EB4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 82117EB4h case    5:*/		return 0x82117EB8;
		  /* 82117EB8h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82117EB8h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82117EB8h case    6:*/		return 0x82117EBC;
	}
	return 0x82117EBC;
} // Block from 82117EA0h-82117EBCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82117EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117EBC);
		  /* 82117EBCh */ case    0:  		/* nop */
		/* 82117EBCh case    0:*/		cpu::op::nop();
		/* 82117EBCh case    0:*/		return 0x82117EC0;
	}
	return 0x82117EC0;
} // Block from 82117EBCh-82117EC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117EC0);
		  /* 82117EC0h */ case    0:  		/* mfspr R12, LR */
		/* 82117EC0h case    0:*/		regs.R12 = regs.LR;
		/* 82117EC0h case    0:*/		return 0x82117EC4;
		  /* 82117EC4h */ case    1:  		/* bl -552040 */
		/* 82117EC4h case    1:*/		regs.LR = 0x82117EC8; return 0x8209125C;
		/* 82117EC4h case    1:*/		return 0x82117EC8;
		  /* 82117EC8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82117EC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82117EC8h case    2:*/		return 0x82117ECC;
		  /* 82117ECCh */ case    3:  		/* lwz R11, <#[R4 + 28]> */
		/* 82117ECCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 82117ECCh case    3:*/		return 0x82117ED0;
		  /* 82117ED0h */ case    4:  		/* mr R29, R5 */
		/* 82117ED0h case    4:*/		regs.R29 = regs.R5;
		/* 82117ED0h case    4:*/		return 0x82117ED4;
		  /* 82117ED4h */ case    5:  		/* lwz R30, <#[R5 + 20]> */
		/* 82117ED4h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R5 + 0x00000014) );
		/* 82117ED4h case    5:*/		return 0x82117ED8;
		  /* 82117ED8h */ case    6:  		/* addi R31, R4, 28 */
		/* 82117ED8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R4,0x1C);
		/* 82117ED8h case    6:*/		return 0x82117EDC;
		  /* 82117EDCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82117EDCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117EDCh case    7:*/		return 0x82117EE0;
		  /* 82117EE0h */ case    8:  		/* bc 12, CR6_EQ, 108 */
		/* 82117EE0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82117F4C;  }
		/* 82117EE0h case    8:*/		return 0x82117EE4;
		  /* 82117EE4h */ case    9:  		/* lwz R7, <#[R30 + 24]> */
		/* 82117EE4h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000018) );
		/* 82117EE4h case    9:*/		return 0x82117EE8;
		  /* 82117EE8h */ case   10:  		/* lwz R8, <#[R31]> */
		/* 82117EE8h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82117EE8h case   10:*/		return 0x82117EEC;
		  /* 82117EECh */ case   11:  		/* mr R11, R7 */
		/* 82117EECh case   11:*/		regs.R11 = regs.R7;
		/* 82117EECh case   11:*/		return 0x82117EF0;
		  /* 82117EF0h */ case   12:  		/* lwz R10, <#[R8 + 16]> */
		/* 82117EF0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000010) );
		/* 82117EF0h case   12:*/		return 0x82117EF4;
		  /* 82117EF4h */ case   13:  		/* lbz R9, <#[R11]> */
		/* 82117EF4h case   13:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82117EF4h case   13:*/		return 0x82117EF8;
		  /* 82117EF8h */ case   14:  		/* lbz R6, <#[R10]> */
		/* 82117EF8h case   14:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82117EF8h case   14:*/		return 0x82117EFC;
		  /* 82117EFCh */ case   15:  		/* cmpwi CR0, R9, 0 */
		/* 82117EFCh case   15:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82117EFCh case   15:*/		return 0x82117F00;
		  /* 82117F00h */ case   16:  		/* subf R9, R6, R9 */
		/* 82117F00h case   16:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 82117F00h case   16:*/		return 0x82117F04;
		  /* 82117F04h */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 82117F04h case   17:*/		if ( regs.CR[0].eq ) { return 0x82117F18;  }
		/* 82117F04h case   17:*/		return 0x82117F08;
		  /* 82117F08h */ case   18:  		/* addi R11, R11, 1 */
		/* 82117F08h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82117F08h case   18:*/		return 0x82117F0C;
		  /* 82117F0Ch */ case   19:  		/* addi R10, R10, 1 */
		/* 82117F0Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82117F0Ch case   19:*/		return 0x82117F10;
		  /* 82117F10h */ case   20:  		/* cmpwi CR6, R9, 0 */
		/* 82117F10h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82117F10h case   20:*/		return 0x82117F14;
		  /* 82117F14h */ case   21:  		/* bc 12, CR6_EQ, -32 */
		/* 82117F14h case   21:*/		if ( regs.CR[6].eq ) { return 0x82117EF4;  }
		/* 82117F14h case   21:*/		return 0x82117F18;
	}
	return 0x82117F18;
} // Block from 82117EC0h-82117F18h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82117F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F18);
		  /* 82117F18h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82117F18h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82117F18h case    0:*/		return 0x82117F1C;
		  /* 82117F1Ch */ case    1:  		/* bc 4, CR0_LT, 12 */
		/* 82117F1Ch case    1:*/		if ( !regs.CR[0].lt ) { return 0x82117F28;  }
		/* 82117F1Ch case    1:*/		return 0x82117F20;
		  /* 82117F20h */ case    2:  		/* addi R31, R8, 8 */
		/* 82117F20h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R8,0x8);
		/* 82117F20h case    2:*/		return 0x82117F24;
		  /* 82117F24h */ case    3:  		/* b 16 */
		/* 82117F24h case    3:*/		return 0x82117F34;
		/* 82117F24h case    3:*/		return 0x82117F28;
	}
	return 0x82117F28;
} // Block from 82117F18h-82117F28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82117F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F28);
		  /* 82117F28h */ case    0:  		/* cmpwi CR6, R9, 0 */
		/* 82117F28h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82117F28h case    0:*/		return 0x82117F2C;
		  /* 82117F2Ch */ case    1:  		/* bc 4, CR6_GT, 20 */
		/* 82117F2Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x82117F40;  }
		/* 82117F2Ch case    1:*/		return 0x82117F30;
		  /* 82117F30h */ case    2:  		/* addi R31, R8, 12 */
		/* 82117F30h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R8,0xC);
		/* 82117F30h case    2:*/		return 0x82117F34;
	}
	return 0x82117F34;
} // Block from 82117F28h-82117F34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F34);
		  /* 82117F34h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82117F34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117F34h case    0:*/		return 0x82117F38;
		  /* 82117F38h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82117F38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117F38h case    1:*/		return 0x82117F3C;
		  /* 82117F3Ch */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 82117F3Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82117EE8;  }
		/* 82117F3Ch case    2:*/		return 0x82117F40;
	}
	return 0x82117F40;
} // Block from 82117F34h-82117F40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F40);
		  /* 82117F40h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82117F40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117F40h case    0:*/		return 0x82117F44;
		  /* 82117F44h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82117F44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117F44h case    1:*/		return 0x82117F48;
		  /* 82117F48h */ case    2:  		/* bc 4, CR6_EQ, 72 */
		/* 82117F48h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82117F90;  }
		/* 82117F48h case    2:*/		return 0x82117F4C;
	}
	return 0x82117F4C;
} // Block from 82117F40h-82117F4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82117F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F4C);
		  /* 82117F4Ch */ case    0:  		/* li R3, 24 */
		/* 82117F4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 82117F4Ch case    0:*/		return 0x82117F50;
		  /* 82117F50h */ case    1:  		/* bl -322856 */
		/* 82117F50h case    1:*/		regs.LR = 0x82117F54; return 0x820C9228;
		/* 82117F50h case    1:*/		return 0x82117F54;
		  /* 82117F54h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82117F54h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82117F54h case    2:*/		return 0x82117F58;
		  /* 82117F58h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82117F58h case    3:*/		if ( regs.CR[0].eq ) { return 0x82117F74;  }
		/* 82117F58h case    3:*/		return 0x82117F5C;
		  /* 82117F5Ch */ case    4:  		/* li R7, 0 */
		/* 82117F5Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82117F5Ch case    4:*/		return 0x82117F60;
		  /* 82117F60h */ case    5:  		/* lwz R4, <#[R30 + 24]> */
		/* 82117F60h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000018) );
		/* 82117F60h case    5:*/		return 0x82117F64;
		  /* 82117F64h */ case    6:  		/* li R6, 0 */
		/* 82117F64h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82117F64h case    6:*/		return 0x82117F68;
		  /* 82117F68h */ case    7:  		/* li R5, 0 */
		/* 82117F68h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82117F68h case    7:*/		return 0x82117F6C;
		  /* 82117F6Ch */ case    8:  		/* bl -321900 */
		/* 82117F6Ch case    8:*/		regs.LR = 0x82117F70; return 0x820C9600;
		/* 82117F6Ch case    8:*/		return 0x82117F70;
		  /* 82117F70h */ case    9:  		/* b 8 */
		/* 82117F70h case    9:*/		return 0x82117F78;
		/* 82117F70h case    9:*/		return 0x82117F74;
	}
	return 0x82117F74;
} // Block from 82117F4Ch-82117F74h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82117F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F74);
		  /* 82117F74h */ case    0:  		/* li R3, 0 */
		/* 82117F74h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82117F74h case    0:*/		return 0x82117F78;
	}
	return 0x82117F78;
} // Block from 82117F74h-82117F78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F78);
		  /* 82117F78h */ case    0:  		/* stw R3, <#[R31]> */
		/* 82117F78h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82117F78h case    0:*/		return 0x82117F7C;
		  /* 82117F7Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82117F7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82117F7Ch case    1:*/		return 0x82117F80;
		  /* 82117F80h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82117F80h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82117F90;  }
		/* 82117F80h case    2:*/		return 0x82117F84;
		  /* 82117F84h */ case    3:  		/* lis R3, -32761 */
		/* 82117F84h case    3:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82117F84h case    3:*/		return 0x82117F88;
		  /* 82117F88h */ case    4:  		/* ori R3, R3, 14 */
		/* 82117F88h case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82117F88h case    4:*/		return 0x82117F8C;
		  /* 82117F8Ch */ case    5:  		/* b 256 */
		/* 82117F8Ch case    5:*/		return 0x8211808C;
		/* 82117F8Ch case    5:*/		return 0x82117F90;
	}
	return 0x82117F90;
} // Block from 82117F78h-82117F90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82117F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117F90);
		  /* 82117F90h */ case    0:  		/* li R3, 20 */
		/* 82117F90h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82117F90h case    0:*/		return 0x82117F94;
		  /* 82117F94h */ case    1:  		/* bl -322924 */
		/* 82117F94h case    1:*/		regs.LR = 0x82117F98; return 0x820C9228;
		/* 82117F94h case    1:*/		return 0x82117F98;
		  /* 82117F98h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82117F98h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82117F98h case    2:*/		return 0x82117F9C;
		  /* 82117F9Ch */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 82117F9Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82117FBC;  }
		/* 82117F9Ch case    3:*/		return 0x82117FA0;
		  /* 82117FA0h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 82117FA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117FA0h case    4:*/		return 0x82117FA4;
		  /* 82117FA4h */ case    5:  		/* lis R10, -32253 */
		/* 82117FA4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82117FA4h case    5:*/		return 0x82117FA8;
		  /* 82117FA8h */ case    6:  		/* mr R4, R29 */
		/* 82117FA8h case    6:*/		regs.R4 = regs.R29;
		/* 82117FA8h case    6:*/		return 0x82117FAC;
		  /* 82117FACh */ case    7:  		/* addi R6, R10, 7492 */
		/* 82117FACh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1D44);
		/* 82117FACh case    7:*/		return 0x82117FB0;
		  /* 82117FB0h */ case    8:  		/* lwz R5, <#[R11 + 20]> */
		/* 82117FB0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000014) );
		/* 82117FB0h case    8:*/		return 0x82117FB4;
		  /* 82117FB4h */ case    9:  		/* bl -322500 */
		/* 82117FB4h case    9:*/		regs.LR = 0x82117FB8; return 0x820C93F0;
		/* 82117FB4h case    9:*/		return 0x82117FB8;
		  /* 82117FB8h */ case   10:  		/* b 8 */
		/* 82117FB8h case   10:*/		return 0x82117FC0;
		/* 82117FB8h case   10:*/		return 0x82117FBC;
	}
	return 0x82117FBC;
} // Block from 82117F90h-82117FBCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82117FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117FBC);
		  /* 82117FBCh */ case    0:  		/* li R3, 0 */
		/* 82117FBCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82117FBCh case    0:*/		return 0x82117FC0;
	}
	return 0x82117FC0;
} // Block from 82117FBCh-82117FC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82117FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82117FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82117FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82117FC0);
		  /* 82117FC0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82117FC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117FC0h case    0:*/		return 0x82117FC4;
		  /* 82117FC4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82117FC4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82117FC4h case    1:*/		return 0x82117FC8;
		  /* 82117FC8h */ case    2:  		/* stw R3, <#[R11 + 20]> */
		/* 82117FC8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000014) );
		/* 82117FC8h case    2:*/		return 0x82117FCC;
		  /* 82117FCCh */ case    3:  		/* bc 12, CR6_EQ, -72 */
		/* 82117FCCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82117F84;  }
		/* 82117FCCh case    3:*/		return 0x82117FD0;
		  /* 82117FD0h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 82117FD0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117FD0h case    4:*/		return 0x82117FD4;
		  /* 82117FD4h */ case    5:  		/* lwz R11, <#[R11 + 20]> */
		/* 82117FD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 82117FD4h case    5:*/		return 0x82117FD8;
		  /* 82117FD8h */ case    6:  		/* lwz R11, <#[R11 + 12]> */
		/* 82117FD8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82117FD8h case    6:*/		return 0x82117FDC;
		  /* 82117FDCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82117FDCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117FDCh case    7:*/		return 0x82117FE0;
		  /* 82117FE0h */ case    8:  		/* bc 4, CR6_EQ, 168 */
		/* 82117FE0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82118088;  }
		/* 82117FE0h case    8:*/		return 0x82117FE4;
		  /* 82117FE4h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 82117FE4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82117FE4h case    9:*/		return 0x82117FE8;
		  /* 82117FE8h */ case   10:  		/* li R8, 0 */
		/* 82117FE8h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82117FE8h case   10:*/		return 0x82117FEC;
		  /* 82117FECh */ case   11:  		/* mr R10, R31 */
		/* 82117FECh case   11:*/		regs.R10 = regs.R31;
		/* 82117FECh case   11:*/		return 0x82117FF0;
		  /* 82117FF0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82117FF0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82117FF0h case   12:*/		return 0x82117FF4;
		  /* 82117FF4h */ case   13:  		/* bc 12, CR6_EQ, 140 */
		/* 82117FF4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82118080;  }
		/* 82117FF4h case   13:*/		return 0x82117FF8;
		  /* 82117FF8h */ case   14:  		/* lwz R11, <#[R10]> */
		/* 82117FF8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82117FF8h case   14:*/		return 0x82117FFC;
		  /* 82117FFCh */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 82117FFCh case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82117FFCh case   15:*/		return 0x82118000;
		  /* 82118000h */ case   16:  		/* bc 12, CR0_EQ, 36 */
		/* 82118000h case   16:*/		if ( regs.CR[0].eq ) { return 0x82118024;  }
		/* 82118000h case   16:*/		return 0x82118004;
		  /* 82118004h */ case   17:  		/* lwz R9, <#[R11 + 8]> */
		/* 82118004h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82118004h case   17:*/		return 0x82118008;
		  /* 82118008h */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 82118008h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82118008h case   18:*/		return 0x8211800C;
		  /* 8211800Ch */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 8211800Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82118024;  }
		/* 8211800Ch case   19:*/		return 0x82118010;
		  /* 82118010h */ case   20:  		/* lwz R7, <#[R9 + 12]> */
		/* 82118010h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x0000000C) );
		/* 82118010h case   20:*/		return 0x82118014;
		  /* 82118014h */ case   21:  		/* stw R11, <#[R9 + 12]> */
		/* 82118014h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 82118014h case   21:*/		return 0x82118018;
		  /* 82118018h */ case   22:  		/* stw R7, <#[R11 + 8]> */
		/* 82118018h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82118018h case   22:*/		return 0x8211801C;
		  /* 8211801Ch */ case   23:  		/* stw R9, <#[R10]> */
		/* 8211801Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8211801Ch case   23:*/		return 0x82118020;
		  /* 82118020h */ case   24:  		/* b -40 */
		/* 82118020h case   24:*/		return 0x82117FF8;
		/* 82118020h case   24:*/		return 0x82118024;
	}
	return 0x82118024;
} // Block from 82117FC0h-82118024h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82118024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118024);
		  /* 82118024h */ case    0:  		/* lwz R9, <#[R11 + 12]> */
		/* 82118024h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82118024h case    0:*/		return 0x82118028;
		  /* 82118028h */ case    1:  		/* addi R10, R11, 12 */
		/* 82118028h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xC);
		/* 82118028h case    1:*/		return 0x8211802C;
		  /* 8211802Ch */ case    2:  		/* addi R8, R8, 1 */
		/* 8211802Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8211802Ch case    2:*/		return 0x82118030;
		  /* 82118030h */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 82118030h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82118030h case    3:*/		return 0x82118034;
		  /* 82118034h */ case    4:  		/* bc 4, CR6_EQ, -60 */
		/* 82118034h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82117FF8;  }
		/* 82118034h case    4:*/		return 0x82118038;
		  /* 82118038h */ case    5:  		/* b 72 */
		/* 82118038h case    5:*/		return 0x82118080;
		/* 82118038h case    5:*/		return 0x8211803C;
		  /* 8211803Ch */ case    6:  		/* mr R9, R31 */
		/* 8211803Ch case    6:*/		regs.R9 = regs.R31;
		/* 8211803Ch case    6:*/		return 0x82118040;
		  /* 82118040h */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 82118040h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82118040h case    7:*/		return 0x82118044;
		  /* 82118044h */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 82118044h case    8:*/		if ( regs.CR[6].eq ) { return 0x82118080;  }
		/* 82118044h case    8:*/		return 0x82118048;
		  /* 82118048h */ case    9:  		/* mtspr CTR, R8 */
		/* 82118048h case    9:*/		regs.CTR = regs.R8;
		/* 82118048h case    9:*/		return 0x8211804C;
		  /* 8211804Ch */ case   10:  		/* lwz R10, <#[R9]> */
		/* 8211804Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8211804Ch case   10:*/		return 0x82118050;
		  /* 82118050h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 82118050h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82118050h case   11:*/		return 0x82118054;
		  /* 82118054h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 82118054h case   12:*/		if ( regs.CR[6].eq ) { return 0x82118074;  }
		/* 82118054h case   12:*/		return 0x82118058;
		  /* 82118058h */ case   13:  		/* lwz R11, <#[R10 + 12]> */
		/* 82118058h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 82118058h case   13:*/		return 0x8211805C;
		  /* 8211805Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8211805Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211805Ch case   14:*/		return 0x82118060;
		  /* 82118060h */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 82118060h case   15:*/		if ( regs.CR[6].eq ) { return 0x82118074;  }
		/* 82118060h case   15:*/		return 0x82118064;
		  /* 82118064h */ case   16:  		/* lwz R7, <#[R11 + 8]> */
		/* 82118064h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 82118064h case   16:*/		return 0x82118068;
		  /* 82118068h */ case   17:  		/* stw R10, <#[R11 + 8]> */
		/* 82118068h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82118068h case   17:*/		return 0x8211806C;
		  /* 8211806Ch */ case   18:  		/* stw R7, <#[R10 + 12]> */
		/* 8211806Ch case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 8211806Ch case   18:*/		return 0x82118070;
		  /* 82118070h */ case   19:  		/* stw R11, <#[R9]> */
		/* 82118070h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82118070h case   19:*/		return 0x82118074;
	}
	return 0x82118074;
} // Block from 82118024h-82118074h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82118074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118074);
		  /* 82118074h */ case    0:  		/* lwz R11, <#[R9]> */
		/* 82118074h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82118074h case    0:*/		return 0x82118078;
		  /* 82118078h */ case    1:  		/* addi R9, R11, 12 */
		/* 82118078h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xC);
		/* 82118078h case    1:*/		return 0x8211807C;
		  /* 8211807Ch */ case    2:  		/* bc 16, CR0_LT, -48 */
		/* 8211807Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211804C;  }
		/* 8211807Ch case    2:*/		return 0x82118080;
	}
	return 0x82118080;
} // Block from 82118074h-82118080h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118080);
		  /* 82118080h */ case    0:  		/* rlwinm. R8, R8, 31, 1, 31 */
		/* 82118080h case    0:*/		cpu::op::rlwinm<1,31,1,31>(regs,&regs.R8,regs.R8);
		/* 82118080h case    0:*/		return 0x82118084;
		  /* 82118084h */ case    1:  		/* bc 4, CR0_EQ, -72 */
		/* 82118084h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8211803C;  }
		/* 82118084h case    1:*/		return 0x82118088;
	}
	return 0x82118088;
} // Block from 82118080h-82118088h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118088);
		  /* 82118088h */ case    0:  		/* li R3, 0 */
		/* 82118088h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118088h case    0:*/		return 0x8211808C;
	}
	return 0x8211808C;
} // Block from 82118088h-8211808Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211808Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211808C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211808C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211808C);
		  /* 8211808Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8211808Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8211808Ch case    0:*/		return 0x82118090;
		  /* 82118090h */ case    1:  		/* b -552420 */
		/* 82118090h case    1:*/		return 0x820912AC;
		/* 82118090h case    1:*/		return 0x82118094;
		  /* 82118094h */ case    2:  		/* nop */
		/* 82118094h case    2:*/		cpu::op::nop();
		/* 82118094h case    2:*/		return 0x82118098;
		  /* 82118098h */ case    3:  		/* cmpwi CR6, R3, 24 */
		/* 82118098h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000018);
		/* 82118098h case    3:*/		return 0x8211809C;
		  /* 8211809Ch */ case    4:  		/* bc 4, CR6_EQ, 68 */
		/* 8211809Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821180E0;  }
		/* 8211809Ch case    4:*/		return 0x821180A0;
		  /* 821180A0h */ case    5:  		/* cmpwi CR6, R4, 24 */
		/* 821180A0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000018);
		/* 821180A0h case    5:*/		return 0x821180A4;
		  /* 821180A4h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 821180A4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180A4h case    6:*/		return 0x821180A8;
		  /* 821180A8h */ case    7:  		/* cmpwi CR6, R4, 25 */
		/* 821180A8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000019);
		/* 821180A8h case    7:*/		return 0x821180AC;
		  /* 821180ACh */ case    8:  		/* bc 12, CR6_EQ, 44 */
		/* 821180ACh case    8:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180ACh case    8:*/		return 0x821180B0;
		  /* 821180B0h */ case    9:  		/* cmpwi CR6, R4, 27 */
		/* 821180B0h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000001B);
		/* 821180B0h case    9:*/		return 0x821180B4;
		  /* 821180B4h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 821180B4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180B4h case   10:*/		return 0x821180B8;
		  /* 821180B8h */ case   11:  		/* cmpwi CR6, R4, 29 */
		/* 821180B8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000001D);
		/* 821180B8h case   11:*/		return 0x821180BC;
		  /* 821180BCh */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 821180BCh case   12:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180BCh case   12:*/		return 0x821180C0;
		  /* 821180C0h */ case   13:  		/* cmpwi CR6, R4, 30 */
		/* 821180C0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000001E);
		/* 821180C0h case   13:*/		return 0x821180C4;
		  /* 821180C4h */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 821180C4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180C4h case   14:*/		return 0x821180C8;
		  /* 821180C8h */ case   15:  		/* cmpwi CR6, R4, 26 */
		/* 821180C8h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000001A);
		/* 821180C8h case   15:*/		return 0x821180CC;
		  /* 821180CCh */ case   16:  		/* bc 12, CR6_EQ, 12 */
		/* 821180CCh case   16:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180CCh case   16:*/		return 0x821180D0;
		  /* 821180D0h */ case   17:  		/* cmpwi CR6, R4, 28 */
		/* 821180D0h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000001C);
		/* 821180D0h case   17:*/		return 0x821180D4;
		  /* 821180D4h */ case   18:  		/* bc 4, CR6_EQ, 60 */
		/* 821180D4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82118110;  }
		/* 821180D4h case   18:*/		return 0x821180D8;
	}
	return 0x821180D8;
} // Block from 8211808Ch-821180D8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821180D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821180D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821180D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821180D8);
		  /* 821180D8h */ case    0:  		/* li R3, 1 */
		/* 821180D8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821180D8h case    0:*/		return 0x821180DC;
		  /* 821180DCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 821180DCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821180DCh case    1:*/		return 0x821180E0;
	}
	return 0x821180E0;
} // Block from 821180D8h-821180E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821180E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821180E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821180E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821180E0);
		  /* 821180E0h */ case    0:  		/* cmpwi CR6, R3, 33 */
		/* 821180E0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000021);
		/* 821180E0h case    0:*/		return 0x821180E4;
		  /* 821180E4h */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 821180E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118110;  }
		/* 821180E4h case    1:*/		return 0x821180E8;
		  /* 821180E8h */ case    2:  		/* cmpwi CR6, R4, 33 */
		/* 821180E8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000021);
		/* 821180E8h case    2:*/		return 0x821180EC;
		  /* 821180ECh */ case    3:  		/* bc 12, CR6_EQ, -20 */
		/* 821180ECh case    3:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180ECh case    3:*/		return 0x821180F0;
		  /* 821180F0h */ case    4:  		/* cmpwi CR6, R4, 34 */
		/* 821180F0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000022);
		/* 821180F0h case    4:*/		return 0x821180F4;
		  /* 821180F4h */ case    5:  		/* bc 12, CR6_EQ, -28 */
		/* 821180F4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180F4h case    5:*/		return 0x821180F8;
		  /* 821180F8h */ case    6:  		/* cmpwi CR6, R4, 35 */
		/* 821180F8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000023);
		/* 821180F8h case    6:*/		return 0x821180FC;
		  /* 821180FCh */ case    7:  		/* bc 12, CR6_EQ, -36 */
		/* 821180FCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 821180FCh case    7:*/		return 0x82118100;
		  /* 82118100h */ case    8:  		/* cmpwi CR6, R4, 36 */
		/* 82118100h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000024);
		/* 82118100h case    8:*/		return 0x82118104;
		  /* 82118104h */ case    9:  		/* bc 12, CR6_EQ, -44 */
		/* 82118104h case    9:*/		if ( regs.CR[6].eq ) { return 0x821180D8;  }
		/* 82118104h case    9:*/		return 0x82118108;
		  /* 82118108h */ case   10:  		/* cmpwi CR6, R4, 37 */
		/* 82118108h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000025);
		/* 82118108h case   10:*/		return 0x8211810C;
		  /* 8211810Ch */ case   11:  		/* b -56 */
		/* 8211810Ch case   11:*/		return 0x821180D4;
		/* 8211810Ch case   11:*/		return 0x82118110;
	}
	return 0x82118110;
} // Block from 821180E0h-82118110h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82118110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118110);
		  /* 82118110h */ case    0:  		/* li R3, 0 */
		/* 82118110h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118110h case    0:*/		return 0x82118114;
		  /* 82118114h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82118114h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118114h case    1:*/		return 0x82118118;
	}
	return 0x82118118;
} // Block from 82118110h-82118118h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118118);
		  /* 82118118h */ case    0:  		/* lwz R8, <#[R5 + 28]> */
		/* 82118118h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + 0x0000001C) );
		/* 82118118h case    0:*/		return 0x8211811C;
		  /* 8211811Ch */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 8211811Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8211811Ch case    1:*/		return 0x82118120;
		  /* 82118120h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 82118120h case    2:*/		if ( regs.CR[6].eq ) { return 0x82118178;  }
		/* 82118120h case    2:*/		return 0x82118124;
		  /* 82118124h */ case    3:  		/* lwz R7, <#[R4 + 8]> */
		/* 82118124h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000008) );
		/* 82118124h case    3:*/		return 0x82118128;
		  /* 82118128h */ case    4:  		/* lwz R10, <#[R8 + 16]> */
		/* 82118128h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000010) );
		/* 82118128h case    4:*/		return 0x8211812C;
		  /* 8211812Ch */ case    5:  		/* mr R11, R7 */
		/* 8211812Ch case    5:*/		regs.R11 = regs.R7;
		/* 8211812Ch case    5:*/		return 0x82118130;
		  /* 82118130h */ case    6:  		/* lbz R9, <#[R11]> */
		/* 82118130h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82118130h case    6:*/		return 0x82118134;
		  /* 82118134h */ case    7:  		/* lbz R6, <#[R10]> */
		/* 82118134h case    7:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82118134h case    7:*/		return 0x82118138;
		  /* 82118138h */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 82118138h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82118138h case    8:*/		return 0x8211813C;
		  /* 8211813Ch */ case    9:  		/* subf R9, R6, R9 */
		/* 8211813Ch case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 8211813Ch case    9:*/		return 0x82118140;
		  /* 82118140h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 82118140h case   10:*/		if ( regs.CR[0].eq ) { return 0x82118154;  }
		/* 82118140h case   10:*/		return 0x82118144;
		  /* 82118144h */ case   11:  		/* addi R11, R11, 1 */
		/* 82118144h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82118144h case   11:*/		return 0x82118148;
		  /* 82118148h */ case   12:  		/* addi R10, R10, 1 */
		/* 82118148h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82118148h case   12:*/		return 0x8211814C;
		  /* 8211814Ch */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 8211814Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8211814Ch case   13:*/		return 0x82118150;
		  /* 82118150h */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 82118150h case   14:*/		if ( regs.CR[6].eq ) { return 0x82118130;  }
		/* 82118150h case   14:*/		return 0x82118154;
	}
	return 0x82118154;
} // Block from 82118118h-82118154h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82118154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118154);
		  /* 82118154h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82118154h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82118154h case    0:*/		return 0x82118158;
		  /* 82118158h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 82118158h case    1:*/		if ( regs.CR[0].eq ) { return 0x82118180;  }
		/* 82118158h case    1:*/		return 0x8211815C;
		  /* 8211815Ch */ case    2:  		/* cmpwi CR6, R9, 0 */
		/* 8211815Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8211815Ch case    2:*/		return 0x82118160;
		  /* 82118160h */ case    3:  		/* bc 4, CR6_LT, 12 */
		/* 82118160h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8211816C;  }
		/* 82118160h case    3:*/		return 0x82118164;
		  /* 82118164h */ case    4:  		/* lwz R8, <#[R8 + 8]> */
		/* 82118164h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 82118164h case    4:*/		return 0x82118168;
		  /* 82118168h */ case    5:  		/* b 8 */
		/* 82118168h case    5:*/		return 0x82118170;
		/* 82118168h case    5:*/		return 0x8211816C;
	}
	return 0x8211816C;
} // Block from 82118154h-8211816Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211816Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211816C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211816C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211816C);
		  /* 8211816Ch */ case    0:  		/* lwz R8, <#[R8 + 12]> */
		/* 8211816Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 8211816Ch case    0:*/		return 0x82118170;
	}
	return 0x82118170;
} // Block from 8211816Ch-82118170h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118170);
		  /* 82118170h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 82118170h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82118170h case    0:*/		return 0x82118174;
		  /* 82118174h */ case    1:  		/* bc 4, CR6_EQ, -76 */
		/* 82118174h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118128;  }
		/* 82118174h case    1:*/		return 0x82118178;
	}
	return 0x82118178;
} // Block from 82118170h-82118178h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118178);
		  /* 82118178h */ case    0:  		/* li R3, 0 */
		/* 82118178h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118178h case    0:*/		return 0x8211817C;
		  /* 8211817Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8211817Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211817Ch case    1:*/		return 0x82118180;
	}
	return 0x82118180;
} // Block from 82118178h-82118180h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118180);
		  /* 82118180h */ case    0:  		/* lwz R3, <#[R8 + 20]> */
		/* 82118180h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000014) );
		/* 82118180h case    0:*/		return 0x82118184;
		  /* 82118184h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82118184h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118184h case    1:*/		return 0x82118188;
	}
	return 0x82118188;
} // Block from 82118180h-82118188h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118188);
		  /* 82118188h */ case    0:  		/* cmpw CR6, R4, R5 */
		/* 82118188h case    0:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R5);
		/* 82118188h case    0:*/		return 0x8211818C;
		  /* 8211818Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8211818Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118198;  }
		/* 8211818Ch case    1:*/		return 0x82118190;
		  /* 82118190h */ case    2:  		/* li R3, 0 */
		/* 82118190h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118190h case    2:*/		return 0x82118194;
		  /* 82118194h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82118194h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118194h case    3:*/		return 0x82118198;
	}
	return 0x82118198;
} // Block from 82118188h-82118198h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118198);
		  /* 82118198h */ case    0:  		/* addi R11, R4, -1 */
		/* 82118198h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFF);
		/* 82118198h case    0:*/		return 0x8211819C;
		  /* 8211819Ch */ case    1:  		/* cmplwi CR6, R11, 12 */
		/* 8211819Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 8211819Ch case    1:*/		return 0x821181A0;
		  /* 821181A0h */ case    2:  		/* bc 12, CR6_GT, 60 */
		/* 821181A0h case    2:*/		if ( regs.CR[6].gt ) { return 0x821181DC;  }
		/* 821181A0h case    2:*/		return 0x821181A4;
		  /* 821181A4h */ case    3:  		/* lis R12, -32253 */
		/* 821181A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 821181A4h case    3:*/		return 0x821181A8;
		  /* 821181A8h */ case    4:  		/* addi R12, R12, 5136 */
		/* 821181A8h case    4:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x1410);
		/* 821181A8h case    4:*/		return 0x821181AC;
		  /* 821181ACh */ case    5:  		/* lbzx R0, <#[R12 + R11]> */
		/* 821181ACh case    5:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 821181ACh case    5:*/		return 0x821181B0;
		  /* 821181B0h */ case    6:  		/* lis R12, -32238 */
		/* 821181B0h case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 821181B0h case    6:*/		return 0x821181B4;
		  /* 821181B4h */ case    7:  		/* ori R0, R0, 0 */
		/* 821181B4h case    7:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821181B4h case    7:*/		return 0x821181B8;
		  /* 821181B8h */ case    8:  		/* addi R12, R12, -32308 */
		/* 821181B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF81CC);
		/* 821181B8h case    8:*/		return 0x821181BC;
		  /* 821181BCh */ case    9:  		/* ori R0, R0, 0 */
		/* 821181BCh case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821181BCh case    9:*/		return 0x821181C0;
		  /* 821181C0h */ case   10:  		/* add R12, R12, R0 */
		/* 821181C0h case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821181C0h case   10:*/		return 0x821181C4;
		  /* 821181C4h */ case   11:  		/* mtspr CTR, R12 */
		/* 821181C4h case   11:*/		regs.CTR = regs.R12;
		/* 821181C4h case   11:*/		return 0x821181C8;
		  /* 821181C8h */ case   12:  		/* bcctr 20, CR0_LT */
		/* 821181C8h case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821181C8h case   12:*/		return 0x821181CC;
		  /* 821181CCh */ case   13:  		/* cmpwi CR6, R5, 0 */
		/* 821181CCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 821181CCh case   13:*/		return 0x821181D0;
		  /* 821181D0h */ case   14:  		/* bc 4, CR6_GT, 12 */
		/* 821181D0h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821181DC;  }
		/* 821181D0h case   14:*/		return 0x821181D4;
		  /* 821181D4h */ case   15:  		/* cmpwi CR6, R5, 9 */
		/* 821181D4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000009);
		/* 821181D4h case   15:*/		return 0x821181D8;
		  /* 821181D8h */ case   16:  		/* bc 4, CR6_GT, -72 */
		/* 821181D8h case   16:*/		if ( !regs.CR[6].gt ) { return 0x82118190;  }
		/* 821181D8h case   16:*/		return 0x821181DC;
	}
	return 0x821181DC;
} // Block from 82118198h-821181DCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821181DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821181DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821181DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821181DC);
		  /* 821181DCh */ case    0:  		/* li R3, 1 */
		/* 821181DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821181DCh case    0:*/		return 0x821181E0;
		  /* 821181E0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821181E0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821181E0h case    1:*/		return 0x821181E4;
	}
	return 0x821181E4;
} // Block from 821181DCh-821181E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821181E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821181E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821181E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821181E4);
		  /* 821181E4h */ case    0:  		/* cmpwi CR6, R5, 0 */
		/* 821181E4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 821181E4h case    0:*/		return 0x821181E8;
		  /* 821181E8h */ case    1:  		/* bc 4, CR6_GT, -12 */
		/* 821181E8h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821181DC;  }
		/* 821181E8h case    1:*/		return 0x821181EC;
		  /* 821181ECh */ case    2:  		/* cmpwi CR6, R5, 3 */
		/* 821181ECh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000003);
		/* 821181ECh case    2:*/		return 0x821181F0;
		  /* 821181F0h */ case    3:  		/* bc 4, CR6_GT, -96 */
		/* 821181F0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82118190;  }
		/* 821181F0h case    3:*/		return 0x821181F4;
		  /* 821181F4h */ case    4:  		/* cmpwi CR6, R5, 5 */
		/* 821181F4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000005);
		/* 821181F4h case    4:*/		return 0x821181F8;
		  /* 821181F8h */ case    5:  		/* bc 4, CR6_GT, -28 */
		/* 821181F8h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821181DC;  }
		/* 821181F8h case    5:*/		return 0x821181FC;
		  /* 821181FCh */ case    6:  		/* cmpwi CR6, R5, 7 */
		/* 821181FCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000007);
		/* 821181FCh case    6:*/		return 0x82118200;
		  /* 82118200h */ case    7:  		/* b -40 */
		/* 82118200h case    7:*/		return 0x821181D8;
		/* 82118200h case    7:*/		return 0x82118204;
		  /* 82118204h */ case    8:  		/* cmpwi CR6, R5, 0 */
		/* 82118204h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 82118204h case    8:*/		return 0x82118208;
		  /* 82118208h */ case    9:  		/* bc 4, CR6_GT, -44 */
		/* 82118208h case    9:*/		if ( !regs.CR[6].gt ) { return 0x821181DC;  }
		/* 82118208h case    9:*/		return 0x8211820C;
		  /* 8211820Ch */ case   10:  		/* cmpwi CR6, R5, 2 */
		/* 8211820Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000002);
		/* 8211820Ch case   10:*/		return 0x82118210;
		  /* 82118210h */ case   11:  		/* bc 4, CR6_GT, -128 */
		/* 82118210h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82118190;  }
		/* 82118210h case   11:*/		return 0x82118214;
		  /* 82118214h */ case   12:  		/* cmpwi CR6, R5, 4 */
		/* 82118214h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000004);
		/* 82118214h case   12:*/		return 0x82118218;
		  /* 82118218h */ case   13:  		/* bc 12, CR6_EQ, -136 */
		/* 82118218h case   13:*/		if ( regs.CR[6].eq ) { return 0x82118190;  }
		/* 82118218h case   13:*/		return 0x8211821C;
		  /* 8211821Ch */ case   14:  		/* cmpwi CR6, R5, 6 */
		/* 8211821Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000006);
		/* 8211821Ch case   14:*/		return 0x82118220;
		  /* 82118220h */ case   15:  		/* bc 12, CR6_EQ, -144 */
		/* 82118220h case   15:*/		if ( regs.CR[6].eq ) { return 0x82118190;  }
		/* 82118220h case   15:*/		return 0x82118224;
		  /* 82118224h */ case   16:  		/* cmpwi CR6, R5, 8 */
		/* 82118224h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000008);
		/* 82118224h case   16:*/		return 0x82118228;
		  /* 82118228h */ case   17:  		/* bc 4, CR6_EQ, -76 */
		/* 82118228h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821181DC;  }
		/* 82118228h case   17:*/		return 0x8211822C;
		  /* 8211822Ch */ case   18:  		/* b -156 */
		/* 8211822Ch case   18:*/		return 0x82118190;
		/* 8211822Ch case   18:*/		return 0x82118230;
		  /* 82118230h */ case   19:  		/* cmpwi CR6, R5, 0 */
		/* 82118230h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 82118230h case   19:*/		return 0x82118234;
		  /* 82118234h */ case   20:  		/* bc 4, CR6_GT, -88 */
		/* 82118234h case   20:*/		if ( !regs.CR[6].gt ) { return 0x821181DC;  }
		/* 82118234h case   20:*/		return 0x82118238;
		  /* 82118238h */ case   21:  		/* cmpwi CR6, R5, 2 */
		/* 82118238h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000002);
		/* 82118238h case   21:*/		return 0x8211823C;
		  /* 8211823Ch */ case   22:  		/* bc 4, CR6_GT, -172 */
		/* 8211823Ch case   22:*/		if ( !regs.CR[6].gt ) { return 0x82118190;  }
		/* 8211823Ch case   22:*/		return 0x82118240;
		  /* 82118240h */ case   23:  		/* cmpwi CR6, R5, 4 */
		/* 82118240h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000004);
		/* 82118240h case   23:*/		return 0x82118244;
		  /* 82118244h */ case   24:  		/* bc 4, CR6_GT, -104 */
		/* 82118244h case   24:*/		if ( !regs.CR[6].gt ) { return 0x821181DC;  }
		/* 82118244h case   24:*/		return 0x82118248;
		  /* 82118248h */ case   25:  		/* cmpwi CR6, R5, 6 */
		/* 82118248h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000006);
		/* 82118248h case   25:*/		return 0x8211824C;
		  /* 8211824Ch */ case   26:  		/* bc 4, CR6_GT, -188 */
		/* 8211824Ch case   26:*/		if ( !regs.CR[6].gt ) { return 0x82118190;  }
		/* 8211824Ch case   26:*/		return 0x82118250;
		  /* 82118250h */ case   27:  		/* cmpwi CR6, R5, 9 */
		/* 82118250h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000009);
		/* 82118250h case   27:*/		return 0x82118254;
		  /* 82118254h */ case   28:  		/* b -44 */
		/* 82118254h case   28:*/		return 0x82118228;
		/* 82118254h case   28:*/		return 0x82118258;
		  /* 82118258h */ case   29:  		/* cmpwi CR6, R5, 10 */
		/* 82118258h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000A);
		/* 82118258h case   29:*/		return 0x8211825C;
		  /* 8211825Ch */ case   30:  		/* bc 12, CR6_LT, -128 */
		/* 8211825Ch case   30:*/		if ( regs.CR[6].lt ) { return 0x821181DC;  }
		/* 8211825Ch case   30:*/		return 0x82118260;
		  /* 82118260h */ case   31:  		/* cmpwi CR6, R5, 13 */
		/* 82118260h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000D);
		/* 82118260h case   31:*/		return 0x82118264;
		  /* 82118264h */ case   32:  		/* b -140 */
		/* 82118264h case   32:*/		return 0x821181D8;
		/* 82118264h case   32:*/		return 0x82118268;
		  /* 82118268h */ case   33:  		/* cmpwi CR6, R5, 10 */
		/* 82118268h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000A);
		/* 82118268h case   33:*/		return 0x8211826C;
		  /* 8211826Ch */ case   34:  		/* bc 12, CR6_LT, -144 */
		/* 8211826Ch case   34:*/		if ( regs.CR[6].lt ) { return 0x821181DC;  }
		/* 8211826Ch case   34:*/		return 0x82118270;
		  /* 82118270h */ case   35:  		/* cmpwi CR6, R5, 11 */
		/* 82118270h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000B);
		/* 82118270h case   35:*/		return 0x82118274;
		  /* 82118274h */ case   36:  		/* b -156 */
		/* 82118274h case   36:*/		return 0x821181D8;
		/* 82118274h case   36:*/		return 0x82118278;
		  /* 82118278h */ case   37:  		/* cmpwi CR6, R5, 10 */
		/* 82118278h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000A);
		/* 82118278h case   37:*/		return 0x8211827C;
		  /* 8211827Ch */ case   38:  		/* bc 12, CR6_EQ, -236 */
		/* 8211827Ch case   38:*/		if ( regs.CR[6].eq ) { return 0x82118190;  }
		/* 8211827Ch case   38:*/		return 0x82118280;
		  /* 82118280h */ case   39:  		/* cmpwi CR6, R5, 12 */
		/* 82118280h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000C);
		/* 82118280h case   39:*/		return 0x82118284;
		  /* 82118284h */ case   40:  		/* b -92 */
		/* 82118284h case   40:*/		return 0x82118228;
		/* 82118284h case   40:*/		return 0x82118288;
		  /* 82118288h */ case   41:  		/* cmpwi CR6, R5, 10 */
		/* 82118288h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000A);
		/* 82118288h case   41:*/		return 0x8211828C;
		  /* 8211828Ch */ case   42:  		/* bc 12, CR6_EQ, -252 */
		/* 8211828Ch case   42:*/		if ( regs.CR[6].eq ) { return 0x82118190;  }
		/* 8211828Ch case   42:*/		return 0x82118290;
		  /* 82118290h */ case   43:  		/* cmpwi CR6, R5, 13 */
		/* 82118290h case   43:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x0000000D);
		/* 82118290h case   43:*/		return 0x82118294;
		  /* 82118294h */ case   44:  		/* b -108 */
		/* 82118294h case   44:*/		return 0x82118228;
		/* 82118294h case   44:*/		return 0x82118298;
	}
	return 0x82118298;
} // Block from 821181E4h-82118298h (45 instructions)

//////////////////////////////////////////////////////
// Block at 82118298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118298);
		  /* 82118298h */ case    0:  		/* mfspr R12, LR */
		/* 82118298h case    0:*/		regs.R12 = regs.LR;
		/* 82118298h case    0:*/		return 0x8211829C;
		  /* 8211829Ch */ case    1:  		/* bl -553024 */
		/* 8211829Ch case    1:*/		regs.LR = 0x821182A0; return 0x8209125C;
		/* 8211829Ch case    1:*/		return 0x821182A0;
		  /* 821182A0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821182A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821182A0h case    2:*/		return 0x821182A4;
		  /* 821182A4h */ case    3:  		/* mr R29, R3 */
		/* 821182A4h case    3:*/		regs.R29 = regs.R3;
		/* 821182A4h case    3:*/		return 0x821182A8;
		  /* 821182A8h */ case    4:  		/* li R3, 40 */
		/* 821182A8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821182A8h case    4:*/		return 0x821182AC;
		  /* 821182ACh */ case    5:  		/* mr R31, R4 */
		/* 821182ACh case    5:*/		regs.R31 = regs.R4;
		/* 821182ACh case    5:*/		return 0x821182B0;
		  /* 821182B0h */ case    6:  		/* mr R30, R5 */
		/* 821182B0h case    6:*/		regs.R30 = regs.R5;
		/* 821182B0h case    6:*/		return 0x821182B4;
		  /* 821182B4h */ case    7:  		/* bl -323724 */
		/* 821182B4h case    7:*/		regs.LR = 0x821182B8; return 0x820C9228;
		/* 821182B4h case    7:*/		return 0x821182B8;
		  /* 821182B8h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 821182B8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821182B8h case    8:*/		return 0x821182BC;
		  /* 821182BCh */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821182BCh case    9:*/		if ( regs.CR[0].eq ) { return 0x821182D0;  }
		/* 821182BCh case    9:*/		return 0x821182C0;
		  /* 821182C0h */ case   10:  		/* mr R5, R30 */
		/* 821182C0h case   10:*/		regs.R5 = regs.R30;
		/* 821182C0h case   10:*/		return 0x821182C4;
		  /* 821182C4h */ case   11:  		/* mr R4, R31 */
		/* 821182C4h case   11:*/		regs.R4 = regs.R31;
		/* 821182C4h case   11:*/		return 0x821182C8;
		  /* 821182C8h */ case   12:  		/* bl -319656 */
		/* 821182C8h case   12:*/		regs.LR = 0x821182CC; return 0x820CA220;
		/* 821182C8h case   12:*/		return 0x821182CC;
		  /* 821182CCh */ case   13:  		/* b 8 */
		/* 821182CCh case   13:*/		return 0x821182D4;
		/* 821182CCh case   13:*/		return 0x821182D0;
	}
	return 0x821182D0;
} // Block from 82118298h-821182D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821182D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821182D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821182D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821182D0);
		  /* 821182D0h */ case    0:  		/* li R3, 0 */
		/* 821182D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821182D0h case    0:*/		return 0x821182D4;
	}
	return 0x821182D4;
} // Block from 821182D0h-821182D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821182D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821182D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821182D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821182D4);
		  /* 821182D4h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821182D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821182D4h case    0:*/		return 0x821182D8;
		  /* 821182D8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821182D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821182F0;  }
		/* 821182D8h case    1:*/		return 0x821182DC;
		  /* 821182DCh */ case    2:  		/* lwz R11, <#[R29 + 116]> */
		/* 821182DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821182DCh case    2:*/		return 0x821182E0;
		  /* 821182E0h */ case    3:  		/* stw R11, <#[R3 + 24]> */
		/* 821182E0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821182E0h case    3:*/		return 0x821182E4;
		  /* 821182E4h */ case    4:  		/* lwz R11, <#[R29 + 116]> */
		/* 821182E4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821182E4h case    4:*/		return 0x821182E8;
		  /* 821182E8h */ case    5:  		/* addi R11, R11, 1 */
		/* 821182E8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821182E8h case    5:*/		return 0x821182EC;
		  /* 821182ECh */ case    6:  		/* stw R11, <#[R29 + 116]> */
		/* 821182ECh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821182ECh case    6:*/		return 0x821182F0;
	}
	return 0x821182F0;
} // Block from 821182D4h-821182F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821182F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821182F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821182F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821182F0);
		  /* 821182F0h */ case    0:  		/* addi R1, R1, 112 */
		/* 821182F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821182F0h case    0:*/		return 0x821182F4;
		  /* 821182F4h */ case    1:  		/* b -553032 */
		/* 821182F4h case    1:*/		return 0x820912AC;
		/* 821182F4h case    1:*/		return 0x821182F8;
	}
	return 0x821182F8;
} // Block from 821182F0h-821182F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821182F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821182F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821182F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821182F8);
		  /* 821182F8h */ case    0:  		/* mfspr R12, LR */
		/* 821182F8h case    0:*/		regs.R12 = regs.LR;
		/* 821182F8h case    0:*/		return 0x821182FC;
		  /* 821182FCh */ case    1:  		/* bl -553120 */
		/* 821182FCh case    1:*/		regs.LR = 0x82118300; return 0x8209125C;
		/* 821182FCh case    1:*/		return 0x82118300;
		  /* 82118300h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82118300h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82118300h case    2:*/		return 0x82118304;
		  /* 82118304h */ case    3:  		/* mr R29, R3 */
		/* 82118304h case    3:*/		regs.R29 = regs.R3;
		/* 82118304h case    3:*/		return 0x82118308;
		  /* 82118308h */ case    4:  		/* mr R30, R4 */
		/* 82118308h case    4:*/		regs.R30 = regs.R4;
		/* 82118308h case    4:*/		return 0x8211830C;
		  /* 8211830Ch */ case    5:  		/* mr R31, R5 */
		/* 8211830Ch case    5:*/		regs.R31 = regs.R5;
		/* 8211830Ch case    5:*/		return 0x82118310;
		  /* 82118310h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 82118310h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82118310h case    6:*/		return 0x82118314;
		  /* 82118314h */ case    7:  		/* bc 12, CR6_EQ, 176 */
		/* 82118314h case    7:*/		if ( regs.CR[6].eq ) { return 0x821183C4;  }
		/* 82118314h case    7:*/		return 0x82118318;
		  /* 82118318h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 82118318h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82118318h case    8:*/		return 0x8211831C;
		  /* 8211831Ch */ case    9:  		/* cmpwi CR6, R11, 1 */
		/* 8211831Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211831Ch case    9:*/		return 0x82118320;
		  /* 82118320h */ case   10:  		/* bc 4, CR6_EQ, 60 */
		/* 82118320h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211835C;  }
		/* 82118320h case   10:*/		return 0x82118324;
		  /* 82118324h */ case   11:  		/* cmplwi CR6, R31, 0 */
		/* 82118324h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82118324h case   11:*/		return 0x82118328;
		  /* 82118328h */ case   12:  		/* bc 12, CR6_EQ, 264 */
		/* 82118328h case   12:*/		if ( regs.CR[6].eq ) { return 0x82118430;  }
		/* 82118328h case   12:*/		return 0x8211832C;
		  /* 8211832Ch */ case   13:  		/* lwz R10, <#[R31 + 4]> */
		/* 8211832Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8211832Ch case   13:*/		return 0x82118330;
	}
	return 0x82118330;
} // Block from 821182F8h-82118330h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82118330h
// Function '?Optimize@CProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118330);
		  /* 82118330h */ case    0:  		/* cmpwi CR6, R10, 1 */
		/* 82118330h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82118330h case    0:*/		return 0x82118334;
		  /* 82118334h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 82118334h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211835C;  }
		/* 82118334h case    1:*/		return 0x82118338;
		  /* 82118338h */ case    2:  		/* mr R3, R29 */
		/* 82118338h case    2:*/		regs.R3 = regs.R29;
		/* 82118338h case    2:*/		return 0x8211833C;
		  /* 8211833Ch */ case    3:  		/* lwz R5, <#[R31 + 8]> */
		/* 8211833Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 8211833Ch case    3:*/		return 0x82118340;
		  /* 82118340h */ case    4:  		/* lwz R4, <#[R30 + 8]> */
		/* 82118340h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 82118340h case    4:*/		return 0x82118344;
		  /* 82118344h */ case    5:  		/* bl -76 */
		/* 82118344h case    5:*/		regs.LR = 0x82118348; return 0x821182F8;
		/* 82118344h case    5:*/		return 0x82118348;
		  /* 82118348h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82118348h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118348h case    6:*/		return 0x8211834C;
		  /* 8211834Ch */ case    7:  		/* bc 12, CR0_EQ, 228 */
		/* 8211834Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82118430;  }
		/* 8211834Ch case    7:*/		return 0x82118350;
		  /* 82118350h */ case    8:  		/* lwz R30, <#[R30 + 12]> */
		/* 82118350h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 82118350h case    8:*/		return 0x82118354;
		  /* 82118354h */ case    9:  		/* lwz R31, <#[R31 + 12]> */
		/* 82118354h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 82118354h case    9:*/		return 0x82118358;
		  /* 82118358h */ case   10:  		/* b -72 */
		/* 82118358h case   10:*/		return 0x82118310;
		/* 82118358h case   10:*/		return 0x8211835C;
	}
	return 0x8211835C;
} // Block from 82118330h-8211835Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211835Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211835C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211835C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211835C);
		  /* 8211835Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211835Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211835Ch case    0:*/		return 0x82118360;
		  /* 82118360h */ case    1:  		/* bc 12, CR6_EQ, 208 */
		/* 82118360h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118430;  }
		/* 82118360h case    1:*/		return 0x82118364;
		  /* 82118364h */ case    2:  		/* lwz R10, <#[R31 + 4]> */
		/* 82118364h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82118364h case    2:*/		return 0x82118368;
		  /* 82118368h */ case    3:  		/* cmpw CR6, R11, R10 */
		/* 82118368h case    3:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 82118368h case    3:*/		return 0x8211836C;
		  /* 8211836Ch */ case    4:  		/* bc 4, CR6_EQ, 196 */
		/* 8211836Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82118430;  }
		/* 8211836Ch case    4:*/		return 0x82118370;
		  /* 82118370h */ case    5:  		/* cmpwi CR6, R11, 6 */
		/* 82118370h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82118370h case    5:*/		return 0x82118374;
		  /* 82118374h */ case    6:  		/* bc 12, CR6_EQ, 68 */
		/* 82118374h case    6:*/		if ( regs.CR[6].eq ) { return 0x821183B8;  }
		/* 82118374h case    6:*/		return 0x82118378;
		  /* 82118378h */ case    7:  		/* cmpwi CR6, R11, 8 */
		/* 82118378h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 82118378h case    7:*/		return 0x8211837C;
		  /* 8211837Ch */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 8211837Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8211839C;  }
		/* 8211837Ch case    8:*/		return 0x82118380;
		  /* 82118380h */ case    9:  		/* cmpwi CR6, R11, 9 */
		/* 82118380h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82118380h case    9:*/		return 0x82118384;
		  /* 82118384h */ case   10:  		/* bc 12, CR6_EQ, 80 */
		/* 82118384h case   10:*/		if ( regs.CR[6].eq ) { return 0x821183D4;  }
		/* 82118384h case   10:*/		return 0x82118388;
		  /* 82118388h */ case   11:  		/* cmpwi CR6, R11, 11 */
		/* 82118388h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 82118388h case   11:*/		return 0x8211838C;
		  /* 8211838Ch */ case   12:  		/* bc 4, CR6_EQ, 164 */
		/* 8211838Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82118430;  }
		/* 8211838Ch case   12:*/		return 0x82118390;
		  /* 82118390h */ case   13:  		/* lwz R31, <#[R31 + 48]> */
		/* 82118390h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000030) );
		/* 82118390h case   13:*/		return 0x82118394;
		  /* 82118394h */ case   14:  		/* lwz R30, <#[R30 + 48]> */
		/* 82118394h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000030) );
		/* 82118394h case   14:*/		return 0x82118398;
		  /* 82118398h */ case   15:  		/* b -136 */
		/* 82118398h case   15:*/		return 0x82118310;
		/* 82118398h case   15:*/		return 0x8211839C;
	}
	return 0x8211839C;
} // Block from 8211835Ch-8211839Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211839Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211839C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211839C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211839C);
		  /* 8211839Ch */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 8211839Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8211839Ch case    0:*/		return 0x821183A0;
		  /* 821183A0h */ case    1:  		/* lwz R10, <#[R31 + 20]> */
		/* 821183A0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821183A0h case    1:*/		return 0x821183A4;
		  /* 821183A4h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 821183A4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821183A4h case    2:*/		return 0x821183A8;
		  /* 821183A8h */ case    3:  		/* bc 4, CR6_EQ, 136 */
		/* 821183A8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82118430;  }
		/* 821183A8h case    3:*/		return 0x821183AC;
		  /* 821183ACh */ case    4:  		/* lwz R31, <#[R31 + 16]> */
		/* 821183ACh case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 821183ACh case    4:*/		return 0x821183B0;
		  /* 821183B0h */ case    5:  		/* lwz R30, <#[R30 + 16]> */
		/* 821183B0h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000010) );
		/* 821183B0h case    5:*/		return 0x821183B4;
		  /* 821183B4h */ case    6:  		/* b -164 */
		/* 821183B4h case    6:*/		return 0x82118310;
		/* 821183B4h case    6:*/		return 0x821183B8;
	}
	return 0x821183B8;
} // Block from 8211839Ch-821183B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821183B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821183B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821183B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821183B8);
		  /* 821183B8h */ case    0:  		/* lwz R31, <#[R31 + 24]> */
		/* 821183B8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000018) );
		/* 821183B8h case    0:*/		return 0x821183BC;
		  /* 821183BCh */ case    1:  		/* lwz R30, <#[R30 + 24]> */
		/* 821183BCh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000018) );
		/* 821183BCh case    1:*/		return 0x821183C0;
		  /* 821183C0h */ case    2:  		/* b -176 */
		/* 821183C0h case    2:*/		return 0x82118310;
		/* 821183C0h case    2:*/		return 0x821183C4;
	}
	return 0x821183C4;
} // Block from 821183B8h-821183C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821183C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821183C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821183C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821183C4);
		  /* 821183C4h */ case    0:  		/* addi R11, R31, 0 */
		/* 821183C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x0);
		/* 821183C4h case    0:*/		return 0x821183C8;
		  /* 821183C8h */ case    1:  		/* cntlzw R11, R11 */
		/* 821183C8h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821183C8h case    1:*/		return 0x821183CC;
		  /* 821183CCh */ case    2:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 821183CCh case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 821183CCh case    2:*/		return 0x821183D0;
		  /* 821183D0h */ case    3:  		/* b 100 */
		/* 821183D0h case    3:*/		return 0x82118434;
		/* 821183D0h case    3:*/		return 0x821183D4;
	}
	return 0x821183D4;
} // Block from 821183C4h-821183D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821183D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821183D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821183D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821183D4);
		  /* 821183D4h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 821183D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821183D4h case    0:*/		return 0x821183D8;
		  /* 821183D8h */ case    1:  		/* lwz R10, <#[R31 + 16]> */
		/* 821183D8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821183D8h case    1:*/		return 0x821183DC;
		  /* 821183DCh */ case    2:  		/* cmpw CR6, R11, R10 */
		/* 821183DCh case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821183DCh case    2:*/		return 0x821183E0;
		  /* 821183E0h */ case    3:  		/* bc 4, CR6_EQ, 80 */
		/* 821183E0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82118430;  }
		/* 821183E0h case    3:*/		return 0x821183E4;
		  /* 821183E4h */ case    4:  		/* lwz R11, <#[R30 + 20]> */
		/* 821183E4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 821183E4h case    4:*/		return 0x821183E8;
		  /* 821183E8h */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 821183E8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821183E8h case    5:*/		return 0x821183EC;
		  /* 821183ECh */ case    6:  		/* cmpw CR6, R11, R10 */
		/* 821183ECh case    6:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821183ECh case    6:*/		return 0x821183F0;
		  /* 821183F0h */ case    7:  		/* bc 4, CR6_EQ, 64 */
		/* 821183F0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82118430;  }
		/* 821183F0h case    7:*/		return 0x821183F4;
		  /* 821183F4h */ case    8:  		/* mr R3, R29 */
		/* 821183F4h case    8:*/		regs.R3 = regs.R29;
		/* 821183F4h case    8:*/		return 0x821183F8;
		  /* 821183F8h */ case    9:  		/* lwz R5, <#[R31 + 24]> */
		/* 821183F8h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 821183F8h case    9:*/		return 0x821183FC;
		  /* 821183FCh */ case   10:  		/* lwz R4, <#[R30 + 24]> */
		/* 821183FCh case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000018) );
		/* 821183FCh case   10:*/		return 0x82118400;
		  /* 82118400h */ case   11:  		/* bl -264 */
		/* 82118400h case   11:*/		regs.LR = 0x82118404; return 0x821182F8;
		/* 82118400h case   11:*/		return 0x82118404;
		  /* 82118404h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82118404h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118404h case   12:*/		return 0x82118408;
		  /* 82118408h */ case   13:  		/* bc 12, CR0_EQ, 40 */
		/* 82118408h case   13:*/		if ( regs.CR[0].eq ) { return 0x82118430;  }
		/* 82118408h case   13:*/		return 0x8211840C;
		  /* 8211840Ch */ case   14:  		/* lwz R11, <#[R30 + 28]> */
		/* 8211840Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211840Ch case   14:*/		return 0x82118410;
		  /* 82118410h */ case   15:  		/* lwz R10, <#[R31 + 28]> */
		/* 82118410h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82118410h case   15:*/		return 0x82118414;
		  /* 82118414h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 82118414h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82118414h case   16:*/		return 0x82118418;
		  /* 82118418h */ case   17:  		/* bc 4, CR6_EQ, 24 */
		/* 82118418h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82118430;  }
		/* 82118418h case   17:*/		return 0x8211841C;
		  /* 8211841Ch */ case   18:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211841Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211841Ch case   18:*/		return 0x82118420;
		  /* 82118420h */ case   19:  		/* li R3, 1 */
		/* 82118420h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82118420h case   19:*/		return 0x82118424;
		  /* 82118424h */ case   20:  		/* lwz R10, <#[R31 + 32]> */
		/* 82118424h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82118424h case   20:*/		return 0x82118428;
		  /* 82118428h */ case   21:  		/* cmplw CR6, R11, R10 */
		/* 82118428h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82118428h case   21:*/		return 0x8211842C;
		  /* 8211842Ch */ case   22:  		/* bc 12, CR6_EQ, 8 */
		/* 8211842Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x82118434;  }
		/* 8211842Ch case   22:*/		return 0x82118430;
	}
	return 0x82118430;
} // Block from 821183D4h-82118430h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82118430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118430);
		  /* 82118430h */ case    0:  		/* li R3, 0 */
		/* 82118430h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118430h case    0:*/		return 0x82118434;
	}
	return 0x82118434;
} // Block from 82118430h-82118434h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118434);
		  /* 82118434h */ case    0:  		/* addi R1, R1, 112 */
		/* 82118434h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82118434h case    0:*/		return 0x82118438;
		  /* 82118438h */ case    1:  		/* b -553356 */
		/* 82118438h case    1:*/		return 0x820912AC;
		/* 82118438h case    1:*/		return 0x8211843C;
		  /* 8211843Ch */ case    2:  		/* nop */
		/* 8211843Ch case    2:*/		cpu::op::nop();
		/* 8211843Ch case    2:*/		return 0x82118440;
		  /* 82118440h */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 82118440h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82118440h case    3:*/		return 0x82118444;
		  /* 82118444h */ case    4:  		/* bc 12, CR6_EQ, 576 */
		/* 82118444h case    4:*/		if ( regs.CR[6].eq ) { return 0x82118684;  }
		/* 82118444h case    4:*/		return 0x82118448;
		  /* 82118448h */ case    5:  		/* lwz R11, <#[R4 + 4]> */
		/* 82118448h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82118448h case    5:*/		return 0x8211844C;
		  /* 8211844Ch */ case    6:  		/* cmpwi CR6, R11, 9 */
		/* 8211844Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211844Ch case    6:*/		return 0x82118450;
		  /* 82118450h */ case    7:  		/* bc 4, CR6_EQ, 564 */
		/* 82118450h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82118684;  }
		/* 82118450h case    7:*/		return 0x82118454;
		  /* 82118454h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 82118454h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82118454h case    8:*/		return 0x82118458;
		  /* 82118458h */ case    9:  		/* bc 12, CR6_EQ, 556 */
		/* 82118458h case    9:*/		if ( regs.CR[6].eq ) { return 0x82118684;  }
		/* 82118458h case    9:*/		return 0x8211845C;
		  /* 8211845Ch */ case   10:  		/* lwz R11, <#[R5 + 4]> */
		/* 8211845Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 8211845Ch case   10:*/		return 0x82118460;
		  /* 82118460h */ case   11:  		/* cmpwi CR6, R11, 9 */
		/* 82118460h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82118460h case   11:*/		return 0x82118464;
		  /* 82118464h */ case   12:  		/* bc 4, CR6_EQ, 544 */
		/* 82118464h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82118684;  }
		/* 82118464h case   12:*/		return 0x82118468;
		  /* 82118468h */ case   13:  		/* lwz R4, <#[R4 + 20]> */
		/* 82118468h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000014) );
		/* 82118468h case   13:*/		return 0x8211846C;
		  /* 8211846Ch */ case   14:  		/* lwz R5, <#[R5 + 20]> */
		/* 8211846Ch case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000014) );
		/* 8211846Ch case   14:*/		return 0x82118470;
		  /* 82118470h */ case   15:  		/* cmpw CR6, R4, R5 */
		/* 82118470h case   15:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R5);
		/* 82118470h case   15:*/		return 0x82118474;
		  /* 82118474h */ case   16:  		/* bc 4, CR6_EQ, 16 */
		/* 82118474h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82118484;  }
		/* 82118474h case   16:*/		return 0x82118478;
		  /* 82118478h */ case   17:  		/* stw R4, <#[R6]> */
		/* 82118478h case   17:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R6 + 0x00000000) );
		/* 82118478h case   17:*/		return 0x8211847C;
		  /* 8211847Ch */ case   18:  		/* li R3, 0 */
		/* 8211847Ch case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211847Ch case   18:*/		return 0x82118480;
		  /* 82118480h */ case   19:  		/* bclr 20, CR0_LT */
		/* 82118480h case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118480h case   19:*/		return 0x82118484;
	}
	return 0x82118484;
} // Block from 82118434h-82118484h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82118484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118484);
		  /* 82118484h */ case    0:  		/* lis R11, -32253 */
		/* 82118484h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82118484h case    0:*/		return 0x82118488;
		  /* 82118488h */ case    1:  		/* rlwinm R10, R5, 3, 0, 28 */
		/* 82118488h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R5);
		/* 82118488h case    1:*/		return 0x8211848C;
		  /* 8211848Ch */ case    2:  		/* addi R11, R11, 7504 */
		/* 8211848Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1D50);
		/* 8211848Ch case    2:*/		return 0x82118490;
		  /* 82118490h */ case    3:  		/* rlwinm R9, R4, 3, 0, 28 */
		/* 82118490h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R4);
		/* 82118490h case    3:*/		return 0x82118494;
		  /* 82118494h */ case    4:  		/* lwzx R7, <#[R10 + R11]> */
		/* 82118494h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82118494h case    4:*/		return 0x82118498;
		  /* 82118498h */ case    5:  		/* lwzx R8, <#[R9 + R11]> */
		/* 82118498h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82118498h case    5:*/		return 0x8211849C;
		  /* 8211849Ch */ case    6:  		/* cmplw CR6, R8, R7 */
		/* 8211849Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 8211849Ch case    6:*/		return 0x821184A0;
		  /* 821184A0h */ case    7:  		/* bc 12, CR6_GT, 8 */
		/* 821184A0h case    7:*/		if ( regs.CR[6].gt ) { return 0x821184A8;  }
		/* 821184A0h case    7:*/		return 0x821184A4;
		  /* 821184A4h */ case    8:  		/* mr R8, R7 */
		/* 821184A4h case    8:*/		regs.R8 = regs.R7;
		/* 821184A4h case    8:*/		return 0x821184A8;
	}
	return 0x821184A8;
} // Block from 82118484h-821184A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821184A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821184A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821184A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821184A8);
		  /* 821184A8h */ case    0:  		/* addi R7, R11, 4 */
		/* 821184A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4);
		/* 821184A8h case    0:*/		return 0x821184AC;
		  /* 821184ACh */ case    1:  		/* addi R11, R11, 4 */
		/* 821184ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821184ACh case    1:*/		return 0x821184B0;
		  /* 821184B0h */ case    2:  		/* lwzx R10, <#[R10 + R7]> */
		/* 821184B0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 821184B0h case    2:*/		return 0x821184B4;
		  /* 821184B4h */ case    3:  		/* lwzx R9, <#[R9 + R11]> */
		/* 821184B4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821184B4h case    3:*/		return 0x821184B8;
		  /* 821184B8h */ case    4:  		/* and R11, R9, R10 */
		/* 821184B8h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 821184B8h case    4:*/		return 0x821184BC;
		  /* 821184BCh */ case    5:  		/* rlwinm. R7, R11, 0, 31, 31 */
		/* 821184BCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R11);
		/* 821184BCh case    5:*/		return 0x821184C0;
		  /* 821184C0h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 821184C0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821184D4;  }
		/* 821184C0h case    6:*/		return 0x821184C4;
		  /* 821184C4h */ case    7:  		/* li R11, 0 */
		/* 821184C4h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821184C4h case    7:*/		return 0x821184C8;
		  /* 821184C8h */ case    8:  		/* li R3, 0 */
		/* 821184C8h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821184C8h case    8:*/		return 0x821184CC;
		  /* 821184CCh */ case    9:  		/* stw R11, <#[R6]> */
		/* 821184CCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821184CCh case    9:*/		return 0x821184D0;
		  /* 821184D0h */ case   10:  		/* bclr 20, CR0_LT */
		/* 821184D0h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821184D0h case   10:*/		return 0x821184D4;
	}
	return 0x821184D4;
} // Block from 821184A8h-821184D4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821184D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821184D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821184D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821184D4);
		  /* 821184D4h */ case    0:  		/* rlwinm. R7, R11, 0, 26, 26 */
		/* 821184D4h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R7,regs.R11);
		/* 821184D4h case    0:*/		return 0x821184D8;
		  /* 821184D8h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821184D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821184E4;  }
		/* 821184D8h case    1:*/		return 0x821184DC;
		  /* 821184DCh */ case    2:  		/* li R11, 1 */
		/* 821184DCh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821184DCh case    2:*/		return 0x821184E0;
		  /* 821184E0h */ case    3:  		/* b -24 */
		/* 821184E0h case    3:*/		return 0x821184C8;
		/* 821184E0h case    3:*/		return 0x821184E4;
	}
	return 0x821184E4;
} // Block from 821184D4h-821184E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821184E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821184E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821184E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821184E4);
		  /* 821184E4h */ case    0:  		/* rlwinm. R7, R11, 0, 29, 29 */
		/* 821184E4h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R7,regs.R11);
		/* 821184E4h case    0:*/		return 0x821184E8;
		  /* 821184E8h */ case    1:  		/* bc 4, CR0_EQ, 72 */
		/* 821184E8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82118530;  }
		/* 821184E8h case    1:*/		return 0x821184EC;
		  /* 821184ECh */ case    2:  		/* rlwinm. R7, R11, 0, 30, 30 */
		/* 821184ECh case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R11);
		/* 821184ECh case    2:*/		return 0x821184F0;
		  /* 821184F0h */ case    3:  		/* bc 12, CR0_EQ, 212 */
		/* 821184F0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821185C4;  }
		/* 821184F0h case    3:*/		return 0x821184F4;
		  /* 821184F4h */ case    4:  		/* addi R11, R5, -1 */
		/* 821184F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xFFFFFFFF);
		/* 821184F4h case    4:*/		return 0x821184F8;
		  /* 821184F8h */ case    5:  		/* cmpwi CR6, R4, 1 */
		/* 821184F8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000001);
		/* 821184F8h case    5:*/		return 0x821184FC;
		  /* 821184FCh */ case    6:  		/* cntlzw R11, R11 */
		/* 821184FCh case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821184FCh case    6:*/		return 0x82118500;
		  /* 82118500h */ case    7:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82118500h case    7:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82118500h case    7:*/		return 0x82118504;
		  /* 82118504h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 82118504h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82118518;  }
		/* 82118504h case    8:*/		return 0x82118508;
		  /* 82118508h */ case    9:  		/* rlwinm. R7, R10, 0, 29, 29 */
		/* 82118508h case    9:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R7,regs.R10);
		/* 82118508h case    9:*/		return 0x8211850C;
		  /* 8211850Ch */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 8211850Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x82118518;  }
		/* 8211850Ch case   10:*/		return 0x82118510;
		  /* 82118510h */ case   11:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82118510h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82118510h case   11:*/		return 0x82118514;
		  /* 82118514h */ case   12:  		/* bc 12, CR0_EQ, 28 */
		/* 82118514h case   12:*/		if ( regs.CR[0].eq ) { return 0x82118530;  }
		/* 82118514h case   12:*/		return 0x82118518;
	}
	return 0x82118518;
} // Block from 821184E4h-82118518h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82118518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118518);
		  /* 82118518h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 82118518h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82118518h case    0:*/		return 0x8211851C;
		  /* 8211851Ch */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 8211851Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211857C;  }
		/* 8211851Ch case    1:*/		return 0x82118520;
		  /* 82118520h */ case    2:  		/* rlwinm. R11, R9, 0, 29, 29 */
		/* 82118520h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R9);
		/* 82118520h case    2:*/		return 0x82118524;
		  /* 82118524h */ case    3:  		/* bc 12, CR0_EQ, 88 */
		/* 82118524h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211857C;  }
		/* 82118524h case    3:*/		return 0x82118528;
		  /* 82118528h */ case    4:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 82118528h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 82118528h case    4:*/		return 0x8211852C;
		  /* 8211852Ch */ case    5:  		/* bc 4, CR0_EQ, 80 */
		/* 8211852Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8211857C;  }
		/* 8211852Ch case    5:*/		return 0x82118530;
	}
	return 0x82118530;
} // Block from 82118518h-82118530h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82118530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118530);
		  /* 82118530h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 82118530h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82118530h case    0:*/		return 0x82118534;
		  /* 82118534h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82118534h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118544;  }
		/* 82118534h case    1:*/		return 0x82118538;
		  /* 82118538h */ case    2:  		/* li R11, 6 */
		/* 82118538h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 82118538h case    2:*/		return 0x8211853C;
		  /* 8211853Ch */ case    3:  		/* stw R11, <#[R6]> */
		/* 8211853Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8211853Ch case    3:*/		return 0x82118540;
		  /* 82118540h */ case    4:  		/* b -196 */
		/* 82118540h case    4:*/		return 0x8211847C;
		/* 82118540h case    4:*/		return 0x82118544;
	}
	return 0x82118544;
} // Block from 82118530h-82118544h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82118544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118544);
		  /* 82118544h */ case    0:  		/* cmplwi CR6, R8, 8 */
		/* 82118544h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000008);
		/* 82118544h case    0:*/		return 0x82118548;
		  /* 82118548h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 82118548h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118574;  }
		/* 82118548h case    1:*/		return 0x8211854C;
		  /* 8211854Ch */ case    2:  		/* cmplwi CR6, R8, 16 */
		/* 8211854Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000010);
		/* 8211854Ch case    2:*/		return 0x82118550;
		  /* 82118550h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 82118550h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211856C;  }
		/* 82118550h case    3:*/		return 0x82118554;
		  /* 82118554h */ case    4:  		/* cmplwi CR6, R8, 32 */
		/* 82118554h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000020);
		/* 82118554h case    4:*/		return 0x82118558;
		  /* 82118558h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82118558h case    5:*/		if ( regs.CR[6].eq ) { return 0x82118564;  }
		/* 82118558h case    5:*/		return 0x8211855C;
		  /* 8211855Ch */ case    6:  		/* cmplwi CR6, R8, 64 */
		/* 8211855Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000040);
		/* 8211855Ch case    6:*/		return 0x82118560;
		  /* 82118560h */ case    7:  		/* bc 4, CR6_EQ, -228 */
		/* 82118560h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211847C;  }
		/* 82118560h case    7:*/		return 0x82118564;
	}
	return 0x82118564;
} // Block from 82118544h-82118564h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118564);
		  /* 82118564h */ case    0:  		/* li R11, 9 */
		/* 82118564h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 82118564h case    0:*/		return 0x82118568;
		  /* 82118568h */ case    1:  		/* b -44 */
		/* 82118568h case    1:*/		return 0x8211853C;
		/* 82118568h case    1:*/		return 0x8211856C;
	}
	return 0x8211856C;
} // Block from 82118564h-8211856Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211856Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211856C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211856C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211856C);
		  /* 8211856Ch */ case    0:  		/* li R11, 8 */
		/* 8211856Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8211856Ch case    0:*/		return 0x82118570;
		  /* 82118570h */ case    1:  		/* b -52 */
		/* 82118570h case    1:*/		return 0x8211853C;
		/* 82118570h case    1:*/		return 0x82118574;
	}
	return 0x82118574;
} // Block from 8211856Ch-82118574h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118574);
		  /* 82118574h */ case    0:  		/* li R11, 7 */
		/* 82118574h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 82118574h case    0:*/		return 0x82118578;
		  /* 82118578h */ case    1:  		/* b -60 */
		/* 82118578h case    1:*/		return 0x8211853C;
		/* 82118578h case    1:*/		return 0x8211857C;
	}
	return 0x8211857C;
} // Block from 82118574h-8211857Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211857Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211857C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211857C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211857C);
		  /* 8211857Ch */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 8211857Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8211857Ch case    0:*/		return 0x82118580;
		  /* 82118580h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 82118580h case    1:*/		if ( regs.CR[6].eq ) { return 0x821185BC;  }
		/* 82118580h case    1:*/		return 0x82118584;
		  /* 82118584h */ case    2:  		/* cmplwi CR6, R8, 8 */
		/* 82118584h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000008);
		/* 82118584h case    2:*/		return 0x82118588;
		  /* 82118588h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82118588h case    3:*/		if ( regs.CR[6].eq ) { return 0x821185B4;  }
		/* 82118588h case    3:*/		return 0x8211858C;
		  /* 8211858Ch */ case    4:  		/* cmplwi CR6, R8, 16 */
		/* 8211858Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000010);
		/* 8211858Ch case    4:*/		return 0x82118590;
		  /* 82118590h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82118590h case    5:*/		if ( regs.CR[6].eq ) { return 0x821185AC;  }
		/* 82118590h case    5:*/		return 0x82118594;
		  /* 82118594h */ case    6:  		/* cmplwi CR6, R8, 32 */
		/* 82118594h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000020);
		/* 82118594h case    6:*/		return 0x82118598;
		  /* 82118598h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82118598h case    7:*/		if ( regs.CR[6].eq ) { return 0x821185A4;  }
		/* 82118598h case    7:*/		return 0x8211859C;
		  /* 8211859Ch */ case    8:  		/* cmplwi CR6, R8, 64 */
		/* 8211859Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000040);
		/* 8211859Ch case    8:*/		return 0x821185A0;
		  /* 821185A0h */ case    9:  		/* bc 4, CR6_EQ, -292 */
		/* 821185A0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211847C;  }
		/* 821185A0h case    9:*/		return 0x821185A4;
	}
	return 0x821185A4;
} // Block from 8211857Ch-821185A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821185A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821185A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821185A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821185A4);
		  /* 821185A4h */ case    0:  		/* li R11, 5 */
		/* 821185A4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 821185A4h case    0:*/		return 0x821185A8;
		  /* 821185A8h */ case    1:  		/* b -108 */
		/* 821185A8h case    1:*/		return 0x8211853C;
		/* 821185A8h case    1:*/		return 0x821185AC;
	}
	return 0x821185AC;
} // Block from 821185A4h-821185ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821185ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821185AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821185AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821185AC);
		  /* 821185ACh */ case    0:  		/* li R11, 4 */
		/* 821185ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821185ACh case    0:*/		return 0x821185B0;
		  /* 821185B0h */ case    1:  		/* b -116 */
		/* 821185B0h case    1:*/		return 0x8211853C;
		/* 821185B0h case    1:*/		return 0x821185B4;
	}
	return 0x821185B4;
} // Block from 821185ACh-821185B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821185B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821185B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821185B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821185B4);
		  /* 821185B4h */ case    0:  		/* li R11, 3 */
		/* 821185B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821185B4h case    0:*/		return 0x821185B8;
		  /* 821185B8h */ case    1:  		/* b -124 */
		/* 821185B8h case    1:*/		return 0x8211853C;
		/* 821185B8h case    1:*/		return 0x821185BC;
	}
	return 0x821185BC;
} // Block from 821185B4h-821185BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821185BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821185BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821185BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821185BC);
		  /* 821185BCh */ case    0:  		/* li R11, 2 */
		/* 821185BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 821185BCh case    0:*/		return 0x821185C0;
		  /* 821185C0h */ case    1:  		/* b -132 */
		/* 821185C0h case    1:*/		return 0x8211853C;
		/* 821185C0h case    1:*/		return 0x821185C4;
	}
	return 0x821185C4;
} // Block from 821185BCh-821185C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821185C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821185C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821185C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821185C4);
		  /* 821185C4h */ case    0:  		/* rlwinm. R10, R11, 0, 28, 28 */
		/* 821185C4h case    0:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R11);
		/* 821185C4h case    0:*/		return 0x821185C8;
		  /* 821185C8h */ case    1:  		/* bc 12, CR0_EQ, 76 */
		/* 821185C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82118614;  }
		/* 821185C8h case    1:*/		return 0x821185CC;
		  /* 821185CCh */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 821185CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821185CCh case    2:*/		return 0x821185D0;
		  /* 821185D0h */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 821185D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211860C;  }
		/* 821185D0h case    3:*/		return 0x821185D4;
		  /* 821185D4h */ case    4:  		/* cmplwi CR6, R8, 8 */
		/* 821185D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000008);
		/* 821185D4h case    4:*/		return 0x821185D8;
		  /* 821185D8h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 821185D8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82118604;  }
		/* 821185D8h case    5:*/		return 0x821185DC;
		  /* 821185DCh */ case    6:  		/* cmplwi CR6, R8, 16 */
		/* 821185DCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000010);
		/* 821185DCh case    6:*/		return 0x821185E0;
		  /* 821185E0h */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 821185E0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82118604;  }
		/* 821185E0h case    7:*/		return 0x821185E4;
		  /* 821185E4h */ case    8:  		/* cmplwi CR6, R8, 32 */
		/* 821185E4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000020);
		/* 821185E4h case    8:*/		return 0x821185E8;
		  /* 821185E8h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821185E8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821185FC;  }
		/* 821185E8h case    9:*/		return 0x821185EC;
		  /* 821185ECh */ case   10:  		/* cmplwi CR6, R8, 64 */
		/* 821185ECh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000040);
		/* 821185ECh case   10:*/		return 0x821185F0;
		  /* 821185F0h */ case   11:  		/* bc 4, CR6_EQ, -372 */
		/* 821185F0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211847C;  }
		/* 821185F0h case   11:*/		return 0x821185F4;
		  /* 821185F4h */ case   12:  		/* li R11, 13 */
		/* 821185F4h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 821185F4h case   12:*/		return 0x821185F8;
		  /* 821185F8h */ case   13:  		/* b -188 */
		/* 821185F8h case   13:*/		return 0x8211853C;
		/* 821185F8h case   13:*/		return 0x821185FC;
	}
	return 0x821185FC;
} // Block from 821185C4h-821185FCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821185FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821185FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821185FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821185FC);
		  /* 821185FCh */ case    0:  		/* li R11, 12 */
		/* 821185FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 821185FCh case    0:*/		return 0x82118600;
		  /* 82118600h */ case    1:  		/* b -196 */
		/* 82118600h case    1:*/		return 0x8211853C;
		/* 82118600h case    1:*/		return 0x82118604;
	}
	return 0x82118604;
} // Block from 821185FCh-82118604h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118604);
		  /* 82118604h */ case    0:  		/* li R11, 11 */
		/* 82118604h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 82118604h case    0:*/		return 0x82118608;
		  /* 82118608h */ case    1:  		/* b -204 */
		/* 82118608h case    1:*/		return 0x8211853C;
		/* 82118608h case    1:*/		return 0x8211860C;
	}
	return 0x8211860C;
} // Block from 82118604h-8211860Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211860Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211860C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211860C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211860C);
		  /* 8211860Ch */ case    0:  		/* li R11, 10 */
		/* 8211860Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 8211860Ch case    0:*/		return 0x82118610;
		  /* 82118610h */ case    1:  		/* b -212 */
		/* 82118610h case    1:*/		return 0x8211853C;
		/* 82118610h case    1:*/		return 0x82118614;
	}
	return 0x82118614;
} // Block from 8211860Ch-82118614h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118614);
		  /* 82118614h */ case    0:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82118614h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82118614h case    0:*/		return 0x82118618;
		  /* 82118618h */ case    1:  		/* bc 12, CR0_EQ, 108 */
		/* 82118618h case    1:*/		if ( regs.CR[0].eq ) { return 0x82118684;  }
		/* 82118618h case    1:*/		return 0x8211861C;
		  /* 8211861Ch */ case    2:  		/* li R9, 0 */
		/* 8211861Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8211861Ch case    2:*/		return 0x82118620;
		  /* 82118620h */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 82118620h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82118620h case    3:*/		return 0x82118624;
		  /* 82118624h */ case    4:  		/* mr R10, R4 */
		/* 82118624h case    4:*/		regs.R10 = regs.R4;
		/* 82118624h case    4:*/		return 0x82118628;
		  /* 82118628h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82118628h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82118634;  }
		/* 82118628h case    5:*/		return 0x8211862C;
		  /* 8211862Ch */ case    6:  		/* mr R10, R5 */
		/* 8211862Ch case    6:*/		regs.R10 = regs.R5;
		/* 8211862Ch case    6:*/		return 0x82118630;
		  /* 82118630h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82118630h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211863C;  }
		/* 82118630h case    7:*/		return 0x82118634;
	}
	return 0x82118634;
} // Block from 82118614h-82118634h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118634);
		  /* 82118634h */ case    0:  		/* mr R11, R5 */
		/* 82118634h case    0:*/		regs.R11 = regs.R5;
		/* 82118634h case    0:*/		return 0x82118638;
		  /* 82118638h */ case    1:  		/* b 8 */
		/* 82118638h case    1:*/		return 0x82118640;
		/* 82118638h case    1:*/		return 0x8211863C;
	}
	return 0x8211863C;
} // Block from 82118634h-8211863Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211863Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211863C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211863C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211863C);
		  /* 8211863Ch */ case    0:  		/* mr R11, R4 */
		/* 8211863Ch case    0:*/		regs.R11 = regs.R4;
		/* 8211863Ch case    0:*/		return 0x82118640;
	}
	return 0x82118640;
} // Block from 8211863Ch-82118640h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118640);
		  /* 82118640h */ case    0:  		/* cmpwi CR6, R10, 22 */
		/* 82118640h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000016);
		/* 82118640h case    0:*/		return 0x82118644;
		  /* 82118644h */ case    1:  		/* bc 12, CR6_EQ, -264 */
		/* 82118644h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211853C;  }
		/* 82118644h case    1:*/		return 0x82118648;
		  /* 82118648h */ case    2:  		/* cmpwi CR6, R10, 24 */
		/* 82118648h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000018);
		/* 82118648h case    2:*/		return 0x8211864C;
		  /* 8211864Ch */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 8211864Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82118660;  }
		/* 8211864Ch case    3:*/		return 0x82118650;
		  /* 82118650h */ case    4:  		/* cmpwi CR6, R11, 24 */
		/* 82118650h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 82118650h case    4:*/		return 0x82118654;
		  /* 82118654h */ case    5:  		/* bc 12, CR6_LT, 36 */
		/* 82118654h case    5:*/		if ( regs.CR[6].lt ) { return 0x82118678;  }
		/* 82118654h case    5:*/		return 0x82118658;
		  /* 82118658h */ case    6:  		/* cmpwi CR6, R11, 30 */
		/* 82118658h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001E);
		/* 82118658h case    6:*/		return 0x8211865C;
		  /* 8211865Ch */ case    7:  		/* b 24 */
		/* 8211865Ch case    7:*/		return 0x82118674;
		/* 8211865Ch case    7:*/		return 0x82118660;
	}
	return 0x82118660;
} // Block from 82118640h-82118660h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118660);
		  /* 82118660h */ case    0:  		/* cmpwi CR6, R10, 33 */
		/* 82118660h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000021);
		/* 82118660h case    0:*/		return 0x82118664;
		  /* 82118664h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82118664h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118678;  }
		/* 82118664h case    1:*/		return 0x82118668;
		  /* 82118668h */ case    2:  		/* cmpwi CR6, R11, 33 */
		/* 82118668h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 82118668h case    2:*/		return 0x8211866C;
		  /* 8211866Ch */ case    3:  		/* bc 12, CR6_LT, 12 */
		/* 8211866Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82118678;  }
		/* 8211866Ch case    3:*/		return 0x82118670;
		  /* 82118670h */ case    4:  		/* cmpwi CR6, R11, 37 */
		/* 82118670h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000025);
		/* 82118670h case    4:*/		return 0x82118674;
	}
	return 0x82118674;
} // Block from 82118660h-82118674h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82118674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118674);
		  /* 82118674h */ case    0:  		/* bc 4, CR6_GT, -312 */
		/* 82118674h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8211853C;  }
		/* 82118674h case    0:*/		return 0x82118678;
	}
	return 0x82118678;
} // Block from 82118674h-82118678h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118678);
		  /* 82118678h */ case    0:  		/* addi R9, R9, 1 */
		/* 82118678h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82118678h case    0:*/		return 0x8211867C;
		  /* 8211867Ch */ case    1:  		/* cmplwi CR6, R9, 2 */
		/* 8211867Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000002);
		/* 8211867Ch case    1:*/		return 0x82118680;
		  /* 82118680h */ case    2:  		/* bc 12, CR6_LT, -96 */
		/* 82118680h case    2:*/		if ( regs.CR[6].lt ) { return 0x82118620;  }
		/* 82118680h case    2:*/		return 0x82118684;
	}
	return 0x82118684;
} // Block from 82118678h-82118684h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118684);
		  /* 82118684h */ case    0:  		/* lis R3, -32768 */
		/* 82118684h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82118684h case    0:*/		return 0x82118688;
		  /* 82118688h */ case    1:  		/* ori R3, R3, 16389 */
		/* 82118688h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82118688h case    1:*/		return 0x8211868C;
		  /* 8211868Ch */ case    2:  		/* bclr 20, CR0_LT */
		/* 8211868Ch case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211868Ch case    2:*/		return 0x82118690;
	}
	return 0x82118690;
} // Block from 82118684h-82118690h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118690);
		  /* 82118690h */ case    0:  		/* mfspr R12, LR */
		/* 82118690h case    0:*/		regs.R12 = regs.LR;
		/* 82118690h case    0:*/		return 0x82118694;
		  /* 82118694h */ case    1:  		/* bl -554048 */
		/* 82118694h case    1:*/		regs.LR = 0x82118698; return 0x82091254;
		/* 82118694h case    1:*/		return 0x82118698;
		  /* 82118698h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82118698h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82118698h case    2:*/		return 0x8211869C;
		  /* 8211869Ch */ case    3:  		/* mr R28, R3 */
		/* 8211869Ch case    3:*/		regs.R28 = regs.R3;
		/* 8211869Ch case    3:*/		return 0x821186A0;
		  /* 821186A0h */ case    4:  		/* mr R31, R4 */
		/* 821186A0h case    4:*/		regs.R31 = regs.R4;
		/* 821186A0h case    4:*/		return 0x821186A4;
		  /* 821186A4h */ case    5:  		/* mr R27, R5 */
		/* 821186A4h case    5:*/		regs.R27 = regs.R5;
		/* 821186A4h case    5:*/		return 0x821186A8;
		  /* 821186A8h */ case    6:  		/* li R30, 0 */
		/* 821186A8h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821186A8h case    6:*/		return 0x821186AC;
		  /* 821186ACh */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 821186ACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821186ACh case    7:*/		return 0x821186B0;
		  /* 821186B0h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821186B0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821186BC;  }
		/* 821186B0h case    8:*/		return 0x821186B4;
		  /* 821186B4h */ case    9:  		/* li R3, 0 */
		/* 821186B4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821186B4h case    9:*/		return 0x821186B8;
		  /* 821186B8h */ case   10:  		/* b 364 */
		/* 821186B8h case   10:*/		return 0x82118824;
		/* 821186B8h case   10:*/		return 0x821186BC;
	}
	return 0x821186BC;
} // Block from 82118690h-821186BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821186BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821186BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821186BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821186BC);
		  /* 821186BCh */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821186BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821186BCh case    0:*/		return 0x821186C0;
		  /* 821186C0h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 821186C0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821186C0h case    1:*/		return 0x821186C4;
		  /* 821186C4h */ case    2:  		/* bc 12, CR6_EQ, 268 */
		/* 821186C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821187D0;  }
		/* 821186C4h case    2:*/		return 0x821186C8;
		  /* 821186C8h */ case    3:  		/* cmpwi CR6, R11, 6 */
		/* 821186C8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821186C8h case    3:*/		return 0x821186CC;
		  /* 821186CCh */ case    4:  		/* bc 12, CR6_EQ, 236 */
		/* 821186CCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821187B8;  }
		/* 821186CCh case    4:*/		return 0x821186D0;
		  /* 821186D0h */ case    5:  		/* cmpwi CR6, R11, 8 */
		/* 821186D0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821186D0h case    5:*/		return 0x821186D4;
		  /* 821186D4h */ case    6:  		/* bc 12, CR6_EQ, 168 */
		/* 821186D4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211877C;  }
		/* 821186D4h case    6:*/		return 0x821186D8;
		  /* 821186D8h */ case    7:  		/* cmpwi CR6, R11, 9 */
		/* 821186D8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821186D8h case    7:*/		return 0x821186DC;
		  /* 821186DCh */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 821186DCh case    8:*/		if ( regs.CR[6].eq ) { return 0x821186F0;  }
		/* 821186DCh case    8:*/		return 0x821186E0;
		  /* 821186E0h */ case    9:  		/* cmpwi CR6, R11, 11 */
		/* 821186E0h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 821186E0h case    9:*/		return 0x821186E4;
		  /* 821186E4h */ case   10:  		/* bc 4, CR6_EQ, 316 */
		/* 821186E4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82118820;  }
		/* 821186E4h case   10:*/		return 0x821186E8;
		  /* 821186E8h */ case   11:  		/* lwz R4, <#[R31 + 48]> */
		/* 821186E8h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821186E8h case   11:*/		return 0x821186EC;
		  /* 821186ECh */ case   12:  		/* b 208 */
		/* 821186ECh case   12:*/		return 0x821187BC;
		/* 821186ECh case   12:*/		return 0x821186F0;
	}
	return 0x821186F0;
} // Block from 821186BCh-821186F0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821186F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821186F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821186F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821186F0);
		  /* 821186F0h */ case    0:  		/* lwz R9, <#[R31 + 32]> */
		/* 821186F0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 821186F0h case    0:*/		return 0x821186F4;
		  /* 821186F4h */ case    1:  		/* li R11, 3 */
		/* 821186F4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821186F4h case    1:*/		return 0x821186F8;
		  /* 821186F8h */ case    2:  		/* lwz R8, <#[R31 + 28]> */
		/* 821186F8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 821186F8h case    2:*/		return 0x821186FC;
		  /* 821186FCh */ case    3:  		/* lwz R10, <#[R31 + 20]> */
		/* 821186FCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821186FCh case    3:*/		return 0x82118700;
		  /* 82118700h */ case    4:  		/* mullw R30, R9, R8 */
		/* 82118700h case    4:*/		cpu::op::mullw<0>(regs,&regs.R30,regs.R9,regs.R8);
		/* 82118700h case    4:*/		return 0x82118704;
		  /* 82118704h */ case    5:  		/* cmplwi CR6, R10, 50 */
		/* 82118704h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000032);
		/* 82118704h case    5:*/		return 0x82118708;
		  /* 82118708h */ case    6:  		/* bc 12, CR6_GT, 88 */
		/* 82118708h case    6:*/		if ( regs.CR[6].gt ) { return 0x82118760;  }
		/* 82118708h case    6:*/		return 0x8211870C;
		  /* 8211870Ch */ case    7:  		/* lis R12, -32253 */
		/* 8211870Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 8211870Ch case    7:*/		return 0x82118710;
		  /* 82118710h */ case    8:  		/* addi R12, R12, 5152 */
		/* 82118710h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x1420);
		/* 82118710h case    8:*/		return 0x82118714;
		  /* 82118714h */ case    9:  		/* lbzx R0, <#[R12 + R10]> */
		/* 82118714h case    9:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R10 + 0x00000000) );
		/* 82118714h case    9:*/		return 0x82118718;
		  /* 82118718h */ case   10:  		/* lis R12, -32238 */
		/* 82118718h case   10:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 82118718h case   10:*/		return 0x8211871C;
		  /* 8211871Ch */ case   11:  		/* ori R0, R0, 0 */
		/* 8211871Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8211871Ch case   11:*/		return 0x82118720;
		  /* 82118720h */ case   12:  		/* addi R12, R12, -30924 */
		/* 82118720h case   12:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF8734);
		/* 82118720h case   12:*/		return 0x82118724;
		  /* 82118724h */ case   13:  		/* ori R0, R0, 0 */
		/* 82118724h case   13:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82118724h case   13:*/		return 0x82118728;
		  /* 82118728h */ case   14:  		/* add R12, R12, R0 */
		/* 82118728h case   14:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82118728h case   14:*/		return 0x8211872C;
		  /* 8211872Ch */ case   15:  		/* mtspr CTR, R12 */
		/* 8211872Ch case   15:*/		regs.CTR = regs.R12;
		/* 8211872Ch case   15:*/		return 0x82118730;
		  /* 82118730h */ case   16:  		/* bcctr 20, CR0_LT */
		/* 82118730h case   16:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82118730h case   16:*/		return 0x82118734;
		  /* 82118734h */ case   17:  		/* li R11, 0 */
		/* 82118734h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82118734h case   17:*/		return 0x82118738;
		  /* 82118738h */ case   18:  		/* b 40 */
		/* 82118738h case   18:*/		return 0x82118760;
		/* 82118738h case   18:*/		return 0x8211873C;
		  /* 8211873Ch */ case   19:  		/* li R11, 1 */
		/* 8211873Ch case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211873Ch case   19:*/		return 0x82118740;
		  /* 82118740h */ case   20:  		/* b 32 */
		/* 82118740h case   20:*/		return 0x82118760;
		/* 82118740h case   20:*/		return 0x82118744;
		  /* 82118744h */ case   21:  		/* li R11, 2 */
		/* 82118744h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82118744h case   21:*/		return 0x82118748;
		  /* 82118748h */ case   22:  		/* b 24 */
		/* 82118748h case   22:*/		return 0x82118760;
		/* 82118748h case   22:*/		return 0x8211874C;
		  /* 8211874Ch */ case   23:  		/* li R11, 3 */
		/* 8211874Ch case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8211874Ch case   23:*/		return 0x82118750;
		  /* 82118750h */ case   24:  		/* b 16 */
		/* 82118750h case   24:*/		return 0x82118760;
		/* 82118750h case   24:*/		return 0x82118754;
		  /* 82118754h */ case   25:  		/* li R11, 4 */
		/* 82118754h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82118754h case   25:*/		return 0x82118758;
		  /* 82118758h */ case   26:  		/* b 8 */
		/* 82118758h case   26:*/		return 0x82118760;
		/* 82118758h case   26:*/		return 0x8211875C;
		  /* 8211875Ch */ case   27:  		/* li R11, 5 */
		/* 8211875Ch case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8211875Ch case   27:*/		return 0x82118760;
	}
	return 0x82118760;
} // Block from 821186F0h-82118760h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82118760h
// Function '?Vectorize@CProgram@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118760);
		  /* 82118760h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82118760h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82118760h case    0:*/		return 0x82118764;
		  /* 82118764h */ case    1:  		/* bc 12, CR6_EQ, 188 */
		/* 82118764h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118820;  }
		/* 82118764h case    1:*/		return 0x82118768;
		  /* 82118768h */ case    2:  		/* addi R10, R27, -16 */
		/* 82118768h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xFFFFFFF0);
		/* 82118768h case    2:*/		return 0x8211876C;
		  /* 8211876Ch */ case    3:  		/* mtspr CTR, R30 */
		/* 8211876Ch case    3:*/		regs.CTR = regs.R30;
		/* 8211876Ch case    3:*/		return 0x82118770;
		  /* 82118770h */ case    4:  		/* stwu R11, <#[R10 + 16]> */
		/* 82118770h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		regs.R10 = (uint32)(regs.R10 + 0x00000010);
		/* 82118770h case    4:*/		return 0x82118774;
		  /* 82118774h */ case    5:  		/* bc 16, CR0_LT, -4 */
		/* 82118774h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82118770;  }
		/* 82118774h case    5:*/		return 0x82118778;
		  /* 82118778h */ case    6:  		/* b 168 */
		/* 82118778h case    6:*/		return 0x82118820;
		/* 82118778h case    6:*/		return 0x8211877C;
	}
	return 0x8211877C;
} // Block from 82118760h-8211877Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211877Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211877C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211877C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211877C);
		  /* 8211877Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8211877Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8211877Ch case    0:*/		return 0x82118780;
		  /* 82118780h */ case    1:  		/* li R29, 0 */
		/* 82118780h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82118780h case    1:*/		return 0x82118784;
		  /* 82118784h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82118784h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82118784h case    2:*/		return 0x82118788;
		  /* 82118788h */ case    3:  		/* bc 4, CR6_GT, 152 */
		/* 82118788h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82118820;  }
		/* 82118788h case    3:*/		return 0x8211878C;
		  /* 8211878Ch */ case    4:  		/* rlwinm R11, R30, 4, 0, 27 */
		/* 8211878Ch case    4:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R30);
		/* 8211878Ch case    4:*/		return 0x82118790;
		  /* 82118790h */ case    5:  		/* lwz R4, <#[R31 + 16]> */
		/* 82118790h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82118790h case    5:*/		return 0x82118794;
		  /* 82118794h */ case    6:  		/* mr R3, R28 */
		/* 82118794h case    6:*/		regs.R3 = regs.R28;
		/* 82118794h case    6:*/		return 0x82118798;
		  /* 82118798h */ case    7:  		/* add R5, R11, R27 */
		/* 82118798h case    7:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R27);
		/* 82118798h case    7:*/		return 0x8211879C;
		  /* 8211879Ch */ case    8:  		/* bl -268 */
		/* 8211879Ch case    8:*/		regs.LR = 0x821187A0; return 0x82118690;
		/* 8211879Ch case    8:*/		return 0x821187A0;
		  /* 821187A0h */ case    9:  		/* lwz R11, <#[R31 + 20]> */
		/* 821187A0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821187A0h case    9:*/		return 0x821187A4;
		  /* 821187A4h */ case   10:  		/* addi R29, R29, 1 */
		/* 821187A4h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821187A4h case   10:*/		return 0x821187A8;
		  /* 821187A8h */ case   11:  		/* add R30, R3, R30 */
		/* 821187A8h case   11:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 821187A8h case   11:*/		return 0x821187AC;
		  /* 821187ACh */ case   12:  		/* cmplw CR6, R29, R11 */
		/* 821187ACh case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821187ACh case   12:*/		return 0x821187B0;
		  /* 821187B0h */ case   13:  		/* bc 12, CR6_LT, -36 */
		/* 821187B0h case   13:*/		if ( regs.CR[6].lt ) { return 0x8211878C;  }
		/* 821187B0h case   13:*/		return 0x821187B4;
		  /* 821187B4h */ case   14:  		/* b 108 */
		/* 821187B4h case   14:*/		return 0x82118820;
		/* 821187B4h case   14:*/		return 0x821187B8;
	}
	return 0x821187B8;
} // Block from 8211877Ch-821187B8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821187B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821187B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821187B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821187B8);
		  /* 821187B8h */ case    0:  		/* lwz R4, <#[R31 + 24]> */
		/* 821187B8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 821187B8h case    0:*/		return 0x821187BC;
	}
	return 0x821187BC;
} // Block from 821187B8h-821187BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821187BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821187BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821187BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821187BC);
		  /* 821187BCh */ case    0:  		/* mr R5, R27 */
		/* 821187BCh case    0:*/		regs.R5 = regs.R27;
		/* 821187BCh case    0:*/		return 0x821187C0;
		  /* 821187C0h */ case    1:  		/* mr R3, R28 */
		/* 821187C0h case    1:*/		regs.R3 = regs.R28;
		/* 821187C0h case    1:*/		return 0x821187C4;
		  /* 821187C4h */ case    2:  		/* bl -308 */
		/* 821187C4h case    2:*/		regs.LR = 0x821187C8; return 0x82118690;
		/* 821187C4h case    2:*/		return 0x821187C8;
		  /* 821187C8h */ case    3:  		/* mr R30, R3 */
		/* 821187C8h case    3:*/		regs.R30 = regs.R3;
		/* 821187C8h case    3:*/		return 0x821187CC;
		  /* 821187CCh */ case    4:  		/* b 84 */
		/* 821187CCh case    4:*/		return 0x82118820;
		/* 821187CCh case    4:*/		return 0x821187D0;
	}
	return 0x821187D0;
} // Block from 821187BCh-821187D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821187D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821187D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821187D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821187D0);
		  /* 821187D0h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821187D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821187D0h case    0:*/		return 0x821187D4;
		  /* 821187D4h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 821187D4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821187D4h case    1:*/		return 0x821187D8;
		  /* 821187D8h */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 821187D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82118800;  }
		/* 821187D8h case    2:*/		return 0x821187DC;
		  /* 821187DCh */ case    3:  		/* rlwinm R11, R30, 4, 0, 27 */
		/* 821187DCh case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R30);
		/* 821187DCh case    3:*/		return 0x821187E0;
		  /* 821187E0h */ case    4:  		/* lwz R4, <#[R31 + 8]> */
		/* 821187E0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821187E0h case    4:*/		return 0x821187E4;
		  /* 821187E4h */ case    5:  		/* mr R3, R28 */
		/* 821187E4h case    5:*/		regs.R3 = regs.R28;
		/* 821187E4h case    5:*/		return 0x821187E8;
		  /* 821187E8h */ case    6:  		/* add R5, R11, R27 */
		/* 821187E8h case    6:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R27);
		/* 821187E8h case    6:*/		return 0x821187EC;
		  /* 821187ECh */ case    7:  		/* bl -348 */
		/* 821187ECh case    7:*/		regs.LR = 0x821187F0; return 0x82118690;
		/* 821187ECh case    7:*/		return 0x821187F0;
		  /* 821187F0h */ case    8:  		/* lwz R31, <#[R31 + 12]> */
		/* 821187F0h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821187F0h case    8:*/		return 0x821187F4;
		  /* 821187F4h */ case    9:  		/* add R30, R3, R30 */
		/* 821187F4h case    9:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 821187F4h case    9:*/		return 0x821187F8;
		  /* 821187F8h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821187F8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821187F8h case   10:*/		return 0x821187FC;
		  /* 821187FCh */ case   11:  		/* bc 4, CR6_EQ, -44 */
		/* 821187FCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821187D0;  }
		/* 821187FCh case   11:*/		return 0x82118800;
	}
	return 0x82118800;
} // Block from 821187D0h-82118800h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82118800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118800);
		  /* 82118800h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82118800h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82118800h case    0:*/		return 0x82118804;
		  /* 82118804h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82118804h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118820;  }
		/* 82118804h case    1:*/		return 0x82118808;
		  /* 82118808h */ case    2:  		/* rlwinm R11, R30, 4, 0, 27 */
		/* 82118808h case    2:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R30);
		/* 82118808h case    2:*/		return 0x8211880C;
		  /* 8211880Ch */ case    3:  		/* mr R4, R31 */
		/* 8211880Ch case    3:*/		regs.R4 = regs.R31;
		/* 8211880Ch case    3:*/		return 0x82118810;
		  /* 82118810h */ case    4:  		/* add R5, R11, R27 */
		/* 82118810h case    4:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R27);
		/* 82118810h case    4:*/		return 0x82118814;
		  /* 82118814h */ case    5:  		/* mr R3, R28 */
		/* 82118814h case    5:*/		regs.R3 = regs.R28;
		/* 82118814h case    5:*/		return 0x82118818;
		  /* 82118818h */ case    6:  		/* bl -392 */
		/* 82118818h case    6:*/		regs.LR = 0x8211881C; return 0x82118690;
		/* 82118818h case    6:*/		return 0x8211881C;
		  /* 8211881Ch */ case    7:  		/* add R30, R3, R30 */
		/* 8211881Ch case    7:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 8211881Ch case    7:*/		return 0x82118820;
	}
	return 0x82118820;
} // Block from 82118800h-82118820h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118820);
		  /* 82118820h */ case    0:  		/* mr R3, R30 */
		/* 82118820h case    0:*/		regs.R3 = regs.R30;
		/* 82118820h case    0:*/		return 0x82118824;
	}
	return 0x82118824;
} // Block from 82118820h-82118824h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118824);
		  /* 82118824h */ case    0:  		/* addi R1, R1, 128 */
		/* 82118824h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82118824h case    0:*/		return 0x82118828;
		  /* 82118828h */ case    1:  		/* b -554372 */
		/* 82118828h case    1:*/		return 0x820912A4;
		/* 82118828h case    1:*/		return 0x8211882C;
		  /* 8211882Ch */ case    2:  		/* nop */
		/* 8211882Ch case    2:*/		cpu::op::nop();
		/* 8211882Ch case    2:*/		return 0x82118830;
		  /* 82118830h */ case    3:  		/* lwz R11, <#[R5]> */
		/* 82118830h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118830h case    3:*/		return 0x82118834;
		  /* 82118834h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82118834h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82118834h case    4:*/		return 0x82118838;
		  /* 82118838h */ case    5:  		/* bc 12, CR6_LT, 76 */
		/* 82118838h case    5:*/		if ( regs.CR[6].lt ) { return 0x82118884;  }
		/* 82118838h case    5:*/		return 0x8211883C;
		  /* 8211883Ch */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 8211883Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82118874;  }
		/* 8211883Ch case    6:*/		return 0x82118840;
		  /* 82118840h */ case    7:  		/* cmplwi CR6, R11, 3 */
		/* 82118840h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82118840h case    7:*/		return 0x82118844;
		  /* 82118844h */ case    8:  		/* bc 12, CR6_LT, 28 */
		/* 82118844h case    8:*/		if ( regs.CR[6].lt ) { return 0x82118860;  }
		/* 82118844h case    8:*/		return 0x82118848;
		  /* 82118848h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82118848h case    9:*/		if ( regs.CR[6].eq ) { return 0x82118858;  }
		/* 82118848h case    9:*/		return 0x8211884C;
		  /* 8211884Ch */ case   10:  		/* lis R3, -32768 */
		/* 8211884Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211884Ch case   10:*/		return 0x82118850;
		  /* 82118850h */ case   11:  		/* ori R3, R3, 16389 */
		/* 82118850h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82118850h case   11:*/		return 0x82118854;
		  /* 82118854h */ case   12:  		/* bclr 20, CR0_LT */
		/* 82118854h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118854h case   12:*/		return 0x82118858;
	}
	return 0x82118858;
} // Block from 82118824h-82118858h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82118858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118858);
		  /* 82118858h */ case    0:  		/* lfd FR0, <#[R5 + 8]> */
		/* 82118858h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R5 + 0x00000008) );
		/* 82118858h case    0:*/		return 0x8211885C;
		  /* 8211885Ch */ case    1:  		/* b 72 */
		/* 8211885Ch case    1:*/		return 0x821188A4;
		/* 8211885Ch case    1:*/		return 0x82118860;
	}
	return 0x82118860;
} // Block from 82118858h-82118860h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118860);
		  /* 82118860h */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 82118860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118860h case    0:*/		return 0x82118864;
		  /* 82118864h */ case    1:  		/* std R11, <#[R1 - 16]> */
		/* 82118864h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118864h case    1:*/		return 0x82118868;
		  /* 82118868h */ case    2:  		/* lfd FR0, <#[R1 - 16]> */
		/* 82118868h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118868h case    2:*/		return 0x8211886C;
		  /* 8211886Ch */ case    3:  		/* fcfid FR0, FR0 */
		/* 8211886Ch case    3:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8211886Ch case    3:*/		return 0x82118870;
		  /* 82118870h */ case    4:  		/* b 52 */
		/* 82118870h case    4:*/		return 0x821188A4;
		/* 82118870h case    4:*/		return 0x82118874;
	}
	return 0x82118874;
} // Block from 82118860h-82118874h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82118874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118874);
		  /* 82118874h */ case    0:  		/* lwa R11, <#[R5 + 8]> */
		/* 82118874h case    0:*/		cpu::mem::load32a( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118874h case    0:*/		return 0x82118878;
		  /* 82118878h */ case    1:  		/* std R11, <#[R1 - 16]> */
		/* 82118878h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118878h case    1:*/		return 0x8211887C;
		  /* 8211887Ch */ case    2:  		/* lfd FR0, <#[R1 - 16]> */
		/* 8211887Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211887Ch case    2:*/		return 0x82118880;
		  /* 82118880h */ case    3:  		/* b -20 */
		/* 82118880h case    3:*/		return 0x8211886C;
		/* 82118880h case    3:*/		return 0x82118884;
	}
	return 0x82118884;
} // Block from 82118874h-82118884h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118884);
		  /* 82118884h */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 82118884h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118884h case    0:*/		return 0x82118888;
		  /* 82118888h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82118888h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82118888h case    1:*/		return 0x8211888C;
		  /* 8211888Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 8211888Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8211889C;  }
		/* 8211888Ch case    2:*/		return 0x82118890;
		  /* 82118890h */ case    3:  		/* lis R11, -32256 */
		/* 82118890h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82118890h case    3:*/		return 0x82118894;
		  /* 82118894h */ case    4:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 82118894h case    4:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 82118894h case    4:*/		return 0x82118898;
		  /* 82118898h */ case    5:  		/* b 12 */
		/* 82118898h case    5:*/		return 0x821188A4;
		/* 82118898h case    5:*/		return 0x8211889C;
	}
	return 0x8211889C;
} // Block from 82118884h-8211889Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211889Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211889C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211889C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211889C);
		  /* 8211889Ch */ case    0:  		/* lis R11, -32256 */
		/* 8211889Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211889Ch case    0:*/		return 0x821188A0;
		  /* 821188A0h */ case    1:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 821188A0h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 821188A0h case    1:*/		return 0x821188A4;
	}
	return 0x821188A4;
} // Block from 8211889Ch-821188A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821188A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821188A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821188A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821188A4);
		  /* 821188A4h */ case    0:  		/* stfd FR0, <#[R4]> */
		/* 821188A4h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R4 + 0x00000000) );
		/* 821188A4h case    0:*/		return 0x821188A8;
		  /* 821188A8h */ case    1:  		/* li R3, 0 */
		/* 821188A8h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821188A8h case    1:*/		return 0x821188AC;
		  /* 821188ACh */ case    2:  		/* bclr 20, CR0_LT */
		/* 821188ACh case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821188ACh case    2:*/		return 0x821188B0;
	}
	return 0x821188B0;
} // Block from 821188A4h-821188B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821188B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821188B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821188B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821188B0);
		  /* 821188B0h */ case    0:  		/* mfspr R12, LR */
		/* 821188B0h case    0:*/		regs.R12 = regs.LR;
		/* 821188B0h case    0:*/		return 0x821188B4;
		  /* 821188B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821188B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821188B4h case    1:*/		return 0x821188B8;
		  /* 821188B8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821188B8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821188B8h case    2:*/		return 0x821188BC;
		  /* 821188BCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821188BCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821188BCh case    3:*/		return 0x821188C0;
		  /* 821188C0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821188C0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821188C0h case    4:*/		return 0x821188C4;
		  /* 821188C4h */ case    5:  		/* mr R30, R3 */
		/* 821188C4h case    5:*/		regs.R30 = regs.R3;
		/* 821188C4h case    5:*/		return 0x821188C8;
		  /* 821188C8h */ case    6:  		/* mr R31, R4 */
		/* 821188C8h case    6:*/		regs.R31 = regs.R4;
		/* 821188C8h case    6:*/		return 0x821188CC;
		  /* 821188CCh */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821188CCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821188CCh case    7:*/		return 0x821188D0;
		  /* 821188D0h */ case    8:  		/* bc 12, CR6_EQ, 164 */
		/* 821188D0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82118974;  }
		/* 821188D0h case    8:*/		return 0x821188D4;
		  /* 821188D4h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 821188D4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821188D4h case    9:*/		return 0x821188D8;
		  /* 821188D8h */ case   10:  		/* cmpwi CR6, R11, 1 */
		/* 821188D8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821188D8h case   10:*/		return 0x821188DC;
		  /* 821188DCh */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 821188DCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821188FC;  }
		/* 821188DCh case   11:*/		return 0x821188E0;
		  /* 821188E0h */ case   12:  		/* mr R3, R30 */
		/* 821188E0h case   12:*/		regs.R3 = regs.R30;
		/* 821188E0h case   12:*/		return 0x821188E4;
		  /* 821188E4h */ case   13:  		/* lwz R4, <#[R31 + 8]> */
		/* 821188E4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821188E4h case   13:*/		return 0x821188E8;
		  /* 821188E8h */ case   14:  		/* bl -56 */
		/* 821188E8h case   14:*/		regs.LR = 0x821188EC; return 0x821188B0;
		/* 821188E8h case   14:*/		return 0x821188EC;
		  /* 821188ECh */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 821188ECh case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821188ECh case   15:*/		return 0x821188F0;
		  /* 821188F0h */ case   16:  		/* bc 4, CR0_EQ, 124 */
		/* 821188F0h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8211896C;  }
		/* 821188F0h case   16:*/		return 0x821188F4;
		  /* 821188F4h */ case   17:  		/* lwz R31, <#[R31 + 12]> */
		/* 821188F4h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821188F4h case   17:*/		return 0x821188F8;
		  /* 821188F8h */ case   18:  		/* b -44 */
		/* 821188F8h case   18:*/		return 0x821188CC;
		/* 821188F8h case   18:*/		return 0x821188FC;
	}
	return 0x821188FC;
} // Block from 821188B0h-821188FCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821188FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821188FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821188FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821188FC);
		  /* 821188FCh */ case    0:  		/* cmpwi CR6, R11, 15 */
		/* 821188FCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821188FCh case    0:*/		return 0x82118900;
		  /* 82118900h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82118900h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118938;  }
		/* 82118900h case    1:*/		return 0x82118904;
		  /* 82118904h */ case    2:  		/* cmpwi CR6, R11, 14 */
		/* 82118904h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 82118904h case    2:*/		return 0x82118908;
		  /* 82118908h */ case    3:  		/* bc 4, CR6_EQ, 108 */
		/* 82118908h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82118974;  }
		/* 82118908h case    3:*/		return 0x8211890C;
		  /* 8211890Ch */ case    4:  		/* lwz R11, <#[R31 + 28]> */
		/* 8211890Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211890Ch case    4:*/		return 0x82118910;
		  /* 82118910h */ case    5:  		/* cmpwi CR6, R11, 29 */
		/* 82118910h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 82118910h case    5:*/		return 0x82118914;
		  /* 82118914h */ case    6:  		/* bc 12, CR6_GT, 72 */
		/* 82118914h case    6:*/		if ( regs.CR[6].gt ) { return 0x8211895C;  }
		/* 82118914h case    6:*/		return 0x82118918;
		  /* 82118918h */ case    7:  		/* cmpwi CR6, R11, 28 */
		/* 82118918h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 82118918h case    7:*/		return 0x8211891C;
		  /* 8211891Ch */ case    8:  		/* bc 4, CR6_LT, 20 */
		/* 8211891Ch case    8:*/		if ( !regs.CR[6].lt ) { return 0x82118930;  }
		/* 8211891Ch case    8:*/		return 0x82118920;
		  /* 82118920h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 82118920h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82118920h case    9:*/		return 0x82118924;
		  /* 82118924h */ case   10:  		/* bc 12, CR6_LT, 72 */
		/* 82118924h case   10:*/		if ( regs.CR[6].lt ) { return 0x8211896C;  }
		/* 82118924h case   10:*/		return 0x82118928;
		  /* 82118928h */ case   11:  		/* cmpwi CR6, R11, 1 */
		/* 82118928h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82118928h case   11:*/		return 0x8211892C;
		  /* 8211892Ch */ case   12:  		/* bc 12, CR6_GT, 32 */
		/* 8211892Ch case   12:*/		if ( regs.CR[6].gt ) { return 0x8211894C;  }
		/* 8211892Ch case   12:*/		return 0x82118930;
	}
	return 0x82118930;
} // Block from 821188FCh-82118930h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82118930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118930);
		  /* 82118930h */ case    0:  		/* lwz R31, <#[R31 + 32]> */
		/* 82118930h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000020) );
		/* 82118930h case    0:*/		return 0x82118934;
		  /* 82118934h */ case    1:  		/* b -104 */
		/* 82118934h case    1:*/		return 0x821188CC;
		/* 82118934h case    1:*/		return 0x82118938;
	}
	return 0x82118938;
} // Block from 82118930h-82118938h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118938);
		  /* 82118938h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 82118938h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82118938h case    0:*/		return 0x8211893C;
		  /* 8211893Ch */ case    1:  		/* addi R11, R11, -6 */
		/* 8211893Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFA);
		/* 8211893Ch case    1:*/		return 0x82118940;
		  /* 82118940h */ case    2:  		/* addic R10, R11, -1 */
		/* 82118940h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82118940h case    2:*/		return 0x82118944;
		  /* 82118944h */ case    3:  		/* subfe R3, R10, R11 */
		/* 82118944h case    3:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82118944h case    3:*/		return 0x82118948;
		  /* 82118948h */ case    4:  		/* b 48 */
		/* 82118948h case    4:*/		return 0x82118978;
		/* 82118948h case    4:*/		return 0x8211894C;
	}
	return 0x8211894C;
} // Block from 82118938h-8211894Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211894Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211894C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211894C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211894C);
		  /* 8211894Ch */ case    0:  		/* cmpwi CR6, R11, 25 */
		/* 8211894Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 8211894Ch case    0:*/		return 0x82118950;
		  /* 82118950h */ case    1:  		/* bc 4, CR6_GT, 28 */
		/* 82118950h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8211896C;  }
		/* 82118950h case    1:*/		return 0x82118954;
		  /* 82118954h */ case    2:  		/* cmpwi CR6, R11, 27 */
		/* 82118954h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 82118954h case    2:*/		return 0x82118958;
		  /* 82118958h */ case    3:  		/* b 16 */
		/* 82118958h case    3:*/		return 0x82118968;
		/* 82118958h case    3:*/		return 0x8211895C;
	}
	return 0x8211895C;
} // Block from 8211894Ch-8211895Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211895Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211895C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211895C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211895C);
		  /* 8211895Ch */ case    0:  		/* cmpwi CR6, R11, 31 */
		/* 8211895Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001F);
		/* 8211895Ch case    0:*/		return 0x82118960;
		  /* 82118960h */ case    1:  		/* bc 12, CR6_LT, 12 */
		/* 82118960h case    1:*/		if ( regs.CR[6].lt ) { return 0x8211896C;  }
		/* 82118960h case    1:*/		return 0x82118964;
		  /* 82118964h */ case    2:  		/* cmpwi CR6, R11, 32 */
		/* 82118964h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 82118964h case    2:*/		return 0x82118968;
	}
	return 0x82118968;
} // Block from 8211895Ch-82118968h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118968);
		  /* 82118968h */ case    0:  		/* bc 4, CR6_GT, 12 */
		/* 82118968h case    0:*/		if ( !regs.CR[6].gt ) { return 0x82118974;  }
		/* 82118968h case    0:*/		return 0x8211896C;
	}
	return 0x8211896C;
} // Block from 82118968h-8211896Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211896Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211896C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211896C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211896C);
		  /* 8211896Ch */ case    0:  		/* li R3, 1 */
		/* 8211896Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8211896Ch case    0:*/		return 0x82118970;
		  /* 82118970h */ case    1:  		/* b 8 */
		/* 82118970h case    1:*/		return 0x82118978;
		/* 82118970h case    1:*/		return 0x82118974;
	}
	return 0x82118974;
} // Block from 8211896Ch-82118974h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118974);
		  /* 82118974h */ case    0:  		/* li R3, 0 */
		/* 82118974h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118974h case    0:*/		return 0x82118978;
	}
	return 0x82118978;
} // Block from 82118974h-82118978h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118978);
		  /* 82118978h */ case    0:  		/* addi R1, R1, 112 */
		/* 82118978h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82118978h case    0:*/		return 0x8211897C;
		  /* 8211897Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211897Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211897Ch case    1:*/		return 0x82118980;
		  /* 82118980h */ case    2:  		/* mtspr LR, R12 */
		/* 82118980h case    2:*/		regs.LR = regs.R12;
		/* 82118980h case    2:*/		return 0x82118984;
		  /* 82118984h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82118984h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82118984h case    3:*/		return 0x82118988;
		  /* 82118988h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82118988h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118988h case    4:*/		return 0x8211898C;
		  /* 8211898Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8211898Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211898Ch case    5:*/		return 0x82118990;
	}
	return 0x82118990;
} // Block from 82118978h-82118990h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82118990h
// Function '?GenerateCode@CProgram@D3DXShader@@UAAJPAPAUID3DXBuffer@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118990);
		  /* 82118990h */ case    0:  		/* mfspr R12, LR */
		/* 82118990h case    0:*/		regs.R12 = regs.LR;
		/* 82118990h case    0:*/		return 0x82118994;
		  /* 82118994h */ case    1:  		/* bl -554808 */
		/* 82118994h case    1:*/		regs.LR = 0x82118998; return 0x8209125C;
		/* 82118994h case    1:*/		return 0x82118998;
		  /* 82118998h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82118998h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82118998h case    2:*/		return 0x8211899C;
		  /* 8211899Ch */ case    3:  		/* mr R30, R3 */
		/* 8211899Ch case    3:*/		regs.R30 = regs.R3;
		/* 8211899Ch case    3:*/		return 0x821189A0;
		  /* 821189A0h */ case    4:  		/* mr R31, R4 */
		/* 821189A0h case    4:*/		regs.R31 = regs.R4;
		/* 821189A0h case    4:*/		return 0x821189A4;
		  /* 821189A4h */ case    5:  		/* mr R29, R5 */
		/* 821189A4h case    5:*/		regs.R29 = regs.R5;
		/* 821189A4h case    5:*/		return 0x821189A8;
		  /* 821189A8h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821189A8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821189A8h case    6:*/		return 0x821189AC;
		  /* 821189ACh */ case    7:  		/* bc 12, CR6_EQ, 436 */
		/* 821189ACh case    7:*/		if ( regs.CR[6].eq ) { return 0x82118B60;  }
		/* 821189ACh case    7:*/		return 0x821189B0;
		  /* 821189B0h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 821189B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821189B0h case    8:*/		return 0x821189B4;
		  /* 821189B4h */ case    9:  		/* cmpwi CR6, R11, 1 */
		/* 821189B4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821189B4h case    9:*/		return 0x821189B8;
		  /* 821189B8h */ case   10:  		/* bc 4, CR6_EQ, 36 */
		/* 821189B8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821189DC;  }
		/* 821189B8h case   10:*/		return 0x821189BC;
		  /* 821189BCh */ case   11:  		/* mr R5, R29 */
		/* 821189BCh case   11:*/		regs.R5 = regs.R29;
		/* 821189BCh case   11:*/		return 0x821189C0;
		  /* 821189C0h */ case   12:  		/* lwz R4, <#[R31 + 8]> */
		/* 821189C0h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821189C0h case   12:*/		return 0x821189C4;
		  /* 821189C4h */ case   13:  		/* mr R3, R30 */
		/* 821189C4h case   13:*/		regs.R3 = regs.R30;
		/* 821189C4h case   13:*/		return 0x821189C8;
		  /* 821189C8h */ case   14:  		/* bl -56 */
		/* 821189C8h case   14:*/		regs.LR = 0x821189CC; return 0x82118990;
		/* 821189C8h case   14:*/		return 0x821189CC;
		  /* 821189CCh */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 821189CCh case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821189CCh case   15:*/		return 0x821189D0;
		  /* 821189D0h */ case   16:  		/* bc 12, CR0_EQ, 148 */
		/* 821189D0h case   16:*/		if ( regs.CR[0].eq ) { return 0x82118A64;  }
		/* 821189D0h case   16:*/		return 0x821189D4;
		  /* 821189D4h */ case   17:  		/* lwz R31, <#[R31 + 12]> */
		/* 821189D4h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821189D4h case   17:*/		return 0x821189D8;
		  /* 821189D8h */ case   18:  		/* b -48 */
		/* 821189D8h case   18:*/		return 0x821189A8;
		/* 821189D8h case   18:*/		return 0x821189DC;
	}
	return 0x821189DC;
} // Block from 82118990h-821189DCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821189DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821189DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821189DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821189DC);
		  /* 821189DCh */ case    0:  		/* cmpwi CR6, R11, 15 */
		/* 821189DCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821189DCh case    0:*/		return 0x821189E0;
		  /* 821189E0h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 821189E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118A38;  }
		/* 821189E0h case    1:*/		return 0x821189E4;
		  /* 821189E4h */ case    2:  		/* cmpwi CR6, R11, 14 */
		/* 821189E4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821189E4h case    2:*/		return 0x821189E8;
		  /* 821189E8h */ case    3:  		/* bc 4, CR6_EQ, 376 */
		/* 821189E8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82118B60;  }
		/* 821189E8h case    3:*/		return 0x821189EC;
		  /* 821189ECh */ case    4:  		/* lwz R11, <#[R31 + 28]> */
		/* 821189ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821189ECh case    4:*/		return 0x821189F0;
		  /* 821189F0h */ case    5:  		/* cmpwi CR6, R11, 26 */
		/* 821189F0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001A);
		/* 821189F0h case    5:*/		return 0x821189F4;
		  /* 821189F4h */ case    6:  		/* bc 12, CR6_LT, 332 */
		/* 821189F4h case    6:*/		if ( regs.CR[6].lt ) { return 0x82118B40;  }
		/* 821189F4h case    6:*/		return 0x821189F8;
		  /* 821189F8h */ case    7:  		/* cmpwi CR6, R11, 27 */
		/* 821189F8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 821189F8h case    7:*/		return 0x821189FC;
		  /* 821189FCh */ case    8:  		/* bc 4, CR6_GT, 104 */
		/* 821189FCh case    8:*/		if ( !regs.CR[6].gt ) { return 0x82118A64;  }
		/* 821189FCh case    8:*/		return 0x82118A00;
		  /* 82118A00h */ case    9:  		/* cmpwi CR6, R11, 31 */
		/* 82118A00h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001F);
		/* 82118A00h case    9:*/		return 0x82118A04;
		  /* 82118A04h */ case   10:  		/* bc 12, CR6_EQ, 96 */
		/* 82118A04h case   10:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A04h case   10:*/		return 0x82118A08;
	}
	return 0x82118A08;
} // Block from 821189DCh-82118A08h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82118A08h
// Function '??0CParse@D3DXShader@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118A08);
		  /* 82118A08h */ case    0:  		/* cmpwi CR6, R11, 32 */
		/* 82118A08h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 82118A08h case    0:*/		return 0x82118A0C;
		  /* 82118A0Ch */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 82118A0Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82118A6C;  }
		/* 82118A0Ch case    1:*/		return 0x82118A10;
		  /* 82118A10h */ case    2:  		/* cmpwi CR6, R11, 34 */
		/* 82118A10h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000022);
		/* 82118A10h case    2:*/		return 0x82118A14;
		  /* 82118A14h */ case    3:  		/* bc 4, CR6_EQ, 300 */
		/* 82118A14h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82118B40;  }
		/* 82118A14h case    3:*/		return 0x82118A18;
		  /* 82118A18h */ case    4:  		/* lwz R11, <#[R31 + 36]> */
		/* 82118A18h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82118A18h case    4:*/		return 0x82118A1C;
		  /* 82118A1Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82118A1Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82118A1Ch case    5:*/		return 0x82118A20;
		  /* 82118A20h */ case    6:  		/* bc 12, CR6_EQ, 68 */
		/* 82118A20h case    6:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A20h case    6:*/		return 0x82118A24;
		  /* 82118A24h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 82118A24h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82118A24h case    7:*/		return 0x82118A28;
	}
	return 0x82118A28;
} // Block from 82118A08h-82118A28h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118A28h
// Function '?AddDeclTree@CParse@D3DXShader@@IAAJPAVCNodeScope@2@PAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118A28);
		  /* 82118A28h */ case    0:  		/* cmpwi CR6, R10, 14 */
		/* 82118A28h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 82118A28h case    0:*/		return 0x82118A2C;
		  /* 82118A2Ch */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82118A2Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A2Ch case    1:*/		return 0x82118A30;
		  /* 82118A30h */ case    2:  		/* lwz R31, <#[R11 + 36]> */
		/* 82118A30h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000024) );
		/* 82118A30h case    2:*/		return 0x82118A34;
		  /* 82118A34h */ case    3:  		/* b -140 */
		/* 82118A34h case    3:*/		return 0x821189A8;
		/* 82118A34h case    3:*/		return 0x82118A38;
	}
	return 0x82118A38;
} // Block from 82118A28h-82118A38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118A38);
		  /* 82118A38h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 82118A38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82118A38h case    0:*/		return 0x82118A3C;
		  /* 82118A3Ch */ case    1:  		/* cmpwi CR6, R11, 6 */
		/* 82118A3Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82118A3Ch case    1:*/		return 0x82118A40;
		  /* 82118A40h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 82118A40h case    2:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A40h case    2:*/		return 0x82118A44;
		  /* 82118A44h */ case    3:  		/* cmpwi CR6, R11, 7 */
		/* 82118A44h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 82118A44h case    3:*/		return 0x82118A48;
		  /* 82118A48h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 82118A48h case    4:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A48h case    4:*/		return 0x82118A4C;
		  /* 82118A4Ch */ case    5:  		/* cmpwi CR6, R29, 0 */
		/* 82118A4Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82118A4Ch case    5:*/		return 0x82118A50;
		  /* 82118A50h */ case    6:  		/* bc 4, CR6_EQ, 272 */
		/* 82118A50h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82118B60;  }
		/* 82118A50h case    6:*/		return 0x82118A54;
		  /* 82118A54h */ case    7:  		/* cmpwi CR6, R11, 4 */
		/* 82118A54h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82118A54h case    7:*/		return 0x82118A58;
		  /* 82118A58h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 82118A58h case    8:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A58h case    8:*/		return 0x82118A5C;
		  /* 82118A5Ch */ case    9:  		/* cmpwi CR6, R11, 5 */
		/* 82118A5Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 82118A5Ch case    9:*/		return 0x82118A60;
		  /* 82118A60h */ case   10:  		/* bc 4, CR6_EQ, 256 */
		/* 82118A60h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82118B60;  }
		/* 82118A60h case   10:*/		return 0x82118A64;
	}
	return 0x82118A64;
} // Block from 82118A38h-82118A64h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82118A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118A64);
		  /* 82118A64h */ case    0:  		/* li R3, 0 */
		/* 82118A64h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118A64h case    0:*/		return 0x82118A68;
		  /* 82118A68h */ case    1:  		/* b 252 */
		/* 82118A68h case    1:*/		return 0x82118B64;
		/* 82118A68h case    1:*/		return 0x82118A6C;
	}
	return 0x82118A6C;
} // Block from 82118A64h-82118A6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118A6C);
		  /* 82118A6Ch */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 82118A6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82118A6Ch case    0:*/		return 0x82118A70;
		  /* 82118A70h */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 82118A70h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82118A70h case    1:*/		return 0x82118A74;
		  /* 82118A74h */ case    2:  		/* lwz R11, <#[R11 + 24]> */
		/* 82118A74h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82118A74h case    2:*/		return 0x82118A78;
		  /* 82118A78h */ case    3:  		/* cmpwi CR6, R11, 99 */
		/* 82118A78h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000063);
		/* 82118A78h case    3:*/		return 0x82118A7C;
		  /* 82118A7Ch */ case    4:  		/* bc 12, CR6_GT, 76 */
		/* 82118A7Ch case    4:*/		if ( regs.CR[6].gt ) { return 0x82118AC8;  }
		/* 82118A7Ch case    4:*/		return 0x82118A80;
		  /* 82118A80h */ case    5:  		/* bc 12, CR6_EQ, -28 */
		/* 82118A80h case    5:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A80h case    5:*/		return 0x82118A84;
		  /* 82118A84h */ case    6:  		/* cmpwi CR6, R11, 76 */
		/* 82118A84h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000004C);
		/* 82118A84h case    6:*/		return 0x82118A88;
		  /* 82118A88h */ case    7:  		/* bc 12, CR6_GT, 40 */
		/* 82118A88h case    7:*/		if ( regs.CR[6].gt ) { return 0x82118AB0;  }
		/* 82118A88h case    7:*/		return 0x82118A8C;
		  /* 82118A8Ch */ case    8:  		/* bc 12, CR6_EQ, -40 */
		/* 82118A8Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A8Ch case    8:*/		return 0x82118A90;
		  /* 82118A90h */ case    9:  		/* cmpwi CR6, R11, 10 */
		/* 82118A90h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 82118A90h case    9:*/		return 0x82118A94;
		  /* 82118A94h */ case   10:  		/* bc 12, CR6_EQ, -48 */
		/* 82118A94h case   10:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A94h case   10:*/		return 0x82118A98;
		  /* 82118A98h */ case   11:  		/* cmpwi CR6, R11, 30 */
		/* 82118A98h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001E);
		/* 82118A98h case   11:*/		return 0x82118A9C;
		  /* 82118A9Ch */ case   12:  		/* bc 12, CR6_EQ, -56 */
		/* 82118A9Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118A9Ch case   12:*/		return 0x82118AA0;
		  /* 82118AA0h */ case   13:  		/* cmpwi CR6, R11, 45 */
		/* 82118AA0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002D);
		/* 82118AA0h case   13:*/		return 0x82118AA4;
		  /* 82118AA4h */ case   14:  		/* bc 12, CR6_EQ, -64 */
		/* 82118AA4h case   14:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118AA4h case   14:*/		return 0x82118AA8;
		  /* 82118AA8h */ case   15:  		/* cmpwi CR6, R11, 69 */
		/* 82118AA8h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000045);
		/* 82118AA8h case   15:*/		return 0x82118AAC;
		  /* 82118AACh */ case   16:  		/* b 80 */
		/* 82118AACh case   16:*/		return 0x82118AFC;
		/* 82118AACh case   16:*/		return 0x82118AB0;
	}
	return 0x82118AB0;
} // Block from 82118A6Ch-82118AB0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82118AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118AB0);
		  /* 82118AB0h */ case    0:  		/* cmpwi CR6, R11, 81 */
		/* 82118AB0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000051);
		/* 82118AB0h case    0:*/		return 0x82118AB4;
		  /* 82118AB4h */ case    1:  		/* bc 12, CR6_EQ, -80 */
		/* 82118AB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118AB4h case    1:*/		return 0x82118AB8;
		  /* 82118AB8h */ case    2:  		/* cmpwi CR6, R11, 86 */
		/* 82118AB8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000056);
		/* 82118AB8h case    2:*/		return 0x82118ABC;
		  /* 82118ABCh */ case    3:  		/* bc 12, CR6_EQ, -88 */
		/* 82118ABCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118ABCh case    3:*/		return 0x82118AC0;
		  /* 82118AC0h */ case    4:  		/* cmpwi CR6, R11, 94 */
		/* 82118AC0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000005E);
		/* 82118AC0h case    4:*/		return 0x82118AC4;
		  /* 82118AC4h */ case    5:  		/* b 56 */
		/* 82118AC4h case    5:*/		return 0x82118AFC;
		/* 82118AC4h case    5:*/		return 0x82118AC8;
	}
	return 0x82118AC8;
} // Block from 82118AB0h-82118AC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82118AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118AC8);
		  /* 82118AC8h */ case    0:  		/* cmpwi CR6, R11, 104 */
		/* 82118AC8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000068);
		/* 82118AC8h case    0:*/		return 0x82118ACC;
		  /* 82118ACCh */ case    1:  		/* bc 12, CR6_EQ, -104 */
		/* 82118ACCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118ACCh case    1:*/		return 0x82118AD0;
		  /* 82118AD0h */ case    2:  		/* cmpwi CR6, R11, 112 */
		/* 82118AD0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000070);
		/* 82118AD0h case    2:*/		return 0x82118AD4;
		  /* 82118AD4h */ case    3:  		/* bc 12, CR6_EQ, -112 */
		/* 82118AD4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118AD4h case    3:*/		return 0x82118AD8;
		  /* 82118AD8h */ case    4:  		/* cmpwi CR6, R11, 115 */
		/* 82118AD8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000073);
		/* 82118AD8h case    4:*/		return 0x82118ADC;
		  /* 82118ADCh */ case    5:  		/* bc 12, CR6_EQ, -120 */
		/* 82118ADCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118ADCh case    5:*/		return 0x82118AE0;
		  /* 82118AE0h */ case    6:  		/* cmpwi CR6, R11, 118 */
		/* 82118AE0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000076);
		/* 82118AE0h case    6:*/		return 0x82118AE4;
		  /* 82118AE4h */ case    7:  		/* bc 12, CR6_EQ, -128 */
		/* 82118AE4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118AE4h case    7:*/		return 0x82118AE8;
		  /* 82118AE8h */ case    8:  		/* cmpwi CR6, R11, 123 */
		/* 82118AE8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000007B);
		/* 82118AE8h case    8:*/		return 0x82118AEC;
		  /* 82118AECh */ case    9:  		/* bc 12, CR6_EQ, -136 */
		/* 82118AECh case    9:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118AECh case    9:*/		return 0x82118AF0;
		  /* 82118AF0h */ case   10:  		/* cmpwi CR6, R11, 126 */
		/* 82118AF0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000007E);
		/* 82118AF0h case   10:*/		return 0x82118AF4;
		  /* 82118AF4h */ case   11:  		/* bc 12, CR6_EQ, -144 */
		/* 82118AF4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118AF4h case   11:*/		return 0x82118AF8;
		  /* 82118AF8h */ case   12:  		/* cmpwi CR6, R11, 129 */
		/* 82118AF8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000081);
		/* 82118AF8h case   12:*/		return 0x82118AFC;
	}
	return 0x82118AFC;
} // Block from 82118AC8h-82118AFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 82118AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118AFC);
		  /* 82118AFCh */ case    0:  		/* bc 12, CR6_EQ, -152 */
		/* 82118AFCh case    0:*/		if ( regs.CR[6].eq ) { return 0x82118A64;  }
		/* 82118AFCh case    0:*/		return 0x82118B00;
		  /* 82118B00h */ case    1:  		/* lwz R11, <#[R31 + 36]> */
		/* 82118B00h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82118B00h case    1:*/		return 0x82118B04;
		  /* 82118B04h */ case    2:  		/* mr R5, R29 */
		/* 82118B04h case    2:*/		regs.R5 = regs.R29;
		/* 82118B04h case    2:*/		return 0x82118B08;
		  /* 82118B08h */ case    3:  		/* mr R3, R30 */
		/* 82118B08h case    3:*/		regs.R3 = regs.R30;
		/* 82118B08h case    3:*/		return 0x82118B0C;
		  /* 82118B0Ch */ case    4:  		/* lwz R4, <#[R11 + 8]> */
		/* 82118B0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 82118B0Ch case    4:*/		return 0x82118B10;
		  /* 82118B10h */ case    5:  		/* bl -384 */
		/* 82118B10h case    5:*/		regs.LR = 0x82118B14; return 0x82118990;
		/* 82118B10h case    5:*/		return 0x82118B14;
		  /* 82118B14h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82118B14h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118B14h case    6:*/		return 0x82118B18;
		  /* 82118B18h */ case    7:  		/* bc 12, CR0_EQ, -180 */
		/* 82118B18h case    7:*/		if ( regs.CR[0].eq ) { return 0x82118A64;  }
		/* 82118B18h case    7:*/		return 0x82118B1C;
		  /* 82118B1Ch */ case    8:  		/* lwz R11, <#[R31 + 36]> */
		/* 82118B1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82118B1Ch case    8:*/		return 0x82118B20;
		  /* 82118B20h */ case    9:  		/* lwz R4, <#[R11 + 12]> */
		/* 82118B20h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 82118B20h case    9:*/		return 0x82118B24;
		  /* 82118B24h */ case   10:  		/* mr R3, R30 */
		/* 82118B24h case   10:*/		regs.R3 = regs.R30;
		/* 82118B24h case   10:*/		return 0x82118B28;
		  /* 82118B28h */ case   11:  		/* mr R5, R29 */
		/* 82118B28h case   11:*/		regs.R5 = regs.R29;
		/* 82118B28h case   11:*/		return 0x82118B2C;
		  /* 82118B2Ch */ case   12:  		/* bl -412 */
		/* 82118B2Ch case   12:*/		regs.LR = 0x82118B30; return 0x82118990;
		/* 82118B2Ch case   12:*/		return 0x82118B30;
		  /* 82118B30h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 82118B30h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118B30h case   13:*/		return 0x82118B34;
		  /* 82118B34h */ case   14:  		/* li R3, 1 */
		/* 82118B34h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82118B34h case   14:*/		return 0x82118B38;
		  /* 82118B38h */ case   15:  		/* bc 4, CR0_EQ, 44 */
		/* 82118B38h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82118B64;  }
		/* 82118B38h case   15:*/		return 0x82118B3C;
		  /* 82118B3Ch */ case   16:  		/* b -216 */
		/* 82118B3Ch case   16:*/		return 0x82118A64;
		/* 82118B3Ch case   16:*/		return 0x82118B40;
	}
	return 0x82118B40;
} // Block from 82118AFCh-82118B40h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82118B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118B40);
		  /* 82118B40h */ case    0:  		/* mr R5, R29 */
		/* 82118B40h case    0:*/		regs.R5 = regs.R29;
		/* 82118B40h case    0:*/		return 0x82118B44;
		  /* 82118B44h */ case    1:  		/* lwz R4, <#[R31 + 32]> */
		/* 82118B44h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 82118B44h case    1:*/		return 0x82118B48;
		  /* 82118B48h */ case    2:  		/* mr R3, R30 */
		/* 82118B48h case    2:*/		regs.R3 = regs.R30;
		/* 82118B48h case    2:*/		return 0x82118B4C;
		  /* 82118B4Ch */ case    3:  		/* bl -444 */
		/* 82118B4Ch case    3:*/		regs.LR = 0x82118B50; return 0x82118990;
		/* 82118B4Ch case    3:*/		return 0x82118B50;
		  /* 82118B50h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82118B50h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118B50h case    4:*/		return 0x82118B54;
		  /* 82118B54h */ case    5:  		/* bc 12, CR0_EQ, -240 */
		/* 82118B54h case    5:*/		if ( regs.CR[0].eq ) { return 0x82118A64;  }
		/* 82118B54h case    5:*/		return 0x82118B58;
		  /* 82118B58h */ case    6:  		/* lwz R4, <#[R31 + 36]> */
		/* 82118B58h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000024) );
		/* 82118B58h case    6:*/		return 0x82118B5C;
		  /* 82118B5Ch */ case    7:  		/* b -56 */
		/* 82118B5Ch case    7:*/		return 0x82118B24;
		/* 82118B5Ch case    7:*/		return 0x82118B60;
	}
	return 0x82118B60;
} // Block from 82118B40h-82118B60h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118B60);
		  /* 82118B60h */ case    0:  		/* li R3, 1 */
		/* 82118B60h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82118B60h case    0:*/		return 0x82118B64;
	}
	return 0x82118B64;
} // Block from 82118B60h-82118B64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118B64);
		  /* 82118B64h */ case    0:  		/* addi R1, R1, 112 */
		/* 82118B64h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82118B64h case    0:*/		return 0x82118B68;
		  /* 82118B68h */ case    1:  		/* b -555196 */
		/* 82118B68h case    1:*/		return 0x820912AC;
		/* 82118B68h case    1:*/		return 0x82118B6C;
		  /* 82118B6Ch */ case    2:  		/* nop */
		/* 82118B6Ch case    2:*/		cpu::op::nop();
		/* 82118B6Ch case    2:*/		return 0x82118B70;
	}
	return 0x82118B70;
} // Block from 82118B64h-82118B70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118B70);
		  /* 82118B70h */ case    0:  		/* mfspr R12, LR */
		/* 82118B70h case    0:*/		regs.R12 = regs.LR;
		/* 82118B70h case    0:*/		return 0x82118B74;
		  /* 82118B74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82118B74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82118B74h case    1:*/		return 0x82118B78;
		  /* 82118B78h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82118B78h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118B78h case    2:*/		return 0x82118B7C;
		  /* 82118B7Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82118B7Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82118B7Ch case    3:*/		return 0x82118B80;
		  /* 82118B80h */ case    4:  		/* li R4, 1 */
		/* 82118B80h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82118B80h case    4:*/		return 0x82118B84;
		  /* 82118B84h */ case    5:  		/* mr R31, R3 */
		/* 82118B84h case    5:*/		regs.R31 = regs.R3;
		/* 82118B84h case    5:*/		return 0x82118B88;
		  /* 82118B88h */ case    6:  		/* lwz R3, <#[R3 + 4]> */
		/* 82118B88h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82118B88h case    6:*/		return 0x82118B8C;
		  /* 82118B8Ch */ case    7:  		/* bl -489948 */
		/* 82118B8Ch case    7:*/		regs.LR = 0x82118B90; return 0x820A11B0;
		/* 82118B8Ch case    7:*/		return 0x82118B90;
		  /* 82118B90h */ case    8:  		/* li R4, 0 */
		/* 82118B90h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82118B90h case    8:*/		return 0x82118B94;
		  /* 82118B94h */ case    9:  		/* lwz R3, <#[R31 + 4]> */
		/* 82118B94h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82118B94h case    9:*/		return 0x82118B98;
		  /* 82118B98h */ case   10:  		/* bl -474480 */
		/* 82118B98h case   10:*/		regs.LR = 0x82118B9C; return 0x820A4E28;
		/* 82118B98h case   10:*/		return 0x82118B9C;
		  /* 82118B9Ch */ case   11:  		/* li R3, 0 */
		/* 82118B9Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118B9Ch case   11:*/		return 0x82118BA0;
		  /* 82118BA0h */ case   12:  		/* addi R1, R1, 96 */
		/* 82118BA0h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82118BA0h case   12:*/		return 0x82118BA4;
		  /* 82118BA4h */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 82118BA4h case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82118BA4h case   13:*/		return 0x82118BA8;
		  /* 82118BA8h */ case   14:  		/* mtspr LR, R12 */
		/* 82118BA8h case   14:*/		regs.LR = regs.R12;
		/* 82118BA8h case   14:*/		return 0x82118BAC;
		  /* 82118BACh */ case   15:  		/* ld R31, <#[R1 - 16]> */
		/* 82118BACh case   15:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118BACh case   15:*/		return 0x82118BB0;
		  /* 82118BB0h */ case   16:  		/* bclr 20, CR0_LT */
		/* 82118BB0h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118BB0h case   16:*/		return 0x82118BB4;
	}
	return 0x82118BB4;
} // Block from 82118B70h-82118BB4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82118BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118BB4);
		  /* 82118BB4h */ case    0:  		/* nop */
		/* 82118BB4h case    0:*/		cpu::op::nop();
		/* 82118BB4h case    0:*/		return 0x82118BB8;
	}
	return 0x82118BB8;
} // Block from 82118BB4h-82118BB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118BB8);
		  /* 82118BB8h */ case    0:  		/* mfspr R12, LR */
		/* 82118BB8h case    0:*/		regs.R12 = regs.LR;
		/* 82118BB8h case    0:*/		return 0x82118BBC;
		  /* 82118BBCh */ case    1:  		/* bl -555364 */
		/* 82118BBCh case    1:*/		regs.LR = 0x82118BC0; return 0x82091258;
		/* 82118BBCh case    1:*/		return 0x82118BC0;
		  /* 82118BC0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82118BC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82118BC0h case    2:*/		return 0x82118BC4;
		  /* 82118BC4h */ case    3:  		/* lwz R11, <#[R4 + 36]> */
		/* 82118BC4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 82118BC4h case    3:*/		return 0x82118BC8;
		  /* 82118BC8h */ case    4:  		/* addi R10, R5, 0 */
		/* 82118BC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0x0);
		/* 82118BC8h case    4:*/		return 0x82118BCC;
		  /* 82118BCCh */ case    5:  		/* mr R28, R3 */
		/* 82118BCCh case    5:*/		regs.R28 = regs.R3;
		/* 82118BCCh case    5:*/		return 0x82118BD0;
		  /* 82118BD0h */ case    6:  		/* addi R9, R11, 0 */
		/* 82118BD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x0);
		/* 82118BD0h case    6:*/		return 0x82118BD4;
		  /* 82118BD4h */ case    7:  		/* cntlzw R10, R10 */
		/* 82118BD4h case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 82118BD4h case    7:*/		return 0x82118BD8;
		  /* 82118BD8h */ case    8:  		/* cntlzw R9, R9 */
		/* 82118BD8h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 82118BD8h case    8:*/		return 0x82118BDC;
		  /* 82118BDCh */ case    9:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 82118BDCh case    9:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 82118BDCh case    9:*/		return 0x82118BE0;
		  /* 82118BE0h */ case   10:  		/* rlwinm R9, R9, 27, 31, 31 */
		/* 82118BE0h case   10:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R9);
		/* 82118BE0h case   10:*/		return 0x82118BE4;
		  /* 82118BE4h */ case   11:  		/* mr R30, R4 */
		/* 82118BE4h case   11:*/		regs.R30 = regs.R4;
		/* 82118BE4h case   11:*/		return 0x82118BE8;
		  /* 82118BE8h */ case   12:  		/* mr R31, R5 */
		/* 82118BE8h case   12:*/		regs.R31 = regs.R5;
		/* 82118BE8h case   12:*/		return 0x82118BEC;
		  /* 82118BECh */ case   13:  		/* mr R29, R6 */
		/* 82118BECh case   13:*/		regs.R29 = regs.R6;
		/* 82118BECh case   13:*/		return 0x82118BF0;
		  /* 82118BF0h */ case   14:  		/* cmpw CR6, R10, R9 */
		/* 82118BF0h case   14:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 82118BF0h case   14:*/		return 0x82118BF4;
		  /* 82118BF4h */ case   15:  		/* bc 4, CR6_EQ, 308 */
		/* 82118BF4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82118D28;  }
		/* 82118BF4h case   15:*/		return 0x82118BF8;
		  /* 82118BF8h */ case   16:  		/* cmplwi CR6, R5, 0 */
		/* 82118BF8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82118BF8h case   16:*/		return 0x82118BFC;
		  /* 82118BFCh */ case   17:  		/* bc 12, CR6_EQ, 128 */
		/* 82118BFCh case   17:*/		if ( regs.CR[6].eq ) { return 0x82118C7C;  }
		/* 82118BFCh case   17:*/		return 0x82118C00;
	}
	return 0x82118C00;
} // Block from 82118BB8h-82118C00h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82118C00h
// Function '?CanCastObject@D3DXShader@@YAHW4_D3DCOMPONENT_TYPE@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118C00);
		  /* 82118C00h */ case    0:  		/* addi R5, R1, 80 */
		/* 82118C00h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82118C00h case    0:*/		return 0x82118C04;
		  /* 82118C04h */ case    1:  		/* lwz R3, <#[R11 + 24]> */
		/* 82118C04h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000018) );
		/* 82118C04h case    1:*/		return 0x82118C08;
		  /* 82118C08h */ case    2:  		/* li R4, 0 */
		/* 82118C08h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82118C08h case    2:*/		return 0x82118C0C;
		  /* 82118C0Ch */ case    3:  		/* bl -499324 */
		/* 82118C0Ch case    3:*/		regs.LR = 0x82118C10; return 0x8209ED90;
		/* 82118C0Ch case    3:*/		return 0x82118C10;
		  /* 82118C10h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82118C10h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118C10h case    4:*/		return 0x82118C14;
		  /* 82118C14h */ case    5:  		/* bc 12, CR0_LT, 48 */
		/* 82118C14h case    5:*/		if ( regs.CR[0].lt ) { return 0x82118C44;  }
		/* 82118C14h case    5:*/		return 0x82118C18;
		  /* 82118C18h */ case    6:  		/* addi R5, R1, 96 */
		/* 82118C18h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 82118C18h case    6:*/		return 0x82118C1C;
		  /* 82118C1Ch */ case    7:  		/* lwz R3, <#[R31 + 24]> */
		/* 82118C1Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 82118C1Ch case    7:*/		return 0x82118C20;
		  /* 82118C20h */ case    8:  		/* li R4, 0 */
		/* 82118C20h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82118C20h case    8:*/		return 0x82118C24;
		  /* 82118C24h */ case    9:  		/* bl -499348 */
		/* 82118C24h case    9:*/		regs.LR = 0x82118C28; return 0x8209ED90;
		/* 82118C24h case    9:*/		return 0x82118C28;
		  /* 82118C28h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82118C28h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118C28h case   10:*/		return 0x82118C2C;
		  /* 82118C2Ch */ case   11:  		/* bc 12, CR0_LT, 24 */
		/* 82118C2Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x82118C44;  }
		/* 82118C2Ch case   11:*/		return 0x82118C30;
		  /* 82118C30h */ case   12:  		/* lwz R11, <#[R1 + 84]> */
		/* 82118C30h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82118C30h case   12:*/		return 0x82118C34;
		  /* 82118C34h */ case   13:  		/* lwz R10, <#[R1 + 100]> */
		/* 82118C34h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 82118C34h case   13:*/		return 0x82118C38;
		  /* 82118C38h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 82118C38h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82118C38h case   14:*/		return 0x82118C3C;
		  /* 82118C3Ch */ case   15:  		/* bc 12, CR6_EQ, 64 */
		/* 82118C3Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82118C7C;  }
		/* 82118C3Ch case   15:*/		return 0x82118C40;
		  /* 82118C40h */ case   16:  		/* b 232 */
		/* 82118C40h case   16:*/		return 0x82118D28;
		/* 82118C40h case   16:*/		return 0x82118C44;
	}
	return 0x82118C44;
} // Block from 82118C00h-82118C44h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82118C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118C44);
		  /* 82118C44h */ case    0:  		/* lwz R10, <#[R30 + 36]> */
		/* 82118C44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 82118C44h case    0:*/		return 0x82118C48;
		  /* 82118C48h */ case    1:  		/* lwz R11, <#[R31 + 24]> */
		/* 82118C48h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82118C48h case    1:*/		return 0x82118C4C;
		  /* 82118C4Ch */ case    2:  		/* lwz R10, <#[R10 + 24]> */
		/* 82118C4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 82118C4Ch case    2:*/		return 0x82118C50;
		  /* 82118C50h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 82118C50h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82118C50h case    3:*/		return 0x82118C54;
		  /* 82118C54h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 82118C54h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82118C54h case    4:*/		return 0x82118C58;
		  /* 82118C58h */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 82118C58h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82118C58h case    5:*/		return 0x82118C5C;
		  /* 82118C5Ch */ case    6:  		/* subf R9, R8, R9 */
		/* 82118C5Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82118C5Ch case    6:*/		return 0x82118C60;
		  /* 82118C60h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 82118C60h case    7:*/		if ( regs.CR[0].eq ) { return 0x82118C74;  }
		/* 82118C60h case    7:*/		return 0x82118C64;
		  /* 82118C64h */ case    8:  		/* addi R11, R11, 1 */
		/* 82118C64h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82118C64h case    8:*/		return 0x82118C68;
		  /* 82118C68h */ case    9:  		/* addi R10, R10, 1 */
		/* 82118C68h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82118C68h case    9:*/		return 0x82118C6C;
		  /* 82118C6Ch */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 82118C6Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82118C6Ch case   10:*/		return 0x82118C70;
		  /* 82118C70h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 82118C70h case   11:*/		if ( regs.CR[6].eq ) { return 0x82118C50;  }
		/* 82118C70h case   11:*/		return 0x82118C74;
	}
	return 0x82118C74;
} // Block from 82118C44h-82118C74h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82118C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118C74);
		  /* 82118C74h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82118C74h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82118C74h case    0:*/		return 0x82118C78;
		  /* 82118C78h */ case    1:  		/* bc 4, CR0_EQ, 176 */
		/* 82118C78h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82118D28;  }
		/* 82118C78h case    1:*/		return 0x82118C7C;
	}
	return 0x82118C7C;
} // Block from 82118C74h-82118C7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118C7C);
		  /* 82118C7Ch */ case    0:  		/* lwz R9, <#[R30 + 44]> */
		/* 82118C7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000002C) );
		/* 82118C7Ch case    0:*/		return 0x82118C80;
	}
	return 0x82118C80;
} // Block from 82118C7Ch-82118C80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118C80h
// Function '?FindDecls@CParse@D3DXShader@@IAAPAVCNode@2@PAUD3DXTOKEN@2@PAVCNodeScope@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118C80);
		  /* 82118C80h */ case    0:  		/* mr R8, R29 */
		/* 82118C80h case    0:*/		regs.R8 = regs.R29;
		/* 82118C80h case    0:*/		return 0x82118C84;
		  /* 82118C84h */ case    1:  		/* b 132 */
		/* 82118C84h case    1:*/		return 0x82118D08;
		/* 82118C84h case    1:*/		return 0x82118C88;
		  /* 82118C88h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 82118C88h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82118C88h case    2:*/		return 0x82118C8C;
		  /* 82118C8Ch */ case    3:  		/* bc 12, CR6_EQ, 136 */
		/* 82118C8Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82118D14;  }
		/* 82118C8Ch case    3:*/		return 0x82118C90;
		  /* 82118C90h */ case    4:  		/* lwz R11, <#[R9 + 8]> */
		/* 82118C90h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 82118C90h case    4:*/		return 0x82118C94;
		  /* 82118C94h */ case    5:  		/* lwz R10, <#[R8 + 8]> */
		/* 82118C94h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 82118C94h case    5:*/		return 0x82118C98;
		  /* 82118C98h */ case    6:  		/* lwz R11, <#[R11 + 24]> */
		/* 82118C98h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82118C98h case    6:*/		return 0x82118C9C;
		  /* 82118C9Ch */ case    7:  		/* lwz R10, <#[R10 + 24]> */
		/* 82118C9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 82118C9Ch case    7:*/		return 0x82118CA0;
		  /* 82118CA0h */ case    8:  		/* lwz R7, <#[R11 + 44]> */
		/* 82118CA0h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000002C) );
		/* 82118CA0h case    8:*/		return 0x82118CA4;
		  /* 82118CA4h */ case    9:  		/* lwz R6, <#[R10 + 44]> */
		/* 82118CA4h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x0000002C) );
		/* 82118CA4h case    9:*/		return 0x82118CA8;
		  /* 82118CA8h */ case   10:  		/* cmplw CR6, R7, R6 */
		/* 82118CA8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 82118CA8h case   10:*/		return 0x82118CAC;
		  /* 82118CACh */ case   11:  		/* bc 4, CR6_EQ, 124 */
		/* 82118CACh case   11:*/		if ( !regs.CR[6].eq ) { return 0x82118D28;  }
		/* 82118CACh case   11:*/		return 0x82118CB0;
		  /* 82118CB0h */ case   12:  		/* mr R3, R28 */
		/* 82118CB0h case   12:*/		regs.R3 = regs.R28;
		/* 82118CB0h case   12:*/		return 0x82118CB4;
		  /* 82118CB4h */ case   13:  		/* lwz R5, <#[R10 + 48]> */
		/* 82118CB4h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000030) );
		/* 82118CB4h case   13:*/		return 0x82118CB8;
		  /* 82118CB8h */ case   14:  		/* lwz R4, <#[R11 + 48]> */
		/* 82118CB8h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000030) );
		/* 82118CB8h case   14:*/		return 0x82118CBC;
		  /* 82118CBCh */ case   15:  		/* bl -2500 */
		/* 82118CBCh case   15:*/		regs.LR = 0x82118CC0; return 0x821182F8;
		/* 82118CBCh case   15:*/		return 0x82118CC0;
		  /* 82118CC0h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 82118CC0h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82118CC0h case   16:*/		return 0x82118CC4;
		  /* 82118CC4h */ case   17:  		/* bc 12, CR0_EQ, 100 */
		/* 82118CC4h case   17:*/		if ( regs.CR[0].eq ) { return 0x82118D28;  }
		/* 82118CC4h case   17:*/		return 0x82118CC8;
		  /* 82118CC8h */ case   18:  		/* b 20 */
		/* 82118CC8h case   18:*/		return 0x82118CDC;
		/* 82118CC8h case   18:*/		return 0x82118CCC;
		  /* 82118CCCh */ case   19:  		/* lwz R11, <#[R9 + 8]> */
		/* 82118CCCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 82118CCCh case   19:*/		return 0x82118CD0;
		  /* 82118CD0h */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 82118CD0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82118CD0h case   20:*/		return 0x82118CD4;
		  /* 82118CD4h */ case   21:  		/* cmpwi CR6, R11, 6 */
		/* 82118CD4h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82118CD4h case   21:*/		return 0x82118CD8;
		  /* 82118CD8h */ case   22:  		/* bc 12, CR6_EQ, 36 */
		/* 82118CD8h case   22:*/		if ( regs.CR[6].eq ) { return 0x82118CFC;  }
		/* 82118CD8h case   22:*/		return 0x82118CDC;
	}
	return 0x82118CDC;
} // Block from 82118C80h-82118CDCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 82118CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118CDC);
		  /* 82118CDCh */ case    0:  		/* lwz R9, <#[R9 + 12]> */
		/* 82118CDCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 82118CDCh case    0:*/		return 0x82118CE0;
		  /* 82118CE0h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 82118CE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82118CE0h case    1:*/		return 0x82118CE4;
		  /* 82118CE4h */ case    2:  		/* bc 4, CR6_EQ, -24 */
		/* 82118CE4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82118CCC;  }
		/* 82118CE4h case    2:*/		return 0x82118CE8;
		  /* 82118CE8h */ case    3:  		/* b 20 */
		/* 82118CE8h case    3:*/		return 0x82118CFC;
		/* 82118CE8h case    3:*/		return 0x82118CEC;
		  /* 82118CECh */ case    4:  		/* lwz R11, <#[R8 + 8]> */
		/* 82118CECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 82118CECh case    4:*/		return 0x82118CF0;
	}
	return 0x82118CF0;
} // Block from 82118CDCh-82118CF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82118CF0h
// Function '?IsCast@CParse@D3DXShader@@IAAHW4_D3DCOMPONENT_TYPE@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118CF0);
		  /* 82118CF0h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 82118CF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82118CF0h case    0:*/		return 0x82118CF4;
		  /* 82118CF4h */ case    1:  		/* cmpwi CR6, R11, 6 */
		/* 82118CF4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 82118CF4h case    1:*/		return 0x82118CF8;
		  /* 82118CF8h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82118CF8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82118D08;  }
		/* 82118CF8h case    2:*/		return 0x82118CFC;
	}
	return 0x82118CFC;
} // Block from 82118CF0h-82118CFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118CFC);
		  /* 82118CFCh */ case    0:  		/* lwz R8, <#[R8 + 12]> */
		/* 82118CFCh case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 82118CFCh case    0:*/		return 0x82118D00;
		  /* 82118D00h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 82118D00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82118D00h case    1:*/		return 0x82118D04;
		  /* 82118D04h */ case    2:  		/* bc 4, CR6_EQ, -24 */
		/* 82118D04h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82118CEC;  }
		/* 82118D04h case    2:*/		return 0x82118D08;
	}
	return 0x82118D08;
} // Block from 82118CFCh-82118D08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D08);
		  /* 82118D08h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82118D08h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82118D08h case    0:*/		return 0x82118D0C;
		  /* 82118D0Ch */ case    1:  		/* bc 4, CR6_EQ, -132 */
		/* 82118D0Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118C88;  }
		/* 82118D0Ch case    1:*/		return 0x82118D10;
		  /* 82118D10h */ case    2:  		/* b 12 */
		/* 82118D10h case    2:*/		return 0x82118D1C;
		/* 82118D10h case    2:*/		return 0x82118D14;
	}
	return 0x82118D14;
} // Block from 82118D08h-82118D14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D14);
		  /* 82118D14h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82118D14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82118D14h case    0:*/		return 0x82118D18;
		  /* 82118D18h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82118D18h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118D28;  }
		/* 82118D18h case    1:*/		return 0x82118D1C;
	}
	return 0x82118D1C;
} // Block from 82118D14h-82118D1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D1C);
		  /* 82118D1Ch */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 82118D1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82118D1Ch case    0:*/		return 0x82118D20;
		  /* 82118D20h */ case    1:  		/* li R3, 0 */
		/* 82118D20h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118D20h case    1:*/		return 0x82118D24;
		  /* 82118D24h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 82118D24h case    2:*/		if ( regs.CR[6].eq ) { return 0x82118D2C;  }
		/* 82118D24h case    2:*/		return 0x82118D28;
	}
	return 0x82118D28;
} // Block from 82118D1Ch-82118D28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D28);
		  /* 82118D28h */ case    0:  		/* li R3, -1 */
		/* 82118D28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82118D28h case    0:*/		return 0x82118D2C;
	}
	return 0x82118D2C;
} // Block from 82118D28h-82118D2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D2C);
		  /* 82118D2Ch */ case    0:  		/* addi R1, R1, 160 */
		/* 82118D2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82118D2Ch case    0:*/		return 0x82118D30;
		  /* 82118D30h */ case    1:  		/* b -555656 */
		/* 82118D30h case    1:*/		return 0x820912A8;
		/* 82118D30h case    1:*/		return 0x82118D34;
		  /* 82118D34h */ case    2:  		/* nop */
		/* 82118D34h case    2:*/		cpu::op::nop();
		/* 82118D34h case    2:*/		return 0x82118D38;
	}
	return 0x82118D38;
} // Block from 82118D2Ch-82118D38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D38);
		  /* 82118D38h */ case    0:  		/* mfspr R12, LR */
		/* 82118D38h case    0:*/		regs.R12 = regs.LR;
		/* 82118D38h case    0:*/		return 0x82118D3C;
		  /* 82118D3Ch */ case    1:  		/* bl -555744 */
		/* 82118D3Ch case    1:*/		regs.LR = 0x82118D40; return 0x8209125C;
		/* 82118D3Ch case    1:*/		return 0x82118D40;
		  /* 82118D40h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82118D40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82118D40h case    2:*/		return 0x82118D44;
		  /* 82118D44h */ case    3:  		/* lwz R11, <#[R3 + 128]> */
		/* 82118D44h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 82118D44h case    3:*/		return 0x82118D48;
		  /* 82118D48h */ case    4:  		/* li R10, 1 */
		/* 82118D48h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82118D48h case    4:*/		return 0x82118D4C;
		  /* 82118D4Ch */ case    5:  		/* li R3, 20 */
		/* 82118D4Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82118D4Ch case    5:*/		return 0x82118D50;
		  /* 82118D50h */ case    6:  		/* mr R31, R4 */
		/* 82118D50h case    6:*/		regs.R31 = regs.R4;
		/* 82118D50h case    6:*/		return 0x82118D54;
		  /* 82118D54h */ case    7:  		/* mr R30, R5 */
		/* 82118D54h case    7:*/		regs.R30 = regs.R5;
		/* 82118D54h case    7:*/		return 0x82118D58;
		  /* 82118D58h */ case    8:  		/* stw R10, <#[R11 + 28]> */
		/* 82118D58h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 82118D58h case    8:*/		return 0x82118D5C;
		  /* 82118D5Ch */ case    9:  		/* bl -326452 */
		/* 82118D5Ch case    9:*/		regs.LR = 0x82118D60; return 0x820C9228;
		/* 82118D5Ch case    9:*/		return 0x82118D60;
		  /* 82118D60h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82118D60h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82118D60h case   10:*/		return 0x82118D64;
		  /* 82118D64h */ case   11:  		/* bc 12, CR0_EQ, 32 */
		/* 82118D64h case   11:*/		if ( regs.CR[0].eq ) { return 0x82118D84;  }
		/* 82118D64h case   11:*/		return 0x82118D68;
		  /* 82118D68h */ case   12:  		/* lis R11, -32253 */
		/* 82118D68h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82118D68h case   12:*/		return 0x82118D6C;
		  /* 82118D6Ch */ case   13:  		/* li R5, 0 */
		/* 82118D6Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82118D6Ch case   13:*/		return 0x82118D70;
		  /* 82118D70h */ case   14:  		/* addi R6, R11, 7880 */
		/* 82118D70h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1EC8);
		/* 82118D70h case   14:*/		return 0x82118D74;
		  /* 82118D74h */ case   15:  		/* li R4, 0 */
		/* 82118D74h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82118D74h case   15:*/		return 0x82118D78;
		  /* 82118D78h */ case   16:  		/* bl -326024 */
		/* 82118D78h case   16:*/		regs.LR = 0x82118D7C; return 0x820C93F0;
		/* 82118D78h case   16:*/		return 0x82118D7C;
		  /* 82118D7Ch */ case   17:  		/* mr R29, R3 */
		/* 82118D7Ch case   17:*/		regs.R29 = regs.R3;
		/* 82118D7Ch case   17:*/		return 0x82118D80;
		  /* 82118D80h */ case   18:  		/* b 8 */
		/* 82118D80h case   18:*/		return 0x82118D88;
		/* 82118D80h case   18:*/		return 0x82118D84;
	}
	return 0x82118D84;
} // Block from 82118D38h-82118D84h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82118D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D84);
		  /* 82118D84h */ case    0:  		/* li R29, 0 */
		/* 82118D84h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82118D84h case    0:*/		return 0x82118D88;
	}
	return 0x82118D88;
} // Block from 82118D84h-82118D88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D88);
		  /* 82118D88h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82118D88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82118D88h case    0:*/		return 0x82118D8C;
		  /* 82118D8Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82118D8Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82118D98;  }
		/* 82118D8Ch case    1:*/		return 0x82118D90;
		  /* 82118D90h */ case    2:  		/* li R3, 0 */
		/* 82118D90h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118D90h case    2:*/		return 0x82118D94;
		  /* 82118D94h */ case    3:  		/* b 56 */
		/* 82118D94h case    3:*/		return 0x82118DCC;
		/* 82118D94h case    3:*/		return 0x82118D98;
	}
	return 0x82118D98;
} // Block from 82118D88h-82118D98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118D98);
		  /* 82118D98h */ case    0:  		/* li R3, 24 */
		/* 82118D98h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x18);
		/* 82118D98h case    0:*/		return 0x82118D9C;
		  /* 82118D9Ch */ case    1:  		/* bl -326516 */
		/* 82118D9Ch case    1:*/		regs.LR = 0x82118DA0; return 0x820C9228;
		/* 82118D9Ch case    1:*/		return 0x82118DA0;
		  /* 82118DA0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82118DA0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82118DA0h case    2:*/		return 0x82118DA4;
		  /* 82118DA4h */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 82118DA4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82118DB8;  }
		/* 82118DA4h case    3:*/		return 0x82118DA8;
		  /* 82118DA8h */ case    4:  		/* mr R5, R30 */
		/* 82118DA8h case    4:*/		regs.R5 = regs.R30;
		/* 82118DA8h case    4:*/		return 0x82118DAC;
		  /* 82118DACh */ case    5:  		/* mr R4, R31 */
		/* 82118DACh case    5:*/		regs.R4 = regs.R31;
		/* 82118DACh case    5:*/		return 0x82118DB0;
		  /* 82118DB0h */ case    6:  		/* bl -321760 */
		/* 82118DB0h case    6:*/		regs.LR = 0x82118DB4; return 0x820CA4D0;
		/* 82118DB0h case    6:*/		return 0x82118DB4;
		  /* 82118DB4h */ case    7:  		/* b 8 */
		/* 82118DB4h case    7:*/		return 0x82118DBC;
		/* 82118DB4h case    7:*/		return 0x82118DB8;
	}
	return 0x82118DB8;
} // Block from 82118D98h-82118DB8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118DB8);
		  /* 82118DB8h */ case    0:  		/* li R3, 0 */
		/* 82118DB8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118DB8h case    0:*/		return 0x82118DBC;
	}
	return 0x82118DBC;
} // Block from 82118DB8h-82118DBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118DBC);
		  /* 82118DBCh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82118DBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82118DBCh case    0:*/		return 0x82118DC0;
		  /* 82118DC0h */ case    1:  		/* bc 12, CR6_EQ, -48 */
		/* 82118DC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82118D90;  }
		/* 82118DC0h case    1:*/		return 0x82118DC4;
		  /* 82118DC4h */ case    2:  		/* stw R3, <#[R29 + 8]> */
		/* 82118DC4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000008) );
		/* 82118DC4h case    2:*/		return 0x82118DC8;
		  /* 82118DC8h */ case    3:  		/* mr R3, R29 */
		/* 82118DC8h case    3:*/		regs.R3 = regs.R29;
		/* 82118DC8h case    3:*/		return 0x82118DCC;
	}
	return 0x82118DCC;
} // Block from 82118DBCh-82118DCCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118DCC);
		  /* 82118DCCh */ case    0:  		/* addi R1, R1, 112 */
		/* 82118DCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82118DCCh case    0:*/		return 0x82118DD0;
		  /* 82118DD0h */ case    1:  		/* b -555812 */
		/* 82118DD0h case    1:*/		return 0x820912AC;
		/* 82118DD0h case    1:*/		return 0x82118DD4;
		  /* 82118DD4h */ case    2:  		/* nop */
		/* 82118DD4h case    2:*/		cpu::op::nop();
		/* 82118DD4h case    2:*/		return 0x82118DD8;
		  /* 82118DD8h */ case    3:  		/* lwz R11, <#[R4]> */
		/* 82118DD8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82118DD8h case    3:*/		return 0x82118DDC;
		  /* 82118DDCh */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82118DDCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82118DDCh case    4:*/		return 0x82118DE0;
		  /* 82118DE0h */ case    5:  		/* bc 12, CR6_LT, 368 */
		/* 82118DE0h case    5:*/		if ( regs.CR[6].lt ) { return 0x82118F50;  }
		/* 82118DE0h case    5:*/		return 0x82118DE4;
		  /* 82118DE4h */ case    6:  		/* bc 12, CR6_EQ, 288 */
		/* 82118DE4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82118F04;  }
		/* 82118DE4h case    6:*/		return 0x82118DE8;
		  /* 82118DE8h */ case    7:  		/* cmplwi CR6, R11, 3 */
		/* 82118DE8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82118DE8h case    7:*/		return 0x82118DEC;
		  /* 82118DECh */ case    8:  		/* bc 12, CR6_LT, 196 */
		/* 82118DECh case    8:*/		if ( regs.CR[6].lt ) { return 0x82118EB0;  }
		/* 82118DECh case    8:*/		return 0x82118DF0;
		  /* 82118DF0h */ case    9:  		/* bc 12, CR6_EQ, 88 */
		/* 82118DF0h case    9:*/		if ( regs.CR[6].eq ) { return 0x82118E48;  }
		/* 82118DF0h case    9:*/		return 0x82118DF4;
		  /* 82118DF4h */ case   10:  		/* cmplwi CR6, R11, 5 */
		/* 82118DF4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82118DF4h case   10:*/		return 0x82118DF8;
		  /* 82118DF8h */ case   11:  		/* bc 12, CR6_LT, 64 */
		/* 82118DF8h case   11:*/		if ( regs.CR[6].lt ) { return 0x82118E38;  }
		/* 82118DF8h case   11:*/		return 0x82118DFC;
		  /* 82118DFCh */ case   12:  		/* bc 4, CR6_EQ, 368 */
		/* 82118DFCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x82118F6C;  }
		/* 82118DFCh case   12:*/		return 0x82118E00;
	}
	return 0x82118E00;
} // Block from 82118DCCh-82118E00h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82118E00h
// Function '?AddCBuffer@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E00);
		  /* 82118E00h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82118E00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118E00h case    0:*/		return 0x82118E04;
		  /* 82118E04h */ case    1:  		/* cmpwi CR6, R11, 4 */
		/* 82118E04h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82118E04h case    1:*/		return 0x82118E08;
		  /* 82118E08h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 82118E08h case    2:*/		if ( regs.CR[6].eq ) { return 0x82118E28;  }
		/* 82118E08h case    2:*/		return 0x82118E0C;
		  /* 82118E0Ch */ case    3:  		/* cmpwi CR6, R11, 5 */
		/* 82118E0Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 82118E0Ch case    3:*/		return 0x82118E10;
		  /* 82118E10h */ case    4:  		/* bc 4, CR6_EQ, 348 */
		/* 82118E10h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82118F6C;  }
		/* 82118E10h case    4:*/		return 0x82118E14;
		  /* 82118E14h */ case    5:  		/* lwz R11, <#[R5 + 8]> */
		/* 82118E14h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118E14h case    5:*/		return 0x82118E18;
		  /* 82118E18h */ case    6:  		/* stw R11, <#[R4 + 8]> */
		/* 82118E18h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82118E18h case    6:*/		return 0x82118E1C;
		  /* 82118E1Ch */ case    7:  		/* lwz R11, <#[R5 + 12]> */
		/* 82118E1Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000000C) );
		/* 82118E1Ch case    7:*/		return 0x82118E20;
		  /* 82118E20h */ case    8:  		/* stw R11, <#[R4 + 12]> */
		/* 82118E20h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82118E20h case    8:*/		return 0x82118E24;
		  /* 82118E24h */ case    9:  		/* b 388 */
		/* 82118E24h case    9:*/		return 0x82118FA8;
		/* 82118E24h case    9:*/		return 0x82118E28;
	}
	return 0x82118E28;
} // Block from 82118E00h-82118E28h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82118E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E28);
		  /* 82118E28h */ case    0:  		/* li R11, 4 */
		/* 82118E28h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82118E28h case    0:*/		return 0x82118E2C;
		  /* 82118E2Ch */ case    1:  		/* stw R11, <#[R4]> */
		/* 82118E2Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82118E2Ch case    1:*/		return 0x82118E30;
		  /* 82118E30h */ case    2:  		/* lwz R11, <#[R5 + 8]> */
		/* 82118E30h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118E30h case    2:*/		return 0x82118E34;
		  /* 82118E34h */ case    3:  		/* b 368 */
		/* 82118E34h case    3:*/		return 0x82118FA4;
		/* 82118E34h case    3:*/		return 0x82118E38;
	}
	return 0x82118E38;
} // Block from 82118E28h-82118E38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E38);
		  /* 82118E38h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82118E38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118E38h case    0:*/		return 0x82118E3C;
		  /* 82118E3Ch */ case    1:  		/* cmpwi CR6, R11, 4 */
		/* 82118E3Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82118E3Ch case    1:*/		return 0x82118E40;
		  /* 82118E40h */ case    2:  		/* bc 4, CR6_EQ, 300 */
		/* 82118E40h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82118F6C;  }
		/* 82118E40h case    2:*/		return 0x82118E44;
		  /* 82118E44h */ case    3:  		/* b -20 */
		/* 82118E44h case    3:*/		return 0x82118E30;
		/* 82118E44h case    3:*/		return 0x82118E48;
	}
	return 0x82118E48;
} // Block from 82118E38h-82118E48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E48);
		  /* 82118E48h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82118E48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118E48h case    0:*/		return 0x82118E4C;
		  /* 82118E4Ch */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82118E4Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82118E4Ch case    1:*/		return 0x82118E50;
		  /* 82118E50h */ case    2:  		/* bc 12, CR6_LT, 68 */
		/* 82118E50h case    2:*/		if ( regs.CR[6].lt ) { return 0x82118E94;  }
		/* 82118E50h case    2:*/		return 0x82118E54;
		  /* 82118E54h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82118E54h case    3:*/		if ( regs.CR[6].eq ) { return 0x82118E84;  }
		/* 82118E54h case    3:*/		return 0x82118E58;
		  /* 82118E58h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82118E58h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82118E58h case    4:*/		return 0x82118E5C;
		  /* 82118E5Ch */ case    5:  		/* bc 12, CR6_LT, 20 */
		/* 82118E5Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x82118E70;  }
		/* 82118E5Ch case    5:*/		return 0x82118E60;
	}
	return 0x82118E60;
} // Block from 82118E48h-82118E60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82118E60h
// Function '?IsTypeEqual@CParse@D3DXShader@@IAAHPAVCNode@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E60);
		  /* 82118E60h */ case    0:  		/* bc 4, CR6_EQ, 268 */
		/* 82118E60h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82118F6C;  }
		/* 82118E60h case    0:*/		return 0x82118E64;
		  /* 82118E64h */ case    1:  		/* lfd FR0, <#[R5 + 8]> */
		/* 82118E64h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R5 + 0x00000008) );
		/* 82118E64h case    1:*/		return 0x82118E68;
		  /* 82118E68h */ case    2:  		/* stfd FR0, <#[R4 + 8]> */
		/* 82118E68h case    2:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R4 + 0x00000008) );
		/* 82118E68h case    2:*/		return 0x82118E6C;
		  /* 82118E6Ch */ case    3:  		/* b 316 */
		/* 82118E6Ch case    3:*/		return 0x82118FA8;
		/* 82118E6Ch case    3:*/		return 0x82118E70;
	}
	return 0x82118E70;
} // Block from 82118E60h-82118E70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E70);
		  /* 82118E70h */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 82118E70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118E70h case    0:*/		return 0x82118E74;
		  /* 82118E74h */ case    1:  		/* std R11, <#[R1 - 16]> */
		/* 82118E74h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118E74h case    1:*/		return 0x82118E78;
		  /* 82118E78h */ case    2:  		/* lfd FR0, <#[R1 - 16]> */
		/* 82118E78h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118E78h case    2:*/		return 0x82118E7C;
		  /* 82118E7Ch */ case    3:  		/* fcfid FR0, FR0 */
		/* 82118E7Ch case    3:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82118E7Ch case    3:*/		return 0x82118E80;
		  /* 82118E80h */ case    4:  		/* b -24 */
		/* 82118E80h case    4:*/		return 0x82118E68;
		/* 82118E80h case    4:*/		return 0x82118E84;
	}
	return 0x82118E84;
} // Block from 82118E70h-82118E84h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82118E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E84);
		  /* 82118E84h */ case    0:  		/* lwa R11, <#[R5 + 8]> */
		/* 82118E84h case    0:*/		cpu::mem::load32a( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118E84h case    0:*/		return 0x82118E88;
		  /* 82118E88h */ case    1:  		/* std R11, <#[R1 - 16]> */
		/* 82118E88h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118E88h case    1:*/		return 0x82118E8C;
		  /* 82118E8Ch */ case    2:  		/* lfd FR0, <#[R1 - 16]> */
		/* 82118E8Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118E8Ch case    2:*/		return 0x82118E90;
		  /* 82118E90h */ case    3:  		/* b -20 */
		/* 82118E90h case    3:*/		return 0x82118E7C;
		/* 82118E90h case    3:*/		return 0x82118E94;
	}
	return 0x82118E94;
} // Block from 82118E84h-82118E94h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118E94);
		  /* 82118E94h */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 82118E94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118E94h case    0:*/		return 0x82118E98;
		  /* 82118E98h */ case    1:  		/* addic R10, R11, -1 */
		/* 82118E98h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82118E98h case    1:*/		return 0x82118E9C;
		  /* 82118E9Ch */ case    2:  		/* subfe R11, R10, R11 */
		/* 82118E9Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82118E9Ch case    2:*/		return 0x82118EA0;
		  /* 82118EA0h */ case    3:  		/* extsw R11, R11 */
		/* 82118EA0h case    3:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 82118EA0h case    3:*/		return 0x82118EA4;
		  /* 82118EA4h */ case    4:  		/* std R11, <#[R1 - 16]> */
		/* 82118EA4h case    4:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118EA4h case    4:*/		return 0x82118EA8;
		  /* 82118EA8h */ case    5:  		/* lfd FR0, <#[R1 - 16]> */
		/* 82118EA8h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82118EA8h case    5:*/		return 0x82118EAC;
		  /* 82118EACh */ case    6:  		/* b -48 */
		/* 82118EACh case    6:*/		return 0x82118E7C;
		/* 82118EACh case    6:*/		return 0x82118EB0;
	}
	return 0x82118EB0;
} // Block from 82118E94h-82118EB0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82118EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118EB0);
		  /* 82118EB0h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82118EB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118EB0h case    0:*/		return 0x82118EB4;
		  /* 82118EB4h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82118EB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82118EB4h case    1:*/		return 0x82118EB8;
		  /* 82118EB8h */ case    2:  		/* bc 12, CR6_LT, 224 */
		/* 82118EB8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82118F98;  }
		/* 82118EB8h case    2:*/		return 0x82118EBC;
		  /* 82118EBCh */ case    3:  		/* bc 12, CR6_EQ, -140 */
		/* 82118EBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82118E30;  }
		/* 82118EBCh case    3:*/		return 0x82118EC0;
		  /* 82118EC0h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82118EC0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82118EC0h case    4:*/		return 0x82118EC4;
		  /* 82118EC4h */ case    5:  		/* bc 12, CR6_LT, -148 */
		/* 82118EC4h case    5:*/		if ( regs.CR[6].lt ) { return 0x82118E30;  }
		/* 82118EC4h case    5:*/		return 0x82118EC8;
		  /* 82118EC8h */ case    6:  		/* bc 4, CR6_EQ, 164 */
		/* 82118EC8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82118F6C;  }
		/* 82118EC8h case    6:*/		return 0x82118ECC;
		  /* 82118ECCh */ case    7:  		/* lis R11, -32256 */
		/* 82118ECCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82118ECCh case    7:*/		return 0x82118ED0;
		  /* 82118ED0h */ case    8:  		/* lfd FR0, <#[R5 + 8]> */
		/* 82118ED0h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R5 + 0x00000008) );
		/* 82118ED0h case    8:*/		return 0x82118ED4;
		  /* 82118ED4h */ case    9:  		/* lfd FR13, <#[R11 + 1808]> */
		/* 82118ED4h case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000710) );
		/* 82118ED4h case    9:*/		return 0x82118ED8;
		  /* 82118ED8h */ case   10:  		/* lis R11, -32255 */
		/* 82118ED8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82118ED8h case   10:*/		return 0x82118EDC;
		  /* 82118EDCh */ case   11:  		/* fcmpu CR6, FR0, FR13 */
		/* 82118EDCh case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 82118EDCh case   11:*/		return 0x82118EE0;
		  /* 82118EE0h */ case   12:  		/* lfd FR13, <#[R11 + 8072]> */
		/* 82118EE0h case   12:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00001F88) );
		/* 82118EE0h case   12:*/		return 0x82118EE4;
		  /* 82118EE4h */ case   13:  		/* bc 12, CR6_LT, 12 */
		/* 82118EE4h case   13:*/		if ( regs.CR[6].lt ) { return 0x82118EF0;  }
		/* 82118EE4h case   13:*/		return 0x82118EE8;
		  /* 82118EE8h */ case   14:  		/* fadd FR0, FR0, FR13 */
		/* 82118EE8h case   14:*/		cpu::op::fadd<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82118EE8h case   14:*/		return 0x82118EEC;
		  /* 82118EECh */ case   15:  		/* b 8 */
		/* 82118EECh case   15:*/		return 0x82118EF4;
		/* 82118EECh case   15:*/		return 0x82118EF0;
	}
	return 0x82118EF0;
} // Block from 82118EB0h-82118EF0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82118EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118EF0);
		  /* 82118EF0h */ case    0:  		/* fsub FR0, FR0, FR13 */
		/* 82118EF0h case    0:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82118EF0h case    0:*/		return 0x82118EF4;
	}
	return 0x82118EF4;
} // Block from 82118EF0h-82118EF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118EF4);
		  /* 82118EF4h */ case    0:  		/* fctidz FR0, FR0 */
		/* 82118EF4h case    0:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82118EF4h case    0:*/		return 0x82118EF8;
		  /* 82118EF8h */ case    1:  		/* li R11, 8 */
		/* 82118EF8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 82118EF8h case    1:*/		return 0x82118EFC;
		  /* 82118EFCh */ case    2:  		/* stfiwx FR0, <#[R4 + R11]> */
		/* 82118EFCh case    2:*/		cpu::mem::store32( regs, regs.FR0, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 82118EFCh case    2:*/		return 0x82118F00;
		  /* 82118F00h */ case    3:  		/* b 168 */
		/* 82118F00h case    3:*/		return 0x82118FA8;
		/* 82118F00h case    3:*/		return 0x82118F04;
	}
	return 0x82118F04;
} // Block from 82118EF4h-82118F04h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82118F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118F04);
		  /* 82118F04h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82118F04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118F04h case    0:*/		return 0x82118F08;
		  /* 82118F08h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82118F08h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82118F08h case    1:*/		return 0x82118F0C;
		  /* 82118F0Ch */ case    2:  		/* bc 12, CR6_LT, 140 */
		/* 82118F0Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x82118F98;  }
		/* 82118F0Ch case    2:*/		return 0x82118F10;
		  /* 82118F10h */ case    3:  		/* bc 12, CR6_EQ, -224 */
		/* 82118F10h case    3:*/		if ( regs.CR[6].eq ) { return 0x82118E30;  }
		/* 82118F10h case    3:*/		return 0x82118F14;
		  /* 82118F14h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82118F14h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82118F14h case    4:*/		return 0x82118F18;
		  /* 82118F18h */ case    5:  		/* bc 12, CR6_LT, -232 */
		/* 82118F18h case    5:*/		if ( regs.CR[6].lt ) { return 0x82118E30;  }
		/* 82118F18h case    5:*/		return 0x82118F1C;
		  /* 82118F1Ch */ case    6:  		/* bc 4, CR6_EQ, 80 */
		/* 82118F1Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82118F6C;  }
		/* 82118F1Ch case    6:*/		return 0x82118F20;
		  /* 82118F20h */ case    7:  		/* lis R11, -32256 */
		/* 82118F20h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82118F20h case    7:*/		return 0x82118F24;
		  /* 82118F24h */ case    8:  		/* lfd FR0, <#[R5 + 8]> */
		/* 82118F24h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R5 + 0x00000008) );
		/* 82118F24h case    8:*/		return 0x82118F28;
		  /* 82118F28h */ case    9:  		/* lfd FR13, <#[R11 + 1808]> */
		/* 82118F28h case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000710) );
		/* 82118F28h case    9:*/		return 0x82118F2C;
		  /* 82118F2Ch */ case   10:  		/* lis R11, -32255 */
		/* 82118F2Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82118F2Ch case   10:*/		return 0x82118F30;
		  /* 82118F30h */ case   11:  		/* fcmpu CR6, FR0, FR13 */
		/* 82118F30h case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 82118F30h case   11:*/		return 0x82118F34;
		  /* 82118F34h */ case   12:  		/* lfd FR13, <#[R11 + 8072]> */
		/* 82118F34h case   12:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00001F88) );
		/* 82118F34h case   12:*/		return 0x82118F38;
		  /* 82118F38h */ case   13:  		/* bc 12, CR6_LT, 12 */
		/* 82118F38h case   13:*/		if ( regs.CR[6].lt ) { return 0x82118F44;  }
		/* 82118F38h case   13:*/		return 0x82118F3C;
		  /* 82118F3Ch */ case   14:  		/* fadd FR0, FR0, FR13 */
		/* 82118F3Ch case   14:*/		cpu::op::fadd<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82118F3Ch case   14:*/		return 0x82118F40;
		  /* 82118F40h */ case   15:  		/* b 8 */
		/* 82118F40h case   15:*/		return 0x82118F48;
		/* 82118F40h case   15:*/		return 0x82118F44;
	}
	return 0x82118F44;
} // Block from 82118F04h-82118F44h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82118F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118F44);
		  /* 82118F44h */ case    0:  		/* fsub FR0, FR0, FR13 */
		/* 82118F44h case    0:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82118F44h case    0:*/		return 0x82118F48;
	}
	return 0x82118F48;
} // Block from 82118F44h-82118F48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118F48);
		  /* 82118F48h */ case    0:  		/* fctiwz FR0, FR0 */
		/* 82118F48h case    0:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 82118F48h case    0:*/		return 0x82118F4C;
		  /* 82118F4Ch */ case    1:  		/* b -84 */
		/* 82118F4Ch case    1:*/		return 0x82118EF8;
		/* 82118F4Ch case    1:*/		return 0x82118F50;
	}
	return 0x82118F50;
} // Block from 82118F48h-82118F50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118F50);
		  /* 82118F50h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82118F50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118F50h case    0:*/		return 0x82118F54;
		  /* 82118F54h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82118F54h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82118F54h case    1:*/		return 0x82118F58;
		  /* 82118F58h */ case    2:  		/* bc 12, CR6_LT, 64 */
		/* 82118F58h case    2:*/		if ( regs.CR[6].lt ) { return 0x82118F98;  }
		/* 82118F58h case    2:*/		return 0x82118F5C;
		  /* 82118F5Ch */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 82118F5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82118F98;  }
		/* 82118F5Ch case    3:*/		return 0x82118F60;
		  /* 82118F60h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82118F60h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82118F60h case    4:*/		return 0x82118F64;
		  /* 82118F64h */ case    5:  		/* bc 12, CR6_LT, 52 */
		/* 82118F64h case    5:*/		if ( regs.CR[6].lt ) { return 0x82118F98;  }
		/* 82118F64h case    5:*/		return 0x82118F68;
		  /* 82118F68h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 82118F68h case    6:*/		if ( regs.CR[6].eq ) { return 0x82118F78;  }
		/* 82118F68h case    6:*/		return 0x82118F6C;
	}
	return 0x82118F6C;
} // Block from 82118F50h-82118F6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82118F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118F6C);
		  /* 82118F6Ch */ case    0:  		/* lis R3, -32768 */
		/* 82118F6Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82118F6Ch case    0:*/		return 0x82118F70;
		  /* 82118F70h */ case    1:  		/* ori R3, R3, 16389 */
		/* 82118F70h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82118F70h case    1:*/		return 0x82118F74;
		  /* 82118F74h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82118F74h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118F74h case    2:*/		return 0x82118F78;
	}
	return 0x82118F78;
} // Block from 82118F6Ch-82118F78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118F78);
		  /* 82118F78h */ case    0:  		/* lis R11, -32256 */
		/* 82118F78h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82118F78h case    0:*/		return 0x82118F7C;
		  /* 82118F7Ch */ case    1:  		/* lfd FR13, <#[R5 + 8]> */
		/* 82118F7Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R5 + 0x00000008) );
		/* 82118F7Ch case    1:*/		return 0x82118F80;
		  /* 82118F80h */ case    2:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 82118F80h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 82118F80h case    2:*/		return 0x82118F84;
		  /* 82118F84h */ case    3:  		/* li R11, 1 */
		/* 82118F84h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82118F84h case    3:*/		return 0x82118F88;
		  /* 82118F88h */ case    4:  		/* fcmpu CR6, FR13, FR0 */
		/* 82118F88h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82118F88h case    4:*/		return 0x82118F8C;
		  /* 82118F8Ch */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 82118F8Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82118FA4;  }
		/* 82118F8Ch case    5:*/		return 0x82118F90;
		  /* 82118F90h */ case    6:  		/* li R11, 0 */
		/* 82118F90h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82118F90h case    6:*/		return 0x82118F94;
		  /* 82118F94h */ case    7:  		/* b 16 */
		/* 82118F94h case    7:*/		return 0x82118FA4;
		/* 82118F94h case    7:*/		return 0x82118F98;
	}
	return 0x82118F98;
} // Block from 82118F78h-82118F98h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82118F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118F98);
		  /* 82118F98h */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 82118F98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82118F98h case    0:*/		return 0x82118F9C;
		  /* 82118F9Ch */ case    1:  		/* addic R10, R11, -1 */
		/* 82118F9Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82118F9Ch case    1:*/		return 0x82118FA0;
		  /* 82118FA0h */ case    2:  		/* subfe R11, R10, R11 */
		/* 82118FA0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82118FA0h case    2:*/		return 0x82118FA4;
	}
	return 0x82118FA4;
} // Block from 82118F98h-82118FA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82118FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118FA4);
		  /* 82118FA4h */ case    0:  		/* stw R11, <#[R4 + 8]> */
		/* 82118FA4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82118FA4h case    0:*/		return 0x82118FA8;
	}
	return 0x82118FA8;
} // Block from 82118FA4h-82118FA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82118FA8h
// Function '?GetComponentType@CParse@D3DXShader@@IAAJPAVCNode@2@0PAW4_D3DCOMPONENT_TYPE@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118FA8);
		  /* 82118FA8h */ case    0:  		/* li R3, 0 */
		/* 82118FA8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82118FA8h case    0:*/		return 0x82118FAC;
		  /* 82118FACh */ case    1:  		/* bclr 20, CR0_LT */
		/* 82118FACh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118FACh case    1:*/		return 0x82118FB0;
	}
	return 0x82118FB0;
} // Block from 82118FA8h-82118FB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82118FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118FB0);
		  /* 82118FB0h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82118FB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82118FB0h case    0:*/		return 0x82118FB4;
		  /* 82118FB4h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82118FB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82118FB4h case    1:*/		return 0x82118FB8;
		  /* 82118FB8h */ case    2:  		/* bc 12, CR6_LT, 92 */
		/* 82118FB8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82119014;  }
		/* 82118FB8h case    2:*/		return 0x82118FBC;
		  /* 82118FBCh */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 82118FBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8211900C;  }
		/* 82118FBCh case    3:*/		return 0x82118FC0;
		  /* 82118FC0h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82118FC0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82118FC0h case    4:*/		return 0x82118FC4;
		  /* 82118FC4h */ case    5:  		/* bc 12, CR6_LT, 72 */
		/* 82118FC4h case    5:*/		if ( regs.CR[6].lt ) { return 0x8211900C;  }
		/* 82118FC4h case    5:*/		return 0x82118FC8;
		  /* 82118FC8h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 82118FC8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82118FD8;  }
		/* 82118FC8h case    6:*/		return 0x82118FCC;
		  /* 82118FCCh */ case    7:  		/* lis R3, -32768 */
		/* 82118FCCh case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82118FCCh case    7:*/		return 0x82118FD0;
		  /* 82118FD0h */ case    8:  		/* ori R3, R3, 16389 */
		/* 82118FD0h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82118FD0h case    8:*/		return 0x82118FD4;
		  /* 82118FD4h */ case    9:  		/* bclr 20, CR0_LT */
		/* 82118FD4h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82118FD4h case    9:*/		return 0x82118FD8;
	}
	return 0x82118FD8;
} // Block from 82118FB0h-82118FD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82118FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118FD8);
		  /* 82118FD8h */ case    0:  		/* lis R11, -32256 */
		/* 82118FD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82118FD8h case    0:*/		return 0x82118FDC;
		  /* 82118FDCh */ case    1:  		/* lfd FR0, <#[R5 + 8]> */
		/* 82118FDCh case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R5 + 0x00000008) );
		/* 82118FDCh case    1:*/		return 0x82118FE0;
		  /* 82118FE0h */ case    2:  		/* lfd FR13, <#[R11 + 1808]> */
		/* 82118FE0h case    2:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000710) );
		/* 82118FE0h case    2:*/		return 0x82118FE4;
		  /* 82118FE4h */ case    3:  		/* lis R11, -32255 */
		/* 82118FE4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82118FE4h case    3:*/		return 0x82118FE8;
		  /* 82118FE8h */ case    4:  		/* fcmpu CR6, FR0, FR13 */
		/* 82118FE8h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 82118FE8h case    4:*/		return 0x82118FEC;
		  /* 82118FECh */ case    5:  		/* lfd FR13, <#[R11 + 8072]> */
		/* 82118FECh case    5:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00001F88) );
		/* 82118FECh case    5:*/		return 0x82118FF0;
		  /* 82118FF0h */ case    6:  		/* bc 12, CR6_LT, 12 */
		/* 82118FF0h case    6:*/		if ( regs.CR[6].lt ) { return 0x82118FFC;  }
		/* 82118FF0h case    6:*/		return 0x82118FF4;
		  /* 82118FF4h */ case    7:  		/* fadd FR0, FR0, FR13 */
		/* 82118FF4h case    7:*/		cpu::op::fadd<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82118FF4h case    7:*/		return 0x82118FF8;
		  /* 82118FF8h */ case    8:  		/* b 8 */
		/* 82118FF8h case    8:*/		return 0x82119000;
		/* 82118FF8h case    8:*/		return 0x82118FFC;
	}
	return 0x82118FFC;
} // Block from 82118FD8h-82118FFCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82118FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82118FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82118FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82118FFC);
		  /* 82118FFCh */ case    0:  		/* fsub FR0, FR0, FR13 */
		/* 82118FFCh case    0:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82118FFCh case    0:*/		return 0x82119000;
	}
	return 0x82119000;
} // Block from 82118FFCh-82119000h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119000);
		  /* 82119000h */ case    0:  		/* fctidz FR0, FR0 */
		/* 82119000h case    0:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82119000h case    0:*/		return 0x82119004;
		  /* 82119004h */ case    1:  		/* stfiwx FR0, <#[R4]> */
		/* 82119004h case    1:*/		cpu::mem::store32( regs, regs.FR0, (uint32)(regs.R4 + 0x00000000) );
		/* 82119004h case    1:*/		return 0x82119008;
		  /* 82119008h */ case    2:  		/* b 28 */
		/* 82119008h case    2:*/		return 0x82119024;
		/* 82119008h case    2:*/		return 0x8211900C;
	}
	return 0x8211900C;
} // Block from 82119000h-8211900Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211900Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211900C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211900C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211900C);
		  /* 8211900Ch */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 8211900Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8211900Ch case    0:*/		return 0x82119010;
		  /* 82119010h */ case    1:  		/* b 16 */
		/* 82119010h case    1:*/		return 0x82119020;
		/* 82119010h case    1:*/		return 0x82119014;
	}
	return 0x82119014;
} // Block from 8211900Ch-82119014h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119014);
		  /* 82119014h */ case    0:  		/* lwz R11, <#[R5 + 8]> */
		/* 82119014h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 82119014h case    0:*/		return 0x82119018;
		  /* 82119018h */ case    1:  		/* addic R10, R11, -1 */
		/* 82119018h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82119018h case    1:*/		return 0x8211901C;
		  /* 8211901Ch */ case    2:  		/* subfe R11, R10, R11 */
		/* 8211901Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8211901Ch case    2:*/		return 0x82119020;
	}
	return 0x82119020;
} // Block from 82119014h-82119020h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119020);
		  /* 82119020h */ case    0:  		/* stw R11, <#[R4]> */
		/* 82119020h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82119020h case    0:*/		return 0x82119024;
	}
	return 0x82119024;
} // Block from 82119020h-82119024h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119024);
		  /* 82119024h */ case    0:  		/* li R3, 0 */
		/* 82119024h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119024h case    0:*/		return 0x82119028;
		  /* 82119028h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82119028h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119028h case    1:*/		return 0x8211902C;
	}
	return 0x8211902C;
} // Block from 82119024h-8211902Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211902Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211902C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211902C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211902C);
		  /* 8211902Ch */ case    0:  		/* nop */
		/* 8211902Ch case    0:*/		cpu::op::nop();
		/* 8211902Ch case    0:*/		return 0x82119030;
		  /* 82119030h */ case    1:  		/* lwz R11, <#[R4]> */
		/* 82119030h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82119030h case    1:*/		return 0x82119034;
		  /* 82119034h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 82119034h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82119034h case    2:*/		return 0x82119038;
		  /* 82119038h */ case    3:  		/* bc 12, CR6_LT, 104 */
		/* 82119038h case    3:*/		if ( regs.CR[6].lt ) { return 0x821190A0;  }
		/* 82119038h case    3:*/		return 0x8211903C;
		  /* 8211903Ch */ case    4:  		/* bc 12, CR6_EQ, 72 */
		/* 8211903Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82119084;  }
		/* 8211903Ch case    4:*/		return 0x82119040;
		  /* 82119040h */ case    5:  		/* cmplwi CR6, R11, 3 */
		/* 82119040h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82119040h case    5:*/		return 0x82119044;
		  /* 82119044h */ case    6:  		/* bc 12, CR6_LT, 28 */
		/* 82119044h case    6:*/		if ( regs.CR[6].lt ) { return 0x82119060;  }
		/* 82119044h case    6:*/		return 0x82119048;
		  /* 82119048h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 82119048h case    7:*/		if ( regs.CR[6].eq ) { return 0x82119058;  }
		/* 82119048h case    7:*/		return 0x8211904C;
		  /* 8211904Ch */ case    8:  		/* lis R3, -32768 */
		/* 8211904Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211904Ch case    8:*/		return 0x82119050;
		  /* 82119050h */ case    9:  		/* ori R3, R3, 16389 */
		/* 82119050h case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82119050h case    9:*/		return 0x82119054;
		  /* 82119054h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82119054h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119054h case   10:*/		return 0x82119058;
	}
	return 0x82119058;
} // Block from 8211902Ch-82119058h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82119058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119058);
		  /* 82119058h */ case    0:  		/* stfd FR1, <#[R4 + 8]> */
		/* 82119058h case    0:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R4 + 0x00000008) );
		/* 82119058h case    0:*/		return 0x8211905C;
		  /* 8211905Ch */ case    1:  		/* b 96 */
		/* 8211905Ch case    1:*/		return 0x821190BC;
		/* 8211905Ch case    1:*/		return 0x82119060;
	}
	return 0x82119060;
} // Block from 82119058h-82119060h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119060);
		  /* 82119060h */ case    0:  		/* lis R11, -32255 */
		/* 82119060h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119060h case    0:*/		return 0x82119064;
		  /* 82119064h */ case    1:  		/* lfd FR0, <#[R11 + 8072]> */
		/* 82119064h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00001F88) );
		/* 82119064h case    1:*/		return 0x82119068;
		  /* 82119068h */ case    2:  		/* fadd FR13, FR1, FR0 */
		/* 82119068h case    2:*/		cpu::op::fadd<0>(regs,&regs.FR13,regs.FR1,regs.FR0);
		/* 82119068h case    2:*/		return 0x8211906C;
		  /* 8211906Ch */ case    3:  		/* fsub FR0, FR1, FR0 */
		/* 8211906Ch case    3:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR1,regs.FR0);
		/* 8211906Ch case    3:*/		return 0x82119070;
		  /* 82119070h */ case    4:  		/* fsel FR0, FR1, FR13, FR0 */
		/* 82119070h case    4:*/		cpu::op::fsel<0>(regs,&regs.FR0,regs.FR1,regs.FR13,regs.FR0);
		/* 82119070h case    4:*/		return 0x82119074;
		  /* 82119074h */ case    5:  		/* fctidz FR0, FR0 */
		/* 82119074h case    5:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82119074h case    5:*/		return 0x82119078;
		  /* 82119078h */ case    6:  		/* li R10, 8 */
		/* 82119078h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 82119078h case    6:*/		return 0x8211907C;
		  /* 8211907Ch */ case    7:  		/* stfiwx FR0, <#[R4 + R10]> */
		/* 8211907Ch case    7:*/		cpu::mem::store32( regs, regs.FR0, (uint32)(regs.R4 + regs.R10 + 0x00000000) );
		/* 8211907Ch case    7:*/		return 0x82119080;
		  /* 82119080h */ case    8:  		/* b 60 */
		/* 82119080h case    8:*/		return 0x821190BC;
		/* 82119080h case    8:*/		return 0x82119084;
	}
	return 0x82119084;
} // Block from 82119060h-82119084h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82119084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119084);
		  /* 82119084h */ case    0:  		/* lis R11, -32255 */
		/* 82119084h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119084h case    0:*/		return 0x82119088;
		  /* 82119088h */ case    1:  		/* lfd FR0, <#[R11 + 8072]> */
		/* 82119088h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00001F88) );
		/* 82119088h case    1:*/		return 0x8211908C;
		  /* 8211908Ch */ case    2:  		/* fadd FR13, FR1, FR0 */
		/* 8211908Ch case    2:*/		cpu::op::fadd<0>(regs,&regs.FR13,regs.FR1,regs.FR0);
		/* 8211908Ch case    2:*/		return 0x82119090;
		  /* 82119090h */ case    3:  		/* fsub FR0, FR1, FR0 */
		/* 82119090h case    3:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR1,regs.FR0);
		/* 82119090h case    3:*/		return 0x82119094;
		  /* 82119094h */ case    4:  		/* fsel FR0, FR1, FR13, FR0 */
		/* 82119094h case    4:*/		cpu::op::fsel<0>(regs,&regs.FR0,regs.FR1,regs.FR13,regs.FR0);
		/* 82119094h case    4:*/		return 0x82119098;
		  /* 82119098h */ case    5:  		/* fctiwz FR0, FR0 */
		/* 82119098h case    5:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 82119098h case    5:*/		return 0x8211909C;
		  /* 8211909Ch */ case    6:  		/* b -36 */
		/* 8211909Ch case    6:*/		return 0x82119078;
		/* 8211909Ch case    6:*/		return 0x821190A0;
	}
	return 0x821190A0;
} // Block from 82119084h-821190A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821190A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821190A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821190A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821190A0);
		  /* 821190A0h */ case    0:  		/* lis R11, -32256 */
		/* 821190A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821190A0h case    0:*/		return 0x821190A4;
		  /* 821190A4h */ case    1:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 821190A4h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 821190A4h case    1:*/		return 0x821190A8;
		  /* 821190A8h */ case    2:  		/* li R11, 1 */
		/* 821190A8h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821190A8h case    2:*/		return 0x821190AC;
		  /* 821190ACh */ case    3:  		/* fcmpu CR6, FR1, FR0 */
		/* 821190ACh case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821190ACh case    3:*/		return 0x821190B0;
		  /* 821190B0h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 821190B0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821190B8;  }
		/* 821190B0h case    4:*/		return 0x821190B4;
		  /* 821190B4h */ case    5:  		/* li R11, 0 */
		/* 821190B4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821190B4h case    5:*/		return 0x821190B8;
	}
	return 0x821190B8;
} // Block from 821190A0h-821190B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821190B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821190B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821190B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821190B8);
		  /* 821190B8h */ case    0:  		/* stw R11, <#[R4 + 8]> */
		/* 821190B8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821190B8h case    0:*/		return 0x821190BC;
	}
	return 0x821190BC;
} // Block from 821190B8h-821190BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821190BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821190BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821190BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821190BC);
		  /* 821190BCh */ case    0:  		/* li R3, 0 */
		/* 821190BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821190BCh case    0:*/		return 0x821190C0;
		  /* 821190C0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821190C0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821190C0h case    1:*/		return 0x821190C4;
	}
	return 0x821190C4;
} // Block from 821190BCh-821190C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821190C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821190C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821190C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821190C4);
		  /* 821190C4h */ case    0:  		/* nop */
		/* 821190C4h case    0:*/		cpu::op::nop();
		/* 821190C4h case    0:*/		return 0x821190C8;
	}
	return 0x821190C8;
} // Block from 821190C4h-821190C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821190C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821190C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821190C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821190C8);
		  /* 821190C8h */ case    0:  		/* mfspr R12, LR */
		/* 821190C8h case    0:*/		regs.R12 = regs.LR;
		/* 821190C8h case    0:*/		return 0x821190CC;
		  /* 821190CCh */ case    1:  		/* bl -556656 */
		/* 821190CCh case    1:*/		regs.LR = 0x821190D0; return 0x8209125C;
		/* 821190CCh case    1:*/		return 0x821190D0;
		  /* 821190D0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821190D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821190D0h case    2:*/		return 0x821190D4;
		  /* 821190D4h */ case    3:  		/* mr R30, R3 */
		/* 821190D4h case    3:*/		regs.R30 = regs.R3;
		/* 821190D4h case    3:*/		return 0x821190D8;
		  /* 821190D8h */ case    4:  		/* li R3, 52 */
		/* 821190D8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821190D8h case    4:*/		return 0x821190DC;
		  /* 821190DCh */ case    5:  		/* mr R29, R4 */
		/* 821190DCh case    5:*/		regs.R29 = regs.R4;
		/* 821190DCh case    5:*/		return 0x821190E0;
		  /* 821190E0h */ case    6:  		/* bl -327352 */
		/* 821190E0h case    6:*/		regs.LR = 0x821190E4; return 0x820C9228;
		/* 821190E0h case    6:*/		return 0x821190E4;
		  /* 821190E4h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 821190E4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821190E4h case    7:*/		return 0x821190E8;
		  /* 821190E8h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821190E8h case    8:*/		if ( regs.CR[0].eq ) { return 0x821190F8;  }
		/* 821190E8h case    8:*/		return 0x821190EC;
		  /* 821190ECh */ case    9:  		/* bl -317116 */
		/* 821190ECh case    9:*/		regs.LR = 0x821190F0; return 0x820CBA30;
		/* 821190ECh case    9:*/		return 0x821190F0;
		  /* 821190F0h */ case   10:  		/* mr R31, R3 */
		/* 821190F0h case   10:*/		regs.R31 = regs.R3;
		/* 821190F0h case   10:*/		return 0x821190F4;
		  /* 821190F4h */ case   11:  		/* b 8 */
		/* 821190F4h case   11:*/		return 0x821190FC;
		/* 821190F4h case   11:*/		return 0x821190F8;
	}
	return 0x821190F8;
} // Block from 821190C8h-821190F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821190F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821190F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821190F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821190F8);
		  /* 821190F8h */ case    0:  		/* li R31, 0 */
		/* 821190F8h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821190F8h case    0:*/		return 0x821190FC;
	}
	return 0x821190FC;
} // Block from 821190F8h-821190FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821190FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821190FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821190FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821190FC);
		  /* 821190FCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821190FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821190FCh case    0:*/		return 0x82119100;
		  /* 82119100h */ case    1:  		/* bc 12, CR6_EQ, 124 */
		/* 82119100h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211917C;  }
		/* 82119100h case    1:*/		return 0x82119104;
		  /* 82119104h */ case    2:  		/* li R11, 0 */
		/* 82119104h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82119104h case    2:*/		return 0x82119108;
		  /* 82119108h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 82119108h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82119108h case    3:*/		return 0x8211910C;
		  /* 8211910Ch */ case    4:  		/* stw R11, <#[R31 + 16]> */
		/* 8211910Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211910Ch case    4:*/		return 0x82119110;
		  /* 82119110h */ case    5:  		/* lwz R11, <#[R30 + 120]> */
		/* 82119110h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 82119110h case    5:*/		return 0x82119114;
		  /* 82119114h */ case    6:  		/* stw R11, <#[R31 + 48]> */
		/* 82119114h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82119114h case    6:*/		return 0x82119118;
		  /* 82119118h */ case    7:  		/* lwz R11, <#[R30 + 120]> */
		/* 82119118h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 82119118h case    7:*/		return 0x8211911C;
		  /* 8211911Ch */ case    8:  		/* addi R11, R11, 1 */
		/* 8211911Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211911Ch case    8:*/		return 0x82119120;
		  /* 82119120h */ case    9:  		/* stw R11, <#[R30 + 120]> */
		/* 82119120h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 82119120h case    9:*/		return 0x82119124;
		  /* 82119124h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 82119124h case   10:*/		if ( regs.CR[6].eq ) { return 0x82119148;  }
		/* 82119124h case   10:*/		return 0x82119128;
		  /* 82119128h */ case   11:  		/* lwz R11, <#[R29]> */
		/* 82119128h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82119128h case   11:*/		return 0x8211912C;
		  /* 8211912Ch */ case   12:  		/* mr R3, R29 */
		/* 8211912Ch case   12:*/		regs.R3 = regs.R29;
		/* 8211912Ch case   12:*/		return 0x82119130;
		  /* 82119130h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 82119130h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82119130h case   13:*/		return 0x82119134;
		  /* 82119134h */ case   14:  		/* mtspr CTR, R11 */
		/* 82119134h case   14:*/		regs.CTR = regs.R11;
		/* 82119134h case   14:*/		return 0x82119138;
		  /* 82119138h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82119138h case   15:*/		if ( 1 ) { regs.LR = 0x8211913C; return (uint32)regs.CTR; }
		/* 82119138h case   15:*/		return 0x8211913C;
		  /* 8211913Ch */ case   16:  		/* stw R3, <#[R31 + 20]> */
		/* 8211913Ch case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8211913Ch case   16:*/		return 0x82119140;
		  /* 82119140h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 82119140h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119140h case   17:*/		return 0x82119144;
		  /* 82119144h */ case   18:  		/* bc 12, CR0_EQ, 56 */
		/* 82119144h case   18:*/		if ( regs.CR[0].eq ) { return 0x8211917C;  }
		/* 82119144h case   18:*/		return 0x82119148;
	}
	return 0x82119148;
} // Block from 821190FCh-82119148h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82119148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119148);
		  /* 82119148h */ case    0:  		/* li R3, 20 */
		/* 82119148h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82119148h case    0:*/		return 0x8211914C;
		  /* 8211914Ch */ case    1:  		/* bl -327460 */
		/* 8211914Ch case    1:*/		regs.LR = 0x82119150; return 0x820C9228;
		/* 8211914Ch case    1:*/		return 0x82119150;
		  /* 82119150h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82119150h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119150h case    2:*/		return 0x82119154;
		  /* 82119154h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 82119154h case    3:*/		if ( regs.CR[0].eq ) { return 0x82119170;  }
		/* 82119154h case    3:*/		return 0x82119158;
		  /* 82119158h */ case    4:  		/* lis R11, -32255 */
		/* 82119158h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119158h case    4:*/		return 0x8211915C;
		  /* 8211915Ch */ case    5:  		/* li R5, 0 */
		/* 8211915Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211915Ch case    5:*/		return 0x82119160;
		  /* 82119160h */ case    6:  		/* addi R6, R11, 9252 */
		/* 82119160h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82119160h case    6:*/		return 0x82119164;
		  /* 82119164h */ case    7:  		/* mr R4, R31 */
		/* 82119164h case    7:*/		regs.R4 = regs.R31;
		/* 82119164h case    7:*/		return 0x82119168;
		  /* 82119168h */ case    8:  		/* bl -327032 */
		/* 82119168h case    8:*/		regs.LR = 0x8211916C; return 0x820C93F0;
		/* 82119168h case    8:*/		return 0x8211916C;
		  /* 8211916Ch */ case    9:  		/* b 8 */
		/* 8211916Ch case    9:*/		return 0x82119174;
		/* 8211916Ch case    9:*/		return 0x82119170;
	}
	return 0x82119170;
} // Block from 82119148h-82119170h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82119170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119170);
		  /* 82119170h */ case    0:  		/* li R3, 0 */
		/* 82119170h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119170h case    0:*/		return 0x82119174;
	}
	return 0x82119174;
} // Block from 82119170h-82119174h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119174);
		  /* 82119174h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119174h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119174h case    0:*/		return 0x82119178;
		  /* 82119178h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82119178h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119180;  }
		/* 82119178h case    1:*/		return 0x8211917C;
	}
	return 0x8211917C;
} // Block from 82119174h-8211917Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211917Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211917C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211917C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211917C);
		  /* 8211917Ch */ case    0:  		/* li R3, 0 */
		/* 8211917Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211917Ch case    0:*/		return 0x82119180;
	}
	return 0x82119180;
} // Block from 8211917Ch-82119180h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119180);
		  /* 82119180h */ case    0:  		/* addi R1, R1, 112 */
		/* 82119180h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82119180h case    0:*/		return 0x82119184;
		  /* 82119184h */ case    1:  		/* b -556760 */
		/* 82119184h case    1:*/		return 0x820912AC;
		/* 82119184h case    1:*/		return 0x82119188;
	}
	return 0x82119188;
} // Block from 82119180h-82119188h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119188);
		  /* 82119188h */ case    0:  		/* mfspr R12, LR */
		/* 82119188h case    0:*/		regs.R12 = regs.LR;
		/* 82119188h case    0:*/		return 0x8211918C;
		  /* 8211918Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211918Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211918Ch case    1:*/		return 0x82119190;
		  /* 82119190h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82119190h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119190h case    2:*/		return 0x82119194;
		  /* 82119194h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82119194h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82119194h case    3:*/		return 0x82119198;
		  /* 82119198h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82119198h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82119198h case    4:*/		return 0x8211919C;
		  /* 8211919Ch */ case    5:  		/* lwz R11, <#[R3 + 128]> */
		/* 8211919Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8211919Ch case    5:*/		return 0x821191A0;
		  /* 821191A0h */ case    6:  		/* li R10, 1 */
		/* 821191A0h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821191A0h case    6:*/		return 0x821191A4;
		  /* 821191A4h */ case    7:  		/* mr R31, R3 */
		/* 821191A4h case    7:*/		regs.R31 = regs.R3;
		/* 821191A4h case    7:*/		return 0x821191A8;
		  /* 821191A8h */ case    8:  		/* stw R10, <#[R11 + 28]> */
		/* 821191A8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821191A8h case    8:*/		return 0x821191AC;
		  /* 821191ACh */ case    9:  		/* lwz R11, <#[R3 + 32]> */
		/* 821191ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821191ACh case    9:*/		return 0x821191B0;
		  /* 821191B0h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821191B0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821191B0h case   10:*/		return 0x821191B4;
		  /* 821191B4h */ case   11:  		/* bc 12, CR6_EQ, 188 */
		/* 821191B4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82119270;  }
		/* 821191B4h case   11:*/		return 0x821191B8;
		  /* 821191B8h */ case   12:  		/* li R3, 52 */
		/* 821191B8h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821191B8h case   12:*/		return 0x821191BC;
		  /* 821191BCh */ case   13:  		/* bl -327572 */
		/* 821191BCh case   13:*/		regs.LR = 0x821191C0; return 0x820C9228;
		/* 821191BCh case   13:*/		return 0x821191C0;
		  /* 821191C0h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 821191C0h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821191C0h case   14:*/		return 0x821191C4;
		  /* 821191C4h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821191C4h case   15:*/		if ( regs.CR[0].eq ) { return 0x821191D4;  }
		/* 821191C4h case   15:*/		return 0x821191C8;
		  /* 821191C8h */ case   16:  		/* bl -317336 */
		/* 821191C8h case   16:*/		regs.LR = 0x821191CC; return 0x820CBA30;
		/* 821191C8h case   16:*/		return 0x821191CC;
		  /* 821191CCh */ case   17:  		/* mr R30, R3 */
		/* 821191CCh case   17:*/		regs.R30 = regs.R3;
		/* 821191CCh case   17:*/		return 0x821191D0;
		  /* 821191D0h */ case   18:  		/* b 8 */
		/* 821191D0h case   18:*/		return 0x821191D8;
		/* 821191D0h case   18:*/		return 0x821191D4;
	}
	return 0x821191D4;
} // Block from 82119188h-821191D4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821191D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821191D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821191D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821191D4);
		  /* 821191D4h */ case    0:  		/* li R30, 0 */
		/* 821191D4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821191D4h case    0:*/		return 0x821191D8;
	}
	return 0x821191D8;
} // Block from 821191D4h-821191D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821191D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821191D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821191D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821191D8);
		  /* 821191D8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821191D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821191D8h case    0:*/		return 0x821191DC;
		  /* 821191DCh */ case    1:  		/* bc 12, CR6_EQ, 148 */
		/* 821191DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82119270;  }
		/* 821191DCh case    1:*/		return 0x821191E0;
		  /* 821191E0h */ case    2:  		/* li R11, 10 */
		/* 821191E0h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 821191E0h case    2:*/		return 0x821191E4;
		  /* 821191E4h */ case    3:  		/* li R3, 88 */
		/* 821191E4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 821191E4h case    3:*/		return 0x821191E8;
		  /* 821191E8h */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 821191E8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821191E8h case    4:*/		return 0x821191EC;
		  /* 821191ECh */ case    5:  		/* lwz R11, <#[R31 + 120]> */
		/* 821191ECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821191ECh case    5:*/		return 0x821191F0;
		  /* 821191F0h */ case    6:  		/* stw R11, <#[R30 + 48]> */
		/* 821191F0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821191F0h case    6:*/		return 0x821191F4;
		  /* 821191F4h */ case    7:  		/* lwz R11, <#[R31 + 120]> */
		/* 821191F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821191F4h case    7:*/		return 0x821191F8;
	}
	return 0x821191F8;
} // Block from 821191D8h-821191F8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821191F8h
// Function '?EvalType@CParse@D3DXShader@@IAAIPAVCNode@2@PAU_D3DVALUE@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821191F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821191F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821191F8);
		  /* 821191F8h */ case    0:  		/* addi R11, R11, 1 */
		/* 821191F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821191F8h case    0:*/		return 0x821191FC;
		  /* 821191FCh */ case    1:  		/* stw R11, <#[R31 + 120]> */
		/* 821191FCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821191FCh case    1:*/		return 0x82119200;
		  /* 82119200h */ case    2:  		/* bl -327640 */
		/* 82119200h case    2:*/		regs.LR = 0x82119204; return 0x820C9228;
		/* 82119200h case    2:*/		return 0x82119204;
		  /* 82119204h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82119204h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119204h case    3:*/		return 0x82119208;
		  /* 82119208h */ case    4:  		/* bc 12, CR0_EQ, 36 */
		/* 82119208h case    4:*/		if ( regs.CR[0].eq ) { return 0x8211922C;  }
		/* 82119208h case    4:*/		return 0x8211920C;
		  /* 8211920Ch */ case    5:  		/* addi R9, R31, 40 */
		/* 8211920Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x28);
		/* 8211920Ch case    5:*/		return 0x82119210;
		  /* 82119210h */ case    6:  		/* li R8, 1 */
		/* 82119210h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82119210h case    6:*/		return 0x82119214;
		  /* 82119214h */ case    7:  		/* li R7, 0 */
		/* 82119214h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82119214h case    7:*/		return 0x82119218;
		  /* 82119218h */ case    8:  		/* li R6, 0 */
		/* 82119218h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82119218h case    8:*/		return 0x8211921C;
		  /* 8211921Ch */ case    9:  		/* li R5, 0 */
		/* 8211921Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211921Ch case    9:*/		return 0x82119220;
		  /* 82119220h */ case   10:  		/* li R4, 0 */
		/* 82119220h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119220h case   10:*/		return 0x82119224;
		  /* 82119224h */ case   11:  		/* bl -316060 */
		/* 82119224h case   11:*/		regs.LR = 0x82119228; return 0x820CBF88;
		/* 82119224h case   11:*/		return 0x82119228;
		  /* 82119228h */ case   12:  		/* b 8 */
		/* 82119228h case   12:*/		return 0x82119230;
		/* 82119228h case   12:*/		return 0x8211922C;
	}
	return 0x8211922C;
} // Block from 821191F8h-8211922Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211922Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211922C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211922C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211922C);
		  /* 8211922Ch */ case    0:  		/* li R3, 0 */
		/* 8211922Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211922Ch case    0:*/		return 0x82119230;
	}
	return 0x82119230;
} // Block from 8211922Ch-82119230h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119230);
		  /* 82119230h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119230h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119230h case    0:*/		return 0x82119234;
		  /* 82119234h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 82119234h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119270;  }
		/* 82119234h case    1:*/		return 0x82119238;
		  /* 82119238h */ case    2:  		/* stw R3, <#[R30 + 24]> */
		/* 82119238h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 82119238h case    2:*/		return 0x8211923C;
		  /* 8211923Ch */ case    3:  		/* li R3, 20 */
		/* 8211923Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211923Ch case    3:*/		return 0x82119240;
		  /* 82119240h */ case    4:  		/* bl -327704 */
		/* 82119240h case    4:*/		regs.LR = 0x82119244; return 0x820C9228;
		/* 82119240h case    4:*/		return 0x82119244;
		  /* 82119244h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82119244h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119244h case    5:*/		return 0x82119248;
		  /* 82119248h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82119248h case    6:*/		if ( regs.CR[0].eq ) { return 0x82119264;  }
		/* 82119248h case    6:*/		return 0x8211924C;
		  /* 8211924Ch */ case    7:  		/* lis R11, -32255 */
		/* 8211924Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211924Ch case    7:*/		return 0x82119250;
		  /* 82119250h */ case    8:  		/* li R5, 0 */
		/* 82119250h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119250h case    8:*/		return 0x82119254;
		  /* 82119254h */ case    9:  		/* addi R6, R11, 9252 */
		/* 82119254h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82119254h case    9:*/		return 0x82119258;
		  /* 82119258h */ case   10:  		/* mr R4, R30 */
		/* 82119258h case   10:*/		regs.R4 = regs.R30;
		/* 82119258h case   10:*/		return 0x8211925C;
		  /* 8211925Ch */ case   11:  		/* bl -327276 */
		/* 8211925Ch case   11:*/		regs.LR = 0x82119260; return 0x820C93F0;
		/* 8211925Ch case   11:*/		return 0x82119260;
		  /* 82119260h */ case   12:  		/* b 8 */
		/* 82119260h case   12:*/		return 0x82119268;
		/* 82119260h case   12:*/		return 0x82119264;
	}
	return 0x82119264;
} // Block from 82119230h-82119264h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82119264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119264);
		  /* 82119264h */ case    0:  		/* li R3, 0 */
		/* 82119264h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119264h case    0:*/		return 0x82119268;
	}
	return 0x82119268;
} // Block from 82119264h-82119268h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119268);
		  /* 82119268h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119268h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119268h case    0:*/		return 0x8211926C;
		  /* 8211926Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8211926Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119274;  }
		/* 8211926Ch case    1:*/		return 0x82119270;
	}
	return 0x82119270;
} // Block from 82119268h-82119270h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119270);
		  /* 82119270h */ case    0:  		/* li R3, 0 */
		/* 82119270h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119270h case    0:*/		return 0x82119274;
	}
	return 0x82119274;
} // Block from 82119270h-82119274h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119274);
		  /* 82119274h */ case    0:  		/* addi R1, R1, 112 */
		/* 82119274h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82119274h case    0:*/		return 0x82119278;
		  /* 82119278h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82119278h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119278h case    1:*/		return 0x8211927C;
		  /* 8211927Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8211927Ch case    2:*/		regs.LR = regs.R12;
		/* 8211927Ch case    2:*/		return 0x82119280;
		  /* 82119280h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82119280h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119280h case    3:*/		return 0x82119284;
		  /* 82119284h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82119284h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82119284h case    4:*/		return 0x82119288;
		  /* 82119288h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82119288h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119288h case    5:*/		return 0x8211928C;
	}
	return 0x8211928C;
} // Block from 82119274h-8211928Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211928Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211928C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211928C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211928C);
		  /* 8211928Ch */ case    0:  		/* nop */
		/* 8211928Ch case    0:*/		cpu::op::nop();
		/* 8211928Ch case    0:*/		return 0x82119290;
	}
	return 0x82119290;
} // Block from 8211928Ch-82119290h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119290);
		  /* 82119290h */ case    0:  		/* mfspr R12, LR */
		/* 82119290h case    0:*/		regs.R12 = regs.LR;
		/* 82119290h case    0:*/		return 0x82119294;
		  /* 82119294h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82119294h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119294h case    1:*/		return 0x82119298;
		  /* 82119298h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82119298h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119298h case    2:*/		return 0x8211929C;
		  /* 8211929Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8211929Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211929Ch case    3:*/		return 0x821192A0;
		  /* 821192A0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821192A0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821192A0h case    4:*/		return 0x821192A4;
		  /* 821192A4h */ case    5:  		/* lwz R11, <#[R3 + 128]> */
		/* 821192A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 821192A4h case    5:*/		return 0x821192A8;
		  /* 821192A8h */ case    6:  		/* li R10, 1 */
		/* 821192A8h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821192A8h case    6:*/		return 0x821192AC;
		  /* 821192ACh */ case    7:  		/* mr R31, R3 */
		/* 821192ACh case    7:*/		regs.R31 = regs.R3;
		/* 821192ACh case    7:*/		return 0x821192B0;
		  /* 821192B0h */ case    8:  		/* stw R10, <#[R11 + 28]> */
		/* 821192B0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821192B0h case    8:*/		return 0x821192B4;
		  /* 821192B4h */ case    9:  		/* lwz R11, <#[R3 + 32]> */
		/* 821192B4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821192B4h case    9:*/		return 0x821192B8;
		  /* 821192B8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821192B8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821192B8h case   10:*/		return 0x821192BC;
		  /* 821192BCh */ case   11:  		/* bc 12, CR6_EQ, 188 */
		/* 821192BCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82119378;  }
		/* 821192BCh case   11:*/		return 0x821192C0;
		  /* 821192C0h */ case   12:  		/* li R3, 52 */
		/* 821192C0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821192C0h case   12:*/		return 0x821192C4;
		  /* 821192C4h */ case   13:  		/* bl -327836 */
		/* 821192C4h case   13:*/		regs.LR = 0x821192C8; return 0x820C9228;
		/* 821192C4h case   13:*/		return 0x821192C8;
		  /* 821192C8h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 821192C8h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821192C8h case   14:*/		return 0x821192CC;
		  /* 821192CCh */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821192CCh case   15:*/		if ( regs.CR[0].eq ) { return 0x821192DC;  }
		/* 821192CCh case   15:*/		return 0x821192D0;
		  /* 821192D0h */ case   16:  		/* bl -317600 */
		/* 821192D0h case   16:*/		regs.LR = 0x821192D4; return 0x820CBA30;
		/* 821192D0h case   16:*/		return 0x821192D4;
		  /* 821192D4h */ case   17:  		/* mr R30, R3 */
		/* 821192D4h case   17:*/		regs.R30 = regs.R3;
		/* 821192D4h case   17:*/		return 0x821192D8;
		  /* 821192D8h */ case   18:  		/* b 8 */
		/* 821192D8h case   18:*/		return 0x821192E0;
		/* 821192D8h case   18:*/		return 0x821192DC;
	}
	return 0x821192DC;
} // Block from 82119290h-821192DCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821192DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821192DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821192DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821192DC);
		  /* 821192DCh */ case    0:  		/* li R30, 0 */
		/* 821192DCh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821192DCh case    0:*/		return 0x821192E0;
	}
	return 0x821192E0;
} // Block from 821192DCh-821192E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821192E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821192E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821192E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821192E0);
		  /* 821192E0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821192E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821192E0h case    0:*/		return 0x821192E4;
		  /* 821192E4h */ case    1:  		/* bc 12, CR6_EQ, 148 */
		/* 821192E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119378;  }
		/* 821192E4h case    1:*/		return 0x821192E8;
		  /* 821192E8h */ case    2:  		/* li R11, 11 */
		/* 821192E8h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 821192E8h case    2:*/		return 0x821192EC;
		  /* 821192ECh */ case    3:  		/* li R3, 88 */
		/* 821192ECh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 821192ECh case    3:*/		return 0x821192F0;
		  /* 821192F0h */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 821192F0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821192F0h case    4:*/		return 0x821192F4;
		  /* 821192F4h */ case    5:  		/* lwz R11, <#[R31 + 120]> */
		/* 821192F4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821192F4h case    5:*/		return 0x821192F8;
		  /* 821192F8h */ case    6:  		/* stw R11, <#[R30 + 48]> */
		/* 821192F8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821192F8h case    6:*/		return 0x821192FC;
		  /* 821192FCh */ case    7:  		/* lwz R11, <#[R31 + 120]> */
		/* 821192FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821192FCh case    7:*/		return 0x82119300;
		  /* 82119300h */ case    8:  		/* addi R11, R11, 1 */
		/* 82119300h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82119300h case    8:*/		return 0x82119304;
		  /* 82119304h */ case    9:  		/* stw R11, <#[R31 + 120]> */
		/* 82119304h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82119304h case    9:*/		return 0x82119308;
		  /* 82119308h */ case   10:  		/* bl -327904 */
		/* 82119308h case   10:*/		regs.LR = 0x8211930C; return 0x820C9228;
		/* 82119308h case   10:*/		return 0x8211930C;
		  /* 8211930Ch */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8211930Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211930Ch case   11:*/		return 0x82119310;
		  /* 82119310h */ case   12:  		/* bc 12, CR0_EQ, 36 */
		/* 82119310h case   12:*/		if ( regs.CR[0].eq ) { return 0x82119334;  }
		/* 82119310h case   12:*/		return 0x82119314;
		  /* 82119314h */ case   13:  		/* addi R9, R31, 40 */
		/* 82119314h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x28);
		/* 82119314h case   13:*/		return 0x82119318;
		  /* 82119318h */ case   14:  		/* li R8, 1 */
		/* 82119318h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82119318h case   14:*/		return 0x8211931C;
		  /* 8211931Ch */ case   15:  		/* li R7, 0 */
		/* 8211931Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211931Ch case   15:*/		return 0x82119320;
		  /* 82119320h */ case   16:  		/* li R6, 0 */
		/* 82119320h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82119320h case   16:*/		return 0x82119324;
		  /* 82119324h */ case   17:  		/* li R5, 0 */
		/* 82119324h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119324h case   17:*/		return 0x82119328;
		  /* 82119328h */ case   18:  		/* li R4, 0 */
		/* 82119328h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119328h case   18:*/		return 0x8211932C;
		  /* 8211932Ch */ case   19:  		/* bl -316324 */
		/* 8211932Ch case   19:*/		regs.LR = 0x82119330; return 0x820CBF88;
		/* 8211932Ch case   19:*/		return 0x82119330;
		  /* 82119330h */ case   20:  		/* b 8 */
		/* 82119330h case   20:*/		return 0x82119338;
		/* 82119330h case   20:*/		return 0x82119334;
	}
	return 0x82119334;
} // Block from 821192E0h-82119334h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82119334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119334);
		  /* 82119334h */ case    0:  		/* li R3, 0 */
		/* 82119334h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119334h case    0:*/		return 0x82119338;
	}
	return 0x82119338;
} // Block from 82119334h-82119338h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119338);
		  /* 82119338h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119338h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119338h case    0:*/		return 0x8211933C;
		  /* 8211933Ch */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 8211933Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82119378;  }
		/* 8211933Ch case    1:*/		return 0x82119340;
		  /* 82119340h */ case    2:  		/* stw R3, <#[R30 + 24]> */
		/* 82119340h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 82119340h case    2:*/		return 0x82119344;
		  /* 82119344h */ case    3:  		/* li R3, 20 */
		/* 82119344h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82119344h case    3:*/		return 0x82119348;
		  /* 82119348h */ case    4:  		/* bl -327968 */
		/* 82119348h case    4:*/		regs.LR = 0x8211934C; return 0x820C9228;
		/* 82119348h case    4:*/		return 0x8211934C;
		  /* 8211934Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211934Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211934Ch case    5:*/		return 0x82119350;
		  /* 82119350h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82119350h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211936C;  }
		/* 82119350h case    6:*/		return 0x82119354;
		  /* 82119354h */ case    7:  		/* lis R11, -32255 */
		/* 82119354h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119354h case    7:*/		return 0x82119358;
		  /* 82119358h */ case    8:  		/* li R5, 0 */
		/* 82119358h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119358h case    8:*/		return 0x8211935C;
		  /* 8211935Ch */ case    9:  		/* addi R6, R11, 9252 */
		/* 8211935Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 8211935Ch case    9:*/		return 0x82119360;
		  /* 82119360h */ case   10:  		/* mr R4, R30 */
		/* 82119360h case   10:*/		regs.R4 = regs.R30;
		/* 82119360h case   10:*/		return 0x82119364;
		  /* 82119364h */ case   11:  		/* bl -327540 */
		/* 82119364h case   11:*/		regs.LR = 0x82119368; return 0x820C93F0;
		/* 82119364h case   11:*/		return 0x82119368;
		  /* 82119368h */ case   12:  		/* b 8 */
		/* 82119368h case   12:*/		return 0x82119370;
		/* 82119368h case   12:*/		return 0x8211936C;
	}
	return 0x8211936C;
} // Block from 82119338h-8211936Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211936Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211936C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211936C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211936C);
		  /* 8211936Ch */ case    0:  		/* li R3, 0 */
		/* 8211936Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211936Ch case    0:*/		return 0x82119370;
	}
	return 0x82119370;
} // Block from 8211936Ch-82119370h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119370);
		  /* 82119370h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119370h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119370h case    0:*/		return 0x82119374;
		  /* 82119374h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82119374h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211937C;  }
		/* 82119374h case    1:*/		return 0x82119378;
	}
	return 0x82119378;
} // Block from 82119370h-82119378h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119378);
		  /* 82119378h */ case    0:  		/* li R3, 0 */
		/* 82119378h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119378h case    0:*/		return 0x8211937C;
	}
	return 0x8211937C;
} // Block from 82119378h-8211937Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211937Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211937C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211937C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211937C);
		  /* 8211937Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8211937Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8211937Ch case    0:*/		return 0x82119380;
		  /* 82119380h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82119380h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119380h case    1:*/		return 0x82119384;
		  /* 82119384h */ case    2:  		/* mtspr LR, R12 */
		/* 82119384h case    2:*/		regs.LR = regs.R12;
		/* 82119384h case    2:*/		return 0x82119388;
		  /* 82119388h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82119388h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119388h case    3:*/		return 0x8211938C;
		  /* 8211938Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8211938Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211938Ch case    4:*/		return 0x82119390;
		  /* 82119390h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82119390h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119390h case    5:*/		return 0x82119394;
	}
	return 0x82119394;
} // Block from 8211937Ch-82119394h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82119394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119394);
		  /* 82119394h */ case    0:  		/* nop */
		/* 82119394h case    0:*/		cpu::op::nop();
		/* 82119394h case    0:*/		return 0x82119398;
	}
	return 0x82119398;
} // Block from 82119394h-82119398h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119398h
// Function '?CastToFloat@CParse@D3DXShader@@IAAJPANPAU_D3DVALUE@2@PAUD3DXTOKEN@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119398);
		  /* 82119398h */ case    0:  		/* mfspr R12, LR */
		/* 82119398h case    0:*/		regs.R12 = regs.LR;
		/* 82119398h case    0:*/		return 0x8211939C;
		  /* 8211939Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211939Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211939Ch case    1:*/		return 0x821193A0;
		  /* 821193A0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821193A0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821193A0h case    2:*/		return 0x821193A4;
		  /* 821193A4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821193A4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821193A4h case    3:*/		return 0x821193A8;
		  /* 821193A8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821193A8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821193A8h case    4:*/		return 0x821193AC;
		  /* 821193ACh */ case    5:  		/* lwz R11, <#[R3 + 128]> */
		/* 821193ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 821193ACh case    5:*/		return 0x821193B0;
		  /* 821193B0h */ case    6:  		/* li R10, 1 */
		/* 821193B0h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821193B0h case    6:*/		return 0x821193B4;
		  /* 821193B4h */ case    7:  		/* mr R31, R3 */
		/* 821193B4h case    7:*/		regs.R31 = regs.R3;
		/* 821193B4h case    7:*/		return 0x821193B8;
		  /* 821193B8h */ case    8:  		/* stw R10, <#[R11 + 28]> */
		/* 821193B8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821193B8h case    8:*/		return 0x821193BC;
		  /* 821193BCh */ case    9:  		/* lwz R11, <#[R3 + 32]> */
		/* 821193BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821193BCh case    9:*/		return 0x821193C0;
		  /* 821193C0h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821193C0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821193C0h case   10:*/		return 0x821193C4;
		  /* 821193C4h */ case   11:  		/* bc 12, CR6_EQ, 188 */
		/* 821193C4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82119480;  }
		/* 821193C4h case   11:*/		return 0x821193C8;
		  /* 821193C8h */ case   12:  		/* li R3, 52 */
		/* 821193C8h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821193C8h case   12:*/		return 0x821193CC;
		  /* 821193CCh */ case   13:  		/* bl -328100 */
		/* 821193CCh case   13:*/		regs.LR = 0x821193D0; return 0x820C9228;
		/* 821193CCh case   13:*/		return 0x821193D0;
		  /* 821193D0h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 821193D0h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821193D0h case   14:*/		return 0x821193D4;
		  /* 821193D4h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821193D4h case   15:*/		if ( regs.CR[0].eq ) { return 0x821193E4;  }
		/* 821193D4h case   15:*/		return 0x821193D8;
		  /* 821193D8h */ case   16:  		/* bl -317864 */
		/* 821193D8h case   16:*/		regs.LR = 0x821193DC; return 0x820CBA30;
		/* 821193D8h case   16:*/		return 0x821193DC;
		  /* 821193DCh */ case   17:  		/* mr R30, R3 */
		/* 821193DCh case   17:*/		regs.R30 = regs.R3;
		/* 821193DCh case   17:*/		return 0x821193E0;
		  /* 821193E0h */ case   18:  		/* b 8 */
		/* 821193E0h case   18:*/		return 0x821193E8;
		/* 821193E0h case   18:*/		return 0x821193E4;
	}
	return 0x821193E4;
} // Block from 82119398h-821193E4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821193E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821193E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821193E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821193E4);
		  /* 821193E4h */ case    0:  		/* li R30, 0 */
		/* 821193E4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821193E4h case    0:*/		return 0x821193E8;
	}
	return 0x821193E8;
} // Block from 821193E4h-821193E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821193E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821193E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821193E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821193E8);
		  /* 821193E8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821193E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821193E8h case    0:*/		return 0x821193EC;
		  /* 821193ECh */ case    1:  		/* bc 12, CR6_EQ, 148 */
		/* 821193ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82119480;  }
		/* 821193ECh case    1:*/		return 0x821193F0;
		  /* 821193F0h */ case    2:  		/* li R11, 9 */
		/* 821193F0h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 821193F0h case    2:*/		return 0x821193F4;
		  /* 821193F4h */ case    3:  		/* li R3, 88 */
		/* 821193F4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 821193F4h case    3:*/		return 0x821193F8;
		  /* 821193F8h */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 821193F8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821193F8h case    4:*/		return 0x821193FC;
		  /* 821193FCh */ case    5:  		/* lwz R11, <#[R31 + 120]> */
		/* 821193FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821193FCh case    5:*/		return 0x82119400;
		  /* 82119400h */ case    6:  		/* stw R11, <#[R30 + 48]> */
		/* 82119400h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 82119400h case    6:*/		return 0x82119404;
		  /* 82119404h */ case    7:  		/* lwz R11, <#[R31 + 120]> */
		/* 82119404h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82119404h case    7:*/		return 0x82119408;
		  /* 82119408h */ case    8:  		/* addi R11, R11, 1 */
		/* 82119408h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82119408h case    8:*/		return 0x8211940C;
		  /* 8211940Ch */ case    9:  		/* stw R11, <#[R31 + 120]> */
		/* 8211940Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 8211940Ch case    9:*/		return 0x82119410;
		  /* 82119410h */ case   10:  		/* bl -328168 */
		/* 82119410h case   10:*/		regs.LR = 0x82119414; return 0x820C9228;
		/* 82119410h case   10:*/		return 0x82119414;
		  /* 82119414h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82119414h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119414h case   11:*/		return 0x82119418;
	}
	return 0x82119418;
} // Block from 821193E8h-82119418h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82119418h
// Function '?IsPartiallyLiteral@CParse@D3DXShader@@IAAHPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119418);
		  /* 82119418h */ case    0:  		/* bc 12, CR0_EQ, 36 */
		/* 82119418h case    0:*/		if ( regs.CR[0].eq ) { return 0x8211943C;  }
		/* 82119418h case    0:*/		return 0x8211941C;
		  /* 8211941Ch */ case    1:  		/* addi R9, R31, 40 */
		/* 8211941Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x28);
		/* 8211941Ch case    1:*/		return 0x82119420;
		  /* 82119420h */ case    2:  		/* li R8, 1 */
		/* 82119420h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82119420h case    2:*/		return 0x82119424;
		  /* 82119424h */ case    3:  		/* li R7, 0 */
		/* 82119424h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82119424h case    3:*/		return 0x82119428;
		  /* 82119428h */ case    4:  		/* li R6, 0 */
		/* 82119428h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82119428h case    4:*/		return 0x8211942C;
		  /* 8211942Ch */ case    5:  		/* li R5, 0 */
		/* 8211942Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211942Ch case    5:*/		return 0x82119430;
		  /* 82119430h */ case    6:  		/* li R4, 0 */
		/* 82119430h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119430h case    6:*/		return 0x82119434;
		  /* 82119434h */ case    7:  		/* bl -316588 */
		/* 82119434h case    7:*/		regs.LR = 0x82119438; return 0x820CBF88;
		/* 82119434h case    7:*/		return 0x82119438;
		  /* 82119438h */ case    8:  		/* b 8 */
		/* 82119438h case    8:*/		return 0x82119440;
		/* 82119438h case    8:*/		return 0x8211943C;
	}
	return 0x8211943C;
} // Block from 82119418h-8211943Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211943Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211943C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211943C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211943C);
		  /* 8211943Ch */ case    0:  		/* li R3, 0 */
		/* 8211943Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211943Ch case    0:*/		return 0x82119440;
	}
	return 0x82119440;
} // Block from 8211943Ch-82119440h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119440);
		  /* 82119440h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119440h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119440h case    0:*/		return 0x82119444;
		  /* 82119444h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 82119444h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119480;  }
		/* 82119444h case    1:*/		return 0x82119448;
		  /* 82119448h */ case    2:  		/* stw R3, <#[R30 + 24]> */
		/* 82119448h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 82119448h case    2:*/		return 0x8211944C;
		  /* 8211944Ch */ case    3:  		/* li R3, 20 */
		/* 8211944Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211944Ch case    3:*/		return 0x82119450;
		  /* 82119450h */ case    4:  		/* bl -328232 */
		/* 82119450h case    4:*/		regs.LR = 0x82119454; return 0x820C9228;
		/* 82119450h case    4:*/		return 0x82119454;
		  /* 82119454h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82119454h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119454h case    5:*/		return 0x82119458;
		  /* 82119458h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82119458h case    6:*/		if ( regs.CR[0].eq ) { return 0x82119474;  }
		/* 82119458h case    6:*/		return 0x8211945C;
		  /* 8211945Ch */ case    7:  		/* lis R11, -32255 */
		/* 8211945Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211945Ch case    7:*/		return 0x82119460;
		  /* 82119460h */ case    8:  		/* li R5, 0 */
		/* 82119460h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119460h case    8:*/		return 0x82119464;
		  /* 82119464h */ case    9:  		/* addi R6, R11, 9252 */
		/* 82119464h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82119464h case    9:*/		return 0x82119468;
		  /* 82119468h */ case   10:  		/* mr R4, R30 */
		/* 82119468h case   10:*/		regs.R4 = regs.R30;
		/* 82119468h case   10:*/		return 0x8211946C;
		  /* 8211946Ch */ case   11:  		/* bl -327804 */
		/* 8211946Ch case   11:*/		regs.LR = 0x82119470; return 0x820C93F0;
		/* 8211946Ch case   11:*/		return 0x82119470;
		  /* 82119470h */ case   12:  		/* b 8 */
		/* 82119470h case   12:*/		return 0x82119478;
		/* 82119470h case   12:*/		return 0x82119474;
	}
	return 0x82119474;
} // Block from 82119440h-82119474h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82119474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119474);
		  /* 82119474h */ case    0:  		/* li R3, 0 */
		/* 82119474h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119474h case    0:*/		return 0x82119478;
	}
	return 0x82119478;
} // Block from 82119474h-82119478h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119478);
		  /* 82119478h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119478h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119478h case    0:*/		return 0x8211947C;
		  /* 8211947Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8211947Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119484;  }
		/* 8211947Ch case    1:*/		return 0x82119480;
	}
	return 0x82119480;
} // Block from 82119478h-82119480h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119480);
		  /* 82119480h */ case    0:  		/* li R3, 0 */
		/* 82119480h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119480h case    0:*/		return 0x82119484;
	}
	return 0x82119484;
} // Block from 82119480h-82119484h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119484);
		  /* 82119484h */ case    0:  		/* addi R1, R1, 112 */
		/* 82119484h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82119484h case    0:*/		return 0x82119488;
		  /* 82119488h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82119488h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119488h case    1:*/		return 0x8211948C;
		  /* 8211948Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8211948Ch case    2:*/		regs.LR = regs.R12;
		/* 8211948Ch case    2:*/		return 0x82119490;
		  /* 82119490h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82119490h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119490h case    3:*/		return 0x82119494;
		  /* 82119494h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82119494h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82119494h case    4:*/		return 0x82119498;
		  /* 82119498h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82119498h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119498h case    5:*/		return 0x8211949C;
	}
	return 0x8211949C;
} // Block from 82119484h-8211949Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211949Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211949C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211949C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211949C);
		  /* 8211949Ch */ case    0:  		/* nop */
		/* 8211949Ch case    0:*/		cpu::op::nop();
		/* 8211949Ch case    0:*/		return 0x821194A0;
	}
	return 0x821194A0;
} // Block from 8211949Ch-821194A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821194A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821194A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821194A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821194A0);
		  /* 821194A0h */ case    0:  		/* mfspr R12, LR */
		/* 821194A0h case    0:*/		regs.R12 = regs.LR;
		/* 821194A0h case    0:*/		return 0x821194A4;
		  /* 821194A4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821194A4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821194A4h case    1:*/		return 0x821194A8;
		  /* 821194A8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821194A8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821194A8h case    2:*/		return 0x821194AC;
		  /* 821194ACh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821194ACh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821194ACh case    3:*/		return 0x821194B0;
		  /* 821194B0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821194B0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821194B0h case    4:*/		return 0x821194B4;
		  /* 821194B4h */ case    5:  		/* lwz R11, <#[R3 + 32]> */
		/* 821194B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821194B4h case    5:*/		return 0x821194B8;
		  /* 821194B8h */ case    6:  		/* mr R31, R3 */
		/* 821194B8h case    6:*/		regs.R31 = regs.R3;
		/* 821194B8h case    6:*/		return 0x821194BC;
		  /* 821194BCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821194BCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821194BCh case    7:*/		return 0x821194C0;
		  /* 821194C0h */ case    8:  		/* bc 12, CR6_EQ, 188 */
		/* 821194C0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211957C;  }
		/* 821194C0h case    8:*/		return 0x821194C4;
		  /* 821194C4h */ case    9:  		/* li R3, 52 */
		/* 821194C4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821194C4h case    9:*/		return 0x821194C8;
		  /* 821194C8h */ case   10:  		/* bl -328352 */
		/* 821194C8h case   10:*/		regs.LR = 0x821194CC; return 0x820C9228;
		/* 821194C8h case   10:*/		return 0x821194CC;
		  /* 821194CCh */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 821194CCh case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821194CCh case   11:*/		return 0x821194D0;
		  /* 821194D0h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821194D0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821194E0;  }
		/* 821194D0h case   12:*/		return 0x821194D4;
		  /* 821194D4h */ case   13:  		/* bl -318116 */
		/* 821194D4h case   13:*/		regs.LR = 0x821194D8; return 0x820CBA30;
		/* 821194D4h case   13:*/		return 0x821194D8;
		  /* 821194D8h */ case   14:  		/* mr R30, R3 */
		/* 821194D8h case   14:*/		regs.R30 = regs.R3;
		/* 821194D8h case   14:*/		return 0x821194DC;
		  /* 821194DCh */ case   15:  		/* b 8 */
		/* 821194DCh case   15:*/		return 0x821194E4;
		/* 821194DCh case   15:*/		return 0x821194E0;
	}
	return 0x821194E0;
} // Block from 821194A0h-821194E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821194E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821194E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821194E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821194E0);
		  /* 821194E0h */ case    0:  		/* li R30, 0 */
		/* 821194E0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821194E0h case    0:*/		return 0x821194E4;
	}
	return 0x821194E4;
} // Block from 821194E0h-821194E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821194E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821194E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821194E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821194E4);
		  /* 821194E4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821194E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821194E4h case    0:*/		return 0x821194E8;
		  /* 821194E8h */ case    1:  		/* bc 12, CR6_EQ, 148 */
		/* 821194E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211957C;  }
		/* 821194E8h case    1:*/		return 0x821194EC;
		  /* 821194ECh */ case    2:  		/* li R11, 6 */
		/* 821194ECh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 821194ECh case    2:*/		return 0x821194F0;
		  /* 821194F0h */ case    3:  		/* li R3, 88 */
		/* 821194F0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 821194F0h case    3:*/		return 0x821194F4;
		  /* 821194F4h */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 821194F4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821194F4h case    4:*/		return 0x821194F8;
	}
	return 0x821194F8;
} // Block from 821194E4h-821194F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821194F8h
// Function '?IsFullyLiteral@CParse@D3DXShader@@IAAHPAVCNode@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821194F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821194F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821194F8);
		  /* 821194F8h */ case    0:  		/* lwz R11, <#[R31 + 120]> */
		/* 821194F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821194F8h case    0:*/		return 0x821194FC;
		  /* 821194FCh */ case    1:  		/* stw R11, <#[R30 + 48]> */
		/* 821194FCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821194FCh case    1:*/		return 0x82119500;
		  /* 82119500h */ case    2:  		/* lwz R11, <#[R31 + 120]> */
		/* 82119500h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82119500h case    2:*/		return 0x82119504;
		  /* 82119504h */ case    3:  		/* addi R11, R11, 1 */
		/* 82119504h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82119504h case    3:*/		return 0x82119508;
		  /* 82119508h */ case    4:  		/* stw R11, <#[R31 + 120]> */
		/* 82119508h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82119508h case    4:*/		return 0x8211950C;
		  /* 8211950Ch */ case    5:  		/* bl -328420 */
		/* 8211950Ch case    5:*/		regs.LR = 0x82119510; return 0x820C9228;
		/* 8211950Ch case    5:*/		return 0x82119510;
		  /* 82119510h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82119510h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119510h case    6:*/		return 0x82119514;
		  /* 82119514h */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 82119514h case    7:*/		if ( regs.CR[0].eq ) { return 0x82119538;  }
		/* 82119514h case    7:*/		return 0x82119518;
		  /* 82119518h */ case    8:  		/* addi R9, R31, 40 */
		/* 82119518h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x28);
		/* 82119518h case    8:*/		return 0x8211951C;
		  /* 8211951Ch */ case    9:  		/* li R8, 1 */
		/* 8211951Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211951Ch case    9:*/		return 0x82119520;
		  /* 82119520h */ case   10:  		/* li R7, 0 */
		/* 82119520h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82119520h case   10:*/		return 0x82119524;
		  /* 82119524h */ case   11:  		/* li R6, 0 */
		/* 82119524h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82119524h case   11:*/		return 0x82119528;
		  /* 82119528h */ case   12:  		/* li R5, 0 */
		/* 82119528h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119528h case   12:*/		return 0x8211952C;
		  /* 8211952Ch */ case   13:  		/* li R4, 0 */
		/* 8211952Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211952Ch case   13:*/		return 0x82119530;
		  /* 82119530h */ case   14:  		/* bl -316840 */
		/* 82119530h case   14:*/		regs.LR = 0x82119534; return 0x820CBF88;
		/* 82119530h case   14:*/		return 0x82119534;
		  /* 82119534h */ case   15:  		/* b 8 */
		/* 82119534h case   15:*/		return 0x8211953C;
		/* 82119534h case   15:*/		return 0x82119538;
	}
	return 0x82119538;
} // Block from 821194F8h-82119538h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82119538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119538);
		  /* 82119538h */ case    0:  		/* li R3, 0 */
		/* 82119538h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119538h case    0:*/		return 0x8211953C;
	}
	return 0x8211953C;
} // Block from 82119538h-8211953Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211953Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211953C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211953C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211953C);
		  /* 8211953Ch */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211953Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211953Ch case    0:*/		return 0x82119540;
		  /* 82119540h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 82119540h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211957C;  }
		/* 82119540h case    1:*/		return 0x82119544;
		  /* 82119544h */ case    2:  		/* stw R3, <#[R30 + 24]> */
		/* 82119544h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 82119544h case    2:*/		return 0x82119548;
		  /* 82119548h */ case    3:  		/* li R3, 20 */
		/* 82119548h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82119548h case    3:*/		return 0x8211954C;
		  /* 8211954Ch */ case    4:  		/* bl -328484 */
		/* 8211954Ch case    4:*/		regs.LR = 0x82119550; return 0x820C9228;
		/* 8211954Ch case    4:*/		return 0x82119550;
		  /* 82119550h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 82119550h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119550h case    5:*/		return 0x82119554;
		  /* 82119554h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 82119554h case    6:*/		if ( regs.CR[0].eq ) { return 0x82119570;  }
		/* 82119554h case    6:*/		return 0x82119558;
		  /* 82119558h */ case    7:  		/* lis R11, -32255 */
		/* 82119558h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119558h case    7:*/		return 0x8211955C;
		  /* 8211955Ch */ case    8:  		/* li R5, 0 */
		/* 8211955Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211955Ch case    8:*/		return 0x82119560;
		  /* 82119560h */ case    9:  		/* addi R6, R11, 9252 */
		/* 82119560h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 82119560h case    9:*/		return 0x82119564;
		  /* 82119564h */ case   10:  		/* mr R4, R30 */
		/* 82119564h case   10:*/		regs.R4 = regs.R30;
		/* 82119564h case   10:*/		return 0x82119568;
		  /* 82119568h */ case   11:  		/* bl -328056 */
		/* 82119568h case   11:*/		regs.LR = 0x8211956C; return 0x820C93F0;
		/* 82119568h case   11:*/		return 0x8211956C;
		  /* 8211956Ch */ case   12:  		/* b 8 */
		/* 8211956Ch case   12:*/		return 0x82119574;
		/* 8211956Ch case   12:*/		return 0x82119570;
	}
	return 0x82119570;
} // Block from 8211953Ch-82119570h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82119570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119570);
		  /* 82119570h */ case    0:  		/* li R3, 0 */
		/* 82119570h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119570h case    0:*/		return 0x82119574;
	}
	return 0x82119574;
} // Block from 82119570h-82119574h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119574);
		  /* 82119574h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119574h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119574h case    0:*/		return 0x82119578;
		  /* 82119578h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82119578h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119580;  }
		/* 82119578h case    1:*/		return 0x8211957C;
	}
	return 0x8211957C;
} // Block from 82119574h-8211957Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211957Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211957C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211957C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211957C);
		  /* 8211957Ch */ case    0:  		/* li R3, 0 */
		/* 8211957Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211957Ch case    0:*/		return 0x82119580;
	}
	return 0x82119580;
} // Block from 8211957Ch-82119580h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119580);
		  /* 82119580h */ case    0:  		/* addi R1, R1, 112 */
		/* 82119580h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82119580h case    0:*/		return 0x82119584;
		  /* 82119584h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82119584h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119584h case    1:*/		return 0x82119588;
		  /* 82119588h */ case    2:  		/* mtspr LR, R12 */
		/* 82119588h case    2:*/		regs.LR = regs.R12;
		/* 82119588h case    2:*/		return 0x8211958C;
		  /* 8211958Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8211958Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211958Ch case    3:*/		return 0x82119590;
		  /* 82119590h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82119590h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82119590h case    4:*/		return 0x82119594;
		  /* 82119594h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82119594h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119594h case    5:*/		return 0x82119598;
	}
	return 0x82119598;
} // Block from 82119580h-82119598h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82119598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119598);
		  /* 82119598h */ case    0:  		/* mfspr R12, LR */
		/* 82119598h case    0:*/		regs.R12 = regs.LR;
		/* 82119598h case    0:*/		return 0x8211959C;
		  /* 8211959Ch */ case    1:  		/* bl -557892 */
		/* 8211959Ch case    1:*/		regs.LR = 0x821195A0; return 0x82091258;
		/* 8211959Ch case    1:*/		return 0x821195A0;
		  /* 821195A0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821195A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821195A0h case    2:*/		return 0x821195A4;
		  /* 821195A4h */ case    3:  		/* lwz R11, <#[R3 + 128]> */
		/* 821195A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 821195A4h case    3:*/		return 0x821195A8;
		  /* 821195A8h */ case    4:  		/* li R10, 1 */
		/* 821195A8h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821195A8h case    4:*/		return 0x821195AC;
		  /* 821195ACh */ case    5:  		/* mr R31, R3 */
		/* 821195ACh case    5:*/		regs.R31 = regs.R3;
		/* 821195ACh case    5:*/		return 0x821195B0;
		  /* 821195B0h */ case    6:  		/* li R3, 52 */
		/* 821195B0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 821195B0h case    6:*/		return 0x821195B4;
		  /* 821195B4h */ case    7:  		/* mr R28, R4 */
		/* 821195B4h case    7:*/		regs.R28 = regs.R4;
		/* 821195B4h case    7:*/		return 0x821195B8;
		  /* 821195B8h */ case    8:  		/* mr R29, R5 */
		/* 821195B8h case    8:*/		regs.R29 = regs.R5;
		/* 821195B8h case    8:*/		return 0x821195BC;
		  /* 821195BCh */ case    9:  		/* stw R10, <#[R11 + 28]> */
		/* 821195BCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821195BCh case    9:*/		return 0x821195C0;
		  /* 821195C0h */ case   10:  		/* bl -328600 */
		/* 821195C0h case   10:*/		regs.LR = 0x821195C4; return 0x820C9228;
		/* 821195C0h case   10:*/		return 0x821195C4;
		  /* 821195C4h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 821195C4h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821195C4h case   11:*/		return 0x821195C8;
		  /* 821195C8h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821195C8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821195D8;  }
		/* 821195C8h case   12:*/		return 0x821195CC;
		  /* 821195CCh */ case   13:  		/* bl -318364 */
		/* 821195CCh case   13:*/		regs.LR = 0x821195D0; return 0x820CBA30;
		/* 821195CCh case   13:*/		return 0x821195D0;
		  /* 821195D0h */ case   14:  		/* mr R30, R3 */
		/* 821195D0h case   14:*/		regs.R30 = regs.R3;
		/* 821195D0h case   14:*/		return 0x821195D4;
		  /* 821195D4h */ case   15:  		/* b 8 */
		/* 821195D4h case   15:*/		return 0x821195DC;
		/* 821195D4h case   15:*/		return 0x821195D8;
	}
	return 0x821195D8;
} // Block from 82119598h-821195D8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821195D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821195D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821195D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821195D8);
		  /* 821195D8h */ case    0:  		/* li R30, 0 */
		/* 821195D8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821195D8h case    0:*/		return 0x821195DC;
	}
	return 0x821195DC;
} // Block from 821195D8h-821195DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821195DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821195DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821195DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821195DC);
		  /* 821195DCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821195DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821195DCh case    0:*/		return 0x821195E0;
		  /* 821195E0h */ case    1:  		/* bc 12, CR6_EQ, 164 */
		/* 821195E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119684;  }
		/* 821195E0h case    1:*/		return 0x821195E4;
		  /* 821195E4h */ case    2:  		/* li R11, 13 */
		/* 821195E4h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 821195E4h case    2:*/		return 0x821195E8;
		  /* 821195E8h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821195E8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821195E8h case    3:*/		return 0x821195EC;
		  /* 821195ECh */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 821195ECh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821195ECh case    4:*/		return 0x821195F0;
		  /* 821195F0h */ case    5:  		/* lwz R11, <#[R31 + 120]> */
		/* 821195F0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821195F0h case    5:*/		return 0x821195F4;
		  /* 821195F4h */ case    6:  		/* stw R11, <#[R30 + 48]> */
		/* 821195F4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821195F4h case    6:*/		return 0x821195F8;
		  /* 821195F8h */ case    7:  		/* lwz R11, <#[R31 + 120]> */
		/* 821195F8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 821195F8h case    7:*/		return 0x821195FC;
		  /* 821195FCh */ case    8:  		/* addi R11, R11, 1 */
		/* 821195FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821195FCh case    8:*/		return 0x82119600;
		  /* 82119600h */ case    9:  		/* stw R11, <#[R31 + 120]> */
		/* 82119600h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000078) );
		/* 82119600h case    9:*/		return 0x82119604;
		  /* 82119604h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 82119604h case   10:*/		if ( regs.CR[6].eq ) { return 0x82119628;  }
		/* 82119604h case   10:*/		return 0x82119608;
		  /* 82119608h */ case   11:  		/* lwz R11, <#[R29]> */
		/* 82119608h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82119608h case   11:*/		return 0x8211960C;
		  /* 8211960Ch */ case   12:  		/* mr R3, R29 */
		/* 8211960Ch case   12:*/		regs.R3 = regs.R29;
		/* 8211960Ch case   12:*/		return 0x82119610;
		  /* 82119610h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 82119610h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82119610h case   13:*/		return 0x82119614;
		  /* 82119614h */ case   14:  		/* mtspr CTR, R11 */
		/* 82119614h case   14:*/		regs.CTR = regs.R11;
		/* 82119614h case   14:*/		return 0x82119618;
		  /* 82119618h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82119618h case   15:*/		if ( 1 ) { regs.LR = 0x8211961C; return (uint32)regs.CTR; }
		/* 82119618h case   15:*/		return 0x8211961C;
		  /* 8211961Ch */ case   16:  		/* stw R3, <#[R30 + 28]> */
		/* 8211961Ch case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211961Ch case   16:*/		return 0x82119620;
		  /* 82119620h */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 82119620h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119620h case   17:*/		return 0x82119624;
		  /* 82119624h */ case   18:  		/* bc 12, CR0_EQ, 96 */
		/* 82119624h case   18:*/		if ( regs.CR[0].eq ) { return 0x82119684;  }
		/* 82119624h case   18:*/		return 0x82119628;
	}
	return 0x82119628;
} // Block from 821195DCh-82119628h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82119628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119628);
		  /* 82119628h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82119628h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82119628h case    0:*/		return 0x8211962C;
		  /* 8211962Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8211962Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82119650;  }
		/* 8211962Ch case    1:*/		return 0x82119630;
		  /* 82119630h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 82119630h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82119630h case    2:*/		return 0x82119634;
		  /* 82119634h */ case    3:  		/* mr R3, R28 */
		/* 82119634h case    3:*/		regs.R3 = regs.R28;
		/* 82119634h case    3:*/		return 0x82119638;
		  /* 82119638h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 82119638h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82119638h case    4:*/		return 0x8211963C;
		  /* 8211963Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 8211963Ch case    5:*/		regs.CTR = regs.R11;
		/* 8211963Ch case    5:*/		return 0x82119640;
		  /* 82119640h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82119640h case    6:*/		if ( 1 ) { regs.LR = 0x82119644; return (uint32)regs.CTR; }
		/* 82119640h case    6:*/		return 0x82119644;
		  /* 82119644h */ case    7:  		/* stw R3, <#[R30 + 24]> */
		/* 82119644h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000018) );
		/* 82119644h case    7:*/		return 0x82119648;
		  /* 82119648h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82119648h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119648h case    8:*/		return 0x8211964C;
		  /* 8211964Ch */ case    9:  		/* bc 12, CR0_EQ, 56 */
		/* 8211964Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82119684;  }
		/* 8211964Ch case    9:*/		return 0x82119650;
	}
	return 0x82119650;
} // Block from 82119628h-82119650h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82119650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119650);
		  /* 82119650h */ case    0:  		/* li R3, 20 */
		/* 82119650h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82119650h case    0:*/		return 0x82119654;
		  /* 82119654h */ case    1:  		/* bl -328748 */
		/* 82119654h case    1:*/		regs.LR = 0x82119658; return 0x820C9228;
		/* 82119654h case    1:*/		return 0x82119658;
		  /* 82119658h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82119658h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119658h case    2:*/		return 0x8211965C;
		  /* 8211965Ch */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8211965Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82119678;  }
		/* 8211965Ch case    3:*/		return 0x82119660;
		  /* 82119660h */ case    4:  		/* lis R11, -32253 */
		/* 82119660h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119660h case    4:*/		return 0x82119664;
		  /* 82119664h */ case    5:  		/* li R5, 0 */
		/* 82119664h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119664h case    5:*/		return 0x82119668;
		  /* 82119668h */ case    6:  		/* addi R6, R11, 7892 */
		/* 82119668h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1ED4);
		/* 82119668h case    6:*/		return 0x8211966C;
		  /* 8211966Ch */ case    7:  		/* mr R4, R30 */
		/* 8211966Ch case    7:*/		regs.R4 = regs.R30;
		/* 8211966Ch case    7:*/		return 0x82119670;
		  /* 82119670h */ case    8:  		/* bl -328320 */
		/* 82119670h case    8:*/		regs.LR = 0x82119674; return 0x820C93F0;
		/* 82119670h case    8:*/		return 0x82119674;
		  /* 82119674h */ case    9:  		/* b 8 */
		/* 82119674h case    9:*/		return 0x8211967C;
		/* 82119674h case    9:*/		return 0x82119678;
	}
	return 0x82119678;
} // Block from 82119650h-82119678h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82119678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119678);
		  /* 82119678h */ case    0:  		/* li R3, 0 */
		/* 82119678h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119678h case    0:*/		return 0x8211967C;
	}
	return 0x8211967C;
} // Block from 82119678h-8211967Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211967Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211967C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211967C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211967C);
		  /* 8211967Ch */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211967Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211967Ch case    0:*/		return 0x82119680;
		  /* 82119680h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82119680h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119688;  }
		/* 82119680h case    1:*/		return 0x82119684;
	}
	return 0x82119684;
} // Block from 8211967Ch-82119684h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119684);
		  /* 82119684h */ case    0:  		/* li R3, 0 */
		/* 82119684h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119684h case    0:*/		return 0x82119688;
	}
	return 0x82119688;
} // Block from 82119684h-82119688h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119688);
		  /* 82119688h */ case    0:  		/* addi R1, R1, 128 */
		/* 82119688h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82119688h case    0:*/		return 0x8211968C;
		  /* 8211968Ch */ case    1:  		/* b -558052 */
		/* 8211968Ch case    1:*/		return 0x820912A8;
		/* 8211968Ch case    1:*/		return 0x82119690;
	}
	return 0x82119690;
} // Block from 82119688h-82119690h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119690);
		  /* 82119690h */ case    0:  		/* mfspr R12, LR */
		/* 82119690h case    0:*/		regs.R12 = regs.LR;
		/* 82119690h case    0:*/		return 0x82119694;
		  /* 82119694h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82119694h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119694h case    1:*/		return 0x82119698;
		  /* 82119698h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82119698h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119698h case    2:*/		return 0x8211969C;
		  /* 8211969Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8211969Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211969Ch case    3:*/		return 0x821196A0;
		  /* 821196A0h */ case    4:  		/* stwu R1, <#[R1 - 368]> */
		/* 821196A0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 821196A0h case    4:*/		return 0x821196A4;
		  /* 821196A4h */ case    5:  		/* lis R10, -32255 */
		/* 821196A4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821196A4h case    5:*/		return 0x821196A8;
		  /* 821196A8h */ case    6:  		/* mr R31, R3 */
		/* 821196A8h case    6:*/		regs.R31 = regs.R3;
		/* 821196A8h case    6:*/		return 0x821196AC;
		  /* 821196ACh */ case    7:  		/* mr R6, R5 */
		/* 821196ACh case    7:*/		regs.R6 = regs.R5;
		/* 821196ACh case    7:*/		return 0x821196B0;
		  /* 821196B0h */ case    8:  		/* mr R11, R4 */
		/* 821196B0h case    8:*/		regs.R11 = regs.R4;
		/* 821196B0h case    8:*/		return 0x821196B4;
		  /* 821196B4h */ case    9:  		/* addi R10, R10, -10392 */
		/* 821196B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFD768);
		/* 821196B4h case    9:*/		return 0x821196B8;
		  /* 821196B8h */ case   10:  		/* lbz R9, <#[R11]> */
		/* 821196B8h case   10:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821196B8h case   10:*/		return 0x821196BC;
		  /* 821196BCh */ case   11:  		/* lbz R8, <#[R10]> */
		/* 821196BCh case   11:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821196BCh case   11:*/		return 0x821196C0;
		  /* 821196C0h */ case   12:  		/* cmpwi CR0, R9, 0 */
		/* 821196C0h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821196C0h case   12:*/		return 0x821196C4;
		  /* 821196C4h */ case   13:  		/* subf R9, R8, R9 */
		/* 821196C4h case   13:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821196C4h case   13:*/		return 0x821196C8;
		  /* 821196C8h */ case   14:  		/* bc 12, CR0_EQ, 20 */
		/* 821196C8h case   14:*/		if ( regs.CR[0].eq ) { return 0x821196DC;  }
		/* 821196C8h case   14:*/		return 0x821196CC;
		  /* 821196CCh */ case   15:  		/* addi R11, R11, 1 */
		/* 821196CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821196CCh case   15:*/		return 0x821196D0;
		  /* 821196D0h */ case   16:  		/* addi R10, R10, 1 */
		/* 821196D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821196D0h case   16:*/		return 0x821196D4;
		  /* 821196D4h */ case   17:  		/* cmpwi CR6, R9, 0 */
		/* 821196D4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821196D4h case   17:*/		return 0x821196D8;
	}
	return 0x821196D8;
} // Block from 82119690h-821196D8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821196D8h
// Function '?AsmDecl@CParse@D3DXShader@@IAAPAVCNode@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821196D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821196D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821196D8);
		  /* 821196D8h */ case    0:  		/* bc 12, CR6_EQ, -32 */
		/* 821196D8h case    0:*/		if ( regs.CR[6].eq ) { return 0x821196B8;  }
		/* 821196D8h case    0:*/		return 0x821196DC;
	}
	return 0x821196DC;
} // Block from 821196D8h-821196DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821196DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821196DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821196DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821196DC);
		  /* 821196DCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821196DCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821196DCh case    0:*/		return 0x821196E0;
		  /* 821196E0h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821196E0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82119714;  }
		/* 821196E0h case    1:*/		return 0x821196E4;
		  /* 821196E4h */ case    2:  		/* mr R5, R4 */
		/* 821196E4h case    2:*/		regs.R5 = regs.R4;
		/* 821196E4h case    2:*/		return 0x821196E8;
		  /* 821196E8h */ case    3:  		/* li R4, 256 */
		/* 821196E8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 821196E8h case    3:*/		return 0x821196EC;
		  /* 821196ECh */ case    4:  		/* addi R3, R1, 80 */
		/* 821196ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821196ECh case    4:*/		return 0x821196F0;
		  /* 821196F0h */ case    5:  		/* bl -501768 */
		/* 821196F0h case    5:*/		regs.LR = 0x821196F4; return 0x8209EEE8;
		/* 821196F0h case    5:*/		return 0x821196F4;
		  /* 821196F4h */ case    6:  		/* li R10, 0 */
		/* 821196F4h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821196F4h case    6:*/		return 0x821196F8;
		  /* 821196F8h */ case    7:  		/* lis R9, -32255 */
		/* 821196F8h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 821196F8h case    7:*/		return 0x821196FC;
		  /* 821196FCh */ case    8:  		/* stb R10, <#[R1 + 335]> */
		/* 821196FCh case    8:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x0000014F) );
		/* 821196FCh case    8:*/		return 0x82119700;
		  /* 82119700h */ case    9:  		/* addi R7, R1, 80 */
		/* 82119700h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82119700h case    9:*/		return 0x82119704;
		  /* 82119704h */ case   10:  		/* addi R6, R9, -10432 */
		/* 82119704h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0xFFFFD740);
		/* 82119704h case   10:*/		return 0x82119708;
		  /* 82119708h */ case   11:  		/* li R5, 0 */
		/* 82119708h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119708h case   11:*/		return 0x8211970C;
		  /* 8211970Ch */ case   12:  		/* addi R4, R31, 40 */
		/* 8211970Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 8211970Ch case   12:*/		return 0x82119710;
		  /* 82119710h */ case   13:  		/* b 352 */
		/* 82119710h case   13:*/		return 0x82119870;
		/* 82119710h case   13:*/		return 0x82119714;
	}
	return 0x82119714;
} // Block from 821196DCh-82119714h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82119714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119714);
		  /* 82119714h */ case    0:  		/* lwz R11, <#[R31 + 80]> */
		/* 82119714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82119714h case    0:*/		return 0x82119718;
		  /* 82119718h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82119718h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82119718h case    1:*/		return 0x8211971C;
		  /* 8211971Ch */ case    2:  		/* bc 4, CR6_EQ, 352 */
		/* 8211971Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211987C;  }
		/* 8211971Ch case    2:*/		return 0x82119720;
	}
	return 0x82119720;
} // Block from 82119714h-82119720h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119720h
// Function '?ScoreFunctionDecl@CParse@D3DXShader@@IAAIPAVCNodeFunction@2@PAVCNode@2@1K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119720);
		  /* 82119720h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 82119720h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82119720h case    0:*/		return 0x82119724;
		  /* 82119724h */ case    1:  		/* addi R30, R31, 40 */
		/* 82119724h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x28);
		/* 82119724h case    1:*/		return 0x82119728;
		  /* 82119728h */ case    2:  		/* cmplwi CR6, R11, 17 */
		/* 82119728h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 82119728h case    2:*/		return 0x8211972C;
		  /* 8211972Ch */ case    3:  		/* bc 12, CR6_GT, 152 */
		/* 8211972Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x821197C4;  }
		/* 8211972Ch case    3:*/		return 0x82119730;
		  /* 82119730h */ case    4:  		/* lis R12, -32253 */
		/* 82119730h case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 82119730h case    4:*/		return 0x82119734;
		  /* 82119734h */ case    5:  		/* addi R12, R12, 5208 */
		/* 82119734h case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x1458);
		/* 82119734h case    5:*/		return 0x82119738;
		  /* 82119738h */ case    6:  		/* lbzx R0, <#[R12 + R11]> */
		/* 82119738h case    6:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 82119738h case    6:*/		return 0x8211973C;
		  /* 8211973Ch */ case    7:  		/* lis R12, -32238 */
		/* 8211973Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 8211973Ch case    7:*/		return 0x82119740;
		  /* 82119740h */ case    8:  		/* ori R0, R0, 0 */
		/* 82119740h case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82119740h case    8:*/		return 0x82119744;
		  /* 82119744h */ case    9:  		/* addi R12, R12, -26792 */
		/* 82119744h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF9758);
		/* 82119744h case    9:*/		return 0x82119748;
		  /* 82119748h */ case   10:  		/* ori R0, R0, 0 */
		/* 82119748h case   10:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82119748h case   10:*/		return 0x8211974C;
		  /* 8211974Ch */ case   11:  		/* add R12, R12, R0 */
		/* 8211974Ch case   11:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8211974Ch case   11:*/		return 0x82119750;
		  /* 82119750h */ case   12:  		/* mtspr CTR, R12 */
		/* 82119750h case   12:*/		regs.CTR = regs.R12;
		/* 82119750h case   12:*/		return 0x82119754;
		  /* 82119754h */ case   13:  		/* bcctr 20, CR0_LT */
		/* 82119754h case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82119754h case   13:*/		return 0x82119758;
		  /* 82119758h */ case   14:  		/* lis R11, -32255 */
		/* 82119758h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119758h case   14:*/		return 0x8211975C;
		  /* 8211975Ch */ case   15:  		/* addi R5, R11, -9204 */
		/* 8211975Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDC0C);
		/* 8211975Ch case   15:*/		return 0x82119760;
		  /* 82119760h */ case   16:  		/* b 108 */
		/* 82119760h case   16:*/		return 0x821197CC;
		/* 82119760h case   16:*/		return 0x82119764;
		  /* 82119764h */ case   17:  		/* addi R6, R31, 48 */
		/* 82119764h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x30);
		/* 82119764h case   17:*/		return 0x82119768;
		  /* 82119768h */ case   18:  		/* lis R11, -32255 */
		/* 82119768h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119768h case   18:*/		return 0x8211976C;
		  /* 8211976Ch */ case   19:  		/* li R4, 256 */
		/* 8211976Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8211976Ch case   19:*/		return 0x82119770;
		  /* 82119770h */ case   20:  		/* addi R5, R11, -9216 */
		/* 82119770h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDC00);
		/* 82119770h case   20:*/		return 0x82119774;
		  /* 82119774h */ case   21:  		/* addi R3, R1, 80 */
		/* 82119774h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82119774h case   21:*/		return 0x82119778;
		  /* 82119778h */ case   22:  		/* bl -487736 */
		/* 82119778h case   22:*/		regs.LR = 0x8211977C; return 0x820A2640;
		/* 82119778h case   22:*/		return 0x8211977C;
		  /* 8211977Ch */ case   23:  		/* b 92 */
		/* 8211977Ch case   23:*/		return 0x821197D8;
		/* 8211977Ch case   23:*/		return 0x82119780;
		  /* 82119780h */ case   24:  		/* lis R11, -32253 */
		/* 82119780h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119780h case   24:*/		return 0x82119784;
		  /* 82119784h */ case   25:  		/* addi R5, R11, 8108 */
		/* 82119784h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1FAC);
		/* 82119784h case   25:*/		return 0x82119788;
		  /* 82119788h */ case   26:  		/* b 68 */
		/* 82119788h case   26:*/		return 0x821197CC;
		/* 82119788h case   26:*/		return 0x8211978C;
		  /* 8211978Ch */ case   27:  		/* lis R11, -32253 */
		/* 8211978Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211978Ch case   27:*/		return 0x82119790;
		  /* 82119790h */ case   28:  		/* addi R5, R11, 8092 */
		/* 82119790h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1F9C);
		/* 82119790h case   28:*/		return 0x82119794;
		  /* 82119794h */ case   29:  		/* b 56 */
		/* 82119794h case   29:*/		return 0x821197CC;
		/* 82119794h case   29:*/		return 0x82119798;
		  /* 82119798h */ case   30:  		/* lwz R6, <#[R31 + 48]> */
		/* 82119798h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000030) );
		/* 82119798h case   30:*/		return 0x8211979C;
		  /* 8211979Ch */ case   31:  		/* b -52 */
		/* 8211979Ch case   31:*/		return 0x82119768;
		/* 8211979Ch case   31:*/		return 0x821197A0;
		  /* 821197A0h */ case   32:  		/* lis R11, -32255 */
		/* 821197A0h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821197A0h case   32:*/		return 0x821197A4;
		  /* 821197A4h */ case   33:  		/* addi R5, R11, -9364 */
		/* 821197A4h case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDB6C);
		/* 821197A4h case   33:*/		return 0x821197A8;
		  /* 821197A8h */ case   34:  		/* b 36 */
		/* 821197A8h case   34:*/		return 0x821197CC;
		/* 821197A8h case   34:*/		return 0x821197AC;
		  /* 821197ACh */ case   35:  		/* lis R11, -32255 */
		/* 821197ACh case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821197ACh case   35:*/		return 0x821197B0;
		  /* 821197B0h */ case   36:  		/* addi R5, R11, -9376 */
		/* 821197B0h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDB60);
		/* 821197B0h case   36:*/		return 0x821197B4;
		  /* 821197B4h */ case   37:  		/* b 24 */
		/* 821197B4h case   37:*/		return 0x821197CC;
		/* 821197B4h case   37:*/		return 0x821197B8;
		  /* 821197B8h */ case   38:  		/* lis R11, -32255 */
		/* 821197B8h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821197B8h case   38:*/		return 0x821197BC;
		  /* 821197BCh */ case   39:  		/* addi R5, R11, -9388 */
		/* 821197BCh case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDB54);
		/* 821197BCh case   39:*/		return 0x821197C0;
		  /* 821197C0h */ case   40:  		/* b 12 */
		/* 821197C0h case   40:*/		return 0x821197CC;
		/* 821197C0h case   40:*/		return 0x821197C4;
	}
	return 0x821197C4;
} // Block from 82119720h-821197C4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821197C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821197C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821197C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821197C4);
		  /* 821197C4h */ case    0:  		/* lis R11, -32255 */
		/* 821197C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821197C4h case    0:*/		return 0x821197C8;
		  /* 821197C8h */ case    1:  		/* addi R5, R11, -9396 */
		/* 821197C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDB4C);
		/* 821197C8h case    1:*/		return 0x821197CC;
	}
	return 0x821197CC;
} // Block from 821197C4h-821197CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821197CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821197CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821197CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821197CC);
		  /* 821197CCh */ case    0:  		/* li R4, 256 */
		/* 821197CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 821197CCh case    0:*/		return 0x821197D0;
		  /* 821197D0h */ case    1:  		/* addi R3, R1, 80 */
		/* 821197D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821197D0h case    1:*/		return 0x821197D4;
		  /* 821197D4h */ case    2:  		/* bl -487828 */
		/* 821197D4h case    2:*/		regs.LR = 0x821197D8; return 0x820A2640;
		/* 821197D4h case    2:*/		return 0x821197D8;
	}
	return 0x821197D8;
} // Block from 821197CCh-821197D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821197D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821197D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821197D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821197D8);
		  /* 821197D8h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821197D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821197D8h case    0:*/		return 0x821197DC;
		  /* 821197DCh */ case    1:  		/* lis R10, -32253 */
		/* 821197DCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821197DCh case    1:*/		return 0x821197E0;
		  /* 821197E0h */ case    2:  		/* addi R7, R1, 80 */
		/* 821197E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821197E0h case    2:*/		return 0x821197E4;
		  /* 821197E4h */ case    3:  		/* addi R6, R10, 8064 */
		/* 821197E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1F80);
		/* 821197E4h case    3:*/		return 0x821197E8;
		  /* 821197E8h */ case    4:  		/* li R5, 3000 */
		/* 821197E8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0xBB8);
		/* 821197E8h case    4:*/		return 0x821197EC;
		  /* 821197ECh */ case    5:  		/* mr R4, R30 */
		/* 821197ECh case    5:*/		regs.R4 = regs.R30;
		/* 821197ECh case    5:*/		return 0x821197F0;
		  /* 821197F0h */ case    6:  		/* addi R3, R11, 24 */
		/* 821197F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x18);
		/* 821197F0h case    6:*/		return 0x821197F4;
		  /* 821197F4h */ case    7:  		/* bl -468580 */
		/* 821197F4h case    7:*/		regs.LR = 0x821197F8; return 0x820A7190;
		/* 821197F4h case    7:*/		return 0x821197F8;
		  /* 821197F8h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 821197F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821197F8h case    8:*/		return 0x821197FC;
		  /* 821197FCh */ case    9:  		/* cmpwi CR6, R11, 11 */
		/* 821197FCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 821197FCh case    9:*/		return 0x82119800;
		  /* 82119800h */ case   10:  		/* bc 4, CR6_EQ, 124 */
		/* 82119800h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211987C;  }
		/* 82119800h case   10:*/		return 0x82119804;
		  /* 82119804h */ case   11:  		/* lis R11, -32217 */
		/* 82119804h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82119804h case   11:*/		return 0x82119808;
		  /* 82119808h */ case   12:  		/* addi R6, R11, 15204 */
		/* 82119808h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3B64);
		/* 82119808h case   12:*/		return 0x8211980C;
		  /* 8211980Ch */ case   13:  		/* lwz R7, <#[R11 + 15204]> */
		/* 8211980Ch case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00003B64) );
		/* 8211980Ch case   13:*/		return 0x82119810;
		  /* 82119810h */ case   14:  		/* cmplwi CR6, R7, 0 */
		/* 82119810h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82119810h case   14:*/		return 0x82119814;
		  /* 82119814h */ case   15:  		/* bc 12, CR6_EQ, 104 */
		/* 82119814h case   15:*/		if ( regs.CR[6].eq ) { return 0x8211987C;  }
		/* 82119814h case   15:*/		return 0x82119818;
		  /* 82119818h */ case   16:  		/* lwz R8, <#[R31 + 48]> */
		/* 82119818h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000030) );
		/* 82119818h case   16:*/		return 0x8211981C;
		  /* 8211981Ch */ case   17:  		/* mr R10, R7 */
		/* 8211981Ch case   17:*/		regs.R10 = regs.R7;
		/* 8211981Ch case   17:*/		return 0x82119820;
		  /* 82119820h */ case   18:  		/* mr R11, R8 */
		/* 82119820h case   18:*/		regs.R11 = regs.R8;
		/* 82119820h case   18:*/		return 0x82119824;
		  /* 82119824h */ case   19:  		/* lbz R9, <#[R11]> */
		/* 82119824h case   19:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82119824h case   19:*/		return 0x82119828;
		  /* 82119828h */ case   20:  		/* lbz R5, <#[R10]> */
		/* 82119828h case   20:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 82119828h case   20:*/		return 0x8211982C;
		  /* 8211982Ch */ case   21:  		/* cmpwi CR0, R9, 0 */
		/* 8211982Ch case   21:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8211982Ch case   21:*/		return 0x82119830;
		  /* 82119830h */ case   22:  		/* subf R9, R5, R9 */
		/* 82119830h case   22:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 82119830h case   22:*/		return 0x82119834;
		  /* 82119834h */ case   23:  		/* bc 12, CR0_EQ, 20 */
		/* 82119834h case   23:*/		if ( regs.CR[0].eq ) { return 0x82119848;  }
		/* 82119834h case   23:*/		return 0x82119838;
		  /* 82119838h */ case   24:  		/* addi R11, R11, 1 */
		/* 82119838h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82119838h case   24:*/		return 0x8211983C;
		  /* 8211983Ch */ case   25:  		/* addi R10, R10, 1 */
		/* 8211983Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211983Ch case   25:*/		return 0x82119840;
		  /* 82119840h */ case   26:  		/* cmpwi CR6, R9, 0 */
		/* 82119840h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82119840h case   26:*/		return 0x82119844;
		  /* 82119844h */ case   27:  		/* bc 12, CR6_EQ, -32 */
		/* 82119844h case   27:*/		if ( regs.CR[6].eq ) { return 0x82119824;  }
		/* 82119844h case   27:*/		return 0x82119848;
	}
	return 0x82119848;
} // Block from 821197D8h-82119848h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82119848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119848);
		  /* 82119848h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82119848h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82119848h case    0:*/		return 0x8211984C;
		  /* 8211984Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8211984Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82119860;  }
		/* 8211984Ch case    1:*/		return 0x82119850;
		  /* 82119850h */ case    2:  		/* lwzu R7, <#[R6 + 4]> */
		/* 82119850h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 82119850h case    2:*/		return 0x82119854;
		  /* 82119854h */ case    3:  		/* cmplwi CR6, R7, 0 */
		/* 82119854h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82119854h case    3:*/		return 0x82119858;
		  /* 82119858h */ case    4:  		/* bc 4, CR6_EQ, -60 */
		/* 82119858h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211981C;  }
		/* 82119858h case    4:*/		return 0x8211985C;
		  /* 8211985Ch */ case    5:  		/* b 32 */
		/* 8211985Ch case    5:*/		return 0x8211987C;
		/* 8211985Ch case    5:*/		return 0x82119860;
	}
	return 0x82119860;
} // Block from 82119848h-82119860h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82119860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119860);
		  /* 82119860h */ case    0:  		/* lis R10, -32253 */
		/* 82119860h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82119860h case    0:*/		return 0x82119864;
		  /* 82119864h */ case    1:  		/* li R5, 3000 */
		/* 82119864h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBB8);
		/* 82119864h case    1:*/		return 0x82119868;
		  /* 82119868h */ case    2:  		/* addi R6, R10, 7904 */
		/* 82119868h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1EE0);
		/* 82119868h case    2:*/		return 0x8211986C;
		  /* 8211986Ch */ case    3:  		/* mr R4, R30 */
		/* 8211986Ch case    3:*/		regs.R4 = regs.R30;
		/* 8211986Ch case    3:*/		return 0x82119870;
	}
	return 0x82119870;
} // Block from 82119860h-82119870h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82119870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119870);
		  /* 82119870h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82119870h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82119870h case    0:*/		return 0x82119874;
		  /* 82119874h */ case    1:  		/* addi R3, R11, 24 */
		/* 82119874h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x18);
		/* 82119874h case    1:*/		return 0x82119878;
		  /* 82119878h */ case    2:  		/* bl -468712 */
		/* 82119878h case    2:*/		regs.LR = 0x8211987C; return 0x820A7190;
		/* 82119878h case    2:*/		return 0x8211987C;
	}
	return 0x8211987C;
} // Block from 82119870h-8211987Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211987Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211987C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211987C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211987C);
		  /* 8211987Ch */ case    0:  		/* li R11, 1 */
		/* 8211987Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211987Ch case    0:*/		return 0x82119880;
		  /* 82119880h */ case    1:  		/* stw R11, <#[R31 + 80]> */
		/* 82119880h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82119880h case    1:*/		return 0x82119884;
		  /* 82119884h */ case    2:  		/* addi R1, R1, 368 */
		/* 82119884h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 82119884h case    2:*/		return 0x82119888;
		  /* 82119888h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 82119888h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119888h case    3:*/		return 0x8211988C;
		  /* 8211988Ch */ case    4:  		/* mtspr LR, R12 */
		/* 8211988Ch case    4:*/		regs.LR = regs.R12;
		/* 8211988Ch case    4:*/		return 0x82119890;
		  /* 82119890h */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 82119890h case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119890h case    5:*/		return 0x82119894;
		  /* 82119894h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82119894h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82119894h case    6:*/		return 0x82119898;
		  /* 82119898h */ case    7:  		/* bclr 20, CR0_LT */
		/* 82119898h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119898h case    7:*/		return 0x8211989C;
	}
	return 0x8211989C;
} // Block from 8211987Ch-8211989Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211989Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211989C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211989C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211989C);
		  /* 8211989Ch */ case    0:  		/* nop */
		/* 8211989Ch case    0:*/		cpu::op::nop();
		/* 8211989Ch case    0:*/		return 0x821198A0;
	}
	return 0x821198A0;
} // Block from 8211989Ch-821198A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821198A0h
// Function '?Attribute@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821198A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821198A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821198A0);
		  /* 821198A0h */ case    0:  		/* mfspr R12, LR */
		/* 821198A0h case    0:*/		regs.R12 = regs.LR;
		/* 821198A0h case    0:*/		return 0x821198A4;
		  /* 821198A4h */ case    1:  		/* bl -558664 */
		/* 821198A4h case    1:*/		regs.LR = 0x821198A8; return 0x8209125C;
		/* 821198A4h case    1:*/		return 0x821198A8;
		  /* 821198A8h */ case    2:  		/* std R7, <#[R1 + 48]> */
		/* 821198A8h case    2:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 821198A8h case    2:*/		return 0x821198AC;
		  /* 821198ACh */ case    3:  		/* std R8, <#[R1 + 56]> */
		/* 821198ACh case    3:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 821198ACh case    3:*/		return 0x821198B0;
		  /* 821198B0h */ case    4:  		/* std R9, <#[R1 + 64]> */
		/* 821198B0h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 821198B0h case    4:*/		return 0x821198B4;
		  /* 821198B4h */ case    5:  		/* std R10, <#[R1 + 72]> */
		/* 821198B4h case    5:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 821198B4h case    5:*/		return 0x821198B8;
		  /* 821198B8h */ case    6:  		/* stwu R1, <#[R1 - 384]> */
		/* 821198B8h case    6:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 821198B8h case    6:*/		return 0x821198BC;
		  /* 821198BCh */ case    7:  		/* stw R6, <#[R1 + 428]> */
		/* 821198BCh case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000001AC) );
		/* 821198BCh case    7:*/		return 0x821198C0;
		  /* 821198C0h */ case    8:  		/* addi R11, R1, 80 */
		/* 821198C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821198C0h case    8:*/		return 0x821198C4;
		  /* 821198C4h */ case    9:  		/* addi R10, R1, 432 */
		/* 821198C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1B0);
		/* 821198C4h case    9:*/		return 0x821198C8;
		  /* 821198C8h */ case   10:  		/* mr R31, R3 */
		/* 821198C8h case   10:*/		regs.R31 = regs.R3;
		/* 821198C8h case   10:*/		return 0x821198CC;
		  /* 821198CCh */ case   11:  		/* mr R30, R4 */
		/* 821198CCh case   11:*/		regs.R30 = regs.R4;
		/* 821198CCh case   11:*/		return 0x821198D0;
		  /* 821198D0h */ case   12:  		/* mr R29, R5 */
		/* 821198D0h case   12:*/		regs.R29 = regs.R5;
		/* 821198D0h case   12:*/		return 0x821198D4;
		  /* 821198D4h */ case   13:  		/* mr R5, R6 */
		/* 821198D4h case   13:*/		regs.R5 = regs.R6;
		/* 821198D4h case   13:*/		return 0x821198D8;
		  /* 821198D8h */ case   14:  		/* stw R10, <#[R11]> */
		/* 821198D8h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821198D8h case   14:*/		return 0x821198DC;
		  /* 821198DCh */ case   15:  		/* li R4, 256 */
		/* 821198DCh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 821198DCh case   15:*/		return 0x821198E0;
		  /* 821198E0h */ case   16:  		/* lwz R6, <#[R1 + 80]> */
		/* 821198E0h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821198E0h case   16:*/		return 0x821198E4;
		  /* 821198E4h */ case   17:  		/* addi R3, R1, 96 */
		/* 821198E4h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821198E4h case   17:*/		return 0x821198E8;
		  /* 821198E8h */ case   18:  		/* bl -502272 */
		/* 821198E8h case   18:*/		regs.LR = 0x821198EC; return 0x8209EEE8;
		/* 821198E8h case   18:*/		return 0x821198EC;
		  /* 821198ECh */ case   19:  		/* lwz R11, <#[R31 + 4]> */
		/* 821198ECh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821198ECh case   19:*/		return 0x821198F0;
		  /* 821198F0h */ case   20:  		/* lis R10, -32255 */
		/* 821198F0h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821198F0h case   20:*/		return 0x821198F4;
		  /* 821198F4h */ case   21:  		/* addi R7, R1, 96 */
		/* 821198F4h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821198F4h case   21:*/		return 0x821198F8;
		  /* 821198F8h */ case   22:  		/* addi R6, R10, -10432 */
		/* 821198F8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFD740);
		/* 821198F8h case   22:*/		return 0x821198FC;
		  /* 821198FCh */ case   23:  		/* mr R5, R29 */
		/* 821198FCh case   23:*/		regs.R5 = regs.R29;
		/* 821198FCh case   23:*/		return 0x82119900;
		  /* 82119900h */ case   24:  		/* mr R4, R30 */
		/* 82119900h case   24:*/		regs.R4 = regs.R30;
		/* 82119900h case   24:*/		return 0x82119904;
		  /* 82119904h */ case   25:  		/* addi R3, R11, 24 */
		/* 82119904h case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x18);
		/* 82119904h case   25:*/		return 0x82119908;
		  /* 82119908h */ case   26:  		/* bl -468856 */
		/* 82119908h case   26:*/		regs.LR = 0x8211990C; return 0x820A7190;
		/* 82119908h case   26:*/		return 0x8211990C;
		  /* 8211990Ch */ case   27:  		/* li R11, 1 */
		/* 8211990Ch case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211990Ch case   27:*/		return 0x82119910;
		  /* 82119910h */ case   28:  		/* stw R11, <#[R31 + 80]> */
		/* 82119910h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82119910h case   28:*/		return 0x82119914;
		  /* 82119914h */ case   29:  		/* addi R1, R1, 384 */
		/* 82119914h case   29:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 82119914h case   29:*/		return 0x82119918;
		  /* 82119918h */ case   30:  		/* b -558700 */
		/* 82119918h case   30:*/		return 0x820912AC;
		/* 82119918h case   30:*/		return 0x8211991C;
		  /* 8211991Ch */ case   31:  		/* nop */
		/* 8211991Ch case   31:*/		cpu::op::nop();
		/* 8211991Ch case   31:*/		return 0x82119920;
	}
	return 0x82119920;
} // Block from 821198A0h-82119920h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82119920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119920);
		  /* 82119920h */ case    0:  		/* mfspr R12, LR */
		/* 82119920h case    0:*/		regs.R12 = regs.LR;
		/* 82119920h case    0:*/		return 0x82119924;
		  /* 82119924h */ case    1:  		/* bl -558792 */
		/* 82119924h case    1:*/		regs.LR = 0x82119928; return 0x8209125C;
		/* 82119924h case    1:*/		return 0x82119928;
		  /* 82119928h */ case    2:  		/* std R7, <#[R1 + 48]> */
		/* 82119928h case    2:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82119928h case    2:*/		return 0x8211992C;
		  /* 8211992Ch */ case    3:  		/* std R8, <#[R1 + 56]> */
		/* 8211992Ch case    3:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 8211992Ch case    3:*/		return 0x82119930;
		  /* 82119930h */ case    4:  		/* std R9, <#[R1 + 64]> */
		/* 82119930h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82119930h case    4:*/		return 0x82119934;
		  /* 82119934h */ case    5:  		/* std R10, <#[R1 + 72]> */
		/* 82119934h case    5:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82119934h case    5:*/		return 0x82119938;
		  /* 82119938h */ case    6:  		/* stwu R1, <#[R1 - 384]> */
		/* 82119938h case    6:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 82119938h case    6:*/		return 0x8211993C;
		  /* 8211993Ch */ case    7:  		/* stw R6, <#[R1 + 428]> */
		/* 8211993Ch case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000001AC) );
		/* 8211993Ch case    7:*/		return 0x82119940;
	}
	return 0x82119940;
} // Block from 82119920h-82119940h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82119940h
// Function '?Cast@CParse@D3DXShader@@IAAJPAU_D3DVALUE@2@0PAUD3DXTOKEN@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119940);
		  /* 82119940h */ case    0:  		/* addi R11, R1, 80 */
		/* 82119940h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82119940h case    0:*/		return 0x82119944;
		  /* 82119944h */ case    1:  		/* addi R10, R1, 432 */
		/* 82119944h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1B0);
		/* 82119944h case    1:*/		return 0x82119948;
		  /* 82119948h */ case    2:  		/* mr R31, R3 */
		/* 82119948h case    2:*/		regs.R31 = regs.R3;
		/* 82119948h case    2:*/		return 0x8211994C;
		  /* 8211994Ch */ case    3:  		/* mr R30, R4 */
		/* 8211994Ch case    3:*/		regs.R30 = regs.R4;
		/* 8211994Ch case    3:*/		return 0x82119950;
		  /* 82119950h */ case    4:  		/* mr R29, R5 */
		/* 82119950h case    4:*/		regs.R29 = regs.R5;
		/* 82119950h case    4:*/		return 0x82119954;
		  /* 82119954h */ case    5:  		/* mr R5, R6 */
		/* 82119954h case    5:*/		regs.R5 = regs.R6;
		/* 82119954h case    5:*/		return 0x82119958;
		  /* 82119958h */ case    6:  		/* stw R10, <#[R11]> */
		/* 82119958h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82119958h case    6:*/		return 0x8211995C;
		  /* 8211995Ch */ case    7:  		/* li R4, 256 */
		/* 8211995Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8211995Ch case    7:*/		return 0x82119960;
		  /* 82119960h */ case    8:  		/* lwz R6, <#[R1 + 80]> */
		/* 82119960h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 82119960h case    8:*/		return 0x82119964;
		  /* 82119964h */ case    9:  		/* addi R3, R1, 96 */
		/* 82119964h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82119964h case    9:*/		return 0x82119968;
		  /* 82119968h */ case   10:  		/* bl -502400 */
		/* 82119968h case   10:*/		regs.LR = 0x8211996C; return 0x8209EEE8;
		/* 82119968h case   10:*/		return 0x8211996C;
		  /* 8211996Ch */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211996Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211996Ch case   11:*/		return 0x82119970;
		  /* 82119970h */ case   12:  		/* lis R10, -32255 */
		/* 82119970h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82119970h case   12:*/		return 0x82119974;
		  /* 82119974h */ case   13:  		/* addi R7, R1, 96 */
		/* 82119974h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82119974h case   13:*/		return 0x82119978;
		  /* 82119978h */ case   14:  		/* addi R6, R10, -10432 */
		/* 82119978h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFD740);
		/* 82119978h case   14:*/		return 0x8211997C;
		  /* 8211997Ch */ case   15:  		/* mr R5, R29 */
		/* 8211997Ch case   15:*/		regs.R5 = regs.R29;
		/* 8211997Ch case   15:*/		return 0x82119980;
		  /* 82119980h */ case   16:  		/* mr R4, R30 */
		/* 82119980h case   16:*/		regs.R4 = regs.R30;
		/* 82119980h case   16:*/		return 0x82119984;
		  /* 82119984h */ case   17:  		/* addi R3, R11, 24 */
		/* 82119984h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x18);
		/* 82119984h case   17:*/		return 0x82119988;
		  /* 82119988h */ case   18:  		/* bl -468528 */
		/* 82119988h case   18:*/		regs.LR = 0x8211998C; return 0x820A7358;
		/* 82119988h case   18:*/		return 0x8211998C;
		  /* 8211998Ch */ case   19:  		/* addi R1, R1, 384 */
		/* 8211998Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 8211998Ch case   19:*/		return 0x82119990;
		  /* 82119990h */ case   20:  		/* b -558820 */
		/* 82119990h case   20:*/		return 0x820912AC;
		/* 82119990h case   20:*/		return 0x82119994;
		  /* 82119994h */ case   21:  		/* nop */
		/* 82119994h case   21:*/		cpu::op::nop();
		/* 82119994h case   21:*/		return 0x82119998;
	}
	return 0x82119998;
} // Block from 82119940h-82119998h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82119998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119998);
		  /* 82119998h */ case    0:  		/* mfspr R12, LR */
		/* 82119998h case    0:*/		regs.R12 = regs.LR;
		/* 82119998h case    0:*/		return 0x8211999C;
		  /* 8211999Ch */ case    1:  		/* bl -558912 */
		/* 8211999Ch case    1:*/		regs.LR = 0x821199A0; return 0x8209125C;
		/* 8211999Ch case    1:*/		return 0x821199A0;
		  /* 821199A0h */ case    2:  		/* std R7, <#[R1 + 48]> */
		/* 821199A0h case    2:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 821199A0h case    2:*/		return 0x821199A4;
		  /* 821199A4h */ case    3:  		/* std R8, <#[R1 + 56]> */
		/* 821199A4h case    3:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 821199A4h case    3:*/		return 0x821199A8;
		  /* 821199A8h */ case    4:  		/* std R9, <#[R1 + 64]> */
		/* 821199A8h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 821199A8h case    4:*/		return 0x821199AC;
		  /* 821199ACh */ case    5:  		/* std R10, <#[R1 + 72]> */
		/* 821199ACh case    5:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 821199ACh case    5:*/		return 0x821199B0;
		  /* 821199B0h */ case    6:  		/* stwu R1, <#[R1 - 384]> */
		/* 821199B0h case    6:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 821199B0h case    6:*/		return 0x821199B4;
		  /* 821199B4h */ case    7:  		/* stw R6, <#[R1 + 428]> */
		/* 821199B4h case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000001AC) );
		/* 821199B4h case    7:*/		return 0x821199B8;
		  /* 821199B8h */ case    8:  		/* addi R11, R1, 80 */
		/* 821199B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821199B8h case    8:*/		return 0x821199BC;
		  /* 821199BCh */ case    9:  		/* addi R10, R1, 432 */
		/* 821199BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1B0);
		/* 821199BCh case    9:*/		return 0x821199C0;
		  /* 821199C0h */ case   10:  		/* mr R31, R3 */
		/* 821199C0h case   10:*/		regs.R31 = regs.R3;
		/* 821199C0h case   10:*/		return 0x821199C4;
		  /* 821199C4h */ case   11:  		/* mr R30, R4 */
		/* 821199C4h case   11:*/		regs.R30 = regs.R4;
		/* 821199C4h case   11:*/		return 0x821199C8;
		  /* 821199C8h */ case   12:  		/* mr R29, R5 */
		/* 821199C8h case   12:*/		regs.R29 = regs.R5;
		/* 821199C8h case   12:*/		return 0x821199CC;
		  /* 821199CCh */ case   13:  		/* mr R5, R6 */
		/* 821199CCh case   13:*/		regs.R5 = regs.R6;
		/* 821199CCh case   13:*/		return 0x821199D0;
		  /* 821199D0h */ case   14:  		/* stw R10, <#[R11]> */
		/* 821199D0h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821199D0h case   14:*/		return 0x821199D4;
		  /* 821199D4h */ case   15:  		/* li R4, 256 */
		/* 821199D4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 821199D4h case   15:*/		return 0x821199D8;
		  /* 821199D8h */ case   16:  		/* lwz R6, <#[R1 + 80]> */
		/* 821199D8h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821199D8h case   16:*/		return 0x821199DC;
		  /* 821199DCh */ case   17:  		/* addi R3, R1, 96 */
		/* 821199DCh case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821199DCh case   17:*/		return 0x821199E0;
		  /* 821199E0h */ case   18:  		/* bl -502520 */
		/* 821199E0h case   18:*/		regs.LR = 0x821199E4; return 0x8209EEE8;
		/* 821199E0h case   18:*/		return 0x821199E4;
		  /* 821199E4h */ case   19:  		/* lwz R11, <#[R31 + 4]> */
		/* 821199E4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821199E4h case   19:*/		return 0x821199E8;
		  /* 821199E8h */ case   20:  		/* lis R10, -32255 */
		/* 821199E8h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821199E8h case   20:*/		return 0x821199EC;
		  /* 821199ECh */ case   21:  		/* addi R7, R1, 96 */
		/* 821199ECh case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821199ECh case   21:*/		return 0x821199F0;
		  /* 821199F0h */ case   22:  		/* addi R6, R10, -10432 */
		/* 821199F0h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFD740);
		/* 821199F0h case   22:*/		return 0x821199F4;
		  /* 821199F4h */ case   23:  		/* mr R5, R29 */
		/* 821199F4h case   23:*/		regs.R5 = regs.R29;
		/* 821199F4h case   23:*/		return 0x821199F8;
		  /* 821199F8h */ case   24:  		/* mr R4, R30 */
		/* 821199F8h case   24:*/		regs.R4 = regs.R30;
		/* 821199F8h case   24:*/		return 0x821199FC;
		  /* 821199FCh */ case   25:  		/* addi R3, R11, 24 */
		/* 821199FCh case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x18);
		/* 821199FCh case   25:*/		return 0x82119A00;
		  /* 82119A00h */ case   26:  		/* bl -469104 */
		/* 82119A00h case   26:*/		regs.LR = 0x82119A04; return 0x820A7190;
		/* 82119A00h case   26:*/		return 0x82119A04;
		  /* 82119A04h */ case   27:  		/* li R11, 1 */
		/* 82119A04h case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82119A04h case   27:*/		return 0x82119A08;
		  /* 82119A08h */ case   28:  		/* stw R11, <#[R31 + 80]> */
		/* 82119A08h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82119A08h case   28:*/		return 0x82119A0C;
		  /* 82119A0Ch */ case   29:  		/* stw R11, <#[R31 + 84]> */
		/* 82119A0Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 82119A0Ch case   29:*/		return 0x82119A10;
		  /* 82119A10h */ case   30:  		/* addi R1, R1, 384 */
		/* 82119A10h case   30:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 82119A10h case   30:*/		return 0x82119A14;
		  /* 82119A14h */ case   31:  		/* b -558952 */
		/* 82119A14h case   31:*/		return 0x820912AC;
		/* 82119A14h case   31:*/		return 0x82119A18;
	}
	return 0x82119A18;
} // Block from 82119998h-82119A18h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82119A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119A18);
		  /* 82119A18h */ case    0:  		/* mfspr R12, LR */
		/* 82119A18h case    0:*/		regs.R12 = regs.LR;
		/* 82119A18h case    0:*/		return 0x82119A1C;
		  /* 82119A1Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82119A1Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119A1Ch case    1:*/		return 0x82119A20;
		  /* 82119A20h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82119A20h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119A20h case    2:*/		return 0x82119A24;
		  /* 82119A24h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82119A24h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82119A24h case    3:*/		return 0x82119A28;
		  /* 82119A28h */ case    4:  		/* stwu R1, <#[R1 - 144]> */
		/* 82119A28h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82119A28h case    4:*/		return 0x82119A2C;
		  /* 82119A2Ch */ case    5:  		/* mr R31, R3 */
		/* 82119A2Ch case    5:*/		regs.R31 = regs.R3;
		/* 82119A2Ch case    5:*/		return 0x82119A30;
		  /* 82119A30h */ case    6:  		/* mr R30, R4 */
		/* 82119A30h case    6:*/		regs.R30 = regs.R4;
		/* 82119A30h case    6:*/		return 0x82119A34;
		  /* 82119A34h */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 82119A34h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82119A34h case    7:*/		return 0x82119A38;
		  /* 82119A38h */ case    8:  		/* bc 4, CR6_EQ, 44 */
		/* 82119A38h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82119A64;  }
		/* 82119A38h case    8:*/		return 0x82119A3C;
		  /* 82119A3Ch */ case    9:  		/* lwz R11, <#[R3 + 80]> */
		/* 82119A3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 82119A3Ch case    9:*/		return 0x82119A40;
		  /* 82119A40h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 82119A40h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82119A40h case   10:*/		return 0x82119A44;
		  /* 82119A44h */ case   11:  		/* bc 4, CR6_EQ, 20 */
		/* 82119A44h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82119A58;  }
		/* 82119A44h case   11:*/		return 0x82119A48;
		  /* 82119A48h */ case   12:  		/* lis R11, -32253 */
		/* 82119A48h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119A48h case   12:*/		return 0x82119A4C;
		  /* 82119A4Ch */ case   13:  		/* li R5, 0 */
		/* 82119A4Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119A4Ch case   13:*/		return 0x82119A50;
		  /* 82119A50h */ case   14:  		/* addi R6, R11, 8128 */
		/* 82119A50h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1FC0);
		/* 82119A50h case   14:*/		return 0x82119A54;
		  /* 82119A54h */ case   15:  		/* bl -188 */
		/* 82119A54h case   15:*/		regs.LR = 0x82119A58; return 0x82119998;
		/* 82119A54h case   15:*/		return 0x82119A58;
	}
	return 0x82119A58;
} // Block from 82119A18h-82119A58h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82119A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119A58);
		  /* 82119A58h */ case    0:  		/* li R11, 1 */
		/* 82119A58h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82119A58h case    0:*/		return 0x82119A5C;
		  /* 82119A5Ch */ case    1:  		/* stw R11, <#[R31 + 80]> */
		/* 82119A5Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82119A5Ch case    1:*/		return 0x82119A60;
		  /* 82119A60h */ case    2:  		/* stw R11, <#[R31 + 84]> */
		/* 82119A60h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 82119A60h case    2:*/		return 0x82119A64;
	}
	return 0x82119A64;
} // Block from 82119A58h-82119A64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119A64);
		  /* 82119A64h */ case    0:  		/* mr R3, R30 */
		/* 82119A64h case    0:*/		regs.R3 = regs.R30;
		/* 82119A64h case    0:*/		return 0x82119A68;
		  /* 82119A68h */ case    1:  		/* addi R1, R1, 144 */
		/* 82119A68h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82119A68h case    1:*/		return 0x82119A6C;
		  /* 82119A6Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82119A6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82119A6Ch case    2:*/		return 0x82119A70;
		  /* 82119A70h */ case    3:  		/* mtspr LR, R12 */
		/* 82119A70h case    3:*/		regs.LR = regs.R12;
		/* 82119A70h case    3:*/		return 0x82119A74;
		  /* 82119A74h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 82119A74h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82119A74h case    4:*/		return 0x82119A78;
		  /* 82119A78h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 82119A78h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82119A78h case    5:*/		return 0x82119A7C;
		  /* 82119A7Ch */ case    6:  		/* bclr 20, CR0_LT */
		/* 82119A7Ch case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82119A7Ch case    6:*/		return 0x82119A80;
	}
	return 0x82119A80;
} // Block from 82119A64h-82119A80h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82119A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119A80);
		  /* 82119A80h */ case    0:  		/* mfspr R12, LR */
		/* 82119A80h case    0:*/		regs.R12 = regs.LR;
		/* 82119A80h case    0:*/		return 0x82119A84;
		  /* 82119A84h */ case    1:  		/* bl -559160 */
		/* 82119A84h case    1:*/		regs.LR = 0x82119A88; return 0x8209124C;
		/* 82119A84h case    1:*/		return 0x82119A88;
		  /* 82119A88h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82119A88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82119A88h case    2:*/		return 0x82119A8C;
		  /* 82119A8Ch */ case    3:  		/* mr R26, R3 */
		/* 82119A8Ch case    3:*/		regs.R26 = regs.R3;
		/* 82119A8Ch case    3:*/		return 0x82119A90;
		  /* 82119A90h */ case    4:  		/* mr R25, R4 */
		/* 82119A90h case    4:*/		regs.R25 = regs.R4;
		/* 82119A90h case    4:*/		return 0x82119A94;
		  /* 82119A94h */ case    5:  		/* mr R28, R5 */
		/* 82119A94h case    5:*/		regs.R28 = regs.R5;
		/* 82119A94h case    5:*/		return 0x82119A98;
		  /* 82119A98h */ case    6:  		/* li R27, 0 */
		/* 82119A98h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82119A98h case    6:*/		return 0x82119A9C;
		  /* 82119A9Ch */ case    7:  		/* cmplwi CR6, R5, 0 */
		/* 82119A9Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82119A9Ch case    7:*/		return 0x82119AA0;
		  /* 82119AA0h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82119AA0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82119AC4;  }
		/* 82119AA0h case    8:*/		return 0x82119AA4;
		  /* 82119AA4h */ case    9:  		/* mr R11, R5 */
		/* 82119AA4h case    9:*/		regs.R11 = regs.R5;
		/* 82119AA4h case    9:*/		return 0x82119AA8;
		  /* 82119AA8h */ case   10:  		/* lbz R10, <#[R11]> */
		/* 82119AA8h case   10:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82119AA8h case   10:*/		return 0x82119AAC;
		  /* 82119AACh */ case   11:  		/* addi R11, R11, 1 */
		/* 82119AACh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82119AACh case   11:*/		return 0x82119AB0;
		  /* 82119AB0h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 82119AB0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82119AB0h case   12:*/		return 0x82119AB4;
		  /* 82119AB4h */ case   13:  		/* bc 4, CR6_EQ, -12 */
		/* 82119AB4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82119AA8;  }
		/* 82119AB4h case   13:*/		return 0x82119AB8;
		  /* 82119AB8h */ case   14:  		/* subf R11, R28, R11 */
		/* 82119AB8h case   14:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 82119AB8h case   14:*/		return 0x82119ABC;
		  /* 82119ABCh */ case   15:  		/* addi R11, R11, -1 */
		/* 82119ABCh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82119ABCh case   15:*/		return 0x82119AC0;
		  /* 82119AC0h */ case   16:  		/* rlwinm R27, R11, 0, 0, 31 */
		/* 82119AC0h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R27,regs.R11);
		/* 82119AC0h case   16:*/		return 0x82119AC4;
	}
	return 0x82119AC4;
} // Block from 82119A80h-82119AC4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82119AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119AC4);
		  /* 82119AC4h */ case    0:  		/* lwz R9, <#[R26 + 20]> */
		/* 82119AC4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000014) );
		/* 82119AC4h case    0:*/		return 0x82119AC8;
		  /* 82119AC8h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 82119AC8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82119AC8h case    1:*/		return 0x82119ACC;
		  /* 82119ACCh */ case    2:  		/* bc 12, CR6_EQ, 216 */
		/* 82119ACCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82119BA4;  }
		/* 82119ACCh case    2:*/		return 0x82119AD0;
		  /* 82119AD0h */ case    3:  		/* lwz R10, <#[R9 + 20]> */
		/* 82119AD0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000014) );
		/* 82119AD0h case    3:*/		return 0x82119AD4;
		  /* 82119AD4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82119AD4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82119AD4h case    4:*/		return 0x82119AD8;
		  /* 82119AD8h */ case    5:  		/* bc 12, CR6_EQ, 184 */
		/* 82119AD8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82119B90;  }
		/* 82119AD8h case    5:*/		return 0x82119ADC;
		  /* 82119ADCh */ case    6:  		/* mr R11, R10 */
		/* 82119ADCh case    6:*/		regs.R11 = regs.R10;
		/* 82119ADCh case    6:*/		return 0x82119AE0;
		  /* 82119AE0h */ case    7:  		/* lbz R8, <#[R11]> */
		/* 82119AE0h case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82119AE0h case    7:*/		return 0x82119AE4;
		  /* 82119AE4h */ case    8:  		/* addi R11, R11, 1 */
		/* 82119AE4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82119AE4h case    8:*/		return 0x82119AE8;
		  /* 82119AE8h */ case    9:  		/* cmplwi CR6, R8, 0 */
		/* 82119AE8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82119AE8h case    9:*/		return 0x82119AEC;
		  /* 82119AECh */ case   10:  		/* bc 4, CR6_EQ, -12 */
		/* 82119AECh case   10:*/		if ( !regs.CR[6].eq ) { return 0x82119AE0;  }
		/* 82119AECh case   10:*/		return 0x82119AF0;
		  /* 82119AF0h */ case   11:  		/* subf R11, R10, R11 */
		/* 82119AF0h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82119AF0h case   11:*/		return 0x82119AF4;
		  /* 82119AF4h */ case   12:  		/* addi R11, R11, -1 */
		/* 82119AF4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82119AF4h case   12:*/		return 0x82119AF8;
		  /* 82119AF8h */ case   13:  		/* rlwinm. R30, R11, 0, 0, 31 */
		/* 82119AF8h case   13:*/		cpu::op::rlwinm<1,0,0,31>(regs,&regs.R30,regs.R11);
		/* 82119AF8h case   13:*/		return 0x82119AFC;
		  /* 82119AFCh */ case   14:  		/* bc 12, CR0_EQ, 148 */
		/* 82119AFCh case   14:*/		if ( regs.CR[0].eq ) { return 0x82119B90;  }
		/* 82119AFCh case   14:*/		return 0x82119B00;
		  /* 82119B00h */ case   15:  		/* cmplwi CR6, R27, 0 */
		/* 82119B00h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82119B00h case   15:*/		return 0x82119B04;
		  /* 82119B04h */ case   16:  		/* bc 12, CR6_EQ, 140 */
		/* 82119B04h case   16:*/		if ( regs.CR[6].eq ) { return 0x82119B90;  }
		/* 82119B04h case   16:*/		return 0x82119B08;
		  /* 82119B08h */ case   17:  		/* add R11, R30, R27 */
		/* 82119B08h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R27);
		/* 82119B08h case   17:*/		return 0x82119B0C;
		  /* 82119B0Ch */ case   18:  		/* lwz R3, <#[R26 + 4]> */
		/* 82119B0Ch case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000004) );
		/* 82119B0Ch case   18:*/		return 0x82119B10;
		  /* 82119B10h */ case   19:  		/* li R5, 16 */
		/* 82119B10h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 82119B10h case   19:*/		return 0x82119B14;
		  /* 82119B14h */ case   20:  		/* addi R4, R11, 3 */
		/* 82119B14h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3);
		/* 82119B14h case   20:*/		return 0x82119B18;
	}
	return 0x82119B18;
} // Block from 82119AC4h-82119B18h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82119B18h
// Function '?CastToUint@CParse@D3DXShader@@IAAJPAIPAU_D3DVALUE@2@PAUD3DXTOKEN@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119B18);
		  /* 82119B18h */ case    0:  		/* bl -330296 */
		/* 82119B18h case    0:*/		regs.LR = 0x82119B1C; return 0x820C90E0;
		/* 82119B18h case    0:*/		return 0x82119B1C;
		  /* 82119B1Ch */ case    1:  		/* or. R31, R3, R3 */
		/* 82119B1Ch case    1:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82119B1Ch case    1:*/		return 0x82119B20;
		  /* 82119B20h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 82119B20h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82119B48;  }
		/* 82119B20h case    2:*/		return 0x82119B24;
		  /* 82119B24h */ case    3:  		/* lis R11, -32255 */
		/* 82119B24h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82119B24h case    3:*/		return 0x82119B28;
		  /* 82119B28h */ case    4:  		/* li R5, 0 */
		/* 82119B28h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119B28h case    4:*/		return 0x82119B2C;
		  /* 82119B2Ch */ case    5:  		/* addi R6, R11, -10040 */
		/* 82119B2Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFD8C8);
		/* 82119B2Ch case    5:*/		return 0x82119B30;
		  /* 82119B30h */ case    6:  		/* li R4, 0 */
		/* 82119B30h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119B30h case    6:*/		return 0x82119B34;
		  /* 82119B34h */ case    7:  		/* mr R3, R26 */
		/* 82119B34h case    7:*/		regs.R3 = regs.R26;
		/* 82119B34h case    7:*/		return 0x82119B38;
		  /* 82119B38h */ case    8:  		/* bl -416 */
		/* 82119B38h case    8:*/		regs.LR = 0x82119B3C; return 0x82119998;
		/* 82119B38h case    8:*/		return 0x82119B3C;
		  /* 82119B3Ch */ case    9:  		/* lis R3, -32761 */
		/* 82119B3Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82119B3Ch case    9:*/		return 0x82119B40;
		  /* 82119B40h */ case   10:  		/* ori R3, R3, 14 */
		/* 82119B40h case   10:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82119B40h case   10:*/		return 0x82119B44;
		  /* 82119B44h */ case   11:  		/* b 160 */
		/* 82119B44h case   11:*/		return 0x82119BE4;
		/* 82119B44h case   11:*/		return 0x82119B48;
	}
	return 0x82119B48;
} // Block from 82119B18h-82119B48h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82119B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119B48);
		  /* 82119B48h */ case    0:  		/* lwz R11, <#[R26 + 20]> */
		/* 82119B48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 82119B48h case    0:*/		return 0x82119B4C;
		  /* 82119B4Ch */ case    1:  		/* mr R5, R30 */
		/* 82119B4Ch case    1:*/		regs.R5 = regs.R30;
		/* 82119B4Ch case    1:*/		return 0x82119B50;
		  /* 82119B50h */ case    2:  		/* mr R3, R31 */
		/* 82119B50h case    2:*/		regs.R3 = regs.R31;
		/* 82119B50h case    2:*/		return 0x82119B54;
		  /* 82119B54h */ case    3:  		/* lwz R4, <#[R11 + 20]> */
		/* 82119B54h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 82119B54h case    3:*/		return 0x82119B58;
		  /* 82119B58h */ case    4:  		/* bl -557480 */
		/* 82119B58h case    4:*/		regs.LR = 0x82119B5C; return 0x820919B0;
		/* 82119B58h case    4:*/		return 0x82119B5C;
		  /* 82119B5Ch */ case    5:  		/* add R29, R31, R30 */
		/* 82119B5Ch case    5:*/		cpu::op::add<0>(regs,&regs.R29,regs.R31,regs.R30);
		/* 82119B5Ch case    5:*/		return 0x82119B60;
		  /* 82119B60h */ case    6:  		/* li R11, 58 */
		/* 82119B60h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x3A);
		/* 82119B60h case    6:*/		return 0x82119B64;
		  /* 82119B64h */ case    7:  		/* mr R5, R27 */
		/* 82119B64h case    7:*/		regs.R5 = regs.R27;
		/* 82119B64h case    7:*/		return 0x82119B68;
		  /* 82119B68h */ case    8:  		/* stbx R11, <#[R31 + R30]> */
		/* 82119B68h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 82119B68h case    8:*/		return 0x82119B6C;
		  /* 82119B6Ch */ case    9:  		/* mr R4, R28 */
		/* 82119B6Ch case    9:*/		regs.R4 = regs.R28;
		/* 82119B6Ch case    9:*/		return 0x82119B70;
		  /* 82119B70h */ case   10:  		/* addi R3, R29, 2 */
		/* 82119B70h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0x2);
		/* 82119B70h case   10:*/		return 0x82119B74;
		  /* 82119B74h */ case   11:  		/* stb R11, <#[R29 + 1]> */
		/* 82119B74h case   11:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R29 + 0x00000001) );
		/* 82119B74h case   11:*/		return 0x82119B78;
		  /* 82119B78h */ case   12:  		/* bl -557512 */
		/* 82119B78h case   12:*/		regs.LR = 0x82119B7C; return 0x820919B0;
		/* 82119B78h case   12:*/		return 0x82119B7C;
		  /* 82119B7Ch */ case   13:  		/* add R11, R29, R27 */
		/* 82119B7Ch case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R27);
		/* 82119B7Ch case   13:*/		return 0x82119B80;
		  /* 82119B80h */ case   14:  		/* li R10, 0 */
		/* 82119B80h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82119B80h case   14:*/		return 0x82119B84;
		  /* 82119B84h */ case   15:  		/* mr R28, R31 */
		/* 82119B84h case   15:*/		regs.R28 = regs.R31;
		/* 82119B84h case   15:*/		return 0x82119B88;
		  /* 82119B88h */ case   16:  		/* stb R10, <#[R11 + 2]> */
		/* 82119B88h case   16:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82119B88h case   16:*/		return 0x82119B8C;
		  /* 82119B8Ch */ case   17:  		/* b 24 */
		/* 82119B8Ch case   17:*/		return 0x82119BA4;
		/* 82119B8Ch case   17:*/		return 0x82119B90;
	}
	return 0x82119B90;
} // Block from 82119B48h-82119B90h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82119B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119B90);
		  /* 82119B90h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82119B90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82119B90h case    0:*/		return 0x82119B94;
		  /* 82119B94h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82119B94h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119BA4;  }
		/* 82119B94h case    1:*/		return 0x82119B98;
	}
	return 0x82119B98;
} // Block from 82119B90h-82119B98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119B98h
// Function '?CastToValue@CParse@D3DXShader@@IAAJPAU_D3DVALUE@2@NPAUD3DXTOKEN@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119B98);
		  /* 82119B98h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82119B98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82119B98h case    0:*/		return 0x82119B9C;
		  /* 82119B9Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82119B9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119BA4;  }
		/* 82119B9Ch case    1:*/		return 0x82119BA0;
		  /* 82119BA0h */ case    2:  		/* lwz R28, <#[R9 + 20]> */
		/* 82119BA0h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R9 + 0x00000014) );
		/* 82119BA0h case    2:*/		return 0x82119BA4;
	}
	return 0x82119BA4;
} // Block from 82119B98h-82119BA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119BA4);
		  /* 82119BA4h */ case    0:  		/* li R3, 36 */
		/* 82119BA4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x24);
		/* 82119BA4h case    0:*/		return 0x82119BA8;
		  /* 82119BA8h */ case    1:  		/* bl -330112 */
		/* 82119BA8h case    1:*/		regs.LR = 0x82119BAC; return 0x820C9228;
		/* 82119BA8h case    1:*/		return 0x82119BAC;
		  /* 82119BACh */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82119BACh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119BACh case    2:*/		return 0x82119BB0;
		  /* 82119BB0h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 82119BB0h case    3:*/		if ( regs.CR[0].eq ) { return 0x82119BD0;  }
		/* 82119BB0h case    3:*/		return 0x82119BB4;
		  /* 82119BB4h */ case    4:  		/* li R7, 0 */
		/* 82119BB4h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82119BB4h case    4:*/		return 0x82119BB8;
		  /* 82119BB8h */ case    5:  		/* lwz R8, <#[R26 + 20]> */
		/* 82119BB8h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000014) );
		/* 82119BB8h case    5:*/		return 0x82119BBC;
		  /* 82119BBCh */ case    6:  		/* li R6, 0 */
		/* 82119BBCh case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82119BBCh case    6:*/		return 0x82119BC0;
		  /* 82119BC0h */ case    7:  		/* mr R5, R28 */
		/* 82119BC0h case    7:*/		regs.R5 = regs.R28;
		/* 82119BC0h case    7:*/		return 0x82119BC4;
		  /* 82119BC4h */ case    8:  		/* mr R4, R25 */
		/* 82119BC4h case    8:*/		regs.R4 = regs.R25;
		/* 82119BC4h case    8:*/		return 0x82119BC8;
		  /* 82119BC8h */ case    9:  		/* bl -327664 */
		/* 82119BC8h case    9:*/		regs.LR = 0x82119BCC; return 0x820C9BD8;
		/* 82119BC8h case    9:*/		return 0x82119BCC;
		  /* 82119BCCh */ case   10:  		/* b 8 */
		/* 82119BCCh case   10:*/		return 0x82119BD4;
		/* 82119BCCh case   10:*/		return 0x82119BD0;
	}
	return 0x82119BD0;
} // Block from 82119BA4h-82119BD0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82119BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119BD0);
		  /* 82119BD0h */ case    0:  		/* li R3, 0 */
		/* 82119BD0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119BD0h case    0:*/		return 0x82119BD4;
	}
	return 0x82119BD4;
} // Block from 82119BD0h-82119BD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119BD4);
		  /* 82119BD4h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82119BD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119BD4h case    0:*/		return 0x82119BD8;
		  /* 82119BD8h */ case    1:  		/* bc 12, CR6_EQ, -180 */
		/* 82119BD8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119B24;  }
		/* 82119BD8h case    1:*/		return 0x82119BDC;
		  /* 82119BDCh */ case    2:  		/* stw R3, <#[R26 + 20]> */
		/* 82119BDCh case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000014) );
		/* 82119BDCh case    2:*/		return 0x82119BE0;
		  /* 82119BE0h */ case    3:  		/* li R3, 0 */
		/* 82119BE0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119BE0h case    3:*/		return 0x82119BE4;
	}
	return 0x82119BE4;
} // Block from 82119BD4h-82119BE4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82119BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119BE4);
		  /* 82119BE4h */ case    0:  		/* addi R1, R1, 176 */
		/* 82119BE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82119BE4h case    0:*/		return 0x82119BE8;
		  /* 82119BE8h */ case    1:  		/* b -559436 */
		/* 82119BE8h case    1:*/		return 0x8209129C;
		/* 82119BE8h case    1:*/		return 0x82119BEC;
		  /* 82119BECh */ case    2:  		/* nop */
		/* 82119BECh case    2:*/		cpu::op::nop();
		/* 82119BECh case    2:*/		return 0x82119BF0;
	}
	return 0x82119BF0;
} // Block from 82119BE4h-82119BF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119BF0);
		  /* 82119BF0h */ case    0:  		/* mfspr R12, LR */
		/* 82119BF0h case    0:*/		regs.R12 = regs.LR;
		/* 82119BF0h case    0:*/		return 0x82119BF4;
		  /* 82119BF4h */ case    1:  		/* bl -559512 */
		/* 82119BF4h case    1:*/		regs.LR = 0x82119BF8; return 0x8209125C;
		/* 82119BF4h case    1:*/		return 0x82119BF8;
		  /* 82119BF8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82119BF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82119BF8h case    2:*/		return 0x82119BFC;
		  /* 82119BFCh */ case    3:  		/* lwz R11, <#[R3 + 20]> */
		/* 82119BFCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82119BFCh case    3:*/		return 0x82119C00;
		  /* 82119C00h */ case    4:  		/* mr R30, R3 */
		/* 82119C00h case    4:*/		regs.R30 = regs.R3;
		/* 82119C00h case    4:*/		return 0x82119C04;
		  /* 82119C04h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82119C04h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82119C04h case    5:*/		return 0x82119C08;
		  /* 82119C08h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 82119C08h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82119C2C;  }
		/* 82119C08h case    6:*/		return 0x82119C0C;
		  /* 82119C0Ch */ case    7:  		/* lis R11, -32253 */
		/* 82119C0Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119C0Ch case    7:*/		return 0x82119C10;
		  /* 82119C10h */ case    8:  		/* li R5, 0 */
		/* 82119C10h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119C10h case    8:*/		return 0x82119C14;
		  /* 82119C14h */ case    9:  		/* addi R6, R11, 8164 */
		/* 82119C14h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1FE4);
		/* 82119C14h case    9:*/		return 0x82119C18;
		  /* 82119C18h */ case   10:  		/* li R4, 0 */
		/* 82119C18h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119C18h case   10:*/		return 0x82119C1C;
		  /* 82119C1Ch */ case   11:  		/* bl -644 */
		/* 82119C1Ch case   11:*/		regs.LR = 0x82119C20; return 0x82119998;
		/* 82119C1Ch case   11:*/		return 0x82119C20;
		  /* 82119C20h */ case   12:  		/* lis R3, -32768 */
		/* 82119C20h case   12:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82119C20h case   12:*/		return 0x82119C24;
		  /* 82119C24h */ case   13:  		/* ori R3, R3, 16389 */
		/* 82119C24h case   13:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82119C24h case   13:*/		return 0x82119C28;
		  /* 82119C28h */ case   14:  		/* b 180 */
		/* 82119C28h case   14:*/		return 0x82119CDC;
		/* 82119C28h case   14:*/		return 0x82119C2C;
	}
	return 0x82119C2C;
} // Block from 82119BF0h-82119C2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82119C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119C2C);
		  /* 82119C2Ch */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 82119C2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82119C2Ch case    0:*/		return 0x82119C30;
	}
	return 0x82119C30;
} // Block from 82119C2Ch-82119C30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119C30h
// Function '?Stmt@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119C30);
		  /* 82119C30h */ case    0:  		/* li R29, 0 */
		/* 82119C30h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82119C30h case    0:*/		return 0x82119C34;
		  /* 82119C34h */ case    1:  		/* cmpwi CR6, R10, 4 */
		/* 82119C34h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 82119C34h case    1:*/		return 0x82119C38;
		  /* 82119C38h */ case    2:  		/* bc 4, CR6_EQ, 144 */
		/* 82119C38h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82119CC8;  }
		/* 82119C38h case    2:*/		return 0x82119C3C;
		  /* 82119C3Ch */ case    3:  		/* lwz R10, <#[R11 + 32]> */
		/* 82119C3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 82119C3Ch case    3:*/		return 0x82119C40;
		  /* 82119C40h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82119C40h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82119C40h case    4:*/		return 0x82119C44;
		  /* 82119C44h */ case    5:  		/* bc 12, CR6_EQ, 132 */
		/* 82119C44h case    5:*/		if ( regs.CR[6].eq ) { return 0x82119CC8;  }
		/* 82119C44h case    5:*/		return 0x82119C48;
		  /* 82119C48h */ case    6:  		/* lwz R10, <#[R10 + 16]> */
		/* 82119C48h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 82119C48h case    6:*/		return 0x82119C4C;
		  /* 82119C4Ch */ case    7:  		/* cmpwi CR6, R10, 4 */
		/* 82119C4Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 82119C4Ch case    7:*/		return 0x82119C50;
		  /* 82119C50h */ case    8:  		/* bc 12, CR6_EQ, 120 */
		/* 82119C50h case    8:*/		if ( regs.CR[6].eq ) { return 0x82119CC8;  }
		/* 82119C50h case    8:*/		return 0x82119C54;
		  /* 82119C54h */ case    9:  		/* addi R31, R11, 24 */
		/* 82119C54h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x18);
		/* 82119C54h case    9:*/		return 0x82119C58;
		  /* 82119C58h */ case   10:  		/* lwz R11, <#[R11 + 24]> */
		/* 82119C58h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82119C58h case   10:*/		return 0x82119C5C;
		  /* 82119C5Ch */ case   11:  		/* b 60 */
		/* 82119C5Ch case   11:*/		return 0x82119C98;
		/* 82119C5Ch case   11:*/		return 0x82119C60;
		  /* 82119C60h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 82119C60h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82119C60h case   12:*/		return 0x82119C64;
		  /* 82119C64h */ case   13:  		/* li R10, 1 */
		/* 82119C64h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82119C64h case   13:*/		return 0x82119C68;
		  /* 82119C68h */ case   14:  		/* mr R3, R30 */
		/* 82119C68h case   14:*/		regs.R3 = regs.R30;
		/* 82119C68h case   14:*/		return 0x82119C6C;
		  /* 82119C6Ch */ case   15:  		/* stw R10, <#[R11 + 48]> */
		/* 82119C6Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82119C6Ch case   15:*/		return 0x82119C70;
		  /* 82119C70h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 82119C70h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82119C70h case   16:*/		return 0x82119C74;
		  /* 82119C74h */ case   17:  		/* lwz R10, <#[R30 + 20]> */
		/* 82119C74h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 82119C74h case   17:*/		return 0x82119C78;
		  /* 82119C78h */ case   18:  		/* lwz R5, <#[R11 + 8]> */
		/* 82119C78h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 82119C78h case   18:*/		return 0x82119C7C;
		  /* 82119C7Ch */ case   19:  		/* lwz R4, <#[R10 + 32]> */
		/* 82119C7Ch case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000020) );
		/* 82119C7Ch case   19:*/		return 0x82119C80;
		  /* 82119C80h */ case   20:  		/* bl -7616 */
		/* 82119C80h case   20:*/		regs.LR = 0x82119C84; return 0x82117EC0;
		/* 82119C80h case   20:*/		return 0x82119C84;
		  /* 82119C84h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 82119C84h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82119C84h case   21:*/		return 0x82119C88;
		  /* 82119C88h */ case   22:  		/* bc 12, CR0_LT, 84 */
		/* 82119C88h case   22:*/		if ( regs.CR[0].lt ) { return 0x82119CDC;  }
		/* 82119C88h case   22:*/		return 0x82119C8C;
		  /* 82119C8Ch */ case   23:  		/* lwz R11, <#[R31]> */
		/* 82119C8Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82119C8Ch case   23:*/		return 0x82119C90;
		  /* 82119C90h */ case   24:  		/* addi R31, R11, 12 */
		/* 82119C90h case   24:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xC);
		/* 82119C90h case   24:*/		return 0x82119C94;
		  /* 82119C94h */ case   25:  		/* lwz R11, <#[R11 + 12]> */
		/* 82119C94h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82119C94h case   25:*/		return 0x82119C98;
	}
	return 0x82119C98;
} // Block from 82119C30h-82119C98h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82119C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119C98);
		  /* 82119C98h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82119C98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82119C98h case    0:*/		return 0x82119C9C;
		  /* 82119C9Ch */ case    1:  		/* bc 4, CR6_EQ, -60 */
		/* 82119C9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119C60;  }
		/* 82119C9Ch case    1:*/		return 0x82119CA0;
		  /* 82119CA0h */ case    2:  		/* lwz R11, <#[R30 + 20]> */
		/* 82119CA0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82119CA0h case    2:*/		return 0x82119CA4;
		  /* 82119CA4h */ case    3:  		/* lwz R11, <#[R11 + 32]> */
		/* 82119CA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 82119CA4h case    3:*/		return 0x82119CA8;
		  /* 82119CA8h */ case    4:  		/* lwz R11, <#[R11 + 24]> */
		/* 82119CA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82119CA8h case    4:*/		return 0x82119CAC;
		  /* 82119CACh */ case    5:  		/* stw R11, <#[R31]> */
		/* 82119CACh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82119CACh case    5:*/		return 0x82119CB0;
		  /* 82119CB0h */ case    6:  		/* lwz R11, <#[R30 + 20]> */
		/* 82119CB0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82119CB0h case    6:*/		return 0x82119CB4;
		  /* 82119CB4h */ case    7:  		/* lwz R10, <#[R11 + 32]> */
		/* 82119CB4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 82119CB4h case    7:*/		return 0x82119CB8;
		  /* 82119CB8h */ case    8:  		/* lwz R11, <#[R11 + 24]> */
		/* 82119CB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82119CB8h case    8:*/		return 0x82119CBC;
		  /* 82119CBCh */ case    9:  		/* stw R11, <#[R10 + 24]> */
		/* 82119CBCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 82119CBCh case    9:*/		return 0x82119CC0;
		  /* 82119CC0h */ case   10:  		/* lwz R11, <#[R30 + 20]> */
		/* 82119CC0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82119CC0h case   10:*/		return 0x82119CC4;
		  /* 82119CC4h */ case   11:  		/* stw R29, <#[R11 + 24]> */
		/* 82119CC4h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000018) );
		/* 82119CC4h case   11:*/		return 0x82119CC8;
	}
	return 0x82119CC8;
} // Block from 82119C98h-82119CC8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82119CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119CC8);
		  /* 82119CC8h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 82119CC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82119CC8h case    0:*/		return 0x82119CCC;
		  /* 82119CCCh */ case    1:  		/* li R3, 0 */
		/* 82119CCCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119CCCh case    1:*/		return 0x82119CD0;
		  /* 82119CD0h */ case    2:  		/* lwz R10, <#[R11 + 32]> */
		/* 82119CD0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 82119CD0h case    2:*/		return 0x82119CD4;
		  /* 82119CD4h */ case    3:  		/* stw R10, <#[R30 + 20]> */
		/* 82119CD4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 82119CD4h case    3:*/		return 0x82119CD8;
		  /* 82119CD8h */ case    4:  		/* stw R29, <#[R11 + 32]> */
		/* 82119CD8h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000020) );
		/* 82119CD8h case    4:*/		return 0x82119CDC;
	}
	return 0x82119CDC;
} // Block from 82119CC8h-82119CDCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82119CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119CDC);
		  /* 82119CDCh */ case    0:  		/* addi R1, R1, 144 */
		/* 82119CDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82119CDCh case    0:*/		return 0x82119CE0;
		  /* 82119CE0h */ case    1:  		/* b -559668 */
		/* 82119CE0h case    1:*/		return 0x820912AC;
		/* 82119CE0h case    1:*/		return 0x82119CE4;
		  /* 82119CE4h */ case    2:  		/* nop */
		/* 82119CE4h case    2:*/		cpu::op::nop();
		/* 82119CE4h case    2:*/		return 0x82119CE8;
	}
	return 0x82119CE8;
} // Block from 82119CDCh-82119CE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119CE8);
		  /* 82119CE8h */ case    0:  		/* mfspr R12, LR */
		/* 82119CE8h case    0:*/		regs.R12 = regs.LR;
		/* 82119CE8h case    0:*/		return 0x82119CEC;
		  /* 82119CECh */ case    1:  		/* bl -559764 */
		/* 82119CECh case    1:*/		regs.LR = 0x82119CF0; return 0x82091258;
		/* 82119CECh case    1:*/		return 0x82119CF0;
	}
	return 0x82119CF0;
} // Block from 82119CE8h-82119CF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119CF0h
// Function '?BreakStmt@CParse@D3DXShader@@IAAPAVCNode@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119CF0);
		  /* 82119CF0h */ case    0:  		/* stwu R1, <#[R1 - 160]> */
		/* 82119CF0h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82119CF0h case    0:*/		return 0x82119CF4;
		  /* 82119CF4h */ case    1:  		/* mr R28, R5 */
		/* 82119CF4h case    1:*/		regs.R28 = regs.R5;
		/* 82119CF4h case    1:*/		return 0x82119CF8;
		  /* 82119CF8h */ case    2:  		/* lwz R5, <#[R3 + 20]> */
		/* 82119CF8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000014) );
		/* 82119CF8h case    2:*/		return 0x82119CFC;
		  /* 82119CFCh */ case    3:  		/* mr R31, R3 */
		/* 82119CFCh case    3:*/		regs.R31 = regs.R3;
		/* 82119CFCh case    3:*/		return 0x82119D00;
		  /* 82119D00h */ case    4:  		/* mr R29, R4 */
		/* 82119D00h case    4:*/		regs.R29 = regs.R4;
		/* 82119D00h case    4:*/		return 0x82119D04;
		  /* 82119D04h */ case    5:  		/* cmplwi CR6, R5, 0 */
		/* 82119D04h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82119D04h case    5:*/		return 0x82119D08;
		  /* 82119D08h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 82119D08h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82119D2C;  }
		/* 82119D08h case    6:*/		return 0x82119D0C;
		  /* 82119D0Ch */ case    7:  		/* lis R11, -32253 */
		/* 82119D0Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119D0Ch case    7:*/		return 0x82119D10;
		  /* 82119D10h */ case    8:  		/* li R5, 0 */
		/* 82119D10h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119D10h case    8:*/		return 0x82119D14;
		  /* 82119D14h */ case    9:  		/* addi R6, R11, 8260 */
		/* 82119D14h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2044);
		/* 82119D14h case    9:*/		return 0x82119D18;
		  /* 82119D18h */ case   10:  		/* li R4, 0 */
		/* 82119D18h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119D18h case   10:*/		return 0x82119D1C;
		  /* 82119D1Ch */ case   11:  		/* bl -900 */
		/* 82119D1Ch case   11:*/		regs.LR = 0x82119D20; return 0x82119998;
		/* 82119D1Ch case   11:*/		return 0x82119D20;
		  /* 82119D20h */ case   12:  		/* lis R3, -32768 */
		/* 82119D20h case   12:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82119D20h case   12:*/		return 0x82119D24;
		  /* 82119D24h */ case   13:  		/* ori R3, R3, 16389 */
		/* 82119D24h case   13:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 82119D24h case   13:*/		return 0x82119D28;
		  /* 82119D28h */ case   14:  		/* b 412 */
		/* 82119D28h case   14:*/		return 0x82119EC4;
		/* 82119D28h case   14:*/		return 0x82119D2C;
	}
	return 0x82119D2C;
} // Block from 82119CF0h-82119D2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82119D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119D2C);
		  /* 82119D2Ch */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 82119D2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82119D2Ch case    0:*/		return 0x82119D30;
		  /* 82119D30h */ case    1:  		/* addi R30, R11, 16 */
		/* 82119D30h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x10);
		/* 82119D30h case    1:*/		return 0x82119D34;
		  /* 82119D34h */ case    2:  		/* mr R4, R30 */
		/* 82119D34h case    2:*/		regs.R4 = regs.R30;
		/* 82119D34h case    2:*/		return 0x82119D38;
		  /* 82119D38h */ case    3:  		/* bl -7200 */
		/* 82119D38h case    3:*/		regs.LR = 0x82119D3C; return 0x82118118;
		/* 82119D38h case    3:*/		return 0x82119D3C;
		  /* 82119D3Ch */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82119D3Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119D3Ch case    4:*/		return 0x82119D40;
		  /* 82119D40h */ case    5:  		/* bc 12, CR0_EQ, 56 */
		/* 82119D40h case    5:*/		if ( regs.CR[0].eq ) { return 0x82119D78;  }
		/* 82119D40h case    5:*/		return 0x82119D44;
		  /* 82119D44h */ case    6:  		/* lwz R4, <#[R3 + 8]> */
		/* 82119D44h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000008) );
		/* 82119D44h case    6:*/		return 0x82119D48;
		  /* 82119D48h */ case    7:  		/* lwz R11, <#[R4 + 48]> */
		/* 82119D48h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 82119D48h case    7:*/		return 0x82119D4C;
		  /* 82119D4Ch */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 82119D4Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82119D4Ch case    8:*/		return 0x82119D50;
		  /* 82119D50h */ case    9:  		/* bc 4, CR6_EQ, 28 */
		/* 82119D50h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82119D6C;  }
		/* 82119D50h case    9:*/		return 0x82119D54;
		  /* 82119D54h */ case   10:  		/* lwz R11, <#[R29 + 16]> */
		/* 82119D54h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82119D54h case   10:*/		return 0x82119D58;
		  /* 82119D58h */ case   11:  		/* cmpwi CR6, R11, 2 */
		/* 82119D58h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82119D58h case   11:*/		return 0x82119D5C;
		  /* 82119D5Ch */ case   12:  		/* bc 4, CR6_EQ, 104 */
		/* 82119D5Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82119DC4;  }
		/* 82119D5Ch case   12:*/		return 0x82119D60;
		  /* 82119D60h */ case   13:  		/* lwz R11, <#[R4 + 16]> */
		/* 82119D60h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 82119D60h case   13:*/		return 0x82119D64;
		  /* 82119D64h */ case   14:  		/* cmpwi CR6, R11, 2 */
		/* 82119D64h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82119D64h case   14:*/		return 0x82119D68;
		  /* 82119D68h */ case   15:  		/* bc 4, CR6_EQ, 92 */
		/* 82119D68h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82119DC4;  }
		/* 82119D68h case   15:*/		return 0x82119D6C;
	}
	return 0x82119D6C;
} // Block from 82119D2Ch-82119D6Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82119D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119D6C);
		  /* 82119D6Ch */ case    0:  		/* lwz R3, <#[R3 + 12]> */
		/* 82119D6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 82119D6Ch case    0:*/		return 0x82119D70;
		  /* 82119D70h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82119D70h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82119D70h case    1:*/		return 0x82119D74;
		  /* 82119D74h */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 82119D74h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82119D44;  }
		/* 82119D74h case    2:*/		return 0x82119D78;
	}
	return 0x82119D78;
} // Block from 82119D6Ch-82119D78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119D78);
		  /* 82119D78h */ case    0:  		/* lwz R11, <#[R5 + 32]> */
		/* 82119D78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000020) );
		/* 82119D78h case    0:*/		return 0x82119D7C;
		  /* 82119D7Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82119D7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82119D7Ch case    1:*/		return 0x82119D80;
		  /* 82119D80h */ case    2:  		/* bc 12, CR6_EQ, 132 */
		/* 82119D80h case    2:*/		if ( regs.CR[6].eq ) { return 0x82119E04;  }
		/* 82119D80h case    2:*/		return 0x82119D84;
		  /* 82119D84h */ case    3:  		/* lwz R10, <#[R5 + 16]> */
		/* 82119D84h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000010) );
		/* 82119D84h case    3:*/		return 0x82119D88;
		  /* 82119D88h */ case    4:  		/* cmpwi CR6, R10, 3 */
		/* 82119D88h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 82119D88h case    4:*/		return 0x82119D8C;
		  /* 82119D8Ch */ case    5:  		/* bc 4, CR6_EQ, 120 */
		/* 82119D8Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82119E04;  }
		/* 82119D8Ch case    5:*/		return 0x82119D90;
		  /* 82119D90h */ case    6:  		/* lwz R10, <#[R11 + 16]> */
		/* 82119D90h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82119D90h case    6:*/		return 0x82119D94;
		  /* 82119D94h */ case    7:  		/* cmpwi CR6, R10, 2 */
		/* 82119D94h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 82119D94h case    7:*/		return 0x82119D98;
		  /* 82119D98h */ case    8:  		/* bc 4, CR6_EQ, 108 */
		/* 82119D98h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82119E04;  }
		/* 82119D98h case    8:*/		return 0x82119D9C;
		  /* 82119D9Ch */ case    9:  		/* mr R5, R11 */
		/* 82119D9Ch case    9:*/		regs.R5 = regs.R11;
		/* 82119D9Ch case    9:*/		return 0x82119DA0;
		  /* 82119DA0h */ case   10:  		/* mr R4, R30 */
		/* 82119DA0h case   10:*/		regs.R4 = regs.R30;
		/* 82119DA0h case   10:*/		return 0x82119DA4;
		  /* 82119DA4h */ case   11:  		/* mr R3, R31 */
		/* 82119DA4h case   11:*/		regs.R3 = regs.R31;
		/* 82119DA4h case   11:*/		return 0x82119DA8;
		  /* 82119DA8h */ case   12:  		/* bl -7312 */
		/* 82119DA8h case   12:*/		regs.LR = 0x82119DAC; return 0x82118118;
		/* 82119DA8h case   12:*/		return 0x82119DAC;
		  /* 82119DACh */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 82119DACh case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119DACh case   13:*/		return 0x82119DB0;
		  /* 82119DB0h */ case   14:  		/* bc 12, CR0_EQ, 84 */
		/* 82119DB0h case   14:*/		if ( regs.CR[0].eq ) { return 0x82119E04;  }
		/* 82119DB0h case   14:*/		return 0x82119DB4;
		  /* 82119DB4h */ case   15:  		/* lis R11, -32253 */
		/* 82119DB4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119DB4h case   15:*/		return 0x82119DB8;
		  /* 82119DB8h */ case   16:  		/* li R5, 3036 */
		/* 82119DB8h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0xBDC);
		/* 82119DB8h case   16:*/		return 0x82119DBC;
		  /* 82119DBCh */ case   17:  		/* addi R6, R11, 8220 */
		/* 82119DBCh case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x201C);
		/* 82119DBCh case   17:*/		return 0x82119DC0;
		  /* 82119DC0h */ case   18:  		/* b 48 */
		/* 82119DC0h case   18:*/		return 0x82119DF0;
		/* 82119DC0h case   18:*/		return 0x82119DC4;
	}
	return 0x82119DC4;
} // Block from 82119D78h-82119DC4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82119DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119DC4);
		  /* 82119DC4h */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 82119DC4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82119DC4h case    0:*/		return 0x82119DC8;
		  /* 82119DC8h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82119DC8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119DE4;  }
		/* 82119DC8h case    1:*/		return 0x82119DCC;
		  /* 82119DCCh */ case    2:  		/* mr R3, R29 */
		/* 82119DCCh case    2:*/		regs.R3 = regs.R29;
		/* 82119DCCh case    2:*/		return 0x82119DD0;
		  /* 82119DD0h */ case    3:  		/* bl -330384 */
		/* 82119DD0h case    3:*/		regs.LR = 0x82119DD4; return 0x820C9340;
		/* 82119DD0h case    3:*/		return 0x82119DD4;
		  /* 82119DD4h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82119DD4h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82119DD4h case    4:*/		return 0x82119DD8;
		  /* 82119DD8h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82119DD8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82119DE4;  }
		/* 82119DD8h case    5:*/		return 0x82119DDC;
		  /* 82119DDCh */ case    6:  		/* li R3, 0 */
		/* 82119DDCh case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119DDCh case    6:*/		return 0x82119DE0;
		  /* 82119DE0h */ case    7:  		/* b 228 */
		/* 82119DE0h case    7:*/		return 0x82119EC4;
		/* 82119DE0h case    7:*/		return 0x82119DE4;
	}
	return 0x82119DE4;
} // Block from 82119DC4h-82119DE4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82119DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119DE4);
		  /* 82119DE4h */ case    0:  		/* lis R11, -32253 */
		/* 82119DE4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119DE4h case    0:*/		return 0x82119DE8;
		  /* 82119DE8h */ case    1:  		/* li R5, 3003 */
		/* 82119DE8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBBB);
		/* 82119DE8h case    1:*/		return 0x82119DEC;
		  /* 82119DECh */ case    2:  		/* addi R6, R11, 8196 */
		/* 82119DECh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2004);
		/* 82119DECh case    2:*/		return 0x82119DF0;
	}
	return 0x82119DF0;
} // Block from 82119DE4h-82119DF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119DF0);
		  /* 82119DF0h */ case    0:  		/* mr R4, R30 */
		/* 82119DF0h case    0:*/		regs.R4 = regs.R30;
		/* 82119DF0h case    0:*/		return 0x82119DF4;
		  /* 82119DF4h */ case    1:  		/* lwz R7, <#[R30 + 8]> */
		/* 82119DF4h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000008) );
		/* 82119DF4h case    1:*/		return 0x82119DF8;
	}
	return 0x82119DF8;
} // Block from 82119DF0h-82119DF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119DF8h
// Function '?ContinueStmt@CParse@D3DXShader@@IAAPAVCNode@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119DF8);
		  /* 82119DF8h */ case    0:  		/* mr R3, R31 */
		/* 82119DF8h case    0:*/		regs.R3 = regs.R31;
		/* 82119DF8h case    0:*/		return 0x82119DFC;
		  /* 82119DFCh */ case    1:  		/* bl -1372 */
		/* 82119DFCh case    1:*/		regs.LR = 0x82119E00; return 0x821198A0;
		/* 82119DFCh case    1:*/		return 0x82119E00;
		  /* 82119E00h */ case    2:  		/* b -224 */
		/* 82119E00h case    2:*/		return 0x82119D20;
		/* 82119E00h case    2:*/		return 0x82119E04;
	}
	return 0x82119E04;
} // Block from 82119DF8h-82119E04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119E04);
		  /* 82119E04h */ case    0:  		/* li R3, 20 */
		/* 82119E04h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82119E04h case    0:*/		return 0x82119E08;
		  /* 82119E08h */ case    1:  		/* bl -330720 */
		/* 82119E08h case    1:*/		regs.LR = 0x82119E0C; return 0x820C9228;
		/* 82119E08h case    1:*/		return 0x82119E0C;
		  /* 82119E0Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82119E0Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119E0Ch case    2:*/		return 0x82119E10;
		  /* 82119E10h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 82119E10h case    3:*/		if ( regs.CR[0].eq ) { return 0x82119E30;  }
		/* 82119E10h case    3:*/		return 0x82119E14;
		  /* 82119E14h */ case    4:  		/* lis R11, -32253 */
		/* 82119E14h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119E14h case    4:*/		return 0x82119E18;
		  /* 82119E18h */ case    5:  		/* li R5, 0 */
		/* 82119E18h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119E18h case    5:*/		return 0x82119E1C;
		  /* 82119E1Ch */ case    6:  		/* addi R6, R11, 7492 */
		/* 82119E1Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1D44);
		/* 82119E1Ch case    6:*/		return 0x82119E20;
		  /* 82119E20h */ case    7:  		/* li R4, 0 */
		/* 82119E20h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119E20h case    7:*/		return 0x82119E24;
		  /* 82119E24h */ case    8:  		/* bl -330292 */
		/* 82119E24h case    8:*/		regs.LR = 0x82119E28; return 0x820C93F0;
		/* 82119E24h case    8:*/		return 0x82119E28;
		  /* 82119E28h */ case    9:  		/* mr R30, R3 */
		/* 82119E28h case    9:*/		regs.R30 = regs.R3;
		/* 82119E28h case    9:*/		return 0x82119E2C;
		  /* 82119E2Ch */ case   10:  		/* b 8 */
		/* 82119E2Ch case   10:*/		return 0x82119E34;
		/* 82119E2Ch case   10:*/		return 0x82119E30;
	}
	return 0x82119E30;
} // Block from 82119E04h-82119E30h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82119E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119E30);
		  /* 82119E30h */ case    0:  		/* li R30, 0 */
		/* 82119E30h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82119E30h case    0:*/		return 0x82119E34;
	}
	return 0x82119E34;
} // Block from 82119E30h-82119E34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119E34);
		  /* 82119E34h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82119E34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82119E34h case    0:*/		return 0x82119E38;
		  /* 82119E38h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82119E38h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119E48;  }
		/* 82119E38h case    1:*/		return 0x82119E3C;
		  /* 82119E3Ch */ case    2:  		/* lis R3, -32761 */
		/* 82119E3Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82119E3Ch case    2:*/		return 0x82119E40;
		  /* 82119E40h */ case    3:  		/* ori R3, R3, 14 */
		/* 82119E40h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 82119E40h case    3:*/		return 0x82119E44;
		  /* 82119E44h */ case    4:  		/* b 128 */
		/* 82119E44h case    4:*/		return 0x82119EC4;
		/* 82119E44h case    4:*/		return 0x82119E48;
	}
	return 0x82119E48;
} // Block from 82119E34h-82119E48h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82119E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119E48);
		  /* 82119E48h */ case    0:  		/* mr R3, R29 */
		/* 82119E48h case    0:*/		regs.R3 = regs.R29;
		/* 82119E48h case    0:*/		return 0x82119E4C;
		  /* 82119E4Ch */ case    1:  		/* bl -330468 */
		/* 82119E4Ch case    1:*/		regs.LR = 0x82119E50; return 0x820C9368;
		/* 82119E4Ch case    1:*/		return 0x82119E50;
		  /* 82119E50h */ case    2:  		/* or. R11, R3, R3 */
		/* 82119E50h case    2:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 82119E50h case    2:*/		return 0x82119E54;
		  /* 82119E54h */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 82119E54h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82119E54h case    3:*/		return 0x82119E58;
		  /* 82119E58h */ case    4:  		/* bc 12, CR0_EQ, -28 */
		/* 82119E58h case    4:*/		if ( regs.CR[0].eq ) { return 0x82119E3C;  }
		/* 82119E58h case    4:*/		return 0x82119E5C;
		  /* 82119E5Ch */ case    5:  		/* lwz R10, <#[R31 + 20]> */
		/* 82119E5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82119E5Ch case    5:*/		return 0x82119E60;
		  /* 82119E60h */ case    6:  		/* mr R3, R31 */
		/* 82119E60h case    6:*/		regs.R3 = regs.R31;
		/* 82119E60h case    6:*/		return 0x82119E64;
		  /* 82119E64h */ case    7:  		/* lwz R10, <#[R10 + 20]> */
		/* 82119E64h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 82119E64h case    7:*/		return 0x82119E68;
		  /* 82119E68h */ case    8:  		/* stw R10, <#[R11 + 36]> */
		/* 82119E68h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 82119E68h case    8:*/		return 0x82119E6C;
		  /* 82119E6Ch */ case    9:  		/* lwz R11, <#[R30 + 8]> */
		/* 82119E6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82119E6Ch case    9:*/		return 0x82119E70;
		  /* 82119E70h */ case   10:  		/* lwz R11, <#[R11 + 36]> */
		/* 82119E70h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82119E70h case   10:*/		return 0x82119E74;
		  /* 82119E74h */ case   11:  		/* stw R11, <#[R29 + 36]> */
		/* 82119E74h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 82119E74h case   11:*/		return 0x82119E78;
		  /* 82119E78h */ case   12:  		/* lwz R11, <#[R31 + 96]> */
		/* 82119E78h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 82119E78h case   12:*/		return 0x82119E7C;
		  /* 82119E7Ch */ case   13:  		/* lwz R10, <#[R30 + 8]> */
		/* 82119E7Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 82119E7Ch case   13:*/		return 0x82119E80;
		  /* 82119E80h */ case   14:  		/* stw R11, <#[R10 + 40]> */
		/* 82119E80h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 82119E80h case   14:*/		return 0x82119E84;
		  /* 82119E84h */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 82119E84h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82119E84h case   15:*/		return 0x82119E88;
		  /* 82119E88h */ case   16:  		/* lwz R11, <#[R11 + 40]> */
		/* 82119E88h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82119E88h case   16:*/		return 0x82119E8C;
		  /* 82119E8Ch */ case   17:  		/* stw R11, <#[R29 + 40]> */
		/* 82119E8Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 82119E8Ch case   17:*/		return 0x82119E90;
		  /* 82119E90h */ case   18:  		/* lwz R10, <#[R31 + 20]> */
		/* 82119E90h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82119E90h case   18:*/		return 0x82119E94;
		  /* 82119E94h */ case   19:  		/* lwz R11, <#[R31 + 96]> */
		/* 82119E94h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 82119E94h case   19:*/		return 0x82119E98;
		  /* 82119E98h */ case   20:  		/* addi R11, R11, 1 */
		/* 82119E98h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82119E98h case   20:*/		return 0x82119E9C;
		  /* 82119E9Ch */ case   21:  		/* stw R11, <#[R31 + 96]> */
		/* 82119E9Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 82119E9Ch case   21:*/		return 0x82119EA0;
		  /* 82119EA0h */ case   22:  		/* lwz R11, <#[R10 + 24]> */
		/* 82119EA0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 82119EA0h case   22:*/		return 0x82119EA4;
		  /* 82119EA4h */ case   23:  		/* stw R11, <#[R30 + 12]> */
		/* 82119EA4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82119EA4h case   23:*/		return 0x82119EA8;
		  /* 82119EA8h */ case   24:  		/* lwz R11, <#[R31 + 20]> */
		/* 82119EA8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82119EA8h case   24:*/		return 0x82119EAC;
		  /* 82119EACh */ case   25:  		/* stw R30, <#[R11 + 24]> */
		/* 82119EACh case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000018) );
		/* 82119EACh case   25:*/		return 0x82119EB0;
		  /* 82119EB0h */ case   26:  		/* lwz R5, <#[R30 + 8]> */
		/* 82119EB0h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000008) );
		/* 82119EB0h case   26:*/		return 0x82119EB4;
		  /* 82119EB4h */ case   27:  		/* lwz R4, <#[R31 + 20]> */
		/* 82119EB4h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 82119EB4h case   27:*/		return 0x82119EB8;
		  /* 82119EB8h */ case   28:  		/* bl -8184 */
		/* 82119EB8h case   28:*/		regs.LR = 0x82119EBC; return 0x82117EC0;
		/* 82119EB8h case   28:*/		return 0x82119EBC;
		  /* 82119EBCh */ case   29:  		/* srawi R11, R3, 31 */
		/* 82119EBCh case   29:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 82119EBCh case   29:*/		return 0x82119EC0;
		  /* 82119EC0h */ case   30:  		/* and R3, R11, R3 */
		/* 82119EC0h case   30:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 82119EC0h case   30:*/		return 0x82119EC4;
	}
	return 0x82119EC4;
} // Block from 82119E48h-82119EC4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82119EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119EC4);
		  /* 82119EC4h */ case    0:  		/* addi R1, R1, 160 */
		/* 82119EC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82119EC4h case    0:*/		return 0x82119EC8;
		  /* 82119EC8h */ case    1:  		/* b -560160 */
		/* 82119EC8h case    1:*/		return 0x820912A8;
		/* 82119EC8h case    1:*/		return 0x82119ECC;
		  /* 82119ECCh */ case    2:  		/* nop */
		/* 82119ECCh case    2:*/		cpu::op::nop();
		/* 82119ECCh case    2:*/		return 0x82119ED0;
	}
	return 0x82119ED0;
} // Block from 82119EC4h-82119ED0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82119ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119ED0);
		  /* 82119ED0h */ case    0:  		/* mfspr R12, LR */
		/* 82119ED0h case    0:*/		regs.R12 = regs.LR;
		/* 82119ED0h case    0:*/		return 0x82119ED4;
		  /* 82119ED4h */ case    1:  		/* bl -560260 */
		/* 82119ED4h case    1:*/		regs.LR = 0x82119ED8; return 0x82091250;
		/* 82119ED4h case    1:*/		return 0x82119ED8;
		  /* 82119ED8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82119ED8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82119ED8h case    2:*/		return 0x82119EDC;
		  /* 82119EDCh */ case    3:  		/* mr R27, R3 */
		/* 82119EDCh case    3:*/		regs.R27 = regs.R3;
		/* 82119EDCh case    3:*/		return 0x82119EE0;
		  /* 82119EE0h */ case    4:  		/* mr R31, R4 */
		/* 82119EE0h case    4:*/		regs.R31 = regs.R4;
		/* 82119EE0h case    4:*/		return 0x82119EE4;
		  /* 82119EE4h */ case    5:  		/* mr R30, R6 */
		/* 82119EE4h case    5:*/		regs.R30 = regs.R6;
		/* 82119EE4h case    5:*/		return 0x82119EE8;
		  /* 82119EE8h */ case    6:  		/* mr R26, R7 */
		/* 82119EE8h case    6:*/		regs.R26 = regs.R7;
		/* 82119EE8h case    6:*/		return 0x82119EEC;
		  /* 82119EECh */ case    7:  		/* mr R28, R8 */
		/* 82119EECh case    7:*/		regs.R28 = regs.R8;
		/* 82119EECh case    7:*/		return 0x82119EF0;
		  /* 82119EF0h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 82119EF0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82119EF0h case    8:*/		return 0x82119EF4;
		  /* 82119EF4h */ case    9:  		/* bc 12, CR6_EQ, 88 */
		/* 82119EF4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82119F4C;  }
		/* 82119EF4h case    9:*/		return 0x82119EF8;
		  /* 82119EF8h */ case   10:  		/* lwz R11, <#[R5 + 16]> */
		/* 82119EF8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 82119EF8h case   10:*/		return 0x82119EFC;
		  /* 82119EFCh */ case   11:  		/* rlwinm. R10, R11, 0, 29, 27 */
		/* 82119EFCh case   11:*/		cpu::op::rlwinm<1,0,29,27>(regs,&regs.R10,regs.R11);
		/* 82119EFCh case   11:*/		return 0x82119F00;
	}
	return 0x82119F00;
} // Block from 82119ED0h-82119F00h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82119F00h
// Function '?StopStmt@CParse@D3DXShader@@IAAPAVCNode@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119F00);
		  /* 82119F00h */ case    0:  		/* bc 12, CR0_EQ, 60 */
		/* 82119F00h case    0:*/		if ( regs.CR[0].eq ) { return 0x82119F3C;  }
		/* 82119F00h case    0:*/		return 0x82119F04;
		  /* 82119F04h */ case    1:  		/* cmpwi CR6, R4, 7 */
		/* 82119F04h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000007);
		/* 82119F04h case    1:*/		return 0x82119F08;
		  /* 82119F08h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82119F08h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82119F18;  }
		/* 82119F08h case    2:*/		return 0x82119F0C;
		  /* 82119F0Ch */ case    3:  		/* lis R11, -32253 */
		/* 82119F0Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119F0Ch case    3:*/		return 0x82119F10;
		  /* 82119F10h */ case    4:  		/* addi R6, R11, 8344 */
		/* 82119F10h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2098);
		/* 82119F10h case    4:*/		return 0x82119F14;
		  /* 82119F14h */ case    5:  		/* b 20 */
		/* 82119F14h case    5:*/		return 0x82119F28;
		/* 82119F14h case    5:*/		return 0x82119F18;
	}
	return 0x82119F18;
} // Block from 82119F00h-82119F18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82119F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119F18);
		  /* 82119F18h */ case    0:  		/* cmpwi CR6, R31, 8 */
		/* 82119F18h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000008);
		/* 82119F18h case    0:*/		return 0x82119F1C;
		  /* 82119F1Ch */ case    1:  		/* bc 4, CR6_EQ, 188 */
		/* 82119F1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82119FD8;  }
		/* 82119F1Ch case    1:*/		return 0x82119F20;
		  /* 82119F20h */ case    2:  		/* lis R11, -32253 */
		/* 82119F20h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119F20h case    2:*/		return 0x82119F24;
		  /* 82119F24h */ case    3:  		/* addi R6, R11, 8300 */
		/* 82119F24h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x206C);
		/* 82119F24h case    3:*/		return 0x82119F28;
	}
	return 0x82119F28;
} // Block from 82119F18h-82119F28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82119F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119F28);
		  /* 82119F28h */ case    0:  		/* li R5, 3048 */
		/* 82119F28h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xBE8);
		/* 82119F28h case    0:*/		return 0x82119F2C;
		  /* 82119F2Ch */ case    1:  		/* li R4, 0 */
		/* 82119F2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119F2Ch case    1:*/		return 0x82119F30;
		  /* 82119F30h */ case    2:  		/* mr R3, R27 */
		/* 82119F30h case    2:*/		regs.R3 = regs.R27;
		/* 82119F30h case    2:*/		return 0x82119F34;
		  /* 82119F34h */ case    3:  		/* bl -1684 */
		/* 82119F34h case    3:*/		regs.LR = 0x82119F38; return 0x821198A0;
		/* 82119F34h case    3:*/		return 0x82119F38;
		  /* 82119F38h */ case    4:  		/* b 160 */
		/* 82119F38h case    4:*/		return 0x82119FD8;
		/* 82119F38h case    4:*/		return 0x82119F3C;
	}
	return 0x82119F3C;
} // Block from 82119F28h-82119F3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82119F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119F3C);
		  /* 82119F3Ch */ case    0:  		/* stw R11, <#[R30 + 32]> */
		/* 82119F3Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82119F3Ch case    0:*/		return 0x82119F40;
		  /* 82119F40h */ case    1:  		/* lwz R3, <#[R5 + 28]> */
		/* 82119F40h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R5 + 0x0000001C) );
		/* 82119F40h case    1:*/		return 0x82119F44;
		  /* 82119F44h */ case    2:  		/* bl -330716 */
		/* 82119F44h case    2:*/		regs.LR = 0x82119F48; return 0x820C9368;
		/* 82119F44h case    2:*/		return 0x82119F48;
		  /* 82119F48h */ case    3:  		/* stw R3, <#[R30 + 36]> */
		/* 82119F48h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 82119F48h case    3:*/		return 0x82119F4C;
	}
	return 0x82119F4C;
} // Block from 82119F3Ch-82119F4Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82119F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119F4C);
		  /* 82119F4Ch */ case    0:  		/* li R3, 20 */
		/* 82119F4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 82119F4Ch case    0:*/		return 0x82119F50;
		  /* 82119F50h */ case    1:  		/* bl -331048 */
		/* 82119F50h case    1:*/		regs.LR = 0x82119F54; return 0x820C9228;
		/* 82119F50h case    1:*/		return 0x82119F54;
		  /* 82119F54h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 82119F54h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119F54h case    2:*/		return 0x82119F58;
		  /* 82119F58h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 82119F58h case    3:*/		if ( regs.CR[0].eq ) { return 0x82119F78;  }
		/* 82119F58h case    3:*/		return 0x82119F5C;
		  /* 82119F5Ch */ case    4:  		/* lis R11, -32253 */
		/* 82119F5Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82119F5Ch case    4:*/		return 0x82119F60;
		  /* 82119F60h */ case    5:  		/* li R5, 0 */
		/* 82119F60h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119F60h case    5:*/		return 0x82119F64;
		  /* 82119F64h */ case    6:  		/* addi R6, R11, 8292 */
		/* 82119F64h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2064);
		/* 82119F64h case    6:*/		return 0x82119F68;
		  /* 82119F68h */ case    7:  		/* li R4, 0 */
		/* 82119F68h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82119F68h case    7:*/		return 0x82119F6C;
		  /* 82119F6Ch */ case    8:  		/* bl -330620 */
		/* 82119F6Ch case    8:*/		regs.LR = 0x82119F70; return 0x820C93F0;
		/* 82119F6Ch case    8:*/		return 0x82119F70;
		  /* 82119F70h */ case    9:  		/* mr R29, R3 */
		/* 82119F70h case    9:*/		regs.R29 = regs.R3;
		/* 82119F70h case    9:*/		return 0x82119F74;
		  /* 82119F74h */ case   10:  		/* b 8 */
		/* 82119F74h case   10:*/		return 0x82119F7C;
		/* 82119F74h case   10:*/		return 0x82119F78;
	}
	return 0x82119F78;
} // Block from 82119F4Ch-82119F78h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82119F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119F78);
		  /* 82119F78h */ case    0:  		/* li R29, 0 */
		/* 82119F78h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82119F78h case    0:*/		return 0x82119F7C;
	}
	return 0x82119F7C;
} // Block from 82119F78h-82119F7Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119F7C);
		  /* 82119F7Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82119F7Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82119F7Ch case    0:*/		return 0x82119F80;
		  /* 82119F80h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 82119F80h case    1:*/		if ( regs.CR[6].eq ) { return 0x82119FD8;  }
		/* 82119F80h case    1:*/		return 0x82119F84;
		  /* 82119F84h */ case    2:  		/* li R3, 52 */
		/* 82119F84h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 82119F84h case    2:*/		return 0x82119F88;
		  /* 82119F88h */ case    3:  		/* bl -331104 */
		/* 82119F88h case    3:*/		regs.LR = 0x82119F8C; return 0x820C9228;
		/* 82119F88h case    3:*/		return 0x82119F8C;
		  /* 82119F8Ch */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82119F8Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82119F8Ch case    4:*/		return 0x82119F90;
		  /* 82119F90h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 82119F90h case    5:*/		if ( regs.CR[0].eq ) { return 0x82119FB4;  }
		/* 82119F90h case    5:*/		return 0x82119F94;
		  /* 82119F94h */ case    6:  		/* mr R8, R30 */
		/* 82119F94h case    6:*/		regs.R8 = regs.R30;
		/* 82119F94h case    6:*/		return 0x82119F98;
		  /* 82119F98h */ case    7:  		/* lwz R5, <#[R30 + 20]> */
		/* 82119F98h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000014) );
		/* 82119F98h case    7:*/		return 0x82119F9C;
		  /* 82119F9Ch */ case    8:  		/* li R7, 0 */
		/* 82119F9Ch case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82119F9Ch case    8:*/		return 0x82119FA0;
		  /* 82119FA0h */ case    9:  		/* mr R6, R28 */
		/* 82119FA0h case    9:*/		regs.R6 = regs.R28;
		/* 82119FA0h case    9:*/		return 0x82119FA4;
		  /* 82119FA4h */ case   10:  		/* mr R4, R31 */
		/* 82119FA4h case   10:*/		regs.R4 = regs.R31;
		/* 82119FA4h case   10:*/		return 0x82119FA8;
		  /* 82119FA8h */ case   11:  		/* bl -327920 */
		/* 82119FA8h case   11:*/		regs.LR = 0x82119FAC; return 0x820C9EB8;
		/* 82119FA8h case   11:*/		return 0x82119FAC;
		  /* 82119FACh */ case   12:  		/* mr R31, R3 */
		/* 82119FACh case   12:*/		regs.R31 = regs.R3;
		/* 82119FACh case   12:*/		return 0x82119FB0;
		  /* 82119FB0h */ case   13:  		/* b 8 */
		/* 82119FB0h case   13:*/		return 0x82119FB8;
		/* 82119FB0h case   13:*/		return 0x82119FB4;
	}
	return 0x82119FB4;
} // Block from 82119F7Ch-82119FB4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82119FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119FB4);
		  /* 82119FB4h */ case    0:  		/* li R31, 0 */
		/* 82119FB4h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82119FB4h case    0:*/		return 0x82119FB8;
	}
	return 0x82119FB8;
} // Block from 82119FB4h-82119FB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82119FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119FB8);
		  /* 82119FB8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82119FB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82119FB8h case    0:*/		return 0x82119FBC;
		  /* 82119FBCh */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82119FBCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82119FD8;  }
		/* 82119FBCh case    1:*/		return 0x82119FC0;
		  /* 82119FC0h */ case    2:  		/* li R5, 0 */
		/* 82119FC0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82119FC0h case    2:*/		return 0x82119FC4;
		  /* 82119FC4h */ case    3:  		/* mr R4, R31 */
		/* 82119FC4h case    3:*/		regs.R4 = regs.R31;
		/* 82119FC4h case    3:*/		return 0x82119FC8;
		  /* 82119FC8h */ case    4:  		/* mr R3, R27 */
		/* 82119FC8h case    4:*/		regs.R3 = regs.R27;
		/* 82119FC8h case    4:*/		return 0x82119FCC;
		  /* 82119FCCh */ case    5:  		/* bl -740 */
		/* 82119FCCh case    5:*/		regs.LR = 0x82119FD0; return 0x82119CE8;
		/* 82119FCCh case    5:*/		return 0x82119FD0;
		  /* 82119FD0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82119FD0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82119FD0h case    6:*/		return 0x82119FD4;
		  /* 82119FD4h */ case    7:  		/* bc 4, CR0_LT, 12 */
		/* 82119FD4h case    7:*/		if ( !regs.CR[0].lt ) { return 0x82119FE0;  }
		/* 82119FD4h case    7:*/		return 0x82119FD8;
	}
	return 0x82119FD8;
} // Block from 82119FB8h-82119FD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82119FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119FD8);
		  /* 82119FD8h */ case    0:  		/* li R3, 0 */
		/* 82119FD8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82119FD8h case    0:*/		return 0x82119FDC;
		  /* 82119FDCh */ case    1:  		/* b 20 */
		/* 82119FDCh case    1:*/		return 0x82119FF0;
		/* 82119FDCh case    1:*/		return 0x82119FE0;
	}
	return 0x82119FE0;
} // Block from 82119FD8h-82119FE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119FE0);
		  /* 82119FE0h */ case    0:  		/* stw R31, <#[R29 + 8]> */
		/* 82119FE0h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000008) );
		/* 82119FE0h case    0:*/		return 0x82119FE4;
		  /* 82119FE4h */ case    1:  		/* mr R3, R29 */
		/* 82119FE4h case    1:*/		regs.R3 = regs.R29;
		/* 82119FE4h case    1:*/		return 0x82119FE8;
		  /* 82119FE8h */ case    2:  		/* stw R30, <#[R31 + 32]> */
		/* 82119FE8h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 82119FE8h case    2:*/		return 0x82119FEC;
		  /* 82119FECh */ case    3:  		/* stw R26, <#[R31 + 28]> */
		/* 82119FECh case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000001C) );
		/* 82119FECh case    3:*/		return 0x82119FF0;
	}
	return 0x82119FF0;
} // Block from 82119FE0h-82119FF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82119FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119FF0);
		  /* 82119FF0h */ case    0:  		/* addi R1, R1, 192 */
		/* 82119FF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82119FF0h case    0:*/		return 0x82119FF4;
		  /* 82119FF4h */ case    1:  		/* b -560468 */
		/* 82119FF4h case    1:*/		return 0x820912A0;
		/* 82119FF4h case    1:*/		return 0x82119FF8;
	}
	return 0x82119FF8;
} // Block from 82119FF0h-82119FF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82119FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82119FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82119FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82119FF8);
		  /* 82119FF8h */ case    0:  		/* mfspr R12, LR */
		/* 82119FF8h case    0:*/		regs.R12 = regs.LR;
		/* 82119FF8h case    0:*/		return 0x82119FFC;
		  /* 82119FFCh */ case    1:  		/* bl -560552 */
		/* 82119FFCh case    1:*/		regs.LR = 0x8211A000; return 0x82091254;
		/* 82119FFCh case    1:*/		return 0x8211A000;
		  /* 8211A000h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8211A000h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8211A000h case    2:*/		return 0x8211A004;
		  /* 8211A004h */ case    3:  		/* mr R27, R3 */
		/* 8211A004h case    3:*/		regs.R27 = regs.R3;
		/* 8211A004h case    3:*/		return 0x8211A008;
	}
	return 0x8211A008;
} // Block from 82119FF8h-8211A008h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211A008h
// Function '?DiscardStmt@CParse@D3DXShader@@IAAPAVCNode@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A008);
		  /* 8211A008h */ case    0:  		/* li R3, 20 */
		/* 8211A008h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211A008h case    0:*/		return 0x8211A00C;
		  /* 8211A00Ch */ case    1:  		/* mr R31, R4 */
		/* 8211A00Ch case    1:*/		regs.R31 = regs.R4;
		/* 8211A00Ch case    1:*/		return 0x8211A010;
		  /* 8211A010h */ case    2:  		/* mr R30, R5 */
		/* 8211A010h case    2:*/		regs.R30 = regs.R5;
		/* 8211A010h case    2:*/		return 0x8211A014;
		  /* 8211A014h */ case    3:  		/* mr R29, R6 */
		/* 8211A014h case    3:*/		regs.R29 = regs.R6;
		/* 8211A014h case    3:*/		return 0x8211A018;
		  /* 8211A018h */ case    4:  		/* bl -331248 */
		/* 8211A018h case    4:*/		regs.LR = 0x8211A01C; return 0x820C9228;
		/* 8211A018h case    4:*/		return 0x8211A01C;
		  /* 8211A01Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211A01Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211A01Ch case    5:*/		return 0x8211A020;
		  /* 8211A020h */ case    6:  		/* bc 12, CR0_EQ, 32 */
		/* 8211A020h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211A040;  }
		/* 8211A020h case    6:*/		return 0x8211A024;
		  /* 8211A024h */ case    7:  		/* lis R11, -32253 */
		/* 8211A024h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A024h case    7:*/		return 0x8211A028;
		  /* 8211A028h */ case    8:  		/* li R5, 0 */
		/* 8211A028h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211A028h case    8:*/		return 0x8211A02C;
		  /* 8211A02Ch */ case    9:  		/* addi R6, R11, 8388 */
		/* 8211A02Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x20C4);
		/* 8211A02Ch case    9:*/		return 0x8211A030;
		  /* 8211A030h */ case   10:  		/* li R4, 0 */
		/* 8211A030h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A030h case   10:*/		return 0x8211A034;
		  /* 8211A034h */ case   11:  		/* bl -330820 */
		/* 8211A034h case   11:*/		regs.LR = 0x8211A038; return 0x820C93F0;
		/* 8211A034h case   11:*/		return 0x8211A038;
		  /* 8211A038h */ case   12:  		/* mr R28, R3 */
		/* 8211A038h case   12:*/		regs.R28 = regs.R3;
		/* 8211A038h case   12:*/		return 0x8211A03C;
		  /* 8211A03Ch */ case   13:  		/* b 8 */
		/* 8211A03Ch case   13:*/		return 0x8211A044;
		/* 8211A03Ch case   13:*/		return 0x8211A040;
	}
	return 0x8211A040;
} // Block from 8211A008h-8211A040h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211A040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A040);
		  /* 8211A040h */ case    0:  		/* li R28, 0 */
		/* 8211A040h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8211A040h case    0:*/		return 0x8211A044;
	}
	return 0x8211A044;
} // Block from 8211A040h-8211A044h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A044);
		  /* 8211A044h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8211A044h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211A044h case    0:*/		return 0x8211A048;
		  /* 8211A048h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 8211A048h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211A0A0;  }
		/* 8211A048h case    1:*/		return 0x8211A04C;
		  /* 8211A04Ch */ case    2:  		/* li R3, 52 */
		/* 8211A04Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 8211A04Ch case    2:*/		return 0x8211A050;
		  /* 8211A050h */ case    3:  		/* bl -331304 */
		/* 8211A050h case    3:*/		regs.LR = 0x8211A054; return 0x820C9228;
		/* 8211A050h case    3:*/		return 0x8211A054;
		  /* 8211A054h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8211A054h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211A054h case    4:*/		return 0x8211A058;
		  /* 8211A058h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8211A058h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211A07C;  }
		/* 8211A058h case    5:*/		return 0x8211A05C;
		  /* 8211A05Ch */ case    6:  		/* li R8, 0 */
		/* 8211A05Ch case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8211A05Ch case    6:*/		return 0x8211A060;
		  /* 8211A060h */ case    7:  		/* mr R7, R29 */
		/* 8211A060h case    7:*/		regs.R7 = regs.R29;
		/* 8211A060h case    7:*/		return 0x8211A064;
		  /* 8211A064h */ case    8:  		/* mr R6, R30 */
		/* 8211A064h case    8:*/		regs.R6 = regs.R30;
		/* 8211A064h case    8:*/		return 0x8211A068;
		  /* 8211A068h */ case    9:  		/* mr R5, R31 */
		/* 8211A068h case    9:*/		regs.R5 = regs.R31;
		/* 8211A068h case    9:*/		return 0x8211A06C;
		  /* 8211A06Ch */ case   10:  		/* li R4, 6 */
		/* 8211A06Ch case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 8211A06Ch case   10:*/		return 0x8211A070;
		  /* 8211A070h */ case   11:  		/* bl -328120 */
		/* 8211A070h case   11:*/		regs.LR = 0x8211A074; return 0x820C9EB8;
		/* 8211A070h case   11:*/		return 0x8211A074;
		  /* 8211A074h */ case   12:  		/* mr R4, R3 */
		/* 8211A074h case   12:*/		regs.R4 = regs.R3;
		/* 8211A074h case   12:*/		return 0x8211A078;
		  /* 8211A078h */ case   13:  		/* b 8 */
		/* 8211A078h case   13:*/		return 0x8211A080;
		/* 8211A078h case   13:*/		return 0x8211A07C;
	}
	return 0x8211A07C;
} // Block from 8211A044h-8211A07Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211A07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A07C);
		  /* 8211A07Ch */ case    0:  		/* li R4, 0 */
		/* 8211A07Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A07Ch case    0:*/		return 0x8211A080;
	}
	return 0x8211A080;
} // Block from 8211A07Ch-8211A080h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A080);
		  /* 8211A080h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 8211A080h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211A080h case    0:*/		return 0x8211A084;
		  /* 8211A084h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 8211A084h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211A0A0;  }
		/* 8211A084h case    1:*/		return 0x8211A088;
		  /* 8211A088h */ case    2:  		/* stw R4, <#[R28 + 8]> */
		/* 8211A088h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R28 + 0x00000008) );
		/* 8211A088h case    2:*/		return 0x8211A08C;
		  /* 8211A08Ch */ case    3:  		/* li R5, 1 */
		/* 8211A08Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8211A08Ch case    3:*/		return 0x8211A090;
		  /* 8211A090h */ case    4:  		/* mr R3, R27 */
		/* 8211A090h case    4:*/		regs.R3 = regs.R27;
		/* 8211A090h case    4:*/		return 0x8211A094;
		  /* 8211A094h */ case    5:  		/* bl -940 */
		/* 8211A094h case    5:*/		regs.LR = 0x8211A098; return 0x82119CE8;
		/* 8211A094h case    5:*/		return 0x8211A098;
		  /* 8211A098h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8211A098h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211A098h case    6:*/		return 0x8211A09C;
		  /* 8211A09Ch */ case    7:  		/* bc 4, CR0_LT, 12 */
		/* 8211A09Ch case    7:*/		if ( !regs.CR[0].lt ) { return 0x8211A0A8;  }
		/* 8211A09Ch case    7:*/		return 0x8211A0A0;
	}
	return 0x8211A0A0;
} // Block from 8211A080h-8211A0A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211A0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A0A0);
		  /* 8211A0A0h */ case    0:  		/* li R3, 0 */
		/* 8211A0A0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A0A0h case    0:*/		return 0x8211A0A4;
		  /* 8211A0A4h */ case    1:  		/* b 8 */
		/* 8211A0A4h case    1:*/		return 0x8211A0AC;
		/* 8211A0A4h case    1:*/		return 0x8211A0A8;
	}
	return 0x8211A0A8;
} // Block from 8211A0A0h-8211A0A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A0A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A0A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A0A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A0A8);
		  /* 8211A0A8h */ case    0:  		/* mr R3, R28 */
		/* 8211A0A8h case    0:*/		regs.R3 = regs.R28;
		/* 8211A0A8h case    0:*/		return 0x8211A0AC;
	}
	return 0x8211A0AC;
} // Block from 8211A0A8h-8211A0ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A0ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A0AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A0AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A0AC);
		  /* 8211A0ACh */ case    0:  		/* addi R1, R1, 128 */
		/* 8211A0ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8211A0ACh case    0:*/		return 0x8211A0B0;
		  /* 8211A0B0h */ case    1:  		/* b -560652 */
		/* 8211A0B0h case    1:*/		return 0x820912A4;
		/* 8211A0B0h case    1:*/		return 0x8211A0B4;
		  /* 8211A0B4h */ case    2:  		/* nop */
		/* 8211A0B4h case    2:*/		cpu::op::nop();
		/* 8211A0B4h case    2:*/		return 0x8211A0B8;
	}
	return 0x8211A0B8;
} // Block from 8211A0ACh-8211A0B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211A0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A0B8);
		  /* 8211A0B8h */ case    0:  		/* mfspr R12, LR */
		/* 8211A0B8h case    0:*/		regs.R12 = regs.LR;
		/* 8211A0B8h case    0:*/		return 0x8211A0BC;
		  /* 8211A0BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211A0BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211A0BCh case    1:*/		return 0x8211A0C0;
		  /* 8211A0C0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8211A0C0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211A0C0h case    2:*/		return 0x8211A0C4;
		  /* 8211A0C4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8211A0C4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211A0C4h case    3:*/		return 0x8211A0C8;
		  /* 8211A0C8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8211A0C8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8211A0C8h case    4:*/		return 0x8211A0CC;
		  /* 8211A0CCh */ case    5:  		/* mr R31, R3 */
		/* 8211A0CCh case    5:*/		regs.R31 = regs.R3;
		/* 8211A0CCh case    5:*/		return 0x8211A0D0;
		  /* 8211A0D0h */ case    6:  		/* li R3, 20 */
		/* 8211A0D0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211A0D0h case    6:*/		return 0x8211A0D4;
		  /* 8211A0D4h */ case    7:  		/* mr R30, R4 */
		/* 8211A0D4h case    7:*/		regs.R30 = regs.R4;
		/* 8211A0D4h case    7:*/		return 0x8211A0D8;
		  /* 8211A0D8h */ case    8:  		/* bl -331440 */
		/* 8211A0D8h case    8:*/		regs.LR = 0x8211A0DC; return 0x820C9228;
		/* 8211A0D8h case    8:*/		return 0x8211A0DC;
		  /* 8211A0DCh */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8211A0DCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211A0DCh case    9:*/		return 0x8211A0E0;
		  /* 8211A0E0h */ case   10:  		/* bc 12, CR0_EQ, 32 */
		/* 8211A0E0h case   10:*/		if ( regs.CR[0].eq ) { return 0x8211A100;  }
		/* 8211A0E0h case   10:*/		return 0x8211A0E4;
		  /* 8211A0E4h */ case   11:  		/* lis R11, -32253 */
		/* 8211A0E4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A0E4h case   11:*/		return 0x8211A0E8;
		  /* 8211A0E8h */ case   12:  		/* lwz R5, <#[R31 + 16]> */
		/* 8211A0E8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A0E8h case   12:*/		return 0x8211A0EC;
		  /* 8211A0ECh */ case   13:  		/* li R4, 0 */
		/* 8211A0ECh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A0ECh case   13:*/		return 0x8211A0F0;
		  /* 8211A0F0h */ case   14:  		/* addi R6, R11, 8400 */
		/* 8211A0F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x20D0);
		/* 8211A0F0h case   14:*/		return 0x8211A0F4;
		  /* 8211A0F4h */ case   15:  		/* bl -331012 */
		/* 8211A0F4h case   15:*/		regs.LR = 0x8211A0F8; return 0x820C93F0;
		/* 8211A0F4h case   15:*/		return 0x8211A0F8;
		  /* 8211A0F8h */ case   16:  		/* mr R11, R3 */
		/* 8211A0F8h case   16:*/		regs.R11 = regs.R3;
		/* 8211A0F8h case   16:*/		return 0x8211A0FC;
		  /* 8211A0FCh */ case   17:  		/* b 8 */
		/* 8211A0FCh case   17:*/		return 0x8211A104;
		/* 8211A0FCh case   17:*/		return 0x8211A100;
	}
	return 0x8211A100;
} // Block from 8211A0B8h-8211A100h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211A100h
// Function '?CaseStmt@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A100);
		  /* 8211A100h */ case    0:  		/* li R11, 0 */
		/* 8211A100h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211A100h case    0:*/		return 0x8211A104;
	}
	return 0x8211A104;
} // Block from 8211A100h-8211A104h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A104);
		  /* 8211A104h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8211A104h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211A104h case    0:*/		return 0x8211A108;
		  /* 8211A108h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8211A108h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211A124;  }
		/* 8211A108h case    1:*/		return 0x8211A10C;
		  /* 8211A10Ch */ case    2:  		/* li R4, 0 */
		/* 8211A10Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A10Ch case    2:*/		return 0x8211A110;
		  /* 8211A110h */ case    3:  		/* mr R3, R31 */
		/* 8211A110h case    3:*/		regs.R3 = regs.R31;
		/* 8211A110h case    3:*/		return 0x8211A114;
		  /* 8211A114h */ case    4:  		/* bl -1788 */
		/* 8211A114h case    4:*/		regs.LR = 0x8211A118; return 0x82119A18;
		/* 8211A114h case    4:*/		return 0x8211A118;
		  /* 8211A118h */ case    5:  		/* lis R3, -32761 */
		/* 8211A118h case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8211A118h case    5:*/		return 0x8211A11C;
		  /* 8211A11Ch */ case    6:  		/* ori R3, R3, 14 */
		/* 8211A11Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8211A11Ch case    6:*/		return 0x8211A120;
		  /* 8211A120h */ case    7:  		/* b 16 */
		/* 8211A120h case    7:*/		return 0x8211A130;
		/* 8211A120h case    7:*/		return 0x8211A124;
	}
	return 0x8211A124;
} // Block from 8211A104h-8211A124h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211A124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A124);
		  /* 8211A124h */ case    0:  		/* stw R11, <#[R31 + 16]> */
		/* 8211A124h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A124h case    0:*/		return 0x8211A128;
		  /* 8211A128h */ case    1:  		/* li R3, 0 */
		/* 8211A128h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A128h case    1:*/		return 0x8211A12C;
		  /* 8211A12Ch */ case    2:  		/* stw R30, <#[R11 + 8]> */
		/* 8211A12Ch case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8211A12Ch case    2:*/		return 0x8211A130;
	}
	return 0x8211A130;
} // Block from 8211A124h-8211A130h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211A130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A130);
		  /* 8211A130h */ case    0:  		/* addi R1, R1, 112 */
		/* 8211A130h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8211A130h case    0:*/		return 0x8211A134;
		  /* 8211A134h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211A134h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211A134h case    1:*/		return 0x8211A138;
		  /* 8211A138h */ case    2:  		/* mtspr LR, R12 */
		/* 8211A138h case    2:*/		regs.LR = regs.R12;
		/* 8211A138h case    2:*/		return 0x8211A13C;
		  /* 8211A13Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8211A13Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211A13Ch case    3:*/		return 0x8211A140;
		  /* 8211A140h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8211A140h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211A140h case    4:*/		return 0x8211A144;
		  /* 8211A144h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8211A144h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211A144h case    5:*/		return 0x8211A148;
	}
	return 0x8211A148;
} // Block from 8211A130h-8211A148h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A148);
		  /* 8211A148h */ case    0:  		/* mfspr R12, LR */
		/* 8211A148h case    0:*/		regs.R12 = regs.LR;
		/* 8211A148h case    0:*/		return 0x8211A14C;
		  /* 8211A14Ch */ case    1:  		/* bl -560880 */
		/* 8211A14Ch case    1:*/		regs.LR = 0x8211A150; return 0x8209125C;
		/* 8211A14Ch case    1:*/		return 0x8211A150;
		  /* 8211A150h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211A150h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211A150h case    2:*/		return 0x8211A154;
		  /* 8211A154h */ case    3:  		/* mr R30, R3 */
		/* 8211A154h case    3:*/		regs.R30 = regs.R3;
		/* 8211A154h case    3:*/		return 0x8211A158;
		  /* 8211A158h */ case    4:  		/* mr R31, R4 */
		/* 8211A158h case    4:*/		regs.R31 = regs.R4;
		/* 8211A158h case    4:*/		return 0x8211A15C;
		  /* 8211A15Ch */ case    5:  		/* mr R29, R5 */
		/* 8211A15Ch case    5:*/		regs.R29 = regs.R5;
		/* 8211A15Ch case    5:*/		return 0x8211A160;
		  /* 8211A160h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8211A160h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211A160h case    6:*/		return 0x8211A164;
		  /* 8211A164h */ case    7:  		/* bc 12, CR6_EQ, 192 */
		/* 8211A164h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211A224;  }
		/* 8211A164h case    7:*/		return 0x8211A168;
		  /* 8211A168h */ case    8:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211A168h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211A168h case    8:*/		return 0x8211A16C;
		  /* 8211A16Ch */ case    9:  		/* cmpwi CR6, R11, 1 */
		/* 8211A16Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A16Ch case    9:*/		return 0x8211A170;
		  /* 8211A170h */ case   10:  		/* bc 12, CR6_EQ, 116 */
		/* 8211A170h case   10:*/		if ( regs.CR[6].eq ) { return 0x8211A1E4;  }
		/* 8211A170h case   10:*/		return 0x8211A174;
		  /* 8211A174h */ case   11:  		/* cmpwi CR6, R11, 6 */
		/* 8211A174h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211A174h case   11:*/		return 0x8211A178;
		  /* 8211A178h */ case   12:  		/* bc 12, CR6_EQ, 100 */
		/* 8211A178h case   12:*/		if ( regs.CR[6].eq ) { return 0x8211A1DC;  }
		/* 8211A178h case   12:*/		return 0x8211A17C;
		  /* 8211A17Ch */ case   13:  		/* cmpwi CR6, R11, 8 */
		/* 8211A17Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A17Ch case   13:*/		return 0x8211A180;
		  /* 8211A180h */ case   14:  		/* bc 12, CR6_EQ, 84 */
		/* 8211A180h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211A1D4;  }
		/* 8211A180h case   14:*/		return 0x8211A184;
		  /* 8211A184h */ case   15:  		/* cmpwi CR6, R11, 9 */
		/* 8211A184h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211A184h case   15:*/		return 0x8211A188;
		  /* 8211A188h */ case   16:  		/* bc 12, CR6_EQ, 44 */
		/* 8211A188h case   16:*/		if ( regs.CR[6].eq ) { return 0x8211A1B4;  }
		/* 8211A188h case   16:*/		return 0x8211A18C;
		  /* 8211A18Ch */ case   17:  		/* cmpwi CR6, R11, 11 */
		/* 8211A18Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8211A18Ch case   17:*/		return 0x8211A190;
		  /* 8211A190h */ case   18:  		/* bc 12, CR6_EQ, 28 */
		/* 8211A190h case   18:*/		if ( regs.CR[6].eq ) { return 0x8211A1AC;  }
		/* 8211A190h case   18:*/		return 0x8211A194;
		  /* 8211A194h */ case   19:  		/* lis R11, -32255 */
		/* 8211A194h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A194h case   19:*/		return 0x8211A198;
		  /* 8211A198h */ case   20:  		/* li R5, 0 */
		/* 8211A198h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211A198h case   20:*/		return 0x8211A19C;
		  /* 8211A19Ch */ case   21:  		/* addi R6, R11, 8564 */
		/* 8211A19Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2174);
		/* 8211A19Ch case   21:*/		return 0x8211A1A0;
		  /* 8211A1A0h */ case   22:  		/* li R4, 0 */
		/* 8211A1A0h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A1A0h case   22:*/		return 0x8211A1A4;
		  /* 8211A1A4h */ case   23:  		/* bl -2060 */
		/* 8211A1A4h case   23:*/		regs.LR = 0x8211A1A8; return 0x82119998;
		/* 8211A1A4h case   23:*/		return 0x8211A1A8;
		  /* 8211A1A8h */ case   24:  		/* b 124 */
		/* 8211A1A8h case   24:*/		return 0x8211A224;
		/* 8211A1A8h case   24:*/		return 0x8211A1AC;
	}
	return 0x8211A1AC;
} // Block from 8211A148h-8211A1ACh (25 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1AC);
		  /* 8211A1ACh */ case    0:  		/* lwz R4, <#[R31 + 48]> */
		/* 8211A1ACh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 8211A1ACh case    0:*/		return 0x8211A1B0;
		  /* 8211A1B0h */ case    1:  		/* b 108 */
		/* 8211A1B0h case    1:*/		return 0x8211A21C;
		/* 8211A1B0h case    1:*/		return 0x8211A1B4;
	}
	return 0x8211A1B4;
} // Block from 8211A1ACh-8211A1B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1B4);
		  /* 8211A1B4h */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 8211A1B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8211A1B4h case    0:*/		return 0x8211A1B8;
		  /* 8211A1B8h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 8211A1B8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8211A1B8h case    1:*/		return 0x8211A1BC;
		  /* 8211A1BCh */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8211A1BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8211A1C8;  }
		/* 8211A1BCh case    2:*/		return 0x8211A1C0;
		  /* 8211A1C0h */ case    3:  		/* ori R11, R11, 512 */
		/* 8211A1C0h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8211A1C0h case    3:*/		return 0x8211A1C4;
		  /* 8211A1C4h */ case    4:  		/* b 8 */
		/* 8211A1C4h case    4:*/		return 0x8211A1CC;
		/* 8211A1C4h case    4:*/		return 0x8211A1C8;
	}
	return 0x8211A1C8;
} // Block from 8211A1B4h-8211A1C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1C8);
		  /* 8211A1C8h */ case    0:  		/* rlwinm R11, R11, 0, 23, 21 */
		/* 8211A1C8h case    0:*/		cpu::op::rlwinm<0,0,23,21>(regs,&regs.R11,regs.R11);
		/* 8211A1C8h case    0:*/		return 0x8211A1CC;
	}
	return 0x8211A1CC;
} // Block from 8211A1C8h-8211A1CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1CC);
		  /* 8211A1CCh */ case    0:  		/* stw R11, <#[R31 + 36]> */
		/* 8211A1CCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8211A1CCh case    0:*/		return 0x8211A1D0;
		  /* 8211A1D0h */ case    1:  		/* b 84 */
		/* 8211A1D0h case    1:*/		return 0x8211A224;
		/* 8211A1D0h case    1:*/		return 0x8211A1D4;
	}
	return 0x8211A1D4;
} // Block from 8211A1CCh-8211A1D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1D4);
		  /* 8211A1D4h */ case    0:  		/* lwz R4, <#[R31 + 16]> */
		/* 8211A1D4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A1D4h case    0:*/		return 0x8211A1D8;
		  /* 8211A1D8h */ case    1:  		/* b 64 */
		/* 8211A1D8h case    1:*/		return 0x8211A218;
		/* 8211A1D8h case    1:*/		return 0x8211A1DC;
	}
	return 0x8211A1DC;
} // Block from 8211A1D4h-8211A1DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1DC);
		  /* 8211A1DCh */ case    0:  		/* lwz R4, <#[R31 + 24]> */
		/* 8211A1DCh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 8211A1DCh case    0:*/		return 0x8211A1E0;
		  /* 8211A1E0h */ case    1:  		/* b 56 */
		/* 8211A1E0h case    1:*/		return 0x8211A218;
		/* 8211A1E0h case    1:*/		return 0x8211A1E4;
	}
	return 0x8211A1E4;
} // Block from 8211A1DCh-8211A1E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1E4);
		  /* 8211A1E4h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A1E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A1E4h case    0:*/		return 0x8211A1E8;
		  /* 8211A1E8h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 8211A1E8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A1E8h case    1:*/		return 0x8211A1EC;
		  /* 8211A1ECh */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8211A1ECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211A20C;  }
		/* 8211A1ECh case    2:*/		return 0x8211A1F0;
		  /* 8211A1F0h */ case    3:  		/* mr R5, R29 */
		/* 8211A1F0h case    3:*/		regs.R5 = regs.R29;
		/* 8211A1F0h case    3:*/		return 0x8211A1F4;
		  /* 8211A1F4h */ case    4:  		/* lwz R4, <#[R31 + 8]> */
		/* 8211A1F4h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8211A1F4h case    4:*/		return 0x8211A1F8;
	}
	return 0x8211A1F8;
} // Block from 8211A1E4h-8211A1F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211A1F8h
// Function '?VError@CParse@D3DXShader@@IAAXPBDPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A1F8);
		  /* 8211A1F8h */ case    0:  		/* mr R3, R30 */
		/* 8211A1F8h case    0:*/		regs.R3 = regs.R30;
		/* 8211A1F8h case    0:*/		return 0x8211A1FC;
		  /* 8211A1FCh */ case    1:  		/* bl -180 */
		/* 8211A1FCh case    1:*/		regs.LR = 0x8211A200; return 0x8211A148;
		/* 8211A1FCh case    1:*/		return 0x8211A200;
		  /* 8211A200h */ case    2:  		/* lwz R31, <#[R31 + 12]> */
		/* 8211A200h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8211A200h case    2:*/		return 0x8211A204;
		  /* 8211A204h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8211A204h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A204h case    3:*/		return 0x8211A208;
		  /* 8211A208h */ case    4:  		/* bc 4, CR6_EQ, -36 */
		/* 8211A208h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211A1E4;  }
		/* 8211A208h case    4:*/		return 0x8211A20C;
	}
	return 0x8211A20C;
} // Block from 8211A1F8h-8211A20Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211A20Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A20C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A20C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A20C);
		  /* 8211A20Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211A20Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A20Ch case    0:*/		return 0x8211A210;
		  /* 8211A210h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8211A210h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211A224;  }
		/* 8211A210h case    1:*/		return 0x8211A214;
		  /* 8211A214h */ case    2:  		/* mr R4, R31 */
		/* 8211A214h case    2:*/		regs.R4 = regs.R31;
		/* 8211A214h case    2:*/		return 0x8211A218;
	}
	return 0x8211A218;
} // Block from 8211A20Ch-8211A218h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211A218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A218);
		  /* 8211A218h */ case    0:  		/* mr R3, R30 */
		/* 8211A218h case    0:*/		regs.R3 = regs.R30;
		/* 8211A218h case    0:*/		return 0x8211A21C;
	}
	return 0x8211A21C;
} // Block from 8211A218h-8211A21Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A21Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A21C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A21C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A21C);
		  /* 8211A21Ch */ case    0:  		/* mr R5, R29 */
		/* 8211A21Ch case    0:*/		regs.R5 = regs.R29;
		/* 8211A21Ch case    0:*/		return 0x8211A220;
		  /* 8211A220h */ case    1:  		/* bl -216 */
		/* 8211A220h case    1:*/		regs.LR = 0x8211A224; return 0x8211A148;
		/* 8211A220h case    1:*/		return 0x8211A224;
	}
	return 0x8211A224;
} // Block from 8211A21Ch-8211A224h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A224);
		  /* 8211A224h */ case    0:  		/* li R3, 0 */
		/* 8211A224h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A224h case    0:*/		return 0x8211A228;
		  /* 8211A228h */ case    1:  		/* addi R1, R1, 144 */
		/* 8211A228h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211A228h case    1:*/		return 0x8211A22C;
		  /* 8211A22Ch */ case    2:  		/* b -561024 */
		/* 8211A22Ch case    2:*/		return 0x820912AC;
		/* 8211A22Ch case    2:*/		return 0x8211A230;
	}
	return 0x8211A230;
} // Block from 8211A224h-8211A230h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211A230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A230);
		  /* 8211A230h */ case    0:  		/* mfspr R12, LR */
		/* 8211A230h case    0:*/		regs.R12 = regs.LR;
		/* 8211A230h case    0:*/		return 0x8211A234;
		  /* 8211A234h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211A234h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211A234h case    1:*/		return 0x8211A238;
		  /* 8211A238h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8211A238h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211A238h case    2:*/		return 0x8211A23C;
		  /* 8211A23Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8211A23Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211A23Ch case    3:*/		return 0x8211A240;
		  /* 8211A240h */ case    4:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211A240h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211A240h case    4:*/		return 0x8211A244;
		  /* 8211A244h */ case    5:  		/* mr R30, R3 */
		/* 8211A244h case    5:*/		regs.R30 = regs.R3;
		/* 8211A244h case    5:*/		return 0x8211A248;
		  /* 8211A248h */ case    6:  		/* mr R31, R4 */
		/* 8211A248h case    6:*/		regs.R31 = regs.R4;
		/* 8211A248h case    6:*/		return 0x8211A24C;
		  /* 8211A24Ch */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 8211A24Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A24Ch case    7:*/		return 0x8211A250;
		  /* 8211A250h */ case    8:  		/* bc 12, CR6_EQ, 132 */
		/* 8211A250h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211A2D4;  }
		/* 8211A250h case    8:*/		return 0x8211A254;
		  /* 8211A254h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A254h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A254h case    9:*/		return 0x8211A258;
		  /* 8211A258h */ case   10:  		/* cmpwi CR6, R11, 1 */
		/* 8211A258h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A258h case   10:*/		return 0x8211A25C;
		  /* 8211A25Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8211A25Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211A27C;  }
		/* 8211A25Ch case   11:*/		return 0x8211A260;
		  /* 8211A260h */ case   12:  		/* mr R3, R30 */
		/* 8211A260h case   12:*/		regs.R3 = regs.R30;
		/* 8211A260h case   12:*/		return 0x8211A264;
		  /* 8211A264h */ case   13:  		/* lwz R4, <#[R31 + 8]> */
		/* 8211A264h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8211A264h case   13:*/		return 0x8211A268;
		  /* 8211A268h */ case   14:  		/* bl -56 */
		/* 8211A268h case   14:*/		regs.LR = 0x8211A26C; return 0x8211A230;
		/* 8211A268h case   14:*/		return 0x8211A26C;
		  /* 8211A26Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8211A26Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211A26Ch case   15:*/		return 0x8211A270;
		  /* 8211A270h */ case   16:  		/* bc 4, CR0_EQ, 68 */
		/* 8211A270h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8211A2B4;  }
		/* 8211A270h case   16:*/		return 0x8211A274;
		  /* 8211A274h */ case   17:  		/* lwz R31, <#[R31 + 12]> */
		/* 8211A274h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8211A274h case   17:*/		return 0x8211A278;
		  /* 8211A278h */ case   18:  		/* b -44 */
		/* 8211A278h case   18:*/		return 0x8211A24C;
		/* 8211A278h case   18:*/		return 0x8211A27C;
	}
	return 0x8211A27C;
} // Block from 8211A230h-8211A27Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211A27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A27C);
		  /* 8211A27Ch */ case    0:  		/* cmpwi CR6, R11, 6 */
		/* 8211A27Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211A27Ch case    0:*/		return 0x8211A280;
		  /* 8211A280h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 8211A280h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211A2AC;  }
		/* 8211A280h case    1:*/		return 0x8211A284;
		  /* 8211A284h */ case    2:  		/* cmpwi CR6, R11, 8 */
		/* 8211A284h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A284h case    2:*/		return 0x8211A288;
		  /* 8211A288h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 8211A288h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211A2A4;  }
		/* 8211A288h case    3:*/		return 0x8211A28C;
		  /* 8211A28Ch */ case    4:  		/* cmpwi CR6, R11, 9 */
		/* 8211A28Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211A28Ch case    4:*/		return 0x8211A290;
		  /* 8211A290h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 8211A290h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211A2DC;  }
		/* 8211A290h case    5:*/		return 0x8211A294;
		  /* 8211A294h */ case    6:  		/* cmpwi CR6, R11, 11 */
		/* 8211A294h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8211A294h case    6:*/		return 0x8211A298;
		  /* 8211A298h */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 8211A298h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211A2BC;  }
		/* 8211A298h case    7:*/		return 0x8211A29C;
		  /* 8211A29Ch */ case    8:  		/* lwz R31, <#[R31 + 48]> */
		/* 8211A29Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000030) );
		/* 8211A29Ch case    8:*/		return 0x8211A2A0;
		  /* 8211A2A0h */ case    9:  		/* b -84 */
		/* 8211A2A0h case    9:*/		return 0x8211A24C;
		/* 8211A2A0h case    9:*/		return 0x8211A2A4;
	}
	return 0x8211A2A4;
} // Block from 8211A27Ch-8211A2A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2A4);
		  /* 8211A2A4h */ case    0:  		/* lwz R31, <#[R31 + 16]> */
		/* 8211A2A4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A2A4h case    0:*/		return 0x8211A2A8;
		  /* 8211A2A8h */ case    1:  		/* b -92 */
		/* 8211A2A8h case    1:*/		return 0x8211A24C;
		/* 8211A2A8h case    1:*/		return 0x8211A2AC;
	}
	return 0x8211A2AC;
} // Block from 8211A2A4h-8211A2ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2AC);
		  /* 8211A2ACh */ case    0:  		/* lwz R31, <#[R31 + 24]> */
		/* 8211A2ACh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000018) );
		/* 8211A2ACh case    0:*/		return 0x8211A2B0;
		  /* 8211A2B0h */ case    1:  		/* b -100 */
		/* 8211A2B0h case    1:*/		return 0x8211A24C;
		/* 8211A2B0h case    1:*/		return 0x8211A2B4;
	}
	return 0x8211A2B4;
} // Block from 8211A2ACh-8211A2B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2B4);
		  /* 8211A2B4h */ case    0:  		/* li R3, 1 */
		/* 8211A2B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8211A2B4h case    0:*/		return 0x8211A2B8;
		  /* 8211A2B8h */ case    1:  		/* b 44 */
		/* 8211A2B8h case    1:*/		return 0x8211A2E4;
		/* 8211A2B8h case    1:*/		return 0x8211A2BC;
	}
	return 0x8211A2BC;
} // Block from 8211A2B4h-8211A2BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2BC);
		  /* 8211A2BCh */ case    0:  		/* lis R11, -32255 */
		/* 8211A2BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A2BCh case    0:*/		return 0x8211A2C0;
		  /* 8211A2C0h */ case    1:  		/* li R5, 0 */
		/* 8211A2C0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211A2C0h case    1:*/		return 0x8211A2C4;
		  /* 8211A2C4h */ case    2:  		/* addi R6, R11, 8564 */
		/* 8211A2C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2174);
		/* 8211A2C4h case    2:*/		return 0x8211A2C8;
		  /* 8211A2C8h */ case    3:  		/* li R4, 0 */
		/* 8211A2C8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A2C8h case    3:*/		return 0x8211A2CC;
		  /* 8211A2CCh */ case    4:  		/* mr R3, R30 */
		/* 8211A2CCh case    4:*/		regs.R3 = regs.R30;
		/* 8211A2CCh case    4:*/		return 0x8211A2D0;
		  /* 8211A2D0h */ case    5:  		/* bl -2360 */
		/* 8211A2D0h case    5:*/		regs.LR = 0x8211A2D4; return 0x82119998;
		/* 8211A2D0h case    5:*/		return 0x8211A2D4;
	}
	return 0x8211A2D4;
} // Block from 8211A2BCh-8211A2D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2D4);
		  /* 8211A2D4h */ case    0:  		/* li R3, 0 */
		/* 8211A2D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A2D4h case    0:*/		return 0x8211A2D8;
		  /* 8211A2D8h */ case    1:  		/* b 12 */
		/* 8211A2D8h case    1:*/		return 0x8211A2E4;
		/* 8211A2D8h case    1:*/		return 0x8211A2DC;
	}
	return 0x8211A2DC;
} // Block from 8211A2D4h-8211A2DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2DC);
		  /* 8211A2DCh */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 8211A2DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8211A2DCh case    0:*/		return 0x8211A2E0;
		  /* 8211A2E0h */ case    1:  		/* rlwinm R3, R11, 0, 22, 22 */
		/* 8211A2E0h case    1:*/		cpu::op::rlwinm<0,0,22,22>(regs,&regs.R3,regs.R11);
		/* 8211A2E0h case    1:*/		return 0x8211A2E4;
	}
	return 0x8211A2E4;
} // Block from 8211A2DCh-8211A2E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2E4);
		  /* 8211A2E4h */ case    0:  		/* addi R1, R1, 144 */
		/* 8211A2E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211A2E4h case    0:*/		return 0x8211A2E8;
		  /* 8211A2E8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211A2E8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211A2E8h case    1:*/		return 0x8211A2EC;
		  /* 8211A2ECh */ case    2:  		/* mtspr LR, R12 */
		/* 8211A2ECh case    2:*/		regs.LR = regs.R12;
		/* 8211A2ECh case    2:*/		return 0x8211A2F0;
		  /* 8211A2F0h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8211A2F0h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211A2F0h case    3:*/		return 0x8211A2F4;
		  /* 8211A2F4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8211A2F4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211A2F4h case    4:*/		return 0x8211A2F8;
		  /* 8211A2F8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8211A2F8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211A2F8h case    5:*/		return 0x8211A2FC;
	}
	return 0x8211A2FC;
} // Block from 8211A2E4h-8211A2FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A2FC);
		  /* 8211A2FCh */ case    0:  		/* nop */
		/* 8211A2FCh case    0:*/		cpu::op::nop();
		/* 8211A2FCh case    0:*/		return 0x8211A300;
	}
	return 0x8211A300;
} // Block from 8211A2FCh-8211A300h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A300);
		  /* 8211A300h */ case    0:  		/* mfspr R12, LR */
		/* 8211A300h case    0:*/		regs.R12 = regs.LR;
		/* 8211A300h case    0:*/		return 0x8211A304;
		  /* 8211A304h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211A304h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211A304h case    1:*/		return 0x8211A308;
		  /* 8211A308h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8211A308h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211A308h case    2:*/		return 0x8211A30C;
		  /* 8211A30Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8211A30Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211A30Ch case    3:*/		return 0x8211A310;
		  /* 8211A310h */ case    4:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211A310h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211A310h case    4:*/		return 0x8211A314;
		  /* 8211A314h */ case    5:  		/* mr R30, R3 */
		/* 8211A314h case    5:*/		regs.R30 = regs.R3;
		/* 8211A314h case    5:*/		return 0x8211A318;
		  /* 8211A318h */ case    6:  		/* mr R31, R4 */
		/* 8211A318h case    6:*/		regs.R31 = regs.R4;
		/* 8211A318h case    6:*/		return 0x8211A31C;
		  /* 8211A31Ch */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 8211A31Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A31Ch case    7:*/		return 0x8211A320;
		  /* 8211A320h */ case    8:  		/* bc 12, CR6_EQ, 148 */
		/* 8211A320h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211A3B4;  }
		/* 8211A320h case    8:*/		return 0x8211A324;
		  /* 8211A324h */ case    9:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A324h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A324h case    9:*/		return 0x8211A328;
		  /* 8211A328h */ case   10:  		/* cmpwi CR6, R11, 1 */
		/* 8211A328h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A328h case   10:*/		return 0x8211A32C;
		  /* 8211A32Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8211A32Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211A34C;  }
		/* 8211A32Ch case   11:*/		return 0x8211A330;
		  /* 8211A330h */ case   12:  		/* mr R3, R30 */
		/* 8211A330h case   12:*/		regs.R3 = regs.R30;
		/* 8211A330h case   12:*/		return 0x8211A334;
		  /* 8211A334h */ case   13:  		/* lwz R4, <#[R31 + 8]> */
		/* 8211A334h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8211A334h case   13:*/		return 0x8211A338;
		  /* 8211A338h */ case   14:  		/* bl -56 */
		/* 8211A338h case   14:*/		regs.LR = 0x8211A33C; return 0x8211A300;
		/* 8211A338h case   14:*/		return 0x8211A33C;
		  /* 8211A33Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8211A33Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211A33Ch case   15:*/		return 0x8211A340;
		  /* 8211A340h */ case   16:  		/* bc 12, CR0_EQ, 108 */
		/* 8211A340h case   16:*/		if ( regs.CR[0].eq ) { return 0x8211A3AC;  }
		/* 8211A340h case   16:*/		return 0x8211A344;
		  /* 8211A344h */ case   17:  		/* lwz R31, <#[R31 + 12]> */
		/* 8211A344h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8211A344h case   17:*/		return 0x8211A348;
		  /* 8211A348h */ case   18:  		/* b -44 */
		/* 8211A348h case   18:*/		return 0x8211A31C;
		/* 8211A348h case   18:*/		return 0x8211A34C;
	}
	return 0x8211A34C;
} // Block from 8211A300h-8211A34Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211A34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A34C);
		  /* 8211A34Ch */ case    0:  		/* cmpwi CR6, R11, 6 */
		/* 8211A34Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211A34Ch case    0:*/		return 0x8211A350;
		  /* 8211A350h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 8211A350h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211A37C;  }
		/* 8211A350h case    1:*/		return 0x8211A354;
		  /* 8211A354h */ case    2:  		/* cmpwi CR6, R11, 8 */
		/* 8211A354h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A354h case    2:*/		return 0x8211A358;
		  /* 8211A358h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 8211A358h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211A374;  }
		/* 8211A358h case    3:*/		return 0x8211A35C;
		  /* 8211A35Ch */ case    4:  		/* cmpwi CR6, R11, 9 */
		/* 8211A35Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211A35Ch case    4:*/		return 0x8211A360;
		  /* 8211A360h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 8211A360h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211A3A0;  }
		/* 8211A360h case    5:*/		return 0x8211A364;
		  /* 8211A364h */ case    6:  		/* cmpwi CR6, R11, 11 */
		/* 8211A364h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8211A364h case    6:*/		return 0x8211A368;
		  /* 8211A368h */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 8211A368h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211A384;  }
		/* 8211A368h case    7:*/		return 0x8211A36C;
		  /* 8211A36Ch */ case    8:  		/* lwz R31, <#[R31 + 48]> */
		/* 8211A36Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000030) );
		/* 8211A36Ch case    8:*/		return 0x8211A370;
		  /* 8211A370h */ case    9:  		/* b -84 */
		/* 8211A370h case    9:*/		return 0x8211A31C;
		/* 8211A370h case    9:*/		return 0x8211A374;
	}
	return 0x8211A374;
} // Block from 8211A34Ch-8211A374h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211A374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A374);
		  /* 8211A374h */ case    0:  		/* lwz R31, <#[R31 + 16]> */
		/* 8211A374h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A374h case    0:*/		return 0x8211A378;
		  /* 8211A378h */ case    1:  		/* b -92 */
		/* 8211A378h case    1:*/		return 0x8211A31C;
		/* 8211A378h case    1:*/		return 0x8211A37C;
	}
	return 0x8211A37C;
} // Block from 8211A374h-8211A37Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A37Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A37C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A37C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A37C);
		  /* 8211A37Ch */ case    0:  		/* lwz R31, <#[R31 + 24]> */
		/* 8211A37Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000018) );
		/* 8211A37Ch case    0:*/		return 0x8211A380;
		  /* 8211A380h */ case    1:  		/* b -100 */
		/* 8211A380h case    1:*/		return 0x8211A31C;
		/* 8211A380h case    1:*/		return 0x8211A384;
	}
	return 0x8211A384;
} // Block from 8211A37Ch-8211A384h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A384);
		  /* 8211A384h */ case    0:  		/* lis R11, -32255 */
		/* 8211A384h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A384h case    0:*/		return 0x8211A388;
		  /* 8211A388h */ case    1:  		/* li R5, 0 */
		/* 8211A388h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211A388h case    1:*/		return 0x8211A38C;
		  /* 8211A38Ch */ case    2:  		/* addi R6, R11, 8564 */
		/* 8211A38Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2174);
		/* 8211A38Ch case    2:*/		return 0x8211A390;
		  /* 8211A390h */ case    3:  		/* li R4, 0 */
		/* 8211A390h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A390h case    3:*/		return 0x8211A394;
		  /* 8211A394h */ case    4:  		/* mr R3, R30 */
		/* 8211A394h case    4:*/		regs.R3 = regs.R30;
		/* 8211A394h case    4:*/		return 0x8211A398;
		  /* 8211A398h */ case    5:  		/* bl -2560 */
		/* 8211A398h case    5:*/		regs.LR = 0x8211A39C; return 0x82119998;
		/* 8211A398h case    5:*/		return 0x8211A39C;
		  /* 8211A39Ch */ case    6:  		/* b 16 */
		/* 8211A39Ch case    6:*/		return 0x8211A3AC;
		/* 8211A39Ch case    6:*/		return 0x8211A3A0;
	}
	return 0x8211A3A0;
} // Block from 8211A384h-8211A3A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211A3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A3A0);
		  /* 8211A3A0h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211A3A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A3A0h case    0:*/		return 0x8211A3A4;
		  /* 8211A3A4h */ case    1:  		/* cmplwi CR6, R11, 3 */
		/* 8211A3A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8211A3A4h case    1:*/		return 0x8211A3A8;
		  /* 8211A3A8h */ case    2:  		/* bc 12, CR6_LT, 12 */
		/* 8211A3A8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8211A3B4;  }
		/* 8211A3A8h case    2:*/		return 0x8211A3AC;
	}
	return 0x8211A3AC;
} // Block from 8211A3A0h-8211A3ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211A3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A3AC);
		  /* 8211A3ACh */ case    0:  		/* li R3, 0 */
		/* 8211A3ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A3ACh case    0:*/		return 0x8211A3B0;
		  /* 8211A3B0h */ case    1:  		/* b 8 */
		/* 8211A3B0h case    1:*/		return 0x8211A3B8;
		/* 8211A3B0h case    1:*/		return 0x8211A3B4;
	}
	return 0x8211A3B4;
} // Block from 8211A3ACh-8211A3B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A3B4);
		  /* 8211A3B4h */ case    0:  		/* li R3, 1 */
		/* 8211A3B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8211A3B4h case    0:*/		return 0x8211A3B8;
	}
	return 0x8211A3B8;
} // Block from 8211A3B4h-8211A3B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A3B8);
		  /* 8211A3B8h */ case    0:  		/* addi R1, R1, 144 */
		/* 8211A3B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211A3B8h case    0:*/		return 0x8211A3BC;
		  /* 8211A3BCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211A3BCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211A3BCh case    1:*/		return 0x8211A3C0;
		  /* 8211A3C0h */ case    2:  		/* mtspr LR, R12 */
		/* 8211A3C0h case    2:*/		regs.LR = regs.R12;
		/* 8211A3C0h case    2:*/		return 0x8211A3C4;
		  /* 8211A3C4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8211A3C4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211A3C4h case    3:*/		return 0x8211A3C8;
		  /* 8211A3C8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8211A3C8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211A3C8h case    4:*/		return 0x8211A3CC;
		  /* 8211A3CCh */ case    5:  		/* bclr 20, CR0_LT */
		/* 8211A3CCh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211A3CCh case    5:*/		return 0x8211A3D0;
	}
	return 0x8211A3D0;
} // Block from 8211A3B8h-8211A3D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A3D0);
		  /* 8211A3D0h */ case    0:  		/* mfspr R12, LR */
		/* 8211A3D0h case    0:*/		regs.R12 = regs.LR;
		/* 8211A3D0h case    0:*/		return 0x8211A3D4;
		  /* 8211A3D4h */ case    1:  		/* bl -561528 */
		/* 8211A3D4h case    1:*/		regs.LR = 0x8211A3D8; return 0x8209125C;
		/* 8211A3D4h case    1:*/		return 0x8211A3D8;
		  /* 8211A3D8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211A3D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211A3D8h case    2:*/		return 0x8211A3DC;
		  /* 8211A3DCh */ case    3:  		/* mr R29, R3 */
		/* 8211A3DCh case    3:*/		regs.R29 = regs.R3;
		/* 8211A3DCh case    3:*/		return 0x8211A3E0;
		  /* 8211A3E0h */ case    4:  		/* mr R31, R4 */
		/* 8211A3E0h case    4:*/		regs.R31 = regs.R4;
		/* 8211A3E0h case    4:*/		return 0x8211A3E4;
		  /* 8211A3E4h */ case    5:  		/* li R30, 0 */
		/* 8211A3E4h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211A3E4h case    5:*/		return 0x8211A3E8;
		  /* 8211A3E8h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8211A3E8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211A3E8h case    6:*/		return 0x8211A3EC;
		  /* 8211A3ECh */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 8211A3ECh case    7:*/		if ( regs.CR[6].eq ) { return 0x8211A420;  }
		/* 8211A3ECh case    7:*/		return 0x8211A3F0;
		  /* 8211A3F0h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A3F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A3F0h case    8:*/		return 0x8211A3F4;
		  /* 8211A3F4h */ case    9:  		/* cmpwi CR6, R11, 1 */
		/* 8211A3F4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A3F4h case    9:*/		return 0x8211A3F8;
		  /* 8211A3F8h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8211A3F8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211A418;  }
		/* 8211A3F8h case   10:*/		return 0x8211A3FC;
		  /* 8211A3FCh */ case   11:  		/* mr R3, R29 */
		/* 8211A3FCh case   11:*/		regs.R3 = regs.R29;
		/* 8211A3FCh case   11:*/		return 0x8211A400;
		  /* 8211A400h */ case   12:  		/* lwz R4, <#[R31 + 8]> */
		/* 8211A400h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8211A400h case   12:*/		return 0x8211A404;
		  /* 8211A404h */ case   13:  		/* bl -52 */
		/* 8211A404h case   13:*/		regs.LR = 0x8211A408; return 0x8211A3D0;
		/* 8211A404h case   13:*/		return 0x8211A408;
	}
	return 0x8211A408;
} // Block from 8211A3D0h-8211A408h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211A408h
// Function '?Error@CParse@D3DXShader@@IAAXPAUD3DXTOKEN@2@IPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A408);
		  /* 8211A408h */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 8211A408h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8211A408h case    0:*/		return 0x8211A40C;
		  /* 8211A40Ch */ case    1:  		/* add R30, R3, R30 */
		/* 8211A40Ch case    1:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 8211A40Ch case    1:*/		return 0x8211A410;
		  /* 8211A410h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 8211A410h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A410h case    2:*/		return 0x8211A414;
		  /* 8211A414h */ case    3:  		/* bc 4, CR6_EQ, -36 */
		/* 8211A414h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211A3F0;  }
		/* 8211A414h case    3:*/		return 0x8211A418;
	}
	return 0x8211A418;
} // Block from 8211A408h-8211A418h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211A418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A418);
		  /* 8211A418h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211A418h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A418h case    0:*/		return 0x8211A41C;
		  /* 8211A41Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8211A41Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211A428;  }
		/* 8211A41Ch case    1:*/		return 0x8211A420;
	}
	return 0x8211A420;
} // Block from 8211A418h-8211A420h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A420);
		  /* 8211A420h */ case    0:  		/* mr R3, R30 */
		/* 8211A420h case    0:*/		regs.R3 = regs.R30;
		/* 8211A420h case    0:*/		return 0x8211A424;
		  /* 8211A424h */ case    1:  		/* b 140 */
		/* 8211A424h case    1:*/		return 0x8211A4B0;
		/* 8211A424h case    1:*/		return 0x8211A428;
	}
	return 0x8211A428;
} // Block from 8211A420h-8211A428h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A428);
		  /* 8211A428h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A428h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A428h case    0:*/		return 0x8211A42C;
		  /* 8211A42Ch */ case    1:  		/* cmpwi CR6, R11, 6 */
		/* 8211A42Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211A42Ch case    1:*/		return 0x8211A430;
		  /* 8211A430h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 8211A430h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211A4A0;  }
		/* 8211A430h case    2:*/		return 0x8211A434;
		  /* 8211A434h */ case    3:  		/* cmpwi CR6, R11, 8 */
		/* 8211A434h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A434h case    3:*/		return 0x8211A438;
		  /* 8211A438h */ case    4:  		/* bc 12, CR6_EQ, 80 */
		/* 8211A438h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211A488;  }
		/* 8211A438h case    4:*/		return 0x8211A43C;
		  /* 8211A43Ch */ case    5:  		/* cmpwi CR6, R11, 9 */
		/* 8211A43Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211A43Ch case    5:*/		return 0x8211A440;
		  /* 8211A440h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 8211A440h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211A474;  }
		/* 8211A440h case    6:*/		return 0x8211A444;
		  /* 8211A444h */ case    7:  		/* cmpwi CR6, R11, 11 */
		/* 8211A444h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8211A444h case    7:*/		return 0x8211A448;
		  /* 8211A448h */ case    8:  		/* mr R3, R29 */
		/* 8211A448h case    8:*/		regs.R3 = regs.R29;
		/* 8211A448h case    8:*/		return 0x8211A44C;
		  /* 8211A44Ch */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8211A44Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8211A46C;  }
		/* 8211A44Ch case    9:*/		return 0x8211A450;
		  /* 8211A450h */ case   10:  		/* lis R11, -32255 */
		/* 8211A450h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A450h case   10:*/		return 0x8211A454;
		  /* 8211A454h */ case   11:  		/* li R5, 0 */
		/* 8211A454h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211A454h case   11:*/		return 0x8211A458;
		  /* 8211A458h */ case   12:  		/* addi R6, R11, 8564 */
		/* 8211A458h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2174);
		/* 8211A458h case   12:*/		return 0x8211A45C;
		  /* 8211A45Ch */ case   13:  		/* li R4, 0 */
		/* 8211A45Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A45Ch case   13:*/		return 0x8211A460;
		  /* 8211A460h */ case   14:  		/* bl -2760 */
		/* 8211A460h case   14:*/		regs.LR = 0x8211A464; return 0x82119998;
		/* 8211A460h case   14:*/		return 0x8211A464;
		  /* 8211A464h */ case   15:  		/* li R3, 0 */
		/* 8211A464h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A464h case   15:*/		return 0x8211A468;
		  /* 8211A468h */ case   16:  		/* b 72 */
		/* 8211A468h case   16:*/		return 0x8211A4B0;
		/* 8211A468h case   16:*/		return 0x8211A46C;
	}
	return 0x8211A46C;
} // Block from 8211A428h-8211A46Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211A46Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A46C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A46C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A46C);
		  /* 8211A46Ch */ case    0:  		/* lwz R4, <#[R31 + 48]> */
		/* 8211A46Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 8211A46Ch case    0:*/		return 0x8211A470;
		  /* 8211A470h */ case    1:  		/* b 56 */
		/* 8211A470h case    1:*/		return 0x8211A4A8;
		/* 8211A470h case    1:*/		return 0x8211A474;
	}
	return 0x8211A474;
} // Block from 8211A46Ch-8211A474h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A474);
		  /* 8211A474h */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 8211A474h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8211A474h case    0:*/		return 0x8211A478;
		  /* 8211A478h */ case    1:  		/* lwz R10, <#[R31 + 28]> */
		/* 8211A478h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211A478h case    1:*/		return 0x8211A47C;
		  /* 8211A47Ch */ case    2:  		/* mullw R11, R11, R10 */
		/* 8211A47Ch case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8211A47Ch case    2:*/		return 0x8211A480;
		  /* 8211A480h */ case    3:  		/* add R3, R11, R30 */
		/* 8211A480h case    3:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R30);
		/* 8211A480h case    3:*/		return 0x8211A484;
		  /* 8211A484h */ case    4:  		/* b 44 */
		/* 8211A484h case    4:*/		return 0x8211A4B0;
		/* 8211A484h case    4:*/		return 0x8211A488;
	}
	return 0x8211A488;
} // Block from 8211A474h-8211A488h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211A488h
// Function '?Warning@CParse@D3DXShader@@IAAXPAUD3DXTOKEN@2@IPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A488);
		  /* 8211A488h */ case    0:  		/* mr R3, R29 */
		/* 8211A488h case    0:*/		regs.R3 = regs.R29;
		/* 8211A488h case    0:*/		return 0x8211A48C;
		  /* 8211A48Ch */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 8211A48Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A48Ch case    1:*/		return 0x8211A490;
		  /* 8211A490h */ case    2:  		/* bl -192 */
		/* 8211A490h case    2:*/		regs.LR = 0x8211A494; return 0x8211A3D0;
		/* 8211A490h case    2:*/		return 0x8211A494;
		  /* 8211A494h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8211A494h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8211A494h case    3:*/		return 0x8211A498;
		  /* 8211A498h */ case    4:  		/* mullw R11, R3, R11 */
		/* 8211A498h case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8211A498h case    4:*/		return 0x8211A49C;
		  /* 8211A49Ch */ case    5:  		/* b -28 */
		/* 8211A49Ch case    5:*/		return 0x8211A480;
		/* 8211A49Ch case    5:*/		return 0x8211A4A0;
	}
	return 0x8211A4A0;
} // Block from 8211A488h-8211A4A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A4A0);
		  /* 8211A4A0h */ case    0:  		/* lwz R4, <#[R31 + 24]> */
		/* 8211A4A0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 8211A4A0h case    0:*/		return 0x8211A4A4;
		  /* 8211A4A4h */ case    1:  		/* mr R3, R29 */
		/* 8211A4A4h case    1:*/		regs.R3 = regs.R29;
		/* 8211A4A4h case    1:*/		return 0x8211A4A8;
	}
	return 0x8211A4A8;
} // Block from 8211A4A0h-8211A4A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A4A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A4A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A4A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A4A8);
		  /* 8211A4A8h */ case    0:  		/* bl -216 */
		/* 8211A4A8h case    0:*/		regs.LR = 0x8211A4AC; return 0x8211A3D0;
		/* 8211A4A8h case    0:*/		return 0x8211A4AC;
		  /* 8211A4ACh */ case    1:  		/* add R3, R3, R30 */
		/* 8211A4ACh case    1:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R30);
		/* 8211A4ACh case    1:*/		return 0x8211A4B0;
	}
	return 0x8211A4B0;
} // Block from 8211A4A8h-8211A4B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A4B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A4B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A4B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A4B0);
		  /* 8211A4B0h */ case    0:  		/* addi R1, R1, 144 */
		/* 8211A4B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211A4B0h case    0:*/		return 0x8211A4B4;
		  /* 8211A4B4h */ case    1:  		/* b -561672 */
		/* 8211A4B4h case    1:*/		return 0x820912AC;
		/* 8211A4B4h case    1:*/		return 0x8211A4B8;
	}
	return 0x8211A4B8;
} // Block from 8211A4B0h-8211A4B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A4B8);
		  /* 8211A4B8h */ case    0:  		/* mfspr R12, LR */
		/* 8211A4B8h case    0:*/		regs.R12 = regs.LR;
		/* 8211A4B8h case    0:*/		return 0x8211A4BC;
		  /* 8211A4BCh */ case    1:  		/* bl -561776 */
		/* 8211A4BCh case    1:*/		regs.LR = 0x8211A4C0; return 0x8209124C;
		/* 8211A4BCh case    1:*/		return 0x8211A4C0;
		  /* 8211A4C0h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 8211A4C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 8211A4C0h case    2:*/		return 0x8211A4C4;
		  /* 8211A4C4h */ case    3:  		/* mr R29, R3 */
		/* 8211A4C4h case    3:*/		regs.R29 = regs.R3;
		/* 8211A4C4h case    3:*/		return 0x8211A4C8;
		  /* 8211A4C8h */ case    4:  		/* mr R25, R4 */
		/* 8211A4C8h case    4:*/		regs.R25 = regs.R4;
		/* 8211A4C8h case    4:*/		return 0x8211A4CC;
		  /* 8211A4CCh */ case    5:  		/* mr R26, R5 */
		/* 8211A4CCh case    5:*/		regs.R26 = regs.R5;
		/* 8211A4CCh case    5:*/		return 0x8211A4D0;
		  /* 8211A4D0h */ case    6:  		/* mr R31, R6 */
		/* 8211A4D0h case    6:*/		regs.R31 = regs.R6;
		/* 8211A4D0h case    6:*/		return 0x8211A4D4;
		  /* 8211A4D4h */ case    7:  		/* addi R27, R1, 80 */
		/* 8211A4D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0x50);
		/* 8211A4D4h case    7:*/		return 0x8211A4D8;
		  /* 8211A4D8h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 8211A4D8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8211A4D8h case    8:*/		return 0x8211A4DC;
		  /* 8211A4DCh */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 8211A4DCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211A4E8;  }
		/* 8211A4DCh case    9:*/		return 0x8211A4E0;
		  /* 8211A4E0h */ case   10:  		/* li R3, 0 */
		/* 8211A4E0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A4E0h case   10:*/		return 0x8211A4E4;
		  /* 8211A4E4h */ case   11:  		/* b 1004 */
		/* 8211A4E4h case   11:*/		return 0x8211A8D0;
		/* 8211A4E4h case   11:*/		return 0x8211A4E8;
	}
	return 0x8211A4E8;
} // Block from 8211A4B8h-8211A4E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211A4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A4E8);
		  /* 8211A4E8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211A4E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A4E8h case    0:*/		return 0x8211A4EC;
		  /* 8211A4ECh */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8211A4ECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211A4FC;  }
		/* 8211A4ECh case    1:*/		return 0x8211A4F0;
		  /* 8211A4F0h */ case    2:  		/* lis R11, -32255 */
		/* 8211A4F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A4F0h case    2:*/		return 0x8211A4F4;
		  /* 8211A4F4h */ case    3:  		/* addi R27, R11, -15880 */
		/* 8211A4F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFC1F8);
		/* 8211A4F4h case    3:*/		return 0x8211A4F8;
		  /* 8211A4F8h */ case    4:  		/* b 908 */
		/* 8211A4F8h case    4:*/		return 0x8211A884;
		/* 8211A4F8h case    4:*/		return 0x8211A4FC;
	}
	return 0x8211A4FC;
} // Block from 8211A4E8h-8211A4FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211A4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A4FC);
		  /* 8211A4FCh */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A4FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A4FCh case    0:*/		return 0x8211A500;
	}
	return 0x8211A500;
} // Block from 8211A4FCh-8211A500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A500h
// Function '?FatalError@CParse@D3DXShader@@IAAXPAUD3DXTOKEN@2@IPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A500);
		  /* 8211A500h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 8211A500h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A500h case    0:*/		return 0x8211A504;
		  /* 8211A504h */ case    1:  		/* bc 12, CR6_EQ, 816 */
		/* 8211A504h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211A834;  }
		/* 8211A504h case    1:*/		return 0x8211A508;
		  /* 8211A508h */ case    2:  		/* cmpwi CR6, R11, 8 */
		/* 8211A508h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A508h case    2:*/		return 0x8211A50C;
		  /* 8211A50Ch */ case    3:  		/* bc 12, CR6_EQ, 656 */
		/* 8211A50Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8211A79C;  }
		/* 8211A50Ch case    3:*/		return 0x8211A510;
		  /* 8211A510h */ case    4:  		/* cmpwi CR6, R11, 9 */
		/* 8211A510h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211A510h case    4:*/		return 0x8211A514;
		  /* 8211A514h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 8211A514h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211A524;  }
		/* 8211A514h case    5:*/		return 0x8211A518;
		  /* 8211A518h */ case    6:  		/* lis R11, -32253 */
		/* 8211A518h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A518h case    6:*/		return 0x8211A51C;
		  /* 8211A51Ch */ case    7:  		/* addi R27, R11, 8792 */
		/* 8211A51Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x2258);
		/* 8211A51Ch case    7:*/		return 0x8211A520;
		  /* 8211A520h */ case    8:  		/* b 868 */
		/* 8211A520h case    8:*/		return 0x8211A884;
		/* 8211A520h case    8:*/		return 0x8211A524;
	}
	return 0x8211A524;
} // Block from 8211A500h-8211A524h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211A524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A524);
		  /* 8211A524h */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 8211A524h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8211A524h case    0:*/		return 0x8211A528;
		  /* 8211A528h */ case    1:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 8211A528h case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8211A528h case    1:*/		return 0x8211A52C;
		  /* 8211A52Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8211A52Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8211A53C;  }
		/* 8211A52Ch case    2:*/		return 0x8211A530;
		  /* 8211A530h */ case    3:  		/* lis R11, -32255 */
		/* 8211A530h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A530h case    3:*/		return 0x8211A534;
		  /* 8211A534h */ case    4:  		/* addi R6, R11, -15860 */
		/* 8211A534h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC20C);
		/* 8211A534h case    4:*/		return 0x8211A538;
		  /* 8211A538h */ case    5:  		/* b 12 */
		/* 8211A538h case    5:*/		return 0x8211A544;
		/* 8211A538h case    5:*/		return 0x8211A53C;
	}
	return 0x8211A53C;
} // Block from 8211A524h-8211A53Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A53C);
		  /* 8211A53Ch */ case    0:  		/* lis R11, -32256 */
		/* 8211A53Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211A53Ch case    0:*/		return 0x8211A540;
		  /* 8211A540h */ case    1:  		/* addi R6, R11, 4485 */
		/* 8211A540h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1185);
		/* 8211A540h case    1:*/		return 0x8211A544;
	}
	return 0x8211A544;
} // Block from 8211A53Ch-8211A544h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A544);
		  /* 8211A544h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8211A544h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8211A544h case    0:*/		return 0x8211A548;
		  /* 8211A548h */ case    1:  		/* cmplwi CR6, R11, 53 */
		/* 8211A548h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000035);
		/* 8211A548h case    1:*/		return 0x8211A54C;
		  /* 8211A54Ch */ case    2:  		/* bc 12, CR6_GT, 500 */
		/* 8211A54Ch case    2:*/		if ( regs.CR[6].gt ) { return 0x8211A740;  }
		/* 8211A54Ch case    2:*/		return 0x8211A550;
		  /* 8211A550h */ case    3:  		/* lis R12, -32253 */
		/* 8211A550h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 8211A550h case    3:*/		return 0x8211A554;
		  /* 8211A554h */ case    4:  		/* addi R12, R12, 5232 */
		/* 8211A554h case    4:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x1470);
		/* 8211A554h case    4:*/		return 0x8211A558;
		  /* 8211A558h */ case    5:  		/* lbzx R0, <#[R12 + R11]> */
		/* 8211A558h case    5:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 8211A558h case    5:*/		return 0x8211A55C;
		  /* 8211A55Ch */ case    6:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 8211A55Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 8211A55Ch case    6:*/		return 0x8211A560;
		  /* 8211A560h */ case    7:  		/* lis R12, -32238 */
		/* 8211A560h case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 8211A560h case    7:*/		return 0x8211A564;
		  /* 8211A564h */ case    8:  		/* ori R0, R0, 0 */
		/* 8211A564h case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8211A564h case    8:*/		return 0x8211A568;
		  /* 8211A568h */ case    9:  		/* addi R12, R12, -23176 */
		/* 8211A568h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFA578);
		/* 8211A568h case    9:*/		return 0x8211A56C;
		  /* 8211A56Ch */ case   10:  		/* add R12, R12, R0 */
		/* 8211A56Ch case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8211A56Ch case   10:*/		return 0x8211A570;
		  /* 8211A570h */ case   11:  		/* mtspr CTR, R12 */
		/* 8211A570h case   11:*/		regs.CTR = regs.R12;
		/* 8211A570h case   11:*/		return 0x8211A574;
		  /* 8211A574h */ case   12:  		/* bcctr 20, CR0_LT */
		/* 8211A574h case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8211A574h case   12:*/		return 0x8211A578;
		  /* 8211A578h */ case   13:  		/* lis R11, -32255 */
		/* 8211A578h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A578h case   13:*/		return 0x8211A57C;
		  /* 8211A57Ch */ case   14:  		/* addi R7, R11, -15832 */
		/* 8211A57Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC228);
		/* 8211A57Ch case   14:*/		return 0x8211A580;
	}
	return 0x8211A580;
} // Block from 8211A544h-8211A580h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211A580h
// Function '?NonNull@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A580);
		  /* 8211A580h */ case    0:  		/* b 456 */
		/* 8211A580h case    0:*/		return 0x8211A748;
		/* 8211A580h case    0:*/		return 0x8211A584;
		  /* 8211A584h */ case    1:  		/* lis R11, -32255 */
		/* 8211A584h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A584h case    1:*/		return 0x8211A588;
		  /* 8211A588h */ case    2:  		/* addi R7, R11, -15780 */
		/* 8211A588h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC25C);
		/* 8211A588h case    2:*/		return 0x8211A58C;
		  /* 8211A58Ch */ case    3:  		/* b 444 */
		/* 8211A58Ch case    3:*/		return 0x8211A748;
		/* 8211A58Ch case    3:*/		return 0x8211A590;
		  /* 8211A590h */ case    4:  		/* lis R11, -32253 */
		/* 8211A590h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A590h case    4:*/		return 0x8211A594;
		  /* 8211A594h */ case    5:  		/* addi R7, R11, 8784 */
		/* 8211A594h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2250);
		/* 8211A594h case    5:*/		return 0x8211A598;
		  /* 8211A598h */ case    6:  		/* b 432 */
		/* 8211A598h case    6:*/		return 0x8211A748;
		/* 8211A598h case    6:*/		return 0x8211A59C;
		  /* 8211A59Ch */ case    7:  		/* lis R11, -32255 */
		/* 8211A59Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A59Ch case    7:*/		return 0x8211A5A0;
		  /* 8211A5A0h */ case    8:  		/* addi R7, R11, -15796 */
		/* 8211A5A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC24C);
		/* 8211A5A0h case    8:*/		return 0x8211A5A4;
		  /* 8211A5A4h */ case    9:  		/* b 420 */
		/* 8211A5A4h case    9:*/		return 0x8211A748;
		/* 8211A5A4h case    9:*/		return 0x8211A5A8;
		  /* 8211A5A8h */ case   10:  		/* lis R11, -32253 */
		/* 8211A5A8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A5A8h case   10:*/		return 0x8211A5AC;
		  /* 8211A5ACh */ case   11:  		/* addi R7, R11, 8776 */
		/* 8211A5ACh case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2248);
		/* 8211A5ACh case   11:*/		return 0x8211A5B0;
		  /* 8211A5B0h */ case   12:  		/* b 408 */
		/* 8211A5B0h case   12:*/		return 0x8211A748;
		/* 8211A5B0h case   12:*/		return 0x8211A5B4;
		  /* 8211A5B4h */ case   13:  		/* lis R11, -32255 */
		/* 8211A5B4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A5B4h case   13:*/		return 0x8211A5B8;
		  /* 8211A5B8h */ case   14:  		/* addi R7, R11, -15804 */
		/* 8211A5B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC244);
		/* 8211A5B8h case   14:*/		return 0x8211A5BC;
		  /* 8211A5BCh */ case   15:  		/* b 396 */
		/* 8211A5BCh case   15:*/		return 0x8211A748;
		/* 8211A5BCh case   15:*/		return 0x8211A5C0;
		  /* 8211A5C0h */ case   16:  		/* lis R11, -32253 */
		/* 8211A5C0h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A5C0h case   16:*/		return 0x8211A5C4;
		  /* 8211A5C4h */ case   17:  		/* addi R7, R11, 8764 */
		/* 8211A5C4h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x223C);
		/* 8211A5C4h case   17:*/		return 0x8211A5C8;
		  /* 8211A5C8h */ case   18:  		/* b 384 */
		/* 8211A5C8h case   18:*/		return 0x8211A748;
		/* 8211A5C8h case   18:*/		return 0x8211A5CC;
		  /* 8211A5CCh */ case   19:  		/* lis R11, -32253 */
		/* 8211A5CCh case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A5CCh case   19:*/		return 0x8211A5D0;
		  /* 8211A5D0h */ case   20:  		/* addi R7, R11, 8752 */
		/* 8211A5D0h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2230);
		/* 8211A5D0h case   20:*/		return 0x8211A5D4;
		  /* 8211A5D4h */ case   21:  		/* b 372 */
		/* 8211A5D4h case   21:*/		return 0x8211A748;
		/* 8211A5D4h case   21:*/		return 0x8211A5D8;
		  /* 8211A5D8h */ case   22:  		/* lis R11, -32253 */
		/* 8211A5D8h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A5D8h case   22:*/		return 0x8211A5DC;
		  /* 8211A5DCh */ case   23:  		/* addi R7, R11, 8736 */
		/* 8211A5DCh case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2220);
		/* 8211A5DCh case   23:*/		return 0x8211A5E0;
		  /* 8211A5E0h */ case   24:  		/* b 360 */
		/* 8211A5E0h case   24:*/		return 0x8211A748;
		/* 8211A5E0h case   24:*/		return 0x8211A5E4;
		  /* 8211A5E4h */ case   25:  		/* lis R11, -32253 */
		/* 8211A5E4h case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A5E4h case   25:*/		return 0x8211A5E8;
	}
	return 0x8211A5E8;
} // Block from 8211A580h-8211A5E8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8211A5E8h
// Function '?PushScope@CParse@D3DXShader@@IAAJW4_D3DSCOPE_TYPE@2@PBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A5E8);
		  /* 8211A5E8h */ case    0:  		/* addi R7, R11, 8724 */
		/* 8211A5E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2214);
		/* 8211A5E8h case    0:*/		return 0x8211A5EC;
		  /* 8211A5ECh */ case    1:  		/* b 348 */
		/* 8211A5ECh case    1:*/		return 0x8211A748;
		/* 8211A5ECh case    1:*/		return 0x8211A5F0;
		  /* 8211A5F0h */ case    2:  		/* lis R11, -32253 */
		/* 8211A5F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A5F0h case    2:*/		return 0x8211A5F4;
		  /* 8211A5F4h */ case    3:  		/* addi R7, R11, 8712 */
		/* 8211A5F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2208);
		/* 8211A5F4h case    3:*/		return 0x8211A5F8;
		  /* 8211A5F8h */ case    4:  		/* b 336 */
		/* 8211A5F8h case    4:*/		return 0x8211A748;
		/* 8211A5F8h case    4:*/		return 0x8211A5FC;
		  /* 8211A5FCh */ case    5:  		/* lis R11, -32253 */
		/* 8211A5FCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A5FCh case    5:*/		return 0x8211A600;
		  /* 8211A600h */ case    6:  		/* addi R7, R11, 8696 */
		/* 8211A600h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x21F8);
		/* 8211A600h case    6:*/		return 0x8211A604;
		  /* 8211A604h */ case    7:  		/* b 324 */
		/* 8211A604h case    7:*/		return 0x8211A748;
		/* 8211A604h case    7:*/		return 0x8211A608;
		  /* 8211A608h */ case    8:  		/* lis R11, -32255 */
		/* 8211A608h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A608h case    8:*/		return 0x8211A60C;
		  /* 8211A60Ch */ case    9:  		/* addi R7, R11, -15872 */
		/* 8211A60Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFC200);
		/* 8211A60Ch case    9:*/		return 0x8211A610;
		  /* 8211A610h */ case   10:  		/* b 312 */
		/* 8211A610h case   10:*/		return 0x8211A748;
		/* 8211A610h case   10:*/		return 0x8211A614;
		  /* 8211A614h */ case   11:  		/* lis R11, -32255 */
		/* 8211A614h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A614h case   11:*/		return 0x8211A618;
		  /* 8211A618h */ case   12:  		/* addi R7, R11, 12408 */
		/* 8211A618h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x3078);
		/* 8211A618h case   12:*/		return 0x8211A61C;
		  /* 8211A61Ch */ case   13:  		/* b 300 */
		/* 8211A61Ch case   13:*/		return 0x8211A748;
		/* 8211A61Ch case   13:*/		return 0x8211A620;
		  /* 8211A620h */ case   14:  		/* lis R11, -32255 */
		/* 8211A620h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A620h case   14:*/		return 0x8211A624;
		  /* 8211A624h */ case   15:  		/* addi R7, R11, 12400 */
		/* 8211A624h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x3070);
		/* 8211A624h case   15:*/		return 0x8211A628;
		  /* 8211A628h */ case   16:  		/* b 288 */
		/* 8211A628h case   16:*/		return 0x8211A748;
		/* 8211A628h case   16:*/		return 0x8211A62C;
		  /* 8211A62Ch */ case   17:  		/* lis R11, -32253 */
		/* 8211A62Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A62Ch case   17:*/		return 0x8211A630;
		  /* 8211A630h */ case   18:  		/* addi R7, R11, 8684 */
		/* 8211A630h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x21EC);
		/* 8211A630h case   18:*/		return 0x8211A634;
		  /* 8211A634h */ case   19:  		/* b 276 */
		/* 8211A634h case   19:*/		return 0x8211A748;
		/* 8211A634h case   19:*/		return 0x8211A638;
		  /* 8211A638h */ case   20:  		/* lis R11, -32253 */
		/* 8211A638h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A638h case   20:*/		return 0x8211A63C;
		  /* 8211A63Ch */ case   21:  		/* addi R7, R11, 8672 */
		/* 8211A63Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x21E0);
		/* 8211A63Ch case   21:*/		return 0x8211A640;
		  /* 8211A640h */ case   22:  		/* b 264 */
		/* 8211A640h case   22:*/		return 0x8211A748;
		/* 8211A640h case   22:*/		return 0x8211A644;
		  /* 8211A644h */ case   23:  		/* lis R11, -32253 */
		/* 8211A644h case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A644h case   23:*/		return 0x8211A648;
		  /* 8211A648h */ case   24:  		/* addi R7, R11, 8660 */
		/* 8211A648h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x21D4);
		/* 8211A648h case   24:*/		return 0x8211A64C;
		  /* 8211A64Ch */ case   25:  		/* b 252 */
		/* 8211A64Ch case   25:*/		return 0x8211A748;
		/* 8211A64Ch case   25:*/		return 0x8211A650;
		  /* 8211A650h */ case   26:  		/* lis R11, -32253 */
		/* 8211A650h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A650h case   26:*/		return 0x8211A654;
		  /* 8211A654h */ case   27:  		/* addi R7, R11, 8648 */
		/* 8211A654h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x21C8);
		/* 8211A654h case   27:*/		return 0x8211A658;
		  /* 8211A658h */ case   28:  		/* b 240 */
		/* 8211A658h case   28:*/		return 0x8211A748;
		/* 8211A658h case   28:*/		return 0x8211A65C;
		  /* 8211A65Ch */ case   29:  		/* lis R11, -32253 */
		/* 8211A65Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A65Ch case   29:*/		return 0x8211A660;
		  /* 8211A660h */ case   30:  		/* addi R7, R11, 8632 */
		/* 8211A660h case   30:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x21B8);
		/* 8211A660h case   30:*/		return 0x8211A664;
		  /* 8211A664h */ case   31:  		/* b 228 */
		/* 8211A664h case   31:*/		return 0x8211A748;
		/* 8211A664h case   31:*/		return 0x8211A668;
		  /* 8211A668h */ case   32:  		/* lis R11, -32253 */
		/* 8211A668h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A668h case   32:*/		return 0x8211A66C;
		  /* 8211A66Ch */ case   33:  		/* addi R7, R11, 8616 */
		/* 8211A66Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x21A8);
		/* 8211A66Ch case   33:*/		return 0x8211A670;
		  /* 8211A670h */ case   34:  		/* b 216 */
		/* 8211A670h case   34:*/		return 0x8211A748;
		/* 8211A670h case   34:*/		return 0x8211A674;
		  /* 8211A674h */ case   35:  		/* lis R11, -32253 */
		/* 8211A674h case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A674h case   35:*/		return 0x8211A678;
		  /* 8211A678h */ case   36:  		/* addi R7, R11, 8604 */
		/* 8211A678h case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x219C);
		/* 8211A678h case   36:*/		return 0x8211A67C;
		  /* 8211A67Ch */ case   37:  		/* b 204 */
		/* 8211A67Ch case   37:*/		return 0x8211A748;
		/* 8211A67Ch case   37:*/		return 0x8211A680;
		  /* 8211A680h */ case   38:  		/* lis R11, -32253 */
		/* 8211A680h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A680h case   38:*/		return 0x8211A684;
		  /* 8211A684h */ case   39:  		/* addi R7, R11, 8584 */
		/* 8211A684h case   39:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2188);
		/* 8211A684h case   39:*/		return 0x8211A688;
		  /* 8211A688h */ case   40:  		/* b 192 */
		/* 8211A688h case   40:*/		return 0x8211A748;
		/* 8211A688h case   40:*/		return 0x8211A68C;
		  /* 8211A68Ch */ case   41:  		/* lis R11, -32253 */
		/* 8211A68Ch case   41:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A68Ch case   41:*/		return 0x8211A690;
		  /* 8211A690h */ case   42:  		/* addi R7, R11, 8576 */
		/* 8211A690h case   42:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2180);
		/* 8211A690h case   42:*/		return 0x8211A694;
		  /* 8211A694h */ case   43:  		/* b 180 */
		/* 8211A694h case   43:*/		return 0x8211A748;
		/* 8211A694h case   43:*/		return 0x8211A698;
		  /* 8211A698h */ case   44:  		/* lis R11, -32255 */
		/* 8211A698h case   44:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A698h case   44:*/		return 0x8211A69C;
		  /* 8211A69Ch */ case   45:  		/* addi R7, R11, 12476 */
		/* 8211A69Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x30BC);
		/* 8211A69Ch case   45:*/		return 0x8211A6A0;
		  /* 8211A6A0h */ case   46:  		/* b 168 */
		/* 8211A6A0h case   46:*/		return 0x8211A748;
		/* 8211A6A0h case   46:*/		return 0x8211A6A4;
		  /* 8211A6A4h */ case   47:  		/* lis R11, -32253 */
		/* 8211A6A4h case   47:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A6A4h case   47:*/		return 0x8211A6A8;
		  /* 8211A6A8h */ case   48:  		/* addi R7, R11, 8564 */
		/* 8211A6A8h case   48:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2174);
		/* 8211A6A8h case   48:*/		return 0x8211A6AC;
		  /* 8211A6ACh */ case   49:  		/* b 156 */
		/* 8211A6ACh case   49:*/		return 0x8211A748;
		/* 8211A6ACh case   49:*/		return 0x8211A6B0;
		  /* 8211A6B0h */ case   50:  		/* lis R11, -32253 */
		/* 8211A6B0h case   50:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A6B0h case   50:*/		return 0x8211A6B4;
		  /* 8211A6B4h */ case   51:  		/* addi R7, R11, 8552 */
		/* 8211A6B4h case   51:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2168);
		/* 8211A6B4h case   51:*/		return 0x8211A6B8;
		  /* 8211A6B8h */ case   52:  		/* b 144 */
		/* 8211A6B8h case   52:*/		return 0x8211A748;
		/* 8211A6B8h case   52:*/		return 0x8211A6BC;
		  /* 8211A6BCh */ case   53:  		/* lis R11, -32253 */
		/* 8211A6BCh case   53:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A6BCh case   53:*/		return 0x8211A6C0;
		  /* 8211A6C0h */ case   54:  		/* addi R7, R11, 8540 */
		/* 8211A6C0h case   54:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x215C);
		/* 8211A6C0h case   54:*/		return 0x8211A6C4;
		  /* 8211A6C4h */ case   55:  		/* b 132 */
		/* 8211A6C4h case   55:*/		return 0x8211A748;
		/* 8211A6C4h case   55:*/		return 0x8211A6C8;
		  /* 8211A6C8h */ case   56:  		/* lis R11, -32253 */
		/* 8211A6C8h case   56:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A6C8h case   56:*/		return 0x8211A6CC;
		  /* 8211A6CCh */ case   57:  		/* addi R7, R11, 8528 */
		/* 8211A6CCh case   57:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2150);
		/* 8211A6CCh case   57:*/		return 0x8211A6D0;
		  /* 8211A6D0h */ case   58:  		/* b 120 */
		/* 8211A6D0h case   58:*/		return 0x8211A748;
		/* 8211A6D0h case   58:*/		return 0x8211A6D4;
		  /* 8211A6D4h */ case   59:  		/* lis R11, -32255 */
		/* 8211A6D4h case   59:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A6D4h case   59:*/		return 0x8211A6D8;
		  /* 8211A6D8h */ case   60:  		/* addi R7, R11, 12292 */
		/* 8211A6D8h case   60:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x3004);
		/* 8211A6D8h case   60:*/		return 0x8211A6DC;
		  /* 8211A6DCh */ case   61:  		/* b 108 */
		/* 8211A6DCh case   61:*/		return 0x8211A748;
		/* 8211A6DCh case   61:*/		return 0x8211A6E0;
		  /* 8211A6E0h */ case   62:  		/* lis R11, -32255 */
		/* 8211A6E0h case   62:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A6E0h case   62:*/		return 0x8211A6E4;
		  /* 8211A6E4h */ case   63:  		/* addi R7, R11, 12276 */
		/* 8211A6E4h case   63:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2FF4);
		/* 8211A6E4h case   63:*/		return 0x8211A6E8;
		  /* 8211A6E8h */ case   64:  		/* b 96 */
		/* 8211A6E8h case   64:*/		return 0x8211A748;
		/* 8211A6E8h case   64:*/		return 0x8211A6EC;
		  /* 8211A6ECh */ case   65:  		/* lis R11, -32253 */
		/* 8211A6ECh case   65:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A6ECh case   65:*/		return 0x8211A6F0;
		  /* 8211A6F0h */ case   66:  		/* addi R7, R11, 8512 */
		/* 8211A6F0h case   66:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2140);
		/* 8211A6F0h case   66:*/		return 0x8211A6F4;
		  /* 8211A6F4h */ case   67:  		/* b 84 */
		/* 8211A6F4h case   67:*/		return 0x8211A748;
		/* 8211A6F4h case   67:*/		return 0x8211A6F8;
		  /* 8211A6F8h */ case   68:  		/* lis R11, -32253 */
		/* 8211A6F8h case   68:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A6F8h case   68:*/		return 0x8211A6FC;
		  /* 8211A6FCh */ case   69:  		/* addi R7, R11, 8496 */
		/* 8211A6FCh case   69:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2130);
		/* 8211A6FCh case   69:*/		return 0x8211A700;
		  /* 8211A700h */ case   70:  		/* b 72 */
		/* 8211A700h case   70:*/		return 0x8211A748;
		/* 8211A700h case   70:*/		return 0x8211A704;
		  /* 8211A704h */ case   71:  		/* lis R11, -32255 */
		/* 8211A704h case   71:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A704h case   71:*/		return 0x8211A708;
		  /* 8211A708h */ case   72:  		/* addi R7, R11, 12244 */
		/* 8211A708h case   72:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2FD4);
		/* 8211A708h case   72:*/		return 0x8211A70C;
		  /* 8211A70Ch */ case   73:  		/* b 60 */
		/* 8211A70Ch case   73:*/		return 0x8211A748;
		/* 8211A70Ch case   73:*/		return 0x8211A710;
		  /* 8211A710h */ case   74:  		/* lis R11, -32253 */
		/* 8211A710h case   74:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A710h case   74:*/		return 0x8211A714;
		  /* 8211A714h */ case   75:  		/* addi R7, R11, 8484 */
		/* 8211A714h case   75:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2124);
		/* 8211A714h case   75:*/		return 0x8211A718;
		  /* 8211A718h */ case   76:  		/* b 48 */
		/* 8211A718h case   76:*/		return 0x8211A748;
		/* 8211A718h case   76:*/		return 0x8211A71C;
		  /* 8211A71Ch */ case   77:  		/* lis R11, -32253 */
		/* 8211A71Ch case   77:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A71Ch case   77:*/		return 0x8211A720;
		  /* 8211A720h */ case   78:  		/* addi R7, R11, 8472 */
		/* 8211A720h case   78:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2118);
		/* 8211A720h case   78:*/		return 0x8211A724;
		  /* 8211A724h */ case   79:  		/* b 36 */
		/* 8211A724h case   79:*/		return 0x8211A748;
		/* 8211A724h case   79:*/		return 0x8211A728;
		  /* 8211A728h */ case   80:  		/* lis R11, -32253 */
		/* 8211A728h case   80:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A728h case   80:*/		return 0x8211A72C;
		  /* 8211A72Ch */ case   81:  		/* addi R7, R11, 8460 */
		/* 8211A72Ch case   81:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x210C);
		/* 8211A72Ch case   81:*/		return 0x8211A730;
		  /* 8211A730h */ case   82:  		/* b 24 */
		/* 8211A730h case   82:*/		return 0x8211A748;
		/* 8211A730h case   82:*/		return 0x8211A734;
		  /* 8211A734h */ case   83:  		/* lis R11, -32253 */
		/* 8211A734h case   83:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A734h case   83:*/		return 0x8211A738;
		  /* 8211A738h */ case   84:  		/* addi R7, R11, 8444 */
		/* 8211A738h case   84:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x20FC);
		/* 8211A738h case   84:*/		return 0x8211A73C;
		  /* 8211A73Ch */ case   85:  		/* b 12 */
		/* 8211A73Ch case   85:*/		return 0x8211A748;
		/* 8211A73Ch case   85:*/		return 0x8211A740;
	}
	return 0x8211A740;
} // Block from 8211A5E8h-8211A740h (86 instructions)

//////////////////////////////////////////////////////
// Block at 8211A740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A740);
		  /* 8211A740h */ case    0:  		/* lis R11, -32253 */
		/* 8211A740h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A740h case    0:*/		return 0x8211A744;
		  /* 8211A744h */ case    1:  		/* addi R7, R11, 8792 */
		/* 8211A744h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2258);
		/* 8211A744h case    1:*/		return 0x8211A748;
	}
	return 0x8211A748;
} // Block from 8211A740h-8211A748h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A748);
		  /* 8211A748h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211A748h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A748h case    0:*/		return 0x8211A74C;
		  /* 8211A74Ch */ case    1:  		/* li R4, 255 */
		/* 8211A74Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8211A74Ch case    1:*/		return 0x8211A750;
		  /* 8211A750h */ case    2:  		/* addi R3, R1, 80 */
		/* 8211A750h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8211A750h case    2:*/		return 0x8211A754;
		  /* 8211A754h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 8211A754h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A754h case    3:*/		return 0x8211A758;
	}
	return 0x8211A758;
} // Block from 8211A748h-8211A758h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211A758h
// Function '?PopScope@CParse@D3DXShader@@IAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A758);
		  /* 8211A758h */ case    0:  		/* bc 12, CR6_EQ, 48 */
		/* 8211A758h case    0:*/		if ( regs.CR[6].eq ) { return 0x8211A788;  }
		/* 8211A758h case    0:*/		return 0x8211A75C;
		  /* 8211A75Ch */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 8211A75Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211A75Ch case    1:*/		return 0x8211A760;
		  /* 8211A760h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 8211A760h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211A770;  }
		/* 8211A760h case    2:*/		return 0x8211A764;
		  /* 8211A764h */ case    3:  		/* lis R11, -32255 */
		/* 8211A764h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A764h case    3:*/		return 0x8211A768;
		  /* 8211A768h */ case    4:  		/* addi R5, R11, -10152 */
		/* 8211A768h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD858);
		/* 8211A768h case    4:*/		return 0x8211A76C;
		  /* 8211A76Ch */ case    5:  		/* b 276 */
		/* 8211A76Ch case    5:*/		return 0x8211A880;
		/* 8211A76Ch case    5:*/		return 0x8211A770;
	}
	return 0x8211A770;
} // Block from 8211A758h-8211A770h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A770);
		  /* 8211A770h */ case    0:  		/* lis R11, -32253 */
		/* 8211A770h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A770h case    0:*/		return 0x8211A774;
		  /* 8211A774h */ case    1:  		/* lwz R9, <#[R31 + 32]> */
		/* 8211A774h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8211A774h case    1:*/		return 0x8211A778;
		  /* 8211A778h */ case    2:  		/* lwz R8, <#[R31 + 28]> */
		/* 8211A778h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211A778h case    2:*/		return 0x8211A77C;
		  /* 8211A77Ch */ case    3:  		/* addi R5, R11, 8432 */
		/* 8211A77Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x20F0);
		/* 8211A77Ch case    3:*/		return 0x8211A780;
		  /* 8211A780h */ case    4:  		/* bl -491840 */
		/* 8211A780h case    4:*/		regs.LR = 0x8211A784; return 0x820A2640;
		/* 8211A780h case    4:*/		return 0x8211A784;
		  /* 8211A784h */ case    5:  		/* b 256 */
		/* 8211A784h case    5:*/		return 0x8211A884;
		/* 8211A784h case    5:*/		return 0x8211A788;
	}
	return 0x8211A788;
} // Block from 8211A770h-8211A788h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211A788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A788);
		  /* 8211A788h */ case    0:  		/* lis R11, -32254 */
		/* 8211A788h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8211A788h case    0:*/		return 0x8211A78C;
		  /* 8211A78Ch */ case    1:  		/* lwz R8, <#[R31 + 32]> */
		/* 8211A78Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 8211A78Ch case    1:*/		return 0x8211A790;
		  /* 8211A790h */ case    2:  		/* addi R5, R11, -14420 */
		/* 8211A790h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC7AC);
		/* 8211A790h case    2:*/		return 0x8211A794;
		  /* 8211A794h */ case    3:  		/* bl -491860 */
		/* 8211A794h case    3:*/		regs.LR = 0x8211A798; return 0x820A2640;
		/* 8211A794h case    3:*/		return 0x8211A798;
		  /* 8211A798h */ case    4:  		/* b 236 */
		/* 8211A798h case    4:*/		return 0x8211A884;
		/* 8211A798h case    4:*/		return 0x8211A79C;
	}
	return 0x8211A79C;
} // Block from 8211A788h-8211A79Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211A79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A79C);
		  /* 8211A79Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A79Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A79Ch case    0:*/		return 0x8211A7A0;
		  /* 8211A7A0h */ case    1:  		/* mr R6, R31 */
		/* 8211A7A0h case    1:*/		regs.R6 = regs.R31;
		/* 8211A7A0h case    1:*/		return 0x8211A7A4;
		  /* 8211A7A4h */ case    2:  		/* b 12 */
		/* 8211A7A4h case    2:*/		return 0x8211A7B0;
		/* 8211A7A4h case    2:*/		return 0x8211A7A8;
		  /* 8211A7A8h */ case    3:  		/* lwz R6, <#[R6 + 16]> */
		/* 8211A7A8h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000010) );
		/* 8211A7A8h case    3:*/		return 0x8211A7AC;
		  /* 8211A7ACh */ case    4:  		/* lwz R11, <#[R6 + 4]> */
		/* 8211A7ACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 8211A7ACh case    4:*/		return 0x8211A7B0;
	}
	return 0x8211A7B0;
} // Block from 8211A79Ch-8211A7B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211A7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A7B0);
		  /* 8211A7B0h */ case    0:  		/* cmpwi CR6, R11, 8 */
		/* 8211A7B0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A7B0h case    0:*/		return 0x8211A7B4;
		  /* 8211A7B4h */ case    1:  		/* bc 12, CR6_EQ, -12 */
		/* 8211A7B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211A7A8;  }
		/* 8211A7B4h case    1:*/		return 0x8211A7B8;
		  /* 8211A7B8h */ case    2:  		/* li R5, 255 */
		/* 8211A7B8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xFF);
		/* 8211A7B8h case    2:*/		return 0x8211A7BC;
		  /* 8211A7BCh */ case    3:  		/* addi R4, R1, 80 */
		/* 8211A7BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8211A7BCh case    3:*/		return 0x8211A7C0;
		  /* 8211A7C0h */ case    4:  		/* mr R3, R29 */
		/* 8211A7C0h case    4:*/		regs.R3 = regs.R29;
		/* 8211A7C0h case    4:*/		return 0x8211A7C4;
		  /* 8211A7C4h */ case    5:  		/* bl -780 */
		/* 8211A7C4h case    5:*/		regs.LR = 0x8211A7C8; return 0x8211A4B8;
		/* 8211A7C4h case    5:*/		return 0x8211A7C8;
		  /* 8211A7C8h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A7C8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A7C8h case    6:*/		return 0x8211A7CC;
		  /* 8211A7CCh */ case    7:  		/* mr R30, R3 */
		/* 8211A7CCh case    7:*/		regs.R30 = regs.R3;
		/* 8211A7CCh case    7:*/		return 0x8211A7D0;
		  /* 8211A7D0h */ case    8:  		/* cmpwi CR6, R11, 8 */
		/* 8211A7D0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A7D0h case    8:*/		return 0x8211A7D4;
		  /* 8211A7D4h */ case    9:  		/* bc 4, CR6_EQ, 176 */
		/* 8211A7D4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211A884;  }
		/* 8211A7D4h case    9:*/		return 0x8211A7D8;
		  /* 8211A7D8h */ case   10:  		/* lis R11, -32253 */
		/* 8211A7D8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A7D8h case   10:*/		return 0x8211A7DC;
		  /* 8211A7DCh */ case   11:  		/* addi R28, R11, 8424 */
		/* 8211A7DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x20E8);
		/* 8211A7DCh case   11:*/		return 0x8211A7E0;
		  /* 8211A7E0h */ case   12:  		/* addi R11, R1, 80 */
		/* 8211A7E0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211A7E0h case   12:*/		return 0x8211A7E4;
		  /* 8211A7E4h */ case   13:  		/* lwz R6, <#[R31 + 20]> */
		/* 8211A7E4h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000014) );
		/* 8211A7E4h case   13:*/		return 0x8211A7E8;
		  /* 8211A7E8h */ case   14:  		/* mr R5, R28 */
		/* 8211A7E8h case   14:*/		regs.R5 = regs.R28;
		/* 8211A7E8h case   14:*/		return 0x8211A7EC;
		  /* 8211A7ECh */ case   15:  		/* add R29, R30, R11 */
		/* 8211A7ECh case   15:*/		cpu::op::add<0>(regs,&regs.R29,regs.R30,regs.R11);
		/* 8211A7ECh case   15:*/		return 0x8211A7F0;
		  /* 8211A7F0h */ case   16:  		/* subfic R4, R30, 255 */
		/* 8211A7F0h case   16:*/		cpu::op::subfic<0>(regs,&regs.R4,regs.R30,0xFF);
		/* 8211A7F0h case   16:*/		return 0x8211A7F4;
		  /* 8211A7F4h */ case   17:  		/* mr R3, R29 */
		/* 8211A7F4h case   17:*/		regs.R3 = regs.R29;
		/* 8211A7F4h case   17:*/		return 0x8211A7F8;
		  /* 8211A7F8h */ case   18:  		/* bl -491960 */
		/* 8211A7F8h case   18:*/		regs.LR = 0x8211A7FC; return 0x820A2640;
		/* 8211A7F8h case   18:*/		return 0x8211A7FC;
		  /* 8211A7FCh */ case   19:  		/* mr R11, R29 */
		/* 8211A7FCh case   19:*/		regs.R11 = regs.R29;
		/* 8211A7FCh case   19:*/		return 0x8211A800;
		  /* 8211A800h */ case   20:  		/* lbz R10, <#[R11]> */
		/* 8211A800h case   20:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211A800h case   20:*/		return 0x8211A804;
		  /* 8211A804h */ case   21:  		/* addi R11, R11, 1 */
		/* 8211A804h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211A804h case   21:*/		return 0x8211A808;
		  /* 8211A808h */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 8211A808h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211A808h case   22:*/		return 0x8211A80C;
		  /* 8211A80Ch */ case   23:  		/* bc 4, CR6_EQ, -12 */
		/* 8211A80Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x8211A800;  }
		/* 8211A80Ch case   23:*/		return 0x8211A810;
		  /* 8211A810h */ case   24:  		/* lwz R31, <#[R31 + 16]> */
		/* 8211A810h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A810h case   24:*/		return 0x8211A814;
		  /* 8211A814h */ case   25:  		/* subf R11, R29, R11 */
		/* 8211A814h case   25:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 8211A814h case   25:*/		return 0x8211A818;
		  /* 8211A818h */ case   26:  		/* addi R11, R11, -1 */
		/* 8211A818h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8211A818h case   26:*/		return 0x8211A81C;
		  /* 8211A81Ch */ case   27:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8211A81Ch case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8211A81Ch case   27:*/		return 0x8211A820;
		  /* 8211A820h */ case   28:  		/* lwz R10, <#[R31 + 4]> */
		/* 8211A820h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A820h case   28:*/		return 0x8211A824;
		  /* 8211A824h */ case   29:  		/* add R30, R11, R30 */
		/* 8211A824h case   29:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 8211A824h case   29:*/		return 0x8211A828;
		  /* 8211A828h */ case   30:  		/* cmpwi CR6, R10, 8 */
		/* 8211A828h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000008);
		/* 8211A828h case   30:*/		return 0x8211A82C;
		  /* 8211A82Ch */ case   31:  		/* bc 12, CR6_EQ, -76 */
		/* 8211A82Ch case   31:*/		if ( regs.CR[6].eq ) { return 0x8211A7E0;  }
		/* 8211A82Ch case   31:*/		return 0x8211A830;
		  /* 8211A830h */ case   32:  		/* b 84 */
		/* 8211A830h case   32:*/		return 0x8211A884;
		/* 8211A830h case   32:*/		return 0x8211A834;
	}
	return 0x8211A834;
} // Block from 8211A7B0h-8211A834h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8211A834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A834);
		  /* 8211A834h */ case    0:  		/* mr R4, R31 */
		/* 8211A834h case    0:*/		regs.R4 = regs.R31;
		/* 8211A834h case    0:*/		return 0x8211A838;
		  /* 8211A838h */ case    1:  		/* mr R3, R29 */
		/* 8211A838h case    1:*/		regs.R3 = regs.R29;
		/* 8211A838h case    1:*/		return 0x8211A83C;
		  /* 8211A83Ch */ case    2:  		/* bl -1548 */
		/* 8211A83Ch case    2:*/		regs.LR = 0x8211A840; return 0x8211A230;
		/* 8211A83Ch case    2:*/		return 0x8211A840;
		  /* 8211A840h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 8211A840h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211A840h case    3:*/		return 0x8211A844;
		  /* 8211A844h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 8211A844h case    4:*/		if ( regs.CR[0].eq ) { return 0x8211A854;  }
		/* 8211A844h case    4:*/		return 0x8211A848;
		  /* 8211A848h */ case    5:  		/* lis R11, -32255 */
		/* 8211A848h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A848h case    5:*/		return 0x8211A84C;
		  /* 8211A84Ch */ case    6:  		/* addi R30, R11, -15860 */
		/* 8211A84Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFC20C);
		/* 8211A84Ch case    6:*/		return 0x8211A850;
	}
	return 0x8211A850;
} // Block from 8211A834h-8211A850h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211A850h
// Function '?AddDecl@CParse@D3DXShader@@IAAJPAVCNode@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A850);
		  /* 8211A850h */ case    0:  		/* b 12 */
		/* 8211A850h case    0:*/		return 0x8211A85C;
		/* 8211A850h case    0:*/		return 0x8211A854;
	}
	return 0x8211A854;
} // Block from 8211A850h-8211A854h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A854);
		  /* 8211A854h */ case    0:  		/* lis R11, -32256 */
		/* 8211A854h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211A854h case    0:*/		return 0x8211A858;
		  /* 8211A858h */ case    1:  		/* addi R30, R11, 4485 */
		/* 8211A858h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1185);
		/* 8211A858h case    1:*/		return 0x8211A85C;
	}
	return 0x8211A85C;
} // Block from 8211A854h-8211A85Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A85Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A85C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A85C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A85C);
		  /* 8211A85Ch */ case    0:  		/* mr R4, R31 */
		/* 8211A85Ch case    0:*/		regs.R4 = regs.R31;
		/* 8211A85Ch case    0:*/		return 0x8211A860;
		  /* 8211A860h */ case    1:  		/* mr R3, R29 */
		/* 8211A860h case    1:*/		regs.R3 = regs.R29;
		/* 8211A860h case    1:*/		return 0x8211A864;
		  /* 8211A864h */ case    2:  		/* bl -1172 */
		/* 8211A864h case    2:*/		regs.LR = 0x8211A868; return 0x8211A3D0;
		/* 8211A864h case    2:*/		return 0x8211A868;
		  /* 8211A868h */ case    3:  		/* lis R11, -32253 */
		/* 8211A868h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211A868h case    3:*/		return 0x8211A86C;
		  /* 8211A86Ch */ case    4:  		/* mr R7, R3 */
		/* 8211A86Ch case    4:*/		regs.R7 = regs.R3;
		/* 8211A86Ch case    4:*/		return 0x8211A870;
		  /* 8211A870h */ case    5:  		/* addi R5, R11, 8408 */
		/* 8211A870h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x20D8);
		/* 8211A870h case    5:*/		return 0x8211A874;
		  /* 8211A874h */ case    6:  		/* mr R6, R30 */
		/* 8211A874h case    6:*/		regs.R6 = regs.R30;
		/* 8211A874h case    6:*/		return 0x8211A878;
		  /* 8211A878h */ case    7:  		/* li R4, 255 */
		/* 8211A878h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8211A878h case    7:*/		return 0x8211A87C;
		  /* 8211A87Ch */ case    8:  		/* addi R3, R1, 80 */
		/* 8211A87Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8211A87Ch case    8:*/		return 0x8211A880;
	}
	return 0x8211A880;
} // Block from 8211A85Ch-8211A880h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211A880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A880);
		  /* 8211A880h */ case    0:  		/* bl -492096 */
		/* 8211A880h case    0:*/		regs.LR = 0x8211A884; return 0x820A2640;
		/* 8211A880h case    0:*/		return 0x8211A884;
	}
	return 0x8211A884;
} // Block from 8211A880h-8211A884h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A884);
		  /* 8211A884h */ case    0:  		/* mr R11, R27 */
		/* 8211A884h case    0:*/		regs.R11 = regs.R27;
		/* 8211A884h case    0:*/		return 0x8211A888;
		  /* 8211A888h */ case    1:  		/* lbz R10, <#[R11]> */
		/* 8211A888h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211A888h case    1:*/		return 0x8211A88C;
		  /* 8211A88Ch */ case    2:  		/* addi R11, R11, 1 */
		/* 8211A88Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211A88Ch case    2:*/		return 0x8211A890;
		  /* 8211A890h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8211A890h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211A890h case    3:*/		return 0x8211A894;
		  /* 8211A894h */ case    4:  		/* bc 4, CR6_EQ, -12 */
		/* 8211A894h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211A888;  }
		/* 8211A894h case    4:*/		return 0x8211A898;
		  /* 8211A898h */ case    5:  		/* subf R10, R27, R11 */
		/* 8211A898h case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R11);
		/* 8211A898h case    5:*/		return 0x8211A89C;
		  /* 8211A89Ch */ case    6:  		/* addi R11, R26, -1 */
		/* 8211A89Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFF);
		/* 8211A89Ch case    6:*/		return 0x8211A8A0;
		  /* 8211A8A0h */ case    7:  		/* addi R10, R10, -1 */
		/* 8211A8A0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8211A8A0h case    7:*/		return 0x8211A8A4;
		  /* 8211A8A4h */ case    8:  		/* rlwinm R31, R10, 0, 0, 31 */
		/* 8211A8A4h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R31,regs.R10);
		/* 8211A8A4h case    8:*/		return 0x8211A8A8;
		  /* 8211A8A8h */ case    9:  		/* cmplw CR6, R31, R11 */
		/* 8211A8A8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8211A8A8h case    9:*/		return 0x8211A8AC;
		  /* 8211A8ACh */ case   10:  		/* bc 4, CR6_GT, 8 */
		/* 8211A8ACh case   10:*/		if ( !regs.CR[6].gt ) { return 0x8211A8B4;  }
		/* 8211A8ACh case   10:*/		return 0x8211A8B0;
		  /* 8211A8B0h */ case   11:  		/* mr R31, R11 */
		/* 8211A8B0h case   11:*/		regs.R31 = regs.R11;
		/* 8211A8B0h case   11:*/		return 0x8211A8B4;
	}
	return 0x8211A8B4;
} // Block from 8211A884h-8211A8B4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211A8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A8B4);
		  /* 8211A8B4h */ case    0:  		/* mr R5, R31 */
		/* 8211A8B4h case    0:*/		regs.R5 = regs.R31;
		/* 8211A8B4h case    0:*/		return 0x8211A8B8;
		  /* 8211A8B8h */ case    1:  		/* mr R4, R27 */
		/* 8211A8B8h case    1:*/		regs.R4 = regs.R27;
		/* 8211A8B8h case    1:*/		return 0x8211A8BC;
		  /* 8211A8BCh */ case    2:  		/* mr R3, R25 */
		/* 8211A8BCh case    2:*/		regs.R3 = regs.R25;
		/* 8211A8BCh case    2:*/		return 0x8211A8C0;
		  /* 8211A8C0h */ case    3:  		/* bl -560912 */
		/* 8211A8C0h case    3:*/		regs.LR = 0x8211A8C4; return 0x820919B0;
		/* 8211A8C0h case    3:*/		return 0x8211A8C4;
		  /* 8211A8C4h */ case    4:  		/* li R11, 0 */
		/* 8211A8C4h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211A8C4h case    4:*/		return 0x8211A8C8;
		  /* 8211A8C8h */ case    5:  		/* mr R3, R31 */
		/* 8211A8C8h case    5:*/		regs.R3 = regs.R31;
		/* 8211A8C8h case    5:*/		return 0x8211A8CC;
		  /* 8211A8CCh */ case    6:  		/* stbx R11, <#[R31 + R25]> */
		/* 8211A8CCh case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + regs.R25 + 0x00000000) );
		/* 8211A8CCh case    6:*/		return 0x8211A8D0;
	}
	return 0x8211A8D0;
} // Block from 8211A8B4h-8211A8D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211A8D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A8D0);
		  /* 8211A8D0h */ case    0:  		/* addi R1, R1, 400 */
		/* 8211A8D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 8211A8D0h case    0:*/		return 0x8211A8D4;
		  /* 8211A8D4h */ case    1:  		/* b -562744 */
		/* 8211A8D4h case    1:*/		return 0x8209129C;
		/* 8211A8D4h case    1:*/		return 0x8211A8D8;
	}
	return 0x8211A8D8;
} // Block from 8211A8D0h-8211A8D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A8D8);
		  /* 8211A8D8h */ case    0:  		/* mfspr R12, LR */
		/* 8211A8D8h case    0:*/		regs.R12 = regs.LR;
		/* 8211A8D8h case    0:*/		return 0x8211A8DC;
		  /* 8211A8DCh */ case    1:  		/* bl -562820 */
		/* 8211A8DCh case    1:*/		regs.LR = 0x8211A8E0; return 0x82091258;
		/* 8211A8DCh case    1:*/		return 0x8211A8E0;
		  /* 8211A8E0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8211A8E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8211A8E0h case    2:*/		return 0x8211A8E4;
		  /* 8211A8E4h */ case    3:  		/* mr R29, R3 */
		/* 8211A8E4h case    3:*/		regs.R29 = regs.R3;
		/* 8211A8E4h case    3:*/		return 0x8211A8E8;
		  /* 8211A8E8h */ case    4:  		/* mr R31, R4 */
		/* 8211A8E8h case    4:*/		regs.R31 = regs.R4;
		/* 8211A8E8h case    4:*/		return 0x8211A8EC;
		  /* 8211A8ECh */ case    5:  		/* mr R30, R5 */
		/* 8211A8ECh case    5:*/		regs.R30 = regs.R5;
		/* 8211A8ECh case    5:*/		return 0x8211A8F0;
		  /* 8211A8F0h */ case    6:  		/* mr R28, R6 */
		/* 8211A8F0h case    6:*/		regs.R28 = regs.R6;
		/* 8211A8F0h case    6:*/		return 0x8211A8F4;
		  /* 8211A8F4h */ case    7:  		/* b 144 */
		/* 8211A8F4h case    7:*/		return 0x8211A984;
		/* 8211A8F4h case    7:*/		return 0x8211A8F8;
		  /* 8211A8F8h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211A8F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211A8F8h case    8:*/		return 0x8211A8FC;
		  /* 8211A8FCh */ case    9:  		/* cmpwi CR6, R11, 1 */
		/* 8211A8FCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211A8FCh case    9:*/		return 0x8211A900;
		  /* 8211A900h */ case   10:  		/* bc 12, CR6_EQ, 96 */
		/* 8211A900h case   10:*/		if ( regs.CR[6].eq ) { return 0x8211A960;  }
		/* 8211A900h case   10:*/		return 0x8211A904;
		  /* 8211A904h */ case   11:  		/* cmpwi CR6, R11, 6 */
		/* 8211A904h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211A904h case   11:*/		return 0x8211A908;
		  /* 8211A908h */ case   12:  		/* bc 12, CR6_EQ, 80 */
		/* 8211A908h case   12:*/		if ( regs.CR[6].eq ) { return 0x8211A958;  }
		/* 8211A908h case   12:*/		return 0x8211A90C;
		  /* 8211A90Ch */ case   13:  		/* cmpwi CR6, R11, 8 */
		/* 8211A90Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 8211A90Ch case   13:*/		return 0x8211A910;
		  /* 8211A910h */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 8211A910h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211A92C;  }
		/* 8211A910h case   14:*/		return 0x8211A914;
		  /* 8211A914h */ case   15:  		/* cmpwi CR6, R11, 9 */
		/* 8211A914h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211A914h case   15:*/		return 0x8211A918;
		  /* 8211A918h */ case   16:  		/* bc 12, CR6_EQ, 164 */
		/* 8211A918h case   16:*/		if ( regs.CR[6].eq ) { return 0x8211A9BC;  }
		/* 8211A918h case   16:*/		return 0x8211A91C;
		  /* 8211A91Ch */ case   17:  		/* cmpwi CR6, R11, 11 */
		/* 8211A91Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8211A91Ch case   17:*/		return 0x8211A920;
		  /* 8211A920h */ case   18:  		/* bc 4, CR6_EQ, 124 */
		/* 8211A920h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8211A99C;  }
		/* 8211A920h case   18:*/		return 0x8211A924;
		  /* 8211A924h */ case   19:  		/* lwz R31, <#[R31 + 48]> */
		/* 8211A924h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000030) );
		/* 8211A924h case   19:*/		return 0x8211A928;
		  /* 8211A928h */ case   20:  		/* b 92 */
		/* 8211A928h case   20:*/		return 0x8211A984;
		/* 8211A928h case   20:*/		return 0x8211A92C;
	}
	return 0x8211A92C;
} // Block from 8211A8D8h-8211A92Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8211A92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A92C);
		  /* 8211A92Ch */ case    0:  		/* lwz R31, <#[R31 + 16]> */
		/* 8211A92Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A92Ch case    0:*/		return 0x8211A930;
		  /* 8211A930h */ case    1:  		/* mr R3, R29 */
		/* 8211A930h case    1:*/		regs.R3 = regs.R29;
		/* 8211A930h case    1:*/		return 0x8211A934;
		  /* 8211A934h */ case    2:  		/* mr R4, R31 */
		/* 8211A934h case    2:*/		regs.R4 = regs.R31;
		/* 8211A934h case    2:*/		return 0x8211A938;
		  /* 8211A938h */ case    3:  		/* bl -1384 */
		/* 8211A938h case    3:*/		regs.LR = 0x8211A93C; return 0x8211A3D0;
		/* 8211A938h case    3:*/		return 0x8211A93C;
		  /* 8211A93Ch */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8211A93Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211A93Ch case    4:*/		return 0x8211A940;
		  /* 8211A940h */ case    5:  		/* bc 12, CR0_EQ, 76 */
		/* 8211A940h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211A98C;  }
		/* 8211A940h case    5:*/		return 0x8211A944;
		  /* 8211A944h */ case    6:  		/* divwu R11, R30, R3 */
		/* 8211A944h case    6:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R30,regs.R3);
		/* 8211A944h case    6:*/		return 0x8211A948;
		  /* 8211A948h */ case    7:  		/* twi 6, R3, 0 */
		/* 8211A948h case    7:*/		cpu::op::tw<6>(regs, 0x8211A948, regs.R3, 0x00000000);
		/* 8211A948h case    7:*/		return 0x8211A94C;
		  /* 8211A94Ch */ case    8:  		/* mullw R11, R11, R3 */
		/* 8211A94Ch case    8:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8211A94Ch case    8:*/		return 0x8211A950;
		  /* 8211A950h */ case    9:  		/* subf R30, R11, R30 */
		/* 8211A950h case    9:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 8211A950h case    9:*/		return 0x8211A954;
		  /* 8211A954h */ case   10:  		/* b 48 */
		/* 8211A954h case   10:*/		return 0x8211A984;
		/* 8211A954h case   10:*/		return 0x8211A958;
	}
	return 0x8211A958;
} // Block from 8211A92Ch-8211A958h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211A958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A958);
		  /* 8211A958h */ case    0:  		/* lwz R31, <#[R31 + 24]> */
		/* 8211A958h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000018) );
		/* 8211A958h case    0:*/		return 0x8211A95C;
		  /* 8211A95Ch */ case    1:  		/* b 40 */
		/* 8211A95Ch case    1:*/		return 0x8211A984;
		/* 8211A95Ch case    1:*/		return 0x8211A960;
	}
	return 0x8211A960;
} // Block from 8211A958h-8211A960h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A960);
		  /* 8211A960h */ case    0:  		/* mr R3, R29 */
		/* 8211A960h case    0:*/		regs.R3 = regs.R29;
		/* 8211A960h case    0:*/		return 0x8211A964;
		  /* 8211A964h */ case    1:  		/* lwz R4, <#[R31 + 8]> */
		/* 8211A964h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8211A964h case    1:*/		return 0x8211A968;
		  /* 8211A968h */ case    2:  		/* bl -1432 */
		/* 8211A968h case    2:*/		regs.LR = 0x8211A96C; return 0x8211A3D0;
		/* 8211A968h case    2:*/		return 0x8211A96C;
		  /* 8211A96Ch */ case    3:  		/* cmplw CR6, R30, R3 */
		/* 8211A96Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 8211A96Ch case    3:*/		return 0x8211A970;
		  /* 8211A970h */ case    4:  		/* bc 4, CR6_LT, 12 */
		/* 8211A970h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8211A97C;  }
		/* 8211A970h case    4:*/		return 0x8211A974;
		  /* 8211A974h */ case    5:  		/* lwz R31, <#[R31 + 8]> */
		/* 8211A974h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8211A974h case    5:*/		return 0x8211A978;
		  /* 8211A978h */ case    6:  		/* b 12 */
		/* 8211A978h case    6:*/		return 0x8211A984;
		/* 8211A978h case    6:*/		return 0x8211A97C;
	}
	return 0x8211A97C;
} // Block from 8211A960h-8211A97Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211A97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A97C);
		  /* 8211A97Ch */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 8211A97Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8211A97Ch case    0:*/		return 0x8211A980;
		  /* 8211A980h */ case    1:  		/* subf R30, R3, R30 */
		/* 8211A980h case    1:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 8211A980h case    1:*/		return 0x8211A984;
	}
	return 0x8211A984;
} // Block from 8211A97Ch-8211A984h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A984);
		  /* 8211A984h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211A984h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211A984h case    0:*/		return 0x8211A988;
		  /* 8211A988h */ case    1:  		/* bc 4, CR6_EQ, -144 */
		/* 8211A988h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211A8F8;  }
		/* 8211A988h case    1:*/		return 0x8211A98C;
	}
	return 0x8211A98C;
} // Block from 8211A984h-8211A98Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211A98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A98C);
		  /* 8211A98Ch */ case    0:  		/* lis R3, -32768 */
		/* 8211A98Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211A98Ch case    0:*/		return 0x8211A990;
		  /* 8211A990h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8211A990h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211A990h case    1:*/		return 0x8211A994;
		  /* 8211A994h */ case    2:  		/* addi R1, R1, 160 */
		/* 8211A994h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8211A994h case    2:*/		return 0x8211A998;
		  /* 8211A998h */ case    3:  		/* b -562928 */
		/* 8211A998h case    3:*/		return 0x820912A8;
		/* 8211A998h case    3:*/		return 0x8211A99C;
	}
	return 0x8211A99C;
} // Block from 8211A98Ch-8211A99Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211A99Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A99C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A99C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A99C);
		  /* 8211A99Ch */ case    0:  		/* lis R11, -32255 */
		/* 8211A99Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211A99Ch case    0:*/		return 0x8211A9A0;
		  /* 8211A9A0h */ case    1:  		/* li R5, 0 */
		/* 8211A9A0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211A9A0h case    1:*/		return 0x8211A9A4;
		  /* 8211A9A4h */ case    2:  		/* addi R6, R11, 8564 */
		/* 8211A9A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2174);
		/* 8211A9A4h case    2:*/		return 0x8211A9A8;
		  /* 8211A9A8h */ case    3:  		/* li R4, 0 */
		/* 8211A9A8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211A9A8h case    3:*/		return 0x8211A9AC;
		  /* 8211A9ACh */ case    4:  		/* mr R3, R29 */
		/* 8211A9ACh case    4:*/		regs.R3 = regs.R29;
		/* 8211A9ACh case    4:*/		return 0x8211A9B0;
		  /* 8211A9B0h */ case    5:  		/* bl -4120 */
		/* 8211A9B0h case    5:*/		regs.LR = 0x8211A9B4; return 0x82119998;
		/* 8211A9B0h case    5:*/		return 0x8211A9B4;
		  /* 8211A9B4h */ case    6:  		/* li R3, 0 */
		/* 8211A9B4h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A9B4h case    6:*/		return 0x8211A9B8;
		  /* 8211A9B8h */ case    7:  		/* b -36 */
		/* 8211A9B8h case    7:*/		return 0x8211A994;
		/* 8211A9B8h case    7:*/		return 0x8211A9BC;
	}
	return 0x8211A9BC;
} // Block from 8211A99Ch-8211A9BCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211A9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A9BC);
		  /* 8211A9BCh */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211A9BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211A9BCh case    0:*/		return 0x8211A9C0;
		  /* 8211A9C0h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8211A9C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211A9C0h case    1:*/		return 0x8211A9C4;
		  /* 8211A9C4h */ case    2:  		/* bc 12, CR6_LT, 28 */
		/* 8211A9C4h case    2:*/		if ( regs.CR[6].lt ) { return 0x8211A9E0;  }
		/* 8211A9C4h case    2:*/		return 0x8211A9C8;
		  /* 8211A9C8h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8211A9C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211A9E0;  }
		/* 8211A9C8h case    3:*/		return 0x8211A9CC;
		  /* 8211A9CCh */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8211A9CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8211A9CCh case    4:*/		return 0x8211A9D0;
		  /* 8211A9D0h */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 8211A9D0h case    5:*/		if ( regs.CR[6].lt ) { return 0x8211A9E0;  }
		/* 8211A9D0h case    5:*/		return 0x8211A9D4;
		  /* 8211A9D4h */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 8211A9D4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8211A9E8;  }
		/* 8211A9D4h case    6:*/		return 0x8211A9D8;
		  /* 8211A9D8h */ case    7:  		/* li R11, 3 */
		/* 8211A9D8h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8211A9D8h case    7:*/		return 0x8211A9DC;
		  /* 8211A9DCh */ case    8:  		/* b 8 */
		/* 8211A9DCh case    8:*/		return 0x8211A9E4;
		/* 8211A9DCh case    8:*/		return 0x8211A9E0;
	}
	return 0x8211A9E0;
} // Block from 8211A9BCh-8211A9E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211A9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A9E0);
		  /* 8211A9E0h */ case    0:  		/* li R11, 0 */
		/* 8211A9E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211A9E0h case    0:*/		return 0x8211A9E4;
	}
	return 0x8211A9E4;
} // Block from 8211A9E0h-8211A9E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A9E4);
		  /* 8211A9E4h */ case    0:  		/* stw R11, <#[R28 + 16]> */
		/* 8211A9E4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 8211A9E4h case    0:*/		return 0x8211A9E8;
	}
	return 0x8211A9E8;
} // Block from 8211A9E4h-8211A9E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211A9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211A9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211A9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211A9E8);
		  /* 8211A9E8h */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 8211A9E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8211A9E8h case    0:*/		return 0x8211A9EC;
		  /* 8211A9ECh */ case    1:  		/* li R11, 1 */
		/* 8211A9ECh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211A9ECh case    1:*/		return 0x8211A9F0;
		  /* 8211A9F0h */ case    2:  		/* li R3, 0 */
		/* 8211A9F0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211A9F0h case    2:*/		return 0x8211A9F4;
		  /* 8211A9F4h */ case    3:  		/* stw R11, <#[R28 + 28]> */
		/* 8211A9F4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8211A9F4h case    3:*/		return 0x8211A9F8;
		  /* 8211A9F8h */ case    4:  		/* stw R11, <#[R28 + 32]> */
		/* 8211A9F8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8211A9F8h case    4:*/		return 0x8211A9FC;
		  /* 8211A9FCh */ case    5:  		/* stw R10, <#[R28 + 20]> */
		/* 8211A9FCh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 8211A9FCh case    5:*/		return 0x8211AA00;
		  /* 8211AA00h */ case    6:  		/* lwz R11, <#[R31 + 36]> */
		/* 8211AA00h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8211AA00h case    6:*/		return 0x8211AA04;
		  /* 8211AA04h */ case    7:  		/* rlwinm R11, R11, 0, 22, 22 */
		/* 8211AA04h case    7:*/		cpu::op::rlwinm<0,0,22,22>(regs,&regs.R11,regs.R11);
		/* 8211AA04h case    7:*/		return 0x8211AA08;
		  /* 8211AA08h */ case    8:  		/* stw R11, <#[R28 + 36]> */
		/* 8211AA08h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 8211AA08h case    8:*/		return 0x8211AA0C;
		  /* 8211AA0Ch */ case    9:  		/* b -120 */
		/* 8211AA0Ch case    9:*/		return 0x8211A994;
		/* 8211AA0Ch case    9:*/		return 0x8211AA10;
	}
	return 0x8211AA10;
} // Block from 8211A9E8h-8211AA10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211AA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AA10);
		  /* 8211AA10h */ case    0:  		/* mfspr R12, LR */
		/* 8211AA10h case    0:*/		regs.R12 = regs.LR;
		/* 8211AA10h case    0:*/		return 0x8211AA14;
		  /* 8211AA14h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211AA14h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211AA14h case    1:*/		return 0x8211AA18;
		  /* 8211AA18h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8211AA18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8211AA18h case    2:*/		return 0x8211AA1C;
		  /* 8211AA1Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8211AA1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8211AA1Ch case    3:*/		return 0x8211AA20;
		  /* 8211AA20h */ case    4:  		/* andis. R11, R11, 528 */
		/* 8211AA20h case    4:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R11,0x210);
		/* 8211AA20h case    4:*/		return 0x8211AA24;
		  /* 8211AA24h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 8211AA24h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8211AA24h case    5:*/		return 0x8211AA28;
		  /* 8211AA28h */ case    6:  		/* bc 12, CR0_EQ, 52 */
		/* 8211AA28h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211AA5C;  }
		/* 8211AA28h case    6:*/		return 0x8211AA2C;
		  /* 8211AA2Ch */ case    7:  		/* lwz R11, <#[R3 + 20]> */
		/* 8211AA2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8211AA2Ch case    7:*/		return 0x8211AA30;
		  /* 8211AA30h */ case    8:  		/* b 36 */
		/* 8211AA30h case    8:*/		return 0x8211AA54;
		/* 8211AA30h case    8:*/		return 0x8211AA34;
		  /* 8211AA34h */ case    9:  		/* lwz R10, <#[R11 + 16]> */
		/* 8211AA34h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8211AA34h case    9:*/		return 0x8211AA38;
	}
	return 0x8211AA38;
} // Block from 8211AA10h-8211AA38h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211AA38h
// Function '?CBufferDecl@CParse@D3DXShader@@IAAPAVCNode@2@W4_D3DDECL_TYPE@2@PAV32@111@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AA38);
		  /* 8211AA38h */ case    0:  		/* cmpwi CR6, R10, 2 */
		/* 8211AA38h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 8211AA38h case    0:*/		return 0x8211AA3C;
		  /* 8211AA3Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8211AA3Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211AA70;  }
		/* 8211AA3Ch case    1:*/		return 0x8211AA40;
		  /* 8211AA40h */ case    2:  		/* cmpwi CR6, R10, 3 */
		/* 8211AA40h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8211AA40h case    2:*/		return 0x8211AA44;
		  /* 8211AA44h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 8211AA44h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211AA70;  }
		/* 8211AA44h case    3:*/		return 0x8211AA48;
		  /* 8211AA48h */ case    4:  		/* cmpwi CR6, R10, 4 */
		/* 8211AA48h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 8211AA48h case    4:*/		return 0x8211AA4C;
		  /* 8211AA4Ch */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 8211AA4Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8211AA70;  }
		/* 8211AA4Ch case    5:*/		return 0x8211AA50;
		  /* 8211AA50h */ case    6:  		/* lwz R11, <#[R11 + 32]> */
		/* 8211AA50h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8211AA50h case    6:*/		return 0x8211AA54;
	}
	return 0x8211AA54;
} // Block from 8211AA38h-8211AA54h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211AA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AA54);
		  /* 8211AA54h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8211AA54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211AA54h case    0:*/		return 0x8211AA58;
		  /* 8211AA58h */ case    1:  		/* bc 4, CR6_EQ, -36 */
		/* 8211AA58h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211AA34;  }
		/* 8211AA58h case    1:*/		return 0x8211AA5C;
	}
	return 0x8211AA5C;
} // Block from 8211AA54h-8211AA5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211AA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AA5C);
		  /* 8211AA5Ch */ case    0:  		/* mr R3, R4 */
		/* 8211AA5Ch case    0:*/		regs.R3 = regs.R4;
		/* 8211AA5Ch case    0:*/		return 0x8211AA60;
		  /* 8211AA60h */ case    1:  		/* addi R1, R1, 128 */
		/* 8211AA60h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8211AA60h case    1:*/		return 0x8211AA64;
		  /* 8211AA64h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211AA64h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211AA64h case    2:*/		return 0x8211AA68;
		  /* 8211AA68h */ case    3:  		/* mtspr LR, R12 */
		/* 8211AA68h case    3:*/		regs.LR = regs.R12;
		/* 8211AA68h case    3:*/		return 0x8211AA6C;
		  /* 8211AA6Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 8211AA6Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211AA6Ch case    4:*/		return 0x8211AA70;
	}
	return 0x8211AA70;
} // Block from 8211AA5Ch-8211AA70h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211AA70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AA70);
		  /* 8211AA70h */ case    0:  		/* lis R11, -32253 */
		/* 8211AA70h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211AA70h case    0:*/		return 0x8211AA74;
		  /* 8211AA74h */ case    1:  		/* addi R4, R3, 40 */
		/* 8211AA74h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x28);
		/* 8211AA74h case    1:*/		return 0x8211AA78;
		  /* 8211AA78h */ case    2:  		/* li R5, 3064 */
		/* 8211AA78h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xBF8);
		/* 8211AA78h case    2:*/		return 0x8211AA7C;
		  /* 8211AA7Ch */ case    3:  		/* addi R6, R11, 8800 */
		/* 8211AA7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2260);
		/* 8211AA7Ch case    3:*/		return 0x8211AA80;
		  /* 8211AA80h */ case    4:  		/* bl -4576 */
		/* 8211AA80h case    4:*/		regs.LR = 0x8211AA84; return 0x821198A0;
		/* 8211AA80h case    4:*/		return 0x8211AA84;
		  /* 8211AA84h */ case    5:  		/* li R3, 0 */
		/* 8211AA84h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211AA84h case    5:*/		return 0x8211AA88;
		  /* 8211AA88h */ case    6:  		/* b -40 */
		/* 8211AA88h case    6:*/		return 0x8211AA60;
		/* 8211AA88h case    6:*/		return 0x8211AA8C;
		  /* 8211AA8Ch */ case    7:  		/* nop */
		/* 8211AA8Ch case    7:*/		cpu::op::nop();
		/* 8211AA8Ch case    7:*/		return 0x8211AA90;
	}
	return 0x8211AA90;
} // Block from 8211AA70h-8211AA90h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211AA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AA90);
		  /* 8211AA90h */ case    0:  		/* mfspr R12, LR */
		/* 8211AA90h case    0:*/		regs.R12 = regs.LR;
		/* 8211AA90h case    0:*/		return 0x8211AA94;
		  /* 8211AA94h */ case    1:  		/* bl -563288 */
		/* 8211AA94h case    1:*/		regs.LR = 0x8211AA98; return 0x8209123C;
		/* 8211AA94h case    1:*/		return 0x8211AA98;
		  /* 8211AA98h */ case    2:  		/* addi R12, R1, -96 */
		/* 8211AA98h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFA0);
		/* 8211AA98h case    2:*/		return 0x8211AA9C;
		  /* 8211AA9Ch */ case    3:  		/* bl -562820 */
		/* 8211AA9Ch case    3:*/		regs.LR = 0x8211AAA0; return 0x82091418;
		/* 8211AA9Ch case    3:*/		return 0x8211AAA0;
		  /* 8211AAA0h */ case    4:  		/* stwu R1, <#[R1 - 256]> */
		/* 8211AAA0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 8211AAA0h case    4:*/		return 0x8211AAA4;
		  /* 8211AAA4h */ case    5:  		/* mr R21, R3 */
		/* 8211AAA4h case    5:*/		regs.R21 = regs.R3;
		/* 8211AAA4h case    5:*/		return 0x8211AAA8;
		  /* 8211AAA8h */ case    6:  		/* mr R23, R4 */
		/* 8211AAA8h case    6:*/		regs.R23 = regs.R4;
		/* 8211AAA8h case    6:*/		return 0x8211AAAC;
		  /* 8211AAACh */ case    7:  		/* mr R27, R5 */
		/* 8211AAACh case    7:*/		regs.R27 = regs.R5;
		/* 8211AAACh case    7:*/		return 0x8211AAB0;
		  /* 8211AAB0h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 8211AAB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211AAB0h case    8:*/		return 0x8211AAB4;
		  /* 8211AAB4h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 8211AAB4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211AAC8;  }
		/* 8211AAB4h case    9:*/		return 0x8211AAB8;
		  /* 8211AAB8h */ case   10:  		/* cmplwi CR6, R5, 0 */
		/* 8211AAB8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8211AAB8h case   10:*/		return 0x8211AABC;
		  /* 8211AABCh */ case   11:  		/* bc 4, CR6_EQ, 5440 */
		/* 8211AABCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211BFFC;  }
		/* 8211AABCh case   11:*/		return 0x8211AAC0;
		  /* 8211AAC0h */ case   12:  		/* li R3, 0 */
		/* 8211AAC0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211AAC0h case   12:*/		return 0x8211AAC4;
		  /* 8211AAC4h */ case   13:  		/* b 5440 */
		/* 8211AAC4h case   13:*/		return 0x8211C004;
		/* 8211AAC4h case   13:*/		return 0x8211AAC8;
	}
	return 0x8211AAC8;
} // Block from 8211AA90h-8211AAC8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211AAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AAC8);
		  /* 8211AAC8h */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 8211AAC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 8211AAC8h case    0:*/		return 0x8211AACC;
		  /* 8211AACCh */ case    1:  		/* cmpwi CR6, R11, 14 */
		/* 8211AACCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211AACCh case    1:*/		return 0x8211AAD0;
		  /* 8211AAD0h */ case    2:  		/* bc 4, CR6_EQ, 5420 */
		/* 8211AAD0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211BFFC;  }
		/* 8211AAD0h case    2:*/		return 0x8211AAD4;
		  /* 8211AAD4h */ case    3:  		/* lwz R11, <#[R23 + 20]> */
		/* 8211AAD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 8211AAD4h case    3:*/		return 0x8211AAD8;
		  /* 8211AAD8h */ case    4:  		/* lwz R10, <#[R23 + 28]> */
		/* 8211AAD8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x0000001C) );
		/* 8211AAD8h case    4:*/		return 0x8211AADC;
		  /* 8211AADCh */ case    5:  		/* lwz R9, <#[R23 + 24]> */
		/* 8211AADCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000018) );
		/* 8211AADCh case    5:*/		return 0x8211AAE0;
		  /* 8211AAE0h */ case    6:  		/* cmpwi CR6, R10, 32 */
		/* 8211AAE0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000020);
		/* 8211AAE0h case    6:*/		return 0x8211AAE4;
		  /* 8211AAE4h */ case    7:  		/* mullw R26, R11, R9 */
		/* 8211AAE4h case    7:*/		cpu::op::mullw<0>(regs,&regs.R26,regs.R11,regs.R9);
		/* 8211AAE4h case    7:*/		return 0x8211AAE8;
		  /* 8211AAE8h */ case    8:  		/* bc 4, CR6_EQ, 5396 */
		/* 8211AAE8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211BFFC;  }
		/* 8211AAE8h case    8:*/		return 0x8211AAEC;
		  /* 8211AAECh */ case    9:  		/* lwz R22, <#[R23 + 36]> */
		/* 8211AAECh case    9:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R23 + 0x00000024) );
		/* 8211AAECh case    9:*/		return 0x8211AAF0;
		  /* 8211AAF0h */ case   10:  		/* addi R11, R1, 96 */
		/* 8211AAF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 8211AAF0h case   10:*/		return 0x8211AAF4;
		  /* 8211AAF4h */ case   11:  		/* addi R10, R1, 112 */
		/* 8211AAF4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211AAF4h case   11:*/		return 0x8211AAF8;
		  /* 8211AAF8h */ case   12:  		/* addi R9, R1, 80 */
		/* 8211AAF8h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8211AAF8h case   12:*/		return 0x8211AAFC;
		  /* 8211AAFCh */ case   13:  		/* li R24, 0 */
		/* 8211AAFCh case   13:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8211AAFCh case   13:*/		return 0x8211AB00;
		  /* 8211AB00h */ case   14:  		/* lwz R25, <#[R22 + 8]> */
		/* 8211AB00h case   14:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R22 + 0x00000008) );
		/* 8211AB00h case   14:*/		return 0x8211AB04;
		  /* 8211AB04h */ case   15:  		/* std R24, <#[R11]> */
		/* 8211AB04h case   15:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 8211AB04h case   15:*/		return 0x8211AB08;
		  /* 8211AB08h */ case   16:  		/* std R24, <#[R10]> */
		/* 8211AB08h case   16:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000000) );
		/* 8211AB08h case   16:*/		return 0x8211AB0C;
		  /* 8211AB0Ch */ case   17:  		/* cmplwi CR6, R25, 0 */
		/* 8211AB0Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8211AB0Ch case   17:*/		return 0x8211AB10;
		  /* 8211AB10h */ case   18:  		/* std R24, <#[R9]> */
		/* 8211AB10h case   18:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R9 + 0x00000000) );
		/* 8211AB10h case   18:*/		return 0x8211AB14;
		  /* 8211AB14h */ case   19:  		/* std R24, <#[R11 + 8]> */
		/* 8211AB14h case   19:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R11 + 0x00000008) );
		/* 8211AB14h case   19:*/		return 0x8211AB18;
		  /* 8211AB18h */ case   20:  		/* std R24, <#[R10 + 8]> */
		/* 8211AB18h case   20:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R10 + 0x00000008) );
		/* 8211AB18h case   20:*/		return 0x8211AB1C;
		  /* 8211AB1Ch */ case   21:  		/* std R24, <#[R9 + 8]> */
		/* 8211AB1Ch case   21:*/		cpu::mem::store64( regs, regs.R24, (uint32)(regs.R9 + 0x00000008) );
		/* 8211AB1Ch case   21:*/		return 0x8211AB20;
		  /* 8211AB20h */ case   22:  		/* bc 12, CR6_EQ, 204 */
		/* 8211AB20h case   22:*/		if ( regs.CR[6].eq ) { return 0x8211ABEC;  }
		/* 8211AB20h case   22:*/		return 0x8211AB24;
		  /* 8211AB24h */ case   23:  		/* mr R30, R24 */
		/* 8211AB24h case   23:*/		regs.R30 = regs.R24;
		/* 8211AB24h case   23:*/		return 0x8211AB28;
		  /* 8211AB28h */ case   24:  		/* lwz R11, <#[R25 + 8]> */
		/* 8211AB28h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8211AB28h case   24:*/		return 0x8211AB2C;
		  /* 8211AB2Ch */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 8211AB2Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211AB2Ch case   25:*/		return 0x8211AB30;
		  /* 8211AB30h */ case   26:  		/* bc 12, CR6_EQ, 172 */
		/* 8211AB30h case   26:*/		if ( regs.CR[6].eq ) { return 0x8211ABDC;  }
		/* 8211AB30h case   26:*/		return 0x8211AB34;
		  /* 8211AB34h */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211AB34h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211AB34h case   27:*/		return 0x8211AB38;
		  /* 8211AB38h */ case   28:  		/* cmpwi CR6, R10, 14 */
		/* 8211AB38h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 8211AB38h case   28:*/		return 0x8211AB3C;
		  /* 8211AB3Ch */ case   29:  		/* bc 4, CR6_EQ, 160 */
		/* 8211AB3Ch case   29:*/		if ( !regs.CR[6].eq ) { return 0x8211ABDC;  }
		/* 8211AB3Ch case   29:*/		return 0x8211AB40;
		  /* 8211AB40h */ case   30:  		/* lwz R10, <#[R11 + 24]> */
		/* 8211AB40h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8211AB40h case   30:*/		return 0x8211AB44;
		  /* 8211AB44h */ case   31:  		/* addi R31, R1, 96 */
		/* 8211AB44h case   31:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x60);
		/* 8211AB44h case   31:*/		return 0x8211AB48;
		  /* 8211AB48h */ case   32:  		/* lwz R9, <#[R11 + 20]> */
		/* 8211AB48h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 8211AB48h case   32:*/		return 0x8211AB4C;
		  /* 8211AB4Ch */ case   33:  		/* addi R28, R1, 112 */
		/* 8211AB4Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x70);
		/* 8211AB4Ch case   33:*/		return 0x8211AB50;
		  /* 8211AB50h */ case   34:  		/* lis R4, 9345 */
		/* 8211AB50h case   34:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211AB50h case   34:*/		return 0x8211AB54;
		  /* 8211AB54h */ case   35:  		/* mullw R10, R10, R9 */
		/* 8211AB54h case   35:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8211AB54h case   35:*/		return 0x8211AB58;
		  /* 8211AB58h */ case   36:  		/* stwx R11, <#[R30 + R31]> */
		/* 8211AB58h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 8211AB58h case   36:*/		return 0x8211AB5C;
		  /* 8211AB5Ch */ case   37:  		/* stwx R10, <#[R30 + R28]> */
		/* 8211AB5Ch case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + regs.R28 + 0x00000000) );
		/* 8211AB5Ch case   37:*/		return 0x8211AB60;
	}
	return 0x8211AB60;
} // Block from 8211AAC8h-8211AB60h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8211AB60h
// Function '?NamespaceDecl@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AB60);
		  /* 8211AB60h */ case    0:  		/* rlwinm R3, R10, 4, 0, 27 */
		/* 8211AB60h case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R3,regs.R10);
		/* 8211AB60h case    0:*/		return 0x8211AB64;
		  /* 8211AB64h */ case    1:  		/* bl -600420 */
		/* 8211AB64h case    1:*/		regs.LR = 0x8211AB68; return 0x82088200;
		/* 8211AB64h case    1:*/		return 0x8211AB68;
		  /* 8211AB68h */ case    2:  		/* addi R11, R1, 80 */
		/* 8211AB68h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211AB68h case    2:*/		return 0x8211AB6C;
		  /* 8211AB6Ch */ case    3:  		/* or. R29, R3, R3 */
		/* 8211AB6Ch case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8211AB6Ch case    3:*/		return 0x8211AB70;
		  /* 8211AB70h */ case    4:  		/* stwx R29, <#[R30 + R11]> */
		/* 8211AB70h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8211AB70h case    4:*/		return 0x8211AB74;
		  /* 8211AB74h */ case    5:  		/* bc 12, CR0_EQ, 180 */
		/* 8211AB74h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211AC28;  }
		/* 8211AB74h case    5:*/		return 0x8211AB78;
		  /* 8211AB78h */ case    6:  		/* mr R5, R29 */
		/* 8211AB78h case    6:*/		regs.R5 = regs.R29;
		/* 8211AB78h case    6:*/		return 0x8211AB7C;
		  /* 8211AB7Ch */ case    7:  		/* lwzx R4, <#[R30 + R31]> */
		/* 8211AB7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 8211AB7Ch case    7:*/		return 0x8211AB80;
		  /* 8211AB80h */ case    8:  		/* mr R3, R21 */
		/* 8211AB80h case    8:*/		regs.R3 = regs.R21;
		/* 8211AB80h case    8:*/		return 0x8211AB84;
		  /* 8211AB84h */ case    9:  		/* bl 16884 */
		/* 8211AB84h case    9:*/		regs.LR = 0x8211AB88; return 0x8211ED78;
		/* 8211AB84h case    9:*/		return 0x8211AB88;
		  /* 8211AB88h */ case   10:  		/* or. R31, R3, R3 */
		/* 8211AB88h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211AB88h case   10:*/		return 0x8211AB8C;
		  /* 8211AB8Ch */ case   11:  		/* bc 12, CR0_LT, 5192 */
		/* 8211AB8Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x8211BFD4;  }
		/* 8211AB8Ch case   11:*/		return 0x8211AB90;
		  /* 8211AB90h */ case   12:  		/* lwzx R11, <#[R30 + R28]> */
		/* 8211AB90h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R28 + 0x00000000) );
		/* 8211AB90h case   12:*/		return 0x8211AB94;
		  /* 8211AB94h */ case   13:  		/* mr R9, R24 */
		/* 8211AB94h case   13:*/		regs.R9 = regs.R24;
		/* 8211AB94h case   13:*/		return 0x8211AB98;
		  /* 8211AB98h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8211AB98h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211AB98h case   14:*/		return 0x8211AB9C;
		  /* 8211AB9Ch */ case   15:  		/* bc 4, CR6_GT, 64 */
		/* 8211AB9Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x8211ABDC;  }
		/* 8211AB9Ch case   15:*/		return 0x8211ABA0;
		  /* 8211ABA0h */ case   16:  		/* addi R6, R23, 48 */
		/* 8211ABA0h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R23,0x30);
		/* 8211ABA0h case   16:*/		return 0x8211ABA4;
		  /* 8211ABA4h */ case   17:  		/* mr R10, R24 */
		/* 8211ABA4h case   17:*/		regs.R10 = regs.R24;
		/* 8211ABA4h case   17:*/		return 0x8211ABA8;
		  /* 8211ABA8h */ case   18:  		/* add R5, R29, R10 */
		/* 8211ABA8h case   18:*/		cpu::op::add<0>(regs,&regs.R5,regs.R29,regs.R10);
		/* 8211ABA8h case   18:*/		return 0x8211ABAC;
		  /* 8211ABACh */ case   19:  		/* mr R3, R21 */
		/* 8211ABACh case   19:*/		regs.R3 = regs.R21;
		/* 8211ABACh case   19:*/		return 0x8211ABB0;
		  /* 8211ABB0h */ case   20:  		/* addi R4, R5, 8 */
		/* 8211ABB0h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R5,0x8);
		/* 8211ABB0h case   20:*/		return 0x8211ABB4;
		  /* 8211ABB4h */ case   21:  		/* bl -9092 */
		/* 8211ABB4h case   21:*/		regs.LR = 0x8211ABB8; return 0x82118830;
		/* 8211ABB4h case   21:*/		return 0x8211ABB8;
		  /* 8211ABB8h */ case   22:  		/* or. R31, R3, R3 */
		/* 8211ABB8h case   22:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211ABB8h case   22:*/		return 0x8211ABBC;
		  /* 8211ABBCh */ case   23:  		/* bc 12, CR0_LT, 5144 */
		/* 8211ABBCh case   23:*/		if ( regs.CR[0].lt ) { return 0x8211BFD4;  }
		/* 8211ABBCh case   23:*/		return 0x8211ABC0;
		  /* 8211ABC0h */ case   24:  		/* lwzx R11, <#[R30 + R28]> */
		/* 8211ABC0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R28 + 0x00000000) );
		/* 8211ABC0h case   24:*/		return 0x8211ABC4;
		  /* 8211ABC4h */ case   25:  		/* li R8, 3 */
		/* 8211ABC4h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8211ABC4h case   25:*/		return 0x8211ABC8;
		  /* 8211ABC8h */ case   26:  		/* addi R9, R9, 1 */
		/* 8211ABC8h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211ABC8h case   26:*/		return 0x8211ABCC;
		  /* 8211ABCCh */ case   27:  		/* stw R8, <#[R5]> */
		/* 8211ABCCh case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R5 + 0x00000000) );
		/* 8211ABCCh case   27:*/		return 0x8211ABD0;
		  /* 8211ABD0h */ case   28:  		/* addi R10, R10, 16 */
		/* 8211ABD0h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211ABD0h case   28:*/		return 0x8211ABD4;
		  /* 8211ABD4h */ case   29:  		/* cmplw CR6, R9, R11 */
		/* 8211ABD4h case   29:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8211ABD4h case   29:*/		return 0x8211ABD8;
		  /* 8211ABD8h */ case   30:  		/* bc 12, CR6_LT, -48 */
		/* 8211ABD8h case   30:*/		if ( regs.CR[6].lt ) { return 0x8211ABA8;  }
		/* 8211ABD8h case   30:*/		return 0x8211ABDC;
	}
	return 0x8211ABDC;
} // Block from 8211AB60h-8211ABDCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 8211ABDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ABDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ABDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ABDC);
		  /* 8211ABDCh */ case    0:  		/* lwz R25, <#[R25 + 12]> */
		/* 8211ABDCh case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x0000000C) );
		/* 8211ABDCh case    0:*/		return 0x8211ABE0;
		  /* 8211ABE0h */ case    1:  		/* addi R30, R30, 4 */
		/* 8211ABE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8211ABE0h case    1:*/		return 0x8211ABE4;
		  /* 8211ABE4h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 8211ABE4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8211ABE4h case    2:*/		return 0x8211ABE8;
		  /* 8211ABE8h */ case    3:  		/* bc 4, CR6_EQ, -192 */
		/* 8211ABE8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211AB28;  }
		/* 8211ABE8h case    3:*/		return 0x8211ABEC;
	}
	return 0x8211ABEC;
} // Block from 8211ABDCh-8211ABECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211ABECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ABEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ABEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ABEC);
		  /* 8211ABECh */ case    0:  		/* lwz R11, <#[R23 + 32]> */
		/* 8211ABECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 8211ABECh case    0:*/		return 0x8211ABF0;
		  /* 8211ABF0h */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 8211ABF0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8211ABF0h case    1:*/		return 0x8211ABF4;
		  /* 8211ABF4h */ case    2:  		/* lwz R11, <#[R11 + 24]> */
		/* 8211ABF4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8211ABF4h case    2:*/		return 0x8211ABF8;
		  /* 8211ABF8h */ case    3:  		/* cmplwi CR6, R11, 137 */
		/* 8211ABF8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000089);
		/* 8211ABF8h case    3:*/		return 0x8211ABFC;
		  /* 8211ABFCh */ case    4:  		/* bc 12, CR6_GT, 5072 */
		/* 8211ABFCh case    4:*/		if ( regs.CR[6].gt ) { return 0x8211BFCC;  }
		/* 8211ABFCh case    4:*/		return 0x8211AC00;
		  /* 8211AC00h */ case    5:  		/* lis R12, -32253 */
		/* 8211AC00h case    5:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 8211AC00h case    5:*/		return 0x8211AC04;
		  /* 8211AC04h */ case    6:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 8211AC04h case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 8211AC04h case    6:*/		return 0x8211AC08;
		  /* 8211AC08h */ case    7:  		/* addi R12, R12, 5288 */
		/* 8211AC08h case    7:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x14A8);
		/* 8211AC08h case    7:*/		return 0x8211AC0C;
		  /* 8211AC0Ch */ case    8:  		/* lhzx R0, <#[R12 + R0]> */
		/* 8211AC0Ch case    8:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 8211AC0Ch case    8:*/		return 0x8211AC10;
		  /* 8211AC10h */ case    9:  		/* lis R12, -32238 */
		/* 8211AC10h case    9:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 8211AC10h case    9:*/		return 0x8211AC14;
		  /* 8211AC14h */ case   10:  		/* addi R12, R12, -21464 */
		/* 8211AC14h case   10:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFAC28);
		/* 8211AC14h case   10:*/		return 0x8211AC18;
		  /* 8211AC18h */ case   11:  		/* ori R0, R0, 0 */
		/* 8211AC18h case   11:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8211AC18h case   11:*/		return 0x8211AC1C;
		  /* 8211AC1Ch */ case   12:  		/* add R12, R12, R0 */
		/* 8211AC1Ch case   12:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8211AC1Ch case   12:*/		return 0x8211AC20;
	}
	return 0x8211AC20;
} // Block from 8211ABECh-8211AC20h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211AC20h
// Function '?PushCBuffer@CParse@D3DXShader@@IAAJPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AC20);
		  /* 8211AC20h */ case    0:  		/* mtspr CTR, R12 */
		/* 8211AC20h case    0:*/		regs.CTR = regs.R12;
		/* 8211AC20h case    0:*/		return 0x8211AC24;
		  /* 8211AC24h */ case    1:  		/* bcctr 20, CR0_LT */
		/* 8211AC24h case    1:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8211AC24h case    1:*/		return 0x8211AC28;
	}
	return 0x8211AC28;
} // Block from 8211AC20h-8211AC28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211AC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AC28);
		  /* 8211AC28h */ case    0:  		/* lis R31, -32761 */
		/* 8211AC28h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 8211AC28h case    0:*/		return 0x8211AC2C;
		  /* 8211AC2Ch */ case    1:  		/* ori R31, R31, 14 */
		/* 8211AC2Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 8211AC2Ch case    1:*/		return 0x8211AC30;
		  /* 8211AC30h */ case    2:  		/* b 5028 */
		/* 8211AC30h case    2:*/		return 0x8211BFD4;
		/* 8211AC30h case    2:*/		return 0x8211AC34;
		  /* 8211AC34h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8211AC34h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AC34h case    3:*/		return 0x8211AC38;
		  /* 8211AC38h */ case    4:  		/* bc 12, CR6_EQ, 4916 */
		/* 8211AC38h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AC38h case    4:*/		return 0x8211AC3C;
		  /* 8211AC3Ch */ case    5:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211AC3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AC3Ch case    5:*/		return 0x8211AC40;
		  /* 8211AC40h */ case    6:  		/* addi R11, R27, 8 */
		/* 8211AC40h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211AC40h case    6:*/		return 0x8211AC44;
		  /* 8211AC44h */ case    7:  		/* mtspr CTR, R26 */
		/* 8211AC44h case    7:*/		regs.CTR = regs.R26;
		/* 8211AC44h case    7:*/		return 0x8211AC48;
		  /* 8211AC48h */ case    8:  		/* subf R10, R27, R10 */
		/* 8211AC48h case    8:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211AC48h case    8:*/		return 0x8211AC4C;
		  /* 8211AC4Ch */ case    9:  		/* lfdx FR0, <#[R10 + R11]> */
		/* 8211AC4Ch case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211AC4Ch case    9:*/		return 0x8211AC50;
		  /* 8211AC50h */ case   10:  		/* fabs FR0, FR0 */
		/* 8211AC50h case   10:*/		cpu::op::fabs<0>(regs,&regs.FR0,regs.FR0);
		/* 8211AC50h case   10:*/		return 0x8211AC54;
		  /* 8211AC54h */ case   11:  		/* stfd FR0, <#[R11]> */
		/* 8211AC54h case   11:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211AC54h case   11:*/		return 0x8211AC58;
		  /* 8211AC58h */ case   12:  		/* addi R11, R11, 16 */
		/* 8211AC58h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211AC58h case   12:*/		return 0x8211AC5C;
		  /* 8211AC5Ch */ case   13:  		/* bc 16, CR0_LT, -16 */
		/* 8211AC5Ch case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211AC4C;  }
		/* 8211AC5Ch case   13:*/		return 0x8211AC60;
		  /* 8211AC60h */ case   14:  		/* b 4876 */
		/* 8211AC60h case   14:*/		return 0x8211BF6C;
		/* 8211AC60h case   14:*/		return 0x8211AC64;
		  /* 8211AC64h */ case   15:  		/* mr R30, R24 */
		/* 8211AC64h case   15:*/		regs.R30 = regs.R24;
		/* 8211AC64h case   15:*/		return 0x8211AC68;
		  /* 8211AC68h */ case   16:  		/* cmplwi CR6, R26, 0 */
		/* 8211AC68h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AC68h case   16:*/		return 0x8211AC6C;
		  /* 8211AC6Ch */ case   17:  		/* bc 12, CR6_EQ, 4864 */
		/* 8211AC6Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AC6Ch case   17:*/		return 0x8211AC70;
		  /* 8211AC70h */ case   18:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211AC70h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AC70h case   18:*/		return 0x8211AC74;
		  /* 8211AC74h */ case   19:  		/* lis R10, -32255 */
		/* 8211AC74h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8211AC74h case   19:*/		return 0x8211AC78;
		  /* 8211AC78h */ case   20:  		/* addi R31, R11, 8 */
		/* 8211AC78h case   20:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211AC78h case   20:*/		return 0x8211AC7C;
		  /* 8211AC7Ch */ case   21:  		/* subf R29, R11, R27 */
		/* 8211AC7Ch case   21:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R27);
		/* 8211AC7Ch case   21:*/		return 0x8211AC80;
		  /* 8211AC80h */ case   22:  		/* lis R11, -32256 */
		/* 8211AC80h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211AC80h case   22:*/		return 0x8211AC84;
		  /* 8211AC84h */ case   23:  		/* lfd FR31, <#[R10 - 24488]> */
		/* 8211AC84h case   23:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0xFFFFA058) );
		/* 8211AC84h case   23:*/		return 0x8211AC88;
		  /* 8211AC88h */ case   24:  		/* lfd FR30, <#[R11 + 1848]> */
		/* 8211AC88h case   24:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000738) );
		/* 8211AC88h case   24:*/		return 0x8211AC8C;
		  /* 8211AC8Ch */ case   25:  		/* lfd FR1, <#[R31]> */
		/* 8211AC8Ch case   25:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211AC8Ch case   25:*/		return 0x8211AC90;
		  /* 8211AC90h */ case   26:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211AC90h case   26:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211AC90h case   26:*/		return 0x8211AC94;
		  /* 8211AC94h */ case   27:  		/* bc 12, CR6_LT, 4920 */
		/* 8211AC94h case   27:*/		if ( regs.CR[6].lt ) { return 0x8211BFCC;  }
		/* 8211AC94h case   27:*/		return 0x8211AC98;
		  /* 8211AC98h */ case   28:  		/* fcmpu CR6, FR1, FR30 */
		/* 8211AC98h case   28:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR30);
		/* 8211AC98h case   28:*/		return 0x8211AC9C;
		  /* 8211AC9Ch */ case   29:  		/* bc 12, CR6_GT, 4912 */
		/* 8211AC9Ch case   29:*/		if ( regs.CR[6].gt ) { return 0x8211BFCC;  }
		/* 8211AC9Ch case   29:*/		return 0x8211ACA0;
		  /* 8211ACA0h */ case   30:  		/* bl 1365520 */
		/* 8211ACA0h case   30:*/		regs.LR = 0x8211ACA4; return 0x822682B0;
		/* 8211ACA0h case   30:*/		return 0x8211ACA4;
		  /* 8211ACA4h */ case   31:  		/* addi R30, R30, 1 */
		/* 8211ACA4h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8211ACA4h case   31:*/		return 0x8211ACA8;
		  /* 8211ACA8h */ case   32:  		/* stfdx FR1, <#[R29 + R31]> */
		/* 8211ACA8h case   32:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 8211ACA8h case   32:*/		return 0x8211ACAC;
		  /* 8211ACACh */ case   33:  		/* addi R31, R31, 16 */
		/* 8211ACACh case   33:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211ACACh case   33:*/		return 0x8211ACB0;
	}
	return 0x8211ACB0;
} // Block from 8211AC28h-8211ACB0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8211ACB0h
// Function '?MakeTypeConst@CParse@D3DXShader@@IAAJPAVCNode@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ACB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ACB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ACB0);
		  /* 8211ACB0h */ case    0:  		/* cmplw CR6, R30, R26 */
		/* 8211ACB0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8211ACB0h case    0:*/		return 0x8211ACB4;
		  /* 8211ACB4h */ case    1:  		/* bc 12, CR6_LT, -40 */
		/* 8211ACB4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8211AC8C;  }
		/* 8211ACB4h case    1:*/		return 0x8211ACB8;
		  /* 8211ACB8h */ case    2:  		/* b 4788 */
		/* 8211ACB8h case    2:*/		return 0x8211BF6C;
		/* 8211ACB8h case    2:*/		return 0x8211ACBC;
		  /* 8211ACBCh */ case    3:  		/* lis R10, -32256 */
		/* 8211ACBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211ACBCh case    3:*/		return 0x8211ACC0;
		  /* 8211ACC0h */ case    4:  		/* mr R11, R24 */
		/* 8211ACC0h case    4:*/		regs.R11 = regs.R24;
		/* 8211ACC0h case    4:*/		return 0x8211ACC4;
		  /* 8211ACC4h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8211ACC4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211ACC4h case    5:*/		return 0x8211ACC8;
		  /* 8211ACC8h */ case    6:  		/* lfd FR0, <#[R10 + 1848]> */
		/* 8211ACC8h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000738) );
		/* 8211ACC8h case    6:*/		return 0x8211ACCC;
		  /* 8211ACCCh */ case    7:  		/* stfd FR0, <#[R27 + 8]> */
		/* 8211ACCCh case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000008) );
		/* 8211ACCCh case    7:*/		return 0x8211ACD0;
		  /* 8211ACD0h */ case    8:  		/* bc 12, CR6_EQ, 4764 */
		/* 8211ACD0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211ACD0h case    8:*/		return 0x8211ACD4;
		  /* 8211ACD4h */ case    9:  		/* lis R9, -32256 */
		/* 8211ACD4h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8211ACD4h case    9:*/		return 0x8211ACD8;
		  /* 8211ACD8h */ case   10:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211ACD8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211ACD8h case   10:*/		return 0x8211ACDC;
		  /* 8211ACDCh */ case   11:  		/* addi R10, R10, 8 */
		/* 8211ACDCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 8211ACDCh case   11:*/		return 0x8211ACE0;
		  /* 8211ACE0h */ case   12:  		/* lfd FR0, <#[R9 + 1808]> */
		/* 8211ACE0h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000710) );
		/* 8211ACE0h case   12:*/		return 0x8211ACE4;
		  /* 8211ACE4h */ case   13:  		/* lfd FR13, <#[R10]> */
		/* 8211ACE4h case   13:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8211ACE4h case   13:*/		return 0x8211ACE8;
		  /* 8211ACE8h */ case   14:  		/* fcmpu CR6, FR13, FR0 */
		/* 8211ACE8h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8211ACE8h case   14:*/		return 0x8211ACEC;
		  /* 8211ACECh */ case   15:  		/* bc 12, CR6_EQ, 96 */
		/* 8211ACECh case   15:*/		if ( regs.CR[6].eq ) { return 0x8211AD4C;  }
		/* 8211ACECh case   15:*/		return 0x8211ACF0;
		  /* 8211ACF0h */ case   16:  		/* addi R11, R11, 1 */
		/* 8211ACF0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211ACF0h case   16:*/		return 0x8211ACF4;
		  /* 8211ACF4h */ case   17:  		/* addi R10, R10, 16 */
		/* 8211ACF4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211ACF4h case   17:*/		return 0x8211ACF8;
		  /* 8211ACF8h */ case   18:  		/* cmplw CR6, R11, R26 */
		/* 8211ACF8h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8211ACF8h case   18:*/		return 0x8211ACFC;
		  /* 8211ACFCh */ case   19:  		/* bc 12, CR6_LT, -24 */
		/* 8211ACFCh case   19:*/		if ( regs.CR[6].lt ) { return 0x8211ACE4;  }
		/* 8211ACFCh case   19:*/		return 0x8211AD00;
		  /* 8211AD00h */ case   20:  		/* b 4716 */
		/* 8211AD00h case   20:*/		return 0x8211BF6C;
		/* 8211AD00h case   20:*/		return 0x8211AD04;
		  /* 8211AD04h */ case   21:  		/* lis R10, -32256 */
		/* 8211AD04h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211AD04h case   21:*/		return 0x8211AD08;
		  /* 8211AD08h */ case   22:  		/* mr R11, R24 */
		/* 8211AD08h case   22:*/		regs.R11 = regs.R24;
		/* 8211AD08h case   22:*/		return 0x8211AD0C;
		  /* 8211AD0Ch */ case   23:  		/* cmplwi CR6, R26, 0 */
		/* 8211AD0Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AD0Ch case   23:*/		return 0x8211AD10;
		  /* 8211AD10h */ case   24:  		/* lfd FR0, <#[R10 + 1808]> */
		/* 8211AD10h case   24:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000710) );
		/* 8211AD10h case   24:*/		return 0x8211AD14;
		  /* 8211AD14h */ case   25:  		/* stfd FR0, <#[R27 + 8]> */
		/* 8211AD14h case   25:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000008) );
		/* 8211AD14h case   25:*/		return 0x8211AD18;
		  /* 8211AD18h */ case   26:  		/* bc 12, CR6_EQ, 4692 */
		/* 8211AD18h case   26:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AD18h case   26:*/		return 0x8211AD1C;
		  /* 8211AD1Ch */ case   27:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211AD1Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AD1Ch case   27:*/		return 0x8211AD20;
		  /* 8211AD20h */ case   28:  		/* addi R10, R10, 8 */
		/* 8211AD20h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 8211AD20h case   28:*/		return 0x8211AD24;
		  /* 8211AD24h */ case   29:  		/* lfd FR13, <#[R10]> */
		/* 8211AD24h case   29:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8211AD24h case   29:*/		return 0x8211AD28;
		  /* 8211AD28h */ case   30:  		/* fcmpu CR6, FR13, FR0 */
		/* 8211AD28h case   30:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8211AD28h case   30:*/		return 0x8211AD2C;
		  /* 8211AD2Ch */ case   31:  		/* bc 4, CR6_EQ, 24 */
		/* 8211AD2Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x8211AD44;  }
		/* 8211AD2Ch case   31:*/		return 0x8211AD30;
		  /* 8211AD30h */ case   32:  		/* addi R11, R11, 1 */
		/* 8211AD30h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211AD30h case   32:*/		return 0x8211AD34;
		  /* 8211AD34h */ case   33:  		/* addi R10, R10, 16 */
		/* 8211AD34h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211AD34h case   33:*/		return 0x8211AD38;
		  /* 8211AD38h */ case   34:  		/* cmplw CR6, R11, R26 */
		/* 8211AD38h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8211AD38h case   34:*/		return 0x8211AD3C;
		  /* 8211AD3Ch */ case   35:  		/* bc 12, CR6_LT, -24 */
		/* 8211AD3Ch case   35:*/		if ( regs.CR[6].lt ) { return 0x8211AD24;  }
		/* 8211AD3Ch case   35:*/		return 0x8211AD40;
		  /* 8211AD40h */ case   36:  		/* b 4652 */
		/* 8211AD40h case   36:*/		return 0x8211BF6C;
		/* 8211AD40h case   36:*/		return 0x8211AD44;
	}
	return 0x8211AD44;
} // Block from 8211ACB0h-8211AD44h (37 instructions)

//////////////////////////////////////////////////////
// Block at 8211AD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AD44);
		  /* 8211AD44h */ case    0:  		/* lis R11, -32256 */
		/* 8211AD44h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211AD44h case    0:*/		return 0x8211AD48;
		  /* 8211AD48h */ case    1:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 8211AD48h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 8211AD48h case    1:*/		return 0x8211AD4C;
	}
	return 0x8211AD4C;
} // Block from 8211AD44h-8211AD4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211AD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AD4C);
		  /* 8211AD4Ch */ case    0:  		/* stfd FR0, <#[R27 + 8]> */
		/* 8211AD4Ch case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000008) );
		/* 8211AD4Ch case    0:*/		return 0x8211AD50;
		  /* 8211AD50h */ case    1:  		/* b 4636 */
		/* 8211AD50h case    1:*/		return 0x8211BF6C;
		/* 8211AD50h case    1:*/		return 0x8211AD54;
		  /* 8211AD54h */ case    2:  		/* mr R30, R24 */
		/* 8211AD54h case    2:*/		regs.R30 = regs.R24;
		/* 8211AD54h case    2:*/		return 0x8211AD58;
		  /* 8211AD58h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8211AD58h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AD58h case    3:*/		return 0x8211AD5C;
		  /* 8211AD5Ch */ case    4:  		/* bc 12, CR6_EQ, 4624 */
		/* 8211AD5Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AD5Ch case    4:*/		return 0x8211AD60;
		  /* 8211AD60h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211AD60h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AD60h case    5:*/		return 0x8211AD64;
		  /* 8211AD64h */ case    6:  		/* lis R10, -32255 */
		/* 8211AD64h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8211AD64h case    6:*/		return 0x8211AD68;
		  /* 8211AD68h */ case    7:  		/* addi R31, R11, 8 */
		/* 8211AD68h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211AD68h case    7:*/		return 0x8211AD6C;
		  /* 8211AD6Ch */ case    8:  		/* subf R29, R11, R27 */
		/* 8211AD6Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R27);
		/* 8211AD6Ch case    8:*/		return 0x8211AD70;
		  /* 8211AD70h */ case    9:  		/* lis R11, -32256 */
		/* 8211AD70h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211AD70h case    9:*/		return 0x8211AD74;
		  /* 8211AD74h */ case   10:  		/* lfd FR31, <#[R10 - 24488]> */
		/* 8211AD74h case   10:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0xFFFFA058) );
		/* 8211AD74h case   10:*/		return 0x8211AD78;
		  /* 8211AD78h */ case   11:  		/* lfd FR30, <#[R11 + 1848]> */
		/* 8211AD78h case   11:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000738) );
		/* 8211AD78h case   11:*/		return 0x8211AD7C;
		  /* 8211AD7Ch */ case   12:  		/* lfd FR1, <#[R31]> */
		/* 8211AD7Ch case   12:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211AD7Ch case   12:*/		return 0x8211AD80;
		  /* 8211AD80h */ case   13:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211AD80h case   13:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211AD80h case   13:*/		return 0x8211AD84;
		  /* 8211AD84h */ case   14:  		/* bc 12, CR6_LT, 4680 */
		/* 8211AD84h case   14:*/		if ( regs.CR[6].lt ) { return 0x8211BFCC;  }
		/* 8211AD84h case   14:*/		return 0x8211AD88;
		  /* 8211AD88h */ case   15:  		/* fcmpu CR6, FR1, FR30 */
		/* 8211AD88h case   15:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR30);
		/* 8211AD88h case   15:*/		return 0x8211AD8C;
		  /* 8211AD8Ch */ case   16:  		/* bc 12, CR6_GT, 4672 */
		/* 8211AD8Ch case   16:*/		if ( regs.CR[6].gt ) { return 0x8211BFCC;  }
		/* 8211AD8Ch case   16:*/		return 0x8211AD90;
		  /* 8211AD90h */ case   17:  		/* bl 1365080 */
		/* 8211AD90h case   17:*/		regs.LR = 0x8211AD94; return 0x822681E8;
		/* 8211AD90h case   17:*/		return 0x8211AD94;
		  /* 8211AD94h */ case   18:  		/* addi R30, R30, 1 */
		/* 8211AD94h case   18:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8211AD94h case   18:*/		return 0x8211AD98;
	}
	return 0x8211AD98;
} // Block from 8211AD4Ch-8211AD98h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211AD98h
// Function '?IsConst@CParse@D3DXShader@@IAAHPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AD98);
		  /* 8211AD98h */ case    0:  		/* stfdx FR1, <#[R31 + R29]> */
		/* 8211AD98h case    0:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211AD98h case    0:*/		return 0x8211AD9C;
		  /* 8211AD9Ch */ case    1:  		/* addi R31, R31, 16 */
		/* 8211AD9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211AD9Ch case    1:*/		return 0x8211ADA0;
		  /* 8211ADA0h */ case    2:  		/* cmplw CR6, R30, R26 */
		/* 8211ADA0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8211ADA0h case    2:*/		return 0x8211ADA4;
		  /* 8211ADA4h */ case    3:  		/* bc 12, CR6_LT, -40 */
		/* 8211ADA4h case    3:*/		if ( regs.CR[6].lt ) { return 0x8211AD7C;  }
		/* 8211ADA4h case    3:*/		return 0x8211ADA8;
		  /* 8211ADA8h */ case    4:  		/* b 4548 */
		/* 8211ADA8h case    4:*/		return 0x8211BF6C;
		/* 8211ADA8h case    4:*/		return 0x8211ADAC;
		  /* 8211ADACh */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8211ADACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211ADACh case    5:*/		return 0x8211ADB0;
		  /* 8211ADB0h */ case    6:  		/* bc 12, CR6_EQ, 4540 */
		/* 8211ADB0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211ADB0h case    6:*/		return 0x8211ADB4;
		  /* 8211ADB4h */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211ADB4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211ADB4h case    7:*/		return 0x8211ADB8;
		  /* 8211ADB8h */ case    8:  		/* addi R31, R27, 8 */
		/* 8211ADB8h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211ADB8h case    8:*/		return 0x8211ADBC;
		  /* 8211ADBCh */ case    9:  		/* mr R30, R26 */
		/* 8211ADBCh case    9:*/		regs.R30 = regs.R26;
		/* 8211ADBCh case    9:*/		return 0x8211ADC0;
		  /* 8211ADC0h */ case   10:  		/* subf R29, R27, R11 */
		/* 8211ADC0h case   10:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211ADC0h case   10:*/		return 0x8211ADC4;
		  /* 8211ADC4h */ case   11:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211ADC4h case   11:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211ADC4h case   11:*/		return 0x8211ADC8;
		  /* 8211ADC8h */ case   12:  		/* bl 1364240 */
		/* 8211ADC8h case   12:*/		regs.LR = 0x8211ADCC; return 0x82267ED8;
		/* 8211ADC8h case   12:*/		return 0x8211ADCC;
		  /* 8211ADCCh */ case   13:  		/* stfd FR1, <#[R31]> */
		/* 8211ADCCh case   13:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211ADCCh case   13:*/		return 0x8211ADD0;
		  /* 8211ADD0h */ case   14:  		/* addic. R30, R30, -1 */
		/* 8211ADD0h case   14:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211ADD0h case   14:*/		return 0x8211ADD4;
		  /* 8211ADD4h */ case   15:  		/* addi R31, R31, 16 */
		/* 8211ADD4h case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211ADD4h case   15:*/		return 0x8211ADD8;
		  /* 8211ADD8h */ case   16:  		/* bc 4, CR0_EQ, -20 */
		/* 8211ADD8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8211ADC4;  }
		/* 8211ADD8h case   16:*/		return 0x8211ADDC;
		  /* 8211ADDCh */ case   17:  		/* b 4496 */
		/* 8211ADDCh case   17:*/		return 0x8211BF6C;
		/* 8211ADDCh case   17:*/		return 0x8211ADE0;
		  /* 8211ADE0h */ case   18:  		/* cmplwi CR6, R26, 0 */
		/* 8211ADE0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211ADE0h case   18:*/		return 0x8211ADE4;
		  /* 8211ADE4h */ case   19:  		/* bc 12, CR6_EQ, 4488 */
		/* 8211ADE4h case   19:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211ADE4h case   19:*/		return 0x8211ADE8;
		  /* 8211ADE8h */ case   20:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211ADE8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211ADE8h case   20:*/		return 0x8211ADEC;
		  /* 8211ADECh */ case   21:  		/* mr R30, R26 */
		/* 8211ADECh case   21:*/		regs.R30 = regs.R26;
		/* 8211ADECh case   21:*/		return 0x8211ADF0;
		  /* 8211ADF0h */ case   22:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211ADF0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211ADF0h case   22:*/		return 0x8211ADF4;
		  /* 8211ADF4h */ case   23:  		/* addi R31, R11, 8 */
		/* 8211ADF4h case   23:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211ADF4h case   23:*/		return 0x8211ADF8;
		  /* 8211ADF8h */ case   24:  		/* subf R28, R11, R27 */
		/* 8211ADF8h case   24:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R11,regs.R27);
		/* 8211ADF8h case   24:*/		return 0x8211ADFC;
		  /* 8211ADFCh */ case   25:  		/* subf R29, R11, R10 */
		/* 8211ADFCh case   25:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 8211ADFCh case   25:*/		return 0x8211AE00;
		  /* 8211AE00h */ case   26:  		/* lfdx FR2, <#[R29 + R31]> */
		/* 8211AE00h case   26:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 8211AE00h case   26:*/		return 0x8211AE04;
		  /* 8211AE04h */ case   27:  		/* lfd FR1, <#[R31]> */
		/* 8211AE04h case   27:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211AE04h case   27:*/		return 0x8211AE08;
		  /* 8211AE08h */ case   28:  		/* bl 1364408 */
		/* 8211AE08h case   28:*/		regs.LR = 0x8211AE0C; return 0x82267FC0;
		/* 8211AE08h case   28:*/		return 0x8211AE0C;
		  /* 8211AE0Ch */ case   29:  		/* stfdx FR1, <#[R31 + R28]> */
		/* 8211AE0Ch case   29:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + regs.R28 + 0x00000000) );
		/* 8211AE0Ch case   29:*/		return 0x8211AE10;
		  /* 8211AE10h */ case   30:  		/* addic. R30, R30, -1 */
		/* 8211AE10h case   30:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211AE10h case   30:*/		return 0x8211AE14;
		  /* 8211AE14h */ case   31:  		/* addi R31, R31, 16 */
		/* 8211AE14h case   31:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211AE14h case   31:*/		return 0x8211AE18;
		  /* 8211AE18h */ case   32:  		/* bc 4, CR0_EQ, -24 */
		/* 8211AE18h case   32:*/		if ( !regs.CR[0].eq ) { return 0x8211AE00;  }
		/* 8211AE18h case   32:*/		return 0x8211AE1C;
		  /* 8211AE1Ch */ case   33:  		/* b 4432 */
		/* 8211AE1Ch case   33:*/		return 0x8211BF6C;
		/* 8211AE1Ch case   33:*/		return 0x8211AE20;
		  /* 8211AE20h */ case   34:  		/* cmplwi CR6, R26, 0 */
		/* 8211AE20h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AE20h case   34:*/		return 0x8211AE24;
		  /* 8211AE24h */ case   35:  		/* bc 12, CR6_EQ, 4424 */
		/* 8211AE24h case   35:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AE24h case   35:*/		return 0x8211AE28;
		  /* 8211AE28h */ case   36:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211AE28h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AE28h case   36:*/		return 0x8211AE2C;
		  /* 8211AE2Ch */ case   37:  		/* addi R31, R27, 8 */
		/* 8211AE2Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211AE2Ch case   37:*/		return 0x8211AE30;
		  /* 8211AE30h */ case   38:  		/* mr R30, R26 */
		/* 8211AE30h case   38:*/		regs.R30 = regs.R26;
		/* 8211AE30h case   38:*/		return 0x8211AE34;
		  /* 8211AE34h */ case   39:  		/* subf R29, R27, R11 */
		/* 8211AE34h case   39:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211AE34h case   39:*/		return 0x8211AE38;
		  /* 8211AE38h */ case   40:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211AE38h case   40:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211AE38h case   40:*/		return 0x8211AE3C;
		  /* 8211AE3Ch */ case   41:  		/* bl -557844 */
		/* 8211AE3Ch case   41:*/		regs.LR = 0x8211AE40; return 0x82092B28;
		/* 8211AE3Ch case   41:*/		return 0x8211AE40;
		  /* 8211AE40h */ case   42:  		/* stfd FR1, <#[R31]> */
		/* 8211AE40h case   42:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211AE40h case   42:*/		return 0x8211AE44;
		  /* 8211AE44h */ case   43:  		/* addic. R30, R30, -1 */
		/* 8211AE44h case   43:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211AE44h case   43:*/		return 0x8211AE48;
		  /* 8211AE48h */ case   44:  		/* addi R31, R31, 16 */
		/* 8211AE48h case   44:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211AE48h case   44:*/		return 0x8211AE4C;
		  /* 8211AE4Ch */ case   45:  		/* bc 4, CR0_EQ, -20 */
		/* 8211AE4Ch case   45:*/		if ( !regs.CR[0].eq ) { return 0x8211AE38;  }
		/* 8211AE4Ch case   45:*/		return 0x8211AE50;
		  /* 8211AE50h */ case   46:  		/* b 4380 */
		/* 8211AE50h case   46:*/		return 0x8211BF6C;
		/* 8211AE50h case   46:*/		return 0x8211AE54;
		  /* 8211AE54h */ case   47:  		/* cmplwi CR6, R26, 0 */
		/* 8211AE54h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AE54h case   47:*/		return 0x8211AE58;
		  /* 8211AE58h */ case   48:  		/* bc 12, CR6_EQ, 4372 */
		/* 8211AE58h case   48:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AE58h case   48:*/		return 0x8211AE5C;
		  /* 8211AE5Ch */ case   49:  		/* lwz R11, <#[R1 + 88]> */
		/* 8211AE5Ch case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8211AE5Ch case   49:*/		return 0x8211AE60;
		  /* 8211AE60h */ case   50:  		/* mtspr CTR, R26 */
		/* 8211AE60h case   50:*/		regs.CTR = regs.R26;
		/* 8211AE60h case   50:*/		return 0x8211AE64;
		  /* 8211AE64h */ case   51:  		/* lwz R9, <#[R1 + 84]> */
		/* 8211AE64h case   51:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8211AE64h case   51:*/		return 0x8211AE68;
	}
	return 0x8211AE68;
} // Block from 8211AD98h-8211AE68h (52 instructions)

//////////////////////////////////////////////////////
// Block at 8211AE68h
// Function '?IsNumeric@CParse@D3DXShader@@IAAHPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AE68);
		  /* 8211AE68h */ case    0:  		/* lwz R8, <#[R1 + 80]> */
		/* 8211AE68h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AE68h case    0:*/		return 0x8211AE6C;
		  /* 8211AE6Ch */ case    1:  		/* addi R10, R11, 8 */
		/* 8211AE6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8211AE6Ch case    1:*/		return 0x8211AE70;
		  /* 8211AE70h */ case    2:  		/* subf R9, R11, R9 */
		/* 8211AE70h case    2:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8211AE70h case    2:*/		return 0x8211AE74;
		  /* 8211AE74h */ case    3:  		/* subf R8, R11, R8 */
		/* 8211AE74h case    3:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 8211AE74h case    3:*/		return 0x8211AE78;
		  /* 8211AE78h */ case    4:  		/* subf R11, R11, R27 */
		/* 8211AE78h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8211AE78h case    4:*/		return 0x8211AE7C;
		  /* 8211AE7Ch */ case    5:  		/* lfdx FR0, <#[R8 + R10]> */
		/* 8211AE7Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8211AE7Ch case    5:*/		return 0x8211AE80;
		  /* 8211AE80h */ case    6:  		/* lfdx FR13, <#[R9 + R10]> */
		/* 8211AE80h case    6:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211AE80h case    6:*/		return 0x8211AE84;
		  /* 8211AE84h */ case    7:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211AE84h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211AE84h case    7:*/		return 0x8211AE88;
		  /* 8211AE88h */ case    8:  		/* bc 12, CR6_LT, 16 */
		/* 8211AE88h case    8:*/		if ( regs.CR[6].lt ) { return 0x8211AE98;  }
		/* 8211AE88h case    8:*/		return 0x8211AE8C;
		  /* 8211AE8Ch */ case    9:  		/* lfd FR13, <#[R10]> */
		/* 8211AE8Ch case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8211AE8Ch case    9:*/		return 0x8211AE90;
		  /* 8211AE90h */ case   10:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211AE90h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211AE90h case   10:*/		return 0x8211AE94;
		  /* 8211AE94h */ case   11:  		/* bc 4, CR6_GT, 12 */
		/* 8211AE94h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8211AEA0;  }
		/* 8211AE94h case   11:*/		return 0x8211AE98;
	}
	return 0x8211AE98;
} // Block from 8211AE68h-8211AE98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211AE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AE98);
		  /* 8211AE98h */ case    0:  		/* stfdx FR13, <#[R11 + R10]> */
		/* 8211AE98h case    0:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211AE98h case    0:*/		return 0x8211AE9C;
		  /* 8211AE9Ch */ case    1:  		/* b 8 */
		/* 8211AE9Ch case    1:*/		return 0x8211AEA4;
		/* 8211AE9Ch case    1:*/		return 0x8211AEA0;
	}
	return 0x8211AEA0;
} // Block from 8211AE98h-8211AEA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211AEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AEA0);
		  /* 8211AEA0h */ case    0:  		/* stfdx FR0, <#[R11 + R10]> */
		/* 8211AEA0h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211AEA0h case    0:*/		return 0x8211AEA4;
	}
	return 0x8211AEA4;
} // Block from 8211AEA0h-8211AEA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211AEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AEA4);
		  /* 8211AEA4h */ case    0:  		/* addi R10, R10, 16 */
		/* 8211AEA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211AEA4h case    0:*/		return 0x8211AEA8;
		  /* 8211AEA8h */ case    1:  		/* bc 16, CR0_LT, -44 */
		/* 8211AEA8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211AE7C;  }
		/* 8211AEA8h case    1:*/		return 0x8211AEAC;
		  /* 8211AEACh */ case    2:  		/* b 4288 */
		/* 8211AEACh case    2:*/		return 0x8211BF6C;
		/* 8211AEACh case    2:*/		return 0x8211AEB0;
		  /* 8211AEB0h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8211AEB0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AEB0h case    3:*/		return 0x8211AEB4;
		  /* 8211AEB4h */ case    4:  		/* bc 12, CR6_EQ, 4280 */
		/* 8211AEB4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AEB4h case    4:*/		return 0x8211AEB8;
		  /* 8211AEB8h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211AEB8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AEB8h case    5:*/		return 0x8211AEBC;
		  /* 8211AEBCh */ case    6:  		/* addi R31, R27, 8 */
		/* 8211AEBCh case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211AEBCh case    6:*/		return 0x8211AEC0;
		  /* 8211AEC0h */ case    7:  		/* mr R30, R26 */
		/* 8211AEC0h case    7:*/		regs.R30 = regs.R26;
		/* 8211AEC0h case    7:*/		return 0x8211AEC4;
		  /* 8211AEC4h */ case    8:  		/* subf R29, R27, R11 */
		/* 8211AEC4h case    8:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211AEC4h case    8:*/		return 0x8211AEC8;
		  /* 8211AEC8h */ case    9:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211AEC8h case    9:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211AEC8h case    9:*/		return 0x8211AECC;
		  /* 8211AECCh */ case   10:  		/* bl -566052 */
		/* 8211AECCh case   10:*/		regs.LR = 0x8211AED0; return 0x82090BA8;
		/* 8211AECCh case   10:*/		return 0x8211AED0;
		  /* 8211AED0h */ case   11:  		/* stfd FR1, <#[R31]> */
		/* 8211AED0h case   11:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211AED0h case   11:*/		return 0x8211AED4;
		  /* 8211AED4h */ case   12:  		/* addic. R30, R30, -1 */
		/* 8211AED4h case   12:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211AED4h case   12:*/		return 0x8211AED8;
		  /* 8211AED8h */ case   13:  		/* addi R31, R31, 16 */
		/* 8211AED8h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211AED8h case   13:*/		return 0x8211AEDC;
		  /* 8211AEDCh */ case   14:  		/* bc 4, CR0_EQ, -20 */
		/* 8211AEDCh case   14:*/		if ( !regs.CR[0].eq ) { return 0x8211AEC8;  }
		/* 8211AEDCh case   14:*/		return 0x8211AEE0;
		  /* 8211AEE0h */ case   15:  		/* b 4236 */
		/* 8211AEE0h case   15:*/		return 0x8211BF6C;
		/* 8211AEE0h case   15:*/		return 0x8211AEE4;
		  /* 8211AEE4h */ case   16:  		/* cmplwi CR6, R26, 0 */
		/* 8211AEE4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AEE4h case   16:*/		return 0x8211AEE8;
		  /* 8211AEE8h */ case   17:  		/* bc 12, CR6_EQ, 4228 */
		/* 8211AEE8h case   17:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AEE8h case   17:*/		return 0x8211AEEC;
		  /* 8211AEECh */ case   18:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211AEECh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AEECh case   18:*/		return 0x8211AEF0;
		  /* 8211AEF0h */ case   19:  		/* addi R31, R27, 8 */
		/* 8211AEF0h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211AEF0h case   19:*/		return 0x8211AEF4;
		  /* 8211AEF4h */ case   20:  		/* mr R30, R26 */
		/* 8211AEF4h case   20:*/		regs.R30 = regs.R26;
		/* 8211AEF4h case   20:*/		return 0x8211AEF8;
		  /* 8211AEF8h */ case   21:  		/* subf R29, R27, R11 */
		/* 8211AEF8h case   21:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211AEF8h case   21:*/		return 0x8211AEFC;
		  /* 8211AEFCh */ case   22:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211AEFCh case   22:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211AEFCh case   22:*/		return 0x8211AF00;
		  /* 8211AF00h */ case   23:  		/* bl 1366200 */
		/* 8211AF00h case   23:*/		regs.LR = 0x8211AF04; return 0x822687B8;
		/* 8211AF00h case   23:*/		return 0x8211AF04;
		  /* 8211AF04h */ case   24:  		/* stfd FR1, <#[R31]> */
		/* 8211AF04h case   24:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211AF04h case   24:*/		return 0x8211AF08;
		  /* 8211AF08h */ case   25:  		/* addic. R30, R30, -1 */
		/* 8211AF08h case   25:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211AF08h case   25:*/		return 0x8211AF0C;
		  /* 8211AF0Ch */ case   26:  		/* addi R31, R31, 16 */
		/* 8211AF0Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211AF0Ch case   26:*/		return 0x8211AF10;
		  /* 8211AF10h */ case   27:  		/* bc 4, CR0_EQ, -20 */
		/* 8211AF10h case   27:*/		if ( !regs.CR[0].eq ) { return 0x8211AEFC;  }
		/* 8211AF10h case   27:*/		return 0x8211AF14;
		  /* 8211AF14h */ case   28:  		/* b 4184 */
		/* 8211AF14h case   28:*/		return 0x8211BF6C;
		/* 8211AF14h case   28:*/		return 0x8211AF18;
		  /* 8211AF18h */ case   29:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211AF18h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211AF18h case   29:*/		return 0x8211AF1C;
		  /* 8211AF1Ch */ case   30:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211AF1Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AF1Ch case   30:*/		return 0x8211AF20;
		  /* 8211AF20h */ case   31:  		/* lfd FR0, <#[R11 + 24]> */
		/* 8211AF20h case   31:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000018) );
		/* 8211AF20h case   31:*/		return 0x8211AF24;
		  /* 8211AF24h */ case   32:  		/* lfd FR13, <#[R10 + 40]> */
		/* 8211AF24h case   32:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000028) );
		/* 8211AF24h case   32:*/		return 0x8211AF28;
		  /* 8211AF28h */ case   33:  		/* fmul FR0, FR0, FR13 */
		/* 8211AF28h case   33:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8211AF28h case   33:*/		return 0x8211AF2C;
		  /* 8211AF2Ch */ case   34:  		/* lfd FR13, <#[R10 + 24]> */
		/* 8211AF2Ch case   34:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000018) );
		/* 8211AF2Ch case   34:*/		return 0x8211AF30;
		  /* 8211AF30h */ case   35:  		/* lfd FR12, <#[R11 + 40]> */
		/* 8211AF30h case   35:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000028) );
		/* 8211AF30h case   35:*/		return 0x8211AF34;
		  /* 8211AF34h */ case   36:  		/* fmsub FR0, FR13, FR12, FR0 */
		/* 8211AF34h case   36:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR13,regs.FR12,regs.FR0);
		/* 8211AF34h case   36:*/		return 0x8211AF38;
	}
	return 0x8211AF38;
} // Block from 8211AEA4h-8211AF38h (37 instructions)

//////////////////////////////////////////////////////
// Block at 8211AF38h
// Function '?TypeSize@CParse@D3DXShader@@IAAIPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211AF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211AF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211AF38);
		  /* 8211AF38h */ case    0:  		/* stfd FR0, <#[R27 + 8]> */
		/* 8211AF38h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000008) );
		/* 8211AF38h case    0:*/		return 0x8211AF3C;
		  /* 8211AF3Ch */ case    1:  		/* lfd FR13, <#[R10 + 40]> */
		/* 8211AF3Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000028) );
		/* 8211AF3Ch case    1:*/		return 0x8211AF40;
		  /* 8211AF40h */ case    2:  		/* lfd FR0, <#[R11 + 8]> */
		/* 8211AF40h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000008) );
		/* 8211AF40h case    2:*/		return 0x8211AF44;
		  /* 8211AF44h */ case    3:  		/* lfd FR11, <#[R11 + 40]> */
		/* 8211AF44h case    3:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R11 + 0x00000028) );
		/* 8211AF44h case    3:*/		return 0x8211AF48;
		  /* 8211AF48h */ case    4:  		/* lfd FR12, <#[R10 + 8]> */
		/* 8211AF48h case    4:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000008) );
		/* 8211AF48h case    4:*/		return 0x8211AF4C;
		  /* 8211AF4Ch */ case    5:  		/* fmul FR12, FR12, FR11 */
		/* 8211AF4Ch case    5:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR12,regs.FR11);
		/* 8211AF4Ch case    5:*/		return 0x8211AF50;
		  /* 8211AF50h */ case    6:  		/* fmsub FR0, FR0, FR13, FR12 */
		/* 8211AF50h case    6:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR0,regs.FR13,regs.FR12);
		/* 8211AF50h case    6:*/		return 0x8211AF54;
		  /* 8211AF54h */ case    7:  		/* stfd FR0, <#[R27 + 24]> */
		/* 8211AF54h case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000018) );
		/* 8211AF54h case    7:*/		return 0x8211AF58;
		  /* 8211AF58h */ case    8:  		/* lfd FR0, <#[R11 + 24]> */
		/* 8211AF58h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000018) );
		/* 8211AF58h case    8:*/		return 0x8211AF5C;
		  /* 8211AF5Ch */ case    9:  		/* lfd FR13, <#[R10 + 8]> */
		/* 8211AF5Ch case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000008) );
		/* 8211AF5Ch case    9:*/		return 0x8211AF60;
		  /* 8211AF60h */ case   10:  		/* lfd FR12, <#[R11 + 8]> */
		/* 8211AF60h case   10:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000008) );
		/* 8211AF60h case   10:*/		return 0x8211AF64;
		  /* 8211AF64h */ case   11:  		/* lfd FR11, <#[R10 + 24]> */
		/* 8211AF64h case   11:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R10 + 0x00000018) );
		/* 8211AF64h case   11:*/		return 0x8211AF68;
		  /* 8211AF68h */ case   12:  		/* fmul FR12, FR12, FR11 */
		/* 8211AF68h case   12:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR12,regs.FR11);
		/* 8211AF68h case   12:*/		return 0x8211AF6C;
		  /* 8211AF6Ch */ case   13:  		/* fmsub FR0, FR0, FR13, FR12 */
		/* 8211AF6Ch case   13:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR0,regs.FR13,regs.FR12);
		/* 8211AF6Ch case   13:*/		return 0x8211AF70;
		  /* 8211AF70h */ case   14:  		/* stfd FR0, <#[R27 + 40]> */
		/* 8211AF70h case   14:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000028) );
		/* 8211AF70h case   14:*/		return 0x8211AF74;
		  /* 8211AF74h */ case   15:  		/* b 4088 */
		/* 8211AF74h case   15:*/		return 0x8211BF6C;
		/* 8211AF74h case   15:*/		return 0x8211AF78;
		  /* 8211AF78h */ case   16:  		/* cmplwi CR6, R26, 0 */
		/* 8211AF78h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AF78h case   16:*/		return 0x8211AF7C;
		  /* 8211AF7Ch */ case   17:  		/* bc 12, CR6_EQ, 4080 */
		/* 8211AF7Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AF7Ch case   17:*/		return 0x8211AF80;
		  /* 8211AF80h */ case   18:  		/* lis R10, -32256 */
		/* 8211AF80h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211AF80h case   18:*/		return 0x8211AF84;
		  /* 8211AF84h */ case   19:  		/* mtspr CTR, R26 */
		/* 8211AF84h case   19:*/		regs.CTR = regs.R26;
		/* 8211AF84h case   19:*/		return 0x8211AF88;
		  /* 8211AF88h */ case   20:  		/* addi R11, R27, -8 */
		/* 8211AF88h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFF8);
		/* 8211AF88h case   20:*/		return 0x8211AF8C;
		  /* 8211AF8Ch */ case   21:  		/* lfd FR0, <#[R10 + 1808]> */
		/* 8211AF8Ch case   21:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000710) );
		/* 8211AF8Ch case   21:*/		return 0x8211AF90;
		  /* 8211AF90h */ case   22:  		/* stfdu FR0, <#[R11 + 16]> */
		/* 8211AF90h case   22:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000010) );
		regs.R11 = (uint32)(regs.R11 + 0x00000010);
		/* 8211AF90h case   22:*/		return 0x8211AF94;
		  /* 8211AF94h */ case   23:  		/* bc 16, CR0_LT, -4 */
		/* 8211AF94h case   23:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211AF90;  }
		/* 8211AF94h case   23:*/		return 0x8211AF98;
		  /* 8211AF98h */ case   24:  		/* b 4052 */
		/* 8211AF98h case   24:*/		return 0x8211BF6C;
		/* 8211AF98h case   24:*/		return 0x8211AF9C;
		  /* 8211AF9Ch */ case   25:  		/* cmplwi CR6, R26, 0 */
		/* 8211AF9Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AF9Ch case   25:*/		return 0x8211AFA0;
		  /* 8211AFA0h */ case   26:  		/* bc 12, CR6_EQ, 4044 */
		/* 8211AFA0h case   26:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AFA0h case   26:*/		return 0x8211AFA4;
		  /* 8211AFA4h */ case   27:  		/* lis R10, -32256 */
		/* 8211AFA4h case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211AFA4h case   27:*/		return 0x8211AFA8;
		  /* 8211AFA8h */ case   28:  		/* mtspr CTR, R26 */
		/* 8211AFA8h case   28:*/		regs.CTR = regs.R26;
		/* 8211AFA8h case   28:*/		return 0x8211AFAC;
		  /* 8211AFACh */ case   29:  		/* addi R11, R27, -8 */
		/* 8211AFACh case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFF8);
		/* 8211AFACh case   29:*/		return 0x8211AFB0;
		  /* 8211AFB0h */ case   30:  		/* lfd FR0, <#[R10 + 1808]> */
		/* 8211AFB0h case   30:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000710) );
		/* 8211AFB0h case   30:*/		return 0x8211AFB4;
		  /* 8211AFB4h */ case   31:  		/* stfdu FR0, <#[R11 + 16]> */
		/* 8211AFB4h case   31:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000010) );
		regs.R11 = (uint32)(regs.R11 + 0x00000010);
		/* 8211AFB4h case   31:*/		return 0x8211AFB8;
		  /* 8211AFB8h */ case   32:  		/* bc 16, CR0_LT, -4 */
		/* 8211AFB8h case   32:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211AFB4;  }
		/* 8211AFB8h case   32:*/		return 0x8211AFBC;
		  /* 8211AFBCh */ case   33:  		/* b 4016 */
		/* 8211AFBCh case   33:*/		return 0x8211BF6C;
		/* 8211AFBCh case   33:*/		return 0x8211AFC0;
		  /* 8211AFC0h */ case   34:  		/* cmplwi CR6, R26, 0 */
		/* 8211AFC0h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211AFC0h case   34:*/		return 0x8211AFC4;
		  /* 8211AFC4h */ case   35:  		/* bc 12, CR6_EQ, 4008 */
		/* 8211AFC4h case   35:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211AFC4h case   35:*/		return 0x8211AFC8;
		  /* 8211AFC8h */ case   36:  		/* lis R9, -32255 */
		/* 8211AFC8h case   36:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8211AFC8h case   36:*/		return 0x8211AFCC;
		  /* 8211AFCCh */ case   37:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211AFCCh case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211AFCCh case   37:*/		return 0x8211AFD0;
		  /* 8211AFD0h */ case   38:  		/* addi R11, R27, 8 */
		/* 8211AFD0h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211AFD0h case   38:*/		return 0x8211AFD4;
		  /* 8211AFD4h */ case   39:  		/* mtspr CTR, R26 */
		/* 8211AFD4h case   39:*/		regs.CTR = regs.R26;
		/* 8211AFD4h case   39:*/		return 0x8211AFD8;
		  /* 8211AFD8h */ case   40:  		/* subf R10, R27, R10 */
		/* 8211AFD8h case   40:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211AFD8h case   40:*/		return 0x8211AFDC;
		  /* 8211AFDCh */ case   41:  		/* lfd FR0, <#[R9 + 9048]> */
		/* 8211AFDCh case   41:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00002358) );
		/* 8211AFDCh case   41:*/		return 0x8211AFE0;
		  /* 8211AFE0h */ case   42:  		/* lfdx FR13, <#[R11 + R10]> */
		/* 8211AFE0h case   42:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211AFE0h case   42:*/		return 0x8211AFE4;
		  /* 8211AFE4h */ case   43:  		/* fmul FR13, FR13, FR0 */
		/* 8211AFE4h case   43:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 8211AFE4h case   43:*/		return 0x8211AFE8;
		  /* 8211AFE8h */ case   44:  		/* stfd FR13, <#[R11]> */
		/* 8211AFE8h case   44:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R11 + 0x00000000) );
		/* 8211AFE8h case   44:*/		return 0x8211AFEC;
		  /* 8211AFECh */ case   45:  		/* addi R11, R11, 16 */
		/* 8211AFECh case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211AFECh case   45:*/		return 0x8211AFF0;
		  /* 8211AFF0h */ case   46:  		/* bc 16, CR0_LT, -16 */
		/* 8211AFF0h case   46:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211AFE0;  }
		/* 8211AFF0h case   46:*/		return 0x8211AFF4;
		  /* 8211AFF4h */ case   47:  		/* b 3960 */
		/* 8211AFF4h case   47:*/		return 0x8211BF6C;
		/* 8211AFF4h case   47:*/		return 0x8211AFF8;
		  /* 8211AFF8h */ case   48:  		/* lwz R11, <#[R1 + 96]> */
		/* 8211AFF8h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8211AFF8h case   48:*/		return 0x8211AFFC;
		  /* 8211AFFCh */ case   49:  		/* lwz R11, <#[R11 + 20]> */
		/* 8211AFFCh case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 8211AFFCh case   49:*/		return 0x8211B000;
		  /* 8211B000h */ case   50:  		/* cmplwi CR6, R11, 1 */
		/* 8211B000h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211B000h case   50:*/		return 0x8211B004;
		  /* 8211B004h */ case   51:  		/* bc 12, CR6_EQ, 324 */
		/* 8211B004h case   51:*/		if ( regs.CR[6].eq ) { return 0x8211B148;  }
		/* 8211B004h case   51:*/		return 0x8211B008;
		  /* 8211B008h */ case   52:  		/* cmplwi CR6, R11, 2 */
		/* 8211B008h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8211B008h case   52:*/		return 0x8211B00C;
		  /* 8211B00Ch */ case   53:  		/* bc 12, CR6_EQ, 284 */
		/* 8211B00Ch case   53:*/		if ( regs.CR[6].eq ) { return 0x8211B128;  }
		/* 8211B00Ch case   53:*/		return 0x8211B010;
		  /* 8211B010h */ case   54:  		/* cmplwi CR6, R11, 3 */
		/* 8211B010h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8211B010h case   54:*/		return 0x8211B014;
		  /* 8211B014h */ case   55:  		/* bc 12, CR6_EQ, 196 */
		/* 8211B014h case   55:*/		if ( regs.CR[6].eq ) { return 0x8211B0D8;  }
		/* 8211B014h case   55:*/		return 0x8211B018;
		  /* 8211B018h */ case   56:  		/* cmplwi CR6, R11, 4 */
		/* 8211B018h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8211B018h case   56:*/		return 0x8211B01C;
		  /* 8211B01Ch */ case   57:  		/* bc 4, CR6_EQ, 4016 */
		/* 8211B01Ch case   57:*/		if ( !regs.CR[6].eq ) { return 0x8211BFCC;  }
		/* 8211B01Ch case   57:*/		return 0x8211B020;
	}
	return 0x8211B020;
} // Block from 8211AF38h-8211B020h (58 instructions)

//////////////////////////////////////////////////////
// Block at 8211B020h
// Function '?PrintType@CParse@D3DXShader@@IAAIPADIPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B020);
		  /* 8211B020h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B020h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B020h case    0:*/		return 0x8211B024;
		  /* 8211B024h */ case    1:  		/* lfd FR0, <#[R11 + 184]> */
		/* 8211B024h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000000B8) );
		/* 8211B024h case    1:*/		return 0x8211B028;
		  /* 8211B028h */ case    2:  		/* lfd FR13, <#[R11 + 200]> */
		/* 8211B028h case    2:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x000000C8) );
		/* 8211B028h case    2:*/		return 0x8211B02C;
		  /* 8211B02Ch */ case    3:  		/* fmul FR12, FR13, FR0 */
		/* 8211B02Ch case    3:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR13,regs.FR0);
		/* 8211B02Ch case    3:*/		return 0x8211B030;
		  /* 8211B030h */ case    4:  		/* lfd FR6, <#[R11 + 168]> */
		/* 8211B030h case    4:*/		cpu::mem::load64f( regs, &regs.FR6, (uint32)(regs.R11 + 0x000000A8) );
		/* 8211B030h case    4:*/		return 0x8211B034;
		  /* 8211B034h */ case    5:  		/* lfd FR10, <#[R11 + 232]> */
		/* 8211B034h case    5:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R11 + 0x000000E8) );
		/* 8211B034h case    5:*/		return 0x8211B038;
		  /* 8211B038h */ case    6:  		/* fmul FR4, FR13, FR6 */
		/* 8211B038h case    6:*/		cpu::op::fmul<0>(regs,&regs.FR4,regs.FR13,regs.FR6);
		/* 8211B038h case    6:*/		return 0x8211B03C;
		  /* 8211B03Ch */ case    7:  		/* lfd FR9, <#[R11 + 216]> */
		/* 8211B03Ch case    7:*/		cpu::mem::load64f( regs, &regs.FR9, (uint32)(regs.R11 + 0x000000D8) );
		/* 8211B03Ch case    7:*/		return 0x8211B040;
		  /* 8211B040h */ case    8:  		/* fmul FR8, FR0, FR10 */
		/* 8211B040h case    8:*/		cpu::op::fmul<0>(regs,&regs.FR8,regs.FR0,regs.FR10);
		/* 8211B040h case    8:*/		return 0x8211B044;
		  /* 8211B044h */ case    9:  		/* lfd FR5, <#[R11 + 152]> */
		/* 8211B044h case    9:*/		cpu::mem::load64f( regs, &regs.FR5, (uint32)(regs.R11 + 0x00000098) );
		/* 8211B044h case    9:*/		return 0x8211B048;
		  /* 8211B048h */ case   10:  		/* fmul FR0, FR9, FR0 */
		/* 8211B048h case   10:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR9,regs.FR0);
		/* 8211B048h case   10:*/		return 0x8211B04C;
		  /* 8211B04Ch */ case   11:  		/* lfd FR11, <#[R11 + 248]> */
		/* 8211B04Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R11 + 0x000000F8) );
		/* 8211B04Ch case   11:*/		return 0x8211B050;
		  /* 8211B050h */ case   12:  		/* fmul FR13, FR13, FR5 */
		/* 8211B050h case   12:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR5);
		/* 8211B050h case   12:*/		return 0x8211B054;
		  /* 8211B054h */ case   13:  		/* lfd FR7, <#[R11 + 136]> */
		/* 8211B054h case   13:*/		cpu::mem::load64f( regs, &regs.FR7, (uint32)(regs.R11 + 0x00000088) );
		/* 8211B054h case   13:*/		return 0x8211B058;
		  /* 8211B058h */ case   14:  		/* fmul FR2, FR9, FR6 */
		/* 8211B058h case   14:*/		cpu::op::fmul<0>(regs,&regs.FR2,regs.FR9,regs.FR6);
		/* 8211B058h case   14:*/		return 0x8211B05C;
		  /* 8211B05Ch */ case   15:  		/* lfd FR3, <#[R11 + 104]> */
		/* 8211B05Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR3, (uint32)(regs.R11 + 0x00000068) );
		/* 8211B05Ch case   15:*/		return 0x8211B060;
		  /* 8211B060h */ case   16:  		/* lfd FR31, <#[R11 + 88]> */
		/* 8211B060h case   16:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000058) );
		/* 8211B060h case   16:*/		return 0x8211B064;
		  /* 8211B064h */ case   17:  		/* lfd FR1, <#[R11 + 72]> */
		/* 8211B064h case   17:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000048) );
		/* 8211B064h case   17:*/		return 0x8211B068;
		  /* 8211B068h */ case   18:  		/* lfd FR30, <#[R11 + 120]> */
		/* 8211B068h case   18:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000078) );
		/* 8211B068h case   18:*/		return 0x8211B06C;
		  /* 8211B06Ch */ case   19:  		/* fmsub FR12, FR7, FR11, FR12 */
		/* 8211B06Ch case   19:*/		cpu::op::fmsub<0>(regs,&regs.FR12,regs.FR7,regs.FR11,regs.FR12);
		/* 8211B06Ch case   19:*/		return 0x8211B070;
		  /* 8211B070h */ case   20:  		/* lfd FR29, <#[R11 + 24]> */
		/* 8211B070h case   20:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000018) );
		/* 8211B070h case   20:*/		return 0x8211B074;
		  /* 8211B074h */ case   21:  		/* fmsub FR4, FR7, FR10, FR4 */
		/* 8211B074h case   21:*/		cpu::op::fmsub<0>(regs,&regs.FR4,regs.FR7,regs.FR10,regs.FR4);
		/* 8211B074h case   21:*/		return 0x8211B078;
		  /* 8211B078h */ case   22:  		/* lfd FR28, <#[R11 + 8]> */
		/* 8211B078h case   22:*/		cpu::mem::load64f( regs, &regs.FR28, (uint32)(regs.R11 + 0x00000008) );
		/* 8211B078h case   22:*/		return 0x8211B07C;
		  /* 8211B07Ch */ case   23:  		/* fmsub FR8, FR6, FR11, FR8 */
		/* 8211B07Ch case   23:*/		cpu::op::fmsub<0>(regs,&regs.FR8,regs.FR6,regs.FR11,regs.FR8);
		/* 8211B07Ch case   23:*/		return 0x8211B080;
		  /* 8211B080h */ case   24:  		/* lfd FR6, <#[R11 + 40]> */
		/* 8211B080h case   24:*/		cpu::mem::load64f( regs, &regs.FR6, (uint32)(regs.R11 + 0x00000028) );
		/* 8211B080h case   24:*/		return 0x8211B084;
		  /* 8211B084h */ case   25:  		/* fmsub FR0, FR5, FR11, FR0 */
		/* 8211B084h case   25:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR5,regs.FR11,regs.FR0);
		/* 8211B084h case   25:*/		return 0x8211B088;
		  /* 8211B088h */ case   26:  		/* lfd FR11, <#[R11 + 56]> */
		/* 8211B088h case   26:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R11 + 0x00000038) );
		/* 8211B088h case   26:*/		return 0x8211B08C;
		  /* 8211B08Ch */ case   27:  		/* fmsub FR13, FR7, FR9, FR13 */
		/* 8211B08Ch case   27:*/		cpu::op::fmsub<0>(regs,&regs.FR13,regs.FR7,regs.FR9,regs.FR13);
		/* 8211B08Ch case   27:*/		return 0x8211B090;
		  /* 8211B090h */ case   28:  		/* fmsub FR10, FR5, FR10, FR2 */
		/* 8211B090h case   28:*/		cpu::op::fmsub<0>(regs,&regs.FR10,regs.FR5,regs.FR10,regs.FR2);
		/* 8211B090h case   28:*/		return 0x8211B094;
		  /* 8211B094h */ case   29:  		/* fmul FR9, FR12, FR3 */
		/* 8211B094h case   29:*/		cpu::op::fmul<0>(regs,&regs.FR9,regs.FR12,regs.FR3);
		/* 8211B094h case   29:*/		return 0x8211B098;
		  /* 8211B098h */ case   30:  		/* fmul FR12, FR12, FR31 */
		/* 8211B098h case   30:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR12,regs.FR31);
		/* 8211B098h case   30:*/		return 0x8211B09C;
		  /* 8211B09Ch */ case   31:  		/* fmul FR5, FR4, FR31 */
		/* 8211B09Ch case   31:*/		cpu::op::fmul<0>(regs,&regs.FR5,regs.FR4,regs.FR31);
		/* 8211B09Ch case   31:*/		return 0x8211B0A0;
		  /* 8211B0A0h */ case   32:  		/* fmul FR7, FR3, FR0 */
		/* 8211B0A0h case   32:*/		cpu::op::fmul<0>(regs,&regs.FR7,regs.FR3,regs.FR0);
		/* 8211B0A0h case   32:*/		return 0x8211B0A4;
		  /* 8211B0A4h */ case   33:  		/* fmsub FR9, FR1, FR8, FR9 */
		/* 8211B0A4h case   33:*/		cpu::op::fmsub<0>(regs,&regs.FR9,regs.FR1,regs.FR8,regs.FR9);
		/* 8211B0A4h case   33:*/		return 0x8211B0A8;
		  /* 8211B0A8h */ case   34:  		/* fmsub FR0, FR1, FR0, FR12 */
		/* 8211B0A8h case   34:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR1,regs.FR0,regs.FR12);
		/* 8211B0A8h case   34:*/		return 0x8211B0AC;
		  /* 8211B0ACh */ case   35:  		/* fmsub FR12, FR31, FR8, FR7 */
		/* 8211B0ACh case   35:*/		cpu::op::fmsub<0>(regs,&regs.FR12,regs.FR31,regs.FR8,regs.FR7);
		/* 8211B0ACh case   35:*/		return 0x8211B0B0;
		  /* 8211B0B0h */ case   36:  		/* fmsub FR8, FR1, FR10, FR5 */
		/* 8211B0B0h case   36:*/		cpu::op::fmsub<0>(regs,&regs.FR8,regs.FR1,regs.FR10,regs.FR5);
		/* 8211B0B0h case   36:*/		return 0x8211B0B4;
		  /* 8211B0B4h */ case   37:  		/* fmadd FR9, FR4, FR30, FR9 */
		/* 8211B0B4h case   37:*/		cpu::op::fmadd<0>(regs,&regs.FR9,regs.FR4,regs.FR30,regs.FR9);
		/* 8211B0B4h case   37:*/		return 0x8211B0B8;
		  /* 8211B0B8h */ case   38:  		/* fmadd FR0, FR13, FR30, FR0 */
		/* 8211B0B8h case   38:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR13,regs.FR30,regs.FR0);
		/* 8211B0B8h case   38:*/		return 0x8211B0BC;
		  /* 8211B0BCh */ case   39:  		/* fmadd FR12, FR30, FR10, FR12 */
		/* 8211B0BCh case   39:*/		cpu::op::fmadd<0>(regs,&regs.FR12,regs.FR30,regs.FR10,regs.FR12);
		/* 8211B0BCh case   39:*/		return 0x8211B0C0;
		  /* 8211B0C0h */ case   40:  		/* fmadd FR13, FR13, FR3, FR8 */
		/* 8211B0C0h case   40:*/		cpu::op::fmadd<0>(regs,&regs.FR13,regs.FR13,regs.FR3,regs.FR8);
		/* 8211B0C0h case   40:*/		return 0x8211B0C4;
		  /* 8211B0C4h */ case   41:  		/* fmul FR10, FR9, FR29 */
		/* 8211B0C4h case   41:*/		cpu::op::fmul<0>(regs,&regs.FR10,regs.FR9,regs.FR29);
		/* 8211B0C4h case   41:*/		return 0x8211B0C8;
		  /* 8211B0C8h */ case   42:  		/* fmsub FR12, FR12, FR28, FR10 */
		/* 8211B0C8h case   42:*/		cpu::op::fmsub<0>(regs,&regs.FR12,regs.FR12,regs.FR28,regs.FR10);
		/* 8211B0C8h case   42:*/		return 0x8211B0CC;
		  /* 8211B0CCh */ case   43:  		/* fmadd FR0, FR0, FR6, FR12 */
		/* 8211B0CCh case   43:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR0,regs.FR6,regs.FR12);
		/* 8211B0CCh case   43:*/		return 0x8211B0D0;
		  /* 8211B0D0h */ case   44:  		/* fnmsub FR0, FR13, FR11, FR0 */
		/* 8211B0D0h case   44:*/		cpu::op::fnmsub<0>(regs,&regs.FR0,regs.FR13,regs.FR11,regs.FR0);
		/* 8211B0D0h case   44:*/		return 0x8211B0D4;
		  /* 8211B0D4h */ case   45:  		/* b -904 */
		/* 8211B0D4h case   45:*/		return 0x8211AD4C;
		/* 8211B0D4h case   45:*/		return 0x8211B0D8;
	}
	return 0x8211B0D8;
} // Block from 8211B020h-8211B0D8h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8211B0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B0D8);
		  /* 8211B0D8h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B0D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B0D8h case    0:*/		return 0x8211B0DC;
		  /* 8211B0DCh */ case    1:  		/* lfd FR0, <#[R11 + 88]> */
		/* 8211B0DCh case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000058) );
		/* 8211B0DCh case    1:*/		return 0x8211B0E0;
		  /* 8211B0E0h */ case    2:  		/* lfd FR13, <#[R11 + 104]> */
		/* 8211B0E0h case    2:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000068) );
		/* 8211B0E0h case    2:*/		return 0x8211B0E4;
		  /* 8211B0E4h */ case    3:  		/* fmul FR12, FR13, FR0 */
		/* 8211B0E4h case    3:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR13,regs.FR0);
		/* 8211B0E4h case    3:*/		return 0x8211B0E8;
		  /* 8211B0E8h */ case    4:  		/* lfd FR11, <#[R11 + 136]> */
		/* 8211B0E8h case    4:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R11 + 0x00000088) );
		/* 8211B0E8h case    4:*/		return 0x8211B0EC;
		  /* 8211B0ECh */ case    5:  		/* lfd FR10, <#[R11 + 120]> */
		/* 8211B0ECh case    5:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R11 + 0x00000078) );
		/* 8211B0ECh case    5:*/		return 0x8211B0F0;
		  /* 8211B0F0h */ case    6:  		/* lfd FR9, <#[R11 + 56]> */
		/* 8211B0F0h case    6:*/		cpu::mem::load64f( regs, &regs.FR9, (uint32)(regs.R11 + 0x00000038) );
		/* 8211B0F0h case    6:*/		return 0x8211B0F4;
		  /* 8211B0F4h */ case    7:  		/* fmul FR0, FR0, FR10 */
		/* 8211B0F4h case    7:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR10);
		/* 8211B0F4h case    7:*/		return 0x8211B0F8;
		  /* 8211B0F8h */ case    8:  		/* lfd FR8, <#[R11 + 72]> */
		/* 8211B0F8h case    8:*/		cpu::mem::load64f( regs, &regs.FR8, (uint32)(regs.R11 + 0x00000048) );
		/* 8211B0F8h case    8:*/		return 0x8211B0FC;
		  /* 8211B0FCh */ case    9:  		/* lfd FR7, <#[R11 + 24]> */
		/* 8211B0FCh case    9:*/		cpu::mem::load64f( regs, &regs.FR7, (uint32)(regs.R11 + 0x00000018) );
		/* 8211B0FCh case    9:*/		return 0x8211B100;
		  /* 8211B100h */ case   10:  		/* fmul FR13, FR13, FR8 */
		/* 8211B100h case   10:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR8);
		/* 8211B100h case   10:*/		return 0x8211B104;
		  /* 8211B104h */ case   11:  		/* lfd FR6, <#[R11 + 8]> */
		/* 8211B104h case   11:*/		cpu::mem::load64f( regs, &regs.FR6, (uint32)(regs.R11 + 0x00000008) );
		/* 8211B104h case   11:*/		return 0x8211B108;
		  /* 8211B108h */ case   12:  		/* lfd FR5, <#[R11 + 40]> */
		/* 8211B108h case   12:*/		cpu::mem::load64f( regs, &regs.FR5, (uint32)(regs.R11 + 0x00000028) );
		/* 8211B108h case   12:*/		return 0x8211B10C;
		  /* 8211B10Ch */ case   13:  		/* fmsub FR12, FR9, FR11, FR12 */
		/* 8211B10Ch case   13:*/		cpu::op::fmsub<0>(regs,&regs.FR12,regs.FR9,regs.FR11,regs.FR12);
		/* 8211B10Ch case   13:*/		return 0x8211B110;
		  /* 8211B110h */ case   14:  		/* fmsub FR0, FR8, FR11, FR0 */
		/* 8211B110h case   14:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR8,regs.FR11,regs.FR0);
		/* 8211B110h case   14:*/		return 0x8211B114;
		  /* 8211B114h */ case   15:  		/* fmsub FR13, FR9, FR10, FR13 */
		/* 8211B114h case   15:*/		cpu::op::fmsub<0>(regs,&regs.FR13,regs.FR9,regs.FR10,regs.FR13);
		/* 8211B114h case   15:*/		return 0x8211B118;
		  /* 8211B118h */ case   16:  		/* fmul FR12, FR12, FR7 */
		/* 8211B118h case   16:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR12,regs.FR7);
		/* 8211B118h case   16:*/		return 0x8211B11C;
		  /* 8211B11Ch */ case   17:  		/* fmsub FR0, FR0, FR6, FR12 */
		/* 8211B11Ch case   17:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR0,regs.FR6,regs.FR12);
		/* 8211B11Ch case   17:*/		return 0x8211B120;
		  /* 8211B120h */ case   18:  		/* fmadd FR0, FR13, FR5, FR0 */
		/* 8211B120h case   18:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR13,regs.FR5,regs.FR0);
		/* 8211B120h case   18:*/		return 0x8211B124;
		  /* 8211B124h */ case   19:  		/* b -984 */
		/* 8211B124h case   19:*/		return 0x8211AD4C;
		/* 8211B124h case   19:*/		return 0x8211B128;
	}
	return 0x8211B128;
} // Block from 8211B0D8h-8211B128h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211B128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B128);
		  /* 8211B128h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B128h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B128h case    0:*/		return 0x8211B12C;
		  /* 8211B12Ch */ case    1:  		/* lfd FR13, <#[R11 + 24]> */
		/* 8211B12Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000018) );
		/* 8211B12Ch case    1:*/		return 0x8211B130;
		  /* 8211B130h */ case    2:  		/* lfd FR0, <#[R11 + 40]> */
		/* 8211B130h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000028) );
		/* 8211B130h case    2:*/		return 0x8211B134;
		  /* 8211B134h */ case    3:  		/* fmul FR0, FR0, FR13 */
		/* 8211B134h case    3:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8211B134h case    3:*/		return 0x8211B138;
		  /* 8211B138h */ case    4:  		/* lfd FR13, <#[R11 + 56]> */
		/* 8211B138h case    4:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000038) );
		/* 8211B138h case    4:*/		return 0x8211B13C;
		  /* 8211B13Ch */ case    5:  		/* lfd FR12, <#[R11 + 8]> */
		/* 8211B13Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000008) );
		/* 8211B13Ch case    5:*/		return 0x8211B140;
		  /* 8211B140h */ case    6:  		/* fmsub FR0, FR13, FR12, FR0 */
		/* 8211B140h case    6:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR13,regs.FR12,regs.FR0);
		/* 8211B140h case    6:*/		return 0x8211B144;
		  /* 8211B144h */ case    7:  		/* b -1016 */
		/* 8211B144h case    7:*/		return 0x8211AD4C;
		/* 8211B144h case    7:*/		return 0x8211B148;
	}
	return 0x8211B148;
} // Block from 8211B128h-8211B148h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211B148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B148);
		  /* 8211B148h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B148h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B148h case    0:*/		return 0x8211B14C;
		  /* 8211B14Ch */ case    1:  		/* lfd FR0, <#[R11 + 8]> */
		/* 8211B14Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000008) );
		/* 8211B14Ch case    1:*/		return 0x8211B150;
		  /* 8211B150h */ case    2:  		/* b -1028 */
		/* 8211B150h case    2:*/		return 0x8211AD4C;
		/* 8211B150h case    2:*/		return 0x8211B154;
		  /* 8211B154h */ case    3:  		/* lis R11, -32256 */
		/* 8211B154h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B154h case    3:*/		return 0x8211B158;
		  /* 8211B158h */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8211B158h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B158h case    4:*/		return 0x8211B15C;
		  /* 8211B15Ch */ case    5:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 8211B15Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B15Ch case    5:*/		return 0x8211B160;
		  /* 8211B160h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 8211B160h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211B190;  }
		/* 8211B160h case    6:*/		return 0x8211B164;
		  /* 8211B164h */ case    7:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211B164h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B164h case    7:*/		return 0x8211B168;
		  /* 8211B168h */ case    8:  		/* mtspr CTR, R26 */
		/* 8211B168h case    8:*/		regs.CTR = regs.R26;
		/* 8211B168h case    8:*/		return 0x8211B16C;
		  /* 8211B16Ch */ case    9:  		/* lwz R9, <#[R1 + 80]> */
		/* 8211B16Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B16Ch case    9:*/		return 0x8211B170;
		  /* 8211B170h */ case   10:  		/* addi R11, R10, 8 */
		/* 8211B170h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8211B170h case   10:*/		return 0x8211B174;
		  /* 8211B174h */ case   11:  		/* subf R10, R10, R9 */
		/* 8211B174h case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8211B174h case   11:*/		return 0x8211B178;
		  /* 8211B178h */ case   12:  		/* lfdx FR13, <#[R10 + R11]> */
		/* 8211B178h case   12:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211B178h case   12:*/		return 0x8211B17C;
		  /* 8211B17Ch */ case   13:  		/* lfd FR12, <#[R11]> */
		/* 8211B17Ch case   13:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B17Ch case   13:*/		return 0x8211B180;
		  /* 8211B180h */ case   14:  		/* addi R11, R11, 16 */
		/* 8211B180h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B180h case   14:*/		return 0x8211B184;
		  /* 8211B184h */ case   15:  		/* fsub FR13, FR13, FR12 */
		/* 8211B184h case   15:*/		cpu::op::fsub<0>(regs,&regs.FR13,regs.FR13,regs.FR12);
		/* 8211B184h case   15:*/		return 0x8211B188;
		  /* 8211B188h */ case   16:  		/* fmadd FR0, FR13, FR13, FR0 */
		/* 8211B188h case   16:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR13,regs.FR13,regs.FR0);
		/* 8211B188h case   16:*/		return 0x8211B18C;
		  /* 8211B18Ch */ case   17:  		/* bc 16, CR0_LT, -20 */
		/* 8211B18Ch case   17:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B178;  }
		/* 8211B18Ch case   17:*/		return 0x8211B190;
	}
	return 0x8211B190;
} // Block from 8211B148h-8211B190h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211B190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B190);
		  /* 8211B190h */ case    0:  		/* fsqrt FR0, FR0 */
		/* 8211B190h case    0:*/		cpu::op::fsqrt<0>(regs,&regs.FR0,regs.FR0);
		/* 8211B190h case    0:*/		return 0x8211B194;
		  /* 8211B194h */ case    1:  		/* b -1096 */
		/* 8211B194h case    1:*/		return 0x8211AD4C;
		/* 8211B194h case    1:*/		return 0x8211B198;
		  /* 8211B198h */ case    2:  		/* lis R11, -32256 */
		/* 8211B198h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B198h case    2:*/		return 0x8211B19C;
		  /* 8211B19Ch */ case    3:  		/* lwz R9, <#[R1 + 112]> */
		/* 8211B19Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 8211B19Ch case    3:*/		return 0x8211B1A0;
		  /* 8211B1A0h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 8211B1A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211B1A0h case    4:*/		return 0x8211B1A4;
		  /* 8211B1A4h */ case    5:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 8211B1A4h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B1A4h case    5:*/		return 0x8211B1A8;
		  /* 8211B1A8h */ case    6:  		/* stfd FR0, <#[R27 + 8]> */
		/* 8211B1A8h case    6:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000008) );
		/* 8211B1A8h case    6:*/		return 0x8211B1AC;
		  /* 8211B1ACh */ case    7:  		/* bc 12, CR6_EQ, 3520 */
		/* 8211B1ACh case    7:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B1ACh case    7:*/		return 0x8211B1B0;
		  /* 8211B1B0h */ case    8:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B1B0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B1B0h case    8:*/		return 0x8211B1B4;
		  /* 8211B1B4h */ case    9:  		/* mtspr CTR, R9 */
		/* 8211B1B4h case    9:*/		regs.CTR = regs.R9;
		/* 8211B1B4h case    9:*/		return 0x8211B1B8;
		  /* 8211B1B8h */ case   10:  		/* lwz R9, <#[R1 + 84]> */
		/* 8211B1B8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B1B8h case   10:*/		return 0x8211B1BC;
		  /* 8211B1BCh */ case   11:  		/* addi R11, R10, 8 */
		/* 8211B1BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8211B1BCh case   11:*/		return 0x8211B1C0;
		  /* 8211B1C0h */ case   12:  		/* subf R10, R10, R9 */
		/* 8211B1C0h case   12:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8211B1C0h case   12:*/		return 0x8211B1C4;
		  /* 8211B1C4h */ case   13:  		/* lfdx FR0, <#[R10 + R11]> */
		/* 8211B1C4h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211B1C4h case   13:*/		return 0x8211B1C8;
		  /* 8211B1C8h */ case   14:  		/* lfd FR13, <#[R11]> */
		/* 8211B1C8h case   14:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B1C8h case   14:*/		return 0x8211B1CC;
		  /* 8211B1CCh */ case   15:  		/* addi R11, R11, 16 */
		/* 8211B1CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B1CCh case   15:*/		return 0x8211B1D0;
		  /* 8211B1D0h */ case   16:  		/* lfd FR12, <#[R27 + 8]> */
		/* 8211B1D0h case   16:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R27 + 0x00000008) );
		/* 8211B1D0h case   16:*/		return 0x8211B1D4;
		  /* 8211B1D4h */ case   17:  		/* fmadd FR0, FR0, FR13, FR12 */
		/* 8211B1D4h case   17:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR0,regs.FR13,regs.FR12);
		/* 8211B1D4h case   17:*/		return 0x8211B1D8;
		  /* 8211B1D8h */ case   18:  		/* stfd FR0, <#[R27 + 8]> */
		/* 8211B1D8h case   18:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000008) );
		/* 8211B1D8h case   18:*/		return 0x8211B1DC;
		  /* 8211B1DCh */ case   19:  		/* bc 16, CR0_LT, -24 */
		/* 8211B1DCh case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B1C4;  }
		/* 8211B1DCh case   19:*/		return 0x8211B1E0;
		  /* 8211B1E0h */ case   20:  		/* b 3468 */
		/* 8211B1E0h case   20:*/		return 0x8211BF6C;
		/* 8211B1E0h case   20:*/		return 0x8211B1E4;
		  /* 8211B1E4h */ case   21:  		/* lis R9, -32256 */
		/* 8211B1E4h case   21:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8211B1E4h case   21:*/		return 0x8211B1E8;
		  /* 8211B1E8h */ case   22:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211B1E8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B1E8h case   22:*/		return 0x8211B1EC;
		  /* 8211B1ECh */ case   23:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B1ECh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B1ECh case   23:*/		return 0x8211B1F0;
		  /* 8211B1F0h */ case   24:  		/* lfd FR0, <#[R9 + 1848]> */
		/* 8211B1F0h case   24:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000738) );
		/* 8211B1F0h case   24:*/		return 0x8211B1F4;
		  /* 8211B1F4h */ case   25:  		/* stfd FR0, <#[R27 + 8]> */
		/* 8211B1F4h case   25:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000008) );
		/* 8211B1F4h case   25:*/		return 0x8211B1F8;
		  /* 8211B1F8h */ case   26:  		/* lfd FR0, <#[R11 + 24]> */
		/* 8211B1F8h case   26:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000018) );
		/* 8211B1F8h case   26:*/		return 0x8211B1FC;
		  /* 8211B1FCh */ case   27:  		/* lfd FR13, <#[R10 + 24]> */
		/* 8211B1FCh case   27:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000018) );
		/* 8211B1FCh case   27:*/		return 0x8211B200;
		  /* 8211B200h */ case   28:  		/* fmul FR0, FR0, FR13 */
		/* 8211B200h case   28:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8211B200h case   28:*/		return 0x8211B204;
		  /* 8211B204h */ case   29:  		/* stfd FR0, <#[R27 + 24]> */
		/* 8211B204h case   29:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000018) );
		/* 8211B204h case   29:*/		return 0x8211B208;
		  /* 8211B208h */ case   30:  		/* lfd FR0, <#[R10 + 40]> */
		/* 8211B208h case   30:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000028) );
		/* 8211B208h case   30:*/		return 0x8211B20C;
		  /* 8211B20Ch */ case   31:  		/* stfd FR0, <#[R27 + 40]> */
		/* 8211B20Ch case   31:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000028) );
		/* 8211B20Ch case   31:*/		return 0x8211B210;
		  /* 8211B210h */ case   32:  		/* lfd FR0, <#[R11 + 56]> */
		/* 8211B210h case   32:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000038) );
		/* 8211B210h case   32:*/		return 0x8211B214;
		  /* 8211B214h */ case   33:  		/* b 3412 */
		/* 8211B214h case   33:*/		return 0x8211BF68;
		/* 8211B214h case   33:*/		return 0x8211B218;
		  /* 8211B218h */ case   34:  		/* cmplwi CR6, R26, 0 */
		/* 8211B218h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B218h case   34:*/		return 0x8211B21C;
		  /* 8211B21Ch */ case   35:  		/* bc 12, CR6_EQ, 3408 */
		/* 8211B21Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B21Ch case   35:*/		return 0x8211B220;
		  /* 8211B220h */ case   36:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B220h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B220h case   36:*/		return 0x8211B224;
		  /* 8211B224h */ case   37:  		/* addi R31, R27, 8 */
		/* 8211B224h case   37:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211B224h case   37:*/		return 0x8211B228;
		  /* 8211B228h */ case   38:  		/* mr R30, R26 */
		/* 8211B228h case   38:*/		regs.R30 = regs.R26;
		/* 8211B228h case   38:*/		return 0x8211B22C;
		  /* 8211B22Ch */ case   39:  		/* subf R29, R27, R11 */
		/* 8211B22Ch case   39:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211B22Ch case   39:*/		return 0x8211B230;
		  /* 8211B230h */ case   40:  		/* lfdx FR1, <#[R29 + R31]> */
		/* 8211B230h case   40:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 8211B230h case   40:*/		return 0x8211B234;
		  /* 8211B234h */ case   41:  		/* bl 1366228 */
		/* 8211B234h case   41:*/		regs.LR = 0x8211B238; return 0x82268B08;
		/* 8211B234h case   41:*/		return 0x8211B238;
		  /* 8211B238h */ case   42:  		/* stfd FR1, <#[R31]> */
		/* 8211B238h case   42:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B238h case   42:*/		return 0x8211B23C;
		  /* 8211B23Ch */ case   43:  		/* addic. R30, R30, -1 */
		/* 8211B23Ch case   43:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B23Ch case   43:*/		return 0x8211B240;
		  /* 8211B240h */ case   44:  		/* addi R31, R31, 16 */
		/* 8211B240h case   44:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B240h case   44:*/		return 0x8211B244;
		  /* 8211B244h */ case   45:  		/* bc 4, CR0_EQ, -20 */
		/* 8211B244h case   45:*/		if ( !regs.CR[0].eq ) { return 0x8211B230;  }
		/* 8211B244h case   45:*/		return 0x8211B248;
		  /* 8211B248h */ case   46:  		/* b 3364 */
		/* 8211B248h case   46:*/		return 0x8211BF6C;
		/* 8211B248h case   46:*/		return 0x8211B24C;
		  /* 8211B24Ch */ case   47:  		/* cmplwi CR6, R26, 0 */
		/* 8211B24Ch case   47:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B24Ch case   47:*/		return 0x8211B250;
		  /* 8211B250h */ case   48:  		/* bc 12, CR6_EQ, 3356 */
		/* 8211B250h case   48:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B250h case   48:*/		return 0x8211B254;
		  /* 8211B254h */ case   49:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B254h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B254h case   49:*/		return 0x8211B258;
		  /* 8211B258h */ case   50:  		/* addi R31, R27, 8 */
		/* 8211B258h case   50:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211B258h case   50:*/		return 0x8211B25C;
		  /* 8211B25Ch */ case   51:  		/* mr R30, R26 */
		/* 8211B25Ch case   51:*/		regs.R30 = regs.R26;
		/* 8211B25Ch case   51:*/		return 0x8211B260;
		  /* 8211B260h */ case   52:  		/* subf R29, R27, R11 */
		/* 8211B260h case   52:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211B260h case   52:*/		return 0x8211B264;
		  /* 8211B264h */ case   53:  		/* lis R11, -32255 */
		/* 8211B264h case   53:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211B264h case   53:*/		return 0x8211B268;
		  /* 8211B268h */ case   54:  		/* lfd FR31, <#[R11 - 24504]> */
		/* 8211B268h case   54:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 8211B268h case   54:*/		return 0x8211B26C;
		  /* 8211B26Ch */ case   55:  		/* lfdx FR2, <#[R29 + R31]> */
		/* 8211B26Ch case   55:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 8211B26Ch case   55:*/		return 0x8211B270;
		  /* 8211B270h */ case   56:  		/* fmr FR1, FR31 */
		/* 8211B270h case   56:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8211B270h case   56:*/		return 0x8211B274;
		  /* 8211B274h */ case   57:  		/* bl -560316 */
		/* 8211B274h case   57:*/		regs.LR = 0x8211B278; return 0x820925B8;
		/* 8211B274h case   57:*/		return 0x8211B278;
		  /* 8211B278h */ case   58:  		/* stfd FR1, <#[R31]> */
		/* 8211B278h case   58:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B278h case   58:*/		return 0x8211B27C;
		  /* 8211B27Ch */ case   59:  		/* addic. R30, R30, -1 */
		/* 8211B27Ch case   59:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B27Ch case   59:*/		return 0x8211B280;
		  /* 8211B280h */ case   60:  		/* addi R31, R31, 16 */
		/* 8211B280h case   60:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B280h case   60:*/		return 0x8211B284;
		  /* 8211B284h */ case   61:  		/* bc 4, CR0_EQ, -24 */
		/* 8211B284h case   61:*/		if ( !regs.CR[0].eq ) { return 0x8211B26C;  }
		/* 8211B284h case   61:*/		return 0x8211B288;
		  /* 8211B288h */ case   62:  		/* b 3300 */
		/* 8211B288h case   62:*/		return 0x8211BF6C;
		/* 8211B288h case   62:*/		return 0x8211B28C;
		  /* 8211B28Ch */ case   63:  		/* lis R11, -32256 */
		/* 8211B28Ch case   63:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B28Ch case   63:*/		return 0x8211B290;
		  /* 8211B290h */ case   64:  		/* cmplwi CR6, R26, 0 */
		/* 8211B290h case   64:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B290h case   64:*/		return 0x8211B294;
		  /* 8211B294h */ case   65:  		/* lfd FR12, <#[R11 + 1808]> */
		/* 8211B294h case   65:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B294h case   65:*/		return 0x8211B298;
		  /* 8211B298h */ case   66:  		/* fmr FR13, FR12 */
		/* 8211B298h case   66:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR12);
		/* 8211B298h case   66:*/		return 0x8211B29C;
		  /* 8211B29Ch */ case   67:  		/* bc 12, CR6_EQ, 3280 */
		/* 8211B29Ch case   67:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B29Ch case   67:*/		return 0x8211B2A0;
		  /* 8211B2A0h */ case   68:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211B2A0h case   68:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B2A0h case   68:*/		return 0x8211B2A4;
		  /* 8211B2A4h */ case   69:  		/* mtspr CTR, R26 */
		/* 8211B2A4h case   69:*/		regs.CTR = regs.R26;
		/* 8211B2A4h case   69:*/		return 0x8211B2A8;
		  /* 8211B2A8h */ case   70:  		/* lwz R9, <#[R1 + 88]> */
		/* 8211B2A8h case   70:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8211B2A8h case   70:*/		return 0x8211B2AC;
		  /* 8211B2ACh */ case   71:  		/* addi R11, R10, 8 */
		/* 8211B2ACh case   71:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8211B2ACh case   71:*/		return 0x8211B2B0;
		  /* 8211B2B0h */ case   72:  		/* subf R10, R10, R9 */
		/* 8211B2B0h case   72:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8211B2B0h case   72:*/		return 0x8211B2B4;
		  /* 8211B2B4h */ case   73:  		/* lfdx FR0, <#[R10 + R11]> */
		/* 8211B2B4h case   73:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211B2B4h case   73:*/		return 0x8211B2B8;
		  /* 8211B2B8h */ case   74:  		/* lfd FR11, <#[R11]> */
		/* 8211B2B8h case   74:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B2B8h case   74:*/		return 0x8211B2BC;
		  /* 8211B2BCh */ case   75:  		/* addi R11, R11, 16 */
		/* 8211B2BCh case   75:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B2BCh case   75:*/		return 0x8211B2C0;
		  /* 8211B2C0h */ case   76:  		/* fmadd FR13, FR0, FR11, FR13 */
		/* 8211B2C0h case   76:*/		cpu::op::fmadd<0>(regs,&regs.FR13,regs.FR0,regs.FR11,regs.FR13);
		/* 8211B2C0h case   76:*/		return 0x8211B2C4;
		  /* 8211B2C4h */ case   77:  		/* bc 16, CR0_LT, -16 */
		/* 8211B2C4h case   77:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B2B4;  }
		/* 8211B2C4h case   77:*/		return 0x8211B2C8;
		  /* 8211B2C8h */ case   78:  		/* cmplwi CR6, R26, 0 */
		/* 8211B2C8h case   78:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B2C8h case   78:*/		return 0x8211B2CC;
		  /* 8211B2CCh */ case   79:  		/* bc 12, CR6_EQ, 3232 */
		/* 8211B2CCh case   79:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B2CCh case   79:*/		return 0x8211B2D0;
		  /* 8211B2D0h */ case   80:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B2D0h case   80:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B2D0h case   80:*/		return 0x8211B2D4;
		  /* 8211B2D4h */ case   81:  		/* mtspr CTR, R26 */
		/* 8211B2D4h case   81:*/		regs.CTR = regs.R26;
		/* 8211B2D4h case   81:*/		return 0x8211B2D8;
		  /* 8211B2D8h */ case   82:  		/* addi R11, R10, 8 */
		/* 8211B2D8h case   82:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8211B2D8h case   82:*/		return 0x8211B2DC;
		  /* 8211B2DCh */ case   83:  		/* subf R10, R10, R27 */
		/* 8211B2DCh case   83:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 8211B2DCh case   83:*/		return 0x8211B2E0;
		  /* 8211B2E0h */ case   84:  		/* lfd FR0, <#[R11]> */
		/* 8211B2E0h case   84:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B2E0h case   84:*/		return 0x8211B2E4;
		  /* 8211B2E4h */ case   85:  		/* fcmpu CR6, FR13, FR12 */
		/* 8211B2E4h case   85:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR12);
		/* 8211B2E4h case   85:*/		return 0x8211B2E8;
		  /* 8211B2E8h */ case   86:  		/* bc 12, CR6_LT, 8 */
		/* 8211B2E8h case   86:*/		if ( regs.CR[6].lt ) { return 0x8211B2F0;  }
		/* 8211B2E8h case   86:*/		return 0x8211B2EC;
		  /* 8211B2ECh */ case   87:  		/* fneg FR0, FR0 */
		/* 8211B2ECh case   87:*/		cpu::op::fneg<0>(regs,&regs.FR0,regs.FR0);
		/* 8211B2ECh case   87:*/		return 0x8211B2F0;
	}
	return 0x8211B2F0;
} // Block from 8211B190h-8211B2F0h (88 instructions)

//////////////////////////////////////////////////////
// Block at 8211B2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B2F0);
		  /* 8211B2F0h */ case    0:  		/* stfdx FR0, <#[R10 + R11]> */
		/* 8211B2F0h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211B2F0h case    0:*/		return 0x8211B2F4;
		  /* 8211B2F4h */ case    1:  		/* addi R11, R11, 16 */
		/* 8211B2F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B2F4h case    1:*/		return 0x8211B2F8;
		  /* 8211B2F8h */ case    2:  		/* bc 16, CR0_LT, -24 */
		/* 8211B2F8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B2E0;  }
		/* 8211B2F8h case    2:*/		return 0x8211B2FC;
		  /* 8211B2FCh */ case    3:  		/* b 3184 */
		/* 8211B2FCh case    3:*/		return 0x8211BF6C;
		/* 8211B2FCh case    3:*/		return 0x8211B300;
		  /* 8211B300h */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8211B300h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B300h case    4:*/		return 0x8211B304;
		  /* 8211B304h */ case    5:  		/* bc 12, CR6_EQ, 3176 */
		/* 8211B304h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B304h case    5:*/		return 0x8211B308;
		  /* 8211B308h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B308h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B308h case    6:*/		return 0x8211B30C;
		  /* 8211B30Ch */ case    7:  		/* addi R31, R27, 8 */
		/* 8211B30Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211B30Ch case    7:*/		return 0x8211B310;
		  /* 8211B310h */ case    8:  		/* mr R30, R26 */
		/* 8211B310h case    8:*/		regs.R30 = regs.R26;
		/* 8211B310h case    8:*/		return 0x8211B314;
		  /* 8211B314h */ case    9:  		/* subf R29, R27, R11 */
		/* 8211B314h case    9:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211B314h case    9:*/		return 0x8211B318;
		  /* 8211B318h */ case   10:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211B318h case   10:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B318h case   10:*/		return 0x8211B31C;
		  /* 8211B31Ch */ case   11:  		/* bl -562236 */
		/* 8211B31Ch case   11:*/		regs.LR = 0x8211B320; return 0x82091EE0;
		/* 8211B31Ch case   11:*/		return 0x8211B320;
		  /* 8211B320h */ case   12:  		/* stfd FR1, <#[R31]> */
		/* 8211B320h case   12:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B320h case   12:*/		return 0x8211B324;
		  /* 8211B324h */ case   13:  		/* addic. R30, R30, -1 */
		/* 8211B324h case   13:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B324h case   13:*/		return 0x8211B328;
		  /* 8211B328h */ case   14:  		/* addi R31, R31, 16 */
		/* 8211B328h case   14:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B328h case   14:*/		return 0x8211B32C;
		  /* 8211B32Ch */ case   15:  		/* bc 4, CR0_EQ, -20 */
		/* 8211B32Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x8211B318;  }
		/* 8211B32Ch case   15:*/		return 0x8211B330;
		  /* 8211B330h */ case   16:  		/* b 3132 */
		/* 8211B330h case   16:*/		return 0x8211BF6C;
		/* 8211B330h case   16:*/		return 0x8211B334;
		  /* 8211B334h */ case   17:  		/* cmplwi CR6, R26, 0 */
		/* 8211B334h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B334h case   17:*/		return 0x8211B338;
		  /* 8211B338h */ case   18:  		/* bc 12, CR6_EQ, 3124 */
		/* 8211B338h case   18:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B338h case   18:*/		return 0x8211B33C;
		  /* 8211B33Ch */ case   19:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B33Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B33Ch case   19:*/		return 0x8211B340;
		  /* 8211B340h */ case   20:  		/* mr R30, R26 */
		/* 8211B340h case   20:*/		regs.R30 = regs.R26;
		/* 8211B340h case   20:*/		return 0x8211B344;
		  /* 8211B344h */ case   21:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211B344h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B344h case   21:*/		return 0x8211B348;
		  /* 8211B348h */ case   22:  		/* addi R31, R11, 8 */
		/* 8211B348h case   22:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211B348h case   22:*/		return 0x8211B34C;
		  /* 8211B34Ch */ case   23:  		/* subf R28, R11, R27 */
		/* 8211B34Ch case   23:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R11,regs.R27);
		/* 8211B34Ch case   23:*/		return 0x8211B350;
		  /* 8211B350h */ case   24:  		/* subf R29, R11, R10 */
		/* 8211B350h case   24:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 8211B350h case   24:*/		return 0x8211B354;
		  /* 8211B354h */ case   25:  		/* lfdx FR2, <#[R29 + R31]> */
		/* 8211B354h case   25:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 8211B354h case   25:*/		return 0x8211B358;
		  /* 8211B358h */ case   26:  		/* lfd FR1, <#[R31]> */
		/* 8211B358h case   26:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B358h case   26:*/		return 0x8211B35C;
		  /* 8211B35Ch */ case   27:  		/* bl 1365540 */
		/* 8211B35Ch case   27:*/		regs.LR = 0x8211B360; return 0x82268980;
		/* 8211B35Ch case   27:*/		return 0x8211B360;
		  /* 8211B360h */ case   28:  		/* stfdx FR1, <#[R31 + R28]> */
		/* 8211B360h case   28:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + regs.R28 + 0x00000000) );
		/* 8211B360h case   28:*/		return 0x8211B364;
		  /* 8211B364h */ case   29:  		/* addic. R30, R30, -1 */
		/* 8211B364h case   29:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B364h case   29:*/		return 0x8211B368;
		  /* 8211B368h */ case   30:  		/* addi R31, R31, 16 */
		/* 8211B368h case   30:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B368h case   30:*/		return 0x8211B36C;
		  /* 8211B36Ch */ case   31:  		/* bc 4, CR0_EQ, -24 */
		/* 8211B36Ch case   31:*/		if ( !regs.CR[0].eq ) { return 0x8211B354;  }
		/* 8211B36Ch case   31:*/		return 0x8211B370;
		  /* 8211B370h */ case   32:  		/* b 3068 */
		/* 8211B370h case   32:*/		return 0x8211BF6C;
		/* 8211B370h case   32:*/		return 0x8211B374;
		  /* 8211B374h */ case   33:  		/* cmplwi CR6, R26, 0 */
		/* 8211B374h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B374h case   33:*/		return 0x8211B378;
		  /* 8211B378h */ case   34:  		/* bc 12, CR6_EQ, 3060 */
		/* 8211B378h case   34:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B378h case   34:*/		return 0x8211B37C;
		  /* 8211B37Ch */ case   35:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B37Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B37Ch case   35:*/		return 0x8211B380;
		  /* 8211B380h */ case   36:  		/* mr R30, R26 */
		/* 8211B380h case   36:*/		regs.R30 = regs.R26;
		/* 8211B380h case   36:*/		return 0x8211B384;
		  /* 8211B384h */ case   37:  		/* addi R31, R11, 8 */
		/* 8211B384h case   37:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211B384h case   37:*/		return 0x8211B388;
		  /* 8211B388h */ case   38:  		/* subf R29, R11, R27 */
		/* 8211B388h case   38:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R27);
		/* 8211B388h case   38:*/		return 0x8211B38C;
		  /* 8211B38Ch */ case   39:  		/* lis R11, -32256 */
		/* 8211B38Ch case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B38Ch case   39:*/		return 0x8211B390;
		  /* 8211B390h */ case   40:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8211B390h case   40:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B390h case   40:*/		return 0x8211B394;
		  /* 8211B394h */ case   41:  		/* lfd FR1, <#[R31]> */
		/* 8211B394h case   41:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B394h case   41:*/		return 0x8211B398;
		  /* 8211B398h */ case   42:  		/* bl -537544 */
		/* 8211B398h case   42:*/		regs.LR = 0x8211B39C; return 0x82097FD0;
		/* 8211B398h case   42:*/		return 0x8211B39C;
		  /* 8211B39Ch */ case   43:  		/* cmpwi CR0, R3, 0 */
		/* 8211B39Ch case   43:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211B39Ch case   43:*/		return 0x8211B3A0;
		  /* 8211B3A0h */ case   44:  		/* bc 12, CR0_EQ, 28 */
		/* 8211B3A0h case   44:*/		if ( regs.CR[0].eq ) { return 0x8211B3BC;  }
		/* 8211B3A0h case   44:*/		return 0x8211B3A4;
		  /* 8211B3A4h */ case   45:  		/* lfd FR1, <#[R31]> */
		/* 8211B3A4h case   45:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B3A4h case   45:*/		return 0x8211B3A8;
		  /* 8211B3A8h */ case   46:  		/* bl -562376 */
		/* 8211B3A8h case   46:*/		regs.LR = 0x8211B3AC; return 0x82091EE0;
		/* 8211B3A8h case   46:*/		return 0x8211B3AC;
		  /* 8211B3ACh */ case   47:  		/* lfd FR0, <#[R31]> */
		/* 8211B3ACh case   47:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B3ACh case   47:*/		return 0x8211B3B0;
		  /* 8211B3B0h */ case   48:  		/* fsub FR0, FR0, FR1 */
		/* 8211B3B0h case   48:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR0,regs.FR1);
		/* 8211B3B0h case   48:*/		return 0x8211B3B4;
		  /* 8211B3B4h */ case   49:  		/* stfdx FR0, <#[R31 + R29]> */
		/* 8211B3B4h case   49:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B3B4h case   49:*/		return 0x8211B3B8;
		  /* 8211B3B8h */ case   50:  		/* b 8 */
		/* 8211B3B8h case   50:*/		return 0x8211B3C0;
		/* 8211B3B8h case   50:*/		return 0x8211B3BC;
	}
	return 0x8211B3BC;
} // Block from 8211B2F0h-8211B3BCh (51 instructions)

//////////////////////////////////////////////////////
// Block at 8211B3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B3BC);
		  /* 8211B3BCh */ case    0:  		/* stfdx FR31, <#[R31 + R29]> */
		/* 8211B3BCh case    0:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B3BCh case    0:*/		return 0x8211B3C0;
	}
	return 0x8211B3C0;
} // Block from 8211B3BCh-8211B3C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211B3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B3C0);
		  /* 8211B3C0h */ case    0:  		/* addic. R30, R30, -1 */
		/* 8211B3C0h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B3C0h case    0:*/		return 0x8211B3C4;
		  /* 8211B3C4h */ case    1:  		/* addi R31, R31, 16 */
		/* 8211B3C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B3C4h case    1:*/		return 0x8211B3C8;
		  /* 8211B3C8h */ case    2:  		/* bc 4, CR0_EQ, -52 */
		/* 8211B3C8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8211B394;  }
		/* 8211B3C8h case    2:*/		return 0x8211B3CC;
		  /* 8211B3CCh */ case    3:  		/* b 2976 */
		/* 8211B3CCh case    3:*/		return 0x8211BF6C;
		/* 8211B3CCh case    3:*/		return 0x8211B3D0;
		  /* 8211B3D0h */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8211B3D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B3D0h case    4:*/		return 0x8211B3D4;
		  /* 8211B3D4h */ case    5:  		/* bc 12, CR6_EQ, 2968 */
		/* 8211B3D4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B3D4h case    5:*/		return 0x8211B3D8;
		  /* 8211B3D8h */ case    6:  		/* lis R10, -32256 */
		/* 8211B3D8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211B3D8h case    6:*/		return 0x8211B3DC;
		  /* 8211B3DCh */ case    7:  		/* mtspr CTR, R26 */
		/* 8211B3DCh case    7:*/		regs.CTR = regs.R26;
		/* 8211B3DCh case    7:*/		return 0x8211B3E0;
		  /* 8211B3E0h */ case    8:  		/* addi R11, R27, -8 */
		/* 8211B3E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFF8);
		/* 8211B3E0h case    8:*/		return 0x8211B3E4;
		  /* 8211B3E4h */ case    9:  		/* lfd FR0, <#[R10 + 1808]> */
		/* 8211B3E4h case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000710) );
		/* 8211B3E4h case    9:*/		return 0x8211B3E8;
		  /* 8211B3E8h */ case   10:  		/* stfdu FR0, <#[R11 + 16]> */
		/* 8211B3E8h case   10:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000010) );
		regs.R11 = (uint32)(regs.R11 + 0x00000010);
		/* 8211B3E8h case   10:*/		return 0x8211B3EC;
		  /* 8211B3ECh */ case   11:  		/* bc 16, CR0_LT, -4 */
		/* 8211B3ECh case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B3E8;  }
		/* 8211B3ECh case   11:*/		return 0x8211B3F0;
		  /* 8211B3F0h */ case   12:  		/* b 2940 */
		/* 8211B3F0h case   12:*/		return 0x8211BF6C;
		/* 8211B3F0h case   12:*/		return 0x8211B3F4;
		  /* 8211B3F4h */ case   13:  		/* cmplwi CR6, R26, 0 */
		/* 8211B3F4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B3F4h case   13:*/		return 0x8211B3F8;
		  /* 8211B3F8h */ case   14:  		/* bc 12, CR6_EQ, 2932 */
		/* 8211B3F8h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B3F8h case   14:*/		return 0x8211B3FC;
		  /* 8211B3FCh */ case   15:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B3FCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B3FCh case   15:*/		return 0x8211B400;
		  /* 8211B400h */ case   16:  		/* lis R10, -32256 */
		/* 8211B400h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211B400h case   16:*/		return 0x8211B404;
		  /* 8211B404h */ case   17:  		/* addi R31, R27, 8 */
		/* 8211B404h case   17:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211B404h case   17:*/		return 0x8211B408;
		  /* 8211B408h */ case   18:  		/* subf R29, R27, R11 */
		/* 8211B408h case   18:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211B408h case   18:*/		return 0x8211B40C;
		  /* 8211B40Ch */ case   19:  		/* lis R11, -32256 */
		/* 8211B40Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B40Ch case   19:*/		return 0x8211B410;
		  /* 8211B410h */ case   20:  		/* mr R30, R26 */
		/* 8211B410h case   20:*/		regs.R30 = regs.R26;
		/* 8211B410h case   20:*/		return 0x8211B414;
		  /* 8211B414h */ case   21:  		/* lfd FR31, <#[R10 + 1848]> */
		/* 8211B414h case   21:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000738) );
		/* 8211B414h case   21:*/		return 0x8211B418;
		  /* 8211B418h */ case   22:  		/* lfd FR30, <#[R11 + 1808]> */
		/* 8211B418h case   22:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B418h case   22:*/		return 0x8211B41C;
		  /* 8211B41Ch */ case   23:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211B41Ch case   23:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B41Ch case   23:*/		return 0x8211B420;
		  /* 8211B420h */ case   24:  		/* bl -537680 */
		/* 8211B420h case   24:*/		regs.LR = 0x8211B424; return 0x82097FD0;
		/* 8211B420h case   24:*/		return 0x8211B424;
		  /* 8211B424h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 8211B424h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211B424h case   25:*/		return 0x8211B428;
		  /* 8211B428h */ case   26:  		/* bc 12, CR0_EQ, 12 */
		/* 8211B428h case   26:*/		if ( regs.CR[0].eq ) { return 0x8211B434;  }
		/* 8211B428h case   26:*/		return 0x8211B42C;
		  /* 8211B42Ch */ case   27:  		/* fmr FR0, FR31 */
		/* 8211B42Ch case   27:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR31);
		/* 8211B42Ch case   27:*/		return 0x8211B430;
		  /* 8211B430h */ case   28:  		/* b 8 */
		/* 8211B430h case   28:*/		return 0x8211B438;
		/* 8211B430h case   28:*/		return 0x8211B434;
	}
	return 0x8211B434;
} // Block from 8211B3C0h-8211B434h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8211B434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B434);
		  /* 8211B434h */ case    0:  		/* fmr FR0, FR30 */
		/* 8211B434h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR30);
		/* 8211B434h case    0:*/		return 0x8211B438;
	}
	return 0x8211B438;
} // Block from 8211B434h-8211B438h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211B438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B438);
		  /* 8211B438h */ case    0:  		/* stfd FR0, <#[R31]> */
		/* 8211B438h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B438h case    0:*/		return 0x8211B43C;
		  /* 8211B43Ch */ case    1:  		/* addic. R30, R30, -1 */
		/* 8211B43Ch case    1:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B43Ch case    1:*/		return 0x8211B440;
	}
	return 0x8211B440;
} // Block from 8211B438h-8211B440h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211B440h
// Function '?GetSubType@CParse@D3DXShader@@IAAJPAVCNode@2@IPAVCNodeType@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B440);
		  /* 8211B440h */ case    0:  		/* addi R31, R31, 16 */
		/* 8211B440h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B440h case    0:*/		return 0x8211B444;
		  /* 8211B444h */ case    1:  		/* bc 4, CR0_EQ, -40 */
		/* 8211B444h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8211B41C;  }
		/* 8211B444h case    1:*/		return 0x8211B448;
		  /* 8211B448h */ case    2:  		/* b 2852 */
		/* 8211B448h case    2:*/		return 0x8211BF6C;
		/* 8211B448h case    2:*/		return 0x8211B44C;
		  /* 8211B44Ch */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8211B44Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B44Ch case    3:*/		return 0x8211B450;
		  /* 8211B450h */ case    4:  		/* bc 12, CR6_EQ, 2844 */
		/* 8211B450h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B450h case    4:*/		return 0x8211B454;
		  /* 8211B454h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B454h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B454h case    5:*/		return 0x8211B458;
		  /* 8211B458h */ case    6:  		/* lis R10, -32256 */
		/* 8211B458h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211B458h case    6:*/		return 0x8211B45C;
		  /* 8211B45Ch */ case    7:  		/* addi R31, R27, 8 */
		/* 8211B45Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211B45Ch case    7:*/		return 0x8211B460;
		  /* 8211B460h */ case    8:  		/* subf R29, R27, R11 */
		/* 8211B460h case    8:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211B460h case    8:*/		return 0x8211B464;
		  /* 8211B464h */ case    9:  		/* lis R11, -32256 */
		/* 8211B464h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B464h case    9:*/		return 0x8211B468;
		  /* 8211B468h */ case   10:  		/* mr R30, R26 */
		/* 8211B468h case   10:*/		regs.R30 = regs.R26;
		/* 8211B468h case   10:*/		return 0x8211B46C;
		  /* 8211B46Ch */ case   11:  		/* lfd FR31, <#[R10 + 1848]> */
		/* 8211B46Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000738) );
		/* 8211B46Ch case   11:*/		return 0x8211B470;
		  /* 8211B470h */ case   12:  		/* lfd FR30, <#[R11 + 1808]> */
		/* 8211B470h case   12:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B470h case   12:*/		return 0x8211B474;
		  /* 8211B474h */ case   13:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211B474h case   13:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B474h case   13:*/		return 0x8211B478;
		  /* 8211B478h */ case   14:  		/* bl -537768 */
		/* 8211B478h case   14:*/		regs.LR = 0x8211B47C; return 0x82097FD0;
		/* 8211B478h case   14:*/		return 0x8211B47C;
		  /* 8211B47Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8211B47Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211B47Ch case   15:*/		return 0x8211B480;
		  /* 8211B480h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 8211B480h case   16:*/		if ( regs.CR[0].eq ) { return 0x8211B48C;  }
		/* 8211B480h case   16:*/		return 0x8211B484;
		  /* 8211B484h */ case   17:  		/* fmr FR0, FR30 */
		/* 8211B484h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR30);
		/* 8211B484h case   17:*/		return 0x8211B488;
		  /* 8211B488h */ case   18:  		/* b 8 */
		/* 8211B488h case   18:*/		return 0x8211B490;
		/* 8211B488h case   18:*/		return 0x8211B48C;
	}
	return 0x8211B48C;
} // Block from 8211B440h-8211B48Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211B48Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B48C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B48C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B48C);
		  /* 8211B48Ch */ case    0:  		/* fmr FR0, FR31 */
		/* 8211B48Ch case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR31);
		/* 8211B48Ch case    0:*/		return 0x8211B490;
	}
	return 0x8211B490;
} // Block from 8211B48Ch-8211B490h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211B490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B490);
		  /* 8211B490h */ case    0:  		/* stfd FR0, <#[R31]> */
		/* 8211B490h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B490h case    0:*/		return 0x8211B494;
		  /* 8211B494h */ case    1:  		/* addic. R30, R30, -1 */
		/* 8211B494h case    1:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B494h case    1:*/		return 0x8211B498;
		  /* 8211B498h */ case    2:  		/* addi R31, R31, 16 */
		/* 8211B498h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B498h case    2:*/		return 0x8211B49C;
		  /* 8211B49Ch */ case    3:  		/* bc 4, CR0_EQ, -40 */
		/* 8211B49Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8211B474;  }
		/* 8211B49Ch case    3:*/		return 0x8211B4A0;
		  /* 8211B4A0h */ case    4:  		/* b 2764 */
		/* 8211B4A0h case    4:*/		return 0x8211BF6C;
		/* 8211B4A0h case    4:*/		return 0x8211B4A4;
		  /* 8211B4A4h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8211B4A4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B4A4h case    5:*/		return 0x8211B4A8;
		  /* 8211B4A8h */ case    6:  		/* bc 12, CR6_EQ, 2756 */
		/* 8211B4A8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B4A8h case    6:*/		return 0x8211B4AC;
		  /* 8211B4ACh */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B4ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B4ACh case    7:*/		return 0x8211B4B0;
		  /* 8211B4B0h */ case    8:  		/* lis R10, -32256 */
		/* 8211B4B0h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211B4B0h case    8:*/		return 0x8211B4B4;
		  /* 8211B4B4h */ case    9:  		/* addi R31, R27, 8 */
		/* 8211B4B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211B4B4h case    9:*/		return 0x8211B4B8;
		  /* 8211B4B8h */ case   10:  		/* subf R29, R27, R11 */
		/* 8211B4B8h case   10:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211B4B8h case   10:*/		return 0x8211B4BC;
		  /* 8211B4BCh */ case   11:  		/* lis R11, -32256 */
		/* 8211B4BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B4BCh case   11:*/		return 0x8211B4C0;
		  /* 8211B4C0h */ case   12:  		/* mr R30, R26 */
		/* 8211B4C0h case   12:*/		regs.R30 = regs.R26;
		/* 8211B4C0h case   12:*/		return 0x8211B4C4;
		  /* 8211B4C4h */ case   13:  		/* lfd FR31, <#[R10 + 1848]> */
		/* 8211B4C4h case   13:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000738) );
		/* 8211B4C4h case   13:*/		return 0x8211B4C8;
		  /* 8211B4C8h */ case   14:  		/* lfd FR30, <#[R11 + 1808]> */
		/* 8211B4C8h case   14:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B4C8h case   14:*/		return 0x8211B4CC;
		  /* 8211B4CCh */ case   15:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211B4CCh case   15:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B4CCh case   15:*/		return 0x8211B4D0;
		  /* 8211B4D0h */ case   16:  		/* bl -537824 */
		/* 8211B4D0h case   16:*/		regs.LR = 0x8211B4D4; return 0x82097FF0;
		/* 8211B4D0h case   16:*/		return 0x8211B4D4;
		  /* 8211B4D4h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8211B4D4h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211B4D4h case   17:*/		return 0x8211B4D8;
		  /* 8211B4D8h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 8211B4D8h case   18:*/		if ( regs.CR[0].eq ) { return 0x8211B4E4;  }
		/* 8211B4D8h case   18:*/		return 0x8211B4DC;
		  /* 8211B4DCh */ case   19:  		/* fmr FR0, FR31 */
		/* 8211B4DCh case   19:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR31);
		/* 8211B4DCh case   19:*/		return 0x8211B4E0;
		  /* 8211B4E0h */ case   20:  		/* b 8 */
		/* 8211B4E0h case   20:*/		return 0x8211B4E8;
		/* 8211B4E0h case   20:*/		return 0x8211B4E4;
	}
	return 0x8211B4E4;
} // Block from 8211B490h-8211B4E4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8211B4E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B4E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B4E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B4E4);
		  /* 8211B4E4h */ case    0:  		/* fmr FR0, FR30 */
		/* 8211B4E4h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR30);
		/* 8211B4E4h case    0:*/		return 0x8211B4E8;
	}
	return 0x8211B4E8;
} // Block from 8211B4E4h-8211B4E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211B4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B4E8);
		  /* 8211B4E8h */ case    0:  		/* stfd FR0, <#[R31]> */
		/* 8211B4E8h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B4E8h case    0:*/		return 0x8211B4EC;
		  /* 8211B4ECh */ case    1:  		/* addic. R30, R30, -1 */
		/* 8211B4ECh case    1:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B4ECh case    1:*/		return 0x8211B4F0;
		  /* 8211B4F0h */ case    2:  		/* addi R31, R31, 16 */
		/* 8211B4F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B4F0h case    2:*/		return 0x8211B4F4;
		  /* 8211B4F4h */ case    3:  		/* bc 4, CR0_EQ, -40 */
		/* 8211B4F4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8211B4CC;  }
		/* 8211B4F4h case    3:*/		return 0x8211B4F8;
		  /* 8211B4F8h */ case    4:  		/* b 2676 */
		/* 8211B4F8h case    4:*/		return 0x8211BF6C;
		/* 8211B4F8h case    4:*/		return 0x8211B4FC;
		  /* 8211B4FCh */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8211B4FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B4FCh case    5:*/		return 0x8211B500;
		  /* 8211B500h */ case    6:  		/* bc 12, CR6_EQ, 2668 */
		/* 8211B500h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B500h case    6:*/		return 0x8211B504;
		  /* 8211B504h */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B504h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B504h case    7:*/		return 0x8211B508;
		  /* 8211B508h */ case    8:  		/* mr R30, R26 */
		/* 8211B508h case    8:*/		regs.R30 = regs.R26;
		/* 8211B508h case    8:*/		return 0x8211B50C;
		  /* 8211B50Ch */ case    9:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211B50Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B50Ch case    9:*/		return 0x8211B510;
		  /* 8211B510h */ case   10:  		/* addi R31, R11, 8 */
		/* 8211B510h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211B510h case   10:*/		return 0x8211B514;
		  /* 8211B514h */ case   11:  		/* subf R28, R11, R27 */
		/* 8211B514h case   11:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R11,regs.R27);
		/* 8211B514h case   11:*/		return 0x8211B518;
		  /* 8211B518h */ case   12:  		/* subf R29, R11, R10 */
		/* 8211B518h case   12:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 8211B518h case   12:*/		return 0x8211B51C;
		  /* 8211B51Ch */ case   13:  		/* lis R11, -32255 */
		/* 8211B51Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211B51Ch case   13:*/		return 0x8211B520;
		  /* 8211B520h */ case   14:  		/* lfd FR31, <#[R11 - 24504]> */
		/* 8211B520h case   14:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 8211B520h case   14:*/		return 0x8211B524;
		  /* 8211B524h */ case   15:  		/* lfdx FR2, <#[R31 + R29]> */
		/* 8211B524h case   15:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B524h case   15:*/		return 0x8211B528;
		  /* 8211B528h */ case   16:  		/* fmr FR1, FR31 */
		/* 8211B528h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8211B528h case   16:*/		return 0x8211B52C;
		  /* 8211B52Ch */ case   17:  		/* bl -561012 */
		/* 8211B52Ch case   17:*/		regs.LR = 0x8211B530; return 0x820925B8;
		/* 8211B52Ch case   17:*/		return 0x8211B530;
		  /* 8211B530h */ case   18:  		/* lfd FR0, <#[R31]> */
		/* 8211B530h case   18:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B530h case   18:*/		return 0x8211B534;
		  /* 8211B534h */ case   19:  		/* fmul FR0, FR1, FR0 */
		/* 8211B534h case   19:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR1,regs.FR0);
		/* 8211B534h case   19:*/		return 0x8211B538;
		  /* 8211B538h */ case   20:  		/* stfdx FR0, <#[R31 + R28]> */
		/* 8211B538h case   20:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + regs.R28 + 0x00000000) );
		/* 8211B538h case   20:*/		return 0x8211B53C;
		  /* 8211B53Ch */ case   21:  		/* addic. R30, R30, -1 */
		/* 8211B53Ch case   21:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211B53Ch case   21:*/		return 0x8211B540;
		  /* 8211B540h */ case   22:  		/* addi R31, R31, 16 */
		/* 8211B540h case   22:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B540h case   22:*/		return 0x8211B544;
		  /* 8211B544h */ case   23:  		/* bc 4, CR0_EQ, -32 */
		/* 8211B544h case   23:*/		if ( !regs.CR[0].eq ) { return 0x8211B524;  }
		/* 8211B544h case   23:*/		return 0x8211B548;
		  /* 8211B548h */ case   24:  		/* b 2596 */
		/* 8211B548h case   24:*/		return 0x8211BF6C;
		/* 8211B548h case   24:*/		return 0x8211B54C;
		  /* 8211B54Ch */ case   25:  		/* lis R11, -32256 */
		/* 8211B54Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B54Ch case   25:*/		return 0x8211B550;
		  /* 8211B550h */ case   26:  		/* cmplwi CR6, R26, 0 */
		/* 8211B550h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B550h case   26:*/		return 0x8211B554;
		  /* 8211B554h */ case   27:  		/* lfd FR13, <#[R11 + 1808]> */
		/* 8211B554h case   27:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B554h case   27:*/		return 0x8211B558;
		  /* 8211B558h */ case   28:  		/* bc 12, CR6_EQ, 28 */
		/* 8211B558h case   28:*/		if ( regs.CR[6].eq ) { return 0x8211B574;  }
		/* 8211B558h case   28:*/		return 0x8211B55C;
		  /* 8211B55Ch */ case   29:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B55Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B55Ch case   29:*/		return 0x8211B560;
		  /* 8211B560h */ case   30:  		/* mtspr CTR, R26 */
		/* 8211B560h case   30:*/		regs.CTR = regs.R26;
		/* 8211B560h case   30:*/		return 0x8211B564;
		  /* 8211B564h */ case   31:  		/* addi R11, R11, -8 */
		/* 8211B564h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 8211B564h case   31:*/		return 0x8211B568;
		  /* 8211B568h */ case   32:  		/* lfdu FR0, <#[R11 + 16]> */
		/* 8211B568h case   32:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000010) );
		regs.R11 = (uint32)(regs.R11 + 0x00000010);
		/* 8211B568h case   32:*/		return 0x8211B56C;
		  /* 8211B56Ch */ case   33:  		/* fmadd FR13, FR0, FR0, FR13 */
		/* 8211B56Ch case   33:*/		cpu::op::fmadd<0>(regs,&regs.FR13,regs.FR0,regs.FR0,regs.FR13);
		/* 8211B56Ch case   33:*/		return 0x8211B570;
		  /* 8211B570h */ case   34:  		/* bc 16, CR0_LT, -8 */
		/* 8211B570h case   34:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B568;  }
		/* 8211B570h case   34:*/		return 0x8211B574;
	}
	return 0x8211B574;
} // Block from 8211B4E8h-8211B574h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8211B574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B574);
		  /* 8211B574h */ case    0:  		/* fsqrt FR0, FR13 */
		/* 8211B574h case    0:*/		cpu::op::fsqrt<0>(regs,&regs.FR0,regs.FR13);
		/* 8211B574h case    0:*/		return 0x8211B578;
	}
	return 0x8211B578;
} // Block from 8211B574h-8211B578h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211B578h
// Function '?ObjectExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B578);
		  /* 8211B578h */ case    0:  		/* b -2092 */
		/* 8211B578h case    0:*/		return 0x8211AD4C;
		/* 8211B578h case    0:*/		return 0x8211B57C;
		  /* 8211B57Ch */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 8211B57Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B57Ch case    1:*/		return 0x8211B580;
		  /* 8211B580h */ case    2:  		/* bc 12, CR6_EQ, 2540 */
		/* 8211B580h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B580h case    2:*/		return 0x8211B584;
		  /* 8211B584h */ case    3:  		/* lwz R9, <#[R1 + 88]> */
		/* 8211B584h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8211B584h case    3:*/		return 0x8211B588;
		  /* 8211B588h */ case    4:  		/* mtspr CTR, R26 */
		/* 8211B588h case    4:*/		regs.CTR = regs.R26;
		/* 8211B588h case    4:*/		return 0x8211B58C;
		  /* 8211B58Ch */ case    5:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211B58Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B58Ch case    5:*/		return 0x8211B590;
		  /* 8211B590h */ case    6:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B590h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B590h case    6:*/		return 0x8211B594;
		  /* 8211B594h */ case    7:  		/* subf R8, R9, R11 */
		/* 8211B594h case    7:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 8211B594h case    7:*/		return 0x8211B598;
		  /* 8211B598h */ case    8:  		/* addi R11, R10, 8 */
		/* 8211B598h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8211B598h case    8:*/		return 0x8211B59C;
		  /* 8211B59Ch */ case    9:  		/* subf R9, R10, R9 */
		/* 8211B59Ch case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 8211B59Ch case    9:*/		return 0x8211B5A0;
		  /* 8211B5A0h */ case   10:  		/* subf R10, R10, R27 */
		/* 8211B5A0h case   10:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 8211B5A0h case   10:*/		return 0x8211B5A4;
		  /* 8211B5A4h */ case   11:  		/* add R7, R9, R11 */
		/* 8211B5A4h case   11:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R11);
		/* 8211B5A4h case   11:*/		return 0x8211B5A8;
		  /* 8211B5A8h */ case   12:  		/* lfd FR0, <#[R11]> */
		/* 8211B5A8h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B5A8h case   12:*/		return 0x8211B5AC;
		  /* 8211B5ACh */ case   13:  		/* lfdx FR13, <#[R9 + R11]> */
		/* 8211B5ACh case   13:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8211B5ACh case   13:*/		return 0x8211B5B0;
		  /* 8211B5B0h */ case   14:  		/* lfdx FR12, <#[R7 + R8]> */
		/* 8211B5B0h case   14:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 8211B5B0h case   14:*/		return 0x8211B5B4;
		  /* 8211B5B4h */ case   15:  		/* fsub FR12, FR12, FR0 */
		/* 8211B5B4h case   15:*/		cpu::op::fsub<0>(regs,&regs.FR12,regs.FR12,regs.FR0);
		/* 8211B5B4h case   15:*/		return 0x8211B5B8;
		  /* 8211B5B8h */ case   16:  		/* fmadd FR0, FR12, FR13, FR0 */
		/* 8211B5B8h case   16:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR12,regs.FR13,regs.FR0);
		/* 8211B5B8h case   16:*/		return 0x8211B5BC;
		  /* 8211B5BCh */ case   17:  		/* stfdx FR0, <#[R11 + R10]> */
		/* 8211B5BCh case   17:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211B5BCh case   17:*/		return 0x8211B5C0;
		  /* 8211B5C0h */ case   18:  		/* addi R11, R11, 16 */
		/* 8211B5C0h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B5C0h case   18:*/		return 0x8211B5C4;
		  /* 8211B5C4h */ case   19:  		/* bc 16, CR0_LT, -32 */
		/* 8211B5C4h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B5A4;  }
		/* 8211B5C4h case   19:*/		return 0x8211B5C8;
		  /* 8211B5C8h */ case   20:  		/* b 2468 */
		/* 8211B5C8h case   20:*/		return 0x8211BF6C;
		/* 8211B5C8h case   20:*/		return 0x8211B5CC;
		  /* 8211B5CCh */ case   21:  		/* lis R11, -32256 */
		/* 8211B5CCh case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B5CCh case   21:*/		return 0x8211B5D0;
		  /* 8211B5D0h */ case   22:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B5D0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B5D0h case   22:*/		return 0x8211B5D4;
		  /* 8211B5D4h */ case   23:  		/* lis R9, -32256 */
		/* 8211B5D4h case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8211B5D4h case   23:*/		return 0x8211B5D8;
		  /* 8211B5D8h */ case   24:  		/* lfd FR13, <#[R11 + 1848]> */
		/* 8211B5D8h case   24:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000738) );
		/* 8211B5D8h case   24:*/		return 0x8211B5DC;
		  /* 8211B5DCh */ case   25:  		/* lfd FR0, <#[R9 + 1808]> */
		/* 8211B5DCh case   25:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000710) );
		/* 8211B5DCh case   25:*/		return 0x8211B5E0;
		  /* 8211B5E0h */ case   26:  		/* stfd FR13, <#[R27 + 8]> */
		/* 8211B5E0h case   26:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R27 + 0x00000008) );
		/* 8211B5E0h case   26:*/		return 0x8211B5E4;
		  /* 8211B5E4h */ case   27:  		/* stfd FR0, <#[R27 + 40]> */
		/* 8211B5E4h case   27:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000028) );
		/* 8211B5E4h case   27:*/		return 0x8211B5E8;
		  /* 8211B5E8h */ case   28:  		/* stfd FR13, <#[R27 + 56]> */
		/* 8211B5E8h case   28:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R27 + 0x00000038) );
		/* 8211B5E8h case   28:*/		return 0x8211B5EC;
		  /* 8211B5ECh */ case   29:  		/* stfd FR0, <#[R27 + 24]> */
		/* 8211B5ECh case   29:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000018) );
		/* 8211B5ECh case   29:*/		return 0x8211B5F0;
		  /* 8211B5F0h */ case   30:  		/* lfd FR13, <#[R10 + 8]> */
		/* 8211B5F0h case   30:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000008) );
		/* 8211B5F0h case   30:*/		return 0x8211B5F4;
		  /* 8211B5F4h */ case   31:  		/* fcmpu CR6, FR13, FR0 */
		/* 8211B5F4h case   31:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8211B5F4h case   31:*/		return 0x8211B5F8;
	}
	return 0x8211B5F8;
} // Block from 8211B578h-8211B5F8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8211B5F8h
// Function '?EvalIntrinsic@CParse@D3DXShader@@IAAJPAVCNode@2@PAU_D3DVALUE@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B5F8);
		  /* 8211B5F8h */ case    0:  		/* bc 4, CR6_GT, 2420 */
		/* 8211B5F8h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8211BF6C;  }
		/* 8211B5F8h case    0:*/		return 0x8211B5FC;
		  /* 8211B5FCh */ case    1:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211B5FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B5FCh case    1:*/		return 0x8211B600;
		  /* 8211B600h */ case    2:  		/* stfd FR13, <#[R27 + 24]> */
		/* 8211B600h case    2:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R27 + 0x00000018) );
		/* 8211B600h case    2:*/		return 0x8211B604;
		  /* 8211B604h */ case    3:  		/* lfd FR1, <#[R11 + 8]> */
		/* 8211B604h case    3:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000008) );
		/* 8211B604h case    3:*/		return 0x8211B608;
		  /* 8211B608h */ case    4:  		/* fcmpu CR6, FR1, FR0 */
		/* 8211B608h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 8211B608h case    4:*/		return 0x8211B60C;
		  /* 8211B60Ch */ case    5:  		/* bc 4, CR6_GT, 2400 */
		/* 8211B60Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x8211BF6C;  }
		/* 8211B60Ch case    5:*/		return 0x8211B610;
		  /* 8211B610h */ case    6:  		/* lwz R11, <#[R1 + 88]> */
		/* 8211B610h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8211B610h case    6:*/		return 0x8211B614;
		  /* 8211B614h */ case    7:  		/* lfd FR2, <#[R11 + 8]> */
		/* 8211B614h case    7:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00000008) );
		/* 8211B614h case    7:*/		return 0x8211B618;
		  /* 8211B618h */ case    8:  		/* bl -561248 */
		/* 8211B618h case    8:*/		regs.LR = 0x8211B61C; return 0x820925B8;
		/* 8211B618h case    8:*/		return 0x8211B61C;
		  /* 8211B61Ch */ case    9:  		/* stfd FR1, <#[R27 + 40]> */
		/* 8211B61Ch case    9:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R27 + 0x00000028) );
		/* 8211B61Ch case    9:*/		return 0x8211B620;
		  /* 8211B620h */ case   10:  		/* b 2380 */
		/* 8211B620h case   10:*/		return 0x8211BF6C;
		/* 8211B620h case   10:*/		return 0x8211B624;
		  /* 8211B624h */ case   11:  		/* mr R30, R24 */
		/* 8211B624h case   11:*/		regs.R30 = regs.R24;
		/* 8211B624h case   11:*/		return 0x8211B628;
		  /* 8211B628h */ case   12:  		/* cmplwi CR6, R26, 0 */
		/* 8211B628h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B628h case   12:*/		return 0x8211B62C;
		  /* 8211B62Ch */ case   13:  		/* bc 12, CR6_EQ, 2368 */
		/* 8211B62Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B62Ch case   13:*/		return 0x8211B630;
		  /* 8211B630h */ case   14:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B630h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B630h case   14:*/		return 0x8211B634;
		  /* 8211B634h */ case   15:  		/* addi R31, R11, 8 */
		/* 8211B634h case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211B634h case   15:*/		return 0x8211B638;
		  /* 8211B638h */ case   16:  		/* subf R29, R11, R27 */
		/* 8211B638h case   16:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R27);
		/* 8211B638h case   16:*/		return 0x8211B63C;
		  /* 8211B63Ch */ case   17:  		/* lis R11, -32256 */
		/* 8211B63Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B63Ch case   17:*/		return 0x8211B640;
		  /* 8211B640h */ case   18:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8211B640h case   18:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B640h case   18:*/		return 0x8211B644;
		  /* 8211B644h */ case   19:  		/* lfd FR1, <#[R31]> */
		/* 8211B644h case   19:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B644h case   19:*/		return 0x8211B648;
		  /* 8211B648h */ case   20:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211B648h case   20:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211B648h case   20:*/		return 0x8211B64C;
		  /* 8211B64Ch */ case   21:  		/* bc 4, CR6_GT, 2432 */
		/* 8211B64Ch case   21:*/		if ( !regs.CR[6].gt ) { return 0x8211BFCC;  }
		/* 8211B64Ch case   21:*/		return 0x8211B650;
		  /* 8211B650h */ case   22:  		/* bl -538744 */
		/* 8211B650h case   22:*/		regs.LR = 0x8211B654; return 0x82097DD8;
		/* 8211B650h case   22:*/		return 0x8211B654;
		  /* 8211B654h */ case   23:  		/* addi R30, R30, 1 */
		/* 8211B654h case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8211B654h case   23:*/		return 0x8211B658;
		  /* 8211B658h */ case   24:  		/* stfdx FR1, <#[R31 + R29]> */
		/* 8211B658h case   24:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B658h case   24:*/		return 0x8211B65C;
		  /* 8211B65Ch */ case   25:  		/* addi R31, R31, 16 */
		/* 8211B65Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B65Ch case   25:*/		return 0x8211B660;
		  /* 8211B660h */ case   26:  		/* cmplw CR6, R30, R26 */
		/* 8211B660h case   26:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8211B660h case   26:*/		return 0x8211B664;
		  /* 8211B664h */ case   27:  		/* bc 12, CR6_LT, -32 */
		/* 8211B664h case   27:*/		if ( regs.CR[6].lt ) { return 0x8211B644;  }
		/* 8211B664h case   27:*/		return 0x8211B668;
		  /* 8211B668h */ case   28:  		/* b 2308 */
		/* 8211B668h case   28:*/		return 0x8211BF6C;
		/* 8211B668h case   28:*/		return 0x8211B66C;
		  /* 8211B66Ch */ case   29:  		/* mr R30, R24 */
		/* 8211B66Ch case   29:*/		regs.R30 = regs.R24;
		/* 8211B66Ch case   29:*/		return 0x8211B670;
		  /* 8211B670h */ case   30:  		/* cmplwi CR6, R26, 0 */
		/* 8211B670h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B670h case   30:*/		return 0x8211B674;
		  /* 8211B674h */ case   31:  		/* bc 12, CR6_EQ, 2296 */
		/* 8211B674h case   31:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B674h case   31:*/		return 0x8211B678;
		  /* 8211B678h */ case   32:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B678h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B678h case   32:*/		return 0x8211B67C;
		  /* 8211B67Ch */ case   33:  		/* lis R10, -32256 */
		/* 8211B67Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211B67Ch case   33:*/		return 0x8211B680;
		  /* 8211B680h */ case   34:  		/* addi R31, R11, 8 */
		/* 8211B680h case   34:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211B680h case   34:*/		return 0x8211B684;
		  /* 8211B684h */ case   35:  		/* subf R29, R11, R27 */
		/* 8211B684h case   35:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R27);
		/* 8211B684h case   35:*/		return 0x8211B688;
		  /* 8211B688h */ case   36:  		/* lis R11, -32255 */
		/* 8211B688h case   36:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211B688h case   36:*/		return 0x8211B68C;
		  /* 8211B68Ch */ case   37:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 8211B68Ch case   37:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 8211B68Ch case   37:*/		return 0x8211B690;
		  /* 8211B690h */ case   38:  		/* lfd FR30, <#[R11 + 9040]> */
		/* 8211B690h case   38:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00002350) );
		/* 8211B690h case   38:*/		return 0x8211B694;
		  /* 8211B694h */ case   39:  		/* lfd FR1, <#[R31]> */
		/* 8211B694h case   39:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B694h case   39:*/		return 0x8211B698;
		  /* 8211B698h */ case   40:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211B698h case   40:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211B698h case   40:*/		return 0x8211B69C;
		  /* 8211B69Ch */ case   41:  		/* bc 4, CR6_GT, 2352 */
		/* 8211B69Ch case   41:*/		if ( !regs.CR[6].gt ) { return 0x8211BFCC;  }
		/* 8211B69Ch case   41:*/		return 0x8211B6A0;
		  /* 8211B6A0h */ case   42:  		/* bl -538824 */
		/* 8211B6A0h case   42:*/		regs.LR = 0x8211B6A4; return 0x82097DD8;
		/* 8211B6A0h case   42:*/		return 0x8211B6A4;
		  /* 8211B6A4h */ case   43:  		/* fmr FR29, FR1 */
		/* 8211B6A4h case   43:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR1);
		/* 8211B6A4h case   43:*/		return 0x8211B6A8;
		  /* 8211B6A8h */ case   44:  		/* fmr FR1, FR30 */
		/* 8211B6A8h case   44:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 8211B6A8h case   44:*/		return 0x8211B6AC;
		  /* 8211B6ACh */ case   45:  		/* bl -538836 */
		/* 8211B6ACh case   45:*/		regs.LR = 0x8211B6B0; return 0x82097DD8;
		/* 8211B6ACh case   45:*/		return 0x8211B6B0;
		  /* 8211B6B0h */ case   46:  		/* addi R30, R30, 1 */
		/* 8211B6B0h case   46:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8211B6B0h case   46:*/		return 0x8211B6B4;
		  /* 8211B6B4h */ case   47:  		/* fdiv FR0, FR29, FR1 */
		/* 8211B6B4h case   47:*/		cpu::op::fdiv<0>(regs,&regs.FR0,regs.FR29,regs.FR1);
		/* 8211B6B4h case   47:*/		return 0x8211B6B8;
		  /* 8211B6B8h */ case   48:  		/* stfdx FR0, <#[R31 + R29]> */
		/* 8211B6B8h case   48:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B6B8h case   48:*/		return 0x8211B6BC;
		  /* 8211B6BCh */ case   49:  		/* addi R31, R31, 16 */
		/* 8211B6BCh case   49:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B6BCh case   49:*/		return 0x8211B6C0;
		  /* 8211B6C0h */ case   50:  		/* cmplw CR6, R30, R26 */
		/* 8211B6C0h case   50:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8211B6C0h case   50:*/		return 0x8211B6C4;
		  /* 8211B6C4h */ case   51:  		/* bc 12, CR6_LT, -48 */
		/* 8211B6C4h case   51:*/		if ( regs.CR[6].lt ) { return 0x8211B694;  }
		/* 8211B6C4h case   51:*/		return 0x8211B6C8;
		  /* 8211B6C8h */ case   52:  		/* b 2212 */
		/* 8211B6C8h case   52:*/		return 0x8211BF6C;
		/* 8211B6C8h case   52:*/		return 0x8211B6CC;
		  /* 8211B6CCh */ case   53:  		/* mr R30, R24 */
		/* 8211B6CCh case   53:*/		regs.R30 = regs.R24;
		/* 8211B6CCh case   53:*/		return 0x8211B6D0;
		  /* 8211B6D0h */ case   54:  		/* cmplwi CR6, R26, 0 */
		/* 8211B6D0h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B6D0h case   54:*/		return 0x8211B6D4;
		  /* 8211B6D4h */ case   55:  		/* bc 12, CR6_EQ, 2200 */
		/* 8211B6D4h case   55:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B6D4h case   55:*/		return 0x8211B6D8;
		  /* 8211B6D8h */ case   56:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B6D8h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B6D8h case   56:*/		return 0x8211B6DC;
		  /* 8211B6DCh */ case   57:  		/* lis R10, -32256 */
		/* 8211B6DCh case   57:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211B6DCh case   57:*/		return 0x8211B6E0;
		  /* 8211B6E0h */ case   58:  		/* addi R31, R11, 8 */
		/* 8211B6E0h case   58:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211B6E0h case   58:*/		return 0x8211B6E4;
		  /* 8211B6E4h */ case   59:  		/* subf R29, R11, R27 */
		/* 8211B6E4h case   59:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R27);
		/* 8211B6E4h case   59:*/		return 0x8211B6E8;
		  /* 8211B6E8h */ case   60:  		/* lis R11, -32255 */
		/* 8211B6E8h case   60:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211B6E8h case   60:*/		return 0x8211B6EC;
		  /* 8211B6ECh */ case   61:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 8211B6ECh case   61:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 8211B6ECh case   61:*/		return 0x8211B6F0;
		  /* 8211B6F0h */ case   62:  		/* lfd FR30, <#[R11 - 24504]> */
		/* 8211B6F0h case   62:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 8211B6F0h case   62:*/		return 0x8211B6F4;
		  /* 8211B6F4h */ case   63:  		/* lfd FR1, <#[R31]> */
		/* 8211B6F4h case   63:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B6F4h case   63:*/		return 0x8211B6F8;
		  /* 8211B6F8h */ case   64:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211B6F8h case   64:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211B6F8h case   64:*/		return 0x8211B6FC;
		  /* 8211B6FCh */ case   65:  		/* bc 4, CR6_GT, 2256 */
		/* 8211B6FCh case   65:*/		if ( !regs.CR[6].gt ) { return 0x8211BFCC;  }
		/* 8211B6FCh case   65:*/		return 0x8211B700;
		  /* 8211B700h */ case   66:  		/* bl -538920 */
		/* 8211B700h case   66:*/		regs.LR = 0x8211B704; return 0x82097DD8;
		/* 8211B700h case   66:*/		return 0x8211B704;
		  /* 8211B704h */ case   67:  		/* fmr FR29, FR1 */
		/* 8211B704h case   67:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR1);
		/* 8211B704h case   67:*/		return 0x8211B708;
		  /* 8211B708h */ case   68:  		/* fmr FR1, FR30 */
		/* 8211B708h case   68:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 8211B708h case   68:*/		return 0x8211B70C;
		  /* 8211B70Ch */ case   69:  		/* bl -538932 */
		/* 8211B70Ch case   69:*/		regs.LR = 0x8211B710; return 0x82097DD8;
		/* 8211B70Ch case   69:*/		return 0x8211B710;
		  /* 8211B710h */ case   70:  		/* addi R30, R30, 1 */
		/* 8211B710h case   70:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8211B710h case   70:*/		return 0x8211B714;
		  /* 8211B714h */ case   71:  		/* fdiv FR0, FR29, FR1 */
		/* 8211B714h case   71:*/		cpu::op::fdiv<0>(regs,&regs.FR0,regs.FR29,regs.FR1);
		/* 8211B714h case   71:*/		return 0x8211B718;
		  /* 8211B718h */ case   72:  		/* stfdx FR0, <#[R29 + R31]> */
		/* 8211B718h case   72:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 8211B718h case   72:*/		return 0x8211B71C;
		  /* 8211B71Ch */ case   73:  		/* addi R31, R31, 16 */
		/* 8211B71Ch case   73:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B71Ch case   73:*/		return 0x8211B720;
		  /* 8211B720h */ case   74:  		/* cmplw CR6, R30, R26 */
		/* 8211B720h case   74:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8211B720h case   74:*/		return 0x8211B724;
		  /* 8211B724h */ case   75:  		/* bc 12, CR6_LT, -48 */
		/* 8211B724h case   75:*/		if ( regs.CR[6].lt ) { return 0x8211B6F4;  }
		/* 8211B724h case   75:*/		return 0x8211B728;
		  /* 8211B728h */ case   76:  		/* b 2116 */
		/* 8211B728h case   76:*/		return 0x8211BF6C;
		/* 8211B728h case   76:*/		return 0x8211B72C;
		  /* 8211B72Ch */ case   77:  		/* cmplwi CR6, R26, 0 */
		/* 8211B72Ch case   77:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B72Ch case   77:*/		return 0x8211B730;
		  /* 8211B730h */ case   78:  		/* bc 12, CR6_EQ, 2108 */
		/* 8211B730h case   78:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B730h case   78:*/		return 0x8211B734;
		  /* 8211B734h */ case   79:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211B734h case   79:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B734h case   79:*/		return 0x8211B738;
		  /* 8211B738h */ case   80:  		/* mtspr CTR, R26 */
		/* 8211B738h case   80:*/		regs.CTR = regs.R26;
		/* 8211B738h case   80:*/		return 0x8211B73C;
		  /* 8211B73Ch */ case   81:  		/* lwz R8, <#[R1 + 80]> */
		/* 8211B73Ch case   81:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B73Ch case   81:*/		return 0x8211B740;
		  /* 8211B740h */ case   82:  		/* addi R10, R11, 8 */
		/* 8211B740h case   82:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8211B740h case   82:*/		return 0x8211B744;
		  /* 8211B744h */ case   83:  		/* subf R9, R11, R27 */
		/* 8211B744h case   83:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R27);
		/* 8211B744h case   83:*/		return 0x8211B748;
		  /* 8211B748h */ case   84:  		/* subf R11, R11, R8 */
		/* 8211B748h case   84:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8211B748h case   84:*/		return 0x8211B74C;
		  /* 8211B74Ch */ case   85:  		/* lfdx FR0, <#[R11 + R10]> */
		/* 8211B74Ch case   85:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211B74Ch case   85:*/		return 0x8211B750;
		  /* 8211B750h */ case   86:  		/* lfd FR13, <#[R10]> */
		/* 8211B750h case   86:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8211B750h case   86:*/		return 0x8211B754;
		  /* 8211B754h */ case   87:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211B754h case   87:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211B754h case   87:*/		return 0x8211B758;
		  /* 8211B758h */ case   88:  		/* bc 12, CR6_GT, 8 */
		/* 8211B758h case   88:*/		if ( regs.CR[6].gt ) { return 0x8211B760;  }
		/* 8211B758h case   88:*/		return 0x8211B75C;
		  /* 8211B75Ch */ case   89:  		/* fmr FR0, FR13 */
		/* 8211B75Ch case   89:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR13);
		/* 8211B75Ch case   89:*/		return 0x8211B760;
	}
	return 0x8211B760;
} // Block from 8211B5F8h-8211B760h (90 instructions)

//////////////////////////////////////////////////////
// Block at 8211B760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B760);
		  /* 8211B760h */ case    0:  		/* stfdx FR0, <#[R9 + R10]> */
		/* 8211B760h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211B760h case    0:*/		return 0x8211B764;
		  /* 8211B764h */ case    1:  		/* addi R10, R10, 16 */
		/* 8211B764h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211B764h case    1:*/		return 0x8211B768;
		  /* 8211B768h */ case    2:  		/* bc 16, CR0_LT, -28 */
		/* 8211B768h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B74C;  }
		/* 8211B768h case    2:*/		return 0x8211B76C;
		  /* 8211B76Ch */ case    3:  		/* b 2048 */
		/* 8211B76Ch case    3:*/		return 0x8211BF6C;
		/* 8211B76Ch case    3:*/		return 0x8211B770;
		  /* 8211B770h */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8211B770h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B770h case    4:*/		return 0x8211B774;
		  /* 8211B774h */ case    5:  		/* bc 12, CR6_EQ, 2040 */
		/* 8211B774h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B774h case    5:*/		return 0x8211B778;
		  /* 8211B778h */ case    6:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211B778h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B778h case    6:*/		return 0x8211B77C;
		  /* 8211B77Ch */ case    7:  		/* mtspr CTR, R26 */
		/* 8211B77Ch case    7:*/		regs.CTR = regs.R26;
		/* 8211B77Ch case    7:*/		return 0x8211B780;
		  /* 8211B780h */ case    8:  		/* lwz R8, <#[R1 + 80]> */
		/* 8211B780h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B780h case    8:*/		return 0x8211B784;
		  /* 8211B784h */ case    9:  		/* addi R10, R11, 8 */
		/* 8211B784h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8211B784h case    9:*/		return 0x8211B788;
		  /* 8211B788h */ case   10:  		/* subf R9, R11, R27 */
		/* 8211B788h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R27);
		/* 8211B788h case   10:*/		return 0x8211B78C;
		  /* 8211B78Ch */ case   11:  		/* subf R11, R11, R8 */
		/* 8211B78Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8211B78Ch case   11:*/		return 0x8211B790;
		  /* 8211B790h */ case   12:  		/* lfdx FR0, <#[R11 + R10]> */
		/* 8211B790h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211B790h case   12:*/		return 0x8211B794;
		  /* 8211B794h */ case   13:  		/* lfd FR13, <#[R10]> */
		/* 8211B794h case   13:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8211B794h case   13:*/		return 0x8211B798;
		  /* 8211B798h */ case   14:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211B798h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211B798h case   14:*/		return 0x8211B79C;
		  /* 8211B79Ch */ case   15:  		/* bc 12, CR6_LT, 8 */
		/* 8211B79Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x8211B7A4;  }
		/* 8211B79Ch case   15:*/		return 0x8211B7A0;
		  /* 8211B7A0h */ case   16:  		/* fmr FR0, FR13 */
		/* 8211B7A0h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR13);
		/* 8211B7A0h case   16:*/		return 0x8211B7A4;
	}
	return 0x8211B7A4;
} // Block from 8211B760h-8211B7A4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211B7A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B7A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B7A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B7A4);
		  /* 8211B7A4h */ case    0:  		/* stfdx FR0, <#[R10 + R9]> */
		/* 8211B7A4h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8211B7A4h case    0:*/		return 0x8211B7A8;
		  /* 8211B7A8h */ case    1:  		/* addi R10, R10, 16 */
		/* 8211B7A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211B7A8h case    1:*/		return 0x8211B7AC;
		  /* 8211B7ACh */ case    2:  		/* bc 16, CR0_LT, -28 */
		/* 8211B7ACh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B790;  }
		/* 8211B7ACh case    2:*/		return 0x8211B7B0;
		  /* 8211B7B0h */ case    3:  		/* b 1980 */
		/* 8211B7B0h case    3:*/		return 0x8211BF6C;
		/* 8211B7B0h case    3:*/		return 0x8211B7B4;
		  /* 8211B7B4h */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8211B7B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B7B4h case    4:*/		return 0x8211B7B8;
		  /* 8211B7B8h */ case    5:  		/* bc 12, CR6_EQ, 1972 */
		/* 8211B7B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B7B8h case    5:*/		return 0x8211B7BC;
		  /* 8211B7BCh */ case    6:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211B7BCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B7BCh case    6:*/		return 0x8211B7C0;
		  /* 8211B7C0h */ case    7:  		/* addi R11, R27, 8 */
		/* 8211B7C0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211B7C0h case    7:*/		return 0x8211B7C4;
		  /* 8211B7C4h */ case    8:  		/* lwz R9, <#[R1 + 80]> */
		/* 8211B7C4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B7C4h case    8:*/		return 0x8211B7C8;
		  /* 8211B7C8h */ case    9:  		/* mtspr CTR, R26 */
		/* 8211B7C8h case    9:*/		regs.CTR = regs.R26;
		/* 8211B7C8h case    9:*/		return 0x8211B7CC;
		  /* 8211B7CCh */ case   10:  		/* subf R10, R27, R10 */
		/* 8211B7CCh case   10:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211B7CCh case   10:*/		return 0x8211B7D0;
		  /* 8211B7D0h */ case   11:  		/* lfdx FR0, <#[R10 + R11]> */
		/* 8211B7D0h case   11:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211B7D0h case   11:*/		return 0x8211B7D4;
		  /* 8211B7D4h */ case   12:  		/* lfd FR13, <#[R9 + 8]> */
		/* 8211B7D4h case   12:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000008) );
		/* 8211B7D4h case   12:*/		return 0x8211B7D8;
		  /* 8211B7D8h */ case   13:  		/* fmul FR0, FR0, FR13 */
		/* 8211B7D8h case   13:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8211B7D8h case   13:*/		return 0x8211B7DC;
		  /* 8211B7DCh */ case   14:  		/* stfd FR0, <#[R11]> */
		/* 8211B7DCh case   14:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B7DCh case   14:*/		return 0x8211B7E0;
		  /* 8211B7E0h */ case   15:  		/* addi R11, R11, 16 */
		/* 8211B7E0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B7E0h case   15:*/		return 0x8211B7E4;
		  /* 8211B7E4h */ case   16:  		/* bc 16, CR0_LT, -20 */
		/* 8211B7E4h case   16:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B7D0;  }
		/* 8211B7E4h case   16:*/		return 0x8211B7E8;
		  /* 8211B7E8h */ case   17:  		/* b 1924 */
		/* 8211B7E8h case   17:*/		return 0x8211BF6C;
		/* 8211B7E8h case   17:*/		return 0x8211B7EC;
		  /* 8211B7ECh */ case   18:  		/* cmplwi CR6, R26, 0 */
		/* 8211B7ECh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B7ECh case   18:*/		return 0x8211B7F0;
		  /* 8211B7F0h */ case   19:  		/* bc 12, CR6_EQ, 1916 */
		/* 8211B7F0h case   19:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B7F0h case   19:*/		return 0x8211B7F4;
		  /* 8211B7F4h */ case   20:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B7F4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B7F4h case   20:*/		return 0x8211B7F8;
		  /* 8211B7F8h */ case   21:  		/* addi R11, R27, 8 */
		/* 8211B7F8h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211B7F8h case   21:*/		return 0x8211B7FC;
		  /* 8211B7FCh */ case   22:  		/* lwz R9, <#[R1 + 84]> */
		/* 8211B7FCh case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B7FCh case   22:*/		return 0x8211B800;
		  /* 8211B800h */ case   23:  		/* mtspr CTR, R26 */
		/* 8211B800h case   23:*/		regs.CTR = regs.R26;
		/* 8211B800h case   23:*/		return 0x8211B804;
		  /* 8211B804h */ case   24:  		/* subf R10, R27, R10 */
		/* 8211B804h case   24:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211B804h case   24:*/		return 0x8211B808;
		  /* 8211B808h */ case   25:  		/* lfdx FR0, <#[R11 + R10]> */
		/* 8211B808h case   25:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211B808h case   25:*/		return 0x8211B80C;
		  /* 8211B80Ch */ case   26:  		/* lfd FR13, <#[R9 + 8]> */
		/* 8211B80Ch case   26:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000008) );
		/* 8211B80Ch case   26:*/		return 0x8211B810;
		  /* 8211B810h */ case   27:  		/* fmul FR0, FR0, FR13 */
		/* 8211B810h case   27:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8211B810h case   27:*/		return 0x8211B814;
		  /* 8211B814h */ case   28:  		/* stfd FR0, <#[R11]> */
		/* 8211B814h case   28:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B814h case   28:*/		return 0x8211B818;
		  /* 8211B818h */ case   29:  		/* addi R11, R11, 16 */
		/* 8211B818h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B818h case   29:*/		return 0x8211B81C;
		  /* 8211B81Ch */ case   30:  		/* bc 16, CR0_LT, -20 */
		/* 8211B81Ch case   30:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B808;  }
		/* 8211B81Ch case   30:*/		return 0x8211B820;
		  /* 8211B820h */ case   31:  		/* b 1868 */
		/* 8211B820h case   31:*/		return 0x8211BF6C;
		/* 8211B820h case   31:*/		return 0x8211B824;
		  /* 8211B824h */ case   32:  		/* lwz R11, <#[R1 + 100]> */
		/* 8211B824h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8211B824h case   32:*/		return 0x8211B828;
		  /* 8211B828h */ case   33:  		/* lwz R10, <#[R1 + 96]> */
		/* 8211B828h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8211B828h case   33:*/		return 0x8211B82C;
		  /* 8211B82Ch */ case   34:  		/* lwz R8, <#[R11 + 16]> */
		/* 8211B82Ch case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 8211B82Ch case   34:*/		return 0x8211B830;
		  /* 8211B830h */ case   35:  		/* lwz R9, <#[R10 + 20]> */
		/* 8211B830h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000014) );
		/* 8211B830h case   35:*/		return 0x8211B834;
		  /* 8211B834h */ case   36:  		/* lwz R29, <#[R10 + 24]> */
		/* 8211B834h case   36:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + 0x00000018) );
		/* 8211B834h case   36:*/		return 0x8211B838;
		  /* 8211B838h */ case   37:  		/* lwz R10, <#[R8 + 16]> */
		/* 8211B838h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000010) );
		/* 8211B838h case   37:*/		return 0x8211B83C;
		  /* 8211B83Ch */ case   38:  		/* cmpwi CR6, R10, 1 */
		/* 8211B83Ch case   38:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8211B83Ch case   38:*/		return 0x8211B840;
		  /* 8211B840h */ case   39:  		/* bc 4, CR6_EQ, 16 */
		/* 8211B840h case   39:*/		if ( !regs.CR[6].eq ) { return 0x8211B850;  }
		/* 8211B840h case   39:*/		return 0x8211B844;
		  /* 8211B844h */ case   40:  		/* lwz R10, <#[R11 + 24]> */
		/* 8211B844h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8211B844h case   40:*/		return 0x8211B848;
		  /* 8211B848h */ case   41:  		/* lwz R30, <#[R11 + 20]> */
		/* 8211B848h case   41:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000014) );
		/* 8211B848h case   41:*/		return 0x8211B84C;
		  /* 8211B84Ch */ case   42:  		/* b 12 */
		/* 8211B84Ch case   42:*/		return 0x8211B858;
		/* 8211B84Ch case   42:*/		return 0x8211B850;
	}
	return 0x8211B850;
} // Block from 8211B7A4h-8211B850h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8211B850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B850);
		  /* 8211B850h */ case    0:  		/* lwz R10, <#[R11 + 20]> */
		/* 8211B850h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8211B850h case    0:*/		return 0x8211B854;
		  /* 8211B854h */ case    1:  		/* lwz R30, <#[R11 + 24]> */
		/* 8211B854h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000018) );
		/* 8211B854h case    1:*/		return 0x8211B858;
	}
	return 0x8211B858;
} // Block from 8211B850h-8211B858h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211B858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B858);
		  /* 8211B858h */ case    0:  		/* cmplw CR6, R29, R10 */
		/* 8211B858h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 8211B858h case    0:*/		return 0x8211B85C;
		  /* 8211B85Ch */ case    1:  		/* bc 4, CR6_EQ, 1904 */
		/* 8211B85Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211BFCC;  }
		/* 8211B85Ch case    1:*/		return 0x8211B860;
		  /* 8211B860h */ case    2:  		/* mullw R11, R30, R9 */
		/* 8211B860h case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R30,regs.R9);
		/* 8211B860h case    2:*/		return 0x8211B864;
		  /* 8211B864h */ case    3:  		/* cmplw CR6, R11, R26 */
		/* 8211B864h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8211B864h case    3:*/		return 0x8211B868;
		  /* 8211B868h */ case    4:  		/* bc 4, CR6_EQ, 1892 */
		/* 8211B868h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211BFCC;  }
		/* 8211B868h case    4:*/		return 0x8211B86C;
		  /* 8211B86Ch */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 8211B86Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211B86Ch case    5:*/		return 0x8211B870;
		  /* 8211B870h */ case    6:  		/* bc 12, CR6_EQ, 1788 */
		/* 8211B870h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B870h case    6:*/		return 0x8211B874;
		  /* 8211B874h */ case    7:  		/* lis R11, -32256 */
		/* 8211B874h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B874h case    7:*/		return 0x8211B878;
		  /* 8211B878h */ case    8:  		/* rlwinm R8, R30, 4, 0, 27 */
		/* 8211B878h case    8:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R8,regs.R30);
		/* 8211B878h case    8:*/		return 0x8211B87C;
		  /* 8211B87Ch */ case    9:  		/* mr R5, R24 */
		/* 8211B87Ch case    9:*/		regs.R5 = regs.R24;
		/* 8211B87Ch case    9:*/		return 0x8211B880;
		  /* 8211B880h */ case   10:  		/* addi R6, R27, 8 */
		/* 8211B880h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x8);
		/* 8211B880h case   10:*/		return 0x8211B884;
		  /* 8211B884h */ case   11:  		/* mr R31, R9 */
		/* 8211B884h case   11:*/		regs.R31 = regs.R9;
		/* 8211B884h case   11:*/		return 0x8211B888;
		  /* 8211B888h */ case   12:  		/* lfd FR12, <#[R11 + 1808]> */
		/* 8211B888h case   12:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B888h case   12:*/		return 0x8211B88C;
		  /* 8211B88Ch */ case   13:  		/* cmplwi CR6, R30, 0 */
		/* 8211B88Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211B88Ch case   13:*/		return 0x8211B890;
		  /* 8211B890h */ case   14:  		/* bc 12, CR6_EQ, 96 */
		/* 8211B890h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211B8F0;  }
		/* 8211B890h case   14:*/		return 0x8211B894;
		  /* 8211B894h */ case   15:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211B894h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B894h case   15:*/		return 0x8211B898;
		  /* 8211B898h */ case   16:  		/* addi R3, R6, -16 */
		/* 8211B898h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R6,0xFFFFFFF0);
		/* 8211B898h case   16:*/		return 0x8211B89C;
		  /* 8211B89Ch */ case   17:  		/* mr R4, R30 */
		/* 8211B89Ch case   17:*/		regs.R4 = regs.R30;
		/* 8211B89Ch case   17:*/		return 0x8211B8A0;
		  /* 8211B8A0h */ case   18:  		/* addi R7, R11, 8 */
		/* 8211B8A0h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x8);
		/* 8211B8A0h case   18:*/		return 0x8211B8A4;
		  /* 8211B8A4h */ case   19:  		/* fmr FR0, FR12 */
		/* 8211B8A4h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 8211B8A4h case   19:*/		return 0x8211B8A8;
		  /* 8211B8A8h */ case   20:  		/* mr R11, R24 */
		/* 8211B8A8h case   20:*/		regs.R11 = regs.R24;
		/* 8211B8A8h case   20:*/		return 0x8211B8AC;
		  /* 8211B8ACh */ case   21:  		/* cmplwi CR6, R29, 0 */
		/* 8211B8ACh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211B8ACh case   21:*/		return 0x8211B8B0;
		  /* 8211B8B0h */ case   22:  		/* bc 12, CR6_EQ, 48 */
		/* 8211B8B0h case   22:*/		if ( regs.CR[6].eq ) { return 0x8211B8E0;  }
		/* 8211B8B0h case   22:*/		return 0x8211B8B4;
		  /* 8211B8B4h */ case   23:  		/* subf R10, R8, R7 */
		/* 8211B8B4h case   23:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R8,regs.R7);
		/* 8211B8B4h case   23:*/		return 0x8211B8B8;
		  /* 8211B8B8h */ case   24:  		/* mtspr CTR, R29 */
		/* 8211B8B8h case   24:*/		regs.CTR = regs.R29;
		/* 8211B8B8h case   24:*/		return 0x8211B8BC;
		  /* 8211B8BCh */ case   25:  		/* add R9, R11, R5 */
		/* 8211B8BCh case   25:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R5);
		/* 8211B8BCh case   25:*/		return 0x8211B8C0;
		  /* 8211B8C0h */ case   26:  		/* lwz R28, <#[R1 + 80]> */
		/* 8211B8C0h case   26:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B8C0h case   26:*/		return 0x8211B8C4;
		  /* 8211B8C4h */ case   27:  		/* lfdux FR13, <#[R10 + R8]> */
		/* 8211B8C4h case   27:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		regs.R10 = (uint32)(regs.R10 + regs.R8 + 0x00000000);
		/* 8211B8C4h case   27:*/		return 0x8211B8C8;
		  /* 8211B8C8h */ case   28:  		/* addi R11, R11, 1 */
		/* 8211B8C8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211B8C8h case   28:*/		return 0x8211B8CC;
		  /* 8211B8CCh */ case   29:  		/* rlwinm R9, R9, 4, 0, 27 */
		/* 8211B8CCh case   29:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R9,regs.R9);
		/* 8211B8CCh case   29:*/		return 0x8211B8D0;
		  /* 8211B8D0h */ case   30:  		/* add R9, R9, R28 */
		/* 8211B8D0h case   30:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R28);
		/* 8211B8D0h case   30:*/		return 0x8211B8D4;
		  /* 8211B8D4h */ case   31:  		/* lfd FR11, <#[R9 + 8]> */
		/* 8211B8D4h case   31:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R9 + 0x00000008) );
		/* 8211B8D4h case   31:*/		return 0x8211B8D8;
		  /* 8211B8D8h */ case   32:  		/* fmadd FR0, FR11, FR13, FR0 */
		/* 8211B8D8h case   32:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR11,regs.FR13,regs.FR0);
		/* 8211B8D8h case   32:*/		return 0x8211B8DC;
		  /* 8211B8DCh */ case   33:  		/* bc 16, CR0_LT, -32 */
		/* 8211B8DCh case   33:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B8BC;  }
		/* 8211B8DCh case   33:*/		return 0x8211B8E0;
	}
	return 0x8211B8E0;
} // Block from 8211B858h-8211B8E0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8211B8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B8E0);
		  /* 8211B8E0h */ case    0:  		/* stfdu FR0, <#[R3 + 16]> */
		/* 8211B8E0h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R3 + 0x00000010) );
		regs.R3 = (uint32)(regs.R3 + 0x00000010);
		/* 8211B8E0h case    0:*/		return 0x8211B8E4;
		  /* 8211B8E4h */ case    1:  		/* addic. R4, R4, -1 */
		/* 8211B8E4h case    1:*/		cpu::op::addic<1>(regs,&regs.R4,regs.R4,0xFFFFFFFF);
		/* 8211B8E4h case    1:*/		return 0x8211B8E8;
		  /* 8211B8E8h */ case    2:  		/* addi R7, R7, 16 */
		/* 8211B8E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x10);
		/* 8211B8E8h case    2:*/		return 0x8211B8EC;
		  /* 8211B8ECh */ case    3:  		/* bc 4, CR0_EQ, -72 */
		/* 8211B8ECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8211B8A4;  }
		/* 8211B8ECh case    3:*/		return 0x8211B8F0;
	}
	return 0x8211B8F0;
} // Block from 8211B8E0h-8211B8F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211B8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B8F0);
		  /* 8211B8F0h */ case    0:  		/* addic. R31, R31, -1 */
		/* 8211B8F0h case    0:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 8211B8F0h case    0:*/		return 0x8211B8F4;
		  /* 8211B8F4h */ case    1:  		/* add R6, R6, R8 */
		/* 8211B8F4h case    1:*/		cpu::op::add<0>(regs,&regs.R6,regs.R6,regs.R8);
		/* 8211B8F4h case    1:*/		return 0x8211B8F8;
		  /* 8211B8F8h */ case    2:  		/* add R5, R29, R5 */
		/* 8211B8F8h case    2:*/		cpu::op::add<0>(regs,&regs.R5,regs.R29,regs.R5);
		/* 8211B8F8h case    2:*/		return 0x8211B8FC;
		  /* 8211B8FCh */ case    3:  		/* bc 4, CR0_EQ, -112 */
		/* 8211B8FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8211B88C;  }
		/* 8211B8FCh case    3:*/		return 0x8211B900;
		  /* 8211B900h */ case    4:  		/* b 1644 */
		/* 8211B900h case    4:*/		return 0x8211BF6C;
		/* 8211B900h case    4:*/		return 0x8211B904;
		  /* 8211B904h */ case    5:  		/* lis R11, -32256 */
		/* 8211B904h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B904h case    5:*/		return 0x8211B908;
		  /* 8211B908h */ case    6:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B908h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B908h case    6:*/		return 0x8211B90C;
		  /* 8211B90Ch */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 8211B90Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B90Ch case    7:*/		return 0x8211B910;
		  /* 8211B910h */ case    8:  		/* lfd FR12, <#[R11 + 1808]> */
		/* 8211B910h case    8:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000710) );
		/* 8211B910h case    8:*/		return 0x8211B914;
		  /* 8211B914h */ case    9:  		/* fmr FR0, FR12 */
		/* 8211B914h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 8211B914h case    9:*/		return 0x8211B918;
		  /* 8211B918h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 8211B918h case   10:*/		if ( regs.CR[6].eq ) { return 0x8211B938;  }
		/* 8211B918h case   10:*/		return 0x8211B91C;
		  /* 8211B91Ch */ case   11:  		/* addi R11, R10, -8 */
		/* 8211B91Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFF8);
		/* 8211B91Ch case   11:*/		return 0x8211B920;
		  /* 8211B920h */ case   12:  		/* mtspr CTR, R26 */
		/* 8211B920h case   12:*/		regs.CTR = regs.R26;
		/* 8211B920h case   12:*/		return 0x8211B924;
		  /* 8211B924h */ case   13:  		/* lfdu FR13, <#[R11 + 16]> */
		/* 8211B924h case   13:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000010) );
		regs.R11 = (uint32)(regs.R11 + 0x00000010);
		/* 8211B924h case   13:*/		return 0x8211B928;
		  /* 8211B928h */ case   14:  		/* fmadd FR0, FR13, FR13, FR0 */
		/* 8211B928h case   14:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR13,regs.FR13,regs.FR0);
		/* 8211B928h case   14:*/		return 0x8211B92C;
		  /* 8211B92Ch */ case   15:  		/* bc 16, CR0_LT, -8 */
		/* 8211B92Ch case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B924;  }
		/* 8211B92Ch case   15:*/		return 0x8211B930;
		  /* 8211B930h */ case   16:  		/* fcmpu CR6, FR0, FR12 */
		/* 8211B930h case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR12);
		/* 8211B930h case   16:*/		return 0x8211B934;
		  /* 8211B934h */ case   17:  		/* bc 4, CR6_EQ, 12 */
		/* 8211B934h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8211B940;  }
		/* 8211B934h case   17:*/		return 0x8211B938;
	}
	return 0x8211B938;
} // Block from 8211B8F0h-8211B938h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211B938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B938);
		  /* 8211B938h */ case    0:  		/* fmr FR0, FR12 */
		/* 8211B938h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 8211B938h case    0:*/		return 0x8211B93C;
		  /* 8211B93Ch */ case    1:  		/* b 20 */
		/* 8211B93Ch case    1:*/		return 0x8211B950;
		/* 8211B93Ch case    1:*/		return 0x8211B940;
	}
	return 0x8211B940;
} // Block from 8211B938h-8211B940h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211B940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B940);
		  /* 8211B940h */ case    0:  		/* fsqrt FR13, FR0 */
		/* 8211B940h case    0:*/		cpu::op::fsqrt<0>(regs,&regs.FR13,regs.FR0);
		/* 8211B940h case    0:*/		return 0x8211B944;
		  /* 8211B944h */ case    1:  		/* lis R11, -32256 */
		/* 8211B944h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211B944h case    1:*/		return 0x8211B948;
		  /* 8211B948h */ case    2:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 8211B948h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 8211B948h case    2:*/		return 0x8211B94C;
		  /* 8211B94Ch */ case    3:  		/* fdiv FR0, FR0, FR13 */
		/* 8211B94Ch case    3:*/		cpu::op::fdiv<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8211B94Ch case    3:*/		return 0x8211B950;
	}
	return 0x8211B950;
} // Block from 8211B940h-8211B950h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211B950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B950);
		  /* 8211B950h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8211B950h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B950h case    0:*/		return 0x8211B954;
		  /* 8211B954h */ case    1:  		/* bc 12, CR6_EQ, 1560 */
		/* 8211B954h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B954h case    1:*/		return 0x8211B958;
		  /* 8211B958h */ case    2:  		/* addi R11, R27, 8 */
		/* 8211B958h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211B958h case    2:*/		return 0x8211B95C;
		  /* 8211B95Ch */ case    3:  		/* mtspr CTR, R26 */
		/* 8211B95Ch case    3:*/		regs.CTR = regs.R26;
		/* 8211B95Ch case    3:*/		return 0x8211B960;
		  /* 8211B960h */ case    4:  		/* subf R10, R27, R10 */
		/* 8211B960h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211B960h case    4:*/		return 0x8211B964;
		  /* 8211B964h */ case    5:  		/* lfdx FR13, <#[R11 + R10]> */
		/* 8211B964h case    5:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211B964h case    5:*/		return 0x8211B968;
		  /* 8211B968h */ case    6:  		/* fmul FR13, FR13, FR0 */
		/* 8211B968h case    6:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 8211B968h case    6:*/		return 0x8211B96C;
		  /* 8211B96Ch */ case    7:  		/* stfd FR13, <#[R11]> */
		/* 8211B96Ch case    7:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B96Ch case    7:*/		return 0x8211B970;
		  /* 8211B970h */ case    8:  		/* addi R11, R11, 16 */
		/* 8211B970h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211B970h case    8:*/		return 0x8211B974;
		  /* 8211B974h */ case    9:  		/* bc 16, CR0_LT, -16 */
		/* 8211B974h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B964;  }
		/* 8211B974h case    9:*/		return 0x8211B978;
		  /* 8211B978h */ case   10:  		/* b 1524 */
		/* 8211B978h case   10:*/		return 0x8211BF6C;
		/* 8211B978h case   10:*/		return 0x8211B97C;
		  /* 8211B97Ch */ case   11:  		/* mr R28, R24 */
		/* 8211B97Ch case   11:*/		regs.R28 = regs.R24;
		/* 8211B97Ch case   11:*/		return 0x8211B980;
		  /* 8211B980h */ case   12:  		/* cmplwi CR6, R26, 0 */
		/* 8211B980h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B980h case   12:*/		return 0x8211B984;
		  /* 8211B984h */ case   13:  		/* bc 12, CR6_EQ, 1512 */
		/* 8211B984h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B984h case   13:*/		return 0x8211B988;
		  /* 8211B988h */ case   14:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211B988h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B988h case   14:*/		return 0x8211B98C;
		  /* 8211B98Ch */ case   15:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211B98Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211B98Ch case   15:*/		return 0x8211B990;
		  /* 8211B990h */ case   16:  		/* addi R31, R11, 8 */
		/* 8211B990h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8211B990h case   16:*/		return 0x8211B994;
		  /* 8211B994h */ case   17:  		/* subf R29, R11, R27 */
		/* 8211B994h case   17:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R27);
		/* 8211B994h case   17:*/		return 0x8211B998;
		  /* 8211B998h */ case   18:  		/* subf R30, R11, R10 */
		/* 8211B998h case   18:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8211B998h case   18:*/		return 0x8211B99C;
		  /* 8211B99Ch */ case   19:  		/* lfdx FR2, <#[R31 + R30]> */
		/* 8211B99Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 8211B99Ch case   19:*/		return 0x8211B9A0;
		  /* 8211B9A0h */ case   20:  		/* lfd FR1, <#[R31]> */
		/* 8211B9A0h case   20:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211B9A0h case   20:*/		return 0x8211B9A4;
		  /* 8211B9A4h */ case   21:  		/* bl -562156 */
		/* 8211B9A4h case   21:*/		regs.LR = 0x8211B9A8; return 0x820925B8;
		/* 8211B9A4h case   21:*/		return 0x8211B9A8;
		  /* 8211B9A8h */ case   22:  		/* stfdx FR1, <#[R31 + R29]> */
		/* 8211B9A8h case   22:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211B9A8h case   22:*/		return 0x8211B9AC;
		  /* 8211B9ACh */ case   23:  		/* bl -538996 */
		/* 8211B9ACh case   23:*/		regs.LR = 0x8211B9B0; return 0x82098038;
		/* 8211B9ACh case   23:*/		return 0x8211B9B0;
		  /* 8211B9B0h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 8211B9B0h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211B9B0h case   24:*/		return 0x8211B9B4;
		  /* 8211B9B4h */ case   25:  		/* bc 4, CR0_GT, 12 */
		/* 8211B9B4h case   25:*/		if ( !regs.CR[0].gt ) { return 0x8211B9C0;  }
		/* 8211B9B4h case   25:*/		return 0x8211B9B8;
		  /* 8211B9B8h */ case   26:  		/* cmpwi CR6, R3, 2 */
		/* 8211B9B8h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8211B9B8h case   26:*/		return 0x8211B9BC;
		  /* 8211B9BCh */ case   27:  		/* bc 4, CR6_GT, 1552 */
		/* 8211B9BCh case   27:*/		if ( !regs.CR[6].gt ) { return 0x8211BFCC;  }
		/* 8211B9BCh case   27:*/		return 0x8211B9C0;
	}
	return 0x8211B9C0;
} // Block from 8211B950h-8211B9C0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8211B9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211B9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211B9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211B9C0);
		  /* 8211B9C0h */ case    0:  		/* addi R28, R28, 1 */
		/* 8211B9C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8211B9C0h case    0:*/		return 0x8211B9C4;
		  /* 8211B9C4h */ case    1:  		/* addi R31, R31, 16 */
		/* 8211B9C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211B9C4h case    1:*/		return 0x8211B9C8;
		  /* 8211B9C8h */ case    2:  		/* cmplw CR6, R28, R26 */
		/* 8211B9C8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 8211B9C8h case    2:*/		return 0x8211B9CC;
		  /* 8211B9CCh */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 8211B9CCh case    3:*/		if ( regs.CR[6].lt ) { return 0x8211B99C;  }
		/* 8211B9CCh case    3:*/		return 0x8211B9D0;
		  /* 8211B9D0h */ case    4:  		/* b 1436 */
		/* 8211B9D0h case    4:*/		return 0x8211BF6C;
		/* 8211B9D0h case    4:*/		return 0x8211B9D4;
		  /* 8211B9D4h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8211B9D4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211B9D4h case    5:*/		return 0x8211B9D8;
		  /* 8211B9D8h */ case    6:  		/* bc 12, CR6_EQ, 1428 */
		/* 8211B9D8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211B9D8h case    6:*/		return 0x8211B9DC;
		  /* 8211B9DCh */ case    7:  		/* lis R9, -32255 */
		/* 8211B9DCh case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8211B9DCh case    7:*/		return 0x8211B9E0;
		  /* 8211B9E0h */ case    8:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211B9E0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211B9E0h case    8:*/		return 0x8211B9E4;
		  /* 8211B9E4h */ case    9:  		/* addi R11, R27, 8 */
		/* 8211B9E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211B9E4h case    9:*/		return 0x8211B9E8;
		  /* 8211B9E8h */ case   10:  		/* mtspr CTR, R26 */
		/* 8211B9E8h case   10:*/		regs.CTR = regs.R26;
		/* 8211B9E8h case   10:*/		return 0x8211B9EC;
		  /* 8211B9ECh */ case   11:  		/* subf R10, R27, R10 */
		/* 8211B9ECh case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211B9ECh case   11:*/		return 0x8211B9F0;
		  /* 8211B9F0h */ case   12:  		/* lfd FR0, <#[R9 + 9032]> */
		/* 8211B9F0h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00002348) );
		/* 8211B9F0h case   12:*/		return 0x8211B9F4;
		  /* 8211B9F4h */ case   13:  		/* lfdx FR13, <#[R11 + R10]> */
		/* 8211B9F4h case   13:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211B9F4h case   13:*/		return 0x8211B9F8;
		  /* 8211B9F8h */ case   14:  		/* fmul FR13, FR13, FR0 */
		/* 8211B9F8h case   14:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 8211B9F8h case   14:*/		return 0x8211B9FC;
		  /* 8211B9FCh */ case   15:  		/* stfd FR13, <#[R11]> */
		/* 8211B9FCh case   15:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R11 + 0x00000000) );
		/* 8211B9FCh case   15:*/		return 0x8211BA00;
		  /* 8211BA00h */ case   16:  		/* addi R11, R11, 16 */
		/* 8211BA00h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211BA00h case   16:*/		return 0x8211BA04;
		  /* 8211BA04h */ case   17:  		/* bc 16, CR0_LT, -16 */
		/* 8211BA04h case   17:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211B9F4;  }
		/* 8211BA04h case   17:*/		return 0x8211BA08;
		  /* 8211BA08h */ case   18:  		/* b 1380 */
		/* 8211BA08h case   18:*/		return 0x8211BF6C;
		/* 8211BA08h case   18:*/		return 0x8211BA0C;
		  /* 8211BA0Ch */ case   19:  		/* lis R10, -32256 */
		/* 8211BA0Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211BA0Ch case   19:*/		return 0x8211BA10;
		  /* 8211BA10h */ case   20:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211BA10h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211BA10h case   20:*/		return 0x8211BA14;
		  /* 8211BA14h */ case   21:  		/* lwz R9, <#[R1 + 80]> */
		/* 8211BA14h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BA14h case   21:*/		return 0x8211BA18;
		  /* 8211BA18h */ case   22:  		/* cmplwi CR6, R26, 0 */
		/* 8211BA18h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BA18h case   22:*/		return 0x8211BA1C;
		  /* 8211BA1Ch */ case   23:  		/* lfd FR0, <#[R10 + 1808]> */
		/* 8211BA1Ch case   23:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000710) );
		/* 8211BA1Ch case   23:*/		return 0x8211BA20;
		  /* 8211BA20h */ case   24:  		/* bc 12, CR6_EQ, 1356 */
		/* 8211BA20h case   24:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BA20h case   24:*/		return 0x8211BA24;
		  /* 8211BA24h */ case   25:  		/* addi R10, R9, 8 */
		/* 8211BA24h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 8211BA24h case   25:*/		return 0x8211BA28;
		  /* 8211BA28h */ case   26:  		/* mtspr CTR, R26 */
		/* 8211BA28h case   26:*/		regs.CTR = regs.R26;
		/* 8211BA28h case   26:*/		return 0x8211BA2C;
		  /* 8211BA2Ch */ case   27:  		/* subf R8, R9, R11 */
		/* 8211BA2Ch case   27:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 8211BA2Ch case   27:*/		return 0x8211BA30;
		  /* 8211BA30h */ case   28:  		/* lfdx FR13, <#[R10 + R8]> */
		/* 8211BA30h case   28:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8211BA30h case   28:*/		return 0x8211BA34;
		  /* 8211BA34h */ case   29:  		/* lfd FR12, <#[R10]> */
		/* 8211BA34h case   29:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000000) );
		/* 8211BA34h case   29:*/		return 0x8211BA38;
		  /* 8211BA38h */ case   30:  		/* addi R10, R10, 16 */
		/* 8211BA38h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211BA38h case   30:*/		return 0x8211BA3C;
		  /* 8211BA3Ch */ case   31:  		/* fmadd FR0, FR13, FR12, FR0 */
		/* 8211BA3Ch case   31:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR13,regs.FR12,regs.FR0);
		/* 8211BA3Ch case   31:*/		return 0x8211BA40;
		  /* 8211BA40h */ case   32:  		/* bc 16, CR0_LT, -16 */
		/* 8211BA40h case   32:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BA30;  }
		/* 8211BA40h case   32:*/		return 0x8211BA44;
		  /* 8211BA44h */ case   33:  		/* cmplwi CR6, R26, 0 */
		/* 8211BA44h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BA44h case   33:*/		return 0x8211BA48;
		  /* 8211BA48h */ case   34:  		/* bc 12, CR6_EQ, 1316 */
		/* 8211BA48h case   34:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BA48h case   34:*/		return 0x8211BA4C;
		  /* 8211BA4Ch */ case   35:  		/* lis R8, -32255 */
		/* 8211BA4Ch case   35:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 8211BA4Ch case   35:*/		return 0x8211BA50;
		  /* 8211BA50h */ case   36:  		/* mtspr CTR, R26 */
		/* 8211BA50h case   36:*/		regs.CTR = regs.R26;
		/* 8211BA50h case   36:*/		return 0x8211BA54;
		  /* 8211BA54h */ case   37:  		/* addi R10, R11, 8 */
		/* 8211BA54h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8211BA54h case   37:*/		return 0x8211BA58;
		  /* 8211BA58h */ case   38:  		/* subf R9, R11, R9 */
		/* 8211BA58h case   38:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8211BA58h case   38:*/		return 0x8211BA5C;
		  /* 8211BA5Ch */ case   39:  		/* subf R11, R11, R27 */
		/* 8211BA5Ch case   39:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8211BA5Ch case   39:*/		return 0x8211BA60;
		  /* 8211BA60h */ case   40:  		/* lfd FR13, <#[R8 - 24504]> */
		/* 8211BA60h case   40:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R8 + 0xFFFFA048) );
		/* 8211BA60h case   40:*/		return 0x8211BA64;
		  /* 8211BA64h */ case   41:  		/* lfd FR12, <#[R10]> */
		/* 8211BA64h case   41:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000000) );
		/* 8211BA64h case   41:*/		return 0x8211BA68;
		  /* 8211BA68h */ case   42:  		/* fmul FR12, FR0, FR12 */
		/* 8211BA68h case   42:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR0,regs.FR12);
		/* 8211BA68h case   42:*/		return 0x8211BA6C;
		  /* 8211BA6Ch */ case   43:  		/* lfdx FR11, <#[R9 + R10]> */
		/* 8211BA6Ch case   43:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211BA6Ch case   43:*/		return 0x8211BA70;
		  /* 8211BA70h */ case   44:  		/* fnmsub FR12, FR12, FR13, FR11 */
		/* 8211BA70h case   44:*/		cpu::op::fnmsub<0>(regs,&regs.FR12,regs.FR12,regs.FR13,regs.FR11);
		/* 8211BA70h case   44:*/		return 0x8211BA74;
		  /* 8211BA74h */ case   45:  		/* stfdx FR12, <#[R10 + R11]> */
		/* 8211BA74h case   45:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211BA74h case   45:*/		return 0x8211BA78;
		  /* 8211BA78h */ case   46:  		/* addi R10, R10, 16 */
		/* 8211BA78h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211BA78h case   46:*/		return 0x8211BA7C;
		  /* 8211BA7Ch */ case   47:  		/* bc 16, CR0_LT, -24 */
		/* 8211BA7Ch case   47:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BA64;  }
		/* 8211BA7Ch case   47:*/		return 0x8211BA80;
		  /* 8211BA80h */ case   48:  		/* b 1260 */
		/* 8211BA80h case   48:*/		return 0x8211BF6C;
		/* 8211BA80h case   48:*/		return 0x8211BA84;
		  /* 8211BA84h */ case   49:  		/* lis R10, -32256 */
		/* 8211BA84h case   49:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211BA84h case   49:*/		return 0x8211BA88;
		  /* 8211BA88h */ case   50:  		/* lwz R8, <#[R1 + 88]> */
		/* 8211BA88h case   50:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 8211BA88h case   50:*/		return 0x8211BA8C;
		  /* 8211BA8Ch */ case   51:  		/* lwz R11, <#[R1 + 84]> */
		/* 8211BA8Ch case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8211BA8Ch case   51:*/		return 0x8211BA90;
		  /* 8211BA90h */ case   52:  		/* cmplwi CR6, R26, 0 */
		/* 8211BA90h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BA90h case   52:*/		return 0x8211BA94;
		  /* 8211BA94h */ case   53:  		/* lwz R9, <#[R1 + 80]> */
		/* 8211BA94h case   53:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BA94h case   53:*/		return 0x8211BA98;
		  /* 8211BA98h */ case   54:  		/* lfd FR11, <#[R10 + 1808]> */
		/* 8211BA98h case   54:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R10 + 0x00000710) );
		/* 8211BA98h case   54:*/		return 0x8211BA9C;
		  /* 8211BA9Ch */ case   55:  		/* lfd FR13, <#[R8 + 8]> */
		/* 8211BA9Ch case   55:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00000008) );
		/* 8211BA9Ch case   55:*/		return 0x8211BAA0;
		  /* 8211BAA0h */ case   56:  		/* fmr FR0, FR11 */
		/* 8211BAA0h case   56:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8211BAA0h case   56:*/		return 0x8211BAA4;
		  /* 8211BAA4h */ case   57:  		/* bc 12, CR6_EQ, 36 */
		/* 8211BAA4h case   57:*/		if ( regs.CR[6].eq ) { return 0x8211BAC8;  }
		/* 8211BAA4h case   57:*/		return 0x8211BAA8;
		  /* 8211BAA8h */ case   58:  		/* addi R10, R9, 8 */
		/* 8211BAA8h case   58:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 8211BAA8h case   58:*/		return 0x8211BAAC;
		  /* 8211BAACh */ case   59:  		/* mtspr CTR, R26 */
		/* 8211BAACh case   59:*/		regs.CTR = regs.R26;
		/* 8211BAACh case   59:*/		return 0x8211BAB0;
		  /* 8211BAB0h */ case   60:  		/* subf R8, R9, R11 */
		/* 8211BAB0h case   60:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 8211BAB0h case   60:*/		return 0x8211BAB4;
		  /* 8211BAB4h */ case   61:  		/* lfdx FR12, <#[R10 + R8]> */
		/* 8211BAB4h case   61:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8211BAB4h case   61:*/		return 0x8211BAB8;
		  /* 8211BAB8h */ case   62:  		/* lfd FR10, <#[R10]> */
		/* 8211BAB8h case   62:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R10 + 0x00000000) );
		/* 8211BAB8h case   62:*/		return 0x8211BABC;
		  /* 8211BABCh */ case   63:  		/* addi R10, R10, 16 */
		/* 8211BABCh case   63:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211BABCh case   63:*/		return 0x8211BAC0;
		  /* 8211BAC0h */ case   64:  		/* fmadd FR0, FR12, FR10, FR0 */
		/* 8211BAC0h case   64:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR12,regs.FR10,regs.FR0);
		/* 8211BAC0h case   64:*/		return 0x8211BAC4;
		  /* 8211BAC4h */ case   65:  		/* bc 16, CR0_LT, -16 */
		/* 8211BAC4h case   65:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BAB4;  }
		/* 8211BAC4h case   65:*/		return 0x8211BAC8;
	}
	return 0x8211BAC8;
} // Block from 8211B9C0h-8211BAC8h (66 instructions)

//////////////////////////////////////////////////////
// Block at 8211BAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BAC8);
		  /* 8211BAC8h */ case    0:  		/* lis R10, -32256 */
		/* 8211BAC8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211BAC8h case    0:*/		return 0x8211BACC;
		  /* 8211BACCh */ case    1:  		/* lfd FR12, <#[R10 + 1848]> */
		/* 8211BACCh case    1:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000738) );
		/* 8211BACCh case    1:*/		return 0x8211BAD0;
		  /* 8211BAD0h */ case    2:  		/* fnmsub FR10, FR0, FR0, FR12 */
		/* 8211BAD0h case    2:*/		cpu::op::fnmsub<0>(regs,&regs.FR10,regs.FR0,regs.FR0,regs.FR12);
		/* 8211BAD0h case    2:*/		return 0x8211BAD4;
		  /* 8211BAD4h */ case    3:  		/* fmul FR10, FR10, FR13 */
		/* 8211BAD4h case    3:*/		cpu::op::fmul<0>(regs,&regs.FR10,regs.FR10,regs.FR13);
		/* 8211BAD4h case    3:*/		return 0x8211BAD8;
		  /* 8211BAD8h */ case    4:  		/* fnmsub FR12, FR10, FR13, FR12 */
		/* 8211BAD8h case    4:*/		cpu::op::fnmsub<0>(regs,&regs.FR12,regs.FR10,regs.FR13,regs.FR12);
		/* 8211BAD8h case    4:*/		return 0x8211BADC;
		  /* 8211BADCh */ case    5:  		/* fcmpu CR6, FR12, FR11 */
		/* 8211BADCh case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR11);
		/* 8211BADCh case    5:*/		return 0x8211BAE0;
		  /* 8211BAE0h */ case    6:  		/* bc 4, CR6_LT, 32 */
		/* 8211BAE0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8211BB00;  }
		/* 8211BAE0h case    6:*/		return 0x8211BAE4;
		  /* 8211BAE4h */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 8211BAE4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BAE4h case    7:*/		return 0x8211BAE8;
		  /* 8211BAE8h */ case    8:  		/* bc 12, CR6_EQ, 1156 */
		/* 8211BAE8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BAE8h case    8:*/		return 0x8211BAEC;
		  /* 8211BAECh */ case    9:  		/* addi R11, R27, -8 */
		/* 8211BAECh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFF8);
		/* 8211BAECh case    9:*/		return 0x8211BAF0;
		  /* 8211BAF0h */ case   10:  		/* mtspr CTR, R26 */
		/* 8211BAF0h case   10:*/		regs.CTR = regs.R26;
		/* 8211BAF0h case   10:*/		return 0x8211BAF4;
		  /* 8211BAF4h */ case   11:  		/* stfdu FR11, <#[R11 + 16]> */
		/* 8211BAF4h case   11:*/		cpu::mem::store64f( regs, regs.FR11, (uint32)(regs.R11 + 0x00000010) );
		regs.R11 = (uint32)(regs.R11 + 0x00000010);
		/* 8211BAF4h case   11:*/		return 0x8211BAF8;
		  /* 8211BAF8h */ case   12:  		/* bc 16, CR0_LT, -4 */
		/* 8211BAF8h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BAF4;  }
		/* 8211BAF8h case   12:*/		return 0x8211BAFC;
		  /* 8211BAFCh */ case   13:  		/* b 1136 */
		/* 8211BAFCh case   13:*/		return 0x8211BF6C;
		/* 8211BAFCh case   13:*/		return 0x8211BB00;
	}
	return 0x8211BB00;
} // Block from 8211BAC8h-8211BB00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211BB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BB00);
		  /* 8211BB00h */ case    0:  		/* fsqrt FR12, FR12 */
		/* 8211BB00h case    0:*/		cpu::op::fsqrt<0>(regs,&regs.FR12,regs.FR12);
		/* 8211BB00h case    0:*/		return 0x8211BB04;
		  /* 8211BB04h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 8211BB04h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BB04h case    1:*/		return 0x8211BB08;
		  /* 8211BB08h */ case    2:  		/* fmadd FR0, FR0, FR13, FR12 */
		/* 8211BB08h case    2:*/		cpu::op::fmadd<0>(regs,&regs.FR0,regs.FR0,regs.FR13,regs.FR12);
		/* 8211BB08h case    2:*/		return 0x8211BB0C;
		  /* 8211BB0Ch */ case    3:  		/* bc 12, CR6_EQ, 1120 */
		/* 8211BB0Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BB0Ch case    3:*/		return 0x8211BB10;
		  /* 8211BB10h */ case    4:  		/* addi R10, R11, 8 */
		/* 8211BB10h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8211BB10h case    4:*/		return 0x8211BB14;
		  /* 8211BB14h */ case    5:  		/* mtspr CTR, R26 */
		/* 8211BB14h case    5:*/		regs.CTR = regs.R26;
		/* 8211BB14h case    5:*/		return 0x8211BB18;
		  /* 8211BB18h */ case    6:  		/* subf R9, R11, R9 */
		/* 8211BB18h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8211BB18h case    6:*/		return 0x8211BB1C;
		  /* 8211BB1Ch */ case    7:  		/* subf R11, R11, R27 */
		/* 8211BB1Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8211BB1Ch case    7:*/		return 0x8211BB20;
		  /* 8211BB20h */ case    8:  		/* lfd FR12, <#[R10]> */
		/* 8211BB20h case    8:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000000) );
		/* 8211BB20h case    8:*/		return 0x8211BB24;
		  /* 8211BB24h */ case    9:  		/* fmul FR12, FR0, FR12 */
		/* 8211BB24h case    9:*/		cpu::op::fmul<0>(regs,&regs.FR12,regs.FR0,regs.FR12);
		/* 8211BB24h case    9:*/		return 0x8211BB28;
		  /* 8211BB28h */ case   10:  		/* lfdx FR11, <#[R9 + R10]> */
		/* 8211BB28h case   10:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211BB28h case   10:*/		return 0x8211BB2C;
		  /* 8211BB2Ch */ case   11:  		/* fmsub FR12, FR11, FR13, FR12 */
		/* 8211BB2Ch case   11:*/		cpu::op::fmsub<0>(regs,&regs.FR12,regs.FR11,regs.FR13,regs.FR12);
		/* 8211BB2Ch case   11:*/		return 0x8211BB30;
		  /* 8211BB30h */ case   12:  		/* stfdx FR12, <#[R11 + R10]> */
		/* 8211BB30h case   12:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211BB30h case   12:*/		return 0x8211BB34;
		  /* 8211BB34h */ case   13:  		/* addi R10, R10, 16 */
		/* 8211BB34h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211BB34h case   13:*/		return 0x8211BB38;
		  /* 8211BB38h */ case   14:  		/* bc 16, CR0_LT, -24 */
		/* 8211BB38h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BB20;  }
		/* 8211BB38h case   14:*/		return 0x8211BB3C;
		  /* 8211BB3Ch */ case   15:  		/* b 1072 */
		/* 8211BB3Ch case   15:*/		return 0x8211BF6C;
		/* 8211BB3Ch case   15:*/		return 0x8211BB40;
		  /* 8211BB40h */ case   16:  		/* cmplwi CR6, R26, 0 */
		/* 8211BB40h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BB40h case   16:*/		return 0x8211BB44;
		  /* 8211BB44h */ case   17:  		/* bc 12, CR6_EQ, 1064 */
		/* 8211BB44h case   17:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BB44h case   17:*/		return 0x8211BB48;
		  /* 8211BB48h */ case   18:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211BB48h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BB48h case   18:*/		return 0x8211BB4C;
		  /* 8211BB4Ch */ case   19:  		/* addi R31, R27, 8 */
		/* 8211BB4Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211BB4Ch case   19:*/		return 0x8211BB50;
		  /* 8211BB50h */ case   20:  		/* mr R30, R26 */
		/* 8211BB50h case   20:*/		regs.R30 = regs.R26;
		/* 8211BB50h case   20:*/		return 0x8211BB54;
		  /* 8211BB54h */ case   21:  		/* subf R29, R27, R11 */
		/* 8211BB54h case   21:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211BB54h case   21:*/		return 0x8211BB58;
		  /* 8211BB58h */ case   22:  		/* lis R11, -32256 */
		/* 8211BB58h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211BB58h case   22:*/		return 0x8211BB5C;
		  /* 8211BB5Ch */ case   23:  		/* lfd FR31, <#[R11 + 4736]> */
		/* 8211BB5Ch case   23:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00001280) );
		/* 8211BB5Ch case   23:*/		return 0x8211BB60;
		  /* 8211BB60h */ case   24:  		/* lfdx FR0, <#[R29 + R31]> */
		/* 8211BB60h case   24:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 8211BB60h case   24:*/		return 0x8211BB64;
		  /* 8211BB64h */ case   25:  		/* fadd FR1, FR0, FR31 */
		/* 8211BB64h case   25:*/		cpu::op::fadd<0>(regs,&regs.FR1,regs.FR0,regs.FR31);
		/* 8211BB64h case   25:*/		return 0x8211BB68;
		  /* 8211BB68h */ case   26:  		/* bl -564360 */
		/* 8211BB68h case   26:*/		regs.LR = 0x8211BB6C; return 0x82091EE0;
		/* 8211BB68h case   26:*/		return 0x8211BB6C;
		  /* 8211BB6Ch */ case   27:  		/* stfd FR1, <#[R31]> */
		/* 8211BB6Ch case   27:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211BB6Ch case   27:*/		return 0x8211BB70;
		  /* 8211BB70h */ case   28:  		/* addic. R30, R30, -1 */
		/* 8211BB70h case   28:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211BB70h case   28:*/		return 0x8211BB74;
		  /* 8211BB74h */ case   29:  		/* addi R31, R31, 16 */
		/* 8211BB74h case   29:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211BB74h case   29:*/		return 0x8211BB78;
		  /* 8211BB78h */ case   30:  		/* bc 4, CR0_EQ, -24 */
		/* 8211BB78h case   30:*/		if ( !regs.CR[0].eq ) { return 0x8211BB60;  }
		/* 8211BB78h case   30:*/		return 0x8211BB7C;
		  /* 8211BB7Ch */ case   31:  		/* b 1008 */
		/* 8211BB7Ch case   31:*/		return 0x8211BF6C;
		/* 8211BB7Ch case   31:*/		return 0x8211BB80;
		  /* 8211BB80h */ case   32:  		/* mr R10, R24 */
		/* 8211BB80h case   32:*/		regs.R10 = regs.R24;
		/* 8211BB80h case   32:*/		return 0x8211BB84;
		  /* 8211BB84h */ case   33:  		/* cmplwi CR6, R26, 0 */
		/* 8211BB84h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BB84h case   33:*/		return 0x8211BB88;
		  /* 8211BB88h */ case   34:  		/* bc 12, CR6_EQ, 996 */
		/* 8211BB88h case   34:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BB88h case   34:*/		return 0x8211BB8C;
		  /* 8211BB8Ch */ case   35:  		/* lis R8, -32256 */
		/* 8211BB8Ch case   35:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8211BB8Ch case   35:*/		return 0x8211BB90;
		  /* 8211BB90h */ case   36:  		/* lwz R9, <#[R1 + 80]> */
		/* 8211BB90h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BB90h case   36:*/		return 0x8211BB94;
		  /* 8211BB94h */ case   37:  		/* lis R7, -32256 */
		/* 8211BB94h case   37:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8211BB94h case   37:*/		return 0x8211BB98;
		  /* 8211BB98h */ case   38:  		/* addi R11, R9, 8 */
		/* 8211BB98h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x8);
		/* 8211BB98h case   38:*/		return 0x8211BB9C;
		  /* 8211BB9Ch */ case   39:  		/* subf R9, R9, R27 */
		/* 8211BB9Ch case   39:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R27);
		/* 8211BB9Ch case   39:*/		return 0x8211BBA0;
		  /* 8211BBA0h */ case   40:  		/* lfd FR13, <#[R8 + 1808]> */
		/* 8211BBA0h case   40:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00000710) );
		/* 8211BBA0h case   40:*/		return 0x8211BBA4;
		  /* 8211BBA4h */ case   41:  		/* lfd FR12, <#[R7 + 1848]> */
		/* 8211BBA4h case   41:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R7 + 0x00000738) );
		/* 8211BBA4h case   41:*/		return 0x8211BBA8;
		  /* 8211BBA8h */ case   42:  		/* lfd FR0, <#[R11]> */
		/* 8211BBA8h case   42:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BBA8h case   42:*/		return 0x8211BBAC;
		  /* 8211BBACh */ case   43:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211BBACh case   43:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211BBACh case   43:*/		return 0x8211BBB0;
		  /* 8211BBB0h */ case   44:  		/* bc 12, CR6_LT, 1052 */
		/* 8211BBB0h case   44:*/		if ( regs.CR[6].lt ) { return 0x8211BFCC;  }
		/* 8211BBB0h case   44:*/		return 0x8211BBB4;
		  /* 8211BBB4h */ case   45:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211BBB4h case   45:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211BBB4h case   45:*/		return 0x8211BBB8;
		  /* 8211BBB8h */ case   46:  		/* bc 12, CR6_EQ, 1044 */
		/* 8211BBB8h case   46:*/		if ( regs.CR[6].eq ) { return 0x8211BFCC;  }
		/* 8211BBB8h case   46:*/		return 0x8211BBBC;
		  /* 8211BBBCh */ case   47:  		/* fsqrt FR0, FR0 */
		/* 8211BBBCh case   47:*/		cpu::op::fsqrt<0>(regs,&regs.FR0,regs.FR0);
		/* 8211BBBCh case   47:*/		return 0x8211BBC0;
		  /* 8211BBC0h */ case   48:  		/* addi R10, R10, 1 */
		/* 8211BBC0h case   48:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211BBC0h case   48:*/		return 0x8211BBC4;
		  /* 8211BBC4h */ case   49:  		/* cmplw CR6, R10, R26 */
		/* 8211BBC4h case   49:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 8211BBC4h case   49:*/		return 0x8211BBC8;
		  /* 8211BBC8h */ case   50:  		/* fdiv FR0, FR12, FR0 */
		/* 8211BBC8h case   50:*/		cpu::op::fdiv<0>(regs,&regs.FR0,regs.FR12,regs.FR0);
		/* 8211BBC8h case   50:*/		return 0x8211BBCC;
		  /* 8211BBCCh */ case   51:  		/* stfdx FR0, <#[R9 + R11]> */
		/* 8211BBCCh case   51:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8211BBCCh case   51:*/		return 0x8211BBD0;
		  /* 8211BBD0h */ case   52:  		/* addi R11, R11, 16 */
		/* 8211BBD0h case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211BBD0h case   52:*/		return 0x8211BBD4;
		  /* 8211BBD4h */ case   53:  		/* bc 12, CR6_LT, -44 */
		/* 8211BBD4h case   53:*/		if ( regs.CR[6].lt ) { return 0x8211BBA8;  }
		/* 8211BBD4h case   53:*/		return 0x8211BBD8;
		  /* 8211BBD8h */ case   54:  		/* b 916 */
		/* 8211BBD8h case   54:*/		return 0x8211BF6C;
		/* 8211BBD8h case   54:*/		return 0x8211BBDC;
		  /* 8211BBDCh */ case   55:  		/* cmplwi CR6, R26, 0 */
		/* 8211BBDCh case   55:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BBDCh case   55:*/		return 0x8211BBE0;
		  /* 8211BBE0h */ case   56:  		/* bc 12, CR6_EQ, 908 */
		/* 8211BBE0h case   56:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BBE0h case   56:*/		return 0x8211BBE4;
		  /* 8211BBE4h */ case   57:  		/* lis R9, -32256 */
		/* 8211BBE4h case   57:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8211BBE4h case   57:*/		return 0x8211BBE8;
		  /* 8211BBE8h */ case   58:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211BBE8h case   58:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BBE8h case   58:*/		return 0x8211BBEC;
		  /* 8211BBECh */ case   59:  		/* lis R8, -32256 */
		/* 8211BBECh case   59:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8211BBECh case   59:*/		return 0x8211BBF0;
		  /* 8211BBF0h */ case   60:  		/* mtspr CTR, R26 */
		/* 8211BBF0h case   60:*/		regs.CTR = regs.R26;
		/* 8211BBF0h case   60:*/		return 0x8211BBF4;
		  /* 8211BBF4h */ case   61:  		/* addi R11, R27, 8 */
		/* 8211BBF4h case   61:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211BBF4h case   61:*/		return 0x8211BBF8;
		  /* 8211BBF8h */ case   62:  		/* subf R10, R27, R10 */
		/* 8211BBF8h case   62:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211BBF8h case   62:*/		return 0x8211BBFC;
		  /* 8211BBFCh */ case   63:  		/* lfd FR12, <#[R9 + 1808]> */
		/* 8211BBFCh case   63:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R9 + 0x00000710) );
		/* 8211BBFCh case   63:*/		return 0x8211BC00;
		  /* 8211BC00h */ case   64:  		/* lfd FR13, <#[R8 + 1848]> */
		/* 8211BC00h case   64:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00000738) );
		/* 8211BC00h case   64:*/		return 0x8211BC04;
		  /* 8211BC04h */ case   65:  		/* lfdx FR0, <#[R11 + R10]> */
		/* 8211BC04h case   65:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211BC04h case   65:*/		return 0x8211BC08;
		  /* 8211BC08h */ case   66:  		/* fcmpu CR6, FR0, FR12 */
		/* 8211BC08h case   66:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR12);
		/* 8211BC08h case   66:*/		return 0x8211BC0C;
		  /* 8211BC0Ch */ case   67:  		/* bc 4, CR6_LT, 12 */
		/* 8211BC0Ch case   67:*/		if ( !regs.CR[6].lt ) { return 0x8211BC18;  }
		/* 8211BC0Ch case   67:*/		return 0x8211BC10;
		  /* 8211BC10h */ case   68:  		/* stfd FR12, <#[R11]> */
		/* 8211BC10h case   68:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BC10h case   68:*/		return 0x8211BC14;
		  /* 8211BC14h */ case   69:  		/* b 24 */
		/* 8211BC14h case   69:*/		return 0x8211BC2C;
		/* 8211BC14h case   69:*/		return 0x8211BC18;
	}
	return 0x8211BC18;
} // Block from 8211BB00h-8211BC18h (70 instructions)

//////////////////////////////////////////////////////
// Block at 8211BC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BC18);
		  /* 8211BC18h */ case    0:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211BC18h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211BC18h case    0:*/		return 0x8211BC1C;
		  /* 8211BC1Ch */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 8211BC1Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x8211BC28;  }
		/* 8211BC1Ch case    1:*/		return 0x8211BC20;
		  /* 8211BC20h */ case    2:  		/* stfd FR13, <#[R11]> */
		/* 8211BC20h case    2:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BC20h case    2:*/		return 0x8211BC24;
		  /* 8211BC24h */ case    3:  		/* b 8 */
		/* 8211BC24h case    3:*/		return 0x8211BC2C;
		/* 8211BC24h case    3:*/		return 0x8211BC28;
	}
	return 0x8211BC28;
} // Block from 8211BC18h-8211BC28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211BC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BC28);
		  /* 8211BC28h */ case    0:  		/* stfd FR0, <#[R11]> */
		/* 8211BC28h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BC28h case    0:*/		return 0x8211BC2C;
	}
	return 0x8211BC2C;
} // Block from 8211BC28h-8211BC2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211BC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BC2C);
		  /* 8211BC2Ch */ case    0:  		/* addi R11, R11, 16 */
		/* 8211BC2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211BC2Ch case    0:*/		return 0x8211BC30;
		  /* 8211BC30h */ case    1:  		/* bc 16, CR0_LT, -44 */
		/* 8211BC30h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BC04;  }
		/* 8211BC30h case    1:*/		return 0x8211BC34;
		  /* 8211BC34h */ case    2:  		/* b 824 */
		/* 8211BC34h case    2:*/		return 0x8211BF6C;
		/* 8211BC34h case    2:*/		return 0x8211BC38;
		  /* 8211BC38h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8211BC38h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BC38h case    3:*/		return 0x8211BC3C;
		  /* 8211BC3Ch */ case    4:  		/* bc 12, CR6_EQ, 816 */
		/* 8211BC3Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BC3Ch case    4:*/		return 0x8211BC40;
		  /* 8211BC40h */ case    5:  		/* lis R9, -32256 */
		/* 8211BC40h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8211BC40h case    5:*/		return 0x8211BC44;
		  /* 8211BC44h */ case    6:  		/* lwz R10, <#[R1 + 80]> */
		/* 8211BC44h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BC44h case    6:*/		return 0x8211BC48;
		  /* 8211BC48h */ case    7:  		/* lis R8, -32256 */
		/* 8211BC48h case    7:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8211BC48h case    7:*/		return 0x8211BC4C;
		  /* 8211BC4Ch */ case    8:  		/* mtspr CTR, R26 */
		/* 8211BC4Ch case    8:*/		regs.CTR = regs.R26;
		/* 8211BC4Ch case    8:*/		return 0x8211BC50;
		  /* 8211BC50h */ case    9:  		/* lis R7, -32255 */
		/* 8211BC50h case    9:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 8211BC50h case    9:*/		return 0x8211BC54;
		  /* 8211BC54h */ case   10:  		/* addi R11, R27, 8 */
		/* 8211BC54h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 8211BC54h case   10:*/		return 0x8211BC58;
		  /* 8211BC58h */ case   11:  		/* subf R10, R27, R10 */
		/* 8211BC58h case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 8211BC58h case   11:*/		return 0x8211BC5C;
		  /* 8211BC5Ch */ case   12:  		/* lfd FR13, <#[R9 + 1808]> */
		/* 8211BC5Ch case   12:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000710) );
		/* 8211BC5Ch case   12:*/		return 0x8211BC60;
		  /* 8211BC60h */ case   13:  		/* lfd FR11, <#[R8 + 1848]> */
		/* 8211BC60h case   13:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R8 + 0x00000738) );
		/* 8211BC60h case   13:*/		return 0x8211BC64;
		  /* 8211BC64h */ case   14:  		/* lfd FR12, <#[R7 - 24488]> */
		/* 8211BC64h case   14:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R7 + 0xFFFFA058) );
		/* 8211BC64h case   14:*/		return 0x8211BC68;
		  /* 8211BC68h */ case   15:  		/* lfdx FR0, <#[R11 + R10]> */
		/* 8211BC68h case   15:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211BC68h case   15:*/		return 0x8211BC6C;
		  /* 8211BC6Ch */ case   16:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211BC6Ch case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211BC6Ch case   16:*/		return 0x8211BC70;
		  /* 8211BC70h */ case   17:  		/* bc 4, CR6_LT, 12 */
		/* 8211BC70h case   17:*/		if ( !regs.CR[6].lt ) { return 0x8211BC7C;  }
		/* 8211BC70h case   17:*/		return 0x8211BC74;
		  /* 8211BC74h */ case   18:  		/* stfd FR12, <#[R11]> */
		/* 8211BC74h case   18:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BC74h case   18:*/		return 0x8211BC78;
		  /* 8211BC78h */ case   19:  		/* b 24 */
		/* 8211BC78h case   19:*/		return 0x8211BC90;
		/* 8211BC78h case   19:*/		return 0x8211BC7C;
	}
	return 0x8211BC7C;
} // Block from 8211BC2Ch-8211BC7Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211BC7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BC7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BC7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BC7C);
		  /* 8211BC7Ch */ case    0:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211BC7Ch case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211BC7Ch case    0:*/		return 0x8211BC80;
		  /* 8211BC80h */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 8211BC80h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8211BC8C;  }
		/* 8211BC80h case    1:*/		return 0x8211BC84;
		  /* 8211BC84h */ case    2:  		/* stfd FR11, <#[R11]> */
		/* 8211BC84h case    2:*/		cpu::mem::store64f( regs, regs.FR11, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BC84h case    2:*/		return 0x8211BC88;
		  /* 8211BC88h */ case    3:  		/* b 8 */
		/* 8211BC88h case    3:*/		return 0x8211BC90;
		/* 8211BC88h case    3:*/		return 0x8211BC8C;
	}
	return 0x8211BC8C;
} // Block from 8211BC7Ch-8211BC8Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211BC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BC8C);
		  /* 8211BC8Ch */ case    0:  		/* stfd FR13, <#[R11]> */
		/* 8211BC8Ch case    0:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BC8Ch case    0:*/		return 0x8211BC90;
	}
	return 0x8211BC90;
} // Block from 8211BC8Ch-8211BC90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211BC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BC90);
		  /* 8211BC90h */ case    0:  		/* addi R11, R11, 16 */
		/* 8211BC90h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211BC90h case    0:*/		return 0x8211BC94;
		  /* 8211BC94h */ case    1:  		/* bc 16, CR0_LT, -44 */
		/* 8211BC94h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BC68;  }
		/* 8211BC94h case    1:*/		return 0x8211BC98;
		  /* 8211BC98h */ case    2:  		/* b 724 */
		/* 8211BC98h case    2:*/		return 0x8211BF6C;
		/* 8211BC98h case    2:*/		return 0x8211BC9C;
		  /* 8211BC9Ch */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8211BC9Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BC9Ch case    3:*/		return 0x8211BCA0;
		  /* 8211BCA0h */ case    4:  		/* bc 12, CR6_EQ, 716 */
		/* 8211BCA0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BCA0h case    4:*/		return 0x8211BCA4;
		  /* 8211BCA4h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211BCA4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BCA4h case    5:*/		return 0x8211BCA8;
		  /* 8211BCA8h */ case    6:  		/* addi R31, R27, 8 */
		/* 8211BCA8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211BCA8h case    6:*/		return 0x8211BCAC;
		  /* 8211BCACh */ case    7:  		/* mr R30, R26 */
		/* 8211BCACh case    7:*/		regs.R30 = regs.R26;
		/* 8211BCACh case    7:*/		return 0x8211BCB0;
		  /* 8211BCB0h */ case    8:  		/* subf R29, R27, R11 */
		/* 8211BCB0h case    8:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211BCB0h case    8:*/		return 0x8211BCB4;
		  /* 8211BCB4h */ case    9:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211BCB4h case    9:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211BCB4h case    9:*/		return 0x8211BCB8;
		  /* 8211BCB8h */ case   10:  		/* bl -569840 */
		/* 8211BCB8h case   10:*/		regs.LR = 0x8211BCBC; return 0x82090AC8;
		/* 8211BCB8h case   10:*/		return 0x8211BCBC;
		  /* 8211BCBCh */ case   11:  		/* stfd FR1, <#[R31]> */
		/* 8211BCBCh case   11:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211BCBCh case   11:*/		return 0x8211BCC0;
		  /* 8211BCC0h */ case   12:  		/* addic. R30, R30, -1 */
		/* 8211BCC0h case   12:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211BCC0h case   12:*/		return 0x8211BCC4;
		  /* 8211BCC4h */ case   13:  		/* addi R31, R31, 16 */
		/* 8211BCC4h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211BCC4h case   13:*/		return 0x8211BCC8;
		  /* 8211BCC8h */ case   14:  		/* bc 4, CR0_EQ, -20 */
		/* 8211BCC8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8211BCB4;  }
		/* 8211BCC8h case   14:*/		return 0x8211BCCC;
		  /* 8211BCCCh */ case   15:  		/* b 672 */
		/* 8211BCCCh case   15:*/		return 0x8211BF6C;
		/* 8211BCCCh case   15:*/		return 0x8211BCD0;
		  /* 8211BCD0h */ case   16:  		/* cmplwi CR6, R26, 0 */
		/* 8211BCD0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BCD0h case   16:*/		return 0x8211BCD4;
		  /* 8211BCD4h */ case   17:  		/* bc 12, CR6_EQ, 664 */
		/* 8211BCD4h case   17:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BCD4h case   17:*/		return 0x8211BCD8;
		  /* 8211BCD8h */ case   18:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211BCD8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BCD8h case   18:*/		return 0x8211BCDC;
		  /* 8211BCDCh */ case   19:  		/* addi R31, R27, 8 */
		/* 8211BCDCh case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211BCDCh case   19:*/		return 0x8211BCE0;
		  /* 8211BCE0h */ case   20:  		/* mr R30, R26 */
		/* 8211BCE0h case   20:*/		regs.R30 = regs.R26;
		/* 8211BCE0h case   20:*/		return 0x8211BCE4;
		  /* 8211BCE4h */ case   21:  		/* subf R29, R27, R11 */
		/* 8211BCE4h case   21:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211BCE4h case   21:*/		return 0x8211BCE8;
		  /* 8211BCE8h */ case   22:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211BCE8h case   22:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211BCE8h case   22:*/		return 0x8211BCEC;
		  /* 8211BCECh */ case   23:  		/* bl 1362020 */
		/* 8211BCECh case   23:*/		regs.LR = 0x8211BCF0; return 0x82268550;
		/* 8211BCECh case   23:*/		return 0x8211BCF0;
		  /* 8211BCF0h */ case   24:  		/* stfd FR1, <#[R31]> */
		/* 8211BCF0h case   24:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211BCF0h case   24:*/		return 0x8211BCF4;
		  /* 8211BCF4h */ case   25:  		/* addic. R30, R30, -1 */
		/* 8211BCF4h case   25:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211BCF4h case   25:*/		return 0x8211BCF8;
		  /* 8211BCF8h */ case   26:  		/* addi R31, R31, 16 */
		/* 8211BCF8h case   26:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211BCF8h case   26:*/		return 0x8211BCFC;
		  /* 8211BCFCh */ case   27:  		/* bc 4, CR0_EQ, -20 */
		/* 8211BCFCh case   27:*/		if ( !regs.CR[0].eq ) { return 0x8211BCE8;  }
		/* 8211BCFCh case   27:*/		return 0x8211BD00;
		  /* 8211BD00h */ case   28:  		/* b 620 */
		/* 8211BD00h case   28:*/		return 0x8211BF6C;
		/* 8211BD00h case   28:*/		return 0x8211BD04;
		  /* 8211BD04h */ case   29:  		/* cmplwi CR6, R26, 0 */
		/* 8211BD04h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BD04h case   29:*/		return 0x8211BD08;
		  /* 8211BD08h */ case   30:  		/* bc 12, CR6_EQ, 612 */
		/* 8211BD08h case   30:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BD08h case   30:*/		return 0x8211BD0C;
		  /* 8211BD0Ch */ case   31:  		/* lwz R11, <#[R1 + 88]> */
		/* 8211BD0Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8211BD0Ch case   31:*/		return 0x8211BD10;
		  /* 8211BD10h */ case   32:  		/* lis R6, -32255 */
		/* 8211BD10h case   32:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 8211BD10h case   32:*/		return 0x8211BD14;
		  /* 8211BD14h */ case   33:  		/* lwz R9, <#[R1 + 84]> */
		/* 8211BD14h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8211BD14h case   33:*/		return 0x8211BD18;
		  /* 8211BD18h */ case   34:  		/* lis R5, -32256 */
		/* 8211BD18h case   34:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8200);
		/* 8211BD18h case   34:*/		return 0x8211BD1C;
		  /* 8211BD1Ch */ case   35:  		/* lwz R7, <#[R1 + 80]> */
		/* 8211BD1Ch case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BD1Ch case   35:*/		return 0x8211BD20;
		  /* 8211BD20h */ case   36:  		/* lis R4, -32256 */
		/* 8211BD20h case   36:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8200);
		/* 8211BD20h case   36:*/		return 0x8211BD24;
		  /* 8211BD24h */ case   37:  		/* subf R8, R11, R9 */
		/* 8211BD24h case   37:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R11,regs.R9);
		/* 8211BD24h case   37:*/		return 0x8211BD28;
		  /* 8211BD28h */ case   38:  		/* mtspr CTR, R26 */
		/* 8211BD28h case   38:*/		regs.CTR = regs.R26;
		/* 8211BD28h case   38:*/		return 0x8211BD2C;
		  /* 8211BD2Ch */ case   39:  		/* subf R9, R11, R7 */
		/* 8211BD2Ch case   39:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R7);
		/* 8211BD2Ch case   39:*/		return 0x8211BD30;
		  /* 8211BD30h */ case   40:  		/* lis R7, -32255 */
		/* 8211BD30h case   40:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 8211BD30h case   40:*/		return 0x8211BD34;
		  /* 8211BD34h */ case   41:  		/* lfd FR12, <#[R6 - 24504]> */
		/* 8211BD34h case   41:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R6 + 0xFFFFA048) );
		/* 8211BD34h case   41:*/		return 0x8211BD38;
		  /* 8211BD38h */ case   42:  		/* addi R10, R11, 8 */
		/* 8211BD38h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8211BD38h case   42:*/		return 0x8211BD3C;
		  /* 8211BD3Ch */ case   43:  		/* lfd FR9, <#[R5 + 1808]> */
		/* 8211BD3Ch case   43:*/		cpu::mem::load64f( regs, &regs.FR9, (uint32)(regs.R5 + 0x00000710) );
		/* 8211BD3Ch case   43:*/		return 0x8211BD40;
		  /* 8211BD40h */ case   44:  		/* lfd FR10, <#[R4 + 1848]> */
		/* 8211BD40h case   44:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R4 + 0x00000738) );
		/* 8211BD40h case   44:*/		return 0x8211BD44;
		  /* 8211BD44h */ case   45:  		/* subf R11, R11, R27 */
		/* 8211BD44h case   45:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8211BD44h case   45:*/		return 0x8211BD48;
		  /* 8211BD48h */ case   46:  		/* lfd FR11, <#[R7 + 9024]> */
		/* 8211BD48h case   46:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R7 + 0x00002340) );
		/* 8211BD48h case   46:*/		return 0x8211BD4C;
		  /* 8211BD4Ch */ case   47:  		/* lfd FR13, <#[R10]> */
		/* 8211BD4Ch case   47:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8211BD4Ch case   47:*/		return 0x8211BD50;
		  /* 8211BD50h */ case   48:  		/* lfdx FR0, <#[R9 + R10]> */
		/* 8211BD50h case   48:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211BD50h case   48:*/		return 0x8211BD54;
		  /* 8211BD54h */ case   49:  		/* fcmpu CR6, FR13, FR0 */
		/* 8211BD54h case   49:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8211BD54h case   49:*/		return 0x8211BD58;
		  /* 8211BD58h */ case   50:  		/* bc 4, CR6_LT, 12 */
		/* 8211BD58h case   50:*/		if ( !regs.CR[6].lt ) { return 0x8211BD64;  }
		/* 8211BD58h case   50:*/		return 0x8211BD5C;
		  /* 8211BD5Ch */ case   51:  		/* stfdx FR9, <#[R11 + R10]> */
		/* 8211BD5Ch case   51:*/		cpu::mem::store64f( regs, regs.FR9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211BD5Ch case   51:*/		return 0x8211BD60;
		  /* 8211BD60h */ case   52:  		/* b 60 */
		/* 8211BD60h case   52:*/		return 0x8211BD9C;
		/* 8211BD60h case   52:*/		return 0x8211BD64;
	}
	return 0x8211BD64;
} // Block from 8211BC90h-8211BD64h (53 instructions)

//////////////////////////////////////////////////////
// Block at 8211BD64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BD64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BD64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BD64);
		  /* 8211BD64h */ case    0:  		/* lfdx FR0, <#[R8 + R10]> */
		/* 8211BD64h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 8211BD64h case    0:*/		return 0x8211BD68;
		  /* 8211BD68h */ case    1:  		/* fcmpu CR6, FR13, FR0 */
		/* 8211BD68h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8211BD68h case    1:*/		return 0x8211BD6C;
		  /* 8211BD6Ch */ case    2:  		/* bc 12, CR6_LT, 12 */
		/* 8211BD6Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8211BD78;  }
		/* 8211BD6Ch case    2:*/		return 0x8211BD70;
		  /* 8211BD70h */ case    3:  		/* stfdx FR10, <#[R11 + R10]> */
		/* 8211BD70h case    3:*/		cpu::mem::store64f( regs, regs.FR10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211BD70h case    3:*/		return 0x8211BD74;
		  /* 8211BD74h */ case    4:  		/* b 40 */
		/* 8211BD74h case    4:*/		return 0x8211BD9C;
		/* 8211BD74h case    4:*/		return 0x8211BD78;
	}
	return 0x8211BD78;
} // Block from 8211BD64h-8211BD78h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211BD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BD78);
		  /* 8211BD78h */ case    0:  		/* lfdx FR8, <#[R9 + R10]> */
		/* 8211BD78h case    0:*/		cpu::mem::load64f( regs, &regs.FR8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211BD78h case    0:*/		return 0x8211BD7C;
		  /* 8211BD7Ch */ case    1:  		/* fsub FR0, FR0, FR8 */
		/* 8211BD7Ch case    1:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR0,regs.FR8);
		/* 8211BD7Ch case    1:*/		return 0x8211BD80;
		  /* 8211BD80h */ case    2:  		/* fsub FR13, FR13, FR8 */
		/* 8211BD80h case    2:*/		cpu::op::fsub<0>(regs,&regs.FR13,regs.FR13,regs.FR8);
		/* 8211BD80h case    2:*/		return 0x8211BD84;
		  /* 8211BD84h */ case    3:  		/* fdiv FR0, FR13, FR0 */
		/* 8211BD84h case    3:*/		cpu::op::fdiv<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8211BD84h case    3:*/		return 0x8211BD88;
		  /* 8211BD88h */ case    4:  		/* fmul FR13, FR0, FR0 */
		/* 8211BD88h case    4:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR0,regs.FR0);
		/* 8211BD88h case    4:*/		return 0x8211BD8C;
		  /* 8211BD8Ch */ case    5:  		/* fmul FR0, FR13, FR0 */
		/* 8211BD8Ch case    5:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8211BD8Ch case    5:*/		return 0x8211BD90;
		  /* 8211BD90h */ case    6:  		/* fmul FR0, FR0, FR12 */
		/* 8211BD90h case    6:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR12);
		/* 8211BD90h case    6:*/		return 0x8211BD94;
		  /* 8211BD94h */ case    7:  		/* fmsub FR0, FR13, FR11, FR0 */
		/* 8211BD94h case    7:*/		cpu::op::fmsub<0>(regs,&regs.FR0,regs.FR13,regs.FR11,regs.FR0);
		/* 8211BD94h case    7:*/		return 0x8211BD98;
		  /* 8211BD98h */ case    8:  		/* stfdx FR0, <#[R11 + R10]> */
		/* 8211BD98h case    8:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211BD98h case    8:*/		return 0x8211BD9C;
	}
	return 0x8211BD9C;
} // Block from 8211BD78h-8211BD9Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211BD9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BD9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BD9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BD9C);
		  /* 8211BD9Ch */ case    0:  		/* addi R10, R10, 16 */
		/* 8211BD9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211BD9Ch case    0:*/		return 0x8211BDA0;
		  /* 8211BDA0h */ case    1:  		/* bc 16, CR0_LT, -84 */
		/* 8211BDA0h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BD4C;  }
		/* 8211BDA0h case    1:*/		return 0x8211BDA4;
		  /* 8211BDA4h */ case    2:  		/* b 456 */
		/* 8211BDA4h case    2:*/		return 0x8211BF6C;
		/* 8211BDA4h case    2:*/		return 0x8211BDA8;
		  /* 8211BDA8h */ case    3:  		/* mr R10, R24 */
		/* 8211BDA8h case    3:*/		regs.R10 = regs.R24;
		/* 8211BDA8h case    3:*/		return 0x8211BDAC;
		  /* 8211BDACh */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8211BDACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BDACh case    4:*/		return 0x8211BDB0;
		  /* 8211BDB0h */ case    5:  		/* bc 12, CR6_EQ, 444 */
		/* 8211BDB0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BDB0h case    5:*/		return 0x8211BDB4;
		  /* 8211BDB4h */ case    6:  		/* lis R8, -32256 */
		/* 8211BDB4h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8211BDB4h case    6:*/		return 0x8211BDB8;
		  /* 8211BDB8h */ case    7:  		/* lwz R9, <#[R1 + 80]> */
		/* 8211BDB8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BDB8h case    7:*/		return 0x8211BDBC;
		  /* 8211BDBCh */ case    8:  		/* addi R11, R9, 8 */
		/* 8211BDBCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x8);
		/* 8211BDBCh case    8:*/		return 0x8211BDC0;
		  /* 8211BDC0h */ case    9:  		/* subf R9, R9, R27 */
		/* 8211BDC0h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R27);
		/* 8211BDC0h case    9:*/		return 0x8211BDC4;
		  /* 8211BDC4h */ case   10:  		/* lfd FR13, <#[R8 + 1808]> */
		/* 8211BDC4h case   10:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00000710) );
		/* 8211BDC4h case   10:*/		return 0x8211BDC8;
		  /* 8211BDC8h */ case   11:  		/* lfd FR0, <#[R11]> */
		/* 8211BDC8h case   11:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8211BDC8h case   11:*/		return 0x8211BDCC;
		  /* 8211BDCCh */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 8211BDCCh case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8211BDCCh case   12:*/		return 0x8211BDD0;
		  /* 8211BDD0h */ case   13:  		/* bc 12, CR6_LT, 508 */
		/* 8211BDD0h case   13:*/		if ( regs.CR[6].lt ) { return 0x8211BFCC;  }
		/* 8211BDD0h case   13:*/		return 0x8211BDD4;
		  /* 8211BDD4h */ case   14:  		/* addi R10, R10, 1 */
		/* 8211BDD4h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211BDD4h case   14:*/		return 0x8211BDD8;
		  /* 8211BDD8h */ case   15:  		/* fsqrt FR0, FR0 */
		/* 8211BDD8h case   15:*/		cpu::op::fsqrt<0>(regs,&regs.FR0,regs.FR0);
		/* 8211BDD8h case   15:*/		return 0x8211BDDC;
		  /* 8211BDDCh */ case   16:  		/* stfdx FR0, <#[R11 + R9]> */
		/* 8211BDDCh case   16:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8211BDDCh case   16:*/		return 0x8211BDE0;
		  /* 8211BDE0h */ case   17:  		/* addi R11, R11, 16 */
		/* 8211BDE0h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8211BDE0h case   17:*/		return 0x8211BDE4;
		  /* 8211BDE4h */ case   18:  		/* cmplw CR6, R10, R26 */
		/* 8211BDE4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 8211BDE4h case   18:*/		return 0x8211BDE8;
		  /* 8211BDE8h */ case   19:  		/* bc 12, CR6_LT, -32 */
		/* 8211BDE8h case   19:*/		if ( regs.CR[6].lt ) { return 0x8211BDC8;  }
		/* 8211BDE8h case   19:*/		return 0x8211BDEC;
		  /* 8211BDECh */ case   20:  		/* b 384 */
		/* 8211BDECh case   20:*/		return 0x8211BF6C;
		/* 8211BDECh case   20:*/		return 0x8211BDF0;
		  /* 8211BDF0h */ case   21:  		/* cmplwi CR6, R26, 0 */
		/* 8211BDF0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BDF0h case   21:*/		return 0x8211BDF4;
		  /* 8211BDF4h */ case   22:  		/* bc 12, CR6_EQ, 376 */
		/* 8211BDF4h case   22:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BDF4h case   22:*/		return 0x8211BDF8;
		  /* 8211BDF8h */ case   23:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211BDF8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BDF8h case   23:*/		return 0x8211BDFC;
		  /* 8211BDFCh */ case   24:  		/* lis R7, -32256 */
		/* 8211BDFCh case   24:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8211BDFCh case   24:*/		return 0x8211BE00;
		  /* 8211BE00h */ case   25:  		/* lwz R8, <#[R1 + 84]> */
		/* 8211BE00h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 8211BE00h case   25:*/		return 0x8211BE04;
		  /* 8211BE04h */ case   26:  		/* mtspr CTR, R26 */
		/* 8211BE04h case   26:*/		regs.CTR = regs.R26;
		/* 8211BE04h case   26:*/		return 0x8211BE08;
		  /* 8211BE08h */ case   27:  		/* addi R10, R11, 8 */
		/* 8211BE08h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8211BE08h case   27:*/		return 0x8211BE0C;
		  /* 8211BE0Ch */ case   28:  		/* subf R9, R11, R27 */
		/* 8211BE0Ch case   28:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R27);
		/* 8211BE0Ch case   28:*/		return 0x8211BE10;
		  /* 8211BE10h */ case   29:  		/* subf R11, R11, R8 */
		/* 8211BE10h case   29:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8211BE10h case   29:*/		return 0x8211BE14;
		  /* 8211BE14h */ case   30:  		/* lis R8, -32256 */
		/* 8211BE14h case   30:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8211BE14h case   30:*/		return 0x8211BE18;
		  /* 8211BE18h */ case   31:  		/* lfd FR13, <#[R7 + 1848]> */
		/* 8211BE18h case   31:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R7 + 0x00000738) );
		/* 8211BE18h case   31:*/		return 0x8211BE1C;
		  /* 8211BE1Ch */ case   32:  		/* lfd FR12, <#[R8 + 1808]> */
		/* 8211BE1Ch case   32:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R8 + 0x00000710) );
		/* 8211BE1Ch case   32:*/		return 0x8211BE20;
		  /* 8211BE20h */ case   33:  		/* lfdx FR0, <#[R10 + R11]> */
		/* 8211BE20h case   33:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211BE20h case   33:*/		return 0x8211BE24;
		  /* 8211BE24h */ case   34:  		/* lfd FR11, <#[R10]> */
		/* 8211BE24h case   34:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R10 + 0x00000000) );
		/* 8211BE24h case   34:*/		return 0x8211BE28;
		  /* 8211BE28h */ case   35:  		/* fcmpu CR6, FR0, FR11 */
		/* 8211BE28h case   35:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8211BE28h case   35:*/		return 0x8211BE2C;
		  /* 8211BE2Ch */ case   36:  		/* bc 12, CR6_LT, 12 */
		/* 8211BE2Ch case   36:*/		if ( regs.CR[6].lt ) { return 0x8211BE38;  }
		/* 8211BE2Ch case   36:*/		return 0x8211BE30;
		  /* 8211BE30h */ case   37:  		/* fmr FR0, FR13 */
		/* 8211BE30h case   37:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR13);
		/* 8211BE30h case   37:*/		return 0x8211BE34;
		  /* 8211BE34h */ case   38:  		/* b 8 */
		/* 8211BE34h case   38:*/		return 0x8211BE3C;
		/* 8211BE34h case   38:*/		return 0x8211BE38;
	}
	return 0x8211BE38;
} // Block from 8211BD9Ch-8211BE38h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8211BE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BE38);
		  /* 8211BE38h */ case    0:  		/* fmr FR0, FR12 */
		/* 8211BE38h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 8211BE38h case    0:*/		return 0x8211BE3C;
	}
	return 0x8211BE3C;
} // Block from 8211BE38h-8211BE3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211BE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BE3C);
		  /* 8211BE3Ch */ case    0:  		/* stfdx FR0, <#[R10 + R9]> */
		/* 8211BE3Ch case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8211BE3Ch case    0:*/		return 0x8211BE40;
		  /* 8211BE40h */ case    1:  		/* addi R10, R10, 16 */
		/* 8211BE40h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8211BE40h case    1:*/		return 0x8211BE44;
		  /* 8211BE44h */ case    2:  		/* bc 16, CR0_LT, -36 */
		/* 8211BE44h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211BE20;  }
		/* 8211BE44h case    2:*/		return 0x8211BE48;
		  /* 8211BE48h */ case    3:  		/* b 292 */
		/* 8211BE48h case    3:*/		return 0x8211BF6C;
		/* 8211BE48h case    3:*/		return 0x8211BE4C;
		  /* 8211BE4Ch */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 8211BE4Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BE4Ch case    4:*/		return 0x8211BE50;
		  /* 8211BE50h */ case    5:  		/* bc 12, CR6_EQ, 284 */
		/* 8211BE50h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BE50h case    5:*/		return 0x8211BE54;
		  /* 8211BE54h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211BE54h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BE54h case    6:*/		return 0x8211BE58;
		  /* 8211BE58h */ case    7:  		/* addi R31, R27, 8 */
		/* 8211BE58h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211BE58h case    7:*/		return 0x8211BE5C;
		  /* 8211BE5Ch */ case    8:  		/* mr R30, R26 */
		/* 8211BE5Ch case    8:*/		regs.R30 = regs.R26;
		/* 8211BE5Ch case    8:*/		return 0x8211BE60;
		  /* 8211BE60h */ case    9:  		/* subf R29, R27, R11 */
		/* 8211BE60h case    9:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211BE60h case    9:*/		return 0x8211BE64;
		  /* 8211BE64h */ case   10:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211BE64h case   10:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211BE64h case   10:*/		return 0x8211BE68;
		  /* 8211BE68h */ case   11:  		/* bl 1361424 */
		/* 8211BE68h case   11:*/		regs.LR = 0x8211BE6C; return 0x82268478;
		/* 8211BE68h case   11:*/		return 0x8211BE6C;
		  /* 8211BE6Ch */ case   12:  		/* stfd FR1, <#[R31]> */
		/* 8211BE6Ch case   12:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211BE6Ch case   12:*/		return 0x8211BE70;
		  /* 8211BE70h */ case   13:  		/* addic. R30, R30, -1 */
		/* 8211BE70h case   13:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211BE70h case   13:*/		return 0x8211BE74;
		  /* 8211BE74h */ case   14:  		/* addi R31, R31, 16 */
		/* 8211BE74h case   14:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211BE74h case   14:*/		return 0x8211BE78;
		  /* 8211BE78h */ case   15:  		/* bc 4, CR0_EQ, -20 */
		/* 8211BE78h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8211BE64;  }
		/* 8211BE78h case   15:*/		return 0x8211BE7C;
		  /* 8211BE7Ch */ case   16:  		/* b 240 */
		/* 8211BE7Ch case   16:*/		return 0x8211BF6C;
		/* 8211BE7Ch case   16:*/		return 0x8211BE80;
		  /* 8211BE80h */ case   17:  		/* cmplwi CR6, R26, 0 */
		/* 8211BE80h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BE80h case   17:*/		return 0x8211BE84;
		  /* 8211BE84h */ case   18:  		/* bc 12, CR6_EQ, 232 */
		/* 8211BE84h case   18:*/		if ( regs.CR[6].eq ) { return 0x8211BF6C;  }
		/* 8211BE84h case   18:*/		return 0x8211BE88;
		  /* 8211BE88h */ case   19:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211BE88h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BE88h case   19:*/		return 0x8211BE8C;
		  /* 8211BE8Ch */ case   20:  		/* addi R31, R27, 8 */
		/* 8211BE8Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x8);
		/* 8211BE8Ch case   20:*/		return 0x8211BE90;
		  /* 8211BE90h */ case   21:  		/* mr R30, R26 */
		/* 8211BE90h case   21:*/		regs.R30 = regs.R26;
		/* 8211BE90h case   21:*/		return 0x8211BE94;
		  /* 8211BE94h */ case   22:  		/* subf R29, R27, R11 */
		/* 8211BE94h case   22:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R11);
		/* 8211BE94h case   22:*/		return 0x8211BE98;
		  /* 8211BE98h */ case   23:  		/* lfdx FR1, <#[R31 + R29]> */
		/* 8211BE98h case   23:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8211BE98h case   23:*/		return 0x8211BE9C;
		  /* 8211BE9Ch */ case   24:  		/* bl 1361116 */
		/* 8211BE9Ch case   24:*/		regs.LR = 0x8211BEA0; return 0x82268378;
		/* 8211BE9Ch case   24:*/		return 0x8211BEA0;
		  /* 8211BEA0h */ case   25:  		/* stfd FR1, <#[R31]> */
		/* 8211BEA0h case   25:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000000) );
		/* 8211BEA0h case   25:*/		return 0x8211BEA4;
		  /* 8211BEA4h */ case   26:  		/* addic. R30, R30, -1 */
		/* 8211BEA4h case   26:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211BEA4h case   26:*/		return 0x8211BEA8;
		  /* 8211BEA8h */ case   27:  		/* addi R31, R31, 16 */
		/* 8211BEA8h case   27:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211BEA8h case   27:*/		return 0x8211BEAC;
		  /* 8211BEACh */ case   28:  		/* bc 4, CR0_EQ, -20 */
		/* 8211BEACh case   28:*/		if ( !regs.CR[0].eq ) { return 0x8211BE98;  }
		/* 8211BEACh case   28:*/		return 0x8211BEB0;
		  /* 8211BEB0h */ case   29:  		/* b 188 */
		/* 8211BEB0h case   29:*/		return 0x8211BF6C;
		/* 8211BEB0h case   29:*/		return 0x8211BEB4;
		  /* 8211BEB4h */ case   30:  		/* lwz R9, <#[R1 + 96]> */
		/* 8211BEB4h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 8211BEB4h case   30:*/		return 0x8211BEB8;
		  /* 8211BEB8h */ case   31:  		/* mr R10, R24 */
		/* 8211BEB8h case   31:*/		regs.R10 = regs.R24;
		/* 8211BEB8h case   31:*/		return 0x8211BEBC;
		  /* 8211BEBCh */ case   32:  		/* lwz R11, <#[R9 + 24]> */
		/* 8211BEBCh case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 8211BEBCh case   32:*/		return 0x8211BEC0;
		  /* 8211BEC0h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 8211BEC0h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211BEC0h case   33:*/		return 0x8211BEC4;
		  /* 8211BEC4h */ case   34:  		/* bc 4, CR6_GT, 168 */
		/* 8211BEC4h case   34:*/		if ( !regs.CR[6].gt ) { return 0x8211BF6C;  }
		/* 8211BEC4h case   34:*/		return 0x8211BEC8;
		  /* 8211BEC8h */ case   35:  		/* lwz R8, <#[R9 + 20]> */
		/* 8211BEC8h case   35:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 8211BEC8h case   35:*/		return 0x8211BECC;
		  /* 8211BECCh */ case   36:  		/* mr R11, R24 */
		/* 8211BECCh case   36:*/		regs.R11 = regs.R24;
		/* 8211BECCh case   36:*/		return 0x8211BED0;
		  /* 8211BED0h */ case   37:  		/* cmplwi CR6, R8, 0 */
		/* 8211BED0h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8211BED0h case   37:*/		return 0x8211BED4;
		  /* 8211BED4h */ case   38:  		/* bc 12, CR6_EQ, 72 */
		/* 8211BED4h case   38:*/		if ( regs.CR[6].eq ) { return 0x8211BF1C;  }
		/* 8211BED4h case   38:*/		return 0x8211BED8;
		  /* 8211BED8h */ case   39:  		/* lwz R8, <#[R9 + 24]> */
		/* 8211BED8h case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000018) );
		/* 8211BED8h case   39:*/		return 0x8211BEDC;
		  /* 8211BEDCh */ case   40:  		/* lwz R7, <#[R23 + 24]> */
		/* 8211BEDCh case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R23 + 0x00000018) );
		/* 8211BEDCh case   40:*/		return 0x8211BEE0;
		  /* 8211BEE0h */ case   41:  		/* mullw R8, R8, R11 */
		/* 8211BEE0h case   41:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 8211BEE0h case   41:*/		return 0x8211BEE4;
		  /* 8211BEE4h */ case   42:  		/* lwz R6, <#[R1 + 80]> */
		/* 8211BEE4h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BEE4h case   42:*/		return 0x8211BEE8;
		  /* 8211BEE8h */ case   43:  		/* mullw R7, R10, R7 */
		/* 8211BEE8h case   43:*/		cpu::op::mullw<0>(regs,&regs.R7,regs.R10,regs.R7);
		/* 8211BEE8h case   43:*/		return 0x8211BEEC;
		  /* 8211BEECh */ case   44:  		/* add R8, R8, R10 */
		/* 8211BEECh case   44:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 8211BEECh case   44:*/		return 0x8211BEF0;
		  /* 8211BEF0h */ case   45:  		/* add R7, R7, R11 */
		/* 8211BEF0h case   45:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R11);
		/* 8211BEF0h case   45:*/		return 0x8211BEF4;
		  /* 8211BEF4h */ case   46:  		/* rlwinm R8, R8, 4, 0, 27 */
		/* 8211BEF4h case   46:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R8,regs.R8);
		/* 8211BEF4h case   46:*/		return 0x8211BEF8;
		  /* 8211BEF8h */ case   47:  		/* rlwinm R7, R7, 4, 0, 27 */
		/* 8211BEF8h case   47:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R7,regs.R7);
		/* 8211BEF8h case   47:*/		return 0x8211BEFC;
		  /* 8211BEFCh */ case   48:  		/* add R8, R8, R6 */
		/* 8211BEFCh case   48:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R6);
		/* 8211BEFCh case   48:*/		return 0x8211BF00;
		  /* 8211BF00h */ case   49:  		/* add R7, R7, R27 */
		/* 8211BF00h case   49:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R27);
		/* 8211BF00h case   49:*/		return 0x8211BF04;
		  /* 8211BF04h */ case   50:  		/* addi R11, R11, 1 */
		/* 8211BF04h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211BF04h case   50:*/		return 0x8211BF08;
		  /* 8211BF08h */ case   51:  		/* lfd FR0, <#[R8 + 8]> */
		/* 8211BF08h case   51:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R8 + 0x00000008) );
		/* 8211BF08h case   51:*/		return 0x8211BF0C;
		  /* 8211BF0Ch */ case   52:  		/* stfd FR0, <#[R7 + 8]> */
		/* 8211BF0Ch case   52:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R7 + 0x00000008) );
		/* 8211BF0Ch case   52:*/		return 0x8211BF10;
		  /* 8211BF10h */ case   53:  		/* lwz R8, <#[R9 + 20]> */
		/* 8211BF10h case   53:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 8211BF10h case   53:*/		return 0x8211BF14;
		  /* 8211BF14h */ case   54:  		/* cmplw CR6, R11, R8 */
		/* 8211BF14h case   54:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8211BF14h case   54:*/		return 0x8211BF18;
		  /* 8211BF18h */ case   55:  		/* bc 12, CR6_LT, -64 */
		/* 8211BF18h case   55:*/		if ( regs.CR[6].lt ) { return 0x8211BED8;  }
		/* 8211BF18h case   55:*/		return 0x8211BF1C;
	}
	return 0x8211BF1C;
} // Block from 8211BE3Ch-8211BF1Ch (56 instructions)

//////////////////////////////////////////////////////
// Block at 8211BF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BF1C);
		  /* 8211BF1Ch */ case    0:  		/* lwz R11, <#[R9 + 24]> */
		/* 8211BF1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 8211BF1Ch case    0:*/		return 0x8211BF20;
		  /* 8211BF20h */ case    1:  		/* addi R10, R10, 1 */
		/* 8211BF20h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211BF20h case    1:*/		return 0x8211BF24;
		  /* 8211BF24h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 8211BF24h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8211BF24h case    2:*/		return 0x8211BF28;
		  /* 8211BF28h */ case    3:  		/* bc 12, CR6_LT, -92 */
		/* 8211BF28h case    3:*/		if ( regs.CR[6].lt ) { return 0x8211BECC;  }
		/* 8211BF28h case    3:*/		return 0x8211BF2C;
		  /* 8211BF2Ch */ case    4:  		/* b 64 */
		/* 8211BF2Ch case    4:*/		return 0x8211BF6C;
		/* 8211BF2Ch case    4:*/		return 0x8211BF30;
		  /* 8211BF30h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 8211BF30h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8211BF30h case    5:*/		return 0x8211BF34;
		  /* 8211BF34h */ case    6:  		/* lis R10, -32255 */
		/* 8211BF34h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8211BF34h case    6:*/		return 0x8211BF38;
		  /* 8211BF38h */ case    7:  		/* lfd FR13, <#[R11 + 40]> */
		/* 8211BF38h case    7:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000028) );
		/* 8211BF38h case    7:*/		return 0x8211BF3C;
		  /* 8211BF3Ch */ case    8:  		/* lfd FR0, <#[R10 + 8928]> */
		/* 8211BF3Ch case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x000022E0) );
		/* 8211BF3Ch case    8:*/		return 0x8211BF40;
		  /* 8211BF40h */ case    9:  		/* fmul FR13, FR13, FR0 */
		/* 8211BF40h case    9:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 8211BF40h case    9:*/		return 0x8211BF44;
		  /* 8211BF44h */ case   10:  		/* stfd FR13, <#[R27 + 8]> */
		/* 8211BF44h case   10:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R27 + 0x00000008) );
		/* 8211BF44h case   10:*/		return 0x8211BF48;
		  /* 8211BF48h */ case   11:  		/* lfd FR13, <#[R11 + 24]> */
		/* 8211BF48h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000018) );
		/* 8211BF48h case   11:*/		return 0x8211BF4C;
		  /* 8211BF4Ch */ case   12:  		/* fmul FR13, FR13, FR0 */
		/* 8211BF4Ch case   12:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 8211BF4Ch case   12:*/		return 0x8211BF50;
		  /* 8211BF50h */ case   13:  		/* stfd FR13, <#[R27 + 24]> */
		/* 8211BF50h case   13:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R27 + 0x00000018) );
		/* 8211BF50h case   13:*/		return 0x8211BF54;
		  /* 8211BF54h */ case   14:  		/* lfd FR13, <#[R11 + 8]> */
		/* 8211BF54h case   14:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000008) );
		/* 8211BF54h case   14:*/		return 0x8211BF58;
		  /* 8211BF58h */ case   15:  		/* fmul FR13, FR13, FR0 */
		/* 8211BF58h case   15:*/		cpu::op::fmul<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 8211BF58h case   15:*/		return 0x8211BF5C;
		  /* 8211BF5Ch */ case   16:  		/* stfd FR13, <#[R27 + 40]> */
		/* 8211BF5Ch case   16:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R27 + 0x00000028) );
		/* 8211BF5Ch case   16:*/		return 0x8211BF60;
		  /* 8211BF60h */ case   17:  		/* lfd FR13, <#[R11 + 56]> */
		/* 8211BF60h case   17:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000038) );
		/* 8211BF60h case   17:*/		return 0x8211BF64;
		  /* 8211BF64h */ case   18:  		/* fmul FR0, FR13, FR0 */
		/* 8211BF64h case   18:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8211BF64h case   18:*/		return 0x8211BF68;
	}
	return 0x8211BF68;
} // Block from 8211BF1Ch-8211BF68h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211BF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BF68);
		  /* 8211BF68h */ case    0:  		/* stfd FR0, <#[R27 + 56]> */
		/* 8211BF68h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R27 + 0x00000038) );
		/* 8211BF68h case    0:*/		return 0x8211BF6C;
	}
	return 0x8211BF6C;
} // Block from 8211BF68h-8211BF6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211BF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BF6C);
		  /* 8211BF6Ch */ case    0:  		/* lwz R11, <#[R22 + 12]> */
		/* 8211BF6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000000C) );
		/* 8211BF6Ch case    0:*/		return 0x8211BF70;
		  /* 8211BF70h */ case    1:  		/* b 20 */
		/* 8211BF70h case    1:*/		return 0x8211BF84;
		/* 8211BF70h case    1:*/		return 0x8211BF74;
		  /* 8211BF74h */ case    2:  		/* lwz R10, <#[R11 + 8]> */
		/* 8211BF74h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8211BF74h case    2:*/		return 0x8211BF78;
		  /* 8211BF78h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8211BF78h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211BF78h case    3:*/		return 0x8211BF7C;
		  /* 8211BF7Ch */ case    4:  		/* bc 4, CR6_EQ, 80 */
		/* 8211BF7Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211BFCC;  }
		/* 8211BF7Ch case    4:*/		return 0x8211BF80;
		  /* 8211BF80h */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 8211BF80h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8211BF80h case    5:*/		return 0x8211BF84;
	}
	return 0x8211BF84;
} // Block from 8211BF6Ch-8211BF84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211BF84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BF84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BF84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BF84);
		  /* 8211BF84h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8211BF84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211BF84h case    0:*/		return 0x8211BF88;
		  /* 8211BF88h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 8211BF88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211BF74;  }
		/* 8211BF88h case    1:*/		return 0x8211BF8C;
		  /* 8211BF8Ch */ case    2:  		/* mr R9, R24 */
		/* 8211BF8Ch case    2:*/		regs.R9 = regs.R24;
		/* 8211BF8Ch case    2:*/		return 0x8211BF90;
		  /* 8211BF90h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8211BF90h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211BF90h case    3:*/		return 0x8211BF94;
		  /* 8211BF94h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 8211BF94h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211BFC4;  }
		/* 8211BF94h case    4:*/		return 0x8211BF98;
		  /* 8211BF98h */ case    5:  		/* addi R6, R23, 48 */
		/* 8211BF98h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R23,0x30);
		/* 8211BF98h case    5:*/		return 0x8211BF9C;
		  /* 8211BF9Ch */ case    6:  		/* mr R4, R27 */
		/* 8211BF9Ch case    6:*/		regs.R4 = regs.R27;
		/* 8211BF9Ch case    6:*/		return 0x8211BFA0;
		  /* 8211BFA0h */ case    7:  		/* mr R3, R21 */
		/* 8211BFA0h case    7:*/		regs.R3 = regs.R21;
		/* 8211BFA0h case    7:*/		return 0x8211BFA4;
		  /* 8211BFA4h */ case    8:  		/* lfd FR1, <#[R4 + 8]> */
		/* 8211BFA4h case    8:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R4 + 0x00000008) );
		/* 8211BFA4h case    8:*/		return 0x8211BFA8;
		  /* 8211BFA8h */ case    9:  		/* bl -12152 */
		/* 8211BFA8h case    9:*/		regs.LR = 0x8211BFAC; return 0x82119030;
		/* 8211BFA8h case    9:*/		return 0x8211BFAC;
		  /* 8211BFACh */ case   10:  		/* or. R31, R3, R3 */
		/* 8211BFACh case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211BFACh case   10:*/		return 0x8211BFB0;
		  /* 8211BFB0h */ case   11:  		/* bc 12, CR0_LT, 36 */
		/* 8211BFB0h case   11:*/		if ( regs.CR[0].lt ) { return 0x8211BFD4;  }
		/* 8211BFB0h case   11:*/		return 0x8211BFB4;
		  /* 8211BFB4h */ case   12:  		/* addi R9, R9, 1 */
		/* 8211BFB4h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211BFB4h case   12:*/		return 0x8211BFB8;
		  /* 8211BFB8h */ case   13:  		/* addi R4, R4, 16 */
		/* 8211BFB8h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 8211BFB8h case   13:*/		return 0x8211BFBC;
		  /* 8211BFBCh */ case   14:  		/* cmplw CR6, R9, R26 */
		/* 8211BFBCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 8211BFBCh case   14:*/		return 0x8211BFC0;
		  /* 8211BFC0h */ case   15:  		/* bc 12, CR6_LT, -32 */
		/* 8211BFC0h case   15:*/		if ( regs.CR[6].lt ) { return 0x8211BFA0;  }
		/* 8211BFC0h case   15:*/		return 0x8211BFC4;
	}
	return 0x8211BFC4;
} // Block from 8211BF84h-8211BFC4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211BFC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BFC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BFC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BFC4);
		  /* 8211BFC4h */ case    0:  		/* mr R31, R24 */
		/* 8211BFC4h case    0:*/		regs.R31 = regs.R24;
		/* 8211BFC4h case    0:*/		return 0x8211BFC8;
		  /* 8211BFC8h */ case    1:  		/* b 12 */
		/* 8211BFC8h case    1:*/		return 0x8211BFD4;
		/* 8211BFC8h case    1:*/		return 0x8211BFCC;
	}
	return 0x8211BFCC;
} // Block from 8211BFC4h-8211BFCCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211BFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BFCC);
		  /* 8211BFCCh */ case    0:  		/* lis R31, -32768 */
		/* 8211BFCCh case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 8211BFCCh case    0:*/		return 0x8211BFD0;
		  /* 8211BFD0h */ case    1:  		/* ori R31, R31, 16389 */
		/* 8211BFD0h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 8211BFD0h case    1:*/		return 0x8211BFD4;
	}
	return 0x8211BFD4;
} // Block from 8211BFCCh-8211BFD4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211BFD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BFD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BFD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BFD4);
		  /* 8211BFD4h */ case    0:  		/* addi R11, R1, 80 */
		/* 8211BFD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211BFD4h case    0:*/		return 0x8211BFD8;
		  /* 8211BFD8h */ case    1:  		/* li R30, 4 */
		/* 8211BFD8h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 8211BFD8h case    1:*/		return 0x8211BFDC;
		  /* 8211BFDCh */ case    2:  		/* addi R29, R11, -4 */
		/* 8211BFDCh case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 8211BFDCh case    2:*/		return 0x8211BFE0;
		  /* 8211BFE0h */ case    3:  		/* lis R4, 9345 */
		/* 8211BFE0h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211BFE0h case    3:*/		return 0x8211BFE4;
		  /* 8211BFE4h */ case    4:  		/* lwzu R3, <#[R29 + 4]> */
		/* 8211BFE4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8211BFE4h case    4:*/		return 0x8211BFE8;
		  /* 8211BFE8h */ case    5:  		/* bl -605360 */
		/* 8211BFE8h case    5:*/		regs.LR = 0x8211BFEC; return 0x82088338;
		/* 8211BFE8h case    5:*/		return 0x8211BFEC;
		  /* 8211BFECh */ case    6:  		/* addic. R30, R30, -1 */
		/* 8211BFECh case    6:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8211BFECh case    6:*/		return 0x8211BFF0;
		  /* 8211BFF0h */ case    7:  		/* bc 4, CR0_EQ, -16 */
		/* 8211BFF0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8211BFE0;  }
		/* 8211BFF0h case    7:*/		return 0x8211BFF4;
		  /* 8211BFF4h */ case    8:  		/* mr R3, R31 */
		/* 8211BFF4h case    8:*/		regs.R3 = regs.R31;
		/* 8211BFF4h case    8:*/		return 0x8211BFF8;
		  /* 8211BFF8h */ case    9:  		/* b 12 */
		/* 8211BFF8h case    9:*/		return 0x8211C004;
		/* 8211BFF8h case    9:*/		return 0x8211BFFC;
	}
	return 0x8211BFFC;
} // Block from 8211BFD4h-8211BFFCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211BFFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211BFFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211BFFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211BFFC);
		  /* 8211BFFCh */ case    0:  		/* lis R3, -32768 */
		/* 8211BFFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211BFFCh case    0:*/		return 0x8211C000;
		  /* 8211C000h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8211C000h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211C000h case    1:*/		return 0x8211C004;
	}
	return 0x8211C004;
} // Block from 8211BFFCh-8211C004h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C004);
		  /* 8211C004h */ case    0:  		/* addi R1, R1, 256 */
		/* 8211C004h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8211C004h case    0:*/		return 0x8211C008;
		  /* 8211C008h */ case    1:  		/* addi R12, R1, -96 */
		/* 8211C008h case    1:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFA0);
		/* 8211C008h case    1:*/		return 0x8211C00C;
		  /* 8211C00Ch */ case    2:  		/* bl -568232 */
		/* 8211C00Ch case    2:*/		regs.LR = 0x8211C010; return 0x82091464;
		/* 8211C00Ch case    2:*/		return 0x8211C010;
		  /* 8211C010h */ case    3:  		/* b -568708 */
		/* 8211C010h case    3:*/		return 0x8209128C;
		/* 8211C010h case    3:*/		return 0x8211C014;
		  /* 8211C014h */ case    4:  		/* nop */
		/* 8211C014h case    4:*/		cpu::op::nop();
		/* 8211C014h case    4:*/		return 0x8211C018;
	}
	return 0x8211C018;
} // Block from 8211C004h-8211C018h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211C018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C018);
		  /* 8211C018h */ case    0:  		/* mfspr R12, LR */
		/* 8211C018h case    0:*/		regs.R12 = regs.LR;
		/* 8211C018h case    0:*/		return 0x8211C01C;
		  /* 8211C01Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211C01Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211C01Ch case    1:*/		return 0x8211C020;
		  /* 8211C020h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8211C020h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211C020h case    2:*/		return 0x8211C024;
		  /* 8211C024h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8211C024h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8211C024h case    3:*/		return 0x8211C028;
		  /* 8211C028h */ case    4:  		/* mr R31, R4 */
		/* 8211C028h case    4:*/		regs.R31 = regs.R4;
		/* 8211C028h case    4:*/		return 0x8211C02C;
		  /* 8211C02Ch */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 8211C02Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211C02Ch case    5:*/		return 0x8211C030;
		  /* 8211C030h */ case    6:  		/* bc 12, CR6_EQ, 88 */
		/* 8211C030h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211C088;  }
		/* 8211C030h case    6:*/		return 0x8211C034;
		  /* 8211C034h */ case    7:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211C034h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211C034h case    7:*/		return 0x8211C038;
		  /* 8211C038h */ case    8:  		/* cmpwi CR6, R11, 14 */
		/* 8211C038h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211C038h case    8:*/		return 0x8211C03C;
		  /* 8211C03Ch */ case    9:  		/* bc 4, CR6_EQ, 76 */
		/* 8211C03Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211C088;  }
		/* 8211C03Ch case    9:*/		return 0x8211C040;
		  /* 8211C040h */ case   10:  		/* lwz R4, <#[R4 + 16]> */
		/* 8211C040h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000010) );
		/* 8211C040h case   10:*/		return 0x8211C044;
		  /* 8211C044h */ case   11:  		/* cmplwi CR6, R4, 0 */
		/* 8211C044h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211C044h case   11:*/		return 0x8211C048;
		  /* 8211C048h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 8211C048h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8211C05C;  }
		/* 8211C048h case   12:*/		return 0x8211C04C;
		  /* 8211C04Ch */ case   13:  		/* li R11, 0 */
		/* 8211C04Ch case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211C04Ch case   13:*/		return 0x8211C050;
		  /* 8211C050h */ case   14:  		/* stw R11, <#[R31 + 20]> */
		/* 8211C050h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8211C050h case   14:*/		return 0x8211C054;
		  /* 8211C054h */ case   15:  		/* stw R11, <#[R31 + 24]> */
		/* 8211C054h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8211C054h case   15:*/		return 0x8211C058;
		  /* 8211C058h */ case   16:  		/* b 48 */
		/* 8211C058h case   16:*/		return 0x8211C088;
		/* 8211C058h case   16:*/		return 0x8211C05C;
	}
	return 0x8211C05C;
} // Block from 8211C018h-8211C05Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211C05Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C05C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C05C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C05C);
		  /* 8211C05Ch */ case    0:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211C05Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211C05Ch case    0:*/		return 0x8211C060;
		  /* 8211C060h */ case    1:  		/* cmpwi CR6, R11, 9 */
		/* 8211C060h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211C060h case    1:*/		return 0x8211C064;
		  /* 8211C064h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 8211C064h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211C078;  }
		/* 8211C064h case    2:*/		return 0x8211C068;
		  /* 8211C068h */ case    3:  		/* lwz R11, <#[R4 + 28]> */
		/* 8211C068h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 8211C068h case    3:*/		return 0x8211C06C;
		  /* 8211C06Ch */ case    4:  		/* stw R11, <#[R31 + 20]> */
		/* 8211C06Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8211C06Ch case    4:*/		return 0x8211C070;
		  /* 8211C070h */ case    5:  		/* lwz R11, <#[R4 + 32]> */
		/* 8211C070h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000020) );
		/* 8211C070h case    5:*/		return 0x8211C074;
		  /* 8211C074h */ case    6:  		/* b -32 */
		/* 8211C074h case    6:*/		return 0x8211C054;
		/* 8211C074h case    6:*/		return 0x8211C078;
	}
	return 0x8211C078;
} // Block from 8211C05Ch-8211C078h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211C078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C078);
		  /* 8211C078h */ case    0:  		/* li R11, 1 */
		/* 8211C078h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211C078h case    0:*/		return 0x8211C07C;
		  /* 8211C07Ch */ case    1:  		/* stw R11, <#[R31 + 20]> */
		/* 8211C07Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8211C07Ch case    1:*/		return 0x8211C080;
		  /* 8211C080h */ case    2:  		/* bl -7344 */
		/* 8211C080h case    2:*/		regs.LR = 0x8211C084; return 0x8211A3D0;
		/* 8211C080h case    2:*/		return 0x8211C084;
		  /* 8211C084h */ case    3:  		/* stw R3, <#[R31 + 24]> */
		/* 8211C084h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8211C084h case    3:*/		return 0x8211C088;
	}
	return 0x8211C088;
} // Block from 8211C078h-8211C088h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211C088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C088);
		  /* 8211C088h */ case    0:  		/* addi R1, R1, 96 */
		/* 8211C088h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8211C088h case    0:*/		return 0x8211C08C;
		  /* 8211C08Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211C08Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211C08Ch case    1:*/		return 0x8211C090;
		  /* 8211C090h */ case    2:  		/* mtspr LR, R12 */
		/* 8211C090h case    2:*/		regs.LR = regs.R12;
		/* 8211C090h case    2:*/		return 0x8211C094;
		  /* 8211C094h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8211C094h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211C094h case    3:*/		return 0x8211C098;
		  /* 8211C098h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8211C098h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211C098h case    4:*/		return 0x8211C09C;
	}
	return 0x8211C09C;
} // Block from 8211C088h-8211C09Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211C09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C09C);
		  /* 8211C09Ch */ case    0:  		/* nop */
		/* 8211C09Ch case    0:*/		cpu::op::nop();
		/* 8211C09Ch case    0:*/		return 0x8211C0A0;
	}
	return 0x8211C0A0;
} // Block from 8211C09Ch-8211C0A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C0A0);
		  /* 8211C0A0h */ case    0:  		/* mfspr R12, LR */
		/* 8211C0A0h case    0:*/		regs.R12 = regs.LR;
		/* 8211C0A0h case    0:*/		return 0x8211C0A4;
		  /* 8211C0A4h */ case    1:  		/* bl -568916 */
		/* 8211C0A4h case    1:*/		regs.LR = 0x8211C0A8; return 0x82091250;
		/* 8211C0A4h case    1:*/		return 0x8211C0A8;
		  /* 8211C0A8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8211C0A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8211C0A8h case    2:*/		return 0x8211C0AC;
		  /* 8211C0ACh */ case    3:  		/* mr R26, R3 */
		/* 8211C0ACh case    3:*/		regs.R26 = regs.R3;
		/* 8211C0ACh case    3:*/		return 0x8211C0B0;
		  /* 8211C0B0h */ case    4:  		/* mr R30, R4 */
		/* 8211C0B0h case    4:*/		regs.R30 = regs.R4;
		/* 8211C0B0h case    4:*/		return 0x8211C0B4;
		  /* 8211C0B4h */ case    5:  		/* mr R29, R5 */
		/* 8211C0B4h case    5:*/		regs.R29 = regs.R5;
		/* 8211C0B4h case    5:*/		return 0x8211C0B8;
		  /* 8211C0B8h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8211C0B8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211C0B8h case    6:*/		return 0x8211C0BC;
		  /* 8211C0BCh */ case    7:  		/* bc 12, CR6_EQ, 288 */
		/* 8211C0BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8211C1DC;  }
		/* 8211C0BCh case    7:*/		return 0x8211C0C0;
		  /* 8211C0C0h */ case    8:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211C0C0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211C0C0h case    8:*/		return 0x8211C0C4;
		  /* 8211C0C4h */ case    9:  		/* cmpwi CR6, R11, 3 */
		/* 8211C0C4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211C0C4h case    9:*/		return 0x8211C0C8;
		  /* 8211C0C8h */ case   10:  		/* bc 4, CR6_EQ, 276 */
		/* 8211C0C8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211C1DC;  }
		/* 8211C0C8h case   10:*/		return 0x8211C0CC;
		  /* 8211C0CCh */ case   11:  		/* lwz R11, <#[R4 + 16]> */
		/* 8211C0CCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8211C0CCh case   11:*/		return 0x8211C0D0;
		  /* 8211C0D0h */ case   12:  		/* cmpwi CR6, R11, 2 */
		/* 8211C0D0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211C0D0h case   12:*/		return 0x8211C0D4;
		  /* 8211C0D4h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 8211C0D4h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211C0E0;  }
		/* 8211C0D4h case   13:*/		return 0x8211C0D8;
		  /* 8211C0D8h */ case   14:  		/* cmpwi CR6, R11, 3 */
		/* 8211C0D8h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211C0D8h case   14:*/		return 0x8211C0DC;
		  /* 8211C0DCh */ case   15:  		/* bc 4, CR6_EQ, 256 */
		/* 8211C0DCh case   15:*/		if ( !regs.CR[6].eq ) { return 0x8211C1DC;  }
		/* 8211C0DCh case   15:*/		return 0x8211C0E0;
	}
	return 0x8211C0E0;
} // Block from 8211C0A0h-8211C0E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211C0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C0E0);
		  /* 8211C0E0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211C0E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211C0E0h case    0:*/		return 0x8211C0E4;
		  /* 8211C0E4h */ case    1:  		/* bc 12, CR6_EQ, 248 */
		/* 8211C0E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211C1DC;  }
		/* 8211C0E4h case    1:*/		return 0x8211C0E8;
		  /* 8211C0E8h */ case    2:  		/* lwz R11, <#[R29 + 4]> */
		/* 8211C0E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8211C0E8h case    2:*/		return 0x8211C0EC;
		  /* 8211C0ECh */ case    3:  		/* cmpwi CR6, R11, 3 */
		/* 8211C0ECh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211C0ECh case    3:*/		return 0x8211C0F0;
		  /* 8211C0F0h */ case    4:  		/* bc 4, CR6_EQ, 236 */
		/* 8211C0F0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211C1DC;  }
		/* 8211C0F0h case    4:*/		return 0x8211C0F4;
		  /* 8211C0F4h */ case    5:  		/* lwz R11, <#[R29 + 16]> */
		/* 8211C0F4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8211C0F4h case    5:*/		return 0x8211C0F8;
		  /* 8211C0F8h */ case    6:  		/* addi R31, R29, 16 */
		/* 8211C0F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x10);
		/* 8211C0F8h case    6:*/		return 0x8211C0FC;
		  /* 8211C0FCh */ case    7:  		/* cmpwi CR6, R11, 11 */
		/* 8211C0FCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 8211C0FCh case    7:*/		return 0x8211C100;
		  /* 8211C100h */ case    8:  		/* bc 4, CR6_EQ, 220 */
		/* 8211C100h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211C1DC;  }
		/* 8211C100h case    8:*/		return 0x8211C104;
		  /* 8211C104h */ case    9:  		/* li R3, 56 */
		/* 8211C104h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x38);
		/* 8211C104h case    9:*/		return 0x8211C108;
		  /* 8211C108h */ case   10:  		/* bl -339680 */
		/* 8211C108h case   10:*/		regs.LR = 0x8211C10C; return 0x820C9228;
		/* 8211C108h case   10:*/		return 0x8211C10C;
		  /* 8211C10Ch */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8211C10Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211C10Ch case   11:*/		return 0x8211C110;
		  /* 8211C110h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 8211C110h case   12:*/		if ( regs.CR[0].eq ) { return 0x8211C124;  }
		/* 8211C110h case   12:*/		return 0x8211C114;
		  /* 8211C114h */ case   13:  		/* mr R4, R31 */
		/* 8211C114h case   13:*/		regs.R4 = regs.R31;
		/* 8211C114h case   13:*/		return 0x8211C118;
		  /* 8211C118h */ case   14:  		/* bl -338120 */
		/* 8211C118h case   14:*/		regs.LR = 0x8211C11C; return 0x820C9850;
		/* 8211C118h case   14:*/		return 0x8211C11C;
		  /* 8211C11Ch */ case   15:  		/* mr R27, R3 */
		/* 8211C11Ch case   15:*/		regs.R27 = regs.R3;
		/* 8211C11Ch case   15:*/		return 0x8211C120;
		  /* 8211C120h */ case   16:  		/* b 8 */
		/* 8211C120h case   16:*/		return 0x8211C128;
		/* 8211C120h case   16:*/		return 0x8211C124;
	}
	return 0x8211C124;
} // Block from 8211C0E0h-8211C124h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211C124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C124);
		  /* 8211C124h */ case    0:  		/* li R27, 0 */
		/* 8211C124h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8211C124h case    0:*/		return 0x8211C128;
	}
	return 0x8211C128;
} // Block from 8211C124h-8211C128h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C128);
		  /* 8211C128h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8211C128h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211C128h case    0:*/		return 0x8211C12C;
		  /* 8211C12Ch */ case    1:  		/* bc 12, CR6_EQ, 176 */
		/* 8211C12Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211C1DC;  }
		/* 8211C12Ch case    1:*/		return 0x8211C130;
		  /* 8211C130h */ case    2:  		/* lwz R28, <#[R30 + 24]> */
		/* 8211C130h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000018) );
		/* 8211C130h case    2:*/		return 0x8211C134;
		  /* 8211C134h */ case    3:  		/* lis R11, -32255 */
		/* 8211C134h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211C134h case    3:*/		return 0x8211C138;
		  /* 8211C138h */ case    4:  		/* li R4, 16 */
		/* 8211C138h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8211C138h case    4:*/		return 0x8211C13C;
		  /* 8211C13Ch */ case    5:  		/* lwz R30, <#[R29 + 24]> */
		/* 8211C13Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000018) );
		/* 8211C13Ch case    5:*/		return 0x8211C140;
		  /* 8211C140h */ case    6:  		/* addi R5, R11, -10436 */
		/* 8211C140h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD73C);
		/* 8211C140h case    6:*/		return 0x8211C144;
		  /* 8211C144h */ case    7:  		/* mr R6, R28 */
		/* 8211C144h case    7:*/		regs.R6 = regs.R28;
		/* 8211C144h case    7:*/		return 0x8211C148;
		  /* 8211C148h */ case    8:  		/* addi R3, R1, 80 */
		/* 8211C148h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8211C148h case    8:*/		return 0x8211C14C;
		  /* 8211C14Ch */ case    9:  		/* bl -498444 */
		/* 8211C14Ch case    9:*/		regs.LR = 0x8211C150; return 0x820A2640;
		/* 8211C14Ch case    9:*/		return 0x8211C150;
		  /* 8211C150h */ case   10:  		/* addi R11, R1, 80 */
		/* 8211C150h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211C150h case   10:*/		return 0x8211C154;
		  /* 8211C154h */ case   11:  		/* mr R10, R11 */
		/* 8211C154h case   11:*/		regs.R10 = regs.R11;
		/* 8211C154h case   11:*/		return 0x8211C158;
		  /* 8211C158h */ case   12:  		/* lbz R9, <#[R11]> */
		/* 8211C158h case   12:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C158h case   12:*/		return 0x8211C15C;
		  /* 8211C15Ch */ case   13:  		/* addi R11, R11, 1 */
		/* 8211C15Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211C15Ch case   13:*/		return 0x8211C160;
		  /* 8211C160h */ case   14:  		/* cmplwi CR6, R9, 0 */
		/* 8211C160h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211C160h case   14:*/		return 0x8211C164;
		  /* 8211C164h */ case   15:  		/* bc 4, CR6_EQ, -12 */
		/* 8211C164h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8211C158;  }
		/* 8211C164h case   15:*/		return 0x8211C168;
		  /* 8211C168h */ case   16:  		/* subf R10, R10, R11 */
		/* 8211C168h case   16:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8211C168h case   16:*/		return 0x8211C16C;
		  /* 8211C16Ch */ case   17:  		/* mr R11, R30 */
		/* 8211C16Ch case   17:*/		regs.R11 = regs.R30;
		/* 8211C16Ch case   17:*/		return 0x8211C170;
		  /* 8211C170h */ case   18:  		/* addi R10, R10, -1 */
		/* 8211C170h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8211C170h case   18:*/		return 0x8211C174;
		  /* 8211C174h */ case   19:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8211C174h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8211C174h case   19:*/		return 0x8211C178;
		  /* 8211C178h */ case   20:  		/* lbz R9, <#[R11]> */
		/* 8211C178h case   20:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C178h case   20:*/		return 0x8211C17C;
		  /* 8211C17Ch */ case   21:  		/* addi R11, R11, 1 */
		/* 8211C17Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211C17Ch case   21:*/		return 0x8211C180;
		  /* 8211C180h */ case   22:  		/* cmplwi CR6, R9, 0 */
		/* 8211C180h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211C180h case   22:*/		return 0x8211C184;
		  /* 8211C184h */ case   23:  		/* bc 4, CR6_EQ, -12 */
		/* 8211C184h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8211C178;  }
		/* 8211C184h case   23:*/		return 0x8211C188;
		  /* 8211C188h */ case   24:  		/* subf R11, R30, R11 */
		/* 8211C188h case   24:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8211C188h case   24:*/		return 0x8211C18C;
		  /* 8211C18Ch */ case   25:  		/* lwz R3, <#[R26 + 4]> */
		/* 8211C18Ch case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000004) );
		/* 8211C18Ch case   25:*/		return 0x8211C190;
		  /* 8211C190h */ case   26:  		/* li R5, 1 */
		/* 8211C190h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8211C190h case   26:*/		return 0x8211C194;
		  /* 8211C194h */ case   27:  		/* addi R11, R11, -1 */
		/* 8211C194h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8211C194h case   27:*/		return 0x8211C198;
		  /* 8211C198h */ case   28:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8211C198h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8211C198h case   28:*/		return 0x8211C19C;
		  /* 8211C19Ch */ case   29:  		/* add R11, R11, R10 */
		/* 8211C19Ch case   29:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8211C19Ch case   29:*/		return 0x8211C1A0;
		  /* 8211C1A0h */ case   30:  		/* addi R29, R11, 1 */
		/* 8211C1A0h case   30:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 8211C1A0h case   30:*/		return 0x8211C1A4;
		  /* 8211C1A4h */ case   31:  		/* mr R4, R29 */
		/* 8211C1A4h case   31:*/		regs.R4 = regs.R29;
		/* 8211C1A4h case   31:*/		return 0x8211C1A8;
		  /* 8211C1A8h */ case   32:  		/* bl -340168 */
		/* 8211C1A8h case   32:*/		regs.LR = 0x8211C1AC; return 0x820C90E0;
		/* 8211C1A8h case   32:*/		return 0x8211C1AC;
		  /* 8211C1ACh */ case   33:  		/* or. R31, R3, R3 */
		/* 8211C1ACh case   33:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211C1ACh case   33:*/		return 0x8211C1B0;
		  /* 8211C1B0h */ case   34:  		/* bc 12, CR0_EQ, 44 */
		/* 8211C1B0h case   34:*/		if ( regs.CR[0].eq ) { return 0x8211C1DC;  }
		/* 8211C1B0h case   34:*/		return 0x8211C1B4;
		  /* 8211C1B4h */ case   35:  		/* lis R11, -32253 */
		/* 8211C1B4h case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211C1B4h case   35:*/		return 0x8211C1B8;
		  /* 8211C1B8h */ case   36:  		/* mr R7, R30 */
		/* 8211C1B8h case   36:*/		regs.R7 = regs.R30;
		/* 8211C1B8h case   36:*/		return 0x8211C1BC;
		  /* 8211C1BCh */ case   37:  		/* addi R5, R11, 8860 */
		/* 8211C1BCh case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x229C);
		/* 8211C1BCh case   37:*/		return 0x8211C1C0;
		  /* 8211C1C0h */ case   38:  		/* mr R6, R28 */
		/* 8211C1C0h case   38:*/		regs.R6 = regs.R28;
		/* 8211C1C0h case   38:*/		return 0x8211C1C4;
		  /* 8211C1C4h */ case   39:  		/* mr R4, R29 */
		/* 8211C1C4h case   39:*/		regs.R4 = regs.R29;
		/* 8211C1C4h case   39:*/		return 0x8211C1C8;
		  /* 8211C1C8h */ case   40:  		/* mr R3, R31 */
		/* 8211C1C8h case   40:*/		regs.R3 = regs.R31;
		/* 8211C1C8h case   40:*/		return 0x8211C1CC;
		  /* 8211C1CCh */ case   41:  		/* bl -498572 */
		/* 8211C1CCh case   41:*/		regs.LR = 0x8211C1D0; return 0x820A2640;
		/* 8211C1CCh case   41:*/		return 0x8211C1D0;
		  /* 8211C1D0h */ case   42:  		/* stw R31, <#[R27 + 24]> */
		/* 8211C1D0h case   42:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000018) );
		/* 8211C1D0h case   42:*/		return 0x8211C1D4;
		  /* 8211C1D4h */ case   43:  		/* mr R3, R27 */
		/* 8211C1D4h case   43:*/		regs.R3 = regs.R27;
		/* 8211C1D4h case   43:*/		return 0x8211C1D8;
		  /* 8211C1D8h */ case   44:  		/* b 8 */
		/* 8211C1D8h case   44:*/		return 0x8211C1E0;
		/* 8211C1D8h case   44:*/		return 0x8211C1DC;
	}
	return 0x8211C1DC;
} // Block from 8211C128h-8211C1DCh (45 instructions)

//////////////////////////////////////////////////////
// Block at 8211C1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C1DC);
		  /* 8211C1DCh */ case    0:  		/* li R3, 0 */
		/* 8211C1DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211C1DCh case    0:*/		return 0x8211C1E0;
	}
	return 0x8211C1E0;
} // Block from 8211C1DCh-8211C1E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C1E0);
		  /* 8211C1E0h */ case    0:  		/* addi R1, R1, 160 */
		/* 8211C1E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8211C1E0h case    0:*/		return 0x8211C1E4;
		  /* 8211C1E4h */ case    1:  		/* b -569156 */
		/* 8211C1E4h case    1:*/		return 0x820912A0;
		/* 8211C1E4h case    1:*/		return 0x8211C1E8;
	}
	return 0x8211C1E8;
} // Block from 8211C1E0h-8211C1E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C1E8);
		  /* 8211C1E8h */ case    0:  		/* mfspr R12, LR */
		/* 8211C1E8h case    0:*/		regs.R12 = regs.LR;
		/* 8211C1E8h case    0:*/		return 0x8211C1EC;
		  /* 8211C1ECh */ case    1:  		/* bl -569244 */
		/* 8211C1ECh case    1:*/		regs.LR = 0x8211C1F0; return 0x82091250;
		/* 8211C1ECh case    1:*/		return 0x8211C1F0;
		  /* 8211C1F0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211C1F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211C1F0h case    2:*/		return 0x8211C1F4;
		  /* 8211C1F4h */ case    3:  		/* mr R26, R3 */
		/* 8211C1F4h case    3:*/		regs.R26 = regs.R3;
		/* 8211C1F4h case    3:*/		return 0x8211C1F8;
		  /* 8211C1F8h */ case    4:  		/* mr R31, R4 */
		/* 8211C1F8h case    4:*/		regs.R31 = regs.R4;
		/* 8211C1F8h case    4:*/		return 0x8211C1FC;
		  /* 8211C1FCh */ case    5:  		/* mr R29, R5 */
		/* 8211C1FCh case    5:*/		regs.R29 = regs.R5;
		/* 8211C1FCh case    5:*/		return 0x8211C200;
		  /* 8211C200h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8211C200h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211C200h case    6:*/		return 0x8211C204;
		  /* 8211C204h */ case    7:  		/* bc 12, CR6_EQ, 264 */
		/* 8211C204h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211C30C;  }
		/* 8211C204h case    7:*/		return 0x8211C208;
		  /* 8211C208h */ case    8:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211C208h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211C208h case    8:*/		return 0x8211C20C;
		  /* 8211C20Ch */ case    9:  		/* cmpwi CR6, R11, 3 */
		/* 8211C20Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211C20Ch case    9:*/		return 0x8211C210;
		  /* 8211C210h */ case   10:  		/* bc 4, CR6_EQ, 252 */
		/* 8211C210h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211C30C;  }
		/* 8211C210h case   10:*/		return 0x8211C214;
		  /* 8211C214h */ case   11:  		/* lwz R11, <#[R4 + 16]> */
		/* 8211C214h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8211C214h case   11:*/		return 0x8211C218;
		  /* 8211C218h */ case   12:  		/* addi R30, R4, 16 */
		/* 8211C218h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R4,0x10);
		/* 8211C218h case   12:*/		return 0x8211C21C;
		  /* 8211C21Ch */ case   13:  		/* cmpwi CR6, R11, 12 */
		/* 8211C21Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 8211C21Ch case   13:*/		return 0x8211C220;
		  /* 8211C220h */ case   14:  		/* bc 4, CR6_EQ, 236 */
		/* 8211C220h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8211C30C;  }
		/* 8211C220h case   14:*/		return 0x8211C224;
		  /* 8211C224h */ case   15:  		/* cmplwi CR6, R5, 0 */
		/* 8211C224h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8211C224h case   15:*/		return 0x8211C228;
		  /* 8211C228h */ case   16:  		/* bc 12, CR6_EQ, 228 */
		/* 8211C228h case   16:*/		if ( regs.CR[6].eq ) { return 0x8211C30C;  }
		/* 8211C228h case   16:*/		return 0x8211C22C;
		  /* 8211C22Ch */ case   17:  		/* lwz R11, <#[R5 + 4]> */
		/* 8211C22Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 8211C22Ch case   17:*/		return 0x8211C230;
		  /* 8211C230h */ case   18:  		/* cmpwi CR6, R11, 3 */
		/* 8211C230h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211C230h case   18:*/		return 0x8211C234;
		  /* 8211C234h */ case   19:  		/* bc 4, CR6_EQ, 216 */
		/* 8211C234h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8211C30C;  }
		/* 8211C234h case   19:*/		return 0x8211C238;
		  /* 8211C238h */ case   20:  		/* lwz R11, <#[R5 + 16]> */
		/* 8211C238h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 8211C238h case   20:*/		return 0x8211C23C;
		  /* 8211C23Ch */ case   21:  		/* cmpwi CR6, R11, 12 */
		/* 8211C23Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 8211C23Ch case   21:*/		return 0x8211C240;
		  /* 8211C240h */ case   22:  		/* bc 4, CR6_EQ, 204 */
		/* 8211C240h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8211C30C;  }
		/* 8211C240h case   22:*/		return 0x8211C244;
		  /* 8211C244h */ case   23:  		/* li R3, 56 */
		/* 8211C244h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x38);
		/* 8211C244h case   23:*/		return 0x8211C248;
		  /* 8211C248h */ case   24:  		/* bl -340000 */
		/* 8211C248h case   24:*/		regs.LR = 0x8211C24C; return 0x820C9228;
		/* 8211C248h case   24:*/		return 0x8211C24C;
		  /* 8211C24Ch */ case   25:  		/* cmplwi CR0, R3, 0 */
		/* 8211C24Ch case   25:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211C24Ch case   25:*/		return 0x8211C250;
		  /* 8211C250h */ case   26:  		/* bc 12, CR0_EQ, 20 */
		/* 8211C250h case   26:*/		if ( regs.CR[0].eq ) { return 0x8211C264;  }
		/* 8211C250h case   26:*/		return 0x8211C254;
		  /* 8211C254h */ case   27:  		/* mr R4, R30 */
		/* 8211C254h case   27:*/		regs.R4 = regs.R30;
		/* 8211C254h case   27:*/		return 0x8211C258;
		  /* 8211C258h */ case   28:  		/* bl -338440 */
		/* 8211C258h case   28:*/		regs.LR = 0x8211C25C; return 0x820C9850;
		/* 8211C258h case   28:*/		return 0x8211C25C;
		  /* 8211C25Ch */ case   29:  		/* mr R27, R3 */
		/* 8211C25Ch case   29:*/		regs.R27 = regs.R3;
		/* 8211C25Ch case   29:*/		return 0x8211C260;
		  /* 8211C260h */ case   30:  		/* b 8 */
		/* 8211C260h case   30:*/		return 0x8211C268;
		/* 8211C260h case   30:*/		return 0x8211C264;
	}
	return 0x8211C264;
} // Block from 8211C1E8h-8211C264h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8211C264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C264);
		  /* 8211C264h */ case    0:  		/* li R27, 0 */
		/* 8211C264h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8211C264h case    0:*/		return 0x8211C268;
	}
	return 0x8211C268;
} // Block from 8211C264h-8211C268h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C268);
		  /* 8211C268h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8211C268h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211C268h case    0:*/		return 0x8211C26C;
		  /* 8211C26Ch */ case    1:  		/* bc 12, CR6_EQ, 160 */
		/* 8211C26Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211C30C;  }
		/* 8211C26Ch case    1:*/		return 0x8211C270;
		  /* 8211C270h */ case    2:  		/* lwz R28, <#[R31 + 24]> */
		/* 8211C270h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000018) );
		/* 8211C270h case    2:*/		return 0x8211C274;
		  /* 8211C274h */ case    3:  		/* lwz R29, <#[R29 + 24]> */
		/* 8211C274h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000018) );
		/* 8211C274h case    3:*/		return 0x8211C278;
		  /* 8211C278h */ case    4:  		/* mr R11, R28 */
		/* 8211C278h case    4:*/		regs.R11 = regs.R28;
		/* 8211C278h case    4:*/		return 0x8211C27C;
		  /* 8211C27Ch */ case    5:  		/* lbz R10, <#[R11]> */
		/* 8211C27Ch case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C27Ch case    5:*/		return 0x8211C280;
		  /* 8211C280h */ case    6:  		/* addi R11, R11, 1 */
		/* 8211C280h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211C280h case    6:*/		return 0x8211C284;
		  /* 8211C284h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 8211C284h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211C284h case    7:*/		return 0x8211C288;
		  /* 8211C288h */ case    8:  		/* bc 4, CR6_EQ, -12 */
		/* 8211C288h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211C27C;  }
		/* 8211C288h case    8:*/		return 0x8211C28C;
		  /* 8211C28Ch */ case    9:  		/* subf R10, R28, R11 */
		/* 8211C28Ch case    9:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R28,regs.R11);
		/* 8211C28Ch case    9:*/		return 0x8211C290;
		  /* 8211C290h */ case   10:  		/* mr R11, R29 */
		/* 8211C290h case   10:*/		regs.R11 = regs.R29;
		/* 8211C290h case   10:*/		return 0x8211C294;
		  /* 8211C294h */ case   11:  		/* addi R10, R10, -1 */
		/* 8211C294h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8211C294h case   11:*/		return 0x8211C298;
		  /* 8211C298h */ case   12:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8211C298h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8211C298h case   12:*/		return 0x8211C29C;
		  /* 8211C29Ch */ case   13:  		/* lbz R9, <#[R11]> */
		/* 8211C29Ch case   13:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C29Ch case   13:*/		return 0x8211C2A0;
		  /* 8211C2A0h */ case   14:  		/* addi R11, R11, 1 */
		/* 8211C2A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211C2A0h case   14:*/		return 0x8211C2A4;
		  /* 8211C2A4h */ case   15:  		/* cmplwi CR6, R9, 0 */
		/* 8211C2A4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211C2A4h case   15:*/		return 0x8211C2A8;
		  /* 8211C2A8h */ case   16:  		/* bc 4, CR6_EQ, -12 */
		/* 8211C2A8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8211C29C;  }
		/* 8211C2A8h case   16:*/		return 0x8211C2AC;
		  /* 8211C2ACh */ case   17:  		/* subf R11, R29, R11 */
		/* 8211C2ACh case   17:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 8211C2ACh case   17:*/		return 0x8211C2B0;
		  /* 8211C2B0h */ case   18:  		/* lwz R3, <#[R26 + 4]> */
		/* 8211C2B0h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000004) );
		/* 8211C2B0h case   18:*/		return 0x8211C2B4;
		  /* 8211C2B4h */ case   19:  		/* li R5, 1 */
		/* 8211C2B4h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8211C2B4h case   19:*/		return 0x8211C2B8;
		  /* 8211C2B8h */ case   20:  		/* addi R11, R11, -1 */
		/* 8211C2B8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8211C2B8h case   20:*/		return 0x8211C2BC;
		  /* 8211C2BCh */ case   21:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8211C2BCh case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8211C2BCh case   21:*/		return 0x8211C2C0;
		  /* 8211C2C0h */ case   22:  		/* add R11, R11, R10 */
		/* 8211C2C0h case   22:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8211C2C0h case   22:*/		return 0x8211C2C4;
		  /* 8211C2C4h */ case   23:  		/* addi R30, R11, 1 */
		/* 8211C2C4h case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1);
		/* 8211C2C4h case   23:*/		return 0x8211C2C8;
		  /* 8211C2C8h */ case   24:  		/* mr R4, R30 */
		/* 8211C2C8h case   24:*/		regs.R4 = regs.R30;
		/* 8211C2C8h case   24:*/		return 0x8211C2CC;
		  /* 8211C2CCh */ case   25:  		/* bl -340460 */
		/* 8211C2CCh case   25:*/		regs.LR = 0x8211C2D0; return 0x820C90E0;
		/* 8211C2CCh case   25:*/		return 0x8211C2D0;
		  /* 8211C2D0h */ case   26:  		/* or. R31, R3, R3 */
		/* 8211C2D0h case   26:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211C2D0h case   26:*/		return 0x8211C2D4;
		  /* 8211C2D4h */ case   27:  		/* bc 12, CR0_EQ, 56 */
		/* 8211C2D4h case   27:*/		if ( regs.CR[0].eq ) { return 0x8211C30C;  }
		/* 8211C2D4h case   27:*/		return 0x8211C2D8;
		  /* 8211C2D8h */ case   28:  		/* lis R11, -32255 */
		/* 8211C2D8h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211C2D8h case   28:*/		return 0x8211C2DC;
		  /* 8211C2DCh */ case   29:  		/* mr R7, R29 */
		/* 8211C2DCh case   29:*/		regs.R7 = regs.R29;
		/* 8211C2DCh case   29:*/		return 0x8211C2E0;
		  /* 8211C2E0h */ case   30:  		/* addi R5, R11, -10152 */
		/* 8211C2E0h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD858);
		/* 8211C2E0h case   30:*/		return 0x8211C2E4;
		  /* 8211C2E4h */ case   31:  		/* mr R6, R28 */
		/* 8211C2E4h case   31:*/		regs.R6 = regs.R28;
		/* 8211C2E4h case   31:*/		return 0x8211C2E8;
		  /* 8211C2E8h */ case   32:  		/* mr R4, R30 */
		/* 8211C2E8h case   32:*/		regs.R4 = regs.R30;
		/* 8211C2E8h case   32:*/		return 0x8211C2EC;
		  /* 8211C2ECh */ case   33:  		/* mr R3, R31 */
		/* 8211C2ECh case   33:*/		regs.R3 = regs.R31;
		/* 8211C2ECh case   33:*/		return 0x8211C2F0;
		  /* 8211C2F0h */ case   34:  		/* bl -498864 */
		/* 8211C2F0h case   34:*/		regs.LR = 0x8211C2F4; return 0x820A2640;
		/* 8211C2F0h case   34:*/		return 0x8211C2F4;
		  /* 8211C2F4h */ case   35:  		/* add R11, R31, R30 */
		/* 8211C2F4h case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R30);
		/* 8211C2F4h case   35:*/		return 0x8211C2F8;
		  /* 8211C2F8h */ case   36:  		/* li R10, 0 */
		/* 8211C2F8h case   36:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211C2F8h case   36:*/		return 0x8211C2FC;
		  /* 8211C2FCh */ case   37:  		/* mr R3, R27 */
		/* 8211C2FCh case   37:*/		regs.R3 = regs.R27;
		/* 8211C2FCh case   37:*/		return 0x8211C300;
		  /* 8211C300h */ case   38:  		/* stb R10, <#[R11 - 1]> */
		/* 8211C300h case   38:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 8211C300h case   38:*/		return 0x8211C304;
		  /* 8211C304h */ case   39:  		/* stw R31, <#[R27 + 24]> */
		/* 8211C304h case   39:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000018) );
		/* 8211C304h case   39:*/		return 0x8211C308;
		  /* 8211C308h */ case   40:  		/* b 8 */
		/* 8211C308h case   40:*/		return 0x8211C310;
		/* 8211C308h case   40:*/		return 0x8211C30C;
	}
	return 0x8211C30C;
} // Block from 8211C268h-8211C30Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 8211C30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C30C);
		  /* 8211C30Ch */ case    0:  		/* li R3, 0 */
		/* 8211C30Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211C30Ch case    0:*/		return 0x8211C310;
	}
	return 0x8211C310;
} // Block from 8211C30Ch-8211C310h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C310);
		  /* 8211C310h */ case    0:  		/* addi R1, R1, 144 */
		/* 8211C310h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211C310h case    0:*/		return 0x8211C314;
		  /* 8211C314h */ case    1:  		/* b -569460 */
		/* 8211C314h case    1:*/		return 0x820912A0;
		/* 8211C314h case    1:*/		return 0x8211C318;
	}
	return 0x8211C318;
} // Block from 8211C310h-8211C318h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C318);
		  /* 8211C318h */ case    0:  		/* mfspr R12, LR */
		/* 8211C318h case    0:*/		regs.R12 = regs.LR;
		/* 8211C318h case    0:*/		return 0x8211C31C;
		  /* 8211C31Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211C31Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211C31Ch case    1:*/		return 0x8211C320;
		  /* 8211C320h */ case    2:  		/* std R5, <#[R1 + 32]> */
		/* 8211C320h case    2:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 8211C320h case    2:*/		return 0x8211C324;
		  /* 8211C324h */ case    3:  		/* std R6, <#[R1 + 40]> */
		/* 8211C324h case    3:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 8211C324h case    3:*/		return 0x8211C328;
		  /* 8211C328h */ case    4:  		/* std R7, <#[R1 + 48]> */
		/* 8211C328h case    4:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 8211C328h case    4:*/		return 0x8211C32C;
		  /* 8211C32Ch */ case    5:  		/* std R8, <#[R1 + 56]> */
		/* 8211C32Ch case    5:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 8211C32Ch case    5:*/		return 0x8211C330;
		  /* 8211C330h */ case    6:  		/* std R9, <#[R1 + 64]> */
		/* 8211C330h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 8211C330h case    6:*/		return 0x8211C334;
		  /* 8211C334h */ case    7:  		/* std R10, <#[R1 + 72]> */
		/* 8211C334h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 8211C334h case    7:*/		return 0x8211C338;
		  /* 8211C338h */ case    8:  		/* stwu R1, <#[R1 - 96]> */
		/* 8211C338h case    8:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8211C338h case    8:*/		return 0x8211C33C;
		  /* 8211C33Ch */ case    9:  		/* stw R4, <#[R1 + 124]> */
		/* 8211C33Ch case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 8211C33Ch case    9:*/		return 0x8211C340;
		  /* 8211C340h */ case   10:  		/* addi R11, R1, 80 */
		/* 8211C340h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211C340h case   10:*/		return 0x8211C344;
		  /* 8211C344h */ case   11:  		/* addi R10, R1, 128 */
		/* 8211C344h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8211C344h case   11:*/		return 0x8211C348;
		  /* 8211C348h */ case   12:  		/* lwz R3, <#[R3 + 3032]> */
		/* 8211C348h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000BD8) );
		/* 8211C348h case   12:*/		return 0x8211C34C;
		  /* 8211C34Ch */ case   13:  		/* stw R10, <#[R11]> */
		/* 8211C34Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C34Ch case   13:*/		return 0x8211C350;
		  /* 8211C350h */ case   14:  		/* lwz R5, <#[R1 + 80]> */
		/* 8211C350h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 8211C350h case   14:*/		return 0x8211C354;
		  /* 8211C354h */ case   15:  		/* bl -11460 */
		/* 8211C354h case   15:*/		regs.LR = 0x8211C358; return 0x82119690;
		/* 8211C354h case   15:*/		return 0x8211C358;
		  /* 8211C358h */ case   16:  		/* addi R1, R1, 96 */
		/* 8211C358h case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8211C358h case   16:*/		return 0x8211C35C;
		  /* 8211C35Ch */ case   17:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211C35Ch case   17:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211C35Ch case   17:*/		return 0x8211C360;
		  /* 8211C360h */ case   18:  		/* mtspr LR, R12 */
		/* 8211C360h case   18:*/		regs.LR = regs.R12;
		/* 8211C360h case   18:*/		return 0x8211C364;
		  /* 8211C364h */ case   19:  		/* bclr 20, CR0_LT */
		/* 8211C364h case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211C364h case   19:*/		return 0x8211C368;
	}
	return 0x8211C368;
} // Block from 8211C318h-8211C368h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211C368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C368);
		  /* 8211C368h */ case    0:  		/* mfspr R12, LR */
		/* 8211C368h case    0:*/		regs.R12 = regs.LR;
		/* 8211C368h case    0:*/		return 0x8211C36C;
		  /* 8211C36Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211C36Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211C36Ch case    1:*/		return 0x8211C370;
		  /* 8211C370h */ case    2:  		/* std R5, <#[R1 + 32]> */
		/* 8211C370h case    2:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 8211C370h case    2:*/		return 0x8211C374;
		  /* 8211C374h */ case    3:  		/* std R6, <#[R1 + 40]> */
		/* 8211C374h case    3:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 8211C374h case    3:*/		return 0x8211C378;
		  /* 8211C378h */ case    4:  		/* std R7, <#[R1 + 48]> */
		/* 8211C378h case    4:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 8211C378h case    4:*/		return 0x8211C37C;
		  /* 8211C37Ch */ case    5:  		/* std R8, <#[R1 + 56]> */
		/* 8211C37Ch case    5:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 8211C37Ch case    5:*/		return 0x8211C380;
		  /* 8211C380h */ case    6:  		/* std R9, <#[R1 + 64]> */
		/* 8211C380h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 8211C380h case    6:*/		return 0x8211C384;
		  /* 8211C384h */ case    7:  		/* std R10, <#[R1 + 72]> */
		/* 8211C384h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 8211C384h case    7:*/		return 0x8211C388;
		  /* 8211C388h */ case    8:  		/* stwu R1, <#[R1 - 96]> */
		/* 8211C388h case    8:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8211C388h case    8:*/		return 0x8211C38C;
		  /* 8211C38Ch */ case    9:  		/* stw R4, <#[R1 + 124]> */
		/* 8211C38Ch case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 8211C38Ch case    9:*/		return 0x8211C390;
		  /* 8211C390h */ case   10:  		/* addi R11, R1, 80 */
		/* 8211C390h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211C390h case   10:*/		return 0x8211C394;
		  /* 8211C394h */ case   11:  		/* addi R10, R1, 128 */
		/* 8211C394h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8211C394h case   11:*/		return 0x8211C398;
		  /* 8211C398h */ case   12:  		/* stw R10, <#[R11]> */
		/* 8211C398h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C398h case   12:*/		return 0x8211C39C;
		  /* 8211C39Ch */ case   13:  		/* lwz R5, <#[R1 + 80]> */
		/* 8211C39Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 8211C39Ch case   13:*/		return 0x8211C3A0;
		  /* 8211C3A0h */ case   14:  		/* bl -11536 */
		/* 8211C3A0h case   14:*/		regs.LR = 0x8211C3A4; return 0x82119690;
		/* 8211C3A0h case   14:*/		return 0x8211C3A4;
		  /* 8211C3A4h */ case   15:  		/* addi R1, R1, 96 */
		/* 8211C3A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8211C3A4h case   15:*/		return 0x8211C3A8;
		  /* 8211C3A8h */ case   16:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211C3A8h case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211C3A8h case   16:*/		return 0x8211C3AC;
		  /* 8211C3ACh */ case   17:  		/* mtspr LR, R12 */
		/* 8211C3ACh case   17:*/		regs.LR = regs.R12;
		/* 8211C3ACh case   17:*/		return 0x8211C3B0;
		  /* 8211C3B0h */ case   18:  		/* bclr 20, CR0_LT */
		/* 8211C3B0h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211C3B0h case   18:*/		return 0x8211C3B4;
	}
	return 0x8211C3B4;
} // Block from 8211C368h-8211C3B4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211C3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C3B4);
		  /* 8211C3B4h */ case    0:  		/* nop */
		/* 8211C3B4h case    0:*/		cpu::op::nop();
		/* 8211C3B4h case    0:*/		return 0x8211C3B8;
	}
	return 0x8211C3B8;
} // Block from 8211C3B4h-8211C3B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C3B8);
		  /* 8211C3B8h */ case    0:  		/* mfspr R12, LR */
		/* 8211C3B8h case    0:*/		regs.R12 = regs.LR;
		/* 8211C3B8h case    0:*/		return 0x8211C3BC;
		  /* 8211C3BCh */ case    1:  		/* bl -569756 */
		/* 8211C3BCh case    1:*/		regs.LR = 0x8211C3C0; return 0x82091220;
		/* 8211C3BCh case    1:*/		return 0x8211C3C0;
		  /* 8211C3C0h */ case    2:  		/* stwu R1, <#[R1 - 464]> */
		/* 8211C3C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE30);
		/* 8211C3C0h case    2:*/		return 0x8211C3C4;
		  /* 8211C3C4h */ case    3:  		/* mr R17, R3 */
		/* 8211C3C4h case    3:*/		regs.R17 = regs.R3;
		/* 8211C3C4h case    3:*/		return 0x8211C3C8;
		  /* 8211C3C8h */ case    4:  		/* stw R7, <#[R1 + 516]> */
		/* 8211C3C8h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000204) );
		/* 8211C3C8h case    4:*/		return 0x8211C3CC;
		  /* 8211C3CCh */ case    5:  		/* mr R18, R4 */
		/* 8211C3CCh case    5:*/		regs.R18 = regs.R4;
		/* 8211C3CCh case    5:*/		return 0x8211C3D0;
		  /* 8211C3D0h */ case    6:  		/* stw R10, <#[R1 + 540]> */
		/* 8211C3D0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000021C) );
		/* 8211C3D0h case    6:*/		return 0x8211C3D4;
		  /* 8211C3D4h */ case    7:  		/* mr R14, R6 */
		/* 8211C3D4h case    7:*/		regs.R14 = regs.R6;
		/* 8211C3D4h case    7:*/		return 0x8211C3D8;
		  /* 8211C3D8h */ case    8:  		/* mr R22, R8 */
		/* 8211C3D8h case    8:*/		regs.R22 = regs.R8;
		/* 8211C3D8h case    8:*/		return 0x8211C3DC;
		  /* 8211C3DCh */ case    9:  		/* mr R16, R9 */
		/* 8211C3DCh case    9:*/		regs.R16 = regs.R9;
		/* 8211C3DCh case    9:*/		return 0x8211C3E0;
		  /* 8211C3E0h */ case   10:  		/* mr R30, R10 */
		/* 8211C3E0h case   10:*/		regs.R30 = regs.R10;
		/* 8211C3E0h case   10:*/		return 0x8211C3E4;
		  /* 8211C3E4h */ case   11:  		/* li R15, 0 */
		/* 8211C3E4h case   11:*/		cpu::op::li<0>(regs,&regs.R15,0x0);
		/* 8211C3E4h case   11:*/		return 0x8211C3E8;
		  /* 8211C3E8h */ case   12:  		/* cmplwi CR6, R9, 0 */
		/* 8211C3E8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211C3E8h case   12:*/		return 0x8211C3EC;
		  /* 8211C3ECh */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 8211C3ECh case   13:*/		if ( regs.CR[6].eq ) { return 0x8211C3F4;  }
		/* 8211C3ECh case   13:*/		return 0x8211C3F0;
		  /* 8211C3F0h */ case   14:  		/* stw R15, <#[R9]> */
		/* 8211C3F0h case   14:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R9 + 0x00000000) );
		/* 8211C3F0h case   14:*/		return 0x8211C3F4;
	}
	return 0x8211C3F4;
} // Block from 8211C3B8h-8211C3F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211C3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C3F4);
		  /* 8211C3F4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211C3F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211C3F4h case    0:*/		return 0x8211C3F8;
		  /* 8211C3F8h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8211C3F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211C400;  }
		/* 8211C3F8h case    1:*/		return 0x8211C3FC;
		  /* 8211C3FCh */ case    2:  		/* stw R15, <#[R30]> */
		/* 8211C3FCh case    2:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R30 + 0x00000000) );
		/* 8211C3FCh case    2:*/		return 0x8211C400;
	}
	return 0x8211C400;
} // Block from 8211C3F4h-8211C400h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C400);
		  /* 8211C400h */ case    0:  		/* mr R10, R22 */
		/* 8211C400h case    0:*/		regs.R10 = regs.R22;
		/* 8211C400h case    0:*/		return 0x8211C404;
		  /* 8211C404h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 8211C404h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8211C404h case    1:*/		return 0x8211C408;
		  /* 8211C408h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8211C408h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211C460;  }
		/* 8211C408h case    2:*/		return 0x8211C40C;
		  /* 8211C40Ch */ case    3:  		/* lwz R11, <#[R10 + 8]> */
		/* 8211C40Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8211C40Ch case    3:*/		return 0x8211C410;
		  /* 8211C410h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8211C410h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211C410h case    4:*/		return 0x8211C414;
		  /* 8211C414h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 8211C414h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211C450;  }
		/* 8211C414h case    5:*/		return 0x8211C418;
		  /* 8211C418h */ case    6:  		/* lwz R9, <#[R11 + 4]> */
		/* 8211C418h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8211C418h case    6:*/		return 0x8211C41C;
		  /* 8211C41Ch */ case    7:  		/* cmpwi CR6, R9, 14 */
		/* 8211C41Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000E);
		/* 8211C41Ch case    7:*/		return 0x8211C420;
		  /* 8211C420h */ case    8:  		/* bc 4, CR6_EQ, 48 */
		/* 8211C420h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211C450;  }
		/* 8211C420h case    8:*/		return 0x8211C424;
		  /* 8211C424h */ case    9:  		/* lwz R11, <#[R11 + 16]> */
		/* 8211C424h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8211C424h case    9:*/		return 0x8211C428;
		  /* 8211C428h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8211C428h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211C428h case   10:*/		return 0x8211C42C;
		  /* 8211C42Ch */ case   11:  		/* bc 12, CR6_EQ, 36 */
		/* 8211C42Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8211C450;  }
		/* 8211C42Ch case   11:*/		return 0x8211C430;
		  /* 8211C430h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211C430h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211C430h case   12:*/		return 0x8211C434;
		  /* 8211C434h */ case   13:  		/* cmpwi CR6, R11, 9 */
		/* 8211C434h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211C434h case   13:*/		return 0x8211C438;
		  /* 8211C438h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 8211C438h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211C444;  }
		/* 8211C438h case   14:*/		return 0x8211C43C;
		  /* 8211C43Ch */ case   15:  		/* cmpwi CR6, R11, 1 */
		/* 8211C43Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211C43Ch case   15:*/		return 0x8211C440;
		  /* 8211C440h */ case   16:  		/* bc 4, CR6_EQ, 16 */
		/* 8211C440h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8211C450;  }
		/* 8211C440h case   16:*/		return 0x8211C444;
	}
	return 0x8211C444;
} // Block from 8211C400h-8211C444h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211C444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C444);
		  /* 8211C444h */ case    0:  		/* lwz R10, <#[R10 + 12]> */
		/* 8211C444h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8211C444h case    0:*/		return 0x8211C448;
		  /* 8211C448h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8211C448h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211C448h case    1:*/		return 0x8211C44C;
		  /* 8211C44Ch */ case    2:  		/* bc 4, CR6_EQ, -64 */
		/* 8211C44Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211C40C;  }
		/* 8211C44Ch case    2:*/		return 0x8211C450;
	}
	return 0x8211C450;
} // Block from 8211C444h-8211C450h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C450);
		  /* 8211C450h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8211C450h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211C450h case    0:*/		return 0x8211C454;
		  /* 8211C454h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8211C454h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211C460;  }
		/* 8211C454h case    1:*/		return 0x8211C458;
		  /* 8211C458h */ case    2:  		/* li R3, 1 */
		/* 8211C458h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8211C458h case    2:*/		return 0x8211C45C;
		  /* 8211C45Ch */ case    3:  		/* b 2716 */
		/* 8211C45Ch case    3:*/		return 0x8211CEF8;
		/* 8211C45Ch case    3:*/		return 0x8211C460;
	}
	return 0x8211C460;
} // Block from 8211C450h-8211C460h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211C460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C460);
		  /* 8211C460h */ case    0:  		/* mr R6, R15 */
		/* 8211C460h case    0:*/		regs.R6 = regs.R15;
		/* 8211C460h case    0:*/		return 0x8211C464;
		  /* 8211C464h */ case    1:  		/* mr R25, R5 */
		/* 8211C464h case    1:*/		regs.R25 = regs.R5;
		/* 8211C464h case    1:*/		return 0x8211C468;
		  /* 8211C468h */ case    2:  		/* cmplwi CR6, R5, 0 */
		/* 8211C468h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8211C468h case    2:*/		return 0x8211C46C;
		  /* 8211C46Ch */ case    3:  		/* bc 12, CR6_EQ, 280 */
		/* 8211C46Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8211C584;  }
		/* 8211C46Ch case    3:*/		return 0x8211C470;
		  /* 8211C470h */ case    4:  		/* lwz R4, <#[R7 + 8]> */
		/* 8211C470h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R7 + 0x00000008) );
		/* 8211C470h case    4:*/		return 0x8211C474;
		  /* 8211C474h */ case    5:  		/* add R11, R25, R6 */
		/* 8211C474h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R6);
		/* 8211C474h case    5:*/		return 0x8211C478;
		  /* 8211C478h */ case    6:  		/* mr R10, R4 */
		/* 8211C478h case    6:*/		regs.R10 = regs.R4;
		/* 8211C478h case    6:*/		return 0x8211C47C;
		  /* 8211C47Ch */ case    7:  		/* rlwinm R11, R11, 31, 1, 31 */
		/* 8211C47Ch case    7:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R11);
		/* 8211C47Ch case    7:*/		return 0x8211C480;
		  /* 8211C480h */ case    8:  		/* mulli R9, R11, 228 */
		/* 8211C480h case    8:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R11,0xE4);
		/* 8211C480h case    8:*/		return 0x8211C484;
		  /* 8211C484h */ case    9:  		/* add R8, R9, R18 */
		/* 8211C484h case    9:*/		cpu::op::add<0>(regs,&regs.R8,regs.R9,regs.R18);
		/* 8211C484h case    9:*/		return 0x8211C488;
		  /* 8211C488h */ case   10:  		/* lwz R9, <#[R8 + 4]> */
		/* 8211C488h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000004) );
		/* 8211C488h case   10:*/		return 0x8211C48C;
		  /* 8211C48Ch */ case   11:  		/* lbz R7, <#[R10]> */
		/* 8211C48Ch case   11:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8211C48Ch case   11:*/		return 0x8211C490;
		  /* 8211C490h */ case   12:  		/* lbz R3, <#[R9]> */
		/* 8211C490h case   12:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R9 + 0x00000000) );
		/* 8211C490h case   12:*/		return 0x8211C494;
		  /* 8211C494h */ case   13:  		/* cmpwi CR0, R7, 0 */
		/* 8211C494h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R7,0x00000000);
		/* 8211C494h case   13:*/		return 0x8211C498;
		  /* 8211C498h */ case   14:  		/* subf R7, R3, R7 */
		/* 8211C498h case   14:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R3,regs.R7);
		/* 8211C498h case   14:*/		return 0x8211C49C;
		  /* 8211C49Ch */ case   15:  		/* bc 12, CR0_EQ, 20 */
		/* 8211C49Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x8211C4B0;  }
		/* 8211C49Ch case   15:*/		return 0x8211C4A0;
		  /* 8211C4A0h */ case   16:  		/* addi R10, R10, 1 */
		/* 8211C4A0h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211C4A0h case   16:*/		return 0x8211C4A4;
		  /* 8211C4A4h */ case   17:  		/* addi R9, R9, 1 */
		/* 8211C4A4h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211C4A4h case   17:*/		return 0x8211C4A8;
		  /* 8211C4A8h */ case   18:  		/* cmpwi CR6, R7, 0 */
		/* 8211C4A8h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8211C4A8h case   18:*/		return 0x8211C4AC;
		  /* 8211C4ACh */ case   19:  		/* bc 12, CR6_EQ, -32 */
		/* 8211C4ACh case   19:*/		if ( regs.CR[6].eq ) { return 0x8211C48C;  }
		/* 8211C4ACh case   19:*/		return 0x8211C4B0;
	}
	return 0x8211C4B0;
} // Block from 8211C460h-8211C4B0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211C4B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C4B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C4B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C4B0);
		  /* 8211C4B0h */ case    0:  		/* cmpwi CR0, R7, 0 */
		/* 8211C4B0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R7,0x00000000);
		/* 8211C4B0h case    0:*/		return 0x8211C4B4;
		  /* 8211C4B4h */ case    1:  		/* bc 4, CR0_GT, 12 */
		/* 8211C4B4h case    1:*/		if ( !regs.CR[0].gt ) { return 0x8211C4C0;  }
		/* 8211C4B4h case    1:*/		return 0x8211C4B8;
		  /* 8211C4B8h */ case    2:  		/* addi R6, R11, 1 */
		/* 8211C4B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1);
		/* 8211C4B8h case    2:*/		return 0x8211C4BC;
		  /* 8211C4BCh */ case    3:  		/* b 16 */
		/* 8211C4BCh case    3:*/		return 0x8211C4CC;
		/* 8211C4BCh case    3:*/		return 0x8211C4C0;
	}
	return 0x8211C4C0;
} // Block from 8211C4B0h-8211C4C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211C4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C4C0);
		  /* 8211C4C0h */ case    0:  		/* cmpwi CR6, R7, 0 */
		/* 8211C4C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8211C4C0h case    0:*/		return 0x8211C4C4;
		  /* 8211C4C4h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 8211C4C4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211C4D8;  }
		/* 8211C4C4h case    1:*/		return 0x8211C4C8;
		  /* 8211C4C8h */ case    2:  		/* mr R25, R11 */
		/* 8211C4C8h case    2:*/		regs.R25 = regs.R11;
		/* 8211C4C8h case    2:*/		return 0x8211C4CC;
	}
	return 0x8211C4CC;
} // Block from 8211C4C0h-8211C4CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C4CC);
		  /* 8211C4CCh */ case    0:  		/* cmplw CR6, R6, R25 */
		/* 8211C4CCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R25);
		/* 8211C4CCh case    0:*/		return 0x8211C4D0;
		  /* 8211C4D0h */ case    1:  		/* bc 12, CR6_LT, -92 */
		/* 8211C4D0h case    1:*/		if ( regs.CR[6].lt ) { return 0x8211C474;  }
		/* 8211C4D0h case    1:*/		return 0x8211C4D4;
		  /* 8211C4D4h */ case    2:  		/* b 176 */
		/* 8211C4D4h case    2:*/		return 0x8211C584;
		/* 8211C4D4h case    2:*/		return 0x8211C4D8;
	}
	return 0x8211C4D8;
} // Block from 8211C4CCh-8211C4D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C4D8);
		  /* 8211C4D8h */ case    0:  		/* mr R6, R11 */
		/* 8211C4D8h case    0:*/		regs.R6 = regs.R11;
		/* 8211C4D8h case    0:*/		return 0x8211C4DC;
		  /* 8211C4DCh */ case    1:  		/* addi R25, R11, 1 */
		/* 8211C4DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x1);
		/* 8211C4DCh case    1:*/		return 0x8211C4E0;
		  /* 8211C4E0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8211C4E0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211C4E0h case    2:*/		return 0x8211C4E4;
		  /* 8211C4E4h */ case    3:  		/* bc 12, CR6_EQ, 72 */
		/* 8211C4E4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211C52C;  }
		/* 8211C4E4h case    3:*/		return 0x8211C4E8;
		  /* 8211C4E8h */ case    4:  		/* addi R8, R8, -224 */
		/* 8211C4E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFF20);
		/* 8211C4E8h case    4:*/		return 0x8211C4EC;
		  /* 8211C4ECh */ case    5:  		/* lwz R10, <#[R8]> */
		/* 8211C4ECh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8211C4ECh case    5:*/		return 0x8211C4F0;
		  /* 8211C4F0h */ case    6:  		/* mr R11, R4 */
		/* 8211C4F0h case    6:*/		regs.R11 = regs.R4;
		/* 8211C4F0h case    6:*/		return 0x8211C4F4;
		  /* 8211C4F4h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 8211C4F4h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C4F4h case    7:*/		return 0x8211C4F8;
		  /* 8211C4F8h */ case    8:  		/* lbz R7, <#[R10]> */
		/* 8211C4F8h case    8:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8211C4F8h case    8:*/		return 0x8211C4FC;
		  /* 8211C4FCh */ case    9:  		/* cmpwi CR0, R9, 0 */
		/* 8211C4FCh case    9:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8211C4FCh case    9:*/		return 0x8211C500;
		  /* 8211C500h */ case   10:  		/* subf R9, R7, R9 */
		/* 8211C500h case   10:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8211C500h case   10:*/		return 0x8211C504;
		  /* 8211C504h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 8211C504h case   11:*/		if ( regs.CR[0].eq ) { return 0x8211C518;  }
		/* 8211C504h case   11:*/		return 0x8211C508;
		  /* 8211C508h */ case   12:  		/* addi R11, R11, 1 */
		/* 8211C508h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211C508h case   12:*/		return 0x8211C50C;
		  /* 8211C50Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 8211C50Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211C50Ch case   13:*/		return 0x8211C510;
		  /* 8211C510h */ case   14:  		/* cmpwi CR6, R9, 0 */
		/* 8211C510h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8211C510h case   14:*/		return 0x8211C514;
		  /* 8211C514h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 8211C514h case   15:*/		if ( regs.CR[6].eq ) { return 0x8211C4F4;  }
		/* 8211C514h case   15:*/		return 0x8211C518;
	}
	return 0x8211C518;
} // Block from 8211C4D8h-8211C518h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211C518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C518);
		  /* 8211C518h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8211C518h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8211C518h case    0:*/		return 0x8211C51C;
		  /* 8211C51Ch */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 8211C51Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8211C52C;  }
		/* 8211C51Ch case    1:*/		return 0x8211C520;
		  /* 8211C520h */ case    2:  		/* addic. R6, R6, -1 */
		/* 8211C520h case    2:*/		cpu::op::addic<1>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 8211C520h case    2:*/		return 0x8211C524;
		  /* 8211C524h */ case    3:  		/* addi R8, R8, -228 */
		/* 8211C524h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFF1C);
		/* 8211C524h case    3:*/		return 0x8211C528;
		  /* 8211C528h */ case    4:  		/* bc 4, CR0_EQ, -60 */
		/* 8211C528h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8211C4EC;  }
		/* 8211C528h case    4:*/		return 0x8211C52C;
	}
	return 0x8211C52C;
} // Block from 8211C518h-8211C52Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211C52Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C52C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C52C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C52C);
		  /* 8211C52Ch */ case    0:  		/* cmplw CR6, R25, R5 */
		/* 8211C52Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R5);
		/* 8211C52Ch case    0:*/		return 0x8211C530;
		  /* 8211C530h */ case    1:  		/* bc 4, CR6_LT, 84 */
		/* 8211C530h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211C584;  }
		/* 8211C530h case    1:*/		return 0x8211C534;
		  /* 8211C534h */ case    2:  		/* mulli R11, R25, 228 */
		/* 8211C534h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R25,0xE4);
		/* 8211C534h case    2:*/		return 0x8211C538;
		  /* 8211C538h */ case    3:  		/* add R11, R11, R18 */
		/* 8211C538h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 8211C538h case    3:*/		return 0x8211C53C;
		  /* 8211C53Ch */ case    4:  		/* addi R9, R11, 4 */
		/* 8211C53Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8211C53Ch case    4:*/		return 0x8211C540;
		  /* 8211C540h */ case    5:  		/* lwz R10, <#[R9]> */
		/* 8211C540h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8211C540h case    5:*/		return 0x8211C544;
		  /* 8211C544h */ case    6:  		/* mr R11, R4 */
		/* 8211C544h case    6:*/		regs.R11 = regs.R4;
		/* 8211C544h case    6:*/		return 0x8211C548;
		  /* 8211C548h */ case    7:  		/* lbz R8, <#[R11]> */
		/* 8211C548h case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C548h case    7:*/		return 0x8211C54C;
		  /* 8211C54Ch */ case    8:  		/* lbz R7, <#[R10]> */
		/* 8211C54Ch case    8:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8211C54Ch case    8:*/		return 0x8211C550;
		  /* 8211C550h */ case    9:  		/* cmpwi CR0, R8, 0 */
		/* 8211C550h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8211C550h case    9:*/		return 0x8211C554;
		  /* 8211C554h */ case   10:  		/* subf R8, R7, R8 */
		/* 8211C554h case   10:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8211C554h case   10:*/		return 0x8211C558;
		  /* 8211C558h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 8211C558h case   11:*/		if ( regs.CR[0].eq ) { return 0x8211C56C;  }
		/* 8211C558h case   11:*/		return 0x8211C55C;
		  /* 8211C55Ch */ case   12:  		/* addi R11, R11, 1 */
		/* 8211C55Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211C55Ch case   12:*/		return 0x8211C560;
		  /* 8211C560h */ case   13:  		/* addi R10, R10, 1 */
		/* 8211C560h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211C560h case   13:*/		return 0x8211C564;
		  /* 8211C564h */ case   14:  		/* cmpwi CR6, R8, 0 */
		/* 8211C564h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8211C564h case   14:*/		return 0x8211C568;
		  /* 8211C568h */ case   15:  		/* bc 12, CR6_EQ, -32 */
		/* 8211C568h case   15:*/		if ( regs.CR[6].eq ) { return 0x8211C548;  }
		/* 8211C568h case   15:*/		return 0x8211C56C;
	}
	return 0x8211C56C;
} // Block from 8211C52Ch-8211C56Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211C56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C56C);
		  /* 8211C56Ch */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 8211C56Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 8211C56Ch case    0:*/		return 0x8211C570;
		  /* 8211C570h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 8211C570h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8211C584;  }
		/* 8211C570h case    1:*/		return 0x8211C574;
		  /* 8211C574h */ case    2:  		/* addi R25, R25, 1 */
		/* 8211C574h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8211C574h case    2:*/		return 0x8211C578;
		  /* 8211C578h */ case    3:  		/* addi R9, R9, 228 */
		/* 8211C578h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xE4);
		/* 8211C578h case    3:*/		return 0x8211C57C;
		  /* 8211C57Ch */ case    4:  		/* cmplw CR6, R25, R5 */
		/* 8211C57Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R5);
		/* 8211C57Ch case    4:*/		return 0x8211C580;
		  /* 8211C580h */ case    5:  		/* bc 12, CR6_LT, -64 */
		/* 8211C580h case    5:*/		if ( regs.CR[6].lt ) { return 0x8211C540;  }
		/* 8211C580h case    5:*/		return 0x8211C584;
	}
	return 0x8211C584;
} // Block from 8211C56Ch-8211C584h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211C584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C584);
		  /* 8211C584h */ case    0:  		/* cmplw CR6, R6, R25 */
		/* 8211C584h case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R25);
		/* 8211C584h case    0:*/		return 0x8211C588;
		  /* 8211C588h */ case    1:  		/* bc 12, CR6_EQ, -304 */
		/* 8211C588h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211C458;  }
		/* 8211C588h case    1:*/		return 0x8211C58C;
		  /* 8211C58Ch */ case    2:  		/* mr R20, R6 */
		/* 8211C58Ch case    2:*/		regs.R20 = regs.R6;
		/* 8211C58Ch case    2:*/		return 0x8211C590;
		  /* 8211C590h */ case    3:  		/* li R21, -1 */
		/* 8211C590h case    3:*/		cpu::op::li<0>(regs,&regs.R21,0xFFFFFFFF);
		/* 8211C590h case    3:*/		return 0x8211C594;
		  /* 8211C594h */ case    4:  		/* li R19, 1 */
		/* 8211C594h case    4:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 8211C594h case    4:*/		return 0x8211C598;
		  /* 8211C598h */ case    5:  		/* bc 4, CR6_LT, 1172 */
		/* 8211C598h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8211CA2C;  }
		/* 8211C598h case    5:*/		return 0x8211C59C;
		  /* 8211C59Ch */ case    6:  		/* mulli R11, R6, 228 */
		/* 8211C59Ch case    6:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R6,0xE4);
		/* 8211C59Ch case    6:*/		return 0x8211C5A0;
		  /* 8211C5A0h */ case    7:  		/* add R11, R11, R18 */
		/* 8211C5A0h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 8211C5A0h case    7:*/		return 0x8211C5A4;
		  /* 8211C5A4h */ case    8:  		/* addi R26, R11, 12 */
		/* 8211C5A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xC);
		/* 8211C5A4h case    8:*/		return 0x8211C5A8;
		  /* 8211C5A8h */ case    9:  		/* li R11, 7 */
		/* 8211C5A8h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 8211C5A8h case    9:*/		return 0x8211C5AC;
		  /* 8211C5ACh */ case   10:  		/* addi R10, R1, 108 */
		/* 8211C5ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x6C);
		/* 8211C5ACh case   10:*/		return 0x8211C5B0;
		  /* 8211C5B0h */ case   11:  		/* addi R27, R26, -12 */
		/* 8211C5B0h case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R26,0xFFFFFFF4);
		/* 8211C5B0h case   11:*/		return 0x8211C5B4;
		  /* 8211C5B4h */ case   12:  		/* mr R9, R21 */
		/* 8211C5B4h case   12:*/		regs.R9 = regs.R21;
		/* 8211C5B4h case   12:*/		return 0x8211C5B8;
		  /* 8211C5B8h */ case   13:  		/* mtspr CTR, R11 */
		/* 8211C5B8h case   13:*/		regs.CTR = regs.R11;
		/* 8211C5B8h case   13:*/		return 0x8211C5BC;
		  /* 8211C5BCh */ case   14:  		/* stwu R9, <#[R10 + 4]> */
		/* 8211C5BCh case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8211C5BCh case   14:*/		return 0x8211C5C0;
		  /* 8211C5C0h */ case   15:  		/* bc 16, CR0_LT, -4 */
		/* 8211C5C0h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211C5BC;  }
		/* 8211C5C0h case   15:*/		return 0x8211C5C4;
		  /* 8211C5C4h */ case   16:  		/* li R11, 7 */
		/* 8211C5C4h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 8211C5C4h case   16:*/		return 0x8211C5C8;
		  /* 8211C5C8h */ case   17:  		/* addi R10, R1, 76 */
		/* 8211C5C8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x4C);
		/* 8211C5C8h case   17:*/		return 0x8211C5CC;
		  /* 8211C5CCh */ case   18:  		/* li R9, 55 */
		/* 8211C5CCh case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x37);
		/* 8211C5CCh case   18:*/		return 0x8211C5D0;
		  /* 8211C5D0h */ case   19:  		/* mtspr CTR, R11 */
		/* 8211C5D0h case   19:*/		regs.CTR = regs.R11;
		/* 8211C5D0h case   19:*/		return 0x8211C5D4;
		  /* 8211C5D4h */ case   20:  		/* stwu R9, <#[R10 + 4]> */
		/* 8211C5D4h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8211C5D4h case   20:*/		return 0x8211C5D8;
		  /* 8211C5D8h */ case   21:  		/* bc 16, CR0_LT, -4 */
		/* 8211C5D8h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211C5D4;  }
		/* 8211C5D8h case   21:*/		return 0x8211C5DC;
		  /* 8211C5DCh */ case   22:  		/* li R11, 7 */
		/* 8211C5DCh case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 8211C5DCh case   22:*/		return 0x8211C5E0;
		  /* 8211C5E0h */ case   23:  		/* addi R10, R1, 140 */
		/* 8211C5E0h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x8C);
		/* 8211C5E0h case   23:*/		return 0x8211C5E4;
		  /* 8211C5E4h */ case   24:  		/* li R9, 5 */
		/* 8211C5E4h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x5);
		/* 8211C5E4h case   24:*/		return 0x8211C5E8;
		  /* 8211C5E8h */ case   25:  		/* mtspr CTR, R11 */
		/* 8211C5E8h case   25:*/		regs.CTR = regs.R11;
		/* 8211C5E8h case   25:*/		return 0x8211C5EC;
		  /* 8211C5ECh */ case   26:  		/* stwu R9, <#[R10 + 4]> */
		/* 8211C5ECh case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8211C5ECh case   26:*/		return 0x8211C5F0;
		  /* 8211C5F0h */ case   27:  		/* bc 16, CR0_LT, -4 */
		/* 8211C5F0h case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211C5EC;  }
		/* 8211C5F0h case   27:*/		return 0x8211C5F4;
		  /* 8211C5F4h */ case   28:  		/* addi R3, R1, 176 */
		/* 8211C5F4h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 8211C5F4h case   28:*/		return 0x8211C5F8;
		  /* 8211C5F8h */ case   29:  		/* bl -334264 */
		/* 8211C5F8h case   29:*/		regs.LR = 0x8211C5FC; return 0x820CAC40;
		/* 8211C5F8h case   29:*/		return 0x8211C5FC;
		  /* 8211C5FCh */ case   30:  		/* addi R3, R1, 224 */
		/* 8211C5FCh case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 8211C5FCh case   30:*/		return 0x8211C600;
		  /* 8211C600h */ case   31:  		/* bl -334272 */
		/* 8211C600h case   31:*/		regs.LR = 0x8211C604; return 0x820CAC40;
		/* 8211C600h case   31:*/		return 0x8211C604;
		  /* 8211C604h */ case   32:  		/* mr R29, R19 */
		/* 8211C604h case   32:*/		regs.R29 = regs.R19;
		/* 8211C604h case   32:*/		return 0x8211C608;
		  /* 8211C608h */ case   33:  		/* mr R28, R22 */
		/* 8211C608h case   33:*/		regs.R28 = regs.R22;
		/* 8211C608h case   33:*/		return 0x8211C60C;
		  /* 8211C60Ch */ case   34:  		/* cmplwi CR6, R22, 0 */
		/* 8211C60Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8211C60Ch case   34:*/		return 0x8211C610;
		  /* 8211C610h */ case   35:  		/* bc 12, CR6_EQ, 584 */
		/* 8211C610h case   35:*/		if ( regs.CR[6].eq ) { return 0x8211C858;  }
		/* 8211C610h case   35:*/		return 0x8211C614;
		  /* 8211C614h */ case   36:  		/* addi R30, R26, 24 */
		/* 8211C614h case   36:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R26,0x18);
		/* 8211C614h case   36:*/		return 0x8211C618;
		  /* 8211C618h */ case   37:  		/* cmplwi CR6, R29, 7 */
		/* 8211C618h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 8211C618h case   37:*/		return 0x8211C61C;
		  /* 8211C61Ch */ case   38:  		/* bc 4, CR6_LT, 516 */
		/* 8211C61Ch case   38:*/		if ( !regs.CR[6].lt ) { return 0x8211C820;  }
		/* 8211C61Ch case   38:*/		return 0x8211C620;
		  /* 8211C620h */ case   39:  		/* lwz R11, <#[R30]> */
		/* 8211C620h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8211C620h case   39:*/		return 0x8211C624;
		  /* 8211C624h */ case   40:  		/* cmplwi CR6, R11, 0 */
		/* 8211C624h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211C624h case   40:*/		return 0x8211C628;
		  /* 8211C628h */ case   41:  		/* bc 12, CR6_EQ, 504 */
		/* 8211C628h case   41:*/		if ( regs.CR[6].eq ) { return 0x8211C820;  }
		/* 8211C628h case   41:*/		return 0x8211C62C;
		  /* 8211C62Ch */ case   42:  		/* lwz R11, <#[R30 + 8]> */
		/* 8211C62Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8211C62Ch case   42:*/		return 0x8211C630;
		  /* 8211C630h */ case   43:  		/* cmpwi CR6, R11, -1 */
		/* 8211C630h case   43:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211C630h case   43:*/		return 0x8211C634;
		  /* 8211C634h */ case   44:  		/* bc 12, CR6_EQ, 472 */
		/* 8211C634h case   44:*/		if ( regs.CR[6].eq ) { return 0x8211C80C;  }
		/* 8211C634h case   44:*/		return 0x8211C638;
		  /* 8211C638h */ case   45:  		/* lwz R10, <#[R28 + 8]> */
		/* 8211C638h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 8211C638h case   45:*/		return 0x8211C63C;
		  /* 8211C63Ch */ case   46:  		/* lwz R31, <#[R10 + 16]> */
		/* 8211C63Ch case   46:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000010) );
		/* 8211C63Ch case   46:*/		return 0x8211C640;
		  /* 8211C640h */ case   47:  		/* lwz R10, <#[R31 + 4]> */
		/* 8211C640h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8211C640h case   47:*/		return 0x8211C644;
		  /* 8211C644h */ case   48:  		/* cmpwi CR6, R10, 9 */
		/* 8211C644h case   48:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 8211C644h case   48:*/		return 0x8211C648;
		  /* 8211C648h */ case   49:  		/* bc 4, CR6_EQ, 472 */
		/* 8211C648h case   49:*/		if ( !regs.CR[6].eq ) { return 0x8211C820;  }
		/* 8211C648h case   49:*/		return 0x8211C64C;
		  /* 8211C64Ch */ case   50:  		/* cmpwi CR6, R11, -2 */
		/* 8211C64Ch case   50:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFE);
		/* 8211C64Ch case   50:*/		return 0x8211C650;
		  /* 8211C650h */ case   51:  		/* bc 12, CR6_EQ, 260 */
		/* 8211C650h case   51:*/		if ( regs.CR[6].eq ) { return 0x8211C754;  }
		/* 8211C650h case   51:*/		return 0x8211C654;
		  /* 8211C654h */ case   52:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211C654h case   52:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211C654h case   52:*/		return 0x8211C658;
		  /* 8211C658h */ case   53:  		/* addi R10, R1, 144 */
		/* 8211C658h case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8211C658h case   53:*/		return 0x8211C65C;
		  /* 8211C65Ch */ case   54:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8211C65Ch case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211C65Ch case   54:*/		return 0x8211C660;
		  /* 8211C660h */ case   55:  		/* cmpwi CR6, R10, 5 */
		/* 8211C660h case   55:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000005);
		/* 8211C660h case   55:*/		return 0x8211C664;
		  /* 8211C664h */ case   56:  		/* bc 12, CR6_EQ, 80 */
		/* 8211C664h case   56:*/		if ( regs.CR[6].eq ) { return 0x8211C6B4;  }
		/* 8211C664h case   56:*/		return 0x8211C668;
		  /* 8211C668h */ case   57:  		/* cmpwi CR6, R10, 0 */
		/* 8211C668h case   57:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8211C668h case   57:*/		return 0x8211C66C;
		  /* 8211C66Ch */ case   58:  		/* bc 4, CR6_EQ, 24 */
		/* 8211C66Ch case   58:*/		if ( !regs.CR[6].eq ) { return 0x8211C684;  }
		/* 8211C66Ch case   58:*/		return 0x8211C670;
		  /* 8211C670h */ case   59:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211C670h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211C670h case   59:*/		return 0x8211C674;
		  /* 8211C674h */ case   60:  		/* cmpwi CR6, R11, 1 */
		/* 8211C674h case   60:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211C674h case   60:*/		return 0x8211C678;
		  /* 8211C678h */ case   61:  		/* bc 12, CR6_EQ, 60 */
		/* 8211C678h case   61:*/		if ( regs.CR[6].eq ) { return 0x8211C6B4;  }
		/* 8211C678h case   61:*/		return 0x8211C67C;
		  /* 8211C67Ch */ case   62:  		/* cmpwi CR6, R11, 2 */
		/* 8211C67Ch case   62:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211C67Ch case   62:*/		return 0x8211C680;
		  /* 8211C680h */ case   63:  		/* bc 12, CR6_EQ, 52 */
		/* 8211C680h case   63:*/		if ( regs.CR[6].eq ) { return 0x8211C6B4;  }
		/* 8211C680h case   63:*/		return 0x8211C684;
	}
	return 0x8211C684;
} // Block from 8211C584h-8211C684h (64 instructions)

//////////////////////////////////////////////////////
// Block at 8211C684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C684);
		  /* 8211C684h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211C684h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211C684h case    0:*/		return 0x8211C688;
		  /* 8211C688h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8211C688h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211C688h case    1:*/		return 0x8211C68C;
		  /* 8211C68Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8211C68Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211C6AC;  }
		/* 8211C68Ch case    2:*/		return 0x8211C690;
		  /* 8211C690h */ case    3:  		/* cmpwi CR6, R10, 0 */
		/* 8211C690h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8211C690h case    3:*/		return 0x8211C694;
		  /* 8211C694h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 8211C694h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211C6D4;  }
		/* 8211C694h case    4:*/		return 0x8211C698;
		  /* 8211C698h */ case    5:  		/* cmpwi CR6, R10, 1 */
		/* 8211C698h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8211C698h case    5:*/		return 0x8211C69C;
		  /* 8211C69Ch */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 8211C69Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8211C6D4;  }
		/* 8211C69Ch case    6:*/		return 0x8211C6A0;
		  /* 8211C6A0h */ case    7:  		/* cmpwi CR6, R10, 2 */
		/* 8211C6A0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 8211C6A0h case    7:*/		return 0x8211C6A4;
		  /* 8211C6A4h */ case    8:  		/* bc 4, CR6_EQ, 380 */
		/* 8211C6A4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211C820;  }
		/* 8211C6A4h case    8:*/		return 0x8211C6A8;
		  /* 8211C6A8h */ case    9:  		/* b 44 */
		/* 8211C6A8h case    9:*/		return 0x8211C6D4;
		/* 8211C6A8h case    9:*/		return 0x8211C6AC;
	}
	return 0x8211C6AC;
} // Block from 8211C684h-8211C6ACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211C6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C6AC);
		  /* 8211C6ACh */ case    0:  		/* cmpw CR6, R11, R10 */
		/* 8211C6ACh case    0:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8211C6ACh case    0:*/		return 0x8211C6B0;
		  /* 8211C6B0h */ case    1:  		/* b -12 */
		/* 8211C6B0h case    1:*/		return 0x8211C6A4;
		/* 8211C6B0h case    1:*/		return 0x8211C6B4;
	}
	return 0x8211C6B4;
} // Block from 8211C6ACh-8211C6B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C6B4);
		  /* 8211C6B4h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8211C6B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8211C6B4h case    0:*/		return 0x8211C6B8;
		  /* 8211C6B8h */ case    1:  		/* addi R10, R1, 144 */
		/* 8211C6B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8211C6B8h case    1:*/		return 0x8211C6BC;
		  /* 8211C6BCh */ case    2:  		/* lwz R9, <#[R31 + 16]> */
		/* 8211C6BCh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8211C6BCh case    2:*/		return 0x8211C6C0;
		  /* 8211C6C0h */ case    3:  		/* addi R8, R1, 272 */
		/* 8211C6C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x110);
		/* 8211C6C0h case    3:*/		return 0x8211C6C4;
		  /* 8211C6C4h */ case    4:  		/* lwz R7, <#[R30 + 12]> */
		/* 8211C6C4h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000000C) );
		/* 8211C6C4h case    4:*/		return 0x8211C6C8;
		  /* 8211C6C8h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211C6C8h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211C6C8h case    5:*/		return 0x8211C6CC;
		  /* 8211C6CCh */ case    6:  		/* stwx R9, <#[R11 + R10]> */
		/* 8211C6CCh case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211C6CCh case    6:*/		return 0x8211C6D0;
		  /* 8211C6D0h */ case    7:  		/* stwx R7, <#[R11 + R8]> */
		/* 8211C6D0h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8211C6D0h case    7:*/		return 0x8211C6D4;
	}
	return 0x8211C6D4;
} // Block from 8211C6B4h-8211C6D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211C6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C6D4);
		  /* 8211C6D4h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 8211C6D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8211C6D4h case    0:*/		return 0x8211C6D8;
		  /* 8211C6D8h */ case    1:  		/* addi R10, R1, 80 */
		/* 8211C6D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8211C6D8h case    1:*/		return 0x8211C6DC;
		  /* 8211C6DCh */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211C6DCh case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211C6DCh case    2:*/		return 0x8211C6E0;
		  /* 8211C6E0h */ case    3:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8211C6E0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211C6E0h case    3:*/		return 0x8211C6E4;
		  /* 8211C6E4h */ case    4:  		/* cmpwi CR6, R11, 55 */
		/* 8211C6E4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000037);
		/* 8211C6E4h case    4:*/		return 0x8211C6E8;
		  /* 8211C6E8h */ case    5:  		/* bc 4, CR6_EQ, 40 */
		/* 8211C6E8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211C710;  }
		/* 8211C6E8h case    5:*/		return 0x8211C6EC;
		  /* 8211C6ECh */ case    6:  		/* lwz R11, <#[R30 + 16]> */
		/* 8211C6ECh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8211C6ECh case    6:*/		return 0x8211C6F0;
		  /* 8211C6F0h */ case    7:  		/* addi R10, R1, 80 */
		/* 8211C6F0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8211C6F0h case    7:*/		return 0x8211C6F4;
		  /* 8211C6F4h */ case    8:  		/* lwz R9, <#[R31 + 20]> */
		/* 8211C6F4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 8211C6F4h case    8:*/		return 0x8211C6F8;
		  /* 8211C6F8h */ case    9:  		/* addi R8, R1, 272 */
		/* 8211C6F8h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x110);
		/* 8211C6F8h case    9:*/		return 0x8211C6FC;
		  /* 8211C6FCh */ case   10:  		/* lwz R7, <#[R30 + 20]> */
		/* 8211C6FCh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000014) );
		/* 8211C6FCh case   10:*/		return 0x8211C700;
		  /* 8211C700h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211C700h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211C700h case   11:*/		return 0x8211C704;
		  /* 8211C704h */ case   12:  		/* stwx R9, <#[R11 + R10]> */
		/* 8211C704h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211C704h case   12:*/		return 0x8211C708;
		  /* 8211C708h */ case   13:  		/* stwx R7, <#[R11 + R8]> */
		/* 8211C708h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8211C708h case   13:*/		return 0x8211C70C;
		  /* 8211C70Ch */ case   14:  		/* b 72 */
		/* 8211C70Ch case   14:*/		return 0x8211C754;
		/* 8211C70Ch case   14:*/		return 0x8211C710;
	}
	return 0x8211C710;
} // Block from 8211C6D4h-8211C710h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211C710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C710);
		  /* 8211C710h */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 8211C710h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8211C710h case    0:*/		return 0x8211C714;
		  /* 8211C714h */ case    1:  		/* addi R9, R1, 80 */
		/* 8211C714h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8211C714h case    1:*/		return 0x8211C718;
		  /* 8211C718h */ case    2:  		/* addi R11, R1, 80 */
		/* 8211C718h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211C718h case    2:*/		return 0x8211C71C;
		  /* 8211C71Ch */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8211C71Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8211C71Ch case    3:*/		return 0x8211C720;
		  /* 8211C720h */ case    4:  		/* addi R5, R1, 224 */
		/* 8211C720h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 8211C720h case    4:*/		return 0x8211C724;
		  /* 8211C724h */ case    5:  		/* addi R4, R1, 176 */
		/* 8211C724h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 8211C724h case    5:*/		return 0x8211C728;
		  /* 8211C728h */ case    6:  		/* mr R3, R17 */
		/* 8211C728h case    6:*/		regs.R3 = regs.R17;
		/* 8211C728h case    6:*/		return 0x8211C72C;
		  /* 8211C72Ch */ case    7:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8211C72Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8211C72Ch case    7:*/		return 0x8211C730;
		  /* 8211C730h */ case    8:  		/* stw R10, <#[R1 + 196]> */
		/* 8211C730h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000C4) );
		/* 8211C730h case    8:*/		return 0x8211C734;
		  /* 8211C734h */ case    9:  		/* lwz R10, <#[R31 + 20]> */
		/* 8211C734h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8211C734h case    9:*/		return 0x8211C738;
		  /* 8211C738h */ case   10:  		/* stw R10, <#[R1 + 244]> */
		/* 8211C738h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000F4) );
		/* 8211C738h case   10:*/		return 0x8211C73C;
		  /* 8211C73Ch */ case   11:  		/* lwz R10, <#[R30 + 16]> */
		/* 8211C73Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8211C73Ch case   11:*/		return 0x8211C740;
		  /* 8211C740h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8211C740h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8211C740h case   12:*/		return 0x8211C744;
		  /* 8211C744h */ case   13:  		/* add R6, R10, R11 */
		/* 8211C744h case   13:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 8211C744h case   13:*/		return 0x8211C748;
		  /* 8211C748h */ case   14:  		/* bl -17160 */
		/* 8211C748h case   14:*/		regs.LR = 0x8211C74C; return 0x82118440;
		/* 8211C748h case   14:*/		return 0x8211C74C;
		  /* 8211C74Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8211C74Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211C74Ch case   15:*/		return 0x8211C750;
		  /* 8211C750h */ case   16:  		/* bc 12, CR0_LT, 208 */
		/* 8211C750h case   16:*/		if ( regs.CR[0].lt ) { return 0x8211C820;  }
		/* 8211C750h case   16:*/		return 0x8211C754;
	}
	return 0x8211C754;
} // Block from 8211C710h-8211C754h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211C754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C754);
		  /* 8211C754h */ case    0:  		/* lwz R8, <#[R31 + 16]> */
		/* 8211C754h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 8211C754h case    0:*/		return 0x8211C758;
		  /* 8211C758h */ case    1:  		/* cmpwi CR6, R8, 0 */
		/* 8211C758h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8211C758h case    1:*/		return 0x8211C75C;
		  /* 8211C75Ch */ case    2:  		/* bc 12, CR6_EQ, 132 */
		/* 8211C75Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8211C7E0;  }
		/* 8211C75Ch case    2:*/		return 0x8211C760;
		  /* 8211C760h */ case    3:  		/* lwz R11, <#[R30 + 24]> */
		/* 8211C760h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 8211C760h case    3:*/		return 0x8211C764;
		  /* 8211C764h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8211C764h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211C764h case    4:*/		return 0x8211C768;
		  /* 8211C768h */ case    5:  		/* bc 4, CR6_LT, 40 */
		/* 8211C768h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8211C790;  }
		/* 8211C768h case    5:*/		return 0x8211C76C;
		  /* 8211C76Ch */ case    6:  		/* nor R9, R11, R11 */
		/* 8211C76Ch case    6:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R11,regs.R11);
		/* 8211C76Ch case    6:*/		return 0x8211C770;
		  /* 8211C770h */ case    7:  		/* lwz R11, <#[R31 + 28]> */
		/* 8211C770h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211C770h case    7:*/		return 0x8211C774;
		  /* 8211C774h */ case    8:  		/* addi R10, R1, 112 */
		/* 8211C774h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211C774h case    8:*/		return 0x8211C778;
		  /* 8211C778h */ case    9:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8211C778h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8211C778h case    9:*/		return 0x8211C77C;
		  /* 8211C77Ch */ case   10:  		/* lwzx R7, <#[R9 + R10]> */
		/* 8211C77Ch case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211C77Ch case   10:*/		return 0x8211C780;
		  /* 8211C780h */ case   11:  		/* cmplw CR6, R7, R11 */
		/* 8211C780h case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 8211C780h case   11:*/		return 0x8211C784;
		  /* 8211C784h */ case   12:  		/* bc 4, CR6_GT, 24 */
		/* 8211C784h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8211C79C;  }
		/* 8211C784h case   12:*/		return 0x8211C788;
		  /* 8211C788h */ case   13:  		/* stwx R11, <#[R9 + R10]> */
		/* 8211C788h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211C788h case   13:*/		return 0x8211C78C;
		  /* 8211C78Ch */ case   14:  		/* b 16 */
		/* 8211C78Ch case   14:*/		return 0x8211C79C;
		/* 8211C78Ch case   14:*/		return 0x8211C790;
	}
	return 0x8211C790;
} // Block from 8211C754h-8211C790h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211C790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C790);
		  /* 8211C790h */ case    0:  		/* lwz R10, <#[R31 + 28]> */
		/* 8211C790h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211C790h case    0:*/		return 0x8211C794;
		  /* 8211C794h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 8211C794h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8211C794h case    1:*/		return 0x8211C798;
		  /* 8211C798h */ case    2:  		/* bc 12, CR6_LT, 136 */
		/* 8211C798h case    2:*/		if ( regs.CR[6].lt ) { return 0x8211C820;  }
		/* 8211C798h case    2:*/		return 0x8211C79C;
	}
	return 0x8211C79C;
} // Block from 8211C790h-8211C79Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C79C);
		  /* 8211C79Ch */ case    0:  		/* cmpwi CR6, R8, 0 */
		/* 8211C79Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8211C79Ch case    0:*/		return 0x8211C7A0;
		  /* 8211C7A0h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 8211C7A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211C7E0;  }
		/* 8211C7A0h case    1:*/		return 0x8211C7A4;
		  /* 8211C7A4h */ case    2:  		/* lwz R11, <#[R30 + 28]> */
		/* 8211C7A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211C7A4h case    2:*/		return 0x8211C7A8;
		  /* 8211C7A8h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 8211C7A8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211C7A8h case    3:*/		return 0x8211C7AC;
		  /* 8211C7ACh */ case    4:  		/* bc 4, CR6_LT, 40 */
		/* 8211C7ACh case    4:*/		if ( !regs.CR[6].lt ) { return 0x8211C7D4;  }
		/* 8211C7ACh case    4:*/		return 0x8211C7B0;
		  /* 8211C7B0h */ case    5:  		/* nor R9, R11, R11 */
		/* 8211C7B0h case    5:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R11,regs.R11);
		/* 8211C7B0h case    5:*/		return 0x8211C7B4;
		  /* 8211C7B4h */ case    6:  		/* lwz R11, <#[R31 + 32]> */
		/* 8211C7B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8211C7B4h case    6:*/		return 0x8211C7B8;
		  /* 8211C7B8h */ case    7:  		/* addi R10, R1, 112 */
		/* 8211C7B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211C7B8h case    7:*/		return 0x8211C7BC;
		  /* 8211C7BCh */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8211C7BCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8211C7BCh case    8:*/		return 0x8211C7C0;
		  /* 8211C7C0h */ case    9:  		/* lwzx R8, <#[R9 + R10]> */
		/* 8211C7C0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211C7C0h case    9:*/		return 0x8211C7C4;
		  /* 8211C7C4h */ case   10:  		/* cmplw CR6, R8, R11 */
		/* 8211C7C4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8211C7C4h case   10:*/		return 0x8211C7C8;
		  /* 8211C7C8h */ case   11:  		/* bc 4, CR6_GT, 24 */
		/* 8211C7C8h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8211C7E0;  }
		/* 8211C7C8h case   11:*/		return 0x8211C7CC;
		  /* 8211C7CCh */ case   12:  		/* stwx R11, <#[R9 + R10]> */
		/* 8211C7CCh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211C7CCh case   12:*/		return 0x8211C7D0;
		  /* 8211C7D0h */ case   13:  		/* b 16 */
		/* 8211C7D0h case   13:*/		return 0x8211C7E0;
		/* 8211C7D0h case   13:*/		return 0x8211C7D4;
	}
	return 0x8211C7D4;
} // Block from 8211C79Ch-8211C7D4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211C7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C7D4);
		  /* 8211C7D4h */ case    0:  		/* lwz R10, <#[R31 + 32]> */
		/* 8211C7D4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8211C7D4h case    0:*/		return 0x8211C7D8;
		  /* 8211C7D8h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 8211C7D8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8211C7D8h case    1:*/		return 0x8211C7DC;
		  /* 8211C7DCh */ case    2:  		/* bc 12, CR6_LT, 68 */
		/* 8211C7DCh case    2:*/		if ( regs.CR[6].lt ) { return 0x8211C820;  }
		/* 8211C7DCh case    2:*/		return 0x8211C7E0;
	}
	return 0x8211C7E0;
} // Block from 8211C7D4h-8211C7E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C7E0);
		  /* 8211C7E0h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8211C7E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8211C7E0h case    0:*/		return 0x8211C7E4;
		  /* 8211C7E4h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8211C7E4h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8211C7E4h case    1:*/		return 0x8211C7E8;
		  /* 8211C7E8h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 8211C7E8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8211C800;  }
		/* 8211C7E8h case    2:*/		return 0x8211C7EC;
		  /* 8211C7ECh */ case    3:  		/* mr R4, R31 */
		/* 8211C7ECh case    3:*/		regs.R4 = regs.R31;
		/* 8211C7ECh case    3:*/		return 0x8211C7F0;
		  /* 8211C7F0h */ case    4:  		/* mr R3, R17 */
		/* 8211C7F0h case    4:*/		regs.R3 = regs.R17;
		/* 8211C7F0h case    4:*/		return 0x8211C7F4;
		  /* 8211C7F4h */ case    5:  		/* bl -9668 */
		/* 8211C7F4h case    5:*/		regs.LR = 0x8211C7F8; return 0x8211A230;
		/* 8211C7F4h case    5:*/		return 0x8211C7F8;
		  /* 8211C7F8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8211C7F8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211C7F8h case    6:*/		return 0x8211C7FC;
		  /* 8211C7FCh */ case    7:  		/* bc 4, CR0_EQ, 36 */
		/* 8211C7FCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x8211C820;  }
		/* 8211C7FCh case    7:*/		return 0x8211C800;
	}
	return 0x8211C800;
} // Block from 8211C7E0h-8211C800h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211C800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C800);
		  /* 8211C800h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8211C800h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8211C800h case    0:*/		return 0x8211C804;
		  /* 8211C804h */ case    1:  		/* cmpwi CR6, R11, -2 */
		/* 8211C804h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFE);
		/* 8211C804h case    1:*/		return 0x8211C808;
		  /* 8211C808h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8211C808h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211C814;  }
		/* 8211C808h case    2:*/		return 0x8211C80C;
	}
	return 0x8211C80C;
} // Block from 8211C800h-8211C80Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C80C);
		  /* 8211C80Ch */ case    0:  		/* addi R30, R30, 32 */
		/* 8211C80Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x20);
		/* 8211C80Ch case    0:*/		return 0x8211C810;
		  /* 8211C810h */ case    1:  		/* addi R29, R29, 1 */
		/* 8211C810h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8211C810h case    1:*/		return 0x8211C814;
	}
	return 0x8211C814;
} // Block from 8211C80Ch-8211C814h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C814);
		  /* 8211C814h */ case    0:  		/* lwz R28, <#[R28 + 12]> */
		/* 8211C814h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 8211C814h case    0:*/		return 0x8211C818;
		  /* 8211C818h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8211C818h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211C818h case    1:*/		return 0x8211C81C;
		  /* 8211C81Ch */ case    2:  		/* bc 4, CR6_EQ, -516 */
		/* 8211C81Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211C618;  }
		/* 8211C81Ch case    2:*/		return 0x8211C820;
	}
	return 0x8211C820;
} // Block from 8211C814h-8211C820h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C820);
		  /* 8211C820h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8211C820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211C820h case    0:*/		return 0x8211C824;
		  /* 8211C824h */ case    1:  		/* bc 4, CR6_EQ, 500 */
		/* 8211C824h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211CA18;  }
		/* 8211C824h case    1:*/		return 0x8211C828;
		  /* 8211C828h */ case    2:  		/* cmplwi CR6, R29, 7 */
		/* 8211C828h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 8211C828h case    2:*/		return 0x8211C82C;
		  /* 8211C82Ch */ case    3:  		/* bc 4, CR6_LT, 76 */
		/* 8211C82Ch case    3:*/		if ( !regs.CR[6].lt ) { return 0x8211C878;  }
		/* 8211C82Ch case    3:*/		return 0x8211C830;
		  /* 8211C830h */ case    4:  		/* rlwinm R11, R29, 5, 0, 26 */
		/* 8211C830h case    4:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R29);
		/* 8211C830h case    4:*/		return 0x8211C834;
		  /* 8211C834h */ case    5:  		/* add R11, R11, R27 */
		/* 8211C834h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8211C834h case    5:*/		return 0x8211C838;
		  /* 8211C838h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211C838h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211C838h case    6:*/		return 0x8211C83C;
		  /* 8211C83Ch */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 8211C83Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211C83Ch case    7:*/		return 0x8211C840;
		  /* 8211C840h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 8211C840h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211C850;  }
		/* 8211C840h case    8:*/		return 0x8211C844;
		  /* 8211C844h */ case    9:  		/* lwz R11, <#[R11 + 12]> */
		/* 8211C844h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8211C844h case    9:*/		return 0x8211C848;
		  /* 8211C848h */ case   10:  		/* cmpwi CR6, R11, -2 */
		/* 8211C848h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFE);
		/* 8211C848h case   10:*/		return 0x8211C84C;
		  /* 8211C84Ch */ case   11:  		/* bc 4, CR6_EQ, 460 */
		/* 8211C84Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211CA18;  }
		/* 8211C84Ch case   11:*/		return 0x8211C850;
	}
	return 0x8211C850;
} // Block from 8211C820h-8211C850h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211C850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C850);
		  /* 8211C850h */ case    0:  		/* cmplwi CR6, R29, 7 */
		/* 8211C850h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000007);
		/* 8211C850h case    0:*/		return 0x8211C854;
		  /* 8211C854h */ case    1:  		/* bc 4, CR6_LT, 36 */
		/* 8211C854h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211C878;  }
		/* 8211C854h case    1:*/		return 0x8211C858;
	}
	return 0x8211C858;
} // Block from 8211C850h-8211C858h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C858);
		  /* 8211C858h */ case    0:  		/* rlwinm R11, R29, 5, 0, 26 */
		/* 8211C858h case    0:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R29);
		/* 8211C858h case    0:*/		return 0x8211C85C;
		  /* 8211C85Ch */ case    1:  		/* add R11, R11, R27 */
		/* 8211C85Ch case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8211C85Ch case    1:*/		return 0x8211C860;
		  /* 8211C860h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211C860h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211C860h case    2:*/		return 0x8211C864;
		  /* 8211C864h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8211C864h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211C864h case    3:*/		return 0x8211C868;
		  /* 8211C868h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8211C868h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211C878;  }
		/* 8211C868h case    4:*/		return 0x8211C86C;
		  /* 8211C86Ch */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 8211C86Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8211C86Ch case    5:*/		return 0x8211C870;
		  /* 8211C870h */ case    6:  		/* cmpwi CR6, R11, -2 */
		/* 8211C870h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFE);
		/* 8211C870h case    6:*/		return 0x8211C874;
		  /* 8211C874h */ case    7:  		/* bc 4, CR6_EQ, 420 */
		/* 8211C874h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211CA18;  }
		/* 8211C874h case    7:*/		return 0x8211C878;
	}
	return 0x8211C878;
} // Block from 8211C858h-8211C878h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211C878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C878);
		  /* 8211C878h */ case    0:  		/* lwz R11, <#[R26 - 4]> */
		/* 8211C878h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0xFFFFFFFC) );
		/* 8211C878h case    0:*/		return 0x8211C87C;
		  /* 8211C87Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211C87Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211C87Ch case    1:*/		return 0x8211C880;
		  /* 8211C880h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8211C880h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211C8D4;  }
		/* 8211C880h case    2:*/		return 0x8211C884;
		  /* 8211C884h */ case    3:  		/* lwz R11, <#[R26]> */
		/* 8211C884h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8211C884h case    3:*/		return 0x8211C888;
		  /* 8211C888h */ case    4:  		/* cmpwi CR6, R11, -1 */
		/* 8211C888h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211C888h case    4:*/		return 0x8211C88C;
		  /* 8211C88Ch */ case    5:  		/* bc 12, CR6_EQ, 72 */
		/* 8211C88Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8211C8D4;  }
		/* 8211C88Ch case    5:*/		return 0x8211C890;
		  /* 8211C890h */ case    6:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8211C890h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8211C890h case    6:*/		return 0x8211C894;
		  /* 8211C894h */ case    7:  		/* addi R11, R1, 144 */
		/* 8211C894h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 8211C894h case    7:*/		return 0x8211C898;
		  /* 8211C898h */ case    8:  		/* lwzx R9, <#[R10 + R11]> */
		/* 8211C898h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211C898h case    8:*/		return 0x8211C89C;
		  /* 8211C89Ch */ case    9:  		/* cmpwi CR6, R9, 5 */
		/* 8211C89Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000005);
		/* 8211C89Ch case    9:*/		return 0x8211C8A0;
		  /* 8211C8A0h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 8211C8A0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211C8B0;  }
		/* 8211C8A0h case   10:*/		return 0x8211C8A4;
		  /* 8211C8A4h */ case   11:  		/* lwz R9, <#[R26 + 4]> */
		/* 8211C8A4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000004) );
		/* 8211C8A4h case   11:*/		return 0x8211C8A8;
		  /* 8211C8A8h */ case   12:  		/* lwz R9, <#[R9]> */
		/* 8211C8A8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8211C8A8h case   12:*/		return 0x8211C8AC;
		  /* 8211C8ACh */ case   13:  		/* stwx R9, <#[R10 + R11]> */
		/* 8211C8ACh case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211C8ACh case   13:*/		return 0x8211C8B0;
	}
	return 0x8211C8B0;
} // Block from 8211C878h-8211C8B0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211C8B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C8B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C8B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C8B0);
		  /* 8211C8B0h */ case    0:  		/* lwz R10, <#[R26 + 8]> */
		/* 8211C8B0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 8211C8B0h case    0:*/		return 0x8211C8B4;
		  /* 8211C8B4h */ case    1:  		/* addi R11, R1, 80 */
		/* 8211C8B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8211C8B4h case    1:*/		return 0x8211C8B8;
		  /* 8211C8B8h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8211C8B8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8211C8B8h case    2:*/		return 0x8211C8BC;
		  /* 8211C8BCh */ case    3:  		/* lwzx R9, <#[R10 + R11]> */
		/* 8211C8BCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211C8BCh case    3:*/		return 0x8211C8C0;
		  /* 8211C8C0h */ case    4:  		/* cmpwi CR6, R9, 55 */
		/* 8211C8C0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000037);
		/* 8211C8C0h case    4:*/		return 0x8211C8C4;
		  /* 8211C8C4h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 8211C8C4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211C8D4;  }
		/* 8211C8C4h case    5:*/		return 0x8211C8C8;
		  /* 8211C8C8h */ case    6:  		/* lwz R9, <#[R26 + 12]> */
		/* 8211C8C8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x0000000C) );
		/* 8211C8C8h case    6:*/		return 0x8211C8CC;
		  /* 8211C8CCh */ case    7:  		/* lwz R9, <#[R9]> */
		/* 8211C8CCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 8211C8CCh case    7:*/		return 0x8211C8D0;
		  /* 8211C8D0h */ case    8:  		/* stwx R9, <#[R10 + R11]> */
		/* 8211C8D0h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8211C8D0h case    8:*/		return 0x8211C8D4;
	}
	return 0x8211C8D4;
} // Block from 8211C8B0h-8211C8D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211C8D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C8D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C8D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C8D4);
		  /* 8211C8D4h */ case    0:  		/* mr R5, R15 */
		/* 8211C8D4h case    0:*/		regs.R5 = regs.R15;
		/* 8211C8D4h case    0:*/		return 0x8211C8D8;
		  /* 8211C8D8h */ case    1:  		/* addi R6, R26, 12 */
		/* 8211C8D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R26,0xC);
		/* 8211C8D8h case    1:*/		return 0x8211C8DC;
		  /* 8211C8DCh */ case    2:  		/* mr R9, R15 */
		/* 8211C8DCh case    2:*/		regs.R9 = regs.R15;
		/* 8211C8DCh case    2:*/		return 0x8211C8E0;
		  /* 8211C8E0h */ case    3:  		/* lwz R11, <#[R6 - 12]> */
		/* 8211C8E0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0xFFFFFFF4) );
		/* 8211C8E0h case    3:*/		return 0x8211C8E4;
		  /* 8211C8E4h */ case    4:  		/* lwz R8, <#[R6 - 8]> */
		/* 8211C8E4h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0xFFFFFFF8) );
		/* 8211C8E4h case    4:*/		return 0x8211C8E8;
		  /* 8211C8E8h */ case    5:  		/* cmpwi CR6, R11, -1 */
		/* 8211C8E8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211C8E8h case    5:*/		return 0x8211C8EC;
		  /* 8211C8ECh */ case    6:  		/* bc 12, CR6_EQ, 272 */
		/* 8211C8ECh case    6:*/		if ( regs.CR[6].eq ) { return 0x8211C9FC;  }
		/* 8211C8ECh case    6:*/		return 0x8211C8F0;
		  /* 8211C8F0h */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 8211C8F0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8211C8F0h case    7:*/		return 0x8211C8F4;
		  /* 8211C8F4h */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 8211C8F4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211C95C;  }
		/* 8211C8F4h case    8:*/		return 0x8211C8F8;
		  /* 8211C8F8h */ case    9:  		/* addi R10, R1, 144 */
		/* 8211C8F8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8211C8F8h case    9:*/		return 0x8211C8FC;
		  /* 8211C8FCh */ case   10:  		/* lwzx R7, <#[R9 + R10]> */
		/* 8211C8FCh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211C8FCh case   10:*/		return 0x8211C900;
		  /* 8211C900h */ case   11:  		/* cmpwi CR6, R7, 5 */
		/* 8211C900h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000005);
		/* 8211C900h case   11:*/		return 0x8211C904;
		  /* 8211C904h */ case   12:  		/* bc 12, CR6_EQ, 80 */
		/* 8211C904h case   12:*/		if ( regs.CR[6].eq ) { return 0x8211C954;  }
		/* 8211C904h case   12:*/		return 0x8211C908;
		  /* 8211C908h */ case   13:  		/* cmpwi CR6, R7, 0 */
		/* 8211C908h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8211C908h case   13:*/		return 0x8211C90C;
		  /* 8211C90Ch */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8211C90Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8211C92C;  }
		/* 8211C90Ch case   14:*/		return 0x8211C910;
		  /* 8211C910h */ case   15:  		/* lwz R11, <#[R8]> */
		/* 8211C910h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8211C910h case   15:*/		return 0x8211C914;
		  /* 8211C914h */ case   16:  		/* cmpwi CR6, R11, 1 */
		/* 8211C914h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211C914h case   16:*/		return 0x8211C918;
		  /* 8211C918h */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 8211C918h case   17:*/		if ( regs.CR[6].eq ) { return 0x8211C924;  }
		/* 8211C918h case   17:*/		return 0x8211C91C;
		  /* 8211C91Ch */ case   18:  		/* cmpwi CR6, R11, 2 */
		/* 8211C91Ch case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211C91Ch case   18:*/		return 0x8211C920;
		  /* 8211C920h */ case   19:  		/* bc 4, CR6_EQ, 12 */
		/* 8211C920h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8211C92C;  }
		/* 8211C920h case   19:*/		return 0x8211C924;
	}
	return 0x8211C924;
} // Block from 8211C8D4h-8211C924h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211C924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C924);
		  /* 8211C924h */ case    0:  		/* stwx R11, <#[R9 + R10]> */
		/* 8211C924h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211C924h case    0:*/		return 0x8211C928;
		  /* 8211C928h */ case    1:  		/* b 32 */
		/* 8211C928h case    1:*/		return 0x8211C948;
		/* 8211C928h case    1:*/		return 0x8211C92C;
	}
	return 0x8211C92C;
} // Block from 8211C924h-8211C92Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C92C);
		  /* 8211C92Ch */ case    0:  		/* lwz R11, <#[R8]> */
		/* 8211C92Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8211C92Ch case    0:*/		return 0x8211C930;
		  /* 8211C930h */ case    1:  		/* b 16 */
		/* 8211C930h case    1:*/		return 0x8211C940;
		/* 8211C930h case    1:*/		return 0x8211C934;
		  /* 8211C934h */ case    2:  		/* cmpw CR6, R7, R11 */
		/* 8211C934h case    2:*/		cpu::op::cmpw<6>(regs,regs.R7,regs.R11);
		/* 8211C934h case    2:*/		return 0x8211C938;
		  /* 8211C938h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8211C938h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211C948;  }
		/* 8211C938h case    3:*/		return 0x8211C93C;
		  /* 8211C93Ch */ case    4:  		/* lwzu R11, <#[R8 + 4]> */
		/* 8211C93Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 8211C93Ch case    4:*/		return 0x8211C940;
	}
	return 0x8211C940;
} // Block from 8211C92Ch-8211C940h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211C940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C940);
		  /* 8211C940h */ case    0:  		/* cmpwi CR6, R11, 5 */
		/* 8211C940h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 8211C940h case    0:*/		return 0x8211C944;
		  /* 8211C944h */ case    1:  		/* bc 4, CR6_EQ, -16 */
		/* 8211C944h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211C934;  }
		/* 8211C944h case    1:*/		return 0x8211C948;
	}
	return 0x8211C948;
} // Block from 8211C940h-8211C948h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C948);
		  /* 8211C948h */ case    0:  		/* cmpwi CR6, R11, 5 */
		/* 8211C948h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 8211C948h case    0:*/		return 0x8211C94C;
		  /* 8211C94Ch */ case    1:  		/* bc 12, CR6_EQ, 196 */
		/* 8211C94Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CA10;  }
		/* 8211C94Ch case    1:*/		return 0x8211C950;
		  /* 8211C950h */ case    2:  		/* b 12 */
		/* 8211C950h case    2:*/		return 0x8211C95C;
		/* 8211C950h case    2:*/		return 0x8211C954;
	}
	return 0x8211C954;
} // Block from 8211C948h-8211C954h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211C954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C954);
		  /* 8211C954h */ case    0:  		/* lwz R11, <#[R8]> */
		/* 8211C954h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8211C954h case    0:*/		return 0x8211C958;
		  /* 8211C958h */ case    1:  		/* stwx R11, <#[R9 + R10]> */
		/* 8211C958h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211C958h case    1:*/		return 0x8211C95C;
	}
	return 0x8211C95C;
} // Block from 8211C954h-8211C95Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C95C);
		  /* 8211C95Ch */ case    0:  		/* lwz R8, <#[R6]> */
		/* 8211C95Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 8211C95Ch case    0:*/		return 0x8211C960;
		  /* 8211C960h */ case    1:  		/* mr R11, R8 */
		/* 8211C960h case    1:*/		regs.R11 = regs.R8;
		/* 8211C960h case    1:*/		return 0x8211C964;
		  /* 8211C964h */ case    2:  		/* cmplwi CR0, R8, 0 */
		/* 8211C964h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 8211C964h case    2:*/		return 0x8211C968;
		  /* 8211C968h */ case    3:  		/* bc 12, CR0_EQ, 128 */
		/* 8211C968h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211C9E8;  }
		/* 8211C968h case    3:*/		return 0x8211C96C;
		  /* 8211C96Ch */ case    4:  		/* addi R7, R1, 80 */
		/* 8211C96Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8211C96Ch case    4:*/		return 0x8211C970;
		  /* 8211C970h */ case    5:  		/* lwzx R3, <#[R9 + R7]> */
		/* 8211C970h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 8211C970h case    5:*/		return 0x8211C974;
		  /* 8211C974h */ case    6:  		/* cmpwi CR6, R3, 55 */
		/* 8211C974h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000037);
		/* 8211C974h case    6:*/		return 0x8211C978;
		  /* 8211C978h */ case    7:  		/* bc 12, CR6_EQ, 104 */
		/* 8211C978h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211C9E0;  }
		/* 8211C978h case    7:*/		return 0x8211C97C;
		  /* 8211C97Ch */ case    8:  		/* lwz R10, <#[R8]> */
		/* 8211C97Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8211C97Ch case    8:*/		return 0x8211C980;
		  /* 8211C980h */ case    9:  		/* b 24 */
		/* 8211C980h case    9:*/		return 0x8211C998;
		/* 8211C980h case    9:*/		return 0x8211C984;
		  /* 8211C984h */ case   10:  		/* cmpwi CR6, R10, 54 */
		/* 8211C984h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000036);
		/* 8211C984h case   10:*/		return 0x8211C988;
		  /* 8211C988h */ case   11:  		/* bc 12, CR6_EQ, 136 */
		/* 8211C988h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211CA10;  }
		/* 8211C988h case   11:*/		return 0x8211C98C;
		  /* 8211C98Ch */ case   12:  		/* cmpw CR6, R3, R10 */
		/* 8211C98Ch case   12:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R10);
		/* 8211C98Ch case   12:*/		return 0x8211C990;
		  /* 8211C990h */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8211C990h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211C9A0;  }
		/* 8211C990h case   13:*/		return 0x8211C994;
		  /* 8211C994h */ case   14:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8211C994h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8211C994h case   14:*/		return 0x8211C998;
	}
	return 0x8211C998;
} // Block from 8211C95Ch-8211C998h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211C998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C998);
		  /* 8211C998h */ case    0:  		/* cmpwi CR6, R10, 55 */
		/* 8211C998h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000037);
		/* 8211C998h case    0:*/		return 0x8211C99C;
		  /* 8211C99Ch */ case    1:  		/* bc 4, CR6_EQ, -24 */
		/* 8211C99Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211C984;  }
		/* 8211C99Ch case    1:*/		return 0x8211C9A0;
	}
	return 0x8211C9A0;
} // Block from 8211C998h-8211C9A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211C9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C9A0);
		  /* 8211C9A0h */ case    0:  		/* cmpwi CR6, R10, 54 */
		/* 8211C9A0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000036);
		/* 8211C9A0h case    0:*/		return 0x8211C9A4;
		  /* 8211C9A4h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 8211C9A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CA10;  }
		/* 8211C9A4h case    1:*/		return 0x8211C9A8;
		  /* 8211C9A8h */ case    2:  		/* addi R11, R1, 144 */
		/* 8211C9A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 8211C9A8h case    2:*/		return 0x8211C9AC;
		  /* 8211C9ACh */ case    3:  		/* lwzx R11, <#[R9 + R11]> */
		/* 8211C9ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8211C9ACh case    3:*/		return 0x8211C9B0;
		  /* 8211C9B0h */ case    4:  		/* cmpwi CR6, R11, 3 */
		/* 8211C9B0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211C9B0h case    4:*/		return 0x8211C9B4;
		  /* 8211C9B4h */ case    5:  		/* bc 4, CR6_EQ, 28 */
		/* 8211C9B4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211C9D0;  }
		/* 8211C9B4h case    5:*/		return 0x8211C9B8;
		  /* 8211C9B8h */ case    6:  		/* cmpwi CR6, R10, 55 */
		/* 8211C9B8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000037);
		/* 8211C9B8h case    6:*/		return 0x8211C9BC;
		  /* 8211C9BCh */ case    7:  		/* bc 4, CR6_EQ, 44 */
		/* 8211C9BCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211C9E8;  }
		/* 8211C9BCh case    7:*/		return 0x8211C9C0;
		  /* 8211C9C0h */ case    8:  		/* lwz R4, <#[R8]> */
		/* 8211C9C0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R8 + 0x00000000) );
		/* 8211C9C0h case    8:*/		return 0x8211C9C4;
		  /* 8211C9C4h */ case    9:  		/* bl -18732 */
		/* 8211C9C4h case    9:*/		regs.LR = 0x8211C9C8; return 0x82118098;
		/* 8211C9C4h case    9:*/		return 0x8211C9C8;
		  /* 8211C9C8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8211C9C8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211C9C8h case   10:*/		return 0x8211C9CC;
		  /* 8211C9CCh */ case   11:  		/* bc 12, CR0_EQ, 68 */
		/* 8211C9CCh case   11:*/		if ( regs.CR[0].eq ) { return 0x8211CA10;  }
		/* 8211C9CCh case   11:*/		return 0x8211C9D0;
	}
	return 0x8211C9D0;
} // Block from 8211C9A0h-8211C9D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211C9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C9D0);
		  /* 8211C9D0h */ case    0:  		/* cmpwi CR6, R10, 55 */
		/* 8211C9D0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000037);
		/* 8211C9D0h case    0:*/		return 0x8211C9D4;
		  /* 8211C9D4h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 8211C9D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211C9E8;  }
		/* 8211C9D4h case    1:*/		return 0x8211C9D8;
		  /* 8211C9D8h */ case    2:  		/* lwz R11, <#[R8]> */
		/* 8211C9D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8211C9D8h case    2:*/		return 0x8211C9DC;
		  /* 8211C9DCh */ case    3:  		/* b 8 */
		/* 8211C9DCh case    3:*/		return 0x8211C9E4;
		/* 8211C9DCh case    3:*/		return 0x8211C9E0;
	}
	return 0x8211C9E0;
} // Block from 8211C9D0h-8211C9E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211C9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C9E0);
		  /* 8211C9E0h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8211C9E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8211C9E0h case    0:*/		return 0x8211C9E4;
	}
	return 0x8211C9E4;
} // Block from 8211C9E0h-8211C9E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C9E4);
		  /* 8211C9E4h */ case    0:  		/* stwx R11, <#[R9 + R7]> */
		/* 8211C9E4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 8211C9E4h case    0:*/		return 0x8211C9E8;
	}
	return 0x8211C9E8;
} // Block from 8211C9E4h-8211C9E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211C9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C9E8);
		  /* 8211C9E8h */ case    0:  		/* addi R11, R1, 112 */
		/* 8211C9E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8211C9E8h case    0:*/		return 0x8211C9EC;
		  /* 8211C9ECh */ case    1:  		/* lwzx R10, <#[R9 + R11]> */
		/* 8211C9ECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8211C9ECh case    1:*/		return 0x8211C9F0;
		  /* 8211C9F0h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 8211C9F0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8211C9F0h case    2:*/		return 0x8211C9F4;
		  /* 8211C9F4h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 8211C9F4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211C9FC;  }
		/* 8211C9F4h case    3:*/		return 0x8211C9F8;
		  /* 8211C9F8h */ case    4:  		/* stwx R19, <#[R9 + R11]> */
		/* 8211C9F8h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8211C9F8h case    4:*/		return 0x8211C9FC;
	}
	return 0x8211C9FC;
} // Block from 8211C9E8h-8211C9FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211C9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211C9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211C9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211C9FC);
		  /* 8211C9FCh */ case    0:  		/* addi R9, R9, 4 */
		/* 8211C9FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8211C9FCh case    0:*/		return 0x8211CA00;
		  /* 8211CA00h */ case    1:  		/* addi R5, R5, 1 */
		/* 8211CA00h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8211CA00h case    1:*/		return 0x8211CA04;
		  /* 8211CA04h */ case    2:  		/* addi R6, R6, 32 */
		/* 8211CA04h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x20);
		/* 8211CA04h case    2:*/		return 0x8211CA08;
		  /* 8211CA08h */ case    3:  		/* cmplwi CR6, R9, 28 */
		/* 8211CA08h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000001C);
		/* 8211CA08h case    3:*/		return 0x8211CA0C;
		  /* 8211CA0Ch */ case    4:  		/* bc 12, CR6_LT, -300 */
		/* 8211CA0Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x8211C8E0;  }
		/* 8211CA0Ch case    4:*/		return 0x8211CA10;
	}
	return 0x8211CA10;
} // Block from 8211C9FCh-8211CA10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211CA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CA10);
		  /* 8211CA10h */ case    0:  		/* cmplwi CR6, R5, 7 */
		/* 8211CA10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000007);
		/* 8211CA10h case    0:*/		return 0x8211CA14;
		  /* 8211CA14h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8211CA14h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CA28;  }
		/* 8211CA14h case    1:*/		return 0x8211CA18;
	}
	return 0x8211CA18;
} // Block from 8211CA10h-8211CA18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211CA18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CA18);
		  /* 8211CA18h */ case    0:  		/* addi R20, R20, 1 */
		/* 8211CA18h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 8211CA18h case    0:*/		return 0x8211CA1C;
		  /* 8211CA1Ch */ case    1:  		/* addi R26, R26, 228 */
		/* 8211CA1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xE4);
		/* 8211CA1Ch case    1:*/		return 0x8211CA20;
		  /* 8211CA20h */ case    2:  		/* cmplw CR6, R20, R25 */
		/* 8211CA20h case    2:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R25);
		/* 8211CA20h case    2:*/		return 0x8211CA24;
		  /* 8211CA24h */ case    3:  		/* bc 12, CR6_LT, -1148 */
		/* 8211CA24h case    3:*/		if ( regs.CR[6].lt ) { return 0x8211C5A8;  }
		/* 8211CA24h case    3:*/		return 0x8211CA28;
	}
	return 0x8211CA28;
} // Block from 8211CA18h-8211CA28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211CA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CA28);
		  /* 8211CA28h */ case    0:  		/* lwz R30, <#[R1 + 540]> */
		/* 8211CA28h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000021C) );
		/* 8211CA28h case    0:*/		return 0x8211CA2C;
	}
	return 0x8211CA2C;
} // Block from 8211CA28h-8211CA2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CA2C);
		  /* 8211CA2Ch */ case    0:  		/* cmplw CR6, R20, R25 */
		/* 8211CA2Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R25);
		/* 8211CA2Ch case    0:*/		return 0x8211CA30;
		  /* 8211CA30h */ case    1:  		/* bc 12, CR6_EQ, 408 */
		/* 8211CA30h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CBC8;  }
		/* 8211CA30h case    1:*/		return 0x8211CA34;
		  /* 8211CA34h */ case    2:  		/* cmplwi CR6, R16, 0 */
		/* 8211CA34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8211CA34h case    2:*/		return 0x8211CA38;
		  /* 8211CA38h */ case    3:  		/* bc 12, CR6_EQ, 1088 */
		/* 8211CA38h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211CE78;  }
		/* 8211CA38h case    3:*/		return 0x8211CA3C;
		  /* 8211CA3Ch */ case    4:  		/* li R3, 80 */
		/* 8211CA3Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x50);
		/* 8211CA3Ch case    4:*/		return 0x8211CA40;
		  /* 8211CA40h */ case    5:  		/* bl -342040 */
		/* 8211CA40h case    5:*/		regs.LR = 0x8211CA44; return 0x820C9228;
		/* 8211CA40h case    5:*/		return 0x8211CA44;
		  /* 8211CA44h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8211CA44h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CA44h case    6:*/		return 0x8211CA48;
		  /* 8211CA48h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 8211CA48h case    7:*/		if ( regs.CR[0].eq ) { return 0x8211CA58;  }
		/* 8211CA48h case    7:*/		return 0x8211CA4C;
		  /* 8211CA4Ch */ case    8:  		/* bl -334788 */
		/* 8211CA4Ch case    8:*/		regs.LR = 0x8211CA50; return 0x820CAE88;
		/* 8211CA4Ch case    8:*/		return 0x8211CA50;
		  /* 8211CA50h */ case    9:  		/* mr R23, R3 */
		/* 8211CA50h case    9:*/		regs.R23 = regs.R3;
		/* 8211CA50h case    9:*/		return 0x8211CA54;
		  /* 8211CA54h */ case   10:  		/* b 8 */
		/* 8211CA54h case   10:*/		return 0x8211CA5C;
		/* 8211CA54h case   10:*/		return 0x8211CA58;
	}
	return 0x8211CA58;
} // Block from 8211CA2Ch-8211CA58h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211CA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CA58);
		  /* 8211CA58h */ case    0:  		/* mr R23, R15 */
		/* 8211CA58h case    0:*/		regs.R23 = regs.R15;
		/* 8211CA58h case    0:*/		return 0x8211CA5C;
	}
	return 0x8211CA5C;
} // Block from 8211CA58h-8211CA5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CA5C);
		  /* 8211CA5Ch */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8211CA5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211CA5Ch case    0:*/		return 0x8211CA60;
		  /* 8211CA60h */ case    1:  		/* bc 12, CR6_EQ, 420 */
		/* 8211CA60h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CA60h case    1:*/		return 0x8211CA64;
		  /* 8211CA64h */ case    2:  		/* lis R11, -32253 */
		/* 8211CA64h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211CA64h case    2:*/		return 0x8211CA68;
		  /* 8211CA68h */ case    3:  		/* mr R10, R22 */
		/* 8211CA68h case    3:*/		regs.R10 = regs.R22;
		/* 8211CA68h case    3:*/		return 0x8211CA6C;
		  /* 8211CA6Ch */ case    4:  		/* addi R24, R23, 44 */
		/* 8211CA6Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R23,0x2C);
		/* 8211CA6Ch case    4:*/		return 0x8211CA70;
		  /* 8211CA70h */ case    5:  		/* mr R31, R15 */
		/* 8211CA70h case    5:*/		regs.R31 = regs.R15;
		/* 8211CA70h case    5:*/		return 0x8211CA74;
		  /* 8211CA74h */ case    6:  		/* mulli R25, R20, 228 */
		/* 8211CA74h case    6:*/		cpu::op::mulli<0>(regs,&regs.R25,regs.R20,0xE4);
		/* 8211CA74h case    6:*/		return 0x8211CA78;
		  /* 8211CA78h */ case    7:  		/* addi R22, R11, 8876 */
		/* 8211CA78h case    7:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x22AC);
		/* 8211CA78h case    7:*/		return 0x8211CA7C;
		  /* 8211CA7Ch */ case    8:  		/* rlwinm R11, R31, 5, 0, 26 */
		/* 8211CA7Ch case    8:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R31);
		/* 8211CA7Ch case    8:*/		return 0x8211CA80;
		  /* 8211CA80h */ case    9:  		/* addi R27, R31, 1 */
		/* 8211CA80h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x1);
		/* 8211CA80h case    9:*/		return 0x8211CA84;
		  /* 8211CA84h */ case   10:  		/* add R11, R11, R25 */
		/* 8211CA84h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 8211CA84h case   10:*/		return 0x8211CA88;
		  /* 8211CA88h */ case   11:  		/* add R11, R11, R18 */
		/* 8211CA88h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 8211CA88h case   11:*/		return 0x8211CA8C;
		  /* 8211CA8Ch */ case   12:  		/* addi R28, R11, 4 */
		/* 8211CA8Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x4);
		/* 8211CA8Ch case   12:*/		return 0x8211CA90;
		  /* 8211CA90h */ case   13:  		/* lwz R11, <#[R11 + 12]> */
		/* 8211CA90h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8211CA90h case   13:*/		return 0x8211CA94;
		  /* 8211CA94h */ case   14:  		/* cmpwi CR6, R11, -2 */
		/* 8211CA94h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFE);
		/* 8211CA94h case   14:*/		return 0x8211CA98;
		  /* 8211CA98h */ case   15:  		/* bc 4, CR6_EQ, 16 */
		/* 8211CA98h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8211CAA8;  }
		/* 8211CA98h case   15:*/		return 0x8211CA9C;
		  /* 8211CA9Ch */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 8211CA9Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211CA9Ch case   16:*/		return 0x8211CAA0;
		  /* 8211CAA0h */ case   17:  		/* bc 12, CR6_EQ, 980 */
		/* 8211CAA0h case   17:*/		if ( regs.CR[6].eq ) { return 0x8211CE74;  }
		/* 8211CAA0h case   17:*/		return 0x8211CAA4;
		  /* 8211CAA4h */ case   18:  		/* mr R27, R31 */
		/* 8211CAA4h case   18:*/		regs.R27 = regs.R31;
		/* 8211CAA4h case   18:*/		return 0x8211CAA8;
	}
	return 0x8211CAA8;
} // Block from 8211CA5Ch-8211CAA8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211CAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CAA8);
		  /* 8211CAA8h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8211CAA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8211CAA8h case    0:*/		return 0x8211CAAC;
		  /* 8211CAACh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211CAACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CAACh case    1:*/		return 0x8211CAB0;
		  /* 8211CAB0h */ case    2:  		/* bc 12, CR6_EQ, 964 */
		/* 8211CAB0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211CE74;  }
		/* 8211CAB0h case    2:*/		return 0x8211CAB4;
		  /* 8211CAB4h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8211CAB4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211CAB4h case    3:*/		return 0x8211CAB8;
		  /* 8211CAB8h */ case    4:  		/* mr R26, R10 */
		/* 8211CAB8h case    4:*/		regs.R26 = regs.R10;
		/* 8211CAB8h case    4:*/		return 0x8211CABC;
		  /* 8211CABCh */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 8211CABCh case    5:*/		if ( regs.CR[6].eq ) { return 0x8211CAC4;  }
		/* 8211CABCh case    5:*/		return 0x8211CAC0;
		  /* 8211CAC0h */ case    6:  		/* lwz R26, <#[R10 + 12]> */
		/* 8211CAC0h case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x0000000C) );
		/* 8211CAC0h case    6:*/		return 0x8211CAC4;
	}
	return 0x8211CAC4;
} // Block from 8211CAA8h-8211CAC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211CAC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CAC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CAC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CAC4);
		  /* 8211CAC4h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 8211CAC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8211CAC4h case    0:*/		return 0x8211CAC8;
		  /* 8211CAC8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211CAC8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CAC8h case    1:*/		return 0x8211CACC;
		  /* 8211CACCh */ case    2:  		/* bc 12, CR6_EQ, 916 */
		/* 8211CACCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8211CE60;  }
		/* 8211CACCh case    2:*/		return 0x8211CAD0;
		  /* 8211CAD0h */ case    3:  		/* lwz R11, <#[R28 + 8]> */
		/* 8211CAD0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8211CAD0h case    3:*/		return 0x8211CAD4;
		  /* 8211CAD4h */ case    4:  		/* cmpwi CR6, R11, -1 */
		/* 8211CAD4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211CAD4h case    4:*/		return 0x8211CAD8;
		  /* 8211CAD8h */ case    5:  		/* bc 4, CR6_EQ, 260 */
		/* 8211CAD8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211CBDC;  }
		/* 8211CAD8h case    5:*/		return 0x8211CADC;
		  /* 8211CADCh */ case    6:  		/* lwz R11, <#[R28 + 24]> */
		/* 8211CADCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8211CADCh case    6:*/		return 0x8211CAE0;
		  /* 8211CAE0h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8211CAE0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CAE0h case    7:*/		return 0x8211CAE4;
		  /* 8211CAE4h */ case    8:  		/* bc 12, CR6_EQ, 236 */
		/* 8211CAE4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211CBD0;  }
		/* 8211CAE4h case    8:*/		return 0x8211CAE8;
		  /* 8211CAE8h */ case    9:  		/* lwz R11, <#[R28 + 28]> */
		/* 8211CAE8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8211CAE8h case    9:*/		return 0x8211CAEC;
		  /* 8211CAECh */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8211CAECh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CAECh case   10:*/		return 0x8211CAF0;
		  /* 8211CAF0h */ case   11:  		/* bc 12, CR6_EQ, 224 */
		/* 8211CAF0h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211CBD0;  }
		/* 8211CAF0h case   11:*/		return 0x8211CAF4;
		  /* 8211CAF4h */ case   12:  		/* li R3, 40 */
		/* 8211CAF4h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211CAF4h case   12:*/		return 0x8211CAF8;
		  /* 8211CAF8h */ case   13:  		/* bl -342224 */
		/* 8211CAF8h case   13:*/		regs.LR = 0x8211CAFC; return 0x820C9228;
		/* 8211CAF8h case   13:*/		return 0x8211CAFC;
		  /* 8211CAFCh */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 8211CAFCh case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CAFCh case   14:*/		return 0x8211CB00;
		  /* 8211CB00h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 8211CB00h case   15:*/		if ( regs.CR[0].eq ) { return 0x8211CB10;  }
		/* 8211CB00h case   15:*/		return 0x8211CB04;
		  /* 8211CB04h */ case   16:  		/* bl -335556 */
		/* 8211CB04h case   16:*/		regs.LR = 0x8211CB08; return 0x820CAC40;
		/* 8211CB04h case   16:*/		return 0x8211CB08;
		  /* 8211CB08h */ case   17:  		/* mr R30, R3 */
		/* 8211CB08h case   17:*/		regs.R30 = regs.R3;
		/* 8211CB08h case   17:*/		return 0x8211CB0C;
		  /* 8211CB0Ch */ case   18:  		/* b 8 */
		/* 8211CB0Ch case   18:*/		return 0x8211CB14;
		/* 8211CB0Ch case   18:*/		return 0x8211CB10;
	}
	return 0x8211CB10;
} // Block from 8211CAC4h-8211CB10h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211CB10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CB10);
		  /* 8211CB10h */ case    0:  		/* mr R30, R15 */
		/* 8211CB10h case    0:*/		regs.R30 = regs.R15;
		/* 8211CB10h case    0:*/		return 0x8211CB14;
	}
	return 0x8211CB14;
} // Block from 8211CB10h-8211CB14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CB14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CB14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CB14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CB14);
		  /* 8211CB14h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211CB14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211CB14h case    0:*/		return 0x8211CB18;
		  /* 8211CB18h */ case    1:  		/* bc 12, CR6_EQ, 236 */
		/* 8211CB18h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CB18h case    1:*/		return 0x8211CB1C;
		  /* 8211CB1Ch */ case    2:  		/* lwz R11, <#[R28 + 24]> */
		/* 8211CB1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8211CB1Ch case    2:*/		return 0x8211CB20;
		  /* 8211CB20h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 8211CB20h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211CB20h case    3:*/		return 0x8211CB24;
		  /* 8211CB24h */ case    4:  		/* bc 4, CR6_LT, 40 */
		/* 8211CB24h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8211CB4C;  }
		/* 8211CB24h case    4:*/		return 0x8211CB28;
		  /* 8211CB28h */ case    5:  		/* nor R11, R11, R11 */
		/* 8211CB28h case    5:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8211CB28h case    5:*/		return 0x8211CB2C;
		  /* 8211CB2Ch */ case    6:  		/* addi R10, R1, 112 */
		/* 8211CB2Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211CB2Ch case    6:*/		return 0x8211CB30;
		  /* 8211CB30h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211CB30h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211CB30h case    7:*/		return 0x8211CB34;
		  /* 8211CB34h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8211CB34h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211CB34h case    8:*/		return 0x8211CB38;
		  /* 8211CB38h */ case    9:  		/* cmpwi CR6, R11, -1 */
		/* 8211CB38h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211CB38h case    9:*/		return 0x8211CB3C;
		  /* 8211CB3Ch */ case   10:  		/* stw R11, <#[R30 + 28]> */
		/* 8211CB3Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CB3Ch case   10:*/		return 0x8211CB40;
		  /* 8211CB40h */ case   11:  		/* bc 4, CR6_EQ, 24 */
		/* 8211CB40h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211CB58;  }
		/* 8211CB40h case   11:*/		return 0x8211CB44;
		  /* 8211CB44h */ case   12:  		/* stw R19, <#[R30 + 28]> */
		/* 8211CB44h case   12:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CB44h case   12:*/		return 0x8211CB48;
		  /* 8211CB48h */ case   13:  		/* b 16 */
		/* 8211CB48h case   13:*/		return 0x8211CB58;
		/* 8211CB48h case   13:*/		return 0x8211CB4C;
	}
	return 0x8211CB4C;
} // Block from 8211CB14h-8211CB4Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211CB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CB4C);
		  /* 8211CB4Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8211CB4Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CB4Ch case    0:*/		return 0x8211CB50;
		  /* 8211CB50h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8211CB50h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CB58;  }
		/* 8211CB50h case    1:*/		return 0x8211CB54;
		  /* 8211CB54h */ case    2:  		/* stw R11, <#[R30 + 28]> */
		/* 8211CB54h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CB54h case    2:*/		return 0x8211CB58;
	}
	return 0x8211CB58;
} // Block from 8211CB4Ch-8211CB58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211CB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CB58);
		  /* 8211CB58h */ case    0:  		/* lwz R11, <#[R28 + 28]> */
		/* 8211CB58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8211CB58h case    0:*/		return 0x8211CB5C;
		  /* 8211CB5Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8211CB5Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211CB5Ch case    1:*/		return 0x8211CB60;
		  /* 8211CB60h */ case    2:  		/* bc 4, CR6_LT, 40 */
		/* 8211CB60h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8211CB88;  }
		/* 8211CB60h case    2:*/		return 0x8211CB64;
		  /* 8211CB64h */ case    3:  		/* nor R11, R11, R11 */
		/* 8211CB64h case    3:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8211CB64h case    3:*/		return 0x8211CB68;
		  /* 8211CB68h */ case    4:  		/* addi R10, R1, 112 */
		/* 8211CB68h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211CB68h case    4:*/		return 0x8211CB6C;
		  /* 8211CB6Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211CB6Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211CB6Ch case    5:*/		return 0x8211CB70;
		  /* 8211CB70h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8211CB70h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211CB70h case    6:*/		return 0x8211CB74;
		  /* 8211CB74h */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 8211CB74h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211CB74h case    7:*/		return 0x8211CB78;
		  /* 8211CB78h */ case    8:  		/* stw R11, <#[R30 + 32]> */
		/* 8211CB78h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CB78h case    8:*/		return 0x8211CB7C;
		  /* 8211CB7Ch */ case    9:  		/* bc 4, CR6_EQ, 24 */
		/* 8211CB7Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211CB94;  }
		/* 8211CB7Ch case    9:*/		return 0x8211CB80;
	}
	return 0x8211CB80;
} // Block from 8211CB58h-8211CB80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211CB80h
// Function '?ComputeExprSize@CParse@D3DXShader@@IAAXPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CB80);
		  /* 8211CB80h */ case    0:  		/* stw R19, <#[R30 + 32]> */
		/* 8211CB80h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CB80h case    0:*/		return 0x8211CB84;
		  /* 8211CB84h */ case    1:  		/* b 16 */
		/* 8211CB84h case    1:*/		return 0x8211CB94;
		/* 8211CB84h case    1:*/		return 0x8211CB88;
	}
	return 0x8211CB88;
} // Block from 8211CB80h-8211CB88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211CB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CB88);
		  /* 8211CB88h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8211CB88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CB88h case    0:*/		return 0x8211CB8C;
		  /* 8211CB8Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8211CB8Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CB94;  }
		/* 8211CB8Ch case    1:*/		return 0x8211CB90;
		  /* 8211CB90h */ case    2:  		/* stw R11, <#[R30 + 32]> */
		/* 8211CB90h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CB90h case    2:*/		return 0x8211CB94;
	}
	return 0x8211CB94;
} // Block from 8211CB88h-8211CB94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211CB94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CB94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CB94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CB94);
		  /* 8211CB94h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211CB94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CB94h case    0:*/		return 0x8211CB98;
		  /* 8211CB98h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8211CB98h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211CB98h case    1:*/		return 0x8211CB9C;
		  /* 8211CB9Ch */ case    2:  		/* bc 4, CR6_EQ, 44 */
		/* 8211CB9Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211CBC8;  }
		/* 8211CB9Ch case    2:*/		return 0x8211CBA0;
		  /* 8211CBA0h */ case    3:  		/* lwz R11, <#[R30 + 28]> */
		/* 8211CBA0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CBA0h case    3:*/		return 0x8211CBA4;
		  /* 8211CBA4h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 8211CBA4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211CBA4h case    4:*/		return 0x8211CBA8;
		  /* 8211CBA8h */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 8211CBA8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211CBC8;  }
		/* 8211CBA8h case    5:*/		return 0x8211CBAC;
		  /* 8211CBACh */ case    6:  		/* mr R6, R30 */
		/* 8211CBACh case    6:*/		regs.R6 = regs.R30;
		/* 8211CBACh case    6:*/		return 0x8211CBB0;
		  /* 8211CBB0h */ case    7:  		/* li R5, 0 */
		/* 8211CBB0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211CBB0h case    7:*/		return 0x8211CBB4;
		  /* 8211CBB4h */ case    8:  		/* mr R4, R14 */
		/* 8211CBB4h case    8:*/		regs.R4 = regs.R14;
		/* 8211CBB4h case    8:*/		return 0x8211CBB8;
		  /* 8211CBB8h */ case    9:  		/* mr R3, R17 */
		/* 8211CBB8h case    9:*/		regs.R3 = regs.R17;
		/* 8211CBB8h case    9:*/		return 0x8211CBBC;
		  /* 8211CBBCh */ case   10:  		/* bl -8932 */
		/* 8211CBBCh case   10:*/		regs.LR = 0x8211CBC0; return 0x8211A8D8;
		/* 8211CBBCh case   10:*/		return 0x8211CBC0;
		  /* 8211CBC0h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 8211CBC0h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211CBC0h case   11:*/		return 0x8211CBC4;
		  /* 8211CBC4h */ case   12:  		/* bc 4, CR0_LT, 352 */
		/* 8211CBC4h case   12:*/		if ( !regs.CR[0].lt ) { return 0x8211CD24;  }
		/* 8211CBC4h case   12:*/		return 0x8211CBC8;
	}
	return 0x8211CBC8;
} // Block from 8211CB94h-8211CBC8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211CBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CBC8);
		  /* 8211CBC8h */ case    0:  		/* mr R3, R19 */
		/* 8211CBC8h case    0:*/		regs.R3 = regs.R19;
		/* 8211CBC8h case    0:*/		return 0x8211CBCC;
		  /* 8211CBCCh */ case    1:  		/* b 812 */
		/* 8211CBCCh case    1:*/		return 0x8211CEF8;
		/* 8211CBCCh case    1:*/		return 0x8211CBD0;
	}
	return 0x8211CBD0;
} // Block from 8211CBC8h-8211CBD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211CBD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CBD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CBD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CBD0);
		  /* 8211CBD0h */ case    0:  		/* lwz R11, <#[R14]> */
		/* 8211CBD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 8211CBD0h case    0:*/		return 0x8211CBD4;
		  /* 8211CBD4h */ case    1:  		/* mr R3, R14 */
		/* 8211CBD4h case    1:*/		regs.R3 = regs.R14;
		/* 8211CBD4h case    1:*/		return 0x8211CBD8;
		  /* 8211CBD8h */ case    2:  		/* b 24 */
		/* 8211CBD8h case    2:*/		return 0x8211CBF0;
		/* 8211CBD8h case    2:*/		return 0x8211CBDC;
	}
	return 0x8211CBDC;
} // Block from 8211CBD0h-8211CBDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211CBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CBDC);
		  /* 8211CBDCh */ case    0:  		/* cmpwi CR6, R11, -2 */
		/* 8211CBDCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFE);
		/* 8211CBDCh case    0:*/		return 0x8211CBE0;
		  /* 8211CBE0h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 8211CBE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211CC10;  }
		/* 8211CBE0h case    1:*/		return 0x8211CBE4;
		  /* 8211CBE4h */ case    2:  		/* lwz R11, <#[R10 + 8]> */
		/* 8211CBE4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8211CBE4h case    2:*/		return 0x8211CBE8;
		  /* 8211CBE8h */ case    3:  		/* lwz R3, <#[R11 + 16]> */
		/* 8211CBE8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 8211CBE8h case    3:*/		return 0x8211CBEC;
		  /* 8211CBECh */ case    4:  		/* lwz R11, <#[R3]> */
		/* 8211CBECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8211CBECh case    4:*/		return 0x8211CBF0;
	}
	return 0x8211CBF0;
} // Block from 8211CBDCh-8211CBF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211CBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CBF0);
		  /* 8211CBF0h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211CBF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211CBF0h case    0:*/		return 0x8211CBF4;
		  /* 8211CBF4h */ case    1:  		/* mtspr CTR, R11 */
		/* 8211CBF4h case    1:*/		regs.CTR = regs.R11;
		/* 8211CBF4h case    1:*/		return 0x8211CBF8;
		  /* 8211CBF8h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 8211CBF8h case    2:*/		if ( 1 ) { regs.LR = 0x8211CBFC; return (uint32)regs.CTR; }
		/* 8211CBF8h case    2:*/		return 0x8211CBFC;
		  /* 8211CBFCh */ case    3:  		/* or. R30, R3, R3 */
		/* 8211CBFCh case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8211CBFCh case    3:*/		return 0x8211CC00;
		  /* 8211CC00h */ case    4:  		/* bc 4, CR0_EQ, 292 */
		/* 8211CC00h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8211CD24;  }
		/* 8211CC00h case    4:*/		return 0x8211CC04;
	}
	return 0x8211CC04;
} // Block from 8211CBF0h-8211CC04h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211CC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CC04);
		  /* 8211CC04h */ case    0:  		/* lis R3, -32761 */
		/* 8211CC04h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8211CC04h case    0:*/		return 0x8211CC08;
	}
	return 0x8211CC08;
} // Block from 8211CC04h-8211CC08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CC08h
// Function '?CombineUintId@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CC08);
		  /* 8211CC08h */ case    0:  		/* ori R3, R3, 14 */
		/* 8211CC08h case    0:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8211CC08h case    0:*/		return 0x8211CC0C;
		  /* 8211CC0Ch */ case    1:  		/* b 748 */
		/* 8211CC0Ch case    1:*/		return 0x8211CEF8;
		/* 8211CC0Ch case    1:*/		return 0x8211CC10;
	}
	return 0x8211CC10;
} // Block from 8211CC08h-8211CC10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211CC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CC10);
		  /* 8211CC10h */ case    0:  		/* li R3, 40 */
		/* 8211CC10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211CC10h case    0:*/		return 0x8211CC14;
		  /* 8211CC14h */ case    1:  		/* bl -342508 */
		/* 8211CC14h case    1:*/		regs.LR = 0x8211CC18; return 0x820C9228;
		/* 8211CC14h case    1:*/		return 0x8211CC18;
		  /* 8211CC18h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211CC18h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CC18h case    2:*/		return 0x8211CC1C;
		  /* 8211CC1Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 8211CC1Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8211CC2C;  }
		/* 8211CC1Ch case    3:*/		return 0x8211CC20;
		  /* 8211CC20h */ case    4:  		/* bl -335840 */
		/* 8211CC20h case    4:*/		regs.LR = 0x8211CC24; return 0x820CAC40;
		/* 8211CC20h case    4:*/		return 0x8211CC24;
		  /* 8211CC24h */ case    5:  		/* mr R30, R3 */
		/* 8211CC24h case    5:*/		regs.R30 = regs.R3;
		/* 8211CC24h case    5:*/		return 0x8211CC28;
		  /* 8211CC28h */ case    6:  		/* b 8 */
		/* 8211CC28h case    6:*/		return 0x8211CC30;
		/* 8211CC28h case    6:*/		return 0x8211CC2C;
	}
	return 0x8211CC2C;
} // Block from 8211CC10h-8211CC2Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211CC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CC2C);
		  /* 8211CC2Ch */ case    0:  		/* mr R30, R15 */
		/* 8211CC2Ch case    0:*/		regs.R30 = regs.R15;
		/* 8211CC2Ch case    0:*/		return 0x8211CC30;
	}
	return 0x8211CC30;
} // Block from 8211CC2Ch-8211CC30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CC30);
		  /* 8211CC30h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211CC30h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211CC30h case    0:*/		return 0x8211CC34;
		  /* 8211CC34h */ case    1:  		/* bc 12, CR6_EQ, -48 */
		/* 8211CC34h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CC34h case    1:*/		return 0x8211CC38;
		  /* 8211CC38h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 8211CC38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8211CC38h case    2:*/		return 0x8211CC3C;
		  /* 8211CC3Ch */ case    3:  		/* addi R10, R1, 144 */
		/* 8211CC3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8211CC3Ch case    3:*/		return 0x8211CC40;
		  /* 8211CC40h */ case    4:  		/* addi R9, R1, 80 */
		/* 8211CC40h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8211CC40h case    4:*/		return 0x8211CC44;
		  /* 8211CC44h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211CC44h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211CC44h case    5:*/		return 0x8211CC48;
		  /* 8211CC48h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8211CC48h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211CC48h case    6:*/		return 0x8211CC4C;
		  /* 8211CC4Ch */ case    7:  		/* stw R11, <#[R30 + 16]> */
		/* 8211CC4Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8211CC4Ch case    7:*/		return 0x8211CC50;
		  /* 8211CC50h */ case    8:  		/* lwz R11, <#[R28 + 16]> */
		/* 8211CC50h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 8211CC50h case    8:*/		return 0x8211CC54;
		  /* 8211CC54h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211CC54h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211CC54h case    9:*/		return 0x8211CC58;
		  /* 8211CC58h */ case   10:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8211CC58h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8211CC58h case   10:*/		return 0x8211CC5C;
		  /* 8211CC5Ch */ case   11:  		/* stw R11, <#[R30 + 20]> */
		/* 8211CC5Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8211CC5Ch case   11:*/		return 0x8211CC60;
		  /* 8211CC60h */ case   12:  		/* lwz R11, <#[R28 + 24]> */
		/* 8211CC60h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8211CC60h case   12:*/		return 0x8211CC64;
		  /* 8211CC64h */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 8211CC64h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211CC64h case   13:*/		return 0x8211CC68;
		  /* 8211CC68h */ case   14:  		/* bc 4, CR6_LT, 40 */
		/* 8211CC68h case   14:*/		if ( !regs.CR[6].lt ) { return 0x8211CC90;  }
		/* 8211CC68h case   14:*/		return 0x8211CC6C;
		  /* 8211CC6Ch */ case   15:  		/* nor R11, R11, R11 */
		/* 8211CC6Ch case   15:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8211CC6Ch case   15:*/		return 0x8211CC70;
		  /* 8211CC70h */ case   16:  		/* addi R10, R1, 112 */
		/* 8211CC70h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211CC70h case   16:*/		return 0x8211CC74;
		  /* 8211CC74h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211CC74h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211CC74h case   17:*/		return 0x8211CC78;
		  /* 8211CC78h */ case   18:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8211CC78h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211CC78h case   18:*/		return 0x8211CC7C;
		  /* 8211CC7Ch */ case   19:  		/* cmpwi CR6, R11, -1 */
		/* 8211CC7Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211CC7Ch case   19:*/		return 0x8211CC80;
		  /* 8211CC80h */ case   20:  		/* stw R11, <#[R30 + 28]> */
		/* 8211CC80h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CC80h case   20:*/		return 0x8211CC84;
		  /* 8211CC84h */ case   21:  		/* bc 4, CR6_EQ, 16 */
		/* 8211CC84h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8211CC94;  }
		/* 8211CC84h case   21:*/		return 0x8211CC88;
		  /* 8211CC88h */ case   22:  		/* stw R19, <#[R30 + 28]> */
		/* 8211CC88h case   22:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CC88h case   22:*/		return 0x8211CC8C;
		  /* 8211CC8Ch */ case   23:  		/* b 8 */
		/* 8211CC8Ch case   23:*/		return 0x8211CC94;
		/* 8211CC8Ch case   23:*/		return 0x8211CC90;
	}
	return 0x8211CC90;
} // Block from 8211CC30h-8211CC90h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8211CC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CC90);
		  /* 8211CC90h */ case    0:  		/* stw R11, <#[R30 + 28]> */
		/* 8211CC90h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CC90h case    0:*/		return 0x8211CC94;
	}
	return 0x8211CC94;
} // Block from 8211CC90h-8211CC94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CC94);
		  /* 8211CC94h */ case    0:  		/* lwz R11, <#[R28 + 28]> */
		/* 8211CC94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8211CC94h case    0:*/		return 0x8211CC98;
		  /* 8211CC98h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8211CC98h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211CC98h case    1:*/		return 0x8211CC9C;
		  /* 8211CC9Ch */ case    2:  		/* bc 4, CR6_LT, 40 */
		/* 8211CC9Ch case    2:*/		if ( !regs.CR[6].lt ) { return 0x8211CCC4;  }
		/* 8211CC9Ch case    2:*/		return 0x8211CCA0;
		  /* 8211CCA0h */ case    3:  		/* nor R11, R11, R11 */
		/* 8211CCA0h case    3:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8211CCA0h case    3:*/		return 0x8211CCA4;
		  /* 8211CCA4h */ case    4:  		/* addi R10, R1, 112 */
		/* 8211CCA4h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211CCA4h case    4:*/		return 0x8211CCA8;
		  /* 8211CCA8h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211CCA8h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211CCA8h case    5:*/		return 0x8211CCAC;
		  /* 8211CCACh */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8211CCACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211CCACh case    6:*/		return 0x8211CCB0;
		  /* 8211CCB0h */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 8211CCB0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8211CCB0h case    7:*/		return 0x8211CCB4;
		  /* 8211CCB4h */ case    8:  		/* stw R11, <#[R30 + 32]> */
		/* 8211CCB4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CCB4h case    8:*/		return 0x8211CCB8;
		  /* 8211CCB8h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 8211CCB8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211CCC8;  }
		/* 8211CCB8h case    9:*/		return 0x8211CCBC;
		  /* 8211CCBCh */ case   10:  		/* stw R19, <#[R30 + 32]> */
		/* 8211CCBCh case   10:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CCBCh case   10:*/		return 0x8211CCC0;
		  /* 8211CCC0h */ case   11:  		/* b 8 */
		/* 8211CCC0h case   11:*/		return 0x8211CCC8;
		/* 8211CCC0h case   11:*/		return 0x8211CCC4;
	}
	return 0x8211CCC4;
} // Block from 8211CC94h-8211CCC4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211CCC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CCC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CCC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CCC4);
		  /* 8211CCC4h */ case    0:  		/* stw R11, <#[R30 + 32]> */
		/* 8211CCC4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CCC4h case    0:*/		return 0x8211CCC8;
	}
	return 0x8211CCC8;
} // Block from 8211CCC4h-8211CCC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CCC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CCC8);
		  /* 8211CCC8h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 8211CCC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8211CCC8h case    0:*/		return 0x8211CCCC;
		  /* 8211CCCCh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8211CCCCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211CCCCh case    1:*/		return 0x8211CCD0;
		  /* 8211CCD0h */ case    2:  		/* rlwinm R11, R11, 0, 20, 21 */
		/* 8211CCD0h case    2:*/		cpu::op::rlwinm<0,0,20,21>(regs,&regs.R11,regs.R11);
		/* 8211CCD0h case    2:*/		return 0x8211CCD4;
		  /* 8211CCD4h */ case    3:  		/* stw R11, <#[R30 + 36]> */
		/* 8211CCD4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8211CCD4h case    3:*/		return 0x8211CCD8;
		  /* 8211CCD8h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8211CCD8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211CCE8;  }
		/* 8211CCD8h case    4:*/		return 0x8211CCDC;
		  /* 8211CCDCh */ case    5:  		/* lwz R11, <#[R28 + 4]> */
		/* 8211CCDCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8211CCDCh case    5:*/		return 0x8211CCE0;
		  /* 8211CCE0h */ case    6:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8211CCE0h case    6:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8211CCE0h case    6:*/		return 0x8211CCE4;
		  /* 8211CCE4h */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 8211CCE4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8211CCF4;  }
		/* 8211CCE4h case    7:*/		return 0x8211CCE8;
	}
	return 0x8211CCE8;
} // Block from 8211CCC8h-8211CCE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211CCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CCE8);
		  /* 8211CCE8h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 8211CCE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8211CCE8h case    0:*/		return 0x8211CCEC;
		  /* 8211CCECh */ case    1:  		/* ori R11, R11, 512 */
		/* 8211CCECh case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8211CCECh case    1:*/		return 0x8211CCF0;
		  /* 8211CCF0h */ case    2:  		/* stw R11, <#[R30 + 36]> */
		/* 8211CCF0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8211CCF0h case    2:*/		return 0x8211CCF4;
	}
	return 0x8211CCF4;
} // Block from 8211CCE8h-8211CCF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211CCF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CCF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CCF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CCF4);
		  /* 8211CCF4h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 8211CCF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8211CCF4h case    0:*/		return 0x8211CCF8;
		  /* 8211CCF8h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 8211CCF8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211CCF8h case    1:*/		return 0x8211CCFC;
		  /* 8211CCFCh */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8211CCFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8211CD08;  }
		/* 8211CCFCh case    2:*/		return 0x8211CD00;
		  /* 8211CD00h */ case    3:  		/* cmpwi CR6, R11, 2 */
		/* 8211CD00h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211CD00h case    3:*/		return 0x8211CD04;
		  /* 8211CD04h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8211CD04h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211CD24;  }
		/* 8211CD04h case    4:*/		return 0x8211CD08;
	}
	return 0x8211CD08;
} // Block from 8211CCF4h-8211CD08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211CD08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CD08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CD08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CD08);
		  /* 8211CD08h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211CD08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211CD08h case    0:*/		return 0x8211CD0C;
		  /* 8211CD0Ch */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8211CD0Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211CD0Ch case    1:*/		return 0x8211CD10;
		  /* 8211CD10h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 8211CD10h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211CD24;  }
		/* 8211CD10h case    2:*/		return 0x8211CD14;
		  /* 8211CD14h */ case    3:  		/* lwz R11, <#[R30 + 28]> */
		/* 8211CD14h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211CD14h case    3:*/		return 0x8211CD18;
		  /* 8211CD18h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 8211CD18h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211CD18h case    4:*/		return 0x8211CD1C;
		  /* 8211CD1Ch */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 8211CD1Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211CD24;  }
		/* 8211CD1Ch case    5:*/		return 0x8211CD20;
		  /* 8211CD20h */ case    6:  		/* stw R15, <#[R30 + 16]> */
		/* 8211CD20h case    6:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R30 + 0x00000010) );
		/* 8211CD20h case    6:*/		return 0x8211CD24;
	}
	return 0x8211CD24;
} // Block from 8211CD08h-8211CD24h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211CD24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CD24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CD24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CD24);
		  /* 8211CD24h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211CD24h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211CD24h case    0:*/		return 0x8211CD28;
		  /* 8211CD28h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 8211CD28h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211CD4C;  }
		/* 8211CD28h case    1:*/		return 0x8211CD2C;
		  /* 8211CD2Ch */ case    2:  		/* add R11, R25, R18 */
		/* 8211CD2Ch case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R18);
		/* 8211CD2Ch case    2:*/		return 0x8211CD30;
		  /* 8211CD30h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 8211CD30h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8211CD30h case    3:*/		return 0x8211CD34;
		  /* 8211CD34h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8211CD34h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CD34h case    4:*/		return 0x8211CD38;
		  /* 8211CD38h */ case    5:  		/* bc 12, CR6_EQ, 296 */
		/* 8211CD38h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211CE60;  }
		/* 8211CD38h case    5:*/		return 0x8211CD3C;
		  /* 8211CD3Ch */ case    6:  		/* stw R30, <#[R23 + 40]> */
		/* 8211CD3Ch case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R23 + 0x00000028) );
		/* 8211CD3Ch case    6:*/		return 0x8211CD40;
		  /* 8211CD40h */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 8211CD40h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211CD40h case    7:*/		return 0x8211CD44;
		  /* 8211CD44h */ case    8:  		/* bc 12, CR6_EQ, -320 */
		/* 8211CD44h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CD44h case    8:*/		return 0x8211CD48;
		  /* 8211CD48h */ case    9:  		/* b 280 */
		/* 8211CD48h case    9:*/		return 0x8211CE60;
		/* 8211CD48h case    9:*/		return 0x8211CD4C;
	}
	return 0x8211CD4C;
} // Block from 8211CD24h-8211CD4Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211CD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CD4C);
		  /* 8211CD4Ch */ case    0:  		/* li R3, 20 */
		/* 8211CD4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211CD4Ch case    0:*/		return 0x8211CD50;
	}
	return 0x8211CD50;
} // Block from 8211CD4Ch-8211CD50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CD50h
// Function '?CombineStrings@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CD50);
		  /* 8211CD50h */ case    0:  		/* bl -342824 */
		/* 8211CD50h case    0:*/		regs.LR = 0x8211CD54; return 0x820C9228;
		/* 8211CD50h case    0:*/		return 0x8211CD54;
		  /* 8211CD54h */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 8211CD54h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CD54h case    1:*/		return 0x8211CD58;
		  /* 8211CD58h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 8211CD58h case    2:*/		if ( regs.CR[0].eq ) { return 0x8211CD70;  }
		/* 8211CD58h case    2:*/		return 0x8211CD5C;
		  /* 8211CD5Ch */ case    3:  		/* mr R6, R22 */
		/* 8211CD5Ch case    3:*/		regs.R6 = regs.R22;
		/* 8211CD5Ch case    3:*/		return 0x8211CD60;
		  /* 8211CD60h */ case    4:  		/* li R5, 0 */
		/* 8211CD60h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211CD60h case    4:*/		return 0x8211CD64;
		  /* 8211CD64h */ case    5:  		/* li R4, 0 */
		/* 8211CD64h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211CD64h case    5:*/		return 0x8211CD68;
		  /* 8211CD68h */ case    6:  		/* bl -342392 */
		/* 8211CD68h case    6:*/		regs.LR = 0x8211CD6C; return 0x820C93F0;
		/* 8211CD68h case    6:*/		return 0x8211CD6C;
		  /* 8211CD6Ch */ case    7:  		/* b 8 */
		/* 8211CD6Ch case    7:*/		return 0x8211CD74;
		/* 8211CD6Ch case    7:*/		return 0x8211CD70;
	}
	return 0x8211CD70;
} // Block from 8211CD50h-8211CD70h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211CD70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CD70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CD70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CD70);
		  /* 8211CD70h */ case    0:  		/* mr R3, R15 */
		/* 8211CD70h case    0:*/		regs.R3 = regs.R15;
		/* 8211CD70h case    0:*/		return 0x8211CD74;
	}
	return 0x8211CD74;
} // Block from 8211CD70h-8211CD74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CD74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CD74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CD74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CD74);
		  /* 8211CD74h */ case    0:  		/* stw R3, <#[R24]> */
		/* 8211CD74h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R24 + 0x00000000) );
		/* 8211CD74h case    0:*/		return 0x8211CD78;
		  /* 8211CD78h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211CD78h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211CD78h case    1:*/		return 0x8211CD7C;
		  /* 8211CD7Ch */ case    2:  		/* bc 12, CR6_EQ, -376 */
		/* 8211CD7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CD7Ch case    2:*/		return 0x8211CD80;
		  /* 8211CD80h */ case    3:  		/* li R3, 52 */
		/* 8211CD80h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x34);
		/* 8211CD80h case    3:*/		return 0x8211CD84;
		  /* 8211CD84h */ case    4:  		/* bl -342876 */
		/* 8211CD84h case    4:*/		regs.LR = 0x8211CD88; return 0x820C9228;
		/* 8211CD84h case    4:*/		return 0x8211CD88;
		  /* 8211CD88h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211CD88h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CD88h case    5:*/		return 0x8211CD8C;
		  /* 8211CD8Ch */ case    6:  		/* bc 12, CR0_EQ, 36 */
		/* 8211CD8Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8211CDB0;  }
		/* 8211CD8Ch case    6:*/		return 0x8211CD90;
		  /* 8211CD90h */ case    7:  		/* li R8, 0 */
		/* 8211CD90h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8211CD90h case    7:*/		return 0x8211CD94;
		  /* 8211CD94h */ case    8:  		/* li R7, 0 */
		/* 8211CD94h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211CD94h case    8:*/		return 0x8211CD98;
		  /* 8211CD98h */ case    9:  		/* li R6, 0 */
		/* 8211CD98h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211CD98h case    9:*/		return 0x8211CD9C;
		  /* 8211CD9Ch */ case   10:  		/* li R5, 0 */
		/* 8211CD9Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211CD9Ch case   10:*/		return 0x8211CDA0;
		  /* 8211CDA0h */ case   11:  		/* li R4, 1 */
		/* 8211CDA0h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8211CDA0h case   11:*/		return 0x8211CDA4;
		  /* 8211CDA4h */ case   12:  		/* bl -339692 */
		/* 8211CDA4h case   12:*/		regs.LR = 0x8211CDA8; return 0x820C9EB8;
		/* 8211CDA4h case   12:*/		return 0x8211CDA8;
		  /* 8211CDA8h */ case   13:  		/* mr R29, R3 */
		/* 8211CDA8h case   13:*/		regs.R29 = regs.R3;
		/* 8211CDA8h case   13:*/		return 0x8211CDAC;
		  /* 8211CDACh */ case   14:  		/* b 8 */
		/* 8211CDACh case   14:*/		return 0x8211CDB4;
		/* 8211CDACh case   14:*/		return 0x8211CDB0;
	}
	return 0x8211CDB0;
} // Block from 8211CD74h-8211CDB0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211CDB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CDB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CDB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CDB0);
		  /* 8211CDB0h */ case    0:  		/* mr R29, R15 */
		/* 8211CDB0h case    0:*/		regs.R29 = regs.R15;
		/* 8211CDB0h case    0:*/		return 0x8211CDB4;
	}
	return 0x8211CDB4;
} // Block from 8211CDB0h-8211CDB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CDB4);
		  /* 8211CDB4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211CDB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211CDB4h case    0:*/		return 0x8211CDB8;
		  /* 8211CDB8h */ case    1:  		/* bc 12, CR6_EQ, -436 */
		/* 8211CDB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CDB8h case    1:*/		return 0x8211CDBC;
		  /* 8211CDBCh */ case    2:  		/* lwz R11, <#[R24]> */
		/* 8211CDBCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8211CDBCh case    2:*/		return 0x8211CDC0;
		  /* 8211CDC0h */ case    3:  		/* li R3, 56 */
		/* 8211CDC0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x38);
		/* 8211CDC0h case    3:*/		return 0x8211CDC4;
		  /* 8211CDC4h */ case    4:  		/* stw R29, <#[R11 + 8]> */
		/* 8211CDC4h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8211CDC4h case    4:*/		return 0x8211CDC8;
		  /* 8211CDC8h */ case    5:  		/* bl -342944 */
		/* 8211CDC8h case    5:*/		regs.LR = 0x8211CDCC; return 0x820C9228;
		/* 8211CDC8h case    5:*/		return 0x8211CDCC;
		  /* 8211CDCCh */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8211CDCCh case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CDCCh case    6:*/		return 0x8211CDD0;
		  /* 8211CDD0h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8211CDD0h case    7:*/		if ( regs.CR[0].eq ) { return 0x8211CDE4;  }
		/* 8211CDD0h case    7:*/		return 0x8211CDD4;
		  /* 8211CDD4h */ case    8:  		/* lwz R4, <#[R1 + 516]> */
		/* 8211CDD4h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000204) );
		/* 8211CDD4h case    8:*/		return 0x8211CDD8;
		  /* 8211CDD8h */ case    9:  		/* bl -341384 */
		/* 8211CDD8h case    9:*/		regs.LR = 0x8211CDDC; return 0x820C9850;
		/* 8211CDD8h case    9:*/		return 0x8211CDDC;
		  /* 8211CDDCh */ case   10:  		/* mr R11, R3 */
		/* 8211CDDCh case   10:*/		regs.R11 = regs.R3;
		/* 8211CDDCh case   10:*/		return 0x8211CDE0;
		  /* 8211CDE0h */ case   11:  		/* b 8 */
		/* 8211CDE0h case   11:*/		return 0x8211CDE8;
		/* 8211CDE0h case   11:*/		return 0x8211CDE4;
	}
	return 0x8211CDE4;
} // Block from 8211CDB4h-8211CDE4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211CDE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CDE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CDE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CDE4);
		  /* 8211CDE4h */ case    0:  		/* mr R11, R15 */
		/* 8211CDE4h case    0:*/		regs.R11 = regs.R15;
		/* 8211CDE4h case    0:*/		return 0x8211CDE8;
	}
	return 0x8211CDE8;
} // Block from 8211CDE4h-8211CDE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CDE8);
		  /* 8211CDE8h */ case    0:  		/* stw R11, <#[R29 + 20]> */
		/* 8211CDE8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 8211CDE8h case    0:*/		return 0x8211CDEC;
		  /* 8211CDECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211CDECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211CDECh case    1:*/		return 0x8211CDF0;
		  /* 8211CDF0h */ case    2:  		/* bc 12, CR6_EQ, -492 */
		/* 8211CDF0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CDF0h case    2:*/		return 0x8211CDF4;
		  /* 8211CDF4h */ case    3:  		/* lwz R10, <#[R28]> */
		/* 8211CDF4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8211CDF4h case    3:*/		return 0x8211CDF8;
		  /* 8211CDF8h */ case    4:  		/* li R3, 88 */
		/* 8211CDF8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211CDF8h case    4:*/		return 0x8211CDFC;
		  /* 8211CDFCh */ case    5:  		/* stw R10, <#[R11 + 24]> */
		/* 8211CDFCh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8211CDFCh case    5:*/		return 0x8211CE00;
		  /* 8211CE00h */ case    6:  		/* bl -343000 */
		/* 8211CE00h case    6:*/		regs.LR = 0x8211CE04; return 0x820C9228;
		/* 8211CE00h case    6:*/		return 0x8211CE04;
		  /* 8211CE04h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8211CE04h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CE04h case    7:*/		return 0x8211CE08;
		  /* 8211CE08h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 8211CE08h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211CE18;  }
		/* 8211CE08h case    8:*/		return 0x8211CE0C;
		  /* 8211CE0Ch */ case    9:  		/* bl -334284 */
		/* 8211CE0Ch case    9:*/		regs.LR = 0x8211CE10; return 0x820CB440;
		/* 8211CE0Ch case    9:*/		return 0x8211CE10;
		  /* 8211CE10h */ case   10:  		/* mr R31, R3 */
		/* 8211CE10h case   10:*/		regs.R31 = regs.R3;
		/* 8211CE10h case   10:*/		return 0x8211CE14;
		  /* 8211CE14h */ case   11:  		/* b 8 */
		/* 8211CE14h case   11:*/		return 0x8211CE1C;
		/* 8211CE14h case   11:*/		return 0x8211CE18;
	}
	return 0x8211CE18;
} // Block from 8211CDE8h-8211CE18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211CE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CE18);
		  /* 8211CE18h */ case    0:  		/* mr R31, R15 */
		/* 8211CE18h case    0:*/		regs.R31 = regs.R15;
		/* 8211CE18h case    0:*/		return 0x8211CE1C;
	}
	return 0x8211CE1C;
} // Block from 8211CE18h-8211CE1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CE1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CE1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CE1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CE1C);
		  /* 8211CE1Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211CE1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211CE1Ch case    0:*/		return 0x8211CE20;
		  /* 8211CE20h */ case    1:  		/* bc 12, CR6_EQ, -540 */
		/* 8211CE20h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CE20h case    1:*/		return 0x8211CE24;
		  /* 8211CE24h */ case    2:  		/* stw R31, <#[R29 + 24]> */
		/* 8211CE24h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000018) );
		/* 8211CE24h case    2:*/		return 0x8211CE28;
		  /* 8211CE28h */ case    3:  		/* mr R4, R30 */
		/* 8211CE28h case    3:*/		regs.R4 = regs.R30;
		/* 8211CE28h case    3:*/		return 0x8211CE2C;
		  /* 8211CE2Ch */ case    4:  		/* stw R21, <#[R31 + 16]> */
		/* 8211CE2Ch case    4:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000010) );
		/* 8211CE2Ch case    4:*/		return 0x8211CE30;
		  /* 8211CE30h */ case    5:  		/* mr R3, R17 */
		/* 8211CE30h case    5:*/		regs.R3 = regs.R17;
		/* 8211CE30h case    5:*/		return 0x8211CE34;
		  /* 8211CE34h */ case    6:  		/* bl -10852 */
		/* 8211CE34h case    6:*/		regs.LR = 0x8211CE38; return 0x8211A3D0;
		/* 8211CE34h case    6:*/		return 0x8211CE38;
		  /* 8211CE38h */ case    7:  		/* li R11, 2 */
		/* 8211CE38h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8211CE38h case    7:*/		return 0x8211CE3C;
		  /* 8211CE3Ch */ case    8:  		/* stw R3, <#[R31 + 20]> */
		/* 8211CE3Ch case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8211CE3Ch case    8:*/		return 0x8211CE40;
		  /* 8211CE40h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 8211CE40h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211CE40h case    9:*/		return 0x8211CE44;
		  /* 8211CE44h */ case   10:  		/* stw R11, <#[R31 + 40]> */
		/* 8211CE44h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8211CE44h case   10:*/		return 0x8211CE48;
		  /* 8211CE48h */ case   11:  		/* lwz R11, <#[R28 + 4]> */
		/* 8211CE48h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8211CE48h case   11:*/		return 0x8211CE4C;
		  /* 8211CE4Ch */ case   12:  		/* stw R11, <#[R31 + 44]> */
		/* 8211CE4Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8211CE4Ch case   12:*/		return 0x8211CE50;
		  /* 8211CE50h */ case   13:  		/* stw R30, <#[R31 + 48]> */
		/* 8211CE50h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000030) );
		/* 8211CE50h case   13:*/		return 0x8211CE54;
		  /* 8211CE54h */ case   14:  		/* bc 12, CR6_EQ, -592 */
		/* 8211CE54h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CE54h case   14:*/		return 0x8211CE58;
		  /* 8211CE58h */ case   15:  		/* lwz R11, <#[R24]> */
		/* 8211CE58h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8211CE58h case   15:*/		return 0x8211CE5C;
		  /* 8211CE5Ch */ case   16:  		/* addi R24, R11, 12 */
		/* 8211CE5Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xC);
		/* 8211CE5Ch case   16:*/		return 0x8211CE60;
	}
	return 0x8211CE60;
} // Block from 8211CE1Ch-8211CE60h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211CE60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CE60);
		  /* 8211CE60h */ case    0:  		/* lwz R30, <#[R1 + 540]> */
		/* 8211CE60h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000021C) );
		/* 8211CE60h case    0:*/		return 0x8211CE64;
		  /* 8211CE64h */ case    1:  		/* mr R31, R27 */
		/* 8211CE64h case    1:*/		regs.R31 = regs.R27;
		/* 8211CE64h case    1:*/		return 0x8211CE68;
		  /* 8211CE68h */ case    2:  		/* mr R10, R26 */
		/* 8211CE68h case    2:*/		regs.R10 = regs.R26;
		/* 8211CE68h case    2:*/		return 0x8211CE6C;
		  /* 8211CE6Ch */ case    3:  		/* cmplwi CR6, R27, 7 */
		/* 8211CE6Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000007);
		/* 8211CE6Ch case    3:*/		return 0x8211CE70;
		  /* 8211CE70h */ case    4:  		/* bc 12, CR6_LT, -1012 */
		/* 8211CE70h case    4:*/		if ( regs.CR[6].lt ) { return 0x8211CA7C;  }
		/* 8211CE70h case    4:*/		return 0x8211CE74;
	}
	return 0x8211CE74;
} // Block from 8211CE60h-8211CE74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211CE74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CE74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CE74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CE74);
		  /* 8211CE74h */ case    0:  		/* stw R23, <#[R16]> */
		/* 8211CE74h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R16 + 0x00000000) );
		/* 8211CE74h case    0:*/		return 0x8211CE78;
	}
	return 0x8211CE78;
} // Block from 8211CE74h-8211CE78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CE78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CE78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CE78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CE78);
		  /* 8211CE78h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211CE78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211CE78h case    0:*/		return 0x8211CE7C;
		  /* 8211CE7Ch */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 8211CE7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CEF4;  }
		/* 8211CE7Ch case    1:*/		return 0x8211CE80;
	}
	return 0x8211CE80;
} // Block from 8211CE78h-8211CE80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211CE80h
// Function '?Static_Error@CParse@D3DXShader@@SAXPAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CE80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CE80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CE80);
		  /* 8211CE80h */ case    0:  		/* li R3, 20 */
		/* 8211CE80h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211CE80h case    0:*/		return 0x8211CE84;
		  /* 8211CE84h */ case    1:  		/* bl -343132 */
		/* 8211CE84h case    1:*/		regs.LR = 0x8211CE88; return 0x820C9228;
		/* 8211CE84h case    1:*/		return 0x8211CE88;
		  /* 8211CE88h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211CE88h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CE88h case    2:*/		return 0x8211CE8C;
		  /* 8211CE8Ch */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 8211CE8Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8211CEAC;  }
		/* 8211CE8Ch case    3:*/		return 0x8211CE90;
		  /* 8211CE90h */ case    4:  		/* lis R11, -32253 */
		/* 8211CE90h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211CE90h case    4:*/		return 0x8211CE94;
		  /* 8211CE94h */ case    5:  		/* li R5, 0 */
		/* 8211CE94h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211CE94h case    5:*/		return 0x8211CE98;
		  /* 8211CE98h */ case    6:  		/* addi R6, R11, 8868 */
		/* 8211CE98h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x22A4);
		/* 8211CE98h case    6:*/		return 0x8211CE9C;
		  /* 8211CE9Ch */ case    7:  		/* li R4, 0 */
		/* 8211CE9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211CE9Ch case    7:*/		return 0x8211CEA0;
		  /* 8211CEA0h */ case    8:  		/* bl -342704 */
		/* 8211CEA0h case    8:*/		regs.LR = 0x8211CEA4; return 0x820C93F0;
		/* 8211CEA0h case    8:*/		return 0x8211CEA4;
		  /* 8211CEA4h */ case    9:  		/* mr R31, R3 */
		/* 8211CEA4h case    9:*/		regs.R31 = regs.R3;
		/* 8211CEA4h case    9:*/		return 0x8211CEA8;
		  /* 8211CEA8h */ case   10:  		/* b 8 */
		/* 8211CEA8h case   10:*/		return 0x8211CEB0;
		/* 8211CEA8h case   10:*/		return 0x8211CEAC;
	}
	return 0x8211CEAC;
} // Block from 8211CE80h-8211CEACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211CEACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CEAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CEAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CEAC);
		  /* 8211CEACh */ case    0:  		/* mr R31, R15 */
		/* 8211CEACh case    0:*/		regs.R31 = regs.R15;
		/* 8211CEACh case    0:*/		return 0x8211CEB0;
	}
	return 0x8211CEB0;
} // Block from 8211CEACh-8211CEB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CEB0);
		  /* 8211CEB0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211CEB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211CEB0h case    0:*/		return 0x8211CEB4;
		  /* 8211CEB4h */ case    1:  		/* bc 12, CR6_EQ, -688 */
		/* 8211CEB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CEB4h case    1:*/		return 0x8211CEB8;
		  /* 8211CEB8h */ case    2:  		/* li R3, 72 */
		/* 8211CEB8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211CEB8h case    2:*/		return 0x8211CEBC;
		  /* 8211CEBCh */ case    3:  		/* bl -343188 */
		/* 8211CEBCh case    3:*/		regs.LR = 0x8211CEC0; return 0x820C9228;
		/* 8211CEBCh case    3:*/		return 0x8211CEC0;
		  /* 8211CEC0h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8211CEC0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211CEC0h case    4:*/		return 0x8211CEC4;
		  /* 8211CEC4h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 8211CEC4h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211CEE0;  }
		/* 8211CEC4h case    5:*/		return 0x8211CEC8;
		  /* 8211CEC8h */ case    6:  		/* mulli R11, R20, 228 */
		/* 8211CEC8h case    6:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R20,0xE4);
		/* 8211CEC8h case    6:*/		return 0x8211CECC;
		  /* 8211CECCh */ case    7:  		/* lwz R6, <#[R1 + 516]> */
		/* 8211CECCh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000204) );
		/* 8211CECCh case    7:*/		return 0x8211CED0;
	}
	return 0x8211CED0;
} // Block from 8211CEB0h-8211CED0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211CED0h
// Function '?Error@CParse@D3DXShader@@IAAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CED0);
		  /* 8211CED0h */ case    0:  		/* lwzx R5, <#[R11 + R18]> */
		/* 8211CED0h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R18 + 0x00000000) );
		/* 8211CED0h case    0:*/		return 0x8211CED4;
		  /* 8211CED4h */ case    1:  		/* li R4, 2 */
		/* 8211CED4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8211CED4h case    1:*/		return 0x8211CED8;
		  /* 8211CED8h */ case    2:  		/* bl -330496 */
		/* 8211CED8h case    2:*/		regs.LR = 0x8211CEDC; return 0x820CC3D8;
		/* 8211CED8h case    2:*/		return 0x8211CEDC;
		  /* 8211CEDCh */ case    3:  		/* b 8 */
		/* 8211CEDCh case    3:*/		return 0x8211CEE4;
		/* 8211CEDCh case    3:*/		return 0x8211CEE0;
	}
	return 0x8211CEE0;
} // Block from 8211CED0h-8211CEE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211CEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CEE0);
		  /* 8211CEE0h */ case    0:  		/* mr R3, R15 */
		/* 8211CEE0h case    0:*/		regs.R3 = regs.R15;
		/* 8211CEE0h case    0:*/		return 0x8211CEE4;
	}
	return 0x8211CEE4;
} // Block from 8211CEE0h-8211CEE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CEE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CEE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CEE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CEE4);
		  /* 8211CEE4h */ case    0:  		/* stw R3, <#[R31 + 8]> */
		/* 8211CEE4h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8211CEE4h case    0:*/		return 0x8211CEE8;
		  /* 8211CEE8h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211CEE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211CEE8h case    1:*/		return 0x8211CEEC;
		  /* 8211CEECh */ case    2:  		/* bc 12, CR6_EQ, -744 */
		/* 8211CEECh case    2:*/		if ( regs.CR[6].eq ) { return 0x8211CC04;  }
		/* 8211CEECh case    2:*/		return 0x8211CEF0;
		  /* 8211CEF0h */ case    3:  		/* stw R31, <#[R30]> */
		/* 8211CEF0h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 8211CEF0h case    3:*/		return 0x8211CEF4;
	}
	return 0x8211CEF4;
} // Block from 8211CEE4h-8211CEF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211CEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CEF4);
		  /* 8211CEF4h */ case    0:  		/* mr R3, R15 */
		/* 8211CEF4h case    0:*/		regs.R3 = regs.R15;
		/* 8211CEF4h case    0:*/		return 0x8211CEF8;
	}
	return 0x8211CEF8;
} // Block from 8211CEF4h-8211CEF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211CEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CEF8);
		  /* 8211CEF8h */ case    0:  		/* addi R1, R1, 464 */
		/* 8211CEF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1D0);
		/* 8211CEF8h case    0:*/		return 0x8211CEFC;
		  /* 8211CEFCh */ case    1:  		/* b -572556 */
		/* 8211CEFCh case    1:*/		return 0x82091270;
		/* 8211CEFCh case    1:*/		return 0x8211CF00;
	}
	return 0x8211CF00;
} // Block from 8211CEF8h-8211CF00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211CF00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CF00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CF00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CF00);
		  /* 8211CF00h */ case    0:  		/* mfspr R12, LR */
		/* 8211CF00h case    0:*/		regs.R12 = regs.LR;
		/* 8211CF00h case    0:*/		return 0x8211CF04;
		  /* 8211CF04h */ case    1:  		/* bl -572608 */
		/* 8211CF04h case    1:*/		regs.LR = 0x8211CF08; return 0x82091244;
		/* 8211CF04h case    1:*/		return 0x8211CF08;
		  /* 8211CF08h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8211CF08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8211CF08h case    2:*/		return 0x8211CF0C;
		  /* 8211CF0Ch */ case    3:  		/* mr R31, R3 */
		/* 8211CF0Ch case    3:*/		regs.R31 = regs.R3;
		/* 8211CF0Ch case    3:*/		return 0x8211CF10;
		  /* 8211CF10h */ case    4:  		/* mr R29, R4 */
		/* 8211CF10h case    4:*/		regs.R29 = regs.R4;
		/* 8211CF10h case    4:*/		return 0x8211CF14;
		  /* 8211CF14h */ case    5:  		/* mr R28, R5 */
		/* 8211CF14h case    5:*/		regs.R28 = regs.R5;
		/* 8211CF14h case    5:*/		return 0x8211CF18;
		  /* 8211CF18h */ case    6:  		/* li R23, 0 */
		/* 8211CF18h case    6:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8211CF18h case    6:*/		return 0x8211CF1C;
		  /* 8211CF1Ch */ case    7:  		/* bl -11084 */
		/* 8211CF1Ch case    7:*/		regs.LR = 0x8211CF20; return 0x8211A3D0;
		/* 8211CF1Ch case    7:*/		return 0x8211CF20;
	}
	return 0x8211CF20;
} // Block from 8211CF00h-8211CF20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211CF20h
// Function '?FindIntrinsic@CParse@D3DXShader@@IAAJPBUD3DINTRINSIC@2@IPAVCNodeType@2@PAUD3DXTOKEN@2@PAVCNode@2@PAPAV62@4@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CF20);
		  /* 8211CF20h */ case    0:  		/* mr R26, R3 */
		/* 8211CF20h case    0:*/		regs.R26 = regs.R3;
		/* 8211CF20h case    0:*/		return 0x8211CF24;
		  /* 8211CF24h */ case    1:  		/* mr R4, R28 */
		/* 8211CF24h case    1:*/		regs.R4 = regs.R28;
		/* 8211CF24h case    1:*/		return 0x8211CF28;
		  /* 8211CF28h */ case    2:  		/* mr R3, R31 */
		/* 8211CF28h case    2:*/		regs.R3 = regs.R31;
		/* 8211CF28h case    2:*/		return 0x8211CF2C;
		  /* 8211CF2Ch */ case    3:  		/* bl -11100 */
		/* 8211CF2Ch case    3:*/		regs.LR = 0x8211CF30; return 0x8211A3D0;
		/* 8211CF2Ch case    3:*/		return 0x8211CF30;
		  /* 8211CF30h */ case    4:  		/* mr R24, R3 */
		/* 8211CF30h case    4:*/		regs.R24 = regs.R3;
		/* 8211CF30h case    4:*/		return 0x8211CF34;
		  /* 8211CF34h */ case    5:  		/* mr R5, R28 */
		/* 8211CF34h case    5:*/		regs.R5 = regs.R28;
		/* 8211CF34h case    5:*/		return 0x8211CF38;
		  /* 8211CF38h */ case    6:  		/* mr R4, R29 */
		/* 8211CF38h case    6:*/		regs.R4 = regs.R29;
		/* 8211CF38h case    6:*/		return 0x8211CF3C;
		  /* 8211CF3Ch */ case    7:  		/* mr R3, R31 */
		/* 8211CF3Ch case    7:*/		regs.R3 = regs.R31;
		/* 8211CF3Ch case    7:*/		return 0x8211CF40;
		  /* 8211CF40h */ case    8:  		/* bl -19528 */
		/* 8211CF40h case    8:*/		regs.LR = 0x8211CF44; return 0x821182F8;
		/* 8211CF40h case    8:*/		return 0x8211CF44;
		  /* 8211CF44h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 8211CF44h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211CF44h case    9:*/		return 0x8211CF48;
		  /* 8211CF48h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 8211CF48h case   10:*/		if ( regs.CR[0].eq ) { return 0x8211CF54;  }
		/* 8211CF48h case   10:*/		return 0x8211CF4C;
		  /* 8211CF4Ch */ case   11:  		/* li R3, 0 */
		/* 8211CF4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211CF4Ch case   11:*/		return 0x8211CF50;
		  /* 8211CF50h */ case   12:  		/* b 276 */
		/* 8211CF50h case   12:*/		return 0x8211D064;
		/* 8211CF50h case   12:*/		return 0x8211CF54;
	}
	return 0x8211CF54;
} // Block from 8211CF20h-8211CF54h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211CF54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CF54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CF54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CF54);
		  /* 8211CF54h */ case    0:  		/* addi R3, R1, 96 */
		/* 8211CF54h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8211CF54h case    0:*/		return 0x8211CF58;
		  /* 8211CF58h */ case    1:  		/* li R27, 0 */
		/* 8211CF58h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8211CF58h case    1:*/		return 0x8211CF5C;
		  /* 8211CF5Ch */ case    2:  		/* li R25, 0 */
		/* 8211CF5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8211CF5Ch case    2:*/		return 0x8211CF60;
		  /* 8211CF60h */ case    3:  		/* bl -336672 */
		/* 8211CF60h case    3:*/		regs.LR = 0x8211CF64; return 0x820CAC40;
		/* 8211CF60h case    3:*/		return 0x8211CF64;
		  /* 8211CF64h */ case    4:  		/* addi R3, R1, 144 */
		/* 8211CF64h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 8211CF64h case    4:*/		return 0x8211CF68;
		  /* 8211CF68h */ case    5:  		/* bl -336680 */
		/* 8211CF68h case    5:*/		regs.LR = 0x8211CF6C; return 0x820CAC40;
		/* 8211CF68h case    5:*/		return 0x8211CF6C;
		  /* 8211CF6Ch */ case    6:  		/* li R30, 0 */
		/* 8211CF6Ch case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211CF6Ch case    6:*/		return 0x8211CF70;
		  /* 8211CF70h */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 8211CF70h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211CF70h case    7:*/		return 0x8211CF74;
		  /* 8211CF74h */ case    8:  		/* bc 12, CR6_EQ, 188 */
		/* 8211CF74h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211D030;  }
		/* 8211CF74h case    8:*/		return 0x8211CF78;
		  /* 8211CF78h */ case    9:  		/* cmplw CR6, R30, R24 */
		/* 8211CF78h case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 8211CF78h case    9:*/		return 0x8211CF7C;
		  /* 8211CF7Ch */ case   10:  		/* bc 4, CR6_LT, 180 */
		/* 8211CF7Ch case   10:*/		if ( !regs.CR[6].lt ) { return 0x8211D030;  }
		/* 8211CF7Ch case   10:*/		return 0x8211CF80;
		  /* 8211CF80h */ case   11:  		/* addi R6, R1, 96 */
		/* 8211CF80h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 8211CF80h case   11:*/		return 0x8211CF84;
		  /* 8211CF84h */ case   12:  		/* mr R5, R30 */
		/* 8211CF84h case   12:*/		regs.R5 = regs.R30;
		/* 8211CF84h case   12:*/		return 0x8211CF88;
		  /* 8211CF88h */ case   13:  		/* mr R4, R29 */
		/* 8211CF88h case   13:*/		regs.R4 = regs.R29;
		/* 8211CF88h case   13:*/		return 0x8211CF8C;
		  /* 8211CF8Ch */ case   14:  		/* mr R3, R31 */
		/* 8211CF8Ch case   14:*/		regs.R3 = regs.R31;
		/* 8211CF8Ch case   14:*/		return 0x8211CF90;
		  /* 8211CF90h */ case   15:  		/* bl -9912 */
		/* 8211CF90h case   15:*/		regs.LR = 0x8211CF94; return 0x8211A8D8;
		/* 8211CF90h case   15:*/		return 0x8211CF94;
		  /* 8211CF94h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8211CF94h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211CF94h case   16:*/		return 0x8211CF98;
		  /* 8211CF98h */ case   17:  		/* bc 12, CR0_LT, 116 */
		/* 8211CF98h case   17:*/		if ( regs.CR[0].lt ) { return 0x8211D00C;  }
		/* 8211CF98h case   17:*/		return 0x8211CF9C;
		  /* 8211CF9Ch */ case   18:  		/* addi R6, R1, 144 */
		/* 8211CF9Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 8211CF9Ch case   18:*/		return 0x8211CFA0;
		  /* 8211CFA0h */ case   19:  		/* mr R5, R30 */
		/* 8211CFA0h case   19:*/		regs.R5 = regs.R30;
		/* 8211CFA0h case   19:*/		return 0x8211CFA4;
		  /* 8211CFA4h */ case   20:  		/* mr R4, R28 */
		/* 8211CFA4h case   20:*/		regs.R4 = regs.R28;
		/* 8211CFA4h case   20:*/		return 0x8211CFA8;
		  /* 8211CFA8h */ case   21:  		/* mr R3, R31 */
		/* 8211CFA8h case   21:*/		regs.R3 = regs.R31;
		/* 8211CFA8h case   21:*/		return 0x8211CFAC;
		  /* 8211CFACh */ case   22:  		/* bl -9940 */
		/* 8211CFACh case   22:*/		regs.LR = 0x8211CFB0; return 0x8211A8D8;
		/* 8211CFACh case   22:*/		return 0x8211CFB0;
		  /* 8211CFB0h */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 8211CFB0h case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211CFB0h case   23:*/		return 0x8211CFB4;
		  /* 8211CFB4h */ case   24:  		/* bc 12, CR0_LT, 88 */
		/* 8211CFB4h case   24:*/		if ( regs.CR[0].lt ) { return 0x8211D00C;  }
		/* 8211CFB4h case   24:*/		return 0x8211CFB8;
		  /* 8211CFB8h */ case   25:  		/* addi R6, R1, 80 */
		/* 8211CFB8h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8211CFB8h case   25:*/		return 0x8211CFBC;
		  /* 8211CFBCh */ case   26:  		/* addi R5, R1, 144 */
		/* 8211CFBCh case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 8211CFBCh case   26:*/		return 0x8211CFC0;
		  /* 8211CFC0h */ case   27:  		/* addi R4, R1, 96 */
		/* 8211CFC0h case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8211CFC0h case   27:*/		return 0x8211CFC4;
		  /* 8211CFC4h */ case   28:  		/* mr R3, R31 */
		/* 8211CFC4h case   28:*/		regs.R3 = regs.R31;
		/* 8211CFC4h case   28:*/		return 0x8211CFC8;
		  /* 8211CFC8h */ case   29:  		/* bl -19336 */
		/* 8211CFC8h case   29:*/		regs.LR = 0x8211CFCC; return 0x82118440;
		/* 8211CFC8h case   29:*/		return 0x8211CFCC;
		  /* 8211CFCCh */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 8211CFCCh case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211CFCCh case   30:*/		return 0x8211CFD0;
		  /* 8211CFD0h */ case   31:  		/* bc 12, CR0_LT, 60 */
		/* 8211CFD0h case   31:*/		if ( regs.CR[0].lt ) { return 0x8211D00C;  }
		/* 8211CFD0h case   31:*/		return 0x8211CFD4;
		  /* 8211CFD4h */ case   32:  		/* mr R3, R31 */
		/* 8211CFD4h case   32:*/		regs.R3 = regs.R31;
		/* 8211CFD4h case   32:*/		return 0x8211CFD8;
		  /* 8211CFD8h */ case   33:  		/* lwz R5, <#[R1 + 80]> */
		/* 8211CFD8h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 8211CFD8h case   33:*/		return 0x8211CFDC;
		  /* 8211CFDCh */ case   34:  		/* lwz R4, <#[R1 + 116]> */
		/* 8211CFDCh case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 8211CFDCh case   34:*/		return 0x8211CFE0;
		  /* 8211CFE0h */ case   35:  		/* bl -20056 */
		/* 8211CFE0h case   35:*/		regs.LR = 0x8211CFE4; return 0x82118188;
		/* 8211CFE0h case   35:*/		return 0x8211CFE4;
		  /* 8211CFE4h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 8211CFE4h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211CFE4h case   36:*/		return 0x8211CFE8;
		  /* 8211CFE8h */ case   37:  		/* bc 12, CR0_EQ, 8 */
		/* 8211CFE8h case   37:*/		if ( regs.CR[0].eq ) { return 0x8211CFF0;  }
		/* 8211CFE8h case   37:*/		return 0x8211CFEC;
		  /* 8211CFECh */ case   38:  		/* li R27, 1 */
		/* 8211CFECh case   38:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8211CFECh case   38:*/		return 0x8211CFF0;
	}
	return 0x8211CFF0;
} // Block from 8211CF54h-8211CFF0h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8211CFF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211CFF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211CFF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211CFF0);
		  /* 8211CFF0h */ case    0:  		/* mr R4, R5 */
		/* 8211CFF0h case    0:*/		regs.R4 = regs.R5;
		/* 8211CFF0h case    0:*/		return 0x8211CFF4;
		  /* 8211CFF4h */ case    1:  		/* lwz R5, <#[R1 + 164]> */
		/* 8211CFF4h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A4) );
		/* 8211CFF4h case    1:*/		return 0x8211CFF8;
		  /* 8211CFF8h */ case    2:  		/* mr R3, R31 */
		/* 8211CFF8h case    2:*/		regs.R3 = regs.R31;
		/* 8211CFF8h case    2:*/		return 0x8211CFFC;
		  /* 8211CFFCh */ case    3:  		/* bl -20084 */
		/* 8211CFFCh case    3:*/		regs.LR = 0x8211D000; return 0x82118188;
		/* 8211CFFCh case    3:*/		return 0x8211D000;
		  /* 8211D000h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8211D000h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D000h case    4:*/		return 0x8211D004;
		  /* 8211D004h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 8211D004h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211D014;  }
		/* 8211D004h case    5:*/		return 0x8211D008;
		  /* 8211D008h */ case    6:  		/* b 8 */
		/* 8211D008h case    6:*/		return 0x8211D010;
		/* 8211D008h case    6:*/		return 0x8211D00C;
	}
	return 0x8211D00C;
} // Block from 8211CFF0h-8211D00Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211D00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D00C);
		  /* 8211D00Ch */ case    0:  		/* li R27, 1 */
		/* 8211D00Ch case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8211D00Ch case    0:*/		return 0x8211D010;
	}
	return 0x8211D010;
} // Block from 8211D00Ch-8211D010h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211D010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D010);
		  /* 8211D010h */ case    0:  		/* li R25, 1 */
		/* 8211D010h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8211D010h case    0:*/		return 0x8211D014;
	}
	return 0x8211D014;
} // Block from 8211D010h-8211D014h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211D014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D014);
		  /* 8211D014h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8211D014h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8211D014h case    0:*/		return 0x8211D018;
		  /* 8211D018h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8211D018h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D024;  }
		/* 8211D018h case    1:*/		return 0x8211D01C;
		  /* 8211D01Ch */ case    2:  		/* cmpwi CR6, R25, 0 */
		/* 8211D01Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 8211D01Ch case    2:*/		return 0x8211D020;
		  /* 8211D020h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 8211D020h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211D030;  }
		/* 8211D020h case    3:*/		return 0x8211D024;
	}
	return 0x8211D024;
} // Block from 8211D014h-8211D024h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211D024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D024);
		  /* 8211D024h */ case    0:  		/* addi R30, R30, 1 */
		/* 8211D024h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8211D024h case    0:*/		return 0x8211D028;
		  /* 8211D028h */ case    1:  		/* cmplw CR6, R30, R26 */
		/* 8211D028h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8211D028h case    1:*/		return 0x8211D02C;
		  /* 8211D02Ch */ case    2:  		/* bc 12, CR6_LT, -180 */
		/* 8211D02Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8211CF78;  }
		/* 8211D02Ch case    2:*/		return 0x8211D030;
	}
	return 0x8211D030;
} // Block from 8211D024h-8211D030h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D030);
		  /* 8211D030h */ case    0:  		/* cmplw CR6, R24, R26 */
		/* 8211D030h case    0:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R26);
		/* 8211D030h case    0:*/		return 0x8211D034;
		  /* 8211D034h */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 8211D034h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211D03C;  }
		/* 8211D034h case    1:*/		return 0x8211D038;
		  /* 8211D038h */ case    2:  		/* li R23, 4 */
		/* 8211D038h case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x4);
		/* 8211D038h case    2:*/		return 0x8211D03C;
	}
	return 0x8211D03C;
} // Block from 8211D030h-8211D03Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D03C);
		  /* 8211D03Ch */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8211D03Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8211D03Ch case    0:*/		return 0x8211D040;
		  /* 8211D040h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8211D040h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D048;  }
		/* 8211D040h case    1:*/		return 0x8211D044;
		  /* 8211D044h */ case    2:  		/* addi R23, R23, 512 */
		/* 8211D044h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x200);
		/* 8211D044h case    2:*/		return 0x8211D048;
	}
	return 0x8211D048;
} // Block from 8211D03Ch-8211D048h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D048);
		  /* 8211D048h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 8211D048h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 8211D048h case    0:*/		return 0x8211D04C;
		  /* 8211D04Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8211D04Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D054;  }
		/* 8211D04Ch case    1:*/		return 0x8211D050;
		  /* 8211D050h */ case    2:  		/* addis R23, R23, 1 */
		/* 8211D050h case    2:*/		cpu::op::addis<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8211D050h case    2:*/		return 0x8211D054;
	}
	return 0x8211D054;
} // Block from 8211D048h-8211D054h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D054);
		  /* 8211D054h */ case    0:  		/* cmplw CR6, R26, R24 */
		/* 8211D054h case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R24);
		/* 8211D054h case    0:*/		return 0x8211D058;
		  /* 8211D058h */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 8211D058h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211D060;  }
		/* 8211D058h case    1:*/		return 0x8211D05C;
		  /* 8211D05Ch */ case    2:  		/* addis R23, R23, 128 */
		/* 8211D05Ch case    2:*/		cpu::op::addis<0>(regs,&regs.R23,regs.R23,0x80);
		/* 8211D05Ch case    2:*/		return 0x8211D060;
	}
	return 0x8211D060;
} // Block from 8211D054h-8211D060h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D060);
		  /* 8211D060h */ case    0:  		/* mr R3, R23 */
		/* 8211D060h case    0:*/		regs.R3 = regs.R23;
		/* 8211D060h case    0:*/		return 0x8211D064;
	}
	return 0x8211D064;
} // Block from 8211D060h-8211D064h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211D064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D064);
		  /* 8211D064h */ case    0:  		/* addi R1, R1, 272 */
		/* 8211D064h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8211D064h case    0:*/		return 0x8211D068;
		  /* 8211D068h */ case    1:  		/* b -572884 */
		/* 8211D068h case    1:*/		return 0x82091294;
		/* 8211D068h case    1:*/		return 0x8211D06C;
		  /* 8211D06Ch */ case    2:  		/* nop */
		/* 8211D06Ch case    2:*/		cpu::op::nop();
		/* 8211D06Ch case    2:*/		return 0x8211D070;
	}
	return 0x8211D070;
} // Block from 8211D064h-8211D070h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D070);
		  /* 8211D070h */ case    0:  		/* mfspr R12, LR */
		/* 8211D070h case    0:*/		regs.R12 = regs.LR;
		/* 8211D070h case    0:*/		return 0x8211D074;
		  /* 8211D074h */ case    1:  		/* bl -572952 */
		/* 8211D074h case    1:*/		regs.LR = 0x8211D078; return 0x8209125C;
		/* 8211D074h case    1:*/		return 0x8211D078;
		  /* 8211D078h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211D078h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211D078h case    2:*/		return 0x8211D07C;
		  /* 8211D07Ch */ case    3:  		/* lwz R31, <#[R4 + 16]> */
		/* 8211D07Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000010) );
		/* 8211D07Ch case    3:*/		return 0x8211D080;
		  /* 8211D080h */ case    4:  		/* mr R30, R3 */
		/* 8211D080h case    4:*/		regs.R30 = regs.R3;
		/* 8211D080h case    4:*/		return 0x8211D084;
		  /* 8211D084h */ case    5:  		/* mr R29, R5 */
		/* 8211D084h case    5:*/		regs.R29 = regs.R5;
		/* 8211D084h case    5:*/		return 0x8211D088;
		  /* 8211D088h */ case    6:  		/* rlwinm. R11, R31, 0, 22, 22 */
		/* 8211D088h case    6:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R31);
		/* 8211D088h case    6:*/		return 0x8211D08C;
		  /* 8211D08Ch */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 8211D08Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8211D09C;  }
		/* 8211D08Ch case    7:*/		return 0x8211D090;
		  /* 8211D090h */ case    8:  		/* li R5, 1 */
		/* 8211D090h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8211D090h case    8:*/		return 0x8211D094;
		  /* 8211D094h */ case    9:  		/* mr R4, R29 */
		/* 8211D094h case    9:*/		regs.R4 = regs.R29;
		/* 8211D094h case    9:*/		return 0x8211D098;
		  /* 8211D098h */ case   10:  		/* bl -12112 */
		/* 8211D098h case   10:*/		regs.LR = 0x8211D09C; return 0x8211A148;
		/* 8211D098h case   10:*/		return 0x8211D09C;
	}
	return 0x8211D09C;
} // Block from 8211D070h-8211D09Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211D09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D09C);
		  /* 8211D09Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211D09Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211D09Ch case    0:*/		return 0x8211D0A0;
		  /* 8211D0A0h */ case    1:  		/* bc 12, CR6_EQ, 144 */
		/* 8211D0A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D130;  }
		/* 8211D0A0h case    1:*/		return 0x8211D0A4;
		  /* 8211D0A4h */ case    2:  		/* lwz R11, <#[R29 + 4]> */
		/* 8211D0A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8211D0A4h case    2:*/		return 0x8211D0A8;
		  /* 8211D0A8h */ case    3:  		/* cmpwi CR6, R11, 9 */
		/* 8211D0A8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211D0A8h case    3:*/		return 0x8211D0AC;
		  /* 8211D0ACh */ case    4:  		/* bc 4, CR6_EQ, 132 */
		/* 8211D0ACh case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211D130;  }
		/* 8211D0ACh case    4:*/		return 0x8211D0B0;
		  /* 8211D0B0h */ case    5:  		/* lwz R11, <#[R29 + 16]> */
		/* 8211D0B0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8211D0B0h case    5:*/		return 0x8211D0B4;
		  /* 8211D0B4h */ case    6:  		/* cmpwi CR6, R11, 2 */
		/* 8211D0B4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211D0B4h case    6:*/		return 0x8211D0B8;
		  /* 8211D0B8h */ case    7:  		/* bc 4, CR6_EQ, 120 */
		/* 8211D0B8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211D130;  }
		/* 8211D0B8h case    7:*/		return 0x8211D0BC;
		  /* 8211D0BCh */ case    8:  		/* rlwinm. R11, R31, 0, 20, 21 */
		/* 8211D0BCh case    8:*/		cpu::op::rlwinm<1,0,20,21>(regs,&regs.R11,regs.R31);
		/* 8211D0BCh case    8:*/		return 0x8211D0C0;
		  /* 8211D0C0h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 8211D0C0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8211D0D0;  }
		/* 8211D0C0h case    9:*/		return 0x8211D0C4;
		  /* 8211D0C4h */ case   10:  		/* lwz R11, <#[R30 + 4]> */
		/* 8211D0C4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8211D0C4h case   10:*/		return 0x8211D0C8;
		  /* 8211D0C8h */ case   11:  		/* lwz R11, <#[R11 + 64]> */
		/* 8211D0C8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000040) );
		/* 8211D0C8h case   11:*/		return 0x8211D0CC;
		  /* 8211D0CCh */ case   12:  		/* or R31, R11, R31 */
		/* 8211D0CCh case   12:*/		cpu::op::or<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8211D0CCh case   12:*/		return 0x8211D0D0;
	}
	return 0x8211D0D0;
} // Block from 8211D09Ch-8211D0D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211D0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D0D0);
		  /* 8211D0D0h */ case    0:  		/* rlwinm. R11, R31, 0, 20, 21 */
		/* 8211D0D0h case    0:*/		cpu::op::rlwinm<1,0,20,21>(regs,&regs.R11,regs.R31);
		/* 8211D0D0h case    0:*/		return 0x8211D0D4;
		  /* 8211D0D4h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 8211D0D4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8211D0F8;  }
		/* 8211D0D4h case    1:*/		return 0x8211D0D8;
		  /* 8211D0D8h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 8211D0D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8211D0D8h case    2:*/		return 0x8211D0DC;
		  /* 8211D0DCh */ case    3:  		/* rlwinm. R10, R11, 0, 28, 28 */
		/* 8211D0DCh case    3:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R11);
		/* 8211D0DCh case    3:*/		return 0x8211D0E0;
		  /* 8211D0E0h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8211D0E0h case    4:*/		if ( regs.CR[0].eq ) { return 0x8211D0EC;  }
		/* 8211D0E0h case    4:*/		return 0x8211D0E4;
		  /* 8211D0E4h */ case    5:  		/* ori R31, R31, 1024 */
		/* 8211D0E4h case    5:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x400);
		/* 8211D0E4h case    5:*/		return 0x8211D0E8;
		  /* 8211D0E8h */ case    6:  		/* b 16 */
		/* 8211D0E8h case    6:*/		return 0x8211D0F8;
		/* 8211D0E8h case    6:*/		return 0x8211D0EC;
	}
	return 0x8211D0EC;
} // Block from 8211D0D0h-8211D0ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211D0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D0EC);
		  /* 8211D0ECh */ case    0:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 8211D0ECh case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 8211D0ECh case    0:*/		return 0x8211D0F0;
		  /* 8211D0F0h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D0F0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8211D0F8;  }
		/* 8211D0F0h case    1:*/		return 0x8211D0F4;
		  /* 8211D0F4h */ case    2:  		/* ori R31, R31, 2048 */
		/* 8211D0F4h case    2:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x800);
		/* 8211D0F4h case    2:*/		return 0x8211D0F8;
	}
	return 0x8211D0F8;
} // Block from 8211D0ECh-8211D0F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D0F8);
		  /* 8211D0F8h */ case    0:  		/* rlwinm. R10, R31, 0, 21, 21 */
		/* 8211D0F8h case    0:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R10,regs.R31);
		/* 8211D0F8h case    0:*/		return 0x8211D0FC;
		  /* 8211D0FCh */ case    1:  		/* li R11, 1 */
		/* 8211D0FCh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211D0FCh case    1:*/		return 0x8211D100;
		  /* 8211D100h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8211D100h case    2:*/		if ( regs.CR[0].eq ) { return 0x8211D110;  }
		/* 8211D100h case    2:*/		return 0x8211D104;
		  /* 8211D104h */ case    3:  		/* lwz R10, <#[R29 + 36]> */
		/* 8211D104h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000024) );
		/* 8211D104h case    3:*/		return 0x8211D108;
		  /* 8211D108h */ case    4:  		/* rlwimi R10, R11, 10, 20, 21 */
		/* 8211D108h case    4:*/		cpu::op::rlwimi<0,10,20,21>(regs,&regs.R10,regs.R11);
		/* 8211D108h case    4:*/		return 0x8211D10C;
		  /* 8211D10Ch */ case    5:  		/* stw R10, <#[R29 + 36]> */
		/* 8211D10Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000024) );
		/* 8211D10Ch case    5:*/		return 0x8211D110;
	}
	return 0x8211D110;
} // Block from 8211D0F8h-8211D110h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D110);
		  /* 8211D110h */ case    0:  		/* rlwinm. R10, R31, 0, 20, 20 */
		/* 8211D110h case    0:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R10,regs.R31);
		/* 8211D110h case    0:*/		return 0x8211D114;
		  /* 8211D114h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8211D114h case    1:*/		if ( regs.CR[0].eq ) { return 0x8211D124;  }
		/* 8211D114h case    1:*/		return 0x8211D118;
		  /* 8211D118h */ case    2:  		/* lwz R10, <#[R29 + 36]> */
		/* 8211D118h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000024) );
		/* 8211D118h case    2:*/		return 0x8211D11C;
		  /* 8211D11Ch */ case    3:  		/* rlwimi R10, R11, 11, 20, 21 */
		/* 8211D11Ch case    3:*/		cpu::op::rlwimi<0,11,20,21>(regs,&regs.R10,regs.R11);
		/* 8211D11Ch case    3:*/		return 0x8211D120;
		  /* 8211D120h */ case    4:  		/* stw R10, <#[R29 + 36]> */
		/* 8211D120h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000024) );
		/* 8211D120h case    4:*/		return 0x8211D124;
	}
	return 0x8211D124;
} // Block from 8211D110h-8211D124h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211D124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D124);
		  /* 8211D124h */ case    0:  		/* li R3, 0 */
		/* 8211D124h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211D124h case    0:*/		return 0x8211D128;
		  /* 8211D128h */ case    1:  		/* addi R1, R1, 144 */
		/* 8211D128h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211D128h case    1:*/		return 0x8211D12C;
		  /* 8211D12Ch */ case    2:  		/* b -573056 */
		/* 8211D12Ch case    2:*/		return 0x820912AC;
		/* 8211D12Ch case    2:*/		return 0x8211D130;
	}
	return 0x8211D130;
} // Block from 8211D124h-8211D130h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D130);
		  /* 8211D130h */ case    0:  		/* rlwinm. R11, R31, 0, 20, 21 */
		/* 8211D130h case    0:*/		cpu::op::rlwinm<1,0,20,21>(regs,&regs.R11,regs.R31);
		/* 8211D130h case    0:*/		return 0x8211D134;
		  /* 8211D134h */ case    1:  		/* bc 12, CR0_EQ, -16 */
		/* 8211D134h case    1:*/		if ( regs.CR[0].eq ) { return 0x8211D124;  }
		/* 8211D134h case    1:*/		return 0x8211D138;
		  /* 8211D138h */ case    2:  		/* lis R11, -32253 */
		/* 8211D138h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211D138h case    2:*/		return 0x8211D13C;
		  /* 8211D13Ch */ case    3:  		/* li R5, 3077 */
		/* 8211D13Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xC05);
		/* 8211D13Ch case    3:*/		return 0x8211D140;
		  /* 8211D140h */ case    4:  		/* addi R6, R11, 8888 */
		/* 8211D140h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x22B8);
		/* 8211D140h case    4:*/		return 0x8211D144;
		  /* 8211D144h */ case    5:  		/* addi R4, R30, 40 */
		/* 8211D144h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x28);
		/* 8211D144h case    5:*/		return 0x8211D148;
		  /* 8211D148h */ case    6:  		/* mr R3, R30 */
		/* 8211D148h case    6:*/		regs.R3 = regs.R30;
		/* 8211D148h case    6:*/		return 0x8211D14C;
		  /* 8211D14Ch */ case    7:  		/* bl -14508 */
		/* 8211D14Ch case    7:*/		regs.LR = 0x8211D150; return 0x821198A0;
		/* 8211D14Ch case    7:*/		return 0x8211D150;
		  /* 8211D150h */ case    8:  		/* lis R3, -32768 */
		/* 8211D150h case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211D150h case    8:*/		return 0x8211D154;
		  /* 8211D154h */ case    9:  		/* ori R3, R3, 16389 */
		/* 8211D154h case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211D154h case    9:*/		return 0x8211D158;
		  /* 8211D158h */ case   10:  		/* b -48 */
		/* 8211D158h case   10:*/		return 0x8211D128;
		/* 8211D158h case   10:*/		return 0x8211D15C;
		  /* 8211D15Ch */ case   11:  		/* nop */
		/* 8211D15Ch case   11:*/		cpu::op::nop();
		/* 8211D15Ch case   11:*/		return 0x8211D160;
	}
	return 0x8211D160;
} // Block from 8211D130h-8211D160h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211D160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D160);
		  /* 8211D160h */ case    0:  		/* mfspr R12, LR */
		/* 8211D160h case    0:*/		regs.R12 = regs.LR;
		/* 8211D160h case    0:*/		return 0x8211D164;
		  /* 8211D164h */ case    1:  		/* bl -573192 */
		/* 8211D164h case    1:*/		regs.LR = 0x8211D168; return 0x8209125C;
		/* 8211D164h case    1:*/		return 0x8211D168;
		  /* 8211D168h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211D168h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211D168h case    2:*/		return 0x8211D16C;
		  /* 8211D16Ch */ case    3:  		/* lwz R11, <#[R5 + 16]> */
		/* 8211D16Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 8211D16Ch case    3:*/		return 0x8211D170;
		  /* 8211D170h */ case    4:  		/* mr R31, R3 */
		/* 8211D170h case    4:*/		regs.R31 = regs.R3;
		/* 8211D170h case    4:*/		return 0x8211D174;
		  /* 8211D174h */ case    5:  		/* lwz R10, <#[R4 + 16]> */
		/* 8211D174h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 8211D174h case    5:*/		return 0x8211D178;
		  /* 8211D178h */ case    6:  		/* mr R30, R4 */
		/* 8211D178h case    6:*/		regs.R30 = regs.R4;
		/* 8211D178h case    6:*/		return 0x8211D17C;
		  /* 8211D17Ch */ case    7:  		/* mr R29, R5 */
		/* 8211D17Ch case    7:*/		regs.R29 = regs.R5;
		/* 8211D17Ch case    7:*/		return 0x8211D180;
		  /* 8211D180h */ case    8:  		/* and. R11, R10, R11 */
		/* 8211D180h case    8:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8211D180h case    8:*/		return 0x8211D184;
		  /* 8211D184h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 8211D184h case    9:*/		if ( regs.CR[0].eq ) { return 0x8211D19C;  }
		/* 8211D184h case    9:*/		return 0x8211D188;
		  /* 8211D188h */ case   10:  		/* lis R11, -32253 */
		/* 8211D188h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211D188h case   10:*/		return 0x8211D18C;
		  /* 8211D18Ch */ case   11:  		/* li R5, 3048 */
		/* 8211D18Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0xBE8);
		/* 8211D18Ch case   11:*/		return 0x8211D190;
		  /* 8211D190h */ case   12:  		/* addi R6, R11, 9064 */
		/* 8211D190h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2368);
		/* 8211D190h case   12:*/		return 0x8211D194;
		  /* 8211D194h */ case   13:  		/* addi R4, R3, 40 */
		/* 8211D194h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x28);
		/* 8211D194h case   13:*/		return 0x8211D198;
		  /* 8211D198h */ case   14:  		/* bl -14584 */
		/* 8211D198h case   14:*/		regs.LR = 0x8211D19C; return 0x821198A0;
		/* 8211D198h case   14:*/		return 0x8211D19C;
	}
	return 0x8211D19C;
} // Block from 8211D160h-8211D19Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211D19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D19C);
		  /* 8211D19Ch */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 8211D19Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8211D19Ch case    0:*/		return 0x8211D1A0;
		  /* 8211D1A0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211D1A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211D1A0h case    1:*/		return 0x8211D1A4;
		  /* 8211D1A4h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 8211D1A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211D1E0;  }
		/* 8211D1A4h case    2:*/		return 0x8211D1A8;
		  /* 8211D1A8h */ case    3:  		/* lwz R10, <#[R29 + 20]> */
		/* 8211D1A8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000014) );
		/* 8211D1A8h case    3:*/		return 0x8211D1AC;
		  /* 8211D1ACh */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8211D1ACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211D1ACh case    4:*/		return 0x8211D1B0;
		  /* 8211D1B0h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 8211D1B0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211D1E0;  }
		/* 8211D1B0h case    5:*/		return 0x8211D1B4;
		  /* 8211D1B4h */ case    6:  		/* li R11, 5 */
		/* 8211D1B4h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8211D1B4h case    6:*/		return 0x8211D1B8;
		  /* 8211D1B8h */ case    7:  		/* addi R10, R10, 8 */
		/* 8211D1B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 8211D1B8h case    7:*/		return 0x8211D1BC;
		  /* 8211D1BCh */ case    8:  		/* addi R9, R31, 32 */
		/* 8211D1BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x20);
		/* 8211D1BCh case    8:*/		return 0x8211D1C0;
		  /* 8211D1C0h */ case    9:  		/* mtspr CTR, R11 */
		/* 8211D1C0h case    9:*/		regs.CTR = regs.R11;
		/* 8211D1C0h case    9:*/		return 0x8211D1C4;
		  /* 8211D1C4h */ case   10:  		/* ldu R11, <#[R10 + 8]> */
		/* 8211D1C4h case   10:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8211D1C4h case   10:*/		return 0x8211D1C8;
		  /* 8211D1C8h */ case   11:  		/* stdu R11, <#[R9 + 8]> */
		/* 8211D1C8h case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		regs.R9 = (uint32)(regs.R9 + 0x00000008);
		/* 8211D1C8h case   11:*/		return 0x8211D1CC;
		  /* 8211D1CCh */ case   12:  		/* bc 16, CR0_LT, -8 */
		/* 8211D1CCh case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8211D1C4;  }
		/* 8211D1CCh case   12:*/		return 0x8211D1D0;
		  /* 8211D1D0h */ case   13:  		/* lis R11, -32255 */
		/* 8211D1D0h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211D1D0h case   13:*/		return 0x8211D1D4;
		  /* 8211D1D4h */ case   14:  		/* mr R3, R31 */
		/* 8211D1D4h case   14:*/		regs.R3 = regs.R31;
		/* 8211D1D4h case   14:*/		return 0x8211D1D8;
		  /* 8211D1D8h */ case   15:  		/* addi R4, R11, -10392 */
		/* 8211D1D8h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFD768);
		/* 8211D1D8h case   15:*/		return 0x8211D1DC;
		  /* 8211D1DCh */ case   16:  		/* bl -3700 */
		/* 8211D1DCh case   16:*/		regs.LR = 0x8211D1E0; return 0x8211C368;
		/* 8211D1DCh case   16:*/		return 0x8211D1E0;
	}
	return 0x8211D1E0;
} // Block from 8211D19Ch-8211D1E0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211D1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D1E0);
		  /* 8211D1E0h */ case    0:  		/* lwz R10, <#[R29 + 16]> */
		/* 8211D1E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 8211D1E0h case    0:*/		return 0x8211D1E4;
		  /* 8211D1E4h */ case    1:  		/* lwz R11, <#[R30 + 16]> */
		/* 8211D1E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8211D1E4h case    1:*/		return 0x8211D1E8;
		  /* 8211D1E8h */ case    2:  		/* or R11, R11, R10 */
		/* 8211D1E8h case    2:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8211D1E8h case    2:*/		return 0x8211D1EC;
		  /* 8211D1ECh */ case    3:  		/* rlwinm. R10, R11, 0, 12, 12 */
		/* 8211D1ECh case    3:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R11);
		/* 8211D1ECh case    3:*/		return 0x8211D1F0;
		  /* 8211D1F0h */ case    4:  		/* stw R11, <#[R30 + 16]> */
		/* 8211D1F0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8211D1F0h case    4:*/		return 0x8211D1F4;
		  /* 8211D1F4h */ case    5:  		/* bc 12, CR0_EQ, 40 */
		/* 8211D1F4h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211D21C;  }
		/* 8211D1F4h case    5:*/		return 0x8211D1F8;
		  /* 8211D1F8h */ case    6:  		/* andis. R11, R11, 22 */
		/* 8211D1F8h case    6:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R11,0x16);
		/* 8211D1F8h case    6:*/		return 0x8211D1FC;
		  /* 8211D1FCh */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8211D1FCh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8211D1FCh case    7:*/		return 0x8211D200;
		  /* 8211D200h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 8211D200h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211D21C;  }
		/* 8211D200h case    8:*/		return 0x8211D204;
		  /* 8211D204h */ case    9:  		/* lis R11, -32253 */
		/* 8211D204h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211D204h case    9:*/		return 0x8211D208;
		  /* 8211D208h */ case   10:  		/* li R5, 3048 */
		/* 8211D208h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0xBE8);
		/* 8211D208h case   10:*/		return 0x8211D20C;
		  /* 8211D20Ch */ case   11:  		/* addi R6, R11, 8984 */
		/* 8211D20Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2318);
		/* 8211D20Ch case   11:*/		return 0x8211D210;
		  /* 8211D210h */ case   12:  		/* addi R4, R31, 40 */
		/* 8211D210h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 8211D210h case   12:*/		return 0x8211D214;
		  /* 8211D214h */ case   13:  		/* mr R3, R31 */
		/* 8211D214h case   13:*/		regs.R3 = regs.R31;
		/* 8211D214h case   13:*/		return 0x8211D218;
		  /* 8211D218h */ case   14:  		/* bl -14712 */
		/* 8211D218h case   14:*/		regs.LR = 0x8211D21C; return 0x821198A0;
		/* 8211D218h case   14:*/		return 0x8211D21C;
	}
	return 0x8211D21C;
} // Block from 8211D1E0h-8211D21Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211D21Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D21C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D21C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D21C);
		  /* 8211D21Ch */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 8211D21Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8211D21Ch case    0:*/		return 0x8211D220;
		  /* 8211D220h */ case    1:  		/* li R11, 0 */
		/* 8211D220h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211D220h case    1:*/		return 0x8211D224;
		  /* 8211D224h */ case    2:  		/* rlwinm. R9, R10, 0, 19, 19 */
		/* 8211D224h case    2:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R9,regs.R10);
		/* 8211D224h case    2:*/		return 0x8211D228;
		  /* 8211D228h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D228h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211D230;  }
		/* 8211D228h case    3:*/		return 0x8211D22C;
		  /* 8211D22Ch */ case    4:  		/* li R11, 1 */
		/* 8211D22Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211D22Ch case    4:*/		return 0x8211D230;
	}
	return 0x8211D230;
} // Block from 8211D21Ch-8211D230h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211D230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D230);
		  /* 8211D230h */ case    0:  		/* rlwinm. R9, R10, 0, 18, 18 */
		/* 8211D230h case    0:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R9,regs.R10);
		/* 8211D230h case    0:*/		return 0x8211D234;
		  /* 8211D234h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D234h case    1:*/		if ( regs.CR[0].eq ) { return 0x8211D23C;  }
		/* 8211D234h case    1:*/		return 0x8211D238;
		  /* 8211D238h */ case    2:  		/* addi R11, R11, 1 */
		/* 8211D238h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211D238h case    2:*/		return 0x8211D23C;
	}
	return 0x8211D23C;
} // Block from 8211D230h-8211D23Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D23C);
		  /* 8211D23Ch */ case    0:  		/* rlwinm. R9, R10, 0, 17, 17 */
		/* 8211D23Ch case    0:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R9,regs.R10);
		/* 8211D23Ch case    0:*/		return 0x8211D240;
		  /* 8211D240h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D240h case    1:*/		if ( regs.CR[0].eq ) { return 0x8211D248;  }
		/* 8211D240h case    1:*/		return 0x8211D244;
		  /* 8211D244h */ case    2:  		/* addi R11, R11, 1 */
		/* 8211D244h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211D244h case    2:*/		return 0x8211D248;
	}
	return 0x8211D248;
} // Block from 8211D23Ch-8211D248h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D248);
		  /* 8211D248h */ case    0:  		/* rlwinm. R9, R10, 0, 16, 16 */
		/* 8211D248h case    0:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R9,regs.R10);
		/* 8211D248h case    0:*/		return 0x8211D24C;
		  /* 8211D24Ch */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D24Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8211D254;  }
		/* 8211D24Ch case    1:*/		return 0x8211D250;
		  /* 8211D250h */ case    2:  		/* addi R11, R11, 1 */
		/* 8211D250h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211D250h case    2:*/		return 0x8211D254;
	}
	return 0x8211D254;
} // Block from 8211D248h-8211D254h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D254);
		  /* 8211D254h */ case    0:  		/* rlwinm. R10, R10, 0, 15, 15 */
		/* 8211D254h case    0:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R10);
		/* 8211D254h case    0:*/		return 0x8211D258;
		  /* 8211D258h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D258h case    1:*/		if ( regs.CR[0].eq ) { return 0x8211D260;  }
		/* 8211D258h case    1:*/		return 0x8211D25C;
		  /* 8211D25Ch */ case    2:  		/* addi R11, R11, 1 */
		/* 8211D25Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211D25Ch case    2:*/		return 0x8211D260;
	}
	return 0x8211D260;
} // Block from 8211D254h-8211D260h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D260);
		  /* 8211D260h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 8211D260h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D260h case    0:*/		return 0x8211D264;
		  /* 8211D264h */ case    1:  		/* bc 4, CR6_GT, 28 */
		/* 8211D264h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8211D280;  }
		/* 8211D264h case    1:*/		return 0x8211D268;
		  /* 8211D268h */ case    2:  		/* lis R11, -32253 */
		/* 8211D268h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211D268h case    2:*/		return 0x8211D26C;
		  /* 8211D26Ch */ case    3:  		/* li R5, 3083 */
		/* 8211D26Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xC0B);
		/* 8211D26Ch case    3:*/		return 0x8211D270;
		  /* 8211D270h */ case    4:  		/* addi R6, R11, 8956 */
		/* 8211D270h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x22FC);
		/* 8211D270h case    4:*/		return 0x8211D274;
		  /* 8211D274h */ case    5:  		/* addi R4, R31, 40 */
		/* 8211D274h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x28);
		/* 8211D274h case    5:*/		return 0x8211D278;
		  /* 8211D278h */ case    6:  		/* mr R3, R31 */
		/* 8211D278h case    6:*/		regs.R3 = regs.R31;
		/* 8211D278h case    6:*/		return 0x8211D27C;
		  /* 8211D27Ch */ case    7:  		/* bl -14812 */
		/* 8211D27Ch case    7:*/		regs.LR = 0x8211D280; return 0x821198A0;
		/* 8211D27Ch case    7:*/		return 0x8211D280;
	}
	return 0x8211D280;
} // Block from 8211D260h-8211D280h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211D280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D280);
		  /* 8211D280h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 8211D280h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8211D280h case    0:*/		return 0x8211D284;
		  /* 8211D284h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211D284h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211D284h case    1:*/		return 0x8211D288;
		  /* 8211D288h */ case    2:  		/* bc 4, CR6_EQ, 44 */
		/* 8211D288h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D2B4;  }
		/* 8211D288h case    2:*/		return 0x8211D28C;
		  /* 8211D28Ch */ case    3:  		/* lwz R3, <#[R29 + 20]> */
		/* 8211D28Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000014) );
		/* 8211D28Ch case    3:*/		return 0x8211D290;
		  /* 8211D290h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8211D290h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211D290h case    4:*/		return 0x8211D294;
		  /* 8211D294h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 8211D294h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211D2B4;  }
		/* 8211D294h case    5:*/		return 0x8211D298;
		  /* 8211D298h */ case    6:  		/* bl -343856 */
		/* 8211D298h case    6:*/		regs.LR = 0x8211D29C; return 0x820C9368;
		/* 8211D298h case    6:*/		return 0x8211D29C;
		  /* 8211D29Ch */ case    7:  		/* stw R3, <#[R30 + 20]> */
		/* 8211D29Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 8211D29Ch case    7:*/		return 0x8211D2A0;
		  /* 8211D2A0h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8211D2A0h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211D2A0h case    8:*/		return 0x8211D2A4;
		  /* 8211D2A4h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 8211D2A4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8211D2B4;  }
		/* 8211D2A4h case    9:*/		return 0x8211D2A8;
		  /* 8211D2A8h */ case   10:  		/* lis R3, -32761 */
		/* 8211D2A8h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8211D2A8h case   10:*/		return 0x8211D2AC;
		  /* 8211D2ACh */ case   11:  		/* ori R3, R3, 14 */
		/* 8211D2ACh case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8211D2ACh case   11:*/		return 0x8211D2B0;
		  /* 8211D2B0h */ case   12:  		/* b 140 */
		/* 8211D2B0h case   12:*/		return 0x8211D33C;
		/* 8211D2B0h case   12:*/		return 0x8211D2B4;
	}
	return 0x8211D2B4;
} // Block from 8211D280h-8211D2B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211D2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D2B4);
		  /* 8211D2B4h */ case    0:  		/* lwz R11, <#[R30 + 28]> */
		/* 8211D2B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D2B4h case    0:*/		return 0x8211D2B8;
		  /* 8211D2B8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211D2B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211D2B8h case    1:*/		return 0x8211D2BC;
		  /* 8211D2BCh */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8211D2BCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D2D8;  }
		/* 8211D2BCh case    2:*/		return 0x8211D2C0;
		  /* 8211D2C0h */ case    3:  		/* lwz R3, <#[R29 + 28]> */
		/* 8211D2C0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000001C) );
		/* 8211D2C0h case    3:*/		return 0x8211D2C4;
		  /* 8211D2C4h */ case    4:  		/* bl -343900 */
		/* 8211D2C4h case    4:*/		regs.LR = 0x8211D2C8; return 0x820C9368;
		/* 8211D2C4h case    4:*/		return 0x8211D2C8;
		  /* 8211D2C8h */ case    5:  		/* stw R3, <#[R30 + 28]> */
		/* 8211D2C8h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D2C8h case    5:*/		return 0x8211D2CC;
		  /* 8211D2CCh */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8211D2CCh case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211D2CCh case    6:*/		return 0x8211D2D0;
		  /* 8211D2D0h */ case    7:  		/* bc 4, CR0_EQ, 104 */
		/* 8211D2D0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8211D338;  }
		/* 8211D2D0h case    7:*/		return 0x8211D2D4;
		  /* 8211D2D4h */ case    8:  		/* b -44 */
		/* 8211D2D4h case    8:*/		return 0x8211D2A8;
		/* 8211D2D4h case    8:*/		return 0x8211D2D8;
	}
	return 0x8211D2D8;
} // Block from 8211D2B4h-8211D2D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211D2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D2D8);
		  /* 8211D2D8h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 8211D2D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 8211D2D8h case    0:*/		return 0x8211D2DC;
		  /* 8211D2DCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211D2DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211D2DCh case    1:*/		return 0x8211D2E0;
		  /* 8211D2E0h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8211D2E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211D338;  }
		/* 8211D2E0h case    2:*/		return 0x8211D2E4;
		  /* 8211D2E4h */ case    3:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 8211D2E4h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 8211D2E4h case    3:*/		return 0x8211D2E8;
		  /* 8211D2E8h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 8211D2E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8211D2E8h case    4:*/		return 0x8211D2EC;
		  /* 8211D2ECh */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211D2ECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211D2ECh case    5:*/		return 0x8211D2F0;
		  /* 8211D2F0h */ case    6:  		/* mtspr CTR, R11 */
		/* 8211D2F0h case    6:*/		regs.CTR = regs.R11;
		/* 8211D2F0h case    6:*/		return 0x8211D2F4;
		  /* 8211D2F4h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8211D2F4h case    7:*/		if ( 1 ) { regs.LR = 0x8211D2F8; return (uint32)regs.CTR; }
		/* 8211D2F4h case    7:*/		return 0x8211D2F8;
		  /* 8211D2F8h */ case    8:  		/* or. R31, R3, R3 */
		/* 8211D2F8h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211D2F8h case    8:*/		return 0x8211D2FC;
		  /* 8211D2FCh */ case    9:  		/* bc 12, CR0_EQ, -84 */
		/* 8211D2FCh case    9:*/		if ( regs.CR[0].eq ) { return 0x8211D2A8;  }
		/* 8211D2FCh case    9:*/		return 0x8211D300;
		  /* 8211D300h */ case   10:  		/* li R3, 20 */
		/* 8211D300h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211D300h case   10:*/		return 0x8211D304;
		  /* 8211D304h */ case   11:  		/* bl -344284 */
		/* 8211D304h case   11:*/		regs.LR = 0x8211D308; return 0x820C9228;
		/* 8211D304h case   11:*/		return 0x8211D308;
		  /* 8211D308h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 8211D308h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211D308h case   12:*/		return 0x8211D30C;
		  /* 8211D30Ch */ case   13:  		/* bc 12, CR0_EQ, 28 */
		/* 8211D30Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x8211D328;  }
		/* 8211D30Ch case   13:*/		return 0x8211D310;
		  /* 8211D310h */ case   14:  		/* lis R11, -32253 */
		/* 8211D310h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211D310h case   14:*/		return 0x8211D314;
		  /* 8211D314h */ case   15:  		/* lwz R4, <#[R30 + 28]> */
		/* 8211D314h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D314h case   15:*/		return 0x8211D318;
		  /* 8211D318h */ case   16:  		/* mr R5, R31 */
		/* 8211D318h case   16:*/		regs.R5 = regs.R31;
		/* 8211D318h case   16:*/		return 0x8211D31C;
		  /* 8211D31Ch */ case   17:  		/* addi R6, R11, 7880 */
		/* 8211D31Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1EC8);
		/* 8211D31Ch case   17:*/		return 0x8211D320;
		  /* 8211D320h */ case   18:  		/* bl -343856 */
		/* 8211D320h case   18:*/		regs.LR = 0x8211D324; return 0x820C93F0;
		/* 8211D320h case   18:*/		return 0x8211D324;
		  /* 8211D324h */ case   19:  		/* b 8 */
		/* 8211D324h case   19:*/		return 0x8211D32C;
		/* 8211D324h case   19:*/		return 0x8211D328;
	}
	return 0x8211D328;
} // Block from 8211D2D8h-8211D328h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211D328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D328);
		  /* 8211D328h */ case    0:  		/* li R3, 0 */
		/* 8211D328h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211D328h case    0:*/		return 0x8211D32C;
	}
	return 0x8211D32C;
} // Block from 8211D328h-8211D32Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211D32Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D32C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D32C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D32C);
		  /* 8211D32Ch */ case    0:  		/* stw R3, <#[R30 + 28]> */
		/* 8211D32Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D32Ch case    0:*/		return 0x8211D330;
		  /* 8211D330h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211D330h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211D330h case    1:*/		return 0x8211D334;
		  /* 8211D334h */ case    2:  		/* bc 12, CR6_EQ, -140 */
		/* 8211D334h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211D2A8;  }
		/* 8211D334h case    2:*/		return 0x8211D338;
	}
	return 0x8211D338;
} // Block from 8211D32Ch-8211D338h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D338);
		  /* 8211D338h */ case    0:  		/* li R3, 0 */
		/* 8211D338h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211D338h case    0:*/		return 0x8211D33C;
	}
	return 0x8211D33C;
} // Block from 8211D338h-8211D33Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211D33Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D33C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D33C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D33C);
		  /* 8211D33Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8211D33Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211D33Ch case    0:*/		return 0x8211D340;
		  /* 8211D340h */ case    1:  		/* b -573588 */
		/* 8211D340h case    1:*/		return 0x820912AC;
		/* 8211D340h case    1:*/		return 0x8211D344;
		  /* 8211D344h */ case    2:  		/* nop */
		/* 8211D344h case    2:*/		cpu::op::nop();
		/* 8211D344h case    2:*/		return 0x8211D348;
	}
	return 0x8211D348;
} // Block from 8211D33Ch-8211D348h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D348);
		  /* 8211D348h */ case    0:  		/* mfspr R12, LR */
		/* 8211D348h case    0:*/		regs.R12 = regs.LR;
		/* 8211D348h case    0:*/		return 0x8211D34C;
		  /* 8211D34Ch */ case    1:  		/* bl -573696 */
		/* 8211D34Ch case    1:*/		regs.LR = 0x8211D350; return 0x8209124C;
		/* 8211D34Ch case    1:*/		return 0x8211D350;
		  /* 8211D350h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8211D350h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8211D350h case    2:*/		return 0x8211D354;
		  /* 8211D354h */ case    3:  		/* mr R25, R3 */
		/* 8211D354h case    3:*/		regs.R25 = regs.R3;
		/* 8211D354h case    3:*/		return 0x8211D358;
		  /* 8211D358h */ case    4:  		/* mr R27, R4 */
		/* 8211D358h case    4:*/		regs.R27 = regs.R4;
		/* 8211D358h case    4:*/		return 0x8211D35C;
		  /* 8211D35Ch */ case    5:  		/* mr R26, R5 */
		/* 8211D35Ch case    5:*/		regs.R26 = regs.R5;
		/* 8211D35Ch case    5:*/		return 0x8211D360;
		  /* 8211D360h */ case    6:  		/* mr R29, R6 */
		/* 8211D360h case    6:*/		regs.R29 = regs.R6;
		/* 8211D360h case    6:*/		return 0x8211D364;
		  /* 8211D364h */ case    7:  		/* cmpwi CR6, R6, 0 */
		/* 8211D364h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 8211D364h case    7:*/		return 0x8211D368;
		  /* 8211D368h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 8211D368h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211D390;  }
		/* 8211D368h case    8:*/		return 0x8211D36C;
		  /* 8211D36Ch */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 8211D36Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211D36Ch case    9:*/		return 0x8211D370;
		  /* 8211D370h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 8211D370h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211D37C;  }
		/* 8211D370h case   10:*/		return 0x8211D374;
		  /* 8211D374h */ case   11:  		/* li R3, 1 */
		/* 8211D374h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8211D374h case   11:*/		return 0x8211D378;
		  /* 8211D378h */ case   12:  		/* b 16 */
		/* 8211D378h case   12:*/		return 0x8211D388;
		/* 8211D378h case   12:*/		return 0x8211D37C;
	}
	return 0x8211D37C;
} // Block from 8211D348h-8211D37Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211D37Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D37C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D37C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D37C);
		  /* 8211D37Ch */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8211D37Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211D37Ch case    0:*/		return 0x8211D380;
		  /* 8211D380h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 8211D380h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D3A4;  }
		/* 8211D380h case    1:*/		return 0x8211D384;
		  /* 8211D384h */ case    2:  		/* li R3, 0 */
		/* 8211D384h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211D384h case    2:*/		return 0x8211D388;
	}
	return 0x8211D388;
} // Block from 8211D37Ch-8211D388h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211D388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D388);
		  /* 8211D388h */ case    0:  		/* addi R1, R1, 240 */
		/* 8211D388h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8211D388h case    0:*/		return 0x8211D38C;
		  /* 8211D38Ch */ case    1:  		/* b -573680 */
		/* 8211D38Ch case    1:*/		return 0x8209129C;
		/* 8211D38Ch case    1:*/		return 0x8211D390;
	}
	return 0x8211D390;
} // Block from 8211D388h-8211D390h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211D390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D390);
		  /* 8211D390h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8211D390h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211D390h case    0:*/		return 0x8211D394;
		  /* 8211D394h */ case    1:  		/* bc 4, CR6_EQ, -24 */
		/* 8211D394h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D37C;  }
		/* 8211D394h case    1:*/		return 0x8211D398;
		  /* 8211D398h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 8211D398h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211D398h case    2:*/		return 0x8211D39C;
		  /* 8211D39Ch */ case    3:  		/* bc 4, CR6_EQ, -24 */
		/* 8211D39Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211D384;  }
		/* 8211D39Ch case    3:*/		return 0x8211D3A0;
		  /* 8211D3A0h */ case    4:  		/* b -44 */
		/* 8211D3A0h case    4:*/		return 0x8211D374;
		/* 8211D3A0h case    4:*/		return 0x8211D3A4;
	}
	return 0x8211D3A4;
} // Block from 8211D390h-8211D3A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211D3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D3A4);
		  /* 8211D3A4h */ case    0:  		/* addi R3, R1, 128 */
		/* 8211D3A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8211D3A4h case    0:*/		return 0x8211D3A8;
		  /* 8211D3A8h */ case    1:  		/* bl -337768 */
		/* 8211D3A8h case    1:*/		regs.LR = 0x8211D3AC; return 0x820CAC40;
		/* 8211D3A8h case    1:*/		return 0x8211D3AC;
		  /* 8211D3ACh */ case    2:  		/* addi R3, R1, 80 */
		/* 8211D3ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8211D3ACh case    2:*/		return 0x8211D3B0;
		  /* 8211D3B0h */ case    3:  		/* bl -337776 */
		/* 8211D3B0h case    3:*/		regs.LR = 0x8211D3B4; return 0x820CAC40;
		/* 8211D3B0h case    3:*/		return 0x8211D3B4;
		  /* 8211D3B4h */ case    4:  		/* lwz R11, <#[R27 + 4]> */
		/* 8211D3B4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 8211D3B4h case    4:*/		return 0x8211D3B8;
		  /* 8211D3B8h */ case    5:  		/* li R30, 4 */
		/* 8211D3B8h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 8211D3B8h case    5:*/		return 0x8211D3BC;
		  /* 8211D3BCh */ case    6:  		/* li R31, 1 */
		/* 8211D3BCh case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 8211D3BCh case    6:*/		return 0x8211D3C0;
		  /* 8211D3C0h */ case    7:  		/* cmpwi CR6, R11, 9 */
		/* 8211D3C0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211D3C0h case    7:*/		return 0x8211D3C4;
		  /* 8211D3C4h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 8211D3C4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211D3D0;  }
		/* 8211D3C4h case    8:*/		return 0x8211D3C8;
		  /* 8211D3C8h */ case    9:  		/* mr R28, R27 */
		/* 8211D3C8h case    9:*/		regs.R28 = regs.R27;
		/* 8211D3C8h case    9:*/		return 0x8211D3CC;
		  /* 8211D3CCh */ case   10:  		/* b 64 */
		/* 8211D3CCh case   10:*/		return 0x8211D40C;
		/* 8211D3CCh case   10:*/		return 0x8211D3D0;
	}
	return 0x8211D3D0;
} // Block from 8211D3A4h-8211D3D0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211D3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D3D0);
		  /* 8211D3D0h */ case    0:  		/* stw R30, <#[R1 + 144]> */
		/* 8211D3D0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 8211D3D0h case    0:*/		return 0x8211D3D4;
		  /* 8211D3D4h */ case    1:  		/* mr R4, R27 */
		/* 8211D3D4h case    1:*/		regs.R4 = regs.R27;
		/* 8211D3D4h case    1:*/		return 0x8211D3D8;
		  /* 8211D3D8h */ case    2:  		/* stw R31, <#[R1 + 156]> */
		/* 8211D3D8h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000009C) );
		/* 8211D3D8h case    2:*/		return 0x8211D3DC;
		  /* 8211D3DCh */ case    3:  		/* mr R3, R25 */
		/* 8211D3DCh case    3:*/		regs.R3 = regs.R25;
		/* 8211D3DCh case    3:*/		return 0x8211D3E0;
		  /* 8211D3E0h */ case    4:  		/* addi R28, R1, 128 */
		/* 8211D3E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x80);
		/* 8211D3E0h case    4:*/		return 0x8211D3E4;
		  /* 8211D3E4h */ case    5:  		/* bl -12308 */
		/* 8211D3E4h case    5:*/		regs.LR = 0x8211D3E8; return 0x8211A3D0;
		/* 8211D3E4h case    5:*/		return 0x8211D3E8;
		  /* 8211D3E8h */ case    6:  		/* stw R3, <#[R1 + 160]> */
		/* 8211D3E8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000A0) );
		/* 8211D3E8h case    6:*/		return 0x8211D3EC;
		  /* 8211D3ECh */ case    7:  		/* cmpwi CR6, R29, 0 */
		/* 8211D3ECh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8211D3ECh case    7:*/		return 0x8211D3F0;
		  /* 8211D3F0h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 8211D3F0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211D40C;  }
		/* 8211D3F0h case    8:*/		return 0x8211D3F4;
		  /* 8211D3F4h */ case    9:  		/* mr R4, R27 */
		/* 8211D3F4h case    9:*/		regs.R4 = regs.R27;
		/* 8211D3F4h case    9:*/		return 0x8211D3F8;
		  /* 8211D3F8h */ case   10:  		/* mr R3, R25 */
		/* 8211D3F8h case   10:*/		regs.R3 = regs.R25;
		/* 8211D3F8h case   10:*/		return 0x8211D3FC;
		  /* 8211D3FCh */ case   11:  		/* bl -12540 */
		/* 8211D3FCh case   11:*/		regs.LR = 0x8211D400; return 0x8211A300;
		/* 8211D3FCh case   11:*/		return 0x8211D400;
		  /* 8211D400h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8211D400h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D400h case   12:*/		return 0x8211D404;
		  /* 8211D404h */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D404h case   13:*/		if ( regs.CR[0].eq ) { return 0x8211D40C;  }
		/* 8211D404h case   13:*/		return 0x8211D408;
		  /* 8211D408h */ case   14:  		/* stw R31, <#[R1 + 144]> */
		/* 8211D408h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000090) );
		/* 8211D408h case   14:*/		return 0x8211D40C;
	}
	return 0x8211D40C;
} // Block from 8211D3D0h-8211D40Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211D40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D40C);
		  /* 8211D40Ch */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 8211D40Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8211D40Ch case    0:*/		return 0x8211D410;
		  /* 8211D410h */ case    1:  		/* cmpwi CR6, R11, 9 */
		/* 8211D410h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211D410h case    1:*/		return 0x8211D414;
		  /* 8211D414h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8211D414h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D420;  }
		/* 8211D414h case    2:*/		return 0x8211D418;
		  /* 8211D418h */ case    3:  		/* mr R30, R26 */
		/* 8211D418h case    3:*/		regs.R30 = regs.R26;
		/* 8211D418h case    3:*/		return 0x8211D41C;
		  /* 8211D41Ch */ case    4:  		/* b 64 */
		/* 8211D41Ch case    4:*/		return 0x8211D45C;
		/* 8211D41Ch case    4:*/		return 0x8211D420;
	}
	return 0x8211D420;
} // Block from 8211D40Ch-8211D420h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211D420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D420);
		  /* 8211D420h */ case    0:  		/* stw R30, <#[R1 + 96]> */
		/* 8211D420h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 8211D420h case    0:*/		return 0x8211D424;
		  /* 8211D424h */ case    1:  		/* mr R4, R26 */
		/* 8211D424h case    1:*/		regs.R4 = regs.R26;
		/* 8211D424h case    1:*/		return 0x8211D428;
		  /* 8211D428h */ case    2:  		/* stw R31, <#[R1 + 108]> */
		/* 8211D428h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8211D428h case    2:*/		return 0x8211D42C;
		  /* 8211D42Ch */ case    3:  		/* mr R3, R25 */
		/* 8211D42Ch case    3:*/		regs.R3 = regs.R25;
		/* 8211D42Ch case    3:*/		return 0x8211D430;
		  /* 8211D430h */ case    4:  		/* addi R30, R1, 80 */
		/* 8211D430h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x50);
		/* 8211D430h case    4:*/		return 0x8211D434;
		  /* 8211D434h */ case    5:  		/* bl -12388 */
		/* 8211D434h case    5:*/		regs.LR = 0x8211D438; return 0x8211A3D0;
		/* 8211D434h case    5:*/		return 0x8211D438;
		  /* 8211D438h */ case    6:  		/* stw R3, <#[R1 + 112]> */
		/* 8211D438h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 8211D438h case    6:*/		return 0x8211D43C;
		  /* 8211D43Ch */ case    7:  		/* cmpwi CR6, R29, 0 */
		/* 8211D43Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8211D43Ch case    7:*/		return 0x8211D440;
		  /* 8211D440h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 8211D440h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211D45C;  }
		/* 8211D440h case    8:*/		return 0x8211D444;
		  /* 8211D444h */ case    9:  		/* mr R4, R26 */
		/* 8211D444h case    9:*/		regs.R4 = regs.R26;
		/* 8211D444h case    9:*/		return 0x8211D448;
		  /* 8211D448h */ case   10:  		/* mr R3, R25 */
		/* 8211D448h case   10:*/		regs.R3 = regs.R25;
		/* 8211D448h case   10:*/		return 0x8211D44C;
		  /* 8211D44Ch */ case   11:  		/* bl -12620 */
		/* 8211D44Ch case   11:*/		regs.LR = 0x8211D450; return 0x8211A300;
		/* 8211D44Ch case   11:*/		return 0x8211D450;
		  /* 8211D450h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8211D450h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D450h case   12:*/		return 0x8211D454;
		  /* 8211D454h */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D454h case   13:*/		if ( regs.CR[0].eq ) { return 0x8211D45C;  }
		/* 8211D454h case   13:*/		return 0x8211D458;
		  /* 8211D458h */ case   14:  		/* stw R31, <#[R1 + 96]> */
		/* 8211D458h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 8211D458h case   14:*/		return 0x8211D45C;
	}
	return 0x8211D45C;
} // Block from 8211D420h-8211D45Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211D45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D45C);
		  /* 8211D45Ch */ case    0:  		/* lwz R10, <#[R28 + 16]> */
		/* 8211D45Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 8211D45Ch case    0:*/		return 0x8211D460;
		  /* 8211D460h */ case    1:  		/* cmpwi CR6, R10, 4 */
		/* 8211D460h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 8211D460h case    1:*/		return 0x8211D464;
		  /* 8211D464h */ case    2:  		/* bc 12, CR6_EQ, 536 */
		/* 8211D464h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211D67C;  }
		/* 8211D464h case    2:*/		return 0x8211D468;
		  /* 8211D468h */ case    3:  		/* lwz R11, <#[R30 + 16]> */
		/* 8211D468h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8211D468h case    3:*/		return 0x8211D46C;
		  /* 8211D46Ch */ case    4:  		/* cmpwi CR6, R11, 4 */
		/* 8211D46Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8211D46Ch case    4:*/		return 0x8211D470;
		  /* 8211D470h */ case    5:  		/* bc 12, CR6_EQ, 524 */
		/* 8211D470h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211D67C;  }
		/* 8211D470h case    5:*/		return 0x8211D474;
		  /* 8211D474h */ case    6:  		/* cmpwi CR6, R10, 0 */
		/* 8211D474h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8211D474h case    6:*/		return 0x8211D478;
		  /* 8211D478h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 8211D478h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211D488;  }
		/* 8211D478h case    7:*/		return 0x8211D47C;
		  /* 8211D47Ch */ case    8:  		/* cmpwi CR6, R11, 3 */
		/* 8211D47Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211D47Ch case    8:*/		return 0x8211D480;
		  /* 8211D480h */ case    9:  		/* bc 4, CR6_EQ, -268 */
		/* 8211D480h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D480h case    9:*/		return 0x8211D484;
		  /* 8211D484h */ case   10:  		/* b -256 */
		/* 8211D484h case   10:*/		return 0x8211D384;
		/* 8211D484h case   10:*/		return 0x8211D488;
	}
	return 0x8211D488;
} // Block from 8211D45Ch-8211D488h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211D488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D488);
		  /* 8211D488h */ case    0:  		/* cmpwi CR6, R10, 1 */
		/* 8211D488h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8211D488h case    0:*/		return 0x8211D48C;
		  /* 8211D48Ch */ case    1:  		/* bc 4, CR6_EQ, 136 */
		/* 8211D48Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D514;  }
		/* 8211D48Ch case    1:*/		return 0x8211D490;
		  /* 8211D490h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8211D490h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211D490h case    2:*/		return 0x8211D494;
		  /* 8211D494h */ case    3:  		/* bc 12, CR6_EQ, -288 */
		/* 8211D494h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D494h case    3:*/		return 0x8211D498;
		  /* 8211D498h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 8211D498h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211D498h case    4:*/		return 0x8211D49C;
		  /* 8211D49Ch */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 8211D49Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211D4B4;  }
		/* 8211D49Ch case    5:*/		return 0x8211D4A0;
		  /* 8211D4A0h */ case    6:  		/* lwz R11, <#[R28 + 32]> */
		/* 8211D4A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8211D4A0h case    6:*/		return 0x8211D4A4;
		  /* 8211D4A4h */ case    7:  		/* lwz R10, <#[R30 + 32]> */
		/* 8211D4A4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D4A4h case    7:*/		return 0x8211D4A8;
		  /* 8211D4A8h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 8211D4A8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8211D4A8h case    8:*/		return 0x8211D4AC;
		  /* 8211D4ACh */ case    9:  		/* bc 4, CR6_GT, -312 */
		/* 8211D4ACh case    9:*/		if ( !regs.CR[6].gt ) { return 0x8211D374;  }
		/* 8211D4ACh case    9:*/		return 0x8211D4B0;
		  /* 8211D4B0h */ case   10:  		/* b -300 */
		/* 8211D4B0h case   10:*/		return 0x8211D384;
		/* 8211D4B0h case   10:*/		return 0x8211D4B4;
	}
	return 0x8211D4B4;
} // Block from 8211D488h-8211D4B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211D4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D4B4);
		  /* 8211D4B4h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 8211D4B4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211D4B4h case    0:*/		return 0x8211D4B8;
		  /* 8211D4B8h */ case    1:  		/* bc 4, CR6_EQ, -60 */
		/* 8211D4B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D47C;  }
		/* 8211D4B8h case    1:*/		return 0x8211D4BC;
		  /* 8211D4BCh */ case    2:  		/* lwz R10, <#[R30 + 28]> */
		/* 8211D4BCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D4BCh case    2:*/		return 0x8211D4C0;
		  /* 8211D4C0h */ case    3:  		/* cmplwi CR6, R10, 1 */
		/* 8211D4C0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D4C0h case    3:*/		return 0x8211D4C4;
		  /* 8211D4C4h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8211D4C4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211D4D8;  }
		/* 8211D4C4h case    4:*/		return 0x8211D4C8;
		  /* 8211D4C8h */ case    5:  		/* lwz R11, <#[R28 + 32]> */
		/* 8211D4C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8211D4C8h case    5:*/		return 0x8211D4CC;
		  /* 8211D4CCh */ case    6:  		/* lwz R9, <#[R30 + 32]> */
		/* 8211D4CCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D4CCh case    6:*/		return 0x8211D4D0;
		  /* 8211D4D0h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 8211D4D0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211D4D0h case    7:*/		return 0x8211D4D4;
		  /* 8211D4D4h */ case    8:  		/* bc 12, CR6_GT, -336 */
		/* 8211D4D4h case    8:*/		if ( regs.CR[6].gt ) { return 0x8211D384;  }
		/* 8211D4D4h case    8:*/		return 0x8211D4D8;
	}
	return 0x8211D4D8;
} // Block from 8211D4B4h-8211D4D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211D4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D4D8);
		  /* 8211D4D8h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211D4D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D4D8h case    0:*/		return 0x8211D4DC;
		  /* 8211D4DCh */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8211D4DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D4DCh case    1:*/		return 0x8211D4E0;
		  /* 8211D4E0h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8211D4E0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D4F0;  }
		/* 8211D4E0h case    2:*/		return 0x8211D4E4;
		  /* 8211D4E4h */ case    3:  		/* lwz R9, <#[R28 + 32]> */
		/* 8211D4E4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000020) );
		/* 8211D4E4h case    3:*/		return 0x8211D4E8;
		  /* 8211D4E8h */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 8211D4E8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8211D4E8h case    4:*/		return 0x8211D4EC;
		  /* 8211D4ECh */ case    5:  		/* bc 12, CR6_GT, -360 */
		/* 8211D4ECh case    5:*/		if ( regs.CR[6].gt ) { return 0x8211D384;  }
		/* 8211D4ECh case    5:*/		return 0x8211D4F0;
	}
	return 0x8211D4F0;
} // Block from 8211D4D8h-8211D4F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D4F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D4F0);
		  /* 8211D4F0h */ case    0:  		/* cmplwi CR6, R10, 1 */
		/* 8211D4F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D4F0h case    0:*/		return 0x8211D4F4;
		  /* 8211D4F4h */ case    1:  		/* bc 12, CR6_EQ, -384 */
		/* 8211D4F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D4F4h case    1:*/		return 0x8211D4F8;
		  /* 8211D4F8h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8211D4F8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D4F8h case    2:*/		return 0x8211D4FC;
		  /* 8211D4FCh */ case    3:  		/* bc 12, CR6_EQ, -392 */
		/* 8211D4FCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D4FCh case    3:*/		return 0x8211D500;
		  /* 8211D500h */ case    4:  		/* lwz R9, <#[R28 + 32]> */
		/* 8211D500h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000020) );
		/* 8211D500h case    4:*/		return 0x8211D504;
		  /* 8211D504h */ case    5:  		/* mullw R11, R10, R11 */
		/* 8211D504h case    5:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8211D504h case    5:*/		return 0x8211D508;
		  /* 8211D508h */ case    6:  		/* cmplw CR6, R11, R9 */
		/* 8211D508h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211D508h case    6:*/		return 0x8211D50C;
		  /* 8211D50Ch */ case    7:  		/* bc 12, CR6_EQ, -408 */
		/* 8211D50Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D50Ch case    7:*/		return 0x8211D510;
		  /* 8211D510h */ case    8:  		/* b -396 */
		/* 8211D510h case    8:*/		return 0x8211D384;
		/* 8211D510h case    8:*/		return 0x8211D514;
	}
	return 0x8211D514;
} // Block from 8211D4F0h-8211D514h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211D514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D514);
		  /* 8211D514h */ case    0:  		/* cmpwi CR6, R10, 2 */
		/* 8211D514h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 8211D514h case    0:*/		return 0x8211D518;
		  /* 8211D518h */ case    1:  		/* bc 4, CR6_EQ, 124 */
		/* 8211D518h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D594;  }
		/* 8211D518h case    1:*/		return 0x8211D51C;
		  /* 8211D51Ch */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8211D51Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211D51Ch case    2:*/		return 0x8211D520;
		  /* 8211D520h */ case    3:  		/* bc 12, CR6_EQ, -428 */
		/* 8211D520h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D520h case    3:*/		return 0x8211D524;
		  /* 8211D524h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 8211D524h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211D524h case    4:*/		return 0x8211D528;
		  /* 8211D528h */ case    5:  		/* bc 4, CR6_EQ, 80 */
		/* 8211D528h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211D578;  }
		/* 8211D528h case    5:*/		return 0x8211D52C;
		  /* 8211D52Ch */ case    6:  		/* lwz R10, <#[R28 + 28]> */
		/* 8211D52Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000001C) );
		/* 8211D52Ch case    6:*/		return 0x8211D530;
		  /* 8211D530h */ case    7:  		/* cmplwi CR6, R10, 1 */
		/* 8211D530h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D530h case    7:*/		return 0x8211D534;
		  /* 8211D534h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 8211D534h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211D548;  }
		/* 8211D534h case    8:*/		return 0x8211D538;
		  /* 8211D538h */ case    9:  		/* lwz R11, <#[R28 + 32]> */
		/* 8211D538h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8211D538h case    9:*/		return 0x8211D53C;
		  /* 8211D53Ch */ case   10:  		/* lwz R9, <#[R30 + 32]> */
		/* 8211D53Ch case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D53Ch case   10:*/		return 0x8211D540;
		  /* 8211D540h */ case   11:  		/* cmplw CR6, R11, R9 */
		/* 8211D540h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211D540h case   11:*/		return 0x8211D544;
		  /* 8211D544h */ case   12:  		/* bc 12, CR6_GT, -448 */
		/* 8211D544h case   12:*/		if ( regs.CR[6].gt ) { return 0x8211D384;  }
		/* 8211D544h case   12:*/		return 0x8211D548;
	}
	return 0x8211D548;
} // Block from 8211D514h-8211D548h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211D548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D548);
		  /* 8211D548h */ case    0:  		/* lwz R11, <#[R28 + 32]> */
		/* 8211D548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8211D548h case    0:*/		return 0x8211D54C;
		  /* 8211D54Ch */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8211D54Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D54Ch case    1:*/		return 0x8211D550;
		  /* 8211D550h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8211D550h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D560;  }
		/* 8211D550h case    2:*/		return 0x8211D554;
		  /* 8211D554h */ case    3:  		/* lwz R9, <#[R30 + 32]> */
		/* 8211D554h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D554h case    3:*/		return 0x8211D558;
		  /* 8211D558h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 8211D558h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8211D558h case    4:*/		return 0x8211D55C;
		  /* 8211D55Ch */ case    5:  		/* bc 12, CR6_GT, -472 */
		/* 8211D55Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x8211D384;  }
		/* 8211D55Ch case    5:*/		return 0x8211D560;
	}
	return 0x8211D560;
} // Block from 8211D548h-8211D560h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D560);
		  /* 8211D560h */ case    0:  		/* cmplwi CR6, R10, 1 */
		/* 8211D560h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D560h case    0:*/		return 0x8211D564;
		  /* 8211D564h */ case    1:  		/* bc 12, CR6_EQ, -496 */
		/* 8211D564h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D564h case    1:*/		return 0x8211D568;
		  /* 8211D568h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8211D568h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D568h case    2:*/		return 0x8211D56C;
		  /* 8211D56Ch */ case    3:  		/* bc 12, CR6_EQ, -504 */
		/* 8211D56Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D56Ch case    3:*/		return 0x8211D570;
		  /* 8211D570h */ case    4:  		/* lwz R9, <#[R30 + 32]> */
		/* 8211D570h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D570h case    4:*/		return 0x8211D574;
		  /* 8211D574h */ case    5:  		/* b -112 */
		/* 8211D574h case    5:*/		return 0x8211D504;
		/* 8211D574h case    5:*/		return 0x8211D578;
	}
	return 0x8211D578;
} // Block from 8211D560h-8211D578h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D578);
		  /* 8211D578h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 8211D578h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211D578h case    0:*/		return 0x8211D57C;
		  /* 8211D57Ch */ case    1:  		/* bc 4, CR6_EQ, -256 */
		/* 8211D57Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D47C;  }
		/* 8211D57Ch case    1:*/		return 0x8211D580;
		  /* 8211D580h */ case    2:  		/* lwz R11, <#[R28 + 28]> */
		/* 8211D580h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8211D580h case    2:*/		return 0x8211D584;
		  /* 8211D584h */ case    3:  		/* lwz R10, <#[R30 + 28]> */
		/* 8211D584h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D584h case    3:*/		return 0x8211D588;
		  /* 8211D588h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8211D588h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8211D588h case    4:*/		return 0x8211D58C;
		  /* 8211D58Ch */ case    5:  		/* bc 12, CR6_GT, -520 */
		/* 8211D58Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x8211D384;  }
		/* 8211D58Ch case    5:*/		return 0x8211D590;
		  /* 8211D590h */ case    6:  		/* b -240 */
		/* 8211D590h case    6:*/		return 0x8211D4A0;
		/* 8211D590h case    6:*/		return 0x8211D594;
	}
	return 0x8211D594;
} // Block from 8211D578h-8211D594h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211D594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D594);
		  /* 8211D594h */ case    0:  		/* cmpwi CR6, R10, 3 */
		/* 8211D594h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8211D594h case    0:*/		return 0x8211D598;
		  /* 8211D598h */ case    1:  		/* bc 4, CR6_EQ, -548 */
		/* 8211D598h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D598h case    1:*/		return 0x8211D59C;
		  /* 8211D59Ch */ case    2:  		/* cmpwi CR6, R11, 3 */
		/* 8211D59Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211D59Ch case    2:*/		return 0x8211D5A0;
		  /* 8211D5A0h */ case    3:  		/* bc 4, CR6_EQ, -540 */
		/* 8211D5A0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211D384;  }
		/* 8211D5A0h case    3:*/		return 0x8211D5A4;
		  /* 8211D5A4h */ case    4:  		/* lwz R10, <#[R30 + 20]> */
		/* 8211D5A4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 8211D5A4h case    4:*/		return 0x8211D5A8;
		  /* 8211D5A8h */ case    5:  		/* cmpwi CR6, R10, 22 */
		/* 8211D5A8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000016);
		/* 8211D5A8h case    5:*/		return 0x8211D5AC;
		  /* 8211D5ACh */ case    6:  		/* bc 12, CR6_EQ, -568 */
		/* 8211D5ACh case    6:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D5ACh case    6:*/		return 0x8211D5B0;
		  /* 8211D5B0h */ case    7:  		/* lwz R11, <#[R28 + 20]> */
		/* 8211D5B0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8211D5B0h case    7:*/		return 0x8211D5B4;
		  /* 8211D5B4h */ case    8:  		/* cmpwi CR6, R11, 47 */
		/* 8211D5B4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002F);
		/* 8211D5B4h case    8:*/		return 0x8211D5B8;
		  /* 8211D5B8h */ case    9:  		/* bc 12, CR6_LT, 36 */
		/* 8211D5B8h case    9:*/		if ( regs.CR[6].lt ) { return 0x8211D5DC;  }
		/* 8211D5B8h case    9:*/		return 0x8211D5BC;
		  /* 8211D5BCh */ case   10:  		/* cmpwi CR6, R11, 50 */
		/* 8211D5BCh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 8211D5BCh case   10:*/		return 0x8211D5C0;
		  /* 8211D5C0h */ case   11:  		/* bc 12, CR6_GT, 28 */
		/* 8211D5C0h case   11:*/		if ( regs.CR[6].gt ) { return 0x8211D5DC;  }
		/* 8211D5C0h case   11:*/		return 0x8211D5C4;
		  /* 8211D5C4h */ case   12:  		/* cmpw CR6, R11, R10 */
		/* 8211D5C4h case   12:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8211D5C4h case   12:*/		return 0x8211D5C8;
		  /* 8211D5C8h */ case   13:  		/* bc 12, CR6_EQ, -596 */
		/* 8211D5C8h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D5C8h case   13:*/		return 0x8211D5CC;
		  /* 8211D5CCh */ case   14:  		/* addi R11, R10, -47 */
		/* 8211D5CCh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFD1);
		/* 8211D5CCh case   14:*/		return 0x8211D5D0;
		  /* 8211D5D0h */ case   15:  		/* cntlzw R11, R11 */
		/* 8211D5D0h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8211D5D0h case   15:*/		return 0x8211D5D4;
		  /* 8211D5D4h */ case   16:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8211D5D4h case   16:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8211D5D4h case   16:*/		return 0x8211D5D8;
		  /* 8211D5D8h */ case   17:  		/* b -592 */
		/* 8211D5D8h case   17:*/		return 0x8211D388;
		/* 8211D5D8h case   17:*/		return 0x8211D5DC;
	}
	return 0x8211D5DC;
} // Block from 8211D594h-8211D5DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211D5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D5DC);
		  /* 8211D5DCh */ case    0:  		/* cmpwi CR6, R10, 24 */
		/* 8211D5DCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000018);
		/* 8211D5DCh case    0:*/		return 0x8211D5E0;
		  /* 8211D5E0h */ case    1:  		/* bc 4, CR6_EQ, 64 */
		/* 8211D5E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D620;  }
		/* 8211D5E0h case    1:*/		return 0x8211D5E4;
		  /* 8211D5E4h */ case    2:  		/* cmpwi CR6, R11, 24 */
		/* 8211D5E4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 8211D5E4h case    2:*/		return 0x8211D5E8;
		  /* 8211D5E8h */ case    3:  		/* bc 12, CR6_EQ, 120 */
		/* 8211D5E8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D5E8h case    3:*/		return 0x8211D5EC;
		  /* 8211D5ECh */ case    4:  		/* cmpwi CR6, R11, 25 */
		/* 8211D5ECh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 8211D5ECh case    4:*/		return 0x8211D5F0;
		  /* 8211D5F0h */ case    5:  		/* bc 12, CR6_EQ, 112 */
		/* 8211D5F0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D5F0h case    5:*/		return 0x8211D5F4;
		  /* 8211D5F4h */ case    6:  		/* cmpwi CR6, R11, 27 */
		/* 8211D5F4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 8211D5F4h case    6:*/		return 0x8211D5F8;
		  /* 8211D5F8h */ case    7:  		/* bc 12, CR6_EQ, 104 */
		/* 8211D5F8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D5F8h case    7:*/		return 0x8211D5FC;
		  /* 8211D5FCh */ case    8:  		/* cmpwi CR6, R11, 29 */
		/* 8211D5FCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 8211D5FCh case    8:*/		return 0x8211D600;
		  /* 8211D600h */ case    9:  		/* bc 12, CR6_EQ, 96 */
		/* 8211D600h case    9:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D600h case    9:*/		return 0x8211D604;
		  /* 8211D604h */ case   10:  		/* cmpwi CR6, R11, 30 */
		/* 8211D604h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001E);
		/* 8211D604h case   10:*/		return 0x8211D608;
		  /* 8211D608h */ case   11:  		/* bc 12, CR6_EQ, 88 */
		/* 8211D608h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D608h case   11:*/		return 0x8211D60C;
		  /* 8211D60Ch */ case   12:  		/* cmpwi CR6, R11, 26 */
		/* 8211D60Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001A);
		/* 8211D60Ch case   12:*/		return 0x8211D610;
		  /* 8211D610h */ case   13:  		/* bc 12, CR6_EQ, 80 */
		/* 8211D610h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D610h case   13:*/		return 0x8211D614;
		  /* 8211D614h */ case   14:  		/* cmpwi CR6, R11, 28 */
		/* 8211D614h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 8211D614h case   14:*/		return 0x8211D618;
		  /* 8211D618h */ case   15:  		/* bc 12, CR6_EQ, 72 */
		/* 8211D618h case   15:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D618h case   15:*/		return 0x8211D61C;
		  /* 8211D61Ch */ case   16:  		/* b -664 */
		/* 8211D61Ch case   16:*/		return 0x8211D384;
		/* 8211D61Ch case   16:*/		return 0x8211D620;
	}
	return 0x8211D620;
} // Block from 8211D5DCh-8211D620h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211D620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D620);
		  /* 8211D620h */ case    0:  		/* cmpwi CR6, R10, 33 */
		/* 8211D620h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000021);
		/* 8211D620h case    0:*/		return 0x8211D624;
		  /* 8211D624h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8211D624h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D638;  }
		/* 8211D624h case    1:*/		return 0x8211D628;
		  /* 8211D628h */ case    2:  		/* cmpwi CR6, R10, 47 */
		/* 8211D628h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000002F);
		/* 8211D628h case    2:*/		return 0x8211D62C;
		  /* 8211D62Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8211D62Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8211D638;  }
		/* 8211D62Ch case    3:*/		return 0x8211D630;
		  /* 8211D630h */ case    4:  		/* cmpw CR6, R11, R10 */
		/* 8211D630h case    4:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8211D630h case    4:*/		return 0x8211D634;
		  /* 8211D634h */ case    5:  		/* b -28 */
		/* 8211D634h case    5:*/		return 0x8211D618;
		/* 8211D634h case    5:*/		return 0x8211D638;
	}
	return 0x8211D638;
} // Block from 8211D620h-8211D638h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D638);
		  /* 8211D638h */ case    0:  		/* cmpwi CR6, R11, 33 */
		/* 8211D638h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 8211D638h case    0:*/		return 0x8211D63C;
		  /* 8211D63Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8211D63Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D63Ch case    1:*/		return 0x8211D640;
		  /* 8211D640h */ case    2:  		/* cmpwi CR6, R11, 34 */
		/* 8211D640h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000022);
		/* 8211D640h case    2:*/		return 0x8211D644;
		  /* 8211D644h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 8211D644h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D644h case    3:*/		return 0x8211D648;
		  /* 8211D648h */ case    4:  		/* cmpwi CR6, R11, 35 */
		/* 8211D648h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000023);
		/* 8211D648h case    4:*/		return 0x8211D64C;
		  /* 8211D64Ch */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8211D64Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D64Ch case    5:*/		return 0x8211D650;
		  /* 8211D650h */ case    6:  		/* cmpwi CR6, R11, 36 */
		/* 8211D650h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000024);
		/* 8211D650h case    6:*/		return 0x8211D654;
		  /* 8211D654h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 8211D654h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211D660;  }
		/* 8211D654h case    7:*/		return 0x8211D658;
		  /* 8211D658h */ case    8:  		/* cmpwi CR6, R11, 37 */
		/* 8211D658h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000025);
		/* 8211D658h case    8:*/		return 0x8211D65C;
		  /* 8211D65Ch */ case    9:  		/* bc 4, CR6_EQ, -728 */
		/* 8211D65Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211D384;  }
		/* 8211D65Ch case    9:*/		return 0x8211D660;
	}
	return 0x8211D660;
} // Block from 8211D638h-8211D660h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211D660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D660);
		  /* 8211D660h */ case    0:  		/* mr R3, R25 */
		/* 8211D660h case    0:*/		regs.R3 = regs.R25;
		/* 8211D660h case    0:*/		return 0x8211D664;
		  /* 8211D664h */ case    1:  		/* lwz R5, <#[R30 + 24]> */
		/* 8211D664h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000018) );
		/* 8211D664h case    1:*/		return 0x8211D668;
		  /* 8211D668h */ case    2:  		/* lwz R4, <#[R28 + 24]> */
		/* 8211D668h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000018) );
		/* 8211D668h case    2:*/		return 0x8211D66C;
		  /* 8211D66Ch */ case    3:  		/* bl -21364 */
		/* 8211D66Ch case    3:*/		regs.LR = 0x8211D670; return 0x821182F8;
		/* 8211D66Ch case    3:*/		return 0x8211D670;
		  /* 8211D670h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8211D670h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D670h case    4:*/		return 0x8211D674;
		  /* 8211D674h */ case    5:  		/* bc 12, CR0_EQ, -752 */
		/* 8211D674h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211D384;  }
		/* 8211D674h case    5:*/		return 0x8211D678;
		  /* 8211D678h */ case    6:  		/* b -772 */
		/* 8211D678h case    6:*/		return 0x8211D374;
		/* 8211D678h case    6:*/		return 0x8211D67C;
	}
	return 0x8211D67C;
} // Block from 8211D660h-8211D67Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211D67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D67C);
		  /* 8211D67Ch */ case    0:  		/* lwz R11, <#[R28 + 32]> */
		/* 8211D67Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8211D67Ch case    0:*/		return 0x8211D680;
		  /* 8211D680h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 8211D680h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8211D680h case    1:*/		return 0x8211D684;
		  /* 8211D684h */ case    2:  		/* lwz R9, <#[R28 + 28]> */
		/* 8211D684h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x0000001C) );
		/* 8211D684h case    2:*/		return 0x8211D688;
		  /* 8211D688h */ case    3:  		/* lwz R8, <#[R30 + 32]> */
		/* 8211D688h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D688h case    3:*/		return 0x8211D68C;
		  /* 8211D68Ch */ case    4:  		/* lwz R7, <#[R30 + 28]> */
		/* 8211D68Ch case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D68Ch case    4:*/		return 0x8211D690;
		  /* 8211D690h */ case    5:  		/* mullw R29, R11, R9 */
		/* 8211D690h case    5:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R11,regs.R9);
		/* 8211D690h case    5:*/		return 0x8211D694;
		  /* 8211D694h */ case    6:  		/* mullw R11, R8, R7 */
		/* 8211D694h case    6:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R8,regs.R7);
		/* 8211D694h case    6:*/		return 0x8211D698;
		  /* 8211D698h */ case    7:  		/* bc 12, CR6_EQ, 124 */
		/* 8211D698h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211D714;  }
		/* 8211D698h case    7:*/		return 0x8211D69C;
		  /* 8211D69Ch */ case    8:  		/* cmplw CR6, R29, R11 */
		/* 8211D69Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8211D69Ch case    8:*/		return 0x8211D6A0;
		  /* 8211D6A0h */ case    9:  		/* bc 12, CR6_GT, -796 */
		/* 8211D6A0h case    9:*/		if ( regs.CR[6].gt ) { return 0x8211D384;  }
		/* 8211D6A0h case    9:*/		return 0x8211D6A4;
		  /* 8211D6A4h */ case   10:  		/* li R31, 0 */
		/* 8211D6A4h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211D6A4h case   10:*/		return 0x8211D6A8;
		  /* 8211D6A8h */ case   11:  		/* cmplwi CR6, R29, 0 */
		/* 8211D6A8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211D6A8h case   11:*/		return 0x8211D6AC;
		  /* 8211D6ACh */ case   12:  		/* bc 12, CR6_EQ, -824 */
		/* 8211D6ACh case   12:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D6ACh case   12:*/		return 0x8211D6B0;
		  /* 8211D6B0h */ case   13:  		/* addi R6, R1, 128 */
		/* 8211D6B0h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 8211D6B0h case   13:*/		return 0x8211D6B4;
		  /* 8211D6B4h */ case   14:  		/* mr R5, R31 */
		/* 8211D6B4h case   14:*/		regs.R5 = regs.R31;
		/* 8211D6B4h case   14:*/		return 0x8211D6B8;
		  /* 8211D6B8h */ case   15:  		/* mr R4, R27 */
		/* 8211D6B8h case   15:*/		regs.R4 = regs.R27;
		/* 8211D6B8h case   15:*/		return 0x8211D6BC;
		  /* 8211D6BCh */ case   16:  		/* mr R3, R25 */
		/* 8211D6BCh case   16:*/		regs.R3 = regs.R25;
		/* 8211D6BCh case   16:*/		return 0x8211D6C0;
		  /* 8211D6C0h */ case   17:  		/* bl -11752 */
		/* 8211D6C0h case   17:*/		regs.LR = 0x8211D6C4; return 0x8211A8D8;
		/* 8211D6C0h case   17:*/		return 0x8211D6C4;
		  /* 8211D6C4h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 8211D6C4h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D6C4h case   18:*/		return 0x8211D6C8;
		  /* 8211D6C8h */ case   19:  		/* bc 12, CR0_LT, -836 */
		/* 8211D6C8h case   19:*/		if ( regs.CR[0].lt ) { return 0x8211D384;  }
		/* 8211D6C8h case   19:*/		return 0x8211D6CC;
		  /* 8211D6CCh */ case   20:  		/* addi R6, R1, 80 */
		/* 8211D6CCh case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8211D6CCh case   20:*/		return 0x8211D6D0;
		  /* 8211D6D0h */ case   21:  		/* mr R5, R31 */
		/* 8211D6D0h case   21:*/		regs.R5 = regs.R31;
		/* 8211D6D0h case   21:*/		return 0x8211D6D4;
		  /* 8211D6D4h */ case   22:  		/* mr R4, R26 */
		/* 8211D6D4h case   22:*/		regs.R4 = regs.R26;
		/* 8211D6D4h case   22:*/		return 0x8211D6D8;
		  /* 8211D6D8h */ case   23:  		/* mr R3, R25 */
		/* 8211D6D8h case   23:*/		regs.R3 = regs.R25;
		/* 8211D6D8h case   23:*/		return 0x8211D6DC;
		  /* 8211D6DCh */ case   24:  		/* bl -11780 */
		/* 8211D6DCh case   24:*/		regs.LR = 0x8211D6E0; return 0x8211A8D8;
		/* 8211D6DCh case   24:*/		return 0x8211D6E0;
		  /* 8211D6E0h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 8211D6E0h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D6E0h case   25:*/		return 0x8211D6E4;
		  /* 8211D6E4h */ case   26:  		/* bc 12, CR0_LT, -864 */
		/* 8211D6E4h case   26:*/		if ( regs.CR[0].lt ) { return 0x8211D384;  }
		/* 8211D6E4h case   26:*/		return 0x8211D6E8;
		  /* 8211D6E8h */ case   27:  		/* li R6, 1 */
		/* 8211D6E8h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8211D6E8h case   27:*/		return 0x8211D6EC;
		  /* 8211D6ECh */ case   28:  		/* addi R5, R1, 80 */
		/* 8211D6ECh case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8211D6ECh case   28:*/		return 0x8211D6F0;
		  /* 8211D6F0h */ case   29:  		/* addi R4, R1, 128 */
		/* 8211D6F0h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 8211D6F0h case   29:*/		return 0x8211D6F4;
		  /* 8211D6F4h */ case   30:  		/* mr R3, R25 */
		/* 8211D6F4h case   30:*/		regs.R3 = regs.R25;
		/* 8211D6F4h case   30:*/		return 0x8211D6F8;
		  /* 8211D6F8h */ case   31:  		/* bl -944 */
		/* 8211D6F8h case   31:*/		regs.LR = 0x8211D6FC; return 0x8211D348;
		/* 8211D6F8h case   31:*/		return 0x8211D6FC;
		  /* 8211D6FCh */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 8211D6FCh case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D6FCh case   32:*/		return 0x8211D700;
		  /* 8211D700h */ case   33:  		/* bc 12, CR0_EQ, -892 */
		/* 8211D700h case   33:*/		if ( regs.CR[0].eq ) { return 0x8211D384;  }
		/* 8211D700h case   33:*/		return 0x8211D704;
		  /* 8211D704h */ case   34:  		/* addi R31, R31, 1 */
		/* 8211D704h case   34:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8211D704h case   34:*/		return 0x8211D708;
		  /* 8211D708h */ case   35:  		/* cmplw CR6, R31, R29 */
		/* 8211D708h case   35:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8211D708h case   35:*/		return 0x8211D70C;
		  /* 8211D70Ch */ case   36:  		/* bc 12, CR6_LT, -92 */
		/* 8211D70Ch case   36:*/		if ( regs.CR[6].lt ) { return 0x8211D6B0;  }
		/* 8211D70Ch case   36:*/		return 0x8211D710;
		  /* 8211D710h */ case   37:  		/* b -924 */
		/* 8211D710h case   37:*/		return 0x8211D374;
		/* 8211D710h case   37:*/		return 0x8211D714;
	}
	return 0x8211D714;
} // Block from 8211D67Ch-8211D714h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8211D714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D714);
		  /* 8211D714h */ case    0:  		/* lwz R9, <#[R30 + 16]> */
		/* 8211D714h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 8211D714h case    0:*/		return 0x8211D718;
		  /* 8211D718h */ case    1:  		/* cmpw CR6, R10, R9 */
		/* 8211D718h case    1:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 8211D718h case    1:*/		return 0x8211D71C;
		  /* 8211D71Ch */ case    2:  		/* bc 4, CR6_EQ, -920 */
		/* 8211D71Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D384;  }
		/* 8211D71Ch case    2:*/		return 0x8211D720;
		  /* 8211D720h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8211D720h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8211D720h case    3:*/		return 0x8211D724;
		  /* 8211D724h */ case    4:  		/* bc 4, CR6_EQ, -928 */
		/* 8211D724h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211D384;  }
		/* 8211D724h case    4:*/		return 0x8211D728;
		  /* 8211D728h */ case    5:  		/* li R31, 0 */
		/* 8211D728h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211D728h case    5:*/		return 0x8211D72C;
		  /* 8211D72Ch */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 8211D72Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211D72Ch case    6:*/		return 0x8211D730;
		  /* 8211D730h */ case    7:  		/* bc 12, CR6_EQ, -956 */
		/* 8211D730h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211D374;  }
		/* 8211D730h case    7:*/		return 0x8211D734;
		  /* 8211D734h */ case    8:  		/* addi R6, R1, 128 */
		/* 8211D734h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 8211D734h case    8:*/		return 0x8211D738;
		  /* 8211D738h */ case    9:  		/* mr R5, R31 */
		/* 8211D738h case    9:*/		regs.R5 = regs.R31;
		/* 8211D738h case    9:*/		return 0x8211D73C;
		  /* 8211D73Ch */ case   10:  		/* mr R4, R27 */
		/* 8211D73Ch case   10:*/		regs.R4 = regs.R27;
		/* 8211D73Ch case   10:*/		return 0x8211D740;
		  /* 8211D740h */ case   11:  		/* mr R3, R25 */
		/* 8211D740h case   11:*/		regs.R3 = regs.R25;
		/* 8211D740h case   11:*/		return 0x8211D744;
		  /* 8211D744h */ case   12:  		/* bl -11884 */
		/* 8211D744h case   12:*/		regs.LR = 0x8211D748; return 0x8211A8D8;
		/* 8211D744h case   12:*/		return 0x8211D748;
		  /* 8211D748h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 8211D748h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D748h case   13:*/		return 0x8211D74C;
		  /* 8211D74Ch */ case   14:  		/* bc 12, CR0_LT, -968 */
		/* 8211D74Ch case   14:*/		if ( regs.CR[0].lt ) { return 0x8211D384;  }
		/* 8211D74Ch case   14:*/		return 0x8211D750;
		  /* 8211D750h */ case   15:  		/* addi R6, R1, 80 */
		/* 8211D750h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8211D750h case   15:*/		return 0x8211D754;
		  /* 8211D754h */ case   16:  		/* mr R5, R31 */
		/* 8211D754h case   16:*/		regs.R5 = regs.R31;
		/* 8211D754h case   16:*/		return 0x8211D758;
		  /* 8211D758h */ case   17:  		/* mr R4, R26 */
		/* 8211D758h case   17:*/		regs.R4 = regs.R26;
		/* 8211D758h case   17:*/		return 0x8211D75C;
		  /* 8211D75Ch */ case   18:  		/* mr R3, R25 */
		/* 8211D75Ch case   18:*/		regs.R3 = regs.R25;
		/* 8211D75Ch case   18:*/		return 0x8211D760;
		  /* 8211D760h */ case   19:  		/* bl -11912 */
		/* 8211D760h case   19:*/		regs.LR = 0x8211D764; return 0x8211A8D8;
		/* 8211D760h case   19:*/		return 0x8211D764;
		  /* 8211D764h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 8211D764h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D764h case   20:*/		return 0x8211D768;
		  /* 8211D768h */ case   21:  		/* bc 12, CR0_LT, -996 */
		/* 8211D768h case   21:*/		if ( regs.CR[0].lt ) { return 0x8211D384;  }
		/* 8211D768h case   21:*/		return 0x8211D76C;
		  /* 8211D76Ch */ case   22:  		/* addi R5, R1, 80 */
		/* 8211D76Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8211D76Ch case   22:*/		return 0x8211D770;
		  /* 8211D770h */ case   23:  		/* addi R4, R1, 128 */
		/* 8211D770h case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 8211D770h case   23:*/		return 0x8211D774;
		  /* 8211D774h */ case   24:  		/* mr R3, R25 */
		/* 8211D774h case   24:*/		regs.R3 = regs.R25;
		/* 8211D774h case   24:*/		return 0x8211D778;
		  /* 8211D778h */ case   25:  		/* bl -21632 */
		/* 8211D778h case   25:*/		regs.LR = 0x8211D77C; return 0x821182F8;
		/* 8211D778h case   25:*/		return 0x8211D77C;
		  /* 8211D77Ch */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 8211D77Ch case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D77Ch case   26:*/		return 0x8211D780;
		  /* 8211D780h */ case   27:  		/* bc 12, CR0_EQ, -1020 */
		/* 8211D780h case   27:*/		if ( regs.CR[0].eq ) { return 0x8211D384;  }
		/* 8211D780h case   27:*/		return 0x8211D784;
		  /* 8211D784h */ case   28:  		/* addi R31, R31, 1 */
		/* 8211D784h case   28:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8211D784h case   28:*/		return 0x8211D788;
		  /* 8211D788h */ case   29:  		/* cmplw CR6, R31, R29 */
		/* 8211D788h case   29:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8211D788h case   29:*/		return 0x8211D78C;
		  /* 8211D78Ch */ case   30:  		/* bc 12, CR6_LT, -88 */
		/* 8211D78Ch case   30:*/		if ( regs.CR[6].lt ) { return 0x8211D734;  }
		/* 8211D78Ch case   30:*/		return 0x8211D790;
		  /* 8211D790h */ case   31:  		/* b -1052 */
		/* 8211D790h case   31:*/		return 0x8211D374;
		/* 8211D790h case   31:*/		return 0x8211D794;
		  /* 8211D794h */ case   32:  		/* nop */
		/* 8211D794h case   32:*/		cpu::op::nop();
		/* 8211D794h case   32:*/		return 0x8211D798;
	}
	return 0x8211D798;
} // Block from 8211D714h-8211D798h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8211D798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D798);
		  /* 8211D798h */ case    0:  		/* mfspr R12, LR */
		/* 8211D798h case    0:*/		regs.R12 = regs.LR;
		/* 8211D798h case    0:*/		return 0x8211D79C;
		  /* 8211D79Ch */ case    1:  		/* bl -574804 */
		/* 8211D79Ch case    1:*/		regs.LR = 0x8211D7A0; return 0x82091248;
		/* 8211D79Ch case    1:*/		return 0x8211D7A0;
		  /* 8211D7A0h */ case    2:  		/* stwu R1, <#[R1 - 832]> */
		/* 8211D7A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFCC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFCC0);
		/* 8211D7A0h case    2:*/		return 0x8211D7A4;
		  /* 8211D7A4h */ case    3:  		/* mr R28, R3 */
		/* 8211D7A4h case    3:*/		regs.R28 = regs.R3;
		/* 8211D7A4h case    3:*/		return 0x8211D7A8;
		  /* 8211D7A8h */ case    4:  		/* mr R24, R4 */
		/* 8211D7A8h case    4:*/		regs.R24 = regs.R4;
		/* 8211D7A8h case    4:*/		return 0x8211D7AC;
		  /* 8211D7ACh */ case    5:  		/* mr R25, R5 */
		/* 8211D7ACh case    5:*/		regs.R25 = regs.R5;
		/* 8211D7ACh case    5:*/		return 0x8211D7B0;
		  /* 8211D7B0h */ case    6:  		/* mr R27, R6 */
		/* 8211D7B0h case    6:*/		regs.R27 = regs.R6;
		/* 8211D7B0h case    6:*/		return 0x8211D7B4;
		  /* 8211D7B4h */ case    7:  		/* mr R26, R7 */
		/* 8211D7B4h case    7:*/		regs.R26 = regs.R7;
		/* 8211D7B4h case    7:*/		return 0x8211D7B8;
		  /* 8211D7B8h */ case    8:  		/* cmpwi CR6, R8, 0 */
		/* 8211D7B8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8211D7B8h case    8:*/		return 0x8211D7BC;
		  /* 8211D7BCh */ case    9:  		/* bc 4, CR6_EQ, 988 */
		/* 8211D7BCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D7BCh case    9:*/		return 0x8211D7C0;
		  /* 8211D7C0h */ case   10:  		/* cmplwi CR6, R6, 0 */
		/* 8211D7C0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8211D7C0h case   10:*/		return 0x8211D7C4;
		  /* 8211D7C4h */ case   11:  		/* bc 12, CR6_EQ, 980 */
		/* 8211D7C4h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D7C4h case   11:*/		return 0x8211D7C8;
		  /* 8211D7C8h */ case   12:  		/* cmplwi CR6, R7, 0 */
		/* 8211D7C8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8211D7C8h case   12:*/		return 0x8211D7CC;
		  /* 8211D7CCh */ case   13:  		/* bc 12, CR6_EQ, 252 */
		/* 8211D7CCh case   13:*/		if ( regs.CR[6].eq ) { return 0x8211D8C8;  }
		/* 8211D7CCh case   13:*/		return 0x8211D7D0;
		  /* 8211D7D0h */ case   14:  		/* addi R3, R1, 144 */
		/* 8211D7D0h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 8211D7D0h case   14:*/		return 0x8211D7D4;
		  /* 8211D7D4h */ case   15:  		/* bl -338836 */
		/* 8211D7D4h case   15:*/		regs.LR = 0x8211D7D8; return 0x820CAC40;
		/* 8211D7D4h case   15:*/		return 0x8211D7D8;
		  /* 8211D7D8h */ case   16:  		/* addi R3, R1, 192 */
		/* 8211D7D8h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8211D7D8h case   16:*/		return 0x8211D7DC;
		  /* 8211D7DCh */ case   17:  		/* bl -338844 */
		/* 8211D7DCh case   17:*/		regs.LR = 0x8211D7E0; return 0x820CAC40;
		/* 8211D7DCh case   17:*/		return 0x8211D7E0;
		  /* 8211D7E0h */ case   18:  		/* lwz R11, <#[R27 + 4]> */
		/* 8211D7E0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 8211D7E0h case   18:*/		return 0x8211D7E4;
		  /* 8211D7E4h */ case   19:  		/* li R31, 4 */
		/* 8211D7E4h case   19:*/		cpu::op::li<0>(regs,&regs.R31,0x4);
		/* 8211D7E4h case   19:*/		return 0x8211D7E8;
		  /* 8211D7E8h */ case   20:  		/* li R29, 1 */
		/* 8211D7E8h case   20:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8211D7E8h case   20:*/		return 0x8211D7EC;
		  /* 8211D7ECh */ case   21:  		/* cmpwi CR6, R11, 9 */
		/* 8211D7ECh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211D7ECh case   21:*/		return 0x8211D7F0;
		  /* 8211D7F0h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 8211D7F0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8211D7FC;  }
		/* 8211D7F0h case   22:*/		return 0x8211D7F4;
		  /* 8211D7F4h */ case   23:  		/* mr R30, R27 */
		/* 8211D7F4h case   23:*/		regs.R30 = regs.R27;
		/* 8211D7F4h case   23:*/		return 0x8211D7F8;
		  /* 8211D7F8h */ case   24:  		/* b 56 */
		/* 8211D7F8h case   24:*/		return 0x8211D830;
		/* 8211D7F8h case   24:*/		return 0x8211D7FC;
	}
	return 0x8211D7FC;
} // Block from 8211D798h-8211D7FCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 8211D7FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D7FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D7FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D7FC);
		  /* 8211D7FCh */ case    0:  		/* stw R31, <#[R1 + 160]> */
		/* 8211D7FCh case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 8211D7FCh case    0:*/		return 0x8211D800;
		  /* 8211D800h */ case    1:  		/* mr R4, R27 */
		/* 8211D800h case    1:*/		regs.R4 = regs.R27;
		/* 8211D800h case    1:*/		return 0x8211D804;
		  /* 8211D804h */ case    2:  		/* stw R29, <#[R1 + 172]> */
		/* 8211D804h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000AC) );
		/* 8211D804h case    2:*/		return 0x8211D808;
		  /* 8211D808h */ case    3:  		/* mr R3, R28 */
		/* 8211D808h case    3:*/		regs.R3 = regs.R28;
		/* 8211D808h case    3:*/		return 0x8211D80C;
		  /* 8211D80Ch */ case    4:  		/* addi R30, R1, 144 */
		/* 8211D80Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x90);
		/* 8211D80Ch case    4:*/		return 0x8211D810;
		  /* 8211D810h */ case    5:  		/* bl -13376 */
		/* 8211D810h case    5:*/		regs.LR = 0x8211D814; return 0x8211A3D0;
		/* 8211D810h case    5:*/		return 0x8211D814;
		  /* 8211D814h */ case    6:  		/* stw R3, <#[R1 + 176]> */
		/* 8211D814h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000B0) );
		/* 8211D814h case    6:*/		return 0x8211D818;
		  /* 8211D818h */ case    7:  		/* mr R4, R27 */
		/* 8211D818h case    7:*/		regs.R4 = regs.R27;
		/* 8211D818h case    7:*/		return 0x8211D81C;
		  /* 8211D81Ch */ case    8:  		/* mr R3, R28 */
		/* 8211D81Ch case    8:*/		regs.R3 = regs.R28;
		/* 8211D81Ch case    8:*/		return 0x8211D820;
		  /* 8211D820h */ case    9:  		/* bl -13600 */
		/* 8211D820h case    9:*/		regs.LR = 0x8211D824; return 0x8211A300;
		/* 8211D820h case    9:*/		return 0x8211D824;
		  /* 8211D824h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8211D824h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D824h case   10:*/		return 0x8211D828;
		  /* 8211D828h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D828h case   11:*/		if ( regs.CR[0].eq ) { return 0x8211D830;  }
		/* 8211D828h case   11:*/		return 0x8211D82C;
		  /* 8211D82Ch */ case   12:  		/* stw R29, <#[R1 + 160]> */
		/* 8211D82Ch case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000A0) );
		/* 8211D82Ch case   12:*/		return 0x8211D830;
	}
	return 0x8211D830;
} // Block from 8211D7FCh-8211D830h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211D830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D830);
		  /* 8211D830h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 8211D830h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8211D830h case    0:*/		return 0x8211D834;
		  /* 8211D834h */ case    1:  		/* cmpwi CR6, R11, 9 */
		/* 8211D834h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211D834h case    1:*/		return 0x8211D838;
		  /* 8211D838h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8211D838h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D844;  }
		/* 8211D838h case    2:*/		return 0x8211D83C;
		  /* 8211D83Ch */ case    3:  		/* mr R31, R26 */
		/* 8211D83Ch case    3:*/		regs.R31 = regs.R26;
		/* 8211D83Ch case    3:*/		return 0x8211D840;
		  /* 8211D840h */ case    4:  		/* b 56 */
		/* 8211D840h case    4:*/		return 0x8211D878;
		/* 8211D840h case    4:*/		return 0x8211D844;
	}
	return 0x8211D844;
} // Block from 8211D830h-8211D844h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211D844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D844);
		  /* 8211D844h */ case    0:  		/* stw R31, <#[R1 + 208]> */
		/* 8211D844h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000D0) );
		/* 8211D844h case    0:*/		return 0x8211D848;
		  /* 8211D848h */ case    1:  		/* mr R4, R26 */
		/* 8211D848h case    1:*/		regs.R4 = regs.R26;
		/* 8211D848h case    1:*/		return 0x8211D84C;
		  /* 8211D84Ch */ case    2:  		/* stw R29, <#[R1 + 220]> */
		/* 8211D84Ch case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000DC) );
		/* 8211D84Ch case    2:*/		return 0x8211D850;
		  /* 8211D850h */ case    3:  		/* mr R3, R28 */
		/* 8211D850h case    3:*/		regs.R3 = regs.R28;
		/* 8211D850h case    3:*/		return 0x8211D854;
		  /* 8211D854h */ case    4:  		/* addi R31, R1, 192 */
		/* 8211D854h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xC0);
		/* 8211D854h case    4:*/		return 0x8211D858;
		  /* 8211D858h */ case    5:  		/* bl -13448 */
		/* 8211D858h case    5:*/		regs.LR = 0x8211D85C; return 0x8211A3D0;
		/* 8211D858h case    5:*/		return 0x8211D85C;
		  /* 8211D85Ch */ case    6:  		/* stw R3, <#[R1 + 224]> */
		/* 8211D85Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000E0) );
		/* 8211D85Ch case    6:*/		return 0x8211D860;
		  /* 8211D860h */ case    7:  		/* mr R4, R26 */
		/* 8211D860h case    7:*/		regs.R4 = regs.R26;
		/* 8211D860h case    7:*/		return 0x8211D864;
		  /* 8211D864h */ case    8:  		/* mr R3, R28 */
		/* 8211D864h case    8:*/		regs.R3 = regs.R28;
		/* 8211D864h case    8:*/		return 0x8211D868;
		  /* 8211D868h */ case    9:  		/* bl -13672 */
		/* 8211D868h case    9:*/		regs.LR = 0x8211D86C; return 0x8211A300;
		/* 8211D868h case    9:*/		return 0x8211D86C;
		  /* 8211D86Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8211D86Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211D86Ch case   10:*/		return 0x8211D870;
		  /* 8211D870h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8211D870h case   11:*/		if ( regs.CR[0].eq ) { return 0x8211D878;  }
		/* 8211D870h case   11:*/		return 0x8211D874;
		  /* 8211D874h */ case   12:  		/* stw R29, <#[R1 + 208]> */
		/* 8211D874h case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000D0) );
		/* 8211D874h case   12:*/		return 0x8211D878;
	}
	return 0x8211D878;
} // Block from 8211D844h-8211D878h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211D878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D878);
		  /* 8211D878h */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 8211D878h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8211D878h case    0:*/		return 0x8211D87C;
		  /* 8211D87Ch */ case    1:  		/* cmpwi CR6, R10, 4 */
		/* 8211D87Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 8211D87Ch case    1:*/		return 0x8211D880;
		  /* 8211D880h */ case    2:  		/* bc 12, CR6_EQ, 640 */
		/* 8211D880h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211DB00;  }
		/* 8211D880h case    2:*/		return 0x8211D884;
		  /* 8211D884h */ case    3:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211D884h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211D884h case    3:*/		return 0x8211D888;
		  /* 8211D888h */ case    4:  		/* cmpwi CR6, R11, 4 */
		/* 8211D888h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8211D888h case    4:*/		return 0x8211D88C;
		  /* 8211D88Ch */ case    5:  		/* bc 12, CR6_EQ, 628 */
		/* 8211D88Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8211DB00;  }
		/* 8211D88Ch case    5:*/		return 0x8211D890;
		  /* 8211D890h */ case    6:  		/* cmpwi CR6, R10, 0 */
		/* 8211D890h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8211D890h case    6:*/		return 0x8211D894;
		  /* 8211D894h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 8211D894h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211D8A0;  }
		/* 8211D894h case    7:*/		return 0x8211D898;
		  /* 8211D898h */ case    8:  		/* cmpwi CR6, R11, 3 */
		/* 8211D898h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211D898h case    8:*/		return 0x8211D89C;
		  /* 8211D89Ch */ case    9:  		/* b 760 */
		/* 8211D89Ch case    9:*/		return 0x8211DB94;
		/* 8211D89Ch case    9:*/		return 0x8211D8A0;
	}
	return 0x8211D8A0;
} // Block from 8211D878h-8211D8A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211D8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D8A0);
		  /* 8211D8A0h */ case    0:  		/* cmpwi CR6, R10, 1 */
		/* 8211D8A0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8211D8A0h case    0:*/		return 0x8211D8A4;
		  /* 8211D8A4h */ case    1:  		/* bc 4, CR6_EQ, 228 */
		/* 8211D8A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D988;  }
		/* 8211D8A4h case    1:*/		return 0x8211D8A8;
		  /* 8211D8A8h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8211D8A8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211D8A8h case    2:*/		return 0x8211D8AC;
		  /* 8211D8ACh */ case    3:  		/* bc 12, CR6_EQ, 748 */
		/* 8211D8ACh case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D8ACh case    3:*/		return 0x8211D8B0;
		  /* 8211D8B0h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 8211D8B0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211D8B0h case    4:*/		return 0x8211D8B4;
		  /* 8211D8B4h */ case    5:  		/* bc 4, CR6_EQ, 116 */
		/* 8211D8B4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211D928;  }
		/* 8211D8B4h case    5:*/		return 0x8211D8B8;
		  /* 8211D8B8h */ case    6:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211D8B8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D8B8h case    6:*/		return 0x8211D8BC;
		  /* 8211D8BCh */ case    7:  		/* lwz R10, <#[R31 + 32]> */
		/* 8211D8BCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8211D8BCh case    7:*/		return 0x8211D8C0;
		  /* 8211D8C0h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 8211D8C0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8211D8C0h case    8:*/		return 0x8211D8C4;
		  /* 8211D8C4h */ case    9:  		/* bc 4, CR6_GT, 724 */
		/* 8211D8C4h case    9:*/		if ( !regs.CR[6].gt ) { return 0x8211DB98;  }
		/* 8211D8C4h case    9:*/		return 0x8211D8C8;
	}
	return 0x8211D8C8;
} // Block from 8211D8A0h-8211D8C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211D8C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D8C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D8C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D8C8);
		  /* 8211D8C8h */ case    0:  		/* lis R11, -32253 */
		/* 8211D8C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211D8C8h case    0:*/		return 0x8211D8CC;
		  /* 8211D8CCh */ case    1:  		/* addi R31, R11, 9172 */
		/* 8211D8CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x23D4);
		/* 8211D8CCh case    1:*/		return 0x8211D8D0;
		  /* 8211D8D0h */ case    2:  		/* mr R6, R27 */
		/* 8211D8D0h case    2:*/		regs.R6 = regs.R27;
		/* 8211D8D0h case    2:*/		return 0x8211D8D4;
		  /* 8211D8D4h */ case    3:  		/* li R5, 255 */
		/* 8211D8D4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xFF);
		/* 8211D8D4h case    3:*/		return 0x8211D8D8;
		  /* 8211D8D8h */ case    4:  		/* addi R4, R1, 240 */
		/* 8211D8D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xF0);
		/* 8211D8D8h case    4:*/		return 0x8211D8DC;
		  /* 8211D8DCh */ case    5:  		/* mr R3, R28 */
		/* 8211D8DCh case    5:*/		regs.R3 = regs.R28;
		/* 8211D8DCh case    5:*/		return 0x8211D8E0;
		  /* 8211D8E0h */ case    6:  		/* bl -13352 */
		/* 8211D8E0h case    6:*/		regs.LR = 0x8211D8E4; return 0x8211A4B8;
		/* 8211D8E0h case    6:*/		return 0x8211D8E4;
		  /* 8211D8E4h */ case    7:  		/* mr R6, R26 */
		/* 8211D8E4h case    7:*/		regs.R6 = regs.R26;
		/* 8211D8E4h case    7:*/		return 0x8211D8E8;
		  /* 8211D8E8h */ case    8:  		/* li R5, 255 */
		/* 8211D8E8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xFF);
		/* 8211D8E8h case    8:*/		return 0x8211D8EC;
		  /* 8211D8ECh */ case    9:  		/* addi R4, R1, 496 */
		/* 8211D8ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x1F0);
		/* 8211D8ECh case    9:*/		return 0x8211D8F0;
		  /* 8211D8F0h */ case   10:  		/* mr R3, R28 */
		/* 8211D8F0h case   10:*/		regs.R3 = regs.R28;
		/* 8211D8F0h case   10:*/		return 0x8211D8F4;
		  /* 8211D8F4h */ case   11:  		/* bl -13372 */
		/* 8211D8F4h case   11:*/		regs.LR = 0x8211D8F8; return 0x8211A4B8;
		/* 8211D8F4h case   11:*/		return 0x8211D8F8;
		  /* 8211D8F8h */ case   12:  		/* cmplwi CR6, R25, 0 */
		/* 8211D8F8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8211D8F8h case   12:*/		return 0x8211D8FC;
		  /* 8211D8FCh */ case   13:  		/* li R5, 3017 */
		/* 8211D8FCh case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xBC9);
		/* 8211D8FCh case   13:*/		return 0x8211D900;
		  /* 8211D900h */ case   14:  		/* mr R4, R24 */
		/* 8211D900h case   14:*/		regs.R4 = regs.R24;
		/* 8211D900h case   14:*/		return 0x8211D904;
		  /* 8211D904h */ case   15:  		/* mr R3, R28 */
		/* 8211D904h case   15:*/		regs.R3 = regs.R28;
		/* 8211D904h case   15:*/		return 0x8211D908;
		  /* 8211D908h */ case   16:  		/* bc 4, CR6_EQ, 668 */
		/* 8211D908h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8211DBA4;  }
		/* 8211D908h case   16:*/		return 0x8211D90C;
		  /* 8211D90Ch */ case   17:  		/* lis R11, -32253 */
		/* 8211D90Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211D90Ch case   17:*/		return 0x8211D910;
		  /* 8211D910h */ case   18:  		/* addi R9, R1, 240 */
		/* 8211D910h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xF0);
		/* 8211D910h case   18:*/		return 0x8211D914;
		  /* 8211D914h */ case   19:  		/* addi R6, R11, 9136 */
		/* 8211D914h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23B0);
		/* 8211D914h case   19:*/		return 0x8211D918;
		  /* 8211D918h */ case   20:  		/* addi R8, R1, 496 */
		/* 8211D918h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1F0);
		/* 8211D918h case   20:*/		return 0x8211D91C;
		  /* 8211D91Ch */ case   21:  		/* mr R7, R31 */
		/* 8211D91Ch case   21:*/		regs.R7 = regs.R31;
		/* 8211D91Ch case   21:*/		return 0x8211D920;
		  /* 8211D920h */ case   22:  		/* bl -16512 */
		/* 8211D920h case   22:*/		regs.LR = 0x8211D924; return 0x821198A0;
		/* 8211D920h case   22:*/		return 0x8211D924;
		  /* 8211D924h */ case   23:  		/* b 668 */
		/* 8211D924h case   23:*/		return 0x8211DBC0;
		/* 8211D924h case   23:*/		return 0x8211D928;
	}
	return 0x8211D928;
} // Block from 8211D8C8h-8211D928h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8211D928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D928);
		  /* 8211D928h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 8211D928h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211D928h case    0:*/		return 0x8211D92C;
		  /* 8211D92Ch */ case    1:  		/* bc 4, CR6_EQ, -148 */
		/* 8211D92Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D898;  }
		/* 8211D92Ch case    1:*/		return 0x8211D930;
		  /* 8211D930h */ case    2:  		/* lwz R10, <#[R31 + 28]> */
		/* 8211D930h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211D930h case    2:*/		return 0x8211D934;
		  /* 8211D934h */ case    3:  		/* cmplwi CR6, R10, 1 */
		/* 8211D934h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D934h case    3:*/		return 0x8211D938;
		  /* 8211D938h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8211D938h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211D94C;  }
		/* 8211D938h case    4:*/		return 0x8211D93C;
		  /* 8211D93Ch */ case    5:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211D93Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D93Ch case    5:*/		return 0x8211D940;
		  /* 8211D940h */ case    6:  		/* lwz R9, <#[R31 + 32]> */
		/* 8211D940h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8211D940h case    6:*/		return 0x8211D944;
		  /* 8211D944h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 8211D944h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211D944h case    7:*/		return 0x8211D948;
		  /* 8211D948h */ case    8:  		/* bc 12, CR6_GT, -128 */
		/* 8211D948h case    8:*/		if ( regs.CR[6].gt ) { return 0x8211D8C8;  }
		/* 8211D948h case    8:*/		return 0x8211D94C;
	}
	return 0x8211D94C;
} // Block from 8211D928h-8211D94Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211D94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D94C);
		  /* 8211D94Ch */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 8211D94Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8211D94Ch case    0:*/		return 0x8211D950;
		  /* 8211D950h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8211D950h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D950h case    1:*/		return 0x8211D954;
		  /* 8211D954h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8211D954h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D964;  }
		/* 8211D954h case    2:*/		return 0x8211D958;
		  /* 8211D958h */ case    3:  		/* lwz R9, <#[R30 + 32]> */
		/* 8211D958h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D958h case    3:*/		return 0x8211D95C;
		  /* 8211D95Ch */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 8211D95Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8211D95Ch case    4:*/		return 0x8211D960;
		  /* 8211D960h */ case    5:  		/* bc 12, CR6_GT, -152 */
		/* 8211D960h case    5:*/		if ( regs.CR[6].gt ) { return 0x8211D8C8;  }
		/* 8211D960h case    5:*/		return 0x8211D964;
	}
	return 0x8211D964;
} // Block from 8211D94Ch-8211D964h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D964);
		  /* 8211D964h */ case    0:  		/* cmplwi CR6, R10, 1 */
		/* 8211D964h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D964h case    0:*/		return 0x8211D968;
		  /* 8211D968h */ case    1:  		/* bc 12, CR6_EQ, 560 */
		/* 8211D968h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D968h case    1:*/		return 0x8211D96C;
		  /* 8211D96Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8211D96Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D96Ch case    2:*/		return 0x8211D970;
		  /* 8211D970h */ case    3:  		/* bc 12, CR6_EQ, 552 */
		/* 8211D970h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D970h case    3:*/		return 0x8211D974;
		  /* 8211D974h */ case    4:  		/* lwz R9, <#[R30 + 32]> */
		/* 8211D974h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D974h case    4:*/		return 0x8211D978;
		  /* 8211D978h */ case    5:  		/* mullw R11, R10, R11 */
		/* 8211D978h case    5:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8211D978h case    5:*/		return 0x8211D97C;
		  /* 8211D97Ch */ case    6:  		/* cmplw CR6, R11, R9 */
		/* 8211D97Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211D97Ch case    6:*/		return 0x8211D980;
		  /* 8211D980h */ case    7:  		/* bc 4, CR6_EQ, -184 */
		/* 8211D980h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8211D8C8;  }
		/* 8211D980h case    7:*/		return 0x8211D984;
		  /* 8211D984h */ case    8:  		/* b 532 */
		/* 8211D984h case    8:*/		return 0x8211DB98;
		/* 8211D984h case    8:*/		return 0x8211D988;
	}
	return 0x8211D988;
} // Block from 8211D964h-8211D988h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211D988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D988);
		  /* 8211D988h */ case    0:  		/* cmpwi CR6, R10, 2 */
		/* 8211D988h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 8211D988h case    0:*/		return 0x8211D98C;
		  /* 8211D98Ch */ case    1:  		/* bc 4, CR6_EQ, 140 */
		/* 8211D98Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211DA18;  }
		/* 8211D98Ch case    1:*/		return 0x8211D990;
		  /* 8211D990h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8211D990h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211D990h case    2:*/		return 0x8211D994;
		  /* 8211D994h */ case    3:  		/* bc 12, CR6_EQ, 516 */
		/* 8211D994h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D994h case    3:*/		return 0x8211D998;
		  /* 8211D998h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 8211D998h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211D998h case    4:*/		return 0x8211D99C;
		  /* 8211D99Ch */ case    5:  		/* bc 4, CR6_EQ, 80 */
		/* 8211D99Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211D9EC;  }
		/* 8211D99Ch case    5:*/		return 0x8211D9A0;
		  /* 8211D9A0h */ case    6:  		/* lwz R10, <#[R30 + 28]> */
		/* 8211D9A0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D9A0h case    6:*/		return 0x8211D9A4;
		  /* 8211D9A4h */ case    7:  		/* cmplwi CR6, R10, 1 */
		/* 8211D9A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D9A4h case    7:*/		return 0x8211D9A8;
		  /* 8211D9A8h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 8211D9A8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211D9BC;  }
		/* 8211D9A8h case    8:*/		return 0x8211D9AC;
		  /* 8211D9ACh */ case    9:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211D9ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D9ACh case    9:*/		return 0x8211D9B0;
		  /* 8211D9B0h */ case   10:  		/* lwz R9, <#[R31 + 32]> */
		/* 8211D9B0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8211D9B0h case   10:*/		return 0x8211D9B4;
		  /* 8211D9B4h */ case   11:  		/* cmplw CR6, R11, R9 */
		/* 8211D9B4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211D9B4h case   11:*/		return 0x8211D9B8;
		  /* 8211D9B8h */ case   12:  		/* bc 12, CR6_GT, -240 */
		/* 8211D9B8h case   12:*/		if ( regs.CR[6].gt ) { return 0x8211D8C8;  }
		/* 8211D9B8h case   12:*/		return 0x8211D9BC;
	}
	return 0x8211D9BC;
} // Block from 8211D988h-8211D9BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211D9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D9BC);
		  /* 8211D9BCh */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211D9BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211D9BCh case    0:*/		return 0x8211D9C0;
		  /* 8211D9C0h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8211D9C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D9C0h case    1:*/		return 0x8211D9C4;
		  /* 8211D9C4h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8211D9C4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211D9D4;  }
		/* 8211D9C4h case    2:*/		return 0x8211D9C8;
		  /* 8211D9C8h */ case    3:  		/* lwz R9, <#[R31 + 32]> */
		/* 8211D9C8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8211D9C8h case    3:*/		return 0x8211D9CC;
		  /* 8211D9CCh */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 8211D9CCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8211D9CCh case    4:*/		return 0x8211D9D0;
		  /* 8211D9D0h */ case    5:  		/* bc 12, CR6_GT, -264 */
		/* 8211D9D0h case    5:*/		if ( regs.CR[6].gt ) { return 0x8211D8C8;  }
		/* 8211D9D0h case    5:*/		return 0x8211D9D4;
	}
	return 0x8211D9D4;
} // Block from 8211D9BCh-8211D9D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D9D4);
		  /* 8211D9D4h */ case    0:  		/* cmplwi CR6, R10, 1 */
		/* 8211D9D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8211D9D4h case    0:*/		return 0x8211D9D8;
		  /* 8211D9D8h */ case    1:  		/* bc 12, CR6_EQ, 448 */
		/* 8211D9D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D9D8h case    1:*/		return 0x8211D9DC;
		  /* 8211D9DCh */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8211D9DCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8211D9DCh case    2:*/		return 0x8211D9E0;
		  /* 8211D9E0h */ case    3:  		/* bc 12, CR6_EQ, 440 */
		/* 8211D9E0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211D9E0h case    3:*/		return 0x8211D9E4;
		  /* 8211D9E4h */ case    4:  		/* lwz R9, <#[R31 + 32]> */
		/* 8211D9E4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8211D9E4h case    4:*/		return 0x8211D9E8;
		  /* 8211D9E8h */ case    5:  		/* b -112 */
		/* 8211D9E8h case    5:*/		return 0x8211D978;
		/* 8211D9E8h case    5:*/		return 0x8211D9EC;
	}
	return 0x8211D9EC;
} // Block from 8211D9D4h-8211D9ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211D9ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211D9EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211D9EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211D9EC);
		  /* 8211D9ECh */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 8211D9ECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211D9ECh case    0:*/		return 0x8211D9F0;
		  /* 8211D9F0h */ case    1:  		/* bc 4, CR6_EQ, -344 */
		/* 8211D9F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211D898;  }
		/* 8211D9F0h case    1:*/		return 0x8211D9F4;
		  /* 8211D9F4h */ case    2:  		/* lwz R11, <#[R30 + 28]> */
		/* 8211D9F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211D9F4h case    2:*/		return 0x8211D9F8;
		  /* 8211D9F8h */ case    3:  		/* lwz R10, <#[R31 + 28]> */
		/* 8211D9F8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211D9F8h case    3:*/		return 0x8211D9FC;
		  /* 8211D9FCh */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8211D9FCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8211D9FCh case    4:*/		return 0x8211DA00;
		  /* 8211DA00h */ case    5:  		/* bc 12, CR6_GT, -312 */
		/* 8211DA00h case    5:*/		if ( regs.CR[6].gt ) { return 0x8211D8C8;  }
		/* 8211DA00h case    5:*/		return 0x8211DA04;
		  /* 8211DA04h */ case    6:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211DA04h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211DA04h case    6:*/		return 0x8211DA08;
		  /* 8211DA08h */ case    7:  		/* lwz R10, <#[R31 + 32]> */
		/* 8211DA08h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8211DA08h case    7:*/		return 0x8211DA0C;
		  /* 8211DA0Ch */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 8211DA0Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8211DA0Ch case    8:*/		return 0x8211DA10;
		  /* 8211DA10h */ case    9:  		/* bc 4, CR6_GT, 392 */
		/* 8211DA10h case    9:*/		if ( !regs.CR[6].gt ) { return 0x8211DB98;  }
		/* 8211DA10h case    9:*/		return 0x8211DA14;
		  /* 8211DA14h */ case   10:  		/* b -332 */
		/* 8211DA14h case   10:*/		return 0x8211D8C8;
		/* 8211DA14h case   10:*/		return 0x8211DA18;
	}
	return 0x8211DA18;
} // Block from 8211D9ECh-8211DA18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211DA18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DA18);
		  /* 8211DA18h */ case    0:  		/* cmpwi CR6, R10, 3 */
		/* 8211DA18h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8211DA18h case    0:*/		return 0x8211DA1C;
		  /* 8211DA1Ch */ case    1:  		/* bc 4, CR6_EQ, 380 */
		/* 8211DA1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211DA1Ch case    1:*/		return 0x8211DA20;
		  /* 8211DA20h */ case    2:  		/* cmpwi CR6, R11, 3 */
		/* 8211DA20h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211DA20h case    2:*/		return 0x8211DA24;
		  /* 8211DA24h */ case    3:  		/* bc 4, CR6_EQ, -348 */
		/* 8211DA24h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211D8C8;  }
		/* 8211DA24h case    3:*/		return 0x8211DA28;
		  /* 8211DA28h */ case    4:  		/* lwz R10, <#[R31 + 20]> */
		/* 8211DA28h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8211DA28h case    4:*/		return 0x8211DA2C;
		  /* 8211DA2Ch */ case    5:  		/* cmpwi CR6, R10, 22 */
		/* 8211DA2Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000016);
		/* 8211DA2Ch case    5:*/		return 0x8211DA30;
		  /* 8211DA30h */ case    6:  		/* bc 12, CR6_EQ, 360 */
		/* 8211DA30h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211DA30h case    6:*/		return 0x8211DA34;
		  /* 8211DA34h */ case    7:  		/* lwz R11, <#[R30 + 20]> */
		/* 8211DA34h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8211DA34h case    7:*/		return 0x8211DA38;
		  /* 8211DA38h */ case    8:  		/* cmpwi CR6, R11, 47 */
		/* 8211DA38h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002F);
		/* 8211DA38h case    8:*/		return 0x8211DA3C;
		  /* 8211DA3Ch */ case    9:  		/* bc 12, CR6_LT, 36 */
		/* 8211DA3Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x8211DA60;  }
		/* 8211DA3Ch case    9:*/		return 0x8211DA40;
		  /* 8211DA40h */ case   10:  		/* cmpwi CR6, R11, 50 */
		/* 8211DA40h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000032);
		/* 8211DA40h case   10:*/		return 0x8211DA44;
		  /* 8211DA44h */ case   11:  		/* bc 12, CR6_GT, 28 */
		/* 8211DA44h case   11:*/		if ( regs.CR[6].gt ) { return 0x8211DA60;  }
		/* 8211DA44h case   11:*/		return 0x8211DA48;
		  /* 8211DA48h */ case   12:  		/* cmpw CR6, R11, R10 */
		/* 8211DA48h case   12:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8211DA48h case   12:*/		return 0x8211DA4C;
		  /* 8211DA4Ch */ case   13:  		/* bc 12, CR6_EQ, 332 */
		/* 8211DA4Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8211DB98;  }
		/* 8211DA4Ch case   13:*/		return 0x8211DA50;
		  /* 8211DA50h */ case   14:  		/* addi R11, R10, -47 */
		/* 8211DA50h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFD1);
		/* 8211DA50h case   14:*/		return 0x8211DA54;
		  /* 8211DA54h */ case   15:  		/* cntlzw R11, R11 */
		/* 8211DA54h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8211DA54h case   15:*/		return 0x8211DA58;
		  /* 8211DA58h */ case   16:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8211DA58h case   16:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8211DA58h case   16:*/		return 0x8211DA5C;
		  /* 8211DA5Ch */ case   17:  		/* b 308 */
		/* 8211DA5Ch case   17:*/		return 0x8211DB90;
		/* 8211DA5Ch case   17:*/		return 0x8211DA60;
	}
	return 0x8211DA60;
} // Block from 8211DA18h-8211DA60h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211DA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DA60);
		  /* 8211DA60h */ case    0:  		/* cmpwi CR6, R10, 24 */
		/* 8211DA60h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000018);
		/* 8211DA60h case    0:*/		return 0x8211DA64;
		  /* 8211DA64h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 8211DA64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211DAA0;  }
		/* 8211DA64h case    1:*/		return 0x8211DA68;
	}
	return 0x8211DA68;
} // Block from 8211DA60h-8211DA68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DA68h
// Function '?ScoreCast@CParse@D3DXShader@@IAAIPAVCNode@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DA68);
		  /* 8211DA68h */ case    0:  		/* cmpwi CR6, R11, 24 */
		/* 8211DA68h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 8211DA68h case    0:*/		return 0x8211DA6C;
		  /* 8211DA6Ch */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 8211DA6Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DA6Ch case    1:*/		return 0x8211DA70;
		  /* 8211DA70h */ case    2:  		/* cmpwi CR6, R11, 25 */
		/* 8211DA70h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 8211DA70h case    2:*/		return 0x8211DA74;
		  /* 8211DA74h */ case    3:  		/* bc 12, CR6_EQ, 112 */
		/* 8211DA74h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DA74h case    3:*/		return 0x8211DA78;
		  /* 8211DA78h */ case    4:  		/* cmpwi CR6, R11, 27 */
		/* 8211DA78h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 8211DA78h case    4:*/		return 0x8211DA7C;
		  /* 8211DA7Ch */ case    5:  		/* bc 12, CR6_EQ, 104 */
		/* 8211DA7Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DA7Ch case    5:*/		return 0x8211DA80;
		  /* 8211DA80h */ case    6:  		/* cmpwi CR6, R11, 29 */
		/* 8211DA80h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 8211DA80h case    6:*/		return 0x8211DA84;
		  /* 8211DA84h */ case    7:  		/* bc 12, CR6_EQ, 96 */
		/* 8211DA84h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DA84h case    7:*/		return 0x8211DA88;
		  /* 8211DA88h */ case    8:  		/* cmpwi CR6, R11, 30 */
		/* 8211DA88h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001E);
		/* 8211DA88h case    8:*/		return 0x8211DA8C;
		  /* 8211DA8Ch */ case    9:  		/* bc 12, CR6_EQ, 88 */
		/* 8211DA8Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DA8Ch case    9:*/		return 0x8211DA90;
		  /* 8211DA90h */ case   10:  		/* cmpwi CR6, R11, 26 */
		/* 8211DA90h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001A);
		/* 8211DA90h case   10:*/		return 0x8211DA94;
		  /* 8211DA94h */ case   11:  		/* bc 12, CR6_EQ, 80 */
		/* 8211DA94h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DA94h case   11:*/		return 0x8211DA98;
		  /* 8211DA98h */ case   12:  		/* cmpwi CR6, R11, 28 */
		/* 8211DA98h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 8211DA98h case   12:*/		return 0x8211DA9C;
		  /* 8211DA9Ch */ case   13:  		/* b 68 */
		/* 8211DA9Ch case   13:*/		return 0x8211DAE0;
		/* 8211DA9Ch case   13:*/		return 0x8211DAA0;
	}
	return 0x8211DAA0;
} // Block from 8211DA68h-8211DAA0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211DAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DAA0);
		  /* 8211DAA0h */ case    0:  		/* cmpwi CR6, R10, 33 */
		/* 8211DAA0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000021);
		/* 8211DAA0h case    0:*/		return 0x8211DAA4;
		  /* 8211DAA4h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8211DAA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DABC;  }
		/* 8211DAA4h case    1:*/		return 0x8211DAA8;
		  /* 8211DAA8h */ case    2:  		/* cmpwi CR6, R10, 47 */
		/* 8211DAA8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000002F);
		/* 8211DAA8h case    2:*/		return 0x8211DAAC;
		  /* 8211DAACh */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8211DAACh case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DABC;  }
		/* 8211DAACh case    3:*/		return 0x8211DAB0;
		  /* 8211DAB0h */ case    4:  		/* cmpw CR6, R11, R10 */
		/* 8211DAB0h case    4:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8211DAB0h case    4:*/		return 0x8211DAB4;
		  /* 8211DAB4h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 8211DAB4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DAB4h case    5:*/		return 0x8211DAB8;
		  /* 8211DAB8h */ case    6:  		/* b -496 */
		/* 8211DAB8h case    6:*/		return 0x8211D8C8;
		/* 8211DAB8h case    6:*/		return 0x8211DABC;
	}
	return 0x8211DABC;
} // Block from 8211DAA0h-8211DABCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211DABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DABC);
		  /* 8211DABCh */ case    0:  		/* cmpwi CR6, R11, 33 */
		/* 8211DABCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 8211DABCh case    0:*/		return 0x8211DAC0;
		  /* 8211DAC0h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8211DAC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DAC0h case    1:*/		return 0x8211DAC4;
		  /* 8211DAC4h */ case    2:  		/* cmpwi CR6, R11, 34 */
		/* 8211DAC4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000022);
		/* 8211DAC4h case    2:*/		return 0x8211DAC8;
		  /* 8211DAC8h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 8211DAC8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DAC8h case    3:*/		return 0x8211DACC;
		  /* 8211DACCh */ case    4:  		/* cmpwi CR6, R11, 35 */
		/* 8211DACCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000023);
		/* 8211DACCh case    4:*/		return 0x8211DAD0;
		  /* 8211DAD0h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8211DAD0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DAD0h case    5:*/		return 0x8211DAD4;
		  /* 8211DAD4h */ case    6:  		/* cmpwi CR6, R11, 36 */
		/* 8211DAD4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000024);
		/* 8211DAD4h case    6:*/		return 0x8211DAD8;
		  /* 8211DAD8h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 8211DAD8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211DAE4;  }
		/* 8211DAD8h case    7:*/		return 0x8211DADC;
		  /* 8211DADCh */ case    8:  		/* cmpwi CR6, R11, 37 */
		/* 8211DADCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000025);
		/* 8211DADCh case    8:*/		return 0x8211DAE0;
	}
	return 0x8211DAE0;
} // Block from 8211DABCh-8211DAE0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211DAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DAE0);
		  /* 8211DAE0h */ case    0:  		/* bc 4, CR6_EQ, -536 */
		/* 8211DAE0h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8211D8C8;  }
		/* 8211DAE0h case    0:*/		return 0x8211DAE4;
	}
	return 0x8211DAE4;
} // Block from 8211DAE0h-8211DAE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DAE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DAE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DAE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DAE4);
		  /* 8211DAE4h */ case    0:  		/* mr R3, R28 */
		/* 8211DAE4h case    0:*/		regs.R3 = regs.R28;
		/* 8211DAE4h case    0:*/		return 0x8211DAE8;
		  /* 8211DAE8h */ case    1:  		/* lwz R5, <#[R31 + 24]> */
		/* 8211DAE8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8211DAE8h case    1:*/		return 0x8211DAEC;
		  /* 8211DAECh */ case    2:  		/* lwz R4, <#[R30 + 24]> */
		/* 8211DAECh case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000018) );
		/* 8211DAECh case    2:*/		return 0x8211DAF0;
		  /* 8211DAF0h */ case    3:  		/* bl -22520 */
		/* 8211DAF0h case    3:*/		regs.LR = 0x8211DAF4; return 0x821182F8;
		/* 8211DAF0h case    3:*/		return 0x8211DAF4;
		  /* 8211DAF4h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8211DAF4h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DAF4h case    4:*/		return 0x8211DAF8;
		  /* 8211DAF8h */ case    5:  		/* bc 12, CR0_EQ, -560 */
		/* 8211DAF8h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211D8C8;  }
		/* 8211DAF8h case    5:*/		return 0x8211DAFC;
		  /* 8211DAFCh */ case    6:  		/* b 156 */
		/* 8211DAFCh case    6:*/		return 0x8211DB98;
		/* 8211DAFCh case    6:*/		return 0x8211DB00;
	}
	return 0x8211DB00;
} // Block from 8211DAE4h-8211DB00h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211DB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DB00);
		  /* 8211DB00h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 8211DB00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8211DB00h case    0:*/		return 0x8211DB04;
		  /* 8211DB04h */ case    1:  		/* lwz R10, <#[R30 + 28]> */
		/* 8211DB04h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 8211DB04h case    1:*/		return 0x8211DB08;
		  /* 8211DB08h */ case    2:  		/* lwz R9, <#[R31 + 32]> */
		/* 8211DB08h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8211DB08h case    2:*/		return 0x8211DB0C;
		  /* 8211DB0Ch */ case    3:  		/* lwz R8, <#[R31 + 28]> */
		/* 8211DB0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8211DB0Ch case    3:*/		return 0x8211DB10;
		  /* 8211DB10h */ case    4:  		/* mullw R30, R11, R10 */
		/* 8211DB10h case    4:*/		cpu::op::mullw<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8211DB10h case    4:*/		return 0x8211DB14;
		  /* 8211DB14h */ case    5:  		/* mullw R11, R9, R8 */
		/* 8211DB14h case    5:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 8211DB14h case    5:*/		return 0x8211DB18;
		  /* 8211DB18h */ case    6:  		/* cmplw CR6, R30, R11 */
		/* 8211DB18h case    6:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8211DB18h case    6:*/		return 0x8211DB1C;
		  /* 8211DB1Ch */ case    7:  		/* bc 12, CR6_GT, -596 */
		/* 8211DB1Ch case    7:*/		if ( regs.CR[6].gt ) { return 0x8211D8C8;  }
		/* 8211DB1Ch case    7:*/		return 0x8211DB20;
		  /* 8211DB20h */ case    8:  		/* li R31, 0 */
		/* 8211DB20h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211DB20h case    8:*/		return 0x8211DB24;
		  /* 8211DB24h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 8211DB24h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211DB24h case    9:*/		return 0x8211DB28;
		  /* 8211DB28h */ case   10:  		/* bc 12, CR6_EQ, 100 */
		/* 8211DB28h case   10:*/		if ( regs.CR[6].eq ) { return 0x8211DB8C;  }
		/* 8211DB28h case   10:*/		return 0x8211DB2C;
		  /* 8211DB2Ch */ case   11:  		/* addi R6, R1, 144 */
		/* 8211DB2Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 8211DB2Ch case   11:*/		return 0x8211DB30;
		  /* 8211DB30h */ case   12:  		/* mr R5, R31 */
		/* 8211DB30h case   12:*/		regs.R5 = regs.R31;
		/* 8211DB30h case   12:*/		return 0x8211DB34;
		  /* 8211DB34h */ case   13:  		/* mr R4, R27 */
		/* 8211DB34h case   13:*/		regs.R4 = regs.R27;
		/* 8211DB34h case   13:*/		return 0x8211DB38;
		  /* 8211DB38h */ case   14:  		/* mr R3, R28 */
		/* 8211DB38h case   14:*/		regs.R3 = regs.R28;
		/* 8211DB38h case   14:*/		return 0x8211DB3C;
		  /* 8211DB3Ch */ case   15:  		/* bl -12900 */
		/* 8211DB3Ch case   15:*/		regs.LR = 0x8211DB40; return 0x8211A8D8;
		/* 8211DB3Ch case   15:*/		return 0x8211DB40;
		  /* 8211DB40h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8211DB40h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DB40h case   16:*/		return 0x8211DB44;
		  /* 8211DB44h */ case   17:  		/* bc 12, CR0_LT, -636 */
		/* 8211DB44h case   17:*/		if ( regs.CR[0].lt ) { return 0x8211D8C8;  }
		/* 8211DB44h case   17:*/		return 0x8211DB48;
		  /* 8211DB48h */ case   18:  		/* addi R6, R1, 192 */
		/* 8211DB48h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 8211DB48h case   18:*/		return 0x8211DB4C;
		  /* 8211DB4Ch */ case   19:  		/* mr R5, R31 */
		/* 8211DB4Ch case   19:*/		regs.R5 = regs.R31;
		/* 8211DB4Ch case   19:*/		return 0x8211DB50;
		  /* 8211DB50h */ case   20:  		/* mr R4, R26 */
		/* 8211DB50h case   20:*/		regs.R4 = regs.R26;
		/* 8211DB50h case   20:*/		return 0x8211DB54;
		  /* 8211DB54h */ case   21:  		/* mr R3, R28 */
		/* 8211DB54h case   21:*/		regs.R3 = regs.R28;
		/* 8211DB54h case   21:*/		return 0x8211DB58;
		  /* 8211DB58h */ case   22:  		/* bl -12928 */
		/* 8211DB58h case   22:*/		regs.LR = 0x8211DB5C; return 0x8211A8D8;
		/* 8211DB58h case   22:*/		return 0x8211DB5C;
		  /* 8211DB5Ch */ case   23:  		/* cmpwi CR0, R3, 0 */
		/* 8211DB5Ch case   23:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DB5Ch case   23:*/		return 0x8211DB60;
		  /* 8211DB60h */ case   24:  		/* bc 12, CR0_LT, -664 */
		/* 8211DB60h case   24:*/		if ( regs.CR[0].lt ) { return 0x8211D8C8;  }
		/* 8211DB60h case   24:*/		return 0x8211DB64;
		  /* 8211DB64h */ case   25:  		/* li R6, 1 */
		/* 8211DB64h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8211DB64h case   25:*/		return 0x8211DB68;
		  /* 8211DB68h */ case   26:  		/* addi R5, R1, 192 */
		/* 8211DB68h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 8211DB68h case   26:*/		return 0x8211DB6C;
		  /* 8211DB6Ch */ case   27:  		/* addi R4, R1, 144 */
		/* 8211DB6Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 8211DB6Ch case   27:*/		return 0x8211DB70;
		  /* 8211DB70h */ case   28:  		/* mr R3, R28 */
		/* 8211DB70h case   28:*/		regs.R3 = regs.R28;
		/* 8211DB70h case   28:*/		return 0x8211DB74;
		  /* 8211DB74h */ case   29:  		/* bl -2092 */
		/* 8211DB74h case   29:*/		regs.LR = 0x8211DB78; return 0x8211D348;
		/* 8211DB74h case   29:*/		return 0x8211DB78;
		  /* 8211DB78h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 8211DB78h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DB78h case   30:*/		return 0x8211DB7C;
		  /* 8211DB7Ch */ case   31:  		/* bc 12, CR0_EQ, -692 */
		/* 8211DB7Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x8211D8C8;  }
		/* 8211DB7Ch case   31:*/		return 0x8211DB80;
		  /* 8211DB80h */ case   32:  		/* addi R31, R31, 1 */
		/* 8211DB80h case   32:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8211DB80h case   32:*/		return 0x8211DB84;
		  /* 8211DB84h */ case   33:  		/* cmplw CR6, R31, R30 */
		/* 8211DB84h case   33:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 8211DB84h case   33:*/		return 0x8211DB88;
		  /* 8211DB88h */ case   34:  		/* bc 12, CR6_LT, -92 */
		/* 8211DB88h case   34:*/		if ( regs.CR[6].lt ) { return 0x8211DB2C;  }
		/* 8211DB88h case   34:*/		return 0x8211DB8C;
	}
	return 0x8211DB8C;
} // Block from 8211DB00h-8211DB8Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 8211DB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DB8C);
		  /* 8211DB8Ch */ case    0:  		/* mr R11, R29 */
		/* 8211DB8Ch case    0:*/		regs.R11 = regs.R29;
		/* 8211DB8Ch case    0:*/		return 0x8211DB90;
	}
	return 0x8211DB90;
} // Block from 8211DB8Ch-8211DB90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DB90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DB90);
		  /* 8211DB90h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 8211DB90h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211DB90h case    0:*/		return 0x8211DB94;
	}
	return 0x8211DB94;
} // Block from 8211DB90h-8211DB94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DB94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DB94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DB94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DB94);
		  /* 8211DB94h */ case    0:  		/* bc 12, CR6_EQ, -716 */
		/* 8211DB94h case    0:*/		if ( regs.CR[6].eq ) { return 0x8211D8C8;  }
		/* 8211DB94h case    0:*/		return 0x8211DB98;
	}
	return 0x8211DB98;
} // Block from 8211DB94h-8211DB98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DB98);
		  /* 8211DB98h */ case    0:  		/* lis R11, -32256 */
		/* 8211DB98h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211DB98h case    0:*/		return 0x8211DB9C;
		  /* 8211DB9Ch */ case    1:  		/* addi R31, R11, 4485 */
		/* 8211DB9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1185);
		/* 8211DB9Ch case    1:*/		return 0x8211DBA0;
		  /* 8211DBA0h */ case    2:  		/* b -720 */
		/* 8211DBA0h case    2:*/		return 0x8211D8D0;
		/* 8211DBA0h case    2:*/		return 0x8211DBA4;
	}
	return 0x8211DBA4;
} // Block from 8211DB98h-8211DBA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211DBA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DBA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DBA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DBA4);
		  /* 8211DBA4h */ case    0:  		/* lis R11, -32253 */
		/* 8211DBA4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211DBA4h case    0:*/		return 0x8211DBA8;
		  /* 8211DBA8h */ case    1:  		/* addi R10, R1, 240 */
		/* 8211DBA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 8211DBA8h case    1:*/		return 0x8211DBAC;
		  /* 8211DBACh */ case    2:  		/* addi R6, R11, 9092 */
		/* 8211DBACh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2384);
		/* 8211DBACh case    2:*/		return 0x8211DBB0;
		  /* 8211DBB0h */ case    3:  		/* addi R9, R1, 496 */
		/* 8211DBB0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x1F0);
		/* 8211DBB0h case    3:*/		return 0x8211DBB4;
		  /* 8211DBB4h */ case    4:  		/* mr R8, R31 */
		/* 8211DBB4h case    4:*/		regs.R8 = regs.R31;
		/* 8211DBB4h case    4:*/		return 0x8211DBB8;
		  /* 8211DBB8h */ case    5:  		/* mr R7, R25 */
		/* 8211DBB8h case    5:*/		regs.R7 = regs.R25;
		/* 8211DBB8h case    5:*/		return 0x8211DBBC;
		  /* 8211DBBCh */ case    6:  		/* bl -17180 */
		/* 8211DBBCh case    6:*/		regs.LR = 0x8211DBC0; return 0x821198A0;
		/* 8211DBBCh case    6:*/		return 0x8211DBC0;
	}
	return 0x8211DBC0;
} // Block from 8211DBA4h-8211DBC0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211DBC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DBC0);
		  /* 8211DBC0h */ case    0:  		/* addi R1, R1, 832 */
		/* 8211DBC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x340);
		/* 8211DBC0h case    0:*/		return 0x8211DBC4;
		  /* 8211DBC4h */ case    1:  		/* b -575788 */
		/* 8211DBC4h case    1:*/		return 0x82091298;
		/* 8211DBC4h case    1:*/		return 0x8211DBC8;
	}
	return 0x8211DBC8;
} // Block from 8211DBC0h-8211DBC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DBC8);
		  /* 8211DBC8h */ case    0:  		/* mfspr R12, LR */
		/* 8211DBC8h case    0:*/		regs.R12 = regs.LR;
		/* 8211DBC8h case    0:*/		return 0x8211DBCC;
		  /* 8211DBCCh */ case    1:  		/* bl -575872 */
		/* 8211DBCCh case    1:*/		regs.LR = 0x8211DBD0; return 0x8209124C;
		/* 8211DBCCh case    1:*/		return 0x8211DBD0;
		  /* 8211DBD0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8211DBD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8211DBD0h case    2:*/		return 0x8211DBD4;
		  /* 8211DBD4h */ case    3:  		/* mr R28, R3 */
		/* 8211DBD4h case    3:*/		regs.R28 = regs.R3;
		/* 8211DBD4h case    3:*/		return 0x8211DBD8;
	}
	return 0x8211DBD8;
} // Block from 8211DBC8h-8211DBD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211DBD8h
// Function '?ApplyUsage@CParse@D3DXShader@@IAAJPAVCNode@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DBD8);
		  /* 8211DBD8h */ case    0:  		/* mr R30, R4 */
		/* 8211DBD8h case    0:*/		regs.R30 = regs.R4;
		/* 8211DBD8h case    0:*/		return 0x8211DBDC;
		  /* 8211DBDCh */ case    1:  		/* mr R29, R5 */
		/* 8211DBDCh case    1:*/		regs.R29 = regs.R5;
		/* 8211DBDCh case    1:*/		return 0x8211DBE0;
		  /* 8211DBE0h */ case    2:  		/* mr R26, R6 */
		/* 8211DBE0h case    2:*/		regs.R26 = regs.R6;
		/* 8211DBE0h case    2:*/		return 0x8211DBE4;
		  /* 8211DBE4h */ case    3:  		/* mr R25, R7 */
		/* 8211DBE4h case    3:*/		regs.R25 = regs.R7;
		/* 8211DBE4h case    3:*/		return 0x8211DBE8;
		  /* 8211DBE8h */ case    4:  		/* mr R27, R8 */
		/* 8211DBE8h case    4:*/		regs.R27 = regs.R8;
		/* 8211DBE8h case    4:*/		return 0x8211DBEC;
		  /* 8211DBECh */ case    5:  		/* cmplwi CR6, R6, 0 */
		/* 8211DBECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8211DBECh case    5:*/		return 0x8211DBF0;
		  /* 8211DBF0h */ case    6:  		/* bc 12, CR6_EQ, 360 */
		/* 8211DBF0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211DD58;  }
		/* 8211DBF0h case    6:*/		return 0x8211DBF4;
		  /* 8211DBF4h */ case    7:  		/* cmplwi CR6, R7, 0 */
		/* 8211DBF4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8211DBF4h case    7:*/		return 0x8211DBF8;
		  /* 8211DBF8h */ case    8:  		/* bc 12, CR6_EQ, 352 */
		/* 8211DBF8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211DD58;  }
		/* 8211DBF8h case    8:*/		return 0x8211DBFC;
		  /* 8211DBFCh */ case    9:  		/* li R11, 0 */
		/* 8211DBFCh case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211DBFCh case    9:*/		return 0x8211DC00;
		  /* 8211DC00h */ case   10:  		/* cmplwi CR6, R8, 0 */
		/* 8211DC00h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8211DC00h case   10:*/		return 0x8211DC04;
		  /* 8211DC04h */ case   11:  		/* stw R11, <#[R6]> */
		/* 8211DC04h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8211DC04h case   11:*/		return 0x8211DC08;
		  /* 8211DC08h */ case   12:  		/* stw R11, <#[R7]> */
		/* 8211DC08h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8211DC08h case   12:*/		return 0x8211DC0C;
		  /* 8211DC0Ch */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 8211DC0Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8211DC14;  }
		/* 8211DC0Ch case   13:*/		return 0x8211DC10;
		  /* 8211DC10h */ case   14:  		/* stw R11, <#[R8]> */
		/* 8211DC10h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8211DC10h case   14:*/		return 0x8211DC14;
	}
	return 0x8211DC14;
} // Block from 8211DBD8h-8211DC14h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211DC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DC14);
		  /* 8211DC14h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211DC14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211DC14h case    0:*/		return 0x8211DC18;
		  /* 8211DC18h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 8211DC18h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211DC2C;  }
		/* 8211DC18h case    1:*/		return 0x8211DC1C;
		  /* 8211DC1Ch */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8211DC1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211DC1Ch case    2:*/		return 0x8211DC20;
		  /* 8211DC20h */ case    3:  		/* bc 4, CR6_EQ, 312 */
		/* 8211DC20h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211DD58;  }
		/* 8211DC20h case    3:*/		return 0x8211DC24;
		  /* 8211DC24h */ case    4:  		/* li R3, 0 */
		/* 8211DC24h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211DC24h case    4:*/		return 0x8211DC28;
		  /* 8211DC28h */ case    5:  		/* b 312 */
		/* 8211DC28h case    5:*/		return 0x8211DD60;
		/* 8211DC28h case    5:*/		return 0x8211DC2C;
	}
	return 0x8211DC2C;
} // Block from 8211DC14h-8211DC2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211DC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DC2C);
		  /* 8211DC2Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211DC2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211DC2Ch case    0:*/		return 0x8211DC30;
		  /* 8211DC30h */ case    1:  		/* bc 12, CR6_EQ, 296 */
		/* 8211DC30h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DD58;  }
		/* 8211DC30h case    1:*/		return 0x8211DC34;
		  /* 8211DC34h */ case    2:  		/* mr R4, R30 */
		/* 8211DC34h case    2:*/		regs.R4 = regs.R30;
		/* 8211DC34h case    2:*/		return 0x8211DC38;
		  /* 8211DC38h */ case    3:  		/* mr R3, R28 */
		/* 8211DC38h case    3:*/		regs.R3 = regs.R28;
		/* 8211DC38h case    3:*/		return 0x8211DC3C;
		  /* 8211DC3Ch */ case    4:  		/* bl -14444 */
		/* 8211DC3Ch case    4:*/		regs.LR = 0x8211DC40; return 0x8211A3D0;
		/* 8211DC3Ch case    4:*/		return 0x8211DC40;
		  /* 8211DC40h */ case    5:  		/* mr R31, R3 */
		/* 8211DC40h case    5:*/		regs.R31 = regs.R3;
		/* 8211DC40h case    5:*/		return 0x8211DC44;
		  /* 8211DC44h */ case    6:  		/* mr R4, R29 */
		/* 8211DC44h case    6:*/		regs.R4 = regs.R29;
		/* 8211DC44h case    6:*/		return 0x8211DC48;
		  /* 8211DC48h */ case    7:  		/* mr R3, R28 */
		/* 8211DC48h case    7:*/		regs.R3 = regs.R28;
		/* 8211DC48h case    7:*/		return 0x8211DC4C;
		  /* 8211DC4Ch */ case    8:  		/* bl -14460 */
		/* 8211DC4Ch case    8:*/		regs.LR = 0x8211DC50; return 0x8211A3D0;
		/* 8211DC4Ch case    8:*/		return 0x8211DC50;
		  /* 8211DC50h */ case    9:  		/* cmplw CR6, R31, R3 */
		/* 8211DC50h case    9:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 8211DC50h case    9:*/		return 0x8211DC54;
		  /* 8211DC54h */ case   10:  		/* bc 12, CR6_LT, 32 */
		/* 8211DC54h case   10:*/		if ( regs.CR[6].lt ) { return 0x8211DC74;  }
		/* 8211DC54h case   10:*/		return 0x8211DC58;
		  /* 8211DC58h */ case   11:  		/* li R6, 0 */
		/* 8211DC58h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211DC58h case   11:*/		return 0x8211DC5C;
		  /* 8211DC5Ch */ case   12:  		/* mr R5, R29 */
		/* 8211DC5Ch case   12:*/		regs.R5 = regs.R29;
		/* 8211DC5Ch case   12:*/		return 0x8211DC60;
		  /* 8211DC60h */ case   13:  		/* mr R4, R30 */
		/* 8211DC60h case   13:*/		regs.R4 = regs.R30;
		/* 8211DC60h case   13:*/		return 0x8211DC64;
		  /* 8211DC64h */ case   14:  		/* mr R3, R28 */
		/* 8211DC64h case   14:*/		regs.R3 = regs.R28;
		/* 8211DC64h case   14:*/		return 0x8211DC68;
		  /* 8211DC68h */ case   15:  		/* bl -2336 */
		/* 8211DC68h case   15:*/		regs.LR = 0x8211DC6C; return 0x8211D348;
		/* 8211DC68h case   15:*/		return 0x8211DC6C;
		  /* 8211DC6Ch */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8211DC6Ch case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DC6Ch case   16:*/		return 0x8211DC70;
		  /* 8211DC70h */ case   17:  		/* bc 4, CR0_EQ, 68 */
		/* 8211DC70h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8211DCB4;  }
		/* 8211DC70h case   17:*/		return 0x8211DC74;
	}
	return 0x8211DC74;
} // Block from 8211DC2Ch-8211DC74h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211DC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DC74);
		  /* 8211DC74h */ case    0:  		/* li R6, 0 */
		/* 8211DC74h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211DC74h case    0:*/		return 0x8211DC78;
		  /* 8211DC78h */ case    1:  		/* mr R5, R30 */
		/* 8211DC78h case    1:*/		regs.R5 = regs.R30;
		/* 8211DC78h case    1:*/		return 0x8211DC7C;
		  /* 8211DC7Ch */ case    2:  		/* mr R4, R29 */
		/* 8211DC7Ch case    2:*/		regs.R4 = regs.R29;
		/* 8211DC7Ch case    2:*/		return 0x8211DC80;
		  /* 8211DC80h */ case    3:  		/* mr R3, R28 */
		/* 8211DC80h case    3:*/		regs.R3 = regs.R28;
		/* 8211DC80h case    3:*/		return 0x8211DC84;
		  /* 8211DC84h */ case    4:  		/* bl -2364 */
		/* 8211DC84h case    4:*/		regs.LR = 0x8211DC88; return 0x8211D348;
		/* 8211DC84h case    4:*/		return 0x8211DC88;
		  /* 8211DC88h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 8211DC88h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DC88h case    5:*/		return 0x8211DC8C;
		  /* 8211DC8Ch */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 8211DC8Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8211DC98;  }
		/* 8211DC8Ch case    6:*/		return 0x8211DC90;
		  /* 8211DC90h */ case    7:  		/* mr R31, R29 */
		/* 8211DC90h case    7:*/		regs.R31 = regs.R29;
		/* 8211DC90h case    7:*/		return 0x8211DC94;
		  /* 8211DC94h */ case    8:  		/* b 36 */
		/* 8211DC94h case    8:*/		return 0x8211DCB8;
		/* 8211DC94h case    8:*/		return 0x8211DC98;
	}
	return 0x8211DC98;
} // Block from 8211DC74h-8211DC98h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211DC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DC98);
		  /* 8211DC98h */ case    0:  		/* li R6, 0 */
		/* 8211DC98h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211DC98h case    0:*/		return 0x8211DC9C;
		  /* 8211DC9Ch */ case    1:  		/* mr R5, R29 */
		/* 8211DC9Ch case    1:*/		regs.R5 = regs.R29;
		/* 8211DC9Ch case    1:*/		return 0x8211DCA0;
		  /* 8211DCA0h */ case    2:  		/* mr R4, R30 */
		/* 8211DCA0h case    2:*/		regs.R4 = regs.R30;
		/* 8211DCA0h case    2:*/		return 0x8211DCA4;
		  /* 8211DCA4h */ case    3:  		/* mr R3, R28 */
		/* 8211DCA4h case    3:*/		regs.R3 = regs.R28;
		/* 8211DCA4h case    3:*/		return 0x8211DCA8;
		  /* 8211DCA8h */ case    4:  		/* bl -2400 */
		/* 8211DCA8h case    4:*/		regs.LR = 0x8211DCAC; return 0x8211D348;
		/* 8211DCA8h case    4:*/		return 0x8211DCAC;
		  /* 8211DCACh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 8211DCACh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DCACh case    5:*/		return 0x8211DCB0;
		  /* 8211DCB0h */ case    6:  		/* bc 12, CR0_EQ, 168 */
		/* 8211DCB0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211DD58;  }
		/* 8211DCB0h case    6:*/		return 0x8211DCB4;
	}
	return 0x8211DCB4;
} // Block from 8211DC98h-8211DCB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211DCB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DCB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DCB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DCB4);
		  /* 8211DCB4h */ case    0:  		/* mr R31, R30 */
		/* 8211DCB4h case    0:*/		regs.R31 = regs.R30;
		/* 8211DCB4h case    0:*/		return 0x8211DCB8;
	}
	return 0x8211DCB8;
} // Block from 8211DCB4h-8211DCB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DCB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DCB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DCB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DCB8);
		  /* 8211DCB8h */ case    0:  		/* addi R6, R1, 80 */
		/* 8211DCB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8211DCB8h case    0:*/		return 0x8211DCBC;
		  /* 8211DCBCh */ case    1:  		/* mr R5, R29 */
		/* 8211DCBCh case    1:*/		regs.R5 = regs.R29;
		/* 8211DCBCh case    1:*/		return 0x8211DCC0;
		  /* 8211DCC0h */ case    2:  		/* mr R4, R30 */
		/* 8211DCC0h case    2:*/		regs.R4 = regs.R30;
		/* 8211DCC0h case    2:*/		return 0x8211DCC4;
		  /* 8211DCC4h */ case    3:  		/* mr R3, R28 */
		/* 8211DCC4h case    3:*/		regs.R3 = regs.R28;
		/* 8211DCC4h case    3:*/		return 0x8211DCC8;
	}
	return 0x8211DCC8;
} // Block from 8211DCB8h-8211DCC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211DCC8h
// Function '?CombineUsages@CParse@D3DXShader@@IAAJPAVCNode@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DCC8);
		  /* 8211DCC8h */ case    0:  		/* bl -22664 */
		/* 8211DCC8h case    0:*/		regs.LR = 0x8211DCCC; return 0x82118440;
		/* 8211DCC8h case    0:*/		return 0x8211DCCC;
		  /* 8211DCCCh */ case    1:  		/* cmpwi CR0, R3, 0 */
		/* 8211DCCCh case    1:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211DCCCh case    1:*/		return 0x8211DCD0;
		  /* 8211DCD0h */ case    2:  		/* bc 12, CR0_LT, 144 */
		/* 8211DCD0h case    2:*/		if ( regs.CR[0].lt ) { return 0x8211DD60;  }
		/* 8211DCD0h case    2:*/		return 0x8211DCD4;
		  /* 8211DCD4h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8211DCD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8211DCD4h case    3:*/		return 0x8211DCD8;
		  /* 8211DCD8h */ case    4:  		/* lwz R30, <#[R1 + 80]> */
		/* 8211DCD8h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 8211DCD8h case    4:*/		return 0x8211DCDC;
		  /* 8211DCDCh */ case    5:  		/* cmpw CR6, R11, R30 */
		/* 8211DCDCh case    5:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R30);
		/* 8211DCDCh case    5:*/		return 0x8211DCE0;
		  /* 8211DCE0h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 8211DCE0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211DD14;  }
		/* 8211DCE0h case    6:*/		return 0x8211DCE4;
		  /* 8211DCE4h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 8211DCE4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211DCE4h case    7:*/		return 0x8211DCE8;
		  /* 8211DCE8h */ case    8:  		/* mr R3, R31 */
		/* 8211DCE8h case    8:*/		regs.R3 = regs.R31;
		/* 8211DCE8h case    8:*/		return 0x8211DCEC;
		  /* 8211DCECh */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211DCECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211DCECh case    9:*/		return 0x8211DCF0;
		  /* 8211DCF0h */ case   10:  		/* mtspr CTR, R11 */
		/* 8211DCF0h case   10:*/		regs.CTR = regs.R11;
		/* 8211DCF0h case   10:*/		return 0x8211DCF4;
		  /* 8211DCF4h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8211DCF4h case   11:*/		if ( 1 ) { regs.LR = 0x8211DCF8; return (uint32)regs.CTR; }
		/* 8211DCF4h case   11:*/		return 0x8211DCF8;
		  /* 8211DCF8h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 8211DCF8h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211DCF8h case   12:*/		return 0x8211DCFC;
		  /* 8211DCFCh */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 8211DCFCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x8211DD0C;  }
		/* 8211DCFCh case   13:*/		return 0x8211DD00;
		  /* 8211DD00h */ case   14:  		/* lis R3, -32761 */
		/* 8211DD00h case   14:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8211DD00h case   14:*/		return 0x8211DD04;
		  /* 8211DD04h */ case   15:  		/* ori R3, R3, 14 */
		/* 8211DD04h case   15:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8211DD04h case   15:*/		return 0x8211DD08;
		  /* 8211DD08h */ case   16:  		/* b 88 */
		/* 8211DD08h case   16:*/		return 0x8211DD60;
		/* 8211DD08h case   16:*/		return 0x8211DD0C;
	}
	return 0x8211DD0C;
} // Block from 8211DCC8h-8211DD0Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211DD0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DD0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DD0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DD0C);
		  /* 8211DD0Ch */ case    0:  		/* stw R30, <#[R3 + 20]> */
		/* 8211DD0Ch case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000014) );
		/* 8211DD0Ch case    0:*/		return 0x8211DD10;
		  /* 8211DD10h */ case    1:  		/* mr R31, R3 */
		/* 8211DD10h case    1:*/		regs.R31 = regs.R3;
		/* 8211DD10h case    1:*/		return 0x8211DD14;
	}
	return 0x8211DD14;
} // Block from 8211DD0Ch-8211DD14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DD14);
		  /* 8211DD14h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8211DD14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211DD14h case    0:*/		return 0x8211DD18;
		  /* 8211DD18h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 8211DD18h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DD48;  }
		/* 8211DD18h case    1:*/		return 0x8211DD1C;
		  /* 8211DD1Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8211DD1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211DD1Ch case    2:*/		return 0x8211DD20;
		  /* 8211DD20h */ case    3:  		/* mr R3, R31 */
		/* 8211DD20h case    3:*/		regs.R3 = regs.R31;
		/* 8211DD20h case    3:*/		return 0x8211DD24;
		  /* 8211DD24h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211DD24h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211DD24h case    4:*/		return 0x8211DD28;
		  /* 8211DD28h */ case    5:  		/* mtspr CTR, R11 */
		/* 8211DD28h case    5:*/		regs.CTR = regs.R11;
		/* 8211DD28h case    5:*/		return 0x8211DD2C;
		  /* 8211DD2Ch */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8211DD2Ch case    6:*/		if ( 1 ) { regs.LR = 0x8211DD30; return (uint32)regs.CTR; }
		/* 8211DD2Ch case    6:*/		return 0x8211DD30;
		  /* 8211DD30h */ case    7:  		/* or. R4, R3, R3 */
		/* 8211DD30h case    7:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8211DD30h case    7:*/		return 0x8211DD34;
		  /* 8211DD34h */ case    8:  		/* stw R4, <#[R27]> */
		/* 8211DD34h case    8:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 8211DD34h case    8:*/		return 0x8211DD38;
		  /* 8211DD38h */ case    9:  		/* bc 12, CR0_EQ, -56 */
		/* 8211DD38h case    9:*/		if ( regs.CR[0].eq ) { return 0x8211DD00;  }
		/* 8211DD38h case    9:*/		return 0x8211DD3C;
		  /* 8211DD3Ch */ case   10:  		/* li R5, 1 */
		/* 8211DD3Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8211DD3Ch case   10:*/		return 0x8211DD40;
		  /* 8211DD40h */ case   11:  		/* mr R3, R28 */
		/* 8211DD40h case   11:*/		regs.R3 = regs.R28;
		/* 8211DD40h case   11:*/		return 0x8211DD44;
		  /* 8211DD44h */ case   12:  		/* bl -15356 */
		/* 8211DD44h case   12:*/		regs.LR = 0x8211DD48; return 0x8211A148;
		/* 8211DD44h case   12:*/		return 0x8211DD48;
	}
	return 0x8211DD48;
} // Block from 8211DD14h-8211DD48h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211DD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DD48);
		  /* 8211DD48h */ case    0:  		/* stw R31, <#[R26]> */
		/* 8211DD48h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8211DD48h case    0:*/		return 0x8211DD4C;
		  /* 8211DD4Ch */ case    1:  		/* li R3, 0 */
		/* 8211DD4Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211DD4Ch case    1:*/		return 0x8211DD50;
		  /* 8211DD50h */ case    2:  		/* stw R31, <#[R25]> */
		/* 8211DD50h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 8211DD50h case    2:*/		return 0x8211DD54;
		  /* 8211DD54h */ case    3:  		/* b 12 */
		/* 8211DD54h case    3:*/		return 0x8211DD60;
		/* 8211DD54h case    3:*/		return 0x8211DD58;
	}
	return 0x8211DD58;
} // Block from 8211DD48h-8211DD58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211DD58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DD58);
		  /* 8211DD58h */ case    0:  		/* lis R3, -32768 */
		/* 8211DD58h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211DD58h case    0:*/		return 0x8211DD5C;
		  /* 8211DD5Ch */ case    1:  		/* ori R3, R3, 16389 */
		/* 8211DD5Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211DD5Ch case    1:*/		return 0x8211DD60;
	}
	return 0x8211DD60;
} // Block from 8211DD58h-8211DD60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DD60);
		  /* 8211DD60h */ case    0:  		/* addi R1, R1, 160 */
		/* 8211DD60h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8211DD60h case    0:*/		return 0x8211DD64;
		  /* 8211DD64h */ case    1:  		/* b -576200 */
		/* 8211DD64h case    1:*/		return 0x8209129C;
		/* 8211DD64h case    1:*/		return 0x8211DD68;
	}
	return 0x8211DD68;
} // Block from 8211DD60h-8211DD68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DD68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DD68);
		  /* 8211DD68h */ case    0:  		/* mfspr R12, LR */
		/* 8211DD68h case    0:*/		regs.R12 = regs.LR;
		/* 8211DD68h case    0:*/		return 0x8211DD6C;
		  /* 8211DD6Ch */ case    1:  		/* bl -576284 */
		/* 8211DD6Ch case    1:*/		regs.LR = 0x8211DD70; return 0x82091250;
		/* 8211DD6Ch case    1:*/		return 0x8211DD70;
		  /* 8211DD70h */ case    2:  		/* stfd FR31, <#[R1 - 64]> */
		/* 8211DD70h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8211DD70h case    2:*/		return 0x8211DD74;
		  /* 8211DD74h */ case    3:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211DD74h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211DD74h case    3:*/		return 0x8211DD78;
		  /* 8211DD78h */ case    4:  		/* mr R26, R3 */
		/* 8211DD78h case    4:*/		regs.R26 = regs.R3;
		/* 8211DD78h case    4:*/		return 0x8211DD7C;
		  /* 8211DD7Ch */ case    5:  		/* fmr FR31, FR1 */
		/* 8211DD7Ch case    5:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8211DD7Ch case    5:*/		return 0x8211DD80;
		  /* 8211DD80h */ case    6:  		/* mr R31, R4 */
		/* 8211DD80h case    6:*/		regs.R31 = regs.R4;
		/* 8211DD80h case    6:*/		return 0x8211DD84;
		  /* 8211DD84h */ case    7:  		/* mr R27, R5 */
		/* 8211DD84h case    7:*/		regs.R27 = regs.R5;
		/* 8211DD84h case    7:*/		return 0x8211DD88;
		  /* 8211DD88h */ case    8:  		/* mr R28, R7 */
		/* 8211DD88h case    8:*/		regs.R28 = regs.R7;
		/* 8211DD88h case    8:*/		return 0x8211DD8C;
		  /* 8211DD8Ch */ case    9:  		/* li R29, 2 */
		/* 8211DD8Ch case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x2);
		/* 8211DD8Ch case    9:*/		return 0x8211DD90;
		  /* 8211DD90h */ case   10:  		/* cmpwi CR6, R4, 5 */
		/* 8211DD90h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000005);
		/* 8211DD90h case   10:*/		return 0x8211DD94;
		  /* 8211DD94h */ case   11:  		/* bc 12, CR6_GT, 96 */
		/* 8211DD94h case   11:*/		if ( regs.CR[6].gt ) { return 0x8211DDF4;  }
		/* 8211DD94h case   11:*/		return 0x8211DD98;
		  /* 8211DD98h */ case   12:  		/* cmpwi CR6, R4, 2 */
		/* 8211DD98h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000002);
		/* 8211DD98h case   12:*/		return 0x8211DD9C;
		  /* 8211DD9Ch */ case   13:  		/* bc 4, CR6_LT, 80 */
		/* 8211DD9Ch case   13:*/		if ( !regs.CR[6].lt ) { return 0x8211DDEC;  }
		/* 8211DD9Ch case   13:*/		return 0x8211DDA0;
		  /* 8211DDA0h */ case   14:  		/* cmplwi CR6, R4, 1 */
		/* 8211DDA0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000001);
		/* 8211DDA0h case   14:*/		return 0x8211DDA4;
		  /* 8211DDA4h */ case   15:  		/* bc 12, CR6_LT, 64 */
		/* 8211DDA4h case   15:*/		if ( regs.CR[6].lt ) { return 0x8211DDE4;  }
		/* 8211DDA4h case   15:*/		return 0x8211DDA8;
		  /* 8211DDA8h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 8211DDA8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8211DDB0;  }
		/* 8211DDA8h case   16:*/		return 0x8211DDAC;
		  /* 8211DDACh */ case   17:  		/* li R29, 2 */
		/* 8211DDACh case   17:*/		cpu::op::li<0>(regs,&regs.R29,0x2);
		/* 8211DDACh case   17:*/		return 0x8211DDB0;
	}
	return 0x8211DDB0;
} // Block from 8211DD68h-8211DDB0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211DDB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DDB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DDB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DDB0);
		  /* 8211DDB0h */ case    0:  		/* li R3, 88 */
		/* 8211DDB0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211DDB0h case    0:*/		return 0x8211DDB4;
		  /* 8211DDB4h */ case    1:  		/* bl -347020 */
		/* 8211DDB4h case    1:*/		regs.LR = 0x8211DDB8; return 0x820C9228;
		/* 8211DDB4h case    1:*/		return 0x8211DDB8;
		  /* 8211DDB8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211DDB8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211DDB8h case    2:*/		return 0x8211DDBC;
		  /* 8211DDBCh */ case    3:  		/* bc 12, CR0_EQ, 88 */
		/* 8211DDBCh case    3:*/		if ( regs.CR[0].eq ) { return 0x8211DE14;  }
		/* 8211DDBCh case    3:*/		return 0x8211DDC0;
		  /* 8211DDC0h */ case    4:  		/* mr R9, R28 */
		/* 8211DDC0h case    4:*/		regs.R9 = regs.R28;
		/* 8211DDC0h case    4:*/		return 0x8211DDC4;
		  /* 8211DDC4h */ case    5:  		/* li R8, 1 */
		/* 8211DDC4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211DDC4h case    5:*/		return 0x8211DDC8;
		  /* 8211DDC8h */ case    6:  		/* li R7, 0 */
		/* 8211DDC8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211DDC8h case    6:*/		return 0x8211DDCC;
		  /* 8211DDCCh */ case    7:  		/* li R6, 0 */
		/* 8211DDCCh case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211DDCCh case    7:*/		return 0x8211DDD0;
		  /* 8211DDD0h */ case    8:  		/* li R5, 0 */
		/* 8211DDD0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211DDD0h case    8:*/		return 0x8211DDD4;
		  /* 8211DDD4h */ case    9:  		/* li R4, 0 */
		/* 8211DDD4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211DDD4h case    9:*/		return 0x8211DDD8;
		  /* 8211DDD8h */ case   10:  		/* bl -335440 */
		/* 8211DDD8h case   10:*/		regs.LR = 0x8211DDDC; return 0x820CBF88;
		/* 8211DDD8h case   10:*/		return 0x8211DDDC;
		  /* 8211DDDCh */ case   11:  		/* mr R30, R3 */
		/* 8211DDDCh case   11:*/		regs.R30 = regs.R3;
		/* 8211DDDCh case   11:*/		return 0x8211DDE0;
		  /* 8211DDE0h */ case   12:  		/* b 56 */
		/* 8211DDE0h case   12:*/		return 0x8211DE18;
		/* 8211DDE0h case   12:*/		return 0x8211DDE4;
	}
	return 0x8211DDE4;
} // Block from 8211DDB0h-8211DDE4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211DDE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DDE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DDE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DDE4);
		  /* 8211DDE4h */ case    0:  		/* li R29, 0 */
		/* 8211DDE4h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8211DDE4h case    0:*/		return 0x8211DDE8;
		  /* 8211DDE8h */ case    1:  		/* b -56 */
		/* 8211DDE8h case    1:*/		return 0x8211DDB0;
		/* 8211DDE8h case    1:*/		return 0x8211DDEC;
	}
	return 0x8211DDEC;
} // Block from 8211DDE4h-8211DDECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DDECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DDEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DDEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DDEC);
		  /* 8211DDECh */ case    0:  		/* li R29, 1 */
		/* 8211DDECh case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8211DDECh case    0:*/		return 0x8211DDF0;
		  /* 8211DDF0h */ case    1:  		/* b -64 */
		/* 8211DDF0h case    1:*/		return 0x8211DDB0;
		/* 8211DDF0h case    1:*/		return 0x8211DDF4;
	}
	return 0x8211DDF4;
} // Block from 8211DDECh-8211DDF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DDF4);
		  /* 8211DDF4h */ case    0:  		/* cmpwi CR6, R31, 6 */
		/* 8211DDF4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000006);
		/* 8211DDF4h case    0:*/		return 0x8211DDF8;
		  /* 8211DDF8h */ case    1:  		/* bc 12, CR6_LT, -72 */
		/* 8211DDF8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8211DDB0;  }
		/* 8211DDF8h case    1:*/		return 0x8211DDFC;
		  /* 8211DDFCh */ case    2:  		/* cmpwi CR6, R31, 9 */
		/* 8211DDFCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000009);
		/* 8211DDFCh case    2:*/		return 0x8211DE00;
		  /* 8211DE00h */ case    3:  		/* bc 4, CR6_GT, -84 */
		/* 8211DE00h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8211DDAC;  }
		/* 8211DE00h case    3:*/		return 0x8211DE04;
		  /* 8211DE04h */ case    4:  		/* cmpwi CR6, R31, 13 */
		/* 8211DE04h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000000D);
		/* 8211DE04h case    4:*/		return 0x8211DE08;
		  /* 8211DE08h */ case    5:  		/* bc 12, CR6_GT, -88 */
		/* 8211DE08h case    5:*/		if ( regs.CR[6].gt ) { return 0x8211DDB0;  }
		/* 8211DE08h case    5:*/		return 0x8211DE0C;
		  /* 8211DE0Ch */ case    6:  		/* li R29, 3 */
		/* 8211DE0Ch case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x3);
		/* 8211DE0Ch case    6:*/		return 0x8211DE10;
		  /* 8211DE10h */ case    7:  		/* b -96 */
		/* 8211DE10h case    7:*/		return 0x8211DDB0;
		/* 8211DE10h case    7:*/		return 0x8211DE14;
	}
	return 0x8211DE14;
} // Block from 8211DDF4h-8211DE14h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211DE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DE14);
		  /* 8211DE14h */ case    0:  		/* li R30, 0 */
		/* 8211DE14h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211DE14h case    0:*/		return 0x8211DE18;
	}
	return 0x8211DE18;
} // Block from 8211DE14h-8211DE18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DE18);
		  /* 8211DE18h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211DE18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211DE18h case    0:*/		return 0x8211DE1C;
		  /* 8211DE1Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8211DE1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211DE28;  }
		/* 8211DE1Ch case    1:*/		return 0x8211DE20;
		  /* 8211DE20h */ case    2:  		/* li R3, 0 */
		/* 8211DE20h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211DE20h case    2:*/		return 0x8211DE24;
		  /* 8211DE24h */ case    3:  		/* b 236 */
		/* 8211DE24h case    3:*/		return 0x8211DF10;
		/* 8211DE24h case    3:*/		return 0x8211DE28;
	}
	return 0x8211DE28;
} // Block from 8211DE18h-8211DE28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211DE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DE28);
		  /* 8211DE28h */ case    0:  		/* li R3, 40 */
		/* 8211DE28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211DE28h case    0:*/		return 0x8211DE2C;
		  /* 8211DE2Ch */ case    1:  		/* bl -347140 */
		/* 8211DE2Ch case    1:*/		regs.LR = 0x8211DE30; return 0x820C9228;
		/* 8211DE2Ch case    1:*/		return 0x8211DE30;
		  /* 8211DE30h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211DE30h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211DE30h case    2:*/		return 0x8211DE34;
		  /* 8211DE34h */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 8211DE34h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211DE58;  }
		/* 8211DE34h case    3:*/		return 0x8211DE38;
		  /* 8211DE38h */ case    4:  		/* li R9, 512 */
		/* 8211DE38h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8211DE38h case    4:*/		return 0x8211DE3C;
		  /* 8211DE3Ch */ case    5:  		/* li R8, 1 */
		/* 8211DE3Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211DE3Ch case    5:*/		return 0x8211DE40;
		  /* 8211DE40h */ case    6:  		/* li R7, 1 */
		/* 8211DE40h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8211DE40h case    6:*/		return 0x8211DE44;
		  /* 8211DE44h */ case    7:  		/* li R6, 0 */
		/* 8211DE44h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211DE44h case    7:*/		return 0x8211DE48;
		  /* 8211DE48h */ case    8:  		/* mr R5, R31 */
		/* 8211DE48h case    8:*/		regs.R5 = regs.R31;
		/* 8211DE48h case    8:*/		return 0x8211DE4C;
		  /* 8211DE4Ch */ case    9:  		/* li R4, 0 */
		/* 8211DE4Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211DE4Ch case    9:*/		return 0x8211DE50;
		  /* 8211DE50h */ case   10:  		/* bl -340432 */
		/* 8211DE50h case   10:*/		regs.LR = 0x8211DE54; return 0x820CAC80;
		/* 8211DE50h case   10:*/		return 0x8211DE54;
		  /* 8211DE54h */ case   11:  		/* b 8 */
		/* 8211DE54h case   11:*/		return 0x8211DE5C;
		/* 8211DE54h case   11:*/		return 0x8211DE58;
	}
	return 0x8211DE58;
} // Block from 8211DE28h-8211DE58h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211DE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DE58);
		  /* 8211DE58h */ case    0:  		/* li R3, 0 */
		/* 8211DE58h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211DE58h case    0:*/		return 0x8211DE5C;
	}
	return 0x8211DE5C;
} // Block from 8211DE58h-8211DE5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DE5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DE5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DE5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DE5C);
		  /* 8211DE5Ch */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 8211DE5Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 8211DE5Ch case    0:*/		return 0x8211DE60;
		  /* 8211DE60h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211DE60h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211DE60h case    1:*/		return 0x8211DE64;
		  /* 8211DE64h */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 8211DE64h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211DE20;  }
		/* 8211DE64h case    2:*/		return 0x8211DE68;
		  /* 8211DE68h */ case    3:  		/* cmpwi CR6, R29, 3 */
		/* 8211DE68h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000003);
		/* 8211DE68h case    3:*/		return 0x8211DE6C;
		  /* 8211DE6Ch */ case    4:  		/* li R3, 72 */
		/* 8211DE6Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211DE6Ch case    4:*/		return 0x8211DE70;
		  /* 8211DE70h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8211DE70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211DE94;  }
		/* 8211DE70h case    5:*/		return 0x8211DE74;
		  /* 8211DE74h */ case    6:  		/* bl -347212 */
		/* 8211DE74h case    6:*/		regs.LR = 0x8211DE78; return 0x820C9228;
		/* 8211DE74h case    6:*/		return 0x8211DE78;
		  /* 8211DE78h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8211DE78h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211DE78h case    7:*/		return 0x8211DE7C;
		  /* 8211DE7Ch */ case    8:  		/* bc 12, CR0_EQ, 56 */
		/* 8211DE7Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8211DEB4;  }
		/* 8211DE7Ch case    8:*/		return 0x8211DE80;
		  /* 8211DE80h */ case    9:  		/* mr R6, R28 */
		/* 8211DE80h case    9:*/		regs.R6 = regs.R28;
		/* 8211DE80h case    9:*/		return 0x8211DE84;
		  /* 8211DE84h */ case   10:  		/* fmr FR1, FR31 */
		/* 8211DE84h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8211DE84h case   10:*/		return 0x8211DE88;
		  /* 8211DE88h */ case   11:  		/* li R4, 3 */
		/* 8211DE88h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8211DE88h case   11:*/		return 0x8211DE8C;
		  /* 8211DE8Ch */ case   12:  		/* bl -334444 */
		/* 8211DE8Ch case   12:*/		regs.LR = 0x8211DE90; return 0x820CC420;
		/* 8211DE8Ch case   12:*/		return 0x8211DE90;
		  /* 8211DE90h */ case   13:  		/* b 40 */
		/* 8211DE90h case   13:*/		return 0x8211DEB8;
		/* 8211DE90h case   13:*/		return 0x8211DE94;
	}
	return 0x8211DE94;
} // Block from 8211DE5Ch-8211DE94h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211DE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DE94);
		  /* 8211DE94h */ case    0:  		/* bl -347244 */
		/* 8211DE94h case    0:*/		regs.LR = 0x8211DE98; return 0x820C9228;
		/* 8211DE94h case    0:*/		return 0x8211DE98;
		  /* 8211DE98h */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 8211DE98h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211DE98h case    1:*/		return 0x8211DE9C;
		  /* 8211DE9Ch */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 8211DE9Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8211DEB4;  }
		/* 8211DE9Ch case    2:*/		return 0x8211DEA0;
		  /* 8211DEA0h */ case    3:  		/* mr R6, R28 */
		/* 8211DEA0h case    3:*/		regs.R6 = regs.R28;
		/* 8211DEA0h case    3:*/		return 0x8211DEA4;
		  /* 8211DEA4h */ case    4:  		/* mr R5, R27 */
		/* 8211DEA4h case    4:*/		regs.R5 = regs.R27;
		/* 8211DEA4h case    4:*/		return 0x8211DEA8;
		  /* 8211DEA8h */ case    5:  		/* mr R4, R29 */
		/* 8211DEA8h case    5:*/		regs.R4 = regs.R29;
		/* 8211DEA8h case    5:*/		return 0x8211DEAC;
		  /* 8211DEACh */ case    6:  		/* bl -334548 */
		/* 8211DEACh case    6:*/		regs.LR = 0x8211DEB0; return 0x820CC3D8;
		/* 8211DEACh case    6:*/		return 0x8211DEB0;
	}
	return 0x8211DEB0;
} // Block from 8211DE94h-8211DEB0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211DEB0h
// Function '?IsSupportedCast@CParse@D3DXShader@@IAAHPAVCNode@2@0H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DEB0);
		  /* 8211DEB0h */ case    0:  		/* b 8 */
		/* 8211DEB0h case    0:*/		return 0x8211DEB8;
		/* 8211DEB0h case    0:*/		return 0x8211DEB4;
	}
	return 0x8211DEB4;
} // Block from 8211DEB0h-8211DEB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DEB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DEB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DEB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DEB4);
		  /* 8211DEB4h */ case    0:  		/* li R3, 0 */
		/* 8211DEB4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211DEB4h case    0:*/		return 0x8211DEB8;
	}
	return 0x8211DEB8;
} // Block from 8211DEB4h-8211DEB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DEB8);
		  /* 8211DEB8h */ case    0:  		/* rlwinm R11, R3, 0, 0, 31 */
		/* 8211DEB8h case    0:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R3);
		/* 8211DEB8h case    0:*/		return 0x8211DEBC;
		  /* 8211DEBCh */ case    1:  		/* stw R3, <#[R30 + 32]> */
		/* 8211DEBCh case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8211DEBCh case    1:*/		return 0x8211DEC0;
		  /* 8211DEC0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8211DEC0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211DEC0h case    2:*/		return 0x8211DEC4;
		  /* 8211DEC4h */ case    3:  		/* bc 12, CR6_EQ, -164 */
		/* 8211DEC4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211DE20;  }
		/* 8211DEC4h case    3:*/		return 0x8211DEC8;
		  /* 8211DEC8h */ case    4:  		/* li R3, 20 */
		/* 8211DEC8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211DEC8h case    4:*/		return 0x8211DECC;
		  /* 8211DECCh */ case    5:  		/* bl -347300 */
		/* 8211DECCh case    5:*/		regs.LR = 0x8211DED0; return 0x820C9228;
		/* 8211DECCh case    5:*/		return 0x8211DED0;
		  /* 8211DED0h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8211DED0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211DED0h case    6:*/		return 0x8211DED4;
		  /* 8211DED4h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 8211DED4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8211DEF0;  }
		/* 8211DED4h case    7:*/		return 0x8211DED8;
		  /* 8211DED8h */ case    8:  		/* lis R11, -32253 */
		/* 8211DED8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211DED8h case    8:*/		return 0x8211DEDC;
		  /* 8211DEDCh */ case    9:  		/* lwz R4, <#[R30 + 32]> */
		/* 8211DEDCh case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 8211DEDCh case    9:*/		return 0x8211DEE0;
		  /* 8211DEE0h */ case   10:  		/* li R5, 0 */
		/* 8211DEE0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211DEE0h case   10:*/		return 0x8211DEE4;
		  /* 8211DEE4h */ case   11:  		/* addi R6, R11, 9184 */
		/* 8211DEE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 8211DEE4h case   11:*/		return 0x8211DEE8;
		  /* 8211DEE8h */ case   12:  		/* bl -346872 */
		/* 8211DEE8h case   12:*/		regs.LR = 0x8211DEEC; return 0x820C93F0;
		/* 8211DEE8h case   12:*/		return 0x8211DEEC;
		  /* 8211DEECh */ case   13:  		/* b 8 */
		/* 8211DEECh case   13:*/		return 0x8211DEF4;
		/* 8211DEECh case   13:*/		return 0x8211DEF0;
	}
	return 0x8211DEF0;
} // Block from 8211DEB8h-8211DEF0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211DEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DEF0);
		  /* 8211DEF0h */ case    0:  		/* li R3, 0 */
		/* 8211DEF0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211DEF0h case    0:*/		return 0x8211DEF4;
	}
	return 0x8211DEF4;
} // Block from 8211DEF0h-8211DEF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DEF4);
		  /* 8211DEF4h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211DEF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211DEF4h case    0:*/		return 0x8211DEF8;
		  /* 8211DEF8h */ case    1:  		/* bc 12, CR6_EQ, -216 */
		/* 8211DEF8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211DE20;  }
		/* 8211DEF8h case    1:*/		return 0x8211DEFC;
		  /* 8211DEFCh */ case    2:  		/* stw R3, <#[R30 + 32]> */
		/* 8211DEFCh case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8211DEFCh case    2:*/		return 0x8211DF00;
		  /* 8211DF00h */ case    3:  		/* mr R4, R30 */
		/* 8211DF00h case    3:*/		regs.R4 = regs.R30;
		/* 8211DF00h case    3:*/		return 0x8211DF04;
		  /* 8211DF04h */ case    4:  		/* mr R3, R26 */
		/* 8211DF04h case    4:*/		regs.R3 = regs.R26;
		/* 8211DF04h case    4:*/		return 0x8211DF08;
		  /* 8211DF08h */ case    5:  		/* bl -7920 */
		/* 8211DF08h case    5:*/		regs.LR = 0x8211DF0C; return 0x8211C018;
		/* 8211DF08h case    5:*/		return 0x8211DF0C;
		  /* 8211DF0Ch */ case    6:  		/* mr R3, R30 */
		/* 8211DF0Ch case    6:*/		regs.R3 = regs.R30;
		/* 8211DF0Ch case    6:*/		return 0x8211DF10;
	}
	return 0x8211DF10;
} // Block from 8211DEF4h-8211DF10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211DF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DF10);
		  /* 8211DF10h */ case    0:  		/* addi R1, R1, 144 */
		/* 8211DF10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211DF10h case    0:*/		return 0x8211DF14;
		  /* 8211DF14h */ case    1:  		/* lfd FR31, <#[R1 - 64]> */
		/* 8211DF14h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8211DF14h case    1:*/		return 0x8211DF18;
		  /* 8211DF18h */ case    2:  		/* b -576632 */
		/* 8211DF18h case    2:*/		return 0x820912A0;
		/* 8211DF18h case    2:*/		return 0x8211DF1C;
		  /* 8211DF1Ch */ case    3:  		/* nop */
		/* 8211DF1Ch case    3:*/		cpu::op::nop();
		/* 8211DF1Ch case    3:*/		return 0x8211DF20;
		  /* 8211DF20h */ case    4:  		/* lis R10, -32256 */
		/* 8211DF20h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211DF20h case    4:*/		return 0x8211DF24;
		  /* 8211DF24h */ case    5:  		/* li R5, 0 */
		/* 8211DF24h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211DF24h case    5:*/		return 0x8211DF28;
		  /* 8211DF28h */ case    6:  		/* addi R7, R3, 40 */
		/* 8211DF28h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R3,0x28);
		/* 8211DF28h case    6:*/		return 0x8211DF2C;
		  /* 8211DF2Ch */ case    7:  		/* li R11, 6 */
		/* 8211DF2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8211DF2Ch case    7:*/		return 0x8211DF30;
		  /* 8211DF30h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 8211DF30h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211DF30h case    8:*/		return 0x8211DF34;
		  /* 8211DF34h */ case    9:  		/* lfd FR1, <#[R10 + 1808]> */
		/* 8211DF34h case    9:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00000710) );
		/* 8211DF34h case    9:*/		return 0x8211DF38;
		  /* 8211DF38h */ case   10:  		/* bc 12, CR6_EQ, 168 */
		/* 8211DF38h case   10:*/		if ( regs.CR[6].eq ) { return 0x8211DFE0;  }
		/* 8211DF38h case   10:*/		return 0x8211DF3C;
		  /* 8211DF3Ch */ case   11:  		/* lwz R10, <#[R4 + 4]> */
		/* 8211DF3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 8211DF3Ch case   11:*/		return 0x8211DF40;
		  /* 8211DF40h */ case   12:  		/* cmpwi CR6, R10, 3 */
		/* 8211DF40h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8211DF40h case   12:*/		return 0x8211DF44;
		  /* 8211DF44h */ case   13:  		/* bc 4, CR6_EQ, 156 */
		/* 8211DF44h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8211DFE0;  }
		/* 8211DF44h case   13:*/		return 0x8211DF48;
		  /* 8211DF48h */ case   14:  		/* lwz R10, <#[R4 + 16]> */
		/* 8211DF48h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 8211DF48h case   14:*/		return 0x8211DF4C;
		  /* 8211DF4Ch */ case   15:  		/* addi R7, R4, 16 */
		/* 8211DF4Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R4,0x10);
		/* 8211DF4Ch case   15:*/		return 0x8211DF50;
		  /* 8211DF50h */ case   16:  		/* cmpwi CR6, R10, 2 */
		/* 8211DF50h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 8211DF50h case   16:*/		return 0x8211DF54;
		  /* 8211DF54h */ case   17:  		/* bc 12, CR6_EQ, 132 */
		/* 8211DF54h case   17:*/		if ( regs.CR[6].eq ) { return 0x8211DFD8;  }
		/* 8211DF54h case   17:*/		return 0x8211DF58;
		  /* 8211DF58h */ case   18:  		/* cmpwi CR6, R10, 3 */
		/* 8211DF58h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8211DF58h case   18:*/		return 0x8211DF5C;
		  /* 8211DF5Ch */ case   19:  		/* bc 12, CR6_EQ, 100 */
		/* 8211DF5Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x8211DFC0;  }
		/* 8211DF5Ch case   19:*/		return 0x8211DF60;
		  /* 8211DF60h */ case   20:  		/* cmpwi CR6, R10, 4 */
		/* 8211DF60h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000004);
		/* 8211DF60h case   20:*/		return 0x8211DF64;
		  /* 8211DF64h */ case   21:  		/* bc 12, CR6_EQ, 84 */
		/* 8211DF64h case   21:*/		if ( regs.CR[6].eq ) { return 0x8211DFB8;  }
		/* 8211DF64h case   21:*/		return 0x8211DF68;
		  /* 8211DF68h */ case   22:  		/* cmpwi CR6, R10, 7 */
		/* 8211DF68h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000007);
		/* 8211DF68h case   22:*/		return 0x8211DF6C;
		  /* 8211DF6Ch */ case   23:  		/* bc 12, CR6_EQ, 64 */
		/* 8211DF6Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x8211DFAC;  }
		/* 8211DF6Ch case   23:*/		return 0x8211DF70;
		  /* 8211DF70h */ case   24:  		/* cmpwi CR6, R10, 8 */
		/* 8211DF70h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000008);
		/* 8211DF70h case   24:*/		return 0x8211DF74;
		  /* 8211DF74h */ case   25:  		/* bc 12, CR6_EQ, 44 */
		/* 8211DF74h case   25:*/		if ( regs.CR[6].eq ) { return 0x8211DFA0;  }
		/* 8211DF74h case   25:*/		return 0x8211DF78;
		  /* 8211DF78h */ case   26:  		/* cmpwi CR6, R10, 9 */
		/* 8211DF78h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 8211DF78h case   26:*/		return 0x8211DF7C;
		  /* 8211DF7Ch */ case   27:  		/* bc 12, CR6_EQ, 24 */
		/* 8211DF7Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x8211DF94;  }
		/* 8211DF7Ch case   27:*/		return 0x8211DF80;
		  /* 8211DF80h */ case   28:  		/* cmpwi CR6, R10, 10 */
		/* 8211DF80h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000A);
		/* 8211DF80h case   28:*/		return 0x8211DF84;
		  /* 8211DF84h */ case   29:  		/* bc 4, CR6_EQ, 92 */
		/* 8211DF84h case   29:*/		if ( !regs.CR[6].eq ) { return 0x8211DFE0;  }
		/* 8211DF84h case   29:*/		return 0x8211DF88;
		  /* 8211DF88h */ case   30:  		/* lfd FR1, <#[R7 + 8]> */
		/* 8211DF88h case   30:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R7 + 0x00000008) );
		/* 8211DF88h case   30:*/		return 0x8211DF8C;
		  /* 8211DF8Ch */ case   31:  		/* li R11, 13 */
		/* 8211DF8Ch case   31:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 8211DF8Ch case   31:*/		return 0x8211DF90;
		  /* 8211DF90h */ case   32:  		/* b 80 */
		/* 8211DF90h case   32:*/		return 0x8211DFE0;
		/* 8211DF90h case   32:*/		return 0x8211DF94;
	}
	return 0x8211DF94;
} // Block from 8211DF10h-8211DF94h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8211DF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DF94);
		  /* 8211DF94h */ case    0:  		/* lfd FR1, <#[R7 + 8]> */
		/* 8211DF94h case    0:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R7 + 0x00000008) );
		/* 8211DF94h case    0:*/		return 0x8211DF98;
		  /* 8211DF98h */ case    1:  		/* li R11, 12 */
		/* 8211DF98h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 8211DF98h case    1:*/		return 0x8211DF9C;
		  /* 8211DF9Ch */ case    2:  		/* b 68 */
		/* 8211DF9Ch case    2:*/		return 0x8211DFE0;
		/* 8211DF9Ch case    2:*/		return 0x8211DFA0;
	}
	return 0x8211DFA0;
} // Block from 8211DF94h-8211DFA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFA0);
		  /* 8211DFA0h */ case    0:  		/* lfd FR1, <#[R7 + 8]> */
		/* 8211DFA0h case    0:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R7 + 0x00000008) );
		/* 8211DFA0h case    0:*/		return 0x8211DFA4;
		  /* 8211DFA4h */ case    1:  		/* li R11, 11 */
		/* 8211DFA4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 8211DFA4h case    1:*/		return 0x8211DFA8;
		  /* 8211DFA8h */ case    2:  		/* b 56 */
		/* 8211DFA8h case    2:*/		return 0x8211DFE0;
		/* 8211DFA8h case    2:*/		return 0x8211DFAC;
	}
	return 0x8211DFAC;
} // Block from 8211DFA0h-8211DFACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFAC);
		  /* 8211DFACh */ case    0:  		/* lfd FR1, <#[R7 + 8]> */
		/* 8211DFACh case    0:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R7 + 0x00000008) );
		/* 8211DFACh case    0:*/		return 0x8211DFB0;
		  /* 8211DFB0h */ case    1:  		/* li R11, 10 */
		/* 8211DFB0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 8211DFB0h case    1:*/		return 0x8211DFB4;
		  /* 8211DFB4h */ case    2:  		/* b 44 */
		/* 8211DFB4h case    2:*/		return 0x8211DFE0;
		/* 8211DFB4h case    2:*/		return 0x8211DFB8;
	}
	return 0x8211DFB8;
} // Block from 8211DFACh-8211DFB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFB8);
		  /* 8211DFB8h */ case    0:  		/* li R11, 9 */
		/* 8211DFB8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 8211DFB8h case    0:*/		return 0x8211DFBC;
		  /* 8211DFBCh */ case    1:  		/* b 32 */
		/* 8211DFBCh case    1:*/		return 0x8211DFDC;
		/* 8211DFBCh case    1:*/		return 0x8211DFC0;
	}
	return 0x8211DFC0;
} // Block from 8211DFB8h-8211DFC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFC0);
		  /* 8211DFC0h */ case    0:  		/* lwz R5, <#[R7 + 8]> */
		/* 8211DFC0h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x00000008) );
		/* 8211DFC0h case    0:*/		return 0x8211DFC4;
		  /* 8211DFC4h */ case    1:  		/* li R11, 5 */
		/* 8211DFC4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8211DFC4h case    1:*/		return 0x8211DFC8;
		  /* 8211DFC8h */ case    2:  		/* rlwinm. R10, R5, 0, 0, 0 */
		/* 8211DFC8h case    2:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R5);
		/* 8211DFC8h case    2:*/		return 0x8211DFCC;
		  /* 8211DFCCh */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 8211DFCCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8211DFE0;  }
		/* 8211DFCCh case    3:*/		return 0x8211DFD0;
		  /* 8211DFD0h */ case    4:  		/* li R11, 1 */
		/* 8211DFD0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8211DFD0h case    4:*/		return 0x8211DFD4;
		  /* 8211DFD4h */ case    5:  		/* b 12 */
		/* 8211DFD4h case    5:*/		return 0x8211DFE0;
		/* 8211DFD4h case    5:*/		return 0x8211DFD8;
	}
	return 0x8211DFD8;
} // Block from 8211DFC0h-8211DFD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFD8);
		  /* 8211DFD8h */ case    0:  		/* li R11, 6 */
		/* 8211DFD8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8211DFD8h case    0:*/		return 0x8211DFDC;
	}
	return 0x8211DFDC;
} // Block from 8211DFD8h-8211DFDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFDC);
		  /* 8211DFDCh */ case    0:  		/* lwz R5, <#[R7 + 8]> */
		/* 8211DFDCh case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + 0x00000008) );
		/* 8211DFDCh case    0:*/		return 0x8211DFE0;
	}
	return 0x8211DFE0;
} // Block from 8211DFDCh-8211DFE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFE0);
		  /* 8211DFE0h */ case    0:  		/* mr R4, R11 */
		/* 8211DFE0h case    0:*/		regs.R4 = regs.R11;
		/* 8211DFE0h case    0:*/		return 0x8211DFE4;
		  /* 8211DFE4h */ case    1:  		/* b -636 */
		/* 8211DFE4h case    1:*/		return 0x8211DD68;
		/* 8211DFE4h case    1:*/		return 0x8211DFE8;
	}
	return 0x8211DFE8;
} // Block from 8211DFE0h-8211DFE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211DFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211DFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211DFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211DFE8);
		  /* 8211DFE8h */ case    0:  		/* mfspr R12, LR */
		/* 8211DFE8h case    0:*/		regs.R12 = regs.LR;
		/* 8211DFE8h case    0:*/		return 0x8211DFEC;
		  /* 8211DFECh */ case    1:  		/* bl -576912 */
		/* 8211DFECh case    1:*/		regs.LR = 0x8211DFF0; return 0x8209125C;
		/* 8211DFECh case    1:*/		return 0x8211DFF0;
		  /* 8211DFF0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8211DFF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8211DFF0h case    2:*/		return 0x8211DFF4;
		  /* 8211DFF4h */ case    3:  		/* mr R29, R3 */
		/* 8211DFF4h case    3:*/		regs.R29 = regs.R3;
		/* 8211DFF4h case    3:*/		return 0x8211DFF8;
		  /* 8211DFF8h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 8211DFF8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211DFF8h case    4:*/		return 0x8211DFFC;
		  /* 8211DFFCh */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8211DFFCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211E008;  }
		/* 8211DFFCh case    5:*/		return 0x8211E000;
		  /* 8211E000h */ case    6:  		/* li R3, 0 */
		/* 8211E000h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E000h case    6:*/		return 0x8211E004;
		  /* 8211E004h */ case    7:  		/* b 296 */
		/* 8211E004h case    7:*/		return 0x8211E12C;
		/* 8211E004h case    7:*/		return 0x8211E008;
	}
	return 0x8211E008;
} // Block from 8211DFE8h-8211E008h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211E008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E008);
		  /* 8211E008h */ case    0:  		/* li R3, 88 */
		/* 8211E008h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211E008h case    0:*/		return 0x8211E00C;
		  /* 8211E00Ch */ case    1:  		/* addi R31, R4, 16 */
		/* 8211E00Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R4,0x10);
		/* 8211E00Ch case    1:*/		return 0x8211E010;
		  /* 8211E010h */ case    2:  		/* bl -347624 */
		/* 8211E010h case    2:*/		regs.LR = 0x8211E014; return 0x820C9228;
		/* 8211E010h case    2:*/		return 0x8211E014;
		  /* 8211E014h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8211E014h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E014h case    3:*/		return 0x8211E018;
		  /* 8211E018h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 8211E018h case    4:*/		if ( regs.CR[0].eq ) { return 0x8211E040;  }
		/* 8211E018h case    4:*/		return 0x8211E01C;
		  /* 8211E01Ch */ case    5:  		/* mr R9, R31 */
		/* 8211E01Ch case    5:*/		regs.R9 = regs.R31;
		/* 8211E01Ch case    5:*/		return 0x8211E020;
		  /* 8211E020h */ case    6:  		/* li R8, 1 */
		/* 8211E020h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211E020h case    6:*/		return 0x8211E024;
		  /* 8211E024h */ case    7:  		/* li R7, 0 */
		/* 8211E024h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211E024h case    7:*/		return 0x8211E028;
		  /* 8211E028h */ case    8:  		/* li R6, 0 */
		/* 8211E028h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E028h case    8:*/		return 0x8211E02C;
		  /* 8211E02Ch */ case    9:  		/* li R5, 0 */
		/* 8211E02Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E02Ch case    9:*/		return 0x8211E030;
		  /* 8211E030h */ case   10:  		/* li R4, 0 */
		/* 8211E030h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211E030h case   10:*/		return 0x8211E034;
		  /* 8211E034h */ case   11:  		/* bl -336044 */
		/* 8211E034h case   11:*/		regs.LR = 0x8211E038; return 0x820CBF88;
		/* 8211E034h case   11:*/		return 0x8211E038;
		  /* 8211E038h */ case   12:  		/* mr R30, R3 */
		/* 8211E038h case   12:*/		regs.R30 = regs.R3;
		/* 8211E038h case   12:*/		return 0x8211E03C;
		  /* 8211E03Ch */ case   13:  		/* b 8 */
		/* 8211E03Ch case   13:*/		return 0x8211E044;
		/* 8211E03Ch case   13:*/		return 0x8211E040;
	}
	return 0x8211E040;
} // Block from 8211E008h-8211E040h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211E040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E040);
		  /* 8211E040h */ case    0:  		/* li R30, 0 */
		/* 8211E040h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211E040h case    0:*/		return 0x8211E044;
	}
	return 0x8211E044;
} // Block from 8211E040h-8211E044h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E044);
		  /* 8211E044h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211E044h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211E044h case    0:*/		return 0x8211E048;
		  /* 8211E048h */ case    1:  		/* bc 12, CR6_EQ, -72 */
		/* 8211E048h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211E000;  }
		/* 8211E048h case    1:*/		return 0x8211E04C;
		  /* 8211E04Ch */ case    2:  		/* li R3, 40 */
		/* 8211E04Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211E04Ch case    2:*/		return 0x8211E050;
		  /* 8211E050h */ case    3:  		/* bl -347688 */
		/* 8211E050h case    3:*/		regs.LR = 0x8211E054; return 0x820C9228;
		/* 8211E050h case    3:*/		return 0x8211E054;
		  /* 8211E054h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8211E054h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E054h case    4:*/		return 0x8211E058;
		  /* 8211E058h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8211E058h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211E07C;  }
		/* 8211E058h case    5:*/		return 0x8211E05C;
		  /* 8211E05Ch */ case    6:  		/* li R9, 512 */
		/* 8211E05Ch case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8211E05Ch case    6:*/		return 0x8211E060;
		  /* 8211E060h */ case    7:  		/* li R8, 1 */
		/* 8211E060h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211E060h case    7:*/		return 0x8211E064;
		  /* 8211E064h */ case    8:  		/* li R7, 1 */
		/* 8211E064h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8211E064h case    8:*/		return 0x8211E068;
		  /* 8211E068h */ case    9:  		/* li R6, 0 */
		/* 8211E068h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E068h case    9:*/		return 0x8211E06C;
		  /* 8211E06Ch */ case   10:  		/* li R5, 23 */
		/* 8211E06Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x17);
		/* 8211E06Ch case   10:*/		return 0x8211E070;
		  /* 8211E070h */ case   11:  		/* li R4, 3 */
		/* 8211E070h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8211E070h case   11:*/		return 0x8211E074;
		  /* 8211E074h */ case   12:  		/* bl -340980 */
		/* 8211E074h case   12:*/		regs.LR = 0x8211E078; return 0x820CAC80;
		/* 8211E074h case   12:*/		return 0x8211E078;
		  /* 8211E078h */ case   13:  		/* b 8 */
		/* 8211E078h case   13:*/		return 0x8211E080;
		/* 8211E078h case   13:*/		return 0x8211E07C;
	}
	return 0x8211E07C;
} // Block from 8211E044h-8211E07Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211E07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E07C);
		  /* 8211E07Ch */ case    0:  		/* li R3, 0 */
		/* 8211E07Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E07Ch case    0:*/		return 0x8211E080;
	}
	return 0x8211E080;
} // Block from 8211E07Ch-8211E080h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E080);
		  /* 8211E080h */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 8211E080h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 8211E080h case    0:*/		return 0x8211E084;
		  /* 8211E084h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211E084h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E084h case    1:*/		return 0x8211E088;
		  /* 8211E088h */ case    2:  		/* bc 12, CR6_EQ, -136 */
		/* 8211E088h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E000;  }
		/* 8211E088h case    2:*/		return 0x8211E08C;
		  /* 8211E08Ch */ case    3:  		/* li R3, 72 */
		/* 8211E08Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211E08Ch case    3:*/		return 0x8211E090;
		  /* 8211E090h */ case    4:  		/* bl -347752 */
		/* 8211E090h case    4:*/		regs.LR = 0x8211E094; return 0x820C9228;
		/* 8211E090h case    4:*/		return 0x8211E094;
		  /* 8211E094h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211E094h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E094h case    5:*/		return 0x8211E098;
		  /* 8211E098h */ case    6:  		/* bc 12, CR0_EQ, 60 */
		/* 8211E098h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211E0D4;  }
		/* 8211E098h case    6:*/		return 0x8211E09C;
		  /* 8211E09Ch */ case    7:  		/* lwz R5, <#[R31 + 8]> */
		/* 8211E09Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 8211E09Ch case    7:*/		return 0x8211E0A0;
		  /* 8211E0A0h */ case    8:  		/* mr R11, R5 */
		/* 8211E0A0h case    8:*/		regs.R11 = regs.R5;
		/* 8211E0A0h case    8:*/		return 0x8211E0A4;
		  /* 8211E0A4h */ case    9:  		/* lbz R10, <#[R11]> */
		/* 8211E0A4h case    9:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211E0A4h case    9:*/		return 0x8211E0A8;
		  /* 8211E0A8h */ case   10:  		/* addi R11, R11, 1 */
		/* 8211E0A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211E0A8h case   10:*/		return 0x8211E0AC;
		  /* 8211E0ACh */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 8211E0ACh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211E0ACh case   11:*/		return 0x8211E0B0;
		  /* 8211E0B0h */ case   12:  		/* bc 4, CR6_EQ, -12 */
		/* 8211E0B0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8211E0A4;  }
		/* 8211E0B0h case   12:*/		return 0x8211E0B4;
		  /* 8211E0B4h */ case   13:  		/* subf R11, R5, R11 */
		/* 8211E0B4h case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 8211E0B4h case   13:*/		return 0x8211E0B8;
		  /* 8211E0B8h */ case   14:  		/* mr R7, R31 */
		/* 8211E0B8h case   14:*/		regs.R7 = regs.R31;
		/* 8211E0B8h case   14:*/		return 0x8211E0BC;
		  /* 8211E0BCh */ case   15:  		/* addi R11, R11, -1 */
		/* 8211E0BCh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8211E0BCh case   15:*/		return 0x8211E0C0;
		  /* 8211E0C0h */ case   16:  		/* li R4, 5 */
		/* 8211E0C0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8211E0C0h case   16:*/		return 0x8211E0C4;
		  /* 8211E0C4h */ case   17:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8211E0C4h case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8211E0C4h case   17:*/		return 0x8211E0C8;
		  /* 8211E0C8h */ case   18:  		/* addi R6, R11, 1 */
		/* 8211E0C8h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1);
		/* 8211E0C8h case   18:*/		return 0x8211E0CC;
		  /* 8211E0CCh */ case   19:  		/* bl -334948 */
		/* 8211E0CCh case   19:*/		regs.LR = 0x8211E0D0; return 0x820CC468;
		/* 8211E0CCh case   19:*/		return 0x8211E0D0;
		  /* 8211E0D0h */ case   20:  		/* b 8 */
		/* 8211E0D0h case   20:*/		return 0x8211E0D8;
		/* 8211E0D0h case   20:*/		return 0x8211E0D4;
	}
	return 0x8211E0D4;
} // Block from 8211E080h-8211E0D4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8211E0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E0D4);
		  /* 8211E0D4h */ case    0:  		/* li R3, 0 */
		/* 8211E0D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E0D4h case    0:*/		return 0x8211E0D8;
	}
	return 0x8211E0D8;
} // Block from 8211E0D4h-8211E0D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E0D8);
		  /* 8211E0D8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211E0D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E0D8h case    0:*/		return 0x8211E0DC;
		  /* 8211E0DCh */ case    1:  		/* stw R3, <#[R30 + 32]> */
		/* 8211E0DCh case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8211E0DCh case    1:*/		return 0x8211E0E0;
		  /* 8211E0E0h */ case    2:  		/* bc 12, CR6_EQ, -224 */
		/* 8211E0E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E000;  }
		/* 8211E0E0h case    2:*/		return 0x8211E0E4;
		  /* 8211E0E4h */ case    3:  		/* li R3, 20 */
		/* 8211E0E4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211E0E4h case    3:*/		return 0x8211E0E8;
		  /* 8211E0E8h */ case    4:  		/* bl -347840 */
		/* 8211E0E8h case    4:*/		regs.LR = 0x8211E0EC; return 0x820C9228;
		/* 8211E0E8h case    4:*/		return 0x8211E0EC;
		  /* 8211E0ECh */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211E0ECh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E0ECh case    5:*/		return 0x8211E0F0;
		  /* 8211E0F0h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8211E0F0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211E10C;  }
		/* 8211E0F0h case    6:*/		return 0x8211E0F4;
		  /* 8211E0F4h */ case    7:  		/* lis R11, -32253 */
		/* 8211E0F4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211E0F4h case    7:*/		return 0x8211E0F8;
		  /* 8211E0F8h */ case    8:  		/* lwz R4, <#[R30 + 32]> */
		/* 8211E0F8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 8211E0F8h case    8:*/		return 0x8211E0FC;
		  /* 8211E0FCh */ case    9:  		/* li R5, 0 */
		/* 8211E0FCh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E0FCh case    9:*/		return 0x8211E100;
		  /* 8211E100h */ case   10:  		/* addi R6, R11, 9184 */
		/* 8211E100h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 8211E100h case   10:*/		return 0x8211E104;
		  /* 8211E104h */ case   11:  		/* bl -347412 */
		/* 8211E104h case   11:*/		regs.LR = 0x8211E108; return 0x820C93F0;
		/* 8211E104h case   11:*/		return 0x8211E108;
		  /* 8211E108h */ case   12:  		/* b 8 */
		/* 8211E108h case   12:*/		return 0x8211E110;
		/* 8211E108h case   12:*/		return 0x8211E10C;
	}
	return 0x8211E10C;
} // Block from 8211E0D8h-8211E10Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211E10Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E10C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E10C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E10C);
		  /* 8211E10Ch */ case    0:  		/* li R3, 0 */
		/* 8211E10Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E10Ch case    0:*/		return 0x8211E110;
	}
	return 0x8211E110;
} // Block from 8211E10Ch-8211E110h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E110);
		  /* 8211E110h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211E110h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E110h case    0:*/		return 0x8211E114;
		  /* 8211E114h */ case    1:  		/* bc 12, CR6_EQ, -276 */
		/* 8211E114h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211E000;  }
		/* 8211E114h case    1:*/		return 0x8211E118;
		  /* 8211E118h */ case    2:  		/* stw R3, <#[R30 + 32]> */
		/* 8211E118h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8211E118h case    2:*/		return 0x8211E11C;
		  /* 8211E11Ch */ case    3:  		/* mr R4, R30 */
		/* 8211E11Ch case    3:*/		regs.R4 = regs.R30;
		/* 8211E11Ch case    3:*/		return 0x8211E120;
		  /* 8211E120h */ case    4:  		/* mr R3, R29 */
		/* 8211E120h case    4:*/		regs.R3 = regs.R29;
		/* 8211E120h case    4:*/		return 0x8211E124;
		  /* 8211E124h */ case    5:  		/* bl -8460 */
		/* 8211E124h case    5:*/		regs.LR = 0x8211E128; return 0x8211C018;
		/* 8211E124h case    5:*/		return 0x8211E128;
		  /* 8211E128h */ case    6:  		/* mr R3, R30 */
		/* 8211E128h case    6:*/		regs.R3 = regs.R30;
		/* 8211E128h case    6:*/		return 0x8211E12C;
	}
	return 0x8211E12C;
} // Block from 8211E110h-8211E12Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211E12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E12C);
		  /* 8211E12Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8211E12Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8211E12Ch case    0:*/		return 0x8211E130;
		  /* 8211E130h */ case    1:  		/* b -577156 */
		/* 8211E130h case    1:*/		return 0x820912AC;
		/* 8211E130h case    1:*/		return 0x8211E134;
		  /* 8211E134h */ case    2:  		/* nop */
		/* 8211E134h case    2:*/		cpu::op::nop();
		/* 8211E134h case    2:*/		return 0x8211E138;
	}
	return 0x8211E138;
} // Block from 8211E12Ch-8211E138h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211E138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E138);
		  /* 8211E138h */ case    0:  		/* mfspr R12, LR */
		/* 8211E138h case    0:*/		regs.R12 = regs.LR;
		/* 8211E138h case    0:*/		return 0x8211E13C;
		  /* 8211E13Ch */ case    1:  		/* bl -577248 */
		/* 8211E13Ch case    1:*/		regs.LR = 0x8211E140; return 0x8209125C;
		/* 8211E13Ch case    1:*/		return 0x8211E140;
		  /* 8211E140h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8211E140h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8211E140h case    2:*/		return 0x8211E144;
		  /* 8211E144h */ case    3:  		/* mr R29, R3 */
		/* 8211E144h case    3:*/		regs.R29 = regs.R3;
		/* 8211E144h case    3:*/		return 0x8211E148;
		  /* 8211E148h */ case    4:  		/* li R3, 88 */
		/* 8211E148h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211E148h case    4:*/		return 0x8211E14C;
		  /* 8211E14Ch */ case    5:  		/* mr R30, R4 */
		/* 8211E14Ch case    5:*/		regs.R30 = regs.R4;
		/* 8211E14Ch case    5:*/		return 0x8211E150;
		  /* 8211E150h */ case    6:  		/* bl -347944 */
		/* 8211E150h case    6:*/		regs.LR = 0x8211E154; return 0x820C9228;
		/* 8211E150h case    6:*/		return 0x8211E154;
		  /* 8211E154h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8211E154h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E154h case    7:*/		return 0x8211E158;
		  /* 8211E158h */ case    8:  		/* bc 12, CR0_EQ, 40 */
		/* 8211E158h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211E180;  }
		/* 8211E158h case    8:*/		return 0x8211E15C;
		  /* 8211E15Ch */ case    9:  		/* mr R9, R30 */
		/* 8211E15Ch case    9:*/		regs.R9 = regs.R30;
		/* 8211E15Ch case    9:*/		return 0x8211E160;
		  /* 8211E160h */ case   10:  		/* li R8, 1 */
		/* 8211E160h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211E160h case   10:*/		return 0x8211E164;
		  /* 8211E164h */ case   11:  		/* li R7, 0 */
		/* 8211E164h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211E164h case   11:*/		return 0x8211E168;
		  /* 8211E168h */ case   12:  		/* li R6, 0 */
		/* 8211E168h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E168h case   12:*/		return 0x8211E16C;
		  /* 8211E16Ch */ case   13:  		/* li R5, 0 */
		/* 8211E16Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E16Ch case   13:*/		return 0x8211E170;
		  /* 8211E170h */ case   14:  		/* li R4, 0 */
		/* 8211E170h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211E170h case   14:*/		return 0x8211E174;
		  /* 8211E174h */ case   15:  		/* bl -336364 */
		/* 8211E174h case   15:*/		regs.LR = 0x8211E178; return 0x820CBF88;
		/* 8211E174h case   15:*/		return 0x8211E178;
		  /* 8211E178h */ case   16:  		/* mr R31, R3 */
		/* 8211E178h case   16:*/		regs.R31 = regs.R3;
		/* 8211E178h case   16:*/		return 0x8211E17C;
		  /* 8211E17Ch */ case   17:  		/* b 8 */
		/* 8211E17Ch case   17:*/		return 0x8211E184;
		/* 8211E17Ch case   17:*/		return 0x8211E180;
	}
	return 0x8211E180;
} // Block from 8211E138h-8211E180h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211E180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E180);
		  /* 8211E180h */ case    0:  		/* li R31, 0 */
		/* 8211E180h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211E180h case    0:*/		return 0x8211E184;
	}
	return 0x8211E184;
} // Block from 8211E180h-8211E184h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E184);
		  /* 8211E184h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211E184h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211E184h case    0:*/		return 0x8211E188;
		  /* 8211E188h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8211E188h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211E194;  }
		/* 8211E188h case    1:*/		return 0x8211E18C;
		  /* 8211E18Ch */ case    2:  		/* li R3, 0 */
		/* 8211E18Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E18Ch case    2:*/		return 0x8211E190;
		  /* 8211E190h */ case    3:  		/* b 196 */
		/* 8211E190h case    3:*/		return 0x8211E254;
		/* 8211E190h case    3:*/		return 0x8211E194;
	}
	return 0x8211E194;
} // Block from 8211E184h-8211E194h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211E194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E194);
		  /* 8211E194h */ case    0:  		/* li R3, 40 */
		/* 8211E194h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211E194h case    0:*/		return 0x8211E198;
		  /* 8211E198h */ case    1:  		/* bl -348016 */
		/* 8211E198h case    1:*/		regs.LR = 0x8211E19C; return 0x820C9228;
		/* 8211E198h case    1:*/		return 0x8211E19C;
		  /* 8211E19Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211E19Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E19Ch case    2:*/		return 0x8211E1A0;
		  /* 8211E1A0h */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 8211E1A0h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211E1C4;  }
		/* 8211E1A0h case    3:*/		return 0x8211E1A4;
		  /* 8211E1A4h */ case    4:  		/* li R9, 512 */
		/* 8211E1A4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8211E1A4h case    4:*/		return 0x8211E1A8;
		  /* 8211E1A8h */ case    5:  		/* li R8, 1 */
		/* 8211E1A8h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211E1A8h case    5:*/		return 0x8211E1AC;
		  /* 8211E1ACh */ case    6:  		/* li R7, 1 */
		/* 8211E1ACh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8211E1ACh case    6:*/		return 0x8211E1B0;
		  /* 8211E1B0h */ case    7:  		/* li R6, 0 */
		/* 8211E1B0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E1B0h case    7:*/		return 0x8211E1B4;
		  /* 8211E1B4h */ case    8:  		/* li R5, 22 */
		/* 8211E1B4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 8211E1B4h case    8:*/		return 0x8211E1B8;
		  /* 8211E1B8h */ case    9:  		/* li R4, 3 */
		/* 8211E1B8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8211E1B8h case    9:*/		return 0x8211E1BC;
		  /* 8211E1BCh */ case   10:  		/* bl -341308 */
		/* 8211E1BCh case   10:*/		regs.LR = 0x8211E1C0; return 0x820CAC80;
		/* 8211E1BCh case   10:*/		return 0x8211E1C0;
		  /* 8211E1C0h */ case   11:  		/* b 8 */
		/* 8211E1C0h case   11:*/		return 0x8211E1C8;
		/* 8211E1C0h case   11:*/		return 0x8211E1C4;
	}
	return 0x8211E1C4;
} // Block from 8211E194h-8211E1C4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211E1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E1C4);
		  /* 8211E1C4h */ case    0:  		/* li R3, 0 */
		/* 8211E1C4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E1C4h case    0:*/		return 0x8211E1C8;
	}
	return 0x8211E1C8;
} // Block from 8211E1C4h-8211E1C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E1C8);
		  /* 8211E1C8h */ case    0:  		/* stw R3, <#[R31 + 16]> */
		/* 8211E1C8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8211E1C8h case    0:*/		return 0x8211E1CC;
		  /* 8211E1CCh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211E1CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E1CCh case    1:*/		return 0x8211E1D0;
		  /* 8211E1D0h */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 8211E1D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E18C;  }
		/* 8211E1D0h case    2:*/		return 0x8211E1D4;
		  /* 8211E1D4h */ case    3:  		/* li R3, 72 */
		/* 8211E1D4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211E1D4h case    3:*/		return 0x8211E1D8;
		  /* 8211E1D8h */ case    4:  		/* bl -348080 */
		/* 8211E1D8h case    4:*/		regs.LR = 0x8211E1DC; return 0x820C9228;
		/* 8211E1D8h case    4:*/		return 0x8211E1DC;
		  /* 8211E1DCh */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211E1DCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E1DCh case    5:*/		return 0x8211E1E0;
		  /* 8211E1E0h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8211E1E0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211E1FC;  }
		/* 8211E1E0h case    6:*/		return 0x8211E1E4;
		  /* 8211E1E4h */ case    7:  		/* mr R7, R30 */
		/* 8211E1E4h case    7:*/		regs.R7 = regs.R30;
		/* 8211E1E4h case    7:*/		return 0x8211E1E8;
		  /* 8211E1E8h */ case    8:  		/* li R6, 0 */
		/* 8211E1E8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E1E8h case    8:*/		return 0x8211E1EC;
		  /* 8211E1ECh */ case    9:  		/* li R5, 0 */
		/* 8211E1ECh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E1ECh case    9:*/		return 0x8211E1F0;
		  /* 8211E1F0h */ case   10:  		/* li R4, 5 */
		/* 8211E1F0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8211E1F0h case   10:*/		return 0x8211E1F4;
		  /* 8211E1F4h */ case   11:  		/* bl -335244 */
		/* 8211E1F4h case   11:*/		regs.LR = 0x8211E1F8; return 0x820CC468;
		/* 8211E1F4h case   11:*/		return 0x8211E1F8;
		  /* 8211E1F8h */ case   12:  		/* b 8 */
		/* 8211E1F8h case   12:*/		return 0x8211E200;
		/* 8211E1F8h case   12:*/		return 0x8211E1FC;
	}
	return 0x8211E1FC;
} // Block from 8211E1C8h-8211E1FCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211E1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E1FC);
		  /* 8211E1FCh */ case    0:  		/* li R3, 0 */
		/* 8211E1FCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E1FCh case    0:*/		return 0x8211E200;
	}
	return 0x8211E200;
} // Block from 8211E1FCh-8211E200h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E200);
		  /* 8211E200h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211E200h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E200h case    0:*/		return 0x8211E204;
		  /* 8211E204h */ case    1:  		/* stw R3, <#[R31 + 32]> */
		/* 8211E204h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8211E204h case    1:*/		return 0x8211E208;
		  /* 8211E208h */ case    2:  		/* bc 12, CR6_EQ, -124 */
		/* 8211E208h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E18C;  }
		/* 8211E208h case    2:*/		return 0x8211E20C;
		  /* 8211E20Ch */ case    3:  		/* li R3, 20 */
		/* 8211E20Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211E20Ch case    3:*/		return 0x8211E210;
		  /* 8211E210h */ case    4:  		/* bl -348136 */
		/* 8211E210h case    4:*/		regs.LR = 0x8211E214; return 0x820C9228;
		/* 8211E210h case    4:*/		return 0x8211E214;
		  /* 8211E214h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211E214h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E214h case    5:*/		return 0x8211E218;
		  /* 8211E218h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8211E218h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211E234;  }
		/* 8211E218h case    6:*/		return 0x8211E21C;
		  /* 8211E21Ch */ case    7:  		/* lis R11, -32253 */
		/* 8211E21Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211E21Ch case    7:*/		return 0x8211E220;
		  /* 8211E220h */ case    8:  		/* lwz R4, <#[R31 + 32]> */
		/* 8211E220h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 8211E220h case    8:*/		return 0x8211E224;
		  /* 8211E224h */ case    9:  		/* li R5, 0 */
		/* 8211E224h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E224h case    9:*/		return 0x8211E228;
		  /* 8211E228h */ case   10:  		/* addi R6, R11, 9184 */
		/* 8211E228h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 8211E228h case   10:*/		return 0x8211E22C;
		  /* 8211E22Ch */ case   11:  		/* bl -347708 */
		/* 8211E22Ch case   11:*/		regs.LR = 0x8211E230; return 0x820C93F0;
		/* 8211E22Ch case   11:*/		return 0x8211E230;
		  /* 8211E230h */ case   12:  		/* b 8 */
		/* 8211E230h case   12:*/		return 0x8211E238;
		/* 8211E230h case   12:*/		return 0x8211E234;
	}
	return 0x8211E234;
} // Block from 8211E200h-8211E234h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211E234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E234);
		  /* 8211E234h */ case    0:  		/* li R3, 0 */
		/* 8211E234h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E234h case    0:*/		return 0x8211E238;
	}
	return 0x8211E238;
} // Block from 8211E234h-8211E238h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E238);
		  /* 8211E238h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211E238h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E238h case    0:*/		return 0x8211E23C;
		  /* 8211E23Ch */ case    1:  		/* bc 12, CR6_EQ, -176 */
		/* 8211E23Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211E18C;  }
		/* 8211E23Ch case    1:*/		return 0x8211E240;
		  /* 8211E240h */ case    2:  		/* stw R3, <#[R31 + 32]> */
		/* 8211E240h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8211E240h case    2:*/		return 0x8211E244;
		  /* 8211E244h */ case    3:  		/* mr R4, R31 */
		/* 8211E244h case    3:*/		regs.R4 = regs.R31;
		/* 8211E244h case    3:*/		return 0x8211E248;
		  /* 8211E248h */ case    4:  		/* mr R3, R29 */
		/* 8211E248h case    4:*/		regs.R3 = regs.R29;
		/* 8211E248h case    4:*/		return 0x8211E24C;
		  /* 8211E24Ch */ case    5:  		/* bl -8756 */
		/* 8211E24Ch case    5:*/		regs.LR = 0x8211E250; return 0x8211C018;
		/* 8211E24Ch case    5:*/		return 0x8211E250;
		  /* 8211E250h */ case    6:  		/* mr R3, R31 */
		/* 8211E250h case    6:*/		regs.R3 = regs.R31;
		/* 8211E250h case    6:*/		return 0x8211E254;
	}
	return 0x8211E254;
} // Block from 8211E238h-8211E254h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211E254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E254);
		  /* 8211E254h */ case    0:  		/* addi R1, R1, 112 */
		/* 8211E254h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8211E254h case    0:*/		return 0x8211E258;
		  /* 8211E258h */ case    1:  		/* b -577452 */
		/* 8211E258h case    1:*/		return 0x820912AC;
		/* 8211E258h case    1:*/		return 0x8211E25C;
		  /* 8211E25Ch */ case    2:  		/* nop */
		/* 8211E25Ch case    2:*/		cpu::op::nop();
		/* 8211E25Ch case    2:*/		return 0x8211E260;
	}
	return 0x8211E260;
} // Block from 8211E254h-8211E260h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211E260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E260);
		  /* 8211E260h */ case    0:  		/* mfspr R12, LR */
		/* 8211E260h case    0:*/		regs.R12 = regs.LR;
		/* 8211E260h case    0:*/		return 0x8211E264;
		  /* 8211E264h */ case    1:  		/* bl -577556 */
		/* 8211E264h case    1:*/		regs.LR = 0x8211E268; return 0x82091250;
		/* 8211E264h case    1:*/		return 0x8211E268;
		  /* 8211E268h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211E268h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211E268h case    2:*/		return 0x8211E26C;
		  /* 8211E26Ch */ case    3:  		/* mr R26, R3 */
		/* 8211E26Ch case    3:*/		regs.R26 = regs.R3;
		/* 8211E26Ch case    3:*/		return 0x8211E270;
		  /* 8211E270h */ case    4:  		/* mr R31, R4 */
		/* 8211E270h case    4:*/		regs.R31 = regs.R4;
		/* 8211E270h case    4:*/		return 0x8211E274;
		  /* 8211E274h */ case    5:  		/* mr R30, R5 */
		/* 8211E274h case    5:*/		regs.R30 = regs.R5;
		/* 8211E274h case    5:*/		return 0x8211E278;
		  /* 8211E278h */ case    6:  		/* b 8 */
		/* 8211E278h case    6:*/		return 0x8211E280;
		/* 8211E278h case    6:*/		return 0x8211E27C;
		  /* 8211E27Ch */ case    7:  		/* lwz R31, <#[R31 + 8]> */
		/* 8211E27Ch case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8211E27Ch case    7:*/		return 0x8211E280;
	}
	return 0x8211E280;
} // Block from 8211E260h-8211E280h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211E280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E280);
		  /* 8211E280h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211E280h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211E280h case    0:*/		return 0x8211E284;
		  /* 8211E284h */ case    1:  		/* cmpwi CR6, R11, 3 */
		/* 8211E284h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211E284h case    1:*/		return 0x8211E288;
		  /* 8211E288h */ case    2:  		/* bc 4, CR6_EQ, -12 */
		/* 8211E288h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211E27C;  }
		/* 8211E288h case    2:*/		return 0x8211E28C;
		  /* 8211E28Ch */ case    3:  		/* li R3, 88 */
		/* 8211E28Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211E28Ch case    3:*/		return 0x8211E290;
		  /* 8211E290h */ case    4:  		/* bl -348264 */
		/* 8211E290h case    4:*/		regs.LR = 0x8211E294; return 0x820C9228;
		/* 8211E290h case    4:*/		return 0x8211E294;
		  /* 8211E294h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211E294h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E294h case    5:*/		return 0x8211E298;
		  /* 8211E298h */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 8211E298h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211E2C0;  }
		/* 8211E298h case    6:*/		return 0x8211E29C;
		  /* 8211E29Ch */ case    7:  		/* addi R9, R31, 16 */
		/* 8211E29Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x10);
		/* 8211E29Ch case    7:*/		return 0x8211E2A0;
		  /* 8211E2A0h */ case    8:  		/* li R8, 1 */
		/* 8211E2A0h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211E2A0h case    8:*/		return 0x8211E2A4;
		  /* 8211E2A4h */ case    9:  		/* li R7, 0 */
		/* 8211E2A4h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211E2A4h case    9:*/		return 0x8211E2A8;
		  /* 8211E2A8h */ case   10:  		/* li R6, 0 */
		/* 8211E2A8h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E2A8h case   10:*/		return 0x8211E2AC;
		  /* 8211E2ACh */ case   11:  		/* li R5, 0 */
		/* 8211E2ACh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E2ACh case   11:*/		return 0x8211E2B0;
		  /* 8211E2B0h */ case   12:  		/* li R4, 0 */
		/* 8211E2B0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211E2B0h case   12:*/		return 0x8211E2B4;
		  /* 8211E2B4h */ case   13:  		/* bl -336684 */
		/* 8211E2B4h case   13:*/		regs.LR = 0x8211E2B8; return 0x820CBF88;
		/* 8211E2B4h case   13:*/		return 0x8211E2B8;
		  /* 8211E2B8h */ case   14:  		/* mr R29, R3 */
		/* 8211E2B8h case   14:*/		regs.R29 = regs.R3;
		/* 8211E2B8h case   14:*/		return 0x8211E2BC;
		  /* 8211E2BCh */ case   15:  		/* b 8 */
		/* 8211E2BCh case   15:*/		return 0x8211E2C4;
		/* 8211E2BCh case   15:*/		return 0x8211E2C0;
	}
	return 0x8211E2C0;
} // Block from 8211E280h-8211E2C0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211E2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E2C0);
		  /* 8211E2C0h */ case    0:  		/* li R29, 0 */
		/* 8211E2C0h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8211E2C0h case    0:*/		return 0x8211E2C4;
	}
	return 0x8211E2C4;
} // Block from 8211E2C0h-8211E2C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E2C4);
		  /* 8211E2C4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211E2C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211E2C4h case    0:*/		return 0x8211E2C8;
		  /* 8211E2C8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8211E2C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211E2D4;  }
		/* 8211E2C8h case    1:*/		return 0x8211E2CC;
		  /* 8211E2CCh */ case    2:  		/* li R3, 0 */
		/* 8211E2CCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E2CCh case    2:*/		return 0x8211E2D0;
		  /* 8211E2D0h */ case    3:  		/* b 216 */
		/* 8211E2D0h case    3:*/		return 0x8211E3A8;
		/* 8211E2D0h case    3:*/		return 0x8211E2D4;
	}
	return 0x8211E2D4;
} // Block from 8211E2C4h-8211E2D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211E2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E2D4);
		  /* 8211E2D4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211E2D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211E2D4h case    0:*/		return 0x8211E2D8;
		  /* 8211E2D8h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8211E2D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211E2FC;  }
		/* 8211E2D8h case    1:*/		return 0x8211E2DC;
		  /* 8211E2DCh */ case    2:  		/* lwz R11, <#[R30]> */
		/* 8211E2DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8211E2DCh case    2:*/		return 0x8211E2E0;
		  /* 8211E2E0h */ case    3:  		/* mr R3, R30 */
		/* 8211E2E0h case    3:*/		regs.R3 = regs.R30;
		/* 8211E2E0h case    3:*/		return 0x8211E2E4;
		  /* 8211E2E4h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211E2E4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211E2E4h case    4:*/		return 0x8211E2E8;
		  /* 8211E2E8h */ case    5:  		/* mtspr CTR, R11 */
		/* 8211E2E8h case    5:*/		regs.CTR = regs.R11;
		/* 8211E2E8h case    5:*/		return 0x8211E2EC;
		  /* 8211E2ECh */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8211E2ECh case    6:*/		if ( 1 ) { regs.LR = 0x8211E2F0; return (uint32)regs.CTR; }
		/* 8211E2ECh case    6:*/		return 0x8211E2F0;
		  /* 8211E2F0h */ case    7:  		/* stw R3, <#[R29 + 32]> */
		/* 8211E2F0h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000020) );
		/* 8211E2F0h case    7:*/		return 0x8211E2F4;
		  /* 8211E2F4h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8211E2F4h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E2F4h case    8:*/		return 0x8211E2F8;
		  /* 8211E2F8h */ case    9:  		/* bc 12, CR0_EQ, -44 */
		/* 8211E2F8h case    9:*/		if ( regs.CR[0].eq ) { return 0x8211E2CC;  }
		/* 8211E2F8h case    9:*/		return 0x8211E2FC;
	}
	return 0x8211E2FC;
} // Block from 8211E2D4h-8211E2FCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211E2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E2FC);
		  /* 8211E2FCh */ case    0:  		/* lwz R28, <#[R29 + 32]> */
		/* 8211E2FCh case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000020) );
		/* 8211E2FCh case    0:*/		return 0x8211E300;
	}
	return 0x8211E300;
} // Block from 8211E2FCh-8211E300h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E300h
// Function '?ErrorUnsupportedCast@CParse@D3DXShader@@IAAXPAUD3DXTOKEN@2@PBDPAVCNode@2@2H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E300);
		  /* 8211E300h */ case    0:  		/* addi R30, R29, 16 */
		/* 8211E300h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 8211E300h case    0:*/		return 0x8211E304;
		  /* 8211E304h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8211E304h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211E304h case    1:*/		return 0x8211E308;
		  /* 8211E308h */ case    2:  		/* bc 12, CR6_EQ, 144 */
		/* 8211E308h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E398;  }
		/* 8211E308h case    2:*/		return 0x8211E30C;
		  /* 8211E30Ch */ case    3:  		/* lis R11, -32253 */
		/* 8211E30Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211E30Ch case    3:*/		return 0x8211E310;
		  /* 8211E310h */ case    4:  		/* addi R27, R11, 9192 */
		/* 8211E310h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x23E8);
		/* 8211E310h case    4:*/		return 0x8211E314;
		  /* 8211E314h */ case    5:  		/* lwz R31, <#[R28 + 8]> */
		/* 8211E314h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000008) );
		/* 8211E314h case    5:*/		return 0x8211E318;
		  /* 8211E318h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 8211E318h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211E318h case    6:*/		return 0x8211E31C;
		  /* 8211E31Ch */ case    7:  		/* bc 12, CR6_EQ, 112 */
		/* 8211E31Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8211E38C;  }
		/* 8211E31Ch case    7:*/		return 0x8211E320;
		  /* 8211E320h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 8211E320h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8211E320h case    8:*/		return 0x8211E324;
		  /* 8211E324h */ case    9:  		/* cmpwi CR6, R11, 14 */
		/* 8211E324h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211E324h case    9:*/		return 0x8211E328;
		  /* 8211E328h */ case   10:  		/* bc 4, CR6_EQ, 100 */
		/* 8211E328h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211E38C;  }
		/* 8211E328h case   10:*/		return 0x8211E32C;
		  /* 8211E32Ch */ case   11:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211E32Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211E32Ch case   11:*/		return 0x8211E330;
		  /* 8211E330h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8211E330h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211E330h case   12:*/		return 0x8211E334;
		  /* 8211E334h */ case   13:  		/* bc 12, CR6_EQ, 88 */
		/* 8211E334h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211E38C;  }
		/* 8211E334h case   13:*/		return 0x8211E338;
		  /* 8211E338h */ case   14:  		/* li R3, 20 */
		/* 8211E338h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211E338h case   14:*/		return 0x8211E33C;
		  /* 8211E33Ch */ case   15:  		/* bl -348436 */
		/* 8211E33Ch case   15:*/		regs.LR = 0x8211E340; return 0x820C9228;
		/* 8211E33Ch case   15:*/		return 0x8211E340;
		  /* 8211E340h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 8211E340h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E340h case   16:*/		return 0x8211E344;
		  /* 8211E344h */ case   17:  		/* bc 12, CR0_EQ, 24 */
		/* 8211E344h case   17:*/		if ( regs.CR[0].eq ) { return 0x8211E35C;  }
		/* 8211E344h case   17:*/		return 0x8211E348;
		  /* 8211E348h */ case   18:  		/* mr R6, R27 */
		/* 8211E348h case   18:*/		regs.R6 = regs.R27;
		/* 8211E348h case   18:*/		return 0x8211E34C;
		  /* 8211E34Ch */ case   19:  		/* li R5, 0 */
		/* 8211E34Ch case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E34Ch case   19:*/		return 0x8211E350;
		  /* 8211E350h */ case   20:  		/* li R4, 0 */
		/* 8211E350h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211E350h case   20:*/		return 0x8211E354;
		  /* 8211E354h */ case   21:  		/* bl -348004 */
		/* 8211E354h case   21:*/		regs.LR = 0x8211E358; return 0x820C93F0;
		/* 8211E354h case   21:*/		return 0x8211E358;
		  /* 8211E358h */ case   22:  		/* b 8 */
		/* 8211E358h case   22:*/		return 0x8211E360;
		/* 8211E358h case   22:*/		return 0x8211E35C;
	}
	return 0x8211E35C;
} // Block from 8211E300h-8211E35Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8211E35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E35C);
		  /* 8211E35Ch */ case    0:  		/* li R3, 0 */
		/* 8211E35Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E35Ch case    0:*/		return 0x8211E360;
	}
	return 0x8211E360;
} // Block from 8211E35Ch-8211E360h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E360);
		  /* 8211E360h */ case    0:  		/* stw R3, <#[R30]> */
		/* 8211E360h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8211E360h case    0:*/		return 0x8211E364;
		  /* 8211E364h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211E364h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E364h case    1:*/		return 0x8211E368;
		  /* 8211E368h */ case    2:  		/* bc 12, CR6_EQ, -156 */
		/* 8211E368h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E2CC;  }
		/* 8211E368h case    2:*/		return 0x8211E36C;
		  /* 8211E36Ch */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 8211E36Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8211E36Ch case    3:*/		return 0x8211E370;
		  /* 8211E370h */ case    4:  		/* bl -348168 */
		/* 8211E370h case    4:*/		regs.LR = 0x8211E374; return 0x820C9368;
		/* 8211E370h case    4:*/		return 0x8211E374;
		  /* 8211E374h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 8211E374h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8211E374h case    5:*/		return 0x8211E378;
		  /* 8211E378h */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 8211E378h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E378h case    6:*/		return 0x8211E37C;
		  /* 8211E37Ch */ case    7:  		/* stw R3, <#[R11 + 8]> */
		/* 8211E37Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8211E37Ch case    7:*/		return 0x8211E380;
		  /* 8211E380h */ case    8:  		/* bc 12, CR0_EQ, -180 */
		/* 8211E380h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211E2CC;  }
		/* 8211E380h case    8:*/		return 0x8211E384;
		  /* 8211E384h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 8211E384h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8211E384h case    9:*/		return 0x8211E388;
		  /* 8211E388h */ case   10:  		/* addi R30, R11, 12 */
		/* 8211E388h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xC);
		/* 8211E388h case   10:*/		return 0x8211E38C;
	}
	return 0x8211E38C;
} // Block from 8211E360h-8211E38Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211E38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E38C);
		  /* 8211E38Ch */ case    0:  		/* lwz R28, <#[R28 + 12]> */
		/* 8211E38Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 8211E38Ch case    0:*/		return 0x8211E390;
		  /* 8211E390h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8211E390h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211E390h case    1:*/		return 0x8211E394;
		  /* 8211E394h */ case    2:  		/* bc 4, CR6_EQ, -128 */
		/* 8211E394h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211E314;  }
		/* 8211E394h case    2:*/		return 0x8211E398;
	}
	return 0x8211E398;
} // Block from 8211E38Ch-8211E398h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211E398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E398);
		  /* 8211E398h */ case    0:  		/* mr R4, R29 */
		/* 8211E398h case    0:*/		regs.R4 = regs.R29;
		/* 8211E398h case    0:*/		return 0x8211E39C;
		  /* 8211E39Ch */ case    1:  		/* mr R3, R26 */
		/* 8211E39Ch case    1:*/		regs.R3 = regs.R26;
		/* 8211E39Ch case    1:*/		return 0x8211E3A0;
		  /* 8211E3A0h */ case    2:  		/* bl -9096 */
		/* 8211E3A0h case    2:*/		regs.LR = 0x8211E3A4; return 0x8211C018;
		/* 8211E3A0h case    2:*/		return 0x8211E3A4;
		  /* 8211E3A4h */ case    3:  		/* mr R3, R29 */
		/* 8211E3A4h case    3:*/		regs.R3 = regs.R29;
		/* 8211E3A4h case    3:*/		return 0x8211E3A8;
	}
	return 0x8211E3A8;
} // Block from 8211E398h-8211E3A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211E3A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E3A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E3A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E3A8);
		  /* 8211E3A8h */ case    0:  		/* addi R1, R1, 144 */
		/* 8211E3A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211E3A8h case    0:*/		return 0x8211E3AC;
		  /* 8211E3ACh */ case    1:  		/* b -577804 */
		/* 8211E3ACh case    1:*/		return 0x820912A0;
		/* 8211E3ACh case    1:*/		return 0x8211E3B0;
	}
	return 0x8211E3B0;
} // Block from 8211E3A8h-8211E3B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211E3B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E3B0);
		  /* 8211E3B0h */ case    0:  		/* mfspr R12, LR */
		/* 8211E3B0h case    0:*/		regs.R12 = regs.LR;
		/* 8211E3B0h case    0:*/		return 0x8211E3B4;
		  /* 8211E3B4h */ case    1:  		/* bl -577940 */
		/* 8211E3B4h case    1:*/		regs.LR = 0x8211E3B8; return 0x82091220;
		/* 8211E3B4h case    1:*/		return 0x8211E3B8;
		  /* 8211E3B8h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8211E3B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8211E3B8h case    2:*/		return 0x8211E3BC;
		  /* 8211E3BCh */ case    3:  		/* mr R14, R3 */
		/* 8211E3BCh case    3:*/		regs.R14 = regs.R3;
		/* 8211E3BCh case    3:*/		return 0x8211E3C0;
		  /* 8211E3C0h */ case    4:  		/* mr R15, R4 */
		/* 8211E3C0h case    4:*/		regs.R15 = regs.R4;
		/* 8211E3C0h case    4:*/		return 0x8211E3C4;
		  /* 8211E3C4h */ case    5:  		/* cmplwi CR6, R5, 0 */
		/* 8211E3C4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8211E3C4h case    5:*/		return 0x8211E3C8;
		  /* 8211E3C8h */ case    6:  		/* bc 12, CR6_EQ, 276 */
		/* 8211E3C8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E3C8h case    6:*/		return 0x8211E3CC;
		  /* 8211E3CCh */ case    7:  		/* lwz R11, <#[R5 + 4]> */
		/* 8211E3CCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 8211E3CCh case    7:*/		return 0x8211E3D0;
		  /* 8211E3D0h */ case    8:  		/* cmpwi CR6, R11, 3 */
		/* 8211E3D0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211E3D0h case    8:*/		return 0x8211E3D4;
		  /* 8211E3D4h */ case    9:  		/* bc 4, CR6_EQ, 264 */
		/* 8211E3D4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E3D4h case    9:*/		return 0x8211E3D8;
		  /* 8211E3D8h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 8211E3D8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211E3D8h case   10:*/		return 0x8211E3DC;
		  /* 8211E3DCh */ case   11:  		/* bc 12, CR6_EQ, 256 */
		/* 8211E3DCh case   11:*/		if ( regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E3DCh case   11:*/		return 0x8211E3E0;
		  /* 8211E3E0h */ case   12:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211E3E0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211E3E0h case   12:*/		return 0x8211E3E4;
		  /* 8211E3E4h */ case   13:  		/* cmpwi CR6, R11, 14 */
		/* 8211E3E4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211E3E4h case   13:*/		return 0x8211E3E8;
		  /* 8211E3E8h */ case   14:  		/* bc 4, CR6_EQ, 244 */
		/* 8211E3E8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E3E8h case   14:*/		return 0x8211E3EC;
		  /* 8211E3ECh */ case   15:  		/* li R3, 88 */
		/* 8211E3ECh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211E3ECh case   15:*/		return 0x8211E3F0;
		  /* 8211E3F0h */ case   16:  		/* lwz R21, <#[R4 + 16]> */
		/* 8211E3F0h case   16:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R4 + 0x00000010) );
		/* 8211E3F0h case   16:*/		return 0x8211E3F4;
		  /* 8211E3F4h */ case   17:  		/* addi R17, R5, 16 */
		/* 8211E3F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R5,0x10);
		/* 8211E3F4h case   17:*/		return 0x8211E3F8;
		  /* 8211E3F8h */ case   18:  		/* bl -348624 */
		/* 8211E3F8h case   18:*/		regs.LR = 0x8211E3FC; return 0x820C9228;
		/* 8211E3F8h case   18:*/		return 0x8211E3FC;
		  /* 8211E3FCh */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 8211E3FCh case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E3FCh case   19:*/		return 0x8211E400;
		  /* 8211E400h */ case   20:  		/* bc 12, CR0_EQ, 40 */
		/* 8211E400h case   20:*/		if ( regs.CR[0].eq ) { return 0x8211E428;  }
		/* 8211E400h case   20:*/		return 0x8211E404;
		  /* 8211E404h */ case   21:  		/* mr R9, R17 */
		/* 8211E404h case   21:*/		regs.R9 = regs.R17;
		/* 8211E404h case   21:*/		return 0x8211E408;
		  /* 8211E408h */ case   22:  		/* li R8, 1 */
		/* 8211E408h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211E408h case   22:*/		return 0x8211E40C;
		  /* 8211E40Ch */ case   23:  		/* li R7, 0 */
		/* 8211E40Ch case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211E40Ch case   23:*/		return 0x8211E410;
		  /* 8211E410h */ case   24:  		/* li R6, 0 */
		/* 8211E410h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E410h case   24:*/		return 0x8211E414;
		  /* 8211E414h */ case   25:  		/* li R5, 29 */
		/* 8211E414h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x1D);
		/* 8211E414h case   25:*/		return 0x8211E418;
		  /* 8211E418h */ case   26:  		/* li R4, 0 */
		/* 8211E418h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211E418h case   26:*/		return 0x8211E41C;
		  /* 8211E41Ch */ case   27:  		/* bl -337044 */
		/* 8211E41Ch case   27:*/		regs.LR = 0x8211E420; return 0x820CBF88;
		/* 8211E41Ch case   27:*/		return 0x8211E420;
		  /* 8211E420h */ case   28:  		/* mr R16, R3 */
		/* 8211E420h case   28:*/		regs.R16 = regs.R3;
		/* 8211E420h case   28:*/		return 0x8211E424;
		  /* 8211E424h */ case   29:  		/* b 8 */
		/* 8211E424h case   29:*/		return 0x8211E42C;
		/* 8211E424h case   29:*/		return 0x8211E428;
	}
	return 0x8211E428;
} // Block from 8211E3B0h-8211E428h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8211E428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E428);
		  /* 8211E428h */ case    0:  		/* li R16, 0 */
		/* 8211E428h case    0:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 8211E428h case    0:*/		return 0x8211E42C;
	}
	return 0x8211E42C;
} // Block from 8211E428h-8211E42Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E42C);
		  /* 8211E42Ch */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 8211E42Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8211E42Ch case    0:*/		return 0x8211E430;
		  /* 8211E430h */ case    1:  		/* bc 12, CR6_EQ, 172 */
		/* 8211E430h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E430h case    1:*/		return 0x8211E434;
		  /* 8211E434h */ case    2:  		/* cmplwi CR6, R21, 0 */
		/* 8211E434h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8211E434h case    2:*/		return 0x8211E438;
		  /* 8211E438h */ case    3:  		/* bc 12, CR6_EQ, 136 */
		/* 8211E438h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E438h case    3:*/		return 0x8211E43C;
		  /* 8211E43Ch */ case    4:  		/* lwz R11, <#[R21 + 4]> */
		/* 8211E43Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 8211E43Ch case    4:*/		return 0x8211E440;
		  /* 8211E440h */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 8211E440h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211E440h case    5:*/		return 0x8211E444;
		  /* 8211E444h */ case    6:  		/* bc 4, CR6_EQ, 256 */
		/* 8211E444h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8211E544;  }
		/* 8211E444h case    6:*/		return 0x8211E448;
		  /* 8211E448h */ case    7:  		/* li R31, 0 */
		/* 8211E448h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211E448h case    7:*/		return 0x8211E44C;
		  /* 8211E44Ch */ case    8:  		/* mr R30, R21 */
		/* 8211E44Ch case    8:*/		regs.R30 = regs.R21;
		/* 8211E44Ch case    8:*/		return 0x8211E450;
		  /* 8211E450h */ case    9:  		/* lwz R11, <#[R30 + 8]> */
		/* 8211E450h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8211E450h case    9:*/		return 0x8211E454;
		  /* 8211E454h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8211E454h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211E454h case   10:*/		return 0x8211E458;
		  /* 8211E458h */ case   11:  		/* bc 12, CR6_EQ, 92 */
		/* 8211E458h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211E4B4;  }
		/* 8211E458h case   11:*/		return 0x8211E45C;
		  /* 8211E45Ch */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211E45Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211E45Ch case   12:*/		return 0x8211E460;
		  /* 8211E460h */ case   13:  		/* cmpwi CR6, R10, 6 */
		/* 8211E460h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 8211E460h case   13:*/		return 0x8211E464;
		  /* 8211E464h */ case   14:  		/* bc 4, CR6_EQ, 80 */
		/* 8211E464h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8211E4B4;  }
		/* 8211E464h case   14:*/		return 0x8211E468;
		  /* 8211E468h */ case   15:  		/* lwz R10, <#[R11 + 20]> */
		/* 8211E468h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 8211E468h case   15:*/		return 0x8211E46C;
		  /* 8211E46Ch */ case   16:  		/* lwz R8, <#[R11 + 24]> */
		/* 8211E46Ch case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000018) );
		/* 8211E46Ch case   16:*/		return 0x8211E470;
		  /* 8211E470h */ case   17:  		/* lwz R11, <#[R17 + 8]> */
		/* 8211E470h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 8211E470h case   17:*/		return 0x8211E474;
		  /* 8211E474h */ case   18:  		/* lwz R10, <#[R10 + 24]> */
		/* 8211E474h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 8211E474h case   18:*/		return 0x8211E478;
		  /* 8211E478h */ case   19:  		/* lbz R9, <#[R11]> */
		/* 8211E478h case   19:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8211E478h case   19:*/		return 0x8211E47C;
		  /* 8211E47Ch */ case   20:  		/* lbz R7, <#[R10]> */
		/* 8211E47Ch case   20:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8211E47Ch case   20:*/		return 0x8211E480;
		  /* 8211E480h */ case   21:  		/* cmpwi CR0, R9, 0 */
		/* 8211E480h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8211E480h case   21:*/		return 0x8211E484;
		  /* 8211E484h */ case   22:  		/* subf R9, R7, R9 */
		/* 8211E484h case   22:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8211E484h case   22:*/		return 0x8211E488;
		  /* 8211E488h */ case   23:  		/* bc 12, CR0_EQ, 20 */
		/* 8211E488h case   23:*/		if ( regs.CR[0].eq ) { return 0x8211E49C;  }
		/* 8211E488h case   23:*/		return 0x8211E48C;
		  /* 8211E48Ch */ case   24:  		/* addi R11, R11, 1 */
		/* 8211E48Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211E48Ch case   24:*/		return 0x8211E490;
		  /* 8211E490h */ case   25:  		/* addi R10, R10, 1 */
		/* 8211E490h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211E490h case   25:*/		return 0x8211E494;
		  /* 8211E494h */ case   26:  		/* cmpwi CR6, R9, 0 */
		/* 8211E494h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8211E494h case   26:*/		return 0x8211E498;
		  /* 8211E498h */ case   27:  		/* bc 12, CR6_EQ, -32 */
		/* 8211E498h case   27:*/		if ( regs.CR[6].eq ) { return 0x8211E478;  }
		/* 8211E498h case   27:*/		return 0x8211E49C;
	}
	return 0x8211E49C;
} // Block from 8211E42Ch-8211E49Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 8211E49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E49C);
		  /* 8211E49Ch */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8211E49Ch case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8211E49Ch case    0:*/		return 0x8211E4A0;
		  /* 8211E4A0h */ case    1:  		/* bc 12, CR0_EQ, 72 */
		/* 8211E4A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8211E4E8;  }
		/* 8211E4A0h case    1:*/		return 0x8211E4A4;
		  /* 8211E4A4h */ case    2:  		/* mr R3, R14 */
		/* 8211E4A4h case    2:*/		regs.R3 = regs.R14;
		/* 8211E4A4h case    2:*/		return 0x8211E4A8;
		  /* 8211E4A8h */ case    3:  		/* lwz R4, <#[R8 + 48]> */
		/* 8211E4A8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R8 + 0x00000030) );
		/* 8211E4A8h case    3:*/		return 0x8211E4AC;
		  /* 8211E4ACh */ case    4:  		/* bl -16604 */
		/* 8211E4ACh case    4:*/		regs.LR = 0x8211E4B0; return 0x8211A3D0;
		/* 8211E4ACh case    4:*/		return 0x8211E4B0;
		  /* 8211E4B0h */ case    5:  		/* add R31, R3, R31 */
		/* 8211E4B0h case    5:*/		cpu::op::add<0>(regs,&regs.R31,regs.R3,regs.R31);
		/* 8211E4B0h case    5:*/		return 0x8211E4B4;
	}
	return 0x8211E4B4;
} // Block from 8211E49Ch-8211E4B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211E4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E4B4);
		  /* 8211E4B4h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 8211E4B4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 8211E4B4h case    0:*/		return 0x8211E4B8;
		  /* 8211E4B8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8211E4B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211E4B8h case    1:*/		return 0x8211E4BC;
		  /* 8211E4BCh */ case    2:  		/* bc 4, CR6_EQ, -108 */
		/* 8211E4BCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211E450;  }
		/* 8211E4BCh case    2:*/		return 0x8211E4C0;
	}
	return 0x8211E4C0;
} // Block from 8211E4B4h-8211E4C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211E4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E4C0);
		  /* 8211E4C0h */ case    0:  		/* lis R11, -32253 */
		/* 8211E4C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211E4C0h case    0:*/		return 0x8211E4C4;
		  /* 8211E4C4h */ case    1:  		/* lwz R7, <#[R17 + 8]> */
		/* 8211E4C4h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R17 + 0x00000008) );
		/* 8211E4C4h case    1:*/		return 0x8211E4C8;
		  /* 8211E4C8h */ case    2:  		/* li R5, 3018 */
		/* 8211E4C8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xBCA);
		/* 8211E4C8h case    2:*/		return 0x8211E4CC;
		  /* 8211E4CCh */ case    3:  		/* addi R6, R11, 9208 */
		/* 8211E4CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23F8);
		/* 8211E4CCh case    3:*/		return 0x8211E4D0;
		  /* 8211E4D0h */ case    4:  		/* mr R4, R17 */
		/* 8211E4D0h case    4:*/		regs.R4 = regs.R17;
		/* 8211E4D0h case    4:*/		return 0x8211E4D4;
		  /* 8211E4D4h */ case    5:  		/* mr R3, R14 */
		/* 8211E4D4h case    5:*/		regs.R3 = regs.R14;
		/* 8211E4D4h case    5:*/		return 0x8211E4D8;
		  /* 8211E4D8h */ case    6:  		/* bl -19512 */
		/* 8211E4D8h case    6:*/		regs.LR = 0x8211E4DC; return 0x821198A0;
		/* 8211E4D8h case    6:*/		return 0x8211E4DC;
	}
	return 0x8211E4DC;
} // Block from 8211E4C0h-8211E4DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211E4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E4DC);
		  /* 8211E4DCh */ case    0:  		/* li R3, 0 */
		/* 8211E4DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E4DCh case    0:*/		return 0x8211E4E0;
		  /* 8211E4E0h */ case    1:  		/* addi R1, R1, 272 */
		/* 8211E4E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8211E4E0h case    1:*/		return 0x8211E4E4;
		  /* 8211E4E4h */ case    2:  		/* b -578164 */
		/* 8211E4E4h case    2:*/		return 0x82091270;
		/* 8211E4E4h case    2:*/		return 0x8211E4E8;
	}
	return 0x8211E4E8;
} // Block from 8211E4DCh-8211E4E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211E4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E4E8);
		  /* 8211E4E8h */ case    0:  		/* lwz R11, <#[R8 + 48]> */
		/* 8211E4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000030) );
		/* 8211E4E8h case    0:*/		return 0x8211E4EC;
		  /* 8211E4ECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211E4ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211E4ECh case    1:*/		return 0x8211E4F0;
		  /* 8211E4F0h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 8211E4F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E514;  }
		/* 8211E4F0h case    2:*/		return 0x8211E4F4;
		  /* 8211E4F4h */ case    3:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 8211E4F4h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 8211E4F4h case    3:*/		return 0x8211E4F8;
		  /* 8211E4F8h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 8211E4F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8211E4F8h case    4:*/		return 0x8211E4FC;
		  /* 8211E4FCh */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211E4FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211E4FCh case    5:*/		return 0x8211E500;
		  /* 8211E500h */ case    6:  		/* mtspr CTR, R11 */
		/* 8211E500h case    6:*/		regs.CTR = regs.R11;
		/* 8211E500h case    6:*/		return 0x8211E504;
		  /* 8211E504h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8211E504h case    7:*/		if ( 1 ) { regs.LR = 0x8211E508; return (uint32)regs.CTR; }
		/* 8211E504h case    7:*/		return 0x8211E508;
		  /* 8211E508h */ case    8:  		/* stw R3, <#[R16 + 16]> */
		/* 8211E508h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R16 + 0x00000010) );
		/* 8211E508h case    8:*/		return 0x8211E50C;
		  /* 8211E50Ch */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8211E50Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E50Ch case    9:*/		return 0x8211E510;
		  /* 8211E510h */ case   10:  		/* bc 12, CR0_EQ, -52 */
		/* 8211E510h case   10:*/		if ( regs.CR[0].eq ) { return 0x8211E4DC;  }
		/* 8211E510h case   10:*/		return 0x8211E514;
	}
	return 0x8211E514;
} // Block from 8211E4E8h-8211E514h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211E514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E514);
		  /* 8211E514h */ case    0:  		/* li R3, 72 */
		/* 8211E514h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211E514h case    0:*/		return 0x8211E518;
		  /* 8211E518h */ case    1:  		/* bl -348912 */
		/* 8211E518h case    1:*/		regs.LR = 0x8211E51C; return 0x820C9228;
		/* 8211E518h case    1:*/		return 0x8211E51C;
		  /* 8211E51Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211E51Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E51Ch case    2:*/		return 0x8211E520;
		  /* 8211E520h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 8211E520h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211E538;  }
		/* 8211E520h case    3:*/		return 0x8211E524;
		  /* 8211E524h */ case    4:  		/* mr R6, R17 */
		/* 8211E524h case    4:*/		regs.R6 = regs.R17;
		/* 8211E524h case    4:*/		return 0x8211E528;
		  /* 8211E528h */ case    5:  		/* mr R5, R31 */
		/* 8211E528h case    5:*/		regs.R5 = regs.R31;
		/* 8211E528h case    5:*/		return 0x8211E52C;
		  /* 8211E52Ch */ case    6:  		/* li R4, 2 */
		/* 8211E52Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8211E52Ch case    6:*/		return 0x8211E530;
		  /* 8211E530h */ case    7:  		/* bl -336216 */
		/* 8211E530h case    7:*/		regs.LR = 0x8211E534; return 0x820CC3D8;
		/* 8211E530h case    7:*/		return 0x8211E534;
		  /* 8211E534h */ case    8:  		/* b 8 */
		/* 8211E534h case    8:*/		return 0x8211E53C;
		/* 8211E534h case    8:*/		return 0x8211E538;
	}
	return 0x8211E538;
} // Block from 8211E514h-8211E538h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211E538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E538);
		  /* 8211E538h */ case    0:  		/* li R3, 0 */
		/* 8211E538h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E538h case    0:*/		return 0x8211E53C;
	}
	return 0x8211E53C;
} // Block from 8211E538h-8211E53Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E53C);
		  /* 8211E53Ch */ case    0:  		/* stw R3, <#[R16 + 36]> */
		/* 8211E53Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R16 + 0x00000024) );
		/* 8211E53Ch case    0:*/		return 0x8211E540;
		  /* 8211E540h */ case    1:  		/* b 952 */
		/* 8211E540h case    1:*/		return 0x8211E8F8;
		/* 8211E540h case    1:*/		return 0x8211E544;
	}
	return 0x8211E544;
} // Block from 8211E53Ch-8211E544h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211E544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E544);
		  /* 8211E544h */ case    0:  		/* cmpwi CR6, R11, 9 */
		/* 8211E544h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 8211E544h case    0:*/		return 0x8211E548;
		  /* 8211E548h */ case    1:  		/* bc 4, CR6_EQ, -136 */
		/* 8211E548h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E548h case    1:*/		return 0x8211E54C;
		  /* 8211E54Ch */ case    2:  		/* lwz R31, <#[R17 + 8]> */
		/* 8211E54Ch case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R17 + 0x00000008) );
		/* 8211E54Ch case    2:*/		return 0x8211E550;
		  /* 8211E550h */ case    3:  		/* lwz R10, <#[R21 + 36]> */
		/* 8211E550h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000024) );
		/* 8211E550h case    3:*/		return 0x8211E554;
		  /* 8211E554h */ case    4:  		/* lwz R19, <#[R21 + 28]> */
		/* 8211E554h case    4:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R21 + 0x0000001C) );
		/* 8211E554h case    4:*/		return 0x8211E558;
		  /* 8211E558h */ case    5:  		/* mr R11, R31 */
		/* 8211E558h case    5:*/		regs.R11 = regs.R31;
		/* 8211E558h case    5:*/		return 0x8211E55C;
		  /* 8211E55Ch */ case    6:  		/* lwz R20, <#[R21 + 32]> */
		/* 8211E55Ch case    6:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R21 + 0x00000020) );
		/* 8211E55Ch case    6:*/		return 0x8211E560;
		  /* 8211E560h */ case    7:  		/* rlwinm R18, R10, 0, 22, 22 */
		/* 8211E560h case    7:*/		cpu::op::rlwinm<0,0,22,22>(regs,&regs.R18,regs.R10);
		/* 8211E560h case    7:*/		return 0x8211E564;
		  /* 8211E564h */ case    8:  		/* lbz R10, <#[R11]> */
		/* 8211E564h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211E564h case    8:*/		return 0x8211E568;
		  /* 8211E568h */ case    9:  		/* addi R11, R11, 1 */
		/* 8211E568h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211E568h case    9:*/		return 0x8211E56C;
		  /* 8211E56Ch */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 8211E56Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211E56Ch case   10:*/		return 0x8211E570;
		  /* 8211E570h */ case   11:  		/* bc 4, CR6_EQ, -12 */
		/* 8211E570h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211E564;  }
		/* 8211E570h case   11:*/		return 0x8211E574;
		  /* 8211E574h */ case   12:  		/* subf R10, R31, R11 */
		/* 8211E574h case   12:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R31,regs.R11);
		/* 8211E574h case   12:*/		return 0x8211E578;
		  /* 8211E578h */ case   13:  		/* lbz R11, <#[R31]> */
		/* 8211E578h case   13:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211E578h case   13:*/		return 0x8211E57C;
		  /* 8211E57Ch */ case   14:  		/* addi R10, R10, -1 */
		/* 8211E57Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8211E57Ch case   14:*/		return 0x8211E580;
		  /* 8211E580h */ case   15:  		/* cmplwi CR6, R11, 95 */
		/* 8211E580h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 8211E580h case   15:*/		return 0x8211E584;
		  /* 8211E584h */ case   16:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8211E584h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8211E584h case   16:*/		return 0x8211E588;
		  /* 8211E588h */ case   17:  		/* add R25, R10, R31 */
		/* 8211E588h case   17:*/		cpu::op::add<0>(regs,&regs.R25,regs.R10,regs.R31);
		/* 8211E588h case   17:*/		return 0x8211E58C;
		  /* 8211E58Ch */ case   18:  		/* bc 12, CR6_EQ, 108 */
		/* 8211E58Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8211E5F8;  }
		/* 8211E58Ch case   18:*/		return 0x8211E590;
		  /* 8211E590h */ case   19:  		/* cmplwi CR6, R11, 96 */
		/* 8211E590h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000060);
		/* 8211E590h case   19:*/		return 0x8211E594;
		  /* 8211E594h */ case   20:  		/* bc 4, CR6_GT, -212 */
		/* 8211E594h case   20:*/		if ( !regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E594h case   20:*/		return 0x8211E598;
		  /* 8211E598h */ case   21:  		/* cmplwi CR6, R11, 98 */
		/* 8211E598h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000062);
		/* 8211E598h case   21:*/		return 0x8211E59C;
		  /* 8211E59Ch */ case   22:  		/* bc 4, CR6_GT, 64 */
		/* 8211E59Ch case   22:*/		if ( !regs.CR[6].gt ) { return 0x8211E5DC;  }
		/* 8211E59Ch case   22:*/		return 0x8211E5A0;
		  /* 8211E5A0h */ case   23:  		/* cmplwi CR6, R11, 103 */
		/* 8211E5A0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000067);
		/* 8211E5A0h case   23:*/		return 0x8211E5A4;
		  /* 8211E5A4h */ case   24:  		/* bc 12, CR6_EQ, 56 */
		/* 8211E5A4h case   24:*/		if ( regs.CR[6].eq ) { return 0x8211E5DC;  }
		/* 8211E5A4h case   24:*/		return 0x8211E5A8;
		  /* 8211E5A8h */ case   25:  		/* cmplwi CR6, R11, 114 */
		/* 8211E5A8h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000072);
		/* 8211E5A8h case   25:*/		return 0x8211E5AC;
		  /* 8211E5ACh */ case   26:  		/* bc 12, CR6_EQ, 48 */
		/* 8211E5ACh case   26:*/		if ( regs.CR[6].eq ) { return 0x8211E5DC;  }
		/* 8211E5ACh case   26:*/		return 0x8211E5B0;
		  /* 8211E5B0h */ case   27:  		/* cmplwi CR6, R11, 118 */
		/* 8211E5B0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000076);
		/* 8211E5B0h case   27:*/		return 0x8211E5B4;
		  /* 8211E5B4h */ case   28:  		/* bc 4, CR6_GT, -244 */
		/* 8211E5B4h case   28:*/		if ( !regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E5B4h case   28:*/		return 0x8211E5B8;
		  /* 8211E5B8h */ case   29:  		/* cmplwi CR6, R11, 122 */
		/* 8211E5B8h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007A);
		/* 8211E5B8h case   29:*/		return 0x8211E5BC;
		  /* 8211E5BCh */ case   30:  		/* bc 12, CR6_GT, -252 */
		/* 8211E5BCh case   30:*/		if ( regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E5BCh case   30:*/		return 0x8211E5C0;
		  /* 8211E5C0h */ case   31:  		/* lwz R11, <#[R21 + 16]> */
		/* 8211E5C0h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 8211E5C0h case   31:*/		return 0x8211E5C4;
		  /* 8211E5C4h */ case   32:  		/* cmpwi CR6, R11, 0 */
		/* 8211E5C4h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211E5C4h case   32:*/		return 0x8211E5C8;
		  /* 8211E5C8h */ case   33:  		/* bc 12, CR6_EQ, 12 */
		/* 8211E5C8h case   33:*/		if ( regs.CR[6].eq ) { return 0x8211E5D4;  }
		/* 8211E5C8h case   33:*/		return 0x8211E5CC;
		  /* 8211E5CCh */ case   34:  		/* cmpwi CR6, R11, 1 */
		/* 8211E5CCh case   34:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211E5CCh case   34:*/		return 0x8211E5D0;
		  /* 8211E5D0h */ case   35:  		/* bc 4, CR6_EQ, -272 */
		/* 8211E5D0h case   35:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E5D0h case   35:*/		return 0x8211E5D4;
	}
	return 0x8211E5D4;
} // Block from 8211E544h-8211E5D4h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8211E5D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E5D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E5D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E5D4);
		  /* 8211E5D4h */ case    0:  		/* li R24, 0 */
		/* 8211E5D4h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8211E5D4h case    0:*/		return 0x8211E5D8;
		  /* 8211E5D8h */ case    1:  		/* b 76 */
		/* 8211E5D8h case    1:*/		return 0x8211E624;
		/* 8211E5D8h case    1:*/		return 0x8211E5DC;
	}
	return 0x8211E5DC;
} // Block from 8211E5D4h-8211E5DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211E5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E5DC);
		  /* 8211E5DCh */ case    0:  		/* lwz R11, <#[R21 + 16]> */
		/* 8211E5DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 8211E5DCh case    0:*/		return 0x8211E5E0;
		  /* 8211E5E0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8211E5E0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211E5E0h case    1:*/		return 0x8211E5E4;
		  /* 8211E5E4h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8211E5E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E5F0;  }
		/* 8211E5E4h case    2:*/		return 0x8211E5E8;
		  /* 8211E5E8h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 8211E5E8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8211E5E8h case    3:*/		return 0x8211E5EC;
		  /* 8211E5ECh */ case    4:  		/* bc 4, CR6_EQ, -300 */
		/* 8211E5ECh case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E5ECh case    4:*/		return 0x8211E5F0;
	}
	return 0x8211E5F0;
} // Block from 8211E5DCh-8211E5F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211E5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E5F0);
		  /* 8211E5F0h */ case    0:  		/* li R24, 1 */
		/* 8211E5F0h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8211E5F0h case    0:*/		return 0x8211E5F4;
		  /* 8211E5F4h */ case    1:  		/* b 48 */
		/* 8211E5F4h case    1:*/		return 0x8211E624;
		/* 8211E5F4h case    1:*/		return 0x8211E5F8;
	}
	return 0x8211E5F8;
} // Block from 8211E5F0h-8211E5F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211E5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E5F8);
		  /* 8211E5F8h */ case    0:  		/* lwz R11, <#[R21 + 16]> */
		/* 8211E5F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 8211E5F8h case    0:*/		return 0x8211E5FC;
		  /* 8211E5FCh */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 8211E5FCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211E5FCh case    1:*/		return 0x8211E600;
		  /* 8211E600h */ case    2:  		/* bc 4, CR6_EQ, -320 */
		/* 8211E600h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E600h case    2:*/		return 0x8211E604;
		  /* 8211E604h */ case    3:  		/* addi R11, R31, 1 */
		/* 8211E604h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 8211E604h case    3:*/		return 0x8211E608;
		  /* 8211E608h */ case    4:  		/* cmplw CR6, R11, R25 */
		/* 8211E608h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8211E608h case    4:*/		return 0x8211E60C;
		  /* 8211E60Ch */ case    5:  		/* bc 4, CR6_LT, 20 */
		/* 8211E60Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x8211E620;  }
		/* 8211E60Ch case    5:*/		return 0x8211E610;
		  /* 8211E610h */ case    6:  		/* lbz R11, <#[R11]> */
		/* 8211E610h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8211E610h case    6:*/		return 0x8211E614;
		  /* 8211E614h */ case    7:  		/* li R24, 3 */
		/* 8211E614h case    7:*/		cpu::op::li<0>(regs,&regs.R24,0x3);
		/* 8211E614h case    7:*/		return 0x8211E618;
		  /* 8211E618h */ case    8:  		/* cmplwi CR6, R11, 109 */
		/* 8211E618h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 8211E618h case    8:*/		return 0x8211E61C;
		  /* 8211E61Ch */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 8211E61Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8211E624;  }
		/* 8211E61Ch case    9:*/		return 0x8211E620;
	}
	return 0x8211E620;
} // Block from 8211E5F8h-8211E620h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211E620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E620);
		  /* 8211E620h */ case    0:  		/* li R24, 2 */
		/* 8211E620h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x2);
		/* 8211E620h case    0:*/		return 0x8211E624;
	}
	return 0x8211E624;
} // Block from 8211E620h-8211E624h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E624);
		  /* 8211E624h */ case    0:  		/* addi R22, R16, 36 */
		/* 8211E624h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R16,0x24);
		/* 8211E624h case    0:*/		return 0x8211E628;
		  /* 8211E628h */ case    1:  		/* li R26, 0 */
		/* 8211E628h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8211E628h case    1:*/		return 0x8211E62C;
		  /* 8211E62Ch */ case    2:  		/* mr R27, R22 */
		/* 8211E62Ch case    2:*/		regs.R27 = regs.R22;
		/* 8211E62Ch case    2:*/		return 0x8211E630;
		  /* 8211E630h */ case    3:  		/* cmplw CR6, R31, R25 */
		/* 8211E630h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 8211E630h case    3:*/		return 0x8211E634;
		  /* 8211E634h */ case    4:  		/* bc 4, CR6_LT, 540 */
		/* 8211E634h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8211E850;  }
		/* 8211E634h case    4:*/		return 0x8211E638;
		  /* 8211E638h */ case    5:  		/* lis R11, -32253 */
		/* 8211E638h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211E638h case    5:*/		return 0x8211E63C;
		  /* 8211E63Ch */ case    6:  		/* addi R29, R31, 2 */
		/* 8211E63Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x2);
		/* 8211E63Ch case    6:*/		return 0x8211E640;
		  /* 8211E640h */ case    7:  		/* addi R28, R31, 3 */
		/* 8211E640h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x3);
		/* 8211E640h case    7:*/		return 0x8211E644;
		  /* 8211E644h */ case    8:  		/* addi R23, R11, 9200 */
		/* 8211E644h case    8:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x23F0);
		/* 8211E644h case    8:*/		return 0x8211E648;
		  /* 8211E648h */ case    9:  		/* cmplwi CR6, R26, 4 */
		/* 8211E648h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 8211E648h case    9:*/		return 0x8211E64C;
		  /* 8211E64Ch */ case   10:  		/* bc 4, CR6_LT, 500 */
		/* 8211E64Ch case   10:*/		if ( !regs.CR[6].lt ) { return 0x8211E840;  }
		/* 8211E64Ch case   10:*/		return 0x8211E650;
		  /* 8211E650h */ case   11:  		/* li R11, 0 */
		/* 8211E650h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211E650h case   11:*/		return 0x8211E654;
		  /* 8211E654h */ case   12:  		/* li R10, 0 */
		/* 8211E654h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211E654h case   12:*/		return 0x8211E658;
		  /* 8211E658h */ case   13:  		/* cmplwi CR6, R24, 1 */
		/* 8211E658h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 8211E658h case   13:*/		return 0x8211E65C;
		  /* 8211E65Ch */ case   14:  		/* bc 12, CR6_LT, 260 */
		/* 8211E65Ch case   14:*/		if ( regs.CR[6].lt ) { return 0x8211E760;  }
		/* 8211E65Ch case   14:*/		return 0x8211E660;
		  /* 8211E660h */ case   15:  		/* bc 12, CR6_EQ, 212 */
		/* 8211E660h case   15:*/		if ( regs.CR[6].eq ) { return 0x8211E734;  }
		/* 8211E660h case   15:*/		return 0x8211E664;
		  /* 8211E664h */ case   16:  		/* cmplwi CR6, R24, 3 */
		/* 8211E664h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 8211E664h case   16:*/		return 0x8211E668;
		  /* 8211E668h */ case   17:  		/* bc 12, CR6_LT, 112 */
		/* 8211E668h case   17:*/		if ( regs.CR[6].lt ) { return 0x8211E6D8;  }
		/* 8211E668h case   17:*/		return 0x8211E66C;
		  /* 8211E66Ch */ case   18:  		/* bc 4, CR6_EQ, 316 */
		/* 8211E66Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x8211E7A8;  }
		/* 8211E66Ch case   18:*/		return 0x8211E670;
		  /* 8211E670h */ case   19:  		/* cmplw CR6, R28, R25 */
		/* 8211E670h case   19:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 8211E670h case   19:*/		return 0x8211E674;
		  /* 8211E674h */ case   20:  		/* bc 4, CR6_LT, -436 */
		/* 8211E674h case   20:*/		if ( !regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E674h case   20:*/		return 0x8211E678;
		  /* 8211E678h */ case   21:  		/* lbz R11, <#[R31]> */
		/* 8211E678h case   21:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211E678h case   21:*/		return 0x8211E67C;
		  /* 8211E67Ch */ case   22:  		/* cmplwi CR6, R11, 95 */
		/* 8211E67Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 8211E67Ch case   22:*/		return 0x8211E680;
		  /* 8211E680h */ case   23:  		/* bc 4, CR6_EQ, -448 */
		/* 8211E680h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E680h case   23:*/		return 0x8211E684;
		  /* 8211E684h */ case   24:  		/* lbz R11, <#[R31 + 1]> */
		/* 8211E684h case   24:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		/* 8211E684h case   24:*/		return 0x8211E688;
		  /* 8211E688h */ case   25:  		/* cmplwi CR6, R11, 109 */
		/* 8211E688h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 8211E688h case   25:*/		return 0x8211E68C;
		  /* 8211E68Ch */ case   26:  		/* bc 4, CR6_EQ, -460 */
		/* 8211E68Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E68Ch case   26:*/		return 0x8211E690;
		  /* 8211E690h */ case   27:  		/* lbz R11, <#[R29]> */
		/* 8211E690h case   27:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8211E690h case   27:*/		return 0x8211E694;
		  /* 8211E694h */ case   28:  		/* extsb R11, R11 */
		/* 8211E694h case   28:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 8211E694h case   28:*/		return 0x8211E698;
		  /* 8211E698h */ case   29:  		/* cmpwi CR6, R11, 48 */
		/* 8211E698h case   29:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000030);
		/* 8211E698h case   29:*/		return 0x8211E69C;
		  /* 8211E69Ch */ case   30:  		/* bc 12, CR6_LT, -476 */
		/* 8211E69Ch case   30:*/		if ( regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E69Ch case   30:*/		return 0x8211E6A0;
		  /* 8211E6A0h */ case   31:  		/* cmpwi CR6, R11, 57 */
		/* 8211E6A0h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000039);
		/* 8211E6A0h case   31:*/		return 0x8211E6A4;
		  /* 8211E6A4h */ case   32:  		/* bc 12, CR6_GT, -484 */
		/* 8211E6A4h case   32:*/		if ( regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E6A4h case   32:*/		return 0x8211E6A8;
		  /* 8211E6A8h */ case   33:  		/* lbz R10, <#[R28]> */
		/* 8211E6A8h case   33:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8211E6A8h case   33:*/		return 0x8211E6AC;
		  /* 8211E6ACh */ case   34:  		/* extsb R10, R10 */
		/* 8211E6ACh case   34:*/		cpu::op::extsb<0>(regs,&regs.R10,regs.R10);
		/* 8211E6ACh case   34:*/		return 0x8211E6B0;
		  /* 8211E6B0h */ case   35:  		/* cmpwi CR6, R10, 48 */
		/* 8211E6B0h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000030);
		/* 8211E6B0h case   35:*/		return 0x8211E6B4;
		  /* 8211E6B4h */ case   36:  		/* bc 12, CR6_LT, -500 */
		/* 8211E6B4h case   36:*/		if ( regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E6B4h case   36:*/		return 0x8211E6B8;
		  /* 8211E6B8h */ case   37:  		/* cmpwi CR6, R10, 57 */
		/* 8211E6B8h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000039);
		/* 8211E6B8h case   37:*/		return 0x8211E6BC;
		  /* 8211E6BCh */ case   38:  		/* bc 12, CR6_GT, -508 */
		/* 8211E6BCh case   38:*/		if ( regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E6BCh case   38:*/		return 0x8211E6C0;
		  /* 8211E6C0h */ case   39:  		/* addi R11, R11, -48 */
		/* 8211E6C0h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD0);
		/* 8211E6C0h case   39:*/		return 0x8211E6C4;
		  /* 8211E6C4h */ case   40:  		/* addi R10, R10, -48 */
		/* 8211E6C4h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFD0);
		/* 8211E6C4h case   40:*/		return 0x8211E6C8;
		  /* 8211E6C8h */ case   41:  		/* addi R31, R31, 4 */
		/* 8211E6C8h case   41:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8211E6C8h case   41:*/		return 0x8211E6CC;
		  /* 8211E6CCh */ case   42:  		/* addi R28, R28, 4 */
		/* 8211E6CCh case   42:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8211E6CCh case   42:*/		return 0x8211E6D0;
		  /* 8211E6D0h */ case   43:  		/* addi R29, R29, 4 */
		/* 8211E6D0h case   43:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8211E6D0h case   43:*/		return 0x8211E6D4;
		  /* 8211E6D4h */ case   44:  		/* b 212 */
		/* 8211E6D4h case   44:*/		return 0x8211E7A8;
		/* 8211E6D4h case   44:*/		return 0x8211E6D8;
	}
	return 0x8211E6D8;
} // Block from 8211E624h-8211E6D8h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8211E6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E6D8);
		  /* 8211E6D8h */ case    0:  		/* cmplw CR6, R29, R25 */
		/* 8211E6D8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 8211E6D8h case    0:*/		return 0x8211E6DC;
		  /* 8211E6DCh */ case    1:  		/* bc 4, CR6_LT, -540 */
		/* 8211E6DCh case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E6DCh case    1:*/		return 0x8211E6E0;
		  /* 8211E6E0h */ case    2:  		/* lbz R11, <#[R31]> */
		/* 8211E6E0h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211E6E0h case    2:*/		return 0x8211E6E4;
		  /* 8211E6E4h */ case    3:  		/* cmplwi CR6, R11, 95 */
		/* 8211E6E4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 8211E6E4h case    3:*/		return 0x8211E6E8;
		  /* 8211E6E8h */ case    4:  		/* bc 4, CR6_EQ, -552 */
		/* 8211E6E8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E6E8h case    4:*/		return 0x8211E6EC;
		  /* 8211E6ECh */ case    5:  		/* lbz R11, <#[R31 + 1]> */
		/* 8211E6ECh case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		/* 8211E6ECh case    5:*/		return 0x8211E6F0;
		  /* 8211E6F0h */ case    6:  		/* extsb R11, R11 */
		/* 8211E6F0h case    6:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 8211E6F0h case    6:*/		return 0x8211E6F4;
		  /* 8211E6F4h */ case    7:  		/* cmpwi CR6, R11, 49 */
		/* 8211E6F4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 8211E6F4h case    7:*/		return 0x8211E6F8;
		  /* 8211E6F8h */ case    8:  		/* bc 12, CR6_LT, -568 */
		/* 8211E6F8h case    8:*/		if ( regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E6F8h case    8:*/		return 0x8211E6FC;
		  /* 8211E6FCh */ case    9:  		/* cmpwi CR6, R11, 57 */
		/* 8211E6FCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000039);
		/* 8211E6FCh case    9:*/		return 0x8211E700;
		  /* 8211E700h */ case   10:  		/* bc 12, CR6_GT, -576 */
		/* 8211E700h case   10:*/		if ( regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E700h case   10:*/		return 0x8211E704;
		  /* 8211E704h */ case   11:  		/* lbz R10, <#[R29]> */
		/* 8211E704h case   11:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8211E704h case   11:*/		return 0x8211E708;
		  /* 8211E708h */ case   12:  		/* extsb R10, R10 */
		/* 8211E708h case   12:*/		cpu::op::extsb<0>(regs,&regs.R10,regs.R10);
		/* 8211E708h case   12:*/		return 0x8211E70C;
		  /* 8211E70Ch */ case   13:  		/* cmpwi CR6, R10, 49 */
		/* 8211E70Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000031);
		/* 8211E70Ch case   13:*/		return 0x8211E710;
		  /* 8211E710h */ case   14:  		/* bc 12, CR6_LT, -592 */
		/* 8211E710h case   14:*/		if ( regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E710h case   14:*/		return 0x8211E714;
		  /* 8211E714h */ case   15:  		/* cmpwi CR6, R10, 57 */
		/* 8211E714h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000039);
		/* 8211E714h case   15:*/		return 0x8211E718;
		  /* 8211E718h */ case   16:  		/* bc 12, CR6_GT, -600 */
		/* 8211E718h case   16:*/		if ( regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E718h case   16:*/		return 0x8211E71C;
		  /* 8211E71Ch */ case   17:  		/* addi R11, R11, -49 */
		/* 8211E71Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFCF);
		/* 8211E71Ch case   17:*/		return 0x8211E720;
		  /* 8211E720h */ case   18:  		/* addi R10, R10, -49 */
		/* 8211E720h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFCF);
		/* 8211E720h case   18:*/		return 0x8211E724;
		  /* 8211E724h */ case   19:  		/* addi R31, R31, 3 */
		/* 8211E724h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x3);
		/* 8211E724h case   19:*/		return 0x8211E728;
		  /* 8211E728h */ case   20:  		/* addi R28, R28, 3 */
		/* 8211E728h case   20:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x3);
		/* 8211E728h case   20:*/		return 0x8211E72C;
		  /* 8211E72Ch */ case   21:  		/* addi R29, R29, 3 */
		/* 8211E72Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x3);
		/* 8211E72Ch case   21:*/		return 0x8211E730;
	}
	return 0x8211E730;
} // Block from 8211E6D8h-8211E730h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8211E730h
// Function '?BinaryType@CParse@D3DXShader@@IAAJPAVCNode@2@0PAPAV32@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E730);
		  /* 8211E730h */ case    0:  		/* b 120 */
		/* 8211E730h case    0:*/		return 0x8211E7A8;
		/* 8211E730h case    0:*/		return 0x8211E734;
	}
	return 0x8211E734;
} // Block from 8211E730h-8211E734h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E734);
		  /* 8211E734h */ case    0:  		/* lbz R11, <#[R31]> */
		/* 8211E734h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211E734h case    0:*/		return 0x8211E738;
		  /* 8211E738h */ case    1:  		/* cmplwi CR6, R11, 97 */
		/* 8211E738h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000061);
		/* 8211E738h case    1:*/		return 0x8211E73C;
		  /* 8211E73Ch */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8211E73Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E794;  }
		/* 8211E73Ch case    2:*/		return 0x8211E740;
		  /* 8211E740h */ case    3:  		/* cmplwi CR6, R11, 98 */
		/* 8211E740h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000062);
		/* 8211E740h case    3:*/		return 0x8211E744;
		  /* 8211E744h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 8211E744h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211E784;  }
		/* 8211E744h case    4:*/		return 0x8211E748;
		  /* 8211E748h */ case    5:  		/* cmplwi CR6, R11, 103 */
		/* 8211E748h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000067);
		/* 8211E748h case    5:*/		return 0x8211E74C;
		  /* 8211E74Ch */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 8211E74Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8211E78C;  }
		/* 8211E74Ch case    6:*/		return 0x8211E750;
		  /* 8211E750h */ case    7:  		/* cmplwi CR6, R11, 114 */
		/* 8211E750h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000072);
		/* 8211E750h case    7:*/		return 0x8211E754;
		  /* 8211E754h */ case    8:  		/* bc 4, CR6_EQ, -660 */
		/* 8211E754h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E754h case    8:*/		return 0x8211E758;
		  /* 8211E758h */ case    9:  		/* li R10, 0 */
		/* 8211E758h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211E758h case    9:*/		return 0x8211E75C;
		  /* 8211E75Ch */ case   10:  		/* b 60 */
		/* 8211E75Ch case   10:*/		return 0x8211E798;
		/* 8211E75Ch case   10:*/		return 0x8211E760;
	}
	return 0x8211E760;
} // Block from 8211E734h-8211E760h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211E760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E760);
		  /* 8211E760h */ case    0:  		/* lbz R11, <#[R31]> */
		/* 8211E760h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211E760h case    0:*/		return 0x8211E764;
		  /* 8211E764h */ case    1:  		/* cmplwi CR6, R11, 119 */
		/* 8211E764h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000077);
		/* 8211E764h case    1:*/		return 0x8211E768;
		  /* 8211E768h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 8211E768h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E794;  }
		/* 8211E768h case    2:*/		return 0x8211E76C;
		  /* 8211E76Ch */ case    3:  		/* cmplwi CR6, R11, 120 */
		/* 8211E76Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000078);
		/* 8211E76Ch case    3:*/		return 0x8211E770;
		  /* 8211E770h */ case    4:  		/* bc 12, CR6_EQ, -24 */
		/* 8211E770h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211E758;  }
		/* 8211E770h case    4:*/		return 0x8211E774;
		  /* 8211E774h */ case    5:  		/* cmplwi CR6, R11, 121 */
		/* 8211E774h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000079);
		/* 8211E774h case    5:*/		return 0x8211E778;
		  /* 8211E778h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8211E778h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211E78C;  }
		/* 8211E778h case    6:*/		return 0x8211E77C;
		  /* 8211E77Ch */ case    7:  		/* cmplwi CR6, R11, 122 */
		/* 8211E77Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007A);
		/* 8211E77Ch case    7:*/		return 0x8211E780;
		  /* 8211E780h */ case    8:  		/* bc 4, CR6_EQ, -704 */
		/* 8211E780h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8211E4C0;  }
		/* 8211E780h case    8:*/		return 0x8211E784;
	}
	return 0x8211E784;
} // Block from 8211E760h-8211E784h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211E784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E784);
		  /* 8211E784h */ case    0:  		/* li R10, 2 */
		/* 8211E784h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8211E784h case    0:*/		return 0x8211E788;
		  /* 8211E788h */ case    1:  		/* b 16 */
		/* 8211E788h case    1:*/		return 0x8211E798;
		/* 8211E788h case    1:*/		return 0x8211E78C;
	}
	return 0x8211E78C;
} // Block from 8211E784h-8211E78Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211E78Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E78C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E78C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E78C);
		  /* 8211E78Ch */ case    0:  		/* li R10, 1 */
		/* 8211E78Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8211E78Ch case    0:*/		return 0x8211E790;
		  /* 8211E790h */ case    1:  		/* b 8 */
		/* 8211E790h case    1:*/		return 0x8211E798;
		/* 8211E790h case    1:*/		return 0x8211E794;
	}
	return 0x8211E794;
} // Block from 8211E78Ch-8211E794h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211E794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E794);
		  /* 8211E794h */ case    0:  		/* li R10, 3 */
		/* 8211E794h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8211E794h case    0:*/		return 0x8211E798;
	}
	return 0x8211E798;
} // Block from 8211E794h-8211E798h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E798);
		  /* 8211E798h */ case    0:  		/* addi R29, R29, 1 */
		/* 8211E798h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8211E798h case    0:*/		return 0x8211E79C;
		  /* 8211E79Ch */ case    1:  		/* addi R28, R28, 1 */
		/* 8211E79Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8211E79Ch case    1:*/		return 0x8211E7A0;
		  /* 8211E7A0h */ case    2:  		/* addi R31, R31, 1 */
		/* 8211E7A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8211E7A0h case    2:*/		return 0x8211E7A4;
		  /* 8211E7A4h */ case    3:  		/* li R11, 0 */
		/* 8211E7A4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8211E7A4h case    3:*/		return 0x8211E7A8;
	}
	return 0x8211E7A8;
} // Block from 8211E798h-8211E7A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211E7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E7A8);
		  /* 8211E7A8h */ case    0:  		/* cmplw CR6, R11, R19 */
		/* 8211E7A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 8211E7A8h case    0:*/		return 0x8211E7AC;
		  /* 8211E7ACh */ case    1:  		/* bc 4, CR6_LT, -748 */
		/* 8211E7ACh case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E7ACh case    1:*/		return 0x8211E7B0;
		  /* 8211E7B0h */ case    2:  		/* cmplw CR6, R10, R20 */
		/* 8211E7B0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 8211E7B0h case    2:*/		return 0x8211E7B4;
		  /* 8211E7B4h */ case    3:  		/* bc 4, CR6_LT, -756 */
		/* 8211E7B4h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E7B4h case    3:*/		return 0x8211E7B8;
		  /* 8211E7B8h */ case    4:  		/* mullw R11, R11, R20 */
		/* 8211E7B8h case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R20);
		/* 8211E7B8h case    4:*/		return 0x8211E7BC;
		  /* 8211E7BCh */ case    5:  		/* li R3, 20 */
		/* 8211E7BCh case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211E7BCh case    5:*/		return 0x8211E7C0;
		  /* 8211E7C0h */ case    6:  		/* add R30, R11, R10 */
		/* 8211E7C0h case    6:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8211E7C0h case    6:*/		return 0x8211E7C4;
		  /* 8211E7C4h */ case    7:  		/* bl -349596 */
		/* 8211E7C4h case    7:*/		regs.LR = 0x8211E7C8; return 0x820C9228;
		/* 8211E7C4h case    7:*/		return 0x8211E7C8;
		  /* 8211E7C8h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8211E7C8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E7C8h case    8:*/		return 0x8211E7CC;
		  /* 8211E7CCh */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 8211E7CCh case    9:*/		if ( regs.CR[0].eq ) { return 0x8211E7E4;  }
		/* 8211E7CCh case    9:*/		return 0x8211E7D0;
		  /* 8211E7D0h */ case   10:  		/* mr R6, R23 */
		/* 8211E7D0h case   10:*/		regs.R6 = regs.R23;
		/* 8211E7D0h case   10:*/		return 0x8211E7D4;
		  /* 8211E7D4h */ case   11:  		/* li R5, 0 */
		/* 8211E7D4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211E7D4h case   11:*/		return 0x8211E7D8;
		  /* 8211E7D8h */ case   12:  		/* li R4, 0 */
		/* 8211E7D8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211E7D8h case   12:*/		return 0x8211E7DC;
		  /* 8211E7DCh */ case   13:  		/* bl -349164 */
		/* 8211E7DCh case   13:*/		regs.LR = 0x8211E7E0; return 0x820C93F0;
		/* 8211E7DCh case   13:*/		return 0x8211E7E0;
		  /* 8211E7E0h */ case   14:  		/* b 8 */
		/* 8211E7E0h case   14:*/		return 0x8211E7E8;
		/* 8211E7E0h case   14:*/		return 0x8211E7E4;
	}
	return 0x8211E7E4;
} // Block from 8211E7A8h-8211E7E4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211E7E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E7E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E7E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E7E4);
		  /* 8211E7E4h */ case    0:  		/* li R3, 0 */
		/* 8211E7E4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E7E4h case    0:*/		return 0x8211E7E8;
	}
	return 0x8211E7E8;
} // Block from 8211E7E4h-8211E7E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E7E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E7E8);
		  /* 8211E7E8h */ case    0:  		/* stw R3, <#[R27]> */
		/* 8211E7E8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8211E7E8h case    0:*/		return 0x8211E7EC;
		  /* 8211E7ECh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211E7ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E7ECh case    1:*/		return 0x8211E7F0;
		  /* 8211E7F0h */ case    2:  		/* bc 12, CR6_EQ, -788 */
		/* 8211E7F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E7F0h case    2:*/		return 0x8211E7F4;
		  /* 8211E7F4h */ case    3:  		/* li R3, 72 */
		/* 8211E7F4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211E7F4h case    3:*/		return 0x8211E7F8;
		  /* 8211E7F8h */ case    4:  		/* bl -349648 */
		/* 8211E7F8h case    4:*/		regs.LR = 0x8211E7FC; return 0x820C9228;
		/* 8211E7F8h case    4:*/		return 0x8211E7FC;
		  /* 8211E7FCh */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211E7FCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E7FCh case    5:*/		return 0x8211E800;
		  /* 8211E800h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 8211E800h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211E818;  }
		/* 8211E800h case    6:*/		return 0x8211E804;
		  /* 8211E804h */ case    7:  		/* mr R6, R17 */
		/* 8211E804h case    7:*/		regs.R6 = regs.R17;
		/* 8211E804h case    7:*/		return 0x8211E808;
		  /* 8211E808h */ case    8:  		/* mr R5, R30 */
		/* 8211E808h case    8:*/		regs.R5 = regs.R30;
		/* 8211E808h case    8:*/		return 0x8211E80C;
		  /* 8211E80Ch */ case    9:  		/* li R4, 2 */
		/* 8211E80Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8211E80Ch case    9:*/		return 0x8211E810;
		  /* 8211E810h */ case   10:  		/* bl -336952 */
		/* 8211E810h case   10:*/		regs.LR = 0x8211E814; return 0x820CC3D8;
		/* 8211E810h case   10:*/		return 0x8211E814;
		  /* 8211E814h */ case   11:  		/* b 8 */
		/* 8211E814h case   11:*/		return 0x8211E81C;
		/* 8211E814h case   11:*/		return 0x8211E818;
	}
	return 0x8211E818;
} // Block from 8211E7E8h-8211E818h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211E818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E818);
		  /* 8211E818h */ case    0:  		/* li R3, 0 */
		/* 8211E818h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E818h case    0:*/		return 0x8211E81C;
	}
	return 0x8211E81C;
} // Block from 8211E818h-8211E81Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E81C);
		  /* 8211E81Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8211E81Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8211E81Ch case    0:*/		return 0x8211E820;
		  /* 8211E820h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211E820h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E820h case    1:*/		return 0x8211E824;
		  /* 8211E824h */ case    2:  		/* stw R3, <#[R11 + 8]> */
		/* 8211E824h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8211E824h case    2:*/		return 0x8211E828;
		  /* 8211E828h */ case    3:  		/* bc 12, CR6_EQ, -844 */
		/* 8211E828h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E828h case    3:*/		return 0x8211E82C;
		  /* 8211E82Ch */ case    4:  		/* lwz R11, <#[R27]> */
		/* 8211E82Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8211E82Ch case    4:*/		return 0x8211E830;
		  /* 8211E830h */ case    5:  		/* addi R26, R26, 1 */
		/* 8211E830h case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8211E830h case    5:*/		return 0x8211E834;
		  /* 8211E834h */ case    6:  		/* cmplw CR6, R31, R25 */
		/* 8211E834h case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 8211E834h case    6:*/		return 0x8211E838;
		  /* 8211E838h */ case    7:  		/* addi R27, R11, 12 */
		/* 8211E838h case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xC);
		/* 8211E838h case    7:*/		return 0x8211E83C;
		  /* 8211E83Ch */ case    8:  		/* bc 12, CR6_LT, -500 */
		/* 8211E83Ch case    8:*/		if ( regs.CR[6].lt ) { return 0x8211E648;  }
		/* 8211E83Ch case    8:*/		return 0x8211E840;
	}
	return 0x8211E840;
} // Block from 8211E81Ch-8211E840h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211E840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E840);
		  /* 8211E840h */ case    0:  		/* cmplw CR6, R31, R25 */
		/* 8211E840h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 8211E840h case    0:*/		return 0x8211E844;
		  /* 8211E844h */ case    1:  		/* bc 12, CR6_LT, -900 */
		/* 8211E844h case    1:*/		if ( regs.CR[6].lt ) { return 0x8211E4C0;  }
		/* 8211E844h case    1:*/		return 0x8211E848;
		  /* 8211E848h */ case    2:  		/* cmplwi CR6, R26, 4 */
		/* 8211E848h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 8211E848h case    2:*/		return 0x8211E84C;
		  /* 8211E84Ch */ case    3:  		/* bc 12, CR6_GT, -908 */
		/* 8211E84Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x8211E4C0;  }
		/* 8211E84Ch case    3:*/		return 0x8211E850;
	}
	return 0x8211E850;
} // Block from 8211E840h-8211E850h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211E850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E850);
		  /* 8211E850h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 8211E850h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 8211E850h case    0:*/		return 0x8211E854;
		  /* 8211E854h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211E854h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211E854h case    1:*/		return 0x8211E858;
		  /* 8211E858h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8211E858h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211E8AC;  }
		/* 8211E858h case    2:*/		return 0x8211E85C;
		  /* 8211E85Ch */ case    3:  		/* cmpwi CR6, R18, 0 */
		/* 8211E85Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R18,0x00000000);
		/* 8211E85Ch case    3:*/		return 0x8211E860;
		  /* 8211E860h */ case    4:  		/* bc 4, CR6_EQ, 76 */
		/* 8211E860h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211E8AC;  }
		/* 8211E860h case    4:*/		return 0x8211E864;
		  /* 8211E864h */ case    5:  		/* lwz R9, <#[R11 + 12]> */
		/* 8211E864h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8211E864h case    5:*/		return 0x8211E868;
		  /* 8211E868h */ case    6:  		/* mr R10, R9 */
		/* 8211E868h case    6:*/		regs.R10 = regs.R9;
		/* 8211E868h case    6:*/		return 0x8211E86C;
		  /* 8211E86Ch */ case    7:  		/* cmplwi CR0, R9, 0 */
		/* 8211E86Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 8211E86Ch case    7:*/		return 0x8211E870;
		  /* 8211E870h */ case    8:  		/* bc 12, CR0_EQ, 48 */
		/* 8211E870h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211E8A0;  }
		/* 8211E870h case    8:*/		return 0x8211E874;
		  /* 8211E874h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 8211E874h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8211E874h case    9:*/		return 0x8211E878;
		  /* 8211E878h */ case   10:  		/* lwz R11, <#[R11 + 24]> */
		/* 8211E878h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8211E878h case   10:*/		return 0x8211E87C;
		  /* 8211E87Ch */ case   11:  		/* lwz R8, <#[R10 + 8]> */
		/* 8211E87Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 8211E87Ch case   11:*/		return 0x8211E880;
		  /* 8211E880h */ case   12:  		/* lwz R8, <#[R8 + 24]> */
		/* 8211E880h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000018) );
		/* 8211E880h case   12:*/		return 0x8211E884;
		  /* 8211E884h */ case   13:  		/* cmplw CR6, R11, R8 */
		/* 8211E884h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8211E884h case   13:*/		return 0x8211E888;
		  /* 8211E888h */ case   14:  		/* bc 12, CR6_EQ, 20 */
		/* 8211E888h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211E89C;  }
		/* 8211E888h case   14:*/		return 0x8211E88C;
		  /* 8211E88Ch */ case   15:  		/* lwz R10, <#[R10 + 12]> */
		/* 8211E88Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8211E88Ch case   15:*/		return 0x8211E890;
		  /* 8211E890h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 8211E890h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211E890h case   16:*/		return 0x8211E894;
		  /* 8211E894h */ case   17:  		/* bc 4, CR6_EQ, -24 */
		/* 8211E894h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8211E87C;  }
		/* 8211E894h case   17:*/		return 0x8211E898;
		  /* 8211E898h */ case   18:  		/* b 8 */
		/* 8211E898h case   18:*/		return 0x8211E8A0;
		/* 8211E898h case   18:*/		return 0x8211E89C;
	}
	return 0x8211E89C;
} // Block from 8211E850h-8211E89Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211E89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E89C);
		  /* 8211E89Ch */ case    0:  		/* li R18, 1 */
		/* 8211E89Ch case    0:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 8211E89Ch case    0:*/		return 0x8211E8A0;
	}
	return 0x8211E8A0;
} // Block from 8211E89Ch-8211E8A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E8A0);
		  /* 8211E8A0h */ case    0:  		/* mr R11, R9 */
		/* 8211E8A0h case    0:*/		regs.R11 = regs.R9;
		/* 8211E8A0h case    0:*/		return 0x8211E8A4;
		  /* 8211E8A4h */ case    1:  		/* cmplwi CR0, R9, 0 */
		/* 8211E8A4h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 8211E8A4h case    1:*/		return 0x8211E8A8;
		  /* 8211E8A8h */ case    2:  		/* bc 4, CR0_EQ, -76 */
		/* 8211E8A8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8211E85C;  }
		/* 8211E8A8h case    2:*/		return 0x8211E8AC;
	}
	return 0x8211E8AC;
} // Block from 8211E8A0h-8211E8ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211E8ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E8AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E8AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E8AC);
		  /* 8211E8ACh */ case    0:  		/* li R3, 40 */
		/* 8211E8ACh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211E8ACh case    0:*/		return 0x8211E8B0;
		  /* 8211E8B0h */ case    1:  		/* bl -349832 */
		/* 8211E8B0h case    1:*/		regs.LR = 0x8211E8B4; return 0x820C9228;
		/* 8211E8B0h case    1:*/		return 0x8211E8B4;
		  /* 8211E8B4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211E8B4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E8B4h case    2:*/		return 0x8211E8B8;
		  /* 8211E8B8h */ case    3:  		/* bc 12, CR0_EQ, 56 */
		/* 8211E8B8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211E8F0;  }
		/* 8211E8B8h case    3:*/		return 0x8211E8BC;
		  /* 8211E8BCh */ case    4:  		/* subfic R11, R18, 0 */
		/* 8211E8BCh case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R18,0x0);
		/* 8211E8BCh case    4:*/		return 0x8211E8C0;
		  /* 8211E8C0h */ case    5:  		/* lwz R5, <#[R21 + 20]> */
		/* 8211E8C0h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R21 + 0x00000014) );
		/* 8211E8C0h case    5:*/		return 0x8211E8C4;
		  /* 8211E8C4h */ case    6:  		/* addi R11, R26, -1 */
		/* 8211E8C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFF);
		/* 8211E8C4h case    6:*/		return 0x8211E8C8;
		  /* 8211E8C8h */ case    7:  		/* subfe R10, R10, R10 */
		/* 8211E8C8h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8211E8C8h case    7:*/		return 0x8211E8CC;
		  /* 8211E8CCh */ case    8:  		/* addic R4, R11, -1 */
		/* 8211E8CCh case    8:*/		cpu::op::addic<0>(regs,&regs.R4,regs.R11,0xFFFFFFFF);
		/* 8211E8CCh case    8:*/		return 0x8211E8D0;
	}
	return 0x8211E8D0;
} // Block from 8211E8ACh-8211E8D0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211E8D0h
// Function '?ScalarExpr@CParse@D3DXShader@@IAAPAVCNode@2@W4_D3DCOMPONENT_TYPE@2@INPAUD3DXTOKEN@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E8D0);
		  /* 8211E8D0h */ case    0:  		/* li R9, 512 */
		/* 8211E8D0h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8211E8D0h case    0:*/		return 0x8211E8D4;
		  /* 8211E8D4h */ case    1:  		/* mr R8, R26 */
		/* 8211E8D4h case    1:*/		regs.R8 = regs.R26;
		/* 8211E8D4h case    1:*/		return 0x8211E8D8;
		  /* 8211E8D8h */ case    2:  		/* and R9, R10, R9 */
		/* 8211E8D8h case    2:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 8211E8D8h case    2:*/		return 0x8211E8DC;
		  /* 8211E8DCh */ case    3:  		/* li R7, 1 */
		/* 8211E8DCh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8211E8DCh case    3:*/		return 0x8211E8E0;
		  /* 8211E8E0h */ case    4:  		/* li R6, 0 */
		/* 8211E8E0h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211E8E0h case    4:*/		return 0x8211E8E4;
		  /* 8211E8E4h */ case    5:  		/* subfe R4, R4, R11 */
		/* 8211E8E4h case    5:*/		cpu::op::subfe<0>(regs,&regs.R4,regs.R4,regs.R11);
		/* 8211E8E4h case    5:*/		return 0x8211E8E8;
		  /* 8211E8E8h */ case    6:  		/* bl -343144 */
		/* 8211E8E8h case    6:*/		regs.LR = 0x8211E8EC; return 0x820CAC80;
		/* 8211E8E8h case    6:*/		return 0x8211E8EC;
		  /* 8211E8ECh */ case    7:  		/* b 8 */
		/* 8211E8ECh case    7:*/		return 0x8211E8F4;
		/* 8211E8ECh case    7:*/		return 0x8211E8F0;
	}
	return 0x8211E8F0;
} // Block from 8211E8D0h-8211E8F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211E8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E8F0);
		  /* 8211E8F0h */ case    0:  		/* li R3, 0 */
		/* 8211E8F0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211E8F0h case    0:*/		return 0x8211E8F4;
	}
	return 0x8211E8F4;
} // Block from 8211E8F0h-8211E8F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E8F4);
		  /* 8211E8F4h */ case    0:  		/* stw R3, <#[R16 + 16]> */
		/* 8211E8F4h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R16 + 0x00000010) );
		/* 8211E8F4h case    0:*/		return 0x8211E8F8;
	}
	return 0x8211E8F8;
} // Block from 8211E8F4h-8211E8F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E8F8);
		  /* 8211E8F8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211E8F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211E8F8h case    0:*/		return 0x8211E8FC;
		  /* 8211E8FCh */ case    1:  		/* bc 12, CR6_EQ, -1056 */
		/* 8211E8FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8211E4DC;  }
		/* 8211E8FCh case    1:*/		return 0x8211E900;
		  /* 8211E900h */ case    2:  		/* lwz R11, <#[R15]> */
		/* 8211E900h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 8211E900h case    2:*/		return 0x8211E904;
		  /* 8211E904h */ case    3:  		/* mr R3, R15 */
		/* 8211E904h case    3:*/		regs.R3 = regs.R15;
		/* 8211E904h case    3:*/		return 0x8211E908;
		  /* 8211E908h */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211E908h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211E908h case    4:*/		return 0x8211E90C;
		  /* 8211E90Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 8211E90Ch case    5:*/		regs.CTR = regs.R11;
		/* 8211E90Ch case    5:*/		return 0x8211E910;
		  /* 8211E910h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8211E910h case    6:*/		if ( 1 ) { regs.LR = 0x8211E914; return (uint32)regs.CTR; }
		/* 8211E910h case    6:*/		return 0x8211E914;
		  /* 8211E914h */ case    7:  		/* stw R3, <#[R16 + 32]> */
		/* 8211E914h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R16 + 0x00000020) );
		/* 8211E914h case    7:*/		return 0x8211E918;
		  /* 8211E918h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8211E918h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E918h case    8:*/		return 0x8211E91C;
		  /* 8211E91Ch */ case    9:  		/* bc 12, CR0_EQ, -1116 */
		/* 8211E91Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8211E4C0;  }
		/* 8211E91Ch case    9:*/		return 0x8211E920;
		  /* 8211E920h */ case   10:  		/* mr R4, R16 */
		/* 8211E920h case   10:*/		regs.R4 = regs.R16;
		/* 8211E920h case   10:*/		return 0x8211E924;
		  /* 8211E924h */ case   11:  		/* mr R3, R14 */
		/* 8211E924h case   11:*/		regs.R3 = regs.R14;
		/* 8211E924h case   11:*/		return 0x8211E928;
		  /* 8211E928h */ case   12:  		/* bl -10512 */
		/* 8211E928h case   12:*/		regs.LR = 0x8211E92C; return 0x8211C018;
		/* 8211E928h case   12:*/		return 0x8211E92C;
		  /* 8211E92Ch */ case   13:  		/* mr R3, R16 */
		/* 8211E92Ch case   13:*/		regs.R3 = regs.R16;
		/* 8211E92Ch case   13:*/		return 0x8211E930;
		  /* 8211E930h */ case   14:  		/* b -1104 */
		/* 8211E930h case   14:*/		return 0x8211E4E0;
		/* 8211E930h case   14:*/		return 0x8211E934;
		  /* 8211E934h */ case   15:  		/* nop */
		/* 8211E934h case   15:*/		cpu::op::nop();
		/* 8211E934h case   15:*/		return 0x8211E938;
	}
	return 0x8211E938;
} // Block from 8211E8F8h-8211E938h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211E938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E938);
		  /* 8211E938h */ case    0:  		/* mfspr R12, LR */
		/* 8211E938h case    0:*/		regs.R12 = regs.LR;
		/* 8211E938h case    0:*/		return 0x8211E93C;
		  /* 8211E93Ch */ case    1:  		/* bl -579300 */
		/* 8211E93Ch case    1:*/		regs.LR = 0x8211E940; return 0x82091258;
		/* 8211E93Ch case    1:*/		return 0x8211E940;
		  /* 8211E940h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8211E940h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8211E940h case    2:*/		return 0x8211E944;
		  /* 8211E944h */ case    3:  		/* mr R28, R3 */
		/* 8211E944h case    3:*/		regs.R28 = regs.R3;
		/* 8211E944h case    3:*/		return 0x8211E948;
		  /* 8211E948h */ case    4:  		/* mr R29, R4 */
		/* 8211E948h case    4:*/		regs.R29 = regs.R4;
		/* 8211E948h case    4:*/		return 0x8211E94C;
		  /* 8211E94Ch */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 8211E94Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211E94Ch case    5:*/		return 0x8211E950;
		  /* 8211E950h */ case    6:  		/* bc 12, CR6_EQ, 412 */
		/* 8211E950h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211E950h case    6:*/		return 0x8211E954;
		  /* 8211E954h */ case    7:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211E954h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211E954h case    7:*/		return 0x8211E958;
		  /* 8211E958h */ case    8:  		/* cmpwi CR6, R11, 29 */
		/* 8211E958h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 8211E958h case    8:*/		return 0x8211E95C;
		  /* 8211E95Ch */ case    9:  		/* bc 4, CR6_EQ, 24 */
		/* 8211E95Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211E974;  }
		/* 8211E95Ch case    9:*/		return 0x8211E960;
		  /* 8211E960h */ case   10:  		/* lwz R11, <#[R3 + 128]> */
		/* 8211E960h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000080) );
		/* 8211E960h case   10:*/		return 0x8211E964;
		  /* 8211E964h */ case   11:  		/* li R10, 1 */
		/* 8211E964h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8211E964h case   11:*/		return 0x8211E968;
		  /* 8211E968h */ case   12:  		/* mr R3, R4 */
		/* 8211E968h case   12:*/		regs.R3 = regs.R4;
		/* 8211E968h case   12:*/		return 0x8211E96C;
		  /* 8211E96Ch */ case   13:  		/* stw R10, <#[R11 + 28]> */
		/* 8211E96Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 8211E96Ch case   13:*/		return 0x8211E970;
		  /* 8211E970h */ case   14:  		/* b 384 */
		/* 8211E970h case   14:*/		return 0x8211EAF0;
		/* 8211E970h case   14:*/		return 0x8211E974;
	}
	return 0x8211E974;
} // Block from 8211E938h-8211E974h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211E974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E974);
		  /* 8211E974h */ case    0:  		/* cmpwi CR6, R11, 16 */
		/* 8211E974h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000010);
		/* 8211E974h case    0:*/		return 0x8211E978;
		  /* 8211E978h */ case    1:  		/* bc 4, CR6_EQ, 372 */
		/* 8211E978h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211E978h case    1:*/		return 0x8211E97C;
		  /* 8211E97Ch */ case    2:  		/* lwz R11, <#[R29 + 56]> */
		/* 8211E97Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 8211E97Ch case    2:*/		return 0x8211E980;
		  /* 8211E980h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8211E980h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211E980h case    3:*/		return 0x8211E984;
		  /* 8211E984h */ case    4:  		/* bc 12, CR6_EQ, 360 */
		/* 8211E984h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211E984h case    4:*/		return 0x8211E988;
		  /* 8211E988h */ case    5:  		/* lwz R10, <#[R29 + 60]> */
		/* 8211E988h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000003C) );
		/* 8211E988h case    5:*/		return 0x8211E98C;
		  /* 8211E98Ch */ case    6:  		/* cmplwi CR6, R10, 4 */
		/* 8211E98Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8211E98Ch case    6:*/		return 0x8211E990;
		  /* 8211E990h */ case    7:  		/* bc 12, CR6_LT, 348 */
		/* 8211E990h case    7:*/		if ( regs.CR[6].lt ) { return 0x8211EAEC;  }
		/* 8211E990h case    7:*/		return 0x8211E994;
		  /* 8211E994h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 8211E994h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8211E994h case    8:*/		return 0x8211E998;
		  /* 8211E998h */ case    9:  		/* lis R10, 4138 */
		/* 8211E998h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x102A);
		/* 8211E998h case    9:*/		return 0x8211E99C;
		  /* 8211E99Ch */ case   10:  		/* ori R10, R10, 4352 */
		/* 8211E99Ch case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1100);
		/* 8211E99Ch case   10:*/		return 0x8211E9A0;
		  /* 8211E9A0h */ case   11:  		/* rlwinm R9, R11, 0, 0, 23 */
		/* 8211E9A0h case   11:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R11);
		/* 8211E9A0h case   11:*/		return 0x8211E9A4;
		  /* 8211E9A4h */ case   12:  		/* cmplw CR6, R9, R10 */
		/* 8211E9A4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8211E9A4h case   12:*/		return 0x8211E9A8;
		  /* 8211E9A8h */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 8211E9A8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8211E9C0;  }
		/* 8211E9A8h case   13:*/		return 0x8211E9AC;
		  /* 8211E9ACh */ case   14:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8211E9ACh case   14:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8211E9ACh case   14:*/		return 0x8211E9B0;
		  /* 8211E9B0h */ case   15:  		/* cmpwi CR6, R10, 1 */
		/* 8211E9B0h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8211E9B0h case   15:*/		return 0x8211E9B4;
		  /* 8211E9B4h */ case   16:  		/* bc 12, CR6_EQ, 48 */
		/* 8211E9B4h case   16:*/		if ( regs.CR[6].eq ) { return 0x8211E9E4;  }
		/* 8211E9B4h case   16:*/		return 0x8211E9B8;
		  /* 8211E9B8h */ case   17:  		/* cmpwi CR6, R10, 0 */
		/* 8211E9B8h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8211E9B8h case   17:*/		return 0x8211E9BC;
		  /* 8211E9BCh */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 8211E9BCh case   18:*/		if ( regs.CR[6].eq ) { return 0x8211E9DC;  }
		/* 8211E9BCh case   18:*/		return 0x8211E9C0;
	}
	return 0x8211E9C0;
} // Block from 8211E974h-8211E9C0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211E9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E9C0);
		  /* 8211E9C0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8211E9C0h case    0:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8211E9C0h case    0:*/		return 0x8211E9C4;
		  /* 8211E9C4h */ case    1:  		/* lis R10, -2 */
		/* 8211E9C4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFE);
		/* 8211E9C4h case    1:*/		return 0x8211E9C8;
		  /* 8211E9C8h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8211E9C8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8211E9C8h case    2:*/		return 0x8211E9CC;
		  /* 8211E9CCh */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8211E9CCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8211E9E4;  }
		/* 8211E9CCh case    3:*/		return 0x8211E9D0;
		  /* 8211E9D0h */ case    4:  		/* lis R10, -1 */
		/* 8211E9D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8211E9D0h case    4:*/		return 0x8211E9D4;
		  /* 8211E9D4h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 8211E9D4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8211E9D4h case    5:*/		return 0x8211E9D8;
		  /* 8211E9D8h */ case    6:  		/* bc 4, CR6_EQ, 276 */
		/* 8211E9D8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211E9D8h case    6:*/		return 0x8211E9DC;
	}
	return 0x8211E9DC;
} // Block from 8211E9C0h-8211E9DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211E9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E9DC);
		  /* 8211E9DCh */ case    0:  		/* li R30, 42 */
		/* 8211E9DCh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x2A);
		/* 8211E9DCh case    0:*/		return 0x8211E9E0;
		  /* 8211E9E0h */ case    1:  		/* b 8 */
		/* 8211E9E0h case    1:*/		return 0x8211E9E8;
		/* 8211E9E0h case    1:*/		return 0x8211E9E4;
	}
	return 0x8211E9E4;
} // Block from 8211E9DCh-8211E9E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211E9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E9E4);
		  /* 8211E9E4h */ case    0:  		/* li R30, 43 */
		/* 8211E9E4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x2B);
		/* 8211E9E4h case    0:*/		return 0x8211E9E8;
	}
	return 0x8211E9E8;
} // Block from 8211E9E4h-8211E9E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211E9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211E9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211E9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211E9E8);
		  /* 8211E9E8h */ case    0:  		/* li R3, 88 */
		/* 8211E9E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211E9E8h case    0:*/		return 0x8211E9EC;
		  /* 8211E9ECh */ case    1:  		/* bl -350148 */
		/* 8211E9ECh case    1:*/		regs.LR = 0x8211E9F0; return 0x820C9228;
		/* 8211E9ECh case    1:*/		return 0x8211E9F0;
		  /* 8211E9F0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211E9F0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211E9F0h case    2:*/		return 0x8211E9F4;
		  /* 8211E9F4h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 8211E9F4h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211EA1C;  }
		/* 8211E9F4h case    3:*/		return 0x8211E9F8;
		  /* 8211E9F8h */ case    4:  		/* addi R9, R29, 16 */
		/* 8211E9F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x10);
		/* 8211E9F8h case    4:*/		return 0x8211E9FC;
		  /* 8211E9FCh */ case    5:  		/* li R8, 1 */
		/* 8211E9FCh case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211E9FCh case    5:*/		return 0x8211EA00;
		  /* 8211EA00h */ case    6:  		/* li R7, 0 */
		/* 8211EA00h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211EA00h case    6:*/		return 0x8211EA04;
		  /* 8211EA04h */ case    7:  		/* li R6, 0 */
		/* 8211EA04h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211EA04h case    7:*/		return 0x8211EA08;
		  /* 8211EA08h */ case    8:  		/* li R5, 0 */
		/* 8211EA08h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211EA08h case    8:*/		return 0x8211EA0C;
		  /* 8211EA0Ch */ case    9:  		/* li R4, 0 */
		/* 8211EA0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211EA0Ch case    9:*/		return 0x8211EA10;
		  /* 8211EA10h */ case   10:  		/* bl -338568 */
		/* 8211EA10h case   10:*/		regs.LR = 0x8211EA14; return 0x820CBF88;
		/* 8211EA10h case   10:*/		return 0x8211EA14;
		  /* 8211EA14h */ case   11:  		/* mr R31, R3 */
		/* 8211EA14h case   11:*/		regs.R31 = regs.R3;
		/* 8211EA14h case   11:*/		return 0x8211EA18;
		  /* 8211EA18h */ case   12:  		/* b 8 */
		/* 8211EA18h case   12:*/		return 0x8211EA20;
		/* 8211EA18h case   12:*/		return 0x8211EA1C;
	}
	return 0x8211EA1C;
} // Block from 8211E9E8h-8211EA1Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211EA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EA1C);
		  /* 8211EA1Ch */ case    0:  		/* li R31, 0 */
		/* 8211EA1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211EA1Ch case    0:*/		return 0x8211EA20;
	}
	return 0x8211EA20;
} // Block from 8211EA1Ch-8211EA20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EA20);
		  /* 8211EA20h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211EA20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211EA20h case    0:*/		return 0x8211EA24;
		  /* 8211EA24h */ case    1:  		/* bc 12, CR6_EQ, 200 */
		/* 8211EA24h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211EA24h case    1:*/		return 0x8211EA28;
		  /* 8211EA28h */ case    2:  		/* li R3, 40 */
		/* 8211EA28h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211EA28h case    2:*/		return 0x8211EA2C;
		  /* 8211EA2Ch */ case    3:  		/* bl -350212 */
		/* 8211EA2Ch case    3:*/		regs.LR = 0x8211EA30; return 0x820C9228;
		/* 8211EA2Ch case    3:*/		return 0x8211EA30;
		  /* 8211EA30h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8211EA30h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EA30h case    4:*/		return 0x8211EA34;
		  /* 8211EA34h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8211EA34h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211EA58;  }
		/* 8211EA34h case    5:*/		return 0x8211EA38;
		  /* 8211EA38h */ case    6:  		/* li R9, 512 */
		/* 8211EA38h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8211EA38h case    6:*/		return 0x8211EA3C;
		  /* 8211EA3Ch */ case    7:  		/* li R8, 1 */
		/* 8211EA3Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211EA3Ch case    7:*/		return 0x8211EA40;
		  /* 8211EA40h */ case    8:  		/* li R7, 1 */
		/* 8211EA40h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8211EA40h case    8:*/		return 0x8211EA44;
		  /* 8211EA44h */ case    9:  		/* li R6, 0 */
		/* 8211EA44h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211EA44h case    9:*/		return 0x8211EA48;
		  /* 8211EA48h */ case   10:  		/* mr R5, R30 */
		/* 8211EA48h case   10:*/		regs.R5 = regs.R30;
		/* 8211EA48h case   10:*/		return 0x8211EA4C;
		  /* 8211EA4Ch */ case   11:  		/* li R4, 3 */
		/* 8211EA4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8211EA4Ch case   11:*/		return 0x8211EA50;
		  /* 8211EA50h */ case   12:  		/* bl -343504 */
		/* 8211EA50h case   12:*/		regs.LR = 0x8211EA54; return 0x820CAC80;
		/* 8211EA50h case   12:*/		return 0x8211EA54;
		  /* 8211EA54h */ case   13:  		/* b 8 */
		/* 8211EA54h case   13:*/		return 0x8211EA5C;
		/* 8211EA54h case   13:*/		return 0x8211EA58;
	}
	return 0x8211EA58;
} // Block from 8211EA20h-8211EA58h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211EA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EA58);
		  /* 8211EA58h */ case    0:  		/* li R3, 0 */
		/* 8211EA58h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EA58h case    0:*/		return 0x8211EA5C;
	}
	return 0x8211EA5C;
} // Block from 8211EA58h-8211EA5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EA5C);
		  /* 8211EA5Ch */ case    0:  		/* stw R3, <#[R31 + 16]> */
		/* 8211EA5Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8211EA5Ch case    0:*/		return 0x8211EA60;
		  /* 8211EA60h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211EA60h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211EA60h case    1:*/		return 0x8211EA64;
		  /* 8211EA64h */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 8211EA64h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211EA64h case    2:*/		return 0x8211EA68;
		  /* 8211EA68h */ case    3:  		/* li R3, 72 */
		/* 8211EA68h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211EA68h case    3:*/		return 0x8211EA6C;
		  /* 8211EA6Ch */ case    4:  		/* bl -350276 */
		/* 8211EA6Ch case    4:*/		regs.LR = 0x8211EA70; return 0x820C9228;
		/* 8211EA6Ch case    4:*/		return 0x8211EA70;
		  /* 8211EA70h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211EA70h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EA70h case    5:*/		return 0x8211EA74;
		  /* 8211EA74h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8211EA74h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211EA90;  }
		/* 8211EA74h case    6:*/		return 0x8211EA78;
		  /* 8211EA78h */ case    7:  		/* addi R7, R29, 16 */
		/* 8211EA78h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R29,0x10);
		/* 8211EA78h case    7:*/		return 0x8211EA7C;
		  /* 8211EA7Ch */ case    8:  		/* lwz R6, <#[R29 + 60]> */
		/* 8211EA7Ch case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x0000003C) );
		/* 8211EA7Ch case    8:*/		return 0x8211EA80;
		  /* 8211EA80h */ case    9:  		/* li R4, 5 */
		/* 8211EA80h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8211EA80h case    9:*/		return 0x8211EA84;
		  /* 8211EA84h */ case   10:  		/* lwz R5, <#[R29 + 56]> */
		/* 8211EA84h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000038) );
		/* 8211EA84h case   10:*/		return 0x8211EA88;
	}
	return 0x8211EA88;
} // Block from 8211EA5Ch-8211EA88h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211EA88h
// Function '?ScalarExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EA88);
		  /* 8211EA88h */ case    0:  		/* bl -337440 */
		/* 8211EA88h case    0:*/		regs.LR = 0x8211EA8C; return 0x820CC468;
		/* 8211EA88h case    0:*/		return 0x8211EA8C;
		  /* 8211EA8Ch */ case    1:  		/* b 8 */
		/* 8211EA8Ch case    1:*/		return 0x8211EA94;
		/* 8211EA8Ch case    1:*/		return 0x8211EA90;
	}
	return 0x8211EA90;
} // Block from 8211EA88h-8211EA90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211EA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EA90);
		  /* 8211EA90h */ case    0:  		/* li R3, 0 */
		/* 8211EA90h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EA90h case    0:*/		return 0x8211EA94;
	}
	return 0x8211EA94;
} // Block from 8211EA90h-8211EA94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EA94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EA94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EA94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EA94);
		  /* 8211EA94h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211EA94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211EA94h case    0:*/		return 0x8211EA98;
		  /* 8211EA98h */ case    1:  		/* stw R3, <#[R31 + 32]> */
		/* 8211EA98h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8211EA98h case    1:*/		return 0x8211EA9C;
		  /* 8211EA9Ch */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 8211EA9Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211EA9Ch case    2:*/		return 0x8211EAA0;
		  /* 8211EAA0h */ case    3:  		/* li R3, 20 */
		/* 8211EAA0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211EAA0h case    3:*/		return 0x8211EAA4;
		  /* 8211EAA4h */ case    4:  		/* bl -350332 */
		/* 8211EAA4h case    4:*/		regs.LR = 0x8211EAA8; return 0x820C9228;
		/* 8211EAA4h case    4:*/		return 0x8211EAA8;
		  /* 8211EAA8h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211EAA8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EAA8h case    5:*/		return 0x8211EAAC;
		  /* 8211EAACh */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8211EAACh case    6:*/		if ( regs.CR[0].eq ) { return 0x8211EAC8;  }
		/* 8211EAACh case    6:*/		return 0x8211EAB0;
		  /* 8211EAB0h */ case    7:  		/* lis R11, -32253 */
		/* 8211EAB0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211EAB0h case    7:*/		return 0x8211EAB4;
		  /* 8211EAB4h */ case    8:  		/* lwz R4, <#[R31 + 32]> */
		/* 8211EAB4h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000020) );
		/* 8211EAB4h case    8:*/		return 0x8211EAB8;
		  /* 8211EAB8h */ case    9:  		/* li R5, 0 */
		/* 8211EAB8h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211EAB8h case    9:*/		return 0x8211EABC;
		  /* 8211EABCh */ case   10:  		/* addi R6, R11, 9184 */
		/* 8211EABCh case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 8211EABCh case   10:*/		return 0x8211EAC0;
		  /* 8211EAC0h */ case   11:  		/* bl -349904 */
		/* 8211EAC0h case   11:*/		regs.LR = 0x8211EAC4; return 0x820C93F0;
		/* 8211EAC0h case   11:*/		return 0x8211EAC4;
		  /* 8211EAC4h */ case   12:  		/* b 8 */
		/* 8211EAC4h case   12:*/		return 0x8211EACC;
		/* 8211EAC4h case   12:*/		return 0x8211EAC8;
	}
	return 0x8211EAC8;
} // Block from 8211EA94h-8211EAC8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211EAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EAC8);
		  /* 8211EAC8h */ case    0:  		/* li R3, 0 */
		/* 8211EAC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EAC8h case    0:*/		return 0x8211EACC;
	}
	return 0x8211EACC;
} // Block from 8211EAC8h-8211EACCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EACC);
		  /* 8211EACCh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211EACCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211EACCh case    0:*/		return 0x8211EAD0;
		  /* 8211EAD0h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 8211EAD0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EAEC;  }
		/* 8211EAD0h case    1:*/		return 0x8211EAD4;
		  /* 8211EAD4h */ case    2:  		/* stw R3, <#[R31 + 32]> */
		/* 8211EAD4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8211EAD4h case    2:*/		return 0x8211EAD8;
		  /* 8211EAD8h */ case    3:  		/* mr R4, R31 */
		/* 8211EAD8h case    3:*/		regs.R4 = regs.R31;
		/* 8211EAD8h case    3:*/		return 0x8211EADC;
		  /* 8211EADCh */ case    4:  		/* mr R3, R28 */
		/* 8211EADCh case    4:*/		regs.R3 = regs.R28;
		/* 8211EADCh case    4:*/		return 0x8211EAE0;
		  /* 8211EAE0h */ case    5:  		/* bl -10952 */
		/* 8211EAE0h case    5:*/		regs.LR = 0x8211EAE4; return 0x8211C018;
		/* 8211EAE0h case    5:*/		return 0x8211EAE4;
		  /* 8211EAE4h */ case    6:  		/* mr R3, R31 */
		/* 8211EAE4h case    6:*/		regs.R3 = regs.R31;
		/* 8211EAE4h case    6:*/		return 0x8211EAE8;
		  /* 8211EAE8h */ case    7:  		/* b 8 */
		/* 8211EAE8h case    7:*/		return 0x8211EAF0;
		/* 8211EAE8h case    7:*/		return 0x8211EAEC;
	}
	return 0x8211EAEC;
} // Block from 8211EACCh-8211EAECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211EAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EAEC);
		  /* 8211EAECh */ case    0:  		/* li R3, 0 */
		/* 8211EAECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EAECh case    0:*/		return 0x8211EAF0;
	}
	return 0x8211EAF0;
} // Block from 8211EAECh-8211EAF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EAF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EAF0);
		  /* 8211EAF0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8211EAF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8211EAF0h case    0:*/		return 0x8211EAF4;
		  /* 8211EAF4h */ case    1:  		/* b -579660 */
		/* 8211EAF4h case    1:*/		return 0x820912A8;
		/* 8211EAF4h case    1:*/		return 0x8211EAF8;
	}
	return 0x8211EAF8;
} // Block from 8211EAF0h-8211EAF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211EAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EAF8);
		  /* 8211EAF8h */ case    0:  		/* mfspr R12, LR */
		/* 8211EAF8h case    0:*/		regs.R12 = regs.LR;
		/* 8211EAF8h case    0:*/		return 0x8211EAFC;
		  /* 8211EAFCh */ case    1:  		/* bl -579748 */
		/* 8211EAFCh case    1:*/		regs.LR = 0x8211EB00; return 0x82091258;
		/* 8211EAFCh case    1:*/		return 0x8211EB00;
		  /* 8211EB00h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8211EB00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8211EB00h case    2:*/		return 0x8211EB04;
		  /* 8211EB04h */ case    3:  		/* mr R28, R3 */
		/* 8211EB04h case    3:*/		regs.R28 = regs.R3;
		/* 8211EB04h case    3:*/		return 0x8211EB08;
		  /* 8211EB08h */ case    4:  		/* li R3, 88 */
		/* 8211EB08h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211EB08h case    4:*/		return 0x8211EB0C;
		  /* 8211EB0Ch */ case    5:  		/* mr R29, R4 */
		/* 8211EB0Ch case    5:*/		regs.R29 = regs.R4;
		/* 8211EB0Ch case    5:*/		return 0x8211EB10;
		  /* 8211EB10h */ case    6:  		/* bl -350440 */
		/* 8211EB10h case    6:*/		regs.LR = 0x8211EB14; return 0x820C9228;
		/* 8211EB10h case    6:*/		return 0x8211EB14;
		  /* 8211EB14h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8211EB14h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EB14h case    7:*/		return 0x8211EB18;
		  /* 8211EB18h */ case    8:  		/* bc 12, CR0_EQ, 40 */
		/* 8211EB18h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211EB40;  }
		/* 8211EB18h case    8:*/		return 0x8211EB1C;
		  /* 8211EB1Ch */ case    9:  		/* addi R9, R28, 40 */
		/* 8211EB1Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x28);
		/* 8211EB1Ch case    9:*/		return 0x8211EB20;
		  /* 8211EB20h */ case   10:  		/* li R8, 1 */
		/* 8211EB20h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211EB20h case   10:*/		return 0x8211EB24;
		  /* 8211EB24h */ case   11:  		/* li R7, 0 */
		/* 8211EB24h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211EB24h case   11:*/		return 0x8211EB28;
		  /* 8211EB28h */ case   12:  		/* li R6, 0 */
		/* 8211EB28h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211EB28h case   12:*/		return 0x8211EB2C;
		  /* 8211EB2Ch */ case   13:  		/* li R5, 0 */
		/* 8211EB2Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211EB2Ch case   13:*/		return 0x8211EB30;
		  /* 8211EB30h */ case   14:  		/* li R4, 0 */
		/* 8211EB30h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211EB30h case   14:*/		return 0x8211EB34;
		  /* 8211EB34h */ case   15:  		/* bl -338860 */
		/* 8211EB34h case   15:*/		regs.LR = 0x8211EB38; return 0x820CBF88;
		/* 8211EB34h case   15:*/		return 0x8211EB38;
		  /* 8211EB38h */ case   16:  		/* mr R30, R3 */
		/* 8211EB38h case   16:*/		regs.R30 = regs.R3;
		/* 8211EB38h case   16:*/		return 0x8211EB3C;
		  /* 8211EB3Ch */ case   17:  		/* b 8 */
		/* 8211EB3Ch case   17:*/		return 0x8211EB44;
		/* 8211EB3Ch case   17:*/		return 0x8211EB40;
	}
	return 0x8211EB40;
} // Block from 8211EAF8h-8211EB40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211EB40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EB40);
		  /* 8211EB40h */ case    0:  		/* li R30, 0 */
		/* 8211EB40h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211EB40h case    0:*/		return 0x8211EB44;
	}
	return 0x8211EB44;
} // Block from 8211EB40h-8211EB44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EB44);
		  /* 8211EB44h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211EB44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211EB44h case    0:*/		return 0x8211EB48;
		  /* 8211EB48h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8211EB48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211EB54;  }
		/* 8211EB48h case    1:*/		return 0x8211EB4C;
		  /* 8211EB4Ch */ case    2:  		/* li R3, 0 */
		/* 8211EB4Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EB4Ch case    2:*/		return 0x8211EB50;
	}
	return 0x8211EB50;
} // Block from 8211EB44h-8211EB50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211EB50h
// Function '?StringExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EB50);
		  /* 8211EB50h */ case    0:  		/* b 224 */
		/* 8211EB50h case    0:*/		return 0x8211EC30;
		/* 8211EB50h case    0:*/		return 0x8211EB54;
	}
	return 0x8211EB54;
} // Block from 8211EB50h-8211EB54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EB54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EB54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EB54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EB54);
		  /* 8211EB54h */ case    0:  		/* li R3, 40 */
		/* 8211EB54h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211EB54h case    0:*/		return 0x8211EB58;
		  /* 8211EB58h */ case    1:  		/* bl -350512 */
		/* 8211EB58h case    1:*/		regs.LR = 0x8211EB5C; return 0x820C9228;
		/* 8211EB58h case    1:*/		return 0x8211EB5C;
		  /* 8211EB5Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211EB5Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EB5Ch case    2:*/		return 0x8211EB60;
		  /* 8211EB60h */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 8211EB60h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211EB84;  }
		/* 8211EB60h case    3:*/		return 0x8211EB64;
		  /* 8211EB64h */ case    4:  		/* li R9, 512 */
		/* 8211EB64h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8211EB64h case    4:*/		return 0x8211EB68;
		  /* 8211EB68h */ case    5:  		/* li R8, 1 */
		/* 8211EB68h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211EB68h case    5:*/		return 0x8211EB6C;
		  /* 8211EB6Ch */ case    6:  		/* li R7, 1 */
		/* 8211EB6Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8211EB6Ch case    6:*/		return 0x8211EB70;
		  /* 8211EB70h */ case    7:  		/* li R6, 0 */
		/* 8211EB70h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211EB70h case    7:*/		return 0x8211EB74;
		  /* 8211EB74h */ case    8:  		/* li R5, 33 */
		/* 8211EB74h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x21);
		/* 8211EB74h case    8:*/		return 0x8211EB78;
		  /* 8211EB78h */ case    9:  		/* li R4, 3 */
		/* 8211EB78h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8211EB78h case    9:*/		return 0x8211EB7C;
		  /* 8211EB7Ch */ case   10:  		/* bl -343804 */
		/* 8211EB7Ch case   10:*/		regs.LR = 0x8211EB80; return 0x820CAC80;
		/* 8211EB7Ch case   10:*/		return 0x8211EB80;
		  /* 8211EB80h */ case   11:  		/* b 8 */
		/* 8211EB80h case   11:*/		return 0x8211EB88;
		/* 8211EB80h case   11:*/		return 0x8211EB84;
	}
	return 0x8211EB84;
} // Block from 8211EB54h-8211EB84h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211EB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EB84);
		  /* 8211EB84h */ case    0:  		/* li R3, 0 */
		/* 8211EB84h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EB84h case    0:*/		return 0x8211EB88;
	}
	return 0x8211EB88;
} // Block from 8211EB84h-8211EB88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EB88);
		  /* 8211EB88h */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 8211EB88h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 8211EB88h case    0:*/		return 0x8211EB8C;
		  /* 8211EB8Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211EB8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211EB8Ch case    1:*/		return 0x8211EB90;
		  /* 8211EB90h */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 8211EB90h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211EB4C;  }
		/* 8211EB90h case    2:*/		return 0x8211EB94;
		  /* 8211EB94h */ case    3:  		/* li R3, 72 */
		/* 8211EB94h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211EB94h case    3:*/		return 0x8211EB98;
		  /* 8211EB98h */ case    4:  		/* bl -350576 */
		/* 8211EB98h case    4:*/		regs.LR = 0x8211EB9C; return 0x820C9228;
		/* 8211EB98h case    4:*/		return 0x8211EB9C;
		  /* 8211EB9Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211EB9Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EB9Ch case    5:*/		return 0x8211EBA0;
		  /* 8211EBA0h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8211EBA0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211EBBC;  }
		/* 8211EBA0h case    6:*/		return 0x8211EBA4;
		  /* 8211EBA4h */ case    7:  		/* addi R6, R28, 40 */
		/* 8211EBA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R28,0x28);
		/* 8211EBA4h case    7:*/		return 0x8211EBA8;
		  /* 8211EBA8h */ case    8:  		/* li R5, 0 */
		/* 8211EBA8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211EBA8h case    8:*/		return 0x8211EBAC;
		  /* 8211EBACh */ case    9:  		/* li R4, 4 */
		/* 8211EBACh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8211EBACh case    9:*/		return 0x8211EBB0;
		  /* 8211EBB0h */ case   10:  		/* bl -337880 */
		/* 8211EBB0h case   10:*/		regs.LR = 0x8211EBB4; return 0x820CC3D8;
		/* 8211EBB0h case   10:*/		return 0x8211EBB4;
		  /* 8211EBB4h */ case   11:  		/* mr R31, R3 */
		/* 8211EBB4h case   11:*/		regs.R31 = regs.R3;
		/* 8211EBB4h case   11:*/		return 0x8211EBB8;
		  /* 8211EBB8h */ case   12:  		/* b 8 */
		/* 8211EBB8h case   12:*/		return 0x8211EBC0;
		/* 8211EBB8h case   12:*/		return 0x8211EBBC;
	}
	return 0x8211EBBC;
} // Block from 8211EB88h-8211EBBCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211EBBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EBBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EBBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EBBC);
		  /* 8211EBBCh */ case    0:  		/* li R31, 0 */
		/* 8211EBBCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211EBBCh case    0:*/		return 0x8211EBC0;
	}
	return 0x8211EBC0;
} // Block from 8211EBBCh-8211EBC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EBC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EBC0);
		  /* 8211EBC0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211EBC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211EBC0h case    0:*/		return 0x8211EBC4;
		  /* 8211EBC4h */ case    1:  		/* bc 12, CR6_EQ, -120 */
		/* 8211EBC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EB4C;  }
		/* 8211EBC4h case    1:*/		return 0x8211EBC8;
		  /* 8211EBC8h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8211EBC8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211EBC8h case    2:*/		return 0x8211EBCC;
		  /* 8211EBCCh */ case    3:  		/* stw R31, <#[R30 + 32]> */
		/* 8211EBCCh case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000020) );
		/* 8211EBCCh case    3:*/		return 0x8211EBD0;
		  /* 8211EBD0h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 8211EBD0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211EBE8;  }
		/* 8211EBD0h case    4:*/		return 0x8211EBD4;
		  /* 8211EBD4h */ case    5:  		/* mr R3, R29 */
		/* 8211EBD4h case    5:*/		regs.R3 = regs.R29;
		/* 8211EBD4h case    5:*/		return 0x8211EBD8;
		  /* 8211EBD8h */ case    6:  		/* bl -350320 */
		/* 8211EBD8h case    6:*/		regs.LR = 0x8211EBDC; return 0x820C9368;
		/* 8211EBD8h case    6:*/		return 0x8211EBDC;
		  /* 8211EBDCh */ case    7:  		/* stw R3, <#[R31 + 24]> */
		/* 8211EBDCh case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8211EBDCh case    7:*/		return 0x8211EBE0;
		  /* 8211EBE0h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8211EBE0h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EBE0h case    8:*/		return 0x8211EBE4;
		  /* 8211EBE4h */ case    9:  		/* bc 12, CR0_EQ, -152 */
		/* 8211EBE4h case    9:*/		if ( regs.CR[0].eq ) { return 0x8211EB4C;  }
		/* 8211EBE4h case    9:*/		return 0x8211EBE8;
	}
	return 0x8211EBE8;
} // Block from 8211EBC0h-8211EBE8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211EBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EBE8);
		  /* 8211EBE8h */ case    0:  		/* li R3, 20 */
		/* 8211EBE8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211EBE8h case    0:*/		return 0x8211EBEC;
		  /* 8211EBECh */ case    1:  		/* bl -350660 */
		/* 8211EBECh case    1:*/		regs.LR = 0x8211EBF0; return 0x820C9228;
		/* 8211EBECh case    1:*/		return 0x8211EBF0;
		  /* 8211EBF0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211EBF0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EBF0h case    2:*/		return 0x8211EBF4;
		  /* 8211EBF4h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8211EBF4h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211EC10;  }
		/* 8211EBF4h case    3:*/		return 0x8211EBF8;
		  /* 8211EBF8h */ case    4:  		/* lis R11, -32253 */
		/* 8211EBF8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211EBF8h case    4:*/		return 0x8211EBFC;
		  /* 8211EBFCh */ case    5:  		/* lwz R4, <#[R30 + 32]> */
		/* 8211EBFCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 8211EBFCh case    5:*/		return 0x8211EC00;
		  /* 8211EC00h */ case    6:  		/* li R5, 0 */
		/* 8211EC00h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211EC00h case    6:*/		return 0x8211EC04;
		  /* 8211EC04h */ case    7:  		/* addi R6, R11, 9184 */
		/* 8211EC04h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 8211EC04h case    7:*/		return 0x8211EC08;
		  /* 8211EC08h */ case    8:  		/* bl -350232 */
		/* 8211EC08h case    8:*/		regs.LR = 0x8211EC0C; return 0x820C93F0;
		/* 8211EC08h case    8:*/		return 0x8211EC0C;
		  /* 8211EC0Ch */ case    9:  		/* b 8 */
		/* 8211EC0Ch case    9:*/		return 0x8211EC14;
		/* 8211EC0Ch case    9:*/		return 0x8211EC10;
	}
	return 0x8211EC10;
} // Block from 8211EBE8h-8211EC10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211EC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EC10);
		  /* 8211EC10h */ case    0:  		/* li R3, 0 */
		/* 8211EC10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EC10h case    0:*/		return 0x8211EC14;
	}
	return 0x8211EC14;
} // Block from 8211EC10h-8211EC14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EC14);
		  /* 8211EC14h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211EC14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211EC14h case    0:*/		return 0x8211EC18;
		  /* 8211EC18h */ case    1:  		/* bc 12, CR6_EQ, -204 */
		/* 8211EC18h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EB4C;  }
		/* 8211EC18h case    1:*/		return 0x8211EC1C;
		  /* 8211EC1Ch */ case    2:  		/* stw R3, <#[R30 + 32]> */
		/* 8211EC1Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8211EC1Ch case    2:*/		return 0x8211EC20;
		  /* 8211EC20h */ case    3:  		/* mr R4, R30 */
		/* 8211EC20h case    3:*/		regs.R4 = regs.R30;
		/* 8211EC20h case    3:*/		return 0x8211EC24;
		  /* 8211EC24h */ case    4:  		/* mr R3, R28 */
		/* 8211EC24h case    4:*/		regs.R3 = regs.R28;
		/* 8211EC24h case    4:*/		return 0x8211EC28;
		  /* 8211EC28h */ case    5:  		/* bl -11280 */
		/* 8211EC28h case    5:*/		regs.LR = 0x8211EC2C; return 0x8211C018;
		/* 8211EC28h case    5:*/		return 0x8211EC2C;
		  /* 8211EC2Ch */ case    6:  		/* mr R3, R30 */
		/* 8211EC2Ch case    6:*/		regs.R3 = regs.R30;
		/* 8211EC2Ch case    6:*/		return 0x8211EC30;
	}
	return 0x8211EC30;
} // Block from 8211EC14h-8211EC30h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211EC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EC30);
		  /* 8211EC30h */ case    0:  		/* addi R1, R1, 128 */
		/* 8211EC30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8211EC30h case    0:*/		return 0x8211EC34;
		  /* 8211EC34h */ case    1:  		/* b -579980 */
		/* 8211EC34h case    1:*/		return 0x820912A8;
		/* 8211EC34h case    1:*/		return 0x8211EC38;
	}
	return 0x8211EC38;
} // Block from 8211EC30h-8211EC38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211EC38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EC38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EC38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EC38);
		  /* 8211EC38h */ case    0:  		/* mfspr R12, LR */
		/* 8211EC38h case    0:*/		regs.R12 = regs.LR;
		/* 8211EC38h case    0:*/		return 0x8211EC3C;
		  /* 8211EC3Ch */ case    1:  		/* bl -580068 */
		/* 8211EC3Ch case    1:*/		regs.LR = 0x8211EC40; return 0x82091258;
		/* 8211EC3Ch case    1:*/		return 0x8211EC40;
		  /* 8211EC40h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8211EC40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8211EC40h case    2:*/		return 0x8211EC44;
		  /* 8211EC44h */ case    3:  		/* mr R28, R3 */
		/* 8211EC44h case    3:*/		regs.R28 = regs.R3;
		/* 8211EC44h case    3:*/		return 0x8211EC48;
		  /* 8211EC48h */ case    4:  		/* li R3, 88 */
		/* 8211EC48h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211EC48h case    4:*/		return 0x8211EC4C;
		  /* 8211EC4Ch */ case    5:  		/* mr R29, R4 */
		/* 8211EC4Ch case    5:*/		regs.R29 = regs.R4;
		/* 8211EC4Ch case    5:*/		return 0x8211EC50;
		  /* 8211EC50h */ case    6:  		/* bl -350760 */
		/* 8211EC50h case    6:*/		regs.LR = 0x8211EC54; return 0x820C9228;
		/* 8211EC50h case    6:*/		return 0x8211EC54;
		  /* 8211EC54h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8211EC54h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EC54h case    7:*/		return 0x8211EC58;
		  /* 8211EC58h */ case    8:  		/* bc 12, CR0_EQ, 40 */
		/* 8211EC58h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211EC80;  }
		/* 8211EC58h case    8:*/		return 0x8211EC5C;
		  /* 8211EC5Ch */ case    9:  		/* addi R9, R28, 40 */
		/* 8211EC5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x28);
		/* 8211EC5Ch case    9:*/		return 0x8211EC60;
		  /* 8211EC60h */ case   10:  		/* li R8, 1 */
		/* 8211EC60h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211EC60h case   10:*/		return 0x8211EC64;
		  /* 8211EC64h */ case   11:  		/* li R7, 0 */
		/* 8211EC64h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211EC64h case   11:*/		return 0x8211EC68;
		  /* 8211EC68h */ case   12:  		/* li R6, 0 */
		/* 8211EC68h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211EC68h case   12:*/		return 0x8211EC6C;
		  /* 8211EC6Ch */ case   13:  		/* li R5, 0 */
		/* 8211EC6Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211EC6Ch case   13:*/		return 0x8211EC70;
		  /* 8211EC70h */ case   14:  		/* li R4, 0 */
		/* 8211EC70h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211EC70h case   14:*/		return 0x8211EC74;
		  /* 8211EC74h */ case   15:  		/* bl -339180 */
		/* 8211EC74h case   15:*/		regs.LR = 0x8211EC78; return 0x820CBF88;
		/* 8211EC74h case   15:*/		return 0x8211EC78;
		  /* 8211EC78h */ case   16:  		/* mr R30, R3 */
		/* 8211EC78h case   16:*/		regs.R30 = regs.R3;
		/* 8211EC78h case   16:*/		return 0x8211EC7C;
		  /* 8211EC7Ch */ case   17:  		/* b 8 */
		/* 8211EC7Ch case   17:*/		return 0x8211EC84;
		/* 8211EC7Ch case   17:*/		return 0x8211EC80;
	}
	return 0x8211EC80;
} // Block from 8211EC38h-8211EC80h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211EC80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EC80);
		  /* 8211EC80h */ case    0:  		/* li R30, 0 */
		/* 8211EC80h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211EC80h case    0:*/		return 0x8211EC84;
	}
	return 0x8211EC84;
} // Block from 8211EC80h-8211EC84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EC84);
		  /* 8211EC84h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211EC84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211EC84h case    0:*/		return 0x8211EC88;
		  /* 8211EC88h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8211EC88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211EC94;  }
		/* 8211EC88h case    1:*/		return 0x8211EC8C;
		  /* 8211EC8Ch */ case    2:  		/* li R3, 0 */
		/* 8211EC8Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211EC8Ch case    2:*/		return 0x8211EC90;
		  /* 8211EC90h */ case    3:  		/* b 224 */
		/* 8211EC90h case    3:*/		return 0x8211ED70;
		/* 8211EC90h case    3:*/		return 0x8211EC94;
	}
	return 0x8211EC94;
} // Block from 8211EC84h-8211EC94h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211EC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EC94);
		  /* 8211EC94h */ case    0:  		/* li R3, 40 */
		/* 8211EC94h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8211EC94h case    0:*/		return 0x8211EC98;
		  /* 8211EC98h */ case    1:  		/* bl -350832 */
		/* 8211EC98h case    1:*/		regs.LR = 0x8211EC9C; return 0x820C9228;
		/* 8211EC98h case    1:*/		return 0x8211EC9C;
		  /* 8211EC9Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211EC9Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211EC9Ch case    2:*/		return 0x8211ECA0;
	}
	return 0x8211ECA0;
} // Block from 8211EC94h-8211ECA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211ECA0h
// Function '?NullExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAUD3DXTOKEN@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ECA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ECA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ECA0);
		  /* 8211ECA0h */ case    0:  		/* bc 12, CR0_EQ, 36 */
		/* 8211ECA0h case    0:*/		if ( regs.CR[0].eq ) { return 0x8211ECC4;  }
		/* 8211ECA0h case    0:*/		return 0x8211ECA4;
		  /* 8211ECA4h */ case    1:  		/* li R9, 512 */
		/* 8211ECA4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 8211ECA4h case    1:*/		return 0x8211ECA8;
		  /* 8211ECA8h */ case    2:  		/* li R8, 1 */
		/* 8211ECA8h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211ECA8h case    2:*/		return 0x8211ECAC;
		  /* 8211ECACh */ case    3:  		/* li R7, 1 */
		/* 8211ECACh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8211ECACh case    3:*/		return 0x8211ECB0;
		  /* 8211ECB0h */ case    4:  		/* li R6, 0 */
		/* 8211ECB0h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211ECB0h case    4:*/		return 0x8211ECB4;
		  /* 8211ECB4h */ case    5:  		/* li R5, 47 */
		/* 8211ECB4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2F);
		/* 8211ECB4h case    5:*/		return 0x8211ECB8;
		  /* 8211ECB8h */ case    6:  		/* li R4, 3 */
		/* 8211ECB8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8211ECB8h case    6:*/		return 0x8211ECBC;
		  /* 8211ECBCh */ case    7:  		/* bl -344124 */
		/* 8211ECBCh case    7:*/		regs.LR = 0x8211ECC0; return 0x820CAC80;
		/* 8211ECBCh case    7:*/		return 0x8211ECC0;
		  /* 8211ECC0h */ case    8:  		/* b 8 */
		/* 8211ECC0h case    8:*/		return 0x8211ECC8;
		/* 8211ECC0h case    8:*/		return 0x8211ECC4;
	}
	return 0x8211ECC4;
} // Block from 8211ECA0h-8211ECC4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211ECC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ECC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ECC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ECC4);
		  /* 8211ECC4h */ case    0:  		/* li R3, 0 */
		/* 8211ECC4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211ECC4h case    0:*/		return 0x8211ECC8;
	}
	return 0x8211ECC8;
} // Block from 8211ECC4h-8211ECC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211ECC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ECC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ECC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ECC8);
		  /* 8211ECC8h */ case    0:  		/* stw R3, <#[R30 + 16]> */
		/* 8211ECC8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 8211ECC8h case    0:*/		return 0x8211ECCC;
		  /* 8211ECCCh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211ECCCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211ECCCh case    1:*/		return 0x8211ECD0;
		  /* 8211ECD0h */ case    2:  		/* bc 12, CR6_EQ, -68 */
		/* 8211ECD0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211EC8C;  }
		/* 8211ECD0h case    2:*/		return 0x8211ECD4;
		  /* 8211ECD4h */ case    3:  		/* li R3, 72 */
		/* 8211ECD4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211ECD4h case    3:*/		return 0x8211ECD8;
		  /* 8211ECD8h */ case    4:  		/* bl -350896 */
		/* 8211ECD8h case    4:*/		regs.LR = 0x8211ECDC; return 0x820C9228;
		/* 8211ECD8h case    4:*/		return 0x8211ECDC;
		  /* 8211ECDCh */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211ECDCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211ECDCh case    5:*/		return 0x8211ECE0;
		  /* 8211ECE0h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8211ECE0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211ECFC;  }
		/* 8211ECE0h case    6:*/		return 0x8211ECE4;
		  /* 8211ECE4h */ case    7:  		/* addi R6, R28, 40 */
		/* 8211ECE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R28,0x28);
		/* 8211ECE4h case    7:*/		return 0x8211ECE8;
		  /* 8211ECE8h */ case    8:  		/* li R5, 0 */
		/* 8211ECE8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211ECE8h case    8:*/		return 0x8211ECEC;
		  /* 8211ECECh */ case    9:  		/* li R4, 4 */
		/* 8211ECECh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8211ECECh case    9:*/		return 0x8211ECF0;
		  /* 8211ECF0h */ case   10:  		/* bl -338200 */
		/* 8211ECF0h case   10:*/		regs.LR = 0x8211ECF4; return 0x820CC3D8;
		/* 8211ECF0h case   10:*/		return 0x8211ECF4;
		  /* 8211ECF4h */ case   11:  		/* mr R31, R3 */
		/* 8211ECF4h case   11:*/		regs.R31 = regs.R3;
		/* 8211ECF4h case   11:*/		return 0x8211ECF8;
		  /* 8211ECF8h */ case   12:  		/* b 8 */
		/* 8211ECF8h case   12:*/		return 0x8211ED00;
		/* 8211ECF8h case   12:*/		return 0x8211ECFC;
	}
	return 0x8211ECFC;
} // Block from 8211ECC8h-8211ECFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211ECFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ECFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ECFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ECFC);
		  /* 8211ECFCh */ case    0:  		/* li R31, 0 */
		/* 8211ECFCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211ECFCh case    0:*/		return 0x8211ED00;
	}
	return 0x8211ED00;
} // Block from 8211ECFCh-8211ED00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211ED00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ED00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ED00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ED00);
		  /* 8211ED00h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211ED00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211ED00h case    0:*/		return 0x8211ED04;
		  /* 8211ED04h */ case    1:  		/* bc 12, CR6_EQ, -120 */
		/* 8211ED04h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EC8C;  }
		/* 8211ED04h case    1:*/		return 0x8211ED08;
		  /* 8211ED08h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8211ED08h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211ED08h case    2:*/		return 0x8211ED0C;
		  /* 8211ED0Ch */ case    3:  		/* stw R31, <#[R30 + 32]> */
		/* 8211ED0Ch case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000020) );
		/* 8211ED0Ch case    3:*/		return 0x8211ED10;
		  /* 8211ED10h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 8211ED10h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211ED28;  }
		/* 8211ED10h case    4:*/		return 0x8211ED14;
		  /* 8211ED14h */ case    5:  		/* mr R3, R29 */
		/* 8211ED14h case    5:*/		regs.R3 = regs.R29;
		/* 8211ED14h case    5:*/		return 0x8211ED18;
		  /* 8211ED18h */ case    6:  		/* bl -350640 */
		/* 8211ED18h case    6:*/		regs.LR = 0x8211ED1C; return 0x820C9368;
		/* 8211ED18h case    6:*/		return 0x8211ED1C;
		  /* 8211ED1Ch */ case    7:  		/* stw R3, <#[R31 + 24]> */
		/* 8211ED1Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8211ED1Ch case    7:*/		return 0x8211ED20;
		  /* 8211ED20h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8211ED20h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211ED20h case    8:*/		return 0x8211ED24;
		  /* 8211ED24h */ case    9:  		/* bc 12, CR0_EQ, -152 */
		/* 8211ED24h case    9:*/		if ( regs.CR[0].eq ) { return 0x8211EC8C;  }
		/* 8211ED24h case    9:*/		return 0x8211ED28;
	}
	return 0x8211ED28;
} // Block from 8211ED00h-8211ED28h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211ED28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ED28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ED28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ED28);
		  /* 8211ED28h */ case    0:  		/* li R3, 20 */
		/* 8211ED28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211ED28h case    0:*/		return 0x8211ED2C;
		  /* 8211ED2Ch */ case    1:  		/* bl -350980 */
		/* 8211ED2Ch case    1:*/		regs.LR = 0x8211ED30; return 0x820C9228;
		/* 8211ED2Ch case    1:*/		return 0x8211ED30;
		  /* 8211ED30h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211ED30h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211ED30h case    2:*/		return 0x8211ED34;
		  /* 8211ED34h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8211ED34h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211ED50;  }
		/* 8211ED34h case    3:*/		return 0x8211ED38;
		  /* 8211ED38h */ case    4:  		/* lis R11, -32253 */
		/* 8211ED38h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211ED38h case    4:*/		return 0x8211ED3C;
		  /* 8211ED3Ch */ case    5:  		/* lwz R4, <#[R30 + 32]> */
		/* 8211ED3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 8211ED3Ch case    5:*/		return 0x8211ED40;
		  /* 8211ED40h */ case    6:  		/* li R5, 0 */
		/* 8211ED40h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211ED40h case    6:*/		return 0x8211ED44;
		  /* 8211ED44h */ case    7:  		/* addi R6, R11, 9184 */
		/* 8211ED44h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 8211ED44h case    7:*/		return 0x8211ED48;
		  /* 8211ED48h */ case    8:  		/* bl -350552 */
		/* 8211ED48h case    8:*/		regs.LR = 0x8211ED4C; return 0x820C93F0;
		/* 8211ED48h case    8:*/		return 0x8211ED4C;
		  /* 8211ED4Ch */ case    9:  		/* b 8 */
		/* 8211ED4Ch case    9:*/		return 0x8211ED54;
		/* 8211ED4Ch case    9:*/		return 0x8211ED50;
	}
	return 0x8211ED50;
} // Block from 8211ED28h-8211ED50h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211ED50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ED50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ED50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ED50);
		  /* 8211ED50h */ case    0:  		/* li R3, 0 */
		/* 8211ED50h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211ED50h case    0:*/		return 0x8211ED54;
	}
	return 0x8211ED54;
} // Block from 8211ED50h-8211ED54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211ED54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ED54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ED54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ED54);
		  /* 8211ED54h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8211ED54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211ED54h case    0:*/		return 0x8211ED58;
		  /* 8211ED58h */ case    1:  		/* bc 12, CR6_EQ, -204 */
		/* 8211ED58h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EC8C;  }
		/* 8211ED58h case    1:*/		return 0x8211ED5C;
		  /* 8211ED5Ch */ case    2:  		/* stw R3, <#[R30 + 32]> */
		/* 8211ED5Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000020) );
		/* 8211ED5Ch case    2:*/		return 0x8211ED60;
		  /* 8211ED60h */ case    3:  		/* mr R4, R30 */
		/* 8211ED60h case    3:*/		regs.R4 = regs.R30;
		/* 8211ED60h case    3:*/		return 0x8211ED64;
		  /* 8211ED64h */ case    4:  		/* mr R3, R28 */
		/* 8211ED64h case    4:*/		regs.R3 = regs.R28;
		/* 8211ED64h case    4:*/		return 0x8211ED68;
		  /* 8211ED68h */ case    5:  		/* bl -11600 */
		/* 8211ED68h case    5:*/		regs.LR = 0x8211ED6C; return 0x8211C018;
		/* 8211ED68h case    5:*/		return 0x8211ED6C;
		  /* 8211ED6Ch */ case    6:  		/* mr R3, R30 */
		/* 8211ED6Ch case    6:*/		regs.R3 = regs.R30;
		/* 8211ED6Ch case    6:*/		return 0x8211ED70;
	}
	return 0x8211ED70;
} // Block from 8211ED54h-8211ED70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211ED70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ED70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ED70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ED70);
		  /* 8211ED70h */ case    0:  		/* addi R1, R1, 128 */
		/* 8211ED70h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8211ED70h case    0:*/		return 0x8211ED74;
		  /* 8211ED74h */ case    1:  		/* b -580300 */
		/* 8211ED74h case    1:*/		return 0x820912A8;
		/* 8211ED74h case    1:*/		return 0x8211ED78;
	}
	return 0x8211ED78;
} // Block from 8211ED70h-8211ED78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211ED78h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211ED78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211ED78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211ED78);
		  /* 8211ED78h */ case    0:  		/* mfspr R12, LR */
		/* 8211ED78h case    0:*/		regs.R12 = regs.LR;
		/* 8211ED78h case    0:*/		return 0x8211ED7C;
		  /* 8211ED7Ch */ case    1:  		/* bl -580416 */
		/* 8211ED7Ch case    1:*/		regs.LR = 0x8211ED80; return 0x8209123C;
		/* 8211ED7Ch case    1:*/		return 0x8211ED80;
		  /* 8211ED80h */ case    2:  		/* stfd FR30, <#[R1 - 112]> */
		/* 8211ED80h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 8211ED80h case    2:*/		return 0x8211ED84;
		  /* 8211ED84h */ case    3:  		/* stfd FR31, <#[R1 - 104]> */
		/* 8211ED84h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 8211ED84h case    3:*/		return 0x8211ED88;
		  /* 8211ED88h */ case    4:  		/* stwu R1, <#[R1 - 240]> */
		/* 8211ED88h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8211ED88h case    4:*/		return 0x8211ED8C;
		  /* 8211ED8Ch */ case    5:  		/* mr R24, R3 */
		/* 8211ED8Ch case    5:*/		regs.R24 = regs.R3;
		/* 8211ED8Ch case    5:*/		return 0x8211ED90;
		  /* 8211ED90h */ case    6:  		/* mr R27, R4 */
		/* 8211ED90h case    6:*/		regs.R27 = regs.R4;
		/* 8211ED90h case    6:*/		return 0x8211ED94;
		  /* 8211ED94h */ case    7:  		/* mr R25, R5 */
		/* 8211ED94h case    7:*/		regs.R25 = regs.R5;
		/* 8211ED94h case    7:*/		return 0x8211ED98;
		  /* 8211ED98h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 8211ED98h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211ED98h case    8:*/		return 0x8211ED9C;
		  /* 8211ED9Ch */ case    9:  		/* bc 12, CR6_EQ, 2092 */
		/* 8211ED9Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8211F5C8;  }
		/* 8211ED9Ch case    9:*/		return 0x8211EDA0;
		  /* 8211EDA0h */ case   10:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211EDA0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211EDA0h case   10:*/		return 0x8211EDA4;
		  /* 8211EDA4h */ case   11:  		/* cmpwi CR6, R11, 14 */
		/* 8211EDA4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211EDA4h case   11:*/		return 0x8211EDA8;
		  /* 8211EDA8h */ case   12:  		/* bc 4, CR6_EQ, 2080 */
		/* 8211EDA8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8211F5C8;  }
		/* 8211EDA8h case   12:*/		return 0x8211EDAC;
		  /* 8211EDACh */ case   13:  		/* lwz R11, <#[R4 + 24]> */
		/* 8211EDACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000018) );
		/* 8211EDACh case   13:*/		return 0x8211EDB0;
		  /* 8211EDB0h */ case   14:  		/* lwz R10, <#[R4 + 20]> */
		/* 8211EDB0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000014) );
		/* 8211EDB0h case   14:*/		return 0x8211EDB4;
		  /* 8211EDB4h */ case   15:  		/* lwz R4, <#[R4 + 16]> */
		/* 8211EDB4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000010) );
		/* 8211EDB4h case   15:*/		return 0x8211EDB8;
		  /* 8211EDB8h */ case   16:  		/* mullw R23, R11, R10 */
		/* 8211EDB8h case   16:*/		cpu::op::mullw<0>(regs,&regs.R23,regs.R11,regs.R10);
		/* 8211EDB8h case   16:*/		return 0x8211EDBC;
		  /* 8211EDBCh */ case   17:  		/* bl -26412 */
		/* 8211EDBCh case   17:*/		regs.LR = 0x8211EDC0; return 0x82118690;
		/* 8211EDBCh case   17:*/		return 0x8211EDC0;
		  /* 8211EDC0h */ case   18:  		/* cmplw CR6, R23, R3 */
		/* 8211EDC0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R3);
		/* 8211EDC0h case   18:*/		return 0x8211EDC4;
		  /* 8211EDC4h */ case   19:  		/* bc 4, CR6_EQ, 2052 */
		/* 8211EDC4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8211F5C8;  }
		/* 8211EDC4h case   19:*/		return 0x8211EDC8;
	}
	return 0x8211EDC8;
} // Block from 8211ED78h-8211EDC8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211EDC8h
// Function '?InitExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EDC8);
		  /* 8211EDC8h */ case    0:  		/* lwz R11, <#[R27 + 28]> */
		/* 8211EDC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8211EDC8h case    0:*/		return 0x8211EDCC;
		  /* 8211EDCCh */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 8211EDCCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8211EDCCh case    1:*/		return 0x8211EDD0;
		  /* 8211EDD0h */ case    2:  		/* bc 12, CR6_LT, 52 */
		/* 8211EDD0h case    2:*/		if ( regs.CR[6].lt ) { return 0x8211EE04;  }
		/* 8211EDD0h case    2:*/		return 0x8211EDD4;
		  /* 8211EDD4h */ case    3:  		/* cmpwi CR6, R11, 3 */
		/* 8211EDD4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8211EDD4h case    3:*/		return 0x8211EDD8;
		  /* 8211EDD8h */ case    4:  		/* bc 4, CR6_GT, 2032 */
		/* 8211EDD8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8211F5C8;  }
		/* 8211EDD8h case    4:*/		return 0x8211EDDC;
		  /* 8211EDDCh */ case    5:  		/* cmpwi CR6, R11, 25 */
		/* 8211EDDCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 8211EDDCh case    5:*/		return 0x8211EDE0;
		  /* 8211EDE0h */ case    6:  		/* bc 4, CR6_GT, 36 */
		/* 8211EDE0h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8211EE04;  }
		/* 8211EDE0h case    6:*/		return 0x8211EDE4;
		  /* 8211EDE4h */ case    7:  		/* cmpwi CR6, R11, 27 */
		/* 8211EDE4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 8211EDE4h case    7:*/		return 0x8211EDE8;
		  /* 8211EDE8h */ case    8:  		/* bc 4, CR6_GT, 2016 */
		/* 8211EDE8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8211F5C8;  }
		/* 8211EDE8h case    8:*/		return 0x8211EDEC;
		  /* 8211EDECh */ case    9:  		/* cmpwi CR6, R11, 31 */
		/* 8211EDECh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001F);
		/* 8211EDECh case    9:*/		return 0x8211EDF0;
		  /* 8211EDF0h */ case   10:  		/* bc 12, CR6_EQ, 2008 */
		/* 8211EDF0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8211F5C8;  }
		/* 8211EDF0h case   10:*/		return 0x8211EDF4;
		  /* 8211EDF4h */ case   11:  		/* cmpwi CR6, R11, 32 */
		/* 8211EDF4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 8211EDF4h case   11:*/		return 0x8211EDF8;
		  /* 8211EDF8h */ case   12:  		/* bc 12, CR6_EQ, 168 */
		/* 8211EDF8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8211EEA0;  }
		/* 8211EDF8h case   12:*/		return 0x8211EDFC;
		  /* 8211EDFCh */ case   13:  		/* cmpwi CR6, R11, 34 */
		/* 8211EDFCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000022);
		/* 8211EDFCh case   13:*/		return 0x8211EE00;
		  /* 8211EE00h */ case   14:  		/* bc 12, CR6_EQ, 1992 */
		/* 8211EE00h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211F5C8;  }
		/* 8211EE00h case   14:*/		return 0x8211EE04;
	}
	return 0x8211EE04;
} // Block from 8211EDC8h-8211EE04h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211EE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EE04);
		  /* 8211EE04h */ case    0:  		/* lwz R11, <#[R27 + 32]> */
		/* 8211EE04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 8211EE04h case    0:*/		return 0x8211EE08;
		  /* 8211EE08h */ case    1:  		/* li R30, 0 */
		/* 8211EE08h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211EE08h case    1:*/		return 0x8211EE0C;
		  /* 8211EE0Ch */ case    2:  		/* li R29, 0 */
		/* 8211EE0Ch case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8211EE0Ch case    2:*/		return 0x8211EE10;
		  /* 8211EE10h */ case    3:  		/* li R22, 0 */
		/* 8211EE10h case    3:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8211EE10h case    3:*/		return 0x8211EE14;
		  /* 8211EE14h */ case    4:  		/* li R21, 0 */
		/* 8211EE14h case    4:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8211EE14h case    4:*/		return 0x8211EE18;
		  /* 8211EE18h */ case    5:  		/* li R26, 0 */
		/* 8211EE18h case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8211EE18h case    5:*/		return 0x8211EE1C;
		  /* 8211EE1Ch */ case    6:  		/* li R28, 0 */
		/* 8211EE1Ch case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8211EE1Ch case    6:*/		return 0x8211EE20;
		  /* 8211EE20h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8211EE20h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211EE20h case    7:*/		return 0x8211EE24;
		  /* 8211EE24h */ case    8:  		/* bc 12, CR6_EQ, 52 */
		/* 8211EE24h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211EE58;  }
		/* 8211EE24h case    8:*/		return 0x8211EE28;
		  /* 8211EE28h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211EE28h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211EE28h case    9:*/		return 0x8211EE2C;
		  /* 8211EE2Ch */ case   10:  		/* cmpwi CR6, R10, 14 */
		/* 8211EE2Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 8211EE2Ch case   10:*/		return 0x8211EE30;
		  /* 8211EE30h */ case   11:  		/* bc 4, CR6_EQ, 40 */
		/* 8211EE30h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211EE58;  }
		/* 8211EE30h case   11:*/		return 0x8211EE34;
		  /* 8211EE34h */ case   12:  		/* lwz R10, <#[R11 + 24]> */
		/* 8211EE34h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8211EE34h case   12:*/		return 0x8211EE38;
		  /* 8211EE38h */ case   13:  		/* lis R4, 9345 */
		/* 8211EE38h case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211EE38h case   13:*/		return 0x8211EE3C;
		  /* 8211EE3Ch */ case   14:  		/* lwz R9, <#[R11 + 20]> */
		/* 8211EE3Ch case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 8211EE3Ch case   14:*/		return 0x8211EE40;
		  /* 8211EE40h */ case   15:  		/* mr R30, R11 */
		/* 8211EE40h case   15:*/		regs.R30 = regs.R11;
		/* 8211EE40h case   15:*/		return 0x8211EE44;
		  /* 8211EE44h */ case   16:  		/* mullw R26, R10, R9 */
		/* 8211EE44h case   16:*/		cpu::op::mullw<0>(regs,&regs.R26,regs.R10,regs.R9);
		/* 8211EE44h case   16:*/		return 0x8211EE48;
		  /* 8211EE48h */ case   17:  		/* rlwinm R3, R26, 4, 0, 27 */
		/* 8211EE48h case   17:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R3,regs.R26);
		/* 8211EE48h case   17:*/		return 0x8211EE4C;
		  /* 8211EE4Ch */ case   18:  		/* bl -617548 */
		/* 8211EE4Ch case   18:*/		regs.LR = 0x8211EE50; return 0x82088200;
		/* 8211EE4Ch case   18:*/		return 0x8211EE50;
		  /* 8211EE50h */ case   19:  		/* or. R22, R3, R3 */
		/* 8211EE50h case   19:*/		cpu::op::or<1>(regs,&regs.R22,regs.R3,regs.R3);
		/* 8211EE50h case   19:*/		return 0x8211EE54;
		  /* 8211EE54h */ case   20:  		/* bc 12, CR0_EQ, 64 */
		/* 8211EE54h case   20:*/		if ( regs.CR[0].eq ) { return 0x8211EE94;  }
		/* 8211EE54h case   20:*/		return 0x8211EE58;
	}
	return 0x8211EE58;
} // Block from 8211EE04h-8211EE58h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8211EE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EE58);
		  /* 8211EE58h */ case    0:  		/* lwz R11, <#[R27 + 36]> */
		/* 8211EE58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000024) );
		/* 8211EE58h case    0:*/		return 0x8211EE5C;
		  /* 8211EE5Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211EE5Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211EE5Ch case    1:*/		return 0x8211EE60;
		  /* 8211EE60h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8211EE60h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211EEB4;  }
		/* 8211EE60h case    2:*/		return 0x8211EE64;
		  /* 8211EE64h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211EE64h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211EE64h case    3:*/		return 0x8211EE68;
		  /* 8211EE68h */ case    4:  		/* cmpwi CR6, R10, 14 */
		/* 8211EE68h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 8211EE68h case    4:*/		return 0x8211EE6C;
		  /* 8211EE6Ch */ case    5:  		/* bc 4, CR6_EQ, 72 */
		/* 8211EE6Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211EEB4;  }
		/* 8211EE6Ch case    5:*/		return 0x8211EE70;
		  /* 8211EE70h */ case    6:  		/* lwz R10, <#[R11 + 24]> */
		/* 8211EE70h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8211EE70h case    6:*/		return 0x8211EE74;
		  /* 8211EE74h */ case    7:  		/* lis R4, 9345 */
		/* 8211EE74h case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211EE74h case    7:*/		return 0x8211EE78;
		  /* 8211EE78h */ case    8:  		/* lwz R9, <#[R11 + 20]> */
		/* 8211EE78h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 8211EE78h case    8:*/		return 0x8211EE7C;
		  /* 8211EE7Ch */ case    9:  		/* mr R29, R11 */
		/* 8211EE7Ch case    9:*/		regs.R29 = regs.R11;
		/* 8211EE7Ch case    9:*/		return 0x8211EE80;
		  /* 8211EE80h */ case   10:  		/* mullw R28, R10, R9 */
		/* 8211EE80h case   10:*/		cpu::op::mullw<0>(regs,&regs.R28,regs.R10,regs.R9);
		/* 8211EE80h case   10:*/		return 0x8211EE84;
		  /* 8211EE84h */ case   11:  		/* rlwinm R3, R28, 4, 0, 27 */
		/* 8211EE84h case   11:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R3,regs.R28);
		/* 8211EE84h case   11:*/		return 0x8211EE88;
		  /* 8211EE88h */ case   12:  		/* bl -617608 */
		/* 8211EE88h case   12:*/		regs.LR = 0x8211EE8C; return 0x82088200;
		/* 8211EE88h case   12:*/		return 0x8211EE8C;
		  /* 8211EE8Ch */ case   13:  		/* or. R21, R3, R3 */
		/* 8211EE8Ch case   13:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 8211EE8Ch case   13:*/		return 0x8211EE90;
		  /* 8211EE90h */ case   14:  		/* bc 4, CR0_EQ, 36 */
		/* 8211EE90h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8211EEB4;  }
		/* 8211EE90h case   14:*/		return 0x8211EE94;
	}
	return 0x8211EE94;
} // Block from 8211EE58h-8211EE94h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211EE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EE94);
		  /* 8211EE94h */ case    0:  		/* lis R31, -32761 */
		/* 8211EE94h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 8211EE94h case    0:*/		return 0x8211EE98;
		  /* 8211EE98h */ case    1:  		/* ori R31, R31, 14 */
		/* 8211EE98h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 8211EE98h case    1:*/		return 0x8211EE9C;
		  /* 8211EE9Ch */ case    2:  		/* b 1180 */
		/* 8211EE9Ch case    2:*/		return 0x8211F338;
		/* 8211EE9Ch case    2:*/		return 0x8211EEA0;
	}
	return 0x8211EEA0;
} // Block from 8211EE94h-8211EEA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211EEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EEA0);
		  /* 8211EEA0h */ case    0:  		/* mr R5, R25 */
		/* 8211EEA0h case    0:*/		regs.R5 = regs.R25;
		/* 8211EEA0h case    0:*/		return 0x8211EEA4;
		  /* 8211EEA4h */ case    1:  		/* mr R4, R27 */
		/* 8211EEA4h case    1:*/		regs.R4 = regs.R27;
		/* 8211EEA4h case    1:*/		return 0x8211EEA8;
		  /* 8211EEA8h */ case    2:  		/* mr R3, R24 */
		/* 8211EEA8h case    2:*/		regs.R3 = regs.R24;
		/* 8211EEA8h case    2:*/		return 0x8211EEAC;
		  /* 8211EEACh */ case    3:  		/* bl -17436 */
		/* 8211EEACh case    3:*/		regs.LR = 0x8211EEB0; return 0x8211AA90;
		/* 8211EEACh case    3:*/		return 0x8211EEB0;
		  /* 8211EEB0h */ case    4:  		/* b 1824 */
		/* 8211EEB0h case    4:*/		return 0x8211F5D0;
		/* 8211EEB0h case    4:*/		return 0x8211EEB4;
	}
	return 0x8211EEB4;
} // Block from 8211EEA0h-8211EEB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211EEB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EEB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EEB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EEB4);
		  /* 8211EEB4h */ case    0:  		/* lwz R11, <#[R27 + 40]> */
		/* 8211EEB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 8211EEB4h case    0:*/		return 0x8211EEB8;
		  /* 8211EEB8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8211EEB8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211EEB8h case    1:*/		return 0x8211EEBC;
		  /* 8211EEBCh */ case    2:  		/* bc 12, CR6_EQ, 56 */
		/* 8211EEBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8211EEF4;  }
		/* 8211EEBCh case    2:*/		return 0x8211EEC0;
		  /* 8211EEC0h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8211EEC0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211EEC0h case    3:*/		return 0x8211EEC4;
		  /* 8211EEC4h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 8211EEC4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211EEE0;  }
		/* 8211EEC4h case    4:*/		return 0x8211EEC8;
		  /* 8211EEC8h */ case    5:  		/* mr R5, R22 */
		/* 8211EEC8h case    5:*/		regs.R5 = regs.R22;
		/* 8211EEC8h case    5:*/		return 0x8211EECC;
		  /* 8211EECCh */ case    6:  		/* mr R4, R30 */
		/* 8211EECCh case    6:*/		regs.R4 = regs.R30;
		/* 8211EECCh case    6:*/		return 0x8211EED0;
		  /* 8211EED0h */ case    7:  		/* mr R3, R24 */
		/* 8211EED0h case    7:*/		regs.R3 = regs.R24;
		/* 8211EED0h case    7:*/		return 0x8211EED4;
		  /* 8211EED4h */ case    8:  		/* bl -348 */
		/* 8211EED4h case    8:*/		regs.LR = 0x8211EED8; return 0x8211ED78;
		/* 8211EED4h case    8:*/		return 0x8211EED8;
		  /* 8211EED8h */ case    9:  		/* or. R31, R3, R3 */
		/* 8211EED8h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211EED8h case    9:*/		return 0x8211EEDC;
		  /* 8211EEDCh */ case   10:  		/* bc 12, CR0_LT, 1116 */
		/* 8211EEDCh case   10:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211EEDCh case   10:*/		return 0x8211EEE0;
	}
	return 0x8211EEE0;
} // Block from 8211EEB4h-8211EEE0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211EEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EEE0);
		  /* 8211EEE0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211EEE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211EEE0h case    0:*/		return 0x8211EEE4;
		  /* 8211EEE4h */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 8211EEE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EF34;  }
		/* 8211EEE4h case    1:*/		return 0x8211EEE8;
		  /* 8211EEE8h */ case    2:  		/* mr R5, R21 */
		/* 8211EEE8h case    2:*/		regs.R5 = regs.R21;
		/* 8211EEE8h case    2:*/		return 0x8211EEEC;
		  /* 8211EEECh */ case    3:  		/* mr R4, R29 */
		/* 8211EEECh case    3:*/		regs.R4 = regs.R29;
		/* 8211EEECh case    3:*/		return 0x8211EEF0;
		  /* 8211EEF0h */ case    4:  		/* b 52 */
		/* 8211EEF0h case    4:*/		return 0x8211EF24;
		/* 8211EEF0h case    4:*/		return 0x8211EEF4;
	}
	return 0x8211EEF4;
} // Block from 8211EEE0h-8211EEF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211EEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EEF4);
		  /* 8211EEF4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211EEF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211EEF4h case    0:*/		return 0x8211EEF8;
		  /* 8211EEF8h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 8211EEF8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EF14;  }
		/* 8211EEF8h case    1:*/		return 0x8211EEFC;
		  /* 8211EEFCh */ case    2:  		/* mr R5, R21 */
		/* 8211EEFCh case    2:*/		regs.R5 = regs.R21;
		/* 8211EEFCh case    2:*/		return 0x8211EF00;
		  /* 8211EF00h */ case    3:  		/* mr R4, R29 */
		/* 8211EF00h case    3:*/		regs.R4 = regs.R29;
		/* 8211EF00h case    3:*/		return 0x8211EF04;
		  /* 8211EF04h */ case    4:  		/* mr R3, R24 */
		/* 8211EF04h case    4:*/		regs.R3 = regs.R24;
		/* 8211EF04h case    4:*/		return 0x8211EF08;
		  /* 8211EF08h */ case    5:  		/* bl -400 */
		/* 8211EF08h case    5:*/		regs.LR = 0x8211EF0C; return 0x8211ED78;
		/* 8211EF08h case    5:*/		return 0x8211EF0C;
		  /* 8211EF0Ch */ case    6:  		/* or. R31, R3, R3 */
		/* 8211EF0Ch case    6:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211EF0Ch case    6:*/		return 0x8211EF10;
		  /* 8211EF10h */ case    7:  		/* bc 12, CR0_LT, 1064 */
		/* 8211EF10h case    7:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211EF10h case    7:*/		return 0x8211EF14;
	}
	return 0x8211EF14;
} // Block from 8211EEF4h-8211EF14h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211EF14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EF14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EF14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EF14);
		  /* 8211EF14h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211EF14h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211EF14h case    0:*/		return 0x8211EF18;
	}
	return 0x8211EF18;
} // Block from 8211EF14h-8211EF18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211EF18h
// Function '?OffsetExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EF18);
		  /* 8211EF18h */ case    0:  		/* bc 12, CR6_EQ, 28 */
		/* 8211EF18h case    0:*/		if ( regs.CR[6].eq ) { return 0x8211EF34;  }
		/* 8211EF18h case    0:*/		return 0x8211EF1C;
		  /* 8211EF1Ch */ case    1:  		/* mr R5, R22 */
		/* 8211EF1Ch case    1:*/		regs.R5 = regs.R22;
		/* 8211EF1Ch case    1:*/		return 0x8211EF20;
		  /* 8211EF20h */ case    2:  		/* mr R4, R30 */
		/* 8211EF20h case    2:*/		regs.R4 = regs.R30;
		/* 8211EF20h case    2:*/		return 0x8211EF24;
	}
	return 0x8211EF24;
} // Block from 8211EF18h-8211EF24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211EF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EF24);
		  /* 8211EF24h */ case    0:  		/* mr R3, R24 */
		/* 8211EF24h case    0:*/		regs.R3 = regs.R24;
		/* 8211EF24h case    0:*/		return 0x8211EF28;
		  /* 8211EF28h */ case    1:  		/* bl -432 */
		/* 8211EF28h case    1:*/		regs.LR = 0x8211EF2C; return 0x8211ED78;
		/* 8211EF28h case    1:*/		return 0x8211EF2C;
		  /* 8211EF2Ch */ case    2:  		/* or. R31, R3, R3 */
		/* 8211EF2Ch case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211EF2Ch case    2:*/		return 0x8211EF30;
		  /* 8211EF30h */ case    3:  		/* bc 12, CR0_LT, 1032 */
		/* 8211EF30h case    3:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211EF30h case    3:*/		return 0x8211EF34;
	}
	return 0x8211EF34;
} // Block from 8211EF24h-8211EF34h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211EF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EF34);
		  /* 8211EF34h */ case    0:  		/* lwz R11, <#[R27 + 28]> */
		/* 8211EF34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8211EF34h case    0:*/		return 0x8211EF38;
		  /* 8211EF38h */ case    1:  		/* cmplwi CR6, R11, 2 */
		/* 8211EF38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8211EF38h case    1:*/		return 0x8211EF3C;
		  /* 8211EF3Ch */ case    2:  		/* bc 12, CR6_LT, 1120 */
		/* 8211EF3Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8211F39C;  }
		/* 8211EF3Ch case    2:*/		return 0x8211EF40;
		  /* 8211EF40h */ case    3:  		/* cmplwi CR6, R11, 28 */
		/* 8211EF40h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001C);
		/* 8211EF40h case    3:*/		return 0x8211EF44;
		  /* 8211EF44h */ case    4:  		/* bc 12, CR6_EQ, 932 */
		/* 8211EF44h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211F2E8;  }
		/* 8211EF44h case    4:*/		return 0x8211EF48;
		  /* 8211EF48h */ case    5:  		/* cmplwi CR6, R11, 29 */
		/* 8211EF48h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001D);
		/* 8211EF48h case    5:*/		return 0x8211EF4C;
		  /* 8211EF4Ch */ case    6:  		/* bc 12, CR6_EQ, 696 */
		/* 8211EF4Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8211F204;  }
		/* 8211EF4Ch case    6:*/		return 0x8211EF50;
		  /* 8211EF50h */ case    7:  		/* cmplwi CR6, R11, 30 */
		/* 8211EF50h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001E);
		/* 8211EF50h case    7:*/		return 0x8211EF54;
		  /* 8211EF54h */ case    8:  		/* bc 12, CR6_EQ, 556 */
		/* 8211EF54h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211F180;  }
		/* 8211EF54h case    8:*/		return 0x8211EF58;
		  /* 8211EF58h */ case    9:  		/* li R10, 0 */
		/* 8211EF58h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211EF58h case    9:*/		return 0x8211EF5C;
		  /* 8211EF5Ch */ case   10:  		/* li R9, 3 */
		/* 8211EF5Ch case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 8211EF5Ch case   10:*/		return 0x8211EF60;
		  /* 8211EF60h */ case   11:  		/* cmplwi CR6, R26, 0 */
		/* 8211EF60h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211EF60h case   11:*/		return 0x8211EF64;
		  /* 8211EF64h */ case   12:  		/* bc 12, CR6_EQ, 52 */
		/* 8211EF64h case   12:*/		if ( regs.CR[6].eq ) { return 0x8211EF98;  }
		/* 8211EF64h case   12:*/		return 0x8211EF68;
		  /* 8211EF68h */ case   13:  		/* addi R6, R27, 48 */
		/* 8211EF68h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211EF68h case   13:*/		return 0x8211EF6C;
		  /* 8211EF6Ch */ case   14:  		/* mr R5, R22 */
		/* 8211EF6Ch case   14:*/		regs.R5 = regs.R22;
		/* 8211EF6Ch case   14:*/		return 0x8211EF70;
		  /* 8211EF70h */ case   15:  		/* addi R4, R5, 8 */
		/* 8211EF70h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R5,0x8);
		/* 8211EF70h case   15:*/		return 0x8211EF74;
		  /* 8211EF74h */ case   16:  		/* mr R3, R24 */
		/* 8211EF74h case   16:*/		regs.R3 = regs.R24;
		/* 8211EF74h case   16:*/		return 0x8211EF78;
		  /* 8211EF78h */ case   17:  		/* bl -26440 */
		/* 8211EF78h case   17:*/		regs.LR = 0x8211EF7C; return 0x82118830;
		/* 8211EF78h case   17:*/		return 0x8211EF7C;
		  /* 8211EF7Ch */ case   18:  		/* or. R31, R3, R3 */
		/* 8211EF7Ch case   18:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211EF7Ch case   18:*/		return 0x8211EF80;
		  /* 8211EF80h */ case   19:  		/* bc 12, CR0_LT, 952 */
		/* 8211EF80h case   19:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211EF80h case   19:*/		return 0x8211EF84;
		  /* 8211EF84h */ case   20:  		/* addi R10, R10, 1 */
		/* 8211EF84h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211EF84h case   20:*/		return 0x8211EF88;
		  /* 8211EF88h */ case   21:  		/* stw R9, <#[R5]> */
		/* 8211EF88h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 8211EF88h case   21:*/		return 0x8211EF8C;
		  /* 8211EF8Ch */ case   22:  		/* addi R5, R5, 16 */
		/* 8211EF8Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x10);
		/* 8211EF8Ch case   22:*/		return 0x8211EF90;
		  /* 8211EF90h */ case   23:  		/* cmplw CR6, R10, R26 */
		/* 8211EF90h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 8211EF90h case   23:*/		return 0x8211EF94;
		  /* 8211EF94h */ case   24:  		/* bc 12, CR6_LT, -36 */
		/* 8211EF94h case   24:*/		if ( regs.CR[6].lt ) { return 0x8211EF70;  }
		/* 8211EF94h case   24:*/		return 0x8211EF98;
	}
	return 0x8211EF98;
} // Block from 8211EF34h-8211EF98h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8211EF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EF98);
		  /* 8211EF98h */ case    0:  		/* li R10, 0 */
		/* 8211EF98h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211EF98h case    0:*/		return 0x8211EF9C;
		  /* 8211EF9Ch */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8211EF9Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211EF9Ch case    1:*/		return 0x8211EFA0;
		  /* 8211EFA0h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 8211EFA0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211EFD4;  }
		/* 8211EFA0h case    2:*/		return 0x8211EFA4;
		  /* 8211EFA4h */ case    3:  		/* addi R6, R27, 48 */
		/* 8211EFA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211EFA4h case    3:*/		return 0x8211EFA8;
		  /* 8211EFA8h */ case    4:  		/* mr R5, R21 */
		/* 8211EFA8h case    4:*/		regs.R5 = regs.R21;
		/* 8211EFA8h case    4:*/		return 0x8211EFAC;
		  /* 8211EFACh */ case    5:  		/* addi R4, R5, 8 */
		/* 8211EFACh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R5,0x8);
		/* 8211EFACh case    5:*/		return 0x8211EFB0;
		  /* 8211EFB0h */ case    6:  		/* mr R3, R24 */
		/* 8211EFB0h case    6:*/		regs.R3 = regs.R24;
		/* 8211EFB0h case    6:*/		return 0x8211EFB4;
		  /* 8211EFB4h */ case    7:  		/* bl -26500 */
		/* 8211EFB4h case    7:*/		regs.LR = 0x8211EFB8; return 0x82118830;
		/* 8211EFB4h case    7:*/		return 0x8211EFB8;
		  /* 8211EFB8h */ case    8:  		/* or. R31, R3, R3 */
		/* 8211EFB8h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211EFB8h case    8:*/		return 0x8211EFBC;
		  /* 8211EFBCh */ case    9:  		/* bc 12, CR0_LT, 892 */
		/* 8211EFBCh case    9:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211EFBCh case    9:*/		return 0x8211EFC0;
		  /* 8211EFC0h */ case   10:  		/* addi R10, R10, 1 */
		/* 8211EFC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211EFC0h case   10:*/		return 0x8211EFC4;
		  /* 8211EFC4h */ case   11:  		/* stw R9, <#[R5]> */
		/* 8211EFC4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 8211EFC4h case   11:*/		return 0x8211EFC8;
		  /* 8211EFC8h */ case   12:  		/* addi R5, R5, 16 */
		/* 8211EFC8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x10);
		/* 8211EFC8h case   12:*/		return 0x8211EFCC;
		  /* 8211EFCCh */ case   13:  		/* cmplw CR6, R10, R28 */
		/* 8211EFCCh case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 8211EFCCh case   13:*/		return 0x8211EFD0;
		  /* 8211EFD0h */ case   14:  		/* bc 12, CR6_LT, -36 */
		/* 8211EFD0h case   14:*/		if ( regs.CR[6].lt ) { return 0x8211EFAC;  }
		/* 8211EFD0h case   14:*/		return 0x8211EFD4;
	}
	return 0x8211EFD4;
} // Block from 8211EF98h-8211EFD4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8211EFD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EFD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EFD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EFD4);
		  /* 8211EFD4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211EFD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211EFD4h case    0:*/		return 0x8211EFD8;
		  /* 8211EFD8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8211EFD8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EFE4;  }
		/* 8211EFD8h case    1:*/		return 0x8211EFDC;
		  /* 8211EFDCh */ case    2:  		/* cmplw CR6, R26, R23 */
		/* 8211EFDCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R23);
		/* 8211EFDCh case    2:*/		return 0x8211EFE0;
		  /* 8211EFE0h */ case    3:  		/* bc 4, CR6_EQ, 848 */
		/* 8211EFE0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211EFE0h case    3:*/		return 0x8211EFE4;
	}
	return 0x8211EFE4;
} // Block from 8211EFD4h-8211EFE4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211EFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EFE4);
		  /* 8211EFE4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8211EFE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8211EFE4h case    0:*/		return 0x8211EFE8;
		  /* 8211EFE8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8211EFE8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211EFF4;  }
		/* 8211EFE8h case    1:*/		return 0x8211EFEC;
		  /* 8211EFECh */ case    2:  		/* cmplw CR6, R28, R23 */
		/* 8211EFECh case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R23);
		/* 8211EFECh case    2:*/		return 0x8211EFF0;
		  /* 8211EFF0h */ case    3:  		/* bc 4, CR6_EQ, 832 */
		/* 8211EFF0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211EFF0h case    3:*/		return 0x8211EFF4;
	}
	return 0x8211EFF4;
} // Block from 8211EFE4h-8211EFF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211EFF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211EFF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211EFF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211EFF4);
		  /* 8211EFF4h */ case    0:  		/* li R29, 0 */
		/* 8211EFF4h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8211EFF4h case    0:*/		return 0x8211EFF8;
		  /* 8211EFF8h */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 8211EFF8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211EFF8h case    1:*/		return 0x8211EFFC;
		  /* 8211EFFCh */ case    2:  		/* bc 12, CR6_EQ, 160 */
		/* 8211EFFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8211F09C;  }
		/* 8211EFFCh case    2:*/		return 0x8211F000;
		  /* 8211F000h */ case    3:  		/* lis R11, -32256 */
		/* 8211F000h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211F000h case    3:*/		return 0x8211F004;
		  /* 8211F004h */ case    4:  		/* lis R10, -32256 */
		/* 8211F004h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8211F004h case    4:*/		return 0x8211F008;
		  /* 8211F008h */ case    5:  		/* addi R31, R21, 8 */
		/* 8211F008h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R21,0x8);
		/* 8211F008h case    5:*/		return 0x8211F00C;
		  /* 8211F00Ch */ case    6:  		/* subf R28, R21, R22 */
		/* 8211F00Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R21,regs.R22);
		/* 8211F00Ch case    6:*/		return 0x8211F010;
		  /* 8211F010h */ case    7:  		/* subf R30, R21, R25 */
		/* 8211F010h case    7:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R21,regs.R25);
		/* 8211F010h case    7:*/		return 0x8211F014;
		  /* 8211F014h */ case    8:  		/* lfd FR30, <#[R11 + 1848]> */
		/* 8211F014h case    8:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000738) );
		/* 8211F014h case    8:*/		return 0x8211F018;
		  /* 8211F018h */ case    9:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 8211F018h case    9:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 8211F018h case    9:*/		return 0x8211F01C;
		  /* 8211F01Ch */ case   10:  		/* cmplwi CR6, R22, 0 */
		/* 8211F01Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8211F01Ch case   10:*/		return 0x8211F020;
		  /* 8211F020h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8211F020h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211F02C;  }
		/* 8211F020h case   11:*/		return 0x8211F024;
		  /* 8211F024h */ case   12:  		/* lfdx FR1, <#[R28 + R31]> */
		/* 8211F024h case   12:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R28 + regs.R31 + 0x00000000) );
		/* 8211F024h case   12:*/		return 0x8211F028;
		  /* 8211F028h */ case   13:  		/* b 8 */
		/* 8211F028h case   13:*/		return 0x8211F030;
		/* 8211F028h case   13:*/		return 0x8211F02C;
	}
	return 0x8211F02C;
} // Block from 8211EFF4h-8211F02Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211F02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F02C);
		  /* 8211F02Ch */ case    0:  		/* fmr FR1, FR31 */
		/* 8211F02Ch case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8211F02Ch case    0:*/		return 0x8211F030;
	}
	return 0x8211F030;
} // Block from 8211F02Ch-8211F030h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F030);
		  /* 8211F030h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8211F030h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8211F030h case    0:*/		return 0x8211F034;
		  /* 8211F034h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8211F034h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F040;  }
		/* 8211F034h case    1:*/		return 0x8211F038;
		  /* 8211F038h */ case    2:  		/* lfd FR2, <#[R31]> */
		/* 8211F038h case    2:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R31 + 0x00000000) );
		/* 8211F038h case    2:*/		return 0x8211F03C;
		  /* 8211F03Ch */ case    3:  		/* b 8 */
		/* 8211F03Ch case    3:*/		return 0x8211F044;
		/* 8211F03Ch case    3:*/		return 0x8211F040;
	}
	return 0x8211F040;
} // Block from 8211F030h-8211F040h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211F040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F040);
		  /* 8211F040h */ case    0:  		/* fmr FR2, FR31 */
		/* 8211F040h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 8211F040h case    0:*/		return 0x8211F044;
	}
	return 0x8211F044;
} // Block from 8211F040h-8211F044h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F044);
		  /* 8211F044h */ case    0:  		/* lwz R11, <#[R27 + 28]> */
		/* 8211F044h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8211F044h case    0:*/		return 0x8211F048;
		  /* 8211F048h */ case    1:  		/* addi R11, R11, -4 */
		/* 8211F048h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8211F048h case    1:*/		return 0x8211F04C;
		  /* 8211F04Ch */ case    2:  		/* cmplwi CR6, R11, 21 */
		/* 8211F04Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 8211F04Ch case    2:*/		return 0x8211F050;
		  /* 8211F050h */ case    3:  		/* bc 12, CR6_GT, 736 */
		/* 8211F050h case    3:*/		if ( regs.CR[6].gt ) { return 0x8211F330;  }
		/* 8211F050h case    3:*/		return 0x8211F054;
		  /* 8211F054h */ case    4:  		/* lis R12, -32253 */
		/* 8211F054h case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 8211F054h case    4:*/		return 0x8211F058;
		  /* 8211F058h */ case    5:  		/* addi R12, R12, 5568 */
		/* 8211F058h case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x15C0);
		/* 8211F058h case    5:*/		return 0x8211F05C;
		  /* 8211F05Ch */ case    6:  		/* lbzx R0, <#[R12 + R11]> */
		/* 8211F05Ch case    6:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 8211F05Ch case    6:*/		return 0x8211F060;
		  /* 8211F060h */ case    7:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 8211F060h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 8211F060h case    7:*/		return 0x8211F064;
		  /* 8211F064h */ case    8:  		/* lis R12, -32238 */
		/* 8211F064h case    8:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8212);
		/* 8211F064h case    8:*/		return 0x8211F068;
		  /* 8211F068h */ case    9:  		/* ori R0, R0, 0 */
		/* 8211F068h case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8211F068h case    9:*/		return 0x8211F06C;
		  /* 8211F06Ch */ case   10:  		/* addi R12, R12, -3972 */
		/* 8211F06Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFF07C);
		/* 8211F06Ch case   10:*/		return 0x8211F070;
		  /* 8211F070h */ case   11:  		/* add R12, R12, R0 */
		/* 8211F070h case   11:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8211F070h case   11:*/		return 0x8211F074;
		  /* 8211F074h */ case   12:  		/* mtspr CTR, R12 */
		/* 8211F074h case   12:*/		regs.CTR = regs.R12;
		/* 8211F074h case   12:*/		return 0x8211F078;
		  /* 8211F078h */ case   13:  		/* bcctr 20, CR0_LT */
		/* 8211F078h case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8211F078h case   13:*/		return 0x8211F07C;
		  /* 8211F07Ch */ case   14:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211F07Ch case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211F07Ch case   14:*/		return 0x8211F080;
		  /* 8211F080h */ case   15:  		/* bc 4, CR6_EQ, 248 */
		/* 8211F080h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8211F178;  }
		/* 8211F080h case   15:*/		return 0x8211F084;
		  /* 8211F084h */ case   16:  		/* fmr FR1, FR30 */
		/* 8211F084h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 8211F084h case   16:*/		return 0x8211F088;
		  /* 8211F088h */ case   17:  		/* addi R29, R29, 1 */
		/* 8211F088h case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8211F088h case   17:*/		return 0x8211F08C;
		  /* 8211F08Ch */ case   18:  		/* stfdx FR1, <#[R30 + R31]> */
		/* 8211F08Ch case   18:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 8211F08Ch case   18:*/		return 0x8211F090;
		  /* 8211F090h */ case   19:  		/* addi R31, R31, 16 */
		/* 8211F090h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8211F090h case   19:*/		return 0x8211F094;
		  /* 8211F094h */ case   20:  		/* cmplw CR6, R29, R23 */
		/* 8211F094h case   20:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R23);
		/* 8211F094h case   20:*/		return 0x8211F098;
		  /* 8211F098h */ case   21:  		/* bc 12, CR6_LT, -124 */
		/* 8211F098h case   21:*/		if ( regs.CR[6].lt ) { return 0x8211F01C;  }
		/* 8211F098h case   21:*/		return 0x8211F09C;
	}
	return 0x8211F09C;
} // Block from 8211F044h-8211F09Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 8211F09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F09C);
		  /* 8211F09Ch */ case    0:  		/* li R9, 0 */
		/* 8211F09Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8211F09Ch case    0:*/		return 0x8211F0A0;
		  /* 8211F0A0h */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 8211F0A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211F0A0h case    1:*/		return 0x8211F0A4;
		  /* 8211F0A4h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 8211F0A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F0A4h case    2:*/		return 0x8211F0A8;
		  /* 8211F0A8h */ case    3:  		/* addi R6, R27, 48 */
		/* 8211F0A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F0A8h case    3:*/		return 0x8211F0AC;
		  /* 8211F0ACh */ case    4:  		/* mr R4, R25 */
		/* 8211F0ACh case    4:*/		regs.R4 = regs.R25;
		/* 8211F0ACh case    4:*/		return 0x8211F0B0;
		  /* 8211F0B0h */ case    5:  		/* mr R3, R24 */
		/* 8211F0B0h case    5:*/		regs.R3 = regs.R24;
		/* 8211F0B0h case    5:*/		return 0x8211F0B4;
		  /* 8211F0B4h */ case    6:  		/* lfd FR1, <#[R4 + 8]> */
		/* 8211F0B4h case    6:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R4 + 0x00000008) );
		/* 8211F0B4h case    6:*/		return 0x8211F0B8;
		  /* 8211F0B8h */ case    7:  		/* bl -24712 */
		/* 8211F0B8h case    7:*/		regs.LR = 0x8211F0BC; return 0x82119030;
		/* 8211F0B8h case    7:*/		return 0x8211F0BC;
		  /* 8211F0BCh */ case    8:  		/* or. R31, R3, R3 */
		/* 8211F0BCh case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F0BCh case    8:*/		return 0x8211F0C0;
		  /* 8211F0C0h */ case    9:  		/* bc 12, CR0_LT, 632 */
		/* 8211F0C0h case    9:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F0C0h case    9:*/		return 0x8211F0C4;
		  /* 8211F0C4h */ case   10:  		/* addi R9, R9, 1 */
		/* 8211F0C4h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211F0C4h case   10:*/		return 0x8211F0C8;
		  /* 8211F0C8h */ case   11:  		/* addi R4, R4, 16 */
		/* 8211F0C8h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 8211F0C8h case   11:*/		return 0x8211F0CC;
		  /* 8211F0CCh */ case   12:  		/* cmplw CR6, R9, R23 */
		/* 8211F0CCh case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 8211F0CCh case   12:*/		return 0x8211F0D0;
		  /* 8211F0D0h */ case   13:  		/* bc 12, CR6_LT, -32 */
		/* 8211F0D0h case   13:*/		if ( regs.CR[6].lt ) { return 0x8211F0B0;  }
		/* 8211F0D0h case   13:*/		return 0x8211F0D4;
	}
	return 0x8211F0D4;
} // Block from 8211F09Ch-8211F0D4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8211F0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F0D4);
		  /* 8211F0D4h */ case    0:  		/* li R31, 0 */
		/* 8211F0D4h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211F0D4h case    0:*/		return 0x8211F0D8;
		  /* 8211F0D8h */ case    1:  		/* b 608 */
		/* 8211F0D8h case    1:*/		return 0x8211F338;
		/* 8211F0D8h case    1:*/		return 0x8211F0DC;
		  /* 8211F0DCh */ case    2:  		/* fneg FR1, FR1 */
		/* 8211F0DCh case    2:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR1);
		/* 8211F0DCh case    2:*/		return 0x8211F0E0;
		  /* 8211F0E0h */ case    3:  		/* b -88 */
		/* 8211F0E0h case    3:*/		return 0x8211F088;
		/* 8211F0E0h case    3:*/		return 0x8211F0E4;
		  /* 8211F0E4h */ case    4:  		/* fmul FR1, FR2, FR1 */
		/* 8211F0E4h case    4:*/		cpu::op::fmul<0>(regs,&regs.FR1,regs.FR2,regs.FR1);
		/* 8211F0E4h case    4:*/		return 0x8211F0E8;
		  /* 8211F0E8h */ case    5:  		/* b -96 */
		/* 8211F0E8h case    5:*/		return 0x8211F088;
		/* 8211F0E8h case    5:*/		return 0x8211F0EC;
		  /* 8211F0ECh */ case    6:  		/* fcmpu CR6, FR2, FR31 */
		/* 8211F0ECh case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR2,regs.FR31);
		/* 8211F0ECh case    6:*/		return 0x8211F0F0;
		  /* 8211F0F0h */ case    7:  		/* bc 12, CR6_EQ, 576 */
		/* 8211F0F0h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F0F0h case    7:*/		return 0x8211F0F4;
		  /* 8211F0F4h */ case    8:  		/* fdiv FR1, FR1, FR2 */
		/* 8211F0F4h case    8:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR1,regs.FR2);
		/* 8211F0F4h case    8:*/		return 0x8211F0F8;
		  /* 8211F0F8h */ case    9:  		/* b -112 */
		/* 8211F0F8h case    9:*/		return 0x8211F088;
		/* 8211F0F8h case    9:*/		return 0x8211F0FC;
		  /* 8211F0FCh */ case   10:  		/* fcmpu CR6, FR2, FR31 */
		/* 8211F0FCh case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR2,regs.FR31);
		/* 8211F0FCh case   10:*/		return 0x8211F100;
		  /* 8211F100h */ case   11:  		/* bc 12, CR6_EQ, 560 */
		/* 8211F100h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F100h case   11:*/		return 0x8211F104;
		  /* 8211F104h */ case   12:  		/* bl 1349756 */
		/* 8211F104h case   12:*/		regs.LR = 0x8211F108; return 0x82268980;
		/* 8211F104h case   12:*/		return 0x8211F108;
		  /* 8211F108h */ case   13:  		/* b -128 */
		/* 8211F108h case   13:*/		return 0x8211F088;
		/* 8211F108h case   13:*/		return 0x8211F10C;
		  /* 8211F10Ch */ case   14:  		/* fadd FR1, FR2, FR1 */
		/* 8211F10Ch case   14:*/		cpu::op::fadd<0>(regs,&regs.FR1,regs.FR2,regs.FR1);
		/* 8211F10Ch case   14:*/		return 0x8211F110;
		  /* 8211F110h */ case   15:  		/* b -136 */
		/* 8211F110h case   15:*/		return 0x8211F088;
		/* 8211F110h case   15:*/		return 0x8211F114;
		  /* 8211F114h */ case   16:  		/* fsub FR1, FR1, FR2 */
		/* 8211F114h case   16:*/		cpu::op::fsub<0>(regs,&regs.FR1,regs.FR1,regs.FR2);
		/* 8211F114h case   16:*/		return 0x8211F118;
		  /* 8211F118h */ case   17:  		/* b -144 */
		/* 8211F118h case   17:*/		return 0x8211F088;
		/* 8211F118h case   17:*/		return 0x8211F11C;
		  /* 8211F11Ch */ case   18:  		/* fcmpu CR6, FR1, FR2 */
		/* 8211F11Ch case   18:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR2);
		/* 8211F11Ch case   18:*/		return 0x8211F120;
		  /* 8211F120h */ case   19:  		/* bc 12, CR6_LT, -156 */
		/* 8211F120h case   19:*/		if ( regs.CR[6].lt ) { return 0x8211F084;  }
		/* 8211F120h case   19:*/		return 0x8211F124;
		  /* 8211F124h */ case   20:  		/* b 84 */
		/* 8211F124h case   20:*/		return 0x8211F178;
		/* 8211F124h case   20:*/		return 0x8211F128;
		  /* 8211F128h */ case   21:  		/* fcmpu CR6, FR1, FR2 */
		/* 8211F128h case   21:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR2);
		/* 8211F128h case   21:*/		return 0x8211F12C;
		  /* 8211F12Ch */ case   22:  		/* bc 12, CR6_GT, -168 */
		/* 8211F12Ch case   22:*/		if ( regs.CR[6].gt ) { return 0x8211F084;  }
		/* 8211F12Ch case   22:*/		return 0x8211F130;
		  /* 8211F130h */ case   23:  		/* b 72 */
		/* 8211F130h case   23:*/		return 0x8211F178;
		/* 8211F130h case   23:*/		return 0x8211F134;
		  /* 8211F134h */ case   24:  		/* fcmpu CR6, FR1, FR2 */
		/* 8211F134h case   24:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR2);
		/* 8211F134h case   24:*/		return 0x8211F138;
		  /* 8211F138h */ case   25:  		/* bc 4, CR6_GT, -180 */
		/* 8211F138h case   25:*/		if ( !regs.CR[6].gt ) { return 0x8211F084;  }
		/* 8211F138h case   25:*/		return 0x8211F13C;
		  /* 8211F13Ch */ case   26:  		/* b 60 */
		/* 8211F13Ch case   26:*/		return 0x8211F178;
		/* 8211F13Ch case   26:*/		return 0x8211F140;
		  /* 8211F140h */ case   27:  		/* fcmpu CR6, FR1, FR2 */
		/* 8211F140h case   27:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR2);
		/* 8211F140h case   27:*/		return 0x8211F144;
		  /* 8211F144h */ case   28:  		/* bc 4, CR6_LT, -192 */
		/* 8211F144h case   28:*/		if ( !regs.CR[6].lt ) { return 0x8211F084;  }
		/* 8211F144h case   28:*/		return 0x8211F148;
		  /* 8211F148h */ case   29:  		/* b 48 */
		/* 8211F148h case   29:*/		return 0x8211F178;
		/* 8211F148h case   29:*/		return 0x8211F14C;
		  /* 8211F14Ch */ case   30:  		/* fcmpu CR6, FR1, FR2 */
		/* 8211F14Ch case   30:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR2);
		/* 8211F14Ch case   30:*/		return 0x8211F150;
		  /* 8211F150h */ case   31:  		/* b -208 */
		/* 8211F150h case   31:*/		return 0x8211F080;
		/* 8211F150h case   31:*/		return 0x8211F154;
		  /* 8211F154h */ case   32:  		/* fcmpu CR6, FR1, FR2 */
		/* 8211F154h case   32:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR2);
		/* 8211F154h case   32:*/		return 0x8211F158;
		  /* 8211F158h */ case   33:  		/* b 28 */
		/* 8211F158h case   33:*/		return 0x8211F174;
		/* 8211F158h case   33:*/		return 0x8211F15C;
		  /* 8211F15Ch */ case   34:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211F15Ch case   34:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211F15Ch case   34:*/		return 0x8211F160;
		  /* 8211F160h */ case   35:  		/* bc 12, CR6_EQ, 24 */
		/* 8211F160h case   35:*/		if ( regs.CR[6].eq ) { return 0x8211F178;  }
		/* 8211F160h case   35:*/		return 0x8211F164;
		  /* 8211F164h */ case   36:  		/* b 12 */
		/* 8211F164h case   36:*/		return 0x8211F170;
		/* 8211F164h case   36:*/		return 0x8211F168;
		  /* 8211F168h */ case   37:  		/* fcmpu CR6, FR1, FR31 */
		/* 8211F168h case   37:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 8211F168h case   37:*/		return 0x8211F16C;
		  /* 8211F16Ch */ case   38:  		/* bc 4, CR6_EQ, -232 */
		/* 8211F16Ch case   38:*/		if ( !regs.CR[6].eq ) { return 0x8211F084;  }
		/* 8211F16Ch case   38:*/		return 0x8211F170;
	}
	return 0x8211F170;
} // Block from 8211F0D4h-8211F170h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8211F170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F170);
		  /* 8211F170h */ case    0:  		/* fcmpu CR6, FR2, FR31 */
		/* 8211F170h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR2,regs.FR31);
		/* 8211F170h case    0:*/		return 0x8211F174;
	}
	return 0x8211F174;
} // Block from 8211F170h-8211F174h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F174);
		  /* 8211F174h */ case    0:  		/* bc 4, CR6_EQ, -240 */
		/* 8211F174h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8211F084;  }
		/* 8211F174h case    0:*/		return 0x8211F178;
	}
	return 0x8211F178;
} // Block from 8211F174h-8211F178h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F178);
		  /* 8211F178h */ case    0:  		/* fmr FR1, FR31 */
		/* 8211F178h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8211F178h case    0:*/		return 0x8211F17C;
		  /* 8211F17Ch */ case    1:  		/* b -244 */
		/* 8211F17Ch case    1:*/		return 0x8211F088;
		/* 8211F17Ch case    1:*/		return 0x8211F180;
	}
	return 0x8211F180;
} // Block from 8211F178h-8211F180h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F180);
		  /* 8211F180h */ case    0:  		/* li R29, 0 */
		/* 8211F180h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8211F180h case    0:*/		return 0x8211F184;
		  /* 8211F184h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 8211F184h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211F184h case    1:*/		return 0x8211F188;
		  /* 8211F188h */ case    2:  		/* bc 12, CR6_EQ, -180 */
		/* 8211F188h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F188h case    2:*/		return 0x8211F18C;
		  /* 8211F18Ch */ case    3:  		/* rlwinm R11, R23, 4, 0, 27 */
		/* 8211F18Ch case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R23);
		/* 8211F18Ch case    3:*/		return 0x8211F190;
		  /* 8211F190h */ case    4:  		/* addi R6, R27, 48 */
		/* 8211F190h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F190h case    4:*/		return 0x8211F194;
		  /* 8211F194h */ case    5:  		/* add R8, R11, R21 */
		/* 8211F194h case    5:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R21);
		/* 8211F194h case    5:*/		return 0x8211F198;
		  /* 8211F198h */ case    6:  		/* lis R11, -32256 */
		/* 8211F198h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8211F198h case    6:*/		return 0x8211F19C;
		  /* 8211F19Ch */ case    7:  		/* mr R9, R21 */
		/* 8211F19Ch case    7:*/		regs.R9 = regs.R21;
		/* 8211F19Ch case    7:*/		return 0x8211F1A0;
		  /* 8211F1A0h */ case    8:  		/* subf R30, R21, R22 */
		/* 8211F1A0h case    8:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R21,regs.R22);
		/* 8211F1A0h case    8:*/		return 0x8211F1A4;
		  /* 8211F1A4h */ case    9:  		/* subf R7, R21, R25 */
		/* 8211F1A4h case    9:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R21,regs.R25);
		/* 8211F1A4h case    9:*/		return 0x8211F1A8;
		  /* 8211F1A8h */ case   10:  		/* lfd FR12, <#[R11 + 1808]> */
		/* 8211F1A8h case   10:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000710) );
		/* 8211F1A8h case   10:*/		return 0x8211F1AC;
		  /* 8211F1ACh */ case   11:  		/* add R5, R9, R30 */
		/* 8211F1ACh case   11:*/		cpu::op::add<0>(regs,&regs.R5,regs.R9,regs.R30);
		/* 8211F1ACh case   11:*/		return 0x8211F1B0;
		  /* 8211F1B0h */ case   12:  		/* addi R4, R1, 112 */
		/* 8211F1B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8211F1B0h case   12:*/		return 0x8211F1B4;
		  /* 8211F1B4h */ case   13:  		/* mr R3, R24 */
		/* 8211F1B4h case   13:*/		regs.R3 = regs.R24;
		/* 8211F1B4h case   13:*/		return 0x8211F1B8;
		  /* 8211F1B8h */ case   14:  		/* bl -27016 */
		/* 8211F1B8h case   14:*/		regs.LR = 0x8211F1BC; return 0x82118830;
		/* 8211F1B8h case   14:*/		return 0x8211F1BC;
		  /* 8211F1BCh */ case   15:  		/* or. R31, R3, R3 */
		/* 8211F1BCh case   15:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F1BCh case   15:*/		return 0x8211F1C0;
		  /* 8211F1C0h */ case   16:  		/* bc 12, CR0_LT, 376 */
		/* 8211F1C0h case   16:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F1C0h case   16:*/		return 0x8211F1C4;
		  /* 8211F1C4h */ case   17:  		/* lfd FR0, <#[R1 + 112]> */
		/* 8211F1C4h case   17:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000070) );
		/* 8211F1C4h case   17:*/		return 0x8211F1C8;
		  /* 8211F1C8h */ case   18:  		/* mr R5, R9 */
		/* 8211F1C8h case   18:*/		regs.R5 = regs.R9;
		/* 8211F1C8h case   18:*/		return 0x8211F1CC;
		  /* 8211F1CCh */ case   19:  		/* fcmpu CR6, FR0, FR12 */
		/* 8211F1CCh case   19:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR12);
		/* 8211F1CCh case   19:*/		return 0x8211F1D0;
		  /* 8211F1D0h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 8211F1D0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8211F1D8;  }
		/* 8211F1D0h case   20:*/		return 0x8211F1D4;
		  /* 8211F1D4h */ case   21:  		/* mr R5, R8 */
		/* 8211F1D4h case   21:*/		regs.R5 = regs.R8;
		/* 8211F1D4h case   21:*/		return 0x8211F1D8;
	}
	return 0x8211F1D8;
} // Block from 8211F180h-8211F1D8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8211F1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F1D8);
		  /* 8211F1D8h */ case    0:  		/* add R4, R9, R7 */
		/* 8211F1D8h case    0:*/		cpu::op::add<0>(regs,&regs.R4,regs.R9,regs.R7);
		/* 8211F1D8h case    0:*/		return 0x8211F1DC;
		  /* 8211F1DCh */ case    1:  		/* mr R3, R24 */
		/* 8211F1DCh case    1:*/		regs.R3 = regs.R24;
		/* 8211F1DCh case    1:*/		return 0x8211F1E0;
		  /* 8211F1E0h */ case    2:  		/* bl -25608 */
		/* 8211F1E0h case    2:*/		regs.LR = 0x8211F1E4; return 0x82118DD8;
		/* 8211F1E0h case    2:*/		return 0x8211F1E4;
		  /* 8211F1E4h */ case    3:  		/* or. R31, R3, R3 */
		/* 8211F1E4h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F1E4h case    3:*/		return 0x8211F1E8;
		  /* 8211F1E8h */ case    4:  		/* bc 12, CR0_LT, 336 */
		/* 8211F1E8h case    4:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F1E8h case    4:*/		return 0x8211F1EC;
		  /* 8211F1ECh */ case    5:  		/* addi R29, R29, 1 */
		/* 8211F1ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8211F1ECh case    5:*/		return 0x8211F1F0;
		  /* 8211F1F0h */ case    6:  		/* addi R9, R9, 16 */
		/* 8211F1F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x10);
		/* 8211F1F0h case    6:*/		return 0x8211F1F4;
		  /* 8211F1F4h */ case    7:  		/* addi R8, R8, 16 */
		/* 8211F1F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x10);
		/* 8211F1F4h case    7:*/		return 0x8211F1F8;
		  /* 8211F1F8h */ case    8:  		/* cmplw CR6, R29, R26 */
		/* 8211F1F8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R26);
		/* 8211F1F8h case    8:*/		return 0x8211F1FC;
		  /* 8211F1FCh */ case    9:  		/* bc 12, CR6_LT, -80 */
		/* 8211F1FCh case    9:*/		if ( regs.CR[6].lt ) { return 0x8211F1AC;  }
		/* 8211F1FCh case    9:*/		return 0x8211F200;
		  /* 8211F200h */ case   10:  		/* b -300 */
		/* 8211F200h case   10:*/		return 0x8211F0D4;
		/* 8211F200h case   10:*/		return 0x8211F204;
	}
	return 0x8211F204;
} // Block from 8211F1D8h-8211F204h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211F204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F204);
		  /* 8211F204h */ case    0:  		/* lwz R11, <#[R27 + 36]> */
		/* 8211F204h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000024) );
		/* 8211F204h case    0:*/		return 0x8211F208;
		  /* 8211F208h */ case    1:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211F208h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211F208h case    1:*/		return 0x8211F20C;
		  /* 8211F20Ch */ case    2:  		/* cmpwi CR6, R10, 15 */
		/* 8211F20Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000F);
		/* 8211F20Ch case    2:*/		return 0x8211F210;
		  /* 8211F210h */ case    3:  		/* bc 4, CR6_EQ, 100 */
		/* 8211F210h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211F274;  }
		/* 8211F210h case    3:*/		return 0x8211F214;
		  /* 8211F214h */ case    4:  		/* addi R6, R27, 48 */
		/* 8211F214h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F214h case    4:*/		return 0x8211F218;
		  /* 8211F218h */ case    5:  		/* addi R5, R11, 16 */
		/* 8211F218h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 8211F218h case    5:*/		return 0x8211F21C;
		  /* 8211F21Ch */ case    6:  		/* addi R4, R1, 112 */
		/* 8211F21Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8211F21Ch case    6:*/		return 0x8211F220;
		  /* 8211F220h */ case    7:  		/* mr R3, R24 */
		/* 8211F220h case    7:*/		regs.R3 = regs.R24;
		/* 8211F220h case    7:*/		return 0x8211F224;
		  /* 8211F224h */ case    8:  		/* bl -25204 */
		/* 8211F224h case    8:*/		regs.LR = 0x8211F228; return 0x82118FB0;
		/* 8211F224h case    8:*/		return 0x8211F228;
		  /* 8211F228h */ case    9:  		/* or. R31, R3, R3 */
		/* 8211F228h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F228h case    9:*/		return 0x8211F22C;
		  /* 8211F22Ch */ case   10:  		/* bc 12, CR0_LT, 268 */
		/* 8211F22Ch case   10:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F22Ch case   10:*/		return 0x8211F230;
		  /* 8211F230h */ case   11:  		/* li R9, 0 */
		/* 8211F230h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8211F230h case   11:*/		return 0x8211F234;
		  /* 8211F234h */ case   12:  		/* cmplwi CR6, R23, 0 */
		/* 8211F234h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211F234h case   12:*/		return 0x8211F238;
		  /* 8211F238h */ case   13:  		/* bc 12, CR6_EQ, -356 */
		/* 8211F238h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F238h case   13:*/		return 0x8211F23C;
		  /* 8211F23Ch */ case   14:  		/* lwz R11, <#[R1 + 112]> */
		/* 8211F23Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8211F23Ch case   14:*/		return 0x8211F240;
		  /* 8211F240h */ case   15:  		/* mr R4, R25 */
		/* 8211F240h case   15:*/		regs.R4 = regs.R25;
		/* 8211F240h case   15:*/		return 0x8211F244;
		  /* 8211F244h */ case   16:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 8211F244h case   16:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 8211F244h case   16:*/		return 0x8211F248;
		  /* 8211F248h */ case   17:  		/* add R5, R11, R22 */
		/* 8211F248h case   17:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R22);
		/* 8211F248h case   17:*/		return 0x8211F24C;
		  /* 8211F24Ch */ case   18:  		/* mr R3, R24 */
		/* 8211F24Ch case   18:*/		regs.R3 = regs.R24;
		/* 8211F24Ch case   18:*/		return 0x8211F250;
		  /* 8211F250h */ case   19:  		/* bl -25720 */
		/* 8211F250h case   19:*/		regs.LR = 0x8211F254; return 0x82118DD8;
		/* 8211F250h case   19:*/		return 0x8211F254;
		  /* 8211F254h */ case   20:  		/* or. R31, R3, R3 */
		/* 8211F254h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F254h case   20:*/		return 0x8211F258;
		  /* 8211F258h */ case   21:  		/* bc 12, CR0_LT, 224 */
		/* 8211F258h case   21:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F258h case   21:*/		return 0x8211F25C;
		  /* 8211F25Ch */ case   22:  		/* addi R9, R9, 1 */
		/* 8211F25Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211F25Ch case   22:*/		return 0x8211F260;
		  /* 8211F260h */ case   23:  		/* addi R5, R5, 16 */
		/* 8211F260h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x10);
		/* 8211F260h case   23:*/		return 0x8211F264;
		  /* 8211F264h */ case   24:  		/* addi R4, R4, 16 */
		/* 8211F264h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 8211F264h case   24:*/		return 0x8211F268;
		  /* 8211F268h */ case   25:  		/* cmplw CR6, R9, R23 */
		/* 8211F268h case   25:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 8211F268h case   25:*/		return 0x8211F26C;
		  /* 8211F26Ch */ case   26:  		/* bc 12, CR6_LT, -32 */
		/* 8211F26Ch case   26:*/		if ( regs.CR[6].lt ) { return 0x8211F24C;  }
		/* 8211F26Ch case   26:*/		return 0x8211F270;
		  /* 8211F270h */ case   27:  		/* b -412 */
		/* 8211F270h case   27:*/		return 0x8211F0D4;
		/* 8211F270h case   27:*/		return 0x8211F274;
	}
	return 0x8211F274;
} // Block from 8211F204h-8211F274h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8211F274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F274);
		  /* 8211F274h */ case    0:  		/* cmpwi CR6, R10, 1 */
		/* 8211F274h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8211F274h case    0:*/		return 0x8211F278;
		  /* 8211F278h */ case    1:  		/* bc 4, CR6_EQ, 184 */
		/* 8211F278h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F278h case    1:*/		return 0x8211F27C;
		  /* 8211F27Ch */ case    2:  		/* mr R8, R11 */
		/* 8211F27Ch case    2:*/		regs.R8 = regs.R11;
		/* 8211F27Ch case    2:*/		return 0x8211F280;
		  /* 8211F280h */ case    3:  		/* li R7, 0 */
		/* 8211F280h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211F280h case    3:*/		return 0x8211F284;
		  /* 8211F284h */ case    4:  		/* cmplwi CR6, R23, 0 */
		/* 8211F284h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211F284h case    4:*/		return 0x8211F288;
		  /* 8211F288h */ case    5:  		/* bc 12, CR6_EQ, -436 */
		/* 8211F288h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F288h case    5:*/		return 0x8211F28C;
		  /* 8211F28Ch */ case    6:  		/* addi R6, R27, 48 */
		/* 8211F28Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F28Ch case    6:*/		return 0x8211F290;
		  /* 8211F290h */ case    7:  		/* mr R9, R25 */
		/* 8211F290h case    7:*/		regs.R9 = regs.R25;
		/* 8211F290h case    7:*/		return 0x8211F294;
		  /* 8211F294h */ case    8:  		/* lwz R11, <#[R8 + 8]> */
		/* 8211F294h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 8211F294h case    8:*/		return 0x8211F298;
		  /* 8211F298h */ case    9:  		/* addi R4, R1, 112 */
		/* 8211F298h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8211F298h case    9:*/		return 0x8211F29C;
		  /* 8211F29Ch */ case   10:  		/* mr R3, R24 */
		/* 8211F29Ch case   10:*/		regs.R3 = regs.R24;
		/* 8211F29Ch case   10:*/		return 0x8211F2A0;
		  /* 8211F2A0h */ case   11:  		/* addi R5, R11, 16 */
		/* 8211F2A0h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 8211F2A0h case   11:*/		return 0x8211F2A4;
		  /* 8211F2A4h */ case   12:  		/* bl -25332 */
		/* 8211F2A4h case   12:*/		regs.LR = 0x8211F2A8; return 0x82118FB0;
		/* 8211F2A4h case   12:*/		return 0x8211F2A8;
		  /* 8211F2A8h */ case   13:  		/* or. R31, R3, R3 */
		/* 8211F2A8h case   13:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F2A8h case   13:*/		return 0x8211F2AC;
		  /* 8211F2ACh */ case   14:  		/* bc 12, CR0_LT, 140 */
		/* 8211F2ACh case   14:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F2ACh case   14:*/		return 0x8211F2B0;
		  /* 8211F2B0h */ case   15:  		/* lwz R11, <#[R1 + 112]> */
		/* 8211F2B0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8211F2B0h case   15:*/		return 0x8211F2B4;
		  /* 8211F2B4h */ case   16:  		/* mr R4, R9 */
		/* 8211F2B4h case   16:*/		regs.R4 = regs.R9;
		/* 8211F2B4h case   16:*/		return 0x8211F2B8;
		  /* 8211F2B8h */ case   17:  		/* mr R3, R24 */
		/* 8211F2B8h case   17:*/		regs.R3 = regs.R24;
		/* 8211F2B8h case   17:*/		return 0x8211F2BC;
		  /* 8211F2BCh */ case   18:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 8211F2BCh case   18:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 8211F2BCh case   18:*/		return 0x8211F2C0;
		  /* 8211F2C0h */ case   19:  		/* add R5, R11, R22 */
		/* 8211F2C0h case   19:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R22);
		/* 8211F2C0h case   19:*/		return 0x8211F2C4;
		  /* 8211F2C4h */ case   20:  		/* bl -25836 */
		/* 8211F2C4h case   20:*/		regs.LR = 0x8211F2C8; return 0x82118DD8;
		/* 8211F2C4h case   20:*/		return 0x8211F2C8;
		  /* 8211F2C8h */ case   21:  		/* or. R31, R3, R3 */
		/* 8211F2C8h case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F2C8h case   21:*/		return 0x8211F2CC;
		  /* 8211F2CCh */ case   22:  		/* bc 12, CR0_LT, 108 */
		/* 8211F2CCh case   22:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F2CCh case   22:*/		return 0x8211F2D0;
		  /* 8211F2D0h */ case   23:  		/* addi R7, R7, 1 */
		/* 8211F2D0h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8211F2D0h case   23:*/		return 0x8211F2D4;
		  /* 8211F2D4h */ case   24:  		/* lwz R8, <#[R8 + 12]> */
		/* 8211F2D4h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 8211F2D4h case   24:*/		return 0x8211F2D8;
		  /* 8211F2D8h */ case   25:  		/* addi R9, R9, 16 */
		/* 8211F2D8h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x10);
		/* 8211F2D8h case   25:*/		return 0x8211F2DC;
		  /* 8211F2DCh */ case   26:  		/* cmplw CR6, R7, R23 */
		/* 8211F2DCh case   26:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R23);
		/* 8211F2DCh case   26:*/		return 0x8211F2E0;
		  /* 8211F2E0h */ case   27:  		/* bc 12, CR6_LT, -76 */
		/* 8211F2E0h case   27:*/		if ( regs.CR[6].lt ) { return 0x8211F294;  }
		/* 8211F2E0h case   27:*/		return 0x8211F2E4;
		  /* 8211F2E4h */ case   28:  		/* b -528 */
		/* 8211F2E4h case   28:*/		return 0x8211F0D4;
		/* 8211F2E4h case   28:*/		return 0x8211F2E8;
	}
	return 0x8211F2E8;
} // Block from 8211F274h-8211F2E8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8211F2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F2E8);
		  /* 8211F2E8h */ case    0:  		/* addi R8, R27, 48 */
		/* 8211F2E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R27,0x30);
		/* 8211F2E8h case    0:*/		return 0x8211F2EC;
		  /* 8211F2ECh */ case    1:  		/* mr R5, R21 */
		/* 8211F2ECh case    1:*/		regs.R5 = regs.R21;
		/* 8211F2ECh case    1:*/		return 0x8211F2F0;
		  /* 8211F2F0h */ case    2:  		/* mr R6, R8 */
		/* 8211F2F0h case    2:*/		regs.R6 = regs.R8;
		/* 8211F2F0h case    2:*/		return 0x8211F2F4;
		  /* 8211F2F4h */ case    3:  		/* addi R4, R1, 112 */
		/* 8211F2F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8211F2F4h case    3:*/		return 0x8211F2F8;
		  /* 8211F2F8h */ case    4:  		/* mr R3, R24 */
		/* 8211F2F8h case    4:*/		regs.R3 = regs.R24;
		/* 8211F2F8h case    4:*/		return 0x8211F2FC;
		  /* 8211F2FCh */ case    5:  		/* bl -25420 */
		/* 8211F2FCh case    5:*/		regs.LR = 0x8211F300; return 0x82118FB0;
		/* 8211F2FCh case    5:*/		return 0x8211F300;
		  /* 8211F300h */ case    6:  		/* or. R31, R3, R3 */
		/* 8211F300h case    6:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F300h case    6:*/		return 0x8211F304;
		  /* 8211F304h */ case    7:  		/* bc 12, CR0_LT, 52 */
		/* 8211F304h case    7:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F304h case    7:*/		return 0x8211F308;
		  /* 8211F308h */ case    8:  		/* lwz R11, <#[R1 + 112]> */
		/* 8211F308h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8211F308h case    8:*/		return 0x8211F30C;
		  /* 8211F30Ch */ case    9:  		/* mullw R7, R11, R23 */
		/* 8211F30Ch case    9:*/		cpu::op::mullw<0>(regs,&regs.R7,regs.R11,regs.R23);
		/* 8211F30Ch case    9:*/		return 0x8211F310;
		  /* 8211F310h */ case   10:  		/* cmplw CR6, R7, R26 */
		/* 8211F310h case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R26);
		/* 8211F310h case   10:*/		return 0x8211F314;
		  /* 8211F314h */ case   11:  		/* bc 12, CR6_LT, 68 */
		/* 8211F314h case   11:*/		if ( regs.CR[6].lt ) { return 0x8211F358;  }
		/* 8211F314h case   11:*/		return 0x8211F318;
		  /* 8211F318h */ case   12:  		/* lis R11, -32255 */
		/* 8211F318h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8211F318h case   12:*/		return 0x8211F31C;
		  /* 8211F31Ch */ case   13:  		/* li R5, 3030 */
		/* 8211F31Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0xBD6);
		/* 8211F31Ch case   13:*/		return 0x8211F320;
		  /* 8211F320h */ case   14:  		/* addi R6, R11, 9184 */
		/* 8211F320h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 8211F320h case   14:*/		return 0x8211F324;
		  /* 8211F324h */ case   15:  		/* mr R4, R8 */
		/* 8211F324h case   15:*/		regs.R4 = regs.R8;
		/* 8211F324h case   15:*/		return 0x8211F328;
		  /* 8211F328h */ case   16:  		/* mr R3, R24 */
		/* 8211F328h case   16:*/		regs.R3 = regs.R24;
		/* 8211F328h case   16:*/		return 0x8211F32C;
		  /* 8211F32Ch */ case   17:  		/* bl -23180 */
		/* 8211F32Ch case   17:*/		regs.LR = 0x8211F330; return 0x821198A0;
		/* 8211F32Ch case   17:*/		return 0x8211F330;
	}
	return 0x8211F330;
} // Block from 8211F2E8h-8211F330h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8211F330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F330);
		  /* 8211F330h */ case    0:  		/* lis R31, -32768 */
		/* 8211F330h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 8211F330h case    0:*/		return 0x8211F334;
		  /* 8211F334h */ case    1:  		/* ori R31, R31, 16389 */
		/* 8211F334h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 8211F334h case    1:*/		return 0x8211F338;
	}
	return 0x8211F338;
} // Block from 8211F330h-8211F338h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F338);
		  /* 8211F338h */ case    0:  		/* lis R4, 9345 */
		/* 8211F338h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211F338h case    0:*/		return 0x8211F33C;
		  /* 8211F33Ch */ case    1:  		/* mr R3, R21 */
		/* 8211F33Ch case    1:*/		regs.R3 = regs.R21;
		/* 8211F33Ch case    1:*/		return 0x8211F340;
		  /* 8211F340h */ case    2:  		/* bl -618504 */
		/* 8211F340h case    2:*/		regs.LR = 0x8211F344; return 0x82088338;
		/* 8211F340h case    2:*/		return 0x8211F344;
		  /* 8211F344h */ case    3:  		/* lis R4, 9345 */
		/* 8211F344h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211F344h case    3:*/		return 0x8211F348;
		  /* 8211F348h */ case    4:  		/* mr R3, R22 */
		/* 8211F348h case    4:*/		regs.R3 = regs.R22;
		/* 8211F348h case    4:*/		return 0x8211F34C;
		  /* 8211F34Ch */ case    5:  		/* bl -618516 */
		/* 8211F34Ch case    5:*/		regs.LR = 0x8211F350; return 0x82088338;
		/* 8211F34Ch case    5:*/		return 0x8211F350;
		  /* 8211F350h */ case    6:  		/* mr R3, R31 */
		/* 8211F350h case    6:*/		regs.R3 = regs.R31;
		/* 8211F350h case    6:*/		return 0x8211F354;
		  /* 8211F354h */ case    7:  		/* b 636 */
		/* 8211F354h case    7:*/		return 0x8211F5D0;
		/* 8211F354h case    7:*/		return 0x8211F358;
	}
	return 0x8211F358;
} // Block from 8211F338h-8211F358h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211F358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F358);
		  /* 8211F358h */ case    0:  		/* li R9, 0 */
		/* 8211F358h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8211F358h case    0:*/		return 0x8211F35C;
		  /* 8211F35Ch */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 8211F35Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211F35Ch case    1:*/		return 0x8211F360;
		  /* 8211F360h */ case    2:  		/* bc 12, CR6_EQ, -652 */
		/* 8211F360h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F360h case    2:*/		return 0x8211F364;
		  /* 8211F364h */ case    3:  		/* mr R4, R25 */
		/* 8211F364h case    3:*/		regs.R4 = regs.R25;
		/* 8211F364h case    3:*/		return 0x8211F368;
		  /* 8211F368h */ case    4:  		/* add R11, R7, R9 */
		/* 8211F368h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R7,regs.R9);
		/* 8211F368h case    4:*/		return 0x8211F36C;
		  /* 8211F36Ch */ case    5:  		/* mr R6, R8 */
		/* 8211F36Ch case    5:*/		regs.R6 = regs.R8;
		/* 8211F36Ch case    5:*/		return 0x8211F370;
		  /* 8211F370h */ case    6:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 8211F370h case    6:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 8211F370h case    6:*/		return 0x8211F374;
		  /* 8211F374h */ case    7:  		/* mr R3, R24 */
		/* 8211F374h case    7:*/		regs.R3 = regs.R24;
		/* 8211F374h case    7:*/		return 0x8211F378;
		  /* 8211F378h */ case    8:  		/* add R5, R11, R22 */
		/* 8211F378h case    8:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R22);
		/* 8211F378h case    8:*/		return 0x8211F37C;
		  /* 8211F37Ch */ case    9:  		/* bl -26020 */
		/* 8211F37Ch case    9:*/		regs.LR = 0x8211F380; return 0x82118DD8;
		/* 8211F37Ch case    9:*/		return 0x8211F380;
		  /* 8211F380h */ case   10:  		/* or. R31, R3, R3 */
		/* 8211F380h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F380h case   10:*/		return 0x8211F384;
		  /* 8211F384h */ case   11:  		/* bc 12, CR0_LT, -76 */
		/* 8211F384h case   11:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F384h case   11:*/		return 0x8211F388;
		  /* 8211F388h */ case   12:  		/* addi R9, R9, 1 */
		/* 8211F388h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211F388h case   12:*/		return 0x8211F38C;
		  /* 8211F38Ch */ case   13:  		/* addi R4, R4, 16 */
		/* 8211F38Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 8211F38Ch case   13:*/		return 0x8211F390;
		  /* 8211F390h */ case   14:  		/* cmplw CR6, R9, R23 */
		/* 8211F390h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 8211F390h case   14:*/		return 0x8211F394;
		  /* 8211F394h */ case   15:  		/* bc 12, CR6_LT, -44 */
		/* 8211F394h case   15:*/		if ( regs.CR[6].lt ) { return 0x8211F368;  }
		/* 8211F394h case   15:*/		return 0x8211F398;
		  /* 8211F398h */ case   16:  		/* b -708 */
		/* 8211F398h case   16:*/		return 0x8211F0D4;
		/* 8211F398h case   16:*/		return 0x8211F39C;
	}
	return 0x8211F39C;
} // Block from 8211F358h-8211F39Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211F39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F39C);
		  /* 8211F39Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211F39Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211F39Ch case    0:*/		return 0x8211F3A0;
		  /* 8211F3A0h */ case    1:  		/* bc 12, CR6_EQ, 292 */
		/* 8211F3A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F4C4;  }
		/* 8211F3A0h case    1:*/		return 0x8211F3A4;
		  /* 8211F3A4h */ case    2:  		/* cmplwi CR6, R26, 1 */
		/* 8211F3A4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 8211F3A4h case    2:*/		return 0x8211F3A8;
		  /* 8211F3A8h */ case    3:  		/* bc 4, CR6_EQ, 64 */
		/* 8211F3A8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8211F3E8;  }
		/* 8211F3A8h case    3:*/		return 0x8211F3AC;
		  /* 8211F3ACh */ case    4:  		/* li R9, 0 */
		/* 8211F3ACh case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8211F3ACh case    4:*/		return 0x8211F3B0;
		  /* 8211F3B0h */ case    5:  		/* cmplwi CR6, R23, 0 */
		/* 8211F3B0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211F3B0h case    5:*/		return 0x8211F3B4;
		  /* 8211F3B4h */ case    6:  		/* bc 12, CR6_EQ, -736 */
		/* 8211F3B4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F3B4h case    6:*/		return 0x8211F3B8;
		  /* 8211F3B8h */ case    7:  		/* addi R6, R27, 48 */
		/* 8211F3B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F3B8h case    7:*/		return 0x8211F3BC;
		  /* 8211F3BCh */ case    8:  		/* mr R4, R25 */
		/* 8211F3BCh case    8:*/		regs.R4 = regs.R25;
		/* 8211F3BCh case    8:*/		return 0x8211F3C0;
		  /* 8211F3C0h */ case    9:  		/* mr R5, R22 */
		/* 8211F3C0h case    9:*/		regs.R5 = regs.R22;
		/* 8211F3C0h case    9:*/		return 0x8211F3C4;
		  /* 8211F3C4h */ case   10:  		/* mr R3, R24 */
		/* 8211F3C4h case   10:*/		regs.R3 = regs.R24;
		/* 8211F3C4h case   10:*/		return 0x8211F3C8;
		  /* 8211F3C8h */ case   11:  		/* bl -26096 */
		/* 8211F3C8h case   11:*/		regs.LR = 0x8211F3CC; return 0x82118DD8;
		/* 8211F3C8h case   11:*/		return 0x8211F3CC;
		  /* 8211F3CCh */ case   12:  		/* or. R31, R3, R3 */
		/* 8211F3CCh case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F3CCh case   12:*/		return 0x8211F3D0;
		  /* 8211F3D0h */ case   13:  		/* bc 12, CR0_LT, -152 */
		/* 8211F3D0h case   13:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F3D0h case   13:*/		return 0x8211F3D4;
		  /* 8211F3D4h */ case   14:  		/* addi R9, R9, 1 */
		/* 8211F3D4h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211F3D4h case   14:*/		return 0x8211F3D8;
		  /* 8211F3D8h */ case   15:  		/* addi R4, R4, 16 */
		/* 8211F3D8h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 8211F3D8h case   15:*/		return 0x8211F3DC;
		  /* 8211F3DCh */ case   16:  		/* cmplw CR6, R9, R23 */
		/* 8211F3DCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 8211F3DCh case   16:*/		return 0x8211F3E0;
		  /* 8211F3E0h */ case   17:  		/* bc 12, CR6_LT, -32 */
		/* 8211F3E0h case   17:*/		if ( regs.CR[6].lt ) { return 0x8211F3C0;  }
		/* 8211F3E0h case   17:*/		return 0x8211F3E4;
		  /* 8211F3E4h */ case   18:  		/* b -784 */
		/* 8211F3E4h case   18:*/		return 0x8211F0D4;
		/* 8211F3E4h case   18:*/		return 0x8211F3E8;
	}
	return 0x8211F3E8;
} // Block from 8211F39Ch-8211F3E8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211F3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F3E8);
		  /* 8211F3E8h */ case    0:  		/* cmplw CR6, R23, R26 */
		/* 8211F3E8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R26);
		/* 8211F3E8h case    0:*/		return 0x8211F3EC;
		  /* 8211F3ECh */ case    1:  		/* bc 12, CR6_EQ, 152 */
		/* 8211F3ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F484;  }
		/* 8211F3ECh case    1:*/		return 0x8211F3F0;
		  /* 8211F3F0h */ case    2:  		/* lwz R10, <#[R27 + 20]> */
		/* 8211F3F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 8211F3F0h case    2:*/		return 0x8211F3F4;
		  /* 8211F3F4h */ case    3:  		/* lwz R11, <#[R30 + 20]> */
		/* 8211F3F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8211F3F4h case    3:*/		return 0x8211F3F8;
		  /* 8211F3F8h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 8211F3F8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8211F3F8h case    4:*/		return 0x8211F3FC;
		  /* 8211F3FCh */ case    5:  		/* bc 12, CR6_GT, 136 */
		/* 8211F3FCh case    5:*/		if ( regs.CR[6].gt ) { return 0x8211F484;  }
		/* 8211F3FCh case    5:*/		return 0x8211F400;
		  /* 8211F400h */ case    6:  		/* lwz R11, <#[R27 + 24]> */
		/* 8211F400h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 8211F400h case    6:*/		return 0x8211F404;
		  /* 8211F404h */ case    7:  		/* lwz R9, <#[R30 + 24]> */
		/* 8211F404h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000018) );
		/* 8211F404h case    7:*/		return 0x8211F408;
		  /* 8211F408h */ case    8:  		/* cmplw CR6, R11, R9 */
		/* 8211F408h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8211F408h case    8:*/		return 0x8211F40C;
		  /* 8211F40Ch */ case    9:  		/* bc 12, CR6_GT, 120 */
		/* 8211F40Ch case    9:*/		if ( regs.CR[6].gt ) { return 0x8211F484;  }
		/* 8211F40Ch case    9:*/		return 0x8211F410;
		  /* 8211F410h */ case   10:  		/* li R8, 0 */
		/* 8211F410h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8211F410h case   10:*/		return 0x8211F414;
		  /* 8211F414h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 8211F414h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8211F414h case   11:*/		return 0x8211F418;
		  /* 8211F418h */ case   12:  		/* bc 12, CR6_EQ, -836 */
		/* 8211F418h case   12:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F418h case   12:*/		return 0x8211F41C;
		  /* 8211F41Ch */ case   13:  		/* li R9, 0 */
		/* 8211F41Ch case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8211F41Ch case   13:*/		return 0x8211F420;
		  /* 8211F420h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8211F420h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211F420h case   14:*/		return 0x8211F424;
		  /* 8211F424h */ case   15:  		/* bc 12, CR6_EQ, 76 */
		/* 8211F424h case   15:*/		if ( regs.CR[6].eq ) { return 0x8211F470;  }
		/* 8211F424h case   15:*/		return 0x8211F428;
		  /* 8211F428h */ case   16:  		/* addi R6, R27, 48 */
		/* 8211F428h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F428h case   16:*/		return 0x8211F42C;
		  /* 8211F42Ch */ case   17:  		/* lwz R10, <#[R30 + 24]> */
		/* 8211F42Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 8211F42Ch case   17:*/		return 0x8211F430;
		  /* 8211F430h */ case   18:  		/* mullw R11, R11, R8 */
		/* 8211F430h case   18:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8211F430h case   18:*/		return 0x8211F434;
		  /* 8211F434h */ case   19:  		/* mullw R10, R10, R8 */
		/* 8211F434h case   19:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8211F434h case   19:*/		return 0x8211F438;
		  /* 8211F438h */ case   20:  		/* add R10, R10, R9 */
		/* 8211F438h case   20:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8211F438h case   20:*/		return 0x8211F43C;
		  /* 8211F43Ch */ case   21:  		/* add R11, R11, R9 */
		/* 8211F43Ch case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8211F43Ch case   21:*/		return 0x8211F440;
		  /* 8211F440h */ case   22:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 8211F440h case   22:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 8211F440h case   22:*/		return 0x8211F444;
		  /* 8211F444h */ case   23:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 8211F444h case   23:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 8211F444h case   23:*/		return 0x8211F448;
		  /* 8211F448h */ case   24:  		/* add R5, R10, R22 */
		/* 8211F448h case   24:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R22);
		/* 8211F448h case   24:*/		return 0x8211F44C;
		  /* 8211F44Ch */ case   25:  		/* add R4, R11, R25 */
		/* 8211F44Ch case   25:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R25);
		/* 8211F44Ch case   25:*/		return 0x8211F450;
		  /* 8211F450h */ case   26:  		/* mr R3, R24 */
		/* 8211F450h case   26:*/		regs.R3 = regs.R24;
		/* 8211F450h case   26:*/		return 0x8211F454;
		  /* 8211F454h */ case   27:  		/* bl -26236 */
		/* 8211F454h case   27:*/		regs.LR = 0x8211F458; return 0x82118DD8;
		/* 8211F454h case   27:*/		return 0x8211F458;
		  /* 8211F458h */ case   28:  		/* or. R31, R3, R3 */
		/* 8211F458h case   28:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F458h case   28:*/		return 0x8211F45C;
		  /* 8211F45Ch */ case   29:  		/* bc 12, CR0_LT, -292 */
		/* 8211F45Ch case   29:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F45Ch case   29:*/		return 0x8211F460;
		  /* 8211F460h */ case   30:  		/* lwz R11, <#[R27 + 24]> */
		/* 8211F460h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 8211F460h case   30:*/		return 0x8211F464;
		  /* 8211F464h */ case   31:  		/* addi R9, R9, 1 */
		/* 8211F464h case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211F464h case   31:*/		return 0x8211F468;
		  /* 8211F468h */ case   32:  		/* cmplw CR6, R9, R11 */
		/* 8211F468h case   32:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8211F468h case   32:*/		return 0x8211F46C;
		  /* 8211F46Ch */ case   33:  		/* bc 12, CR6_LT, -64 */
		/* 8211F46Ch case   33:*/		if ( regs.CR[6].lt ) { return 0x8211F42C;  }
		/* 8211F46Ch case   33:*/		return 0x8211F470;
	}
	return 0x8211F470;
} // Block from 8211F3E8h-8211F470h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8211F470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F470);
		  /* 8211F470h */ case    0:  		/* lwz R10, <#[R27 + 20]> */
		/* 8211F470h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 8211F470h case    0:*/		return 0x8211F474;
		  /* 8211F474h */ case    1:  		/* addi R8, R8, 1 */
		/* 8211F474h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8211F474h case    1:*/		return 0x8211F478;
		  /* 8211F478h */ case    2:  		/* cmplw CR6, R8, R10 */
		/* 8211F478h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 8211F478h case    2:*/		return 0x8211F47C;
		  /* 8211F47Ch */ case    3:  		/* bc 12, CR6_LT, -96 */
		/* 8211F47Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8211F41C;  }
		/* 8211F47Ch case    3:*/		return 0x8211F480;
		  /* 8211F480h */ case    4:  		/* b -940 */
		/* 8211F480h case    4:*/		return 0x8211F0D4;
		/* 8211F480h case    4:*/		return 0x8211F484;
	}
	return 0x8211F484;
} // Block from 8211F470h-8211F484h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211F484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F484);
		  /* 8211F484h */ case    0:  		/* li R8, 0 */
		/* 8211F484h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8211F484h case    0:*/		return 0x8211F488;
		  /* 8211F488h */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 8211F488h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8211F488h case    1:*/		return 0x8211F48C;
		  /* 8211F48Ch */ case    2:  		/* bc 12, CR6_EQ, -952 */
		/* 8211F48Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8211F0D4;  }
		/* 8211F48Ch case    2:*/		return 0x8211F490;
		  /* 8211F490h */ case    3:  		/* addi R6, R27, 48 */
		/* 8211F490h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F490h case    3:*/		return 0x8211F494;
		  /* 8211F494h */ case    4:  		/* mr R4, R25 */
		/* 8211F494h case    4:*/		regs.R4 = regs.R25;
		/* 8211F494h case    4:*/		return 0x8211F498;
		  /* 8211F498h */ case    5:  		/* subf R9, R25, R22 */
		/* 8211F498h case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R25,regs.R22);
		/* 8211F498h case    5:*/		return 0x8211F49C;
		  /* 8211F49Ch */ case    6:  		/* add R5, R9, R4 */
		/* 8211F49Ch case    6:*/		cpu::op::add<0>(regs,&regs.R5,regs.R9,regs.R4);
		/* 8211F49Ch case    6:*/		return 0x8211F4A0;
	}
	return 0x8211F4A0;
} // Block from 8211F484h-8211F4A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211F4A0h
// Function '?AsmExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F4A0);
		  /* 8211F4A0h */ case    0:  		/* mr R3, R24 */
		/* 8211F4A0h case    0:*/		regs.R3 = regs.R24;
		/* 8211F4A0h case    0:*/		return 0x8211F4A4;
		  /* 8211F4A4h */ case    1:  		/* bl -26316 */
		/* 8211F4A4h case    1:*/		regs.LR = 0x8211F4A8; return 0x82118DD8;
		/* 8211F4A4h case    1:*/		return 0x8211F4A8;
		  /* 8211F4A8h */ case    2:  		/* or. R31, R3, R3 */
		/* 8211F4A8h case    2:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F4A8h case    2:*/		return 0x8211F4AC;
		  /* 8211F4ACh */ case    3:  		/* bc 12, CR0_LT, -372 */
		/* 8211F4ACh case    3:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F4ACh case    3:*/		return 0x8211F4B0;
		  /* 8211F4B0h */ case    4:  		/* addi R8, R8, 1 */
		/* 8211F4B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8211F4B0h case    4:*/		return 0x8211F4B4;
		  /* 8211F4B4h */ case    5:  		/* addi R4, R4, 16 */
		/* 8211F4B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 8211F4B4h case    5:*/		return 0x8211F4B8;
		  /* 8211F4B8h */ case    6:  		/* cmplw CR6, R8, R23 */
		/* 8211F4B8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R23);
		/* 8211F4B8h case    6:*/		return 0x8211F4BC;
		  /* 8211F4BCh */ case    7:  		/* bc 12, CR6_LT, -32 */
		/* 8211F4BCh case    7:*/		if ( regs.CR[6].lt ) { return 0x8211F49C;  }
		/* 8211F4BCh case    7:*/		return 0x8211F4C0;
		  /* 8211F4C0h */ case    8:  		/* b -1004 */
		/* 8211F4C0h case    8:*/		return 0x8211F0D4;
		/* 8211F4C0h case    8:*/		return 0x8211F4C4;
	}
	return 0x8211F4C4;
} // Block from 8211F4A0h-8211F4C4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211F4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F4C4);
		  /* 8211F4C4h */ case    0:  		/* lwz R11, <#[R27 + 32]> */
		/* 8211F4C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 8211F4C4h case    0:*/		return 0x8211F4C8;
		  /* 8211F4C8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8211F4C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211F4C8h case    1:*/		return 0x8211F4CC;
		  /* 8211F4CCh */ case    2:  		/* bc 12, CR6_EQ, -412 */
		/* 8211F4CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F4CCh case    2:*/		return 0x8211F4D0;
		  /* 8211F4D0h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211F4D0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211F4D0h case    3:*/		return 0x8211F4D4;
		  /* 8211F4D4h */ case    4:  		/* cmpwi CR6, R10, 15 */
		/* 8211F4D4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000F);
		/* 8211F4D4h case    4:*/		return 0x8211F4D8;
		  /* 8211F4D8h */ case    5:  		/* bc 4, CR6_EQ, 56 */
		/* 8211F4D8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8211F510;  }
		/* 8211F4D8h case    5:*/		return 0x8211F4DC;
		  /* 8211F4DCh */ case    6:  		/* addi R5, R11, 16 */
		/* 8211F4DCh case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 8211F4DCh case    6:*/		return 0x8211F4E0;
		  /* 8211F4E0h */ case    7:  		/* lwz R11, <#[R11 + 16]> */
		/* 8211F4E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8211F4E0h case    7:*/		return 0x8211F4E4;
		  /* 8211F4E4h */ case    8:  		/* cmpwi CR6, R11, 6 */
		/* 8211F4E4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211F4E4h case    8:*/		return 0x8211F4E8;
		  /* 8211F4E8h */ case    9:  		/* bc 12, CR6_EQ, -440 */
		/* 8211F4E8h case    9:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F4E8h case    9:*/		return 0x8211F4EC;
		  /* 8211F4ECh */ case   10:  		/* cmpwi CR6, R11, 7 */
		/* 8211F4ECh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 8211F4ECh case   10:*/		return 0x8211F4F0;
		  /* 8211F4F0h */ case   11:  		/* bc 12, CR6_EQ, -448 */
		/* 8211F4F0h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F4F0h case   11:*/		return 0x8211F4F4;
		  /* 8211F4F4h */ case   12:  		/* addi R6, R27, 48 */
		/* 8211F4F4h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F4F4h case   12:*/		return 0x8211F4F8;
		  /* 8211F4F8h */ case   13:  		/* mr R4, R25 */
		/* 8211F4F8h case   13:*/		regs.R4 = regs.R25;
		/* 8211F4F8h case   13:*/		return 0x8211F4FC;
		  /* 8211F4FCh */ case   14:  		/* mr R3, R24 */
		/* 8211F4FCh case   14:*/		regs.R3 = regs.R24;
		/* 8211F4FCh case   14:*/		return 0x8211F500;
		  /* 8211F500h */ case   15:  		/* bl -26408 */
		/* 8211F500h case   15:*/		regs.LR = 0x8211F504; return 0x82118DD8;
		/* 8211F500h case   15:*/		return 0x8211F504;
		  /* 8211F504h */ case   16:  		/* or. R31, R3, R3 */
		/* 8211F504h case   16:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F504h case   16:*/		return 0x8211F508;
		  /* 8211F508h */ case   17:  		/* bc 12, CR0_LT, -464 */
		/* 8211F508h case   17:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F508h case   17:*/		return 0x8211F50C;
		  /* 8211F50Ch */ case   18:  		/* b -1080 */
		/* 8211F50Ch case   18:*/		return 0x8211F0D4;
		/* 8211F50Ch case   18:*/		return 0x8211F510;
	}
	return 0x8211F510;
} // Block from 8211F4C4h-8211F510h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8211F510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F510);
		  /* 8211F510h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8211F510h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211F510h case    0:*/		return 0x8211F514;
		  /* 8211F514h */ case    1:  		/* bc 12, CR6_EQ, -484 */
		/* 8211F514h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F514h case    1:*/		return 0x8211F518;
		  /* 8211F518h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211F518h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211F518h case    2:*/		return 0x8211F51C;
		  /* 8211F51Ch */ case    3:  		/* cmpwi CR6, R10, 1 */
		/* 8211F51Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8211F51Ch case    3:*/		return 0x8211F520;
		  /* 8211F520h */ case    4:  		/* bc 4, CR6_EQ, -496 */
		/* 8211F520h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F520h case    4:*/		return 0x8211F524;
		  /* 8211F524h */ case    5:  		/* mr R30, R11 */
		/* 8211F524h case    5:*/		regs.R30 = regs.R11;
		/* 8211F524h case    5:*/		return 0x8211F528;
		  /* 8211F528h */ case    6:  		/* lwz R4, <#[R30 + 8]> */
		/* 8211F528h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 8211F528h case    6:*/		return 0x8211F52C;
		  /* 8211F52Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 8211F52Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211F52Ch case    7:*/		return 0x8211F530;
		  /* 8211F530h */ case    8:  		/* bc 12, CR6_EQ, 136 */
		/* 8211F530h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211F5B8;  }
		/* 8211F530h case    8:*/		return 0x8211F534;
		  /* 8211F534h */ case    9:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211F534h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211F534h case    9:*/		return 0x8211F538;
		  /* 8211F538h */ case   10:  		/* cmpwi CR6, R11, 15 */
		/* 8211F538h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 8211F538h case   10:*/		return 0x8211F53C;
		  /* 8211F53Ch */ case   11:  		/* bc 4, CR6_EQ, 60 */
		/* 8211F53Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8211F578;  }
		/* 8211F53Ch case   11:*/		return 0x8211F540;
		  /* 8211F540h */ case   12:  		/* lwz R11, <#[R4 + 16]> */
		/* 8211F540h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8211F540h case   12:*/		return 0x8211F544;
		  /* 8211F544h */ case   13:  		/* addi R5, R4, 16 */
		/* 8211F544h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x10);
		/* 8211F544h case   13:*/		return 0x8211F548;
		  /* 8211F548h */ case   14:  		/* cmpwi CR6, R11, 6 */
		/* 8211F548h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211F548h case   14:*/		return 0x8211F54C;
		  /* 8211F54Ch */ case   15:  		/* bc 12, CR6_EQ, -540 */
		/* 8211F54Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F54Ch case   15:*/		return 0x8211F550;
		  /* 8211F550h */ case   16:  		/* cmpwi CR6, R11, 7 */
		/* 8211F550h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 8211F550h case   16:*/		return 0x8211F554;
		  /* 8211F554h */ case   17:  		/* bc 12, CR6_EQ, -548 */
		/* 8211F554h case   17:*/		if ( regs.CR[6].eq ) { return 0x8211F330;  }
		/* 8211F554h case   17:*/		return 0x8211F558;
		  /* 8211F558h */ case   18:  		/* addi R6, R27, 48 */
		/* 8211F558h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R27,0x30);
		/* 8211F558h case   18:*/		return 0x8211F55C;
		  /* 8211F55Ch */ case   19:  		/* mr R4, R25 */
		/* 8211F55Ch case   19:*/		regs.R4 = regs.R25;
		/* 8211F55Ch case   19:*/		return 0x8211F560;
		  /* 8211F560h */ case   20:  		/* mr R3, R24 */
		/* 8211F560h case   20:*/		regs.R3 = regs.R24;
		/* 8211F560h case   20:*/		return 0x8211F564;
		  /* 8211F564h */ case   21:  		/* bl -26508 */
		/* 8211F564h case   21:*/		regs.LR = 0x8211F568; return 0x82118DD8;
		/* 8211F564h case   21:*/		return 0x8211F568;
		  /* 8211F568h */ case   22:  		/* or. R31, R3, R3 */
		/* 8211F568h case   22:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F568h case   22:*/		return 0x8211F56C;
		  /* 8211F56Ch */ case   23:  		/* bc 12, CR0_LT, -564 */
		/* 8211F56Ch case   23:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F56Ch case   23:*/		return 0x8211F570;
		  /* 8211F570h */ case   24:  		/* addi R25, R25, 16 */
		/* 8211F570h case   24:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x10);
		/* 8211F570h case   24:*/		return 0x8211F574;
		  /* 8211F574h */ case   25:  		/* b 68 */
		/* 8211F574h case   25:*/		return 0x8211F5B8;
		/* 8211F574h case   25:*/		return 0x8211F578;
	}
	return 0x8211F578;
} // Block from 8211F510h-8211F578h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8211F578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F578);
		  /* 8211F578h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 8211F578h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211F578h case    0:*/		return 0x8211F57C;
		  /* 8211F57Ch */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 8211F57Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F5B8;  }
		/* 8211F57Ch case    1:*/		return 0x8211F580;
		  /* 8211F580h */ case    2:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211F580h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211F580h case    2:*/		return 0x8211F584;
		  /* 8211F584h */ case    3:  		/* cmpwi CR6, R11, 14 */
		/* 8211F584h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211F584h case    3:*/		return 0x8211F588;
		  /* 8211F588h */ case    4:  		/* bc 4, CR6_EQ, 48 */
		/* 8211F588h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211F5B8;  }
		/* 8211F588h case    4:*/		return 0x8211F58C;
		  /* 8211F58Ch */ case    5:  		/* mr R5, R25 */
		/* 8211F58Ch case    5:*/		regs.R5 = regs.R25;
		/* 8211F58Ch case    5:*/		return 0x8211F590;
		  /* 8211F590h */ case    6:  		/* mr R3, R24 */
		/* 8211F590h case    6:*/		regs.R3 = regs.R24;
		/* 8211F590h case    6:*/		return 0x8211F594;
		  /* 8211F594h */ case    7:  		/* bl -2076 */
		/* 8211F594h case    7:*/		regs.LR = 0x8211F598; return 0x8211ED78;
		/* 8211F594h case    7:*/		return 0x8211F598;
		  /* 8211F598h */ case    8:  		/* or. R31, R3, R3 */
		/* 8211F598h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F598h case    8:*/		return 0x8211F59C;
		  /* 8211F59Ch */ case    9:  		/* bc 12, CR0_LT, -612 */
		/* 8211F59Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x8211F338;  }
		/* 8211F59Ch case    9:*/		return 0x8211F5A0;
		  /* 8211F5A0h */ case   10:  		/* lwz R11, <#[R30 + 8]> */
		/* 8211F5A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8211F5A0h case   10:*/		return 0x8211F5A4;
		  /* 8211F5A4h */ case   11:  		/* lwz R10, <#[R11 + 24]> */
		/* 8211F5A4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8211F5A4h case   11:*/		return 0x8211F5A8;
		  /* 8211F5A8h */ case   12:  		/* lwz R11, <#[R11 + 20]> */
		/* 8211F5A8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 8211F5A8h case   12:*/		return 0x8211F5AC;
		  /* 8211F5ACh */ case   13:  		/* mullw R11, R10, R11 */
		/* 8211F5ACh case   13:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8211F5ACh case   13:*/		return 0x8211F5B0;
		  /* 8211F5B0h */ case   14:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 8211F5B0h case   14:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 8211F5B0h case   14:*/		return 0x8211F5B4;
		  /* 8211F5B4h */ case   15:  		/* add R25, R11, R25 */
		/* 8211F5B4h case   15:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 8211F5B4h case   15:*/		return 0x8211F5B8;
	}
	return 0x8211F5B8;
} // Block from 8211F578h-8211F5B8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211F5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F5B8);
		  /* 8211F5B8h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 8211F5B8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 8211F5B8h case    0:*/		return 0x8211F5BC;
		  /* 8211F5BCh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8211F5BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211F5BCh case    1:*/		return 0x8211F5C0;
		  /* 8211F5C0h */ case    2:  		/* bc 4, CR6_EQ, -152 */
		/* 8211F5C0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211F528;  }
		/* 8211F5C0h case    2:*/		return 0x8211F5C4;
		  /* 8211F5C4h */ case    3:  		/* b -1264 */
		/* 8211F5C4h case    3:*/		return 0x8211F0D4;
		/* 8211F5C4h case    3:*/		return 0x8211F5C8;
	}
	return 0x8211F5C8;
} // Block from 8211F5B8h-8211F5C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211F5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F5C8);
		  /* 8211F5C8h */ case    0:  		/* lis R3, -32768 */
		/* 8211F5C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211F5C8h case    0:*/		return 0x8211F5CC;
		  /* 8211F5CCh */ case    1:  		/* ori R3, R3, 16389 */
		/* 8211F5CCh case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211F5CCh case    1:*/		return 0x8211F5D0;
	}
	return 0x8211F5D0;
} // Block from 8211F5C8h-8211F5D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F5D0);
		  /* 8211F5D0h */ case    0:  		/* addi R1, R1, 240 */
		/* 8211F5D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8211F5D0h case    0:*/		return 0x8211F5D4;
		  /* 8211F5D4h */ case    1:  		/* lfd FR30, <#[R1 - 112]> */
		/* 8211F5D4h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 8211F5D4h case    1:*/		return 0x8211F5D8;
		  /* 8211F5D8h */ case    2:  		/* lfd FR31, <#[R1 - 104]> */
		/* 8211F5D8h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 8211F5D8h case    2:*/		return 0x8211F5DC;
		  /* 8211F5DCh */ case    3:  		/* b -582480 */
		/* 8211F5DCh case    3:*/		return 0x8209128C;
		/* 8211F5DCh case    3:*/		return 0x8211F5E0;
	}
	return 0x8211F5E0;
} // Block from 8211F5D0h-8211F5E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211F5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F5E0);
		  /* 8211F5E0h */ case    0:  		/* mfspr R12, LR */
		/* 8211F5E0h case    0:*/		regs.R12 = regs.LR;
		/* 8211F5E0h case    0:*/		return 0x8211F5E4;
		  /* 8211F5E4h */ case    1:  		/* bl -582556 */
		/* 8211F5E4h case    1:*/		regs.LR = 0x8211F5E8; return 0x82091248;
		/* 8211F5E4h case    1:*/		return 0x8211F5E8;
		  /* 8211F5E8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8211F5E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8211F5E8h case    2:*/		return 0x8211F5EC;
		  /* 8211F5ECh */ case    3:  		/* mr R24, R3 */
		/* 8211F5ECh case    3:*/		regs.R24 = regs.R3;
		/* 8211F5ECh case    3:*/		return 0x8211F5F0;
		  /* 8211F5F0h */ case    4:  		/* mr R30, R4 */
		/* 8211F5F0h case    4:*/		regs.R30 = regs.R4;
		/* 8211F5F0h case    4:*/		return 0x8211F5F4;
		  /* 8211F5F4h */ case    5:  		/* mr R31, R5 */
		/* 8211F5F4h case    5:*/		regs.R31 = regs.R5;
		/* 8211F5F4h case    5:*/		return 0x8211F5F8;
		  /* 8211F5F8h */ case    6:  		/* mr R29, R6 */
		/* 8211F5F8h case    6:*/		regs.R29 = regs.R6;
		/* 8211F5F8h case    6:*/		return 0x8211F5FC;
		  /* 8211F5FCh */ case    7:  		/* mr R26, R7 */
		/* 8211F5FCh case    7:*/		regs.R26 = regs.R7;
		/* 8211F5FCh case    7:*/		return 0x8211F600;
		  /* 8211F600h */ case    8:  		/* li R25, 0 */
		/* 8211F600h case    8:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8211F600h case    8:*/		return 0x8211F604;
		  /* 8211F604h */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 8211F604h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8211F604h case    9:*/		return 0x8211F608;
		  /* 8211F608h */ case   10:  		/* bc 12, CR6_EQ, 192 */
		/* 8211F608h case   10:*/		if ( regs.CR[6].eq ) { return 0x8211F6C8;  }
		/* 8211F608h case   10:*/		return 0x8211F60C;
		  /* 8211F60Ch */ case   11:  		/* lwz R11, <#[R4 + 36]> */
		/* 8211F60Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 8211F60Ch case   11:*/		return 0x8211F610;
		  /* 8211F610h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8211F610h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211F610h case   12:*/		return 0x8211F614;
		  /* 8211F614h */ case   13:  		/* bc 12, CR6_EQ, 180 */
		/* 8211F614h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211F6C8;  }
		/* 8211F614h case   13:*/		return 0x8211F618;
		  /* 8211F618h */ case   14:  		/* addi R5, R1, 80 */
		/* 8211F618h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8211F618h case   14:*/		return 0x8211F61C;
		  /* 8211F61Ch */ case   15:  		/* lwz R3, <#[R11 + 24]> */
		/* 8211F61Ch case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000018) );
		/* 8211F61Ch case   15:*/		return 0x8211F620;
		  /* 8211F620h */ case   16:  		/* li R4, 0 */
		/* 8211F620h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211F620h case   16:*/		return 0x8211F624;
		  /* 8211F624h */ case   17:  		/* bl -526484 */
		/* 8211F624h case   17:*/		regs.LR = 0x8211F628; return 0x8209ED90;
		/* 8211F624h case   17:*/		return 0x8211F628;
		  /* 8211F628h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 8211F628h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211F628h case   18:*/		return 0x8211F62C;
		  /* 8211F62Ch */ case   19:  		/* bc 12, CR0_LT, 92 */
		/* 8211F62Ch case   19:*/		if ( regs.CR[0].lt ) { return 0x8211F688;  }
		/* 8211F62Ch case   19:*/		return 0x8211F630;
		  /* 8211F630h */ case   20:  		/* addi R5, R1, 96 */
		/* 8211F630h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8211F630h case   20:*/		return 0x8211F634;
		  /* 8211F634h */ case   21:  		/* lwz R3, <#[R31 + 24]> */
		/* 8211F634h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8211F634h case   21:*/		return 0x8211F638;
		  /* 8211F638h */ case   22:  		/* li R4, 0 */
		/* 8211F638h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211F638h case   22:*/		return 0x8211F63C;
		  /* 8211F63Ch */ case   23:  		/* bl -526508 */
		/* 8211F63Ch case   23:*/		regs.LR = 0x8211F640; return 0x8209ED90;
		/* 8211F63Ch case   23:*/		return 0x8211F640;
		  /* 8211F640h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 8211F640h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211F640h case   24:*/		return 0x8211F644;
		  /* 8211F644h */ case   25:  		/* bc 12, CR0_LT, 68 */
		/* 8211F644h case   25:*/		if ( regs.CR[0].lt ) { return 0x8211F688;  }
		/* 8211F644h case   25:*/		return 0x8211F648;
		  /* 8211F648h */ case   26:  		/* lwz R10, <#[R1 + 84]> */
		/* 8211F648h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8211F648h case   26:*/		return 0x8211F64C;
		  /* 8211F64Ch */ case   27:  		/* lwz R11, <#[R1 + 100]> */
		/* 8211F64Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8211F64Ch case   27:*/		return 0x8211F650;
		  /* 8211F650h */ case   28:  		/* cmplw CR6, R10, R11 */
		/* 8211F650h case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8211F650h case   28:*/		return 0x8211F654;
		  /* 8211F654h */ case   29:  		/* bc 12, CR6_EQ, 156 */
		/* 8211F654h case   29:*/		if ( regs.CR[6].eq ) { return 0x8211F6F0;  }
		/* 8211F654h case   29:*/		return 0x8211F658;
		  /* 8211F658h */ case   30:  		/* xor R9, R11, R10 */
		/* 8211F658h case   30:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8211F658h case   30:*/		return 0x8211F65C;
		  /* 8211F65Ch */ case   31:  		/* rlwinm. R9, R9, 0, 0, 15 */
		/* 8211F65Ch case   31:*/		cpu::op::rlwinm<1,0,0,15>(regs,&regs.R9,regs.R9);
		/* 8211F65Ch case   31:*/		return 0x8211F660;
	}
	return 0x8211F660;
} // Block from 8211F5E0h-8211F660h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8211F660h
// Function '?SamplerExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F660);
		  /* 8211F660h */ case    0:  		/* bc 4, CR0_EQ, 96 */
		/* 8211F660h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8211F6C0;  }
		/* 8211F660h case    0:*/		return 0x8211F664;
		  /* 8211F664h */ case    1:  		/* rlwinm. R10, R10, 0, 16, 31 */
		/* 8211F664h case    1:*/		cpu::op::rlwinm<1,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8211F664h case    1:*/		return 0x8211F668;
		  /* 8211F668h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8211F668h case    2:*/		if ( regs.CR[0].eq ) { return 0x8211F674;  }
		/* 8211F668h case    2:*/		return 0x8211F66C;
		  /* 8211F66Ch */ case    3:  		/* rlwinm. R10, R11, 0, 16, 31 */
		/* 8211F66Ch case    3:*/		cpu::op::rlwinm<1,0,16,31>(regs,&regs.R10,regs.R11);
		/* 8211F66Ch case    3:*/		return 0x8211F670;
		  /* 8211F670h */ case    4:  		/* bc 4, CR0_EQ, 80 */
		/* 8211F670h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8211F6C0;  }
		/* 8211F670h case    4:*/		return 0x8211F674;
	}
	return 0x8211F674;
} // Block from 8211F660h-8211F674h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211F674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F674);
		  /* 8211F674h */ case    0:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8211F674h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8211F674h case    0:*/		return 0x8211F678;
		  /* 8211F678h */ case    1:  		/* cntlzw R11, R11 */
		/* 8211F678h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8211F678h case    1:*/		return 0x8211F67C;
		  /* 8211F67Ch */ case    2:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8211F67Ch case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8211F67Ch case    2:*/		return 0x8211F680;
		  /* 8211F680h */ case    3:  		/* addi R25, R11, 1 */
		/* 8211F680h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x1);
		/* 8211F680h case    3:*/		return 0x8211F684;
		  /* 8211F684h */ case    4:  		/* b 108 */
		/* 8211F684h case    4:*/		return 0x8211F6F0;
		/* 8211F684h case    4:*/		return 0x8211F688;
	}
	return 0x8211F688;
} // Block from 8211F674h-8211F688h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8211F688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F688);
		  /* 8211F688h */ case    0:  		/* lwz R10, <#[R30 + 36]> */
		/* 8211F688h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 8211F688h case    0:*/		return 0x8211F68C;
		  /* 8211F68Ch */ case    1:  		/* lwz R11, <#[R31 + 24]> */
		/* 8211F68Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8211F68Ch case    1:*/		return 0x8211F690;
		  /* 8211F690h */ case    2:  		/* lwz R10, <#[R10 + 24]> */
		/* 8211F690h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 8211F690h case    2:*/		return 0x8211F694;
		  /* 8211F694h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8211F694h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8211F694h case    3:*/		return 0x8211F698;
		  /* 8211F698h */ case    4:  		/* lbz R8, <#[R10]> */
		/* 8211F698h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8211F698h case    4:*/		return 0x8211F69C;
		  /* 8211F69Ch */ case    5:  		/* cmpwi CR0, R9, 0 */
		/* 8211F69Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8211F69Ch case    5:*/		return 0x8211F6A0;
		  /* 8211F6A0h */ case    6:  		/* subf R9, R8, R9 */
		/* 8211F6A0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8211F6A0h case    6:*/		return 0x8211F6A4;
		  /* 8211F6A4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8211F6A4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8211F6B8;  }
		/* 8211F6A4h case    7:*/		return 0x8211F6A8;
		  /* 8211F6A8h */ case    8:  		/* addi R11, R11, 1 */
		/* 8211F6A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211F6A8h case    8:*/		return 0x8211F6AC;
		  /* 8211F6ACh */ case    9:  		/* addi R10, R10, 1 */
		/* 8211F6ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211F6ACh case    9:*/		return 0x8211F6B0;
		  /* 8211F6B0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8211F6B0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8211F6B0h case   10:*/		return 0x8211F6B4;
		  /* 8211F6B4h */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8211F6B4h case   11:*/		if ( regs.CR[6].eq ) { return 0x8211F694;  }
		/* 8211F6B4h case   11:*/		return 0x8211F6B8;
	}
	return 0x8211F6B8;
} // Block from 8211F688h-8211F6B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211F6B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F6B8);
		  /* 8211F6B8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8211F6B8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8211F6B8h case    0:*/		return 0x8211F6BC;
		  /* 8211F6BCh */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 8211F6BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8211F6F0;  }
		/* 8211F6BCh case    1:*/		return 0x8211F6C0;
	}
	return 0x8211F6C0;
} // Block from 8211F6B8h-8211F6C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F6C0);
		  /* 8211F6C0h */ case    0:  		/* li R3, -1 */
		/* 8211F6C0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 8211F6C0h case    0:*/		return 0x8211F6C4;
		  /* 8211F6C4h */ case    1:  		/* b 352 */
		/* 8211F6C4h case    1:*/		return 0x8211F824;
		/* 8211F6C4h case    1:*/		return 0x8211F6C8;
	}
	return 0x8211F6C8;
} // Block from 8211F6C0h-8211F6C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F6C8);
		  /* 8211F6C8h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 8211F6C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8211F6C8h case    0:*/		return 0x8211F6CC;
		  /* 8211F6CCh */ case    1:  		/* addi R10, R31, 0 */
		/* 8211F6CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x0);
		/* 8211F6CCh case    1:*/		return 0x8211F6D0;
		  /* 8211F6D0h */ case    2:  		/* addi R11, R11, 0 */
		/* 8211F6D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8211F6D0h case    2:*/		return 0x8211F6D4;
		  /* 8211F6D4h */ case    3:  		/* cntlzw R10, R10 */
		/* 8211F6D4h case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8211F6D4h case    3:*/		return 0x8211F6D8;
		  /* 8211F6D8h */ case    4:  		/* cntlzw R11, R11 */
		/* 8211F6D8h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8211F6D8h case    4:*/		return 0x8211F6DC;
		  /* 8211F6DCh */ case    5:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 8211F6DCh case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 8211F6DCh case    5:*/		return 0x8211F6E0;
		  /* 8211F6E0h */ case    6:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8211F6E0h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8211F6E0h case    6:*/		return 0x8211F6E4;
		  /* 8211F6E4h */ case    7:  		/* cmpw CR6, R10, R11 */
		/* 8211F6E4h case    7:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 8211F6E4h case    7:*/		return 0x8211F6E8;
		  /* 8211F6E8h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 8211F6E8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8211F6F0;  }
		/* 8211F6E8h case    8:*/		return 0x8211F6EC;
		  /* 8211F6ECh */ case    9:  		/* li R25, 2 */
		/* 8211F6ECh case    9:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 8211F6ECh case    9:*/		return 0x8211F6F0;
	}
	return 0x8211F6F0;
} // Block from 8211F6C8h-8211F6F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211F6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F6F0);
		  /* 8211F6F0h */ case    0:  		/* lwz R28, <#[R30 + 44]> */
		/* 8211F6F0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x0000002C) );
		/* 8211F6F0h case    0:*/		return 0x8211F6F4;
		  /* 8211F6F4h */ case    1:  		/* mr R27, R29 */
		/* 8211F6F4h case    1:*/		regs.R27 = regs.R29;
		/* 8211F6F4h case    1:*/		return 0x8211F6F8;
		  /* 8211F6F8h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 8211F6F8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211F6F8h case    2:*/		return 0x8211F6FC;
		  /* 8211F6FCh */ case    3:  		/* bc 12, CR6_EQ, 280 */
		/* 8211F6FCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8211F814;  }
		/* 8211F6FCh case    3:*/		return 0x8211F700;
		  /* 8211F700h */ case    4:  		/* rlwinm R26, R26, 0, 27, 27 */
		/* 8211F700h case    4:*/		cpu::op::rlwinm<0,0,27,27>(regs,&regs.R26,regs.R26);
		/* 8211F700h case    4:*/		return 0x8211F704;
		  /* 8211F704h */ case    5:  		/* lwz R11, <#[R28 + 8]> */
		/* 8211F704h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8211F704h case    5:*/		return 0x8211F708;
		  /* 8211F708h */ case    6:  		/* li R10, 0 */
		/* 8211F708h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211F708h case    6:*/		return 0x8211F70C;
		  /* 8211F70Ch */ case    7:  		/* lwz R28, <#[R28 + 12]> */
		/* 8211F70Ch case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 8211F70Ch case    7:*/		return 0x8211F710;
		  /* 8211F710h */ case    8:  		/* cmplwi CR6, R28, 0 */
		/* 8211F710h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211F710h case    8:*/		return 0x8211F714;
		  /* 8211F714h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 8211F714h case    9:*/		if ( regs.CR[6].eq ) { return 0x8211F730;  }
		/* 8211F714h case    9:*/		return 0x8211F718;
		  /* 8211F718h */ case   10:  		/* lwz R9, <#[R28 + 8]> */
		/* 8211F718h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 8211F718h case   10:*/		return 0x8211F71C;
		  /* 8211F71Ch */ case   11:  		/* lwz R9, <#[R9 + 4]> */
		/* 8211F71Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8211F71Ch case   11:*/		return 0x8211F720;
		  /* 8211F720h */ case   12:  		/* cmpwi CR6, R9, 12 */
		/* 8211F720h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000C);
		/* 8211F720h case   12:*/		return 0x8211F724;
		  /* 8211F724h */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 8211F724h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8211F730;  }
		/* 8211F724h case   13:*/		return 0x8211F728;
		  /* 8211F728h */ case   14:  		/* lwz R28, <#[R28 + 12]> */
		/* 8211F728h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 8211F728h case   14:*/		return 0x8211F72C;
		  /* 8211F72Ch */ case   15:  		/* li R10, 1 */
		/* 8211F72Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8211F72Ch case   15:*/		return 0x8211F730;
	}
	return 0x8211F730;
} // Block from 8211F6F0h-8211F730h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211F730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F730);
		  /* 8211F730h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8211F730h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8211F730h case    0:*/		return 0x8211F734;
		  /* 8211F734h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8211F734h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F748;  }
		/* 8211F734h case    1:*/		return 0x8211F738;
		  /* 8211F738h */ case    2:  		/* lwz R9, <#[R11 + 24]> */
		/* 8211F738h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000018) );
		/* 8211F738h case    2:*/		return 0x8211F73C;
		  /* 8211F73Ch */ case    3:  		/* lwz R9, <#[R9 + 44]> */
		/* 8211F73Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000002C) );
		/* 8211F73Ch case    3:*/		return 0x8211F740;
		  /* 8211F740h */ case    4:  		/* rlwinm. R9, R9, 0, 25, 25 */
		/* 8211F740h case    4:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R9,regs.R9);
		/* 8211F740h case    4:*/		return 0x8211F744;
		  /* 8211F744h */ case    5:  		/* bc 12, CR0_EQ, 200 */
		/* 8211F744h case    5:*/		if ( regs.CR[0].eq ) { return 0x8211F80C;  }
		/* 8211F744h case    5:*/		return 0x8211F748;
	}
	return 0x8211F748;
} // Block from 8211F730h-8211F748h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211F748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F748);
		  /* 8211F748h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8211F748h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211F748h case    0:*/		return 0x8211F74C;
		  /* 8211F74Ch */ case    1:  		/* bc 12, CR6_EQ, 184 */
		/* 8211F74Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F804;  }
		/* 8211F74Ch case    1:*/		return 0x8211F750;
		  /* 8211F750h */ case    2:  		/* lwz R29, <#[R11 + 24]> */
		/* 8211F750h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000018) );
		/* 8211F750h case    2:*/		return 0x8211F754;
		  /* 8211F754h */ case    3:  		/* lwz R11, <#[R27 + 8]> */
		/* 8211F754h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8211F754h case    3:*/		return 0x8211F758;
		  /* 8211F758h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8211F758h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211F758h case    4:*/		return 0x8211F75C;
		  /* 8211F75Ch */ case    5:  		/* lwz R30, <#[R29 + 48]> */
		/* 8211F75Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000030) );
		/* 8211F75Ch case    5:*/		return 0x8211F760;
		  /* 8211F760h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8211F760h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211F76C;  }
		/* 8211F760h case    6:*/		return 0x8211F764;
		  /* 8211F764h */ case    7:  		/* lwz R31, <#[R11 + 16]> */
		/* 8211F764h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 8211F764h case    7:*/		return 0x8211F768;
		  /* 8211F768h */ case    8:  		/* b 8 */
		/* 8211F768h case    8:*/		return 0x8211F770;
		/* 8211F768h case    8:*/		return 0x8211F76C;
	}
	return 0x8211F76C;
} // Block from 8211F748h-8211F76Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211F76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F76C);
		  /* 8211F76Ch */ case    0:  		/* li R31, 0 */
		/* 8211F76Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211F76Ch case    0:*/		return 0x8211F770;
	}
	return 0x8211F770;
} // Block from 8211F76Ch-8211F770h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F770);
		  /* 8211F770h */ case    0:  		/* lwz R11, <#[R29 + 44]> */
		/* 8211F770h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 8211F770h case    0:*/		return 0x8211F774;
		  /* 8211F774h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 8211F774h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 8211F774h case    1:*/		return 0x8211F778;
		  /* 8211F778h */ case    2:  		/* bc 12, CR0_EQ, 52 */
		/* 8211F778h case    2:*/		if ( regs.CR[0].eq ) { return 0x8211F7AC;  }
		/* 8211F778h case    2:*/		return 0x8211F77C;
		  /* 8211F77Ch */ case    3:  		/* li R6, 0 */
		/* 8211F77Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211F77Ch case    3:*/		return 0x8211F780;
		  /* 8211F780h */ case    4:  		/* mr R5, R31 */
		/* 8211F780h case    4:*/		regs.R5 = regs.R31;
		/* 8211F780h case    4:*/		return 0x8211F784;
		  /* 8211F784h */ case    5:  		/* mr R4, R30 */
		/* 8211F784h case    5:*/		regs.R4 = regs.R30;
		/* 8211F784h case    5:*/		return 0x8211F788;
		  /* 8211F788h */ case    6:  		/* mr R3, R24 */
		/* 8211F788h case    6:*/		regs.R3 = regs.R24;
		/* 8211F788h case    6:*/		return 0x8211F78C;
		  /* 8211F78Ch */ case    7:  		/* bl -9284 */
		/* 8211F78Ch case    7:*/		regs.LR = 0x8211F790; return 0x8211D348;
		/* 8211F78Ch case    7:*/		return 0x8211F790;
		  /* 8211F790h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8211F790h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211F790h case    8:*/		return 0x8211F794;
		  /* 8211F794h */ case    9:  		/* bc 12, CR0_EQ, -212 */
		/* 8211F794h case    9:*/		if ( regs.CR[0].eq ) { return 0x8211F6C0;  }
		/* 8211F794h case    9:*/		return 0x8211F798;
		  /* 8211F798h */ case   10:  		/* mr R5, R31 */
		/* 8211F798h case   10:*/		regs.R5 = regs.R31;
		/* 8211F798h case   10:*/		return 0x8211F79C;
		  /* 8211F79Ch */ case   11:  		/* mr R4, R30 */
		/* 8211F79Ch case   11:*/		regs.R4 = regs.R30;
		/* 8211F79Ch case   11:*/		return 0x8211F7A0;
	}
	return 0x8211F7A0;
} // Block from 8211F770h-8211F7A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211F7A0h
// Function '?StateblockExpr@CParse@D3DXShader@@IAAPAVCNode@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F7A0);
		  /* 8211F7A0h */ case    0:  		/* mr R3, R24 */
		/* 8211F7A0h case    0:*/		regs.R3 = regs.R24;
		/* 8211F7A0h case    0:*/		return 0x8211F7A4;
		  /* 8211F7A4h */ case    1:  		/* bl -10404 */
		/* 8211F7A4h case    1:*/		regs.LR = 0x8211F7A8; return 0x8211CF00;
		/* 8211F7A4h case    1:*/		return 0x8211F7A8;
		  /* 8211F7A8h */ case    2:  		/* add R25, R3, R25 */
		/* 8211F7A8h case    2:*/		cpu::op::add<0>(regs,&regs.R25,regs.R3,regs.R25);
		/* 8211F7A8h case    2:*/		return 0x8211F7AC;
	}
	return 0x8211F7AC;
} // Block from 8211F7A0h-8211F7ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211F7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F7AC);
		  /* 8211F7ACh */ case    0:  		/* lwz R11, <#[R29 + 44]> */
		/* 8211F7ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 8211F7ACh case    0:*/		return 0x8211F7B0;
		  /* 8211F7B0h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8211F7B0h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8211F7B0h case    1:*/		return 0x8211F7B4;
		  /* 8211F7B4h */ case    2:  		/* bc 12, CR0_EQ, 72 */
		/* 8211F7B4h case    2:*/		if ( regs.CR[0].eq ) { return 0x8211F7FC;  }
		/* 8211F7B4h case    2:*/		return 0x8211F7B8;
		  /* 8211F7B8h */ case    3:  		/* mr R4, R31 */
		/* 8211F7B8h case    3:*/		regs.R4 = regs.R31;
		/* 8211F7B8h case    3:*/		return 0x8211F7BC;
		  /* 8211F7BCh */ case    4:  		/* mr R3, R24 */
		/* 8211F7BCh case    4:*/		regs.R3 = regs.R24;
		/* 8211F7BCh case    4:*/		return 0x8211F7C0;
		  /* 8211F7C0h */ case    5:  		/* bl -21904 */
		/* 8211F7C0h case    5:*/		regs.LR = 0x8211F7C4; return 0x8211A230;
		/* 8211F7C0h case    5:*/		return 0x8211F7C4;
		  /* 8211F7C4h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8211F7C4h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211F7C4h case    6:*/		return 0x8211F7C8;
		  /* 8211F7C8h */ case    7:  		/* bc 4, CR0_EQ, -264 */
		/* 8211F7C8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8211F6C0;  }
		/* 8211F7C8h case    7:*/		return 0x8211F7CC;
		  /* 8211F7CCh */ case    8:  		/* li R6, 0 */
		/* 8211F7CCh case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211F7CCh case    8:*/		return 0x8211F7D0;
		  /* 8211F7D0h */ case    9:  		/* mr R5, R30 */
		/* 8211F7D0h case    9:*/		regs.R5 = regs.R30;
		/* 8211F7D0h case    9:*/		return 0x8211F7D4;
		  /* 8211F7D4h */ case   10:  		/* mr R4, R31 */
		/* 8211F7D4h case   10:*/		regs.R4 = regs.R31;
		/* 8211F7D4h case   10:*/		return 0x8211F7D8;
		  /* 8211F7D8h */ case   11:  		/* mr R3, R24 */
		/* 8211F7D8h case   11:*/		regs.R3 = regs.R24;
		/* 8211F7D8h case   11:*/		return 0x8211F7DC;
		  /* 8211F7DCh */ case   12:  		/* bl -9364 */
		/* 8211F7DCh case   12:*/		regs.LR = 0x8211F7E0; return 0x8211D348;
		/* 8211F7DCh case   12:*/		return 0x8211F7E0;
		  /* 8211F7E0h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 8211F7E0h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211F7E0h case   13:*/		return 0x8211F7E4;
		  /* 8211F7E4h */ case   14:  		/* bc 12, CR0_EQ, -292 */
		/* 8211F7E4h case   14:*/		if ( regs.CR[0].eq ) { return 0x8211F6C0;  }
		/* 8211F7E4h case   14:*/		return 0x8211F7E8;
		  /* 8211F7E8h */ case   15:  		/* mr R5, R30 */
		/* 8211F7E8h case   15:*/		regs.R5 = regs.R30;
		/* 8211F7E8h case   15:*/		return 0x8211F7EC;
		  /* 8211F7ECh */ case   16:  		/* mr R4, R31 */
		/* 8211F7ECh case   16:*/		regs.R4 = regs.R31;
		/* 8211F7ECh case   16:*/		return 0x8211F7F0;
		  /* 8211F7F0h */ case   17:  		/* mr R3, R24 */
		/* 8211F7F0h case   17:*/		regs.R3 = regs.R24;
		/* 8211F7F0h case   17:*/		return 0x8211F7F4;
		  /* 8211F7F4h */ case   18:  		/* bl -10484 */
		/* 8211F7F4h case   18:*/		regs.LR = 0x8211F7F8; return 0x8211CF00;
		/* 8211F7F4h case   18:*/		return 0x8211F7F8;
		  /* 8211F7F8h */ case   19:  		/* add R25, R3, R25 */
		/* 8211F7F8h case   19:*/		cpu::op::add<0>(regs,&regs.R25,regs.R3,regs.R25);
		/* 8211F7F8h case   19:*/		return 0x8211F7FC;
	}
	return 0x8211F7FC;
} // Block from 8211F7ACh-8211F7FCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211F7FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F7FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F7FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F7FC);
		  /* 8211F7FCh */ case    0:  		/* lwz R27, <#[R27 + 12]> */
		/* 8211F7FCh case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x0000000C) );
		/* 8211F7FCh case    0:*/		return 0x8211F800;
		  /* 8211F800h */ case    1:  		/* b 12 */
		/* 8211F800h case    1:*/		return 0x8211F80C;
		/* 8211F800h case    1:*/		return 0x8211F804;
	}
	return 0x8211F804;
} // Block from 8211F7FCh-8211F804h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F804);
		  /* 8211F804h */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 8211F804h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8211F804h case    0:*/		return 0x8211F808;
		  /* 8211F808h */ case    1:  		/* bc 12, CR6_EQ, -328 */
		/* 8211F808h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211F6C0;  }
		/* 8211F808h case    1:*/		return 0x8211F80C;
	}
	return 0x8211F80C;
} // Block from 8211F804h-8211F80Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F80C);
		  /* 8211F80Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8211F80Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211F80Ch case    0:*/		return 0x8211F810;
		  /* 8211F810h */ case    1:  		/* bc 4, CR6_EQ, -268 */
		/* 8211F810h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211F704;  }
		/* 8211F810h case    1:*/		return 0x8211F814;
	}
	return 0x8211F814;
} // Block from 8211F80Ch-8211F814h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F814);
		  /* 8211F814h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8211F814h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211F814h case    0:*/		return 0x8211F818;
		  /* 8211F818h */ case    1:  		/* li R3, -1 */
		/* 8211F818h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 8211F818h case    1:*/		return 0x8211F81C;
		  /* 8211F81Ch */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8211F81Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211F824;  }
		/* 8211F81Ch case    2:*/		return 0x8211F820;
		  /* 8211F820h */ case    3:  		/* mr R3, R25 */
		/* 8211F820h case    3:*/		regs.R3 = regs.R25;
		/* 8211F820h case    3:*/		return 0x8211F824;
	}
	return 0x8211F824;
} // Block from 8211F814h-8211F824h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8211F824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F824);
		  /* 8211F824h */ case    0:  		/* addi R1, R1, 192 */
		/* 8211F824h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8211F824h case    0:*/		return 0x8211F828;
		  /* 8211F828h */ case    1:  		/* b -583056 */
		/* 8211F828h case    1:*/		return 0x82091298;
		/* 8211F828h case    1:*/		return 0x8211F82C;
		  /* 8211F82Ch */ case    2:  		/* nop */
		/* 8211F82Ch case    2:*/		cpu::op::nop();
		/* 8211F82Ch case    2:*/		return 0x8211F830;
	}
	return 0x8211F830;
} // Block from 8211F824h-8211F830h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211F830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F830);
		  /* 8211F830h */ case    0:  		/* mfspr R12, LR */
		/* 8211F830h case    0:*/		regs.R12 = regs.LR;
		/* 8211F830h case    0:*/		return 0x8211F834;
		  /* 8211F834h */ case    1:  		/* bl -583128 */
		/* 8211F834h case    1:*/		regs.LR = 0x8211F838; return 0x8209125C;
		/* 8211F834h case    1:*/		return 0x8211F838;
		  /* 8211F838h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8211F838h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8211F838h case    2:*/		return 0x8211F83C;
		  /* 8211F83Ch */ case    3:  		/* mr R29, R3 */
		/* 8211F83Ch case    3:*/		regs.R29 = regs.R3;
		/* 8211F83Ch case    3:*/		return 0x8211F840;
		  /* 8211F840h */ case    4:  		/* li R3, 20 */
		/* 8211F840h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211F840h case    4:*/		return 0x8211F844;
		  /* 8211F844h */ case    5:  		/* mr R31, R4 */
		/* 8211F844h case    5:*/		regs.R31 = regs.R4;
		/* 8211F844h case    5:*/		return 0x8211F848;
		  /* 8211F848h */ case    6:  		/* bl -353824 */
		/* 8211F848h case    6:*/		regs.LR = 0x8211F84C; return 0x820C9228;
		/* 8211F848h case    6:*/		return 0x8211F84C;
		  /* 8211F84Ch */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8211F84Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211F84Ch case    7:*/		return 0x8211F850;
		  /* 8211F850h */ case    8:  		/* bc 12, CR0_EQ, 32 */
		/* 8211F850h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211F870;  }
		/* 8211F850h case    8:*/		return 0x8211F854;
		  /* 8211F854h */ case    9:  		/* lis R11, -32253 */
		/* 8211F854h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211F854h case    9:*/		return 0x8211F858;
		  /* 8211F858h */ case   10:  		/* lwz R5, <#[R29 + 24]> */
		/* 8211F858h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000018) );
		/* 8211F858h case   10:*/		return 0x8211F85C;
		  /* 8211F85Ch */ case   11:  		/* li R4, 0 */
		/* 8211F85Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211F85Ch case   11:*/		return 0x8211F860;
		  /* 8211F860h */ case   12:  		/* addi R6, R11, 9232 */
		/* 8211F860h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2410);
		/* 8211F860h case   12:*/		return 0x8211F864;
		  /* 8211F864h */ case   13:  		/* bl -353396 */
		/* 8211F864h case   13:*/		regs.LR = 0x8211F868; return 0x820C93F0;
		/* 8211F864h case   13:*/		return 0x8211F868;
		  /* 8211F868h */ case   14:  		/* mr R30, R3 */
		/* 8211F868h case   14:*/		regs.R30 = regs.R3;
		/* 8211F868h case   14:*/		return 0x8211F86C;
		  /* 8211F86Ch */ case   15:  		/* b 8 */
		/* 8211F86Ch case   15:*/		return 0x8211F874;
		/* 8211F86Ch case   15:*/		return 0x8211F870;
	}
	return 0x8211F870;
} // Block from 8211F830h-8211F870h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211F870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F870);
		  /* 8211F870h */ case    0:  		/* li R30, 0 */
		/* 8211F870h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8211F870h case    0:*/		return 0x8211F874;
	}
	return 0x8211F874;
} // Block from 8211F870h-8211F874h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F874);
		  /* 8211F874h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8211F874h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8211F874h case    0:*/		return 0x8211F878;
		  /* 8211F878h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8211F878h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211F894;  }
		/* 8211F878h case    1:*/		return 0x8211F87C;
		  /* 8211F87Ch */ case    2:  		/* mr R3, R29 */
		/* 8211F87Ch case    2:*/		regs.R3 = regs.R29;
		/* 8211F87Ch case    2:*/		return 0x8211F880;
		  /* 8211F880h */ case    3:  		/* li R4, 0 */
		/* 8211F880h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211F880h case    3:*/		return 0x8211F884;
		  /* 8211F884h */ case    4:  		/* bl -24172 */
		/* 8211F884h case    4:*/		regs.LR = 0x8211F888; return 0x82119A18;
		/* 8211F884h case    4:*/		return 0x8211F888;
		  /* 8211F888h */ case    5:  		/* lis R3, -32761 */
		/* 8211F888h case    5:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8211F888h case    5:*/		return 0x8211F88C;
		  /* 8211F88Ch */ case    6:  		/* ori R3, R3, 14 */
		/* 8211F88Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8211F88Ch case    6:*/		return 0x8211F890;
		  /* 8211F890h */ case    7:  		/* b 76 */
		/* 8211F890h case    7:*/		return 0x8211F8DC;
		/* 8211F890h case    7:*/		return 0x8211F894;
	}
	return 0x8211F894;
} // Block from 8211F874h-8211F894h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211F894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F894);
		  /* 8211F894h */ case    0:  		/* stw R30, <#[R29 + 24]> */
		/* 8211F894h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000018) );
		/* 8211F894h case    0:*/		return 0x8211F898;
		  /* 8211F898h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8211F898h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211F898h case    1:*/		return 0x8211F89C;
		  /* 8211F89Ch */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 8211F89Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8211F8D8;  }
		/* 8211F89Ch case    2:*/		return 0x8211F8A0;
		  /* 8211F8A0h */ case    3:  		/* mr R3, R31 */
		/* 8211F8A0h case    3:*/		regs.R3 = regs.R31;
		/* 8211F8A0h case    3:*/		return 0x8211F8A4;
		  /* 8211F8A4h */ case    4:  		/* bl -353596 */
		/* 8211F8A4h case    4:*/		regs.LR = 0x8211F8A8; return 0x820C9368;
		/* 8211F8A4h case    4:*/		return 0x8211F8A8;
		  /* 8211F8A8h */ case    5:  		/* or. R31, R3, R3 */
		/* 8211F8A8h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8211F8A8h case    5:*/		return 0x8211F8AC;
		  /* 8211F8ACh */ case    6:  		/* stw R31, <#[R30 + 8]> */
		/* 8211F8ACh case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 8211F8ACh case    6:*/		return 0x8211F8B0;
		  /* 8211F8B0h */ case    7:  		/* mr R3, R29 */
		/* 8211F8B0h case    7:*/		regs.R3 = regs.R29;
		/* 8211F8B0h case    7:*/		return 0x8211F8B4;
		  /* 8211F8B4h */ case    8:  		/* bc 12, CR0_EQ, -52 */
		/* 8211F8B4h case    8:*/		if ( regs.CR[0].eq ) { return 0x8211F880;  }
		/* 8211F8B4h case    8:*/		return 0x8211F8B8;
		  /* 8211F8B8h */ case    9:  		/* mr R4, R31 */
		/* 8211F8B8h case    9:*/		regs.R4 = regs.R31;
		/* 8211F8B8h case    9:*/		return 0x8211F8BC;
		  /* 8211F8BCh */ case   10:  		/* lwz R5, <#[R31 + 24]> */
		/* 8211F8BCh case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8211F8BCh case   10:*/		return 0x8211F8C0;
		  /* 8211F8C0h */ case   11:  		/* bl -10320 */
		/* 8211F8C0h case   11:*/		regs.LR = 0x8211F8C4; return 0x8211D070;
		/* 8211F8C0h case   11:*/		return 0x8211F8C4;
		  /* 8211F8C4h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8211F8C4h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211F8C4h case   12:*/		return 0x8211F8C8;
		  /* 8211F8C8h */ case   13:  		/* bc 12, CR0_LT, 20 */
		/* 8211F8C8h case   13:*/		if ( regs.CR[0].lt ) { return 0x8211F8DC;  }
		/* 8211F8C8h case   13:*/		return 0x8211F8CC;
		  /* 8211F8CCh */ case   14:  		/* lwz R11, <#[R31 + 16]> */
		/* 8211F8CCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211F8CCh case   14:*/		return 0x8211F8D0;
		  /* 8211F8D0h */ case   15:  		/* rlwinm R11, R11, 0, 23, 19 */
		/* 8211F8D0h case   15:*/		cpu::op::rlwinm<0,0,23,19>(regs,&regs.R11,regs.R11);
		/* 8211F8D0h case   15:*/		return 0x8211F8D4;
		  /* 8211F8D4h */ case   16:  		/* stw R11, <#[R31 + 16]> */
		/* 8211F8D4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8211F8D4h case   16:*/		return 0x8211F8D8;
	}
	return 0x8211F8D8;
} // Block from 8211F894h-8211F8D8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211F8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F8D8);
		  /* 8211F8D8h */ case    0:  		/* li R3, 0 */
		/* 8211F8D8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211F8D8h case    0:*/		return 0x8211F8DC;
	}
	return 0x8211F8DC;
} // Block from 8211F8D8h-8211F8DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F8DC);
		  /* 8211F8DCh */ case    0:  		/* addi R1, R1, 112 */
		/* 8211F8DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8211F8DCh case    0:*/		return 0x8211F8E0;
	}
	return 0x8211F8E0;
} // Block from 8211F8DCh-8211F8E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F8E0h
// Function '?Eval@CParse@D3DXShader@@IAAJPAVCNode@2@PAU_D3DVALUE@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F8E0);
		  /* 8211F8E0h */ case    0:  		/* b -583220 */
		/* 8211F8E0h case    0:*/		return 0x820912AC;
		/* 8211F8E0h case    0:*/		return 0x8211F8E4;
		  /* 8211F8E4h */ case    1:  		/* nop */
		/* 8211F8E4h case    1:*/		cpu::op::nop();
		/* 8211F8E4h case    1:*/		return 0x8211F8E8;
	}
	return 0x8211F8E8;
} // Block from 8211F8E0h-8211F8E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211F8E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F8E8);
		  /* 8211F8E8h */ case    0:  		/* mfspr R12, LR */
		/* 8211F8E8h case    0:*/		regs.R12 = regs.LR;
		/* 8211F8E8h case    0:*/		return 0x8211F8EC;
		  /* 8211F8ECh */ case    1:  		/* bl -583336 */
		/* 8211F8ECh case    1:*/		regs.LR = 0x8211F8F0; return 0x82091244;
		/* 8211F8ECh case    1:*/		return 0x8211F8F0;
		  /* 8211F8F0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8211F8F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8211F8F0h case    2:*/		return 0x8211F8F4;
		  /* 8211F8F4h */ case    3:  		/* mr R23, R3 */
		/* 8211F8F4h case    3:*/		regs.R23 = regs.R3;
		/* 8211F8F4h case    3:*/		return 0x8211F8F8;
		  /* 8211F8F8h */ case    4:  		/* mr R27, R4 */
		/* 8211F8F8h case    4:*/		regs.R27 = regs.R4;
		/* 8211F8F8h case    4:*/		return 0x8211F8FC;
		  /* 8211F8FCh */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 8211F8FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8211F8FCh case    5:*/		return 0x8211F900;
		  /* 8211F900h */ case    6:  		/* bc 12, CR6_EQ, 380 */
		/* 8211F900h case    6:*/		if ( regs.CR[6].eq ) { return 0x8211FA7C;  }
		/* 8211F900h case    6:*/		return 0x8211F904;
		  /* 8211F904h */ case    7:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211F904h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211F904h case    7:*/		return 0x8211F908;
		  /* 8211F908h */ case    8:  		/* cmpwi CR6, R11, 14 */
		/* 8211F908h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211F908h case    8:*/		return 0x8211F90C;
		  /* 8211F90Ch */ case    9:  		/* bc 4, CR6_EQ, 368 */
		/* 8211F90Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211FA7C;  }
		/* 8211F90Ch case    9:*/		return 0x8211F910;
		  /* 8211F910h */ case   10:  		/* lwz R11, <#[R4 + 24]> */
		/* 8211F910h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000018) );
		/* 8211F910h case   10:*/		return 0x8211F914;
		  /* 8211F914h */ case   11:  		/* lis R4, 9345 */
		/* 8211F914h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211F914h case   11:*/		return 0x8211F918;
		  /* 8211F918h */ case   12:  		/* lwz R10, <#[R27 + 20]> */
		/* 8211F918h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 8211F918h case   12:*/		return 0x8211F91C;
		  /* 8211F91Ch */ case   13:  		/* mullw R25, R11, R10 */
		/* 8211F91Ch case   13:*/		cpu::op::mullw<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 8211F91Ch case   13:*/		return 0x8211F920;
		  /* 8211F920h */ case   14:  		/* rlwinm R3, R25, 4, 0, 27 */
		/* 8211F920h case   14:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R3,regs.R25);
		/* 8211F920h case   14:*/		return 0x8211F924;
		  /* 8211F924h */ case   15:  		/* bl -620324 */
		/* 8211F924h case   15:*/		regs.LR = 0x8211F928; return 0x82088200;
		/* 8211F924h case   15:*/		return 0x8211F928;
		  /* 8211F928h */ case   16:  		/* or. R24, R3, R3 */
		/* 8211F928h case   16:*/		cpu::op::or<1>(regs,&regs.R24,regs.R3,regs.R3);
		/* 8211F928h case   16:*/		return 0x8211F92C;
		  /* 8211F92Ch */ case   17:  		/* bc 12, CR0_EQ, 324 */
		/* 8211F92Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x8211FA70;  }
		/* 8211F92Ch case   17:*/		return 0x8211F930;
		  /* 8211F930h */ case   18:  		/* mr R5, R24 */
		/* 8211F930h case   18:*/		regs.R5 = regs.R24;
		/* 8211F930h case   18:*/		return 0x8211F934;
		  /* 8211F934h */ case   19:  		/* mr R4, R27 */
		/* 8211F934h case   19:*/		regs.R4 = regs.R27;
		/* 8211F934h case   19:*/		return 0x8211F938;
		  /* 8211F938h */ case   20:  		/* mr R3, R23 */
		/* 8211F938h case   20:*/		regs.R3 = regs.R23;
		/* 8211F938h case   20:*/		return 0x8211F93C;
		  /* 8211F93Ch */ case   21:  		/* bl -3012 */
		/* 8211F93Ch case   21:*/		regs.LR = 0x8211F940; return 0x8211ED78;
		/* 8211F93Ch case   21:*/		return 0x8211F940;
		  /* 8211F940h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 8211F940h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211F940h case   22:*/		return 0x8211F944;
		  /* 8211F944h */ case   23:  		/* bc 12, CR0_LT, 300 */
		/* 8211F944h case   23:*/		if ( regs.CR[0].lt ) { return 0x8211FA70;  }
		/* 8211F944h case   23:*/		return 0x8211F948;
		  /* 8211F948h */ case   24:  		/* li R3, 88 */
		/* 8211F948h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x58);
		/* 8211F948h case   24:*/		return 0x8211F94C;
		  /* 8211F94Ch */ case   25:  		/* bl -354084 */
		/* 8211F94Ch case   25:*/		regs.LR = 0x8211F950; return 0x820C9228;
		/* 8211F94Ch case   25:*/		return 0x8211F950;
		  /* 8211F950h */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 8211F950h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211F950h case   26:*/		return 0x8211F954;
		  /* 8211F954h */ case   27:  		/* bc 12, CR0_EQ, 40 */
		/* 8211F954h case   27:*/		if ( regs.CR[0].eq ) { return 0x8211F97C;  }
		/* 8211F954h case   27:*/		return 0x8211F958;
		  /* 8211F958h */ case   28:  		/* addi R9, R27, 48 */
		/* 8211F958h case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0x30);
		/* 8211F958h case   28:*/		return 0x8211F95C;
		  /* 8211F95Ch */ case   29:  		/* li R8, 1 */
		/* 8211F95Ch case   29:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8211F95Ch case   29:*/		return 0x8211F960;
		  /* 8211F960h */ case   30:  		/* li R7, 0 */
		/* 8211F960h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8211F960h case   30:*/		return 0x8211F964;
		  /* 8211F964h */ case   31:  		/* li R6, 0 */
		/* 8211F964h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8211F964h case   31:*/		return 0x8211F968;
		  /* 8211F968h */ case   32:  		/* li R5, 0 */
		/* 8211F968h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211F968h case   32:*/		return 0x8211F96C;
		  /* 8211F96Ch */ case   33:  		/* li R4, 0 */
		/* 8211F96Ch case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211F96Ch case   33:*/		return 0x8211F970;
		  /* 8211F970h */ case   34:  		/* bl -342504 */
		/* 8211F970h case   34:*/		regs.LR = 0x8211F974; return 0x820CBF88;
		/* 8211F970h case   34:*/		return 0x8211F974;
		  /* 8211F974h */ case   35:  		/* mr R28, R3 */
		/* 8211F974h case   35:*/		regs.R28 = regs.R3;
		/* 8211F974h case   35:*/		return 0x8211F978;
		  /* 8211F978h */ case   36:  		/* b 8 */
		/* 8211F978h case   36:*/		return 0x8211F980;
		/* 8211F978h case   36:*/		return 0x8211F97C;
	}
	return 0x8211F97C;
} // Block from 8211F8E8h-8211F97Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 8211F97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F97C);
		  /* 8211F97Ch */ case    0:  		/* li R28, 0 */
		/* 8211F97Ch case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8211F97Ch case    0:*/		return 0x8211F980;
	}
	return 0x8211F980;
} // Block from 8211F97Ch-8211F980h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F980);
		  /* 8211F980h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8211F980h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8211F980h case    0:*/		return 0x8211F984;
		  /* 8211F984h */ case    1:  		/* bc 12, CR6_EQ, 236 */
		/* 8211F984h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211FA70;  }
		/* 8211F984h case    1:*/		return 0x8211F988;
		  /* 8211F988h */ case    2:  		/* lwz R11, <#[R27 + 16]> */
		/* 8211F988h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8211F988h case    2:*/		return 0x8211F98C;
		  /* 8211F98Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8211F98Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211F98Ch case    3:*/		return 0x8211F990;
		  /* 8211F990h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8211F990h case    4:*/		if ( regs.CR[6].eq ) { return 0x8211F9B4;  }
		/* 8211F990h case    4:*/		return 0x8211F994;
		  /* 8211F994h */ case    5:  		/* rlwinm R3, R11, 0, 0, 31 */
		/* 8211F994h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R11);
		/* 8211F994h case    5:*/		return 0x8211F998;
		  /* 8211F998h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 8211F998h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8211F998h case    6:*/		return 0x8211F99C;
		  /* 8211F99Ch */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 8211F99Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8211F99Ch case    7:*/		return 0x8211F9A0;
		  /* 8211F9A0h */ case    8:  		/* mtspr CTR, R11 */
		/* 8211F9A0h case    8:*/		regs.CTR = regs.R11;
		/* 8211F9A0h case    8:*/		return 0x8211F9A4;
		  /* 8211F9A4h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8211F9A4h case    9:*/		if ( 1 ) { regs.LR = 0x8211F9A8; return (uint32)regs.CTR; }
		/* 8211F9A4h case    9:*/		return 0x8211F9A8;
		  /* 8211F9A8h */ case   10:  		/* stw R3, <#[R28 + 16]> */
		/* 8211F9A8h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 8211F9A8h case   10:*/		return 0x8211F9AC;
		  /* 8211F9ACh */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8211F9ACh case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211F9ACh case   11:*/		return 0x8211F9B0;
		  /* 8211F9B0h */ case   12:  		/* bc 12, CR0_EQ, 192 */
		/* 8211F9B0h case   12:*/		if ( regs.CR[0].eq ) { return 0x8211FA70;  }
		/* 8211F9B0h case   12:*/		return 0x8211F9B4;
	}
	return 0x8211F9B4;
} // Block from 8211F980h-8211F9B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8211F9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F9B4);
		  /* 8211F9B4h */ case    0:  		/* addi R31, R28, 32 */
		/* 8211F9B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R28,0x20);
		/* 8211F9B4h case    0:*/		return 0x8211F9B8;
		  /* 8211F9B8h */ case    1:  		/* li R29, 0 */
		/* 8211F9B8h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8211F9B8h case    1:*/		return 0x8211F9BC;
		  /* 8211F9BCh */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 8211F9BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8211F9BCh case    2:*/		return 0x8211F9C0;
		  /* 8211F9C0h */ case    3:  		/* bc 12, CR6_EQ, 144 */
		/* 8211F9C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211FA50;  }
		/* 8211F9C0h case    3:*/		return 0x8211F9C4;
		  /* 8211F9C4h */ case    4:  		/* lis R11, -32253 */
		/* 8211F9C4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211F9C4h case    4:*/		return 0x8211F9C8;
		  /* 8211F9C8h */ case    5:  		/* mr R30, R24 */
		/* 8211F9C8h case    5:*/		regs.R30 = regs.R24;
		/* 8211F9C8h case    5:*/		return 0x8211F9CC;
		  /* 8211F9CCh */ case    6:  		/* addi R26, R11, 9184 */
		/* 8211F9CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x23E0);
		/* 8211F9CCh case    6:*/		return 0x8211F9D0;
		  /* 8211F9D0h */ case    7:  		/* li R3, 20 */
		/* 8211F9D0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211F9D0h case    7:*/		return 0x8211F9D4;
		  /* 8211F9D4h */ case    8:  		/* bl -354220 */
		/* 8211F9D4h case    8:*/		regs.LR = 0x8211F9D8; return 0x820C9228;
		/* 8211F9D4h case    8:*/		return 0x8211F9D8;
		  /* 8211F9D8h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8211F9D8h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211F9D8h case    9:*/		return 0x8211F9DC;
		  /* 8211F9DCh */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 8211F9DCh case   10:*/		if ( regs.CR[0].eq ) { return 0x8211F9F4;  }
		/* 8211F9DCh case   10:*/		return 0x8211F9E0;
		  /* 8211F9E0h */ case   11:  		/* mr R6, R26 */
		/* 8211F9E0h case   11:*/		regs.R6 = regs.R26;
		/* 8211F9E0h case   11:*/		return 0x8211F9E4;
		  /* 8211F9E4h */ case   12:  		/* li R5, 0 */
		/* 8211F9E4h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8211F9E4h case   12:*/		return 0x8211F9E8;
		  /* 8211F9E8h */ case   13:  		/* li R4, 0 */
		/* 8211F9E8h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8211F9E8h case   13:*/		return 0x8211F9EC;
		  /* 8211F9ECh */ case   14:  		/* bl -353788 */
		/* 8211F9ECh case   14:*/		regs.LR = 0x8211F9F0; return 0x820C93F0;
		/* 8211F9ECh case   14:*/		return 0x8211F9F0;
		  /* 8211F9F0h */ case   15:  		/* b 8 */
		/* 8211F9F0h case   15:*/		return 0x8211F9F8;
		/* 8211F9F0h case   15:*/		return 0x8211F9F4;
	}
	return 0x8211F9F4;
} // Block from 8211F9B4h-8211F9F4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8211F9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F9F4);
		  /* 8211F9F4h */ case    0:  		/* li R3, 0 */
		/* 8211F9F4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211F9F4h case    0:*/		return 0x8211F9F8;
	}
	return 0x8211F9F8;
} // Block from 8211F9F4h-8211F9F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211F9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211F9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211F9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211F9F8);
		  /* 8211F9F8h */ case    0:  		/* stw R3, <#[R31]> */
		/* 8211F9F8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8211F9F8h case    0:*/		return 0x8211F9FC;
		  /* 8211F9FCh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211F9FCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211F9FCh case    1:*/		return 0x8211FA00;
		  /* 8211FA00h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 8211FA00h case    2:*/		if ( regs.CR[6].eq ) { return 0x8211FA70;  }
		/* 8211FA00h case    2:*/		return 0x8211FA04;
		  /* 8211FA04h */ case    3:  		/* li R3, 72 */
		/* 8211FA04h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211FA04h case    3:*/		return 0x8211FA08;
		  /* 8211FA08h */ case    4:  		/* bl -354272 */
		/* 8211FA08h case    4:*/		regs.LR = 0x8211FA0C; return 0x820C9228;
		/* 8211FA08h case    4:*/		return 0x8211FA0C;
		  /* 8211FA0Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8211FA0Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211FA0Ch case    5:*/		return 0x8211FA10;
		  /* 8211FA10h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 8211FA10h case    6:*/		if ( regs.CR[0].eq ) { return 0x8211FA24;  }
		/* 8211FA10h case    6:*/		return 0x8211FA14;
		  /* 8211FA14h */ case    7:  		/* addi R5, R27, 48 */
		/* 8211FA14h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R27,0x30);
		/* 8211FA14h case    7:*/		return 0x8211FA18;
		  /* 8211FA18h */ case    8:  		/* mr R4, R30 */
		/* 8211FA18h case    8:*/		regs.R4 = regs.R30;
		/* 8211FA18h case    8:*/		return 0x8211FA1C;
		  /* 8211FA1Ch */ case    9:  		/* bl -341740 */
		/* 8211FA1Ch case    9:*/		regs.LR = 0x8211FA20; return 0x820CC330;
		/* 8211FA1Ch case    9:*/		return 0x8211FA20;
		  /* 8211FA20h */ case   10:  		/* b 8 */
		/* 8211FA20h case   10:*/		return 0x8211FA28;
		/* 8211FA20h case   10:*/		return 0x8211FA24;
	}
	return 0x8211FA24;
} // Block from 8211F9F8h-8211FA24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8211FA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FA24);
		  /* 8211FA24h */ case    0:  		/* li R3, 0 */
		/* 8211FA24h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211FA24h case    0:*/		return 0x8211FA28;
	}
	return 0x8211FA28;
} // Block from 8211FA24h-8211FA28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211FA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FA28);
		  /* 8211FA28h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8211FA28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211FA28h case    0:*/		return 0x8211FA2C;
		  /* 8211FA2Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8211FA2Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211FA2Ch case    1:*/		return 0x8211FA30;
		  /* 8211FA30h */ case    2:  		/* stw R3, <#[R11 + 8]> */
		/* 8211FA30h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 8211FA30h case    2:*/		return 0x8211FA34;
		  /* 8211FA34h */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 8211FA34h case    3:*/		if ( regs.CR[6].eq ) { return 0x8211FA70;  }
		/* 8211FA34h case    3:*/		return 0x8211FA38;
		  /* 8211FA38h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 8211FA38h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8211FA38h case    4:*/		return 0x8211FA3C;
		  /* 8211FA3Ch */ case    5:  		/* addi R29, R29, 1 */
		/* 8211FA3Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8211FA3Ch case    5:*/		return 0x8211FA40;
		  /* 8211FA40h */ case    6:  		/* addi R30, R30, 16 */
		/* 8211FA40h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x10);
		/* 8211FA40h case    6:*/		return 0x8211FA44;
		  /* 8211FA44h */ case    7:  		/* addi R31, R11, 12 */
		/* 8211FA44h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xC);
		/* 8211FA44h case    7:*/		return 0x8211FA48;
		  /* 8211FA48h */ case    8:  		/* cmplw CR6, R29, R25 */
		/* 8211FA48h case    8:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 8211FA48h case    8:*/		return 0x8211FA4C;
		  /* 8211FA4Ch */ case    9:  		/* bc 12, CR6_LT, -124 */
		/* 8211FA4Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x8211F9D0;  }
		/* 8211FA4Ch case    9:*/		return 0x8211FA50;
	}
	return 0x8211FA50;
} // Block from 8211FA28h-8211FA50h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211FA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FA50);
		  /* 8211FA50h */ case    0:  		/* mr R4, R28 */
		/* 8211FA50h case    0:*/		regs.R4 = regs.R28;
		/* 8211FA50h case    0:*/		return 0x8211FA54;
		  /* 8211FA54h */ case    1:  		/* mr R3, R23 */
		/* 8211FA54h case    1:*/		regs.R3 = regs.R23;
		/* 8211FA54h case    1:*/		return 0x8211FA58;
		  /* 8211FA58h */ case    2:  		/* bl -14912 */
		/* 8211FA58h case    2:*/		regs.LR = 0x8211FA5C; return 0x8211C018;
		/* 8211FA58h case    2:*/		return 0x8211FA5C;
		  /* 8211FA5Ch */ case    3:  		/* lis R4, 9345 */
		/* 8211FA5Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211FA5Ch case    3:*/		return 0x8211FA60;
		  /* 8211FA60h */ case    4:  		/* mr R3, R24 */
		/* 8211FA60h case    4:*/		regs.R3 = regs.R24;
		/* 8211FA60h case    4:*/		return 0x8211FA64;
		  /* 8211FA64h */ case    5:  		/* bl -620332 */
		/* 8211FA64h case    5:*/		regs.LR = 0x8211FA68; return 0x82088338;
		/* 8211FA64h case    5:*/		return 0x8211FA68;
		  /* 8211FA68h */ case    6:  		/* mr R3, R28 */
		/* 8211FA68h case    6:*/		regs.R3 = regs.R28;
		/* 8211FA68h case    6:*/		return 0x8211FA6C;
		  /* 8211FA6Ch */ case    7:  		/* b 20 */
		/* 8211FA6Ch case    7:*/		return 0x8211FA80;
		/* 8211FA6Ch case    7:*/		return 0x8211FA70;
	}
	return 0x8211FA70;
} // Block from 8211FA50h-8211FA70h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8211FA70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FA70);
		  /* 8211FA70h */ case    0:  		/* lis R4, 9345 */
		/* 8211FA70h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 8211FA70h case    0:*/		return 0x8211FA74;
		  /* 8211FA74h */ case    1:  		/* mr R3, R24 */
		/* 8211FA74h case    1:*/		regs.R3 = regs.R24;
		/* 8211FA74h case    1:*/		return 0x8211FA78;
		  /* 8211FA78h */ case    2:  		/* bl -620352 */
		/* 8211FA78h case    2:*/		regs.LR = 0x8211FA7C; return 0x82088338;
		/* 8211FA78h case    2:*/		return 0x8211FA7C;
	}
	return 0x8211FA7C;
} // Block from 8211FA70h-8211FA7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211FA7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FA7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FA7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FA7C);
		  /* 8211FA7Ch */ case    0:  		/* li R3, 0 */
		/* 8211FA7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211FA7Ch case    0:*/		return 0x8211FA80;
	}
	return 0x8211FA80;
} // Block from 8211FA7Ch-8211FA80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211FA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FA80);
		  /* 8211FA80h */ case    0:  		/* addi R1, R1, 160 */
		/* 8211FA80h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8211FA80h case    0:*/		return 0x8211FA84;
		  /* 8211FA84h */ case    1:  		/* b -583664 */
		/* 8211FA84h case    1:*/		return 0x82091294;
		/* 8211FA84h case    1:*/		return 0x8211FA88;
	}
	return 0x8211FA88;
} // Block from 8211FA80h-8211FA88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211FA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FA88);
		  /* 8211FA88h */ case    0:  		/* mfspr R12, LR */
		/* 8211FA88h case    0:*/		regs.R12 = regs.LR;
		/* 8211FA88h case    0:*/		return 0x8211FA8C;
		  /* 8211FA8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211FA8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211FA8Ch case    1:*/		return 0x8211FA90;
		  /* 8211FA90h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8211FA90h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211FA90h case    2:*/		return 0x8211FA94;
		  /* 8211FA94h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8211FA94h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211FA94h case    3:*/		return 0x8211FA98;
		  /* 8211FA98h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8211FA98h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8211FA98h case    4:*/		return 0x8211FA9C;
		  /* 8211FA9Ch */ case    5:  		/* mr R31, R3 */
		/* 8211FA9Ch case    5:*/		regs.R31 = regs.R3;
		/* 8211FA9Ch case    5:*/		return 0x8211FAA0;
		  /* 8211FAA0h */ case    6:  		/* mr R30, R5 */
		/* 8211FAA0h case    6:*/		regs.R30 = regs.R5;
		/* 8211FAA0h case    6:*/		return 0x8211FAA4;
		  /* 8211FAA4h */ case    7:  		/* bl -444 */
		/* 8211FAA4h case    7:*/		regs.LR = 0x8211FAA8; return 0x8211F8E8;
		/* 8211FAA4h case    7:*/		return 0x8211FAA8;
		  /* 8211FAA8h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8211FAA8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211FAA8h case    8:*/		return 0x8211FAAC;
		  /* 8211FAACh */ case    9:  		/* bc 12, CR0_EQ, 96 */
		/* 8211FAACh case    9:*/		if ( regs.CR[0].eq ) { return 0x8211FB0C;  }
		/* 8211FAACh case    9:*/		return 0x8211FAB0;
		  /* 8211FAB0h */ case   10:  		/* lwz R11, <#[R3 + 16]> */
		/* 8211FAB0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8211FAB0h case   10:*/		return 0x8211FAB4;
		  /* 8211FAB4h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8211FAB4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211FAB4h case   11:*/		return 0x8211FAB8;
		  /* 8211FAB8h */ case   12:  		/* bc 12, CR6_EQ, 84 */
		/* 8211FAB8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8211FB0C;  }
		/* 8211FAB8h case   12:*/		return 0x8211FABC;
		  /* 8211FABCh */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211FABCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211FABCh case   13:*/		return 0x8211FAC0;
		  /* 8211FAC0h */ case   14:  		/* cmpwi CR6, R10, 9 */
		/* 8211FAC0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 8211FAC0h case   14:*/		return 0x8211FAC4;
		  /* 8211FAC4h */ case   15:  		/* bc 4, CR6_EQ, 72 */
		/* 8211FAC4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8211FB0C;  }
		/* 8211FAC4h case   15:*/		return 0x8211FAC8;
		  /* 8211FAC8h */ case   16:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8211FAC8h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8211FAC8h case   16:*/		return 0x8211FACC;
		  /* 8211FACCh */ case   17:  		/* cmpwi CR6, R10, 9 */
		/* 8211FACCh case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 8211FACCh case   17:*/		return 0x8211FAD0;
		  /* 8211FAD0h */ case   18:  		/* bc 4, CR6_EQ, 60 */
		/* 8211FAD0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8211FB0C;  }
		/* 8211FAD0h case   18:*/		return 0x8211FAD4;
		  /* 8211FAD4h */ case   19:  		/* lwz R11, <#[R11 + 16]> */
		/* 8211FAD4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8211FAD4h case   19:*/		return 0x8211FAD8;
		  /* 8211FAD8h */ case   20:  		/* cmpwi CR6, R11, 0 */
		/* 8211FAD8h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211FAD8h case   20:*/		return 0x8211FADC;
		  /* 8211FADCh */ case   21:  		/* bc 4, CR6_EQ, 48 */
		/* 8211FADCh case   21:*/		if ( !regs.CR[6].eq ) { return 0x8211FB0C;  }
		/* 8211FADCh case   21:*/		return 0x8211FAE0;
		  /* 8211FAE0h */ case   22:  		/* lwz R11, <#[R3 + 32]> */
		/* 8211FAE0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 8211FAE0h case   22:*/		return 0x8211FAE4;
		  /* 8211FAE4h */ case   23:  		/* addi R6, R3, 48 */
		/* 8211FAE4h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R3,0x30);
		/* 8211FAE4h case   23:*/		return 0x8211FAE8;
		  /* 8211FAE8h */ case   24:  		/* mr R4, R30 */
		/* 8211FAE8h case   24:*/		regs.R4 = regs.R30;
		/* 8211FAE8h case   24:*/		return 0x8211FAEC;
		  /* 8211FAECh */ case   25:  		/* mr R3, R31 */
		/* 8211FAECh case   25:*/		regs.R3 = regs.R31;
		/* 8211FAECh case   25:*/		return 0x8211FAF0;
		  /* 8211FAF0h */ case   26:  		/* lwz R11, <#[R11 + 8]> */
		/* 8211FAF0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8211FAF0h case   26:*/		return 0x8211FAF4;
		  /* 8211FAF4h */ case   27:  		/* addi R5, R11, 16 */
		/* 8211FAF4h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 8211FAF4h case   27:*/		return 0x8211FAF8;
		  /* 8211FAF8h */ case   28:  		/* bl -27464 */
		/* 8211FAF8h case   28:*/		regs.LR = 0x8211FAFC; return 0x82118FB0;
		/* 8211FAF8h case   28:*/		return 0x8211FAFC;
		  /* 8211FAFCh */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 8211FAFCh case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211FAFCh case   29:*/		return 0x8211FB00;
		  /* 8211FB00h */ case   30:  		/* bc 12, CR0_LT, 20 */
		/* 8211FB00h case   30:*/		if ( regs.CR[0].lt ) { return 0x8211FB14;  }
		/* 8211FB00h case   30:*/		return 0x8211FB04;
		  /* 8211FB04h */ case   31:  		/* li R3, 0 */
		/* 8211FB04h case   31:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211FB04h case   31:*/		return 0x8211FB08;
		  /* 8211FB08h */ case   32:  		/* b 12 */
		/* 8211FB08h case   32:*/		return 0x8211FB14;
		/* 8211FB08h case   32:*/		return 0x8211FB0C;
	}
	return 0x8211FB0C;
} // Block from 8211FA88h-8211FB0Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8211FB0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FB0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FB0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FB0C);
		  /* 8211FB0Ch */ case    0:  		/* lis R3, -32768 */
		/* 8211FB0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211FB0Ch case    0:*/		return 0x8211FB10;
		  /* 8211FB10h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8211FB10h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211FB10h case    1:*/		return 0x8211FB14;
	}
	return 0x8211FB14;
} // Block from 8211FB0Ch-8211FB14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8211FB14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FB14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FB14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FB14);
		  /* 8211FB14h */ case    0:  		/* addi R1, R1, 112 */
		/* 8211FB14h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8211FB14h case    0:*/		return 0x8211FB18;
		  /* 8211FB18h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211FB18h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211FB18h case    1:*/		return 0x8211FB1C;
		  /* 8211FB1Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8211FB1Ch case    2:*/		regs.LR = regs.R12;
		/* 8211FB1Ch case    2:*/		return 0x8211FB20;
		  /* 8211FB20h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8211FB20h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211FB20h case    3:*/		return 0x8211FB24;
		  /* 8211FB24h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8211FB24h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211FB24h case    4:*/		return 0x8211FB28;
		  /* 8211FB28h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8211FB28h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211FB28h case    5:*/		return 0x8211FB2C;
	}
	return 0x8211FB2C;
} // Block from 8211FB14h-8211FB2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211FB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FB2C);
		  /* 8211FB2Ch */ case    0:  		/* nop */
		/* 8211FB2Ch case    0:*/		cpu::op::nop();
		/* 8211FB2Ch case    0:*/		return 0x8211FB30;
	}
	return 0x8211FB30;
} // Block from 8211FB2Ch-8211FB30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211FB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FB30);
		  /* 8211FB30h */ case    0:  		/* mfspr R12, LR */
		/* 8211FB30h case    0:*/		regs.R12 = regs.LR;
		/* 8211FB30h case    0:*/		return 0x8211FB34;
		  /* 8211FB34h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8211FB34h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211FB34h case    1:*/		return 0x8211FB38;
		  /* 8211FB38h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8211FB38h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211FB38h case    2:*/		return 0x8211FB3C;
		  /* 8211FB3Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8211FB3Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211FB3Ch case    3:*/		return 0x8211FB40;
		  /* 8211FB40h */ case    4:  		/* stwu R1, <#[R1 - 144]> */
		/* 8211FB40h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8211FB40h case    4:*/		return 0x8211FB44;
		  /* 8211FB44h */ case    5:  		/* lwz R11, <#[R4 + 4]> */
		/* 8211FB44h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8211FB44h case    5:*/		return 0x8211FB48;
		  /* 8211FB48h */ case    6:  		/* mr R30, R3 */
		/* 8211FB48h case    6:*/		regs.R30 = regs.R3;
		/* 8211FB48h case    6:*/		return 0x8211FB4C;
		  /* 8211FB4Ch */ case    7:  		/* mr R31, R4 */
		/* 8211FB4Ch case    7:*/		regs.R31 = regs.R4;
		/* 8211FB4Ch case    7:*/		return 0x8211FB50;
		  /* 8211FB50h */ case    8:  		/* cmpwi CR6, R11, 14 */
		/* 8211FB50h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 8211FB50h case    8:*/		return 0x8211FB54;
		  /* 8211FB54h */ case    9:  		/* bc 4, CR6_EQ, 72 */
		/* 8211FB54h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8211FB9C;  }
		/* 8211FB54h case    9:*/		return 0x8211FB58;
		  /* 8211FB58h */ case   10:  		/* lwz R11, <#[R4 + 16]> */
		/* 8211FB58h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8211FB58h case   10:*/		return 0x8211FB5C;
		  /* 8211FB5Ch */ case   11:  		/* li R10, 0 */
		/* 8211FB5Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211FB5Ch case   11:*/		return 0x8211FB60;
		  /* 8211FB60h */ case   12:  		/* stw R10, <#[R1 + 112]> */
		/* 8211FB60h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8211FB60h case   12:*/		return 0x8211FB64;
		  /* 8211FB64h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 8211FB64h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211FB64h case   13:*/		return 0x8211FB68;
		  /* 8211FB68h */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 8211FB68h case   14:*/		if ( regs.CR[6].eq ) { return 0x8211FB84;  }
		/* 8211FB68h case   14:*/		return 0x8211FB6C;
		  /* 8211FB6Ch */ case   15:  		/* lwz R10, <#[R11 + 4]> */
		/* 8211FB6Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8211FB6Ch case   15:*/		return 0x8211FB70;
		  /* 8211FB70h */ case   16:  		/* cmpwi CR6, R10, 9 */
		/* 8211FB70h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 8211FB70h case   16:*/		return 0x8211FB74;
		  /* 8211FB74h */ case   17:  		/* bc 4, CR6_EQ, 16 */
		/* 8211FB74h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8211FB84;  }
		/* 8211FB74h case   17:*/		return 0x8211FB78;
		  /* 8211FB78h */ case   18:  		/* lwz R11, <#[R11 + 16]> */
		/* 8211FB78h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8211FB78h case   18:*/		return 0x8211FB7C;
		  /* 8211FB7Ch */ case   19:  		/* cmpwi CR6, R11, 0 */
		/* 8211FB7Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211FB7Ch case   19:*/		return 0x8211FB80;
		  /* 8211FB80h */ case   20:  		/* bc 12, CR6_EQ, 56 */
		/* 8211FB80h case   20:*/		if ( regs.CR[6].eq ) { return 0x8211FBB8;  }
		/* 8211FB80h case   20:*/		return 0x8211FB84;
	}
	return 0x8211FB84;
} // Block from 8211FB30h-8211FB84h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8211FB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FB84);
		  /* 8211FB84h */ case    0:  		/* lis R11, -32253 */
		/* 8211FB84h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211FB84h case    0:*/		return 0x8211FB88;
		  /* 8211FB88h */ case    1:  		/* addi R6, R11, 9272 */
		/* 8211FB88h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2438);
		/* 8211FB88h case    1:*/		return 0x8211FB8C;
		  /* 8211FB8Ch */ case    2:  		/* li R5, 3020 */
		/* 8211FB8Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xBCC);
		/* 8211FB8Ch case    2:*/		return 0x8211FB90;
		  /* 8211FB90h */ case    3:  		/* addi R4, R31, 48 */
		/* 8211FB90h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x30);
		/* 8211FB90h case    3:*/		return 0x8211FB94;
		  /* 8211FB94h */ case    4:  		/* mr R3, R30 */
		/* 8211FB94h case    4:*/		regs.R3 = regs.R30;
		/* 8211FB94h case    4:*/		return 0x8211FB98;
		  /* 8211FB98h */ case    5:  		/* bl -25336 */
		/* 8211FB98h case    5:*/		regs.LR = 0x8211FB9C; return 0x821198A0;
		/* 8211FB98h case    5:*/		return 0x8211FB9C;
	}
	return 0x8211FB9C;
} // Block from 8211FB84h-8211FB9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8211FB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FB9C);
		  /* 8211FB9Ch */ case    0:  		/* li R3, 0 */
		/* 8211FB9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211FB9Ch case    0:*/		return 0x8211FBA0;
		  /* 8211FBA0h */ case    1:  		/* addi R1, R1, 144 */
		/* 8211FBA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8211FBA0h case    1:*/		return 0x8211FBA4;
		  /* 8211FBA4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8211FBA4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8211FBA4h case    2:*/		return 0x8211FBA8;
		  /* 8211FBA8h */ case    3:  		/* mtspr LR, R12 */
		/* 8211FBA8h case    3:*/		regs.LR = regs.R12;
		/* 8211FBA8h case    3:*/		return 0x8211FBAC;
		  /* 8211FBACh */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8211FBACh case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8211FBACh case    4:*/		return 0x8211FBB0;
		  /* 8211FBB0h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8211FBB0h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8211FBB0h case    5:*/		return 0x8211FBB4;
		  /* 8211FBB4h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8211FBB4h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8211FBB4h case    6:*/		return 0x8211FBB8;
	}
	return 0x8211FBB8;
} // Block from 8211FB9Ch-8211FBB8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211FBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FBB8);
		  /* 8211FBB8h */ case    0:  		/* addi R5, R1, 112 */
		/* 8211FBB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8211FBB8h case    0:*/		return 0x8211FBBC;
		  /* 8211FBBCh */ case    1:  		/* mr R4, R31 */
		/* 8211FBBCh case    1:*/		regs.R4 = regs.R31;
		/* 8211FBBCh case    1:*/		return 0x8211FBC0;
		  /* 8211FBC0h */ case    2:  		/* mr R3, R30 */
		/* 8211FBC0h case    2:*/		regs.R3 = regs.R30;
		/* 8211FBC0h case    2:*/		return 0x8211FBC4;
		  /* 8211FBC4h */ case    3:  		/* bl -316 */
		/* 8211FBC4h case    3:*/		regs.LR = 0x8211FBC8; return 0x8211FA88;
		/* 8211FBC4h case    3:*/		return 0x8211FBC8;
		  /* 8211FBC8h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8211FBC8h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8211FBC8h case    4:*/		return 0x8211FBCC;
		  /* 8211FBCCh */ case    5:  		/* bc 4, CR0_LT, 16 */
		/* 8211FBCCh case    5:*/		if ( !regs.CR[0].lt ) { return 0x8211FBDC;  }
		/* 8211FBCCh case    5:*/		return 0x8211FBD0;
		  /* 8211FBD0h */ case    6:  		/* lis R11, -32253 */
		/* 8211FBD0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211FBD0h case    6:*/		return 0x8211FBD4;
		  /* 8211FBD4h */ case    7:  		/* addi R6, R11, 9244 */
		/* 8211FBD4h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x241C);
		/* 8211FBD4h case    7:*/		return 0x8211FBD8;
		  /* 8211FBD8h */ case    8:  		/* b -76 */
		/* 8211FBD8h case    8:*/		return 0x8211FB8C;
		/* 8211FBD8h case    8:*/		return 0x8211FBDC;
	}
	return 0x8211FBDC;
} // Block from 8211FBB8h-8211FBDCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211FBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FBDC);
		  /* 8211FBDCh */ case    0:  		/* li R3, 72 */
		/* 8211FBDCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x48);
		/* 8211FBDCh case    0:*/		return 0x8211FBE0;
		  /* 8211FBE0h */ case    1:  		/* bl -354744 */
		/* 8211FBE0h case    1:*/		regs.LR = 0x8211FBE4; return 0x820C9228;
		/* 8211FBE0h case    1:*/		return 0x8211FBE4;
		  /* 8211FBE4h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8211FBE4h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211FBE4h case    2:*/		return 0x8211FBE8;
		  /* 8211FBE8h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8211FBE8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8211FC04;  }
		/* 8211FBE8h case    3:*/		return 0x8211FBEC;
		  /* 8211FBECh */ case    4:  		/* addi R6, R31, 48 */
		/* 8211FBECh case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x30);
		/* 8211FBECh case    4:*/		return 0x8211FBF0;
		  /* 8211FBF0h */ case    5:  		/* lwz R5, <#[R1 + 112]> */
		/* 8211FBF0h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 8211FBF0h case    5:*/		return 0x8211FBF4;
		  /* 8211FBF4h */ case    6:  		/* li R4, 2 */
		/* 8211FBF4h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8211FBF4h case    6:*/		return 0x8211FBF8;
		  /* 8211FBF8h */ case    7:  		/* bl -342048 */
		/* 8211FBF8h case    7:*/		regs.LR = 0x8211FBFC; return 0x820CC3D8;
		/* 8211FBF8h case    7:*/		return 0x8211FBFC;
		  /* 8211FBFCh */ case    8:  		/* mr R31, R3 */
		/* 8211FBFCh case    8:*/		regs.R31 = regs.R3;
		/* 8211FBFCh case    8:*/		return 0x8211FC00;
		  /* 8211FC00h */ case    9:  		/* b 8 */
		/* 8211FC00h case    9:*/		return 0x8211FC08;
		/* 8211FC00h case    9:*/		return 0x8211FC04;
	}
	return 0x8211FC04;
} // Block from 8211FBDCh-8211FC04h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211FC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FC04);
		  /* 8211FC04h */ case    0:  		/* li R31, 0 */
		/* 8211FC04h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211FC04h case    0:*/		return 0x8211FC08;
	}
	return 0x8211FC08;
} // Block from 8211FC04h-8211FC08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211FC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FC08);
		  /* 8211FC08h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8211FC08h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8211FC08h case    0:*/		return 0x8211FC0C;
		  /* 8211FC0Ch */ case    1:  		/* bc 12, CR6_EQ, -112 */
		/* 8211FC0Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8211FB9C;  }
		/* 8211FC0Ch case    1:*/		return 0x8211FC10;
		  /* 8211FC10h */ case    2:  		/* li R3, 20 */
		/* 8211FC10h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x14);
		/* 8211FC10h case    2:*/		return 0x8211FC14;
		  /* 8211FC14h */ case    3:  		/* bl -354796 */
		/* 8211FC14h case    3:*/		regs.LR = 0x8211FC18; return 0x820C9228;
		/* 8211FC14h case    3:*/		return 0x8211FC18;
		  /* 8211FC18h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8211FC18h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211FC18h case    4:*/		return 0x8211FC1C;
		  /* 8211FC1Ch */ case    5:  		/* bc 12, CR0_EQ, -128 */
		/* 8211FC1Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8211FB9C;  }
		/* 8211FC1Ch case    5:*/		return 0x8211FC20;
		  /* 8211FC20h */ case    6:  		/* mr R4, R31 */
		/* 8211FC20h case    6:*/		regs.R4 = regs.R31;
		/* 8211FC20h case    6:*/		return 0x8211FC24;
		  /* 8211FC24h */ case    7:  		/* bl -349548 */
		/* 8211FC24h case    7:*/		regs.LR = 0x8211FC28; return 0x820CA6B8;
		/* 8211FC24h case    7:*/		return 0x8211FC28;
		  /* 8211FC28h */ case    8:  		/* b -136 */
		/* 8211FC28h case    8:*/		return 0x8211FBA0;
		/* 8211FC28h case    8:*/		return 0x8211FC2C;
		  /* 8211FC2Ch */ case    9:  		/* nop */
		/* 8211FC2Ch case    9:*/		cpu::op::nop();
		/* 8211FC2Ch case    9:*/		return 0x8211FC30;
	}
	return 0x8211FC30;
} // Block from 8211FC08h-8211FC30h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211FC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FC30);
		  /* 8211FC30h */ case    0:  		/* mfspr R12, LR */
		/* 8211FC30h case    0:*/		regs.R12 = regs.LR;
		/* 8211FC30h case    0:*/		return 0x8211FC34;
		  /* 8211FC34h */ case    1:  		/* bl -584176 */
		/* 8211FC34h case    1:*/		regs.LR = 0x8211FC38; return 0x82091244;
		/* 8211FC34h case    1:*/		return 0x8211FC38;
		  /* 8211FC38h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 8211FC38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 8211FC38h case    2:*/		return 0x8211FC3C;
		  /* 8211FC3Ch */ case    3:  		/* lwz R27, <#[R4 + 8]> */
		/* 8211FC3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R4 + 0x00000008) );
		/* 8211FC3Ch case    3:*/		return 0x8211FC40;
		  /* 8211FC40h */ case    4:  		/* mr R26, R3 */
		/* 8211FC40h case    4:*/		regs.R26 = regs.R3;
		/* 8211FC40h case    4:*/		return 0x8211FC44;
		  /* 8211FC44h */ case    5:  		/* mr R23, R4 */
		/* 8211FC44h case    5:*/		regs.R23 = regs.R4;
		/* 8211FC44h case    5:*/		return 0x8211FC48;
		  /* 8211FC48h */ case    6:  		/* mr R25, R6 */
		/* 8211FC48h case    6:*/		regs.R25 = regs.R6;
		/* 8211FC48h case    6:*/		return 0x8211FC4C;
		  /* 8211FC4Ch */ case    7:  		/* mr R29, R7 */
		/* 8211FC4Ch case    7:*/		regs.R29 = regs.R7;
		/* 8211FC4Ch case    7:*/		return 0x8211FC50;
		  /* 8211FC50h */ case    8:  		/* mr R28, R8 */
		/* 8211FC50h case    8:*/		regs.R28 = regs.R8;
		/* 8211FC50h case    8:*/		return 0x8211FC54;
		  /* 8211FC54h */ case    9:  		/* lwz R11, <#[R27 + 16]> */
		/* 8211FC54h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8211FC54h case    9:*/		return 0x8211FC58;
		  /* 8211FC58h */ case   10:  		/* mr R24, R9 */
		/* 8211FC58h case   10:*/		regs.R24 = regs.R9;
		/* 8211FC58h case   10:*/		return 0x8211FC5C;
		  /* 8211FC5Ch */ case   11:  		/* mr R30, R10 */
		/* 8211FC5Ch case   11:*/		regs.R30 = regs.R10;
		/* 8211FC5Ch case   11:*/		return 0x8211FC60;
		  /* 8211FC60h */ case   12:  		/* cmpw CR6, R5, R11 */
		/* 8211FC60h case   12:*/		cpu::op::cmpw<6>(regs,regs.R5,regs.R11);
		/* 8211FC60h case   12:*/		return 0x8211FC64;
		  /* 8211FC64h */ case   13:  		/* bc 12, CR6_EQ, 76 */
		/* 8211FC64h case   13:*/		if ( regs.CR[6].eq ) { return 0x8211FCB0;  }
		/* 8211FC64h case   13:*/		return 0x8211FC68;
		  /* 8211FC68h */ case   14:  		/* andi. R10, R10, 5 */
		/* 8211FC68h case   14:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R10,0x5);
		/* 8211FC68h case   14:*/		return 0x8211FC6C;
		  /* 8211FC6Ch */ case   15:  		/* cmplwi CR0, R10, 0 */
		/* 8211FC6Ch case   15:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8211FC6Ch case   15:*/		return 0x8211FC70;
		  /* 8211FC70h */ case   16:  		/* bc 12, CR0_EQ, 52 */
		/* 8211FC70h case   16:*/		if ( regs.CR[0].eq ) { return 0x8211FCA4;  }
		/* 8211FC70h case   16:*/		return 0x8211FC74;
		  /* 8211FC74h */ case   17:  		/* lis R10, -32253 */
		/* 8211FC74h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8211FC74h case   17:*/		return 0x8211FC78;
		  /* 8211FC78h */ case   18:  		/* lwz R7, <#[R6 + 8]> */
		/* 8211FC78h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x00000008) );
		/* 8211FC78h case   18:*/		return 0x8211FC7C;
		  /* 8211FC7Ch */ case   19:  		/* rlwinm R9, R5, 2, 0, 29 */
		/* 8211FC7Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R5);
		/* 8211FC7Ch case   19:*/		return 0x8211FC80;
		  /* 8211FC80h */ case   20:  		/* addi R10, R10, 9492 */
		/* 8211FC80h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2514);
		/* 8211FC80h case   20:*/		return 0x8211FC84;
		  /* 8211FC84h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8211FC84h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8211FC84h case   21:*/		return 0x8211FC88;
		  /* 8211FC88h */ case   22:  		/* lis R8, -32253 */
		/* 8211FC88h case   22:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8211FC88h case   22:*/		return 0x8211FC8C;
		  /* 8211FC8Ch */ case   23:  		/* li R5, 3005 */
		/* 8211FC8Ch case   23:*/		cpu::op::li<0>(regs,&regs.R5,0xBBD);
		/* 8211FC8Ch case   23:*/		return 0x8211FC90;
		  /* 8211FC90h */ case   24:  		/* addi R6, R8, 9448 */
		/* 8211FC90h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0x24E8);
		/* 8211FC90h case   24:*/		return 0x8211FC94;
		  /* 8211FC94h */ case   25:  		/* mr R4, R25 */
		/* 8211FC94h case   25:*/		regs.R4 = regs.R25;
		/* 8211FC94h case   25:*/		return 0x8211FC98;
		  /* 8211FC98h */ case   26:  		/* lwzx R9, <#[R9 + R10]> */
		/* 8211FC98h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8211FC98h case   26:*/		return 0x8211FC9C;
		  /* 8211FC9Ch */ case   27:  		/* lwzx R8, <#[R11 + R10]> */
		/* 8211FC9Ch case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8211FC9Ch case   27:*/		return 0x8211FCA0;
		  /* 8211FCA0h */ case   28:  		/* bl -25600 */
		/* 8211FCA0h case   28:*/		regs.LR = 0x8211FCA4; return 0x821198A0;
		/* 8211FCA0h case   28:*/		return 0x8211FCA4;
	}
	return 0x8211FCA4;
} // Block from 8211FC30h-8211FCA4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8211FCA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FCA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FCA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FCA4);
		  /* 8211FCA4h */ case    0:  		/* lis R3, -32768 */
		/* 8211FCA4h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211FCA4h case    0:*/		return 0x8211FCA8;
		  /* 8211FCA8h */ case    1:  		/* ori R3, R3, 16389 */
		/* 8211FCA8h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211FCA8h case    1:*/		return 0x8211FCAC;
		  /* 8211FCACh */ case    2:  		/* b 400 */
		/* 8211FCACh case    2:*/		return 0x8211FE3C;
		/* 8211FCACh case    2:*/		return 0x8211FCB0;
	}
	return 0x8211FCB0;
} // Block from 8211FCA4h-8211FCB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211FCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FCB0);
		  /* 8211FCB0h */ case    0:  		/* rlwinm. R11, R30, 0, 29, 29 */
		/* 8211FCB0h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R30);
		/* 8211FCB0h case    0:*/		return 0x8211FCB4;
		  /* 8211FCB4h */ case    1:  		/* li R31, 0 */
		/* 8211FCB4h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8211FCB4h case    1:*/		return 0x8211FCB8;
		  /* 8211FCB8h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8211FCB8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8211FCD8;  }
		/* 8211FCB8h case    2:*/		return 0x8211FCBC;
		  /* 8211FCBCh */ case    3:  		/* mr R7, R30 */
		/* 8211FCBCh case    3:*/		regs.R7 = regs.R30;
		/* 8211FCBCh case    3:*/		return 0x8211FCC0;
		  /* 8211FCC0h */ case    4:  		/* lwz R4, <#[R27 + 24]> */
		/* 8211FCC0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000018) );
		/* 8211FCC0h case    4:*/		return 0x8211FCC4;
		  /* 8211FCC4h */ case    5:  		/* mr R6, R28 */
		/* 8211FCC4h case    5:*/		regs.R6 = regs.R28;
		/* 8211FCC4h case    5:*/		return 0x8211FCC8;
		  /* 8211FCC8h */ case    6:  		/* mr R5, R29 */
		/* 8211FCC8h case    6:*/		regs.R5 = regs.R29;
		/* 8211FCC8h case    6:*/		return 0x8211FCCC;
		  /* 8211FCCCh */ case    7:  		/* mr R3, R26 */
		/* 8211FCCCh case    7:*/		regs.R3 = regs.R26;
		/* 8211FCCCh case    7:*/		return 0x8211FCD0;
		  /* 8211FCD0h */ case    8:  		/* bl -1776 */
		/* 8211FCD0h case    8:*/		regs.LR = 0x8211FCD4; return 0x8211F5E0;
		/* 8211FCD0h case    8:*/		return 0x8211FCD4;
		  /* 8211FCD4h */ case    9:  		/* mr R31, R3 */
		/* 8211FCD4h case    9:*/		regs.R31 = regs.R3;
		/* 8211FCD4h case    9:*/		return 0x8211FCD8;
	}
	return 0x8211FCD8;
} // Block from 8211FCB0h-8211FCD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211FCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FCD8);
		  /* 8211FCD8h */ case    0:  		/* rlwinm. R11, R30, 0, 28, 28 */
		/* 8211FCD8h case    0:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R30);
		/* 8211FCD8h case    0:*/		return 0x8211FCDC;
		  /* 8211FCDCh */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8211FCDCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8211FCFC;  }
		/* 8211FCDCh case    1:*/		return 0x8211FCE0;
		  /* 8211FCE0h */ case    2:  		/* mr R7, R30 */
		/* 8211FCE0h case    2:*/		regs.R7 = regs.R30;
		/* 8211FCE0h case    2:*/		return 0x8211FCE4;
		  /* 8211FCE4h */ case    3:  		/* lwz R4, <#[R27 + 24]> */
		/* 8211FCE4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000018) );
		/* 8211FCE4h case    3:*/		return 0x8211FCE8;
		  /* 8211FCE8h */ case    4:  		/* mr R6, R28 */
		/* 8211FCE8h case    4:*/		regs.R6 = regs.R28;
		/* 8211FCE8h case    4:*/		return 0x8211FCEC;
		  /* 8211FCECh */ case    5:  		/* mr R5, R29 */
		/* 8211FCECh case    5:*/		regs.R5 = regs.R29;
		/* 8211FCECh case    5:*/		return 0x8211FCF0;
		  /* 8211FCF0h */ case    6:  		/* mr R3, R26 */
		/* 8211FCF0h case    6:*/		regs.R3 = regs.R26;
		/* 8211FCF0h case    6:*/		return 0x8211FCF4;
		  /* 8211FCF4h */ case    7:  		/* bl -28988 */
		/* 8211FCF4h case    7:*/		regs.LR = 0x8211FCF8; return 0x82118BB8;
		/* 8211FCF4h case    7:*/		return 0x8211FCF8;
		  /* 8211FCF8h */ case    8:  		/* add R31, R3, R31 */
		/* 8211FCF8h case    8:*/		cpu::op::add<0>(regs,&regs.R31,regs.R3,regs.R31);
		/* 8211FCF8h case    8:*/		return 0x8211FCFC;
	}
	return 0x8211FCFC;
} // Block from 8211FCD8h-8211FCFCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8211FCFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FCFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FCFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FCFC);
		  /* 8211FCFCh */ case    0:  		/* cmpwi CR6, R31, -1 */
		/* 8211FCFCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0xFFFFFFFF);
		/* 8211FCFCh case    0:*/		return 0x8211FD00;
		  /* 8211FD00h */ case    1:  		/* bc 12, CR6_EQ, 312 */
		/* 8211FD00h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211FE38;  }
		/* 8211FD00h case    1:*/		return 0x8211FD04;
		  /* 8211FD04h */ case    2:  		/* lwz R9, <#[R1 + 340]> */
		/* 8211FD04h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000154) );
		/* 8211FD04h case    2:*/		return 0x8211FD08;
		  /* 8211FD08h */ case    3:  		/* lwz R11, <#[R1 + 348]> */
		/* 8211FD08h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000015C) );
		/* 8211FD08h case    3:*/		return 0x8211FD0C;
		  /* 8211FD0Ch */ case    4:  		/* lwz R10, <#[R9]> */
		/* 8211FD0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8211FD0Ch case    4:*/		return 0x8211FD10;
		  /* 8211FD10h */ case    5:  		/* cmplw CR6, R31, R10 */
		/* 8211FD10h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 8211FD10h case    5:*/		return 0x8211FD14;
		  /* 8211FD14h */ case    6:  		/* bc 4, CR6_LT, 16 */
		/* 8211FD14h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8211FD24;  }
		/* 8211FD14h case    6:*/		return 0x8211FD18;
		  /* 8211FD18h */ case    7:  		/* li R10, 0 */
		/* 8211FD18h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8211FD18h case    7:*/		return 0x8211FD1C;
		  /* 8211FD1Ch */ case    8:  		/* stw R31, <#[R9]> */
		/* 8211FD1Ch case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + 0x00000000) );
		/* 8211FD1Ch case    8:*/		return 0x8211FD20;
		  /* 8211FD20h */ case    9:  		/* stw R10, <#[R11]> */
		/* 8211FD20h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211FD20h case    9:*/		return 0x8211FD24;
	}
	return 0x8211FD24;
} // Block from 8211FCFCh-8211FD24h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8211FD24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FD24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FD24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FD24);
		  /* 8211FD24h */ case    0:  		/* lwz R10, <#[R9]> */
		/* 8211FD24h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8211FD24h case    0:*/		return 0x8211FD28;
		  /* 8211FD28h */ case    1:  		/* cmplw CR6, R31, R10 */
		/* 8211FD28h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 8211FD28h case    1:*/		return 0x8211FD2C;
		  /* 8211FD2Ch */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 8211FD2Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211FD54;  }
		/* 8211FD2Ch case    2:*/		return 0x8211FD30;
		  /* 8211FD30h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 8211FD30h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211FD30h case    3:*/		return 0x8211FD34;
		  /* 8211FD34h */ case    4:  		/* cmplwi CR6, R10, 64 */
		/* 8211FD34h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000040);
		/* 8211FD34h case    4:*/		return 0x8211FD38;
		  /* 8211FD38h */ case    5:  		/* bc 4, CR6_LT, 28 */
		/* 8211FD38h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8211FD54;  }
		/* 8211FD38h case    5:*/		return 0x8211FD3C;
		  /* 8211FD3Ch */ case    6:  		/* lwz R8, <#[R1 + 356]> */
		/* 8211FD3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000164) );
		/* 8211FD3Ch case    6:*/		return 0x8211FD40;
		  /* 8211FD40h */ case    7:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8211FD40h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8211FD40h case    7:*/		return 0x8211FD44;
		  /* 8211FD44h */ case    8:  		/* stwx R27, <#[R10 + R8]> */
		/* 8211FD44h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8211FD44h case    8:*/		return 0x8211FD48;
		  /* 8211FD48h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 8211FD48h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211FD48h case    9:*/		return 0x8211FD4C;
		  /* 8211FD4Ch */ case   10:  		/* addi R10, R10, 1 */
		/* 8211FD4Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211FD4Ch case   10:*/		return 0x8211FD50;
		  /* 8211FD50h */ case   11:  		/* stw R10, <#[R11]> */
		/* 8211FD50h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8211FD50h case   11:*/		return 0x8211FD54;
	}
	return 0x8211FD54;
} // Block from 8211FD24h-8211FD54h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8211FD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FD54);
		  /* 8211FD54h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8211FD54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8211FD54h case    0:*/		return 0x8211FD58;
		  /* 8211FD58h */ case    1:  		/* bc 12, CR6_EQ, 224 */
		/* 8211FD58h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211FE38;  }
		/* 8211FD58h case    1:*/		return 0x8211FD5C;
		  /* 8211FD5Ch */ case    2:  		/* lwz R11, <#[R9]> */
		/* 8211FD5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8211FD5Ch case    2:*/		return 0x8211FD60;
		  /* 8211FD60h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8211FD60h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211FD60h case    3:*/		return 0x8211FD64;
		  /* 8211FD64h */ case    4:  		/* bc 4, CR6_EQ, 212 */
		/* 8211FD64h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8211FE38;  }
		/* 8211FD64h case    4:*/		return 0x8211FD68;
		  /* 8211FD68h */ case    5:  		/* lwz R11, <#[R27 + 48]> */
		/* 8211FD68h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 8211FD68h case    5:*/		return 0x8211FD6C;
		  /* 8211FD6Ch */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 8211FD6Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211FD6Ch case    6:*/		return 0x8211FD70;
		  /* 8211FD70h */ case    7:  		/* bc 12, CR6_EQ, 200 */
		/* 8211FD70h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211FE38;  }
		/* 8211FD70h case    7:*/		return 0x8211FD74;
		  /* 8211FD74h */ case    8:  		/* lwz R11, <#[R27 + 44]> */
		/* 8211FD74h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 8211FD74h case    8:*/		return 0x8211FD78;
		  /* 8211FD78h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 8211FD78h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211FD78h case    9:*/		return 0x8211FD7C;
		  /* 8211FD7Ch */ case   10:  		/* bc 4, CR6_EQ, 188 */
		/* 8211FD7Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x8211FE38;  }
		/* 8211FD7Ch case   10:*/		return 0x8211FD80;
		  /* 8211FD80h */ case   11:  		/* lwz R5, <#[R24 + 32]> */
		/* 8211FD80h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000020) );
		/* 8211FD80h case   11:*/		return 0x8211FD84;
		  /* 8211FD84h */ case   12:  		/* lis R11, -32253 */
		/* 8211FD84h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8211FD84h case   12:*/		return 0x8211FD88;
		  /* 8211FD88h */ case   13:  		/* li R30, 1 */
		/* 8211FD88h case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8211FD88h case   13:*/		return 0x8211FD8C;
		  /* 8211FD8Ch */ case   14:  		/* cmplwi CR6, R5, 0 */
		/* 8211FD8Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8211FD8Ch case   14:*/		return 0x8211FD90;
		  /* 8211FD90h */ case   15:  		/* addi R31, R11, 9304 */
		/* 8211FD90h case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x2458);
		/* 8211FD90h case   15:*/		return 0x8211FD94;
		  /* 8211FD94h */ case   16:  		/* bc 12, CR6_EQ, 96 */
		/* 8211FD94h case   16:*/		if ( regs.CR[6].eq ) { return 0x8211FDF4;  }
		/* 8211FD94h case   16:*/		return 0x8211FD98;
		  /* 8211FD98h */ case   17:  		/* lwz R11, <#[R5 + 16]> */
		/* 8211FD98h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 8211FD98h case   17:*/		return 0x8211FD9C;
		  /* 8211FD9Ch */ case   18:  		/* cmpwi CR6, R11, 4 */
		/* 8211FD9Ch case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8211FD9Ch case   18:*/		return 0x8211FDA0;
		  /* 8211FDA0h */ case   19:  		/* bc 4, CR6_EQ, 84 */
		/* 8211FDA0h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8211FDF4;  }
		/* 8211FDA0h case   19:*/		return 0x8211FDA4;
		  /* 8211FDA4h */ case   20:  		/* mr R4, R25 */
		/* 8211FDA4h case   20:*/		regs.R4 = regs.R25;
		/* 8211FDA4h case   20:*/		return 0x8211FDA8;
		  /* 8211FDA8h */ case   21:  		/* mr R3, R26 */
		/* 8211FDA8h case   21:*/		regs.R3 = regs.R26;
		/* 8211FDA8h case   21:*/		return 0x8211FDAC;
		  /* 8211FDACh */ case   22:  		/* bl -31892 */
		/* 8211FDACh case   22:*/		regs.LR = 0x8211FDB0; return 0x82118118;
		/* 8211FDACh case   22:*/		return 0x8211FDB0;
		  /* 8211FDB0h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 8211FDB0h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8211FDB0h case   23:*/		return 0x8211FDB4;
		  /* 8211FDB4h */ case   24:  		/* bc 12, CR0_EQ, 64 */
		/* 8211FDB4h case   24:*/		if ( regs.CR[0].eq ) { return 0x8211FDF4;  }
		/* 8211FDB4h case   24:*/		return 0x8211FDB8;
		  /* 8211FDB8h */ case   25:  		/* lwz R11, <#[R3 + 8]> */
		/* 8211FDB8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8211FDB8h case   25:*/		return 0x8211FDBC;
		  /* 8211FDBCh */ case   26:  		/* lwz R11, <#[R11 + 48]> */
		/* 8211FDBCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 8211FDBCh case   26:*/		return 0x8211FDC0;
		  /* 8211FDC0h */ case   27:  		/* cmpwi CR6, R11, 0 */
		/* 8211FDC0h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211FDC0h case   27:*/		return 0x8211FDC4;
		  /* 8211FDC4h */ case   28:  		/* bc 12, CR6_EQ, 20 */
		/* 8211FDC4h case   28:*/		if ( regs.CR[6].eq ) { return 0x8211FDD8;  }
		/* 8211FDC4h case   28:*/		return 0x8211FDC8;
		  /* 8211FDC8h */ case   29:  		/* lwz R3, <#[R3 + 12]> */
		/* 8211FDC8h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 8211FDC8h case   29:*/		return 0x8211FDCC;
		  /* 8211FDCCh */ case   30:  		/* cmplwi CR6, R3, 0 */
		/* 8211FDCCh case   30:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8211FDCCh case   30:*/		return 0x8211FDD0;
		  /* 8211FDD0h */ case   31:  		/* bc 4, CR6_EQ, -24 */
		/* 8211FDD0h case   31:*/		if ( !regs.CR[6].eq ) { return 0x8211FDB8;  }
		/* 8211FDD0h case   31:*/		return 0x8211FDD4;
		  /* 8211FDD4h */ case   32:  		/* b 32 */
		/* 8211FDD4h case   32:*/		return 0x8211FDF4;
		/* 8211FDD4h case   32:*/		return 0x8211FDD8;
	}
	return 0x8211FDD8;
} // Block from 8211FD54h-8211FDD8h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8211FDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FDD8);
		  /* 8211FDD8h */ case    0:  		/* mr R6, R31 */
		/* 8211FDD8h case    0:*/		regs.R6 = regs.R31;
		/* 8211FDD8h case    0:*/		return 0x8211FDDC;
		  /* 8211FDDCh */ case    1:  		/* lwz R7, <#[R25 + 8]> */
		/* 8211FDDCh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000008) );
		/* 8211FDDCh case    1:*/		return 0x8211FDE0;
		  /* 8211FDE0h */ case    2:  		/* li R5, 3078 */
		/* 8211FDE0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xC06);
		/* 8211FDE0h case    2:*/		return 0x8211FDE4;
		  /* 8211FDE4h */ case    3:  		/* mr R4, R25 */
		/* 8211FDE4h case    3:*/		regs.R4 = regs.R25;
		/* 8211FDE4h case    3:*/		return 0x8211FDE8;
		  /* 8211FDE8h */ case    4:  		/* mr R3, R26 */
		/* 8211FDE8h case    4:*/		regs.R3 = regs.R26;
		/* 8211FDE8h case    4:*/		return 0x8211FDEC;
		  /* 8211FDECh */ case    5:  		/* bl -25804 */
		/* 8211FDECh case    5:*/		regs.LR = 0x8211FDF0; return 0x82119920;
		/* 8211FDECh case    5:*/		return 0x8211FDF0;
		  /* 8211FDF0h */ case    6:  		/* stw R30, <#[R27 + 44]> */
		/* 8211FDF0h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x0000002C) );
		/* 8211FDF0h case    6:*/		return 0x8211FDF4;
	}
	return 0x8211FDF4;
} // Block from 8211FDD8h-8211FDF4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211FDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FDF4);
		  /* 8211FDF4h */ case    0:  		/* lwz R11, <#[R23 + 12]> */
		/* 8211FDF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 8211FDF4h case    0:*/		return 0x8211FDF8;
		  /* 8211FDF8h */ case    1:  		/* b 24 */
		/* 8211FDF8h case    1:*/		return 0x8211FE10;
		/* 8211FDF8h case    1:*/		return 0x8211FDFC;
		  /* 8211FDFCh */ case    2:  		/* lwz R10, <#[R11 + 8]> */
		/* 8211FDFCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8211FDFCh case    2:*/		return 0x8211FE00;
		  /* 8211FE00h */ case    3:  		/* lwz R10, <#[R10 + 48]> */
		/* 8211FE00h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 8211FE00h case    3:*/		return 0x8211FE04;
		  /* 8211FE04h */ case    4:  		/* cmpwi CR6, R10, 0 */
		/* 8211FE04h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8211FE04h case    4:*/		return 0x8211FE08;
		  /* 8211FE08h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8211FE08h case    5:*/		if ( regs.CR[6].eq ) { return 0x8211FE1C;  }
		/* 8211FE08h case    5:*/		return 0x8211FE0C;
		  /* 8211FE0Ch */ case    6:  		/* lwz R11, <#[R11 + 12]> */
		/* 8211FE0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8211FE0Ch case    6:*/		return 0x8211FE10;
	}
	return 0x8211FE10;
} // Block from 8211FDF4h-8211FE10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211FE10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FE10);
		  /* 8211FE10h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8211FE10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8211FE10h case    0:*/		return 0x8211FE14;
		  /* 8211FE14h */ case    1:  		/* bc 4, CR6_EQ, -24 */
		/* 8211FE14h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8211FDFC;  }
		/* 8211FE14h case    1:*/		return 0x8211FE18;
		  /* 8211FE18h */ case    2:  		/* b 32 */
		/* 8211FE18h case    2:*/		return 0x8211FE38;
		/* 8211FE18h case    2:*/		return 0x8211FE1C;
	}
	return 0x8211FE1C;
} // Block from 8211FE10h-8211FE1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211FE1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FE1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FE1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FE1C);
		  /* 8211FE1Ch */ case    0:  		/* mr R6, R31 */
		/* 8211FE1Ch case    0:*/		regs.R6 = regs.R31;
		/* 8211FE1Ch case    0:*/		return 0x8211FE20;
		  /* 8211FE20h */ case    1:  		/* lwz R7, <#[R25 + 8]> */
		/* 8211FE20h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000008) );
		/* 8211FE20h case    1:*/		return 0x8211FE24;
		  /* 8211FE24h */ case    2:  		/* li R5, 3078 */
		/* 8211FE24h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xC06);
		/* 8211FE24h case    2:*/		return 0x8211FE28;
		  /* 8211FE28h */ case    3:  		/* mr R4, R25 */
		/* 8211FE28h case    3:*/		regs.R4 = regs.R25;
		/* 8211FE28h case    3:*/		return 0x8211FE2C;
		  /* 8211FE2Ch */ case    4:  		/* mr R3, R26 */
		/* 8211FE2Ch case    4:*/		regs.R3 = regs.R26;
		/* 8211FE2Ch case    4:*/		return 0x8211FE30;
		  /* 8211FE30h */ case    5:  		/* bl -25872 */
		/* 8211FE30h case    5:*/		regs.LR = 0x8211FE34; return 0x82119920;
		/* 8211FE30h case    5:*/		return 0x8211FE34;
		  /* 8211FE34h */ case    6:  		/* stw R30, <#[R27 + 44]> */
		/* 8211FE34h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x0000002C) );
		/* 8211FE34h case    6:*/		return 0x8211FE38;
	}
	return 0x8211FE38;
} // Block from 8211FE1Ch-8211FE38h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8211FE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FE38);
		  /* 8211FE38h */ case    0:  		/* li R3, 0 */
		/* 8211FE38h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8211FE38h case    0:*/		return 0x8211FE3C;
	}
	return 0x8211FE3C;
} // Block from 8211FE38h-8211FE3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8211FE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FE3C);
		  /* 8211FE3Ch */ case    0:  		/* addi R1, R1, 256 */
		/* 8211FE3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8211FE3Ch case    0:*/		return 0x8211FE40;
		  /* 8211FE40h */ case    1:  		/* b -584620 */
		/* 8211FE40h case    1:*/		return 0x82091294;
		/* 8211FE40h case    1:*/		return 0x8211FE44;
		  /* 8211FE44h */ case    2:  		/* nop */
		/* 8211FE44h case    2:*/		cpu::op::nop();
		/* 8211FE44h case    2:*/		return 0x8211FE48;
	}
	return 0x8211FE48;
} // Block from 8211FE3Ch-8211FE48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8211FE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FE48);
		  /* 8211FE48h */ case    0:  		/* mfspr R12, LR */
		/* 8211FE48h case    0:*/		regs.R12 = regs.LR;
		/* 8211FE48h case    0:*/		return 0x8211FE4C;
		  /* 8211FE4Ch */ case    1:  		/* bl -584724 */
		/* 8211FE4Ch case    1:*/		regs.LR = 0x8211FE50; return 0x82091238;
		/* 8211FE4Ch case    1:*/		return 0x8211FE50;
		  /* 8211FE50h */ case    2:  		/* stwu R1, <#[R1 - 736]> */
		/* 8211FE50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD20);
		/* 8211FE50h case    2:*/		return 0x8211FE54;
		  /* 8211FE54h */ case    3:  		/* li R21, 0 */
		/* 8211FE54h case    3:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8211FE54h case    3:*/		return 0x8211FE58;
		  /* 8211FE58h */ case    4:  		/* mr R26, R3 */
		/* 8211FE58h case    4:*/		regs.R26 = regs.R3;
		/* 8211FE58h case    4:*/		return 0x8211FE5C;
		  /* 8211FE5Ch */ case    5:  		/* mr R20, R4 */
		/* 8211FE5Ch case    5:*/		regs.R20 = regs.R4;
		/* 8211FE5Ch case    5:*/		return 0x8211FE60;
		  /* 8211FE60h */ case    6:  		/* stb R21, <#[R1 + 112]> */
		/* 8211FE60h case    6:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R1 + 0x00000070) );
		/* 8211FE60h case    6:*/		return 0x8211FE64;
		  /* 8211FE64h */ case    7:  		/* mr R25, R5 */
		/* 8211FE64h case    7:*/		regs.R25 = regs.R5;
		/* 8211FE64h case    7:*/		return 0x8211FE68;
		  /* 8211FE68h */ case    8:  		/* mr R31, R6 */
		/* 8211FE68h case    8:*/		regs.R31 = regs.R6;
		/* 8211FE68h case    8:*/		return 0x8211FE6C;
		  /* 8211FE6Ch */ case    9:  		/* mr R24, R7 */
		/* 8211FE6Ch case    9:*/		regs.R24 = regs.R7;
		/* 8211FE6Ch case    9:*/		return 0x8211FE70;
		  /* 8211FE70h */ case   10:  		/* mr R23, R8 */
		/* 8211FE70h case   10:*/		regs.R23 = regs.R8;
		/* 8211FE70h case   10:*/		return 0x8211FE74;
		  /* 8211FE74h */ case   11:  		/* mr R22, R9 */
		/* 8211FE74h case   11:*/		regs.R22 = regs.R9;
		/* 8211FE74h case   11:*/		return 0x8211FE78;
		  /* 8211FE78h */ case   12:  		/* mr R11, R10 */
		/* 8211FE78h case   12:*/		regs.R11 = regs.R10;
		/* 8211FE78h case   12:*/		return 0x8211FE7C;
		  /* 8211FE7Ch */ case   13:  		/* lbz R9, <#[R11]> */
		/* 8211FE7Ch case   13:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8211FE7Ch case   13:*/		return 0x8211FE80;
		  /* 8211FE80h */ case   14:  		/* addi R11, R11, 1 */
		/* 8211FE80h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211FE80h case   14:*/		return 0x8211FE84;
		  /* 8211FE84h */ case   15:  		/* cmplwi CR6, R9, 0 */
		/* 8211FE84h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211FE84h case   15:*/		return 0x8211FE88;
		  /* 8211FE88h */ case   16:  		/* bc 4, CR6_EQ, -12 */
		/* 8211FE88h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8211FE7C;  }
		/* 8211FE88h case   16:*/		return 0x8211FE8C;
		  /* 8211FE8Ch */ case   17:  		/* subf R11, R10, R11 */
		/* 8211FE8Ch case   17:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8211FE8Ch case   17:*/		return 0x8211FE90;
		  /* 8211FE90h */ case   18:  		/* addi R11, R11, -1 */
		/* 8211FE90h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8211FE90h case   18:*/		return 0x8211FE94;
		  /* 8211FE94h */ case   19:  		/* rlwinm R27, R11, 0, 0, 31 */
		/* 8211FE94h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R27,regs.R11);
		/* 8211FE94h case   19:*/		return 0x8211FE98;
		  /* 8211FE98h */ case   20:  		/* cmplwi CR6, R27, 509 */
		/* 8211FE98h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x000001FD);
		/* 8211FE98h case   20:*/		return 0x8211FE9C;
		  /* 8211FE9Ch */ case   21:  		/* bc 12, CR6_LT, 16 */
		/* 8211FE9Ch case   21:*/		if ( regs.CR[6].lt ) { return 0x8211FEAC;  }
		/* 8211FE9Ch case   21:*/		return 0x8211FEA0;
		  /* 8211FEA0h */ case   22:  		/* lis R3, -32768 */
		/* 8211FEA0h case   22:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8211FEA0h case   22:*/		return 0x8211FEA4;
		  /* 8211FEA4h */ case   23:  		/* ori R3, R3, 16389 */
		/* 8211FEA4h case   23:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8211FEA4h case   23:*/		return 0x8211FEA8;
		  /* 8211FEA8h */ case   24:  		/* b 424 */
		/* 8211FEA8h case   24:*/		return 0x82120050;
		/* 8211FEA8h case   24:*/		return 0x8211FEAC;
	}
	return 0x8211FEAC;
} // Block from 8211FE48h-8211FEACh (25 instructions)

//////////////////////////////////////////////////////
// Block at 8211FEACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FEAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FEAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FEAC);
		  /* 8211FEACh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8211FEACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211FEACh case    0:*/		return 0x8211FEB0;
		  /* 8211FEB0h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 8211FEB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8211FEF0;  }
		/* 8211FEB0h case    1:*/		return 0x8211FEB4;
		  /* 8211FEB4h */ case    2:  		/* mr R5, R27 */
		/* 8211FEB4h case    2:*/		regs.R5 = regs.R27;
		/* 8211FEB4h case    2:*/		return 0x8211FEB8;
		  /* 8211FEB8h */ case    3:  		/* mr R4, R10 */
		/* 8211FEB8h case    3:*/		regs.R4 = regs.R10;
		/* 8211FEB8h case    3:*/		return 0x8211FEBC;
		  /* 8211FEBCh */ case    4:  		/* addi R3, R1, 112 */
		/* 8211FEBCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8211FEBCh case    4:*/		return 0x8211FEC0;
		  /* 8211FEC0h */ case    5:  		/* bl -581768 */
		/* 8211FEC0h case    5:*/		regs.LR = 0x8211FEC4; return 0x82091E38;
		/* 8211FEC0h case    5:*/		return 0x8211FEC4;
		  /* 8211FEC4h */ case    6:  		/* cmplwi CR6, R27, 0 */
		/* 8211FEC4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8211FEC4h case    6:*/		return 0x8211FEC8;
		  /* 8211FEC8h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 8211FEC8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8211FEF0;  }
		/* 8211FEC8h case    7:*/		return 0x8211FECC;
		  /* 8211FECCh */ case    8:  		/* addi R9, R1, 112 */
		/* 8211FECCh case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8211FECCh case    8:*/		return 0x8211FED0;
		  /* 8211FED0h */ case    9:  		/* li R10, 58 */
		/* 8211FED0h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x3A);
		/* 8211FED0h case    9:*/		return 0x8211FED4;
		  /* 8211FED4h */ case   10:  		/* addi R11, R27, 1 */
		/* 8211FED4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x1);
		/* 8211FED4h case   10:*/		return 0x8211FED8;
		  /* 8211FED8h */ case   11:  		/* addi R8, R1, 112 */
		/* 8211FED8h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 8211FED8h case   11:*/		return 0x8211FEDC;
		  /* 8211FEDCh */ case   12:  		/* addi R7, R1, 112 */
		/* 8211FEDCh case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8211FEDCh case   12:*/		return 0x8211FEE0;
		  /* 8211FEE0h */ case   13:  		/* stbx R10, <#[R27 + R9]> */
		/* 8211FEE0h case   13:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R27 + regs.R9 + 0x00000000) );
		/* 8211FEE0h case   13:*/		return 0x8211FEE4;
		  /* 8211FEE4h */ case   14:  		/* addi R27, R11, 1 */
		/* 8211FEE4h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x1);
		/* 8211FEE4h case   14:*/		return 0x8211FEE8;
		  /* 8211FEE8h */ case   15:  		/* stbx R10, <#[R11 + R8]> */
		/* 8211FEE8h case   15:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8211FEE8h case   15:*/		return 0x8211FEEC;
		  /* 8211FEECh */ case   16:  		/* stbx R21, <#[R27 + R7]> */
		/* 8211FEECh case   16:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R27 + regs.R7 + 0x00000000) );
		/* 8211FEECh case   16:*/		return 0x8211FEF0;
	}
	return 0x8211FEF0;
} // Block from 8211FEACh-8211FEF0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8211FEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FEF0);
		  /* 8211FEF0h */ case    0:  		/* cmplwi CR6, R27, 511 */
		/* 8211FEF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x000001FF);
		/* 8211FEF0h case    0:*/		return 0x8211FEF4;
		  /* 8211FEF4h */ case    1:  		/* bc 4, CR6_LT, -84 */
		/* 8211FEF4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211FEA0;  }
		/* 8211FEF4h case    1:*/		return 0x8211FEF8;
		  /* 8211FEF8h */ case    2:  		/* cmplwi CR6, R20, 0 */
		/* 8211FEF8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8211FEF8h case    2:*/		return 0x8211FEFC;
		  /* 8211FEFCh */ case    3:  		/* bc 12, CR6_EQ, 336 */
		/* 8211FEFCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8212004C;  }
		/* 8211FEFCh case    3:*/		return 0x8211FF00;
		  /* 8211FF00h */ case    4:  		/* lwz R30, <#[R1 + 836]> */
		/* 8211FF00h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000344) );
		/* 8211FF00h case    4:*/		return 0x8211FF04;
		  /* 8211FF04h */ case    5:  		/* lwz R29, <#[R1 + 828]> */
		/* 8211FF04h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000033C) );
		/* 8211FF04h case    5:*/		return 0x8211FF08;
		  /* 8211FF08h */ case    6:  		/* lwz R28, <#[R1 + 820]> */
		/* 8211FF08h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000334) );
		/* 8211FF08h case    6:*/		return 0x8211FF0C;
		  /* 8211FF0Ch */ case    7:  		/* lwz R9, <#[R20 + 8]> */
		/* 8211FF0Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000008) );
		/* 8211FF0Ch case    7:*/		return 0x8211FF10;
		  /* 8211FF10h */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 8211FF10h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8211FF10h case    8:*/		return 0x8211FF14;
		  /* 8211FF14h */ case    9:  		/* bc 12, CR6_EQ, 300 */
		/* 8211FF14h case    9:*/		if ( regs.CR[6].eq ) { return 0x82120040;  }
		/* 8211FF14h case    9:*/		return 0x8211FF18;
		  /* 8211FF18h */ case   10:  		/* lwz R11, <#[R9 + 4]> */
		/* 8211FF18h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 8211FF18h case   10:*/		return 0x8211FF1C;
		  /* 8211FF1Ch */ case   11:  		/* cmpwi CR6, R11, 6 */
		/* 8211FF1Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 8211FF1Ch case   11:*/		return 0x8211FF20;
		  /* 8211FF20h */ case   12:  		/* bc 4, CR6_EQ, 288 */
		/* 8211FF20h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82120040;  }
		/* 8211FF20h case   12:*/		return 0x8211FF24;
		  /* 8211FF24h */ case   13:  		/* lwz R11, <#[R9 + 20]> */
		/* 8211FF24h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 8211FF24h case   13:*/		return 0x8211FF28;
		  /* 8211FF28h */ case   14:  		/* lwz R11, <#[R11 + 24]> */
		/* 8211FF28h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8211FF28h case   14:*/		return 0x8211FF2C;
		  /* 8211FF2Ch */ case   15:  		/* mr R10, R11 */
		/* 8211FF2Ch case   15:*/		regs.R10 = regs.R11;
		/* 8211FF2Ch case   15:*/		return 0x8211FF30;
		  /* 8211FF30h */ case   16:  		/* lbz R8, <#[R11]> */
		/* 8211FF30h case   16:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8211FF30h case   16:*/		return 0x8211FF34;
		  /* 8211FF34h */ case   17:  		/* addi R11, R11, 1 */
		/* 8211FF34h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211FF34h case   17:*/		return 0x8211FF38;
		  /* 8211FF38h */ case   18:  		/* cmplwi CR6, R8, 0 */
		/* 8211FF38h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8211FF38h case   18:*/		return 0x8211FF3C;
		  /* 8211FF3Ch */ case   19:  		/* bc 4, CR6_EQ, -12 */
		/* 8211FF3Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x8211FF30;  }
		/* 8211FF3Ch case   19:*/		return 0x8211FF40;
		  /* 8211FF40h */ case   20:  		/* subf R10, R10, R11 */
		/* 8211FF40h case   20:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8211FF40h case   20:*/		return 0x8211FF44;
		  /* 8211FF44h */ case   21:  		/* mr R11, R27 */
		/* 8211FF44h case   21:*/		regs.R11 = regs.R27;
		/* 8211FF44h case   21:*/		return 0x8211FF48;
		  /* 8211FF48h */ case   22:  		/* addi R8, R10, -1 */
		/* 8211FF48h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFFF);
		/* 8211FF48h case   22:*/		return 0x8211FF4C;
		  /* 8211FF4Ch */ case   23:  		/* mr R10, R21 */
		/* 8211FF4Ch case   23:*/		regs.R10 = regs.R21;
		/* 8211FF4Ch case   23:*/		return 0x8211FF50;
		  /* 8211FF50h */ case   24:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 8211FF50h case   24:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 8211FF50h case   24:*/		return 0x8211FF54;
		  /* 8211FF54h */ case   25:  		/* cmplw CR6, R10, R8 */
		/* 8211FF54h case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8211FF54h case   25:*/		return 0x8211FF58;
		  /* 8211FF58h */ case   26:  		/* bc 4, CR6_LT, 40 */
		/* 8211FF58h case   26:*/		if ( !regs.CR[6].lt ) { return 0x8211FF80;  }
		/* 8211FF58h case   26:*/		return 0x8211FF5C;
		  /* 8211FF5Ch */ case   27:  		/* lwz R7, <#[R9 + 20]> */
		/* 8211FF5Ch case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000014) );
		/* 8211FF5Ch case   27:*/		return 0x8211FF60;
		  /* 8211FF60h */ case   28:  		/* addi R6, R1, 112 */
		/* 8211FF60h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 8211FF60h case   28:*/		return 0x8211FF64;
		  /* 8211FF64h */ case   29:  		/* lwz R7, <#[R7 + 24]> */
		/* 8211FF64h case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000018) );
		/* 8211FF64h case   29:*/		return 0x8211FF68;
		  /* 8211FF68h */ case   30:  		/* lbzx R7, <#[R7 + R10]> */
		/* 8211FF68h case   30:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 8211FF68h case   30:*/		return 0x8211FF6C;
		  /* 8211FF6Ch */ case   31:  		/* addi R10, R10, 1 */
		/* 8211FF6Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211FF6Ch case   31:*/		return 0x8211FF70;
		  /* 8211FF70h */ case   32:  		/* stbx R7, <#[R11 + R6]> */
		/* 8211FF70h case   32:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 8211FF70h case   32:*/		return 0x8211FF74;
		  /* 8211FF74h */ case   33:  		/* addi R11, R11, 1 */
		/* 8211FF74h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8211FF74h case   33:*/		return 0x8211FF78;
		  /* 8211FF78h */ case   34:  		/* cmplwi CR6, R11, 511 */
		/* 8211FF78h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000001FF);
		/* 8211FF78h case   34:*/		return 0x8211FF7C;
		  /* 8211FF7Ch */ case   35:  		/* bc 12, CR6_LT, -40 */
		/* 8211FF7Ch case   35:*/		if ( regs.CR[6].lt ) { return 0x8211FF54;  }
		/* 8211FF7Ch case   35:*/		return 0x8211FF80;
	}
	return 0x8211FF80;
} // Block from 8211FEF0h-8211FF80h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8211FF80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FF80);
		  /* 8211FF80h */ case    0:  		/* cmplwi CR6, R11, 511 */
		/* 8211FF80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000001FF);
		/* 8211FF80h case    0:*/		return 0x8211FF84;
		  /* 8211FF84h */ case    1:  		/* bc 4, CR6_LT, -228 */
		/* 8211FF84h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8211FEA0;  }
		/* 8211FF84h case    1:*/		return 0x8211FF88;
		  /* 8211FF88h */ case    2:  		/* addi R8, R1, 112 */
		/* 8211FF88h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 8211FF88h case    2:*/		return 0x8211FF8C;
		  /* 8211FF8Ch */ case    3:  		/* stbx R21, <#[R11 + R8]> */
		/* 8211FF8Ch case    3:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8211FF8Ch case    3:*/		return 0x8211FF90;
		  /* 8211FF90h */ case    4:  		/* lwz R10, <#[R9 + 16]> */
		/* 8211FF90h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000010) );
		/* 8211FF90h case    4:*/		return 0x8211FF94;
		  /* 8211FF94h */ case    5:  		/* cmpwi CR6, R10, 6 */
		/* 8211FF94h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 8211FF94h case    5:*/		return 0x8211FF98;
		  /* 8211FF98h */ case    6:  		/* bc 4, CR6_EQ, 56 */
		/* 8211FF98h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8211FFD0;  }
		/* 8211FF98h case    6:*/		return 0x8211FF9C;
		  /* 8211FF9Ch */ case    7:  		/* lwz R4, <#[R9 + 24]> */
		/* 8211FF9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000018) );
		/* 8211FF9Ch case    7:*/		return 0x8211FFA0;
		  /* 8211FFA0h */ case    8:  		/* addi R10, R1, 112 */
		/* 8211FFA0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8211FFA0h case    8:*/		return 0x8211FFA4;
		  /* 8211FFA4h */ case    9:  		/* mr R9, R22 */
		/* 8211FFA4h case    9:*/		regs.R9 = regs.R22;
		/* 8211FFA4h case    9:*/		return 0x8211FFA8;
		  /* 8211FFA8h */ case   10:  		/* stw R30, <#[R1 + 100]> */
		/* 8211FFA8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8211FFA8h case   10:*/		return 0x8211FFAC;
		  /* 8211FFACh */ case   11:  		/* mr R8, R23 */
		/* 8211FFACh case   11:*/		regs.R8 = regs.R23;
		/* 8211FFACh case   11:*/		return 0x8211FFB0;
		  /* 8211FFB0h */ case   12:  		/* stw R29, <#[R1 + 92]> */
		/* 8211FFB0h case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 8211FFB0h case   12:*/		return 0x8211FFB4;
		  /* 8211FFB4h */ case   13:  		/* mr R7, R24 */
		/* 8211FFB4h case   13:*/		regs.R7 = regs.R24;
		/* 8211FFB4h case   13:*/		return 0x8211FFB8;
		  /* 8211FFB8h */ case   14:  		/* stw R28, <#[R1 + 84]> */
		/* 8211FFB8h case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 8211FFB8h case   14:*/		return 0x8211FFBC;
		  /* 8211FFBCh */ case   15:  		/* mr R6, R31 */
		/* 8211FFBCh case   15:*/		regs.R6 = regs.R31;
		/* 8211FFBCh case   15:*/		return 0x8211FFC0;
		  /* 8211FFC0h */ case   16:  		/* mr R5, R25 */
		/* 8211FFC0h case   16:*/		regs.R5 = regs.R25;
		/* 8211FFC0h case   16:*/		return 0x8211FFC4;
		  /* 8211FFC4h */ case   17:  		/* mr R3, R26 */
		/* 8211FFC4h case   17:*/		regs.R3 = regs.R26;
		/* 8211FFC4h case   17:*/		return 0x8211FFC8;
		  /* 8211FFC8h */ case   18:  		/* bl -384 */
		/* 8211FFC8h case   18:*/		regs.LR = 0x8211FFCC; return 0x8211FE48;
		/* 8211FFC8h case   18:*/		return 0x8211FFCC;
		  /* 8211FFCCh */ case   19:  		/* b 108 */
		/* 8211FFCCh case   19:*/		return 0x82120038;
		/* 8211FFCCh case   19:*/		return 0x8211FFD0;
	}
	return 0x8211FFD0;
} // Block from 8211FF80h-8211FFD0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8211FFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8211FFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8211FFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8211FFD0);
		  /* 8211FFD0h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8211FFD0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8211FFD0h case    0:*/		return 0x8211FFD4;
		  /* 8211FFD4h */ case    1:  		/* addi R9, R1, 112 */
		/* 8211FFD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8211FFD4h case    1:*/		return 0x8211FFD8;
		  /* 8211FFD8h */ case    2:  		/* stbx R21, <#[R11 + R8]> */
		/* 8211FFD8h case    2:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8211FFD8h case    2:*/		return 0x8211FFDC;
		  /* 8211FFDCh */ case    3:  		/* lbz R11, <#[R10]> */
		/* 8211FFDCh case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8211FFDCh case    3:*/		return 0x8211FFE0;
		  /* 8211FFE0h */ case    4:  		/* lbz R8, <#[R9]> */
		/* 8211FFE0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8211FFE0h case    4:*/		return 0x8211FFE4;
		  /* 8211FFE4h */ case    5:  		/* cmpwi CR0, R11, 0 */
		/* 8211FFE4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 8211FFE4h case    5:*/		return 0x8211FFE8;
		  /* 8211FFE8h */ case    6:  		/* subf R11, R8, R11 */
		/* 8211FFE8h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8211FFE8h case    6:*/		return 0x8211FFEC;
		  /* 8211FFECh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8211FFECh case    7:*/		if ( regs.CR[0].eq ) { return 0x82120000;  }
		/* 8211FFECh case    7:*/		return 0x8211FFF0;
		  /* 8211FFF0h */ case    8:  		/* addi R10, R10, 1 */
		/* 8211FFF0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8211FFF0h case    8:*/		return 0x8211FFF4;
		  /* 8211FFF4h */ case    9:  		/* addi R9, R9, 1 */
		/* 8211FFF4h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8211FFF4h case    9:*/		return 0x8211FFF8;
		  /* 8211FFF8h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 8211FFF8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8211FFF8h case   10:*/		return 0x8211FFFC;
		  /* 8211FFFCh */ case   11:  		/* bc 12, CR6_EQ, -32 */
		/* 8211FFFCh case   11:*/		if ( regs.CR[6].eq ) { return 0x8211FFDC;  }
		/* 8211FFFCh case   11:*/		return 0x82120000;
	}
	return 0x82120000;
} // Block from 8211FFD0h-82120000h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82120000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120000);
		  /* 82120000h */ case    0:  		/* cmpwi CR0, R11, 0 */
		/* 82120000h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 82120000h case    0:*/		return 0x82120004;
		  /* 82120004h */ case    1:  		/* bc 4, CR0_EQ, 60 */
		/* 82120004h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82120040;  }
		/* 82120004h case    1:*/		return 0x82120008;
		  /* 82120008h */ case    2:  		/* mr R10, R22 */
		/* 82120008h case    2:*/		regs.R10 = regs.R22;
		/* 82120008h case    2:*/		return 0x8212000C;
		  /* 8212000Ch */ case    3:  		/* stw R30, <#[R1 + 100]> */
		/* 8212000Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8212000Ch case    3:*/		return 0x82120010;
		  /* 82120010h */ case    4:  		/* li R9, 0 */
		/* 82120010h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82120010h case    4:*/		return 0x82120014;
		  /* 82120014h */ case    5:  		/* stw R29, <#[R1 + 92]> */
		/* 82120014h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 82120014h case    5:*/		return 0x82120018;
		  /* 82120018h */ case    6:  		/* mr R8, R23 */
		/* 82120018h case    6:*/		regs.R8 = regs.R23;
		/* 82120018h case    6:*/		return 0x8212001C;
		  /* 8212001Ch */ case    7:  		/* stw R28, <#[R1 + 84]> */
		/* 8212001Ch case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 8212001Ch case    7:*/		return 0x82120020;
		  /* 82120020h */ case    8:  		/* mr R7, R24 */
		/* 82120020h case    8:*/		regs.R7 = regs.R24;
		/* 82120020h case    8:*/		return 0x82120024;
		  /* 82120024h */ case    9:  		/* mr R6, R31 */
		/* 82120024h case    9:*/		regs.R6 = regs.R31;
		/* 82120024h case    9:*/		return 0x82120028;
		  /* 82120028h */ case   10:  		/* mr R5, R25 */
		/* 82120028h case   10:*/		regs.R5 = regs.R25;
		/* 82120028h case   10:*/		return 0x8212002C;
		  /* 8212002Ch */ case   11:  		/* mr R4, R20 */
		/* 8212002Ch case   11:*/		regs.R4 = regs.R20;
		/* 8212002Ch case   11:*/		return 0x82120030;
		  /* 82120030h */ case   12:  		/* mr R3, R26 */
		/* 82120030h case   12:*/		regs.R3 = regs.R26;
		/* 82120030h case   12:*/		return 0x82120034;
		  /* 82120034h */ case   13:  		/* bl -1028 */
		/* 82120034h case   13:*/		regs.LR = 0x82120038; return 0x8211FC30;
		/* 82120034h case   13:*/		return 0x82120038;
	}
	return 0x82120038;
} // Block from 82120000h-82120038h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82120038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120038);
		  /* 82120038h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 82120038h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82120038h case    0:*/		return 0x8212003C;
		  /* 8212003Ch */ case    1:  		/* bc 12, CR0_LT, 20 */
		/* 8212003Ch case    1:*/		if ( regs.CR[0].lt ) { return 0x82120050;  }
		/* 8212003Ch case    1:*/		return 0x82120040;
	}
	return 0x82120040;
} // Block from 82120038h-82120040h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120040);
		  /* 82120040h */ case    0:  		/* lwz R20, <#[R20 + 12]> */
		/* 82120040h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R20 + 0x0000000C) );
		/* 82120040h case    0:*/		return 0x82120044;
		  /* 82120044h */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 82120044h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120044h case    1:*/		return 0x82120048;
		  /* 82120048h */ case    2:  		/* bc 4, CR6_EQ, -316 */
		/* 82120048h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8211FF0C;  }
		/* 82120048h case    2:*/		return 0x8212004C;
	}
	return 0x8212004C;
} // Block from 82120040h-8212004Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8212004Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212004C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212004C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212004C);
		  /* 8212004Ch */ case    0:  		/* li R3, 0 */
		/* 8212004Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8212004Ch case    0:*/		return 0x82120050;
	}
	return 0x82120050;
} // Block from 8212004Ch-82120050h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82120050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120050);
		  /* 82120050h */ case    0:  		/* addi R1, R1, 736 */
		/* 82120050h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x2E0);
		/* 82120050h case    0:*/		return 0x82120054;
		  /* 82120054h */ case    1:  		/* b -585164 */
		/* 82120054h case    1:*/		return 0x82091288;
		/* 82120054h case    1:*/		return 0x82120058;
	}
	return 0x82120058;
} // Block from 82120050h-82120058h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82120058h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120058);
		  /* 82120058h */ case    0:  		/* mfspr R12, LR */
		/* 82120058h case    0:*/		regs.R12 = regs.LR;
		/* 82120058h case    0:*/		return 0x8212005C;
		  /* 8212005Ch */ case    1:  		/* bl -585256 */
		/* 8212005Ch case    1:*/		regs.LR = 0x82120060; return 0x82091234;
		/* 8212005Ch case    1:*/		return 0x82120060;
		  /* 82120060h */ case    2:  		/* stwu R1, <#[R1 - 544]> */
		/* 82120060h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDE0);
		/* 82120060h case    2:*/		return 0x82120064;
		  /* 82120064h */ case    3:  		/* mr R22, R3 */
		/* 82120064h case    3:*/		regs.R22 = regs.R3;
		/* 82120064h case    3:*/		return 0x82120068;
		  /* 82120068h */ case    4:  		/* mr R26, R4 */
		/* 82120068h case    4:*/		regs.R26 = regs.R4;
		/* 82120068h case    4:*/		return 0x8212006C;
		  /* 8212006Ch */ case    5:  		/* mr R21, R5 */
		/* 8212006Ch case    5:*/		regs.R21 = regs.R5;
		/* 8212006Ch case    5:*/		return 0x82120070;
		  /* 82120070h */ case    6:  		/* mr R28, R6 */
		/* 82120070h case    6:*/		regs.R28 = regs.R6;
		/* 82120070h case    6:*/		return 0x82120074;
		  /* 82120074h */ case    7:  		/* mr R27, R7 */
		/* 82120074h case    7:*/		regs.R27 = regs.R7;
		/* 82120074h case    7:*/		return 0x82120078;
		  /* 82120078h */ case    8:  		/* mr R29, R8 */
		/* 82120078h case    8:*/		regs.R29 = regs.R8;
		/* 82120078h case    8:*/		return 0x8212007C;
		  /* 8212007Ch */ case    9:  		/* mr R23, R9 */
		/* 8212007Ch case    9:*/		regs.R23 = regs.R9;
		/* 8212007Ch case    9:*/		return 0x82120080;
		  /* 82120080h */ case   10:  		/* mr R20, R10 */
		/* 82120080h case   10:*/		regs.R20 = regs.R10;
		/* 82120080h case   10:*/		return 0x82120084;
		  /* 82120084h */ case   11:  		/* li R19, 0 */
		/* 82120084h case   11:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82120084h case   11:*/		return 0x82120088;
		  /* 82120088h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 82120088h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82120088h case   12:*/		return 0x8212008C;
		  /* 8212008Ch */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 8212008Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82120094;  }
		/* 8212008Ch case   13:*/		return 0x82120090;
		  /* 82120090h */ case   14:  		/* stw R19, <#[R10]> */
		/* 82120090h case   14:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000000) );
		/* 82120090h case   14:*/		return 0x82120094;
	}
	return 0x82120094;
} // Block from 82120058h-82120094h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82120094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120094);
		  /* 82120094h */ case    0:  		/* lwz R24, <#[R1 + 628]> */
		/* 82120094h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000274) );
		/* 82120094h case    0:*/		return 0x82120098;
		  /* 82120098h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 82120098h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82120098h case    1:*/		return 0x8212009C;
		  /* 8212009Ch */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8212009Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821200A4;  }
		/* 8212009Ch case    2:*/		return 0x821200A0;
		  /* 821200A0h */ case    3:  		/* stw R19, <#[R24]> */
		/* 821200A0h case    3:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R24 + 0x00000000) );
		/* 821200A0h case    3:*/		return 0x821200A4;
	}
	return 0x821200A4;
} // Block from 82120094h-821200A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821200A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821200A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821200A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821200A4);
		  /* 821200A4h */ case    0:  		/* lwz R8, <#[R21 + 8]> */
		/* 821200A4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000008) );
		/* 821200A4h case    0:*/		return 0x821200A8;
		  /* 821200A8h */ case    1:  		/* mr R11, R8 */
		/* 821200A8h case    1:*/		regs.R11 = regs.R8;
		/* 821200A8h case    1:*/		return 0x821200AC;
		  /* 821200ACh */ case    2:  		/* lbz R10, <#[R11]> */
		/* 821200ACh case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821200ACh case    2:*/		return 0x821200B0;
		  /* 821200B0h */ case    3:  		/* addi R11, R11, 1 */
		/* 821200B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821200B0h case    3:*/		return 0x821200B4;
		  /* 821200B4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821200B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821200B4h case    4:*/		return 0x821200B8;
		  /* 821200B8h */ case    5:  		/* bc 4, CR6_EQ, -12 */
		/* 821200B8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821200AC;  }
		/* 821200B8h case    5:*/		return 0x821200BC;
		  /* 821200BCh */ case    6:  		/* subf R11, R8, R11 */
		/* 821200BCh case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821200BCh case    6:*/		return 0x821200C0;
		  /* 821200C0h */ case    7:  		/* rlwinm. R10, R23, 0, 26, 26 */
		/* 821200C0h case    7:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R23);
		/* 821200C0h case    7:*/		return 0x821200C4;
		  /* 821200C4h */ case    8:  		/* addi R11, R11, -1 */
		/* 821200C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821200C4h case    8:*/		return 0x821200C8;
		  /* 821200C8h */ case    9:  		/* rlwinm R6, R11, 0, 0, 31 */
		/* 821200C8h case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R11);
		/* 821200C8h case    9:*/		return 0x821200CC;
		  /* 821200CCh */ case   10:  		/* bc 12, CR0_EQ, 348 */
		/* 821200CCh case   10:*/		if ( regs.CR[0].eq ) { return 0x82120228;  }
		/* 821200CCh case   10:*/		return 0x821200D0;
		  /* 821200D0h */ case   11:  		/* cmplwi CR6, R6, 3 */
		/* 821200D0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000003);
		/* 821200D0h case   11:*/		return 0x821200D4;
		  /* 821200D4h */ case   12:  		/* bc 12, CR6_LT, 320 */
		/* 821200D4h case   12:*/		if ( regs.CR[6].lt ) { return 0x82120214;  }
		/* 821200D4h case   12:*/		return 0x821200D8;
		  /* 821200D8h */ case   13:  		/* lis R10, -32255 */
		/* 821200D8h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821200D8h case   13:*/		return 0x821200DC;
		  /* 821200DCh */ case   14:  		/* mr R11, R8 */
		/* 821200DCh case   14:*/		regs.R11 = regs.R8;
		/* 821200DCh case   14:*/		return 0x821200E0;
		  /* 821200E0h */ case   15:  		/* addi R10, R10, -15780 */
		/* 821200E0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC25C);
		/* 821200E0h case   15:*/		return 0x821200E4;
		  /* 821200E4h */ case   16:  		/* addi R7, R8, 3 */
		/* 821200E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R8,0x3);
		/* 821200E4h case   16:*/		return 0x821200E8;
		  /* 821200E8h */ case   17:  		/* lbz R9, <#[R11]> */
		/* 821200E8h case   17:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821200E8h case   17:*/		return 0x821200EC;
		  /* 821200ECh */ case   18:  		/* lbz R5, <#[R10]> */
		/* 821200ECh case   18:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 821200ECh case   18:*/		return 0x821200F0;
		  /* 821200F0h */ case   19:  		/* subf. R9, R5, R9 */
		/* 821200F0h case   19:*/		cpu::op::subf<1>(regs,&regs.R9,regs.R5,regs.R9);
		/* 821200F0h case   19:*/		return 0x821200F4;
		  /* 821200F4h */ case   20:  		/* bc 4, CR0_EQ, 20 */
		/* 821200F4h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82120108;  }
		/* 821200F4h case   20:*/		return 0x821200F8;
		  /* 821200F8h */ case   21:  		/* addi R11, R11, 1 */
		/* 821200F8h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821200F8h case   21:*/		return 0x821200FC;
		  /* 821200FCh */ case   22:  		/* addi R10, R10, 1 */
		/* 821200FCh case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821200FCh case   22:*/		return 0x82120100;
		  /* 82120100h */ case   23:  		/* cmpw CR6, R11, R7 */
		/* 82120100h case   23:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R7);
		/* 82120100h case   23:*/		return 0x82120104;
		  /* 82120104h */ case   24:  		/* bc 4, CR6_EQ, -28 */
		/* 82120104h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821200E8;  }
		/* 82120104h case   24:*/		return 0x82120108;
	}
	return 0x82120108;
} // Block from 821200A4h-82120108h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82120108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120108);
		  /* 82120108h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82120108h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82120108h case    0:*/		return 0x8212010C;
		  /* 8212010Ch */ case    1:  		/* bc 4, CR0_EQ, 264 */
		/* 8212010Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82120214;  }
		/* 8212010Ch case    1:*/		return 0x82120110;
		  /* 82120110h */ case    2:  		/* addi R11, R6, -3 */
		/* 82120110h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFD);
		/* 82120110h case    2:*/		return 0x82120114;
		  /* 82120114h */ case    3:  		/* addi R31, R8, 3 */
		/* 82120114h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R8,0x3);
		/* 82120114h case    3:*/		return 0x82120118;
		  /* 82120118h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82120118h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82120118h case    4:*/		return 0x8212011C;
		  /* 8212011Ch */ case    5:  		/* bc 4, CR6_EQ, 120 */
		/* 8212011Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82120194;  }
		/* 8212011Ch case    5:*/		return 0x82120120;
		  /* 82120120h */ case    6:  		/* lbz R11, <#[R31]> */
		/* 82120120h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82120120h case    6:*/		return 0x82120124;
		  /* 82120124h */ case    7:  		/* extsb R11, R11 */
		/* 82120124h case    7:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 82120124h case    7:*/		return 0x82120128;
		  /* 82120128h */ case    8:  		/* cmpwi CR6, R11, 49 */
		/* 82120128h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 82120128h case    8:*/		return 0x8212012C;
		  /* 8212012Ch */ case    9:  		/* bc 12, CR6_LT, 232 */
		/* 8212012Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x82120214;  }
		/* 8212012Ch case    9:*/		return 0x82120130;
		  /* 82120130h */ case   10:  		/* cmpwi CR6, R11, 53 */
		/* 82120130h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 82120130h case   10:*/		return 0x82120134;
		  /* 82120134h */ case   11:  		/* bc 4, CR6_LT, 224 */
		/* 82120134h case   11:*/		if ( !regs.CR[6].lt ) { return 0x82120214;  }
		/* 82120134h case   11:*/		return 0x82120138;
		  /* 82120138h */ case   12:  		/* cmplwi CR6, R20, 0 */
		/* 82120138h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120138h case   12:*/		return 0x8212013C;
		  /* 8212013Ch */ case   13:  		/* bc 12, CR6_EQ, 1308 */
		/* 8212013Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 8212013Ch case   13:*/		return 0x82120140;
		  /* 82120140h */ case   14:  		/* li R3, 40 */
		/* 82120140h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 82120140h case   14:*/		return 0x82120144;
		  /* 82120144h */ case   15:  		/* bl -356124 */
		/* 82120144h case   15:*/		regs.LR = 0x82120148; return 0x820C9228;
		/* 82120144h case   15:*/		return 0x82120148;
	}
	return 0x82120148;
} // Block from 82120108h-82120148h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82120148h
// Function '?ScoreFunctionCall@CParse@D3DXShader@@IAAIPAVCNodeFunction@2@PAVCNode@2@1K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120148);
		  /* 82120148h */ case    0:  		/* cmplwi CR0, R3, 0 */
		/* 82120148h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120148h case    0:*/		return 0x8212014C;
		  /* 8212014Ch */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 8212014Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 8212014Ch case    1:*/		return 0x82120150;
		  /* 82120150h */ case    2:  		/* li R5, 9 */
		/* 82120150h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 82120150h case    2:*/		return 0x82120154;
		  /* 82120154h */ case    3:  		/* lbz R11, <#[R31]> */
		/* 82120154h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82120154h case    3:*/		return 0x82120158;
		  /* 82120158h */ case    4:  		/* extsb R11, R11 */
		/* 82120158h case    4:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 82120158h case    4:*/		return 0x8212015C;
		  /* 8212015Ch */ case    5:  		/* addi R8, R11, -48 */
		/* 8212015Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFD0);
		/* 8212015Ch case    5:*/		return 0x82120160;
		  /* 82120160h */ case    6:  		/* li R4, 1 */
		/* 82120160h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82120160h case    6:*/		return 0x82120164;
		  /* 82120164h */ case    7:  		/* li R7, 1 */
		/* 82120164h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82120164h case    7:*/		return 0x82120168;
		  /* 82120168h */ case    8:  		/* li R9, 0 */
		/* 82120168h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82120168h case    8:*/		return 0x8212016C;
		  /* 8212016Ch */ case    9:  		/* li R6, 0 */
		/* 8212016Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8212016Ch case    9:*/		return 0x82120170;
		  /* 82120170h */ case   10:  		/* bl -349424 */
		/* 82120170h case   10:*/		regs.LR = 0x82120174; return 0x820CAC80;
		/* 82120170h case   10:*/		return 0x82120174;
		  /* 82120174h */ case   11:  		/* b 8 */
		/* 82120174h case   11:*/		return 0x8212017C;
		/* 82120174h case   11:*/		return 0x82120178;
	}
	return 0x82120178;
} // Block from 82120148h-82120178h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82120178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120178);
		  /* 82120178h */ case    0:  		/* mr R3, R19 */
		/* 82120178h case    0:*/		regs.R3 = regs.R19;
		/* 82120178h case    0:*/		return 0x8212017C;
	}
	return 0x8212017C;
} // Block from 82120178h-8212017Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8212017Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212017C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212017C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212017C);
		  /* 8212017Ch */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8212017Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8212017Ch case    0:*/		return 0x82120180;
		  /* 82120180h */ case    1:  		/* stw R3, <#[R20]> */
		/* 82120180h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R20 + 0x00000000) );
		/* 82120180h case    1:*/		return 0x82120184;
		  /* 82120184h */ case    2:  		/* bc 4, CR6_EQ, 1236 */
		/* 82120184h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82120658;  }
		/* 82120184h case    2:*/		return 0x82120188;
		  /* 82120188h */ case    3:  		/* lis R3, -32761 */
		/* 82120188h case    3:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82120188h case    3:*/		return 0x8212018C;
		  /* 8212018Ch */ case    4:  		/* ori R3, R3, 14 */
		/* 8212018Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8212018Ch case    4:*/		return 0x82120190;
		  /* 82120190h */ case    5:  		/* b 2376 */
		/* 82120190h case    5:*/		return 0x82120AD8;
		/* 82120190h case    5:*/		return 0x82120194;
	}
	return 0x82120194;
} // Block from 8212017Ch-82120194h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82120194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120194);
		  /* 82120194h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 82120194h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82120194h case    0:*/		return 0x82120198;
		  /* 82120198h */ case    1:  		/* bc 4, CR6_EQ, 124 */
		/* 82120198h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82120214;  }
		/* 82120198h case    1:*/		return 0x8212019C;
		  /* 8212019Ch */ case    2:  		/* lbz R11, <#[R31]> */
		/* 8212019Ch case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8212019Ch case    2:*/		return 0x821201A0;
		  /* 821201A0h */ case    3:  		/* extsb R11, R11 */
		/* 821201A0h case    3:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 821201A0h case    3:*/		return 0x821201A4;
		  /* 821201A4h */ case    4:  		/* cmpwi CR6, R11, 49 */
		/* 821201A4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 821201A4h case    4:*/		return 0x821201A8;
		  /* 821201A8h */ case    5:  		/* bc 12, CR6_LT, 108 */
		/* 821201A8h case    5:*/		if ( regs.CR[6].lt ) { return 0x82120214;  }
		/* 821201A8h case    5:*/		return 0x821201AC;
		  /* 821201ACh */ case    6:  		/* cmpwi CR6, R11, 53 */
		/* 821201ACh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 821201ACh case    6:*/		return 0x821201B0;
		  /* 821201B0h */ case    7:  		/* bc 4, CR6_LT, 100 */
		/* 821201B0h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82120214;  }
		/* 821201B0h case    7:*/		return 0x821201B4;
		  /* 821201B4h */ case    8:  		/* lbz R11, <#[R31 + 1]> */
		/* 821201B4h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		/* 821201B4h case    8:*/		return 0x821201B8;
		  /* 821201B8h */ case    9:  		/* cmplwi CR6, R11, 120 */
		/* 821201B8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000078);
		/* 821201B8h case    9:*/		return 0x821201BC;
		  /* 821201BCh */ case   10:  		/* bc 4, CR6_EQ, 88 */
		/* 821201BCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x82120214;  }
		/* 821201BCh case   10:*/		return 0x821201C0;
		  /* 821201C0h */ case   11:  		/* lbz R11, <#[R31 + 2]> */
		/* 821201C0h case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 821201C0h case   11:*/		return 0x821201C4;
		  /* 821201C4h */ case   12:  		/* extsb R11, R11 */
		/* 821201C4h case   12:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 821201C4h case   12:*/		return 0x821201C8;
		  /* 821201C8h */ case   13:  		/* cmpwi CR6, R11, 49 */
		/* 821201C8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 821201C8h case   13:*/		return 0x821201CC;
		  /* 821201CCh */ case   14:  		/* bc 12, CR6_LT, 72 */
		/* 821201CCh case   14:*/		if ( regs.CR[6].lt ) { return 0x82120214;  }
		/* 821201CCh case   14:*/		return 0x821201D0;
		  /* 821201D0h */ case   15:  		/* cmpwi CR6, R11, 53 */
		/* 821201D0h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 821201D0h case   15:*/		return 0x821201D4;
		  /* 821201D4h */ case   16:  		/* bc 4, CR6_LT, 64 */
		/* 821201D4h case   16:*/		if ( !regs.CR[6].lt ) { return 0x82120214;  }
		/* 821201D4h case   16:*/		return 0x821201D8;
		  /* 821201D8h */ case   17:  		/* cmplwi CR6, R20, 0 */
		/* 821201D8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821201D8h case   17:*/		return 0x821201DC;
		  /* 821201DCh */ case   18:  		/* bc 12, CR6_EQ, 1148 */
		/* 821201DCh case   18:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 821201DCh case   18:*/		return 0x821201E0;
		  /* 821201E0h */ case   19:  		/* li R3, 40 */
		/* 821201E0h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821201E0h case   19:*/		return 0x821201E4;
		  /* 821201E4h */ case   20:  		/* bl -356284 */
		/* 821201E4h case   20:*/		regs.LR = 0x821201E8; return 0x820C9228;
		/* 821201E4h case   20:*/		return 0x821201E8;
		  /* 821201E8h */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 821201E8h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821201E8h case   21:*/		return 0x821201EC;
		  /* 821201ECh */ case   22:  		/* bc 12, CR0_EQ, -116 */
		/* 821201ECh case   22:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 821201ECh case   22:*/		return 0x821201F0;
		  /* 821201F0h */ case   23:  		/* li R5, 9 */
		/* 821201F0h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 821201F0h case   23:*/		return 0x821201F4;
		  /* 821201F4h */ case   24:  		/* lbz R10, <#[R31]> */
		/* 821201F4h case   24:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821201F4h case   24:*/		return 0x821201F8;
		  /* 821201F8h */ case   25:  		/* lbz R11, <#[R31 + 2]> */
		/* 821201F8h case   25:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 821201F8h case   25:*/		return 0x821201FC;
		  /* 821201FCh */ case   26:  		/* extsb R10, R10 */
		/* 821201FCh case   26:*/		cpu::op::extsb<0>(regs,&regs.R10,regs.R10);
		/* 821201FCh case   26:*/		return 0x82120200;
		  /* 82120200h */ case   27:  		/* extsb R11, R11 */
		/* 82120200h case   27:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 82120200h case   27:*/		return 0x82120204;
		  /* 82120204h */ case   28:  		/* addi R7, R10, -48 */
		/* 82120204h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFD0);
		/* 82120204h case   28:*/		return 0x82120208;
		  /* 82120208h */ case   29:  		/* addi R8, R11, -48 */
		/* 82120208h case   29:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFD0);
		/* 82120208h case   29:*/		return 0x8212020C;
		  /* 8212020Ch */ case   30:  		/* li R4, 2 */
		/* 8212020Ch case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8212020Ch case   30:*/		return 0x82120210;
		  /* 82120210h */ case   31:  		/* b -168 */
		/* 82120210h case   31:*/		return 0x82120168;
		/* 82120210h case   31:*/		return 0x82120214;
	}
	return 0x82120214;
} // Block from 82120194h-82120214h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82120214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120214);
		  /* 82120214h */ case    0:  		/* lis R11, -32253 */
		/* 82120214h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82120214h case    0:*/		return 0x82120218;
		  /* 82120218h */ case    1:  		/* mr R7, R8 */
		/* 82120218h case    1:*/		regs.R7 = regs.R8;
		/* 82120218h case    1:*/		return 0x8212021C;
		  /* 8212021Ch */ case    2:  		/* addi R6, R11, 9744 */
		/* 8212021Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2610);
		/* 8212021Ch case    2:*/		return 0x82120220;
		  /* 82120220h */ case    3:  		/* li R5, 3085 */
		/* 82120220h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0xC0D);
		/* 82120220h case    3:*/		return 0x82120224;
		  /* 82120224h */ case    4:  		/* b 2212 */
		/* 82120224h case    4:*/		return 0x82120AC8;
		/* 82120224h case    4:*/		return 0x82120228;
	}
	return 0x82120228;
} // Block from 82120214h-82120228h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82120228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120228);
		  /* 82120228h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 25 */
		/* 82120228h case    0:*/		cpu::op::rlwinm<1,0,24,25>(regs,&regs.R11,regs.R23);
		/* 82120228h case    0:*/		return 0x8212022C;
		  /* 8212022Ch */ case    1:  		/* bc 12, CR0_EQ, 304 */
		/* 8212022Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8212035C;  }
		/* 8212022Ch case    1:*/		return 0x82120230;
		  /* 82120230h */ case    2:  		/* cmplwi CR6, R6, 5 */
		/* 82120230h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000005);
		/* 82120230h case    2:*/		return 0x82120234;
		  /* 82120234h */ case    3:  		/* bc 12, CR6_LT, 248 */
		/* 82120234h case    3:*/		if ( regs.CR[6].lt ) { return 0x8212032C;  }
		/* 82120234h case    3:*/		return 0x82120238;
		  /* 82120238h */ case    4:  		/* lis R10, -32255 */
		/* 82120238h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82120238h case    4:*/		return 0x8212023C;
		  /* 8212023Ch */ case    5:  		/* mr R11, R8 */
		/* 8212023Ch case    5:*/		regs.R11 = regs.R8;
		/* 8212023Ch case    5:*/		return 0x82120240;
		  /* 82120240h */ case    6:  		/* addi R10, R10, -15796 */
		/* 82120240h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFC24C);
		/* 82120240h case    6:*/		return 0x82120244;
		  /* 82120244h */ case    7:  		/* addi R7, R8, 5 */
		/* 82120244h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R8,0x5);
		/* 82120244h case    7:*/		return 0x82120248;
		  /* 82120248h */ case    8:  		/* lbz R9, <#[R11]> */
		/* 82120248h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82120248h case    8:*/		return 0x8212024C;
		  /* 8212024Ch */ case    9:  		/* lbz R5, <#[R10]> */
		/* 8212024Ch case    9:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 8212024Ch case    9:*/		return 0x82120250;
		  /* 82120250h */ case   10:  		/* subf. R9, R5, R9 */
		/* 82120250h case   10:*/		cpu::op::subf<1>(regs,&regs.R9,regs.R5,regs.R9);
		/* 82120250h case   10:*/		return 0x82120254;
		  /* 82120254h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 82120254h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82120268;  }
		/* 82120254h case   11:*/		return 0x82120258;
		  /* 82120258h */ case   12:  		/* addi R11, R11, 1 */
		/* 82120258h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82120258h case   12:*/		return 0x8212025C;
		  /* 8212025Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 8212025Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8212025Ch case   13:*/		return 0x82120260;
		  /* 82120260h */ case   14:  		/* cmpw CR6, R11, R7 */
		/* 82120260h case   14:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R7);
		/* 82120260h case   14:*/		return 0x82120264;
		  /* 82120264h */ case   15:  		/* bc 4, CR6_EQ, -28 */
		/* 82120264h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82120248;  }
		/* 82120264h case   15:*/		return 0x82120268;
	}
	return 0x82120268;
} // Block from 82120228h-82120268h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82120268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82120268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82120268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82120268);
		  /* 82120268h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82120268h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82120268h case    0:*/		return 0x8212026C;
		  /* 8212026Ch */ case    1:  		/* bc 4, CR0_EQ, 192 */
		/* 8212026Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8212032C;  }
		/* 8212026Ch case    1:*/		return 0x82120270;
		  /* 82120270h */ case    2:  		/* addi R11, R6, -5 */
		/* 82120270h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xFFFFFFFB);
		/* 82120270h case    2:*/		return 0x82120274;
		  /* 82120274h */ case    3:  		/* addi R31, R8, 5 */
		/* 82120274h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R8,0x5);
		/* 82120274h case    3:*/		return 0x82120278;
		  /* 82120278h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82120278h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82120278h case    4:*/		return 0x8212027C;
		  /* 8212027Ch */ case    5:  		/* bc 4, CR6_EQ, 68 */
		/* 8212027Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821202C0;  }
		/* 8212027Ch case    5:*/		return 0x82120280;
		  /* 82120280h */ case    6:  		/* lbz R11, <#[R31]> */
		/* 82120280h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82120280h case    6:*/		return 0x82120284;
		  /* 82120284h */ case    7:  		/* extsb R11, R11 */
		/* 82120284h case    7:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 82120284h case    7:*/		return 0x82120288;
		  /* 82120288h */ case    8:  		/* cmpwi CR6, R11, 49 */
		/* 82120288h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 82120288h case    8:*/		return 0x8212028C;
		  /* 8212028Ch */ case    9:  		/* bc 12, CR6_LT, 160 */
		/* 8212028Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x8212032C;  }
		/* 8212028Ch case    9:*/		return 0x82120290;
		  /* 82120290h */ case   10:  		/* cmpwi CR6, R11, 53 */
		/* 82120290h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 82120290h case   10:*/		return 0x82120294;
		  /* 82120294h */ case   11:  		/* bc 4, CR6_LT, 152 */
		/* 82120294h case   11:*/		if ( !regs.CR[6].lt ) { return 0x8212032C;  }
		/* 82120294h case   11:*/		return 0x82120298;
		  /* 82120298h */ case   12:  		/* cmplwi CR6, R20, 0 */
		/* 82120298h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120298h case   12:*/		return 0x8212029C;
		  /* 8212029Ch */ case   13:  		/* bc 12, CR6_EQ, 956 */
		/* 8212029Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 8212029Ch case   13:*/		return 0x821202A0;
		  /* 821202A0h */ case   14:  		/* li R3, 40 */
		/* 821202A0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 821202A0h case   14:*/		return 0x821202A4;
		  /* 821202A4h */ case   15:  		/* bl -356476 */
		/* 821202A4h case   15:*/		regs.LR = 0x821202A8; return 0x820C9228;
		/* 821202A4h case   15:*/		return 0x821202A8;
		  /* 821202A8h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 821202A8h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821202A8h case   16:*/		return 0x821202AC;
		  /* 821202ACh */ case   17:  		/* bc 12, CR0_EQ, -308 */
		/* 821202ACh case   17:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 821202ACh case   17:*/		return 0x821202B0;
		  /* 821202B0h */ case   18:  		/* nor R10, R23, R23 */
		/* 821202B0h case   18:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R23,regs.R23);
		/* 821202B0h case   18:*/		return 0x821202B4;
		  /* 821202B4h */ case   19:  		/* li R5, 16 */
		/* 821202B4h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 821202B4h case   19:*/		return 0x821202B8;
		  /* 821202B8h */ case   20:  		/* rlwimi R5, R10, 27, 29, 29 */
		/* 821202B8h case   20:*/		cpu::op::rlwimi<0,27,29,29>(regs,&regs.R5,regs.R10);
		/* 821202B8h case   20:*/		return 0x821202BC;
		  /* 821202BCh */ case   21:  		/* b -360 */
		/* 821202BCh case   21:*/		return 0x82120154;
		/* 821202BCh case   21:*/		return 0x821202C0;
	}
	return 0x821202C0;
} // Block from 82120268h-821202C0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821202C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821202C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821202C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821202C0);
		  /* 821202C0h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 821202C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821202C0h case    0:*/		return 0x821202C4;
		  /* 821202C4h */ case    1:  		/* bc 4, CR6_EQ, 104 */
		/* 821202C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8212032C;  }
		/* 821202C4h case    1:*/		return 0x821202C8;
		  /* 821202C8h */ case    2:  		/* lbz R11, <#[R31]> */
		/* 821202C8h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821202C8h case    2:*/		return 0x821202CC;
		  /* 821202CCh */ case    3:  		/* extsb R11, R11 */
		/* 821202CCh case    3:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 821202CCh case    3:*/		return 0x821202D0;
		  /* 821202D0h */ case    4:  		/* cmpwi CR6, R11, 49 */
		/* 821202D0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 821202D0h case    4:*/		return 0x821202D4;
		  /* 821202D4h */ case    5:  		/* bc 12, CR6_LT, 88 */
		/* 821202D4h case    5:*/		if ( regs.CR[6].lt ) { return 0x8212032C;  }
		/* 821202D4h case    5:*/		return 0x821202D8;
		  /* 821202D8h */ case    6:  		/* cmpwi CR6, R11, 53 */
		/* 821202D8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 821202D8h case    6:*/		return 0x821202DC;
		  /* 821202DCh */ case    7:  		/* bc 4, CR6_LT, 80 */
		/* 821202DCh case    7:*/		if ( !regs.CR[6].lt ) { return 0x8212032C;  }
		/* 821202DCh case    7:*/		return 0x821202E0;
		  /* 821202E0h */ case    8:  		/* lbz R11, <#[R31 + 1]> */
		/* 821202E0h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000001) );
		/* 821202E0h case    8:*/		return 0x821202E4;
		  /* 821202E4h */ case    9:  		/* cmplwi CR6, R11, 120 */
		/* 821202E4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000078);
		/* 821202E4h case    9:*/		return 0x821202E8;
		  /* 821202E8h */ case   10:  		/* bc 4, CR6_EQ, 68 */
		/* 821202E8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8212032C;  }
		/* 821202E8h case   10:*/		return 0x821202EC;
		  /* 821202ECh */ case   11:  		/* lbz R11, <#[R31 + 2]> */
		/* 821202ECh case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 821202ECh case   11:*/		return 0x821202F0;
		  /* 821202F0h */ case   12:  		/* extsb R11, R11 */
		/* 821202F0h case   12:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 821202F0h case   12:*/		return 0x821202F4;
		  /* 821202F4h */ case   13:  		/* cmpwi CR6, R11, 49 */
		/* 821202F4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 821202F4h case   13:*/		return 0x821202F8;
		  /* 821202F8h */ case   14:  		/* bc 12, CR6_LT, 52 */
		/* 821202F8h case   14:*/		if ( regs.CR[6].lt ) { return 0x8212032C;  }
		/* 821202F8h case   14:*/		return 0x821202FC;
		  /* 821202FCh */ case   15:  		/* cmpwi CR6, R11, 53 */
		/* 821202FCh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000035);
		/* 821202FCh case   15:*/		return 0x82120300;
		  /* 82120300h */ case   16:  		/* bc 4, CR6_LT, 44 */
		/* 82120300h case   16:*/		if ( !regs.CR[6].lt ) { return 0x8212032C;  }
		/* 82120300h case   16:*/		return 0x82120304;
		  /* 82120304h */ case   17:  		/* cmplwi CR6, R20, 0 */
		/* 82120304h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82120304h case   17:*/		return 0x82120308;
		  /* 82120308h */ case   18:  		/* bc 12, CR6_EQ, 848 */
		/* 82120308h case   18:*/		if ( regs.CR[6].eq ) { return 0x82120658;  }
		/* 82120308h case   18:*/		return 0x8212030C;
		  /* 8212030Ch */ case   19:  		/* li R3, 40 */
		/* 8212030Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x28);
		/* 8212030Ch case   19:*/		return 0x82120310;
		  /* 82120310h */ case   20:  		/* bl -356584 */
		/* 82120310h case   20:*/		regs.LR = 0x82120314; return 0x820C9228;
		/* 82120310h case   20:*/		return 0x82120314;
		  /* 82120314h */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 82120314h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82120314h case   21:*/		return 0x82120318;
		  /* 82120318h */ case   22:  		/* bc 12, CR0_EQ, -416 */
		/* 82120318h case   22:*/		if ( regs.CR[0].eq ) { return 0x82120178;  }
		/* 82120318h case   22:*/		return 0x8212031C;
		  /* 8212031Ch */ case   23:  		/* nor R9, R23, R23 */
		/* 8212031Ch case   23:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R23,regs.R23);
		/* 8212031Ch case   23:*/		return 0x82120320;
		  /* 82120320h */ case   24:  		/* li R5, 16 */
		/* 82120320h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 82120320h case   24:*/		return 0x82120324;
		  /* 82120324h */ case   25:  		/* rlwimi R5, R9, 27, 29, 29 */
		/* 82120324h case   25:*/		cpu::op::rlwimi<0,27,29,29>(regs,&regs.R5,regs.R9);
		/* 82120324h case   25:*/		return 0x82120328;
		  /* 82120328h */ case   26:  		/* b -308 */
		/* 82120328h case   26:*/		return 0x821201F4;
		/* 82120328h case   26:*/		return 0x8212032C;
	}
	return 0x8212032C;
} // Block from 821202C0h-8212032Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8212032Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8212032C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8212032C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8212032C);
		  /* 8212032Ch */ case    0:  		/* rlwinm R11, R23, 0, 24, 24 */
		/* 8212032Ch case    0:*/		cpu::op::rlwinm<0,0,24,24>(regs,&regs.R11,regs.R23);
		/* 8212032Ch case    0:*/		return 0x82120330;
		  /* 82120330h */ case    1:  		/* lis R10, -32253 */
		/* 82120330h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82120330h case    1:*/		return 0x82120334;
		  /* 82120334h */ case    2:  		/* subfic R11, R11, 0 */
		/* 82120334h case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82120334h case    2:*/		return 0x82120338;
		  /* 82120338h */ case    3:  		/* addi R6, R10, 9708 */
		/* 82120338h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x25EC);
		/* 82120338h case    3:*/		return 0x8212033C;
		  /* 8212033Ch */ case    4:  		/* subfe R11, R11, R11 */
		/* 8212033Ch case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8212033Ch case    4:*/		return 0x82120340;
		  /* 82120340h */ case    5:  		/* li R5, 3085 */
		/* 82120340h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xC0D);
		/* 82120340h case    5:*/		return 0x82120344;
		  /* 82120344h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82120344h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82120344h case    6:*/		return 0x82120348;
		  /* 82120348h */ case    7:  		/* mr R4, R21 */
		/* 82120348h case    7:*/		regs.R4 = regs.R21;
		/* 82120348h case    7:*/		return 0x8212034C;
		  /* 8212034Ch */ case    8:  		/* addi R7, R11, 117 */
		/* 8212034Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x75);
		/* 8212034Ch case    8:*/		return 0x82120350;
		  /* 82120350h */ case    9:  		/* mr R3, R22 */
		/* 82120350h case    9:*/		regs.R3 = regs.R22;
		/* 82120350h case    9:*/		return 0x82120354;
		  /* 82120354h */ case   10:  		/* bl -27316 */
		/* 82120354h case   10:*/		regs.LR = 0x82120358; return 0x821198A0;
		/* 82120354h case   10:*/		return 0x82120358;
		  /* 82120358h */ case   11:  		/* b 1916 */
		/* 82120358h case   11:*/		return 0x82120AD4;
		/* 82120358h case   11:*/		return 0x8212035C;
	}
	return 0x8212035C;
} // Block from 8212032Ch-8212035Ch (12 instructions)

