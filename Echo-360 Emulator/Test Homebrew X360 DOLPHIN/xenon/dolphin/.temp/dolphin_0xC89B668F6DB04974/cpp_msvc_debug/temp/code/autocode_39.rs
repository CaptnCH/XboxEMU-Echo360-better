#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 821F629Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F629C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F629C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F629C);
		  /* 821F629Ch */ case    0:  		/* mr R4, R30 */
		/* 821F629Ch case    0:*/		regs.R4 = regs.R30;
		/* 821F629Ch case    0:*/		return 0x821F62A0;
		  /* 821F62A0h */ case    1:  		/* mr R3, R31 */
		/* 821F62A0h case    1:*/		regs.R3 = regs.R31;
		/* 821F62A0h case    1:*/		return 0x821F62A4;
		  /* 821F62A4h */ case    2:  		/* bl -16164 */
		/* 821F62A4h case    2:*/		regs.LR = 0x821F62A8; return 0x821F2380;
		/* 821F62A4h case    2:*/		return 0x821F62A8;
		  /* 821F62A8h */ case    3:  		/* mr R29, R3 */
		/* 821F62A8h case    3:*/		regs.R29 = regs.R3;
		/* 821F62A8h case    3:*/		return 0x821F62AC;
		  /* 821F62ACh */ case    4:  		/* mr R4, R3 */
		/* 821F62ACh case    4:*/		regs.R4 = regs.R3;
		/* 821F62ACh case    4:*/		return 0x821F62B0;
		  /* 821F62B0h */ case    5:  		/* cmpwi CR6, R28, 11 */
		/* 821F62B0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x0000000B);
		/* 821F62B0h case    5:*/		return 0x821F62B4;
		  /* 821F62B4h */ case    6:  		/* mr R3, R31 */
		/* 821F62B4h case    6:*/		regs.R3 = regs.R31;
		/* 821F62B4h case    6:*/		return 0x821F62B8;
		  /* 821F62B8h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 821F62B8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821F62C4;  }
		/* 821F62B8h case    7:*/		return 0x821F62BC;
		  /* 821F62BCh */ case    8:  		/* bl -28212 */
		/* 821F62BCh case    8:*/		regs.LR = 0x821F62C0; return 0x821EF488;
		/* 821F62BCh case    8:*/		return 0x821F62C0;
		  /* 821F62C0h */ case    9:  		/* b 60 */
		/* 821F62C0h case    9:*/		return 0x821F62FC;
		/* 821F62C0h case    9:*/		return 0x821F62C4;
	}
	return 0x821F62C4;
} // Block from 821F629Ch-821F62C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F62C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F62C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F62C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F62C4);
		  /* 821F62C4h */ case    0:  		/* bl -28388 */
		/* 821F62C4h case    0:*/		regs.LR = 0x821F62C8; return 0x821EF3E0;
		/* 821F62C4h case    0:*/		return 0x821F62C8;
		  /* 821F62C8h */ case    1:  		/* mr R30, R3 */
		/* 821F62C8h case    1:*/		regs.R30 = regs.R3;
		/* 821F62C8h case    1:*/		return 0x821F62CC;
		  /* 821F62CCh */ case    2:  		/* cmpwi CR6, R28, 74 */
		/* 821F62CCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x0000004A);
		/* 821F62CCh case    2:*/		return 0x821F62D0;
		  /* 821F62D0h */ case    3:  		/* bc 4, CR6_EQ, 48 */
		/* 821F62D0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821F6300;  }
		/* 821F62D0h case    3:*/		return 0x821F62D4;
		  /* 821F62D4h */ case    4:  		/* mr R4, R29 */
		/* 821F62D4h case    4:*/		regs.R4 = regs.R29;
		/* 821F62D4h case    4:*/		return 0x821F62D8;
		  /* 821F62D8h */ case    5:  		/* mr R3, R31 */
		/* 821F62D8h case    5:*/		regs.R3 = regs.R31;
		/* 821F62D8h case    5:*/		return 0x821F62DC;
		  /* 821F62DCh */ case    6:  		/* bl -28244 */
		/* 821F62DCh case    6:*/		regs.LR = 0x821F62E0; return 0x821EF488;
		/* 821F62DCh case    6:*/		return 0x821F62E0;
		  /* 821F62E0h */ case    7:  		/* mr R4, R3 */
		/* 821F62E0h case    7:*/		regs.R4 = regs.R3;
		/* 821F62E0h case    7:*/		return 0x821F62E4;
		  /* 821F62E4h */ case    8:  		/* mr R3, R31 */
		/* 821F62E4h case    8:*/		regs.R3 = regs.R31;
		/* 821F62E4h case    8:*/		return 0x821F62E8;
		  /* 821F62E8h */ case    9:  		/* bl -25776 */
		/* 821F62E8h case    9:*/		regs.LR = 0x821F62EC; return 0x821EFE38;
		/* 821F62E8h case    9:*/		return 0x821F62EC;
		  /* 821F62ECh */ case   10:  		/* mr R5, R3 */
		/* 821F62ECh case   10:*/		regs.R5 = regs.R3;
		/* 821F62ECh case   10:*/		return 0x821F62F0;
		  /* 821F62F0h */ case   11:  		/* mr R4, R30 */
		/* 821F62F0h case   11:*/		regs.R4 = regs.R30;
		/* 821F62F0h case   11:*/		return 0x821F62F4;
		  /* 821F62F4h */ case   12:  		/* mr R3, R31 */
		/* 821F62F4h case   12:*/		regs.R3 = regs.R31;
		/* 821F62F4h case   12:*/		return 0x821F62F8;
		  /* 821F62F8h */ case   13:  		/* bl -24016 */
		/* 821F62F8h case   13:*/		regs.LR = 0x821F62FC; return 0x821F0528;
		/* 821F62F8h case   13:*/		return 0x821F62FC;
	}
	return 0x821F62FC;
} // Block from 821F62C4h-821F62FCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821F62FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F62FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F62FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F62FC);
		  /* 821F62FCh */ case    0:  		/* mr R30, R3 */
		/* 821F62FCh case    0:*/		regs.R30 = regs.R3;
		/* 821F62FCh case    0:*/		return 0x821F6300;
	}
	return 0x821F6300;
} // Block from 821F62FCh-821F6300h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6300);
		  /* 821F6300h */ case    0:  		/* mr R3, R30 */
		/* 821F6300h case    0:*/		regs.R3 = regs.R30;
		/* 821F6300h case    0:*/		return 0x821F6304;
		  /* 821F6304h */ case    1:  		/* addi R1, R1, 160 */
		/* 821F6304h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821F6304h case    1:*/		return 0x821F6308;
		  /* 821F6308h */ case    2:  		/* lfd FR31, <#[R1 - 48]> */
		/* 821F6308h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFD0) );
		/* 821F6308h case    2:*/		return 0x821F630C;
		  /* 821F630Ch */ case    3:  		/* b -1462372 */
		/* 821F630Ch case    3:*/		return 0x820912A8;
		/* 821F630Ch case    3:*/		return 0x821F6310;
	}
	return 0x821F6310;
} // Block from 821F6300h-821F6310h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F6310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6310);
		  /* 821F6310h */ case    0:  		/* mfspr R12, LR */
		/* 821F6310h case    0:*/		regs.R12 = regs.LR;
		/* 821F6310h case    0:*/		return 0x821F6314;
		  /* 821F6314h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F6314h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6314h case    1:*/		return 0x821F6318;
		  /* 821F6318h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821F6318h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F6318h case    2:*/		return 0x821F631C;
		  /* 821F631Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821F631Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F631Ch case    3:*/		return 0x821F6320;
		  /* 821F6320h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821F6320h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821F6320h case    4:*/		return 0x821F6324;
		  /* 821F6324h */ case    5:  		/* mr R31, R3 */
		/* 821F6324h case    5:*/		regs.R31 = regs.R3;
		/* 821F6324h case    5:*/		return 0x821F6328;
		  /* 821F6328h */ case    6:  		/* mr R30, R5 */
		/* 821F6328h case    6:*/		regs.R30 = regs.R5;
		/* 821F6328h case    6:*/		return 0x821F632C;
		  /* 821F632Ch */ case    7:  		/* bl -353532 */
		/* 821F632Ch case    7:*/		regs.LR = 0x821F6330; return 0x8219FE30;
		/* 821F632Ch case    7:*/		return 0x821F6330;
		  /* 821F6330h */ case    8:  		/* mr R3, R31 */
		/* 821F6330h case    8:*/		regs.R3 = regs.R31;
		/* 821F6330h case    8:*/		return 0x821F6334;
		  /* 821F6334h */ case    9:  		/* mr R4, R30 */
		/* 821F6334h case    9:*/		regs.R4 = regs.R30;
		/* 821F6334h case    9:*/		return 0x821F6338;
		  /* 821F6338h */ case   10:  		/* bl -18888 */
		/* 821F6338h case   10:*/		regs.LR = 0x821F633C; return 0x821F1970;
		/* 821F6338h case   10:*/		return 0x821F633C;
		  /* 821F633Ch */ case   11:  		/* mr R3, R31 */
		/* 821F633Ch case   11:*/		regs.R3 = regs.R31;
		/* 821F633Ch case   11:*/		return 0x821F6340;
		  /* 821F6340h */ case   12:  		/* addi R1, R1, 112 */
		/* 821F6340h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821F6340h case   12:*/		return 0x821F6344;
		  /* 821F6344h */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F6344h case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6344h case   13:*/		return 0x821F6348;
		  /* 821F6348h */ case   14:  		/* mtspr LR, R12 */
		/* 821F6348h case   14:*/		regs.LR = regs.R12;
		/* 821F6348h case   14:*/		return 0x821F634C;
		  /* 821F634Ch */ case   15:  		/* ld R30, <#[R1 - 24]> */
		/* 821F634Ch case   15:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F634Ch case   15:*/		return 0x821F6350;
		  /* 821F6350h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 821F6350h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6350h case   16:*/		return 0x821F6354;
		  /* 821F6354h */ case   17:  		/* bclr 20, CR0_LT */
		/* 821F6354h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F6354h case   17:*/		return 0x821F6358;
	}
	return 0x821F6358;
} // Block from 821F6310h-821F6358h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F6358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6358);
		  /* 821F6358h */ case    0:  		/* mfspr R12, LR */
		/* 821F6358h case    0:*/		regs.R12 = regs.LR;
		/* 821F6358h case    0:*/		return 0x821F635C;
		  /* 821F635Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F635Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F635Ch case    1:*/		return 0x821F6360;
		  /* 821F6360h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821F6360h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6360h case    2:*/		return 0x821F6364;
		  /* 821F6364h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 821F6364h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821F6364h case    3:*/		return 0x821F6368;
		  /* 821F6368h */ case    4:  		/* mr R31, R4 */
		/* 821F6368h case    4:*/		regs.R31 = regs.R4;
		/* 821F6368h case    4:*/		return 0x821F636C;
		  /* 821F636Ch */ case    5:  		/* mr R4, R3 */
		/* 821F636Ch case    5:*/		regs.R4 = regs.R3;
		/* 821F636Ch case    5:*/		return 0x821F6370;
		  /* 821F6370h */ case    6:  		/* addi R3, R1, 80 */
		/* 821F6370h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6370h case    6:*/		return 0x821F6374;
		  /* 821F6374h */ case    7:  		/* bl -353604 */
		/* 821F6374h case    7:*/		regs.LR = 0x821F6378; return 0x8219FE30;
		/* 821F6374h case    7:*/		return 0x821F6378;
		  /* 821F6378h */ case    8:  		/* lwz R11, <#[R1 + 80]> */
		/* 821F6378h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F6378h case    8:*/		return 0x821F637C;
		  /* 821F637Ch */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F637Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F637Ch case    9:*/		return 0x821F6380;
		  /* 821F6380h */ case   10:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821F6380h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821F6380h case   10:*/		return 0x821F6384;
		  /* 821F6384h */ case   11:  		/* bc 12, CR0_EQ, 40 */
		/* 821F6384h case   11:*/		if ( regs.CR[0].eq ) { return 0x821F63AC;  }
		/* 821F6384h case   11:*/		return 0x821F6388;
		  /* 821F6388h */ case   12:  		/* li R11, 0 */
		/* 821F6388h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F6388h case   12:*/		return 0x821F638C;
		  /* 821F638Ch */ case   13:  		/* li R10, 0 */
		/* 821F638Ch case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821F638Ch case   13:*/		return 0x821F6390;
		  /* 821F6390h */ case   14:  		/* stw R11, <#[R31]> */
		/* 821F6390h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821F6390h case   14:*/		return 0x821F6394;
		  /* 821F6394h */ case   15:  		/* stw R10, <#[R31 + 4]> */
		/* 821F6394h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821F6394h case   15:*/		return 0x821F6398;
		  /* 821F6398h */ case   16:  		/* addi R1, R1, 112 */
		/* 821F6398h case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821F6398h case   16:*/		return 0x821F639C;
		  /* 821F639Ch */ case   17:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F639Ch case   17:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F639Ch case   17:*/		return 0x821F63A0;
		  /* 821F63A0h */ case   18:  		/* mtspr LR, R12 */
		/* 821F63A0h case   18:*/		regs.LR = regs.R12;
		/* 821F63A0h case   18:*/		return 0x821F63A4;
		  /* 821F63A4h */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 821F63A4h case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F63A4h case   19:*/		return 0x821F63A8;
		  /* 821F63A8h */ case   20:  		/* bclr 20, CR0_LT */
		/* 821F63A8h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F63A8h case   20:*/		return 0x821F63AC;
	}
	return 0x821F63AC;
} // Block from 821F6358h-821F63ACh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821F63ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F63AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F63AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F63AC);
		  /* 821F63ACh */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821F63ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F63ACh case    0:*/		return 0x821F63B0;
		  /* 821F63B0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F63B0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F63B0h case    1:*/		return 0x821F63B4;
		  /* 821F63B4h */ case    2:  		/* addic. R11, R11, -4 */
		/* 821F63B4h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F63B4h case    2:*/		return 0x821F63B8;
		  /* 821F63B8h */ case    3:  		/* bc 12, CR0_EQ, -44 */
		/* 821F63B8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821F638C;  }
		/* 821F63B8h case    3:*/		return 0x821F63BC;
		  /* 821F63BCh */ case    4:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F63BCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F63BCh case    4:*/		return 0x821F63C0;
		  /* 821F63C0h */ case    5:  		/* b -48 */
		/* 821F63C0h case    5:*/		return 0x821F6390;
		/* 821F63C0h case    5:*/		return 0x821F63C4;
		  /* 821F63C4h */ case    6:  		/* nop */
		/* 821F63C4h case    6:*/		cpu::op::nop();
		/* 821F63C4h case    6:*/		return 0x821F63C8;
	}
	return 0x821F63C8;
} // Block from 821F63ACh-821F63C8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F63C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F63C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F63C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F63C8);
		  /* 821F63C8h */ case    0:  		/* mfspr R12, LR */
		/* 821F63C8h case    0:*/		regs.R12 = regs.LR;
		/* 821F63C8h case    0:*/		return 0x821F63CC;
		  /* 821F63CCh */ case    1:  		/* bl -1462656 */
		/* 821F63CCh case    1:*/		regs.LR = 0x821F63D0; return 0x8209124C;
		/* 821F63CCh case    1:*/		return 0x821F63D0;
		  /* 821F63D0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821F63D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821F63D0h case    2:*/		return 0x821F63D4;
		  /* 821F63D4h */ case    3:  		/* mr R28, R4 */
		/* 821F63D4h case    3:*/		regs.R28 = regs.R4;
		/* 821F63D4h case    3:*/		return 0x821F63D8;
		  /* 821F63D8h */ case    4:  		/* mr R4, R5 */
		/* 821F63D8h case    4:*/		regs.R4 = regs.R5;
		/* 821F63D8h case    4:*/		return 0x821F63DC;
		  /* 821F63DCh */ case    5:  		/* mr R26, R3 */
		/* 821F63DCh case    5:*/		regs.R26 = regs.R3;
		/* 821F63DCh case    5:*/		return 0x821F63E0;
		  /* 821F63E0h */ case    6:  		/* mr R25, R5 */
		/* 821F63E0h case    6:*/		regs.R25 = regs.R5;
		/* 821F63E0h case    6:*/		return 0x821F63E4;
		  /* 821F63E4h */ case    7:  		/* bl -38996 */
		/* 821F63E4h case    7:*/		regs.LR = 0x821F63E8; return 0x821ECB90;
		/* 821F63E4h case    7:*/		return 0x821F63E8;
		  /* 821F63E8h */ case    8:  		/* or. R30, R3, R3 */
		/* 821F63E8h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821F63E8h case    8:*/		return 0x821F63EC;
		  /* 821F63ECh */ case    9:  		/* bc 4, CR0_EQ, 80 */
		/* 821F63ECh case    9:*/		if ( !regs.CR[0].eq ) { return 0x821F643C;  }
		/* 821F63ECh case    9:*/		return 0x821F63F0;
		  /* 821F63F0h */ case   10:  		/* lwz R11, <#[R25 + 16]> */
		/* 821F63F0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 821F63F0h case   10:*/		return 0x821F63F4;
		  /* 821F63F4h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821F63F4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F63F4h case   11:*/		return 0x821F63F8;
		  /* 821F63F8h */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 821F63F8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821F6430;  }
		/* 821F63F8h case   12:*/		return 0x821F63FC;
		  /* 821F63FCh */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F63FCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F63FCh case   13:*/		return 0x821F6400;
		  /* 821F6400h */ case   14:  		/* cmpwi CR6, R10, 3 */
		/* 821F6400h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821F6400h case   14:*/		return 0x821F6404;
		  /* 821F6404h */ case   15:  		/* bc 4, CR6_EQ, 44 */
		/* 821F6404h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821F6430;  }
		/* 821F6404h case   15:*/		return 0x821F6408;
	}
	return 0x821F6408;
} // Block from 821F63C8h-821F6408h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F6408h
// Function '?GenerateArrayStore@Compiler@D3DXShader@@AAAXPAUIndexedResult@2@VResult@2@I1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6408);
		  /* 821F6408h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821F6408h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821F6408h case    0:*/		return 0x821F640C;
		  /* 821F640Ch */ case    1:  		/* mr R3, R26 */
		/* 821F640Ch case    1:*/		regs.R3 = regs.R26;
		/* 821F640Ch case    1:*/		return 0x821F6410;
		  /* 821F6410h */ case    2:  		/* cmpwi CR6, R10, 11 */
		/* 821F6410h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 821F6410h case    2:*/		return 0x821F6414;
		  /* 821F6414h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821F6414h case    3:*/		if ( regs.CR[6].eq ) { return 0x821F6420;  }
		/* 821F6414h case    3:*/		return 0x821F6418;
		  /* 821F6418h */ case    4:  		/* li R4, 4801 */
		/* 821F6418h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F6418h case    4:*/		return 0x821F641C;
		  /* 821F641Ch */ case    5:  		/* bl -673204 */
		/* 821F641Ch case    5:*/		regs.LR = 0x821F6420; return 0x82151E68;
		/* 821F641Ch case    5:*/		return 0x821F6420;
	}
	return 0x821F6420;
} // Block from 821F6408h-821F6420h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F6420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6420);
		  /* 821F6420h */ case    0:  		/* li R4, 3606 */
		/* 821F6420h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE16);
		/* 821F6420h case    0:*/		return 0x821F6424;
		  /* 821F6424h */ case    1:  		/* lwz R5, <#[R11 + 24]> */
		/* 821F6424h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 821F6424h case    1:*/		return 0x821F6428;
		  /* 821F6428h */ case    2:  		/* bl -673456 */
		/* 821F6428h case    2:*/		regs.LR = 0x821F642C; return 0x82151D78;
		/* 821F6428h case    2:*/		return 0x821F642C;
		  /* 821F642Ch */ case    3:  		/* b 524 */
		/* 821F642Ch case    3:*/		return 0x821F6638;
		/* 821F642Ch case    3:*/		return 0x821F6430;
	}
	return 0x821F6430;
} // Block from 821F6420h-821F6430h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F6430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6430);
		  /* 821F6430h */ case    0:  		/* li R4, 4801 */
		/* 821F6430h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F6430h case    0:*/		return 0x821F6434;
		  /* 821F6434h */ case    1:  		/* mr R3, R26 */
		/* 821F6434h case    1:*/		regs.R3 = regs.R26;
		/* 821F6434h case    1:*/		return 0x821F6438;
		  /* 821F6438h */ case    2:  		/* bl -673232 */
		/* 821F6438h case    2:*/		regs.LR = 0x821F643C; return 0x82151E68;
		/* 821F6438h case    2:*/		return 0x821F643C;
	}
	return 0x821F643C;
} // Block from 821F6430h-821F643Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F643Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F643C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F643C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F643C);
		  /* 821F643Ch */ case    0:  		/* lwz R9, <#[R28 + 4]> */
		/* 821F643Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000004) );
		/* 821F643Ch case    0:*/		return 0x821F6440;
		  /* 821F6440h */ case    1:  		/* lis R11, -32217 */
		/* 821F6440h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821F6440h case    1:*/		return 0x821F6444;
		  /* 821F6444h */ case    2:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 821F6444h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 821F6444h case    2:*/		return 0x821F6448;
		  /* 821F6448h */ case    3:  		/* stw R28, <#[R1 + 80]> */
		/* 821F6448h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 821F6448h case    3:*/		return 0x821F644C;
		  /* 821F644Ch */ case    4:  		/* rlwinm R8, R9, 0, 31, 31 */
		/* 821F644Ch case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R9);
		/* 821F644Ch case    4:*/		return 0x821F6450;
		  /* 821F6450h */ case    5:  		/* addi R11, R11, 22488 */
		/* 821F6450h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x57D8);
		/* 821F6450h case    5:*/		return 0x821F6454;
		  /* 821F6454h */ case    6:  		/* addic R8, R8, -1 */
		/* 821F6454h case    6:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821F6454h case    6:*/		return 0x821F6458;
		  /* 821F6458h */ case    7:  		/* li R29, 1 */
		/* 821F6458h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821F6458h case    7:*/		return 0x821F645C;
		  /* 821F645Ch */ case    8:  		/* add R10, R10, R11 */
		/* 821F645Ch case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821F645Ch case    8:*/		return 0x821F6460;
		  /* 821F6460h */ case    9:  		/* subfe R11, R8, R8 */
		/* 821F6460h case    9:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R8);
		/* 821F6460h case    9:*/		return 0x821F6464;
		  /* 821F6464h */ case   10:  		/* slw R8, R29, R30 */
		/* 821F6464h case   10:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R29,regs.R30);
		/* 821F6464h case   10:*/		return 0x821F6468;
		  /* 821F6468h */ case   11:  		/* and R11, R11, R9 */
		/* 821F6468h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821F6468h case   11:*/		return 0x821F646C;
		  /* 821F646Ch */ case   12:  		/* lwz R10, <#[R10 - 4]> */
		/* 821F646Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 821F646Ch case   12:*/		return 0x821F6470;
		  /* 821F6470h */ case   13:  		/* rlwinm R9, R8, 0, 0, 30 */
		/* 821F6470h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R8);
		/* 821F6470h case   13:*/		return 0x821F6474;
		  /* 821F6474h */ case   14:  		/* li R8, 0 */
		/* 821F6474h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F6474h case   14:*/		return 0x821F6478;
		  /* 821F6478h */ case   15:  		/* stw R11, <#[R1 + 84]> */
		/* 821F6478h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F6478h case   15:*/		return 0x821F647C;
		  /* 821F647Ch */ case   16:  		/* or R27, R10, R9 */
		/* 821F647Ch case   16:*/		cpu::op::or<0>(regs,&regs.R27,regs.R10,regs.R9);
		/* 821F647Ch case   16:*/		return 0x821F6480;
		  /* 821F6480h */ case   17:  		/* stw R8, <#[R1 + 88]> */
		/* 821F6480h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821F6480h case   17:*/		return 0x821F6484;
		  /* 821F6484h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821F6484h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F6484h case   18:*/		return 0x821F6488;
		  /* 821F6488h */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 821F6488h case   19:*/		if ( regs.CR[6].eq ) { return 0x821F64A0;  }
		/* 821F6488h case   19:*/		return 0x821F648C;
		  /* 821F648Ch */ case   20:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F648Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F648Ch case   20:*/		return 0x821F6490;
		  /* 821F6490h */ case   21:  		/* lwz R9, <#[R1 + 88]> */
		/* 821F6490h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 821F6490h case   21:*/		return 0x821F6494;
		  /* 821F6494h */ case   22:  		/* cmplw CR6, R9, R10 */
		/* 821F6494h case   22:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821F6494h case   22:*/		return 0x821F6498;
		  /* 821F6498h */ case   23:  		/* li R10, 0 */
		/* 821F6498h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821F6498h case   23:*/		return 0x821F649C;
		  /* 821F649Ch */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821F649Ch case   24:*/		if ( !regs.CR[6].eq ) { return 0x821F64A4;  }
		/* 821F649Ch case   24:*/		return 0x821F64A0;
	}
	return 0x821F64A0;
} // Block from 821F643Ch-821F64A0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821F64A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F64A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F64A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F64A0);
		  /* 821F64A0h */ case    0:  		/* mr R10, R29 */
		/* 821F64A0h case    0:*/		regs.R10 = regs.R29;
		/* 821F64A0h case    0:*/		return 0x821F64A4;
	}
	return 0x821F64A4;
} // Block from 821F64A0h-821F64A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F64A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F64A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F64A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F64A4);
		  /* 821F64A4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821F64A4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821F64A4h case    0:*/		return 0x821F64A8;
		  /* 821F64A8h */ case    1:  		/* bc 4, CR0_EQ, 308 */
		/* 821F64A8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F65DC;  }
		/* 821F64A8h case    1:*/		return 0x821F64AC;
		  /* 821F64ACh */ case    2:  		/* lwz R10, <#[R1 + 88]> */
		/* 821F64ACh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821F64ACh case    2:*/		return 0x821F64B0;
		  /* 821F64B0h */ case    3:  		/* addi R10, R10, 2 */
		/* 821F64B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821F64B0h case    3:*/		return 0x821F64B4;
		  /* 821F64B4h */ case    4:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821F64B4h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821F64B4h case    4:*/		return 0x821F64B8;
		  /* 821F64B8h */ case    5:  		/* add R31, R10, R11 */
		/* 821F64B8h case    5:*/		cpu::op::add<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821F64B8h case    5:*/		return 0x821F64BC;
		  /* 821F64BCh */ case    6:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821F64BCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F64BCh case    6:*/		return 0x821F64C0;
		  /* 821F64C0h */ case    7:  		/* slw R10, R29, R11 */
		/* 821F64C0h case    7:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R29,regs.R11);
		/* 821F64C0h case    7:*/		return 0x821F64C4;
		  /* 821F64C4h */ case    8:  		/* and R10, R10, R27 */
		/* 821F64C4h case    8:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 821F64C4h case    8:*/		return 0x821F64C8;
		  /* 821F64C8h */ case    9:  		/* rlwinm. R10, R10, 0, 0, 30 */
		/* 821F64C8h case    9:*/		cpu::op::rlwinm<1,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F64C8h case    9:*/		return 0x821F64CC;
		  /* 821F64CCh */ case   10:  		/* bc 12, CR0_EQ, 216 */
		/* 821F64CCh case   10:*/		if ( regs.CR[0].eq ) { return 0x821F65A4;  }
		/* 821F64CCh case   10:*/		return 0x821F64D0;
		  /* 821F64D0h */ case   11:  		/* cmpw CR6, R11, R30 */
		/* 821F64D0h case   11:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R30);
		/* 821F64D0h case   11:*/		return 0x821F64D4;
		  /* 821F64D4h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 821F64D4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F64E8;  }
		/* 821F64D4h case   12:*/		return 0x821F64D8;
		  /* 821F64D8h */ case   13:  		/* li R4, 3577 */
		/* 821F64D8h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0xDF9);
		/* 821F64D8h case   13:*/		return 0x821F64DC;
		  /* 821F64DCh */ case   14:  		/* mr R3, R26 */
		/* 821F64DCh case   14:*/		regs.R3 = regs.R26;
		/* 821F64DCh case   14:*/		return 0x821F64E0;
		  /* 821F64E0h */ case   15:  		/* bl -673640 */
		/* 821F64E0h case   15:*/		regs.LR = 0x821F64E4; return 0x82151D78;
		/* 821F64E0h case   15:*/		return 0x821F64E4;
		  /* 821F64E4h */ case   16:  		/* b 176 */
		/* 821F64E4h case   16:*/		return 0x821F6594;
		/* 821F64E4h case   16:*/		return 0x821F64E8;
	}
	return 0x821F64E8;
} // Block from 821F64A4h-821F64E8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821F64E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F64E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F64E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F64E8);
		  /* 821F64E8h */ case    0:  		/* li R10, 0 */
		/* 821F64E8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821F64E8h case    0:*/		return 0x821F64EC;
		  /* 821F64ECh */ case    1:  		/* cmpwi CR6, R30, 1 */
		/* 821F64ECh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 821F64ECh case    1:*/		return 0x821F64F0;
		  /* 821F64F0h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821F64F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F6514;  }
		/* 821F64F0h case    2:*/		return 0x821F64F4;
		  /* 821F64F4h */ case    3:  		/* cmpwi CR6, R30, 2 */
		/* 821F64F4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000002);
		/* 821F64F4h case    3:*/		return 0x821F64F8;
		  /* 821F64F8h */ case    4:  		/* bc 4, CR6_EQ, 52 */
		/* 821F64F8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821F652C;  }
		/* 821F64F8h case    4:*/		return 0x821F64FC;
		  /* 821F64FCh */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 821F64FCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F64FCh case    5:*/		return 0x821F6500;
		  /* 821F6500h */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 821F6500h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821F652C;  }
		/* 821F6500h case    6:*/		return 0x821F6504;
		  /* 821F6504h */ case    7:  		/* li R4, 3578 */
		/* 821F6504h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xDFA);
		/* 821F6504h case    7:*/		return 0x821F6508;
		  /* 821F6508h */ case    8:  		/* mr R3, R26 */
		/* 821F6508h case    8:*/		regs.R3 = regs.R26;
		/* 821F6508h case    8:*/		return 0x821F650C;
		  /* 821F650Ch */ case    9:  		/* bl -673684 */
		/* 821F650Ch case    9:*/		regs.LR = 0x821F6510; return 0x82151D78;
		/* 821F650Ch case    9:*/		return 0x821F6510;
		  /* 821F6510h */ case   10:  		/* b 296 */
		/* 821F6510h case   10:*/		return 0x821F6638;
		/* 821F6510h case   10:*/		return 0x821F6514;
	}
	return 0x821F6514;
} // Block from 821F64E8h-821F6514h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F6514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6514);
		  /* 821F6514h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 821F6514h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821F6514h case    0:*/		return 0x821F6518;
		  /* 821F6518h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821F6518h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821F652C;  }
		/* 821F6518h case    1:*/		return 0x821F651C;
		  /* 821F651Ch */ case    2:  		/* li R4, 3578 */
		/* 821F651Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xDFA);
		/* 821F651Ch case    2:*/		return 0x821F6520;
		  /* 821F6520h */ case    3:  		/* mr R3, R26 */
		/* 821F6520h case    3:*/		regs.R3 = regs.R26;
		/* 821F6520h case    3:*/		return 0x821F6524;
		  /* 821F6524h */ case    4:  		/* bl -673708 */
		/* 821F6524h case    4:*/		regs.LR = 0x821F6528; return 0x82151D78;
		/* 821F6524h case    4:*/		return 0x821F6528;
		  /* 821F6528h */ case    5:  		/* mr R10, R29 */
		/* 821F6528h case    5:*/		regs.R10 = regs.R29;
		/* 821F6528h case    5:*/		return 0x821F652C;
	}
	return 0x821F652C;
} // Block from 821F6514h-821F652Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F652Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F652C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F652C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F652C);
		  /* 821F652Ch */ case    0:  		/* rlwinm. R11, R10, 0, 24, 31 */
		/* 821F652Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R10);
		/* 821F652Ch case    0:*/		return 0x821F6530;
		  /* 821F6530h */ case    1:  		/* bc 4, CR0_EQ, 100 */
		/* 821F6530h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F6594;  }
		/* 821F6530h case    1:*/		return 0x821F6534;
		  /* 821F6534h */ case    2:  		/* lwz R10, <#[R25 + 16]> */
		/* 821F6534h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000010) );
		/* 821F6534h case    2:*/		return 0x821F6538;
		  /* 821F6538h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821F6538h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F6538h case    3:*/		return 0x821F653C;
		  /* 821F653Ch */ case    4:  		/* bc 12, CR6_EQ, 148 */
		/* 821F653Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821F65D0;  }
		/* 821F653Ch case    4:*/		return 0x821F6540;
		  /* 821F6540h */ case    5:  		/* lwz R11, <#[R10 + 4]> */
		/* 821F6540h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821F6540h case    5:*/		return 0x821F6544;
		  /* 821F6544h */ case    6:  		/* cmpwi CR6, R11, 3 */
		/* 821F6544h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821F6544h case    6:*/		return 0x821F6548;
		  /* 821F6548h */ case    7:  		/* bc 4, CR6_EQ, 136 */
		/* 821F6548h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821F65D0;  }
		/* 821F6548h case    7:*/		return 0x821F654C;
		  /* 821F654Ch */ case    8:  		/* lwz R11, <#[R10 + 16]> */
		/* 821F654Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821F654Ch case    8:*/		return 0x821F6550;
		  /* 821F6550h */ case    9:  		/* cmpwi CR6, R11, 11 */
		/* 821F6550h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 821F6550h case    9:*/		return 0x821F6554;
		  /* 821F6554h */ case   10:  		/* bc 4, CR6_EQ, 92 */
		/* 821F6554h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821F65B0;  }
		/* 821F6554h case   10:*/		return 0x821F6558;
		  /* 821F6558h */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 821F6558h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821F6558h case   11:*/		return 0x821F655C;
		  /* 821F655Ch */ case   12:  		/* lwz R11, <#[R11 + 16]> */
		/* 821F655Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821F655Ch case   12:*/		return 0x821F6560;
		  /* 821F6560h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821F6560h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F6560h case   13:*/		return 0x821F6564;
		  /* 821F6564h */ case   14:  		/* bc 12, CR6_EQ, 96 */
		/* 821F6564h case   14:*/		if ( regs.CR[6].eq ) { return 0x821F65C4;  }
		/* 821F6564h case   14:*/		return 0x821F6568;
		  /* 821F6568h */ case   15:  		/* lwz R9, <#[R11 + 4]> */
		/* 821F6568h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6568h case   15:*/		return 0x821F656C;
		  /* 821F656Ch */ case   16:  		/* cmpwi CR6, R9, 3 */
		/* 821F656Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000003);
		/* 821F656Ch case   16:*/		return 0x821F6570;
		  /* 821F6570h */ case   17:  		/* bc 4, CR6_EQ, 84 */
		/* 821F6570h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821F65C4;  }
		/* 821F6570h case   17:*/		return 0x821F6574;
		  /* 821F6574h */ case   18:  		/* lwz R9, <#[R11 + 16]> */
		/* 821F6574h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 821F6574h case   18:*/		return 0x821F6578;
		  /* 821F6578h */ case   19:  		/* mr R3, R26 */
		/* 821F6578h case   19:*/		regs.R3 = regs.R26;
		/* 821F6578h case   19:*/		return 0x821F657C;
		  /* 821F657Ch */ case   20:  		/* cmpwi CR6, R9, 11 */
		/* 821F657Ch case   20:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000B);
		/* 821F657Ch case   20:*/		return 0x821F6580;
		  /* 821F6580h */ case   21:  		/* bc 4, CR6_EQ, 60 */
		/* 821F6580h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821F65BC;  }
		/* 821F6580h case   21:*/		return 0x821F6584;
		  /* 821F6584h */ case   22:  		/* li R4, 3579 */
		/* 821F6584h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0xDFB);
		/* 821F6584h case   22:*/		return 0x821F6588;
		  /* 821F6588h */ case   23:  		/* lwz R6, <#[R10 + 24]> */
		/* 821F6588h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000018) );
		/* 821F6588h case   23:*/		return 0x821F658C;
		  /* 821F658Ch */ case   24:  		/* lwz R5, <#[R11 + 24]> */
		/* 821F658Ch case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 821F658Ch case   24:*/		return 0x821F6590;
		  /* 821F6590h */ case   25:  		/* bl -673816 */
		/* 821F6590h case   25:*/		regs.LR = 0x821F6594; return 0x82151D78;
		/* 821F6590h case   25:*/		return 0x821F6594;
	}
	return 0x821F6594;
} // Block from 821F652Ch-821F6594h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821F6594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6594);
		  /* 821F6594h */ case    0:  		/* addi R3, R1, 80 */
		/* 821F6594h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6594h case    0:*/		return 0x821F6598;
		  /* 821F6598h */ case    1:  		/* bl -15200 */
		/* 821F6598h case    1:*/		regs.LR = 0x821F659C; return 0x821F2A38;
		/* 821F6598h case    1:*/		return 0x821F659C;
		  /* 821F659Ch */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 821F659Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F659Ch case    2:*/		return 0x821F65A0;
		  /* 821F65A0h */ case    3:  		/* b -284 */
		/* 821F65A0h case    3:*/		return 0x821F6484;
		/* 821F65A0h case    3:*/		return 0x821F65A4;
	}
	return 0x821F65A4;
} // Block from 821F6594h-821F65A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F65A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F65A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F65A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F65A4);
		  /* 821F65A4h */ case    0:  		/* addi R3, R1, 80 */
		/* 821F65A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F65A4h case    0:*/		return 0x821F65A8;
		  /* 821F65A8h */ case    1:  		/* bl -218952 */
		/* 821F65A8h case    1:*/		regs.LR = 0x821F65AC; return 0x821C0E60;
		/* 821F65A8h case    1:*/		return 0x821F65AC;
		  /* 821F65ACh */ case    2:  		/* b -16 */
		/* 821F65ACh case    2:*/		return 0x821F659C;
		/* 821F65ACh case    2:*/		return 0x821F65B0;
	}
	return 0x821F65B0;
} // Block from 821F65A4h-821F65B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F65B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F65B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F65B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F65B0);
		  /* 821F65B0h */ case    0:  		/* li R4, 4801 */
		/* 821F65B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F65B0h case    0:*/		return 0x821F65B4;
		  /* 821F65B4h */ case    1:  		/* mr R3, R26 */
		/* 821F65B4h case    1:*/		regs.R3 = regs.R26;
		/* 821F65B4h case    1:*/		return 0x821F65B8;
		  /* 821F65B8h */ case    2:  		/* bl -673616 */
		/* 821F65B8h case    2:*/		regs.LR = 0x821F65BC; return 0x82151E68;
		/* 821F65B8h case    2:*/		return 0x821F65BC;
	}
	return 0x821F65BC;
} // Block from 821F65B0h-821F65BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F65BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F65BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F65BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F65BC);
		  /* 821F65BCh */ case    0:  		/* li R4, 4801 */
		/* 821F65BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F65BCh case    0:*/		return 0x821F65C0;
		  /* 821F65C0h */ case    1:  		/* bl -673624 */
		/* 821F65C0h case    1:*/		regs.LR = 0x821F65C4; return 0x82151E68;
		/* 821F65C0h case    1:*/		return 0x821F65C4;
	}
	return 0x821F65C4;
} // Block from 821F65BCh-821F65C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F65C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F65C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F65C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F65C4);
		  /* 821F65C4h */ case    0:  		/* li R4, 4801 */
		/* 821F65C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F65C4h case    0:*/		return 0x821F65C8;
		  /* 821F65C8h */ case    1:  		/* mr R3, R26 */
		/* 821F65C8h case    1:*/		regs.R3 = regs.R26;
		/* 821F65C8h case    1:*/		return 0x821F65CC;
		  /* 821F65CCh */ case    2:  		/* bl -673636 */
		/* 821F65CCh case    2:*/		regs.LR = 0x821F65D0; return 0x82151E68;
		/* 821F65CCh case    2:*/		return 0x821F65D0;
	}
	return 0x821F65D0;
} // Block from 821F65C4h-821F65D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F65D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F65D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F65D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F65D0);
		  /* 821F65D0h */ case    0:  		/* li R4, 4801 */
		/* 821F65D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F65D0h case    0:*/		return 0x821F65D4;
		  /* 821F65D4h */ case    1:  		/* mr R3, R26 */
		/* 821F65D4h case    1:*/		regs.R3 = regs.R26;
		/* 821F65D4h case    1:*/		return 0x821F65D8;
		  /* 821F65D8h */ case    2:  		/* bl -673648 */
		/* 821F65D8h case    2:*/		regs.LR = 0x821F65DC; return 0x82151E68;
		/* 821F65D8h case    2:*/		return 0x821F65DC;
	}
	return 0x821F65DC;
} // Block from 821F65D0h-821F65DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F65DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F65DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F65DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F65DC);
		  /* 821F65DCh */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 821F65DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821F65DCh case    0:*/		return 0x821F65E0;
	}
	return 0x821F65E0;
} // Block from 821F65DCh-821F65E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F65E0h
// Function '?GenerateArrayVariableLoad@Compiler@D3DXShader@@AAA_NPAVResultStackEnumerator@2@VResult@2@III@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F65E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F65E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F65E0);
		  /* 821F65E0h */ case    0:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F65E0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F65E0h case    0:*/		return 0x821F65E4;
		  /* 821F65E4h */ case    1:  		/* bc 4, CR0_EQ, 40 */
		/* 821F65E4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F660C;  }
		/* 821F65E4h case    1:*/		return 0x821F65E8;
		  /* 821F65E8h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 821F65E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821F65E8h case    2:*/		return 0x821F65EC;
		  /* 821F65ECh */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F65ECh case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F65ECh case    3:*/		return 0x821F65F0;
		  /* 821F65F0h */ case    4:  		/* addic. R3, R11, -4 */
		/* 821F65F0h case    4:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821F65F0h case    4:*/		return 0x821F65F4;
		  /* 821F65F4h */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 821F65F4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821F660C;  }
		/* 821F65F4h case    5:*/		return 0x821F65F8;
		  /* 821F65F8h */ case    6:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F65F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F65F8h case    6:*/		return 0x821F65FC;
		  /* 821F65FCh */ case    7:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F65FCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F65FCh case    7:*/		return 0x821F6600;
		  /* 821F6600h */ case    8:  		/* addi R11, R11, 1 */
		/* 821F6600h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F6600h case    8:*/		return 0x821F6604;
		  /* 821F6604h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 821F6604h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F6604h case    9:*/		return 0x821F6608;
		  /* 821F6608h */ case   10:  		/* bc 4, CR6_GT, 16 */
		/* 821F6608h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821F6618;  }
		/* 821F6608h case   10:*/		return 0x821F660C;
	}
	return 0x821F660C;
} // Block from 821F65E0h-821F660Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F660Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F660C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F660C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F660C);
		  /* 821F660Ch */ case    0:  		/* li R4, 1 */
		/* 821F660Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F660Ch case    0:*/		return 0x821F6610;
		  /* 821F6610h */ case    1:  		/* mr R3, R28 */
		/* 821F6610h case    1:*/		regs.R3 = regs.R28;
		/* 821F6610h case    1:*/		return 0x821F6614;
		  /* 821F6614h */ case    2:  		/* bl -358236 */
		/* 821F6614h case    2:*/		regs.LR = 0x821F6618; return 0x8219EEB8;
		/* 821F6614h case    2:*/		return 0x821F6618;
	}
	return 0x821F6618;
} // Block from 821F660Ch-821F6618h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6618);
		  /* 821F6618h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F6618h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F6618h case    0:*/		return 0x821F661C;
		  /* 821F661Ch */ case    1:  		/* addi R10, R11, 2 */
		/* 821F661Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x2);
		/* 821F661Ch case    1:*/		return 0x821F6620;
		  /* 821F6620h */ case    2:  		/* addi R9, R11, 1 */
		/* 821F6620h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821F6620h case    2:*/		return 0x821F6624;
		  /* 821F6624h */ case    3:  		/* rlwinm R11, R10, 3, 0, 28 */
		/* 821F6624h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R10);
		/* 821F6624h case    3:*/		return 0x821F6628;
		  /* 821F6628h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821F6628h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821F6628h case    4:*/		return 0x821F662C;
		  /* 821F662Ch */ case    5:  		/* add R11, R11, R3 */
		/* 821F662Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821F662Ch case    5:*/		return 0x821F6630;
		  /* 821F6630h */ case    6:  		/* stw R30, <#[R11]> */
		/* 821F6630h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6630h case    6:*/		return 0x821F6634;
		  /* 821F6634h */ case    7:  		/* stw R25, <#[R11 + 4]> */
		/* 821F6634h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6634h case    7:*/		return 0x821F6638;
	}
	return 0x821F6638;
} // Block from 821F6618h-821F6638h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F6638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6638);
		  /* 821F6638h */ case    0:  		/* addi R1, R1, 160 */
		/* 821F6638h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821F6638h case    0:*/		return 0x821F663C;
		  /* 821F663Ch */ case    1:  		/* b -1463200 */
		/* 821F663Ch case    1:*/		return 0x8209129C;
		/* 821F663Ch case    1:*/		return 0x821F6640;
	}
	return 0x821F6640;
} // Block from 821F6638h-821F6640h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F6640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6640);
		  /* 821F6640h */ case    0:  		/* mfspr R12, LR */
		/* 821F6640h case    0:*/		regs.R12 = regs.LR;
		/* 821F6640h case    0:*/		return 0x821F6644;
		  /* 821F6644h */ case    1:  		/* bl -1463276 */
		/* 821F6644h case    1:*/		regs.LR = 0x821F6648; return 0x82091258;
		/* 821F6644h case    1:*/		return 0x821F6648;
		  /* 821F6648h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821F6648h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821F6648h case    2:*/		return 0x821F664C;
		  /* 821F664Ch */ case    3:  		/* mr R29, R3 */
		/* 821F664Ch case    3:*/		regs.R29 = regs.R3;
		/* 821F664Ch case    3:*/		return 0x821F6650;
		  /* 821F6650h */ case    4:  		/* mr R3, R4 */
		/* 821F6650h case    4:*/		regs.R3 = regs.R4;
		/* 821F6650h case    4:*/		return 0x821F6654;
		  /* 821F6654h */ case    5:  		/* bl -19844 */
		/* 821F6654h case    5:*/		regs.LR = 0x821F6658; return 0x821F18D0;
		/* 821F6654h case    5:*/		return 0x821F6658;
		  /* 821F6658h */ case    6:  		/* lwz R3, <#[R29 + 576]> */
		/* 821F6658h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000240) );
		/* 821F6658h case    6:*/		return 0x821F665C;
		  /* 821F665Ch */ case    7:  		/* bl -19852 */
		/* 821F665Ch case    7:*/		regs.LR = 0x821F6660; return 0x821F18D0;
		/* 821F665Ch case    7:*/		return 0x821F6660;
		  /* 821F6660h */ case    8:  		/* lwz R11, <#[R29 + 580]> */
		/* 821F6660h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000244) );
		/* 821F6660h case    8:*/		return 0x821F6664;
		  /* 821F6664h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F6664h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6664h case    9:*/		return 0x821F6668;
		  /* 821F6668h */ case   10:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821F6668h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821F6668h case   10:*/		return 0x821F666C;
		  /* 821F666Ch */ case   11:  		/* bc 4, CR0_EQ, 256 */
		/* 821F666Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821F676C;  }
		/* 821F666Ch case   11:*/		return 0x821F6670;
		  /* 821F6670h */ case   12:  		/* cmplwi CR0, R10, 0 */
		/* 821F6670h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821F6670h case   12:*/		return 0x821F6674;
		  /* 821F6674h */ case   13:  		/* bc 12, CR0_EQ, 248 */
		/* 821F6674h case   13:*/		if ( regs.CR[0].eq ) { return 0x821F676C;  }
		/* 821F6674h case   13:*/		return 0x821F6678;
		  /* 821F6678h */ case   14:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821F6678h case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821F6678h case   14:*/		return 0x821F667C;
		  /* 821F667Ch */ case   15:  		/* li R28, 0 */
		/* 821F667Ch case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821F667Ch case   15:*/		return 0x821F6680;
		  /* 821F6680h */ case   16:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821F6680h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821F6680h case   16:*/		return 0x821F6684;
		  /* 821F6684h */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 821F6684h case   17:*/		if ( regs.CR[0].eq ) { return 0x821F6690;  }
		/* 821F6684h case   17:*/		return 0x821F6688;
		  /* 821F6688h */ case   18:  		/* mr R11, R28 */
		/* 821F6688h case   18:*/		regs.R11 = regs.R28;
		/* 821F6688h case   18:*/		return 0x821F668C;
		  /* 821F668Ch */ case   19:  		/* b 16 */
		/* 821F668Ch case   19:*/		return 0x821F669C;
		/* 821F668Ch case   19:*/		return 0x821F6690;
	}
	return 0x821F6690;
} // Block from 821F6640h-821F6690h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F6690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6690);
		  /* 821F6690h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821F6690h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6690h case    0:*/		return 0x821F6694;
		  /* 821F6694h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6694h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6694h case    1:*/		return 0x821F6698;
		  /* 821F6698h */ case    2:  		/* addi R11, R11, -4 */
		/* 821F6698h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6698h case    2:*/		return 0x821F669C;
	}
	return 0x821F669C;
} // Block from 821F6690h-821F669Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F669Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F669C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F669C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F669C);
		  /* 821F669Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F669Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F669Ch case    0:*/		return 0x821F66A0;
		  /* 821F66A0h */ case    1:  		/* stw R28, <#[R1 + 88]> */
		/* 821F66A0h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 821F66A0h case    1:*/		return 0x821F66A4;
		  /* 821F66A4h */ case    2:  		/* mulli R10, R10, 12 */
		/* 821F66A4h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0xC);
		/* 821F66A4h case    2:*/		return 0x821F66A8;
		  /* 821F66A8h */ case    3:  		/* add R11, R10, R11 */
		/* 821F66A8h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821F66A8h case    3:*/		return 0x821F66AC;
		  /* 821F66ACh */ case    4:  		/* addi R30, R11, 4 */
		/* 821F66ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 821F66ACh case    4:*/		return 0x821F66B0;
		  /* 821F66B0h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F66B0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F66B0h case    5:*/		return 0x821F66B4;
		  /* 821F66B4h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F66B4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F66B4h case    6:*/		return 0x821F66B8;
		  /* 821F66B8h */ case    7:  		/* stw R11, <#[R1 + 80]> */
		/* 821F66B8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F66B8h case    7:*/		return 0x821F66BC;
		  /* 821F66BCh */ case    8:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821F66BCh case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821F66BCh case    8:*/		return 0x821F66C0;
		  /* 821F66C0h */ case    9:  		/* addic R11, R11, -1 */
		/* 821F66C0h case    9:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F66C0h case    9:*/		return 0x821F66C4;
		  /* 821F66C4h */ case   10:  		/* subfe R11, R11, R11 */
		/* 821F66C4h case   10:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821F66C4h case   10:*/		return 0x821F66C8;
		  /* 821F66C8h */ case   11:  		/* and R11, R11, R10 */
		/* 821F66C8h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821F66C8h case   11:*/		return 0x821F66CC;
		  /* 821F66CCh */ case   12:  		/* stw R11, <#[R1 + 84]> */
		/* 821F66CCh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F66CCh case   12:*/		return 0x821F66D0;
		  /* 821F66D0h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821F66D0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F66D0h case   13:*/		return 0x821F66D4;
		  /* 821F66D4h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 821F66D4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821F66EC;  }
		/* 821F66D4h case   14:*/		return 0x821F66D8;
		  /* 821F66D8h */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 821F66D8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821F66D8h case   15:*/		return 0x821F66DC;
		  /* 821F66DCh */ case   16:  		/* lwz R10, <#[R1 + 88]> */
		/* 821F66DCh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821F66DCh case   16:*/		return 0x821F66E0;
		  /* 821F66E0h */ case   17:  		/* cmplw CR6, R10, R11 */
		/* 821F66E0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821F66E0h case   17:*/		return 0x821F66E4;
		  /* 821F66E4h */ case   18:  		/* mr R11, R28 */
		/* 821F66E4h case   18:*/		regs.R11 = regs.R28;
		/* 821F66E4h case   18:*/		return 0x821F66E8;
		  /* 821F66E8h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 821F66E8h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821F66F0;  }
		/* 821F66E8h case   19:*/		return 0x821F66EC;
	}
	return 0x821F66EC;
} // Block from 821F669Ch-821F66ECh (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F66ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F66EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F66EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F66EC);
		  /* 821F66ECh */ case    0:  		/* li R11, 1 */
		/* 821F66ECh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821F66ECh case    0:*/		return 0x821F66F0;
	}
	return 0x821F66F0;
} // Block from 821F66ECh-821F66F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F66F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F66F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F66F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F66F0);
		  /* 821F66F0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821F66F0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821F66F0h case    0:*/		return 0x821F66F4;
		  /* 821F66F4h */ case    1:  		/* bc 4, CR0_EQ, 112 */
		/* 821F66F4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F6764;  }
		/* 821F66F4h case    1:*/		return 0x821F66F8;
		  /* 821F66F8h */ case    2:  		/* addi R3, R1, 80 */
		/* 821F66F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F66F8h case    2:*/		return 0x821F66FC;
		  /* 821F66FCh */ case    3:  		/* bl -219292 */
		/* 821F66FCh case    3:*/		regs.LR = 0x821F6700; return 0x821C0E60;
		/* 821F66FCh case    3:*/		return 0x821F6700;
		  /* 821F6700h */ case    4:  		/* lwz R11, <#[R29 + 576]> */
		/* 821F6700h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000240) );
		/* 821F6700h case    4:*/		return 0x821F6704;
		  /* 821F6704h */ case    5:  		/* ld R31, <#[R3]> */
		/* 821F6704h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6704h case    5:*/		return 0x821F6708;
		  /* 821F6708h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F6708h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6708h case    6:*/		return 0x821F670C;
		  /* 821F670Ch */ case    7:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821F670Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821F670Ch case    7:*/		return 0x821F6710;
		  /* 821F6710h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821F6710h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821F6738;  }
		/* 821F6710h case    8:*/		return 0x821F6714;
		  /* 821F6714h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821F6714h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6714h case    9:*/		return 0x821F6718;
		  /* 821F6718h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F6718h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F6718h case   10:*/		return 0x821F671C;
		  /* 821F671Ch */ case   11:  		/* addic. R3, R10, -4 */
		/* 821F671Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R10,0xFFFFFFFC);
		/* 821F671Ch case   11:*/		return 0x821F6720;
		  /* 821F6720h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821F6720h case   12:*/		if ( regs.CR[0].eq ) { return 0x821F6738;  }
		/* 821F6720h case   12:*/		return 0x821F6724;
		  /* 821F6724h */ case   13:  		/* lwz R10, <#[R3 + 8]> */
		/* 821F6724h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821F6724h case   13:*/		return 0x821F6728;
		  /* 821F6728h */ case   14:  		/* lwz R9, <#[R3 + 12]> */
		/* 821F6728h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F6728h case   14:*/		return 0x821F672C;
		  /* 821F672Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 821F672Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F672Ch case   15:*/		return 0x821F6730;
		  /* 821F6730h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 821F6730h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F6730h case   16:*/		return 0x821F6734;
		  /* 821F6734h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821F6734h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821F6744;  }
		/* 821F6734h case   17:*/		return 0x821F6738;
	}
	return 0x821F6738;
} // Block from 821F66F0h-821F6738h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F6738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6738);
		  /* 821F6738h */ case    0:  		/* li R4, 1 */
		/* 821F6738h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F6738h case    0:*/		return 0x821F673C;
		  /* 821F673Ch */ case    1:  		/* mr R3, R11 */
		/* 821F673Ch case    1:*/		regs.R3 = regs.R11;
		/* 821F673Ch case    1:*/		return 0x821F6740;
		  /* 821F6740h */ case    2:  		/* bl -358536 */
		/* 821F6740h case    2:*/		regs.LR = 0x821F6744; return 0x8219EEB8;
		/* 821F6740h case    2:*/		return 0x821F6744;
	}
	return 0x821F6744;
} // Block from 821F6738h-821F6744h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6744);
		  /* 821F6744h */ case    0:  		/* lwz R10, <#[R3 + 8]> */
		/* 821F6744h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821F6744h case    0:*/		return 0x821F6748;
		  /* 821F6748h */ case    1:  		/* lwz R11, <#[R1 + 84]> */
		/* 821F6748h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F6748h case    1:*/		return 0x821F674C;
		  /* 821F674Ch */ case    2:  		/* addi R9, R10, 2 */
		/* 821F674Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x2);
		/* 821F674Ch case    2:*/		return 0x821F6750;
		  /* 821F6750h */ case    3:  		/* addi R8, R10, 1 */
		/* 821F6750h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F6750h case    3:*/		return 0x821F6754;
		  /* 821F6754h */ case    4:  		/* rlwinm R10, R9, 3, 0, 28 */
		/* 821F6754h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R9);
		/* 821F6754h case    4:*/		return 0x821F6758;
		  /* 821F6758h */ case    5:  		/* stw R8, <#[R3 + 8]> */
		/* 821F6758h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821F6758h case    5:*/		return 0x821F675C;
		  /* 821F675Ch */ case    6:  		/* stdx R31, <#[R10 + R3]> */
		/* 821F675Ch case    6:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 821F675Ch case    6:*/		return 0x821F6760;
		  /* 821F6760h */ case    7:  		/* b -144 */
		/* 821F6760h case    7:*/		return 0x821F66D0;
		/* 821F6760h case    7:*/		return 0x821F6764;
	}
	return 0x821F6764;
} // Block from 821F6744h-821F6764h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F6764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6764);
		  /* 821F6764h */ case    0:  		/* mr R4, R30 */
		/* 821F6764h case    0:*/		regs.R4 = regs.R30;
		/* 821F6764h case    0:*/		return 0x821F6768;
		  /* 821F6768h */ case    1:  		/* b 24 */
		/* 821F6768h case    1:*/		return 0x821F6780;
		/* 821F6768h case    1:*/		return 0x821F676C;
	}
	return 0x821F676C;
} // Block from 821F6764h-821F676Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F676Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F676C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F676C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F676C);
		  /* 821F676Ch */ case    0:  		/* addi R11, R1, 80 */
		/* 821F676Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821F676Ch case    0:*/		return 0x821F6770;
		  /* 821F6770h */ case    1:  		/* li R28, 0 */
		/* 821F6770h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821F6770h case    1:*/		return 0x821F6774;
		  /* 821F6774h */ case    2:  		/* addi R4, R1, 80 */
		/* 821F6774h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821F6774h case    2:*/		return 0x821F6778;
		  /* 821F6778h */ case    3:  		/* std R28, <#[R11]> */
		/* 821F6778h case    3:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6778h case    3:*/		return 0x821F677C;
		  /* 821F677Ch */ case    4:  		/* stw R28, <#[R11 + 8]> */
		/* 821F677Ch case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 821F677Ch case    4:*/		return 0x821F6780;
	}
	return 0x821F6780;
} // Block from 821F676Ch-821F6780h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F6780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6780);
		  /* 821F6780h */ case    0:  		/* mr R3, R29 */
		/* 821F6780h case    0:*/		regs.R3 = regs.R29;
		/* 821F6780h case    0:*/		return 0x821F6784;
		  /* 821F6784h */ case    1:  		/* bl -39764 */
		/* 821F6784h case    1:*/		regs.LR = 0x821F6788; return 0x821ECC30;
		/* 821F6784h case    1:*/		return 0x821F6788;
		  /* 821F6788h */ case    2:  		/* addi R1, R1, 144 */
		/* 821F6788h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821F6788h case    2:*/		return 0x821F678C;
		  /* 821F678Ch */ case    3:  		/* b -1463524 */
		/* 821F678Ch case    3:*/		return 0x820912A8;
		/* 821F678Ch case    3:*/		return 0x821F6790;
	}
	return 0x821F6790;
} // Block from 821F6780h-821F6790h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F6790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6790);
		  /* 821F6790h */ case    0:  		/* mfspr R12, LR */
		/* 821F6790h case    0:*/		regs.R12 = regs.LR;
		/* 821F6790h case    0:*/		return 0x821F6794;
		  /* 821F6794h */ case    1:  		/* bl -1463616 */
		/* 821F6794h case    1:*/		regs.LR = 0x821F6798; return 0x82091254;
		/* 821F6794h case    1:*/		return 0x821F6798;
		  /* 821F6798h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821F6798h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821F6798h case    2:*/		return 0x821F679C;
		  /* 821F679Ch */ case    3:  		/* lwz R28, <#[R4 + 4]> */
		/* 821F679Ch case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000004) );
		/* 821F679Ch case    3:*/		return 0x821F67A0;
		  /* 821F67A0h */ case    4:  		/* mr R30, R3 */
		/* 821F67A0h case    4:*/		regs.R30 = regs.R3;
		/* 821F67A0h case    4:*/		return 0x821F67A4;
		  /* 821F67A4h */ case    5:  		/* lwz R31, <#[R5 + 8]> */
		/* 821F67A4h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R5 + 0x00000008) );
		/* 821F67A4h case    5:*/		return 0x821F67A8;
		  /* 821F67A8h */ case    6:  		/* mr R27, R6 */
		/* 821F67A8h case    6:*/		regs.R27 = regs.R6;
		/* 821F67A8h case    6:*/		return 0x821F67AC;
		  /* 821F67ACh */ case    7:  		/* lwz R11, <#[R28 + 44]> */
		/* 821F67ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 821F67ACh case    7:*/		return 0x821F67B0;
		  /* 821F67B0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821F67B0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F67B0h case    8:*/		return 0x821F67B4;
		  /* 821F67B4h */ case    9:  		/* bc 12, CR6_EQ, 180 */
		/* 821F67B4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821F6868;  }
		/* 821F67B4h case    9:*/		return 0x821F67B8;
		  /* 821F67B8h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F67B8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F67B8h case   10:*/		return 0x821F67BC;
		  /* 821F67BCh */ case   11:  		/* cmpwi CR6, R10, 1 */
		/* 821F67BCh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F67BCh case   11:*/		return 0x821F67C0;
		  /* 821F67C0h */ case   12:  		/* bc 12, CR6_EQ, 168 */
		/* 821F67C0h case   12:*/		if ( regs.CR[6].eq ) { return 0x821F6868;  }
		/* 821F67C0h case   12:*/		return 0x821F67C4;
		  /* 821F67C4h */ case   13:  		/* li R4, 4801 */
		/* 821F67C4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F67C4h case   13:*/		return 0x821F67C8;
		  /* 821F67C8h */ case   14:  		/* bl -674144 */
		/* 821F67C8h case   14:*/		regs.LR = 0x821F67CC; return 0x82151E68;
		/* 821F67C8h case   14:*/		return 0x821F67CC;
		  /* 821F67CCh */ case   15:  		/* lwz R11, <#[R29 + 8]> */
		/* 821F67CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821F67CCh case   15:*/		return 0x821F67D0;
		  /* 821F67D0h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F67D0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F67D0h case   16:*/		return 0x821F67D4;
		  /* 821F67D4h */ case   17:  		/* cmpwi CR6, R10, 6 */
		/* 821F67D4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 821F67D4h case   17:*/		return 0x821F67D8;
		  /* 821F67D8h */ case   18:  		/* bc 4, CR6_EQ, 120 */
		/* 821F67D8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821F6850;  }
		/* 821F67D8h case   18:*/		return 0x821F67DC;
		  /* 821F67DCh */ case   19:  		/* lwz R10, <#[R11 + 16]> */
		/* 821F67DCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821F67DCh case   19:*/		return 0x821F67E0;
		  /* 821F67E0h */ case   20:  		/* cmpwi CR6, R10, 1 */
		/* 821F67E0h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F67E0h case   20:*/		return 0x821F67E4;
		  /* 821F67E4h */ case   21:  		/* bc 4, CR6_EQ, 152 */
		/* 821F67E4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821F687C;  }
		/* 821F67E4h case   21:*/		return 0x821F67E8;
		  /* 821F67E8h */ case   22:  		/* lwz R11, <#[R11 + 24]> */
		/* 821F67E8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821F67E8h case   22:*/		return 0x821F67EC;
		  /* 821F67ECh */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821F67ECh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F67ECh case   23:*/		return 0x821F67F0;
		  /* 821F67F0h */ case   24:  		/* bc 12, CR6_EQ, 152 */
		/* 821F67F0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821F6888;  }
		/* 821F67F0h case   24:*/		return 0x821F67F4;
		  /* 821F67F4h */ case   25:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F67F4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F67F4h case   25:*/		return 0x821F67F8;
		  /* 821F67F8h */ case   26:  		/* cmpwi CR6, R10, 11 */
		/* 821F67F8h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 821F67F8h case   26:*/		return 0x821F67FC;
		  /* 821F67FCh */ case   27:  		/* bc 4, CR6_EQ, 140 */
		/* 821F67FCh case   27:*/		if ( !regs.CR[6].eq ) { return 0x821F6888;  }
		/* 821F67FCh case   27:*/		return 0x821F6800;
		  /* 821F6800h */ case   28:  		/* lwz R5, <#[R11 + 16]> */
		/* 821F6800h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 821F6800h case   28:*/		return 0x821F6804;
		  /* 821F6804h */ case   29:  		/* lwz R10, <#[R28 + 16]> */
		/* 821F6804h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 821F6804h case   29:*/		return 0x821F6808;
		  /* 821F6808h */ case   30:  		/* cmplw CR6, R5, R10 */
		/* 821F6808h case   30:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 821F6808h case   30:*/		return 0x821F680C;
		  /* 821F680Ch */ case   31:  		/* bc 12, CR6_EQ, 68 */
		/* 821F680Ch case   31:*/		if ( regs.CR[6].eq ) { return 0x821F6850;  }
		/* 821F680Ch case   31:*/		return 0x821F6810;
		  /* 821F6810h */ case   32:  		/* lwz R10, <#[R30 + 16]> */
		/* 821F6810h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 821F6810h case   32:*/		return 0x821F6814;
		  /* 821F6814h */ case   33:  		/* cmplw CR6, R5, R10 */
		/* 821F6814h case   33:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R10);
		/* 821F6814h case   33:*/		return 0x821F6818;
		  /* 821F6818h */ case   34:  		/* bc 12, CR6_EQ, 56 */
		/* 821F6818h case   34:*/		if ( regs.CR[6].eq ) { return 0x821F6850;  }
		/* 821F6818h case   34:*/		return 0x821F681C;
		  /* 821F681Ch */ case   35:  		/* lwz R10, <#[R11 + 20]> */
		/* 821F681Ch case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821F681Ch case   35:*/		return 0x821F6820;
		  /* 821F6820h */ case   36:  		/* cmplwi CR6, R10, 0 */
		/* 821F6820h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F6820h case   36:*/		return 0x821F6824;
		  /* 821F6824h */ case   37:  		/* bc 12, CR6_EQ, 44 */
		/* 821F6824h case   37:*/		if ( regs.CR[6].eq ) { return 0x821F6850;  }
		/* 821F6824h case   37:*/		return 0x821F6828;
		  /* 821F6828h */ case   38:  		/* lwz R11, <#[R11 + 44]> */
		/* 821F6828h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821F6828h case   38:*/		return 0x821F682C;
		  /* 821F682Ch */ case   39:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 821F682Ch case   39:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 821F682Ch case   39:*/		return 0x821F6830;
		  /* 821F6830h */ case   40:  		/* bc 12, CR0_EQ, 32 */
		/* 821F6830h case   40:*/		if ( regs.CR[0].eq ) { return 0x821F6850;  }
		/* 821F6830h case   40:*/		return 0x821F6834;
		  /* 821F6834h */ case   41:  		/* cmplwi CR6, R31, 0 */
		/* 821F6834h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F6834h case   41:*/		return 0x821F6838;
		  /* 821F6838h */ case   42:  		/* bc 12, CR6_EQ, 24 */
		/* 821F6838h case   42:*/		if ( regs.CR[6].eq ) { return 0x821F6850;  }
		/* 821F6838h case   42:*/		return 0x821F683C;
		  /* 821F683Ch */ case   43:  		/* mr R4, R27 */
		/* 821F683Ch case   43:*/		regs.R4 = regs.R27;
		/* 821F683Ch case   43:*/		return 0x821F6840;
		  /* 821F6840h */ case   44:  		/* lwz R6, <#[R31 + 8]> */
		/* 821F6840h case   44:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 821F6840h case   44:*/		return 0x821F6844;
		  /* 821F6844h */ case   45:  		/* mr R3, R30 */
		/* 821F6844h case   45:*/		regs.R3 = regs.R30;
		/* 821F6844h case   45:*/		return 0x821F6848;
		  /* 821F6848h */ case   46:  		/* bl -6640 */
		/* 821F6848h case   46:*/		regs.LR = 0x821F684C; return 0x821F4E58;
		/* 821F6848h case   46:*/		return 0x821F684C;
		  /* 821F684Ch */ case   47:  		/* lwz R31, <#[R31 + 12]> */
		/* 821F684Ch case   47:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F684Ch case   47:*/		return 0x821F6850;
	}
	return 0x821F6850;
} // Block from 821F6790h-821F6850h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821F6850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6850);
		  /* 821F6850h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821F6850h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821F6850h case    0:*/		return 0x821F6854;
		  /* 821F6854h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F6854h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F6854h case    1:*/		return 0x821F6858;
		  /* 821F6858h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821F6858h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F6868;  }
		/* 821F6858h case    2:*/		return 0x821F685C;
		  /* 821F685Ch */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F685Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F685Ch case    3:*/		return 0x821F6860;
		  /* 821F6860h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821F6860h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F6860h case    4:*/		return 0x821F6864;
		  /* 821F6864h */ case    5:  		/* bc 4, CR6_EQ, 48 */
		/* 821F6864h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F6894;  }
		/* 821F6864h case    5:*/		return 0x821F6868;
	}
	return 0x821F6868;
} // Block from 821F6850h-821F6868h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F6868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6868);
		  /* 821F6868h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821F6868h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F6868h case    0:*/		return 0x821F686C;
		  /* 821F686Ch */ case    1:  		/* mr R29, R11 */
		/* 821F686Ch case    1:*/		regs.R29 = regs.R11;
		/* 821F686Ch case    1:*/		return 0x821F6870;
		  /* 821F6870h */ case    2:  		/* bc 4, CR6_EQ, -164 */
		/* 821F6870h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F67CC;  }
		/* 821F6870h case    2:*/		return 0x821F6874;
		  /* 821F6874h */ case    3:  		/* addi R1, R1, 128 */
		/* 821F6874h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821F6874h case    3:*/		return 0x821F6878;
		  /* 821F6878h */ case    4:  		/* b -1463764 */
		/* 821F6878h case    4:*/		return 0x820912A4;
		/* 821F6878h case    4:*/		return 0x821F687C;
	}
	return 0x821F687C;
} // Block from 821F6868h-821F687Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F687Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F687C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F687C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F687C);
		  /* 821F687Ch */ case    0:  		/* li R4, 4801 */
		/* 821F687Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F687Ch case    0:*/		return 0x821F6880;
		  /* 821F6880h */ case    1:  		/* mr R3, R30 */
		/* 821F6880h case    1:*/		regs.R3 = regs.R30;
		/* 821F6880h case    1:*/		return 0x821F6884;
		  /* 821F6884h */ case    2:  		/* bl -674332 */
		/* 821F6884h case    2:*/		regs.LR = 0x821F6888; return 0x82151E68;
		/* 821F6884h case    2:*/		return 0x821F6888;
	}
	return 0x821F6888;
} // Block from 821F687Ch-821F6888h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6888);
		  /* 821F6888h */ case    0:  		/* li R4, 4801 */
		/* 821F6888h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F6888h case    0:*/		return 0x821F688C;
		  /* 821F688Ch */ case    1:  		/* mr R3, R30 */
		/* 821F688Ch case    1:*/		regs.R3 = regs.R30;
		/* 821F688Ch case    1:*/		return 0x821F6890;
		  /* 821F6890h */ case    2:  		/* bl -674344 */
		/* 821F6890h case    2:*/		regs.LR = 0x821F6894; return 0x82151E68;
		/* 821F6890h case    2:*/		return 0x821F6894;
	}
	return 0x821F6894;
} // Block from 821F6888h-821F6894h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6894);
		  /* 821F6894h */ case    0:  		/* li R4, 4801 */
		/* 821F6894h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F6894h case    0:*/		return 0x821F6898;
		  /* 821F6898h */ case    1:  		/* mr R3, R30 */
		/* 821F6898h case    1:*/		regs.R3 = regs.R30;
		/* 821F6898h case    1:*/		return 0x821F689C;
		  /* 821F689Ch */ case    2:  		/* bl -674356 */
		/* 821F689Ch case    2:*/		regs.LR = 0x821F68A0; return 0x82151E68;
		/* 821F689Ch case    2:*/		return 0x821F68A0;
	}
	return 0x821F68A0;
} // Block from 821F6894h-821F68A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F68A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F68A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F68A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F68A0);
		  /* 821F68A0h */ case    0:  		/* mfspr R12, LR */
		/* 821F68A0h case    0:*/		regs.R12 = regs.LR;
		/* 821F68A0h case    0:*/		return 0x821F68A4;
		  /* 821F68A4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F68A4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F68A4h case    1:*/		return 0x821F68A8;
		  /* 821F68A8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821F68A8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F68A8h case    2:*/		return 0x821F68AC;
		  /* 821F68ACh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821F68ACh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F68ACh case    3:*/		return 0x821F68B0;
		  /* 821F68B0h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 821F68B0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821F68B0h case    4:*/		return 0x821F68B4;
		  /* 821F68B4h */ case    5:  		/* mr R30, R3 */
		/* 821F68B4h case    5:*/		regs.R30 = regs.R3;
		/* 821F68B4h case    5:*/		return 0x821F68B8;
		  /* 821F68B8h */ case    6:  		/* addi R3, R1, 80 */
		/* 821F68B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F68B8h case    6:*/		return 0x821F68BC;
		  /* 821F68BCh */ case    7:  		/* mr R31, R5 */
		/* 821F68BCh case    7:*/		regs.R31 = regs.R5;
		/* 821F68BCh case    7:*/		return 0x821F68C0;
		  /* 821F68C0h */ case    8:  		/* bl -354960 */
		/* 821F68C0h case    8:*/		regs.LR = 0x821F68C4; return 0x8219FE30;
		/* 821F68C0h case    8:*/		return 0x821F68C4;
		  /* 821F68C4h */ case    9:  		/* mr R4, R31 */
		/* 821F68C4h case    9:*/		regs.R4 = regs.R31;
		/* 821F68C4h case    9:*/		return 0x821F68C8;
		  /* 821F68C8h */ case   10:  		/* addi R3, R1, 80 */
		/* 821F68C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F68C8h case   10:*/		return 0x821F68CC;
		  /* 821F68CCh */ case   11:  		/* bl -20316 */
		/* 821F68CCh case   11:*/		regs.LR = 0x821F68D0; return 0x821F1970;
		/* 821F68CCh case   11:*/		return 0x821F68D0;
		  /* 821F68D0h */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 821F68D0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F68D0h case   12:*/		return 0x821F68D4;
		  /* 821F68D4h */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 821F68D4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821F68F4;  }
		/* 821F68D4h case   13:*/		return 0x821F68D8;
		  /* 821F68D8h */ case   14:  		/* addi R3, R1, 80 */
		/* 821F68D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F68D8h case   14:*/		return 0x821F68DC;
		  /* 821F68DCh */ case   15:  		/* bl -219772 */
		/* 821F68DCh case   15:*/		regs.LR = 0x821F68E0; return 0x821C0E60;
		/* 821F68DCh case   15:*/		return 0x821F68E0;
		  /* 821F68E0h */ case   16:  		/* mr R4, R3 */
		/* 821F68E0h case   16:*/		regs.R4 = regs.R3;
		/* 821F68E0h case   16:*/		return 0x821F68E4;
		  /* 821F68E4h */ case   17:  		/* mr R3, R30 */
		/* 821F68E4h case   17:*/		regs.R3 = regs.R30;
		/* 821F68E4h case   17:*/		return 0x821F68E8;
		  /* 821F68E8h */ case   18:  		/* bl -16664 */
		/* 821F68E8h case   18:*/		regs.LR = 0x821F68EC; return 0x821F27D0;
		/* 821F68E8h case   18:*/		return 0x821F68EC;
		  /* 821F68ECh */ case   19:  		/* addic. R31, R31, -1 */
		/* 821F68ECh case   19:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821F68ECh case   19:*/		return 0x821F68F0;
		  /* 821F68F0h */ case   20:  		/* bc 4, CR0_EQ, -24 */
		/* 821F68F0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821F68D8;  }
		/* 821F68F0h case   20:*/		return 0x821F68F4;
	}
	return 0x821F68F4;
} // Block from 821F68A0h-821F68F4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821F68F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F68F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F68F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F68F4);
		  /* 821F68F4h */ case    0:  		/* addi R1, R1, 128 */
		/* 821F68F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821F68F4h case    0:*/		return 0x821F68F8;
		  /* 821F68F8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F68F8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F68F8h case    1:*/		return 0x821F68FC;
		  /* 821F68FCh */ case    2:  		/* mtspr LR, R12 */
		/* 821F68FCh case    2:*/		regs.LR = regs.R12;
		/* 821F68FCh case    2:*/		return 0x821F6900;
		  /* 821F6900h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 821F6900h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F6900h case    3:*/		return 0x821F6904;
		  /* 821F6904h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 821F6904h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6904h case    4:*/		return 0x821F6908;
		  /* 821F6908h */ case    5:  		/* bclr 20, CR0_LT */
		/* 821F6908h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F6908h case    5:*/		return 0x821F690C;
	}
	return 0x821F690C;
} // Block from 821F68F4h-821F690Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F690Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F690C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F690C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F690C);
		  /* 821F690Ch */ case    0:  		/* nop */
		/* 821F690Ch case    0:*/		cpu::op::nop();
		/* 821F690Ch case    0:*/		return 0x821F6910;
	}
	return 0x821F6910;
} // Block from 821F690Ch-821F6910h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6910);
		  /* 821F6910h */ case    0:  		/* mfspr R12, LR */
		/* 821F6910h case    0:*/		regs.R12 = regs.LR;
		/* 821F6910h case    0:*/		return 0x821F6914;
		  /* 821F6914h */ case    1:  		/* bl -1463992 */
		/* 821F6914h case    1:*/		regs.LR = 0x821F6918; return 0x8209125C;
		/* 821F6914h case    1:*/		return 0x821F6918;
		  /* 821F6918h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821F6918h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821F6918h case    2:*/		return 0x821F691C;
		  /* 821F691Ch */ case    3:  		/* mr R31, R3 */
		/* 821F691Ch case    3:*/		regs.R31 = regs.R3;
		/* 821F691Ch case    3:*/		return 0x821F6920;
		  /* 821F6920h */ case    4:  		/* addi R3, R1, 96 */
		/* 821F6920h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F6920h case    4:*/		return 0x821F6924;
		  /* 821F6924h */ case    5:  		/* mr R30, R4 */
		/* 821F6924h case    5:*/		regs.R30 = regs.R4;
		/* 821F6924h case    5:*/		return 0x821F6928;
		  /* 821F6928h */ case    6:  		/* mr R29, R5 */
		/* 821F6928h case    6:*/		regs.R29 = regs.R5;
		/* 821F6928h case    6:*/		return 0x821F692C;
		  /* 821F692Ch */ case    7:  		/* bl -355068 */
		/* 821F692Ch case    7:*/		regs.LR = 0x821F6930; return 0x8219FE30;
		/* 821F692Ch case    7:*/		return 0x821F6930;
		  /* 821F6930h */ case    8:  		/* mr R4, R29 */
		/* 821F6930h case    8:*/		regs.R4 = regs.R29;
		/* 821F6930h case    8:*/		return 0x821F6934;
		  /* 821F6934h */ case    9:  		/* addi R3, R1, 96 */
		/* 821F6934h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F6934h case    9:*/		return 0x821F6938;
		  /* 821F6938h */ case   10:  		/* bl -20424 */
		/* 821F6938h case   10:*/		regs.LR = 0x821F693C; return 0x821F1970;
		/* 821F6938h case   10:*/		return 0x821F693C;
		  /* 821F693Ch */ case   11:  		/* mr R4, R30 */
		/* 821F693Ch case   11:*/		regs.R4 = regs.R30;
		/* 821F693Ch case   11:*/		return 0x821F6940;
		  /* 821F6940h */ case   12:  		/* addi R3, R1, 80 */
		/* 821F6940h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6940h case   12:*/		return 0x821F6944;
		  /* 821F6944h */ case   13:  		/* bl -355092 */
		/* 821F6944h case   13:*/		regs.LR = 0x821F6948; return 0x8219FE30;
		/* 821F6944h case   13:*/		return 0x821F6948;
		  /* 821F6948h */ case   14:  		/* mr R4, R29 */
		/* 821F6948h case   14:*/		regs.R4 = regs.R29;
		/* 821F6948h case   14:*/		return 0x821F694C;
		  /* 821F694Ch */ case   15:  		/* addi R3, R1, 80 */
		/* 821F694Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F694Ch case   15:*/		return 0x821F6950;
		  /* 821F6950h */ case   16:  		/* bl -20448 */
		/* 821F6950h case   16:*/		regs.LR = 0x821F6954; return 0x821F1970;
		/* 821F6950h case   16:*/		return 0x821F6954;
		  /* 821F6954h */ case   17:  		/* mr R6, R29 */
		/* 821F6954h case   17:*/		regs.R6 = regs.R29;
		/* 821F6954h case   17:*/		return 0x821F6958;
		  /* 821F6958h */ case   18:  		/* addi R5, R1, 80 */
		/* 821F6958h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821F6958h case   18:*/		return 0x821F695C;
		  /* 821F695Ch */ case   19:  		/* addi R4, R1, 96 */
		/* 821F695Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821F695Ch case   19:*/		return 0x821F6960;
		  /* 821F6960h */ case   20:  		/* mr R3, R31 */
		/* 821F6960h case   20:*/		regs.R3 = regs.R31;
		/* 821F6960h case   20:*/		return 0x821F6964;
		  /* 821F6964h */ case   21:  		/* bl -6124 */
		/* 821F6964h case   21:*/		regs.LR = 0x821F6968; return 0x821F5178;
		/* 821F6964h case   21:*/		return 0x821F6968;
		  /* 821F6968h */ case   22:  		/* addi R1, R1, 144 */
		/* 821F6968h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821F6968h case   22:*/		return 0x821F696C;
		  /* 821F696Ch */ case   23:  		/* b -1464000 */
		/* 821F696Ch case   23:*/		return 0x820912AC;
		/* 821F696Ch case   23:*/		return 0x821F6970;
	}
	return 0x821F6970;
} // Block from 821F6910h-821F6970h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821F6970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6970);
		  /* 821F6970h */ case    0:  		/* mfspr R12, LR */
		/* 821F6970h case    0:*/		regs.R12 = regs.LR;
		/* 821F6970h case    0:*/		return 0x821F6974;
		  /* 821F6974h */ case    1:  		/* bl -1464088 */
		/* 821F6974h case    1:*/		regs.LR = 0x821F6978; return 0x8209125C;
		/* 821F6974h case    1:*/		return 0x821F6978;
		  /* 821F6978h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821F6978h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821F6978h case    2:*/		return 0x821F697C;
		  /* 821F697Ch */ case    3:  		/* mr R31, R3 */
		/* 821F697Ch case    3:*/		regs.R31 = regs.R3;
		/* 821F697Ch case    3:*/		return 0x821F6980;
		  /* 821F6980h */ case    4:  		/* addi R3, R1, 96 */
		/* 821F6980h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F6980h case    4:*/		return 0x821F6984;
		  /* 821F6984h */ case    5:  		/* mr R30, R4 */
		/* 821F6984h case    5:*/		regs.R30 = regs.R4;
		/* 821F6984h case    5:*/		return 0x821F6988;
		  /* 821F6988h */ case    6:  		/* mr R29, R5 */
		/* 821F6988h case    6:*/		regs.R29 = regs.R5;
		/* 821F6988h case    6:*/		return 0x821F698C;
		  /* 821F698Ch */ case    7:  		/* bl -355164 */
		/* 821F698Ch case    7:*/		regs.LR = 0x821F6990; return 0x8219FE30;
		/* 821F698Ch case    7:*/		return 0x821F6990;
		  /* 821F6990h */ case    8:  		/* rlwinm R4, R29, 1, 0, 30 */
		/* 821F6990h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R29);
		/* 821F6990h case    8:*/		return 0x821F6994;
		  /* 821F6994h */ case    9:  		/* addi R3, R1, 96 */
		/* 821F6994h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F6994h case    9:*/		return 0x821F6998;
		  /* 821F6998h */ case   10:  		/* bl -20520 */
		/* 821F6998h case   10:*/		regs.LR = 0x821F699C; return 0x821F1970;
		/* 821F6998h case   10:*/		return 0x821F699C;
		  /* 821F699Ch */ case   11:  		/* mr R4, R30 */
		/* 821F699Ch case   11:*/		regs.R4 = regs.R30;
		/* 821F699Ch case   11:*/		return 0x821F69A0;
		  /* 821F69A0h */ case   12:  		/* addi R3, R1, 80 */
		/* 821F69A0h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F69A0h case   12:*/		return 0x821F69A4;
		  /* 821F69A4h */ case   13:  		/* bl -355188 */
		/* 821F69A4h case   13:*/		regs.LR = 0x821F69A8; return 0x8219FE30;
		/* 821F69A4h case   13:*/		return 0x821F69A8;
		  /* 821F69A8h */ case   14:  		/* mr R4, R29 */
		/* 821F69A8h case   14:*/		regs.R4 = regs.R29;
		/* 821F69A8h case   14:*/		return 0x821F69AC;
		  /* 821F69ACh */ case   15:  		/* addi R3, R1, 80 */
		/* 821F69ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F69ACh case   15:*/		return 0x821F69B0;
		  /* 821F69B0h */ case   16:  		/* bl -20544 */
		/* 821F69B0h case   16:*/		regs.LR = 0x821F69B4; return 0x821F1970;
		/* 821F69B0h case   16:*/		return 0x821F69B4;
		  /* 821F69B4h */ case   17:  		/* mr R6, R29 */
		/* 821F69B4h case   17:*/		regs.R6 = regs.R29;
		/* 821F69B4h case   17:*/		return 0x821F69B8;
		  /* 821F69B8h */ case   18:  		/* addi R5, R1, 80 */
		/* 821F69B8h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821F69B8h case   18:*/		return 0x821F69BC;
		  /* 821F69BCh */ case   19:  		/* addi R4, R1, 96 */
		/* 821F69BCh case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821F69BCh case   19:*/		return 0x821F69C0;
		  /* 821F69C0h */ case   20:  		/* mr R3, R31 */
		/* 821F69C0h case   20:*/		regs.R3 = regs.R31;
		/* 821F69C0h case   20:*/		return 0x821F69C4;
		  /* 821F69C4h */ case   21:  		/* bl -6220 */
		/* 821F69C4h case   21:*/		regs.LR = 0x821F69C8; return 0x821F5178;
		/* 821F69C4h case   21:*/		return 0x821F69C8;
		  /* 821F69C8h */ case   22:  		/* addi R1, R1, 144 */
		/* 821F69C8h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821F69C8h case   22:*/		return 0x821F69CC;
		  /* 821F69CCh */ case   23:  		/* b -1464096 */
		/* 821F69CCh case   23:*/		return 0x820912AC;
		/* 821F69CCh case   23:*/		return 0x821F69D0;
	}
	return 0x821F69D0;
} // Block from 821F6970h-821F69D0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821F69D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F69D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F69D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F69D0);
		  /* 821F69D0h */ case    0:  		/* mfspr R12, LR */
		/* 821F69D0h case    0:*/		regs.R12 = regs.LR;
		/* 821F69D0h case    0:*/		return 0x821F69D4;
		  /* 821F69D4h */ case    1:  		/* bl -1464208 */
		/* 821F69D4h case    1:*/		regs.LR = 0x821F69D8; return 0x82091244;
		/* 821F69D4h case    1:*/		return 0x821F69D8;
		  /* 821F69D8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821F69D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821F69D8h case    2:*/		return 0x821F69DC;
		  /* 821F69DCh */ case    3:  		/* lwz R10, <#[R4 + 4]> */
		/* 821F69DCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 821F69DCh case    3:*/		return 0x821F69E0;
		  /* 821F69E0h */ case    4:  		/* mr R31, R3 */
		/* 821F69E0h case    4:*/		regs.R31 = regs.R3;
		/* 821F69E0h case    4:*/		return 0x821F69E4;
		  /* 821F69E4h */ case    5:  		/* lwz R11, <#[R3 + 12]> */
		/* 821F69E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F69E4h case    5:*/		return 0x821F69E8;
		  /* 821F69E8h */ case    6:  		/* mr R24, R4 */
		/* 821F69E8h case    6:*/		regs.R24 = regs.R4;
		/* 821F69E8h case    6:*/		return 0x821F69EC;
		  /* 821F69ECh */ case    7:  		/* rlwinm R28, R10, 15, 17, 31 */
		/* 821F69ECh case    7:*/		cpu::op::rlwinm<0,15,17,31>(regs,&regs.R28,regs.R10);
		/* 821F69ECh case    7:*/		return 0x821F69F0;
		  /* 821F69F0h */ case    8:  		/* mr R23, R5 */
		/* 821F69F0h case    8:*/		regs.R23 = regs.R5;
		/* 821F69F0h case    8:*/		return 0x821F69F4;
		  /* 821F69F4h */ case    9:  		/* mulli R25, R28, 40 */
		/* 821F69F4h case    9:*/		cpu::op::mulli<0>(regs,&regs.R25,regs.R28,0x28);
		/* 821F69F4h case    9:*/		return 0x821F69F8;
		  /* 821F69F8h */ case   10:  		/* add R11, R11, R25 */
		/* 821F69F8h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 821F69F8h case   10:*/		return 0x821F69FC;
		  /* 821F69FCh */ case   11:  		/* rlwinm R26, R10, 30, 18, 31 */
		/* 821F69FCh case   11:*/		cpu::op::rlwinm<0,30,18,31>(regs,&regs.R26,regs.R10);
		/* 821F69FCh case   11:*/		return 0x821F6A00;
		  /* 821F6A00h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F6A00h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6A00h case   12:*/		return 0x821F6A04;
		  /* 821F6A04h */ case   13:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821F6A04h case   13:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821F6A04h case   13:*/		return 0x821F6A08;
		  /* 821F6A08h */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 821F6A08h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821F6A14;  }
		/* 821F6A08h case   14:*/		return 0x821F6A0C;
		  /* 821F6A0Ch */ case   15:  		/* li R4, 4800 */
		/* 821F6A0Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821F6A0Ch case   15:*/		return 0x821F6A10;
		  /* 821F6A10h */ case   16:  		/* bl -674728 */
		/* 821F6A10h case   16:*/		regs.LR = 0x821F6A14; return 0x82151E68;
		/* 821F6A10h case   16:*/		return 0x821F6A14;
	}
	return 0x821F6A14;
} // Block from 821F69D0h-821F6A14h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821F6A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6A14);
		  /* 821F6A14h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821F6A14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F6A14h case    0:*/		return 0x821F6A18;
		  /* 821F6A18h */ case    1:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821F6A18h case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821F6A18h case    1:*/		return 0x821F6A1C;
		  /* 821F6A1Ch */ case    2:  		/* bc 12, CR0_EQ, 380 */
		/* 821F6A1Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821F6B98;  }
		/* 821F6A1Ch case    2:*/		return 0x821F6A20;
		  /* 821F6A20h */ case    3:  		/* addi R3, R1, 80 */
		/* 821F6A20h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6A20h case    3:*/		return 0x821F6A24;
		  /* 821F6A24h */ case    4:  		/* lwz R4, <#[R31 + 584]> */
		/* 821F6A24h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000248) );
		/* 821F6A24h case    4:*/		return 0x821F6A28;
		  /* 821F6A28h */ case    5:  		/* bl -355320 */
		/* 821F6A28h case    5:*/		regs.LR = 0x821F6A2C; return 0x8219FE30;
		/* 821F6A28h case    5:*/		return 0x821F6A2C;
		  /* 821F6A2Ch */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 821F6A2Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F6A2Ch case    6:*/		return 0x821F6A30;
		  /* 821F6A30h */ case    7:  		/* li R27, 0 */
		/* 821F6A30h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821F6A30h case    7:*/		return 0x821F6A34;
		  /* 821F6A34h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F6A34h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6A34h case    8:*/		return 0x821F6A38;
		  /* 821F6A38h */ case    9:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821F6A38h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821F6A38h case    9:*/		return 0x821F6A3C;
		  /* 821F6A3Ch */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821F6A3Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821F6A48;  }
		/* 821F6A3Ch case   10:*/		return 0x821F6A40;
		  /* 821F6A40h */ case   11:  		/* mr R11, R27 */
		/* 821F6A40h case   11:*/		regs.R11 = regs.R27;
		/* 821F6A40h case   11:*/		return 0x821F6A44;
		  /* 821F6A44h */ case   12:  		/* b 16 */
		/* 821F6A44h case   12:*/		return 0x821F6A54;
		/* 821F6A44h case   12:*/		return 0x821F6A48;
	}
	return 0x821F6A48;
} // Block from 821F6A14h-821F6A48h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F6A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6A48);
		  /* 821F6A48h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821F6A48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6A48h case    0:*/		return 0x821F6A4C;
		  /* 821F6A4Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6A4Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6A4Ch case    1:*/		return 0x821F6A50;
		  /* 821F6A50h */ case    2:  		/* addi R11, R11, -4 */
		/* 821F6A50h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6A50h case    2:*/		return 0x821F6A54;
	}
	return 0x821F6A54;
} // Block from 821F6A48h-821F6A54h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6A54);
		  /* 821F6A54h */ case    0:  		/* stw R11, <#[R1 + 84]> */
		/* 821F6A54h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F6A54h case    0:*/		return 0x821F6A58;
		  /* 821F6A58h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F6A58h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F6A58h case    1:*/		return 0x821F6A5C;
		  /* 821F6A5Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821F6A5Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821F6A6C;  }
		/* 821F6A5Ch case    2:*/		return 0x821F6A60;
		  /* 821F6A60h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 821F6A60h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6A60h case    3:*/		return 0x821F6A64;
		  /* 821F6A64h */ case    4:  		/* stw R11, <#[R1 + 88]> */
		/* 821F6A64h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821F6A64h case    4:*/		return 0x821F6A68;
		  /* 821F6A68h */ case    5:  		/* b 8 */
		/* 821F6A68h case    5:*/		return 0x821F6A70;
		/* 821F6A68h case    5:*/		return 0x821F6A6C;
	}
	return 0x821F6A6C;
} // Block from 821F6A54h-821F6A6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F6A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6A6C);
		  /* 821F6A6Ch */ case    0:  		/* stw R27, <#[R1 + 88]> */
		/* 821F6A6Ch case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 821F6A6Ch case    0:*/		return 0x821F6A70;
	}
	return 0x821F6A70;
} // Block from 821F6A6Ch-821F6A70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6A70);
		  /* 821F6A70h */ case    0:  		/* addi R3, R1, 80 */
		/* 821F6A70h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6A70h case    0:*/		return 0x821F6A74;
		  /* 821F6A74h */ case    1:  		/* bl -20220 */
		/* 821F6A74h case    1:*/		regs.LR = 0x821F6A78; return 0x821F1B78;
		/* 821F6A74h case    1:*/		return 0x821F6A78;
		  /* 821F6A78h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 821F6A78h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6A78h case    2:*/		return 0x821F6A7C;
		  /* 821F6A7Ch */ case    3:  		/* mr R29, R3 */
		/* 821F6A7Ch case    3:*/		regs.R29 = regs.R3;
		/* 821F6A7Ch case    3:*/		return 0x821F6A80;
		  /* 821F6A80h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 821F6A80h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821F6A80h case    4:*/		return 0x821F6A84;
		  /* 821F6A84h */ case    5:  		/* bc 4, CR6_EQ, -20 */
		/* 821F6A84h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F6A70;  }
		/* 821F6A84h case    5:*/		return 0x821F6A88;
		  /* 821F6A88h */ case    6:  		/* lwz R11, <#[R31 + 12]> */
		/* 821F6A88h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F6A88h case    6:*/		return 0x821F6A8C;
		  /* 821F6A8Ch */ case    7:  		/* lwzx R11, <#[R11 + R25]> */
		/* 821F6A8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 821F6A8Ch case    7:*/		return 0x821F6A90;
		  /* 821F6A90h */ case    8:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821F6A90h case    8:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821F6A90h case    8:*/		return 0x821F6A94;
		  /* 821F6A94h */ case    9:  		/* cmplwi CR6, R11, 1 */
		/* 821F6A94h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821F6A94h case    9:*/		return 0x821F6A98;
		  /* 821F6A98h */ case   10:  		/* bc 12, CR6_EQ, 188 */
		/* 821F6A98h case   10:*/		if ( regs.CR[6].eq ) { return 0x821F6B54;  }
		/* 821F6A98h case   10:*/		return 0x821F6A9C;
		  /* 821F6A9Ch */ case   11:  		/* addi R3, R1, 80 */
		/* 821F6A9Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6A9Ch case   11:*/		return 0x821F6AA0;
		  /* 821F6AA0h */ case   12:  		/* lwz R4, <#[R31 + 588]> */
		/* 821F6AA0h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000024C) );
		/* 821F6AA0h case   12:*/		return 0x821F6AA4;
		  /* 821F6AA4h */ case   13:  		/* bl -355444 */
		/* 821F6AA4h case   13:*/		regs.LR = 0x821F6AA8; return 0x8219FE30;
		/* 821F6AA4h case   13:*/		return 0x821F6AA8;
		  /* 821F6AA8h */ case   14:  		/* lwz R11, <#[R29 + 4]> */
		/* 821F6AA8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821F6AA8h case   14:*/		return 0x821F6AAC;
		  /* 821F6AACh */ case   15:  		/* lwz R10, <#[R29 + 8]> */
		/* 821F6AACh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821F6AACh case   15:*/		return 0x821F6AB0;
		  /* 821F6AB0h */ case   16:  		/* stw R11, <#[R1 + 84]> */
		/* 821F6AB0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F6AB0h case   16:*/		return 0x821F6AB4;
		  /* 821F6AB4h */ case   17:  		/* stw R10, <#[R1 + 88]> */
		/* 821F6AB4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821F6AB4h case   17:*/		return 0x821F6AB8;
		  /* 821F6AB8h */ case   18:  		/* lwz R11, <#[R1 + 88]> */
		/* 821F6AB8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821F6AB8h case   18:*/		return 0x821F6ABC;
		  /* 821F6ABCh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821F6ABCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F6ABCh case   19:*/		return 0x821F6AC0;
		  /* 821F6AC0h */ case   20:  		/* bc 4, CR6_EQ, 44 */
		/* 821F6AC0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821F6AEC;  }
		/* 821F6AC0h case   20:*/		return 0x821F6AC4;
		  /* 821F6AC4h */ case   21:  		/* lwz R11, <#[R1 + 80]> */
		/* 821F6AC4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F6AC4h case   21:*/		return 0x821F6AC8;
		  /* 821F6AC8h */ case   22:  		/* lwz R10, <#[R1 + 84]> */
		/* 821F6AC8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821F6AC8h case   22:*/		return 0x821F6ACC;
		  /* 821F6ACCh */ case   23:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F6ACCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6ACCh case   23:*/		return 0x821F6AD0;
		  /* 821F6AD0h */ case   24:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821F6AD0h case   24:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821F6AD0h case   24:*/		return 0x821F6AD4;
		  /* 821F6AD4h */ case   25:  		/* addic R9, R9, -1 */
		/* 821F6AD4h case   25:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821F6AD4h case   25:*/		return 0x821F6AD8;
		  /* 821F6AD8h */ case   26:  		/* subfe R9, R9, R9 */
		/* 821F6AD8h case   26:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821F6AD8h case   26:*/		return 0x821F6ADC;
		  /* 821F6ADCh */ case   27:  		/* and R11, R9, R11 */
		/* 821F6ADCh case   27:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821F6ADCh case   27:*/		return 0x821F6AE0;
		  /* 821F6AE0h */ case   28:  		/* cmplw CR6, R10, R11 */
		/* 821F6AE0h case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821F6AE0h case   28:*/		return 0x821F6AE4;
		  /* 821F6AE4h */ case   29:  		/* li R11, 1 */
		/* 821F6AE4h case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821F6AE4h case   29:*/		return 0x821F6AE8;
		  /* 821F6AE8h */ case   30:  		/* bc 12, CR6_EQ, 8 */
		/* 821F6AE8h case   30:*/		if ( regs.CR[6].eq ) { return 0x821F6AF0;  }
		/* 821F6AE8h case   30:*/		return 0x821F6AEC;
	}
	return 0x821F6AEC;
} // Block from 821F6A70h-821F6AECh (31 instructions)

//////////////////////////////////////////////////////
// Block at 821F6AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6AEC);
		  /* 821F6AECh */ case    0:  		/* mr R11, R27 */
		/* 821F6AECh case    0:*/		regs.R11 = regs.R27;
		/* 821F6AECh case    0:*/		return 0x821F6AF0;
	}
	return 0x821F6AF0;
} // Block from 821F6AECh-821F6AF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6AF0);
		  /* 821F6AF0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821F6AF0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821F6AF0h case    0:*/		return 0x821F6AF4;
		  /* 821F6AF4h */ case    1:  		/* bc 4, CR0_EQ, 100 */
		/* 821F6AF4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F6B58;  }
		/* 821F6AF4h case    1:*/		return 0x821F6AF8;
		  /* 821F6AF8h */ case    2:  		/* addi R3, R1, 80 */
		/* 821F6AF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6AF8h case    2:*/		return 0x821F6AFC;
		  /* 821F6AFCh */ case    3:  		/* bl -20604 */
		/* 821F6AFCh case    3:*/		regs.LR = 0x821F6B00; return 0x821F1A80;
		/* 821F6AFCh case    3:*/		return 0x821F6B00;
	}
	return 0x821F6B00;
} // Block from 821F6AF0h-821F6B00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F6B00h
// Function '?GenerateTrigOp@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVResult@2@W4_D3DINTRINSIC_OP@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6B00);
		  /* 821F6B00h */ case    0:  		/* lwz R30, <#[R3 + 4]> */
		/* 821F6B00h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6B00h case    0:*/		return 0x821F6B04;
		  /* 821F6B04h */ case    1:  		/* addi R3, R1, 80 */
		/* 821F6B04h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F6B04h case    1:*/		return 0x821F6B08;
		  /* 821F6B08h */ case    2:  		/* bl -359600 */
		/* 821F6B08h case    2:*/		regs.LR = 0x821F6B0C; return 0x8219EE58;
		/* 821F6B08h case    2:*/		return 0x821F6B0C;
		  /* 821F6B0Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 821F6B0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6B0Ch case    3:*/		return 0x821F6B10;
		  /* 821F6B10h */ case    4:  		/* cmpwi CR6, R11, 3 */
		/* 821F6B10h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821F6B10h case    4:*/		return 0x821F6B14;
		  /* 821F6B14h */ case    5:  		/* bc 4, CR6_EQ, -92 */
		/* 821F6B14h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F6AB8;  }
		/* 821F6B14h case    5:*/		return 0x821F6B18;
		  /* 821F6B18h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 821F6B18h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F6B18h case    6:*/		return 0x821F6B1C;
		  /* 821F6B1Ch */ case    7:  		/* bc 12, CR6_EQ, -100 */
		/* 821F6B1Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821F6AB8;  }
		/* 821F6B1Ch case    7:*/		return 0x821F6B20;
		  /* 821F6B20h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F6B20h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F6B20h case    8:*/		return 0x821F6B24;
		  /* 821F6B24h */ case    9:  		/* cmpwi CR6, R11, 6 */
		/* 821F6B24h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821F6B24h case    9:*/		return 0x821F6B28;
		  /* 821F6B28h */ case   10:  		/* bc 4, CR6_EQ, -112 */
		/* 821F6B28h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821F6AB8;  }
		/* 821F6B28h case   10:*/		return 0x821F6B2C;
		  /* 821F6B2Ch */ case   11:  		/* lwz R11, <#[R30 + 16]> */
		/* 821F6B2Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821F6B2Ch case   11:*/		return 0x821F6B30;
		  /* 821F6B30h */ case   12:  		/* cmpwi CR6, R11, 1 */
		/* 821F6B30h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F6B30h case   12:*/		return 0x821F6B34;
		  /* 821F6B34h */ case   13:  		/* bc 4, CR6_EQ, 164 */
		/* 821F6B34h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821F6BD8;  }
		/* 821F6B34h case   13:*/		return 0x821F6B38;
		  /* 821F6B38h */ case   14:  		/* lwz R11, <#[R30 + 24]> */
		/* 821F6B38h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 821F6B38h case   14:*/		return 0x821F6B3C;
		  /* 821F6B3Ch */ case   15:  		/* lwz R10, <#[R11 + 20]> */
		/* 821F6B3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821F6B3Ch case   15:*/		return 0x821F6B40;
		  /* 821F6B40h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 821F6B40h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F6B40h case   16:*/		return 0x821F6B44;
		  /* 821F6B44h */ case   17:  		/* bc 12, CR6_EQ, -140 */
		/* 821F6B44h case   17:*/		if ( regs.CR[6].eq ) { return 0x821F6AB8;  }
		/* 821F6B44h case   17:*/		return 0x821F6B48;
		  /* 821F6B48h */ case   18:  		/* lwz R11, <#[R11 + 16]> */
		/* 821F6B48h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821F6B48h case   18:*/		return 0x821F6B4C;
		  /* 821F6B4Ch */ case   19:  		/* cmplw CR6, R11, R28 */
		/* 821F6B4Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821F6B4Ch case   19:*/		return 0x821F6B50;
		  /* 821F6B50h */ case   20:  		/* bc 4, CR6_EQ, -152 */
		/* 821F6B50h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821F6AB8;  }
		/* 821F6B50h case   20:*/		return 0x821F6B54;
	}
	return 0x821F6B54;
} // Block from 821F6B00h-821F6B54h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821F6B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6B54);
		  /* 821F6B54h */ case    0:  		/* li R27, 1 */
		/* 821F6B54h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821F6B54h case    0:*/		return 0x821F6B58;
	}
	return 0x821F6B58;
} // Block from 821F6B54h-821F6B58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6B58);
		  /* 821F6B58h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821F6B58h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821F6B58h case    0:*/		return 0x821F6B5C;
		  /* 821F6B5Ch */ case    1:  		/* bc 12, CR0_EQ, 60 */
		/* 821F6B5Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821F6B98;  }
		/* 821F6B5Ch case    1:*/		return 0x821F6B60;
		  /* 821F6B60h */ case    2:  		/* mr R5, R31 */
		/* 821F6B60h case    2:*/		regs.R5 = regs.R31;
		/* 821F6B60h case    2:*/		return 0x821F6B64;
		  /* 821F6B64h */ case    3:  		/* lwz R3, <#[R29 + 12]> */
		/* 821F6B64h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 821F6B64h case    3:*/		return 0x821F6B68;
		  /* 821F6B68h */ case    4:  		/* mr R4, R28 */
		/* 821F6B68h case    4:*/		regs.R4 = regs.R28;
		/* 821F6B68h case    4:*/		return 0x821F6B6C;
		  /* 821F6B6Ch */ case    5:  		/* bl -25020 */
		/* 821F6B6Ch case    5:*/		regs.LR = 0x821F6B70; return 0x821F09B0;
		/* 821F6B6Ch case    5:*/		return 0x821F6B70;
		  /* 821F6B70h */ case    6:  		/* rlwinm R11, R26, 3, 0, 28 */
		/* 821F6B70h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R26);
		/* 821F6B70h case    6:*/		return 0x821F6B74;
		  /* 821F6B74h */ case    7:  		/* lwzx R11, <#[R11 + R3]> */
		/* 821F6B74h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821F6B74h case    7:*/		return 0x821F6B78;
		  /* 821F6B78h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821F6B78h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F6B78h case    8:*/		return 0x821F6B7C;
		  /* 821F6B7Ch */ case    9:  		/* bc 4, CR6_EQ, 28 */
		/* 821F6B7Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821F6B98;  }
		/* 821F6B7Ch case    9:*/		return 0x821F6B80;
		  /* 821F6B80h */ case   10:  		/* li R7, 1 */
		/* 821F6B80h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F6B80h case   10:*/		return 0x821F6B84;
		  /* 821F6B84h */ case   11:  		/* lwz R4, <#[R29 + 12]> */
		/* 821F6B84h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 821F6B84h case   11:*/		return 0x821F6B88;
		  /* 821F6B88h */ case   12:  		/* mr R6, R26 */
		/* 821F6B88h case   12:*/		regs.R6 = regs.R26;
		/* 821F6B88h case   12:*/		return 0x821F6B8C;
		  /* 821F6B8Ch */ case   13:  		/* mr R5, R28 */
		/* 821F6B8Ch case   13:*/		regs.R5 = regs.R28;
		/* 821F6B8Ch case   13:*/		return 0x821F6B90;
		  /* 821F6B90h */ case   14:  		/* mr R3, R31 */
		/* 821F6B90h case   14:*/		regs.R3 = regs.R31;
		/* 821F6B90h case   14:*/		return 0x821F6B94;
		  /* 821F6B94h */ case   15:  		/* bl -58212 */
		/* 821F6B94h case   15:*/		regs.LR = 0x821F6B98; return 0x821E8830;
		/* 821F6B94h case   15:*/		return 0x821F6B98;
	}
	return 0x821F6B98;
} // Block from 821F6B58h-821F6B98h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F6B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6B98);
		  /* 821F6B98h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 821F6B98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821F6B98h case    0:*/		return 0x821F6B9C;
		  /* 821F6B9Ch */ case    1:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821F6B9Ch case    1:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821F6B9Ch case    1:*/		return 0x821F6BA0;
		  /* 821F6BA0h */ case    2:  		/* bc 4, CR0_EQ, 68 */
		/* 821F6BA0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821F6BE4;  }
		/* 821F6BA0h case    2:*/		return 0x821F6BA4;
		  /* 821F6BA4h */ case    3:  		/* mr R5, R31 */
		/* 821F6BA4h case    3:*/		regs.R5 = regs.R31;
		/* 821F6BA4h case    3:*/		return 0x821F6BA8;
		  /* 821F6BA8h */ case    4:  		/* lwz R3, <#[R31 + 564]> */
		/* 821F6BA8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821F6BA8h case    4:*/		return 0x821F6BAC;
		  /* 821F6BACh */ case    5:  		/* mr R4, R28 */
		/* 821F6BACh case    5:*/		regs.R4 = regs.R28;
		/* 821F6BACh case    5:*/		return 0x821F6BB0;
		  /* 821F6BB0h */ case    6:  		/* bl -25088 */
		/* 821F6BB0h case    6:*/		regs.LR = 0x821F6BB4; return 0x821F09B0;
		/* 821F6BB0h case    6:*/		return 0x821F6BB4;
		  /* 821F6BB4h */ case    7:  		/* rlwinm R11, R26, 3, 0, 28 */
		/* 821F6BB4h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R26);
		/* 821F6BB4h case    7:*/		return 0x821F6BB8;
		  /* 821F6BB8h */ case    8:  		/* stdx R23, <#[R3 + R11]> */
		/* 821F6BB8h case    8:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821F6BB8h case    8:*/		return 0x821F6BBC;
		  /* 821F6BBCh */ case    9:  		/* lwz R11, <#[R31 + 12]> */
		/* 821F6BBCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F6BBCh case    9:*/		return 0x821F6BC0;
		  /* 821F6BC0h */ case   10:  		/* add R11, R11, R25 */
		/* 821F6BC0h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 821F6BC0h case   10:*/		return 0x821F6BC4;
		  /* 821F6BC4h */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F6BC4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6BC4h case   11:*/		return 0x821F6BC8;
		  /* 821F6BC8h */ case   12:  		/* ori R9, R10, 2 */
		/* 821F6BC8h case   12:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 821F6BC8h case   12:*/		return 0x821F6BCC;
		  /* 821F6BCCh */ case   13:  		/* addi R10, R11, 4 */
		/* 821F6BCCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821F6BCCh case   13:*/		return 0x821F6BD0;
		  /* 821F6BD0h */ case   14:  		/* stw R9, <#[R11 + 4]> */
		/* 821F6BD0h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6BD0h case   14:*/		return 0x821F6BD4;
		  /* 821F6BD4h */ case   15:  		/* b 60 */
		/* 821F6BD4h case   15:*/		return 0x821F6C10;
		/* 821F6BD4h case   15:*/		return 0x821F6BD8;
	}
	return 0x821F6BD8;
} // Block from 821F6B98h-821F6BD8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F6BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6BD8);
		  /* 821F6BD8h */ case    0:  		/* li R4, 4800 */
		/* 821F6BD8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821F6BD8h case    0:*/		return 0x821F6BDC;
		  /* 821F6BDCh */ case    1:  		/* mr R3, R31 */
		/* 821F6BDCh case    1:*/		regs.R3 = regs.R31;
		/* 821F6BDCh case    1:*/		return 0x821F6BE0;
		  /* 821F6BE0h */ case    2:  		/* bl -675192 */
		/* 821F6BE0h case    2:*/		regs.LR = 0x821F6BE4; return 0x82151E68;
		/* 821F6BE0h case    2:*/		return 0x821F6BE4;
	}
	return 0x821F6BE4;
} // Block from 821F6BD8h-821F6BE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6BE4);
		  /* 821F6BE4h */ case    0:  		/* rlwinm. R11, R11, 16, 31, 31 */
		/* 821F6BE4h case    0:*/		cpu::op::rlwinm<1,16,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6BE4h case    0:*/		return 0x821F6BE8;
		  /* 821F6BE8h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821F6BE8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F6BF8;  }
		/* 821F6BE8h case    1:*/		return 0x821F6BEC;
		  /* 821F6BECh */ case    2:  		/* lwz R11, <#[R24]> */
		/* 821F6BECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821F6BECh case    2:*/		return 0x821F6BF0;
		  /* 821F6BF0h */ case    3:  		/* std R23, <#[R11]> */
		/* 821F6BF0h case    3:*/		cpu::mem::store64( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6BF0h case    3:*/		return 0x821F6BF4;
		  /* 821F6BF4h */ case    4:  		/* b 28 */
		/* 821F6BF4h case    4:*/		return 0x821F6C10;
		/* 821F6BF4h case    4:*/		return 0x821F6BF8;
	}
	return 0x821F6BF8;
} // Block from 821F6BE4h-821F6BF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F6BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6BF8);
		  /* 821F6BF8h */ case    0:  		/* lwz R4, <#[R24]> */
		/* 821F6BF8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000000) );
		/* 821F6BF8h case    0:*/		return 0x821F6BFC;
		  /* 821F6BFCh */ case    1:  		/* mr R7, R23 */
		/* 821F6BFCh case    1:*/		regs.R7 = regs.R23;
		/* 821F6BFCh case    1:*/		return 0x821F6C00;
		  /* 821F6C00h */ case    2:  		/* li R6, 0 */
		/* 821F6C00h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F6C00h case    2:*/		return 0x821F6C04;
		  /* 821F6C04h */ case    3:  		/* mr R3, R31 */
		/* 821F6C04h case    3:*/		regs.R3 = regs.R31;
		/* 821F6C04h case    3:*/		return 0x821F6C08;
		  /* 821F6C08h */ case    4:  		/* ld R5, <#[R4]> */
		/* 821F6C08h case    4:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R4 + 0x00000000) );
		/* 821F6C08h case    4:*/		return 0x821F6C0C;
		  /* 821F6C0Ch */ case    5:  		/* bl -4532 */
		/* 821F6C0Ch case    5:*/		regs.LR = 0x821F6C10; return 0x821F5A58;
		/* 821F6C0Ch case    5:*/		return 0x821F6C10;
	}
	return 0x821F6C10;
} // Block from 821F6BF8h-821F6C10h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F6C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6C10);
		  /* 821F6C10h */ case    0:  		/* addi R1, R1, 176 */
		/* 821F6C10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821F6C10h case    0:*/		return 0x821F6C14;
		  /* 821F6C14h */ case    1:  		/* b -1464704 */
		/* 821F6C14h case    1:*/		return 0x82091294;
		/* 821F6C14h case    1:*/		return 0x821F6C18;
	}
	return 0x821F6C18;
} // Block from 821F6C10h-821F6C18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F6C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6C18);
		  /* 821F6C18h */ case    0:  		/* mfspr R12, LR */
		/* 821F6C18h case    0:*/		regs.R12 = regs.LR;
		/* 821F6C18h case    0:*/		return 0x821F6C1C;
		  /* 821F6C1Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F6C1Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6C1Ch case    1:*/		return 0x821F6C20;
		  /* 821F6C20h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F6C20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F6C20h case    2:*/		return 0x821F6C24;
		  /* 821F6C24h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F6C24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6C24h case    3:*/		return 0x821F6C28;
		  /* 821F6C28h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F6C28h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6C28h case    4:*/		return 0x821F6C2C;
		  /* 821F6C2Ch */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821F6C2Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821F6C54;  }
		/* 821F6C2Ch case    5:*/		return 0x821F6C30;
		  /* 821F6C30h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 821F6C30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6C30h case    6:*/		return 0x821F6C34;
		  /* 821F6C34h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6C34h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6C34h case    7:*/		return 0x821F6C38;
		  /* 821F6C38h */ case    8:  		/* addic. R11, R11, -4 */
		/* 821F6C38h case    8:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6C38h case    8:*/		return 0x821F6C3C;
		  /* 821F6C3Ch */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821F6C3Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821F6C54;  }
		/* 821F6C3Ch case    9:*/		return 0x821F6C40;
		  /* 821F6C40h */ case   10:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6C40h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6C40h case   10:*/		return 0x821F6C44;
		  /* 821F6C44h */ case   11:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F6C44h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F6C44h case   11:*/		return 0x821F6C48;
		  /* 821F6C48h */ case   12:  		/* addi R10, R10, 1 */
		/* 821F6C48h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F6C48h case   12:*/		return 0x821F6C4C;
		  /* 821F6C4Ch */ case   13:  		/* cmplw CR6, R10, R9 */
		/* 821F6C4Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F6C4Ch case   13:*/		return 0x821F6C50;
		  /* 821F6C50h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 821F6C50h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821F6C60;  }
		/* 821F6C50h case   14:*/		return 0x821F6C54;
	}
	return 0x821F6C54;
} // Block from 821F6C18h-821F6C54h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F6C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6C54);
		  /* 821F6C54h */ case    0:  		/* li R4, 1 */
		/* 821F6C54h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F6C54h case    0:*/		return 0x821F6C58;
		  /* 821F6C58h */ case    1:  		/* bl -20472 */
		/* 821F6C58h case    1:*/		regs.LR = 0x821F6C5C; return 0x821F1C60;
		/* 821F6C58h case    1:*/		return 0x821F6C5C;
		  /* 821F6C5Ch */ case    2:  		/* mr R11, R3 */
		/* 821F6C5Ch case    2:*/		regs.R11 = regs.R3;
		/* 821F6C5Ch case    2:*/		return 0x821F6C60;
	}
	return 0x821F6C60;
} // Block from 821F6C54h-821F6C60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6C60);
		  /* 821F6C60h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6C60h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6C60h case    0:*/		return 0x821F6C64;
		  /* 821F6C64h */ case    1:  		/* rlwinm R9, R10, 5, 0, 26 */
		/* 821F6C64h case    1:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R10);
		/* 821F6C64h case    1:*/		return 0x821F6C68;
		  /* 821F6C68h */ case    2:  		/* addi R8, R10, 1 */
		/* 821F6C68h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F6C68h case    2:*/		return 0x821F6C6C;
		  /* 821F6C6Ch */ case    3:  		/* add R10, R9, R11 */
		/* 821F6C6Ch case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 821F6C6Ch case    3:*/		return 0x821F6C70;
		  /* 821F6C70h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821F6C70h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6C70h case    4:*/		return 0x821F6C74;
		  /* 821F6C74h */ case    5:  		/* addi R3, R10, 16 */
		/* 821F6C74h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R10,0x10);
		/* 821F6C74h case    5:*/		return 0x821F6C78;
		  /* 821F6C78h */ case    6:  		/* addi R1, R1, 96 */
		/* 821F6C78h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F6C78h case    6:*/		return 0x821F6C7C;
		  /* 821F6C7Ch */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F6C7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6C7Ch case    7:*/		return 0x821F6C80;
		  /* 821F6C80h */ case    8:  		/* mtspr LR, R12 */
		/* 821F6C80h case    8:*/		regs.LR = regs.R12;
		/* 821F6C80h case    8:*/		return 0x821F6C84;
		  /* 821F6C84h */ case    9:  		/* bclr 20, CR0_LT */
		/* 821F6C84h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F6C84h case    9:*/		return 0x821F6C88;
	}
	return 0x821F6C88;
} // Block from 821F6C60h-821F6C88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F6C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6C88);
		  /* 821F6C88h */ case    0:  		/* mfspr R12, LR */
		/* 821F6C88h case    0:*/		regs.R12 = regs.LR;
		/* 821F6C88h case    0:*/		return 0x821F6C8C;
		  /* 821F6C8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F6C8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6C8Ch case    1:*/		return 0x821F6C90;
		  /* 821F6C90h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F6C90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F6C90h case    2:*/		return 0x821F6C94;
		  /* 821F6C94h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F6C94h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6C94h case    3:*/		return 0x821F6C98;
		  /* 821F6C98h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F6C98h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6C98h case    4:*/		return 0x821F6C9C;
		  /* 821F6C9Ch */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821F6C9Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821F6CC4;  }
		/* 821F6C9Ch case    5:*/		return 0x821F6CA0;
		  /* 821F6CA0h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 821F6CA0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6CA0h case    6:*/		return 0x821F6CA4;
		  /* 821F6CA4h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6CA4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6CA4h case    7:*/		return 0x821F6CA8;
		  /* 821F6CA8h */ case    8:  		/* addic. R11, R11, -4 */
		/* 821F6CA8h case    8:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6CA8h case    8:*/		return 0x821F6CAC;
		  /* 821F6CACh */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821F6CACh case    9:*/		if ( regs.CR[0].eq ) { return 0x821F6CC4;  }
		/* 821F6CACh case    9:*/		return 0x821F6CB0;
		  /* 821F6CB0h */ case   10:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6CB0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6CB0h case   10:*/		return 0x821F6CB4;
		  /* 821F6CB4h */ case   11:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F6CB4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F6CB4h case   11:*/		return 0x821F6CB8;
		  /* 821F6CB8h */ case   12:  		/* addi R10, R10, 1 */
		/* 821F6CB8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F6CB8h case   12:*/		return 0x821F6CBC;
		  /* 821F6CBCh */ case   13:  		/* cmplw CR6, R10, R9 */
		/* 821F6CBCh case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F6CBCh case   13:*/		return 0x821F6CC0;
	}
	return 0x821F6CC0;
} // Block from 821F6C88h-821F6CC0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821F6CC0h
// Function '??0?$StackEnumerator@ULexicalScope@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAA@PAV?$Stack@ULexicalScope@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6CC0);
		  /* 821F6CC0h */ case    0:  		/* bc 4, CR6_GT, 16 */
		/* 821F6CC0h case    0:*/		if ( !regs.CR[6].gt ) { return 0x821F6CD0;  }
		/* 821F6CC0h case    0:*/		return 0x821F6CC4;
	}
	return 0x821F6CC4;
} // Block from 821F6CC0h-821F6CC4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6CC4);
		  /* 821F6CC4h */ case    0:  		/* li R4, 1 */
		/* 821F6CC4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F6CC4h case    0:*/		return 0x821F6CC8;
		  /* 821F6CC8h */ case    1:  		/* bl -20448 */
		/* 821F6CC8h case    1:*/		regs.LR = 0x821F6CCC; return 0x821F1CE8;
		/* 821F6CC8h case    1:*/		return 0x821F6CCC;
		  /* 821F6CCCh */ case    2:  		/* mr R11, R3 */
		/* 821F6CCCh case    2:*/		regs.R11 = regs.R3;
		/* 821F6CCCh case    2:*/		return 0x821F6CD0;
	}
	return 0x821F6CD0;
} // Block from 821F6CC4h-821F6CD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6CD0);
		  /* 821F6CD0h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6CD0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6CD0h case    0:*/		return 0x821F6CD4;
		  /* 821F6CD4h */ case    1:  		/* mulli R9, R10, 12 */
		/* 821F6CD4h case    1:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R10,0xC);
		/* 821F6CD4h case    1:*/		return 0x821F6CD8;
		  /* 821F6CD8h */ case    2:  		/* add R9, R9, R11 */
		/* 821F6CD8h case    2:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821F6CD8h case    2:*/		return 0x821F6CDC;
		  /* 821F6CDCh */ case    3:  		/* addi R10, R10, 1 */
		/* 821F6CDCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F6CDCh case    3:*/		return 0x821F6CE0;
		  /* 821F6CE0h */ case    4:  		/* addi R3, R9, 16 */
		/* 821F6CE0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R9,0x10);
		/* 821F6CE0h case    4:*/		return 0x821F6CE4;
		  /* 821F6CE4h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821F6CE4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6CE4h case    5:*/		return 0x821F6CE8;
		  /* 821F6CE8h */ case    6:  		/* addi R1, R1, 96 */
		/* 821F6CE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F6CE8h case    6:*/		return 0x821F6CEC;
		  /* 821F6CECh */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F6CECh case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6CECh case    7:*/		return 0x821F6CF0;
		  /* 821F6CF0h */ case    8:  		/* mtspr LR, R12 */
		/* 821F6CF0h case    8:*/		regs.LR = regs.R12;
		/* 821F6CF0h case    8:*/		return 0x821F6CF4;
		  /* 821F6CF4h */ case    9:  		/* bclr 20, CR0_LT */
		/* 821F6CF4h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F6CF4h case    9:*/		return 0x821F6CF8;
	}
	return 0x821F6CF8;
} // Block from 821F6CD0h-821F6CF8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F6CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6CF8);
		  /* 821F6CF8h */ case    0:  		/* mfspr R12, LR */
		/* 821F6CF8h case    0:*/		regs.R12 = regs.LR;
		/* 821F6CF8h case    0:*/		return 0x821F6CFC;
		  /* 821F6CFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F6CFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6CFCh case    1:*/		return 0x821F6D00;
		  /* 821F6D00h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821F6D00h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6D00h case    2:*/		return 0x821F6D04;
		  /* 821F6D04h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F6D04h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F6D04h case    3:*/		return 0x821F6D08;
		  /* 821F6D08h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F6D08h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6D08h case    4:*/		return 0x821F6D0C;
		  /* 821F6D0Ch */ case    5:  		/* mr R31, R4 */
		/* 821F6D0Ch case    5:*/		regs.R31 = regs.R4;
		/* 821F6D0Ch case    5:*/		return 0x821F6D10;
		  /* 821F6D10h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F6D10h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6D10h case    6:*/		return 0x821F6D14;
		  /* 821F6D14h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 821F6D14h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821F6D3C;  }
		/* 821F6D14h case    7:*/		return 0x821F6D18;
		  /* 821F6D18h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821F6D18h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6D18h case    8:*/		return 0x821F6D1C;
		  /* 821F6D1Ch */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6D1Ch case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6D1Ch case    9:*/		return 0x821F6D20;
		  /* 821F6D20h */ case   10:  		/* addic. R11, R11, -4 */
		/* 821F6D20h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6D20h case   10:*/		return 0x821F6D24;
		  /* 821F6D24h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 821F6D24h case   11:*/		if ( regs.CR[0].eq ) { return 0x821F6D3C;  }
		/* 821F6D24h case   11:*/		return 0x821F6D28;
	}
	return 0x821F6D28;
} // Block from 821F6CF8h-821F6D28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F6D28h
// Function '??0ResultStackEnumerator@D3DXShader@@QAA@PAVResultStack@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6D28);
		  /* 821F6D28h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6D28h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6D28h case    0:*/		return 0x821F6D2C;
		  /* 821F6D2Ch */ case    1:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F6D2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F6D2Ch case    1:*/		return 0x821F6D30;
		  /* 821F6D30h */ case    2:  		/* addi R10, R10, 1 */
		/* 821F6D30h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F6D30h case    2:*/		return 0x821F6D34;
		  /* 821F6D34h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 821F6D34h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F6D34h case    3:*/		return 0x821F6D38;
		  /* 821F6D38h */ case    4:  		/* bc 4, CR6_GT, 16 */
		/* 821F6D38h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821F6D48;  }
		/* 821F6D38h case    4:*/		return 0x821F6D3C;
	}
	return 0x821F6D3C;
} // Block from 821F6D28h-821F6D3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F6D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6D3C);
		  /* 821F6D3Ch */ case    0:  		/* li R4, 1 */
		/* 821F6D3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F6D3Ch case    0:*/		return 0x821F6D40;
		  /* 821F6D40h */ case    1:  		/* bl -360072 */
		/* 821F6D40h case    1:*/		regs.LR = 0x821F6D44; return 0x8219EEB8;
		/* 821F6D40h case    1:*/		return 0x821F6D44;
		  /* 821F6D44h */ case    2:  		/* mr R11, R3 */
		/* 821F6D44h case    2:*/		regs.R11 = regs.R3;
		/* 821F6D44h case    2:*/		return 0x821F6D48;
	}
	return 0x821F6D48;
} // Block from 821F6D3Ch-821F6D48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6D48);
		  /* 821F6D48h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6D48h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6D48h case    0:*/		return 0x821F6D4C;
		  /* 821F6D4Ch */ case    1:  		/* addi R9, R10, 2 */
		/* 821F6D4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x2);
		/* 821F6D4Ch case    1:*/		return 0x821F6D50;
		  /* 821F6D50h */ case    2:  		/* addi R8, R10, 1 */
		/* 821F6D50h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F6D50h case    2:*/		return 0x821F6D54;
		  /* 821F6D54h */ case    3:  		/* rlwinm R10, R9, 3, 0, 28 */
		/* 821F6D54h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R9);
		/* 821F6D54h case    3:*/		return 0x821F6D58;
		  /* 821F6D58h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821F6D58h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6D58h case    4:*/		return 0x821F6D5C;
		  /* 821F6D5Ch */ case    5:  		/* stdx R31, <#[R10 + R11]> */
		/* 821F6D5Ch case    5:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F6D5Ch case    5:*/		return 0x821F6D60;
		  /* 821F6D60h */ case    6:  		/* addi R1, R1, 96 */
		/* 821F6D60h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F6D60h case    6:*/		return 0x821F6D64;
		  /* 821F6D64h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F6D64h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6D64h case    7:*/		return 0x821F6D68;
		  /* 821F6D68h */ case    8:  		/* mtspr LR, R12 */
		/* 821F6D68h case    8:*/		regs.LR = regs.R12;
		/* 821F6D68h case    8:*/		return 0x821F6D6C;
		  /* 821F6D6Ch */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 821F6D6Ch case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6D6Ch case    9:*/		return 0x821F6D70;
	}
	return 0x821F6D70;
} // Block from 821F6D48h-821F6D70h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F6D70h
// Function '?Mark@ParseStack@D3DXShader@@QAAXPAUPosition@?$StackEnumerator@PAVCNode@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6D70);
		  /* 821F6D70h */ case    0:  		/* bclr 20, CR0_LT */
		/* 821F6D70h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F6D70h case    0:*/		return 0x821F6D74;
	}
	return 0x821F6D74;
} // Block from 821F6D70h-821F6D74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6D74);
		  /* 821F6D74h */ case    0:  		/* nop */
		/* 821F6D74h case    0:*/		cpu::op::nop();
		/* 821F6D74h case    0:*/		return 0x821F6D78;
	}
	return 0x821F6D78;
} // Block from 821F6D74h-821F6D78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6D78h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6D78);
		  /* 821F6D78h */ case    0:  		/* mfspr R12, LR */
		/* 821F6D78h case    0:*/		regs.R12 = regs.LR;
		/* 821F6D78h case    0:*/		return 0x821F6D7C;
		  /* 821F6D7Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F6D7Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6D7Ch case    1:*/		return 0x821F6D80;
		  /* 821F6D80h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821F6D80h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F6D80h case    2:*/		return 0x821F6D84;
		  /* 821F6D84h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821F6D84h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6D84h case    3:*/		return 0x821F6D88;
		  /* 821F6D88h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821F6D88h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821F6D88h case    4:*/		return 0x821F6D8C;
		  /* 821F6D8Ch */ case    5:  		/* stw R5, <#[R3]> */
		/* 821F6D8Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6D8Ch case    5:*/		return 0x821F6D90;
		  /* 821F6D90h */ case    6:  		/* mr R11, R5 */
		/* 821F6D90h case    6:*/		regs.R11 = regs.R5;
		/* 821F6D90h case    6:*/		return 0x821F6D94;
		  /* 821F6D94h */ case    7:  		/* mr R31, R3 */
		/* 821F6D94h case    7:*/		regs.R31 = regs.R3;
		/* 821F6D94h case    7:*/		return 0x821F6D98;
		  /* 821F6D98h */ case    8:  		/* mr R30, R4 */
		/* 821F6D98h case    8:*/		regs.R30 = regs.R4;
		/* 821F6D98h case    8:*/		return 0x821F6D9C;
		  /* 821F6D9Ch */ case    9:  		/* li R5, 15 */
		/* 821F6D9Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821F6D9Ch case    9:*/		return 0x821F6DA0;
		  /* 821F6DA0h */ case   10:  		/* li R4, 8 */
		/* 821F6DA0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821F6DA0h case   10:*/		return 0x821F6DA4;
		  /* 821F6DA4h */ case   11:  		/* mr R3, R11 */
		/* 821F6DA4h case   11:*/		regs.R3 = regs.R11;
		/* 821F6DA4h case   11:*/		return 0x821F6DA8;
		  /* 821F6DA8h */ case   12:  		/* bl -599224 */
		/* 821F6DA8h case   12:*/		regs.LR = 0x821F6DAC; return 0x821648F0;
		/* 821F6DA8h case   12:*/		return 0x821F6DAC;
		  /* 821F6DACh */ case   13:  		/* addi R11, R3, 4 */
		/* 821F6DACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821F6DACh case   13:*/		return 0x821F6DB0;
		  /* 821F6DB0h */ case   14:  		/* ori R10, R3, 1 */
		/* 821F6DB0h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821F6DB0h case   14:*/		return 0x821F6DB4;
		  /* 821F6DB4h */ case   15:  		/* stw R3, <#[R31 + 4]> */
		/* 821F6DB4h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821F6DB4h case   15:*/		return 0x821F6DB8;
		  /* 821F6DB8h */ case   16:  		/* ori R11, R11, 1 */
		/* 821F6DB8h case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F6DB8h case   16:*/		return 0x821F6DBC;
		  /* 821F6DBCh */ case   17:  		/* stw R10, <#[R3 + 4]> */
		/* 821F6DBCh case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6DBCh case   17:*/		return 0x821F6DC0;
		  /* 821F6DC0h */ case   18:  		/* stw R11, <#[R3]> */
		/* 821F6DC0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6DC0h case   18:*/		return 0x821F6DC4;
		  /* 821F6DC4h */ case   19:  		/* lwz R3, <#[R31 + 4]> */
		/* 821F6DC4h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821F6DC4h case   19:*/		return 0x821F6DC8;
		  /* 821F6DC8h */ case   20:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F6DC8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6DC8h case   20:*/		return 0x821F6DCC;
		  /* 821F6DCCh */ case   21:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F6DCCh case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6DCCh case   21:*/		return 0x821F6DD0;
		  /* 821F6DD0h */ case   22:  		/* bc 4, CR0_EQ, 40 */
		/* 821F6DD0h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821F6DF8;  }
		/* 821F6DD0h case   22:*/		return 0x821F6DD4;
		  /* 821F6DD4h */ case   23:  		/* lwz R11, <#[R3]> */
		/* 821F6DD4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6DD4h case   23:*/		return 0x821F6DD8;
		  /* 821F6DD8h */ case   24:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6DD8h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6DD8h case   24:*/		return 0x821F6DDC;
		  /* 821F6DDCh */ case   25:  		/* addic. R11, R11, -4 */
		/* 821F6DDCh case   25:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6DDCh case   25:*/		return 0x821F6DE0;
	}
	return 0x821F6DE0;
} // Block from 821F6D78h-821F6DE0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821F6DE0h
// Function '?ApplyAttributeNode@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UAttributeState@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAVCNodeAttribute@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6DE0);
		  /* 821F6DE0h */ case    0:  		/* bc 12, CR0_EQ, 24 */
		/* 821F6DE0h case    0:*/		if ( regs.CR[0].eq ) { return 0x821F6DF8;  }
		/* 821F6DE0h case    0:*/		return 0x821F6DE4;
		  /* 821F6DE4h */ case    1:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6DE4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6DE4h case    1:*/		return 0x821F6DE8;
		  /* 821F6DE8h */ case    2:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F6DE8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F6DE8h case    2:*/		return 0x821F6DEC;
		  /* 821F6DECh */ case    3:  		/* addi R10, R10, 1 */
		/* 821F6DECh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F6DECh case    3:*/		return 0x821F6DF0;
		  /* 821F6DF0h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821F6DF0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F6DF0h case    4:*/		return 0x821F6DF4;
		  /* 821F6DF4h */ case    5:  		/* bc 4, CR6_GT, 16 */
		/* 821F6DF4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821F6E04;  }
		/* 821F6DF4h case    5:*/		return 0x821F6DF8;
	}
	return 0x821F6DF8;
} // Block from 821F6DE0h-821F6DF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F6DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6DF8);
		  /* 821F6DF8h */ case    0:  		/* li R4, 1 */
		/* 821F6DF8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F6DF8h case    0:*/		return 0x821F6DFC;
		  /* 821F6DFCh */ case    1:  		/* bl -433460 */
		/* 821F6DFCh case    1:*/		regs.LR = 0x821F6E00; return 0x8218D0C8;
		/* 821F6DFCh case    1:*/		return 0x821F6E00;
		  /* 821F6E00h */ case    2:  		/* mr R11, R3 */
		/* 821F6E00h case    2:*/		regs.R11 = regs.R3;
		/* 821F6E00h case    2:*/		return 0x821F6E04;
	}
	return 0x821F6E04;
} // Block from 821F6DF8h-821F6E04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6E04);
		  /* 821F6E04h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6E04h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6E04h case    0:*/		return 0x821F6E08;
		  /* 821F6E08h */ case    1:  		/* mr R3, R31 */
		/* 821F6E08h case    1:*/		regs.R3 = regs.R31;
		/* 821F6E08h case    1:*/		return 0x821F6E0C;
		  /* 821F6E0Ch */ case    2:  		/* addi R9, R10, 4 */
		/* 821F6E0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821F6E0Ch case    2:*/		return 0x821F6E10;
		  /* 821F6E10h */ case    3:  		/* addi R8, R10, 1 */
		/* 821F6E10h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F6E10h case    3:*/		return 0x821F6E14;
		  /* 821F6E14h */ case    4:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821F6E14h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821F6E14h case    4:*/		return 0x821F6E18;
		  /* 821F6E18h */ case    5:  		/* stw R8, <#[R11 + 8]> */
		/* 821F6E18h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6E18h case    5:*/		return 0x821F6E1C;
		  /* 821F6E1Ch */ case    6:  		/* stwx R30, <#[R10 + R11]> */
		/* 821F6E1Ch case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F6E1Ch case    6:*/		return 0x821F6E20;
		  /* 821F6E20h */ case    7:  		/* addi R1, R1, 112 */
		/* 821F6E20h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821F6E20h case    7:*/		return 0x821F6E24;
		  /* 821F6E24h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F6E24h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6E24h case    8:*/		return 0x821F6E28;
		  /* 821F6E28h */ case    9:  		/* mtspr LR, R12 */
		/* 821F6E28h case    9:*/		regs.LR = regs.R12;
		/* 821F6E28h case    9:*/		return 0x821F6E2C;
		  /* 821F6E2Ch */ case   10:  		/* ld R30, <#[R1 - 24]> */
		/* 821F6E2Ch case   10:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F6E2Ch case   10:*/		return 0x821F6E30;
		  /* 821F6E30h */ case   11:  		/* ld R31, <#[R1 - 16]> */
		/* 821F6E30h case   11:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6E30h case   11:*/		return 0x821F6E34;
		  /* 821F6E34h */ case   12:  		/* bclr 20, CR0_LT */
		/* 821F6E34h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F6E34h case   12:*/		return 0x821F6E38;
	}
	return 0x821F6E38;
} // Block from 821F6E04h-821F6E38h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F6E38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6E38);
		  /* 821F6E38h */ case    0:  		/* mfspr R12, LR */
		/* 821F6E38h case    0:*/		regs.R12 = regs.LR;
		/* 821F6E38h case    0:*/		return 0x821F6E3C;
		  /* 821F6E3Ch */ case    1:  		/* bl -1465312 */
		/* 821F6E3Ch case    1:*/		regs.LR = 0x821F6E40; return 0x8209125C;
		/* 821F6E3Ch case    1:*/		return 0x821F6E40;
		  /* 821F6E40h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821F6E40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821F6E40h case    2:*/		return 0x821F6E44;
		  /* 821F6E44h */ case    3:  		/* mr R29, R3 */
		/* 821F6E44h case    3:*/		regs.R29 = regs.R3;
		/* 821F6E44h case    3:*/		return 0x821F6E48;
		  /* 821F6E48h */ case    4:  		/* lwz R3, <#[R29 + 4]> */
		/* 821F6E48h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 821F6E48h case    4:*/		return 0x821F6E4C;
		  /* 821F6E4Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F6E4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6E4Ch case    5:*/		return 0x821F6E50;
		  /* 821F6E50h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821F6E50h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821F6E50h case    6:*/		return 0x821F6E54;
		  /* 821F6E54h */ case    7:  		/* bc 4, CR0_EQ, 276 */
		/* 821F6E54h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821F6F68;  }
		/* 821F6E54h case    7:*/		return 0x821F6E58;
		  /* 821F6E58h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821F6E58h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821F6E58h case    8:*/		return 0x821F6E5C;
		  /* 821F6E5Ch */ case    9:  		/* bc 12, CR0_EQ, 268 */
		/* 821F6E5Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821F6F68;  }
		/* 821F6E5Ch case    9:*/		return 0x821F6E60;
		  /* 821F6E60h */ case   10:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821F6E60h case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821F6E60h case   10:*/		return 0x821F6E64;
		  /* 821F6E64h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F6E64h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6E64h case   11:*/		return 0x821F6E68;
		  /* 821F6E68h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 821F6E68h case   12:*/		if ( regs.CR[0].eq ) { return 0x821F6E74;  }
		/* 821F6E68h case   12:*/		return 0x821F6E6C;
		  /* 821F6E6Ch */ case   13:  		/* li R4, 0 */
		/* 821F6E6Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821F6E6Ch case   13:*/		return 0x821F6E70;
		  /* 821F6E70h */ case   14:  		/* b 16 */
		/* 821F6E70h case   14:*/		return 0x821F6E80;
		/* 821F6E70h case   14:*/		return 0x821F6E74;
	}
	return 0x821F6E74;
} // Block from 821F6E38h-821F6E74h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F6E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6E74);
		  /* 821F6E74h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821F6E74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6E74h case    0:*/		return 0x821F6E78;
		  /* 821F6E78h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6E78h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6E78h case    1:*/		return 0x821F6E7C;
		  /* 821F6E7Ch */ case    2:  		/* addi R4, R11, -4 */
		/* 821F6E7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821F6E7Ch case    2:*/		return 0x821F6E80;
	}
	return 0x821F6E80;
} // Block from 821F6E74h-821F6E80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6E80);
		  /* 821F6E80h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821F6E80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821F6E80h case    0:*/		return 0x821F6E84;
		  /* 821F6E84h */ case    1:  		/* addi R10, R11, 3 */
		/* 821F6E84h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821F6E84h case    1:*/		return 0x821F6E88;
		  /* 821F6E88h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821F6E88h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F6E88h case    2:*/		return 0x821F6E8C;
		  /* 821F6E8Ch */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821F6E8Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821F6E8Ch case    3:*/		return 0x821F6E90;
		  /* 821F6E90h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821F6E90h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821F6E90h case    4:*/		return 0x821F6E94;
		  /* 821F6E94h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821F6E94h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821F6E94h case    5:*/		return 0x821F6E98;
		  /* 821F6E98h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821F6E98h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821F6ED0;  }
		/* 821F6E98h case    6:*/		return 0x821F6E9C;
		  /* 821F6E9Ch */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821F6E9Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821F6E9Ch case    7:*/		return 0x821F6EA0;
		  /* 821F6EA0h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F6EA0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6EA0h case    8:*/		return 0x821F6EA4;
		  /* 821F6EA4h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821F6EA4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6EA4h case    9:*/		return 0x821F6EA8;
		  /* 821F6EA8h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F6EA8h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F6EA8h case   10:*/		return 0x821F6EAC;
		  /* 821F6EACh */ case   11:  		/* stw R9, <#[R10]> */
		/* 821F6EACh case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821F6EACh case   11:*/		return 0x821F6EB0;
		  /* 821F6EB0h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F6EB0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F6EB0h case   12:*/		return 0x821F6EB4;
		  /* 821F6EB4h */ case   13:  		/* lwz R11, <#[R11]> */
		/* 821F6EB4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6EB4h case   13:*/		return 0x821F6EB8;
		  /* 821F6EB8h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6EB8h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6EB8h case   14:*/		return 0x821F6EBC;
		  /* 821F6EBCh */ case   15:  		/* stw R10, <#[R11]> */
		/* 821F6EBCh case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F6EBCh case   15:*/		return 0x821F6EC0;
		  /* 821F6EC0h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821F6EC0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821F6EC0h case   16:*/		return 0x821F6EC4;
		  /* 821F6EC4h */ case   17:  		/* addi R11, R11, 4 */
		/* 821F6EC4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821F6EC4h case   17:*/		return 0x821F6EC8;
		  /* 821F6EC8h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821F6EC8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821F6EC8h case   18:*/		return 0x821F6ECC;
		  /* 821F6ECCh */ case   19:  		/* bl -676036 */
		/* 821F6ECCh case   19:*/		regs.LR = 0x821F6ED0; return 0x82151E08;
		/* 821F6ECCh case   19:*/		return 0x821F6ED0;
	}
	return 0x821F6ED0;
} // Block from 821F6E80h-821F6ED0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F6ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6ED0);
		  /* 821F6ED0h */ case    0:  		/* mr R30, R31 */
		/* 821F6ED0h case    0:*/		regs.R30 = regs.R31;
		/* 821F6ED0h case    0:*/		return 0x821F6ED4;
		  /* 821F6ED4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821F6ED4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F6ED4h case    1:*/		return 0x821F6ED8;
		  /* 821F6ED8h */ case    2:  		/* bc 12, CR6_EQ, -144 */
		/* 821F6ED8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F6E48;  }
		/* 821F6ED8h case    2:*/		return 0x821F6EDC;
		  /* 821F6EDCh */ case    3:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F6EDCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F6EDCh case    3:*/		return 0x821F6EE0;
		  /* 821F6EE0h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 821F6EE0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F6EE0h case    4:*/		return 0x821F6EE4;
		  /* 821F6EE4h */ case    5:  		/* bc 4, CR6_EQ, 116 */
		/* 821F6EE4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F6F58;  }
		/* 821F6EE4h case    5:*/		return 0x821F6EE8;
		  /* 821F6EE8h */ case    6:  		/* lwz R31, <#[R30 + 12]> */
		/* 821F6EE8h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 821F6EE8h case    6:*/		return 0x821F6EEC;
		  /* 821F6EECh */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821F6EECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F6EECh case    7:*/		return 0x821F6EF0;
		  /* 821F6EF0h */ case    8:  		/* bc 12, CR6_EQ, 92 */
		/* 821F6EF0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821F6F4C;  }
		/* 821F6EF0h case    8:*/		return 0x821F6EF4;
		  /* 821F6EF4h */ case    9:  		/* lwz R3, <#[R29 + 4]> */
		/* 821F6EF4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 821F6EF4h case    9:*/		return 0x821F6EF8;
		  /* 821F6EF8h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F6EF8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6EF8h case   10:*/		return 0x821F6EFC;
		  /* 821F6EFCh */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F6EFCh case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6EFCh case   11:*/		return 0x821F6F00;
		  /* 821F6F00h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821F6F00h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821F6F28;  }
		/* 821F6F00h case   12:*/		return 0x821F6F04;
		  /* 821F6F04h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 821F6F04h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6F04h case   13:*/		return 0x821F6F08;
		  /* 821F6F08h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6F08h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6F08h case   14:*/		return 0x821F6F0C;
		  /* 821F6F0Ch */ case   15:  		/* addic. R11, R11, -4 */
		/* 821F6F0Ch case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6F0Ch case   15:*/		return 0x821F6F10;
		  /* 821F6F10h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821F6F10h case   16:*/		if ( regs.CR[0].eq ) { return 0x821F6F28;  }
		/* 821F6F10h case   16:*/		return 0x821F6F14;
		  /* 821F6F14h */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6F14h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6F14h case   17:*/		return 0x821F6F18;
		  /* 821F6F18h */ case   18:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F6F18h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F6F18h case   18:*/		return 0x821F6F1C;
		  /* 821F6F1Ch */ case   19:  		/* addi R10, R10, 1 */
		/* 821F6F1Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F6F1Ch case   19:*/		return 0x821F6F20;
		  /* 821F6F20h */ case   20:  		/* cmplw CR6, R10, R9 */
		/* 821F6F20h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F6F20h case   20:*/		return 0x821F6F24;
		  /* 821F6F24h */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 821F6F24h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821F6F34;  }
		/* 821F6F24h case   21:*/		return 0x821F6F28;
	}
	return 0x821F6F28;
} // Block from 821F6ED0h-821F6F28h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821F6F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6F28);
		  /* 821F6F28h */ case    0:  		/* li R4, 1 */
		/* 821F6F28h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F6F28h case    0:*/		return 0x821F6F2C;
		  /* 821F6F2Ch */ case    1:  		/* bl -433764 */
		/* 821F6F2Ch case    1:*/		regs.LR = 0x821F6F30; return 0x8218D0C8;
		/* 821F6F2Ch case    1:*/		return 0x821F6F30;
		  /* 821F6F30h */ case    2:  		/* mr R11, R3 */
		/* 821F6F30h case    2:*/		regs.R11 = regs.R3;
		/* 821F6F30h case    2:*/		return 0x821F6F34;
	}
	return 0x821F6F34;
} // Block from 821F6F28h-821F6F34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6F34);
		  /* 821F6F34h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6F34h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6F34h case    0:*/		return 0x821F6F38;
		  /* 821F6F38h */ case    1:  		/* addi R9, R10, 4 */
		/* 821F6F38h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821F6F38h case    1:*/		return 0x821F6F3C;
		  /* 821F6F3Ch */ case    2:  		/* addi R8, R10, 1 */
		/* 821F6F3Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F6F3Ch case    2:*/		return 0x821F6F40;
		  /* 821F6F40h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821F6F40h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821F6F40h case    3:*/		return 0x821F6F44;
		  /* 821F6F44h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821F6F44h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6F44h case    4:*/		return 0x821F6F48;
		  /* 821F6F48h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821F6F48h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F6F48h case    5:*/		return 0x821F6F4C;
	}
	return 0x821F6F4C;
} // Block from 821F6F34h-821F6F4Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F6F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6F4C);
		  /* 821F6F4Ch */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821F6F4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821F6F4Ch case    0:*/		return 0x821F6F50;
		  /* 821F6F50h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821F6F50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F6F50h case    1:*/		return 0x821F6F54;
		  /* 821F6F54h */ case    2:  		/* bc 4, CR6_EQ, -120 */
		/* 821F6F54h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F6EDC;  }
		/* 821F6F54h case    2:*/		return 0x821F6F58;
	}
	return 0x821F6F58;
} // Block from 821F6F4Ch-821F6F58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6F58);
		  /* 821F6F58h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821F6F58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F6F58h case    0:*/		return 0x821F6F5C;
		  /* 821F6F5Ch */ case    1:  		/* bc 12, CR6_EQ, -276 */
		/* 821F6F5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821F6E48;  }
		/* 821F6F5Ch case    1:*/		return 0x821F6F60;
		  /* 821F6F60h */ case    2:  		/* mr R3, R30 */
		/* 821F6F60h case    2:*/		regs.R3 = regs.R30;
		/* 821F6F60h case    2:*/		return 0x821F6F64;
		  /* 821F6F64h */ case    3:  		/* b 8 */
		/* 821F6F64h case    3:*/		return 0x821F6F6C;
		/* 821F6F64h case    3:*/		return 0x821F6F68;
	}
	return 0x821F6F68;
} // Block from 821F6F58h-821F6F68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F6F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6F68);
		  /* 821F6F68h */ case    0:  		/* li R3, 0 */
		/* 821F6F68h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F6F68h case    0:*/		return 0x821F6F6C;
	}
	return 0x821F6F6C;
} // Block from 821F6F68h-821F6F6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F6F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6F6C);
		  /* 821F6F6Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 821F6F6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821F6F6Ch case    0:*/		return 0x821F6F70;
		  /* 821F6F70h */ case    1:  		/* b -1465540 */
		/* 821F6F70h case    1:*/		return 0x820912AC;
		/* 821F6F70h case    1:*/		return 0x821F6F74;
		  /* 821F6F74h */ case    2:  		/* nop */
		/* 821F6F74h case    2:*/		cpu::op::nop();
		/* 821F6F74h case    2:*/		return 0x821F6F78;
	}
	return 0x821F6F78;
} // Block from 821F6F6Ch-821F6F78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6F78h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6F78);
		  /* 821F6F78h */ case    0:  		/* mfspr R12, LR */
		/* 821F6F78h case    0:*/		regs.R12 = regs.LR;
		/* 821F6F78h case    0:*/		return 0x821F6F7C;
		  /* 821F6F7Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F6F7Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6F7Ch case    1:*/		return 0x821F6F80;
		  /* 821F6F80h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821F6F80h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F6F80h case    2:*/		return 0x821F6F84;
		  /* 821F6F84h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821F6F84h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F6F84h case    3:*/		return 0x821F6F88;
		  /* 821F6F88h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821F6F88h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821F6F88h case    4:*/		return 0x821F6F8C;
		  /* 821F6F8Ch */ case    5:  		/* mr R30, R3 */
		/* 821F6F8Ch case    5:*/		regs.R30 = regs.R3;
		/* 821F6F8Ch case    5:*/		return 0x821F6F90;
		  /* 821F6F90h */ case    6:  		/* lwz R3, <#[R3 + 4]> */
		/* 821F6F90h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6F90h case    6:*/		return 0x821F6F94;
		  /* 821F6F94h */ case    7:  		/* mr R31, R4 */
		/* 821F6F94h case    7:*/		regs.R31 = regs.R4;
		/* 821F6F94h case    7:*/		return 0x821F6F98;
		  /* 821F6F98h */ case    8:  		/* bl -21944 */
		/* 821F6F98h case    8:*/		regs.LR = 0x821F6F9C; return 0x821F19E0;
		/* 821F6F98h case    8:*/		return 0x821F6F9C;
		  /* 821F6F9Ch */ case    9:  		/* lwz R3, <#[R30 + 4]> */
		/* 821F6F9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 821F6F9Ch case    9:*/		return 0x821F6FA0;
		  /* 821F6FA0h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F6FA0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F6FA0h case   10:*/		return 0x821F6FA4;
		  /* 821F6FA4h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F6FA4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F6FA4h case   11:*/		return 0x821F6FA8;
		  /* 821F6FA8h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821F6FA8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821F6FD0;  }
		/* 821F6FA8h case   12:*/		return 0x821F6FAC;
		  /* 821F6FACh */ case   13:  		/* lwz R11, <#[R3]> */
		/* 821F6FACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F6FACh case   13:*/		return 0x821F6FB0;
		  /* 821F6FB0h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F6FB0h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F6FB0h case   14:*/		return 0x821F6FB4;
		  /* 821F6FB4h */ case   15:  		/* addic. R11, R11, -4 */
		/* 821F6FB4h case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F6FB4h case   15:*/		return 0x821F6FB8;
		  /* 821F6FB8h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821F6FB8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821F6FD0;  }
		/* 821F6FB8h case   16:*/		return 0x821F6FBC;
		  /* 821F6FBCh */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6FBCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6FBCh case   17:*/		return 0x821F6FC0;
		  /* 821F6FC0h */ case   18:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F6FC0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F6FC0h case   18:*/		return 0x821F6FC4;
		  /* 821F6FC4h */ case   19:  		/* addi R10, R10, 1 */
		/* 821F6FC4h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F6FC4h case   19:*/		return 0x821F6FC8;
		  /* 821F6FC8h */ case   20:  		/* cmplw CR6, R10, R9 */
		/* 821F6FC8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F6FC8h case   20:*/		return 0x821F6FCC;
		  /* 821F6FCCh */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 821F6FCCh case   21:*/		if ( !regs.CR[6].gt ) { return 0x821F6FDC;  }
		/* 821F6FCCh case   21:*/		return 0x821F6FD0;
	}
	return 0x821F6FD0;
} // Block from 821F6F78h-821F6FD0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821F6FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6FD0);
		  /* 821F6FD0h */ case    0:  		/* li R4, 1 */
		/* 821F6FD0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F6FD0h case    0:*/		return 0x821F6FD4;
		  /* 821F6FD4h */ case    1:  		/* bl -433932 */
		/* 821F6FD4h case    1:*/		regs.LR = 0x821F6FD8; return 0x8218D0C8;
		/* 821F6FD4h case    1:*/		return 0x821F6FD8;
		  /* 821F6FD8h */ case    2:  		/* mr R11, R3 */
		/* 821F6FD8h case    2:*/		regs.R11 = regs.R3;
		/* 821F6FD8h case    2:*/		return 0x821F6FDC;
	}
	return 0x821F6FDC;
} // Block from 821F6FD0h-821F6FDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F6FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F6FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F6FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F6FDC);
		  /* 821F6FDCh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F6FDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6FDCh case    0:*/		return 0x821F6FE0;
		  /* 821F6FE0h */ case    1:  		/* addi R9, R10, 4 */
		/* 821F6FE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821F6FE0h case    1:*/		return 0x821F6FE4;
		  /* 821F6FE4h */ case    2:  		/* addi R8, R10, 1 */
		/* 821F6FE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F6FE4h case    2:*/		return 0x821F6FE8;
		  /* 821F6FE8h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821F6FE8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821F6FE8h case    3:*/		return 0x821F6FEC;
		  /* 821F6FECh */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821F6FECh case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821F6FECh case    4:*/		return 0x821F6FF0;
		  /* 821F6FF0h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821F6FF0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F6FF0h case    5:*/		return 0x821F6FF4;
		  /* 821F6FF4h */ case    6:  		/* addi R1, R1, 112 */
		/* 821F6FF4h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821F6FF4h case    6:*/		return 0x821F6FF8;
		  /* 821F6FF8h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F6FF8h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F6FF8h case    7:*/		return 0x821F6FFC;
		  /* 821F6FFCh */ case    8:  		/* mtspr LR, R12 */
		/* 821F6FFCh case    8:*/		regs.LR = regs.R12;
		/* 821F6FFCh case    8:*/		return 0x821F7000;
		  /* 821F7000h */ case    9:  		/* ld R30, <#[R1 - 24]> */
		/* 821F7000h case    9:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F7000h case    9:*/		return 0x821F7004;
		  /* 821F7004h */ case   10:  		/* ld R31, <#[R1 - 16]> */
		/* 821F7004h case   10:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F7004h case   10:*/		return 0x821F7008;
		  /* 821F7008h */ case   11:  		/* bclr 20, CR0_LT */
		/* 821F7008h case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F7008h case   11:*/		return 0x821F700C;
	}
	return 0x821F700C;
} // Block from 821F6FDCh-821F700Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F700Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F700C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F700C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F700C);
		  /* 821F700Ch */ case    0:  		/* nop */
		/* 821F700Ch case    0:*/		cpu::op::nop();
		/* 821F700Ch case    0:*/		return 0x821F7010;
	}
	return 0x821F7010;
} // Block from 821F700Ch-821F7010h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F7010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7010);
		  /* 821F7010h */ case    0:  		/* mfspr R12, LR */
		/* 821F7010h case    0:*/		regs.R12 = regs.LR;
		/* 821F7010h case    0:*/		return 0x821F7014;
		  /* 821F7014h */ case    1:  		/* bl -1465784 */
		/* 821F7014h case    1:*/		regs.LR = 0x821F7018; return 0x8209125C;
		/* 821F7014h case    1:*/		return 0x821F7018;
		  /* 821F7018h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821F7018h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821F7018h case    2:*/		return 0x821F701C;
		  /* 821F701Ch */ case    3:  		/* lwz R4, <#[R4 + 24]> */
		/* 821F701Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000018) );
		/* 821F701Ch case    3:*/		return 0x821F7020;
		  /* 821F7020h */ case    4:  		/* mr R30, R3 */
		/* 821F7020h case    4:*/		regs.R30 = regs.R3;
		/* 821F7020h case    4:*/		return 0x821F7024;
		  /* 821F7024h */ case    5:  		/* li R29, 0 */
		/* 821F7024h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821F7024h case    5:*/		return 0x821F7028;
		  /* 821F7028h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 821F7028h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821F7028h case    6:*/		return 0x821F702C;
		  /* 821F702Ch */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 821F702Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821F7038;  }
		/* 821F702Ch case    7:*/		return 0x821F7030;
		  /* 821F7030h */ case    8:  		/* li R3, 1 */
		/* 821F7030h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821F7030h case    8:*/		return 0x821F7034;
		  /* 821F7034h */ case    9:  		/* b 128 */
		/* 821F7034h case    9:*/		return 0x821F70B4;
		/* 821F7034h case    9:*/		return 0x821F7038;
	}
	return 0x821F7038;
} // Block from 821F7010h-821F7038h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F7038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7038);
		  /* 821F7038h */ case    0:  		/* mr R5, R30 */
		/* 821F7038h case    0:*/		regs.R5 = regs.R30;
		/* 821F7038h case    0:*/		return 0x821F703C;
		  /* 821F703Ch */ case    1:  		/* addi R3, R1, 80 */
		/* 821F703Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F703Ch case    1:*/		return 0x821F7040;
		  /* 821F7040h */ case    2:  		/* li R31, 0 */
		/* 821F7040h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821F7040h case    2:*/		return 0x821F7044;
		  /* 821F7044h */ case    3:  		/* bl -716 */
		/* 821F7044h case    3:*/		regs.LR = 0x821F7048; return 0x821F6D78;
		/* 821F7044h case    3:*/		return 0x821F7048;
		  /* 821F7048h */ case    4:  		/* b 32 */
		/* 821F7048h case    4:*/		return 0x821F7068;
		/* 821F7048h case    4:*/		return 0x821F704C;
		  /* 821F704Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F704Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F704Ch case    5:*/		return 0x821F7050;
		  /* 821F7050h */ case    6:  		/* cmpwi CR6, R11, 20 */
		/* 821F7050h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000014);
		/* 821F7050h case    6:*/		return 0x821F7054;
		  /* 821F7054h */ case    7:  		/* bc 4, CR6_EQ, 40 */
		/* 821F7054h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821F707C;  }
		/* 821F7054h case    7:*/		return 0x821F7058;
	}
	return 0x821F7058;
} // Block from 821F7038h-821F7058h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F7058h
// Function '?PeekAttributeState@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UAttributeState@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7058);
		  /* 821F7058h */ case    0:  		/* lwz R11, <#[R3 + 16]> */
		/* 821F7058h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821F7058h case    0:*/		return 0x821F705C;
		  /* 821F705Ch */ case    1:  		/* li R31, 1 */
		/* 821F705Ch case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821F705Ch case    1:*/		return 0x821F7060;
		  /* 821F7060h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821F7060h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F7060h case    2:*/		return 0x821F7064;
		  /* 821F7064h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 821F7064h case    3:*/		if ( regs.CR[6].eq ) { return 0x821F7088;  }
		/* 821F7064h case    3:*/		return 0x821F7068;
	}
	return 0x821F7068;
} // Block from 821F7058h-821F7068h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F7068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7068);
		  /* 821F7068h */ case    0:  		/* addi R3, R1, 80 */
		/* 821F7068h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F7068h case    0:*/		return 0x821F706C;
		  /* 821F706Ch */ case    1:  		/* bl -564 */
		/* 821F706Ch case    1:*/		regs.LR = 0x821F7070; return 0x821F6E38;
		/* 821F706Ch case    1:*/		return 0x821F7070;
		  /* 821F7070h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821F7070h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821F7070h case    2:*/		return 0x821F7074;
		  /* 821F7074h */ case    3:  		/* bc 4, CR0_EQ, -40 */
		/* 821F7074h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821F704C;  }
		/* 821F7074h case    3:*/		return 0x821F7078;
		  /* 821F7078h */ case    4:  		/* b 20 */
		/* 821F7078h case    4:*/		return 0x821F708C;
		/* 821F7078h case    4:*/		return 0x821F707C;
	}
	return 0x821F707C;
} // Block from 821F7068h-821F707Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F707Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F707C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F707C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F707C);
		  /* 821F707Ch */ case    0:  		/* li R4, 4801 */
		/* 821F707Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F707Ch case    0:*/		return 0x821F7080;
		  /* 821F7080h */ case    1:  		/* mr R3, R30 */
		/* 821F7080h case    1:*/		regs.R3 = regs.R30;
		/* 821F7080h case    1:*/		return 0x821F7084;
		  /* 821F7084h */ case    2:  		/* bl -676380 */
		/* 821F7084h case    2:*/		regs.LR = 0x821F7088; return 0x82151E68;
		/* 821F7084h case    2:*/		return 0x821F7088;
	}
	return 0x821F7088;
} // Block from 821F707Ch-821F7088h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7088);
		  /* 821F7088h */ case    0:  		/* li R29, 1 */
		/* 821F7088h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821F7088h case    0:*/		return 0x821F708C;
	}
	return 0x821F708C;
} // Block from 821F7088h-821F708Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F708Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F708C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F708C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F708C);
		  /* 821F708Ch */ case    0:  		/* rlwinm R10, R31, 0, 24, 31 */
		/* 821F708Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R31);
		/* 821F708Ch case    0:*/		return 0x821F7090;
		  /* 821F7090h */ case    1:  		/* lwz R11, <#[R1 + 80]> */
		/* 821F7090h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7090h case    1:*/		return 0x821F7094;
		  /* 821F7094h */ case    2:  		/* lwz R9, <#[R1 + 84]> */
		/* 821F7094h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7094h case    2:*/		return 0x821F7098;
		  /* 821F7098h */ case    3:  		/* cntlzw R8, R10 */
		/* 821F7098h case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R10);
		/* 821F7098h case    3:*/		return 0x821F709C;
		  /* 821F709Ch */ case    4:  		/* addi R10, R11, 972 */
		/* 821F709Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3CC);
		/* 821F709Ch case    4:*/		return 0x821F70A0;
		  /* 821F70A0h */ case    5:  		/* rlwinm R10, R8, 27, 31, 31 */
		/* 821F70A0h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R8);
		/* 821F70A0h case    5:*/		return 0x821F70A4;
		  /* 821F70A4h */ case    6:  		/* lwz R8, <#[R11 + 976]> */
		/* 821F70A4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F70A4h case    6:*/		return 0x821F70A8;
		  /* 821F70A8h */ case    7:  		/* or R3, R10, R29 */
		/* 821F70A8h case    7:*/		cpu::op::or<0>(regs,&regs.R3,regs.R10,regs.R29);
		/* 821F70A8h case    7:*/		return 0x821F70AC;
		  /* 821F70ACh */ case    8:  		/* stw R8, <#[R9]> */
		/* 821F70ACh case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821F70ACh case    8:*/		return 0x821F70B0;
		  /* 821F70B0h */ case    9:  		/* stw R9, <#[R11 + 976]> */
		/* 821F70B0h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F70B0h case    9:*/		return 0x821F70B4;
	}
	return 0x821F70B4;
} // Block from 821F708Ch-821F70B4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F70B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F70B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F70B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F70B4);
		  /* 821F70B4h */ case    0:  		/* addi R1, R1, 128 */
		/* 821F70B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821F70B4h case    0:*/		return 0x821F70B8;
		  /* 821F70B8h */ case    1:  		/* b -1465868 */
		/* 821F70B8h case    1:*/		return 0x820912AC;
		/* 821F70B8h case    1:*/		return 0x821F70BC;
		  /* 821F70BCh */ case    2:  		/* nop */
		/* 821F70BCh case    2:*/		cpu::op::nop();
		/* 821F70BCh case    2:*/		return 0x821F70C0;
	}
	return 0x821F70C0;
} // Block from 821F70B4h-821F70C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F70C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F70C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F70C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F70C0);
		  /* 821F70C0h */ case    0:  		/* mfspr R12, LR */
		/* 821F70C0h case    0:*/		regs.R12 = regs.LR;
		/* 821F70C0h case    0:*/		return 0x821F70C4;
		  /* 821F70C4h */ case    1:  		/* bl -1465964 */
		/* 821F70C4h case    1:*/		regs.LR = 0x821F70C8; return 0x82091258;
		/* 821F70C4h case    1:*/		return 0x821F70C8;
		  /* 821F70C8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821F70C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821F70C8h case    2:*/		return 0x821F70CC;
		  /* 821F70CCh */ case    3:  		/* mr R31, R3 */
		/* 821F70CCh case    3:*/		regs.R31 = regs.R3;
		/* 821F70CCh case    3:*/		return 0x821F70D0;
		  /* 821F70D0h */ case    4:  		/* mr R30, R4 */
		/* 821F70D0h case    4:*/		regs.R30 = regs.R4;
		/* 821F70D0h case    4:*/		return 0x821F70D4;
		  /* 821F70D4h */ case    5:  		/* li R29, 1 */
		/* 821F70D4h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821F70D4h case    5:*/		return 0x821F70D8;
		  /* 821F70D8h */ case    6:  		/* li R28, 0 */
		/* 821F70D8h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821F70D8h case    6:*/		return 0x821F70DC;
		  /* 821F70DCh */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 821F70DCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F70DCh case    7:*/		return 0x821F70E0;
		  /* 821F70E0h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 821F70E0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821F7104;  }
		/* 821F70E0h case    8:*/		return 0x821F70E4;
		  /* 821F70E4h */ case    9:  		/* lwz R11, <#[R31 + 32]> */
		/* 821F70E4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821F70E4h case    9:*/		return 0x821F70E8;
		  /* 821F70E8h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821F70E8h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821F70E8h case   10:*/		return 0x821F70EC;
		  /* 821F70ECh */ case   11:  		/* bc 4, CR0_EQ, 512 */
		/* 821F70ECh case   11:*/		if ( !regs.CR[0].eq ) { return 0x821F72EC;  }
		/* 821F70ECh case   11:*/		return 0x821F70F0;
		  /* 821F70F0h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821F70F0h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821F70F0h case   12:*/		return 0x821F70F4;
		  /* 821F70F4h */ case   13:  		/* bc 12, CR0_EQ, 504 */
		/* 821F70F4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821F72EC;  }
		/* 821F70F4h case   13:*/		return 0x821F70F8;
		  /* 821F70F8h */ case   14:  		/* mr R3, R31 */
		/* 821F70F8h case   14:*/		regs.R3 = regs.R31;
		/* 821F70F8h case   14:*/		return 0x821F70FC;
		  /* 821F70FCh */ case   15:  		/* bl -10676 */
		/* 821F70FCh case   15:*/		regs.LR = 0x821F7100; return 0x821F4748;
		/* 821F70FCh case   15:*/		return 0x821F7100;
		  /* 821F7100h */ case   16:  		/* mr R30, R3 */
		/* 821F7100h case   16:*/		regs.R30 = regs.R3;
		/* 821F7100h case   16:*/		return 0x821F7104;
	}
	return 0x821F7104;
} // Block from 821F70C0h-821F7104h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821F7104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7104);
		  /* 821F7104h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F7104h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F7104h case    0:*/		return 0x821F7108;
		  /* 821F7108h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 821F7108h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F7108h case    1:*/		return 0x821F710C;
		  /* 821F710Ch */ case    2:  		/* bc 12, CR6_EQ, 312 */
		/* 821F710Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821F7244;  }
		/* 821F710Ch case    2:*/		return 0x821F7110;
		  /* 821F7110h */ case    3:  		/* cmpwi CR6, R11, 6 */
		/* 821F7110h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821F7110h case    3:*/		return 0x821F7114;
		  /* 821F7114h */ case    4:  		/* bc 12, CR6_EQ, 204 */
		/* 821F7114h case    4:*/		if ( regs.CR[6].eq ) { return 0x821F71E0;  }
		/* 821F7114h case    4:*/		return 0x821F7118;
		  /* 821F7118h */ case    5:  		/* cmpwi CR6, R11, 8 */
		/* 821F7118h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821F7118h case    5:*/		return 0x821F711C;
		  /* 821F711Ch */ case    6:  		/* bc 4, CR6_EQ, 476 */
		/* 821F711Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821F72F8;  }
		/* 821F711Ch case    6:*/		return 0x821F7120;
		  /* 821F7120h */ case    7:  		/* lwz R10, <#[R30 + 20]> */
		/* 821F7120h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 821F7120h case    7:*/		return 0x821F7124;
		  /* 821F7124h */ case    8:  		/* addi R11, R30, 20 */
		/* 821F7124h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x14);
		/* 821F7124h case    8:*/		return 0x821F7128;
		  /* 821F7128h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821F7128h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F7128h case    9:*/		return 0x821F712C;
		  /* 821F712Ch */ case   10:  		/* bc 12, CR6_EQ, 552 */
		/* 821F712Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821F7354;  }
		/* 821F712Ch case   10:*/		return 0x821F7130;
		  /* 821F7130h */ case   11:  		/* lwz R30, <#[R30 + 16]> */
		/* 821F7130h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000010) );
		/* 821F7130h case   11:*/		return 0x821F7134;
		  /* 821F7134h */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 821F7134h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F7134h case   12:*/		return 0x821F7138;
		  /* 821F7138h */ case   13:  		/* bc 12, CR6_EQ, 560 */
		/* 821F7138h case   13:*/		if ( regs.CR[6].eq ) { return 0x821F7368;  }
		/* 821F7138h case   13:*/		return 0x821F713C;
		  /* 821F713Ch */ case   14:  		/* lwz R11, <#[R11]> */
		/* 821F713Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F713Ch case   14:*/		return 0x821F7140;
		  /* 821F7140h */ case   15:  		/* cmplwi CR6, R11, 1 */
		/* 821F7140h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821F7140h case   15:*/		return 0x821F7144;
		  /* 821F7144h */ case   16:  		/* bc 4, CR6_GT, 416 */
		/* 821F7144h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821F72E4;  }
		/* 821F7144h case   16:*/		return 0x821F7148;
		  /* 821F7148h */ case   17:  		/* lwz R10, <#[R31 + 12]> */
		/* 821F7148h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F7148h case   17:*/		return 0x821F714C;
		  /* 821F714Ch */ case   18:  		/* addi R11, R11, -2 */
		/* 821F714Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821F714Ch case   18:*/		return 0x821F7150;
		  /* 821F7150h */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 821F7150h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821F7150h case   19:*/		return 0x821F7154;
		  /* 821F7154h */ case   20:  		/* addi R3, R31, 28 */
		/* 821F7154h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x1C);
		/* 821F7154h case   20:*/		return 0x821F7158;
		  /* 821F7158h */ case   21:  		/* lwz R8, <#[R31 + 16]> */
		/* 821F7158h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 821F7158h case   21:*/		return 0x821F715C;
		  /* 821F715Ch */ case   22:  		/* lwz R7, <#[R31 + 24]> */
		/* 821F715Ch case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 821F715Ch case   22:*/		return 0x821F7160;
		  /* 821F7160h */ case   23:  		/* lwz R6, <#[R31 + 32]> */
		/* 821F7160h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000020) );
		/* 821F7160h case   23:*/		return 0x821F7164;
		  /* 821F7164h */ case   24:  		/* stw R30, <#[R1 + 80]> */
		/* 821F7164h case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7164h case   24:*/		return 0x821F7168;
		  /* 821F7168h */ case   25:  		/* rlwinm. R6, R6, 0, 31, 31 */
		/* 821F7168h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R6,regs.R6);
		/* 821F7168h case   25:*/		return 0x821F716C;
		  /* 821F716Ch */ case   26:  		/* stw R10, <#[R1 + 92]> */
		/* 821F716Ch case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821F716Ch case   26:*/		return 0x821F7170;
		  /* 821F7170h */ case   27:  		/* stw R9, <#[R1 + 96]> */
		/* 821F7170h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821F7170h case   27:*/		return 0x821F7174;
		  /* 821F7174h */ case   28:  		/* stw R11, <#[R1 + 88]> */
		/* 821F7174h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821F7174h case   28:*/		return 0x821F7178;
		  /* 821F7178h */ case   29:  		/* stw R8, <#[R1 + 100]> */
		/* 821F7178h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000064) );
		/* 821F7178h case   29:*/		return 0x821F717C;
		  /* 821F717Ch */ case   30:  		/* stb R29, <#[R1 + 84]> */
		/* 821F717Ch case   30:*/		cpu::mem::store8( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821F717Ch case   30:*/		return 0x821F7180;
		  /* 821F7180h */ case   31:  		/* stw R7, <#[R1 + 104]> */
		/* 821F7180h case   31:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000068) );
		/* 821F7180h case   31:*/		return 0x821F7184;
		  /* 821F7184h */ case   32:  		/* bc 4, CR0_EQ, 40 */
		/* 821F7184h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821F71AC;  }
		/* 821F7184h case   32:*/		return 0x821F7188;
		  /* 821F7188h */ case   33:  		/* lwz R11, <#[R3]> */
		/* 821F7188h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7188h case   33:*/		return 0x821F718C;
		  /* 821F718Ch */ case   34:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F718Ch case   34:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F718Ch case   34:*/		return 0x821F7190;
		  /* 821F7190h */ case   35:  		/* addic. R11, R11, -4 */
		/* 821F7190h case   35:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F7190h case   35:*/		return 0x821F7194;
		  /* 821F7194h */ case   36:  		/* bc 12, CR0_EQ, 24 */
		/* 821F7194h case   36:*/		if ( regs.CR[0].eq ) { return 0x821F71AC;  }
		/* 821F7194h case   36:*/		return 0x821F7198;
		  /* 821F7198h */ case   37:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F7198h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7198h case   37:*/		return 0x821F719C;
		  /* 821F719Ch */ case   38:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F719Ch case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F719Ch case   38:*/		return 0x821F71A0;
		  /* 821F71A0h */ case   39:  		/* addi R10, R10, 1 */
		/* 821F71A0h case   39:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F71A0h case   39:*/		return 0x821F71A4;
		  /* 821F71A4h */ case   40:  		/* cmplw CR6, R10, R9 */
		/* 821F71A4h case   40:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F71A4h case   40:*/		return 0x821F71A8;
	}
	return 0x821F71A8;
} // Block from 821F7104h-821F71A8h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821F71A8h
// Function '?ImportParameterInitialValues@Compiler@D3DXShader@@AAAXPAUFunction@2@PAVCNode@2@PAVResultStack@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F71A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F71A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F71A8);
		  /* 821F71A8h */ case    0:  		/* bc 4, CR6_GT, 16 */
		/* 821F71A8h case    0:*/		if ( !regs.CR[6].gt ) { return 0x821F71B8;  }
		/* 821F71A8h case    0:*/		return 0x821F71AC;
	}
	return 0x821F71AC;
} // Block from 821F71A8h-821F71ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F71ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F71AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F71AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F71AC);
		  /* 821F71ACh */ case    0:  		/* li R4, 1 */
		/* 821F71ACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F71ACh case    0:*/		return 0x821F71B0;
		  /* 821F71B0h */ case    1:  		/* bl -21976 */
		/* 821F71B0h case    1:*/		regs.LR = 0x821F71B4; return 0x821F1BD8;
		/* 821F71B0h case    1:*/		return 0x821F71B4;
		  /* 821F71B4h */ case    2:  		/* mr R11, R3 */
		/* 821F71B4h case    2:*/		regs.R11 = regs.R3;
		/* 821F71B4h case    2:*/		return 0x821F71B8;
	}
	return 0x821F71B8;
} // Block from 821F71ACh-821F71B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F71B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F71B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F71B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F71B8);
		  /* 821F71B8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F71B8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F71B8h case    0:*/		return 0x821F71BC;
		  /* 821F71BCh */ case    1:  		/* addi R4, R1, 80 */
		/* 821F71BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821F71BCh case    1:*/		return 0x821F71C0;
		  /* 821F71C0h */ case    2:  		/* li R5, 28 */
		/* 821F71C0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821F71C0h case    2:*/		return 0x821F71C4;
		  /* 821F71C4h */ case    3:  		/* mulli R9, R10, 28 */
		/* 821F71C4h case    3:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R10,0x1C);
		/* 821F71C4h case    3:*/		return 0x821F71C8;
		  /* 821F71C8h */ case    4:  		/* add R9, R9, R11 */
		/* 821F71C8h case    4:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821F71C8h case    4:*/		return 0x821F71CC;
		  /* 821F71CCh */ case    5:  		/* addi R10, R10, 1 */
		/* 821F71CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F71CCh case    5:*/		return 0x821F71D0;
		  /* 821F71D0h */ case    6:  		/* addi R3, R9, 16 */
		/* 821F71D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R9,0x10);
		/* 821F71D0h case    6:*/		return 0x821F71D4;
		  /* 821F71D4h */ case    7:  		/* stw R10, <#[R11 + 8]> */
		/* 821F71D4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F71D4h case    7:*/		return 0x821F71D8;
		  /* 821F71D8h */ case    8:  		/* bl -1464360 */
		/* 821F71D8h case    8:*/		regs.LR = 0x821F71DC; return 0x820919B0;
		/* 821F71D8h case    8:*/		return 0x821F71DC;
		  /* 821F71DCh */ case    9:  		/* b 264 */
		/* 821F71DCh case    9:*/		return 0x821F72E4;
		/* 821F71DCh case    9:*/		return 0x821F71E0;
	}
	return 0x821F71E0;
} // Block from 821F71B8h-821F71E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F71E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F71E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F71E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F71E0);
		  /* 821F71E0h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 821F71E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821F71E0h case    0:*/		return 0x821F71E4;
		  /* 821F71E4h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 821F71E4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F71E4h case    1:*/		return 0x821F71E8;
		  /* 821F71E8h */ case    2:  		/* bc 4, CR6_EQ, 404 */
		/* 821F71E8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F737C;  }
		/* 821F71E8h case    2:*/		return 0x821F71EC;
		  /* 821F71ECh */ case    3:  		/* lwz R11, <#[R30 + 24]> */
		/* 821F71ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 821F71ECh case    3:*/		return 0x821F71F0;
		  /* 821F71F0h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F71F0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F71F0h case    4:*/		return 0x821F71F4;
		  /* 821F71F4h */ case    5:  		/* cmpwi CR6, R10, 11 */
		/* 821F71F4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 821F71F4h case    5:*/		return 0x821F71F8;
		  /* 821F71F8h */ case    6:  		/* bc 4, CR6_EQ, 408 */
		/* 821F71F8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821F7390;  }
		/* 821F71F8h case    6:*/		return 0x821F71FC;
		  /* 821F71FCh */ case    7:  		/* lwz R10, <#[R31 + 8]> */
		/* 821F71FCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821F71FCh case    7:*/		return 0x821F7200;
		  /* 821F7200h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821F7200h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F7200h case    8:*/		return 0x821F7204;
		  /* 821F7204h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821F7204h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821F7214;  }
		/* 821F7204h case    9:*/		return 0x821F7208;
		  /* 821F7208h */ case   10:  		/* lwz R10, <#[R11 + 60]> */
		/* 821F7208h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 821F7208h case   10:*/		return 0x821F720C;
		  /* 821F720Ch */ case   11:  		/* stw R28, <#[R31 + 20]> */
		/* 821F720Ch case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 821F720Ch case   11:*/		return 0x821F7210;
		  /* 821F7210h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821F7210h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821F7210h case   12:*/		return 0x821F7214;
	}
	return 0x821F7214;
} // Block from 821F71E0h-821F7214h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F7214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7214);
		  /* 821F7214h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 821F7214h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F7214h case    0:*/		return 0x821F7218;
		  /* 821F7218h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821F7218h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F7218h case    1:*/		return 0x821F721C;
		  /* 821F721Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821F721Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F7228;  }
		/* 821F721Ch case    2:*/		return 0x821F7220;
		  /* 821F7220h */ case    3:  		/* lwz R10, <#[R11 + 64]> */
		/* 821F7220h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000040) );
		/* 821F7220h case    3:*/		return 0x821F7224;
		  /* 821F7224h */ case    4:  		/* stw R10, <#[R31 + 12]> */
		/* 821F7224h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F7224h case    4:*/		return 0x821F7228;
	}
	return 0x821F7228;
} // Block from 821F7214h-821F7228h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7228);
		  /* 821F7228h */ case    0:  		/* lwz R10, <#[R11 + 72]> */
		/* 821F7228h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 821F7228h case    0:*/		return 0x821F722C;
		  /* 821F722Ch */ case    1:  		/* stw R10, <#[R31 + 16]> */
		/* 821F722Ch case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821F722Ch case    1:*/		return 0x821F7230;
		  /* 821F7230h */ case    2:  		/* lwz R10, <#[R11 + 44]> */
		/* 821F7230h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821F7230h case    2:*/		return 0x821F7234;
		  /* 821F7234h */ case    3:  		/* rlwinm R10, R10, 0, 11, 14 */
		/* 821F7234h case    3:*/		cpu::op::rlwinm<0,0,11,14>(regs,&regs.R10,regs.R10);
		/* 821F7234h case    3:*/		return 0x821F7238;
		  /* 821F7238h */ case    4:  		/* stw R10, <#[R31 + 24]> */
		/* 821F7238h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 821F7238h case    4:*/		return 0x821F723C;
		  /* 821F723Ch */ case    5:  		/* lwz R30, <#[R11 + 48]> */
		/* 821F723Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000030) );
		/* 821F723Ch case    5:*/		return 0x821F7240;
		  /* 821F7240h */ case    6:  		/* b -356 */
		/* 821F7240h case    6:*/		return 0x821F70DC;
		/* 821F7240h case    6:*/		return 0x821F7244;
	}
	return 0x821F7244;
} // Block from 821F7228h-821F7244h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F7244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7244);
		  /* 821F7244h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821F7244h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821F7244h case    0:*/		return 0x821F7248;
		  /* 821F7248h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F7248h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F7248h case    1:*/		return 0x821F724C;
		  /* 821F724Ch */ case    2:  		/* bc 12, CR6_EQ, 148 */
		/* 821F724Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821F72E0;  }
		/* 821F724Ch case    2:*/		return 0x821F7250;
		  /* 821F7250h */ case    3:  		/* lwz R10, <#[R31 + 12]> */
		/* 821F7250h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F7250h case    3:*/		return 0x821F7254;
		  /* 821F7254h */ case    4:  		/* addi R3, R31, 28 */
		/* 821F7254h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x1C);
		/* 821F7254h case    4:*/		return 0x821F7258;
		  /* 821F7258h */ case    5:  		/* lwz R9, <#[R31 + 8]> */
		/* 821F7258h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821F7258h case    5:*/		return 0x821F725C;
		  /* 821F725Ch */ case    6:  		/* lwz R8, <#[R31 + 16]> */
		/* 821F725Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		/* 821F725Ch case    6:*/		return 0x821F7260;
		  /* 821F7260h */ case    7:  		/* lwz R7, <#[R31 + 24]> */
		/* 821F7260h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 821F7260h case    7:*/		return 0x821F7264;
		  /* 821F7264h */ case    8:  		/* lwz R6, <#[R31 + 32]> */
		/* 821F7264h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000020) );
		/* 821F7264h case    8:*/		return 0x821F7268;
		  /* 821F7268h */ case    9:  		/* stw R11, <#[R1 + 80]> */
		/* 821F7268h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7268h case    9:*/		return 0x821F726C;
		  /* 821F726Ch */ case   10:  		/* rlwinm. R11, R6, 0, 31, 31 */
		/* 821F726Ch case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R6);
		/* 821F726Ch case   10:*/		return 0x821F7270;
		  /* 821F7270h */ case   11:  		/* stw R10, <#[R1 + 92]> */
		/* 821F7270h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821F7270h case   11:*/		return 0x821F7274;
		  /* 821F7274h */ case   12:  		/* stw R9, <#[R1 + 96]> */
		/* 821F7274h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821F7274h case   12:*/		return 0x821F7278;
		  /* 821F7278h */ case   13:  		/* stw R28, <#[R1 + 88]> */
		/* 821F7278h case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 821F7278h case   13:*/		return 0x821F727C;
		  /* 821F727Ch */ case   14:  		/* stw R8, <#[R1 + 100]> */
		/* 821F727Ch case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000064) );
		/* 821F727Ch case   14:*/		return 0x821F7280;
		  /* 821F7280h */ case   15:  		/* stb R28, <#[R1 + 84]> */
		/* 821F7280h case   15:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7280h case   15:*/		return 0x821F7284;
		  /* 821F7284h */ case   16:  		/* stw R7, <#[R1 + 104]> */
		/* 821F7284h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000068) );
		/* 821F7284h case   16:*/		return 0x821F7288;
		  /* 821F7288h */ case   17:  		/* bc 4, CR0_EQ, 40 */
		/* 821F7288h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821F72B0;  }
		/* 821F7288h case   17:*/		return 0x821F728C;
		  /* 821F728Ch */ case   18:  		/* lwz R11, <#[R3]> */
		/* 821F728Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F728Ch case   18:*/		return 0x821F7290;
		  /* 821F7290h */ case   19:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F7290h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F7290h case   19:*/		return 0x821F7294;
		  /* 821F7294h */ case   20:  		/* addic. R11, R11, -4 */
		/* 821F7294h case   20:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F7294h case   20:*/		return 0x821F7298;
		  /* 821F7298h */ case   21:  		/* bc 12, CR0_EQ, 24 */
		/* 821F7298h case   21:*/		if ( regs.CR[0].eq ) { return 0x821F72B0;  }
		/* 821F7298h case   21:*/		return 0x821F729C;
		  /* 821F729Ch */ case   22:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F729Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F729Ch case   22:*/		return 0x821F72A0;
		  /* 821F72A0h */ case   23:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F72A0h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F72A0h case   23:*/		return 0x821F72A4;
		  /* 821F72A4h */ case   24:  		/* addi R10, R10, 1 */
		/* 821F72A4h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F72A4h case   24:*/		return 0x821F72A8;
		  /* 821F72A8h */ case   25:  		/* cmplw CR6, R10, R9 */
		/* 821F72A8h case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F72A8h case   25:*/		return 0x821F72AC;
		  /* 821F72ACh */ case   26:  		/* bc 4, CR6_GT, 16 */
		/* 821F72ACh case   26:*/		if ( !regs.CR[6].gt ) { return 0x821F72BC;  }
		/* 821F72ACh case   26:*/		return 0x821F72B0;
	}
	return 0x821F72B0;
} // Block from 821F7244h-821F72B0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821F72B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F72B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F72B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F72B0);
		  /* 821F72B0h */ case    0:  		/* li R4, 1 */
		/* 821F72B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F72B0h case    0:*/		return 0x821F72B4;
		  /* 821F72B4h */ case    1:  		/* bl -22236 */
		/* 821F72B4h case    1:*/		regs.LR = 0x821F72B8; return 0x821F1BD8;
		/* 821F72B4h case    1:*/		return 0x821F72B8;
	}
	return 0x821F72B8;
} // Block from 821F72B0h-821F72B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F72B8h
// Function '?ConvertToRVals@Compiler@D3DXShader@@AAAXPAVResultStack@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F72B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F72B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F72B8);
		  /* 821F72B8h */ case    0:  		/* mr R11, R3 */
		/* 821F72B8h case    0:*/		regs.R11 = regs.R3;
		/* 821F72B8h case    0:*/		return 0x821F72BC;
	}
	return 0x821F72BC;
} // Block from 821F72B8h-821F72BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F72BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F72BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F72BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F72BC);
		  /* 821F72BCh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F72BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F72BCh case    0:*/		return 0x821F72C0;
		  /* 821F72C0h */ case    1:  		/* addi R4, R1, 80 */
		/* 821F72C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821F72C0h case    1:*/		return 0x821F72C4;
		  /* 821F72C4h */ case    2:  		/* li R5, 28 */
		/* 821F72C4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821F72C4h case    2:*/		return 0x821F72C8;
		  /* 821F72C8h */ case    3:  		/* mulli R9, R10, 28 */
		/* 821F72C8h case    3:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R10,0x1C);
		/* 821F72C8h case    3:*/		return 0x821F72CC;
		  /* 821F72CCh */ case    4:  		/* add R9, R9, R11 */
		/* 821F72CCh case    4:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821F72CCh case    4:*/		return 0x821F72D0;
		  /* 821F72D0h */ case    5:  		/* addi R10, R10, 1 */
		/* 821F72D0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F72D0h case    5:*/		return 0x821F72D4;
		  /* 821F72D4h */ case    6:  		/* addi R3, R9, 16 */
		/* 821F72D4h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R9,0x10);
		/* 821F72D4h case    6:*/		return 0x821F72D8;
		  /* 821F72D8h */ case    7:  		/* stw R10, <#[R11 + 8]> */
		/* 821F72D8h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F72D8h case    7:*/		return 0x821F72DC;
		  /* 821F72DCh */ case    8:  		/* bl -1464620 */
		/* 821F72DCh case    8:*/		regs.LR = 0x821F72E0; return 0x820919B0;
		/* 821F72DCh case    8:*/		return 0x821F72E0;
	}
	return 0x821F72E0;
} // Block from 821F72BCh-821F72E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F72E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F72E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F72E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F72E0);
		  /* 821F72E0h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821F72E0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821F72E0h case    0:*/		return 0x821F72E4;
	}
	return 0x821F72E4;
} // Block from 821F72E0h-821F72E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F72E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F72E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F72E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F72E4);
		  /* 821F72E4h */ case    0:  		/* stb R29, <#[R31 + 36]> */
		/* 821F72E4h case    0:*/		cpu::mem::store8( regs, regs.R29, (uint32)(regs.R31 + 0x00000024) );
		/* 821F72E4h case    0:*/		return 0x821F72E8;
		  /* 821F72E8h */ case    1:  		/* b -524 */
		/* 821F72E8h case    1:*/		return 0x821F70DC;
		/* 821F72E8h case    1:*/		return 0x821F72EC;
	}
	return 0x821F72EC;
} // Block from 821F72E4h-821F72ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F72ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F72EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F72EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F72EC);
		  /* 821F72ECh */ case    0:  		/* li R3, 0 */
		/* 821F72ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F72ECh case    0:*/		return 0x821F72F0;
		  /* 821F72F0h */ case    1:  		/* addi R1, R1, 160 */
		/* 821F72F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821F72F0h case    1:*/		return 0x821F72F4;
		  /* 821F72F4h */ case    2:  		/* b -1466444 */
		/* 821F72F4h case    2:*/		return 0x820912A8;
		/* 821F72F4h case    2:*/		return 0x821F72F8;
	}
	return 0x821F72F8;
} // Block from 821F72ECh-821F72F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F72F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F72F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F72F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F72F8);
		  /* 821F72F8h */ case    0:  		/* cmpwi CR6, R11, 9 */
		/* 821F72F8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821F72F8h case    0:*/		return 0x821F72FC;
		  /* 821F72FCh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821F72FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821F7314;  }
		/* 821F72FCh case    1:*/		return 0x821F7300;
		  /* 821F7300h */ case    2:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 821F7300h case    2:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 821F7300h case    2:*/		return 0x821F7304;
		  /* 821F7304h */ case    3:  		/* li R4, 4801 */
		/* 821F7304h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7304h case    3:*/		return 0x821F7308;
		  /* 821F7308h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 821F7308h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7308h case    4:*/		return 0x821F730C;
		  /* 821F730Ch */ case    5:  		/* lwz R3, <#[R11 + 148]> */
		/* 821F730Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821F730Ch case    5:*/		return 0x821F7310;
		  /* 821F7310h */ case    6:  		/* bl -677032 */
		/* 821F7310h case    6:*/		regs.LR = 0x821F7314; return 0x82151E68;
		/* 821F7310h case    6:*/		return 0x821F7314;
	}
	return 0x821F7314;
} // Block from 821F72F8h-821F7314h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F7314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7314);
		  /* 821F7314h */ case    0:  		/* stw R30, <#[R31]> */
		/* 821F7314h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 821F7314h case    0:*/		return 0x821F7318;
		  /* 821F7318h */ case    1:  		/* lwz R10, <#[R30 + 28]> */
		/* 821F7318h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 821F7318h case    1:*/		return 0x821F731C;
		  /* 821F731Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821F731Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F731Ch case    2:*/		return 0x821F7320;
		  /* 821F7320h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 821F7320h case    3:*/		if ( regs.CR[6].eq ) { return 0x821F7340;  }
		/* 821F7320h case    3:*/		return 0x821F7324;
		  /* 821F7324h */ case    4:  		/* lwz R11, <#[R30 + 32]> */
		/* 821F7324h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821F7324h case    4:*/		return 0x821F7328;
	}
	return 0x821F7328;
} // Block from 821F7314h-821F7328h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7328h
// Function '?GenerateSumOfSquares@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVResultStack@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7328);
		  /* 821F7328h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821F7328h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F7328h case    0:*/		return 0x821F732C;
		  /* 821F732Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821F732Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821F7340;  }
		/* 821F732Ch case    1:*/		return 0x821F7330;
		  /* 821F7330h */ case    2:  		/* mullw R11, R11, R10 */
		/* 821F7330h case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821F7330h case    2:*/		return 0x821F7334;
		  /* 821F7334h */ case    3:  		/* stw R11, <#[R31 + 4]> */
		/* 821F7334h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821F7334h case    3:*/		return 0x821F7338;
		  /* 821F7338h */ case    4:  		/* li R3, 1 */
		/* 821F7338h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821F7338h case    4:*/		return 0x821F733C;
		  /* 821F733Ch */ case    5:  		/* b -76 */
		/* 821F733Ch case    5:*/		return 0x821F72F0;
		/* 821F733Ch case    5:*/		return 0x821F7340;
	}
	return 0x821F7340;
} // Block from 821F7328h-821F7340h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F7340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7340);
		  /* 821F7340h */ case    0:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 821F7340h case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 821F7340h case    0:*/		return 0x821F7344;
		  /* 821F7344h */ case    1:  		/* li R4, 4801 */
		/* 821F7344h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7344h case    1:*/		return 0x821F7348;
		  /* 821F7348h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821F7348h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7348h case    2:*/		return 0x821F734C;
		  /* 821F734Ch */ case    3:  		/* lwz R3, <#[R11 + 148]> */
		/* 821F734Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821F734Ch case    3:*/		return 0x821F7350;
		  /* 821F7350h */ case    4:  		/* bl -677096 */
		/* 821F7350h case    4:*/		regs.LR = 0x821F7354; return 0x82151E68;
		/* 821F7350h case    4:*/		return 0x821F7354;
	}
	return 0x821F7354;
} // Block from 821F7340h-821F7354h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7354);
		  /* 821F7354h */ case    0:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 821F7354h case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 821F7354h case    0:*/		return 0x821F7358;
		  /* 821F7358h */ case    1:  		/* li R4, 4801 */
		/* 821F7358h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7358h case    1:*/		return 0x821F735C;
		  /* 821F735Ch */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821F735Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F735Ch case    2:*/		return 0x821F7360;
		  /* 821F7360h */ case    3:  		/* lwz R3, <#[R11 + 148]> */
		/* 821F7360h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821F7360h case    3:*/		return 0x821F7364;
		  /* 821F7364h */ case    4:  		/* bl -677116 */
		/* 821F7364h case    4:*/		regs.LR = 0x821F7368; return 0x82151E68;
		/* 821F7364h case    4:*/		return 0x821F7368;
	}
	return 0x821F7368;
} // Block from 821F7354h-821F7368h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7368);
		  /* 821F7368h */ case    0:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 821F7368h case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 821F7368h case    0:*/		return 0x821F736C;
		  /* 821F736Ch */ case    1:  		/* li R4, 4801 */
		/* 821F736Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F736Ch case    1:*/		return 0x821F7370;
		  /* 821F7370h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821F7370h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7370h case    2:*/		return 0x821F7374;
		  /* 821F7374h */ case    3:  		/* lwz R3, <#[R11 + 148]> */
		/* 821F7374h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821F7374h case    3:*/		return 0x821F7378;
		  /* 821F7378h */ case    4:  		/* bl -677136 */
		/* 821F7378h case    4:*/		regs.LR = 0x821F737C; return 0x82151E68;
		/* 821F7378h case    4:*/		return 0x821F737C;
	}
	return 0x821F737C;
} // Block from 821F7368h-821F737Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F737Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F737C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F737C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F737C);
		  /* 821F737Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 821F737Ch case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 821F737Ch case    0:*/		return 0x821F7380;
		  /* 821F7380h */ case    1:  		/* li R4, 4801 */
		/* 821F7380h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7380h case    1:*/		return 0x821F7384;
		  /* 821F7384h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821F7384h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7384h case    2:*/		return 0x821F7388;
	}
	return 0x821F7388;
} // Block from 821F737Ch-821F7388h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7388h
// Function '?GenerateDotProduct@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVResultStack@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7388);
		  /* 821F7388h */ case    0:  		/* lwz R3, <#[R11 + 148]> */
		/* 821F7388h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821F7388h case    0:*/		return 0x821F738C;
		  /* 821F738Ch */ case    1:  		/* bl -677156 */
		/* 821F738Ch case    1:*/		regs.LR = 0x821F7390; return 0x82151E68;
		/* 821F738Ch case    1:*/		return 0x821F7390;
	}
	return 0x821F7390;
} // Block from 821F7388h-821F7390h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F7390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7390);
		  /* 821F7390h */ case    0:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 821F7390h case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 821F7390h case    0:*/		return 0x821F7394;
		  /* 821F7394h */ case    1:  		/* li R4, 4801 */
		/* 821F7394h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7394h case    1:*/		return 0x821F7398;
		  /* 821F7398h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821F7398h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7398h case    2:*/		return 0x821F739C;
		  /* 821F739Ch */ case    3:  		/* lwz R3, <#[R11 + 148]> */
		/* 821F739Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821F739Ch case    3:*/		return 0x821F73A0;
		  /* 821F73A0h */ case    4:  		/* bl -677176 */
		/* 821F73A0h case    4:*/		regs.LR = 0x821F73A4; return 0x82151E68;
		/* 821F73A0h case    4:*/		return 0x821F73A4;
		  /* 821F73A4h */ case    5:  		/* nop */
		/* 821F73A4h case    5:*/		cpu::op::nop();
		/* 821F73A4h case    5:*/		return 0x821F73A8;
	}
	return 0x821F73A8;
} // Block from 821F7390h-821F73A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F73A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F73A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F73A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F73A8);
		  /* 821F73A8h */ case    0:  		/* mfspr R12, LR */
		/* 821F73A8h case    0:*/		regs.R12 = regs.LR;
		/* 821F73A8h case    0:*/		return 0x821F73AC;
		  /* 821F73ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F73ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F73ACh case    1:*/		return 0x821F73B0;
		  /* 821F73B0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821F73B0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F73B0h case    2:*/		return 0x821F73B4;
		  /* 821F73B4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F73B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F73B4h case    3:*/		return 0x821F73B8;
		  /* 821F73B8h */ case    4:  		/* lwz R11, <#[R3 + 32]> */
		/* 821F73B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 821F73B8h case    4:*/		return 0x821F73BC;
		  /* 821F73BCh */ case    5:  		/* mr R31, R3 */
		/* 821F73BCh case    5:*/		regs.R31 = regs.R3;
		/* 821F73BCh case    5:*/		return 0x821F73C0;
		  /* 821F73C0h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821F73C0h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821F73C0h case    6:*/		return 0x821F73C4;
		  /* 821F73C4h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 821F73C4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821F73D0;  }
		/* 821F73C4h case    7:*/		return 0x821F73C8;
		  /* 821F73C8h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821F73C8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821F73C8h case    8:*/		return 0x821F73CC;
		  /* 821F73CCh */ case    9:  		/* bc 4, CR0_EQ, 12 */
		/* 821F73CCh case    9:*/		if ( !regs.CR[0].eq ) { return 0x821F73D8;  }
		/* 821F73CCh case    9:*/		return 0x821F73D0;
	}
	return 0x821F73D0;
} // Block from 821F73A8h-821F73D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F73D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F73D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F73D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F73D0);
		  /* 821F73D0h */ case    0:  		/* li R3, 0 */
		/* 821F73D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F73D0h case    0:*/		return 0x821F73D4;
		  /* 821F73D4h */ case    1:  		/* b 24 */
		/* 821F73D4h case    1:*/		return 0x821F73EC;
		/* 821F73D4h case    1:*/		return 0x821F73D8;
	}
	return 0x821F73D8;
} // Block from 821F73D0h-821F73D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F73D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F73D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F73D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F73D8);
		  /* 821F73D8h */ case    0:  		/* mr R3, R31 */
		/* 821F73D8h case    0:*/		regs.R3 = regs.R31;
		/* 821F73D8h case    0:*/		return 0x821F73DC;
		  /* 821F73DCh */ case    1:  		/* bl -11412 */
		/* 821F73DCh case    1:*/		regs.LR = 0x821F73E0; return 0x821F4748;
		/* 821F73DCh case    1:*/		return 0x821F73E0;
		  /* 821F73E0h */ case    2:  		/* mr R4, R3 */
		/* 821F73E0h case    2:*/		regs.R4 = regs.R3;
		/* 821F73E0h case    2:*/		return 0x821F73E4;
		  /* 821F73E4h */ case    3:  		/* mr R3, R31 */
		/* 821F73E4h case    3:*/		regs.R3 = regs.R31;
		/* 821F73E4h case    3:*/		return 0x821F73E8;
	}
	return 0x821F73E8;
} // Block from 821F73D8h-821F73E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F73E8h
// Function '?AssignLValResult@Compiler@D3DXShader@@AAAXPAVResult@2@V32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F73E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F73E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F73E8);
		  /* 821F73E8h */ case    0:  		/* bl -808 */
		/* 821F73E8h case    0:*/		regs.LR = 0x821F73EC; return 0x821F70C0;
		/* 821F73E8h case    0:*/		return 0x821F73EC;
	}
	return 0x821F73EC;
} // Block from 821F73E8h-821F73ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F73ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F73EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F73EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F73EC);
		  /* 821F73ECh */ case    0:  		/* addi R1, R1, 96 */
		/* 821F73ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F73ECh case    0:*/		return 0x821F73F0;
		  /* 821F73F0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F73F0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F73F0h case    1:*/		return 0x821F73F4;
		  /* 821F73F4h */ case    2:  		/* mtspr LR, R12 */
		/* 821F73F4h case    2:*/		regs.LR = regs.R12;
		/* 821F73F4h case    2:*/		return 0x821F73F8;
		  /* 821F73F8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 821F73F8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F73F8h case    3:*/		return 0x821F73FC;
		  /* 821F73FCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 821F73FCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F73FCh case    4:*/		return 0x821F7400;
	}
	return 0x821F7400;
} // Block from 821F73ECh-821F7400h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7400h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7400);
		  /* 821F7400h */ case    0:  		/* mfspr R12, LR */
		/* 821F7400h case    0:*/		regs.R12 = regs.LR;
		/* 821F7400h case    0:*/		return 0x821F7404;
		  /* 821F7404h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F7404h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F7404h case    1:*/		return 0x821F7408;
		  /* 821F7408h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821F7408h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F7408h case    2:*/		return 0x821F740C;
		  /* 821F740Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F740Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F740Ch case    3:*/		return 0x821F7410;
		  /* 821F7410h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F7410h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F7410h case    4:*/		return 0x821F7414;
		  /* 821F7414h */ case    5:  		/* li R10, 0 */
		/* 821F7414h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821F7414h case    5:*/		return 0x821F7418;
		  /* 821F7418h */ case    6:  		/* mr R31, R3 */
		/* 821F7418h case    6:*/		regs.R31 = regs.R3;
		/* 821F7418h case    6:*/		return 0x821F741C;
		  /* 821F741Ch */ case    7:  		/* stb R10, <#[R3 + 36]> */
		/* 821F741Ch case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R3 + 0x00000024) );
		/* 821F741Ch case    7:*/		return 0x821F7420;
		  /* 821F7420h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821F7420h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F7420h case    8:*/		return 0x821F7424;
		  /* 821F7424h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 821F7424h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821F7448;  }
		/* 821F7424h case    9:*/		return 0x821F7428;
		  /* 821F7428h */ case   10:  		/* bl -128 */
		/* 821F7428h case   10:*/		regs.LR = 0x821F742C; return 0x821F73A8;
		/* 821F7428h case   10:*/		return 0x821F742C;
		  /* 821F742Ch */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821F742Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821F742Ch case   11:*/		return 0x821F7430;
		  /* 821F7430h */ case   12:  		/* bc 4, CR0_EQ, 24 */
		/* 821F7430h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821F7448;  }
		/* 821F7430h case   12:*/		return 0x821F7434;
		  /* 821F7434h */ case   13:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 821F7434h case   13:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 821F7434h case   13:*/		return 0x821F7438;
		  /* 821F7438h */ case   14:  		/* li R4, 4801 */
		/* 821F7438h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7438h case   14:*/		return 0x821F743C;
		  /* 821F743Ch */ case   15:  		/* lwz R11, <#[R11]> */
		/* 821F743Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F743Ch case   15:*/		return 0x821F7440;
		  /* 821F7440h */ case   16:  		/* lwz R3, <#[R11 + 148]> */
		/* 821F7440h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821F7440h case   16:*/		return 0x821F7444;
		  /* 821F7444h */ case   17:  		/* bl -677340 */
		/* 821F7444h case   17:*/		regs.LR = 0x821F7448; return 0x82151E68;
		/* 821F7444h case   17:*/		return 0x821F7448;
	}
	return 0x821F7448;
} // Block from 821F7400h-821F7448h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F7448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7448);
		  /* 821F7448h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821F7448h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821F7448h case    0:*/		return 0x821F744C;
		  /* 821F744Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 821F744Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821F744Ch case    1:*/		return 0x821F7450;
		  /* 821F7450h */ case    2:  		/* addi R11, R11, -1 */
		/* 821F7450h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F7450h case    2:*/		return 0x821F7454;
		  /* 821F7454h */ case    3:  		/* stw R11, <#[R31 + 4]> */
		/* 821F7454h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821F7454h case    3:*/		return 0x821F7458;
		  /* 821F7458h */ case    4:  		/* lwz R3, <#[R10 + 20]> */
		/* 821F7458h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000014) );
		/* 821F7458h case    4:*/		return 0x821F745C;
		  /* 821F745Ch */ case    5:  		/* addi R1, R1, 96 */
		/* 821F745Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F745Ch case    5:*/		return 0x821F7460;
		  /* 821F7460h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F7460h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F7460h case    6:*/		return 0x821F7464;
		  /* 821F7464h */ case    7:  		/* mtspr LR, R12 */
		/* 821F7464h case    7:*/		regs.LR = regs.R12;
		/* 821F7464h case    7:*/		return 0x821F7468;
		  /* 821F7468h */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 821F7468h case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F7468h case    8:*/		return 0x821F746C;
		  /* 821F746Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 821F746Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F746Ch case    9:*/		return 0x821F7470;
	}
	return 0x821F7470;
} // Block from 821F7448h-821F7470h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F7470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7470);
		  /* 821F7470h */ case    0:  		/* mfspr R12, LR */
		/* 821F7470h case    0:*/		regs.R12 = regs.LR;
		/* 821F7470h case    0:*/		return 0x821F7474;
		  /* 821F7474h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F7474h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F7474h case    1:*/		return 0x821F7478;
		  /* 821F7478h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F7478h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F7478h case    2:*/		return 0x821F747C;
		  /* 821F747Ch */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F747Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F747Ch case    3:*/		return 0x821F7480;
		  /* 821F7480h */ case    4:  		/* li R10, 0 */
		/* 821F7480h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821F7480h case    4:*/		return 0x821F7484;
		  /* 821F7484h */ case    5:  		/* stw R4, <#[R1 + 84]> */
		/* 821F7484h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7484h case    5:*/		return 0x821F7488;
		  /* 821F7488h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F7488h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F7488h case    6:*/		return 0x821F748C;
		  /* 821F748Ch */ case    7:  		/* stw R10, <#[R1 + 80]> */
		/* 821F748Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821F748Ch case    7:*/		return 0x821F7490;
		  /* 821F7490h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821F7490h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821F74B8;  }
		/* 821F7490h case    8:*/		return 0x821F7494;
		  /* 821F7494h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 821F7494h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7494h case    9:*/		return 0x821F7498;
		  /* 821F7498h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F7498h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F7498h case   10:*/		return 0x821F749C;
		  /* 821F749Ch */ case   11:  		/* addic. R11, R11, -4 */
		/* 821F749Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F749Ch case   11:*/		return 0x821F74A0;
		  /* 821F74A0h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821F74A0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821F74B8;  }
		/* 821F74A0h case   12:*/		return 0x821F74A4;
		  /* 821F74A4h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F74A4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F74A4h case   13:*/		return 0x821F74A8;
		  /* 821F74A8h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F74A8h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F74A8h case   14:*/		return 0x821F74AC;
		  /* 821F74ACh */ case   15:  		/* addi R10, R10, 1 */
		/* 821F74ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F74ACh case   15:*/		return 0x821F74B0;
		  /* 821F74B0h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 821F74B0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F74B0h case   16:*/		return 0x821F74B4;
		  /* 821F74B4h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821F74B4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821F74C4;  }
		/* 821F74B4h case   17:*/		return 0x821F74B8;
	}
	return 0x821F74B8;
} // Block from 821F7470h-821F74B8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F74B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F74B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F74B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F74B8);
		  /* 821F74B8h */ case    0:  		/* li R4, 1 */
		/* 821F74B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F74B8h case    0:*/		return 0x821F74BC;
		  /* 821F74BCh */ case    1:  		/* bl -361988 */
		/* 821F74BCh case    1:*/		regs.LR = 0x821F74C0; return 0x8219EEB8;
		/* 821F74BCh case    1:*/		return 0x821F74C0;
		  /* 821F74C0h */ case    2:  		/* mr R11, R3 */
		/* 821F74C0h case    2:*/		regs.R11 = regs.R3;
		/* 821F74C0h case    2:*/		return 0x821F74C4;
	}
	return 0x821F74C4;
} // Block from 821F74B8h-821F74C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F74C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F74C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F74C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F74C4);
		  /* 821F74C4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F74C4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F74C4h case    0:*/		return 0x821F74C8;
		  /* 821F74C8h */ case    1:  		/* ld R9, <#[R1 + 80]> */
		/* 821F74C8h case    1:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821F74C8h case    1:*/		return 0x821F74CC;
		  /* 821F74CCh */ case    2:  		/* addi R8, R10, 2 */
		/* 821F74CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821F74CCh case    2:*/		return 0x821F74D0;
		  /* 821F74D0h */ case    3:  		/* addi R7, R10, 1 */
		/* 821F74D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821F74D0h case    3:*/		return 0x821F74D4;
		  /* 821F74D4h */ case    4:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821F74D4h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821F74D4h case    4:*/		return 0x821F74D8;
		  /* 821F74D8h */ case    5:  		/* stw R7, <#[R11 + 8]> */
		/* 821F74D8h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821F74D8h case    5:*/		return 0x821F74DC;
		  /* 821F74DCh */ case    6:  		/* stdx R9, <#[R10 + R11]> */
		/* 821F74DCh case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F74DCh case    6:*/		return 0x821F74E0;
		  /* 821F74E0h */ case    7:  		/* addi R1, R1, 96 */
		/* 821F74E0h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F74E0h case    7:*/		return 0x821F74E4;
		  /* 821F74E4h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F74E4h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F74E4h case    8:*/		return 0x821F74E8;
		  /* 821F74E8h */ case    9:  		/* mtspr LR, R12 */
		/* 821F74E8h case    9:*/		regs.LR = regs.R12;
		/* 821F74E8h case    9:*/		return 0x821F74EC;
		  /* 821F74ECh */ case   10:  		/* bclr 20, CR0_LT */
		/* 821F74ECh case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F74ECh case   10:*/		return 0x821F74F0;
	}
	return 0x821F74F0;
} // Block from 821F74C4h-821F74F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F74F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F74F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F74F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F74F0);
		  /* 821F74F0h */ case    0:  		/* mfspr R12, LR */
		/* 821F74F0h case    0:*/		regs.R12 = regs.LR;
		/* 821F74F0h case    0:*/		return 0x821F74F4;
		  /* 821F74F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F74F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F74F4h case    1:*/		return 0x821F74F8;
		  /* 821F74F8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F74F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F74F8h case    2:*/		return 0x821F74FC;
		  /* 821F74FCh */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F74FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F74FCh case    3:*/		return 0x821F7500;
		  /* 821F7500h */ case    4:  		/* li R10, 2 */
		/* 821F7500h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821F7500h case    4:*/		return 0x821F7504;
		  /* 821F7504h */ case    5:  		/* stw R4, <#[R1 + 84]> */
		/* 821F7504h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7504h case    5:*/		return 0x821F7508;
		  /* 821F7508h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F7508h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F7508h case    6:*/		return 0x821F750C;
		  /* 821F750Ch */ case    7:  		/* stw R10, <#[R1 + 80]> */
		/* 821F750Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821F750Ch case    7:*/		return 0x821F7510;
		  /* 821F7510h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821F7510h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821F7538;  }
		/* 821F7510h case    8:*/		return 0x821F7514;
		  /* 821F7514h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 821F7514h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7514h case    9:*/		return 0x821F7518;
		  /* 821F7518h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F7518h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F7518h case   10:*/		return 0x821F751C;
		  /* 821F751Ch */ case   11:  		/* addic. R11, R11, -4 */
		/* 821F751Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F751Ch case   11:*/		return 0x821F7520;
		  /* 821F7520h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821F7520h case   12:*/		if ( regs.CR[0].eq ) { return 0x821F7538;  }
		/* 821F7520h case   12:*/		return 0x821F7524;
		  /* 821F7524h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F7524h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7524h case   13:*/		return 0x821F7528;
		  /* 821F7528h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F7528h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F7528h case   14:*/		return 0x821F752C;
		  /* 821F752Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 821F752Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F752Ch case   15:*/		return 0x821F7530;
		  /* 821F7530h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 821F7530h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F7530h case   16:*/		return 0x821F7534;
		  /* 821F7534h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821F7534h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821F7544;  }
		/* 821F7534h case   17:*/		return 0x821F7538;
	}
	return 0x821F7538;
} // Block from 821F74F0h-821F7538h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F7538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7538);
		  /* 821F7538h */ case    0:  		/* li R4, 1 */
		/* 821F7538h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F7538h case    0:*/		return 0x821F753C;
		  /* 821F753Ch */ case    1:  		/* bl -362116 */
		/* 821F753Ch case    1:*/		regs.LR = 0x821F7540; return 0x8219EEB8;
		/* 821F753Ch case    1:*/		return 0x821F7540;
		  /* 821F7540h */ case    2:  		/* mr R11, R3 */
		/* 821F7540h case    2:*/		regs.R11 = regs.R3;
		/* 821F7540h case    2:*/		return 0x821F7544;
	}
	return 0x821F7544;
} // Block from 821F7538h-821F7544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7544);
		  /* 821F7544h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F7544h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7544h case    0:*/		return 0x821F7548;
		  /* 821F7548h */ case    1:  		/* ld R9, <#[R1 + 80]> */
		/* 821F7548h case    1:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7548h case    1:*/		return 0x821F754C;
		  /* 821F754Ch */ case    2:  		/* addi R8, R10, 2 */
		/* 821F754Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821F754Ch case    2:*/		return 0x821F7550;
		  /* 821F7550h */ case    3:  		/* addi R7, R10, 1 */
		/* 821F7550h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821F7550h case    3:*/		return 0x821F7554;
		  /* 821F7554h */ case    4:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821F7554h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821F7554h case    4:*/		return 0x821F7558;
		  /* 821F7558h */ case    5:  		/* stw R7, <#[R11 + 8]> */
		/* 821F7558h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7558h case    5:*/		return 0x821F755C;
		  /* 821F755Ch */ case    6:  		/* stdx R9, <#[R10 + R11]> */
		/* 821F755Ch case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F755Ch case    6:*/		return 0x821F7560;
		  /* 821F7560h */ case    7:  		/* addi R1, R1, 96 */
		/* 821F7560h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F7560h case    7:*/		return 0x821F7564;
		  /* 821F7564h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F7564h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F7564h case    8:*/		return 0x821F7568;
		  /* 821F7568h */ case    9:  		/* mtspr LR, R12 */
		/* 821F7568h case    9:*/		regs.LR = regs.R12;
		/* 821F7568h case    9:*/		return 0x821F756C;
		  /* 821F756Ch */ case   10:  		/* bclr 20, CR0_LT */
		/* 821F756Ch case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F756Ch case   10:*/		return 0x821F7570;
	}
	return 0x821F7570;
} // Block from 821F7544h-821F7570h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F7570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7570);
		  /* 821F7570h */ case    0:  		/* mfspr R12, LR */
		/* 821F7570h case    0:*/		regs.R12 = regs.LR;
		/* 821F7570h case    0:*/		return 0x821F7574;
		  /* 821F7574h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F7574h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F7574h case    1:*/		return 0x821F7578;
		  /* 821F7578h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F7578h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F7578h case    2:*/		return 0x821F757C;
		  /* 821F757Ch */ case    3:  		/* li R10, 1 */
		/* 821F757Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821F757Ch case    3:*/		return 0x821F7580;
		  /* 821F7580h */ case    4:  		/* rlwinm. R11, R5, 0, 24, 31 */
		/* 821F7580h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R5);
		/* 821F7580h case    4:*/		return 0x821F7584;
		  /* 821F7584h */ case    5:  		/* stw R10, <#[R1 + 80]> */
		/* 821F7584h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7584h case    5:*/		return 0x821F7588;
		  /* 821F7588h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821F7588h case    6:*/		if ( regs.CR[0].eq ) { return 0x821F7594;  }
		/* 821F7588h case    6:*/		return 0x821F758C;
		  /* 821F758Ch */ case    7:  		/* li R11, 3 */
		/* 821F758Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821F758Ch case    7:*/		return 0x821F7590;
		  /* 821F7590h */ case    8:  		/* stw R11, <#[R1 + 80]> */
		/* 821F7590h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7590h case    8:*/		return 0x821F7594;
	}
	return 0x821F7594;
} // Block from 821F7570h-821F7594h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F7594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7594);
		  /* 821F7594h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F7594h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F7594h case    0:*/		return 0x821F7598;
		  /* 821F7598h */ case    1:  		/* stw R4, <#[R1 + 84]> */
		/* 821F7598h case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7598h case    1:*/		return 0x821F759C;
		  /* 821F759Ch */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F759Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F759Ch case    2:*/		return 0x821F75A0;
		  /* 821F75A0h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 821F75A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821F75C8;  }
		/* 821F75A0h case    3:*/		return 0x821F75A4;
		  /* 821F75A4h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821F75A4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F75A4h case    4:*/		return 0x821F75A8;
		  /* 821F75A8h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F75A8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F75A8h case    5:*/		return 0x821F75AC;
		  /* 821F75ACh */ case    6:  		/* addic. R11, R11, -4 */
		/* 821F75ACh case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F75ACh case    6:*/		return 0x821F75B0;
		  /* 821F75B0h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 821F75B0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821F75C8;  }
		/* 821F75B0h case    7:*/		return 0x821F75B4;
		  /* 821F75B4h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F75B4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F75B4h case    8:*/		return 0x821F75B8;
		  /* 821F75B8h */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F75B8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F75B8h case    9:*/		return 0x821F75BC;
		  /* 821F75BCh */ case   10:  		/* addi R10, R10, 1 */
		/* 821F75BCh case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F75BCh case   10:*/		return 0x821F75C0;
		  /* 821F75C0h */ case   11:  		/* cmplw CR6, R10, R9 */
		/* 821F75C0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F75C0h case   11:*/		return 0x821F75C4;
		  /* 821F75C4h */ case   12:  		/* bc 4, CR6_GT, 16 */
		/* 821F75C4h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821F75D4;  }
		/* 821F75C4h case   12:*/		return 0x821F75C8;
	}
	return 0x821F75C8;
} // Block from 821F7594h-821F75C8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F75C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F75C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F75C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F75C8);
		  /* 821F75C8h */ case    0:  		/* li R4, 1 */
		/* 821F75C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F75C8h case    0:*/		return 0x821F75CC;
		  /* 821F75CCh */ case    1:  		/* bl -362260 */
		/* 821F75CCh case    1:*/		regs.LR = 0x821F75D0; return 0x8219EEB8;
		/* 821F75CCh case    1:*/		return 0x821F75D0;
		  /* 821F75D0h */ case    2:  		/* mr R11, R3 */
		/* 821F75D0h case    2:*/		regs.R11 = regs.R3;
		/* 821F75D0h case    2:*/		return 0x821F75D4;
	}
	return 0x821F75D4;
} // Block from 821F75C8h-821F75D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F75D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F75D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F75D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F75D4);
		  /* 821F75D4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F75D4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F75D4h case    0:*/		return 0x821F75D8;
		  /* 821F75D8h */ case    1:  		/* ld R9, <#[R1 + 80]> */
		/* 821F75D8h case    1:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821F75D8h case    1:*/		return 0x821F75DC;
		  /* 821F75DCh */ case    2:  		/* addi R8, R10, 2 */
		/* 821F75DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821F75DCh case    2:*/		return 0x821F75E0;
		  /* 821F75E0h */ case    3:  		/* addi R7, R10, 1 */
		/* 821F75E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821F75E0h case    3:*/		return 0x821F75E4;
		  /* 821F75E4h */ case    4:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821F75E4h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821F75E4h case    4:*/		return 0x821F75E8;
		  /* 821F75E8h */ case    5:  		/* stw R7, <#[R11 + 8]> */
		/* 821F75E8h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821F75E8h case    5:*/		return 0x821F75EC;
		  /* 821F75ECh */ case    6:  		/* stdx R9, <#[R10 + R11]> */
		/* 821F75ECh case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F75ECh case    6:*/		return 0x821F75F0;
		  /* 821F75F0h */ case    7:  		/* addi R1, R1, 96 */
		/* 821F75F0h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F75F0h case    7:*/		return 0x821F75F4;
		  /* 821F75F4h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F75F4h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F75F4h case    8:*/		return 0x821F75F8;
		  /* 821F75F8h */ case    9:  		/* mtspr LR, R12 */
		/* 821F75F8h case    9:*/		regs.LR = regs.R12;
		/* 821F75F8h case    9:*/		return 0x821F75FC;
		  /* 821F75FCh */ case   10:  		/* bclr 20, CR0_LT */
		/* 821F75FCh case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F75FCh case   10:*/		return 0x821F7600;
	}
	return 0x821F7600;
} // Block from 821F75D4h-821F7600h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F7600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7600);
		  /* 821F7600h */ case    0:  		/* mfspr R12, LR */
		/* 821F7600h case    0:*/		regs.R12 = regs.LR;
		/* 821F7600h case    0:*/		return 0x821F7604;
		  /* 821F7604h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F7604h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F7604h case    1:*/		return 0x821F7608;
		  /* 821F7608h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F7608h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F7608h case    2:*/		return 0x821F760C;
		  /* 821F760Ch */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F760Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F760Ch case    3:*/		return 0x821F7610;
		  /* 821F7610h */ case    4:  		/* stw R5, <#[R1 + 80]> */
		/* 821F7610h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7610h case    4:*/		return 0x821F7614;
		  /* 821F7614h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F7614h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F7614h case    5:*/		return 0x821F7618;
		  /* 821F7618h */ case    6:  		/* stw R4, <#[R1 + 84]> */
		/* 821F7618h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7618h case    6:*/		return 0x821F761C;
		  /* 821F761Ch */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 821F761Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821F7644;  }
		/* 821F761Ch case    7:*/		return 0x821F7620;
		  /* 821F7620h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821F7620h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7620h case    8:*/		return 0x821F7624;
		  /* 821F7624h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F7624h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F7624h case    9:*/		return 0x821F7628;
		  /* 821F7628h */ case   10:  		/* addic. R11, R11, -4 */
		/* 821F7628h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F7628h case   10:*/		return 0x821F762C;
		  /* 821F762Ch */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 821F762Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821F7644;  }
		/* 821F762Ch case   11:*/		return 0x821F7630;
	}
	return 0x821F7630;
} // Block from 821F7600h-821F7630h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F7630h
// Function '?Push@?$Stack@ULexicalScope@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAPAULexicalScope@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7630);
		  /* 821F7630h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F7630h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7630h case    0:*/		return 0x821F7634;
		  /* 821F7634h */ case    1:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F7634h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F7634h case    1:*/		return 0x821F7638;
		  /* 821F7638h */ case    2:  		/* addi R10, R10, 1 */
		/* 821F7638h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F7638h case    2:*/		return 0x821F763C;
		  /* 821F763Ch */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 821F763Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F763Ch case    3:*/		return 0x821F7640;
		  /* 821F7640h */ case    4:  		/* bc 4, CR6_GT, 16 */
		/* 821F7640h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821F7650;  }
		/* 821F7640h case    4:*/		return 0x821F7644;
	}
	return 0x821F7644;
} // Block from 821F7630h-821F7644h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7644);
		  /* 821F7644h */ case    0:  		/* li R4, 1 */
		/* 821F7644h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F7644h case    0:*/		return 0x821F7648;
		  /* 821F7648h */ case    1:  		/* bl -362384 */
		/* 821F7648h case    1:*/		regs.LR = 0x821F764C; return 0x8219EEB8;
		/* 821F7648h case    1:*/		return 0x821F764C;
		  /* 821F764Ch */ case    2:  		/* mr R11, R3 */
		/* 821F764Ch case    2:*/		regs.R11 = regs.R3;
		/* 821F764Ch case    2:*/		return 0x821F7650;
	}
	return 0x821F7650;
} // Block from 821F7644h-821F7650h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7650);
		  /* 821F7650h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F7650h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7650h case    0:*/		return 0x821F7654;
		  /* 821F7654h */ case    1:  		/* ld R9, <#[R1 + 80]> */
		/* 821F7654h case    1:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7654h case    1:*/		return 0x821F7658;
		  /* 821F7658h */ case    2:  		/* addi R8, R10, 2 */
		/* 821F7658h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821F7658h case    2:*/		return 0x821F765C;
		  /* 821F765Ch */ case    3:  		/* addi R7, R10, 1 */
		/* 821F765Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821F765Ch case    3:*/		return 0x821F7660;
		  /* 821F7660h */ case    4:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821F7660h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821F7660h case    4:*/		return 0x821F7664;
		  /* 821F7664h */ case    5:  		/* stw R7, <#[R11 + 8]> */
		/* 821F7664h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7664h case    5:*/		return 0x821F7668;
		  /* 821F7668h */ case    6:  		/* stdx R9, <#[R10 + R11]> */
		/* 821F7668h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F7668h case    6:*/		return 0x821F766C;
		  /* 821F766Ch */ case    7:  		/* addi R1, R1, 96 */
		/* 821F766Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F766Ch case    7:*/		return 0x821F7670;
		  /* 821F7670h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F7670h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F7670h case    8:*/		return 0x821F7674;
		  /* 821F7674h */ case    9:  		/* mtspr LR, R12 */
		/* 821F7674h case    9:*/		regs.LR = regs.R12;
		/* 821F7674h case    9:*/		return 0x821F7678;
		  /* 821F7678h */ case   10:  		/* bclr 20, CR0_LT */
		/* 821F7678h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F7678h case   10:*/		return 0x821F767C;
	}
	return 0x821F767C;
} // Block from 821F7650h-821F767Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F767Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F767C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F767C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F767C);
		  /* 821F767Ch */ case    0:  		/* nop */
		/* 821F767Ch case    0:*/		cpu::op::nop();
		/* 821F767Ch case    0:*/		return 0x821F7680;
	}
	return 0x821F7680;
} // Block from 821F767Ch-821F7680h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F7680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7680);
		  /* 821F7680h */ case    0:  		/* mfspr R12, LR */
		/* 821F7680h case    0:*/		regs.R12 = regs.LR;
		/* 821F7680h case    0:*/		return 0x821F7684;
		  /* 821F7684h */ case    1:  		/* bl -1467440 */
		/* 821F7684h case    1:*/		regs.LR = 0x821F7688; return 0x82091254;
		/* 821F7684h case    1:*/		return 0x821F7688;
		  /* 821F7688h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821F7688h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821F7688h case    2:*/		return 0x821F768C;
		  /* 821F768Ch */ case    3:  		/* lwz R27, <#[R3 + 32]> */
		/* 821F768Ch case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x00000020) );
		/* 821F768Ch case    3:*/		return 0x821F7690;
		  /* 821F7690h */ case    4:  		/* mr R31, R3 */
		/* 821F7690h case    4:*/		regs.R31 = regs.R3;
		/* 821F7690h case    4:*/		return 0x821F7694;
		  /* 821F7694h */ case    5:  		/* mr R28, R4 */
		/* 821F7694h case    5:*/		regs.R28 = regs.R4;
		/* 821F7694h case    5:*/		return 0x821F7698;
		  /* 821F7698h */ case    6:  		/* bl -22824 */
		/* 821F7698h case    6:*/		regs.LR = 0x821F769C; return 0x821F1D70;
		/* 821F7698h case    6:*/		return 0x821F769C;
		  /* 821F769Ch */ case    7:  		/* mr R3, R31 */
		/* 821F769Ch case    7:*/		regs.R3 = regs.R31;
		/* 821F769Ch case    7:*/		return 0x821F76A0;
	}
	return 0x821F76A0;
} // Block from 821F7680h-821F76A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F76A0h
// Function '?Push@?$Stack@UAttributeStateStackEntry@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAPAUAttributeStateStackEntry@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F76A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F76A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F76A0);
		  /* 821F76A0h */ case    0:  		/* bl -38696 */
		/* 821F76A0h case    0:*/		regs.LR = 0x821F76A4; return 0x821EDF78;
		/* 821F76A0h case    0:*/		return 0x821F76A4;
		  /* 821F76A4h */ case    1:  		/* lwz R11, <#[R3 + 76]> */
		/* 821F76A4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 821F76A4h case    1:*/		return 0x821F76A8;
		  /* 821F76A8h */ case    2:  		/* mr R4, R3 */
		/* 821F76A8h case    2:*/		regs.R4 = regs.R3;
		/* 821F76A8h case    2:*/		return 0x821F76AC;
		  /* 821F76ACh */ case    3:  		/* oris R11, R11, 16 */
		/* 821F76ACh case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821F76ACh case    3:*/		return 0x821F76B0;
		  /* 821F76B0h */ case    4:  		/* mr R5, R31 */
		/* 821F76B0h case    4:*/		regs.R5 = regs.R31;
		/* 821F76B0h case    4:*/		return 0x821F76B4;
		  /* 821F76B4h */ case    5:  		/* stw R11, <#[R3 + 76]> */
		/* 821F76B4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 821F76B4h case    5:*/		return 0x821F76B8;
		  /* 821F76B8h */ case    6:  		/* mr R29, R3 */
		/* 821F76B8h case    6:*/		regs.R29 = regs.R3;
		/* 821F76B8h case    6:*/		return 0x821F76BC;
		  /* 821F76BCh */ case    7:  		/* lwz R3, <#[R31 + 564]> */
		/* 821F76BCh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821F76BCh case    7:*/		return 0x821F76C0;
		  /* 821F76C0h */ case    8:  		/* bl 230432 */
		/* 821F76C0h case    8:*/		regs.LR = 0x821F76C4; return 0x8222FAE0;
		/* 821F76C0h case    8:*/		return 0x821F76C4;
		  /* 821F76C4h */ case    9:  		/* mr R3, R31 */
		/* 821F76C4h case    9:*/		regs.R3 = regs.R31;
		/* 821F76C4h case    9:*/		return 0x821F76C8;
		  /* 821F76C8h */ case   10:  		/* bl -22872 */
		/* 821F76C8h case   10:*/		regs.LR = 0x821F76CC; return 0x821F1D70;
		/* 821F76C8h case   10:*/		return 0x821F76CC;
		  /* 821F76CCh */ case   11:  		/* mr R3, R31 */
		/* 821F76CCh case   11:*/		regs.R3 = regs.R31;
		/* 821F76CCh case   11:*/		return 0x821F76D0;
		  /* 821F76D0h */ case   12:  		/* bl -38744 */
		/* 821F76D0h case   12:*/		regs.LR = 0x821F76D4; return 0x821EDF78;
		/* 821F76D0h case   12:*/		return 0x821F76D4;
		  /* 821F76D4h */ case   13:  		/* mr R30, R3 */
		/* 821F76D4h case   13:*/		regs.R30 = regs.R3;
		/* 821F76D4h case   13:*/		return 0x821F76D8;
		  /* 821F76D8h */ case   14:  		/* mr R4, R3 */
		/* 821F76D8h case   14:*/		regs.R4 = regs.R3;
		/* 821F76D8h case   14:*/		return 0x821F76DC;
		  /* 821F76DCh */ case   15:  		/* mr R5, R31 */
		/* 821F76DCh case   15:*/		regs.R5 = regs.R31;
		/* 821F76DCh case   15:*/		return 0x821F76E0;
		  /* 821F76E0h */ case   16:  		/* mr R3, R29 */
		/* 821F76E0h case   16:*/		regs.R3 = regs.R29;
		/* 821F76E0h case   16:*/		return 0x821F76E4;
		  /* 821F76E4h */ case   17:  		/* bl 230396 */
		/* 821F76E4h case   17:*/		regs.LR = 0x821F76E8; return 0x8222FAE0;
		/* 821F76E4h case   17:*/		return 0x821F76E8;
		  /* 821F76E8h */ case   18:  		/* lwz R11, <#[R31 + 564]> */
		/* 821F76E8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821F76E8h case   18:*/		return 0x821F76EC;
		  /* 821F76ECh */ case   19:  		/* lwz R11, <#[R11 + 48]> */
		/* 821F76ECh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821F76ECh case   19:*/		return 0x821F76F0;
		  /* 821F76F0h */ case   20:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 821F76F0h case   20:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 821F76F0h case   20:*/		return 0x821F76F4;
		  /* 821F76F4h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 821F76F4h case   21:*/		if ( regs.CR[0].eq ) { return 0x821F7704;  }
		/* 821F76F4h case   21:*/		return 0x821F76F8;
		  /* 821F76F8h */ case   22:  		/* lwz R11, <#[R30 + 48]> */
		/* 821F76F8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821F76F8h case   22:*/		return 0x821F76FC;
		  /* 821F76FCh */ case   23:  		/* oris R11, R11, 8192 */
		/* 821F76FCh case   23:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821F76FCh case   23:*/		return 0x821F7700;
		  /* 821F7700h */ case   24:  		/* stw R11, <#[R30 + 48]> */
		/* 821F7700h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821F7700h case   24:*/		return 0x821F7704;
	}
	return 0x821F7704;
} // Block from 821F76A0h-821F7704h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821F7704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7704);
		  /* 821F7704h */ case    0:  		/* stw R30, <#[R31 + 564]> */
		/* 821F7704h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7704h case    0:*/		return 0x821F7708;
		  /* 821F7708h */ case    1:  		/* mr R3, R31 */
		/* 821F7708h case    1:*/		regs.R3 = regs.R31;
		/* 821F7708h case    1:*/		return 0x821F770C;
		  /* 821F770Ch */ case    2:  		/* bl -22940 */
		/* 821F770Ch case    2:*/		regs.LR = 0x821F7710; return 0x821F1D70;
		/* 821F770Ch case    2:*/		return 0x821F7710;
	}
	return 0x821F7710;
} // Block from 821F7704h-821F7710h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7710h
// Function '?Push@ResultStack@D3DXShader@@QAAXVResult@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7710);
		  /* 821F7710h */ case    0:  		/* mr R3, R31 */
		/* 821F7710h case    0:*/		regs.R3 = regs.R31;
		/* 821F7710h case    0:*/		return 0x821F7714;
		  /* 821F7714h */ case    1:  		/* bl -38812 */
		/* 821F7714h case    1:*/		regs.LR = 0x821F7718; return 0x821EDF78;
		/* 821F7714h case    1:*/		return 0x821F7718;
		  /* 821F7718h */ case    2:  		/* mr R29, R3 */
		/* 821F7718h case    2:*/		regs.R29 = regs.R3;
		/* 821F7718h case    2:*/		return 0x821F771C;
		  /* 821F771Ch */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 821F771Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821F771Ch case    3:*/		return 0x821F7720;
		  /* 821F7720h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 821F7720h case    4:*/		if ( regs.CR[6].eq ) { return 0x821F7734;  }
		/* 821F7720h case    4:*/		return 0x821F7724;
		  /* 821F7724h */ case    5:  		/* mr R5, R31 */
		/* 821F7724h case    5:*/		regs.R5 = regs.R31;
		/* 821F7724h case    5:*/		return 0x821F7728;
		  /* 821F7728h */ case    6:  		/* lwz R4, <#[R28]> */
		/* 821F7728h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 821F7728h case    6:*/		return 0x821F772C;
		  /* 821F772Ch */ case    7:  		/* bl 230324 */
		/* 821F772Ch case    7:*/		regs.LR = 0x821F7730; return 0x8222FAE0;
		/* 821F772Ch case    7:*/		return 0x821F7730;
		  /* 821F7730h */ case    8:  		/* stw R29, <#[R28]> */
		/* 821F7730h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 821F7730h case    8:*/		return 0x821F7734;
	}
	return 0x821F7734;
} // Block from 821F7710h-821F7734h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F7734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7734);
		  /* 821F7734h */ case    0:  		/* lwz R3, <#[R31 + 584]> */
		/* 821F7734h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000248) );
		/* 821F7734h case    0:*/		return 0x821F7738;
		  /* 821F7738h */ case    1:  		/* bl -2848 */
		/* 821F7738h case    1:*/		regs.LR = 0x821F773C; return 0x821F6C18;
		/* 821F7738h case    1:*/		return 0x821F773C;
		  /* 821F773Ch */ case    2:  		/* li R11, 0 */
		/* 821F773Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F773Ch case    2:*/		return 0x821F7740;
		  /* 821F7740h */ case    3:  		/* addi R4, R3, 4 */
		/* 821F7740h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x4);
		/* 821F7740h case    3:*/		return 0x821F7744;
		  /* 821F7744h */ case    4:  		/* stw R11, <#[R3]> */
		/* 821F7744h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7744h case    4:*/		return 0x821F7748;
		  /* 821F7748h */ case    5:  		/* mr R30, R3 */
		/* 821F7748h case    5:*/		regs.R30 = regs.R3;
		/* 821F7748h case    5:*/		return 0x821F774C;
		  /* 821F774Ch */ case    6:  		/* lwz R3, <#[R31 + 588]> */
		/* 821F774Ch case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000024C) );
		/* 821F774Ch case    6:*/		return 0x821F7750;
		  /* 821F7750h */ case    7:  		/* bl -5112 */
		/* 821F7750h case    7:*/		regs.LR = 0x821F7754; return 0x821F6358;
		/* 821F7750h case    7:*/		return 0x821F7754;
		  /* 821F7754h */ case    8:  		/* stw R29, <#[R30 + 12]> */
		/* 821F7754h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x0000000C) );
		/* 821F7754h case    8:*/		return 0x821F7758;
		  /* 821F7758h */ case    9:  		/* lwz R11, <#[R31 + 44]> */
		/* 821F7758h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F7758h case    9:*/		return 0x821F775C;
		  /* 821F775Ch */ case   10:  		/* nor R11, R11, R11 */
		/* 821F775Ch case   10:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821F775Ch case   10:*/		return 0x821F7760;
		  /* 821F7760h */ case   11:  		/* rlwinm R11, R11, 31, 31, 31 */
		/* 821F7760h case   11:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R11,regs.R11);
		/* 821F7760h case   11:*/		return 0x821F7764;
		  /* 821F7764h */ case   12:  		/* stw R27, <#[R30 + 20]> */
		/* 821F7764h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000014) );
		/* 821F7764h case   12:*/		return 0x821F7768;
		  /* 821F7768h */ case   13:  		/* stb R11, <#[R30 + 16]> */
		/* 821F7768h case   13:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821F7768h case   13:*/		return 0x821F776C;
		  /* 821F776Ch */ case   14:  		/* lwz R11, <#[R31 + 564]> */
		/* 821F776Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821F776Ch case   14:*/		return 0x821F7770;
		  /* 821F7770h */ case   15:  		/* lwz R10, <#[R31 + 44]> */
		/* 821F7770h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F7770h case   15:*/		return 0x821F7774;
		  /* 821F7774h */ case   16:  		/* ori R10, R10, 2 */
		/* 821F7774h case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821F7774h case   16:*/		return 0x821F7778;
		  /* 821F7778h */ case   17:  		/* stw R10, <#[R31 + 44]> */
		/* 821F7778h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F7778h case   17:*/		return 0x821F777C;
		  /* 821F777Ch */ case   18:  		/* lwz R11, <#[R11 + 76]> */
		/* 821F777Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000004C) );
		/* 821F777Ch case   18:*/		return 0x821F7780;
		  /* 821F7780h */ case   19:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821F7780h case   19:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821F7780h case   19:*/		return 0x821F7784;
		  /* 821F7784h */ case   20:  		/* stw R11, <#[R31 + 32]> */
		/* 821F7784h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821F7784h case   20:*/		return 0x821F7788;
		  /* 821F7788h */ case   21:  		/* addi R1, R1, 128 */
		/* 821F7788h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821F7788h case   21:*/		return 0x821F778C;
		  /* 821F778Ch */ case   22:  		/* b -1467624 */
		/* 821F778Ch case   22:*/		return 0x820912A4;
		/* 821F778Ch case   22:*/		return 0x821F7790;
	}
	return 0x821F7790;
} // Block from 821F7734h-821F7790h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821F7790h
// Function '??0CNodeListWalker@D3DXShader@@QAA@PAVCNode@1@PAVCompiler@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7790);
		  /* 821F7790h */ case    0:  		/* mfspr R12, LR */
		/* 821F7790h case    0:*/		regs.R12 = regs.LR;
		/* 821F7790h case    0:*/		return 0x821F7794;
		  /* 821F7794h */ case    1:  		/* bl -1467708 */
		/* 821F7794h case    1:*/		regs.LR = 0x821F7798; return 0x82091258;
		/* 821F7794h case    1:*/		return 0x821F7798;
		  /* 821F7798h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821F7798h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821F7798h case    2:*/		return 0x821F779C;
		  /* 821F779Ch */ case    3:  		/* li R5, 3 */
		/* 821F779Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 821F779Ch case    3:*/		return 0x821F77A0;
		  /* 821F77A0h */ case    4:  		/* li R4, 8 */
		/* 821F77A0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821F77A0h case    4:*/		return 0x821F77A4;
		  /* 821F77A4h */ case    5:  		/* mr R30, R3 */
		/* 821F77A4h case    5:*/		regs.R30 = regs.R3;
		/* 821F77A4h case    5:*/		return 0x821F77A8;
		  /* 821F77A8h */ case    6:  		/* bl -601784 */
		/* 821F77A8h case    6:*/		regs.LR = 0x821F77AC; return 0x821648F0;
		/* 821F77A8h case    6:*/		return 0x821F77AC;
		  /* 821F77ACh */ case    7:  		/* li R11, 0 */
		/* 821F77ACh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F77ACh case    7:*/		return 0x821F77B0;
		  /* 821F77B0h */ case    8:  		/* addi R29, R3, 4 */
		/* 821F77B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x4);
		/* 821F77B0h case    8:*/		return 0x821F77B4;
		  /* 821F77B4h */ case    9:  		/* stw R11, <#[R1 + 88]> */
		/* 821F77B4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821F77B4h case    9:*/		return 0x821F77B8;
		  /* 821F77B8h */ case   10:  		/* ori R10, R3, 1 */
		/* 821F77B8h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821F77B8h case   10:*/		return 0x821F77BC;
		  /* 821F77BCh */ case   11:  		/* ori R11, R29, 1 */
		/* 821F77BCh case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R29,0x1);
		/* 821F77BCh case   11:*/		return 0x821F77C0;
		  /* 821F77C0h */ case   12:  		/* stw R10, <#[R3 + 4]> */
		/* 821F77C0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821F77C0h case   12:*/		return 0x821F77C4;
		  /* 821F77C4h */ case   13:  		/* mr R31, R3 */
		/* 821F77C4h case   13:*/		regs.R31 = regs.R3;
		/* 821F77C4h case   13:*/		return 0x821F77C8;
		  /* 821F77C8h */ case   14:  		/* stw R11, <#[R3]> */
		/* 821F77C8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F77C8h case   14:*/		return 0x821F77CC;
		  /* 821F77CCh */ case   15:  		/* lwz R11, <#[R30 + 576]> */
		/* 821F77CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000240) );
		/* 821F77CCh case   15:*/		return 0x821F77D0;
		  /* 821F77D0h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F77D0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F77D0h case   16:*/		return 0x821F77D4;
		  /* 821F77D4h */ case   17:  		/* stw R11, <#[R1 + 80]> */
		/* 821F77D4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F77D4h case   17:*/		return 0x821F77D8;
		  /* 821F77D8h */ case   18:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821F77D8h case   18:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821F77D8h case   18:*/		return 0x821F77DC;
		  /* 821F77DCh */ case   19:  		/* addic R11, R11, -1 */
		/* 821F77DCh case   19:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F77DCh case   19:*/		return 0x821F77E0;
		  /* 821F77E0h */ case   20:  		/* subfe R11, R11, R11 */
		/* 821F77E0h case   20:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821F77E0h case   20:*/		return 0x821F77E4;
		  /* 821F77E4h */ case   21:  		/* and R10, R11, R10 */
		/* 821F77E4h case   21:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821F77E4h case   21:*/		return 0x821F77E8;
		  /* 821F77E8h */ case   22:  		/* stw R10, <#[R1 + 84]> */
		/* 821F77E8h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821F77E8h case   22:*/		return 0x821F77EC;
		  /* 821F77ECh */ case   23:  		/* cmplwi CR6, R10, 0 */
		/* 821F77ECh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F77ECh case   23:*/		return 0x821F77F0;
		  /* 821F77F0h */ case   24:  		/* bc 12, CR6_EQ, 24 */
		/* 821F77F0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821F7808;  }
		/* 821F77F0h case   24:*/		return 0x821F77F4;
		  /* 821F77F4h */ case   25:  		/* lwz R11, <#[R10 + 8]> */
		/* 821F77F4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821F77F4h case   25:*/		return 0x821F77F8;
		  /* 821F77F8h */ case   26:  		/* lwz R10, <#[R1 + 88]> */
		/* 821F77F8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821F77F8h case   26:*/		return 0x821F77FC;
		  /* 821F77FCh */ case   27:  		/* cmplw CR6, R10, R11 */
		/* 821F77FCh case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821F77FCh case   27:*/		return 0x821F7800;
		  /* 821F7800h */ case   28:  		/* li R11, 0 */
		/* 821F7800h case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F7800h case   28:*/		return 0x821F7804;
		  /* 821F7804h */ case   29:  		/* bc 4, CR6_EQ, 8 */
		/* 821F7804h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821F780C;  }
		/* 821F7804h case   29:*/		return 0x821F7808;
	}
	return 0x821F7808;
} // Block from 821F7790h-821F7808h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821F7808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7808);
		  /* 821F7808h */ case    0:  		/* li R11, 1 */
		/* 821F7808h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821F7808h case    0:*/		return 0x821F780C;
	}
	return 0x821F780C;
} // Block from 821F7808h-821F780Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F780Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F780C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F780C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F780C);
		  /* 821F780Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821F780Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821F780Ch case    0:*/		return 0x821F7810;
		  /* 821F7810h */ case    1:  		/* bc 4, CR0_EQ, 108 */
		/* 821F7810h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F787C;  }
		/* 821F7810h case    1:*/		return 0x821F7814;
		  /* 821F7814h */ case    2:  		/* addi R3, R1, 80 */
		/* 821F7814h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F7814h case    2:*/		return 0x821F7818;
		  /* 821F7818h */ case    3:  		/* bl -223672 */
		/* 821F7818h case    3:*/		regs.LR = 0x821F781C; return 0x821C0E60;
		/* 821F7818h case    3:*/		return 0x821F781C;
		  /* 821F781Ch */ case    4:  		/* lwz R11, <#[R29]> */
		/* 821F781Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821F781Ch case    4:*/		return 0x821F7820;
		  /* 821F7820h */ case    5:  		/* ld R28, <#[R3]> */
		/* 821F7820h case    5:*/		cpu::mem::load64( regs, &regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7820h case    5:*/		return 0x821F7824;
		  /* 821F7824h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F7824h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F7824h case    6:*/		return 0x821F7828;
		  /* 821F7828h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 821F7828h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821F7850;  }
		/* 821F7828h case    7:*/		return 0x821F782C;
		  /* 821F782Ch */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821F782Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821F782Ch case    8:*/		return 0x821F7830;
		  /* 821F7830h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F7830h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F7830h case    9:*/		return 0x821F7834;
		  /* 821F7834h */ case   10:  		/* addic. R3, R11, -4 */
		/* 821F7834h case   10:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821F7834h case   10:*/		return 0x821F7838;
		  /* 821F7838h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 821F7838h case   11:*/		if ( regs.CR[0].eq ) { return 0x821F7850;  }
		/* 821F7838h case   11:*/		return 0x821F783C;
		  /* 821F783Ch */ case   12:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F783Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F783Ch case   12:*/		return 0x821F7840;
		  /* 821F7840h */ case   13:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F7840h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F7840h case   13:*/		return 0x821F7844;
		  /* 821F7844h */ case   14:  		/* addi R11, R11, 1 */
		/* 821F7844h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F7844h case   14:*/		return 0x821F7848;
		  /* 821F7848h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 821F7848h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F7848h case   15:*/		return 0x821F784C;
		  /* 821F784Ch */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 821F784Ch case   16:*/		if ( !regs.CR[6].gt ) { return 0x821F785C;  }
		/* 821F784Ch case   16:*/		return 0x821F7850;
	}
	return 0x821F7850;
} // Block from 821F780Ch-821F7850h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821F7850h
// Function '?GetNext@CNodeListWalker@D3DXShader@@QAAPAVCNode@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7850);
		  /* 821F7850h */ case    0:  		/* li R4, 1 */
		/* 821F7850h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F7850h case    0:*/		return 0x821F7854;
		  /* 821F7854h */ case    1:  		/* mr R3, R31 */
		/* 821F7854h case    1:*/		regs.R3 = regs.R31;
		/* 821F7854h case    1:*/		return 0x821F7858;
		  /* 821F7858h */ case    2:  		/* bl -362912 */
		/* 821F7858h case    2:*/		regs.LR = 0x821F785C; return 0x8219EEB8;
		/* 821F7858h case    2:*/		return 0x821F785C;
	}
	return 0x821F785C;
} // Block from 821F7850h-821F785Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F785Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F785C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F785C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F785C);
		  /* 821F785Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F785Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F785Ch case    0:*/		return 0x821F7860;
		  /* 821F7860h */ case    1:  		/* lwz R10, <#[R1 + 84]> */
		/* 821F7860h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7860h case    1:*/		return 0x821F7864;
		  /* 821F7864h */ case    2:  		/* addi R9, R11, 2 */
		/* 821F7864h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2);
		/* 821F7864h case    2:*/		return 0x821F7868;
		  /* 821F7868h */ case    3:  		/* addi R8, R11, 1 */
		/* 821F7868h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 821F7868h case    3:*/		return 0x821F786C;
		  /* 821F786Ch */ case    4:  		/* rlwinm R11, R9, 3, 0, 28 */
		/* 821F786Ch case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R9);
		/* 821F786Ch case    4:*/		return 0x821F7870;
		  /* 821F7870h */ case    5:  		/* stw R8, <#[R3 + 8]> */
		/* 821F7870h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7870h case    5:*/		return 0x821F7874;
		  /* 821F7874h */ case    6:  		/* stdx R28, <#[R11 + R3]> */
		/* 821F7874h case    6:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821F7874h case    6:*/		return 0x821F7878;
		  /* 821F7878h */ case    7:  		/* b -140 */
		/* 821F7878h case    7:*/		return 0x821F77EC;
		/* 821F7878h case    7:*/		return 0x821F787C;
	}
	return 0x821F787C;
} // Block from 821F785Ch-821F787Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F787Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F787C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F787C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F787C);
		  /* 821F787Ch */ case    0:  		/* lwz R3, <#[R30 + 580]> */
		/* 821F787Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000244) );
		/* 821F787Ch case    0:*/		return 0x821F7880;
		  /* 821F7880h */ case    1:  		/* bl -3064 */
		/* 821F7880h case    1:*/		regs.LR = 0x821F7884; return 0x821F6C88;
		/* 821F7880h case    1:*/		return 0x821F7884;
		  /* 821F7884h */ case    2:  		/* stw R31, <#[R3]> */
		/* 821F7884h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7884h case    2:*/		return 0x821F7888;
		  /* 821F7888h */ case    3:  		/* lwz R11, <#[R30 + 32]> */
		/* 821F7888h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821F7888h case    3:*/		return 0x821F788C;
		  /* 821F788Ch */ case    4:  		/* stw R11, <#[R3 + 4]> */
		/* 821F788Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F788Ch case    4:*/		return 0x821F7890;
		  /* 821F7890h */ case    5:  		/* lwz R10, <#[R3 + 8]> */
		/* 821F7890h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7890h case    5:*/		return 0x821F7894;
		  /* 821F7894h */ case    6:  		/* lwz R11, <#[R30 + 40]> */
		/* 821F7894h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821F7894h case    6:*/		return 0x821F7898;
		  /* 821F7898h */ case    7:  		/* rlwimi R10, R11, 3, 31, 31 */
		/* 821F7898h case    7:*/		cpu::op::rlwimi<0,3,31,31>(regs,&regs.R10,regs.R11);
		/* 821F7898h case    7:*/		return 0x821F789C;
		  /* 821F789Ch */ case    8:  		/* stw R10, <#[R3 + 8]> */
		/* 821F789Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821F789Ch case    8:*/		return 0x821F78A0;
		  /* 821F78A0h */ case    9:  		/* mr R11, R10 */
		/* 821F78A0h case    9:*/		regs.R11 = regs.R10;
		/* 821F78A0h case    9:*/		return 0x821F78A4;
		  /* 821F78A4h */ case   10:  		/* lwz R10, <#[R30 + 40]> */
		/* 821F78A4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 821F78A4h case   10:*/		return 0x821F78A8;
		  /* 821F78A8h */ case   11:  		/* rlwimi R11, R10, 0, 30, 30 */
		/* 821F78A8h case   11:*/		cpu::op::rlwimi<0,0,30,30>(regs,&regs.R11,regs.R10);
		/* 821F78A8h case   11:*/		return 0x821F78AC;
		  /* 821F78ACh */ case   12:  		/* stw R11, <#[R3 + 8]> */
		/* 821F78ACh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F78ACh case   12:*/		return 0x821F78B0;
		  /* 821F78B0h */ case   13:  		/* addi R1, R1, 144 */
		/* 821F78B0h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821F78B0h case   13:*/		return 0x821F78B4;
		  /* 821F78B4h */ case   14:  		/* b -1467916 */
		/* 821F78B4h case   14:*/		return 0x820912A8;
		/* 821F78B4h case   14:*/		return 0x821F78B8;
	}
	return 0x821F78B8;
} // Block from 821F787Ch-821F78B8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F78B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F78B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F78B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F78B8);
		  /* 821F78B8h */ case    0:  		/* mfspr R12, LR */
		/* 821F78B8h case    0:*/		regs.R12 = regs.LR;
		/* 821F78B8h case    0:*/		return 0x821F78BC;
		  /* 821F78BCh */ case    1:  		/* bl -1468040 */
		/* 821F78BCh case    1:*/		regs.LR = 0x821F78C0; return 0x82091234;
		/* 821F78BCh case    1:*/		return 0x821F78C0;
		  /* 821F78C0h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 821F78C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 821F78C0h case    2:*/		return 0x821F78C4;
		  /* 821F78C4h */ case    3:  		/* lwz R11, <#[R3 + 584]> */
		/* 821F78C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000248) );
		/* 821F78C4h case    3:*/		return 0x821F78C8;
		  /* 821F78C8h */ case    4:  		/* mr R31, R3 */
		/* 821F78C8h case    4:*/		regs.R31 = regs.R3;
		/* 821F78C8h case    4:*/		return 0x821F78CC;
		  /* 821F78CCh */ case    5:  		/* mr R23, R4 */
		/* 821F78CCh case    5:*/		regs.R23 = regs.R4;
		/* 821F78CCh case    5:*/		return 0x821F78D0;
		  /* 821F78D0h */ case    6:  		/* mr R20, R5 */
		/* 821F78D0h case    6:*/		regs.R20 = regs.R5;
		/* 821F78D0h case    6:*/		return 0x821F78D4;
		  /* 821F78D4h */ case    7:  		/* mr R30, R6 */
		/* 821F78D4h case    7:*/		regs.R30 = regs.R6;
		/* 821F78D4h case    7:*/		return 0x821F78D8;
		  /* 821F78D8h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F78D8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F78D8h case    8:*/		return 0x821F78DC;
		  /* 821F78DCh */ case    9:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821F78DCh case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821F78DCh case    9:*/		return 0x821F78E0;
		  /* 821F78E0h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821F78E0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821F78EC;  }
		/* 821F78E0h case   10:*/		return 0x821F78E4;
		  /* 821F78E4h */ case   11:  		/* li R11, 0 */
		/* 821F78E4h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F78E4h case   11:*/		return 0x821F78E8;
		  /* 821F78E8h */ case   12:  		/* b 16 */
		/* 821F78E8h case   12:*/		return 0x821F78F8;
		/* 821F78E8h case   12:*/		return 0x821F78EC;
	}
	return 0x821F78EC;
} // Block from 821F78B8h-821F78ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F78ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F78EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F78EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F78EC);
		  /* 821F78ECh */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821F78ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F78ECh case    0:*/		return 0x821F78F0;
		  /* 821F78F0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F78F0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F78F0h case    1:*/		return 0x821F78F4;
		  /* 821F78F4h */ case    2:  		/* addi R11, R11, -4 */
		/* 821F78F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F78F4h case    2:*/		return 0x821F78F8;
	}
	return 0x821F78F8;
} // Block from 821F78ECh-821F78F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F78F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F78F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F78F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F78F8);
		  /* 821F78F8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F78F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F78F8h case    0:*/		return 0x821F78FC;
		  /* 821F78FCh */ case    1:  		/* li R8, 0 */
		/* 821F78FCh case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F78FCh case    1:*/		return 0x821F7900;
		  /* 821F7900h */ case    2:  		/* li R7, 0 */
		/* 821F7900h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F7900h case    2:*/		return 0x821F7904;
		  /* 821F7904h */ case    3:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821F7904h case    3:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821F7904h case    3:*/		return 0x821F7908;
		  /* 821F7908h */ case    4:  		/* li R6, 117 */
		/* 821F7908h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821F7908h case    4:*/		return 0x821F790C;
		  /* 821F790Ch */ case    5:  		/* add R10, R10, R11 */
		/* 821F790Ch case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821F790Ch case    5:*/		return 0x821F7910;
		  /* 821F7910h */ case    6:  		/* lwz R11, <#[R31 + 564]> */
		/* 821F7910h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7910h case    6:*/		return 0x821F7914;
		  /* 821F7914h */ case    7:  		/* mr R3, R31 */
		/* 821F7914h case    7:*/		regs.R3 = regs.R31;
		/* 821F7914h case    7:*/		return 0x821F7918;
		  /* 821F7918h */ case    8:  		/* lwz R9, <#[R11 + 76]> */
		/* 821F7918h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 821F7918h case    8:*/		return 0x821F791C;
		  /* 821F791Ch */ case    9:  		/* lwz R19, <#[R10 - 4]> */
		/* 821F791Ch case    9:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 821F791Ch case    9:*/		return 0x821F7920;
		  /* 821F7920h */ case   10:  		/* oris R10, R9, 4096 */
		/* 821F7920h case   10:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x1000);
		/* 821F7920h case   10:*/		return 0x821F7924;
		  /* 821F7924h */ case   11:  		/* stw R10, <#[R11 + 76]> */
		/* 821F7924h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000004C) );
		/* 821F7924h case   11:*/		return 0x821F7928;
		  /* 821F7928h */ case   12:  		/* lwz R11, <#[R31 + 564]> */
		/* 821F7928h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7928h case   12:*/		return 0x821F792C;
		  /* 821F792Ch */ case   13:  		/* lwz R10, <#[R11 + 48]> */
		/* 821F792Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821F792Ch case   13:*/		return 0x821F7930;
		  /* 821F7930h */ case   14:  		/* oris R10, R10, 4096 */
		/* 821F7930h case   14:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 821F7930h case   14:*/		return 0x821F7934;
		  /* 821F7934h */ case   15:  		/* stw R10, <#[R11 + 48]> */
		/* 821F7934h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821F7934h case   15:*/		return 0x821F7938;
		  /* 821F7938h */ case   16:  		/* lwz R4, <#[R31 + 564]> */
		/* 821F7938h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7938h case   16:*/		return 0x821F793C;
		  /* 821F793Ch */ case   17:  		/* addi R5, R4, 24 */
		/* 821F793Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821F793Ch case   17:*/		return 0x821F7940;
		  /* 821F7940h */ case   18:  		/* bl 184408 */
		/* 821F7940h case   18:*/		regs.LR = 0x821F7944; return 0x82224998;
		/* 821F7940h case   18:*/		return 0x821F7944;
		  /* 821F7944h */ case   19:  		/* mr R29, R3 */
		/* 821F7944h case   19:*/		regs.R29 = regs.R3;
		/* 821F7944h case   19:*/		return 0x821F7948;
		  /* 821F7948h */ case   20:  		/* li R8, 0 */
		/* 821F7948h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F7948h case   20:*/		return 0x821F794C;
		  /* 821F794Ch */ case   21:  		/* li R7, 0 */
		/* 821F794Ch case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F794Ch case   21:*/		return 0x821F7950;
		  /* 821F7950h */ case   22:  		/* li R6, 117 */
		/* 821F7950h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821F7950h case   22:*/		return 0x821F7954;
		  /* 821F7954h */ case   23:  		/* mr R3, R31 */
		/* 821F7954h case   23:*/		regs.R3 = regs.R31;
		/* 821F7954h case   23:*/		return 0x821F7958;
		  /* 821F7958h */ case   24:  		/* lwz R11, <#[R29 + 8]> */
		/* 821F7958h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821F7958h case   24:*/		return 0x821F795C;
		  /* 821F795Ch */ case   25:  		/* oris R11, R11, 512 */
		/* 821F795Ch case   25:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F795Ch case   25:*/		return 0x821F7960;
		  /* 821F7960h */ case   26:  		/* stw R11, <#[R29 + 8]> */
		/* 821F7960h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821F7960h case   26:*/		return 0x821F7964;
		  /* 821F7964h */ case   27:  		/* lwz R4, <#[R31 + 564]> */
		/* 821F7964h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7964h case   27:*/		return 0x821F7968;
		  /* 821F7968h */ case   28:  		/* addi R5, R4, 24 */
		/* 821F7968h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821F7968h case   28:*/		return 0x821F796C;
		  /* 821F796Ch */ case   29:  		/* bl 184364 */
		/* 821F796Ch case   29:*/		regs.LR = 0x821F7970; return 0x82224998;
		/* 821F796Ch case   29:*/		return 0x821F7970;
		  /* 821F7970h */ case   30:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F7970h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7970h case   30:*/		return 0x821F7974;
		  /* 821F7974h */ case   31:  		/* mr R5, R31 */
		/* 821F7974h case   31:*/		regs.R5 = regs.R31;
		/* 821F7974h case   31:*/		return 0x821F7978;
		  /* 821F7978h */ case   32:  		/* oris R11, R11, 512 */
		/* 821F7978h case   32:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F7978h case   32:*/		return 0x821F797C;
		  /* 821F797Ch */ case   33:  		/* mr R4, R29 */
		/* 821F797Ch case   33:*/		regs.R4 = regs.R29;
		/* 821F797Ch case   33:*/		return 0x821F7980;
		  /* 821F7980h */ case   34:  		/* stw R11, <#[R3 + 8]> */
		/* 821F7980h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7980h case   34:*/		return 0x821F7984;
		  /* 821F7984h */ case   35:  		/* mr R25, R3 */
		/* 821F7984h case   35:*/		regs.R25 = regs.R3;
		/* 821F7984h case   35:*/		return 0x821F7988;
		  /* 821F7988h */ case   36:  		/* bl -521976 */
		/* 821F7988h case   36:*/		regs.LR = 0x821F798C; return 0x82178290;
		/* 821F7988h case   36:*/		return 0x821F798C;
		  /* 821F798Ch */ case   37:  		/* lwz R11, <#[R31 + 560]> */
		/* 821F798Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 821F798Ch case   37:*/		return 0x821F7990;
	}
	return 0x821F7990;
} // Block from 821F78F8h-821F7990h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821F7990h
// Function '?Reset@CNodeListWalker@D3DXShader@@QAAXPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7990);
		  /* 821F7990h */ case    0:  		/* rlwinm. R30, R30, 0, 24, 31 */
		/* 821F7990h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R30,regs.R30);
		/* 821F7990h case    0:*/		return 0x821F7994;
		  /* 821F7994h */ case    1:  		/* addi R11, R11, 1 */
		/* 821F7994h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F7994h case    1:*/		return 0x821F7998;
		  /* 821F7998h */ case    2:  		/* stw R11, <#[R31 + 560]> */
		/* 821F7998h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000230) );
		/* 821F7998h case    2:*/		return 0x821F799C;
		  /* 821F799Ch */ case    3:  		/* lwz R11, <#[R31 + 44]> */
		/* 821F799Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F799Ch case    3:*/		return 0x821F79A0;
		  /* 821F79A0h */ case    4:  		/* oris R11, R11, 256 */
		/* 821F79A0h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821F79A0h case    4:*/		return 0x821F79A4;
		  /* 821F79A4h */ case    5:  		/* stw R11, <#[R31 + 44]> */
		/* 821F79A4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F79A4h case    5:*/		return 0x821F79A8;
		  /* 821F79A8h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821F79A8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821F79B4;  }
		/* 821F79A8h case    6:*/		return 0x821F79AC;
		  /* 821F79ACh */ case    7:  		/* mr R29, R20 */
		/* 821F79ACh case    7:*/		regs.R29 = regs.R20;
		/* 821F79ACh case    7:*/		return 0x821F79B0;
		  /* 821F79B0h */ case    8:  		/* b 56 */
		/* 821F79B0h case    8:*/		return 0x821F79E8;
		/* 821F79B0h case    8:*/		return 0x821F79B4;
	}
	return 0x821F79B4;
} // Block from 821F7990h-821F79B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F79B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F79B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F79B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F79B4);
		  /* 821F79B4h */ case    0:  		/* lwz R11, <#[R20 + 36]> */
		/* 821F79B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000024) );
		/* 821F79B4h case    0:*/		return 0x821F79B8;
		  /* 821F79B8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F79B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F79B8h case    1:*/		return 0x821F79BC;
		  /* 821F79BCh */ case    2:  		/* bc 12, CR6_EQ, 1964 */
		/* 821F79BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821F8168;  }
		/* 821F79BCh case    2:*/		return 0x821F79C0;
		  /* 821F79C0h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F79C0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F79C0h case    3:*/		return 0x821F79C4;
		  /* 821F79C4h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821F79C4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F79C4h case    4:*/		return 0x821F79C8;
		  /* 821F79C8h */ case    5:  		/* bc 4, CR6_EQ, 1952 */
		/* 821F79C8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F8168;  }
		/* 821F79C8h case    5:*/		return 0x821F79CC;
		  /* 821F79CCh */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821F79CCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821F79CCh case    6:*/		return 0x821F79D0;
		  /* 821F79D0h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821F79D0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F79D0h case    7:*/		return 0x821F79D4;
		  /* 821F79D4h */ case    8:  		/* bc 12, CR6_EQ, 1928 */
		/* 821F79D4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821F815C;  }
		/* 821F79D4h case    8:*/		return 0x821F79D8;
		  /* 821F79D8h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F79D8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F79D8h case    9:*/		return 0x821F79DC;
		  /* 821F79DCh */ case   10:  		/* cmpwi CR6, R10, 1 */
		/* 821F79DCh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F79DCh case   10:*/		return 0x821F79E0;
		  /* 821F79E0h */ case   11:  		/* bc 4, CR6_EQ, 1916 */
		/* 821F79E0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821F815C;  }
		/* 821F79E0h case   11:*/		return 0x821F79E4;
		  /* 821F79E4h */ case   12:  		/* mr R29, R11 */
		/* 821F79E4h case   12:*/		regs.R29 = regs.R11;
		/* 821F79E4h case   12:*/		return 0x821F79E8;
	}
	return 0x821F79E8;
} // Block from 821F79B4h-821F79E8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F79E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F79E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F79E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F79E8);
		  /* 821F79E8h */ case    0:  		/* mr R5, R31 */
		/* 821F79E8h case    0:*/		regs.R5 = regs.R31;
		/* 821F79E8h case    0:*/		return 0x821F79EC;
		  /* 821F79ECh */ case    1:  		/* mr R4, R29 */
		/* 821F79ECh case    1:*/		regs.R4 = regs.R29;
		/* 821F79ECh case    1:*/		return 0x821F79F0;
		  /* 821F79F0h */ case    2:  		/* addi R3, R1, 104 */
		/* 821F79F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F79F0h case    2:*/		return 0x821F79F4;
		  /* 821F79F4h */ case    3:  		/* li R28, 0 */
		/* 821F79F4h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821F79F4h case    3:*/		return 0x821F79F8;
		  /* 821F79F8h */ case    4:  		/* bl -3200 */
		/* 821F79F8h case    4:*/		regs.LR = 0x821F79FC; return 0x821F6D78;
		/* 821F79F8h case    4:*/		return 0x821F79FC;
		  /* 821F79FCh */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821F79FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F79FCh case    5:*/		return 0x821F7A00;
		  /* 821F7A00h */ case    6:  		/* bc 4, CR6_EQ, 116 */
		/* 821F7A00h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821F7A74;  }
		/* 821F7A00h case    6:*/		return 0x821F7A04;
		  /* 821F7A04h */ case    7:  		/* addi R3, R1, 104 */
		/* 821F7A04h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F7A04h case    7:*/		return 0x821F7A08;
		  /* 821F7A08h */ case    8:  		/* bl -3024 */
		/* 821F7A08h case    8:*/		regs.LR = 0x821F7A0C; return 0x821F6E38;
		/* 821F7A08h case    8:*/		return 0x821F7A0C;
		  /* 821F7A0Ch */ case    9:  		/* b 104 */
		/* 821F7A0Ch case    9:*/		return 0x821F7A74;
		/* 821F7A0Ch case    9:*/		return 0x821F7A10;
		  /* 821F7A10h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F7A10h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F7A10h case   10:*/		return 0x821F7A14;
		  /* 821F7A14h */ case   11:  		/* cmpwi CR6, R11, 1 */
		/* 821F7A14h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F7A14h case   11:*/		return 0x821F7A18;
		  /* 821F7A18h */ case   12:  		/* bc 4, CR6_EQ, 48 */
		/* 821F7A18h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F7A48;  }
		/* 821F7A18h case   12:*/		return 0x821F7A1C;
		  /* 821F7A1Ch */ case   13:  		/* lwz R11, <#[R3 + 12]> */
		/* 821F7A1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F7A1Ch case   13:*/		return 0x821F7A20;
		  /* 821F7A20h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821F7A20h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F7A20h case   14:*/		return 0x821F7A24;
		  /* 821F7A24h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 821F7A24h case   15:*/		if ( regs.CR[6].eq ) { return 0x821F7A30;  }
		/* 821F7A24h case   15:*/		return 0x821F7A28;
	}
	return 0x821F7A28;
} // Block from 821F79E8h-821F7A28h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F7A28h
// Function '?IsDefaultCaseStatement@Compiler@D3DXShader@@AAA_NPAVCNodeStatement@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7A28);
		  /* 821F7A28h */ case    0:  		/* li R3, 0 */
		/* 821F7A28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F7A28h case    0:*/		return 0x821F7A2C;
		  /* 821F7A2Ch */ case    1:  		/* b 48 */
		/* 821F7A2Ch case    1:*/		return 0x821F7A5C;
		/* 821F7A2Ch case    1:*/		return 0x821F7A30;
	}
	return 0x821F7A30;
} // Block from 821F7A28h-821F7A30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F7A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7A30);
		  /* 821F7A30h */ case    0:  		/* lwz R4, <#[R3 + 8]> */
		/* 821F7A30h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7A30h case    0:*/		return 0x821F7A34;
		  /* 821F7A34h */ case    1:  		/* addi R6, R1, 80 */
		/* 821F7A34h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821F7A34h case    1:*/		return 0x821F7A38;
		  /* 821F7A38h */ case    2:  		/* addi R5, R1, 84 */
		/* 821F7A38h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821F7A38h case    2:*/		return 0x821F7A3C;
		  /* 821F7A3Ch */ case    3:  		/* mr R3, R31 */
		/* 821F7A3Ch case    3:*/		regs.R3 = regs.R31;
		/* 821F7A3Ch case    3:*/		return 0x821F7A40;
		  /* 821F7A40h */ case    4:  		/* bl -47848 */
		/* 821F7A40h case    4:*/		regs.LR = 0x821F7A44; return 0x821EBF58;
		/* 821F7A40h case    4:*/		return 0x821F7A44;
		  /* 821F7A44h */ case    5:  		/* b 24 */
		/* 821F7A44h case    5:*/		return 0x821F7A5C;
		/* 821F7A44h case    5:*/		return 0x821F7A48;
	}
	return 0x821F7A48;
} // Block from 821F7A30h-821F7A48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F7A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7A48);
		  /* 821F7A48h */ case    0:  		/* mr R4, R3 */
		/* 821F7A48h case    0:*/		regs.R4 = regs.R3;
		/* 821F7A48h case    0:*/		return 0x821F7A4C;
		  /* 821F7A4Ch */ case    1:  		/* addi R6, R1, 80 */
		/* 821F7A4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821F7A4Ch case    1:*/		return 0x821F7A50;
		  /* 821F7A50h */ case    2:  		/* addi R5, R1, 84 */
		/* 821F7A50h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821F7A50h case    2:*/		return 0x821F7A54;
		  /* 821F7A54h */ case    3:  		/* mr R3, R31 */
		/* 821F7A54h case    3:*/		regs.R3 = regs.R31;
		/* 821F7A54h case    3:*/		return 0x821F7A58;
		  /* 821F7A58h */ case    4:  		/* bl -48000 */
		/* 821F7A58h case    4:*/		regs.LR = 0x821F7A5C; return 0x821EBED8;
		/* 821F7A58h case    4:*/		return 0x821F7A5C;
	}
	return 0x821F7A5C;
} // Block from 821F7A48h-821F7A5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7A5C);
		  /* 821F7A5Ch */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821F7A5Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821F7A5Ch case    0:*/		return 0x821F7A60;
		  /* 821F7A60h */ case    1:  		/* bc 12, CR0_EQ, 100 */
		/* 821F7A60h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F7AC4;  }
		/* 821F7A60h case    1:*/		return 0x821F7A64;
		  /* 821F7A64h */ case    2:  		/* lwz R11, <#[R1 + 80]> */
		/* 821F7A64h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F7A64h case    2:*/		return 0x821F7A68;
		  /* 821F7A68h */ case    3:  		/* lwz R10, <#[R1 + 84]> */
		/* 821F7A68h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821F7A68h case    3:*/		return 0x821F7A6C;
		  /* 821F7A6Ch */ case    4:  		/* mullw R11, R10, R11 */
		/* 821F7A6Ch case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821F7A6Ch case    4:*/		return 0x821F7A70;
		  /* 821F7A70h */ case    5:  		/* add R28, R11, R28 */
		/* 821F7A70h case    5:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 821F7A70h case    5:*/		return 0x821F7A74;
	}
	return 0x821F7A74;
} // Block from 821F7A5Ch-821F7A74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F7A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7A74);
		  /* 821F7A74h */ case    0:  		/* addi R3, R1, 104 */
		/* 821F7A74h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F7A74h case    0:*/		return 0x821F7A78;
		  /* 821F7A78h */ case    1:  		/* bl -3136 */
		/* 821F7A78h case    1:*/		regs.LR = 0x821F7A7C; return 0x821F6E38;
		/* 821F7A78h case    1:*/		return 0x821F7A7C;
		  /* 821F7A7Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821F7A7Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821F7A7Ch case    2:*/		return 0x821F7A80;
		  /* 821F7A80h */ case    3:  		/* bc 4, CR0_EQ, -112 */
		/* 821F7A80h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821F7A10;  }
		/* 821F7A80h case    3:*/		return 0x821F7A84;
		  /* 821F7A84h */ case    4:  		/* lwz R10, <#[R31 + 56]> */
		/* 821F7A84h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 821F7A84h case    4:*/		return 0x821F7A88;
		  /* 821F7A88h */ case    5:  		/* li R21, 1 */
		/* 821F7A88h case    5:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821F7A88h case    5:*/		return 0x821F7A8C;
		  /* 821F7A8Ch */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821F7A8Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F7A8Ch case    6:*/		return 0x821F7A90;
		  /* 821F7A90h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821F7A90h case    7:*/		if ( regs.CR[6].eq ) { return 0x821F7AA0;  }
		/* 821F7A90h case    7:*/		return 0x821F7A94;
		  /* 821F7A94h */ case    8:  		/* lwz R11, <#[R10]> */
		/* 821F7A94h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821F7A94h case    8:*/		return 0x821F7A98;
		  /* 821F7A98h */ case    9:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821F7A98h case    9:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821F7A98h case    9:*/		return 0x821F7A9C;
		  /* 821F7A9Ch */ case   10:  		/* bc 4, CR0_EQ, 32 */
		/* 821F7A9Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x821F7ABC;  }
		/* 821F7A9Ch case   10:*/		return 0x821F7AA0;
	}
	return 0x821F7AA0;
} // Block from 821F7A74h-821F7AA0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F7AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7AA0);
		  /* 821F7AA0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821F7AA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F7AA0h case    0:*/		return 0x821F7AA4;
		  /* 821F7AA4h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821F7AA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F7AD0;  }
		/* 821F7AA4h case    1:*/		return 0x821F7AA8;
		  /* 821F7AA8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821F7AA8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F7AA8h case    2:*/		return 0x821F7AAC;
		  /* 821F7AACh */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821F7AACh case    3:*/		if ( regs.CR[6].eq ) { return 0x821F7ABC;  }
		/* 821F7AACh case    3:*/		return 0x821F7AB0;
		  /* 821F7AB0h */ case    4:  		/* lwz R11, <#[R10]> */
		/* 821F7AB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821F7AB0h case    4:*/		return 0x821F7AB4;
		  /* 821F7AB4h */ case    5:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 821F7AB4h case    5:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 821F7AB4h case    5:*/		return 0x821F7AB8;
		  /* 821F7AB8h */ case    6:  		/* bc 4, CR0_EQ, 24 */
		/* 821F7AB8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821F7AD0;  }
		/* 821F7AB8h case    6:*/		return 0x821F7ABC;
	}
	return 0x821F7ABC;
} // Block from 821F7AA0h-821F7ABCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F7ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7ABC);
		  /* 821F7ABCh */ case    0:  		/* mr R11, R21 */
		/* 821F7ABCh case    0:*/		regs.R11 = regs.R21;
		/* 821F7ABCh case    0:*/		return 0x821F7AC0;
		  /* 821F7AC0h */ case    1:  		/* b 20 */
		/* 821F7AC0h case    1:*/		return 0x821F7AD4;
		/* 821F7AC0h case    1:*/		return 0x821F7AC4;
	}
	return 0x821F7AC4;
} // Block from 821F7ABCh-821F7AC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F7AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7AC4);
		  /* 821F7AC4h */ case    0:  		/* li R4, 4801 */
		/* 821F7AC4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7AC4h case    0:*/		return 0x821F7AC8;
		  /* 821F7AC8h */ case    1:  		/* mr R3, R31 */
		/* 821F7AC8h case    1:*/		regs.R3 = regs.R31;
		/* 821F7AC8h case    1:*/		return 0x821F7ACC;
		  /* 821F7ACCh */ case    2:  		/* bl -679012 */
		/* 821F7ACCh case    2:*/		regs.LR = 0x821F7AD0; return 0x82151E68;
		/* 821F7ACCh case    2:*/		return 0x821F7AD0;
	}
	return 0x821F7AD0;
} // Block from 821F7AC4h-821F7AD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7AD0);
		  /* 821F7AD0h */ case    0:  		/* li R11, 0 */
		/* 821F7AD0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F7AD0h case    0:*/		return 0x821F7AD4;
	}
	return 0x821F7AD4;
} // Block from 821F7AD0h-821F7AD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F7AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7AD4);
		  /* 821F7AD4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821F7AD4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821F7AD4h case    0:*/		return 0x821F7AD8;
	}
	return 0x821F7AD8;
} // Block from 821F7AD4h-821F7AD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F7AD8h
// Function '?StartNewNode@ComponentTypeEnumerator@D3DXShader@@AAA_NPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7AD8);
		  /* 821F7AD8h */ case    0:  		/* bc 12, CR0_EQ, 1072 */
		/* 821F7AD8h case    0:*/		if ( regs.CR[0].eq ) { return 0x821F7F08;  }
		/* 821F7AD8h case    0:*/		return 0x821F7ADC;
		  /* 821F7ADCh */ case    1:  		/* mr R3, R31 */
		/* 821F7ADCh case    1:*/		regs.R3 = regs.R31;
		/* 821F7ADCh case    1:*/		return 0x821F7AE0;
		  /* 821F7AE0h */ case    2:  		/* bl -39784 */
		/* 821F7AE0h case    2:*/		regs.LR = 0x821F7AE4; return 0x821EDF78;
		/* 821F7AE0h case    2:*/		return 0x821F7AE4;
		  /* 821F7AE4h */ case    3:  		/* mr R22, R3 */
		/* 821F7AE4h case    3:*/		regs.R22 = regs.R3;
		/* 821F7AE4h case    3:*/		return 0x821F7AE8;
		  /* 821F7AE8h */ case    4:  		/* mr R5, R31 */
		/* 821F7AE8h case    4:*/		regs.R5 = regs.R31;
		/* 821F7AE8h case    4:*/		return 0x821F7AEC;
		  /* 821F7AECh */ case    5:  		/* lwz R3, <#[R31 + 564]> */
		/* 821F7AECh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7AECh case    5:*/		return 0x821F7AF0;
		  /* 821F7AF0h */ case    6:  		/* mr R4, R22 */
		/* 821F7AF0h case    6:*/		regs.R4 = regs.R22;
		/* 821F7AF0h case    6:*/		return 0x821F7AF4;
		  /* 821F7AF4h */ case    7:  		/* bl 229356 */
		/* 821F7AF4h case    7:*/		regs.LR = 0x821F7AF8; return 0x8222FAE0;
		/* 821F7AF4h case    7:*/		return 0x821F7AF8;
		  /* 821F7AF8h */ case    8:  		/* mr R4, R29 */
		/* 821F7AF8h case    8:*/		regs.R4 = regs.R29;
		/* 821F7AF8h case    8:*/		return 0x821F7AFC;
		  /* 821F7AFCh */ case    9:  		/* mr R5, R31 */
		/* 821F7AFCh case    9:*/		regs.R5 = regs.R31;
		/* 821F7AFCh case    9:*/		return 0x821F7B00;
		  /* 821F7B00h */ case   10:  		/* addi R3, R1, 112 */
		/* 821F7B00h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821F7B00h case   10:*/		return 0x821F7B04;
		  /* 821F7B04h */ case   11:  		/* li R27, 0 */
		/* 821F7B04h case   11:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821F7B04h case   11:*/		return 0x821F7B08;
		  /* 821F7B08h */ case   12:  		/* li R24, 0 */
		/* 821F7B08h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821F7B08h case   12:*/		return 0x821F7B0C;
		  /* 821F7B0Ch */ case   13:  		/* li R26, 0 */
		/* 821F7B0Ch case   13:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821F7B0Ch case   13:*/		return 0x821F7B10;
		  /* 821F7B10h */ case   14:  		/* li R29, 0 */
		/* 821F7B10h case   14:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821F7B10h case   14:*/		return 0x821F7B14;
		  /* 821F7B14h */ case   15:  		/* li R25, 0 */
		/* 821F7B14h case   15:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821F7B14h case   15:*/		return 0x821F7B18;
		  /* 821F7B18h */ case   16:  		/* bl -3488 */
		/* 821F7B18h case   16:*/		regs.LR = 0x821F7B1C; return 0x821F6D78;
		/* 821F7B18h case   16:*/		return 0x821F7B1C;
		  /* 821F7B1Ch */ case   17:  		/* cmplwi CR6, R30, 0 */
		/* 821F7B1Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F7B1Ch case   17:*/		return 0x821F7B20;
		  /* 821F7B20h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 821F7B20h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821F7B2C;  }
		/* 821F7B20h case   18:*/		return 0x821F7B24;
		  /* 821F7B24h */ case   19:  		/* addi R3, R1, 112 */
		/* 821F7B24h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821F7B24h case   19:*/		return 0x821F7B28;
		  /* 821F7B28h */ case   20:  		/* bl -3312 */
		/* 821F7B28h case   20:*/		regs.LR = 0x821F7B2C; return 0x821F6E38;
		/* 821F7B28h case   20:*/		return 0x821F7B2C;
	}
	return 0x821F7B2C;
} // Block from 821F7AD8h-821F7B2Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821F7B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7B2C);
		  /* 821F7B2Ch */ case    0:  		/* mr R4, R23 */
		/* 821F7B2Ch case    0:*/		regs.R4 = regs.R23;
		/* 821F7B2Ch case    0:*/		return 0x821F7B30;
		  /* 821F7B30h */ case    1:  		/* addi R3, R1, 128 */
		/* 821F7B30h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821F7B30h case    1:*/		return 0x821F7B34;
		  /* 821F7B34h */ case    2:  		/* bl -359684 */
		/* 821F7B34h case    2:*/		regs.LR = 0x821F7B38; return 0x8219FE30;
		/* 821F7B34h case    2:*/		return 0x821F7B38;
		  /* 821F7B38h */ case    3:  		/* mr R4, R28 */
		/* 821F7B38h case    3:*/		regs.R4 = regs.R28;
		/* 821F7B38h case    3:*/		return 0x821F7B3C;
		  /* 821F7B3Ch */ case    4:  		/* addi R3, R1, 128 */
		/* 821F7B3Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821F7B3Ch case    4:*/		return 0x821F7B40;
		  /* 821F7B40h */ case    5:  		/* bl -25040 */
		/* 821F7B40h case    5:*/		regs.LR = 0x821F7B44; return 0x821F1970;
		/* 821F7B40h case    5:*/		return 0x821F7B44;
		  /* 821F7B44h */ case    6:  		/* addi R3, R1, 112 */
		/* 821F7B44h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821F7B44h case    6:*/		return 0x821F7B48;
		  /* 821F7B48h */ case    7:  		/* bl -3344 */
		/* 821F7B48h case    7:*/		regs.LR = 0x821F7B4C; return 0x821F6E38;
		/* 821F7B48h case    7:*/		return 0x821F7B4C;
		  /* 821F7B4Ch */ case    8:  		/* or. R4, R3, R3 */
		/* 821F7B4Ch case    8:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 821F7B4Ch case    8:*/		return 0x821F7B50;
		  /* 821F7B50h */ case    9:  		/* bc 12, CR0_EQ, 100 */
		/* 821F7B50h case    9:*/		if ( regs.CR[0].eq ) { return 0x821F7BB4;  }
		/* 821F7B50h case    9:*/		return 0x821F7B54;
		  /* 821F7B54h */ case   10:  		/* lwz R11, <#[R4 + 4]> */
		/* 821F7B54h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821F7B54h case   10:*/		return 0x821F7B58;
		  /* 821F7B58h */ case   11:  		/* cmpwi CR6, R11, 1 */
		/* 821F7B58h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F7B58h case   11:*/		return 0x821F7B5C;
		  /* 821F7B5Ch */ case   12:  		/* bc 4, CR6_EQ, 48 */
		/* 821F7B5Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F7B8C;  }
		/* 821F7B5Ch case   12:*/		return 0x821F7B60;
		  /* 821F7B60h */ case   13:  		/* lwz R11, <#[R4 + 12]> */
		/* 821F7B60h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821F7B60h case   13:*/		return 0x821F7B64;
		  /* 821F7B64h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821F7B64h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F7B64h case   14:*/		return 0x821F7B68;
		  /* 821F7B68h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 821F7B68h case   15:*/		if ( regs.CR[6].eq ) { return 0x821F7B74;  }
		/* 821F7B68h case   15:*/		return 0x821F7B6C;
		  /* 821F7B6Ch */ case   16:  		/* li R3, 0 */
		/* 821F7B6Ch case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F7B6Ch case   16:*/		return 0x821F7B70;
		  /* 821F7B70h */ case   17:  		/* b 44 */
		/* 821F7B70h case   17:*/		return 0x821F7B9C;
		/* 821F7B70h case   17:*/		return 0x821F7B74;
	}
	return 0x821F7B74;
} // Block from 821F7B2Ch-821F7B74h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F7B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7B74);
		  /* 821F7B74h */ case    0:  		/* addi R6, R1, 88 */
		/* 821F7B74h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 821F7B74h case    0:*/		return 0x821F7B78;
		  /* 821F7B78h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 821F7B78h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 821F7B78h case    1:*/		return 0x821F7B7C;
		  /* 821F7B7Ch */ case    2:  		/* addi R5, R1, 92 */
		/* 821F7B7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 821F7B7Ch case    2:*/		return 0x821F7B80;
		  /* 821F7B80h */ case    3:  		/* mr R3, R31 */
		/* 821F7B80h case    3:*/		regs.R3 = regs.R31;
		/* 821F7B80h case    3:*/		return 0x821F7B84;
		  /* 821F7B84h */ case    4:  		/* bl -48172 */
		/* 821F7B84h case    4:*/		regs.LR = 0x821F7B88; return 0x821EBF58;
		/* 821F7B84h case    4:*/		return 0x821F7B88;
		  /* 821F7B88h */ case    5:  		/* b 20 */
		/* 821F7B88h case    5:*/		return 0x821F7B9C;
		/* 821F7B88h case    5:*/		return 0x821F7B8C;
	}
	return 0x821F7B8C;
} // Block from 821F7B74h-821F7B8Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F7B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7B8C);
		  /* 821F7B8Ch */ case    0:  		/* addi R6, R1, 88 */
		/* 821F7B8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 821F7B8Ch case    0:*/		return 0x821F7B90;
		  /* 821F7B90h */ case    1:  		/* addi R5, R1, 92 */
		/* 821F7B90h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 821F7B90h case    1:*/		return 0x821F7B94;
		  /* 821F7B94h */ case    2:  		/* mr R3, R31 */
		/* 821F7B94h case    2:*/		regs.R3 = regs.R31;
		/* 821F7B94h case    2:*/		return 0x821F7B98;
		  /* 821F7B98h */ case    3:  		/* bl -48320 */
		/* 821F7B98h case    3:*/		regs.LR = 0x821F7B9C; return 0x821EBED8;
		/* 821F7B98h case    3:*/		return 0x821F7B9C;
	}
	return 0x821F7B9C;
} // Block from 821F7B8Ch-821F7B9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F7B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7B9C);
		  /* 821F7B9Ch */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821F7B9Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821F7B9Ch case    0:*/		return 0x821F7BA0;
		  /* 821F7BA0h */ case    1:  		/* bc 12, CR0_EQ, 728 */
		/* 821F7BA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F7E78;  }
		/* 821F7BA0h case    1:*/		return 0x821F7BA4;
		  /* 821F7BA4h */ case    2:  		/* lwz R11, <#[R1 + 88]> */
		/* 821F7BA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821F7BA4h case    2:*/		return 0x821F7BA8;
		  /* 821F7BA8h */ case    3:  		/* lwz R10, <#[R1 + 92]> */
		/* 821F7BA8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821F7BA8h case    3:*/		return 0x821F7BAC;
		  /* 821F7BACh */ case    4:  		/* mullw R23, R10, R11 */
		/* 821F7BACh case    4:*/		cpu::op::mullw<0>(regs,&regs.R23,regs.R10,regs.R11);
		/* 821F7BACh case    4:*/		return 0x821F7BB0;
		  /* 821F7BB0h */ case    5:  		/* b 692 */
		/* 821F7BB0h case    5:*/		return 0x821F7E64;
		/* 821F7BB0h case    5:*/		return 0x821F7BB4;
	}
	return 0x821F7BB4;
} // Block from 821F7B9Ch-821F7BB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F7BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7BB4);
		  /* 821F7BB4h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821F7BB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821F7BB4h case    0:*/		return 0x821F7BB8;
		  /* 821F7BB8h */ case    1:  		/* bc 12, CR6_EQ, 124 */
		/* 821F7BB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F7C34;  }
		/* 821F7BB8h case    1:*/		return 0x821F7BBC;
		  /* 821F7BBCh */ case    2:  		/* slw R11, R21, R25 */
		/* 821F7BBCh case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R25);
		/* 821F7BBCh case    2:*/		return 0x821F7BC0;
		  /* 821F7BC0h */ case    3:  		/* addi R11, R11, -1 */
		/* 821F7BC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F7BC0h case    3:*/		return 0x821F7BC4;
		  /* 821F7BC4h */ case    4:  		/* li R7, 1 */
		/* 821F7BC4h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F7BC4h case    4:*/		return 0x821F7BC8;
		  /* 821F7BC8h */ case    5:  		/* rlwimi R11, R29, 4, 0, 27 */
		/* 821F7BC8h case    5:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R11,regs.R29);
		/* 821F7BC8h case    5:*/		return 0x821F7BCC;
		  /* 821F7BCCh */ case    6:  		/* li R6, 0 */
		/* 821F7BCCh case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7BCCh case    6:*/		return 0x821F7BD0;
		  /* 821F7BD0h */ case    7:  		/* mr R5, R25 */
		/* 821F7BD0h case    7:*/		regs.R5 = regs.R25;
		/* 821F7BD0h case    7:*/		return 0x821F7BD4;
		  /* 821F7BD4h */ case    8:  		/* addi R4, R1, 128 */
		/* 821F7BD4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 821F7BD4h case    8:*/		return 0x821F7BD8;
		  /* 821F7BD8h */ case    9:  		/* mr R3, R31 */
		/* 821F7BD8h case    9:*/		regs.R3 = regs.R31;
		/* 821F7BD8h case    9:*/		return 0x821F7BDC;
		  /* 821F7BDCh */ case   10:  		/* mr R30, R11 */
		/* 821F7BDCh case   10:*/		regs.R30 = regs.R11;
		/* 821F7BDCh case   10:*/		return 0x821F7BE0;
		  /* 821F7BE0h */ case   11:  		/* bl -22208 */
		/* 821F7BE0h case   11:*/		regs.LR = 0x821F7BE4; return 0x821F2520;
		/* 821F7BE0h case   11:*/		return 0x821F7BE4;
		  /* 821F7BE4h */ case   12:  		/* mr R4, R3 */
		/* 821F7BE4h case   12:*/		regs.R4 = regs.R3;
		/* 821F7BE4h case   12:*/		return 0x821F7BE8;
		  /* 821F7BE8h */ case   13:  		/* mr R3, R31 */
		/* 821F7BE8h case   13:*/		regs.R3 = regs.R31;
		/* 821F7BE8h case   13:*/		return 0x821F7BEC;
		  /* 821F7BECh */ case   14:  		/* mr R5, R30 */
		/* 821F7BECh case   14:*/		regs.R5 = regs.R30;
		/* 821F7BECh case   14:*/		return 0x821F7BF0;
		  /* 821F7BF0h */ case   15:  		/* mr R6, R26 */
		/* 821F7BF0h case   15:*/		regs.R6 = regs.R26;
		/* 821F7BF0h case   15:*/		return 0x821F7BF4;
		  /* 821F7BF4h */ case   16:  		/* li R7, 1 */
		/* 821F7BF4h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F7BF4h case   16:*/		return 0x821F7BF8;
		  /* 821F7BF8h */ case   17:  		/* bl 191656 */
		/* 821F7BF8h case   17:*/		regs.LR = 0x821F7BFC; return 0x822268A0;
		/* 821F7BF8h case   17:*/		return 0x821F7BFC;
		  /* 821F7BFCh */ case   18:  		/* lwz R29, <#[R31 + 564]> */
		/* 821F7BFCh case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7BFCh case   18:*/		return 0x821F7C00;
		  /* 821F7C00h */ case   19:  		/* lwz R30, <#[R3 + 12]> */
		/* 821F7C00h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F7C00h case   19:*/		return 0x821F7C04;
		  /* 821F7C04h */ case   20:  		/* lwz R5, <#[R29 + 100]> */
		/* 821F7C04h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000064) );
		/* 821F7C04h case   20:*/		return 0x821F7C08;
		  /* 821F7C08h */ case   21:  		/* cmplwi CR6, R5, 0 */
		/* 821F7C08h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821F7C08h case   21:*/		return 0x821F7C0C;
		  /* 821F7C0Ch */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 821F7C0Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x821F7C20;  }
		/* 821F7C0Ch case   22:*/		return 0x821F7C10;
		  /* 821F7C10h */ case   23:  		/* mr R6, R31 */
		/* 821F7C10h case   23:*/		regs.R6 = regs.R31;
		/* 821F7C10h case   23:*/		return 0x821F7C14;
		  /* 821F7C14h */ case   24:  		/* li R4, 2 */
		/* 821F7C14h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821F7C14h case   24:*/		return 0x821F7C18;
		  /* 821F7C18h */ case   25:  		/* mr R3, R30 */
		/* 821F7C18h case   25:*/		regs.R3 = regs.R30;
		/* 821F7C18h case   25:*/		return 0x821F7C1C;
		  /* 821F7C1Ch */ case   26:  		/* bl -520868 */
		/* 821F7C1Ch case   26:*/		regs.LR = 0x821F7C20; return 0x82178978;
		/* 821F7C1Ch case   26:*/		return 0x821F7C20;
	}
	return 0x821F7C20;
} // Block from 821F7BB4h-821F7C20h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821F7C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7C20);
		  /* 821F7C20h */ case    0:  		/* stw R30, <#[R29 + 100]> */
		/* 821F7C20h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000064) );
		/* 821F7C20h case    0:*/		return 0x821F7C24;
		  /* 821F7C24h */ case    1:  		/* addi R24, R24, 1 */
		/* 821F7C24h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821F7C24h case    1:*/		return 0x821F7C28;
		  /* 821F7C28h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821F7C28h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F7C28h case    2:*/		return 0x821F7C2C;
		  /* 821F7C2Ch */ case    3:  		/* oris R11, R11, 512 */
		/* 821F7C2Ch case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F7C2Ch case    3:*/		return 0x821F7C30;
		  /* 821F7C30h */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 821F7C30h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F7C30h case    4:*/		return 0x821F7C34;
	}
	return 0x821F7C34;
} // Block from 821F7C20h-821F7C34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7C34);
		  /* 821F7C34h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821F7C34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821F7C34h case    0:*/		return 0x821F7C38;
		  /* 821F7C38h */ case    1:  		/* bc 4, CR6_EQ, 588 */
		/* 821F7C38h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821F7E84;  }
		/* 821F7C38h case    1:*/		return 0x821F7C3C;
		  /* 821F7C3Ch */ case    2:  		/* li R23, 0 */
		/* 821F7C3Ch case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821F7C3Ch case    2:*/		return 0x821F7C40;
		  /* 821F7C40h */ case    3:  		/* lwz R4, <#[R31 + 564]> */
		/* 821F7C40h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7C40h case    3:*/		return 0x821F7C44;
		  /* 821F7C44h */ case    4:  		/* li R8, 0 */
		/* 821F7C44h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F7C44h case    4:*/		return 0x821F7C48;
		  /* 821F7C48h */ case    5:  		/* li R7, 0 */
		/* 821F7C48h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F7C48h case    5:*/		return 0x821F7C4C;
		  /* 821F7C4Ch */ case    6:  		/* addi R5, R4, 24 */
		/* 821F7C4Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821F7C4Ch case    6:*/		return 0x821F7C50;
		  /* 821F7C50h */ case    7:  		/* li R6, 94 */
		/* 821F7C50h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x5E);
		/* 821F7C50h case    7:*/		return 0x821F7C54;
		  /* 821F7C54h */ case    8:  		/* mr R3, R31 */
		/* 821F7C54h case    8:*/		regs.R3 = regs.R31;
		/* 821F7C54h case    8:*/		return 0x821F7C58;
		  /* 821F7C58h */ case    9:  		/* bl 183616 */
		/* 821F7C58h case    9:*/		regs.LR = 0x821F7C5C; return 0x82224998;
		/* 821F7C58h case    9:*/		return 0x821F7C5C;
		  /* 821F7C5Ch */ case   10:  		/* mr R30, R3 */
		/* 821F7C5Ch case   10:*/		regs.R30 = regs.R3;
		/* 821F7C5Ch case   10:*/		return 0x821F7C60;
		  /* 821F7C60h */ case   11:  		/* li R6, 0 */
		/* 821F7C60h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7C60h case   11:*/		return 0x821F7C64;
		  /* 821F7C64h */ case   12:  		/* li R5, 0 */
		/* 821F7C64h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F7C64h case   12:*/		return 0x821F7C68;
		  /* 821F7C68h */ case   13:  		/* li R4, 94 */
		/* 821F7C68h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x5E);
		/* 821F7C68h case   13:*/		return 0x821F7C6C;
		  /* 821F7C6Ch */ case   14:  		/* mr R3, R31 */
		/* 821F7C6Ch case   14:*/		regs.R3 = regs.R31;
		/* 821F7C6Ch case   14:*/		return 0x821F7C70;
		  /* 821F7C70h */ case   15:  		/* bl -604224 */
		/* 821F7C70h case   15:*/		regs.LR = 0x821F7C74; return 0x82164430;
		/* 821F7C70h case   15:*/		return 0x821F7C74;
		  /* 821F7C74h */ case   16:  		/* addi R11, R30, -12 */
		/* 821F7C74h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF4);
		/* 821F7C74h case   16:*/		return 0x821F7C78;
		  /* 821F7C78h */ case   17:  		/* li R10, 5 */
		/* 821F7C78h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x5);
		/* 821F7C78h case   17:*/		return 0x821F7C7C;
		  /* 821F7C7Ch */ case   18:  		/* add R11, R3, R11 */
		/* 821F7C7Ch case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821F7C7Ch case   18:*/		return 0x821F7C80;
		  /* 821F7C80h */ case   19:  		/* stw R20, <#[R11 + 4]> */
		/* 821F7C80h case   19:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000004) );
		/* 821F7C80h case   19:*/		return 0x821F7C84;
		  /* 821F7C84h */ case   20:  		/* lwz R9, <#[R11]> */
		/* 821F7C84h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7C84h case   20:*/		return 0x821F7C88;
		  /* 821F7C88h */ case   21:  		/* rlwimi R9, R10, 1, 28, 31 */
		/* 821F7C88h case   21:*/		cpu::op::rlwimi<0,1,28,31>(regs,&regs.R9,regs.R10);
		/* 821F7C88h case   21:*/		return 0x821F7C8C;
		  /* 821F7C8Ch */ case   22:  		/* stw R9, <#[R11]> */
		/* 821F7C8Ch case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7C8Ch case   22:*/		return 0x821F7C90;
		  /* 821F7C90h */ case   23:  		/* lwz R10, <#[R31 + 560]> */
		/* 821F7C90h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 821F7C90h case   23:*/		return 0x821F7C94;
		  /* 821F7C94h */ case   24:  		/* stw R10, <#[R11 + 8]> */
		/* 821F7C94h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F7C94h case   24:*/		return 0x821F7C98;
		  /* 821F7C98h */ case   25:  		/* lwz R29, <#[R31 + 564]> */
		/* 821F7C98h case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7C98h case   25:*/		return 0x821F7C9C;
		  /* 821F7C9Ch */ case   26:  		/* lwz R5, <#[R29 + 100]> */
		/* 821F7C9Ch case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000064) );
		/* 821F7C9Ch case   26:*/		return 0x821F7CA0;
		  /* 821F7CA0h */ case   27:  		/* cmplwi CR6, R5, 0 */
		/* 821F7CA0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821F7CA0h case   27:*/		return 0x821F7CA4;
		  /* 821F7CA4h */ case   28:  		/* bc 12, CR6_EQ, 20 */
		/* 821F7CA4h case   28:*/		if ( regs.CR[6].eq ) { return 0x821F7CB8;  }
		/* 821F7CA4h case   28:*/		return 0x821F7CA8;
		  /* 821F7CA8h */ case   29:  		/* mr R6, R31 */
		/* 821F7CA8h case   29:*/		regs.R6 = regs.R31;
		/* 821F7CA8h case   29:*/		return 0x821F7CAC;
		  /* 821F7CACh */ case   30:  		/* li R4, 2 */
		/* 821F7CACh case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821F7CACh case   30:*/		return 0x821F7CB0;
		  /* 821F7CB0h */ case   31:  		/* mr R3, R30 */
		/* 821F7CB0h case   31:*/		regs.R3 = regs.R30;
		/* 821F7CB0h case   31:*/		return 0x821F7CB4;
		  /* 821F7CB4h */ case   32:  		/* bl -521020 */
		/* 821F7CB4h case   32:*/		regs.LR = 0x821F7CB8; return 0x82178978;
		/* 821F7CB4h case   32:*/		return 0x821F7CB8;
	}
	return 0x821F7CB8;
} // Block from 821F7C34h-821F7CB8h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821F7CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7CB8);
		  /* 821F7CB8h */ case    0:  		/* stw R30, <#[R29 + 100]> */
		/* 821F7CB8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000064) );
		/* 821F7CB8h case    0:*/		return 0x821F7CBC;
		  /* 821F7CBCh */ case    1:  		/* li R8, 0 */
		/* 821F7CBCh case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F7CBCh case    1:*/		return 0x821F7CC0;
		  /* 821F7CC0h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821F7CC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F7CC0h case    2:*/		return 0x821F7CC4;
		  /* 821F7CC4h */ case    3:  		/* oris R11, R11, 512 */
		/* 821F7CC4h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F7CC4h case    3:*/		return 0x821F7CC8;
		  /* 821F7CC8h */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 821F7CC8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F7CC8h case    4:*/		return 0x821F7CCC;
		  /* 821F7CCCh */ case    5:  		/* li R7, 0 */
		/* 821F7CCCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F7CCCh case    5:*/		return 0x821F7CD0;
		  /* 821F7CD0h */ case    6:  		/* lwz R4, <#[R31 + 564]> */
		/* 821F7CD0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7CD0h case    6:*/		return 0x821F7CD4;
		  /* 821F7CD4h */ case    7:  		/* li R6, 117 */
		/* 821F7CD4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821F7CD4h case    7:*/		return 0x821F7CD8;
		  /* 821F7CD8h */ case    8:  		/* mr R3, R31 */
		/* 821F7CD8h case    8:*/		regs.R3 = regs.R31;
		/* 821F7CD8h case    8:*/		return 0x821F7CDC;
		  /* 821F7CDCh */ case    9:  		/* addi R5, R4, 32 */
		/* 821F7CDCh case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 821F7CDCh case    9:*/		return 0x821F7CE0;
		  /* 821F7CE0h */ case   10:  		/* li R27, 20 */
		/* 821F7CE0h case   10:*/		cpu::op::li<0>(regs,&regs.R27,0x14);
		/* 821F7CE0h case   10:*/		return 0x821F7CE4;
		  /* 821F7CE4h */ case   11:  		/* li R29, 33 */
		/* 821F7CE4h case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x21);
		/* 821F7CE4h case   11:*/		return 0x821F7CE8;
		  /* 821F7CE8h */ case   12:  		/* bl 183472 */
		/* 821F7CE8h case   12:*/		regs.LR = 0x821F7CEC; return 0x82224998;
		/* 821F7CE8h case   12:*/		return 0x821F7CEC;
		  /* 821F7CECh */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F7CECh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7CECh case   13:*/		return 0x821F7CF0;
		  /* 821F7CF0h */ case   14:  		/* mr R30, R3 */
		/* 821F7CF0h case   14:*/		regs.R30 = regs.R3;
		/* 821F7CF0h case   14:*/		return 0x821F7CF4;
		  /* 821F7CF4h */ case   15:  		/* cmplwi CR6, R26, 0 */
		/* 821F7CF4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821F7CF4h case   15:*/		return 0x821F7CF8;
		  /* 821F7CF8h */ case   16:  		/* oris R11, R11, 512 */
		/* 821F7CF8h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F7CF8h case   16:*/		return 0x821F7CFC;
		  /* 821F7CFCh */ case   17:  		/* stw R11, <#[R3 + 8]> */
		/* 821F7CFCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7CFCh case   17:*/		return 0x821F7D00;
		  /* 821F7D00h */ case   18:  		/* bc 4, CR6_EQ, 184 */
		/* 821F7D00h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821F7DB8;  }
		/* 821F7D00h case   18:*/		return 0x821F7D04;
		  /* 821F7D04h */ case   19:  		/* li R6, 0 */
		/* 821F7D04h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7D04h case   19:*/		return 0x821F7D08;
		  /* 821F7D08h */ case   20:  		/* lwz R5, <#[R31 + 560]> */
		/* 821F7D08h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000230) );
		/* 821F7D08h case   20:*/		return 0x821F7D0C;
		  /* 821F7D0Ch */ case   21:  		/* mr R4, R31 */
		/* 821F7D0Ch case   21:*/		regs.R4 = regs.R31;
		/* 821F7D0Ch case   21:*/		return 0x821F7D10;
		  /* 821F7D10h */ case   22:  		/* addi R3, R1, 120 */
		/* 821F7D10h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x78);
		/* 821F7D10h case   22:*/		return 0x821F7D14;
		  /* 821F7D14h */ case   23:  		/* bl 208372 */
		/* 821F7D14h case   23:*/		regs.LR = 0x821F7D18; return 0x8222AB08;
		/* 821F7D14h case   23:*/		return 0x821F7D18;
		  /* 821F7D18h */ case   24:  		/* addi R4, R1, 120 */
		/* 821F7D18h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x78);
		/* 821F7D18h case   24:*/		return 0x821F7D1C;
		  /* 821F7D1Ch */ case   25:  		/* mr R3, R31 */
		/* 821F7D1Ch case   25:*/		regs.R3 = regs.R31;
		/* 821F7D1Ch case   25:*/		return 0x821F7D20;
		  /* 821F7D20h */ case   26:  		/* bl -22944 */
		/* 821F7D20h case   26:*/		regs.LR = 0x821F7D24; return 0x821F2380;
		/* 821F7D20h case   26:*/		return 0x821F7D24;
		  /* 821F7D24h */ case   27:  		/* mr R11, R3 */
		/* 821F7D24h case   27:*/		regs.R11 = regs.R3;
		/* 821F7D24h case   27:*/		return 0x821F7D28;
		  /* 821F7D28h */ case   28:  		/* li R7, 1 */
		/* 821F7D28h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F7D28h case   28:*/		return 0x821F7D2C;
		  /* 821F7D2Ch */ case   29:  		/* mr R6, R30 */
		/* 821F7D2Ch case   29:*/		regs.R6 = regs.R30;
		/* 821F7D2Ch case   29:*/		return 0x821F7D30;
		  /* 821F7D30h */ case   30:  		/* li R5, 543 */
		/* 821F7D30h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x21F);
		/* 821F7D30h case   30:*/		return 0x821F7D34;
		  /* 821F7D34h */ case   31:  		/* mr R3, R31 */
		/* 821F7D34h case   31:*/		regs.R3 = regs.R31;
		/* 821F7D34h case   31:*/		return 0x821F7D38;
		  /* 821F7D38h */ case   32:  		/* lwz R10, <#[R11]> */
		/* 821F7D38h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7D38h case   32:*/		return 0x821F7D3C;
		  /* 821F7D3Ch */ case   33:  		/* mr R4, R11 */
		/* 821F7D3Ch case   33:*/		regs.R4 = regs.R11;
		/* 821F7D3Ch case   33:*/		return 0x821F7D40;
		  /* 821F7D40h */ case   34:  		/* rlwimi R10, R21, 27, 4, 6 */
		/* 821F7D40h case   34:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R10,regs.R21);
		/* 821F7D40h case   34:*/		return 0x821F7D44;
		  /* 821F7D44h */ case   35:  		/* rlwinm R9, R10, 27, 30, 31 */
		/* 821F7D44h case   35:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R9,regs.R10);
		/* 821F7D44h case   35:*/		return 0x821F7D48;
		  /* 821F7D48h */ case   36:  		/* rlwinm R8, R10, 29, 28, 29 */
		/* 821F7D48h case   36:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R8,regs.R10);
		/* 821F7D48h case   36:*/		return 0x821F7D4C;
		  /* 821F7D4Ch */ case   37:  		/* or R8, R8, R9 */
		/* 821F7D4Ch case   37:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 821F7D4Ch case   37:*/		return 0x821F7D50;
		  /* 821F7D50h */ case   38:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821F7D50h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821F7D50h case   38:*/		return 0x821F7D54;
		  /* 821F7D54h */ case   39:  		/* or R8, R8, R9 */
		/* 821F7D54h case   39:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 821F7D54h case   39:*/		return 0x821F7D58;
		  /* 821F7D58h */ case   40:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821F7D58h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821F7D58h case   40:*/		return 0x821F7D5C;
		  /* 821F7D5Ch */ case   41:  		/* or R9, R8, R9 */
		/* 821F7D5Ch case   41:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821F7D5Ch case   41:*/		return 0x821F7D60;
		  /* 821F7D60h */ case   42:  		/* rlwimi R10, R9, 5, 19, 26 */
		/* 821F7D60h case   42:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R10,regs.R9);
		/* 821F7D60h case   42:*/		return 0x821F7D64;
		  /* 821F7D64h */ case   43:  		/* stw R10, <#[R11]> */
		/* 821F7D64h case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7D64h case   43:*/		return 0x821F7D68;
		  /* 821F7D68h */ case   44:  		/* bl 191288 */
		/* 821F7D68h case   44:*/		regs.LR = 0x821F7D6C; return 0x822268A0;
		/* 821F7D68h case   44:*/		return 0x821F7D6C;
		  /* 821F7D6Ch */ case   45:  		/* lwz R28, <#[R31 + 564]> */
		/* 821F7D6Ch case   45:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7D6Ch case   45:*/		return 0x821F7D70;
		  /* 821F7D70h */ case   46:  		/* lwz R29, <#[R3 + 12]> */
		/* 821F7D70h case   46:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F7D70h case   46:*/		return 0x821F7D74;
		  /* 821F7D74h */ case   47:  		/* lwz R5, <#[R28 + 100]> */
		/* 821F7D74h case   47:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000064) );
		/* 821F7D74h case   47:*/		return 0x821F7D78;
		  /* 821F7D78h */ case   48:  		/* cmplwi CR6, R5, 0 */
		/* 821F7D78h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821F7D78h case   48:*/		return 0x821F7D7C;
		  /* 821F7D7Ch */ case   49:  		/* bc 12, CR6_EQ, 20 */
		/* 821F7D7Ch case   49:*/		if ( regs.CR[6].eq ) { return 0x821F7D90;  }
		/* 821F7D7Ch case   49:*/		return 0x821F7D80;
		  /* 821F7D80h */ case   50:  		/* mr R6, R31 */
		/* 821F7D80h case   50:*/		regs.R6 = regs.R31;
		/* 821F7D80h case   50:*/		return 0x821F7D84;
		  /* 821F7D84h */ case   51:  		/* li R4, 2 */
		/* 821F7D84h case   51:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821F7D84h case   51:*/		return 0x821F7D88;
		  /* 821F7D88h */ case   52:  		/* mr R3, R29 */
		/* 821F7D88h case   52:*/		regs.R3 = regs.R29;
		/* 821F7D88h case   52:*/		return 0x821F7D8C;
		  /* 821F7D8Ch */ case   53:  		/* bl -521236 */
		/* 821F7D8Ch case   53:*/		regs.LR = 0x821F7D90; return 0x82178978;
		/* 821F7D8Ch case   53:*/		return 0x821F7D90;
	}
	return 0x821F7D90;
} // Block from 821F7CB8h-821F7D90h (54 instructions)

//////////////////////////////////////////////////////
// Block at 821F7D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7D90);
		  /* 821F7D90h */ case    0:  		/* stw R29, <#[R28 + 100]> */
		/* 821F7D90h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x00000064) );
		/* 821F7D90h case    0:*/		return 0x821F7D94;
		  /* 821F7D94h */ case    1:  		/* addi R24, R24, 1 */
		/* 821F7D94h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821F7D94h case    1:*/		return 0x821F7D98;
		  /* 821F7D98h */ case    2:  		/* li R27, 16 */
		/* 821F7D98h case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x10);
		/* 821F7D98h case    2:*/		return 0x821F7D9C;
		  /* 821F7D9Ch */ case    3:  		/* lwz R11, <#[R29 + 8]> */
		/* 821F7D9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821F7D9Ch case    3:*/		return 0x821F7DA0;
		  /* 821F7DA0h */ case    4:  		/* oris R11, R11, 512 */
		/* 821F7DA0h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F7DA0h case    4:*/		return 0x821F7DA4;
		  /* 821F7DA4h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 821F7DA4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821F7DA4h case    5:*/		return 0x821F7DA8;
		  /* 821F7DA8h */ case    6:  		/* li R29, 34 */
		/* 821F7DA8h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x22);
		/* 821F7DA8h case    6:*/		return 0x821F7DAC;
		  /* 821F7DACh */ case    7:  		/* lwz R11, <#[R31 + 40]> */
		/* 821F7DACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F7DACh case    7:*/		return 0x821F7DB0;
		  /* 821F7DB0h */ case    8:  		/* oris R11, R11, 32 */
		/* 821F7DB0h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821F7DB0h case    8:*/		return 0x821F7DB4;
		  /* 821F7DB4h */ case    9:  		/* stw R11, <#[R31 + 40]> */
		/* 821F7DB4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F7DB4h case    9:*/		return 0x821F7DB8;
	}
	return 0x821F7DB8;
} // Block from 821F7D90h-821F7DB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F7DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7DB8);
		  /* 821F7DB8h */ case    0:  		/* mr R26, R30 */
		/* 821F7DB8h case    0:*/		regs.R26 = regs.R30;
		/* 821F7DB8h case    0:*/		return 0x821F7DBC;
		  /* 821F7DBCh */ case    1:  		/* cmplw CR6, R23, R27 */
		/* 821F7DBCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R27);
		/* 821F7DBCh case    1:*/		return 0x821F7DC0;
	}
	return 0x821F7DC0;
} // Block from 821F7DB8h-821F7DC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F7DC0h
// Function '?FindNextField@ComponentTypeEnumerator@D3DXShader@@AAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7DC0);
		  /* 821F7DC0h */ case    0:  		/* mr R11, R23 */
		/* 821F7DC0h case    0:*/		regs.R11 = regs.R23;
		/* 821F7DC0h case    0:*/		return 0x821F7DC4;
		  /* 821F7DC4h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 821F7DC4h case    1:*/		if ( regs.CR[6].lt ) { return 0x821F7DCC;  }
		/* 821F7DC4h case    1:*/		return 0x821F7DC8;
		  /* 821F7DC8h */ case    2:  		/* mr R11, R27 */
		/* 821F7DC8h case    2:*/		regs.R11 = regs.R27;
		/* 821F7DC8h case    2:*/		return 0x821F7DCC;
	}
	return 0x821F7DCC;
} // Block from 821F7DC0h-821F7DCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7DCC);
		  /* 821F7DCCh */ case    0:  		/* add R10, R11, R25 */
		/* 821F7DCCh case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R25);
		/* 821F7DCCh case    0:*/		return 0x821F7DD0;
		  /* 821F7DD0h */ case    1:  		/* cmplwi CR6, R10, 4 */
		/* 821F7DD0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821F7DD0h case    1:*/		return 0x821F7DD4;
		  /* 821F7DD4h */ case    2:  		/* bc 12, CR6_LT, 136 */
		/* 821F7DD4h case    2:*/		if ( regs.CR[6].lt ) { return 0x821F7E5C;  }
		/* 821F7DD4h case    2:*/		return 0x821F7DD8;
		  /* 821F7DD8h */ case    3:  		/* rlwinm R11, R29, 4, 0, 27 */
		/* 821F7DD8h case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R29);
		/* 821F7DD8h case    3:*/		return 0x821F7DDC;
		  /* 821F7DDCh */ case    4:  		/* li R7, 1 */
		/* 821F7DDCh case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F7DDCh case    4:*/		return 0x821F7DE0;
		  /* 821F7DE0h */ case    5:  		/* li R6, 0 */
		/* 821F7DE0h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7DE0h case    5:*/		return 0x821F7DE4;
		  /* 821F7DE4h */ case    6:  		/* li R5, 4 */
		/* 821F7DE4h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821F7DE4h case    6:*/		return 0x821F7DE8;
		  /* 821F7DE8h */ case    7:  		/* addi R4, R1, 128 */
		/* 821F7DE8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 821F7DE8h case    7:*/		return 0x821F7DEC;
		  /* 821F7DECh */ case    8:  		/* mr R3, R31 */
		/* 821F7DECh case    8:*/		regs.R3 = regs.R31;
		/* 821F7DECh case    8:*/		return 0x821F7DF0;
		  /* 821F7DF0h */ case    9:  		/* ori R30, R11, 15 */
		/* 821F7DF0h case    9:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R11,0xF);
		/* 821F7DF0h case    9:*/		return 0x821F7DF4;
		  /* 821F7DF4h */ case   10:  		/* bl -22740 */
		/* 821F7DF4h case   10:*/		regs.LR = 0x821F7DF8; return 0x821F2520;
		/* 821F7DF4h case   10:*/		return 0x821F7DF8;
		  /* 821F7DF8h */ case   11:  		/* mr R4, R3 */
		/* 821F7DF8h case   11:*/		regs.R4 = regs.R3;
		/* 821F7DF8h case   11:*/		return 0x821F7DFC;
		  /* 821F7DFCh */ case   12:  		/* mr R3, R31 */
		/* 821F7DFCh case   12:*/		regs.R3 = regs.R31;
		/* 821F7DFCh case   12:*/		return 0x821F7E00;
		  /* 821F7E00h */ case   13:  		/* mr R5, R30 */
		/* 821F7E00h case   13:*/		regs.R5 = regs.R30;
		/* 821F7E00h case   13:*/		return 0x821F7E04;
		  /* 821F7E04h */ case   14:  		/* mr R6, R26 */
		/* 821F7E04h case   14:*/		regs.R6 = regs.R26;
		/* 821F7E04h case   14:*/		return 0x821F7E08;
		  /* 821F7E08h */ case   15:  		/* li R7, 1 */
		/* 821F7E08h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F7E08h case   15:*/		return 0x821F7E0C;
		  /* 821F7E0Ch */ case   16:  		/* bl 191124 */
		/* 821F7E0Ch case   16:*/		regs.LR = 0x821F7E10; return 0x822268A0;
		/* 821F7E0Ch case   16:*/		return 0x821F7E10;
		  /* 821F7E10h */ case   17:  		/* lwz R28, <#[R31 + 564]> */
		/* 821F7E10h case   17:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7E10h case   17:*/		return 0x821F7E14;
		  /* 821F7E14h */ case   18:  		/* lwz R30, <#[R3 + 12]> */
		/* 821F7E14h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F7E14h case   18:*/		return 0x821F7E18;
	}
	return 0x821F7E18;
} // Block from 821F7DCCh-821F7E18h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E18h
// Function '?GetNextComponentType@ComponentTypeEnumerator@D3DXShader@@QAA?AW4_D3DCOMPONENT_TYPE@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E18);
		  /* 821F7E18h */ case    0:  		/* lwz R5, <#[R28 + 100]> */
		/* 821F7E18h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000064) );
		/* 821F7E18h case    0:*/		return 0x821F7E1C;
		  /* 821F7E1Ch */ case    1:  		/* cmplwi CR6, R5, 0 */
		/* 821F7E1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821F7E1Ch case    1:*/		return 0x821F7E20;
		  /* 821F7E20h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821F7E20h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F7E34;  }
		/* 821F7E20h case    2:*/		return 0x821F7E24;
		  /* 821F7E24h */ case    3:  		/* mr R6, R31 */
		/* 821F7E24h case    3:*/		regs.R6 = regs.R31;
		/* 821F7E24h case    3:*/		return 0x821F7E28;
		  /* 821F7E28h */ case    4:  		/* li R4, 2 */
		/* 821F7E28h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821F7E28h case    4:*/		return 0x821F7E2C;
		  /* 821F7E2Ch */ case    5:  		/* mr R3, R30 */
		/* 821F7E2Ch case    5:*/		regs.R3 = regs.R30;
		/* 821F7E2Ch case    5:*/		return 0x821F7E30;
		  /* 821F7E30h */ case    6:  		/* bl -521400 */
		/* 821F7E30h case    6:*/		regs.LR = 0x821F7E34; return 0x82178978;
		/* 821F7E30h case    6:*/		return 0x821F7E34;
	}
	return 0x821F7E34;
} // Block from 821F7E18h-821F7E34h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E34);
		  /* 821F7E34h */ case    0:  		/* stw R30, <#[R28 + 100]> */
		/* 821F7E34h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x00000064) );
		/* 821F7E34h case    0:*/		return 0x821F7E38;
		  /* 821F7E38h */ case    1:  		/* subfic R11, R25, 4 */
		/* 821F7E38h case    1:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R25,0x4);
		/* 821F7E38h case    1:*/		return 0x821F7E3C;
		  /* 821F7E3Ch */ case    2:  		/* addi R24, R24, 1 */
		/* 821F7E3Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821F7E3Ch case    2:*/		return 0x821F7E40;
		  /* 821F7E40h */ case    3:  		/* li R25, 0 */
		/* 821F7E40h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821F7E40h case    3:*/		return 0x821F7E44;
		  /* 821F7E44h */ case    4:  		/* addi R29, R29, 1 */
		/* 821F7E44h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821F7E44h case    4:*/		return 0x821F7E48;
		  /* 821F7E48h */ case    5:  		/* addi R27, R27, -4 */
		/* 821F7E48h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFFFFC);
		/* 821F7E48h case    5:*/		return 0x821F7E4C;
		  /* 821F7E4Ch */ case    6:  		/* lwz R10, <#[R30 + 8]> */
		/* 821F7E4Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821F7E4Ch case    6:*/		return 0x821F7E50;
		  /* 821F7E50h */ case    7:  		/* oris R10, R10, 512 */
		/* 821F7E50h case    7:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x200);
		/* 821F7E50h case    7:*/		return 0x821F7E54;
		  /* 821F7E54h */ case    8:  		/* stw R10, <#[R30 + 8]> */
		/* 821F7E54h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821F7E54h case    8:*/		return 0x821F7E58;
		  /* 821F7E58h */ case    9:  		/* b 8 */
		/* 821F7E58h case    9:*/		return 0x821F7E60;
		/* 821F7E58h case    9:*/		return 0x821F7E5C;
	}
	return 0x821F7E5C;
} // Block from 821F7E34h-821F7E5Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E5C);
		  /* 821F7E5Ch */ case    0:  		/* mr R25, R10 */
		/* 821F7E5Ch case    0:*/		regs.R25 = regs.R10;
		/* 821F7E5Ch case    0:*/		return 0x821F7E60;
	}
	return 0x821F7E60;
} // Block from 821F7E5Ch-821F7E60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E60);
		  /* 821F7E60h */ case    0:  		/* subf R23, R11, R23 */
		/* 821F7E60h case    0:*/		cpu::op::subf<0>(regs,&regs.R23,regs.R11,regs.R23);
		/* 821F7E60h case    0:*/		return 0x821F7E64;
	}
	return 0x821F7E64;
} // Block from 821F7E60h-821F7E64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E64);
		  /* 821F7E64h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821F7E64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821F7E64h case    0:*/		return 0x821F7E68;
		  /* 821F7E68h */ case    1:  		/* bc 12, CR6_EQ, -804 */
		/* 821F7E68h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F7B44;  }
		/* 821F7E68h case    1:*/		return 0x821F7E6C;
		  /* 821F7E6Ch */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 821F7E6Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821F7E6Ch case    2:*/		return 0x821F7E70;
		  /* 821F7E70h */ case    3:  		/* bc 4, CR6_EQ, -180 */
		/* 821F7E70h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821F7DBC;  }
		/* 821F7E70h case    3:*/		return 0x821F7E74;
		  /* 821F7E74h */ case    4:  		/* b -564 */
		/* 821F7E74h case    4:*/		return 0x821F7C40;
		/* 821F7E74h case    4:*/		return 0x821F7E78;
	}
	return 0x821F7E78;
} // Block from 821F7E64h-821F7E78h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E78);
		  /* 821F7E78h */ case    0:  		/* li R4, 4801 */
		/* 821F7E78h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F7E78h case    0:*/		return 0x821F7E7C;
		  /* 821F7E7Ch */ case    1:  		/* mr R3, R31 */
		/* 821F7E7Ch case    1:*/		regs.R3 = regs.R31;
		/* 821F7E7Ch case    1:*/		return 0x821F7E80;
		  /* 821F7E80h */ case    2:  		/* bl -679960 */
		/* 821F7E80h case    2:*/		regs.LR = 0x821F7E84; return 0x82151E68;
		/* 821F7E80h case    2:*/		return 0x821F7E84;
	}
	return 0x821F7E84;
} // Block from 821F7E78h-821F7E84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E84);
		  /* 821F7E84h */ case    0:  		/* stw R22, <#[R31 + 564]> */
		/* 821F7E84h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7E84h case    0:*/		return 0x821F7E88;
	}
	return 0x821F7E88;
} // Block from 821F7E84h-821F7E88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F7E88h
// Function '?PushRVal@ParseStack@D3DXShader@@QAAXPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7E88);
		  /* 821F7E88h */ case    0:  		/* li R6, 0 */
		/* 821F7E88h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7E88h case    0:*/		return 0x821F7E8C;
		  /* 821F7E8Ch */ case    1:  		/* mr R5, R24 */
		/* 821F7E8Ch case    1:*/		regs.R5 = regs.R24;
		/* 821F7E8Ch case    1:*/		return 0x821F7E90;
		  /* 821F7E90h */ case    2:  		/* mr R4, R31 */
		/* 821F7E90h case    2:*/		regs.R4 = regs.R31;
		/* 821F7E90h case    2:*/		return 0x821F7E94;
		  /* 821F7E94h */ case    3:  		/* addi R3, R1, 120 */
		/* 821F7E94h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x78);
		/* 821F7E94h case    3:*/		return 0x821F7E98;
		  /* 821F7E98h */ case    4:  		/* bl 207984 */
		/* 821F7E98h case    4:*/		regs.LR = 0x821F7E9C; return 0x8222AB08;
		/* 821F7E98h case    4:*/		return 0x821F7E9C;
		  /* 821F7E9Ch */ case    5:  		/* mr R30, R3 */
		/* 821F7E9Ch case    5:*/		regs.R30 = regs.R3;
		/* 821F7E9Ch case    5:*/		return 0x821F7EA0;
		  /* 821F7EA0h */ case    6:  		/* li R6, 0 */
		/* 821F7EA0h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7EA0h case    6:*/		return 0x821F7EA4;
		  /* 821F7EA4h */ case    7:  		/* lwz R5, <#[R31 + 612]> */
		/* 821F7EA4h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000264) );
		/* 821F7EA4h case    7:*/		return 0x821F7EA8;
		  /* 821F7EA8h */ case    8:  		/* mr R4, R31 */
		/* 821F7EA8h case    8:*/		regs.R4 = regs.R31;
		/* 821F7EA8h case    8:*/		return 0x821F7EAC;
		  /* 821F7EACh */ case    9:  		/* addi R3, R1, 128 */
		/* 821F7EACh case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821F7EACh case    9:*/		return 0x821F7EB0;
		  /* 821F7EB0h */ case   10:  		/* bl 210024 */
		/* 821F7EB0h case   10:*/		regs.LR = 0x821F7EB4; return 0x8222B318;
		/* 821F7EB0h case   10:*/		return 0x821F7EB4;
		  /* 821F7EB4h */ case   11:  		/* mr R11, R3 */
		/* 821F7EB4h case   11:*/		regs.R11 = regs.R3;
		/* 821F7EB4h case   11:*/		return 0x821F7EB8;
		  /* 821F7EB8h */ case   12:  		/* mr R3, R31 */
		/* 821F7EB8h case   12:*/		regs.R3 = regs.R31;
		/* 821F7EB8h case   12:*/		return 0x821F7EBC;
		  /* 821F7EBCh */ case   13:  		/* ld R5, <#[R30]> */
		/* 821F7EBCh case   13:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 821F7EBCh case   13:*/		return 0x821F7EC0;
		  /* 821F7EC0h */ case   14:  		/* ld R4, <#[R11]> */
		/* 821F7EC0h case   14:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821F7EC0h case   14:*/		return 0x821F7EC4;
		  /* 821F7EC4h */ case   15:  		/* bl -30460 */
		/* 821F7EC4h case   15:*/		regs.LR = 0x821F7EC8; return 0x821F07C8;
		/* 821F7EC4h case   15:*/		return 0x821F7EC8;
		  /* 821F7EC8h */ case   16:  		/* mr R5, R31 */
		/* 821F7EC8h case   16:*/		regs.R5 = regs.R31;
		/* 821F7EC8h case   16:*/		return 0x821F7ECC;
		  /* 821F7ECCh */ case   17:  		/* lwz R4, <#[R31 + 612]> */
		/* 821F7ECCh case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000264) );
		/* 821F7ECCh case   17:*/		return 0x821F7ED0;
		  /* 821F7ED0h */ case   18:  		/* mr R30, R3 */
		/* 821F7ED0h case   18:*/		regs.R30 = regs.R3;
		/* 821F7ED0h case   18:*/		return 0x821F7ED4;
		  /* 821F7ED4h */ case   19:  		/* lwz R3, <#[R31 + 564]> */
		/* 821F7ED4h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821F7ED4h case   19:*/		return 0x821F7ED8;
		  /* 821F7ED8h */ case   20:  		/* bl -29992 */
		/* 821F7ED8h case   20:*/		regs.LR = 0x821F7EDC; return 0x821F09B0;
		/* 821F7ED8h case   20:*/		return 0x821F7EDC;
		  /* 821F7EDCh */ case   21:  		/* lwz R11, <#[R1 + 112]> */
		/* 821F7EDCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 821F7EDCh case   21:*/		return 0x821F7EE0;
		  /* 821F7EE0h */ case   22:  		/* lwz R9, <#[R1 + 116]> */
		/* 821F7EE0h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 821F7EE0h case   22:*/		return 0x821F7EE4;
		  /* 821F7EE4h */ case   23:  		/* addi R10, R11, 972 */
		/* 821F7EE4h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3CC);
		/* 821F7EE4h case   23:*/		return 0x821F7EE8;
		  /* 821F7EE8h */ case   24:  		/* lwz R10, <#[R3 + 4]> */
		/* 821F7EE8h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821F7EE8h case   24:*/		return 0x821F7EEC;
		  /* 821F7EECh */ case   25:  		/* stw R30, <#[R3]> */
		/* 821F7EECh case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 821F7EECh case   25:*/		return 0x821F7EF0;
		  /* 821F7EF0h */ case   26:  		/* rlwimi R10, R21, 0, 16, 14 */
		/* 821F7EF0h case   26:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R21);
		/* 821F7EF0h case   26:*/		return 0x821F7EF4;
		  /* 821F7EF4h */ case   27:  		/* stw R10, <#[R3 + 4]> */
		/* 821F7EF4h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821F7EF4h case   27:*/		return 0x821F7EF8;
		  /* 821F7EF8h */ case   28:  		/* lwz R10, <#[R11 + 976]> */
		/* 821F7EF8h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F7EF8h case   28:*/		return 0x821F7EFC;
		  /* 821F7EFCh */ case   29:  		/* stw R10, <#[R9]> */
		/* 821F7EFCh case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821F7EFCh case   29:*/		return 0x821F7F00;
		  /* 821F7F00h */ case   30:  		/* stw R9, <#[R11 + 976]> */
		/* 821F7F00h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F7F00h case   30:*/		return 0x821F7F04;
		  /* 821F7F04h */ case   31:  		/* b 524 */
		/* 821F7F04h case   31:*/		return 0x821F8110;
		/* 821F7F04h case   31:*/		return 0x821F7F08;
	}
	return 0x821F7F08;
} // Block from 821F7E88h-821F7F08h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821F7F08h
// Function '?PushLVal@ParseStack@D3DXShader@@QAAXPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7F08);
		  /* 821F7F08h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821F7F08h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F7F08h case    0:*/		return 0x821F7F0C;
		  /* 821F7F0Ch */ case    1:  		/* bc 12, CR6_EQ, 516 */
		/* 821F7F0Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821F8110;  }
		/* 821F7F0Ch case    1:*/		return 0x821F7F10;
		  /* 821F7F10h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 821F7F10h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821F7F10h case    2:*/		return 0x821F7F14;
		  /* 821F7F14h */ case    3:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 821F7F14h case    3:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 821F7F14h case    3:*/		return 0x821F7F18;
		  /* 821F7F18h */ case    4:  		/* bc 12, CR0_EQ, 504 */
		/* 821F7F18h case    4:*/		if ( regs.CR[0].eq ) { return 0x821F8110;  }
		/* 821F7F18h case    4:*/		return 0x821F7F1C;
		  /* 821F7F1Ch */ case    5:  		/* mr R4, R29 */
		/* 821F7F1Ch case    5:*/		regs.R4 = regs.R29;
		/* 821F7F1Ch case    5:*/		return 0x821F7F20;
		  /* 821F7F20h */ case    6:  		/* addi R3, R1, 104 */
		/* 821F7F20h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F7F20h case    6:*/		return 0x821F7F24;
		  /* 821F7F24h */ case    7:  		/* bl -4012 */
		/* 821F7F24h case    7:*/		regs.LR = 0x821F7F28; return 0x821F6F78;
		/* 821F7F24h case    7:*/		return 0x821F7F28;
		  /* 821F7F28h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 821F7F28h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F7F28h case    8:*/		return 0x821F7F2C;
		  /* 821F7F2Ch */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 821F7F2Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821F7F38;  }
		/* 821F7F2Ch case    9:*/		return 0x821F7F30;
		  /* 821F7F30h */ case   10:  		/* addi R3, R1, 104 */
		/* 821F7F30h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F7F30h case   10:*/		return 0x821F7F34;
		  /* 821F7F34h */ case   11:  		/* bl -4348 */
		/* 821F7F34h case   11:*/		regs.LR = 0x821F7F38; return 0x821F6E38;
		/* 821F7F34h case   11:*/		return 0x821F7F38;
	}
	return 0x821F7F38;
} // Block from 821F7F08h-821F7F38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F7F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7F38);
		  /* 821F7F38h */ case    0:  		/* mr R4, R23 */
		/* 821F7F38h case    0:*/		regs.R4 = regs.R23;
		/* 821F7F38h case    0:*/		return 0x821F7F3C;
		  /* 821F7F3Ch */ case    1:  		/* addi R3, R1, 128 */
		/* 821F7F3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821F7F3Ch case    1:*/		return 0x821F7F40;
		  /* 821F7F40h */ case    2:  		/* bl -360720 */
		/* 821F7F40h case    2:*/		regs.LR = 0x821F7F44; return 0x8219FE30;
		/* 821F7F40h case    2:*/		return 0x821F7F44;
		  /* 821F7F44h */ case    3:  		/* mr R4, R28 */
		/* 821F7F44h case    3:*/		regs.R4 = regs.R28;
		/* 821F7F44h case    3:*/		return 0x821F7F48;
		  /* 821F7F48h */ case    4:  		/* addi R3, R1, 128 */
		/* 821F7F48h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821F7F48h case    4:*/		return 0x821F7F4C;
		  /* 821F7F4Ch */ case    5:  		/* bl -26076 */
		/* 821F7F4Ch case    5:*/		regs.LR = 0x821F7F50; return 0x821F1970;
		/* 821F7F4Ch case    5:*/		return 0x821F7F50;
		  /* 821F7F50h */ case    6:  		/* addi R3, R1, 104 */
		/* 821F7F50h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F7F50h case    6:*/		return 0x821F7F54;
		  /* 821F7F54h */ case    7:  		/* mr R26, R25 */
		/* 821F7F54h case    7:*/		regs.R26 = regs.R25;
		/* 821F7F54h case    7:*/		return 0x821F7F58;
		  /* 821F7F58h */ case    8:  		/* bl -4384 */
		/* 821F7F58h case    8:*/		regs.LR = 0x821F7F5C; return 0x821F6E38;
		/* 821F7F58h case    8:*/		return 0x821F7F5C;
		  /* 821F7F5Ch */ case    9:  		/* li R24, 3 */
		/* 821F7F5Ch case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x3);
		/* 821F7F5Ch case    9:*/		return 0x821F7F60;
		  /* 821F7F60h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 821F7F60h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821F7F60h case   10:*/		return 0x821F7F64;
		  /* 821F7F64h */ case   11:  		/* bc 12, CR0_EQ, 312 */
		/* 821F7F64h case   11:*/		if ( regs.CR[0].eq ) { return 0x821F809C;  }
		/* 821F7F64h case   11:*/		return 0x821F7F68;
		  /* 821F7F68h */ case   12:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F7F68h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F7F68h case   12:*/		return 0x821F7F6C;
		  /* 821F7F6Ch */ case   13:  		/* cmpwi CR6, R11, 1 */
		/* 821F7F6Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F7F6Ch case   13:*/		return 0x821F7F70;
		  /* 821F7F70h */ case   14:  		/* bc 4, CR6_EQ, 48 */
		/* 821F7F70h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821F7FA0;  }
		/* 821F7F70h case   14:*/		return 0x821F7F74;
		  /* 821F7F74h */ case   15:  		/* lwz R11, <#[R3 + 12]> */
		/* 821F7F74h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F7F74h case   15:*/		return 0x821F7F78;
		  /* 821F7F78h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821F7F78h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F7F78h case   16:*/		return 0x821F7F7C;
		  /* 821F7F7Ch */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 821F7F7Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821F7F88;  }
		/* 821F7F7Ch case   17:*/		return 0x821F7F80;
		  /* 821F7F80h */ case   18:  		/* li R3, 0 */
		/* 821F7F80h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F7F80h case   18:*/		return 0x821F7F84;
		  /* 821F7F84h */ case   19:  		/* b 48 */
		/* 821F7F84h case   19:*/		return 0x821F7FB4;
		/* 821F7F84h case   19:*/		return 0x821F7F88;
	}
	return 0x821F7F88;
} // Block from 821F7F38h-821F7F88h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F7F88h
// Function '?PushReduction@ParseStack@D3DXShader@@QAAXPAVCNode@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7F88);
		  /* 821F7F88h */ case    0:  		/* lwz R4, <#[R3 + 8]> */
		/* 821F7F88h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000008) );
		/* 821F7F88h case    0:*/		return 0x821F7F8C;
		  /* 821F7F8Ch */ case    1:  		/* addi R6, R1, 96 */
		/* 821F7F8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821F7F8Ch case    1:*/		return 0x821F7F90;
		  /* 821F7F90h */ case    2:  		/* addi R5, R1, 100 */
		/* 821F7F90h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 821F7F90h case    2:*/		return 0x821F7F94;
		  /* 821F7F94h */ case    3:  		/* mr R3, R31 */
		/* 821F7F94h case    3:*/		regs.R3 = regs.R31;
		/* 821F7F94h case    3:*/		return 0x821F7F98;
		  /* 821F7F98h */ case    4:  		/* bl -49216 */
		/* 821F7F98h case    4:*/		regs.LR = 0x821F7F9C; return 0x821EBF58;
		/* 821F7F98h case    4:*/		return 0x821F7F9C;
		  /* 821F7F9Ch */ case    5:  		/* b 24 */
		/* 821F7F9Ch case    5:*/		return 0x821F7FB4;
		/* 821F7F9Ch case    5:*/		return 0x821F7FA0;
	}
	return 0x821F7FA0;
} // Block from 821F7F88h-821F7FA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F7FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7FA0);
		  /* 821F7FA0h */ case    0:  		/* mr R4, R3 */
		/* 821F7FA0h case    0:*/		regs.R4 = regs.R3;
		/* 821F7FA0h case    0:*/		return 0x821F7FA4;
		  /* 821F7FA4h */ case    1:  		/* addi R6, R1, 96 */
		/* 821F7FA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821F7FA4h case    1:*/		return 0x821F7FA8;
		  /* 821F7FA8h */ case    2:  		/* addi R5, R1, 100 */
		/* 821F7FA8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 821F7FA8h case    2:*/		return 0x821F7FAC;
		  /* 821F7FACh */ case    3:  		/* mr R3, R31 */
		/* 821F7FACh case    3:*/		regs.R3 = regs.R31;
		/* 821F7FACh case    3:*/		return 0x821F7FB0;
		  /* 821F7FB0h */ case    4:  		/* bl -49368 */
		/* 821F7FB0h case    4:*/		regs.LR = 0x821F7FB4; return 0x821EBED8;
		/* 821F7FB0h case    4:*/		return 0x821F7FB4;
	}
	return 0x821F7FB4;
} // Block from 821F7FA0h-821F7FB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F7FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7FB4);
		  /* 821F7FB4h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821F7FB4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821F7FB4h case    0:*/		return 0x821F7FB8;
		  /* 821F7FB8h */ case    1:  		/* bc 12, CR0_EQ, 408 */
		/* 821F7FB8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F8150;  }
		/* 821F7FB8h case    1:*/		return 0x821F7FBC;
		  /* 821F7FBCh */ case    2:  		/* lwz R11, <#[R1 + 96]> */
		/* 821F7FBCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821F7FBCh case    2:*/		return 0x821F7FC0;
		  /* 821F7FC0h */ case    3:  		/* lwz R10, <#[R1 + 100]> */
		/* 821F7FC0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821F7FC0h case    3:*/		return 0x821F7FC4;
		  /* 821F7FC4h */ case    4:  		/* mullw. R29, R10, R11 */
		/* 821F7FC4h case    4:*/		cpu::op::mullw<1>(regs,&regs.R29,regs.R10,regs.R11);
		/* 821F7FC4h case    4:*/		return 0x821F7FC8;
		  /* 821F7FC8h */ case    5:  		/* bc 12, CR0_EQ, 188 */
		/* 821F7FC8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821F8084;  }
		/* 821F7FC8h case    5:*/		return 0x821F7FCC;
		  /* 821F7FCCh */ case    6:  		/* li R6, 0 */
		/* 821F7FCCh case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7FCCh case    6:*/		return 0x821F7FD0;
		  /* 821F7FD0h */ case    7:  		/* li R5, 0 */
		/* 821F7FD0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F7FD0h case    7:*/		return 0x821F7FD4;
		  /* 821F7FD4h */ case    8:  		/* li R4, 117 */
		/* 821F7FD4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 821F7FD4h case    8:*/		return 0x821F7FD8;
		  /* 821F7FD8h */ case    9:  		/* mr R3, R31 */
		/* 821F7FD8h case    9:*/		regs.R3 = regs.R31;
		/* 821F7FD8h case    9:*/		return 0x821F7FDC;
		  /* 821F7FDCh */ case   10:  		/* bl -605100 */
		/* 821F7FDCh case   10:*/		regs.LR = 0x821F7FE0; return 0x82164430;
		/* 821F7FDCh case   10:*/		return 0x821F7FE0;
		  /* 821F7FE0h */ case   11:  		/* addi R28, R3, -16 */
		/* 821F7FE0h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0xFFFFFFF0);
		/* 821F7FE0h case   11:*/		return 0x821F7FE4;
		  /* 821F7FE4h */ case   12:  		/* cmplwi CR6, R29, 4 */
		/* 821F7FE4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821F7FE4h case   12:*/		return 0x821F7FE8;
		  /* 821F7FE8h */ case   13:  		/* li R27, 4 */
		/* 821F7FE8h case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x4);
		/* 821F7FE8h case   13:*/		return 0x821F7FEC;
		  /* 821F7FECh */ case   14:  		/* bc 12, CR6_GT, 8 */
		/* 821F7FECh case   14:*/		if ( regs.CR[6].gt ) { return 0x821F7FF4;  }
		/* 821F7FECh case   14:*/		return 0x821F7FF0;
		  /* 821F7FF0h */ case   15:  		/* mr R27, R29 */
		/* 821F7FF0h case   15:*/		regs.R27 = regs.R29;
		/* 821F7FF0h case   15:*/		return 0x821F7FF4;
	}
	return 0x821F7FF4;
} // Block from 821F7FB4h-821F7FF4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F7FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F7FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F7FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F7FF4);
		  /* 821F7FF4h */ case    0:  		/* li R7, 1 */
		/* 821F7FF4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F7FF4h case    0:*/		return 0x821F7FF8;
		  /* 821F7FF8h */ case    1:  		/* li R6, 0 */
		/* 821F7FF8h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F7FF8h case    1:*/		return 0x821F7FFC;
		  /* 821F7FFCh */ case    2:  		/* mr R5, R27 */
		/* 821F7FFCh case    2:*/		regs.R5 = regs.R27;
		/* 821F7FFCh case    2:*/		return 0x821F8000;
		  /* 821F8000h */ case    3:  		/* addi R4, R1, 128 */
		/* 821F8000h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 821F8000h case    3:*/		return 0x821F8004;
		  /* 821F8004h */ case    4:  		/* mr R3, R31 */
		/* 821F8004h case    4:*/		regs.R3 = regs.R31;
		/* 821F8004h case    4:*/		return 0x821F8008;
		  /* 821F8008h */ case    5:  		/* bl -23272 */
		/* 821F8008h case    5:*/		regs.LR = 0x821F800C; return 0x821F2520;
		/* 821F8008h case    5:*/		return 0x821F800C;
		  /* 821F800Ch */ case    6:  		/* lwz R4, <#[R31 + 564]> */
		/* 821F800Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821F800Ch case    6:*/		return 0x821F8010;
		  /* 821F8010h */ case    7:  		/* mr R23, R3 */
		/* 821F8010h case    7:*/		regs.R23 = regs.R3;
		/* 821F8010h case    7:*/		return 0x821F8014;
		  /* 821F8014h */ case    8:  		/* addi R5, R4, 24 */
		/* 821F8014h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821F8014h case    8:*/		return 0x821F8018;
	}
	return 0x821F8018;
} // Block from 821F7FF4h-821F8018h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F8018h
// Function '?Push@ParseStack@D3DXShader@@QAAXPAVCNode@2@W4ParseStackEntryType@12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8018);
		  /* 821F8018h */ case    0:  		/* li R8, 0 */
		/* 821F8018h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F8018h case    0:*/		return 0x821F801C;
		  /* 821F801Ch */ case    1:  		/* li R7, 0 */
		/* 821F801Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F801Ch case    1:*/		return 0x821F8020;
		  /* 821F8020h */ case    2:  		/* li R6, 117 */
		/* 821F8020h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821F8020h case    2:*/		return 0x821F8024;
		  /* 821F8024h */ case    3:  		/* mr R3, R31 */
		/* 821F8024h case    3:*/		regs.R3 = regs.R31;
		/* 821F8024h case    3:*/		return 0x821F8028;
		  /* 821F8028h */ case    4:  		/* bl 182640 */
		/* 821F8028h case    4:*/		regs.LR = 0x821F802C; return 0x82224998;
		/* 821F8028h case    4:*/		return 0x821F802C;
		  /* 821F802Ch */ case    5:  		/* add R11, R28, R3 */
		/* 821F802Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R3);
		/* 821F802Ch case    5:*/		return 0x821F8030;
		  /* 821F8030h */ case    6:  		/* lwzx R10, <#[R28 + R3]> */
		/* 821F8030h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R3 + 0x00000000) );
		/* 821F8030h case    6:*/		return 0x821F8034;
		  /* 821F8034h */ case    7:  		/* mr R4, R23 */
		/* 821F8034h case    7:*/		regs.R4 = regs.R23;
		/* 821F8034h case    7:*/		return 0x821F8038;
		  /* 821F8038h */ case    8:  		/* mr R30, R3 */
		/* 821F8038h case    8:*/		regs.R30 = regs.R3;
		/* 821F8038h case    8:*/		return 0x821F803C;
		  /* 821F803Ch */ case    9:  		/* ori R10, R10, 7 */
		/* 821F803Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x7);
		/* 821F803Ch case    9:*/		return 0x821F8040;
		  /* 821F8040h */ case   10:  		/* stw R24, <#[R11 + 4]> */
		/* 821F8040h case   10:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8040h case   10:*/		return 0x821F8044;
		  /* 821F8044h */ case   11:  		/* stwx R10, <#[R28 + R3]> */
		/* 821F8044h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + regs.R3 + 0x00000000) );
		/* 821F8044h case   11:*/		return 0x821F8048;
		  /* 821F8048h */ case   12:  		/* lwz R10, <#[R31 + 560]> */
		/* 821F8048h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 821F8048h case   12:*/		return 0x821F804C;
		  /* 821F804Ch */ case   13:  		/* stw R20, <#[R11 + 12]> */
		/* 821F804Ch case   13:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F804Ch case   13:*/		return 0x821F8050;
		  /* 821F8050h */ case   14:  		/* stw R10, <#[R11 + 8]> */
		/* 821F8050h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F8050h case   14:*/		return 0x821F8054;
		  /* 821F8054h */ case   15:  		/* bl -523916 */
		/* 821F8054h case   15:*/		regs.LR = 0x821F8058; return 0x821781C8;
		/* 821F8054h case   15:*/		return 0x821F8058;
		  /* 821F8058h */ case   16:  		/* mr R5, R31 */
		/* 821F8058h case   16:*/		regs.R5 = regs.R31;
		/* 821F8058h case   16:*/		return 0x821F805C;
		  /* 821F805Ch */ case   17:  		/* mr R4, R26 */
		/* 821F805Ch case   17:*/		regs.R4 = regs.R26;
		/* 821F805Ch case   17:*/		return 0x821F8060;
		  /* 821F8060h */ case   18:  		/* mr R3, R30 */
		/* 821F8060h case   18:*/		regs.R3 = regs.R30;
		/* 821F8060h case   18:*/		return 0x821F8064;
		  /* 821F8064h */ case   19:  		/* subf R29, R27, R29 */
		/* 821F8064h case   19:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R27,regs.R29);
		/* 821F8064h case   19:*/		return 0x821F8068;
		  /* 821F8068h */ case   20:  		/* bl -523736 */
		/* 821F8068h case   20:*/		regs.LR = 0x821F806C; return 0x82178290;
		/* 821F8068h case   20:*/		return 0x821F806C;
		  /* 821F806Ch */ case   21:  		/* lwz R11, <#[R30 + 8]> */
		/* 821F806Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F806Ch case   21:*/		return 0x821F8070;
		  /* 821F8070h */ case   22:  		/* mr R26, R30 */
		/* 821F8070h case   22:*/		regs.R26 = regs.R30;
		/* 821F8070h case   22:*/		return 0x821F8074;
		  /* 821F8074h */ case   23:  		/* oris R11, R11, 512 */
		/* 821F8074h case   23:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F8074h case   23:*/		return 0x821F8078;
		  /* 821F8078h */ case   24:  		/* cmplwi CR6, R29, 0 */
		/* 821F8078h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821F8078h case   24:*/		return 0x821F807C;
		  /* 821F807Ch */ case   25:  		/* stw R11, <#[R30 + 8]> */
		/* 821F807Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F807Ch case   25:*/		return 0x821F8080;
		  /* 821F8080h */ case   26:  		/* bc 4, CR6_EQ, -156 */
		/* 821F8080h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821F7FE4;  }
		/* 821F8080h case   26:*/		return 0x821F8084;
	}
	return 0x821F8084;
} // Block from 821F8018h-821F8084h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821F8084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8084);
		  /* 821F8084h */ case    0:  		/* addi R3, R1, 104 */
		/* 821F8084h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F8084h case    0:*/		return 0x821F8088;
		  /* 821F8088h */ case    1:  		/* bl -4688 */
		/* 821F8088h case    1:*/		regs.LR = 0x821F808C; return 0x821F6E38;
		/* 821F8088h case    1:*/		return 0x821F808C;
		  /* 821F808Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821F808Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821F808Ch case    2:*/		return 0x821F8090;
		  /* 821F8090h */ case    3:  		/* bc 4, CR0_EQ, -296 */
		/* 821F8090h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821F7F68;  }
		/* 821F8090h case    3:*/		return 0x821F8094;
		  /* 821F8094h */ case    4:  		/* cmplw CR6, R26, R25 */
		/* 821F8094h case    4:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R25);
		/* 821F8094h case    4:*/		return 0x821F8098;
	}
	return 0x821F8098;
} // Block from 821F8084h-821F8098h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F8098h
// Function '?EnterIsolateScope@Compiler@D3DXShader@@AAAXPAPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8098);
		  /* 821F8098h */ case    0:  		/* bc 4, CR6_EQ, 120 */
		/* 821F8098h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821F8110;  }
		/* 821F8098h case    0:*/		return 0x821F809C;
	}
	return 0x821F809C;
} // Block from 821F8098h-821F809Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F809Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F809C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F809C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F809C);
		  /* 821F809Ch */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 821F809Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821F809Ch case    0:*/		return 0x821F80A0;
		  /* 821F80A0h */ case    1:  		/* li R8, 0 */
		/* 821F80A0h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F80A0h case    1:*/		return 0x821F80A4;
		  /* 821F80A4h */ case    2:  		/* li R7, 0 */
		/* 821F80A4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F80A4h case    2:*/		return 0x821F80A8;
		  /* 821F80A8h */ case    3:  		/* addi R5, R4, 24 */
		/* 821F80A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821F80A8h case    3:*/		return 0x821F80AC;
		  /* 821F80ACh */ case    4:  		/* li R6, 117 */
		/* 821F80ACh case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821F80ACh case    4:*/		return 0x821F80B0;
		  /* 821F80B0h */ case    5:  		/* mr R3, R31 */
		/* 821F80B0h case    5:*/		regs.R3 = regs.R31;
		/* 821F80B0h case    5:*/		return 0x821F80B4;
		  /* 821F80B4h */ case    6:  		/* bl 182500 */
		/* 821F80B4h case    6:*/		regs.LR = 0x821F80B8; return 0x82224998;
		/* 821F80B4h case    6:*/		return 0x821F80B8;
		  /* 821F80B8h */ case    7:  		/* mr R30, R3 */
		/* 821F80B8h case    7:*/		regs.R30 = regs.R3;
		/* 821F80B8h case    7:*/		return 0x821F80BC;
		  /* 821F80BCh */ case    8:  		/* li R6, 0 */
		/* 821F80BCh case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F80BCh case    8:*/		return 0x821F80C0;
		  /* 821F80C0h */ case    9:  		/* li R5, 0 */
		/* 821F80C0h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F80C0h case    9:*/		return 0x821F80C4;
		  /* 821F80C4h */ case   10:  		/* li R4, 117 */
		/* 821F80C4h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 821F80C4h case   10:*/		return 0x821F80C8;
		  /* 821F80C8h */ case   11:  		/* mr R3, R31 */
		/* 821F80C8h case   11:*/		regs.R3 = regs.R31;
		/* 821F80C8h case   11:*/		return 0x821F80CC;
		  /* 821F80CCh */ case   12:  		/* bl -605340 */
		/* 821F80CCh case   12:*/		regs.LR = 0x821F80D0; return 0x82164430;
		/* 821F80CCh case   12:*/		return 0x821F80D0;
		  /* 821F80D0h */ case   13:  		/* addi R11, R30, -16 */
		/* 821F80D0h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821F80D0h case   13:*/		return 0x821F80D4;
		  /* 821F80D4h */ case   14:  		/* mr R5, R31 */
		/* 821F80D4h case   14:*/		regs.R5 = regs.R31;
		/* 821F80D4h case   14:*/		return 0x821F80D8;
		  /* 821F80D8h */ case   15:  		/* add R11, R3, R11 */
		/* 821F80D8h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821F80D8h case   15:*/		return 0x821F80DC;
		  /* 821F80DCh */ case   16:  		/* mr R4, R26 */
		/* 821F80DCh case   16:*/		regs.R4 = regs.R26;
		/* 821F80DCh case   16:*/		return 0x821F80E0;
		  /* 821F80E0h */ case   17:  		/* mr R3, R30 */
		/* 821F80E0h case   17:*/		regs.R3 = regs.R30;
		/* 821F80E0h case   17:*/		return 0x821F80E4;
		  /* 821F80E4h */ case   18:  		/* stw R24, <#[R11 + 4]> */
		/* 821F80E4h case   18:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000004) );
		/* 821F80E4h case   18:*/		return 0x821F80E8;
		  /* 821F80E8h */ case   19:  		/* lwz R10, <#[R11]> */
		/* 821F80E8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F80E8h case   19:*/		return 0x821F80EC;
		  /* 821F80ECh */ case   20:  		/* ori R10, R10, 7 */
		/* 821F80ECh case   20:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x7);
		/* 821F80ECh case   20:*/		return 0x821F80F0;
		  /* 821F80F0h */ case   21:  		/* stw R10, <#[R11]> */
		/* 821F80F0h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F80F0h case   21:*/		return 0x821F80F4;
		  /* 821F80F4h */ case   22:  		/* lwz R10, <#[R31 + 560]> */
		/* 821F80F4h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000230) );
		/* 821F80F4h case   22:*/		return 0x821F80F8;
		  /* 821F80F8h */ case   23:  		/* stw R10, <#[R11 + 8]> */
		/* 821F80F8h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F80F8h case   23:*/		return 0x821F80FC;
		  /* 821F80FCh */ case   24:  		/* stw R20, <#[R11 + 12]> */
		/* 821F80FCh case   24:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F80FCh case   24:*/		return 0x821F8100;
		  /* 821F8100h */ case   25:  		/* bl -523888 */
		/* 821F8100h case   25:*/		regs.LR = 0x821F8104; return 0x82178290;
		/* 821F8100h case   25:*/		return 0x821F8104;
		  /* 821F8104h */ case   26:  		/* lwz R11, <#[R30 + 8]> */
		/* 821F8104h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F8104h case   26:*/		return 0x821F8108;
		  /* 821F8108h */ case   27:  		/* oris R11, R11, 512 */
		/* 821F8108h case   27:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821F8108h case   27:*/		return 0x821F810C;
		  /* 821F810Ch */ case   28:  		/* stw R11, <#[R30 + 8]> */
		/* 821F810Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821F810Ch case   28:*/		return 0x821F8110;
	}
	return 0x821F8110;
} // Block from 821F809Ch-821F8110h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821F8110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8110);
		  /* 821F8110h */ case    0:  		/* mr R5, R31 */
		/* 821F8110h case    0:*/		regs.R5 = regs.R31;
		/* 821F8110h case    0:*/		return 0x821F8114;
		  /* 821F8114h */ case    1:  		/* lwz R3, <#[R31 + 564]> */
		/* 821F8114h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821F8114h case    1:*/		return 0x821F8118;
		  /* 821F8118h */ case    2:  		/* mr R4, R19 */
		/* 821F8118h case    2:*/		regs.R4 = regs.R19;
		/* 821F8118h case    2:*/		return 0x821F811C;
		  /* 821F811Ch */ case    3:  		/* bl 227780 */
		/* 821F811Ch case    3:*/		regs.LR = 0x821F8120; return 0x8222FAE0;
		/* 821F811Ch case    3:*/		return 0x821F8120;
		  /* 821F8120h */ case    4:  		/* lwz R11, <#[R31 + 56]> */
		/* 821F8120h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821F8120h case    4:*/		return 0x821F8124;
		  /* 821F8124h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821F8124h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8124h case    5:*/		return 0x821F8128;
		  /* 821F8128h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 821F8128h case    6:*/		if ( regs.CR[6].eq ) { return 0x821F8130;  }
		/* 821F8128h case    6:*/		return 0x821F812C;
		  /* 821F812Ch */ case    7:  		/* stw R21, <#[R11 + 28]> */
		/* 821F812Ch case    7:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x0000001C) );
		/* 821F812Ch case    7:*/		return 0x821F8130;
	}
	return 0x821F8130;
} // Block from 821F8110h-821F8130h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F8130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8130);
		  /* 821F8130h */ case    0:  		/* lwz R11, <#[R1 + 104]> */
		/* 821F8130h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 821F8130h case    0:*/		return 0x821F8134;
		  /* 821F8134h */ case    1:  		/* lwz R9, <#[R1 + 108]> */
		/* 821F8134h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 821F8134h case    1:*/		return 0x821F8138;
		  /* 821F8138h */ case    2:  		/* addi R10, R11, 972 */
		/* 821F8138h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3CC);
		/* 821F8138h case    2:*/		return 0x821F813C;
		  /* 821F813Ch */ case    3:  		/* lwz R10, <#[R11 + 976]> */
		/* 821F813Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F813Ch case    3:*/		return 0x821F8140;
		  /* 821F8140h */ case    4:  		/* stw R10, <#[R9]> */
		/* 821F8140h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821F8140h case    4:*/		return 0x821F8144;
		  /* 821F8144h */ case    5:  		/* stw R9, <#[R11 + 976]> */
		/* 821F8144h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F8144h case    5:*/		return 0x821F8148;
		  /* 821F8148h */ case    6:  		/* addi R1, R1, 256 */
		/* 821F8148h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 821F8148h case    6:*/		return 0x821F814C;
		  /* 821F814Ch */ case    7:  		/* b -1470152 */
		/* 821F814Ch case    7:*/		return 0x82091284;
		/* 821F814Ch case    7:*/		return 0x821F8150;
	}
	return 0x821F8150;
} // Block from 821F8130h-821F8150h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F8150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8150);
		  /* 821F8150h */ case    0:  		/* li R4, 4801 */
		/* 821F8150h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8150h case    0:*/		return 0x821F8154;
		  /* 821F8154h */ case    1:  		/* mr R3, R31 */
		/* 821F8154h case    1:*/		regs.R3 = regs.R31;
		/* 821F8154h case    1:*/		return 0x821F8158;
		  /* 821F8158h */ case    2:  		/* bl -680688 */
		/* 821F8158h case    2:*/		regs.LR = 0x821F815C; return 0x82151E68;
		/* 821F8158h case    2:*/		return 0x821F815C;
	}
	return 0x821F815C;
} // Block from 821F8150h-821F815Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F815Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F815C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F815C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F815C);
		  /* 821F815Ch */ case    0:  		/* li R4, 4801 */
		/* 821F815Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F815Ch case    0:*/		return 0x821F8160;
		  /* 821F8160h */ case    1:  		/* mr R3, R31 */
		/* 821F8160h case    1:*/		regs.R3 = regs.R31;
		/* 821F8160h case    1:*/		return 0x821F8164;
		  /* 821F8164h */ case    2:  		/* bl -680700 */
		/* 821F8164h case    2:*/		regs.LR = 0x821F8168; return 0x82151E68;
		/* 821F8164h case    2:*/		return 0x821F8168;
	}
	return 0x821F8168;
} // Block from 821F815Ch-821F8168h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8168);
		  /* 821F8168h */ case    0:  		/* li R4, 4801 */
		/* 821F8168h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8168h case    0:*/		return 0x821F816C;
		  /* 821F816Ch */ case    1:  		/* mr R3, R31 */
		/* 821F816Ch case    1:*/		regs.R3 = regs.R31;
		/* 821F816Ch case    1:*/		return 0x821F8170;
		  /* 821F8170h */ case    2:  		/* bl -680712 */
		/* 821F8170h case    2:*/		regs.LR = 0x821F8174; return 0x82151E68;
		/* 821F8170h case    2:*/		return 0x821F8174;
		  /* 821F8174h */ case    3:  		/* nop */
		/* 821F8174h case    3:*/		cpu::op::nop();
		/* 821F8174h case    3:*/		return 0x821F8178;
	}
	return 0x821F8178;
} // Block from 821F8168h-821F8178h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F8178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8178);
		  /* 821F8178h */ case    0:  		/* mfspr R12, LR */
		/* 821F8178h case    0:*/		regs.R12 = regs.LR;
		/* 821F8178h case    0:*/		return 0x821F817C;
		  /* 821F817Ch */ case    1:  		/* bl -1470252 */
		/* 821F817Ch case    1:*/		regs.LR = 0x821F8180; return 0x82091250;
		/* 821F817Ch case    1:*/		return 0x821F8180;
		  /* 821F8180h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821F8180h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821F8180h case    2:*/		return 0x821F8184;
		  /* 821F8184h */ case    3:  		/* mr R31, R4 */
		/* 821F8184h case    3:*/		regs.R31 = regs.R4;
		/* 821F8184h case    3:*/		return 0x821F8188;
		  /* 821F8188h */ case    4:  		/* mr R26, R5 */
		/* 821F8188h case    4:*/		regs.R26 = regs.R5;
		/* 821F8188h case    4:*/		return 0x821F818C;
		  /* 821F818Ch */ case    5:  		/* li R5, 15 */
		/* 821F818Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821F818Ch case    5:*/		return 0x821F8190;
		  /* 821F8190h */ case    6:  		/* li R4, 8 */
		/* 821F8190h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821F8190h case    6:*/		return 0x821F8194;
		  /* 821F8194h */ case    7:  		/* mr R29, R3 */
		/* 821F8194h case    7:*/		regs.R29 = regs.R3;
		/* 821F8194h case    7:*/		return 0x821F8198;
		  /* 821F8198h */ case    8:  		/* bl -604328 */
		/* 821F8198h case    8:*/		regs.LR = 0x821F819C; return 0x821648F0;
		/* 821F8198h case    8:*/		return 0x821F819C;
		  /* 821F819Ch */ case    9:  		/* addi R27, R3, 4 */
		/* 821F819Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4);
		/* 821F819Ch case    9:*/		return 0x821F81A0;
		  /* 821F81A0h */ case   10:  		/* ori R11, R3, 1 */
		/* 821F81A0h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821F81A0h case   10:*/		return 0x821F81A4;
		  /* 821F81A4h */ case   11:  		/* ori R10, R27, 1 */
		/* 821F81A4h case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R27,0x1);
		/* 821F81A4h case   11:*/		return 0x821F81A8;
	}
	return 0x821F81A8;
} // Block from 821F8178h-821F81A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F81A8h
// Function '?PushAttributeState@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F81A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F81A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F81A8);
		  /* 821F81A8h */ case    0:  		/* mr R28, R3 */
		/* 821F81A8h case    0:*/		regs.R28 = regs.R3;
		/* 821F81A8h case    0:*/		return 0x821F81AC;
		  /* 821F81ACh */ case    1:  		/* stw R11, <#[R3 + 4]> */
		/* 821F81ACh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F81ACh case    1:*/		return 0x821F81B0;
		  /* 821F81B0h */ case    2:  		/* stw R10, <#[R3]> */
		/* 821F81B0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821F81B0h case    2:*/		return 0x821F81B4;
		  /* 821F81B4h */ case    3:  		/* b 736 */
		/* 821F81B4h case    3:*/		return 0x821F8494;
		/* 821F81B4h case    3:*/		return 0x821F81B8;
		  /* 821F81B8h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 821F81B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821F81B8h case    4:*/		return 0x821F81BC;
		  /* 821F81BCh */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 821F81BCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F81BCh case    5:*/		return 0x821F81C0;
		  /* 821F81C0h */ case    6:  		/* bc 12, CR6_EQ, 416 */
		/* 821F81C0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821F8360;  }
		/* 821F81C0h case    6:*/		return 0x821F81C4;
		  /* 821F81C4h */ case    7:  		/* cmpwi CR6, R11, 14 */
		/* 821F81C4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821F81C4h case    7:*/		return 0x821F81C8;
		  /* 821F81C8h */ case    8:  		/* bc 12, CR6_EQ, 200 */
		/* 821F81C8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821F8290;  }
		/* 821F81C8h case    8:*/		return 0x821F81CC;
		  /* 821F81CCh */ case    9:  		/* cmpwi CR6, R11, 15 */
		/* 821F81CCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821F81CCh case    9:*/		return 0x821F81D0;
		  /* 821F81D0h */ case   10:  		/* bc 12, CR6_EQ, 88 */
		/* 821F81D0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821F8228;  }
		/* 821F81D0h case   10:*/		return 0x821F81D4;
		  /* 821F81D4h */ case   11:  		/* cmpwi CR6, R11, 28 */
		/* 821F81D4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821F81D4h case   11:*/		return 0x821F81D8;
		  /* 821F81D8h */ case   12:  		/* bc 4, CR6_EQ, 584 */
		/* 821F81D8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F8420;  }
		/* 821F81D8h case   12:*/		return 0x821F81DC;
		  /* 821F81DCh */ case   13:  		/* addi R5, R1, 80 */
		/* 821F81DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821F81DCh case   13:*/		return 0x821F81E0;
		  /* 821F81E0h */ case   14:  		/* mr R4, R31 */
		/* 821F81E0h case   14:*/		regs.R4 = regs.R31;
		/* 821F81E0h case   14:*/		return 0x821F81E4;
		  /* 821F81E4h */ case   15:  		/* mr R3, R29 */
		/* 821F81E4h case   15:*/		regs.R3 = regs.R29;
		/* 821F81E4h case   15:*/		return 0x821F81E8;
		  /* 821F81E8h */ case   16:  		/* bl -47616 */
		/* 821F81E8h case   16:*/		regs.LR = 0x821F81EC; return 0x821EC7E8;
		/* 821F81E8h case   16:*/		return 0x821F81EC;
		  /* 821F81ECh */ case   17:  		/* lwz R11, <#[R31 + 16]> */
		/* 821F81ECh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821F81ECh case   17:*/		return 0x821F81F0;
		  /* 821F81F0h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821F81F0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F81F0h case   18:*/		return 0x821F81F4;
		  /* 821F81F4h */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 821F81F4h case   19:*/		if ( regs.CR[6].eq ) { return 0x821F8218;  }
		/* 821F81F4h case   19:*/		return 0x821F81F8;
		  /* 821F81F8h */ case   20:  		/* cmplwi CR6, R11, 4 */
		/* 821F81F8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821F81F8h case   20:*/		return 0x821F81FC;
		  /* 821F81FCh */ case   21:  		/* bc 12, CR6_EQ, 28 */
		/* 821F81FCh case   21:*/		if ( regs.CR[6].eq ) { return 0x821F8218;  }
		/* 821F81FCh case   21:*/		return 0x821F8200;
		  /* 821F8200h */ case   22:  		/* cmplwi CR6, R11, 6 */
		/* 821F8200h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821F8200h case   22:*/		return 0x821F8204;
		  /* 821F8204h */ case   23:  		/* bc 12, CR6_EQ, 20 */
		/* 821F8204h case   23:*/		if ( regs.CR[6].eq ) { return 0x821F8218;  }
		/* 821F8204h case   23:*/		return 0x821F8208;
		  /* 821F8208h */ case   24:  		/* cmplwi CR6, R11, 7 */
		/* 821F8208h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821F8208h case   24:*/		return 0x821F820C;
		  /* 821F820Ch */ case   25:  		/* bc 4, CR6_GT, 668 */
		/* 821F820Ch case   25:*/		if ( !regs.CR[6].gt ) { return 0x821F84A8;  }
		/* 821F820Ch case   25:*/		return 0x821F8210;
		  /* 821F8210h */ case   26:  		/* cmplwi CR6, R11, 9 */
		/* 821F8210h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000009);
		/* 821F8210h case   26:*/		return 0x821F8214;
		  /* 821F8214h */ case   27:  		/* bc 12, CR6_GT, 660 */
		/* 821F8214h case   27:*/		if ( regs.CR[6].gt ) { return 0x821F84A8;  }
		/* 821F8214h case   27:*/		return 0x821F8218;
	}
	return 0x821F8218;
} // Block from 821F81A8h-821F8218h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821F8218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8218);
		  /* 821F8218h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821F8218h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821F8218h case    0:*/		return 0x821F821C;
		  /* 821F821Ch */ case    1:  		/* mulli R10, R3, 40 */
		/* 821F821Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R3,0x28);
		/* 821F821Ch case    1:*/		return 0x821F8220;
		  /* 821F8220h */ case    2:  		/* add R11, R10, R11 */
		/* 821F8220h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821F8220h case    2:*/		return 0x821F8224;
		  /* 821F8224h */ case    3:  		/* b 88 */
		/* 821F8224h case    3:*/		return 0x821F827C;
		/* 821F8224h case    3:*/		return 0x821F8228;
	}
	return 0x821F8228;
} // Block from 821F8218h-821F8228h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F8228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8228);
		  /* 821F8228h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 821F8228h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821F8228h case    0:*/		return 0x821F822C;
		  /* 821F822Ch */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 821F822Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821F822Ch case    1:*/		return 0x821F8230;
		  /* 821F8230h */ case    2:  		/* bc 12, CR6_LT, 496 */
		/* 821F8230h case    2:*/		if ( regs.CR[6].lt ) { return 0x821F8420;  }
		/* 821F8230h case    2:*/		return 0x821F8234;
		  /* 821F8234h */ case    3:  		/* cmplwi CR6, R11, 6 */
		/* 821F8234h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821F8234h case    3:*/		return 0x821F8238;
		  /* 821F8238h */ case    4:  		/* bc 4, CR6_EQ, 636 */
		/* 821F8238h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821F84B4;  }
		/* 821F8238h case    4:*/		return 0x821F823C;
		  /* 821F823Ch */ case    5:  		/* lwz R11, <#[R31 + 28]> */
		/* 821F823Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821F823Ch case    5:*/		return 0x821F8240;
		  /* 821F8240h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821F8240h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8240h case    6:*/		return 0x821F8244;
		  /* 821F8244h */ case    7:  		/* bc 12, CR6_EQ, 476 */
		/* 821F8244h case    7:*/		if ( regs.CR[6].eq ) { return 0x821F8420;  }
		/* 821F8244h case    7:*/		return 0x821F8248;
		  /* 821F8248h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 821F8248h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821F8248h case    8:*/		return 0x821F824C;
		  /* 821F824Ch */ case    9:  		/* lwz R10, <#[R29 + 16]> */
		/* 821F824Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 821F824Ch case    9:*/		return 0x821F8250;
		  /* 821F8250h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821F8250h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F8250h case   10:*/		return 0x821F8254;
		  /* 821F8254h */ case   11:  		/* bc 12, CR6_EQ, 620 */
		/* 821F8254h case   11:*/		if ( regs.CR[6].eq ) { return 0x821F84C0;  }
		/* 821F8254h case   11:*/		return 0x821F8258;
		  /* 821F8258h */ case   12:  		/* lwz R10, <#[R29 + 12]> */
		/* 821F8258h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821F8258h case   12:*/		return 0x821F825C;
		  /* 821F825Ch */ case   13:  		/* mulli R11, R11, 40 */
		/* 821F825Ch case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821F825Ch case   13:*/		return 0x821F8260;
		  /* 821F8260h */ case   14:  		/* add R10, R11, R10 */
		/* 821F8260h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821F8260h case   14:*/		return 0x821F8264;
		  /* 821F8264h */ case   15:  		/* lwz R10, <#[R10 + 4]> */
		/* 821F8264h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821F8264h case   15:*/		return 0x821F8268;
		  /* 821F8268h */ case   16:  		/* rlwinm R10, R10, 0, 25, 27 */
		/* 821F8268h case   16:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R10,regs.R10);
		/* 821F8268h case   16:*/		return 0x821F826C;
		  /* 821F826Ch */ case   17:  		/* cmplwi CR6, R10, 48 */
		/* 821F826Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000030);
		/* 821F826Ch case   17:*/		return 0x821F8270;
		  /* 821F8270h */ case   18:  		/* bc 12, CR6_EQ, 604 */
		/* 821F8270h case   18:*/		if ( regs.CR[6].eq ) { return 0x821F84CC;  }
		/* 821F8270h case   18:*/		return 0x821F8274;
		  /* 821F8274h */ case   19:  		/* lwz R10, <#[R29 + 12]> */
		/* 821F8274h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821F8274h case   19:*/		return 0x821F8278;
		  /* 821F8278h */ case   20:  		/* add R11, R11, R10 */
		/* 821F8278h case   20:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821F8278h case   20:*/		return 0x821F827C;
	}
	return 0x821F827C;
} // Block from 821F8228h-821F827Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821F827Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F827C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F827C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F827C);
		  /* 821F827Ch */ case    0:  		/* addi R10, R11, 4 */
		/* 821F827Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821F827Ch case    0:*/		return 0x821F8280;
		  /* 821F8280h */ case    1:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8280h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8280h case    1:*/		return 0x821F8284;
		  /* 821F8284h */ case    2:  		/* ori R10, R10, 4 */
		/* 821F8284h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821F8284h case    2:*/		return 0x821F8288;
		  /* 821F8288h */ case    3:  		/* stw R10, <#[R11 + 4]> */
		/* 821F8288h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8288h case    3:*/		return 0x821F828C;
		  /* 821F828Ch */ case    4:  		/* b 404 */
		/* 821F828Ch case    4:*/		return 0x821F8420;
		/* 821F828Ch case    4:*/		return 0x821F8290;
	}
	return 0x821F8290;
} // Block from 821F827Ch-821F8290h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F8290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8290);
		  /* 821F8290h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 821F8290h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821F8290h case    0:*/		return 0x821F8294;
		  /* 821F8294h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821F8294h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821F8294h case    1:*/		return 0x821F8298;
		  /* 821F8298h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821F8298h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F82C4;  }
		/* 821F8298h case    2:*/		return 0x821F829C;
		  /* 821F829Ch */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 821F829Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F829Ch case    3:*/		return 0x821F82A0;
		  /* 821F82A0h */ case    4:  		/* bc 4, CR6_GT, 568 */
		/* 821F82A0h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821F84D8;  }
		/* 821F82A0h case    4:*/		return 0x821F82A4;
		  /* 821F82A4h */ case    5:  		/* cmpwi CR6, R11, 3 */
		/* 821F82A4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821F82A4h case    5:*/		return 0x821F82A8;
		  /* 821F82A8h */ case    6:  		/* bc 4, CR6_GT, 28 */
		/* 821F82A8h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821F82C4;  }
		/* 821F82A8h case    6:*/		return 0x821F82AC;
		  /* 821F82ACh */ case    7:  		/* cmpwi CR6, R11, 25 */
		/* 821F82ACh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 821F82ACh case    7:*/		return 0x821F82B0;
		  /* 821F82B0h */ case    8:  		/* bc 4, CR6_GT, 552 */
		/* 821F82B0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821F84D8;  }
		/* 821F82B0h case    8:*/		return 0x821F82B4;
		  /* 821F82B4h */ case    9:  		/* cmpwi CR6, R11, 28 */
		/* 821F82B4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821F82B4h case    9:*/		return 0x821F82B8;
		  /* 821F82B8h */ case   10:  		/* bc 4, CR6_GT, 20 */
		/* 821F82B8h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821F82CC;  }
		/* 821F82B8h case   10:*/		return 0x821F82BC;
		  /* 821F82BCh */ case   11:  		/* cmpwi CR6, R11, 29 */
		/* 821F82BCh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 821F82BCh case   11:*/		return 0x821F82C0;
		  /* 821F82C0h */ case   12:  		/* bc 4, CR6_EQ, 536 */
		/* 821F82C0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F84D8;  }
		/* 821F82C0h case   12:*/		return 0x821F82C4;
	}
	return 0x821F82C4;
} // Block from 821F8290h-821F82C4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F82C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F82C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F82C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F82C4);
		  /* 821F82C4h */ case    0:  		/* lwz R31, <#[R31 + 32]> */
		/* 821F82C4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000020) );
		/* 821F82C4h case    0:*/		return 0x821F82C8;
		  /* 821F82C8h */ case    1:  		/* b 260 */
		/* 821F82C8h case    1:*/		return 0x821F83CC;
		/* 821F82C8h case    1:*/		return 0x821F82CC;
	}
	return 0x821F82CC;
} // Block from 821F82C4h-821F82CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F82CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F82CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F82CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F82CC);
		  /* 821F82CCh */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821F82CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821F82CCh case    0:*/		return 0x821F82D0;
	}
	return 0x821F82D0;
} // Block from 821F82CCh-821F82D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F82D0h
// Function '?GenerateDebugPrint@Compiler@D3DXShader@@AAAXPAVResultStack@2@PAVCNodeExpression@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F82D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F82D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F82D0);
		  /* 821F82D0h */ case    0:  		/* lwz R30, <#[R31 + 32]> */
		/* 821F82D0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 821F82D0h case    0:*/		return 0x821F82D4;
		  /* 821F82D4h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F82D4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F82D4h case    1:*/		return 0x821F82D8;
		  /* 821F82D8h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821F82D8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821F8300;  }
		/* 821F82D8h case    2:*/		return 0x821F82DC;
		  /* 821F82DCh */ case    3:  		/* lwz R11, <#[R28]> */
		/* 821F82DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821F82DCh case    3:*/		return 0x821F82E0;
		  /* 821F82E0h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F82E0h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F82E0h case    4:*/		return 0x821F82E4;
		  /* 821F82E4h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821F82E4h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821F82E4h case    5:*/		return 0x821F82E8;
		  /* 821F82E8h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821F82E8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821F8300;  }
		/* 821F82E8h case    6:*/		return 0x821F82EC;
		  /* 821F82ECh */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F82ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F82ECh case    7:*/		return 0x821F82F0;
		  /* 821F82F0h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F82F0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F82F0h case    8:*/		return 0x821F82F4;
		  /* 821F82F4h */ case    9:  		/* addi R11, R11, 1 */
		/* 821F82F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F82F4h case    9:*/		return 0x821F82F8;
		  /* 821F82F8h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821F82F8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F82F8h case   10:*/		return 0x821F82FC;
		  /* 821F82FCh */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821F82FCh case   11:*/		if ( !regs.CR[6].gt ) { return 0x821F830C;  }
		/* 821F82FCh case   11:*/		return 0x821F8300;
	}
	return 0x821F8300;
} // Block from 821F82D0h-821F8300h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F8300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8300);
		  /* 821F8300h */ case    0:  		/* li R4, 1 */
		/* 821F8300h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F8300h case    0:*/		return 0x821F8304;
		  /* 821F8304h */ case    1:  		/* mr R3, R28 */
		/* 821F8304h case    1:*/		regs.R3 = regs.R28;
		/* 821F8304h case    1:*/		return 0x821F8308;
		  /* 821F8308h */ case    2:  		/* bl -438848 */
		/* 821F8308h case    2:*/		regs.LR = 0x821F830C; return 0x8218D0C8;
		/* 821F8308h case    2:*/		return 0x821F830C;
	}
	return 0x821F830C;
} // Block from 821F8300h-821F830Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F830Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F830C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F830C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F830C);
		  /* 821F830Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F830Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F830Ch case    0:*/		return 0x821F8310;
		  /* 821F8310h */ case    1:  		/* addi R10, R11, 4 */
		/* 821F8310h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821F8310h case    1:*/		return 0x821F8314;
		  /* 821F8314h */ case    2:  		/* addi R9, R11, 1 */
		/* 821F8314h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821F8314h case    2:*/		return 0x821F8318;
		  /* 821F8318h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821F8318h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821F8318h case    3:*/		return 0x821F831C;
		  /* 821F831Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821F831Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821F831Ch case    4:*/		return 0x821F8320;
		  /* 821F8320h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821F8320h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821F8320h case    5:*/		return 0x821F8324;
		  /* 821F8324h */ case    6:  		/* lwz R11, <#[R26 + 4]> */
		/* 821F8324h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821F8324h case    6:*/		return 0x821F8328;
		  /* 821F8328h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F8328h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F8328h case    7:*/		return 0x821F832C;
		  /* 821F832Ch */ case    8:  		/* lwz R31, <#[R31 + 36]> */
		/* 821F832Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000024) );
		/* 821F832Ch case    8:*/		return 0x821F8330;
		  /* 821F8330h */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 821F8330h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821F8358;  }
		/* 821F8330h case    9:*/		return 0x821F8334;
		  /* 821F8334h */ case   10:  		/* lwz R11, <#[R26]> */
		/* 821F8334h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821F8334h case   10:*/		return 0x821F8338;
		  /* 821F8338h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F8338h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F8338h case   11:*/		return 0x821F833C;
		  /* 821F833Ch */ case   12:  		/* addic. R3, R11, -4 */
		/* 821F833Ch case   12:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821F833Ch case   12:*/		return 0x821F8340;
		  /* 821F8340h */ case   13:  		/* bc 12, CR0_EQ, 24 */
		/* 821F8340h case   13:*/		if ( regs.CR[0].eq ) { return 0x821F8358;  }
		/* 821F8340h case   13:*/		return 0x821F8344;
		  /* 821F8344h */ case   14:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F8344h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F8344h case   14:*/		return 0x821F8348;
		  /* 821F8348h */ case   15:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F8348h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F8348h case   15:*/		return 0x821F834C;
		  /* 821F834Ch */ case   16:  		/* addi R11, R11, 1 */
		/* 821F834Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F834Ch case   16:*/		return 0x821F8350;
		  /* 821F8350h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 821F8350h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F8350h case   17:*/		return 0x821F8354;
		  /* 821F8354h */ case   18:  		/* bc 4, CR6_GT, 180 */
		/* 821F8354h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821F8408;  }
		/* 821F8354h case   18:*/		return 0x821F8358;
	}
	return 0x821F8358;
} // Block from 821F830Ch-821F8358h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821F8358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8358);
		  /* 821F8358h */ case    0:  		/* mr R3, R26 */
		/* 821F8358h case    0:*/		regs.R3 = regs.R26;
		/* 821F8358h case    0:*/		return 0x821F835C;
		  /* 821F835Ch */ case    1:  		/* b 164 */
		/* 821F835Ch case    1:*/		return 0x821F8400;
		/* 821F835Ch case    1:*/		return 0x821F8360;
	}
	return 0x821F8360;
} // Block from 821F8358h-821F8360h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8360);
		  /* 821F8360h */ case    0:  		/* lwz R30, <#[R31 + 8]> */
		/* 821F8360h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821F8360h case    0:*/		return 0x821F8364;
		  /* 821F8364h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821F8364h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F8364h case    1:*/		return 0x821F8368;
		  /* 821F8368h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 821F8368h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F83C0;  }
		/* 821F8368h case    2:*/		return 0x821F836C;
		  /* 821F836Ch */ case    3:  		/* lwz R11, <#[R27]> */
		/* 821F836Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821F836Ch case    3:*/		return 0x821F8370;
		  /* 821F8370h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F8370h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F8370h case    4:*/		return 0x821F8374;
		  /* 821F8374h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821F8374h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821F839C;  }
		/* 821F8374h case    5:*/		return 0x821F8378;
		  /* 821F8378h */ case    6:  		/* lwz R11, <#[R28]> */
		/* 821F8378h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821F8378h case    6:*/		return 0x821F837C;
		  /* 821F837Ch */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F837Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F837Ch case    7:*/		return 0x821F8380;
		  /* 821F8380h */ case    8:  		/* addic. R3, R11, -4 */
		/* 821F8380h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821F8380h case    8:*/		return 0x821F8384;
		  /* 821F8384h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821F8384h case    9:*/		if ( regs.CR[0].eq ) { return 0x821F839C;  }
		/* 821F8384h case    9:*/		return 0x821F8388;
		  /* 821F8388h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F8388h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F8388h case   10:*/		return 0x821F838C;
		  /* 821F838Ch */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F838Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F838Ch case   11:*/		return 0x821F8390;
		  /* 821F8390h */ case   12:  		/* addi R11, R11, 1 */
		/* 821F8390h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F8390h case   12:*/		return 0x821F8394;
		  /* 821F8394h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821F8394h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F8394h case   13:*/		return 0x821F8398;
		  /* 821F8398h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 821F8398h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821F83A8;  }
		/* 821F8398h case   14:*/		return 0x821F839C;
	}
	return 0x821F839C;
} // Block from 821F8360h-821F839Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F839Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F839C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F839C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F839C);
		  /* 821F839Ch */ case    0:  		/* li R4, 1 */
		/* 821F839Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F839Ch case    0:*/		return 0x821F83A0;
		  /* 821F83A0h */ case    1:  		/* mr R3, R28 */
		/* 821F83A0h case    1:*/		regs.R3 = regs.R28;
		/* 821F83A0h case    1:*/		return 0x821F83A4;
		  /* 821F83A4h */ case    2:  		/* bl -439004 */
		/* 821F83A4h case    2:*/		regs.LR = 0x821F83A8; return 0x8218D0C8;
		/* 821F83A4h case    2:*/		return 0x821F83A8;
	}
	return 0x821F83A8;
} // Block from 821F839Ch-821F83A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F83A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F83A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F83A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F83A8);
		  /* 821F83A8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F83A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F83A8h case    0:*/		return 0x821F83AC;
		  /* 821F83ACh */ case    1:  		/* addi R10, R11, 4 */
		/* 821F83ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821F83ACh case    1:*/		return 0x821F83B0;
		  /* 821F83B0h */ case    2:  		/* addi R9, R11, 1 */
		/* 821F83B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821F83B0h case    2:*/		return 0x821F83B4;
		  /* 821F83B4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821F83B4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821F83B4h case    3:*/		return 0x821F83B8;
		  /* 821F83B8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821F83B8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821F83B8h case    4:*/		return 0x821F83BC;
		  /* 821F83BCh */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821F83BCh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821F83BCh case    5:*/		return 0x821F83C0;
	}
	return 0x821F83C0;
} // Block from 821F83A8h-821F83C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F83C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F83C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F83C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F83C0);
		  /* 821F83C0h */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 821F83C0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F83C0h case    0:*/		return 0x821F83C4;
		  /* 821F83C4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821F83C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F83C4h case    1:*/		return 0x821F83C8;
		  /* 821F83C8h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 821F83C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F8420;  }
		/* 821F83C8h case    2:*/		return 0x821F83CC;
	}
	return 0x821F83CC;
} // Block from 821F83C0h-821F83CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F83CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F83CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F83CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F83CC);
		  /* 821F83CCh */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821F83CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821F83CCh case    0:*/		return 0x821F83D0;
		  /* 821F83D0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F83D0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F83D0h case    1:*/		return 0x821F83D4;
		  /* 821F83D4h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821F83D4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821F83FC;  }
		/* 821F83D4h case    2:*/		return 0x821F83D8;
		  /* 821F83D8h */ case    3:  		/* lwz R11, <#[R28]> */
		/* 821F83D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821F83D8h case    3:*/		return 0x821F83DC;
		  /* 821F83DCh */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F83DCh case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F83DCh case    4:*/		return 0x821F83E0;
		  /* 821F83E0h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821F83E0h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821F83E0h case    5:*/		return 0x821F83E4;
		  /* 821F83E4h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821F83E4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821F83FC;  }
		/* 821F83E4h case    6:*/		return 0x821F83E8;
		  /* 821F83E8h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F83E8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F83E8h case    7:*/		return 0x821F83EC;
		  /* 821F83ECh */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F83ECh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F83ECh case    8:*/		return 0x821F83F0;
		  /* 821F83F0h */ case    9:  		/* addi R11, R11, 1 */
		/* 821F83F0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F83F0h case    9:*/		return 0x821F83F4;
		  /* 821F83F4h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821F83F4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F83F4h case   10:*/		return 0x821F83F8;
		  /* 821F83F8h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821F83F8h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821F8408;  }
		/* 821F83F8h case   11:*/		return 0x821F83FC;
	}
	return 0x821F83FC;
} // Block from 821F83CCh-821F83FCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F83FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F83FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F83FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F83FC);
		  /* 821F83FCh */ case    0:  		/* mr R3, R28 */
		/* 821F83FCh case    0:*/		regs.R3 = regs.R28;
		/* 821F83FCh case    0:*/		return 0x821F8400;
	}
	return 0x821F8400;
} // Block from 821F83FCh-821F8400h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F8400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8400);
		  /* 821F8400h */ case    0:  		/* li R4, 1 */
		/* 821F8400h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F8400h case    0:*/		return 0x821F8404;
		  /* 821F8404h */ case    1:  		/* bl -439100 */
		/* 821F8404h case    1:*/		regs.LR = 0x821F8408; return 0x8218D0C8;
		/* 821F8404h case    1:*/		return 0x821F8408;
	}
	return 0x821F8408;
} // Block from 821F8400h-821F8408h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8408);
		  /* 821F8408h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F8408h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F8408h case    0:*/		return 0x821F840C;
		  /* 821F840Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 821F840Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821F840Ch case    1:*/		return 0x821F8410;
		  /* 821F8410h */ case    2:  		/* addi R9, R11, 1 */
		/* 821F8410h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821F8410h case    2:*/		return 0x821F8414;
		  /* 821F8414h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821F8414h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821F8414h case    3:*/		return 0x821F8418;
		  /* 821F8418h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821F8418h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821F8418h case    4:*/		return 0x821F841C;
		  /* 821F841Ch */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821F841Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821F841Ch case    5:*/		return 0x821F8420;
	}
	return 0x821F8420;
} // Block from 821F8408h-821F8420h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F8420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8420);
		  /* 821F8420h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821F8420h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821F8420h case    0:*/		return 0x821F8424;
		  /* 821F8424h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821F8424h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821F8424h case    1:*/		return 0x821F8428;
		  /* 821F8428h */ case    2:  		/* bc 4, CR0_EQ, 188 */
		/* 821F8428h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821F84E4;  }
		/* 821F8428h case    2:*/		return 0x821F842C;
		  /* 821F842Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821F842Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821F842Ch case    3:*/		return 0x821F8430;
		  /* 821F8430h */ case    4:  		/* bc 12, CR0_EQ, 180 */
		/* 821F8430h case    4:*/		if ( regs.CR[0].eq ) { return 0x821F84E4;  }
		/* 821F8430h case    4:*/		return 0x821F8434;
		  /* 821F8434h */ case    5:  		/* lwz R11, <#[R28]> */
		/* 821F8434h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821F8434h case    5:*/		return 0x821F8438;
		  /* 821F8438h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F8438h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F8438h case    6:*/		return 0x821F843C;
		  /* 821F843Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 821F843Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821F843Ch case    7:*/		return 0x821F8440;
		  /* 821F8440h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F8440h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8440h case    8:*/		return 0x821F8444;
		  /* 821F8444h */ case    9:  		/* addi R10, R11, 3 */
		/* 821F8444h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821F8444h case    9:*/		return 0x821F8448;
		  /* 821F8448h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821F8448h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F8448h case   10:*/		return 0x821F844C;
		  /* 821F844Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821F844Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821F844Ch case   11:*/		return 0x821F8450;
		  /* 821F8450h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821F8450h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821F8450h case   12:*/		return 0x821F8454;
		  /* 821F8454h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821F8454h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821F8454h case   13:*/		return 0x821F8458;
		  /* 821F8458h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821F8458h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821F8494;  }
		/* 821F8458h case   14:*/		return 0x821F845C;
		  /* 821F845Ch */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821F845Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821F845Ch case   15:*/		return 0x821F8460;
		  /* 821F8460h */ case   16:  		/* mr R3, R28 */
		/* 821F8460h case   16:*/		regs.R3 = regs.R28;
		/* 821F8460h case   16:*/		return 0x821F8464;
		  /* 821F8464h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8464h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8464h case   17:*/		return 0x821F8468;
		  /* 821F8468h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821F8468h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821F8468h case   18:*/		return 0x821F846C;
		  /* 821F846Ch */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F846Ch case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F846Ch case   19:*/		return 0x821F8470;
		  /* 821F8470h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821F8470h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821F8470h case   20:*/		return 0x821F8474;
		  /* 821F8474h */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821F8474h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F8474h case   21:*/		return 0x821F8478;
		  /* 821F8478h */ case   22:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F8478h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F8478h case   22:*/		return 0x821F847C;
		  /* 821F847Ch */ case   23:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F847Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F847Ch case   23:*/		return 0x821F8480;
		  /* 821F8480h */ case   24:  		/* stw R11, <#[R10]> */
		/* 821F8480h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821F8480h case   24:*/		return 0x821F8484;
		  /* 821F8484h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821F8484h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821F8484h case   25:*/		return 0x821F8488;
		  /* 821F8488h */ case   26:  		/* addi R11, R11, 4 */
		/* 821F8488h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821F8488h case   26:*/		return 0x821F848C;
		  /* 821F848Ch */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821F848Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821F848Ch case   27:*/		return 0x821F8490;
		  /* 821F8490h */ case   28:  		/* bl -681608 */
		/* 821F8490h case   28:*/		regs.LR = 0x821F8494; return 0x82151E08;
		/* 821F8490h case   28:*/		return 0x821F8494;
	}
	return 0x821F8494;
} // Block from 821F8420h-821F8494h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821F8494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8494);
		  /* 821F8494h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821F8494h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F8494h case    0:*/		return 0x821F8498;
		  /* 821F8498h */ case    1:  		/* bc 4, CR6_EQ, -736 */
		/* 821F8498h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821F81B8;  }
		/* 821F8498h case    1:*/		return 0x821F849C;
		  /* 821F849Ch */ case    2:  		/* li R4, 4801 */
		/* 821F849Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F849Ch case    2:*/		return 0x821F84A0;
		  /* 821F84A0h */ case    3:  		/* mr R3, R29 */
		/* 821F84A0h case    3:*/		regs.R3 = regs.R29;
		/* 821F84A0h case    3:*/		return 0x821F84A4;
		  /* 821F84A4h */ case    4:  		/* bl -681532 */
		/* 821F84A4h case    4:*/		regs.LR = 0x821F84A8; return 0x82151E68;
		/* 821F84A4h case    4:*/		return 0x821F84A8;
	}
	return 0x821F84A8;
} // Block from 821F8494h-821F84A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F84A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F84A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F84A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F84A8);
		  /* 821F84A8h */ case    0:  		/* li R4, 3514 */
		/* 821F84A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 821F84A8h case    0:*/		return 0x821F84AC;
		  /* 821F84ACh */ case    1:  		/* mr R3, R29 */
		/* 821F84ACh case    1:*/		regs.R3 = regs.R29;
		/* 821F84ACh case    1:*/		return 0x821F84B0;
		  /* 821F84B0h */ case    2:  		/* bl -681544 */
		/* 821F84B0h case    2:*/		regs.LR = 0x821F84B4; return 0x82151E68;
		/* 821F84B0h case    2:*/		return 0x821F84B4;
	}
	return 0x821F84B4;
} // Block from 821F84A8h-821F84B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F84B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F84B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F84B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F84B4);
		  /* 821F84B4h */ case    0:  		/* li R4, 4801 */
		/* 821F84B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F84B4h case    0:*/		return 0x821F84B8;
		  /* 821F84B8h */ case    1:  		/* mr R3, R29 */
		/* 821F84B8h case    1:*/		regs.R3 = regs.R29;
		/* 821F84B8h case    1:*/		return 0x821F84BC;
		  /* 821F84BCh */ case    2:  		/* bl -681556 */
		/* 821F84BCh case    2:*/		regs.LR = 0x821F84C0; return 0x82151E68;
		/* 821F84BCh case    2:*/		return 0x821F84C0;
	}
	return 0x821F84C0;
} // Block from 821F84B4h-821F84C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F84C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F84C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F84C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F84C0);
		  /* 821F84C0h */ case    0:  		/* li R4, 4801 */
		/* 821F84C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F84C0h case    0:*/		return 0x821F84C4;
		  /* 821F84C4h */ case    1:  		/* mr R3, R29 */
		/* 821F84C4h case    1:*/		regs.R3 = regs.R29;
		/* 821F84C4h case    1:*/		return 0x821F84C8;
		  /* 821F84C8h */ case    2:  		/* bl -681568 */
		/* 821F84C8h case    2:*/		regs.LR = 0x821F84CC; return 0x82151E68;
		/* 821F84C8h case    2:*/		return 0x821F84CC;
	}
	return 0x821F84CC;
} // Block from 821F84C0h-821F84CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F84CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F84CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F84CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F84CC);
		  /* 821F84CCh */ case    0:  		/* li R4, 3514 */
		/* 821F84CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 821F84CCh case    0:*/		return 0x821F84D0;
		  /* 821F84D0h */ case    1:  		/* mr R3, R29 */
		/* 821F84D0h case    1:*/		regs.R3 = regs.R29;
		/* 821F84D0h case    1:*/		return 0x821F84D4;
		  /* 821F84D4h */ case    2:  		/* bl -681580 */
		/* 821F84D4h case    2:*/		regs.LR = 0x821F84D8; return 0x82151E68;
		/* 821F84D4h case    2:*/		return 0x821F84D8;
	}
	return 0x821F84D8;
} // Block from 821F84CCh-821F84D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F84D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F84D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F84D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F84D8);
		  /* 821F84D8h */ case    0:  		/* li R4, 3514 */
		/* 821F84D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDBA);
		/* 821F84D8h case    0:*/		return 0x821F84DC;
		  /* 821F84DCh */ case    1:  		/* mr R3, R29 */
		/* 821F84DCh case    1:*/		regs.R3 = regs.R29;
		/* 821F84DCh case    1:*/		return 0x821F84E0;
		  /* 821F84E0h */ case    2:  		/* bl -681592 */
		/* 821F84E0h case    2:*/		regs.LR = 0x821F84E4; return 0x82151E68;
		/* 821F84E0h case    2:*/		return 0x821F84E4;
	}
	return 0x821F84E4;
} // Block from 821F84D8h-821F84E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F84E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F84E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F84E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F84E4);
		  /* 821F84E4h */ case    0:  		/* lwz R10, <#[R29 + 976]> */
		/* 821F84E4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x000003D0) );
		/* 821F84E4h case    0:*/		return 0x821F84E8;
		  /* 821F84E8h */ case    1:  		/* addi R11, R29, 972 */
		/* 821F84E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x3CC);
		/* 821F84E8h case    1:*/		return 0x821F84EC;
		  /* 821F84ECh */ case    2:  		/* stw R10, <#[R28]> */
		/* 821F84ECh case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821F84ECh case    2:*/		return 0x821F84F0;
		  /* 821F84F0h */ case    3:  		/* stw R28, <#[R29 + 976]> */
		/* 821F84F0h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x000003D0) );
		/* 821F84F0h case    3:*/		return 0x821F84F4;
		  /* 821F84F4h */ case    4:  		/* addi R1, R1, 144 */
		/* 821F84F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821F84F4h case    4:*/		return 0x821F84F8;
		  /* 821F84F8h */ case    5:  		/* b -1471064 */
		/* 821F84F8h case    5:*/		return 0x820912A0;
		/* 821F84F8h case    5:*/		return 0x821F84FC;
		  /* 821F84FCh */ case    6:  		/* nop */
		/* 821F84FCh case    6:*/		cpu::op::nop();
		/* 821F84FCh case    6:*/		return 0x821F8500;
	}
	return 0x821F8500;
} // Block from 821F84E4h-821F8500h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F8500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8500);
		  /* 821F8500h */ case    0:  		/* mfspr R12, LR */
		/* 821F8500h case    0:*/		regs.R12 = regs.LR;
		/* 821F8500h case    0:*/		return 0x821F8504;
		  /* 821F8504h */ case    1:  		/* bl -1471172 */
		/* 821F8504h case    1:*/		regs.LR = 0x821F8508; return 0x82091240;
		/* 821F8504h case    1:*/		return 0x821F8508;
		  /* 821F8508h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821F8508h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821F8508h case    2:*/		return 0x821F850C;
		  /* 821F850Ch */ case    3:  		/* mr R26, R3 */
		/* 821F850Ch case    3:*/		regs.R26 = regs.R3;
		/* 821F850Ch case    3:*/		return 0x821F8510;
		  /* 821F8510h */ case    4:  		/* mr R23, R4 */
		/* 821F8510h case    4:*/		regs.R23 = regs.R4;
		/* 821F8510h case    4:*/		return 0x821F8514;
		  /* 821F8514h */ case    5:  		/* mr R29, R5 */
		/* 821F8514h case    5:*/		regs.R29 = regs.R5;
		/* 821F8514h case    5:*/		return 0x821F8518;
		  /* 821F8518h */ case    6:  		/* mr R22, R6 */
		/* 821F8518h case    6:*/		regs.R22 = regs.R6;
		/* 821F8518h case    6:*/		return 0x821F851C;
		  /* 821F851Ch */ case    7:  		/* mr R28, R7 */
		/* 821F851Ch case    7:*/		regs.R28 = regs.R7;
		/* 821F851Ch case    7:*/		return 0x821F8520;
		  /* 821F8520h */ case    8:  		/* mr R27, R8 */
		/* 821F8520h case    8:*/		regs.R27 = regs.R8;
		/* 821F8520h case    8:*/		return 0x821F8524;
		  /* 821F8524h */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 821F8524h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821F8524h case    9:*/		return 0x821F8528;
		  /* 821F8528h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 821F8528h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821F8534;  }
		/* 821F8528h case   10:*/		return 0x821F852C;
		  /* 821F852Ch */ case   11:  		/* li R3, 0 */
		/* 821F852Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F852Ch case   11:*/		return 0x821F8530;
		  /* 821F8530h */ case   12:  		/* b 504 */
		/* 821F8530h case   12:*/		return 0x821F8728;
		/* 821F8530h case   12:*/		return 0x821F8534;
	}
	return 0x821F8534;
} // Block from 821F8500h-821F8534h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F8534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8534);
		  /* 821F8534h */ case    0:  		/* li R5, 15 */
		/* 821F8534h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821F8534h case    0:*/		return 0x821F8538;
		  /* 821F8538h */ case    1:  		/* li R4, 8 */
		/* 821F8538h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821F8538h case    1:*/		return 0x821F853C;
		  /* 821F853Ch */ case    2:  		/* mr R3, R26 */
		/* 821F853Ch case    2:*/		regs.R3 = regs.R26;
		/* 821F853Ch case    2:*/		return 0x821F8540;
		  /* 821F8540h */ case    3:  		/* li R24, 0 */
		/* 821F8540h case    3:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821F8540h case    3:*/		return 0x821F8544;
		  /* 821F8544h */ case    4:  		/* bl -605268 */
		/* 821F8544h case    4:*/		regs.LR = 0x821F8548; return 0x821648F0;
		/* 821F8544h case    4:*/		return 0x821F8548;
		  /* 821F8548h */ case    5:  		/* addi R25, R3, 4 */
		/* 821F8548h case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 821F8548h case    5:*/		return 0x821F854C;
		  /* 821F854Ch */ case    6:  		/* ori R11, R3, 1 */
		/* 821F854Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821F854Ch case    6:*/		return 0x821F8550;
		  /* 821F8550h */ case    7:  		/* ori R10, R25, 1 */
		/* 821F8550h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R25,0x1);
		/* 821F8550h case    7:*/		return 0x821F8554;
		  /* 821F8554h */ case    8:  		/* mr R31, R3 */
		/* 821F8554h case    8:*/		regs.R31 = regs.R3;
		/* 821F8554h case    8:*/		return 0x821F8558;
		  /* 821F8558h */ case    9:  		/* stw R11, <#[R3 + 4]> */
		/* 821F8558h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F8558h case    9:*/		return 0x821F855C;
		  /* 821F855Ch */ case   10:  		/* stw R10, <#[R3]> */
		/* 821F855Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821F855Ch case   10:*/		return 0x821F8560;
		  /* 821F8560h */ case   11:  		/* lwz R30, <#[R29 + 8]> */
		/* 821F8560h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000008) );
		/* 821F8560h case   11:*/		return 0x821F8564;
		  /* 821F8564h */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 821F8564h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F8564h case   12:*/		return 0x821F8568;
		  /* 821F8568h */ case   13:  		/* bc 12, CR6_EQ, 156 */
		/* 821F8568h case   13:*/		if ( regs.CR[6].eq ) { return 0x821F8604;  }
		/* 821F8568h case   13:*/		return 0x821F856C;
		  /* 821F856Ch */ case   14:  		/* cmplwi CR6, R28, 0 */
		/* 821F856Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821F856Ch case   14:*/		return 0x821F8570;
		  /* 821F8570h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 821F8570h case   15:*/		if ( regs.CR[6].eq ) { return 0x821F857C;  }
		/* 821F8570h case   15:*/		return 0x821F8574;
		  /* 821F8574h */ case   16:  		/* addi R28, R28, -1 */
		/* 821F8574h case   16:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821F8574h case   16:*/		return 0x821F8578;
		  /* 821F8578h */ case   17:  		/* b 140 */
		/* 821F8578h case   17:*/		return 0x821F8604;
		/* 821F8578h case   17:*/		return 0x821F857C;
	}
	return 0x821F857C;
} // Block from 821F8534h-821F857Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F857Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F857C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F857C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F857C);
		  /* 821F857Ch */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821F857Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821F857Ch case    0:*/		return 0x821F8580;
		  /* 821F8580h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821F8580h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F8598;  }
		/* 821F8580h case    1:*/		return 0x821F8584;
		  /* 821F8584h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F8584h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F8584h case    2:*/		return 0x821F8588;
		  /* 821F8588h */ case    3:  		/* addi R11, R11, -12 */
		/* 821F8588h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF4);
		/* 821F8588h case    3:*/		return 0x821F858C;
		  /* 821F858Ch */ case    4:  		/* addic R11, R11, -1 */
		/* 821F858Ch case    4:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F858Ch case    4:*/		return 0x821F8590;
		  /* 821F8590h */ case    5:  		/* subfe R11, R11, R11 */
		/* 821F8590h case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821F8590h case    5:*/		return 0x821F8594;
		  /* 821F8594h */ case    6:  		/* and R30, R11, R30 */
		/* 821F8594h case    6:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 821F8594h case    6:*/		return 0x821F8598;
	}
	return 0x821F8598;
} // Block from 821F857Ch-821F8598h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F8598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8598);
		  /* 821F8598h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821F8598h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F8598h case    0:*/		return 0x821F859C;
		  /* 821F859Ch */ case    1:  		/* bc 12, CR6_EQ, 104 */
		/* 821F859Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821F8604;  }
		/* 821F859Ch case    1:*/		return 0x821F85A0;
		  /* 821F85A0h */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 821F85A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821F85A0h case    2:*/		return 0x821F85A4;
		  /* 821F85A4h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821F85A4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821F8600;  }
		/* 821F85A4h case    3:*/		return 0x821F85A8;
		  /* 821F85A8h */ case    4:  		/* lwz R11, <#[R25]> */
		/* 821F85A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821F85A8h case    4:*/		return 0x821F85AC;
		  /* 821F85ACh */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F85ACh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F85ACh case    5:*/		return 0x821F85B0;
		  /* 821F85B0h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 821F85B0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821F85D8;  }
		/* 821F85B0h case    6:*/		return 0x821F85B4;
		  /* 821F85B4h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821F85B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821F85B4h case    7:*/		return 0x821F85B8;
		  /* 821F85B8h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F85B8h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F85B8h case    8:*/		return 0x821F85BC;
		  /* 821F85BCh */ case    9:  		/* addic. R3, R11, -4 */
		/* 821F85BCh case    9:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821F85BCh case    9:*/		return 0x821F85C0;
		  /* 821F85C0h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 821F85C0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821F85D8;  }
		/* 821F85C0h case   10:*/		return 0x821F85C4;
		  /* 821F85C4h */ case   11:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F85C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F85C4h case   11:*/		return 0x821F85C8;
		  /* 821F85C8h */ case   12:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F85C8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F85C8h case   12:*/		return 0x821F85CC;
		  /* 821F85CCh */ case   13:  		/* addi R11, R11, 1 */
		/* 821F85CCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F85CCh case   13:*/		return 0x821F85D0;
		  /* 821F85D0h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 821F85D0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F85D0h case   14:*/		return 0x821F85D4;
		  /* 821F85D4h */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 821F85D4h case   15:*/		if ( !regs.CR[6].gt ) { return 0x821F85E4;  }
		/* 821F85D4h case   15:*/		return 0x821F85D8;
	}
	return 0x821F85D8;
} // Block from 821F8598h-821F85D8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F85D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F85D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F85D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F85D8);
		  /* 821F85D8h */ case    0:  		/* li R4, 1 */
		/* 821F85D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F85D8h case    0:*/		return 0x821F85DC;
		  /* 821F85DCh */ case    1:  		/* mr R3, R31 */
		/* 821F85DCh case    1:*/		regs.R3 = regs.R31;
		/* 821F85DCh case    1:*/		return 0x821F85E0;
		  /* 821F85E0h */ case    2:  		/* bl -439576 */
		/* 821F85E0h case    2:*/		regs.LR = 0x821F85E4; return 0x8218D0C8;
		/* 821F85E0h case    2:*/		return 0x821F85E4;
	}
	return 0x821F85E4;
} // Block from 821F85D8h-821F85E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F85E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F85E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F85E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F85E4);
		  /* 821F85E4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821F85E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821F85E4h case    0:*/		return 0x821F85E8;
		  /* 821F85E8h */ case    1:  		/* addi R10, R11, 4 */
		/* 821F85E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821F85E8h case    1:*/		return 0x821F85EC;
		  /* 821F85ECh */ case    2:  		/* addi R9, R11, 1 */
		/* 821F85ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821F85ECh case    2:*/		return 0x821F85F0;
		  /* 821F85F0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821F85F0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821F85F0h case    3:*/		return 0x821F85F4;
		  /* 821F85F4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821F85F4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821F85F4h case    4:*/		return 0x821F85F8;
		  /* 821F85F8h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821F85F8h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821F85F8h case    5:*/		return 0x821F85FC;
		  /* 821F85FCh */ case    6:  		/* b 8 */
		/* 821F85FCh case    6:*/		return 0x821F8604;
		/* 821F85FCh case    6:*/		return 0x821F8600;
	}
	return 0x821F8600;
} // Block from 821F85E4h-821F8600h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F8600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8600);
		  /* 821F8600h */ case    0:  		/* mr R24, R30 */
		/* 821F8600h case    0:*/		regs.R24 = regs.R30;
		/* 821F8600h case    0:*/		return 0x821F8604;
	}
	return 0x821F8604;
} // Block from 821F8600h-821F8604h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F8604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8604);
		  /* 821F8604h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821F8604h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821F8604h case    0:*/		return 0x821F8608;
		  /* 821F8608h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F8608h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8608h case    1:*/		return 0x821F860C;
		  /* 821F860Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821F860Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821F861C;  }
		/* 821F860Ch case    2:*/		return 0x821F8610;
		  /* 821F8610h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8610h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8610h case    3:*/		return 0x821F8614;
		  /* 821F8614h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821F8614h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F8614h case    4:*/		return 0x821F8618;
		  /* 821F8618h */ case    5:  		/* bc 4, CR6_EQ, 156 */
		/* 821F8618h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F86B4;  }
		/* 821F8618h case    5:*/		return 0x821F861C;
	}
	return 0x821F861C;
} // Block from 821F8604h-821F861Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F861Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F861C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F861C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F861C);
		  /* 821F861Ch */ case    0:  		/* mr R29, R11 */
		/* 821F861Ch case    0:*/		regs.R29 = regs.R11;
		/* 821F861Ch case    0:*/		return 0x821F8620;
		  /* 821F8620h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F8620h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8620h case    1:*/		return 0x821F8624;
		  /* 821F8624h */ case    2:  		/* bc 4, CR6_EQ, -196 */
		/* 821F8624h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F8560;  }
		/* 821F8624h case    2:*/		return 0x821F8628;
		  /* 821F8628h */ case    3:  		/* lwz R11, <#[R25]> */
		/* 821F8628h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821F8628h case    3:*/		return 0x821F862C;
		  /* 821F862Ch */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821F862Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821F862Ch case    4:*/		return 0x821F8630;
		  /* 821F8630h */ case    5:  		/* bc 4, CR0_EQ, 228 */
		/* 821F8630h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821F8714;  }
		/* 821F8630h case    5:*/		return 0x821F8634;
		  /* 821F8634h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821F8634h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821F8634h case    6:*/		return 0x821F8638;
		  /* 821F8638h */ case    7:  		/* bc 12, CR0_EQ, 220 */
		/* 821F8638h case    7:*/		if ( regs.CR[0].eq ) { return 0x821F8714;  }
		/* 821F8638h case    7:*/		return 0x821F863C;
		  /* 821F863Ch */ case    8:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821F863Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821F863Ch case    8:*/		return 0x821F8640;
		  /* 821F8640h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821F8640h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821F8640h case    9:*/		return 0x821F8644;
		  /* 821F8644h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F8644h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F8644h case   10:*/		return 0x821F8648;
		  /* 821F8648h */ case   11:  		/* addi R4, R11, -4 */
		/* 821F8648h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821F8648h case   11:*/		return 0x821F864C;
		  /* 821F864Ch */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F864Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F864Ch case   12:*/		return 0x821F8650;
		  /* 821F8650h */ case   13:  		/* addi R10, R11, 3 */
		/* 821F8650h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821F8650h case   13:*/		return 0x821F8654;
		  /* 821F8654h */ case   14:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821F8654h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821F8654h case   14:*/		return 0x821F8658;
		  /* 821F8658h */ case   15:  		/* lwzx R30, <#[R10 + R4]> */
		/* 821F8658h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821F8658h case   15:*/		return 0x821F865C;
		  /* 821F865Ch */ case   16:  		/* bc 12, CR0_EQ, 100 */
		/* 821F865Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x821F86C0;  }
		/* 821F865Ch case   16:*/		return 0x821F8660;
		  /* 821F8660h */ case   17:  		/* addic. R11, R11, -1 */
		/* 821F8660h case   17:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F8660h case   17:*/		return 0x821F8664;
		  /* 821F8664h */ case   18:  		/* stw R11, <#[R4 + 8]> */
		/* 821F8664h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821F8664h case   18:*/		return 0x821F8668;
		  /* 821F8668h */ case   19:  		/* bc 4, CR0_EQ, 60 */
		/* 821F8668h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821F86A4;  }
		/* 821F8668h case   19:*/		return 0x821F866C;
		  /* 821F866Ch */ case   20:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821F866Ch case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821F866Ch case   20:*/		return 0x821F8670;
		  /* 821F8670h */ case   21:  		/* mr R3, R31 */
		/* 821F8670h case   21:*/		regs.R3 = regs.R31;
		/* 821F8670h case   21:*/		return 0x821F8674;
		  /* 821F8674h */ case   22:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8674h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8674h case   22:*/		return 0x821F8678;
		  /* 821F8678h */ case   23:  		/* lwz R9, <#[R11]> */
		/* 821F8678h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821F8678h case   23:*/		return 0x821F867C;
		  /* 821F867Ch */ case   24:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F867Ch case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F867Ch case   24:*/		return 0x821F8680;
		  /* 821F8680h */ case   25:  		/* stw R9, <#[R10]> */
		/* 821F8680h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821F8680h case   25:*/		return 0x821F8684;
		  /* 821F8684h */ case   26:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8684h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8684h case   26:*/		return 0x821F8688;
		  /* 821F8688h */ case   27:  		/* lwz R11, <#[R11]> */
		/* 821F8688h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F8688h case   27:*/		return 0x821F868C;
		  /* 821F868Ch */ case   28:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F868Ch case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F868Ch case   28:*/		return 0x821F8690;
		  /* 821F8690h */ case   29:  		/* stw R10, <#[R11]> */
		/* 821F8690h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F8690h case   29:*/		return 0x821F8694;
		  /* 821F8694h */ case   30:  		/* lwz R11, <#[R4 + 12]> */
		/* 821F8694h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821F8694h case   30:*/		return 0x821F8698;
		  /* 821F8698h */ case   31:  		/* addi R11, R11, 4 */
		/* 821F8698h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821F8698h case   31:*/		return 0x821F869C;
		  /* 821F869Ch */ case   32:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821F869Ch case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821F869Ch case   32:*/		return 0x821F86A0;
		  /* 821F86A0h */ case   33:  		/* bl -682136 */
		/* 821F86A0h case   33:*/		regs.LR = 0x821F86A4; return 0x82151E08;
		/* 821F86A0h case   33:*/		return 0x821F86A4;
	}
	return 0x821F86A4;
} // Block from 821F861Ch-821F86A4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821F86A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F86A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F86A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F86A4);
		  /* 821F86A4h */ case    0:  		/* mr R4, R30 */
		/* 821F86A4h case    0:*/		regs.R4 = regs.R30;
		/* 821F86A4h case    0:*/		return 0x821F86A8;
		  /* 821F86A8h */ case    1:  		/* mr R3, R23 */
		/* 821F86A8h case    1:*/		regs.R3 = regs.R23;
		/* 821F86A8h case    1:*/		return 0x821F86AC;
		  /* 821F86ACh */ case    2:  		/* bl -4540 */
		/* 821F86ACh case    2:*/		regs.LR = 0x821F86B0; return 0x821F74F0;
		/* 821F86ACh case    2:*/		return 0x821F86B0;
		  /* 821F86B0h */ case    3:  		/* b -136 */
		/* 821F86B0h case    3:*/		return 0x821F8628;
		/* 821F86B0h case    3:*/		return 0x821F86B4;
	}
	return 0x821F86B4;
} // Block from 821F86A4h-821F86B4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F86B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F86B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F86B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F86B4);
		  /* 821F86B4h */ case    0:  		/* li R4, 4801 */
		/* 821F86B4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F86B4h case    0:*/		return 0x821F86B8;
		  /* 821F86B8h */ case    1:  		/* mr R3, R26 */
		/* 821F86B8h case    1:*/		regs.R3 = regs.R26;
		/* 821F86B8h case    1:*/		return 0x821F86BC;
		  /* 821F86BCh */ case    2:  		/* bl -682068 */
		/* 821F86BCh case    2:*/		regs.LR = 0x821F86C0; return 0x82151E68;
		/* 821F86BCh case    2:*/		return 0x821F86C0;
	}
	return 0x821F86C0;
} // Block from 821F86B4h-821F86C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F86C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F86C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F86C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F86C0);
		  /* 821F86C0h */ case    0:  		/* addic. R11, R11, -1 */
		/* 821F86C0h case    0:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F86C0h case    0:*/		return 0x821F86C4;
		  /* 821F86C4h */ case    1:  		/* stw R11, <#[R4 + 8]> */
		/* 821F86C4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821F86C4h case    1:*/		return 0x821F86C8;
		  /* 821F86C8h */ case    2:  		/* bc 4, CR0_EQ, 60 */
		/* 821F86C8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821F8704;  }
		/* 821F86C8h case    2:*/		return 0x821F86CC;
		  /* 821F86CCh */ case    3:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821F86CCh case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821F86CCh case    3:*/		return 0x821F86D0;
		  /* 821F86D0h */ case    4:  		/* mr R3, R31 */
		/* 821F86D0h case    4:*/		regs.R3 = regs.R31;
		/* 821F86D0h case    4:*/		return 0x821F86D4;
		  /* 821F86D4h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F86D4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F86D4h case    5:*/		return 0x821F86D8;
		  /* 821F86D8h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 821F86D8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821F86D8h case    6:*/		return 0x821F86DC;
		  /* 821F86DCh */ case    7:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F86DCh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F86DCh case    7:*/		return 0x821F86E0;
		  /* 821F86E0h */ case    8:  		/* stw R9, <#[R10]> */
		/* 821F86E0h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821F86E0h case    8:*/		return 0x821F86E4;
		  /* 821F86E4h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F86E4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F86E4h case    9:*/		return 0x821F86E8;
		  /* 821F86E8h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 821F86E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F86E8h case   10:*/		return 0x821F86EC;
		  /* 821F86ECh */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F86ECh case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F86ECh case   11:*/		return 0x821F86F0;
		  /* 821F86F0h */ case   12:  		/* stw R10, <#[R11]> */
		/* 821F86F0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F86F0h case   12:*/		return 0x821F86F4;
		  /* 821F86F4h */ case   13:  		/* lwz R11, <#[R4 + 12]> */
		/* 821F86F4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821F86F4h case   13:*/		return 0x821F86F8;
		  /* 821F86F8h */ case   14:  		/* addi R11, R11, 4 */
		/* 821F86F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821F86F8h case   14:*/		return 0x821F86FC;
		  /* 821F86FCh */ case   15:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821F86FCh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821F86FCh case   15:*/		return 0x821F8700;
		  /* 821F8700h */ case   16:  		/* bl -682232 */
		/* 821F8700h case   16:*/		regs.LR = 0x821F8704; return 0x82151E08;
		/* 821F8700h case   16:*/		return 0x821F8704;
	}
	return 0x821F8704;
} // Block from 821F86C0h-821F8704h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821F8704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8704);
		  /* 821F8704h */ case    0:  		/* mr R4, R30 */
		/* 821F8704h case    0:*/		regs.R4 = regs.R30;
		/* 821F8704h case    0:*/		return 0x821F8708;
		  /* 821F8708h */ case    1:  		/* mr R3, R23 */
		/* 821F8708h case    1:*/		regs.R3 = regs.R23;
		/* 821F8708h case    1:*/		return 0x821F870C;
		  /* 821F870Ch */ case    2:  		/* bl -4764 */
		/* 821F870Ch case    2:*/		regs.LR = 0x821F8710; return 0x821F7470;
		/* 821F870Ch case    2:*/		return 0x821F8710;
		  /* 821F8710h */ case    3:  		/* b -232 */
		/* 821F8710h case    3:*/		return 0x821F8628;
		/* 821F8710h case    3:*/		return 0x821F8714;
	}
	return 0x821F8714;
} // Block from 821F8704h-821F8714h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F8714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8714);
		  /* 821F8714h */ case    0:  		/* lwz R10, <#[R26 + 976]> */
		/* 821F8714h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x000003D0) );
		/* 821F8714h case    0:*/		return 0x821F8718;
		  /* 821F8718h */ case    1:  		/* addi R11, R26, 972 */
		/* 821F8718h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x3CC);
		/* 821F8718h case    1:*/		return 0x821F871C;
		  /* 821F871Ch */ case    2:  		/* mr R3, R24 */
		/* 821F871Ch case    2:*/		regs.R3 = regs.R24;
		/* 821F871Ch case    2:*/		return 0x821F8720;
		  /* 821F8720h */ case    3:  		/* stw R10, <#[R31]> */
		/* 821F8720h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821F8720h case    3:*/		return 0x821F8724;
		  /* 821F8724h */ case    4:  		/* stw R31, <#[R26 + 976]> */
		/* 821F8724h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x000003D0) );
		/* 821F8724h case    4:*/		return 0x821F8728;
	}
	return 0x821F8728;
} // Block from 821F8714h-821F8728h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F8728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8728);
		  /* 821F8728h */ case    0:  		/* addi R1, R1, 176 */
		/* 821F8728h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821F8728h case    0:*/		return 0x821F872C;
		  /* 821F872Ch */ case    1:  		/* b -1471644 */
		/* 821F872Ch case    1:*/		return 0x82091290;
		/* 821F872Ch case    1:*/		return 0x821F8730;
	}
	return 0x821F8730;
} // Block from 821F8728h-821F8730h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8730);
		  /* 821F8730h */ case    0:  		/* mfspr R12, LR */
		/* 821F8730h case    0:*/		regs.R12 = regs.LR;
		/* 821F8730h case    0:*/		return 0x821F8734;
		  /* 821F8734h */ case    1:  		/* bl -1471728 */
		/* 821F8734h case    1:*/		regs.LR = 0x821F8738; return 0x82091244;
		/* 821F8734h case    1:*/		return 0x821F8738;
		  /* 821F8738h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821F8738h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821F8738h case    2:*/		return 0x821F873C;
		  /* 821F873Ch */ case    3:  		/* lwz R11, <#[R3 + 12]> */
		/* 821F873Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F873Ch case    3:*/		return 0x821F8740;
		  /* 821F8740h */ case    4:  		/* mulli R27, R5, 40 */
		/* 821F8740h case    4:*/		cpu::op::mulli<0>(regs,&regs.R27,regs.R5,0x28);
		/* 821F8740h case    4:*/		return 0x821F8744;
		  /* 821F8744h */ case    5:  		/* add R11, R11, R27 */
		/* 821F8744h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821F8744h case    5:*/		return 0x821F8748;
		  /* 821F8748h */ case    6:  		/* mr R28, R3 */
		/* 821F8748h case    6:*/		regs.R28 = regs.R3;
		/* 821F8748h case    6:*/		return 0x821F874C;
		  /* 821F874Ch */ case    7:  		/* mr R25, R4 */
		/* 821F874Ch case    7:*/		regs.R25 = regs.R4;
		/* 821F874Ch case    7:*/		return 0x821F8750;
		  /* 821F8750h */ case    8:  		/* mr R29, R5 */
		/* 821F8750h case    8:*/		regs.R29 = regs.R5;
		/* 821F8750h case    8:*/		return 0x821F8754;
		  /* 821F8754h */ case    9:  		/* mr R24, R6 */
		/* 821F8754h case    9:*/		regs.R24 = regs.R6;
		/* 821F8754h case    9:*/		return 0x821F8758;
		  /* 821F8758h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F8758h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8758h case   10:*/		return 0x821F875C;
		  /* 821F875Ch */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821F875Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821F875Ch case   11:*/		return 0x821F8760;
		  /* 821F8760h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821F8760h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821F876C;  }
		/* 821F8760h case   12:*/		return 0x821F8764;
		  /* 821F8764h */ case   13:  		/* li R4, 4800 */
		/* 821F8764h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821F8764h case   13:*/		return 0x821F8768;
		  /* 821F8768h */ case   14:  		/* bl -682240 */
		/* 821F8768h case   14:*/		regs.LR = 0x821F876C; return 0x82151E68;
		/* 821F8768h case   14:*/		return 0x821F876C;
	}
	return 0x821F876C;
} // Block from 821F8730h-821F876Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F876Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F876C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F876C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F876C);
		  /* 821F876Ch */ case    0:  		/* rlwinm. R23, R9, 0, 24, 31 */
		/* 821F876Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R23,regs.R9);
		/* 821F876Ch case    0:*/		return 0x821F8770;
		  /* 821F8770h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821F8770h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F8788;  }
		/* 821F8770h case    1:*/		return 0x821F8774;
		  /* 821F8774h */ case    2:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821F8774h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821F8774h case    2:*/		return 0x821F8778;
		  /* 821F8778h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821F8778h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821F8788;  }
		/* 821F8778h case    3:*/		return 0x821F877C;
		  /* 821F877Ch */ case    4:  		/* li R4, 4800 */
		/* 821F877Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821F877Ch case    4:*/		return 0x821F8780;
		  /* 821F8780h */ case    5:  		/* mr R3, R28 */
		/* 821F8780h case    5:*/		regs.R3 = regs.R28;
		/* 821F8780h case    5:*/		return 0x821F8784;
		  /* 821F8784h */ case    6:  		/* bl -682268 */
		/* 821F8784h case    6:*/		regs.LR = 0x821F8788; return 0x82151E68;
		/* 821F8784h case    6:*/		return 0x821F8788;
	}
	return 0x821F8788;
} // Block from 821F876Ch-821F8788h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F8788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8788);
		  /* 821F8788h */ case    0:  		/* add R26, R7, R8 */
		/* 821F8788h case    0:*/		cpu::op::add<0>(regs,&regs.R26,regs.R7,regs.R8);
		/* 821F8788h case    0:*/		return 0x821F878C;
		  /* 821F878Ch */ case    1:  		/* mr R31, R7 */
		/* 821F878Ch case    1:*/		regs.R31 = regs.R7;
		/* 821F878Ch case    1:*/		return 0x821F8790;
		  /* 821F8790h */ case    2:  		/* cmplw CR6, R7, R26 */
		/* 821F8790h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R26);
		/* 821F8790h case    2:*/		return 0x821F8794;
		  /* 821F8794h */ case    3:  		/* bc 4, CR6_LT, 172 */
		/* 821F8794h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821F8840;  }
		/* 821F8794h case    3:*/		return 0x821F8798;
		  /* 821F8798h */ case    4:  		/* rlwinm R11, R7, 3, 0, 28 */
		/* 821F8798h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R7);
		/* 821F8798h case    4:*/		return 0x821F879C;
		  /* 821F879Ch */ case    5:  		/* add R30, R11, R24 */
		/* 821F879Ch case    5:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R24);
		/* 821F879Ch case    5:*/		return 0x821F87A0;
		  /* 821F87A0h */ case    6:  		/* cmplwi CR6, R24, 0 */
		/* 821F87A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821F87A0h case    6:*/		return 0x821F87A4;
		  /* 821F87A4h */ case    7:  		/* bc 12, CR6_EQ, 92 */
		/* 821F87A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821F8800;  }
		/* 821F87A4h case    7:*/		return 0x821F87A8;
		  /* 821F87A8h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 821F87A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821F87A8h case    8:*/		return 0x821F87AC;
		  /* 821F87ACh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821F87ACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F87ACh case    9:*/		return 0x821F87B0;
		  /* 821F87B0h */ case   10:  		/* bc 12, CR6_EQ, 80 */
		/* 821F87B0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821F8800;  }
		/* 821F87B0h case   10:*/		return 0x821F87B4;
		  /* 821F87B4h */ case   11:  		/* cmplwi CR6, R23, 0 */
		/* 821F87B4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821F87B4h case   11:*/		return 0x821F87B8;
		  /* 821F87B8h */ case   12:  		/* bc 12, CR6_EQ, 60 */
		/* 821F87B8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821F87F4;  }
		/* 821F87B8h case   12:*/		return 0x821F87BC;
		  /* 821F87BCh */ case   13:  		/* lwz R11, <#[R28 + 12]> */
		/* 821F87BCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821F87BCh case   13:*/		return 0x821F87C0;
		  /* 821F87C0h */ case   14:  		/* rlwinm R10, R31, 0, 18, 31 */
		/* 821F87C0h case   14:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R10,regs.R31);
		/* 821F87C0h case   14:*/		return 0x821F87C4;
		  /* 821F87C4h */ case   15:  		/* rlwinm R9, R29, 15, 0, 16 */
		/* 821F87C4h case   15:*/		cpu::op::rlwinm<0,15,0,16>(regs,&regs.R9,regs.R29);
		/* 821F87C4h case   15:*/		return 0x821F87C8;
		  /* 821F87C8h */ case   16:  		/* stw R30, <#[R1 + 80]> */
		/* 821F87C8h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821F87C8h case   16:*/		return 0x821F87CC;
		  /* 821F87CCh */ case   17:  		/* add R11, R11, R27 */
		/* 821F87CCh case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821F87CCh case   17:*/		return 0x821F87D0;
		  /* 821F87D0h */ case   18:  		/* or R9, R10, R9 */
		/* 821F87D0h case   18:*/		cpu::op::or<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821F87D0h case   18:*/		return 0x821F87D4;
		  /* 821F87D4h */ case   19:  		/* addi R10, R11, 4 */
		/* 821F87D4h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821F87D4h case   19:*/		return 0x821F87D8;
		  /* 821F87D8h */ case   20:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821F87D8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821F87D8h case   20:*/		return 0x821F87DC;
		  /* 821F87DCh */ case   21:  		/* lwz R9, <#[R11 + 4]> */
		/* 821F87DCh case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821F87DCh case   21:*/		return 0x821F87E0;
		  /* 821F87E0h */ case   22:  		/* ori R10, R10, 3 */
		/* 821F87E0h case   22:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3);
		/* 821F87E0h case   22:*/		return 0x821F87E4;
		  /* 821F87E4h */ case   23:  		/* ori R9, R9, 2 */
		/* 821F87E4h case   23:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 821F87E4h case   23:*/		return 0x821F87E8;
		  /* 821F87E8h */ case   24:  		/* stw R10, <#[R1 + 84]> */
		/* 821F87E8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821F87E8h case   24:*/		return 0x821F87EC;
		  /* 821F87ECh */ case   25:  		/* stw R9, <#[R11 + 4]> */
		/* 821F87ECh case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821F87ECh case   25:*/		return 0x821F87F0;
		  /* 821F87F0h */ case   26:  		/* b 52 */
		/* 821F87F0h case   26:*/		return 0x821F8824;
		/* 821F87F0h case   26:*/		return 0x821F87F4;
	}
	return 0x821F87F4;
} // Block from 821F8788h-821F87F4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821F87F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F87F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F87F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F87F4);
		  /* 821F87F4h */ case    0:  		/* ld R11, <#[R30]> */
		/* 821F87F4h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821F87F4h case    0:*/		return 0x821F87F8;
		  /* 821F87F8h */ case    1:  		/* std R11, <#[R1 + 80]> */
		/* 821F87F8h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F87F8h case    1:*/		return 0x821F87FC;
		  /* 821F87FCh */ case    2:  		/* b 40 */
		/* 821F87FCh case    2:*/		return 0x821F8824;
		/* 821F87FCh case    2:*/		return 0x821F8800;
	}
	return 0x821F8800;
} // Block from 821F87F4h-821F8800h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8800);
		  /* 821F8800h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 821F8800h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F8800h case    0:*/		return 0x821F8804;
		  /* 821F8804h */ case    1:  		/* lwz R10, <#[R1 + 80]> */
		/* 821F8804h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821F8804h case    1:*/		return 0x821F8808;
		  /* 821F8808h */ case    2:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 821F8808h case    2:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 821F8808h case    2:*/		return 0x821F880C;
		  /* 821F880Ch */ case    3:  		/* ori R10, R10, 1 */
		/* 821F880Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F880Ch case    3:*/		return 0x821F8810;
		  /* 821F8810h */ case    4:  		/* rlwimi R11, R29, 17, 0, 14 */
		/* 821F8810h case    4:*/		cpu::op::rlwimi<0,17,0,14>(regs,&regs.R11,regs.R29);
		/* 821F8810h case    4:*/		return 0x821F8814;
		  /* 821F8814h */ case    5:  		/* stw R10, <#[R1 + 80]> */
		/* 821F8814h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821F8814h case    5:*/		return 0x821F8818;
		  /* 821F8818h */ case    6:  		/* rlwinm R11, R11, 0, 30, 15 */
		/* 821F8818h case    6:*/		cpu::op::rlwinm<0,0,30,15>(regs,&regs.R11,regs.R11);
		/* 821F8818h case    6:*/		return 0x821F881C;
		  /* 821F881Ch */ case    7:  		/* rlwimi R11, R31, 2, 16, 29 */
		/* 821F881Ch case    7:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R11,regs.R31);
		/* 821F881Ch case    7:*/		return 0x821F8820;
		  /* 821F8820h */ case    8:  		/* stw R11, <#[R1 + 84]> */
		/* 821F8820h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F8820h case    8:*/		return 0x821F8824;
	}
	return 0x821F8824;
} // Block from 821F8800h-821F8824h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F8824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8824);
		  /* 821F8824h */ case    0:  		/* mr R3, R25 */
		/* 821F8824h case    0:*/		regs.R3 = regs.R25;
		/* 821F8824h case    0:*/		return 0x821F8828;
		  /* 821F8828h */ case    1:  		/* ld R4, <#[R1 + 80]> */
		/* 821F8828h case    1:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821F8828h case    1:*/		return 0x821F882C;
		  /* 821F882Ch */ case    2:  		/* bl -6964 */
		/* 821F882Ch case    2:*/		regs.LR = 0x821F8830; return 0x821F6CF8;
		/* 821F882Ch case    2:*/		return 0x821F8830;
		  /* 821F8830h */ case    3:  		/* addi R31, R31, 1 */
		/* 821F8830h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821F8830h case    3:*/		return 0x821F8834;
		  /* 821F8834h */ case    4:  		/* addi R30, R30, 8 */
		/* 821F8834h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 821F8834h case    4:*/		return 0x821F8838;
		  /* 821F8838h */ case    5:  		/* cmplw CR6, R31, R26 */
		/* 821F8838h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R26);
		/* 821F8838h case    5:*/		return 0x821F883C;
		  /* 821F883Ch */ case    6:  		/* bc 12, CR6_LT, -156 */
		/* 821F883Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x821F87A0;  }
		/* 821F883Ch case    6:*/		return 0x821F8840;
	}
	return 0x821F8840;
} // Block from 821F8824h-821F8840h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F8840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8840);
		  /* 821F8840h */ case    0:  		/* addi R1, R1, 176 */
		/* 821F8840h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821F8840h case    0:*/		return 0x821F8844;
		  /* 821F8844h */ case    1:  		/* b -1471920 */
		/* 821F8844h case    1:*/		return 0x82091294;
		/* 821F8844h case    1:*/		return 0x821F8848;
	}
	return 0x821F8848;
} // Block from 821F8840h-821F8848h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8848);
		  /* 821F8848h */ case    0:  		/* mfspr R12, LR */
		/* 821F8848h case    0:*/		regs.R12 = regs.LR;
		/* 821F8848h case    0:*/		return 0x821F884C;
		  /* 821F884Ch */ case    1:  		/* bl -1472016 */
		/* 821F884Ch case    1:*/		regs.LR = 0x821F8850; return 0x8209123C;
		/* 821F884Ch case    1:*/		return 0x821F8850;
		  /* 821F8850h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821F8850h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821F8850h case    2:*/		return 0x821F8854;
		  /* 821F8854h */ case    3:  		/* lwz R11, <#[R3 + 564]> */
		/* 821F8854h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000234) );
		/* 821F8854h case    3:*/		return 0x821F8858;
		  /* 821F8858h */ case    4:  		/* mr R30, R3 */
		/* 821F8858h case    4:*/		regs.R30 = regs.R3;
		/* 821F8858h case    4:*/		return 0x821F885C;
		  /* 821F885Ch */ case    5:  		/* mr R24, R4 */
		/* 821F885Ch case    5:*/		regs.R24 = regs.R4;
		/* 821F885Ch case    5:*/		return 0x821F8860;
		  /* 821F8860h */ case    6:  		/* mr R29, R5 */
		/* 821F8860h case    6:*/		regs.R29 = regs.R5;
		/* 821F8860h case    6:*/		return 0x821F8864;
		  /* 821F8864h */ case    7:  		/* mr R21, R6 */
		/* 821F8864h case    7:*/		regs.R21 = regs.R6;
		/* 821F8864h case    7:*/		return 0x821F8868;
		  /* 821F8868h */ case    8:  		/* mr R22, R7 */
		/* 821F8868h case    8:*/		regs.R22 = regs.R7;
		/* 821F8868h case    8:*/		return 0x821F886C;
		  /* 821F886Ch */ case    9:  		/* lwz R11, <#[R11 + 80]> */
		/* 821F886Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821F886Ch case    9:*/		return 0x821F8870;
		  /* 821F8870h */ case   10:  		/* mr R23, R8 */
		/* 821F8870h case   10:*/		regs.R23 = regs.R8;
		/* 821F8870h case   10:*/		return 0x821F8874;
		  /* 821F8874h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821F8874h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8874h case   11:*/		return 0x821F8878;
		  /* 821F8878h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 821F8878h case   12:*/		if ( regs.CR[6].eq ) { return 0x821F8888;  }
		/* 821F8878h case   12:*/		return 0x821F887C;
		  /* 821F887Ch */ case   13:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 821F887Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 821F887Ch case   13:*/		return 0x821F8880;
		  /* 821F8880h */ case   14:  		/* lwzx R25, <#[R10 + R11]> */
		/* 821F8880h case   14:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F8880h case   14:*/		return 0x821F8884;
		  /* 821F8884h */ case   15:  		/* b 8 */
		/* 821F8884h case   15:*/		return 0x821F888C;
		/* 821F8884h case   15:*/		return 0x821F8888;
	}
	return 0x821F8888;
} // Block from 821F8848h-821F8888h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F8888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8888);
		  /* 821F8888h */ case    0:  		/* li R25, 0 */
		/* 821F8888h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821F8888h case    0:*/		return 0x821F888C;
	}
	return 0x821F888C;
} // Block from 821F8888h-821F888Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F888Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F888C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F888C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F888C);
		  /* 821F888Ch */ case    0:  		/* lwz R11, <#[R30 + 40]> */
		/* 821F888Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821F888Ch case    0:*/		return 0x821F8890;
		  /* 821F8890h */ case    1:  		/* rlwinm. R10, R11, 0, 15, 15 */
		/* 821F8890h case    1:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R11);
		/* 821F8890h case    1:*/		return 0x821F8894;
		  /* 821F8894h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821F8894h case    2:*/		if ( regs.CR[0].eq ) { return 0x821F88A0;  }
		/* 821F8894h case    2:*/		return 0x821F8898;
		  /* 821F8898h */ case    3:  		/* cmplwi CR6, R29, 727 */
		/* 821F8898h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x000002D7);
		/* 821F8898h case    3:*/		return 0x821F889C;
		  /* 821F889Ch */ case    4:  		/* bc 12, CR6_LT, 36 */
		/* 821F889Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x821F88C0;  }
		/* 821F889Ch case    4:*/		return 0x821F88A0;
	}
	return 0x821F88A0;
} // Block from 821F888Ch-821F88A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F88A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F88A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F88A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F88A0);
		  /* 821F88A0h */ case    0:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821F88A0h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821F88A0h case    0:*/		return 0x821F88A4;
		  /* 821F88A4h */ case    1:  		/* bc 12, CR0_EQ, 68 */
		/* 821F88A4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F88E8;  }
		/* 821F88A4h case    1:*/		return 0x821F88A8;
		  /* 821F88A8h */ case    2:  		/* lwz R11, <#[R30 + 600]> */
		/* 821F88A8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000258) );
		/* 821F88A8h case    2:*/		return 0x821F88AC;
		  /* 821F88ACh */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 821F88ACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821F88ACh case    3:*/		return 0x821F88B0;
		  /* 821F88B0h */ case    4:  		/* bc 12, CR6_LT, 56 */
		/* 821F88B0h case    4:*/		if ( regs.CR[6].lt ) { return 0x821F88E8;  }
		/* 821F88B0h case    4:*/		return 0x821F88B4;
		  /* 821F88B4h */ case    5:  		/* addi R11, R11, 12 */
		/* 821F88B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821F88B4h case    5:*/		return 0x821F88B8;
		  /* 821F88B8h */ case    6:  		/* cmplw CR6, R29, R11 */
		/* 821F88B8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821F88B8h case    6:*/		return 0x821F88BC;
		  /* 821F88BCh */ case    7:  		/* bc 4, CR6_LT, 44 */
		/* 821F88BCh case    7:*/		if ( !regs.CR[6].lt ) { return 0x821F88E8;  }
		/* 821F88BCh case    7:*/		return 0x821F88C0;
	}
	return 0x821F88C0;
} // Block from 821F88A0h-821F88C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F88C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F88C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F88C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F88C0);
		  /* 821F88C0h */ case    0:  		/* mr R9, R23 */
		/* 821F88C0h case    0:*/		regs.R9 = regs.R23;
		/* 821F88C0h case    0:*/		return 0x821F88C4;
		  /* 821F88C4h */ case    1:  		/* li R8, 4 */
		/* 821F88C4h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821F88C4h case    1:*/		return 0x821F88C8;
		  /* 821F88C8h */ case    2:  		/* li R7, 0 */
		/* 821F88C8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F88C8h case    2:*/		return 0x821F88CC;
		  /* 821F88CCh */ case    3:  		/* mr R6, R25 */
		/* 821F88CCh case    3:*/		regs.R6 = regs.R25;
		/* 821F88CCh case    3:*/		return 0x821F88D0;
		  /* 821F88D0h */ case    4:  		/* mr R5, R29 */
		/* 821F88D0h case    4:*/		regs.R5 = regs.R29;
		/* 821F88D0h case    4:*/		return 0x821F88D4;
		  /* 821F88D4h */ case    5:  		/* mr R4, R24 */
		/* 821F88D4h case    5:*/		regs.R4 = regs.R24;
		/* 821F88D4h case    5:*/		return 0x821F88D8;
		  /* 821F88D8h */ case    6:  		/* mr R3, R30 */
		/* 821F88D8h case    6:*/		regs.R3 = regs.R30;
		/* 821F88D8h case    6:*/		return 0x821F88DC;
		  /* 821F88DCh */ case    7:  		/* bl -428 */
		/* 821F88DCh case    7:*/		regs.LR = 0x821F88E0; return 0x821F8730;
		/* 821F88DCh case    7:*/		return 0x821F88E0;
		  /* 821F88E0h */ case    8:  		/* li R3, 4 */
		/* 821F88E0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x4);
		/* 821F88E0h case    8:*/		return 0x821F88E4;
		  /* 821F88E4h */ case    9:  		/* b 156 */
		/* 821F88E4h case    9:*/		return 0x821F8980;
		/* 821F88E4h case    9:*/		return 0x821F88E8;
	}
	return 0x821F88E8;
} // Block from 821F88C0h-821F88E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F88E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F88E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F88E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F88E8);
		  /* 821F88E8h */ case    0:  		/* lwz R10, <#[R30 + 12]> */
		/* 821F88E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821F88E8h case    0:*/		return 0x821F88EC;
		  /* 821F88ECh */ case    1:  		/* mulli R11, R29, 40 */
		/* 821F88ECh case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R29,0x28);
		/* 821F88ECh case    1:*/		return 0x821F88F0;
		  /* 821F88F0h */ case    2:  		/* add R27, R11, R10 */
		/* 821F88F0h case    2:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R10);
		/* 821F88F0h case    2:*/		return 0x821F88F4;
		  /* 821F88F4h */ case    3:  		/* lwz R11, <#[R27 + 28]> */
		/* 821F88F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821F88F4h case    3:*/		return 0x821F88F8;
		  /* 821F88F8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821F88F8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F88F8h case    4:*/		return 0x821F88FC;
		  /* 821F88FCh */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 821F88FCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F890C;  }
		/* 821F88FCh case    5:*/		return 0x821F8900;
		  /* 821F8900h */ case    6:  		/* mr R4, R29 */
		/* 821F8900h case    6:*/		regs.R4 = regs.R29;
		/* 821F8900h case    6:*/		return 0x821F8904;
		  /* 821F8904h */ case    7:  		/* mr R3, R30 */
		/* 821F8904h case    7:*/		regs.R3 = regs.R30;
		/* 821F8904h case    7:*/		return 0x821F8908;
		  /* 821F8908h */ case    8:  		/* bl -438168 */
		/* 821F8908h case    8:*/		regs.LR = 0x821F890C; return 0x8218D970;
		/* 821F8908h case    8:*/		return 0x821F890C;
	}
	return 0x821F890C;
} // Block from 821F88E8h-821F890Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F890Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F890C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F890C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F890C);
		  /* 821F890Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821F890Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821F890Ch case    0:*/		return 0x821F8910;
		  /* 821F8910h */ case    1:  		/* li R31, 0 */
		/* 821F8910h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821F8910h case    1:*/		return 0x821F8914;
		  /* 821F8914h */ case    2:  		/* li R28, 0 */
		/* 821F8914h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821F8914h case    2:*/		return 0x821F8918;
		  /* 821F8918h */ case    3:  		/* rlwinm. R11, R11, 0, 15, 28 */
		/* 821F8918h case    3:*/		cpu::op::rlwinm<1,0,15,28>(regs,&regs.R11,regs.R11);
		/* 821F8918h case    3:*/		return 0x821F891C;
		  /* 821F891Ch */ case    4:  		/* bc 12, CR0_EQ, 96 */
		/* 821F891Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821F897C;  }
		/* 821F891Ch case    4:*/		return 0x821F8920;
		  /* 821F8920h */ case    5:  		/* li R26, 0 */
		/* 821F8920h case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821F8920h case    5:*/		return 0x821F8924;
		  /* 821F8924h */ case    6:  		/* lwz R11, <#[R27 + 28]> */
		/* 821F8924h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821F8924h case    6:*/		return 0x821F8928;
		  /* 821F8928h */ case    7:  		/* lwzx R11, <#[R11 + R26]> */
		/* 821F8928h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821F8928h case    7:*/		return 0x821F892C;
		  /* 821F892Ch */ case    8:  		/* rlwinm R11, R11, 28, 18, 31 */
		/* 821F892Ch case    8:*/		cpu::op::rlwinm<0,28,18,31>(regs,&regs.R11,regs.R11);
		/* 821F892Ch case    8:*/		return 0x821F8930;
		  /* 821F8930h */ case    9:  		/* cmplw CR6, R11, R21 */
		/* 821F8930h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 821F8930h case    9:*/		return 0x821F8934;
		  /* 821F8934h */ case   10:  		/* bc 4, CR6_EQ, 48 */
		/* 821F8934h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821F8964;  }
		/* 821F8934h case   10:*/		return 0x821F8938;
		  /* 821F8938h */ case   11:  		/* mr R9, R23 */
		/* 821F8938h case   11:*/		regs.R9 = regs.R23;
		/* 821F8938h case   11:*/		return 0x821F893C;
		  /* 821F893Ch */ case   12:  		/* li R8, 1 */
		/* 821F893Ch case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821F893Ch case   12:*/		return 0x821F8940;
		  /* 821F8940h */ case   13:  		/* mr R7, R28 */
		/* 821F8940h case   13:*/		regs.R7 = regs.R28;
		/* 821F8940h case   13:*/		return 0x821F8944;
		  /* 821F8944h */ case   14:  		/* mr R6, R25 */
		/* 821F8944h case   14:*/		regs.R6 = regs.R25;
		/* 821F8944h case   14:*/		return 0x821F8948;
		  /* 821F8948h */ case   15:  		/* mr R5, R29 */
		/* 821F8948h case   15:*/		regs.R5 = regs.R29;
		/* 821F8948h case   15:*/		return 0x821F894C;
		  /* 821F894Ch */ case   16:  		/* mr R4, R24 */
		/* 821F894Ch case   16:*/		regs.R4 = regs.R24;
		/* 821F894Ch case   16:*/		return 0x821F8950;
		  /* 821F8950h */ case   17:  		/* mr R3, R30 */
		/* 821F8950h case   17:*/		regs.R3 = regs.R30;
		/* 821F8950h case   17:*/		return 0x821F8954;
		  /* 821F8954h */ case   18:  		/* bl -548 */
		/* 821F8954h case   18:*/		regs.LR = 0x821F8958; return 0x821F8730;
		/* 821F8954h case   18:*/		return 0x821F8958;
		  /* 821F8958h */ case   19:  		/* addi R31, R31, 1 */
		/* 821F8958h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821F8958h case   19:*/		return 0x821F895C;
		  /* 821F895Ch */ case   20:  		/* cmplw CR6, R31, R22 */
		/* 821F895Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R22);
		/* 821F895Ch case   20:*/		return 0x821F8960;
		  /* 821F8960h */ case   21:  		/* bc 4, CR6_LT, 28 */
		/* 821F8960h case   21:*/		if ( !regs.CR[6].lt ) { return 0x821F897C;  }
		/* 821F8960h case   21:*/		return 0x821F8964;
	}
	return 0x821F8964;
} // Block from 821F890Ch-821F8964h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821F8964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8964);
		  /* 821F8964h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821F8964h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821F8964h case    0:*/		return 0x821F8968;
		  /* 821F8968h */ case    1:  		/* addi R28, R28, 1 */
		/* 821F8968h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821F8968h case    1:*/		return 0x821F896C;
		  /* 821F896Ch */ case    2:  		/* addi R26, R26, 8 */
		/* 821F896Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x8);
		/* 821F896Ch case    2:*/		return 0x821F8970;
		  /* 821F8970h */ case    3:  		/* rlwinm R11, R11, 29, 18, 31 */
		/* 821F8970h case    3:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R11,regs.R11);
		/* 821F8970h case    3:*/		return 0x821F8974;
		  /* 821F8974h */ case    4:  		/* cmplw CR6, R28, R11 */
		/* 821F8974h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821F8974h case    4:*/		return 0x821F8978;
		  /* 821F8978h */ case    5:  		/* bc 12, CR6_LT, -84 */
		/* 821F8978h case    5:*/		if ( regs.CR[6].lt ) { return 0x821F8924;  }
		/* 821F8978h case    5:*/		return 0x821F897C;
	}
	return 0x821F897C;
} // Block from 821F8964h-821F897Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F897Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F897C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F897C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F897C);
		  /* 821F897Ch */ case    0:  		/* mr R3, R31 */
		/* 821F897Ch case    0:*/		regs.R3 = regs.R31;
		/* 821F897Ch case    0:*/		return 0x821F8980;
	}
	return 0x821F8980;
} // Block from 821F897Ch-821F8980h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F8980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8980);
		  /* 821F8980h */ case    0:  		/* addi R1, R1, 176 */
		/* 821F8980h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821F8980h case    0:*/		return 0x821F8984;
		  /* 821F8984h */ case    1:  		/* b -1472248 */
		/* 821F8984h case    1:*/		return 0x8209128C;
		/* 821F8984h case    1:*/		return 0x821F8988;
	}
	return 0x821F8988;
} // Block from 821F8980h-821F8988h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8988);
		  /* 821F8988h */ case    0:  		/* mfspr R12, LR */
		/* 821F8988h case    0:*/		regs.R12 = regs.LR;
		/* 821F8988h case    0:*/		return 0x821F898C;
		  /* 821F898Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F898Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F898Ch case    1:*/		return 0x821F8990;
		  /* 821F8990h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821F8990h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821F8990h case    2:*/		return 0x821F8994;
		  /* 821F8994h */ case    3:  		/* lwz R11, <#[R1 + 84]> */
		/* 821F8994h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F8994h case    3:*/		return 0x821F8998;
		  /* 821F8998h */ case    4:  		/* mr R3, R4 */
		/* 821F8998h case    4:*/		regs.R3 = regs.R4;
		/* 821F8998h case    4:*/		return 0x821F899C;
		  /* 821F899Ch */ case    5:  		/* stw R5, <#[R1 + 80]> */
		/* 821F899Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821F899Ch case    5:*/		return 0x821F89A0;
		  /* 821F89A0h */ case    6:  		/* rlwimi R11, R6, 2, 16, 29 */
		/* 821F89A0h case    6:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R11,regs.R6);
		/* 821F89A0h case    6:*/		return 0x821F89A4;
		  /* 821F89A4h */ case    7:  		/* rlwinm R11, R11, 0, 15, 29 */
		/* 821F89A4h case    7:*/		cpu::op::rlwinm<0,0,15,29>(regs,&regs.R11,regs.R11);
		/* 821F89A4h case    7:*/		return 0x821F89A8;
		  /* 821F89A8h */ case    8:  		/* ori R11, R11, 1 */
		/* 821F89A8h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F89A8h case    8:*/		return 0x821F89AC;
		  /* 821F89ACh */ case    9:  		/* stw R11, <#[R1 + 84]> */
		/* 821F89ACh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F89ACh case    9:*/		return 0x821F89B0;
		  /* 821F89B0h */ case   10:  		/* ld R4, <#[R1 + 80]> */
		/* 821F89B0h case   10:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821F89B0h case   10:*/		return 0x821F89B4;
		  /* 821F89B4h */ case   11:  		/* bl -7356 */
		/* 821F89B4h case   11:*/		regs.LR = 0x821F89B8; return 0x821F6CF8;
		/* 821F89B4h case   11:*/		return 0x821F89B8;
		  /* 821F89B8h */ case   12:  		/* addi R1, R1, 96 */
		/* 821F89B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821F89B8h case   12:*/		return 0x821F89BC;
		  /* 821F89BCh */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F89BCh case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F89BCh case   13:*/		return 0x821F89C0;
		  /* 821F89C0h */ case   14:  		/* mtspr LR, R12 */
		/* 821F89C0h case   14:*/		regs.LR = regs.R12;
		/* 821F89C0h case   14:*/		return 0x821F89C4;
		  /* 821F89C4h */ case   15:  		/* bclr 20, CR0_LT */
		/* 821F89C4h case   15:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F89C4h case   15:*/		return 0x821F89C8;
	}
	return 0x821F89C8;
} // Block from 821F8988h-821F89C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F89C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F89C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F89C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F89C8);
		  /* 821F89C8h */ case    0:  		/* mfspr R12, LR */
		/* 821F89C8h case    0:*/		regs.R12 = regs.LR;
		/* 821F89C8h case    0:*/		return 0x821F89CC;
		  /* 821F89CCh */ case    1:  		/* bl -1472376 */
		/* 821F89CCh case    1:*/		regs.LR = 0x821F89D0; return 0x82091254;
		/* 821F89CCh case    1:*/		return 0x821F89D0;
		  /* 821F89D0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821F89D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821F89D0h case    2:*/		return 0x821F89D4;
		  /* 821F89D4h */ case    3:  		/* lwz R28, <#[R5 + 4]> */
		/* 821F89D4h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R5 + 0x00000004) );
		/* 821F89D4h case    3:*/		return 0x821F89D8;
		  /* 821F89D8h */ case    4:  		/* mr R29, R4 */
		/* 821F89D8h case    4:*/		regs.R29 = regs.R4;
		/* 821F89D8h case    4:*/		return 0x821F89DC;
		  /* 821F89DCh */ case    5:  		/* lwz R27, <#[R5 + 8]> */
		/* 821F89DCh case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R5 + 0x00000008) );
		/* 821F89DCh case    5:*/		return 0x821F89E0;
		  /* 821F89E0h */ case    6:  		/* mr R31, R5 */
		/* 821F89E0h case    6:*/		regs.R31 = regs.R5;
		/* 821F89E0h case    6:*/		return 0x821F89E4;
		  /* 821F89E4h */ case    7:  		/* mr R30, R6 */
		/* 821F89E4h case    7:*/		regs.R30 = regs.R6;
		/* 821F89E4h case    7:*/		return 0x821F89E8;
		  /* 821F89E8h */ case    8:  		/* b 32 */
		/* 821F89E8h case    8:*/		return 0x821F8A08;
		/* 821F89E8h case    8:*/		return 0x821F89EC;
		  /* 821F89ECh */ case    9:  		/* mr R3, R31 */
		/* 821F89ECh case    9:*/		regs.R3 = regs.R31;
		/* 821F89ECh case    9:*/		return 0x821F89F0;
		  /* 821F89F0h */ case   10:  		/* addi R30, R30, -1 */
		/* 821F89F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821F89F0h case   10:*/		return 0x821F89F4;
		  /* 821F89F4h */ case   11:  		/* bl -228244 */
		/* 821F89F4h case   11:*/		regs.LR = 0x821F89F8; return 0x821C0E60;
		/* 821F89F4h case   11:*/		return 0x821F89F8;
		  /* 821F89F8h */ case   12:  		/* mr R11, R3 */
		/* 821F89F8h case   12:*/		regs.R11 = regs.R3;
		/* 821F89F8h case   12:*/		return 0x821F89FC;
		  /* 821F89FCh */ case   13:  		/* mr R3, R29 */
		/* 821F89FCh case   13:*/		regs.R3 = regs.R29;
		/* 821F89FCh case   13:*/		return 0x821F8A00;
		  /* 821F8A00h */ case   14:  		/* ld R4, <#[R11]> */
		/* 821F8A00h case   14:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821F8A00h case   14:*/		return 0x821F8A04;
		  /* 821F8A04h */ case   15:  		/* bl -7436 */
		/* 821F8A04h case   15:*/		regs.LR = 0x821F8A08; return 0x821F6CF8;
		/* 821F8A04h case   15:*/		return 0x821F8A08;
	}
	return 0x821F8A08;
} // Block from 821F89C8h-821F8A08h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F8A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8A08);
		  /* 821F8A08h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821F8A08h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F8A08h case    0:*/		return 0x821F8A0C;
		  /* 821F8A0Ch */ case    1:  		/* bc 4, CR6_EQ, -32 */
		/* 821F8A0Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821F89EC;  }
		/* 821F8A0Ch case    1:*/		return 0x821F8A10;
		  /* 821F8A10h */ case    2:  		/* stw R28, <#[R31 + 4]> */
		/* 821F8A10h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000004) );
		/* 821F8A10h case    2:*/		return 0x821F8A14;
		  /* 821F8A14h */ case    3:  		/* stw R27, <#[R31 + 8]> */
		/* 821F8A14h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000008) );
		/* 821F8A14h case    3:*/		return 0x821F8A18;
		  /* 821F8A18h */ case    4:  		/* addi R1, R1, 128 */
		/* 821F8A18h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821F8A18h case    4:*/		return 0x821F8A1C;
		  /* 821F8A1Ch */ case    5:  		/* b -1472376 */
		/* 821F8A1Ch case    5:*/		return 0x820912A4;
		/* 821F8A1Ch case    5:*/		return 0x821F8A20;
	}
	return 0x821F8A20;
} // Block from 821F8A08h-821F8A20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F8A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8A20);
		  /* 821F8A20h */ case    0:  		/* mfspr R12, LR */
		/* 821F8A20h case    0:*/		regs.R12 = regs.LR;
		/* 821F8A20h case    0:*/		return 0x821F8A24;
		  /* 821F8A24h */ case    1:  		/* bl -1472508 */
		/* 821F8A24h case    1:*/		regs.LR = 0x821F8A28; return 0x82091228;
		/* 821F8A24h case    1:*/		return 0x821F8A28;
		  /* 821F8A28h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 821F8A28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 821F8A28h case    2:*/		return 0x821F8A2C;
		  /* 821F8A2Ch */ case    3:  		/* mr R19, R9 */
		/* 821F8A2Ch case    3:*/		regs.R19 = regs.R9;
		/* 821F8A2Ch case    3:*/		return 0x821F8A30;
		  /* 821F8A30h */ case    4:  		/* lwz R11, <#[R5 + 24]> */
		/* 821F8A30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000018) );
		/* 821F8A30h case    4:*/		return 0x821F8A34;
		  /* 821F8A34h */ case    5:  		/* lwz R9, <#[R5 + 20]> */
		/* 821F8A34h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000014) );
		/* 821F8A34h case    5:*/		return 0x821F8A38;
		  /* 821F8A38h */ case    6:  		/* mr R26, R3 */
		/* 821F8A38h case    6:*/		regs.R26 = regs.R3;
		/* 821F8A38h case    6:*/		return 0x821F8A3C;
		  /* 821F8A3Ch */ case    7:  		/* lwz R10, <#[R5 + 28]> */
		/* 821F8A3Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x0000001C) );
		/* 821F8A3Ch case    7:*/		return 0x821F8A40;
		  /* 821F8A40h */ case    8:  		/* mr R17, R4 */
		/* 821F8A40h case    8:*/		regs.R17 = regs.R4;
		/* 821F8A40h case    8:*/		return 0x821F8A44;
		  /* 821F8A44h */ case    9:  		/* mr R29, R5 */
		/* 821F8A44h case    9:*/		regs.R29 = regs.R5;
		/* 821F8A44h case    9:*/		return 0x821F8A48;
		  /* 821F8A48h */ case   10:  		/* mr R31, R6 */
		/* 821F8A48h case   10:*/		regs.R31 = regs.R6;
		/* 821F8A48h case   10:*/		return 0x821F8A4C;
		  /* 821F8A4Ch */ case   11:  		/* mr R18, R7 */
		/* 821F8A4Ch case   11:*/		regs.R18 = regs.R7;
		/* 821F8A4Ch case   11:*/		return 0x821F8A50;
		  /* 821F8A50h */ case   12:  		/* mr R27, R8 */
		/* 821F8A50h case   12:*/		regs.R27 = regs.R8;
		/* 821F8A50h case   12:*/		return 0x821F8A54;
		  /* 821F8A54h */ case   13:  		/* mullw R16, R11, R9 */
		/* 821F8A54h case   13:*/		cpu::op::mullw<0>(regs,&regs.R16,regs.R11,regs.R9);
		/* 821F8A54h case   13:*/		return 0x821F8A58;
		  /* 821F8A58h */ case   14:  		/* cmpwi CR6, R10, 33 */
		/* 821F8A58h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000021);
		/* 821F8A58h case   14:*/		return 0x821F8A5C;
		  /* 821F8A5Ch */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 821F8A5Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821F8A70;  }
		/* 821F8A5Ch case   15:*/		return 0x821F8A60;
		  /* 821F8A60h */ case   16:  		/* cmplwi CR6, R16, 4 */
		/* 821F8A60h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000004);
		/* 821F8A60h case   16:*/		return 0x821F8A64;
		  /* 821F8A64h */ case   17:  		/* bc 12, CR6_EQ, 72 */
		/* 821F8A64h case   17:*/		if ( regs.CR[6].eq ) { return 0x821F8AAC;  }
		/* 821F8A64h case   17:*/		return 0x821F8A68;
		  /* 821F8A68h */ case   18:  		/* li R4, 4801 */
		/* 821F8A68h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8A68h case   18:*/		return 0x821F8A6C;
		  /* 821F8A6Ch */ case   19:  		/* bl -683012 */
		/* 821F8A6Ch case   19:*/		regs.LR = 0x821F8A70; return 0x82151E68;
		/* 821F8A6Ch case   19:*/		return 0x821F8A70;
	}
	return 0x821F8A70;
} // Block from 821F8A20h-821F8A70h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F8A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8A70);
		  /* 821F8A70h */ case    0:  		/* cmplwi CR6, R16, 4 */
		/* 821F8A70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000004);
		/* 821F8A70h case    0:*/		return 0x821F8A74;
		  /* 821F8A74h */ case    1:  		/* bc 4, CR6_GT, 56 */
		/* 821F8A74h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821F8AAC;  }
		/* 821F8A74h case    1:*/		return 0x821F8A78;
		  /* 821F8A78h */ case    2:  		/* lwz R11, <#[R26 + 48]> */
		/* 821F8A78h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821F8A78h case    2:*/		return 0x821F8A7C;
		  /* 821F8A7Ch */ case    3:  		/* lis R10, -1 */
		/* 821F8A7Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821F8A7Ch case    3:*/		return 0x821F8A80;
		  /* 821F8A80h */ case    4:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821F8A80h case    4:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821F8A80h case    4:*/		return 0x821F8A84;
		  /* 821F8A84h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821F8A84h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F8A84h case    5:*/		return 0x821F8A88;
		  /* 821F8A88h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 821F8A88h case    6:*/		if ( regs.CR[6].eq ) { return 0x821F8A98;  }
		/* 821F8A88h case    6:*/		return 0x821F8A8C;
		  /* 821F8A8Ch */ case    7:  		/* lis R11, -32255 */
		/* 821F8A8Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821F8A8Ch case    7:*/		return 0x821F8A90;
		  /* 821F8A90h */ case    8:  		/* addi R5, R11, 26496 */
		/* 821F8A90h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6780);
		/* 821F8A90h case    8:*/		return 0x821F8A94;
		  /* 821F8A94h */ case    9:  		/* b 12 */
		/* 821F8A94h case    9:*/		return 0x821F8AA0;
		/* 821F8A94h case    9:*/		return 0x821F8A98;
	}
	return 0x821F8A98;
} // Block from 821F8A70h-821F8A98h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F8A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8A98);
		  /* 821F8A98h */ case    0:  		/* lis R11, -32255 */
		/* 821F8A98h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821F8A98h case    0:*/		return 0x821F8A9C;
		  /* 821F8A9Ch */ case    1:  		/* addi R5, R11, 26488 */
		/* 821F8A9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6778);
		/* 821F8A9Ch case    1:*/		return 0x821F8AA0;
	}
	return 0x821F8AA0;
} // Block from 821F8A98h-821F8AA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8AA0);
		  /* 821F8AA0h */ case    0:  		/* li R4, 4532 */
		/* 821F8AA0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x11B4);
		/* 821F8AA0h case    0:*/		return 0x821F8AA4;
		  /* 821F8AA4h */ case    1:  		/* mr R3, R26 */
		/* 821F8AA4h case    1:*/		regs.R3 = regs.R26;
		/* 821F8AA4h case    1:*/		return 0x821F8AA8;
		  /* 821F8AA8h */ case    2:  		/* bl -683072 */
		/* 821F8AA8h case    2:*/		regs.LR = 0x821F8AAC; return 0x82151E68;
		/* 821F8AA8h case    2:*/		return 0x821F8AAC;
	}
	return 0x821F8AAC;
} // Block from 821F8AA0h-821F8AACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8AAC);
		  /* 821F8AACh */ case    0:  		/* lwz R11, <#[R29 + 36]> */
		/* 821F8AACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821F8AACh case    0:*/		return 0x821F8AB0;
		  /* 821F8AB0h */ case    1:  		/* cmpwi CR6, R10, 33 */
		/* 821F8AB0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000021);
		/* 821F8AB0h case    1:*/		return 0x821F8AB4;
		  /* 821F8AB4h */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 821F8AB4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F8ADC;  }
		/* 821F8AB4h case    2:*/		return 0x821F8AB8;
		  /* 821F8AB8h */ case    3:  		/* lwz R11, <#[R11 + 12]> */
		/* 821F8AB8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F8AB8h case    3:*/		return 0x821F8ABC;
		  /* 821F8ABCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821F8ABCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8ABCh case    4:*/		return 0x821F8AC0;
		  /* 821F8AC0h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821F8AC0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821F8AD0;  }
		/* 821F8AC0h case    5:*/		return 0x821F8AC4;
		  /* 821F8AC4h */ case    6:  		/* lwz R9, <#[R11 + 4]> */
		/* 821F8AC4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8AC4h case    6:*/		return 0x821F8AC8;
		  /* 821F8AC8h */ case    7:  		/* cmpwi CR6, R9, 1 */
		/* 821F8AC8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 821F8AC8h case    7:*/		return 0x821F8ACC;
		  /* 821F8ACCh */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 821F8ACCh case    8:*/		if ( regs.CR[6].eq ) { return 0x821F8AF0;  }
		/* 821F8ACCh case    8:*/		return 0x821F8AD0;
	}
	return 0x821F8AD0;
} // Block from 821F8AACh-821F8AD0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F8AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8AD0);
		  /* 821F8AD0h */ case    0:  		/* li R4, 4801 */
		/* 821F8AD0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8AD0h case    0:*/		return 0x821F8AD4;
		  /* 821F8AD4h */ case    1:  		/* mr R3, R26 */
		/* 821F8AD4h case    1:*/		regs.R3 = regs.R26;
		/* 821F8AD4h case    1:*/		return 0x821F8AD8;
		  /* 821F8AD8h */ case    2:  		/* bl -683120 */
		/* 821F8AD8h case    2:*/		regs.LR = 0x821F8ADC; return 0x82151E68;
		/* 821F8AD8h case    2:*/		return 0x821F8ADC;
	}
	return 0x821F8ADC;
} // Block from 821F8AD0h-821F8ADCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8ADC);
		  /* 821F8ADCh */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821F8ADCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8ADCh case    0:*/		return 0x821F8AE0;
		  /* 821F8AE0h */ case    1:  		/* bc 12, CR6_EQ, 764 */
		/* 821F8AE0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F8DDC;  }
		/* 821F8AE0h case    1:*/		return 0x821F8AE4;
		  /* 821F8AE4h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821F8AE4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8AE4h case    2:*/		return 0x821F8AE8;
		  /* 821F8AE8h */ case    3:  		/* cmpwi CR6, R9, 1 */
		/* 821F8AE8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 821F8AE8h case    3:*/		return 0x821F8AEC;
		  /* 821F8AECh */ case    4:  		/* bc 4, CR6_EQ, 752 */
		/* 821F8AECh case    4:*/		if ( !regs.CR[6].eq ) { return 0x821F8DDC;  }
		/* 821F8AECh case    4:*/		return 0x821F8AF0;
	}
	return 0x821F8AF0;
} // Block from 821F8ADCh-821F8AF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F8AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8AF0);
		  /* 821F8AF0h */ case    0:  		/* lwz R28, <#[R11 + 8]> */
		/* 821F8AF0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 821F8AF0h case    0:*/		return 0x821F8AF4;
		  /* 821F8AF4h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 821F8AF4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821F8AF4h case    1:*/		return 0x821F8AF8;
		  /* 821F8AF8h */ case    2:  		/* bc 12, CR6_EQ, 728 */
		/* 821F8AF8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F8DD0;  }
		/* 821F8AF8h case    2:*/		return 0x821F8AFC;
		  /* 821F8AFCh */ case    3:  		/* lwz R11, <#[R28 + 4]> */
		/* 821F8AFCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821F8AFCh case    3:*/		return 0x821F8B00;
		  /* 821F8B00h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 821F8B00h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F8B00h case    4:*/		return 0x821F8B04;
		  /* 821F8B04h */ case    5:  		/* bc 4, CR6_EQ, 716 */
		/* 821F8B04h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F8DD0;  }
		/* 821F8B04h case    5:*/		return 0x821F8B08;
		  /* 821F8B08h */ case    6:  		/* mr R30, R31 */
		/* 821F8B08h case    6:*/		regs.R30 = regs.R31;
		/* 821F8B08h case    6:*/		return 0x821F8B0C;
		  /* 821F8B0Ch */ case    7:  		/* cmpwi CR6, R10, 33 */
		/* 821F8B0Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000021);
		/* 821F8B0Ch case    7:*/		return 0x821F8B10;
		  /* 821F8B10h */ case    8:  		/* bc 4, CR6_EQ, 28 */
		/* 821F8B10h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821F8B2C;  }
		/* 821F8B10h case    8:*/		return 0x821F8B14;
		  /* 821F8B14h */ case    9:  		/* lwz R4, <#[R28 + 12]> */
		/* 821F8B14h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000000C) );
		/* 821F8B14h case    9:*/		return 0x821F8B18;
		  /* 821F8B18h */ case   10:  		/* lwz R11, <#[R4 + 4]> */
		/* 821F8B18h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821F8B18h case   10:*/		return 0x821F8B1C;
		  /* 821F8B1Ch */ case   11:  		/* cmpwi CR6, R11, 1 */
		/* 821F8B1Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821F8B1Ch case   11:*/		return 0x821F8B20;
		  /* 821F8B20h */ case   12:  		/* bc 4, CR6_EQ, 52 */
		/* 821F8B20h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F8B54;  }
		/* 821F8B20h case   12:*/		return 0x821F8B24;
		  /* 821F8B24h */ case   13:  		/* lwz R4, <#[R4 + 8]> */
		/* 821F8B24h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 821F8B24h case   13:*/		return 0x821F8B28;
		  /* 821F8B28h */ case   14:  		/* b 44 */
		/* 821F8B28h case   14:*/		return 0x821F8B54;
		/* 821F8B28h case   14:*/		return 0x821F8B2C;
	}
	return 0x821F8B2C;
} // Block from 821F8AF0h-821F8B2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F8B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8B2C);
		  /* 821F8B2Ch */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821F8B2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821F8B2Ch case    0:*/		return 0x821F8B30;
		  /* 821F8B30h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F8B30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8B30h case    1:*/		return 0x821F8B34;
		  /* 821F8B34h */ case    2:  		/* bc 12, CR6_EQ, 656 */
		/* 821F8B34h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F8DC4;  }
		/* 821F8B34h case    2:*/		return 0x821F8B38;
		  /* 821F8B38h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8B38h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8B38h case    3:*/		return 0x821F8B3C;
		  /* 821F8B3Ch */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821F8B3Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F8B3Ch case    4:*/		return 0x821F8B40;
		  /* 821F8B40h */ case    5:  		/* bc 4, CR6_EQ, 644 */
		/* 821F8B40h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F8DC4;  }
		/* 821F8B40h case    5:*/		return 0x821F8B44;
		  /* 821F8B44h */ case    6:  		/* lwz R4, <#[R11 + 8]> */
		/* 821F8B44h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 821F8B44h case    6:*/		return 0x821F8B48;
		  /* 821F8B48h */ case    7:  		/* cmpwi CR6, R19, 1 */
		/* 821F8B48h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000001);
		/* 821F8B48h case    7:*/		return 0x821F8B4C;
		  /* 821F8B4Ch */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 821F8B4Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x821F8B54;  }
		/* 821F8B4Ch case    8:*/		return 0x821F8B50;
		  /* 821F8B50h */ case    9:  		/* li R30, 4 */
		/* 821F8B50h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821F8B50h case    9:*/		return 0x821F8B54;
	}
	return 0x821F8B54;
} // Block from 821F8B2Ch-821F8B54h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F8B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8B54);
		  /* 821F8B54h */ case    0:  		/* mr R3, R26 */
		/* 821F8B54h case    0:*/		regs.R3 = regs.R26;
		/* 821F8B54h case    0:*/		return 0x821F8B58;
		  /* 821F8B58h */ case    1:  		/* bl -46848 */
		/* 821F8B58h case    1:*/		regs.LR = 0x821F8B5C; return 0x821ED458;
		/* 821F8B58h case    1:*/		return 0x821F8B5C;
		  /* 821F8B5Ch */ case    2:  		/* cmplw CR6, R30, R3 */
		/* 821F8B5Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 821F8B5Ch case    2:*/		return 0x821F8B60;
		  /* 821F8B60h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821F8B60h case    3:*/		if ( regs.CR[6].eq ) { return 0x821F8B70;  }
		/* 821F8B60h case    3:*/		return 0x821F8B64;
		  /* 821F8B64h */ case    4:  		/* li R4, 4801 */
		/* 821F8B64h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8B64h case    4:*/		return 0x821F8B68;
		  /* 821F8B68h */ case    5:  		/* mr R3, R26 */
		/* 821F8B68h case    5:*/		regs.R3 = regs.R26;
		/* 821F8B68h case    5:*/		return 0x821F8B6C;
		  /* 821F8B6Ch */ case    6:  		/* bl -683268 */
		/* 821F8B6Ch case    6:*/		regs.LR = 0x821F8B70; return 0x82151E68;
		/* 821F8B6Ch case    6:*/		return 0x821F8B70;
	}
	return 0x821F8B70;
} // Block from 821F8B54h-821F8B70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F8B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8B70);
		  /* 821F8B70h */ case    0:  		/* addi R21, R30, 1 */
		/* 821F8B70h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R30,0x1);
		/* 821F8B70h case    0:*/		return 0x821F8B74;
		  /* 821F8B74h */ case    1:  		/* cmpwi CR6, R19, 1 */
		/* 821F8B74h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000001);
		/* 821F8B74h case    1:*/		return 0x821F8B78;
		  /* 821F8B78h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821F8B78h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F8B88;  }
		/* 821F8B78h case    2:*/		return 0x821F8B7C;
		  /* 821F8B7Ch */ case    3:  		/* rlwinm R11, R30, 1, 0, 30 */
		/* 821F8B7Ch case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R30);
		/* 821F8B7Ch case    3:*/		return 0x821F8B80;
		  /* 821F8B80h */ case    4:  		/* add R21, R11, R21 */
		/* 821F8B80h case    4:*/		cpu::op::add<0>(regs,&regs.R21,regs.R11,regs.R21);
		/* 821F8B80h case    4:*/		return 0x821F8B84;
		  /* 821F8B84h */ case    5:  		/* b 28 */
		/* 821F8B84h case    5:*/		return 0x821F8BA0;
		/* 821F8B84h case    5:*/		return 0x821F8B88;
	}
	return 0x821F8B88;
} // Block from 821F8B70h-821F8B88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F8B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8B88);
		  /* 821F8B88h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821F8B88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821F8B88h case    0:*/		return 0x821F8B8C;
		  /* 821F8B8Ch */ case    1:  		/* cmpwi CR6, R11, 33 */
		/* 821F8B8Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 821F8B8Ch case    1:*/		return 0x821F8B90;
	}
	return 0x821F8B90;
} // Block from 821F8B88h-821F8B90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8B90h
// Function '?MarkVariableAssignments@Compiler@D3DXShader@@AAAXPAVCNode@2@PAV?$Stack@PAVCNode@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8B90);
		  /* 821F8B90h */ case    0:  		/* bc 4, CR6_EQ, 16 */
		/* 821F8B90h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821F8BA0;  }
		/* 821F8B90h case    0:*/		return 0x821F8B94;
		  /* 821F8B94h */ case    1:  		/* cmpwi CR6, R19, 1 */
		/* 821F8B94h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000001);
		/* 821F8B94h case    1:*/		return 0x821F8B98;
		  /* 821F8B98h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 821F8B98h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821F8BA0;  }
		/* 821F8B98h case    2:*/		return 0x821F8B9C;
		  /* 821F8B9Ch */ case    3:  		/* addi R21, R21, 1 */
		/* 821F8B9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821F8B9Ch case    3:*/		return 0x821F8BA0;
	}
	return 0x821F8BA0;
} // Block from 821F8B90h-821F8BA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F8BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8BA0);
		  /* 821F8BA0h */ case    0:  		/* rlwinm. R20, R27, 0, 24, 31 */
		/* 821F8BA0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R20,regs.R27);
		/* 821F8BA0h case    0:*/		return 0x821F8BA4;
		  /* 821F8BA4h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821F8BA4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F8BAC;  }
		/* 821F8BA4h case    1:*/		return 0x821F8BA8;
		  /* 821F8BA8h */ case    2:  		/* add R21, R21, R31 */
		/* 821F8BA8h case    2:*/		cpu::op::add<0>(regs,&regs.R21,regs.R21,regs.R31);
		/* 821F8BA8h case    2:*/		return 0x821F8BAC;
	}
	return 0x821F8BAC;
} // Block from 821F8BA0h-821F8BACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8BAC);
		  /* 821F8BACh */ case    0:  		/* mr R4, R28 */
		/* 821F8BACh case    0:*/		regs.R4 = regs.R28;
		/* 821F8BACh case    0:*/		return 0x821F8BB0;
		  /* 821F8BB0h */ case    1:  		/* mr R3, R26 */
		/* 821F8BB0h case    1:*/		regs.R3 = regs.R26;
		/* 821F8BB0h case    1:*/		return 0x821F8BB4;
		  /* 821F8BB4h */ case    2:  		/* bl -46940 */
		/* 821F8BB4h case    2:*/		regs.LR = 0x821F8BB8; return 0x821ED458;
		/* 821F8BB4h case    2:*/		return 0x821F8BB8;
		  /* 821F8BB8h */ case    3:  		/* cmplw CR6, R21, R3 */
		/* 821F8BB8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R3);
		/* 821F8BB8h case    3:*/		return 0x821F8BBC;
		  /* 821F8BBCh */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821F8BBCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821F8BCC;  }
		/* 821F8BBCh case    4:*/		return 0x821F8BC0;
		  /* 821F8BC0h */ case    5:  		/* li R4, 4801 */
		/* 821F8BC0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8BC0h case    5:*/		return 0x821F8BC4;
		  /* 821F8BC4h */ case    6:  		/* mr R3, R26 */
		/* 821F8BC4h case    6:*/		regs.R3 = regs.R26;
		/* 821F8BC4h case    6:*/		return 0x821F8BC8;
		  /* 821F8BC8h */ case    7:  		/* bl -683360 */
		/* 821F8BC8h case    7:*/		regs.LR = 0x821F8BCC; return 0x82151E68;
		/* 821F8BC8h case    7:*/		return 0x821F8BCC;
	}
	return 0x821F8BCC;
} // Block from 821F8BACh-821F8BCCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F8BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8BCC);
		  /* 821F8BCCh */ case    0:  		/* mr R4, R17 */
		/* 821F8BCCh case    0:*/		regs.R4 = regs.R17;
		/* 821F8BCCh case    0:*/		return 0x821F8BD0;
		  /* 821F8BD0h */ case    1:  		/* addi R3, R1, 96 */
		/* 821F8BD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F8BD0h case    1:*/		return 0x821F8BD4;
		  /* 821F8BD4h */ case    2:  		/* bl -363940 */
		/* 821F8BD4h case    2:*/		regs.LR = 0x821F8BD8; return 0x8219FE30;
		/* 821F8BD4h case    2:*/		return 0x821F8BD8;
		  /* 821F8BD8h */ case    3:  		/* mr R4, R21 */
		/* 821F8BD8h case    3:*/		regs.R4 = regs.R21;
		/* 821F8BD8h case    3:*/		return 0x821F8BDC;
		  /* 821F8BDCh */ case    4:  		/* addi R3, R1, 96 */
		/* 821F8BDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F8BDCh case    4:*/		return 0x821F8BE0;
		  /* 821F8BE0h */ case    5:  		/* bl -29296 */
		/* 821F8BE0h case    5:*/		regs.LR = 0x821F8BE4; return 0x821F1970;
		/* 821F8BE0h case    5:*/		return 0x821F8BE4;
		  /* 821F8BE4h */ case    6:  		/* addi R3, R1, 96 */
		/* 821F8BE4h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F8BE4h case    6:*/		return 0x821F8BE8;
		  /* 821F8BE8h */ case    7:  		/* bl -228744 */
		/* 821F8BE8h case    7:*/		regs.LR = 0x821F8BEC; return 0x821C0E60;
		/* 821F8BE8h case    7:*/		return 0x821F8BEC;
		  /* 821F8BECh */ case    8:  		/* mr R23, R3 */
		/* 821F8BECh case    8:*/		regs.R23 = regs.R3;
		/* 821F8BECh case    8:*/		return 0x821F8BF0;
		  /* 821F8BF0h */ case    9:  		/* li R7, 1 */
		/* 821F8BF0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F8BF0h case    9:*/		return 0x821F8BF4;
		  /* 821F8BF4h */ case   10:  		/* li R6, 0 */
		/* 821F8BF4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F8BF4h case   10:*/		return 0x821F8BF8;
		  /* 821F8BF8h */ case   11:  		/* mr R5, R30 */
		/* 821F8BF8h case   11:*/		regs.R5 = regs.R30;
		/* 821F8BF8h case   11:*/		return 0x821F8BFC;
		  /* 821F8BFCh */ case   12:  		/* addi R4, R1, 96 */
		/* 821F8BFCh case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821F8BFCh case   12:*/		return 0x821F8C00;
		  /* 821F8C00h */ case   13:  		/* mr R3, R26 */
		/* 821F8C00h case   13:*/		regs.R3 = regs.R26;
		/* 821F8C00h case   13:*/		return 0x821F8C04;
		  /* 821F8C04h */ case   14:  		/* bl -26340 */
		/* 821F8C04h case   14:*/		regs.LR = 0x821F8C08; return 0x821F2520;
		/* 821F8C04h case   14:*/		return 0x821F8C08;
		  /* 821F8C08h */ case   15:  		/* mr R22, R3 */
		/* 821F8C08h case   15:*/		regs.R22 = regs.R3;
		/* 821F8C08h case   15:*/		return 0x821F8C0C;
		  /* 821F8C0Ch */ case   16:  		/* li R28, 0 */
		/* 821F8C0Ch case   16:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821F8C0Ch case   16:*/		return 0x821F8C10;
		  /* 821F8C10h */ case   17:  		/* li R27, 0 */
		/* 821F8C10h case   17:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821F8C10h case   17:*/		return 0x821F8C14;
		  /* 821F8C14h */ case   18:  		/* li R25, 0 */
		/* 821F8C14h case   18:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821F8C14h case   18:*/		return 0x821F8C18;
		  /* 821F8C18h */ case   19:  		/* cmpwi CR6, R19, 1 */
		/* 821F8C18h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000001);
		/* 821F8C18h case   19:*/		return 0x821F8C1C;
		  /* 821F8C1Ch */ case   20:  		/* bc 4, CR6_EQ, 64 */
		/* 821F8C1Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x821F8C5C;  }
		/* 821F8C1Ch case   20:*/		return 0x821F8C20;
		  /* 821F8C20h */ case   21:  		/* li R7, 1 */
		/* 821F8C20h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F8C20h case   21:*/		return 0x821F8C24;
		  /* 821F8C24h */ case   22:  		/* li R6, 0 */
		/* 821F8C24h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F8C24h case   22:*/		return 0x821F8C28;
		  /* 821F8C28h */ case   23:  		/* mr R5, R30 */
		/* 821F8C28h case   23:*/		regs.R5 = regs.R30;
		/* 821F8C28h case   23:*/		return 0x821F8C2C;
		  /* 821F8C2Ch */ case   24:  		/* addi R4, R1, 96 */
		/* 821F8C2Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821F8C2Ch case   24:*/		return 0x821F8C30;
		  /* 821F8C30h */ case   25:  		/* mr R3, R26 */
		/* 821F8C30h case   25:*/		regs.R3 = regs.R26;
		/* 821F8C30h case   25:*/		return 0x821F8C34;
		  /* 821F8C34h */ case   26:  		/* bl -26388 */
		/* 821F8C34h case   26:*/		regs.LR = 0x821F8C38; return 0x821F2520;
		/* 821F8C34h case   26:*/		return 0x821F8C38;
		  /* 821F8C38h */ case   27:  		/* mr R28, R3 */
		/* 821F8C38h case   27:*/		regs.R28 = regs.R3;
		/* 821F8C38h case   27:*/		return 0x821F8C3C;
		  /* 821F8C3Ch */ case   28:  		/* li R7, 1 */
		/* 821F8C3Ch case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F8C3Ch case   28:*/		return 0x821F8C40;
		  /* 821F8C40h */ case   29:  		/* li R6, 0 */
		/* 821F8C40h case   29:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F8C40h case   29:*/		return 0x821F8C44;
		  /* 821F8C44h */ case   30:  		/* mr R5, R30 */
		/* 821F8C44h case   30:*/		regs.R5 = regs.R30;
		/* 821F8C44h case   30:*/		return 0x821F8C48;
		  /* 821F8C48h */ case   31:  		/* addi R4, R1, 96 */
		/* 821F8C48h case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821F8C48h case   31:*/		return 0x821F8C4C;
		  /* 821F8C4Ch */ case   32:  		/* mr R3, R26 */
		/* 821F8C4Ch case   32:*/		regs.R3 = regs.R26;
		/* 821F8C4Ch case   32:*/		return 0x821F8C50;
		  /* 821F8C50h */ case   33:  		/* bl -26416 */
		/* 821F8C50h case   33:*/		regs.LR = 0x821F8C54; return 0x821F2520;
		/* 821F8C50h case   33:*/		return 0x821F8C54;
		  /* 821F8C54h */ case   34:  		/* mr R27, R3 */
		/* 821F8C54h case   34:*/		regs.R27 = regs.R3;
		/* 821F8C54h case   34:*/		return 0x821F8C58;
		  /* 821F8C58h */ case   35:  		/* b 48 */
		/* 821F8C58h case   35:*/		return 0x821F8C88;
		/* 821F8C58h case   35:*/		return 0x821F8C5C;
	}
	return 0x821F8C5C;
} // Block from 821F8BCCh-821F8C5Ch (36 instructions)

//////////////////////////////////////////////////////
// Block at 821F8C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8C5C);
		  /* 821F8C5Ch */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821F8C5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821F8C5Ch case    0:*/		return 0x821F8C60;
		  /* 821F8C60h */ case    1:  		/* cmpwi CR6, R11, 33 */
		/* 821F8C60h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 821F8C60h case    1:*/		return 0x821F8C64;
		  /* 821F8C64h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 821F8C64h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F8C88;  }
		/* 821F8C64h case    2:*/		return 0x821F8C68;
		  /* 821F8C68h */ case    3:  		/* cmpwi CR6, R19, 1 */
		/* 821F8C68h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000001);
		/* 821F8C68h case    3:*/		return 0x821F8C6C;
		  /* 821F8C6Ch */ case    4:  		/* bc 4, CR6_GT, 28 */
		/* 821F8C6Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x821F8C88;  }
		/* 821F8C6Ch case    4:*/		return 0x821F8C70;
		  /* 821F8C70h */ case    5:  		/* addi R3, R1, 96 */
		/* 821F8C70h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F8C70h case    5:*/		return 0x821F8C74;
		  /* 821F8C74h */ case    6:  		/* bl -228884 */
		/* 821F8C74h case    6:*/		regs.LR = 0x821F8C78; return 0x821C0E60;
		/* 821F8C74h case    6:*/		return 0x821F8C78;
		  /* 821F8C78h */ case    7:  		/* mr R4, R3 */
		/* 821F8C78h case    7:*/		regs.R4 = regs.R3;
		/* 821F8C78h case    7:*/		return 0x821F8C7C;
		  /* 821F8C7Ch */ case    8:  		/* mr R3, R26 */
		/* 821F8C7Ch case    8:*/		regs.R3 = regs.R26;
		/* 821F8C7Ch case    8:*/		return 0x821F8C80;
		  /* 821F8C80h */ case    9:  		/* bl -26880 */
		/* 821F8C80h case    9:*/		regs.LR = 0x821F8C84; return 0x821F2380;
		/* 821F8C80h case    9:*/		return 0x821F8C84;
		  /* 821F8C84h */ case   10:  		/* mr R25, R3 */
		/* 821F8C84h case   10:*/		regs.R25 = regs.R3;
		/* 821F8C84h case   10:*/		return 0x821F8C88;
	}
	return 0x821F8C88;
} // Block from 821F8C5Ch-821F8C88h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F8C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8C88);
		  /* 821F8C88h */ case    0:  		/* li R24, 0 */
		/* 821F8C88h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821F8C88h case    0:*/		return 0x821F8C8C;
		  /* 821F8C8Ch */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 821F8C8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821F8C8Ch case    1:*/		return 0x821F8C90;
		  /* 821F8C90h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 821F8C90h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F8CE0;  }
		/* 821F8C90h case    2:*/		return 0x821F8C94;
		  /* 821F8C94h */ case    3:  		/* addi R11, R31, 2 */
		/* 821F8C94h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x2);
		/* 821F8C94h case    3:*/		return 0x821F8C98;
		  /* 821F8C98h */ case    4:  		/* li R5, 0 */
		/* 821F8C98h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F8C98h case    4:*/		return 0x821F8C9C;
		  /* 821F8C9Ch */ case    5:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 821F8C9Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 821F8C9Ch case    5:*/		return 0x821F8CA0;
		  /* 821F8CA0h */ case    6:  		/* mr R3, R26 */
		/* 821F8CA0h case    6:*/		regs.R3 = regs.R26;
		/* 821F8CA0h case    6:*/		return 0x821F8CA4;
		  /* 821F8CA4h */ case    7:  		/* bl -444028 */
		/* 821F8CA4h case    7:*/		regs.LR = 0x821F8CA8; return 0x8218C628;
		/* 821F8CA4h case    7:*/		return 0x821F8CA8;
		  /* 821F8CA8h */ case    8:  		/* mr R24, R3 */
		/* 821F8CA8h case    8:*/		regs.R24 = regs.R3;
		/* 821F8CA8h case    8:*/		return 0x821F8CAC;
		  /* 821F8CACh */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 821F8CACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F8CACh case    9:*/		return 0x821F8CB0;
		  /* 821F8CB0h */ case   10:  		/* stw R31, <#[R3 + 4]> */
		/* 821F8CB0h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 821F8CB0h case   10:*/		return 0x821F8CB4;
		  /* 821F8CB4h */ case   11:  		/* bc 12, CR6_EQ, 44 */
		/* 821F8CB4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821F8CE0;  }
		/* 821F8CB4h case   11:*/		return 0x821F8CB8;
		  /* 821F8CB8h */ case   12:  		/* addi R29, R3, 4 */
		/* 821F8CB8h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x4);
		/* 821F8CB8h case   12:*/		return 0x821F8CBC;
		  /* 821F8CBCh */ case   13:  		/* mr R30, R31 */
		/* 821F8CBCh case   13:*/		regs.R30 = regs.R31;
		/* 821F8CBCh case   13:*/		return 0x821F8CC0;
		  /* 821F8CC0h */ case   14:  		/* addi R3, R1, 96 */
		/* 821F8CC0h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F8CC0h case   14:*/		return 0x821F8CC4;
		  /* 821F8CC4h */ case   15:  		/* bl -228964 */
		/* 821F8CC4h case   15:*/		regs.LR = 0x821F8CC8; return 0x821C0E60;
		/* 821F8CC4h case   15:*/		return 0x821F8CC8;
		  /* 821F8CC8h */ case   16:  		/* mr R4, R3 */
		/* 821F8CC8h case   16:*/		regs.R4 = regs.R3;
		/* 821F8CC8h case   16:*/		return 0x821F8CCC;
		  /* 821F8CCCh */ case   17:  		/* mr R3, R26 */
		/* 821F8CCCh case   17:*/		regs.R3 = regs.R26;
		/* 821F8CCCh case   17:*/		return 0x821F8CD0;
		  /* 821F8CD0h */ case   18:  		/* bl -26960 */
		/* 821F8CD0h case   18:*/		regs.LR = 0x821F8CD4; return 0x821F2380;
		/* 821F8CD0h case   18:*/		return 0x821F8CD4;
		  /* 821F8CD4h */ case   19:  		/* addic. R30, R30, -1 */
		/* 821F8CD4h case   19:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821F8CD4h case   19:*/		return 0x821F8CD8;
		  /* 821F8CD8h */ case   20:  		/* stwu R3, <#[R29 + 4]> */
		/* 821F8CD8h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821F8CD8h case   20:*/		return 0x821F8CDC;
		  /* 821F8CDCh */ case   21:  		/* bc 4, CR0_EQ, -28 */
		/* 821F8CDCh case   21:*/		if ( !regs.CR[0].eq ) { return 0x821F8CC0;  }
		/* 821F8CDCh case   21:*/		return 0x821F8CE0;
	}
	return 0x821F8CE0;
} // Block from 821F8C88h-821F8CE0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821F8CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8CE0);
		  /* 821F8CE0h */ case    0:  		/* mr R10, R28 */
		/* 821F8CE0h case    0:*/		regs.R10 = regs.R28;
		/* 821F8CE0h case    0:*/		return 0x821F8CE4;
		  /* 821F8CE4h */ case    1:  		/* stw R25, <#[R1 + 92]> */
		/* 821F8CE4h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000005C) );
		/* 821F8CE4h case    1:*/		return 0x821F8CE8;
		  /* 821F8CE8h */ case    2:  		/* li R9, 0 */
		/* 821F8CE8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821F8CE8h case    2:*/		return 0x821F8CEC;
		  /* 821F8CECh */ case    3:  		/* stw R27, <#[R1 + 84]> */
		/* 821F8CECh case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 821F8CECh case    3:*/		return 0x821F8CF0;
		  /* 821F8CF0h */ case    4:  		/* mr R8, R19 */
		/* 821F8CF0h case    4:*/		regs.R8 = regs.R19;
		/* 821F8CF0h case    4:*/		return 0x821F8CF4;
		  /* 821F8CF4h */ case    5:  		/* mr R7, R18 */
		/* 821F8CF4h case    5:*/		regs.R7 = regs.R18;
		/* 821F8CF4h case    5:*/		return 0x821F8CF8;
		  /* 821F8CF8h */ case    6:  		/* mr R6, R31 */
		/* 821F8CF8h case    6:*/		regs.R6 = regs.R31;
		/* 821F8CF8h case    6:*/		return 0x821F8CFC;
		  /* 821F8CFCh */ case    7:  		/* mr R5, R22 */
		/* 821F8CFCh case    7:*/		regs.R5 = regs.R22;
		/* 821F8CFCh case    7:*/		return 0x821F8D00;
		  /* 821F8D00h */ case    8:  		/* mr R4, R23 */
		/* 821F8D00h case    8:*/		regs.R4 = regs.R23;
		/* 821F8D00h case    8:*/		return 0x821F8D04;
		  /* 821F8D04h */ case    9:  		/* mr R3, R26 */
		/* 821F8D04h case    9:*/		regs.R3 = regs.R26;
		/* 821F8D04h case    9:*/		return 0x821F8D08;
		  /* 821F8D08h */ case   10:  		/* bl -14816 */
		/* 821F8D08h case   10:*/		regs.LR = 0x821F8D0C; return 0x821F5328;
		/* 821F8D08h case   10:*/		return 0x821F8D0C;
		  /* 821F8D0Ch */ case   11:  		/* mr R29, R3 */
		/* 821F8D0Ch case   11:*/		regs.R29 = regs.R3;
		/* 821F8D0Ch case   11:*/		return 0x821F8D10;
		  /* 821F8D10h */ case   12:  		/* cmplwi CR6, R20, 0 */
		/* 821F8D10h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821F8D10h case   12:*/		return 0x821F8D14;
		  /* 821F8D14h */ case   13:  		/* bc 12, CR6_EQ, 84 */
		/* 821F8D14h case   13:*/		if ( regs.CR[6].eq ) { return 0x821F8D68;  }
		/* 821F8D14h case   13:*/		return 0x821F8D18;
		  /* 821F8D18h */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821F8D18h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821F8D18h case   14:*/		return 0x821F8D1C;
		  /* 821F8D1Ch */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 821F8D1Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821F8D3C;  }
		/* 821F8D1Ch case   15:*/		return 0x821F8D20;
		  /* 821F8D20h */ case   16:  		/* addi R30, R24, 4 */
		/* 821F8D20h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R24,0x4);
		/* 821F8D20h case   16:*/		return 0x821F8D24;
		  /* 821F8D24h */ case   17:  		/* mr R3, R29 */
		/* 821F8D24h case   17:*/		regs.R3 = regs.R29;
		/* 821F8D24h case   17:*/		return 0x821F8D28;
		  /* 821F8D28h */ case   18:  		/* lwz R4, <#[R30 + 4]> */
		/* 821F8D28h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 821F8D28h case   18:*/		return 0x821F8D2C;
		  /* 821F8D2Ch */ case   19:  		/* bl -527204 */
		/* 821F8D2Ch case   19:*/		regs.LR = 0x821F8D30; return 0x821781C8;
		/* 821F8D2Ch case   19:*/		return 0x821F8D30;
		  /* 821F8D30h */ case   20:  		/* addic. R31, R31, -1 */
		/* 821F8D30h case   20:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821F8D30h case   20:*/		return 0x821F8D34;
		  /* 821F8D34h */ case   21:  		/* stwu R3, <#[R30 + 4]> */
		/* 821F8D34h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821F8D34h case   21:*/		return 0x821F8D38;
		  /* 821F8D38h */ case   22:  		/* bc 4, CR0_EQ, -20 */
		/* 821F8D38h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821F8D24;  }
		/* 821F8D38h case   22:*/		return 0x821F8D3C;
	}
	return 0x821F8D3C;
} // Block from 821F8CE0h-821F8D3Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821F8D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8D3C);
		  /* 821F8D3Ch */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 821F8D3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821F8D3Ch case    0:*/		return 0x821F8D40;
		  /* 821F8D40h */ case    1:  		/* mr R3, R26 */
		/* 821F8D40h case    1:*/		regs.R3 = regs.R26;
		/* 821F8D40h case    1:*/		return 0x821F8D44;
		  /* 821F8D44h */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821F8D44h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821F8D44h case    2:*/		return 0x821F8D48;
		  /* 821F8D48h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821F8D48h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821F8D48h case    3:*/		return 0x821F8D4C;
		  /* 821F8D4Ch */ case    4:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821F8D4Ch case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821F8D4Ch case    4:*/		return 0x821F8D50;
		  /* 821F8D50h */ case    5:  		/* bl -608544 */
		/* 821F8D50h case    5:*/		regs.LR = 0x821F8D54; return 0x82164430;
		/* 821F8D50h case    5:*/		return 0x821F8D54;
		  /* 821F8D54h */ case    6:  		/* addi R11, R29, -4 */
		/* 821F8D54h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFC);
		/* 821F8D54h case    6:*/		return 0x821F8D58;
		  /* 821F8D58h */ case    7:  		/* stwx R24, <#[R3 + R11]> */
		/* 821F8D58h case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821F8D58h case    7:*/		return 0x821F8D5C;
		  /* 821F8D5Ch */ case    8:  		/* lwz R11, <#[R26 + 40]> */
		/* 821F8D5Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 821F8D5Ch case    8:*/		return 0x821F8D60;
		  /* 821F8D60h */ case    9:  		/* oris R11, R11, 16 */
		/* 821F8D60h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821F8D60h case    9:*/		return 0x821F8D64;
		  /* 821F8D64h */ case   10:  		/* stw R11, <#[R26 + 40]> */
		/* 821F8D64h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 821F8D64h case   10:*/		return 0x821F8D68;
	}
	return 0x821F8D68;
} // Block from 821F8D3Ch-821F8D68h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F8D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8D68);
		  /* 821F8D68h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 821F8D68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821F8D68h case    0:*/		return 0x821F8D6C;
		  /* 821F8D6Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821F8D6Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821F8D80;  }
		/* 821F8D6Ch case    1:*/		return 0x821F8D70;
		  /* 821F8D70h */ case    2:  		/* mr R5, R21 */
		/* 821F8D70h case    2:*/		regs.R5 = regs.R21;
		/* 821F8D70h case    2:*/		return 0x821F8D74;
		  /* 821F8D74h */ case    3:  		/* mr R4, R17 */
		/* 821F8D74h case    3:*/		regs.R4 = regs.R17;
		/* 821F8D74h case    3:*/		return 0x821F8D78;
		  /* 821F8D78h */ case    4:  		/* addi R3, R1, 96 */
		/* 821F8D78h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821F8D78h case    4:*/		return 0x821F8D7C;
		  /* 821F8D7Ch */ case    5:  		/* bl -30108 */
		/* 821F8D7Ch case    5:*/		regs.LR = 0x821F8D80; return 0x821F17E0;
		/* 821F8D7Ch case    5:*/		return 0x821F8D80;
	}
	return 0x821F8D80;
} // Block from 821F8D68h-821F8D80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F8D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8D80);
		  /* 821F8D80h */ case    0:  		/* li R31, 0 */
		/* 821F8D80h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821F8D80h case    0:*/		return 0x821F8D84;
		  /* 821F8D84h */ case    1:  		/* cmplwi CR6, R16, 0 */
		/* 821F8D84h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821F8D84h case    1:*/		return 0x821F8D88;
		  /* 821F8D88h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821F8D88h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F8DBC;  }
		/* 821F8D88h case    2:*/		return 0x821F8D8C;
		  /* 821F8D8Ch */ case    3:  		/* stw R29, <#[R1 + 96]> */
		/* 821F8D8Ch case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 821F8D8Ch case    3:*/		return 0x821F8D90;
		  /* 821F8D90h */ case    4:  		/* mr R3, R17 */
		/* 821F8D90h case    4:*/		regs.R3 = regs.R17;
		/* 821F8D90h case    4:*/		return 0x821F8D94;
		  /* 821F8D94h */ case    5:  		/* lwz R11, <#[R1 + 100]> */
		/* 821F8D94h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821F8D94h case    5:*/		return 0x821F8D98;
		  /* 821F8D98h */ case    6:  		/* rlwimi R11, R31, 2, 16, 29 */
		/* 821F8D98h case    6:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R11,regs.R31);
		/* 821F8D98h case    6:*/		return 0x821F8D9C;
		  /* 821F8D9Ch */ case    7:  		/* rlwinm R11, R11, 0, 15, 29 */
		/* 821F8D9Ch case    7:*/		cpu::op::rlwinm<0,0,15,29>(regs,&regs.R11,regs.R11);
		/* 821F8D9Ch case    7:*/		return 0x821F8DA0;
		  /* 821F8DA0h */ case    8:  		/* ori R11, R11, 1 */
		/* 821F8DA0h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F8DA0h case    8:*/		return 0x821F8DA4;
		  /* 821F8DA4h */ case    9:  		/* stw R11, <#[R1 + 100]> */
		/* 821F8DA4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821F8DA4h case    9:*/		return 0x821F8DA8;
		  /* 821F8DA8h */ case   10:  		/* ld R4, <#[R1 + 96]> */
		/* 821F8DA8h case   10:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000060) );
		/* 821F8DA8h case   10:*/		return 0x821F8DAC;
		  /* 821F8DACh */ case   11:  		/* bl -8372 */
		/* 821F8DACh case   11:*/		regs.LR = 0x821F8DB0; return 0x821F6CF8;
		/* 821F8DACh case   11:*/		return 0x821F8DB0;
		  /* 821F8DB0h */ case   12:  		/* addi R31, R31, 1 */
		/* 821F8DB0h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821F8DB0h case   12:*/		return 0x821F8DB4;
		  /* 821F8DB4h */ case   13:  		/* cmplw CR6, R31, R16 */
		/* 821F8DB4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R16);
		/* 821F8DB4h case   13:*/		return 0x821F8DB8;
		  /* 821F8DB8h */ case   14:  		/* bc 12, CR6_LT, -44 */
		/* 821F8DB8h case   14:*/		if ( regs.CR[6].lt ) { return 0x821F8D8C;  }
		/* 821F8DB8h case   14:*/		return 0x821F8DBC;
	}
	return 0x821F8DBC;
} // Block from 821F8D80h-821F8DBCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F8DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8DBC);
		  /* 821F8DBCh */ case    0:  		/* addi R1, R1, 256 */
		/* 821F8DBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 821F8DBCh case    0:*/		return 0x821F8DC0;
		  /* 821F8DC0h */ case    1:  		/* b -1473352 */
		/* 821F8DC0h case    1:*/		return 0x82091278;
		/* 821F8DC0h case    1:*/		return 0x821F8DC4;
	}
	return 0x821F8DC4;
} // Block from 821F8DBCh-821F8DC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8DC4);
		  /* 821F8DC4h */ case    0:  		/* li R4, 4801 */
		/* 821F8DC4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8DC4h case    0:*/		return 0x821F8DC8;
		  /* 821F8DC8h */ case    1:  		/* mr R3, R26 */
		/* 821F8DC8h case    1:*/		regs.R3 = regs.R26;
		/* 821F8DC8h case    1:*/		return 0x821F8DCC;
		  /* 821F8DCCh */ case    2:  		/* bl -683876 */
		/* 821F8DCCh case    2:*/		regs.LR = 0x821F8DD0; return 0x82151E68;
		/* 821F8DCCh case    2:*/		return 0x821F8DD0;
	}
	return 0x821F8DD0;
} // Block from 821F8DC4h-821F8DD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8DD0);
		  /* 821F8DD0h */ case    0:  		/* li R4, 4801 */
		/* 821F8DD0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8DD0h case    0:*/		return 0x821F8DD4;
		  /* 821F8DD4h */ case    1:  		/* mr R3, R26 */
		/* 821F8DD4h case    1:*/		regs.R3 = regs.R26;
		/* 821F8DD4h case    1:*/		return 0x821F8DD8;
		  /* 821F8DD8h */ case    2:  		/* bl -683888 */
		/* 821F8DD8h case    2:*/		regs.LR = 0x821F8DDC; return 0x82151E68;
		/* 821F8DD8h case    2:*/		return 0x821F8DDC;
	}
	return 0x821F8DDC;
} // Block from 821F8DD0h-821F8DDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8DDC);
		  /* 821F8DDCh */ case    0:  		/* li R4, 4801 */
		/* 821F8DDCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F8DDCh case    0:*/		return 0x821F8DE0;
		  /* 821F8DE0h */ case    1:  		/* mr R3, R26 */
		/* 821F8DE0h case    1:*/		regs.R3 = regs.R26;
		/* 821F8DE0h case    1:*/		return 0x821F8DE4;
		  /* 821F8DE4h */ case    2:  		/* bl -683900 */
		/* 821F8DE4h case    2:*/		regs.LR = 0x821F8DE8; return 0x82151E68;
		/* 821F8DE4h case    2:*/		return 0x821F8DE8;
	}
	return 0x821F8DE8;
} // Block from 821F8DDCh-821F8DE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8DE8);
		  /* 821F8DE8h */ case    0:  		/* mfspr R12, LR */
		/* 821F8DE8h case    0:*/		regs.R12 = regs.LR;
		/* 821F8DE8h case    0:*/		return 0x821F8DEC;
		  /* 821F8DECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821F8DECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F8DECh case    1:*/		return 0x821F8DF0;
		  /* 821F8DF0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821F8DF0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F8DF0h case    2:*/		return 0x821F8DF4;
		  /* 821F8DF4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821F8DF4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F8DF4h case    3:*/		return 0x821F8DF8;
		  /* 821F8DF8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821F8DF8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821F8DF8h case    4:*/		return 0x821F8DFC;
		  /* 821F8DFCh */ case    5:  		/* li R6, 0 */
		/* 821F8DFCh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F8DFCh case    5:*/		return 0x821F8E00;
		  /* 821F8E00h */ case    6:  		/* li R5, 0 */
		/* 821F8E00h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F8E00h case    6:*/		return 0x821F8E04;
		  /* 821F8E04h */ case    7:  		/* mr R30, R3 */
		/* 821F8E04h case    7:*/		regs.R30 = regs.R3;
		/* 821F8E04h case    7:*/		return 0x821F8E08;
		  /* 821F8E08h */ case    8:  		/* bl -439960 */
		/* 821F8E08h case    8:*/		regs.LR = 0x821F8E0C; return 0x8218D770;
		/* 821F8E08h case    8:*/		return 0x821F8E0C;
		  /* 821F8E0Ch */ case    9:  		/* mr R31, R3 */
		/* 821F8E0Ch case    9:*/		regs.R31 = regs.R3;
		/* 821F8E0Ch case    9:*/		return 0x821F8E10;
		  /* 821F8E10h */ case   10:  		/* lwz R11, <#[R31 + 4]> */
		/* 821F8E10h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821F8E10h case   10:*/		return 0x821F8E14;
		  /* 821F8E14h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821F8E14h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8E14h case   11:*/		return 0x821F8E18;
		  /* 821F8E18h */ case   12:  		/* bc 4, CR6_EQ, 24 */
		/* 821F8E18h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F8E30;  }
		/* 821F8E18h case   12:*/		return 0x821F8E1C;
		  /* 821F8E1Ch */ case   13:  		/* mr R3, R31 */
		/* 821F8E1Ch case   13:*/		regs.R3 = regs.R31;
		/* 821F8E1Ch case   13:*/		return 0x821F8E20;
		  /* 821F8E20h */ case   14:  		/* bl -6776 */
		/* 821F8E20h case   14:*/		regs.LR = 0x821F8E24; return 0x821F73A8;
		/* 821F8E20h case   14:*/		return 0x821F8E24;
		  /* 821F8E24h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821F8E24h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821F8E24h case   15:*/		return 0x821F8E28;
		  /* 821F8E28h */ case   16:  		/* li R11, 1 */
		/* 821F8E28h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821F8E28h case   16:*/		return 0x821F8E2C;
		  /* 821F8E2Ch */ case   17:  		/* bc 12, CR0_EQ, 8 */
		/* 821F8E2Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x821F8E34;  }
		/* 821F8E2Ch case   17:*/		return 0x821F8E30;
	}
	return 0x821F8E30;
} // Block from 821F8DE8h-821F8E30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F8E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8E30);
		  /* 821F8E30h */ case    0:  		/* li R11, 0 */
		/* 821F8E30h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F8E30h case    0:*/		return 0x821F8E34;
	}
	return 0x821F8E34;
} // Block from 821F8E30h-821F8E34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F8E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8E34);
		  /* 821F8E34h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821F8E34h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821F8E34h case    0:*/		return 0x821F8E38;
		  /* 821F8E38h */ case    1:  		/* bc 4, CR0_EQ, 128 */
		/* 821F8E38h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F8EB8;  }
		/* 821F8E38h case    1:*/		return 0x821F8E3C;
		  /* 821F8E3Ch */ case    2:  		/* mr R3, R31 */
		/* 821F8E3Ch case    2:*/		regs.R3 = regs.R31;
		/* 821F8E3Ch case    2:*/		return 0x821F8E40;
		  /* 821F8E40h */ case    3:  		/* bl -6720 */
		/* 821F8E40h case    3:*/		regs.LR = 0x821F8E44; return 0x821F7400;
		/* 821F8E40h case    3:*/		return 0x821F8E44;
		  /* 821F8E44h */ case    4:  		/* cmpwi CR6, R3, 38 */
		/* 821F8E44h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000026);
		/* 821F8E44h case    4:*/		return 0x821F8E48;
		  /* 821F8E48h */ case    5:  		/* bc 12, CR6_GT, 60 */
		/* 821F8E48h case    5:*/		if ( regs.CR[6].gt ) { return 0x821F8E84;  }
		/* 821F8E48h case    5:*/		return 0x821F8E4C;
		  /* 821F8E4Ch */ case    6:  		/* cmpwi CR6, R3, 33 */
		/* 821F8E4Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000021);
		/* 821F8E4Ch case    6:*/		return 0x821F8E50;
		  /* 821F8E50h */ case    7:  		/* bc 4, CR6_LT, 92 */
		/* 821F8E50h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821F8EAC;  }
		/* 821F8E50h case    7:*/		return 0x821F8E54;
		  /* 821F8E54h */ case    8:  		/* cmpwi CR6, R3, 22 */
		/* 821F8E54h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000016);
		/* 821F8E54h case    8:*/		return 0x821F8E58;
		  /* 821F8E58h */ case    9:  		/* bc 12, CR6_LT, 36 */
		/* 821F8E58h case    9:*/		if ( regs.CR[6].lt ) { return 0x821F8E7C;  }
		/* 821F8E58h case    9:*/		return 0x821F8E5C;
		  /* 821F8E5Ch */ case   10:  		/* cmpwi CR6, R3, 25 */
		/* 821F8E5Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000019);
		/* 821F8E5Ch case   10:*/		return 0x821F8E60;
		  /* 821F8E60h */ case   11:  		/* bc 4, CR6_GT, 76 */
		/* 821F8E60h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821F8EAC;  }
		/* 821F8E60h case   11:*/		return 0x821F8E64;
		  /* 821F8E64h */ case   12:  		/* cmpwi CR6, R3, 27 */
		/* 821F8E64h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000001B);
		/* 821F8E64h case   12:*/		return 0x821F8E68;
		  /* 821F8E68h */ case   13:  		/* bc 12, CR6_EQ, 68 */
		/* 821F8E68h case   13:*/		if ( regs.CR[6].eq ) { return 0x821F8EAC;  }
		/* 821F8E68h case   13:*/		return 0x821F8E6C;
		  /* 821F8E6Ch */ case   14:  		/* cmpwi CR6, R3, 28 */
		/* 821F8E6Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000001C);
		/* 821F8E6Ch case   14:*/		return 0x821F8E70;
		  /* 821F8E70h */ case   15:  		/* bc 4, CR6_GT, 12 */
		/* 821F8E70h case   15:*/		if ( !regs.CR[6].gt ) { return 0x821F8E7C;  }
		/* 821F8E70h case   15:*/		return 0x821F8E74;
		  /* 821F8E74h */ case   16:  		/* cmpwi CR6, R3, 30 */
		/* 821F8E74h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000001E);
		/* 821F8E74h case   16:*/		return 0x821F8E78;
		  /* 821F8E78h */ case   17:  		/* bc 4, CR6_GT, 52 */
		/* 821F8E78h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821F8EAC;  }
		/* 821F8E78h case   17:*/		return 0x821F8E7C;
	}
	return 0x821F8E7C;
} // Block from 821F8E34h-821F8E7Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F8E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8E7C);
		  /* 821F8E7Ch */ case    0:  		/* li R3, 1 */
		/* 821F8E7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821F8E7Ch case    0:*/		return 0x821F8E80;
		  /* 821F8E80h */ case    1:  		/* b 76 */
		/* 821F8E80h case    1:*/		return 0x821F8ECC;
		/* 821F8E80h case    1:*/		return 0x821F8E84;
	}
	return 0x821F8E84;
} // Block from 821F8E7Ch-821F8E84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F8E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8E84);
		  /* 821F8E84h */ case    0:  		/* cmpwi CR6, R3, 42 */
		/* 821F8E84h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000002A);
		/* 821F8E84h case    0:*/		return 0x821F8E88;
		  /* 821F8E88h */ case    1:  		/* bc 12, CR6_LT, -12 */
		/* 821F8E88h case    1:*/		if ( regs.CR[6].lt ) { return 0x821F8E7C;  }
		/* 821F8E88h case    1:*/		return 0x821F8E8C;
		  /* 821F8E8Ch */ case    2:  		/* cmpwi CR6, R3, 43 */
		/* 821F8E8Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000002B);
		/* 821F8E8Ch case    2:*/		return 0x821F8E90;
		  /* 821F8E90h */ case    3:  		/* bc 4, CR6_GT, 28 */
		/* 821F8E90h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821F8EAC;  }
		/* 821F8E90h case    3:*/		return 0x821F8E94;
		  /* 821F8E94h */ case    4:  		/* cmpwi CR6, R3, 44 */
		/* 821F8E94h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000002C);
		/* 821F8E94h case    4:*/		return 0x821F8E98;
		  /* 821F8E98h */ case    5:  		/* bc 4, CR6_GT, -28 */
		/* 821F8E98h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821F8E7C;  }
		/* 821F8E98h case    5:*/		return 0x821F8E9C;
		  /* 821F8E9Ch */ case    6:  		/* cmpwi CR6, R3, 47 */
		/* 821F8E9Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x0000002F);
		/* 821F8E9Ch case    6:*/		return 0x821F8EA0;
		  /* 821F8EA0h */ case    7:  		/* bc 4, CR6_GT, 12 */
		/* 821F8EA0h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821F8EAC;  }
		/* 821F8EA0h case    7:*/		return 0x821F8EA4;
		  /* 821F8EA4h */ case    8:  		/* cmpwi CR6, R3, 55 */
		/* 821F8EA4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000037);
		/* 821F8EA4h case    8:*/		return 0x821F8EA8;
		  /* 821F8EA8h */ case    9:  		/* bc 4, CR6_EQ, -44 */
		/* 821F8EA8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821F8E7C;  }
		/* 821F8EA8h case    9:*/		return 0x821F8EAC;
	}
	return 0x821F8EAC;
} // Block from 821F8E84h-821F8EACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F8EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8EAC);
		  /* 821F8EACh */ case    0:  		/* li R11, 0 */
		/* 821F8EACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821F8EACh case    0:*/		return 0x821F8EB0;
		  /* 821F8EB0h */ case    1:  		/* stw R11, <#[R31 + 4]> */
		/* 821F8EB0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821F8EB0h case    1:*/		return 0x821F8EB4;
		  /* 821F8EB4h */ case    2:  		/* b -164 */
		/* 821F8EB4h case    2:*/		return 0x821F8E10;
		/* 821F8EB4h case    2:*/		return 0x821F8EB8;
	}
	return 0x821F8EB8;
} // Block from 821F8EACh-821F8EB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F8EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8EB8);
		  /* 821F8EB8h */ case    0:  		/* lwz R10, <#[R30 + 1008]> */
		/* 821F8EB8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003F0) );
		/* 821F8EB8h case    0:*/		return 0x821F8EBC;
		  /* 821F8EBCh */ case    1:  		/* addi R11, R30, 972 */
		/* 821F8EBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3CC);
		/* 821F8EBCh case    1:*/		return 0x821F8EC0;
		  /* 821F8EC0h */ case    2:  		/* li R3, 0 */
		/* 821F8EC0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821F8EC0h case    2:*/		return 0x821F8EC4;
		  /* 821F8EC4h */ case    3:  		/* stw R10, <#[R31]> */
		/* 821F8EC4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821F8EC4h case    3:*/		return 0x821F8EC8;
		  /* 821F8EC8h */ case    4:  		/* stw R31, <#[R30 + 1008]> */
		/* 821F8EC8h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x000003F0) );
		/* 821F8EC8h case    4:*/		return 0x821F8ECC;
	}
	return 0x821F8ECC;
} // Block from 821F8EB8h-821F8ECCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F8ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8ECC);
		  /* 821F8ECCh */ case    0:  		/* addi R1, R1, 112 */
		/* 821F8ECCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821F8ECCh case    0:*/		return 0x821F8ED0;
		  /* 821F8ED0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821F8ED0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821F8ED0h case    1:*/		return 0x821F8ED4;
		  /* 821F8ED4h */ case    2:  		/* mtspr LR, R12 */
		/* 821F8ED4h case    2:*/		regs.LR = regs.R12;
		/* 821F8ED4h case    2:*/		return 0x821F8ED8;
		  /* 821F8ED8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 821F8ED8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821F8ED8h case    3:*/		return 0x821F8EDC;
		  /* 821F8EDCh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 821F8EDCh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821F8EDCh case    4:*/		return 0x821F8EE0;
		  /* 821F8EE0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 821F8EE0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821F8EE0h case    5:*/		return 0x821F8EE4;
	}
	return 0x821F8EE4;
} // Block from 821F8ECCh-821F8EE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F8EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8EE4);
		  /* 821F8EE4h */ case    0:  		/* nop */
		/* 821F8EE4h case    0:*/		cpu::op::nop();
		/* 821F8EE4h case    0:*/		return 0x821F8EE8;
	}
	return 0x821F8EE8;
} // Block from 821F8EE4h-821F8EE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F8EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8EE8);
		  /* 821F8EE8h */ case    0:  		/* mfspr R12, LR */
		/* 821F8EE8h case    0:*/		regs.R12 = regs.LR;
		/* 821F8EE8h case    0:*/		return 0x821F8EEC;
		  /* 821F8EECh */ case    1:  		/* bl -1473700 */
		/* 821F8EECh case    1:*/		regs.LR = 0x821F8EF0; return 0x82091248;
		/* 821F8EECh case    1:*/		return 0x821F8EF0;
		  /* 821F8EF0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821F8EF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821F8EF0h case    2:*/		return 0x821F8EF4;
		  /* 821F8EF4h */ case    3:  		/* lwz R11, <#[R5 + 120]> */
		/* 821F8EF4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000078) );
		/* 821F8EF4h case    3:*/		return 0x821F8EF8;
		  /* 821F8EF8h */ case    4:  		/* mr R30, R3 */
		/* 821F8EF8h case    4:*/		regs.R30 = regs.R3;
		/* 821F8EF8h case    4:*/		return 0x821F8EFC;
		  /* 821F8EFCh */ case    5:  		/* mr R27, R4 */
		/* 821F8EFCh case    5:*/		regs.R27 = regs.R4;
		/* 821F8EFCh case    5:*/		return 0x821F8F00;
		  /* 821F8F00h */ case    6:  		/* mr R29, R5 */
		/* 821F8F00h case    6:*/		regs.R29 = regs.R5;
		/* 821F8F00h case    6:*/		return 0x821F8F04;
		  /* 821F8F04h */ case    7:  		/* mr R25, R6 */
		/* 821F8F04h case    7:*/		regs.R25 = regs.R6;
		/* 821F8F04h case    7:*/		return 0x821F8F08;
		  /* 821F8F08h */ case    8:  		/* mr R24, R7 */
		/* 821F8F08h case    8:*/		regs.R24 = regs.R7;
		/* 821F8F08h case    8:*/		return 0x821F8F0C;
		  /* 821F8F0Ch */ case    9:  		/* li R28, 0 */
		/* 821F8F0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821F8F0Ch case    9:*/		return 0x821F8F10;
		  /* 821F8F10h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821F8F10h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8F10h case   10:*/		return 0x821F8F14;
		  /* 821F8F14h */ case   11:  		/* bc 12, CR6_EQ, 516 */
		/* 821F8F14h case   11:*/		if ( regs.CR[6].eq ) { return 0x821F9118;  }
		/* 821F8F14h case   11:*/		return 0x821F8F18;
	}
	return 0x821F8F18;
} // Block from 821F8EE8h-821F8F18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821F8F18h
// Function '?PushList@Compiler@D3DXShader@@AAAPAVCNode@2@PAVParseStack@2@PAV32@_NI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8F18);
		  /* 821F8F18h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8F18h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8F18h case    0:*/		return 0x821F8F1C;
		  /* 821F8F1Ch */ case    1:  		/* cmpwi CR6, R10, 1 */
		/* 821F8F1Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F8F1Ch case    1:*/		return 0x821F8F20;
		  /* 821F8F20h */ case    2:  		/* bc 4, CR6_EQ, 504 */
		/* 821F8F20h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F9118;  }
		/* 821F8F20h case    2:*/		return 0x821F8F24;
		  /* 821F8F24h */ case    3:  		/* mr R31, R11 */
		/* 821F8F24h case    3:*/		regs.R31 = regs.R11;
		/* 821F8F24h case    3:*/		return 0x821F8F28;
		  /* 821F8F28h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821F8F28h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821F8F28h case    4:*/		return 0x821F8F2C;
		  /* 821F8F2Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821F8F2Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8F2Ch case    5:*/		return 0x821F8F30;
		  /* 821F8F30h */ case    6:  		/* bc 12, CR6_EQ, 428 */
		/* 821F8F30h case    6:*/		if ( regs.CR[6].eq ) { return 0x821F90DC;  }
		/* 821F8F30h case    6:*/		return 0x821F8F34;
		  /* 821F8F34h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8F34h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8F34h case    7:*/		return 0x821F8F38;
		  /* 821F8F38h */ case    8:  		/* cmpwi CR6, R10, 1 */
		/* 821F8F38h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F8F38h case    8:*/		return 0x821F8F3C;
		  /* 821F8F3Ch */ case    9:  		/* bc 4, CR6_EQ, 416 */
		/* 821F8F3Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821F90DC;  }
		/* 821F8F3Ch case    9:*/		return 0x821F8F40;
		  /* 821F8F40h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 821F8F40h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F8F40h case   10:*/		return 0x821F8F44;
		  /* 821F8F44h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821F8F44h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8F44h case   11:*/		return 0x821F8F48;
		  /* 821F8F48h */ case   12:  		/* bc 12, CR6_EQ, 96 */
		/* 821F8F48h case   12:*/		if ( regs.CR[6].eq ) { return 0x821F8FA8;  }
		/* 821F8F48h case   12:*/		return 0x821F8F4C;
		  /* 821F8F4Ch */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8F4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8F4Ch case   13:*/		return 0x821F8F50;
		  /* 821F8F50h */ case   14:  		/* cmpwi CR6, R10, 3 */
		/* 821F8F50h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821F8F50h case   14:*/		return 0x821F8F54;
		  /* 821F8F54h */ case   15:  		/* bc 12, CR6_EQ, 84 */
		/* 821F8F54h case   15:*/		if ( regs.CR[6].eq ) { return 0x821F8FA8;  }
		/* 821F8F54h case   15:*/		return 0x821F8F58;
		  /* 821F8F58h */ case   16:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821F8F58h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821F8F58h case   16:*/		return 0x821F8F5C;
		  /* 821F8F5Ch */ case   17:  		/* cmpwi CR6, R10, 11 */
		/* 821F8F5Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 821F8F5Ch case   17:*/		return 0x821F8F60;
		  /* 821F8F60h */ case   18:  		/* bc 4, CR6_EQ, 368 */
		/* 821F8F60h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821F90D0;  }
		/* 821F8F60h case   18:*/		return 0x821F8F64;
		  /* 821F8F64h */ case   19:  		/* lwz R10, <#[R30 + 564]> */
		/* 821F8F64h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000234) );
		/* 821F8F64h case   19:*/		return 0x821F8F68;
		  /* 821F8F68h */ case   20:  		/* lwz R10, <#[R10 + 80]> */
		/* 821F8F68h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 821F8F68h case   20:*/		return 0x821F8F6C;
		  /* 821F8F6Ch */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 821F8F6Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F8F6Ch case   21:*/		return 0x821F8F70;
		  /* 821F8F70h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 821F8F70h case   22:*/		if ( regs.CR[6].eq ) { return 0x821F8F84;  }
		/* 821F8F70h case   22:*/		return 0x821F8F74;
		  /* 821F8F74h */ case   23:  		/* lwz R9, <#[R11 + 16]> */
		/* 821F8F74h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 821F8F74h case   23:*/		return 0x821F8F78;
		  /* 821F8F78h */ case   24:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821F8F78h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821F8F78h case   24:*/		return 0x821F8F7C;
		  /* 821F8F7Ch */ case   25:  		/* lwzx R6, <#[R9 + R10]> */
		/* 821F8F7Ch case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821F8F7Ch case   25:*/		return 0x821F8F80;
		  /* 821F8F80h */ case   26:  		/* b 8 */
		/* 821F8F80h case   26:*/		return 0x821F8F88;
		/* 821F8F80h case   26:*/		return 0x821F8F84;
	}
	return 0x821F8F84;
} // Block from 821F8F18h-821F8F84h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821F8F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8F84);
		  /* 821F8F84h */ case    0:  		/* li R6, 0 */
		/* 821F8F84h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F8F84h case    0:*/		return 0x821F8F88;
	}
	return 0x821F8F88;
} // Block from 821F8F84h-821F8F88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F8F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8F88);
		  /* 821F8F88h */ case    0:  		/* li R9, 0 */
		/* 821F8F88h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821F8F88h case    0:*/		return 0x821F8F8C;
		  /* 821F8F8Ch */ case    1:  		/* lwz R5, <#[R11 + 16]> */
		/* 821F8F8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 821F8F8Ch case    1:*/		return 0x821F8F90;
		  /* 821F8F90h */ case    2:  		/* li R8, 1 */
		/* 821F8F90h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821F8F90h case    2:*/		return 0x821F8F94;
		  /* 821F8F94h */ case    3:  		/* li R7, 0 */
		/* 821F8F94h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F8F94h case    3:*/		return 0x821F8F98;
		  /* 821F8F98h */ case    4:  		/* mr R4, R27 */
		/* 821F8F98h case    4:*/		regs.R4 = regs.R27;
		/* 821F8F98h case    4:*/		return 0x821F8F9C;
		  /* 821F8F9Ch */ case    5:  		/* mr R3, R30 */
		/* 821F8F9Ch case    5:*/		regs.R3 = regs.R30;
		/* 821F8F9Ch case    5:*/		return 0x821F8FA0;
		  /* 821F8FA0h */ case    6:  		/* bl -2160 */
		/* 821F8FA0h case    6:*/		regs.LR = 0x821F8FA4; return 0x821F8730;
		/* 821F8FA0h case    6:*/		return 0x821F8FA4;
		  /* 821F8FA4h */ case    7:  		/* addi R28, R28, 1 */
		/* 821F8FA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821F8FA4h case    7:*/		return 0x821F8FA8;
	}
	return 0x821F8FA8;
} // Block from 821F8F88h-821F8FA8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F8FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8FA8);
		  /* 821F8FA8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821F8FA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F8FA8h case    0:*/		return 0x821F8FAC;
		  /* 821F8FACh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F8FACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8FACh case    1:*/		return 0x821F8FB0;
		  /* 821F8FB0h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821F8FB0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F8FC0;  }
		/* 821F8FB0h case    2:*/		return 0x821F8FB4;
		  /* 821F8FB4h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F8FB4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F8FB4h case    3:*/		return 0x821F8FB8;
		  /* 821F8FB8h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821F8FB8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F8FB8h case    4:*/		return 0x821F8FBC;
		  /* 821F8FBCh */ case    5:  		/* bc 4, CR6_EQ, 264 */
		/* 821F8FBCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F90C4;  }
		/* 821F8FBCh case    5:*/		return 0x821F8FC0;
	}
	return 0x821F8FC0;
} // Block from 821F8FA8h-821F8FC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F8FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F8FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F8FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F8FC0);
		  /* 821F8FC0h */ case    0:  		/* mr R31, R11 */
		/* 821F8FC0h case    0:*/		regs.R31 = regs.R11;
		/* 821F8FC0h case    0:*/		return 0x821F8FC4;
		  /* 821F8FC4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F8FC4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F8FC4h case    1:*/		return 0x821F8FC8;
		  /* 821F8FC8h */ case    2:  		/* bc 4, CR6_EQ, -160 */
		/* 821F8FC8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F8F28;  }
		/* 821F8FC8h case    2:*/		return 0x821F8FCC;
		  /* 821F8FCCh */ case    3:  		/* addi R11, R28, 2 */
		/* 821F8FCCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x2);
		/* 821F8FCCh case    3:*/		return 0x821F8FD0;
		  /* 821F8FD0h */ case    4:  		/* li R5, 0 */
		/* 821F8FD0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F8FD0h case    4:*/		return 0x821F8FD4;
		  /* 821F8FD4h */ case    5:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 821F8FD4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 821F8FD4h case    5:*/		return 0x821F8FD8;
		  /* 821F8FD8h */ case    6:  		/* mr R3, R30 */
		/* 821F8FD8h case    6:*/		regs.R3 = regs.R30;
		/* 821F8FD8h case    6:*/		return 0x821F8FDC;
		  /* 821F8FDCh */ case    7:  		/* bl -444852 */
		/* 821F8FDCh case    7:*/		regs.LR = 0x821F8FE0; return 0x8218C628;
		/* 821F8FDCh case    7:*/		return 0x821F8FE0;
		  /* 821F8FE0h */ case    8:  		/* mr R31, R3 */
		/* 821F8FE0h case    8:*/		regs.R31 = regs.R3;
		/* 821F8FE0h case    8:*/		return 0x821F8FE4;
		  /* 821F8FE4h */ case    9:  		/* mr R4, R27 */
		/* 821F8FE4h case    9:*/		regs.R4 = regs.R27;
		/* 821F8FE4h case    9:*/		return 0x821F8FE8;
		  /* 821F8FE8h */ case   10:  		/* addi R3, R1, 80 */
		/* 821F8FE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F8FE8h case   10:*/		return 0x821F8FEC;
		  /* 821F8FECh */ case   11:  		/* stw R29, <#[R31]> */
		/* 821F8FECh case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 821F8FECh case   11:*/		return 0x821F8FF0;
		  /* 821F8FF0h */ case   12:  		/* stw R28, <#[R31 + 4]> */
		/* 821F8FF0h case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000004) );
		/* 821F8FF0h case   12:*/		return 0x821F8FF4;
		  /* 821F8FF4h */ case   13:  		/* bl -364996 */
		/* 821F8FF4h case   13:*/		regs.LR = 0x821F8FF8; return 0x8219FE30;
		/* 821F8FF4h case   13:*/		return 0x821F8FF8;
		  /* 821F8FF8h */ case   14:  		/* mr R4, R28 */
		/* 821F8FF8h case   14:*/		regs.R4 = regs.R28;
		/* 821F8FF8h case   14:*/		return 0x821F8FFC;
		  /* 821F8FFCh */ case   15:  		/* addi R3, R1, 80 */
		/* 821F8FFCh case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F8FFCh case   15:*/		return 0x821F9000;
		  /* 821F9000h */ case   16:  		/* bl -30352 */
		/* 821F9000h case   16:*/		regs.LR = 0x821F9004; return 0x821F1970;
		/* 821F9000h case   16:*/		return 0x821F9004;
		  /* 821F9004h */ case   17:  		/* lwz R11, <#[R29 + 120]> */
		/* 821F9004h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000078) );
		/* 821F9004h case   17:*/		return 0x821F9008;
		  /* 821F9008h */ case   18:  		/* li R29, 0 */
		/* 821F9008h case   18:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821F9008h case   18:*/		return 0x821F900C;
		  /* 821F900Ch */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821F900Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F900Ch case   19:*/		return 0x821F9010;
		  /* 821F9010h */ case   20:  		/* bc 12, CR6_EQ, 252 */
		/* 821F9010h case   20:*/		if ( regs.CR[6].eq ) { return 0x821F910C;  }
		/* 821F9010h case   20:*/		return 0x821F9014;
		  /* 821F9014h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9014h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9014h case   21:*/		return 0x821F9018;
		  /* 821F9018h */ case   22:  		/* cmpwi CR6, R10, 1 */
		/* 821F9018h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F9018h case   22:*/		return 0x821F901C;
		  /* 821F901Ch */ case   23:  		/* bc 4, CR6_EQ, 240 */
		/* 821F901Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x821F910C;  }
		/* 821F901Ch case   23:*/		return 0x821F9020;
		  /* 821F9020h */ case   24:  		/* mr R27, R11 */
		/* 821F9020h case   24:*/		regs.R27 = regs.R11;
		/* 821F9020h case   24:*/		return 0x821F9024;
		  /* 821F9024h */ case   25:  		/* addi R26, R31, 4 */
		/* 821F9024h case   25:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R31,0x4);
		/* 821F9024h case   25:*/		return 0x821F9028;
		  /* 821F9028h */ case   26:  		/* lwz R11, <#[R27 + 8]> */
		/* 821F9028h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821F9028h case   26:*/		return 0x821F902C;
		  /* 821F902Ch */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821F902Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F902Ch case   27:*/		return 0x821F9030;
		  /* 821F9030h */ case   28:  		/* bc 12, CR6_EQ, 208 */
		/* 821F9030h case   28:*/		if ( regs.CR[6].eq ) { return 0x821F9100;  }
		/* 821F9030h case   28:*/		return 0x821F9034;
		  /* 821F9034h */ case   29:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9034h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9034h case   29:*/		return 0x821F9038;
		  /* 821F9038h */ case   30:  		/* cmpwi CR6, R10, 1 */
		/* 821F9038h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F9038h case   30:*/		return 0x821F903C;
		  /* 821F903Ch */ case   31:  		/* bc 4, CR6_EQ, 196 */
		/* 821F903Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x821F9100;  }
		/* 821F903Ch case   31:*/		return 0x821F9040;
		  /* 821F9040h */ case   32:  		/* lwz R11, <#[R11 + 12]> */
		/* 821F9040h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F9040h case   32:*/		return 0x821F9044;
		  /* 821F9044h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 821F9044h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9044h case   33:*/		return 0x821F9048;
		  /* 821F9048h */ case   34:  		/* bc 12, CR6_EQ, 64 */
		/* 821F9048h case   34:*/		if ( regs.CR[6].eq ) { return 0x821F9088;  }
		/* 821F9048h case   34:*/		return 0x821F904C;
		  /* 821F904Ch */ case   35:  		/* lwz R11, <#[R11 + 4]> */
		/* 821F904Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821F904Ch case   35:*/		return 0x821F9050;
		  /* 821F9050h */ case   36:  		/* cmpwi CR6, R11, 3 */
		/* 821F9050h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821F9050h case   36:*/		return 0x821F9054;
		  /* 821F9054h */ case   37:  		/* bc 12, CR6_EQ, 52 */
		/* 821F9054h case   37:*/		if ( regs.CR[6].eq ) { return 0x821F9088;  }
		/* 821F9054h case   37:*/		return 0x821F9058;
		  /* 821F9058h */ case   38:  		/* cmplw CR6, R29, R28 */
		/* 821F9058h case   38:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 821F9058h case   38:*/		return 0x821F905C;
		  /* 821F905Ch */ case   39:  		/* bc 4, CR6_LT, 140 */
		/* 821F905Ch case   39:*/		if ( !regs.CR[6].lt ) { return 0x821F90E8;  }
		/* 821F905Ch case   39:*/		return 0x821F9060;
		  /* 821F9060h */ case   40:  		/* addi R3, R1, 80 */
		/* 821F9060h case   40:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F9060h case   40:*/		return 0x821F9064;
		  /* 821F9064h */ case   41:  		/* bl -229892 */
		/* 821F9064h case   41:*/		regs.LR = 0x821F9068; return 0x821C0E60;
		/* 821F9064h case   41:*/		return 0x821F9068;
		  /* 821F9068h */ case   42:  		/* mr R4, R3 */
		/* 821F9068h case   42:*/		regs.R4 = regs.R3;
		/* 821F9068h case   42:*/		return 0x821F906C;
		  /* 821F906Ch */ case   43:  		/* mr R3, R30 */
		/* 821F906Ch case   43:*/		regs.R3 = regs.R30;
		/* 821F906Ch case   43:*/		return 0x821F9070;
		  /* 821F9070h */ case   44:  		/* bl -27888 */
		/* 821F9070h case   44:*/		regs.LR = 0x821F9074; return 0x821F2380;
		/* 821F9070h case   44:*/		return 0x821F9074;
		  /* 821F9074h */ case   45:  		/* mr R4, R3 */
		/* 821F9074h case   45:*/		regs.R4 = regs.R3;
		/* 821F9074h case   45:*/		return 0x821F9078;
		  /* 821F9078h */ case   46:  		/* mr R3, R25 */
		/* 821F9078h case   46:*/		regs.R3 = regs.R25;
		/* 821F9078h case   46:*/		return 0x821F907C;
		  /* 821F907Ch */ case   47:  		/* bl -528052 */
		/* 821F907Ch case   47:*/		regs.LR = 0x821F9080; return 0x821781C8;
		/* 821F907Ch case   47:*/		return 0x821F9080;
		  /* 821F9080h */ case   48:  		/* addi R29, R29, 1 */
		/* 821F9080h case   48:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821F9080h case   48:*/		return 0x821F9084;
		  /* 821F9084h */ case   49:  		/* stwu R3, <#[R26 + 4]> */
		/* 821F9084h case   49:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821F9084h case   49:*/		return 0x821F9088;
	}
	return 0x821F9088;
} // Block from 821F8FC0h-821F9088h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821F9088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9088);
		  /* 821F9088h */ case    0:  		/* lwz R11, <#[R27 + 12]> */
		/* 821F9088h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821F9088h case    0:*/		return 0x821F908C;
		  /* 821F908Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F908Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F908Ch case    1:*/		return 0x821F9090;
		  /* 821F9090h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821F9090h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F90A0;  }
		/* 821F9090h case    2:*/		return 0x821F9094;
		  /* 821F9094h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9094h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9094h case    3:*/		return 0x821F9098;
		  /* 821F9098h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821F9098h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F9098h case    4:*/		return 0x821F909C;
		  /* 821F909Ch */ case    5:  		/* bc 4, CR6_EQ, 88 */
		/* 821F909Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F90F4;  }
		/* 821F909Ch case    5:*/		return 0x821F90A0;
	}
	return 0x821F90A0;
} // Block from 821F9088h-821F90A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F90A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F90A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F90A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F90A0);
		  /* 821F90A0h */ case    0:  		/* mr R27, R11 */
		/* 821F90A0h case    0:*/		regs.R27 = regs.R11;
		/* 821F90A0h case    0:*/		return 0x821F90A4;
		  /* 821F90A4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F90A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F90A4h case    1:*/		return 0x821F90A8;
		  /* 821F90A8h */ case    2:  		/* bc 4, CR6_EQ, -128 */
		/* 821F90A8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F9028;  }
		/* 821F90A8h case    2:*/		return 0x821F90AC;
		  /* 821F90ACh */ case    3:  		/* stw R31, <#[R24]> */
		/* 821F90ACh case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 821F90ACh case    3:*/		return 0x821F90B0;
		  /* 821F90B0h */ case    4:  		/* lwz R11, <#[R30 + 40]> */
		/* 821F90B0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821F90B0h case    4:*/		return 0x821F90B4;
		  /* 821F90B4h */ case    5:  		/* oris R11, R11, 16 */
		/* 821F90B4h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821F90B4h case    5:*/		return 0x821F90B8;
		  /* 821F90B8h */ case    6:  		/* stw R11, <#[R30 + 40]> */
		/* 821F90B8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 821F90B8h case    6:*/		return 0x821F90BC;
		  /* 821F90BCh */ case    7:  		/* addi R1, R1, 176 */
		/* 821F90BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821F90BCh case    7:*/		return 0x821F90C0;
		  /* 821F90C0h */ case    8:  		/* b -1474088 */
		/* 821F90C0h case    8:*/		return 0x82091298;
		/* 821F90C0h case    8:*/		return 0x821F90C4;
	}
	return 0x821F90C4;
} // Block from 821F90A0h-821F90C4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F90C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F90C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F90C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F90C4);
		  /* 821F90C4h */ case    0:  		/* li R4, 4801 */
		/* 821F90C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F90C4h case    0:*/		return 0x821F90C8;
		  /* 821F90C8h */ case    1:  		/* mr R3, R30 */
		/* 821F90C8h case    1:*/		regs.R3 = regs.R30;
		/* 821F90C8h case    1:*/		return 0x821F90CC;
		  /* 821F90CCh */ case    2:  		/* bl -684644 */
		/* 821F90CCh case    2:*/		regs.LR = 0x821F90D0; return 0x82151E68;
		/* 821F90CCh case    2:*/		return 0x821F90D0;
	}
	return 0x821F90D0;
} // Block from 821F90C4h-821F90D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F90D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F90D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F90D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F90D0);
		  /* 821F90D0h */ case    0:  		/* li R4, 4801 */
		/* 821F90D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F90D0h case    0:*/		return 0x821F90D4;
		  /* 821F90D4h */ case    1:  		/* mr R3, R30 */
		/* 821F90D4h case    1:*/		regs.R3 = regs.R30;
		/* 821F90D4h case    1:*/		return 0x821F90D8;
		  /* 821F90D8h */ case    2:  		/* bl -684656 */
		/* 821F90D8h case    2:*/		regs.LR = 0x821F90DC; return 0x82151E68;
		/* 821F90D8h case    2:*/		return 0x821F90DC;
	}
	return 0x821F90DC;
} // Block from 821F90D0h-821F90DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F90DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F90DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F90DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F90DC);
		  /* 821F90DCh */ case    0:  		/* li R4, 4801 */
		/* 821F90DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F90DCh case    0:*/		return 0x821F90E0;
		  /* 821F90E0h */ case    1:  		/* mr R3, R30 */
		/* 821F90E0h case    1:*/		regs.R3 = regs.R30;
		/* 821F90E0h case    1:*/		return 0x821F90E4;
		  /* 821F90E4h */ case    2:  		/* bl -684668 */
		/* 821F90E4h case    2:*/		regs.LR = 0x821F90E8; return 0x82151E68;
		/* 821F90E4h case    2:*/		return 0x821F90E8;
	}
	return 0x821F90E8;
} // Block from 821F90DCh-821F90E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F90E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F90E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F90E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F90E8);
		  /* 821F90E8h */ case    0:  		/* li R4, 4800 */
		/* 821F90E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821F90E8h case    0:*/		return 0x821F90EC;
		  /* 821F90ECh */ case    1:  		/* mr R3, R30 */
		/* 821F90ECh case    1:*/		regs.R3 = regs.R30;
		/* 821F90ECh case    1:*/		return 0x821F90F0;
		  /* 821F90F0h */ case    2:  		/* bl -684680 */
		/* 821F90F0h case    2:*/		regs.LR = 0x821F90F4; return 0x82151E68;
		/* 821F90F0h case    2:*/		return 0x821F90F4;
	}
	return 0x821F90F4;
} // Block from 821F90E8h-821F90F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F90F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F90F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F90F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F90F4);
		  /* 821F90F4h */ case    0:  		/* li R4, 4801 */
		/* 821F90F4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F90F4h case    0:*/		return 0x821F90F8;
		  /* 821F90F8h */ case    1:  		/* mr R3, R30 */
		/* 821F90F8h case    1:*/		regs.R3 = regs.R30;
		/* 821F90F8h case    1:*/		return 0x821F90FC;
		  /* 821F90FCh */ case    2:  		/* bl -684692 */
		/* 821F90FCh case    2:*/		regs.LR = 0x821F9100; return 0x82151E68;
		/* 821F90FCh case    2:*/		return 0x821F9100;
	}
	return 0x821F9100;
} // Block from 821F90F4h-821F9100h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9100);
		  /* 821F9100h */ case    0:  		/* li R4, 4801 */
		/* 821F9100h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9100h case    0:*/		return 0x821F9104;
		  /* 821F9104h */ case    1:  		/* mr R3, R30 */
		/* 821F9104h case    1:*/		regs.R3 = regs.R30;
		/* 821F9104h case    1:*/		return 0x821F9108;
		  /* 821F9108h */ case    2:  		/* bl -684704 */
		/* 821F9108h case    2:*/		regs.LR = 0x821F910C; return 0x82151E68;
		/* 821F9108h case    2:*/		return 0x821F910C;
	}
	return 0x821F910C;
} // Block from 821F9100h-821F910Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F910Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F910C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F910C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F910C);
		  /* 821F910Ch */ case    0:  		/* li R4, 4801 */
		/* 821F910Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F910Ch case    0:*/		return 0x821F9110;
		  /* 821F9110h */ case    1:  		/* mr R3, R30 */
		/* 821F9110h case    1:*/		regs.R3 = regs.R30;
		/* 821F9110h case    1:*/		return 0x821F9114;
		  /* 821F9114h */ case    2:  		/* bl -684716 */
		/* 821F9114h case    2:*/		regs.LR = 0x821F9118; return 0x82151E68;
		/* 821F9114h case    2:*/		return 0x821F9118;
	}
	return 0x821F9118;
} // Block from 821F910Ch-821F9118h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9118);
		  /* 821F9118h */ case    0:  		/* li R4, 4801 */
		/* 821F9118h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9118h case    0:*/		return 0x821F911C;
		  /* 821F911Ch */ case    1:  		/* mr R3, R30 */
		/* 821F911Ch case    1:*/		regs.R3 = regs.R30;
		/* 821F911Ch case    1:*/		return 0x821F9120;
		  /* 821F9120h */ case    2:  		/* bl -684728 */
		/* 821F9120h case    2:*/		regs.LR = 0x821F9124; return 0x82151E68;
		/* 821F9120h case    2:*/		return 0x821F9124;
		  /* 821F9124h */ case    3:  		/* nop */
		/* 821F9124h case    3:*/		cpu::op::nop();
		/* 821F9124h case    3:*/		return 0x821F9128;
	}
	return 0x821F9128;
} // Block from 821F9118h-821F9128h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F9128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9128);
		  /* 821F9128h */ case    0:  		/* mfspr R12, LR */
		/* 821F9128h case    0:*/		regs.R12 = regs.LR;
		/* 821F9128h case    0:*/		return 0x821F912C;
		  /* 821F912Ch */ case    1:  		/* bl -1474300 */
		/* 821F912Ch case    1:*/		regs.LR = 0x821F9130; return 0x82091230;
		/* 821F912Ch case    1:*/		return 0x821F9130;
		  /* 821F9130h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821F9130h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821F9130h case    2:*/		return 0x821F9134;
		  /* 821F9134h */ case    3:  		/* li R27, 0 */
		/* 821F9134h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821F9134h case    3:*/		return 0x821F9138;
		  /* 821F9138h */ case    4:  		/* mr R25, R10 */
		/* 821F9138h case    4:*/		regs.R25 = regs.R10;
		/* 821F9138h case    4:*/		return 0x821F913C;
		  /* 821F913Ch */ case    5:  		/* stw R27, <#[R10]> */
		/* 821F913Ch case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + 0x00000000) );
		/* 821F913Ch case    5:*/		return 0x821F9140;
		  /* 821F9140h */ case    6:  		/* mr R31, R3 */
		/* 821F9140h case    6:*/		regs.R31 = regs.R3;
		/* 821F9140h case    6:*/		return 0x821F9144;
		  /* 821F9144h */ case    7:  		/* stw R27, <#[R10 + 4]> */
		/* 821F9144h case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + 0x00000004) );
		/* 821F9144h case    7:*/		return 0x821F9148;
	}
	return 0x821F9148;
} // Block from 821F9128h-821F9148h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F9148h
// Function '?PushVariable@Compiler@D3DXShader@@AAAXPAVResultStack@2@IPAVResult@2@II_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9148);
		  /* 821F9148h */ case    0:  		/* mr R20, R4 */
		/* 821F9148h case    0:*/		regs.R20 = regs.R4;
		/* 821F9148h case    0:*/		return 0x821F914C;
		  /* 821F914Ch */ case    1:  		/* stw R27, <#[R10 + 8]> */
		/* 821F914Ch case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + 0x00000008) );
		/* 821F914Ch case    1:*/		return 0x821F9150;
		  /* 821F9150h */ case    2:  		/* mr R19, R5 */
		/* 821F9150h case    2:*/		regs.R19 = regs.R5;
		/* 821F9150h case    2:*/		return 0x821F9154;
		  /* 821F9154h */ case    3:  		/* stw R27, <#[R10 + 12]> */
		/* 821F9154h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + 0x0000000C) );
		/* 821F9154h case    3:*/		return 0x821F9158;
		  /* 821F9158h */ case    4:  		/* mr R24, R6 */
		/* 821F9158h case    4:*/		regs.R24 = regs.R6;
		/* 821F9158h case    4:*/		return 0x821F915C;
		  /* 821F915Ch */ case    5:  		/* stw R27, <#[R1 + 88]> */
		/* 821F915Ch case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 821F915Ch case    5:*/		return 0x821F9160;
		  /* 821F9160h */ case    6:  		/* mr R18, R7 */
		/* 821F9160h case    6:*/		regs.R18 = regs.R7;
		/* 821F9160h case    6:*/		return 0x821F9164;
		  /* 821F9164h */ case    7:  		/* mr R22, R8 */
		/* 821F9164h case    7:*/		regs.R22 = regs.R8;
		/* 821F9164h case    7:*/		return 0x821F9168;
		  /* 821F9168h */ case    8:  		/* mr R23, R9 */
		/* 821F9168h case    8:*/		regs.R23 = regs.R9;
		/* 821F9168h case    8:*/		return 0x821F916C;
		  /* 821F916Ch */ case    9:  		/* mr R21, R27 */
		/* 821F916Ch case    9:*/		regs.R21 = regs.R27;
		/* 821F916Ch case    9:*/		return 0x821F9170;
		  /* 821F9170h */ case   10:  		/* li R28, 1 */
		/* 821F9170h case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821F9170h case   10:*/		return 0x821F9174;
		  /* 821F9174h */ case   11:  		/* lwz R11, <#[R3 + 576]> */
		/* 821F9174h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000240) );
		/* 821F9174h case   11:*/		return 0x821F9178;
		  /* 821F9178h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9178h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9178h case   12:*/		return 0x821F917C;
		  /* 821F917Ch */ case   13:  		/* stw R11, <#[R1 + 80]> */
		/* 821F917Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F917Ch case   13:*/		return 0x821F9180;
		  /* 821F9180h */ case   14:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821F9180h case   14:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821F9180h case   14:*/		return 0x821F9184;
		  /* 821F9184h */ case   15:  		/* addic R11, R11, -1 */
		/* 821F9184h case   15:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F9184h case   15:*/		return 0x821F9188;
		  /* 821F9188h */ case   16:  		/* subfe R11, R11, R11 */
		/* 821F9188h case   16:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821F9188h case   16:*/		return 0x821F918C;
		  /* 821F918Ch */ case   17:  		/* and R11, R11, R10 */
		/* 821F918Ch case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821F918Ch case   17:*/		return 0x821F9190;
		  /* 821F9190h */ case   18:  		/* stw R11, <#[R1 + 84]> */
		/* 821F9190h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F9190h case   18:*/		return 0x821F9194;
		  /* 821F9194h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821F9194h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9194h case   19:*/		return 0x821F9198;
		  /* 821F9198h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 821F9198h case   20:*/		if ( regs.CR[6].eq ) { return 0x821F91B0;  }
		/* 821F9198h case   20:*/		return 0x821F919C;
		  /* 821F919Ch */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 821F919Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821F919Ch case   21:*/		return 0x821F91A0;
		  /* 821F91A0h */ case   22:  		/* lwz R10, <#[R1 + 88]> */
		/* 821F91A0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821F91A0h case   22:*/		return 0x821F91A4;
		  /* 821F91A4h */ case   23:  		/* cmplw CR6, R10, R11 */
		/* 821F91A4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821F91A4h case   23:*/		return 0x821F91A8;
		  /* 821F91A8h */ case   24:  		/* mr R11, R27 */
		/* 821F91A8h case   24:*/		regs.R11 = regs.R27;
		/* 821F91A8h case   24:*/		return 0x821F91AC;
		  /* 821F91ACh */ case   25:  		/* bc 4, CR6_EQ, 8 */
		/* 821F91ACh case   25:*/		if ( !regs.CR[6].eq ) { return 0x821F91B4;  }
		/* 821F91ACh case   25:*/		return 0x821F91B0;
	}
	return 0x821F91B0;
} // Block from 821F9148h-821F91B0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821F91B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F91B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F91B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F91B0);
		  /* 821F91B0h */ case    0:  		/* mr R11, R28 */
		/* 821F91B0h case    0:*/		regs.R11 = regs.R28;
		/* 821F91B0h case    0:*/		return 0x821F91B4;
	}
	return 0x821F91B4;
} // Block from 821F91B0h-821F91B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F91B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F91B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F91B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F91B4);
		  /* 821F91B4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821F91B4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821F91B4h case    0:*/		return 0x821F91B8;
		  /* 821F91B8h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 821F91B8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F91DC;  }
		/* 821F91B8h case    1:*/		return 0x821F91BC;
		  /* 821F91BCh */ case    2:  		/* addi R3, R1, 80 */
		/* 821F91BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F91BCh case    2:*/		return 0x821F91C0;
		  /* 821F91C0h */ case    3:  		/* bl -230240 */
		/* 821F91C0h case    3:*/		regs.LR = 0x821F91C4; return 0x821C0E60;
		/* 821F91C0h case    3:*/		return 0x821F91C4;
		  /* 821F91C4h */ case    4:  		/* lwz R10, <#[R3]> */
		/* 821F91C4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821F91C4h case    4:*/		return 0x821F91C8;
		  /* 821F91C8h */ case    5:  		/* lwz R11, <#[R1 + 84]> */
		/* 821F91C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F91C8h case    5:*/		return 0x821F91CC;
		  /* 821F91CCh */ case    6:  		/* slw R10, R28, R10 */
		/* 821F91CCh case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 821F91CCh case    6:*/		return 0x821F91D0;
		  /* 821F91D0h */ case    7:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F91D0h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F91D0h case    7:*/		return 0x821F91D4;
		  /* 821F91D4h */ case    8:  		/* or R21, R10, R21 */
		/* 821F91D4h case    8:*/		cpu::op::or<0>(regs,&regs.R21,regs.R10,regs.R21);
		/* 821F91D4h case    8:*/		return 0x821F91D8;
		  /* 821F91D8h */ case    9:  		/* b -68 */
		/* 821F91D8h case    9:*/		return 0x821F9194;
		/* 821F91D8h case    9:*/		return 0x821F91DC;
	}
	return 0x821F91DC;
} // Block from 821F91B4h-821F91DCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F91DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F91DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F91DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F91DC);
		  /* 821F91DCh */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821F91DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821F91DCh case    0:*/		return 0x821F91E0;
		  /* 821F91E0h */ case    1:  		/* mr R26, R27 */
		/* 821F91E0h case    1:*/		regs.R26 = regs.R27;
		/* 821F91E0h case    1:*/		return 0x821F91E4;
		  /* 821F91E4h */ case    2:  		/* stw R27, <#[R1 + 88]> */
		/* 821F91E4h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 821F91E4h case    2:*/		return 0x821F91E8;
		  /* 821F91E8h */ case    3:  		/* lis R29, -1 */
		/* 821F91E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 821F91E8h case    3:*/		return 0x821F91EC;
		  /* 821F91ECh */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821F91ECh case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821F91ECh case    4:*/		return 0x821F91F0;
		  /* 821F91F0h */ case    5:  		/* stw R20, <#[R1 + 80]> */
		/* 821F91F0h case    5:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000050) );
		/* 821F91F0h case    5:*/		return 0x821F91F4;
		  /* 821F91F4h */ case    6:  		/* addic R10, R10, -1 */
		/* 821F91F4h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821F91F4h case    6:*/		return 0x821F91F8;
		  /* 821F91F8h */ case    7:  		/* subfe R10, R10, R10 */
		/* 821F91F8h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821F91F8h case    7:*/		return 0x821F91FC;
		  /* 821F91FCh */ case    8:  		/* and R11, R10, R11 */
		/* 821F91FCh case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821F91FCh case    8:*/		return 0x821F9200;
		  /* 821F9200h */ case    9:  		/* stw R11, <#[R1 + 84]> */
		/* 821F9200h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821F9200h case    9:*/		return 0x821F9204;
		  /* 821F9204h */ case   10:  		/* lwz R10, <#[R1 + 84]> */
		/* 821F9204h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821F9204h case   10:*/		return 0x821F9208;
		  /* 821F9208h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821F9208h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F9208h case   11:*/		return 0x821F920C;
		  /* 821F920Ch */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 821F920Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821F9224;  }
		/* 821F920Ch case   12:*/		return 0x821F9210;
		  /* 821F9210h */ case   13:  		/* lwz R11, <#[R10 + 8]> */
		/* 821F9210h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821F9210h case   13:*/		return 0x821F9214;
		  /* 821F9214h */ case   14:  		/* lwz R9, <#[R1 + 88]> */
		/* 821F9214h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 821F9214h case   14:*/		return 0x821F9218;
		  /* 821F9218h */ case   15:  		/* cmplw CR6, R9, R11 */
		/* 821F9218h case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821F9218h case   15:*/		return 0x821F921C;
		  /* 821F921Ch */ case   16:  		/* mr R11, R27 */
		/* 821F921Ch case   16:*/		regs.R11 = regs.R27;
		/* 821F921Ch case   16:*/		return 0x821F9220;
		  /* 821F9220h */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 821F9220h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821F9228;  }
		/* 821F9220h case   17:*/		return 0x821F9224;
	}
	return 0x821F9224;
} // Block from 821F91DCh-821F9224h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F9224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9224);
		  /* 821F9224h */ case    0:  		/* mr R11, R28 */
		/* 821F9224h case    0:*/		regs.R11 = regs.R28;
		/* 821F9224h case    0:*/		return 0x821F9228;
	}
	return 0x821F9228;
} // Block from 821F9224h-821F9228h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F9228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9228);
		  /* 821F9228h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821F9228h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821F9228h case    0:*/		return 0x821F922C;
		  /* 821F922Ch */ case    1:  		/* bc 4, CR0_EQ, 796 */
		/* 821F922Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F9548;  }
		/* 821F922Ch case    1:*/		return 0x821F9230;
		  /* 821F9230h */ case    2:  		/* lwz R11, <#[R1 + 88]> */
		/* 821F9230h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821F9230h case    2:*/		return 0x821F9234;
		  /* 821F9234h */ case    3:  		/* addi R11, R11, 2 */
		/* 821F9234h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821F9234h case    3:*/		return 0x821F9238;
		  /* 821F9238h */ case    4:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821F9238h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821F9238h case    4:*/		return 0x821F923C;
		  /* 821F923Ch */ case    5:  		/* add R30, R11, R10 */
		/* 821F923Ch case    5:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 821F923Ch case    5:*/		return 0x821F9240;
		  /* 821F9240h */ case    6:  		/* lwzx R10, <#[R11 + R10]> */
		/* 821F9240h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821F9240h case    6:*/		return 0x821F9244;
		  /* 821F9244h */ case    7:  		/* slw R11, R28, R10 */
		/* 821F9244h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R28,regs.R10);
		/* 821F9244h case    7:*/		return 0x821F9248;
		  /* 821F9248h */ case    8:  		/* and R9, R11, R19 */
		/* 821F9248h case    8:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R19);
		/* 821F9248h case    8:*/		return 0x821F924C;
		  /* 821F924Ch */ case    9:  		/* rlwinm. R9, R9, 0, 0, 30 */
		/* 821F924Ch case    9:*/		cpu::op::rlwinm<1,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821F924Ch case    9:*/		return 0x821F9250;
		  /* 821F9250h */ case   10:  		/* bc 4, CR0_EQ, 84 */
		/* 821F9250h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821F92A4;  }
		/* 821F9250h case   10:*/		return 0x821F9254;
		  /* 821F9254h */ case   11:  		/* and R11, R11, R24 */
		/* 821F9254h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821F9254h case   11:*/		return 0x821F9258;
		  /* 821F9258h */ case   12:  		/* rlwinm. R11, R11, 0, 0, 30 */
		/* 821F9258h case   12:*/		cpu::op::rlwinm<1,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F9258h case   12:*/		return 0x821F925C;
		  /* 821F925Ch */ case   13:  		/* bc 4, CR0_EQ, 60 */
		/* 821F925Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821F9298;  }
		/* 821F925Ch case   13:*/		return 0x821F9260;
	}
	return 0x821F9260;
} // Block from 821F9228h-821F9260h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821F9260h
// Function '?PushVariableRegister@Compiler@D3DXShader@@AAAIPAVResultStack@2@III_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9260);
		  /* 821F9260h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F9260h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F9260h case    0:*/		return 0x821F9264;
		  /* 821F9264h */ case    1:  		/* lwz R11, <#[R11 + 16]> */
		/* 821F9264h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821F9264h case    1:*/		return 0x821F9268;
		  /* 821F9268h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821F9268h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9268h case    2:*/		return 0x821F926C;
		  /* 821F926Ch */ case    3:  		/* bc 12, CR6_EQ, 688 */
		/* 821F926Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821F951C;  }
		/* 821F926Ch case    3:*/		return 0x821F9270;
		  /* 821F9270h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9270h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9270h case    4:*/		return 0x821F9274;
		  /* 821F9274h */ case    5:  		/* cmpwi CR6, R10, 3 */
		/* 821F9274h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821F9274h case    5:*/		return 0x821F9278;
		  /* 821F9278h */ case    6:  		/* bc 4, CR6_EQ, 676 */
		/* 821F9278h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821F951C;  }
		/* 821F9278h case    6:*/		return 0x821F927C;
		  /* 821F927Ch */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821F927Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821F927Ch case    7:*/		return 0x821F9280;
		  /* 821F9280h */ case    8:  		/* mr R3, R31 */
		/* 821F9280h case    8:*/		regs.R3 = regs.R31;
		/* 821F9280h case    8:*/		return 0x821F9284;
		  /* 821F9284h */ case    9:  		/* cmpwi CR6, R10, 11 */
		/* 821F9284h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 821F9284h case    9:*/		return 0x821F9288;
		  /* 821F9288h */ case   10:  		/* bc 4, CR6_EQ, 652 */
		/* 821F9288h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821F9514;  }
		/* 821F9288h case   10:*/		return 0x821F928C;
		  /* 821F928Ch */ case   11:  		/* li R4, 3580 */
		/* 821F928Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0xDFC);
		/* 821F928Ch case   11:*/		return 0x821F9290;
		  /* 821F9290h */ case   12:  		/* lwz R5, <#[R11 + 24]> */
		/* 821F9290h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 821F9290h case   12:*/		return 0x821F9294;
		  /* 821F9294h */ case   13:  		/* bl -685340 */
		/* 821F9294h case   13:*/		regs.LR = 0x821F9298; return 0x82151D78;
		/* 821F9294h case   13:*/		return 0x821F9298;
	}
	return 0x821F9298;
} // Block from 821F9260h-821F9298h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821F9298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9298);
		  /* 821F9298h */ case    0:  		/* addi R3, R1, 80 */
		/* 821F9298h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F9298h case    0:*/		return 0x821F929C;
		  /* 821F929Ch */ case    1:  		/* bl -26724 */
		/* 821F929Ch case    1:*/		regs.LR = 0x821F92A0; return 0x821F2A38;
		/* 821F929Ch case    1:*/		return 0x821F92A0;
		  /* 821F92A0h */ case    2:  		/* b -156 */
		/* 821F92A0h case    2:*/		return 0x821F9204;
		/* 821F92A0h case    2:*/		return 0x821F92A4;
	}
	return 0x821F92A4;
} // Block from 821F9298h-821F92A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F92A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F92A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F92A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F92A4);
		  /* 821F92A4h */ case    0:  		/* cmpwi CR6, R10, 1 */
		/* 821F92A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F92A4h case    0:*/		return 0x821F92A8;
		  /* 821F92A8h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 821F92A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F92D0;  }
		/* 821F92A8h case    1:*/		return 0x821F92AC;
		  /* 821F92ACh */ case    2:  		/* cmpwi CR6, R10, 2 */
		/* 821F92ACh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 821F92ACh case    2:*/		return 0x821F92B0;
		  /* 821F92B0h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 821F92B0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821F92DC;  }
		/* 821F92B0h case    3:*/		return 0x821F92B4;
		  /* 821F92B4h */ case    4:  		/* and R11, R11, R26 */
		/* 821F92B4h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821F92B4h case    4:*/		return 0x821F92B8;
		  /* 821F92B8h */ case    5:  		/* rlwinm. R11, R11, 0, 0, 30 */
		/* 821F92B8h case    5:*/		cpu::op::rlwinm<1,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F92B8h case    5:*/		return 0x821F92BC;
		  /* 821F92BCh */ case    6:  		/* bc 12, CR0_EQ, 32 */
		/* 821F92BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821F92DC;  }
		/* 821F92BCh case    6:*/		return 0x821F92C0;
		  /* 821F92C0h */ case    7:  		/* li R4, 3577 */
		/* 821F92C0h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xDF9);
		/* 821F92C0h case    7:*/		return 0x821F92C4;
		  /* 821F92C4h */ case    8:  		/* mr R3, R31 */
		/* 821F92C4h case    8:*/		regs.R3 = regs.R31;
		/* 821F92C4h case    8:*/		return 0x821F92C8;
		  /* 821F92C8h */ case    9:  		/* bl -685392 */
		/* 821F92C8h case    9:*/		regs.LR = 0x821F92CC; return 0x82151D78;
		/* 821F92C8h case    9:*/		return 0x821F92CC;
		  /* 821F92CCh */ case   10:  		/* b -52 */
		/* 821F92CCh case   10:*/		return 0x821F9298;
		/* 821F92CCh case   10:*/		return 0x821F92D0;
	}
	return 0x821F92D0;
} // Block from 821F92A4h-821F92D0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F92D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F92D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F92D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F92D0);
		  /* 821F92D0h */ case    0:  		/* or R9, R26, R21 */
		/* 821F92D0h case    0:*/		cpu::op::or<0>(regs,&regs.R9,regs.R26,regs.R21);
		/* 821F92D0h case    0:*/		return 0x821F92D4;
		  /* 821F92D4h */ case    1:  		/* and R11, R9, R11 */
		/* 821F92D4h case    1:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821F92D4h case    1:*/		return 0x821F92D8;
		  /* 821F92D8h */ case    2:  		/* b -32 */
		/* 821F92D8h case    2:*/		return 0x821F92B8;
		/* 821F92D8h case    2:*/		return 0x821F92DC;
	}
	return 0x821F92DC;
} // Block from 821F92D0h-821F92DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F92DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F92DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F92DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F92DC);
		  /* 821F92DCh */ case    0:  		/* addi R11, R10, -10 */
		/* 821F92DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFF6);
		/* 821F92DCh case    0:*/		return 0x821F92E0;
		  /* 821F92E0h */ case    1:  		/* cmplwi CR6, R11, 13 */
		/* 821F92E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 821F92E0h case    1:*/		return 0x821F92E4;
		  /* 821F92E4h */ case    2:  		/* bc 12, CR6_GT, 532 */
		/* 821F92E4h case    2:*/		if ( regs.CR[6].gt ) { return 0x821F94F8;  }
		/* 821F92E4h case    2:*/		return 0x821F92E8;
		  /* 821F92E8h */ case    3:  		/* lis R12, -32252 */
		/* 821F92E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821F92E8h case    3:*/		return 0x821F92EC;
		  /* 821F92ECh */ case    4:  		/* addi R12, R12, -14408 */
		/* 821F92ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFC7B8);
		/* 821F92ECh case    4:*/		return 0x821F92F0;
		  /* 821F92F0h */ case    5:  		/* lbzx R0, <#[R12 + R11]> */
		/* 821F92F0h case    5:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 821F92F0h case    5:*/		return 0x821F92F4;
		  /* 821F92F4h */ case    6:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 821F92F4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 821F92F4h case    6:*/		return 0x821F92F8;
		  /* 821F92F8h */ case    7:  		/* lis R12, -32224 */
		/* 821F92F8h case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8220);
		/* 821F92F8h case    7:*/		return 0x821F92FC;
		  /* 821F92FCh */ case    8:  		/* ori R0, R0, 0 */
		/* 821F92FCh case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821F92FCh case    8:*/		return 0x821F9300;
		  /* 821F9300h */ case    9:  		/* addi R12, R12, -27888 */
		/* 821F9300h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF9310);
		/* 821F9300h case    9:*/		return 0x821F9304;
		  /* 821F9304h */ case   10:  		/* add R12, R12, R0 */
		/* 821F9304h case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821F9304h case   10:*/		return 0x821F9308;
		  /* 821F9308h */ case   11:  		/* mtspr CTR, R12 */
		/* 821F9308h case   11:*/		regs.CTR = regs.R12;
		/* 821F9308h case   11:*/		return 0x821F930C;
		  /* 821F930Ch */ case   12:  		/* bcctr 20, CR0_LT */
		/* 821F930Ch case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821F930Ch case   12:*/		return 0x821F9310;
		  /* 821F9310h */ case   13:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F9310h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F9310h case   13:*/		return 0x821F9314;
		  /* 821F9314h */ case   14:  		/* stw R11, <#[R25 + 8]> */
		/* 821F9314h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821F9314h case   14:*/		return 0x821F9318;
		  /* 821F9318h */ case   15:  		/* b 480 */
		/* 821F9318h case   15:*/		return 0x821F94F8;
		/* 821F9318h case   15:*/		return 0x821F931C;
		  /* 821F931Ch */ case   16:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F931Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F931Ch case   16:*/		return 0x821F9320;
		  /* 821F9320h */ case   17:  		/* mr R3, R31 */
		/* 821F9320h case   17:*/		regs.R3 = regs.R31;
		/* 821F9320h case   17:*/		return 0x821F9324;
		  /* 821F9324h */ case   18:  		/* lwz R4, <#[R11 + 20]> */
		/* 821F9324h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821F9324h case   18:*/		return 0x821F9328;
		  /* 821F9328h */ case   19:  		/* bl -53376 */
		/* 821F9328h case   19:*/		regs.LR = 0x821F932C; return 0x821EC2A8;
		/* 821F9328h case   19:*/		return 0x821F932C;
		  /* 821F932Ch */ case   20:  		/* stw R3, <#[R31 + 788]> */
		/* 821F932Ch case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000314) );
		/* 821F932Ch case   20:*/		return 0x821F9330;
		  /* 821F9330h */ case   21:  		/* b 456 */
		/* 821F9330h case   21:*/		return 0x821F94F8;
		/* 821F9330h case   21:*/		return 0x821F9334;
		  /* 821F9334h */ case   22:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F9334h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F9334h case   22:*/		return 0x821F9338;
		  /* 821F9338h */ case   23:  		/* mr R3, R31 */
		/* 821F9338h case   23:*/		regs.R3 = regs.R31;
		/* 821F9338h case   23:*/		return 0x821F933C;
		  /* 821F933Ch */ case   24:  		/* lwz R4, <#[R11 + 20]> */
		/* 821F933Ch case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821F933Ch case   24:*/		return 0x821F9340;
		  /* 821F9340h */ case   25:  		/* bl -53400 */
		/* 821F9340h case   25:*/		regs.LR = 0x821F9344; return 0x821EC2A8;
		/* 821F9340h case   25:*/		return 0x821F9344;
		  /* 821F9344h */ case   26:  		/* or. R6, R3, R3 */
		/* 821F9344h case   26:*/		cpu::op::or<1>(regs,&regs.R6,regs.R3,regs.R3);
		/* 821F9344h case   26:*/		return 0x821F9348;
		  /* 821F9348h */ case   27:  		/* stw R6, <#[R31 + 792]> */
		/* 821F9348h case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000318) );
		/* 821F9348h case   27:*/		return 0x821F934C;
		  /* 821F934Ch */ case   28:  		/* bc 12, CR0_EQ, 476 */
		/* 821F934Ch case   28:*/		if ( regs.CR[0].eq ) { return 0x821F9528;  }
		/* 821F934Ch case   28:*/		return 0x821F9350;
		  /* 821F9350h */ case   29:  		/* cmplwi CR6, R6, 64 */
		/* 821F9350h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000040);
		/* 821F9350h case   29:*/		return 0x821F9354;
		  /* 821F9354h */ case   30:  		/* bc 12, CR6_GT, 468 */
		/* 821F9354h case   30:*/		if ( regs.CR[6].gt ) { return 0x821F9528;  }
		/* 821F9354h case   30:*/		return 0x821F9358;
		  /* 821F9358h */ case   31:  		/* lwz R11, <#[R31 + 56]> */
		/* 821F9358h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821F9358h case   31:*/		return 0x821F935C;
		  /* 821F935Ch */ case   32:  		/* cmplwi CR6, R11, 0 */
		/* 821F935Ch case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F935Ch case   32:*/		return 0x821F9360;
		  /* 821F9360h */ case   33:  		/* bc 12, CR6_EQ, 408 */
		/* 821F9360h case   33:*/		if ( regs.CR[6].eq ) { return 0x821F94F8;  }
		/* 821F9360h case   33:*/		return 0x821F9364;
		  /* 821F9364h */ case   34:  		/* lwz R11, <#[R11 + 16]> */
		/* 821F9364h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821F9364h case   34:*/		return 0x821F9368;
		  /* 821F9368h */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 821F9368h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9368h case   35:*/		return 0x821F936C;
		  /* 821F936Ch */ case   36:  		/* bc 12, CR6_EQ, 396 */
		/* 821F936Ch case   36:*/		if ( regs.CR[6].eq ) { return 0x821F94F8;  }
		/* 821F936Ch case   36:*/		return 0x821F9370;
		  /* 821F9370h */ case   37:  		/* cmplw CR6, R6, R11 */
		/* 821F9370h case   37:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821F9370h case   37:*/		return 0x821F9374;
		  /* 821F9374h */ case   38:  		/* bc 12, CR6_EQ, 388 */
		/* 821F9374h case   38:*/		if ( regs.CR[6].eq ) { return 0x821F94F8;  }
		/* 821F9374h case   38:*/		return 0x821F9378;
		  /* 821F9378h */ case   39:  		/* li R4, 3581 */
		/* 821F9378h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0xDFD);
		/* 821F9378h case   39:*/		return 0x821F937C;
		  /* 821F937Ch */ case   40:  		/* mr R3, R31 */
		/* 821F937Ch case   40:*/		regs.R3 = regs.R31;
		/* 821F937Ch case   40:*/		return 0x821F9380;
		  /* 821F9380h */ case   41:  		/* bl -685576 */
		/* 821F9380h case   41:*/		regs.LR = 0x821F9384; return 0x82151D78;
		/* 821F9380h case   41:*/		return 0x821F9384;
		  /* 821F9384h */ case   42:  		/* b 372 */
		/* 821F9384h case   42:*/		return 0x821F94F8;
		/* 821F9384h case   42:*/		return 0x821F9388;
		  /* 821F9388h */ case   43:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F9388h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F9388h case   43:*/		return 0x821F938C;
		  /* 821F938Ch */ case   44:  		/* mr R3, R31 */
		/* 821F938Ch case   44:*/		regs.R3 = regs.R31;
		/* 821F938Ch case   44:*/		return 0x821F9390;
		  /* 821F9390h */ case   45:  		/* lwz R4, <#[R11 + 20]> */
		/* 821F9390h case   45:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821F9390h case   45:*/		return 0x821F9394;
		  /* 821F9394h */ case   46:  		/* bl -53484 */
		/* 821F9394h case   46:*/		regs.LR = 0x821F9398; return 0x821EC2A8;
		/* 821F9394h case   46:*/		return 0x821F9398;
		  /* 821F9398h */ case   47:  		/* or. R6, R3, R3 */
		/* 821F9398h case   47:*/		cpu::op::or<1>(regs,&regs.R6,regs.R3,regs.R3);
		/* 821F9398h case   47:*/		return 0x821F939C;
		  /* 821F939Ch */ case   48:  		/* stw R6, <#[R31 + 796]> */
		/* 821F939Ch case   48:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x0000031C) );
		/* 821F939Ch case   48:*/		return 0x821F93A0;
	}
	return 0x821F93A0;
} // Block from 821F92DCh-821F93A0h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821F93A0h
// Function '?PushInstruction@Compiler@D3DXShader@@AAAXPAVResultStack@2@PAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F93A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F93A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F93A0);
		  /* 821F93A0h */ case    0:  		/* bc 4, CR0_EQ, 344 */
		/* 821F93A0h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821F94F8;  }
		/* 821F93A0h case    0:*/		return 0x821F93A4;
		  /* 821F93A4h */ case    1:  		/* li R5, 64 */
		/* 821F93A4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 821F93A4h case    1:*/		return 0x821F93A8;
		  /* 821F93A8h */ case    2:  		/* li R4, 3603 */
		/* 821F93A8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xE13);
		/* 821F93A8h case    2:*/		return 0x821F93AC;
		  /* 821F93ACh */ case    3:  		/* mr R3, R31 */
		/* 821F93ACh case    3:*/		regs.R3 = regs.R31;
		/* 821F93ACh case    3:*/		return 0x821F93B0;
		  /* 821F93B0h */ case    4:  		/* bl -685384 */
		/* 821F93B0h case    4:*/		regs.LR = 0x821F93B4; return 0x82151E68;
		/* 821F93B0h case    4:*/		return 0x821F93B4;
		  /* 821F93B4h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F93B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F93B4h case    5:*/		return 0x821F93B8;
		  /* 821F93B8h */ case    6:  		/* mr R3, R31 */
		/* 821F93B8h case    6:*/		regs.R3 = regs.R31;
		/* 821F93B8h case    6:*/		return 0x821F93BC;
		  /* 821F93BCh */ case    7:  		/* lwz R4, <#[R11 + 20]> */
		/* 821F93BCh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821F93BCh case    7:*/		return 0x821F93C0;
		  /* 821F93C0h */ case    8:  		/* bl -53528 */
		/* 821F93C0h case    8:*/		regs.LR = 0x821F93C4; return 0x821EC2A8;
		/* 821F93C0h case    8:*/		return 0x821F93C4;
		  /* 821F93C4h */ case    9:  		/* mr R6, R3 */
		/* 821F93C4h case    9:*/		regs.R6 = regs.R3;
		/* 821F93C4h case    9:*/		return 0x821F93C8;
		  /* 821F93C8h */ case   10:  		/* stw R3, <#[R31 + 808]> */
		/* 821F93C8h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000328) );
		/* 821F93C8h case   10:*/		return 0x821F93CC;
		  /* 821F93CCh */ case   11:  		/* cmplwi CR6, R3, 256 */
		/* 821F93CCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000100);
		/* 821F93CCh case   11:*/		return 0x821F93D0;
		  /* 821F93D0h */ case   12:  		/* bc 12, CR6_LT, 360 */
		/* 821F93D0h case   12:*/		if ( regs.CR[6].lt ) { return 0x821F9538;  }
		/* 821F93D0h case   12:*/		return 0x821F93D4;
		  /* 821F93D4h */ case   13:  		/* cmplwi CR6, R3, 3839 */
		/* 821F93D4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000EFF);
		/* 821F93D4h case   13:*/		return 0x821F93D8;
		  /* 821F93D8h */ case   14:  		/* bc 12, CR6_GT, 352 */
		/* 821F93D8h case   14:*/		if ( regs.CR[6].gt ) { return 0x821F9538;  }
		/* 821F93D8h case   14:*/		return 0x821F93DC;
		  /* 821F93DCh */ case   15:  		/* lwz R9, <#[R31 + 56]> */
		/* 821F93DCh case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000038) );
		/* 821F93DCh case   15:*/		return 0x821F93E0;
	}
	return 0x821F93E0;
} // Block from 821F93A0h-821F93E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F93E0h
// Function '?PushRangeOfResults@Compiler@D3DXShader@@AAAXPAVResultStack@2@PAVResultStackEnumerator@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F93E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F93E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F93E0);
		  /* 821F93E0h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 821F93E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821F93E0h case    0:*/		return 0x821F93E4;
		  /* 821F93E4h */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 821F93E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F9434;  }
		/* 821F93E4h case    1:*/		return 0x821F93E8;
		  /* 821F93E8h */ case    2:  		/* lwz R11, <#[R31 + 48]> */
		/* 821F93E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821F93E8h case    2:*/		return 0x821F93EC;
		  /* 821F93ECh */ case    3:  		/* rlwinm R10, R11, 0, 0, 15 */
		/* 821F93ECh case    3:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R10,regs.R11);
		/* 821F93ECh case    3:*/		return 0x821F93F0;
		  /* 821F93F0h */ case    4:  		/* cmplw CR6, R10, R29 */
		/* 821F93F0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821F93F0h case    4:*/		return 0x821F93F4;
		  /* 821F93F4h */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 821F93F4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F9414;  }
		/* 821F93F4h case    5:*/		return 0x821F93F8;
		  /* 821F93F8h */ case    6:  		/* lwz R11, <#[R9 + 48]> */
		/* 821F93F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000030) );
		/* 821F93F8h case    6:*/		return 0x821F93FC;
		  /* 821F93FCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821F93FCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F93FCh case    7:*/		return 0x821F9400;
		  /* 821F9400h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 821F9400h case    8:*/		if ( regs.CR[6].eq ) { return 0x821F940C;  }
		/* 821F9400h case    8:*/		return 0x821F9404;
		  /* 821F9404h */ case    9:  		/* cmplw CR6, R11, R3 */
		/* 821F9404h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 821F9404h case    9:*/		return 0x821F9408;
		  /* 821F9408h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 821F9408h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821F9428;  }
		/* 821F9408h case   10:*/		return 0x821F940C;
	}
	return 0x821F940C;
} // Block from 821F93E0h-821F940Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F940Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F940C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F940C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F940C);
		  /* 821F940Ch */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821F940Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821F940Ch case    0:*/		return 0x821F9410;
		  /* 821F9410h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821F9410h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F9434;  }
		/* 821F9410h case    1:*/		return 0x821F9414;
	}
	return 0x821F9414;
} // Block from 821F940Ch-821F9414h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F9414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9414);
		  /* 821F9414h */ case    0:  		/* lwz R11, <#[R9 + 52]> */
		/* 821F9414h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000034) );
		/* 821F9414h case    0:*/		return 0x821F9418;
		  /* 821F9418h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F9418h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9418h case    1:*/		return 0x821F941C;
		  /* 821F941Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821F941Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821F9434;  }
		/* 821F941Ch case    2:*/		return 0x821F9420;
		  /* 821F9420h */ case    3:  		/* cmplw CR6, R11, R6 */
		/* 821F9420h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 821F9420h case    3:*/		return 0x821F9424;
		  /* 821F9424h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821F9424h case    4:*/		if ( regs.CR[6].eq ) { return 0x821F9434;  }
		/* 821F9424h case    4:*/		return 0x821F9428;
	}
	return 0x821F9428;
} // Block from 821F9414h-821F9428h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F9428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9428);
		  /* 821F9428h */ case    0:  		/* li R4, 3616 */
		/* 821F9428h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE20);
		/* 821F9428h case    0:*/		return 0x821F942C;
		  /* 821F942Ch */ case    1:  		/* mr R3, R31 */
		/* 821F942Ch case    1:*/		regs.R3 = regs.R31;
		/* 821F942Ch case    1:*/		return 0x821F9430;
		  /* 821F9430h */ case    2:  		/* bl -685752 */
		/* 821F9430h case    2:*/		regs.LR = 0x821F9434; return 0x82151D78;
		/* 821F9430h case    2:*/		return 0x821F9434;
	}
	return 0x821F9434;
} // Block from 821F9428h-821F9434h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9434);
		  /* 821F9434h */ case    0:  		/* li R4, 3648 */
		/* 821F9434h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE40);
		/* 821F9434h case    0:*/		return 0x821F9438;
	}
	return 0x821F9438;
} // Block from 821F9434h-821F9438h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F9438h
// Function '?PushTextureLookup@Compiler@D3DXShader@@AAAXPAVResultStack@2@PAVCNodeExpression@2@I_N2W4TextureLookupSuffix@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9438);
		  /* 821F9438h */ case    0:  		/* b -188 */
		/* 821F9438h case    0:*/		return 0x821F937C;
		/* 821F9438h case    0:*/		return 0x821F943C;
		  /* 821F943Ch */ case    1:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F943Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F943Ch case    1:*/		return 0x821F9440;
		  /* 821F9440h */ case    2:  		/* mr R3, R31 */
		/* 821F9440h case    2:*/		regs.R3 = regs.R31;
		/* 821F9440h case    2:*/		return 0x821F9444;
		  /* 821F9444h */ case    3:  		/* lwz R4, <#[R11 + 20]> */
		/* 821F9444h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821F9444h case    3:*/		return 0x821F9448;
		  /* 821F9448h */ case    4:  		/* bl -53400 */
		/* 821F9448h case    4:*/		regs.LR = 0x821F944C; return 0x821EC3B0;
		/* 821F9448h case    4:*/		return 0x821F944C;
		  /* 821F944Ch */ case    5:  		/* lwz R11, <#[R31 + 48]> */
		/* 821F944Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821F944Ch case    5:*/		return 0x821F9450;
		  /* 821F9450h */ case    6:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821F9450h case    6:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821F9450h case    6:*/		return 0x821F9454;
		  /* 821F9454h */ case    7:  		/* cmplw CR6, R11, R29 */
		/* 821F9454h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821F9454h case    7:*/		return 0x821F9458;
		  /* 821F9458h */ case    8:  		/* bc 12, CR6_EQ, 160 */
		/* 821F9458h case    8:*/		if ( regs.CR[6].eq ) { return 0x821F94F8;  }
		/* 821F9458h case    8:*/		return 0x821F945C;
		  /* 821F945Ch */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821F945Ch case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821F945Ch case    9:*/		return 0x821F9460;
		  /* 821F9460h */ case   10:  		/* bc 12, CR0_EQ, 52 */
		/* 821F9460h case   10:*/		if ( regs.CR[0].eq ) { return 0x821F9494;  }
		/* 821F9460h case   10:*/		return 0x821F9464;
		  /* 821F9464h */ case   11:  		/* lwz R11, <#[R31 + 56]> */
		/* 821F9464h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821F9464h case   11:*/		return 0x821F9468;
		  /* 821F9468h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821F9468h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9468h case   12:*/		return 0x821F946C;
		  /* 821F946Ch */ case   13:  		/* bc 12, CR6_EQ, 28 */
		/* 821F946Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821F9488;  }
		/* 821F946Ch case   13:*/		return 0x821F9470;
		  /* 821F9470h */ case   14:  		/* lwz R11, <#[R11]> */
		/* 821F9470h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821F9470h case   14:*/		return 0x821F9474;
		  /* 821F9474h */ case   15:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 821F9474h case   15:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 821F9474h case   15:*/		return 0x821F9478;
		  /* 821F9478h */ case   16:  		/* bc 4, CR0_EQ, 16 */
		/* 821F9478h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821F9488;  }
		/* 821F9478h case   16:*/		return 0x821F947C;
		  /* 821F947Ch */ case   17:  		/* li R4, 3608 */
		/* 821F947Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0xE18);
		/* 821F947Ch case   17:*/		return 0x821F9480;
		  /* 821F9480h */ case   18:  		/* mr R3, R31 */
		/* 821F9480h case   18:*/		regs.R3 = regs.R31;
		/* 821F9480h case   18:*/		return 0x821F9484;
		  /* 821F9484h */ case   19:  		/* bl -685836 */
		/* 821F9484h case   19:*/		regs.LR = 0x821F9488; return 0x82151D78;
		/* 821F9484h case   19:*/		return 0x821F9488;
	}
	return 0x821F9488;
} // Block from 821F9438h-821F9488h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F9488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9488);
		  /* 821F9488h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821F9488h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F9488h case    0:*/		return 0x821F948C;
		  /* 821F948Ch */ case    1:  		/* ori R11, R11, 16 */
		/* 821F948Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821F948Ch case    1:*/		return 0x821F9490;
		  /* 821F9490h */ case    2:  		/* b 12 */
		/* 821F9490h case    2:*/		return 0x821F949C;
		/* 821F9490h case    2:*/		return 0x821F9494;
	}
	return 0x821F9494;
} // Block from 821F9488h-821F9494h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9494);
		  /* 821F9494h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821F9494h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F9494h case    0:*/		return 0x821F9498;
		  /* 821F9498h */ case    1:  		/* rlwinm R11, R11, 0, 28, 26 */
		/* 821F9498h case    1:*/		cpu::op::rlwinm<0,0,28,26>(regs,&regs.R11,regs.R11);
		/* 821F9498h case    1:*/		return 0x821F949C;
	}
	return 0x821F949C;
} // Block from 821F9494h-821F949Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F949Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F949C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F949C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F949C);
		  /* 821F949Ch */ case    0:  		/* stw R11, <#[R31 + 44]> */
		/* 821F949Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F949Ch case    0:*/		return 0x821F94A0;
		  /* 821F94A0h */ case    1:  		/* b 88 */
		/* 821F94A0h case    1:*/		return 0x821F94F8;
		/* 821F94A0h case    1:*/		return 0x821F94A4;
		  /* 821F94A4h */ case    2:  		/* lwz R11, <#[R31 + 48]> */
		/* 821F94A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821F94A4h case    2:*/		return 0x821F94A8;
		  /* 821F94A8h */ case    3:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821F94A8h case    3:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821F94A8h case    3:*/		return 0x821F94AC;
		  /* 821F94ACh */ case    4:  		/* cmplw CR6, R11, R29 */
		/* 821F94ACh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821F94ACh case    4:*/		return 0x821F94B0;
		  /* 821F94B0h */ case    5:  		/* bc 4, CR6_EQ, 72 */
		/* 821F94B0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F94F8;  }
		/* 821F94B0h case    5:*/		return 0x821F94B4;
		  /* 821F94B4h */ case    6:  		/* lwz R11, <#[R31 + 44]> */
		/* 821F94B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F94B4h case    6:*/		return 0x821F94B8;
		  /* 821F94B8h */ case    7:  		/* ori R11, R11, 64 */
		/* 821F94B8h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821F94B8h case    7:*/		return 0x821F94BC;
		  /* 821F94BCh */ case    8:  		/* b -32 */
		/* 821F94BCh case    8:*/		return 0x821F949C;
		/* 821F94BCh case    8:*/		return 0x821F94C0;
		  /* 821F94C0h */ case    9:  		/* lwz R11, <#[R31 + 44]> */
		/* 821F94C0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F94C0h case    9:*/		return 0x821F94C4;
		  /* 821F94C4h */ case   10:  		/* ori R11, R11, 4096 */
		/* 821F94C4h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821F94C4h case   10:*/		return 0x821F94C8;
		  /* 821F94C8h */ case   11:  		/* b -44 */
		/* 821F94C8h case   11:*/		return 0x821F949C;
		/* 821F94C8h case   11:*/		return 0x821F94CC;
		  /* 821F94CCh */ case   12:  		/* lwz R11, <#[R30 + 4]> */
		/* 821F94CCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821F94CCh case   12:*/		return 0x821F94D0;
		  /* 821F94D0h */ case   13:  		/* mr R3, R31 */
		/* 821F94D0h case   13:*/		regs.R3 = regs.R31;
		/* 821F94D0h case   13:*/		return 0x821F94D4;
		  /* 821F94D4h */ case   14:  		/* lwz R4, <#[R11 + 20]> */
		/* 821F94D4h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821F94D4h case   14:*/		return 0x821F94D8;
		  /* 821F94D8h */ case   15:  		/* bl -53544 */
		/* 821F94D8h case   15:*/		regs.LR = 0x821F94DC; return 0x821EC3B0;
		/* 821F94D8h case   15:*/		return 0x821F94DC;
		  /* 821F94DCh */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821F94DCh case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821F94DCh case   16:*/		return 0x821F94E0;
		  /* 821F94E0h */ case   17:  		/* lwz R11, <#[R31 + 52]> */
		/* 821F94E0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 821F94E0h case   17:*/		return 0x821F94E4;
		  /* 821F94E4h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 821F94E4h case   18:*/		if ( regs.CR[0].eq ) { return 0x821F94F0;  }
		/* 821F94E4h case   18:*/		return 0x821F94E8;
		  /* 821F94E8h */ case   19:  		/* rlwinm R11, R11, 0, 31, 29 */
		/* 821F94E8h case   19:*/		cpu::op::rlwinm<0,0,31,29>(regs,&regs.R11,regs.R11);
		/* 821F94E8h case   19:*/		return 0x821F94EC;
		  /* 821F94ECh */ case   20:  		/* b 8 */
		/* 821F94ECh case   20:*/		return 0x821F94F4;
		/* 821F94ECh case   20:*/		return 0x821F94F0;
	}
	return 0x821F94F0;
} // Block from 821F949Ch-821F94F0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821F94F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F94F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F94F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F94F0);
		  /* 821F94F0h */ case    0:  		/* ori R11, R11, 2 */
		/* 821F94F0h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821F94F0h case    0:*/		return 0x821F94F4;
	}
	return 0x821F94F4;
} // Block from 821F94F0h-821F94F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F94F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F94F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F94F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F94F4);
		  /* 821F94F4h */ case    0:  		/* stw R11, <#[R31 + 52]> */
		/* 821F94F4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 821F94F4h case    0:*/		return 0x821F94F8;
	}
	return 0x821F94F8;
} // Block from 821F94F4h-821F94F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F94F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F94F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F94F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F94F8);
		  /* 821F94F8h */ case    0:  		/* addi R3, R1, 80 */
		/* 821F94F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F94F8h case    0:*/		return 0x821F94FC;
		  /* 821F94FCh */ case    1:  		/* bl -231068 */
		/* 821F94FCh case    1:*/		regs.LR = 0x821F9500; return 0x821C0E60;
		/* 821F94FCh case    1:*/		return 0x821F9500;
		  /* 821F9500h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 821F9500h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821F9500h case    2:*/		return 0x821F9504;
		  /* 821F9504h */ case    3:  		/* slw R11, R28, R11 */
		/* 821F9504h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821F9504h case    3:*/		return 0x821F9508;
		  /* 821F9508h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F9508h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F9508h case    4:*/		return 0x821F950C;
		  /* 821F950Ch */ case    5:  		/* or R26, R11, R26 */
		/* 821F950Ch case    5:*/		cpu::op::or<0>(regs,&regs.R26,regs.R11,regs.R26);
		/* 821F950Ch case    5:*/		return 0x821F9510;
		  /* 821F9510h */ case    6:  		/* b -780 */
		/* 821F9510h case    6:*/		return 0x821F9204;
		/* 821F9510h case    6:*/		return 0x821F9514;
	}
	return 0x821F9514;
} // Block from 821F94F8h-821F9514h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F9514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9514);
		  /* 821F9514h */ case    0:  		/* li R4, 4801 */
		/* 821F9514h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9514h case    0:*/		return 0x821F9518;
		  /* 821F9518h */ case    1:  		/* bl -685744 */
		/* 821F9518h case    1:*/		regs.LR = 0x821F951C; return 0x82151E68;
		/* 821F9518h case    1:*/		return 0x821F951C;
	}
	return 0x821F951C;
} // Block from 821F9514h-821F951Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F951Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F951C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F951C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F951C);
		  /* 821F951Ch */ case    0:  		/* li R4, 4801 */
		/* 821F951Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F951Ch case    0:*/		return 0x821F9520;
		  /* 821F9520h */ case    1:  		/* mr R3, R31 */
		/* 821F9520h case    1:*/		regs.R3 = regs.R31;
		/* 821F9520h case    1:*/		return 0x821F9524;
		  /* 821F9524h */ case    2:  		/* bl -685756 */
		/* 821F9524h case    2:*/		regs.LR = 0x821F9528; return 0x82151E68;
		/* 821F9524h case    2:*/		return 0x821F9528;
	}
	return 0x821F9528;
} // Block from 821F951Ch-821F9528h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9528);
		  /* 821F9528h */ case    0:  		/* li R5, 64 */
		/* 821F9528h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 821F9528h case    0:*/		return 0x821F952C;
		  /* 821F952Ch */ case    1:  		/* li R4, 3589 */
		/* 821F952Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE05);
		/* 821F952Ch case    1:*/		return 0x821F9530;
		  /* 821F9530h */ case    2:  		/* mr R3, R31 */
		/* 821F9530h case    2:*/		regs.R3 = regs.R31;
		/* 821F9530h case    2:*/		return 0x821F9534;
		  /* 821F9534h */ case    3:  		/* bl -685772 */
		/* 821F9534h case    3:*/		regs.LR = 0x821F9538; return 0x82151E68;
		/* 821F9534h case    3:*/		return 0x821F9538;
	}
	return 0x821F9538;
} // Block from 821F9528h-821F9538h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F9538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9538);
		  /* 821F9538h */ case    0:  		/* li R5, 3839 */
		/* 821F9538h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xEFF);
		/* 821F9538h case    0:*/		return 0x821F953C;
		  /* 821F953Ch */ case    1:  		/* li R4, 3615 */
		/* 821F953Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE1F);
		/* 821F953Ch case    1:*/		return 0x821F9540;
		  /* 821F9540h */ case    2:  		/* mr R3, R31 */
		/* 821F9540h case    2:*/		regs.R3 = regs.R31;
		/* 821F9540h case    2:*/		return 0x821F9544;
		  /* 821F9544h */ case    3:  		/* bl -685788 */
		/* 821F9544h case    3:*/		regs.LR = 0x821F9548; return 0x82151E68;
		/* 821F9544h case    3:*/		return 0x821F9548;
	}
	return 0x821F9548;
} // Block from 821F9538h-821F9548h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F9548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9548);
		  /* 821F9548h */ case    0:  		/* rlwinm. R11, R26, 0, 29, 29 */
		/* 821F9548h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R26);
		/* 821F9548h case    0:*/		return 0x821F954C;
		  /* 821F954Ch */ case    1:  		/* bc 4, CR0_EQ, 124 */
		/* 821F954Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821F95C8;  }
		/* 821F954Ch case    1:*/		return 0x821F9550;
		  /* 821F9550h */ case    2:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 821F9550h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 821F9550h case    2:*/		return 0x821F9554;
		  /* 821F9554h */ case    3:  		/* bc 12, CR0_EQ, 116 */
		/* 821F9554h case    3:*/		if ( regs.CR[0].eq ) { return 0x821F95C8;  }
		/* 821F9554h case    3:*/		return 0x821F9558;
		  /* 821F9558h */ case    4:  		/* lwz R3, <#[R31 + 576]> */
		/* 821F9558h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000240) );
		/* 821F9558h case    4:*/		return 0x821F955C;
		  /* 821F955Ch */ case    5:  		/* addi R11, R1, 80 */
		/* 821F955Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821F955Ch case    5:*/		return 0x821F9560;
		  /* 821F9560h */ case    6:  		/* li R10, 2 */
		/* 821F9560h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821F9560h case    6:*/		return 0x821F9564;
		  /* 821F9564h */ case    7:  		/* lwz R9, <#[R3 + 4]> */
		/* 821F9564h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 821F9564h case    7:*/		return 0x821F9568;
		  /* 821F9568h */ case    8:  		/* std R27, <#[R11]> */
		/* 821F9568h case    8:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 821F9568h case    8:*/		return 0x821F956C;
		  /* 821F956Ch */ case    9:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 821F956Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 821F956Ch case    9:*/		return 0x821F9570;
		  /* 821F9570h */ case   10:  		/* stw R10, <#[R1 + 80]> */
		/* 821F9570h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821F9570h case   10:*/		return 0x821F9574;
		  /* 821F9574h */ case   11:  		/* bc 4, CR0_EQ, 40 */
		/* 821F9574h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821F959C;  }
		/* 821F9574h case   11:*/		return 0x821F9578;
		  /* 821F9578h */ case   12:  		/* lwz R11, <#[R3]> */
		/* 821F9578h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F9578h case   12:*/		return 0x821F957C;
		  /* 821F957Ch */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F957Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F957Ch case   13:*/		return 0x821F9580;
		  /* 821F9580h */ case   14:  		/* addic. R11, R11, -4 */
		/* 821F9580h case   14:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F9580h case   14:*/		return 0x821F9584;
		  /* 821F9584h */ case   15:  		/* bc 12, CR0_EQ, 24 */
		/* 821F9584h case   15:*/		if ( regs.CR[0].eq ) { return 0x821F959C;  }
		/* 821F9584h case   15:*/		return 0x821F9588;
		  /* 821F9588h */ case   16:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F9588h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F9588h case   16:*/		return 0x821F958C;
		  /* 821F958Ch */ case   17:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F958Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F958Ch case   17:*/		return 0x821F9590;
		  /* 821F9590h */ case   18:  		/* addi R10, R10, 1 */
		/* 821F9590h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F9590h case   18:*/		return 0x821F9594;
		  /* 821F9594h */ case   19:  		/* cmplw CR6, R10, R9 */
		/* 821F9594h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F9594h case   19:*/		return 0x821F9598;
		  /* 821F9598h */ case   20:  		/* bc 4, CR6_GT, 16 */
		/* 821F9598h case   20:*/		if ( !regs.CR[6].gt ) { return 0x821F95A8;  }
		/* 821F9598h case   20:*/		return 0x821F959C;
	}
	return 0x821F959C;
} // Block from 821F9548h-821F959Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821F959Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F959C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F959C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F959C);
		  /* 821F959Ch */ case    0:  		/* li R4, 1 */
		/* 821F959Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F959Ch case    0:*/		return 0x821F95A0;
		  /* 821F95A0h */ case    1:  		/* bl -370408 */
		/* 821F95A0h case    1:*/		regs.LR = 0x821F95A4; return 0x8219EEB8;
		/* 821F95A0h case    1:*/		return 0x821F95A4;
		  /* 821F95A4h */ case    2:  		/* mr R11, R3 */
		/* 821F95A4h case    2:*/		regs.R11 = regs.R3;
		/* 821F95A4h case    2:*/		return 0x821F95A8;
	}
	return 0x821F95A8;
} // Block from 821F959Ch-821F95A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F95A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F95A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F95A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F95A8);
		  /* 821F95A8h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F95A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F95A8h case    0:*/		return 0x821F95AC;
		  /* 821F95ACh */ case    1:  		/* ori R26, R26, 4 */
		/* 821F95ACh case    1:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821F95ACh case    1:*/		return 0x821F95B0;
		  /* 821F95B0h */ case    2:  		/* ld R9, <#[R1 + 80]> */
		/* 821F95B0h case    2:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821F95B0h case    2:*/		return 0x821F95B4;
		  /* 821F95B4h */ case    3:  		/* addi R8, R10, 2 */
		/* 821F95B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821F95B4h case    3:*/		return 0x821F95B8;
		  /* 821F95B8h */ case    4:  		/* addi R7, R10, 1 */
		/* 821F95B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821F95B8h case    4:*/		return 0x821F95BC;
		  /* 821F95BCh */ case    5:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821F95BCh case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821F95BCh case    5:*/		return 0x821F95C0;
		  /* 821F95C0h */ case    6:  		/* stw R7, <#[R11 + 8]> */
		/* 821F95C0h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821F95C0h case    6:*/		return 0x821F95C4;
		  /* 821F95C4h */ case    7:  		/* stdx R9, <#[R10 + R11]> */
		/* 821F95C4h case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F95C4h case    7:*/		return 0x821F95C8;
	}
	return 0x821F95C8;
} // Block from 821F95A8h-821F95C8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F95C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F95C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F95C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F95C8);
		  /* 821F95C8h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821F95C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821F95C8h case    0:*/		return 0x821F95CC;
		  /* 821F95CCh */ case    1:  		/* bc 12, CR6_EQ, 368 */
		/* 821F95CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821F973C;  }
		/* 821F95CCh case    1:*/		return 0x821F95D0;
		  /* 821F95D0h */ case    2:  		/* cmpwi CR6, R18, 3 */
		/* 821F95D0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R18,0x00000003);
		/* 821F95D0h case    2:*/		return 0x821F95D4;
		  /* 821F95D4h */ case    3:  		/* bc 4, CR6_EQ, 256 */
		/* 821F95D4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821F96D4;  }
		/* 821F95D4h case    3:*/		return 0x821F95D8;
		  /* 821F95D8h */ case    4:  		/* cmplwi CR6, R22, 0 */
		/* 821F95D8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821F95D8h case    4:*/		return 0x821F95DC;
		  /* 821F95DCh */ case    5:  		/* bc 12, CR6_EQ, 248 */
		/* 821F95DCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821F96D4;  }
		/* 821F95DCh case    5:*/		return 0x821F95E0;
		  /* 821F95E0h */ case    6:  		/* mr R3, R31 */
		/* 821F95E0h case    6:*/		regs.R3 = regs.R31;
		/* 821F95E0h case    6:*/		return 0x821F95E4;
		  /* 821F95E4h */ case    7:  		/* bl -7764 */
		/* 821F95E4h case    7:*/		regs.LR = 0x821F95E8; return 0x821F7790;
		/* 821F95E4h case    7:*/		return 0x821F95E8;
		  /* 821F95E8h */ case    8:  		/* rlwinm. R11, R26, 0, 29, 30 */
		/* 821F95E8h case    8:*/		cpu::op::rlwinm<1,0,29,30>(regs,&regs.R11,regs.R26);
		/* 821F95E8h case    8:*/		return 0x821F95EC;
		  /* 821F95ECh */ case    9:  		/* bc 12, CR0_EQ, 216 */
		/* 821F95ECh case    9:*/		if ( regs.CR[0].eq ) { return 0x821F96C4;  }
		/* 821F95ECh case    9:*/		return 0x821F95F0;
		  /* 821F95F0h */ case   10:  		/* mr R3, R31 */
		/* 821F95F0h case   10:*/		regs.R3 = regs.R31;
		/* 821F95F0h case   10:*/		return 0x821F95F4;
		  /* 821F95F4h */ case   11:  		/* bl -46716 */
		/* 821F95F4h case   11:*/		regs.LR = 0x821F95F8; return 0x821EDF78;
		/* 821F95F4h case   11:*/		return 0x821F95F8;
		  /* 821F95F8h */ case   12:  		/* mr R29, R3 */
		/* 821F95F8h case   12:*/		regs.R29 = regs.R3;
		/* 821F95F8h case   12:*/		return 0x821F95FC;
		  /* 821F95FCh */ case   13:  		/* lwz R3, <#[R31 + 592]> */
		/* 821F95FCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000250) );
		/* 821F95FCh case   13:*/		return 0x821F9600;
		  /* 821F9600h */ case   14:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F9600h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F9600h case   14:*/		return 0x821F9604;
		  /* 821F9604h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F9604h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F9604h case   15:*/		return 0x821F9608;
		  /* 821F9608h */ case   16:  		/* bc 4, CR0_EQ, 40 */
		/* 821F9608h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821F9630;  }
		/* 821F9608h case   16:*/		return 0x821F960C;
		  /* 821F960Ch */ case   17:  		/* lwz R11, <#[R3]> */
		/* 821F960Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F960Ch case   17:*/		return 0x821F9610;
		  /* 821F9610h */ case   18:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F9610h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F9610h case   18:*/		return 0x821F9614;
		  /* 821F9614h */ case   19:  		/* addic. R11, R11, -4 */
		/* 821F9614h case   19:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F9614h case   19:*/		return 0x821F9618;
		  /* 821F9618h */ case   20:  		/* bc 12, CR0_EQ, 24 */
		/* 821F9618h case   20:*/		if ( regs.CR[0].eq ) { return 0x821F9630;  }
		/* 821F9618h case   20:*/		return 0x821F961C;
		  /* 821F961Ch */ case   21:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F961Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F961Ch case   21:*/		return 0x821F9620;
		  /* 821F9620h */ case   22:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F9620h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F9620h case   22:*/		return 0x821F9624;
		  /* 821F9624h */ case   23:  		/* addi R10, R10, 1 */
		/* 821F9624h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F9624h case   23:*/		return 0x821F9628;
		  /* 821F9628h */ case   24:  		/* cmplw CR6, R10, R9 */
		/* 821F9628h case   24:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F9628h case   24:*/		return 0x821F962C;
		  /* 821F962Ch */ case   25:  		/* bc 4, CR6_GT, 16 */
		/* 821F962Ch case   25:*/		if ( !regs.CR[6].gt ) { return 0x821F963C;  }
		/* 821F962Ch case   25:*/		return 0x821F9630;
	}
	return 0x821F9630;
} // Block from 821F95C8h-821F9630h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821F9630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9630);
		  /* 821F9630h */ case    0:  		/* li R4, 1 */
		/* 821F9630h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F9630h case    0:*/		return 0x821F9634;
		  /* 821F9634h */ case    1:  		/* bl -443756 */
		/* 821F9634h case    1:*/		regs.LR = 0x821F9638; return 0x8218D0C8;
		/* 821F9634h case    1:*/		return 0x821F9638;
		  /* 821F9638h */ case    2:  		/* mr R11, R3 */
		/* 821F9638h case    2:*/		regs.R11 = regs.R3;
		/* 821F9638h case    2:*/		return 0x821F963C;
	}
	return 0x821F963C;
} // Block from 821F9630h-821F963Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F963Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F963C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F963C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F963C);
		  /* 821F963Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F963Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F963Ch case    0:*/		return 0x821F9640;
		  /* 821F9640h */ case    1:  		/* addi R9, R10, 4 */
		/* 821F9640h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821F9640h case    1:*/		return 0x821F9644;
		  /* 821F9644h */ case    2:  		/* addi R8, R10, 1 */
		/* 821F9644h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F9644h case    2:*/		return 0x821F9648;
		  /* 821F9648h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821F9648h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821F9648h case    3:*/		return 0x821F964C;
		  /* 821F964Ch */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821F964Ch case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821F964Ch case    4:*/		return 0x821F9650;
		  /* 821F9650h */ case    5:  		/* stwx R29, <#[R10 + R11]> */
		/* 821F9650h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F9650h case    5:*/		return 0x821F9654;
		  /* 821F9654h */ case    6:  		/* lwz R3, <#[R31 + 592]> */
		/* 821F9654h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000250) );
		/* 821F9654h case    6:*/		return 0x821F9658;
		  /* 821F9658h */ case    7:  		/* lwz R30, <#[R23]> */
		/* 821F9658h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x00000000) );
		/* 821F9658h case    7:*/		return 0x821F965C;
		  /* 821F965Ch */ case    8:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F965Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F965Ch case    8:*/		return 0x821F9660;
		  /* 821F9660h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821F9660h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821F9660h case    9:*/		return 0x821F9664;
		  /* 821F9664h */ case   10:  		/* bc 4, CR0_EQ, 40 */
		/* 821F9664h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821F968C;  }
		/* 821F9664h case   10:*/		return 0x821F9668;
		  /* 821F9668h */ case   11:  		/* lwz R11, <#[R3]> */
		/* 821F9668h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F9668h case   11:*/		return 0x821F966C;
		  /* 821F966Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821F966Ch case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821F966Ch case   12:*/		return 0x821F9670;
		  /* 821F9670h */ case   13:  		/* addic. R11, R11, -4 */
		/* 821F9670h case   13:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821F9670h case   13:*/		return 0x821F9674;
		  /* 821F9674h */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 821F9674h case   14:*/		if ( regs.CR[0].eq ) { return 0x821F968C;  }
		/* 821F9674h case   14:*/		return 0x821F9678;
		  /* 821F9678h */ case   15:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F9678h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F9678h case   15:*/		return 0x821F967C;
		  /* 821F967Ch */ case   16:  		/* lwz R9, <#[R11 + 12]> */
		/* 821F967Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F967Ch case   16:*/		return 0x821F9680;
		  /* 821F9680h */ case   17:  		/* addi R10, R10, 1 */
		/* 821F9680h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821F9680h case   17:*/		return 0x821F9684;
		  /* 821F9684h */ case   18:  		/* cmplw CR6, R10, R9 */
		/* 821F9684h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821F9684h case   18:*/		return 0x821F9688;
		  /* 821F9688h */ case   19:  		/* bc 4, CR6_GT, 16 */
		/* 821F9688h case   19:*/		if ( !regs.CR[6].gt ) { return 0x821F9698;  }
		/* 821F9688h case   19:*/		return 0x821F968C;
	}
	return 0x821F968C;
} // Block from 821F963Ch-821F968Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F968Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F968C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F968C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F968C);
		  /* 821F968Ch */ case    0:  		/* li R4, 1 */
		/* 821F968Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821F968Ch case    0:*/		return 0x821F9690;
		  /* 821F9690h */ case    1:  		/* bl -443848 */
		/* 821F9690h case    1:*/		regs.LR = 0x821F9694; return 0x8218D0C8;
		/* 821F9690h case    1:*/		return 0x821F9694;
		  /* 821F9694h */ case    2:  		/* mr R11, R3 */
		/* 821F9694h case    2:*/		regs.R11 = regs.R3;
		/* 821F9694h case    2:*/		return 0x821F9698;
	}
	return 0x821F9698;
} // Block from 821F968Ch-821F9698h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9698);
		  /* 821F9698h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821F9698h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821F9698h case    0:*/		return 0x821F969C;
		  /* 821F969Ch */ case    1:  		/* addi R9, R10, 4 */
		/* 821F969Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821F969Ch case    1:*/		return 0x821F96A0;
		  /* 821F96A0h */ case    2:  		/* addi R8, R10, 1 */
		/* 821F96A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821F96A0h case    2:*/		return 0x821F96A4;
		  /* 821F96A4h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821F96A4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821F96A4h case    3:*/		return 0x821F96A8;
		  /* 821F96A8h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821F96A8h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821F96A8h case    4:*/		return 0x821F96AC;
		  /* 821F96ACh */ case    5:  		/* stwx R30, <#[R10 + R11]> */
		/* 821F96ACh case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F96ACh case    5:*/		return 0x821F96B0;
		  /* 821F96B0h */ case    6:  		/* lwz R4, <#[R22]> */
		/* 821F96B0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R22 + 0x00000000) );
		/* 821F96B0h case    6:*/		return 0x821F96B4;
		  /* 821F96B4h */ case    7:  		/* lwz R3, <#[R31 + 588]> */
		/* 821F96B4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000024C) );
		/* 821F96B4h case    7:*/		return 0x821F96B8;
		  /* 821F96B8h */ case    8:  		/* bl -8776 */
		/* 821F96B8h case    8:*/		regs.LR = 0x821F96BC; return 0x821F7470;
		/* 821F96B8h case    8:*/		return 0x821F96BC;
		  /* 821F96BCh */ case    9:  		/* stw R29, <#[R23]> */
		/* 821F96BCh case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R23 + 0x00000000) );
		/* 821F96BCh case    9:*/		return 0x821F96C0;
		  /* 821F96C0h */ case   10:  		/* stw R27, <#[R22]> */
		/* 821F96C0h case   10:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R22 + 0x00000000) );
		/* 821F96C0h case   10:*/		return 0x821F96C4;
	}
	return 0x821F96C4;
} // Block from 821F9698h-821F96C4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F96C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F96C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F96C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F96C4);
		  /* 821F96C4h */ case    0:  		/* li R5, 16 */
		/* 821F96C4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 821F96C4h case    0:*/		return 0x821F96C8;
		  /* 821F96C8h */ case    1:  		/* lwz R3, <#[R31 + 588]> */
		/* 821F96C8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000024C) );
		/* 821F96C8h case    1:*/		return 0x821F96CC;
		  /* 821F96CCh */ case    2:  		/* li R4, 0 */
		/* 821F96CCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821F96CCh case    2:*/		return 0x821F96D0;
		  /* 821F96D0h */ case    3:  		/* bl -8400 */
		/* 821F96D0h case    3:*/		regs.LR = 0x821F96D4; return 0x821F7600;
		/* 821F96D0h case    3:*/		return 0x821F96D4;
	}
	return 0x821F96D4;
} // Block from 821F96C4h-821F96D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F96D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F96D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F96D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F96D4);
		  /* 821F96D4h */ case    0:  		/* rlwinm. R11, R26, 0, 30, 30 */
		/* 821F96D4h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R26);
		/* 821F96D4h case    0:*/		return 0x821F96D8;
		  /* 821F96D8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821F96D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F96E8;  }
		/* 821F96D8h case    1:*/		return 0x821F96DC;
		  /* 821F96DCh */ case    2:  		/* lwz R11, <#[R31 + 40]> */
		/* 821F96DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F96DCh case    2:*/		return 0x821F96E0;
		  /* 821F96E0h */ case    3:  		/* oris R11, R11, 8192 */
		/* 821F96E0h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821F96E0h case    3:*/		return 0x821F96E4;
		  /* 821F96E4h */ case    4:  		/* stw R11, <#[R31 + 40]> */
		/* 821F96E4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F96E4h case    4:*/		return 0x821F96E8;
	}
	return 0x821F96E8;
} // Block from 821F96D4h-821F96E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F96E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F96E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F96E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F96E8);
		  /* 821F96E8h */ case    0:  		/* rlwinm. R11, R26, 0, 20, 20 */
		/* 821F96E8h case    0:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R26);
		/* 821F96E8h case    0:*/		return 0x821F96EC;
		  /* 821F96ECh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821F96ECh case    1:*/		if ( regs.CR[0].eq ) { return 0x821F96FC;  }
		/* 821F96ECh case    1:*/		return 0x821F96F0;
		  /* 821F96F0h */ case    2:  		/* lwz R11, <#[R31 + 40]> */
		/* 821F96F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F96F0h case    2:*/		return 0x821F96F4;
		  /* 821F96F4h */ case    3:  		/* ori R11, R11, 2 */
		/* 821F96F4h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821F96F4h case    3:*/		return 0x821F96F8;
		  /* 821F96F8h */ case    4:  		/* stw R11, <#[R31 + 40]> */
		/* 821F96F8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F96F8h case    4:*/		return 0x821F96FC;
	}
	return 0x821F96FC;
} // Block from 821F96E8h-821F96FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F96FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F96FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F96FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F96FC);
		  /* 821F96FCh */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821F96FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F96FCh case    0:*/		return 0x821F9700;
		  /* 821F9700h */ case    1:  		/* rlwinm. R10, R26, 0, 29, 29 */
		/* 821F9700h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R26);
		/* 821F9700h case    1:*/		return 0x821F9704;
		  /* 821F9704h */ case    2:  		/* ori R11, R11, 4 */
		/* 821F9704h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821F9704h case    2:*/		return 0x821F9708;
		  /* 821F9708h */ case    3:  		/* stw R11, <#[R31 + 40]> */
		/* 821F9708h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F9708h case    3:*/		return 0x821F970C;
		  /* 821F970Ch */ case    4:  		/* bc 12, CR0_EQ, 48 */
		/* 821F970Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821F973C;  }
		/* 821F970Ch case    4:*/		return 0x821F9710;
		  /* 821F9710h */ case    5:  		/* cmpwi CR6, R18, 3 */
		/* 821F9710h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R18,0x00000003);
		/* 821F9710h case    5:*/		return 0x821F9714;
		  /* 821F9714h */ case    6:  		/* bc 4, CR6_EQ, 40 */
		/* 821F9714h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821F973C;  }
		/* 821F9714h case    6:*/		return 0x821F9718;
		  /* 821F9718h */ case    7:  		/* cmplwi CR6, R22, 0 */
		/* 821F9718h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821F9718h case    7:*/		return 0x821F971C;
		  /* 821F971Ch */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 821F971Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821F973C;  }
		/* 821F971Ch case    8:*/		return 0x821F9720;
		  /* 821F9720h */ case    9:  		/* mr R4, R23 */
		/* 821F9720h case    9:*/		regs.R4 = regs.R23;
		/* 821F9720h case    9:*/		return 0x821F9724;
		  /* 821F9724h */ case   10:  		/* mr R3, R31 */
		/* 821F9724h case   10:*/		regs.R3 = regs.R31;
		/* 821F9724h case   10:*/		return 0x821F9728;
		  /* 821F9728h */ case   11:  		/* bl -8360 */
		/* 821F9728h case   11:*/		regs.LR = 0x821F972C; return 0x821F7680;
		/* 821F9728h case   11:*/		return 0x821F972C;
		  /* 821F972Ch */ case   12:  		/* li R5, 4 */
		/* 821F972Ch case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821F972Ch case   12:*/		return 0x821F9730;
		  /* 821F9730h */ case   13:  		/* li R4, 0 */
		/* 821F9730h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821F9730h case   13:*/		return 0x821F9734;
		  /* 821F9734h */ case   14:  		/* lwz R3, <#[R31 + 588]> */
		/* 821F9734h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000024C) );
		/* 821F9734h case   14:*/		return 0x821F9738;
		  /* 821F9738h */ case   15:  		/* bl -8504 */
		/* 821F9738h case   15:*/		regs.LR = 0x821F973C; return 0x821F7600;
		/* 821F9738h case   15:*/		return 0x821F973C;
	}
	return 0x821F973C;
} // Block from 821F96FCh-821F973Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821F973Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F973C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F973C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F973C);
		  /* 821F973Ch */ case    0:  		/* mr R4, R20 */
		/* 821F973Ch case    0:*/		regs.R4 = regs.R20;
		/* 821F973Ch case    0:*/		return 0x821F9740;
		  /* 821F9740h */ case    1:  		/* lwz R3, <#[R31 + 576]> */
		/* 821F9740h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000240) );
		/* 821F9740h case    1:*/		return 0x821F9744;
		  /* 821F9744h */ case    2:  		/* bl -47324 */
		/* 821F9744h case    2:*/		regs.LR = 0x821F9748; return 0x821EDE68;
		/* 821F9744h case    2:*/		return 0x821F9748;
		  /* 821F9748h */ case    3:  		/* or R11, R26, R21 */
		/* 821F9748h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R26,regs.R21);
		/* 821F9748h case    3:*/		return 0x821F974C;
		  /* 821F974Ch */ case    4:  		/* stw R19, <#[R25 + 4]> */
		/* 821F974Ch case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R25 + 0x00000004) );
		/* 821F974Ch case    4:*/		return 0x821F9750;
		  /* 821F9750h */ case    5:  		/* stw R11, <#[R25]> */
		/* 821F9750h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821F9750h case    5:*/		return 0x821F9754;
		  /* 821F9754h */ case    6:  		/* addi R1, R1, 224 */
		/* 821F9754h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821F9754h case    6:*/		return 0x821F9758;
		  /* 821F9758h */ case    7:  		/* b -1475800 */
		/* 821F9758h case    7:*/		return 0x82091280;
		/* 821F9758h case    7:*/		return 0x821F975C;
		  /* 821F975Ch */ case    8:  		/* nop */
		/* 821F975Ch case    8:*/		cpu::op::nop();
		/* 821F975Ch case    8:*/		return 0x821F9760;
	}
	return 0x821F9760;
} // Block from 821F973Ch-821F9760h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F9760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9760);
		  /* 821F9760h */ case    0:  		/* mfspr R12, LR */
		/* 821F9760h case    0:*/		regs.R12 = regs.LR;
		/* 821F9760h case    0:*/		return 0x821F9764;
		  /* 821F9764h */ case    1:  		/* bl -1475864 */
		/* 821F9764h case    1:*/		regs.LR = 0x821F9768; return 0x8209124C;
		/* 821F9764h case    1:*/		return 0x821F9768;
		  /* 821F9768h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821F9768h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821F9768h case    2:*/		return 0x821F976C;
		  /* 821F976Ch */ case    3:  		/* mr R27, R4 */
		/* 821F976Ch case    3:*/		regs.R27 = regs.R4;
		/* 821F976Ch case    3:*/		return 0x821F9770;
		  /* 821F9770h */ case    4:  		/* mr R29, R5 */
		/* 821F9770h case    4:*/		regs.R29 = regs.R5;
		/* 821F9770h case    4:*/		return 0x821F9774;
		  /* 821F9774h */ case    5:  		/* li R5, 3 */
		/* 821F9774h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 821F9774h case    5:*/		return 0x821F9778;
		  /* 821F9778h */ case    6:  		/* li R4, 8 */
		/* 821F9778h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821F9778h case    6:*/		return 0x821F977C;
		  /* 821F977Ch */ case    7:  		/* mr R31, R3 */
		/* 821F977Ch case    7:*/		regs.R31 = regs.R3;
		/* 821F977Ch case    7:*/		return 0x821F9780;
		  /* 821F9780h */ case    8:  		/* mr R25, R6 */
		/* 821F9780h case    8:*/		regs.R25 = regs.R6;
		/* 821F9780h case    8:*/		return 0x821F9784;
		  /* 821F9784h */ case    9:  		/* mr R28, R7 */
		/* 821F9784h case    9:*/		regs.R28 = regs.R7;
		/* 821F9784h case    9:*/		return 0x821F9788;
		  /* 821F9788h */ case   10:  		/* mr R26, R8 */
		/* 821F9788h case   10:*/		regs.R26 = regs.R8;
		/* 821F9788h case   10:*/		return 0x821F978C;
		  /* 821F978Ch */ case   11:  		/* bl -609948 */
		/* 821F978Ch case   11:*/		regs.LR = 0x821F9790; return 0x821648F0;
		/* 821F978Ch case   11:*/		return 0x821F9790;
		  /* 821F9790h */ case   12:  		/* addi R11, R3, 4 */
		/* 821F9790h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821F9790h case   12:*/		return 0x821F9794;
		  /* 821F9794h */ case   13:  		/* ori R10, R3, 1 */
		/* 821F9794h case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821F9794h case   13:*/		return 0x821F9798;
		  /* 821F9798h */ case   14:  		/* ori R11, R11, 1 */
		/* 821F9798h case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F9798h case   14:*/		return 0x821F979C;
		  /* 821F979Ch */ case   15:  		/* stw R10, <#[R3 + 4]> */
		/* 821F979Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821F979Ch case   15:*/		return 0x821F97A0;
		  /* 821F97A0h */ case   16:  		/* mr R30, R3 */
		/* 821F97A0h case   16:*/		regs.R30 = regs.R3;
		/* 821F97A0h case   16:*/		return 0x821F97A4;
		  /* 821F97A4h */ case   17:  		/* stw R11, <#[R3]> */
		/* 821F97A4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821F97A4h case   17:*/		return 0x821F97A8;
		  /* 821F97A8h */ case   18:  		/* mr R5, R31 */
		/* 821F97A8h case   18:*/		regs.R5 = regs.R31;
		/* 821F97A8h case   18:*/		return 0x821F97AC;
		  /* 821F97ACh */ case   19:  		/* mr R4, R25 */
		/* 821F97ACh case   19:*/		regs.R4 = regs.R25;
		/* 821F97ACh case   19:*/		return 0x821F97B0;
		  /* 821F97B0h */ case   20:  		/* addi R3, R1, 80 */
		/* 821F97B0h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F97B0h case   20:*/		return 0x821F97B4;
		  /* 821F97B4h */ case   21:  		/* bl -10812 */
		/* 821F97B4h case   21:*/		regs.LR = 0x821F97B8; return 0x821F6D78;
		/* 821F97B4h case   21:*/		return 0x821F97B8;
		  /* 821F97B8h */ case   22:  		/* b 40 */
		/* 821F97B8h case   22:*/		return 0x821F97E0;
		/* 821F97B8h case   22:*/		return 0x821F97BC;
		  /* 821F97BCh */ case   23:  		/* cmplwi CR6, R3, 0 */
		/* 821F97BCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821F97BCh case   23:*/		return 0x821F97C0;
		  /* 821F97C0h */ case   24:  		/* bc 12, CR6_EQ, 216 */
		/* 821F97C0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821F9898;  }
		/* 821F97C0h case   24:*/		return 0x821F97C4;
		  /* 821F97C4h */ case   25:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F97C4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F97C4h case   25:*/		return 0x821F97C8;
		  /* 821F97C8h */ case   26:  		/* cmpwi CR6, R11, 19 */
		/* 821F97C8h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 821F97C8h case   26:*/		return 0x821F97CC;
		  /* 821F97CCh */ case   27:  		/* bc 4, CR6_EQ, 204 */
		/* 821F97CCh case   27:*/		if ( !regs.CR[6].eq ) { return 0x821F9898;  }
		/* 821F97CCh case   27:*/		return 0x821F97D0;
		  /* 821F97D0h */ case   28:  		/* mr R5, R3 */
		/* 821F97D0h case   28:*/		regs.R5 = regs.R3;
		/* 821F97D0h case   28:*/		return 0x821F97D4;
		  /* 821F97D4h */ case   29:  		/* mr R4, R30 */
		/* 821F97D4h case   29:*/		regs.R4 = regs.R30;
		/* 821F97D4h case   29:*/		return 0x821F97D8;
		  /* 821F97D8h */ case   30:  		/* mr R3, R31 */
		/* 821F97D8h case   30:*/		regs.R3 = regs.R31;
		/* 821F97D8h case   30:*/		return 0x821F97DC;
		  /* 821F97DCh */ case   31:  		/* bl -13332 */
		/* 821F97DCh case   31:*/		regs.LR = 0x821F97E0; return 0x821F63C8;
		/* 821F97DCh case   31:*/		return 0x821F97E0;
	}
	return 0x821F97E0;
} // Block from 821F9760h-821F97E0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821F97E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F97E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F97E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F97E0);
		  /* 821F97E0h */ case    0:  		/* addi R3, R1, 80 */
		/* 821F97E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821F97E0h case    0:*/		return 0x821F97E4;
		  /* 821F97E4h */ case    1:  		/* bl -10668 */
		/* 821F97E4h case    1:*/		regs.LR = 0x821F97E8; return 0x821F6E38;
		/* 821F97E4h case    1:*/		return 0x821F97E8;
		  /* 821F97E8h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821F97E8h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821F97E8h case    2:*/		return 0x821F97EC;
		  /* 821F97ECh */ case    3:  		/* bc 4, CR0_EQ, -48 */
		/* 821F97ECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821F97BC;  }
		/* 821F97ECh case    3:*/		return 0x821F97F0;
		  /* 821F97F0h */ case    4:  		/* li R5, 0 */
		/* 821F97F0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F97F0h case    4:*/		return 0x821F97F4;
		  /* 821F97F4h */ case    5:  		/* cmpwi CR6, R28, 2 */
		/* 821F97F4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000002);
		/* 821F97F4h case    5:*/		return 0x821F97F8;
		  /* 821F97F8h */ case    6:  		/* bc 4, CR6_EQ, 48 */
		/* 821F97F8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821F9828;  }
		/* 821F97F8h case    6:*/		return 0x821F97FC;
		  /* 821F97FCh */ case    7:  		/* rlwinm. R11, R29, 0, 26, 26 */
		/* 821F97FCh case    7:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R29);
		/* 821F97FCh case    7:*/		return 0x821F9800;
	}
	return 0x821F9800;
} // Block from 821F97E0h-821F9800h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F9800h
// Function '?AnyTypesRequireConversion@Compiler@D3DXShader@@AAA_NPAVCNode@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9800);
		  /* 821F9800h */ case    0:  		/* bc 12, CR0_EQ, 12 */
		/* 821F9800h case    0:*/		if ( regs.CR[0].eq ) { return 0x821F980C;  }
		/* 821F9800h case    0:*/		return 0x821F9804;
		  /* 821F9804h */ case    1:  		/* rlwinm. R10, R29, 0, 27, 27 */
		/* 821F9804h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R29);
		/* 821F9804h case    1:*/		return 0x821F9808;
		  /* 821F9808h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 821F9808h case    2:*/		if ( regs.CR[0].eq ) { return 0x821F9810;  }
		/* 821F9808h case    2:*/		return 0x821F980C;
	}
	return 0x821F980C;
} // Block from 821F9800h-821F980Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F980Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F980C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F980C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F980C);
		  /* 821F980Ch */ case    0:  		/* li R5, 4096 */
		/* 821F980Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1000);
		/* 821F980Ch case    0:*/		return 0x821F9810;
	}
	return 0x821F9810;
} // Block from 821F980Ch-821F9810h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F9810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9810);
		  /* 821F9810h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821F9810h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9810h case    0:*/		return 0x821F9814;
		  /* 821F9814h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821F9814h case    1:*/		if ( regs.CR[6].eq ) { return 0x821F9828;  }
		/* 821F9814h case    1:*/		return 0x821F9818;
		  /* 821F9818h */ case    2:  		/* lwz R11, <#[R27 + 4]> */
		/* 821F9818h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821F9818h case    2:*/		return 0x821F981C;
		  /* 821F981Ch */ case    3:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821F981Ch case    3:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821F981Ch case    3:*/		return 0x821F9820;
		  /* 821F9820h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821F9820h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821F9828;  }
		/* 821F9820h case    4:*/		return 0x821F9824;
		  /* 821F9824h */ case    5:  		/* li R5, 4 */
		/* 821F9824h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821F9824h case    5:*/		return 0x821F9828;
	}
	return 0x821F9828;
} // Block from 821F9810h-821F9828h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F9828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9828);
		  /* 821F9828h */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 821F9828h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 821F9828h case    0:*/		return 0x821F982C;
		  /* 821F982Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821F982Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821F9834;  }
		/* 821F982Ch case    1:*/		return 0x821F9830;
		  /* 821F9830h */ case    2:  		/* rlwinm R5, R5, 0, 29, 29 */
		/* 821F9830h case    2:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R5,regs.R5);
		/* 821F9830h case    2:*/		return 0x821F9834;
	}
	return 0x821F9834;
} // Block from 821F9828h-821F9834h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9834);
		  /* 821F9834h */ case    0:  		/* addi R10, R1, 96 */
		/* 821F9834h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821F9834h case    0:*/		return 0x821F9838;
		  /* 821F9838h */ case    1:  		/* li R9, 0 */
		/* 821F9838h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821F9838h case    1:*/		return 0x821F983C;
		  /* 821F983Ch */ case    2:  		/* li R8, 0 */
		/* 821F983Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F983Ch case    2:*/		return 0x821F9840;
		  /* 821F9840h */ case    3:  		/* mr R7, R28 */
		/* 821F9840h case    3:*/		regs.R7 = regs.R28;
		/* 821F9840h case    3:*/		return 0x821F9844;
		  /* 821F9844h */ case    4:  		/* li R6, 0 */
		/* 821F9844h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F9844h case    4:*/		return 0x821F9848;
		  /* 821F9848h */ case    5:  		/* mr R4, R30 */
		/* 821F9848h case    5:*/		regs.R4 = regs.R30;
		/* 821F9848h case    5:*/		return 0x821F984C;
		  /* 821F984Ch */ case    6:  		/* mr R3, R31 */
		/* 821F984Ch case    6:*/		regs.R3 = regs.R31;
		/* 821F984Ch case    6:*/		return 0x821F9850;
		  /* 821F9850h */ case    7:  		/* bl -1832 */
		/* 821F9850h case    7:*/		regs.LR = 0x821F9854; return 0x821F9128;
		/* 821F9850h case    7:*/		return 0x821F9854;
		  /* 821F9854h */ case    8:  		/* lwz R11, <#[R1 + 96]> */
		/* 821F9854h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821F9854h case    8:*/		return 0x821F9858;
		  /* 821F9858h */ case    9:  		/* rlwinm. R10, R11, 0, 19, 19 */
		/* 821F9858h case    9:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R10,regs.R11);
		/* 821F9858h case    9:*/		return 0x821F985C;
		  /* 821F985Ch */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821F985Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821F986C;  }
		/* 821F985Ch case   10:*/		return 0x821F9860;
		  /* 821F9860h */ case   11:  		/* lwz R10, <#[R27 + 4]> */
		/* 821F9860h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 821F9860h case   11:*/		return 0x821F9864;
		  /* 821F9864h */ case   12:  		/* oris R10, R10, 8192 */
		/* 821F9864h case   12:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x2000);
		/* 821F9864h case   12:*/		return 0x821F9868;
		  /* 821F9868h */ case   13:  		/* stw R10, <#[R27 + 4]> */
		/* 821F9868h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000004) );
		/* 821F9868h case   13:*/		return 0x821F986C;
	}
	return 0x821F986C;
} // Block from 821F9834h-821F986Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821F986Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F986C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F986C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F986C);
		  /* 821F986Ch */ case    0:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821F986Ch case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821F986Ch case    0:*/		return 0x821F9870;
		  /* 821F9870h */ case    1:  		/* bc 12, CR0_EQ, 84 */
		/* 821F9870h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F98C4;  }
		/* 821F9870h case    1:*/		return 0x821F9874;
		  /* 821F9874h */ case    2:  		/* li R4, 3651 */
		/* 821F9874h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xE43);
		/* 821F9874h case    2:*/		return 0x821F9878;
		  /* 821F9878h */ case    3:  		/* mr R3, R31 */
		/* 821F9878h case    3:*/		regs.R3 = regs.R31;
		/* 821F9878h case    3:*/		return 0x821F987C;
		  /* 821F987Ch */ case    4:  		/* bl -686852 */
		/* 821F987Ch case    4:*/		regs.LR = 0x821F9880; return 0x82151D78;
		/* 821F987Ch case    4:*/		return 0x821F9880;
		  /* 821F9880h */ case    5:  		/* lwz R11, <#[R27 + 4]> */
		/* 821F9880h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821F9880h case    5:*/		return 0x821F9884;
		  /* 821F9884h */ case    6:  		/* cmpw CR6, R28, R26 */
		/* 821F9884h case    6:*/		cpu::op::cmpw<6>(regs,regs.R28,regs.R26);
		/* 821F9884h case    6:*/		return 0x821F9888;
		  /* 821F9888h */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 821F9888h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821F98A4;  }
		/* 821F9888h case    7:*/		return 0x821F988C;
		  /* 821F988Ch */ case    8:  		/* oris R11, R11, 16384 */
		/* 821F988Ch case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 821F988Ch case    8:*/		return 0x821F9890;
		  /* 821F9890h */ case    9:  		/* stw R11, <#[R27 + 4]> */
		/* 821F9890h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821F9890h case    9:*/		return 0x821F9894;
		  /* 821F9894h */ case   10:  		/* b 36 */
		/* 821F9894h case   10:*/		return 0x821F98B8;
		/* 821F9894h case   10:*/		return 0x821F9898;
	}
	return 0x821F9898;
} // Block from 821F986Ch-821F9898h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821F9898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9898);
		  /* 821F9898h */ case    0:  		/* li R4, 4801 */
		/* 821F9898h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9898h case    0:*/		return 0x821F989C;
		  /* 821F989Ch */ case    1:  		/* mr R3, R31 */
		/* 821F989Ch case    1:*/		regs.R3 = regs.R31;
		/* 821F989Ch case    1:*/		return 0x821F98A0;
		  /* 821F98A0h */ case    2:  		/* bl -686648 */
		/* 821F98A0h case    2:*/		regs.LR = 0x821F98A4; return 0x82151E68;
		/* 821F98A0h case    2:*/		return 0x821F98A4;
	}
	return 0x821F98A4;
} // Block from 821F9898h-821F98A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F98A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F98A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F98A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F98A4);
		  /* 821F98A4h */ case    0:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821F98A4h case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821F98A4h case    0:*/		return 0x821F98A8;
		  /* 821F98A8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821F98A8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821F98B8;  }
		/* 821F98A8h case    1:*/		return 0x821F98AC;
		  /* 821F98ACh */ case    2:  		/* li R4, 3577 */
		/* 821F98ACh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xDF9);
		/* 821F98ACh case    2:*/		return 0x821F98B0;
		  /* 821F98B0h */ case    3:  		/* mr R3, R31 */
		/* 821F98B0h case    3:*/		regs.R3 = regs.R31;
		/* 821F98B0h case    3:*/		return 0x821F98B4;
		  /* 821F98B4h */ case    4:  		/* bl -686908 */
		/* 821F98B4h case    4:*/		regs.LR = 0x821F98B8; return 0x82151D78;
		/* 821F98B4h case    4:*/		return 0x821F98B8;
	}
	return 0x821F98B8;
} // Block from 821F98A4h-821F98B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F98B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F98B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F98B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F98B8);
		  /* 821F98B8h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821F98B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F98B8h case    0:*/		return 0x821F98BC;
		  /* 821F98BCh */ case    1:  		/* ori R11, R11, 32768 */
		/* 821F98BCh case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821F98BCh case    1:*/		return 0x821F98C0;
		  /* 821F98C0h */ case    2:  		/* stw R11, <#[R31 + 40]> */
		/* 821F98C0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821F98C0h case    2:*/		return 0x821F98C4;
	}
	return 0x821F98C4;
} // Block from 821F98B8h-821F98C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F98C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F98C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F98C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F98C4);
		  /* 821F98C4h */ case    0:  		/* mr R4, R30 */
		/* 821F98C4h case    0:*/		regs.R4 = regs.R30;
		/* 821F98C4h case    0:*/		return 0x821F98C8;
		  /* 821F98C8h */ case    1:  		/* mr R3, R31 */
		/* 821F98C8h case    1:*/		regs.R3 = regs.R31;
		/* 821F98C8h case    1:*/		return 0x821F98CC;
		  /* 821F98CCh */ case    2:  		/* bl -12940 */
		/* 821F98CCh case    2:*/		regs.LR = 0x821F98D0; return 0x821F6640;
		/* 821F98CCh case    2:*/		return 0x821F98D0;
		  /* 821F98D0h */ case    3:  		/* addi R10, R31, 972 */
		/* 821F98D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x3CC);
		/* 821F98D0h case    3:*/		return 0x821F98D4;
		  /* 821F98D4h */ case    4:  		/* lwz R11, <#[R1 + 80]> */
		/* 821F98D4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821F98D4h case    4:*/		return 0x821F98D8;
		  /* 821F98D8h */ case    5:  		/* lwz R8, <#[R1 + 84]> */
		/* 821F98D8h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 821F98D8h case    5:*/		return 0x821F98DC;
		  /* 821F98DCh */ case    6:  		/* addi R9, R11, 972 */
		/* 821F98DCh case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3CC);
		/* 821F98DCh case    6:*/		return 0x821F98E0;
		  /* 821F98E0h */ case    7:  		/* lwz R10, <#[R31 + 976]> */
		/* 821F98E0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000003D0) );
		/* 821F98E0h case    7:*/		return 0x821F98E4;
		  /* 821F98E4h */ case    8:  		/* stw R10, <#[R30]> */
		/* 821F98E4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821F98E4h case    8:*/		return 0x821F98E8;
		  /* 821F98E8h */ case    9:  		/* stw R30, <#[R31 + 976]> */
		/* 821F98E8h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000003D0) );
		/* 821F98E8h case    9:*/		return 0x821F98EC;
		  /* 821F98ECh */ case   10:  		/* lwz R10, <#[R11 + 976]> */
		/* 821F98ECh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F98ECh case   10:*/		return 0x821F98F0;
		  /* 821F98F0h */ case   11:  		/* stw R10, <#[R8]> */
		/* 821F98F0h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821F98F0h case   11:*/		return 0x821F98F4;
		  /* 821F98F4h */ case   12:  		/* stw R8, <#[R11 + 976]> */
		/* 821F98F4h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F98F4h case   12:*/		return 0x821F98F8;
		  /* 821F98F8h */ case   13:  		/* addi R1, R1, 176 */
		/* 821F98F8h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821F98F8h case   13:*/		return 0x821F98FC;
		  /* 821F98FCh */ case   14:  		/* b -1476192 */
		/* 821F98FCh case   14:*/		return 0x8209129C;
		/* 821F98FCh case   14:*/		return 0x821F9900;
	}
	return 0x821F9900;
} // Block from 821F98C4h-821F9900h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821F9900h
// Function '?CollectUnresolvedOptions@Compiler@D3DXShader@@AAAXPAVResultStack@2@PAVCNodeUAsmInstruction@2@PAVInstruction@2@PAPAUUnresolvedUAsmOptions@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9900);
		  /* 821F9900h */ case    0:  		/* mfspr R12, LR */
		/* 821F9900h case    0:*/		regs.R12 = regs.LR;
		/* 821F9900h case    0:*/		return 0x821F9904;
		  /* 821F9904h */ case    1:  		/* bl -1476324 */
		/* 821F9904h case    1:*/		regs.LR = 0x821F9908; return 0x82091220;
		/* 821F9904h case    1:*/		return 0x821F9908;
		  /* 821F9908h */ case    2:  		/* stwu R1, <#[R1 - 304]> */
		/* 821F9908h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 821F9908h case    2:*/		return 0x821F990C;
		  /* 821F990Ch */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 821F990Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 821F990Ch case    3:*/		return 0x821F9910;
		  /* 821F9910h */ case    4:  		/* mr R31, R3 */
		/* 821F9910h case    4:*/		regs.R31 = regs.R3;
		/* 821F9910h case    4:*/		return 0x821F9914;
		  /* 821F9914h */ case    5:  		/* mr R28, R4 */
		/* 821F9914h case    5:*/		regs.R28 = regs.R4;
		/* 821F9914h case    5:*/		return 0x821F9918;
		  /* 821F9918h */ case    6:  		/* stw R4, <#[R1 + 332]> */
		/* 821F9918h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000014C) );
		/* 821F9918h case    6:*/		return 0x821F991C;
		  /* 821F991Ch */ case    7:  		/* mr R15, R5 */
		/* 821F991Ch case    7:*/		regs.R15 = regs.R5;
		/* 821F991Ch case    7:*/		return 0x821F9920;
		  /* 821F9920h */ case    8:  		/* stw R7, <#[R1 + 356]> */
		/* 821F9920h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000164) );
		/* 821F9920h case    8:*/		return 0x821F9924;
		  /* 821F9924h */ case    9:  		/* mr R29, R6 */
		/* 821F9924h case    9:*/		regs.R29 = regs.R6;
		/* 821F9924h case    9:*/		return 0x821F9928;
		  /* 821F9928h */ case   10:  		/* cmplw CR6, R5, R11 */
		/* 821F9928h case   10:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821F9928h case   10:*/		return 0x821F992C;
		  /* 821F992Ch */ case   11:  		/* bc 12, CR6_EQ, 816 */
		/* 821F992Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821F9C5C;  }
		/* 821F992Ch case   11:*/		return 0x821F9930;
		  /* 821F9930h */ case   12:  		/* lwz R10, <#[R3 + 12]> */
		/* 821F9930h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821F9930h case   12:*/		return 0x821F9934;
		  /* 821F9934h */ case   13:  		/* mulli R27, R5, 40 */
		/* 821F9934h case   13:*/		cpu::op::mulli<0>(regs,&regs.R27,regs.R5,0x28);
		/* 821F9934h case   13:*/		return 0x821F9938;
		  /* 821F9938h */ case   14:  		/* lwz R11, <#[R3 + 564]> */
		/* 821F9938h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000234) );
		/* 821F9938h case   14:*/		return 0x821F993C;
		  /* 821F993Ch */ case   15:  		/* stw R27, <#[R1 + 96]> */
		/* 821F993Ch case   15:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 821F993Ch case   15:*/		return 0x821F9940;
		  /* 821F9940h */ case   16:  		/* lwzx R9, <#[R27 + R10]> */
		/* 821F9940h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + regs.R10 + 0x00000000) );
		/* 821F9940h case   16:*/		return 0x821F9944;
		  /* 821F9944h */ case   17:  		/* lwz R11, <#[R11 + 80]> */
		/* 821F9944h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821F9944h case   17:*/		return 0x821F9948;
		  /* 821F9948h */ case   18:  		/* li R18, 0 */
		/* 821F9948h case   18:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821F9948h case   18:*/		return 0x821F994C;
		  /* 821F994Ch */ case   19:  		/* add R20, R27, R10 */
		/* 821F994Ch case   19:*/		cpu::op::add<0>(regs,&regs.R20,regs.R27,regs.R10);
		/* 821F994Ch case   19:*/		return 0x821F9950;
		  /* 821F9950h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821F9950h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9950h case   20:*/		return 0x821F9954;
		  /* 821F9954h */ case   21:  		/* rlwinm R30, R9, 29, 18, 31 */
		/* 821F9954h case   21:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R30,regs.R9);
		/* 821F9954h case   21:*/		return 0x821F9958;
		  /* 821F9958h */ case   22:  		/* bc 12, CR6_EQ, 16 */
		/* 821F9958h case   22:*/		if ( regs.CR[6].eq ) { return 0x821F9968;  }
		/* 821F9958h case   22:*/		return 0x821F995C;
		  /* 821F995Ch */ case   23:  		/* rlwinm R10, R5, 2, 0, 29 */
		/* 821F995Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R5);
		/* 821F995Ch case   23:*/		return 0x821F9960;
		  /* 821F9960h */ case   24:  		/* lwzx R6, <#[R10 + R11]> */
		/* 821F9960h case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821F9960h case   24:*/		return 0x821F9964;
		  /* 821F9964h */ case   25:  		/* b 8 */
		/* 821F9964h case   25:*/		return 0x821F996C;
		/* 821F9964h case   25:*/		return 0x821F9968;
	}
	return 0x821F9968;
} // Block from 821F9900h-821F9968h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821F9968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9968);
		  /* 821F9968h */ case    0:  		/* mr R6, R18 */
		/* 821F9968h case    0:*/		regs.R6 = regs.R18;
		/* 821F9968h case    0:*/		return 0x821F996C;
	}
	return 0x821F996C;
} // Block from 821F9968h-821F996Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821F996Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F996C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F996C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F996C);
		  /* 821F996Ch */ case    0:  		/* li R9, 0 */
		/* 821F996Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821F996Ch case    0:*/		return 0x821F9970;
		  /* 821F9970h */ case    1:  		/* mr R8, R30 */
		/* 821F9970h case    1:*/		regs.R8 = regs.R30;
		/* 821F9970h case    1:*/		return 0x821F9974;
		  /* 821F9974h */ case    2:  		/* li R7, 0 */
		/* 821F9974h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F9974h case    2:*/		return 0x821F9978;
		  /* 821F9978h */ case    3:  		/* mr R5, R15 */
		/* 821F9978h case    3:*/		regs.R5 = regs.R15;
		/* 821F9978h case    3:*/		return 0x821F997C;
		  /* 821F997Ch */ case    4:  		/* mr R4, R28 */
		/* 821F997Ch case    4:*/		regs.R4 = regs.R28;
		/* 821F997Ch case    4:*/		return 0x821F9980;
		  /* 821F9980h */ case    5:  		/* mr R3, R31 */
		/* 821F9980h case    5:*/		regs.R3 = regs.R31;
		/* 821F9980h case    5:*/		return 0x821F9984;
		  /* 821F9984h */ case    6:  		/* bl -4692 */
		/* 821F9984h case    6:*/		regs.LR = 0x821F9988; return 0x821F8730;
		/* 821F9984h case    6:*/		return 0x821F9988;
		  /* 821F9988h */ case    7:  		/* mr R4, R28 */
		/* 821F9988h case    7:*/		regs.R4 = regs.R28;
		/* 821F9988h case    7:*/		return 0x821F998C;
		  /* 821F998Ch */ case    8:  		/* addi R3, R1, 112 */
		/* 821F998Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821F998Ch case    8:*/		return 0x821F9990;
		  /* 821F9990h */ case    9:  		/* bl -367456 */
		/* 821F9990h case    9:*/		regs.LR = 0x821F9994; return 0x8219FE30;
		/* 821F9990h case    9:*/		return 0x821F9994;
		  /* 821F9994h */ case   10:  		/* mr R4, R30 */
		/* 821F9994h case   10:*/		regs.R4 = regs.R30;
		/* 821F9994h case   10:*/		return 0x821F9998;
		  /* 821F9998h */ case   11:  		/* addi R3, R1, 112 */
		/* 821F9998h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821F9998h case   11:*/		return 0x821F999C;
		  /* 821F999Ch */ case   12:  		/* bl -32812 */
		/* 821F999Ch case   12:*/		regs.LR = 0x821F99A0; return 0x821F1970;
		/* 821F999Ch case   12:*/		return 0x821F99A0;
		  /* 821F99A0h */ case   13:  		/* li R6, 0 */
		/* 821F99A0h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F99A0h case   13:*/		return 0x821F99A4;
		  /* 821F99A4h */ case   14:  		/* mr R5, R29 */
		/* 821F99A4h case   14:*/		regs.R5 = regs.R29;
		/* 821F99A4h case   14:*/		return 0x821F99A8;
		  /* 821F99A8h */ case   15:  		/* lwz R4, <#[R20 + 20]> */
		/* 821F99A8h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x00000014) );
		/* 821F99A8h case   15:*/		return 0x821F99AC;
		  /* 821F99ACh */ case   16:  		/* mr R3, R31 */
		/* 821F99ACh case   16:*/		regs.R3 = regs.R31;
		/* 821F99ACh case   16:*/		return 0x821F99B0;
		  /* 821F99B0h */ case   17:  		/* bl -442944 */
		/* 821F99B0h case   17:*/		regs.LR = 0x821F99B4; return 0x8218D770;
		/* 821F99B0h case   17:*/		return 0x821F99B4;
		  /* 821F99B4h */ case   18:  		/* mr R16, R3 */
		/* 821F99B4h case   18:*/		regs.R16 = regs.R3;
		/* 821F99B4h case   18:*/		return 0x821F99B8;
		  /* 821F99B8h */ case   19:  		/* stw R30, <#[R1 + 100]> */
		/* 821F99B8h case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 821F99B8h case   19:*/		return 0x821F99BC;
		  /* 821F99BCh */ case   20:  		/* mr R21, R18 */
		/* 821F99BCh case   20:*/		regs.R21 = regs.R18;
		/* 821F99BCh case   20:*/		return 0x821F99C0;
		  /* 821F99C0h */ case   21:  		/* cmplwi CR6, R30, 0 */
		/* 821F99C0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821F99C0h case   21:*/		return 0x821F99C4;
		  /* 821F99C4h */ case   22:  		/* bc 12, CR6_EQ, 640 */
		/* 821F99C4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821F9C44;  }
		/* 821F99C4h case   22:*/		return 0x821F99C8;
		  /* 821F99C8h */ case   23:  		/* mr R3, R16 */
		/* 821F99C8h case   23:*/		regs.R3 = regs.R16;
		/* 821F99C8h case   23:*/		return 0x821F99CC;
		  /* 821F99CCh */ case   24:  		/* bl -9676 */
		/* 821F99CCh case   24:*/		regs.LR = 0x821F99D0; return 0x821F7400;
		/* 821F99CCh case   24:*/		return 0x821F99D0;
		  /* 821F99D0h */ case   25:  		/* lwz R14, <#[R16 + 8]> */
		/* 821F99D0h case   25:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R16 + 0x00000008) );
		/* 821F99D0h case   25:*/		return 0x821F99D4;
		  /* 821F99D4h */ case   26:  		/* cmplwi CR6, R14, 0 */
		/* 821F99D4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821F99D4h case   26:*/		return 0x821F99D8;
		  /* 821F99D8h */ case   27:  		/* bc 12, CR6_EQ, 716 */
		/* 821F99D8h case   27:*/		if ( regs.CR[6].eq ) { return 0x821F9CA4;  }
		/* 821F99D8h case   27:*/		return 0x821F99DC;
		  /* 821F99DCh */ case   28:  		/* lwz R11, <#[R20 + 28]> */
		/* 821F99DCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 821F99DCh case   28:*/		return 0x821F99E0;
		  /* 821F99E0h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 821F99E0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F99E0h case   29:*/		return 0x821F99E4;
		  /* 821F99E4h */ case   30:  		/* bc 4, CR6_EQ, 16 */
		/* 821F99E4h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821F99F4;  }
		/* 821F99E4h case   30:*/		return 0x821F99E8;
		  /* 821F99E8h */ case   31:  		/* mr R4, R15 */
		/* 821F99E8h case   31:*/		regs.R4 = regs.R15;
		/* 821F99E8h case   31:*/		return 0x821F99EC;
		  /* 821F99ECh */ case   32:  		/* mr R3, R31 */
		/* 821F99ECh case   32:*/		regs.R3 = regs.R31;
		/* 821F99ECh case   32:*/		return 0x821F99F0;
		  /* 821F99F0h */ case   33:  		/* bl -442496 */
		/* 821F99F0h case   33:*/		regs.LR = 0x821F99F4; return 0x8218D970;
		/* 821F99F0h case   33:*/		return 0x821F99F4;
	}
	return 0x821F99F4;
} // Block from 821F996Ch-821F99F4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821F99F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F99F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F99F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F99F4);
		  /* 821F99F4h */ case    0:  		/* lwz R11, <#[R16 + 4]> */
		/* 821F99F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 821F99F4h case    0:*/		return 0x821F99F8;
		  /* 821F99F8h */ case    1:  		/* mr R22, R18 */
		/* 821F99F8h case    1:*/		regs.R22 = regs.R18;
		/* 821F99F8h case    1:*/		return 0x821F99FC;
		  /* 821F99FCh */ case    2:  		/* addic. R19, R11, 1 */
		/* 821F99FCh case    2:*/		cpu::op::addic<1>(regs,&regs.R19,regs.R11,0x1);
		/* 821F99FCh case    2:*/		return 0x821F9A00;
		  /* 821F9A00h */ case    3:  		/* bc 12, CR0_EQ, 556 */
		/* 821F9A00h case    3:*/		if ( regs.CR[0].eq ) { return 0x821F9C2C;  }
		/* 821F9A00h case    3:*/		return 0x821F9A04;
		  /* 821F9A04h */ case    4:  		/* rlwinm R17, R21, 3, 0, 28 */
		/* 821F9A04h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R17,regs.R21);
		/* 821F9A04h case    4:*/		return 0x821F9A08;
		  /* 821F9A08h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 821F9A08h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F9A08h case    5:*/		return 0x821F9A0C;
		  /* 821F9A0Ch */ case    6:  		/* add R11, R27, R11 */
		/* 821F9A0Ch case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 821F9A0Ch case    6:*/		return 0x821F9A10;
		  /* 821F9A10h */ case    7:  		/* lwz R9, <#[R11 + 28]> */
		/* 821F9A10h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 821F9A10h case    7:*/		return 0x821F9A14;
		  /* 821F9A14h */ case    8:  		/* lwzx R11, <#[R17 + R9]> */
		/* 821F9A14h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + regs.R9 + 0x00000000) );
		/* 821F9A14h case    8:*/		return 0x821F9A18;
		  /* 821F9A18h */ case    9:  		/* rlwinm. R10, R11, 0, 5, 5 */
		/* 821F9A18h case    9:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R10,regs.R11);
		/* 821F9A18h case    9:*/		return 0x821F9A1C;
		  /* 821F9A1Ch */ case   10:  		/* bc 12, CR0_EQ, 584 */
		/* 821F9A1Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821F9C64;  }
		/* 821F9A1Ch case   10:*/		return 0x821F9A20;
		  /* 821F9A20h */ case   11:  		/* rlwinm R23, R11, 5, 28, 31 */
		/* 821F9A20h case   11:*/		cpu::op::rlwinm<0,5,28,31>(regs,&regs.R23,regs.R11);
		/* 821F9A20h case   11:*/		return 0x821F9A24;
		  /* 821F9A24h */ case   12:  		/* mr R11, R18 */
		/* 821F9A24h case   12:*/		regs.R11 = regs.R18;
		/* 821F9A24h case   12:*/		return 0x821F9A28;
		  /* 821F9A28h */ case   13:  		/* cmplwi CR6, R22, 0 */
		/* 821F9A28h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821F9A28h case   13:*/		return 0x821F9A2C;
		  /* 821F9A2Ch */ case   14:  		/* bc 12, CR6_EQ, 48 */
		/* 821F9A2Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x821F9A5C;  }
		/* 821F9A2Ch case   14:*/		return 0x821F9A30;
		  /* 821F9A30h */ case   15:  		/* rlwinm R10, R21, 3, 0, 28 */
		/* 821F9A30h case   15:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R21);
		/* 821F9A30h case   15:*/		return 0x821F9A34;
		  /* 821F9A34h */ case   16:  		/* lwzx R8, <#[R10 + R9]> */
		/* 821F9A34h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821F9A34h case   16:*/		return 0x821F9A38;
		  /* 821F9A38h */ case   17:  		/* rlwinm R8, R8, 5, 28, 31 */
		/* 821F9A38h case   17:*/		cpu::op::rlwinm<0,5,28,31>(regs,&regs.R8,regs.R8);
		/* 821F9A38h case   17:*/		return 0x821F9A3C;
		  /* 821F9A3Ch */ case   18:  		/* cmplw CR6, R8, R23 */
		/* 821F9A3Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R23);
		/* 821F9A3Ch case   18:*/		return 0x821F9A40;
		  /* 821F9A40h */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 821F9A40h case   19:*/		if ( regs.CR[6].eq ) { return 0x821F9A54;  }
		/* 821F9A40h case   19:*/		return 0x821F9A44;
		  /* 821F9A44h */ case   20:  		/* addi R11, R11, 1 */
		/* 821F9A44h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F9A44h case   20:*/		return 0x821F9A48;
		  /* 821F9A48h */ case   21:  		/* addi R10, R10, 8 */
		/* 821F9A48h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 821F9A48h case   21:*/		return 0x821F9A4C;
		  /* 821F9A4Ch */ case   22:  		/* cmplw CR6, R11, R22 */
		/* 821F9A4Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821F9A4Ch case   22:*/		return 0x821F9A50;
		  /* 821F9A50h */ case   23:  		/* bc 12, CR6_LT, -28 */
		/* 821F9A50h case   23:*/		if ( regs.CR[6].lt ) { return 0x821F9A34;  }
		/* 821F9A50h case   23:*/		return 0x821F9A54;
	}
	return 0x821F9A54;
} // Block from 821F99F4h-821F9A54h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821F9A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9A54);
		  /* 821F9A54h */ case    0:  		/* cmplw CR6, R11, R22 */
		/* 821F9A54h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821F9A54h case    0:*/		return 0x821F9A58;
		  /* 821F9A58h */ case    1:  		/* bc 12, CR6_LT, 452 */
		/* 821F9A58h case    1:*/		if ( regs.CR[6].lt ) { return 0x821F9C1C;  }
		/* 821F9A58h case    1:*/		return 0x821F9A5C;
	}
	return 0x821F9A5C;
} // Block from 821F9A54h-821F9A5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F9A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9A5C);
		  /* 821F9A5Ch */ case    0:  		/* addi R11, R1, 132 */
		/* 821F9A5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x84);
		/* 821F9A5Ch case    0:*/		return 0x821F9A60;
		  /* 821F9A60h */ case    1:  		/* stw R18, <#[R1 + 128]> */
		/* 821F9A60h case    1:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000080) );
		/* 821F9A60h case    1:*/		return 0x821F9A64;
		  /* 821F9A64h */ case    2:  		/* mr R26, R18 */
		/* 821F9A64h case    2:*/		regs.R26 = regs.R18;
		/* 821F9A64h case    2:*/		return 0x821F9A68;
		  /* 821F9A68h */ case    3:  		/* mr R27, R18 */
		/* 821F9A68h case    3:*/		regs.R27 = regs.R18;
		/* 821F9A68h case    3:*/		return 0x821F9A6C;
		  /* 821F9A6Ch */ case    4:  		/* mr R24, R22 */
		/* 821F9A6Ch case    4:*/		regs.R24 = regs.R22;
		/* 821F9A6Ch case    4:*/		return 0x821F9A70;
		  /* 821F9A70h */ case    5:  		/* cmplw CR6, R22, R19 */
		/* 821F9A70h case    5:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R19);
		/* 821F9A70h case    5:*/		return 0x821F9A74;
		  /* 821F9A74h */ case    6:  		/* stw R18, <#[R11]> */
		/* 821F9A74h case    6:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000000) );
		/* 821F9A74h case    6:*/		return 0x821F9A78;
		  /* 821F9A78h */ case    7:  		/* stw R18, <#[R11 + 4]> */
		/* 821F9A78h case    7:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9A78h case    7:*/		return 0x821F9A7C;
		  /* 821F9A7Ch */ case    8:  		/* stw R18, <#[R11 + 8]> */
		/* 821F9A7Ch case    8:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000008) );
		/* 821F9A7Ch case    8:*/		return 0x821F9A80;
		  /* 821F9A80h */ case    9:  		/* bc 4, CR6_LT, 536 */
		/* 821F9A80h case    9:*/		if ( !regs.CR[6].lt ) { return 0x821F9C98;  }
		/* 821F9A80h case    9:*/		return 0x821F9A84;
		  /* 821F9A84h */ case   10:  		/* addi R11, R1, 128 */
		/* 821F9A84h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 821F9A84h case   10:*/		return 0x821F9A88;
		  /* 821F9A88h */ case   11:  		/* mr R28, R17 */
		/* 821F9A88h case   11:*/		regs.R28 = regs.R17;
		/* 821F9A88h case   11:*/		return 0x821F9A8C;
		  /* 821F9A8Ch */ case   12:  		/* addi R25, R11, -4 */
		/* 821F9A8Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFFFFC);
		/* 821F9A8Ch case   12:*/		return 0x821F9A90;
		  /* 821F9A90h */ case   13:  		/* lwz R11, <#[R31 + 12]> */
		/* 821F9A90h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F9A90h case   13:*/		return 0x821F9A94;
		  /* 821F9A94h */ case   14:  		/* lwz R10, <#[R1 + 96]> */
		/* 821F9A94h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 821F9A94h case   14:*/		return 0x821F9A98;
		  /* 821F9A98h */ case   15:  		/* add R11, R10, R11 */
		/* 821F9A98h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821F9A98h case   15:*/		return 0x821F9A9C;
		  /* 821F9A9Ch */ case   16:  		/* lwz R11, <#[R11 + 28]> */
		/* 821F9A9Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821F9A9Ch case   16:*/		return 0x821F9AA0;
		  /* 821F9AA0h */ case   17:  		/* lwzx R11, <#[R11 + R28]> */
		/* 821F9AA0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821F9AA0h case   17:*/		return 0x821F9AA4;
		  /* 821F9AA4h */ case   18:  		/* rlwinm R11, R11, 5, 28, 31 */
		/* 821F9AA4h case   18:*/		cpu::op::rlwinm<0,5,28,31>(regs,&regs.R11,regs.R11);
		/* 821F9AA4h case   18:*/		return 0x821F9AA8;
		  /* 821F9AA8h */ case   19:  		/* cmplw CR6, R11, R23 */
		/* 821F9AA8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821F9AA8h case   19:*/		return 0x821F9AAC;
		  /* 821F9AACh */ case   20:  		/* bc 4, CR6_EQ, 92 */
		/* 821F9AACh case   20:*/		if ( !regs.CR[6].eq ) { return 0x821F9B08;  }
		/* 821F9AACh case   20:*/		return 0x821F9AB0;
		  /* 821F9AB0h */ case   21:  		/* cmplwi CR6, R26, 4 */
		/* 821F9AB0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 821F9AB0h case   21:*/		return 0x821F9AB4;
		  /* 821F9AB4h */ case   22:  		/* bc 12, CR6_EQ, 460 */
		/* 821F9AB4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821F9C80;  }
		/* 821F9AB4h case   22:*/		return 0x821F9AB8;
		  /* 821F9AB8h */ case   23:  		/* lwz R11, <#[R20 + 28]> */
		/* 821F9AB8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 821F9AB8h case   23:*/		return 0x821F9ABC;
		  /* 821F9ABCh */ case   24:  		/* add R4, R24, R21 */
		/* 821F9ABCh case   24:*/		cpu::op::add<0>(regs,&regs.R4,regs.R24,regs.R21);
		/* 821F9ABCh case   24:*/		return 0x821F9AC0;
		  /* 821F9AC0h */ case   25:  		/* addi R3, R1, 112 */
		/* 821F9AC0h case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821F9AC0h case   25:*/		return 0x821F9AC4;
		  /* 821F9AC4h */ case   26:  		/* lwz R30, <#[R1 + 116]> */
		/* 821F9AC4h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821F9AC4h case   26:*/		return 0x821F9AC8;
		  /* 821F9AC8h */ case   27:  		/* lwz R29, <#[R1 + 120]> */
		/* 821F9AC8h case   27:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000078) );
		/* 821F9AC8h case   27:*/		return 0x821F9ACC;
		  /* 821F9ACCh */ case   28:  		/* lwzx R11, <#[R28 + R11]> */
		/* 821F9ACCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 821F9ACCh case   28:*/		return 0x821F9AD0;
		  /* 821F9AD0h */ case   29:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 821F9AD0h case   29:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 821F9AD0h case   29:*/		return 0x821F9AD4;
		  /* 821F9AD4h */ case   30:  		/* or R27, R11, R27 */
		/* 821F9AD4h case   30:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 821F9AD4h case   30:*/		return 0x821F9AD8;
		  /* 821F9AD8h */ case   31:  		/* bl -48352 */
		/* 821F9AD8h case   31:*/		regs.LR = 0x821F9ADC; return 0x821EDDF8;
		/* 821F9AD8h case   31:*/		return 0x821F9ADC;
		  /* 821F9ADCh */ case   32:  		/* lwz R10, <#[R1 + 120]> */
		/* 821F9ADCh case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 821F9ADCh case   32:*/		return 0x821F9AE0;
		  /* 821F9AE0h */ case   33:  		/* mr R3, R31 */
		/* 821F9AE0h case   33:*/		regs.R3 = regs.R31;
		/* 821F9AE0h case   33:*/		return 0x821F9AE4;
		  /* 821F9AE4h */ case   34:  		/* lwz R11, <#[R1 + 116]> */
		/* 821F9AE4h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821F9AE4h case   34:*/		return 0x821F9AE8;
		  /* 821F9AE8h */ case   35:  		/* addi R10, R10, 2 */
		/* 821F9AE8h case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821F9AE8h case   35:*/		return 0x821F9AEC;
		  /* 821F9AECh */ case   36:  		/* stw R30, <#[R1 + 116]> */
		/* 821F9AECh case   36:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821F9AECh case   36:*/		return 0x821F9AF0;
		  /* 821F9AF0h */ case   37:  		/* stw R29, <#[R1 + 120]> */
		/* 821F9AF0h case   37:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000078) );
		/* 821F9AF0h case   37:*/		return 0x821F9AF4;
		  /* 821F9AF4h */ case   38:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821F9AF4h case   38:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821F9AF4h case   38:*/		return 0x821F9AF8;
		  /* 821F9AF8h */ case   39:  		/* add R4, R10, R11 */
		/* 821F9AF8h case   39:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 821F9AF8h case   39:*/		return 0x821F9AFC;
		  /* 821F9AFCh */ case   40:  		/* bl -30588 */
		/* 821F9AFCh case   40:*/		regs.LR = 0x821F9B00; return 0x821F2380;
		/* 821F9AFCh case   40:*/		return 0x821F9B00;
		  /* 821F9B00h */ case   41:  		/* addi R26, R26, 1 */
		/* 821F9B00h case   41:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821F9B00h case   41:*/		return 0x821F9B04;
		  /* 821F9B04h */ case   42:  		/* stwu R3, <#[R25 + 4]> */
		/* 821F9B04h case   42:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000004) );
		regs.R25 = (uint32)(regs.R25 + 0x00000004);
		/* 821F9B04h case   42:*/		return 0x821F9B08;
	}
	return 0x821F9B08;
} // Block from 821F9A5Ch-821F9B08h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821F9B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9B08);
		  /* 821F9B08h */ case    0:  		/* addi R24, R24, 1 */
		/* 821F9B08h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821F9B08h case    0:*/		return 0x821F9B0C;
		  /* 821F9B0Ch */ case    1:  		/* addi R28, R28, 8 */
		/* 821F9B0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x8);
		/* 821F9B0Ch case    1:*/		return 0x821F9B10;
		  /* 821F9B10h */ case    2:  		/* cmplw CR6, R24, R19 */
		/* 821F9B10h case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R19);
		/* 821F9B10h case    2:*/		return 0x821F9B14;
		  /* 821F9B14h */ case    3:  		/* bc 12, CR6_LT, -132 */
		/* 821F9B14h case    3:*/		if ( regs.CR[6].lt ) { return 0x821F9A90;  }
		/* 821F9B14h case    3:*/		return 0x821F9B18;
		  /* 821F9B18h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 821F9B18h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821F9B18h case    4:*/		return 0x821F9B1C;
		  /* 821F9B1Ch */ case    5:  		/* bc 12, CR6_EQ, 380 */
		/* 821F9B1Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821F9C98;  }
		/* 821F9B1Ch case    5:*/		return 0x821F9B20;
		  /* 821F9B20h */ case    6:  		/* li R11, 1 */
		/* 821F9B20h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821F9B20h case    6:*/		return 0x821F9B24;
		  /* 821F9B24h */ case    7:  		/* slw R11, R11, R26 */
		/* 821F9B24h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821F9B24h case    7:*/		return 0x821F9B28;
		  /* 821F9B28h */ case    8:  		/* addi R11, R11, -1 */
		/* 821F9B28h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F9B28h case    8:*/		return 0x821F9B2C;
		  /* 821F9B2Ch */ case    9:  		/* cmplw CR6, R27, R11 */
		/* 821F9B2Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821F9B2Ch case    9:*/		return 0x821F9B30;
		  /* 821F9B30h */ case   10:  		/* bc 4, CR6_EQ, 360 */
		/* 821F9B30h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821F9C98;  }
		/* 821F9B30h case   10:*/		return 0x821F9B34;
		  /* 821F9B34h */ case   11:  		/* lwz R11, <#[R20 + 4]> */
		/* 821F9B34h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821F9B34h case   11:*/		return 0x821F9B38;
		  /* 821F9B38h */ case   12:  		/* rlwinm. R30, R11, 2, 31, 31 */
		/* 821F9B38h case   12:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R30,regs.R11);
		/* 821F9B38h case   12:*/		return 0x821F9B3C;
		  /* 821F9B3Ch */ case   13:  		/* bc 4, CR0_EQ, 116 */
		/* 821F9B3Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821F9BB0;  }
		/* 821F9B3Ch case   13:*/		return 0x821F9B40;
	}
	return 0x821F9B40;
} // Block from 821F9B08h-821F9B40h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821F9B40h
// Function '?CommitAttributes@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UAttributeState@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@IIW4_D3DSCOPE_TYPE@2@PAPAVCNode@2@PAPAVBlock@2@PAUCommittedAttributeState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9B40);
		  /* 821F9B40h */ case    0:  		/* lwz R4, <#[R16 + 16]> */
		/* 821F9B40h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R16 + 0x00000010) );
		/* 821F9B40h case    0:*/		return 0x821F9B44;
		  /* 821F9B44h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821F9B44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821F9B44h case    1:*/		return 0x821F9B48;
		  /* 821F9B48h */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 821F9B48h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F9BB0;  }
		/* 821F9B48h case    2:*/		return 0x821F9B4C;
		  /* 821F9B4Ch */ case    3:  		/* mr R5, R31 */
		/* 821F9B4Ch case    3:*/		regs.R5 = regs.R31;
		/* 821F9B4Ch case    3:*/		return 0x821F9B50;
		  /* 821F9B50h */ case    4:  		/* addi R3, R1, 104 */
		/* 821F9B50h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F9B50h case    4:*/		return 0x821F9B54;
		  /* 821F9B54h */ case    5:  		/* bl -11740 */
		/* 821F9B54h case    5:*/		regs.LR = 0x821F9B58; return 0x821F6D78;
		/* 821F9B54h case    5:*/		return 0x821F9B58;
		  /* 821F9B58h */ case    6:  		/* b 48 */
		/* 821F9B58h case    6:*/		return 0x821F9B88;
		/* 821F9B58h case    6:*/		return 0x821F9B5C;
		  /* 821F9B5Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 821F9B5Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821F9B5Ch case    7:*/		return 0x821F9B60;
		  /* 821F9B60h */ case    8:  		/* bc 12, CR6_EQ, 300 */
		/* 821F9B60h case    8:*/		if ( regs.CR[6].eq ) { return 0x821F9C8C;  }
		/* 821F9B60h case    8:*/		return 0x821F9B64;
		  /* 821F9B64h */ case    9:  		/* lwz R11, <#[R3 + 4]> */
		/* 821F9B64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821F9B64h case    9:*/		return 0x821F9B68;
		  /* 821F9B68h */ case   10:  		/* cmpwi CR6, R11, 19 */
		/* 821F9B68h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 821F9B68h case   10:*/		return 0x821F9B6C;
		  /* 821F9B6Ch */ case   11:  		/* bc 4, CR6_EQ, 288 */
		/* 821F9B6Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821F9C8C;  }
		/* 821F9B6Ch case   11:*/		return 0x821F9B70;
		  /* 821F9B70h */ case   12:  		/* mr R4, R3 */
		/* 821F9B70h case   12:*/		regs.R4 = regs.R3;
		/* 821F9B70h case   12:*/		return 0x821F9B74;
		  /* 821F9B74h */ case   13:  		/* mr R3, R31 */
		/* 821F9B74h case   13:*/		regs.R3 = regs.R31;
		/* 821F9B74h case   13:*/		return 0x821F9B78;
		  /* 821F9B78h */ case   14:  		/* bl -53224 */
		/* 821F9B78h case   14:*/		regs.LR = 0x821F9B7C; return 0x821ECB90;
		/* 821F9B78h case   14:*/		return 0x821F9B7C;
		  /* 821F9B7Ch */ case   15:  		/* cmpwi CR6, R3, 2 */
		/* 821F9B7Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 821F9B7Ch case   15:*/		return 0x821F9B80;
		  /* 821F9B80h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 821F9B80h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821F9B88;  }
		/* 821F9B80h case   16:*/		return 0x821F9B84;
		  /* 821F9B84h */ case   17:  		/* li R30, 1 */
		/* 821F9B84h case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821F9B84h case   17:*/		return 0x821F9B88;
	}
	return 0x821F9B88;
} // Block from 821F9B40h-821F9B88h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F9B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9B88);
		  /* 821F9B88h */ case    0:  		/* addi R3, R1, 104 */
		/* 821F9B88h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821F9B88h case    0:*/		return 0x821F9B8C;
		  /* 821F9B8Ch */ case    1:  		/* bl -11604 */
		/* 821F9B8Ch case    1:*/		regs.LR = 0x821F9B90; return 0x821F6E38;
		/* 821F9B8Ch case    1:*/		return 0x821F9B90;
		  /* 821F9B90h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821F9B90h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821F9B90h case    2:*/		return 0x821F9B94;
		  /* 821F9B94h */ case    3:  		/* bc 4, CR0_EQ, -56 */
		/* 821F9B94h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821F9B5C;  }
		/* 821F9B94h case    3:*/		return 0x821F9B98;
		  /* 821F9B98h */ case    4:  		/* lwz R11, <#[R1 + 104]> */
		/* 821F9B98h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 821F9B98h case    4:*/		return 0x821F9B9C;
		  /* 821F9B9Ch */ case    5:  		/* lwz R9, <#[R1 + 108]> */
		/* 821F9B9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 821F9B9Ch case    5:*/		return 0x821F9BA0;
		  /* 821F9BA0h */ case    6:  		/* addi R10, R11, 972 */
		/* 821F9BA0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3CC);
		/* 821F9BA0h case    6:*/		return 0x821F9BA4;
		  /* 821F9BA4h */ case    7:  		/* lwz R10, <#[R11 + 976]> */
		/* 821F9BA4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F9BA4h case    7:*/		return 0x821F9BA8;
		  /* 821F9BA8h */ case    8:  		/* stw R10, <#[R9]> */
		/* 821F9BA8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821F9BA8h case    8:*/		return 0x821F9BAC;
		  /* 821F9BACh */ case    9:  		/* stw R9, <#[R11 + 976]> */
		/* 821F9BACh case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x000003D0) );
		/* 821F9BACh case    9:*/		return 0x821F9BB0;
	}
	return 0x821F9BB0;
} // Block from 821F9B88h-821F9BB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821F9BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9BB0);
		  /* 821F9BB0h */ case    0:  		/* mr R7, R30 */
		/* 821F9BB0h case    0:*/		regs.R7 = regs.R30;
		/* 821F9BB0h case    0:*/		return 0x821F9BB4;
		  /* 821F9BB4h */ case    1:  		/* mr R6, R26 */
		/* 821F9BB4h case    1:*/		regs.R6 = regs.R26;
		/* 821F9BB4h case    1:*/		return 0x821F9BB8;
		  /* 821F9BB8h */ case    2:  		/* mr R5, R23 */
		/* 821F9BB8h case    2:*/		regs.R5 = regs.R23;
		/* 821F9BB8h case    2:*/		return 0x821F9BBC;
		  /* 821F9BBCh */ case    3:  		/* mr R4, R14 */
		/* 821F9BBCh case    3:*/		regs.R4 = regs.R14;
		/* 821F9BBCh case    3:*/		return 0x821F9BC0;
		  /* 821F9BC0h */ case    4:  		/* mr R3, R31 */
		/* 821F9BC0h case    4:*/		regs.R3 = regs.R31;
		/* 821F9BC0h case    4:*/		return 0x821F9BC4;
		  /* 821F9BC4h */ case    5:  		/* bl -31740 */
		/* 821F9BC4h case    5:*/		regs.LR = 0x821F9BC8; return 0x821F1FC8;
		/* 821F9BC4h case    5:*/		return 0x821F9BC8;
		  /* 821F9BC8h */ case    6:  		/* lwz R4, <#[R1 + 128]> */
		/* 821F9BC8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 821F9BC8h case    6:*/		return 0x821F9BCC;
		  /* 821F9BCCh */ case    7:  		/* mr R30, R3 */
		/* 821F9BCCh case    7:*/		regs.R30 = regs.R3;
		/* 821F9BCCh case    7:*/		return 0x821F9BD0;
		  /* 821F9BD0h */ case    8:  		/* cmplwi CR6, R26, 1 */
		/* 821F9BD0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821F9BD0h case    8:*/		return 0x821F9BD4;
		  /* 821F9BD4h */ case    9:  		/* bc 4, CR6_GT, 44 */
		/* 821F9BD4h case    9:*/		if ( !regs.CR[6].gt ) { return 0x821F9C00;  }
		/* 821F9BD4h case    9:*/		return 0x821F9BD8;
		  /* 821F9BD8h */ case   10:  		/* li R9, 0 */
		/* 821F9BD8h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821F9BD8h case   10:*/		return 0x821F9BDC;
		  /* 821F9BDCh */ case   11:  		/* lwz R10, <#[R1 + 140]> */
		/* 821F9BDCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 821F9BDCh case   11:*/		return 0x821F9BE0;
		  /* 821F9BE0h */ case   12:  		/* li R7, 0 */
		/* 821F9BE0h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F9BE0h case   12:*/		return 0x821F9BE4;
		  /* 821F9BE4h */ case   13:  		/* lwz R8, <#[R1 + 136]> */
		/* 821F9BE4h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000088) );
		/* 821F9BE4h case   13:*/		return 0x821F9BE8;
		  /* 821F9BE8h */ case   14:  		/* li R5, 0 */
		/* 821F9BE8h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F9BE8h case   14:*/		return 0x821F9BEC;
		  /* 821F9BECh */ case   15:  		/* lwz R6, <#[R1 + 132]> */
		/* 821F9BECh case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000084) );
		/* 821F9BECh case   15:*/		return 0x821F9BF0;
		  /* 821F9BF0h */ case   16:  		/* mr R3, R31 */
		/* 821F9BF0h case   16:*/		regs.R3 = regs.R31;
		/* 821F9BF0h case   16:*/		return 0x821F9BF4;
		  /* 821F9BF4h */ case   17:  		/* stw R18, <#[R1 + 84]> */
		/* 821F9BF4h case   17:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000054) );
		/* 821F9BF4h case   17:*/		return 0x821F9BF8;
		  /* 821F9BF8h */ case   18:  		/* bl -49216 */
		/* 821F9BF8h case   18:*/		regs.LR = 0x821F9BFC; return 0x821EDBB8;
		/* 821F9BF8h case   18:*/		return 0x821F9BFC;
		  /* 821F9BFCh */ case   19:  		/* mr R4, R3 */
		/* 821F9BFCh case   19:*/		regs.R4 = regs.R3;
		/* 821F9BFCh case   19:*/		return 0x821F9C00;
	}
	return 0x821F9C00;
} // Block from 821F9BB0h-821F9C00h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C00);
		  /* 821F9C00h */ case    0:  		/* li R7, 1 */
		/* 821F9C00h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821F9C00h case    0:*/		return 0x821F9C04;
		  /* 821F9C04h */ case    1:  		/* lwz R6, <#[R1 + 356]> */
		/* 821F9C04h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000164) );
		/* 821F9C04h case    1:*/		return 0x821F9C08;
		  /* 821F9C08h */ case    2:  		/* mr R5, R30 */
		/* 821F9C08h case    2:*/		regs.R5 = regs.R30;
		/* 821F9C08h case    2:*/		return 0x821F9C0C;
		  /* 821F9C0Ch */ case    3:  		/* mr R3, R31 */
		/* 821F9C0Ch case    3:*/		regs.R3 = regs.R31;
		/* 821F9C0Ch case    3:*/		return 0x821F9C10;
		  /* 821F9C10h */ case    4:  		/* bl 183440 */
		/* 821F9C10h case    4:*/		regs.LR = 0x821F9C14; return 0x822268A0;
		/* 821F9C10h case    4:*/		return 0x821F9C14;
		  /* 821F9C14h */ case    5:  		/* lwz R27, <#[R1 + 96]> */
		/* 821F9C14h case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 821F9C14h case    5:*/		return 0x821F9C18;
		  /* 821F9C18h */ case    6:  		/* lwz R28, <#[R1 + 332]> */
		/* 821F9C18h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000014C) );
		/* 821F9C18h case    6:*/		return 0x821F9C1C;
	}
	return 0x821F9C1C;
} // Block from 821F9C00h-821F9C1Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C1C);
		  /* 821F9C1Ch */ case    0:  		/* addi R22, R22, 1 */
		/* 821F9C1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821F9C1Ch case    0:*/		return 0x821F9C20;
		  /* 821F9C20h */ case    1:  		/* addi R17, R17, 8 */
		/* 821F9C20h case    1:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x8);
		/* 821F9C20h case    1:*/		return 0x821F9C24;
		  /* 821F9C24h */ case    2:  		/* cmplw CR6, R22, R19 */
		/* 821F9C24h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R19);
		/* 821F9C24h case    2:*/		return 0x821F9C28;
		  /* 821F9C28h */ case    3:  		/* bc 12, CR6_LT, -544 */
		/* 821F9C28h case    3:*/		if ( regs.CR[6].lt ) { return 0x821F9A08;  }
		/* 821F9C28h case    3:*/		return 0x821F9C2C;
	}
	return 0x821F9C2C;
} // Block from 821F9C1Ch-821F9C2Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C2C);
		  /* 821F9C2Ch */ case    0:  		/* lwz R11, <#[R1 + 100]> */
		/* 821F9C2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821F9C2Ch case    0:*/		return 0x821F9C30;
		  /* 821F9C30h */ case    1:  		/* add R21, R19, R21 */
		/* 821F9C30h case    1:*/		cpu::op::add<0>(regs,&regs.R21,regs.R19,regs.R21);
		/* 821F9C30h case    1:*/		return 0x821F9C34;
		  /* 821F9C34h */ case    2:  		/* stw R18, <#[R16 + 4]> */
		/* 821F9C34h case    2:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R16 + 0x00000004) );
		/* 821F9C34h case    2:*/		return 0x821F9C38;
		  /* 821F9C38h */ case    3:  		/* subf. R11, R19, R11 */
		/* 821F9C38h case    3:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R19,regs.R11);
		/* 821F9C38h case    3:*/		return 0x821F9C3C;
		  /* 821F9C3Ch */ case    4:  		/* stw R11, <#[R1 + 100]> */
		/* 821F9C3Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821F9C3Ch case    4:*/		return 0x821F9C40;
		  /* 821F9C40h */ case    5:  		/* bc 4, CR0_EQ, -632 */
		/* 821F9C40h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821F99C8;  }
		/* 821F9C40h case    5:*/		return 0x821F9C44;
	}
	return 0x821F9C44;
} // Block from 821F9C2Ch-821F9C44h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C44);
		  /* 821F9C44h */ case    0:  		/* mr R3, R28 */
		/* 821F9C44h case    0:*/		regs.R3 = regs.R28;
		/* 821F9C44h case    0:*/		return 0x821F9C48;
		  /* 821F9C48h */ case    1:  		/* bl -33656 */
		/* 821F9C48h case    1:*/		regs.LR = 0x821F9C4C; return 0x821F18D0;
		/* 821F9C48h case    1:*/		return 0x821F9C4C;
		  /* 821F9C4Ch */ case    2:  		/* addi R11, R31, 972 */
		/* 821F9C4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3CC);
		/* 821F9C4Ch case    2:*/		return 0x821F9C50;
		  /* 821F9C50h */ case    3:  		/* lwz R11, <#[R31 + 1008]> */
		/* 821F9C50h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000003F0) );
		/* 821F9C50h case    3:*/		return 0x821F9C54;
		  /* 821F9C54h */ case    4:  		/* stw R11, <#[R16]> */
		/* 821F9C54h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821F9C54h case    4:*/		return 0x821F9C58;
		  /* 821F9C58h */ case    5:  		/* stw R16, <#[R31 + 1008]> */
		/* 821F9C58h case    5:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x000003F0) );
		/* 821F9C58h case    5:*/		return 0x821F9C5C;
	}
	return 0x821F9C5C;
} // Block from 821F9C44h-821F9C5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C5C);
		  /* 821F9C5Ch */ case    0:  		/* addi R1, R1, 304 */
		/* 821F9C5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 821F9C5Ch case    0:*/		return 0x821F9C60;
		  /* 821F9C60h */ case    1:  		/* b -1477104 */
		/* 821F9C60h case    1:*/		return 0x82091270;
		/* 821F9C60h case    1:*/		return 0x821F9C64;
	}
	return 0x821F9C64;
} // Block from 821F9C5Ch-821F9C64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C64);
		  /* 821F9C64h */ case    0:  		/* mr R4, R14 */
		/* 821F9C64h case    0:*/		regs.R4 = regs.R14;
		/* 821F9C64h case    0:*/		return 0x821F9C68;
		  /* 821F9C68h */ case    1:  		/* mr R3, R31 */
		/* 821F9C68h case    1:*/		regs.R3 = regs.R31;
		/* 821F9C68h case    1:*/		return 0x821F9C6C;
		  /* 821F9C6Ch */ case    2:  		/* bl -56404 */
		/* 821F9C6Ch case    2:*/		regs.LR = 0x821F9C70; return 0x821EC018;
		/* 821F9C6Ch case    2:*/		return 0x821F9C70;
		  /* 821F9C70h */ case    3:  		/* lwz R5, <#[R3 + 24]> */
		/* 821F9C70h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000018) );
		/* 821F9C70h case    3:*/		return 0x821F9C74;
		  /* 821F9C74h */ case    4:  		/* li R4, 4503 */
		/* 821F9C74h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1197);
		/* 821F9C74h case    4:*/		return 0x821F9C78;
		  /* 821F9C78h */ case    5:  		/* mr R3, R31 */
		/* 821F9C78h case    5:*/		regs.R3 = regs.R31;
		/* 821F9C78h case    5:*/		return 0x821F9C7C;
		  /* 821F9C7Ch */ case    6:  		/* bl -687636 */
		/* 821F9C7Ch case    6:*/		regs.LR = 0x821F9C80; return 0x82151E68;
		/* 821F9C7Ch case    6:*/		return 0x821F9C80;
	}
	return 0x821F9C80;
} // Block from 821F9C64h-821F9C80h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C80);
		  /* 821F9C80h */ case    0:  		/* li R4, 4800 */
		/* 821F9C80h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821F9C80h case    0:*/		return 0x821F9C84;
		  /* 821F9C84h */ case    1:  		/* mr R3, R31 */
		/* 821F9C84h case    1:*/		regs.R3 = regs.R31;
		/* 821F9C84h case    1:*/		return 0x821F9C88;
		  /* 821F9C88h */ case    2:  		/* bl -687648 */
		/* 821F9C88h case    2:*/		regs.LR = 0x821F9C8C; return 0x82151E68;
		/* 821F9C88h case    2:*/		return 0x821F9C8C;
	}
	return 0x821F9C8C;
} // Block from 821F9C80h-821F9C8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C8C);
		  /* 821F9C8Ch */ case    0:  		/* li R4, 4801 */
		/* 821F9C8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9C8Ch case    0:*/		return 0x821F9C90;
		  /* 821F9C90h */ case    1:  		/* mr R3, R31 */
		/* 821F9C90h case    1:*/		regs.R3 = regs.R31;
		/* 821F9C90h case    1:*/		return 0x821F9C94;
		  /* 821F9C94h */ case    2:  		/* bl -687660 */
		/* 821F9C94h case    2:*/		regs.LR = 0x821F9C98; return 0x82151E68;
		/* 821F9C94h case    2:*/		return 0x821F9C98;
	}
	return 0x821F9C98;
} // Block from 821F9C8Ch-821F9C98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9C98);
		  /* 821F9C98h */ case    0:  		/* li R4, 4800 */
		/* 821F9C98h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821F9C98h case    0:*/		return 0x821F9C9C;
		  /* 821F9C9Ch */ case    1:  		/* mr R3, R31 */
		/* 821F9C9Ch case    1:*/		regs.R3 = regs.R31;
		/* 821F9C9Ch case    1:*/		return 0x821F9CA0;
		  /* 821F9CA0h */ case    2:  		/* bl -687672 */
		/* 821F9CA0h case    2:*/		regs.LR = 0x821F9CA4; return 0x82151E68;
		/* 821F9CA0h case    2:*/		return 0x821F9CA4;
	}
	return 0x821F9CA4;
} // Block from 821F9C98h-821F9CA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9CA4);
		  /* 821F9CA4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821F9CA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F9CA4h case    0:*/		return 0x821F9CA8;
		  /* 821F9CA8h */ case    1:  		/* add R11, R27, R11 */
		/* 821F9CA8h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 821F9CA8h case    1:*/		return 0x821F9CAC;
		  /* 821F9CACh */ case    2:  		/* lwz R11, <#[R11 + 12]> */
		/* 821F9CACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821F9CACh case    2:*/		return 0x821F9CB0;
		  /* 821F9CB0h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 821F9CB0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821F9CB0h case    3:*/		return 0x821F9CB4;
		  /* 821F9CB4h */ case    4:  		/* cmpwi CR6, R11, 2 */
		/* 821F9CB4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821F9CB4h case    4:*/		return 0x821F9CB8;
		  /* 821F9CB8h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 821F9CB8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F9CC8;  }
		/* 821F9CB8h case    5:*/		return 0x821F9CBC;
		  /* 821F9CBCh */ case    6:  		/* lis R11, -32252 */
		/* 821F9CBCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821F9CBCh case    6:*/		return 0x821F9CC0;
		  /* 821F9CC0h */ case    7:  		/* addi R28, R11, -13516 */
		/* 821F9CC0h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFCB34);
		/* 821F9CC0h case    7:*/		return 0x821F9CC4;
		  /* 821F9CC4h */ case    8:  		/* b 112 */
		/* 821F9CC4h case    8:*/		return 0x821F9D34;
		/* 821F9CC4h case    8:*/		return 0x821F9CC8;
	}
	return 0x821F9CC8;
} // Block from 821F9CA4h-821F9CC8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821F9CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9CC8);
		  /* 821F9CC8h */ case    0:  		/* lis R11, -32252 */
		/* 821F9CC8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821F9CC8h case    0:*/		return 0x821F9CCC;
		  /* 821F9CCCh */ case    1:  		/* addi R3, R1, 128 */
		/* 821F9CCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821F9CCCh case    1:*/		return 0x821F9CD0;
		  /* 821F9CD0h */ case    2:  		/* addi R4, R11, -13540 */
		/* 821F9CD0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFCB1C);
		/* 821F9CD0h case    2:*/		return 0x821F9CD4;
		  /* 821F9CD4h */ case    3:  		/* li R5, 22 */
		/* 821F9CD4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 821F9CD4h case    3:*/		return 0x821F9CD8;
		  /* 821F9CD8h */ case    4:  		/* bl -1475368 */
		/* 821F9CD8h case    4:*/		regs.LR = 0x821F9CDC; return 0x820919B0;
		/* 821F9CD8h case    4:*/		return 0x821F9CDC;
		  /* 821F9CDCh */ case    5:  		/* mr R4, R15 */
		/* 821F9CDCh case    5:*/		regs.R4 = regs.R15;
		/* 821F9CDCh case    5:*/		return 0x821F9CE0;
		  /* 821F9CE0h */ case    6:  		/* mr R3, R31 */
		/* 821F9CE0h case    6:*/		regs.R3 = regs.R31;
		/* 821F9CE0h case    6:*/		return 0x821F9CE4;
		  /* 821F9CE4h */ case    7:  		/* bl -53924 */
		/* 821F9CE4h case    7:*/		regs.LR = 0x821F9CE8; return 0x821ECA40;
		/* 821F9CE4h case    7:*/		return 0x821F9CE8;
		  /* 821F9CE8h */ case    8:  		/* mr R29, R3 */
		/* 821F9CE8h case    8:*/		regs.R29 = regs.R3;
		/* 821F9CE8h case    8:*/		return 0x821F9CEC;
		  /* 821F9CECh */ case    9:  		/* mr R11, R3 */
		/* 821F9CECh case    9:*/		regs.R11 = regs.R3;
		/* 821F9CECh case    9:*/		return 0x821F9CF0;
		  /* 821F9CF0h */ case   10:  		/* lbz R10, <#[R11]> */
		/* 821F9CF0h case   10:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821F9CF0h case   10:*/		return 0x821F9CF4;
		  /* 821F9CF4h */ case   11:  		/* addi R11, R11, 1 */
		/* 821F9CF4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821F9CF4h case   11:*/		return 0x821F9CF8;
		  /* 821F9CF8h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 821F9CF8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F9CF8h case   12:*/		return 0x821F9CFC;
		  /* 821F9CFCh */ case   13:  		/* bc 4, CR6_EQ, -12 */
		/* 821F9CFCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821F9CF0;  }
		/* 821F9CFCh case   13:*/		return 0x821F9D00;
		  /* 821F9D00h */ case   14:  		/* subf R11, R29, R11 */
		/* 821F9D00h case   14:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821F9D00h case   14:*/		return 0x821F9D04;
		  /* 821F9D04h */ case   15:  		/* li R5, 0 */
		/* 821F9D04h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F9D04h case   15:*/		return 0x821F9D08;
		  /* 821F9D08h */ case   16:  		/* addi R11, R11, -1 */
		/* 821F9D08h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821F9D08h case   16:*/		return 0x821F9D0C;
		  /* 821F9D0Ch */ case   17:  		/* mr R3, R31 */
		/* 821F9D0Ch case   17:*/		regs.R3 = regs.R31;
		/* 821F9D0Ch case   17:*/		return 0x821F9D10;
		  /* 821F9D10h */ case   18:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821F9D10h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821F9D10h case   18:*/		return 0x821F9D14;
		  /* 821F9D14h */ case   19:  		/* addi R30, R11, 22 */
		/* 821F9D14h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x16);
		/* 821F9D14h case   19:*/		return 0x821F9D18;
		  /* 821F9D18h */ case   20:  		/* mr R4, R30 */
		/* 821F9D18h case   20:*/		regs.R4 = regs.R30;
		/* 821F9D18h case   20:*/		return 0x821F9D1C;
		  /* 821F9D1Ch */ case   21:  		/* bl -609340 */
		/* 821F9D1Ch case   21:*/		regs.LR = 0x821F9D20; return 0x821650E0;
		/* 821F9D1Ch case   21:*/		return 0x821F9D20;
		  /* 821F9D20h */ case   22:  		/* mr R6, R29 */
		/* 821F9D20h case   22:*/		regs.R6 = regs.R29;
		/* 821F9D20h case   22:*/		return 0x821F9D24;
		  /* 821F9D24h */ case   23:  		/* addi R5, R1, 128 */
		/* 821F9D24h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 821F9D24h case   23:*/		return 0x821F9D28;
		  /* 821F9D28h */ case   24:  		/* mr R4, R30 */
		/* 821F9D28h case   24:*/		regs.R4 = regs.R30;
		/* 821F9D28h case   24:*/		return 0x821F9D2C;
		  /* 821F9D2Ch */ case   25:  		/* mr R28, R3 */
		/* 821F9D2Ch case   25:*/		regs.R28 = regs.R3;
		/* 821F9D2Ch case   25:*/		return 0x821F9D30;
		  /* 821F9D30h */ case   26:  		/* bl 454776 */
		/* 821F9D30h case   26:*/		regs.LR = 0x821F9D34; return 0x82268DA8;
		/* 821F9D30h case   26:*/		return 0x821F9D34;
	}
	return 0x821F9D34;
} // Block from 821F9CC8h-821F9D34h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821F9D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9D34);
		  /* 821F9D34h */ case    0:  		/* mr R3, R31 */
		/* 821F9D34h case    0:*/		regs.R3 = regs.R31;
		/* 821F9D34h case    0:*/		return 0x821F9D38;
		  /* 821F9D38h */ case    1:  		/* bl -57792 */
		/* 821F9D38h case    1:*/		regs.LR = 0x821F9D3C; return 0x821EBB78;
		/* 821F9D38h case    1:*/		return 0x821F9D3C;
		  /* 821F9D3Ch */ case    2:  		/* mr R5, R3 */
		/* 821F9D3Ch case    2:*/		regs.R5 = regs.R3;
		/* 821F9D3Ch case    2:*/		return 0x821F9D40;
		  /* 821F9D40h */ case    3:  		/* li R4, 3503 */
		/* 821F9D40h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDAF);
		/* 821F9D40h case    3:*/		return 0x821F9D44;
		  /* 821F9D44h */ case    4:  		/* mr R3, R31 */
		/* 821F9D44h case    4:*/		regs.R3 = regs.R31;
		/* 821F9D44h case    4:*/		return 0x821F9D48;
		  /* 821F9D48h */ case    5:  		/* mr R6, R28 */
		/* 821F9D48h case    5:*/		regs.R6 = regs.R28;
		/* 821F9D48h case    5:*/		return 0x821F9D4C;
		  /* 821F9D4Ch */ case    6:  		/* bl -687844 */
		/* 821F9D4Ch case    6:*/		regs.LR = 0x821F9D50; return 0x82151E68;
		/* 821F9D4Ch case    6:*/		return 0x821F9D50;
	}
	return 0x821F9D50;
} // Block from 821F9D34h-821F9D50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F9D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9D50);
		  /* 821F9D50h */ case    0:  		/* mfspr R12, LR */
		/* 821F9D50h case    0:*/		regs.R12 = regs.LR;
		/* 821F9D50h case    0:*/		return 0x821F9D54;
		  /* 821F9D54h */ case    1:  		/* bl -1477372 */
		/* 821F9D54h case    1:*/		regs.LR = 0x821F9D58; return 0x82091258;
		/* 821F9D54h case    1:*/		return 0x821F9D58;
		  /* 821F9D58h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821F9D58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821F9D58h case    2:*/		return 0x821F9D5C;
		  /* 821F9D5Ch */ case    3:  		/* lwz R11, <#[R4 + 44]> */
		/* 821F9D5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 821F9D5Ch case    3:*/		return 0x821F9D60;
		  /* 821F9D60h */ case    4:  		/* mr R30, R3 */
		/* 821F9D60h case    4:*/		regs.R30 = regs.R3;
		/* 821F9D60h case    4:*/		return 0x821F9D64;
		  /* 821F9D64h */ case    5:  		/* mr R29, R5 */
		/* 821F9D64h case    5:*/		regs.R29 = regs.R5;
		/* 821F9D64h case    5:*/		return 0x821F9D68;
		  /* 821F9D68h */ case    6:  		/* mr R28, R6 */
		/* 821F9D68h case    6:*/		regs.R28 = regs.R6;
		/* 821F9D68h case    6:*/		return 0x821F9D6C;
		  /* 821F9D6Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821F9D6Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9D6Ch case    7:*/		return 0x821F9D70;
		  /* 821F9D70h */ case    8:  		/* bc 12, CR6_EQ, 136 */
		/* 821F9D70h case    8:*/		if ( regs.CR[6].eq ) { return 0x821F9DF8;  }
		/* 821F9D70h case    8:*/		return 0x821F9D74;
		  /* 821F9D74h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9D74h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9D74h case    9:*/		return 0x821F9D78;
		  /* 821F9D78h */ case   10:  		/* cmpwi CR6, R10, 1 */
		/* 821F9D78h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F9D78h case   10:*/		return 0x821F9D7C;
		  /* 821F9D7Ch */ case   11:  		/* bc 12, CR6_EQ, 124 */
		/* 821F9D7Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821F9DF8;  }
		/* 821F9D7Ch case   11:*/		return 0x821F9D80;
		  /* 821F9D80h */ case   12:  		/* li R4, 4801 */
		/* 821F9D80h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9D80h case   12:*/		return 0x821F9D84;
		  /* 821F9D84h */ case   13:  		/* bl -687900 */
		/* 821F9D84h case   13:*/		regs.LR = 0x821F9D88; return 0x82151E68;
		/* 821F9D84h case   13:*/		return 0x821F9D88;
		  /* 821F9D88h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 821F9D88h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821F9D88h case   14:*/		return 0x821F9D8C;
		  /* 821F9D8Ch */ case   15:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9D8Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9D8Ch case   15:*/		return 0x821F9D90;
		  /* 821F9D90h */ case   16:  		/* cmpwi CR6, R10, 6 */
		/* 821F9D90h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000006);
		/* 821F9D90h case   16:*/		return 0x821F9D94;
		  /* 821F9D94h */ case   17:  		/* bc 4, CR6_EQ, 76 */
		/* 821F9D94h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821F9DE0;  }
		/* 821F9D94h case   17:*/		return 0x821F9D98;
		  /* 821F9D98h */ case   18:  		/* lwz R11, <#[R11 + 24]> */
		/* 821F9D98h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821F9D98h case   18:*/		return 0x821F9D9C;
		  /* 821F9D9Ch */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821F9D9Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9D9Ch case   19:*/		return 0x821F9DA0;
		  /* 821F9DA0h */ case   20:  		/* bc 12, CR6_EQ, 108 */
		/* 821F9DA0h case   20:*/		if ( regs.CR[6].eq ) { return 0x821F9E0C;  }
		/* 821F9DA0h case   20:*/		return 0x821F9DA4;
		  /* 821F9DA4h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9DA4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9DA4h case   21:*/		return 0x821F9DA8;
		  /* 821F9DA8h */ case   22:  		/* cmpwi CR6, R10, 11 */
		/* 821F9DA8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 821F9DA8h case   22:*/		return 0x821F9DAC;
		  /* 821F9DACh */ case   23:  		/* bc 4, CR6_EQ, 96 */
		/* 821F9DACh case   23:*/		if ( !regs.CR[6].eq ) { return 0x821F9E0C;  }
		/* 821F9DACh case   23:*/		return 0x821F9DB0;
		  /* 821F9DB0h */ case   24:  		/* lwz R10, <#[R11 + 20]> */
		/* 821F9DB0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821F9DB0h case   24:*/		return 0x821F9DB4;
		  /* 821F9DB4h */ case   25:  		/* cmplwi CR6, R10, 0 */
		/* 821F9DB4h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821F9DB4h case   25:*/		return 0x821F9DB8;
		  /* 821F9DB8h */ case   26:  		/* bc 12, CR6_EQ, 40 */
		/* 821F9DB8h case   26:*/		if ( regs.CR[6].eq ) { return 0x821F9DE0;  }
		/* 821F9DB8h case   26:*/		return 0x821F9DBC;
		  /* 821F9DBCh */ case   27:  		/* lwz R10, <#[R11 + 44]> */
		/* 821F9DBCh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821F9DBCh case   27:*/		return 0x821F9DC0;
		  /* 821F9DC0h */ case   28:  		/* rlwinm. R10, R10, 0, 26, 26 */
		/* 821F9DC0h case   28:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R10);
		/* 821F9DC0h case   28:*/		return 0x821F9DC4;
		  /* 821F9DC4h */ case   29:  		/* bc 12, CR0_EQ, 28 */
		/* 821F9DC4h case   29:*/		if ( regs.CR[0].eq ) { return 0x821F9DE0;  }
		/* 821F9DC4h case   29:*/		return 0x821F9DC8;
		  /* 821F9DC8h */ case   30:  		/* mr R7, R28 */
		/* 821F9DC8h case   30:*/		regs.R7 = regs.R28;
		/* 821F9DC8h case   30:*/		return 0x821F9DCC;
		  /* 821F9DCCh */ case   31:  		/* lwz R6, <#[R11 + 60]> */
		/* 821F9DCCh case   31:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000003C) );
		/* 821F9DCCh case   31:*/		return 0x821F9DD0;
		  /* 821F9DD0h */ case   32:  		/* mr R4, R29 */
		/* 821F9DD0h case   32:*/		regs.R4 = regs.R29;
		/* 821F9DD0h case   32:*/		return 0x821F9DD4;
		  /* 821F9DD4h */ case   33:  		/* lwz R5, <#[R11 + 16]> */
		/* 821F9DD4h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 821F9DD4h case   33:*/		return 0x821F9DD8;
		  /* 821F9DD8h */ case   34:  		/* mr R3, R30 */
		/* 821F9DD8h case   34:*/		regs.R3 = regs.R30;
		/* 821F9DD8h case   34:*/		return 0x821F9DDC;
		  /* 821F9DDCh */ case   35:  		/* bl -1244 */
		/* 821F9DDCh case   35:*/		regs.LR = 0x821F9DE0; return 0x821F9900;
		/* 821F9DDCh case   35:*/		return 0x821F9DE0;
	}
	return 0x821F9DE0;
} // Block from 821F9D50h-821F9DE0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821F9DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9DE0);
		  /* 821F9DE0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821F9DE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821F9DE0h case    0:*/		return 0x821F9DE4;
		  /* 821F9DE4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821F9DE4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9DE4h case    1:*/		return 0x821F9DE8;
		  /* 821F9DE8h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821F9DE8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821F9DF8;  }
		/* 821F9DE8h case    2:*/		return 0x821F9DEC;
		  /* 821F9DECh */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821F9DECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821F9DECh case    3:*/		return 0x821F9DF0;
		  /* 821F9DF0h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821F9DF0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821F9DF0h case    4:*/		return 0x821F9DF4;
		  /* 821F9DF4h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 821F9DF4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821F9E18;  }
		/* 821F9DF4h case    5:*/		return 0x821F9DF8;
	}
	return 0x821F9DF8;
} // Block from 821F9DE0h-821F9DF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821F9DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9DF8);
		  /* 821F9DF8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821F9DF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9DF8h case    0:*/		return 0x821F9DFC;
		  /* 821F9DFCh */ case    1:  		/* mr R31, R11 */
		/* 821F9DFCh case    1:*/		regs.R31 = regs.R11;
		/* 821F9DFCh case    1:*/		return 0x821F9E00;
		  /* 821F9E00h */ case    2:  		/* bc 4, CR6_EQ, -120 */
		/* 821F9E00h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821F9D88;  }
		/* 821F9E00h case    2:*/		return 0x821F9E04;
		  /* 821F9E04h */ case    3:  		/* addi R1, R1, 128 */
		/* 821F9E04h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821F9E04h case    3:*/		return 0x821F9E08;
		  /* 821F9E08h */ case    4:  		/* b -1477472 */
		/* 821F9E08h case    4:*/		return 0x820912A8;
		/* 821F9E08h case    4:*/		return 0x821F9E0C;
	}
	return 0x821F9E0C;
} // Block from 821F9DF8h-821F9E0Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F9E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9E0C);
		  /* 821F9E0Ch */ case    0:  		/* li R4, 4801 */
		/* 821F9E0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9E0Ch case    0:*/		return 0x821F9E10;
		  /* 821F9E10h */ case    1:  		/* mr R3, R30 */
		/* 821F9E10h case    1:*/		regs.R3 = regs.R30;
		/* 821F9E10h case    1:*/		return 0x821F9E14;
		  /* 821F9E14h */ case    2:  		/* bl -688044 */
		/* 821F9E14h case    2:*/		regs.LR = 0x821F9E18; return 0x82151E68;
		/* 821F9E14h case    2:*/		return 0x821F9E18;
	}
	return 0x821F9E18;
} // Block from 821F9E0Ch-821F9E18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821F9E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9E18);
		  /* 821F9E18h */ case    0:  		/* li R4, 4801 */
		/* 821F9E18h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821F9E18h case    0:*/		return 0x821F9E1C;
		  /* 821F9E1Ch */ case    1:  		/* mr R3, R30 */
		/* 821F9E1Ch case    1:*/		regs.R3 = regs.R30;
		/* 821F9E1Ch case    1:*/		return 0x821F9E20;
		  /* 821F9E20h */ case    2:  		/* bl -688056 */
		/* 821F9E20h case    2:*/		regs.LR = 0x821F9E24; return 0x82151E68;
		/* 821F9E20h case    2:*/		return 0x821F9E24;
		  /* 821F9E24h */ case    3:  		/* nop */
		/* 821F9E24h case    3:*/		cpu::op::nop();
		/* 821F9E24h case    3:*/		return 0x821F9E28;
	}
	return 0x821F9E28;
} // Block from 821F9E18h-821F9E28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821F9E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9E28);
		  /* 821F9E28h */ case    0:  		/* mfspr R12, LR */
		/* 821F9E28h case    0:*/		regs.R12 = regs.LR;
		/* 821F9E28h case    0:*/		return 0x821F9E2C;
		  /* 821F9E2Ch */ case    1:  		/* bl -1477588 */
		/* 821F9E2Ch case    1:*/		regs.LR = 0x821F9E30; return 0x82091258;
		/* 821F9E2Ch case    1:*/		return 0x821F9E30;
		  /* 821F9E30h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821F9E30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821F9E30h case    2:*/		return 0x821F9E34;
		  /* 821F9E34h */ case    3:  		/* lwz R11, <#[R3 + 564]> */
		/* 821F9E34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000234) );
		/* 821F9E34h case    3:*/		return 0x821F9E38;
		  /* 821F9E38h */ case    4:  		/* mr R31, R3 */
		/* 821F9E38h case    4:*/		regs.R31 = regs.R3;
		/* 821F9E38h case    4:*/		return 0x821F9E3C;
		  /* 821F9E3Ch */ case    5:  		/* mr R29, R4 */
		/* 821F9E3Ch case    5:*/		regs.R29 = regs.R4;
		/* 821F9E3Ch case    5:*/		return 0x821F9E40;
		  /* 821F9E40h */ case    6:  		/* mr R28, R5 */
		/* 821F9E40h case    6:*/		regs.R28 = regs.R5;
		/* 821F9E40h case    6:*/		return 0x821F9E44;
		  /* 821F9E44h */ case    7:  		/* lwz R10, <#[R11 + 36]> */
		/* 821F9E44h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821F9E44h case    7:*/		return 0x821F9E48;
		  /* 821F9E48h */ case    8:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821F9E48h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821F9E48h case    8:*/		return 0x821F9E4C;
		  /* 821F9E4Ch */ case    9:  		/* bc 4, CR0_EQ, 36 */
		/* 821F9E4Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821F9E70;  }
		/* 821F9E4Ch case    9:*/		return 0x821F9E50;
		  /* 821F9E50h */ case   10:  		/* lwz R10, <#[R11 + 32]> */
		/* 821F9E50h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 821F9E50h case   10:*/		return 0x821F9E54;
		  /* 821F9E54h */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821F9E54h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821F9E54h case   11:*/		return 0x821F9E58;
		  /* 821F9E58h */ case   12:  		/* addic. R30, R10, -40 */
		/* 821F9E58h case   12:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R10,0xFFFFFFD8);
		/* 821F9E58h case   12:*/		return 0x821F9E5C;
		  /* 821F9E5Ch */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 821F9E5Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821F9E70;  }
		/* 821F9E5Ch case   13:*/		return 0x821F9E60;
		  /* 821F9E60h */ case   14:  		/* lwz R10, <#[R30 + 8]> */
		/* 821F9E60h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821F9E60h case   14:*/		return 0x821F9E64;
		  /* 821F9E64h */ case   15:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821F9E64h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821F9E64h case   15:*/		return 0x821F9E68;
		  /* 821F9E68h */ case   16:  		/* cmplwi CR6, R10, 10624 */
		/* 821F9E68h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002980);
		/* 821F9E68h case   16:*/		return 0x821F9E6C;
		  /* 821F9E6Ch */ case   17:  		/* bc 12, CR6_EQ, 184 */
		/* 821F9E6Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821F9F24;  }
		/* 821F9E6Ch case   17:*/		return 0x821F9E70;
	}
	return 0x821F9E70;
} // Block from 821F9E28h-821F9E70h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821F9E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9E70);
		  /* 821F9E70h */ case    0:  		/* lwz R10, <#[R31 + 40]> */
		/* 821F9E70h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 821F9E70h case    0:*/		return 0x821F9E74;
		  /* 821F9E74h */ case    1:  		/* rlwinm. R10, R10, 0, 13, 13 */
		/* 821F9E74h case    1:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R10);
		/* 821F9E74h case    1:*/		return 0x821F9E78;
		  /* 821F9E78h */ case    2:  		/* bc 4, CR0_EQ, 44 */
		/* 821F9E78h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821F9EA4;  }
		/* 821F9E78h case    2:*/		return 0x821F9E7C;
		  /* 821F9E7Ch */ case    3:  		/* lwz R10, <#[R31 + 44]> */
		/* 821F9E7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 821F9E7Ch case    3:*/		return 0x821F9E80;
		  /* 821F9E80h */ case    4:  		/* rlwinm. R10, R10, 0, 6, 6 */
		/* 821F9E80h case    4:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R10,regs.R10);
		/* 821F9E80h case    4:*/		return 0x821F9E84;
		  /* 821F9E84h */ case    5:  		/* bc 12, CR0_EQ, 64 */
		/* 821F9E84h case    5:*/		if ( regs.CR[0].eq ) { return 0x821F9EC4;  }
		/* 821F9E84h case    5:*/		return 0x821F9E88;
		  /* 821F9E88h */ case    6:  		/* lwz R10, <#[R31 + 4]> */
		/* 821F9E88h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821F9E88h case    6:*/		return 0x821F9E8C;
		  /* 821F9E8Ch */ case    7:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821F9E8Ch case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821F9E8Ch case    7:*/		return 0x821F9E90;
		  /* 821F9E90h */ case    8:  		/* addic R9, R9, -1 */
		/* 821F9E90h case    8:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821F9E90h case    8:*/		return 0x821F9E94;
		  /* 821F9E94h */ case    9:  		/* subfe R9, R9, R9 */
		/* 821F9E94h case    9:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821F9E94h case    9:*/		return 0x821F9E98;
		  /* 821F9E98h */ case   10:  		/* and R10, R9, R10 */
		/* 821F9E98h case   10:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821F9E98h case   10:*/		return 0x821F9E9C;
		  /* 821F9E9Ch */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 821F9E9Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821F9E9Ch case   11:*/		return 0x821F9EA0;
		  /* 821F9EA0h */ case   12:  		/* bc 4, CR6_EQ, 36 */
		/* 821F9EA0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821F9EC4;  }
		/* 821F9EA0h case   12:*/		return 0x821F9EA4;
	}
	return 0x821F9EA4;
} // Block from 821F9E70h-821F9EA4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821F9EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9EA4);
		  /* 821F9EA4h */ case    0:  		/* mr R3, R31 */
		/* 821F9EA4h case    0:*/		regs.R3 = regs.R31;
		/* 821F9EA4h case    0:*/		return 0x821F9EA8;
		  /* 821F9EA8h */ case    1:  		/* bl -48944 */
		/* 821F9EA8h case    1:*/		regs.LR = 0x821F9EAC; return 0x821EDF78;
		/* 821F9EA8h case    1:*/		return 0x821F9EAC;
		  /* 821F9EACh */ case    2:  		/* mr R30, R3 */
		/* 821F9EACh case    2:*/		regs.R30 = regs.R3;
		/* 821F9EACh case    2:*/		return 0x821F9EB0;
		  /* 821F9EB0h */ case    3:  		/* mr R5, R31 */
		/* 821F9EB0h case    3:*/		regs.R5 = regs.R31;
		/* 821F9EB0h case    3:*/		return 0x821F9EB4;
		  /* 821F9EB4h */ case    4:  		/* lwz R3, <#[R31 + 564]> */
		/* 821F9EB4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821F9EB4h case    4:*/		return 0x821F9EB8;
		  /* 821F9EB8h */ case    5:  		/* mr R4, R30 */
		/* 821F9EB8h case    5:*/		regs.R4 = regs.R30;
		/* 821F9EB8h case    5:*/		return 0x821F9EBC;
		  /* 821F9EBCh */ case    6:  		/* bl 220196 */
		/* 821F9EBCh case    6:*/		regs.LR = 0x821F9EC0; return 0x8222FAE0;
		/* 821F9EBCh case    6:*/		return 0x821F9EC0;
		  /* 821F9EC0h */ case    7:  		/* stw R30, <#[R31 + 564]> */
		/* 821F9EC0h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 821F9EC0h case    7:*/		return 0x821F9EC4;
	}
	return 0x821F9EC4;
} // Block from 821F9EA4h-821F9EC4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821F9EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9EC4);
		  /* 821F9EC4h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 821F9EC4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821F9EC4h case    0:*/		return 0x821F9EC8;
		  /* 821F9EC8h */ case    1:  		/* li R8, 0 */
		/* 821F9EC8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821F9EC8h case    1:*/		return 0x821F9ECC;
		  /* 821F9ECCh */ case    2:  		/* li R7, 0 */
		/* 821F9ECCh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821F9ECCh case    2:*/		return 0x821F9ED0;
		  /* 821F9ED0h */ case    3:  		/* addi R5, R4, 32 */
		/* 821F9ED0h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 821F9ED0h case    3:*/		return 0x821F9ED4;
		  /* 821F9ED4h */ case    4:  		/* li R6, 83 */
		/* 821F9ED4h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x53);
		/* 821F9ED4h case    4:*/		return 0x821F9ED8;
		  /* 821F9ED8h */ case    5:  		/* mr R3, R31 */
		/* 821F9ED8h case    5:*/		regs.R3 = regs.R31;
		/* 821F9ED8h case    5:*/		return 0x821F9EDC;
		  /* 821F9EDCh */ case    6:  		/* bl 174780 */
		/* 821F9EDCh case    6:*/		regs.LR = 0x821F9EE0; return 0x82224998;
		/* 821F9EDCh case    6:*/		return 0x821F9EE0;
		  /* 821F9EE0h */ case    7:  		/* lwz R11, <#[R29 + 4]> */
		/* 821F9EE0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821F9EE0h case    7:*/		return 0x821F9EE4;
		  /* 821F9EE4h */ case    8:  		/* mr R30, R3 */
		/* 821F9EE4h case    8:*/		regs.R30 = regs.R3;
		/* 821F9EE4h case    8:*/		return 0x821F9EE8;
		  /* 821F9EE8h */ case    9:  		/* lwz R11, <#[R11 + 40]> */
		/* 821F9EE8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821F9EE8h case    9:*/		return 0x821F9EEC;
		  /* 821F9EECh */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821F9EECh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821F9EECh case   10:*/		return 0x821F9EF0;
		  /* 821F9EF0h */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 821F9EF0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821F9F10;  }
		/* 821F9EF0h case   11:*/		return 0x821F9EF4;
		  /* 821F9EF4h */ case   12:  		/* lwz R11, <#[R29 + 4]> */
		/* 821F9EF4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821F9EF4h case   12:*/		return 0x821F9EF8;
		  /* 821F9EF8h */ case   13:  		/* mr R7, R3 */
		/* 821F9EF8h case   13:*/		regs.R7 = regs.R3;
		/* 821F9EF8h case   13:*/		return 0x821F9EFC;
		  /* 821F9EFCh */ case   14:  		/* mr R4, R28 */
		/* 821F9EFCh case   14:*/		regs.R4 = regs.R28;
		/* 821F9EFCh case   14:*/		return 0x821F9F00;
		  /* 821F9F00h */ case   15:  		/* mr R3, R31 */
		/* 821F9F00h case   15:*/		regs.R3 = regs.R31;
		/* 821F9F00h case   15:*/		return 0x821F9F04;
		  /* 821F9F04h */ case   16:  		/* lwz R6, <#[R11 + 56]> */
		/* 821F9F04h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000038) );
		/* 821F9F04h case   16:*/		return 0x821F9F08;
		  /* 821F9F08h */ case   17:  		/* lwz R5, <#[R11 + 16]> */
		/* 821F9F08h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000010) );
		/* 821F9F08h case   17:*/		return 0x821F9F0C;
		  /* 821F9F0Ch */ case   18:  		/* bl -1548 */
		/* 821F9F0Ch case   18:*/		regs.LR = 0x821F9F10; return 0x821F9900;
		/* 821F9F0Ch case   18:*/		return 0x821F9F10;
	}
	return 0x821F9F10;
} // Block from 821F9EC4h-821F9F10h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821F9F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9F10);
		  /* 821F9F10h */ case    0:  		/* mr R6, R30 */
		/* 821F9F10h case    0:*/		regs.R6 = regs.R30;
		/* 821F9F10h case    0:*/		return 0x821F9F14;
		  /* 821F9F14h */ case    1:  		/* lwz R4, <#[R29 + 4]> */
		/* 821F9F14h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		/* 821F9F14h case    1:*/		return 0x821F9F18;
		  /* 821F9F18h */ case    2:  		/* mr R5, R28 */
		/* 821F9F18h case    2:*/		regs.R5 = regs.R28;
		/* 821F9F18h case    2:*/		return 0x821F9F1C;
		  /* 821F9F1Ch */ case    3:  		/* mr R3, R31 */
		/* 821F9F1Ch case    3:*/		regs.R3 = regs.R31;
		/* 821F9F1Ch case    3:*/		return 0x821F9F20;
		  /* 821F9F20h */ case    4:  		/* bl -464 */
		/* 821F9F20h case    4:*/		regs.LR = 0x821F9F24; return 0x821F9D50;
		/* 821F9F20h case    4:*/		return 0x821F9F24;
	}
	return 0x821F9F24;
} // Block from 821F9F10h-821F9F24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821F9F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9F24);
		  /* 821F9F24h */ case    0:  		/* mr R5, R29 */
		/* 821F9F24h case    0:*/		regs.R5 = regs.R29;
		/* 821F9F24h case    0:*/		return 0x821F9F28;
		  /* 821F9F28h */ case    1:  		/* mr R4, R30 */
		/* 821F9F28h case    1:*/		regs.R4 = regs.R30;
		/* 821F9F28h case    1:*/		return 0x821F9F2C;
		  /* 821F9F2Ch */ case    2:  		/* mr R3, R31 */
		/* 821F9F2Ch case    2:*/		regs.R3 = regs.R31;
		/* 821F9F2Ch case    2:*/		return 0x821F9F30;
		  /* 821F9F30h */ case    3:  		/* bl -50816 */
		/* 821F9F30h case    3:*/		regs.LR = 0x821F9F34; return 0x821ED8B0;
		/* 821F9F30h case    3:*/		return 0x821F9F34;
		  /* 821F9F34h */ case    4:  		/* mr R3, R30 */
		/* 821F9F34h case    4:*/		regs.R3 = regs.R30;
		/* 821F9F34h case    4:*/		return 0x821F9F38;
		  /* 821F9F38h */ case    5:  		/* addi R1, R1, 128 */
		/* 821F9F38h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821F9F38h case    5:*/		return 0x821F9F3C;
		  /* 821F9F3Ch */ case    6:  		/* b -1477780 */
		/* 821F9F3Ch case    6:*/		return 0x820912A8;
		/* 821F9F3Ch case    6:*/		return 0x821F9F40;
	}
	return 0x821F9F40;
} // Block from 821F9F24h-821F9F40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821F9F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821F9F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821F9F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821F9F40);
		  /* 821F9F40h */ case    0:  		/* mfspr R12, LR */
		/* 821F9F40h case    0:*/		regs.R12 = regs.LR;
		/* 821F9F40h case    0:*/		return 0x821F9F44;
		  /* 821F9F44h */ case    1:  		/* bl -1477904 */
		/* 821F9F44h case    1:*/		regs.LR = 0x821F9F48; return 0x82091234;
		/* 821F9F44h case    1:*/		return 0x821F9F48;
		  /* 821F9F48h */ case    2:  		/* stfd FR29, <#[R1 - 136]> */
		/* 821F9F48h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821F9F48h case    2:*/		return 0x821F9F4C;
		  /* 821F9F4Ch */ case    3:  		/* stfd FR30, <#[R1 - 128]> */
		/* 821F9F4Ch case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 821F9F4Ch case    3:*/		return 0x821F9F50;
		  /* 821F9F50h */ case    4:  		/* stfd FR31, <#[R1 - 120]> */
		/* 821F9F50h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821F9F50h case    4:*/		return 0x821F9F54;
		  /* 821F9F54h */ case    5:  		/* stwu R1, <#[R1 - 336]> */
		/* 821F9F54h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 821F9F54h case    5:*/		return 0x821F9F58;
		  /* 821F9F58h */ case    6:  		/* mr R24, R5 */
		/* 821F9F58h case    6:*/		regs.R24 = regs.R5;
		/* 821F9F58h case    6:*/		return 0x821F9F5C;
		  /* 821F9F5Ch */ case    7:  		/* mr R26, R6 */
		/* 821F9F5Ch case    7:*/		regs.R26 = regs.R6;
		/* 821F9F5Ch case    7:*/		return 0x821F9F60;
		  /* 821F9F60h */ case    8:  		/* li R6, 0 */
		/* 821F9F60h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821F9F60h case    8:*/		return 0x821F9F64;
		  /* 821F9F64h */ case    9:  		/* li R5, 0 */
		/* 821F9F64h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821F9F64h case    9:*/		return 0x821F9F68;
		  /* 821F9F68h */ case   10:  		/* mr R31, R3 */
		/* 821F9F68h case   10:*/		regs.R31 = regs.R3;
		/* 821F9F68h case   10:*/		return 0x821F9F6C;
		  /* 821F9F6Ch */ case   11:  		/* bl -444412 */
		/* 821F9F6Ch case   11:*/		regs.LR = 0x821F9F70; return 0x8218D770;
		/* 821F9F6Ch case   11:*/		return 0x821F9F70;
		  /* 821F9F70h */ case   12:  		/* mr R20, R3 */
		/* 821F9F70h case   12:*/		regs.R20 = regs.R3;
		/* 821F9F70h case   12:*/		return 0x821F9F74;
		  /* 821F9F74h */ case   13:  		/* li R21, 1 */
		/* 821F9F74h case   13:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821F9F74h case   13:*/		return 0x821F9F78;
		  /* 821F9F78h */ case   14:  		/* li R25, 0 */
		/* 821F9F78h case   14:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821F9F78h case   14:*/		return 0x821F9F7C;
		  /* 821F9F7Ch */ case   15:  		/* cmplwi CR6, R26, 0 */
		/* 821F9F7Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821F9F7Ch case   15:*/		return 0x821F9F80;
		  /* 821F9F80h */ case   16:  		/* bc 12, CR6_EQ, 1736 */
		/* 821F9F80h case   16:*/		if ( regs.CR[6].eq ) { return 0x821FA648;  }
		/* 821F9F80h case   16:*/		return 0x821F9F84;
		  /* 821F9F84h */ case   17:  		/* lis R11, -32256 */
		/* 821F9F84h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821F9F84h case   17:*/		return 0x821F9F88;
		  /* 821F9F88h */ case   18:  		/* lis R10, -32256 */
		/* 821F9F88h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821F9F88h case   18:*/		return 0x821F9F8C;
		  /* 821F9F8Ch */ case   19:  		/* lis R9, -32256 */
		/* 821F9F8Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 821F9F8Ch case   19:*/		return 0x821F9F90;
		  /* 821F9F90h */ case   20:  		/* li R22, 2 */
		/* 821F9F90h case   20:*/		cpu::op::li<0>(regs,&regs.R22,0x2);
		/* 821F9F90h case   20:*/		return 0x821F9F94;
		  /* 821F9F94h */ case   21:  		/* li R23, -1 */
		/* 821F9F94h case   21:*/		cpu::op::li<0>(regs,&regs.R23,0xFFFFFFFF);
		/* 821F9F94h case   21:*/		return 0x821F9F98;
		  /* 821F9F98h */ case   22:  		/* lfs FR29, <#[R11 + 1792]> */
		/* 821F9F98h case   22:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000700) );
		/* 821F9F98h case   22:*/		return 0x821F9F9C;
		  /* 821F9F9Ch */ case   23:  		/* lfd FR30, <#[R10 + 1808]> */
		/* 821F9F9Ch case   23:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R10 + 0x00000710) );
		/* 821F9F9Ch case   23:*/		return 0x821F9FA0;
		  /* 821F9FA0h */ case   24:  		/* lfs FR31, <#[R9 + 1816]> */
		/* 821F9FA0h case   24:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R9 + 0x00000718) );
		/* 821F9FA0h case   24:*/		return 0x821F9FA4;
		  /* 821F9FA4h */ case   25:  		/* mr R3, R20 */
		/* 821F9FA4h case   25:*/		regs.R3 = regs.R20;
		/* 821F9FA4h case   25:*/		return 0x821F9FA8;
		  /* 821F9FA8h */ case   26:  		/* bl -11176 */
		/* 821F9FA8h case   26:*/		regs.LR = 0x821F9FAC; return 0x821F7400;
		/* 821F9FA8h case   26:*/		return 0x821F9FAC;
		  /* 821F9FACh */ case   27:  		/* mr R28, R3 */
		/* 821F9FACh case   27:*/		regs.R28 = regs.R3;
		/* 821F9FACh case   27:*/		return 0x821F9FB0;
		  /* 821F9FB0h */ case   28:  		/* cmplwi CR6, R3, 1 */
		/* 821F9FB0h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 821F9FB0h case   28:*/		return 0x821F9FB4;
		  /* 821F9FB4h */ case   29:  		/* bc 12, CR6_LT, 1412 */
		/* 821F9FB4h case   29:*/		if ( regs.CR[6].lt ) { return 0x821FA538;  }
		/* 821F9FB4h case   29:*/		return 0x821F9FB8;
		  /* 821F9FB8h */ case   30:  		/* cmplwi CR6, R3, 14 */
		/* 821F9FB8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000000E);
		/* 821F9FB8h case   30:*/		return 0x821F9FBC;
		  /* 821F9FBCh */ case   31:  		/* bc 4, CR6_LT, 1732 */
		/* 821F9FBCh case   31:*/		if ( !regs.CR[6].lt ) { return 0x821FA680;  }
		/* 821F9FBCh case   31:*/		return 0x821F9FC0;
		  /* 821F9FC0h */ case   32:  		/* mr R4, R24 */
		/* 821F9FC0h case   32:*/		regs.R4 = regs.R24;
		/* 821F9FC0h case   32:*/		return 0x821F9FC4;
		  /* 821F9FC4h */ case   33:  		/* addi R3, R1, 168 */
		/* 821F9FC4h case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA8);
		/* 821F9FC4h case   33:*/		return 0x821F9FC8;
		  /* 821F9FC8h */ case   34:  		/* bl -369048 */
		/* 821F9FC8h case   34:*/		regs.LR = 0x821F9FCC; return 0x8219FE30;
		/* 821F9FC8h case   34:*/		return 0x821F9FCC;
		  /* 821F9FCCh */ case   35:  		/* mr R4, R26 */
		/* 821F9FCCh case   35:*/		regs.R4 = regs.R26;
		/* 821F9FCCh case   35:*/		return 0x821F9FD0;
		  /* 821F9FD0h */ case   36:  		/* addi R3, R1, 168 */
		/* 821F9FD0h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA8);
		/* 821F9FD0h case   36:*/		return 0x821F9FD4;
		  /* 821F9FD4h */ case   37:  		/* bl -34404 */
		/* 821F9FD4h case   37:*/		regs.LR = 0x821F9FD8; return 0x821F1970;
		/* 821F9FD4h case   37:*/		return 0x821F9FD8;
		  /* 821F9FD8h */ case   38:  		/* mr R4, R25 */
		/* 821F9FD8h case   38:*/		regs.R4 = regs.R25;
		/* 821F9FD8h case   38:*/		return 0x821F9FDC;
		  /* 821F9FDCh */ case   39:  		/* addi R3, R1, 168 */
		/* 821F9FDCh case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA8);
		/* 821F9FDCh case   39:*/		return 0x821F9FE0;
		  /* 821F9FE0h */ case   40:  		/* lwz R27, <#[R1 + 172]> */
		/* 821F9FE0h case   40:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000AC) );
		/* 821F9FE0h case   40:*/		return 0x821F9FE4;
		  /* 821F9FE4h */ case   41:  		/* lwz R19, <#[R1 + 176]> */
		/* 821F9FE4h case   41:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x000000B0) );
		/* 821F9FE4h case   41:*/		return 0x821F9FE8;
		  /* 821F9FE8h */ case   42:  		/* bl -49648 */
		/* 821F9FE8h case   42:*/		regs.LR = 0x821F9FEC; return 0x821EDDF8;
		/* 821F9FE8h case   42:*/		return 0x821F9FEC;
		  /* 821F9FECh */ case   43:  		/* lwz R10, <#[R1 + 176]> */
		/* 821F9FECh case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 821F9FECh case   43:*/		return 0x821F9FF0;
		  /* 821F9FF0h */ case   44:  		/* li R30, 0 */
		/* 821F9FF0h case   44:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821F9FF0h case   44:*/		return 0x821F9FF4;
		  /* 821F9FF4h */ case   45:  		/* lwz R11, <#[R1 + 172]> */
		/* 821F9FF4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 821F9FF4h case   45:*/		return 0x821F9FF8;
		  /* 821F9FF8h */ case   46:  		/* li R29, 0 */
		/* 821F9FF8h case   46:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821F9FF8h case   46:*/		return 0x821F9FFC;
		  /* 821F9FFCh */ case   47:  		/* addi R10, R10, 2 */
		/* 821F9FFCh case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821F9FFCh case   47:*/		return 0x821FA000;
		  /* 821FA000h */ case   48:  		/* stw R27, <#[R1 + 172]> */
		/* 821FA000h case   48:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000000AC) );
		/* 821FA000h case   48:*/		return 0x821FA004;
		  /* 821FA004h */ case   49:  		/* stw R19, <#[R1 + 176]> */
		/* 821FA004h case   49:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x000000B0) );
		/* 821FA004h case   49:*/		return 0x821FA008;
		  /* 821FA008h */ case   50:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821FA008h case   50:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821FA008h case   50:*/		return 0x821FA00C;
		  /* 821FA00Ch */ case   51:  		/* add R27, R10, R11 */
		/* 821FA00Ch case   51:*/		cpu::op::add<0>(regs,&regs.R27,regs.R10,regs.R11);
		/* 821FA00Ch case   51:*/		return 0x821FA010;
		  /* 821FA010h */ case   52:  		/* lwz R11, <#[R27 + 4]> */
		/* 821FA010h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821FA010h case   52:*/		return 0x821FA014;
		  /* 821FA014h */ case   53:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821FA014h case   53:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821FA014h case   53:*/		return 0x821FA018;
		  /* 821FA018h */ case   54:  		/* bc 4, CR0_EQ, 16 */
		/* 821FA018h case   54:*/		if ( !regs.CR[0].eq ) { return 0x821FA028;  }
		/* 821FA018h case   54:*/		return 0x821FA01C;
		  /* 821FA01Ch */ case   55:  		/* rlwinm R4, R11, 15, 17, 31 */
		/* 821FA01Ch case   55:*/		cpu::op::rlwinm<0,15,17,31>(regs,&regs.R4,regs.R11);
		/* 821FA01Ch case   55:*/		return 0x821FA020;
		  /* 821FA020h */ case   56:  		/* rlwinm R29, R11, 30, 18, 31 */
		/* 821FA020h case   56:*/		cpu::op::rlwinm<0,30,18,31>(regs,&regs.R29,regs.R11);
		/* 821FA020h case   56:*/		return 0x821FA024;
		  /* 821FA024h */ case   57:  		/* b 128 */
		/* 821FA024h case   57:*/		return 0x821FA0A4;
		/* 821FA024h case   57:*/		return 0x821FA028;
	}
	return 0x821FA028;
} // Block from 821F9F40h-821FA028h (58 instructions)

//////////////////////////////////////////////////////
// Block at 821FA028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA028);
		  /* 821FA028h */ case    0:  		/* cmpwi CR6, R10, 1 */
		/* 821FA028h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FA028h case    0:*/		return 0x821FA02C;
		  /* 821FA02Ch */ case    1:  		/* bc 4, CR6_EQ, 424 */
		/* 821FA02Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FA1D4;  }
		/* 821FA02Ch case    1:*/		return 0x821FA030;
		  /* 821FA030h */ case    2:  		/* lwz R30, <#[R27]> */
		/* 821FA030h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 821FA030h case    2:*/		return 0x821FA034;
		  /* 821FA034h */ case    3:  		/* lwz R10, <#[R30 + 8]> */
		/* 821FA034h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821FA034h case    3:*/		return 0x821FA038;
		  /* 821FA038h */ case    4:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821FA038h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821FA038h case    4:*/		return 0x821FA03C;
		  /* 821FA03Ch */ case    5:  		/* cmplwi CR6, R10, 124 */
		/* 821FA03Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007C);
		/* 821FA03Ch case    5:*/		return 0x821FA040;
		  /* 821FA040h */ case    6:  		/* bc 4, CR6_EQ, 56 */
		/* 821FA040h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821FA078;  }
		/* 821FA040h case    6:*/		return 0x821FA044;
		  /* 821FA044h */ case    7:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FA044h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FA044h case    7:*/		return 0x821FA048;
		  /* 821FA048h */ case    8:  		/* mr R3, R31 */
		/* 821FA048h case    8:*/		regs.R3 = regs.R31;
		/* 821FA048h case    8:*/		return 0x821FA04C;
		  /* 821FA04Ch */ case    9:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821FA04Ch case    9:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821FA04Ch case    9:*/		return 0x821FA050;
		  /* 821FA050h */ case   10:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821FA050h case   10:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821FA050h case   10:*/		return 0x821FA054;
		  /* 821FA054h */ case   11:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821FA054h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821FA054h case   11:*/		return 0x821FA058;
		  /* 821FA058h */ case   12:  		/* bl -613416 */
		/* 821FA058h case   12:*/		regs.LR = 0x821FA05C; return 0x82164430;
		/* 821FA058h case   12:*/		return 0x821FA05C;
		  /* 821FA05Ch */ case   13:  		/* addi R11, R30, -8 */
		/* 821FA05Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF8);
		/* 821FA05Ch case   13:*/		return 0x821FA060;
		  /* 821FA060h */ case   14:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821FA060h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821FA060h case   14:*/		return 0x821FA064;
		  /* 821FA064h */ case   15:  		/* rlwinm R11, R11, 3, 30, 31 */
		/* 821FA064h case   15:*/		cpu::op::rlwinm<0,3,30,31>(regs,&regs.R11,regs.R11);
		/* 821FA064h case   15:*/		return 0x821FA068;
		  /* 821FA068h */ case   16:  		/* addi R10, R11, -2 */
		/* 821FA068h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFE);
		/* 821FA068h case   16:*/		return 0x821FA06C;
		  /* 821FA06Ch */ case   17:  		/* subfc R11, R22, R11 */
		/* 821FA06Ch case   17:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 821FA06Ch case   17:*/		return 0x821FA070;
		  /* 821FA070h */ case   18:  		/* subfze R30, R23 */
		/* 821FA070h case   18:*/		cpu::op::subfze<0>(regs,&regs.R30,regs.R23);
		/* 821FA070h case   18:*/		return 0x821FA074;
		  /* 821FA074h */ case   19:  		/* b 316 */
		/* 821FA074h case   19:*/		return 0x821FA1B0;
		/* 821FA074h case   19:*/		return 0x821FA078;
	}
	return 0x821FA078;
} // Block from 821FA028h-821FA078h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FA078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA078);
		  /* 821FA078h */ case    0:  		/* cmplwi CR6, R10, 112 */
		/* 821FA078h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000070);
		/* 821FA078h case    0:*/		return 0x821FA07C;
		  /* 821FA07Ch */ case    1:  		/* bc 4, CR6_EQ, 232 */
		/* 821FA07Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FA164;  }
		/* 821FA07Ch case    1:*/		return 0x821FA080;
		  /* 821FA080h */ case    2:  		/* li R6, 1 */
		/* 821FA080h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821FA080h case    2:*/		return 0x821FA084;
		  /* 821FA084h */ case    3:  		/* li R5, 0 */
		/* 821FA084h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FA084h case    3:*/		return 0x821FA088;
		  /* 821FA088h */ case    4:  		/* li R4, 112 */
		/* 821FA088h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 821FA088h case    4:*/		return 0x821FA08C;
		  /* 821FA08Ch */ case    5:  		/* mr R3, R31 */
		/* 821FA08Ch case    5:*/		regs.R3 = regs.R31;
		/* 821FA08Ch case    5:*/		return 0x821FA090;
		  /* 821FA090h */ case    6:  		/* bl -613472 */
		/* 821FA090h case    6:*/		regs.LR = 0x821FA094; return 0x82164430;
		/* 821FA090h case    6:*/		return 0x821FA094;
		  /* 821FA094h */ case    7:  		/* addi R11, R30, -8 */
		/* 821FA094h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF8);
		/* 821FA094h case    7:*/		return 0x821FA098;
		  /* 821FA098h */ case    8:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821FA098h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821FA098h case    8:*/		return 0x821FA09C;
		  /* 821FA09Ch */ case    9:  		/* rlwinm R4, R11, 0, 17, 31 */
		/* 821FA09Ch case    9:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R4,regs.R11);
		/* 821FA09Ch case    9:*/		return 0x821FA0A0;
		  /* 821FA0A0h */ case   10:  		/* rlwinm R29, R11, 17, 18, 31 */
		/* 821FA0A0h case   10:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R29,regs.R11);
		/* 821FA0A0h case   10:*/		return 0x821FA0A4;
	}
	return 0x821FA0A4;
} // Block from 821FA078h-821FA0A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FA0A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA0A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA0A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA0A4);
		  /* 821FA0A4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FA0A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FA0A4h case    0:*/		return 0x821FA0A8;
		  /* 821FA0A8h */ case    1:  		/* mulli R30, R4, 40 */
		/* 821FA0A8h case    1:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R4,0x28);
		/* 821FA0A8h case    1:*/		return 0x821FA0AC;
		  /* 821FA0ACh */ case    2:  		/* add R11, R11, R30 */
		/* 821FA0ACh case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821FA0ACh case    2:*/		return 0x821FA0B0;
		  /* 821FA0B0h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 821FA0B0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FA0B0h case    3:*/		return 0x821FA0B4;
		  /* 821FA0B4h */ case    4:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 821FA0B4h case    4:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821FA0B4h case    4:*/		return 0x821FA0B8;
		  /* 821FA0B8h */ case    5:  		/* cmplwi CR6, R10, 1 */
		/* 821FA0B8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821FA0B8h case    5:*/		return 0x821FA0BC;
		  /* 821FA0BCh */ case    6:  		/* bc 4, CR6_EQ, 52 */
		/* 821FA0BCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821FA0F0;  }
		/* 821FA0BCh case    6:*/		return 0x821FA0C0;
		  /* 821FA0C0h */ case    7:  		/* lwz R11, <#[R11 + 28]> */
		/* 821FA0C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821FA0C0h case    7:*/		return 0x821FA0C4;
		  /* 821FA0C4h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FA0C4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FA0C4h case    8:*/		return 0x821FA0C8;
		  /* 821FA0C8h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 821FA0C8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821FA0D4;  }
		/* 821FA0C8h case    9:*/		return 0x821FA0CC;
		  /* 821FA0CCh */ case   10:  		/* mr R3, R31 */
		/* 821FA0CCh case   10:*/		regs.R3 = regs.R31;
		/* 821FA0CCh case   10:*/		return 0x821FA0D0;
		  /* 821FA0D0h */ case   11:  		/* bl -444256 */
		/* 821FA0D0h case   11:*/		regs.LR = 0x821FA0D4; return 0x8218D970;
		/* 821FA0D0h case   11:*/		return 0x821FA0D4;
	}
	return 0x821FA0D4;
} // Block from 821FA0A4h-821FA0D4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FA0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA0D4);
		  /* 821FA0D4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FA0D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FA0D4h case    0:*/		return 0x821FA0D8;
		  /* 821FA0D8h */ case    1:  		/* rlwinm R10, R29, 3, 0, 28 */
		/* 821FA0D8h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R29);
		/* 821FA0D8h case    1:*/		return 0x821FA0DC;
		  /* 821FA0DCh */ case    2:  		/* add R11, R11, R30 */
		/* 821FA0DCh case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821FA0DCh case    2:*/		return 0x821FA0E0;
		  /* 821FA0E0h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 821FA0E0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821FA0E0h case    3:*/		return 0x821FA0E4;
		  /* 821FA0E4h */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821FA0E4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821FA0E4h case    4:*/		return 0x821FA0E8;
		  /* 821FA0E8h */ case    5:  		/* rlwinm R11, R11, 14, 30, 31 */
		/* 821FA0E8h case    5:*/		cpu::op::rlwinm<0,14,30,31>(regs,&regs.R11,regs.R11);
		/* 821FA0E8h case    5:*/		return 0x821FA0EC;
		  /* 821FA0ECh */ case    6:  		/* b -132 */
		/* 821FA0ECh case    6:*/		return 0x821FA068;
		/* 821FA0ECh case    6:*/		return 0x821FA0F0;
	}
	return 0x821FA0F0;
} // Block from 821FA0D4h-821FA0F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FA0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA0F0);
		  /* 821FA0F0h */ case    0:  		/* li R6, 0 */
		/* 821FA0F0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FA0F0h case    0:*/		return 0x821FA0F4;
		  /* 821FA0F4h */ case    1:  		/* lwz R4, <#[R11 + 20]> */
		/* 821FA0F4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821FA0F4h case    1:*/		return 0x821FA0F8;
		  /* 821FA0F8h */ case    2:  		/* li R5, 0 */
		/* 821FA0F8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FA0F8h case    2:*/		return 0x821FA0FC;
		  /* 821FA0FCh */ case    3:  		/* mr R3, R31 */
		/* 821FA0FCh case    3:*/		regs.R3 = regs.R31;
		/* 821FA0FCh case    3:*/		return 0x821FA100;
		  /* 821FA100h */ case    4:  		/* bl -444816 */
		/* 821FA100h case    4:*/		regs.LR = 0x821FA104; return 0x8218D770;
		/* 821FA100h case    4:*/		return 0x821FA104;
		  /* 821FA104h */ case    5:  		/* mr R30, R3 */
		/* 821FA104h case    5:*/		regs.R30 = regs.R3;
		/* 821FA104h case    5:*/		return 0x821FA108;
		  /* 821FA108h */ case    6:  		/* mr R3, R30 */
		/* 821FA108h case    6:*/		regs.R3 = regs.R30;
		/* 821FA108h case    6:*/		return 0x821FA10C;
		  /* 821FA10Ch */ case    7:  		/* bl -11532 */
		/* 821FA10Ch case    7:*/		regs.LR = 0x821FA110; return 0x821F7400;
		/* 821FA10Ch case    7:*/		return 0x821FA110;
		  /* 821FA110h */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 821FA110h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FA110h case    8:*/		return 0x821FA114;
		  /* 821FA114h */ case    9:  		/* addi R29, R29, -1 */
		/* 821FA114h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821FA114h case    9:*/		return 0x821FA118;
		  /* 821FA118h */ case   10:  		/* bc 4, CR6_EQ, -16 */
		/* 821FA118h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821FA108;  }
		/* 821FA118h case   10:*/		return 0x821FA11C;
		  /* 821FA11Ch */ case   11:  		/* lwz R10, <#[R31 + 1008]> */
		/* 821FA11Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000003F0) );
		/* 821FA11Ch case   11:*/		return 0x821FA120;
		  /* 821FA120h */ case   12:  		/* addi R11, R31, 972 */
		/* 821FA120h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3CC);
		/* 821FA120h case   12:*/		return 0x821FA124;
		  /* 821FA124h */ case   13:  		/* cmpwi CR6, R3, 0 */
		/* 821FA124h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821FA124h case   13:*/		return 0x821FA128;
		  /* 821FA128h */ case   14:  		/* stw R10, <#[R30]> */
		/* 821FA128h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821FA128h case   14:*/		return 0x821FA12C;
		  /* 821FA12Ch */ case   15:  		/* stw R30, <#[R31 + 1008]> */
		/* 821FA12Ch case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000003F0) );
		/* 821FA12Ch case   15:*/		return 0x821FA130;
		  /* 821FA130h */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 821FA130h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821FA140;  }
		/* 821FA130h case   16:*/		return 0x821FA134;
		  /* 821FA134h */ case   17:  		/* cmpwi CR6, R3, 9 */
		/* 821FA134h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000009);
		/* 821FA134h case   17:*/		return 0x821FA138;
		  /* 821FA138h */ case   18:  		/* mr R30, R21 */
		/* 821FA138h case   18:*/		regs.R30 = regs.R21;
		/* 821FA138h case   18:*/		return 0x821FA13C;
		  /* 821FA13Ch */ case   19:  		/* bc 4, CR6_GT, 8 */
		/* 821FA13Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x821FA144;  }
		/* 821FA13Ch case   19:*/		return 0x821FA140;
	}
	return 0x821FA140;
} // Block from 821FA0F0h-821FA140h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FA140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA140);
		  /* 821FA140h */ case    0:  		/* li R30, 0 */
		/* 821FA140h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FA140h case    0:*/		return 0x821FA144;
	}
	return 0x821FA144;
} // Block from 821FA140h-821FA144h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FA144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA144);
		  /* 821FA144h */ case    0:  		/* cmpwi CR6, R3, 2 */
		/* 821FA144h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 821FA144h case    0:*/		return 0x821FA148;
		  /* 821FA148h */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 821FA148h case    1:*/		if ( regs.CR[6].lt ) { return 0x821FA15C;  }
		/* 821FA148h case    1:*/		return 0x821FA14C;
		  /* 821FA14Ch */ case    2:  		/* cmpwi CR6, R3, 5 */
		/* 821FA14Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000005);
		/* 821FA14Ch case    2:*/		return 0x821FA150;
		  /* 821FA150h */ case    3:  		/* bc 12, CR6_GT, 12 */
		/* 821FA150h case    3:*/		if ( regs.CR[6].gt ) { return 0x821FA15C;  }
		/* 821FA150h case    3:*/		return 0x821FA154;
		  /* 821FA154h */ case    4:  		/* mr R29, R21 */
		/* 821FA154h case    4:*/		regs.R29 = regs.R21;
		/* 821FA154h case    4:*/		return 0x821FA158;
		  /* 821FA158h */ case    5:  		/* b 124 */
		/* 821FA158h case    5:*/		return 0x821FA1D4;
		/* 821FA158h case    5:*/		return 0x821FA15C;
	}
	return 0x821FA15C;
} // Block from 821FA144h-821FA15Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FA15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA15C);
		  /* 821FA15Ch */ case    0:  		/* li R29, 0 */
		/* 821FA15Ch case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FA15Ch case    0:*/		return 0x821FA160;
		  /* 821FA160h */ case    1:  		/* b 116 */
		/* 821FA160h case    1:*/		return 0x821FA1D4;
		/* 821FA160h case    1:*/		return 0x821FA164;
	}
	return 0x821FA164;
} // Block from 821FA15Ch-821FA164h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FA164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA164);
		  /* 821FA164h */ case    0:  		/* cmplwi CR6, R10, 125 */
		/* 821FA164h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821FA164h case    0:*/		return 0x821FA168;
		  /* 821FA168h */ case    1:  		/* bc 4, CR6_EQ, 84 */
		/* 821FA168h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FA1BC;  }
		/* 821FA168h case    1:*/		return 0x821FA16C;
		  /* 821FA16Ch */ case    2:  		/* rlwinm R10, R30, 0, 0, 19 */
		/* 821FA16Ch case    2:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R10,regs.R30);
		/* 821FA16Ch case    2:*/		return 0x821FA170;
		  /* 821FA170h */ case    3:  		/* lwz R10, <#[R10]> */
		/* 821FA170h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821FA170h case    3:*/		return 0x821FA174;
		  /* 821FA174h */ case    4:  		/* lwz R10, <#[R10 + 148]> */
		/* 821FA174h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000094) );
		/* 821FA174h case    4:*/		return 0x821FA178;
	}
	return 0x821FA178;
} // Block from 821FA164h-821FA178h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FA178h
// Function '?CommitVariableAttributes@Compiler@D3DXShader@@AAAXPAUVariable@2@KPAVCNode@2@W4_D3DSCOPE_TYPE@2@2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA178);
		  /* 821FA178h */ case    0:  		/* lwz R10, <#[R10 + 40]> */
		/* 821FA178h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821FA178h case    0:*/		return 0x821FA17C;
		  /* 821FA17Ch */ case    1:  		/* nor R10, R10, R10 */
		/* 821FA17Ch case    1:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821FA17Ch case    1:*/		return 0x821FA180;
		  /* 821FA180h */ case    2:  		/* rlwinm. R10, R10, 18, 31, 31 */
		/* 821FA180h case    2:*/		cpu::op::rlwinm<1,18,31,31>(regs,&regs.R10,regs.R10);
		/* 821FA180h case    2:*/		return 0x821FA184;
		  /* 821FA184h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821FA184h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821FA190;  }
		/* 821FA184h case    3:*/		return 0x821FA188;
		  /* 821FA188h */ case    4:  		/* li R11, 0 */
		/* 821FA188h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FA188h case    4:*/		return 0x821FA18C;
		  /* 821FA18Ch */ case    5:  		/* b 24 */
		/* 821FA18Ch case    5:*/		return 0x821FA1A4;
		/* 821FA18Ch case    5:*/		return 0x821FA190;
	}
	return 0x821FA190;
} // Block from 821FA178h-821FA190h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FA190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA190);
		  /* 821FA190h */ case    0:  		/* lwz R10, <#[R30 + 20]> */
		/* 821FA190h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 821FA190h case    0:*/		return 0x821FA194;
		  /* 821FA194h */ case    1:  		/* rlwinm R11, R11, 31, 17, 30 */
		/* 821FA194h case    1:*/		cpu::op::rlwinm<0,31,17,30>(regs,&regs.R11,regs.R11);
		/* 821FA194h case    1:*/		return 0x821FA198;
		  /* 821FA198h */ case    2:  		/* rlwinm R10, R10, 30, 24, 31 */
		/* 821FA198h case    2:*/		cpu::op::rlwinm<0,30,24,31>(regs,&regs.R10,regs.R10);
		/* 821FA198h case    2:*/		return 0x821FA19C;
		  /* 821FA19Ch */ case    3:  		/* srw R11, R10, R11 */
		/* 821FA19Ch case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FA19Ch case    3:*/		return 0x821FA1A0;
		  /* 821FA1A0h */ case    4:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821FA1A0h case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821FA1A0h case    4:*/		return 0x821FA1A4;
	}
	return 0x821FA1A4;
} // Block from 821FA190h-821FA1A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FA1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA1A4);
		  /* 821FA1A4h */ case    0:  		/* addic R9, R11, -1 */
		/* 821FA1A4h case    0:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821FA1A4h case    0:*/		return 0x821FA1A8;
		  /* 821FA1A8h */ case    1:  		/* addi R10, R11, -1 */
		/* 821FA1A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821FA1A8h case    1:*/		return 0x821FA1AC;
		  /* 821FA1ACh */ case    2:  		/* subfe R30, R9, R11 */
		/* 821FA1ACh case    2:*/		cpu::op::subfe<0>(regs,&regs.R30,regs.R9,regs.R11);
		/* 821FA1ACh case    2:*/		return 0x821FA1B0;
	}
	return 0x821FA1B0;
} // Block from 821FA1A4h-821FA1B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FA1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA1B0);
		  /* 821FA1B0h */ case    0:  		/* cntlzw R10, R10 */
		/* 821FA1B0h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821FA1B0h case    0:*/		return 0x821FA1B4;
		  /* 821FA1B4h */ case    1:  		/* rlwinm R29, R10, 27, 31, 31 */
		/* 821FA1B4h case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R29,regs.R10);
		/* 821FA1B4h case    1:*/		return 0x821FA1B8;
		  /* 821FA1B8h */ case    2:  		/* b 28 */
		/* 821FA1B8h case    2:*/		return 0x821FA1D4;
		/* 821FA1B8h case    2:*/		return 0x821FA1BC;
	}
	return 0x821FA1BC;
} // Block from 821FA1B0h-821FA1BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FA1BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA1BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA1BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA1BC);
		  /* 821FA1BCh */ case    0:  		/* lhz R10, <#[R30 + 14]> */
		/* 821FA1BCh case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000E) );
		/* 821FA1BCh case    0:*/		return 0x821FA1C0;
		  /* 821FA1C0h */ case    1:  		/* rlwinm R11, R11, 0, 16, 29 */
		/* 821FA1C0h case    1:*/		cpu::op::rlwinm<0,0,16,29>(regs,&regs.R11,regs.R11);
		/* 821FA1C0h case    1:*/		return 0x821FA1C4;
		  /* 821FA1C4h */ case    2:  		/* srw R11, R10, R11 */
		/* 821FA1C4h case    2:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FA1C4h case    2:*/		return 0x821FA1C8;
		  /* 821FA1C8h */ case    3:  		/* nor R10, R11, R11 */
		/* 821FA1C8h case    3:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821FA1C8h case    3:*/		return 0x821FA1CC;
		  /* 821FA1CCh */ case    4:  		/* rlwinm R30, R11, 30, 31, 31 */
		/* 821FA1CCh case    4:*/		cpu::op::rlwinm<0,30,31,31>(regs,&regs.R30,regs.R11);
		/* 821FA1CCh case    4:*/		return 0x821FA1D0;
		  /* 821FA1D0h */ case    5:  		/* rlwinm R29, R10, 31, 31, 31 */
		/* 821FA1D0h case    5:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R29,regs.R10);
		/* 821FA1D0h case    5:*/		return 0x821FA1D4;
	}
	return 0x821FA1D4;
} // Block from 821FA1BCh-821FA1D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FA1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA1D4);
		  /* 821FA1D4h */ case    0:  		/* li R11, 10 */
		/* 821FA1D4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 821FA1D4h case    0:*/		return 0x821FA1D8;
		  /* 821FA1D8h */ case    1:  		/* li R10, 6 */
		/* 821FA1D8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 821FA1D8h case    1:*/		return 0x821FA1DC;
		  /* 821FA1DCh */ case    2:  		/* subfc R9, R11, R28 */
		/* 821FA1DCh case    2:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R28);
		/* 821FA1DCh case    2:*/		return 0x821FA1E0;
		  /* 821FA1E0h */ case    3:  		/* eqv R11, R11, R28 */
		/* 821FA1E0h case    3:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821FA1E0h case    3:*/		return 0x821FA1E4;
		  /* 821FA1E4h */ case    4:  		/* eqv R8, R10, R28 */
		/* 821FA1E4h case    4:*/		cpu::op::eqv<0>(regs,&regs.R8,regs.R10,regs.R28);
		/* 821FA1E4h case    4:*/		return 0x821FA1E8;
		  /* 821FA1E8h */ case    5:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 821FA1E8h case    5:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 821FA1E8h case    5:*/		return 0x821FA1EC;
		  /* 821FA1ECh */ case    6:  		/* addze R11, R11 */
		/* 821FA1ECh case    6:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 821FA1ECh case    6:*/		return 0x821FA1F0;
		  /* 821FA1F0h */ case    7:  		/* subfc R10, R10, R28 */
		/* 821FA1F0h case    7:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 821FA1F0h case    7:*/		return 0x821FA1F4;
		  /* 821FA1F4h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821FA1F4h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821FA1F4h case    8:*/		return 0x821FA1F8;
		  /* 821FA1F8h */ case    9:  		/* rlwinm R10, R8, 1, 31, 31 */
		/* 821FA1F8h case    9:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R8);
		/* 821FA1F8h case    9:*/		return 0x821FA1FC;
		  /* 821FA1FCh */ case   10:  		/* addze R11, R10 */
		/* 821FA1FCh case   10:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R10);
		/* 821FA1FCh case   10:*/		return 0x821FA200;
		  /* 821FA200h */ case   11:  		/* rlwinm R28, R11, 0, 31, 31 */
		/* 821FA200h case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R28,regs.R11);
		/* 821FA200h case   11:*/		return 0x821FA204;
		  /* 821FA204h */ case   12:  		/* bc 12, CR0_EQ, 536 */
		/* 821FA204h case   12:*/		if ( regs.CR[0].eq ) { return 0x821FA41C;  }
		/* 821FA204h case   12:*/		return 0x821FA208;
		  /* 821FA208h */ case   13:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821FA208h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821FA208h case   13:*/		return 0x821FA20C;
		  /* 821FA20Ch */ case   14:  		/* bc 4, CR0_EQ, 416 */
		/* 821FA20Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x821FA3AC;  }
		/* 821FA20Ch case   14:*/		return 0x821FA210;
		  /* 821FA210h */ case   15:  		/* addi R5, R1, 80 */
		/* 821FA210h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821FA210h case   15:*/		return 0x821FA214;
		  /* 821FA214h */ case   16:  		/* mr R4, R27 */
		/* 821FA214h case   16:*/		regs.R4 = regs.R27;
		/* 821FA214h case   16:*/		return 0x821FA218;
		  /* 821FA218h */ case   17:  		/* mr R3, R31 */
		/* 821FA218h case   17:*/		regs.R3 = regs.R31;
		/* 821FA218h case   17:*/		return 0x821FA21C;
		  /* 821FA21Ch */ case   18:  		/* bl -54436 */
		/* 821FA21Ch case   18:*/		regs.LR = 0x821FA220; return 0x821ECD78;
		/* 821FA21Ch case   18:*/		return 0x821FA220;
		  /* 821FA220h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FA220h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FA220h case   19:*/		return 0x821FA224;
		  /* 821FA224h */ case   20:  		/* mr R4, R31 */
		/* 821FA224h case   20:*/		regs.R4 = regs.R31;
		/* 821FA224h case   20:*/		return 0x821FA228;
		  /* 821FA228h */ case   21:  		/* bc 12, CR0_EQ, 68 */
		/* 821FA228h case   21:*/		if ( regs.CR[0].eq ) { return 0x821FA26C;  }
		/* 821FA228h case   21:*/		return 0x821FA22C;
		  /* 821FA22Ch */ case   22:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821FA22Ch case   22:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821FA22Ch case   22:*/		return 0x821FA230;
		  /* 821FA230h */ case   23:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821FA230h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821FA230h case   23:*/		return 0x821FA234;
		  /* 821FA234h */ case   24:  		/* bc 12, CR0_EQ, 28 */
		/* 821FA234h case   24:*/		if ( regs.CR[0].eq ) { return 0x821FA250;  }
		/* 821FA234h case   24:*/		return 0x821FA238;
		  /* 821FA238h */ case   25:  		/* fctiwz FR0, FR0 */
		/* 821FA238h case   25:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821FA238h case   25:*/		return 0x821FA23C;
		  /* 821FA23Ch */ case   26:  		/* stfd FR0, <#[R1 + 104]> */
		/* 821FA23Ch case   26:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000068) );
		/* 821FA23Ch case   26:*/		return 0x821FA240;
		  /* 821FA240h */ case   27:  		/* lwz R5, <#[R1 + 108]> */
		/* 821FA240h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 821FA240h case   27:*/		return 0x821FA244;
		  /* 821FA244h */ case   28:  		/* li R6, 1 */
		/* 821FA244h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821FA244h case   28:*/		return 0x821FA248;
		  /* 821FA248h */ case   29:  		/* addi R3, R1, 136 */
		/* 821FA248h case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x88);
		/* 821FA248h case   29:*/		return 0x821FA24C;
		  /* 821FA24Ch */ case   30:  		/* b 24 */
		/* 821FA24Ch case   30:*/		return 0x821FA264;
		/* 821FA24Ch case   30:*/		return 0x821FA250;
	}
	return 0x821FA250;
} // Block from 821FA1D4h-821FA250h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821FA250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA250);
		  /* 821FA250h */ case    0:  		/* fctidz FR0, FR0 */
		/* 821FA250h case    0:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 821FA250h case    0:*/		return 0x821FA254;
		  /* 821FA254h */ case    1:  		/* stfd FR0, <#[R1 + 104]> */
		/* 821FA254h case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000068) );
		/* 821FA254h case    1:*/		return 0x821FA258;
		  /* 821FA258h */ case    2:  		/* li R6, 0 */
		/* 821FA258h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FA258h case    2:*/		return 0x821FA25C;
		  /* 821FA25Ch */ case    3:  		/* addi R3, R1, 144 */
		/* 821FA25Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 821FA25Ch case    3:*/		return 0x821FA260;
		  /* 821FA260h */ case    4:  		/* lwz R5, <#[R1 + 108]> */
		/* 821FA260h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 821FA260h case    4:*/		return 0x821FA264;
	}
	return 0x821FA264;
} // Block from 821FA250h-821FA264h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FA264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA264);
		  /* 821FA264h */ case    0:  		/* bl 198820 */
		/* 821FA264h case    0:*/		regs.LR = 0x821FA268; return 0x8222AB08;
		/* 821FA264h case    0:*/		return 0x821FA268;
		  /* 821FA268h */ case    1:  		/* b 504 */
		/* 821FA268h case    1:*/		return 0x821FA460;
		/* 821FA268h case    1:*/		return 0x821FA26C;
	}
	return 0x821FA26C;
} // Block from 821FA264h-821FA26Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FA26Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA26C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA26C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA26C);
		  /* 821FA26Ch */ case    0:  		/* mr R6, R28 */
		/* 821FA26Ch case    0:*/		regs.R6 = regs.R28;
		/* 821FA26Ch case    0:*/		return 0x821FA270;
		  /* 821FA270h */ case    1:  		/* li R5, 0 */
		/* 821FA270h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FA270h case    1:*/		return 0x821FA274;
		  /* 821FA274h */ case    2:  		/* addi R3, R1, 96 */
		/* 821FA274h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821FA274h case    2:*/		return 0x821FA278;
		  /* 821FA278h */ case    3:  		/* bl 198800 */
		/* 821FA278h case    3:*/		regs.LR = 0x821FA27C; return 0x8222AB08;
		/* 821FA278h case    3:*/		return 0x821FA27C;
		  /* 821FA27Ch */ case    4:  		/* mr R6, R28 */
		/* 821FA27Ch case    4:*/		regs.R6 = regs.R28;
		/* 821FA27Ch case    4:*/		return 0x821FA280;
		  /* 821FA280h */ case    5:  		/* li R5, 1 */
		/* 821FA280h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FA280h case    5:*/		return 0x821FA284;
		  /* 821FA284h */ case    6:  		/* mr R4, R31 */
		/* 821FA284h case    6:*/		regs.R4 = regs.R31;
		/* 821FA284h case    6:*/		return 0x821FA288;
		  /* 821FA288h */ case    7:  		/* addi R3, R1, 88 */
		/* 821FA288h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821FA288h case    7:*/		return 0x821FA28C;
		  /* 821FA28Ch */ case    8:  		/* bl 198780 */
		/* 821FA28Ch case    8:*/		regs.LR = 0x821FA290; return 0x8222AB08;
		/* 821FA28Ch case    8:*/		return 0x821FA290;
		  /* 821FA290h */ case    9:  		/* mr R4, R27 */
		/* 821FA290h case    9:*/		regs.R4 = regs.R27;
		/* 821FA290h case    9:*/		return 0x821FA294;
		  /* 821FA294h */ case   10:  		/* mr R3, R31 */
		/* 821FA294h case   10:*/		regs.R3 = regs.R31;
		/* 821FA294h case   10:*/		return 0x821FA298;
		  /* 821FA298h */ case   11:  		/* ld R6, <#[R1 + 88]> */
		/* 821FA298h case   11:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 821FA298h case   11:*/		return 0x821FA29C;
		  /* 821FA29Ch */ case   12:  		/* ld R5, <#[R1 + 96]> */
		/* 821FA29Ch case   12:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000060) );
		/* 821FA29Ch case   12:*/		return 0x821FA2A0;
		  /* 821FA2A0h */ case   13:  		/* bl -23872 */
		/* 821FA2A0h case   13:*/		regs.LR = 0x821FA2A4; return 0x821F4560;
		/* 821FA2A0h case   13:*/		return 0x821FA2A4;
		  /* 821FA2A4h */ case   14:  		/* mr R30, R3 */
		/* 821FA2A4h case   14:*/		regs.R30 = regs.R3;
		/* 821FA2A4h case   14:*/		return 0x821FA2A8;
		  /* 821FA2A8h */ case   15:  		/* mr R4, R27 */
		/* 821FA2A8h case   15:*/		regs.R4 = regs.R27;
		/* 821FA2A8h case   15:*/		return 0x821FA2AC;
		  /* 821FA2ACh */ case   16:  		/* mr R3, R31 */
		/* 821FA2ACh case   16:*/		regs.R3 = regs.R31;
		/* 821FA2ACh case   16:*/		return 0x821FA2B0;
		  /* 821FA2B0h */ case   17:  		/* bl -28984 */
		/* 821FA2B0h case   17:*/		regs.LR = 0x821FA2B4; return 0x821F3178;
		/* 821FA2B0h case   17:*/		return 0x821FA2B4;
		  /* 821FA2B4h */ case   18:  		/* mr R29, R3 */
		/* 821FA2B4h case   18:*/		regs.R29 = regs.R3;
		/* 821FA2B4h case   18:*/		return 0x821FA2B8;
		  /* 821FA2B8h */ case   19:  		/* li R7, 228 */
		/* 821FA2B8h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FA2B8h case   19:*/		return 0x821FA2BC;
		  /* 821FA2BCh */ case   20:  		/* li R6, 4 */
		/* 821FA2BCh case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FA2BCh case   20:*/		return 0x821FA2C0;
		  /* 821FA2C0h */ case   21:  		/* mr R3, R31 */
		/* 821FA2C0h case   21:*/		regs.R3 = regs.R31;
		/* 821FA2C0h case   21:*/		return 0x821FA2C4;
		  /* 821FA2C4h */ case   22:  		/* mr R4, R29 */
		/* 821FA2C4h case   22:*/		regs.R4 = regs.R29;
		/* 821FA2C4h case   22:*/		return 0x821FA2C8;
		  /* 821FA2C8h */ case   23:  		/* lwz R11, <#[R29 + 8]> */
		/* 821FA2C8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821FA2C8h case   23:*/		return 0x821FA2CC;
		  /* 821FA2CCh */ case   24:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FA2CCh case   24:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FA2CCh case   24:*/		return 0x821FA2D0;
		  /* 821FA2D0h */ case   25:  		/* bl 163696 */
		/* 821FA2D0h case   25:*/		regs.LR = 0x821FA2D4; return 0x82222240;
		/* 821FA2D0h case   25:*/		return 0x821FA2D4;
		  /* 821FA2D4h */ case   26:  		/* mr R5, R3 */
		/* 821FA2D4h case   26:*/		regs.R5 = regs.R3;
		/* 821FA2D4h case   26:*/		return 0x821FA2D8;
		  /* 821FA2D8h */ case   27:  		/* mr R4, R27 */
		/* 821FA2D8h case   27:*/		regs.R4 = regs.R27;
		/* 821FA2D8h case   27:*/		return 0x821FA2DC;
		  /* 821FA2DCh */ case   28:  		/* mr R3, R31 */
		/* 821FA2DCh case   28:*/		regs.R3 = regs.R31;
		/* 821FA2DCh case   28:*/		return 0x821FA2E0;
		  /* 821FA2E0h */ case   29:  		/* bl -29256 */
		/* 821FA2E0h case   29:*/		regs.LR = 0x821FA2E4; return 0x821F3098;
		/* 821FA2E0h case   29:*/		return 0x821FA2E4;
		  /* 821FA2E4h */ case   30:  		/* lwz R11, <#[R29 + 8]> */
		/* 821FA2E4h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821FA2E4h case   30:*/		return 0x821FA2E8;
		  /* 821FA2E8h */ case   31:  		/* mr R19, R3 */
		/* 821FA2E8h case   31:*/		regs.R19 = regs.R3;
		/* 821FA2E8h case   31:*/		return 0x821FA2EC;
		  /* 821FA2ECh */ case   32:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FA2ECh case   32:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FA2ECh case   32:*/		return 0x821FA2F0;
		  /* 821FA2F0h */ case   33:  		/* li R7, 228 */
		/* 821FA2F0h case   33:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FA2F0h case   33:*/		return 0x821FA2F4;
		  /* 821FA2F4h */ case   34:  		/* li R6, 4 */
		/* 821FA2F4h case   34:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FA2F4h case   34:*/		return 0x821FA2F8;
		  /* 821FA2F8h */ case   35:  		/* mr R4, R29 */
		/* 821FA2F8h case   35:*/		regs.R4 = regs.R29;
		/* 821FA2F8h case   35:*/		return 0x821FA2FC;
		  /* 821FA2FCh */ case   36:  		/* mr R3, R31 */
		/* 821FA2FCh case   36:*/		regs.R3 = regs.R31;
		/* 821FA2FCh case   36:*/		return 0x821FA300;
		  /* 821FA300h */ case   37:  		/* bl 163648 */
		/* 821FA300h case   37:*/		regs.LR = 0x821FA304; return 0x82222240;
		/* 821FA300h case   37:*/		return 0x821FA304;
		  /* 821FA304h */ case   38:  		/* mr R4, R3 */
		/* 821FA304h case   38:*/		regs.R4 = regs.R3;
		/* 821FA304h case   38:*/		return 0x821FA308;
		  /* 821FA308h */ case   39:  		/* mr R3, R31 */
		/* 821FA308h case   39:*/		regs.R3 = regs.R31;
		/* 821FA308h case   39:*/		return 0x821FA30C;
		  /* 821FA30Ch */ case   40:  		/* ld R6, <#[R1 + 88]> */
		/* 821FA30Ch case   40:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 821FA30Ch case   40:*/		return 0x821FA310;
		  /* 821FA310h */ case   41:  		/* ld R5, <#[R1 + 96]> */
		/* 821FA310h case   41:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000060) );
		/* 821FA310h case   41:*/		return 0x821FA314;
		  /* 821FA314h */ case   42:  		/* bl -24484 */
		/* 821FA314h case   42:*/		regs.LR = 0x821FA318; return 0x821F4370;
		/* 821FA314h case   42:*/		return 0x821FA318;
	}
	return 0x821FA318;
} // Block from 821FA26Ch-821FA318h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821FA318h
// Function '?ExportVariable@Compiler@D3DXShader@@AAAXPAVResultStack@2@IPAVCNode@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA318);
		  /* 821FA318h */ case    0:  		/* mr R5, R3 */
		/* 821FA318h case    0:*/		regs.R5 = regs.R3;
		/* 821FA318h case    0:*/		return 0x821FA31C;
		  /* 821FA31Ch */ case    1:  		/* mr R4, R30 */
		/* 821FA31Ch case    1:*/		regs.R4 = regs.R30;
		/* 821FA31Ch case    1:*/		return 0x821FA320;
		  /* 821FA320h */ case    2:  		/* mr R3, R31 */
		/* 821FA320h case    2:*/		regs.R3 = regs.R31;
		/* 821FA320h case    2:*/		return 0x821FA324;
		  /* 821FA324h */ case    3:  		/* bl -40444 */
		/* 821FA324h case    3:*/		regs.LR = 0x821FA328; return 0x821F0528;
		/* 821FA324h case    3:*/		return 0x821FA328;
		  /* 821FA328h */ case    4:  		/* mr R5, R3 */
		/* 821FA328h case    4:*/		regs.R5 = regs.R3;
		/* 821FA328h case    4:*/		return 0x821FA32C;
		  /* 821FA32Ch */ case    5:  		/* mr R4, R19 */
		/* 821FA32Ch case    5:*/		regs.R4 = regs.R19;
		/* 821FA32Ch case    5:*/		return 0x821FA330;
		  /* 821FA330h */ case    6:  		/* mr R3, R31 */
		/* 821FA330h case    6:*/		regs.R3 = regs.R31;
		/* 821FA330h case    6:*/		return 0x821FA334;
		  /* 821FA334h */ case    7:  		/* bl -40668 */
		/* 821FA334h case    7:*/		regs.LR = 0x821FA338; return 0x821F0458;
		/* 821FA334h case    7:*/		return 0x821FA338;
		  /* 821FA338h */ case    8:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FA338h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FA338h case    8:*/		return 0x821FA33C;
		  /* 821FA33Ch */ case    9:  		/* mr R29, R3 */
		/* 821FA33Ch case    9:*/		regs.R29 = regs.R3;
		/* 821FA33Ch case    9:*/		return 0x821FA340;
		  /* 821FA340h */ case   10:  		/* addi R5, R4, 24 */
		/* 821FA340h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FA340h case   10:*/		return 0x821FA344;
		  /* 821FA344h */ case   11:  		/* li R8, 1 */
		/* 821FA344h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FA344h case   11:*/		return 0x821FA348;
		  /* 821FA348h */ case   12:  		/* li R7, 1 */
		/* 821FA348h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FA348h case   12:*/		return 0x821FA34C;
		  /* 821FA34Ch */ case   13:  		/* li R6, 103 */
		/* 821FA34Ch case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 821FA34Ch case   13:*/		return 0x821FA350;
		  /* 821FA350h */ case   14:  		/* mr R3, R31 */
		/* 821FA350h case   14:*/		regs.R3 = regs.R31;
		/* 821FA350h case   14:*/		return 0x821FA354;
		  /* 821FA354h */ case   15:  		/* bl 173636 */
		/* 821FA354h case   15:*/		regs.LR = 0x821FA358; return 0x82224998;
		/* 821FA354h case   15:*/		return 0x821FA358;
		  /* 821FA358h */ case   16:  		/* mr R30, R3 */
		/* 821FA358h case   16:*/		regs.R30 = regs.R3;
		/* 821FA358h case   16:*/		return 0x821FA35C;
		  /* 821FA35Ch */ case   17:  		/* li R6, 0 */
		/* 821FA35Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FA35Ch case   17:*/		return 0x821FA360;
		  /* 821FA360h */ case   18:  		/* li R4, 103 */
		/* 821FA360h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x67);
		/* 821FA360h case   18:*/		return 0x821FA364;
		  /* 821FA364h */ case   19:  		/* mr R3, R31 */
		/* 821FA364h case   19:*/		regs.R3 = regs.R31;
		/* 821FA364h case   19:*/		return 0x821FA368;
		  /* 821FA368h */ case   20:  		/* rlwinm R28, R28, 0, 24, 31 */
		/* 821FA368h case   20:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R28,regs.R28);
		/* 821FA368h case   20:*/		return 0x821FA36C;
		  /* 821FA36Ch */ case   21:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FA36Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FA36Ch case   21:*/		return 0x821FA370;
		  /* 821FA370h */ case   22:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821FA370h case   22:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821FA370h case   22:*/		return 0x821FA374;
		  /* 821FA374h */ case   23:  		/* bl -614212 */
		/* 821FA374h case   23:*/		regs.LR = 0x821FA378; return 0x82164430;
		/* 821FA374h case   23:*/		return 0x821FA378;
		  /* 821FA378h */ case   24:  		/* cntlzw R11, R28 */
		/* 821FA378h case   24:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R28);
		/* 821FA378h case   24:*/		return 0x821FA37C;
		  /* 821FA37Ch */ case   25:  		/* addi R10, R30, -4 */
		/* 821FA37Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFC);
		/* 821FA37Ch case   25:*/		return 0x821FA380;
		  /* 821FA380h */ case   26:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821FA380h case   26:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821FA380h case   26:*/		return 0x821FA384;
		  /* 821FA384h */ case   27:  		/* mr R4, R29 */
		/* 821FA384h case   27:*/		regs.R4 = regs.R29;
		/* 821FA384h case   27:*/		return 0x821FA388;
		  /* 821FA388h */ case   28:  		/* addi R11, R11, 4 */
		/* 821FA388h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821FA388h case   28:*/		return 0x821FA38C;
		  /* 821FA38Ch */ case   29:  		/* stwx R11, <#[R3 + R10]> */
		/* 821FA38Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821FA38Ch case   29:*/		return 0x821FA390;
		  /* 821FA390h */ case   30:  		/* mr R3, R31 */
		/* 821FA390h case   30:*/		regs.R3 = regs.R31;
		/* 821FA390h case   30:*/		return 0x821FA394;
		  /* 821FA394h */ case   31:  		/* bl -533396 */
		/* 821FA394h case   31:*/		regs.LR = 0x821FA398; return 0x82178000;
		/* 821FA394h case   31:*/		return 0x821FA398;
		  /* 821FA398h */ case   32:  		/* mr R4, R3 */
		/* 821FA398h case   32:*/		regs.R4 = regs.R3;
		/* 821FA398h case   32:*/		return 0x821FA39C;
		  /* 821FA39Ch */ case   33:  		/* mr R3, R30 */
		/* 821FA39Ch case   33:*/		regs.R3 = regs.R30;
		/* 821FA39Ch case   33:*/		return 0x821FA3A0;
		  /* 821FA3A0h */ case   34:  		/* bl -532952 */
		/* 821FA3A0h case   34:*/		regs.LR = 0x821FA3A4; return 0x821781C8;
		/* 821FA3A0h case   34:*/		return 0x821FA3A4;
		  /* 821FA3A4h */ case   35:  		/* cmplwi CR6, R28, 0 */
		/* 821FA3A4h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FA3A4h case   35:*/		return 0x821FA3A8;
		  /* 821FA3A8h */ case   36:  		/* b 316 */
		/* 821FA3A8h case   36:*/		return 0x821FA4E4;
		/* 821FA3A8h case   36:*/		return 0x821FA3AC;
	}
	return 0x821FA3AC;
} // Block from 821FA318h-821FA3ACh (37 instructions)

//////////////////////////////////////////////////////
// Block at 821FA3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA3AC);
		  /* 821FA3ACh */ case    0:  		/* rlwinm R28, R28, 0, 24, 31 */
		/* 821FA3ACh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R28,regs.R28);
		/* 821FA3ACh case    0:*/		return 0x821FA3B0;
		  /* 821FA3B0h */ case    1:  		/* rlwinm R11, R29, 0, 24, 31 */
		/* 821FA3B0h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821FA3B0h case    1:*/		return 0x821FA3B4;
		  /* 821FA3B4h */ case    2:  		/* cmplw CR6, R28, R11 */
		/* 821FA3B4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821FA3B4h case    2:*/		return 0x821FA3B8;
		  /* 821FA3B8h */ case    3:  		/* bc 12, CR6_EQ, 644 */
		/* 821FA3B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FA63C;  }
		/* 821FA3B8h case    3:*/		return 0x821FA3BC;
		  /* 821FA3BCh */ case    4:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FA3BCh case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FA3BCh case    4:*/		return 0x821FA3C0;
		  /* 821FA3C0h */ case    5:  		/* li R8, 1 */
		/* 821FA3C0h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FA3C0h case    5:*/		return 0x821FA3C4;
		  /* 821FA3C4h */ case    6:  		/* li R7, 1 */
		/* 821FA3C4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FA3C4h case    6:*/		return 0x821FA3C8;
		  /* 821FA3C8h */ case    7:  		/* addi R5, R4, 24 */
		/* 821FA3C8h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FA3C8h case    7:*/		return 0x821FA3CC;
		  /* 821FA3CCh */ case    8:  		/* li R6, 103 */
		/* 821FA3CCh case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 821FA3CCh case    8:*/		return 0x821FA3D0;
		  /* 821FA3D0h */ case    9:  		/* mr R3, R31 */
		/* 821FA3D0h case    9:*/		regs.R3 = regs.R31;
		/* 821FA3D0h case    9:*/		return 0x821FA3D4;
		  /* 821FA3D4h */ case   10:  		/* bl 173508 */
		/* 821FA3D4h case   10:*/		regs.LR = 0x821FA3D8; return 0x82224998;
		/* 821FA3D4h case   10:*/		return 0x821FA3D8;
		  /* 821FA3D8h */ case   11:  		/* mr R30, R3 */
		/* 821FA3D8h case   11:*/		regs.R30 = regs.R3;
		/* 821FA3D8h case   11:*/		return 0x821FA3DC;
		  /* 821FA3DCh */ case   12:  		/* li R6, 0 */
		/* 821FA3DCh case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FA3DCh case   12:*/		return 0x821FA3E0;
		  /* 821FA3E0h */ case   13:  		/* li R4, 103 */
		/* 821FA3E0h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x67);
		/* 821FA3E0h case   13:*/		return 0x821FA3E4;
		  /* 821FA3E4h */ case   14:  		/* mr R3, R31 */
		/* 821FA3E4h case   14:*/		regs.R3 = regs.R31;
		/* 821FA3E4h case   14:*/		return 0x821FA3E8;
		  /* 821FA3E8h */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FA3E8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FA3E8h case   15:*/		return 0x821FA3EC;
		  /* 821FA3ECh */ case   16:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821FA3ECh case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821FA3ECh case   16:*/		return 0x821FA3F0;
		  /* 821FA3F0h */ case   17:  		/* bl -614336 */
		/* 821FA3F0h case   17:*/		regs.LR = 0x821FA3F4; return 0x82164430;
		/* 821FA3F0h case   17:*/		return 0x821FA3F4;
		  /* 821FA3F4h */ case   18:  		/* cntlzw R11, R28 */
		/* 821FA3F4h case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R28);
		/* 821FA3F4h case   18:*/		return 0x821FA3F8;
		  /* 821FA3F8h */ case   19:  		/* addi R10, R30, -4 */
		/* 821FA3F8h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFC);
		/* 821FA3F8h case   19:*/		return 0x821FA3FC;
		  /* 821FA3FCh */ case   20:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821FA3FCh case   20:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821FA3FCh case   20:*/		return 0x821FA400;
		  /* 821FA400h */ case   21:  		/* mr R4, R27 */
		/* 821FA400h case   21:*/		regs.R4 = regs.R27;
		/* 821FA400h case   21:*/		return 0x821FA404;
		  /* 821FA404h */ case   22:  		/* xori R11, R11, 1 */
		/* 821FA404h case   22:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FA404h case   22:*/		return 0x821FA408;
		  /* 821FA408h */ case   23:  		/* addi R11, R11, 2 */
		/* 821FA408h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FA408h case   23:*/		return 0x821FA40C;
		  /* 821FA40Ch */ case   24:  		/* stwx R11, <#[R3 + R10]> */
		/* 821FA40Ch case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821FA40Ch case   24:*/		return 0x821FA410;
		  /* 821FA410h */ case   25:  		/* mr R3, R31 */
		/* 821FA410h case   25:*/		regs.R3 = regs.R31;
		/* 821FA410h case   25:*/		return 0x821FA414;
		  /* 821FA414h */ case   26:  		/* bl -32916 */
		/* 821FA414h case   26:*/		regs.LR = 0x821FA418; return 0x821F2380;
		/* 821FA414h case   26:*/		return 0x821FA418;
		  /* 821FA418h */ case   27:  		/* b -128 */
		/* 821FA418h case   27:*/		return 0x821FA398;
		/* 821FA418h case   27:*/		return 0x821FA41C;
	}
	return 0x821FA41C;
} // Block from 821FA3ACh-821FA41Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821FA41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA41C);
		  /* 821FA41Ch */ case    0:  		/* addi R5, R1, 112 */
		/* 821FA41Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821FA41Ch case    0:*/		return 0x821FA420;
		  /* 821FA420h */ case    1:  		/* mr R4, R27 */
		/* 821FA420h case    1:*/		regs.R4 = regs.R27;
		/* 821FA420h case    1:*/		return 0x821FA424;
		  /* 821FA424h */ case    2:  		/* mr R3, R31 */
		/* 821FA424h case    2:*/		regs.R3 = regs.R31;
		/* 821FA424h case    2:*/		return 0x821FA428;
		  /* 821FA428h */ case    3:  		/* bl -54960 */
		/* 821FA428h case    3:*/		regs.LR = 0x821FA42C; return 0x821ECD78;
		/* 821FA428h case    3:*/		return 0x821FA42C;
		  /* 821FA42Ch */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FA42Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FA42Ch case    4:*/		return 0x821FA430;
		  /* 821FA430h */ case    5:  		/* bc 12, CR0_EQ, 68 */
		/* 821FA430h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FA474;  }
		/* 821FA430h case    5:*/		return 0x821FA434;
		  /* 821FA434h */ case    6:  		/* lfd FR0, <#[R1 + 112]> */
		/* 821FA434h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000070) );
		/* 821FA434h case    6:*/		return 0x821FA438;
		  /* 821FA438h */ case    7:  		/* frsp FR1, FR0 */
		/* 821FA438h case    7:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 821FA438h case    7:*/		return 0x821FA43C;
		  /* 821FA43Ch */ case    8:  		/* fcmpu CR6, FR1, FR0 */
		/* 821FA43Ch case    8:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821FA43Ch case    8:*/		return 0x821FA440;
		  /* 821FA440h */ case    9:  		/* bc 4, CR6_EQ, 52 */
		/* 821FA440h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821FA474;  }
		/* 821FA440h case    9:*/		return 0x821FA444;
		  /* 821FA444h */ case   10:  		/* li R5, 1 */
		/* 821FA444h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FA444h case   10:*/		return 0x821FA448;
		  /* 821FA448h */ case   11:  		/* fmr FR4, FR31 */
		/* 821FA448h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FA448h case   11:*/		return 0x821FA44C;
		  /* 821FA44Ch */ case   12:  		/* mr R4, R31 */
		/* 821FA44Ch case   12:*/		regs.R4 = regs.R31;
		/* 821FA44Ch case   12:*/		return 0x821FA450;
		  /* 821FA450h */ case   13:  		/* fmr FR3, FR31 */
		/* 821FA450h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FA450h case   13:*/		return 0x821FA454;
		  /* 821FA454h */ case   14:  		/* addi R3, R1, 152 */
		/* 821FA454h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x98);
		/* 821FA454h case   14:*/		return 0x821FA458;
		  /* 821FA458h */ case   15:  		/* fmr FR2, FR31 */
		/* 821FA458h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FA458h case   15:*/		return 0x821FA45C;
		  /* 821FA45Ch */ case   16:  		/* bl 182772 */
		/* 821FA45Ch case   16:*/		regs.LR = 0x821FA460; return 0x82226E50;
		/* 821FA45Ch case   16:*/		return 0x821FA460;
	}
	return 0x821FA460;
} // Block from 821FA41Ch-821FA460h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821FA460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA460);
		  /* 821FA460h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821FA460h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FA460h case    0:*/		return 0x821FA464;
		  /* 821FA464h */ case    1:  		/* stw R11, <#[R27]> */
		/* 821FA464h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821FA464h case    1:*/		return 0x821FA468;
		  /* 821FA468h */ case    2:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FA468h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FA468h case    2:*/		return 0x821FA46C;
		  /* 821FA46Ch */ case    3:  		/* stw R11, <#[R27 + 4]> */
		/* 821FA46Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821FA46Ch case    3:*/		return 0x821FA470;
		  /* 821FA470h */ case    4:  		/* b 460 */
		/* 821FA470h case    4:*/		return 0x821FA63C;
		/* 821FA470h case    4:*/		return 0x821FA474;
	}
	return 0x821FA474;
} // Block from 821FA460h-821FA474h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FA474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA474);
		  /* 821FA474h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821FA474h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821FA474h case    0:*/		return 0x821FA478;
		  /* 821FA478h */ case    1:  		/* bc 12, CR0_EQ, 452 */
		/* 821FA478h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FA63C;  }
		/* 821FA478h case    1:*/		return 0x821FA47C;
		  /* 821FA47Ch */ case    2:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FA47Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FA47Ch case    2:*/		return 0x821FA480;
		  /* 821FA480h */ case    3:  		/* li R8, 1 */
		/* 821FA480h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FA480h case    3:*/		return 0x821FA484;
		  /* 821FA484h */ case    4:  		/* li R7, 1 */
		/* 821FA484h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FA484h case    4:*/		return 0x821FA488;
		  /* 821FA488h */ case    5:  		/* addi R5, R4, 24 */
		/* 821FA488h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FA488h case    5:*/		return 0x821FA48C;
		  /* 821FA48Ch */ case    6:  		/* li R6, 103 */
		/* 821FA48Ch case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 821FA48Ch case    6:*/		return 0x821FA490;
		  /* 821FA490h */ case    7:  		/* mr R3, R31 */
		/* 821FA490h case    7:*/		regs.R3 = regs.R31;
		/* 821FA490h case    7:*/		return 0x821FA494;
		  /* 821FA494h */ case    8:  		/* bl 173316 */
		/* 821FA494h case    8:*/		regs.LR = 0x821FA498; return 0x82224998;
		/* 821FA494h case    8:*/		return 0x821FA498;
		  /* 821FA498h */ case    9:  		/* mr R30, R3 */
		/* 821FA498h case    9:*/		regs.R30 = regs.R3;
		/* 821FA498h case    9:*/		return 0x821FA49C;
		  /* 821FA49Ch */ case   10:  		/* li R6, 0 */
		/* 821FA49Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FA49Ch case   10:*/		return 0x821FA4A0;
		  /* 821FA4A0h */ case   11:  		/* li R4, 103 */
		/* 821FA4A0h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x67);
		/* 821FA4A0h case   11:*/		return 0x821FA4A4;
		  /* 821FA4A4h */ case   12:  		/* mr R3, R31 */
		/* 821FA4A4h case   12:*/		regs.R3 = regs.R31;
		/* 821FA4A4h case   12:*/		return 0x821FA4A8;
		  /* 821FA4A8h */ case   13:  		/* rlwinm R29, R29, 0, 24, 31 */
		/* 821FA4A8h case   13:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R29,regs.R29);
		/* 821FA4A8h case   13:*/		return 0x821FA4AC;
		  /* 821FA4ACh */ case   14:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FA4ACh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FA4ACh case   14:*/		return 0x821FA4B0;
		  /* 821FA4B0h */ case   15:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821FA4B0h case   15:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821FA4B0h case   15:*/		return 0x821FA4B4;
		  /* 821FA4B4h */ case   16:  		/* bl -614532 */
		/* 821FA4B4h case   16:*/		regs.LR = 0x821FA4B8; return 0x82164430;
		/* 821FA4B4h case   16:*/		return 0x821FA4B8;
		  /* 821FA4B8h */ case   17:  		/* addi R11, R30, -4 */
		/* 821FA4B8h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 821FA4B8h case   17:*/		return 0x821FA4BC;
		  /* 821FA4BCh */ case   18:  		/* cntlzw R10, R29 */
		/* 821FA4BCh case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R29);
		/* 821FA4BCh case   18:*/		return 0x821FA4C0;
		  /* 821FA4C0h */ case   19:  		/* mr R4, R27 */
		/* 821FA4C0h case   19:*/		regs.R4 = regs.R27;
		/* 821FA4C0h case   19:*/		return 0x821FA4C4;
		  /* 821FA4C4h */ case   20:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 821FA4C4h case   20:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 821FA4C4h case   20:*/		return 0x821FA4C8;
		  /* 821FA4C8h */ case   21:  		/* stwx R10, <#[R3 + R11]> */
		/* 821FA4C8h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821FA4C8h case   21:*/		return 0x821FA4CC;
		  /* 821FA4CCh */ case   22:  		/* mr R3, R31 */
		/* 821FA4CCh case   22:*/		regs.R3 = regs.R31;
		/* 821FA4CCh case   22:*/		return 0x821FA4D0;
		  /* 821FA4D0h */ case   23:  		/* bl -33104 */
		/* 821FA4D0h case   23:*/		regs.LR = 0x821FA4D4; return 0x821F2380;
		/* 821FA4D0h case   23:*/		return 0x821FA4D4;
		  /* 821FA4D4h */ case   24:  		/* mr R4, R3 */
		/* 821FA4D4h case   24:*/		regs.R4 = regs.R3;
		/* 821FA4D4h case   24:*/		return 0x821FA4D8;
		  /* 821FA4D8h */ case   25:  		/* mr R3, R30 */
		/* 821FA4D8h case   25:*/		regs.R3 = regs.R30;
		/* 821FA4D8h case   25:*/		return 0x821FA4DC;
		  /* 821FA4DCh */ case   26:  		/* bl -533268 */
		/* 821FA4DCh case   26:*/		regs.LR = 0x821FA4E0; return 0x821781C8;
		/* 821FA4DCh case   26:*/		return 0x821FA4E0;
		  /* 821FA4E0h */ case   27:  		/* cmplwi CR6, R29, 0 */
		/* 821FA4E0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FA4E0h case   27:*/		return 0x821FA4E4;
	}
	return 0x821FA4E4;
} // Block from 821FA474h-821FA4E4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821FA4E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA4E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA4E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA4E4);
		  /* 821FA4E4h */ case    0:  		/* stw R3, <#[R30 + 44]> */
		/* 821FA4E4h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821FA4E4h case    0:*/		return 0x821FA4E8;
		  /* 821FA4E8h */ case    1:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FA4E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FA4E8h case    1:*/		return 0x821FA4EC;
		  /* 821FA4ECh */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821FA4ECh case    2:*/		if ( regs.CR[6].eq ) { return 0x821FA504;  }
		/* 821FA4ECh case    2:*/		return 0x821FA4F0;
		  /* 821FA4F0h */ case    3:  		/* andi. R10, R11, 17476 */
		/* 821FA4F0h case    3:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R11,0x4444);
		/* 821FA4F0h case    3:*/		return 0x821FA4F4;
		  /* 821FA4F4h */ case    4:  		/* cmplwi CR6, R10, 17476 */
		/* 821FA4F4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00004444);
		/* 821FA4F4h case    4:*/		return 0x821FA4F8;
		  /* 821FA4F8h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821FA4F8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FA518;  }
		/* 821FA4F8h case    5:*/		return 0x821FA4FC;
		  /* 821FA4FCh */ case    6:  		/* ori R11, R11, 17476 */
		/* 821FA4FCh case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4444);
		/* 821FA4FCh case    6:*/		return 0x821FA500;
		  /* 821FA500h */ case    7:  		/* b 20 */
		/* 821FA500h case    7:*/		return 0x821FA514;
		/* 821FA500h case    7:*/		return 0x821FA504;
	}
	return 0x821FA504;
} // Block from 821FA4E4h-821FA504h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FA504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA504);
		  /* 821FA504h */ case    0:  		/* andi. R10, R11, 26214 */
		/* 821FA504h case    0:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R11,0x6666);
		/* 821FA504h case    0:*/		return 0x821FA508;
		  /* 821FA508h */ case    1:  		/* cmplwi CR6, R10, 26214 */
		/* 821FA508h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00006666);
		/* 821FA508h case    1:*/		return 0x821FA50C;
		  /* 821FA50Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821FA50Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821FA518;  }
		/* 821FA50Ch case    2:*/		return 0x821FA510;
		  /* 821FA510h */ case    3:  		/* ori R11, R11, 26214 */
		/* 821FA510h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6666);
		/* 821FA510h case    3:*/		return 0x821FA514;
	}
	return 0x821FA514;
} // Block from 821FA504h-821FA514h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FA514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA514);
		  /* 821FA514h */ case    0:  		/* sth R11, <#[R30 + 14]> */
		/* 821FA514h case    0:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 821FA514h case    0:*/		return 0x821FA518;
	}
	return 0x821FA518;
} // Block from 821FA514h-821FA518h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FA518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA518);
		  /* 821FA518h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 821FA518h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821FA518h case    0:*/		return 0x821FA51C;
		  /* 821FA51Ch */ case    1:  		/* stw R30, <#[R27]> */
		/* 821FA51Ch case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 821FA51Ch case    1:*/		return 0x821FA520;
		  /* 821FA520h */ case    2:  		/* rlwimi R11, R21, 0, 16, 14 */
		/* 821FA520h case    2:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R21);
		/* 821FA520h case    2:*/		return 0x821FA524;
		  /* 821FA524h */ case    3:  		/* stw R11, <#[R27 + 4]> */
		/* 821FA524h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821FA524h case    3:*/		return 0x821FA528;
		  /* 821FA528h */ case    4:  		/* lwz R11, <#[R31 + 44]> */
		/* 821FA528h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821FA528h case    4:*/		return 0x821FA52C;
		  /* 821FA52Ch */ case    5:  		/* ori R11, R11, 1024 */
		/* 821FA52Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821FA52Ch case    5:*/		return 0x821FA530;
		  /* 821FA530h */ case    6:  		/* stw R11, <#[R31 + 44]> */
		/* 821FA530h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821FA530h case    6:*/		return 0x821FA534;
		  /* 821FA534h */ case    7:  		/* b 264 */
		/* 821FA534h case    7:*/		return 0x821FA63C;
		/* 821FA534h case    7:*/		return 0x821FA538;
	}
	return 0x821FA538;
} // Block from 821FA518h-821FA538h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FA538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA538);
		  /* 821FA538h */ case    0:  		/* mr R4, R24 */
		/* 821FA538h case    0:*/		regs.R4 = regs.R24;
		/* 821FA538h case    0:*/		return 0x821FA53C;
		  /* 821FA53Ch */ case    1:  		/* addi R3, R1, 184 */
		/* 821FA53Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 821FA53Ch case    1:*/		return 0x821FA540;
		  /* 821FA540h */ case    2:  		/* bl -370448 */
		/* 821FA540h case    2:*/		regs.LR = 0x821FA544; return 0x8219FE30;
		/* 821FA540h case    2:*/		return 0x821FA544;
		  /* 821FA544h */ case    3:  		/* mr R4, R26 */
		/* 821FA544h case    3:*/		regs.R4 = regs.R26;
		/* 821FA544h case    3:*/		return 0x821FA548;
		  /* 821FA548h */ case    4:  		/* addi R3, R1, 184 */
		/* 821FA548h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 821FA548h case    4:*/		return 0x821FA54C;
		  /* 821FA54Ch */ case    5:  		/* bl -35804 */
		/* 821FA54Ch case    5:*/		regs.LR = 0x821FA550; return 0x821F1970;
		/* 821FA54Ch case    5:*/		return 0x821FA550;
		  /* 821FA550h */ case    6:  		/* mr R4, R25 */
		/* 821FA550h case    6:*/		regs.R4 = regs.R25;
		/* 821FA550h case    6:*/		return 0x821FA554;
		  /* 821FA554h */ case    7:  		/* addi R3, R1, 184 */
		/* 821FA554h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 821FA554h case    7:*/		return 0x821FA558;
		  /* 821FA558h */ case    8:  		/* lwz R30, <#[R1 + 188]> */
		/* 821FA558h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000BC) );
		/* 821FA558h case    8:*/		return 0x821FA55C;
		  /* 821FA55Ch */ case    9:  		/* lwz R29, <#[R1 + 192]> */
		/* 821FA55Ch case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000C0) );
		/* 821FA55Ch case    9:*/		return 0x821FA560;
		  /* 821FA560h */ case   10:  		/* bl -51048 */
		/* 821FA560h case   10:*/		regs.LR = 0x821FA564; return 0x821EDDF8;
		/* 821FA560h case   10:*/		return 0x821FA564;
		  /* 821FA564h */ case   11:  		/* lwz R10, <#[R1 + 192]> */
		/* 821FA564h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 821FA564h case   11:*/		return 0x821FA568;
		  /* 821FA568h */ case   12:  		/* addi R5, R1, 120 */
		/* 821FA568h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 821FA568h case   12:*/		return 0x821FA56C;
		  /* 821FA56Ch */ case   13:  		/* lwz R11, <#[R1 + 188]> */
		/* 821FA56Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000BC) );
		/* 821FA56Ch case   13:*/		return 0x821FA570;
		  /* 821FA570h */ case   14:  		/* mr R3, R31 */
		/* 821FA570h case   14:*/		regs.R3 = regs.R31;
		/* 821FA570h case   14:*/		return 0x821FA574;
		  /* 821FA574h */ case   15:  		/* addi R10, R10, 2 */
		/* 821FA574h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821FA574h case   15:*/		return 0x821FA578;
		  /* 821FA578h */ case   16:  		/* stw R30, <#[R1 + 188]> */
		/* 821FA578h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000BC) );
		/* 821FA578h case   16:*/		return 0x821FA57C;
		  /* 821FA57Ch */ case   17:  		/* stw R29, <#[R1 + 192]> */
		/* 821FA57Ch case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000C0) );
		/* 821FA57Ch case   17:*/		return 0x821FA580;
		  /* 821FA580h */ case   18:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821FA580h case   18:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821FA580h case   18:*/		return 0x821FA584;
		  /* 821FA584h */ case   19:  		/* add R30, R10, R11 */
		/* 821FA584h case   19:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 821FA584h case   19:*/		return 0x821FA588;
		  /* 821FA588h */ case   20:  		/* mr R4, R30 */
		/* 821FA588h case   20:*/		regs.R4 = regs.R30;
		/* 821FA588h case   20:*/		return 0x821FA58C;
		  /* 821FA58Ch */ case   21:  		/* bl -55316 */
		/* 821FA58Ch case   21:*/		regs.LR = 0x821FA590; return 0x821ECD78;
		/* 821FA58Ch case   21:*/		return 0x821FA590;
		  /* 821FA590h */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FA590h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FA590h case   22:*/		return 0x821FA594;
		  /* 821FA594h */ case   23:  		/* bc 12, CR0_EQ, 80 */
		/* 821FA594h case   23:*/		if ( regs.CR[0].eq ) { return 0x821FA5E4;  }
		/* 821FA594h case   23:*/		return 0x821FA598;
		  /* 821FA598h */ case   24:  		/* lfd FR0, <#[R1 + 120]> */
		/* 821FA598h case   24:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000078) );
		/* 821FA598h case   24:*/		return 0x821FA59C;
		  /* 821FA59Ch */ case   25:  		/* fcmpu CR6, FR0, FR30 */
		/* 821FA59Ch case   25:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR30);
		/* 821FA59Ch case   25:*/		return 0x821FA5A0;
		  /* 821FA5A0h */ case   26:  		/* bc 12, CR6_EQ, 12 */
		/* 821FA5A0h case   26:*/		if ( regs.CR[6].eq ) { return 0x821FA5AC;  }
		/* 821FA5A0h case   26:*/		return 0x821FA5A4;
		  /* 821FA5A4h */ case   27:  		/* fmr FR1, FR29 */
		/* 821FA5A4h case   27:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821FA5A4h case   27:*/		return 0x821FA5A8;
		  /* 821FA5A8h */ case   28:  		/* b 8 */
		/* 821FA5A8h case   28:*/		return 0x821FA5B0;
		/* 821FA5A8h case   28:*/		return 0x821FA5AC;
	}
	return 0x821FA5AC;
} // Block from 821FA538h-821FA5ACh (29 instructions)

//////////////////////////////////////////////////////
// Block at 821FA5ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA5AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA5AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA5AC);
		  /* 821FA5ACh */ case    0:  		/* fmr FR1, FR31 */
		/* 821FA5ACh case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821FA5ACh case    0:*/		return 0x821FA5B0;
	}
	return 0x821FA5B0;
} // Block from 821FA5ACh-821FA5B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FA5B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA5B0);
		  /* 821FA5B0h */ case    0:  		/* fcmpu CR6, FR0, FR1 */
		/* 821FA5B0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821FA5B0h case    0:*/		return 0x821FA5B4;
		  /* 821FA5B4h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 821FA5B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FA63C;  }
		/* 821FA5B4h case    1:*/		return 0x821FA5B8;
		  /* 821FA5B8h */ case    2:  		/* li R5, 1 */
		/* 821FA5B8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FA5B8h case    2:*/		return 0x821FA5BC;
		  /* 821FA5BCh */ case    3:  		/* fmr FR4, FR31 */
		/* 821FA5BCh case    3:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FA5BCh case    3:*/		return 0x821FA5C0;
		  /* 821FA5C0h */ case    4:  		/* mr R4, R31 */
		/* 821FA5C0h case    4:*/		regs.R4 = regs.R31;
		/* 821FA5C0h case    4:*/		return 0x821FA5C4;
		  /* 821FA5C4h */ case    5:  		/* fmr FR3, FR31 */
		/* 821FA5C4h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FA5C4h case    5:*/		return 0x821FA5C8;
		  /* 821FA5C8h */ case    6:  		/* addi R3, R1, 160 */
		/* 821FA5C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 821FA5C8h case    6:*/		return 0x821FA5CC;
		  /* 821FA5CCh */ case    7:  		/* fmr FR2, FR31 */
		/* 821FA5CCh case    7:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FA5CCh case    7:*/		return 0x821FA5D0;
		  /* 821FA5D0h */ case    8:  		/* bl 182400 */
		/* 821FA5D0h case    8:*/		regs.LR = 0x821FA5D4; return 0x82226E50;
		/* 821FA5D0h case    8:*/		return 0x821FA5D4;
		  /* 821FA5D4h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 821FA5D4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FA5D4h case    9:*/		return 0x821FA5D8;
		  /* 821FA5D8h */ case   10:  		/* stw R11, <#[R30]> */
		/* 821FA5D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FA5D8h case   10:*/		return 0x821FA5DC;
		  /* 821FA5DCh */ case   11:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FA5DCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FA5DCh case   11:*/		return 0x821FA5E0;
		  /* 821FA5E0h */ case   12:  		/* b 88 */
		/* 821FA5E0h case   12:*/		return 0x821FA638;
		/* 821FA5E0h case   12:*/		return 0x821FA5E4;
	}
	return 0x821FA5E4;
} // Block from 821FA5B0h-821FA5E4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FA5E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA5E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA5E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA5E4);
		  /* 821FA5E4h */ case    0:  		/* mr R4, R30 */
		/* 821FA5E4h case    0:*/		regs.R4 = regs.R30;
		/* 821FA5E4h case    0:*/		return 0x821FA5E8;
		  /* 821FA5E8h */ case    1:  		/* mr R3, R31 */
		/* 821FA5E8h case    1:*/		regs.R3 = regs.R31;
		/* 821FA5E8h case    1:*/		return 0x821FA5EC;
		  /* 821FA5ECh */ case    2:  		/* bl -33388 */
		/* 821FA5ECh case    2:*/		regs.LR = 0x821FA5F0; return 0x821F2380;
		/* 821FA5ECh case    2:*/		return 0x821FA5F0;
		  /* 821FA5F0h */ case    3:  		/* li R4, 2 */
		/* 821FA5F0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FA5F0h case    3:*/		return 0x821FA5F4;
		  /* 821FA5F4h */ case    4:  		/* mr R29, R3 */
		/* 821FA5F4h case    4:*/		regs.R29 = regs.R3;
		/* 821FA5F4h case    4:*/		return 0x821FA5F8;
		  /* 821FA5F8h */ case    5:  		/* bl -535352 */
		/* 821FA5F8h case    5:*/		regs.LR = 0x821FA5FC; return 0x82177AC0;
		/* 821FA5F8h case    5:*/		return 0x821FA5FC;
		  /* 821FA5FCh */ case    6:  		/* li R5, 1 */
		/* 821FA5FCh case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FA5FCh case    6:*/		return 0x821FA600;
		  /* 821FA600h */ case    7:  		/* mr R4, R31 */
		/* 821FA600h case    7:*/		regs.R4 = regs.R31;
		/* 821FA600h case    7:*/		return 0x821FA604;
		  /* 821FA604h */ case    8:  		/* fmr FR4, FR31 */
		/* 821FA604h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FA604h case    8:*/		return 0x821FA608;
		  /* 821FA608h */ case    9:  		/* addi R3, R1, 128 */
		/* 821FA608h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821FA608h case    9:*/		return 0x821FA60C;
		  /* 821FA60Ch */ case   10:  		/* fmr FR3, FR31 */
		/* 821FA60Ch case   10:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FA60Ch case   10:*/		return 0x821FA610;
		  /* 821FA610h */ case   11:  		/* fmr FR2, FR31 */
		/* 821FA610h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FA610h case   11:*/		return 0x821FA614;
		  /* 821FA614h */ case   12:  		/* fmr FR1, FR31 */
		/* 821FA614h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821FA614h case   12:*/		return 0x821FA618;
		  /* 821FA618h */ case   13:  		/* bl 182328 */
		/* 821FA618h case   13:*/		regs.LR = 0x821FA61C; return 0x82226E50;
		/* 821FA618h case   13:*/		return 0x821FA61C;
		  /* 821FA61Ch */ case   14:  		/* mr R4, R29 */
		/* 821FA61Ch case   14:*/		regs.R4 = regs.R29;
		/* 821FA61Ch case   14:*/		return 0x821FA620;
		  /* 821FA620h */ case   15:  		/* ld R5, <#[R1 + 128]> */
		/* 821FA620h case   15:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 821FA620h case   15:*/		return 0x821FA624;
		  /* 821FA624h */ case   16:  		/* mr R3, R31 */
		/* 821FA624h case   16:*/		regs.R3 = regs.R31;
		/* 821FA624h case   16:*/		return 0x821FA628;
		  /* 821FA628h */ case   17:  		/* bl -27840 */
		/* 821FA628h case   17:*/		regs.LR = 0x821FA62C; return 0x821F3968;
		/* 821FA628h case   17:*/		return 0x821FA62C;
		  /* 821FA62Ch */ case   18:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FA62Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FA62Ch case   18:*/		return 0x821FA630;
		  /* 821FA630h */ case   19:  		/* stw R3, <#[R30]> */
		/* 821FA630h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FA630h case   19:*/		return 0x821FA634;
		  /* 821FA634h */ case   20:  		/* rlwimi R11, R21, 0, 16, 14 */
		/* 821FA634h case   20:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R21);
		/* 821FA634h case   20:*/		return 0x821FA638;
	}
	return 0x821FA638;
} // Block from 821FA5E4h-821FA638h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821FA638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA638);
		  /* 821FA638h */ case    0:  		/* stw R11, <#[R30 + 4]> */
		/* 821FA638h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FA638h case    0:*/		return 0x821FA63C;
	}
	return 0x821FA63C;
} // Block from 821FA638h-821FA63Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FA63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA63C);
		  /* 821FA63Ch */ case    0:  		/* addi R25, R25, 1 */
		/* 821FA63Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821FA63Ch case    0:*/		return 0x821FA640;
		  /* 821FA640h */ case    1:  		/* cmplw CR6, R25, R26 */
		/* 821FA640h case    1:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R26);
		/* 821FA640h case    1:*/		return 0x821FA644;
		  /* 821FA644h */ case    2:  		/* bc 12, CR6_LT, -1696 */
		/* 821FA644h case    2:*/		if ( regs.CR[6].lt ) { return 0x821F9FA4;  }
		/* 821FA644h case    2:*/		return 0x821FA648;
	}
	return 0x821FA648;
} // Block from 821FA63Ch-821FA648h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FA648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA648);
		  /* 821FA648h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821FA648h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821FA648h case    0:*/		return 0x821FA64C;
		  /* 821FA64Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FA64Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FA64Ch case    1:*/		return 0x821FA650;
		  /* 821FA650h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 821FA650h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FA668;  }
		/* 821FA650h case    2:*/		return 0x821FA654;
		  /* 821FA654h */ case    3:  		/* mr R3, R20 */
		/* 821FA654h case    3:*/		regs.R3 = regs.R20;
		/* 821FA654h case    3:*/		return 0x821FA658;
		  /* 821FA658h */ case    4:  		/* bl -12976 */
		/* 821FA658h case    4:*/		regs.LR = 0x821FA65C; return 0x821F73A8;
		/* 821FA658h case    4:*/		return 0x821FA65C;
		  /* 821FA65Ch */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FA65Ch case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FA65Ch case    5:*/		return 0x821FA660;
		  /* 821FA660h */ case    6:  		/* mr R11, R21 */
		/* 821FA660h case    6:*/		regs.R11 = regs.R21;
		/* 821FA660h case    6:*/		return 0x821FA664;
		  /* 821FA664h */ case    7:  		/* bc 12, CR0_EQ, 8 */
		/* 821FA664h case    7:*/		if ( regs.CR[0].eq ) { return 0x821FA66C;  }
		/* 821FA664h case    7:*/		return 0x821FA668;
	}
	return 0x821FA668;
} // Block from 821FA648h-821FA668h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FA668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA668);
		  /* 821FA668h */ case    0:  		/* li R11, 0 */
		/* 821FA668h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FA668h case    0:*/		return 0x821FA66C;
	}
	return 0x821FA66C;
} // Block from 821FA668h-821FA66Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FA66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA66C);
		  /* 821FA66Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FA66Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FA66Ch case    0:*/		return 0x821FA670;
		  /* 821FA670h */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 821FA670h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821FA68C;  }
		/* 821FA670h case    1:*/		return 0x821FA674;
		  /* 821FA674h */ case    2:  		/* li R4, 4801 */
		/* 821FA674h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FA674h case    2:*/		return 0x821FA678;
		  /* 821FA678h */ case    3:  		/* mr R3, R31 */
		/* 821FA678h case    3:*/		regs.R3 = regs.R31;
		/* 821FA678h case    3:*/		return 0x821FA67C;
		  /* 821FA67Ch */ case    4:  		/* bl -690196 */
		/* 821FA67Ch case    4:*/		regs.LR = 0x821FA680; return 0x82151E68;
		/* 821FA67Ch case    4:*/		return 0x821FA680;
	}
	return 0x821FA680;
} // Block from 821FA66Ch-821FA680h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FA680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA680);
		  /* 821FA680h */ case    0:  		/* li R4, 4801 */
		/* 821FA680h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FA680h case    0:*/		return 0x821FA684;
		  /* 821FA684h */ case    1:  		/* mr R3, R31 */
		/* 821FA684h case    1:*/		regs.R3 = regs.R31;
		/* 821FA684h case    1:*/		return 0x821FA688;
		  /* 821FA688h */ case    2:  		/* bl -690208 */
		/* 821FA688h case    2:*/		regs.LR = 0x821FA68C; return 0x82151E68;
		/* 821FA688h case    2:*/		return 0x821FA68C;
	}
	return 0x821FA68C;
} // Block from 821FA680h-821FA68Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FA68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA68C);
		  /* 821FA68Ch */ case    0:  		/* lwz R10, <#[R31 + 1008]> */
		/* 821FA68Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000003F0) );
		/* 821FA68Ch case    0:*/		return 0x821FA690;
		  /* 821FA690h */ case    1:  		/* addi R11, R31, 972 */
		/* 821FA690h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3CC);
		/* 821FA690h case    1:*/		return 0x821FA694;
		  /* 821FA694h */ case    2:  		/* stw R10, <#[R20]> */
		/* 821FA694h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 821FA694h case    2:*/		return 0x821FA698;
		  /* 821FA698h */ case    3:  		/* stw R20, <#[R31 + 1008]> */
		/* 821FA698h case    3:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x000003F0) );
		/* 821FA698h case    3:*/		return 0x821FA69C;
		  /* 821FA69Ch */ case    4:  		/* addi R1, R1, 336 */
		/* 821FA69Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 821FA69Ch case    4:*/		return 0x821FA6A0;
		  /* 821FA6A0h */ case    5:  		/* lfd FR29, <#[R1 - 136]> */
		/* 821FA6A0h case    5:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821FA6A0h case    5:*/		return 0x821FA6A4;
		  /* 821FA6A4h */ case    6:  		/* lfd FR30, <#[R1 - 128]> */
		/* 821FA6A4h case    6:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 821FA6A4h case    6:*/		return 0x821FA6A8;
		  /* 821FA6A8h */ case    7:  		/* lfd FR31, <#[R1 - 120]> */
		/* 821FA6A8h case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821FA6A8h case    7:*/		return 0x821FA6AC;
		  /* 821FA6ACh */ case    8:  		/* b -1479720 */
		/* 821FA6ACh case    8:*/		return 0x82091284;
		/* 821FA6ACh case    8:*/		return 0x821FA6B0;
	}
	return 0x821FA6B0;
} // Block from 821FA68Ch-821FA6B0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FA6B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA6B0);
		  /* 821FA6B0h */ case    0:  		/* mfspr R12, LR */
		/* 821FA6B0h case    0:*/		regs.R12 = regs.LR;
		/* 821FA6B0h case    0:*/		return 0x821FA6B4;
		  /* 821FA6B4h */ case    1:  		/* bl -1479776 */
		/* 821FA6B4h case    1:*/		regs.LR = 0x821FA6B8; return 0x82091254;
		/* 821FA6B4h case    1:*/		return 0x821FA6B8;
		  /* 821FA6B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821FA6B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821FA6B8h case    2:*/		return 0x821FA6BC;
		  /* 821FA6BCh */ case    3:  		/* mr R29, R4 */
		/* 821FA6BCh case    3:*/		regs.R29 = regs.R4;
		/* 821FA6BCh case    3:*/		return 0x821FA6C0;
		  /* 821FA6C0h */ case    4:  		/* mr R28, R5 */
		/* 821FA6C0h case    4:*/		regs.R28 = regs.R5;
		/* 821FA6C0h case    4:*/		return 0x821FA6C4;
		  /* 821FA6C4h */ case    5:  		/* mr R4, R6 */
		/* 821FA6C4h case    5:*/		regs.R4 = regs.R6;
		/* 821FA6C4h case    5:*/		return 0x821FA6C8;
		  /* 821FA6C8h */ case    6:  		/* li R6, 0 */
		/* 821FA6C8h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FA6C8h case    6:*/		return 0x821FA6CC;
		  /* 821FA6CCh */ case    7:  		/* li R5, 0 */
		/* 821FA6CCh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FA6CCh case    7:*/		return 0x821FA6D0;
		  /* 821FA6D0h */ case    8:  		/* mr R31, R3 */
		/* 821FA6D0h case    8:*/		regs.R31 = regs.R3;
		/* 821FA6D0h case    8:*/		return 0x821FA6D4;
		  /* 821FA6D4h */ case    9:  		/* mr R27, R7 */
		/* 821FA6D4h case    9:*/		regs.R27 = regs.R7;
		/* 821FA6D4h case    9:*/		return 0x821FA6D8;
		  /* 821FA6D8h */ case   10:  		/* bl -446312 */
		/* 821FA6D8h case   10:*/		regs.LR = 0x821FA6DC; return 0x8218D770;
		/* 821FA6D8h case   10:*/		return 0x821FA6DC;
		  /* 821FA6DCh */ case   11:  		/* mr R30, R3 */
		/* 821FA6DCh case   11:*/		regs.R30 = regs.R3;
		/* 821FA6DCh case   11:*/		return 0x821FA6E0;
		  /* 821FA6E0h */ case   12:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FA6E0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FA6E0h case   12:*/		return 0x821FA6E4;
		  /* 821FA6E4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821FA6E4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FA6E4h case   13:*/		return 0x821FA6E8;
		  /* 821FA6E8h */ case   14:  		/* bc 4, CR6_EQ, 24 */
		/* 821FA6E8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821FA700;  }
		/* 821FA6E8h case   14:*/		return 0x821FA6EC;
		  /* 821FA6ECh */ case   15:  		/* mr R3, R30 */
		/* 821FA6ECh case   15:*/		regs.R3 = regs.R30;
		/* 821FA6ECh case   15:*/		return 0x821FA6F0;
		  /* 821FA6F0h */ case   16:  		/* bl -13128 */
		/* 821FA6F0h case   16:*/		regs.LR = 0x821FA6F4; return 0x821F73A8;
		/* 821FA6F0h case   16:*/		return 0x821FA6F4;
		  /* 821FA6F4h */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FA6F4h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FA6F4h case   17:*/		return 0x821FA6F8;
		  /* 821FA6F8h */ case   18:  		/* li R11, 1 */
		/* 821FA6F8h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FA6F8h case   18:*/		return 0x821FA6FC;
		  /* 821FA6FCh */ case   19:  		/* bc 12, CR0_EQ, 8 */
		/* 821FA6FCh case   19:*/		if ( regs.CR[0].eq ) { return 0x821FA704;  }
		/* 821FA6FCh case   19:*/		return 0x821FA700;
	}
	return 0x821FA700;
} // Block from 821FA6B0h-821FA700h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FA700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA700);
		  /* 821FA700h */ case    0:  		/* li R11, 0 */
		/* 821FA700h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FA700h case    0:*/		return 0x821FA704;
	}
	return 0x821FA704;
} // Block from 821FA700h-821FA704h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FA704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA704);
		  /* 821FA704h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FA704h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FA704h case    0:*/		return 0x821FA708;
		  /* 821FA708h */ case    1:  		/* bc 4, CR0_EQ, 112 */
		/* 821FA708h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821FA778;  }
		/* 821FA708h case    1:*/		return 0x821FA70C;
		  /* 821FA70Ch */ case    2:  		/* mr R3, R30 */
		/* 821FA70Ch case    2:*/		regs.R3 = regs.R30;
		/* 821FA70Ch case    2:*/		return 0x821FA710;
		  /* 821FA710h */ case    3:  		/* bl -13072 */
		/* 821FA710h case    3:*/		regs.LR = 0x821FA714; return 0x821F7400;
		/* 821FA710h case    3:*/		return 0x821FA714;
		  /* 821FA714h */ case    4:  		/* cmpwi CR6, R3, 33 */
		/* 821FA714h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000021);
		/* 821FA714h case    4:*/		return 0x821FA718;
		  /* 821FA718h */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 821FA718h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FA750;  }
		/* 821FA718h case    5:*/		return 0x821FA71C;
		  /* 821FA71Ch */ case    6:  		/* bc 4, CR6_GT, 12 */
		/* 821FA71Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x821FA728;  }
		/* 821FA71Ch case    6:*/		return 0x821FA720;
		  /* 821FA720h */ case    7:  		/* cmpwi CR6, R3, 37 */
		/* 821FA720h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000025);
		/* 821FA720h case    7:*/		return 0x821FA724;
		  /* 821FA724h */ case    8:  		/* bc 4, CR6_GT, 56 */
		/* 821FA724h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821FA75C;  }
		/* 821FA724h case    8:*/		return 0x821FA728;
	}
	return 0x821FA728;
} // Block from 821FA704h-821FA728h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FA728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA728);
		  /* 821FA728h */ case    0:  		/* lwz R6, <#[R30 + 16]> */
		/* 821FA728h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 821FA728h case    0:*/		return 0x821FA72C;
		  /* 821FA72Ch */ case    1:  		/* cmplwi CR6, R6, 0 */
		/* 821FA72Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821FA72Ch case    1:*/		return 0x821FA730;
		  /* 821FA730h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821FA730h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FA76C;  }
		/* 821FA730h case    2:*/		return 0x821FA734;
		  /* 821FA734h */ case    3:  		/* li R8, 1 */
		/* 821FA734h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FA734h case    3:*/		return 0x821FA738;
		  /* 821FA738h */ case    4:  		/* mr R7, R27 */
		/* 821FA738h case    4:*/		regs.R7 = regs.R27;
		/* 821FA738h case    4:*/		return 0x821FA73C;
		  /* 821FA73Ch */ case    5:  		/* mr R5, R28 */
		/* 821FA73Ch case    5:*/		regs.R5 = regs.R28;
		/* 821FA73Ch case    5:*/		return 0x821FA740;
		  /* 821FA740h */ case    6:  		/* mr R4, R29 */
		/* 821FA740h case    6:*/		regs.R4 = regs.R29;
		/* 821FA740h case    6:*/		return 0x821FA744;
		  /* 821FA744h */ case    7:  		/* mr R3, R31 */
		/* 821FA744h case    7:*/		regs.R3 = regs.R31;
		/* 821FA744h case    7:*/		return 0x821FA748;
		  /* 821FA748h */ case    8:  		/* bl -4072 */
		/* 821FA748h case    8:*/		regs.LR = 0x821FA74C; return 0x821F9760;
		/* 821FA748h case    8:*/		return 0x821FA74C;
		  /* 821FA74Ch */ case    9:  		/* b 32 */
		/* 821FA74Ch case    9:*/		return 0x821FA76C;
		/* 821FA74Ch case    9:*/		return 0x821FA750;
	}
	return 0x821FA750;
} // Block from 821FA728h-821FA750h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821FA750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA750);
		  /* 821FA750h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FA750h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FA750h case    0:*/		return 0x821FA754;
		  /* 821FA754h */ case    1:  		/* ori R11, R11, 8 */
		/* 821FA754h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821FA754h case    1:*/		return 0x821FA758;
		  /* 821FA758h */ case    2:  		/* stw R11, <#[R29 + 4]> */
		/* 821FA758h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FA758h case    2:*/		return 0x821FA75C;
	}
	return 0x821FA75C;
} // Block from 821FA750h-821FA75Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FA75Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA75C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA75C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA75C);
		  /* 821FA75Ch */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FA75Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FA75Ch case    0:*/		return 0x821FA760;
		  /* 821FA760h */ case    1:  		/* li R10, 3 */
		/* 821FA760h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821FA760h case    1:*/		return 0x821FA764;
		  /* 821FA764h */ case    2:  		/* rlwimi R11, R10, 4, 25, 27 */
		/* 821FA764h case    2:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R11,regs.R10);
		/* 821FA764h case    2:*/		return 0x821FA768;
	}
	return 0x821FA768;
} // Block from 821FA75Ch-821FA768h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FA768h
// Function '?ExportOutParameters@Compiler@D3DXShader@@AAAXPAVCNodeFunction@2@PAVResultStack@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA768);
		  /* 821FA768h */ case    0:  		/* stw R11, <#[R29 + 4]> */
		/* 821FA768h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FA768h case    0:*/		return 0x821FA76C;
	}
	return 0x821FA76C;
} // Block from 821FA768h-821FA76Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FA76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA76C);
		  /* 821FA76Ch */ case    0:  		/* li R11, 0 */
		/* 821FA76Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FA76Ch case    0:*/		return 0x821FA770;
		  /* 821FA770h */ case    1:  		/* stw R11, <#[R30 + 4]> */
		/* 821FA770h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FA770h case    1:*/		return 0x821FA774;
		  /* 821FA774h */ case    2:  		/* b -148 */
		/* 821FA774h case    2:*/		return 0x821FA6E0;
		/* 821FA774h case    2:*/		return 0x821FA778;
	}
	return 0x821FA778;
} // Block from 821FA76Ch-821FA778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FA778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA778);
		  /* 821FA778h */ case    0:  		/* lwz R10, <#[R31 + 1008]> */
		/* 821FA778h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000003F0) );
		/* 821FA778h case    0:*/		return 0x821FA77C;
		  /* 821FA77Ch */ case    1:  		/* addi R11, R31, 972 */
		/* 821FA77Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3CC);
		/* 821FA77Ch case    1:*/		return 0x821FA780;
		  /* 821FA780h */ case    2:  		/* stw R10, <#[R30]> */
		/* 821FA780h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821FA780h case    2:*/		return 0x821FA784;
		  /* 821FA784h */ case    3:  		/* stw R30, <#[R31 + 1008]> */
		/* 821FA784h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000003F0) );
		/* 821FA784h case    3:*/		return 0x821FA788;
		  /* 821FA788h */ case    4:  		/* addi R1, R1, 128 */
		/* 821FA788h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821FA788h case    4:*/		return 0x821FA78C;
		  /* 821FA78Ch */ case    5:  		/* b -1479912 */
		/* 821FA78Ch case    5:*/		return 0x820912A4;
		/* 821FA78Ch case    5:*/		return 0x821FA790;
	}
	return 0x821FA790;
} // Block from 821FA778h-821FA790h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FA790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA790);
		  /* 821FA790h */ case    0:  		/* mfspr R12, LR */
		/* 821FA790h case    0:*/		regs.R12 = regs.LR;
		/* 821FA790h case    0:*/		return 0x821FA794;
		  /* 821FA794h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821FA794h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821FA794h case    1:*/		return 0x821FA798;
		  /* 821FA798h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821FA798h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821FA798h case    2:*/		return 0x821FA79C;
		  /* 821FA79Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821FA79Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821FA79Ch case    3:*/		return 0x821FA7A0;
		  /* 821FA7A0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821FA7A0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821FA7A0h case    4:*/		return 0x821FA7A4;
		  /* 821FA7A4h */ case    5:  		/* lwz R11, <#[R4 + 40]> */
		/* 821FA7A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000028) );
		/* 821FA7A4h case    5:*/		return 0x821FA7A8;
		  /* 821FA7A8h */ case    6:  		/* mr R8, R5 */
		/* 821FA7A8h case    6:*/		regs.R8 = regs.R5;
		/* 821FA7A8h case    6:*/		return 0x821FA7AC;
		  /* 821FA7ACh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821FA7ACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FA7ACh case    7:*/		return 0x821FA7B0;
		  /* 821FA7B0h */ case    8:  		/* bc 12, CR6_EQ, 392 */
		/* 821FA7B0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FA938;  }
		/* 821FA7B0h case    8:*/		return 0x821FA7B4;
		  /* 821FA7B4h */ case    9:  		/* lwz R10, <#[R3 + 16]> */
		/* 821FA7B4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 821FA7B4h case    9:*/		return 0x821FA7B8;
		  /* 821FA7B8h */ case   10:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA7B8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA7B8h case   10:*/		return 0x821FA7BC;
		  /* 821FA7BCh */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 821FA7BCh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FA7BCh case   11:*/		return 0x821FA7C0;
		  /* 821FA7C0h */ case   12:  		/* bc 12, CR6_LT, 12 */
		/* 821FA7C0h case   12:*/		if ( regs.CR[6].lt ) { return 0x821FA7CC;  }
		/* 821FA7C0h case   12:*/		return 0x821FA7C4;
		  /* 821FA7C4h */ case   13:  		/* li R4, 4801 */
		/* 821FA7C4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FA7C4h case   13:*/		return 0x821FA7C8;
		  /* 821FA7C8h */ case   14:  		/* bl -690528 */
		/* 821FA7C8h case   14:*/		regs.LR = 0x821FA7CC; return 0x82151E68;
		/* 821FA7C8h case   14:*/		return 0x821FA7CC;
	}
	return 0x821FA7CC;
} // Block from 821FA790h-821FA7CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FA7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA7CC);
		  /* 821FA7CCh */ case    0:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA7CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA7CCh case    0:*/		return 0x821FA7D0;
		  /* 821FA7D0h */ case    1:  		/* mulli R11, R11, 40 */
		/* 821FA7D0h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA7D0h case    1:*/		return 0x821FA7D4;
		  /* 821FA7D4h */ case    2:  		/* add R11, R11, R10 */
		/* 821FA7D4h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA7D4h case    2:*/		return 0x821FA7D8;
		  /* 821FA7D8h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 821FA7D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA7D8h case    3:*/		return 0x821FA7DC;
		  /* 821FA7DCh */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821FA7DCh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821FA7DCh case    4:*/		return 0x821FA7E0;
		  /* 821FA7E0h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821FA7E0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FA7EC;  }
		/* 821FA7E0h case    5:*/		return 0x821FA7E4;
		  /* 821FA7E4h */ case    6:  		/* li R4, 4801 */
		/* 821FA7E4h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FA7E4h case    6:*/		return 0x821FA7E8;
		  /* 821FA7E8h */ case    7:  		/* bl -690560 */
		/* 821FA7E8h case    7:*/		regs.LR = 0x821FA7EC; return 0x82151E68;
		/* 821FA7E8h case    7:*/		return 0x821FA7EC;
	}
	return 0x821FA7EC;
} // Block from 821FA7CCh-821FA7ECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FA7ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA7EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA7EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA7EC);
		  /* 821FA7ECh */ case    0:  		/* lwz R9, <#[R4 + 20]> */
		/* 821FA7ECh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000014) );
		/* 821FA7ECh case    0:*/		return 0x821FA7F0;
		  /* 821FA7F0h */ case    1:  		/* cmplwi CR6, R9, 16383 */
		/* 821FA7F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003FFF);
		/* 821FA7F0h case    1:*/		return 0x821FA7F4;
		  /* 821FA7F4h */ case    2:  		/* bc 4, CR6_GT, 12 */
		/* 821FA7F4h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821FA800;  }
		/* 821FA7F4h case    2:*/		return 0x821FA7F8;
		  /* 821FA7F8h */ case    3:  		/* li R4, 3519 */
		/* 821FA7F8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDBF);
		/* 821FA7F8h case    3:*/		return 0x821FA7FC;
		  /* 821FA7FCh */ case    4:  		/* bl -690580 */
		/* 821FA7FCh case    4:*/		regs.LR = 0x821FA800; return 0x82151E68;
		/* 821FA7FCh case    4:*/		return 0x821FA800;
	}
	return 0x821FA800;
} // Block from 821FA7ECh-821FA800h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FA800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA800);
		  /* 821FA800h */ case    0:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA800h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA800h case    0:*/		return 0x821FA804;
		  /* 821FA804h */ case    1:  		/* li R31, 0 */
		/* 821FA804h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821FA804h case    1:*/		return 0x821FA808;
		  /* 821FA808h */ case    2:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA808h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA808h case    2:*/		return 0x821FA80C;
		  /* 821FA80Ch */ case    3:  		/* li R5, 32 */
		/* 821FA80Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 821FA80Ch case    3:*/		return 0x821FA810;
		  /* 821FA810h */ case    4:  		/* mulli R11, R11, 40 */
		/* 821FA810h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA810h case    4:*/		return 0x821FA814;
		  /* 821FA814h */ case    5:  		/* lwzx R7, <#[R11 + R10]> */
		/* 821FA814h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821FA814h case    5:*/		return 0x821FA818;
		  /* 821FA818h */ case    6:  		/* rlwimi R7, R9, 3, 15, 28 */
		/* 821FA818h case    6:*/		cpu::op::rlwimi<0,3,15,28>(regs,&regs.R7,regs.R9);
		/* 821FA818h case    6:*/		return 0x821FA81C;
		  /* 821FA81Ch */ case    7:  		/* li R9, 1 */
		/* 821FA81Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821FA81Ch case    7:*/		return 0x821FA820;
		  /* 821FA820h */ case    8:  		/* stwx R7, <#[R11 + R10]> */
		/* 821FA820h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821FA820h case    8:*/		return 0x821FA824;
		  /* 821FA824h */ case    9:  		/* li R7, 2 */
		/* 821FA824h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821FA824h case    9:*/		return 0x821FA828;
		  /* 821FA828h */ case   10:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA828h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA828h case   10:*/		return 0x821FA82C;
		  /* 821FA82Ch */ case   11:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA82Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA82Ch case   11:*/		return 0x821FA830;
		  /* 821FA830h */ case   12:  		/* mulli R11, R11, 40 */
		/* 821FA830h case   12:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA830h case   12:*/		return 0x821FA834;
		  /* 821FA834h */ case   13:  		/* lwzx R30, <#[R11 + R10]> */
		/* 821FA834h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821FA834h case   13:*/		return 0x821FA838;
		  /* 821FA838h */ case   14:  		/* rlwimi R30, R8, 0, 29, 31 */
		/* 821FA838h case   14:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R30,regs.R8);
		/* 821FA838h case   14:*/		return 0x821FA83C;
		  /* 821FA83Ch */ case   15:  		/* stwx R30, <#[R11 + R10]> */
		/* 821FA83Ch case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821FA83Ch case   15:*/		return 0x821FA840;
	}
	return 0x821FA840;
} // Block from 821FA800h-821FA840h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821FA840h
// Function '?GenerateShaderExit@Compiler@D3DXShader@@AAAPAVInstruction@2@PAUFunction@2@PAVResultStack@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA840);
		  /* 821FA840h */ case    0:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA840h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA840h case    0:*/		return 0x821FA844;
		  /* 821FA844h */ case    1:  		/* lwz R8, <#[R4 + 40]> */
		/* 821FA844h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000028) );
		/* 821FA844h case    1:*/		return 0x821FA848;
		  /* 821FA848h */ case    2:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA848h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA848h case    2:*/		return 0x821FA84C;
		  /* 821FA84Ch */ case    3:  		/* mulli R11, R11, 40 */
		/* 821FA84Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA84Ch case    3:*/		return 0x821FA850;
		  /* 821FA850h */ case    4:  		/* add R11, R11, R10 */
		/* 821FA850h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA850h case    4:*/		return 0x821FA854;
		  /* 821FA854h */ case    5:  		/* stw R8, <#[R11 + 20]> */
		/* 821FA854h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000014) );
		/* 821FA854h case    5:*/		return 0x821FA858;
		  /* 821FA858h */ case    6:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA858h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA858h case    6:*/		return 0x821FA85C;
		  /* 821FA85Ch */ case    7:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA85Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA85Ch case    7:*/		return 0x821FA860;
		  /* 821FA860h */ case    8:  		/* mulli R11, R11, 40 */
		/* 821FA860h case    8:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA860h case    8:*/		return 0x821FA864;
		  /* 821FA864h */ case    9:  		/* add R11, R11, R10 */
		/* 821FA864h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA864h case    9:*/		return 0x821FA868;
		  /* 821FA868h */ case   10:  		/* stw R31, <#[R11 + 16]> */
		/* 821FA868h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821FA868h case   10:*/		return 0x821FA86C;
		  /* 821FA86Ch */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA86Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA86Ch case   11:*/		return 0x821FA870;
		  /* 821FA870h */ case   12:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA870h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA870h case   12:*/		return 0x821FA874;
		  /* 821FA874h */ case   13:  		/* mulli R11, R11, 40 */
		/* 821FA874h case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA874h case   13:*/		return 0x821FA878;
		  /* 821FA878h */ case   14:  		/* add R11, R11, R10 */
		/* 821FA878h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA878h case   14:*/		return 0x821FA87C;
		  /* 821FA87Ch */ case   15:  		/* stw R6, <#[R11 + 12]> */
		/* 821FA87Ch case   15:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FA87Ch case   15:*/		return 0x821FA880;
		  /* 821FA880h */ case   16:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA880h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA880h case   16:*/		return 0x821FA884;
		  /* 821FA884h */ case   17:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA884h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA884h case   17:*/		return 0x821FA888;
		  /* 821FA888h */ case   18:  		/* mulli R11, R11, 40 */
		/* 821FA888h case   18:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA888h case   18:*/		return 0x821FA88C;
		  /* 821FA88Ch */ case   19:  		/* add R11, R11, R10 */
		/* 821FA88Ch case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA88Ch case   19:*/		return 0x821FA890;
		  /* 821FA890h */ case   20:  		/* addi R10, R11, 4 */
		/* 821FA890h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FA890h case   20:*/		return 0x821FA894;
		  /* 821FA894h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FA894h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA894h case   21:*/		return 0x821FA898;
		  /* 821FA898h */ case   22:  		/* ori R10, R10, 4 */
		/* 821FA898h case   22:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821FA898h case   22:*/		return 0x821FA89C;
		  /* 821FA89Ch */ case   23:  		/* stw R10, <#[R11 + 4]> */
		/* 821FA89Ch case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA89Ch case   23:*/		return 0x821FA8A0;
		  /* 821FA8A0h */ case   24:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA8A0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA8A0h case   24:*/		return 0x821FA8A4;
		  /* 821FA8A4h */ case   25:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA8A4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA8A4h case   25:*/		return 0x821FA8A8;
		  /* 821FA8A8h */ case   26:  		/* mulli R11, R11, 40 */
		/* 821FA8A8h case   26:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA8A8h case   26:*/		return 0x821FA8AC;
		  /* 821FA8ACh */ case   27:  		/* add R11, R11, R10 */
		/* 821FA8ACh case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA8ACh case   27:*/		return 0x821FA8B0;
		  /* 821FA8B0h */ case   28:  		/* addi R10, R11, 4 */
		/* 821FA8B0h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FA8B0h case   28:*/		return 0x821FA8B4;
		  /* 821FA8B4h */ case   29:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FA8B4h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA8B4h case   29:*/		return 0x821FA8B8;
		  /* 821FA8B8h */ case   30:  		/* oris R10, R10, 2048 */
		/* 821FA8B8h case   30:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x800);
		/* 821FA8B8h case   30:*/		return 0x821FA8BC;
		  /* 821FA8BCh */ case   31:  		/* stw R10, <#[R11 + 4]> */
		/* 821FA8BCh case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA8BCh case   31:*/		return 0x821FA8C0;
		  /* 821FA8C0h */ case   32:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA8C0h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA8C0h case   32:*/		return 0x821FA8C4;
		  /* 821FA8C4h */ case   33:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA8C4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA8C4h case   33:*/		return 0x821FA8C8;
		  /* 821FA8C8h */ case   34:  		/* mulli R11, R11, 40 */
		/* 821FA8C8h case   34:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA8C8h case   34:*/		return 0x821FA8CC;
		  /* 821FA8CCh */ case   35:  		/* add R11, R11, R10 */
		/* 821FA8CCh case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA8CCh case   35:*/		return 0x821FA8D0;
		  /* 821FA8D0h */ case   36:  		/* addi R10, R11, 4 */
		/* 821FA8D0h case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FA8D0h case   36:*/		return 0x821FA8D4;
		  /* 821FA8D4h */ case   37:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FA8D4h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA8D4h case   37:*/		return 0x821FA8D8;
		  /* 821FA8D8h */ case   38:  		/* ori R10, R10, 112 */
		/* 821FA8D8h case   38:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x70);
		/* 821FA8D8h case   38:*/		return 0x821FA8DC;
		  /* 821FA8DCh */ case   39:  		/* stw R10, <#[R11 + 4]> */
		/* 821FA8DCh case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA8DCh case   39:*/		return 0x821FA8E0;
		  /* 821FA8E0h */ case   40:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA8E0h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA8E0h case   40:*/		return 0x821FA8E4;
		  /* 821FA8E4h */ case   41:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA8E4h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA8E4h case   41:*/		return 0x821FA8E8;
		  /* 821FA8E8h */ case   42:  		/* mulli R11, R11, 40 */
		/* 821FA8E8h case   42:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA8E8h case   42:*/		return 0x821FA8EC;
		  /* 821FA8ECh */ case   43:  		/* add R11, R11, R10 */
		/* 821FA8ECh case   43:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA8ECh case   43:*/		return 0x821FA8F0;
		  /* 821FA8F0h */ case   44:  		/* addi R10, R11, 8 */
		/* 821FA8F0h case   44:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821FA8F0h case   44:*/		return 0x821FA8F4;
		  /* 821FA8F4h */ case   45:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FA8F4h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FA8F4h case   45:*/		return 0x821FA8F8;
		  /* 821FA8F8h */ case   46:  		/* rlwimi R10, R9, 20, 10, 12 */
		/* 821FA8F8h case   46:*/		cpu::op::rlwimi<0,20,10,12>(regs,&regs.R10,regs.R9);
		/* 821FA8F8h case   46:*/		return 0x821FA8FC;
		  /* 821FA8FCh */ case   47:  		/* stw R10, <#[R11 + 8]> */
		/* 821FA8FCh case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FA8FCh case   47:*/		return 0x821FA900;
		  /* 821FA900h */ case   48:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA900h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA900h case   48:*/		return 0x821FA904;
		  /* 821FA904h */ case   49:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA904h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA904h case   49:*/		return 0x821FA908;
		  /* 821FA908h */ case   50:  		/* mulli R11, R11, 40 */
		/* 821FA908h case   50:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA908h case   50:*/		return 0x821FA90C;
		  /* 821FA90Ch */ case   51:  		/* add R11, R11, R10 */
		/* 821FA90Ch case   51:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FA90Ch case   51:*/		return 0x821FA910;
		  /* 821FA910h */ case   52:  		/* addi R10, R11, 4 */
		/* 821FA910h case   52:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FA910h case   52:*/		return 0x821FA914;
		  /* 821FA914h */ case   53:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FA914h case   53:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA914h case   53:*/		return 0x821FA918;
		  /* 821FA918h */ case   54:  		/* ori R10, R10, 1 */
		/* 821FA918h case   54:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821FA918h case   54:*/		return 0x821FA91C;
		  /* 821FA91Ch */ case   55:  		/* stw R10, <#[R11 + 4]> */
		/* 821FA91Ch case   55:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FA91Ch case   55:*/		return 0x821FA920;
		  /* 821FA920h */ case   56:  		/* lwz R10, <#[R3 + 12]> */
		/* 821FA920h case   56:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA920h case   56:*/		return 0x821FA924;
		  /* 821FA924h */ case   57:  		/* lwz R6, <#[R4 + 40]> */
		/* 821FA924h case   57:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000028) );
		/* 821FA924h case   57:*/		return 0x821FA928;
		  /* 821FA928h */ case   58:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FA928h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FA928h case   58:*/		return 0x821FA92C;
		  /* 821FA92Ch */ case   59:  		/* mulli R11, R11, 40 */
		/* 821FA92Ch case   59:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FA92Ch case   59:*/		return 0x821FA930;
		  /* 821FA930h */ case   60:  		/* add R4, R11, R10 */
		/* 821FA930h case   60:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 821FA930h case   60:*/		return 0x821FA934;
		  /* 821FA934h */ case   61:  		/* bl -644 */
		/* 821FA934h case   61:*/		regs.LR = 0x821FA938; return 0x821FA6B0;
		/* 821FA934h case   61:*/		return 0x821FA938;
	}
	return 0x821FA938;
} // Block from 821FA840h-821FA938h (62 instructions)

//////////////////////////////////////////////////////
// Block at 821FA938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA938);
		  /* 821FA938h */ case    0:  		/* addi R1, R1, 112 */
		/* 821FA938h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821FA938h case    0:*/		return 0x821FA93C;
		  /* 821FA93Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821FA93Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821FA93Ch case    1:*/		return 0x821FA940;
		  /* 821FA940h */ case    2:  		/* mtspr LR, R12 */
		/* 821FA940h case    2:*/		regs.LR = regs.R12;
		/* 821FA940h case    2:*/		return 0x821FA944;
		  /* 821FA944h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 821FA944h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821FA944h case    3:*/		return 0x821FA948;
		  /* 821FA948h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 821FA948h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821FA948h case    4:*/		return 0x821FA94C;
		  /* 821FA94Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 821FA94Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821FA94Ch case    5:*/		return 0x821FA950;
	}
	return 0x821FA950;
} // Block from 821FA938h-821FA950h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FA950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA950);
		  /* 821FA950h */ case    0:  		/* mfspr R12, LR */
		/* 821FA950h case    0:*/		regs.R12 = regs.LR;
		/* 821FA950h case    0:*/		return 0x821FA954;
		  /* 821FA954h */ case    1:  		/* bl -1480452 */
		/* 821FA954h case    1:*/		regs.LR = 0x821FA958; return 0x82091250;
		/* 821FA954h case    1:*/		return 0x821FA958;
	}
	return 0x821FA958;
} // Block from 821FA950h-821FA958h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FA958h
// Function '?CastNonFloatTypes@Compiler@D3DXShader@@AAAXPAVCNode@2@PAVResultStack@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA958);
		  /* 821FA958h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 821FA958h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821FA958h case    0:*/		return 0x821FA95C;
		  /* 821FA95Ch */ case    1:  		/* lwz R11, <#[R3 + 12]> */
		/* 821FA95Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FA95Ch case    1:*/		return 0x821FA960;
		  /* 821FA960h */ case    2:  		/* mulli R31, R4, 40 */
		/* 821FA960h case    2:*/		cpu::op::mulli<0>(regs,&regs.R31,regs.R4,0x28);
		/* 821FA960h case    2:*/		return 0x821FA964;
		  /* 821FA964h */ case    3:  		/* add R4, R31, R11 */
		/* 821FA964h case    3:*/		cpu::op::add<0>(regs,&regs.R4,regs.R31,regs.R11);
		/* 821FA964h case    3:*/		return 0x821FA968;
		  /* 821FA968h */ case    4:  		/* mr R30, R3 */
		/* 821FA968h case    4:*/		regs.R30 = regs.R3;
		/* 821FA968h case    4:*/		return 0x821FA96C;
		  /* 821FA96Ch */ case    5:  		/* mr R27, R5 */
		/* 821FA96Ch case    5:*/		regs.R27 = regs.R5;
		/* 821FA96Ch case    5:*/		return 0x821FA970;
		  /* 821FA970h */ case    6:  		/* mr R29, R6 */
		/* 821FA970h case    6:*/		regs.R29 = regs.R6;
		/* 821FA970h case    6:*/		return 0x821FA974;
		  /* 821FA974h */ case    7:  		/* mr R28, R7 */
		/* 821FA974h case    7:*/		regs.R28 = regs.R7;
		/* 821FA974h case    7:*/		return 0x821FA978;
		  /* 821FA978h */ case    8:  		/* lwz R11, <#[R4 + 4]> */
		/* 821FA978h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821FA978h case    8:*/		return 0x821FA97C;
		  /* 821FA97Ch */ case    9:  		/* mr R26, R8 */
		/* 821FA97Ch case    9:*/		regs.R26 = regs.R8;
		/* 821FA97Ch case    9:*/		return 0x821FA980;
		  /* 821FA980h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821FA980h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821FA980h case   10:*/		return 0x821FA984;
		  /* 821FA984h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 821FA984h case   11:*/		if ( regs.CR[0].eq ) { return 0x821FA990;  }
		/* 821FA984h case   11:*/		return 0x821FA988;
		  /* 821FA988h */ case   12:  		/* li R4, 4801 */
		/* 821FA988h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FA988h case   12:*/		return 0x821FA98C;
		  /* 821FA98Ch */ case   13:  		/* bl -690980 */
		/* 821FA98Ch case   13:*/		regs.LR = 0x821FA990; return 0x82151E68;
		/* 821FA98Ch case   13:*/		return 0x821FA990;
	}
	return 0x821FA990;
} // Block from 821FA958h-821FA990h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821FA990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA990);
		  /* 821FA990h */ case    0:  		/* lwz R5, <#[R29 + 44]> */
		/* 821FA990h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000002C) );
		/* 821FA990h case    0:*/		return 0x821FA994;
		  /* 821FA994h */ case    1:  		/* rlwinm. R11, R5, 0, 29, 29 */
		/* 821FA994h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R5);
		/* 821FA994h case    1:*/		return 0x821FA998;
		  /* 821FA998h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 821FA998h case    2:*/		if ( regs.CR[0].eq ) { return 0x821FA9B0;  }
		/* 821FA998h case    2:*/		return 0x821FA99C;
		  /* 821FA99Ch */ case    3:  		/* lis R11, -32252 */
		/* 821FA99Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821FA99Ch case    3:*/		return 0x821FA9A0;
		  /* 821FA9A0h */ case    4:  		/* li R4, 3500 */
		/* 821FA9A0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821FA9A0h case    4:*/		return 0x821FA9A4;
		  /* 821FA9A4h */ case    5:  		/* addi R5, R11, -13492 */
		/* 821FA9A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCB4C);
		/* 821FA9A4h case    5:*/		return 0x821FA9A8;
		  /* 821FA9A8h */ case    6:  		/* mr R3, R30 */
		/* 821FA9A8h case    6:*/		regs.R3 = regs.R30;
		/* 821FA9A8h case    6:*/		return 0x821FA9AC;
		  /* 821FA9ACh */ case    7:  		/* bl -691012 */
		/* 821FA9ACh case    7:*/		regs.LR = 0x821FA9B0; return 0x82151E68;
		/* 821FA9ACh case    7:*/		return 0x821FA9B0;
	}
	return 0x821FA9B0;
} // Block from 821FA990h-821FA9B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FA9B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA9B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA9B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA9B0);
		  /* 821FA9B0h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821FA9B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821FA9B0h case    0:*/		return 0x821FA9B4;
		  /* 821FA9B4h */ case    1:  		/* cmplwi CR6, R11, 16383 */
		/* 821FA9B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003FFF);
		/* 821FA9B4h case    1:*/		return 0x821FA9B8;
		  /* 821FA9B8h */ case    2:  		/* bc 4, CR6_GT, 16 */
		/* 821FA9B8h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821FA9C8;  }
		/* 821FA9B8h case    2:*/		return 0x821FA9BC;
		  /* 821FA9BCh */ case    3:  		/* li R4, 3519 */
		/* 821FA9BCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDBF);
		/* 821FA9BCh case    3:*/		return 0x821FA9C0;
		  /* 821FA9C0h */ case    4:  		/* mr R3, R30 */
		/* 821FA9C0h case    4:*/		regs.R3 = regs.R30;
		/* 821FA9C0h case    4:*/		return 0x821FA9C4;
		  /* 821FA9C4h */ case    5:  		/* bl -691036 */
		/* 821FA9C4h case    5:*/		regs.LR = 0x821FA9C8; return 0x82151E68;
		/* 821FA9C4h case    5:*/		return 0x821FA9C8;
	}
	return 0x821FA9C8;
} // Block from 821FA9B0h-821FA9C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FA9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA9C8);
		  /* 821FA9C8h */ case    0:  		/* lwz R6, <#[R29 + 72]> */
		/* 821FA9C8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000048) );
		/* 821FA9C8h case    0:*/		return 0x821FA9CC;
		  /* 821FA9CCh */ case    1:  		/* cmplwi CR6, R6, 0 */
		/* 821FA9CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821FA9CCh case    1:*/		return 0x821FA9D0;
		  /* 821FA9D0h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821FA9D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FA9E4;  }
		/* 821FA9D0h case    2:*/		return 0x821FA9D4;
		  /* 821FA9D4h */ case    3:  		/* mr R8, R28 */
		/* 821FA9D4h case    3:*/		regs.R8 = regs.R28;
		/* 821FA9D4h case    3:*/		return 0x821FA9D8;
		  /* 821FA9D8h */ case    4:  		/* mr R7, R28 */
		/* 821FA9D8h case    4:*/		regs.R7 = regs.R28;
		/* 821FA9D8h case    4:*/		return 0x821FA9DC;
		  /* 821FA9DCh */ case    5:  		/* mr R3, R30 */
		/* 821FA9DCh case    5:*/		regs.R3 = regs.R30;
		/* 821FA9DCh case    5:*/		return 0x821FA9E0;
		  /* 821FA9E0h */ case    6:  		/* bl -4736 */
		/* 821FA9E0h case    6:*/		regs.LR = 0x821FA9E4; return 0x821F9760;
		/* 821FA9E0h case    6:*/		return 0x821FA9E4;
	}
	return 0x821FA9E4;
} // Block from 821FA9C8h-821FA9E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FA9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FA9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FA9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FA9E4);
		  /* 821FA9E4h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FA9E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FA9E4h case    0:*/		return 0x821FA9E8;
		  /* 821FA9E8h */ case    1:  		/* lwz R10, <#[R29 + 20]> */
		/* 821FA9E8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000014) );
		/* 821FA9E8h case    1:*/		return 0x821FA9EC;
		  /* 821FA9ECh */ case    2:  		/* lwzx R9, <#[R31 + R11]> */
		/* 821FA9ECh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821FA9ECh case    2:*/		return 0x821FA9F0;
		  /* 821FA9F0h */ case    3:  		/* rlwimi R9, R10, 3, 15, 28 */
		/* 821FA9F0h case    3:*/		cpu::op::rlwimi<0,3,15,28>(regs,&regs.R9,regs.R10);
		/* 821FA9F0h case    3:*/		return 0x821FA9F4;
		  /* 821FA9F4h */ case    4:  		/* stwx R9, <#[R31 + R11]> */
		/* 821FA9F4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821FA9F4h case    4:*/		return 0x821FA9F8;
		  /* 821FA9F8h */ case    5:  		/* lwz R10, <#[R29 + 48]> */
		/* 821FA9F8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000030) );
		/* 821FA9F8h case    5:*/		return 0x821FA9FC;
		  /* 821FA9FCh */ case    6:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FA9FCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FA9FCh case    6:*/		return 0x821FAA00;
		  /* 821FAA00h */ case    7:  		/* add R11, R31, R11 */
		/* 821FAA00h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA00h case    7:*/		return 0x821FAA04;
		  /* 821FAA04h */ case    8:  		/* stw R10, <#[R11 + 20]> */
		/* 821FAA04h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821FAA04h case    8:*/		return 0x821FAA08;
		  /* 821FAA08h */ case    9:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA08h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA08h case    9:*/		return 0x821FAA0C;
		  /* 821FAA0Ch */ case   10:  		/* add R11, R31, R11 */
		/* 821FAA0Ch case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA0Ch case   10:*/		return 0x821FAA10;
		  /* 821FAA10h */ case   11:  		/* stw R29, <#[R11 + 16]> */
		/* 821FAA10h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000010) );
		/* 821FAA10h case   11:*/		return 0x821FAA14;
		  /* 821FAA14h */ case   12:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA14h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA14h case   12:*/		return 0x821FAA18;
		  /* 821FAA18h */ case   13:  		/* add R11, R31, R11 */
		/* 821FAA18h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA18h case   13:*/		return 0x821FAA1C;
		  /* 821FAA1Ch */ case   14:  		/* stw R27, <#[R11 + 12]> */
		/* 821FAA1Ch case   14:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FAA1Ch case   14:*/		return 0x821FAA20;
		  /* 821FAA20h */ case   15:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA20h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA20h case   15:*/		return 0x821FAA24;
		  /* 821FAA24h */ case   16:  		/* add R11, R31, R11 */
		/* 821FAA24h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA24h case   16:*/		return 0x821FAA28;
		  /* 821FAA28h */ case   17:  		/* stw R26, <#[R11 + 32]> */
		/* 821FAA28h case   17:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000020) );
		/* 821FAA28h case   17:*/		return 0x821FAA2C;
		  /* 821FAA2Ch */ case   18:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA2Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA2Ch case   18:*/		return 0x821FAA30;
		  /* 821FAA30h */ case   19:  		/* add R11, R31, R11 */
		/* 821FAA30h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA30h case   19:*/		return 0x821FAA34;
		  /* 821FAA34h */ case   20:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FAA34h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FAA34h case   20:*/		return 0x821FAA38;
		  /* 821FAA38h */ case   21:  		/* oris R10, R10, 7 */
		/* 821FAA38h case   21:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x7);
		/* 821FAA38h case   21:*/		return 0x821FAA3C;
		  /* 821FAA3Ch */ case   22:  		/* ori R10, R10, 65535 */
		/* 821FAA3Ch case   22:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFF);
		/* 821FAA3Ch case   22:*/		return 0x821FAA40;
		  /* 821FAA40h */ case   23:  		/* stw R10, <#[R11 + 8]> */
		/* 821FAA40h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FAA40h case   23:*/		return 0x821FAA44;
		  /* 821FAA44h */ case   24:  		/* addi R10, R11, 8 */
		/* 821FAA44h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821FAA44h case   24:*/		return 0x821FAA48;
		  /* 821FAA48h */ case   25:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA48h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA48h case   25:*/		return 0x821FAA4C;
		  /* 821FAA4Ch */ case   26:  		/* add R11, R31, R11 */
		/* 821FAA4Ch case   26:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA4Ch case   26:*/		return 0x821FAA50;
		  /* 821FAA50h */ case   27:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FAA50h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FAA50h case   27:*/		return 0x821FAA54;
		  /* 821FAA54h */ case   28:  		/* rlwimi R10, R28, 19, 10, 12 */
		/* 821FAA54h case   28:*/		cpu::op::rlwimi<0,19,10,12>(regs,&regs.R10,regs.R28);
		/* 821FAA54h case   28:*/		return 0x821FAA58;
		  /* 821FAA58h */ case   29:  		/* stw R10, <#[R11 + 8]> */
		/* 821FAA58h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FAA58h case   29:*/		return 0x821FAA5C;
		  /* 821FAA5Ch */ case   30:  		/* addi R10, R11, 8 */
		/* 821FAA5Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821FAA5Ch case   30:*/		return 0x821FAA60;
		  /* 821FAA60h */ case   31:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA60h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA60h case   31:*/		return 0x821FAA64;
		  /* 821FAA64h */ case   32:  		/* add R11, R31, R11 */
		/* 821FAA64h case   32:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA64h case   32:*/		return 0x821FAA68;
		  /* 821FAA68h */ case   33:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FAA68h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAA68h case   33:*/		return 0x821FAA6C;
		  /* 821FAA6Ch */ case   34:  		/* ori R10, R10, 1 */
		/* 821FAA6Ch case   34:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821FAA6Ch case   34:*/		return 0x821FAA70;
		  /* 821FAA70h */ case   35:  		/* stw R10, <#[R11 + 4]> */
		/* 821FAA70h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAA70h case   35:*/		return 0x821FAA74;
		  /* 821FAA74h */ case   36:  		/* addi R10, R11, 4 */
		/* 821FAA74h case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FAA74h case   36:*/		return 0x821FAA78;
		  /* 821FAA78h */ case   37:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA78h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA78h case   37:*/		return 0x821FAA7C;
		  /* 821FAA7Ch */ case   38:  		/* add R11, R31, R11 */
		/* 821FAA7Ch case   38:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821FAA7Ch case   38:*/		return 0x821FAA80;
		  /* 821FAA80h */ case   39:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FAA80h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAA80h case   39:*/		return 0x821FAA84;
		  /* 821FAA84h */ case   40:  		/* ori R10, R10, 112 */
		/* 821FAA84h case   40:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x70);
		/* 821FAA84h case   40:*/		return 0x821FAA88;
		  /* 821FAA88h */ case   41:  		/* stw R10, <#[R11 + 4]> */
		/* 821FAA88h case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAA88h case   41:*/		return 0x821FAA8C;
		  /* 821FAA8Ch */ case   42:  		/* addi R10, R11, 4 */
		/* 821FAA8Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FAA8Ch case   42:*/		return 0x821FAA90;
		  /* 821FAA90h */ case   43:  		/* lwz R6, <#[R29 + 48]> */
		/* 821FAA90h case   43:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000030) );
		/* 821FAA90h case   43:*/		return 0x821FAA94;
		  /* 821FAA94h */ case   44:  		/* cmplwi CR6, R6, 0 */
		/* 821FAA94h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821FAA94h case   44:*/		return 0x821FAA98;
		  /* 821FAA98h */ case   45:  		/* bc 12, CR6_EQ, 28 */
		/* 821FAA98h case   45:*/		if ( regs.CR[6].eq ) { return 0x821FAAB4;  }
		/* 821FAA98h case   45:*/		return 0x821FAA9C;
		  /* 821FAA9Ch */ case   46:  		/* lwz R11, <#[R30 + 12]> */
		/* 821FAA9Ch case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FAA9Ch case   46:*/		return 0x821FAAA0;
		  /* 821FAAA0h */ case   47:  		/* mr R7, R28 */
		/* 821FAAA0h case   47:*/		regs.R7 = regs.R28;
		/* 821FAAA0h case   47:*/		return 0x821FAAA4;
		  /* 821FAAA4h */ case   48:  		/* mr R3, R30 */
		/* 821FAAA4h case   48:*/		regs.R3 = regs.R30;
		/* 821FAAA4h case   48:*/		return 0x821FAAA8;
		  /* 821FAAA8h */ case   49:  		/* lwz R5, <#[R29 + 44]> */
		/* 821FAAA8h case   49:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000002C) );
		/* 821FAAA8h case   49:*/		return 0x821FAAAC;
		  /* 821FAAACh */ case   50:  		/* add R4, R31, R11 */
		/* 821FAAACh case   50:*/		cpu::op::add<0>(regs,&regs.R4,regs.R31,regs.R11);
		/* 821FAAACh case   50:*/		return 0x821FAAB0;
		  /* 821FAAB0h */ case   51:  		/* bl -1024 */
		/* 821FAAB0h case   51:*/		regs.LR = 0x821FAAB4; return 0x821FA6B0;
		/* 821FAAB0h case   51:*/		return 0x821FAAB4;
	}
	return 0x821FAAB4;
} // Block from 821FA9E4h-821FAAB4h (52 instructions)

//////////////////////////////////////////////////////
// Block at 821FAAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAAB4);
		  /* 821FAAB4h */ case    0:  		/* addi R1, R1, 144 */
		/* 821FAAB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821FAAB4h case    0:*/		return 0x821FAAB8;
		  /* 821FAAB8h */ case    1:  		/* b -1480728 */
		/* 821FAAB8h case    1:*/		return 0x820912A0;
		/* 821FAAB8h case    1:*/		return 0x821FAABC;
		  /* 821FAABCh */ case    2:  		/* nop */
		/* 821FAABCh case    2:*/		cpu::op::nop();
		/* 821FAABCh case    2:*/		return 0x821FAAC0;
	}
	return 0x821FAAC0;
} // Block from 821FAAB4h-821FAAC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FAAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAAC0);
		  /* 821FAAC0h */ case    0:  		/* mfspr R12, LR */
		/* 821FAAC0h case    0:*/		regs.R12 = regs.LR;
		/* 821FAAC0h case    0:*/		return 0x821FAAC4;
		  /* 821FAAC4h */ case    1:  		/* bl -1480812 */
		/* 821FAAC4h case    1:*/		regs.LR = 0x821FAAC8; return 0x82091258;
		/* 821FAAC4h case    1:*/		return 0x821FAAC8;
		  /* 821FAAC8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821FAAC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821FAAC8h case    2:*/		return 0x821FAACC;
		  /* 821FAACCh */ case    3:  		/* lwz R31, <#[R4 + 24]> */
		/* 821FAACCh case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000018) );
		/* 821FAACCh case    3:*/		return 0x821FAAD0;
		  /* 821FAAD0h */ case    4:  		/* mr R29, R3 */
		/* 821FAAD0h case    4:*/		regs.R29 = regs.R3;
		/* 821FAAD0h case    4:*/		return 0x821FAAD4;
		  /* 821FAAD4h */ case    5:  		/* mr R5, R4 */
		/* 821FAAD4h case    5:*/		regs.R5 = regs.R4;
		/* 821FAAD4h case    5:*/		return 0x821FAAD8;
		  /* 821FAAD8h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821FAAD8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821FAAD8h case    6:*/		return 0x821FAADC;
		  /* 821FAADCh */ case    7:  		/* bc 12, CR6_EQ, 308 */
		/* 821FAADCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821FAC10;  }
		/* 821FAADCh case    7:*/		return 0x821FAAE0;
		  /* 821FAAE0h */ case    8:  		/* lwz R11, <#[R31 + 4]> */
		/* 821FAAE0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821FAAE0h case    8:*/		return 0x821FAAE4;
		  /* 821FAAE4h */ case    9:  		/* cmpwi CR6, R11, 11 */
		/* 821FAAE4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 821FAAE4h case    9:*/		return 0x821FAAE8;
		  /* 821FAAE8h */ case   10:  		/* bc 4, CR6_EQ, 296 */
		/* 821FAAE8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821FAC10;  }
		/* 821FAAE8h case   10:*/		return 0x821FAAEC;
		  /* 821FAAECh */ case   11:  		/* lwz R10, <#[R3 + 16]> */
		/* 821FAAECh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 821FAAECh case   11:*/		return 0x821FAAF0;
		  /* 821FAAF0h */ case   12:  		/* lwz R11, <#[R31 + 16]> */
		/* 821FAAF0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821FAAF0h case   12:*/		return 0x821FAAF4;
		  /* 821FAAF4h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821FAAF4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FAAF4h case   13:*/		return 0x821FAAF8;
		  /* 821FAAF8h */ case   14:  		/* bc 12, CR6_EQ, 272 */
		/* 821FAAF8h case   14:*/		if ( regs.CR[6].eq ) { return 0x821FAC08;  }
		/* 821FAAF8h case   14:*/		return 0x821FAAFC;
		  /* 821FAAFCh */ case   15:  		/* lwz R10, <#[R31 + 20]> */
		/* 821FAAFCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 821FAAFCh case   15:*/		return 0x821FAB00;
		  /* 821FAB00h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 821FAB00h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FAB00h case   16:*/		return 0x821FAB04;
		  /* 821FAB04h */ case   17:  		/* bc 12, CR6_EQ, 260 */
		/* 821FAB04h case   17:*/		if ( regs.CR[6].eq ) { return 0x821FAC08;  }
		/* 821FAB04h case   17:*/		return 0x821FAB08;
		  /* 821FAB08h */ case   18:  		/* li R8, 0 */
		/* 821FAB08h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821FAB08h case   18:*/		return 0x821FAB0C;
		  /* 821FAB0Ch */ case   19:  		/* li R7, 0 */
		/* 821FAB0Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FAB0Ch case   19:*/		return 0x821FAB10;
		  /* 821FAB10h */ case   20:  		/* mr R6, R31 */
		/* 821FAB10h case   20:*/		regs.R6 = regs.R31;
		/* 821FAB10h case   20:*/		return 0x821FAB14;
		  /* 821FAB14h */ case   21:  		/* mr R4, R11 */
		/* 821FAB14h case   21:*/		regs.R4 = regs.R11;
		/* 821FAB14h case   21:*/		return 0x821FAB18;
		  /* 821FAB18h */ case   22:  		/* bl -456 */
		/* 821FAB18h case   22:*/		regs.LR = 0x821FAB1C; return 0x821FA950;
		/* 821FAB18h case   22:*/		return 0x821FAB1C;
		  /* 821FAB1Ch */ case   23:  		/* lwz R11, <#[R31 + 44]> */
		/* 821FAB1Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821FAB1Ch case   23:*/		return 0x821FAB20;
		  /* 821FAB20h */ case   24:  		/* lwz R9, <#[R29 + 12]> */
		/* 821FAB20h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 821FAB20h case   24:*/		return 0x821FAB24;
		  /* 821FAB24h */ case   25:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 821FAB24h case   25:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 821FAB24h case   25:*/		return 0x821FAB28;
		  /* 821FAB28h */ case   26:  		/* lwz R10, <#[R31 + 16]> */
		/* 821FAB28h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821FAB28h case   26:*/		return 0x821FAB2C;
		  /* 821FAB2Ch */ case   27:  		/* mulli R10, R10, 40 */
		/* 821FAB2Ch case   27:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 821FAB2Ch case   27:*/		return 0x821FAB30;
		  /* 821FAB30h */ case   28:  		/* add R30, R10, R9 */
		/* 821FAB30h case   28:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R9);
		/* 821FAB30h case   28:*/		return 0x821FAB34;
		  /* 821FAB34h */ case   29:  		/* bc 12, CR0_EQ, 36 */
		/* 821FAB34h case   29:*/		if ( regs.CR[0].eq ) { return 0x821FAB58;  }
		/* 821FAB34h case   29:*/		return 0x821FAB38;
		  /* 821FAB38h */ case   30:  		/* lwz R11, <#[R30]> */
		/* 821FAB38h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FAB38h case   30:*/		return 0x821FAB3C;
		  /* 821FAB3Ch */ case   31:  		/* li R28, 1 */
		/* 821FAB3Ch case   31:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821FAB3Ch case   31:*/		return 0x821FAB40;
		  /* 821FAB40h */ case   32:  		/* rlwimi R11, R28, 1, 29, 31 */
		/* 821FAB40h case   32:*/		cpu::op::rlwimi<0,1,29,31>(regs,&regs.R11,regs.R28);
		/* 821FAB40h case   32:*/		return 0x821FAB44;
		  /* 821FAB44h */ case   33:  		/* stw R11, <#[R30]> */
		/* 821FAB44h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FAB44h case   33:*/		return 0x821FAB48;
		  /* 821FAB48h */ case   34:  		/* lwz R11, <#[R31 + 52]> */
		/* 821FAB48h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 821FAB48h case   34:*/		return 0x821FAB4C;
		  /* 821FAB4Ch */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 821FAB4Ch case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FAB4Ch case   35:*/		return 0x821FAB50;
		  /* 821FAB50h */ case   36:  		/* bc 12, CR6_EQ, 100 */
		/* 821FAB50h case   36:*/		if ( regs.CR[6].eq ) { return 0x821FABB4;  }
		/* 821FAB50h case   36:*/		return 0x821FAB54;
		  /* 821FAB54h */ case   37:  		/* b 52 */
		/* 821FAB54h case   37:*/		return 0x821FAB88;
		/* 821FAB54h case   37:*/		return 0x821FAB58;
	}
	return 0x821FAB58;
} // Block from 821FAAC0h-821FAB58h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821FAB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAB58);
		  /* 821FAB58h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 24 */
		/* 821FAB58h case    0:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R11);
		/* 821FAB58h case    0:*/		return 0x821FAB5C;
		  /* 821FAB5Ch */ case    1:  		/* bc 12, CR0_EQ, 60 */
		/* 821FAB5Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821FAB98;  }
		/* 821FAB5Ch case    1:*/		return 0x821FAB60;
		  /* 821FAB60h */ case    2:  		/* lwz R11, <#[R31 + 56]> */
		/* 821FAB60h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821FAB60h case    2:*/		return 0x821FAB64;
		  /* 821FAB64h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821FAB64h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FAB64h case    3:*/		return 0x821FAB68;
		  /* 821FAB68h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 821FAB68h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821FAB78;  }
		/* 821FAB68h case    4:*/		return 0x821FAB6C;
		  /* 821FAB6Ch */ case    5:  		/* li R4, 4801 */
		/* 821FAB6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FAB6Ch case    5:*/		return 0x821FAB70;
		  /* 821FAB70h */ case    6:  		/* mr R3, R29 */
		/* 821FAB70h case    6:*/		regs.R3 = regs.R29;
		/* 821FAB70h case    6:*/		return 0x821FAB74;
		  /* 821FAB74h */ case    7:  		/* bl -691468 */
		/* 821FAB74h case    7:*/		regs.LR = 0x821FAB78; return 0x82151E68;
		/* 821FAB74h case    7:*/		return 0x821FAB78;
	}
	return 0x821FAB78;
} // Block from 821FAB58h-821FAB78h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FAB78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAB78);
		  /* 821FAB78h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821FAB78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FAB78h case    0:*/		return 0x821FAB7C;
		  /* 821FAB7Ch */ case    1:  		/* li R28, 1 */
		/* 821FAB7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821FAB7Ch case    1:*/		return 0x821FAB80;
		  /* 821FAB80h */ case    2:  		/* rlwimi R11, R28, 1, 29, 31 */
		/* 821FAB80h case    2:*/		cpu::op::rlwimi<0,1,29,31>(regs,&regs.R11,regs.R28);
		/* 821FAB80h case    2:*/		return 0x821FAB84;
		  /* 821FAB84h */ case    3:  		/* stw R11, <#[R30]> */
		/* 821FAB84h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FAB84h case    3:*/		return 0x821FAB88;
	}
	return 0x821FAB88;
} // Block from 821FAB78h-821FAB88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FAB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAB88);
		  /* 821FAB88h */ case    0:  		/* lwz R11, <#[R29 + 40]> */
		/* 821FAB88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821FAB88h case    0:*/		return 0x821FAB8C;
		  /* 821FAB8Ch */ case    1:  		/* ori R11, R11, 32 */
		/* 821FAB8Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821FAB8Ch case    1:*/		return 0x821FAB90;
		  /* 821FAB90h */ case    2:  		/* stw R11, <#[R29 + 40]> */
		/* 821FAB90h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 821FAB90h case    2:*/		return 0x821FAB94;
		  /* 821FAB94h */ case    3:  		/* b 32 */
		/* 821FAB94h case    3:*/		return 0x821FABB4;
		/* 821FAB94h case    3:*/		return 0x821FAB98;
	}
	return 0x821FAB98;
} // Block from 821FAB88h-821FAB98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FAB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAB98);
		  /* 821FAB98h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821FAB98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FAB98h case    0:*/		return 0x821FAB9C;
		  /* 821FAB9Ch */ case    1:  		/* li R28, 1 */
		/* 821FAB9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821FAB9Ch case    1:*/		return 0x821FABA0;
		  /* 821FABA0h */ case    2:  		/* mr R3, R29 */
		/* 821FABA0h case    2:*/		regs.R3 = regs.R29;
		/* 821FABA0h case    2:*/		return 0x821FABA4;
		  /* 821FABA4h */ case    3:  		/* rlwimi R11, R28, 0, 29, 31 */
		/* 821FABA4h case    3:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R11,regs.R28);
		/* 821FABA4h case    3:*/		return 0x821FABA8;
		  /* 821FABA8h */ case    4:  		/* stw R11, <#[R30]> */
		/* 821FABA8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FABA8h case    4:*/		return 0x821FABAC;
		  /* 821FABACh */ case    5:  		/* lwz R4, <#[R31 + 16]> */
		/* 821FABACh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821FABACh case    5:*/		return 0x821FABB0;
		  /* 821FABB0h */ case    6:  		/* bl -447040 */
		/* 821FABB0h case    6:*/		regs.LR = 0x821FABB4; return 0x8218D970;
		/* 821FABB0h case    6:*/		return 0x821FABB4;
	}
	return 0x821FABB4;
} // Block from 821FAB98h-821FABB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FABB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FABB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FABB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FABB4);
		  /* 821FABB4h */ case    0:  		/* lwz R9, <#[R29 + 596]> */
		/* 821FABB4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000254) );
		/* 821FABB4h case    0:*/		return 0x821FABB8;
		  /* 821FABB8h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821FABB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FABB8h case    1:*/		return 0x821FABBC;
		  /* 821FABBCh */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 821FABBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821FABE4;  }
		/* 821FABBCh case    2:*/		return 0x821FABC0;
		  /* 821FABC0h */ case    3:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FABC0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FABC0h case    3:*/		return 0x821FABC4;
		  /* 821FABC4h */ case    4:  		/* rlwinm R10, R11, 28, 29, 31 */
		/* 821FABC4h case    4:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R10,regs.R11);
		/* 821FABC4h case    4:*/		return 0x821FABC8;
		  /* 821FABC8h */ case    5:  		/* cmplwi CR6, R10, 7 */
		/* 821FABC8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000007);
		/* 821FABC8h case    5:*/		return 0x821FABCC;
		  /* 821FABCCh */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 821FABCCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821FABD8;  }
		/* 821FABCCh case    6:*/		return 0x821FABD0;
		  /* 821FABD0h */ case    7:  		/* cmplwi CR6, R10, 2 */
		/* 821FABD0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 821FABD0h case    7:*/		return 0x821FABD4;
		  /* 821FABD4h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 821FABD4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821FABE4;  }
		/* 821FABD4h case    8:*/		return 0x821FABD8;
	}
	return 0x821FABD8;
} // Block from 821FABB4h-821FABD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FABD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FABD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FABD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FABD8);
		  /* 821FABD8h */ case    0:  		/* rlwimi R11, R28, 5, 25, 27 */
		/* 821FABD8h case    0:*/		cpu::op::rlwimi<0,5,25,27>(regs,&regs.R11,regs.R28);
		/* 821FABD8h case    0:*/		return 0x821FABDC;
		  /* 821FABDCh */ case    1:  		/* stw R9, <#[R30 + 36]> */
		/* 821FABDCh case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000024) );
		/* 821FABDCh case    1:*/		return 0x821FABE0;
		  /* 821FABE0h */ case    2:  		/* stw R11, <#[R30 + 4]> */
		/* 821FABE0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FABE0h case    2:*/		return 0x821FABE4;
	}
	return 0x821FABE4;
} // Block from 821FABD8h-821FABE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FABE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FABE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FABE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FABE4);
		  /* 821FABE4h */ case    0:  		/* lwz R11, <#[R29 + 44]> */
		/* 821FABE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 821FABE4h case    0:*/		return 0x821FABE8;
		  /* 821FABE8h */ case    1:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821FABE8h case    1:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821FABE8h case    1:*/		return 0x821FABEC;
		  /* 821FABECh */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821FABECh case    2:*/		if ( regs.CR[0].eq ) { return 0x821FABFC;  }
		/* 821FABECh case    2:*/		return 0x821FABF0;
		  /* 821FABF0h */ case    3:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FABF0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FABF0h case    3:*/		return 0x821FABF4;
		  /* 821FABF4h */ case    4:  		/* oris R11, R11, 32768 */
		/* 821FABF4h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821FABF4h case    4:*/		return 0x821FABF8;
		  /* 821FABF8h */ case    5:  		/* stw R11, <#[R30 + 4]> */
		/* 821FABF8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FABF8h case    5:*/		return 0x821FABFC;
	}
	return 0x821FABFC;
} // Block from 821FABE4h-821FABFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FABFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FABFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FABFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FABFC);
		  /* 821FABFCh */ case    0:  		/* mr R3, R30 */
		/* 821FABFCh case    0:*/		regs.R3 = regs.R30;
		/* 821FABFCh case    0:*/		return 0x821FAC00;
		  /* 821FAC00h */ case    1:  		/* addi R1, R1, 128 */
		/* 821FAC00h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821FAC00h case    1:*/		return 0x821FAC04;
		  /* 821FAC04h */ case    2:  		/* b -1481052 */
		/* 821FAC04h case    2:*/		return 0x820912A8;
		/* 821FAC04h case    2:*/		return 0x821FAC08;
	}
	return 0x821FAC08;
} // Block from 821FABFCh-821FAC08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FAC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAC08);
		  /* 821FAC08h */ case    0:  		/* li R3, 0 */
		/* 821FAC08h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821FAC08h case    0:*/		return 0x821FAC0C;
		  /* 821FAC0Ch */ case    1:  		/* b -12 */
		/* 821FAC0Ch case    1:*/		return 0x821FAC00;
		/* 821FAC0Ch case    1:*/		return 0x821FAC10;
	}
	return 0x821FAC10;
} // Block from 821FAC08h-821FAC10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FAC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAC10);
		  /* 821FAC10h */ case    0:  		/* li R4, 4801 */
		/* 821FAC10h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FAC10h case    0:*/		return 0x821FAC14;
		  /* 821FAC14h */ case    1:  		/* mr R3, R29 */
		/* 821FAC14h case    1:*/		regs.R3 = regs.R29;
		/* 821FAC14h case    1:*/		return 0x821FAC18;
		  /* 821FAC18h */ case    2:  		/* bl -691632 */
		/* 821FAC18h case    2:*/		regs.LR = 0x821FAC1C; return 0x82151E68;
		/* 821FAC18h case    2:*/		return 0x821FAC1C;
		  /* 821FAC1Ch */ case    3:  		/* nop */
		/* 821FAC1Ch case    3:*/		cpu::op::nop();
		/* 821FAC1Ch case    3:*/		return 0x821FAC20;
	}
	return 0x821FAC20;
} // Block from 821FAC10h-821FAC20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FAC20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAC20);
		  /* 821FAC20h */ case    0:  		/* mfspr R12, LR */
		/* 821FAC20h case    0:*/		regs.R12 = regs.LR;
		/* 821FAC20h case    0:*/		return 0x821FAC24;
		  /* 821FAC24h */ case    1:  		/* bl -1481200 */
		/* 821FAC24h case    1:*/		regs.LR = 0x821FAC28; return 0x82091234;
		/* 821FAC24h case    1:*/		return 0x821FAC28;
		  /* 821FAC28h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821FAC28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821FAC28h case    2:*/		return 0x821FAC2C;
		  /* 821FAC2Ch */ case    3:  		/* lwz R20, <#[R4 + 4]> */
		/* 821FAC2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R4 + 0x00000004) );
		/* 821FAC2Ch case    3:*/		return 0x821FAC30;
		  /* 821FAC30h */ case    4:  		/* mr R31, R3 */
		/* 821FAC30h case    4:*/		regs.R31 = regs.R3;
		/* 821FAC30h case    4:*/		return 0x821FAC34;
		  /* 821FAC34h */ case    5:  		/* mr R23, R4 */
		/* 821FAC34h case    5:*/		regs.R23 = regs.R4;
		/* 821FAC34h case    5:*/		return 0x821FAC38;
		  /* 821FAC38h */ case    6:  		/* mr R21, R5 */
		/* 821FAC38h case    6:*/		regs.R21 = regs.R5;
		/* 821FAC38h case    6:*/		return 0x821FAC3C;
		  /* 821FAC3Ch */ case    7:  		/* mr R19, R6 */
		/* 821FAC3Ch case    7:*/		regs.R19 = regs.R6;
		/* 821FAC3Ch case    7:*/		return 0x821FAC40;
		  /* 821FAC40h */ case    8:  		/* lwz R11, <#[R20 + 44]> */
		/* 821FAC40h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821FAC40h case    8:*/		return 0x821FAC44;
		  /* 821FAC44h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821FAC44h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FAC44h case    9:*/		return 0x821FAC48;
		  /* 821FAC48h */ case   10:  		/* bc 12, CR6_EQ, 936 */
		/* 821FAC48h case   10:*/		if ( regs.CR[6].eq ) { return 0x821FAFF0;  }
		/* 821FAC48h case   10:*/		return 0x821FAC4C;
		  /* 821FAC4Ch */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FAC4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAC4Ch case   11:*/		return 0x821FAC50;
		  /* 821FAC50h */ case   12:  		/* cmpwi CR6, R10, 1 */
		/* 821FAC50h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FAC50h case   12:*/		return 0x821FAC54;
		  /* 821FAC54h */ case   13:  		/* bc 12, CR6_EQ, 924 */
		/* 821FAC54h case   13:*/		if ( regs.CR[6].eq ) { return 0x821FAFF0;  }
		/* 821FAC54h case   13:*/		return 0x821FAC58;
		  /* 821FAC58h */ case   14:  		/* li R4, 4801 */
		/* 821FAC58h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FAC58h case   14:*/		return 0x821FAC5C;
		  /* 821FAC5Ch */ case   15:  		/* bl -691700 */
		/* 821FAC5Ch case   15:*/		regs.LR = 0x821FAC60; return 0x82151E68;
		/* 821FAC5Ch case   15:*/		return 0x821FAC60;
		  /* 821FAC60h */ case   16:  		/* lwz R5, <#[R22 + 8]> */
		/* 821FAC60h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R22 + 0x00000008) );
		/* 821FAC60h case   16:*/		return 0x821FAC64;
		  /* 821FAC64h */ case   17:  		/* lwz R11, <#[R5 + 4]> */
		/* 821FAC64h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 821FAC64h case   17:*/		return 0x821FAC68;
		  /* 821FAC68h */ case   18:  		/* cmpwi CR6, R11, 6 */
		/* 821FAC68h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821FAC68h case   18:*/		return 0x821FAC6C;
		  /* 821FAC6Ch */ case   19:  		/* bc 4, CR6_EQ, 876 */
		/* 821FAC6Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x821FAFD8;  }
		/* 821FAC6Ch case   19:*/		return 0x821FAC70;
		  /* 821FAC70h */ case   20:  		/* lwz R11, <#[R5 + 16]> */
		/* 821FAC70h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 821FAC70h case   20:*/		return 0x821FAC74;
		  /* 821FAC74h */ case   21:  		/* cmpwi CR6, R11, 1 */
		/* 821FAC74h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FAC74h case   21:*/		return 0x821FAC78;
		  /* 821FAC78h */ case   22:  		/* bc 4, CR6_EQ, 1124 */
		/* 821FAC78h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821FB0DC;  }
		/* 821FAC78h case   22:*/		return 0x821FAC7C;
		  /* 821FAC7Ch */ case   23:  		/* lwz R24, <#[R5 + 24]> */
		/* 821FAC7Ch case   23:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R5 + 0x00000018) );
		/* 821FAC7Ch case   23:*/		return 0x821FAC80;
		  /* 821FAC80h */ case   24:  		/* cmplwi CR6, R24, 0 */
		/* 821FAC80h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821FAC80h case   24:*/		return 0x821FAC84;
		  /* 821FAC84h */ case   25:  		/* bc 12, CR6_EQ, 1160 */
		/* 821FAC84h case   25:*/		if ( regs.CR[6].eq ) { return 0x821FB10C;  }
		/* 821FAC84h case   25:*/		return 0x821FAC88;
		  /* 821FAC88h */ case   26:  		/* lwz R11, <#[R24 + 4]> */
		/* 821FAC88h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821FAC88h case   26:*/		return 0x821FAC8C;
		  /* 821FAC8Ch */ case   27:  		/* cmpwi CR6, R11, 11 */
		/* 821FAC8Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 821FAC8Ch case   27:*/		return 0x821FAC90;
		  /* 821FAC90h */ case   28:  		/* bc 4, CR6_EQ, 1148 */
		/* 821FAC90h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821FB10C;  }
		/* 821FAC90h case   28:*/		return 0x821FAC94;
		  /* 821FAC94h */ case   29:  		/* lwz R27, <#[R24 + 16]> */
		/* 821FAC94h case   29:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R24 + 0x00000010) );
		/* 821FAC94h case   29:*/		return 0x821FAC98;
		  /* 821FAC98h */ case   30:  		/* lwz R11, <#[R20 + 16]> */
		/* 821FAC98h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000010) );
		/* 821FAC98h case   30:*/		return 0x821FAC9C;
		  /* 821FAC9Ch */ case   31:  		/* cmplw CR6, R27, R11 */
		/* 821FAC9Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821FAC9Ch case   31:*/		return 0x821FACA0;
		  /* 821FACA0h */ case   32:  		/* bc 12, CR6_EQ, 824 */
		/* 821FACA0h case   32:*/		if ( regs.CR[6].eq ) { return 0x821FAFD8;  }
		/* 821FACA0h case   32:*/		return 0x821FACA4;
		  /* 821FACA4h */ case   33:  		/* lwz R11, <#[R31 + 16]> */
		/* 821FACA4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821FACA4h case   33:*/		return 0x821FACA8;
		  /* 821FACA8h */ case   34:  		/* cmplw CR6, R27, R11 */
		/* 821FACA8h case   34:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821FACA8h case   34:*/		return 0x821FACAC;
		  /* 821FACACh */ case   35:  		/* bc 12, CR6_EQ, 812 */
		/* 821FACACh case   35:*/		if ( regs.CR[6].eq ) { return 0x821FAFD8;  }
		/* 821FACACh case   35:*/		return 0x821FACB0;
		  /* 821FACB0h */ case   36:  		/* lwz R11, <#[R24 + 20]> */
		/* 821FACB0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821FACB0h case   36:*/		return 0x821FACB4;
		  /* 821FACB4h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 821FACB4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FACB4h case   37:*/		return 0x821FACB8;
		  /* 821FACB8h */ case   38:  		/* bc 12, CR6_EQ, 800 */
		/* 821FACB8h case   38:*/		if ( regs.CR[6].eq ) { return 0x821FAFD8;  }
		/* 821FACB8h case   38:*/		return 0x821FACBC;
		  /* 821FACBCh */ case   39:  		/* rlwinm. R30, R19, 0, 24, 31 */
		/* 821FACBCh case   39:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R30,regs.R19);
		/* 821FACBCh case   39:*/		return 0x821FACC0;
		  /* 821FACC0h */ case   40:  		/* bc 4, CR0_EQ, 32 */
		/* 821FACC0h case   40:*/		if ( !regs.CR[0].eq ) { return 0x821FACE0;  }
		/* 821FACC0h case   40:*/		return 0x821FACC4;
		  /* 821FACC4h */ case   41:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FACC4h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FACC4h case   41:*/		return 0x821FACC8;
		  /* 821FACC8h */ case   42:  		/* mulli R10, R27, 40 */
		/* 821FACC8h case   42:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R27,0x28);
		/* 821FACC8h case   42:*/		return 0x821FACCC;
		  /* 821FACCCh */ case   43:  		/* add R11, R10, R11 */
		/* 821FACCCh case   43:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FACCCh case   43:*/		return 0x821FACD0;
		  /* 821FACD0h */ case   44:  		/* addi R10, R11, 4 */
		/* 821FACD0h case   44:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FACD0h case   44:*/		return 0x821FACD4;
		  /* 821FACD4h */ case   45:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FACD4h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FACD4h case   45:*/		return 0x821FACD8;
		  /* 821FACD8h */ case   46:  		/* oris R10, R10, 4096 */
		/* 821FACD8h case   46:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 821FACD8h case   46:*/		return 0x821FACDC;
		  /* 821FACDCh */ case   47:  		/* stw R10, <#[R11 + 4]> */
		/* 821FACDCh case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FACDCh case   47:*/		return 0x821FACE0;
	}
	return 0x821FACE0;
} // Block from 821FAC20h-821FACE0h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821FACE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FACE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FACE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FACE0);
		  /* 821FACE0h */ case    0:  		/* lwz R11, <#[R24 + 44]> */
		/* 821FACE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821FACE0h case    0:*/		return 0x821FACE4;
		  /* 821FACE4h */ case    1:  		/* mr R3, R31 */
		/* 821FACE4h case    1:*/		regs.R3 = regs.R31;
		/* 821FACE4h case    1:*/		return 0x821FACE8;
		  /* 821FACE8h */ case    2:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 821FACE8h case    2:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 821FACE8h case    2:*/		return 0x821FACEC;
		  /* 821FACECh */ case    3:  		/* bc 12, CR0_EQ, 44 */
		/* 821FACECh case    3:*/		if ( regs.CR[0].eq ) { return 0x821FAD18;  }
		/* 821FACECh case    3:*/		return 0x821FACF0;
		  /* 821FACF0h */ case    4:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 821FACF0h case    4:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 821FACF0h case    4:*/		return 0x821FACF4;
		  /* 821FACF4h */ case    5:  		/* bc 4, CR0_EQ, 1012 */
		/* 821FACF4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821FB0E8;  }
		/* 821FACF4h case    5:*/		return 0x821FACF8;
		  /* 821FACF8h */ case    6:  		/* mr R4, R5 */
		/* 821FACF8h case    6:*/		regs.R4 = regs.R5;
		/* 821FACF8h case    6:*/		return 0x821FACFC;
		  /* 821FACFCh */ case    7:  		/* bl -572 */
		/* 821FACFCh case    7:*/		regs.LR = 0x821FAD00; return 0x821FAAC0;
		/* 821FACFCh case    7:*/		return 0x821FAD00;
		  /* 821FAD00h */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FAD00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FAD00h case    8:*/		return 0x821FAD04;
		  /* 821FAD04h */ case    9:  		/* mulli R10, R27, 40 */
		/* 821FAD04h case    9:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R27,0x28);
		/* 821FAD04h case    9:*/		return 0x821FAD08;
		  /* 821FAD08h */ case   10:  		/* lwzx R9, <#[R10 + R11]> */
		/* 821FAD08h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FAD08h case   10:*/		return 0x821FAD0C;
		  /* 821FAD0Ch */ case   11:  		/* oris R9, R9, 32768 */
		/* 821FAD0Ch case   11:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x8000);
		/* 821FAD0Ch case   11:*/		return 0x821FAD10;
		  /* 821FAD10h */ case   12:  		/* stwx R9, <#[R10 + R11]> */
		/* 821FAD10h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FAD10h case   12:*/		return 0x821FAD14;
		  /* 821FAD14h */ case   13:  		/* b 708 */
		/* 821FAD14h case   13:*/		return 0x821FAFD8;
		/* 821FAD14h case   13:*/		return 0x821FAD18;
	}
	return 0x821FAD18;
} // Block from 821FACE0h-821FAD18h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821FAD18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAD18);
		  /* 821FAD18h */ case    0:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821FAD18h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821FAD18h case    0:*/		return 0x821FAD1C;
		  /* 821FAD1Ch */ case    1:  		/* bc 4, CR0_EQ, 980 */
		/* 821FAD1Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821FB0F0;  }
		/* 821FAD1Ch case    1:*/		return 0x821FAD20;
		  /* 821FAD20h */ case    2:  		/* mr R8, R23 */
		/* 821FAD20h case    2:*/		regs.R8 = regs.R23;
		/* 821FAD20h case    2:*/		return 0x821FAD24;
		  /* 821FAD24h */ case    3:  		/* li R7, 2 */
		/* 821FAD24h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821FAD24h case    3:*/		return 0x821FAD28;
		  /* 821FAD28h */ case    4:  		/* mr R6, R24 */
		/* 821FAD28h case    4:*/		regs.R6 = regs.R24;
		/* 821FAD28h case    4:*/		return 0x821FAD2C;
		  /* 821FAD2Ch */ case    5:  		/* mr R4, R27 */
		/* 821FAD2Ch case    5:*/		regs.R4 = regs.R27;
		/* 821FAD2Ch case    5:*/		return 0x821FAD30;
		  /* 821FAD30h */ case    6:  		/* bl -992 */
		/* 821FAD30h case    6:*/		regs.LR = 0x821FAD34; return 0x821FA950;
		/* 821FAD30h case    6:*/		return 0x821FAD34;
		  /* 821FAD34h */ case    7:  		/* lwz R11, <#[R24 + 44]> */
		/* 821FAD34h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821FAD34h case    7:*/		return 0x821FAD38;
		  /* 821FAD38h */ case    8:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 821FAD38h case    8:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 821FAD38h case    8:*/		return 0x821FAD3C;
		  /* 821FAD3Ch */ case    9:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FAD3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FAD3Ch case    9:*/		return 0x821FAD40;
		  /* 821FAD40h */ case   10:  		/* bc 12, CR0_EQ, 184 */
		/* 821FAD40h case   10:*/		if ( regs.CR[0].eq ) { return 0x821FADF8;  }
		/* 821FAD40h case   10:*/		return 0x821FAD44;
		  /* 821FAD44h */ case   11:  		/* mulli R28, R27, 40 */
		/* 821FAD44h case   11:*/		cpu::op::mulli<0>(regs,&regs.R28,regs.R27,0x28);
		/* 821FAD44h case   11:*/		return 0x821FAD48;
		  /* 821FAD48h */ case   12:  		/* add R11, R28, R11 */
		/* 821FAD48h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821FAD48h case   12:*/		return 0x821FAD4C;
		  /* 821FAD4Ch */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821FAD4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAD4Ch case   13:*/		return 0x821FAD50;
		  /* 821FAD50h */ case   14:  		/* rlwinm R11, R11, 0, 25, 27 */
		/* 821FAD50h case   14:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R11,regs.R11);
		/* 821FAD50h case   14:*/		return 0x821FAD54;
		  /* 821FAD54h */ case   15:  		/* cmplwi CR6, R11, 48 */
		/* 821FAD54h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000030);
		/* 821FAD54h case   15:*/		return 0x821FAD58;
		  /* 821FAD58h */ case   16:  		/* bc 12, CR6_EQ, 936 */
		/* 821FAD58h case   16:*/		if ( regs.CR[6].eq ) { return 0x821FB100;  }
		/* 821FAD58h case   16:*/		return 0x821FAD5C;
		  /* 821FAD5Ch */ case   17:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FAD5Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FAD5Ch case   17:*/		return 0x821FAD60;
		  /* 821FAD60h */ case   18:  		/* li R10, 1 */
		/* 821FAD60h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821FAD60h case   18:*/		return 0x821FAD64;
		  /* 821FAD64h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 821FAD64h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FAD64h case   19:*/		return 0x821FAD68;
		  /* 821FAD68h */ case   20:  		/* lwzx R9, <#[R28 + R11]> */
		/* 821FAD68h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 821FAD68h case   20:*/		return 0x821FAD6C;
		  /* 821FAD6Ch */ case   21:  		/* rlwimi R9, R10, 1, 29, 31 */
		/* 821FAD6Ch case   21:*/		cpu::op::rlwimi<0,1,29,31>(regs,&regs.R9,regs.R10);
		/* 821FAD6Ch case   21:*/		return 0x821FAD70;
		  /* 821FAD70h */ case   22:  		/* stwx R9, <#[R28 + R11]> */
		/* 821FAD70h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 821FAD70h case   22:*/		return 0x821FAD74;
		  /* 821FAD74h */ case   23:  		/* bc 12, CR6_EQ, 612 */
		/* 821FAD74h case   23:*/		if ( regs.CR[6].eq ) { return 0x821FAFD8;  }
		/* 821FAD74h case   23:*/		return 0x821FAD78;
		  /* 821FAD78h */ case   24:  		/* lwz R11, <#[R24 + 44]> */
		/* 821FAD78h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821FAD78h case   24:*/		return 0x821FAD7C;
		  /* 821FAD7Ch */ case   25:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 821FAD7Ch case   25:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 821FAD7Ch case   25:*/		return 0x821FAD80;
		  /* 821FAD80h */ case   26:  		/* bc 12, CR0_EQ, 600 */
		/* 821FAD80h case   26:*/		if ( regs.CR[0].eq ) { return 0x821FAFD8;  }
		/* 821FAD80h case   26:*/		return 0x821FAD84;
		  /* 821FAD84h */ case   27:  		/* mr R5, R31 */
		/* 821FAD84h case   27:*/		regs.R5 = regs.R31;
		/* 821FAD84h case   27:*/		return 0x821FAD88;
		  /* 821FAD88h */ case   28:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FAD88h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FAD88h case   28:*/		return 0x821FAD8C;
		  /* 821FAD8Ch */ case   29:  		/* mr R4, R27 */
		/* 821FAD8Ch case   29:*/		regs.R4 = regs.R27;
		/* 821FAD8Ch case   29:*/		return 0x821FAD90;
		  /* 821FAD90h */ case   30:  		/* bl -41952 */
		/* 821FAD90h case   30:*/		regs.LR = 0x821FAD94; return 0x821F09B0;
		/* 821FAD90h case   30:*/		return 0x821FAD94;
		  /* 821FAD94h */ case   31:  		/* lwz R11, <#[R24 + 20]> */
		/* 821FAD94h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821FAD94h case   31:*/		return 0x821FAD98;
		  /* 821FAD98h */ case   32:  		/* li R30, 0 */
		/* 821FAD98h case   32:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FAD98h case   32:*/		return 0x821FAD9C;
		  /* 821FAD9Ch */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 821FAD9Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FAD9Ch case   33:*/		return 0x821FADA0;
		  /* 821FADA0h */ case   34:  		/* bc 4, CR6_GT, 60 */
		/* 821FADA0h case   34:*/		if ( !regs.CR[6].gt ) { return 0x821FADDC;  }
		/* 821FADA0h case   34:*/		return 0x821FADA4;
		  /* 821FADA4h */ case   35:  		/* addi R29, R3, -8 */
		/* 821FADA4h case   35:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0xFFFFFFF8);
		/* 821FADA4h case   35:*/		return 0x821FADA8;
		  /* 821FADA8h */ case   36:  		/* mr R6, R30 */
		/* 821FADA8h case   36:*/		regs.R6 = regs.R30;
		/* 821FADA8h case   36:*/		return 0x821FADAC;
		  /* 821FADACh */ case   37:  		/* mr R5, R27 */
		/* 821FADACh case   37:*/		regs.R5 = regs.R27;
		/* 821FADACh case   37:*/		return 0x821FADB0;
		  /* 821FADB0h */ case   38:  		/* mr R4, R31 */
		/* 821FADB0h case   38:*/		regs.R4 = regs.R31;
		/* 821FADB0h case   38:*/		return 0x821FADB4;
		  /* 821FADB4h */ case   39:  		/* addi R3, R1, 88 */
		/* 821FADB4h case   39:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821FADB4h case   39:*/		return 0x821FADB8;
		  /* 821FADB8h */ case   40:  		/* bl 194200 */
		/* 821FADB8h case   40:*/		regs.LR = 0x821FADBC; return 0x8222A450;
		/* 821FADB8h case   40:*/		return 0x821FADBC;
		  /* 821FADBCh */ case   41:  		/* lwz R11, <#[R3]> */
		/* 821FADBCh case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FADBCh case   41:*/		return 0x821FADC0;
		  /* 821FADC0h */ case   42:  		/* addi R30, R30, 1 */
		/* 821FADC0h case   42:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821FADC0h case   42:*/		return 0x821FADC4;
		  /* 821FADC4h */ case   43:  		/* stwu R11, <#[R29 + 8]> */
		/* 821FADC4h case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		regs.R29 = (uint32)(regs.R29 + 0x00000008);
		/* 821FADC4h case   43:*/		return 0x821FADC8;
		  /* 821FADC8h */ case   44:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FADC8h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FADC8h case   44:*/		return 0x821FADCC;
		  /* 821FADCCh */ case   45:  		/* stw R11, <#[R29 + 4]> */
		/* 821FADCCh case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FADCCh case   45:*/		return 0x821FADD0;
		  /* 821FADD0h */ case   46:  		/* lwz R11, <#[R24 + 20]> */
		/* 821FADD0h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821FADD0h case   46:*/		return 0x821FADD4;
		  /* 821FADD4h */ case   47:  		/* cmplw CR6, R30, R11 */
		/* 821FADD4h case   47:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821FADD4h case   47:*/		return 0x821FADD8;
		  /* 821FADD8h */ case   48:  		/* bc 12, CR6_LT, -48 */
		/* 821FADD8h case   48:*/		if ( regs.CR[6].lt ) { return 0x821FADA8;  }
		/* 821FADD8h case   48:*/		return 0x821FADDC;
	}
	return 0x821FADDC;
} // Block from 821FAD18h-821FADDCh (49 instructions)

//////////////////////////////////////////////////////
// Block at 821FADDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FADDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FADDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FADDC);
		  /* 821FADDCh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FADDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FADDCh case    0:*/		return 0x821FADE0;
		  /* 821FADE0h */ case    1:  		/* add R11, R28, R11 */
		/* 821FADE0h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821FADE0h case    1:*/		return 0x821FADE4;
		  /* 821FADE4h */ case    2:  		/* addi R10, R11, 4 */
		/* 821FADE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FADE4h case    2:*/		return 0x821FADE8;
		  /* 821FADE8h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FADE8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FADE8h case    3:*/		return 0x821FADEC;
		  /* 821FADECh */ case    4:  		/* ori R10, R10, 2 */
		/* 821FADECh case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821FADECh case    4:*/		return 0x821FADF0;
		  /* 821FADF0h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821FADF0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FADF0h case    5:*/		return 0x821FADF4;
		  /* 821FADF4h */ case    6:  		/* b 484 */
		/* 821FADF4h case    6:*/		return 0x821FAFD8;
		/* 821FADF4h case    6:*/		return 0x821FADF8;
	}
	return 0x821FADF8;
} // Block from 821FADDCh-821FADF8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FADF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FADF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FADF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FADF8);
		  /* 821FADF8h */ case    0:  		/* mulli R25, R27, 40 */
		/* 821FADF8h case    0:*/		cpu::op::mulli<0>(regs,&regs.R25,regs.R27,0x28);
		/* 821FADF8h case    0:*/		return 0x821FADFC;
		  /* 821FADFCh */ case    1:  		/* lwzx R10, <#[R25 + R11]> */
		/* 821FADFCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 821FADFCh case    1:*/		return 0x821FAE00;
		  /* 821FAE00h */ case    2:  		/* mr R9, R21 */
		/* 821FAE00h case    2:*/		regs.R9 = regs.R21;
		/* 821FAE00h case    2:*/		return 0x821FAE04;
		  /* 821FAE04h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821FAE04h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FAE04h case    3:*/		return 0x821FAE08;
		  /* 821FAE08h */ case    4:  		/* rlwimi R9, R10, 0, 0, 28 */
		/* 821FAE08h case    4:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R9,regs.R10);
		/* 821FAE08h case    4:*/		return 0x821FAE0C;
		  /* 821FAE0Ch */ case    5:  		/* stwx R9, <#[R25 + R11]> */
		/* 821FAE0Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 821FAE0Ch case    5:*/		return 0x821FAE10;
		  /* 821FAE10h */ case    6:  		/* bc 12, CR6_EQ, 456 */
		/* 821FAE10h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FAFD8;  }
		/* 821FAE10h case    6:*/		return 0x821FAE14;
		  /* 821FAE14h */ case    7:  		/* lwz R11, <#[R31 + 44]> */
		/* 821FAE14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821FAE14h case    7:*/		return 0x821FAE18;
		  /* 821FAE18h */ case    8:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 821FAE18h case    8:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 821FAE18h case    8:*/		return 0x821FAE1C;
		  /* 821FAE1Ch */ case    9:  		/* bc 4, CR0_EQ, 444 */
		/* 821FAE1Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821FAFD8;  }
		/* 821FAE1Ch case    9:*/		return 0x821FAE20;
		  /* 821FAE20h */ case   10:  		/* mr R5, R31 */
		/* 821FAE20h case   10:*/		regs.R5 = regs.R31;
		/* 821FAE20h case   10:*/		return 0x821FAE24;
		  /* 821FAE24h */ case   11:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FAE24h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FAE24h case   11:*/		return 0x821FAE28;
		  /* 821FAE28h */ case   12:  		/* mr R4, R27 */
		/* 821FAE28h case   12:*/		regs.R4 = regs.R27;
		/* 821FAE28h case   12:*/		return 0x821FAE2C;
		  /* 821FAE2Ch */ case   13:  		/* bl -42108 */
		/* 821FAE2Ch case   13:*/		regs.LR = 0x821FAE30; return 0x821F09B0;
		/* 821FAE2Ch case   13:*/		return 0x821FAE30;
		  /* 821FAE30h */ case   14:  		/* lwz R11, <#[R24 + 20]> */
		/* 821FAE30h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821FAE30h case   14:*/		return 0x821FAE34;
		  /* 821FAE34h */ case   15:  		/* li R30, 0 */
		/* 821FAE34h case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FAE34h case   15:*/		return 0x821FAE38;
		  /* 821FAE38h */ case   16:  		/* li R28, 0 */
		/* 821FAE38h case   16:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821FAE38h case   16:*/		return 0x821FAE3C;
		  /* 821FAE3Ch */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821FAE3Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FAE3Ch case   17:*/		return 0x821FAE40;
		  /* 821FAE40h */ case   18:  		/* bc 4, CR6_GT, 408 */
		/* 821FAE40h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821FAFD8;  }
		/* 821FAE40h case   18:*/		return 0x821FAE44;
		  /* 821FAE44h */ case   19:  		/* mr R26, R3 */
		/* 821FAE44h case   19:*/		regs.R26 = regs.R3;
		/* 821FAE44h case   19:*/		return 0x821FAE48;
		  /* 821FAE48h */ case   20:  		/* mr R6, R28 */
		/* 821FAE48h case   20:*/		regs.R6 = regs.R28;
		/* 821FAE48h case   20:*/		return 0x821FAE4C;
		  /* 821FAE4Ch */ case   21:  		/* mr R5, R27 */
		/* 821FAE4Ch case   21:*/		regs.R5 = regs.R27;
		/* 821FAE4Ch case   21:*/		return 0x821FAE50;
		  /* 821FAE50h */ case   22:  		/* mr R4, R31 */
		/* 821FAE50h case   22:*/		regs.R4 = regs.R31;
		/* 821FAE50h case   22:*/		return 0x821FAE54;
		  /* 821FAE54h */ case   23:  		/* addi R3, R1, 80 */
		/* 821FAE54h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821FAE54h case   23:*/		return 0x821FAE58;
		  /* 821FAE58h */ case   24:  		/* bl 194040 */
		/* 821FAE58h case   24:*/		regs.LR = 0x821FAE5C; return 0x8222A450;
		/* 821FAE58h case   24:*/		return 0x821FAE5C;
		  /* 821FAE5Ch */ case   25:  		/* ld R11, <#[R1 + 80]> */
		/* 821FAE5Ch case   25:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821FAE5Ch case   25:*/		return 0x821FAE60;
		  /* 821FAE60h */ case   26:  		/* addi R4, R1, 80 */
		/* 821FAE60h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821FAE60h case   26:*/		return 0x821FAE64;
		  /* 821FAE64h */ case   27:  		/* mr R3, R31 */
		/* 821FAE64h case   27:*/		regs.R3 = regs.R31;
		/* 821FAE64h case   27:*/		return 0x821FAE68;
		  /* 821FAE68h */ case   28:  		/* std R11, <#[R26]> */
		/* 821FAE68h case   28:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821FAE68h case   28:*/		return 0x821FAE6C;
		  /* 821FAE6Ch */ case   29:  		/* bl -35820 */
		/* 821FAE6Ch case   29:*/		regs.LR = 0x821FAE70; return 0x821F2280;
		/* 821FAE6Ch case   29:*/		return 0x821FAE70;
		  /* 821FAE70h */ case   30:  		/* lwz R11, <#[R3 + 8]> */
		/* 821FAE70h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821FAE70h case   30:*/		return 0x821FAE74;
		  /* 821FAE74h */ case   31:  		/* mr R29, R3 */
		/* 821FAE74h case   31:*/		regs.R29 = regs.R3;
		/* 821FAE74h case   31:*/		return 0x821FAE78;
		  /* 821FAE78h */ case   32:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821FAE78h case   32:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821FAE78h case   32:*/		return 0x821FAE7C;
		  /* 821FAE7Ch */ case   33:  		/* cmplwi CR6, R11, 384 */
		/* 821FAE7Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821FAE7Ch case   33:*/		return 0x821FAE80;
		  /* 821FAE80h */ case   34:  		/* bc 4, CR6_EQ, 12 */
		/* 821FAE80h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821FAE8C;  }
		/* 821FAE80h case   34:*/		return 0x821FAE84;
		  /* 821FAE84h */ case   35:  		/* lwz R11, <#[R3 + 44]> */
		/* 821FAE84h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 821FAE84h case   35:*/		return 0x821FAE88;
		  /* 821FAE88h */ case   36:  		/* lwz R29, <#[R11 + 12]> */
		/* 821FAE88h case   36:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FAE88h case   36:*/		return 0x821FAE8C;
	}
	return 0x821FAE8C;
} // Block from 821FADF8h-821FAE8Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 821FAE8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAE8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAE8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAE8C);
		  /* 821FAE8Ch */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 821FAE8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821FAE8Ch case    0:*/		return 0x821FAE90;
		  /* 821FAE90h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821FAE90h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821FAE90h case    1:*/		return 0x821FAE94;
		  /* 821FAE94h */ case    2:  		/* cmplwi CR6, R11, 14464 */
		/* 821FAE94h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003880);
		/* 821FAE94h case    2:*/		return 0x821FAE98;
		  /* 821FAE98h */ case    3:  		/* bc 4, CR6_EQ, 208 */
		/* 821FAE98h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FAF68;  }
		/* 821FAE98h case    3:*/		return 0x821FAE9C;
		  /* 821FAE9Ch */ case    4:  		/* lwz R11, <#[R31 + 48]> */
		/* 821FAE9Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821FAE9Ch case    4:*/		return 0x821FAEA0;
		  /* 821FAEA0h */ case    5:  		/* lis R10, -1 */
		/* 821FAEA0h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821FAEA0h case    5:*/		return 0x821FAEA4;
		  /* 821FAEA4h */ case    6:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821FAEA4h case    6:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821FAEA4h case    6:*/		return 0x821FAEA8;
		  /* 821FAEA8h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821FAEA8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FAEA8h case    7:*/		return 0x821FAEAC;
		  /* 821FAEACh */ case    8:  		/* bc 4, CR6_EQ, 112 */
		/* 821FAEACh case    8:*/		if ( !regs.CR[6].eq ) { return 0x821FAF1C;  }
		/* 821FAEACh case    8:*/		return 0x821FAEB0;
		  /* 821FAEB0h */ case    9:  		/* lwz R8, <#[R31 + 536]> */
		/* 821FAEB0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000218) );
		/* 821FAEB0h case    9:*/		return 0x821FAEB4;
		  /* 821FAEB4h */ case   10:  		/* li R11, 0 */
		/* 821FAEB4h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FAEB4h case   10:*/		return 0x821FAEB8;
		  /* 821FAEB8h */ case   11:  		/* cmplwi CR6, R8, 0 */
		/* 821FAEB8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821FAEB8h case   11:*/		return 0x821FAEBC;
		  /* 821FAEBCh */ case   12:  		/* bc 12, CR6_EQ, 64 */
		/* 821FAEBCh case   12:*/		if ( regs.CR[6].eq ) { return 0x821FAEFC;  }
		/* 821FAEBCh case   12:*/		return 0x821FAEC0;
		  /* 821FAEC0h */ case   13:  		/* addi R10, R31, 348 */
		/* 821FAEC0h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x15C);
		/* 821FAEC0h case   13:*/		return 0x821FAEC4;
		  /* 821FAEC4h */ case   14:  		/* lwz R9, <#[R10 + 4]> */
		/* 821FAEC4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 821FAEC4h case   14:*/		return 0x821FAEC8;
		  /* 821FAEC8h */ case   15:  		/* cmplw CR6, R29, R9 */
		/* 821FAEC8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 821FAEC8h case   15:*/		return 0x821FAECC;
		  /* 821FAECCh */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 821FAECCh case   16:*/		if ( !regs.CR[6].eq ) { return 0x821FAEEC;  }
		/* 821FAECCh case   16:*/		return 0x821FAED0;
		  /* 821FAED0h */ case   17:  		/* lwz R9, <#[R10]> */
		/* 821FAED0h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821FAED0h case   17:*/		return 0x821FAED4;
		  /* 821FAED4h */ case   18:  		/* rlwinm. R7, R9, 0, 23, 26 */
		/* 821FAED4h case   18:*/		cpu::op::rlwinm<1,0,23,26>(regs,&regs.R7,regs.R9);
		/* 821FAED4h case   18:*/		return 0x821FAED8;
		  /* 821FAED8h */ case   19:  		/* bc 4, CR0_EQ, 20 */
		/* 821FAED8h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821FAEEC;  }
		/* 821FAED8h case   19:*/		return 0x821FAEDC;
		  /* 821FAEDCh */ case   20:  		/* rlwinm. R9, R9, 0, 27, 31 */
		/* 821FAEDCh case   20:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821FAEDCh case   20:*/		return 0x821FAEE0;
		  /* 821FAEE0h */ case   21:  		/* bc 12, CR0_EQ, 28 */
		/* 821FAEE0h case   21:*/		if ( regs.CR[0].eq ) { return 0x821FAEFC;  }
		/* 821FAEE0h case   21:*/		return 0x821FAEE4;
		  /* 821FAEE4h */ case   22:  		/* cmplwi CR6, R9, 4 */
		/* 821FAEE4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 821FAEE4h case   22:*/		return 0x821FAEE8;
		  /* 821FAEE8h */ case   23:  		/* bc 12, CR6_EQ, 20 */
		/* 821FAEE8h case   23:*/		if ( regs.CR[6].eq ) { return 0x821FAEFC;  }
		/* 821FAEE8h case   23:*/		return 0x821FAEEC;
	}
	return 0x821FAEEC;
} // Block from 821FAE8Ch-821FAEECh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821FAEECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAEEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAEEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAEEC);
		  /* 821FAEECh */ case    0:  		/* addi R11, R11, 1 */
		/* 821FAEECh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FAEECh case    0:*/		return 0x821FAEF0;
		  /* 821FAEF0h */ case    1:  		/* addi R10, R10, 12 */
		/* 821FAEF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 821FAEF0h case    1:*/		return 0x821FAEF4;
		  /* 821FAEF4h */ case    2:  		/* cmplw CR6, R11, R8 */
		/* 821FAEF4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821FAEF4h case    2:*/		return 0x821FAEF8;
		  /* 821FAEF8h */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 821FAEF8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821FAEC4;  }
		/* 821FAEF8h case    3:*/		return 0x821FAEFC;
	}
	return 0x821FAEFC;
} // Block from 821FAEECh-821FAEFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FAEFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAEFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAEFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAEFC);
		  /* 821FAEFCh */ case    0:  		/* cmplw CR6, R11, R8 */
		/* 821FAEFCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821FAEFCh case    0:*/		return 0x821FAF00;
		  /* 821FAF00h */ case    1:  		/* bc 4, CR6_LT, 28 */
		/* 821FAF00h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821FAF1C;  }
		/* 821FAF00h case    1:*/		return 0x821FAF04;
		  /* 821FAF04h */ case    2:  		/* addi R11, R11, 29 */
		/* 821FAF04h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1D);
		/* 821FAF04h case    2:*/		return 0x821FAF08;
		  /* 821FAF08h */ case    3:  		/* mulli R11, R11, 12 */
		/* 821FAF08h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821FAF08h case    3:*/		return 0x821FAF0C;
		  /* 821FAF0Ch */ case    4:  		/* lwzx R10, <#[R11 + R31]> */
		/* 821FAF0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821FAF0Ch case    4:*/		return 0x821FAF10;
		  /* 821FAF10h */ case    5:  		/* ori R10, R10, 8192 */
		/* 821FAF10h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2000);
		/* 821FAF10h case    5:*/		return 0x821FAF14;
		  /* 821FAF14h */ case    6:  		/* stwx R10, <#[R11 + R31]> */
		/* 821FAF14h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821FAF14h case    6:*/		return 0x821FAF18;
		  /* 821FAF18h */ case    7:  		/* b 80 */
		/* 821FAF18h case    7:*/		return 0x821FAF68;
		/* 821FAF18h case    7:*/		return 0x821FAF1C;
	}
	return 0x821FAF1C;
} // Block from 821FAEFCh-821FAF1Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FAF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAF1C);
		  /* 821FAF1Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821FAF1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FAF1Ch case    0:*/		return 0x821FAF20;
		  /* 821FAF20h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 821FAF20h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FAF50;  }
		/* 821FAF20h case    1:*/		return 0x821FAF24;
		  /* 821FAF24h */ case    2:  		/* li R8, 0 */
		/* 821FAF24h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821FAF24h case    2:*/		return 0x821FAF28;
		  /* 821FAF28h */ case    3:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FAF28h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FAF28h case    3:*/		return 0x821FAF2C;
		  /* 821FAF2Ch */ case    4:  		/* li R7, 0 */
		/* 821FAF2Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FAF2Ch case    4:*/		return 0x821FAF30;
		  /* 821FAF30h */ case    5:  		/* li R6, 117 */
		/* 821FAF30h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821FAF30h case    5:*/		return 0x821FAF34;
		  /* 821FAF34h */ case    6:  		/* li R5, 0 */
		/* 821FAF34h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FAF34h case    6:*/		return 0x821FAF38;
		  /* 821FAF38h */ case    7:  		/* mr R3, R31 */
		/* 821FAF38h case    7:*/		regs.R3 = regs.R31;
		/* 821FAF38h case    7:*/		return 0x821FAF3C;
		  /* 821FAF3Ch */ case    8:  		/* bl 170588 */
		/* 821FAF3Ch case    8:*/		regs.LR = 0x821FAF40; return 0x82224998;
		/* 821FAF3Ch case    8:*/		return 0x821FAF40;
		  /* 821FAF40h */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 821FAF40h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821FAF40h case    9:*/		return 0x821FAF44;
		  /* 821FAF44h */ case   10:  		/* mr R30, R3 */
		/* 821FAF44h case   10:*/		regs.R30 = regs.R3;
		/* 821FAF44h case   10:*/		return 0x821FAF48;
		  /* 821FAF48h */ case   11:  		/* oris R11, R11, 512 */
		/* 821FAF48h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821FAF48h case   11:*/		return 0x821FAF4C;
		  /* 821FAF4Ch */ case   12:  		/* stw R11, <#[R3 + 8]> */
		/* 821FAF4Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821FAF4Ch case   12:*/		return 0x821FAF50;
	}
	return 0x821FAF50;
} // Block from 821FAF1Ch-821FAF50h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FAF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAF50);
		  /* 821FAF50h */ case    0:  		/* mr R4, R29 */
		/* 821FAF50h case    0:*/		regs.R4 = regs.R29;
		/* 821FAF50h case    0:*/		return 0x821FAF54;
		  /* 821FAF54h */ case    1:  		/* mr R3, R31 */
		/* 821FAF54h case    1:*/		regs.R3 = regs.R31;
		/* 821FAF54h case    1:*/		return 0x821FAF58;
		  /* 821FAF58h */ case    2:  		/* bl -536408 */
		/* 821FAF58h case    2:*/		regs.LR = 0x821FAF5C; return 0x82178000;
		/* 821FAF58h case    2:*/		return 0x821FAF5C;
		  /* 821FAF5Ch */ case    3:  		/* mr R4, R3 */
		/* 821FAF5Ch case    3:*/		regs.R4 = regs.R3;
		/* 821FAF5Ch case    3:*/		return 0x821FAF60;
		  /* 821FAF60h */ case    4:  		/* mr R3, R30 */
		/* 821FAF60h case    4:*/		regs.R3 = regs.R30;
		/* 821FAF60h case    4:*/		return 0x821FAF64;
		  /* 821FAF64h */ case    5:  		/* bl -535964 */
		/* 821FAF64h case    5:*/		regs.LR = 0x821FAF68; return 0x821781C8;
		/* 821FAF64h case    5:*/		return 0x821FAF68;
	}
	return 0x821FAF68;
} // Block from 821FAF50h-821FAF68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FAF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAF68);
		  /* 821FAF68h */ case    0:  		/* lwz R11, <#[R24 + 20]> */
		/* 821FAF68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821FAF68h case    0:*/		return 0x821FAF6C;
		  /* 821FAF6Ch */ case    1:  		/* addi R28, R28, 1 */
		/* 821FAF6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821FAF6Ch case    1:*/		return 0x821FAF70;
		  /* 821FAF70h */ case    2:  		/* addi R26, R26, 8 */
		/* 821FAF70h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x8);
		/* 821FAF70h case    2:*/		return 0x821FAF74;
		  /* 821FAF74h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 821FAF74h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821FAF74h case    3:*/		return 0x821FAF78;
		  /* 821FAF78h */ case    4:  		/* bc 12, CR6_LT, -304 */
		/* 821FAF78h case    4:*/		if ( regs.CR[6].lt ) { return 0x821FAE48;  }
		/* 821FAF78h case    4:*/		return 0x821FAF7C;
		  /* 821FAF7Ch */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821FAF7Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FAF7Ch case    5:*/		return 0x821FAF80;
		  /* 821FAF80h */ case    6:  		/* bc 12, CR6_EQ, 88 */
		/* 821FAF80h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FAFD8;  }
		/* 821FAF80h case    6:*/		return 0x821FAF84;
		  /* 821FAF84h */ case    7:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FAF84h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FAF84h case    7:*/		return 0x821FAF88;
		  /* 821FAF88h */ case    8:  		/* rlwinm R10, R30, 0, 0, 30 */
		/* 821FAF88h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R30);
		/* 821FAF88h case    8:*/		return 0x821FAF8C;
		  /* 821FAF8Ch */ case    9:  		/* addi R11, R11, 24 */
		/* 821FAF8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x18);
		/* 821FAF8Ch case    9:*/		return 0x821FAF90;
		  /* 821FAF90h */ case   10:  		/* addi R10, R10, 36 */
		/* 821FAF90h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821FAF90h case   10:*/		return 0x821FAF94;
		  /* 821FAF94h */ case   11:  		/* addi R9, R11, 4 */
		/* 821FAF94h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821FAF94h case   11:*/		return 0x821FAF98;
		  /* 821FAF98h */ case   12:  		/* addi R8, R10, 4 */
		/* 821FAF98h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821FAF98h case   12:*/		return 0x821FAF9C;
		  /* 821FAF9Ch */ case   13:  		/* ori R9, R9, 1 */
		/* 821FAF9Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821FAF9Ch case   13:*/		return 0x821FAFA0;
		  /* 821FAFA0h */ case   14:  		/* lwz R7, <#[R11 + 4]> */
		/* 821FAFA0h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAFA0h case   14:*/		return 0x821FAFA4;
		  /* 821FAFA4h */ case   15:  		/* addi R6, R10, -36 */
		/* 821FAFA4h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821FAFA4h case   15:*/		return 0x821FAFA8;
		  /* 821FAFA8h */ case   16:  		/* stw R7, <#[R10 + 4]> */
		/* 821FAFA8h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821FAFA8h case   16:*/		return 0x821FAFAC;
		  /* 821FAFACh */ case   17:  		/* lwz R7, <#[R11 + 4]> */
		/* 821FAFACh case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAFACh case   17:*/		return 0x821FAFB0;
		  /* 821FAFB0h */ case   18:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821FAFB0h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821FAFB0h case   18:*/		return 0x821FAFB4;
		  /* 821FAFB4h */ case   19:  		/* stw R8, <#[R7 + 36]> */
		/* 821FAFB4h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000024) );
		/* 821FAFB4h case   19:*/		return 0x821FAFB8;
		  /* 821FAFB8h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821FAFB8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821FAFB8h case   20:*/		return 0x821FAFBC;
		  /* 821FAFBCh */ case   21:  		/* stw R6, <#[R11 + 4]> */
		/* 821FAFBCh case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAFBCh case   21:*/		return 0x821FAFC0;
		  /* 821FAFC0h */ case   22:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FAFC0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FAFC0h case   22:*/		return 0x821FAFC4;
		  /* 821FAFC4h */ case   23:  		/* add R11, R25, R11 */
		/* 821FAFC4h case   23:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821FAFC4h case   23:*/		return 0x821FAFC8;
		  /* 821FAFC8h */ case   24:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FAFC8h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAFC8h case   24:*/		return 0x821FAFCC;
		  /* 821FAFCCh */ case   25:  		/* ori R9, R10, 2 */
		/* 821FAFCCh case   25:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 821FAFCCh case   25:*/		return 0x821FAFD0;
		  /* 821FAFD0h */ case   26:  		/* addi R10, R11, 4 */
		/* 821FAFD0h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FAFD0h case   26:*/		return 0x821FAFD4;
		  /* 821FAFD4h */ case   27:  		/* stw R9, <#[R11 + 4]> */
		/* 821FAFD4h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAFD4h case   27:*/		return 0x821FAFD8;
	}
	return 0x821FAFD8;
} // Block from 821FAF68h-821FAFD8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821FAFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAFD8);
		  /* 821FAFD8h */ case    0:  		/* lwz R11, <#[R22 + 12]> */
		/* 821FAFD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000000C) );
		/* 821FAFD8h case    0:*/		return 0x821FAFDC;
		  /* 821FAFDCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FAFDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FAFDCh case    1:*/		return 0x821FAFE0;
		  /* 821FAFE0h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821FAFE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FAFF0;  }
		/* 821FAFE0h case    2:*/		return 0x821FAFE4;
		  /* 821FAFE4h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FAFE4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FAFE4h case    3:*/		return 0x821FAFE8;
		  /* 821FAFE8h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821FAFE8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FAFE8h case    4:*/		return 0x821FAFEC;
		  /* 821FAFECh */ case    5:  		/* bc 4, CR6_EQ, 300 */
		/* 821FAFECh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FB118;  }
		/* 821FAFECh case    5:*/		return 0x821FAFF0;
	}
	return 0x821FAFF0;
} // Block from 821FAFD8h-821FAFF0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FAFF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FAFF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FAFF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FAFF0);
		  /* 821FAFF0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821FAFF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FAFF0h case    0:*/		return 0x821FAFF4;
		  /* 821FAFF4h */ case    1:  		/* mr R22, R11 */
		/* 821FAFF4h case    1:*/		regs.R22 = regs.R11;
		/* 821FAFF4h case    1:*/		return 0x821FAFF8;
		  /* 821FAFF8h */ case    2:  		/* bc 4, CR6_EQ, -920 */
		/* 821FAFF8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FAC60;  }
		/* 821FAFF8h case    2:*/		return 0x821FAFFC;
		  /* 821FAFFCh */ case    3:  		/* rlwinm. R11, R19, 0, 24, 31 */
		/* 821FAFFCh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R19);
		/* 821FAFFCh case    3:*/		return 0x821FB000;
		  /* 821FB000h */ case    4:  		/* bc 12, CR0_EQ, 212 */
		/* 821FB000h case    4:*/		if ( regs.CR[0].eq ) { return 0x821FB0D4;  }
		/* 821FB000h case    4:*/		return 0x821FB004;
		  /* 821FB004h */ case    5:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FB004h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB004h case    5:*/		return 0x821FB008;
		  /* 821FB008h */ case    6:  		/* li R29, 0 */
		/* 821FB008h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FB008h case    6:*/		return 0x821FB00C;
		  /* 821FB00Ch */ case    7:  		/* lwz R11, <#[R11 + 28]> */
		/* 821FB00Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821FB00Ch case    7:*/		return 0x821FB010;
		  /* 821FB010h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821FB010h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821FB010h case    8:*/		return 0x821FB014;
		  /* 821FB014h */ case    9:  		/* bc 4, CR0_EQ, 192 */
		/* 821FB014h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821FB0D4;  }
		/* 821FB014h case    9:*/		return 0x821FB018;
		  /* 821FB018h */ case   10:  		/* mr R30, R11 */
		/* 821FB018h case   10:*/		regs.R30 = regs.R11;
		/* 821FB018h case   10:*/		return 0x821FB01C;
		  /* 821FB01Ch */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 821FB01Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821FB01Ch case   11:*/		return 0x821FB020;
		  /* 821FB020h */ case   12:  		/* bc 12, CR0_EQ, 180 */
		/* 821FB020h case   12:*/		if ( regs.CR[0].eq ) { return 0x821FB0D4;  }
		/* 821FB020h case   12:*/		return 0x821FB024;
		  /* 821FB024h */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FB024h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FB024h case   13:*/		return 0x821FB028;
		  /* 821FB028h */ case   14:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821FB028h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821FB028h case   14:*/		return 0x821FB02C;
		  /* 821FB02Ch */ case   15:  		/* cmplwi CR6, R11, 12288 */
		/* 821FB02Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003000);
		/* 821FB02Ch case   15:*/		return 0x821FB030;
		  /* 821FB030h */ case   16:  		/* bc 4, CR6_EQ, 36 */
		/* 821FB030h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821FB054;  }
		/* 821FB030h case   16:*/		return 0x821FB034;
		  /* 821FB034h */ case   17:  		/* cmplwi CR6, R29, 0 */
		/* 821FB034h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FB034h case   17:*/		return 0x821FB038;
		  /* 821FB038h */ case   18:  		/* bc 12, CR6_EQ, 24 */
		/* 821FB038h case   18:*/		if ( regs.CR[6].eq ) { return 0x821FB050;  }
		/* 821FB038h case   18:*/		return 0x821FB03C;
		  /* 821FB03Ch */ case   19:  		/* mr R6, R31 */
		/* 821FB03Ch case   19:*/		regs.R6 = regs.R31;
		/* 821FB03Ch case   19:*/		return 0x821FB040;
		  /* 821FB040h */ case   20:  		/* mr R5, R29 */
		/* 821FB040h case   20:*/		regs.R5 = regs.R29;
		/* 821FB040h case   20:*/		return 0x821FB044;
		  /* 821FB044h */ case   21:  		/* li R4, 3 */
		/* 821FB044h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821FB044h case   21:*/		return 0x821FB048;
		  /* 821FB048h */ case   22:  		/* mr R3, R30 */
		/* 821FB048h case   22:*/		regs.R3 = regs.R30;
		/* 821FB048h case   22:*/		return 0x821FB04C;
		  /* 821FB04Ch */ case   23:  		/* bl -534228 */
		/* 821FB04Ch case   23:*/		regs.LR = 0x821FB050; return 0x82178978;
		/* 821FB04Ch case   23:*/		return 0x821FB050;
	}
	return 0x821FB050;
} // Block from 821FAFF0h-821FB050h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821FB050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB050);
		  /* 821FB050h */ case    0:  		/* mr R29, R30 */
		/* 821FB050h case    0:*/		regs.R29 = regs.R30;
		/* 821FB050h case    0:*/		return 0x821FB054;
	}
	return 0x821FB054;
} // Block from 821FB050h-821FB054h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB054);
		  /* 821FB054h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821FB054h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821FB054h case    0:*/		return 0x821FB058;
		  /* 821FB058h */ case    1:  		/* lwz R30, <#[R11 + 40]> */
		/* 821FB058h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000028) );
		/* 821FB058h case    1:*/		return 0x821FB05C;
		  /* 821FB05Ch */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821FB05Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821FB05Ch case    2:*/		return 0x821FB060;
		  /* 821FB060h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821FB060h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821FB06C;  }
		/* 821FB060h case    3:*/		return 0x821FB064;
		  /* 821FB064h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821FB064h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FB064h case    4:*/		return 0x821FB068;
		  /* 821FB068h */ case    5:  		/* bc 4, CR6_EQ, -68 */
		/* 821FB068h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FB024;  }
		/* 821FB068h case    5:*/		return 0x821FB06C;
	}
	return 0x821FB06C;
} // Block from 821FB054h-821FB06Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FB06Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB06C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB06C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB06C);
		  /* 821FB06Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FB06Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FB06Ch case    0:*/		return 0x821FB070;
		  /* 821FB070h */ case    1:  		/* bc 12, CR6_EQ, 100 */
		/* 821FB070h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FB0D4;  }
		/* 821FB070h case    1:*/		return 0x821FB074;
		  /* 821FB074h */ case    2:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FB074h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB074h case    2:*/		return 0x821FB078;
		  /* 821FB078h */ case    3:  		/* li R8, 0 */
		/* 821FB078h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821FB078h case    3:*/		return 0x821FB07C;
		  /* 821FB07Ch */ case    4:  		/* li R7, 0 */
		/* 821FB07Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FB07Ch case    4:*/		return 0x821FB080;
		  /* 821FB080h */ case    5:  		/* addi R5, R4, 24 */
		/* 821FB080h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FB080h case    5:*/		return 0x821FB084;
		  /* 821FB084h */ case    6:  		/* li R6, 117 */
		/* 821FB084h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821FB084h case    6:*/		return 0x821FB088;
		  /* 821FB088h */ case    7:  		/* mr R3, R31 */
		/* 821FB088h case    7:*/		regs.R3 = regs.R31;
		/* 821FB088h case    7:*/		return 0x821FB08C;
		  /* 821FB08Ch */ case    8:  		/* bl 170252 */
		/* 821FB08Ch case    8:*/		regs.LR = 0x821FB090; return 0x82224998;
		/* 821FB08Ch case    8:*/		return 0x821FB090;
		  /* 821FB090h */ case    9:  		/* mr R6, R31 */
		/* 821FB090h case    9:*/		regs.R6 = regs.R31;
		/* 821FB090h case    9:*/		return 0x821FB094;
		  /* 821FB094h */ case   10:  		/* mr R5, R29 */
		/* 821FB094h case   10:*/		regs.R5 = regs.R29;
		/* 821FB094h case   10:*/		return 0x821FB098;
		  /* 821FB098h */ case   11:  		/* li R4, 3 */
		/* 821FB098h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821FB098h case   11:*/		return 0x821FB09C;
		  /* 821FB09Ch */ case   12:  		/* mr R30, R3 */
		/* 821FB09Ch case   12:*/		regs.R30 = regs.R3;
		/* 821FB09Ch case   12:*/		return 0x821FB0A0;
		  /* 821FB0A0h */ case   13:  		/* bl -534312 */
		/* 821FB0A0h case   13:*/		regs.LR = 0x821FB0A4; return 0x82178978;
		/* 821FB0A0h case   13:*/		return 0x821FB0A4;
		  /* 821FB0A4h */ case   14:  		/* lwz R29, <#[R31 + 564]> */
		/* 821FB0A4h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB0A4h case   14:*/		return 0x821FB0A8;
		  /* 821FB0A8h */ case   15:  		/* lwz R5, <#[R29 + 104]> */
		/* 821FB0A8h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000068) );
		/* 821FB0A8h case   15:*/		return 0x821FB0AC;
		  /* 821FB0ACh */ case   16:  		/* cmplwi CR6, R5, 0 */
		/* 821FB0ACh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821FB0ACh case   16:*/		return 0x821FB0B0;
		  /* 821FB0B0h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821FB0B0h case   17:*/		if ( regs.CR[6].eq ) { return 0x821FB0C4;  }
		/* 821FB0B0h case   17:*/		return 0x821FB0B4;
		  /* 821FB0B4h */ case   18:  		/* mr R6, R31 */
		/* 821FB0B4h case   18:*/		regs.R6 = regs.R31;
		/* 821FB0B4h case   18:*/		return 0x821FB0B8;
		  /* 821FB0B8h */ case   19:  		/* li R4, 3 */
		/* 821FB0B8h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821FB0B8h case   19:*/		return 0x821FB0BC;
		  /* 821FB0BCh */ case   20:  		/* mr R3, R30 */
		/* 821FB0BCh case   20:*/		regs.R3 = regs.R30;
		/* 821FB0BCh case   20:*/		return 0x821FB0C0;
		  /* 821FB0C0h */ case   21:  		/* bl -534344 */
		/* 821FB0C0h case   21:*/		regs.LR = 0x821FB0C4; return 0x82178978;
		/* 821FB0C0h case   21:*/		return 0x821FB0C4;
	}
	return 0x821FB0C4;
} // Block from 821FB06Ch-821FB0C4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821FB0C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB0C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB0C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB0C4);
		  /* 821FB0C4h */ case    0:  		/* stw R30, <#[R29 + 104]> */
		/* 821FB0C4h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000068) );
		/* 821FB0C4h case    0:*/		return 0x821FB0C8;
	}
	return 0x821FB0C8;
} // Block from 821FB0C4h-821FB0C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB0C8h
// Function '?ImportVariableTypeInfo@Compiler@D3DXShader@@AAAXPAUVariable@2@KPAVCNode@2@W4_D3DSCOPE_TYPE@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB0C8);
		  /* 821FB0C8h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FB0C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FB0C8h case    0:*/		return 0x821FB0CC;
		  /* 821FB0CCh */ case    1:  		/* oris R11, R11, 512 */
		/* 821FB0CCh case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821FB0CCh case    1:*/		return 0x821FB0D0;
		  /* 821FB0D0h */ case    2:  		/* stw R11, <#[R30 + 8]> */
		/* 821FB0D0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FB0D0h case    2:*/		return 0x821FB0D4;
	}
	return 0x821FB0D4;
} // Block from 821FB0C8h-821FB0D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB0D4);
		  /* 821FB0D4h */ case    0:  		/* addi R1, R1, 208 */
		/* 821FB0D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821FB0D4h case    0:*/		return 0x821FB0D8;
		  /* 821FB0D8h */ case    1:  		/* b -1482324 */
		/* 821FB0D8h case    1:*/		return 0x82091284;
		/* 821FB0D8h case    1:*/		return 0x821FB0DC;
	}
	return 0x821FB0DC;
} // Block from 821FB0D4h-821FB0DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FB0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB0DC);
		  /* 821FB0DCh */ case    0:  		/* li R4, 4801 */
		/* 821FB0DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FB0DCh case    0:*/		return 0x821FB0E0;
		  /* 821FB0E0h */ case    1:  		/* mr R3, R31 */
		/* 821FB0E0h case    1:*/		regs.R3 = regs.R31;
		/* 821FB0E0h case    1:*/		return 0x821FB0E4;
		  /* 821FB0E4h */ case    2:  		/* bl -692860 */
		/* 821FB0E4h case    2:*/		regs.LR = 0x821FB0E8; return 0x82151E68;
		/* 821FB0E4h case    2:*/		return 0x821FB0E8;
	}
	return 0x821FB0E8;
} // Block from 821FB0DCh-821FB0E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB0E8);
		  /* 821FB0E8h */ case    0:  		/* li R4, 4801 */
		/* 821FB0E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FB0E8h case    0:*/		return 0x821FB0EC;
		  /* 821FB0ECh */ case    1:  		/* bl -692868 */
		/* 821FB0ECh case    1:*/		regs.LR = 0x821FB0F0; return 0x82151E68;
		/* 821FB0ECh case    1:*/		return 0x821FB0F0;
	}
	return 0x821FB0F0;
} // Block from 821FB0E8h-821FB0F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FB0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB0F0);
		  /* 821FB0F0h */ case    0:  		/* lis R11, -32252 */
		/* 821FB0F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821FB0F0h case    0:*/		return 0x821FB0F4;
		  /* 821FB0F4h */ case    1:  		/* li R4, 3500 */
		/* 821FB0F4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821FB0F4h case    1:*/		return 0x821FB0F8;
		  /* 821FB0F8h */ case    2:  		/* addi R5, R11, -13472 */
		/* 821FB0F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCB60);
		/* 821FB0F8h case    2:*/		return 0x821FB0FC;
		  /* 821FB0FCh */ case    3:  		/* bl -692884 */
		/* 821FB0FCh case    3:*/		regs.LR = 0x821FB100; return 0x82151E68;
		/* 821FB0FCh case    3:*/		return 0x821FB100;
	}
	return 0x821FB100;
} // Block from 821FB0F0h-821FB100h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FB100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB100);
		  /* 821FB100h */ case    0:  		/* li R4, 4801 */
		/* 821FB100h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FB100h case    0:*/		return 0x821FB104;
		  /* 821FB104h */ case    1:  		/* mr R3, R31 */
		/* 821FB104h case    1:*/		regs.R3 = regs.R31;
		/* 821FB104h case    1:*/		return 0x821FB108;
		  /* 821FB108h */ case    2:  		/* bl -692896 */
		/* 821FB108h case    2:*/		regs.LR = 0x821FB10C; return 0x82151E68;
		/* 821FB108h case    2:*/		return 0x821FB10C;
	}
	return 0x821FB10C;
} // Block from 821FB100h-821FB10Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB10Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB10C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB10C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB10C);
		  /* 821FB10Ch */ case    0:  		/* li R4, 4801 */
		/* 821FB10Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FB10Ch case    0:*/		return 0x821FB110;
		  /* 821FB110h */ case    1:  		/* mr R3, R31 */
		/* 821FB110h case    1:*/		regs.R3 = regs.R31;
		/* 821FB110h case    1:*/		return 0x821FB114;
		  /* 821FB114h */ case    2:  		/* bl -692908 */
		/* 821FB114h case    2:*/		regs.LR = 0x821FB118; return 0x82151E68;
		/* 821FB114h case    2:*/		return 0x821FB118;
	}
	return 0x821FB118;
} // Block from 821FB10Ch-821FB118h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB118);
		  /* 821FB118h */ case    0:  		/* li R4, 4801 */
		/* 821FB118h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FB118h case    0:*/		return 0x821FB11C;
		  /* 821FB11Ch */ case    1:  		/* mr R3, R31 */
		/* 821FB11Ch case    1:*/		regs.R3 = regs.R31;
		/* 821FB11Ch case    1:*/		return 0x821FB120;
		  /* 821FB120h */ case    2:  		/* bl -692920 */
		/* 821FB120h case    2:*/		regs.LR = 0x821FB124; return 0x82151E68;
		/* 821FB120h case    2:*/		return 0x821FB124;
		  /* 821FB124h */ case    3:  		/* nop */
		/* 821FB124h case    3:*/		cpu::op::nop();
		/* 821FB124h case    3:*/		return 0x821FB128;
	}
	return 0x821FB128;
} // Block from 821FB118h-821FB128h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FB128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB128);
		  /* 821FB128h */ case    0:  		/* mfspr R12, LR */
		/* 821FB128h case    0:*/		regs.R12 = regs.LR;
		/* 821FB128h case    0:*/		return 0x821FB12C;
		  /* 821FB12Ch */ case    1:  		/* bl -1482448 */
		/* 821FB12Ch case    1:*/		regs.LR = 0x821FB130; return 0x8209125C;
		/* 821FB12Ch case    1:*/		return 0x821FB130;
		  /* 821FB130h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821FB130h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821FB130h case    2:*/		return 0x821FB134;
		  /* 821FB134h */ case    3:  		/* lwz R10, <#[R4 + 16]> */
		/* 821FB134h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 821FB134h case    3:*/		return 0x821FB138;
		  /* 821FB138h */ case    4:  		/* mr R31, R3 */
		/* 821FB138h case    4:*/		regs.R31 = regs.R3;
		/* 821FB138h case    4:*/		return 0x821FB13C;
		  /* 821FB13Ch */ case    5:  		/* mr R11, R4 */
		/* 821FB13Ch case    5:*/		regs.R11 = regs.R4;
		/* 821FB13Ch case    5:*/		return 0x821FB140;
		  /* 821FB140h */ case    6:  		/* mr R29, R5 */
		/* 821FB140h case    6:*/		regs.R29 = regs.R5;
		/* 821FB140h case    6:*/		return 0x821FB144;
		  /* 821FB144h */ case    7:  		/* cmpwi CR6, R10, 1 */
		/* 821FB144h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FB144h case    7:*/		return 0x821FB148;
		  /* 821FB148h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 821FB148h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FB154;  }
		/* 821FB148h case    8:*/		return 0x821FB14C;
		  /* 821FB14Ch */ case    9:  		/* li R4, 4801 */
		/* 821FB14Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FB14Ch case    9:*/		return 0x821FB150;
		  /* 821FB150h */ case   10:  		/* bl -692968 */
		/* 821FB150h case   10:*/		regs.LR = 0x821FB154; return 0x82151E68;
		/* 821FB150h case   10:*/		return 0x821FB154;
	}
	return 0x821FB154;
} // Block from 821FB128h-821FB154h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FB154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB154);
		  /* 821FB154h */ case    0:  		/* lwz R30, <#[R11 + 24]> */
		/* 821FB154h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000018) );
		/* 821FB154h case    0:*/		return 0x821FB158;
		  /* 821FB158h */ case    1:  		/* lwz R10, <#[R31 + 16]> */
		/* 821FB158h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821FB158h case    1:*/		return 0x821FB15C;
		  /* 821FB15Ch */ case    2:  		/* lwz R4, <#[R30 + 16]> */
		/* 821FB15Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821FB15Ch case    2:*/		return 0x821FB160;
		  /* 821FB160h */ case    3:  		/* cmplw CR6, R4, R10 */
		/* 821FB160h case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 821FB160h case    3:*/		return 0x821FB164;
		  /* 821FB164h */ case    4:  		/* bc 12, CR6_EQ, 224 */
		/* 821FB164h case    4:*/		if ( regs.CR[6].eq ) { return 0x821FB244;  }
		/* 821FB164h case    4:*/		return 0x821FB168;
		  /* 821FB168h */ case    5:  		/* lwz R8, <#[R30 + 20]> */
		/* 821FB168h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 821FB168h case    5:*/		return 0x821FB16C;
		  /* 821FB16Ch */ case    6:  		/* cmplwi CR6, R8, 0 */
		/* 821FB16Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821FB16Ch case    6:*/		return 0x821FB170;
		  /* 821FB170h */ case    7:  		/* bc 12, CR6_EQ, 212 */
		/* 821FB170h case    7:*/		if ( regs.CR[6].eq ) { return 0x821FB244;  }
		/* 821FB170h case    7:*/		return 0x821FB174;
		  /* 821FB174h */ case    8:  		/* lwz R9, <#[R31 + 12]> */
		/* 821FB174h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FB174h case    8:*/		return 0x821FB178;
		  /* 821FB178h */ case    9:  		/* mulli R10, R4, 40 */
		/* 821FB178h case    9:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R4,0x28);
		/* 821FB178h case    9:*/		return 0x821FB17C;
		  /* 821FB17Ch */ case   10:  		/* add R10, R10, R9 */
		/* 821FB17Ch case   10:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821FB17Ch case   10:*/		return 0x821FB180;
		  /* 821FB180h */ case   11:  		/* mr R3, R31 */
		/* 821FB180h case   11:*/		regs.R3 = regs.R31;
		/* 821FB180h case   11:*/		return 0x821FB184;
		  /* 821FB184h */ case   12:  		/* lwz R10, <#[R10 + 12]> */
		/* 821FB184h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821FB184h case   12:*/		return 0x821FB188;
		  /* 821FB188h */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 821FB188h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FB188h case   13:*/		return 0x821FB18C;
		  /* 821FB18Ch */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 821FB18Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x821FB1A4;  }
		/* 821FB18Ch case   14:*/		return 0x821FB190;
		  /* 821FB190h */ case   15:  		/* bl -59216 */
		/* 821FB190h case   15:*/		regs.LR = 0x821FB194; return 0x821ECA40;
		/* 821FB190h case   15:*/		return 0x821FB194;
		  /* 821FB194h */ case   16:  		/* mr R5, R3 */
		/* 821FB194h case   16:*/		regs.R5 = regs.R3;
		/* 821FB194h case   16:*/		return 0x821FB198;
		  /* 821FB198h */ case   17:  		/* li R4, 3520 */
		/* 821FB198h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0xDC0);
		/* 821FB198h case   17:*/		return 0x821FB19C;
		  /* 821FB19Ch */ case   18:  		/* mr R3, R31 */
		/* 821FB19Ch case   18:*/		regs.R3 = regs.R31;
		/* 821FB19Ch case   18:*/		return 0x821FB1A0;
		  /* 821FB1A0h */ case   19:  		/* bl -693048 */
		/* 821FB1A0h case   19:*/		regs.LR = 0x821FB1A4; return 0x82151E68;
		/* 821FB1A0h case   19:*/		return 0x821FB1A4;
	}
	return 0x821FB1A4;
} // Block from 821FB154h-821FB1A4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FB1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB1A4);
		  /* 821FB1A4h */ case    0:  		/* cmplwi CR6, R8, 16383 */
		/* 821FB1A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00003FFF);
		/* 821FB1A4h case    0:*/		return 0x821FB1A8;
	}
	return 0x821FB1A8;
} // Block from 821FB1A4h-821FB1A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB1A8h
// Function '?ImportReturnValue@Compiler@D3DXShader@@AAAXPAVCNodeFunction@2@W4VariableKind@2@PAVCNodeDecl@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB1A8);
		  /* 821FB1A8h */ case    0:  		/* bc 4, CR6_GT, 12 */
		/* 821FB1A8h case    0:*/		if ( !regs.CR[6].gt ) { return 0x821FB1B4;  }
		/* 821FB1A8h case    0:*/		return 0x821FB1AC;
		  /* 821FB1ACh */ case    1:  		/* li R4, 3519 */
		/* 821FB1ACh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDBF);
		/* 821FB1ACh case    1:*/		return 0x821FB1B0;
		  /* 821FB1B0h */ case    2:  		/* bl -693064 */
		/* 821FB1B0h case    2:*/		regs.LR = 0x821FB1B4; return 0x82151E68;
		/* 821FB1B0h case    2:*/		return 0x821FB1B4;
	}
	return 0x821FB1B4;
} // Block from 821FB1A8h-821FB1B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB1B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB1B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB1B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB1B4);
		  /* 821FB1B4h */ case    0:  		/* li R7, 3 */
		/* 821FB1B4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821FB1B4h case    0:*/		return 0x821FB1B8;
		  /* 821FB1B8h */ case    1:  		/* lwz R8, <#[R31 + 24]> */
		/* 821FB1B8h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 821FB1B8h case    1:*/		return 0x821FB1BC;
		  /* 821FB1BCh */ case    2:  		/* mr R6, R30 */
		/* 821FB1BCh case    2:*/		regs.R6 = regs.R30;
		/* 821FB1BCh case    2:*/		return 0x821FB1C0;
		  /* 821FB1C0h */ case    3:  		/* mr R5, R11 */
		/* 821FB1C0h case    3:*/		regs.R5 = regs.R11;
		/* 821FB1C0h case    3:*/		return 0x821FB1C4;
		  /* 821FB1C4h */ case    4:  		/* bl -2164 */
		/* 821FB1C4h case    4:*/		regs.LR = 0x821FB1C8; return 0x821FA950;
		/* 821FB1C4h case    4:*/		return 0x821FB1C8;
		  /* 821FB1C8h */ case    5:  		/* lwz R11, <#[R30 + 16]> */
		/* 821FB1C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821FB1C8h case    5:*/		return 0x821FB1CC;
		  /* 821FB1CCh */ case    6:  		/* lwz R10, <#[R31 + 12]> */
		/* 821FB1CCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FB1CCh case    6:*/		return 0x821FB1D0;
		  /* 821FB1D0h */ case    7:  		/* li R9, 1 */
		/* 821FB1D0h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821FB1D0h case    7:*/		return 0x821FB1D4;
		  /* 821FB1D4h */ case    8:  		/* mulli R11, R11, 40 */
		/* 821FB1D4h case    8:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FB1D4h case    8:*/		return 0x821FB1D8;
		  /* 821FB1D8h */ case    9:  		/* lwzx R8, <#[R11 + R10]> */
		/* 821FB1D8h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821FB1D8h case    9:*/		return 0x821FB1DC;
		  /* 821FB1DCh */ case   10:  		/* rlwimi R8, R9, 1, 29, 31 */
		/* 821FB1DCh case   10:*/		cpu::op::rlwimi<0,1,29,31>(regs,&regs.R8,regs.R9);
		/* 821FB1DCh case   10:*/		return 0x821FB1E0;
		  /* 821FB1E0h */ case   11:  		/* stwx R8, <#[R11 + R10]> */
		/* 821FB1E0h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821FB1E0h case   11:*/		return 0x821FB1E4;
		  /* 821FB1E4h */ case   12:  		/* lwz R10, <#[R31 + 12]> */
		/* 821FB1E4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FB1E4h case   12:*/		return 0x821FB1E8;
		  /* 821FB1E8h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821FB1E8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821FB1E8h case   13:*/		return 0x821FB1EC;
		  /* 821FB1ECh */ case   14:  		/* mulli R11, R11, 40 */
		/* 821FB1ECh case   14:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FB1ECh case   14:*/		return 0x821FB1F0;
		  /* 821FB1F0h */ case   15:  		/* add R11, R11, R10 */
		/* 821FB1F0h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FB1F0h case   15:*/		return 0x821FB1F4;
		  /* 821FB1F4h */ case   16:  		/* addi R10, R11, 4 */
		/* 821FB1F4h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FB1F4h case   16:*/		return 0x821FB1F8;
		  /* 821FB1F8h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FB1F8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FB1F8h case   17:*/		return 0x821FB1FC;
		  /* 821FB1FCh */ case   18:  		/* oris R10, R10, 1024 */
		/* 821FB1FCh case   18:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x400);
		/* 821FB1FCh case   18:*/		return 0x821FB200;
		  /* 821FB200h */ case   19:  		/* stw R10, <#[R11 + 4]> */
		/* 821FB200h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FB200h case   19:*/		return 0x821FB204;
		  /* 821FB204h */ case   20:  		/* lwz R10, <#[R31 + 12]> */
		/* 821FB204h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FB204h case   20:*/		return 0x821FB208;
		  /* 821FB208h */ case   21:  		/* lwz R9, <#[R31 + 752]> */
		/* 821FB208h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000002F0) );
		/* 821FB208h case   21:*/		return 0x821FB20C;
		  /* 821FB20Ch */ case   22:  		/* lwz R11, <#[R30 + 16]> */
		/* 821FB20Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821FB20Ch case   22:*/		return 0x821FB210;
		  /* 821FB210h */ case   23:  		/* mulli R11, R11, 40 */
		/* 821FB210h case   23:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x28);
		/* 821FB210h case   23:*/		return 0x821FB214;
		  /* 821FB214h */ case   24:  		/* add R11, R11, R10 */
		/* 821FB214h case   24:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821FB214h case   24:*/		return 0x821FB218;
		  /* 821FB218h */ case   25:  		/* addi R10, R11, 8 */
		/* 821FB218h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821FB218h case   25:*/		return 0x821FB21C;
		  /* 821FB21Ch */ case   26:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FB21Ch case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FB21Ch case   26:*/		return 0x821FB220;
		  /* 821FB220h */ case   27:  		/* rlwimi R9, R10, 0, 0, 12 */
		/* 821FB220h case   27:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R9,regs.R10);
		/* 821FB220h case   27:*/		return 0x821FB224;
		  /* 821FB224h */ case   28:  		/* stw R9, <#[R11 + 8]> */
		/* 821FB224h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821FB224h case   28:*/		return 0x821FB228;
		  /* 821FB228h */ case   29:  		/* lwz R6, <#[R30 + 52]> */
		/* 821FB228h case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000034) );
		/* 821FB228h case   29:*/		return 0x821FB22C;
		  /* 821FB22Ch */ case   30:  		/* cmplwi CR6, R6, 0 */
		/* 821FB22Ch case   30:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821FB22Ch case   30:*/		return 0x821FB230;
		  /* 821FB230h */ case   31:  		/* bc 12, CR6_EQ, 20 */
		/* 821FB230h case   31:*/		if ( regs.CR[6].eq ) { return 0x821FB244;  }
		/* 821FB230h case   31:*/		return 0x821FB234;
		  /* 821FB234h */ case   32:  		/* mr R4, R29 */
		/* 821FB234h case   32:*/		regs.R4 = regs.R29;
		/* 821FB234h case   32:*/		return 0x821FB238;
		  /* 821FB238h */ case   33:  		/* lwz R5, <#[R30 + 16]> */
		/* 821FB238h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000010) );
		/* 821FB238h case   33:*/		return 0x821FB23C;
		  /* 821FB23Ch */ case   34:  		/* mr R3, R31 */
		/* 821FB23Ch case   34:*/		regs.R3 = regs.R31;
		/* 821FB23Ch case   34:*/		return 0x821FB240;
		  /* 821FB240h */ case   35:  		/* bl -25576 */
		/* 821FB240h case   35:*/		regs.LR = 0x821FB244; return 0x821F4E58;
		/* 821FB240h case   35:*/		return 0x821FB244;
	}
	return 0x821FB244;
} // Block from 821FB1B4h-821FB244h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821FB244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB244);
		  /* 821FB244h */ case    0:  		/* addi R1, R1, 112 */
		/* 821FB244h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821FB244h case    0:*/		return 0x821FB248;
		  /* 821FB248h */ case    1:  		/* b -1482652 */
		/* 821FB248h case    1:*/		return 0x820912AC;
		/* 821FB248h case    1:*/		return 0x821FB24C;
		  /* 821FB24Ch */ case    2:  		/* nop */
		/* 821FB24Ch case    2:*/		cpu::op::nop();
		/* 821FB24Ch case    2:*/		return 0x821FB250;
	}
	return 0x821FB250;
} // Block from 821FB244h-821FB250h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB250h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB250);
		  /* 821FB250h */ case    0:  		/* mfspr R12, LR */
		/* 821FB250h case    0:*/		regs.R12 = regs.LR;
		/* 821FB250h case    0:*/		return 0x821FB254;
		  /* 821FB254h */ case    1:  		/* bl -1482804 */
		/* 821FB254h case    1:*/		regs.LR = 0x821FB258; return 0x82091220;
		/* 821FB254h case    1:*/		return 0x821FB258;
		  /* 821FB258h */ case    2:  		/* addi R12, R1, -152 */
		/* 821FB258h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821FB258h case    2:*/		return 0x821FB25C;
		  /* 821FB25Ch */ case    3:  		/* bl -1482364 */
		/* 821FB25Ch case    3:*/		regs.LR = 0x821FB260; return 0x820913E0;
		/* 821FB25Ch case    3:*/		return 0x821FB260;
		  /* 821FB260h */ case    4:  		/* stwu R1, <#[R1 - 3472]> */
		/* 821FB260h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF270) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF270);
		/* 821FB260h case    4:*/		return 0x821FB264;
		  /* 821FB264h */ case    5:  		/* mr R20, R4 */
		/* 821FB264h case    5:*/		regs.R20 = regs.R4;
		/* 821FB264h case    5:*/		return 0x821FB268;
		  /* 821FB268h */ case    6:  		/* stw R4, <#[R1 + 3500]> */
		/* 821FB268h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FB268h case    6:*/		return 0x821FB26C;
		  /* 821FB26Ch */ case    7:  		/* mr R14, R5 */
		/* 821FB26Ch case    7:*/		regs.R14 = regs.R5;
		/* 821FB26Ch case    7:*/		return 0x821FB270;
		  /* 821FB270h */ case    8:  		/* stw R6, <#[R1 + 3516]> */
		/* 821FB270h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000DBC) );
		/* 821FB270h case    8:*/		return 0x821FB274;
		  /* 821FB274h */ case    9:  		/* li R19, 0 */
		/* 821FB274h case    9:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821FB274h case    9:*/		return 0x821FB278;
		  /* 821FB278h */ case   10:  		/* li R5, 43 */
		/* 821FB278h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2B);
		/* 821FB278h case   10:*/		return 0x821FB27C;
		  /* 821FB27Ch */ case   11:  		/* li R4, 8 */
		/* 821FB27Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821FB27Ch case   11:*/		return 0x821FB280;
		  /* 821FB280h */ case   12:  		/* stw R19, <#[R1 + 156]> */
		/* 821FB280h case   12:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000009C) );
		/* 821FB280h case   12:*/		return 0x821FB284;
		  /* 821FB284h */ case   13:  		/* mr R31, R3 */
		/* 821FB284h case   13:*/		regs.R31 = regs.R3;
		/* 821FB284h case   13:*/		return 0x821FB288;
		  /* 821FB288h */ case   14:  		/* bl -616856 */
		/* 821FB288h case   14:*/		regs.LR = 0x821FB28C; return 0x821648F0;
		/* 821FB288h case   14:*/		return 0x821FB28C;
		  /* 821FB28Ch */ case   15:  		/* addi R11, R3, 4 */
		/* 821FB28Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821FB28Ch case   15:*/		return 0x821FB290;
		  /* 821FB290h */ case   16:  		/* ori R10, R3, 1 */
		/* 821FB290h case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821FB290h case   16:*/		return 0x821FB294;
		  /* 821FB294h */ case   17:  		/* stw R3, <#[R1 + 440]> */
		/* 821FB294h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000001B8) );
		/* 821FB294h case   17:*/		return 0x821FB298;
		  /* 821FB298h */ case   18:  		/* ori R11, R11, 1 */
		/* 821FB298h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FB298h case   18:*/		return 0x821FB29C;
		  /* 821FB29Ch */ case   19:  		/* stw R10, <#[R3 + 4]> */
		/* 821FB29Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821FB29Ch case   19:*/		return 0x821FB2A0;
		  /* 821FB2A0h */ case   20:  		/* mr R26, R3 */
		/* 821FB2A0h case   20:*/		regs.R26 = regs.R3;
		/* 821FB2A0h case   20:*/		return 0x821FB2A4;
		  /* 821FB2A4h */ case   21:  		/* mr R22, R19 */
		/* 821FB2A4h case   21:*/		regs.R22 = regs.R19;
		/* 821FB2A4h case   21:*/		return 0x821FB2A8;
		  /* 821FB2A8h */ case   22:  		/* stw R11, <#[R3]> */
		/* 821FB2A8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FB2A8h case   22:*/		return 0x821FB2AC;
		  /* 821FB2ACh */ case   23:  		/* cmplwi CR6, R14, 0 */
		/* 821FB2ACh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821FB2ACh case   23:*/		return 0x821FB2B0;
		  /* 821FB2B0h */ case   24:  		/* bc 4, CR6_EQ, 16 */
		/* 821FB2B0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821FB2C0;  }
		/* 821FB2B0h case   24:*/		return 0x821FB2B4;
		  /* 821FB2B4h */ case   25:  		/* li R4, 4801 */
		/* 821FB2B4h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FB2B4h case   25:*/		return 0x821FB2B8;
		  /* 821FB2B8h */ case   26:  		/* mr R3, R31 */
		/* 821FB2B8h case   26:*/		regs.R3 = regs.R31;
		/* 821FB2B8h case   26:*/		return 0x821FB2BC;
		  /* 821FB2BCh */ case   27:  		/* bl -693332 */
		/* 821FB2BCh case   27:*/		regs.LR = 0x821FB2C0; return 0x82151E68;
		/* 821FB2BCh case   27:*/		return 0x821FB2C0;
	}
	return 0x821FB2C0;
} // Block from 821FB250h-821FB2C0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821FB2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB2C0);
		  /* 821FB2C0h */ case    0:  		/* lis R11, -32256 */
		/* 821FB2C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821FB2C0h case    0:*/		return 0x821FB2C4;
		  /* 821FB2C4h */ case    1:  		/* lis R10, -32255 */
		/* 821FB2C4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821FB2C4h case    1:*/		return 0x821FB2C8;
		  /* 821FB2C8h */ case    2:  		/* lis R9, -32252 */
		/* 821FB2C8h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821FB2C8h case    2:*/		return 0x821FB2CC;
		  /* 821FB2CCh */ case    3:  		/* lis R8, -32252 */
		/* 821FB2CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 821FB2CCh case    3:*/		return 0x821FB2D0;
		  /* 821FB2D0h */ case    4:  		/* lis R7, -32252 */
		/* 821FB2D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 821FB2D0h case    4:*/		return 0x821FB2D4;
		  /* 821FB2D4h */ case    5:  		/* lis R6, -32256 */
		/* 821FB2D4h case    5:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 821FB2D4h case    5:*/		return 0x821FB2D8;
		  /* 821FB2D8h */ case    6:  		/* lfs FR0, <#[R11 + 8532]> */
		/* 821FB2D8h case    6:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00002154) );
		/* 821FB2D8h case    6:*/		return 0x821FB2DC;
		  /* 821FB2DCh */ case    7:  		/* lfd FR13, <#[R10 + 9040]> */
		/* 821FB2DCh case    7:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00002350) );
		/* 821FB2DCh case    7:*/		return 0x821FB2E0;
		  /* 821FB2E0h */ case    8:  		/* lis R11, -32256 */
		/* 821FB2E0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821FB2E0h case    8:*/		return 0x821FB2E4;
		  /* 821FB2E4h */ case    9:  		/* lis R10, -32255 */
		/* 821FB2E4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821FB2E4h case    9:*/		return 0x821FB2E8;
		  /* 821FB2E8h */ case   10:  		/* lfs FR12, <#[R9 - 12916]> */
		/* 821FB2E8h case   10:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R9 + 0xFFFFCD8C) );
		/* 821FB2E8h case   10:*/		return 0x821FB2EC;
		  /* 821FB2ECh */ case   11:  		/* lfs FR11, <#[R8 - 12920]> */
		/* 821FB2ECh case   11:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R8 + 0xFFFFCD88) );
		/* 821FB2ECh case   11:*/		return 0x821FB2F0;
		  /* 821FB2F0h */ case   12:  		/* lis R9, -32252 */
		/* 821FB2F0h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821FB2F0h case   12:*/		return 0x821FB2F4;
		  /* 821FB2F4h */ case   13:  		/* lfs FR14, <#[R7 - 12924]> */
		/* 821FB2F4h case   13:*/		cpu::mem::load32f( regs, &regs.FR14, (uint32)(regs.R7 + 0xFFFFCD84) );
		/* 821FB2F4h case   13:*/		return 0x821FB2F8;
		  /* 821FB2F8h */ case   14:  		/* lis R8, -32252 */
		/* 821FB2F8h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 821FB2F8h case   14:*/		return 0x821FB2FC;
		  /* 821FB2FCh */ case   15:  		/* lfd FR10, <#[R6 + 1808]> */
		/* 821FB2FCh case   15:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R6 + 0x00000710) );
		/* 821FB2FCh case   15:*/		return 0x821FB300;
		  /* 821FB300h */ case   16:  		/* lis R7, -32252 */
		/* 821FB300h case   16:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 821FB300h case   16:*/		return 0x821FB304;
		  /* 821FB304h */ case   17:  		/* lis R6, -32252 */
		/* 821FB304h case   17:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 821FB304h case   17:*/		return 0x821FB308;
		  /* 821FB308h */ case   18:  		/* lfs FR15, <#[R11 + 1820]> */
		/* 821FB308h case   18:*/		cpu::mem::load32f( regs, &regs.FR15, (uint32)(regs.R11 + 0x0000071C) );
		/* 821FB308h case   18:*/		return 0x821FB30C;
		  /* 821FB30Ch */ case   19:  		/* lfd FR27, <#[R10 - 24504]> */
		/* 821FB30Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR27, (uint32)(regs.R10 + 0xFFFFA048) );
		/* 821FB30Ch case   19:*/		return 0x821FB310;
		  /* 821FB310h */ case   20:  		/* lis R11, -32252 */
		/* 821FB310h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821FB310h case   20:*/		return 0x821FB314;
		  /* 821FB314h */ case   21:  		/* lis R10, -32252 */
		/* 821FB314h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821FB314h case   21:*/		return 0x821FB318;
		  /* 821FB318h */ case   22:  		/* lfs FR21, <#[R9 - 13544]> */
		/* 821FB318h case   22:*/		cpu::mem::load32f( regs, &regs.FR21, (uint32)(regs.R9 + 0xFFFFCB18) );
		/* 821FB318h case   22:*/		return 0x821FB31C;
		  /* 821FB31Ch */ case   23:  		/* lfs FR22, <#[R8 - 12928]> */
		/* 821FB31Ch case   23:*/		cpu::mem::load32f( regs, &regs.FR22, (uint32)(regs.R8 + 0xFFFFCD80) );
		/* 821FB31Ch case   23:*/		return 0x821FB320;
		  /* 821FB320h */ case   24:  		/* lis R9, -32252 */
		/* 821FB320h case   24:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821FB320h case   24:*/		return 0x821FB324;
		  /* 821FB324h */ case   25:  		/* lfs FR23, <#[R7 - 12932]> */
		/* 821FB324h case   25:*/		cpu::mem::load32f( regs, &regs.FR23, (uint32)(regs.R7 + 0xFFFFCD7C) );
		/* 821FB324h case   25:*/		return 0x821FB328;
		  /* 821FB328h */ case   26:  		/* lis R8, -32256 */
		/* 821FB328h case   26:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 821FB328h case   26:*/		return 0x821FB32C;
		  /* 821FB32Ch */ case   27:  		/* lfs FR24, <#[R6 - 12936]> */
		/* 821FB32Ch case   27:*/		cpu::mem::load32f( regs, &regs.FR24, (uint32)(regs.R6 + 0xFFFFCD78) );
		/* 821FB32Ch case   27:*/		return 0x821FB330;
		  /* 821FB330h */ case   28:  		/* lis R7, -32252 */
		/* 821FB330h case   28:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 821FB330h case   28:*/		return 0x821FB334;
		  /* 821FB334h */ case   29:  		/* lis R6, -32252 */
		/* 821FB334h case   29:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 821FB334h case   29:*/		return 0x821FB338;
		  /* 821FB338h */ case   30:  		/* lfs FR25, <#[R11 - 12940]> */
		/* 821FB338h case   30:*/		cpu::mem::load32f( regs, &regs.FR25, (uint32)(regs.R11 + 0xFFFFCD74) );
		/* 821FB338h case   30:*/		return 0x821FB33C;
		  /* 821FB33Ch */ case   31:  		/* lis R5, -32252 */
		/* 821FB33Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 821FB33Ch case   31:*/		return 0x821FB340;
		  /* 821FB340h */ case   32:  		/* lfs FR26, <#[R10 - 12944]> */
		/* 821FB340h case   32:*/		cpu::mem::load32f( regs, &regs.FR26, (uint32)(regs.R10 + 0xFFFFCD70) );
		/* 821FB340h case   32:*/		return 0x821FB344;
		  /* 821FB344h */ case   33:  		/* lis R11, -32217 */
		/* 821FB344h case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821FB344h case   33:*/		return 0x821FB348;
		  /* 821FB348h */ case   34:  		/* lfs FR28, <#[R9 - 12948]> */
		/* 821FB348h case   34:*/		cpu::mem::load32f( regs, &regs.FR28, (uint32)(regs.R9 + 0xFFFFCD6C) );
		/* 821FB348h case   34:*/		return 0x821FB34C;
		  /* 821FB34Ch */ case   35:  		/* lis R10, -32255 */
		/* 821FB34Ch case   35:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821FB34Ch case   35:*/		return 0x821FB350;
		  /* 821FB350h */ case   36:  		/* lfs FR16, <#[R8 + 1804]> */
		/* 821FB350h case   36:*/		cpu::mem::load32f( regs, &regs.FR16, (uint32)(regs.R8 + 0x0000070C) );
		/* 821FB350h case   36:*/		return 0x821FB354;
		  /* 821FB354h */ case   37:  		/* lfs FR29, <#[R7 - 16652]> */
		/* 821FB354h case   37:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R7 + 0xFFFFBEF4) );
		/* 821FB354h case   37:*/		return 0x821FB358;
		  /* 821FB358h */ case   38:  		/* addi R11, R11, 22128 */
		/* 821FB358h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5670);
		/* 821FB358h case   38:*/		return 0x821FB35C;
		  /* 821FB35Ch */ case   39:  		/* lfs FR17, <#[R6 - 12952]> */
		/* 821FB35Ch case   39:*/		cpu::mem::load32f( regs, &regs.FR17, (uint32)(regs.R6 + 0xFFFFCD68) );
		/* 821FB35Ch case   39:*/		return 0x821FB360;
		  /* 821FB360h */ case   40:  		/* addi R10, R10, 11612 */
		/* 821FB360h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2D5C);
		/* 821FB360h case   40:*/		return 0x821FB364;
		  /* 821FB364h */ case   41:  		/* lfs FR18, <#[R5 - 12956]> */
		/* 821FB364h case   41:*/		cpu::mem::load32f( regs, &regs.FR18, (uint32)(regs.R5 + 0xFFFFCD64) );
		/* 821FB364h case   41:*/		return 0x821FB368;
	}
	return 0x821FB368;
} // Block from 821FB2C0h-821FB368h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821FB368h
// Function '?ImportVariableInfo@Compiler@D3DXShader@@AAAXIPAVCNodeDecl@2@PAVCNodeVariable@2@W4_D3DSCOPE_TYPE@2@PAUFunction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB368);
		  /* 821FB368h */ case    0:  		/* lis R4, -32252 */
		/* 821FB368h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8204);
		/* 821FB368h case    0:*/		return 0x821FB36C;
		  /* 821FB36Ch */ case    1:  		/* lis R3, -32252 */
		/* 821FB36Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 821FB36Ch case    1:*/		return 0x821FB370;
		  /* 821FB370h */ case    2:  		/* stw R11, <#[R1 + 532]> */
		/* 821FB370h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000214) );
		/* 821FB370h case    2:*/		return 0x821FB374;
		  /* 821FB374h */ case    3:  		/* lis R30, -32256 */
		/* 821FB374h case    3:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8200);
		/* 821FB374h case    3:*/		return 0x821FB378;
		  /* 821FB378h */ case    4:  		/* stw R10, <#[R1 + 584]> */
		/* 821FB378h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000248) );
		/* 821FB378h case    4:*/		return 0x821FB37C;
		  /* 821FB37Ch */ case    5:  		/* lis R29, -32256 */
		/* 821FB37Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8200);
		/* 821FB37Ch case    5:*/		return 0x821FB380;
		  /* 821FB380h */ case    6:  		/* stfs FR0, <#[R1 + 456]> */
		/* 821FB380h case    6:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000001C8) );
		/* 821FB380h case    6:*/		return 0x821FB384;
		  /* 821FB384h */ case    7:  		/* lis R9, -32255 */
		/* 821FB384h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 821FB384h case    7:*/		return 0x821FB388;
		  /* 821FB388h */ case    8:  		/* stfd FR13, <#[R1 + 1320]> */
		/* 821FB388h case    8:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000528) );
		/* 821FB388h case    8:*/		return 0x821FB38C;
		  /* 821FB38Ch */ case    9:  		/* lis R8, -32255 */
		/* 821FB38Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 821FB38Ch case    9:*/		return 0x821FB390;
		  /* 821FB390h */ case   10:  		/* lfs FR19, <#[R4 - 12960]> */
		/* 821FB390h case   10:*/		cpu::mem::load32f( regs, &regs.FR19, (uint32)(regs.R4 + 0xFFFFCD60) );
		/* 821FB390h case   10:*/		return 0x821FB394;
		  /* 821FB394h */ case   11:  		/* lis R7, -32255 */
		/* 821FB394h case   11:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 821FB394h case   11:*/		return 0x821FB398;
		  /* 821FB398h */ case   12:  		/* lfs FR20, <#[R3 - 12964]> */
		/* 821FB398h case   12:*/		cpu::mem::load32f( regs, &regs.FR20, (uint32)(regs.R3 + 0xFFFFCD5C) );
		/* 821FB398h case   12:*/		return 0x821FB39C;
		  /* 821FB39Ch */ case   13:  		/* lis R6, -32255 */
		/* 821FB39Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 821FB39Ch case   13:*/		return 0x821FB3A0;
		  /* 821FB3A0h */ case   14:  		/* lfs FR30, <#[R30 + 1792]> */
		/* 821FB3A0h case   14:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R30 + 0x00000700) );
		/* 821FB3A0h case   14:*/		return 0x821FB3A4;
		  /* 821FB3A4h */ case   15:  		/* lis R5, -32255 */
		/* 821FB3A4h case   15:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8201);
		/* 821FB3A4h case   15:*/		return 0x821FB3A8;
		  /* 821FB3A8h */ case   16:  		/* lfs FR31, <#[R29 + 1816]> */
		/* 821FB3A8h case   16:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R29 + 0x00000718) );
		/* 821FB3A8h case   16:*/		return 0x821FB3AC;
		  /* 821FB3ACh */ case   17:  		/* addi R9, R9, 11636 */
		/* 821FB3ACh case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2D74);
		/* 821FB3ACh case   17:*/		return 0x821FB3B0;
		  /* 821FB3B0h */ case   18:  		/* stfs FR12, <#[R1 + 608]> */
		/* 821FB3B0h case   18:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000260) );
		/* 821FB3B0h case   18:*/		return 0x821FB3B4;
		  /* 821FB3B4h */ case   19:  		/* addi R8, R8, 26220 */
		/* 821FB3B4h case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x666C);
		/* 821FB3B4h case   19:*/		return 0x821FB3B8;
		  /* 821FB3B8h */ case   20:  		/* stfs FR11, <#[R1 + 600]> */
		/* 821FB3B8h case   20:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000258) );
		/* 821FB3B8h case   20:*/		return 0x821FB3BC;
		  /* 821FB3BCh */ case   21:  		/* addi R7, R7, 26212 */
		/* 821FB3BCh case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x6664);
		/* 821FB3BCh case   21:*/		return 0x821FB3C0;
		  /* 821FB3C0h */ case   22:  		/* stfs FR14, <#[R1 + 624]> */
		/* 821FB3C0h case   22:*/		cpu::mem::store32f( regs, regs.FR14, (uint32)(regs.R1 + 0x00000270) );
		/* 821FB3C0h case   22:*/		return 0x821FB3C4;
		  /* 821FB3C4h */ case   23:  		/* addi R11, R6, 26196 */
		/* 821FB3C4h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0x6654);
		/* 821FB3C4h case   23:*/		return 0x821FB3C8;
		  /* 821FB3C8h */ case   24:  		/* stfd FR10, <#[R1 + 1264]> */
		/* 821FB3C8h case   24:*/		cpu::mem::store64f( regs, regs.FR10, (uint32)(regs.R1 + 0x000004F0) );
		/* 821FB3C8h case   24:*/		return 0x821FB3CC;
		  /* 821FB3CCh */ case   25:  		/* addi R10, R5, 4972 */
		/* 821FB3CCh case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0x136C);
		/* 821FB3CCh case   25:*/		return 0x821FB3D0;
		  /* 821FB3D0h */ case   26:  		/* stw R9, <#[R1 + 568]> */
		/* 821FB3D0h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000238) );
		/* 821FB3D0h case   26:*/		return 0x821FB3D4;
		  /* 821FB3D4h */ case   27:  		/* stw R8, <#[R1 + 528]> */
		/* 821FB3D4h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000210) );
		/* 821FB3D4h case   27:*/		return 0x821FB3D8;
		  /* 821FB3D8h */ case   28:  		/* stw R7, <#[R1 + 512]> */
		/* 821FB3D8h case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000200) );
		/* 821FB3D8h case   28:*/		return 0x821FB3DC;
		  /* 821FB3DCh */ case   29:  		/* stw R11, <#[R1 + 496]> */
		/* 821FB3DCh case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001F0) );
		/* 821FB3DCh case   29:*/		return 0x821FB3E0;
		  /* 821FB3E0h */ case   30:  		/* stw R10, <#[R1 + 480]> */
		/* 821FB3E0h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000001E0) );
		/* 821FB3E0h case   30:*/		return 0x821FB3E4;
		  /* 821FB3E4h */ case   31:  		/* li R21, 1 */
		/* 821FB3E4h case   31:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821FB3E4h case   31:*/		return 0x821FB3E8;
		  /* 821FB3E8h */ case   32:  		/* lwz R11, <#[R14 + 4]> */
		/* 821FB3E8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000004) );
		/* 821FB3E8h case   32:*/		return 0x821FB3EC;
		  /* 821FB3ECh */ case   33:  		/* cmpwi CR6, R11, 1 */
		/* 821FB3ECh case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FB3ECh case   33:*/		return 0x821FB3F0;
		  /* 821FB3F0h */ case   34:  		/* bc 12, CR6_EQ, 3344 */
		/* 821FB3F0h case   34:*/		if ( regs.CR[6].eq ) { return 0x821FC100;  }
		/* 821FB3F0h case   34:*/		return 0x821FB3F4;
		  /* 821FB3F4h */ case   35:  		/* cmpwi CR6, R11, 6 */
		/* 821FB3F4h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821FB3F4h case   35:*/		return 0x821FB3F8;
		  /* 821FB3F8h */ case   36:  		/* bc 12, CR6_EQ, 3316 */
		/* 821FB3F8h case   36:*/		if ( regs.CR[6].eq ) { return 0x821FC0EC;  }
		/* 821FB3F8h case   36:*/		return 0x821FB3FC;
		  /* 821FB3FCh */ case   37:  		/* cmpwi CR6, R11, 12 */
		/* 821FB3FCh case   37:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 821FB3FCh case   37:*/		return 0x821FB400;
		  /* 821FB400h */ case   38:  		/* bc 12, CR6_EQ, 3240 */
		/* 821FB400h case   38:*/		if ( regs.CR[6].eq ) { return 0x821FC0A8;  }
		/* 821FB400h case   38:*/		return 0x821FB404;
		  /* 821FB404h */ case   39:  		/* cmpwi CR6, R11, 14 */
		/* 821FB404h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821FB404h case   39:*/		return 0x821FB408;
		  /* 821FB408h */ case   40:  		/* bc 12, CR6_EQ, 1744 */
		/* 821FB408h case   40:*/		if ( regs.CR[6].eq ) { return 0x821FBAD8;  }
		/* 821FB408h case   40:*/		return 0x821FB40C;
		  /* 821FB40Ch */ case   41:  		/* cmpwi CR6, R11, 15 */
		/* 821FB40Ch case   41:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821FB40Ch case   41:*/		return 0x821FB410;
		  /* 821FB410h */ case   42:  		/* bc 12, CR6_EQ, 1428 */
		/* 821FB410h case   42:*/		if ( regs.CR[6].eq ) { return 0x821FB9A4;  }
		/* 821FB410h case   42:*/		return 0x821FB414;
		  /* 821FB414h */ case   43:  		/* cmpwi CR6, R11, 27 */
		/* 821FB414h case   43:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 821FB414h case   43:*/		return 0x821FB418;
		  /* 821FB418h */ case   44:  		/* bc 12, CR6_EQ, 1300 */
		/* 821FB418h case   44:*/		if ( regs.CR[6].eq ) { return 0x821FB92C;  }
		/* 821FB418h case   44:*/		return 0x821FB41C;
		  /* 821FB41Ch */ case   45:  		/* cmpwi CR6, R11, 28 */
		/* 821FB41Ch case   45:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821FB41Ch case   45:*/		return 0x821FB420;
		  /* 821FB420h */ case   46:  		/* mr R3, R31 */
		/* 821FB420h case   46:*/		regs.R3 = regs.R31;
		/* 821FB420h case   46:*/		return 0x821FB424;
		  /* 821FB424h */ case   47:  		/* bc 12, CR6_EQ, 8 */
		/* 821FB424h case   47:*/		if ( regs.CR[6].eq ) { return 0x821FB42C;  }
		/* 821FB424h case   47:*/		return 0x821FB428;
		  /* 821FB428h */ case   48:  		/* b 35304 */
		/* 821FB428h case   48:*/		return 0x82203E10;
		/* 821FB428h case   48:*/		return 0x821FB42C;
	}
	return 0x821FB42C;
} // Block from 821FB368h-821FB42Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 821FB42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB42C);
		  /* 821FB42Ch */ case    0:  		/* addi R5, R1, 424 */
		/* 821FB42Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1A8);
		/* 821FB42Ch case    0:*/		return 0x821FB430;
		  /* 821FB430h */ case    1:  		/* mr R4, R14 */
		/* 821FB430h case    1:*/		regs.R4 = regs.R14;
		/* 821FB430h case    1:*/		return 0x821FB434;
		  /* 821FB434h */ case    2:  		/* bl -60492 */
		/* 821FB434h case    2:*/		regs.LR = 0x821FB438; return 0x821EC7E8;
		/* 821FB434h case    2:*/		return 0x821FB438;
		  /* 821FB438h */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FB438h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FB438h case    3:*/		return 0x821FB43C;
		  /* 821FB43Ch */ case    4:  		/* mulli R10, R3, 40 */
		/* 821FB43Ch case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R3,0x28);
		/* 821FB43Ch case    4:*/		return 0x821FB440;
		  /* 821FB440h */ case    5:  		/* lwzx R9, <#[R10 + R11]> */
		/* 821FB440h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FB440h case    5:*/		return 0x821FB444;
		  /* 821FB444h */ case    6:  		/* add R30, R10, R11 */
		/* 821FB444h case    6:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 821FB444h case    6:*/		return 0x821FB448;
		  /* 821FB448h */ case    7:  		/* mr R5, R3 */
		/* 821FB448h case    7:*/		regs.R5 = regs.R3;
		/* 821FB448h case    7:*/		return 0x821FB44C;
		  /* 821FB44Ch */ case    8:  		/* rlwinm R23, R9, 29, 18, 31 */
		/* 821FB44Ch case    8:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R23,regs.R9);
		/* 821FB44Ch case    8:*/		return 0x821FB450;
		  /* 821FB450h */ case    9:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FB450h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FB450h case    9:*/		return 0x821FB454;
		  /* 821FB454h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821FB454h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821FB454h case   10:*/		return 0x821FB458;
		  /* 821FB458h */ case   11:  		/* bc 4, CR0_EQ, 8 */
		/* 821FB458h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821FB460;  }
		/* 821FB458h case   11:*/		return 0x821FB45C;
		  /* 821FB45Ch */ case   12:  		/* b 35260 */
		/* 821FB45Ch case   12:*/		return 0x82203E18;
		/* 821FB45Ch case   12:*/		return 0x821FB460;
	}
	return 0x821FB460;
} // Block from 821FB42Ch-821FB460h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FB460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB460);
		  /* 821FB460h */ case    0:  		/* lwz R11, <#[R14 + 40]> */
		/* 821FB460h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821FB460h case    0:*/		return 0x821FB464;
		  /* 821FB464h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FB464h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB464h case    1:*/		return 0x821FB468;
		  /* 821FB468h */ case    2:  		/* bc 4, CR6_EQ, 56 */
		/* 821FB468h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FB4A0;  }
		/* 821FB468h case    2:*/		return 0x821FB46C;
		  /* 821FB46Ch */ case    3:  		/* lwz R10, <#[R14 + 44]> */
		/* 821FB46Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x0000002C) );
		/* 821FB46Ch case    3:*/		return 0x821FB470;
		  /* 821FB470h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821FB470h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FB470h case    4:*/		return 0x821FB474;
		  /* 821FB474h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821FB474h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FB484;  }
		/* 821FB474h case    5:*/		return 0x821FB478;
		  /* 821FB478h */ case    6:  		/* lwz R10, <#[R14 + 24]> */
		/* 821FB478h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000018) );
		/* 821FB478h case    6:*/		return 0x821FB47C;
		  /* 821FB47Ch */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821FB47Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FB47Ch case    7:*/		return 0x821FB480;
		  /* 821FB480h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 821FB480h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821FB4A0;  }
		/* 821FB480h case    8:*/		return 0x821FB484;
	}
	return 0x821FB484;
} // Block from 821FB460h-821FB484h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FB484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB484);
		  /* 821FB484h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 821FB484h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 821FB484h case    0:*/		return 0x821FB488;
		  /* 821FB488h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821FB488h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821FB488h case    1:*/		return 0x821FB48C;
		  /* 821FB48Ch */ case    2:  		/* cmpwi CR6, R11, 8 */
		/* 821FB48Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821FB48Ch case    2:*/		return 0x821FB490;
		  /* 821FB490h */ case    3:  		/* bc 4, CR6_EQ, 68 */
		/* 821FB490h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FB4D4;  }
		/* 821FB490h case    3:*/		return 0x821FB494;
		  /* 821FB494h */ case    4:  		/* li R4, 3020 */
		/* 821FB494h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xBCC);
		/* 821FB494h case    4:*/		return 0x821FB498;
		  /* 821FB498h */ case    5:  		/* mr R3, R31 */
		/* 821FB498h case    5:*/		regs.R3 = regs.R31;
		/* 821FB498h case    5:*/		return 0x821FB49C;
		  /* 821FB49Ch */ case    6:  		/* bl -693812 */
		/* 821FB49Ch case    6:*/		regs.LR = 0x821FB4A0; return 0x82151E68;
		/* 821FB49Ch case    6:*/		return 0x821FB4A0;
	}
	return 0x821FB4A0;
} // Block from 821FB484h-821FB4A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FB4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB4A0);
		  /* 821FB4A0h */ case    0:  		/* lwz R10, <#[R31 + 40]> */
		/* 821FB4A0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 821FB4A0h case    0:*/		return 0x821FB4A4;
		  /* 821FB4A4h */ case    1:  		/* rlwinm. R10, R10, 0, 15, 15 */
		/* 821FB4A4h case    1:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R10);
		/* 821FB4A4h case    1:*/		return 0x821FB4A8;
		  /* 821FB4A8h */ case    2:  		/* bc 4, CR0_EQ, 24 */
		/* 821FB4A8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821FB4C0;  }
		/* 821FB4A8h case    2:*/		return 0x821FB4AC;
		  /* 821FB4ACh */ case    3:  		/* lwz R10, <#[R30 + 20]> */
		/* 821FB4ACh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 821FB4ACh case    3:*/		return 0x821FB4B0;
		  /* 821FB4B0h */ case    4:  		/* lwz R10, <#[R10 + 4]> */
		/* 821FB4B0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821FB4B0h case    4:*/		return 0x821FB4B4;
		  /* 821FB4B4h */ case    5:  		/* cmpwi CR6, R10, 8 */
		/* 821FB4B4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000008);
		/* 821FB4B4h case    5:*/		return 0x821FB4B8;
		  /* 821FB4B8h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 821FB4B8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FB4C0;  }
		/* 821FB4B8h case    6:*/		return 0x821FB4BC;
		  /* 821FB4BCh */ case    7:  		/* b 35192 */
		/* 821FB4BCh case    7:*/		return 0x82203E34;
		/* 821FB4BCh case    7:*/		return 0x821FB4C0;
	}
	return 0x821FB4C0;
} // Block from 821FB4A0h-821FB4C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FB4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB4C0);
		  /* 821FB4C0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821FB4C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB4C0h case    0:*/		return 0x821FB4C4;
		  /* 821FB4C4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821FB4C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FB4D4;  }
		/* 821FB4C4h case    1:*/		return 0x821FB4C8;
		  /* 821FB4C8h */ case    2:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FB4C8h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FB4C8h case    2:*/		return 0x821FB4CC;
		  /* 821FB4CCh */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821FB4CCh case    3:*/		if ( regs.CR[0].eq ) { return 0x821FB4D4;  }
		/* 821FB4CCh case    3:*/		return 0x821FB4D0;
		  /* 821FB4D0h */ case    4:  		/* b 35184 */
		/* 821FB4D0h case    4:*/		return 0x82203E40;
		/* 821FB4D0h case    4:*/		return 0x821FB4D4;
	}
	return 0x821FB4D4;
} // Block from 821FB4C0h-821FB4D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FB4D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB4D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB4D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB4D4);
		  /* 821FB4D4h */ case    0:  		/* mr R8, R22 */
		/* 821FB4D4h case    0:*/		regs.R8 = regs.R22;
		/* 821FB4D4h case    0:*/		return 0x821FB4D8;
	}
	return 0x821FB4D8;
} // Block from 821FB4D4h-821FB4D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB4D8h
// Function '?ImportGlobalVariable@Compiler@D3DXShader@@AAAPAUVariable@2@PAVCNodeDecl@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB4D8);
		  /* 821FB4D8h */ case    0:  		/* lwz R6, <#[R1 + 424]> */
		/* 821FB4D8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001A8) );
		/* 821FB4D8h case    0:*/		return 0x821FB4DC;
		  /* 821FB4DCh */ case    1:  		/* li R7, 4 */
		/* 821FB4DCh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 821FB4DCh case    1:*/		return 0x821FB4E0;
		  /* 821FB4E0h */ case    2:  		/* mr R4, R20 */
		/* 821FB4E0h case    2:*/		regs.R4 = regs.R20;
		/* 821FB4E0h case    2:*/		return 0x821FB4E4;
		  /* 821FB4E4h */ case    3:  		/* mr R3, R31 */
		/* 821FB4E4h case    3:*/		regs.R3 = regs.R31;
		/* 821FB4E4h case    3:*/		return 0x821FB4E8;
		  /* 821FB4E8h */ case    4:  		/* bl -11424 */
		/* 821FB4E8h case    4:*/		regs.LR = 0x821FB4EC; return 0x821F8848;
		/* 821FB4E8h case    4:*/		return 0x821FB4EC;
		  /* 821FB4ECh */ case    5:  		/* mr R24, R3 */
		/* 821FB4ECh case    5:*/		regs.R24 = regs.R3;
		/* 821FB4ECh case    5:*/		return 0x821FB4F0;
		  /* 821FB4F0h */ case    6:  		/* mr R5, R3 */
		/* 821FB4F0h case    6:*/		regs.R5 = regs.R3;
		/* 821FB4F0h case    6:*/		return 0x821FB4F4;
		  /* 821FB4F4h */ case    7:  		/* mr R4, R20 */
		/* 821FB4F4h case    7:*/		regs.R4 = regs.R20;
		/* 821FB4F4h case    7:*/		return 0x821FB4F8;
		  /* 821FB4F8h */ case    8:  		/* addi R3, R1, 168 */
		/* 821FB4F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA8);
		/* 821FB4F8h case    8:*/		return 0x821FB4FC;
		  /* 821FB4FCh */ case    9:  		/* bl -20972 */
		/* 821FB4FCh case    9:*/		regs.LR = 0x821FB500; return 0x821F6310;
		/* 821FB4FCh case    9:*/		return 0x821FB500;
		  /* 821FB500h */ case   10:  		/* lwz R11, <#[R14 + 40]> */
		/* 821FB500h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821FB500h case   10:*/		return 0x821FB504;
		  /* 821FB504h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821FB504h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB504h case   11:*/		return 0x821FB508;
		  /* 821FB508h */ case   12:  		/* bc 12, CR6_EQ, 632 */
		/* 821FB508h case   12:*/		if ( regs.CR[6].eq ) { return 0x821FB780;  }
		/* 821FB508h case   12:*/		return 0x821FB50C;
		  /* 821FB50Ch */ case   13:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FB50Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FB50Ch case   13:*/		return 0x821FB510;
		  /* 821FB510h */ case   14:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821FB510h case   14:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821FB510h case   14:*/		return 0x821FB514;
		  /* 821FB514h */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 821FB514h case   15:*/		if ( regs.CR[0].eq ) { return 0x821FB51C;  }
		/* 821FB514h case   15:*/		return 0x821FB518;
		  /* 821FB518h */ case   16:  		/* b 35132 */
		/* 821FB518h case   16:*/		return 0x82203E54;
		/* 821FB518h case   16:*/		return 0x821FB51C;
	}
	return 0x821FB51C;
} // Block from 821FB4D8h-821FB51Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821FB51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB51C);
		  /* 821FB51Ch */ case    0:  		/* lwz R4, <#[R14 + 40]> */
		/* 821FB51Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000028) );
		/* 821FB51Ch case    0:*/		return 0x821FB520;
		  /* 821FB520h */ case    1:  		/* lwz R11, <#[R4 + 44]> */
		/* 821FB520h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 821FB520h case    1:*/		return 0x821FB524;
		  /* 821FB524h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821FB524h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB524h case    2:*/		return 0x821FB528;
		  /* 821FB528h */ case    3:  		/* bc 4, CR6_EQ, 268 */
		/* 821FB528h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FB634;  }
		/* 821FB528h case    3:*/		return 0x821FB52C;
		  /* 821FB52Ch */ case    4:  		/* lwz R11, <#[R4 + 16]> */
		/* 821FB52Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821FB52Ch case    4:*/		return 0x821FB530;
		  /* 821FB530h */ case    5:  		/* cmplwi CR6, R11, 3 */
		/* 821FB530h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821FB530h case    5:*/		return 0x821FB534;
		  /* 821FB534h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 821FB534h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FB53C;  }
		/* 821FB534h case    6:*/		return 0x821FB538;
		  /* 821FB538h */ case    7:  		/* b 35120 */
		/* 821FB538h case    7:*/		return 0x82203E68;
		/* 821FB538h case    7:*/		return 0x821FB53C;
	}
	return 0x821FB53C;
} // Block from 821FB51Ch-821FB53Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FB53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB53C);
		  /* 821FB53Ch */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FB53Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FB53Ch case    0:*/		return 0x821FB540;
		  /* 821FB540h */ case    1:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FB540h case    1:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FB540h case    1:*/		return 0x821FB544;
		  /* 821FB544h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821FB544h case    2:*/		if ( regs.CR[0].eq ) { return 0x821FB554;  }
		/* 821FB544h case    2:*/		return 0x821FB548;
		  /* 821FB548h */ case    3:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FB548h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FB548h case    3:*/		return 0x821FB54C;
		  /* 821FB54Ch */ case    4:  		/* addi R10, R11, 6 */
		/* 821FB54Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x6);
		/* 821FB54Ch case    4:*/		return 0x821FB550;
		  /* 821FB550h */ case    5:  		/* b 8 */
		/* 821FB550h case    5:*/		return 0x821FB558;
		/* 821FB550h case    5:*/		return 0x821FB554;
	}
	return 0x821FB554;
} // Block from 821FB53Ch-821FB554h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FB554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB554);
		  /* 821FB554h */ case    0:  		/* li R10, 720 */
		/* 821FB554h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2D0);
		/* 821FB554h case    0:*/		return 0x821FB558;
	}
	return 0x821FB558;
} // Block from 821FB554h-821FB558h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB558);
		  /* 821FB558h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FB558h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB558h case    0:*/		return 0x821FB55C;
		  /* 821FB55Ch */ case    1:  		/* lwz R9, <#[R11 + 80]> */
		/* 821FB55Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000050) );
		/* 821FB55Ch case    1:*/		return 0x821FB560;
		  /* 821FB560h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821FB560h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FB560h case    2:*/		return 0x821FB564;
		  /* 821FB564h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821FB564h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FB578;  }
		/* 821FB564h case    3:*/		return 0x821FB568;
		  /* 821FB568h */ case    4:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821FB568h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821FB568h case    4:*/		return 0x821FB56C;
		  /* 821FB56Ch */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821FB56Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821FB56Ch case    5:*/		return 0x821FB570;
		  /* 821FB570h */ case    6:  		/* lwzx R29, <#[R10 + R11]> */
		/* 821FB570h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FB570h case    6:*/		return 0x821FB574;
		  /* 821FB574h */ case    7:  		/* b 8 */
		/* 821FB574h case    7:*/		return 0x821FB57C;
		/* 821FB574h case    7:*/		return 0x821FB578;
	}
	return 0x821FB578;
} // Block from 821FB558h-821FB578h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FB578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB578);
		  /* 821FB578h */ case    0:  		/* mr R29, R19 */
		/* 821FB578h case    0:*/		regs.R29 = regs.R19;
		/* 821FB578h case    0:*/		return 0x821FB57C;
	}
	return 0x821FB57C;
} // Block from 821FB578h-821FB57Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB57C);
		  /* 821FB57Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FB57Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FB57Ch case    0:*/		return 0x821FB580;
		  /* 821FB580h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821FB580h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FB588;  }
		/* 821FB580h case    1:*/		return 0x821FB584;
		  /* 821FB584h */ case    2:  		/* b 35080 */
		/* 821FB584h case    2:*/		return 0x82203E8C;
		/* 821FB584h case    2:*/		return 0x821FB588;
	}
	return 0x821FB588;
} // Block from 821FB57Ch-821FB588h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB588);
		  /* 821FB588h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821FB588h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821FB588h case    0:*/		return 0x821FB58C;
		  /* 821FB58Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FB58Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB58Ch case    1:*/		return 0x821FB590;
		  /* 821FB590h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821FB590h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FB598;  }
		/* 821FB590h case    2:*/		return 0x821FB594;
		  /* 821FB594h */ case    3:  		/* b 35064 */
		/* 821FB594h case    3:*/		return 0x82203E8C;
		/* 821FB594h case    3:*/		return 0x821FB598;
	}
	return 0x821FB598;
} // Block from 821FB588h-821FB598h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FB598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB598);
		  /* 821FB598h */ case    0:  		/* rlwinm R28, R11, 0, 0, 31 */
		/* 821FB598h case    0:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R28,regs.R11);
		/* 821FB598h case    0:*/		return 0x821FB59C;
		  /* 821FB59Ch */ case    1:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FB59Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB59Ch case    1:*/		return 0x821FB5A0;
		  /* 821FB5A0h */ case    2:  		/* lwz R10, <#[R28 + 28]> */
		/* 821FB5A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000001C) );
		/* 821FB5A0h case    2:*/		return 0x821FB5A4;
		  /* 821FB5A4h */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 821FB5A4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821FB5A4h case    3:*/		return 0x821FB5A8;
		  /* 821FB5A8h */ case    4:  		/* bc 12, CR6_EQ, 228 */
		/* 821FB5A8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821FB68C;  }
		/* 821FB5A8h case    4:*/		return 0x821FB5AC;
		  /* 821FB5ACh */ case    5:  		/* mr R4, R28 */
		/* 821FB5ACh case    5:*/		regs.R4 = regs.R28;
		/* 821FB5ACh case    5:*/		return 0x821FB5B0;
		  /* 821FB5B0h */ case    6:  		/* mr R3, R31 */
		/* 821FB5B0h case    6:*/		regs.R3 = regs.R31;
		/* 821FB5B0h case    6:*/		return 0x821FB5B4;
		  /* 821FB5B4h */ case    7:  		/* bl 169452 */
		/* 821FB5B4h case    7:*/		regs.LR = 0x821FB5B8; return 0x82224BA0;
		/* 821FB5B4h case    7:*/		return 0x821FB5B8;
		  /* 821FB5B8h */ case    8:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FB5B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB5B8h case    8:*/		return 0x821FB5BC;
		  /* 821FB5BCh */ case    9:  		/* li R4, 0 */
		/* 821FB5BCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FB5BCh case    9:*/		return 0x821FB5C0;
		  /* 821FB5C0h */ case   10:  		/* mr R30, R3 */
		/* 821FB5C0h case   10:*/		regs.R30 = regs.R3;
		/* 821FB5C0h case   10:*/		return 0x821FB5C4;
		  /* 821FB5C4h */ case   11:  		/* stw R11, <#[R3 + 28]> */
		/* 821FB5C4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FB5C4h case   11:*/		return 0x821FB5C8;
		  /* 821FB5C8h */ case   12:  		/* lwz R5, <#[R28 + 44]> */
		/* 821FB5C8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000002C) );
		/* 821FB5C8h case   12:*/		return 0x821FB5CC;
		  /* 821FB5CCh */ case   13:  		/* bl -569116 */
		/* 821FB5CCh case   13:*/		regs.LR = 0x821FB5D0; return 0x821706B0;
		/* 821FB5CCh case   13:*/		return 0x821FB5D0;
		  /* 821FB5D0h */ case   14:  		/* li R4, 1 */
		/* 821FB5D0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821FB5D0h case   14:*/		return 0x821FB5D4;
		  /* 821FB5D4h */ case   15:  		/* mr R3, R30 */
		/* 821FB5D4h case   15:*/		regs.R3 = regs.R30;
		/* 821FB5D4h case   15:*/		return 0x821FB5D8;
		  /* 821FB5D8h */ case   16:  		/* lwz R5, <#[R28 + 48]> */
		/* 821FB5D8h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000030) );
		/* 821FB5D8h case   16:*/		return 0x821FB5DC;
		  /* 821FB5DCh */ case   17:  		/* bl -569132 */
		/* 821FB5DCh case   17:*/		regs.LR = 0x821FB5E0; return 0x821706B0;
		/* 821FB5DCh case   17:*/		return 0x821FB5E0;
		  /* 821FB5E0h */ case   18:  		/* lwz R10, <#[R31 + 564]> */
		/* 821FB5E0h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB5E0h case   18:*/		return 0x821FB5E4;
		  /* 821FB5E4h */ case   19:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821FB5E4h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821FB5E4h case   19:*/		return 0x821FB5E8;
		  /* 821FB5E8h */ case   20:  		/* addi R10, R10, 24 */
		/* 821FB5E8h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x18);
		/* 821FB5E8h case   20:*/		return 0x821FB5EC;
		  /* 821FB5ECh */ case   21:  		/* addi R11, R11, 36 */
		/* 821FB5ECh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821FB5ECh case   21:*/		return 0x821FB5F0;
		  /* 821FB5F0h */ case   22:  		/* addi R9, R10, -36 */
		/* 821FB5F0h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFDC);
		/* 821FB5F0h case   22:*/		return 0x821FB5F4;
		  /* 821FB5F4h */ case   23:  		/* addi R8, R11, -36 */
		/* 821FB5F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821FB5F4h case   23:*/		return 0x821FB5F8;
		  /* 821FB5F8h */ case   24:  		/* ori R7, R9, 1 */
		/* 821FB5F8h case   24:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R9,0x1);
		/* 821FB5F8h case   24:*/		return 0x821FB5FC;
		  /* 821FB5FCh */ case   25:  		/* lwz R6, <#[R10]> */
		/* 821FB5FCh case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821FB5FCh case   25:*/		return 0x821FB600;
		  /* 821FB600h */ case   26:  		/* addi R9, R11, 4 */
		/* 821FB600h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821FB600h case   26:*/		return 0x821FB604;
		  /* 821FB604h */ case   27:  		/* mr R28, R30 */
		/* 821FB604h case   27:*/		regs.R28 = regs.R30;
		/* 821FB604h case   27:*/		return 0x821FB608;
		  /* 821FB608h */ case   28:  		/* stw R6, <#[R11]> */
		/* 821FB608h case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821FB608h case   28:*/		return 0x821FB60C;
		  /* 821FB60Ch */ case   29:  		/* lwz R6, <#[R10]> */
		/* 821FB60Ch case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821FB60Ch case   29:*/		return 0x821FB610;
		  /* 821FB610h */ case   30:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821FB610h case   30:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821FB610h case   30:*/		return 0x821FB614;
		  /* 821FB614h */ case   31:  		/* stw R8, <#[R6]> */
		/* 821FB614h case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 821FB614h case   31:*/		return 0x821FB618;
		  /* 821FB618h */ case   32:  		/* stw R7, <#[R11 + 4]> */
		/* 821FB618h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821FB618h case   32:*/		return 0x821FB61C;
		  /* 821FB61Ch */ case   33:  		/* stw R9, <#[R10]> */
		/* 821FB61Ch case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821FB61Ch case   33:*/		return 0x821FB620;
		  /* 821FB620h */ case   34:  		/* stw R30, <#[R29]> */
		/* 821FB620h case   34:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821FB620h case   34:*/		return 0x821FB624;
		  /* 821FB624h */ case   35:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FB624h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FB624h case   35:*/		return 0x821FB628;
		  /* 821FB628h */ case   36:  		/* rlwimi R11, R21, 0, 16, 14 */
		/* 821FB628h case   36:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R21);
		/* 821FB628h case   36:*/		return 0x821FB62C;
		  /* 821FB62Ch */ case   37:  		/* stw R11, <#[R29 + 4]> */
		/* 821FB62Ch case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FB62Ch case   37:*/		return 0x821FB630;
		  /* 821FB630h */ case   38:  		/* b 92 */
		/* 821FB630h case   38:*/		return 0x821FB68C;
		/* 821FB630h case   38:*/		return 0x821FB634;
	}
	return 0x821FB634;
} // Block from 821FB598h-821FB634h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821FB634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB634);
		  /* 821FB634h */ case    0:  		/* addi R5, R1, 604 */
		/* 821FB634h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x25C);
		/* 821FB634h case    0:*/		return 0x821FB638;
	}
	return 0x821FB638;
} // Block from 821FB634h-821FB638h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB638h
// Function '?ImportParameters@Compiler@D3DXShader@@AAAXPAUFunction@2@W4VariableKind@2@_NPAVResultStack@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB638);
		  /* 821FB638h */ case    0:  		/* mr R3, R31 */
		/* 821FB638h case    0:*/		regs.R3 = regs.R31;
		/* 821FB638h case    0:*/		return 0x821FB63C;
		  /* 821FB63Ch */ case    1:  		/* bl -61012 */
		/* 821FB63Ch case    1:*/		regs.LR = 0x821FB640; return 0x821EC7E8;
		/* 821FB63Ch case    1:*/		return 0x821FB640;
		  /* 821FB640h */ case    2:  		/* mr R5, R3 */
		/* 821FB640h case    2:*/		regs.R5 = regs.R3;
		/* 821FB640h case    2:*/		return 0x821FB644;
		  /* 821FB644h */ case    3:  		/* mr R8, R22 */
		/* 821FB644h case    3:*/		regs.R8 = regs.R22;
		/* 821FB644h case    3:*/		return 0x821FB648;
		  /* 821FB648h */ case    4:  		/* lwz R6, <#[R1 + 604]> */
		/* 821FB648h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000025C) );
		/* 821FB648h case    4:*/		return 0x821FB64C;
		  /* 821FB64Ch */ case    5:  		/* li R7, 1 */
		/* 821FB64Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FB64Ch case    5:*/		return 0x821FB650;
		  /* 821FB650h */ case    6:  		/* mr R4, R20 */
		/* 821FB650h case    6:*/		regs.R4 = regs.R20;
		/* 821FB650h case    6:*/		return 0x821FB654;
		  /* 821FB654h */ case    7:  		/* mr R3, R31 */
		/* 821FB654h case    7:*/		regs.R3 = regs.R31;
		/* 821FB654h case    7:*/		return 0x821FB658;
		  /* 821FB658h */ case    8:  		/* bl -11792 */
		/* 821FB658h case    8:*/		regs.LR = 0x821FB65C; return 0x821F8848;
		/* 821FB658h case    8:*/		return 0x821FB65C;
		  /* 821FB65Ch */ case    9:  		/* mr R4, R20 */
		/* 821FB65Ch case    9:*/		regs.R4 = regs.R20;
		/* 821FB65Ch case    9:*/		return 0x821FB660;
		  /* 821FB660h */ case   10:  		/* addi R3, R1, 1384 */
		/* 821FB660h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x568);
		/* 821FB660h case   10:*/		return 0x821FB664;
		  /* 821FB664h */ case   11:  		/* bl -28692 */
		/* 821FB664h case   11:*/		regs.LR = 0x821FB668; return 0x821F4650;
		/* 821FB664h case   11:*/		return 0x821FB668;
		  /* 821FB668h */ case   12:  		/* addi R4, R1, 1384 */
		/* 821FB668h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x568);
		/* 821FB668h case   12:*/		return 0x821FB66C;
		  /* 821FB66Ch */ case   13:  		/* mr R3, R31 */
		/* 821FB66Ch case   13:*/		regs.R3 = regs.R31;
		/* 821FB66Ch case   13:*/		return 0x821FB670;
		  /* 821FB670h */ case   14:  		/* bl -37616 */
		/* 821FB670h case   14:*/		regs.LR = 0x821FB674; return 0x821F2380;
		/* 821FB670h case   14:*/		return 0x821FB674;
		  /* 821FB674h */ case   15:  		/* mr R11, R3 */
		/* 821FB674h case   15:*/		regs.R11 = regs.R3;
		/* 821FB674h case   15:*/		return 0x821FB678;
		  /* 821FB678h */ case   16:  		/* mr R3, R31 */
		/* 821FB678h case   16:*/		regs.R3 = regs.R31;
		/* 821FB678h case   16:*/		return 0x821FB67C;
		  /* 821FB67Ch */ case   17:  		/* mr R5, R11 */
		/* 821FB67Ch case   17:*/		regs.R5 = regs.R11;
		/* 821FB67Ch case   17:*/		return 0x821FB680;
		  /* 821FB680h */ case   18:  		/* mr R4, R11 */
		/* 821FB680h case   18:*/		regs.R4 = regs.R11;
		/* 821FB680h case   18:*/		return 0x821FB684;
		  /* 821FB684h */ case   19:  		/* bl -50716 */
		/* 821FB684h case   19:*/		regs.LR = 0x821FB688; return 0x821EF068;
		/* 821FB684h case   19:*/		return 0x821FB688;
		  /* 821FB688h */ case   20:  		/* mr R28, R3 */
		/* 821FB688h case   20:*/		regs.R28 = regs.R3;
		/* 821FB688h case   20:*/		return 0x821FB68C;
	}
	return 0x821FB68C;
} // Block from 821FB638h-821FB68Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821FB68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB68C);
		  /* 821FB68Ch */ case    0:  		/* lwz R26, <#[R1 + 172]> */
		/* 821FB68Ch case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000AC) );
		/* 821FB68Ch case    0:*/		return 0x821FB690;
		  /* 821FB690h */ case    1:  		/* mr R29, R19 */
		/* 821FB690h case    1:*/		regs.R29 = regs.R19;
		/* 821FB690h case    1:*/		return 0x821FB694;
		  /* 821FB694h */ case    2:  		/* lwz R25, <#[R1 + 176]> */
		/* 821FB694h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 821FB694h case    2:*/		return 0x821FB698;
		  /* 821FB698h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 821FB698h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821FB698h case    3:*/		return 0x821FB69C;
		  /* 821FB69Ch */ case    4:  		/* bc 12, CR6_EQ, 208 */
		/* 821FB69Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821FB76C;  }
		/* 821FB69Ch case    4:*/		return 0x821FB6A0;
		  /* 821FB6A0h */ case    5:  		/* addi R3, R1, 168 */
		/* 821FB6A0h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA8);
		/* 821FB6A0h case    5:*/		return 0x821FB6A4;
		  /* 821FB6A4h */ case    6:  		/* bl -239684 */
		/* 821FB6A4h case    6:*/		regs.LR = 0x821FB6A8; return 0x821C0E60;
		/* 821FB6A4h case    6:*/		return 0x821FB6A8;
		  /* 821FB6A8h */ case    7:  		/* mr R30, R3 */
		/* 821FB6A8h case    7:*/		regs.R30 = regs.R3;
		/* 821FB6A8h case    7:*/		return 0x821FB6AC;
		  /* 821FB6ACh */ case    8:  		/* mr R3, R31 */
		/* 821FB6ACh case    8:*/		regs.R3 = regs.R31;
		/* 821FB6ACh case    8:*/		return 0x821FB6B0;
		  /* 821FB6B0h */ case    9:  		/* mr R4, R30 */
		/* 821FB6B0h case    9:*/		regs.R4 = regs.R30;
		/* 821FB6B0h case    9:*/		return 0x821FB6B4;
		  /* 821FB6B4h */ case   10:  		/* bl -37684 */
		/* 821FB6B4h case   10:*/		regs.LR = 0x821FB6B8; return 0x821F2380;
		/* 821FB6B4h case   10:*/		return 0x821FB6B8;
		  /* 821FB6B8h */ case   11:  		/* lwz R11, <#[R3 + 12]> */
		/* 821FB6B8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FB6B8h case   11:*/		return 0x821FB6BC;
		  /* 821FB6BCh */ case   12:  		/* mr R27, R3 */
		/* 821FB6BCh case   12:*/		regs.R27 = regs.R3;
		/* 821FB6BCh case   12:*/		return 0x821FB6C0;
		  /* 821FB6C0h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FB6C0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FB6C0h case   13:*/		return 0x821FB6C4;
		  /* 821FB6C4h */ case   14:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821FB6C4h case   14:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821FB6C4h case   14:*/		return 0x821FB6C8;
		  /* 821FB6C8h */ case   15:  		/* cmplwi CR6, R11, 125 */
		/* 821FB6C8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821FB6C8h case   15:*/		return 0x821FB6CC;
		  /* 821FB6CCh */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 821FB6CCh case   16:*/		if ( regs.CR[6].eq ) { return 0x821FB6DC;  }
		/* 821FB6CCh case   16:*/		return 0x821FB6D0;
		  /* 821FB6D0h */ case   17:  		/* cmplwi CR6, R11, 124 */
		/* 821FB6D0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821FB6D0h case   17:*/		return 0x821FB6D4;
		  /* 821FB6D4h */ case   18:  		/* mr R11, R19 */
		/* 821FB6D4h case   18:*/		regs.R11 = regs.R19;
		/* 821FB6D4h case   18:*/		return 0x821FB6D8;
		  /* 821FB6D8h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 821FB6D8h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821FB6E0;  }
		/* 821FB6D8h case   19:*/		return 0x821FB6DC;
	}
	return 0x821FB6DC;
} // Block from 821FB68Ch-821FB6DCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FB6DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB6DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB6DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB6DC);
		  /* 821FB6DCh */ case    0:  		/* mr R11, R21 */
		/* 821FB6DCh case    0:*/		regs.R11 = regs.R21;
		/* 821FB6DCh case    0:*/		return 0x821FB6E0;
	}
	return 0x821FB6E0;
} // Block from 821FB6DCh-821FB6E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB6E0);
		  /* 821FB6E0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FB6E0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FB6E0h case    0:*/		return 0x821FB6E4;
		  /* 821FB6E4h */ case    1:  		/* mr R3, R31 */
		/* 821FB6E4h case    1:*/		regs.R3 = regs.R31;
		/* 821FB6E4h case    1:*/		return 0x821FB6E8;
		  /* 821FB6E8h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 821FB6E8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821FB6F0;  }
		/* 821FB6E8h case    2:*/		return 0x821FB6EC;
		  /* 821FB6ECh */ case    3:  		/* b 34732 */
		/* 821FB6ECh case    3:*/		return 0x82203E98;
		/* 821FB6ECh case    3:*/		return 0x821FB6F0;
	}
	return 0x821FB6F0;
} // Block from 821FB6E0h-821FB6F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FB6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB6F0);
		  /* 821FB6F0h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FB6F0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FB6F0h case    0:*/		return 0x821FB6F4;
		  /* 821FB6F4h */ case    1:  		/* li R8, 1 */
		/* 821FB6F4h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FB6F4h case    1:*/		return 0x821FB6F8;
		  /* 821FB6F8h */ case    2:  		/* li R7, 2 */
		/* 821FB6F8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821FB6F8h case    2:*/		return 0x821FB6FC;
		  /* 821FB6FCh */ case    3:  		/* addi R5, R4, 24 */
		/* 821FB6FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FB6FCh case    3:*/		return 0x821FB700;
		  /* 821FB700h */ case    4:  		/* li R6, 118 */
		/* 821FB700h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x76);
		/* 821FB700h case    4:*/		return 0x821FB704;
		  /* 821FB704h */ case    5:  		/* bl 168596 */
		/* 821FB704h case    5:*/		regs.LR = 0x821FB708; return 0x82224998;
		/* 821FB704h case    5:*/		return 0x821FB708;
		  /* 821FB708h */ case    6:  		/* mr R5, R27 */
		/* 821FB708h case    6:*/		regs.R5 = regs.R27;
		/* 821FB708h case    6:*/		return 0x821FB70C;
		  /* 821FB70Ch */ case    7:  		/* li R4, 0 */
		/* 821FB70Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FB70Ch case    7:*/		return 0x821FB710;
		  /* 821FB710h */ case    8:  		/* mr R18, R3 */
		/* 821FB710h case    8:*/		regs.R18 = regs.R3;
		/* 821FB710h case    8:*/		return 0x821FB714;
		  /* 821FB714h */ case    9:  		/* bl -569444 */
		/* 821FB714h case    9:*/		regs.LR = 0x821FB718; return 0x821706B0;
		/* 821FB714h case    9:*/		return 0x821FB718;
		  /* 821FB718h */ case   10:  		/* li R5, 0 */
		/* 821FB718h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FB718h case   10:*/		return 0x821FB71C;
		  /* 821FB71Ch */ case   11:  		/* mr R4, R28 */
		/* 821FB71Ch case   11:*/		regs.R4 = regs.R28;
		/* 821FB71Ch case   11:*/		return 0x821FB720;
		  /* 821FB720h */ case   12:  		/* mr R3, R31 */
		/* 821FB720h case   12:*/		regs.R3 = regs.R31;
		/* 821FB720h case   12:*/		return 0x821FB724;
		  /* 821FB724h */ case   13:  		/* bl -569300 */
		/* 821FB724h case   13:*/		regs.LR = 0x821FB728; return 0x82170750;
		/* 821FB724h case   13:*/		return 0x821FB728;
		  /* 821FB728h */ case   14:  		/* mr R5, R3 */
		/* 821FB728h case   14:*/		regs.R5 = regs.R3;
		/* 821FB728h case   14:*/		return 0x821FB72C;
		  /* 821FB72Ch */ case   15:  		/* mr R3, R18 */
		/* 821FB72Ch case   15:*/		regs.R3 = regs.R18;
		/* 821FB72Ch case   15:*/		return 0x821FB730;
		  /* 821FB730h */ case   16:  		/* li R4, 1 */
		/* 821FB730h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821FB730h case   16:*/		return 0x821FB734;
		  /* 821FB734h */ case   17:  		/* bl -569476 */
		/* 821FB734h case   17:*/		regs.LR = 0x821FB738; return 0x821706B0;
		/* 821FB734h case   17:*/		return 0x821FB738;
		  /* 821FB738h */ case   18:  		/* mr R4, R18 */
		/* 821FB738h case   18:*/		regs.R4 = regs.R18;
		/* 821FB738h case   18:*/		return 0x821FB73C;
		  /* 821FB73Ch */ case   19:  		/* mr R3, R31 */
		/* 821FB73Ch case   19:*/		regs.R3 = regs.R31;
		/* 821FB73Ch case   19:*/		return 0x821FB740;
		  /* 821FB740h */ case   20:  		/* bl -538432 */
		/* 821FB740h case   20:*/		regs.LR = 0x821FB744; return 0x82178000;
		/* 821FB740h case   20:*/		return 0x821FB744;
		  /* 821FB744h */ case   21:  		/* lwz R11, <#[R3]> */
		/* 821FB744h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FB744h case   21:*/		return 0x821FB748;
		  /* 821FB748h */ case   22:  		/* addi R29, R29, 1 */
		/* 821FB748h case   22:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821FB748h case   22:*/		return 0x821FB74C;
		  /* 821FB74Ch */ case   23:  		/* rlwimi R11, R21, 3, 27, 31 */
		/* 821FB74Ch case   23:*/		cpu::op::rlwimi<0,3,27,31>(regs,&regs.R11,regs.R21);
		/* 821FB74Ch case   23:*/		return 0x821FB750;
		  /* 821FB750h */ case   24:  		/* cmplw CR6, R29, R24 */
		/* 821FB750h case   24:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R24);
		/* 821FB750h case   24:*/		return 0x821FB754;
		  /* 821FB754h */ case   25:  		/* stw R11, <#[R3]> */
		/* 821FB754h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FB754h case   25:*/		return 0x821FB758;
		  /* 821FB758h */ case   26:  		/* stw R3, <#[R30]> */
		/* 821FB758h case   26:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FB758h case   26:*/		return 0x821FB75C;
		  /* 821FB75Ch */ case   27:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FB75Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FB75Ch case   27:*/		return 0x821FB760;
		  /* 821FB760h */ case   28:  		/* rlwimi R11, R21, 1, 16, 14 */
		/* 821FB760h case   28:*/		cpu::op::rlwimi<0,1,16,14>(regs,&regs.R11,regs.R21);
		/* 821FB760h case   28:*/		return 0x821FB764;
		  /* 821FB764h */ case   29:  		/* stw R11, <#[R30 + 4]> */
		/* 821FB764h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FB764h case   29:*/		return 0x821FB768;
		  /* 821FB768h */ case   30:  		/* bc 12, CR6_LT, -200 */
		/* 821FB768h case   30:*/		if ( regs.CR[6].lt ) { return 0x821FB6A0;  }
		/* 821FB768h case   30:*/		return 0x821FB76C;
	}
	return 0x821FB76C;
} // Block from 821FB6F0h-821FB76Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 821FB76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB76C);
		  /* 821FB76Ch */ case    0:  		/* mr R28, R26 */
		/* 821FB76Ch case    0:*/		regs.R28 = regs.R26;
		/* 821FB76Ch case    0:*/		return 0x821FB770;
		  /* 821FB770h */ case    1:  		/* stw R26, <#[R1 + 172]> */
		/* 821FB770h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000AC) );
		/* 821FB770h case    1:*/		return 0x821FB774;
		  /* 821FB774h */ case    2:  		/* mr R29, R25 */
		/* 821FB774h case    2:*/		regs.R29 = regs.R25;
		/* 821FB774h case    2:*/		return 0x821FB778;
		  /* 821FB778h */ case    3:  		/* stw R25, <#[R1 + 176]> */
		/* 821FB778h case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 821FB778h case    3:*/		return 0x821FB77C;
		  /* 821FB77Ch */ case    4:  		/* b 12 */
		/* 821FB77Ch case    4:*/		return 0x821FB788;
		/* 821FB77Ch case    4:*/		return 0x821FB780;
	}
	return 0x821FB780;
} // Block from 821FB76Ch-821FB780h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FB780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB780);
		  /* 821FB780h */ case    0:  		/* lwz R29, <#[R1 + 176]> */
		/* 821FB780h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000B0) );
		/* 821FB780h case    0:*/		return 0x821FB784;
		  /* 821FB784h */ case    1:  		/* lwz R28, <#[R1 + 172]> */
		/* 821FB784h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000AC) );
		/* 821FB784h case    1:*/		return 0x821FB788;
	}
	return 0x821FB788;
} // Block from 821FB780h-821FB788h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FB788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB788);
		  /* 821FB788h */ case    0:  		/* cmplwi CR6, R24, 4 */
		/* 821FB788h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000004);
		/* 821FB788h case    0:*/		return 0x821FB78C;
		  /* 821FB78Ch */ case    1:  		/* bc 4, CR6_LT, 40 */
		/* 821FB78Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x821FB7B4;  }
		/* 821FB78Ch case    1:*/		return 0x821FB790;
		  /* 821FB790h */ case    2:  		/* addi R11, R29, 2 */
		/* 821FB790h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x2);
		/* 821FB790h case    2:*/		return 0x821FB794;
		  /* 821FB794h */ case    3:  		/* subfic R30, R24, 4 */
		/* 821FB794h case    3:*/		cpu::op::subfic<0>(regs,&regs.R30,regs.R24,0x4);
		/* 821FB794h case    3:*/		return 0x821FB798;
		  /* 821FB798h */ case    4:  		/* rlwinm R27, R11, 3, 0, 28 */
		/* 821FB798h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R27,regs.R11);
		/* 821FB798h case    4:*/		return 0x821FB79C;
		  /* 821FB79Ch */ case    5:  		/* add R24, R30, R24 */
		/* 821FB79Ch case    5:*/		cpu::op::add<0>(regs,&regs.R24,regs.R30,regs.R24);
		/* 821FB79Ch case    5:*/		return 0x821FB7A0;
		  /* 821FB7A0h */ case    6:  		/* mr R3, R20 */
		/* 821FB7A0h case    6:*/		regs.R3 = regs.R20;
		/* 821FB7A0h case    6:*/		return 0x821FB7A4;
		  /* 821FB7A4h */ case    7:  		/* ldx R4, <#[R27 + R28]> */
		/* 821FB7A4h case    7:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R27 + regs.R28 + 0x00000000) );
		/* 821FB7A4h case    7:*/		return 0x821FB7A8;
		  /* 821FB7A8h */ case    8:  		/* bl -19120 */
		/* 821FB7A8h case    8:*/		regs.LR = 0x821FB7AC; return 0x821F6CF8;
		/* 821FB7A8h case    8:*/		return 0x821FB7AC;
		  /* 821FB7ACh */ case    9:  		/* addic. R30, R30, -1 */
		/* 821FB7ACh case    9:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821FB7ACh case    9:*/		return 0x821FB7B0;
		  /* 821FB7B0h */ case   10:  		/* bc 4, CR0_EQ, -16 */
		/* 821FB7B0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821FB7A0;  }
		/* 821FB7B0h case   10:*/		return 0x821FB7B4;
	}
	return 0x821FB7B4;
} // Block from 821FB788h-821FB7B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FB7B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB7B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB7B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB7B4);
		  /* 821FB7B4h */ case    0:  		/* lwz R11, <#[R14 + 20]> */
		/* 821FB7B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000014) );
		/* 821FB7B4h case    0:*/		return 0x821FB7B8;
		  /* 821FB7B8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FB7B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB7B8h case    1:*/		return 0x821FB7BC;
		  /* 821FB7BCh */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821FB7BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821FB7CC;  }
		/* 821FB7BCh case    2:*/		return 0x821FB7C0;
		  /* 821FB7C0h */ case    3:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FB7C0h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FB7C0h case    3:*/		return 0x821FB7C4;
		  /* 821FB7C4h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 821FB7C4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821FB7CC;  }
		/* 821FB7C4h case    4:*/		return 0x821FB7C8;
		  /* 821FB7C8h */ case    5:  		/* b 34528 */
		/* 821FB7C8h case    5:*/		return 0x82203EA8;
		/* 821FB7C8h case    5:*/		return 0x821FB7CC;
	}
	return 0x821FB7CC;
} // Block from 821FB7B4h-821FB7CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FB7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB7CC);
		  /* 821FB7CCh */ case    0:  		/* mr R30, R19 */
		/* 821FB7CCh case    0:*/		regs.R30 = regs.R19;
		/* 821FB7CCh case    0:*/		return 0x821FB7D0;
		  /* 821FB7D0h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 821FB7D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821FB7D0h case    1:*/		return 0x821FB7D4;
		  /* 821FB7D4h */ case    2:  		/* bc 12, CR6_EQ, 192 */
		/* 821FB7D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FB894;  }
		/* 821FB7D4h case    2:*/		return 0x821FB7D8;
		  /* 821FB7D8h */ case    3:  		/* addi R3, R1, 168 */
		/* 821FB7D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA8);
		/* 821FB7D8h case    3:*/		return 0x821FB7DC;
		  /* 821FB7DCh */ case    4:  		/* bl -239996 */
		/* 821FB7DCh case    4:*/		regs.LR = 0x821FB7E0; return 0x821C0E60;
		/* 821FB7DCh case    4:*/		return 0x821FB7E0;
		  /* 821FB7E0h */ case    5:  		/* ld R9, <#[R3]> */
		/* 821FB7E0h case    5:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821FB7E0h case    5:*/		return 0x821FB7E4;
		  /* 821FB7E4h */ case    6:  		/* lwz R10, <#[R14 + 20]> */
		/* 821FB7E4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000014) );
		/* 821FB7E4h case    6:*/		return 0x821FB7E8;
		  /* 821FB7E8h */ case    7:  		/* mr R11, R3 */
		/* 821FB7E8h case    7:*/		regs.R11 = regs.R3;
		/* 821FB7E8h case    7:*/		return 0x821FB7EC;
		  /* 821FB7ECh */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821FB7ECh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FB7ECh case    8:*/		return 0x821FB7F0;
		  /* 821FB7F0h */ case    9:  		/* std R9, <#[R1 + 96]> */
		/* 821FB7F0h case    9:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821FB7F0h case    9:*/		return 0x821FB7F4;
		  /* 821FB7F4h */ case   10:  		/* bc 12, CR6_EQ, 136 */
		/* 821FB7F4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821FB87C;  }
		/* 821FB7F4h case   10:*/		return 0x821FB7F8;
		  /* 821FB7F8h */ case   11:  		/* lis R9, 256 */
		/* 821FB7F8h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0x100);
		/* 821FB7F8h case   11:*/		return 0x821FB7FC;
		  /* 821FB7FCh */ case   12:  		/* mr R3, R31 */
		/* 821FB7FCh case   12:*/		regs.R3 = regs.R31;
		/* 821FB7FCh case   12:*/		return 0x821FB800;
		  /* 821FB800h */ case   13:  		/* cmplw CR6, R10, R9 */
		/* 821FB800h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821FB800h case   13:*/		return 0x821FB804;
		  /* 821FB804h */ case   14:  		/* bc 12, CR6_EQ, 92 */
		/* 821FB804h case   14:*/		if ( regs.CR[6].eq ) { return 0x821FB860;  }
		/* 821FB804h case   14:*/		return 0x821FB808;
		  /* 821FB808h */ case   15:  		/* lis R9, 2816 */
		/* 821FB808h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xB00);
		/* 821FB808h case   15:*/		return 0x821FB80C;
		  /* 821FB80Ch */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 821FB80Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821FB80Ch case   16:*/		return 0x821FB810;
		  /* 821FB810h */ case   17:  		/* bc 12, CR6_EQ, 68 */
		/* 821FB810h case   17:*/		if ( regs.CR[6].eq ) { return 0x821FB854;  }
		/* 821FB810h case   17:*/		return 0x821FB814;
		  /* 821FB814h */ case   18:  		/* lis R9, 3072 */
		/* 821FB814h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0xC00);
		/* 821FB814h case   18:*/		return 0x821FB818;
		  /* 821FB818h */ case   19:  		/* cmplw CR6, R10, R9 */
		/* 821FB818h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821FB818h case   19:*/		return 0x821FB81C;
		  /* 821FB81Ch */ case   20:  		/* bc 12, CR6_EQ, 8 */
		/* 821FB81Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821FB824;  }
		/* 821FB81Ch case   20:*/		return 0x821FB820;
		  /* 821FB820h */ case   21:  		/* b 34452 */
		/* 821FB820h case   21:*/		return 0x82203EB4;
		/* 821FB820h case   21:*/		return 0x821FB824;
	}
	return 0x821FB824;
} // Block from 821FB7CCh-821FB824h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821FB824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB824);
		  /* 821FB824h */ case    0:  		/* ld R4, <#[R11]> */
		/* 821FB824h case    0:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821FB824h case    0:*/		return 0x821FB828;
		  /* 821FB828h */ case    1:  		/* bl -35792 */
		/* 821FB828h case    1:*/		regs.LR = 0x821FB82C; return 0x821F2C58;
		/* 821FB828h case    1:*/		return 0x821FB82C;
		  /* 821FB82Ch */ case    2:  		/* mr R11, R3 */
		/* 821FB82Ch case    2:*/		regs.R11 = regs.R3;
		/* 821FB82Ch case    2:*/		return 0x821FB830;
		  /* 821FB830h */ case    3:  		/* mr R3, R31 */
		/* 821FB830h case    3:*/		regs.R3 = regs.R31;
		/* 821FB830h case    3:*/		return 0x821FB834;
		  /* 821FB834h */ case    4:  		/* mr R4, R11 */
		/* 821FB834h case    4:*/		regs.R4 = regs.R11;
		/* 821FB834h case    4:*/		return 0x821FB838;
		  /* 821FB838h */ case    5:  		/* lwz R5, <#[R11 + 12]> */
		/* 821FB838h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FB838h case    5:*/		return 0x821FB83C;
		  /* 821FB83Ch */ case    6:  		/* bl -567116 */
		/* 821FB83Ch case    6:*/		regs.LR = 0x821FB840; return 0x821710F0;
		/* 821FB83Ch case    6:*/		return 0x821FB840;
		  /* 821FB840h */ case    7:  		/* li R4, 4 */
		/* 821FB840h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FB840h case    7:*/		return 0x821FB844;
		  /* 821FB844h */ case    8:  		/* mr R27, R3 */
		/* 821FB844h case    8:*/		regs.R27 = regs.R3;
		/* 821FB844h case    8:*/		return 0x821FB848;
		  /* 821FB848h */ case    9:  		/* bl -540040 */
		/* 821FB848h case    9:*/		regs.LR = 0x821FB84C; return 0x82177AC0;
		/* 821FB848h case    9:*/		return 0x821FB84C;
		  /* 821FB84Ch */ case   10:  		/* stw R27, <#[R1 + 96]> */
		/* 821FB84Ch case   10:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 821FB84Ch case   10:*/		return 0x821FB850;
		  /* 821FB850h */ case   11:  		/* b 28 */
		/* 821FB850h case   11:*/		return 0x821FB86C;
		/* 821FB850h case   11:*/		return 0x821FB854;
	}
	return 0x821FB854;
} // Block from 821FB824h-821FB854h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FB854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB854);
		  /* 821FB854h */ case    0:  		/* ld R4, <#[R11]> */
		/* 821FB854h case    0:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821FB854h case    0:*/		return 0x821FB858;
		  /* 821FB858h */ case    1:  		/* bl -35840 */
		/* 821FB858h case    1:*/		regs.LR = 0x821FB85C; return 0x821F2C58;
		/* 821FB858h case    1:*/		return 0x821FB85C;
		  /* 821FB85Ch */ case    2:  		/* b 12 */
		/* 821FB85Ch case    2:*/		return 0x821FB868;
		/* 821FB85Ch case    2:*/		return 0x821FB860;
	}
	return 0x821FB860;
} // Block from 821FB854h-821FB860h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB860);
		  /* 821FB860h */ case    0:  		/* ld R4, <#[R11]> */
		/* 821FB860h case    0:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821FB860h case    0:*/		return 0x821FB864;
		  /* 821FB864h */ case    1:  		/* bl -35916 */
		/* 821FB864h case    1:*/		regs.LR = 0x821FB868; return 0x821F2C18;
		/* 821FB864h case    1:*/		return 0x821FB868;
	}
	return 0x821FB868;
} // Block from 821FB860h-821FB868h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FB868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB868);
		  /* 821FB868h */ case    0:  		/* stw R3, <#[R1 + 96]> */
		/* 821FB868h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821FB868h case    0:*/		return 0x821FB86C;
	}
	return 0x821FB86C;
} // Block from 821FB868h-821FB86Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB86C);
		  /* 821FB86Ch */ case    0:  		/* lwz R11, <#[R1 + 100]> */
		/* 821FB86Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821FB86Ch case    0:*/		return 0x821FB870;
		  /* 821FB870h */ case    1:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 821FB870h case    1:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821FB870h case    1:*/		return 0x821FB874;
		  /* 821FB874h */ case    2:  		/* ori R11, R11, 2 */
		/* 821FB874h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FB874h case    2:*/		return 0x821FB878;
		  /* 821FB878h */ case    3:  		/* stw R11, <#[R1 + 100]> */
		/* 821FB878h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821FB878h case    3:*/		return 0x821FB87C;
	}
	return 0x821FB87C;
} // Block from 821FB86Ch-821FB87Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FB87Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB87C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB87C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB87C);
		  /* 821FB87Ch */ case    0:  		/* mr R3, R20 */
		/* 821FB87Ch case    0:*/		regs.R3 = regs.R20;
		/* 821FB87Ch case    0:*/		return 0x821FB880;
		  /* 821FB880h */ case    1:  		/* ld R4, <#[R1 + 96]> */
		/* 821FB880h case    1:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000060) );
		/* 821FB880h case    1:*/		return 0x821FB884;
		  /* 821FB884h */ case    2:  		/* bl -19340 */
		/* 821FB884h case    2:*/		regs.LR = 0x821FB888; return 0x821F6CF8;
		/* 821FB884h case    2:*/		return 0x821FB888;
		  /* 821FB888h */ case    3:  		/* addi R30, R30, 1 */
		/* 821FB888h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821FB888h case    3:*/		return 0x821FB88C;
		  /* 821FB88Ch */ case    4:  		/* cmplw CR6, R30, R24 */
		/* 821FB88Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 821FB88Ch case    4:*/		return 0x821FB890;
		  /* 821FB890h */ case    5:  		/* bc 12, CR6_LT, -184 */
		/* 821FB890h case    5:*/		if ( regs.CR[6].lt ) { return 0x821FB7D8;  }
		/* 821FB890h case    5:*/		return 0x821FB894;
	}
	return 0x821FB894;
} // Block from 821FB87Ch-821FB894h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FB894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB894);
		  /* 821FB894h */ case    0:  		/* mr R5, R24 */
		/* 821FB894h case    0:*/		regs.R5 = regs.R24;
		/* 821FB894h case    0:*/		return 0x821FB898;
		  /* 821FB898h */ case    1:  		/* stw R28, <#[R1 + 172]> */
		/* 821FB898h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000000AC) );
		/* 821FB898h case    1:*/		return 0x821FB89C;
		  /* 821FB89Ch */ case    2:  		/* mr R4, R20 */
		/* 821FB89Ch case    2:*/		regs.R4 = regs.R20;
		/* 821FB89Ch case    2:*/		return 0x821FB8A0;
		  /* 821FB8A0h */ case    3:  		/* stw R29, <#[R1 + 176]> */
		/* 821FB8A0h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000B0) );
		/* 821FB8A0h case    3:*/		return 0x821FB8A4;
		  /* 821FB8A4h */ case    4:  		/* addi R3, R1, 1816 */
		/* 821FB8A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x718);
		/* 821FB8A4h case    4:*/		return 0x821FB8A8;
		  /* 821FB8A8h */ case    5:  		/* bl -21912 */
		/* 821FB8A8h case    5:*/		regs.LR = 0x821FB8AC; return 0x821F6310;
		/* 821FB8A8h case    5:*/		return 0x821FB8AC;
		  /* 821FB8ACh */ case    6:  		/* mr R30, R19 */
		/* 821FB8ACh case    6:*/		regs.R30 = regs.R19;
		/* 821FB8ACh case    6:*/		return 0x821FB8B0;
		  /* 821FB8B0h */ case    7:  		/* lwz R10, <#[R14 + 36]> */
		/* 821FB8B0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000024) );
		/* 821FB8B0h case    7:*/		return 0x821FB8B4;
		  /* 821FB8B4h */ case    8:  		/* srw R11, R10, R30 */
		/* 821FB8B4h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R30);
		/* 821FB8B4h case    8:*/		return 0x821FB8B8;
		  /* 821FB8B8h */ case    9:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821FB8B8h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821FB8B8h case    9:*/		return 0x821FB8BC;
		  /* 821FB8BCh */ case   10:  		/* cmplwi CR6, R10, 228 */
		/* 821FB8BCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x000000E4);
		/* 821FB8BCh case   10:*/		return 0x821FB8C0;
		  /* 821FB8C0h */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 821FB8C0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821FB8E0;  }
		/* 821FB8C0h case   11:*/		return 0x821FB8C4;
		  /* 821FB8C4h */ case   12:  		/* cmplw CR6, R11, R23 */
		/* 821FB8C4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821FB8C4h case   12:*/		return 0x821FB8C8;
		  /* 821FB8C8h */ case   13:  		/* bc 12, CR6_LT, 24 */
		/* 821FB8C8h case   13:*/		if ( regs.CR[6].lt ) { return 0x821FB8E0;  }
		/* 821FB8C8h case   13:*/		return 0x821FB8CC;
		  /* 821FB8CCh */ case   14:  		/* lwz R10, <#[R31 + 40]> */
		/* 821FB8CCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 821FB8CCh case   14:*/		return 0x821FB8D0;
		  /* 821FB8D0h */ case   15:  		/* rlwinm. R10, R10, 0, 15, 15 */
		/* 821FB8D0h case   15:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R10);
		/* 821FB8D0h case   15:*/		return 0x821FB8D4;
		  /* 821FB8D4h */ case   16:  		/* bc 4, CR0_EQ, 8 */
		/* 821FB8D4h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821FB8DC;  }
		/* 821FB8D4h case   16:*/		return 0x821FB8D8;
		  /* 821FB8D8h */ case   17:  		/* b 34276 */
		/* 821FB8D8h case   17:*/		return 0x82203EBC;
		/* 821FB8D8h case   17:*/		return 0x821FB8DC;
	}
	return 0x821FB8DC;
} // Block from 821FB894h-821FB8DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821FB8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB8DC);
		  /* 821FB8DCh */ case    0:  		/* mr R11, R19 */
		/* 821FB8DCh case    0:*/		regs.R11 = regs.R19;
		/* 821FB8DCh case    0:*/		return 0x821FB8E0;
	}
	return 0x821FB8E0;
} // Block from 821FB8DCh-821FB8E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FB8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB8E0);
		  /* 821FB8E0h */ case    0:  		/* mr R4, R11 */
		/* 821FB8E0h case    0:*/		regs.R4 = regs.R11;
		/* 821FB8E0h case    0:*/		return 0x821FB8E4;
		  /* 821FB8E4h */ case    1:  		/* addi R3, R1, 1816 */
		/* 821FB8E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x718);
		/* 821FB8E4h case    1:*/		return 0x821FB8E8;
		  /* 821FB8E8h */ case    2:  		/* bl -39600 */
		/* 821FB8E8h case    2:*/		regs.LR = 0x821FB8EC; return 0x821F1E38;
		/* 821FB8E8h case    2:*/		return 0x821FB8EC;
		  /* 821FB8ECh */ case    3:  		/* mr R29, R3 */
		/* 821FB8ECh case    3:*/		regs.R29 = regs.R3;
		/* 821FB8ECh case    3:*/		return 0x821FB8F0;
		  /* 821FB8F0h */ case    4:  		/* addi R3, R1, 168 */
		/* 821FB8F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA8);
		/* 821FB8F0h case    4:*/		return 0x821FB8F4;
		  /* 821FB8F4h */ case    5:  		/* bl -240276 */
		/* 821FB8F4h case    5:*/		regs.LR = 0x821FB8F8; return 0x821C0E60;
		/* 821FB8F4h case    5:*/		return 0x821FB8F8;
		  /* 821FB8F8h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 821FB8F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821FB8F8h case    6:*/		return 0x821FB8FC;
		  /* 821FB8FCh */ case    7:  		/* addi R30, R30, 2 */
		/* 821FB8FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821FB8FCh case    7:*/		return 0x821FB900;
		  /* 821FB900h */ case    8:  		/* cmplwi CR6, R30, 8 */
		/* 821FB900h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000008);
		/* 821FB900h case    8:*/		return 0x821FB904;
		  /* 821FB904h */ case    9:  		/* stw R11, <#[R3]> */
		/* 821FB904h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FB904h case    9:*/		return 0x821FB908;
		  /* 821FB908h */ case   10:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FB908h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FB908h case   10:*/		return 0x821FB90C;
		  /* 821FB90Ch */ case   11:  		/* stw R11, <#[R3 + 4]> */
		/* 821FB90Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FB90Ch case   11:*/		return 0x821FB910;
		  /* 821FB910h */ case   12:  		/* bc 12, CR6_LT, -96 */
		/* 821FB910h case   12:*/		if ( regs.CR[6].lt ) { return 0x821FB8B0;  }
		/* 821FB910h case   12:*/		return 0x821FB914;
		  /* 821FB914h */ case   13:  		/* cmplwi CR6, R24, 0 */
		/* 821FB914h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821FB914h case   13:*/		return 0x821FB918;
		  /* 821FB918h */ case   14:  		/* bc 12, CR6_EQ, 2568 */
		/* 821FB918h case   14:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FB918h case   14:*/		return 0x821FB91C;
		  /* 821FB91Ch */ case   15:  		/* mr R5, R24 */
		/* 821FB91Ch case   15:*/		regs.R5 = regs.R24;
		/* 821FB91Ch case   15:*/		return 0x821FB920;
		  /* 821FB920h */ case   16:  		/* mr R4, R20 */
		/* 821FB920h case   16:*/		regs.R4 = regs.R20;
		/* 821FB920h case   16:*/		return 0x821FB924;
		  /* 821FB924h */ case   17:  		/* addi R3, R1, 2768 */
		/* 821FB924h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAD0);
		/* 821FB924h case   17:*/		return 0x821FB928;
		  /* 821FB928h */ case   18:  		/* b 8292 */
		/* 821FB928h case   18:*/		return 0x821FD98C;
		/* 821FB928h case   18:*/		return 0x821FB92C;
	}
	return 0x821FB92C;
} // Block from 821FB8E0h-821FB92Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821FB92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB92C);
		  /* 821FB92Ch */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FB92Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FB92Ch case    0:*/		return 0x821FB930;
		  /* 821FB930h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821FB930h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FB938;  }
		/* 821FB930h case    1:*/		return 0x821FB934;
		  /* 821FB934h */ case    2:  		/* b 34212 */
		/* 821FB934h case    2:*/		return 0x82203ED8;
		/* 821FB934h case    2:*/		return 0x821FB938;
	}
	return 0x821FB938;
} // Block from 821FB92Ch-821FB938h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FB938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB938);
		  /* 821FB938h */ case    0:  		/* li R5, 0 */
		/* 821FB938h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FB938h case    0:*/		return 0x821FB93C;
		  /* 821FB93Ch */ case    1:  		/* mr R4, R14 */
		/* 821FB93Ch case    1:*/		regs.R4 = regs.R14;
		/* 821FB93Ch case    1:*/		return 0x821FB940;
		  /* 821FB940h */ case    2:  		/* mr R3, R26 */
		/* 821FB940h case    2:*/		regs.R3 = regs.R26;
		/* 821FB940h case    2:*/		return 0x821FB944;
		  /* 821FB944h */ case    3:  		/* bl -17364 */
		/* 821FB944h case    3:*/		regs.LR = 0x821FB948; return 0x821F7570;
		/* 821FB944h case    3:*/		return 0x821FB948;
		  /* 821FB948h */ case    4:  		/* li R29, 3 */
		/* 821FB948h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x3);
		/* 821FB948h case    4:*/		return 0x821FB94C;
		  /* 821FB94Ch */ case    5:  		/* addi R30, R14, 116 */
		/* 821FB94Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R14,0x74);
		/* 821FB94Ch case    5:*/		return 0x821FB950;
		  /* 821FB950h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 821FB950h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FB950h case    6:*/		return 0x821FB954;
		  /* 821FB954h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821FB954h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB954h case    7:*/		return 0x821FB958;
		  /* 821FB958h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 821FB958h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FB968;  }
		/* 821FB958h case    8:*/		return 0x821FB95C;
		  /* 821FB95Ch */ case    9:  		/* mr R3, R26 */
		/* 821FB95Ch case    9:*/		regs.R3 = regs.R26;
		/* 821FB95Ch case    9:*/		return 0x821FB960;
		  /* 821FB960h */ case   10:  		/* rlwinm R4, R11, 0, 0, 31 */
		/* 821FB960h case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R11);
		/* 821FB960h case   10:*/		return 0x821FB964;
		  /* 821FB964h */ case   11:  		/* bl -17652 */
		/* 821FB964h case   11:*/		regs.LR = 0x821FB968; return 0x821F7470;
		/* 821FB964h case   11:*/		return 0x821FB968;
	}
	return 0x821FB968;
} // Block from 821FB938h-821FB968h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FB968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB968);
		  /* 821FB968h */ case    0:  		/* addic. R29, R29, -1 */
		/* 821FB968h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821FB968h case    0:*/		return 0x821FB96C;
		  /* 821FB96Ch */ case    1:  		/* addi R30, R30, -4 */
		/* 821FB96Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFC);
		/* 821FB96Ch case    1:*/		return 0x821FB970;
		  /* 821FB970h */ case    2:  		/* bc 4, CR0_LT, -32 */
		/* 821FB970h case    2:*/		if ( !regs.CR[0].lt ) { return 0x821FB950;  }
		/* 821FB970h case    2:*/		return 0x821FB974;
		  /* 821FB974h */ case    3:  		/* mr R29, R21 */
		/* 821FB974h case    3:*/		regs.R29 = regs.R21;
		/* 821FB974h case    3:*/		return 0x821FB978;
		  /* 821FB978h */ case    4:  		/* addi R30, R14, 96 */
		/* 821FB978h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R14,0x60);
		/* 821FB978h case    4:*/		return 0x821FB97C;
		  /* 821FB97Ch */ case    5:  		/* lwz R11, <#[R30]> */
		/* 821FB97Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FB97Ch case    5:*/		return 0x821FB980;
		  /* 821FB980h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821FB980h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB980h case    6:*/		return 0x821FB984;
		  /* 821FB984h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821FB984h case    7:*/		if ( regs.CR[6].eq ) { return 0x821FB994;  }
		/* 821FB984h case    7:*/		return 0x821FB988;
		  /* 821FB988h */ case    8:  		/* mr R3, R26 */
		/* 821FB988h case    8:*/		regs.R3 = regs.R26;
		/* 821FB988h case    8:*/		return 0x821FB98C;
		  /* 821FB98Ch */ case    9:  		/* rlwinm R4, R11, 0, 0, 31 */
		/* 821FB98Ch case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R4,regs.R11);
		/* 821FB98Ch case    9:*/		return 0x821FB990;
		  /* 821FB990h */ case   10:  		/* bl -17568 */
		/* 821FB990h case   10:*/		regs.LR = 0x821FB994; return 0x821F74F0;
		/* 821FB990h case   10:*/		return 0x821FB994;
	}
	return 0x821FB994;
} // Block from 821FB968h-821FB994h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FB994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB994);
		  /* 821FB994h */ case    0:  		/* addic. R29, R29, -1 */
		/* 821FB994h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821FB994h case    0:*/		return 0x821FB998;
		  /* 821FB998h */ case    1:  		/* addi R30, R30, -4 */
		/* 821FB998h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFC);
		/* 821FB998h case    1:*/		return 0x821FB99C;
		  /* 821FB99Ch */ case    2:  		/* bc 4, CR0_LT, -32 */
		/* 821FB99Ch case    2:*/		if ( !regs.CR[0].lt ) { return 0x821FB97C;  }
		/* 821FB99Ch case    2:*/		return 0x821FB9A0;
		  /* 821FB9A0h */ case    3:  		/* b 2432 */
		/* 821FB9A0h case    3:*/		return 0x821FC320;
		/* 821FB9A0h case    3:*/		return 0x821FB9A4;
	}
	return 0x821FB9A4;
} // Block from 821FB994h-821FB9A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FB9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB9A4);
		  /* 821FB9A4h */ case    0:  		/* lwz R11, <#[R14 + 16]> */
		/* 821FB9A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000010) );
		/* 821FB9A4h case    0:*/		return 0x821FB9A8;
		  /* 821FB9A8h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 821FB9A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821FB9A8h case    1:*/		return 0x821FB9AC;
		  /* 821FB9ACh */ case    2:  		/* bc 12, CR6_LT, 228 */
		/* 821FB9ACh case    2:*/		if ( regs.CR[6].lt ) { return 0x821FBA90;  }
		/* 821FB9ACh case    2:*/		return 0x821FB9B0;
		  /* 821FB9B0h */ case    3:  		/* bc 12, CR6_EQ, 196 */
		/* 821FB9B0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FBA74;  }
		/* 821FB9B0h case    3:*/		return 0x821FB9B4;
		  /* 821FB9B4h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 821FB9B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821FB9B4h case    4:*/		return 0x821FB9B8;
		  /* 821FB9B8h */ case    5:  		/* bc 12, CR6_LT, 216 */
		/* 821FB9B8h case    5:*/		if ( regs.CR[6].lt ) { return 0x821FBA90;  }
		/* 821FB9B8h case    5:*/		return 0x821FB9BC;
		  /* 821FB9BCh */ case    6:  		/* bc 12, CR6_EQ, 128 */
		/* 821FB9BCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821FBA3C;  }
		/* 821FB9BCh case    6:*/		return 0x821FB9C0;
		  /* 821FB9C0h */ case    7:  		/* cmplwi CR6, R11, 6 */
		/* 821FB9C0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821FB9C0h case    7:*/		return 0x821FB9C4;
		  /* 821FB9C4h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 821FB9C4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FB9CC;  }
		/* 821FB9C4h case    8:*/		return 0x821FB9C8;
		  /* 821FB9C8h */ case    9:  		/* b 34076 */
		/* 821FB9C8h case    9:*/		return 0x82203EE4;
		/* 821FB9C8h case    9:*/		return 0x821FB9CC;
	}
	return 0x821FB9CC;
} // Block from 821FB9A4h-821FB9CCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821FB9CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB9CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB9CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB9CC);
		  /* 821FB9CCh */ case    0:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FB9CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FB9CCh case    0:*/		return 0x821FB9D0;
		  /* 821FB9D0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FB9D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FB9D0h case    1:*/		return 0x821FB9D4;
		  /* 821FB9D4h */ case    2:  		/* bc 12, CR6_EQ, 2380 */
		/* 821FB9D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FB9D4h case    2:*/		return 0x821FB9D8;
		  /* 821FB9D8h */ case    3:  		/* lwz R5, <#[R14 + 24]> */
		/* 821FB9D8h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x00000018) );
		/* 821FB9D8h case    3:*/		return 0x821FB9DC;
		  /* 821FB9DCh */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 821FB9DCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821FB9DCh case    4:*/		return 0x821FB9E0;
		  /* 821FB9E0h */ case    5:  		/* cmplw CR6, R5, R11 */
		/* 821FB9E0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821FB9E0h case    5:*/		return 0x821FB9E4;
		  /* 821FB9E4h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821FB9E4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821FB9EC;  }
		/* 821FB9E4h case    6:*/		return 0x821FB9E8;
		  /* 821FB9E8h */ case    7:  		/* b 34056 */
		/* 821FB9E8h case    7:*/		return 0x82203EF0;
		/* 821FB9E8h case    7:*/		return 0x821FB9EC;
	}
	return 0x821FB9EC;
} // Block from 821FB9CCh-821FB9ECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FB9ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FB9EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FB9EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FB9EC);
		  /* 821FB9ECh */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FB9ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FB9ECh case    0:*/		return 0x821FB9F0;
		  /* 821FB9F0h */ case    1:  		/* mulli R10, R5, 40 */
		/* 821FB9F0h case    1:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R5,0x28);
		/* 821FB9F0h case    1:*/		return 0x821FB9F4;
		  /* 821FB9F4h */ case    2:  		/* add R11, R10, R11 */
		/* 821FB9F4h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FB9F4h case    2:*/		return 0x821FB9F8;
		  /* 821FB9F8h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FB9F8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FB9F8h case    3:*/		return 0x821FB9FC;
		  /* 821FB9FCh */ case    4:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821FB9FCh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821FB9FCh case    4:*/		return 0x821FBA00;
		  /* 821FBA00h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 821FBA00h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821FBA08;  }
		/* 821FBA00h case    5:*/		return 0x821FBA04;
		  /* 821FBA04h */ case    6:  		/* b 34040 */
		/* 821FBA04h case    6:*/		return 0x82203EFC;
		/* 821FBA04h case    6:*/		return 0x821FBA08;
	}
	return 0x821FBA08;
} // Block from 821FB9ECh-821FBA08h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA08);
		  /* 821FBA08h */ case    0:  		/* lwz R10, <#[R31 + 564]> */
		/* 821FBA08h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000234) );
		/* 821FBA08h case    0:*/		return 0x821FBA0C;
		  /* 821FBA0Ch */ case    1:  		/* lwz R9, <#[R10 + 80]> */
		/* 821FBA0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000050) );
		/* 821FBA0Ch case    1:*/		return 0x821FBA10;
		  /* 821FBA10h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821FBA10h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FBA10h case    2:*/		return 0x821FBA14;
		  /* 821FBA14h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821FBA14h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FBA28;  }
		/* 821FBA14h case    3:*/		return 0x821FBA18;
		  /* 821FBA18h */ case    4:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 821FBA18h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 821FBA18h case    4:*/		return 0x821FBA1C;
		  /* 821FBA1Ch */ case    5:  		/* rlwinm R9, R5, 2, 0, 29 */
		/* 821FBA1Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R5);
		/* 821FBA1Ch case    5:*/		return 0x821FBA20;
		  /* 821FBA20h */ case    6:  		/* lwzx R6, <#[R9 + R10]> */
		/* 821FBA20h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821FBA20h case    6:*/		return 0x821FBA24;
		  /* 821FBA24h */ case    7:  		/* b 8 */
		/* 821FBA24h case    7:*/		return 0x821FBA2C;
		/* 821FBA24h case    7:*/		return 0x821FBA28;
	}
	return 0x821FBA28;
} // Block from 821FBA08h-821FBA28h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA28);
		  /* 821FBA28h */ case    0:  		/* mr R6, R19 */
		/* 821FBA28h case    0:*/		regs.R6 = regs.R19;
		/* 821FBA28h case    0:*/		return 0x821FBA2C;
	}
	return 0x821FBA2C;
} // Block from 821FBA28h-821FBA2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA2C);
		  /* 821FBA2Ch */ case    0:  		/* lwz R11, <#[R11]> */
		/* 821FBA2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821FBA2Ch case    0:*/		return 0x821FBA30;
		  /* 821FBA30h */ case    1:  		/* mr R9, R22 */
		/* 821FBA30h case    1:*/		regs.R9 = regs.R22;
		/* 821FBA30h case    1:*/		return 0x821FBA34;
		  /* 821FBA34h */ case    2:  		/* rlwinm R8, R11, 29, 18, 31 */
		/* 821FBA34h case    2:*/		cpu::op::rlwinm<0,29,18,31>(regs,&regs.R8,regs.R11);
		/* 821FBA34h case    2:*/		return 0x821FBA38;
		  /* 821FBA38h */ case    3:  		/* b 32928 */
		/* 821FBA38h case    3:*/		return 0x82203AD8;
		/* 821FBA38h case    3:*/		return 0x821FBA3C;
	}
	return 0x821FBA3C;
} // Block from 821FBA2Ch-821FBA3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA3C);
		  /* 821FBA3Ch */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FBA3Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FBA3Ch case    0:*/		return 0x821FBA40;
		  /* 821FBA40h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821FBA40h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FBA48;  }
		/* 821FBA40h case    1:*/		return 0x821FBA44;
		  /* 821FBA44h */ case    2:  		/* b 34004 */
		/* 821FBA44h case    2:*/		return 0x82203F18;
		/* 821FBA44h case    2:*/		return 0x821FBA48;
	}
	return 0x821FBA48;
} // Block from 821FBA3Ch-821FBA48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA48);
		  /* 821FBA48h */ case    0:  		/* lfd FR0, <#[R14 + 24]> */
		/* 821FBA48h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R14 + 0x00000018) );
		/* 821FBA48h case    0:*/		return 0x821FBA4C;
		  /* 821FBA4Ch */ case    1:  		/* frsp FR1, FR0 */
		/* 821FBA4Ch case    1:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 821FBA4Ch case    1:*/		return 0x821FBA50;
		  /* 821FBA50h */ case    2:  		/* bl -65304 */
		/* 821FBA50h case    2:*/		regs.LR = 0x821FBA54; return 0x821EBB38;
		/* 821FBA50h case    2:*/		return 0x821FBA54;
		  /* 821FBA54h */ case    3:  		/* li R5, 1 */
		/* 821FBA54h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FBA54h case    3:*/		return 0x821FBA58;
		  /* 821FBA58h */ case    4:  		/* fmr FR2, FR31 */
		/* 821FBA58h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FBA58h case    4:*/		return 0x821FBA5C;
		  /* 821FBA5Ch */ case    5:  		/* mr R4, R31 */
		/* 821FBA5Ch case    5:*/		regs.R4 = regs.R31;
		/* 821FBA5Ch case    5:*/		return 0x821FBA60;
		  /* 821FBA60h */ case    6:  		/* fmr FR3, FR31 */
		/* 821FBA60h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FBA60h case    6:*/		return 0x821FBA64;
		  /* 821FBA64h */ case    7:  		/* addi R3, R1, 3056 */
		/* 821FBA64h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBF0);
		/* 821FBA64h case    7:*/		return 0x821FBA68;
		  /* 821FBA68h */ case    8:  		/* fmr FR4, FR31 */
		/* 821FBA68h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FBA68h case    8:*/		return 0x821FBA6C;
		  /* 821FBA6Ch */ case    9:  		/* bl 177124 */
		/* 821FBA6Ch case    9:*/		regs.LR = 0x821FBA70; return 0x82226E50;
		/* 821FBA6Ch case    9:*/		return 0x821FBA70;
		  /* 821FBA70h */ case   10:  		/* b 88 */
		/* 821FBA70h case   10:*/		return 0x821FBAC8;
		/* 821FBA70h case   10:*/		return 0x821FBA74;
	}
	return 0x821FBA74;
} // Block from 821FBA48h-821FBA74h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA74);
		  /* 821FBA74h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FBA74h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FBA74h case    0:*/		return 0x821FBA78;
		  /* 821FBA78h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821FBA78h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FBA80;  }
		/* 821FBA78h case    1:*/		return 0x821FBA7C;
		  /* 821FBA7Ch */ case    2:  		/* b 33960 */
		/* 821FBA7Ch case    2:*/		return 0x82203F24;
		/* 821FBA7Ch case    2:*/		return 0x821FBA80;
	}
	return 0x821FBA80;
} // Block from 821FBA74h-821FBA80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA80);
		  /* 821FBA80h */ case    0:  		/* lwz R5, <#[R14 + 24]> */
		/* 821FBA80h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x00000018) );
		/* 821FBA80h case    0:*/		return 0x821FBA84;
		  /* 821FBA84h */ case    1:  		/* li R6, 1 */
		/* 821FBA84h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821FBA84h case    1:*/		return 0x821FBA88;
		  /* 821FBA88h */ case    2:  		/* addi R3, R1, 3072 */
		/* 821FBA88h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC00);
		/* 821FBA88h case    2:*/		return 0x821FBA8C;
		  /* 821FBA8Ch */ case    3:  		/* b 52 */
		/* 821FBA8Ch case    3:*/		return 0x821FBAC0;
		/* 821FBA8Ch case    3:*/		return 0x821FBA90;
	}
	return 0x821FBA90;
} // Block from 821FBA80h-821FBA90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA90);
		  /* 821FBA90h */ case    0:  		/* rlwinm. R10, R22, 0, 24, 31 */
		/* 821FBA90h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R22);
		/* 821FBA90h case    0:*/		return 0x821FBA94;
		  /* 821FBA94h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821FBA94h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FBA9C;  }
		/* 821FBA94h case    1:*/		return 0x821FBA98;
		  /* 821FBA98h */ case    2:  		/* b 33944 */
		/* 821FBA98h case    2:*/		return 0x82203F30;
		/* 821FBA98h case    2:*/		return 0x821FBA9C;
	}
	return 0x821FBA9C;
} // Block from 821FBA90h-821FBA9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FBA9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBA9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBA9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBA9C);
		  /* 821FBA9Ch */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 821FBA9Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FBA9Ch case    0:*/		return 0x821FBAA0;
		  /* 821FBAA0h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821FBAA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FBAB4;  }
		/* 821FBAA0h case    1:*/		return 0x821FBAA4;
		  /* 821FBAA4h */ case    2:  		/* lwz R11, <#[R14 + 24]> */
		/* 821FBAA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000018) );
		/* 821FBAA4h case    2:*/		return 0x821FBAA8;
		  /* 821FBAA8h */ case    3:  		/* addic R10, R11, -1 */
		/* 821FBAA8h case    3:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821FBAA8h case    3:*/		return 0x821FBAAC;
		  /* 821FBAACh */ case    4:  		/* subfe R5, R10, R11 */
		/* 821FBAACh case    4:*/		cpu::op::subfe<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 821FBAACh case    4:*/		return 0x821FBAB0;
		  /* 821FBAB0h */ case    5:  		/* b 8 */
		/* 821FBAB0h case    5:*/		return 0x821FBAB8;
		/* 821FBAB0h case    5:*/		return 0x821FBAB4;
	}
	return 0x821FBAB4;
} // Block from 821FBA9Ch-821FBAB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FBAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBAB4);
		  /* 821FBAB4h */ case    0:  		/* lwz R5, <#[R14 + 24]> */
		/* 821FBAB4h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x00000018) );
		/* 821FBAB4h case    0:*/		return 0x821FBAB8;
	}
	return 0x821FBAB8;
} // Block from 821FBAB4h-821FBAB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FBAB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBAB8);
		  /* 821FBAB8h */ case    0:  		/* li R6, 0 */
		/* 821FBAB8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FBAB8h case    0:*/		return 0x821FBABC;
		  /* 821FBABCh */ case    1:  		/* addi R3, R1, 3088 */
		/* 821FBABCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC10);
		/* 821FBABCh case    1:*/		return 0x821FBAC0;
	}
	return 0x821FBAC0;
} // Block from 821FBAB8h-821FBAC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FBAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBAC0);
		  /* 821FBAC0h */ case    0:  		/* mr R4, R31 */
		/* 821FBAC0h case    0:*/		regs.R4 = regs.R31;
		/* 821FBAC0h case    0:*/		return 0x821FBAC4;
		  /* 821FBAC4h */ case    1:  		/* bl 192580 */
		/* 821FBAC4h case    1:*/		regs.LR = 0x821FBAC8; return 0x8222AB08;
		/* 821FBAC4h case    1:*/		return 0x821FBAC8;
	}
	return 0x821FBAC8;
} // Block from 821FBAC0h-821FBAC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FBAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBAC8);
		  /* 821FBAC8h */ case    0:  		/* mr R11, R3 */
		/* 821FBAC8h case    0:*/		regs.R11 = regs.R3;
		/* 821FBAC8h case    0:*/		return 0x821FBACC;
		  /* 821FBACCh */ case    1:  		/* mr R3, R20 */
		/* 821FBACCh case    1:*/		regs.R3 = regs.R20;
		/* 821FBACCh case    1:*/		return 0x821FBAD0;
		  /* 821FBAD0h */ case    2:  		/* ld R4, <#[R11]> */
		/* 821FBAD0h case    2:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821FBAD0h case    2:*/		return 0x821FBAD4;
		  /* 821FBAD4h */ case    3:  		/* b 26056 */
		/* 821FBAD4h case    3:*/		return 0x8220209C;
		/* 821FBAD4h case    3:*/		return 0x821FBAD8;
	}
	return 0x821FBAD8;
} // Block from 821FBAC8h-821FBAD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBAD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBAD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBAD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBAD8);
		  /* 821FBAD8h */ case    0:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FBAD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FBAD8h case    0:*/		return 0x821FBADC;
		  /* 821FBADCh */ case    1:  		/* mr R30, R14 */
		/* 821FBADCh case    1:*/		regs.R30 = regs.R14;
		/* 821FBADCh case    1:*/		return 0x821FBAE0;
		  /* 821FBAE0h */ case    2:  		/* cmplwi CR6, R11, 34 */
		/* 821FBAE0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000022);
		/* 821FBAE0h case    2:*/		return 0x821FBAE4;
		  /* 821FBAE4h */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 821FBAE4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821FBAEC;  }
		/* 821FBAE4h case    3:*/		return 0x821FBAE8;
		  /* 821FBAE8h */ case    4:  		/* b 34100 */
		/* 821FBAE8h case    4:*/		return 0x8220401C;
		/* 821FBAE8h case    4:*/		return 0x821FBAEC;
	}
	return 0x821FBAEC;
} // Block from 821FBAD8h-821FBAECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FBAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBAEC);
		  /* 821FBAECh */ case    0:  		/* lis R12, -32252 */
		/* 821FBAECh case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821FBAECh case    0:*/		return 0x821FBAF0;
		  /* 821FBAF0h */ case    1:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 821FBAF0h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 821FBAF0h case    1:*/		return 0x821FBAF4;
		  /* 821FBAF4h */ case    2:  		/* addi R12, R12, -14000 */
		/* 821FBAF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFC950);
		/* 821FBAF4h case    2:*/		return 0x821FBAF8;
		  /* 821FBAF8h */ case    3:  		/* lhzx R0, <#[R12 + R0]> */
		/* 821FBAF8h case    3:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 821FBAF8h case    3:*/		return 0x821FBAFC;
		  /* 821FBAFCh */ case    4:  		/* lis R12, -32224 */
		/* 821FBAFCh case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8220);
		/* 821FBAFCh case    4:*/		return 0x821FBB00;
		  /* 821FBB00h */ case    5:  		/* addi R12, R12, -17644 */
		/* 821FBB00h case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFBB14);
		/* 821FBB00h case    5:*/		return 0x821FBB04;
		  /* 821FBB04h */ case    6:  		/* ori R0, R0, 0 */
		/* 821FBB04h case    6:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821FBB04h case    6:*/		return 0x821FBB08;
		  /* 821FBB08h */ case    7:  		/* add R12, R12, R0 */
		/* 821FBB08h case    7:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821FBB08h case    7:*/		return 0x821FBB0C;
		  /* 821FBB0Ch */ case    8:  		/* mtspr CTR, R12 */
		/* 821FBB0Ch case    8:*/		regs.CTR = regs.R12;
		/* 821FBB0Ch case    8:*/		return 0x821FBB10;
		  /* 821FBB10h */ case    9:  		/* bcctr 20, CR0_LT */
		/* 821FBB10h case    9:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821FBB10h case    9:*/		return 0x821FBB14;
		  /* 821FBB14h */ case   10:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FBB14h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FBB14h case   10:*/		return 0x821FBB18;
		  /* 821FBB18h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821FBB18h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBB18h case   11:*/		return 0x821FBB1C;
		  /* 821FBB1Ch */ case   12:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBB1Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821FBB24;  }
		/* 821FBB1Ch case   12:*/		return 0x821FBB20;
		  /* 821FBB20h */ case   13:  		/* b 33820 */
		/* 821FBB20h case   13:*/		return 0x82203F3C;
		/* 821FBB20h case   13:*/		return 0x821FBB24;
	}
	return 0x821FBB24;
} // Block from 821FBAECh-821FBB24h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821FBB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBB24);
		  /* 821FBB24h */ case    0:  		/* lwz R14, <#[R14 + 32]> */
		/* 821FBB24h case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000020) );
		/* 821FBB24h case    0:*/		return 0x821FBB28;
		  /* 821FBB28h */ case    1:  		/* mr R5, R22 */
		/* 821FBB28h case    1:*/		regs.R5 = regs.R22;
		/* 821FBB28h case    1:*/		return 0x821FBB2C;
		  /* 821FBB2Ch */ case    2:  		/* mr R4, R30 */
		/* 821FBB2Ch case    2:*/		regs.R4 = regs.R30;
		/* 821FBB2Ch case    2:*/		return 0x821FBB30;
		  /* 821FBB30h */ case    3:  		/* b 1456 */
		/* 821FBB30h case    3:*/		return 0x821FC0E0;
		/* 821FBB30h case    3:*/		return 0x821FBB34;
		  /* 821FBB34h */ case    4:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FBB34h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FBB34h case    4:*/		return 0x821FBB38;
		  /* 821FBB38h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821FBB38h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FBB40;  }
		/* 821FBB38h case    5:*/		return 0x821FBB3C;
		  /* 821FBB3Ch */ case    6:  		/* b 33804 */
		/* 821FBB3Ch case    6:*/		return 0x82203F48;
		/* 821FBB3Ch case    6:*/		return 0x821FBB40;
	}
	return 0x821FBB40;
} // Block from 821FBB24h-821FBB40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBB40h
// Function '?ImportVariableDeclaration@Compiler@D3DXShader@@AAAXPAVCNodeDecl@2@PAVResultStack@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBB40);
		  /* 821FBB40h */ case    0:  		/* lwz R11, <#[R14 + 40]> */
		/* 821FBB40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821FBB40h case    0:*/		return 0x821FBB44;
		  /* 821FBB44h */ case    1:  		/* mr R3, R26 */
		/* 821FBB44h case    1:*/		regs.R3 = regs.R26;
		/* 821FBB44h case    1:*/		return 0x821FBB48;
		  /* 821FBB48h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 821FBB48h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FBB48h case    2:*/		return 0x821FBB4C;
		  /* 821FBB4Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821FBB4Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821FBB58;  }
		/* 821FBB4Ch case    3:*/		return 0x821FBB50;
		  /* 821FBB50h */ case    4:  		/* li R5, 0 */
		/* 821FBB50h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FBB50h case    4:*/		return 0x821FBB54;
		  /* 821FBB54h */ case    5:  		/* b 56 */
		/* 821FBB54h case    5:*/		return 0x821FBB8C;
		/* 821FBB54h case    5:*/		return 0x821FBB58;
	}
	return 0x821FBB58;
} // Block from 821FBB40h-821FBB58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FBB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBB58);
		  /* 821FBB58h */ case    0:  		/* lwz R14, <#[R14 + 36]> */
		/* 821FBB58h case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000024) );
		/* 821FBB58h case    0:*/		return 0x821FBB5C;
		  /* 821FBB5Ch */ case    1:  		/* lwz R4, <#[R30 + 32]> */
		/* 821FBB5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 821FBB5Ch case    1:*/		return 0x821FBB60;
		  /* 821FBB60h */ case    2:  		/* bl -18160 */
		/* 821FBB60h case    2:*/		regs.LR = 0x821FBB64; return 0x821F7470;
		/* 821FBB60h case    2:*/		return 0x821FBB64;
		  /* 821FBB64h */ case    3:  		/* mr R4, R30 */
		/* 821FBB64h case    3:*/		regs.R4 = regs.R30;
		/* 821FBB64h case    3:*/		return 0x821FBB68;
		  /* 821FBB68h */ case    4:  		/* b 1396 */
		/* 821FBB68h case    4:*/		return 0x821FC0DC;
		/* 821FBB68h case    4:*/		return 0x821FBB6C;
		  /* 821FBB6Ch */ case    5:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FBB6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FBB6Ch case    5:*/		return 0x821FBB70;
		  /* 821FBB70h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821FBB70h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBB70h case    6:*/		return 0x821FBB74;
		  /* 821FBB74h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBB74h case    7:*/		if ( regs.CR[6].eq ) { return 0x821FBB7C;  }
		/* 821FBB74h case    7:*/		return 0x821FBB78;
		  /* 821FBB78h */ case    8:  		/* b 33756 */
		/* 821FBB78h case    8:*/		return 0x82203F54;
		/* 821FBB78h case    8:*/		return 0x821FBB7C;
	}
	return 0x821FBB7C;
} // Block from 821FBB58h-821FBB7Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FBB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBB7C);
		  /* 821FBB7Ch */ case    0:  		/* lwz R14, <#[R14 + 32]> */
		/* 821FBB7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000020) );
		/* 821FBB7Ch case    0:*/		return 0x821FBB80;
		  /* 821FBB80h */ case    1:  		/* b 1944 */
		/* 821FBB80h case    1:*/		return 0x821FC318;
		/* 821FBB80h case    1:*/		return 0x821FBB84;
		  /* 821FBB84h */ case    2:  		/* mr R5, R22 */
		/* 821FBB84h case    2:*/		regs.R5 = regs.R22;
		/* 821FBB84h case    2:*/		return 0x821FBB88;
		  /* 821FBB88h */ case    3:  		/* mr R3, R26 */
		/* 821FBB88h case    3:*/		regs.R3 = regs.R26;
		/* 821FBB88h case    3:*/		return 0x821FBB8C;
	}
	return 0x821FBB8C;
} // Block from 821FBB7Ch-821FBB8Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBB8C);
		  /* 821FBB8Ch */ case    0:  		/* mr R4, R30 */
		/* 821FBB8Ch case    0:*/		regs.R4 = regs.R30;
		/* 821FBB8Ch case    0:*/		return 0x821FBB90;
		  /* 821FBB90h */ case    1:  		/* lwz R14, <#[R14 + 32]> */
		/* 821FBB90h case    1:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000020) );
		/* 821FBB90h case    1:*/		return 0x821FBB94;
		  /* 821FBB94h */ case    2:  		/* bl -17956 */
		/* 821FBB94h case    2:*/		regs.LR = 0x821FBB98; return 0x821F7570;
		/* 821FBB94h case    2:*/		return 0x821FBB98;
		  /* 821FBB98h */ case    3:  		/* lwz R4, <#[R30 + 36]> */
		/* 821FBB98h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000024) );
		/* 821FBB98h case    3:*/		return 0x821FBB9C;
		  /* 821FBB9Ch */ case    4:  		/* mr R3, R26 */
		/* 821FBB9Ch case    4:*/		regs.R3 = regs.R26;
		/* 821FBB9Ch case    4:*/		return 0x821FBBA0;
		  /* 821FBBA0h */ case    5:  		/* bl -18224 */
		/* 821FBBA0h case    5:*/		regs.LR = 0x821FBBA4; return 0x821F7470;
		/* 821FBBA0h case    5:*/		return 0x821FBBA4;
		  /* 821FBBA4h */ case    6:  		/* b 1908 */
		/* 821FBBA4h case    6:*/		return 0x821FC318;
		/* 821FBBA4h case    6:*/		return 0x821FBBA8;
		  /* 821FBBA8h */ case    7:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FBBA8h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FBBA8h case    7:*/		return 0x821FBBAC;
		  /* 821FBBACh */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 821FBBACh case    8:*/		if ( regs.CR[0].eq ) { return 0x821FBBB4;  }
		/* 821FBBACh case    8:*/		return 0x821FBBB0;
		  /* 821FBBB0h */ case    9:  		/* b 33712 */
		/* 821FBBB0h case    9:*/		return 0x82203F60;
		/* 821FBBB0h case    9:*/		return 0x821FBBB4;
	}
	return 0x821FBBB4;
} // Block from 821FBB8Ch-821FBBB4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821FBBB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBBB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBBB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBBB4);
		  /* 821FBBB4h */ case    0:  		/* lwz R11, <#[R14 + 40]> */
		/* 821FBBB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821FBBB4h case    0:*/		return 0x821FBBB8;
		  /* 821FBBB8h */ case    1:  		/* li R5, 0 */
		/* 821FBBB8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FBBB8h case    1:*/		return 0x821FBBBC;
		  /* 821FBBBCh */ case    2:  		/* mr R4, R30 */
		/* 821FBBBCh case    2:*/		regs.R4 = regs.R30;
		/* 821FBBBCh case    2:*/		return 0x821FBBC0;
		  /* 821FBBC0h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 821FBBC0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FBBC0h case    3:*/		return 0x821FBBC4;
		  /* 821FBBC4h */ case    4:  		/* mr R3, R26 */
		/* 821FBBC4h case    4:*/		regs.R3 = regs.R26;
		/* 821FBBC4h case    4:*/		return 0x821FBBC8;
		  /* 821FBBC8h */ case    5:  		/* bc 4, CR6_EQ, -56 */
		/* 821FBBC8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FBB90;  }
		/* 821FBBC8h case    5:*/		return 0x821FBBCC;
		  /* 821FBBCCh */ case    6:  		/* lwz R14, <#[R14 + 36]> */
		/* 821FBBCCh case    6:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000024) );
		/* 821FBBCCh case    6:*/		return 0x821FBBD0;
		  /* 821FBBD0h */ case    7:  		/* bl -18016 */
		/* 821FBBD0h case    7:*/		regs.LR = 0x821FBBD4; return 0x821F7570;
		/* 821FBBD0h case    7:*/		return 0x821FBBD4;
		  /* 821FBBD4h */ case    8:  		/* lwz R4, <#[R30 + 32]> */
		/* 821FBBD4h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000020) );
		/* 821FBBD4h case    8:*/		return 0x821FBBD8;
		  /* 821FBBD8h */ case    9:  		/* b -60 */
		/* 821FBBD8h case    9:*/		return 0x821FBB9C;
		/* 821FBBD8h case    9:*/		return 0x821FBBDC;
		  /* 821FBBDCh */ case   10:  		/* mr R5, R22 */
		/* 821FBBDCh case   10:*/		regs.R5 = regs.R22;
		/* 821FBBDCh case   10:*/		return 0x821FBBE0;
		  /* 821FBBE0h */ case   11:  		/* lwz R14, <#[R14 + 32]> */
		/* 821FBBE0h case   11:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000020) );
		/* 821FBBE0h case   11:*/		return 0x821FBBE4;
		  /* 821FBBE4h */ case   12:  		/* mr R4, R30 */
		/* 821FBBE4h case   12:*/		regs.R4 = regs.R30;
		/* 821FBBE4h case   12:*/		return 0x821FBBE8;
		  /* 821FBBE8h */ case   13:  		/* mr R3, R26 */
		/* 821FBBE8h case   13:*/		regs.R3 = regs.R26;
		/* 821FBBE8h case   13:*/		return 0x821FBBEC;
		  /* 821FBBECh */ case   14:  		/* bl -18044 */
		/* 821FBBECh case   14:*/		regs.LR = 0x821FBBF0; return 0x821F7570;
		/* 821FBBECh case   14:*/		return 0x821FBBF0;
		  /* 821FBBF0h */ case   15:  		/* mr R22, R21 */
		/* 821FBBF0h case   15:*/		regs.R22 = regs.R21;
		/* 821FBBF0h case   15:*/		return 0x821FBBF4;
		  /* 821FBBF4h */ case   16:  		/* b 1828 */
		/* 821FBBF4h case   16:*/		return 0x821FC318;
		/* 821FBBF4h case   16:*/		return 0x821FBBF8;
		  /* 821FBBF8h */ case   17:  		/* mr R5, R22 */
		/* 821FBBF8h case   17:*/		regs.R5 = regs.R22;
		/* 821FBBF8h case   17:*/		return 0x821FBBFC;
		  /* 821FBBFCh */ case   18:  		/* lwz R14, <#[R14 + 32]> */
		/* 821FBBFCh case   18:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000020) );
		/* 821FBBFCh case   18:*/		return 0x821FBC00;
		  /* 821FBC00h */ case   19:  		/* mr R4, R30 */
		/* 821FBC00h case   19:*/		regs.R4 = regs.R30;
		/* 821FBC00h case   19:*/		return 0x821FBC04;
		  /* 821FBC04h */ case   20:  		/* mr R3, R26 */
		/* 821FBC04h case   20:*/		regs.R3 = regs.R26;
		/* 821FBC04h case   20:*/		return 0x821FBC08;
		  /* 821FBC08h */ case   21:  		/* bl -18072 */
		/* 821FBC08h case   21:*/		regs.LR = 0x821FBC0C; return 0x821F7570;
		/* 821FBC08h case   21:*/		return 0x821FBC0C;
		  /* 821FBC0Ch */ case   22:  		/* mr R3, R26 */
		/* 821FBC0Ch case   22:*/		regs.R3 = regs.R26;
		/* 821FBC0Ch case   22:*/		return 0x821FBC10;
		  /* 821FBC10h */ case   23:  		/* lwz R4, <#[R30 + 36]> */
		/* 821FBC10h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000024) );
		/* 821FBC10h case   23:*/		return 0x821FBC14;
		  /* 821FBC14h */ case   24:  		/* bl -18340 */
		/* 821FBC14h case   24:*/		regs.LR = 0x821FBC18; return 0x821F7470;
		/* 821FBC14h case   24:*/		return 0x821FBC18;
		  /* 821FBC18h */ case   25:  		/* b -40 */
		/* 821FBC18h case   25:*/		return 0x821FBBF0;
		/* 821FBC18h case   25:*/		return 0x821FBC1C;
		  /* 821FBC1Ch */ case   26:  		/* rlwinm. R10, R22, 0, 24, 31 */
		/* 821FBC1Ch case   26:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R22);
		/* 821FBC1Ch case   26:*/		return 0x821FBC20;
		  /* 821FBC20h */ case   27:  		/* bc 12, CR0_EQ, 8 */
		/* 821FBC20h case   27:*/		if ( regs.CR[0].eq ) { return 0x821FBC28;  }
		/* 821FBC20h case   27:*/		return 0x821FBC24;
		  /* 821FBC24h */ case   28:  		/* b 33608 */
		/* 821FBC24h case   28:*/		return 0x82203F6C;
		/* 821FBC24h case   28:*/		return 0x821FBC28;
	}
	return 0x821FBC28;
} // Block from 821FBBB4h-821FBC28h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821FBC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBC28);
		  /* 821FBC28h */ case    0:  		/* mr R28, R19 */
		/* 821FBC28h case    0:*/		regs.R28 = regs.R19;
		/* 821FBC28h case    0:*/		return 0x821FBC2C;
		  /* 821FBC2Ch */ case    1:  		/* cmpwi CR6, R11, 32 */
		/* 821FBC2Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 821FBC2Ch case    1:*/		return 0x821FBC30;
		  /* 821FBC30h */ case    2:  		/* bc 4, CR6_EQ, 160 */
		/* 821FBC30h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FBCD0;  }
		/* 821FBC30h case    2:*/		return 0x821FBC34;
		  /* 821FBC34h */ case    3:  		/* lwz R11, <#[R14 + 32]> */
		/* 821FBC34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 821FBC34h case    3:*/		return 0x821FBC38;
		  /* 821FBC38h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FBC38h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FBC38h case    4:*/		return 0x821FBC3C;
		  /* 821FBC3Ch */ case    5:  		/* lwz R11, <#[R11 + 24]> */
		/* 821FBC3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821FBC3Ch case    5:*/		return 0x821FBC40;
		  /* 821FBC40h */ case    6:  		/* cmpwi CR6, R11, 5 */
		/* 821FBC40h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 821FBC40h case    6:*/		return 0x821FBC44;
		  /* 821FBC44h */ case    7:  		/* bc 4, CR6_EQ, 72 */
		/* 821FBC44h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821FBC8C;  }
		/* 821FBC44h case    7:*/		return 0x821FBC48;
		  /* 821FBC48h */ case    8:  		/* lwz R11, <#[R31 + 56]> */
		/* 821FBC48h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821FBC48h case    8:*/		return 0x821FBC4C;
		  /* 821FBC4Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821FBC4Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBC4Ch case    9:*/		return 0x821FBC50;
		  /* 821FBC50h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 821FBC50h case   10:*/		if ( regs.CR[6].eq ) { return 0x821FBC5C;  }
		/* 821FBC50h case   10:*/		return 0x821FBC54;
		  /* 821FBC54h */ case   11:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821FBC54h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821FBC54h case   11:*/		return 0x821FBC58;
		  /* 821FBC58h */ case   12:  		/* stw R21, <#[R11 + 28]> */
		/* 821FBC58h case   12:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x0000001C) );
		/* 821FBC58h case   12:*/		return 0x821FBC5C;
	}
	return 0x821FBC5C;
} // Block from 821FBC28h-821FBC5Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FBC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBC5C);
		  /* 821FBC5Ch */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 821FBC5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821FBC5Ch case    0:*/		return 0x821FBC60;
		  /* 821FBC60h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 821FBC60h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821FBC60h case    1:*/		return 0x821FBC64;
		  /* 821FBC64h */ case    2:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821FBC64h case    2:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821FBC64h case    2:*/		return 0x821FBC68;
	}
	return 0x821FBC68;
} // Block from 821FBC5Ch-821FBC68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FBC68h
// Function '?ImportExpression@Compiler@D3DXShader@@AAAPAVDependency@2@PAVResultStack@2@PAVCNode@2@W4ExpressionUseType@12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBC68);
		  /* 821FBC68h */ case    0:  		/* bc 12, CR0_EQ, 104 */
		/* 821FBC68h case    0:*/		if ( regs.CR[0].eq ) { return 0x821FBCD0;  }
		/* 821FBC68h case    0:*/		return 0x821FBC6C;
		  /* 821FBC6Ch */ case    1:  		/* li R4, 0 */
		/* 821FBC6Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FBC6Ch case    1:*/		return 0x821FBC70;
		  /* 821FBC70h */ case    2:  		/* mr R3, R31 */
		/* 821FBC70h case    2:*/		regs.R3 = regs.R31;
		/* 821FBC70h case    2:*/		return 0x821FBC74;
		  /* 821FBC74h */ case    3:  		/* bl -17908 */
		/* 821FBC74h case    3:*/		regs.LR = 0x821FBC78; return 0x821F7680;
		/* 821FBC74h case    3:*/		return 0x821FBC78;
		  /* 821FBC78h */ case    4:  		/* li R5, 4 */
		/* 821FBC78h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FBC78h case    4:*/		return 0x821FBC7C;
		  /* 821FBC7Ch */ case    5:  		/* li R4, 0 */
		/* 821FBC7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FBC7Ch case    5:*/		return 0x821FBC80;
		  /* 821FBC80h */ case    6:  		/* mr R3, R26 */
		/* 821FBC80h case    6:*/		regs.R3 = regs.R26;
		/* 821FBC80h case    6:*/		return 0x821FBC84;
		  /* 821FBC84h */ case    7:  		/* bl -18052 */
		/* 821FBC84h case    7:*/		regs.LR = 0x821FBC88; return 0x821F7600;
		/* 821FBC84h case    7:*/		return 0x821FBC88;
		  /* 821FBC88h */ case    8:  		/* b 72 */
		/* 821FBC88h case    8:*/		return 0x821FBCD0;
		/* 821FBC88h case    8:*/		return 0x821FBC8C;
	}
	return 0x821FBC8C;
} // Block from 821FBC68h-821FBC8Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FBC8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBC8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBC8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBC8C);
		  /* 821FBC8Ch */ case    0:  		/* cmpwi CR6, R11, 14 */
		/* 821FBC8Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821FBC8Ch case    0:*/		return 0x821FBC90;
		  /* 821FBC90h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821FBC90h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FBC9C;  }
		/* 821FBC90h case    1:*/		return 0x821FBC94;
		  /* 821FBC94h */ case    2:  		/* cmpwi CR6, R11, 15 */
		/* 821FBC94h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821FBC94h case    2:*/		return 0x821FBC98;
		  /* 821FBC98h */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 821FBC98h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FBCD0;  }
		/* 821FBC98h case    3:*/		return 0x821FBC9C;
	}
	return 0x821FBC9C;
} // Block from 821FBC8Ch-821FBC9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBC9C);
		  /* 821FBC9Ch */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 821FBC9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821FBC9Ch case    0:*/		return 0x821FBCA0;
		  /* 821FBCA0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FBCA0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBCA0h case    1:*/		return 0x821FBCA4;
		  /* 821FBCA4h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821FBCA4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBCB0;  }
		/* 821FBCA4h case    2:*/		return 0x821FBCA8;
		  /* 821FBCA8h */ case    3:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821FBCA8h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821FBCA8h case    3:*/		return 0x821FBCAC;
		  /* 821FBCACh */ case    4:  		/* stw R21, <#[R11 + 28]> */
		/* 821FBCACh case    4:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x0000001C) );
		/* 821FBCACh case    4:*/		return 0x821FBCB0;
	}
	return 0x821FBCB0;
} // Block from 821FBC9Ch-821FBCB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FBCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBCB0);
		  /* 821FBCB0h */ case    0:  		/* li R4, 0 */
		/* 821FBCB0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FBCB0h case    0:*/		return 0x821FBCB4;
		  /* 821FBCB4h */ case    1:  		/* mr R3, R31 */
		/* 821FBCB4h case    1:*/		regs.R3 = regs.R31;
		/* 821FBCB4h case    1:*/		return 0x821FBCB8;
		  /* 821FBCB8h */ case    2:  		/* bl -17976 */
		/* 821FBCB8h case    2:*/		regs.LR = 0x821FBCBC; return 0x821F7680;
		/* 821FBCB8h case    2:*/		return 0x821FBCBC;
		  /* 821FBCBCh */ case    3:  		/* li R5, 4 */
		/* 821FBCBCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FBCBCh case    3:*/		return 0x821FBCC0;
		  /* 821FBCC0h */ case    4:  		/* li R4, 0 */
		/* 821FBCC0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FBCC0h case    4:*/		return 0x821FBCC4;
		  /* 821FBCC4h */ case    5:  		/* mr R3, R26 */
		/* 821FBCC4h case    5:*/		regs.R3 = regs.R26;
		/* 821FBCC4h case    5:*/		return 0x821FBCC8;
		  /* 821FBCC8h */ case    6:  		/* bl -18120 */
		/* 821FBCC8h case    6:*/		regs.LR = 0x821FBCCC; return 0x821F7600;
		/* 821FBCC8h case    6:*/		return 0x821FBCCC;
		  /* 821FBCCCh */ case    7:  		/* mr R28, R21 */
		/* 821FBCCCh case    7:*/		regs.R28 = regs.R21;
		/* 821FBCCCh case    7:*/		return 0x821FBCD0;
	}
	return 0x821FBCD0;
} // Block from 821FBCB0h-821FBCD0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FBCD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBCD0);
		  /* 821FBCD0h */ case    0:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FBCD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FBCD0h case    0:*/		return 0x821FBCD4;
		  /* 821FBCD4h */ case    1:  		/* cmpwi CR6, R11, 33 */
		/* 821FBCD4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 821FBCD4h case    1:*/		return 0x821FBCD8;
		  /* 821FBCD8h */ case    2:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FBCD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FBCD8h case    2:*/		return 0x821FBCDC;
		  /* 821FBCDCh */ case    3:  		/* bc 4, CR6_EQ, 68 */
		/* 821FBCDCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FBD20;  }
		/* 821FBCDCh case    3:*/		return 0x821FBCE0;
		  /* 821FBCE0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821FBCE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBCE0h case    4:*/		return 0x821FBCE4;
		  /* 821FBCE4h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821FBCE4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FBCEC;  }
		/* 821FBCE4h case    5:*/		return 0x821FBCE8;
		  /* 821FBCE8h */ case    6:  		/* b 33424 */
		/* 821FBCE8h case    6:*/		return 0x82203F78;
		/* 821FBCE8h case    6:*/		return 0x821FBCEC;
	}
	return 0x821FBCEC;
} // Block from 821FBCD0h-821FBCECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBCEC);
		  /* 821FBCECh */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FBCECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FBCECh case    0:*/		return 0x821FBCF0;
		  /* 821FBCF0h */ case    1:  		/* cmpwi CR6, R10, 1 */
		/* 821FBCF0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FBCF0h case    1:*/		return 0x821FBCF4;
		  /* 821FBCF4h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBCF4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBCFC;  }
		/* 821FBCF4h case    2:*/		return 0x821FBCF8;
		  /* 821FBCF8h */ case    3:  		/* b 33408 */
		/* 821FBCF8h case    3:*/		return 0x82203F78;
		/* 821FBCF8h case    3:*/		return 0x821FBCFC;
	}
	return 0x821FBCFC;
} // Block from 821FBCECh-821FBCFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBCFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBCFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBCFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBCFC);
		  /* 821FBCFCh */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 821FBCFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FBCFCh case    0:*/		return 0x821FBD00;
		  /* 821FBD00h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FBD00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBD00h case    1:*/		return 0x821FBD04;
		  /* 821FBD04h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821FBD04h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBD14;  }
		/* 821FBD04h case    2:*/		return 0x821FBD08;
		  /* 821FBD08h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FBD08h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FBD08h case    3:*/		return 0x821FBD0C;
		  /* 821FBD0Ch */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821FBD0Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FBD0Ch case    4:*/		return 0x821FBD10;
		  /* 821FBD10h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 821FBD10h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FBD3C;  }
		/* 821FBD10h case    5:*/		return 0x821FBD14;
	}
	return 0x821FBD14;
} // Block from 821FBCFCh-821FBD14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FBD14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBD14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBD14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBD14);
		  /* 821FBD14h */ case    0:  		/* li R4, 4801 */
		/* 821FBD14h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FBD14h case    0:*/		return 0x821FBD18;
		  /* 821FBD18h */ case    1:  		/* mr R3, R31 */
		/* 821FBD18h case    1:*/		regs.R3 = regs.R31;
		/* 821FBD18h case    1:*/		return 0x821FBD1C;
		  /* 821FBD1Ch */ case    2:  		/* bl -695988 */
		/* 821FBD1Ch case    2:*/		regs.LR = 0x821FBD20; return 0x82151E68;
		/* 821FBD1Ch case    2:*/		return 0x821FBD20;
	}
	return 0x821FBD20;
} // Block from 821FBD14h-821FBD20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FBD20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBD20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBD20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBD20);
		  /* 821FBD20h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821FBD20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBD20h case    0:*/		return 0x821FBD24;
		  /* 821FBD24h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821FBD24h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FBD2C;  }
		/* 821FBD24h case    1:*/		return 0x821FBD28;
		  /* 821FBD28h */ case    2:  		/* b 33444 */
		/* 821FBD28h case    2:*/		return 0x82203FCC;
		/* 821FBD28h case    2:*/		return 0x821FBD2C;
	}
	return 0x821FBD2C;
} // Block from 821FBD20h-821FBD2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FBD2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBD2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBD2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBD2C);
		  /* 821FBD2Ch */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FBD2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FBD2Ch case    0:*/		return 0x821FBD30;
		  /* 821FBD30h */ case    1:  		/* cmpwi CR6, R10, 1 */
		/* 821FBD30h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FBD30h case    1:*/		return 0x821FBD34;
		  /* 821FBD34h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBD34h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBD3C;  }
		/* 821FBD34h case    2:*/		return 0x821FBD38;
		  /* 821FBD38h */ case    3:  		/* b 33428 */
		/* 821FBD38h case    3:*/		return 0x82203FCC;
		/* 821FBD38h case    3:*/		return 0x821FBD3C;
	}
	return 0x821FBD3C;
} // Block from 821FBD2Ch-821FBD3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBD3C);
		  /* 821FBD3Ch */ case    0:  		/* lwz R29, <#[R11 + 8]> */
		/* 821FBD3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 821FBD3Ch case    0:*/		return 0x821FBD40;
		  /* 821FBD40h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821FBD40h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FBD40h case    1:*/		return 0x821FBD44;
		  /* 821FBD44h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821FBD44h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBD58;  }
		/* 821FBD44h case    2:*/		return 0x821FBD48;
		  /* 821FBD48h */ case    3:  		/* lwz R10, <#[R29 + 4]> */
		/* 821FBD48h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 821FBD48h case    3:*/		return 0x821FBD4C;
		  /* 821FBD4Ch */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821FBD4Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FBD4Ch case    4:*/		return 0x821FBD50;
		  /* 821FBD50h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBD50h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FBD58;  }
		/* 821FBD50h case    5:*/		return 0x821FBD54;
		  /* 821FBD54h */ case    6:  		/* b 33328 */
		/* 821FBD54h case    6:*/		return 0x82203F84;
		/* 821FBD54h case    6:*/		return 0x821FBD58;
	}
	return 0x821FBD58;
} // Block from 821FBD3Ch-821FBD58h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBD58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBD58);
		  /* 821FBD58h */ case    0:  		/* lwz R30, <#[R11 + 12]> */
		/* 821FBD58h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FBD58h case    0:*/		return 0x821FBD5C;
		  /* 821FBD5Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821FBD5Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FBD5Ch case    1:*/		return 0x821FBD60;
		  /* 821FBD60h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821FBD60h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBD74;  }
		/* 821FBD60h case    2:*/		return 0x821FBD64;
		  /* 821FBD64h */ case    3:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FBD64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FBD64h case    3:*/		return 0x821FBD68;
		  /* 821FBD68h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 821FBD68h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FBD68h case    4:*/		return 0x821FBD6C;
		  /* 821FBD6Ch */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBD6Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821FBD74;  }
		/* 821FBD6Ch case    5:*/		return 0x821FBD70;
		  /* 821FBD70h */ case    6:  		/* b 33312 */
		/* 821FBD70h case    6:*/		return 0x82203F90;
		/* 821FBD70h case    6:*/		return 0x821FBD74;
	}
	return 0x821FBD74;
} // Block from 821FBD58h-821FBD74h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBD74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBD74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBD74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBD74);
		  /* 821FBD74h */ case    0:  		/* li R5, 0 */
		/* 821FBD74h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FBD74h case    0:*/		return 0x821FBD78;
		  /* 821FBD78h */ case    1:  		/* mr R4, R14 */
		/* 821FBD78h case    1:*/		regs.R4 = regs.R14;
		/* 821FBD78h case    1:*/		return 0x821FBD7C;
		  /* 821FBD7Ch */ case    2:  		/* mr R3, R26 */
		/* 821FBD7Ch case    2:*/		regs.R3 = regs.R26;
		/* 821FBD7Ch case    2:*/		return 0x821FBD80;
		  /* 821FBD80h */ case    3:  		/* bl -18448 */
		/* 821FBD80h case    3:*/		regs.LR = 0x821FBD84; return 0x821F7570;
		/* 821FBD80h case    3:*/		return 0x821FBD84;
		  /* 821FBD84h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821FBD84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FBD84h case    4:*/		return 0x821FBD88;
		  /* 821FBD88h */ case    5:  		/* bc 12, CR6_EQ, 152 */
		/* 821FBD88h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FBE20;  }
		/* 821FBD88h case    5:*/		return 0x821FBD8C;
		  /* 821FBD8Ch */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FBD8Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FBD8Ch case    6:*/		return 0x821FBD90;
		  /* 821FBD90h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821FBD90h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBD90h case    7:*/		return 0x821FBD94;
		  /* 821FBD94h */ case    8:  		/* bc 4, CR6_EQ, 132 */
		/* 821FBD94h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821FBE18;  }
		/* 821FBD94h case    8:*/		return 0x821FBD98;
		  /* 821FBD98h */ case    9:  		/* lwz R30, <#[R30 + 12]> */
		/* 821FBD98h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FBD98h case    9:*/		return 0x821FBD9C;
		  /* 821FBD9Ch */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 821FBD9Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FBD9Ch case   10:*/		return 0x821FBDA0;
		  /* 821FBDA0h */ case   11:  		/* bc 12, CR6_EQ, 128 */
		/* 821FBDA0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821FBE20;  }
		/* 821FBDA0h case   11:*/		return 0x821FBDA4;
		  /* 821FBDA4h */ case   12:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FBDA4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FBDA4h case   12:*/		return 0x821FBDA8;
		  /* 821FBDA8h */ case   13:  		/* cmpwi CR6, R11, 1 */
		/* 821FBDA8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FBDA8h case   13:*/		return 0x821FBDAC;
		  /* 821FBDACh */ case   14:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBDACh case   14:*/		if ( regs.CR[6].eq ) { return 0x821FBDB4;  }
		/* 821FBDACh case   14:*/		return 0x821FBDB0;
		  /* 821FBDB0h */ case   15:  		/* b 33260 */
		/* 821FBDB0h case   15:*/		return 0x82203F9C;
		/* 821FBDB0h case   15:*/		return 0x821FBDB4;
	}
	return 0x821FBDB4;
} // Block from 821FBD74h-821FBDB4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821FBDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBDB4);
		  /* 821FBDB4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821FBDB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FBDB4h case    0:*/		return 0x821FBDB8;
		  /* 821FBDB8h */ case    1:  		/* bc 4, CR6_EQ, -44 */
		/* 821FBDB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FBD8C;  }
		/* 821FBDB8h case    1:*/		return 0x821FBDBC;
		  /* 821FBDBCh */ case    2:  		/* b 92 */
		/* 821FBDBCh case    2:*/		return 0x821FBE18;
		/* 821FBDBCh case    2:*/		return 0x821FBDC0;
		  /* 821FBDC0h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FBDC0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FBDC0h case    3:*/		return 0x821FBDC4;
		  /* 821FBDC4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821FBDC4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBDC4h case    4:*/		return 0x821FBDC8;
		  /* 821FBDC8h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821FBDC8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FBDD0;  }
		/* 821FBDC8h case    5:*/		return 0x821FBDCC;
		  /* 821FBDCCh */ case    6:  		/* b 33268 */
		/* 821FBDCCh case    6:*/		return 0x82203FC0;
		/* 821FBDCCh case    6:*/		return 0x821FBDD0;
	}
	return 0x821FBDD0;
} // Block from 821FBDB4h-821FBDD0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBDD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBDD0);
		  /* 821FBDD0h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FBDD0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FBDD0h case    0:*/		return 0x821FBDD4;
		  /* 821FBDD4h */ case    1:  		/* cmpwi CR6, R10, 14 */
		/* 821FBDD4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 821FBDD4h case    1:*/		return 0x821FBDD8;
		  /* 821FBDD8h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBDD8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBDE0;  }
		/* 821FBDD8h case    2:*/		return 0x821FBDDC;
		  /* 821FBDDCh */ case    3:  		/* b 33252 */
		/* 821FBDDCh case    3:*/		return 0x82203FC0;
		/* 821FBDDCh case    3:*/		return 0x821FBDE0;
	}
	return 0x821FBDE0;
} // Block from 821FBDD0h-821FBDE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBDE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBDE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBDE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBDE0);
		  /* 821FBDE0h */ case    0:  		/* lwz R10, <#[R11 + 28]> */
		/* 821FBDE0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821FBDE0h case    0:*/		return 0x821FBDE4;
		  /* 821FBDE4h */ case    1:  		/* cmpwi CR6, R10, 27 */
		/* 821FBDE4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000001B);
		/* 821FBDE4h case    1:*/		return 0x821FBDE8;
		  /* 821FBDE8h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBDE8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBDF0;  }
		/* 821FBDE8h case    2:*/		return 0x821FBDEC;
		  /* 821FBDECh */ case    3:  		/* b 33212 */
		/* 821FBDECh case    3:*/		return 0x82203FA8;
		/* 821FBDECh case    3:*/		return 0x821FBDF0;
	}
	return 0x821FBDF0;
} // Block from 821FBDE0h-821FBDF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBDF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBDF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBDF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBDF0);
		  /* 821FBDF0h */ case    0:  		/* mr R3, R26 */
		/* 821FBDF0h case    0:*/		regs.R3 = regs.R26;
		/* 821FBDF0h case    0:*/		return 0x821FBDF4;
		  /* 821FBDF4h */ case    1:  		/* lwz R4, <#[R11 + 32]> */
		/* 821FBDF4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000020) );
		/* 821FBDF4h case    1:*/		return 0x821FBDF8;
		  /* 821FBDF8h */ case    2:  		/* bl -18696 */
		/* 821FBDF8h case    2:*/		regs.LR = 0x821FBDFC; return 0x821F74F0;
		/* 821FBDF8h case    2:*/		return 0x821FBDFC;
		  /* 821FBDFCh */ case    3:  		/* lwz R30, <#[R30 + 12]> */
		/* 821FBDFCh case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FBDFCh case    3:*/		return 0x821FBE00;
		  /* 821FBE00h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821FBE00h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FBE00h case    4:*/		return 0x821FBE04;
		  /* 821FBE04h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821FBE04h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FBE20;  }
		/* 821FBE04h case    5:*/		return 0x821FBE08;
		  /* 821FBE08h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FBE08h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FBE08h case    6:*/		return 0x821FBE0C;
		  /* 821FBE0Ch */ case    7:  		/* cmpwi CR6, R11, 1 */
		/* 821FBE0Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FBE0Ch case    7:*/		return 0x821FBE10;
		  /* 821FBE10h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBE10h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FBE18;  }
		/* 821FBE10h case    8:*/		return 0x821FBE14;
		  /* 821FBE14h */ case    9:  		/* b 33184 */
		/* 821FBE14h case    9:*/		return 0x82203FB4;
		/* 821FBE14h case    9:*/		return 0x821FBE18;
	}
	return 0x821FBE18;
} // Block from 821FBDF0h-821FBE18h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821FBE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBE18);
		  /* 821FBE18h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821FBE18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FBE18h case    0:*/		return 0x821FBE1C;
		  /* 821FBE1Ch */ case    1:  		/* bc 4, CR6_EQ, -92 */
		/* 821FBE1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FBDC0;  }
		/* 821FBE1Ch case    1:*/		return 0x821FBE20;
	}
	return 0x821FBE20;
} // Block from 821FBE18h-821FBE20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FBE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBE20);
		  /* 821FBE20h */ case    0:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FBE20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FBE20h case    0:*/		return 0x821FBE24;
		  /* 821FBE24h */ case    1:  		/* cmpwi CR6, R11, 32 */
		/* 821FBE24h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 821FBE24h case    1:*/		return 0x821FBE28;
		  /* 821FBE28h */ case    2:  		/* bc 4, CR6_EQ, 68 */
		/* 821FBE28h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FBE6C;  }
		/* 821FBE28h case    2:*/		return 0x821FBE2C;
		  /* 821FBE2Ch */ case    3:  		/* lwz R11, <#[R14 + 32]> */
		/* 821FBE2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 821FBE2Ch case    3:*/		return 0x821FBE30;
		  /* 821FBE30h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FBE30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FBE30h case    4:*/		return 0x821FBE34;
		  /* 821FBE34h */ case    5:  		/* lwz R11, <#[R11 + 24]> */
		/* 821FBE34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821FBE34h case    5:*/		return 0x821FBE38;
		  /* 821FBE38h */ case    6:  		/* cmpwi CR6, R11, 32 */
		/* 821FBE38h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 821FBE38h case    6:*/		return 0x821FBE3C;
		  /* 821FBE3Ch */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 821FBE3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821FBE50;  }
		/* 821FBE3Ch case    7:*/		return 0x821FBE40;
		  /* 821FBE40h */ case    8:  		/* cmpwi CR6, R11, 33 */
		/* 821FBE40h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 821FBE40h case    8:*/		return 0x821FBE44;
		  /* 821FBE44h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 821FBE44h case    9:*/		if ( regs.CR[6].eq ) { return 0x821FBE50;  }
		/* 821FBE44h case    9:*/		return 0x821FBE48;
		  /* 821FBE48h */ case   10:  		/* cmpwi CR6, R11, 34 */
		/* 821FBE48h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000022);
		/* 821FBE48h case   10:*/		return 0x821FBE4C;
		  /* 821FBE4Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 821FBE4Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821FBE6C;  }
		/* 821FBE4Ch case   11:*/		return 0x821FBE50;
	}
	return 0x821FBE50;
} // Block from 821FBE20h-821FBE50h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FBE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBE50);
		  /* 821FBE50h */ case    0:  		/* lwz R11, <#[R31 + 608]> */
		/* 821FBE50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 821FBE50h case    0:*/		return 0x821FBE54;
		  /* 821FBE54h */ case    1:  		/* li R5, 5 */
		/* 821FBE54h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 821FBE54h case    1:*/		return 0x821FBE58;
		  /* 821FBE58h */ case    2:  		/* mr R4, R14 */
		/* 821FBE58h case    2:*/		regs.R4 = regs.R14;
		/* 821FBE58h case    2:*/		return 0x821FBE5C;
		  /* 821FBE5Ch */ case    3:  		/* addi R11, R11, 1 */
		/* 821FBE5Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FBE5Ch case    3:*/		return 0x821FBE60;
		  /* 821FBE60h */ case    4:  		/* mr R3, R26 */
		/* 821FBE60h case    4:*/		regs.R3 = regs.R26;
		/* 821FBE60h case    4:*/		return 0x821FBE64;
		  /* 821FBE64h */ case    5:  		/* stw R11, <#[R31 + 608]> */
		/* 821FBE64h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 821FBE64h case    5:*/		return 0x821FBE68;
		  /* 821FBE68h */ case    6:  		/* bl -18536 */
		/* 821FBE68h case    6:*/		regs.LR = 0x821FBE6C; return 0x821F7600;
		/* 821FBE68h case    6:*/		return 0x821FBE6C;
	}
	return 0x821FBE6C;
} // Block from 821FBE50h-821FBE6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBE6C);
		  /* 821FBE6Ch */ case    0:  		/* mr R7, R28 */
		/* 821FBE6Ch case    0:*/		regs.R7 = regs.R28;
		/* 821FBE6Ch case    0:*/		return 0x821FBE70;
		  /* 821FBE70h */ case    1:  		/* li R6, 0 */
		/* 821FBE70h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FBE70h case    1:*/		return 0x821FBE74;
		  /* 821FBE74h */ case    2:  		/* mr R5, R29 */
		/* 821FBE74h case    2:*/		regs.R5 = regs.R29;
		/* 821FBE74h case    2:*/		return 0x821FBE78;
		  /* 821FBE78h */ case    3:  		/* b 1164 */
		/* 821FBE78h case    3:*/		return 0x821FC304;
		/* 821FBE78h case    3:*/		return 0x821FBE7C;
		  /* 821FBE7Ch */ case    4:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FBE7Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FBE7Ch case    4:*/		return 0x821FBE80;
		  /* 821FBE80h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821FBE80h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FBE88;  }
		/* 821FBE80h case    5:*/		return 0x821FBE84;
		  /* 821FBE84h */ case    6:  		/* b 33108 */
		/* 821FBE84h case    6:*/		return 0x82203FD8;
		/* 821FBE84h case    6:*/		return 0x821FBE88;
	}
	return 0x821FBE88;
} // Block from 821FBE6Ch-821FBE88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FBE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBE88);
		  /* 821FBE88h */ case    0:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FBE88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FBE88h case    0:*/		return 0x821FBE8C;
		  /* 821FBE8Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FBE8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBE8Ch case    1:*/		return 0x821FBE90;
		  /* 821FBE90h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821FBE90h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FBE98;  }
		/* 821FBE90h case    2:*/		return 0x821FBE94;
		  /* 821FBE94h */ case    3:  		/* b 33116 */
		/* 821FBE94h case    3:*/		return 0x82203FF0;
		/* 821FBE94h case    3:*/		return 0x821FBE98;
	}
	return 0x821FBE98;
} // Block from 821FBE88h-821FBE98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBE98);
		  /* 821FBE98h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FBE98h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FBE98h case    0:*/		return 0x821FBE9C;
		  /* 821FBE9Ch */ case    1:  		/* cmpwi CR6, R10, 14 */
		/* 821FBE9Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 821FBE9Ch case    1:*/		return 0x821FBEA0;
		  /* 821FBEA0h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBEA0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBEA8;  }
		/* 821FBEA0h case    2:*/		return 0x821FBEA4;
		  /* 821FBEA4h */ case    3:  		/* b 33100 */
		/* 821FBEA4h case    3:*/		return 0x82203FF0;
		/* 821FBEA4h case    3:*/		return 0x821FBEA8;
	}
	return 0x821FBEA8;
} // Block from 821FBE98h-821FBEA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBEA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBEA8);
		  /* 821FBEA8h */ case    0:  		/* lwz R30, <#[R11 + 32]> */
		/* 821FBEA8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000020) );
		/* 821FBEA8h case    0:*/		return 0x821FBEAC;
		  /* 821FBEACh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821FBEACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FBEACh case    1:*/		return 0x821FBEB0;
		  /* 821FBEB0h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821FBEB0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FBEB8;  }
		/* 821FBEB0h case    2:*/		return 0x821FBEB4;
		  /* 821FBEB4h */ case    3:  		/* b 33072 */
		/* 821FBEB4h case    3:*/		return 0x82203FE4;
		/* 821FBEB4h case    3:*/		return 0x821FBEB8;
	}
	return 0x821FBEB8;
} // Block from 821FBEA8h-821FBEB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBEB8);
		  /* 821FBEB8h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FBEB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FBEB8h case    0:*/		return 0x821FBEBC;
		  /* 821FBEBCh */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 821FBEBCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FBEBCh case    1:*/		return 0x821FBEC0;
		  /* 821FBEC0h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBEC0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FBEC8;  }
		/* 821FBEC0h case    2:*/		return 0x821FBEC4;
		  /* 821FBEC4h */ case    3:  		/* b 33056 */
		/* 821FBEC4h case    3:*/		return 0x82203FE4;
		/* 821FBEC4h case    3:*/		return 0x821FBEC8;
	}
	return 0x821FBEC8;
} // Block from 821FBEB8h-821FBEC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FBEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBEC8);
		  /* 821FBEC8h */ case    0:  		/* li R5, 0 */
		/* 821FBEC8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FBEC8h case    0:*/		return 0x821FBECC;
		  /* 821FBECCh */ case    1:  		/* mr R4, R14 */
		/* 821FBECCh case    1:*/		regs.R4 = regs.R14;
		/* 821FBECCh case    1:*/		return 0x821FBED0;
		  /* 821FBED0h */ case    2:  		/* mr R3, R26 */
		/* 821FBED0h case    2:*/		regs.R3 = regs.R26;
		/* 821FBED0h case    2:*/		return 0x821FBED4;
		  /* 821FBED4h */ case    3:  		/* bl -18788 */
		/* 821FBED4h case    3:*/		regs.LR = 0x821FBED8; return 0x821F7570;
		/* 821FBED4h case    3:*/		return 0x821FBED8;
		  /* 821FBED8h */ case    4:  		/* mr R3, R26 */
		/* 821FBED8h case    4:*/		regs.R3 = regs.R26;
		/* 821FBED8h case    4:*/		return 0x821FBEDC;
		  /* 821FBEDCh */ case    5:  		/* lwz R4, <#[R30 + 12]> */
		/* 821FBEDCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FBEDCh case    5:*/		return 0x821FBEE0;
		  /* 821FBEE0h */ case    6:  		/* bl -19056 */
		/* 821FBEE0h case    6:*/		regs.LR = 0x821FBEE4; return 0x821F7470;
		/* 821FBEE0h case    6:*/		return 0x821FBEE4;
		  /* 821FBEE4h */ case    7:  		/* mr R3, R26 */
		/* 821FBEE4h case    7:*/		regs.R3 = regs.R26;
		/* 821FBEE4h case    7:*/		return 0x821FBEE8;
		  /* 821FBEE8h */ case    8:  		/* lwz R4, <#[R30 + 8]> */
		/* 821FBEE8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 821FBEE8h case    8:*/		return 0x821FBEEC;
		  /* 821FBEECh */ case    9:  		/* bl -19068 */
		/* 821FBEECh case    9:*/		regs.LR = 0x821FBEF0; return 0x821F7470;
		/* 821FBEECh case    9:*/		return 0x821FBEF0;
		  /* 821FBEF0h */ case   10:  		/* b -884 */
		/* 821FBEF0h case   10:*/		return 0x821FBB7C;
		/* 821FBEF0h case   10:*/		return 0x821FBEF4;
		  /* 821FBEF4h */ case   11:  		/* lwz R28, <#[R14 + 36]> */
		/* 821FBEF4h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R14 + 0x00000024) );
		/* 821FBEF4h case   11:*/		return 0x821FBEF8;
		  /* 821FBEF8h */ case   12:  		/* cmplwi CR6, R28, 0 */
		/* 821FBEF8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FBEF8h case   12:*/		return 0x821FBEFC;
		  /* 821FBEFCh */ case   13:  		/* bc 12, CR6_EQ, 92 */
		/* 821FBEFCh case   13:*/		if ( regs.CR[6].eq ) { return 0x821FBF58;  }
		/* 821FBEFCh case   13:*/		return 0x821FBF00;
		  /* 821FBF00h */ case   14:  		/* lwz R29, <#[R28 + 12]> */
		/* 821FBF00h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x0000000C) );
		/* 821FBF00h case   14:*/		return 0x821FBF04;
		  /* 821FBF04h */ case   15:  		/* cmplwi CR6, R29, 0 */
		/* 821FBF04h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FBF04h case   15:*/		return 0x821FBF08;
		  /* 821FBF08h */ case   16:  		/* bc 12, CR6_EQ, 80 */
		/* 821FBF08h case   16:*/		if ( regs.CR[6].eq ) { return 0x821FBF58;  }
		/* 821FBF08h case   16:*/		return 0x821FBF0C;
		  /* 821FBF0Ch */ case   17:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FBF0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FBF0Ch case   17:*/		return 0x821FBF10;
		  /* 821FBF10h */ case   18:  		/* cmpwi CR6, R11, 1 */
		/* 821FBF10h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FBF10h case   18:*/		return 0x821FBF14;
		  /* 821FBF14h */ case   19:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBF14h case   19:*/		if ( regs.CR[6].eq ) { return 0x821FBF1C;  }
		/* 821FBF14h case   19:*/		return 0x821FBF18;
		  /* 821FBF18h */ case   20:  		/* b 32996 */
		/* 821FBF18h case   20:*/		return 0x82203FFC;
		/* 821FBF18h case   20:*/		return 0x821FBF1C;
	}
	return 0x821FBF1C;
} // Block from 821FBEC8h-821FBF1Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821FBF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBF1C);
		  /* 821FBF1Ch */ case    0:  		/* li R5, 0 */
		/* 821FBF1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FBF1Ch case    0:*/		return 0x821FBF20;
		  /* 821FBF20h */ case    1:  		/* mr R4, R29 */
		/* 821FBF20h case    1:*/		regs.R4 = regs.R29;
		/* 821FBF20h case    1:*/		return 0x821FBF24;
		  /* 821FBF24h */ case    2:  		/* mr R3, R26 */
		/* 821FBF24h case    2:*/		regs.R3 = regs.R26;
		/* 821FBF24h case    2:*/		return 0x821FBF28;
		  /* 821FBF28h */ case    3:  		/* bl -18872 */
		/* 821FBF28h case    3:*/		regs.LR = 0x821FBF2C; return 0x821F7570;
		/* 821FBF28h case    3:*/		return 0x821FBF2C;
		  /* 821FBF2Ch */ case    4:  		/* li R8, 0 */
		/* 821FBF2Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821FBF2Ch case    4:*/		return 0x821FBF30;
		  /* 821FBF30h */ case    5:  		/* li R7, 0 */
		/* 821FBF30h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FBF30h case    5:*/		return 0x821FBF34;
		  /* 821FBF34h */ case    6:  		/* li R6, 0 */
		/* 821FBF34h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FBF34h case    6:*/		return 0x821FBF38;
		  /* 821FBF38h */ case    7:  		/* mr R5, R29 */
		/* 821FBF38h case    7:*/		regs.R5 = regs.R29;
		/* 821FBF38h case    7:*/		return 0x821FBF3C;
		  /* 821FBF3Ch */ case    8:  		/* mr R4, R26 */
		/* 821FBF3Ch case    8:*/		regs.R4 = regs.R26;
		/* 821FBF3Ch case    8:*/		return 0x821FBF40;
		  /* 821FBF40h */ case    9:  		/* mr R3, R31 */
		/* 821FBF40h case    9:*/		regs.R3 = regs.R31;
		/* 821FBF40h case    9:*/		return 0x821FBF44;
		  /* 821FBF44h */ case   10:  		/* bl -14916 */
		/* 821FBF44h case   10:*/		regs.LR = 0x821FBF48; return 0x821F8500;
		/* 821FBF44h case   10:*/		return 0x821FBF48;
		  /* 821FBF48h */ case   11:  		/* or. R4, R3, R3 */
		/* 821FBF48h case   11:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 821FBF48h case   11:*/		return 0x821FBF4C;
		  /* 821FBF4Ch */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 821FBF4Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821FBF58;  }
		/* 821FBF4Ch case   12:*/		return 0x821FBF50;
		  /* 821FBF50h */ case   13:  		/* mr R3, R26 */
		/* 821FBF50h case   13:*/		regs.R3 = regs.R26;
		/* 821FBF50h case   13:*/		return 0x821FBF54;
		  /* 821FBF54h */ case   14:  		/* bl -19172 */
		/* 821FBF54h case   14:*/		regs.LR = 0x821FBF58; return 0x821F7470;
		/* 821FBF54h case   14:*/		return 0x821FBF58;
	}
	return 0x821FBF58;
} // Block from 821FBF1Ch-821FBF58h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FBF58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBF58);
		  /* 821FBF58h */ case    0:  		/* li R5, 0 */
		/* 821FBF58h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FBF58h case    0:*/		return 0x821FBF5C;
		  /* 821FBF5Ch */ case    1:  		/* mr R4, R30 */
		/* 821FBF5Ch case    1:*/		regs.R4 = regs.R30;
		/* 821FBF5Ch case    1:*/		return 0x821FBF60;
		  /* 821FBF60h */ case    2:  		/* mr R3, R26 */
		/* 821FBF60h case    2:*/		regs.R3 = regs.R26;
		/* 821FBF60h case    2:*/		return 0x821FBF64;
		  /* 821FBF64h */ case    3:  		/* bl -18932 */
		/* 821FBF64h case    3:*/		regs.LR = 0x821FBF68; return 0x821F7570;
		/* 821FBF64h case    3:*/		return 0x821FBF68;
		  /* 821FBF68h */ case    4:  		/* mr R14, R19 */
		/* 821FBF68h case    4:*/		regs.R14 = regs.R19;
		/* 821FBF68h case    4:*/		return 0x821FBF6C;
		  /* 821FBF6Ch */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821FBF6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FBF6Ch case    5:*/		return 0x821FBF70;
		  /* 821FBF70h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821FBF70h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FBFAC;  }
		/* 821FBF70h case    6:*/		return 0x821FBF74;
		  /* 821FBF74h */ case    7:  		/* lwz R5, <#[R28 + 8]> */
		/* 821FBF74h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000008) );
		/* 821FBF74h case    7:*/		return 0x821FBF78;
		  /* 821FBF78h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 821FBF78h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821FBF78h case    8:*/		return 0x821FBF7C;
		  /* 821FBF7Ch */ case    9:  		/* bc 12, CR6_EQ, 48 */
		/* 821FBF7Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821FBFAC;  }
		/* 821FBF7Ch case    9:*/		return 0x821FBF80;
		  /* 821FBF80h */ case   10:  		/* lwz R11, <#[R5 + 4]> */
		/* 821FBF80h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 821FBF80h case   10:*/		return 0x821FBF84;
		  /* 821FBF84h */ case   11:  		/* mr R3, R31 */
		/* 821FBF84h case   11:*/		regs.R3 = regs.R31;
		/* 821FBF84h case   11:*/		return 0x821FBF88;
		  /* 821FBF88h */ case   12:  		/* cmpwi CR6, R11, 1 */
		/* 821FBF88h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FBF88h case   12:*/		return 0x821FBF8C;
		  /* 821FBF8Ch */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 821FBF8Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821FBF94;  }
		/* 821FBF8Ch case   13:*/		return 0x821FBF90;
		  /* 821FBF90h */ case   14:  		/* b 32888 */
		/* 821FBF90h case   14:*/		return 0x82204008;
		/* 821FBF90h case   14:*/		return 0x821FBF94;
	}
	return 0x821FBF94;
} // Block from 821FBF58h-821FBF94h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FBF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBF94);
		  /* 821FBF94h */ case    0:  		/* li R8, 0 */
		/* 821FBF94h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821FBF94h case    0:*/		return 0x821FBF98;
		  /* 821FBF98h */ case    1:  		/* li R7, 0 */
		/* 821FBF98h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FBF98h case    1:*/		return 0x821FBF9C;
		  /* 821FBF9Ch */ case    2:  		/* li R6, 0 */
		/* 821FBF9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FBF9Ch case    2:*/		return 0x821FBFA0;
		  /* 821FBFA0h */ case    3:  		/* mr R4, R26 */
		/* 821FBFA0h case    3:*/		regs.R4 = regs.R26;
		/* 821FBFA0h case    3:*/		return 0x821FBFA4;
		  /* 821FBFA4h */ case    4:  		/* bl -15012 */
		/* 821FBFA4h case    4:*/		regs.LR = 0x821FBFA8; return 0x821F8500;
		/* 821FBFA4h case    4:*/		return 0x821FBFA8;
		  /* 821FBFA8h */ case    5:  		/* mr R14, R3 */
		/* 821FBFA8h case    5:*/		regs.R14 = regs.R3;
		/* 821FBFA8h case    5:*/		return 0x821FBFAC;
	}
	return 0x821FBFAC;
} // Block from 821FBF94h-821FBFACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FBFACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FBFAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FBFAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FBFAC);
		  /* 821FBFACh */ case    0:  		/* mr R4, R30 */
		/* 821FBFACh case    0:*/		regs.R4 = regs.R30;
		/* 821FBFACh case    0:*/		return 0x821FBFB0;
		  /* 821FBFB0h */ case    1:  		/* mr R3, R31 */
		/* 821FBFB0h case    1:*/		regs.R3 = regs.R31;
		/* 821FBFB0h case    1:*/		return 0x821FBFB4;
		  /* 821FBFB4h */ case    2:  		/* bl -64380 */
		/* 821FBFB4h case    2:*/		regs.LR = 0x821FBFB8; return 0x821EC438;
		/* 821FBFB4h case    2:*/		return 0x821FBFB8;
		  /* 821FBFB8h */ case    3:  		/* lwz R11, <#[R3 + 24]> */
		/* 821FBFB8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 821FBFB8h case    3:*/		return 0x821FBFBC;
		  /* 821FBFBCh */ case    4:  		/* mr R30, R3 */
		/* 821FBFBCh case    4:*/		regs.R30 = regs.R3;
		/* 821FBFBCh case    4:*/		return 0x821FBFC0;
		  /* 821FBFC0h */ case    5:  		/* addi R10, R11, 1 */
		/* 821FBFC0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 821FBFC0h case    5:*/		return 0x821FBFC4;
		  /* 821FBFC4h */ case    6:  		/* rlwimi R10, R11, 0, 0, 16 */
		/* 821FBFC4h case    6:*/		cpu::op::rlwimi<0,0,0,16>(regs,&regs.R10,regs.R11);
		/* 821FBFC4h case    6:*/		return 0x821FBFC8;
		  /* 821FBFC8h */ case    7:  		/* stw R10, <#[R3 + 24]> */
		/* 821FBFC8h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 821FBFC8h case    7:*/		return 0x821FBFCC;
		  /* 821FBFCCh */ case    8:  		/* lwz R11, <#[R3 + 12]> */
		/* 821FBFCCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FBFCCh case    8:*/		return 0x821FBFD0;
		  /* 821FBFD0h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821FBFD0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FBFD0h case    9:*/		return 0x821FBFD4;
		  /* 821FBFD4h */ case   10:  		/* bc 4, CR6_EQ, 152 */
		/* 821FBFD4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821FC06C;  }
		/* 821FBFD4h case   10:*/		return 0x821FBFD8;
		  /* 821FBFD8h */ case   11:  		/* mr R4, R3 */
		/* 821FBFD8h case   11:*/		regs.R4 = regs.R3;
		/* 821FBFD8h case   11:*/		return 0x821FBFDC;
		  /* 821FBFDCh */ case   12:  		/* mr R3, R31 */
		/* 821FBFDCh case   12:*/		regs.R3 = regs.R31;
		/* 821FBFDCh case   12:*/		return 0x821FBFE0;
		  /* 821FBFE0h */ case   13:  		/* bl -57216 */
		/* 821FBFE0h case   13:*/		regs.LR = 0x821FBFE4; return 0x821EE060;
		/* 821FBFE0h case   13:*/		return 0x821FBFE4;
		  /* 821FBFE4h */ case   14:  		/* stw R3, <#[R30 + 12]> */
		/* 821FBFE4h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FBFE4h case   14:*/		return 0x821FBFE8;
		  /* 821FBFE8h */ case   15:  		/* li R5, 2 */
		/* 821FBFE8h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821FBFE8h case   15:*/		return 0x821FBFEC;
		  /* 821FBFECh */ case   16:  		/* lwz R6, <#[R30]> */
		/* 821FBFECh case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 821FBFECh case   16:*/		return 0x821FBFF0;
		  /* 821FBFF0h */ case   17:  		/* mr R3, R31 */
		/* 821FBFF0h case   17:*/		regs.R3 = regs.R31;
		/* 821FBFF0h case   17:*/		return 0x821FBFF4;
		  /* 821FBFF4h */ case   18:  		/* lwz R4, <#[R30 + 4]> */
		/* 821FBFF4h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 821FBFF4h case   18:*/		return 0x821FBFF8;
		  /* 821FBFF8h */ case   19:  		/* bl -6248 */
		/* 821FBFF8h case   19:*/		regs.LR = 0x821FBFFC; return 0x821FA790;
		/* 821FBFF8h case   19:*/		return 0x821FBFFC;
		  /* 821FBFFCh */ case   20:  		/* mr R7, R20 */
		/* 821FBFFCh case   20:*/		regs.R7 = regs.R20;
		/* 821FBFFCh case   20:*/		return 0x821FC000;
		  /* 821FC000h */ case   21:  		/* li R6, 0 */
		/* 821FC000h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FC000h case   21:*/		return 0x821FC004;
		  /* 821FC004h */ case   22:  		/* li R5, 2 */
		/* 821FC004h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821FC004h case   22:*/		return 0x821FC008;
		  /* 821FC008h */ case   23:  		/* mr R4, R30 */
		/* 821FC008h case   23:*/		regs.R4 = regs.R30;
		/* 821FC008h case   23:*/		return 0x821FC00C;
		  /* 821FC00Ch */ case   24:  		/* mr R3, R31 */
		/* 821FC00Ch case   24:*/		regs.R3 = regs.R31;
		/* 821FC00Ch case   24:*/		return 0x821FC010;
		  /* 821FC010h */ case   25:  		/* bl -5104 */
		/* 821FC010h case   25:*/		regs.LR = 0x821FC014; return 0x821FAC20;
		/* 821FC010h case   25:*/		return 0x821FC014;
		  /* 821FC014h */ case   26:  		/* lwz R3, <#[R31 + 572]> */
		/* 821FC014h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000023C) );
		/* 821FC014h case   26:*/		return 0x821FC018;
		  /* 821FC018h */ case   27:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FC018h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FC018h case   27:*/		return 0x821FC01C;
		  /* 821FC01Ch */ case   28:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821FC01Ch case   28:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821FC01Ch case   28:*/		return 0x821FC020;
		  /* 821FC020h */ case   29:  		/* bc 4, CR0_EQ, 40 */
		/* 821FC020h case   29:*/		if ( !regs.CR[0].eq ) { return 0x821FC048;  }
		/* 821FC020h case   29:*/		return 0x821FC024;
		  /* 821FC024h */ case   30:  		/* lwz R11, <#[R3]> */
		/* 821FC024h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FC024h case   30:*/		return 0x821FC028;
		  /* 821FC028h */ case   31:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821FC028h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821FC028h case   31:*/		return 0x821FC02C;
		  /* 821FC02Ch */ case   32:  		/* addic. R11, R11, -4 */
		/* 821FC02Ch case   32:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821FC02Ch case   32:*/		return 0x821FC030;
		  /* 821FC030h */ case   33:  		/* bc 12, CR0_EQ, 24 */
		/* 821FC030h case   33:*/		if ( regs.CR[0].eq ) { return 0x821FC048;  }
		/* 821FC030h case   33:*/		return 0x821FC034;
		  /* 821FC034h */ case   34:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FC034h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FC034h case   34:*/		return 0x821FC038;
		  /* 821FC038h */ case   35:  		/* lwz R9, <#[R11 + 12]> */
		/* 821FC038h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FC038h case   35:*/		return 0x821FC03C;
		  /* 821FC03Ch */ case   36:  		/* addi R10, R10, 1 */
		/* 821FC03Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821FC03Ch case   36:*/		return 0x821FC040;
		  /* 821FC040h */ case   37:  		/* cmplw CR6, R10, R9 */
		/* 821FC040h case   37:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821FC040h case   37:*/		return 0x821FC044;
		  /* 821FC044h */ case   38:  		/* bc 4, CR6_GT, 16 */
		/* 821FC044h case   38:*/		if ( !regs.CR[6].gt ) { return 0x821FC054;  }
		/* 821FC044h case   38:*/		return 0x821FC048;
	}
	return 0x821FC048;
} // Block from 821FBFACh-821FC048h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821FC048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC048);
		  /* 821FC048h */ case    0:  		/* li R4, 1 */
		/* 821FC048h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821FC048h case    0:*/		return 0x821FC04C;
		  /* 821FC04Ch */ case    1:  		/* bl -454532 */
		/* 821FC04Ch case    1:*/		regs.LR = 0x821FC050; return 0x8218D0C8;
		/* 821FC04Ch case    1:*/		return 0x821FC050;
		  /* 821FC050h */ case    2:  		/* mr R11, R3 */
		/* 821FC050h case    2:*/		regs.R11 = regs.R3;
		/* 821FC050h case    2:*/		return 0x821FC054;
	}
	return 0x821FC054;
} // Block from 821FC048h-821FC054h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FC054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC054);
		  /* 821FC054h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FC054h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FC054h case    0:*/		return 0x821FC058;
		  /* 821FC058h */ case    1:  		/* addi R9, R10, 4 */
		/* 821FC058h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821FC058h case    1:*/		return 0x821FC05C;
		  /* 821FC05Ch */ case    2:  		/* addi R8, R10, 1 */
		/* 821FC05Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821FC05Ch case    2:*/		return 0x821FC060;
		  /* 821FC060h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821FC060h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821FC060h case    3:*/		return 0x821FC064;
		  /* 821FC064h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821FC064h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821FC064h case    4:*/		return 0x821FC068;
		  /* 821FC068h */ case    5:  		/* stwx R30, <#[R10 + R11]> */
		/* 821FC068h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FC068h case    5:*/		return 0x821FC06C;
	}
	return 0x821FC06C;
} // Block from 821FC054h-821FC06Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FC06Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC06C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC06C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC06C);
		  /* 821FC06Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FC06Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FC06Ch case    0:*/		return 0x821FC070;
		  /* 821FC070h */ case    1:  		/* lwz R11, <#[R11 + 44]> */
		/* 821FC070h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821FC070h case    1:*/		return 0x821FC074;
		  /* 821FC074h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821FC074h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC074h case    2:*/		return 0x821FC078;
		  /* 821FC078h */ case    3:  		/* bc 12, CR6_EQ, 672 */
		/* 821FC078h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FC318;  }
		/* 821FC078h case    3:*/		return 0x821FC07C;
		  /* 821FC07Ch */ case    4:  		/* cmplwi CR6, R14, 0 */
		/* 821FC07Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821FC07Ch case    4:*/		return 0x821FC080;
		  /* 821FC080h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC080h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC090;  }
		/* 821FC080h case    5:*/		return 0x821FC084;
		  /* 821FC084h */ case    6:  		/* mr R4, R14 */
		/* 821FC084h case    6:*/		regs.R4 = regs.R14;
		/* 821FC084h case    6:*/		return 0x821FC088;
		  /* 821FC088h */ case    7:  		/* mr R3, R26 */
		/* 821FC088h case    7:*/		regs.R3 = regs.R26;
		/* 821FC088h case    7:*/		return 0x821FC08C;
		  /* 821FC08Ch */ case    8:  		/* bl -19484 */
		/* 821FC08Ch case    8:*/		regs.LR = 0x821FC090; return 0x821F7470;
		/* 821FC08Ch case    8:*/		return 0x821FC090;
	}
	return 0x821FC090;
} // Block from 821FC06Ch-821FC090h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FC090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC090);
		  /* 821FC090h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FC090h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FC090h case    0:*/		return 0x821FC094;
		  /* 821FC094h */ case    1:  		/* li R8, 1 */
		/* 821FC094h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FC094h case    1:*/		return 0x821FC098;
		  /* 821FC098h */ case    2:  		/* li R7, 0 */
		/* 821FC098h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FC098h case    2:*/		return 0x821FC09C;
		  /* 821FC09Ch */ case    3:  		/* li R6, 0 */
		/* 821FC09Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FC09Ch case    3:*/		return 0x821FC0A0;
		  /* 821FC0A0h */ case    4:  		/* lwz R5, <#[R11 + 44]> */
		/* 821FC0A0h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000002C) );
		/* 821FC0A0h case    4:*/		return 0x821FC0A4;
		  /* 821FC0A4h */ case    5:  		/* b 612 */
		/* 821FC0A4h case    5:*/		return 0x821FC308;
		/* 821FC0A4h case    5:*/		return 0x821FC0A8;
	}
	return 0x821FC0A8;
} // Block from 821FC090h-821FC0A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FC0A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC0A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC0A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC0A8);
		  /* 821FC0A8h */ case    0:  		/* lwz R11, <#[R14 + 24]> */
		/* 821FC0A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000018) );
		/* 821FC0A8h case    0:*/		return 0x821FC0AC;
		  /* 821FC0ACh */ case    1:  		/* mr R4, R14 */
		/* 821FC0ACh case    1:*/		regs.R4 = regs.R14;
		/* 821FC0ACh case    1:*/		return 0x821FC0B0;
		  /* 821FC0B0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821FC0B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC0B0h case    2:*/		return 0x821FC0B4;
		  /* 821FC0B4h */ case    3:  		/* bc 4, CR6_EQ, 32628 */
		/* 821FC0B4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82204028;  }
		/* 821FC0B4h case    3:*/		return 0x821FC0B8;
		  /* 821FC0B8h */ case    4:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FC0B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FC0B8h case    4:*/		return 0x821FC0BC;
		  /* 821FC0BCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821FC0BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC0BCh case    5:*/		return 0x821FC0C0;
		  /* 821FC0C0h */ case    6:  		/* bc 4, CR6_EQ, 32616 */
		/* 821FC0C0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82204028;  }
		/* 821FC0C0h case    6:*/		return 0x821FC0C4;
		  /* 821FC0C4h */ case    7:  		/* lwz R11, <#[R14 + 32]> */
		/* 821FC0C4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 821FC0C4h case    7:*/		return 0x821FC0C8;
		  /* 821FC0C8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FC0C8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC0C8h case    8:*/		return 0x821FC0CC;
		  /* 821FC0CCh */ case    9:  		/* bc 4, CR6_EQ, 32604 */
		/* 821FC0CCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x82204028;  }
		/* 821FC0CCh case    9:*/		return 0x821FC0D0;
		  /* 821FC0D0h */ case   10:  		/* lwz R14, <#[R14 + 20]> */
		/* 821FC0D0h case   10:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R14 + 0x00000014) );
		/* 821FC0D0h case   10:*/		return 0x821FC0D4;
		  /* 821FC0D4h */ case   11:  		/* cmplwi CR6, R14, 0 */
		/* 821FC0D4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821FC0D4h case   11:*/		return 0x821FC0D8;
		  /* 821FC0D8h */ case   12:  		/* bc 12, CR6_EQ, 584 */
		/* 821FC0D8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FC0D8h case   12:*/		return 0x821FC0DC;
	}
	return 0x821FC0DC;
} // Block from 821FC0A8h-821FC0DCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FC0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC0DC);
		  /* 821FC0DCh */ case    0:  		/* li R5, 0 */
		/* 821FC0DCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FC0DCh case    0:*/		return 0x821FC0E0;
	}
	return 0x821FC0E0;
} // Block from 821FC0DCh-821FC0E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC0E0);
		  /* 821FC0E0h */ case    0:  		/* mr R3, R26 */
		/* 821FC0E0h case    0:*/		regs.R3 = regs.R26;
		/* 821FC0E0h case    0:*/		return 0x821FC0E4;
		  /* 821FC0E4h */ case    1:  		/* bl -19316 */
		/* 821FC0E4h case    1:*/		regs.LR = 0x821FC0E8; return 0x821F7570;
		/* 821FC0E4h case    1:*/		return 0x821FC0E8;
		  /* 821FC0E8h */ case    2:  		/* b 560 */
		/* 821FC0E8h case    2:*/		return 0x821FC318;
		/* 821FC0E8h case    2:*/		return 0x821FC0EC;
	}
	return 0x821FC0EC;
} // Block from 821FC0E0h-821FC0ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FC0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC0EC);
		  /* 821FC0ECh */ case    0:  		/* mr R5, R20 */
		/* 821FC0ECh case    0:*/		regs.R5 = regs.R20;
		/* 821FC0ECh case    0:*/		return 0x821FC0F0;
		  /* 821FC0F0h */ case    1:  		/* mr R4, R14 */
		/* 821FC0F0h case    1:*/		regs.R4 = regs.R14;
		/* 821FC0F0h case    1:*/		return 0x821FC0F4;
		  /* 821FC0F4h */ case    2:  		/* mr R3, R31 */
		/* 821FC0F4h case    2:*/		regs.R3 = regs.R31;
		/* 821FC0F4h case    2:*/		return 0x821FC0F8;
		  /* 821FC0F8h */ case    3:  		/* bl -4048 */
		/* 821FC0F8h case    3:*/		regs.LR = 0x821FC0FC; return 0x821FB128;
		/* 821FC0F8h case    3:*/		return 0x821FC0FC;
		  /* 821FC0FCh */ case    4:  		/* b 548 */
		/* 821FC0FCh case    4:*/		return 0x821FC320;
		/* 821FC0FCh case    4:*/		return 0x821FC100;
	}
	return 0x821FC100;
} // Block from 821FC0ECh-821FC100h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FC100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC100);
		  /* 821FC100h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821FC100h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821FC100h case    0:*/		return 0x821FC104;
		  /* 821FC104h */ case    1:  		/* mr R5, R14 */
		/* 821FC104h case    1:*/		regs.R5 = regs.R14;
		/* 821FC104h case    1:*/		return 0x821FC108;
		  /* 821FC108h */ case    2:  		/* bc 4, CR0_EQ, 492 */
		/* 821FC108h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821FC2F4;  }
		/* 821FC108h case    2:*/		return 0x821FC10C;
		  /* 821FC10Ch */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 821FC10Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821FC10Ch case    3:*/		return 0x821FC110;
		  /* 821FC110h */ case    4:  		/* bc 12, CR6_EQ, 528 */
		/* 821FC110h case    4:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FC110h case    4:*/		return 0x821FC114;
		  /* 821FC114h */ case    5:  		/* mr R8, R5 */
		/* 821FC114h case    5:*/		regs.R8 = regs.R5;
		/* 821FC114h case    5:*/		return 0x821FC118;
		  /* 821FC118h */ case    6:  		/* mr R27, R19 */
		/* 821FC118h case    6:*/		regs.R27 = regs.R19;
		/* 821FC118h case    6:*/		return 0x821FC11C;
		  /* 821FC11Ch */ case    7:  		/* cmplwi CR6, R27, 4 */
		/* 821FC11Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000004);
		/* 821FC11Ch case    7:*/		return 0x821FC120;
		  /* 821FC120h */ case    8:  		/* bc 4, CR6_LT, 164 */
		/* 821FC120h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821FC1C4;  }
		/* 821FC120h case    8:*/		return 0x821FC124;
		  /* 821FC124h */ case    9:  		/* lwz R10, <#[R8 + 8]> */
		/* 821FC124h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 821FC124h case    9:*/		return 0x821FC128;
		  /* 821FC128h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 821FC128h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FC128h case   10:*/		return 0x821FC12C;
		  /* 821FC12Ch */ case   11:  		/* bc 12, CR6_EQ, 32520 */
		/* 821FC12Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82204034;  }
		/* 821FC12Ch case   11:*/		return 0x821FC130;
		  /* 821FC130h */ case   12:  		/* lwz R11, <#[R10 + 4]> */
		/* 821FC130h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821FC130h case   12:*/		return 0x821FC134;
		  /* 821FC134h */ case   13:  		/* cmpwi CR6, R11, 14 */
		/* 821FC134h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821FC134h case   13:*/		return 0x821FC138;
		  /* 821FC138h */ case   14:  		/* bc 4, CR6_EQ, 140 */
		/* 821FC138h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC138h case   14:*/		return 0x821FC13C;
		  /* 821FC13Ch */ case   15:  		/* lwz R11, <#[R10 + 28]> */
		/* 821FC13Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821FC13Ch case   15:*/		return 0x821FC140;
		  /* 821FC140h */ case   16:  		/* cmpwi CR6, R11, 0 */
		/* 821FC140h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FC140h case   16:*/		return 0x821FC144;
		  /* 821FC144h */ case   17:  		/* bc 4, CR6_EQ, 128 */
		/* 821FC144h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC144h case   17:*/		return 0x821FC148;
		  /* 821FC148h */ case   18:  		/* lwz R11, <#[R10 + 32]> */
		/* 821FC148h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 821FC148h case   18:*/		return 0x821FC14C;
		  /* 821FC14Ch */ case   19:  		/* lwz R9, <#[R11 + 4]> */
		/* 821FC14Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC14Ch case   19:*/		return 0x821FC150;
		  /* 821FC150h */ case   20:  		/* cmpwi CR6, R9, 1 */
		/* 821FC150h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 821FC150h case   20:*/		return 0x821FC154;
		  /* 821FC154h */ case   21:  		/* bc 4, CR6_EQ, 112 */
		/* 821FC154h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC154h case   21:*/		return 0x821FC158;
		  /* 821FC158h */ case   22:  		/* lwz R9, <#[R11 + 12]> */
		/* 821FC158h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FC158h case   22:*/		return 0x821FC15C;
		  /* 821FC15Ch */ case   23:  		/* cmplwi CR6, R9, 0 */
		/* 821FC15Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FC15Ch case   23:*/		return 0x821FC160;
		  /* 821FC160h */ case   24:  		/* bc 4, CR6_EQ, 100 */
		/* 821FC160h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC160h case   24:*/		return 0x821FC164;
		  /* 821FC164h */ case   25:  		/* lwz R9, <#[R11 + 8]> */
		/* 821FC164h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821FC164h case   25:*/		return 0x821FC168;
		  /* 821FC168h */ case   26:  		/* lwz R11, <#[R9 + 4]> */
		/* 821FC168h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821FC168h case   26:*/		return 0x821FC16C;
		  /* 821FC16Ch */ case   27:  		/* cmpwi CR6, R11, 15 */
		/* 821FC16Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821FC16Ch case   27:*/		return 0x821FC170;
		  /* 821FC170h */ case   28:  		/* bc 4, CR6_EQ, 84 */
		/* 821FC170h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC170h case   28:*/		return 0x821FC174;
		  /* 821FC174h */ case   29:  		/* lwz R11, <#[R10 + 16]> */
		/* 821FC174h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821FC174h case   29:*/		return 0x821FC178;
		  /* 821FC178h */ case   30:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FC178h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC178h case   30:*/		return 0x821FC17C;
		  /* 821FC17Ch */ case   31:  		/* cmpwi CR6, R10, 9 */
		/* 821FC17Ch case   31:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000009);
		/* 821FC17Ch case   31:*/		return 0x821FC180;
		  /* 821FC180h */ case   32:  		/* bc 4, CR6_EQ, 68 */
		/* 821FC180h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC180h case   32:*/		return 0x821FC184;
		  /* 821FC184h */ case   33:  		/* lwz R10, <#[R9 + 16]> */
		/* 821FC184h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000010) );
		/* 821FC184h case   33:*/		return 0x821FC188;
		  /* 821FC188h */ case   34:  		/* cmpwi CR6, R10, 3 */
		/* 821FC188h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821FC188h case   34:*/		return 0x821FC18C;
		  /* 821FC18Ch */ case   35:  		/* bc 4, CR6_EQ, 56 */
		/* 821FC18Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC18Ch case   35:*/		return 0x821FC190;
		  /* 821FC190h */ case   36:  		/* lwz R11, <#[R11 + 20]> */
		/* 821FC190h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821FC190h case   36:*/		return 0x821FC194;
		  /* 821FC194h */ case   37:  		/* cmpwi CR6, R11, 10 */
		/* 821FC194h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 821FC194h case   37:*/		return 0x821FC198;
		  /* 821FC198h */ case   38:  		/* bc 4, CR6_EQ, 44 */
		/* 821FC198h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821FC1C4;  }
		/* 821FC198h case   38:*/		return 0x821FC19C;
		  /* 821FC19Ch */ case   39:  		/* lwz R11, <#[R8 + 12]> */
		/* 821FC19Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 821FC19Ch case   39:*/		return 0x821FC1A0;
		  /* 821FC1A0h */ case   40:  		/* cmplwi CR6, R11, 0 */
		/* 821FC1A0h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC1A0h case   40:*/		return 0x821FC1A4;
		  /* 821FC1A4h */ case   41:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC1A4h case   41:*/		if ( regs.CR[6].eq ) { return 0x821FC1B4;  }
		/* 821FC1A4h case   41:*/		return 0x821FC1A8;
		  /* 821FC1A8h */ case   42:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FC1A8h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC1A8h case   42:*/		return 0x821FC1AC;
		  /* 821FC1ACh */ case   43:  		/* cmpwi CR6, R10, 1 */
		/* 821FC1ACh case   43:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FC1ACh case   43:*/		return 0x821FC1B0;
		  /* 821FC1B0h */ case   44:  		/* bc 4, CR6_EQ, 32400 */
		/* 821FC1B0h case   44:*/		if ( !regs.CR[6].eq ) { return 0x82204040;  }
		/* 821FC1B0h case   44:*/		return 0x821FC1B4;
	}
	return 0x821FC1B4;
} // Block from 821FC100h-821FC1B4h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821FC1B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC1B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC1B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC1B4);
		  /* 821FC1B4h */ case    0:  		/* mr R8, R11 */
		/* 821FC1B4h case    0:*/		regs.R8 = regs.R11;
		/* 821FC1B4h case    0:*/		return 0x821FC1B8;
		  /* 821FC1B8h */ case    1:  		/* addi R27, R27, 1 */
		/* 821FC1B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821FC1B8h case    1:*/		return 0x821FC1BC;
		  /* 821FC1BCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821FC1BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC1BCh case    2:*/		return 0x821FC1C0;
		  /* 821FC1C0h */ case    3:  		/* bc 4, CR6_EQ, -164 */
		/* 821FC1C0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FC11C;  }
		/* 821FC1C0h case    3:*/		return 0x821FC1C4;
	}
	return 0x821FC1C4;
} // Block from 821FC1B4h-821FC1C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC1C4);
		  /* 821FC1C4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821FC1C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821FC1C4h case    0:*/		return 0x821FC1C8;
		  /* 821FC1C8h */ case    1:  		/* bc 12, CR6_EQ, 300 */
		/* 821FC1C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC2F4;  }
		/* 821FC1C8h case    1:*/		return 0x821FC1CC;
		  /* 821FC1CCh */ case    2:  		/* addi R11, R1, 644 */
		/* 821FC1CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x284);
		/* 821FC1CCh case    2:*/		return 0x821FC1D0;
		  /* 821FC1D0h */ case    3:  		/* stfs FR31, <#[R1 + 640]> */
		/* 821FC1D0h case    3:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000280) );
		/* 821FC1D0h case    3:*/		return 0x821FC1D4;
		  /* 821FC1D4h */ case    4:  		/* mr R29, R5 */
		/* 821FC1D4h case    4:*/		regs.R29 = regs.R5;
		/* 821FC1D4h case    4:*/		return 0x821FC1D8;
		  /* 821FC1D8h */ case    5:  		/* mr R30, R19 */
		/* 821FC1D8h case    5:*/		regs.R30 = regs.R19;
		/* 821FC1D8h case    5:*/		return 0x821FC1DC;
		  /* 821FC1DCh */ case    6:  		/* cmplwi CR6, R27, 0 */
		/* 821FC1DCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821FC1DCh case    6:*/		return 0x821FC1E0;
		  /* 821FC1E0h */ case    7:  		/* stw R19, <#[R11]> */
		/* 821FC1E0h case    7:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 821FC1E0h case    7:*/		return 0x821FC1E4;
		  /* 821FC1E4h */ case    8:  		/* stw R19, <#[R11 + 4]> */
		/* 821FC1E4h case    8:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC1E4h case    8:*/		return 0x821FC1E8;
		  /* 821FC1E8h */ case    9:  		/* stw R19, <#[R11 + 8]> */
		/* 821FC1E8h case    9:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000008) );
		/* 821FC1E8h case    9:*/		return 0x821FC1EC;
		  /* 821FC1ECh */ case   10:  		/* bc 12, CR6_EQ, 176 */
		/* 821FC1ECh case   10:*/		if ( regs.CR[6].eq ) { return 0x821FC29C;  }
		/* 821FC1ECh case   10:*/		return 0x821FC1F0;
		  /* 821FC1F0h */ case   11:  		/* addi R28, R1, 640 */
		/* 821FC1F0h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x280);
		/* 821FC1F0h case   11:*/		return 0x821FC1F4;
		  /* 821FC1F4h */ case   12:  		/* lwz R11, <#[R29 + 8]> */
		/* 821FC1F4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821FC1F4h case   12:*/		return 0x821FC1F8;
		  /* 821FC1F8h */ case   13:  		/* lwz R11, <#[R11 + 32]> */
		/* 821FC1F8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821FC1F8h case   13:*/		return 0x821FC1FC;
		  /* 821FC1FCh */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FC1FCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FC1FCh case   14:*/		return 0x821FC200;
		  /* 821FC200h */ case   15:  		/* lwz R11, <#[R10 + 16]> */
		/* 821FC200h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821FC200h case   15:*/		return 0x821FC204;
		  /* 821FC204h */ case   16:  		/* cmplwi CR6, R11, 1 */
		/* 821FC204h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821FC204h case   16:*/		return 0x821FC208;
		  /* 821FC208h */ case   17:  		/* bc 12, CR6_LT, 76 */
		/* 821FC208h case   17:*/		if ( regs.CR[6].lt ) { return 0x821FC254;  }
		/* 821FC208h case   17:*/		return 0x821FC20C;
		  /* 821FC20Ch */ case   18:  		/* bc 12, CR6_EQ, 48 */
		/* 821FC20Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821FC23C;  }
		/* 821FC20Ch case   18:*/		return 0x821FC210;
		  /* 821FC210h */ case   19:  		/* cmplwi CR6, R11, 3 */
		/* 821FC210h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821FC210h case   19:*/		return 0x821FC214;
		  /* 821FC214h */ case   20:  		/* bc 12, CR6_LT, 24 */
		/* 821FC214h case   20:*/		if ( regs.CR[6].lt ) { return 0x821FC22C;  }
		/* 821FC214h case   20:*/		return 0x821FC218;
		  /* 821FC218h */ case   21:  		/* bc 4, CR6_EQ, 32308 */
		/* 821FC218h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8220404C;  }
		/* 821FC218h case   21:*/		return 0x821FC21C;
		  /* 821FC21Ch */ case   22:  		/* lfd FR0, <#[R10 + 24]> */
		/* 821FC21Ch case   22:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000018) );
		/* 821FC21Ch case   22:*/		return 0x821FC220;
		  /* 821FC220h */ case   23:  		/* frsp FR1, FR0 */
		/* 821FC220h case   23:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 821FC220h case   23:*/		return 0x821FC224;
		  /* 821FC224h */ case   24:  		/* bl -67308 */
		/* 821FC224h case   24:*/		regs.LR = 0x821FC228; return 0x821EBB38;
		/* 821FC224h case   24:*/		return 0x821FC228;
		  /* 821FC228h */ case   25:  		/* b 68 */
		/* 821FC228h case   25:*/		return 0x821FC26C;
		/* 821FC228h case   25:*/		return 0x821FC22C;
	}
	return 0x821FC22C;
} // Block from 821FC1C4h-821FC22Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 821FC22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC22C);
		  /* 821FC22Ch */ case    0:  		/* lwz R11, <#[R10 + 24]> */
		/* 821FC22Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821FC22Ch case    0:*/		return 0x821FC230;
		  /* 821FC230h */ case    1:  		/* std R11, <#[R1 + 1200]> */
		/* 821FC230h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000004B0) );
		/* 821FC230h case    1:*/		return 0x821FC234;
		  /* 821FC234h */ case    2:  		/* lfd FR0, <#[R1 + 1200]> */
		/* 821FC234h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000004B0) );
		/* 821FC234h case    2:*/		return 0x821FC238;
		  /* 821FC238h */ case    3:  		/* b 16 */
		/* 821FC238h case    3:*/		return 0x821FC248;
		/* 821FC238h case    3:*/		return 0x821FC23C;
	}
	return 0x821FC23C;
} // Block from 821FC22Ch-821FC23Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC23C);
		  /* 821FC23Ch */ case    0:  		/* lwa R11, <#[R10 + 24]> */
		/* 821FC23Ch case    0:*/		cpu::mem::load32a( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821FC23Ch case    0:*/		return 0x821FC240;
		  /* 821FC240h */ case    1:  		/* std R11, <#[R1 + 1216]> */
		/* 821FC240h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000004C0) );
		/* 821FC240h case    1:*/		return 0x821FC244;
		  /* 821FC244h */ case    2:  		/* lfd FR0, <#[R1 + 1216]> */
		/* 821FC244h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000004C0) );
		/* 821FC244h case    2:*/		return 0x821FC248;
	}
	return 0x821FC248;
} // Block from 821FC23Ch-821FC248h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FC248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC248);
		  /* 821FC248h */ case    0:  		/* fcfid FR0, FR0 */
		/* 821FC248h case    0:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821FC248h case    0:*/		return 0x821FC24C;
		  /* 821FC24Ch */ case    1:  		/* frsp FR1, FR0 */
		/* 821FC24Ch case    1:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 821FC24Ch case    1:*/		return 0x821FC250;
		  /* 821FC250h */ case    2:  		/* b 28 */
		/* 821FC250h case    2:*/		return 0x821FC26C;
		/* 821FC250h case    2:*/		return 0x821FC254;
	}
	return 0x821FC254;
} // Block from 821FC248h-821FC254h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FC254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC254);
		  /* 821FC254h */ case    0:  		/* lwz R11, <#[R10 + 24]> */
		/* 821FC254h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821FC254h case    0:*/		return 0x821FC258;
		  /* 821FC258h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821FC258h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FC258h case    1:*/		return 0x821FC25C;
		  /* 821FC25Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821FC25Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821FC268;  }
		/* 821FC25Ch case    2:*/		return 0x821FC260;
		  /* 821FC260h */ case    3:  		/* fmr FR1, FR30 */
		/* 821FC260h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821FC260h case    3:*/		return 0x821FC264;
		  /* 821FC264h */ case    4:  		/* b 8 */
		/* 821FC264h case    4:*/		return 0x821FC26C;
		/* 821FC264h case    4:*/		return 0x821FC268;
	}
	return 0x821FC268;
} // Block from 821FC254h-821FC268h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FC268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC268);
		  /* 821FC268h */ case    0:  		/* fmr FR1, FR31 */
		/* 821FC268h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821FC268h case    0:*/		return 0x821FC26C;
	}
	return 0x821FC26C;
} // Block from 821FC268h-821FC26Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC26Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC26C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC26C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC26C);
		  /* 821FC26Ch */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821FC26Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821FC26Ch case    0:*/		return 0x821FC270;
		  /* 821FC270h */ case    1:  		/* stfs FR1, <#[R28]> */
		/* 821FC270h case    1:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 821FC270h case    1:*/		return 0x821FC274;
		  /* 821FC274h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821FC274h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC274h case    2:*/		return 0x821FC278;
		  /* 821FC278h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC278h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FC288;  }
		/* 821FC278h case    3:*/		return 0x821FC27C;
		  /* 821FC27Ch */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FC27Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC27Ch case    4:*/		return 0x821FC280;
		  /* 821FC280h */ case    5:  		/* cmpwi CR6, R10, 1 */
		/* 821FC280h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FC280h case    5:*/		return 0x821FC284;
		  /* 821FC284h */ case    6:  		/* bc 4, CR6_EQ, 32212 */
		/* 821FC284h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82204058;  }
		/* 821FC284h case    6:*/		return 0x821FC288;
	}
	return 0x821FC288;
} // Block from 821FC26Ch-821FC288h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FC288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC288);
		  /* 821FC288h */ case    0:  		/* addi R30, R30, 1 */
		/* 821FC288h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821FC288h case    0:*/		return 0x821FC28C;
		  /* 821FC28Ch */ case    1:  		/* mr R29, R11 */
		/* 821FC28Ch case    1:*/		regs.R29 = regs.R11;
		/* 821FC28Ch case    1:*/		return 0x821FC290;
		  /* 821FC290h */ case    2:  		/* addi R28, R28, 4 */
		/* 821FC290h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821FC290h case    2:*/		return 0x821FC294;
		  /* 821FC294h */ case    3:  		/* cmplw CR6, R30, R27 */
		/* 821FC294h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R27);
		/* 821FC294h case    3:*/		return 0x821FC298;
		  /* 821FC298h */ case    4:  		/* bc 12, CR6_LT, -164 */
		/* 821FC298h case    4:*/		if ( regs.CR[6].lt ) { return 0x821FC1F4;  }
		/* 821FC298h case    4:*/		return 0x821FC29C;
	}
	return 0x821FC29C;
} // Block from 821FC288h-821FC29Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FC29Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC29C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC29C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC29C);
		  /* 821FC29Ch */ case    0:  		/* mr R5, R27 */
		/* 821FC29Ch case    0:*/		regs.R5 = regs.R27;
		/* 821FC29Ch case    0:*/		return 0x821FC2A0;
		  /* 821FC2A0h */ case    1:  		/* lfs FR4, <#[R1 + 652]> */
		/* 821FC2A0h case    1:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x0000028C) );
		/* 821FC2A0h case    1:*/		return 0x821FC2A4;
		  /* 821FC2A4h */ case    2:  		/* mr R4, R31 */
		/* 821FC2A4h case    2:*/		regs.R4 = regs.R31;
		/* 821FC2A4h case    2:*/		return 0x821FC2A8;
		  /* 821FC2A8h */ case    3:  		/* lfs FR3, <#[R1 + 648]> */
		/* 821FC2A8h case    3:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000288) );
		/* 821FC2A8h case    3:*/		return 0x821FC2AC;
		  /* 821FC2ACh */ case    4:  		/* addi R3, R1, 464 */
		/* 821FC2ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1D0);
		/* 821FC2ACh case    4:*/		return 0x821FC2B0;
		  /* 821FC2B0h */ case    5:  		/* lfs FR2, <#[R1 + 644]> */
		/* 821FC2B0h case    5:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000284) );
		/* 821FC2B0h case    5:*/		return 0x821FC2B4;
		  /* 821FC2B4h */ case    6:  		/* lfs FR1, <#[R1 + 640]> */
		/* 821FC2B4h case    6:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000280) );
		/* 821FC2B4h case    6:*/		return 0x821FC2B8;
		  /* 821FC2B8h */ case    7:  		/* bl 175000 */
		/* 821FC2B8h case    7:*/		regs.LR = 0x821FC2BC; return 0x82226E50;
		/* 821FC2B8h case    7:*/		return 0x821FC2BC;
		  /* 821FC2BCh */ case    8:  		/* mr R30, R19 */
		/* 821FC2BCh case    8:*/		regs.R30 = regs.R19;
		/* 821FC2BCh case    8:*/		return 0x821FC2C0;
		  /* 821FC2C0h */ case    9:  		/* cmplwi CR6, R27, 0 */
		/* 821FC2C0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821FC2C0h case    9:*/		return 0x821FC2C4;
		  /* 821FC2C4h */ case   10:  		/* bc 12, CR6_EQ, 40 */
		/* 821FC2C4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821FC2EC;  }
		/* 821FC2C4h case   10:*/		return 0x821FC2C8;
		  /* 821FC2C8h */ case   11:  		/* lwz R11, <#[R1 + 468]> */
		/* 821FC2C8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001D4) );
		/* 821FC2C8h case   11:*/		return 0x821FC2CC;
		  /* 821FC2CCh */ case   12:  		/* mr R3, R20 */
		/* 821FC2CCh case   12:*/		regs.R3 = regs.R20;
		/* 821FC2CCh case   12:*/		return 0x821FC2D0;
		  /* 821FC2D0h */ case   13:  		/* rlwimi R11, R30, 2, 16, 29 */
		/* 821FC2D0h case   13:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R11,regs.R30);
		/* 821FC2D0h case   13:*/		return 0x821FC2D4;
		  /* 821FC2D4h */ case   14:  		/* stw R11, <#[R1 + 468]> */
		/* 821FC2D4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001D4) );
		/* 821FC2D4h case   14:*/		return 0x821FC2D8;
		  /* 821FC2D8h */ case   15:  		/* ld R4, <#[R1 + 464]> */
		/* 821FC2D8h case   15:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x000001D0) );
		/* 821FC2D8h case   15:*/		return 0x821FC2DC;
		  /* 821FC2DCh */ case   16:  		/* bl -21988 */
		/* 821FC2DCh case   16:*/		regs.LR = 0x821FC2E0; return 0x821F6CF8;
		/* 821FC2DCh case   16:*/		return 0x821FC2E0;
		  /* 821FC2E0h */ case   17:  		/* addi R30, R30, 1 */
		/* 821FC2E0h case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821FC2E0h case   17:*/		return 0x821FC2E4;
		  /* 821FC2E4h */ case   18:  		/* cmplw CR6, R30, R27 */
		/* 821FC2E4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R27);
		/* 821FC2E4h case   18:*/		return 0x821FC2E8;
		  /* 821FC2E8h */ case   19:  		/* bc 12, CR6_LT, -32 */
		/* 821FC2E8h case   19:*/		if ( regs.CR[6].lt ) { return 0x821FC2C8;  }
		/* 821FC2E8h case   19:*/		return 0x821FC2EC;
	}
	return 0x821FC2EC;
} // Block from 821FC29Ch-821FC2ECh (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FC2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC2EC);
		  /* 821FC2ECh */ case    0:  		/* mr R5, R29 */
		/* 821FC2ECh case    0:*/		regs.R5 = regs.R29;
		/* 821FC2ECh case    0:*/		return 0x821FC2F0;
		  /* 821FC2F0h */ case    1:  		/* b -484 */
		/* 821FC2F0h case    1:*/		return 0x821FC10C;
		/* 821FC2F0h case    1:*/		return 0x821FC2F4;
	}
	return 0x821FC2F4;
} // Block from 821FC2ECh-821FC2F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC2F4);
		  /* 821FC2F4h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 821FC2F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821FC2F4h case    0:*/		return 0x821FC2F8;
		  /* 821FC2F8h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 821FC2F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FC2F8h case    1:*/		return 0x821FC2FC;
		  /* 821FC2FCh */ case    2:  		/* li R7, 0 */
		/* 821FC2FCh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FC2FCh case    2:*/		return 0x821FC300;
		  /* 821FC300h */ case    3:  		/* mr R6, R22 */
		/* 821FC300h case    3:*/		regs.R6 = regs.R22;
		/* 821FC300h case    3:*/		return 0x821FC304;
	}
	return 0x821FC304;
} // Block from 821FC2F4h-821FC304h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC304);
		  /* 821FC304h */ case    0:  		/* li R8, 0 */
		/* 821FC304h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821FC304h case    0:*/		return 0x821FC308;
	}
	return 0x821FC308;
} // Block from 821FC304h-821FC308h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC308);
		  /* 821FC308h */ case    0:  		/* mr R4, R26 */
		/* 821FC308h case    0:*/		regs.R4 = regs.R26;
		/* 821FC308h case    0:*/		return 0x821FC30C;
		  /* 821FC30Ch */ case    1:  		/* mr R3, R31 */
		/* 821FC30Ch case    1:*/		regs.R3 = regs.R31;
		/* 821FC30Ch case    1:*/		return 0x821FC310;
		  /* 821FC310h */ case    2:  		/* bl -15888 */
		/* 821FC310h case    2:*/		regs.LR = 0x821FC314; return 0x821F8500;
		/* 821FC310h case    2:*/		return 0x821FC314;
		  /* 821FC314h */ case    3:  		/* mr R14, R3 */
		/* 821FC314h case    3:*/		regs.R14 = regs.R3;
		/* 821FC314h case    3:*/		return 0x821FC318;
	}
	return 0x821FC318;
} // Block from 821FC308h-821FC318h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC318);
		  /* 821FC318h */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 821FC318h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821FC318h case    0:*/		return 0x821FC31C;
		  /* 821FC31Ch */ case    1:  		/* bc 4, CR6_EQ, -3892 */
		/* 821FC31Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FB3E8;  }
		/* 821FC31Ch case    1:*/		return 0x821FC320;
	}
	return 0x821FC320;
} // Block from 821FC318h-821FC320h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC320);
		  /* 821FC320h */ case    0:  		/* lwz R26, <#[R1 + 440]> */
		/* 821FC320h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000001B8) );
		/* 821FC320h case    0:*/		return 0x821FC324;
		  /* 821FC324h */ case    1:  		/* addi R11, R26, 4 */
		/* 821FC324h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x4);
		/* 821FC324h case    1:*/		return 0x821FC328;
		  /* 821FC328h */ case    2:  		/* lwz R11, <#[R26 + 4]> */
		/* 821FC328h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821FC328h case    2:*/		return 0x821FC32C;
		  /* 821FC32Ch */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821FC32Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821FC32Ch case    3:*/		return 0x821FC330;
		  /* 821FC330h */ case    4:  		/* bc 4, CR0_EQ, 32052 */
		/* 821FC330h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82204064;  }
		/* 821FC330h case    4:*/		return 0x821FC334;
		  /* 821FC334h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821FC334h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821FC334h case    5:*/		return 0x821FC338;
		  /* 821FC338h */ case    6:  		/* bc 12, CR0_EQ, 32044 */
		/* 821FC338h case    6:*/		if ( regs.CR[0].eq ) { return 0x82204064;  }
		/* 821FC338h case    6:*/		return 0x821FC33C;
		  /* 821FC33Ch */ case    7:  		/* addi R4, R1, 444 */
		/* 821FC33Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x1BC);
		/* 821FC33Ch case    7:*/		return 0x821FC340;
		  /* 821FC340h */ case    8:  		/* mr R3, R26 */
		/* 821FC340h case    8:*/		regs.R3 = regs.R26;
		/* 821FC340h case    8:*/		return 0x821FC344;
		  /* 821FC344h */ case    9:  		/* bl -31476 */
		/* 821FC344h case    9:*/		regs.LR = 0x821FC348; return 0x821F4850;
		/* 821FC344h case    9:*/		return 0x821FC348;
		  /* 821FC348h */ case   10:  		/* lwz R10, <#[R1 + 444]> */
		/* 821FC348h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001BC) );
		/* 821FC348h case   10:*/		return 0x821FC34C;
		  /* 821FC34Ch */ case   11:  		/* mr R14, R3 */
		/* 821FC34Ch case   11:*/		regs.R14 = regs.R3;
		/* 821FC34Ch case   11:*/		return 0x821FC350;
		  /* 821FC350h */ case   12:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821FC350h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821FC350h case   12:*/		return 0x821FC354;
		  /* 821FC354h */ case   13:  		/* rlwinm R22, R10, 31, 31, 31 */
		/* 821FC354h case   13:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R22,regs.R10);
		/* 821FC354h case   13:*/		return 0x821FC358;
		  /* 821FC358h */ case   14:  		/* bc 12, CR0_EQ, 31348 */
		/* 821FC358h case   14:*/		if ( regs.CR[0].eq ) { return 0x82203DCC;  }
		/* 821FC358h case   14:*/		return 0x821FC35C;
		  /* 821FC35Ch */ case   15:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FC35Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FC35Ch case   15:*/		return 0x821FC360;
		  /* 821FC360h */ case   16:  		/* cmpwi CR6, R11, 1 */
		/* 821FC360h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FC360h case   16:*/		return 0x821FC364;
		  /* 821FC364h */ case   17:  		/* bc 12, CR6_EQ, 31196 */
		/* 821FC364h case   17:*/		if ( regs.CR[6].eq ) { return 0x82203D40;  }
		/* 821FC364h case   17:*/		return 0x821FC368;
		  /* 821FC368h */ case   18:  		/* cmpwi CR6, R11, 12 */
		/* 821FC368h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 821FC368h case   18:*/		return 0x821FC36C;
		  /* 821FC36Ch */ case   19:  		/* bc 12, CR6_EQ, 31160 */
		/* 821FC36Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82203D24;  }
		/* 821FC36Ch case   19:*/		return 0x821FC370;
		  /* 821FC370h */ case   20:  		/* cmpwi CR6, R11, 14 */
		/* 821FC370h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821FC370h case   20:*/		return 0x821FC374;
		  /* 821FC374h */ case   21:  		/* bc 12, CR6_EQ, 5664 */
		/* 821FC374h case   21:*/		if ( regs.CR[6].eq ) { return 0x821FD994;  }
		/* 821FC374h case   21:*/		return 0x821FC378;
		  /* 821FC378h */ case   22:  		/* cmpwi CR6, R11, 27 */
		/* 821FC378h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 821FC378h case   22:*/		return 0x821FC37C;
		  /* 821FC37Ch */ case   23:  		/* bc 4, CR6_EQ, 32416 */
		/* 821FC37Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x8220421C;  }
		/* 821FC37Ch case   23:*/		return 0x821FC380;
		  /* 821FC380h */ case   24:  		/* lwz R11, <#[R3 + 88]> */
		/* 821FC380h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000058) );
		/* 821FC380h case   24:*/		return 0x821FC384;
		  /* 821FC384h */ case   25:  		/* cmpwi CR6, R11, 0 */
		/* 821FC384h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FC384h case   25:*/		return 0x821FC388;
		  /* 821FC388h */ case   26:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC388h case   26:*/		if ( regs.CR[6].eq ) { return 0x821FC398;  }
		/* 821FC388h case   26:*/		return 0x821FC38C;
		  /* 821FC38Ch */ case   27:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FC38Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FC38Ch case   27:*/		return 0x821FC390;
		  /* 821FC390h */ case   28:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FC390h case   28:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FC390h case   28:*/		return 0x821FC394;
		  /* 821FC394h */ case   29:  		/* bc 4, CR0_EQ, 32404 */
		/* 821FC394h case   29:*/		if ( !regs.CR[0].eq ) { return 0x82204228;  }
		/* 821FC394h case   29:*/		return 0x821FC398;
	}
	return 0x821FC398;
} // Block from 821FC320h-821FC398h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821FC398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC398);
		  /* 821FC398h */ case    0:  		/* lwz R11, <#[R14 + 100]> */
		/* 821FC398h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000064) );
		/* 821FC398h case    0:*/		return 0x821FC39C;
		  /* 821FC39Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FC39Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC39Ch case    1:*/		return 0x821FC3A0;
		  /* 821FC3A0h */ case    2:  		/* bc 4, CR6_EQ, 32412 */
		/* 821FC3A0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8220423C;  }
		/* 821FC3A0h case    2:*/		return 0x821FC3A4;
		  /* 821FC3A4h */ case    3:  		/* li R11, 2 */
		/* 821FC3A4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 821FC3A4h case    3:*/		return 0x821FC3A8;
		  /* 821FC3A8h */ case    4:  		/* li R9, 0 */
		/* 821FC3A8h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821FC3A8h case    4:*/		return 0x821FC3AC;
		  /* 821FC3ACh */ case    5:  		/* addi R10, R14, 92 */
		/* 821FC3ACh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R14,0x5C);
		/* 821FC3ACh case    5:*/		return 0x821FC3B0;
		  /* 821FC3B0h */ case    6:  		/* mtspr CTR, R11 */
		/* 821FC3B0h case    6:*/		regs.CTR = regs.R11;
		/* 821FC3B0h case    6:*/		return 0x821FC3B4;
		  /* 821FC3B4h */ case    7:  		/* lwz R11, <#[R10]> */
		/* 821FC3B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821FC3B4h case    7:*/		return 0x821FC3B8;
		  /* 821FC3B8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FC3B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC3B8h case    8:*/		return 0x821FC3BC;
		  /* 821FC3BCh */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 821FC3BCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821FC3C4;  }
		/* 821FC3BCh case    9:*/		return 0x821FC3C0;
		  /* 821FC3C0h */ case   10:  		/* addi R9, R9, 4 */
		/* 821FC3C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821FC3C0h case   10:*/		return 0x821FC3C4;
	}
	return 0x821FC3C4;
} // Block from 821FC398h-821FC3C4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FC3C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC3C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC3C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC3C4);
		  /* 821FC3C4h */ case    0:  		/* addi R10, R10, 4 */
		/* 821FC3C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821FC3C4h case    0:*/		return 0x821FC3C8;
		  /* 821FC3C8h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 821FC3C8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821FC3B4;  }
		/* 821FC3C8h case    1:*/		return 0x821FC3CC;
		  /* 821FC3CCh */ case    2:  		/* li R11, 4 */
		/* 821FC3CCh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821FC3CCh case    2:*/		return 0x821FC3D0;
		  /* 821FC3D0h */ case    3:  		/* addi R15, R14, 104 */
		/* 821FC3D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R14,0x68);
		/* 821FC3D0h case    3:*/		return 0x821FC3D4;
		  /* 821FC3D4h */ case    4:  		/* li R30, 0 */
		/* 821FC3D4h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FC3D4h case    4:*/		return 0x821FC3D8;
		  /* 821FC3D8h */ case    5:  		/* mr R10, R15 */
		/* 821FC3D8h case    5:*/		regs.R10 = regs.R15;
		/* 821FC3D8h case    5:*/		return 0x821FC3DC;
		  /* 821FC3DCh */ case    6:  		/* mtspr CTR, R11 */
		/* 821FC3DCh case    6:*/		regs.CTR = regs.R11;
		/* 821FC3DCh case    6:*/		return 0x821FC3E0;
		  /* 821FC3E0h */ case    7:  		/* lwz R11, <#[R10]> */
		/* 821FC3E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821FC3E0h case    7:*/		return 0x821FC3E4;
		  /* 821FC3E4h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FC3E4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC3E4h case    8:*/		return 0x821FC3E8;
		  /* 821FC3E8h */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 821FC3E8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821FC3F0;  }
		/* 821FC3E8h case    9:*/		return 0x821FC3EC;
		  /* 821FC3ECh */ case   10:  		/* addi R30, R30, 4 */
		/* 821FC3ECh case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821FC3ECh case   10:*/		return 0x821FC3F0;
	}
	return 0x821FC3F0;
} // Block from 821FC3C4h-821FC3F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FC3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC3F0);
		  /* 821FC3F0h */ case    0:  		/* addi R10, R10, 4 */
		/* 821FC3F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821FC3F0h case    0:*/		return 0x821FC3F4;
		  /* 821FC3F4h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 821FC3F4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821FC3E0;  }
		/* 821FC3F4h case    1:*/		return 0x821FC3F8;
		  /* 821FC3F8h */ case    2:  		/* lwz R29, <#[R1 + 3500]> */
		/* 821FC3F8h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FC3F8h case    2:*/		return 0x821FC3FC;
		  /* 821FC3FCh */ case    3:  		/* add R16, R30, R9 */
		/* 821FC3FCh case    3:*/		cpu::op::add<0>(regs,&regs.R16,regs.R30,regs.R9);
		/* 821FC3FCh case    3:*/		return 0x821FC400;
		  /* 821FC400h */ case    4:  		/* addi R3, R1, 1720 */
		/* 821FC400h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6B8);
		/* 821FC400h case    4:*/		return 0x821FC404;
		  /* 821FC404h */ case    5:  		/* mr R4, R29 */
		/* 821FC404h case    5:*/		regs.R4 = regs.R29;
		/* 821FC404h case    5:*/		return 0x821FC408;
		  /* 821FC408h */ case    6:  		/* mr R5, R16 */
		/* 821FC408h case    6:*/		regs.R5 = regs.R16;
		/* 821FC408h case    6:*/		return 0x821FC40C;
		  /* 821FC40Ch */ case    7:  		/* bl -24828 */
		/* 821FC40Ch case    7:*/		regs.LR = 0x821FC410; return 0x821F6310;
		/* 821FC40Ch case    7:*/		return 0x821FC410;
		  /* 821FC410h */ case    8:  		/* mr R5, R30 */
		/* 821FC410h case    8:*/		regs.R5 = regs.R30;
		/* 821FC410h case    8:*/		return 0x821FC414;
		  /* 821FC414h */ case    9:  		/* mr R4, R29 */
		/* 821FC414h case    9:*/		regs.R4 = regs.R29;
		/* 821FC414h case    9:*/		return 0x821FC418;
		  /* 821FC418h */ case   10:  		/* addi R3, R1, 2456 */
		/* 821FC418h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x998);
		/* 821FC418h case   10:*/		return 0x821FC41C;
		  /* 821FC41Ch */ case   11:  		/* bl -24844 */
		/* 821FC41Ch case   11:*/		regs.LR = 0x821FC420; return 0x821F6310;
		/* 821FC41Ch case   11:*/		return 0x821FC420;
		  /* 821FC420h */ case   12:  		/* li R17, 0 */
		/* 821FC420h case   12:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821FC420h case   12:*/		return 0x821FC424;
		  /* 821FC424h */ case   13:  		/* lwz R11, <#[R15]> */
		/* 821FC424h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821FC424h case   13:*/		return 0x821FC428;
		  /* 821FC428h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821FC428h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC428h case   14:*/		return 0x821FC42C;
		  /* 821FC42Ch */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC42Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821FC43C;  }
		/* 821FC42Ch case   15:*/		return 0x821FC430;
		  /* 821FC430h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FC430h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC430h case   16:*/		return 0x821FC434;
		  /* 821FC434h */ case   17:  		/* cmpwi CR6, R10, 28 */
		/* 821FC434h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000001C);
		/* 821FC434h case   17:*/		return 0x821FC438;
		  /* 821FC438h */ case   18:  		/* bc 4, CR6_EQ, 32280 */
		/* 821FC438h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82204250;  }
		/* 821FC438h case   18:*/		return 0x821FC43C;
	}
	return 0x821FC43C;
} // Block from 821FC3F0h-821FC43Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821FC43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC43C);
		  /* 821FC43Ch */ case    0:  		/* lwz R10, <#[R14 + 108]> */
		/* 821FC43Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x0000006C) );
		/* 821FC43Ch case    0:*/		return 0x821FC440;
		  /* 821FC440h */ case    1:  		/* mr R19, R11 */
		/* 821FC440h case    1:*/		regs.R19 = regs.R11;
		/* 821FC440h case    1:*/		return 0x821FC444;
		  /* 821FC444h */ case    2:  		/* stw R11, <#[R1 + 296]> */
		/* 821FC444h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000128) );
		/* 821FC444h case    2:*/		return 0x821FC448;
		  /* 821FC448h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821FC448h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FC448h case    3:*/		return 0x821FC44C;
		  /* 821FC44Ch */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC44Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821FC45C;  }
		/* 821FC44Ch case    4:*/		return 0x821FC450;
		  /* 821FC450h */ case    5:  		/* lwz R11, <#[R10 + 4]> */
		/* 821FC450h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821FC450h case    5:*/		return 0x821FC454;
		  /* 821FC454h */ case    6:  		/* cmpwi CR6, R11, 28 */
		/* 821FC454h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821FC454h case    6:*/		return 0x821FC458;
		  /* 821FC458h */ case    7:  		/* bc 4, CR6_EQ, 32260 */
		/* 821FC458h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8220425C;  }
		/* 821FC458h case    7:*/		return 0x821FC45C;
	}
	return 0x821FC45C;
} // Block from 821FC43Ch-821FC45Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FC45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC45C);
		  /* 821FC45Ch */ case    0:  		/* lwz R11, <#[R14 + 112]> */
		/* 821FC45Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000070) );
		/* 821FC45Ch case    0:*/		return 0x821FC460;
		  /* 821FC460h */ case    1:  		/* mr R20, R10 */
		/* 821FC460h case    1:*/		regs.R20 = regs.R10;
		/* 821FC460h case    1:*/		return 0x821FC464;
		  /* 821FC464h */ case    2:  		/* stw R10, <#[R1 + 300]> */
		/* 821FC464h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000012C) );
		/* 821FC464h case    2:*/		return 0x821FC468;
		  /* 821FC468h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821FC468h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC468h case    3:*/		return 0x821FC46C;
		  /* 821FC46Ch */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC46Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821FC47C;  }
		/* 821FC46Ch case    4:*/		return 0x821FC470;
		  /* 821FC470h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FC470h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC470h case    5:*/		return 0x821FC474;
		  /* 821FC474h */ case    6:  		/* cmpwi CR6, R10, 28 */
		/* 821FC474h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000001C);
		/* 821FC474h case    6:*/		return 0x821FC478;
		  /* 821FC478h */ case    7:  		/* bc 4, CR6_EQ, 32240 */
		/* 821FC478h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82204268;  }
		/* 821FC478h case    7:*/		return 0x821FC47C;
	}
	return 0x821FC47C;
} // Block from 821FC45Ch-821FC47Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FC47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC47C);
		  /* 821FC47Ch */ case    0:  		/* lwz R9, <#[R14 + 56]> */
		/* 821FC47Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000038) );
		/* 821FC47Ch case    0:*/		return 0x821FC480;
		  /* 821FC480h */ case    1:  		/* stw R11, <#[R1 + 304]> */
		/* 821FC480h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000130) );
		/* 821FC480h case    1:*/		return 0x821FC484;
		  /* 821FC484h */ case    2:  		/* cmpwi CR6, R9, 4 */
		/* 821FC484h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000004);
		/* 821FC484h case    2:*/		return 0x821FC488;
		  /* 821FC488h */ case    3:  		/* bc 4, CR6_EQ, 68 */
		/* 821FC488h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FC4CC;  }
		/* 821FC488h case    3:*/		return 0x821FC48C;
		  /* 821FC48Ch */ case    4:  		/* cmplwi CR6, R17, 0 */
		/* 821FC48Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821FC48Ch case    4:*/		return 0x821FC490;
		  /* 821FC490h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 821FC490h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC4C4;  }
		/* 821FC490h case    5:*/		return 0x821FC494;
		  /* 821FC494h */ case    6:  		/* lwz R10, <#[R14 + 116]> */
		/* 821FC494h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000074) );
		/* 821FC494h case    6:*/		return 0x821FC498;
		  /* 821FC498h */ case    7:  		/* mr R19, R11 */
		/* 821FC498h case    7:*/		regs.R19 = regs.R11;
		/* 821FC498h case    7:*/		return 0x821FC49C;
		  /* 821FC49Ch */ case    8:  		/* li R9, 3 */
		/* 821FC49Ch case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821FC49Ch case    8:*/		return 0x821FC4A0;
		  /* 821FC4A0h */ case    9:  		/* stw R11, <#[R1 + 296]> */
		/* 821FC4A0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000128) );
		/* 821FC4A0h case    9:*/		return 0x821FC4A4;
		  /* 821FC4A4h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 821FC4A4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FC4A4h case   10:*/		return 0x821FC4A8;
		  /* 821FC4A8h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 821FC4A8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821FC4B8;  }
		/* 821FC4A8h case   11:*/		return 0x821FC4AC;
		  /* 821FC4ACh */ case   12:  		/* lwz R11, <#[R10 + 4]> */
		/* 821FC4ACh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821FC4ACh case   12:*/		return 0x821FC4B0;
		  /* 821FC4B0h */ case   13:  		/* cmpwi CR6, R11, 28 */
		/* 821FC4B0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821FC4B0h case   13:*/		return 0x821FC4B4;
		  /* 821FC4B4h */ case   14:  		/* bc 4, CR6_EQ, 32192 */
		/* 821FC4B4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82204274;  }
		/* 821FC4B4h case   14:*/		return 0x821FC4B8;
	}
	return 0x821FC4B8;
} // Block from 821FC47Ch-821FC4B8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FC4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC4B8);
		  /* 821FC4B8h */ case    0:  		/* mr R20, R10 */
		/* 821FC4B8h case    0:*/		regs.R20 = regs.R10;
		/* 821FC4B8h case    0:*/		return 0x821FC4BC;
		  /* 821FC4BCh */ case    1:  		/* stw R10, <#[R1 + 300]> */
		/* 821FC4BCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000012C) );
		/* 821FC4BCh case    1:*/		return 0x821FC4C0;
		  /* 821FC4C0h */ case    2:  		/* b 40 */
		/* 821FC4C0h case    2:*/		return 0x821FC4E8;
		/* 821FC4C0h case    2:*/		return 0x821FC4C4;
	}
	return 0x821FC4C4;
} // Block from 821FC4B8h-821FC4C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FC4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC4C4);
		  /* 821FC4C4h */ case    0:  		/* li R9, 2 */
		/* 821FC4C4h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 821FC4C4h case    0:*/		return 0x821FC4C8;
		  /* 821FC4C8h */ case    1:  		/* b 32 */
		/* 821FC4C8h case    1:*/		return 0x821FC4E8;
		/* 821FC4C8h case    1:*/		return 0x821FC4CC;
	}
	return 0x821FC4CC;
} // Block from 821FC4C4h-821FC4CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC4CC);
		  /* 821FC4CCh */ case    0:  		/* cmpwi CR6, R9, 3 */
		/* 821FC4CCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000003);
		/* 821FC4CCh case    0:*/		return 0x821FC4D0;
		  /* 821FC4D0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821FC4D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FC4E0;  }
		/* 821FC4D0h case    1:*/		return 0x821FC4D4;
		  /* 821FC4D4h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 821FC4D4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821FC4D4h case    2:*/		return 0x821FC4D8;
		  /* 821FC4D8h */ case    3:  		/* bc 12, CR6_EQ, 5268 */
		/* 821FC4D8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FD96C;  }
		/* 821FC4D8h case    3:*/		return 0x821FC4DC;
		  /* 821FC4DCh */ case    4:  		/* b 12 */
		/* 821FC4DCh case    4:*/		return 0x821FC4E8;
		/* 821FC4DCh case    4:*/		return 0x821FC4E0;
	}
	return 0x821FC4E0;
} // Block from 821FC4CCh-821FC4E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FC4E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC4E0);
		  /* 821FC4E0h */ case    0:  		/* cmplwi CR6, R17, 0 */
		/* 821FC4E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821FC4E0h case    0:*/		return 0x821FC4E4;
		  /* 821FC4E4h */ case    1:  		/* bc 4, CR6_EQ, 5268 */
		/* 821FC4E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FD978;  }
		/* 821FC4E4h case    1:*/		return 0x821FC4E8;
	}
	return 0x821FC4E8;
} // Block from 821FC4E0h-821FC4E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC4E8);
		  /* 821FC4E8h */ case    0:  		/* addi R11, R17, 23 */
		/* 821FC4E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x17);
		/* 821FC4E8h case    0:*/		return 0x821FC4EC;
		  /* 821FC4ECh */ case    1:  		/* li R21, 0 */
		/* 821FC4ECh case    1:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821FC4ECh case    1:*/		return 0x821FC4F0;
		  /* 821FC4F0h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821FC4F0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821FC4F0h case    2:*/		return 0x821FC4F4;
		  /* 821FC4F4h */ case    3:  		/* li R18, 0 */
		/* 821FC4F4h case    3:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821FC4F4h case    3:*/		return 0x821FC4F8;
		  /* 821FC4F8h */ case    4:  		/* lwzx R10, <#[R11 + R14]> */
		/* 821FC4F8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R14 + 0x00000000) );
		/* 821FC4F8h case    4:*/		return 0x821FC4FC;
		  /* 821FC4FCh */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821FC4FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FC4FCh case    5:*/		return 0x821FC500;
		  /* 821FC500h */ case    6:  		/* bc 12, CR6_EQ, 44 */
		/* 821FC500h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FC52C;  }
		/* 821FC500h case    6:*/		return 0x821FC504;
		  /* 821FC504h */ case    7:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 821FC504h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 821FC504h case    7:*/		return 0x821FC508;
		  /* 821FC508h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FC508h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC508h case    8:*/		return 0x821FC50C;
		  /* 821FC50Ch */ case    9:  		/* bc 12, CR6_EQ, 32116 */
		/* 821FC50Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82204280;  }
		/* 821FC50Ch case    9:*/		return 0x821FC510;
		  /* 821FC510h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FC510h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FC510h case   10:*/		return 0x821FC514;
		  /* 821FC514h */ case   11:  		/* cmpwi CR6, R10, 28 */
		/* 821FC514h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000001C);
		/* 821FC514h case   11:*/		return 0x821FC518;
		  /* 821FC518h */ case   12:  		/* bc 4, CR6_EQ, 32104 */
		/* 821FC518h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82204280;  }
		/* 821FC518h case   12:*/		return 0x821FC51C;
		  /* 821FC51Ch */ case   13:  		/* li R25, 4 */
		/* 821FC51Ch case   13:*/		cpu::op::li<0>(regs,&regs.R25,0x4);
		/* 821FC51Ch case   13:*/		return 0x821FC520;
		  /* 821FC520h */ case   14:  		/* mr R18, R11 */
		/* 821FC520h case   14:*/		regs.R18 = regs.R11;
		/* 821FC520h case   14:*/		return 0x821FC524;
		  /* 821FC524h */ case   15:  		/* mr R21, R25 */
		/* 821FC524h case   15:*/		regs.R21 = regs.R25;
		/* 821FC524h case   15:*/		return 0x821FC528;
		  /* 821FC528h */ case   16:  		/* b 8 */
		/* 821FC528h case   16:*/		return 0x821FC530;
		/* 821FC528h case   16:*/		return 0x821FC52C;
	}
	return 0x821FC52C;
} // Block from 821FC4E8h-821FC52Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821FC52Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC52C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC52C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC52C);
		  /* 821FC52Ch */ case    0:  		/* li R25, 4 */
		/* 821FC52Ch case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x4);
		/* 821FC52Ch case    0:*/		return 0x821FC530;
	}
	return 0x821FC530;
} // Block from 821FC52Ch-821FC530h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC530);
		  /* 821FC530h */ case    0:  		/* li R23, 0 */
		/* 821FC530h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821FC530h case    0:*/		return 0x821FC534;
		  /* 821FC534h */ case    1:  		/* li R27, 0 */
		/* 821FC534h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821FC534h case    1:*/		return 0x821FC538;
		  /* 821FC538h */ case    2:  		/* li R26, 0 */
		/* 821FC538h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821FC538h case    2:*/		return 0x821FC53C;
		  /* 821FC53Ch */ case    3:  		/* li R30, 0 */
		/* 821FC53Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FC53Ch case    3:*/		return 0x821FC540;
		  /* 821FC540h */ case    4:  		/* cmplwi CR6, R9, 1 */
		/* 821FC540h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 821FC540h case    4:*/		return 0x821FC544;
		  /* 821FC544h */ case    5:  		/* bc 12, CR6_LT, 596 */
		/* 821FC544h case    5:*/		if ( regs.CR[6].lt ) { return 0x821FC798;  }
		/* 821FC544h case    5:*/		return 0x821FC548;
		  /* 821FC548h */ case    6:  		/* bc 12, CR6_EQ, 544 */
		/* 821FC548h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FC768;  }
		/* 821FC548h case    6:*/		return 0x821FC54C;
		  /* 821FC54Ch */ case    7:  		/* cmplwi CR6, R9, 3 */
		/* 821FC54Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 821FC54Ch case    7:*/		return 0x821FC550;
		  /* 821FC550h */ case    8:  		/* bc 12, CR6_LT, 384 */
		/* 821FC550h case    8:*/		if ( regs.CR[6].lt ) { return 0x821FC6D0;  }
		/* 821FC550h case    8:*/		return 0x821FC554;
		  /* 821FC554h */ case    9:  		/* bc 12, CR6_EQ, 224 */
		/* 821FC554h case    9:*/		if ( regs.CR[6].eq ) { return 0x821FC634;  }
		/* 821FC554h case    9:*/		return 0x821FC558;
		  /* 821FC558h */ case   10:  		/* cmplwi CR6, R9, 5 */
		/* 821FC558h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 821FC558h case   10:*/		return 0x821FC55C;
		  /* 821FC55Ch */ case   11:  		/* bc 4, CR6_EQ, 32200 */
		/* 821FC55Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x82204324;  }
		/* 821FC55Ch case   11:*/		return 0x821FC560;
		  /* 821FC560h */ case   12:  		/* addi R11, R17, 15 */
		/* 821FC560h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0xF);
		/* 821FC560h case   12:*/		return 0x821FC564;
		  /* 821FC564h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821FC564h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821FC564h case   13:*/		return 0x821FC568;
		  /* 821FC568h */ case   14:  		/* lwzx R11, <#[R11 + R14]> */
		/* 821FC568h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R14 + 0x00000000) );
		/* 821FC568h case   14:*/		return 0x821FC56C;
		  /* 821FC56Ch */ case   15:  		/* cmplwi CR6, R11, 12 */
		/* 821FC56Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 821FC56Ch case   15:*/		return 0x821FC570;
		  /* 821FC570h */ case   16:  		/* bc 4, CR6_EQ, 32028 */
		/* 821FC570h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8220428C;  }
		/* 821FC570h case   16:*/		return 0x821FC574;
		  /* 821FC574h */ case   17:  		/* cmplwi CR6, R18, 0 */
		/* 821FC574h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821FC574h case   17:*/		return 0x821FC578;
		  /* 821FC578h */ case   18:  		/* bc 4, CR6_EQ, 32032 */
		/* 821FC578h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82204298;  }
		/* 821FC578h case   18:*/		return 0x821FC57C;
		  /* 821FC57Ch */ case   19:  		/* lwz R11, <#[R14 + 120]> */
		/* 821FC57Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000078) );
		/* 821FC57Ch case   19:*/		return 0x821FC580;
		  /* 821FC580h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821FC580h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC580h case   20:*/		return 0x821FC584;
		  /* 821FC584h */ case   21:  		/* bc 12, CR6_EQ, 32032 */
		/* 821FC584h case   21:*/		if ( regs.CR[6].eq ) { return 0x822042A4;  }
		/* 821FC584h case   21:*/		return 0x821FC588;
		  /* 821FC588h */ case   22:  		/* lwz R28, <#[R11 + 8]> */
		/* 821FC588h case   22:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 821FC588h case   22:*/		return 0x821FC58C;
		  /* 821FC58Ch */ case   23:  		/* cmplwi CR6, R28, 0 */
		/* 821FC58Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FC58Ch case   23:*/		return 0x821FC590;
		  /* 821FC590h */ case   24:  		/* bc 12, CR6_EQ, 32032 */
		/* 821FC590h case   24:*/		if ( regs.CR[6].eq ) { return 0x822042B0;  }
		/* 821FC590h case   24:*/		return 0x821FC594;
		  /* 821FC594h */ case   25:  		/* lwz R11, <#[R11 + 12]> */
		/* 821FC594h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FC594h case   25:*/		return 0x821FC598;
		  /* 821FC598h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 821FC598h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC598h case   26:*/		return 0x821FC59C;
		  /* 821FC59Ch */ case   27:  		/* bc 4, CR6_EQ, 32032 */
		/* 821FC59Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x822042BC;  }
		/* 821FC59Ch case   27:*/		return 0x821FC5A0;
		  /* 821FC5A0h */ case   28:  		/* lwz R29, <#[R28 + 8]> */
		/* 821FC5A0h case   28:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000008) );
		/* 821FC5A0h case   28:*/		return 0x821FC5A4;
		  /* 821FC5A4h */ case   29:  		/* cmplwi CR6, R29, 0 */
		/* 821FC5A4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FC5A4h case   29:*/		return 0x821FC5A8;
		  /* 821FC5A8h */ case   30:  		/* bc 12, CR6_EQ, 32064 */
		/* 821FC5A8h case   30:*/		if ( regs.CR[6].eq ) { return 0x822042E8;  }
		/* 821FC5A8h case   30:*/		return 0x821FC5AC;
		  /* 821FC5ACh */ case   31:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FC5ACh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FC5ACh case   31:*/		return 0x821FC5B0;
		  /* 821FC5B0h */ case   32:  		/* cmpwi CR6, R11, 3 */
		/* 821FC5B0h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821FC5B0h case   32:*/		return 0x821FC5B4;
		  /* 821FC5B4h */ case   33:  		/* bc 4, CR6_EQ, 32052 */
		/* 821FC5B4h case   33:*/		if ( !regs.CR[6].eq ) { return 0x822042E8;  }
		/* 821FC5B4h case   33:*/		return 0x821FC5B8;
		  /* 821FC5B8h */ case   34:  		/* lwz R11, <#[R29 + 16]> */
		/* 821FC5B8h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821FC5B8h case   34:*/		return 0x821FC5BC;
		  /* 821FC5BCh */ case   35:  		/* cmpwi CR6, R11, 11 */
		/* 821FC5BCh case   35:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 821FC5BCh case   35:*/		return 0x821FC5C0;
		  /* 821FC5C0h */ case   36:  		/* bc 4, CR6_EQ, 32016 */
		/* 821FC5C0h case   36:*/		if ( !regs.CR[6].eq ) { return 0x822042D0;  }
		/* 821FC5C0h case   36:*/		return 0x821FC5C4;
		  /* 821FC5C4h */ case   37:  		/* lwz R4, <#[R1 + 480]> */
		/* 821FC5C4h case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001E0) );
		/* 821FC5C4h case   37:*/		return 0x821FC5C8;
		  /* 821FC5C8h */ case   38:  		/* lwz R3, <#[R29 + 24]> */
		/* 821FC5C8h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000018) );
		/* 821FC5C8h case   38:*/		return 0x821FC5CC;
		  /* 821FC5CCh */ case   39:  		/* bl -1479068 */
		/* 821FC5CCh case   39:*/		regs.LR = 0x821FC5D0; return 0x82093430;
		/* 821FC5CCh case   39:*/		return 0x821FC5D0;
		  /* 821FC5D0h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 821FC5D0h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821FC5D0h case   40:*/		return 0x821FC5D4;
		  /* 821FC5D4h */ case   41:  		/* bc 12, CR0_EQ, 72 */
		/* 821FC5D4h case   41:*/		if ( regs.CR[0].eq ) { return 0x821FC61C;  }
		/* 821FC5D4h case   41:*/		return 0x821FC5D8;
		  /* 821FC5D8h */ case   42:  		/* lwz R4, <#[R1 + 496]> */
		/* 821FC5D8h case   42:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001F0) );
		/* 821FC5D8h case   42:*/		return 0x821FC5DC;
		  /* 821FC5DCh */ case   43:  		/* lwz R3, <#[R29 + 24]> */
		/* 821FC5DCh case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000018) );
		/* 821FC5DCh case   43:*/		return 0x821FC5E0;
		  /* 821FC5E0h */ case   44:  		/* bl -1479088 */
		/* 821FC5E0h case   44:*/		regs.LR = 0x821FC5E4; return 0x82093430;
		/* 821FC5E0h case   44:*/		return 0x821FC5E4;
		  /* 821FC5E4h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 821FC5E4h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821FC5E4h case   45:*/		return 0x821FC5E8;
		  /* 821FC5E8h */ case   46:  		/* bc 12, CR0_EQ, 52 */
		/* 821FC5E8h case   46:*/		if ( regs.CR[0].eq ) { return 0x821FC61C;  }
		/* 821FC5E8h case   46:*/		return 0x821FC5EC;
		  /* 821FC5ECh */ case   47:  		/* lwz R4, <#[R1 + 512]> */
		/* 821FC5ECh case   47:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000200) );
		/* 821FC5ECh case   47:*/		return 0x821FC5F0;
		  /* 821FC5F0h */ case   48:  		/* lwz R3, <#[R29 + 24]> */
		/* 821FC5F0h case   48:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000018) );
		/* 821FC5F0h case   48:*/		return 0x821FC5F4;
		  /* 821FC5F4h */ case   49:  		/* bl -1479108 */
		/* 821FC5F4h case   49:*/		regs.LR = 0x821FC5F8; return 0x82093430;
		/* 821FC5F4h case   49:*/		return 0x821FC5F8;
		  /* 821FC5F8h */ case   50:  		/* cmpwi CR0, R3, 0 */
		/* 821FC5F8h case   50:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821FC5F8h case   50:*/		return 0x821FC5FC;
		  /* 821FC5FCh */ case   51:  		/* bc 12, CR0_EQ, 32 */
		/* 821FC5FCh case   51:*/		if ( regs.CR[0].eq ) { return 0x821FC61C;  }
		/* 821FC5FCh case   51:*/		return 0x821FC600;
		  /* 821FC600h */ case   52:  		/* lwz R4, <#[R1 + 528]> */
		/* 821FC600h case   52:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000210) );
		/* 821FC600h case   52:*/		return 0x821FC604;
		  /* 821FC604h */ case   53:  		/* lwz R3, <#[R29 + 24]> */
		/* 821FC604h case   53:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000018) );
		/* 821FC604h case   53:*/		return 0x821FC608;
		  /* 821FC608h */ case   54:  		/* bl -1479128 */
		/* 821FC608h case   54:*/		regs.LR = 0x821FC60C; return 0x82093430;
		/* 821FC608h case   54:*/		return 0x821FC60C;
		  /* 821FC60Ch */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 821FC60Ch case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821FC60Ch case   55:*/		return 0x821FC610;
		  /* 821FC610h */ case   56:  		/* bc 4, CR0_EQ, 31948 */
		/* 821FC610h case   56:*/		if ( !regs.CR[0].eq ) { return 0x822042DC;  }
		/* 821FC610h case   56:*/		return 0x821FC614;
		  /* 821FC614h */ case   57:  		/* li R6, 94 */
		/* 821FC614h case   57:*/		cpu::op::li<0>(regs,&regs.R6,0x5E);
		/* 821FC614h case   57:*/		return 0x821FC618;
		  /* 821FC618h */ case   58:  		/* b 540 */
		/* 821FC618h case   58:*/		return 0x821FC834;
		/* 821FC618h case   58:*/		return 0x821FC61C;
	}
	return 0x821FC61C;
} // Block from 821FC530h-821FC61Ch (59 instructions)

//////////////////////////////////////////////////////
// Block at 821FC61Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC61C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC61C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC61C);
		  /* 821FC61Ch */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821FC61Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821FC61Ch case    0:*/		return 0x821FC620;
		  /* 821FC620h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FC620h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FC620h case    1:*/		return 0x821FC624;
		  /* 821FC624h */ case    2:  		/* bc 12, CR6_EQ, 4936 */
		/* 821FC624h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FD96C;  }
		/* 821FC624h case    2:*/		return 0x821FC628;
		  /* 821FC628h */ case    3:  		/* li R4, 4801 */
		/* 821FC628h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FC628h case    3:*/		return 0x821FC62C;
		  /* 821FC62Ch */ case    4:  		/* mr R3, R31 */
		/* 821FC62Ch case    4:*/		regs.R3 = regs.R31;
		/* 821FC62Ch case    4:*/		return 0x821FC630;
		  /* 821FC630h */ case    5:  		/* bl -698312 */
		/* 821FC630h case    5:*/		regs.LR = 0x821FC634; return 0x82151E68;
		/* 821FC630h case    5:*/		return 0x821FC634;
	}
	return 0x821FC634;
} // Block from 821FC61Ch-821FC634h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FC634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC634);
		  /* 821FC634h */ case    0:  		/* addi R11, R17, 15 */
		/* 821FC634h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0xF);
		/* 821FC634h case    0:*/		return 0x821FC638;
		  /* 821FC638h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821FC638h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821FC638h case    1:*/		return 0x821FC63C;
		  /* 821FC63Ch */ case    2:  		/* lwzx R11, <#[R11 + R14]> */
		/* 821FC63Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R14 + 0x00000000) );
		/* 821FC63Ch case    2:*/		return 0x821FC640;
		  /* 821FC640h */ case    3:  		/* cmplwi CR6, R11, 241 */
		/* 821FC640h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F1);
		/* 821FC640h case    3:*/		return 0x821FC644;
		  /* 821FC644h */ case    4:  		/* bc 12, CR6_EQ, 4904 */
		/* 821FC644h case    4:*/		if ( regs.CR[6].eq ) { return 0x821FD96C;  }
		/* 821FC644h case    4:*/		return 0x821FC648;
		  /* 821FC648h */ case    5:  		/* cmplwi CR6, R11, 243 */
		/* 821FC648h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F3);
		/* 821FC648h case    5:*/		return 0x821FC64C;
		  /* 821FC64Ch */ case    6:  		/* bc 12, CR6_EQ, 120 */
		/* 821FC64Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821FC6C4;  }
		/* 821FC64Ch case    6:*/		return 0x821FC650;
		  /* 821FC650h */ case    7:  		/* cmplwi CR6, R11, 252 */
		/* 821FC650h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000FC);
		/* 821FC650h case    7:*/		return 0x821FC654;
		  /* 821FC654h */ case    8:  		/* bc 12, CR6_EQ, 96 */
		/* 821FC654h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FC6B4;  }
		/* 821FC654h case    8:*/		return 0x821FC658;
		  /* 821FC658h */ case    9:  		/* cmplwi CR6, R11, 253 */
		/* 821FC658h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000FD);
		/* 821FC658h case    9:*/		return 0x821FC65C;
		  /* 821FC65Ch */ case   10:  		/* bc 12, CR6_EQ, 72 */
		/* 821FC65Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821FC6A4;  }
		/* 821FC65Ch case   10:*/		return 0x821FC660;
		  /* 821FC660h */ case   11:  		/* addi R6, R11, 32 */
		/* 821FC660h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x20);
		/* 821FC660h case   11:*/		return 0x821FC664;
		  /* 821FC664h */ case   12:  		/* cmpwi CR6, R6, 32 */
		/* 821FC664h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000020);
		/* 821FC664h case   12:*/		return 0x821FC668;
		  /* 821FC668h */ case   13:  		/* bc 12, CR6_LT, 31884 */
		/* 821FC668h case   13:*/		if ( regs.CR[6].lt ) { return 0x822042F4;  }
		/* 821FC668h case   13:*/		return 0x821FC66C;
		  /* 821FC66Ch */ case   14:  		/* cmpwi CR6, R6, 82 */
		/* 821FC66Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000052);
		/* 821FC66Ch case   14:*/		return 0x821FC670;
		  /* 821FC670h */ case   15:  		/* bc 12, CR6_GT, 31876 */
		/* 821FC670h case   15:*/		if ( regs.CR[6].gt ) { return 0x822042F4;  }
		/* 821FC670h case   15:*/		return 0x821FC674;
		  /* 821FC674h */ case   16:  		/* cmpwi CR6, R6, 73 */
		/* 821FC674h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000049);
		/* 821FC674h case   16:*/		return 0x821FC678;
		  /* 821FC678h */ case   17:  		/* bc 12, CR6_EQ, 31868 */
		/* 821FC678h case   17:*/		if ( regs.CR[6].eq ) { return 0x822042F4;  }
		/* 821FC678h case   17:*/		return 0x821FC67C;
		  /* 821FC67Ch */ case   18:  		/* cmpwi CR6, R6, 65 */
		/* 821FC67Ch case   18:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000041);
		/* 821FC67Ch case   18:*/		return 0x821FC680;
		  /* 821FC680h */ case   19:  		/* bc 12, CR6_EQ, 28 */
		/* 821FC680h case   19:*/		if ( regs.CR[6].eq ) { return 0x821FC69C;  }
		/* 821FC680h case   19:*/		return 0x821FC684;
		  /* 821FC684h */ case   20:  		/* cmpwi CR6, R6, 73 */
		/* 821FC684h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000049);
		/* 821FC684h case   20:*/		return 0x821FC688;
		  /* 821FC688h */ case   21:  		/* bc 4, CR6_GT, 416 */
		/* 821FC688h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821FC828;  }
		/* 821FC688h case   21:*/		return 0x821FC68C;
		  /* 821FC68Ch */ case   22:  		/* cmpwi CR6, R6, 79 */
		/* 821FC68Ch case   22:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x0000004F);
		/* 821FC68Ch case   22:*/		return 0x821FC690;
		  /* 821FC690h */ case   23:  		/* bc 4, CR6_GT, 160 */
		/* 821FC690h case   23:*/		if ( !regs.CR[6].gt ) { return 0x821FC730;  }
		/* 821FC690h case   23:*/		return 0x821FC694;
		  /* 821FC694h */ case   24:  		/* cmpwi CR6, R6, 82 */
		/* 821FC694h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000052);
		/* 821FC694h case   24:*/		return 0x821FC698;
		  /* 821FC698h */ case   25:  		/* bc 4, CR6_EQ, 400 */
		/* 821FC698h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821FC828;  }
		/* 821FC698h case   25:*/		return 0x821FC69C;
	}
	return 0x821FC69C;
} // Block from 821FC634h-821FC69Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 821FC69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC69C);
		  /* 821FC69Ch */ case    0:  		/* li R30, 0 */
		/* 821FC69Ch case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FC69Ch case    0:*/		return 0x821FC6A0;
		  /* 821FC6A0h */ case    1:  		/* b 396 */
		/* 821FC6A0h case    1:*/		return 0x821FC82C;
		/* 821FC6A0h case    1:*/		return 0x821FC6A4;
	}
	return 0x821FC6A4;
} // Block from 821FC69Ch-821FC6A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC6A4);
		  /* 821FC6A4h */ case    0:  		/* li R23, 1 */
		/* 821FC6A4h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FC6A4h case    0:*/		return 0x821FC6A8;
		  /* 821FC6A8h */ case    1:  		/* li R30, 1 */
		/* 821FC6A8h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821FC6A8h case    1:*/		return 0x821FC6AC;
		  /* 821FC6ACh */ case    2:  		/* li R6, 56 */
		/* 821FC6ACh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x38);
		/* 821FC6ACh case    2:*/		return 0x821FC6B0;
		  /* 821FC6B0h */ case    3:  		/* b 388 */
		/* 821FC6B0h case    3:*/		return 0x821FC834;
		/* 821FC6B0h case    3:*/		return 0x821FC6B4;
	}
	return 0x821FC6B4;
} // Block from 821FC6A4h-821FC6B4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC6B4);
		  /* 821FC6B4h */ case    0:  		/* li R23, 1 */
		/* 821FC6B4h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FC6B4h case    0:*/		return 0x821FC6B8;
		  /* 821FC6B8h */ case    1:  		/* li R30, 1 */
		/* 821FC6B8h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821FC6B8h case    1:*/		return 0x821FC6BC;
		  /* 821FC6BCh */ case    2:  		/* li R6, 55 */
		/* 821FC6BCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x37);
		/* 821FC6BCh case    2:*/		return 0x821FC6C0;
		  /* 821FC6C0h */ case    3:  		/* b 372 */
		/* 821FC6C0h case    3:*/		return 0x821FC834;
		/* 821FC6C0h case    3:*/		return 0x821FC6C4;
	}
	return 0x821FC6C4;
} // Block from 821FC6B4h-821FC6C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC6C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC6C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC6C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC6C4);
		  /* 821FC6C4h */ case    0:  		/* li R23, 1 */
		/* 821FC6C4h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FC6C4h case    0:*/		return 0x821FC6C8;
		  /* 821FC6C8h */ case    1:  		/* li R6, 37 */
		/* 821FC6C8h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x25);
		/* 821FC6C8h case    1:*/		return 0x821FC6CC;
		  /* 821FC6CCh */ case    2:  		/* b 348 */
		/* 821FC6CCh case    2:*/		return 0x821FC828;
		/* 821FC6CCh case    2:*/		return 0x821FC6D0;
	}
	return 0x821FC6D0;
} // Block from 821FC6C4h-821FC6D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FC6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC6D0);
		  /* 821FC6D0h */ case    0:  		/* addi R11, R17, 15 */
		/* 821FC6D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0xF);
		/* 821FC6D0h case    0:*/		return 0x821FC6D4;
		  /* 821FC6D4h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821FC6D4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821FC6D4h case    1:*/		return 0x821FC6D8;
		  /* 821FC6D8h */ case    2:  		/* lwzx R11, <#[R11 + R14]> */
		/* 821FC6D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R14 + 0x00000000) );
		/* 821FC6D8h case    2:*/		return 0x821FC6DC;
		  /* 821FC6DCh */ case    3:  		/* cmplwi CR6, R11, 240 */
		/* 821FC6DCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F0);
		/* 821FC6DCh case    3:*/		return 0x821FC6E0;
		  /* 821FC6E0h */ case    4:  		/* bc 12, CR6_EQ, 4748 */
		/* 821FC6E0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821FD96C;  }
		/* 821FC6E0h case    4:*/		return 0x821FC6E4;
		  /* 821FC6E4h */ case    5:  		/* cmplwi CR6, R11, 242 */
		/* 821FC6E4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F2);
		/* 821FC6E4h case    5:*/		return 0x821FC6E8;
		  /* 821FC6E8h */ case    6:  		/* bc 12, CR6_EQ, 108 */
		/* 821FC6E8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FC754;  }
		/* 821FC6E8h case    6:*/		return 0x821FC6EC;
		  /* 821FC6ECh */ case    7:  		/* cmplwi CR6, R11, 244 */
		/* 821FC6ECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000F4);
		/* 821FC6ECh case    7:*/		return 0x821FC6F0;
		  /* 821FC6F0h */ case    8:  		/* bc 12, CR6_EQ, 80 */
		/* 821FC6F0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FC740;  }
		/* 821FC6F0h case    8:*/		return 0x821FC6F4;
		  /* 821FC6F4h */ case    9:  		/* addi R6, R11, 1 */
		/* 821FC6F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1);
		/* 821FC6F4h case    9:*/		return 0x821FC6F8;
		  /* 821FC6F8h */ case   10:  		/* cmpwi CR6, R6, 1 */
		/* 821FC6F8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000001);
		/* 821FC6F8h case   10:*/		return 0x821FC6FC;
		  /* 821FC6FCh */ case   11:  		/* bc 12, CR6_LT, 31748 */
		/* 821FC6FCh case   11:*/		if ( regs.CR[6].lt ) { return 0x82204300;  }
		/* 821FC6FCh case   11:*/		return 0x821FC700;
		  /* 821FC700h */ case   12:  		/* cmpwi CR6, R6, 31 */
		/* 821FC700h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x0000001F);
		/* 821FC700h case   12:*/		return 0x821FC704;
		  /* 821FC704h */ case   13:  		/* bc 12, CR6_GT, 31740 */
		/* 821FC704h case   13:*/		if ( regs.CR[6].gt ) { return 0x82204300;  }
		/* 821FC704h case   13:*/		return 0x821FC708;
		  /* 821FC708h */ case   14:  		/* cmpwi CR6, R6, 9 */
		/* 821FC708h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000009);
		/* 821FC708h case   14:*/		return 0x821FC70C;
		  /* 821FC70Ch */ case   15:  		/* bc 12, CR6_LT, 36 */
		/* 821FC70Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x821FC730;  }
		/* 821FC70Ch case   15:*/		return 0x821FC710;
		  /* 821FC710h */ case   16:  		/* cmpwi CR6, R6, 11 */
		/* 821FC710h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x0000000B);
		/* 821FC710h case   16:*/		return 0x821FC714;
		  /* 821FC714h */ case   17:  		/* bc 4, CR6_GT, 276 */
		/* 821FC714h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821FC828;  }
		/* 821FC714h case   17:*/		return 0x821FC718;
		  /* 821FC718h */ case   18:  		/* cmpwi CR6, R6, 15 */
		/* 821FC718h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x0000000F);
		/* 821FC718h case   18:*/		return 0x821FC71C;
		  /* 821FC71Ch */ case   19:  		/* bc 4, CR6_GT, 28 */
		/* 821FC71Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x821FC738;  }
		/* 821FC71Ch case   19:*/		return 0x821FC720;
		  /* 821FC720h */ case   20:  		/* cmpwi CR6, R6, 18 */
		/* 821FC720h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000012);
		/* 821FC720h case   20:*/		return 0x821FC724;
		  /* 821FC724h */ case   21:  		/* bc 12, CR6_EQ, 20 */
		/* 821FC724h case   21:*/		if ( regs.CR[6].eq ) { return 0x821FC738;  }
		/* 821FC724h case   21:*/		return 0x821FC728;
		  /* 821FC728h */ case   22:  		/* cmpwi CR6, R6, 20 */
		/* 821FC728h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000014);
		/* 821FC728h case   22:*/		return 0x821FC72C;
		  /* 821FC72Ch */ case   23:  		/* bc 12, CR6_EQ, 252 */
		/* 821FC72Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821FC828;  }
		/* 821FC72Ch case   23:*/		return 0x821FC730;
	}
	return 0x821FC730;
} // Block from 821FC6D0h-821FC730h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821FC730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC730);
		  /* 821FC730h */ case    0:  		/* li R30, 2 */
		/* 821FC730h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 821FC730h case    0:*/		return 0x821FC734;
		  /* 821FC734h */ case    1:  		/* b 248 */
		/* 821FC734h case    1:*/		return 0x821FC82C;
		/* 821FC734h case    1:*/		return 0x821FC738;
	}
	return 0x821FC738;
} // Block from 821FC730h-821FC738h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC738);
		  /* 821FC738h */ case    0:  		/* li R30, 3 */
		/* 821FC738h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x3);
		/* 821FC738h case    0:*/		return 0x821FC73C;
		  /* 821FC73Ch */ case    1:  		/* b 240 */
		/* 821FC73Ch case    1:*/		return 0x821FC82C;
		/* 821FC73Ch case    1:*/		return 0x821FC740;
	}
	return 0x821FC740;
} // Block from 821FC738h-821FC740h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC740);
		  /* 821FC740h */ case    0:  		/* li R23, 1 */
		/* 821FC740h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FC740h case    0:*/		return 0x821FC744;
		  /* 821FC744h */ case    1:  		/* li R30, 2 */
		/* 821FC744h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 821FC744h case    1:*/		return 0x821FC748;
		  /* 821FC748h */ case    2:  		/* li R27, -1 */
		/* 821FC748h case    2:*/		cpu::op::li<0>(regs,&regs.R27,0xFFFFFFFF);
		/* 821FC748h case    2:*/		return 0x821FC74C;
		  /* 821FC74Ch */ case    3:  		/* li R6, 30 */
		/* 821FC74Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1E);
		/* 821FC74Ch case    3:*/		return 0x821FC750;
		  /* 821FC750h */ case    4:  		/* b 228 */
		/* 821FC750h case    4:*/		return 0x821FC834;
		/* 821FC750h case    4:*/		return 0x821FC754;
	}
	return 0x821FC754;
} // Block from 821FC740h-821FC754h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FC754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC754);
		  /* 821FC754h */ case    0:  		/* li R23, 1 */
		/* 821FC754h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FC754h case    0:*/		return 0x821FC758;
		  /* 821FC758h */ case    1:  		/* li R30, 2 */
		/* 821FC758h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 821FC758h case    1:*/		return 0x821FC75C;
		  /* 821FC75Ch */ case    2:  		/* li R27, -1 */
		/* 821FC75Ch case    2:*/		cpu::op::li<0>(regs,&regs.R27,0xFFFFFFFF);
		/* 821FC75Ch case    2:*/		return 0x821FC760;
		  /* 821FC760h */ case    3:  		/* li R6, 3 */
		/* 821FC760h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821FC760h case    3:*/		return 0x821FC764;
		  /* 821FC764h */ case    4:  		/* b 200 */
		/* 821FC764h case    4:*/		return 0x821FC82C;
		/* 821FC764h case    4:*/		return 0x821FC768;
	}
	return 0x821FC768;
} // Block from 821FC754h-821FC768h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FC768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC768);
		  /* 821FC768h */ case    0:  		/* lwz R11, <#[R14 + 60]> */
		/* 821FC768h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000003C) );
		/* 821FC768h case    0:*/		return 0x821FC76C;
		  /* 821FC76Ch */ case    1:  		/* li R6, 96 */
		/* 821FC76Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x60);
		/* 821FC76Ch case    1:*/		return 0x821FC770;
		  /* 821FC770h */ case    2:  		/* li R26, 1 */
		/* 821FC770h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821FC770h case    2:*/		return 0x821FC774;
		  /* 821FC774h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 821FC774h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821FC774h case    3:*/		return 0x821FC778;
		  /* 821FC778h */ case    4:  		/* bc 12, CR6_LT, 24 */
		/* 821FC778h case    4:*/		if ( regs.CR[6].lt ) { return 0x821FC790;  }
		/* 821FC778h case    4:*/		return 0x821FC77C;
		  /* 821FC77Ch */ case    5:  		/* bc 12, CR6_EQ, 184 */
		/* 821FC77Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC834;  }
		/* 821FC77Ch case    5:*/		return 0x821FC780;
		  /* 821FC780h */ case    6:  		/* cmplwi CR6, R11, 3 */
		/* 821FC780h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821FC780h case    6:*/		return 0x821FC784;
		  /* 821FC784h */ case    7:  		/* bc 4, CR6_LT, 31624 */
		/* 821FC784h case    7:*/		if ( !regs.CR[6].lt ) { return 0x8220430C;  }
		/* 821FC784h case    7:*/		return 0x821FC788;
		  /* 821FC788h */ case    8:  		/* li R30, 2 */
		/* 821FC788h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 821FC788h case    8:*/		return 0x821FC78C;
		  /* 821FC78Ch */ case    9:  		/* b 168 */
		/* 821FC78Ch case    9:*/		return 0x821FC834;
		/* 821FC78Ch case    9:*/		return 0x821FC790;
	}
	return 0x821FC790;
} // Block from 821FC768h-821FC790h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821FC790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC790);
		  /* 821FC790h */ case    0:  		/* li R30, 1 */
		/* 821FC790h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821FC790h case    0:*/		return 0x821FC794;
		  /* 821FC794h */ case    1:  		/* b 160 */
		/* 821FC794h case    1:*/		return 0x821FC834;
		/* 821FC794h case    1:*/		return 0x821FC798;
	}
	return 0x821FC798;
} // Block from 821FC790h-821FC798h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC798);
		  /* 821FC798h */ case    0:  		/* addi R11, R17, 15 */
		/* 821FC798h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0xF);
		/* 821FC798h case    0:*/		return 0x821FC79C;
		  /* 821FC79Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821FC79Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821FC79Ch case    1:*/		return 0x821FC7A0;
		  /* 821FC7A0h */ case    2:  		/* lwzx R11, <#[R11 + R14]> */
		/* 821FC7A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R14 + 0x00000000) );
		/* 821FC7A0h case    2:*/		return 0x821FC7A4;
		  /* 821FC7A4h */ case    3:  		/* cmplwi CR6, R11, 19 */
		/* 821FC7A4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 821FC7A4h case    3:*/		return 0x821FC7A8;
		  /* 821FC7A8h */ case    4:  		/* bc 12, CR6_GT, 68 */
		/* 821FC7A8h case    4:*/		if ( regs.CR[6].gt ) { return 0x821FC7EC;  }
		/* 821FC7A8h case    4:*/		return 0x821FC7AC;
		  /* 821FC7ACh */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 821FC7ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC7E4;  }
		/* 821FC7ACh case    5:*/		return 0x821FC7B0;
		  /* 821FC7B0h */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 821FC7B0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821FC7B0h case    6:*/		return 0x821FC7B4;
		  /* 821FC7B4h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 821FC7B4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821FC7DC;  }
		/* 821FC7B4h case    7:*/		return 0x821FC7B8;
		  /* 821FC7B8h */ case    8:  		/* cmplwi CR6, R11, 15 */
		/* 821FC7B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 821FC7B8h case    8:*/		return 0x821FC7BC;
		  /* 821FC7BCh */ case    9:  		/* bc 4, CR6_GT, 31580 */
		/* 821FC7BCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x82204318;  }
		/* 821FC7BCh case    9:*/		return 0x821FC7C0;
		  /* 821FC7C0h */ case   10:  		/* cmplwi CR6, R11, 17 */
		/* 821FC7C0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 821FC7C0h case   10:*/		return 0x821FC7C4;
		  /* 821FC7C4h */ case   11:  		/* bc 4, CR6_GT, 32 */
		/* 821FC7C4h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821FC7E4;  }
		/* 821FC7C4h case   11:*/		return 0x821FC7C8;
		  /* 821FC7C8h */ case   12:  		/* cmplwi CR6, R11, 18 */
		/* 821FC7C8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 821FC7C8h case   12:*/		return 0x821FC7CC;
		  /* 821FC7CCh */ case   13:  		/* bc 4, CR6_EQ, 31564 */
		/* 821FC7CCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x82204318;  }
		/* 821FC7CCh case   13:*/		return 0x821FC7D0;
		  /* 821FC7D0h */ case   14:  		/* li R6, 100 */
		/* 821FC7D0h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x64);
		/* 821FC7D0h case   14:*/		return 0x821FC7D4;
		  /* 821FC7D4h */ case   15:  		/* li R26, 1 */
		/* 821FC7D4h case   15:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821FC7D4h case   15:*/		return 0x821FC7D8;
		  /* 821FC7D8h */ case   16:  		/* b -80 */
		/* 821FC7D8h case   16:*/		return 0x821FC788;
		/* 821FC7D8h case   16:*/		return 0x821FC7DC;
	}
	return 0x821FC7DC;
} // Block from 821FC798h-821FC7DCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821FC7DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC7DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC7DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC7DC);
		  /* 821FC7DCh */ case    0:  		/* li R6, 97 */
		/* 821FC7DCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x61);
		/* 821FC7DCh case    0:*/		return 0x821FC7E0;
		  /* 821FC7E0h */ case    1:  		/* b -12 */
		/* 821FC7E0h case    1:*/		return 0x821FC7D4;
		/* 821FC7E0h case    1:*/		return 0x821FC7E4;
	}
	return 0x821FC7E4;
} // Block from 821FC7DCh-821FC7E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC7E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC7E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC7E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC7E4);
		  /* 821FC7E4h */ case    0:  		/* li R6, 99 */
		/* 821FC7E4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x63);
		/* 821FC7E4h case    0:*/		return 0x821FC7E8;
		  /* 821FC7E8h */ case    1:  		/* b -20 */
		/* 821FC7E8h case    1:*/		return 0x821FC7D4;
		/* 821FC7E8h case    1:*/		return 0x821FC7EC;
	}
	return 0x821FC7EC;
} // Block from 821FC7E4h-821FC7ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC7ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC7EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC7EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC7EC);
		  /* 821FC7ECh */ case    0:  		/* cmplwi CR6, R11, 24 */
		/* 821FC7ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 821FC7ECh case    0:*/		return 0x821FC7F0;
		  /* 821FC7F0h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821FC7F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC824;  }
		/* 821FC7F0h case    1:*/		return 0x821FC7F4;
		  /* 821FC7F4h */ case    2:  		/* cmplwi CR6, R11, 25 */
		/* 821FC7F4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000019);
		/* 821FC7F4h case    2:*/		return 0x821FC7F8;
		  /* 821FC7F8h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 821FC7F8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FC81C;  }
		/* 821FC7F8h case    3:*/		return 0x821FC7FC;
		  /* 821FC7FCh */ case    4:  		/* cmplwi CR6, R11, 26 */
		/* 821FC7FCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001A);
		/* 821FC7FCh case    4:*/		return 0x821FC800;
		  /* 821FC800h */ case    5:  		/* bc 4, CR6_EQ, 31512 */
		/* 821FC800h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82204318;  }
		/* 821FC800h case    5:*/		return 0x821FC804;
		  /* 821FC804h */ case    6:  		/* li R6, 102 */
		/* 821FC804h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x66);
		/* 821FC804h case    6:*/		return 0x821FC808;
		  /* 821FC808h */ case    7:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FC808h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FC808h case    7:*/		return 0x821FC80C;
		  /* 821FC80Ch */ case    8:  		/* li R30, 1 */
		/* 821FC80Ch case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821FC80Ch case    8:*/		return 0x821FC810;
		  /* 821FC810h */ case    9:  		/* oris R11, R11, 64 */
		/* 821FC810h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821FC810h case    9:*/		return 0x821FC814;
		  /* 821FC814h */ case   10:  		/* stw R11, <#[R31 + 40]> */
		/* 821FC814h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FC814h case   10:*/		return 0x821FC818;
		  /* 821FC818h */ case   11:  		/* b 28 */
		/* 821FC818h case   11:*/		return 0x821FC834;
		/* 821FC818h case   11:*/		return 0x821FC81C;
	}
	return 0x821FC81C;
} // Block from 821FC7ECh-821FC81Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FC81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC81C);
		  /* 821FC81Ch */ case    0:  		/* li R6, 101 */
		/* 821FC81Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x65);
		/* 821FC81Ch case    0:*/		return 0x821FC820;
		  /* 821FC820h */ case    1:  		/* b -24 */
		/* 821FC820h case    1:*/		return 0x821FC808;
		/* 821FC820h case    1:*/		return 0x821FC824;
	}
	return 0x821FC824;
} // Block from 821FC81Ch-821FC824h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC824);
		  /* 821FC824h */ case    0:  		/* li R6, 98 */
		/* 821FC824h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x62);
		/* 821FC824h case    0:*/		return 0x821FC828;
	}
	return 0x821FC828;
} // Block from 821FC824h-821FC828h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC828);
		  /* 821FC828h */ case    0:  		/* li R30, 1 */
		/* 821FC828h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821FC828h case    0:*/		return 0x821FC82C;
	}
	return 0x821FC82C;
} // Block from 821FC828h-821FC82Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC82Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC82C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC82C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC82C);
		  /* 821FC82Ch */ case    0:  		/* cmpwi CR6, R6, 0 */
		/* 821FC82Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 821FC82Ch case    0:*/		return 0x821FC830;
		  /* 821FC830h */ case    1:  		/* bc 12, CR6_EQ, 31476 */
		/* 821FC830h case    1:*/		if ( regs.CR[6].eq ) { return 0x82204324;  }
		/* 821FC830h case    1:*/		return 0x821FC834;
	}
	return 0x821FC834;
} // Block from 821FC82Ch-821FC834h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC834);
		  /* 821FC834h */ case    0:  		/* li R11, 228 */
		/* 821FC834h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xE4);
		/* 821FC834h case    0:*/		return 0x821FC838;
		  /* 821FC838h */ case    1:  		/* stw R25, <#[R1 + 128]> */
		/* 821FC838h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000080) );
		/* 821FC838h case    1:*/		return 0x821FC83C;
		  /* 821FC83Ch */ case    2:  		/* stw R25, <#[R1 + 132]> */
		/* 821FC83Ch case    2:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000084) );
		/* 821FC83Ch case    2:*/		return 0x821FC840;
		  /* 821FC840h */ case    3:  		/* cmpwi CR6, R6, 38 */
		/* 821FC840h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000026);
		/* 821FC840h case    3:*/		return 0x821FC844;
		  /* 821FC844h */ case    4:  		/* stw R25, <#[R1 + 136]> */
		/* 821FC844h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000088) );
		/* 821FC844h case    4:*/		return 0x821FC848;
		  /* 821FC848h */ case    5:  		/* stw R11, <#[R1 + 352]> */
		/* 821FC848h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000160) );
		/* 821FC848h case    5:*/		return 0x821FC84C;
		  /* 821FC84Ch */ case    6:  		/* stw R11, <#[R1 + 356]> */
		/* 821FC84Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000164) );
		/* 821FC84Ch case    6:*/		return 0x821FC850;
		  /* 821FC850h */ case    7:  		/* stw R11, <#[R1 + 360]> */
		/* 821FC850h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000168) );
		/* 821FC850h case    7:*/		return 0x821FC854;
		  /* 821FC854h */ case    8:  		/* bc 12, CR6_GT, 152 */
		/* 821FC854h case    8:*/		if ( regs.CR[6].gt ) { return 0x821FC8EC;  }
		/* 821FC854h case    8:*/		return 0x821FC858;
		  /* 821FC858h */ case    9:  		/* cmpwi CR6, R6, 37 */
		/* 821FC858h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000025);
		/* 821FC858h case    9:*/		return 0x821FC85C;
		  /* 821FC85Ch */ case   10:  		/* bc 4, CR6_LT, 200 */
		/* 821FC85Ch case   10:*/		if ( !regs.CR[6].lt ) { return 0x821FC924;  }
		/* 821FC85Ch case   10:*/		return 0x821FC860;
		  /* 821FC860h */ case   11:  		/* cmpwi CR6, R6, 33 */
		/* 821FC860h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000021);
		/* 821FC860h case   11:*/		return 0x821FC864;
		  /* 821FC864h */ case   12:  		/* bc 12, CR6_GT, 92 */
		/* 821FC864h case   12:*/		if ( regs.CR[6].gt ) { return 0x821FC8C0;  }
		/* 821FC864h case   12:*/		return 0x821FC868;
		  /* 821FC868h */ case   13:  		/* bc 12, CR6_EQ, 212 */
		/* 821FC868h case   13:*/		if ( regs.CR[6].eq ) { return 0x821FC93C;  }
		/* 821FC868h case   13:*/		return 0x821FC86C;
		  /* 821FC86Ch */ case   14:  		/* cmpwi CR6, R6, 17 */
		/* 821FC86Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000011);
		/* 821FC86Ch case   14:*/		return 0x821FC870;
		  /* 821FC870h */ case   15:  		/* bc 12, CR6_EQ, 64 */
		/* 821FC870h case   15:*/		if ( regs.CR[6].eq ) { return 0x821FC8B0;  }
		/* 821FC870h case   15:*/		return 0x821FC874;
		  /* 821FC874h */ case   16:  		/* cmpwi CR6, R6, 18 */
		/* 821FC874h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000012);
		/* 821FC874h case   16:*/		return 0x821FC878;
		  /* 821FC878h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 821FC878h case   17:*/		if ( regs.CR[6].eq ) { return 0x821FC898;  }
		/* 821FC878h case   17:*/		return 0x821FC87C;
		  /* 821FC87Ch */ case   18:  		/* cmpwi CR6, R6, 20 */
		/* 821FC87Ch case   18:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000014);
		/* 821FC87Ch case   18:*/		return 0x821FC880;
		  /* 821FC880h */ case   19:  		/* bc 4, CR6_GT, 200 */
		/* 821FC880h case   19:*/		if ( !regs.CR[6].gt ) { return 0x821FC948;  }
		/* 821FC880h case   19:*/		return 0x821FC884;
		  /* 821FC884h */ case   20:  		/* cmpwi CR6, R6, 24 */
		/* 821FC884h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000018);
		/* 821FC884h case   20:*/		return 0x821FC888;
		  /* 821FC888h */ case   21:  		/* bc 4, CR6_GT, 316 */
		/* 821FC888h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821FC9C4;  }
		/* 821FC888h case   21:*/		return 0x821FC88C;
		  /* 821FC88Ch */ case   22:  		/* cmpwi CR6, R6, 32 */
		/* 821FC88Ch case   22:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000020);
		/* 821FC88Ch case   22:*/		return 0x821FC890;
		  /* 821FC890h */ case   23:  		/* bc 12, CR6_EQ, 148 */
		/* 821FC890h case   23:*/		if ( regs.CR[6].eq ) { return 0x821FC924;  }
		/* 821FC890h case   23:*/		return 0x821FC894;
		  /* 821FC894h */ case   24:  		/* b 180 */
		/* 821FC894h case   24:*/		return 0x821FC948;
		/* 821FC894h case   24:*/		return 0x821FC898;
	}
	return 0x821FC898;
} // Block from 821FC834h-821FC898h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821FC898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC898);
		  /* 821FC898h */ case    0:  		/* li R11, 2 */
		/* 821FC898h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 821FC898h case    0:*/		return 0x821FC89C;
		  /* 821FC89Ch */ case    1:  		/* li R10, 1 */
		/* 821FC89Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821FC89Ch case    1:*/		return 0x821FC8A0;
		  /* 821FC8A0h */ case    2:  		/* stw R11, <#[R1 + 128]> */
		/* 821FC8A0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821FC8A0h case    2:*/		return 0x821FC8A4;
		  /* 821FC8A4h */ case    3:  		/* stw R11, <#[R1 + 132]> */
		/* 821FC8A4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821FC8A4h case    3:*/		return 0x821FC8A8;
		  /* 821FC8A8h */ case    4:  		/* stw R10, <#[R1 + 136]> */
		/* 821FC8A8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 821FC8A8h case    4:*/		return 0x821FC8AC;
		  /* 821FC8ACh */ case    5:  		/* b 156 */
		/* 821FC8ACh case    5:*/		return 0x821FC948;
		/* 821FC8ACh case    5:*/		return 0x821FC8B0;
	}
	return 0x821FC8B0;
} // Block from 821FC898h-821FC8B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FC8B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC8B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC8B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC8B0);
		  /* 821FC8B0h */ case    0:  		/* li R11, 3 */
		/* 821FC8B0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821FC8B0h case    0:*/		return 0x821FC8B4;
		  /* 821FC8B4h */ case    1:  		/* stw R11, <#[R1 + 128]> */
		/* 821FC8B4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821FC8B4h case    1:*/		return 0x821FC8B8;
		  /* 821FC8B8h */ case    2:  		/* stw R11, <#[R1 + 132]> */
		/* 821FC8B8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821FC8B8h case    2:*/		return 0x821FC8BC;
		  /* 821FC8BCh */ case    3:  		/* b 140 */
		/* 821FC8BCh case    3:*/		return 0x821FC948;
		/* 821FC8BCh case    3:*/		return 0x821FC8C0;
	}
	return 0x821FC8C0;
} // Block from 821FC8B0h-821FC8C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC8C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC8C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC8C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC8C0);
		  /* 821FC8C0h */ case    0:  		/* cmpwi CR6, R6, 34 */
		/* 821FC8C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000022);
		/* 821FC8C0h case    0:*/		return 0x821FC8C4;
		  /* 821FC8C4h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 821FC8C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC924;  }
		/* 821FC8C4h case    1:*/		return 0x821FC8C8;
		  /* 821FC8C8h */ case    2:  		/* cmpwi CR6, R6, 35 */
		/* 821FC8C8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000023);
		/* 821FC8C8h case    2:*/		return 0x821FC8CC;
		  /* 821FC8CCh */ case    3:  		/* bc 12, CR6_EQ, 112 */
		/* 821FC8CCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821FC93C;  }
		/* 821FC8CCh case    3:*/		return 0x821FC8D0;
		  /* 821FC8D0h */ case    4:  		/* cmpwi CR6, R6, 36 */
		/* 821FC8D0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000024);
		/* 821FC8D0h case    4:*/		return 0x821FC8D4;
		  /* 821FC8D4h */ case    5:  		/* bc 4, CR6_EQ, 116 */
		/* 821FC8D4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FC948;  }
		/* 821FC8D4h case    5:*/		return 0x821FC8D8;
		  /* 821FC8D8h */ case    6:  		/* lis R11, -32252 */
		/* 821FC8D8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821FC8D8h case    6:*/		return 0x821FC8DC;
		  /* 821FC8DCh */ case    7:  		/* li R4, 3500 */
		/* 821FC8DCh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821FC8DCh case    7:*/		return 0x821FC8E0;
		  /* 821FC8E0h */ case    8:  		/* addi R5, R11, -12988 */
		/* 821FC8E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCD44);
		/* 821FC8E0h case    8:*/		return 0x821FC8E4;
		  /* 821FC8E4h */ case    9:  		/* mr R3, R31 */
		/* 821FC8E4h case    9:*/		regs.R3 = regs.R31;
		/* 821FC8E4h case    9:*/		return 0x821FC8E8;
		  /* 821FC8E8h */ case   10:  		/* bl -699008 */
		/* 821FC8E8h case   10:*/		regs.LR = 0x821FC8EC; return 0x82151E68;
		/* 821FC8E8h case   10:*/		return 0x821FC8EC;
	}
	return 0x821FC8EC;
} // Block from 821FC8C0h-821FC8ECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FC8ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC8EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC8EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC8EC);
		  /* 821FC8ECh */ case    0:  		/* cmpwi CR6, R6, 79 */
		/* 821FC8ECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x0000004F);
		/* 821FC8ECh case    0:*/		return 0x821FC8F0;
		  /* 821FC8F0h */ case    1:  		/* bc 12, CR6_GT, 180 */
		/* 821FC8F0h case    1:*/		if ( regs.CR[6].gt ) { return 0x821FC9A4;  }
		/* 821FC8F0h case    1:*/		return 0x821FC8F4;
		  /* 821FC8F4h */ case    2:  		/* cmpwi CR6, R6, 74 */
		/* 821FC8F4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x0000004A);
		/* 821FC8F4h case    2:*/		return 0x821FC8F8;
		  /* 821FC8F8h */ case    3:  		/* bc 4, CR6_LT, 156 */
		/* 821FC8F8h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821FC994;  }
		/* 821FC8F8h case    3:*/		return 0x821FC8FC;
		  /* 821FC8FCh */ case    4:  		/* cmpwi CR6, R6, 64 */
		/* 821FC8FCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000040);
		/* 821FC8FCh case    4:*/		return 0x821FC900;
		  /* 821FC900h */ case    5:  		/* bc 12, CR6_GT, 44 */
		/* 821FC900h case    5:*/		if ( regs.CR[6].gt ) { return 0x821FC92C;  }
		/* 821FC900h case    5:*/		return 0x821FC904;
		  /* 821FC904h */ case    6:  		/* cmpwi CR6, R6, 58 */
		/* 821FC904h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x0000003A);
		/* 821FC904h case    6:*/		return 0x821FC908;
		  /* 821FC908h */ case    7:  		/* bc 4, CR6_LT, 52 */
		/* 821FC908h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821FC93C;  }
		/* 821FC908h case    7:*/		return 0x821FC90C;
		  /* 821FC90Ch */ case    8:  		/* cmpwi CR6, R6, 39 */
		/* 821FC90Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000027);
		/* 821FC90Ch case    8:*/		return 0x821FC910;
		  /* 821FC910h */ case    9:  		/* bc 12, CR6_LT, 56 */
		/* 821FC910h case    9:*/		if ( regs.CR[6].lt ) { return 0x821FC948;  }
		/* 821FC910h case    9:*/		return 0x821FC914;
		  /* 821FC914h */ case   10:  		/* cmpwi CR6, R6, 54 */
		/* 821FC914h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000036);
		/* 821FC914h case   10:*/		return 0x821FC918;
		  /* 821FC918h */ case   11:  		/* bc 4, CR6_GT, 36 */
		/* 821FC918h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821FC93C;  }
		/* 821FC918h case   11:*/		return 0x821FC91C;
		  /* 821FC91Ch */ case   12:  		/* cmpwi CR6, R6, 57 */
		/* 821FC91Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000039);
		/* 821FC91Ch case   12:*/		return 0x821FC920;
		  /* 821FC920h */ case   13:  		/* bc 12, CR6_GT, 40 */
		/* 821FC920h case   13:*/		if ( regs.CR[6].gt ) { return 0x821FC948;  }
		/* 821FC920h case   13:*/		return 0x821FC924;
	}
	return 0x821FC924;
} // Block from 821FC8ECh-821FC924h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821FC924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC924);
		  /* 821FC924h */ case    0:  		/* li R10, 2 */
		/* 821FC924h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821FC924h case    0:*/		return 0x821FC928;
		  /* 821FC928h */ case    1:  		/* b 24 */
		/* 821FC928h case    1:*/		return 0x821FC940;
		/* 821FC928h case    1:*/		return 0x821FC92C;
	}
	return 0x821FC92C;
} // Block from 821FC924h-821FC92Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC92C);
		  /* 821FC92Ch */ case    0:  		/* cmpwi CR6, R6, 66 */
		/* 821FC92Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000042);
		/* 821FC92Ch case    0:*/		return 0x821FC930;
		  /* 821FC930h */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 821FC930h case    1:*/		if ( regs.CR[6].lt ) { return 0x821FC948;  }
		/* 821FC930h case    1:*/		return 0x821FC934;
		  /* 821FC934h */ case    2:  		/* cmpwi CR6, R6, 72 */
		/* 821FC934h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000048);
		/* 821FC934h case    2:*/		return 0x821FC938;
		  /* 821FC938h */ case    3:  		/* bc 12, CR6_GT, 16 */
		/* 821FC938h case    3:*/		if ( regs.CR[6].gt ) { return 0x821FC948;  }
		/* 821FC938h case    3:*/		return 0x821FC93C;
	}
	return 0x821FC93C;
} // Block from 821FC92Ch-821FC93Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC93C);
		  /* 821FC93Ch */ case    0:  		/* li R10, 1 */
		/* 821FC93Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821FC93Ch case    0:*/		return 0x821FC940;
	}
	return 0x821FC940;
} // Block from 821FC93Ch-821FC940h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC940);
		  /* 821FC940h */ case    0:  		/* stw R11, <#[R1 + 352]> */
		/* 821FC940h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000160) );
		/* 821FC940h case    0:*/		return 0x821FC944;
		  /* 821FC944h */ case    1:  		/* stw R10, <#[R1 + 128]> */
		/* 821FC944h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821FC944h case    1:*/		return 0x821FC948;
	}
	return 0x821FC948;
} // Block from 821FC940h-821FC948h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC948);
		  /* 821FC948h */ case    0:  		/* li R8, 4 */
		/* 821FC948h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821FC948h case    0:*/		return 0x821FC94C;
		  /* 821FC94Ch */ case    1:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FC94Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FC94Ch case    1:*/		return 0x821FC950;
		  /* 821FC950h */ case    2:  		/* mr R7, R30 */
		/* 821FC950h case    2:*/		regs.R7 = regs.R30;
		/* 821FC950h case    2:*/		return 0x821FC954;
		  /* 821FC954h */ case    3:  		/* li R5, 0 */
		/* 821FC954h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FC954h case    3:*/		return 0x821FC958;
		  /* 821FC958h */ case    4:  		/* mr R3, R31 */
		/* 821FC958h case    4:*/		regs.R3 = regs.R31;
		/* 821FC958h case    4:*/		return 0x821FC95C;
		  /* 821FC95Ch */ case    5:  		/* add R25, R30, R27 */
		/* 821FC95Ch case    5:*/		cpu::op::add<0>(regs,&regs.R25,regs.R30,regs.R27);
		/* 821FC95Ch case    5:*/		return 0x821FC960;
		  /* 821FC960h */ case    6:  		/* bl 163896 */
		/* 821FC960h case    6:*/		regs.LR = 0x821FC964; return 0x82224998;
		/* 821FC960h case    6:*/		return 0x821FC964;
		  /* 821FC964h */ case    7:  		/* lwz R11, <#[R3 + 20]> */
		/* 821FC964h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 821FC964h case    7:*/		return 0x821FC968;
		  /* 821FC968h */ case    8:  		/* mr R24, R3 */
		/* 821FC968h case    8:*/		regs.R24 = regs.R3;
		/* 821FC968h case    8:*/		return 0x821FC96C;
		  /* 821FC96Ch */ case    9:  		/* ori R11, R11, 1 */
		/* 821FC96Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FC96Ch case    9:*/		return 0x821FC970;
		  /* 821FC970h */ case   10:  		/* li R22, 0 */
		/* 821FC970h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821FC970h case   10:*/		return 0x821FC974;
		  /* 821FC974h */ case   11:  		/* cmplwi CR6, R18, 0 */
		/* 821FC974h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821FC974h case   11:*/		return 0x821FC978;
		  /* 821FC978h */ case   12:  		/* stw R11, <#[R3 + 20]> */
		/* 821FC978h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 821FC978h case   12:*/		return 0x821FC97C;
		  /* 821FC97Ch */ case   13:  		/* bc 12, CR6_EQ, 80 */
		/* 821FC97Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821FC9CC;  }
		/* 821FC97Ch case   13:*/		return 0x821FC980;
		  /* 821FC980h */ case   14:  		/* mr R4, R18 */
		/* 821FC980h case   14:*/		regs.R4 = regs.R18;
		/* 821FC980h case   14:*/		return 0x821FC984;
		  /* 821FC984h */ case   15:  		/* mr R3, R31 */
		/* 821FC984h case   15:*/		regs.R3 = regs.R31;
		/* 821FC984h case   15:*/		return 0x821FC988;
		  /* 821FC988h */ case   16:  		/* bl -62768 */
		/* 821FC988h case   16:*/		regs.LR = 0x821FC98C; return 0x821ED458;
		/* 821FC988h case   16:*/		return 0x821FC98C;
		  /* 821FC98Ch */ case   17:  		/* mr R27, R3 */
		/* 821FC98Ch case   17:*/		regs.R27 = regs.R3;
		/* 821FC98Ch case   17:*/		return 0x821FC990;
		  /* 821FC990h */ case   18:  		/* b 64 */
		/* 821FC990h case   18:*/		return 0x821FC9D0;
		/* 821FC990h case   18:*/		return 0x821FC994;
	}
	return 0x821FC994;
} // Block from 821FC948h-821FC994h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821FC994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC994);
		  /* 821FC994h */ case    0:  		/* li R10, 1 */
		/* 821FC994h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821FC994h case    0:*/		return 0x821FC998;
		  /* 821FC998h */ case    1:  		/* stw R11, <#[R1 + 356]> */
		/* 821FC998h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000164) );
		/* 821FC998h case    1:*/		return 0x821FC99C;
		  /* 821FC99Ch */ case    2:  		/* stw R10, <#[R1 + 132]> */
		/* 821FC99Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 821FC99Ch case    2:*/		return 0x821FC9A0;
		  /* 821FC9A0h */ case    3:  		/* b -96 */
		/* 821FC9A0h case    3:*/		return 0x821FC940;
		/* 821FC9A0h case    3:*/		return 0x821FC9A4;
	}
	return 0x821FC9A4;
} // Block from 821FC994h-821FC9A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FC9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC9A4);
		  /* 821FC9A4h */ case    0:  		/* cmpwi CR6, R6, 80 */
		/* 821FC9A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000050);
		/* 821FC9A4h case    0:*/		return 0x821FC9A8;
		  /* 821FC9A8h */ case    1:  		/* bc 12, CR6_LT, -96 */
		/* 821FC9A8h case    1:*/		if ( regs.CR[6].lt ) { return 0x821FC948;  }
		/* 821FC9A8h case    1:*/		return 0x821FC9AC;
		  /* 821FC9ACh */ case    2:  		/* cmpwi CR6, R6, 81 */
		/* 821FC9ACh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000051);
		/* 821FC9ACh case    2:*/		return 0x821FC9B0;
		  /* 821FC9B0h */ case    3:  		/* bc 4, CR6_GT, -116 */
		/* 821FC9B0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821FC93C;  }
		/* 821FC9B0h case    3:*/		return 0x821FC9B4;
		  /* 821FC9B4h */ case    4:  		/* cmpwi CR6, R6, 96 */
		/* 821FC9B4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000060);
		/* 821FC9B4h case    4:*/		return 0x821FC9B8;
		  /* 821FC9B8h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821FC9B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FC9C4;  }
		/* 821FC9B8h case    5:*/		return 0x821FC9BC;
		  /* 821FC9BCh */ case    6:  		/* cmpwi CR6, R6, 98 */
		/* 821FC9BCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000062);
		/* 821FC9BCh case    6:*/		return 0x821FC9C0;
		  /* 821FC9C0h */ case    7:  		/* bc 4, CR6_EQ, -120 */
		/* 821FC9C0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821FC948;  }
		/* 821FC9C0h case    7:*/		return 0x821FC9C4;
	}
	return 0x821FC9C4;
} // Block from 821FC9A4h-821FC9C4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FC9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC9C4);
		  /* 821FC9C4h */ case    0:  		/* li R11, 1 */
		/* 821FC9C4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FC9C4h case    0:*/		return 0x821FC9C8;
		  /* 821FC9C8h */ case    1:  		/* b -276 */
		/* 821FC9C8h case    1:*/		return 0x821FC8B4;
		/* 821FC9C8h case    1:*/		return 0x821FC9CC;
	}
	return 0x821FC9CC;
} // Block from 821FC9C4h-821FC9CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FC9CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC9CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC9CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC9CC);
		  /* 821FC9CCh */ case    0:  		/* li R27, 0 */
		/* 821FC9CCh case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821FC9CCh case    0:*/		return 0x821FC9D0;
	}
	return 0x821FC9D0;
} // Block from 821FC9CCh-821FC9D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FC9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FC9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FC9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FC9D0);
		  /* 821FC9D0h */ case    0:  		/* li R29, 0 */
		/* 821FC9D0h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FC9D0h case    0:*/		return 0x821FC9D4;
		  /* 821FC9D4h */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 821FC9D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821FC9D4h case    1:*/		return 0x821FC9D8;
		  /* 821FC9D8h */ case    2:  		/* bc 12, CR6_EQ, 260 */
		/* 821FC9D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FCADC;  }
		/* 821FC9D8h case    2:*/		return 0x821FC9DC;
		  /* 821FC9DCh */ case    3:  		/* li R28, 0 */
		/* 821FC9DCh case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821FC9DCh case    3:*/		return 0x821FC9E0;
		  /* 821FC9E0h */ case    4:  		/* lwz R11, <#[R18 + 32]> */
		/* 821FC9E0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000020) );
		/* 821FC9E0h case    4:*/		return 0x821FC9E4;
		  /* 821FC9E4h */ case    5:  		/* srw R11, R11, R28 */
		/* 821FC9E4h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821FC9E4h case    5:*/		return 0x821FC9E8;
		  /* 821FC9E8h */ case    6:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821FC9E8h case    6:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821FC9E8h case    6:*/		return 0x821FC9EC;
		  /* 821FC9ECh */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 821FC9ECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821FC9ECh case    7:*/		return 0x821FC9F0;
		  /* 821FC9F0h */ case    8:  		/* bc 12, CR6_LT, 236 */
		/* 821FC9F0h case    8:*/		if ( regs.CR[6].lt ) { return 0x821FCADC;  }
		/* 821FC9F0h case    8:*/		return 0x821FC9F4;
		  /* 821FC9F4h */ case    9:  		/* cmplwi CR6, R11, 5 */
		/* 821FC9F4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821FC9F4h case    9:*/		return 0x821FC9F8;
		  /* 821FC9F8h */ case   10:  		/* bc 12, CR6_LT, 28 */
		/* 821FC9F8h case   10:*/		if ( regs.CR[6].lt ) { return 0x821FCA14;  }
		/* 821FC9F8h case   10:*/		return 0x821FC9FC;
		  /* 821FC9FCh */ case   11:  		/* cmplwi CR6, R11, 7 */
		/* 821FC9FCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821FC9FCh case   11:*/		return 0x821FCA00;
		  /* 821FCA00h */ case   12:  		/* bc 12, CR6_LT, 31024 */
		/* 821FCA00h case   12:*/		if ( regs.CR[6].lt ) { return 0x82204330;  }
		/* 821FCA00h case   12:*/		return 0x821FCA04;
		  /* 821FCA04h */ case   13:  		/* bc 12, CR6_EQ, 200 */
		/* 821FCA04h case   13:*/		if ( regs.CR[6].eq ) { return 0x821FCACC;  }
		/* 821FCA04h case   13:*/		return 0x821FCA08;
		  /* 821FCA08h */ case   14:  		/* li R4, 4800 */
		/* 821FCA08h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821FCA08h case   14:*/		return 0x821FCA0C;
		  /* 821FCA0Ch */ case   15:  		/* mr R3, R31 */
		/* 821FCA0Ch case   15:*/		regs.R3 = regs.R31;
		/* 821FCA0Ch case   15:*/		return 0x821FCA10;
		  /* 821FCA10h */ case   16:  		/* bl -699304 */
		/* 821FCA10h case   16:*/		regs.LR = 0x821FCA14; return 0x82151E68;
		/* 821FCA10h case   16:*/		return 0x821FCA14;
	}
	return 0x821FCA14;
} // Block from 821FC9D0h-821FCA14h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821FCA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCA14);
		  /* 821FCA14h */ case    0:  		/* rlwinm. R10, R26, 0, 24, 31 */
		/* 821FCA14h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R26);
		/* 821FCA14h case    0:*/		return 0x821FCA18;
		  /* 821FCA18h */ case    1:  		/* mr R30, R29 */
		/* 821FCA18h case    1:*/		regs.R30 = regs.R29;
		/* 821FCA18h case    1:*/		return 0x821FCA1C;
		  /* 821FCA1Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 821FCA1Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821FCA24;  }
		/* 821FCA1Ch case    2:*/		return 0x821FCA20;
		  /* 821FCA20h */ case    3:  		/* addi R30, R11, -1 */
		/* 821FCA20h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFF);
		/* 821FCA20h case    3:*/		return 0x821FCA24;
	}
	return 0x821FCA24;
} // Block from 821FCA14h-821FCA24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FCA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCA24);
		  /* 821FCA24h */ case    0:  		/* cmplw CR6, R30, R27 */
		/* 821FCA24h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R27);
		/* 821FCA24h case    0:*/		return 0x821FCA28;
		  /* 821FCA28h */ case    1:  		/* bc 4, CR6_LT, 31004 */
		/* 821FCA28h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82204344;  }
		/* 821FCA28h case    1:*/		return 0x821FCA2C;
		  /* 821FCA2Ch */ case    2:  		/* lwz R9, <#[R1 + 164]> */
		/* 821FCA2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000A4) );
		/* 821FCA2Ch case    2:*/		return 0x821FCA30;
		  /* 821FCA30h */ case    3:  		/* addi R11, R11, -1 */
		/* 821FCA30h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821FCA30h case    3:*/		return 0x821FCA34;
		  /* 821FCA34h */ case    4:  		/* addi R10, R17, 19 */
		/* 821FCA34h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R17,0x13);
		/* 821FCA34h case    4:*/		return 0x821FCA38;
		  /* 821FCA38h */ case    5:  		/* stw R24, <#[R1 + 160]> */
		/* 821FCA38h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000A0) );
		/* 821FCA38h case    5:*/		return 0x821FCA3C;
		  /* 821FCA3Ch */ case    6:  		/* rlwimi R9, R11, 2, 16, 29 */
		/* 821FCA3Ch case    6:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R9,regs.R11);
		/* 821FCA3Ch case    6:*/		return 0x821FCA40;
		  /* 821FCA40h */ case    7:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821FCA40h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821FCA40h case    7:*/		return 0x821FCA44;
		  /* 821FCA44h */ case    8:  		/* rlwinm R11, R9, 0, 15, 29 */
		/* 821FCA44h case    8:*/		cpu::op::rlwinm<0,0,15,29>(regs,&regs.R11,regs.R9);
		/* 821FCA44h case    8:*/		return 0x821FCA48;
		  /* 821FCA48h */ case    9:  		/* ori R11, R11, 1 */
		/* 821FCA48h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FCA48h case    9:*/		return 0x821FCA4C;
		  /* 821FCA4Ch */ case   10:  		/* lwzx R10, <#[R10 + R14]> */
		/* 821FCA4Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R14 + 0x00000000) );
		/* 821FCA4Ch case   10:*/		return 0x821FCA50;
		  /* 821FCA50h */ case   11:  		/* stw R11, <#[R1 + 164]> */
		/* 821FCA50h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821FCA50h case   11:*/		return 0x821FCA54;
		  /* 821FCA54h */ case   12:  		/* rlwinm. R10, R10, 0, 11, 11 */
		/* 821FCA54h case   12:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R10,regs.R10);
		/* 821FCA54h case   12:*/		return 0x821FCA58;
		  /* 821FCA58h */ case   13:  		/* bc 12, CR0_EQ, 52 */
		/* 821FCA58h case   13:*/		if ( regs.CR[0].eq ) { return 0x821FCA8C;  }
		/* 821FCA58h case   13:*/		return 0x821FCA5C;
		  /* 821FCA5Ch */ case   14:  		/* addi R4, R1, 160 */
		/* 821FCA5Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 821FCA5Ch case   14:*/		return 0x821FCA60;
		  /* 821FCA60h */ case   15:  		/* mr R3, R31 */
		/* 821FCA60h case   15:*/		regs.R3 = regs.R31;
		/* 821FCA60h case   15:*/		return 0x821FCA64;
		  /* 821FCA64h */ case   16:  		/* bl -42724 */
		/* 821FCA64h case   16:*/		regs.LR = 0x821FCA68; return 0x821F2380;
		/* 821FCA64h case   16:*/		return 0x821FCA68;
		  /* 821FCA68h */ case   17:  		/* lwz R11, <#[R1 + 164]> */
		/* 821FCA68h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821FCA68h case   17:*/		return 0x821FCA6C;
		  /* 821FCA6Ch */ case   18:  		/* lwz R9, <#[R3]> */
		/* 821FCA6Ch case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821FCA6Ch case   18:*/		return 0x821FCA70;
		  /* 821FCA70h */ case   19:  		/* li R10, 1 */
		/* 821FCA70h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821FCA70h case   19:*/		return 0x821FCA74;
		  /* 821FCA74h */ case   20:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 821FCA74h case   20:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821FCA74h case   20:*/		return 0x821FCA78;
		  /* 821FCA78h */ case   21:  		/* stw R3, <#[R1 + 160]> */
		/* 821FCA78h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000A0) );
		/* 821FCA78h case   21:*/		return 0x821FCA7C;
		  /* 821FCA7Ch */ case   22:  		/* rlwimi R9, R10, 0, 27, 31 */
		/* 821FCA7Ch case   22:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R9,regs.R10);
		/* 821FCA7Ch case   22:*/		return 0x821FCA80;
		  /* 821FCA80h */ case   23:  		/* ori R11, R11, 2 */
		/* 821FCA80h case   23:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FCA80h case   23:*/		return 0x821FCA84;
		  /* 821FCA84h */ case   24:  		/* stw R9, <#[R3]> */
		/* 821FCA84h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821FCA84h case   24:*/		return 0x821FCA88;
		  /* 821FCA88h */ case   25:  		/* stw R11, <#[R1 + 164]> */
		/* 821FCA88h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821FCA88h case   25:*/		return 0x821FCA8C;
	}
	return 0x821FCA8C;
} // Block from 821FCA24h-821FCA8Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 821FCA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCA8C);
		  /* 821FCA8Ch */ case    0:  		/* li R11, 1 */
		/* 821FCA8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FCA8Ch case    0:*/		return 0x821FCA90;
		  /* 821FCA90h */ case    1:  		/* lwz R10, <#[R14 + 56]> */
		/* 821FCA90h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000038) );
		/* 821FCA90h case    1:*/		return 0x821FCA94;
		  /* 821FCA94h */ case    2:  		/* slw R11, R11, R30 */
		/* 821FCA94h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821FCA94h case    2:*/		return 0x821FCA98;
		  /* 821FCA98h */ case    3:  		/* or R22, R11, R22 */
		/* 821FCA98h case    3:*/		cpu::op::or<0>(regs,&regs.R22,regs.R11,regs.R22);
		/* 821FCA98h case    3:*/		return 0x821FCA9C;
		  /* 821FCA9Ch */ case    4:  		/* cmplwi CR6, R10, 4 */
		/* 821FCA9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821FCA9Ch case    4:*/		return 0x821FCAA0;
		  /* 821FCAA0h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 821FCAA0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FCAB0;  }
		/* 821FCAA0h case    5:*/		return 0x821FCAA4;
		  /* 821FCAA4h */ case    6:  		/* cmplwi CR6, R17, 0 */
		/* 821FCAA4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821FCAA4h case    6:*/		return 0x821FCAA8;
		  /* 821FCAA8h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 821FCAA8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821FCAB0;  }
		/* 821FCAA8h case    7:*/		return 0x821FCAAC;
		  /* 821FCAACh */ case    8:  		/* addi R30, R30, 4 */
		/* 821FCAACh case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821FCAACh case    8:*/		return 0x821FCAB0;
	}
	return 0x821FCAB0;
} // Block from 821FCA8Ch-821FCAB0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FCAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCAB0);
		  /* 821FCAB0h */ case    0:  		/* mr R4, R30 */
		/* 821FCAB0h case    0:*/		regs.R4 = regs.R30;
		/* 821FCAB0h case    0:*/		return 0x821FCAB4;
		  /* 821FCAB4h */ case    1:  		/* addi R3, R1, 1720 */
		/* 821FCAB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6B8);
		/* 821FCAB4h case    1:*/		return 0x821FCAB8;
		  /* 821FCAB8h */ case    2:  		/* bl -44160 */
		/* 821FCAB8h case    2:*/		regs.LR = 0x821FCABC; return 0x821F1E38;
		/* 821FCAB8h case    2:*/		return 0x821FCABC;
		  /* 821FCABCh */ case    3:  		/* mr R4, R3 */
		/* 821FCABCh case    3:*/		regs.R4 = regs.R3;
		/* 821FCABCh case    3:*/		return 0x821FCAC0;
		  /* 821FCAC0h */ case    4:  		/* mr R3, R31 */
		/* 821FCAC0h case    4:*/		regs.R3 = regs.R31;
		/* 821FCAC0h case    4:*/		return 0x821FCAC4;
		  /* 821FCAC4h */ case    5:  		/* ld R5, <#[R1 + 160]> */
		/* 821FCAC4h case    5:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A0) );
		/* 821FCAC4h case    5:*/		return 0x821FCAC8;
		  /* 821FCAC8h */ case    6:  		/* bl -24824 */
		/* 821FCAC8h case    6:*/		regs.LR = 0x821FCACC; return 0x821F69D0;
		/* 821FCAC8h case    6:*/		return 0x821FCACC;
	}
	return 0x821FCACC;
} // Block from 821FCAB0h-821FCACCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FCACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCACC);
		  /* 821FCACCh */ case    0:  		/* addi R29, R29, 1 */
		/* 821FCACCh case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821FCACCh case    0:*/		return 0x821FCAD0;
		  /* 821FCAD0h */ case    1:  		/* addi R28, R28, 3 */
		/* 821FCAD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x3);
		/* 821FCAD0h case    1:*/		return 0x821FCAD4;
		  /* 821FCAD4h */ case    2:  		/* cmplw CR6, R29, R21 */
		/* 821FCAD4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R21);
		/* 821FCAD4h case    2:*/		return 0x821FCAD8;
		  /* 821FCAD8h */ case    3:  		/* bc 12, CR6_LT, -248 */
		/* 821FCAD8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821FC9E0;  }
		/* 821FCAD8h case    3:*/		return 0x821FCADC;
	}
	return 0x821FCADC;
} // Block from 821FCACCh-821FCADCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FCADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCADC);
		  /* 821FCADCh */ case    0:  		/* li R29, 0 */
		/* 821FCADCh case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FCADCh case    0:*/		return 0x821FCAE0;
		  /* 821FCAE0h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 821FCAE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FCAE0h case    1:*/		return 0x821FCAE4;
		  /* 821FCAE4h */ case    2:  		/* bc 12, CR6_EQ, 100 */
		/* 821FCAE4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FCB48;  }
		/* 821FCAE4h case    2:*/		return 0x821FCAE8;
		  /* 821FCAE8h */ case    3:  		/* li R30, 0 */
		/* 821FCAE8h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FCAE8h case    3:*/		return 0x821FCAEC;
		  /* 821FCAECh */ case    4:  		/* li R7, 1 */
		/* 821FCAECh case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FCAECh case    4:*/		return 0x821FCAF0;
		  /* 821FCAF0h */ case    5:  		/* li R6, 0 */
		/* 821FCAF0h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FCAF0h case    5:*/		return 0x821FCAF4;
		  /* 821FCAF4h */ case    6:  		/* li R5, 4 */
		/* 821FCAF4h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FCAF4h case    6:*/		return 0x821FCAF8;
		  /* 821FCAF8h */ case    7:  		/* addi R4, R1, 2456 */
		/* 821FCAF8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x998);
		/* 821FCAF8h case    7:*/		return 0x821FCAFC;
		  /* 821FCAFCh */ case    8:  		/* mr R3, R31 */
		/* 821FCAFCh case    8:*/		regs.R3 = regs.R31;
		/* 821FCAFCh case    8:*/		return 0x821FCB00;
		  /* 821FCB00h */ case    9:  		/* bl -42464 */
		/* 821FCB00h case    9:*/		regs.LR = 0x821FCB04; return 0x821F2520;
		/* 821FCB00h case    9:*/		return 0x821FCB04;
		  /* 821FCB04h */ case   10:  		/* addi R11, R1, 352 */
		/* 821FCB04h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x160);
		/* 821FCB04h case   10:*/		return 0x821FCB08;
		  /* 821FCB08h */ case   11:  		/* mr R28, R3 */
		/* 821FCB08h case   11:*/		regs.R28 = regs.R3;
		/* 821FCB08h case   11:*/		return 0x821FCB0C;
		  /* 821FCB0Ch */ case   12:  		/* lwzx R4, <#[R11 + R30]> */
		/* 821FCB0Ch case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821FCB0Ch case   12:*/		return 0x821FCB10;
		  /* 821FCB10h */ case   13:  		/* bl -420128 */
		/* 821FCB10h case   13:*/		regs.LR = 0x821FCB14; return 0x821961F0;
		/* 821FCB10h case   13:*/		return 0x821FCB14;
		  /* 821FCB14h */ case   14:  		/* addi R11, R1, 128 */
		/* 821FCB14h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 821FCB14h case   14:*/		return 0x821FCB18;
		  /* 821FCB18h */ case   15:  		/* lwz R10, <#[R28]> */
		/* 821FCB18h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821FCB18h case   15:*/		return 0x821FCB1C;
		  /* 821FCB1Ch */ case   16:  		/* mr R4, R29 */
		/* 821FCB1Ch case   16:*/		regs.R4 = regs.R29;
		/* 821FCB1Ch case   16:*/		return 0x821FCB20;
		  /* 821FCB20h */ case   17:  		/* mr R3, R24 */
		/* 821FCB20h case   17:*/		regs.R3 = regs.R24;
		/* 821FCB20h case   17:*/		return 0x821FCB24;
		  /* 821FCB24h */ case   18:  		/* mr R5, R28 */
		/* 821FCB24h case   18:*/		regs.R5 = regs.R28;
		/* 821FCB24h case   18:*/		return 0x821FCB28;
		  /* 821FCB28h */ case   19:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821FCB28h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821FCB28h case   19:*/		return 0x821FCB2C;
		  /* 821FCB2Ch */ case   20:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 821FCB2Ch case   20:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 821FCB2Ch case   20:*/		return 0x821FCB30;
		  /* 821FCB30h */ case   21:  		/* stw R10, <#[R28]> */
		/* 821FCB30h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821FCB30h case   21:*/		return 0x821FCB34;
		  /* 821FCB34h */ case   22:  		/* bl -574596 */
		/* 821FCB34h case   22:*/		regs.LR = 0x821FCB38; return 0x821706B0;
		/* 821FCB34h case   22:*/		return 0x821FCB38;
		  /* 821FCB38h */ case   23:  		/* addi R29, R29, 1 */
		/* 821FCB38h case   23:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821FCB38h case   23:*/		return 0x821FCB3C;
		  /* 821FCB3Ch */ case   24:  		/* addi R30, R30, 4 */
		/* 821FCB3Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821FCB3Ch case   24:*/		return 0x821FCB40;
		  /* 821FCB40h */ case   25:  		/* cmplw CR6, R29, R25 */
		/* 821FCB40h case   25:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 821FCB40h case   25:*/		return 0x821FCB44;
		  /* 821FCB44h */ case   26:  		/* bc 12, CR6_LT, -88 */
		/* 821FCB44h case   26:*/		if ( regs.CR[6].lt ) { return 0x821FCAEC;  }
		/* 821FCB44h case   26:*/		return 0x821FCB48;
	}
	return 0x821FCB48;
} // Block from 821FCADCh-821FCB48h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821FCB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCB48);
		  /* 821FCB48h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 821FCB48h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 821FCB48h case    0:*/		return 0x821FCB4C;
		  /* 821FCB4Ch */ case    1:  		/* bc 12, CR0_EQ, 172 */
		/* 821FCB4Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821FCBF8;  }
		/* 821FCB4Ch case    1:*/		return 0x821FCB50;
		  /* 821FCB50h */ case    2:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FCB50h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FCB50h case    2:*/		return 0x821FCB54;
		  /* 821FCB54h */ case    3:  		/* lwz R5, <#[R24 + 44]> */
		/* 821FCB54h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x0000002C) );
		/* 821FCB54h case    3:*/		return 0x821FCB58;
		  /* 821FCB58h */ case    4:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821FCB58h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821FCB58h case    4:*/		return 0x821FCB5C;
		  /* 821FCB5Ch */ case    5:  		/* cmplwi CR6, R11, 32 */
		/* 821FCB5Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821FCB5Ch case    5:*/		return 0x821FCB60;
		  /* 821FCB60h */ case    6:  		/* bc 12, CR6_LT, 24 */
		/* 821FCB60h case    6:*/		if ( regs.CR[6].lt ) { return 0x821FCB78;  }
		/* 821FCB60h case    6:*/		return 0x821FCB64;
		  /* 821FCB64h */ case    7:  		/* cmplwi CR6, R11, 82 */
		/* 821FCB64h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 821FCB64h case    7:*/		return 0x821FCB68;
		  /* 821FCB68h */ case    8:  		/* bc 12, CR6_GT, 16 */
		/* 821FCB68h case    8:*/		if ( regs.CR[6].gt ) { return 0x821FCB78;  }
		/* 821FCB68h case    8:*/		return 0x821FCB6C;
		  /* 821FCB6Ch */ case    9:  		/* li R23, 1 */
		/* 821FCB6Ch case    9:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FCB6Ch case    9:*/		return 0x821FCB70;
		  /* 821FCB70h */ case   10:  		/* mr R11, R23 */
		/* 821FCB70h case   10:*/		regs.R11 = regs.R23;
		/* 821FCB70h case   10:*/		return 0x821FCB74;
		  /* 821FCB74h */ case   11:  		/* b 12 */
		/* 821FCB74h case   11:*/		return 0x821FCB80;
		/* 821FCB74h case   11:*/		return 0x821FCB78;
	}
	return 0x821FCB78;
} // Block from 821FCB48h-821FCB78h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FCB78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCB78);
		  /* 821FCB78h */ case    0:  		/* li R11, 0 */
		/* 821FCB78h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FCB78h case    0:*/		return 0x821FCB7C;
		  /* 821FCB7Ch */ case    1:  		/* li R23, 1 */
		/* 821FCB7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FCB7Ch case    1:*/		return 0x821FCB80;
	}
	return 0x821FCB80;
} // Block from 821FCB78h-821FCB80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FCB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCB80);
		  /* 821FCB80h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FCB80h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FCB80h case    0:*/		return 0x821FCB84;
		  /* 821FCB84h */ case    1:  		/* bc 12, CR0_EQ, 100 */
		/* 821FCB84h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FCBE8;  }
		/* 821FCB84h case    1:*/		return 0x821FCB88;
		  /* 821FCB88h */ case    2:  		/* lwz R11, <#[R5]> */
		/* 821FCB88h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821FCB88h case    2:*/		return 0x821FCB8C;
		  /* 821FCB8Ch */ case    3:  		/* rlwinm R10, R11, 7, 29, 31 */
		/* 821FCB8Ch case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R10,regs.R11);
		/* 821FCB8Ch case    3:*/		return 0x821FCB90;
		  /* 821FCB90h */ case    4:  		/* addic. R9, R10, -1 */
		/* 821FCB90h case    4:*/		cpu::op::addic<1>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821FCB90h case    4:*/		return 0x821FCB94;
		  /* 821FCB94h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821FCB94h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FCBB8;  }
		/* 821FCB94h case    5:*/		return 0x821FCB98;
		  /* 821FCB98h */ case    6:  		/* cmplwi CR6, R10, 2 */
		/* 821FCB98h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 821FCB98h case    6:*/		return 0x821FCB9C;
		  /* 821FCB9Ch */ case    7:  		/* bc 4, CR6_EQ, 30660 */
		/* 821FCB9Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82204360;  }
		/* 821FCB9Ch case    7:*/		return 0x821FCBA0;
		  /* 821FCBA0h */ case    8:  		/* rlwinm R10, R11, 25, 30, 31 */
		/* 821FCBA0h case    8:*/		cpu::op::rlwinm<0,25,30,31>(regs,&regs.R10,regs.R11);
		/* 821FCBA0h case    8:*/		return 0x821FCBA4;
		  /* 821FCBA4h */ case    9:  		/* li R9, 224 */
		/* 821FCBA4h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0xE0);
		/* 821FCBA4h case    9:*/		return 0x821FCBA8;
		  /* 821FCBA8h */ case   10:  		/* rlwinm R11, R11, 0, 27, 21 */
		/* 821FCBA8h case   10:*/		cpu::op::rlwinm<0,0,27,21>(regs,&regs.R11,regs.R11);
		/* 821FCBA8h case   10:*/		return 0x821FCBAC;
		  /* 821FCBACh */ case   11:  		/* rlwimi R9, R10, 2, 27, 29 */
		/* 821FCBACh case   11:*/		cpu::op::rlwimi<0,2,27,29>(regs,&regs.R9,regs.R10);
		/* 821FCBACh case   11:*/		return 0x821FCBB0;
		  /* 821FCBB0h */ case   12:  		/* or R10, R9, R10 */
		/* 821FCBB0h case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821FCBB0h case   12:*/		return 0x821FCBB4;
		  /* 821FCBB4h */ case   13:  		/* b 36 */
		/* 821FCBB4h case   13:*/		return 0x821FCBD8;
		/* 821FCBB4h case   13:*/		return 0x821FCBB8;
	}
	return 0x821FCBB8;
} // Block from 821FCB80h-821FCBB8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821FCBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCBB8);
		  /* 821FCBB8h */ case    0:  		/* lis R10, 32 */
		/* 821FCBB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x20);
		/* 821FCBB8h case    0:*/		return 0x821FCBBC;
		  /* 821FCBBCh */ case    1:  		/* rlwinm R9, R11, 27, 30, 31 */
		/* 821FCBBCh case    1:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R9,regs.R11);
		/* 821FCBBCh case    1:*/		return 0x821FCBC0;
		  /* 821FCBC0h */ case    2:  		/* ori R10, R10, 224 */
		/* 821FCBC0h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xE0);
		/* 821FCBC0h case    2:*/		return 0x821FCBC4;
		  /* 821FCBC4h */ case    3:  		/* lis R12, -2561 */
		/* 821FCBC4h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFF5FF);
		/* 821FCBC4h case    3:*/		return 0x821FCBC8;
		  /* 821FCBC8h */ case    4:  		/* rlwimi R10, R9, 2, 27, 29 */
		/* 821FCBC8h case    4:*/		cpu::op::rlwimi<0,2,27,29>(regs,&regs.R10,regs.R9);
		/* 821FCBC8h case    4:*/		return 0x821FCBCC;
		  /* 821FCBCCh */ case    5:  		/* ori R12, R12, 64543 */
		/* 821FCBCCh case    5:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFC1F);
		/* 821FCBCCh case    5:*/		return 0x821FCBD0;
		  /* 821FCBD0h */ case    6:  		/* or R10, R10, R9 */
		/* 821FCBD0h case    6:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821FCBD0h case    6:*/		return 0x821FCBD4;
		  /* 821FCBD4h */ case    7:  		/* and R11, R11, R12 */
		/* 821FCBD4h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 821FCBD4h case    7:*/		return 0x821FCBD8;
	}
	return 0x821FCBD8;
} // Block from 821FCBB8h-821FCBD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FCBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCBD8);
		  /* 821FCBD8h */ case    0:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821FCBD8h case    0:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821FCBD8h case    0:*/		return 0x821FCBDC;
		  /* 821FCBDCh */ case    1:  		/* or R11, R10, R11 */
		/* 821FCBDCh case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FCBDCh case    1:*/		return 0x821FCBE0;
		  /* 821FCBE0h */ case    2:  		/* stw R11, <#[R5]> */
		/* 821FCBE0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821FCBE0h case    2:*/		return 0x821FCBE4;
		  /* 821FCBE4h */ case    3:  		/* b 24 */
		/* 821FCBE4h case    3:*/		return 0x821FCBFC;
		/* 821FCBE4h case    3:*/		return 0x821FCBE8;
	}
	return 0x821FCBE8;
} // Block from 821FCBD8h-821FCBE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FCBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCBE8);
		  /* 821FCBE8h */ case    0:  		/* li R4, 1 */
		/* 821FCBE8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821FCBE8h case    0:*/		return 0x821FCBEC;
		  /* 821FCBECh */ case    1:  		/* mr R3, R24 */
		/* 821FCBECh case    1:*/		regs.R3 = regs.R24;
		/* 821FCBECh case    1:*/		return 0x821FCBF0;
		  /* 821FCBF0h */ case    2:  		/* bl -574784 */
		/* 821FCBF0h case    2:*/		regs.LR = 0x821FCBF4; return 0x821706B0;
		/* 821FCBF0h case    2:*/		return 0x821FCBF4;
		  /* 821FCBF4h */ case    3:  		/* b 8 */
		/* 821FCBF4h case    3:*/		return 0x821FCBFC;
		/* 821FCBF4h case    3:*/		return 0x821FCBF8;
	}
	return 0x821FCBF8;
} // Block from 821FCBE8h-821FCBF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FCBF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCBF8);
		  /* 821FCBF8h */ case    0:  		/* li R23, 1 */
		/* 821FCBF8h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821FCBF8h case    0:*/		return 0x821FCBFC;
	}
	return 0x821FCBFC;
} // Block from 821FCBF8h-821FCBFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FCBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCBFC);
		  /* 821FCBFCh */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FCBFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FCBFCh case    0:*/		return 0x821FCC00;
		  /* 821FCC00h */ case    1:  		/* rlwinm R10, R24, 0, 0, 30 */
		/* 821FCC00h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R24);
		/* 821FCC00h case    1:*/		return 0x821FCC04;
		  /* 821FCC04h */ case    2:  		/* addi R11, R11, 24 */
		/* 821FCC04h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x18);
		/* 821FCC04h case    2:*/		return 0x821FCC08;
		  /* 821FCC08h */ case    3:  		/* addi R26, R10, 36 */
		/* 821FCC08h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x24);
		/* 821FCC08h case    3:*/		return 0x821FCC0C;
		  /* 821FCC0Ch */ case    4:  		/* addi R10, R11, -36 */
		/* 821FCC0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFDC);
		/* 821FCC0Ch case    4:*/		return 0x821FCC10;
		  /* 821FCC10h */ case    5:  		/* addi R9, R26, -36 */
		/* 821FCC10h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R26,0xFFFFFFDC);
		/* 821FCC10h case    5:*/		return 0x821FCC14;
		  /* 821FCC14h */ case    6:  		/* ori R8, R10, 1 */
		/* 821FCC14h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821FCC14h case    6:*/		return 0x821FCC18;
		  /* 821FCC18h */ case    7:  		/* lwz R7, <#[R11]> */
		/* 821FCC18h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCC18h case    7:*/		return 0x821FCC1C;
		  /* 821FCC1Ch */ case    8:  		/* addi R10, R26, 4 */
		/* 821FCC1Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x4);
		/* 821FCC1Ch case    8:*/		return 0x821FCC20;
		  /* 821FCC20h */ case    9:  		/* stw R7, <#[R26]> */
		/* 821FCC20h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R26 + 0x00000000) );
		/* 821FCC20h case    9:*/		return 0x821FCC24;
		  /* 821FCC24h */ case   10:  		/* lwz R7, <#[R11]> */
		/* 821FCC24h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCC24h case   10:*/		return 0x821FCC28;
		  /* 821FCC28h */ case   11:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821FCC28h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821FCC28h case   11:*/		return 0x821FCC2C;
		  /* 821FCC2Ch */ case   12:  		/* stw R9, <#[R7]> */
		/* 821FCC2Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821FCC2Ch case   12:*/		return 0x821FCC30;
		  /* 821FCC30h */ case   13:  		/* stw R8, <#[R26 + 4]> */
		/* 821FCC30h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R26 + 0x00000004) );
		/* 821FCC30h case   13:*/		return 0x821FCC34;
		  /* 821FCC34h */ case   14:  		/* stw R10, <#[R11]> */
		/* 821FCC34h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCC34h case   14:*/		return 0x821FCC38;
		  /* 821FCC38h */ case   15:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FCC38h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FCC38h case   15:*/		return 0x821FCC3C;
		  /* 821FCC3Ch */ case   16:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821FCC3Ch case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821FCC3Ch case   16:*/		return 0x821FCC40;
		  /* 821FCC40h */ case   17:  		/* cmpwi CR6, R4, 94 */
		/* 821FCC40h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000005E);
		/* 821FCC40h case   17:*/		return 0x821FCC44;
		  /* 821FCC44h */ case   18:  		/* bc 12, CR6_EQ, 552 */
		/* 821FCC44h case   18:*/		if ( regs.CR[6].eq ) { return 0x821FCE6C;  }
		/* 821FCC44h case   18:*/		return 0x821FCC48;
		  /* 821FCC48h */ case   19:  		/* cmpwi CR6, R4, 96 */
		/* 821FCC48h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000060);
		/* 821FCC48h case   19:*/		return 0x821FCC4C;
		  /* 821FCC4Ch */ case   20:  		/* bc 12, CR6_EQ, 160 */
		/* 821FCC4Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821FCCEC;  }
		/* 821FCC4Ch case   20:*/		return 0x821FCC50;
		  /* 821FCC50h */ case   21:  		/* cmpwi CR6, R4, 97 */
		/* 821FCC50h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000061);
		/* 821FCC50h case   21:*/		return 0x821FCC54;
		  /* 821FCC54h */ case   22:  		/* bc 12, CR6_EQ, 52 */
		/* 821FCC54h case   22:*/		if ( regs.CR[6].eq ) { return 0x821FCC88;  }
		/* 821FCC54h case   22:*/		return 0x821FCC58;
		  /* 821FCC58h */ case   23:  		/* cmpwi CR6, R4, 98 */
		/* 821FCC58h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000062);
		/* 821FCC58h case   23:*/		return 0x821FCC5C;
		  /* 821FCC5Ch */ case   24:  		/* bc 4, CR6_GT, 12 */
		/* 821FCC5Ch case   24:*/		if ( !regs.CR[6].gt ) { return 0x821FCC68;  }
		/* 821FCC5Ch case   24:*/		return 0x821FCC60;
		  /* 821FCC60h */ case   25:  		/* cmpwi CR6, R4, 100 */
		/* 821FCC60h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000064);
		/* 821FCC60h case   25:*/		return 0x821FCC64;
		  /* 821FCC64h */ case   26:  		/* bc 4, CR6_GT, 36 */
		/* 821FCC64h case   26:*/		if ( !regs.CR[6].gt ) { return 0x821FCC88;  }
		/* 821FCC64h case   26:*/		return 0x821FCC68;
	}
	return 0x821FCC68;
} // Block from 821FCBFCh-821FCC68h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821FCC68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCC68);
		  /* 821FCC68h */ case    0:  		/* lwz R11, <#[R14 + 120]> */
		/* 821FCC68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000078) );
		/* 821FCC68h case    0:*/		return 0x821FCC6C;
		  /* 821FCC6Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FCC6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FCC6Ch case    1:*/		return 0x821FCC70;
		  /* 821FCC70h */ case    2:  		/* bc 12, CR6_EQ, 688 */
		/* 821FCC70h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FCF20;  }
		/* 821FCC70h case    2:*/		return 0x821FCC74;
		  /* 821FCC74h */ case    3:  		/* lis R11, -32252 */
		/* 821FCC74h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821FCC74h case    3:*/		return 0x821FCC78;
		  /* 821FCC78h */ case    4:  		/* li R4, 3500 */
		/* 821FCC78h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821FCC78h case    4:*/		return 0x821FCC7C;
		  /* 821FCC7Ch */ case    5:  		/* addi R5, R11, -13008 */
		/* 821FCC7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFCD30);
		/* 821FCC7Ch case    5:*/		return 0x821FCC80;
		  /* 821FCC80h */ case    6:  		/* mr R3, R31 */
		/* 821FCC80h case    6:*/		regs.R3 = regs.R31;
		/* 821FCC80h case    6:*/		return 0x821FCC84;
		  /* 821FCC84h */ case    7:  		/* bl -699932 */
		/* 821FCC84h case    7:*/		regs.LR = 0x821FCC88; return 0x82151E68;
		/* 821FCC84h case    7:*/		return 0x821FCC88;
	}
	return 0x821FCC88;
} // Block from 821FCC68h-821FCC88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FCC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCC88);
		  /* 821FCC88h */ case    0:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821FCC88h case    0:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821FCC88h case    0:*/		return 0x821FCC8C;
		  /* 821FCC8Ch */ case    1:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821FCC8Ch case    1:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821FCC8Ch case    1:*/		return 0x821FCC90;
		  /* 821FCC90h */ case    2:  		/* mr R3, R31 */
		/* 821FCC90h case    2:*/		regs.R3 = regs.R31;
		/* 821FCC90h case    2:*/		return 0x821FCC94;
		  /* 821FCC94h */ case    3:  		/* bl -624740 */
		/* 821FCC94h case    3:*/		regs.LR = 0x821FCC98; return 0x82164430;
		/* 821FCC94h case    3:*/		return 0x821FCC98;
		  /* 821FCC98h */ case    4:  		/* li R11, 0 */
		/* 821FCC98h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FCC98h case    4:*/		return 0x821FCC9C;
		  /* 821FCC9Ch */ case    5:  		/* addi R10, R24, -24 */
		/* 821FCC9Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R24,0xFFFFFFE8);
		/* 821FCC9Ch case    5:*/		return 0x821FCCA0;
		  /* 821FCCA0h */ case    6:  		/* stb R11, <#[R1 + 105]> */
		/* 821FCCA0h case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000069) );
		/* 821FCCA0h case    6:*/		return 0x821FCCA4;
		  /* 821FCCA4h */ case    7:  		/* lis R11, -32235 */
		/* 821FCCA4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 821FCCA4h case    7:*/		return 0x821FCCA8;
		  /* 821FCCA8h */ case    8:  		/* add R30, R3, R10 */
		/* 821FCCA8h case    8:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R10);
		/* 821FCCA8h case    8:*/		return 0x821FCCAC;
		  /* 821FCCACh */ case    9:  		/* mr R7, R31 */
		/* 821FCCACh case    9:*/		regs.R7 = regs.R31;
		/* 821FCCACh case    9:*/		return 0x821FCCB0;
		  /* 821FCCB0h */ case   10:  		/* addi R6, R11, 7848 */
		/* 821FCCB0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1EA8);
		/* 821FCCB0h case   10:*/		return 0x821FCCB4;
		  /* 821FCCB4h */ case   11:  		/* addi R5, R1, 105 */
		/* 821FCCB4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x69);
		/* 821FCCB4h case   11:*/		return 0x821FCCB8;
		  /* 821FCCB8h */ case   12:  		/* mr R4, R30 */
		/* 821FCCB8h case   12:*/		regs.R4 = regs.R30;
		/* 821FCCB8h case   12:*/		return 0x821FCCBC;
		  /* 821FCCBCh */ case   13:  		/* mr R3, R14 */
		/* 821FCCBCh case   13:*/		regs.R3 = regs.R14;
		/* 821FCCBCh case   13:*/		return 0x821FCCC0;
		  /* 821FCCC0h */ case   14:  		/* bl -1233608 */
		/* 821FCCC0h case   14:*/		regs.LR = 0x821FCCC4; return 0x820CF9F8;
		/* 821FCCC0h case   14:*/		return 0x821FCCC4;
		  /* 821FCCC4h */ case   15:  		/* lbz R11, <#[R1 + 105]> */
		/* 821FCCC4h case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000069) );
		/* 821FCCC4h case   15:*/		return 0x821FCCC8;
		  /* 821FCCC8h */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 821FCCC8h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821FCCC8h case   16:*/		return 0x821FCCCC;
		  /* 821FCCCCh */ case   17:  		/* bc 12, CR0_EQ, 192 */
		/* 821FCCCCh case   17:*/		if ( regs.CR[0].eq ) { return 0x821FCD8C;  }
		/* 821FCCCCh case   17:*/		return 0x821FCCD0;
		  /* 821FCCD0h */ case   18:  		/* addi R7, R30, 20 */
		/* 821FCCD0h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R30,0x14);
		/* 821FCCD0h case   18:*/		return 0x821FCCD4;
		  /* 821FCCD4h */ case   19:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FCCD4h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FCCD4h case   19:*/		return 0x821FCCD8;
		  /* 821FCCD8h */ case   20:  		/* mr R6, R24 */
		/* 821FCCD8h case   20:*/		regs.R6 = regs.R24;
		/* 821FCCD8h case   20:*/		return 0x821FCCDC;
		  /* 821FCCDCh */ case   21:  		/* mr R5, R14 */
		/* 821FCCDCh case   21:*/		regs.R5 = regs.R14;
		/* 821FCCDCh case   21:*/		return 0x821FCCE0;
		  /* 821FCCE0h */ case   22:  		/* mr R3, R31 */
		/* 821FCCE0h case   22:*/		regs.R3 = regs.R31;
		/* 821FCCE0h case   22:*/		return 0x821FCCE4;
		  /* 821FCCE4h */ case   23:  		/* bl -15868 */
		/* 821FCCE4h case   23:*/		regs.LR = 0x821FCCE8; return 0x821F8EE8;
		/* 821FCCE4h case   23:*/		return 0x821FCCE8;
		  /* 821FCCE8h */ case   24:  		/* b 164 */
		/* 821FCCE8h case   24:*/		return 0x821FCD8C;
		/* 821FCCE8h case   24:*/		return 0x821FCCEC;
	}
	return 0x821FCCEC;
} // Block from 821FCC88h-821FCCECh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821FCCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCCEC);
		  /* 821FCCECh */ case    0:  		/* lwz R29, <#[R14 + 60]> */
		/* 821FCCECh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R14 + 0x0000003C) );
		/* 821FCCECh case    0:*/		return 0x821FCCF0;
		  /* 821FCCF0h */ case    1:  		/* mr R3, R31 */
		/* 821FCCF0h case    1:*/		regs.R3 = regs.R31;
		/* 821FCCF0h case    1:*/		return 0x821FCCF4;
		  /* 821FCCF4h */ case    2:  		/* cmplwi CR6, R29, 2 */
		/* 821FCCF4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 821FCCF4h case    2:*/		return 0x821FCCF8;
		  /* 821FCCF8h */ case    3:  		/* bc 12, CR6_GT, 30324 */
		/* 821FCCF8h case    3:*/		if ( regs.CR[6].gt ) { return 0x8220436C;  }
		/* 821FCCF8h case    3:*/		return 0x821FCCFC;
		  /* 821FCCFCh */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821FCCFCh case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821FCCFCh case    4:*/		return 0x821FCD00;
		  /* 821FCD00h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821FCD00h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821FCD00h case    5:*/		return 0x821FCD04;
		  /* 821FCD04h */ case    6:  		/* bl -624852 */
		/* 821FCD04h case    6:*/		regs.LR = 0x821FCD08; return 0x82164430;
		/* 821FCD04h case    6:*/		return 0x821FCD08;
		  /* 821FCD08h */ case    7:  		/* li R11, 0 */
		/* 821FCD08h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FCD08h case    7:*/		return 0x821FCD0C;
		  /* 821FCD0Ch */ case    8:  		/* addi R10, R24, -20 */
		/* 821FCD0Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R24,0xFFFFFFEC);
		/* 821FCD0Ch case    8:*/		return 0x821FCD10;
		  /* 821FCD10h */ case    9:  		/* stb R11, <#[R1 + 104]> */
		/* 821FCD10h case    9:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 821FCD10h case    9:*/		return 0x821FCD14;
		  /* 821FCD14h */ case   10:  		/* lis R11, -32235 */
		/* 821FCD14h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 821FCD14h case   10:*/		return 0x821FCD18;
		  /* 821FCD18h */ case   11:  		/* add R30, R3, R10 */
		/* 821FCD18h case   11:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R10);
		/* 821FCD18h case   11:*/		return 0x821FCD1C;
		  /* 821FCD1Ch */ case   12:  		/* mr R9, R31 */
		/* 821FCD1Ch case   12:*/		regs.R9 = regs.R31;
		/* 821FCD1Ch case   12:*/		return 0x821FCD20;
		  /* 821FCD20h */ case   13:  		/* addi R8, R11, 7848 */
		/* 821FCD20h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1EA8);
		/* 821FCD20h case   13:*/		return 0x821FCD24;
		  /* 821FCD24h */ case   14:  		/* addi R7, R1, 104 */
		/* 821FCD24h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 821FCD24h case   14:*/		return 0x821FCD28;
		  /* 821FCD28h */ case   15:  		/* addi R6, R1, 552 */
		/* 821FCD28h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x228);
		/* 821FCD28h case   15:*/		return 0x821FCD2C;
		  /* 821FCD2Ch */ case   16:  		/* addi R5, R1, 536 */
		/* 821FCD2Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x218);
		/* 821FCD2Ch case   16:*/		return 0x821FCD30;
		  /* 821FCD30h */ case   17:  		/* mr R4, R30 */
		/* 821FCD30h case   17:*/		regs.R4 = regs.R30;
		/* 821FCD30h case   17:*/		return 0x821FCD34;
		  /* 821FCD34h */ case   18:  		/* mr R3, R14 */
		/* 821FCD34h case   18:*/		regs.R3 = regs.R14;
		/* 821FCD34h case   18:*/		return 0x821FCD38;
		  /* 821FCD38h */ case   19:  		/* bl -1235008 */
		/* 821FCD38h case   19:*/		regs.LR = 0x821FCD3C; return 0x820CF4F8;
		/* 821FCD38h case   19:*/		return 0x821FCD3C;
		  /* 821FCD3Ch */ case   20:  		/* lwz R11, <#[R1 + 536]> */
		/* 821FCD3Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000218) );
		/* 821FCD3Ch case   20:*/		return 0x821FCD40;
		  /* 821FCD40h */ case   21:  		/* stb R11, <#[R30 + 15]> */
		/* 821FCD40h case   21:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x0000000F) );
		/* 821FCD40h case   21:*/		return 0x821FCD44;
		  /* 821FCD44h */ case   22:  		/* lwz R10, <#[R30 + 12]> */
		/* 821FCD44h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FCD44h case   22:*/		return 0x821FCD48;
		  /* 821FCD48h */ case   23:  		/* lwz R11, <#[R1 + 552]> */
		/* 821FCD48h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000228) );
		/* 821FCD48h case   23:*/		return 0x821FCD4C;
		  /* 821FCD4Ch */ case   24:  		/* rlwimi R10, R11, 16, 15, 15 */
		/* 821FCD4Ch case   24:*/		cpu::op::rlwimi<0,16,15,15>(regs,&regs.R10,regs.R11);
		/* 821FCD4Ch case   24:*/		return 0x821FCD50;
		  /* 821FCD50h */ case   25:  		/* stw R10, <#[R30 + 12]> */
		/* 821FCD50h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FCD50h case   25:*/		return 0x821FCD54;
		  /* 821FCD54h */ case   26:  		/* lbz R11, <#[R1 + 104]> */
		/* 821FCD54h case   26:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 821FCD54h case   26:*/		return 0x821FCD58;
		  /* 821FCD58h */ case   27:  		/* cmplwi CR0, R11, 0 */
		/* 821FCD58h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821FCD58h case   27:*/		return 0x821FCD5C;
		  /* 821FCD5Ch */ case   28:  		/* bc 12, CR0_EQ, 28 */
		/* 821FCD5Ch case   28:*/		if ( regs.CR[0].eq ) { return 0x821FCD78;  }
		/* 821FCD5Ch case   28:*/		return 0x821FCD60;
		  /* 821FCD60h */ case   29:  		/* addi R7, R30, 16 */
		/* 821FCD60h case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R30,0x10);
		/* 821FCD60h case   29:*/		return 0x821FCD64;
		  /* 821FCD64h */ case   30:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FCD64h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FCD64h case   30:*/		return 0x821FCD68;
		  /* 821FCD68h */ case   31:  		/* mr R6, R24 */
		/* 821FCD68h case   31:*/		regs.R6 = regs.R24;
		/* 821FCD68h case   31:*/		return 0x821FCD6C;
		  /* 821FCD6Ch */ case   32:  		/* mr R5, R14 */
		/* 821FCD6Ch case   32:*/		regs.R5 = regs.R14;
		/* 821FCD6Ch case   32:*/		return 0x821FCD70;
		  /* 821FCD70h */ case   33:  		/* mr R3, R31 */
		/* 821FCD70h case   33:*/		regs.R3 = regs.R31;
		/* 821FCD70h case   33:*/		return 0x821FCD74;
		  /* 821FCD74h */ case   34:  		/* bl -16012 */
		/* 821FCD74h case   34:*/		regs.LR = 0x821FCD78; return 0x821F8EE8;
		/* 821FCD74h case   34:*/		return 0x821FCD78;
	}
	return 0x821FCD78;
} // Block from 821FCCECh-821FCD78h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821FCD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCD78);
		  /* 821FCD78h */ case    0:  		/* cmplwi CR6, R29, 2 */
		/* 821FCD78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 821FCD78h case    0:*/		return 0x821FCD7C;
		  /* 821FCD7Ch */ case    1:  		/* bc 4, CR6_EQ, 420 */
		/* 821FCD7Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FCF20;  }
		/* 821FCD7Ch case    1:*/		return 0x821FCD80;
		  /* 821FCD80h */ case    2:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FCD80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FCD80h case    2:*/		return 0x821FCD84;
		  /* 821FCD84h */ case    3:  		/* ori R11, R11, 64 */
		/* 821FCD84h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821FCD84h case    3:*/		return 0x821FCD88;
		  /* 821FCD88h */ case    4:  		/* stw R11, <#[R24 + 8]> */
		/* 821FCD88h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FCD88h case    4:*/		return 0x821FCD8C;
	}
	return 0x821FCD8C;
} // Block from 821FCD78h-821FCD8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FCD8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCD8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCD8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCD8C);
		  /* 821FCD8Ch */ case    0:  		/* li R29, 0 */
		/* 821FCD8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FCD8Ch case    0:*/		return 0x821FCD90;
		  /* 821FCD90h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 821FCD90h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FCD90h case    1:*/		return 0x821FCD94;
		  /* 821FCD94h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 821FCD94h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FCDEC;  }
		/* 821FCD94h case    2:*/		return 0x821FCD98;
		  /* 821FCD98h */ case    3:  		/* addi R30, R1, 296 */
		/* 821FCD98h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x128);
		/* 821FCD98h case    3:*/		return 0x821FCD9C;
		  /* 821FCD9Ch */ case    4:  		/* lwz R4, <#[R30]> */
		/* 821FCD9Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821FCD9Ch case    4:*/		return 0x821FCDA0;
		  /* 821FCDA0h */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 821FCDA0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821FCDA0h case    5:*/		return 0x821FCDA4;
		  /* 821FCDA4h */ case    6:  		/* bc 12, CR6_EQ, 30160 */
		/* 821FCDA4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82204374;  }
		/* 821FCDA4h case    6:*/		return 0x821FCDA8;
		  /* 821FCDA8h */ case    7:  		/* lwz R11, <#[R4 + 4]> */
		/* 821FCDA8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821FCDA8h case    7:*/		return 0x821FCDAC;
		  /* 821FCDACh */ case    8:  		/* cmpwi CR6, R11, 28 */
		/* 821FCDACh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821FCDACh case    8:*/		return 0x821FCDB0;
		  /* 821FCDB0h */ case    9:  		/* bc 4, CR6_EQ, 30148 */
		/* 821FCDB0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82204374;  }
		/* 821FCDB0h case    9:*/		return 0x821FCDB4;
		  /* 821FCDB4h */ case   10:  		/* addi R5, R1, 96 */
		/* 821FCDB4h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821FCDB4h case   10:*/		return 0x821FCDB8;
		  /* 821FCDB8h */ case   11:  		/* mr R3, R31 */
		/* 821FCDB8h case   11:*/		regs.R3 = regs.R31;
		/* 821FCDB8h case   11:*/		return 0x821FCDBC;
		  /* 821FCDBCh */ case   12:  		/* bl -67028 */
		/* 821FCDBCh case   12:*/		regs.LR = 0x821FCDC0; return 0x821EC7E8;
		/* 821FCDBCh case   12:*/		return 0x821FCDC0;
		  /* 821FCDC0h */ case   13:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FCDC0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FCDC0h case   13:*/		return 0x821FCDC4;
		  /* 821FCDC4h */ case   14:  		/* mulli R10, R3, 40 */
		/* 821FCDC4h case   14:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R3,0x28);
		/* 821FCDC4h case   14:*/		return 0x821FCDC8;
		  /* 821FCDC8h */ case   15:  		/* add R11, R10, R11 */
		/* 821FCDC8h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FCDC8h case   15:*/		return 0x821FCDCC;
		  /* 821FCDCCh */ case   16:  		/* lwz R11, <#[R11 + 4]> */
		/* 821FCDCCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821FCDCCh case   16:*/		return 0x821FCDD0;
		  /* 821FCDD0h */ case   17:  		/* rlwinm R11, R11, 0, 25, 27 */
		/* 821FCDD0h case   17:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R11,regs.R11);
		/* 821FCDD0h case   17:*/		return 0x821FCDD4;
		  /* 821FCDD4h */ case   18:  		/* cmplwi CR6, R11, 48 */
		/* 821FCDD4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000030);
		/* 821FCDD4h case   18:*/		return 0x821FCDD8;
		  /* 821FCDD8h */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 821FCDD8h case   19:*/		if ( regs.CR[6].eq ) { return 0x821FCDEC;  }
		/* 821FCDD8h case   19:*/		return 0x821FCDDC;
		  /* 821FCDDCh */ case   20:  		/* addi R29, R29, 1 */
		/* 821FCDDCh case   20:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821FCDDCh case   20:*/		return 0x821FCDE0;
		  /* 821FCDE0h */ case   21:  		/* addi R30, R30, 4 */
		/* 821FCDE0h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821FCDE0h case   21:*/		return 0x821FCDE4;
		  /* 821FCDE4h */ case   22:  		/* cmplw CR6, R29, R25 */
		/* 821FCDE4h case   22:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 821FCDE4h case   22:*/		return 0x821FCDE8;
		  /* 821FCDE8h */ case   23:  		/* bc 12, CR6_LT, -76 */
		/* 821FCDE8h case   23:*/		if ( regs.CR[6].lt ) { return 0x821FCD9C;  }
		/* 821FCDE8h case   23:*/		return 0x821FCDEC;
	}
	return 0x821FCDEC;
} // Block from 821FCD8Ch-821FCDECh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821FCDECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCDEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCDEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCDEC);
		  /* 821FCDECh */ case    0:  		/* cmplw CR6, R29, R25 */
		/* 821FCDECh case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 821FCDECh case    0:*/		return 0x821FCDF0;
		  /* 821FCDF0h */ case    1:  		/* bc 12, CR6_EQ, 30096 */
		/* 821FCDF0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82204380;  }
		/* 821FCDF0h case    1:*/		return 0x821FCDF4;
		  /* 821FCDF4h */ case    2:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FCDF4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FCDF4h case    2:*/		return 0x821FCDF8;
		  /* 821FCDF8h */ case    3:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821FCDF8h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821FCDF8h case    3:*/		return 0x821FCDFC;
		  /* 821FCDFCh */ case    4:  		/* cmplwi CR6, R10, 12288 */
		/* 821FCDFCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821FCDFCh case    4:*/		return 0x821FCE00;
		  /* 821FCE00h */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 821FCE00h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FCE18;  }
		/* 821FCE00h case    5:*/		return 0x821FCE04;
		  /* 821FCE04h */ case    6:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821FCE04h case    6:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821FCE04h case    6:*/		return 0x821FCE08;
		  /* 821FCE08h */ case    7:  		/* lis R10, 8 */
		/* 821FCE08h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821FCE08h case    7:*/		return 0x821FCE0C;
		  /* 821FCE0Ch */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821FCE0Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FCE0Ch case    8:*/		return 0x821FCE10;
		  /* 821FCE10h */ case    9:  		/* mr R11, R23 */
		/* 821FCE10h case    9:*/		regs.R11 = regs.R23;
		/* 821FCE10h case    9:*/		return 0x821FCE14;
		  /* 821FCE14h */ case   10:  		/* bc 12, CR6_GT, 8 */
		/* 821FCE14h case   10:*/		if ( regs.CR[6].gt ) { return 0x821FCE1C;  }
		/* 821FCE14h case   10:*/		return 0x821FCE18;
	}
	return 0x821FCE18;
} // Block from 821FCDECh-821FCE18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FCE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCE18);
		  /* 821FCE18h */ case    0:  		/* li R11, 0 */
		/* 821FCE18h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FCE18h case    0:*/		return 0x821FCE1C;
	}
	return 0x821FCE1C;
} // Block from 821FCE18h-821FCE1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FCE1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCE1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCE1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCE1C);
		  /* 821FCE1Ch */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821FCE1Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FCE1Ch case    0:*/		return 0x821FCE20;
		  /* 821FCE20h */ case    1:  		/* addic R10, R11, -1 */
		/* 821FCE20h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821FCE20h case    1:*/		return 0x821FCE24;
		  /* 821FCE24h */ case    2:  		/* subfe R11, R10, R11 */
		/* 821FCE24h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FCE24h case    2:*/		return 0x821FCE28;
		  /* 821FCE28h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 821FCE28h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821FCE28h case    3:*/		return 0x821FCE2C;
		  /* 821FCE2Ch */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 821FCE2Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821FCE48;  }
		/* 821FCE2Ch case    4:*/		return 0x821FCE30;
		  /* 821FCE30h */ case    5:  		/* lwz R11, <#[R24 + 48]> */
		/* 821FCE30h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 821FCE30h case    5:*/		return 0x821FCE34;
		  /* 821FCE34h */ case    6:  		/* lwz R10, <#[R24 + 44]> */
		/* 821FCE34h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000002C) );
		/* 821FCE34h case    6:*/		return 0x821FCE38;
		  /* 821FCE38h */ case    7:  		/* stw R20, <#[R1 + 296]> */
		/* 821FCE38h case    7:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000128) );
		/* 821FCE38h case    7:*/		return 0x821FCE3C;
		  /* 821FCE3Ch */ case    8:  		/* stw R19, <#[R1 + 300]> */
		/* 821FCE3Ch case    8:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000012C) );
		/* 821FCE3Ch case    8:*/		return 0x821FCE40;
		  /* 821FCE40h */ case    9:  		/* stw R11, <#[R24 + 44]> */
		/* 821FCE40h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821FCE40h case    9:*/		return 0x821FCE44;
		  /* 821FCE44h */ case   10:  		/* stw R10, <#[R24 + 48]> */
		/* 821FCE44h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000030) );
		/* 821FCE44h case   10:*/		return 0x821FCE48;
	}
	return 0x821FCE48;
} // Block from 821FCE1Ch-821FCE48h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FCE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCE48);
		  /* 821FCE48h */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FCE48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FCE48h case    0:*/		return 0x821FCE4C;
		  /* 821FCE4Ch */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821FCE4Ch case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821FCE4Ch case    1:*/		return 0x821FCE50;
		  /* 821FCE50h */ case    2:  		/* cmplwi CR6, R11, 12800 */
		/* 821FCE50h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003200);
		/* 821FCE50h case    2:*/		return 0x821FCE54;
		  /* 821FCE54h */ case    3:  		/* bc 4, CR6_EQ, 204 */
		/* 821FCE54h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FCF20;  }
		/* 821FCE54h case    3:*/		return 0x821FCE58;
		  /* 821FCE58h */ case    4:  		/* lwz R11, <#[R24 + 48]> */
		/* 821FCE58h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 821FCE58h case    4:*/		return 0x821FCE5C;
		  /* 821FCE5Ch */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821FCE5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCE5Ch case    5:*/		return 0x821FCE60;
		  /* 821FCE60h */ case    6:  		/* rlwimi R10, R23, 26, 4, 6 */
		/* 821FCE60h case    6:*/		cpu::op::rlwimi<0,26,4,6>(regs,&regs.R10,regs.R23);
		/* 821FCE60h case    6:*/		return 0x821FCE64;
		  /* 821FCE64h */ case    7:  		/* stw R10, <#[R11]> */
		/* 821FCE64h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCE64h case    7:*/		return 0x821FCE68;
		  /* 821FCE68h */ case    8:  		/* b 184 */
		/* 821FCE68h case    8:*/		return 0x821FCF20;
		/* 821FCE68h case    8:*/		return 0x821FCE6C;
	}
	return 0x821FCE6C;
} // Block from 821FCE48h-821FCE6Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FCE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCE6C);
		  /* 821FCE6Ch */ case    0:  		/* lwz R11, <#[R14 + 120]> */
		/* 821FCE6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000078) );
		/* 821FCE6Ch case    0:*/		return 0x821FCE70;
		  /* 821FCE70h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FCE70h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FCE70h case    1:*/		return 0x821FCE74;
		  /* 821FCE74h */ case    2:  		/* bc 12, CR6_EQ, 30232 */
		/* 821FCE74h case    2:*/		if ( regs.CR[6].eq ) { return 0x8220448C;  }
		/* 821FCE74h case    2:*/		return 0x821FCE78;
		  /* 821FCE78h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FCE78h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FCE78h case    3:*/		return 0x821FCE7C;
		  /* 821FCE7Ch */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821FCE7Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FCE7Ch case    4:*/		return 0x821FCE80;
		  /* 821FCE80h */ case    5:  		/* bc 4, CR6_EQ, 30220 */
		/* 821FCE80h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8220448C;  }
		/* 821FCE80h case    5:*/		return 0x821FCE84;
		  /* 821FCE84h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FCE84h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FCE84h case    6:*/		return 0x821FCE88;
		  /* 821FCE88h */ case    7:  		/* lwz R11, <#[R11 + 12]> */
		/* 821FCE88h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FCE88h case    7:*/		return 0x821FCE8C;
		  /* 821FCE8Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FCE8Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FCE8Ch case    8:*/		return 0x821FCE90;
		  /* 821FCE90h */ case    9:  		/* bc 12, CR6_EQ, 30192 */
		/* 821FCE90h case    9:*/		if ( regs.CR[6].eq ) { return 0x82204480;  }
		/* 821FCE90h case    9:*/		return 0x821FCE94;
		  /* 821FCE94h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FCE94h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FCE94h case   10:*/		return 0x821FCE98;
		  /* 821FCE98h */ case   11:  		/* cmpwi CR6, R10, 3 */
		/* 821FCE98h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821FCE98h case   11:*/		return 0x821FCE9C;
		  /* 821FCE9Ch */ case   12:  		/* bc 4, CR6_EQ, 30180 */
		/* 821FCE9Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82204480;  }
		/* 821FCE9Ch case   12:*/		return 0x821FCEA0;
		  /* 821FCEA0h */ case   13:  		/* lwz R10, <#[R11 + 16]> */
		/* 821FCEA0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821FCEA0h case   13:*/		return 0x821FCEA4;
		  /* 821FCEA4h */ case   14:  		/* cmpwi CR6, R10, 7 */
		/* 821FCEA4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000007);
		/* 821FCEA4h case   14:*/		return 0x821FCEA8;
		  /* 821FCEA8h */ case   15:  		/* bc 4, CR6_EQ, 29924 */
		/* 821FCEA8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8220438C;  }
		/* 821FCEA8h case   15:*/		return 0x821FCEAC;
		  /* 821FCEACh */ case   16:  		/* lfd FR0, <#[R11 + 24]> */
		/* 821FCEACh case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000018) );
		/* 821FCEACh case   16:*/		return 0x821FCEB0;
		  /* 821FCEB0h */ case   17:  		/* fctidz FR13, FR0 */
		/* 821FCEB0h case   17:*/		cpu::op::fctidz<0>(regs,&regs.FR13,regs.FR0);
		/* 821FCEB0h case   17:*/		return 0x821FCEB4;
		  /* 821FCEB4h */ case   18:  		/* stfd FR13, <#[R1 + 96]> */
		/* 821FCEB4h case   18:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000060) );
		/* 821FCEB4h case   18:*/		return 0x821FCEB8;
		  /* 821FCEB8h */ case   19:  		/* lwz R30, <#[R1 + 100]> */
		/* 821FCEB8h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 821FCEB8h case   19:*/		return 0x821FCEBC;
		  /* 821FCEBCh */ case   20:  		/* cmplwi CR6, R30, 1 */
		/* 821FCEBCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 821FCEBCh case   20:*/		return 0x821FCEC0;
		  /* 821FCEC0h */ case   21:  		/* bc 12, CR6_LT, 30132 */
		/* 821FCEC0h case   21:*/		if ( regs.CR[6].lt ) { return 0x82204474;  }
		/* 821FCEC0h case   21:*/		return 0x821FCEC4;
		  /* 821FCEC4h */ case   22:  		/* cmplwi CR6, R30, 5 */
		/* 821FCEC4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000005);
		/* 821FCEC4h case   22:*/		return 0x821FCEC8;
		  /* 821FCEC8h */ case   23:  		/* bc 12, CR6_GT, 30124 */
		/* 821FCEC8h case   23:*/		if ( regs.CR[6].gt ) { return 0x82204474;  }
		/* 821FCEC8h case   23:*/		return 0x821FCECC;
		  /* 821FCECCh */ case   24:  		/* rldicl R11, R30, 0, 32 */
		/* 821FCECCh case   24:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R30);
		/* 821FCECCh case   24:*/		return 0x821FCED0;
		  /* 821FCED0h */ case   25:  		/* std R11, <#[R1 + 1232]> */
		/* 821FCED0h case   25:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000004D0) );
		/* 821FCED0h case   25:*/		return 0x821FCED4;
		  /* 821FCED4h */ case   26:  		/* lfd FR13, <#[R1 + 1232]> */
		/* 821FCED4h case   26:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000004D0) );
		/* 821FCED4h case   26:*/		return 0x821FCED8;
		  /* 821FCED8h */ case   27:  		/* fcfid FR13, FR13 */
		/* 821FCED8h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821FCED8h case   27:*/		return 0x821FCEDC;
		  /* 821FCEDCh */ case   28:  		/* fcmpu CR6, FR13, FR0 */
		/* 821FCEDCh case   28:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821FCEDCh case   28:*/		return 0x821FCEE0;
		  /* 821FCEE0h */ case   29:  		/* bc 4, CR6_EQ, 30100 */
		/* 821FCEE0h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82204474;  }
		/* 821FCEE0h case   29:*/		return 0x821FCEE4;
		  /* 821FCEE4h */ case   30:  		/* li R6, 0 */
		/* 821FCEE4h case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FCEE4h case   30:*/		return 0x821FCEE8;
		  /* 821FCEE8h */ case   31:  		/* li R5, 0 */
		/* 821FCEE8h case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FCEE8h case   31:*/		return 0x821FCEEC;
		  /* 821FCEECh */ case   32:  		/* li R4, 94 */
		/* 821FCEECh case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x5E);
		/* 821FCEECh case   32:*/		return 0x821FCEF0;
		  /* 821FCEF0h */ case   33:  		/* mr R3, R31 */
		/* 821FCEF0h case   33:*/		regs.R3 = regs.R31;
		/* 821FCEF0h case   33:*/		return 0x821FCEF4;
		  /* 821FCEF4h */ case   34:  		/* bl -625348 */
		/* 821FCEF4h case   34:*/		regs.LR = 0x821FCEF8; return 0x82164430;
		/* 821FCEF4h case   34:*/		return 0x821FCEF8;
		  /* 821FCEF8h */ case   35:  		/* addi R11, R24, -12 */
		/* 821FCEF8h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFF4);
		/* 821FCEF8h case   35:*/		return 0x821FCEFC;
		  /* 821FCEFCh */ case   36:  		/* mr R6, R31 */
		/* 821FCEFCh case   36:*/		regs.R6 = regs.R31;
		/* 821FCEFCh case   36:*/		return 0x821FCF00;
		  /* 821FCF00h */ case   37:  		/* add R11, R3, R11 */
		/* 821FCF00h case   37:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821FCF00h case   37:*/		return 0x821FCF04;
		  /* 821FCF04h */ case   38:  		/* mr R5, R24 */
		/* 821FCF04h case   38:*/		regs.R5 = regs.R24;
		/* 821FCF04h case   38:*/		return 0x821FCF08;
		  /* 821FCF08h */ case   39:  		/* li R4, 2 */
		/* 821FCF08h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FCF08h case   39:*/		return 0x821FCF0C;
		  /* 821FCF0Ch */ case   40:  		/* lwz R10, <#[R11]> */
		/* 821FCF0Ch case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCF0Ch case   40:*/		return 0x821FCF10;
		  /* 821FCF10h */ case   41:  		/* rlwimi R30, R10, 0, 0, 28 */
		/* 821FCF10h case   41:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R30,regs.R10);
		/* 821FCF10h case   41:*/		return 0x821FCF14;
		  /* 821FCF14h */ case   42:  		/* stw R30, <#[R11]> */
		/* 821FCF14h case   42:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCF14h case   42:*/		return 0x821FCF18;
		  /* 821FCF18h */ case   43:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FCF18h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FCF18h case   43:*/		return 0x821FCF1C;
		  /* 821FCF1Ch */ case   44:  		/* bl -591180 */
		/* 821FCF1Ch case   44:*/		regs.LR = 0x821FCF20; return 0x8216C9D0;
		/* 821FCF1Ch case   44:*/		return 0x821FCF20;
	}
	return 0x821FCF20;
} // Block from 821FCE6Ch-821FCF20h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821FCF20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCF20);
		  /* 821FCF20h */ case    0:  		/* li R29, 0 */
		/* 821FCF20h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FCF20h case    0:*/		return 0x821FCF24;
		  /* 821FCF24h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 821FCF24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FCF24h case    1:*/		return 0x821FCF28;
		  /* 821FCF28h */ case    2:  		/* bc 12, CR6_EQ, 228 */
		/* 821FCF28h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FD00C;  }
		/* 821FCF28h case    2:*/		return 0x821FCF2C;
		  /* 821FCF2Ch */ case    3:  		/* addi R28, R1, 296 */
		/* 821FCF2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x128);
		/* 821FCF2Ch case    3:*/		return 0x821FCF30;
		  /* 821FCF30h */ case    4:  		/* addi R27, R24, 44 */
		/* 821FCF30h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R24,0x2C);
		/* 821FCF30h case    4:*/		return 0x821FCF34;
		  /* 821FCF34h */ case    5:  		/* lwz R4, <#[R28]> */
		/* 821FCF34h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 821FCF34h case    5:*/		return 0x821FCF38;
		  /* 821FCF38h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 821FCF38h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821FCF38h case    6:*/		return 0x821FCF3C;
		  /* 821FCF3Ch */ case    7:  		/* bc 12, CR6_EQ, 29804 */
		/* 821FCF3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x822043A8;  }
		/* 821FCF3Ch case    7:*/		return 0x821FCF40;
		  /* 821FCF40h */ case    8:  		/* lwz R11, <#[R4 + 4]> */
		/* 821FCF40h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821FCF40h case    8:*/		return 0x821FCF44;
		  /* 821FCF44h */ case    9:  		/* cmpwi CR6, R11, 28 */
		/* 821FCF44h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821FCF44h case    9:*/		return 0x821FCF48;
		  /* 821FCF48h */ case   10:  		/* bc 4, CR6_EQ, 29792 */
		/* 821FCF48h case   10:*/		if ( !regs.CR[6].eq ) { return 0x822043A8;  }
		/* 821FCF48h case   10:*/		return 0x821FCF4C;
		  /* 821FCF4Ch */ case   11:  		/* addi R5, R1, 96 */
		/* 821FCF4Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821FCF4Ch case   11:*/		return 0x821FCF50;
		  /* 821FCF50h */ case   12:  		/* mr R3, R31 */
		/* 821FCF50h case   12:*/		regs.R3 = regs.R31;
		/* 821FCF50h case   12:*/		return 0x821FCF54;
		  /* 821FCF54h */ case   13:  		/* bl -67436 */
		/* 821FCF54h case   13:*/		regs.LR = 0x821FCF58; return 0x821EC7E8;
		/* 821FCF54h case   13:*/		return 0x821FCF58;
		  /* 821FCF58h */ case   14:  		/* mr R10, R3 */
		/* 821FCF58h case   14:*/		regs.R10 = regs.R3;
		/* 821FCF58h case   14:*/		return 0x821FCF5C;
		  /* 821FCF5Ch */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 821FCF5Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821FCF5Ch case   15:*/		return 0x821FCF60;
		  /* 821FCF60h */ case   16:  		/* mr R3, R24 */
		/* 821FCF60h case   16:*/		regs.R3 = regs.R24;
		/* 821FCF60h case   16:*/		return 0x821FCF64;
		  /* 821FCF64h */ case   17:  		/* mulli R10, R10, 40 */
		/* 821FCF64h case   17:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 821FCF64h case   17:*/		return 0x821FCF68;
		  /* 821FCF68h */ case   18:  		/* add R11, R10, R11 */
		/* 821FCF68h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FCF68h case   18:*/		return 0x821FCF6C;
		  /* 821FCF6Ch */ case   19:  		/* lwz R11, <#[R11 + 4]> */
		/* 821FCF6Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821FCF6Ch case   19:*/		return 0x821FCF70;
		  /* 821FCF70h */ case   20:  		/* rlwinm R11, R11, 0, 25, 27 */
		/* 821FCF70h case   20:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R11,regs.R11);
		/* 821FCF70h case   20:*/		return 0x821FCF74;
		  /* 821FCF74h */ case   21:  		/* addi R11, R11, -48 */
		/* 821FCF74h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD0);
		/* 821FCF74h case   21:*/		return 0x821FCF78;
		  /* 821FCF78h */ case   22:  		/* cntlzw R11, R11 */
		/* 821FCF78h case   22:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821FCF78h case   22:*/		return 0x821FCF7C;
		  /* 821FCF7Ch */ case   23:  		/* rlwinm R30, R11, 27, 31, 31 */
		/* 821FCF7Ch case   23:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R30,regs.R11);
		/* 821FCF7Ch case   23:*/		return 0x821FCF80;
		  /* 821FCF80h */ case   24:  		/* bl -259656 */
		/* 821FCF80h case   24:*/		regs.LR = 0x821FCF84; return 0x821BD938;
		/* 821FCF80h case   24:*/		return 0x821FCF84;
		  /* 821FCF84h */ case   25:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FCF84h case   25:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FCF84h case   25:*/		return 0x821FCF88;
		  /* 821FCF88h */ case   26:  		/* bc 12, CR0_EQ, 68 */
		/* 821FCF88h case   26:*/		if ( regs.CR[0].eq ) { return 0x821FCFCC;  }
		/* 821FCF88h case   26:*/		return 0x821FCF8C;
		  /* 821FCF8Ch */ case   27:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FCF8Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FCF8Ch case   27:*/		return 0x821FCF90;
		  /* 821FCF90h */ case   28:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821FCF90h case   28:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821FCF90h case   28:*/		return 0x821FCF94;
		  /* 821FCF94h */ case   29:  		/* cmplwi CR6, R10, 12288 */
		/* 821FCF94h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821FCF94h case   29:*/		return 0x821FCF98;
		  /* 821FCF98h */ case   30:  		/* bc 4, CR6_EQ, 24 */
		/* 821FCF98h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821FCFB0;  }
		/* 821FCF98h case   30:*/		return 0x821FCF9C;
		  /* 821FCF9Ch */ case   31:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821FCF9Ch case   31:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821FCF9Ch case   31:*/		return 0x821FCFA0;
		  /* 821FCFA0h */ case   32:  		/* lis R10, 8 */
		/* 821FCFA0h case   32:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821FCFA0h case   32:*/		return 0x821FCFA4;
		  /* 821FCFA4h */ case   33:  		/* cmplw CR6, R11, R10 */
		/* 821FCFA4h case   33:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FCFA4h case   33:*/		return 0x821FCFA8;
		  /* 821FCFA8h */ case   34:  		/* mr R11, R23 */
		/* 821FCFA8h case   34:*/		regs.R11 = regs.R23;
		/* 821FCFA8h case   34:*/		return 0x821FCFAC;
		  /* 821FCFACh */ case   35:  		/* bc 12, CR6_GT, 8 */
		/* 821FCFACh case   35:*/		if ( regs.CR[6].gt ) { return 0x821FCFB4;  }
		/* 821FCFACh case   35:*/		return 0x821FCFB0;
	}
	return 0x821FCFB0;
} // Block from 821FCF20h-821FCFB0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821FCFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCFB0);
		  /* 821FCFB0h */ case    0:  		/* li R11, 0 */
		/* 821FCFB0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FCFB0h case    0:*/		return 0x821FCFB4;
	}
	return 0x821FCFB4;
} // Block from 821FCFB0h-821FCFB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FCFB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCFB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCFB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCFB4);
		  /* 821FCFB4h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821FCFB4h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FCFB4h case    0:*/		return 0x821FCFB8;
		  /* 821FCFB8h */ case    1:  		/* addic R10, R11, -1 */
		/* 821FCFB8h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821FCFB8h case    1:*/		return 0x821FCFBC;
		  /* 821FCFBCh */ case    2:  		/* subfe R11, R10, R11 */
		/* 821FCFBCh case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FCFBCh case    2:*/		return 0x821FCFC0;
		  /* 821FCFC0h */ case    3:  		/* mr R10, R23 */
		/* 821FCFC0h case    3:*/		regs.R10 = regs.R23;
		/* 821FCFC0h case    3:*/		return 0x821FCFC4;
		  /* 821FCFC4h */ case    4:  		/* cmplw CR6, R11, R29 */
		/* 821FCFC4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821FCFC4h case    4:*/		return 0x821FCFC8;
		  /* 821FCFC8h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 821FCFC8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FCFD0;  }
		/* 821FCFC8h case    5:*/		return 0x821FCFCC;
	}
	return 0x821FCFCC;
} // Block from 821FCFB4h-821FCFCCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FCFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCFCC);
		  /* 821FCFCCh */ case    0:  		/* li R10, 0 */
		/* 821FCFCCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821FCFCCh case    0:*/		return 0x821FCFD0;
	}
	return 0x821FCFD0;
} // Block from 821FCFCCh-821FCFD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FCFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCFD0);
		  /* 821FCFD0h */ case    0:  		/* rlwinm R11, R30, 0, 24, 31 */
		/* 821FCFD0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821FCFD0h case    0:*/		return 0x821FCFD4;
		  /* 821FCFD4h */ case    1:  		/* rlwinm R10, R10, 0, 24, 31 */
		/* 821FCFD4h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821FCFD4h case    1:*/		return 0x821FCFD8;
		  /* 821FCFD8h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 821FCFD8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FCFD8h case    2:*/		return 0x821FCFDC;
		  /* 821FCFDCh */ case    3:  		/* bc 4, CR6_EQ, 29628 */
		/* 821FCFDCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x82204398;  }
		/* 821FCFDCh case    3:*/		return 0x821FCFE0;
		  /* 821FCFE0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821FCFE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FCFE0h case    4:*/		return 0x821FCFE4;
		  /* 821FCFE4h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821FCFE4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FCFF8;  }
		/* 821FCFE4h case    5:*/		return 0x821FCFE8;
		  /* 821FCFE8h */ case    6:  		/* lwz R11, <#[R27]> */
		/* 821FCFE8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821FCFE8h case    6:*/		return 0x821FCFEC;
		  /* 821FCFECh */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821FCFECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCFECh case    7:*/		return 0x821FCFF0;
		  /* 821FCFF0h */ case    8:  		/* rlwimi R10, R23, 25, 4, 6 */
		/* 821FCFF0h case    8:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R23);
		/* 821FCFF0h case    8:*/		return 0x821FCFF4;
		  /* 821FCFF4h */ case    9:  		/* stw R10, <#[R11]> */
		/* 821FCFF4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FCFF4h case    9:*/		return 0x821FCFF8;
	}
	return 0x821FCFF8;
} // Block from 821FCFD0h-821FCFF8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821FCFF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FCFF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FCFF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FCFF8);
		  /* 821FCFF8h */ case    0:  		/* addi R29, R29, 1 */
		/* 821FCFF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821FCFF8h case    0:*/		return 0x821FCFFC;
		  /* 821FCFFCh */ case    1:  		/* addi R28, R28, 4 */
		/* 821FCFFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821FCFFCh case    1:*/		return 0x821FD000;
		  /* 821FD000h */ case    2:  		/* addi R27, R27, 4 */
		/* 821FD000h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821FD000h case    2:*/		return 0x821FD004;
		  /* 821FD004h */ case    3:  		/* cmplw CR6, R29, R25 */
		/* 821FD004h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 821FD004h case    3:*/		return 0x821FD008;
		  /* 821FD008h */ case    4:  		/* bc 12, CR6_LT, -212 */
		/* 821FD008h case    4:*/		if ( regs.CR[6].lt ) { return 0x821FCF34;  }
		/* 821FD008h case    4:*/		return 0x821FD00C;
	}
	return 0x821FD00C;
} // Block from 821FCFF8h-821FD00Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FD00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD00C);
		  /* 821FD00Ch */ case    0:  		/* lwz R11, <#[R14 + 100]> */
		/* 821FD00Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000064) );
		/* 821FD00Ch case    0:*/		return 0x821FD010;
		  /* 821FD010h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FD010h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD010h case    1:*/		return 0x821FD014;
		  /* 821FD014h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 821FD014h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FD064;  }
		/* 821FD014h case    2:*/		return 0x821FD018;
		  /* 821FD018h */ case    3:  		/* mr R3, R24 */
		/* 821FD018h case    3:*/		regs.R3 = regs.R24;
		/* 821FD018h case    3:*/		return 0x821FD01C;
		  /* 821FD01Ch */ case    4:  		/* bl -546300 */
		/* 821FD01Ch case    4:*/		regs.LR = 0x821FD020; return 0x82177A20;
		/* 821FD01Ch case    4:*/		return 0x821FD020;
		  /* 821FD020h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FD020h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FD020h case    5:*/		return 0x821FD024;
		  /* 821FD024h */ case    6:  		/* bc 12, CR0_EQ, 29584 */
		/* 821FD024h case    6:*/		if ( regs.CR[0].eq ) { return 0x822043B4;  }
		/* 821FD024h case    6:*/		return 0x821FD028;
		  /* 821FD028h */ case    7:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FD028h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD028h case    7:*/		return 0x821FD02C;
		  /* 821FD02Ch */ case    8:  		/* oris R10, R11, 2 */
		/* 821FD02Ch case    8:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R11,0x2);
		/* 821FD02Ch case    8:*/		return 0x821FD030;
		  /* 821FD030h */ case    9:  		/* stw R10, <#[R24 + 8]> */
		/* 821FD030h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD030h case    9:*/		return 0x821FD034;
		  /* 821FD034h */ case   10:  		/* lwz R11, <#[R14 + 100]> */
		/* 821FD034h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000064) );
		/* 821FD034h case   10:*/		return 0x821FD038;
		  /* 821FD038h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821FD038h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD038h case   11:*/		return 0x821FD03C;
		  /* 821FD03Ch */ case   12:  		/* bc 12, CR6_EQ, 29572 */
		/* 821FD03Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x822043C0;  }
		/* 821FD03Ch case   12:*/		return 0x821FD040;
		  /* 821FD040h */ case   13:  		/* lwz R9, <#[R11 + 4]> */
		/* 821FD040h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD040h case   13:*/		return 0x821FD044;
		  /* 821FD044h */ case   14:  		/* cmpwi CR6, R9, 28 */
		/* 821FD044h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000001C);
		/* 821FD044h case   14:*/		return 0x821FD048;
		  /* 821FD048h */ case   15:  		/* bc 4, CR6_EQ, 29560 */
		/* 821FD048h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822043C0;  }
		/* 821FD048h case   15:*/		return 0x821FD04C;
		  /* 821FD04Ch */ case   16:  		/* lwz R11, <#[R11 + 20]> */
		/* 821FD04Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821FD04Ch case   16:*/		return 0x821FD050;
		  /* 821FD050h */ case   17:  		/* andis. R11, R11, 3328 */
		/* 821FD050h case   17:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R11,0xD00);
		/* 821FD050h case   17:*/		return 0x821FD054;
		  /* 821FD054h */ case   18:  		/* cmplwi CR0, R11, 0 */
		/* 821FD054h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821FD054h case   18:*/		return 0x821FD058;
		  /* 821FD058h */ case   19:  		/* bc 4, CR0_EQ, 12 */
		/* 821FD058h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821FD064;  }
		/* 821FD058h case   19:*/		return 0x821FD05C;
		  /* 821FD05Ch */ case   20:  		/* oris R11, R10, 4 */
		/* 821FD05Ch case   20:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821FD05Ch case   20:*/		return 0x821FD060;
		  /* 821FD060h */ case   21:  		/* stw R11, <#[R24 + 8]> */
		/* 821FD060h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD060h case   21:*/		return 0x821FD064;
	}
	return 0x821FD064;
} // Block from 821FD00Ch-821FD064h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821FD064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD064);
		  /* 821FD064h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 821FD064h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821FD064h case    0:*/		return 0x821FD068;
		  /* 821FD068h */ case    1:  		/* bc 12, CR6_EQ, 196 */
		/* 821FD068h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FD12C;  }
		/* 821FD068h case    1:*/		return 0x821FD06C;
		  /* 821FD06Ch */ case    2:  		/* lwz R11, <#[R18 + 16]> */
		/* 821FD06Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000010) );
		/* 821FD06Ch case    2:*/		return 0x821FD070;
		  /* 821FD070h */ case    3:  		/* cmplwi CR6, R11, 4 */
		/* 821FD070h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821FD070h case    3:*/		return 0x821FD074;
		  /* 821FD074h */ case    4:  		/* bc 4, CR6_EQ, 184 */
		/* 821FD074h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821FD12C;  }
		/* 821FD074h case    4:*/		return 0x821FD078;
		  /* 821FD078h */ case    5:  		/* lwz R11, <#[R18 + 24]> */
		/* 821FD078h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000018) );
		/* 821FD078h case    5:*/		return 0x821FD07C;
		  /* 821FD07Ch */ case    6:  		/* cmplwi CR6, R11, 32 */
		/* 821FD07Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821FD07Ch case    6:*/		return 0x821FD080;
		  /* 821FD080h */ case    7:  		/* bc 4, CR6_EQ, 44 */
		/* 821FD080h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821FD0AC;  }
		/* 821FD080h case    7:*/		return 0x821FD084;
		  /* 821FD084h */ case    8:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FD084h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD084h case    8:*/		return 0x821FD088;
		  /* 821FD088h */ case    9:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821FD088h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821FD088h case    9:*/		return 0x821FD08C;
		  /* 821FD08Ch */ case   10:  		/* cmplwi CR6, R10, 1536 */
		/* 821FD08Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000600);
		/* 821FD08Ch case   10:*/		return 0x821FD090;
		  /* 821FD090h */ case   11:  		/* bc 4, CR6_EQ, 29500 */
		/* 821FD090h case   11:*/		if ( !regs.CR[6].eq ) { return 0x822043CC;  }
		/* 821FD090h case   11:*/		return 0x821FD094;
		  /* 821FD094h */ case   12:  		/* li R10, 105 */
		/* 821FD094h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x69);
		/* 821FD094h case   12:*/		return 0x821FD098;
		  /* 821FD098h */ case   13:  		/* rlwimi R11, R10, 7, 18, 24 */
		/* 821FD098h case   13:*/		cpu::op::rlwimi<0,7,18,24>(regs,&regs.R11,regs.R10);
		/* 821FD098h case   13:*/		return 0x821FD09C;
		  /* 821FD09Ch */ case   14:  		/* stw R11, <#[R24 + 8]> */
		/* 821FD09Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD09Ch case   14:*/		return 0x821FD0A0;
		  /* 821FD0A0h */ case   15:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD0A0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD0A0h case   15:*/		return 0x821FD0A4;
		  /* 821FD0A4h */ case   16:  		/* oris R11, R11, 32 */
		/* 821FD0A4h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821FD0A4h case   16:*/		return 0x821FD0A8;
		  /* 821FD0A8h */ case   17:  		/* stw R11, <#[R31 + 40]> */
		/* 821FD0A8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD0A8h case   17:*/		return 0x821FD0AC;
	}
	return 0x821FD0AC;
} // Block from 821FD064h-821FD0ACh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821FD0ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD0AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD0AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD0AC);
		  /* 821FD0ACh */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FD0ACh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD0ACh case    0:*/		return 0x821FD0B0;
		  /* 821FD0B0h */ case    1:  		/* li R8, 0 */
		/* 821FD0B0h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821FD0B0h case    1:*/		return 0x821FD0B4;
		  /* 821FD0B4h */ case    2:  		/* li R7, 0 */
		/* 821FD0B4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FD0B4h case    2:*/		return 0x821FD0B8;
		  /* 821FD0B8h */ case    3:  		/* addi R5, R4, 32 */
		/* 821FD0B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x20);
		/* 821FD0B8h case    3:*/		return 0x821FD0BC;
		  /* 821FD0BCh */ case    4:  		/* li R6, 117 */
		/* 821FD0BCh case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821FD0BCh case    4:*/		return 0x821FD0C0;
		  /* 821FD0C0h */ case    5:  		/* mr R3, R31 */
		/* 821FD0C0h case    5:*/		regs.R3 = regs.R31;
		/* 821FD0C0h case    5:*/		return 0x821FD0C4;
		  /* 821FD0C4h */ case    6:  		/* bl 162004 */
		/* 821FD0C4h case    6:*/		regs.LR = 0x821FD0C8; return 0x82224998;
		/* 821FD0C4h case    6:*/		return 0x821FD0C8;
		  /* 821FD0C8h */ case    7:  		/* mr R30, R3 */
		/* 821FD0C8h case    7:*/		regs.R30 = regs.R3;
		/* 821FD0C8h case    7:*/		return 0x821FD0CC;
		  /* 821FD0CCh */ case    8:  		/* mr R4, R24 */
		/* 821FD0CCh case    8:*/		regs.R4 = regs.R24;
		/* 821FD0CCh case    8:*/		return 0x821FD0D0;
		  /* 821FD0D0h */ case    9:  		/* mr R3, R31 */
		/* 821FD0D0h case    9:*/		regs.R3 = regs.R31;
		/* 821FD0D0h case    9:*/		return 0x821FD0D4;
		  /* 821FD0D4h */ case   10:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FD0D4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FD0D4h case   10:*/		return 0x821FD0D8;
		  /* 821FD0D8h */ case   11:  		/* oris R11, R11, 512 */
		/* 821FD0D8h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821FD0D8h case   11:*/		return 0x821FD0DC;
		  /* 821FD0DCh */ case   12:  		/* stw R11, <#[R30 + 8]> */
		/* 821FD0DCh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FD0DCh case   12:*/		return 0x821FD0E0;
		  /* 821FD0E0h */ case   13:  		/* bl -544992 */
		/* 821FD0E0h case   13:*/		regs.LR = 0x821FD0E4; return 0x82178000;
		/* 821FD0E0h case   13:*/		return 0x821FD0E4;
		  /* 821FD0E4h */ case   14:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FD0E4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD0E4h case   14:*/		return 0x821FD0E8;
		  /* 821FD0E8h */ case   15:  		/* lwz R10, <#[R18 + 24]> */
		/* 821FD0E8h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000018) );
		/* 821FD0E8h case   15:*/		return 0x821FD0EC;
		  /* 821FD0ECh */ case   16:  		/* mr R5, R22 */
		/* 821FD0ECh case   16:*/		regs.R5 = regs.R22;
		/* 821FD0ECh case   16:*/		return 0x821FD0F0;
		  /* 821FD0F0h */ case   17:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821FD0F0h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821FD0F0h case   17:*/		return 0x821FD0F4;
		  /* 821FD0F4h */ case   18:  		/* rlwimi R5, R10, 4, 0, 27 */
		/* 821FD0F4h case   18:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R5,regs.R10);
		/* 821FD0F4h case   18:*/		return 0x821FD0F8;
		  /* 821FD0F8h */ case   19:  		/* addi R11, R11, -13440 */
		/* 821FD0F8h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFCB80);
		/* 821FD0F8h case   19:*/		return 0x821FD0FC;
		  /* 821FD0FCh */ case   20:  		/* mr R4, R3 */
		/* 821FD0FCh case   20:*/		regs.R4 = regs.R3;
		/* 821FD0FCh case   20:*/		return 0x821FD100;
		  /* 821FD100h */ case   21:  		/* addic R10, R11, -1 */
		/* 821FD100h case   21:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821FD100h case   21:*/		return 0x821FD104;
		  /* 821FD104h */ case   22:  		/* mr R6, R30 */
		/* 821FD104h case   22:*/		regs.R6 = regs.R30;
		/* 821FD104h case   22:*/		return 0x821FD108;
		  /* 821FD108h */ case   23:  		/* subfe R7, R10, R11 */
		/* 821FD108h case   23:*/		cpu::op::subfe<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 821FD108h case   23:*/		return 0x821FD10C;
		  /* 821FD10Ch */ case   24:  		/* mr R3, R31 */
		/* 821FD10Ch case   24:*/		regs.R3 = regs.R31;
		/* 821FD10Ch case   24:*/		return 0x821FD110;
		  /* 821FD110h */ case   25:  		/* bl 169872 */
		/* 821FD110h case   25:*/		regs.LR = 0x821FD114; return 0x822268A0;
		/* 821FD110h case   25:*/		return 0x821FD114;
		  /* 821FD114h */ case   26:  		/* mr R11, R3 */
		/* 821FD114h case   26:*/		regs.R11 = regs.R3;
		/* 821FD114h case   26:*/		return 0x821FD118;
		  /* 821FD118h */ case   27:  		/* mr R6, R31 */
		/* 821FD118h case   27:*/		regs.R6 = regs.R31;
		/* 821FD118h case   27:*/		return 0x821FD11C;
		  /* 821FD11Ch */ case   28:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FD11Ch case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD11Ch case   28:*/		return 0x821FD120;
		  /* 821FD120h */ case   29:  		/* li R4, 2 */
		/* 821FD120h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FD120h case   29:*/		return 0x821FD124;
		  /* 821FD124h */ case   30:  		/* lwz R5, <#[R11 + 12]> */
		/* 821FD124h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FD124h case   30:*/		return 0x821FD128;
		  /* 821FD128h */ case   31:  		/* bl -591704 */
		/* 821FD128h case   31:*/		regs.LR = 0x821FD12C; return 0x8216C9D0;
		/* 821FD128h case   31:*/		return 0x821FD12C;
	}
	return 0x821FD12C;
} // Block from 821FD0ACh-821FD12Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 821FD12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD12C);
		  /* 821FD12Ch */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FD12Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD12Ch case    0:*/		return 0x821FD130;
		  /* 821FD130h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821FD130h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821FD130h case    1:*/		return 0x821FD134;
		  /* 821FD134h */ case    2:  		/* cmplwi CR6, R11, 25 */
		/* 821FD134h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000019);
		/* 821FD134h case    2:*/		return 0x821FD138;
		  /* 821FD138h */ case    3:  		/* bc 12, CR6_LT, 12 */
		/* 821FD138h case    3:*/		if ( regs.CR[6].lt ) { return 0x821FD144;  }
		/* 821FD138h case    3:*/		return 0x821FD13C;
		  /* 821FD13Ch */ case    4:  		/* cmplwi CR6, R11, 28 */
		/* 821FD13Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001C);
		/* 821FD13Ch case    4:*/		return 0x821FD140;
		  /* 821FD140h */ case    5:  		/* bc 4, CR6_GT, 20 */
		/* 821FD140h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821FD154;  }
		/* 821FD140h case    5:*/		return 0x821FD144;
	}
	return 0x821FD144;
} // Block from 821FD12Ch-821FD144h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FD144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD144);
		  /* 821FD144h */ case    0:  		/* cmplwi CR6, R11, 67 */
		/* 821FD144h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000043);
		/* 821FD144h case    0:*/		return 0x821FD148;
		  /* 821FD148h */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 821FD148h case    1:*/		if ( regs.CR[6].lt ) { return 0x821FD15C;  }
		/* 821FD148h case    1:*/		return 0x821FD14C;
		  /* 821FD14Ch */ case    2:  		/* cmplwi CR6, R11, 71 */
		/* 821FD14Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000047);
		/* 821FD14Ch case    2:*/		return 0x821FD150;
		  /* 821FD150h */ case    3:  		/* bc 12, CR6_GT, 12 */
		/* 821FD150h case    3:*/		if ( regs.CR[6].gt ) { return 0x821FD15C;  }
		/* 821FD150h case    3:*/		return 0x821FD154;
	}
	return 0x821FD154;
} // Block from 821FD144h-821FD154h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FD154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD154);
		  /* 821FD154h */ case    0:  		/* mr R11, R23 */
		/* 821FD154h case    0:*/		regs.R11 = regs.R23;
		/* 821FD154h case    0:*/		return 0x821FD158;
		  /* 821FD158h */ case    1:  		/* b 8 */
		/* 821FD158h case    1:*/		return 0x821FD160;
		/* 821FD158h case    1:*/		return 0x821FD15C;
	}
	return 0x821FD15C;
} // Block from 821FD154h-821FD15Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FD15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD15C);
		  /* 821FD15Ch */ case    0:  		/* li R11, 0 */
		/* 821FD15Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FD15Ch case    0:*/		return 0x821FD160;
	}
	return 0x821FD160;
} // Block from 821FD15Ch-821FD160h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD160);
		  /* 821FD160h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FD160h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FD160h case    0:*/		return 0x821FD164;
		  /* 821FD164h */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 821FD164h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FD190;  }
		/* 821FD164h case    1:*/		return 0x821FD168;
		  /* 821FD168h */ case    2:  		/* lwz R11, <#[R31 + 48]> */
		/* 821FD168h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821FD168h case    2:*/		return 0x821FD16C;
		  /* 821FD16Ch */ case    3:  		/* lis R10, -1 */
		/* 821FD16Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821FD16Ch case    3:*/		return 0x821FD170;
		  /* 821FD170h */ case    4:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821FD170h case    4:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821FD170h case    4:*/		return 0x821FD174;
		  /* 821FD174h */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 821FD174h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FD174h case    5:*/		return 0x821FD178;
		  /* 821FD178h */ case    6:  		/* bc 4, CR6_EQ, 29280 */
		/* 821FD178h case    6:*/		if ( !regs.CR[6].eq ) { return 0x822043D8;  }
		/* 821FD178h case    6:*/		return 0x821FD17C;
		  /* 821FD17Ch */ case    7:  		/* mr R6, R31 */
		/* 821FD17Ch case    7:*/		regs.R6 = regs.R31;
		/* 821FD17Ch case    7:*/		return 0x821FD180;
		  /* 821FD180h */ case    8:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FD180h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD180h case    8:*/		return 0x821FD184;
		  /* 821FD184h */ case    9:  		/* mr R5, R24 */
		/* 821FD184h case    9:*/		regs.R5 = regs.R24;
		/* 821FD184h case    9:*/		return 0x821FD188;
		  /* 821FD188h */ case   10:  		/* li R4, 0 */
		/* 821FD188h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FD188h case   10:*/		return 0x821FD18C;
		  /* 821FD18Ch */ case   11:  		/* bl -591804 */
		/* 821FD18Ch case   11:*/		regs.LR = 0x821FD190; return 0x8216C9D0;
		/* 821FD18Ch case   11:*/		return 0x821FD190;
	}
	return 0x821FD190;
} // Block from 821FD160h-821FD190h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FD190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD190);
		  /* 821FD190h */ case    0:  		/* mr R3, R24 */
		/* 821FD190h case    0:*/		regs.R3 = regs.R24;
		/* 821FD190h case    0:*/		return 0x821FD194;
		  /* 821FD194h */ case    1:  		/* bl -71436 */
		/* 821FD194h case    1:*/		regs.LR = 0x821FD198; return 0x821EBA88;
		/* 821FD194h case    1:*/		return 0x821FD198;
		  /* 821FD198h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FD198h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FD198h case    2:*/		return 0x821FD19C;
		  /* 821FD19Ch */ case    3:  		/* bc 12, CR0_EQ, 288 */
		/* 821FD19Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821FD2BC;  }
		/* 821FD19Ch case    3:*/		return 0x821FD1A0;
		  /* 821FD1A0h */ case    4:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD1A0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD1A0h case    4:*/		return 0x821FD1A4;
		  /* 821FD1A4h */ case    5:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD1A4h case    5:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD1A4h case    5:*/		return 0x821FD1A8;
		  /* 821FD1A8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD1A8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821FD1B8;  }
		/* 821FD1A8h case    6:*/		return 0x821FD1AC;
		  /* 821FD1ACh */ case    7:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD1ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD1ACh case    7:*/		return 0x821FD1B0;
		  /* 821FD1B0h */ case    8:  		/* addi R10, R11, 7 */
		/* 821FD1B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x7);
		/* 821FD1B0h case    8:*/		return 0x821FD1B4;
		  /* 821FD1B4h */ case    9:  		/* b 8 */
		/* 821FD1B4h case    9:*/		return 0x821FD1BC;
		/* 821FD1B4h case    9:*/		return 0x821FD1B8;
	}
	return 0x821FD1B8;
} // Block from 821FD190h-821FD1B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821FD1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD1B8);
		  /* 821FD1B8h */ case    0:  		/* li R10, 723 */
		/* 821FD1B8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2D3);
		/* 821FD1B8h case    0:*/		return 0x821FD1BC;
	}
	return 0x821FD1BC;
} // Block from 821FD1B8h-821FD1BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD1BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD1BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD1BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD1BC);
		  /* 821FD1BCh */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD1BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD1BCh case    0:*/		return 0x821FD1C0;
		  /* 821FD1C0h */ case    1:  		/* lwz R9, <#[R11 + 80]> */
		/* 821FD1C0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000050) );
		/* 821FD1C0h case    1:*/		return 0x821FD1C4;
		  /* 821FD1C4h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821FD1C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FD1C4h case    2:*/		return 0x821FD1C8;
		  /* 821FD1C8h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821FD1C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FD1DC;  }
		/* 821FD1C8h case    3:*/		return 0x821FD1CC;
		  /* 821FD1CCh */ case    4:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821FD1CCh case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821FD1CCh case    4:*/		return 0x821FD1D0;
		  /* 821FD1D0h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821FD1D0h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821FD1D0h case    5:*/		return 0x821FD1D4;
		  /* 821FD1D4h */ case    6:  		/* lwzx R4, <#[R10 + R11]> */
		/* 821FD1D4h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FD1D4h case    6:*/		return 0x821FD1D8;
		  /* 821FD1D8h */ case    7:  		/* b 8 */
		/* 821FD1D8h case    7:*/		return 0x821FD1E0;
		/* 821FD1D8h case    7:*/		return 0x821FD1DC;
	}
	return 0x821FD1DC;
} // Block from 821FD1BCh-821FD1DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD1DC);
		  /* 821FD1DCh */ case    0:  		/* li R4, 0 */
		/* 821FD1DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FD1DCh case    0:*/		return 0x821FD1E0;
	}
	return 0x821FD1E0;
} // Block from 821FD1DCh-821FD1E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD1E0);
		  /* 821FD1E0h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821FD1E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821FD1E0h case    0:*/		return 0x821FD1E4;
		  /* 821FD1E4h */ case    1:  		/* bc 12, CR6_EQ, 29192 */
		/* 821FD1E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x822043EC;  }
		/* 821FD1E4h case    1:*/		return 0x821FD1E8;
		  /* 821FD1E8h */ case    2:  		/* lwz R11, <#[R4]> */
		/* 821FD1E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821FD1E8h case    2:*/		return 0x821FD1EC;
		  /* 821FD1ECh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821FD1ECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD1ECh case    3:*/		return 0x821FD1F0;
		  /* 821FD1F0h */ case    4:  		/* bc 12, CR6_EQ, 29180 */
		/* 821FD1F0h case    4:*/		if ( regs.CR[6].eq ) { return 0x822043EC;  }
		/* 821FD1F0h case    4:*/		return 0x821FD1F4;
		  /* 821FD1F4h */ case    5:  		/* mr R3, R31 */
		/* 821FD1F4h case    5:*/		regs.R3 = regs.R31;
		/* 821FD1F4h case    5:*/		return 0x821FD1F8;
		  /* 821FD1F8h */ case    6:  		/* bl -44664 */
		/* 821FD1F8h case    6:*/		regs.LR = 0x821FD1FC; return 0x821F2380;
		/* 821FD1F8h case    6:*/		return 0x821FD1FC;
		  /* 821FD1FCh */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821FD1FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FD1FCh case    7:*/		return 0x821FD200;
		  /* 821FD200h */ case    8:  		/* lwz R4, <#[R3 + 12]> */
		/* 821FD200h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000000C) );
		/* 821FD200h case    8:*/		return 0x821FD204;
		  /* 821FD204h */ case    9:  		/* mr R6, R3 */
		/* 821FD204h case    9:*/		regs.R6 = regs.R3;
		/* 821FD204h case    9:*/		return 0x821FD208;
		  /* 821FD208h */ case   10:  		/* rlwinm. R10, R11, 0, 27, 31 */
		/* 821FD208h case   10:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821FD208h case   10:*/		return 0x821FD20C;
		  /* 821FD20Ch */ case   11:  		/* bc 4, CR0_EQ, 60 */
		/* 821FD20Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821FD248;  }
		/* 821FD20Ch case   11:*/		return 0x821FD210;
		  /* 821FD210h */ case   12:  		/* lwz R10, <#[R4 + 8]> */
		/* 821FD210h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821FD210h case   12:*/		return 0x821FD214;
		  /* 821FD214h */ case   13:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821FD214h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821FD214h case   13:*/		return 0x821FD218;
		  /* 821FD218h */ case   14:  		/* cmplwi CR6, R10, 32 */
		/* 821FD218h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000020);
		/* 821FD218h case   14:*/		return 0x821FD21C;
		  /* 821FD21Ch */ case   15:  		/* bc 12, CR6_LT, 16 */
		/* 821FD21Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x821FD22C;  }
		/* 821FD21Ch case   15:*/		return 0x821FD220;
		  /* 821FD220h */ case   16:  		/* cmplwi CR6, R10, 82 */
		/* 821FD220h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000052);
		/* 821FD220h case   16:*/		return 0x821FD224;
		  /* 821FD224h */ case   17:  		/* mr R10, R23 */
		/* 821FD224h case   17:*/		regs.R10 = regs.R23;
		/* 821FD224h case   17:*/		return 0x821FD228;
		  /* 821FD228h */ case   18:  		/* bc 4, CR6_GT, 8 */
		/* 821FD228h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821FD230;  }
		/* 821FD228h case   18:*/		return 0x821FD22C;
	}
	return 0x821FD22C;
} // Block from 821FD1E0h-821FD22Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821FD22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD22C);
		  /* 821FD22Ch */ case    0:  		/* li R10, 0 */
		/* 821FD22Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821FD22Ch case    0:*/		return 0x821FD230;
	}
	return 0x821FD230;
} // Block from 821FD22Ch-821FD230h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD230);
		  /* 821FD230h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821FD230h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821FD230h case    0:*/		return 0x821FD234;
		  /* 821FD234h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821FD234h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FD248;  }
		/* 821FD234h case    1:*/		return 0x821FD238;
		  /* 821FD238h */ case    2:  		/* lwz R10, <#[R4 + 28]> */
		/* 821FD238h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 821FD238h case    2:*/		return 0x821FD23C;
		  /* 821FD23Ch */ case    3:  		/* lwz R9, <#[R31 + 564]> */
		/* 821FD23Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD23Ch case    3:*/		return 0x821FD240;
		  /* 821FD240h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821FD240h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821FD240h case    4:*/		return 0x821FD244;
		  /* 821FD244h */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 821FD244h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FD2A4;  }
		/* 821FD244h case    5:*/		return 0x821FD248;
	}
	return 0x821FD248;
} // Block from 821FD230h-821FD248h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FD248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD248);
		  /* 821FD248h */ case    0:  		/* rlwimi R11, R23, 26, 4, 6 */
		/* 821FD248h case    0:*/		cpu::op::rlwimi<0,26,4,6>(regs,&regs.R11,regs.R23);
		/* 821FD248h case    0:*/		return 0x821FD24C;
		  /* 821FD24Ch */ case    1:  		/* li R10, 7168 */
		/* 821FD24Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1C00);
		/* 821FD24Ch case    1:*/		return 0x821FD250;
		  /* 821FD250h */ case    2:  		/* li R5, 0 */
		/* 821FD250h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FD250h case    2:*/		return 0x821FD254;
		  /* 821FD254h */ case    3:  		/* rlwimi R10, R11, 2, 23, 24 */
		/* 821FD254h case    3:*/		cpu::op::rlwimi<0,2,23,24>(regs,&regs.R10,regs.R11);
		/* 821FD254h case    3:*/		return 0x821FD258;
		  /* 821FD258h */ case    4:  		/* rlwinm R11, R11, 0, 25, 21 */
		/* 821FD258h case    4:*/		cpu::op::rlwinm<0,0,25,21>(regs,&regs.R11,regs.R11);
		/* 821FD258h case    4:*/		return 0x821FD25C;
		  /* 821FD25Ch */ case    5:  		/* mr R3, R31 */
		/* 821FD25Ch case    5:*/		regs.R3 = regs.R31;
		/* 821FD25Ch case    5:*/		return 0x821FD260;
		  /* 821FD260h */ case    6:  		/* or R11, R10, R11 */
		/* 821FD260h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821FD260h case    6:*/		return 0x821FD264;
		  /* 821FD264h */ case    7:  		/* stw R11, <#[R6]> */
		/* 821FD264h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821FD264h case    7:*/		return 0x821FD268;
		  /* 821FD268h */ case    8:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FD268h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD268h case    8:*/		return 0x821FD26C;
		  /* 821FD26Ch */ case    9:  		/* bl -440084 */
		/* 821FD26Ch case    9:*/		regs.LR = 0x821FD270; return 0x82191B58;
		/* 821FD26Ch case    9:*/		return 0x821FD270;
		  /* 821FD270h */ case   10:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821FD270h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821FD270h case   10:*/		return 0x821FD274;
		  /* 821FD274h */ case   11:  		/* lwz R9, <#[R26]> */
		/* 821FD274h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD274h case   11:*/		return 0x821FD278;
		  /* 821FD278h */ case   12:  		/* addi R11, R11, 36 */
		/* 821FD278h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821FD278h case   12:*/		return 0x821FD27C;
		  /* 821FD27Ch */ case   13:  		/* addi R8, R26, -36 */
		/* 821FD27Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R26,0xFFFFFFDC);
		/* 821FD27Ch case   13:*/		return 0x821FD280;
		  /* 821FD280h */ case   14:  		/* addi R7, R11, -36 */
		/* 821FD280h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821FD280h case   14:*/		return 0x821FD284;
		  /* 821FD284h */ case   15:  		/* addi R10, R11, 4 */
		/* 821FD284h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FD284h case   15:*/		return 0x821FD288;
		  /* 821FD288h */ case   16:  		/* mr R4, R3 */
		/* 821FD288h case   16:*/		regs.R4 = regs.R3;
		/* 821FD288h case   16:*/		return 0x821FD28C;
		  /* 821FD28Ch */ case   17:  		/* stw R9, <#[R11]> */
		/* 821FD28Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821FD28Ch case   17:*/		return 0x821FD290;
		  /* 821FD290h */ case   18:  		/* lwz R9, <#[R26]> */
		/* 821FD290h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD290h case   18:*/		return 0x821FD294;
		  /* 821FD294h */ case   19:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821FD294h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821FD294h case   19:*/		return 0x821FD298;
		  /* 821FD298h */ case   20:  		/* stw R7, <#[R9]> */
		/* 821FD298h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821FD298h case   20:*/		return 0x821FD29C;
		  /* 821FD29Ch */ case   21:  		/* stw R8, <#[R11 + 4]> */
		/* 821FD29Ch case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD29Ch case   21:*/		return 0x821FD2A0;
		  /* 821FD2A0h */ case   22:  		/* stw R10, <#[R26]> */
		/* 821FD2A0h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD2A0h case   22:*/		return 0x821FD2A4;
	}
	return 0x821FD2A4;
} // Block from 821FD248h-821FD2A4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821FD2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD2A4);
		  /* 821FD2A4h */ case    0:  		/* li R5, 6 */
		/* 821FD2A4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821FD2A4h case    0:*/		return 0x821FD2A8;
		  /* 821FD2A8h */ case    1:  		/* mr R3, R31 */
		/* 821FD2A8h case    1:*/		regs.R3 = regs.R31;
		/* 821FD2A8h case    1:*/		return 0x821FD2AC;
		  /* 821FD2ACh */ case    2:  		/* bl -576348 */
		/* 821FD2ACh case    2:*/		regs.LR = 0x821FD2B0; return 0x82170750;
		/* 821FD2ACh case    2:*/		return 0x821FD2B0;
		  /* 821FD2B0h */ case    3:  		/* mr R4, R3 */
		/* 821FD2B0h case    3:*/		regs.R4 = regs.R3;
		/* 821FD2B0h case    3:*/		return 0x821FD2B4;
		  /* 821FD2B4h */ case    4:  		/* mr R3, R24 */
		/* 821FD2B4h case    4:*/		regs.R3 = regs.R24;
		/* 821FD2B4h case    4:*/		return 0x821FD2B8;
		  /* 821FD2B8h */ case    5:  		/* bl -545008 */
		/* 821FD2B8h case    5:*/		regs.LR = 0x821FD2BC; return 0x821781C8;
		/* 821FD2B8h case    5:*/		return 0x821FD2BC;
	}
	return 0x821FD2BC;
} // Block from 821FD2A4h-821FD2BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FD2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD2BC);
		  /* 821FD2BCh */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FD2BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD2BCh case    0:*/		return 0x821FD2C0;
		  /* 821FD2C0h */ case    1:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821FD2C0h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821FD2C0h case    1:*/		return 0x821FD2C4;
		  /* 821FD2C4h */ case    2:  		/* cmplwi CR6, R4, 97 */
		/* 821FD2C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000061);
		/* 821FD2C4h case    2:*/		return 0x821FD2C8;
		  /* 821FD2C8h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821FD2C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FD2E0;  }
		/* 821FD2C8h case    3:*/		return 0x821FD2CC;
		  /* 821FD2CCh */ case    4:  		/* cmplwi CR6, R4, 99 */
		/* 821FD2CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000063);
		/* 821FD2CCh case    4:*/		return 0x821FD2D0;
		  /* 821FD2D0h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821FD2D0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821FD2E0;  }
		/* 821FD2D0h case    5:*/		return 0x821FD2D4;
		  /* 821FD2D4h */ case    6:  		/* cmplwi CR6, R4, 100 */
		/* 821FD2D4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000064);
		/* 821FD2D4h case    6:*/		return 0x821FD2D8;
		  /* 821FD2D8h */ case    7:  		/* li R10, 0 */
		/* 821FD2D8h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821FD2D8h case    7:*/		return 0x821FD2DC;
		  /* 821FD2DCh */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821FD2DCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x821FD2E4;  }
		/* 821FD2DCh case    8:*/		return 0x821FD2E0;
	}
	return 0x821FD2E0;
} // Block from 821FD2BCh-821FD2E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FD2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD2E0);
		  /* 821FD2E0h */ case    0:  		/* mr R10, R23 */
		/* 821FD2E0h case    0:*/		regs.R10 = regs.R23;
		/* 821FD2E0h case    0:*/		return 0x821FD2E4;
	}
	return 0x821FD2E4;
} // Block from 821FD2E0h-821FD2E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD2E4);
		  /* 821FD2E4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821FD2E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821FD2E4h case    0:*/		return 0x821FD2E8;
		  /* 821FD2E8h */ case    1:  		/* bc 12, CR0_EQ, 1076 */
		/* 821FD2E8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FD71C;  }
		/* 821FD2E8h case    1:*/		return 0x821FD2EC;
		  /* 821FD2ECh */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821FD2ECh case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821FD2ECh case    2:*/		return 0x821FD2F0;
		  /* 821FD2F0h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821FD2F0h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821FD2F0h case    3:*/		return 0x821FD2F4;
		  /* 821FD2F4h */ case    4:  		/* mr R3, R31 */
		/* 821FD2F4h case    4:*/		regs.R3 = regs.R31;
		/* 821FD2F4h case    4:*/		return 0x821FD2F8;
		  /* 821FD2F8h */ case    5:  		/* bl -626376 */
		/* 821FD2F8h case    5:*/		regs.LR = 0x821FD2FC; return 0x82164430;
		/* 821FD2F8h case    5:*/		return 0x821FD2FC;
		  /* 821FD2FCh */ case    6:  		/* addi R11, R24, -24 */
		/* 821FD2FCh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFE8);
		/* 821FD2FCh case    6:*/		return 0x821FD300;
		  /* 821FD300h */ case    7:  		/* add R27, R3, R11 */
		/* 821FD300h case    7:*/		cpu::op::add<0>(regs,&regs.R27,regs.R3,regs.R11);
		/* 821FD300h case    7:*/		return 0x821FD304;
		  /* 821FD304h */ case    8:  		/* lwz R11, <#[R27 + 12]> */
		/* 821FD304h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821FD304h case    8:*/		return 0x821FD308;
		  /* 821FD308h */ case    9:  		/* oris R11, R11, 1 */
		/* 821FD308h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FD308h case    9:*/		return 0x821FD30C;
		  /* 821FD30Ch */ case   10:  		/* stw R11, <#[R27 + 12]> */
		/* 821FD30Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821FD30Ch case   10:*/		return 0x821FD310;
		  /* 821FD310h */ case   11:  		/* lwz R11, <#[R14 + 120]> */
		/* 821FD310h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000078) );
		/* 821FD310h case   11:*/		return 0x821FD314;
		  /* 821FD314h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821FD314h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD314h case   12:*/		return 0x821FD318;
		  /* 821FD318h */ case   13:  		/* bc 12, CR6_EQ, 248 */
		/* 821FD318h case   13:*/		if ( regs.CR[6].eq ) { return 0x821FD410;  }
		/* 821FD318h case   13:*/		return 0x821FD31C;
		  /* 821FD31Ch */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FD31Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD31Ch case   14:*/		return 0x821FD320;
		  /* 821FD320h */ case   15:  		/* cmpwi CR6, R10, 1 */
		/* 821FD320h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FD320h case   15:*/		return 0x821FD324;
		  /* 821FD324h */ case   16:  		/* bc 12, CR6_EQ, 236 */
		/* 821FD324h case   16:*/		if ( regs.CR[6].eq ) { return 0x821FD410;  }
		/* 821FD324h case   16:*/		return 0x821FD328;
		  /* 821FD328h */ case   17:  		/* li R4, 4801 */
		/* 821FD328h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821FD328h case   17:*/		return 0x821FD32C;
		  /* 821FD32Ch */ case   18:  		/* mr R3, R31 */
		/* 821FD32Ch case   18:*/		regs.R3 = regs.R31;
		/* 821FD32Ch case   18:*/		return 0x821FD330;
		  /* 821FD330h */ case   19:  		/* bl -701640 */
		/* 821FD330h case   19:*/		regs.LR = 0x821FD334; return 0x82151E68;
		/* 821FD330h case   19:*/		return 0x821FD334;
		  /* 821FD334h */ case   20:  		/* lwz R11, <#[R8 + 8]> */
		/* 821FD334h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 821FD334h case   20:*/		return 0x821FD338;
		  /* 821FD338h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821FD338h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD338h case   21:*/		return 0x821FD33C;
		  /* 821FD33Ch */ case   22:  		/* bc 12, CR6_EQ, 28908 */
		/* 821FD33Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x82204428;  }
		/* 821FD33Ch case   22:*/		return 0x821FD340;
		  /* 821FD340h */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FD340h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD340h case   23:*/		return 0x821FD344;
		  /* 821FD344h */ case   24:  		/* cmpwi CR6, R10, 1 */
		/* 821FD344h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FD344h case   24:*/		return 0x821FD348;
		  /* 821FD348h */ case   25:  		/* bc 4, CR6_EQ, 28896 */
		/* 821FD348h case   25:*/		if ( !regs.CR[6].eq ) { return 0x82204428;  }
		/* 821FD348h case   25:*/		return 0x821FD34C;
		  /* 821FD34Ch */ case   26:  		/* lwz R10, <#[R11 + 12]> */
		/* 821FD34Ch case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FD34Ch case   26:*/		return 0x821FD350;
		  /* 821FD350h */ case   27:  		/* cmplwi CR6, R10, 0 */
		/* 821FD350h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FD350h case   27:*/		return 0x821FD354;
		  /* 821FD354h */ case   28:  		/* bc 12, CR6_EQ, 164 */
		/* 821FD354h case   28:*/		if ( regs.CR[6].eq ) { return 0x821FD3F8;  }
		/* 821FD354h case   28:*/		return 0x821FD358;
		  /* 821FD358h */ case   29:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821FD358h case   29:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821FD358h case   29:*/		return 0x821FD35C;
		  /* 821FD35Ch */ case   30:  		/* lwz R10, <#[R10 + 4]> */
		/* 821FD35Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821FD35Ch case   30:*/		return 0x821FD360;
		  /* 821FD360h */ case   31:  		/* cmpwi CR6, R10, 3 */
		/* 821FD360h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821FD360h case   31:*/		return 0x821FD364;
		  /* 821FD364h */ case   32:  		/* bc 12, CR6_EQ, 148 */
		/* 821FD364h case   32:*/		if ( regs.CR[6].eq ) { return 0x821FD3F8;  }
		/* 821FD364h case   32:*/		return 0x821FD368;
		  /* 821FD368h */ case   33:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FD368h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FD368h case   33:*/		return 0x821FD36C;
		  /* 821FD36Ch */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 821FD36Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD36Ch case   34:*/		return 0x821FD370;
		  /* 821FD370h */ case   35:  		/* bc 12, CR6_EQ, 28844 */
		/* 821FD370h case   35:*/		if ( regs.CR[6].eq ) { return 0x8220441C;  }
		/* 821FD370h case   35:*/		return 0x821FD374;
		  /* 821FD374h */ case   36:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FD374h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD374h case   36:*/		return 0x821FD378;
		  /* 821FD378h */ case   37:  		/* cmpwi CR6, R10, 3 */
		/* 821FD378h case   37:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 821FD378h case   37:*/		return 0x821FD37C;
		  /* 821FD37Ch */ case   38:  		/* bc 4, CR6_EQ, 28832 */
		/* 821FD37Ch case   38:*/		if ( !regs.CR[6].eq ) { return 0x8220441C;  }
		/* 821FD37Ch case   38:*/		return 0x821FD380;
		  /* 821FD380h */ case   39:  		/* lwz R10, <#[R11 + 16]> */
		/* 821FD380h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821FD380h case   39:*/		return 0x821FD384;
		  /* 821FD384h */ case   40:  		/* cmpwi CR6, R10, 11 */
		/* 821FD384h case   40:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000B);
		/* 821FD384h case   40:*/		return 0x821FD388;
		  /* 821FD388h */ case   41:  		/* bc 4, CR6_EQ, 28784 */
		/* 821FD388h case   41:*/		if ( !regs.CR[6].eq ) { return 0x822043F8;  }
		/* 821FD388h case   41:*/		return 0x821FD38C;
		  /* 821FD38Ch */ case   42:  		/* lwz R5, <#[R11 + 24]> */
		/* 821FD38Ch case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 821FD38Ch case   42:*/		return 0x821FD390;
		  /* 821FD390h */ case   43:  		/* lwz R10, <#[R1 + 568]> */
		/* 821FD390h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000238) );
		/* 821FD390h case   43:*/		return 0x821FD394;
		  /* 821FD394h */ case   44:  		/* mr R11, R5 */
		/* 821FD394h case   44:*/		regs.R11 = regs.R5;
		/* 821FD394h case   44:*/		return 0x821FD398;
		  /* 821FD398h */ case   45:  		/* lbz R9, <#[R11]> */
		/* 821FD398h case   45:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821FD398h case   45:*/		return 0x821FD39C;
		  /* 821FD39Ch */ case   46:  		/* lbz R7, <#[R10]> */
		/* 821FD39Ch case   46:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821FD39Ch case   46:*/		return 0x821FD3A0;
		  /* 821FD3A0h */ case   47:  		/* cmpwi CR0, R9, 0 */
		/* 821FD3A0h case   47:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821FD3A0h case   47:*/		return 0x821FD3A4;
		  /* 821FD3A4h */ case   48:  		/* subf R9, R7, R9 */
		/* 821FD3A4h case   48:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821FD3A4h case   48:*/		return 0x821FD3A8;
		  /* 821FD3A8h */ case   49:  		/* bc 12, CR0_EQ, 20 */
		/* 821FD3A8h case   49:*/		if ( regs.CR[0].eq ) { return 0x821FD3BC;  }
		/* 821FD3A8h case   49:*/		return 0x821FD3AC;
		  /* 821FD3ACh */ case   50:  		/* addi R11, R11, 1 */
		/* 821FD3ACh case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FD3ACh case   50:*/		return 0x821FD3B0;
		  /* 821FD3B0h */ case   51:  		/* addi R10, R10, 1 */
		/* 821FD3B0h case   51:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821FD3B0h case   51:*/		return 0x821FD3B4;
		  /* 821FD3B4h */ case   52:  		/* cmpwi CR6, R9, 0 */
		/* 821FD3B4h case   52:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821FD3B4h case   52:*/		return 0x821FD3B8;
		  /* 821FD3B8h */ case   53:  		/* bc 12, CR6_EQ, -32 */
		/* 821FD3B8h case   53:*/		if ( regs.CR[6].eq ) { return 0x821FD398;  }
		/* 821FD3B8h case   53:*/		return 0x821FD3BC;
	}
	return 0x821FD3BC;
} // Block from 821FD2E4h-821FD3BCh (54 instructions)

//////////////////////////////////////////////////////
// Block at 821FD3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD3BC);
		  /* 821FD3BCh */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821FD3BCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821FD3BCh case    0:*/		return 0x821FD3C0;
		  /* 821FD3C0h */ case    1:  		/* bc 12, CR0_EQ, 28752 */
		/* 821FD3C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82204410;  }
		/* 821FD3C0h case    1:*/		return 0x821FD3C4;
		  /* 821FD3C4h */ case    2:  		/* lwz R10, <#[R1 + 584]> */
		/* 821FD3C4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000248) );
		/* 821FD3C4h case    2:*/		return 0x821FD3C8;
		  /* 821FD3C8h */ case    3:  		/* mr R11, R5 */
		/* 821FD3C8h case    3:*/		regs.R11 = regs.R5;
		/* 821FD3C8h case    3:*/		return 0x821FD3CC;
		  /* 821FD3CCh */ case    4:  		/* lbz R9, <#[R11]> */
		/* 821FD3CCh case    4:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821FD3CCh case    4:*/		return 0x821FD3D0;
		  /* 821FD3D0h */ case    5:  		/* lbz R7, <#[R10]> */
		/* 821FD3D0h case    5:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821FD3D0h case    5:*/		return 0x821FD3D4;
		  /* 821FD3D4h */ case    6:  		/* cmpwi CR0, R9, 0 */
		/* 821FD3D4h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821FD3D4h case    6:*/		return 0x821FD3D8;
		  /* 821FD3D8h */ case    7:  		/* subf R9, R7, R9 */
		/* 821FD3D8h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821FD3D8h case    7:*/		return 0x821FD3DC;
		  /* 821FD3DCh */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 821FD3DCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821FD3F0;  }
		/* 821FD3DCh case    8:*/		return 0x821FD3E0;
		  /* 821FD3E0h */ case    9:  		/* addi R11, R11, 1 */
		/* 821FD3E0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FD3E0h case    9:*/		return 0x821FD3E4;
		  /* 821FD3E4h */ case   10:  		/* addi R10, R10, 1 */
		/* 821FD3E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821FD3E4h case   10:*/		return 0x821FD3E8;
		  /* 821FD3E8h */ case   11:  		/* cmpwi CR6, R9, 0 */
		/* 821FD3E8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821FD3E8h case   11:*/		return 0x821FD3EC;
		  /* 821FD3ECh */ case   12:  		/* bc 12, CR6_EQ, -32 */
		/* 821FD3ECh case   12:*/		if ( regs.CR[6].eq ) { return 0x821FD3CC;  }
		/* 821FD3ECh case   12:*/		return 0x821FD3F0;
	}
	return 0x821FD3F0;
} // Block from 821FD3BCh-821FD3F0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FD3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD3F0);
		  /* 821FD3F0h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821FD3F0h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821FD3F0h case    0:*/		return 0x821FD3F4;
		  /* 821FD3F4h */ case    1:  		/* bc 12, CR0_EQ, 28700 */
		/* 821FD3F4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82204410;  }
		/* 821FD3F4h case    1:*/		return 0x821FD3F8;
	}
	return 0x821FD3F8;
} // Block from 821FD3F0h-821FD3F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FD3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD3F8);
		  /* 821FD3F8h */ case    0:  		/* lwz R11, <#[R8 + 12]> */
		/* 821FD3F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 821FD3F8h case    0:*/		return 0x821FD3FC;
		  /* 821FD3FCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FD3FCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD3FCh case    1:*/		return 0x821FD400;
		  /* 821FD400h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821FD400h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FD410;  }
		/* 821FD400h case    2:*/		return 0x821FD404;
		  /* 821FD404h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FD404h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD404h case    3:*/		return 0x821FD408;
		  /* 821FD408h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821FD408h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FD408h case    4:*/		return 0x821FD40C;
		  /* 821FD40Ch */ case    5:  		/* bc 4, CR6_EQ, 28664 */
		/* 821FD40Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82204404;  }
		/* 821FD40Ch case    5:*/		return 0x821FD410;
	}
	return 0x821FD410;
} // Block from 821FD3F8h-821FD410h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FD410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD410);
		  /* 821FD410h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821FD410h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD410h case    0:*/		return 0x821FD414;
		  /* 821FD414h */ case    1:  		/* mr R8, R11 */
		/* 821FD414h case    1:*/		regs.R8 = regs.R11;
		/* 821FD414h case    1:*/		return 0x821FD418;
		  /* 821FD418h */ case    2:  		/* bc 4, CR6_EQ, -228 */
		/* 821FD418h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FD334;  }
		/* 821FD418h case    2:*/		return 0x821FD41C;
		  /* 821FD41Ch */ case    3:  		/* lwz R11, <#[R27 + 4]> */
		/* 821FD41Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821FD41Ch case    3:*/		return 0x821FD420;
		  /* 821FD420h */ case    4:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 821FD420h case    4:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 821FD420h case    4:*/		return 0x821FD424;
		  /* 821FD424h */ case    5:  		/* bc 12, CR0_EQ, 252 */
		/* 821FD424h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FD520;  }
		/* 821FD424h case    5:*/		return 0x821FD428;
		  /* 821FD428h */ case    6:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD428h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD428h case    6:*/		return 0x821FD42C;
		  /* 821FD42Ch */ case    7:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD42Ch case    7:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD42Ch case    7:*/		return 0x821FD430;
		  /* 821FD430h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD430h case    8:*/		if ( regs.CR[0].eq ) { return 0x821FD440;  }
		/* 821FD430h case    8:*/		return 0x821FD434;
		  /* 821FD434h */ case    9:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD434h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD434h case    9:*/		return 0x821FD438;
		  /* 821FD438h */ case   10:  		/* addi R10, R11, 8 */
		/* 821FD438h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821FD438h case   10:*/		return 0x821FD43C;
		  /* 821FD43Ch */ case   11:  		/* b 8 */
		/* 821FD43Ch case   11:*/		return 0x821FD444;
		/* 821FD43Ch case   11:*/		return 0x821FD440;
	}
	return 0x821FD440;
} // Block from 821FD410h-821FD440h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FD440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD440);
		  /* 821FD440h */ case    0:  		/* li R10, 722 */
		/* 821FD440h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2D2);
		/* 821FD440h case    0:*/		return 0x821FD444;
	}
	return 0x821FD444;
} // Block from 821FD440h-821FD444h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD444);
		  /* 821FD444h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD444h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD444h case    0:*/		return 0x821FD448;
		  /* 821FD448h */ case    1:  		/* lwz R9, <#[R11 + 80]> */
		/* 821FD448h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000050) );
		/* 821FD448h case    1:*/		return 0x821FD44C;
		  /* 821FD44Ch */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821FD44Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FD44Ch case    2:*/		return 0x821FD450;
		  /* 821FD450h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821FD450h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FD464;  }
		/* 821FD450h case    3:*/		return 0x821FD454;
		  /* 821FD454h */ case    4:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821FD454h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821FD454h case    4:*/		return 0x821FD458;
		  /* 821FD458h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821FD458h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821FD458h case    5:*/		return 0x821FD45C;
		  /* 821FD45Ch */ case    6:  		/* lwzx R29, <#[R10 + R11]> */
		/* 821FD45Ch case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FD45Ch case    6:*/		return 0x821FD460;
		  /* 821FD460h */ case    7:  		/* b 8 */
		/* 821FD460h case    7:*/		return 0x821FD468;
		/* 821FD460h case    7:*/		return 0x821FD464;
	}
	return 0x821FD464;
} // Block from 821FD444h-821FD464h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD464);
		  /* 821FD464h */ case    0:  		/* li R29, 0 */
		/* 821FD464h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FD464h case    0:*/		return 0x821FD468;
	}
	return 0x821FD468;
} // Block from 821FD464h-821FD468h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD468);
		  /* 821FD468h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FD468h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FD468h case    0:*/		return 0x821FD46C;
		  /* 821FD46Ch */ case    1:  		/* bc 12, CR6_EQ, 28616 */
		/* 821FD46Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82204434;  }
		/* 821FD46Ch case    1:*/		return 0x821FD470;
		  /* 821FD470h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821FD470h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821FD470h case    2:*/		return 0x821FD474;
		  /* 821FD474h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821FD474h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD474h case    3:*/		return 0x821FD478;
		  /* 821FD478h */ case    4:  		/* bc 12, CR6_EQ, 28604 */
		/* 821FD478h case    4:*/		if ( regs.CR[6].eq ) { return 0x82204434;  }
		/* 821FD478h case    4:*/		return 0x821FD47C;
		  /* 821FD47Ch */ case    5:  		/* mr R4, R29 */
		/* 821FD47Ch case    5:*/		regs.R4 = regs.R29;
		/* 821FD47Ch case    5:*/		return 0x821FD480;
		  /* 821FD480h */ case    6:  		/* mr R3, R31 */
		/* 821FD480h case    6:*/		regs.R3 = regs.R31;
		/* 821FD480h case    6:*/		return 0x821FD484;
		  /* 821FD484h */ case    7:  		/* bl -45572 */
		/* 821FD484h case    7:*/		regs.LR = 0x821FD488; return 0x821F2280;
		/* 821FD484h case    7:*/		return 0x821FD488;
		  /* 821FD488h */ case    8:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD488h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD488h case    8:*/		return 0x821FD48C;
		  /* 821FD48Ch */ case    9:  		/* lwz R10, <#[R3 + 28]> */
		/* 821FD48Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FD48Ch case    9:*/		return 0x821FD490;
		  /* 821FD490h */ case   10:  		/* mr R28, R3 */
		/* 821FD490h case   10:*/		regs.R28 = regs.R3;
		/* 821FD490h case   10:*/		return 0x821FD494;
		  /* 821FD494h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 821FD494h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821FD494h case   11:*/		return 0x821FD498;
		  /* 821FD498h */ case   12:  		/* bc 12, CR6_EQ, 108 */
		/* 821FD498h case   12:*/		if ( regs.CR[6].eq ) { return 0x821FD504;  }
		/* 821FD498h case   12:*/		return 0x821FD49C;
		  /* 821FD49Ch */ case   13:  		/* mr R4, R3 */
		/* 821FD49Ch case   13:*/		regs.R4 = regs.R3;
		/* 821FD49Ch case   13:*/		return 0x821FD4A0;
		  /* 821FD4A0h */ case   14:  		/* mr R3, R31 */
		/* 821FD4A0h case   14:*/		regs.R3 = regs.R31;
		/* 821FD4A0h case   14:*/		return 0x821FD4A4;
		  /* 821FD4A4h */ case   15:  		/* bl 161532 */
		/* 821FD4A4h case   15:*/		regs.LR = 0x821FD4A8; return 0x82224BA0;
		/* 821FD4A4h case   15:*/		return 0x821FD4A8;
		  /* 821FD4A8h */ case   16:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD4A8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD4A8h case   16:*/		return 0x821FD4AC;
		  /* 821FD4ACh */ case   17:  		/* li R4, 0 */
		/* 821FD4ACh case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FD4ACh case   17:*/		return 0x821FD4B0;
		  /* 821FD4B0h */ case   18:  		/* mr R30, R3 */
		/* 821FD4B0h case   18:*/		regs.R30 = regs.R3;
		/* 821FD4B0h case   18:*/		return 0x821FD4B4;
		  /* 821FD4B4h */ case   19:  		/* stw R11, <#[R3 + 28]> */
		/* 821FD4B4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FD4B4h case   19:*/		return 0x821FD4B8;
		  /* 821FD4B8h */ case   20:  		/* lwz R5, <#[R28 + 44]> */
		/* 821FD4B8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000002C) );
		/* 821FD4B8h case   20:*/		return 0x821FD4BC;
		  /* 821FD4BCh */ case   21:  		/* bl -577036 */
		/* 821FD4BCh case   21:*/		regs.LR = 0x821FD4C0; return 0x821706B0;
		/* 821FD4BCh case   21:*/		return 0x821FD4C0;
		  /* 821FD4C0h */ case   22:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821FD4C0h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821FD4C0h case   22:*/		return 0x821FD4C4;
		  /* 821FD4C4h */ case   23:  		/* lwz R7, <#[R26]> */
		/* 821FD4C4h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD4C4h case   23:*/		return 0x821FD4C8;
		  /* 821FD4C8h */ case   24:  		/* addi R9, R26, -36 */
		/* 821FD4C8h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R26,0xFFFFFFDC);
		/* 821FD4C8h case   24:*/		return 0x821FD4CC;
		  /* 821FD4CCh */ case   25:  		/* addi R11, R11, 36 */
		/* 821FD4CCh case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821FD4CCh case   25:*/		return 0x821FD4D0;
		  /* 821FD4D0h */ case   26:  		/* mr R28, R30 */
		/* 821FD4D0h case   26:*/		regs.R28 = regs.R30;
		/* 821FD4D0h case   26:*/		return 0x821FD4D4;
		  /* 821FD4D4h */ case   27:  		/* addi R8, R11, -36 */
		/* 821FD4D4h case   27:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821FD4D4h case   27:*/		return 0x821FD4D8;
		  /* 821FD4D8h */ case   28:  		/* addi R10, R11, 4 */
		/* 821FD4D8h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FD4D8h case   28:*/		return 0x821FD4DC;
		  /* 821FD4DCh */ case   29:  		/* stw R7, <#[R11]> */
		/* 821FD4DCh case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821FD4DCh case   29:*/		return 0x821FD4E0;
		  /* 821FD4E0h */ case   30:  		/* lwz R7, <#[R26]> */
		/* 821FD4E0h case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD4E0h case   30:*/		return 0x821FD4E4;
		  /* 821FD4E4h */ case   31:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821FD4E4h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821FD4E4h case   31:*/		return 0x821FD4E8;
		  /* 821FD4E8h */ case   32:  		/* stw R8, <#[R7]> */
		/* 821FD4E8h case   32:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821FD4E8h case   32:*/		return 0x821FD4EC;
		  /* 821FD4ECh */ case   33:  		/* stw R9, <#[R11 + 4]> */
		/* 821FD4ECh case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD4ECh case   33:*/		return 0x821FD4F0;
		  /* 821FD4F0h */ case   34:  		/* stw R10, <#[R26]> */
		/* 821FD4F0h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD4F0h case   34:*/		return 0x821FD4F4;
		  /* 821FD4F4h */ case   35:  		/* stw R30, <#[R29]> */
		/* 821FD4F4h case   35:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821FD4F4h case   35:*/		return 0x821FD4F8;
		  /* 821FD4F8h */ case   36:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FD4F8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FD4F8h case   36:*/		return 0x821FD4FC;
		  /* 821FD4FCh */ case   37:  		/* rlwimi R11, R23, 0, 16, 14 */
		/* 821FD4FCh case   37:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R23);
		/* 821FD4FCh case   37:*/		return 0x821FD500;
		  /* 821FD500h */ case   38:  		/* stw R11, <#[R29 + 4]> */
		/* 821FD500h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FD500h case   38:*/		return 0x821FD504;
	}
	return 0x821FD504;
} // Block from 821FD468h-821FD504h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821FD504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD504);
		  /* 821FD504h */ case    0:  		/* li R5, 1 */
		/* 821FD504h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FD504h case    0:*/		return 0x821FD508;
		  /* 821FD508h */ case    1:  		/* mr R4, R28 */
		/* 821FD508h case    1:*/		regs.R4 = regs.R28;
		/* 821FD508h case    1:*/		return 0x821FD50C;
		  /* 821FD50Ch */ case    2:  		/* mr R3, R31 */
		/* 821FD50Ch case    2:*/		regs.R3 = regs.R31;
		/* 821FD50Ch case    2:*/		return 0x821FD510;
		  /* 821FD510h */ case    3:  		/* bl -576960 */
		/* 821FD510h case    3:*/		regs.LR = 0x821FD514; return 0x82170750;
		/* 821FD510h case    3:*/		return 0x821FD514;
		  /* 821FD514h */ case    4:  		/* mr R4, R3 */
		/* 821FD514h case    4:*/		regs.R4 = regs.R3;
		/* 821FD514h case    4:*/		return 0x821FD518;
		  /* 821FD518h */ case    5:  		/* mr R3, R24 */
		/* 821FD518h case    5:*/		regs.R3 = regs.R24;
		/* 821FD518h case    5:*/		return 0x821FD51C;
		  /* 821FD51Ch */ case    6:  		/* bl -545620 */
		/* 821FD51Ch case    6:*/		regs.LR = 0x821FD520; return 0x821781C8;
		/* 821FD51Ch case    6:*/		return 0x821FD520;
	}
	return 0x821FD520;
} // Block from 821FD504h-821FD520h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FD520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD520);
		  /* 821FD520h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821FD520h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821FD520h case    0:*/		return 0x821FD524;
		  /* 821FD524h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821FD524h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821FD524h case    1:*/		return 0x821FD528;
		  /* 821FD528h */ case    2:  		/* bc 12, CR0_EQ, 500 */
		/* 821FD528h case    2:*/		if ( regs.CR[0].eq ) { return 0x821FD71C;  }
		/* 821FD528h case    2:*/		return 0x821FD52C;
		  /* 821FD52Ch */ case    3:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD52Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD52Ch case    3:*/		return 0x821FD530;
		  /* 821FD530h */ case    4:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD530h case    4:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD530h case    4:*/		return 0x821FD534;
		  /* 821FD534h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD534h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FD544;  }
		/* 821FD534h case    5:*/		return 0x821FD538;
		  /* 821FD538h */ case    6:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD538h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD538h case    6:*/		return 0x821FD53C;
		  /* 821FD53Ch */ case    7:  		/* addi R10, R11, 9 */
		/* 821FD53Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x9);
		/* 821FD53Ch case    7:*/		return 0x821FD540;
		  /* 821FD540h */ case    8:  		/* b 8 */
		/* 821FD540h case    8:*/		return 0x821FD548;
		/* 821FD540h case    8:*/		return 0x821FD544;
	}
	return 0x821FD544;
} // Block from 821FD520h-821FD544h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FD544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD544);
		  /* 821FD544h */ case    0:  		/* li R10, 724 */
		/* 821FD544h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2D4);
		/* 821FD544h case    0:*/		return 0x821FD548;
	}
	return 0x821FD548;
} // Block from 821FD544h-821FD548h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD548);
		  /* 821FD548h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD548h case    0:*/		return 0x821FD54C;
		  /* 821FD54Ch */ case    1:  		/* lwz R9, <#[R11 + 80]> */
		/* 821FD54Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000050) );
		/* 821FD54Ch case    1:*/		return 0x821FD550;
		  /* 821FD550h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821FD550h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FD550h case    2:*/		return 0x821FD554;
		  /* 821FD554h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821FD554h case    3:*/		if ( regs.CR[6].eq ) { return 0x821FD568;  }
		/* 821FD554h case    3:*/		return 0x821FD558;
		  /* 821FD558h */ case    4:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821FD558h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821FD558h case    4:*/		return 0x821FD55C;
		  /* 821FD55Ch */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821FD55Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821FD55Ch case    5:*/		return 0x821FD560;
		  /* 821FD560h */ case    6:  		/* lwzx R29, <#[R10 + R11]> */
		/* 821FD560h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FD560h case    6:*/		return 0x821FD564;
		  /* 821FD564h */ case    7:  		/* b 8 */
		/* 821FD564h case    7:*/		return 0x821FD56C;
		/* 821FD564h case    7:*/		return 0x821FD568;
	}
	return 0x821FD568;
} // Block from 821FD548h-821FD568h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD568);
		  /* 821FD568h */ case    0:  		/* li R29, 0 */
		/* 821FD568h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FD568h case    0:*/		return 0x821FD56C;
	}
	return 0x821FD56C;
} // Block from 821FD568h-821FD56Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD56C);
		  /* 821FD56Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FD56Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FD56Ch case    0:*/		return 0x821FD570;
		  /* 821FD570h */ case    1:  		/* bc 12, CR6_EQ, 28380 */
		/* 821FD570h case    1:*/		if ( regs.CR[6].eq ) { return 0x8220444C;  }
		/* 821FD570h case    1:*/		return 0x821FD574;
		  /* 821FD574h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821FD574h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821FD574h case    2:*/		return 0x821FD578;
		  /* 821FD578h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821FD578h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD578h case    3:*/		return 0x821FD57C;
		  /* 821FD57Ch */ case    4:  		/* bc 12, CR6_EQ, 28368 */
		/* 821FD57Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8220444C;  }
		/* 821FD57Ch case    4:*/		return 0x821FD580;
		  /* 821FD580h */ case    5:  		/* mr R4, R29 */
		/* 821FD580h case    5:*/		regs.R4 = regs.R29;
		/* 821FD580h case    5:*/		return 0x821FD584;
		  /* 821FD584h */ case    6:  		/* mr R3, R31 */
		/* 821FD584h case    6:*/		regs.R3 = regs.R31;
		/* 821FD584h case    6:*/		return 0x821FD588;
		  /* 821FD588h */ case    7:  		/* bl -45832 */
		/* 821FD588h case    7:*/		regs.LR = 0x821FD58C; return 0x821F2280;
		/* 821FD588h case    7:*/		return 0x821FD58C;
		  /* 821FD58Ch */ case    8:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD58Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD58Ch case    8:*/		return 0x821FD590;
		  /* 821FD590h */ case    9:  		/* lwz R10, <#[R3 + 28]> */
		/* 821FD590h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FD590h case    9:*/		return 0x821FD594;
		  /* 821FD594h */ case   10:  		/* mr R28, R3 */
		/* 821FD594h case   10:*/		regs.R28 = regs.R3;
		/* 821FD594h case   10:*/		return 0x821FD598;
		  /* 821FD598h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 821FD598h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821FD598h case   11:*/		return 0x821FD59C;
		  /* 821FD59Ch */ case   12:  		/* bc 12, CR6_EQ, 108 */
		/* 821FD59Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821FD608;  }
		/* 821FD59Ch case   12:*/		return 0x821FD5A0;
		  /* 821FD5A0h */ case   13:  		/* mr R4, R3 */
		/* 821FD5A0h case   13:*/		regs.R4 = regs.R3;
		/* 821FD5A0h case   13:*/		return 0x821FD5A4;
		  /* 821FD5A4h */ case   14:  		/* mr R3, R31 */
		/* 821FD5A4h case   14:*/		regs.R3 = regs.R31;
		/* 821FD5A4h case   14:*/		return 0x821FD5A8;
		  /* 821FD5A8h */ case   15:  		/* bl 161272 */
		/* 821FD5A8h case   15:*/		regs.LR = 0x821FD5AC; return 0x82224BA0;
		/* 821FD5A8h case   15:*/		return 0x821FD5AC;
		  /* 821FD5ACh */ case   16:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD5ACh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD5ACh case   16:*/		return 0x821FD5B0;
		  /* 821FD5B0h */ case   17:  		/* li R4, 0 */
		/* 821FD5B0h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FD5B0h case   17:*/		return 0x821FD5B4;
		  /* 821FD5B4h */ case   18:  		/* mr R30, R3 */
		/* 821FD5B4h case   18:*/		regs.R30 = regs.R3;
		/* 821FD5B4h case   18:*/		return 0x821FD5B8;
		  /* 821FD5B8h */ case   19:  		/* stw R11, <#[R3 + 28]> */
		/* 821FD5B8h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FD5B8h case   19:*/		return 0x821FD5BC;
		  /* 821FD5BCh */ case   20:  		/* lwz R5, <#[R28 + 44]> */
		/* 821FD5BCh case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000002C) );
		/* 821FD5BCh case   20:*/		return 0x821FD5C0;
		  /* 821FD5C0h */ case   21:  		/* bl -577296 */
		/* 821FD5C0h case   21:*/		regs.LR = 0x821FD5C4; return 0x821706B0;
		/* 821FD5C0h case   21:*/		return 0x821FD5C4;
		  /* 821FD5C4h */ case   22:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821FD5C4h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821FD5C4h case   22:*/		return 0x821FD5C8;
		  /* 821FD5C8h */ case   23:  		/* lwz R9, <#[R26]> */
		/* 821FD5C8h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD5C8h case   23:*/		return 0x821FD5CC;
		  /* 821FD5CCh */ case   24:  		/* addi R8, R26, -36 */
		/* 821FD5CCh case   24:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R26,0xFFFFFFDC);
		/* 821FD5CCh case   24:*/		return 0x821FD5D0;
		  /* 821FD5D0h */ case   25:  		/* addi R11, R11, 36 */
		/* 821FD5D0h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821FD5D0h case   25:*/		return 0x821FD5D4;
		  /* 821FD5D4h */ case   26:  		/* mr R28, R30 */
		/* 821FD5D4h case   26:*/		regs.R28 = regs.R30;
		/* 821FD5D4h case   26:*/		return 0x821FD5D8;
		  /* 821FD5D8h */ case   27:  		/* addi R7, R11, -36 */
		/* 821FD5D8h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821FD5D8h case   27:*/		return 0x821FD5DC;
		  /* 821FD5DCh */ case   28:  		/* addi R10, R11, 4 */
		/* 821FD5DCh case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FD5DCh case   28:*/		return 0x821FD5E0;
		  /* 821FD5E0h */ case   29:  		/* stw R9, <#[R11]> */
		/* 821FD5E0h case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821FD5E0h case   29:*/		return 0x821FD5E4;
		  /* 821FD5E4h */ case   30:  		/* lwz R9, <#[R26]> */
		/* 821FD5E4h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD5E4h case   30:*/		return 0x821FD5E8;
		  /* 821FD5E8h */ case   31:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821FD5E8h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821FD5E8h case   31:*/		return 0x821FD5EC;
		  /* 821FD5ECh */ case   32:  		/* stw R7, <#[R9]> */
		/* 821FD5ECh case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821FD5ECh case   32:*/		return 0x821FD5F0;
		  /* 821FD5F0h */ case   33:  		/* stw R8, <#[R11 + 4]> */
		/* 821FD5F0h case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD5F0h case   33:*/		return 0x821FD5F4;
		  /* 821FD5F4h */ case   34:  		/* stw R10, <#[R26]> */
		/* 821FD5F4h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD5F4h case   34:*/		return 0x821FD5F8;
		  /* 821FD5F8h */ case   35:  		/* stw R30, <#[R29]> */
		/* 821FD5F8h case   35:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821FD5F8h case   35:*/		return 0x821FD5FC;
		  /* 821FD5FCh */ case   36:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FD5FCh case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FD5FCh case   36:*/		return 0x821FD600;
		  /* 821FD600h */ case   37:  		/* rlwimi R11, R23, 0, 16, 14 */
		/* 821FD600h case   37:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R23);
		/* 821FD600h case   37:*/		return 0x821FD604;
		  /* 821FD604h */ case   38:  		/* stw R11, <#[R29 + 4]> */
		/* 821FD604h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FD604h case   38:*/		return 0x821FD608;
	}
	return 0x821FD608;
} // Block from 821FD56Ch-821FD608h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821FD608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD608);
		  /* 821FD608h */ case    0:  		/* li R5, 2 */
		/* 821FD608h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821FD608h case    0:*/		return 0x821FD60C;
		  /* 821FD60Ch */ case    1:  		/* mr R4, R28 */
		/* 821FD60Ch case    1:*/		regs.R4 = regs.R28;
		/* 821FD60Ch case    1:*/		return 0x821FD610;
		  /* 821FD610h */ case    2:  		/* mr R3, R31 */
		/* 821FD610h case    2:*/		regs.R3 = regs.R31;
		/* 821FD610h case    2:*/		return 0x821FD614;
		  /* 821FD614h */ case    3:  		/* bl -577220 */
		/* 821FD614h case    3:*/		regs.LR = 0x821FD618; return 0x82170750;
		/* 821FD614h case    3:*/		return 0x821FD618;
		  /* 821FD618h */ case    4:  		/* mr R4, R3 */
		/* 821FD618h case    4:*/		regs.R4 = regs.R3;
		/* 821FD618h case    4:*/		return 0x821FD61C;
		  /* 821FD61Ch */ case    5:  		/* mr R3, R24 */
		/* 821FD61Ch case    5:*/		regs.R3 = regs.R24;
		/* 821FD61Ch case    5:*/		return 0x821FD620;
		  /* 821FD620h */ case    6:  		/* bl -545880 */
		/* 821FD620h case    6:*/		regs.LR = 0x821FD624; return 0x821781C8;
		/* 821FD620h case    6:*/		return 0x821FD624;
		  /* 821FD624h */ case    7:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD624h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD624h case    7:*/		return 0x821FD628;
		  /* 821FD628h */ case    8:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD628h case    8:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD628h case    8:*/		return 0x821FD62C;
		  /* 821FD62Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD62Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821FD63C;  }
		/* 821FD62Ch case    9:*/		return 0x821FD630;
		  /* 821FD630h */ case   10:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD630h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD630h case   10:*/		return 0x821FD634;
		  /* 821FD634h */ case   11:  		/* addi R10, R11, 10 */
		/* 821FD634h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xA);
		/* 821FD634h case   11:*/		return 0x821FD638;
		  /* 821FD638h */ case   12:  		/* b 8 */
		/* 821FD638h case   12:*/		return 0x821FD640;
		/* 821FD638h case   12:*/		return 0x821FD63C;
	}
	return 0x821FD63C;
} // Block from 821FD608h-821FD63Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FD63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD63C);
		  /* 821FD63Ch */ case    0:  		/* li R10, 725 */
		/* 821FD63Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2D5);
		/* 821FD63Ch case    0:*/		return 0x821FD640;
	}
	return 0x821FD640;
} // Block from 821FD63Ch-821FD640h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD640);
		  /* 821FD640h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD640h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD640h case    0:*/		return 0x821FD644;
		  /* 821FD644h */ case    1:  		/* lwz R9, <#[R11 + 80]> */
		/* 821FD644h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000050) );
		/* 821FD644h case    1:*/		return 0x821FD648;
		  /* 821FD648h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821FD648h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FD648h case    2:*/		return 0x821FD64C;
		  /* 821FD64Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821FD64Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821FD660;  }
		/* 821FD64Ch case    3:*/		return 0x821FD650;
		  /* 821FD650h */ case    4:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821FD650h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821FD650h case    4:*/		return 0x821FD654;
		  /* 821FD654h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821FD654h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821FD654h case    5:*/		return 0x821FD658;
		  /* 821FD658h */ case    6:  		/* lwzx R29, <#[R10 + R11]> */
		/* 821FD658h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FD658h case    6:*/		return 0x821FD65C;
		  /* 821FD65Ch */ case    7:  		/* b 8 */
		/* 821FD65Ch case    7:*/		return 0x821FD664;
		/* 821FD65Ch case    7:*/		return 0x821FD660;
	}
	return 0x821FD660;
} // Block from 821FD640h-821FD660h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD660);
		  /* 821FD660h */ case    0:  		/* li R29, 0 */
		/* 821FD660h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821FD660h case    0:*/		return 0x821FD664;
	}
	return 0x821FD664;
} // Block from 821FD660h-821FD664h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD664);
		  /* 821FD664h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FD664h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FD664h case    0:*/		return 0x821FD668;
		  /* 821FD668h */ case    1:  		/* bc 12, CR6_EQ, 28120 */
		/* 821FD668h case    1:*/		if ( regs.CR[6].eq ) { return 0x82204440;  }
		/* 821FD668h case    1:*/		return 0x821FD66C;
		  /* 821FD66Ch */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821FD66Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821FD66Ch case    2:*/		return 0x821FD670;
		  /* 821FD670h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821FD670h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD670h case    3:*/		return 0x821FD674;
		  /* 821FD674h */ case    4:  		/* bc 12, CR6_EQ, 28108 */
		/* 821FD674h case    4:*/		if ( regs.CR[6].eq ) { return 0x82204440;  }
		/* 821FD674h case    4:*/		return 0x821FD678;
		  /* 821FD678h */ case    5:  		/* mr R4, R29 */
		/* 821FD678h case    5:*/		regs.R4 = regs.R29;
		/* 821FD678h case    5:*/		return 0x821FD67C;
		  /* 821FD67Ch */ case    6:  		/* mr R3, R31 */
		/* 821FD67Ch case    6:*/		regs.R3 = regs.R31;
		/* 821FD67Ch case    6:*/		return 0x821FD680;
		  /* 821FD680h */ case    7:  		/* bl -46080 */
		/* 821FD680h case    7:*/		regs.LR = 0x821FD684; return 0x821F2280;
		/* 821FD680h case    7:*/		return 0x821FD684;
		  /* 821FD684h */ case    8:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD684h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD684h case    8:*/		return 0x821FD688;
		  /* 821FD688h */ case    9:  		/* lwz R10, <#[R3 + 28]> */
		/* 821FD688h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FD688h case    9:*/		return 0x821FD68C;
		  /* 821FD68Ch */ case   10:  		/* mr R28, R3 */
		/* 821FD68Ch case   10:*/		regs.R28 = regs.R3;
		/* 821FD68Ch case   10:*/		return 0x821FD690;
		  /* 821FD690h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 821FD690h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821FD690h case   11:*/		return 0x821FD694;
		  /* 821FD694h */ case   12:  		/* bc 12, CR6_EQ, 108 */
		/* 821FD694h case   12:*/		if ( regs.CR[6].eq ) { return 0x821FD700;  }
		/* 821FD694h case   12:*/		return 0x821FD698;
		  /* 821FD698h */ case   13:  		/* mr R4, R3 */
		/* 821FD698h case   13:*/		regs.R4 = regs.R3;
		/* 821FD698h case   13:*/		return 0x821FD69C;
		  /* 821FD69Ch */ case   14:  		/* mr R3, R31 */
		/* 821FD69Ch case   14:*/		regs.R3 = regs.R31;
		/* 821FD69Ch case   14:*/		return 0x821FD6A0;
		  /* 821FD6A0h */ case   15:  		/* bl 161024 */
		/* 821FD6A0h case   15:*/		regs.LR = 0x821FD6A4; return 0x82224BA0;
		/* 821FD6A0h case   15:*/		return 0x821FD6A4;
		  /* 821FD6A4h */ case   16:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD6A4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD6A4h case   16:*/		return 0x821FD6A8;
		  /* 821FD6A8h */ case   17:  		/* li R4, 0 */
		/* 821FD6A8h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FD6A8h case   17:*/		return 0x821FD6AC;
		  /* 821FD6ACh */ case   18:  		/* mr R30, R3 */
		/* 821FD6ACh case   18:*/		regs.R30 = regs.R3;
		/* 821FD6ACh case   18:*/		return 0x821FD6B0;
		  /* 821FD6B0h */ case   19:  		/* stw R11, <#[R3 + 28]> */
		/* 821FD6B0h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FD6B0h case   19:*/		return 0x821FD6B4;
		  /* 821FD6B4h */ case   20:  		/* lwz R5, <#[R28 + 44]> */
		/* 821FD6B4h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000002C) );
		/* 821FD6B4h case   20:*/		return 0x821FD6B8;
		  /* 821FD6B8h */ case   21:  		/* bl -577544 */
		/* 821FD6B8h case   21:*/		regs.LR = 0x821FD6BC; return 0x821706B0;
		/* 821FD6B8h case   21:*/		return 0x821FD6BC;
		  /* 821FD6BCh */ case   22:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821FD6BCh case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821FD6BCh case   22:*/		return 0x821FD6C0;
		  /* 821FD6C0h */ case   23:  		/* lwz R7, <#[R26]> */
		/* 821FD6C0h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD6C0h case   23:*/		return 0x821FD6C4;
		  /* 821FD6C4h */ case   24:  		/* addi R11, R11, 36 */
		/* 821FD6C4h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821FD6C4h case   24:*/		return 0x821FD6C8;
		  /* 821FD6C8h */ case   25:  		/* addi R9, R26, -36 */
		/* 821FD6C8h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R26,0xFFFFFFDC);
		/* 821FD6C8h case   25:*/		return 0x821FD6CC;
		  /* 821FD6CCh */ case   26:  		/* addi R8, R11, -36 */
		/* 821FD6CCh case   26:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821FD6CCh case   26:*/		return 0x821FD6D0;
		  /* 821FD6D0h */ case   27:  		/* addi R10, R11, 4 */
		/* 821FD6D0h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821FD6D0h case   27:*/		return 0x821FD6D4;
		  /* 821FD6D4h */ case   28:  		/* mr R28, R30 */
		/* 821FD6D4h case   28:*/		regs.R28 = regs.R30;
		/* 821FD6D4h case   28:*/		return 0x821FD6D8;
		  /* 821FD6D8h */ case   29:  		/* stw R7, <#[R11]> */
		/* 821FD6D8h case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821FD6D8h case   29:*/		return 0x821FD6DC;
		  /* 821FD6DCh */ case   30:  		/* lwz R7, <#[R26]> */
		/* 821FD6DCh case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD6DCh case   30:*/		return 0x821FD6E0;
		  /* 821FD6E0h */ case   31:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821FD6E0h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821FD6E0h case   31:*/		return 0x821FD6E4;
		  /* 821FD6E4h */ case   32:  		/* stw R8, <#[R7]> */
		/* 821FD6E4h case   32:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821FD6E4h case   32:*/		return 0x821FD6E8;
		  /* 821FD6E8h */ case   33:  		/* stw R9, <#[R11 + 4]> */
		/* 821FD6E8h case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821FD6E8h case   33:*/		return 0x821FD6EC;
		  /* 821FD6ECh */ case   34:  		/* stw R10, <#[R26]> */
		/* 821FD6ECh case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821FD6ECh case   34:*/		return 0x821FD6F0;
		  /* 821FD6F0h */ case   35:  		/* stw R30, <#[R29]> */
		/* 821FD6F0h case   35:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821FD6F0h case   35:*/		return 0x821FD6F4;
		  /* 821FD6F4h */ case   36:  		/* lwz R11, <#[R29 + 4]> */
		/* 821FD6F4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FD6F4h case   36:*/		return 0x821FD6F8;
		  /* 821FD6F8h */ case   37:  		/* rlwimi R11, R23, 0, 16, 14 */
		/* 821FD6F8h case   37:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R23);
		/* 821FD6F8h case   37:*/		return 0x821FD6FC;
		  /* 821FD6FCh */ case   38:  		/* stw R11, <#[R29 + 4]> */
		/* 821FD6FCh case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821FD6FCh case   38:*/		return 0x821FD700;
	}
	return 0x821FD700;
} // Block from 821FD664h-821FD700h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821FD700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD700);
		  /* 821FD700h */ case    0:  		/* li R5, 3 */
		/* 821FD700h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 821FD700h case    0:*/		return 0x821FD704;
		  /* 821FD704h */ case    1:  		/* mr R4, R28 */
		/* 821FD704h case    1:*/		regs.R4 = regs.R28;
		/* 821FD704h case    1:*/		return 0x821FD708;
		  /* 821FD708h */ case    2:  		/* mr R3, R31 */
		/* 821FD708h case    2:*/		regs.R3 = regs.R31;
		/* 821FD708h case    2:*/		return 0x821FD70C;
		  /* 821FD70Ch */ case    3:  		/* bl -577468 */
		/* 821FD70Ch case    3:*/		regs.LR = 0x821FD710; return 0x82170750;
		/* 821FD70Ch case    3:*/		return 0x821FD710;
		  /* 821FD710h */ case    4:  		/* mr R4, R3 */
		/* 821FD710h case    4:*/		regs.R4 = regs.R3;
		/* 821FD710h case    4:*/		return 0x821FD714;
		  /* 821FD714h */ case    5:  		/* mr R3, R24 */
		/* 821FD714h case    5:*/		regs.R3 = regs.R24;
		/* 821FD714h case    5:*/		return 0x821FD718;
		  /* 821FD718h */ case    6:  		/* bl -546128 */
		/* 821FD718h case    6:*/		regs.LR = 0x821FD71C; return 0x821781C8;
		/* 821FD718h case    6:*/		return 0x821FD71C;
	}
	return 0x821FD71C;
} // Block from 821FD700h-821FD71Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FD71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD71C);
		  /* 821FD71Ch */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FD71Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD71Ch case    0:*/		return 0x821FD720;
		  /* 821FD720h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821FD720h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821FD720h case    1:*/		return 0x821FD724;
		  /* 821FD724h */ case    2:  		/* cmplwi CR6, R11, 12288 */
		/* 821FD724h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003000);
		/* 821FD724h case    2:*/		return 0x821FD728;
		  /* 821FD728h */ case    3:  		/* bc 4, CR6_EQ, 164 */
		/* 821FD728h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FD7CC;  }
		/* 821FD728h case    3:*/		return 0x821FD72C;
		  /* 821FD72Ch */ case    4:  		/* mr R4, R31 */
		/* 821FD72Ch case    4:*/		regs.R4 = regs.R31;
		/* 821FD72Ch case    4:*/		return 0x821FD730;
		  /* 821FD730h */ case    5:  		/* mr R3, R24 */
		/* 821FD730h case    5:*/		regs.R3 = regs.R24;
		/* 821FD730h case    5:*/		return 0x821FD734;
		  /* 821FD734h */ case    6:  		/* bl -626748 */
		/* 821FD734h case    6:*/		regs.LR = 0x821FD738; return 0x821646F8;
		/* 821FD734h case    6:*/		return 0x821FD738;
		  /* 821FD738h */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FD738h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FD738h case    7:*/		return 0x821FD73C;
		  /* 821FD73Ch */ case    8:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821FD73Ch case    8:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821FD73Ch case    8:*/		return 0x821FD740;
		  /* 821FD740h */ case    9:  		/* bc 12, CR0_EQ, 140 */
		/* 821FD740h case    9:*/		if ( regs.CR[0].eq ) { return 0x821FD7CC;  }
		/* 821FD740h case    9:*/		return 0x821FD744;
		  /* 821FD744h */ case   10:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD744h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD744h case   10:*/		return 0x821FD748;
		  /* 821FD748h */ case   11:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD748h case   11:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD748h case   11:*/		return 0x821FD74C;
		  /* 821FD74Ch */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD74Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821FD75C;  }
		/* 821FD74Ch case   12:*/		return 0x821FD750;
		  /* 821FD750h */ case   13:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD750h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD750h case   13:*/		return 0x821FD754;
		  /* 821FD754h */ case   14:  		/* addi R10, R11, 11 */
		/* 821FD754h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xB);
		/* 821FD754h case   14:*/		return 0x821FD758;
		  /* 821FD758h */ case   15:  		/* b 8 */
		/* 821FD758h case   15:*/		return 0x821FD760;
		/* 821FD758h case   15:*/		return 0x821FD75C;
	}
	return 0x821FD75C;
} // Block from 821FD71Ch-821FD75Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821FD75Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD75C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD75C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD75C);
		  /* 821FD75Ch */ case    0:  		/* li R10, 726 */
		/* 821FD75Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2D6);
		/* 821FD75Ch case    0:*/		return 0x821FD760;
	}
	return 0x821FD760;
} // Block from 821FD75Ch-821FD760h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD760);
		  /* 821FD760h */ case    0:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD760h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD760h case    0:*/		return 0x821FD764;
		  /* 821FD764h */ case    1:  		/* lwz R9, <#[R11 + 80]> */
		/* 821FD764h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000050) );
		/* 821FD764h case    1:*/		return 0x821FD768;
		  /* 821FD768h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821FD768h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821FD768h case    2:*/		return 0x821FD76C;
		  /* 821FD76Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821FD76Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821FD780;  }
		/* 821FD76Ch case    3:*/		return 0x821FD770;
		  /* 821FD770h */ case    4:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821FD770h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821FD770h case    4:*/		return 0x821FD774;
		  /* 821FD774h */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821FD774h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821FD774h case    5:*/		return 0x821FD778;
		  /* 821FD778h */ case    6:  		/* lwzx R4, <#[R10 + R11]> */
		/* 821FD778h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821FD778h case    6:*/		return 0x821FD77C;
		  /* 821FD77Ch */ case    7:  		/* b 8 */
		/* 821FD77Ch case    7:*/		return 0x821FD784;
		/* 821FD77Ch case    7:*/		return 0x821FD780;
	}
	return 0x821FD780;
} // Block from 821FD760h-821FD780h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD780);
		  /* 821FD780h */ case    0:  		/* li R4, 0 */
		/* 821FD780h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FD780h case    0:*/		return 0x821FD784;
	}
	return 0x821FD784;
} // Block from 821FD780h-821FD784h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD784);
		  /* 821FD784h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821FD784h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821FD784h case    0:*/		return 0x821FD788;
		  /* 821FD788h */ case    1:  		/* bc 12, CR6_EQ, 27872 */
		/* 821FD788h case    1:*/		if ( regs.CR[6].eq ) { return 0x82204468;  }
		/* 821FD788h case    1:*/		return 0x821FD78C;
		  /* 821FD78Ch */ case    2:  		/* lwz R11, <#[R4]> */
		/* 821FD78Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821FD78Ch case    2:*/		return 0x821FD790;
		  /* 821FD790h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821FD790h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FD790h case    3:*/		return 0x821FD794;
		  /* 821FD794h */ case    4:  		/* bc 12, CR6_EQ, 27860 */
		/* 821FD794h case    4:*/		if ( regs.CR[6].eq ) { return 0x82204468;  }
		/* 821FD794h case    4:*/		return 0x821FD798;
		  /* 821FD798h */ case    5:  		/* mr R3, R31 */
		/* 821FD798h case    5:*/		regs.R3 = regs.R31;
		/* 821FD798h case    5:*/		return 0x821FD79C;
		  /* 821FD79Ch */ case    6:  		/* bl -46364 */
		/* 821FD79Ch case    6:*/		regs.LR = 0x821FD7A0; return 0x821F2280;
		/* 821FD79Ch case    6:*/		return 0x821FD7A0;
		  /* 821FD7A0h */ case    7:  		/* lwz R10, <#[R3 + 28]> */
		/* 821FD7A0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 821FD7A0h case    7:*/		return 0x821FD7A4;
		  /* 821FD7A4h */ case    8:  		/* lwz R11, <#[R31 + 564]> */
		/* 821FD7A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD7A4h case    8:*/		return 0x821FD7A8;
		  /* 821FD7A8h */ case    9:  		/* mr R4, R3 */
		/* 821FD7A8h case    9:*/		regs.R4 = regs.R3;
		/* 821FD7A8h case    9:*/		return 0x821FD7AC;
		  /* 821FD7ACh */ case   10:  		/* mr R3, R31 */
		/* 821FD7ACh case   10:*/		regs.R3 = regs.R31;
		/* 821FD7ACh case   10:*/		return 0x821FD7B0;
		  /* 821FD7B0h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 821FD7B0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821FD7B0h case   11:*/		return 0x821FD7B4;
		  /* 821FD7B4h */ case   12:  		/* bc 4, CR6_EQ, 27812 */
		/* 821FD7B4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82204458;  }
		/* 821FD7B4h case   12:*/		return 0x821FD7B8;
		  /* 821FD7B8h */ case   13:  		/* li R5, 4 */
		/* 821FD7B8h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FD7B8h case   13:*/		return 0x821FD7BC;
		  /* 821FD7BCh */ case   14:  		/* bl -577644 */
		/* 821FD7BCh case   14:*/		regs.LR = 0x821FD7C0; return 0x82170750;
		/* 821FD7BCh case   14:*/		return 0x821FD7C0;
		  /* 821FD7C0h */ case   15:  		/* mr R4, R3 */
		/* 821FD7C0h case   15:*/		regs.R4 = regs.R3;
		/* 821FD7C0h case   15:*/		return 0x821FD7C4;
		  /* 821FD7C4h */ case   16:  		/* mr R3, R24 */
		/* 821FD7C4h case   16:*/		regs.R3 = regs.R24;
		/* 821FD7C4h case   16:*/		return 0x821FD7C8;
		  /* 821FD7C8h */ case   17:  		/* bl -546304 */
		/* 821FD7C8h case   17:*/		regs.LR = 0x821FD7CC; return 0x821781C8;
		/* 821FD7C8h case   17:*/		return 0x821FD7CC;
	}
	return 0x821FD7CC;
} // Block from 821FD784h-821FD7CCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821FD7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD7CC);
		  /* 821FD7CCh */ case    0:  		/* lwz R30, <#[R24 + 8]> */
		/* 821FD7CCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD7CCh case    0:*/		return 0x821FD7D0;
		  /* 821FD7D0h */ case    1:  		/* rlwinm. R11, R30, 26, 31, 31 */
		/* 821FD7D0h case    1:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R11,regs.R30);
		/* 821FD7D0h case    1:*/		return 0x821FD7D4;
		  /* 821FD7D4h */ case    2:  		/* bc 12, CR0_EQ, 240 */
		/* 821FD7D4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821FD8C4;  }
		/* 821FD7D4h case    2:*/		return 0x821FD7D8;
		  /* 821FD7D8h */ case    3:  		/* mr R3, R24 */
		/* 821FD7D8h case    3:*/		regs.R3 = regs.R24;
		/* 821FD7D8h case    3:*/		return 0x821FD7DC;
		  /* 821FD7DCh */ case    4:  		/* bl -628444 */
		/* 821FD7DCh case    4:*/		regs.LR = 0x821FD7E0; return 0x82164100;
		/* 821FD7DCh case    4:*/		return 0x821FD7E0;
		  /* 821FD7E0h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FD7E0h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FD7E0h case    5:*/		return 0x821FD7E4;
		  /* 821FD7E4h */ case    6:  		/* bc 12, CR0_EQ, 36 */
		/* 821FD7E4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821FD808;  }
		/* 821FD7E4h case    6:*/		return 0x821FD7E8;
		  /* 821FD7E8h */ case    7:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD7E8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD7E8h case    7:*/		return 0x821FD7EC;
		  /* 821FD7ECh */ case    8:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD7ECh case    8:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD7ECh case    8:*/		return 0x821FD7F0;
		  /* 821FD7F0h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD7F0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821FD800;  }
		/* 821FD7F0h case    9:*/		return 0x821FD7F4;
		  /* 821FD7F4h */ case   10:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD7F4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD7F4h case   10:*/		return 0x821FD7F8;
		  /* 821FD7F8h */ case   11:  		/* addi R4, R11, 6 */
		/* 821FD7F8h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6);
		/* 821FD7F8h case   11:*/		return 0x821FD7FC;
		  /* 821FD7FCh */ case   12:  		/* b 172 */
		/* 821FD7FCh case   12:*/		return 0x821FD8A8;
		/* 821FD7FCh case   12:*/		return 0x821FD800;
	}
	return 0x821FD800;
} // Block from 821FD7CCh-821FD800h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FD800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD800);
		  /* 821FD800h */ case    0:  		/* li R4, 720 */
		/* 821FD800h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2D0);
		/* 821FD800h case    0:*/		return 0x821FD804;
		  /* 821FD804h */ case    1:  		/* b 164 */
		/* 821FD804h case    1:*/		return 0x821FD8A8;
		/* 821FD804h case    1:*/		return 0x821FD808;
	}
	return 0x821FD808;
} // Block from 821FD800h-821FD808h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FD808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD808);
		  /* 821FD808h */ case    0:  		/* rlwinm R11, R30, 25, 25, 31 */
		/* 821FD808h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R30);
		/* 821FD808h case    0:*/		return 0x821FD80C;
		  /* 821FD80Ch */ case    1:  		/* cmplwi CR6, R11, 98 */
		/* 821FD80Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000062);
		/* 821FD80Ch case    1:*/		return 0x821FD810;
		  /* 821FD810h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 821FD810h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821FD834;  }
		/* 821FD810h case    2:*/		return 0x821FD814;
		  /* 821FD814h */ case    3:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD814h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD814h case    3:*/		return 0x821FD818;
		  /* 821FD818h */ case    4:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD818h case    4:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD818h case    4:*/		return 0x821FD81C;
		  /* 821FD81Ch */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD81Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821FD82C;  }
		/* 821FD81Ch case    5:*/		return 0x821FD820;
		  /* 821FD820h */ case    6:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD820h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD820h case    6:*/		return 0x821FD824;
		  /* 821FD824h */ case    7:  		/* addi R4, R11, 8 */
		/* 821FD824h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x8);
		/* 821FD824h case    7:*/		return 0x821FD828;
		  /* 821FD828h */ case    8:  		/* b 128 */
		/* 821FD828h case    8:*/		return 0x821FD8A8;
		/* 821FD828h case    8:*/		return 0x821FD82C;
	}
	return 0x821FD82C;
} // Block from 821FD808h-821FD82Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FD82Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD82C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD82C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD82C);
		  /* 821FD82Ch */ case    0:  		/* li R4, 722 */
		/* 821FD82Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2D2);
		/* 821FD82Ch case    0:*/		return 0x821FD830;
		  /* 821FD830h */ case    1:  		/* b 120 */
		/* 821FD830h case    1:*/		return 0x821FD8A8;
		/* 821FD830h case    1:*/		return 0x821FD834;
	}
	return 0x821FD834;
} // Block from 821FD82Ch-821FD834h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FD834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD834);
		  /* 821FD834h */ case    0:  		/* cmplwi CR6, R11, 101 */
		/* 821FD834h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000065);
		/* 821FD834h case    0:*/		return 0x821FD838;
		  /* 821FD838h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 821FD838h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FD85C;  }
		/* 821FD838h case    1:*/		return 0x821FD83C;
		  /* 821FD83Ch */ case    2:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD83Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD83Ch case    2:*/		return 0x821FD840;
		  /* 821FD840h */ case    3:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD840h case    3:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD840h case    3:*/		return 0x821FD844;
		  /* 821FD844h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD844h case    4:*/		if ( regs.CR[0].eq ) { return 0x821FD854;  }
		/* 821FD844h case    4:*/		return 0x821FD848;
		  /* 821FD848h */ case    5:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD848h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD848h case    5:*/		return 0x821FD84C;
		  /* 821FD84Ch */ case    6:  		/* addi R4, R11, 9 */
		/* 821FD84Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x9);
		/* 821FD84Ch case    6:*/		return 0x821FD850;
		  /* 821FD850h */ case    7:  		/* b 88 */
		/* 821FD850h case    7:*/		return 0x821FD8A8;
		/* 821FD850h case    7:*/		return 0x821FD854;
	}
	return 0x821FD854;
} // Block from 821FD834h-821FD854h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD854);
		  /* 821FD854h */ case    0:  		/* li R4, 724 */
		/* 821FD854h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2D4);
		/* 821FD854h case    0:*/		return 0x821FD858;
		  /* 821FD858h */ case    1:  		/* b 80 */
		/* 821FD858h case    1:*/		return 0x821FD8A8;
		/* 821FD858h case    1:*/		return 0x821FD85C;
	}
	return 0x821FD85C;
} // Block from 821FD854h-821FD85Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FD85Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD85C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD85C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD85C);
		  /* 821FD85Ch */ case    0:  		/* cmplwi CR6, R11, 102 */
		/* 821FD85Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821FD85Ch case    0:*/		return 0x821FD860;
		  /* 821FD860h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 821FD860h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FD884;  }
		/* 821FD860h case    1:*/		return 0x821FD864;
		  /* 821FD864h */ case    2:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD864h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD864h case    2:*/		return 0x821FD868;
		  /* 821FD868h */ case    3:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD868h case    3:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD868h case    3:*/		return 0x821FD86C;
		  /* 821FD86Ch */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD86Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821FD87C;  }
		/* 821FD86Ch case    4:*/		return 0x821FD870;
		  /* 821FD870h */ case    5:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD870h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD870h case    5:*/		return 0x821FD874;
		  /* 821FD874h */ case    6:  		/* addi R4, R11, 10 */
		/* 821FD874h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xA);
		/* 821FD874h case    6:*/		return 0x821FD878;
		  /* 821FD878h */ case    7:  		/* b 48 */
		/* 821FD878h case    7:*/		return 0x821FD8A8;
		/* 821FD878h case    7:*/		return 0x821FD87C;
	}
	return 0x821FD87C;
} // Block from 821FD85Ch-821FD87Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD87Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD87C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD87C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD87C);
		  /* 821FD87Ch */ case    0:  		/* li R4, 725 */
		/* 821FD87Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2D5);
		/* 821FD87Ch case    0:*/		return 0x821FD880;
		  /* 821FD880h */ case    1:  		/* b 40 */
		/* 821FD880h case    1:*/		return 0x821FD8A8;
		/* 821FD880h case    1:*/		return 0x821FD884;
	}
	return 0x821FD884;
} // Block from 821FD87Ch-821FD884h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FD884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD884);
		  /* 821FD884h */ case    0:  		/* cmplwi CR6, R11, 96 */
		/* 821FD884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000060);
		/* 821FD884h case    0:*/		return 0x821FD888;
		  /* 821FD888h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 821FD888h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FD8C4;  }
		/* 821FD888h case    1:*/		return 0x821FD88C;
		  /* 821FD88Ch */ case    2:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD88Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD88Ch case    2:*/		return 0x821FD890;
		  /* 821FD890h */ case    3:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD890h case    3:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD890h case    3:*/		return 0x821FD894;
		  /* 821FD894h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD894h case    4:*/		if ( regs.CR[0].eq ) { return 0x821FD8A4;  }
		/* 821FD894h case    4:*/		return 0x821FD898;
		  /* 821FD898h */ case    5:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD898h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD898h case    5:*/		return 0x821FD89C;
		  /* 821FD89Ch */ case    6:  		/* addi R4, R11, 11 */
		/* 821FD89Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xB);
		/* 821FD89Ch case    6:*/		return 0x821FD8A0;
		  /* 821FD8A0h */ case    7:  		/* b 8 */
		/* 821FD8A0h case    7:*/		return 0x821FD8A8;
		/* 821FD8A0h case    7:*/		return 0x821FD8A4;
	}
	return 0x821FD8A4;
} // Block from 821FD884h-821FD8A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD8A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD8A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD8A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD8A4);
		  /* 821FD8A4h */ case    0:  		/* li R4, 726 */
		/* 821FD8A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2D6);
		/* 821FD8A4h case    0:*/		return 0x821FD8A8;
	}
	return 0x821FD8A8;
} // Block from 821FD8A4h-821FD8A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD8A8);
		  /* 821FD8A8h */ case    0:  		/* mr R5, R31 */
		/* 821FD8A8h case    0:*/		regs.R5 = regs.R31;
		/* 821FD8A8h case    0:*/		return 0x821FD8AC;
		  /* 821FD8ACh */ case    1:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FD8ACh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD8ACh case    1:*/		return 0x821FD8B0;
		  /* 821FD8B0h */ case    2:  		/* bl -52992 */
		/* 821FD8B0h case    2:*/		regs.LR = 0x821FD8B4; return 0x821F09B0;
		/* 821FD8B0h case    2:*/		return 0x821FD8B4;
		  /* 821FD8B4h */ case    3:  		/* stw R24, <#[R3]> */
		/* 821FD8B4h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000000) );
		/* 821FD8B4h case    3:*/		return 0x821FD8B8;
		  /* 821FD8B8h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FD8B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FD8B8h case    4:*/		return 0x821FD8BC;
		  /* 821FD8BCh */ case    5:  		/* rlwimi R11, R23, 0, 16, 14 */
		/* 821FD8BCh case    5:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R23);
		/* 821FD8BCh case    5:*/		return 0x821FD8C0;
		  /* 821FD8C0h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821FD8C0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FD8C0h case    6:*/		return 0x821FD8C4;
	}
	return 0x821FD8C4;
} // Block from 821FD8A8h-821FD8C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FD8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD8C4);
		  /* 821FD8C4h */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821FD8C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821FD8C4h case    0:*/		return 0x821FD8C8;
		  /* 821FD8C8h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821FD8C8h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821FD8C8h case    1:*/		return 0x821FD8CC;
		  /* 821FD8CCh */ case    2:  		/* cmplwi CR6, R11, 32 */
		/* 821FD8CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821FD8CCh case    2:*/		return 0x821FD8D0;
		  /* 821FD8D0h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 821FD8D0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821FD8E0;  }
		/* 821FD8D0h case    3:*/		return 0x821FD8D4;
		  /* 821FD8D4h */ case    4:  		/* cmplwi CR6, R11, 82 */
		/* 821FD8D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 821FD8D4h case    4:*/		return 0x821FD8D8;
		  /* 821FD8D8h */ case    5:  		/* mr R11, R23 */
		/* 821FD8D8h case    5:*/		regs.R11 = regs.R23;
		/* 821FD8D8h case    5:*/		return 0x821FD8DC;
		  /* 821FD8DCh */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 821FD8DCh case    6:*/		if ( !regs.CR[6].gt ) { return 0x821FD8E4;  }
		/* 821FD8DCh case    6:*/		return 0x821FD8E0;
	}
	return 0x821FD8E0;
} // Block from 821FD8C4h-821FD8E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FD8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD8E0);
		  /* 821FD8E0h */ case    0:  		/* li R11, 0 */
		/* 821FD8E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FD8E0h case    0:*/		return 0x821FD8E4;
	}
	return 0x821FD8E4;
} // Block from 821FD8E0h-821FD8E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD8E4);
		  /* 821FD8E4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FD8E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FD8E4h case    0:*/		return 0x821FD8E8;
		  /* 821FD8E8h */ case    1:  		/* bc 12, CR0_EQ, 132 */
		/* 821FD8E8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FD96C;  }
		/* 821FD8E8h case    1:*/		return 0x821FD8EC;
		  /* 821FD8ECh */ case    2:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FD8ECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FD8ECh case    2:*/		return 0x821FD8F0;
		  /* 821FD8F0h */ case    3:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821FD8F0h case    3:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821FD8F0h case    3:*/		return 0x821FD8F4;
		  /* 821FD8F4h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821FD8F4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821FD904;  }
		/* 821FD8F4h case    4:*/		return 0x821FD8F8;
		  /* 821FD8F8h */ case    5:  		/* lwz R11, <#[R31 + 600]> */
		/* 821FD8F8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000258) );
		/* 821FD8F8h case    5:*/		return 0x821FD8FC;
		  /* 821FD8FCh */ case    6:  		/* addi R4, R11, 7 */
		/* 821FD8FCh case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7);
		/* 821FD8FCh case    6:*/		return 0x821FD900;
		  /* 821FD900h */ case    7:  		/* b 8 */
		/* 821FD900h case    7:*/		return 0x821FD908;
		/* 821FD900h case    7:*/		return 0x821FD904;
	}
	return 0x821FD904;
} // Block from 821FD8E4h-821FD904h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FD904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD904);
		  /* 821FD904h */ case    0:  		/* li R4, 723 */
		/* 821FD904h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2D3);
		/* 821FD904h case    0:*/		return 0x821FD908;
	}
	return 0x821FD908;
} // Block from 821FD904h-821FD908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FD908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD908);
		  /* 821FD908h */ case    0:  		/* mr R5, R31 */
		/* 821FD908h case    0:*/		regs.R5 = regs.R31;
		/* 821FD908h case    0:*/		return 0x821FD90C;
		  /* 821FD90Ch */ case    1:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FD90Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FD90Ch case    1:*/		return 0x821FD910;
		  /* 821FD910h */ case    2:  		/* bl -53088 */
		/* 821FD910h case    2:*/		regs.LR = 0x821FD914; return 0x821F09B0;
		/* 821FD910h case    2:*/		return 0x821FD914;
		  /* 821FD914h */ case    3:  		/* stw R24, <#[R3]> */
		/* 821FD914h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000000) );
		/* 821FD914h case    3:*/		return 0x821FD918;
		  /* 821FD918h */ case    4:  		/* li R10, 1 */
		/* 821FD918h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821FD918h case    4:*/		return 0x821FD91C;
		  /* 821FD91Ch */ case    5:  		/* addi R11, R17, 19 */
		/* 821FD91Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x13);
		/* 821FD91Ch case    5:*/		return 0x821FD920;
		  /* 821FD920h */ case    6:  		/* mr R30, R3 */
		/* 821FD920h case    6:*/		regs.R30 = regs.R3;
		/* 821FD920h case    6:*/		return 0x821FD924;
		  /* 821FD924h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821FD924h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821FD924h case    7:*/		return 0x821FD928;
		  /* 821FD928h */ case    8:  		/* lwz R9, <#[R3 + 4]> */
		/* 821FD928h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 821FD928h case    8:*/		return 0x821FD92C;
		  /* 821FD92Ch */ case    9:  		/* rlwimi R9, R10, 0, 16, 14 */
		/* 821FD92Ch case    9:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R9,regs.R10);
		/* 821FD92Ch case    9:*/		return 0x821FD930;
		  /* 821FD930h */ case   10:  		/* stw R9, <#[R3 + 4]> */
		/* 821FD930h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 821FD930h case   10:*/		return 0x821FD934;
		  /* 821FD934h */ case   11:  		/* lwzx R11, <#[R11 + R14]> */
		/* 821FD934h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R14 + 0x00000000) );
		/* 821FD934h case   11:*/		return 0x821FD938;
		  /* 821FD938h */ case   12:  		/* rlwinm. R11, R11, 0, 11, 11 */
		/* 821FD938h case   12:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R11,regs.R11);
		/* 821FD938h case   12:*/		return 0x821FD93C;
		  /* 821FD93Ch */ case   13:  		/* bc 12, CR0_EQ, 48 */
		/* 821FD93Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821FD96C;  }
		/* 821FD93Ch case   13:*/		return 0x821FD940;
		  /* 821FD940h */ case   14:  		/* mr R4, R3 */
		/* 821FD940h case   14:*/		regs.R4 = regs.R3;
		/* 821FD940h case   14:*/		return 0x821FD944;
		  /* 821FD944h */ case   15:  		/* mr R3, R31 */
		/* 821FD944h case   15:*/		regs.R3 = regs.R31;
		/* 821FD944h case   15:*/		return 0x821FD948;
		  /* 821FD948h */ case   16:  		/* bl -46536 */
		/* 821FD948h case   16:*/		regs.LR = 0x821FD94C; return 0x821F2380;
		/* 821FD948h case   16:*/		return 0x821FD94C;
		  /* 821FD94Ch */ case   17:  		/* lwz R10, <#[R3]> */
		/* 821FD94Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821FD94Ch case   17:*/		return 0x821FD950;
		  /* 821FD950h */ case   18:  		/* li R11, 1 */
		/* 821FD950h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FD950h case   18:*/		return 0x821FD954;
		  /* 821FD954h */ case   19:  		/* rlwimi R10, R11, 0, 27, 31 */
		/* 821FD954h case   19:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821FD954h case   19:*/		return 0x821FD958;
		  /* 821FD958h */ case   20:  		/* stw R10, <#[R3]> */
		/* 821FD958h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821FD958h case   20:*/		return 0x821FD95C;
		  /* 821FD95Ch */ case   21:  		/* stw R3, <#[R30]> */
		/* 821FD95Ch case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FD95Ch case   21:*/		return 0x821FD960;
		  /* 821FD960h */ case   22:  		/* lwz R10, <#[R30 + 4]> */
		/* 821FD960h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FD960h case   22:*/		return 0x821FD964;
		  /* 821FD964h */ case   23:  		/* rlwimi R10, R11, 1, 16, 14 */
		/* 821FD964h case   23:*/		cpu::op::rlwimi<0,1,16,14>(regs,&regs.R10,regs.R11);
		/* 821FD964h case   23:*/		return 0x821FD968;
		  /* 821FD968h */ case   24:  		/* stw R10, <#[R30 + 4]> */
		/* 821FD968h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FD968h case   24:*/		return 0x821FD96C;
	}
	return 0x821FD96C;
} // Block from 821FD908h-821FD96Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821FD96Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD96C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD96C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD96C);
		  /* 821FD96Ch */ case    0:  		/* addi R17, R17, 1 */
		/* 821FD96Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 821FD96Ch case    0:*/		return 0x821FD970;
		  /* 821FD970h */ case    1:  		/* cmplwi CR6, R17, 2 */
		/* 821FD970h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000002);
		/* 821FD970h case    1:*/		return 0x821FD974;
		  /* 821FD974h */ case    2:  		/* bc 12, CR6_LT, -5456 */
		/* 821FD974h case    2:*/		if ( regs.CR[6].lt ) { return 0x821FC424;  }
		/* 821FD974h case    2:*/		return 0x821FD978;
	}
	return 0x821FD978;
} // Block from 821FD96Ch-821FD978h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FD978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD978);
		  /* 821FD978h */ case    0:  		/* cmplwi CR0, R16, 0 */
		/* 821FD978h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R16,0x00000000);
		/* 821FD978h case    0:*/		return 0x821FD97C;
		  /* 821FD97Ch */ case    1:  		/* bc 12, CR0_EQ, -5724 */
		/* 821FD97Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FD97Ch case    1:*/		return 0x821FD980;
		  /* 821FD980h */ case    2:  		/* mr R5, R16 */
		/* 821FD980h case    2:*/		regs.R5 = regs.R16;
		/* 821FD980h case    2:*/		return 0x821FD984;
		  /* 821FD984h */ case    3:  		/* addi R3, R1, 3104 */
		/* 821FD984h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC20);
		/* 821FD984h case    3:*/		return 0x821FD988;
		  /* 821FD988h */ case    4:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FD988h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FD988h case    4:*/		return 0x821FD98C;
	}
	return 0x821FD98C;
} // Block from 821FD978h-821FD98Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FD98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD98C);
		  /* 821FD98Ch */ case    0:  		/* bl -49580 */
		/* 821FD98Ch case    0:*/		regs.LR = 0x821FD990; return 0x821F17E0;
		/* 821FD98Ch case    0:*/		return 0x821FD990;
		  /* 821FD990h */ case    1:  		/* b -5744 */
		/* 821FD990h case    1:*/		return 0x821FC320;
		/* 821FD990h case    1:*/		return 0x821FD994;
	}
	return 0x821FD994;
} // Block from 821FD98Ch-821FD994h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FD994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD994);
		  /* 821FD994h */ case    0:  		/* lwz R11, <#[R14 + 24]> */
		/* 821FD994h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000018) );
		/* 821FD994h case    0:*/		return 0x821FD998;
		  /* 821FD998h */ case    1:  		/* rlwinm. R25, R22, 0, 24, 31 */
		/* 821FD998h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R25,regs.R22);
		/* 821FD998h case    1:*/		return 0x821FD99C;
		  /* 821FD99Ch */ case    2:  		/* lwz R9, <#[R14 + 20]> */
		/* 821FD99Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000014) );
		/* 821FD99Ch case    2:*/		return 0x821FD9A0;
		  /* 821FD9A0h */ case    3:  		/* mullw R29, R11, R9 */
		/* 821FD9A0h case    3:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R11,regs.R9);
		/* 821FD9A0h case    3:*/		return 0x821FD9A4;
		  /* 821FD9A4h */ case    4:  		/* stw R29, <#[R1 + 96]> */
		/* 821FD9A4h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 821FD9A4h case    4:*/		return 0x821FD9A8;
		  /* 821FD9A8h */ case    5:  		/* bc 12, CR0_EQ, 48 */
		/* 821FD9A8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821FD9D8;  }
		/* 821FD9A8h case    5:*/		return 0x821FD9AC;
		  /* 821FD9ACh */ case    6:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FD9ACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FD9ACh case    6:*/		return 0x821FD9B0;
		  /* 821FD9B0h */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 821FD9B0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FD9B0h case    7:*/		return 0x821FD9B4;
		  /* 821FD9B4h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 821FD9B4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821FD9D8;  }
		/* 821FD9B4h case    8:*/		return 0x821FD9B8;
		  /* 821FD9B8h */ case    9:  		/* cmpwi CR6, R11, 1 */
		/* 821FD9B8h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FD9B8h case    9:*/		return 0x821FD9BC;
		  /* 821FD9BCh */ case   10:  		/* bc 4, CR6_GT, 27356 */
		/* 821FD9BCh case   10:*/		if ( !regs.CR[6].gt ) { return 0x82204498;  }
		/* 821FD9BCh case   10:*/		return 0x821FD9C0;
		  /* 821FD9C0h */ case   11:  		/* cmpwi CR6, R11, 3 */
		/* 821FD9C0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821FD9C0h case   11:*/		return 0x821FD9C4;
		  /* 821FD9C4h */ case   12:  		/* bc 4, CR6_GT, 20 */
		/* 821FD9C4h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821FD9D8;  }
		/* 821FD9C4h case   12:*/		return 0x821FD9C8;
		  /* 821FD9C8h */ case   13:  		/* cmpwi CR6, R11, 25 */
		/* 821FD9C8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 821FD9C8h case   13:*/		return 0x821FD9CC;
		  /* 821FD9CCh */ case   14:  		/* bc 4, CR6_GT, 27340 */
		/* 821FD9CCh case   14:*/		if ( !regs.CR[6].gt ) { return 0x82204498;  }
		/* 821FD9CCh case   14:*/		return 0x821FD9D0;
		  /* 821FD9D0h */ case   15:  		/* cmpwi CR6, R11, 29 */
		/* 821FD9D0h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001D);
		/* 821FD9D0h case   15:*/		return 0x821FD9D4;
		  /* 821FD9D4h */ case   16:  		/* bc 12, CR6_GT, 27332 */
		/* 821FD9D4h case   16:*/		if ( regs.CR[6].gt ) { return 0x82204498;  }
		/* 821FD9D4h case   16:*/		return 0x821FD9D8;
	}
	return 0x821FD9D8;
} // Block from 821FD994h-821FD9D8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821FD9D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FD9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FD9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FD9D8);
		  /* 821FD9D8h */ case    0:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FD9D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FD9D8h case    0:*/		return 0x821FD9DC;
		  /* 821FD9DCh */ case    1:  		/* cmplwi CR6, R11, 33 */
		/* 821FD9DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000021);
		/* 821FD9DCh case    1:*/		return 0x821FD9E0;
		  /* 821FD9E0h */ case    2:  		/* bc 12, CR6_GT, 28424 */
		/* 821FD9E0h case    2:*/		if ( regs.CR[6].gt ) { return 0x822048E8;  }
		/* 821FD9E0h case    2:*/		return 0x821FD9E4;
		  /* 821FD9E4h */ case    3:  		/* lis R12, -32252 */
		/* 821FD9E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821FD9E4h case    3:*/		return 0x821FD9E8;
		  /* 821FD9E8h */ case    4:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 821FD9E8h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 821FD9E8h case    4:*/		return 0x821FD9EC;
		  /* 821FD9ECh */ case    5:  		/* addi R12, R12, -14072 */
		/* 821FD9ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFC908);
		/* 821FD9ECh case    5:*/		return 0x821FD9F0;
		  /* 821FD9F0h */ case    6:  		/* lhzx R0, <#[R12 + R0]> */
		/* 821FD9F0h case    6:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 821FD9F0h case    6:*/		return 0x821FD9F4;
		  /* 821FD9F4h */ case    7:  		/* lis R12, -32224 */
		/* 821FD9F4h case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8220);
		/* 821FD9F4h case    7:*/		return 0x821FD9F8;
		  /* 821FD9F8h */ case    8:  		/* addi R12, R12, -9716 */
		/* 821FD9F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFDA0C);
		/* 821FD9F8h case    8:*/		return 0x821FD9FC;
		  /* 821FD9FCh */ case    9:  		/* ori R0, R0, 0 */
		/* 821FD9FCh case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821FD9FCh case    9:*/		return 0x821FDA00;
		  /* 821FDA00h */ case   10:  		/* add R12, R12, R0 */
		/* 821FDA00h case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821FDA00h case   10:*/		return 0x821FDA04;
		  /* 821FDA04h */ case   11:  		/* mtspr CTR, R12 */
		/* 821FDA04h case   11:*/		regs.CTR = regs.R12;
		/* 821FDA04h case   11:*/		return 0x821FDA08;
		  /* 821FDA08h */ case   12:  		/* bcctr 20, CR0_LT */
		/* 821FDA08h case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821FDA08h case   12:*/		return 0x821FDA0C;
		  /* 821FDA0Ch */ case   13:  		/* mr R3, R31 */
		/* 821FDA0Ch case   13:*/		regs.R3 = regs.R31;
		/* 821FDA0Ch case   13:*/		return 0x821FDA10;
		  /* 821FDA10h */ case   14:  		/* lwz R4, <#[R14 + 36]> */
		/* 821FDA10h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000024) );
		/* 821FDA10h case   14:*/		return 0x821FDA14;
		  /* 821FDA14h */ case   15:  		/* bl -67004 */
		/* 821FDA14h case   15:*/		regs.LR = 0x821FDA18; return 0x821ED458;
		/* 821FDA14h case   15:*/		return 0x821FDA18;
		  /* 821FDA18h */ case   16:  		/* or. R5, R3, R3 */
		/* 821FDA18h case   16:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 821FDA18h case   16:*/		return 0x821FDA1C;
		  /* 821FDA1Ch */ case   17:  		/* bc 12, CR0_EQ, -5884 */
		/* 821FDA1Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FDA1Ch case   17:*/		return 0x821FDA20;
		  /* 821FDA20h */ case   18:  		/* addi R3, R1, 3120 */
		/* 821FDA20h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC30);
		/* 821FDA20h case   18:*/		return 0x821FDA24;
		  /* 821FDA24h */ case   19:  		/* b -156 */
		/* 821FDA24h case   19:*/		return 0x821FD988;
		/* 821FDA24h case   19:*/		return 0x821FDA28;
		  /* 821FDA28h */ case   20:  		/* mr R3, R31 */
		/* 821FDA28h case   20:*/		regs.R3 = regs.R31;
		/* 821FDA28h case   20:*/		return 0x821FDA2C;
		  /* 821FDA2Ch */ case   21:  		/* lwz R4, <#[R14 + 32]> */
		/* 821FDA2Ch case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000020) );
		/* 821FDA2Ch case   21:*/		return 0x821FDA30;
		  /* 821FDA30h */ case   22:  		/* bl -67032 */
		/* 821FDA30h case   22:*/		regs.LR = 0x821FDA34; return 0x821ED458;
		/* 821FDA30h case   22:*/		return 0x821FDA34;
		  /* 821FDA34h */ case   23:  		/* mr R27, R3 */
		/* 821FDA34h case   23:*/		regs.R27 = regs.R3;
		/* 821FDA34h case   23:*/		return 0x821FDA38;
		  /* 821FDA38h */ case   24:  		/* cmplw CR6, R3, R29 */
		/* 821FDA38h case   24:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 821FDA38h case   24:*/		return 0x821FDA3C;
		  /* 821FDA3Ch */ case   25:  		/* bc 12, CR6_EQ, 380 */
		/* 821FDA3Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x821FDBB8;  }
		/* 821FDA3Ch case   25:*/		return 0x821FDA40;
		  /* 821FDA40h */ case   26:  		/* bc 4, CR6_LT, 72 */
		/* 821FDA40h case   26:*/		if ( !regs.CR[6].lt ) { return 0x821FDA88;  }
		/* 821FDA40h case   26:*/		return 0x821FDA44;
		  /* 821FDA44h */ case   27:  		/* cmplwi CR6, R3, 1 */
		/* 821FDA44h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 821FDA44h case   27:*/		return 0x821FDA48;
		  /* 821FDA48h */ case   28:  		/* bc 4, CR6_EQ, 27228 */
		/* 821FDA48h case   28:*/		if ( !regs.CR[6].eq ) { return 0x822044A4;  }
		/* 821FDA48h case   28:*/		return 0x821FDA4C;
		  /* 821FDA4Ch */ case   29:  		/* lwz R26, <#[R1 + 3500]> */
		/* 821FDA4Ch case   29:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDA4Ch case   29:*/		return 0x821FDA50;
		  /* 821FDA50h */ case   30:  		/* li R5, 1 */
		/* 821FDA50h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FDA50h case   30:*/		return 0x821FDA54;
		  /* 821FDA54h */ case   31:  		/* addi R3, R1, 1752 */
		/* 821FDA54h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6D8);
		/* 821FDA54h case   31:*/		return 0x821FDA58;
		  /* 821FDA58h */ case   32:  		/* mr R4, R26 */
		/* 821FDA58h case   32:*/		regs.R4 = regs.R26;
		/* 821FDA58h case   32:*/		return 0x821FDA5C;
		  /* 821FDA5Ch */ case   33:  		/* bl -30540 */
		/* 821FDA5Ch case   33:*/		regs.LR = 0x821FDA60; return 0x821F6310;
		/* 821FDA5Ch case   33:*/		return 0x821FDA60;
		  /* 821FDA60h */ case   34:  		/* li R30, 1 */
		/* 821FDA60h case   34:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821FDA60h case   34:*/		return 0x821FDA64;
		  /* 821FDA64h */ case   35:  		/* li R6, 1 */
		/* 821FDA64h case   35:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821FDA64h case   35:*/		return 0x821FDA68;
		  /* 821FDA68h */ case   36:  		/* addi R5, R1, 1752 */
		/* 821FDA68h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x6D8);
		/* 821FDA68h case   36:*/		return 0x821FDA6C;
		  /* 821FDA6Ch */ case   37:  		/* mr R4, R26 */
		/* 821FDA6Ch case   37:*/		regs.R4 = regs.R26;
		/* 821FDA6Ch case   37:*/		return 0x821FDA70;
		  /* 821FDA70h */ case   38:  		/* mr R3, R31 */
		/* 821FDA70h case   38:*/		regs.R3 = regs.R31;
		/* 821FDA70h case   38:*/		return 0x821FDA74;
		  /* 821FDA74h */ case   39:  		/* bl -20652 */
		/* 821FDA74h case   39:*/		regs.LR = 0x821FDA78; return 0x821F89C8;
		/* 821FDA74h case   39:*/		return 0x821FDA78;
		  /* 821FDA78h */ case   40:  		/* addi R30, R30, 1 */
		/* 821FDA78h case   40:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821FDA78h case   40:*/		return 0x821FDA7C;
		  /* 821FDA7Ch */ case   41:  		/* cmplw CR6, R30, R29 */
		/* 821FDA7Ch case   41:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821FDA7Ch case   41:*/		return 0x821FDA80;
		  /* 821FDA80h */ case   42:  		/* bc 12, CR6_LT, -28 */
		/* 821FDA80h case   42:*/		if ( regs.CR[6].lt ) { return 0x821FDA64;  }
		/* 821FDA80h case   42:*/		return 0x821FDA84;
		  /* 821FDA84h */ case   43:  		/* b 312 */
		/* 821FDA84h case   43:*/		return 0x821FDBBC;
		/* 821FDA84h case   43:*/		return 0x821FDA88;
	}
	return 0x821FDA88;
} // Block from 821FD9D8h-821FDA88h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821FDA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDA88);
		  /* 821FDA88h */ case    0:  		/* lwz R11, <#[R14 + 20]> */
		/* 821FDA88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000014) );
		/* 821FDA88h case    0:*/		return 0x821FDA8C;
		  /* 821FDA8Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821FDA8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FDA8Ch case    1:*/		return 0x821FDA90;
		  /* 821FDA90h */ case    2:  		/* bc 12, CR6_EQ, 268 */
		/* 821FDA90h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FDB9C;  }
		/* 821FDA90h case    2:*/		return 0x821FDA94;
		  /* 821FDA94h */ case    3:  		/* lwz R4, <#[R14 + 32]> */
		/* 821FDA94h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000020) );
		/* 821FDA94h case    3:*/		return 0x821FDA98;
		  /* 821FDA98h */ case    4:  		/* lwz R11, <#[R4 + 4]> */
		/* 821FDA98h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821FDA98h case    4:*/		return 0x821FDA9C;
		  /* 821FDA9Ch */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 821FDA9Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FDA9Ch case    5:*/		return 0x821FDAA0;
		  /* 821FDAA0h */ case    6:  		/* bc 4, CR6_EQ, 48 */
		/* 821FDAA0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821FDAD0;  }
		/* 821FDAA0h case    6:*/		return 0x821FDAA4;
		  /* 821FDAA4h */ case    7:  		/* lwz R11, <#[R4 + 12]> */
		/* 821FDAA4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821FDAA4h case    7:*/		return 0x821FDAA8;
		  /* 821FDAA8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FDAA8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FDAA8h case    8:*/		return 0x821FDAAC;
		  /* 821FDAACh */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 821FDAACh case    9:*/		if ( regs.CR[6].eq ) { return 0x821FDAB8;  }
		/* 821FDAACh case    9:*/		return 0x821FDAB0;
		  /* 821FDAB0h */ case   10:  		/* li R3, 0 */
		/* 821FDAB0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821FDAB0h case   10:*/		return 0x821FDAB4;
		  /* 821FDAB4h */ case   11:  		/* b 44 */
		/* 821FDAB4h case   11:*/		return 0x821FDAE0;
		/* 821FDAB4h case   11:*/		return 0x821FDAB8;
	}
	return 0x821FDAB8;
} // Block from 821FDA88h-821FDAB8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FDAB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDAB8);
		  /* 821FDAB8h */ case    0:  		/* addi R6, R1, 180 */
		/* 821FDAB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB4);
		/* 821FDAB8h case    0:*/		return 0x821FDABC;
		  /* 821FDABCh */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 821FDABCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 821FDABCh case    1:*/		return 0x821FDAC0;
		  /* 821FDAC0h */ case    2:  		/* addi R5, R1, 276 */
		/* 821FDAC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x114);
		/* 821FDAC0h case    2:*/		return 0x821FDAC4;
		  /* 821FDAC4h */ case    3:  		/* mr R3, R31 */
		/* 821FDAC4h case    3:*/		regs.R3 = regs.R31;
		/* 821FDAC4h case    3:*/		return 0x821FDAC8;
		  /* 821FDAC8h */ case    4:  		/* bl -72560 */
		/* 821FDAC8h case    4:*/		regs.LR = 0x821FDACC; return 0x821EBF58;
		/* 821FDAC8h case    4:*/		return 0x821FDACC;
		  /* 821FDACCh */ case    5:  		/* b 20 */
		/* 821FDACCh case    5:*/		return 0x821FDAE0;
		/* 821FDACCh case    5:*/		return 0x821FDAD0;
	}
	return 0x821FDAD0;
} // Block from 821FDAB8h-821FDAD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FDAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDAD0);
		  /* 821FDAD0h */ case    0:  		/* addi R6, R1, 180 */
		/* 821FDAD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB4);
		/* 821FDAD0h case    0:*/		return 0x821FDAD4;
		  /* 821FDAD4h */ case    1:  		/* addi R5, R1, 276 */
		/* 821FDAD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x114);
		/* 821FDAD4h case    1:*/		return 0x821FDAD8;
		  /* 821FDAD8h */ case    2:  		/* mr R3, R31 */
		/* 821FDAD8h case    2:*/		regs.R3 = regs.R31;
		/* 821FDAD8h case    2:*/		return 0x821FDADC;
		  /* 821FDADCh */ case    3:  		/* bl -72708 */
		/* 821FDADCh case    3:*/		regs.LR = 0x821FDAE0; return 0x821EBED8;
		/* 821FDADCh case    3:*/		return 0x821FDAE0;
	}
	return 0x821FDAE0;
} // Block from 821FDAD0h-821FDAE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FDAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDAE0);
		  /* 821FDAE0h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FDAE0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FDAE0h case    0:*/		return 0x821FDAE4;
		  /* 821FDAE4h */ case    1:  		/* bc 12, CR0_EQ, 184 */
		/* 821FDAE4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FDB9C;  }
		/* 821FDAE4h case    1:*/		return 0x821FDAE8;
		  /* 821FDAE8h */ case    2:  		/* lwz R11, <#[R14 + 20]> */
		/* 821FDAE8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000014) );
		/* 821FDAE8h case    2:*/		return 0x821FDAEC;
		  /* 821FDAECh */ case    3:  		/* lwz R10, <#[R1 + 276]> */
		/* 821FDAECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000114) );
		/* 821FDAECh case    3:*/		return 0x821FDAF0;
		  /* 821FDAF0h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 821FDAF0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FDAF0h case    4:*/		return 0x821FDAF4;
		  /* 821FDAF4h */ case    5:  		/* bc 12, CR6_GT, 27068 */
		/* 821FDAF4h case    5:*/		if ( regs.CR[6].gt ) { return 0x822044B0;  }
		/* 821FDAF4h case    5:*/		return 0x821FDAF8;
		  /* 821FDAF8h */ case    6:  		/* lwz R11, <#[R14 + 24]> */
		/* 821FDAF8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000018) );
		/* 821FDAF8h case    6:*/		return 0x821FDAFC;
		  /* 821FDAFCh */ case    7:  		/* lwz R10, <#[R1 + 180]> */
		/* 821FDAFCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000B4) );
		/* 821FDAFCh case    7:*/		return 0x821FDB00;
		  /* 821FDB00h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821FDB00h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FDB00h case    8:*/		return 0x821FDB04;
		  /* 821FDB04h */ case    9:  		/* bc 12, CR6_GT, 27052 */
		/* 821FDB04h case    9:*/		if ( regs.CR[6].gt ) { return 0x822044B0;  }
		/* 821FDB04h case    9:*/		return 0x821FDB08;
		  /* 821FDB08h */ case   10:  		/* bc 4, CR6_LT, 148 */
		/* 821FDB08h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821FDB9C;  }
		/* 821FDB08h case   10:*/		return 0x821FDB0C;
		  /* 821FDB0Ch */ case   11:  		/* lwz R26, <#[R1 + 3500]> */
		/* 821FDB0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDB0Ch case   11:*/		return 0x821FDB10;
		  /* 821FDB10h */ case   12:  		/* mr R5, R27 */
		/* 821FDB10h case   12:*/		regs.R5 = regs.R27;
		/* 821FDB10h case   12:*/		return 0x821FDB14;
		  /* 821FDB14h */ case   13:  		/* addi R3, R1, 1344 */
		/* 821FDB14h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x540);
		/* 821FDB14h case   13:*/		return 0x821FDB18;
		  /* 821FDB18h */ case   14:  		/* mr R4, R26 */
		/* 821FDB18h case   14:*/		regs.R4 = regs.R26;
		/* 821FDB18h case   14:*/		return 0x821FDB1C;
		  /* 821FDB1Ch */ case   15:  		/* bl -30732 */
		/* 821FDB1Ch case   15:*/		regs.LR = 0x821FDB20; return 0x821F6310;
		/* 821FDB1Ch case   15:*/		return 0x821FDB20;
		  /* 821FDB20h */ case   16:  		/* lwz R11, <#[R14 + 20]> */
		/* 821FDB20h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000014) );
		/* 821FDB20h case   16:*/		return 0x821FDB24;
		  /* 821FDB24h */ case   17:  		/* li R28, 0 */
		/* 821FDB24h case   17:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821FDB24h case   17:*/		return 0x821FDB28;
		  /* 821FDB28h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821FDB28h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FDB28h case   18:*/		return 0x821FDB2C;
		  /* 821FDB2Ch */ case   19:  		/* bc 4, CR6_GT, 116 */
		/* 821FDB2Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x821FDBA0;  }
		/* 821FDB2Ch case   19:*/		return 0x821FDB30;
		  /* 821FDB30h */ case   20:  		/* lwz R11, <#[R14 + 24]> */
		/* 821FDB30h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000018) );
		/* 821FDB30h case   20:*/		return 0x821FDB34;
		  /* 821FDB34h */ case   21:  		/* li R30, 0 */
		/* 821FDB34h case   21:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FDB34h case   21:*/		return 0x821FDB38;
		  /* 821FDB38h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821FDB38h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FDB38h case   22:*/		return 0x821FDB3C;
		  /* 821FDB3Ch */ case   23:  		/* bc 12, CR6_EQ, 76 */
		/* 821FDB3Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821FDB88;  }
		/* 821FDB3Ch case   23:*/		return 0x821FDB40;
		  /* 821FDB40h */ case   24:  		/* mullw R11, R11, R28 */
		/* 821FDB40h case   24:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821FDB40h case   24:*/		return 0x821FDB44;
		  /* 821FDB44h */ case   25:  		/* add R4, R11, R30 */
		/* 821FDB44h case   25:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R30);
		/* 821FDB44h case   25:*/		return 0x821FDB48;
		  /* 821FDB48h */ case   26:  		/* addi R3, R1, 1344 */
		/* 821FDB48h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x540);
		/* 821FDB48h case   26:*/		return 0x821FDB4C;
		  /* 821FDB4Ch */ case   27:  		/* bl -48404 */
		/* 821FDB4Ch case   27:*/		regs.LR = 0x821FDB50; return 0x821F1E38;
		/* 821FDB4Ch case   27:*/		return 0x821FDB50;
		  /* 821FDB50h */ case   28:  		/* lwz R11, <#[R1 + 180]> */
		/* 821FDB50h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 821FDB50h case   28:*/		return 0x821FDB54;
		  /* 821FDB54h */ case   29:  		/* mr R24, R3 */
		/* 821FDB54h case   29:*/		regs.R24 = regs.R3;
		/* 821FDB54h case   29:*/		return 0x821FDB58;
		  /* 821FDB58h */ case   30:  		/* mullw R11, R28, R11 */
		/* 821FDB58h case   30:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821FDB58h case   30:*/		return 0x821FDB5C;
		  /* 821FDB5Ch */ case   31:  		/* add R4, R11, R30 */
		/* 821FDB5Ch case   31:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R30);
		/* 821FDB5Ch case   31:*/		return 0x821FDB60;
		  /* 821FDB60h */ case   32:  		/* addi R3, R1, 1344 */
		/* 821FDB60h case   32:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x540);
		/* 821FDB60h case   32:*/		return 0x821FDB64;
		  /* 821FDB64h */ case   33:  		/* bl -48428 */
		/* 821FDB64h case   33:*/		regs.LR = 0x821FDB68; return 0x821F1E38;
		/* 821FDB64h case   33:*/		return 0x821FDB68;
		  /* 821FDB68h */ case   34:  		/* lwz R11, <#[R3]> */
		/* 821FDB68h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FDB68h case   34:*/		return 0x821FDB6C;
		  /* 821FDB6Ch */ case   35:  		/* addi R30, R30, 1 */
		/* 821FDB6Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821FDB6Ch case   35:*/		return 0x821FDB70;
		  /* 821FDB70h */ case   36:  		/* stw R11, <#[R24]> */
		/* 821FDB70h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821FDB70h case   36:*/		return 0x821FDB74;
		  /* 821FDB74h */ case   37:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FDB74h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FDB74h case   37:*/		return 0x821FDB78;
		  /* 821FDB78h */ case   38:  		/* stw R11, <#[R24 + 4]> */
		/* 821FDB78h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821FDB78h case   38:*/		return 0x821FDB7C;
		  /* 821FDB7Ch */ case   39:  		/* lwz R11, <#[R14 + 24]> */
		/* 821FDB7Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000018) );
		/* 821FDB7Ch case   39:*/		return 0x821FDB80;
		  /* 821FDB80h */ case   40:  		/* cmplw CR6, R30, R11 */
		/* 821FDB80h case   40:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821FDB80h case   40:*/		return 0x821FDB84;
		  /* 821FDB84h */ case   41:  		/* bc 12, CR6_LT, -68 */
		/* 821FDB84h case   41:*/		if ( regs.CR[6].lt ) { return 0x821FDB40;  }
		/* 821FDB84h case   41:*/		return 0x821FDB88;
	}
	return 0x821FDB88;
} // Block from 821FDAE0h-821FDB88h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821FDB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDB88);
		  /* 821FDB88h */ case    0:  		/* lwz R10, <#[R14 + 20]> */
		/* 821FDB88h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000014) );
		/* 821FDB88h case    0:*/		return 0x821FDB8C;
		  /* 821FDB8Ch */ case    1:  		/* addi R28, R28, 1 */
		/* 821FDB8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821FDB8Ch case    1:*/		return 0x821FDB90;
		  /* 821FDB90h */ case    2:  		/* cmplw CR6, R28, R10 */
		/* 821FDB90h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 821FDB90h case    2:*/		return 0x821FDB94;
		  /* 821FDB94h */ case    3:  		/* bc 12, CR6_LT, -96 */
		/* 821FDB94h case    3:*/		if ( regs.CR[6].lt ) { return 0x821FDB34;  }
		/* 821FDB94h case    3:*/		return 0x821FDB98;
		  /* 821FDB98h */ case    4:  		/* b 8 */
		/* 821FDB98h case    4:*/		return 0x821FDBA0;
		/* 821FDB98h case    4:*/		return 0x821FDB9C;
	}
	return 0x821FDB9C;
} // Block from 821FDB88h-821FDB9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FDB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDB9C);
		  /* 821FDB9Ch */ case    0:  		/* lwz R26, <#[R1 + 3500]> */
		/* 821FDB9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDB9Ch case    0:*/		return 0x821FDBA0;
	}
	return 0x821FDBA0;
} // Block from 821FDB9Ch-821FDBA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FDBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDBA0);
		  /* 821FDBA0h */ case    0:  		/* subf. R5, R29, R27 */
		/* 821FDBA0h case    0:*/		cpu::op::subf<1>(regs,&regs.R5,regs.R29,regs.R27);
		/* 821FDBA0h case    0:*/		return 0x821FDBA4;
		  /* 821FDBA4h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821FDBA4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FDBBC;  }
		/* 821FDBA4h case    1:*/		return 0x821FDBA8;
		  /* 821FDBA8h */ case    2:  		/* mr R4, R26 */
		/* 821FDBA8h case    2:*/		regs.R4 = regs.R26;
		/* 821FDBA8h case    2:*/		return 0x821FDBAC;
		  /* 821FDBACh */ case    3:  		/* addi R3, R1, 3136 */
		/* 821FDBACh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC40);
		/* 821FDBACh case    3:*/		return 0x821FDBB0;
		  /* 821FDBB0h */ case    4:  		/* bl -50128 */
		/* 821FDBB0h case    4:*/		regs.LR = 0x821FDBB4; return 0x821F17E0;
		/* 821FDBB0h case    4:*/		return 0x821FDBB4;
		  /* 821FDBB4h */ case    5:  		/* b 8 */
		/* 821FDBB4h case    5:*/		return 0x821FDBBC;
		/* 821FDBB4h case    5:*/		return 0x821FDBB8;
	}
	return 0x821FDBB8;
} // Block from 821FDBA0h-821FDBB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FDBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDBB8);
		  /* 821FDBB8h */ case    0:  		/* lwz R26, <#[R1 + 3500]> */
		/* 821FDBB8h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDBB8h case    0:*/		return 0x821FDBBC;
	}
	return 0x821FDBBC;
} // Block from 821FDBB8h-821FDBBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FDBBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDBBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDBBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDBBC);
		  /* 821FDBBCh */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821FDBBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FDBBCh case    0:*/		return 0x821FDBC0;
		  /* 821FDBC0h */ case    1:  		/* bc 4, CR6_EQ, -6304 */
		/* 821FDBC0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FDBC0h case    1:*/		return 0x821FDBC4;
		  /* 821FDBC4h */ case    2:  		/* mr R3, R31 */
		/* 821FDBC4h case    2:*/		regs.R3 = regs.R31;
		/* 821FDBC4h case    2:*/		return 0x821FDBC8;
		  /* 821FDBC8h */ case    3:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FDBC8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FDBC8h case    3:*/		return 0x821FDBCC;
		  /* 821FDBCCh */ case    4:  		/* bl -19940 */
		/* 821FDBCCh case    4:*/		regs.LR = 0x821FDBD0; return 0x821F8DE8;
		/* 821FDBCCh case    4:*/		return 0x821FDBD0;
		  /* 821FDBD0h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FDBD0h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FDBD0h case    5:*/		return 0x821FDBD4;
		  /* 821FDBD4h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821FDBD4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821FDBEC;  }
		/* 821FDBD4h case    6:*/		return 0x821FDBD8;
		  /* 821FDBD8h */ case    7:  		/* mr R6, R29 */
		/* 821FDBD8h case    7:*/		regs.R6 = regs.R29;
		/* 821FDBD8h case    7:*/		return 0x821FDBDC;
		  /* 821FDBDCh */ case    8:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FDBDCh case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FDBDCh case    8:*/		return 0x821FDBE0;
		  /* 821FDBE0h */ case    9:  		/* mr R5, R26 */
		/* 821FDBE0h case    9:*/		regs.R5 = regs.R26;
		/* 821FDBE0h case    9:*/		return 0x821FDBE4;
		  /* 821FDBE4h */ case   10:  		/* mr R3, R31 */
		/* 821FDBE4h case   10:*/		regs.R3 = regs.R31;
		/* 821FDBE4h case   10:*/		return 0x821FDBE8;
		  /* 821FDBE8h */ case   11:  		/* bl -15528 */
		/* 821FDBE8h case   11:*/		regs.LR = 0x821FDBEC; return 0x821F9F40;
		/* 821FDBE8h case   11:*/		return 0x821FDBEC;
	}
	return 0x821FDBEC;
} // Block from 821FDBBCh-821FDBECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FDBECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDBEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDBEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDBEC);
		  /* 821FDBECh */ case    0:  		/* mr R4, R26 */
		/* 821FDBECh case    0:*/		regs.R4 = regs.R26;
		/* 821FDBECh case    0:*/		return 0x821FDBF0;
		  /* 821FDBF0h */ case    1:  		/* mr R5, R29 */
		/* 821FDBF0h case    1:*/		regs.R5 = regs.R29;
		/* 821FDBF0h case    1:*/		return 0x821FDBF4;
		  /* 821FDBF4h */ case    2:  		/* mr R3, R31 */
		/* 821FDBF4h case    2:*/		regs.R3 = regs.R31;
		/* 821FDBF4h case    2:*/		return 0x821FDBF8;
		  /* 821FDBF8h */ case    3:  		/* bl -29528 */
		/* 821FDBF8h case    3:*/		regs.LR = 0x821FDBFC; return 0x821F68A0;
		/* 821FDBF8h case    3:*/		return 0x821FDBFC;
		  /* 821FDBFCh */ case    4:  		/* b -6364 */
		/* 821FDBFCh case    4:*/		return 0x821FC320;
		/* 821FDBFCh case    4:*/		return 0x821FDC00;
		  /* 821FDC00h */ case    5:  		/* mr R3, R31 */
		/* 821FDC00h case    5:*/		regs.R3 = regs.R31;
		/* 821FDC00h case    5:*/		return 0x821FDC04;
		  /* 821FDC04h */ case    6:  		/* lwz R4, <#[R14 + 32]> */
		/* 821FDC04h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000020) );
		/* 821FDC04h case    6:*/		return 0x821FDC08;
		  /* 821FDC08h */ case    7:  		/* bl -67504 */
		/* 821FDC08h case    7:*/		regs.LR = 0x821FDC0C; return 0x821ED458;
		/* 821FDC08h case    7:*/		return 0x821FDC0C;
		  /* 821FDC0Ch */ case    8:  		/* lwz R28, <#[R14 + 36]> */
		/* 821FDC0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R14 + 0x00000024) );
		/* 821FDC0Ch case    8:*/		return 0x821FDC10;
		  /* 821FDC10h */ case    9:  		/* mr R30, R3 */
		/* 821FDC10h case    9:*/		regs.R30 = regs.R3;
		/* 821FDC10h case    9:*/		return 0x821FDC14;
		  /* 821FDC14h */ case   10:  		/* lwz R11, <#[R28 + 4]> */
		/* 821FDC14h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821FDC14h case   10:*/		return 0x821FDC18;
		  /* 821FDC18h */ case   11:  		/* cmpwi CR6, R11, 15 */
		/* 821FDC18h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821FDC18h case   11:*/		return 0x821FDC1C;
		  /* 821FDC1Ch */ case   12:  		/* bc 4, CR6_EQ, 160 */
		/* 821FDC1Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x821FDCBC;  }
		/* 821FDC1Ch case   12:*/		return 0x821FDC20;
		  /* 821FDC20h */ case   13:  		/* lwz R11, <#[R28 + 16]> */
		/* 821FDC20h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821FDC20h case   13:*/		return 0x821FDC24;
		  /* 821FDC24h */ case   14:  		/* cmpwi CR6, R11, 2 */
		/* 821FDC24h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821FDC24h case   14:*/		return 0x821FDC28;
		  /* 821FDC28h */ case   15:  		/* bc 4, CR6_EQ, 26772 */
		/* 821FDC28h case   15:*/		if ( !regs.CR[6].eq ) { return 0x822044BC;  }
		/* 821FDC28h case   15:*/		return 0x821FDC2C;
		  /* 821FDC2Ch */ case   16:  		/* lwz R27, <#[R1 + 3500]> */
		/* 821FDC2Ch case   16:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDC2Ch case   16:*/		return 0x821FDC30;
		  /* 821FDC30h */ case   17:  		/* mr R5, R3 */
		/* 821FDC30h case   17:*/		regs.R5 = regs.R3;
		/* 821FDC30h case   17:*/		return 0x821FDC34;
		  /* 821FDC34h */ case   18:  		/* addi R3, R1, 1784 */
		/* 821FDC34h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6F8);
		/* 821FDC34h case   18:*/		return 0x821FDC38;
		  /* 821FDC38h */ case   19:  		/* mr R4, R27 */
		/* 821FDC38h case   19:*/		regs.R4 = regs.R27;
		/* 821FDC38h case   19:*/		return 0x821FDC3C;
		  /* 821FDC3Ch */ case   20:  		/* bl -31020 */
		/* 821FDC3Ch case   20:*/		regs.LR = 0x821FDC40; return 0x821F6310;
		/* 821FDC3Ch case   20:*/		return 0x821FDC40;
		  /* 821FDC40h */ case   21:  		/* lwz R11, <#[R28 + 24]> */
		/* 821FDC40h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 821FDC40h case   21:*/		return 0x821FDC44;
		  /* 821FDC44h */ case   22:  		/* mr R4, R27 */
		/* 821FDC44h case   22:*/		regs.R4 = regs.R27;
		/* 821FDC44h case   22:*/		return 0x821FDC48;
		  /* 821FDC48h */ case   23:  		/* addi R3, R1, 2232 */
		/* 821FDC48h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8B8);
		/* 821FDC48h case   23:*/		return 0x821FDC4C;
		  /* 821FDC4Ch */ case   24:  		/* subf R5, R11, R30 */
		/* 821FDC4Ch case   24:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R11,regs.R30);
		/* 821FDC4Ch case   24:*/		return 0x821FDC50;
		  /* 821FDC50h */ case   25:  		/* bl -31040 */
		/* 821FDC50h case   25:*/		regs.LR = 0x821FDC54; return 0x821F6310;
		/* 821FDC50h case   25:*/		return 0x821FDC54;
		  /* 821FDC54h */ case   26:  		/* mr R28, R29 */
		/* 821FDC54h case   26:*/		regs.R28 = regs.R29;
		/* 821FDC54h case   26:*/		return 0x821FDC58;
		  /* 821FDC58h */ case   27:  		/* cmplwi CR6, R29, 0 */
		/* 821FDC58h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FDC58h case   27:*/		return 0x821FDC5C;
		  /* 821FDC5Ch */ case   28:  		/* bc 12, CR6_EQ, 52 */
		/* 821FDC5Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x821FDC90;  }
		/* 821FDC5Ch case   28:*/		return 0x821FDC60;
		  /* 821FDC60h */ case   29:  		/* addi R3, R1, 2232 */
		/* 821FDC60h case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8B8);
		/* 821FDC60h case   29:*/		return 0x821FDC64;
		  /* 821FDC64h */ case   30:  		/* addi R28, R28, -1 */
		/* 821FDC64h case   30:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821FDC64h case   30:*/		return 0x821FDC68;
		  /* 821FDC68h */ case   31:  		/* bl -249352 */
		/* 821FDC68h case   31:*/		regs.LR = 0x821FDC6C; return 0x821C0E60;
		/* 821FDC68h case   31:*/		return 0x821FDC6C;
		  /* 821FDC6Ch */ case   32:  		/* mr R26, R3 */
		/* 821FDC6Ch case   32:*/		regs.R26 = regs.R3;
		/* 821FDC6Ch case   32:*/		return 0x821FDC70;
		  /* 821FDC70h */ case   33:  		/* addi R3, R1, 1784 */
		/* 821FDC70h case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6F8);
		/* 821FDC70h case   33:*/		return 0x821FDC74;
		  /* 821FDC74h */ case   34:  		/* bl -249364 */
		/* 821FDC74h case   34:*/		regs.LR = 0x821FDC78; return 0x821C0E60;
		/* 821FDC74h case   34:*/		return 0x821FDC78;
		  /* 821FDC78h */ case   35:  		/* lwz R11, <#[R26]> */
		/* 821FDC78h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821FDC78h case   35:*/		return 0x821FDC7C;
		  /* 821FDC7Ch */ case   36:  		/* cmplwi CR6, R28, 0 */
		/* 821FDC7Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FDC7Ch case   36:*/		return 0x821FDC80;
		  /* 821FDC80h */ case   37:  		/* stw R11, <#[R3]> */
		/* 821FDC80h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FDC80h case   37:*/		return 0x821FDC84;
		  /* 821FDC84h */ case   38:  		/* lwz R11, <#[R26 + 4]> */
		/* 821FDC84h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821FDC84h case   38:*/		return 0x821FDC88;
		  /* 821FDC88h */ case   39:  		/* stw R11, <#[R3 + 4]> */
		/* 821FDC88h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FDC88h case   39:*/		return 0x821FDC8C;
		  /* 821FDC8Ch */ case   40:  		/* bc 4, CR6_EQ, -44 */
		/* 821FDC8Ch case   40:*/		if ( !regs.CR[6].eq ) { return 0x821FDC60;  }
		/* 821FDC8Ch case   40:*/		return 0x821FDC90;
	}
	return 0x821FDC90;
} // Block from 821FDBECh-821FDC90h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821FDC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDC90);
		  /* 821FDC90h */ case    0:  		/* cmplw CR6, R30, R29 */
		/* 821FDC90h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821FDC90h case    0:*/		return 0x821FDC94;
		  /* 821FDC94h */ case    1:  		/* bc 4, CR6_GT, 24 */
		/* 821FDC94h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821FDCAC;  }
		/* 821FDC94h case    1:*/		return 0x821FDC98;
		  /* 821FDC98h */ case    2:  		/* subf. R5, R29, R30 */
		/* 821FDC98h case    2:*/		cpu::op::subf<1>(regs,&regs.R5,regs.R29,regs.R30);
		/* 821FDC98h case    2:*/		return 0x821FDC9C;
		  /* 821FDC9Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821FDC9Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821FDCAC;  }
		/* 821FDC9Ch case    3:*/		return 0x821FDCA0;
		  /* 821FDCA0h */ case    4:  		/* mr R4, R27 */
		/* 821FDCA0h case    4:*/		regs.R4 = regs.R27;
		/* 821FDCA0h case    4:*/		return 0x821FDCA4;
		  /* 821FDCA4h */ case    5:  		/* addi R3, R1, 3152 */
		/* 821FDCA4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC50);
		/* 821FDCA4h case    5:*/		return 0x821FDCA8;
		  /* 821FDCA8h */ case    6:  		/* bl -50376 */
		/* 821FDCA8h case    6:*/		regs.LR = 0x821FDCAC; return 0x821F17E0;
		/* 821FDCA8h case    6:*/		return 0x821FDCAC;
	}
	return 0x821FDCAC;
} // Block from 821FDC90h-821FDCACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FDCACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDCAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDCAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDCAC);
		  /* 821FDCACh */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821FDCACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FDCACh case    0:*/		return 0x821FDCB0;
		  /* 821FDCB0h */ case    1:  		/* bc 4, CR6_EQ, -6544 */
		/* 821FDCB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FDCB0h case    1:*/		return 0x821FDCB4;
		  /* 821FDCB4h */ case    2:  		/* mr R4, R27 */
		/* 821FDCB4h case    2:*/		regs.R4 = regs.R27;
		/* 821FDCB4h case    2:*/		return 0x821FDCB8;
		  /* 821FDCB8h */ case    3:  		/* b -200 */
		/* 821FDCB8h case    3:*/		return 0x821FDBF0;
		/* 821FDCB8h case    3:*/		return 0x821FDCBC;
	}
	return 0x821FDCBC;
} // Block from 821FDCACh-821FDCBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FDCBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDCBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDCBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDCBC);
		  /* 821FDCBCh */ case    0:  		/* cmplwi CR0, R28, 0 */
		/* 821FDCBCh case    0:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 821FDCBCh case    0:*/		return 0x821FDCC0;
		  /* 821FDCC0h */ case    1:  		/* bc 12, CR0_EQ, 26704 */
		/* 821FDCC0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82204510;  }
		/* 821FDCC0h case    1:*/		return 0x821FDCC4;
		  /* 821FDCC4h */ case    2:  		/* lwz R11, <#[R28 + 4]> */
		/* 821FDCC4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821FDCC4h case    2:*/		return 0x821FDCC8;
		  /* 821FDCC8h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 821FDCC8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FDCC8h case    3:*/		return 0x821FDCCC;
		  /* 821FDCCCh */ case    4:  		/* bc 4, CR6_EQ, 26692 */
		/* 821FDCCCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x82204510;  }
		/* 821FDCCCh case    4:*/		return 0x821FDCD0;
		  /* 821FDCD0h */ case    5:  		/* lwz R24, <#[R1 + 3500]> */
		/* 821FDCD0h case    5:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDCD0h case    5:*/		return 0x821FDCD4;
		  /* 821FDCD4h */ case    6:  		/* mr R5, R30 */
		/* 821FDCD4h case    6:*/		regs.R5 = regs.R30;
		/* 821FDCD4h case    6:*/		return 0x821FDCD8;
		  /* 821FDCD8h */ case    7:  		/* addi R3, R1, 1368 */
		/* 821FDCD8h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x558);
		/* 821FDCD8h case    7:*/		return 0x821FDCDC;
		  /* 821FDCDCh */ case    8:  		/* mr R4, R24 */
		/* 821FDCDCh case    8:*/		regs.R4 = regs.R24;
		/* 821FDCDCh case    8:*/		return 0x821FDCE0;
		  /* 821FDCE0h */ case    9:  		/* bl -31184 */
		/* 821FDCE0h case    9:*/		regs.LR = 0x821FDCE4; return 0x821F6310;
		/* 821FDCE0h case    9:*/		return 0x821FDCE4;
		  /* 821FDCE4h */ case   10:  		/* cmplw CR6, R30, R29 */
		/* 821FDCE4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821FDCE4h case   10:*/		return 0x821FDCE8;
		  /* 821FDCE8h */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 821FDCE8h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821FDCFC;  }
		/* 821FDCE8h case   11:*/		return 0x821FDCEC;
		  /* 821FDCECh */ case   12:  		/* rlwinm R11, R30, 1, 0, 30 */
		/* 821FDCECh case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R30);
		/* 821FDCECh case   12:*/		return 0x821FDCF0;
		  /* 821FDCF0h */ case   13:  		/* mr R5, R30 */
		/* 821FDCF0h case   13:*/		regs.R5 = regs.R30;
		/* 821FDCF0h case   13:*/		return 0x821FDCF4;
		  /* 821FDCF4h */ case   14:  		/* subf R26, R29, R11 */
		/* 821FDCF4h case   14:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R29,regs.R11);
		/* 821FDCF4h case   14:*/		return 0x821FDCF8;
		  /* 821FDCF8h */ case   15:  		/* b 48 */
		/* 821FDCF8h case   15:*/		return 0x821FDD28;
		/* 821FDCF8h case   15:*/		return 0x821FDCFC;
	}
	return 0x821FDCFC;
} // Block from 821FDCBCh-821FDCFCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821FDCFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDCFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDCFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDCFC);
		  /* 821FDCFCh */ case    0:  		/* bc 4, CR6_LT, 36 */
		/* 821FDCFCh case    0:*/		if ( !regs.CR[6].lt ) { return 0x821FDD20;  }
		/* 821FDCFCh case    0:*/		return 0x821FDD00;
		  /* 821FDD00h */ case    1:  		/* subf R27, R30, R29 */
		/* 821FDD00h case    1:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R30,regs.R29);
		/* 821FDD00h case    1:*/		return 0x821FDD04;
		  /* 821FDD04h */ case    2:  		/* li R6, 1 */
		/* 821FDD04h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821FDD04h case    2:*/		return 0x821FDD08;
		  /* 821FDD08h */ case    3:  		/* addi R5, R1, 1368 */
		/* 821FDD08h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x558);
		/* 821FDD08h case    3:*/		return 0x821FDD0C;
		  /* 821FDD0Ch */ case    4:  		/* mr R4, R24 */
		/* 821FDD0Ch case    4:*/		regs.R4 = regs.R24;
		/* 821FDD0Ch case    4:*/		return 0x821FDD10;
		  /* 821FDD10h */ case    5:  		/* mr R3, R31 */
		/* 821FDD10h case    5:*/		regs.R3 = regs.R31;
		/* 821FDD10h case    5:*/		return 0x821FDD14;
		  /* 821FDD14h */ case    6:  		/* bl -21324 */
		/* 821FDD14h case    6:*/		regs.LR = 0x821FDD18; return 0x821F89C8;
		/* 821FDD14h case    6:*/		return 0x821FDD18;
		  /* 821FDD18h */ case    7:  		/* addic. R27, R27, -1 */
		/* 821FDD18h case    7:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821FDD18h case    7:*/		return 0x821FDD1C;
		  /* 821FDD1Ch */ case    8:  		/* bc 4, CR0_EQ, -24 */
		/* 821FDD1Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821FDD04;  }
		/* 821FDD1Ch case    8:*/		return 0x821FDD20;
	}
	return 0x821FDD20;
} // Block from 821FDCFCh-821FDD20h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821FDD20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDD20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDD20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDD20);
		  /* 821FDD20h */ case    0:  		/* mr R26, R30 */
		/* 821FDD20h case    0:*/		regs.R26 = regs.R30;
		/* 821FDD20h case    0:*/		return 0x821FDD24;
		  /* 821FDD24h */ case    1:  		/* mr R5, R29 */
		/* 821FDD24h case    1:*/		regs.R5 = regs.R29;
		/* 821FDD24h case    1:*/		return 0x821FDD28;
	}
	return 0x821FDD28;
} // Block from 821FDD20h-821FDD28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FDD28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDD28);
		  /* 821FDD28h */ case    0:  		/* mr R4, R24 */
		/* 821FDD28h case    0:*/		regs.R4 = regs.R24;
		/* 821FDD28h case    0:*/		return 0x821FDD2C;
		  /* 821FDD2Ch */ case    1:  		/* addi R3, R1, 1688 */
		/* 821FDD2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x698);
		/* 821FDD2Ch case    1:*/		return 0x821FDD30;
		  /* 821FDD30h */ case    2:  		/* bl -31264 */
		/* 821FDD30h case    2:*/		regs.LR = 0x821FDD34; return 0x821F6310;
		/* 821FDD30h case    2:*/		return 0x821FDD34;
		  /* 821FDD34h */ case    3:  		/* mr R6, R30 */
		/* 821FDD34h case    3:*/		regs.R6 = regs.R30;
		/* 821FDD34h case    3:*/		return 0x821FDD38;
		  /* 821FDD38h */ case    4:  		/* addi R5, R1, 1368 */
		/* 821FDD38h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x558);
		/* 821FDD38h case    4:*/		return 0x821FDD3C;
		  /* 821FDD3Ch */ case    5:  		/* mr R4, R24 */
		/* 821FDD3Ch case    5:*/		regs.R4 = regs.R24;
		/* 821FDD3Ch case    5:*/		return 0x821FDD40;
		  /* 821FDD40h */ case    6:  		/* mr R3, R31 */
		/* 821FDD40h case    6:*/		regs.R3 = regs.R31;
		/* 821FDD40h case    6:*/		return 0x821FDD44;
		  /* 821FDD44h */ case    7:  		/* bl -21372 */
		/* 821FDD44h case    7:*/		regs.LR = 0x821FDD48; return 0x821F89C8;
		/* 821FDD44h case    7:*/		return 0x821FDD48;
		  /* 821FDD48h */ case    8:  		/* mr R5, R30 */
		/* 821FDD48h case    8:*/		regs.R5 = regs.R30;
		/* 821FDD48h case    8:*/		return 0x821FDD4C;
		  /* 821FDD4Ch */ case    9:  		/* mr R4, R24 */
		/* 821FDD4Ch case    9:*/		regs.R4 = regs.R24;
		/* 821FDD4Ch case    9:*/		return 0x821FDD50;
		  /* 821FDD50h */ case   10:  		/* addi R3, R1, 2584 */
		/* 821FDD50h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA18);
		/* 821FDD50h case   10:*/		return 0x821FDD54;
		  /* 821FDD54h */ case   11:  		/* bl -31300 */
		/* 821FDD54h case   11:*/		regs.LR = 0x821FDD58; return 0x821F6310;
		/* 821FDD54h case   11:*/		return 0x821FDD58;
		  /* 821FDD58h */ case   12:  		/* mr R27, R29 */
		/* 821FDD58h case   12:*/		regs.R27 = regs.R29;
		/* 821FDD58h case   12:*/		return 0x821FDD5C;
		  /* 821FDD5Ch */ case   13:  		/* cmplwi CR6, R27, 0 */
		/* 821FDD5Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821FDD5Ch case   13:*/		return 0x821FDD60;
		  /* 821FDD60h */ case   14:  		/* bc 12, CR6_EQ, 26472 */
		/* 821FDD60h case   14:*/		if ( regs.CR[6].eq ) { return 0x822044C8;  }
		/* 821FDD60h case   14:*/		return 0x821FDD64;
		  /* 821FDD64h */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 821FDD64h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821FDD64h case   15:*/		return 0x821FDD68;
		  /* 821FDD68h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821FDD68h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FDD68h case   16:*/		return 0x821FDD6C;
		  /* 821FDD6Ch */ case   17:  		/* bc 12, CR6_EQ, 26508 */
		/* 821FDD6Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x822044F8;  }
		/* 821FDD6Ch case   17:*/		return 0x821FDD70;
		  /* 821FDD70h */ case   18:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FDD70h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FDD70h case   18:*/		return 0x821FDD74;
		  /* 821FDD74h */ case   19:  		/* cmpwi CR6, R10, 15 */
		/* 821FDD74h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000F);
		/* 821FDD74h case   19:*/		return 0x821FDD78;
		  /* 821FDD78h */ case   20:  		/* bc 4, CR6_EQ, 26496 */
		/* 821FDD78h case   20:*/		if ( !regs.CR[6].eq ) { return 0x822044F8;  }
		/* 821FDD78h case   20:*/		return 0x821FDD7C;
		  /* 821FDD7Ch */ case   21:  		/* lwz R10, <#[R11 + 16]> */
		/* 821FDD7Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821FDD7Ch case   21:*/		return 0x821FDD80;
		  /* 821FDD80h */ case   22:  		/* cmpwi CR6, R10, 2 */
		/* 821FDD80h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 821FDD80h case   22:*/		return 0x821FDD84;
		  /* 821FDD84h */ case   23:  		/* bc 4, CR6_EQ, 26448 */
		/* 821FDD84h case   23:*/		if ( !regs.CR[6].eq ) { return 0x822044D4;  }
		/* 821FDD84h case   23:*/		return 0x821FDD88;
		  /* 821FDD88h */ case   24:  		/* lwz R4, <#[R11 + 24]> */
		/* 821FDD88h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000018) );
		/* 821FDD88h case   24:*/		return 0x821FDD8C;
		  /* 821FDD8Ch */ case   25:  		/* cmplw CR6, R4, R30 */
		/* 821FDD8Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R30);
		/* 821FDD8Ch case   25:*/		return 0x821FDD90;
		  /* 821FDD90h */ case   26:  		/* bc 4, CR6_LT, 26448 */
		/* 821FDD90h case   26:*/		if ( !regs.CR[6].lt ) { return 0x822044E0;  }
		/* 821FDD90h case   26:*/		return 0x821FDD94;
		  /* 821FDD94h */ case   27:  		/* addi R3, R1, 2584 */
		/* 821FDD94h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA18);
		/* 821FDD94h case   27:*/		return 0x821FDD98;
		  /* 821FDD98h */ case   28:  		/* bl -48992 */
		/* 821FDD98h case   28:*/		regs.LR = 0x821FDD9C; return 0x821F1E38;
		/* 821FDD98h case   28:*/		return 0x821FDD9C;
		  /* 821FDD9Ch */ case   29:  		/* mr R23, R3 */
		/* 821FDD9Ch case   29:*/		regs.R23 = regs.R3;
		/* 821FDD9Ch case   29:*/		return 0x821FDDA0;
		  /* 821FDDA0h */ case   30:  		/* addi R3, R1, 1688 */
		/* 821FDDA0h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x698);
		/* 821FDDA0h case   30:*/		return 0x821FDDA4;
		  /* 821FDDA4h */ case   31:  		/* bl -249668 */
		/* 821FDDA4h case   31:*/		regs.LR = 0x821FDDA8; return 0x821C0E60;
		/* 821FDDA4h case   31:*/		return 0x821FDDA8;
		  /* 821FDDA8h */ case   32:  		/* lwz R11, <#[R23]> */
		/* 821FDDA8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821FDDA8h case   32:*/		return 0x821FDDAC;
		  /* 821FDDACh */ case   33:  		/* stw R11, <#[R3]> */
		/* 821FDDACh case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FDDACh case   33:*/		return 0x821FDDB0;
		  /* 821FDDB0h */ case   34:  		/* lwz R11, <#[R23 + 4]> */
		/* 821FDDB0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821FDDB0h case   34:*/		return 0x821FDDB4;
		  /* 821FDDB4h */ case   35:  		/* stw R11, <#[R3 + 4]> */
		/* 821FDDB4h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FDDB4h case   35:*/		return 0x821FDDB8;
		  /* 821FDDB8h */ case   36:  		/* lwz R11, <#[R28 + 12]> */
		/* 821FDDB8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821FDDB8h case   36:*/		return 0x821FDDBC;
		  /* 821FDDBCh */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 821FDDBCh case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FDDBCh case   37:*/		return 0x821FDDC0;
		  /* 821FDDC0h */ case   38:  		/* bc 12, CR6_EQ, 16 */
		/* 821FDDC0h case   38:*/		if ( regs.CR[6].eq ) { return 0x821FDDD0;  }
		/* 821FDDC0h case   38:*/		return 0x821FDDC4;
		  /* 821FDDC4h */ case   39:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FDDC4h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FDDC4h case   39:*/		return 0x821FDDC8;
		  /* 821FDDC8h */ case   40:  		/* cmpwi CR6, R10, 1 */
		/* 821FDDC8h case   40:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FDDC8h case   40:*/		return 0x821FDDCC;
		  /* 821FDDCCh */ case   41:  		/* bc 4, CR6_EQ, 26400 */
		/* 821FDDCCh case   41:*/		if ( !regs.CR[6].eq ) { return 0x822044EC;  }
		/* 821FDDCCh case   41:*/		return 0x821FDDD0;
	}
	return 0x821FDDD0;
} // Block from 821FDD28h-821FDDD0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821FDDD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDDD0);
		  /* 821FDDD0h */ case    0:  		/* mr R28, R11 */
		/* 821FDDD0h case    0:*/		regs.R28 = regs.R11;
		/* 821FDDD0h case    0:*/		return 0x821FDDD4;
		  /* 821FDDD4h */ case    1:  		/* addi R27, R27, -1 */
		/* 821FDDD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821FDDD4h case    1:*/		return 0x821FDDD8;
		  /* 821FDDD8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821FDDD8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FDDD8h case    2:*/		return 0x821FDDDC;
		  /* 821FDDDCh */ case    3:  		/* bc 4, CR6_EQ, -128 */
		/* 821FDDDCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FDD5C;  }
		/* 821FDDDCh case    3:*/		return 0x821FDDE0;
		  /* 821FDDE0h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 821FDDE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821FDDE0h case    4:*/		return 0x821FDDE4;
		  /* 821FDDE4h */ case    5:  		/* bc 4, CR6_EQ, 26400 */
		/* 821FDDE4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82204504;  }
		/* 821FDDE4h case    5:*/		return 0x821FDDE8;
		  /* 821FDDE8h */ case    6:  		/* cmplwi CR6, R26, 0 */
		/* 821FDDE8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821FDDE8h case    6:*/		return 0x821FDDEC;
		  /* 821FDDECh */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 821FDDECh case    7:*/		if ( regs.CR[6].eq ) { return 0x821FDE00;  }
		/* 821FDDECh case    7:*/		return 0x821FDDF0;
		  /* 821FDDF0h */ case    8:  		/* mr R5, R26 */
		/* 821FDDF0h case    8:*/		regs.R5 = regs.R26;
		/* 821FDDF0h case    8:*/		return 0x821FDDF4;
		  /* 821FDDF4h */ case    9:  		/* mr R4, R24 */
		/* 821FDDF4h case    9:*/		regs.R4 = regs.R24;
		/* 821FDDF4h case    9:*/		return 0x821FDDF8;
		  /* 821FDDF8h */ case   10:  		/* addi R3, R1, 3168 */
		/* 821FDDF8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC60);
		/* 821FDDF8h case   10:*/		return 0x821FDDFC;
		  /* 821FDDFCh */ case   11:  		/* bl -50716 */
		/* 821FDDFCh case   11:*/		regs.LR = 0x821FDE00; return 0x821F17E0;
		/* 821FDDFCh case   11:*/		return 0x821FDE00;
	}
	return 0x821FDE00;
} // Block from 821FDDD0h-821FDE00h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FDE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDE00);
		  /* 821FDE00h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821FDE00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FDE00h case    0:*/		return 0x821FDE04;
		  /* 821FDE04h */ case    1:  		/* bc 4, CR6_EQ, -6884 */
		/* 821FDE04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FDE04h case    1:*/		return 0x821FDE08;
		  /* 821FDE08h */ case    2:  		/* mr R4, R24 */
		/* 821FDE08h case    2:*/		regs.R4 = regs.R24;
		/* 821FDE08h case    2:*/		return 0x821FDE0C;
		  /* 821FDE0Ch */ case    3:  		/* b -540 */
		/* 821FDE0Ch case    3:*/		return 0x821FDBF0;
		/* 821FDE0Ch case    3:*/		return 0x821FDE10;
		  /* 821FDE10h */ case    4:  		/* li R28, 4 */
		/* 821FDE10h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 821FDE10h case    4:*/		return 0x821FDE14;
		  /* 821FDE14h */ case    5:  		/* b 7036 */
		/* 821FDE14h case    5:*/		return 0x821FF990;
		/* 821FDE14h case    5:*/		return 0x821FDE18;
		  /* 821FDE18h */ case    6:  		/* li R5, 4 */
		/* 821FDE18h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FDE18h case    6:*/		return 0x821FDE1C;
		  /* 821FDE1Ch */ case    7:  		/* fmr FR4, FR31 */
		/* 821FDE1Ch case    7:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FDE1Ch case    7:*/		return 0x821FDE20;
		  /* 821FDE20h */ case    8:  		/* mr R4, R31 */
		/* 821FDE20h case    8:*/		regs.R4 = regs.R31;
		/* 821FDE20h case    8:*/		return 0x821FDE24;
		  /* 821FDE24h */ case    9:  		/* fmr FR3, FR31 */
		/* 821FDE24h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FDE24h case    9:*/		return 0x821FDE28;
		  /* 821FDE28h */ case   10:  		/* addi R3, R1, 448 */
		/* 821FDE28h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1C0);
		/* 821FDE28h case   10:*/		return 0x821FDE2C;
		  /* 821FDE2Ch */ case   11:  		/* fmr FR2, FR31 */
		/* 821FDE2Ch case   11:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FDE2Ch case   11:*/		return 0x821FDE30;
		  /* 821FDE30h */ case   12:  		/* fmr FR1, FR31 */
		/* 821FDE30h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821FDE30h case   12:*/		return 0x821FDE34;
		  /* 821FDE34h */ case   13:  		/* bl 167964 */
		/* 821FDE34h case   13:*/		regs.LR = 0x821FDE38; return 0x82226E50;
		/* 821FDE34h case   13:*/		return 0x821FDE38;
		  /* 821FDE38h */ case   14:  		/* lwz R11, <#[R1 + 452]> */
		/* 821FDE38h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001C4) );
		/* 821FDE38h case   14:*/		return 0x821FDE3C;
		  /* 821FDE3Ch */ case   15:  		/* mr R5, R29 */
		/* 821FDE3Ch case   15:*/		regs.R5 = regs.R29;
		/* 821FDE3Ch case   15:*/		return 0x821FDE40;
		  /* 821FDE40h */ case   16:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FDE40h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDE40h case   16:*/		return 0x821FDE44;
		  /* 821FDE44h */ case   17:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 821FDE44h case   17:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 821FDE44h case   17:*/		return 0x821FDE48;
		  /* 821FDE48h */ case   18:  		/* addi R3, R1, 1392 */
		/* 821FDE48h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x570);
		/* 821FDE48h case   18:*/		return 0x821FDE4C;
		  /* 821FDE4Ch */ case   19:  		/* oris R11, R11, 2 */
		/* 821FDE4Ch case   19:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FDE4Ch case   19:*/		return 0x821FDE50;
		  /* 821FDE50h */ case   20:  		/* stw R11, <#[R1 + 452]> */
		/* 821FDE50h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001C4) );
		/* 821FDE50h case   20:*/		return 0x821FDE54;
		  /* 821FDE54h */ case   21:  		/* bl -31556 */
		/* 821FDE54h case   21:*/		regs.LR = 0x821FDE58; return 0x821F6310;
		/* 821FDE54h case   21:*/		return 0x821FDE58;
		  /* 821FDE58h */ case   22:  		/* b 108 */
		/* 821FDE58h case   22:*/		return 0x821FDEC4;
		/* 821FDE58h case   22:*/		return 0x821FDE5C;
		  /* 821FDE5Ch */ case   23:  		/* cmplwi CR6, R29, 4 */
		/* 821FDE5Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FDE5Ch case   23:*/		return 0x821FDE60;
		  /* 821FDE60h */ case   24:  		/* mr R30, R29 */
		/* 821FDE60h case   24:*/		regs.R30 = regs.R29;
		/* 821FDE60h case   24:*/		return 0x821FDE64;
		  /* 821FDE64h */ case   25:  		/* bc 12, CR6_LT, 8 */
		/* 821FDE64h case   25:*/		if ( regs.CR[6].lt ) { return 0x821FDE6C;  }
		/* 821FDE64h case   25:*/		return 0x821FDE68;
		  /* 821FDE68h */ case   26:  		/* li R30, 4 */
		/* 821FDE68h case   26:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FDE68h case   26:*/		return 0x821FDE6C;
	}
	return 0x821FDE6C;
} // Block from 821FDE00h-821FDE6Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821FDE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDE6C);
		  /* 821FDE6Ch */ case    0:  		/* li R6, 228 */
		/* 821FDE6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FDE6Ch case    0:*/		return 0x821FDE70;
		  /* 821FDE70h */ case    1:  		/* mr R5, R30 */
		/* 821FDE70h case    1:*/		regs.R5 = regs.R30;
		/* 821FDE70h case    1:*/		return 0x821FDE74;
		  /* 821FDE74h */ case    2:  		/* addi R4, R1, 1392 */
		/* 821FDE74h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x570);
		/* 821FDE74h case    2:*/		return 0x821FDE78;
		  /* 821FDE78h */ case    3:  		/* mr R3, R31 */
		/* 821FDE78h case    3:*/		regs.R3 = regs.R31;
		/* 821FDE78h case    3:*/		return 0x821FDE7C;
		  /* 821FDE7Ch */ case    4:  		/* subf R29, R30, R29 */
		/* 821FDE7Ch case    4:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 821FDE7Ch case    4:*/		return 0x821FDE80;
		  /* 821FDE80h */ case    5:  		/* bl -46904 */
		/* 821FDE80h case    5:*/		regs.LR = 0x821FDE84; return 0x821F2748;
		/* 821FDE80h case    5:*/		return 0x821FDE84;
		  /* 821FDE84h */ case    6:  		/* mr R28, R3 */
		/* 821FDE84h case    6:*/		regs.R28 = regs.R3;
		/* 821FDE84h case    6:*/		return 0x821FDE88;
		  /* 821FDE88h */ case    7:  		/* addi R4, R1, 448 */
		/* 821FDE88h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x1C0);
		/* 821FDE88h case    7:*/		return 0x821FDE8C;
		  /* 821FDE8Ch */ case    8:  		/* mr R3, R31 */
		/* 821FDE8Ch case    8:*/		regs.R3 = regs.R31;
		/* 821FDE8Ch case    8:*/		return 0x821FDE90;
		  /* 821FDE90h */ case    9:  		/* bl -47888 */
		/* 821FDE90h case    9:*/		regs.LR = 0x821FDE94; return 0x821F2380;
		/* 821FDE90h case    9:*/		return 0x821FDE94;
		  /* 821FDE94h */ case   10:  		/* mr R11, R3 */
		/* 821FDE94h case   10:*/		regs.R11 = regs.R3;
		/* 821FDE94h case   10:*/		return 0x821FDE98;
		  /* 821FDE98h */ case   11:  		/* mr R4, R28 */
		/* 821FDE98h case   11:*/		regs.R4 = regs.R28;
		/* 821FDE98h case   11:*/		return 0x821FDE9C;
		  /* 821FDE9Ch */ case   12:  		/* mr R3, R31 */
		/* 821FDE9Ch case   12:*/		regs.R3 = regs.R31;
		/* 821FDE9Ch case   12:*/		return 0x821FDEA0;
		  /* 821FDEA0h */ case   13:  		/* mr R5, R11 */
		/* 821FDEA0h case   13:*/		regs.R5 = regs.R11;
		/* 821FDEA0h case   13:*/		return 0x821FDEA4;
		  /* 821FDEA4h */ case   14:  		/* lwz R10, <#[R11]> */
		/* 821FDEA4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FDEA4h case   14:*/		return 0x821FDEA8;
		  /* 821FDEA8h */ case   15:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 821FDEA8h case   15:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 821FDEA8h case   15:*/		return 0x821FDEAC;
		  /* 821FDEACh */ case   16:  		/* stw R10, <#[R11]> */
		/* 821FDEACh case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FDEACh case   16:*/		return 0x821FDEB0;
		  /* 821FDEB0h */ case   17:  		/* bl -63912 */
		/* 821FDEB0h case   17:*/		regs.LR = 0x821FDEB4; return 0x821EE508;
		/* 821FDEB0h case   17:*/		return 0x821FDEB4;
		  /* 821FDEB4h */ case   18:  		/* mr R5, R3 */
		/* 821FDEB4h case   18:*/		regs.R5 = regs.R3;
		/* 821FDEB4h case   18:*/		return 0x821FDEB8;
		  /* 821FDEB8h */ case   19:  		/* mr R4, R30 */
		/* 821FDEB8h case   19:*/		regs.R4 = regs.R30;
		/* 821FDEB8h case   19:*/		return 0x821FDEBC;
		  /* 821FDEBCh */ case   20:  		/* addi R3, R1, 1392 */
		/* 821FDEBCh case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x570);
		/* 821FDEBCh case   20:*/		return 0x821FDEC0;
		  /* 821FDEC0h */ case   21:  		/* bl -49064 */
		/* 821FDEC0h case   21:*/		regs.LR = 0x821FDEC4; return 0x821F1F18;
		/* 821FDEC0h case   21:*/		return 0x821FDEC4;
	}
	return 0x821FDEC4;
} // Block from 821FDE6Ch-821FDEC4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821FDEC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDEC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDEC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDEC4);
		  /* 821FDEC4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FDEC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FDEC4h case    0:*/		return 0x821FDEC8;
		  /* 821FDEC8h */ case    1:  		/* bc 4, CR6_EQ, -108 */
		/* 821FDEC8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FDE5C;  }
		/* 821FDEC8h case    1:*/		return 0x821FDECC;
		  /* 821FDECCh */ case    2:  		/* b -7084 */
		/* 821FDECCh case    2:*/		return 0x821FC320;
		/* 821FDECCh case    2:*/		return 0x821FDED0;
		  /* 821FDED0h */ case    3:  		/* li R5, 4 */
		/* 821FDED0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FDED0h case    3:*/		return 0x821FDED4;
		  /* 821FDED4h */ case    4:  		/* fmr FR4, FR30 */
		/* 821FDED4h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR30);
		/* 821FDED4h case    4:*/		return 0x821FDED8;
		  /* 821FDED8h */ case    5:  		/* mr R4, R31 */
		/* 821FDED8h case    5:*/		regs.R4 = regs.R31;
		/* 821FDED8h case    5:*/		return 0x821FDEDC;
		  /* 821FDEDCh */ case    6:  		/* fmr FR3, FR30 */
		/* 821FDEDCh case    6:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR30);
		/* 821FDEDCh case    6:*/		return 0x821FDEE0;
		  /* 821FDEE0h */ case    7:  		/* addi R3, R1, 544 */
		/* 821FDEE0h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x220);
		/* 821FDEE0h case    7:*/		return 0x821FDEE4;
		  /* 821FDEE4h */ case    8:  		/* fmr FR2, FR30 */
		/* 821FDEE4h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 821FDEE4h case    8:*/		return 0x821FDEE8;
		  /* 821FDEE8h */ case    9:  		/* fmr FR1, FR30 */
		/* 821FDEE8h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821FDEE8h case    9:*/		return 0x821FDEEC;
		  /* 821FDEECh */ case   10:  		/* bl 167780 */
		/* 821FDEECh case   10:*/		regs.LR = 0x821FDEF0; return 0x82226E50;
		/* 821FDEECh case   10:*/		return 0x821FDEF0;
		  /* 821FDEF0h */ case   11:  		/* lwz R11, <#[R1 + 548]> */
		/* 821FDEF0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000224) );
		/* 821FDEF0h case   11:*/		return 0x821FDEF4;
		  /* 821FDEF4h */ case   12:  		/* lwz R24, <#[R1 + 3500]> */
		/* 821FDEF4h case   12:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDEF4h case   12:*/		return 0x821FDEF8;
		  /* 821FDEF8h */ case   13:  		/* mr R5, R29 */
		/* 821FDEF8h case   13:*/		regs.R5 = regs.R29;
		/* 821FDEF8h case   13:*/		return 0x821FDEFC;
		  /* 821FDEFCh */ case   14:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 821FDEFCh case   14:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 821FDEFCh case   14:*/		return 0x821FDF00;
		  /* 821FDF00h */ case   15:  		/* mr R4, R24 */
		/* 821FDF00h case   15:*/		regs.R4 = regs.R24;
		/* 821FDF00h case   15:*/		return 0x821FDF04;
		  /* 821FDF04h */ case   16:  		/* oris R11, R11, 2 */
		/* 821FDF04h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FDF04h case   16:*/		return 0x821FDF08;
		  /* 821FDF08h */ case   17:  		/* addi R3, R1, 1416 */
		/* 821FDF08h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x588);
		/* 821FDF08h case   17:*/		return 0x821FDF0C;
		  /* 821FDF0Ch */ case   18:  		/* stw R11, <#[R1 + 548]> */
		/* 821FDF0Ch case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000224) );
		/* 821FDF0Ch case   18:*/		return 0x821FDF10;
		  /* 821FDF10h */ case   19:  		/* bl -31744 */
		/* 821FDF10h case   19:*/		regs.LR = 0x821FDF14; return 0x821F6310;
		/* 821FDF10h case   19:*/		return 0x821FDF14;
		  /* 821FDF14h */ case   20:  		/* mr R26, R29 */
		/* 821FDF14h case   20:*/		regs.R26 = regs.R29;
		/* 821FDF14h case   20:*/		return 0x821FDF18;
		  /* 821FDF18h */ case   21:  		/* cmplwi CR6, R29, 0 */
		/* 821FDF18h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FDF18h case   21:*/		return 0x821FDF1C;
		  /* 821FDF1Ch */ case   22:  		/* bc 12, CR6_EQ, -284 */
		/* 821FDF1Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x821FDE00;  }
		/* 821FDF1Ch case   22:*/		return 0x821FDF20;
		  /* 821FDF20h */ case   23:  		/* cmplwi CR6, R26, 4 */
		/* 821FDF20h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 821FDF20h case   23:*/		return 0x821FDF24;
		  /* 821FDF24h */ case   24:  		/* mr R30, R26 */
		/* 821FDF24h case   24:*/		regs.R30 = regs.R26;
		/* 821FDF24h case   24:*/		return 0x821FDF28;
		  /* 821FDF28h */ case   25:  		/* bc 12, CR6_LT, 8 */
		/* 821FDF28h case   25:*/		if ( regs.CR[6].lt ) { return 0x821FDF30;  }
		/* 821FDF28h case   25:*/		return 0x821FDF2C;
		  /* 821FDF2Ch */ case   26:  		/* li R30, 4 */
		/* 821FDF2Ch case   26:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FDF2Ch case   26:*/		return 0x821FDF30;
	}
	return 0x821FDF30;
} // Block from 821FDEC4h-821FDF30h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821FDF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDF30);
		  /* 821FDF30h */ case    0:  		/* li R6, 228 */
		/* 821FDF30h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FDF30h case    0:*/		return 0x821FDF34;
		  /* 821FDF34h */ case    1:  		/* mr R5, R30 */
		/* 821FDF34h case    1:*/		regs.R5 = regs.R30;
		/* 821FDF34h case    1:*/		return 0x821FDF38;
		  /* 821FDF38h */ case    2:  		/* addi R4, R1, 1416 */
		/* 821FDF38h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x588);
		/* 821FDF38h case    2:*/		return 0x821FDF3C;
		  /* 821FDF3Ch */ case    3:  		/* mr R3, R31 */
		/* 821FDF3Ch case    3:*/		regs.R3 = regs.R31;
		/* 821FDF3Ch case    3:*/		return 0x821FDF40;
		  /* 821FDF40h */ case    4:  		/* subf R26, R30, R26 */
		/* 821FDF40h case    4:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R30,regs.R26);
		/* 821FDF40h case    4:*/		return 0x821FDF44;
		  /* 821FDF44h */ case    5:  		/* bl -47100 */
		/* 821FDF44h case    5:*/		regs.LR = 0x821FDF48; return 0x821F2748;
		/* 821FDF44h case    5:*/		return 0x821FDF48;
		  /* 821FDF48h */ case    6:  		/* mr R28, R3 */
		/* 821FDF48h case    6:*/		regs.R28 = regs.R3;
		/* 821FDF48h case    6:*/		return 0x821FDF4C;
		  /* 821FDF4Ch */ case    7:  		/* addi R4, R1, 544 */
		/* 821FDF4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x220);
		/* 821FDF4Ch case    7:*/		return 0x821FDF50;
		  /* 821FDF50h */ case    8:  		/* mr R3, R31 */
		/* 821FDF50h case    8:*/		regs.R3 = regs.R31;
		/* 821FDF50h case    8:*/		return 0x821FDF54;
		  /* 821FDF54h */ case    9:  		/* bl -48084 */
		/* 821FDF54h case    9:*/		regs.LR = 0x821FDF58; return 0x821F2380;
		/* 821FDF54h case    9:*/		return 0x821FDF58;
		  /* 821FDF58h */ case   10:  		/* lwz R11, <#[R3]> */
		/* 821FDF58h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FDF58h case   10:*/		return 0x821FDF5C;
		  /* 821FDF5Ch */ case   11:  		/* mr R5, R3 */
		/* 821FDF5Ch case   11:*/		regs.R5 = regs.R3;
		/* 821FDF5Ch case   11:*/		return 0x821FDF60;
		  /* 821FDF60h */ case   12:  		/* rlwimi R11, R30, 25, 4, 6 */
		/* 821FDF60h case   12:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R30);
		/* 821FDF60h case   12:*/		return 0x821FDF64;
		  /* 821FDF64h */ case   13:  		/* stw R11, <#[R3]> */
		/* 821FDF64h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FDF64h case   13:*/		return 0x821FDF68;
		  /* 821FDF68h */ case   14:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FDF68h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FDF68h case   14:*/		return 0x821FDF6C;
		  /* 821FDF6Ch */ case   15:  		/* cmpwi CR6, R11, 3 */
		/* 821FDF6Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821FDF6Ch case   15:*/		return 0x821FDF70;
		  /* 821FDF70h */ case   16:  		/* bc 4, CR6_EQ, 36 */
		/* 821FDF70h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821FDF94;  }
		/* 821FDF70h case   16:*/		return 0x821FDF74;
		  /* 821FDF74h */ case   17:  		/* mr R4, R3 */
		/* 821FDF74h case   17:*/		regs.R4 = regs.R3;
		/* 821FDF74h case   17:*/		return 0x821FDF78;
		  /* 821FDF78h */ case   18:  		/* lwz R5, <#[R5 + 12]> */
		/* 821FDF78h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x0000000C) );
		/* 821FDF78h case   18:*/		return 0x821FDF7C;
		  /* 821FDF7Ch */ case   19:  		/* mr R3, R31 */
		/* 821FDF7Ch case   19:*/		regs.R3 = regs.R31;
		/* 821FDF7Ch case   19:*/		return 0x821FDF80;
		  /* 821FDF80h */ case   20:  		/* bl -577168 */
		/* 821FDF80h case   20:*/		regs.LR = 0x821FDF84; return 0x821710F0;
		/* 821FDF80h case   20:*/		return 0x821FDF84;
		  /* 821FDF84h */ case   21:  		/* li R4, 4 */
		/* 821FDF84h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FDF84h case   21:*/		return 0x821FDF88;
		  /* 821FDF88h */ case   22:  		/* mr R27, R3 */
		/* 821FDF88h case   22:*/		regs.R27 = regs.R3;
		/* 821FDF88h case   22:*/		return 0x821FDF8C;
		  /* 821FDF8Ch */ case   23:  		/* bl -550092 */
		/* 821FDF8Ch case   23:*/		regs.LR = 0x821FDF90; return 0x82177AC0;
		/* 821FDF8Ch case   23:*/		return 0x821FDF90;
		  /* 821FDF90h */ case   24:  		/* mr R5, R27 */
		/* 821FDF90h case   24:*/		regs.R5 = regs.R27;
		/* 821FDF90h case   24:*/		return 0x821FDF94;
	}
	return 0x821FDF94;
} // Block from 821FDF30h-821FDF94h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821FDF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDF94);
		  /* 821FDF94h */ case    0:  		/* mr R4, R28 */
		/* 821FDF94h case    0:*/		regs.R4 = regs.R28;
		/* 821FDF94h case    0:*/		return 0x821FDF98;
		  /* 821FDF98h */ case    1:  		/* mr R3, R31 */
		/* 821FDF98h case    1:*/		regs.R3 = regs.R31;
		/* 821FDF98h case    1:*/		return 0x821FDF9C;
		  /* 821FDF9Ch */ case    2:  		/* bl -65108 */
		/* 821FDF9Ch case    2:*/		regs.LR = 0x821FDFA0; return 0x821EE148;
		/* 821FDF9Ch case    2:*/		return 0x821FDFA0;
		  /* 821FDFA0h */ case    3:  		/* mr R27, R3 */
		/* 821FDFA0h case    3:*/		regs.R27 = regs.R3;
		/* 821FDFA0h case    3:*/		return 0x821FDFA4;
		  /* 821FDFA4h */ case    4:  		/* li R28, 0 */
		/* 821FDFA4h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821FDFA4h case    4:*/		return 0x821FDFA8;
		  /* 821FDFA8h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821FDFA8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FDFA8h case    5:*/		return 0x821FDFAC;
		  /* 821FDFACh */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 821FDFACh case    6:*/		if ( regs.CR[6].eq ) { return 0x821FDFEC;  }
		/* 821FDFACh case    6:*/		return 0x821FDFB0;
		  /* 821FDFB0h */ case    7:  		/* lwz R11, <#[R1 + 476]> */
		/* 821FDFB0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001DC) );
		/* 821FDFB0h case    7:*/		return 0x821FDFB4;
		  /* 821FDFB4h */ case    8:  		/* addi R3, R1, 1416 */
		/* 821FDFB4h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x588);
		/* 821FDFB4h case    8:*/		return 0x821FDFB8;
		  /* 821FDFB8h */ case    9:  		/* stw R27, <#[R1 + 472]> */
		/* 821FDFB8h case    9:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000001D8) );
		/* 821FDFB8h case    9:*/		return 0x821FDFBC;
		  /* 821FDFBCh */ case   10:  		/* rlwimi R11, R28, 2, 16, 29 */
		/* 821FDFBCh case   10:*/		cpu::op::rlwimi<0,2,16,29>(regs,&regs.R11,regs.R28);
		/* 821FDFBCh case   10:*/		return 0x821FDFC0;
		  /* 821FDFC0h */ case   11:  		/* rlwinm R11, R11, 0, 15, 29 */
		/* 821FDFC0h case   11:*/		cpu::op::rlwinm<0,0,15,29>(regs,&regs.R11,regs.R11);
		/* 821FDFC0h case   11:*/		return 0x821FDFC4;
		  /* 821FDFC4h */ case   12:  		/* ori R11, R11, 1 */
		/* 821FDFC4h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FDFC4h case   12:*/		return 0x821FDFC8;
		  /* 821FDFC8h */ case   13:  		/* stw R11, <#[R1 + 476]> */
		/* 821FDFC8h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001DC) );
		/* 821FDFC8h case   13:*/		return 0x821FDFCC;
		  /* 821FDFCCh */ case   14:  		/* bl -250220 */
		/* 821FDFCCh case   14:*/		regs.LR = 0x821FDFD0; return 0x821C0E60;
		/* 821FDFCCh case   14:*/		return 0x821FDFD0;
		  /* 821FDFD0h */ case   15:  		/* mr R4, R3 */
		/* 821FDFD0h case   15:*/		regs.R4 = regs.R3;
		/* 821FDFD0h case   15:*/		return 0x821FDFD4;
		  /* 821FDFD4h */ case   16:  		/* ld R5, <#[R1 + 472]> */
		/* 821FDFD4h case   16:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000001D8) );
		/* 821FDFD4h case   16:*/		return 0x821FDFD8;
		  /* 821FDFD8h */ case   17:  		/* mr R3, R31 */
		/* 821FDFD8h case   17:*/		regs.R3 = regs.R31;
		/* 821FDFD8h case   17:*/		return 0x821FDFDC;
		  /* 821FDFDCh */ case   18:  		/* bl -30220 */
		/* 821FDFDCh case   18:*/		regs.LR = 0x821FDFE0; return 0x821F69D0;
		/* 821FDFDCh case   18:*/		return 0x821FDFE0;
		  /* 821FDFE0h */ case   19:  		/* addi R28, R28, 1 */
		/* 821FDFE0h case   19:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821FDFE0h case   19:*/		return 0x821FDFE4;
		  /* 821FDFE4h */ case   20:  		/* cmplw CR6, R28, R30 */
		/* 821FDFE4h case   20:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R30);
		/* 821FDFE4h case   20:*/		return 0x821FDFE8;
		  /* 821FDFE8h */ case   21:  		/* bc 12, CR6_LT, -56 */
		/* 821FDFE8h case   21:*/		if ( regs.CR[6].lt ) { return 0x821FDFB0;  }
		/* 821FDFE8h case   21:*/		return 0x821FDFEC;
	}
	return 0x821FDFEC;
} // Block from 821FDF94h-821FDFECh (22 instructions)

//////////////////////////////////////////////////////
// Block at 821FDFECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FDFEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FDFEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FDFEC);
		  /* 821FDFECh */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821FDFECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821FDFECh case    0:*/		return 0x821FDFF0;
		  /* 821FDFF0h */ case    1:  		/* bc 4, CR6_EQ, -208 */
		/* 821FDFF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FDF20;  }
		/* 821FDFF0h case    1:*/		return 0x821FDFF4;
		  /* 821FDFF4h */ case    2:  		/* b -500 */
		/* 821FDFF4h case    2:*/		return 0x821FDE00;
		/* 821FDFF4h case    2:*/		return 0x821FDFF8;
		  /* 821FDFF8h */ case    3:  		/* lwz R28, <#[R1 + 3500]> */
		/* 821FDFF8h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FDFF8h case    3:*/		return 0x821FDFFC;
		  /* 821FDFFCh */ case    4:  		/* mr R5, R29 */
		/* 821FDFFCh case    4:*/		regs.R5 = regs.R29;
		/* 821FDFFCh case    4:*/		return 0x821FE000;
		  /* 821FE000h */ case    5:  		/* mr R3, R31 */
		/* 821FE000h case    5:*/		regs.R3 = regs.R31;
		/* 821FE000h case    5:*/		return 0x821FE004;
		  /* 821FE004h */ case    6:  		/* mr R4, R28 */
		/* 821FE004h case    6:*/		regs.R4 = regs.R28;
		/* 821FE004h case    6:*/		return 0x821FE008;
		  /* 821FE008h */ case    7:  		/* bl -30568 */
		/* 821FE008h case    7:*/		regs.LR = 0x821FE00C; return 0x821F68A0;
		/* 821FE008h case    7:*/		return 0x821FE00C;
		  /* 821FE00Ch */ case    8:  		/* mr R4, R28 */
		/* 821FE00Ch case    8:*/		regs.R4 = regs.R28;
		/* 821FE00Ch case    8:*/		return 0x821FE010;
		  /* 821FE010h */ case    9:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 821FE010h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 821FE010h case    9:*/		return 0x821FE014;
		  /* 821FE014h */ case   10:  		/* addi R3, R1, 1848 */
		/* 821FE014h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x738);
		/* 821FE014h case   10:*/		return 0x821FE018;
		  /* 821FE018h */ case   11:  		/* bl -32008 */
		/* 821FE018h case   11:*/		regs.LR = 0x821FE01C; return 0x821F6310;
		/* 821FE018h case   11:*/		return 0x821FE01C;
		  /* 821FE01Ch */ case   12:  		/* mr R5, R29 */
		/* 821FE01Ch case   12:*/		regs.R5 = regs.R29;
		/* 821FE01Ch case   12:*/		return 0x821FE020;
		  /* 821FE020h */ case   13:  		/* mr R4, R28 */
		/* 821FE020h case   13:*/		regs.R4 = regs.R28;
		/* 821FE020h case   13:*/		return 0x821FE024;
		  /* 821FE024h */ case   14:  		/* addi R3, R1, 2264 */
		/* 821FE024h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8D8);
		/* 821FE024h case   14:*/		return 0x821FE028;
		  /* 821FE028h */ case   15:  		/* bl -32024 */
		/* 821FE028h case   15:*/		regs.LR = 0x821FE02C; return 0x821F6310;
		/* 821FE028h case   15:*/		return 0x821FE02C;
		  /* 821FE02Ch */ case   16:  		/* mr R30, R29 */
		/* 821FE02Ch case   16:*/		regs.R30 = regs.R29;
		/* 821FE02Ch case   16:*/		return 0x821FE030;
		  /* 821FE030h */ case   17:  		/* cmplwi CR6, R29, 0 */
		/* 821FE030h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE030h case   17:*/		return 0x821FE034;
		  /* 821FE034h */ case   18:  		/* bc 12, CR6_EQ, 64 */
		/* 821FE034h case   18:*/		if ( regs.CR[6].eq ) { return 0x821FE074;  }
		/* 821FE034h case   18:*/		return 0x821FE038;
		  /* 821FE038h */ case   19:  		/* addi R3, R1, 2264 */
		/* 821FE038h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8D8);
		/* 821FE038h case   19:*/		return 0x821FE03C;
		  /* 821FE03Ch */ case   20:  		/* bl -250332 */
		/* 821FE03Ch case   20:*/		regs.LR = 0x821FE040; return 0x821C0E60;
		/* 821FE03Ch case   20:*/		return 0x821FE040;
		  /* 821FE040h */ case   21:  		/* mr R27, R3 */
		/* 821FE040h case   21:*/		regs.R27 = regs.R3;
		/* 821FE040h case   21:*/		return 0x821FE044;
		  /* 821FE044h */ case   22:  		/* addi R3, R1, 1848 */
		/* 821FE044h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x738);
		/* 821FE044h case   22:*/		return 0x821FE048;
		  /* 821FE048h */ case   23:  		/* bl -250344 */
		/* 821FE048h case   23:*/		regs.LR = 0x821FE04C; return 0x821C0E60;
		/* 821FE048h case   23:*/		return 0x821FE04C;
		  /* 821FE04Ch */ case   24:  		/* mr R4, R3 */
		/* 821FE04Ch case   24:*/		regs.R4 = regs.R3;
		/* 821FE04Ch case   24:*/		return 0x821FE050;
		  /* 821FE050h */ case   25:  		/* mr R3, R31 */
		/* 821FE050h case   25:*/		regs.R3 = regs.R31;
		/* 821FE050h case   25:*/		return 0x821FE054;
		  /* 821FE054h */ case   26:  		/* ld R5, <#[R27]> */
		/* 821FE054h case   26:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 821FE054h case   26:*/		return 0x821FE058;
		  /* 821FE058h */ case   27:  		/* bl -30344 */
		/* 821FE058h case   27:*/		regs.LR = 0x821FE05C; return 0x821F69D0;
		/* 821FE058h case   27:*/		return 0x821FE05C;
		  /* 821FE05Ch */ case   28:  		/* addic. R30, R30, -1 */
		/* 821FE05Ch case   28:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821FE05Ch case   28:*/		return 0x821FE060;
		  /* 821FE060h */ case   29:  		/* bc 4, CR0_EQ, -40 */
		/* 821FE060h case   29:*/		if ( !regs.CR[0].eq ) { return 0x821FE038;  }
		/* 821FE060h case   29:*/		return 0x821FE064;
		  /* 821FE064h */ case   30:  		/* mr R5, R29 */
		/* 821FE064h case   30:*/		regs.R5 = regs.R29;
		/* 821FE064h case   30:*/		return 0x821FE068;
		  /* 821FE068h */ case   31:  		/* mr R4, R28 */
		/* 821FE068h case   31:*/		regs.R4 = regs.R28;
		/* 821FE068h case   31:*/		return 0x821FE06C;
		  /* 821FE06Ch */ case   32:  		/* addi R3, R1, 2728 */
		/* 821FE06Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAA8);
		/* 821FE06Ch case   32:*/		return 0x821FE070;
		  /* 821FE070h */ case   33:  		/* bl -51344 */
		/* 821FE070h case   33:*/		regs.LR = 0x821FE074; return 0x821F17E0;
		/* 821FE070h case   33:*/		return 0x821FE074;
	}
	return 0x821FE074;
} // Block from 821FDFECh-821FE074h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821FE074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE074);
		  /* 821FE074h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821FE074h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FE074h case    0:*/		return 0x821FE078;
		  /* 821FE078h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821FE078h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FE08C;  }
		/* 821FE078h case    1:*/		return 0x821FE07C;
		  /* 821FE07Ch */ case    2:  		/* mr R5, R29 */
		/* 821FE07Ch case    2:*/		regs.R5 = regs.R29;
		/* 821FE07Ch case    2:*/		return 0x821FE080;
		  /* 821FE080h */ case    3:  		/* mr R4, R28 */
		/* 821FE080h case    3:*/		regs.R4 = regs.R28;
		/* 821FE080h case    3:*/		return 0x821FE084;
		  /* 821FE084h */ case    4:  		/* mr R3, R31 */
		/* 821FE084h case    4:*/		regs.R3 = regs.R31;
		/* 821FE084h case    4:*/		return 0x821FE088;
		  /* 821FE088h */ case    5:  		/* bl -30696 */
		/* 821FE088h case    5:*/		regs.LR = 0x821FE08C; return 0x821F68A0;
		/* 821FE088h case    5:*/		return 0x821FE08C;
	}
	return 0x821FE08C;
} // Block from 821FE074h-821FE08Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FE08Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE08C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE08C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE08C);
		  /* 821FE08Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FE08Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE08Ch case    0:*/		return 0x821FE090;
		  /* 821FE090h */ case    1:  		/* bc 12, CR6_EQ, -7536 */
		/* 821FE090h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FE090h case    1:*/		return 0x821FE094;
		  /* 821FE094h */ case    2:  		/* lwz R11, <#[R28 + 4]> */
		/* 821FE094h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821FE094h case    2:*/		return 0x821FE098;
		  /* 821FE098h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821FE098h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821FE098h case    3:*/		return 0x821FE09C;
		  /* 821FE09Ch */ case    4:  		/* bc 4, CR0_EQ, -7548 */
		/* 821FE09Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FE09Ch case    4:*/		return 0x821FE0A0;
		  /* 821FE0A0h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821FE0A0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821FE0A0h case    5:*/		return 0x821FE0A4;
		  /* 821FE0A4h */ case    6:  		/* bc 12, CR0_EQ, -7556 */
		/* 821FE0A4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FE0A4h case    6:*/		return 0x821FE0A8;
		  /* 821FE0A8h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821FE0A8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821FE0A8h case    7:*/		return 0x821FE0AC;
		  /* 821FE0ACh */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821FE0ACh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821FE0ACh case    8:*/		return 0x821FE0B0;
		  /* 821FE0B0h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821FE0B0h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821FE0B0h case    9:*/		return 0x821FE0B4;
		  /* 821FE0B4h */ case   10:  		/* bc 4, CR0_EQ, -7572 */
		/* 821FE0B4h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FE0B4h case   10:*/		return 0x821FE0B8;
		  /* 821FE0B8h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821FE0B8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FE0B8h case   11:*/		return 0x821FE0BC;
		  /* 821FE0BCh */ case   12:  		/* bc 4, CR6_EQ, -20 */
		/* 821FE0BCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x821FE0A8;  }
		/* 821FE0BCh case   12:*/		return 0x821FE0C0;
		  /* 821FE0C0h */ case   13:  		/* b -7584 */
		/* 821FE0C0h case   13:*/		return 0x821FC320;
		/* 821FE0C0h case   13:*/		return 0x821FE0C4;
		  /* 821FE0C4h */ case   14:  		/* mr R3, R31 */
		/* 821FE0C4h case   14:*/		regs.R3 = regs.R31;
		/* 821FE0C4h case   14:*/		return 0x821FE0C8;
		  /* 821FE0C8h */ case   15:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FE0C8h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FE0C8h case   15:*/		return 0x821FE0CC;
		  /* 821FE0CCh */ case   16:  		/* bl -21220 */
		/* 821FE0CCh case   16:*/		regs.LR = 0x821FE0D0; return 0x821F8DE8;
		/* 821FE0CCh case   16:*/		return 0x821FE0D0;
		  /* 821FE0D0h */ case   17:  		/* rlwinm. R24, R3, 0, 24, 31 */
		/* 821FE0D0h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R24,regs.R3);
		/* 821FE0D0h case   17:*/		return 0x821FE0D4;
		  /* 821FE0D4h */ case   18:  		/* li R23, 0 */
		/* 821FE0D4h case   18:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821FE0D4h case   18:*/		return 0x821FE0D8;
		  /* 821FE0D8h */ case   19:  		/* bc 12, CR0_EQ, 28 */
		/* 821FE0D8h case   19:*/		if ( regs.CR[0].eq ) { return 0x821FE0F4;  }
		/* 821FE0D8h case   19:*/		return 0x821FE0DC;
		  /* 821FE0DCh */ case   20:  		/* li R6, 0 */
		/* 821FE0DCh case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE0DCh case   20:*/		return 0x821FE0E0;
		  /* 821FE0E0h */ case   21:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FE0E0h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FE0E0h case   21:*/		return 0x821FE0E4;
		  /* 821FE0E4h */ case   22:  		/* li R5, 0 */
		/* 821FE0E4h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FE0E4h case   22:*/		return 0x821FE0E8;
		  /* 821FE0E8h */ case   23:  		/* mr R3, R31 */
		/* 821FE0E8h case   23:*/		regs.R3 = regs.R31;
		/* 821FE0E8h case   23:*/		return 0x821FE0EC;
		  /* 821FE0ECh */ case   24:  		/* bl -461180 */
		/* 821FE0ECh case   24:*/		regs.LR = 0x821FE0F0; return 0x8218D770;
		/* 821FE0ECh case   24:*/		return 0x821FE0F0;
		  /* 821FE0F0h */ case   25:  		/* mr R23, R3 */
		/* 821FE0F0h case   25:*/		regs.R23 = regs.R3;
		/* 821FE0F0h case   25:*/		return 0x821FE0F4;
	}
	return 0x821FE0F4;
} // Block from 821FE08Ch-821FE0F4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821FE0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE0F4);
		  /* 821FE0F4h */ case    0:  		/* lwz R22, <#[R1 + 3500]> */
		/* 821FE0F4h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FE0F4h case    0:*/		return 0x821FE0F8;
		  /* 821FE0F8h */ case    1:  		/* rlwinm R5, R29, 1, 0, 30 */
		/* 821FE0F8h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R29);
		/* 821FE0F8h case    1:*/		return 0x821FE0FC;
		  /* 821FE0FCh */ case    2:  		/* addi R3, R1, 2488 */
		/* 821FE0FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9B8);
		/* 821FE0FCh case    2:*/		return 0x821FE100;
		  /* 821FE100h */ case    3:  		/* mr R4, R22 */
		/* 821FE100h case    3:*/		regs.R4 = regs.R22;
		/* 821FE100h case    3:*/		return 0x821FE104;
		  /* 821FE104h */ case    4:  		/* bl -32244 */
		/* 821FE104h case    4:*/		regs.LR = 0x821FE108; return 0x821F6310;
		/* 821FE104h case    4:*/		return 0x821FE108;
		  /* 821FE108h */ case    5:  		/* mr R5, R29 */
		/* 821FE108h case    5:*/		regs.R5 = regs.R29;
		/* 821FE108h case    5:*/		return 0x821FE10C;
		  /* 821FE10Ch */ case    6:  		/* mr R4, R22 */
		/* 821FE10Ch case    6:*/		regs.R4 = regs.R22;
		/* 821FE10Ch case    6:*/		return 0x821FE110;
		  /* 821FE110h */ case    7:  		/* addi R3, R1, 1880 */
		/* 821FE110h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x758);
		/* 821FE110h case    7:*/		return 0x821FE114;
		  /* 821FE114h */ case    8:  		/* bl -32260 */
		/* 821FE114h case    8:*/		regs.LR = 0x821FE118; return 0x821F6310;
		/* 821FE114h case    8:*/		return 0x821FE118;
		  /* 821FE118h */ case    9:  		/* mr R25, R29 */
		/* 821FE118h case    9:*/		regs.R25 = regs.R29;
		/* 821FE118h case    9:*/		return 0x821FE11C;
		  /* 821FE11Ch */ case   10:  		/* cmplwi CR6, R25, 0 */
		/* 821FE11Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FE11Ch case   10:*/		return 0x821FE120;
		  /* 821FE120h */ case   11:  		/* bc 12, CR6_EQ, 452 */
		/* 821FE120h case   11:*/		if ( regs.CR[6].eq ) { return 0x821FE2E4;  }
		/* 821FE120h case   11:*/		return 0x821FE124;
		  /* 821FE124h */ case   12:  		/* addi R3, R1, 2488 */
		/* 821FE124h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9B8);
		/* 821FE124h case   12:*/		return 0x821FE128;
		  /* 821FE128h */ case   13:  		/* bl -250568 */
		/* 821FE128h case   13:*/		regs.LR = 0x821FE12C; return 0x821C0E60;
		/* 821FE128h case   13:*/		return 0x821FE12C;
		  /* 821FE12Ch */ case   14:  		/* mr R30, R3 */
		/* 821FE12Ch case   14:*/		regs.R30 = regs.R3;
		/* 821FE12Ch case   14:*/		return 0x821FE130;
		  /* 821FE130h */ case   15:  		/* addi R3, R1, 1880 */
		/* 821FE130h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x758);
		/* 821FE130h case   15:*/		return 0x821FE134;
		  /* 821FE134h */ case   16:  		/* bl -250580 */
		/* 821FE134h case   16:*/		regs.LR = 0x821FE138; return 0x821C0E60;
		/* 821FE134h case   16:*/		return 0x821FE138;
		  /* 821FE138h */ case   17:  		/* mr R28, R3 */
		/* 821FE138h case   17:*/		regs.R28 = regs.R3;
		/* 821FE138h case   17:*/		return 0x821FE13C;
		  /* 821FE13Ch */ case   18:  		/* mr R5, R3 */
		/* 821FE13Ch case   18:*/		regs.R5 = regs.R3;
		/* 821FE13Ch case   18:*/		return 0x821FE140;
		  /* 821FE140h */ case   19:  		/* mr R4, R30 */
		/* 821FE140h case   19:*/		regs.R4 = regs.R30;
		/* 821FE140h case   19:*/		return 0x821FE144;
		  /* 821FE144h */ case   20:  		/* mr R3, R31 */
		/* 821FE144h case   20:*/		regs.R3 = regs.R31;
		/* 821FE144h case   20:*/		return 0x821FE148;
		  /* 821FE148h */ case   21:  		/* bl -41032 */
		/* 821FE148h case   21:*/		regs.LR = 0x821FE14C; return 0x821F4100;
		/* 821FE148h case   21:*/		return 0x821FE14C;
		  /* 821FE14Ch */ case   22:  		/* mr R27, R3 */
		/* 821FE14Ch case   22:*/		regs.R27 = regs.R3;
		/* 821FE14Ch case   22:*/		return 0x821FE150;
		  /* 821FE150h */ case   23:  		/* li R7, 228 */
		/* 821FE150h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FE150h case   23:*/		return 0x821FE154;
		  /* 821FE154h */ case   24:  		/* li R6, 4 */
		/* 821FE154h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FE154h case   24:*/		return 0x821FE158;
		  /* 821FE158h */ case   25:  		/* mr R3, R31 */
		/* 821FE158h case   25:*/		regs.R3 = regs.R31;
		/* 821FE158h case   25:*/		return 0x821FE15C;
		  /* 821FE15Ch */ case   26:  		/* mr R4, R27 */
		/* 821FE15Ch case   26:*/		regs.R4 = regs.R27;
		/* 821FE15Ch case   26:*/		return 0x821FE160;
		  /* 821FE160h */ case   27:  		/* lwz R11, <#[R27 + 8]> */
		/* 821FE160h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821FE160h case   27:*/		return 0x821FE164;
		  /* 821FE164h */ case   28:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FE164h case   28:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FE164h case   28:*/		return 0x821FE168;
		  /* 821FE168h */ case   29:  		/* bl 147672 */
		/* 821FE168h case   29:*/		regs.LR = 0x821FE16C; return 0x82222240;
		/* 821FE168h case   29:*/		return 0x821FE16C;
		  /* 821FE16Ch */ case   30:  		/* mr R5, R3 */
		/* 821FE16Ch case   30:*/		regs.R5 = regs.R3;
		/* 821FE16Ch case   30:*/		return 0x821FE170;
		  /* 821FE170h */ case   31:  		/* mr R4, R27 */
		/* 821FE170h case   31:*/		regs.R4 = regs.R27;
		/* 821FE170h case   31:*/		return 0x821FE174;
		  /* 821FE174h */ case   32:  		/* mr R3, R31 */
		/* 821FE174h case   32:*/		regs.R3 = regs.R31;
		/* 821FE174h case   32:*/		return 0x821FE178;
		  /* 821FE178h */ case   33:  		/* bl -58872 */
		/* 821FE178h case   33:*/		regs.LR = 0x821FE17C; return 0x821EFB80;
		/* 821FE178h case   33:*/		return 0x821FE17C;
		  /* 821FE17Ch */ case   34:  		/* mr R27, R3 */
		/* 821FE17Ch case   34:*/		regs.R27 = regs.R3;
		/* 821FE17Ch case   34:*/		return 0x821FE180;
		  /* 821FE180h */ case   35:  		/* mr R4, R28 */
		/* 821FE180h case   35:*/		regs.R4 = regs.R28;
		/* 821FE180h case   35:*/		return 0x821FE184;
		  /* 821FE184h */ case   36:  		/* mr R3, R31 */
		/* 821FE184h case   36:*/		regs.R3 = regs.R31;
		/* 821FE184h case   36:*/		return 0x821FE188;
		  /* 821FE188h */ case   37:  		/* bl -48648 */
		/* 821FE188h case   37:*/		regs.LR = 0x821FE18C; return 0x821F2380;
		/* 821FE188h case   37:*/		return 0x821FE18C;
		  /* 821FE18Ch */ case   38:  		/* li R4, 4 */
		/* 821FE18Ch case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FE18Ch case   38:*/		return 0x821FE190;
		  /* 821FE190h */ case   39:  		/* mr R26, R3 */
		/* 821FE190h case   39:*/		regs.R26 = regs.R3;
		/* 821FE190h case   39:*/		return 0x821FE194;
		  /* 821FE194h */ case   40:  		/* bl -550612 */
		/* 821FE194h case   40:*/		regs.LR = 0x821FE198; return 0x82177AC0;
		/* 821FE194h case   40:*/		return 0x821FE198;
		  /* 821FE198h */ case   41:  		/* mr R4, R26 */
		/* 821FE198h case   41:*/		regs.R4 = regs.R26;
		/* 821FE198h case   41:*/		return 0x821FE19C;
		  /* 821FE19Ch */ case   42:  		/* mr R3, R31 */
		/* 821FE19Ch case   42:*/		regs.R3 = regs.R31;
		/* 821FE19Ch case   42:*/		return 0x821FE1A0;
		  /* 821FE1A0h */ case   43:  		/* lwz R5, <#[R26 + 12]> */
		/* 821FE1A0h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821FE1A0h case   43:*/		return 0x821FE1A4;
		  /* 821FE1A4h */ case   44:  		/* bl -577716 */
		/* 821FE1A4h case   44:*/		regs.LR = 0x821FE1A8; return 0x821710F0;
		/* 821FE1A4h case   44:*/		return 0x821FE1A8;
		  /* 821FE1A8h */ case   45:  		/* li R4, 4 */
		/* 821FE1A8h case   45:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FE1A8h case   45:*/		return 0x821FE1AC;
		  /* 821FE1ACh */ case   46:  		/* mr R21, R3 */
		/* 821FE1ACh case   46:*/		regs.R21 = regs.R3;
		/* 821FE1ACh case   46:*/		return 0x821FE1B0;
		  /* 821FE1B0h */ case   47:  		/* bl -550640 */
		/* 821FE1B0h case   47:*/		regs.LR = 0x821FE1B4; return 0x82177AC0;
		/* 821FE1B0h case   47:*/		return 0x821FE1B4;
		  /* 821FE1B4h */ case   48:  		/* mr R5, R21 */
		/* 821FE1B4h case   48:*/		regs.R5 = regs.R21;
		/* 821FE1B4h case   48:*/		return 0x821FE1B8;
		  /* 821FE1B8h */ case   49:  		/* mr R4, R28 */
		/* 821FE1B8h case   49:*/		regs.R4 = regs.R28;
		/* 821FE1B8h case   49:*/		return 0x821FE1BC;
		  /* 821FE1BCh */ case   50:  		/* mr R3, R31 */
		/* 821FE1BCh case   50:*/		regs.R3 = regs.R31;
		/* 821FE1BCh case   50:*/		return 0x821FE1C0;
		  /* 821FE1C0h */ case   51:  		/* bl -45352 */
		/* 821FE1C0h case   51:*/		regs.LR = 0x821FE1C4; return 0x821F3098;
		/* 821FE1C0h case   51:*/		return 0x821FE1C4;
		  /* 821FE1C4h */ case   52:  		/* mr R5, R3 */
		/* 821FE1C4h case   52:*/		regs.R5 = regs.R3;
		/* 821FE1C4h case   52:*/		return 0x821FE1C8;
		  /* 821FE1C8h */ case   53:  		/* mr R4, R27 */
		/* 821FE1C8h case   53:*/		regs.R4 = regs.R27;
		/* 821FE1C8h case   53:*/		return 0x821FE1CC;
		  /* 821FE1CCh */ case   54:  		/* mr R3, R31 */
		/* 821FE1CCh case   54:*/		regs.R3 = regs.R31;
		/* 821FE1CCh case   54:*/		return 0x821FE1D0;
		  /* 821FE1D0h */ case   55:  		/* bl -56488 */
		/* 821FE1D0h case   55:*/		regs.LR = 0x821FE1D4; return 0x821F0528;
		/* 821FE1D0h case   55:*/		return 0x821FE1D4;
		  /* 821FE1D4h */ case   56:  		/* mr R5, R3 */
		/* 821FE1D4h case   56:*/		regs.R5 = regs.R3;
		/* 821FE1D4h case   56:*/		return 0x821FE1D8;
		  /* 821FE1D8h */ case   57:  		/* mr R4, R26 */
		/* 821FE1D8h case   57:*/		regs.R4 = regs.R26;
		/* 821FE1D8h case   57:*/		return 0x821FE1DC;
		  /* 821FE1DCh */ case   58:  		/* mr R3, R31 */
		/* 821FE1DCh case   58:*/		regs.R3 = regs.R31;
		/* 821FE1DCh case   58:*/		return 0x821FE1E0;
		  /* 821FE1E0h */ case   59:  		/* bl -57824 */
		/* 821FE1E0h case   59:*/		regs.LR = 0x821FE1E4; return 0x821F0000;
		/* 821FE1E0h case   59:*/		return 0x821FE1E4;
		  /* 821FE1E4h */ case   60:  		/* mr R26, R3 */
		/* 821FE1E4h case   60:*/		regs.R26 = regs.R3;
		/* 821FE1E4h case   60:*/		return 0x821FE1E8;
		  /* 821FE1E8h */ case   61:  		/* cmplwi CR6, R24, 0 */
		/* 821FE1E8h case   61:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821FE1E8h case   61:*/		return 0x821FE1EC;
		  /* 821FE1ECh */ case   62:  		/* mr R28, R3 */
		/* 821FE1ECh case   62:*/		regs.R28 = regs.R3;
		/* 821FE1ECh case   62:*/		return 0x821FE1F0;
		  /* 821FE1F0h */ case   63:  		/* bc 12, CR6_EQ, 160 */
		/* 821FE1F0h case   63:*/		if ( regs.CR[6].eq ) { return 0x821FE290;  }
		/* 821FE1F0h case   63:*/		return 0x821FE1F4;
		  /* 821FE1F4h */ case   64:  		/* mr R3, R23 */
		/* 821FE1F4h case   64:*/		regs.R3 = regs.R23;
		/* 821FE1F4h case   64:*/		return 0x821FE1F8;
		  /* 821FE1F8h */ case   65:  		/* bl -28152 */
		/* 821FE1F8h case   65:*/		regs.LR = 0x821FE1FC; return 0x821F7400;
		/* 821FE1F8h case   65:*/		return 0x821FE1FC;
		  /* 821FE1FCh */ case   66:  		/* or. R27, R3, R3 */
		/* 821FE1FCh case   66:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 821FE1FCh case   66:*/		return 0x821FE200;
		  /* 821FE200h */ case   67:  		/* bc 4, CR0_GT, 16 */
		/* 821FE200h case   67:*/		if ( !regs.CR[0].gt ) { return 0x821FE210;  }
		/* 821FE200h case   67:*/		return 0x821FE204;
		  /* 821FE204h */ case   68:  		/* cmpwi CR6, R27, 9 */
		/* 821FE204h case   68:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000009);
		/* 821FE204h case   68:*/		return 0x821FE208;
		  /* 821FE208h */ case   69:  		/* li R11, 1 */
		/* 821FE208h case   69:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FE208h case   69:*/		return 0x821FE20C;
		  /* 821FE20Ch */ case   70:  		/* bc 4, CR6_GT, 8 */
		/* 821FE20Ch case   70:*/		if ( !regs.CR[6].gt ) { return 0x821FE214;  }
		/* 821FE20Ch case   70:*/		return 0x821FE210;
	}
	return 0x821FE210;
} // Block from 821FE0F4h-821FE210h (71 instructions)

//////////////////////////////////////////////////////
// Block at 821FE210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE210);
		  /* 821FE210h */ case    0:  		/* li R11, 0 */
		/* 821FE210h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FE210h case    0:*/		return 0x821FE214;
	}
	return 0x821FE214;
} // Block from 821FE210h-821FE214h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FE214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE214);
		  /* 821FE214h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FE214h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FE214h case    0:*/		return 0x821FE218;
		  /* 821FE218h */ case    1:  		/* bc 12, CR0_EQ, 120 */
		/* 821FE218h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FE290;  }
		/* 821FE218h case    1:*/		return 0x821FE21C;
		  /* 821FE21Ch */ case    2:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FE21Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FE21Ch case    2:*/		return 0x821FE220;
		  /* 821FE220h */ case    3:  		/* li R8, 1 */
		/* 821FE220h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FE220h case    3:*/		return 0x821FE224;
		  /* 821FE224h */ case    4:  		/* li R7, 1 */
		/* 821FE224h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FE224h case    4:*/		return 0x821FE228;
		  /* 821FE228h */ case    5:  		/* addi R5, R4, 24 */
		/* 821FE228h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FE228h case    5:*/		return 0x821FE22C;
		  /* 821FE22Ch */ case    6:  		/* li R6, 103 */
		/* 821FE22Ch case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 821FE22Ch case    6:*/		return 0x821FE230;
		  /* 821FE230h */ case    7:  		/* mr R3, R31 */
		/* 821FE230h case    7:*/		regs.R3 = regs.R31;
		/* 821FE230h case    7:*/		return 0x821FE234;
		  /* 821FE234h */ case    8:  		/* bl 157540 */
		/* 821FE234h case    8:*/		regs.LR = 0x821FE238; return 0x82224998;
		/* 821FE234h case    8:*/		return 0x821FE238;
		  /* 821FE238h */ case    9:  		/* mr R28, R3 */
		/* 821FE238h case    9:*/		regs.R28 = regs.R3;
		/* 821FE238h case    9:*/		return 0x821FE23C;
		  /* 821FE23Ch */ case   10:  		/* cmpwi CR6, R27, 2 */
		/* 821FE23Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000002);
		/* 821FE23Ch case   10:*/		return 0x821FE240;
		  /* 821FE240h */ case   11:  		/* bc 12, CR6_LT, 16 */
		/* 821FE240h case   11:*/		if ( regs.CR[6].lt ) { return 0x821FE250;  }
		/* 821FE240h case   11:*/		return 0x821FE244;
		  /* 821FE244h */ case   12:  		/* cmpwi CR6, R27, 5 */
		/* 821FE244h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000005);
		/* 821FE244h case   12:*/		return 0x821FE248;
		  /* 821FE248h */ case   13:  		/* li R27, 1 */
		/* 821FE248h case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821FE248h case   13:*/		return 0x821FE24C;
		  /* 821FE24Ch */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 821FE24Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x821FE254;  }
		/* 821FE24Ch case   14:*/		return 0x821FE250;
	}
	return 0x821FE250;
} // Block from 821FE214h-821FE250h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FE250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE250);
		  /* 821FE250h */ case    0:  		/* li R27, 0 */
		/* 821FE250h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821FE250h case    0:*/		return 0x821FE254;
	}
	return 0x821FE254;
} // Block from 821FE250h-821FE254h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FE254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE254);
		  /* 821FE254h */ case    0:  		/* mr R4, R31 */
		/* 821FE254h case    0:*/		regs.R4 = regs.R31;
		/* 821FE254h case    0:*/		return 0x821FE258;
		  /* 821FE258h */ case    1:  		/* mr R3, R28 */
		/* 821FE258h case    1:*/		regs.R3 = regs.R28;
		/* 821FE258h case    1:*/		return 0x821FE25C;
		  /* 821FE25Ch */ case    2:  		/* bl -264260 */
		/* 821FE25Ch case    2:*/		regs.LR = 0x821FE260; return 0x821BDA18;
		/* 821FE25Ch case    2:*/		return 0x821FE260;
		  /* 821FE260h */ case    3:  		/* rlwinm R11, R27, 0, 24, 31 */
		/* 821FE260h case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821FE260h case    3:*/		return 0x821FE264;
		  /* 821FE264h */ case    4:  		/* mr R10, R3 */
		/* 821FE264h case    4:*/		regs.R10 = regs.R3;
		/* 821FE264h case    4:*/		return 0x821FE268;
		  /* 821FE268h */ case    5:  		/* cntlzw R11, R11 */
		/* 821FE268h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821FE268h case    5:*/		return 0x821FE26C;
		  /* 821FE26Ch */ case    6:  		/* mr R4, R26 */
		/* 821FE26Ch case    6:*/		regs.R4 = regs.R26;
		/* 821FE26Ch case    6:*/		return 0x821FE270;
		  /* 821FE270h */ case    7:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821FE270h case    7:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821FE270h case    7:*/		return 0x821FE274;
		  /* 821FE274h */ case    8:  		/* mr R3, R31 */
		/* 821FE274h case    8:*/		regs.R3 = regs.R31;
		/* 821FE274h case    8:*/		return 0x821FE278;
		  /* 821FE278h */ case    9:  		/* stw R11, <#[R10]> */
		/* 821FE278h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821FE278h case    9:*/		return 0x821FE27C;
		  /* 821FE27Ch */ case   10:  		/* bl -549500 */
		/* 821FE27Ch case   10:*/		regs.LR = 0x821FE280; return 0x82178000;
		/* 821FE27Ch case   10:*/		return 0x821FE280;
		  /* 821FE280h */ case   11:  		/* mr R5, R3 */
		/* 821FE280h case   11:*/		regs.R5 = regs.R3;
		/* 821FE280h case   11:*/		return 0x821FE284;
		  /* 821FE284h */ case   12:  		/* li R4, 0 */
		/* 821FE284h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FE284h case   12:*/		return 0x821FE288;
		  /* 821FE288h */ case   13:  		/* mr R3, R28 */
		/* 821FE288h case   13:*/		regs.R3 = regs.R28;
		/* 821FE288h case   13:*/		return 0x821FE28C;
		  /* 821FE28Ch */ case   14:  		/* bl -580572 */
		/* 821FE28Ch case   14:*/		regs.LR = 0x821FE290; return 0x821706B0;
		/* 821FE28Ch case   14:*/		return 0x821FE290;
	}
	return 0x821FE290;
} // Block from 821FE254h-821FE290h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FE290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE290);
		  /* 821FE290h */ case    0:  		/* mr R4, R28 */
		/* 821FE290h case    0:*/		regs.R4 = regs.R28;
		/* 821FE290h case    0:*/		return 0x821FE294;
		  /* 821FE294h */ case    1:  		/* mr R3, R31 */
		/* 821FE294h case    1:*/		regs.R3 = regs.R31;
		/* 821FE294h case    1:*/		return 0x821FE298;
		  /* 821FE298h */ case    2:  		/* bl -58464 */
		/* 821FE298h case    2:*/		regs.LR = 0x821FE29C; return 0x821EFE38;
		/* 821FE298h case    2:*/		return 0x821FE29C;
		  /* 821FE29Ch */ case    3:  		/* mr R5, R3 */
		/* 821FE29Ch case    3:*/		regs.R5 = regs.R3;
		/* 821FE29Ch case    3:*/		return 0x821FE2A0;
		  /* 821FE2A0h */ case    4:  		/* mr R4, R30 */
		/* 821FE2A0h case    4:*/		regs.R4 = regs.R30;
		/* 821FE2A0h case    4:*/		return 0x821FE2A4;
		  /* 821FE2A4h */ case    5:  		/* mr R3, R31 */
		/* 821FE2A4h case    5:*/		regs.R3 = regs.R31;
		/* 821FE2A4h case    5:*/		return 0x821FE2A8;
		  /* 821FE2A8h */ case    6:  		/* bl -44208 */
		/* 821FE2A8h case    6:*/		regs.LR = 0x821FE2AC; return 0x821F35F8;
		/* 821FE2A8h case    6:*/		return 0x821FE2AC;
		  /* 821FE2ACh */ case    7:  		/* mr R4, R3 */
		/* 821FE2ACh case    7:*/		regs.R4 = regs.R3;
		/* 821FE2ACh case    7:*/		return 0x821FE2B0;
		  /* 821FE2B0h */ case    8:  		/* mr R3, R31 */
		/* 821FE2B0h case    8:*/		regs.R3 = regs.R31;
		/* 821FE2B0h case    8:*/		return 0x821FE2B4;
		  /* 821FE2B4h */ case    9:  		/* bl -58964 */
		/* 821FE2B4h case    9:*/		regs.LR = 0x821FE2B8; return 0x821EFC60;
		/* 821FE2B4h case    9:*/		return 0x821FE2B8;
		  /* 821FE2B8h */ case   10:  		/* mr R5, R3 */
		/* 821FE2B8h case   10:*/		regs.R5 = regs.R3;
		/* 821FE2B8h case   10:*/		return 0x821FE2BC;
		  /* 821FE2BCh */ case   11:  		/* mr R4, R26 */
		/* 821FE2BCh case   11:*/		regs.R4 = regs.R26;
		/* 821FE2BCh case   11:*/		return 0x821FE2C0;
		  /* 821FE2C0h */ case   12:  		/* mr R3, R31 */
		/* 821FE2C0h case   12:*/		regs.R3 = regs.R31;
		/* 821FE2C0h case   12:*/		return 0x821FE2C4;
		  /* 821FE2C4h */ case   13:  		/* bl -56732 */
		/* 821FE2C4h case   13:*/		regs.LR = 0x821FE2C8; return 0x821F0528;
		/* 821FE2C4h case   13:*/		return 0x821FE2C8;
		  /* 821FE2C8h */ case   14:  		/* stw R3, <#[R30]> */
		/* 821FE2C8h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FE2C8h case   14:*/		return 0x821FE2CC;
		  /* 821FE2CCh */ case   15:  		/* li R11, 1 */
		/* 821FE2CCh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FE2CCh case   15:*/		return 0x821FE2D0;
		  /* 821FE2D0h */ case   16:  		/* addi R25, R25, -1 */
		/* 821FE2D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0xFFFFFFFF);
		/* 821FE2D0h case   16:*/		return 0x821FE2D4;
		  /* 821FE2D4h */ case   17:  		/* lwz R10, <#[R30 + 4]> */
		/* 821FE2D4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FE2D4h case   17:*/		return 0x821FE2D8;
		  /* 821FE2D8h */ case   18:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 821FE2D8h case   18:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 821FE2D8h case   18:*/		return 0x821FE2DC;
		  /* 821FE2DCh */ case   19:  		/* stw R10, <#[R30 + 4]> */
		/* 821FE2DCh case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FE2DCh case   19:*/		return 0x821FE2E0;
		  /* 821FE2E0h */ case   20:  		/* b -452 */
		/* 821FE2E0h case   20:*/		return 0x821FE11C;
		/* 821FE2E0h case   20:*/		return 0x821FE2E4;
	}
	return 0x821FE2E4;
} // Block from 821FE290h-821FE2E4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821FE2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE2E4);
		  /* 821FE2E4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FE2E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE2E4h case    0:*/		return 0x821FE2E8;
		  /* 821FE2E8h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821FE2E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FE2FC;  }
		/* 821FE2E8h case    1:*/		return 0x821FE2EC;
		  /* 821FE2ECh */ case    2:  		/* mr R5, R29 */
		/* 821FE2ECh case    2:*/		regs.R5 = regs.R29;
		/* 821FE2ECh case    2:*/		return 0x821FE2F0;
		  /* 821FE2F0h */ case    3:  		/* mr R4, R22 */
		/* 821FE2F0h case    3:*/		regs.R4 = regs.R22;
		/* 821FE2F0h case    3:*/		return 0x821FE2F4;
		  /* 821FE2F4h */ case    4:  		/* addi R3, R1, 2952 */
		/* 821FE2F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB88);
		/* 821FE2F4h case    4:*/		return 0x821FE2F8;
		  /* 821FE2F8h */ case    5:  		/* bl -51992 */
		/* 821FE2F8h case    5:*/		regs.LR = 0x821FE2FC; return 0x821F17E0;
		/* 821FE2F8h case    5:*/		return 0x821FE2FC;
	}
	return 0x821FE2FC;
} // Block from 821FE2E4h-821FE2FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FE2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE2FC);
		  /* 821FE2FCh */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821FE2FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821FE2FCh case    0:*/		return 0x821FE300;
		  /* 821FE300h */ case    1:  		/* bc 12, CR6_EQ, -8160 */
		/* 821FE300h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FE300h case    1:*/		return 0x821FE304;
		  /* 821FE304h */ case    2:  		/* li R6, 0 */
		/* 821FE304h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE304h case    2:*/		return 0x821FE308;
		  /* 821FE308h */ case    3:  		/* li R5, 40 */
		/* 821FE308h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 821FE308h case    3:*/		return 0x821FE30C;
		  /* 821FE30Ch */ case    4:  		/* mr R4, R23 */
		/* 821FE30Ch case    4:*/		regs.R4 = regs.R23;
		/* 821FE30Ch case    4:*/		return 0x821FE310;
		  /* 821FE310h */ case    5:  		/* mr R3, R31 */
		/* 821FE310h case    5:*/		regs.R3 = regs.R31;
		/* 821FE310h case    5:*/		return 0x821FE314;
		  /* 821FE314h */ case    6:  		/* bl -595140 */
		/* 821FE314h case    6:*/		regs.LR = 0x821FE318; return 0x8216CE50;
		/* 821FE314h case    6:*/		return 0x821FE318;
		  /* 821FE318h */ case    7:  		/* mr R5, R22 */
		/* 821FE318h case    7:*/		regs.R5 = regs.R22;
		/* 821FE318h case    7:*/		return 0x821FE31C;
		  /* 821FE31Ch */ case    8:  		/* mr R3, R31 */
		/* 821FE31Ch case    8:*/		regs.R3 = regs.R31;
		/* 821FE31Ch case    8:*/		return 0x821FE320;
		  /* 821FE320h */ case    9:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FE320h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FE320h case    9:*/		return 0x821FE324;
		  /* 821FE324h */ case   10:  		/* mr R6, R29 */
		/* 821FE324h case   10:*/		regs.R6 = regs.R29;
		/* 821FE324h case   10:*/		return 0x821FE328;
		  /* 821FE328h */ case   11:  		/* bl -17384 */
		/* 821FE328h case   11:*/		regs.LR = 0x821FE32C; return 0x821F9F40;
		/* 821FE328h case   11:*/		return 0x821FE32C;
		  /* 821FE32Ch */ case   12:  		/* b -8204 */
		/* 821FE32Ch case   12:*/		return 0x821FC320;
		/* 821FE32Ch case   12:*/		return 0x821FE330;
		  /* 821FE330h */ case   13:  		/* lwz R30, <#[R1 + 3500]> */
		/* 821FE330h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FE330h case   13:*/		return 0x821FE334;
		  /* 821FE334h */ case   14:  		/* rlwinm R19, R29, 1, 0, 30 */
		/* 821FE334h case   14:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R19,regs.R29);
		/* 821FE334h case   14:*/		return 0x821FE338;
		  /* 821FE338h */ case   15:  		/* addi R3, R1, 192 */
		/* 821FE338h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 821FE338h case   15:*/		return 0x821FE33C;
		  /* 821FE33Ch */ case   16:  		/* mr R4, R30 */
		/* 821FE33Ch case   16:*/		regs.R4 = regs.R30;
		/* 821FE33Ch case   16:*/		return 0x821FE340;
		  /* 821FE340h */ case   17:  		/* mr R5, R19 */
		/* 821FE340h case   17:*/		regs.R5 = regs.R19;
		/* 821FE340h case   17:*/		return 0x821FE344;
		  /* 821FE344h */ case   18:  		/* bl -32820 */
		/* 821FE344h case   18:*/		regs.LR = 0x821FE348; return 0x821F6310;
		/* 821FE344h case   18:*/		return 0x821FE348;
		  /* 821FE348h */ case   19:  		/* mr R5, R29 */
		/* 821FE348h case   19:*/		regs.R5 = regs.R29;
		/* 821FE348h case   19:*/		return 0x821FE34C;
		  /* 821FE34Ch */ case   20:  		/* mr R4, R30 */
		/* 821FE34Ch case   20:*/		regs.R4 = regs.R30;
		/* 821FE34Ch case   20:*/		return 0x821FE350;
		  /* 821FE350h */ case   21:  		/* addi R3, R1, 224 */
		/* 821FE350h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821FE350h case   21:*/		return 0x821FE354;
		  /* 821FE354h */ case   22:  		/* bl -32836 */
		/* 821FE354h case   22:*/		regs.LR = 0x821FE358; return 0x821F6310;
		/* 821FE354h case   22:*/		return 0x821FE358;
		  /* 821FE358h */ case   23:  		/* lwz R11, <#[R14 + 40]> */
		/* 821FE358h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000028) );
		/* 821FE358h case   23:*/		return 0x821FE35C;
		  /* 821FE35Ch */ case   24:  		/* cmpwi CR6, R11, 0 */
		/* 821FE35Ch case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821FE35Ch case   24:*/		return 0x821FE360;
		  /* 821FE360h */ case   25:  		/* bc 4, CR6_EQ, 28 */
		/* 821FE360h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821FE37C;  }
		/* 821FE360h case   25:*/		return 0x821FE364;
		  /* 821FE364h */ case   26:  		/* mr R7, R29 */
		/* 821FE364h case   26:*/		regs.R7 = regs.R29;
		/* 821FE364h case   26:*/		return 0x821FE368;
		  /* 821FE368h */ case   27:  		/* addi R6, R1, 224 */
		/* 821FE368h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 821FE368h case   27:*/		return 0x821FE36C;
		  /* 821FE36Ch */ case   28:  		/* mr R5, R29 */
		/* 821FE36Ch case   28:*/		regs.R5 = regs.R29;
		/* 821FE36Ch case   28:*/		return 0x821FE370;
		  /* 821FE370h */ case   29:  		/* addi R4, R1, 192 */
		/* 821FE370h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 821FE370h case   29:*/		return 0x821FE374;
		  /* 821FE374h */ case   30:  		/* mr R3, R31 */
		/* 821FE374h case   30:*/		regs.R3 = regs.R31;
		/* 821FE374h case   30:*/		return 0x821FE378;
		  /* 821FE378h */ case   31:  		/* bl -37800 */
		/* 821FE378h case   31:*/		regs.LR = 0x821FE37C; return 0x821F4FD0;
		/* 821FE378h case   31:*/		return 0x821FE37C;
	}
	return 0x821FE37C;
} // Block from 821FE2FCh-821FE37Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 821FE37Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE37C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE37C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE37C);
		  /* 821FE37Ch */ case    0:  		/* mr R3, R31 */
		/* 821FE37Ch case    0:*/		regs.R3 = regs.R31;
		/* 821FE37Ch case    0:*/		return 0x821FE380;
		  /* 821FE380h */ case    1:  		/* lwz R22, <#[R1 + 196]> */
		/* 821FE380h case    1:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000C4) );
		/* 821FE380h case    1:*/		return 0x821FE384;
		  /* 821FE384h */ case    2:  		/* lwz R21, <#[R1 + 200]> */
		/* 821FE384h case    2:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000C8) );
		/* 821FE384h case    2:*/		return 0x821FE388;
		  /* 821FE388h */ case    3:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FE388h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FE388h case    3:*/		return 0x821FE38C;
		  /* 821FE38Ch */ case    4:  		/* bl -21924 */
		/* 821FE38Ch case    4:*/		regs.LR = 0x821FE390; return 0x821F8DE8;
		/* 821FE38Ch case    4:*/		return 0x821FE390;
		  /* 821FE390h */ case    5:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FE390h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FE390h case    5:*/		return 0x821FE394;
		  /* 821FE394h */ case    6:  		/* mr R18, R3 */
		/* 821FE394h case    6:*/		regs.R18 = regs.R3;
		/* 821FE394h case    6:*/		return 0x821FE398;
		  /* 821FE398h */ case    7:  		/* li R20, 0 */
		/* 821FE398h case    7:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821FE398h case    7:*/		return 0x821FE39C;
		  /* 821FE39Ch */ case    8:  		/* cmpwi CR6, R11, 9 */
		/* 821FE39Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821FE39Ch case    8:*/		return 0x821FE3A0;
		  /* 821FE3A0h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 821FE3A0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821FE3AC;  }
		/* 821FE3A0h case    9:*/		return 0x821FE3A4;
		  /* 821FE3A4h */ case   10:  		/* cmpwi CR6, R11, 10 */
		/* 821FE3A4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 821FE3A4h case   10:*/		return 0x821FE3A8;
		  /* 821FE3A8h */ case   11:  		/* bc 4, CR6_EQ, 412 */
		/* 821FE3A8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821FE544;  }
		/* 821FE3A8h case   11:*/		return 0x821FE3AC;
	}
	return 0x821FE3AC;
} // Block from 821FE37Ch-821FE3ACh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FE3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE3AC);
		  /* 821FE3ACh */ case    0:  		/* cmpwi CR6, R11, 10 */
		/* 821FE3ACh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 821FE3ACh case    0:*/		return 0x821FE3B0;
		  /* 821FE3B0h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 821FE3B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FE3E0;  }
		/* 821FE3B0h case    1:*/		return 0x821FE3B4;
		  /* 821FE3B4h */ case    2:  		/* lwz R30, <#[R1 + 3500]> */
		/* 821FE3B4h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FE3B4h case    2:*/		return 0x821FE3B8;
		  /* 821FE3B8h */ case    3:  		/* mr R6, R29 */
		/* 821FE3B8h case    3:*/		regs.R6 = regs.R29;
		/* 821FE3B8h case    3:*/		return 0x821FE3BC;
		  /* 821FE3BCh */ case    4:  		/* addi R5, R1, 192 */
		/* 821FE3BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 821FE3BCh case    4:*/		return 0x821FE3C0;
		  /* 821FE3C0h */ case    5:  		/* mr R4, R30 */
		/* 821FE3C0h case    5:*/		regs.R4 = regs.R30;
		/* 821FE3C0h case    5:*/		return 0x821FE3C4;
		  /* 821FE3C4h */ case    6:  		/* mr R3, R31 */
		/* 821FE3C4h case    6:*/		regs.R3 = regs.R31;
		/* 821FE3C4h case    6:*/		return 0x821FE3C8;
		  /* 821FE3C8h */ case    7:  		/* bl -23040 */
		/* 821FE3C8h case    7:*/		regs.LR = 0x821FE3CC; return 0x821F89C8;
		/* 821FE3C8h case    7:*/		return 0x821FE3CC;
		  /* 821FE3CCh */ case    8:  		/* mr R6, R29 */
		/* 821FE3CCh case    8:*/		regs.R6 = regs.R29;
		/* 821FE3CCh case    8:*/		return 0x821FE3D0;
		  /* 821FE3D0h */ case    9:  		/* addi R5, R1, 224 */
		/* 821FE3D0h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 821FE3D0h case    9:*/		return 0x821FE3D4;
		  /* 821FE3D4h */ case   10:  		/* mr R4, R30 */
		/* 821FE3D4h case   10:*/		regs.R4 = regs.R30;
		/* 821FE3D4h case   10:*/		return 0x821FE3D8;
		  /* 821FE3D8h */ case   11:  		/* mr R3, R31 */
		/* 821FE3D8h case   11:*/		regs.R3 = regs.R31;
		/* 821FE3D8h case   11:*/		return 0x821FE3DC;
		  /* 821FE3DCh */ case   12:  		/* bl -23060 */
		/* 821FE3DCh case   12:*/		regs.LR = 0x821FE3E0; return 0x821F89C8;
		/* 821FE3DCh case   12:*/		return 0x821FE3E0;
	}
	return 0x821FE3E0;
} // Block from 821FE3ACh-821FE3E0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FE3E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE3E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE3E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE3E0);
		  /* 821FE3E0h */ case    0:  		/* rlwinm. R23, R18, 0, 24, 31 */
		/* 821FE3E0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R23,regs.R18);
		/* 821FE3E0h case    0:*/		return 0x821FE3E4;
		  /* 821FE3E4h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821FE3E4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FE400;  }
		/* 821FE3E4h case    1:*/		return 0x821FE3E8;
		  /* 821FE3E8h */ case    2:  		/* li R6, 0 */
		/* 821FE3E8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE3E8h case    2:*/		return 0x821FE3EC;
		  /* 821FE3ECh */ case    3:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FE3ECh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FE3ECh case    3:*/		return 0x821FE3F0;
		  /* 821FE3F0h */ case    4:  		/* li R5, 0 */
		/* 821FE3F0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FE3F0h case    4:*/		return 0x821FE3F4;
		  /* 821FE3F4h */ case    5:  		/* mr R3, R31 */
		/* 821FE3F4h case    5:*/		regs.R3 = regs.R31;
		/* 821FE3F4h case    5:*/		return 0x821FE3F8;
		  /* 821FE3F8h */ case    6:  		/* bl -461960 */
		/* 821FE3F8h case    6:*/		regs.LR = 0x821FE3FC; return 0x8218D770;
		/* 821FE3F8h case    6:*/		return 0x821FE3FC;
		  /* 821FE3FCh */ case    7:  		/* mr R20, R3 */
		/* 821FE3FCh case    7:*/		regs.R20 = regs.R3;
		/* 821FE3FCh case    7:*/		return 0x821FE400;
	}
	return 0x821FE400;
} // Block from 821FE3E0h-821FE400h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821FE400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE400);
		  /* 821FE400h */ case    0:  		/* lwz R25, <#[R1 + 228]> */
		/* 821FE400h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000E4) );
		/* 821FE400h case    0:*/		return 0x821FE404;
		  /* 821FE404h */ case    1:  		/* mr R26, R29 */
		/* 821FE404h case    1:*/		regs.R26 = regs.R29;
		/* 821FE404h case    1:*/		return 0x821FE408;
		  /* 821FE408h */ case    2:  		/* lwz R24, <#[R1 + 232]> */
		/* 821FE408h case    2:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000E8) );
		/* 821FE408h case    2:*/		return 0x821FE40C;
		  /* 821FE40Ch */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821FE40Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE40Ch case    3:*/		return 0x821FE410;
		  /* 821FE410h */ case    4:  		/* bc 12, CR6_EQ, 300 */
		/* 821FE410h case    4:*/		if ( regs.CR[6].eq ) { return 0x821FE53C;  }
		/* 821FE410h case    4:*/		return 0x821FE414;
		  /* 821FE414h */ case    5:  		/* lwz R11, <#[R1 + 232]> */
		/* 821FE414h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 821FE414h case    5:*/		return 0x821FE418;
		  /* 821FE418h */ case    6:  		/* addi R26, R26, -1 */
		/* 821FE418h case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 821FE418h case    6:*/		return 0x821FE41C;
		  /* 821FE41Ch */ case    7:  		/* lwz R10, <#[R1 + 228]> */
		/* 821FE41Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000E4) );
		/* 821FE41Ch case    7:*/		return 0x821FE420;
		  /* 821FE420h */ case    8:  		/* cmplwi CR6, R23, 0 */
		/* 821FE420h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821FE420h case    8:*/		return 0x821FE424;
		  /* 821FE424h */ case    9:  		/* addi R11, R11, 2 */
		/* 821FE424h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FE424h case    9:*/		return 0x821FE428;
		  /* 821FE428h */ case   10:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821FE428h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821FE428h case   10:*/		return 0x821FE42C;
		  /* 821FE42Ch */ case   11:  		/* add R27, R11, R10 */
		/* 821FE42Ch case   11:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R10);
		/* 821FE42Ch case   11:*/		return 0x821FE430;
		  /* 821FE430h */ case   12:  		/* bc 12, CR6_EQ, 184 */
		/* 821FE430h case   12:*/		if ( regs.CR[6].eq ) { return 0x821FE4E8;  }
		/* 821FE430h case   12:*/		return 0x821FE434;
		  /* 821FE434h */ case   13:  		/* mr R3, R20 */
		/* 821FE434h case   13:*/		regs.R3 = regs.R20;
		/* 821FE434h case   13:*/		return 0x821FE438;
		  /* 821FE438h */ case   14:  		/* bl -28728 */
		/* 821FE438h case   14:*/		regs.LR = 0x821FE43C; return 0x821F7400;
		/* 821FE438h case   14:*/		return 0x821FE43C;
		  /* 821FE43Ch */ case   15:  		/* or. R28, R3, R3 */
		/* 821FE43Ch case   15:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 821FE43Ch case   15:*/		return 0x821FE440;
		  /* 821FE440h */ case   16:  		/* bc 4, CR0_GT, 16 */
		/* 821FE440h case   16:*/		if ( !regs.CR[0].gt ) { return 0x821FE450;  }
		/* 821FE440h case   16:*/		return 0x821FE444;
		  /* 821FE444h */ case   17:  		/* cmpwi CR6, R28, 9 */
		/* 821FE444h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000009);
		/* 821FE444h case   17:*/		return 0x821FE448;
		  /* 821FE448h */ case   18:  		/* li R11, 1 */
		/* 821FE448h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FE448h case   18:*/		return 0x821FE44C;
		  /* 821FE44Ch */ case   19:  		/* bc 4, CR6_GT, 8 */
		/* 821FE44Ch case   19:*/		if ( !regs.CR[6].gt ) { return 0x821FE454;  }
		/* 821FE44Ch case   19:*/		return 0x821FE450;
	}
	return 0x821FE450;
} // Block from 821FE400h-821FE450h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FE450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE450);
		  /* 821FE450h */ case    0:  		/* li R11, 0 */
		/* 821FE450h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821FE450h case    0:*/		return 0x821FE454;
	}
	return 0x821FE454;
} // Block from 821FE450h-821FE454h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FE454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE454);
		  /* 821FE454h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821FE454h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821FE454h case    0:*/		return 0x821FE458;
		  /* 821FE458h */ case    1:  		/* bc 12, CR0_EQ, 144 */
		/* 821FE458h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FE4E8;  }
		/* 821FE458h case    1:*/		return 0x821FE45C;
		  /* 821FE45Ch */ case    2:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FE45Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FE45Ch case    2:*/		return 0x821FE460;
		  /* 821FE460h */ case    3:  		/* li R8, 1 */
		/* 821FE460h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FE460h case    3:*/		return 0x821FE464;
		  /* 821FE464h */ case    4:  		/* li R7, 1 */
		/* 821FE464h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FE464h case    4:*/		return 0x821FE468;
		  /* 821FE468h */ case    5:  		/* addi R5, R4, 24 */
		/* 821FE468h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FE468h case    5:*/		return 0x821FE46C;
		  /* 821FE46Ch */ case    6:  		/* li R6, 103 */
		/* 821FE46Ch case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 821FE46Ch case    6:*/		return 0x821FE470;
		  /* 821FE470h */ case    7:  		/* mr R3, R31 */
		/* 821FE470h case    7:*/		regs.R3 = regs.R31;
		/* 821FE470h case    7:*/		return 0x821FE474;
		  /* 821FE474h */ case    8:  		/* bl 156964 */
		/* 821FE474h case    8:*/		regs.LR = 0x821FE478; return 0x82224998;
		/* 821FE474h case    8:*/		return 0x821FE478;
		  /* 821FE478h */ case    9:  		/* mr R30, R3 */
		/* 821FE478h case    9:*/		regs.R30 = regs.R3;
		/* 821FE478h case    9:*/		return 0x821FE47C;
		  /* 821FE47Ch */ case   10:  		/* cmpwi CR6, R28, 2 */
		/* 821FE47Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000002);
		/* 821FE47Ch case   10:*/		return 0x821FE480;
		  /* 821FE480h */ case   11:  		/* bc 12, CR6_LT, 16 */
		/* 821FE480h case   11:*/		if ( regs.CR[6].lt ) { return 0x821FE490;  }
		/* 821FE480h case   11:*/		return 0x821FE484;
		  /* 821FE484h */ case   12:  		/* cmpwi CR6, R28, 5 */
		/* 821FE484h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000005);
		/* 821FE484h case   12:*/		return 0x821FE488;
		  /* 821FE488h */ case   13:  		/* li R28, 1 */
		/* 821FE488h case   13:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821FE488h case   13:*/		return 0x821FE48C;
		  /* 821FE48Ch */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 821FE48Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x821FE494;  }
		/* 821FE48Ch case   14:*/		return 0x821FE490;
	}
	return 0x821FE490;
} // Block from 821FE454h-821FE490h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FE490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE490);
		  /* 821FE490h */ case    0:  		/* li R28, 0 */
		/* 821FE490h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821FE490h case    0:*/		return 0x821FE494;
	}
	return 0x821FE494;
} // Block from 821FE490h-821FE494h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821FE494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE494);
		  /* 821FE494h */ case    0:  		/* mr R4, R31 */
		/* 821FE494h case    0:*/		regs.R4 = regs.R31;
		/* 821FE494h case    0:*/		return 0x821FE498;
		  /* 821FE498h */ case    1:  		/* mr R3, R30 */
		/* 821FE498h case    1:*/		regs.R3 = regs.R30;
		/* 821FE498h case    1:*/		return 0x821FE49C;
		  /* 821FE49Ch */ case    2:  		/* bl -264836 */
		/* 821FE49Ch case    2:*/		regs.LR = 0x821FE4A0; return 0x821BDA18;
		/* 821FE49Ch case    2:*/		return 0x821FE4A0;
		  /* 821FE4A0h */ case    3:  		/* rlwinm R11, R28, 0, 24, 31 */
		/* 821FE4A0h case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821FE4A0h case    3:*/		return 0x821FE4A4;
		  /* 821FE4A4h */ case    4:  		/* mr R10, R3 */
		/* 821FE4A4h case    4:*/		regs.R10 = regs.R3;
		/* 821FE4A4h case    4:*/		return 0x821FE4A8;
		  /* 821FE4A8h */ case    5:  		/* cntlzw R11, R11 */
		/* 821FE4A8h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821FE4A8h case    5:*/		return 0x821FE4AC;
		  /* 821FE4ACh */ case    6:  		/* mr R4, R27 */
		/* 821FE4ACh case    6:*/		regs.R4 = regs.R27;
		/* 821FE4ACh case    6:*/		return 0x821FE4B0;
		  /* 821FE4B0h */ case    7:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821FE4B0h case    7:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821FE4B0h case    7:*/		return 0x821FE4B4;
		  /* 821FE4B4h */ case    8:  		/* mr R3, R31 */
		/* 821FE4B4h case    8:*/		regs.R3 = regs.R31;
		/* 821FE4B4h case    8:*/		return 0x821FE4B8;
		  /* 821FE4B8h */ case    9:  		/* stw R11, <#[R10]> */
		/* 821FE4B8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821FE4B8h case    9:*/		return 0x821FE4BC;
		  /* 821FE4BCh */ case   10:  		/* bl -49468 */
		/* 821FE4BCh case   10:*/		regs.LR = 0x821FE4C0; return 0x821F2380;
		/* 821FE4BCh case   10:*/		return 0x821FE4C0;
		  /* 821FE4C0h */ case   11:  		/* mr R5, R3 */
		/* 821FE4C0h case   11:*/		regs.R5 = regs.R3;
		/* 821FE4C0h case   11:*/		return 0x821FE4C4;
		  /* 821FE4C4h */ case   12:  		/* li R4, 0 */
		/* 821FE4C4h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FE4C4h case   12:*/		return 0x821FE4C8;
		  /* 821FE4C8h */ case   13:  		/* mr R3, R30 */
		/* 821FE4C8h case   13:*/		regs.R3 = regs.R30;
		/* 821FE4C8h case   13:*/		return 0x821FE4CC;
		  /* 821FE4CCh */ case   14:  		/* bl -581148 */
		/* 821FE4CCh case   14:*/		regs.LR = 0x821FE4D0; return 0x821706B0;
		/* 821FE4CCh case   14:*/		return 0x821FE4D0;
		  /* 821FE4D0h */ case   15:  		/* lwz R11, <#[R1 + 596]> */
		/* 821FE4D0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000254) );
		/* 821FE4D0h case   15:*/		return 0x821FE4D4;
		  /* 821FE4D4h */ case   16:  		/* stw R30, <#[R1 + 592]> */
		/* 821FE4D4h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000250) );
		/* 821FE4D4h case   16:*/		return 0x821FE4D8;
		  /* 821FE4D8h */ case   17:  		/* addi R27, R1, 592 */
		/* 821FE4D8h case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0x250);
		/* 821FE4D8h case   17:*/		return 0x821FE4DC;
		  /* 821FE4DCh */ case   18:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 821FE4DCh case   18:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821FE4DCh case   18:*/		return 0x821FE4E0;
		  /* 821FE4E0h */ case   19:  		/* ori R11, R11, 1 */
		/* 821FE4E0h case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FE4E0h case   19:*/		return 0x821FE4E4;
		  /* 821FE4E4h */ case   20:  		/* stw R11, <#[R1 + 596]> */
		/* 821FE4E4h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000254) );
		/* 821FE4E4h case   20:*/		return 0x821FE4E8;
	}
	return 0x821FE4E8;
} // Block from 821FE494h-821FE4E8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821FE4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE4E8);
		  /* 821FE4E8h */ case    0:  		/* mr R4, R27 */
		/* 821FE4E8h case    0:*/		regs.R4 = regs.R27;
		/* 821FE4E8h case    0:*/		return 0x821FE4EC;
		  /* 821FE4ECh */ case    1:  		/* mr R3, R31 */
		/* 821FE4ECh case    1:*/		regs.R3 = regs.R31;
		/* 821FE4ECh case    1:*/		return 0x821FE4F0;
		  /* 821FE4F0h */ case    2:  		/* bl -45472 */
		/* 821FE4F0h case    2:*/		regs.LR = 0x821FE4F4; return 0x821F3350;
		/* 821FE4F0h case    2:*/		return 0x821FE4F4;
		  /* 821FE4F4h */ case    3:  		/* lwz R11, <#[R31 + 608]> */
		/* 821FE4F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 821FE4F4h case    3:*/		return 0x821FE4F8;
		  /* 821FE4F8h */ case    4:  		/* mr R4, R3 */
		/* 821FE4F8h case    4:*/		regs.R4 = regs.R3;
		/* 821FE4F8h case    4:*/		return 0x821FE4FC;
		  /* 821FE4FCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821FE4FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FE4FCh case    5:*/		return 0x821FE500;
		  /* 821FE500h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 821FE500h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FE528;  }
		/* 821FE500h case    6:*/		return 0x821FE504;
		  /* 821FE504h */ case    7:  		/* lwz R11, <#[R3 + 20]> */
		/* 821FE504h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 821FE504h case    7:*/		return 0x821FE508;
		  /* 821FE508h */ case    8:  		/* mr R3, R31 */
		/* 821FE508h case    8:*/		regs.R3 = regs.R31;
		/* 821FE508h case    8:*/		return 0x821FE50C;
		  /* 821FE50Ch */ case    9:  		/* ori R11, R11, 1 */
		/* 821FE50Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FE50Ch case    9:*/		return 0x821FE510;
		  /* 821FE510h */ case   10:  		/* stw R11, <#[R4 + 20]> */
		/* 821FE510h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 821FE510h case   10:*/		return 0x821FE514;
		  /* 821FE514h */ case   11:  		/* bl -550164 */
		/* 821FE514h case   11:*/		regs.LR = 0x821FE518; return 0x82178000;
		/* 821FE514h case   11:*/		return 0x821FE518;
		  /* 821FE518h */ case   12:  		/* mr R4, R3 */
		/* 821FE518h case   12:*/		regs.R4 = regs.R3;
		/* 821FE518h case   12:*/		return 0x821FE51C;
		  /* 821FE51Ch */ case   13:  		/* mr R3, R31 */
		/* 821FE51Ch case   13:*/		regs.R3 = regs.R31;
		/* 821FE51Ch case   13:*/		return 0x821FE520;
		  /* 821FE520h */ case   14:  		/* bl -67504 */
		/* 821FE520h case   14:*/		regs.LR = 0x821FE524; return 0x821EDD70;
		/* 821FE520h case   14:*/		return 0x821FE524;
		  /* 821FE524h */ case   15:  		/* mr R4, R3 */
		/* 821FE524h case   15:*/		regs.R4 = regs.R3;
		/* 821FE524h case   15:*/		return 0x821FE528;
	}
	return 0x821FE528;
} // Block from 821FE4E8h-821FE528h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821FE528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE528);
		  /* 821FE528h */ case    0:  		/* li R5, 0 */
		/* 821FE528h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FE528h case    0:*/		return 0x821FE52C;
		  /* 821FE52Ch */ case    1:  		/* addi R3, R1, 224 */
		/* 821FE52Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821FE52Ch case    1:*/		return 0x821FE530;
		  /* 821FE530h */ case    2:  		/* bl -50872 */
		/* 821FE530h case    2:*/		regs.LR = 0x821FE534; return 0x821F1E78;
		/* 821FE530h case    2:*/		return 0x821FE534;
		  /* 821FE534h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 821FE534h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821FE534h case    3:*/		return 0x821FE538;
		  /* 821FE538h */ case    4:  		/* bc 4, CR6_EQ, -292 */
		/* 821FE538h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821FE414;  }
		/* 821FE538h case    4:*/		return 0x821FE53C;
	}
	return 0x821FE53C;
} // Block from 821FE528h-821FE53Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FE53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE53C);
		  /* 821FE53Ch */ case    0:  		/* stw R25, <#[R1 + 228]> */
		/* 821FE53Ch case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000E4) );
		/* 821FE53Ch case    0:*/		return 0x821FE540;
		  /* 821FE540h */ case    1:  		/* stw R24, <#[R1 + 232]> */
		/* 821FE540h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000E8) );
		/* 821FE540h case    1:*/		return 0x821FE544;
	}
	return 0x821FE544;
} // Block from 821FE53Ch-821FE544h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FE544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE544);
		  /* 821FE544h */ case    0:  		/* mr R27, R29 */
		/* 821FE544h case    0:*/		regs.R27 = regs.R29;
		/* 821FE544h case    0:*/		return 0x821FE548;
		  /* 821FE548h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821FE548h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE548h case    1:*/		return 0x821FE54C;
		  /* 821FE54Ch */ case    2:  		/* bc 12, CR6_EQ, 356 */
		/* 821FE54Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821FE6B0;  }
		/* 821FE54Ch case    2:*/		return 0x821FE550;
		  /* 821FE550h */ case    3:  		/* cmplwi CR6, R27, 4 */
		/* 821FE550h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000004);
		/* 821FE550h case    3:*/		return 0x821FE554;
		  /* 821FE554h */ case    4:  		/* mr R28, R27 */
		/* 821FE554h case    4:*/		regs.R28 = regs.R27;
		/* 821FE554h case    4:*/		return 0x821FE558;
		  /* 821FE558h */ case    5:  		/* bc 12, CR6_LT, 8 */
		/* 821FE558h case    5:*/		if ( regs.CR[6].lt ) { return 0x821FE560;  }
		/* 821FE558h case    5:*/		return 0x821FE55C;
		  /* 821FE55Ch */ case    6:  		/* li R28, 4 */
		/* 821FE55Ch case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 821FE55Ch case    6:*/		return 0x821FE560;
	}
	return 0x821FE560;
} // Block from 821FE544h-821FE560h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FE560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE560);
		  /* 821FE560h */ case    0:  		/* li R6, 228 */
		/* 821FE560h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FE560h case    0:*/		return 0x821FE564;
		  /* 821FE564h */ case    1:  		/* mr R5, R28 */
		/* 821FE564h case    1:*/		regs.R5 = regs.R28;
		/* 821FE564h case    1:*/		return 0x821FE568;
		  /* 821FE568h */ case    2:  		/* addi R4, R1, 192 */
		/* 821FE568h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 821FE568h case    2:*/		return 0x821FE56C;
		  /* 821FE56Ch */ case    3:  		/* mr R3, R31 */
		/* 821FE56Ch case    3:*/		regs.R3 = regs.R31;
		/* 821FE56Ch case    3:*/		return 0x821FE570;
		  /* 821FE570h */ case    4:  		/* subf R27, R28, R27 */
		/* 821FE570h case    4:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R28,regs.R27);
		/* 821FE570h case    4:*/		return 0x821FE574;
		  /* 821FE574h */ case    5:  		/* bl -48684 */
		/* 821FE574h case    5:*/		regs.LR = 0x821FE578; return 0x821F2748;
		/* 821FE574h case    5:*/		return 0x821FE578;
		  /* 821FE578h */ case    6:  		/* mr R30, R3 */
		/* 821FE578h case    6:*/		regs.R30 = regs.R3;
		/* 821FE578h case    6:*/		return 0x821FE57C;
		  /* 821FE57Ch */ case    7:  		/* li R7, 1 */
		/* 821FE57Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FE57Ch case    7:*/		return 0x821FE580;
		  /* 821FE580h */ case    8:  		/* li R6, 0 */
		/* 821FE580h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE580h case    8:*/		return 0x821FE584;
		  /* 821FE584h */ case    9:  		/* mr R5, R28 */
		/* 821FE584h case    9:*/		regs.R5 = regs.R28;
		/* 821FE584h case    9:*/		return 0x821FE588;
		  /* 821FE588h */ case   10:  		/* addi R4, R1, 224 */
		/* 821FE588h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xE0);
		/* 821FE588h case   10:*/		return 0x821FE58C;
		  /* 821FE58Ch */ case   11:  		/* mr R3, R31 */
		/* 821FE58Ch case   11:*/		regs.R3 = regs.R31;
		/* 821FE58Ch case   11:*/		return 0x821FE590;
		  /* 821FE590h */ case   12:  		/* bl -49264 */
		/* 821FE590h case   12:*/		regs.LR = 0x821FE594; return 0x821F2520;
		/* 821FE590h case   12:*/		return 0x821FE594;
		  /* 821FE594h */ case   13:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FE594h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FE594h case   13:*/		return 0x821FE598;
		  /* 821FE598h */ case   14:  		/* mr R4, R3 */
		/* 821FE598h case   14:*/		regs.R4 = regs.R3;
		/* 821FE598h case   14:*/		return 0x821FE59C;
		  /* 821FE59Ch */ case   15:  		/* addi R11, R11, -8 */
		/* 821FE59Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 821FE59Ch case   15:*/		return 0x821FE5A0;
		  /* 821FE5A0h */ case   16:  		/* cmplwi CR6, R11, 17 */
		/* 821FE5A0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 821FE5A0h case   16:*/		return 0x821FE5A4;
		  /* 821FE5A4h */ case   17:  		/* bc 12, CR6_GT, 24440 */
		/* 821FE5A4h case   17:*/		if ( regs.CR[6].gt ) { return 0x8220451C;  }
		/* 821FE5A4h case   17:*/		return 0x821FE5A8;
		  /* 821FE5A8h */ case   18:  		/* lis R12, -32252 */
		/* 821FE5A8h case   18:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821FE5A8h case   18:*/		return 0x821FE5AC;
		  /* 821FE5ACh */ case   19:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 821FE5ACh case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 821FE5ACh case   19:*/		return 0x821FE5B0;
		  /* 821FE5B0h */ case   20:  		/* addi R12, R12, -14112 */
		/* 821FE5B0h case   20:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFC8E0);
		/* 821FE5B0h case   20:*/		return 0x821FE5B4;
		  /* 821FE5B4h */ case   21:  		/* lhzx R0, <#[R12 + R0]> */
		/* 821FE5B4h case   21:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 821FE5B4h case   21:*/		return 0x821FE5B8;
		  /* 821FE5B8h */ case   22:  		/* lis R12, -32224 */
		/* 821FE5B8h case   22:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8220);
		/* 821FE5B8h case   22:*/		return 0x821FE5BC;
		  /* 821FE5BCh */ case   23:  		/* addi R12, R12, -6704 */
		/* 821FE5BCh case   23:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFE5D0);
		/* 821FE5BCh case   23:*/		return 0x821FE5C0;
		  /* 821FE5C0h */ case   24:  		/* ori R0, R0, 0 */
		/* 821FE5C0h case   24:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821FE5C0h case   24:*/		return 0x821FE5C4;
		  /* 821FE5C4h */ case   25:  		/* add R12, R12, R0 */
		/* 821FE5C4h case   25:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821FE5C4h case   25:*/		return 0x821FE5C8;
		  /* 821FE5C8h */ case   26:  		/* mtspr CTR, R12 */
		/* 821FE5C8h case   26:*/		regs.CTR = regs.R12;
		/* 821FE5C8h case   26:*/		return 0x821FE5CC;
		  /* 821FE5CCh */ case   27:  		/* bcctr 20, CR0_LT */
		/* 821FE5CCh case   27:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821FE5CCh case   27:*/		return 0x821FE5D0;
		  /* 821FE5D0h */ case   28:  		/* mr R5, R4 */
		/* 821FE5D0h case   28:*/		regs.R5 = regs.R4;
		/* 821FE5D0h case   28:*/		return 0x821FE5D4;
		  /* 821FE5D4h */ case   29:  		/* mr R4, R30 */
		/* 821FE5D4h case   29:*/		regs.R4 = regs.R30;
		/* 821FE5D4h case   29:*/		return 0x821FE5D8;
		  /* 821FE5D8h */ case   30:  		/* mr R3, R31 */
		/* 821FE5D8h case   30:*/		regs.R3 = regs.R31;
		/* 821FE5D8h case   30:*/		return 0x821FE5DC;
		  /* 821FE5DCh */ case   31:  		/* bl -66468 */
		/* 821FE5DCh case   31:*/		regs.LR = 0x821FE5E0; return 0x821EE238;
		/* 821FE5DCh case   31:*/		return 0x821FE5E0;
		  /* 821FE5E0h */ case   32:  		/* b 184 */
		/* 821FE5E0h case   32:*/		return 0x821FE698;
		/* 821FE5E0h case   32:*/		return 0x821FE5E4;
		  /* 821FE5E4h */ case   33:  		/* mr R5, R4 */
		/* 821FE5E4h case   33:*/		regs.R5 = regs.R4;
		/* 821FE5E4h case   33:*/		return 0x821FE5E8;
		  /* 821FE5E8h */ case   34:  		/* mr R4, R30 */
		/* 821FE5E8h case   34:*/		regs.R4 = regs.R30;
		/* 821FE5E8h case   34:*/		return 0x821FE5EC;
		  /* 821FE5ECh */ case   35:  		/* mr R3, R31 */
		/* 821FE5ECh case   35:*/		regs.R3 = regs.R31;
		/* 821FE5ECh case   35:*/		return 0x821FE5F0;
		  /* 821FE5F0h */ case   36:  		/* bl -66728 */
		/* 821FE5F0h case   36:*/		regs.LR = 0x821FE5F4; return 0x821EE148;
		/* 821FE5F0h case   36:*/		return 0x821FE5F4;
		  /* 821FE5F4h */ case   37:  		/* b 164 */
		/* 821FE5F4h case   37:*/		return 0x821FE698;
		/* 821FE5F4h case   37:*/		return 0x821FE5F8;
		  /* 821FE5F8h */ case   38:  		/* mr R3, R31 */
		/* 821FE5F8h case   38:*/		regs.R3 = regs.R31;
		/* 821FE5F8h case   38:*/		return 0x821FE5FC;
		  /* 821FE5FCh */ case   39:  		/* bl -51244 */
		/* 821FE5FCh case   39:*/		regs.LR = 0x821FE600; return 0x821F1DD0;
		/* 821FE5FCh case   39:*/		return 0x821FE600;
		  /* 821FE600h */ case   40:  		/* mr R26, R3 */
		/* 821FE600h case   40:*/		regs.R26 = regs.R3;
		/* 821FE600h case   40:*/		return 0x821FE604;
		  /* 821FE604h */ case   41:  		/* mr R4, R30 */
		/* 821FE604h case   41:*/		regs.R4 = regs.R30;
		/* 821FE604h case   41:*/		return 0x821FE608;
		  /* 821FE608h */ case   42:  		/* mr R3, R31 */
		/* 821FE608h case   42:*/		regs.R3 = regs.R31;
		/* 821FE608h case   42:*/		return 0x821FE60C;
		  /* 821FE60Ch */ case   43:  		/* bl -51260 */
		/* 821FE60Ch case   43:*/		regs.LR = 0x821FE610; return 0x821F1DD0;
		/* 821FE60Ch case   43:*/		return 0x821FE610;
		  /* 821FE610h */ case   44:  		/* mr R4, R3 */
		/* 821FE610h case   44:*/		regs.R4 = regs.R3;
		/* 821FE610h case   44:*/		return 0x821FE614;
		  /* 821FE614h */ case   45:  		/* mr R5, R26 */
		/* 821FE614h case   45:*/		regs.R5 = regs.R26;
		/* 821FE614h case   45:*/		return 0x821FE618;
		  /* 821FE618h */ case   46:  		/* b -44 */
		/* 821FE618h case   46:*/		return 0x821FE5EC;
		/* 821FE618h case   46:*/		return 0x821FE61C;
		  /* 821FE61Ch */ case   47:  		/* mr R3, R31 */
		/* 821FE61Ch case   47:*/		regs.R3 = regs.R31;
		/* 821FE61Ch case   47:*/		return 0x821FE620;
		  /* 821FE620h */ case   48:  		/* lwz R5, <#[R4 + 12]> */
		/* 821FE620h case   48:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821FE620h case   48:*/		return 0x821FE624;
		  /* 821FE624h */ case   49:  		/* bl -578868 */
		/* 821FE624h case   49:*/		regs.LR = 0x821FE628; return 0x821710F0;
		/* 821FE624h case   49:*/		return 0x821FE628;
		  /* 821FE628h */ case   50:  		/* li R4, 4 */
		/* 821FE628h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FE628h case   50:*/		return 0x821FE62C;
		  /* 821FE62Ch */ case   51:  		/* mr R26, R3 */
		/* 821FE62Ch case   51:*/		regs.R26 = regs.R3;
		/* 821FE62Ch case   51:*/		return 0x821FE630;
		  /* 821FE630h */ case   52:  		/* bl -551792 */
		/* 821FE630h case   52:*/		regs.LR = 0x821FE634; return 0x82177AC0;
		/* 821FE630h case   52:*/		return 0x821FE634;
		  /* 821FE634h */ case   53:  		/* mr R5, R26 */
		/* 821FE634h case   53:*/		regs.R5 = regs.R26;
		/* 821FE634h case   53:*/		return 0x821FE638;
		  /* 821FE638h */ case   54:  		/* b -80 */
		/* 821FE638h case   54:*/		return 0x821FE5E8;
		/* 821FE638h case   54:*/		return 0x821FE63C;
		  /* 821FE63Ch */ case   55:  		/* mr R5, R30 */
		/* 821FE63Ch case   55:*/		regs.R5 = regs.R30;
		/* 821FE63Ch case   55:*/		return 0x821FE640;
		  /* 821FE640h */ case   56:  		/* mr R3, R31 */
		/* 821FE640h case   56:*/		regs.R3 = regs.R31;
		/* 821FE640h case   56:*/		return 0x821FE644;
		  /* 821FE644h */ case   57:  		/* bl -65612 */
		/* 821FE644h case   57:*/		regs.LR = 0x821FE648; return 0x821EE5F8;
		/* 821FE644h case   57:*/		return 0x821FE648;
		  /* 821FE648h */ case   58:  		/* b 80 */
		/* 821FE648h case   58:*/		return 0x821FE698;
		/* 821FE648h case   58:*/		return 0x821FE64C;
		  /* 821FE64Ch */ case   59:  		/* mr R5, R4 */
		/* 821FE64Ch case   59:*/		regs.R5 = regs.R4;
		/* 821FE64Ch case   59:*/		return 0x821FE650;
		  /* 821FE650h */ case   60:  		/* mr R4, R30 */
		/* 821FE650h case   60:*/		regs.R4 = regs.R30;
		/* 821FE650h case   60:*/		return 0x821FE654;
		  /* 821FE654h */ case   61:  		/* b -20 */
		/* 821FE654h case   61:*/		return 0x821FE640;
		/* 821FE654h case   61:*/		return 0x821FE658;
		  /* 821FE658h */ case   62:  		/* mr R5, R30 */
		/* 821FE658h case   62:*/		regs.R5 = regs.R30;
		/* 821FE658h case   62:*/		return 0x821FE65C;
		  /* 821FE65Ch */ case   63:  		/* mr R3, R31 */
		/* 821FE65Ch case   63:*/		regs.R3 = regs.R31;
		/* 821FE65Ch case   63:*/		return 0x821FE660;
		  /* 821FE660h */ case   64:  		/* bl -65400 */
		/* 821FE660h case   64:*/		regs.LR = 0x821FE664; return 0x821EE6E8;
		/* 821FE660h case   64:*/		return 0x821FE664;
		  /* 821FE664h */ case   65:  		/* b 52 */
		/* 821FE664h case   65:*/		return 0x821FE698;
		/* 821FE664h case   65:*/		return 0x821FE668;
		  /* 821FE668h */ case   66:  		/* mr R5, R4 */
		/* 821FE668h case   66:*/		regs.R5 = regs.R4;
		/* 821FE668h case   66:*/		return 0x821FE66C;
		  /* 821FE66Ch */ case   67:  		/* mr R4, R30 */
		/* 821FE66Ch case   67:*/		regs.R4 = regs.R30;
		/* 821FE66Ch case   67:*/		return 0x821FE670;
		  /* 821FE670h */ case   68:  		/* b -20 */
		/* 821FE670h case   68:*/		return 0x821FE65C;
		/* 821FE670h case   68:*/		return 0x821FE674;
		  /* 821FE674h */ case   69:  		/* mr R5, R4 */
		/* 821FE674h case   69:*/		regs.R5 = regs.R4;
		/* 821FE674h case   69:*/		return 0x821FE678;
		  /* 821FE678h */ case   70:  		/* mr R4, R30 */
		/* 821FE678h case   70:*/		regs.R4 = regs.R30;
		/* 821FE678h case   70:*/		return 0x821FE67C;
		  /* 821FE67Ch */ case   71:  		/* mr R3, R31 */
		/* 821FE67Ch case   71:*/		regs.R3 = regs.R31;
		/* 821FE67Ch case   71:*/		return 0x821FE680;
		  /* 821FE680h */ case   72:  		/* bl -65912 */
		/* 821FE680h case   72:*/		regs.LR = 0x821FE684; return 0x821EE508;
		/* 821FE680h case   72:*/		return 0x821FE684;
		  /* 821FE684h */ case   73:  		/* b 20 */
		/* 821FE684h case   73:*/		return 0x821FE698;
		/* 821FE684h case   73:*/		return 0x821FE688;
		  /* 821FE688h */ case   74:  		/* mr R5, R4 */
		/* 821FE688h case   74:*/		regs.R5 = regs.R4;
		/* 821FE688h case   74:*/		return 0x821FE68C;
		  /* 821FE68Ch */ case   75:  		/* mr R4, R30 */
		/* 821FE68Ch case   75:*/		regs.R4 = regs.R30;
		/* 821FE68Ch case   75:*/		return 0x821FE690;
		  /* 821FE690h */ case   76:  		/* mr R3, R31 */
		/* 821FE690h case   76:*/		regs.R3 = regs.R31;
		/* 821FE690h case   76:*/		return 0x821FE694;
		  /* 821FE694h */ case   77:  		/* bl -65212 */
		/* 821FE694h case   77:*/		regs.LR = 0x821FE698; return 0x821EE7D8;
		/* 821FE694h case   77:*/		return 0x821FE698;
	}
	return 0x821FE698;
} // Block from 821FE560h-821FE698h (78 instructions)

//////////////////////////////////////////////////////
// Block at 821FE698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE698);
		  /* 821FE698h */ case    0:  		/* mr R5, R3 */
		/* 821FE698h case    0:*/		regs.R5 = regs.R3;
		/* 821FE698h case    0:*/		return 0x821FE69C;
		  /* 821FE69Ch */ case    1:  		/* mr R4, R28 */
		/* 821FE69Ch case    1:*/		regs.R4 = regs.R28;
		/* 821FE69Ch case    1:*/		return 0x821FE6A0;
		  /* 821FE6A0h */ case    2:  		/* addi R3, R1, 192 */
		/* 821FE6A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 821FE6A0h case    2:*/		return 0x821FE6A4;
		  /* 821FE6A4h */ case    3:  		/* bl -51084 */
		/* 821FE6A4h case    3:*/		regs.LR = 0x821FE6A8; return 0x821F1F18;
		/* 821FE6A4h case    3:*/		return 0x821FE6A8;
		  /* 821FE6A8h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 821FE6A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821FE6A8h case    4:*/		return 0x821FE6AC;
		  /* 821FE6ACh */ case    5:  		/* bc 4, CR6_EQ, -348 */
		/* 821FE6ACh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821FE550;  }
		/* 821FE6ACh case    5:*/		return 0x821FE6B0;
	}
	return 0x821FE6B0;
} // Block from 821FE698h-821FE6B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FE6B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE6B0);
		  /* 821FE6B0h */ case    0:  		/* lwz R11, <#[R14 + 28]> */
		/* 821FE6B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x0000001C) );
		/* 821FE6B0h case    0:*/		return 0x821FE6B4;
		  /* 821FE6B4h */ case    1:  		/* lwz R27, <#[R1 + 3500]> */
		/* 821FE6B4h case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FE6B4h case    1:*/		return 0x821FE6B8;
		  /* 821FE6B8h */ case    2:  		/* cmpwi CR6, R11, 10 */
		/* 821FE6B8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 821FE6B8h case    2:*/		return 0x821FE6BC;
		  /* 821FE6BCh */ case    3:  		/* bc 4, CR6_EQ, 280 */
		/* 821FE6BCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821FE7D4;  }
		/* 821FE6BCh case    3:*/		return 0x821FE6C0;
		  /* 821FE6C0h */ case    4:  		/* mr R5, R19 */
		/* 821FE6C0h case    4:*/		regs.R5 = regs.R19;
		/* 821FE6C0h case    4:*/		return 0x821FE6C4;
		  /* 821FE6C4h */ case    5:  		/* addi R3, R1, 2296 */
		/* 821FE6C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x8F8);
		/* 821FE6C4h case    5:*/		return 0x821FE6C8;
		  /* 821FE6C8h */ case    6:  		/* mr R4, R27 */
		/* 821FE6C8h case    6:*/		regs.R4 = regs.R27;
		/* 821FE6C8h case    6:*/		return 0x821FE6CC;
		  /* 821FE6CCh */ case    7:  		/* bl -33724 */
		/* 821FE6CCh case    7:*/		regs.LR = 0x821FE6D0; return 0x821F6310;
		/* 821FE6CCh case    7:*/		return 0x821FE6D0;
		  /* 821FE6D0h */ case    8:  		/* mr R5, R29 */
		/* 821FE6D0h case    8:*/		regs.R5 = regs.R29;
		/* 821FE6D0h case    8:*/		return 0x821FE6D4;
		  /* 821FE6D4h */ case    9:  		/* mr R4, R27 */
		/* 821FE6D4h case    9:*/		regs.R4 = regs.R27;
		/* 821FE6D4h case    9:*/		return 0x821FE6D8;
		  /* 821FE6D8h */ case   10:  		/* addi R3, R1, 1912 */
		/* 821FE6D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x778);
		/* 821FE6D8h case   10:*/		return 0x821FE6DC;
		  /* 821FE6DCh */ case   11:  		/* bl -33740 */
		/* 821FE6DCh case   11:*/		regs.LR = 0x821FE6E0; return 0x821F6310;
		/* 821FE6DCh case   11:*/		return 0x821FE6E0;
		  /* 821FE6E0h */ case   12:  		/* stw R22, <#[R1 + 196]> */
		/* 821FE6E0h case   12:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x000000C4) );
		/* 821FE6E0h case   12:*/		return 0x821FE6E4;
		  /* 821FE6E4h */ case   13:  		/* stw R21, <#[R1 + 200]> */
		/* 821FE6E4h case   13:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000C8) );
		/* 821FE6E4h case   13:*/		return 0x821FE6E8;
		  /* 821FE6E8h */ case   14:  		/* mr R28, R29 */
		/* 821FE6E8h case   14:*/		regs.R28 = regs.R29;
		/* 821FE6E8h case   14:*/		return 0x821FE6EC;
		  /* 821FE6ECh */ case   15:  		/* cmplwi CR6, R29, 0 */
		/* 821FE6ECh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE6ECh case   15:*/		return 0x821FE6F0;
		  /* 821FE6F0h */ case   16:  		/* bc 12, CR6_EQ, 204 */
		/* 821FE6F0h case   16:*/		if ( regs.CR[6].eq ) { return 0x821FE7BC;  }
		/* 821FE6F0h case   16:*/		return 0x821FE6F4;
		  /* 821FE6F4h */ case   17:  		/* cmplwi CR6, R28, 4 */
		/* 821FE6F4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 821FE6F4h case   17:*/		return 0x821FE6F8;
		  /* 821FE6F8h */ case   18:  		/* mr R30, R28 */
		/* 821FE6F8h case   18:*/		regs.R30 = regs.R28;
		/* 821FE6F8h case   18:*/		return 0x821FE6FC;
		  /* 821FE6FCh */ case   19:  		/* bc 12, CR6_LT, 8 */
		/* 821FE6FCh case   19:*/		if ( regs.CR[6].lt ) { return 0x821FE704;  }
		/* 821FE6FCh case   19:*/		return 0x821FE700;
		  /* 821FE700h */ case   20:  		/* li R30, 4 */
		/* 821FE700h case   20:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FE700h case   20:*/		return 0x821FE704;
	}
	return 0x821FE704;
} // Block from 821FE6B0h-821FE704h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821FE704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE704);
		  /* 821FE704h */ case    0:  		/* li R6, 228 */
		/* 821FE704h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FE704h case    0:*/		return 0x821FE708;
		  /* 821FE708h */ case    1:  		/* mr R5, R30 */
		/* 821FE708h case    1:*/		regs.R5 = regs.R30;
		/* 821FE708h case    1:*/		return 0x821FE70C;
		  /* 821FE70Ch */ case    2:  		/* addi R4, R1, 192 */
		/* 821FE70Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 821FE70Ch case    2:*/		return 0x821FE710;
		  /* 821FE710h */ case    3:  		/* mr R3, R31 */
		/* 821FE710h case    3:*/		regs.R3 = regs.R31;
		/* 821FE710h case    3:*/		return 0x821FE714;
		  /* 821FE714h */ case    4:  		/* subf R28, R30, R28 */
		/* 821FE714h case    4:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R30,regs.R28);
		/* 821FE714h case    4:*/		return 0x821FE718;
		  /* 821FE718h */ case    5:  		/* bl -49104 */
		/* 821FE718h case    5:*/		regs.LR = 0x821FE71C; return 0x821F2748;
		/* 821FE718h case    5:*/		return 0x821FE71C;
		  /* 821FE71Ch */ case    6:  		/* mr R26, R3 */
		/* 821FE71Ch case    6:*/		regs.R26 = regs.R3;
		/* 821FE71Ch case    6:*/		return 0x821FE720;
		  /* 821FE720h */ case    7:  		/* li R7, 1 */
		/* 821FE720h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FE720h case    7:*/		return 0x821FE724;
		  /* 821FE724h */ case    8:  		/* li R6, 0 */
		/* 821FE724h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE724h case    8:*/		return 0x821FE728;
		  /* 821FE728h */ case    9:  		/* mr R5, R30 */
		/* 821FE728h case    9:*/		regs.R5 = regs.R30;
		/* 821FE728h case    9:*/		return 0x821FE72C;
		  /* 821FE72Ch */ case   10:  		/* addi R4, R1, 2296 */
		/* 821FE72Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x8F8);
		/* 821FE72Ch case   10:*/		return 0x821FE730;
		  /* 821FE730h */ case   11:  		/* mr R3, R31 */
		/* 821FE730h case   11:*/		regs.R3 = regs.R31;
		/* 821FE730h case   11:*/		return 0x821FE734;
		  /* 821FE734h */ case   12:  		/* bl -49684 */
		/* 821FE734h case   12:*/		regs.LR = 0x821FE738; return 0x821F2520;
		/* 821FE734h case   12:*/		return 0x821FE738;
		  /* 821FE738h */ case   13:  		/* mr R25, R3 */
		/* 821FE738h case   13:*/		regs.R25 = regs.R3;
		/* 821FE738h case   13:*/		return 0x821FE73C;
		  /* 821FE73Ch */ case   14:  		/* li R7, 1 */
		/* 821FE73Ch case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FE73Ch case   14:*/		return 0x821FE740;
		  /* 821FE740h */ case   15:  		/* li R6, 0 */
		/* 821FE740h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE740h case   15:*/		return 0x821FE744;
		  /* 821FE744h */ case   16:  		/* mr R5, R30 */
		/* 821FE744h case   16:*/		regs.R5 = regs.R30;
		/* 821FE744h case   16:*/		return 0x821FE748;
		  /* 821FE748h */ case   17:  		/* addi R4, R1, 1912 */
		/* 821FE748h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x778);
		/* 821FE748h case   17:*/		return 0x821FE74C;
		  /* 821FE74Ch */ case   18:  		/* mr R3, R31 */
		/* 821FE74Ch case   18:*/		regs.R3 = regs.R31;
		/* 821FE74Ch case   18:*/		return 0x821FE750;
		  /* 821FE750h */ case   19:  		/* bl -49712 */
		/* 821FE750h case   19:*/		regs.LR = 0x821FE754; return 0x821F2520;
		/* 821FE750h case   19:*/		return 0x821FE754;
		  /* 821FE754h */ case   20:  		/* mr R24, R3 */
		/* 821FE754h case   20:*/		regs.R24 = regs.R3;
		/* 821FE754h case   20:*/		return 0x821FE758;
		  /* 821FE758h */ case   21:  		/* mr R4, R26 */
		/* 821FE758h case   21:*/		regs.R4 = regs.R26;
		/* 821FE758h case   21:*/		return 0x821FE75C;
		  /* 821FE75Ch */ case   22:  		/* mr R3, R31 */
		/* 821FE75Ch case   22:*/		regs.R3 = regs.R31;
		/* 821FE75Ch case   22:*/		return 0x821FE760;
		  /* 821FE760h */ case   23:  		/* bl -64984 */
		/* 821FE760h case   23:*/		regs.LR = 0x821FE764; return 0x821EE988;
		/* 821FE760h case   23:*/		return 0x821FE764;
		  /* 821FE764h */ case   24:  		/* mr R4, R3 */
		/* 821FE764h case   24:*/		regs.R4 = regs.R3;
		/* 821FE764h case   24:*/		return 0x821FE768;
		  /* 821FE768h */ case   25:  		/* mr R5, R24 */
		/* 821FE768h case   25:*/		regs.R5 = regs.R24;
		/* 821FE768h case   25:*/		return 0x821FE76C;
		  /* 821FE76Ch */ case   26:  		/* mr R3, R31 */
		/* 821FE76Ch case   26:*/		regs.R3 = regs.R31;
		/* 821FE76Ch case   26:*/		return 0x821FE770;
		  /* 821FE770h */ case   27:  		/* bl -61072 */
		/* 821FE770h case   27:*/		regs.LR = 0x821FE774; return 0x821EF8E0;
		/* 821FE770h case   27:*/		return 0x821FE774;
		  /* 821FE774h */ case   28:  		/* mr R11, R3 */
		/* 821FE774h case   28:*/		regs.R11 = regs.R3;
		/* 821FE774h case   28:*/		return 0x821FE778;
		  /* 821FE778h */ case   29:  		/* li R7, 228 */
		/* 821FE778h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FE778h case   29:*/		return 0x821FE77C;
		  /* 821FE77Ch */ case   30:  		/* li R6, 4 */
		/* 821FE77Ch case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FE77Ch case   30:*/		return 0x821FE780;
		  /* 821FE780h */ case   31:  		/* mr R3, R31 */
		/* 821FE780h case   31:*/		regs.R3 = regs.R31;
		/* 821FE780h case   31:*/		return 0x821FE784;
		  /* 821FE784h */ case   32:  		/* mr R4, R11 */
		/* 821FE784h case   32:*/		regs.R4 = regs.R11;
		/* 821FE784h case   32:*/		return 0x821FE788;
		  /* 821FE788h */ case   33:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FE788h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FE788h case   33:*/		return 0x821FE78C;
		  /* 821FE78Ch */ case   34:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 821FE78Ch case   34:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 821FE78Ch case   34:*/		return 0x821FE790;
		  /* 821FE790h */ case   35:  		/* bl 146096 */
		/* 821FE790h case   35:*/		regs.LR = 0x821FE794; return 0x82222240;
		/* 821FE790h case   35:*/		return 0x821FE794;
		  /* 821FE794h */ case   36:  		/* mr R5, R3 */
		/* 821FE794h case   36:*/		regs.R5 = regs.R3;
		/* 821FE794h case   36:*/		return 0x821FE798;
		  /* 821FE798h */ case   37:  		/* mr R4, R25 */
		/* 821FE798h case   37:*/		regs.R4 = regs.R25;
		/* 821FE798h case   37:*/		return 0x821FE79C;
		  /* 821FE79Ch */ case   38:  		/* mr R3, R31 */
		/* 821FE79Ch case   38:*/		regs.R3 = regs.R31;
		/* 821FE79Ch case   38:*/		return 0x821FE7A0;
		  /* 821FE7A0h */ case   39:  		/* bl -67160 */
		/* 821FE7A0h case   39:*/		regs.LR = 0x821FE7A4; return 0x821EE148;
		/* 821FE7A0h case   39:*/		return 0x821FE7A4;
		  /* 821FE7A4h */ case   40:  		/* mr R5, R3 */
		/* 821FE7A4h case   40:*/		regs.R5 = regs.R3;
		/* 821FE7A4h case   40:*/		return 0x821FE7A8;
		  /* 821FE7A8h */ case   41:  		/* mr R4, R30 */
		/* 821FE7A8h case   41:*/		regs.R4 = regs.R30;
		/* 821FE7A8h case   41:*/		return 0x821FE7AC;
		  /* 821FE7ACh */ case   42:  		/* addi R3, R1, 192 */
		/* 821FE7ACh case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 821FE7ACh case   42:*/		return 0x821FE7B0;
		  /* 821FE7B0h */ case   43:  		/* bl -51352 */
		/* 821FE7B0h case   43:*/		regs.LR = 0x821FE7B4; return 0x821F1F18;
		/* 821FE7B0h case   43:*/		return 0x821FE7B4;
		  /* 821FE7B4h */ case   44:  		/* cmplwi CR6, R28, 0 */
		/* 821FE7B4h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FE7B4h case   44:*/		return 0x821FE7B8;
		  /* 821FE7B8h */ case   45:  		/* bc 4, CR6_EQ, -196 */
		/* 821FE7B8h case   45:*/		if ( !regs.CR[6].eq ) { return 0x821FE6F4;  }
		/* 821FE7B8h case   45:*/		return 0x821FE7BC;
	}
	return 0x821FE7BC;
} // Block from 821FE704h-821FE7BCh (46 instructions)

//////////////////////////////////////////////////////
// Block at 821FE7BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE7BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE7BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE7BC);
		  /* 821FE7BCh */ case    0:  		/* cmplwi CR0, R19, 0 */
		/* 821FE7BCh case    0:*/		cpu::op::cmplwi<0>(regs,regs.R19,0x00000000);
		/* 821FE7BCh case    0:*/		return 0x821FE7C0;
		  /* 821FE7C0h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821FE7C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FE7D4;  }
		/* 821FE7C0h case    1:*/		return 0x821FE7C4;
		  /* 821FE7C4h */ case    2:  		/* mr R5, R19 */
		/* 821FE7C4h case    2:*/		regs.R5 = regs.R19;
		/* 821FE7C4h case    2:*/		return 0x821FE7C8;
		  /* 821FE7C8h */ case    3:  		/* mr R4, R27 */
		/* 821FE7C8h case    3:*/		regs.R4 = regs.R27;
		/* 821FE7C8h case    3:*/		return 0x821FE7CC;
		  /* 821FE7CCh */ case    4:  		/* addi R3, R1, 2744 */
		/* 821FE7CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAB8);
		/* 821FE7CCh case    4:*/		return 0x821FE7D0;
		  /* 821FE7D0h */ case    5:  		/* bl -53232 */
		/* 821FE7D0h case    5:*/		regs.LR = 0x821FE7D4; return 0x821F17E0;
		/* 821FE7D0h case    5:*/		return 0x821FE7D4;
	}
	return 0x821FE7D4;
} // Block from 821FE7BCh-821FE7D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FE7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE7D4);
		  /* 821FE7D4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821FE7D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE7D4h case    0:*/		return 0x821FE7D8;
		  /* 821FE7D8h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821FE7D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FE7EC;  }
		/* 821FE7D8h case    1:*/		return 0x821FE7DC;
		  /* 821FE7DCh */ case    2:  		/* mr R5, R29 */
		/* 821FE7DCh case    2:*/		regs.R5 = regs.R29;
		/* 821FE7DCh case    2:*/		return 0x821FE7E0;
		  /* 821FE7E0h */ case    3:  		/* mr R4, R27 */
		/* 821FE7E0h case    3:*/		regs.R4 = regs.R27;
		/* 821FE7E0h case    3:*/		return 0x821FE7E4;
		  /* 821FE7E4h */ case    4:  		/* addi R3, R1, 3064 */
		/* 821FE7E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBF8);
		/* 821FE7E4h case    4:*/		return 0x821FE7E8;
		  /* 821FE7E8h */ case    5:  		/* bl -53256 */
		/* 821FE7E8h case    5:*/		regs.LR = 0x821FE7EC; return 0x821F17E0;
		/* 821FE7E8h case    5:*/		return 0x821FE7EC;
	}
	return 0x821FE7EC;
} // Block from 821FE7D4h-821FE7ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FE7ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE7EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE7EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE7EC);
		  /* 821FE7ECh */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821FE7ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821FE7ECh case    0:*/		return 0x821FE7F0;
		  /* 821FE7F0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821FE7F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FE808;  }
		/* 821FE7F0h case    1:*/		return 0x821FE7F4;
		  /* 821FE7F4h */ case    2:  		/* li R6, 0 */
		/* 821FE7F4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE7F4h case    2:*/		return 0x821FE7F8;
		  /* 821FE7F8h */ case    3:  		/* li R5, 40 */
		/* 821FE7F8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 821FE7F8h case    3:*/		return 0x821FE7FC;
		  /* 821FE7FCh */ case    4:  		/* mr R4, R20 */
		/* 821FE7FCh case    4:*/		regs.R4 = regs.R20;
		/* 821FE7FCh case    4:*/		return 0x821FE800;
		  /* 821FE800h */ case    5:  		/* mr R3, R31 */
		/* 821FE800h case    5:*/		regs.R3 = regs.R31;
		/* 821FE800h case    5:*/		return 0x821FE804;
		  /* 821FE804h */ case    6:  		/* bl -596404 */
		/* 821FE804h case    6:*/		regs.LR = 0x821FE808; return 0x8216CE50;
		/* 821FE804h case    6:*/		return 0x821FE808;
	}
	return 0x821FE808;
} // Block from 821FE7ECh-821FE808h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821FE808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE808);
		  /* 821FE808h */ case    0:  		/* rlwinm. R11, R18, 0, 24, 31 */
		/* 821FE808h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R18);
		/* 821FE808h case    0:*/		return 0x821FE80C;
		  /* 821FE80Ch */ case    1:  		/* bc 12, CR0_EQ, -9452 */
		/* 821FE80Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FE80Ch case    1:*/		return 0x821FE810;
		  /* 821FE810h */ case    2:  		/* lwz R5, <#[R1 + 3500]> */
		/* 821FE810h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FE810h case    2:*/		return 0x821FE814;
		  /* 821FE814h */ case    3:  		/* b -1272 */
		/* 821FE814h case    3:*/		return 0x821FE31C;
		/* 821FE814h case    3:*/		return 0x821FE818;
		  /* 821FE818h */ case    4:  		/* lwz R18, <#[R1 + 3500]> */
		/* 821FE818h case    4:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FE818h case    4:*/		return 0x821FE81C;
		  /* 821FE81Ch */ case    5:  		/* addi R3, R1, 144 */
		/* 821FE81Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 821FE81Ch case    5:*/		return 0x821FE820;
		  /* 821FE820h */ case    6:  		/* mr R4, R18 */
		/* 821FE820h case    6:*/		regs.R4 = regs.R18;
		/* 821FE820h case    6:*/		return 0x821FE824;
		  /* 821FE824h */ case    7:  		/* bl -41428 */
		/* 821FE824h case    7:*/		regs.LR = 0x821FE828; return 0x821F4650;
		/* 821FE824h case    7:*/		return 0x821FE828;
		  /* 821FE828h */ case    8:  		/* mr R3, R31 */
		/* 821FE828h case    8:*/		regs.R3 = regs.R31;
		/* 821FE828h case    8:*/		return 0x821FE82C;
		  /* 821FE82Ch */ case    9:  		/* lwz R4, <#[R14 + 32]> */
		/* 821FE82Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000020) );
		/* 821FE82Ch case    9:*/		return 0x821FE830;
		  /* 821FE830h */ case   10:  		/* bl -70616 */
		/* 821FE830h case   10:*/		regs.LR = 0x821FE834; return 0x821ED458;
		/* 821FE830h case   10:*/		return 0x821FE834;
		  /* 821FE834h */ case   11:  		/* divwu R11, R3, R29 */
		/* 821FE834h case   11:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R3,regs.R29);
		/* 821FE834h case   11:*/		return 0x821FE838;
		  /* 821FE838h */ case   12:  		/* mr R20, R3 */
		/* 821FE838h case   12:*/		regs.R20 = regs.R3;
		/* 821FE838h case   12:*/		return 0x821FE83C;
		  /* 821FE83Ch */ case   13:  		/* mullw R11, R11, R29 */
		/* 821FE83Ch case   13:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821FE83Ch case   13:*/		return 0x821FE840;
		  /* 821FE840h */ case   14:  		/* twi 6, R29, 0 */
		/* 821FE840h case   14:*/		cpu::op::tw<6>(regs, 0x821FE840, regs.R29, 0x00000000);
		/* 821FE840h case   14:*/		return 0x821FE844;
		  /* 821FE844h */ case   15:  		/* subf. R11, R11, R3 */
		/* 821FE844h case   15:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821FE844h case   15:*/		return 0x821FE848;
		  /* 821FE848h */ case   16:  		/* bc 4, CR0_EQ, 23776 */
		/* 821FE848h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82204528;  }
		/* 821FE848h case   16:*/		return 0x821FE84C;
		  /* 821FE84Ch */ case   17:  		/* mr R5, R3 */
		/* 821FE84Ch case   17:*/		regs.R5 = regs.R3;
		/* 821FE84Ch case   17:*/		return 0x821FE850;
		  /* 821FE850h */ case   18:  		/* mr R4, R18 */
		/* 821FE850h case   18:*/		regs.R4 = regs.R18;
		/* 821FE850h case   18:*/		return 0x821FE854;
		  /* 821FE854h */ case   19:  		/* addi R3, R1, 320 */
		/* 821FE854h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x140);
		/* 821FE854h case   19:*/		return 0x821FE858;
		  /* 821FE858h */ case   20:  		/* divwu R28, R5, R29 */
		/* 821FE858h case   20:*/		cpu::op::divwu<0>(regs,&regs.R28,regs.R5,regs.R29);
		/* 821FE858h case   20:*/		return 0x821FE85C;
		  /* 821FE85Ch */ case   21:  		/* twi 6, R29, 0 */
		/* 821FE85Ch case   21:*/		cpu::op::tw<6>(regs, 0x821FE85C, regs.R29, 0x00000000);
		/* 821FE85Ch case   21:*/		return 0x821FE860;
		  /* 821FE860h */ case   22:  		/* bl -34128 */
		/* 821FE860h case   22:*/		regs.LR = 0x821FE864; return 0x821F6310;
		/* 821FE860h case   22:*/		return 0x821FE864;
		  /* 821FE864h */ case   23:  		/* addi R5, R1, 1248 */
		/* 821FE864h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4E0);
		/* 821FE864h case   23:*/		return 0x821FE868;
		  /* 821FE868h */ case   24:  		/* addi R4, R1, 144 */
		/* 821FE868h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 821FE868h case   24:*/		return 0x821FE86C;
		  /* 821FE86Ch */ case   25:  		/* mr R3, R31 */
		/* 821FE86Ch case   25:*/		regs.R3 = regs.R31;
		/* 821FE86Ch case   25:*/		return 0x821FE870;
		  /* 821FE870h */ case   26:  		/* bl -72440 */
		/* 821FE870h case   26:*/		regs.LR = 0x821FE874; return 0x821ECD78;
		/* 821FE870h case   26:*/		return 0x821FE874;
		  /* 821FE874h */ case   27:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FE874h case   27:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FE874h case   27:*/		return 0x821FE878;
		  /* 821FE878h */ case   28:  		/* bc 12, CR0_EQ, 164 */
		/* 821FE878h case   28:*/		if ( regs.CR[0].eq ) { return 0x821FE91C;  }
		/* 821FE878h case   28:*/		return 0x821FE87C;
		  /* 821FE87Ch */ case   29:  		/* lfd FR0, <#[R1 + 1248]> */
		/* 821FE87Ch case   29:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000004E0) );
		/* 821FE87Ch case   29:*/		return 0x821FE880;
		  /* 821FE880h */ case   30:  		/* lfd FR13, <#[R1 + 1264]> */
		/* 821FE880h case   30:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000004F0) );
		/* 821FE880h case   30:*/		return 0x821FE884;
		  /* 821FE884h */ case   31:  		/* fcmpu CR6, FR0, FR13 */
		/* 821FE884h case   31:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821FE884h case   31:*/		return 0x821FE888;
		  /* 821FE888h */ case   32:  		/* bc 12, CR6_LT, 23724 */
		/* 821FE888h case   32:*/		if ( regs.CR[6].lt ) { return 0x82204534;  }
		/* 821FE888h case   32:*/		return 0x821FE88C;
		  /* 821FE88Ch */ case   33:  		/* rldicl R11, R28, 0, 32 */
		/* 821FE88Ch case   33:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R28);
		/* 821FE88Ch case   33:*/		return 0x821FE890;
		  /* 821FE890h */ case   34:  		/* std R11, <#[R1 + 1280]> */
		/* 821FE890h case   34:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000500) );
		/* 821FE890h case   34:*/		return 0x821FE894;
		  /* 821FE894h */ case   35:  		/* lfd FR13, <#[R1 + 1280]> */
		/* 821FE894h case   35:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000500) );
		/* 821FE894h case   35:*/		return 0x821FE898;
		  /* 821FE898h */ case   36:  		/* fcfid FR13, FR13 */
		/* 821FE898h case   36:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 821FE898h case   36:*/		return 0x821FE89C;
		  /* 821FE89Ch */ case   37:  		/* fcmpu CR6, FR0, FR13 */
		/* 821FE89Ch case   37:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821FE89Ch case   37:*/		return 0x821FE8A0;
		  /* 821FE8A0h */ case   38:  		/* bc 4, CR6_LT, 23700 */
		/* 821FE8A0h case   38:*/		if ( !regs.CR[6].lt ) { return 0x82204534;  }
		/* 821FE8A0h case   38:*/		return 0x821FE8A4;
		  /* 821FE8A4h */ case   39:  		/* fctidz FR0, FR0 */
		/* 821FE8A4h case   39:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 821FE8A4h case   39:*/		return 0x821FE8A8;
		  /* 821FE8A8h */ case   40:  		/* stfd FR0, <#[R1 + 96]> */
		/* 821FE8A8h case   40:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821FE8A8h case   40:*/		return 0x821FE8AC;
		  /* 821FE8ACh */ case   41:  		/* li R30, 0 */
		/* 821FE8ACh case   41:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FE8ACh case   41:*/		return 0x821FE8B0;
		  /* 821FE8B0h */ case   42:  		/* cmplwi CR6, R29, 0 */
		/* 821FE8B0h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE8B0h case   42:*/		return 0x821FE8B4;
		  /* 821FE8B4h */ case   43:  		/* lwz R11, <#[R1 + 100]> */
		/* 821FE8B4h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821FE8B4h case   43:*/		return 0x821FE8B8;
		  /* 821FE8B8h */ case   44:  		/* mullw R28, R11, R29 */
		/* 821FE8B8h case   44:*/		cpu::op::mullw<0>(regs,&regs.R28,regs.R11,regs.R29);
		/* 821FE8B8h case   44:*/		return 0x821FE8BC;
		  /* 821FE8BCh */ case   45:  		/* bc 12, CR6_EQ, 60 */
		/* 821FE8BCh case   45:*/		if ( regs.CR[6].eq ) { return 0x821FE8F8;  }
		/* 821FE8BCh case   45:*/		return 0x821FE8C0;
		  /* 821FE8C0h */ case   46:  		/* mr R4, R30 */
		/* 821FE8C0h case   46:*/		regs.R4 = regs.R30;
		/* 821FE8C0h case   46:*/		return 0x821FE8C4;
		  /* 821FE8C4h */ case   47:  		/* addi R3, R1, 320 */
		/* 821FE8C4h case   47:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x140);
		/* 821FE8C4h case   47:*/		return 0x821FE8C8;
		  /* 821FE8C8h */ case   48:  		/* bl -51856 */
		/* 821FE8C8h case   48:*/		regs.LR = 0x821FE8CC; return 0x821F1E38;
		/* 821FE8C8h case   48:*/		return 0x821FE8CC;
		  /* 821FE8CCh */ case   49:  		/* mr R27, R3 */
		/* 821FE8CCh case   49:*/		regs.R27 = regs.R3;
		/* 821FE8CCh case   49:*/		return 0x821FE8D0;
		  /* 821FE8D0h */ case   50:  		/* add R4, R30, R28 */
		/* 821FE8D0h case   50:*/		cpu::op::add<0>(regs,&regs.R4,regs.R30,regs.R28);
		/* 821FE8D0h case   50:*/		return 0x821FE8D4;
		  /* 821FE8D4h */ case   51:  		/* addi R3, R1, 320 */
		/* 821FE8D4h case   51:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x140);
		/* 821FE8D4h case   51:*/		return 0x821FE8D8;
		  /* 821FE8D8h */ case   52:  		/* bl -51872 */
		/* 821FE8D8h case   52:*/		regs.LR = 0x821FE8DC; return 0x821F1E38;
		/* 821FE8D8h case   52:*/		return 0x821FE8DC;
		  /* 821FE8DCh */ case   53:  		/* lwz R11, <#[R3]> */
		/* 821FE8DCh case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FE8DCh case   53:*/		return 0x821FE8E0;
		  /* 821FE8E0h */ case   54:  		/* addi R30, R30, 1 */
		/* 821FE8E0h case   54:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821FE8E0h case   54:*/		return 0x821FE8E4;
		  /* 821FE8E4h */ case   55:  		/* cmplw CR6, R30, R29 */
		/* 821FE8E4h case   55:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821FE8E4h case   55:*/		return 0x821FE8E8;
		  /* 821FE8E8h */ case   56:  		/* stw R11, <#[R27]> */
		/* 821FE8E8h case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821FE8E8h case   56:*/		return 0x821FE8EC;
		  /* 821FE8ECh */ case   57:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FE8ECh case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FE8ECh case   57:*/		return 0x821FE8F0;
		  /* 821FE8F0h */ case   58:  		/* stw R11, <#[R27 + 4]> */
		/* 821FE8F0h case   58:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821FE8F0h case   58:*/		return 0x821FE8F4;
		  /* 821FE8F4h */ case   59:  		/* bc 12, CR6_LT, -52 */
		/* 821FE8F4h case   59:*/		if ( regs.CR[6].lt ) { return 0x821FE8C0;  }
		/* 821FE8F4h case   59:*/		return 0x821FE8F8;
	}
	return 0x821FE8F8;
} // Block from 821FE808h-821FE8F8h (60 instructions)

//////////////////////////////////////////////////////
// Block at 821FE8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE8F8);
		  /* 821FE8F8h */ case    0:  		/* subf. R5, R29, R20 */
		/* 821FE8F8h case    0:*/		cpu::op::subf<1>(regs,&regs.R5,regs.R29,regs.R20);
		/* 821FE8F8h case    0:*/		return 0x821FE8FC;
		  /* 821FE8FCh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821FE8FCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821FE90C;  }
		/* 821FE8FCh case    1:*/		return 0x821FE900;
		  /* 821FE900h */ case    2:  		/* mr R4, R18 */
		/* 821FE900h case    2:*/		regs.R4 = regs.R18;
		/* 821FE900h case    2:*/		return 0x821FE904;
		  /* 821FE904h */ case    3:  		/* addi R3, R1, 2760 */
		/* 821FE904h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAC8);
		/* 821FE904h case    3:*/		return 0x821FE908;
		  /* 821FE908h */ case    4:  		/* bl -53544 */
		/* 821FE908h case    4:*/		regs.LR = 0x821FE90C; return 0x821F17E0;
		/* 821FE908h case    4:*/		return 0x821FE90C;
	}
	return 0x821FE90C;
} // Block from 821FE8F8h-821FE90Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821FE90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE90C);
		  /* 821FE90Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821FE90Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FE90Ch case    0:*/		return 0x821FE910;
		  /* 821FE910h */ case    1:  		/* bc 4, CR6_EQ, -9712 */
		/* 821FE910h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FE910h case    1:*/		return 0x821FE914;
		  /* 821FE914h */ case    2:  		/* mr R4, R18 */
		/* 821FE914h case    2:*/		regs.R4 = regs.R18;
		/* 821FE914h case    2:*/		return 0x821FE918;
		  /* 821FE918h */ case    3:  		/* b -3368 */
		/* 821FE918h case    3:*/		return 0x821FDBF0;
		/* 821FE918h case    3:*/		return 0x821FE91C;
	}
	return 0x821FE91C;
} // Block from 821FE90Ch-821FE91Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FE91Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE91C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE91C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE91C);
		  /* 821FE91Ch */ case    0:  		/* li R6, 0 */
		/* 821FE91Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FE91Ch case    0:*/		return 0x821FE920;
		  /* 821FE920h */ case    1:  		/* lwz R4, <#[R14 + 16]> */
		/* 821FE920h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x00000010) );
		/* 821FE920h case    1:*/		return 0x821FE924;
		  /* 821FE924h */ case    2:  		/* li R5, 0 */
		/* 821FE924h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FE924h case    2:*/		return 0x821FE928;
		  /* 821FE928h */ case    3:  		/* mr R3, R31 */
		/* 821FE928h case    3:*/		regs.R3 = regs.R31;
		/* 821FE928h case    3:*/		return 0x821FE92C;
		  /* 821FE92Ch */ case    4:  		/* bl -463292 */
		/* 821FE92Ch case    4:*/		regs.LR = 0x821FE930; return 0x8218D770;
		/* 821FE92Ch case    4:*/		return 0x821FE930;
		  /* 821FE930h */ case    5:  		/* mr R19, R3 */
		/* 821FE930h case    5:*/		regs.R19 = regs.R3;
		/* 821FE930h case    5:*/		return 0x821FE934;
		  /* 821FE934h */ case    6:  		/* li R30, 0 */
		/* 821FE934h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821FE934h case    6:*/		return 0x821FE938;
		  /* 821FE938h */ case    7:  		/* bl -30008 */
		/* 821FE938h case    7:*/		regs.LR = 0x821FE93C; return 0x821F7400;
		/* 821FE938h case    7:*/		return 0x821FE93C;
		  /* 821FE93Ch */ case    8:  		/* cmpwi CR6, R3, 33 */
		/* 821FE93Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000021);
		/* 821FE93Ch case    8:*/		return 0x821FE940;
		  /* 821FE940h */ case    9:  		/* bc 12, CR6_LT, 16 */
		/* 821FE940h case    9:*/		if ( regs.CR[6].lt ) { return 0x821FE950;  }
		/* 821FE940h case    9:*/		return 0x821FE944;
		  /* 821FE944h */ case   10:  		/* cmpwi CR6, R3, 37 */
		/* 821FE944h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000025);
		/* 821FE944h case   10:*/		return 0x821FE948;
		  /* 821FE948h */ case   11:  		/* bc 12, CR6_GT, 8 */
		/* 821FE948h case   11:*/		if ( regs.CR[6].gt ) { return 0x821FE950;  }
		/* 821FE948h case   11:*/		return 0x821FE94C;
		  /* 821FE94Ch */ case   12:  		/* li R30, 1 */
		/* 821FE94Ch case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821FE94Ch case   12:*/		return 0x821FE950;
	}
	return 0x821FE950;
} // Block from 821FE91Ch-821FE950h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821FE950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FE950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FE950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FE950);
		  /* 821FE950h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821FE950h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821FE950h case    0:*/		return 0x821FE954;
		  /* 821FE954h */ case    1:  		/* bc 12, CR6_EQ, 308 */
		/* 821FE954h case    1:*/		if ( regs.CR[6].eq ) { return 0x821FEA88;  }
		/* 821FE954h case    1:*/		return 0x821FE958;
		  /* 821FE958h */ case    2:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821FE958h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821FE958h case    2:*/		return 0x821FE95C;
		  /* 821FE95Ch */ case    3:  		/* bc 4, CR0_EQ, 23524 */
		/* 821FE95Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82204540;  }
		/* 821FE95Ch case    3:*/		return 0x821FE960;
		  /* 821FE960h */ case    4:  		/* cmplwi CR6, R28, 1 */
		/* 821FE960h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 821FE960h case    4:*/		return 0x821FE964;
		  /* 821FE964h */ case    5:  		/* bc 4, CR6_GT, 844 */
		/* 821FE964h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821FECB0;  }
		/* 821FE964h case    5:*/		return 0x821FE968;
		  /* 821FE968h */ case    6:  		/* rldicl R11, R29, 0, 32 */
		/* 821FE968h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R29);
		/* 821FE968h case    6:*/		return 0x821FE96C;
		  /* 821FE96Ch */ case    7:  		/* fmr FR4, FR31 */
		/* 821FE96Ch case    7:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FE96Ch case    7:*/		return 0x821FE970;
		  /* 821FE970h */ case    8:  		/* li R5, 1 */
		/* 821FE970h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FE970h case    8:*/		return 0x821FE974;
		  /* 821FE974h */ case    9:  		/* fmr FR3, FR31 */
		/* 821FE974h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FE974h case    9:*/		return 0x821FE978;
		  /* 821FE978h */ case   10:  		/* std R11, <#[R1 + 1296]> */
		/* 821FE978h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000510) );
		/* 821FE978h case   10:*/		return 0x821FE97C;
		  /* 821FE97Ch */ case   11:  		/* mr R4, R31 */
		/* 821FE97Ch case   11:*/		regs.R4 = regs.R31;
		/* 821FE97Ch case   11:*/		return 0x821FE980;
		  /* 821FE980h */ case   12:  		/* addi R3, R1, 2968 */
		/* 821FE980h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB98);
		/* 821FE980h case   12:*/		return 0x821FE984;
		  /* 821FE984h */ case   13:  		/* fmr FR2, FR31 */
		/* 821FE984h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FE984h case   13:*/		return 0x821FE988;
		  /* 821FE988h */ case   14:  		/* lfd FR0, <#[R1 + 1296]> */
		/* 821FE988h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000510) );
		/* 821FE988h case   14:*/		return 0x821FE98C;
		  /* 821FE98Ch */ case   15:  		/* fcfid FR0, FR0 */
		/* 821FE98Ch case   15:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821FE98Ch case   15:*/		return 0x821FE990;
		  /* 821FE990h */ case   16:  		/* frsp FR1, FR0 */
		/* 821FE990h case   16:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 821FE990h case   16:*/		return 0x821FE994;
		  /* 821FE994h */ case   17:  		/* bl 165052 */
		/* 821FE994h case   17:*/		regs.LR = 0x821FE998; return 0x82226E50;
		/* 821FE994h case   17:*/		return 0x821FE998;
		  /* 821FE998h */ case   18:  		/* mr R11, R3 */
		/* 821FE998h case   18:*/		regs.R11 = regs.R3;
		/* 821FE998h case   18:*/		return 0x821FE99C;
		  /* 821FE99Ch */ case   19:  		/* ld R4, <#[R1 + 144]> */
		/* 821FE99Ch case   19:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 821FE99Ch case   19:*/		return 0x821FE9A0;
		  /* 821FE9A0h */ case   20:  		/* mr R3, R31 */
		/* 821FE9A0h case   20:*/		regs.R3 = regs.R31;
		/* 821FE9A0h case   20:*/		return 0x821FE9A4;
		  /* 821FE9A4h */ case   21:  		/* ld R5, <#[R11]> */
		/* 821FE9A4h case   21:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 821FE9A4h case   21:*/		return 0x821FE9A8;
		  /* 821FE9A8h */ case   22:  		/* bl -44272 */
		/* 821FE9A8h case   22:*/		regs.LR = 0x821FE9AC; return 0x821F3CB8;
		/* 821FE9A8h case   22:*/		return 0x821FE9AC;
		  /* 821FE9ACh */ case   23:  		/* lwz R10, <#[R1 + 148]> */
		/* 821FE9ACh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 821FE9ACh case   23:*/		return 0x821FE9B0;
		  /* 821FE9B0h */ case   24:  		/* rlwinm R11, R28, 3, 0, 28 */
		/* 821FE9B0h case   24:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R28);
		/* 821FE9B0h case   24:*/		return 0x821FE9B4;
		  /* 821FE9B4h */ case   25:  		/* stw R3, <#[R1 + 144]> */
		/* 821FE9B4h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 821FE9B4h case   25:*/		return 0x821FE9B8;
		  /* 821FE9B8h */ case   26:  		/* li R24, 0 */
		/* 821FE9B8h case   26:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821FE9B8h case   26:*/		return 0x821FE9BC;
		  /* 821FE9BCh */ case   27:  		/* rlwinm R10, R10, 0, 15, 15 */
		/* 821FE9BCh case   27:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R10,regs.R10);
		/* 821FE9BCh case   27:*/		return 0x821FE9C0;
		  /* 821FE9C0h */ case   28:  		/* addi R21, R11, 12 */
		/* 821FE9C0h case   28:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0xC);
		/* 821FE9C0h case   28:*/		return 0x821FE9C4;
		  /* 821FE9C4h */ case   29:  		/* ori R11, R10, 1 */
		/* 821FE9C4h case   29:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0x1);
		/* 821FE9C4h case   29:*/		return 0x821FE9C8;
		  /* 821FE9C8h */ case   30:  		/* cmplwi CR6, R29, 0 */
		/* 821FE9C8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FE9C8h case   30:*/		return 0x821FE9CC;
		  /* 821FE9CCh */ case   31:  		/* stw R11, <#[R1 + 148]> */
		/* 821FE9CCh case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821FE9CCh case   31:*/		return 0x821FE9D0;
		  /* 821FE9D0h */ case   32:  		/* bc 12, CR6_EQ, 168 */
		/* 821FE9D0h case   32:*/		if ( regs.CR[6].eq ) { return 0x821FEA78;  }
		/* 821FE9D0h case   32:*/		return 0x821FE9D4;
		  /* 821FE9D4h */ case   33:  		/* rlwinm R23, R29, 0, 18, 31 */
		/* 821FE9D4h case   33:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R23,regs.R29);
		/* 821FE9D4h case   33:*/		return 0x821FE9D8;
		  /* 821FE9D8h */ case   34:  		/* rlwinm R22, R28, 14, 4, 17 */
		/* 821FE9D8h case   34:*/		cpu::op::rlwinm<0,14,4,17>(regs,&regs.R22,regs.R28);
		/* 821FE9D8h case   34:*/		return 0x821FE9DC;
		  /* 821FE9DCh */ case   35:  		/* li R5, 32 */
		/* 821FE9DCh case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 821FE9DCh case   35:*/		return 0x821FE9E0;
		  /* 821FE9E0h */ case   36:  		/* mr R4, R21 */
		/* 821FE9E0h case   36:*/		regs.R4 = regs.R21;
		/* 821FE9E0h case   36:*/		return 0x821FE9E4;
		  /* 821FE9E4h */ case   37:  		/* mr R3, R31 */
		/* 821FE9E4h case   37:*/		regs.R3 = regs.R31;
		/* 821FE9E4h case   37:*/		return 0x821FE9E8;
		  /* 821FE9E8h */ case   38:  		/* bl -629168 */
		/* 821FE9E8h case   38:*/		regs.LR = 0x821FE9EC; return 0x82165038;
		/* 821FE9E8h case   38:*/		return 0x821FE9EC;
		  /* 821FE9ECh */ case   39:  		/* ld R11, <#[R1 + 144]> */
		/* 821FE9ECh case   39:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 821FE9ECh case   39:*/		return 0x821FE9F0;
		  /* 821FE9F0h */ case   40:  		/* mr R30, R3 */
		/* 821FE9F0h case   40:*/		regs.R30 = regs.R3;
		/* 821FE9F0h case   40:*/		return 0x821FE9F4;
		  /* 821FE9F4h */ case   41:  		/* cmplwi CR6, R28, 0 */
		/* 821FE9F4h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FE9F4h case   41:*/		return 0x821FE9F8;
		  /* 821FE9F8h */ case   42:  		/* std R11, <#[R3]> */
		/* 821FE9F8h case   42:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FE9F8h case   42:*/		return 0x821FE9FC;
		  /* 821FE9FCh */ case   43:  		/* lwz R11, <#[R3 + 8]> */
		/* 821FE9FCh case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821FE9FCh case   43:*/		return 0x821FEA00;
		  /* 821FEA00h */ case   44:  		/* rlwinm R11, R11, 0, 0, 17 */
		/* 821FEA00h case   44:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R11,regs.R11);
		/* 821FEA00h case   44:*/		return 0x821FEA04;
		  /* 821FEA04h */ case   45:  		/* or R11, R11, R23 */
		/* 821FEA04h case   45:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 821FEA04h case   45:*/		return 0x821FEA08;
		  /* 821FEA08h */ case   46:  		/* rlwinm R11, R11, 0, 18, 3 */
		/* 821FEA08h case   46:*/		cpu::op::rlwinm<0,0,18,3>(regs,&regs.R11,regs.R11);
		/* 821FEA08h case   46:*/		return 0x821FEA0C;
		  /* 821FEA0Ch */ case   47:  		/* or R11, R11, R22 */
		/* 821FEA0Ch case   47:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R22);
		/* 821FEA0Ch case   47:*/		return 0x821FEA10;
		  /* 821FEA10h */ case   48:  		/* stw R11, <#[R3 + 8]> */
		/* 821FEA10h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821FEA10h case   48:*/		return 0x821FEA14;
		  /* 821FEA14h */ case   49:  		/* bc 12, CR6_EQ, 56 */
		/* 821FEA14h case   49:*/		if ( regs.CR[6].eq ) { return 0x821FEA4C;  }
		/* 821FEA14h case   49:*/		return 0x821FEA18;
		  /* 821FEA18h */ case   50:  		/* mr R26, R24 */
		/* 821FEA18h case   50:*/		regs.R26 = regs.R24;
		/* 821FEA18h case   50:*/		return 0x821FEA1C;
		  /* 821FEA1Ch */ case   51:  		/* addi R25, R3, 4 */
		/* 821FEA1Ch case   51:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 821FEA1Ch case   51:*/		return 0x821FEA20;
		  /* 821FEA20h */ case   52:  		/* mr R27, R28 */
		/* 821FEA20h case   52:*/		regs.R27 = regs.R28;
		/* 821FEA20h case   52:*/		return 0x821FEA24;
		  /* 821FEA24h */ case   53:  		/* mr R4, R26 */
		/* 821FEA24h case   53:*/		regs.R4 = regs.R26;
		/* 821FEA24h case   53:*/		return 0x821FEA28;
		  /* 821FEA28h */ case   54:  		/* addi R3, R1, 320 */
		/* 821FEA28h case   54:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x140);
		/* 821FEA28h case   54:*/		return 0x821FEA2C;
		  /* 821FEA2Ch */ case   55:  		/* bl -52212 */
		/* 821FEA2Ch case   55:*/		regs.LR = 0x821FEA30; return 0x821F1E38;
		/* 821FEA2Ch case   55:*/		return 0x821FEA30;
		  /* 821FEA30h */ case   56:  		/* lwz R11, <#[R3]> */
		/* 821FEA30h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821FEA30h case   56:*/		return 0x821FEA34;
		  /* 821FEA34h */ case   57:  		/* addic. R27, R27, -1 */
		/* 821FEA34h case   57:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821FEA34h case   57:*/		return 0x821FEA38;
		  /* 821FEA38h */ case   58:  		/* add R26, R29, R26 */
		/* 821FEA38h case   58:*/		cpu::op::add<0>(regs,&regs.R26,regs.R29,regs.R26);
		/* 821FEA38h case   58:*/		return 0x821FEA3C;
		  /* 821FEA3Ch */ case   59:  		/* stwu R11, <#[R25 + 8]> */
		/* 821FEA3Ch case   59:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		regs.R25 = (uint32)(regs.R25 + 0x00000008);
		/* 821FEA3Ch case   59:*/		return 0x821FEA40;
		  /* 821FEA40h */ case   60:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FEA40h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FEA40h case   60:*/		return 0x821FEA44;
		  /* 821FEA44h */ case   61:  		/* stw R11, <#[R25 + 4]> */
		/* 821FEA44h case   61:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821FEA44h case   61:*/		return 0x821FEA48;
		  /* 821FEA48h */ case   62:  		/* bc 4, CR0_EQ, -36 */
		/* 821FEA48h case   62:*/		if ( !regs.CR[0].eq ) { return 0x821FEA24;  }
		/* 821FEA48h case   62:*/		return 0x821FEA4C;
	}
	return 0x821FEA4C;
} // Block from 821FE950h-821FEA4Ch (63 instructions)

//////////////////////////////////////////////////////
// Block at 821FEA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEA4C);
		  /* 821FEA4Ch */ case    0:  		/* mr R4, R24 */
		/* 821FEA4Ch case    0:*/		regs.R4 = regs.R24;
		/* 821FEA4Ch case    0:*/		return 0x821FEA50;
		  /* 821FEA50h */ case    1:  		/* addi R3, R1, 320 */
		/* 821FEA50h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x140);
		/* 821FEA50h case    1:*/		return 0x821FEA54;
		  /* 821FEA54h */ case    2:  		/* bl -52252 */
		/* 821FEA54h case    2:*/		regs.LR = 0x821FEA58; return 0x821F1E38;
		/* 821FEA54h case    2:*/		return 0x821FEA58;
		  /* 821FEA58h */ case    3:  		/* stw R30, <#[R3]> */
		/* 821FEA58h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 821FEA58h case    3:*/		return 0x821FEA5C;
		  /* 821FEA5Ch */ case    4:  		/* addi R24, R24, 1 */
		/* 821FEA5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821FEA5Ch case    4:*/		return 0x821FEA60;
		  /* 821FEA60h */ case    5:  		/* cmplw CR6, R24, R29 */
		/* 821FEA60h case    5:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R29);
		/* 821FEA60h case    5:*/		return 0x821FEA64;
		  /* 821FEA64h */ case    6:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FEA64h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FEA64h case    6:*/		return 0x821FEA68;
		  /* 821FEA68h */ case    7:  		/* oris R11, R11, 1 */
		/* 821FEA68h case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FEA68h case    7:*/		return 0x821FEA6C;
		  /* 821FEA6Ch */ case    8:  		/* ori R11, R11, 3 */
		/* 821FEA6Ch case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3);
		/* 821FEA6Ch case    8:*/		return 0x821FEA70;
		  /* 821FEA70h */ case    9:  		/* stw R11, <#[R3 + 4]> */
		/* 821FEA70h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FEA70h case    9:*/		return 0x821FEA74;
		  /* 821FEA74h */ case   10:  		/* bc 12, CR6_LT, -152 */
		/* 821FEA74h case   10:*/		if ( regs.CR[6].lt ) { return 0x821FE9DC;  }
		/* 821FEA74h case   10:*/		return 0x821FEA78;
	}
	return 0x821FEA78;
} // Block from 821FEA4Ch-821FEA78h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FEA78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEA78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEA78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEA78);
		  /* 821FEA78h */ case    0:  		/* subf. R5, R29, R20 */
		/* 821FEA78h case    0:*/		cpu::op::subf<1>(regs,&regs.R5,regs.R29,regs.R20);
		/* 821FEA78h case    0:*/		return 0x821FEA7C;
		  /* 821FEA7Ch */ case    1:  		/* bc 12, CR0_EQ, 564 */
		/* 821FEA7Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821FECB0;  }
		/* 821FEA7Ch case    1:*/		return 0x821FEA80;
		  /* 821FEA80h */ case    2:  		/* addi R3, R1, 2776 */
		/* 821FEA80h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAD8);
		/* 821FEA80h case    2:*/		return 0x821FEA84;
		  /* 821FEA84h */ case    3:  		/* b 548 */
		/* 821FEA84h case    3:*/		return 0x821FECA8;
		/* 821FEA84h case    3:*/		return 0x821FEA88;
	}
	return 0x821FEA88;
} // Block from 821FEA78h-821FEA88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FEA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEA88);
		  /* 821FEA88h */ case    0:  		/* li R24, 0 */
		/* 821FEA88h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821FEA88h case    0:*/		return 0x821FEA8C;
		  /* 821FEA8Ch */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821FEA8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FEA8Ch case    1:*/		return 0x821FEA90;
		  /* 821FEA90h */ case    2:  		/* bc 12, CR6_EQ, 524 */
		/* 821FEA90h case    2:*/		if ( regs.CR[6].eq ) { return 0x821FEC9C;  }
		/* 821FEA90h case    2:*/		return 0x821FEA94;
		  /* 821FEA94h */ case    3:  		/* rlwinm R23, R30, 0, 24, 31 */
		/* 821FEA94h case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R23,regs.R30);
		/* 821FEA94h case    3:*/		return 0x821FEA98;
		  /* 821FEA98h */ case    4:  		/* li R22, 1 */
		/* 821FEA98h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821FEA98h case    4:*/		return 0x821FEA9C;
		  /* 821FEA9Ch */ case    5:  		/* cmplwi CR6, R23, 0 */
		/* 821FEA9Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821FEA9Ch case    5:*/		return 0x821FEAA0;
		  /* 821FEAA0h */ case    6:  		/* bc 4, CR6_EQ, 40 */
		/* 821FEAA0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821FEAC8;  }
		/* 821FEAA0h case    6:*/		return 0x821FEAA4;
		  /* 821FEAA4h */ case    7:  		/* mr R8, R24 */
		/* 821FEAA4h case    7:*/		regs.R8 = regs.R24;
		/* 821FEAA4h case    7:*/		return 0x821FEAA8;
		  /* 821FEAA8h */ case    8:  		/* ld R5, <#[R1 + 144]> */
		/* 821FEAA8h case    8:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 821FEAA8h case    8:*/		return 0x821FEAAC;
		  /* 821FEAACh */ case    9:  		/* mr R7, R29 */
		/* 821FEAACh case    9:*/		regs.R7 = regs.R29;
		/* 821FEAACh case    9:*/		return 0x821FEAB0;
		  /* 821FEAB0h */ case   10:  		/* mr R6, R28 */
		/* 821FEAB0h case   10:*/		regs.R6 = regs.R28;
		/* 821FEAB0h case   10:*/		return 0x821FEAB4;
		  /* 821FEAB4h */ case   11:  		/* addi R4, R1, 320 */
		/* 821FEAB4h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x140);
		/* 821FEAB4h case   11:*/		return 0x821FEAB8;
		  /* 821FEAB8h */ case   12:  		/* mr R3, R31 */
		/* 821FEAB8h case   12:*/		regs.R3 = regs.R31;
		/* 821FEAB8h case   12:*/		return 0x821FEABC;
		  /* 821FEABCh */ case   13:  		/* bl -36492 */
		/* 821FEABCh case   13:*/		regs.LR = 0x821FEAC0; return 0x821F5C30;
		/* 821FEABCh case   13:*/		return 0x821FEAC0;
		  /* 821FEAC0h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FEAC0h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FEAC0h case   14:*/		return 0x821FEAC4;
		  /* 821FEAC4h */ case   15:  		/* bc 4, CR0_EQ, 460 */
		/* 821FEAC4h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821FEC90;  }
		/* 821FEAC4h case   15:*/		return 0x821FEAC8;
	}
	return 0x821FEAC8;
} // Block from 821FEA88h-821FEAC8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821FEAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEAC8);
		  /* 821FEAC8h */ case    0:  		/* li R5, 0 */
		/* 821FEAC8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FEAC8h case    0:*/		return 0x821FEACC;
		  /* 821FEACCh */ case    1:  		/* rlwinm R4, R28, 2, 0, 29 */
		/* 821FEACCh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R28);
		/* 821FEACCh case    1:*/		return 0x821FEAD0;
		  /* 821FEAD0h */ case    2:  		/* mr R3, R31 */
		/* 821FEAD0h case    2:*/		regs.R3 = regs.R31;
		/* 821FEAD0h case    2:*/		return 0x821FEAD4;
		  /* 821FEAD4h */ case    3:  		/* bl -468140 */
		/* 821FEAD4h case    3:*/		regs.LR = 0x821FEAD8; return 0x8218C628;
		/* 821FEAD4h case    3:*/		return 0x821FEAD8;
		  /* 821FEAD8h */ case    4:  		/* mr R25, R3 */
		/* 821FEAD8h case    4:*/		regs.R25 = regs.R3;
		/* 821FEAD8h case    4:*/		return 0x821FEADC;
		  /* 821FEADCh */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821FEADCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FEADCh case    5:*/		return 0x821FEAE0;
		  /* 821FEAE0h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 821FEAE0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FEB18;  }
		/* 821FEAE0h case    6:*/		return 0x821FEAE4;
		  /* 821FEAE4h */ case    7:  		/* addi R26, R3, -4 */
		/* 821FEAE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0xFFFFFFFC);
		/* 821FEAE4h case    7:*/		return 0x821FEAE8;
		  /* 821FEAE8h */ case    8:  		/* mr R27, R24 */
		/* 821FEAE8h case    8:*/		regs.R27 = regs.R24;
		/* 821FEAE8h case    8:*/		return 0x821FEAEC;
		  /* 821FEAECh */ case    9:  		/* mr R30, R28 */
		/* 821FEAECh case    9:*/		regs.R30 = regs.R28;
		/* 821FEAECh case    9:*/		return 0x821FEAF0;
		  /* 821FEAF0h */ case   10:  		/* mr R4, R27 */
		/* 821FEAF0h case   10:*/		regs.R4 = regs.R27;
		/* 821FEAF0h case   10:*/		return 0x821FEAF4;
		  /* 821FEAF4h */ case   11:  		/* addi R3, R1, 320 */
		/* 821FEAF4h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x140);
		/* 821FEAF4h case   11:*/		return 0x821FEAF8;
		  /* 821FEAF8h */ case   12:  		/* bl -52416 */
		/* 821FEAF8h case   12:*/		regs.LR = 0x821FEAFC; return 0x821F1E38;
		/* 821FEAF8h case   12:*/		return 0x821FEAFC;
		  /* 821FEAFCh */ case   13:  		/* mr R4, R3 */
		/* 821FEAFCh case   13:*/		regs.R4 = regs.R3;
		/* 821FEAFCh case   13:*/		return 0x821FEB00;
		  /* 821FEB00h */ case   14:  		/* mr R3, R31 */
		/* 821FEB00h case   14:*/		regs.R3 = regs.R31;
		/* 821FEB00h case   14:*/		return 0x821FEB04;
		  /* 821FEB04h */ case   15:  		/* bl -51076 */
		/* 821FEB04h case   15:*/		regs.LR = 0x821FEB08; return 0x821F2380;
		/* 821FEB04h case   15:*/		return 0x821FEB08;
		  /* 821FEB08h */ case   16:  		/* addic. R30, R30, -1 */
		/* 821FEB08h case   16:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821FEB08h case   16:*/		return 0x821FEB0C;
		  /* 821FEB0Ch */ case   17:  		/* stwu R3, <#[R26 + 4]> */
		/* 821FEB0Ch case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821FEB0Ch case   17:*/		return 0x821FEB10;
		  /* 821FEB10h */ case   18:  		/* add R27, R29, R27 */
		/* 821FEB10h case   18:*/		cpu::op::add<0>(regs,&regs.R27,regs.R29,regs.R27);
		/* 821FEB10h case   18:*/		return 0x821FEB14;
		  /* 821FEB14h */ case   19:  		/* bc 4, CR0_EQ, -36 */
		/* 821FEB14h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821FEAF0;  }
		/* 821FEB14h case   19:*/		return 0x821FEB18;
	}
	return 0x821FEB18;
} // Block from 821FEAC8h-821FEB18h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821FEB18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEB18);
		  /* 821FEB18h */ case    0:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FEB18h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FEB18h case    0:*/		return 0x821FEB1C;
		  /* 821FEB1Ch */ case    1:  		/* li R8, 1 */
		/* 821FEB1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FEB1Ch case    1:*/		return 0x821FEB20;
		  /* 821FEB20h */ case    2:  		/* li R7, 0 */
		/* 821FEB20h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FEB20h case    2:*/		return 0x821FEB24;
		  /* 821FEB24h */ case    3:  		/* addi R5, R4, 24 */
		/* 821FEB24h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FEB24h case    3:*/		return 0x821FEB28;
		  /* 821FEB28h */ case    4:  		/* li R6, 119 */
		/* 821FEB28h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x77);
		/* 821FEB28h case    4:*/		return 0x821FEB2C;
		  /* 821FEB2Ch */ case    5:  		/* mr R3, R31 */
		/* 821FEB2Ch case    5:*/		regs.R3 = regs.R31;
		/* 821FEB2Ch case    5:*/		return 0x821FEB30;
		  /* 821FEB30h */ case    6:  		/* bl 155240 */
		/* 821FEB30h case    6:*/		regs.LR = 0x821FEB34; return 0x82224998;
		/* 821FEB30h case    6:*/		return 0x821FEB34;
		  /* 821FEB34h */ case    7:  		/* mr R30, R3 */
		/* 821FEB34h case    7:*/		regs.R30 = regs.R3;
		/* 821FEB34h case    7:*/		return 0x821FEB38;
		  /* 821FEB38h */ case    8:  		/* li R6, 0 */
		/* 821FEB38h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FEB38h case    8:*/		return 0x821FEB3C;
		  /* 821FEB3Ch */ case    9:  		/* li R5, 0 */
		/* 821FEB3Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FEB3Ch case    9:*/		return 0x821FEB40;
		  /* 821FEB40h */ case   10:  		/* li R4, 119 */
		/* 821FEB40h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x77);
		/* 821FEB40h case   10:*/		return 0x821FEB44;
		  /* 821FEB44h */ case   11:  		/* mr R3, R31 */
		/* 821FEB44h case   11:*/		regs.R3 = regs.R31;
		/* 821FEB44h case   11:*/		return 0x821FEB48;
		  /* 821FEB48h */ case   12:  		/* bl -632600 */
		/* 821FEB48h case   12:*/		regs.LR = 0x821FEB4C; return 0x82164430;
		/* 821FEB48h case   12:*/		return 0x821FEB4C;
		  /* 821FEB4Ch */ case   13:  		/* addi R11, R30, -12 */
		/* 821FEB4Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF4);
		/* 821FEB4Ch case   13:*/		return 0x821FEB50;
		  /* 821FEB50h */ case   14:  		/* cmplwi CR6, R28, 0 */
		/* 821FEB50h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FEB50h case   14:*/		return 0x821FEB54;
		  /* 821FEB54h */ case   15:  		/* add R11, R3, R11 */
		/* 821FEB54h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821FEB54h case   15:*/		return 0x821FEB58;
		  /* 821FEB58h */ case   16:  		/* stw R28, <#[R11 + 4]> */
		/* 821FEB58h case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 821FEB58h case   16:*/		return 0x821FEB5C;
		  /* 821FEB5Ch */ case   17:  		/* stw R25, <#[R11 + 8]> */
		/* 821FEB5Ch case   17:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000008) );
		/* 821FEB5Ch case   17:*/		return 0x821FEB60;
		  /* 821FEB60h */ case   18:  		/* lwz R11, <#[R31 + 40]> */
		/* 821FEB60h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FEB60h case   18:*/		return 0x821FEB64;
		  /* 821FEB64h */ case   19:  		/* ori R11, R11, 8192 */
		/* 821FEB64h case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821FEB64h case   19:*/		return 0x821FEB68;
		  /* 821FEB68h */ case   20:  		/* stw R11, <#[R31 + 40]> */
		/* 821FEB68h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821FEB68h case   20:*/		return 0x821FEB6C;
		  /* 821FEB6Ch */ case   21:  		/* bc 12, CR6_EQ, 36 */
		/* 821FEB6Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x821FEB90;  }
		/* 821FEB6Ch case   21:*/		return 0x821FEB70;
		  /* 821FEB70h */ case   22:  		/* addi R26, R25, -4 */
		/* 821FEB70h case   22:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R25,0xFFFFFFFC);
		/* 821FEB70h case   22:*/		return 0x821FEB74;
		  /* 821FEB74h */ case   23:  		/* mr R27, R28 */
		/* 821FEB74h case   23:*/		regs.R27 = regs.R28;
		/* 821FEB74h case   23:*/		return 0x821FEB78;
		  /* 821FEB78h */ case   24:  		/* mr R3, R30 */
		/* 821FEB78h case   24:*/		regs.R3 = regs.R30;
		/* 821FEB78h case   24:*/		return 0x821FEB7C;
		  /* 821FEB7Ch */ case   25:  		/* lwz R4, <#[R26 + 4]> */
		/* 821FEB7Ch case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000004) );
		/* 821FEB7Ch case   25:*/		return 0x821FEB80;
		  /* 821FEB80h */ case   26:  		/* bl -551352 */
		/* 821FEB80h case   26:*/		regs.LR = 0x821FEB84; return 0x821781C8;
		/* 821FEB80h case   26:*/		return 0x821FEB84;
		  /* 821FEB84h */ case   27:  		/* addic. R27, R27, -1 */
		/* 821FEB84h case   27:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821FEB84h case   27:*/		return 0x821FEB88;
		  /* 821FEB88h */ case   28:  		/* stwu R3, <#[R26 + 4]> */
		/* 821FEB88h case   28:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821FEB88h case   28:*/		return 0x821FEB8C;
		  /* 821FEB8Ch */ case   29:  		/* bc 4, CR0_EQ, -20 */
		/* 821FEB8Ch case   29:*/		if ( !regs.CR[0].eq ) { return 0x821FEB78;  }
		/* 821FEB8Ch case   29:*/		return 0x821FEB90;
	}
	return 0x821FEB90;
} // Block from 821FEB18h-821FEB90h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821FEB90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEB90);
		  /* 821FEB90h */ case    0:  		/* addi R4, R1, 144 */
		/* 821FEB90h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 821FEB90h case    0:*/		return 0x821FEB94;
		  /* 821FEB94h */ case    1:  		/* mr R3, R31 */
		/* 821FEB94h case    1:*/		regs.R3 = regs.R31;
		/* 821FEB94h case    1:*/		return 0x821FEB98;
		  /* 821FEB98h */ case    2:  		/* bl -51224 */
		/* 821FEB98h case    2:*/		regs.LR = 0x821FEB9C; return 0x821F2380;
		/* 821FEB98h case    2:*/		return 0x821FEB9C;
		  /* 821FEB9Ch */ case    3:  		/* mr R4, R3 */
		/* 821FEB9Ch case    3:*/		regs.R4 = regs.R3;
		/* 821FEB9Ch case    3:*/		return 0x821FEBA0;
		  /* 821FEBA0h */ case    4:  		/* mr R3, R31 */
		/* 821FEBA0h case    4:*/		regs.R3 = regs.R31;
		/* 821FEBA0h case    4:*/		return 0x821FEBA4;
		  /* 821FEBA4h */ case    5:  		/* bl -65884 */
		/* 821FEBA4h case    5:*/		regs.LR = 0x821FEBA8; return 0x821EEA48;
		/* 821FEBA4h case    5:*/		return 0x821FEBA8;
		  /* 821FEBA8h */ case    6:  		/* mr R4, R3 */
		/* 821FEBA8h case    6:*/		regs.R4 = regs.R3;
		/* 821FEBA8h case    6:*/		return 0x821FEBAC;
		  /* 821FEBACh */ case    7:  		/* li R7, 0 */
		/* 821FEBACh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FEBACh case    7:*/		return 0x821FEBB0;
		  /* 821FEBB0h */ case    8:  		/* li R6, 224 */
		/* 821FEBB0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0xE0);
		/* 821FEBB0h case    8:*/		return 0x821FEBB4;
		  /* 821FEBB4h */ case    9:  		/* li R5, 2 */
		/* 821FEBB4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821FEBB4h case    9:*/		return 0x821FEBB8;
		  /* 821FEBB8h */ case   10:  		/* mr R3, R31 */
		/* 821FEBB8h case   10:*/		regs.R3 = regs.R31;
		/* 821FEBB8h case   10:*/		return 0x821FEBBC;
		  /* 821FEBBCh */ case   11:  		/* bl -551676 */
		/* 821FEBBCh case   11:*/		regs.LR = 0x821FEBC0; return 0x821780C0;
		/* 821FEBBCh case   11:*/		return 0x821FEBC0;
		  /* 821FEBC0h */ case   12:  		/* mr R4, R3 */
		/* 821FEBC0h case   12:*/		regs.R4 = regs.R3;
		/* 821FEBC0h case   12:*/		return 0x821FEBC4;
		  /* 821FEBC4h */ case   13:  		/* mr R3, R31 */
		/* 821FEBC4h case   13:*/		regs.R3 = regs.R31;
		/* 821FEBC4h case   13:*/		return 0x821FEBC8;
		  /* 821FEBC8h */ case   14:  		/* bl -63800 */
		/* 821FEBC8h case   14:*/		regs.LR = 0x821FEBCC; return 0x821EF290;
		/* 821FEBC8h case   14:*/		return 0x821FEBCC;
		  /* 821FEBCCh */ case   15:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FEBCCh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FEBCCh case   15:*/		return 0x821FEBD0;
		  /* 821FEBD0h */ case   16:  		/* mr R27, R3 */
		/* 821FEBD0h case   16:*/		regs.R27 = regs.R3;
		/* 821FEBD0h case   16:*/		return 0x821FEBD4;
		  /* 821FEBD4h */ case   17:  		/* addi R5, R4, 24 */
		/* 821FEBD4h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821FEBD4h case   17:*/		return 0x821FEBD8;
		  /* 821FEBD8h */ case   18:  		/* li R8, 1 */
		/* 821FEBD8h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821FEBD8h case   18:*/		return 0x821FEBDC;
		  /* 821FEBDCh */ case   19:  		/* li R7, 2 */
		/* 821FEBDCh case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821FEBDCh case   19:*/		return 0x821FEBE0;
		  /* 821FEBE0h */ case   20:  		/* li R6, 118 */
		/* 821FEBE0h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x76);
		/* 821FEBE0h case   20:*/		return 0x821FEBE4;
		  /* 821FEBE4h */ case   21:  		/* mr R3, R31 */
		/* 821FEBE4h case   21:*/		regs.R3 = regs.R31;
		/* 821FEBE4h case   21:*/		return 0x821FEBE8;
		  /* 821FEBE8h */ case   22:  		/* bl 155056 */
		/* 821FEBE8h case   22:*/		regs.LR = 0x821FEBEC; return 0x82224998;
		/* 821FEBE8h case   22:*/		return 0x821FEBEC;
		  /* 821FEBECh */ case   23:  		/* mr R26, R3 */
		/* 821FEBECh case   23:*/		regs.R26 = regs.R3;
		/* 821FEBECh case   23:*/		return 0x821FEBF0;
		  /* 821FEBF0h */ case   24:  		/* mr R4, R30 */
		/* 821FEBF0h case   24:*/		regs.R4 = regs.R30;
		/* 821FEBF0h case   24:*/		return 0x821FEBF4;
		  /* 821FEBF4h */ case   25:  		/* mr R3, R31 */
		/* 821FEBF4h case   25:*/		regs.R3 = regs.R31;
		/* 821FEBF4h case   25:*/		return 0x821FEBF8;
		  /* 821FEBF8h */ case   26:  		/* bl -551928 */
		/* 821FEBF8h case   26:*/		regs.LR = 0x821FEBFC; return 0x82178000;
		/* 821FEBF8h case   26:*/		return 0x821FEBFC;
		  /* 821FEBFCh */ case   27:  		/* mr R5, R3 */
		/* 821FEBFCh case   27:*/		regs.R5 = regs.R3;
		/* 821FEBFCh case   27:*/		return 0x821FEC00;
		  /* 821FEC00h */ case   28:  		/* mr R3, R26 */
		/* 821FEC00h case   28:*/		regs.R3 = regs.R26;
		/* 821FEC00h case   28:*/		return 0x821FEC04;
		  /* 821FEC04h */ case   29:  		/* li R4, 0 */
		/* 821FEC04h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FEC04h case   29:*/		return 0x821FEC08;
		  /* 821FEC08h */ case   30:  		/* bl -583000 */
		/* 821FEC08h case   30:*/		regs.LR = 0x821FEC0C; return 0x821706B0;
		/* 821FEC08h case   30:*/		return 0x821FEC0C;
		  /* 821FEC0Ch */ case   31:  		/* li R5, 0 */
		/* 821FEC0Ch case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FEC0Ch case   31:*/		return 0x821FEC10;
		  /* 821FEC10h */ case   32:  		/* mr R4, R27 */
		/* 821FEC10h case   32:*/		regs.R4 = regs.R27;
		/* 821FEC10h case   32:*/		return 0x821FEC14;
		  /* 821FEC14h */ case   33:  		/* mr R3, R31 */
		/* 821FEC14h case   33:*/		regs.R3 = regs.R31;
		/* 821FEC14h case   33:*/		return 0x821FEC18;
		  /* 821FEC18h */ case   34:  		/* bl -582856 */
		/* 821FEC18h case   34:*/		regs.LR = 0x821FEC1C; return 0x82170750;
		/* 821FEC18h case   34:*/		return 0x821FEC1C;
		  /* 821FEC1Ch */ case   35:  		/* mr R5, R3 */
		/* 821FEC1Ch case   35:*/		regs.R5 = regs.R3;
		/* 821FEC1Ch case   35:*/		return 0x821FEC20;
		  /* 821FEC20h */ case   36:  		/* mr R3, R26 */
		/* 821FEC20h case   36:*/		regs.R3 = regs.R26;
		/* 821FEC20h case   36:*/		return 0x821FEC24;
		  /* 821FEC24h */ case   37:  		/* li R4, 1 */
		/* 821FEC24h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821FEC24h case   37:*/		return 0x821FEC28;
		  /* 821FEC28h */ case   38:  		/* bl -583032 */
		/* 821FEC28h case   38:*/		regs.LR = 0x821FEC2C; return 0x821706B0;
		/* 821FEC28h case   38:*/		return 0x821FEC2C;
		  /* 821FEC2Ch */ case   39:  		/* mr R4, R26 */
		/* 821FEC2Ch case   39:*/		regs.R4 = regs.R26;
		/* 821FEC2Ch case   39:*/		return 0x821FEC30;
		  /* 821FEC30h */ case   40:  		/* mr R3, R31 */
		/* 821FEC30h case   40:*/		regs.R3 = regs.R31;
		/* 821FEC30h case   40:*/		return 0x821FEC34;
		  /* 821FEC34h */ case   41:  		/* bl -551988 */
		/* 821FEC34h case   41:*/		regs.LR = 0x821FEC38; return 0x82178000;
		/* 821FEC34h case   41:*/		return 0x821FEC38;
		  /* 821FEC38h */ case   42:  		/* mr R30, R3 */
		/* 821FEC38h case   42:*/		regs.R30 = regs.R3;
		/* 821FEC38h case   42:*/		return 0x821FEC3C;
		  /* 821FEC3Ch */ case   43:  		/* mr R6, R31 */
		/* 821FEC3Ch case   43:*/		regs.R6 = regs.R31;
		/* 821FEC3Ch case   43:*/		return 0x821FEC40;
		  /* 821FEC40h */ case   44:  		/* mr R5, R29 */
		/* 821FEC40h case   44:*/		regs.R5 = regs.R29;
		/* 821FEC40h case   44:*/		return 0x821FEC44;
		  /* 821FEC44h */ case   45:  		/* mr R4, R28 */
		/* 821FEC44h case   45:*/		regs.R4 = regs.R28;
		/* 821FEC44h case   45:*/		return 0x821FEC48;
		  /* 821FEC48h */ case   46:  		/* mr R3, R26 */
		/* 821FEC48h case   46:*/		regs.R3 = regs.R26;
		/* 821FEC48h case   46:*/		return 0x821FEC4C;
		  /* 821FEC4Ch */ case   47:  		/* lwz R11, <#[R30]> */
		/* 821FEC4Ch case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FEC4Ch case   47:*/		return 0x821FEC50;
		  /* 821FEC50h */ case   48:  		/* rlwimi R11, R22, 3, 27, 31 */
		/* 821FEC50h case   48:*/		cpu::op::rlwimi<0,3,27,31>(regs,&regs.R11,regs.R22);
		/* 821FEC50h case   48:*/		return 0x821FEC54;
		  /* 821FEC54h */ case   49:  		/* stw R11, <#[R30]> */
		/* 821FEC54h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FEC54h case   49:*/		return 0x821FEC58;
		  /* 821FEC58h */ case   50:  		/* bl -266032 */
		/* 821FEC58h case   50:*/		regs.LR = 0x821FEC5C; return 0x821BDD28;
		/* 821FEC58h case   50:*/		return 0x821FEC5C;
		  /* 821FEC5Ch */ case   51:  		/* lwz R4, <#[R31 + 564]> */
		/* 821FEC5Ch case   51:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 821FEC5Ch case   51:*/		return 0x821FEC60;
		  /* 821FEC60h */ case   52:  		/* mr R6, R30 */
		/* 821FEC60h case   52:*/		regs.R6 = regs.R30;
		/* 821FEC60h case   52:*/		return 0x821FEC64;
		  /* 821FEC64h */ case   53:  		/* addi R11, R4, 24 */
		/* 821FEC64h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x18);
		/* 821FEC64h case   53:*/		return 0x821FEC68;
		  /* 821FEC68h */ case   54:  		/* mr R3, R31 */
		/* 821FEC68h case   54:*/		regs.R3 = regs.R31;
		/* 821FEC68h case   54:*/		return 0x821FEC6C;
		  /* 821FEC6Ch */ case   55:  		/* ori R5, R11, 3 */
		/* 821FEC6Ch case   55:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R11,0x3);
		/* 821FEC6Ch case   55:*/		return 0x821FEC70;
		  /* 821FEC70h */ case   56:  		/* bl 176976 */
		/* 821FEC70h case   56:*/		regs.LR = 0x821FEC74; return 0x82229FC0;
		/* 821FEC70h case   56:*/		return 0x821FEC74;
		  /* 821FEC74h */ case   57:  		/* mr R4, R24 */
		/* 821FEC74h case   57:*/		regs.R4 = regs.R24;
		/* 821FEC74h case   57:*/		return 0x821FEC78;
		  /* 821FEC78h */ case   58:  		/* addi R3, R1, 320 */
		/* 821FEC78h case   58:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x140);
		/* 821FEC78h case   58:*/		return 0x821FEC7C;
		  /* 821FEC7Ch */ case   59:  		/* bl -52804 */
		/* 821FEC7Ch case   59:*/		regs.LR = 0x821FEC80; return 0x821F1E38;
		/* 821FEC7Ch case   59:*/		return 0x821FEC80;
		  /* 821FEC80h */ case   60:  		/* stw R30, <#[R3]> */
		/* 821FEC80h case   60:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 821FEC80h case   60:*/		return 0x821FEC84;
		  /* 821FEC84h */ case   61:  		/* lwz R11, <#[R3 + 4]> */
		/* 821FEC84h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FEC84h case   61:*/		return 0x821FEC88;
		  /* 821FEC88h */ case   62:  		/* rlwimi R11, R22, 1, 16, 14 */
		/* 821FEC88h case   62:*/		cpu::op::rlwimi<0,1,16,14>(regs,&regs.R11,regs.R22);
		/* 821FEC88h case   62:*/		return 0x821FEC8C;
		  /* 821FEC8Ch */ case   63:  		/* stw R11, <#[R3 + 4]> */
		/* 821FEC8Ch case   63:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821FEC8Ch case   63:*/		return 0x821FEC90;
	}
	return 0x821FEC90;
} // Block from 821FEB90h-821FEC90h (64 instructions)

//////////////////////////////////////////////////////
// Block at 821FEC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEC90);
		  /* 821FEC90h */ case    0:  		/* addi R24, R24, 1 */
		/* 821FEC90h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821FEC90h case    0:*/		return 0x821FEC94;
		  /* 821FEC94h */ case    1:  		/* cmplw CR6, R24, R29 */
		/* 821FEC94h case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R29);
		/* 821FEC94h case    1:*/		return 0x821FEC98;
		  /* 821FEC98h */ case    2:  		/* bc 12, CR6_LT, -508 */
		/* 821FEC98h case    2:*/		if ( regs.CR[6].lt ) { return 0x821FEA9C;  }
		/* 821FEC98h case    2:*/		return 0x821FEC9C;
	}
	return 0x821FEC9C;
} // Block from 821FEC90h-821FEC9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FEC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FEC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FEC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FEC9C);
		  /* 821FEC9Ch */ case    0:  		/* subf. R5, R29, R20 */
		/* 821FEC9Ch case    0:*/		cpu::op::subf<1>(regs,&regs.R5,regs.R29,regs.R20);
		/* 821FEC9Ch case    0:*/		return 0x821FECA0;
		  /* 821FECA0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821FECA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FECB0;  }
		/* 821FECA0h case    1:*/		return 0x821FECA4;
		  /* 821FECA4h */ case    2:  		/* addi R3, R1, 3144 */
		/* 821FECA4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC48);
		/* 821FECA4h case    2:*/		return 0x821FECA8;
	}
	return 0x821FECA8;
} // Block from 821FEC9Ch-821FECA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FECA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FECA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FECA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FECA8);
		  /* 821FECA8h */ case    0:  		/* mr R4, R18 */
		/* 821FECA8h case    0:*/		regs.R4 = regs.R18;
		/* 821FECA8h case    0:*/		return 0x821FECAC;
		  /* 821FECACh */ case    1:  		/* bl -54476 */
		/* 821FECACh case    1:*/		regs.LR = 0x821FECB0; return 0x821F17E0;
		/* 821FECACh case    1:*/		return 0x821FECB0;
	}
	return 0x821FECB0;
} // Block from 821FECA8h-821FECB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821FECB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FECB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FECB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FECB0);
		  /* 821FECB0h */ case    0:  		/* li R6, 0 */
		/* 821FECB0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FECB0h case    0:*/		return 0x821FECB4;
		  /* 821FECB4h */ case    1:  		/* li R5, 40 */
		/* 821FECB4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 821FECB4h case    1:*/		return 0x821FECB8;
		  /* 821FECB8h */ case    2:  		/* mr R4, R19 */
		/* 821FECB8h case    2:*/		regs.R4 = regs.R19;
		/* 821FECB8h case    2:*/		return 0x821FECBC;
		  /* 821FECBCh */ case    3:  		/* mr R3, R31 */
		/* 821FECBCh case    3:*/		regs.R3 = regs.R31;
		/* 821FECBCh case    3:*/		return 0x821FECC0;
		  /* 821FECC0h */ case    4:  		/* bl -597616 */
		/* 821FECC0h case    4:*/		regs.LR = 0x821FECC4; return 0x8216CE50;
		/* 821FECC0h case    4:*/		return 0x821FECC4;
		  /* 821FECC4h */ case    5:  		/* b -10660 */
		/* 821FECC4h case    5:*/		return 0x821FC320;
		/* 821FECC4h case    5:*/		return 0x821FECC8;
		  /* 821FECC8h */ case    6:  		/* lwz R27, <#[R1 + 3500]> */
		/* 821FECC8h case    6:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FECC8h case    6:*/		return 0x821FECCC;
		  /* 821FECCCh */ case    7:  		/* mulli R5, R29, 3 */
		/* 821FECCCh case    7:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 821FECCCh case    7:*/		return 0x821FECD0;
		  /* 821FECD0h */ case    8:  		/* mr R4, R27 */
		/* 821FECD0h case    8:*/		regs.R4 = regs.R27;
		/* 821FECD0h case    8:*/		return 0x821FECD4;
		  /* 821FECD4h */ case    9:  		/* addi R3, R1, 720 */
		/* 821FECD4h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2D0);
		/* 821FECD4h case    9:*/		return 0x821FECD8;
		  /* 821FECD8h */ case   10:  		/* bl -35272 */
		/* 821FECD8h case   10:*/		regs.LR = 0x821FECDC; return 0x821F6310;
		/* 821FECD8h case   10:*/		return 0x821FECDC;
		  /* 821FECDCh */ case   11:  		/* rlwinm R28, R29, 1, 0, 30 */
		/* 821FECDCh case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R29);
		/* 821FECDCh case   11:*/		return 0x821FECE0;
		  /* 821FECE0h */ case   12:  		/* mr R4, R27 */
		/* 821FECE0h case   12:*/		regs.R4 = regs.R27;
		/* 821FECE0h case   12:*/		return 0x821FECE4;
		  /* 821FECE4h */ case   13:  		/* mr R5, R28 */
		/* 821FECE4h case   13:*/		regs.R5 = regs.R28;
		/* 821FECE4h case   13:*/		return 0x821FECE8;
		  /* 821FECE8h */ case   14:  		/* addi R3, R1, 2648 */
		/* 821FECE8h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA58);
		/* 821FECE8h case   14:*/		return 0x821FECEC;
		  /* 821FECECh */ case   15:  		/* bl -35292 */
		/* 821FECECh case   15:*/		regs.LR = 0x821FECF0; return 0x821F6310;
		/* 821FECECh case   15:*/		return 0x821FECF0;
		  /* 821FECF0h */ case   16:  		/* mr R5, R29 */
		/* 821FECF0h case   16:*/		regs.R5 = regs.R29;
		/* 821FECF0h case   16:*/		return 0x821FECF4;
		  /* 821FECF4h */ case   17:  		/* mr R4, R27 */
		/* 821FECF4h case   17:*/		regs.R4 = regs.R27;
		/* 821FECF4h case   17:*/		return 0x821FECF8;
		  /* 821FECF8h */ case   18:  		/* addi R3, R1, 1944 */
		/* 821FECF8h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x798);
		/* 821FECF8h case   18:*/		return 0x821FECFC;
		  /* 821FECFCh */ case   19:  		/* bl -35308 */
		/* 821FECFCh case   19:*/		regs.LR = 0x821FED00; return 0x821F6310;
		/* 821FECFCh case   19:*/		return 0x821FED00;
		  /* 821FED00h */ case   20:  		/* cmplwi CR6, R29, 0 */
		/* 821FED00h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FED00h case   20:*/		return 0x821FED04;
		  /* 821FED04h */ case   21:  		/* bc 12, CR6_EQ, 152 */
		/* 821FED04h case   21:*/		if ( regs.CR[6].eq ) { return 0x821FED9C;  }
		/* 821FED04h case   21:*/		return 0x821FED08;
		  /* 821FED08h */ case   22:  		/* cmplwi CR6, R29, 4 */
		/* 821FED08h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FED08h case   22:*/		return 0x821FED0C;
		  /* 821FED0Ch */ case   23:  		/* mr R30, R29 */
		/* 821FED0Ch case   23:*/		regs.R30 = regs.R29;
		/* 821FED0Ch case   23:*/		return 0x821FED10;
		  /* 821FED10h */ case   24:  		/* bc 12, CR6_LT, 8 */
		/* 821FED10h case   24:*/		if ( regs.CR[6].lt ) { return 0x821FED18;  }
		/* 821FED10h case   24:*/		return 0x821FED14;
		  /* 821FED14h */ case   25:  		/* li R30, 4 */
		/* 821FED14h case   25:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FED14h case   25:*/		return 0x821FED18;
	}
	return 0x821FED18;
} // Block from 821FECB0h-821FED18h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821FED18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FED18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FED18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FED18);
		  /* 821FED18h */ case    0:  		/* li R6, 228 */
		/* 821FED18h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FED18h case    0:*/		return 0x821FED1C;
		  /* 821FED1Ch */ case    1:  		/* mr R5, R30 */
		/* 821FED1Ch case    1:*/		regs.R5 = regs.R30;
		/* 821FED1Ch case    1:*/		return 0x821FED20;
		  /* 821FED20h */ case    2:  		/* addi R4, R1, 720 */
		/* 821FED20h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x2D0);
		/* 821FED20h case    2:*/		return 0x821FED24;
		  /* 821FED24h */ case    3:  		/* mr R3, R31 */
		/* 821FED24h case    3:*/		regs.R3 = regs.R31;
		/* 821FED24h case    3:*/		return 0x821FED28;
		  /* 821FED28h */ case    4:  		/* bl -50656 */
		/* 821FED28h case    4:*/		regs.LR = 0x821FED2C; return 0x821F2748;
		/* 821FED28h case    4:*/		return 0x821FED2C;
		  /* 821FED2Ch */ case    5:  		/* mr R26, R3 */
		/* 821FED2Ch case    5:*/		regs.R26 = regs.R3;
		/* 821FED2Ch case    5:*/		return 0x821FED30;
		  /* 821FED30h */ case    6:  		/* li R7, 1 */
		/* 821FED30h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FED30h case    6:*/		return 0x821FED34;
		  /* 821FED34h */ case    7:  		/* li R6, 0 */
		/* 821FED34h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FED34h case    7:*/		return 0x821FED38;
		  /* 821FED38h */ case    8:  		/* mr R5, R30 */
		/* 821FED38h case    8:*/		regs.R5 = regs.R30;
		/* 821FED38h case    8:*/		return 0x821FED3C;
		  /* 821FED3Ch */ case    9:  		/* addi R4, R1, 2648 */
		/* 821FED3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA58);
		/* 821FED3Ch case    9:*/		return 0x821FED40;
		  /* 821FED40h */ case   10:  		/* mr R3, R31 */
		/* 821FED40h case   10:*/		regs.R3 = regs.R31;
		/* 821FED40h case   10:*/		return 0x821FED44;
		  /* 821FED44h */ case   11:  		/* bl -51236 */
		/* 821FED44h case   11:*/		regs.LR = 0x821FED48; return 0x821F2520;
		/* 821FED44h case   11:*/		return 0x821FED48;
		  /* 821FED48h */ case   12:  		/* mr R25, R3 */
		/* 821FED48h case   12:*/		regs.R25 = regs.R3;
		/* 821FED48h case   12:*/		return 0x821FED4C;
		  /* 821FED4Ch */ case   13:  		/* li R7, 1 */
		/* 821FED4Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FED4Ch case   13:*/		return 0x821FED50;
		  /* 821FED50h */ case   14:  		/* li R6, 0 */
		/* 821FED50h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FED50h case   14:*/		return 0x821FED54;
		  /* 821FED54h */ case   15:  		/* mr R5, R30 */
		/* 821FED54h case   15:*/		regs.R5 = regs.R30;
		/* 821FED54h case   15:*/		return 0x821FED58;
		  /* 821FED58h */ case   16:  		/* addi R4, R1, 1944 */
		/* 821FED58h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x798);
		/* 821FED58h case   16:*/		return 0x821FED5C;
		  /* 821FED5Ch */ case   17:  		/* mr R3, R31 */
		/* 821FED5Ch case   17:*/		regs.R3 = regs.R31;
		/* 821FED5Ch case   17:*/		return 0x821FED60;
		  /* 821FED60h */ case   18:  		/* bl -51264 */
		/* 821FED60h case   18:*/		regs.LR = 0x821FED64; return 0x821F2520;
		/* 821FED60h case   18:*/		return 0x821FED64;
		  /* 821FED64h */ case   19:  		/* mr R5, R3 */
		/* 821FED64h case   19:*/		regs.R5 = regs.R3;
		/* 821FED64h case   19:*/		return 0x821FED68;
		  /* 821FED68h */ case   20:  		/* mr R6, R25 */
		/* 821FED68h case   20:*/		regs.R6 = regs.R25;
		/* 821FED68h case   20:*/		return 0x821FED6C;
		  /* 821FED6Ch */ case   21:  		/* mr R4, R26 */
		/* 821FED6Ch case   21:*/		regs.R4 = regs.R26;
		/* 821FED6Ch case   21:*/		return 0x821FED70;
		  /* 821FED70h */ case   22:  		/* mr R3, R31 */
		/* 821FED70h case   22:*/		regs.R3 = regs.R31;
		/* 821FED70h case   22:*/		return 0x821FED74;
		  /* 821FED74h */ case   23:  		/* bl -66156 */
		/* 821FED74h case   23:*/		regs.LR = 0x821FED78; return 0x821EEB08;
		/* 821FED74h case   23:*/		return 0x821FED78;
		  /* 821FED78h */ case   24:  		/* mr R5, R3 */
		/* 821FED78h case   24:*/		regs.R5 = regs.R3;
		/* 821FED78h case   24:*/		return 0x821FED7C;
		  /* 821FED7Ch */ case   25:  		/* mr R4, R30 */
		/* 821FED7Ch case   25:*/		regs.R4 = regs.R30;
		/* 821FED7Ch case   25:*/		return 0x821FED80;
		  /* 821FED80h */ case   26:  		/* addi R3, R1, 720 */
		/* 821FED80h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2D0);
		/* 821FED80h case   26:*/		return 0x821FED84;
		  /* 821FED84h */ case   27:  		/* bl -52844 */
		/* 821FED84h case   27:*/		regs.LR = 0x821FED88; return 0x821F1F18;
		/* 821FED84h case   27:*/		return 0x821FED88;
		  /* 821FED88h */ case   28:  		/* li R4, 0 */
		/* 821FED88h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FED88h case   28:*/		return 0x821FED8C;
		  /* 821FED8Ch */ case   29:  		/* addi R3, R1, 720 */
		/* 821FED8Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2D0);
		/* 821FED8Ch case   29:*/		return 0x821FED90;
		  /* 821FED90h */ case   30:  		/* subf R29, R30, R29 */
		/* 821FED90h case   30:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 821FED90h case   30:*/		return 0x821FED94;
		  /* 821FED94h */ case   31:  		/* bl -69532 */
		/* 821FED94h case   31:*/		regs.LR = 0x821FED98; return 0x821EDDF8;
		/* 821FED94h case   31:*/		return 0x821FED98;
		  /* 821FED98h */ case   32:  		/* b -152 */
		/* 821FED98h case   32:*/		return 0x821FED00;
		/* 821FED98h case   32:*/		return 0x821FED9C;
	}
	return 0x821FED9C;
} // Block from 821FED18h-821FED9Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 821FED9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FED9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FED9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FED9C);
		  /* 821FED9Ch */ case    0:  		/* cmplwi CR0, R28, 0 */
		/* 821FED9Ch case    0:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 821FED9Ch case    0:*/		return 0x821FEDA0;
		  /* 821FEDA0h */ case    1:  		/* bc 12, CR0_EQ, -10880 */
		/* 821FEDA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FEDA0h case    1:*/		return 0x821FEDA4;
		  /* 821FEDA4h */ case    2:  		/* mr R5, R28 */
		/* 821FEDA4h case    2:*/		regs.R5 = regs.R28;
		/* 821FEDA4h case    2:*/		return 0x821FEDA8;
		  /* 821FEDA8h */ case    3:  		/* mr R4, R27 */
		/* 821FEDA8h case    3:*/		regs.R4 = regs.R27;
		/* 821FEDA8h case    3:*/		return 0x821FEDAC;
		  /* 821FEDACh */ case    4:  		/* addi R3, R1, 2792 */
		/* 821FEDACh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAE8);
		/* 821FEDACh case    4:*/		return 0x821FEDB0;
		  /* 821FEDB0h */ case    5:  		/* b -5156 */
		/* 821FEDB0h case    5:*/		return 0x821FD98C;
		/* 821FEDB0h case    5:*/		return 0x821FEDB4;
		  /* 821FEDB4h */ case    6:  		/* lwz R11, <#[R14 + 32]> */
		/* 821FEDB4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 821FEDB4h case    6:*/		return 0x821FEDB8;
		  /* 821FEDB8h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FEDB8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FEDB8h case    7:*/		return 0x821FEDBC;
		  /* 821FEDBCh */ case    8:  		/* lwz R25, <#[R11 + 24]> */
		/* 821FEDBCh case    8:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000018) );
		/* 821FEDBCh case    8:*/		return 0x821FEDC0;
		  /* 821FEDC0h */ case    9:  		/* cmplwi CR6, R25, 137 */
		/* 821FEDC0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000089);
		/* 821FEDC0h case    9:*/		return 0x821FEDC4;
		  /* 821FEDC4h */ case   10:  		/* bc 12, CR6_GT, 23100 */
		/* 821FEDC4h case   10:*/		if ( regs.CR[6].gt ) { return 0x82204800;  }
		/* 821FEDC4h case   10:*/		return 0x821FEDC8;
		  /* 821FEDC8h */ case   11:  		/* lis R12, -32252 */
		/* 821FEDC8h case   11:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821FEDC8h case   11:*/		return 0x821FEDCC;
		  /* 821FEDCCh */ case   12:  		/* rlwinm R0, R25, 1, 0, 30 */
		/* 821FEDCCh case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R25);
		/* 821FEDCCh case   12:*/		return 0x821FEDD0;
		  /* 821FEDD0h */ case   13:  		/* addi R12, R12, -14392 */
		/* 821FEDD0h case   13:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFC7C8);
		/* 821FEDD0h case   13:*/		return 0x821FEDD4;
		  /* 821FEDD4h */ case   14:  		/* lhzx R0, <#[R12 + R0]> */
		/* 821FEDD4h case   14:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 821FEDD4h case   14:*/		return 0x821FEDD8;
		  /* 821FEDD8h */ case   15:  		/* lis R12, -32224 */
		/* 821FEDD8h case   15:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8220);
		/* 821FEDD8h case   15:*/		return 0x821FEDDC;
		  /* 821FEDDCh */ case   16:  		/* addi R12, R12, -4624 */
		/* 821FEDDCh case   16:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFEDF0);
		/* 821FEDDCh case   16:*/		return 0x821FEDE0;
		  /* 821FEDE0h */ case   17:  		/* ori R0, R0, 0 */
		/* 821FEDE0h case   17:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821FEDE0h case   17:*/		return 0x821FEDE4;
		  /* 821FEDE4h */ case   18:  		/* add R12, R12, R0 */
		/* 821FEDE4h case   18:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821FEDE4h case   18:*/		return 0x821FEDE8;
		  /* 821FEDE8h */ case   19:  		/* mtspr CTR, R12 */
		/* 821FEDE8h case   19:*/		regs.CTR = regs.R12;
		/* 821FEDE8h case   19:*/		return 0x821FEDEC;
		  /* 821FEDECh */ case   20:  		/* bcctr 20, CR0_LT */
		/* 821FEDECh case   20:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821FEDECh case   20:*/		return 0x821FEDF0;
		  /* 821FEDF0h */ case   21:  		/* li R28, 2 */
		/* 821FEDF0h case   21:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 821FEDF0h case   21:*/		return 0x821FEDF4;
		  /* 821FEDF4h */ case   22:  		/* b 2972 */
		/* 821FEDF4h case   22:*/		return 0x821FF990;
		/* 821FEDF4h case   22:*/		return 0x821FEDF8;
		  /* 821FEDF8h */ case   23:  		/* li R5, 1 */
		/* 821FEDF8h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEDF8h case   23:*/		return 0x821FEDFC;
		  /* 821FEDFCh */ case   24:  		/* fmr FR4, FR31 */
		/* 821FEDFCh case   24:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEDFCh case   24:*/		return 0x821FEE00;
		  /* 821FEE00h */ case   25:  		/* mr R4, R31 */
		/* 821FEE00h case   25:*/		regs.R4 = regs.R31;
		/* 821FEE00h case   25:*/		return 0x821FEE04;
		  /* 821FEE04h */ case   26:  		/* fmr FR3, FR31 */
		/* 821FEE04h case   26:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEE04h case   26:*/		return 0x821FEE08;
		  /* 821FEE08h */ case   27:  		/* addi R3, R1, 1312 */
		/* 821FEE08h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x520);
		/* 821FEE08h case   27:*/		return 0x821FEE0C;
		  /* 821FEE0Ch */ case   28:  		/* fmr FR2, FR31 */
		/* 821FEE0Ch case   28:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEE0Ch case   28:*/		return 0x821FEE10;
		  /* 821FEE10h */ case   29:  		/* fmr FR1, FR30 */
		/* 821FEE10h case   29:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821FEE10h case   29:*/		return 0x821FEE14;
		  /* 821FEE14h */ case   30:  		/* bl 163900 */
		/* 821FEE14h case   30:*/		regs.LR = 0x821FEE18; return 0x82226E50;
		/* 821FEE14h case   30:*/		return 0x821FEE18;
		  /* 821FEE18h */ case   31:  		/* li R5, 1 */
		/* 821FEE18h case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEE18h case   31:*/		return 0x821FEE1C;
		  /* 821FEE1Ch */ case   32:  		/* mr R4, R31 */
		/* 821FEE1Ch case   32:*/		regs.R4 = regs.R31;
		/* 821FEE1Ch case   32:*/		return 0x821FEE20;
		  /* 821FEE20h */ case   33:  		/* fmr FR4, FR31 */
		/* 821FEE20h case   33:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEE20h case   33:*/		return 0x821FEE24;
		  /* 821FEE24h */ case   34:  		/* addi R3, R1, 1328 */
		/* 821FEE24h case   34:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x530);
		/* 821FEE24h case   34:*/		return 0x821FEE28;
		  /* 821FEE28h */ case   35:  		/* fmr FR3, FR31 */
		/* 821FEE28h case   35:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEE28h case   35:*/		return 0x821FEE2C;
		  /* 821FEE2Ch */ case   36:  		/* fmr FR2, FR31 */
		/* 821FEE2Ch case   36:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEE2Ch case   36:*/		return 0x821FEE30;
		  /* 821FEE30h */ case   37:  		/* fmr FR1, FR20 */
		/* 821FEE30h case   37:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR20);
		/* 821FEE30h case   37:*/		return 0x821FEE34;
		  /* 821FEE34h */ case   38:  		/* bl 163868 */
		/* 821FEE34h case   38:*/		regs.LR = 0x821FEE38; return 0x82226E50;
		/* 821FEE34h case   38:*/		return 0x821FEE38;
		  /* 821FEE38h */ case   39:  		/* li R5, 1 */
		/* 821FEE38h case   39:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEE38h case   39:*/		return 0x821FEE3C;
		  /* 821FEE3Ch */ case   40:  		/* fmr FR4, FR31 */
		/* 821FEE3Ch case   40:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEE3Ch case   40:*/		return 0x821FEE40;
		  /* 821FEE40h */ case   41:  		/* mr R4, R31 */
		/* 821FEE40h case   41:*/		regs.R4 = regs.R31;
		/* 821FEE40h case   41:*/		return 0x821FEE44;
		  /* 821FEE44h */ case   42:  		/* fmr FR3, FR31 */
		/* 821FEE44h case   42:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEE44h case   42:*/		return 0x821FEE48;
		  /* 821FEE48h */ case   43:  		/* addi R3, R1, 1192 */
		/* 821FEE48h case   43:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4A8);
		/* 821FEE48h case   43:*/		return 0x821FEE4C;
		  /* 821FEE4Ch */ case   44:  		/* fmr FR2, FR31 */
		/* 821FEE4Ch case   44:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEE4Ch case   44:*/		return 0x821FEE50;
		  /* 821FEE50h */ case   45:  		/* fmr FR1, FR19 */
		/* 821FEE50h case   45:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR19);
		/* 821FEE50h case   45:*/		return 0x821FEE54;
		  /* 821FEE54h */ case   46:  		/* bl 163836 */
		/* 821FEE54h case   46:*/		regs.LR = 0x821FEE58; return 0x82226E50;
		/* 821FEE54h case   46:*/		return 0x821FEE58;
		  /* 821FEE58h */ case   47:  		/* li R5, 1 */
		/* 821FEE58h case   47:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEE58h case   47:*/		return 0x821FEE5C;
		  /* 821FEE5Ch */ case   48:  		/* mr R4, R31 */
		/* 821FEE5Ch case   48:*/		regs.R4 = regs.R31;
		/* 821FEE5Ch case   48:*/		return 0x821FEE60;
		  /* 821FEE60h */ case   49:  		/* fmr FR4, FR31 */
		/* 821FEE60h case   49:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEE60h case   49:*/		return 0x821FEE64;
		  /* 821FEE64h */ case   50:  		/* addi R3, R1, 1408 */
		/* 821FEE64h case   50:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x580);
		/* 821FEE64h case   50:*/		return 0x821FEE68;
		  /* 821FEE68h */ case   51:  		/* fmr FR3, FR31 */
		/* 821FEE68h case   51:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEE68h case   51:*/		return 0x821FEE6C;
		  /* 821FEE6Ch */ case   52:  		/* fmr FR2, FR31 */
		/* 821FEE6Ch case   52:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEE6Ch case   52:*/		return 0x821FEE70;
		  /* 821FEE70h */ case   53:  		/* fmr FR1, FR18 */
		/* 821FEE70h case   53:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR18);
		/* 821FEE70h case   53:*/		return 0x821FEE74;
		  /* 821FEE74h */ case   54:  		/* bl 163804 */
		/* 821FEE74h case   54:*/		regs.LR = 0x821FEE78; return 0x82226E50;
		/* 821FEE74h case   54:*/		return 0x821FEE78;
		  /* 821FEE78h */ case   55:  		/* li R5, 1 */
		/* 821FEE78h case   55:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEE78h case   55:*/		return 0x821FEE7C;
		  /* 821FEE7Ch */ case   56:  		/* fmr FR4, FR31 */
		/* 821FEE7Ch case   56:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEE7Ch case   56:*/		return 0x821FEE80;
		  /* 821FEE80h */ case   57:  		/* mr R4, R31 */
		/* 821FEE80h case   57:*/		regs.R4 = regs.R31;
		/* 821FEE80h case   57:*/		return 0x821FEE84;
		  /* 821FEE84h */ case   58:  		/* fmr FR3, FR31 */
		/* 821FEE84h case   58:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEE84h case   58:*/		return 0x821FEE88;
		  /* 821FEE88h */ case   59:  		/* addi R3, R1, 1208 */
		/* 821FEE88h case   59:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4B8);
		/* 821FEE88h case   59:*/		return 0x821FEE8C;
		  /* 821FEE8Ch */ case   60:  		/* fmr FR2, FR31 */
		/* 821FEE8Ch case   60:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEE8Ch case   60:*/		return 0x821FEE90;
		  /* 821FEE90h */ case   61:  		/* fmr FR1, FR17 */
		/* 821FEE90h case   61:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR17);
		/* 821FEE90h case   61:*/		return 0x821FEE94;
		  /* 821FEE94h */ case   62:  		/* bl 163772 */
		/* 821FEE94h case   62:*/		regs.LR = 0x821FEE98; return 0x82226E50;
		/* 821FEE94h case   62:*/		return 0x821FEE98;
		  /* 821FEE98h */ case   63:  		/* li R5, 1 */
		/* 821FEE98h case   63:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEE98h case   63:*/		return 0x821FEE9C;
		  /* 821FEE9Ch */ case   64:  		/* mr R4, R31 */
		/* 821FEE9Ch case   64:*/		regs.R4 = regs.R31;
		/* 821FEE9Ch case   64:*/		return 0x821FEEA0;
		  /* 821FEEA0h */ case   65:  		/* fmr FR4, FR31 */
		/* 821FEEA0h case   65:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEEA0h case   65:*/		return 0x821FEEA4;
		  /* 821FEEA4h */ case   66:  		/* addi R3, R1, 1640 */
		/* 821FEEA4h case   66:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x668);
		/* 821FEEA4h case   66:*/		return 0x821FEEA8;
		  /* 821FEEA8h */ case   67:  		/* fmr FR3, FR31 */
		/* 821FEEA8h case   67:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEEA8h case   67:*/		return 0x821FEEAC;
		  /* 821FEEACh */ case   68:  		/* fmr FR2, FR31 */
		/* 821FEEACh case   68:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEEACh case   68:*/		return 0x821FEEB0;
		  /* 821FEEB0h */ case   69:  		/* fmr FR1, FR29 */
		/* 821FEEB0h case   69:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821FEEB0h case   69:*/		return 0x821FEEB4;
		  /* 821FEEB4h */ case   70:  		/* bl 163740 */
		/* 821FEEB4h case   70:*/		regs.LR = 0x821FEEB8; return 0x82226E50;
		/* 821FEEB4h case   70:*/		return 0x821FEEB8;
		  /* 821FEEB8h */ case   71:  		/* li R5, 1 */
		/* 821FEEB8h case   71:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEEB8h case   71:*/		return 0x821FEEBC;
		  /* 821FEEBCh */ case   72:  		/* fmr FR4, FR31 */
		/* 821FEEBCh case   72:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEEBCh case   72:*/		return 0x821FEEC0;
		  /* 821FEEC0h */ case   73:  		/* mr R4, R31 */
		/* 821FEEC0h case   73:*/		regs.R4 = regs.R31;
		/* 821FEEC0h case   73:*/		return 0x821FEEC4;
		  /* 821FEEC4h */ case   74:  		/* fmr FR3, FR31 */
		/* 821FEEC4h case   74:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEEC4h case   74:*/		return 0x821FEEC8;
		  /* 821FEEC8h */ case   75:  		/* addi R3, R1, 1488 */
		/* 821FEEC8h case   75:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5D0);
		/* 821FEEC8h case   75:*/		return 0x821FEECC;
		  /* 821FEECCh */ case   76:  		/* fmr FR2, FR31 */
		/* 821FEECCh case   76:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEECCh case   76:*/		return 0x821FEED0;
		  /* 821FEED0h */ case   77:  		/* fmr FR1, FR16 */
		/* 821FEED0h case   77:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR16);
		/* 821FEED0h case   77:*/		return 0x821FEED4;
		  /* 821FEED4h */ case   78:  		/* bl 163708 */
		/* 821FEED4h case   78:*/		regs.LR = 0x821FEED8; return 0x82226E50;
		/* 821FEED4h case   78:*/		return 0x821FEED8;
		  /* 821FEED8h */ case   79:  		/* li R5, 1 */
		/* 821FEED8h case   79:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FEED8h case   79:*/		return 0x821FEEDC;
		  /* 821FEEDCh */ case   80:  		/* mr R4, R31 */
		/* 821FEEDCh case   80:*/		regs.R4 = regs.R31;
		/* 821FEEDCh case   80:*/		return 0x821FEEE0;
		  /* 821FEEE0h */ case   81:  		/* fmr FR4, FR31 */
		/* 821FEEE0h case   81:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FEEE0h case   81:*/		return 0x821FEEE4;
		  /* 821FEEE4h */ case   82:  		/* addi R3, R1, 1544 */
		/* 821FEEE4h case   82:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x608);
		/* 821FEEE4h case   82:*/		return 0x821FEEE8;
		  /* 821FEEE8h */ case   83:  		/* fmr FR3, FR31 */
		/* 821FEEE8h case   83:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FEEE8h case   83:*/		return 0x821FEEEC;
		  /* 821FEEECh */ case   84:  		/* fmr FR2, FR31 */
		/* 821FEEECh case   84:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FEEECh case   84:*/		return 0x821FEEF0;
		  /* 821FEEF0h */ case   85:  		/* fmr FR1, FR28 */
		/* 821FEEF0h case   85:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821FEEF0h case   85:*/		return 0x821FEEF4;
		  /* 821FEEF4h */ case   86:  		/* bl 163676 */
		/* 821FEEF4h case   86:*/		regs.LR = 0x821FEEF8; return 0x82226E50;
		/* 821FEEF4h case   86:*/		return 0x821FEEF8;
		  /* 821FEEF8h */ case   87:  		/* mr R5, R29 */
		/* 821FEEF8h case   87:*/		regs.R5 = regs.R29;
		/* 821FEEF8h case   87:*/		return 0x821FEEFC;
		  /* 821FEEFCh */ case   88:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FEEFCh case   88:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FEEFCh case   88:*/		return 0x821FEF00;
		  /* 821FEF00h */ case   89:  		/* addi R3, R1, 2328 */
		/* 821FEF00h case   89:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x918);
		/* 821FEF00h case   89:*/		return 0x821FEF04;
		  /* 821FEF04h */ case   90:  		/* bl -35828 */
		/* 821FEF04h case   90:*/		regs.LR = 0x821FEF08; return 0x821F6310;
		/* 821FEF04h case   90:*/		return 0x821FEF08;
		  /* 821FEF08h */ case   91:  		/* li R28, 1 */
		/* 821FEF08h case   91:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821FEF08h case   91:*/		return 0x821FEF0C;
		  /* 821FEF0Ch */ case   92:  		/* cmplwi CR6, R29, 0 */
		/* 821FEF0Ch case   92:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FEF0Ch case   92:*/		return 0x821FEF10;
		  /* 821FEF10h */ case   93:  		/* bc 12, CR6_EQ, -11248 */
		/* 821FEF10h case   93:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FEF10h case   93:*/		return 0x821FEF14;
		  /* 821FEF14h */ case   94:  		/* addi R3, R1, 2328 */
		/* 821FEF14h case   94:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x918);
		/* 821FEF14h case   94:*/		return 0x821FEF18;
		  /* 821FEF18h */ case   95:  		/* bl -254136 */
		/* 821FEF18h case   95:*/		regs.LR = 0x821FEF1C; return 0x821C0E60;
		/* 821FEF18h case   95:*/		return 0x821FEF1C;
		  /* 821FEF1Ch */ case   96:  		/* mr R30, R3 */
		/* 821FEF1Ch case   96:*/		regs.R30 = regs.R3;
		/* 821FEF1Ch case   96:*/		return 0x821FEF20;
		  /* 821FEF20h */ case   97:  		/* mr R3, R31 */
		/* 821FEF20h case   97:*/		regs.R3 = regs.R31;
		/* 821FEF20h case   97:*/		return 0x821FEF24;
		  /* 821FEF24h */ case   98:  		/* mr R4, R30 */
		/* 821FEF24h case   98:*/		regs.R4 = regs.R30;
		/* 821FEF24h case   98:*/		return 0x821FEF28;
		  /* 821FEF28h */ case   99:  		/* bl -52136 */
		/* 821FEF28h case   99:*/		regs.LR = 0x821FEF2C; return 0x821F2380;
		/* 821FEF28h case   99:*/		return 0x821FEF2C;
		  /* 821FEF2Ch */ case  100:  		/* li R4, 2 */
		/* 821FEF2Ch case  100:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FEF2Ch case  100:*/		return 0x821FEF30;
		  /* 821FEF30h */ case  101:  		/* mr R27, R3 */
		/* 821FEF30h case  101:*/		regs.R27 = regs.R3;
		/* 821FEF30h case  101:*/		return 0x821FEF34;
		  /* 821FEF34h */ case  102:  		/* bl -554100 */
		/* 821FEF34h case  102:*/		regs.LR = 0x821FEF38; return 0x82177AC0;
		/* 821FEF34h case  102:*/		return 0x821FEF38;
		  /* 821FEF38h */ case  103:  		/* mr R3, R31 */
		/* 821FEF38h case  103:*/		regs.R3 = regs.R31;
		/* 821FEF38h case  103:*/		return 0x821FEF3C;
		  /* 821FEF3Ch */ case  104:  		/* mr R4, R27 */
		/* 821FEF3Ch case  104:*/		regs.R4 = regs.R27;
		/* 821FEF3Ch case  104:*/		return 0x821FEF40;
		  /* 821FEF40h */ case  105:  		/* lwz R5, <#[R27 + 12]> */
		/* 821FEF40h case  105:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 821FEF40h case  105:*/		return 0x821FEF44;
		  /* 821FEF44h */ case  106:  		/* bl -581204 */
		/* 821FEF44h case  106:*/		regs.LR = 0x821FEF48; return 0x821710F0;
		/* 821FEF44h case  106:*/		return 0x821FEF48;
		  /* 821FEF48h */ case  107:  		/* li R4, 4 */
		/* 821FEF48h case  107:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FEF48h case  107:*/		return 0x821FEF4C;
		  /* 821FEF4Ch */ case  108:  		/* mr R27, R3 */
		/* 821FEF4Ch case  108:*/		regs.R27 = regs.R3;
		/* 821FEF4Ch case  108:*/		return 0x821FEF50;
		  /* 821FEF50h */ case  109:  		/* bl -554128 */
		/* 821FEF50h case  109:*/		regs.LR = 0x821FEF54; return 0x82177AC0;
		/* 821FEF50h case  109:*/		return 0x821FEF54;
		  /* 821FEF54h */ case  110:  		/* mr R4, R27 */
		/* 821FEF54h case  110:*/		regs.R4 = regs.R27;
		/* 821FEF54h case  110:*/		return 0x821FEF58;
		  /* 821FEF58h */ case  111:  		/* mr R3, R31 */
		/* 821FEF58h case  111:*/		regs.R3 = regs.R31;
		/* 821FEF58h case  111:*/		return 0x821FEF5C;
		  /* 821FEF5Ch */ case  112:  		/* ld R5, <#[R1 + 1312]> */
		/* 821FEF5Ch case  112:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000520) );
		/* 821FEF5Ch case  112:*/		return 0x821FEF60;
		  /* 821FEF60h */ case  113:  		/* bl -47256 */
		/* 821FEF60h case  113:*/		regs.LR = 0x821FEF64; return 0x821F36C8;
		/* 821FEF60h case  113:*/		return 0x821FEF64;
		  /* 821FEF64h */ case  114:  		/* mr R11, R3 */
		/* 821FEF64h case  114:*/		regs.R11 = regs.R3;
		/* 821FEF64h case  114:*/		return 0x821FEF68;
		  /* 821FEF68h */ case  115:  		/* li R7, 228 */
		/* 821FEF68h case  115:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FEF68h case  115:*/		return 0x821FEF6C;
		  /* 821FEF6Ch */ case  116:  		/* li R6, 2 */
		/* 821FEF6Ch case  116:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821FEF6Ch case  116:*/		return 0x821FEF70;
		  /* 821FEF70h */ case  117:  		/* mr R3, R31 */
		/* 821FEF70h case  117:*/		regs.R3 = regs.R31;
		/* 821FEF70h case  117:*/		return 0x821FEF74;
		  /* 821FEF74h */ case  118:  		/* mr R4, R11 */
		/* 821FEF74h case  118:*/		regs.R4 = regs.R11;
		/* 821FEF74h case  118:*/		return 0x821FEF78;
		  /* 821FEF78h */ case  119:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FEF78h case  119:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FEF78h case  119:*/		return 0x821FEF7C;
		  /* 821FEF7Ch */ case  120:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 821FEF7Ch case  120:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 821FEF7Ch case  120:*/		return 0x821FEF80;
		  /* 821FEF80h */ case  121:  		/* bl 144064 */
		/* 821FEF80h case  121:*/		regs.LR = 0x821FEF84; return 0x82222240;
		/* 821FEF80h case  121:*/		return 0x821FEF84;
		  /* 821FEF84h */ case  122:  		/* mr R4, R3 */
		/* 821FEF84h case  122:*/		regs.R4 = regs.R3;
		/* 821FEF84h case  122:*/		return 0x821FEF88;
		  /* 821FEF88h */ case  123:  		/* mr R3, R31 */
		/* 821FEF88h case  123:*/		regs.R3 = regs.R31;
		/* 821FEF88h case  123:*/		return 0x821FEF8C;
		  /* 821FEF8Ch */ case  124:  		/* bl -64596 */
		/* 821FEF8Ch case  124:*/		regs.LR = 0x821FEF90; return 0x821EF338;
		/* 821FEF8Ch case  124:*/		return 0x821FEF90;
		  /* 821FEF90h */ case  125:  		/* mr R27, R3 */
		/* 821FEF90h case  125:*/		regs.R27 = regs.R3;
		/* 821FEF90h case  125:*/		return 0x821FEF94;
		  /* 821FEF94h */ case  126:  		/* mr R4, R30 */
		/* 821FEF94h case  126:*/		regs.R4 = regs.R30;
		/* 821FEF94h case  126:*/		return 0x821FEF98;
		  /* 821FEF98h */ case  127:  		/* mr R3, R31 */
		/* 821FEF98h case  127:*/		regs.R3 = regs.R31;
		/* 821FEF98h case  127:*/		return 0x821FEF9C;
		  /* 821FEF9Ch */ case  128:  		/* bl -52252 */
		/* 821FEF9Ch case  128:*/		regs.LR = 0x821FEFA0; return 0x821F2380;
		/* 821FEF9Ch case  128:*/		return 0x821FEFA0;
		  /* 821FEFA0h */ case  129:  		/* li R4, 2 */
		/* 821FEFA0h case  129:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FEFA0h case  129:*/		return 0x821FEFA4;
		  /* 821FEFA4h */ case  130:  		/* mr R26, R3 */
		/* 821FEFA4h case  130:*/		regs.R26 = regs.R3;
		/* 821FEFA4h case  130:*/		return 0x821FEFA8;
		  /* 821FEFA8h */ case  131:  		/* bl -554216 */
		/* 821FEFA8h case  131:*/		regs.LR = 0x821FEFAC; return 0x82177AC0;
		/* 821FEFA8h case  131:*/		return 0x821FEFAC;
		  /* 821FEFACh */ case  132:  		/* mr R5, R26 */
		/* 821FEFACh case  132:*/		regs.R5 = regs.R26;
		/* 821FEFACh case  132:*/		return 0x821FEFB0;
		  /* 821FEFB0h */ case  133:  		/* mr R3, R31 */
		/* 821FEFB0h case  133:*/		regs.R3 = regs.R31;
		/* 821FEFB0h case  133:*/		return 0x821FEFB4;
		  /* 821FEFB4h */ case  134:  		/* ld R4, <#[R1 + 1328]> */
		/* 821FEFB4h case  134:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R1 + 0x00000530) );
		/* 821FEFB4h case  134:*/		return 0x821FEFB8;
		  /* 821FEFB8h */ case  135:  		/* bl -49728 */
		/* 821FEFB8h case  135:*/		regs.LR = 0x821FEFBC; return 0x821F2D78;
		/* 821FEFB8h case  135:*/		return 0x821FEFBC;
		  /* 821FEFBCh */ case  136:  		/* mr R4, R3 */
		/* 821FEFBCh case  136:*/		regs.R4 = regs.R3;
		/* 821FEFBCh case  136:*/		return 0x821FEFC0;
		  /* 821FEFC0h */ case  137:  		/* mr R3, R31 */
		/* 821FEFC0h case  137:*/		regs.R3 = regs.R31;
		/* 821FEFC0h case  137:*/		return 0x821FEFC4;
		  /* 821FEFC4h */ case  138:  		/* ld R5, <#[R1 + 1192]> */
		/* 821FEFC4h case  138:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000004A8) );
		/* 821FEFC4h case  138:*/		return 0x821FEFC8;
		  /* 821FEFC8h */ case  139:  		/* bl -46464 */
		/* 821FEFC8h case  139:*/		regs.LR = 0x821FEFCC; return 0x821F3A48;
		/* 821FEFC8h case  139:*/		return 0x821FEFCC;
		  /* 821FEFCCh */ case  140:  		/* mr R26, R3 */
		/* 821FEFCCh case  140:*/		regs.R26 = regs.R3;
		/* 821FEFCCh case  140:*/		return 0x821FEFD0;
		  /* 821FEFD0h */ case  141:  		/* mr R4, R30 */
		/* 821FEFD0h case  141:*/		regs.R4 = regs.R30;
		/* 821FEFD0h case  141:*/		return 0x821FEFD4;
		  /* 821FEFD4h */ case  142:  		/* mr R3, R31 */
		/* 821FEFD4h case  142:*/		regs.R3 = regs.R31;
		/* 821FEFD4h case  142:*/		return 0x821FEFD8;
		  /* 821FEFD8h */ case  143:  		/* bl -52312 */
		/* 821FEFD8h case  143:*/		regs.LR = 0x821FEFDC; return 0x821F2380;
		/* 821FEFD8h case  143:*/		return 0x821FEFDC;
		  /* 821FEFDCh */ case  144:  		/* li R4, 2 */
		/* 821FEFDCh case  144:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FEFDCh case  144:*/		return 0x821FEFE0;
		  /* 821FEFE0h */ case  145:  		/* mr R24, R3 */
		/* 821FEFE0h case  145:*/		regs.R24 = regs.R3;
		/* 821FEFE0h case  145:*/		return 0x821FEFE4;
		  /* 821FEFE4h */ case  146:  		/* bl -554276 */
		/* 821FEFE4h case  146:*/		regs.LR = 0x821FEFE8; return 0x82177AC0;
		/* 821FEFE4h case  146:*/		return 0x821FEFE8;
		  /* 821FEFE8h */ case  147:  		/* mr R5, R24 */
		/* 821FEFE8h case  147:*/		regs.R5 = regs.R24;
		/* 821FEFE8h case  147:*/		return 0x821FEFEC;
		  /* 821FEFECh */ case  148:  		/* mr R4, R26 */
		/* 821FEFECh case  148:*/		regs.R4 = regs.R26;
		/* 821FEFECh case  148:*/		return 0x821FEFF0;
		  /* 821FEFF0h */ case  149:  		/* mr R3, R31 */
		/* 821FEFF0h case  149:*/		regs.R3 = regs.R31;
		/* 821FEFF0h case  149:*/		return 0x821FEFF4;
		  /* 821FEFF4h */ case  150:  		/* bl -63252 */
		/* 821FEFF4h case  150:*/		regs.LR = 0x821FEFF8; return 0x821EF8E0;
		/* 821FEFF4h case  150:*/		return 0x821FEFF8;
		  /* 821FEFF8h */ case  151:  		/* mr R4, R3 */
		/* 821FEFF8h case  151:*/		regs.R4 = regs.R3;
		/* 821FEFF8h case  151:*/		return 0x821FEFFC;
		  /* 821FEFFCh */ case  152:  		/* mr R3, R31 */
		/* 821FEFFCh case  152:*/		regs.R3 = regs.R31;
		/* 821FEFFCh case  152:*/		return 0x821FF000;
		  /* 821FF000h */ case  153:  		/* ld R5, <#[R1 + 1408]> */
		/* 821FF000h case  153:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000580) );
		/* 821FF000h case  153:*/		return 0x821FF004;
		  /* 821FF004h */ case  154:  		/* bl -46524 */
		/* 821FF004h case  154:*/		regs.LR = 0x821FF008; return 0x821F3A48;
		/* 821FF004h case  154:*/		return 0x821FF008;
		  /* 821FF008h */ case  155:  		/* mr R26, R3 */
		/* 821FF008h case  155:*/		regs.R26 = regs.R3;
		/* 821FF008h case  155:*/		return 0x821FF00C;
		  /* 821FF00Ch */ case  156:  		/* mr R4, R30 */
		/* 821FF00Ch case  156:*/		regs.R4 = regs.R30;
		/* 821FF00Ch case  156:*/		return 0x821FF010;
		  /* 821FF010h */ case  157:  		/* mr R3, R31 */
		/* 821FF010h case  157:*/		regs.R3 = regs.R31;
		/* 821FF010h case  157:*/		return 0x821FF014;
		  /* 821FF014h */ case  158:  		/* bl -52372 */
		/* 821FF014h case  158:*/		regs.LR = 0x821FF018; return 0x821F2380;
		/* 821FF014h case  158:*/		return 0x821FF018;
		  /* 821FF018h */ case  159:  		/* li R4, 2 */
		/* 821FF018h case  159:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FF018h case  159:*/		return 0x821FF01C;
		  /* 821FF01Ch */ case  160:  		/* mr R24, R3 */
		/* 821FF01Ch case  160:*/		regs.R24 = regs.R3;
		/* 821FF01Ch case  160:*/		return 0x821FF020;
		  /* 821FF020h */ case  161:  		/* bl -554336 */
		/* 821FF020h case  161:*/		regs.LR = 0x821FF024; return 0x82177AC0;
		/* 821FF020h case  161:*/		return 0x821FF024;
		  /* 821FF024h */ case  162:  		/* mr R5, R24 */
		/* 821FF024h case  162:*/		regs.R5 = regs.R24;
		/* 821FF024h case  162:*/		return 0x821FF028;
		  /* 821FF028h */ case  163:  		/* mr R4, R26 */
		/* 821FF028h case  163:*/		regs.R4 = regs.R26;
		/* 821FF028h case  163:*/		return 0x821FF02C;
		  /* 821FF02Ch */ case  164:  		/* mr R3, R31 */
		/* 821FF02Ch case  164:*/		regs.R3 = regs.R31;
		/* 821FF02Ch case  164:*/		return 0x821FF030;
		  /* 821FF030h */ case  165:  		/* bl -63312 */
		/* 821FF030h case  165:*/		regs.LR = 0x821FF034; return 0x821EF8E0;
		/* 821FF030h case  165:*/		return 0x821FF034;
		  /* 821FF034h */ case  166:  		/* mr R4, R3 */
		/* 821FF034h case  166:*/		regs.R4 = regs.R3;
		/* 821FF034h case  166:*/		return 0x821FF038;
		  /* 821FF038h */ case  167:  		/* mr R3, R31 */
		/* 821FF038h case  167:*/		regs.R3 = regs.R31;
		/* 821FF038h case  167:*/		return 0x821FF03C;
		  /* 821FF03Ch */ case  168:  		/* ld R5, <#[R1 + 1208]> */
		/* 821FF03Ch case  168:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000004B8) );
		/* 821FF03Ch case  168:*/		return 0x821FF040;
		  /* 821FF040h */ case  169:  		/* bl -46584 */
		/* 821FF040h case  169:*/		regs.LR = 0x821FF044; return 0x821F3A48;
		/* 821FF040h case  169:*/		return 0x821FF044;
		  /* 821FF044h */ case  170:  		/* mr R4, R3 */
		/* 821FF044h case  170:*/		regs.R4 = regs.R3;
		/* 821FF044h case  170:*/		return 0x821FF048;
		  /* 821FF048h */ case  171:  		/* mr R5, R27 */
		/* 821FF048h case  171:*/		regs.R5 = regs.R27;
		/* 821FF048h case  171:*/		return 0x821FF04C;
		  /* 821FF04Ch */ case  172:  		/* mr R3, R31 */
		/* 821FF04Ch case  172:*/		regs.R3 = regs.R31;
		/* 821FF04Ch case  172:*/		return 0x821FF050;
		  /* 821FF050h */ case  173:  		/* bl -60200 */
		/* 821FF050h case  173:*/		regs.LR = 0x821FF054; return 0x821F0528;
		/* 821FF050h case  173:*/		return 0x821FF054;
		  /* 821FF054h */ case  174:  		/* mr R27, R3 */
		/* 821FF054h case  174:*/		regs.R27 = regs.R3;
		/* 821FF054h case  174:*/		return 0x821FF058;
		  /* 821FF058h */ case  175:  		/* mr R3, R31 */
		/* 821FF058h case  175:*/		regs.R3 = regs.R31;
		/* 821FF058h case  175:*/		return 0x821FF05C;
		  /* 821FF05Ch */ case  176:  		/* ld R5, <#[R1 + 1640]> */
		/* 821FF05Ch case  176:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000668) );
		/* 821FF05Ch case  176:*/		return 0x821FF060;
		  /* 821FF060h */ case  177:  		/* mr R4, R27 */
		/* 821FF060h case  177:*/		regs.R4 = regs.R27;
		/* 821FF060h case  177:*/		return 0x821FF064;
		  /* 821FF064h */ case  178:  		/* bl -46412 */
		/* 821FF064h case  178:*/		regs.LR = 0x821FF068; return 0x821F3B18;
		/* 821FF064h case  178:*/		return 0x821FF068;
		  /* 821FF068h */ case  179:  		/* mr R4, R3 */
		/* 821FF068h case  179:*/		regs.R4 = regs.R3;
		/* 821FF068h case  179:*/		return 0x821FF06C;
		  /* 821FF06Ch */ case  180:  		/* mr R3, R31 */
		/* 821FF06Ch case  180:*/		regs.R3 = regs.R31;
		/* 821FF06Ch case  180:*/		return 0x821FF070;
		  /* 821FF070h */ case  181:  		/* ld R5, <#[R1 + 1488]> */
		/* 821FF070h case  181:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000005D0) );
		/* 821FF070h case  181:*/		return 0x821FF074;
		  /* 821FF074h */ case  182:  		/* bl -46636 */
		/* 821FF074h case  182:*/		regs.LR = 0x821FF078; return 0x821F3A48;
		/* 821FF074h case  182:*/		return 0x821FF078;
		  /* 821FF078h */ case  183:  		/* mr R26, R3 */
		/* 821FF078h case  183:*/		regs.R26 = regs.R3;
		/* 821FF078h case  183:*/		return 0x821FF07C;
		  /* 821FF07Ch */ case  184:  		/* mr R4, R30 */
		/* 821FF07Ch case  184:*/		regs.R4 = regs.R30;
		/* 821FF07Ch case  184:*/		return 0x821FF080;
		  /* 821FF080h */ case  185:  		/* mr R3, R31 */
		/* 821FF080h case  185:*/		regs.R3 = regs.R31;
		/* 821FF080h case  185:*/		return 0x821FF084;
		  /* 821FF084h */ case  186:  		/* bl -52484 */
		/* 821FF084h case  186:*/		regs.LR = 0x821FF088; return 0x821F2380;
		/* 821FF084h case  186:*/		return 0x821FF088;
		  /* 821FF088h */ case  187:  		/* li R4, 4 */
		/* 821FF088h case  187:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FF088h case  187:*/		return 0x821FF08C;
		  /* 821FF08Ch */ case  188:  		/* mr R24, R3 */
		/* 821FF08Ch case  188:*/		regs.R24 = regs.R3;
		/* 821FF08Ch case  188:*/		return 0x821FF090;
		  /* 821FF090h */ case  189:  		/* bl -554448 */
		/* 821FF090h case  189:*/		regs.LR = 0x821FF094; return 0x82177AC0;
		/* 821FF090h case  189:*/		return 0x821FF094;
		  /* 821FF094h */ case  190:  		/* mr R5, R30 */
		/* 821FF094h case  190:*/		regs.R5 = regs.R30;
		/* 821FF094h case  190:*/		return 0x821FF098;
		  /* 821FF098h */ case  191:  		/* mr R4, R24 */
		/* 821FF098h case  191:*/		regs.R4 = regs.R24;
		/* 821FF098h case  191:*/		return 0x821FF09C;
		  /* 821FF09Ch */ case  192:  		/* mr R3, R31 */
		/* 821FF09Ch case  192:*/		regs.R3 = regs.R31;
		/* 821FF09Ch case  192:*/		return 0x821FF0A0;
		  /* 821FF0A0h */ case  193:  		/* bl -45600 */
		/* 821FF0A0h case  193:*/		regs.LR = 0x821FF0A4; return 0x821F3E80;
		/* 821FF0A0h case  193:*/		return 0x821FF0A4;
		  /* 821FF0A4h */ case  194:  		/* mr R5, R3 */
		/* 821FF0A4h case  194:*/		regs.R5 = regs.R3;
		/* 821FF0A4h case  194:*/		return 0x821FF0A8;
		  /* 821FF0A8h */ case  195:  		/* mr R4, R26 */
		/* 821FF0A8h case  195:*/		regs.R4 = regs.R26;
		/* 821FF0A8h case  195:*/		return 0x821FF0AC;
		  /* 821FF0ACh */ case  196:  		/* mr R3, R31 */
		/* 821FF0ACh case  196:*/		regs.R3 = regs.R31;
		/* 821FF0ACh case  196:*/		return 0x821FF0B0;
		  /* 821FF0B0h */ case  197:  		/* bl -60296 */
		/* 821FF0B0h case  197:*/		regs.LR = 0x821FF0B4; return 0x821F0528;
		/* 821FF0B0h case  197:*/		return 0x821FF0B4;
		  /* 821FF0B4h */ case  198:  		/* mr R5, R3 */
		/* 821FF0B4h case  198:*/		regs.R5 = regs.R3;
		/* 821FF0B4h case  198:*/		return 0x821FF0B8;
		  /* 821FF0B8h */ case  199:  		/* mr R4, R27 */
		/* 821FF0B8h case  199:*/		regs.R4 = regs.R27;
		/* 821FF0B8h case  199:*/		return 0x821FF0BC;
		  /* 821FF0BCh */ case  200:  		/* mr R3, R31 */
		/* 821FF0BCh case  200:*/		regs.R3 = regs.R31;
		/* 821FF0BCh case  200:*/		return 0x821FF0C0;
		  /* 821FF0C0h */ case  201:  		/* bl -60520 */
		/* 821FF0C0h case  201:*/		regs.LR = 0x821FF0C4; return 0x821F0458;
		/* 821FF0C0h case  201:*/		return 0x821FF0C4;
		  /* 821FF0C4h */ case  202:  		/* mr R4, R3 */
		/* 821FF0C4h case  202:*/		regs.R4 = regs.R3;
		/* 821FF0C4h case  202:*/		return 0x821FF0C8;
		  /* 821FF0C8h */ case  203:  		/* cmpwi CR6, R25, 1 */
		/* 821FF0C8h case  203:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000001);
		/* 821FF0C8h case  203:*/		return 0x821FF0CC;
		  /* 821FF0CCh */ case  204:  		/* bc 4, CR6_EQ, 12 */
		/* 821FF0CCh case  204:*/		if ( !regs.CR[6].eq ) { return 0x821FF0D8;  }
		/* 821FF0CCh case  204:*/		return 0x821FF0D0;
		  /* 821FF0D0h */ case  205:  		/* stw R3, <#[R30]> */
		/* 821FF0D0h case  205:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FF0D0h case  205:*/		return 0x821FF0D4;
		  /* 821FF0D4h */ case  206:  		/* b 48 */
		/* 821FF0D4h case  206:*/		return 0x821FF104;
		/* 821FF0D4h case  206:*/		return 0x821FF0D8;
	}
	return 0x821FF0D8;
} // Block from 821FED9Ch-821FF0D8h (207 instructions)

//////////////////////////////////////////////////////
// Block at 821FF0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF0D8);
		  /* 821FF0D8h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821FF0D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821FF0D8h case    0:*/		return 0x821FF0DC;
		  /* 821FF0DCh */ case    1:  		/* li R7, 228 */
		/* 821FF0DCh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FF0DCh case    1:*/		return 0x821FF0E0;
		  /* 821FF0E0h */ case    2:  		/* li R6, 4 */
		/* 821FF0E0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FF0E0h case    2:*/		return 0x821FF0E4;
		  /* 821FF0E4h */ case    3:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FF0E4h case    3:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FF0E4h case    3:*/		return 0x821FF0E8;
		  /* 821FF0E8h */ case    4:  		/* mr R3, R31 */
		/* 821FF0E8h case    4:*/		regs.R3 = regs.R31;
		/* 821FF0E8h case    4:*/		return 0x821FF0EC;
		  /* 821FF0ECh */ case    5:  		/* bl 143700 */
		/* 821FF0ECh case    5:*/		regs.LR = 0x821FF0F0; return 0x82222240;
		/* 821FF0ECh case    5:*/		return 0x821FF0F0;
		  /* 821FF0F0h */ case    6:  		/* mr R4, R3 */
		/* 821FF0F0h case    6:*/		regs.R4 = regs.R3;
		/* 821FF0F0h case    6:*/		return 0x821FF0F4;
		  /* 821FF0F4h */ case    7:  		/* mr R3, R31 */
		/* 821FF0F4h case    7:*/		regs.R3 = regs.R31;
		/* 821FF0F4h case    7:*/		return 0x821FF0F8;
		  /* 821FF0F8h */ case    8:  		/* ld R5, <#[R1 + 1544]> */
		/* 821FF0F8h case    8:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000608) );
		/* 821FF0F8h case    8:*/		return 0x821FF0FC;
		  /* 821FF0FCh */ case    9:  		/* bl -47668 */
		/* 821FF0FCh case    9:*/		regs.LR = 0x821FF100; return 0x821F36C8;
		/* 821FF0FCh case    9:*/		return 0x821FF100;
		  /* 821FF100h */ case   10:  		/* stw R3, <#[R30]> */
		/* 821FF100h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FF100h case   10:*/		return 0x821FF104;
	}
	return 0x821FF104;
} // Block from 821FF0D8h-821FF104h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FF104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF104);
		  /* 821FF104h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821FF104h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FF104h case    0:*/		return 0x821FF108;
		  /* 821FF108h */ case    1:  		/* addi R29, R29, -1 */
		/* 821FF108h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821FF108h case    1:*/		return 0x821FF10C;
		  /* 821FF10Ch */ case    2:  		/* rlwimi R11, R28, 0, 16, 14 */
		/* 821FF10Ch case    2:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R11,regs.R28);
		/* 821FF10Ch case    2:*/		return 0x821FF110;
		  /* 821FF110h */ case    3:  		/* stw R11, <#[R30 + 4]> */
		/* 821FF110h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821FF110h case    3:*/		return 0x821FF114;
		  /* 821FF114h */ case    4:  		/* b -520 */
		/* 821FF114h case    4:*/		return 0x821FEF0C;
		/* 821FF114h case    4:*/		return 0x821FF118;
		  /* 821FF118h */ case    5:  		/* cmplwi CR6, R29, 1 */
		/* 821FF118h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 821FF118h case    5:*/		return 0x821FF11C;
		  /* 821FF11Ch */ case    6:  		/* bc 4, CR6_EQ, 21552 */
		/* 821FF11Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x8220454C;  }
		/* 821FF11Ch case    6:*/		return 0x821FF120;
		  /* 821FF120h */ case    7:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FF120h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FF120h case    7:*/		return 0x821FF124;
		  /* 821FF124h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FF124h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FF124h case    8:*/		return 0x821FF128;
		  /* 821FF128h */ case    9:  		/* bc 12, CR6_EQ, 21564 */
		/* 821FF128h case    9:*/		if ( regs.CR[6].eq ) { return 0x82204564;  }
		/* 821FF128h case    9:*/		return 0x821FF12C;
		  /* 821FF12Ch */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FF12Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FF12Ch case   10:*/		return 0x821FF130;
		  /* 821FF130h */ case   11:  		/* cmpwi CR6, R10, 1 */
		/* 821FF130h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FF130h case   11:*/		return 0x821FF134;
		  /* 821FF134h */ case   12:  		/* bc 4, CR6_EQ, 21552 */
		/* 821FF134h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82204564;  }
		/* 821FF134h case   12:*/		return 0x821FF138;
		  /* 821FF138h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FF138h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FF138h case   13:*/		return 0x821FF13C;
		  /* 821FF13Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821FF13Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FF13Ch case   14:*/		return 0x821FF140;
		  /* 821FF140h */ case   15:  		/* bc 12, CR6_EQ, 21528 */
		/* 821FF140h case   15:*/		if ( regs.CR[6].eq ) { return 0x82204558;  }
		/* 821FF140h case   15:*/		return 0x821FF144;
		  /* 821FF144h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FF144h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FF144h case   16:*/		return 0x821FF148;
		  /* 821FF148h */ case   17:  		/* cmpwi CR6, R10, 1 */
		/* 821FF148h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FF148h case   17:*/		return 0x821FF14C;
		  /* 821FF14Ch */ case   18:  		/* bc 4, CR6_EQ, 21516 */
		/* 821FF14Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x82204558;  }
		/* 821FF14Ch case   18:*/		return 0x821FF150;
		  /* 821FF150h */ case   19:  		/* mr R3, R31 */
		/* 821FF150h case   19:*/		regs.R3 = regs.R31;
		/* 821FF150h case   19:*/		return 0x821FF154;
		  /* 821FF154h */ case   20:  		/* lwz R4, <#[R11 + 8]> */
		/* 821FF154h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 821FF154h case   20:*/		return 0x821FF158;
		  /* 821FF158h */ case   21:  		/* bl -72960 */
		/* 821FF158h case   21:*/		regs.LR = 0x821FF15C; return 0x821ED458;
		/* 821FF158h case   21:*/		return 0x821FF15C;
		  /* 821FF15Ch */ case   22:  		/* lwz R27, <#[R1 + 3500]> */
		/* 821FF15Ch case   22:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FF15Ch case   22:*/		return 0x821FF160;
		  /* 821FF160h */ case   23:  		/* mr R28, R3 */
		/* 821FF160h case   23:*/		regs.R28 = regs.R3;
		/* 821FF160h case   23:*/		return 0x821FF164;
		  /* 821FF164h */ case   24:  		/* mr R5, R3 */
		/* 821FF164h case   24:*/		regs.R5 = regs.R3;
		/* 821FF164h case   24:*/		return 0x821FF168;
		  /* 821FF168h */ case   25:  		/* mr R4, R27 */
		/* 821FF168h case   25:*/		regs.R4 = regs.R27;
		/* 821FF168h case   25:*/		return 0x821FF16C;
		  /* 821FF16Ch */ case   26:  		/* addi R3, R1, 1440 */
		/* 821FF16Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5A0);
		/* 821FF16Ch case   26:*/		return 0x821FF170;
		  /* 821FF170h */ case   27:  		/* bl -36448 */
		/* 821FF170h case   27:*/		regs.LR = 0x821FF174; return 0x821F6310;
		/* 821FF170h case   27:*/		return 0x821FF174;
		  /* 821FF174h */ case   28:  		/* mr R5, R28 */
		/* 821FF174h case   28:*/		regs.R5 = regs.R28;
		/* 821FF174h case   28:*/		return 0x821FF178;
		  /* 821FF178h */ case   29:  		/* mr R4, R27 */
		/* 821FF178h case   29:*/		regs.R4 = regs.R27;
		/* 821FF178h case   29:*/		return 0x821FF17C;
		  /* 821FF17Ch */ case   30:  		/* addi R3, R1, 336 */
		/* 821FF17Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x150);
		/* 821FF17Ch case   30:*/		return 0x821FF180;
		  /* 821FF180h */ case   31:  		/* bl -36464 */
		/* 821FF180h case   31:*/		regs.LR = 0x821FF184; return 0x821F6310;
		/* 821FF180h case   31:*/		return 0x821FF184;
		  /* 821FF184h */ case   32:  		/* li R5, 4 */
		/* 821FF184h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FF184h case   32:*/		return 0x821FF188;
		  /* 821FF188h */ case   33:  		/* mr R4, R31 */
		/* 821FF188h case   33:*/		regs.R4 = regs.R31;
		/* 821FF188h case   33:*/		return 0x821FF18C;
		  /* 821FF18Ch */ case   34:  		/* fmr FR4, FR31 */
		/* 821FF18Ch case   34:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF18Ch case   34:*/		return 0x821FF190;
		  /* 821FF190h */ case   35:  		/* addi R3, R1, 488 */
		/* 821FF190h case   35:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1E8);
		/* 821FF190h case   35:*/		return 0x821FF194;
		  /* 821FF194h */ case   36:  		/* fmr FR3, FR31 */
		/* 821FF194h case   36:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF194h case   36:*/		return 0x821FF198;
		  /* 821FF198h */ case   37:  		/* fmr FR2, FR31 */
		/* 821FF198h case   37:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF198h case   37:*/		return 0x821FF19C;
		  /* 821FF19Ch */ case   38:  		/* fmr FR1, FR31 */
		/* 821FF19Ch case   38:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821FF19Ch case   38:*/		return 0x821FF1A0;
		  /* 821FF1A0h */ case   39:  		/* bl 162992 */
		/* 821FF1A0h case   39:*/		regs.LR = 0x821FF1A4; return 0x82226E50;
		/* 821FF1A0h case   39:*/		return 0x821FF1A4;
		  /* 821FF1A4h */ case   40:  		/* lwz R11, <#[R1 + 492]> */
		/* 821FF1A4h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001EC) );
		/* 821FF1A4h case   40:*/		return 0x821FF1A8;
		  /* 821FF1A8h */ case   41:  		/* mr R29, R28 */
		/* 821FF1A8h case   41:*/		regs.R29 = regs.R28;
		/* 821FF1A8h case   41:*/		return 0x821FF1AC;
		  /* 821FF1ACh */ case   42:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 821FF1ACh case   42:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 821FF1ACh case   42:*/		return 0x821FF1B0;
		  /* 821FF1B0h */ case   43:  		/* oris R11, R11, 2 */
		/* 821FF1B0h case   43:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FF1B0h case   43:*/		return 0x821FF1B4;
		  /* 821FF1B4h */ case   44:  		/* stw R11, <#[R1 + 492]> */
		/* 821FF1B4h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001EC) );
		/* 821FF1B4h case   44:*/		return 0x821FF1B8;
		  /* 821FF1B8h */ case   45:  		/* cmplwi CR6, R29, 0 */
		/* 821FF1B8h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FF1B8h case   45:*/		return 0x821FF1BC;
		  /* 821FF1BCh */ case   46:  		/* bc 12, CR6_EQ, 124 */
		/* 821FF1BCh case   46:*/		if ( regs.CR[6].eq ) { return 0x821FF238;  }
		/* 821FF1BCh case   46:*/		return 0x821FF1C0;
		  /* 821FF1C0h */ case   47:  		/* cmplwi CR6, R29, 4 */
		/* 821FF1C0h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FF1C0h case   47:*/		return 0x821FF1C4;
		  /* 821FF1C4h */ case   48:  		/* mr R30, R29 */
		/* 821FF1C4h case   48:*/		regs.R30 = regs.R29;
		/* 821FF1C4h case   48:*/		return 0x821FF1C8;
		  /* 821FF1C8h */ case   49:  		/* bc 12, CR6_LT, 8 */
		/* 821FF1C8h case   49:*/		if ( regs.CR[6].lt ) { return 0x821FF1D0;  }
		/* 821FF1C8h case   49:*/		return 0x821FF1CC;
		  /* 821FF1CCh */ case   50:  		/* li R30, 4 */
		/* 821FF1CCh case   50:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FF1CCh case   50:*/		return 0x821FF1D0;
	}
	return 0x821FF1D0;
} // Block from 821FF104h-821FF1D0h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821FF1D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF1D0);
		  /* 821FF1D0h */ case    0:  		/* li R6, 228 */
		/* 821FF1D0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FF1D0h case    0:*/		return 0x821FF1D4;
		  /* 821FF1D4h */ case    1:  		/* mr R5, R30 */
		/* 821FF1D4h case    1:*/		regs.R5 = regs.R30;
		/* 821FF1D4h case    1:*/		return 0x821FF1D8;
		  /* 821FF1D8h */ case    2:  		/* addi R4, R1, 1440 */
		/* 821FF1D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5A0);
		/* 821FF1D8h case    2:*/		return 0x821FF1DC;
		  /* 821FF1DCh */ case    3:  		/* mr R3, R31 */
		/* 821FF1DCh case    3:*/		regs.R3 = regs.R31;
		/* 821FF1DCh case    3:*/		return 0x821FF1E0;
		  /* 821FF1E0h */ case    4:  		/* bl -51864 */
		/* 821FF1E0h case    4:*/		regs.LR = 0x821FF1E4; return 0x821F2748;
		/* 821FF1E0h case    4:*/		return 0x821FF1E4;
		  /* 821FF1E4h */ case    5:  		/* mr R26, R3 */
		/* 821FF1E4h case    5:*/		regs.R26 = regs.R3;
		/* 821FF1E4h case    5:*/		return 0x821FF1E8;
		  /* 821FF1E8h */ case    6:  		/* addi R4, R1, 488 */
		/* 821FF1E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x1E8);
		/* 821FF1E8h case    6:*/		return 0x821FF1EC;
		  /* 821FF1ECh */ case    7:  		/* mr R3, R31 */
		/* 821FF1ECh case    7:*/		regs.R3 = regs.R31;
		/* 821FF1ECh case    7:*/		return 0x821FF1F0;
		  /* 821FF1F0h */ case    8:  		/* bl -52848 */
		/* 821FF1F0h case    8:*/		regs.LR = 0x821FF1F4; return 0x821F2380;
		/* 821FF1F0h case    8:*/		return 0x821FF1F4;
		  /* 821FF1F4h */ case    9:  		/* mr R11, R3 */
		/* 821FF1F4h case    9:*/		regs.R11 = regs.R3;
		/* 821FF1F4h case    9:*/		return 0x821FF1F8;
		  /* 821FF1F8h */ case   10:  		/* mr R4, R26 */
		/* 821FF1F8h case   10:*/		regs.R4 = regs.R26;
		/* 821FF1F8h case   10:*/		return 0x821FF1FC;
		  /* 821FF1FCh */ case   11:  		/* mr R3, R31 */
		/* 821FF1FCh case   11:*/		regs.R3 = regs.R31;
		/* 821FF1FCh case   11:*/		return 0x821FF200;
		  /* 821FF200h */ case   12:  		/* mr R5, R11 */
		/* 821FF200h case   12:*/		regs.R5 = regs.R11;
		/* 821FF200h case   12:*/		return 0x821FF204;
		  /* 821FF204h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821FF204h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FF204h case   13:*/		return 0x821FF208;
		  /* 821FF208h */ case   14:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 821FF208h case   14:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 821FF208h case   14:*/		return 0x821FF20C;
		  /* 821FF20Ch */ case   15:  		/* stw R10, <#[R11]> */
		/* 821FF20Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FF20Ch case   15:*/		return 0x821FF210;
		  /* 821FF210h */ case   16:  		/* bl -68152 */
		/* 821FF210h case   16:*/		regs.LR = 0x821FF214; return 0x821EE7D8;
		/* 821FF210h case   16:*/		return 0x821FF214;
		  /* 821FF214h */ case   17:  		/* mr R5, R3 */
		/* 821FF214h case   17:*/		regs.R5 = regs.R3;
		/* 821FF214h case   17:*/		return 0x821FF218;
		  /* 821FF218h */ case   18:  		/* mr R4, R30 */
		/* 821FF218h case   18:*/		regs.R4 = regs.R30;
		/* 821FF218h case   18:*/		return 0x821FF21C;
		  /* 821FF21Ch */ case   19:  		/* addi R3, R1, 336 */
		/* 821FF21Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x150);
		/* 821FF21Ch case   19:*/		return 0x821FF220;
		  /* 821FF220h */ case   20:  		/* bl -54024 */
		/* 821FF220h case   20:*/		regs.LR = 0x821FF224; return 0x821F1F18;
		/* 821FF220h case   20:*/		return 0x821FF224;
		  /* 821FF224h */ case   21:  		/* mr R4, R30 */
		/* 821FF224h case   21:*/		regs.R4 = regs.R30;
		/* 821FF224h case   21:*/		return 0x821FF228;
		  /* 821FF228h */ case   22:  		/* addi R3, R1, 1440 */
		/* 821FF228h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5A0);
		/* 821FF228h case   22:*/		return 0x821FF22C;
		  /* 821FF22Ch */ case   23:  		/* subf R29, R30, R29 */
		/* 821FF22Ch case   23:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 821FF22Ch case   23:*/		return 0x821FF230;
		  /* 821FF230h */ case   24:  		/* bl -70712 */
		/* 821FF230h case   24:*/		regs.LR = 0x821FF234; return 0x821EDDF8;
		/* 821FF230h case   24:*/		return 0x821FF234;
		  /* 821FF234h */ case   25:  		/* b -124 */
		/* 821FF234h case   25:*/		return 0x821FF1B8;
		/* 821FF234h case   25:*/		return 0x821FF238;
	}
	return 0x821FF238;
} // Block from 821FF1D0h-821FF238h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821FF238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF238);
		  /* 821FF238h */ case    0:  		/* cmplwi CR6, R28, 1 */
		/* 821FF238h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 821FF238h case    0:*/		return 0x821FF23C;
		  /* 821FF23Ch */ case    1:  		/* bc 4, CR6_GT, -12060 */
		/* 821FF23Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x821FC320;  }
		/* 821FF23Ch case    1:*/		return 0x821FF240;
		  /* 821FF240h */ case    2:  		/* mr R29, R28 */
		/* 821FF240h case    2:*/		regs.R29 = regs.R28;
		/* 821FF240h case    2:*/		return 0x821FF244;
		  /* 821FF244h */ case    3:  		/* cmplwi CR6, R28, 4 */
		/* 821FF244h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 821FF244h case    3:*/		return 0x821FF248;
		  /* 821FF248h */ case    4:  		/* bc 12, CR6_LT, 164 */
		/* 821FF248h case    4:*/		if ( regs.CR[6].lt ) { return 0x821FF2EC;  }
		/* 821FF248h case    4:*/		return 0x821FF24C;
		  /* 821FF24Ch */ case    5:  		/* subf R11, R29, R28 */
		/* 821FF24Ch case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R28);
		/* 821FF24Ch case    5:*/		return 0x821FF250;
		  /* 821FF250h */ case    6:  		/* addi R3, R1, 336 */
		/* 821FF250h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x150);
		/* 821FF250h case    6:*/		return 0x821FF254;
		  /* 821FF254h */ case    7:  		/* addi R4, R11, 4 */
		/* 821FF254h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4);
		/* 821FF254h case    7:*/		return 0x821FF258;
		  /* 821FF258h */ case    8:  		/* bl -43864 */
		/* 821FF258h case    8:*/		regs.LR = 0x821FF25C; return 0x821F4700;
		/* 821FF258h case    8:*/		return 0x821FF25C;
		  /* 821FF25Ch */ case    9:  		/* li R6, 228 */
		/* 821FF25Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FF25Ch case    9:*/		return 0x821FF260;
		  /* 821FF260h */ case   10:  		/* li R5, 4 */
		/* 821FF260h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FF260h case   10:*/		return 0x821FF264;
		  /* 821FF264h */ case   11:  		/* addi R4, R1, 336 */
		/* 821FF264h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x150);
		/* 821FF264h case   11:*/		return 0x821FF268;
		  /* 821FF268h */ case   12:  		/* mr R3, R31 */
		/* 821FF268h case   12:*/		regs.R3 = regs.R31;
		/* 821FF268h case   12:*/		return 0x821FF26C;
		  /* 821FF26Ch */ case   13:  		/* bl -52004 */
		/* 821FF26Ch case   13:*/		regs.LR = 0x821FF270; return 0x821F2748;
		/* 821FF26Ch case   13:*/		return 0x821FF270;
		  /* 821FF270h */ case   14:  		/* mr R4, R3 */
		/* 821FF270h case   14:*/		regs.R4 = regs.R3;
		/* 821FF270h case   14:*/		return 0x821FF274;
		  /* 821FF274h */ case   15:  		/* cmpwi CR6, R25, 2 */
		/* 821FF274h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821FF274h case   15:*/		return 0x821FF278;
		  /* 821FF278h */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 821FF278h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821FF298;  }
		/* 821FF278h case   16:*/		return 0x821FF27C;
		  /* 821FF27Ch */ case   17:  		/* mr R3, R31 */
		/* 821FF27Ch case   17:*/		regs.R3 = regs.R31;
		/* 821FF27Ch case   17:*/		return 0x821FF280;
		  /* 821FF280h */ case   18:  		/* lwz R5, <#[R4 + 12]> */
		/* 821FF280h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821FF280h case   18:*/		return 0x821FF284;
		  /* 821FF284h */ case   19:  		/* bl -582036 */
		/* 821FF284h case   19:*/		regs.LR = 0x821FF288; return 0x821710F0;
		/* 821FF284h case   19:*/		return 0x821FF288;
		  /* 821FF288h */ case   20:  		/* li R4, 4 */
		/* 821FF288h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FF288h case   20:*/		return 0x821FF28C;
		  /* 821FF28Ch */ case   21:  		/* mr R30, R3 */
		/* 821FF28Ch case   21:*/		regs.R30 = regs.R3;
		/* 821FF28Ch case   21:*/		return 0x821FF290;
		  /* 821FF290h */ case   22:  		/* bl -554960 */
		/* 821FF290h case   22:*/		regs.LR = 0x821FF294; return 0x82177AC0;
		/* 821FF290h case   22:*/		return 0x821FF294;
		  /* 821FF294h */ case   23:  		/* mr R4, R30 */
		/* 821FF294h case   23:*/		regs.R4 = regs.R30;
		/* 821FF294h case   23:*/		return 0x821FF298;
	}
	return 0x821FF298;
} // Block from 821FF238h-821FF298h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821FF298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF298);
		  /* 821FF298h */ case    0:  		/* mr R3, R31 */
		/* 821FF298h case    0:*/		regs.R3 = regs.R31;
		/* 821FF298h case    0:*/		return 0x821FF29C;
		  /* 821FF29Ch */ case    1:  		/* bl -66740 */
		/* 821FF29Ch case    1:*/		regs.LR = 0x821FF2A0; return 0x821EEDE8;
		/* 821FF29Ch case    1:*/		return 0x821FF2A0;
		  /* 821FF2A0h */ case    2:  		/* mr R4, R3 */
		/* 821FF2A0h case    2:*/		regs.R4 = regs.R3;
		/* 821FF2A0h case    2:*/		return 0x821FF2A4;
		  /* 821FF2A4h */ case    3:  		/* mr R3, R31 */
		/* 821FF2A4h case    3:*/		regs.R3 = regs.R31;
		/* 821FF2A4h case    3:*/		return 0x821FF2A8;
		  /* 821FF2A8h */ case    4:  		/* bl -553640 */
		/* 821FF2A8h case    4:*/		regs.LR = 0x821FF2AC; return 0x82178000;
		/* 821FF2A8h case    4:*/		return 0x821FF2AC;
		  /* 821FF2ACh */ case    5:  		/* mr R4, R3 */
		/* 821FF2ACh case    5:*/		regs.R4 = regs.R3;
		/* 821FF2ACh case    5:*/		return 0x821FF2B0;
		  /* 821FF2B0h */ case    6:  		/* cmpwi CR6, R25, 2 */
		/* 821FF2B0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821FF2B0h case    6:*/		return 0x821FF2B4;
		  /* 821FF2B4h */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 821FF2B4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821FF2D4;  }
		/* 821FF2B4h case    7:*/		return 0x821FF2B8;
		  /* 821FF2B8h */ case    8:  		/* mr R3, R31 */
		/* 821FF2B8h case    8:*/		regs.R3 = regs.R31;
		/* 821FF2B8h case    8:*/		return 0x821FF2BC;
		  /* 821FF2BCh */ case    9:  		/* lwz R5, <#[R4 + 12]> */
		/* 821FF2BCh case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821FF2BCh case    9:*/		return 0x821FF2C0;
		  /* 821FF2C0h */ case   10:  		/* bl -582096 */
		/* 821FF2C0h case   10:*/		regs.LR = 0x821FF2C4; return 0x821710F0;
		/* 821FF2C0h case   10:*/		return 0x821FF2C4;
		  /* 821FF2C4h */ case   11:  		/* li R4, 4 */
		/* 821FF2C4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FF2C4h case   11:*/		return 0x821FF2C8;
		  /* 821FF2C8h */ case   12:  		/* mr R30, R3 */
		/* 821FF2C8h case   12:*/		regs.R30 = regs.R3;
		/* 821FF2C8h case   12:*/		return 0x821FF2CC;
		  /* 821FF2CCh */ case   13:  		/* bl -555020 */
		/* 821FF2CCh case   13:*/		regs.LR = 0x821FF2D0; return 0x82177AC0;
		/* 821FF2CCh case   13:*/		return 0x821FF2D0;
		  /* 821FF2D0h */ case   14:  		/* mr R4, R30 */
		/* 821FF2D0h case   14:*/		regs.R4 = regs.R30;
		/* 821FF2D0h case   14:*/		return 0x821FF2D4;
	}
	return 0x821FF2D4;
} // Block from 821FF298h-821FF2D4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FF2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF2D4);
		  /* 821FF2D4h */ case    0:  		/* li R5, 0 */
		/* 821FF2D4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FF2D4h case    0:*/		return 0x821FF2D8;
		  /* 821FF2D8h */ case    1:  		/* addi R3, R1, 336 */
		/* 821FF2D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x150);
		/* 821FF2D8h case    1:*/		return 0x821FF2DC;
		  /* 821FF2DCh */ case    2:  		/* bl -54292 */
		/* 821FF2DCh case    2:*/		regs.LR = 0x821FF2E0; return 0x821F1EC8;
		/* 821FF2DCh case    2:*/		return 0x821FF2E0;
		  /* 821FF2E0h */ case    3:  		/* addi R29, R29, -3 */
		/* 821FF2E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFD);
		/* 821FF2E0h case    3:*/		return 0x821FF2E4;
		  /* 821FF2E4h */ case    4:  		/* cmplwi CR6, R29, 4 */
		/* 821FF2E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FF2E4h case    4:*/		return 0x821FF2E8;
		  /* 821FF2E8h */ case    5:  		/* bc 4, CR6_LT, -156 */
		/* 821FF2E8h case    5:*/		if ( !regs.CR[6].lt ) { return 0x821FF24C;  }
		/* 821FF2E8h case    5:*/		return 0x821FF2EC;
	}
	return 0x821FF2EC;
} // Block from 821FF2D4h-821FF2ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FF2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF2EC);
		  /* 821FF2ECh */ case    0:  		/* cmplwi CR6, R29, 1 */
		/* 821FF2ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 821FF2ECh case    0:*/		return 0x821FF2F0;
		  /* 821FF2F0h */ case    1:  		/* bc 4, CR6_GT, 232 */
		/* 821FF2F0h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821FF3D8;  }
		/* 821FF2F0h case    1:*/		return 0x821FF2F4;
		  /* 821FF2F4h */ case    2:  		/* mr R4, R28 */
		/* 821FF2F4h case    2:*/		regs.R4 = regs.R28;
		/* 821FF2F4h case    2:*/		return 0x821FF2F8;
		  /* 821FF2F8h */ case    3:  		/* addi R3, R1, 336 */
		/* 821FF2F8h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x150);
		/* 821FF2F8h case    3:*/		return 0x821FF2FC;
		  /* 821FF2FCh */ case    4:  		/* bl -44028 */
		/* 821FF2FCh case    4:*/		regs.LR = 0x821FF300; return 0x821F4700;
		/* 821FF2FCh case    4:*/		return 0x821FF300;
		  /* 821FF300h */ case    5:  		/* li R6, 228 */
		/* 821FF300h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FF300h case    5:*/		return 0x821FF304;
		  /* 821FF304h */ case    6:  		/* mr R5, R29 */
		/* 821FF304h case    6:*/		regs.R5 = regs.R29;
		/* 821FF304h case    6:*/		return 0x821FF308;
		  /* 821FF308h */ case    7:  		/* addi R4, R1, 336 */
		/* 821FF308h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x150);
		/* 821FF308h case    7:*/		return 0x821FF30C;
		  /* 821FF30Ch */ case    8:  		/* mr R3, R31 */
		/* 821FF30Ch case    8:*/		regs.R3 = regs.R31;
		/* 821FF30Ch case    8:*/		return 0x821FF310;
		  /* 821FF310h */ case    9:  		/* bl -52168 */
		/* 821FF310h case    9:*/		regs.LR = 0x821FF314; return 0x821F2748;
		/* 821FF310h case    9:*/		return 0x821FF314;
		  /* 821FF314h */ case   10:  		/* mr R30, R3 */
		/* 821FF314h case   10:*/		regs.R30 = regs.R3;
		/* 821FF314h case   10:*/		return 0x821FF318;
		  /* 821FF318h */ case   11:  		/* li R4, 228 */
		/* 821FF318h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0xE4);
		/* 821FF318h case   11:*/		return 0x821FF31C;
		  /* 821FF31Ch */ case   12:  		/* cmplwi CR6, R29, 4 */
		/* 821FF31Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FF31Ch case   12:*/		return 0x821FF320;
		  /* 821FF320h */ case   13:  		/* bc 4, CR6_LT, 48 */
		/* 821FF320h case   13:*/		if ( !regs.CR[6].lt ) { return 0x821FF350;  }
		/* 821FF320h case   13:*/		return 0x821FF324;
		  /* 821FF324h */ case   14:  		/* subfic R10, R29, 4 */
		/* 821FF324h case   14:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R29,0x4);
		/* 821FF324h case   14:*/		return 0x821FF328;
		  /* 821FF328h */ case   15:  		/* rlwinm R11, R29, 1, 0, 30 */
		/* 821FF328h case   15:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R29);
		/* 821FF328h case   15:*/		return 0x821FF32C;
		  /* 821FF32Ch */ case   16:  		/* mtspr CTR, R10 */
		/* 821FF32Ch case   16:*/		regs.CTR = regs.R10;
		/* 821FF32Ch case   16:*/		return 0x821FF330;
		  /* 821FF330h */ case   17:  		/* li R10, 3 */
		/* 821FF330h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821FF330h case   17:*/		return 0x821FF334;
		  /* 821FF334h */ case   18:  		/* li R9, 0 */
		/* 821FF334h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821FF334h case   18:*/		return 0x821FF338;
		  /* 821FF338h */ case   19:  		/* slw R10, R10, R11 */
		/* 821FF338h case   19:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821FF338h case   19:*/		return 0x821FF33C;
		  /* 821FF33Ch */ case   20:  		/* slw R9, R9, R11 */
		/* 821FF33Ch case   20:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821FF33Ch case   20:*/		return 0x821FF340;
		  /* 821FF340h */ case   21:  		/* andc R10, R4, R10 */
		/* 821FF340h case   21:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R4,regs.R10);
		/* 821FF340h case   21:*/		return 0x821FF344;
		  /* 821FF344h */ case   22:  		/* addi R11, R11, 2 */
		/* 821FF344h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FF344h case   22:*/		return 0x821FF348;
		  /* 821FF348h */ case   23:  		/* or R4, R10, R9 */
		/* 821FF348h case   23:*/		cpu::op::or<0>(regs,&regs.R4,regs.R10,regs.R9);
		/* 821FF348h case   23:*/		return 0x821FF34C;
		  /* 821FF34Ch */ case   24:  		/* bc 16, CR0_LT, -28 */
		/* 821FF34Ch case   24:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821FF330;  }
		/* 821FF34Ch case   24:*/		return 0x821FF350;
	}
	return 0x821FF350;
} // Block from 821FF2ECh-821FF350h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821FF350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF350);
		  /* 821FF350h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821FF350h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FF350h case    0:*/		return 0x821FF354;
		  /* 821FF354h */ case    1:  		/* li R10, 1 */
		/* 821FF354h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821FF354h case    1:*/		return 0x821FF358;
		  /* 821FF358h */ case    2:  		/* mr R3, R30 */
		/* 821FF358h case    2:*/		regs.R3 = regs.R30;
		/* 821FF358h case    2:*/		return 0x821FF35C;
		  /* 821FF35Ch */ case    3:  		/* rlwimi R11, R10, 27, 4, 6 */
		/* 821FF35Ch case    3:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R11,regs.R10);
		/* 821FF35Ch case    3:*/		return 0x821FF360;
		  /* 821FF360h */ case    4:  		/* stw R11, <#[R30]> */
		/* 821FF360h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821FF360h case    4:*/		return 0x821FF364;
		  /* 821FF364h */ case    5:  		/* bl -430452 */
		/* 821FF364h case    5:*/		regs.LR = 0x821FF368; return 0x821961F0;
		/* 821FF364h case    5:*/		return 0x821FF368;
		  /* 821FF368h */ case    6:  		/* cmpwi CR6, R25, 2 */
		/* 821FF368h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821FF368h case    6:*/		return 0x821FF36C;
		  /* 821FF36Ch */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 821FF36Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821FF38C;  }
		/* 821FF36Ch case    7:*/		return 0x821FF370;
		  /* 821FF370h */ case    8:  		/* mr R4, R30 */
		/* 821FF370h case    8:*/		regs.R4 = regs.R30;
		/* 821FF370h case    8:*/		return 0x821FF374;
		  /* 821FF374h */ case    9:  		/* lwz R5, <#[R30 + 12]> */
		/* 821FF374h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821FF374h case    9:*/		return 0x821FF378;
		  /* 821FF378h */ case   10:  		/* mr R3, R31 */
		/* 821FF378h case   10:*/		regs.R3 = regs.R31;
		/* 821FF378h case   10:*/		return 0x821FF37C;
		  /* 821FF37Ch */ case   11:  		/* bl -582284 */
		/* 821FF37Ch case   11:*/		regs.LR = 0x821FF380; return 0x821710F0;
		/* 821FF37Ch case   11:*/		return 0x821FF380;
		  /* 821FF380h */ case   12:  		/* li R4, 4 */
		/* 821FF380h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FF380h case   12:*/		return 0x821FF384;
		  /* 821FF384h */ case   13:  		/* mr R30, R3 */
		/* 821FF384h case   13:*/		regs.R30 = regs.R3;
		/* 821FF384h case   13:*/		return 0x821FF388;
		  /* 821FF388h */ case   14:  		/* bl -555208 */
		/* 821FF388h case   14:*/		regs.LR = 0x821FF38C; return 0x82177AC0;
		/* 821FF388h case   14:*/		return 0x821FF38C;
	}
	return 0x821FF38C;
} // Block from 821FF350h-821FF38Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821FF38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF38C);
		  /* 821FF38Ch */ case    0:  		/* mr R4, R30 */
		/* 821FF38Ch case    0:*/		regs.R4 = regs.R30;
		/* 821FF38Ch case    0:*/		return 0x821FF390;
		  /* 821FF390h */ case    1:  		/* mr R3, R31 */
		/* 821FF390h case    1:*/		regs.R3 = regs.R31;
		/* 821FF390h case    1:*/		return 0x821FF394;
		  /* 821FF394h */ case    2:  		/* bl -66988 */
		/* 821FF394h case    2:*/		regs.LR = 0x821FF398; return 0x821EEDE8;
		/* 821FF394h case    2:*/		return 0x821FF398;
		  /* 821FF398h */ case    3:  		/* mr R4, R3 */
		/* 821FF398h case    3:*/		regs.R4 = regs.R3;
		/* 821FF398h case    3:*/		return 0x821FF39C;
		  /* 821FF39Ch */ case    4:  		/* mr R3, R31 */
		/* 821FF39Ch case    4:*/		regs.R3 = regs.R31;
		/* 821FF39Ch case    4:*/		return 0x821FF3A0;
		  /* 821FF3A0h */ case    5:  		/* bl -553888 */
		/* 821FF3A0h case    5:*/		regs.LR = 0x821FF3A4; return 0x82178000;
		/* 821FF3A0h case    5:*/		return 0x821FF3A4;
		  /* 821FF3A4h */ case    6:  		/* mr R4, R3 */
		/* 821FF3A4h case    6:*/		regs.R4 = regs.R3;
		/* 821FF3A4h case    6:*/		return 0x821FF3A8;
		  /* 821FF3A8h */ case    7:  		/* cmpwi CR6, R25, 2 */
		/* 821FF3A8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821FF3A8h case    7:*/		return 0x821FF3AC;
		  /* 821FF3ACh */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 821FF3ACh case    8:*/		if ( !regs.CR[6].eq ) { return 0x821FF3CC;  }
		/* 821FF3ACh case    8:*/		return 0x821FF3B0;
		  /* 821FF3B0h */ case    9:  		/* mr R3, R31 */
		/* 821FF3B0h case    9:*/		regs.R3 = regs.R31;
		/* 821FF3B0h case    9:*/		return 0x821FF3B4;
		  /* 821FF3B4h */ case   10:  		/* lwz R5, <#[R4 + 12]> */
		/* 821FF3B4h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821FF3B4h case   10:*/		return 0x821FF3B8;
		  /* 821FF3B8h */ case   11:  		/* bl -582344 */
		/* 821FF3B8h case   11:*/		regs.LR = 0x821FF3BC; return 0x821710F0;
		/* 821FF3B8h case   11:*/		return 0x821FF3BC;
		  /* 821FF3BCh */ case   12:  		/* li R4, 4 */
		/* 821FF3BCh case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FF3BCh case   12:*/		return 0x821FF3C0;
		  /* 821FF3C0h */ case   13:  		/* mr R30, R3 */
		/* 821FF3C0h case   13:*/		regs.R30 = regs.R3;
		/* 821FF3C0h case   13:*/		return 0x821FF3C4;
		  /* 821FF3C4h */ case   14:  		/* bl -555268 */
		/* 821FF3C4h case   14:*/		regs.LR = 0x821FF3C8; return 0x82177AC0;
		/* 821FF3C4h case   14:*/		return 0x821FF3C8;
		  /* 821FF3C8h */ case   15:  		/* mr R4, R30 */
		/* 821FF3C8h case   15:*/		regs.R4 = regs.R30;
		/* 821FF3C8h case   15:*/		return 0x821FF3CC;
	}
	return 0x821FF3CC;
} // Block from 821FF38Ch-821FF3CCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821FF3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF3CC);
		  /* 821FF3CCh */ case    0:  		/* li R5, 0 */
		/* 821FF3CCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821FF3CCh case    0:*/		return 0x821FF3D0;
		  /* 821FF3D0h */ case    1:  		/* addi R3, R1, 336 */
		/* 821FF3D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x150);
		/* 821FF3D0h case    1:*/		return 0x821FF3D4;
		  /* 821FF3D4h */ case    2:  		/* bl -54540 */
		/* 821FF3D4h case    2:*/		regs.LR = 0x821FF3D8; return 0x821F1EC8;
		/* 821FF3D4h case    2:*/		return 0x821FF3D8;
	}
	return 0x821FF3D8;
} // Block from 821FF3CCh-821FF3D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FF3D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF3D8);
		  /* 821FF3D8h */ case    0:  		/* addic. R5, R28, -1 */
		/* 821FF3D8h case    0:*/		cpu::op::addic<1>(regs,&regs.R5,regs.R28,0xFFFFFFFF);
		/* 821FF3D8h case    0:*/		return 0x821FF3DC;
		  /* 821FF3DCh */ case    1:  		/* bc 12, CR0_EQ, -12476 */
		/* 821FF3DCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FF3DCh case    1:*/		return 0x821FF3E0;
		  /* 821FF3E0h */ case    2:  		/* mr R4, R27 */
		/* 821FF3E0h case    2:*/		regs.R4 = regs.R27;
		/* 821FF3E0h case    2:*/		return 0x821FF3E4;
		  /* 821FF3E4h */ case    3:  		/* addi R3, R1, 2984 */
		/* 821FF3E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBA8);
		/* 821FF3E4h case    3:*/		return 0x821FF3E8;
		  /* 821FF3E8h */ case    4:  		/* b -6748 */
		/* 821FF3E8h case    4:*/		return 0x821FD98C;
		/* 821FF3E8h case    4:*/		return 0x821FF3EC;
		  /* 821FF3ECh */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 821FF3ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FF3ECh case    5:*/		return 0x821FF3F0;
		  /* 821FF3F0h */ case    6:  		/* bc 4, CR6_EQ, 20864 */
		/* 821FF3F0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82204570;  }
		/* 821FF3F0h case    6:*/		return 0x821FF3F4;
		  /* 821FF3F4h */ case    7:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FF3F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FF3F4h case    7:*/		return 0x821FF3F8;
		  /* 821FF3F8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821FF3F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FF3F8h case    8:*/		return 0x821FF3FC;
		  /* 821FF3FCh */ case    9:  		/* bc 12, CR6_EQ, 20876 */
		/* 821FF3FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82204588;  }
		/* 821FF3FCh case    9:*/		return 0x821FF400;
		  /* 821FF400h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FF400h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FF400h case   10:*/		return 0x821FF404;
		  /* 821FF404h */ case   11:  		/* cmpwi CR6, R10, 1 */
		/* 821FF404h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FF404h case   11:*/		return 0x821FF408;
		  /* 821FF408h */ case   12:  		/* bc 4, CR6_EQ, 20864 */
		/* 821FF408h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82204588;  }
		/* 821FF408h case   12:*/		return 0x821FF40C;
		  /* 821FF40Ch */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FF40Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FF40Ch case   13:*/		return 0x821FF410;
		  /* 821FF410h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821FF410h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FF410h case   14:*/		return 0x821FF414;
		  /* 821FF414h */ case   15:  		/* bc 12, CR6_EQ, 20840 */
		/* 821FF414h case   15:*/		if ( regs.CR[6].eq ) { return 0x8220457C;  }
		/* 821FF414h case   15:*/		return 0x821FF418;
		  /* 821FF418h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FF418h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FF418h case   16:*/		return 0x821FF41C;
		  /* 821FF41Ch */ case   17:  		/* cmpwi CR6, R10, 1 */
		/* 821FF41Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FF41Ch case   17:*/		return 0x821FF420;
		  /* 821FF420h */ case   18:  		/* bc 4, CR6_EQ, 20828 */
		/* 821FF420h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8220457C;  }
		/* 821FF420h case   18:*/		return 0x821FF424;
		  /* 821FF424h */ case   19:  		/* mr R3, R31 */
		/* 821FF424h case   19:*/		regs.R3 = regs.R31;
		/* 821FF424h case   19:*/		return 0x821FF428;
		  /* 821FF428h */ case   20:  		/* lwz R4, <#[R11 + 8]> */
		/* 821FF428h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 821FF428h case   20:*/		return 0x821FF42C;
		  /* 821FF42Ch */ case   21:  		/* bl -73684 */
		/* 821FF42Ch case   21:*/		regs.LR = 0x821FF430; return 0x821ED458;
		/* 821FF42Ch case   21:*/		return 0x821FF430;
		  /* 821FF430h */ case   22:  		/* mr R30, R3 */
		/* 821FF430h case   22:*/		regs.R30 = regs.R3;
		/* 821FF430h case   22:*/		return 0x821FF434;
		  /* 821FF434h */ case   23:  		/* addi R3, R1, 1976 */
		/* 821FF434h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7B8);
		/* 821FF434h case   23:*/		return 0x821FF438;
		  /* 821FF438h */ case   24:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FF438h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FF438h case   24:*/		return 0x821FF43C;
		  /* 821FF43Ch */ case   25:  		/* mr R5, R30 */
		/* 821FF43Ch case   25:*/		regs.R5 = regs.R30;
		/* 821FF43Ch case   25:*/		return 0x821FF440;
		  /* 821FF440h */ case   26:  		/* bl -37168 */
		/* 821FF440h case   26:*/		regs.LR = 0x821FF444; return 0x821F6310;
		/* 821FF440h case   26:*/		return 0x821FF444;
		  /* 821FF444h */ case   27:  		/* cmplwi CR6, R30, 0 */
		/* 821FF444h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FF444h case   27:*/		return 0x821FF448;
		  /* 821FF448h */ case   28:  		/* bc 12, CR6_EQ, -12584 */
		/* 821FF448h case   28:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FF448h case   28:*/		return 0x821FF44C;
		  /* 821FF44Ch */ case   29:  		/* addi R3, R1, 1976 */
		/* 821FF44Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7B8);
		/* 821FF44Ch case   29:*/		return 0x821FF450;
		  /* 821FF450h */ case   30:  		/* bl -255472 */
		/* 821FF450h case   30:*/		regs.LR = 0x821FF454; return 0x821C0E60;
		/* 821FF450h case   30:*/		return 0x821FF454;
		  /* 821FF454h */ case   31:  		/* mr R4, R3 */
		/* 821FF454h case   31:*/		regs.R4 = regs.R3;
		/* 821FF454h case   31:*/		return 0x821FF458;
		  /* 821FF458h */ case   32:  		/* mr R5, R14 */
		/* 821FF458h case   32:*/		regs.R5 = regs.R14;
		/* 821FF458h case   32:*/		return 0x821FF45C;
		  /* 821FF45Ch */ case   33:  		/* mr R3, R31 */
		/* 821FF45Ch case   33:*/		regs.R3 = regs.R31;
		/* 821FF45Ch case   33:*/		return 0x821FF460;
		  /* 821FF460h */ case   34:  		/* bl -43576 */
		/* 821FF460h case   34:*/		regs.LR = 0x821FF464; return 0x821F4A28;
		/* 821FF460h case   34:*/		return 0x821FF464;
		  /* 821FF464h */ case   35:  		/* addi R30, R30, -1 */
		/* 821FF464h case   35:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821FF464h case   35:*/		return 0x821FF468;
		  /* 821FF468h */ case   36:  		/* b -36 */
		/* 821FF468h case   36:*/		return 0x821FF444;
		/* 821FF468h case   36:*/		return 0x821FF46C;
		  /* 821FF46Ch */ case   37:  		/* li R5, 1 */
		/* 821FF46Ch case   37:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF46Ch case   37:*/		return 0x821FF470;
		  /* 821FF470h */ case   38:  		/* fmr FR4, FR31 */
		/* 821FF470h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF470h case   38:*/		return 0x821FF474;
		  /* 821FF474h */ case   39:  		/* mr R4, R31 */
		/* 821FF474h case   39:*/		regs.R4 = regs.R31;
		/* 821FF474h case   39:*/		return 0x821FF478;
		  /* 821FF478h */ case   40:  		/* fmr FR3, FR31 */
		/* 821FF478h case   40:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF478h case   40:*/		return 0x821FF47C;
		  /* 821FF47Ch */ case   41:  		/* addi R3, R1, 1432 */
		/* 821FF47Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x598);
		/* 821FF47Ch case   41:*/		return 0x821FF480;
		  /* 821FF480h */ case   42:  		/* fmr FR2, FR31 */
		/* 821FF480h case   42:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF480h case   42:*/		return 0x821FF484;
		  /* 821FF484h */ case   43:  		/* fmr FR1, FR26 */
		/* 821FF484h case   43:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR26);
		/* 821FF484h case   43:*/		return 0x821FF488;
		  /* 821FF488h */ case   44:  		/* bl 162248 */
		/* 821FF488h case   44:*/		regs.LR = 0x821FF48C; return 0x82226E50;
		/* 821FF488h case   44:*/		return 0x821FF48C;
		  /* 821FF48Ch */ case   45:  		/* li R5, 1 */
		/* 821FF48Ch case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF48Ch case   45:*/		return 0x821FF490;
		  /* 821FF490h */ case   46:  		/* mr R4, R31 */
		/* 821FF490h case   46:*/		regs.R4 = regs.R31;
		/* 821FF490h case   46:*/		return 0x821FF494;
		  /* 821FF494h */ case   47:  		/* fmr FR4, FR31 */
		/* 821FF494h case   47:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF494h case   47:*/		return 0x821FF498;
		  /* 821FF498h */ case   48:  		/* addi R3, R1, 1240 */
		/* 821FF498h case   48:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4D8);
		/* 821FF498h case   48:*/		return 0x821FF49C;
		  /* 821FF49Ch */ case   49:  		/* fmr FR3, FR31 */
		/* 821FF49Ch case   49:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF49Ch case   49:*/		return 0x821FF4A0;
		  /* 821FF4A0h */ case   50:  		/* fmr FR2, FR31 */
		/* 821FF4A0h case   50:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF4A0h case   50:*/		return 0x821FF4A4;
		  /* 821FF4A4h */ case   51:  		/* fmr FR1, FR25 */
		/* 821FF4A4h case   51:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR25);
		/* 821FF4A4h case   51:*/		return 0x821FF4A8;
		  /* 821FF4A8h */ case   52:  		/* bl 162216 */
		/* 821FF4A8h case   52:*/		regs.LR = 0x821FF4AC; return 0x82226E50;
		/* 821FF4A8h case   52:*/		return 0x821FF4AC;
		  /* 821FF4ACh */ case   53:  		/* li R5, 1 */
		/* 821FF4ACh case   53:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF4ACh case   53:*/		return 0x821FF4B0;
		  /* 821FF4B0h */ case   54:  		/* fmr FR4, FR31 */
		/* 821FF4B0h case   54:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF4B0h case   54:*/		return 0x821FF4B4;
		  /* 821FF4B4h */ case   55:  		/* mr R4, R31 */
		/* 821FF4B4h case   55:*/		regs.R4 = regs.R31;
		/* 821FF4B4h case   55:*/		return 0x821FF4B8;
		  /* 821FF4B8h */ case   56:  		/* fmr FR3, FR31 */
		/* 821FF4B8h case   56:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF4B8h case   56:*/		return 0x821FF4BC;
		  /* 821FF4BCh */ case   57:  		/* addi R3, R1, 1616 */
		/* 821FF4BCh case   57:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x650);
		/* 821FF4BCh case   57:*/		return 0x821FF4C0;
		  /* 821FF4C0h */ case   58:  		/* fmr FR2, FR31 */
		/* 821FF4C0h case   58:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF4C0h case   58:*/		return 0x821FF4C4;
		  /* 821FF4C4h */ case   59:  		/* fmr FR1, FR24 */
		/* 821FF4C4h case   59:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR24);
		/* 821FF4C4h case   59:*/		return 0x821FF4C8;
		  /* 821FF4C8h */ case   60:  		/* bl 162184 */
		/* 821FF4C8h case   60:*/		regs.LR = 0x821FF4CC; return 0x82226E50;
		/* 821FF4C8h case   60:*/		return 0x821FF4CC;
		  /* 821FF4CCh */ case   61:  		/* li R5, 1 */
		/* 821FF4CCh case   61:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF4CCh case   61:*/		return 0x821FF4D0;
		  /* 821FF4D0h */ case   62:  		/* mr R4, R31 */
		/* 821FF4D0h case   62:*/		regs.R4 = regs.R31;
		/* 821FF4D0h case   62:*/		return 0x821FF4D4;
		  /* 821FF4D4h */ case   63:  		/* fmr FR4, FR31 */
		/* 821FF4D4h case   63:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF4D4h case   63:*/		return 0x821FF4D8;
		  /* 821FF4D8h */ case   64:  		/* addi R3, R1, 1256 */
		/* 821FF4D8h case   64:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4E8);
		/* 821FF4D8h case   64:*/		return 0x821FF4DC;
		  /* 821FF4DCh */ case   65:  		/* fmr FR3, FR31 */
		/* 821FF4DCh case   65:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF4DCh case   65:*/		return 0x821FF4E0;
		  /* 821FF4E0h */ case   66:  		/* fmr FR2, FR31 */
		/* 821FF4E0h case   66:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF4E0h case   66:*/		return 0x821FF4E4;
		  /* 821FF4E4h */ case   67:  		/* fmr FR1, FR23 */
		/* 821FF4E4h case   67:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR23);
		/* 821FF4E4h case   67:*/		return 0x821FF4E8;
		  /* 821FF4E8h */ case   68:  		/* bl 162152 */
		/* 821FF4E8h case   68:*/		regs.LR = 0x821FF4EC; return 0x82226E50;
		/* 821FF4E8h case   68:*/		return 0x821FF4EC;
		  /* 821FF4ECh */ case   69:  		/* li R5, 1 */
		/* 821FF4ECh case   69:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF4ECh case   69:*/		return 0x821FF4F0;
		  /* 821FF4F0h */ case   70:  		/* fmr FR4, FR31 */
		/* 821FF4F0h case   70:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF4F0h case   70:*/		return 0x821FF4F4;
		  /* 821FF4F4h */ case   71:  		/* mr R4, R31 */
		/* 821FF4F4h case   71:*/		regs.R4 = regs.R31;
		/* 821FF4F4h case   71:*/		return 0x821FF4F8;
		  /* 821FF4F8h */ case   72:  		/* fmr FR3, FR31 */
		/* 821FF4F8h case   72:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF4F8h case   72:*/		return 0x821FF4FC;
		  /* 821FF4FCh */ case   73:  		/* addi R3, R1, 1456 */
		/* 821FF4FCh case   73:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5B0);
		/* 821FF4FCh case   73:*/		return 0x821FF500;
		  /* 821FF500h */ case   74:  		/* fmr FR2, FR31 */
		/* 821FF500h case   74:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF500h case   74:*/		return 0x821FF504;
		  /* 821FF504h */ case   75:  		/* fmr FR1, FR22 */
		/* 821FF504h case   75:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR22);
		/* 821FF504h case   75:*/		return 0x821FF508;
		  /* 821FF508h */ case   76:  		/* bl 162120 */
		/* 821FF508h case   76:*/		regs.LR = 0x821FF50C; return 0x82226E50;
		/* 821FF508h case   76:*/		return 0x821FF50C;
		  /* 821FF50Ch */ case   77:  		/* li R5, 1 */
		/* 821FF50Ch case   77:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF50Ch case   77:*/		return 0x821FF510;
		  /* 821FF510h */ case   78:  		/* mr R4, R31 */
		/* 821FF510h case   78:*/		regs.R4 = regs.R31;
		/* 821FF510h case   78:*/		return 0x821FF514;
		  /* 821FF514h */ case   79:  		/* fmr FR4, FR31 */
		/* 821FF514h case   79:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF514h case   79:*/		return 0x821FF518;
		  /* 821FF518h */ case   80:  		/* addi R3, R1, 1272 */
		/* 821FF518h case   80:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4F8);
		/* 821FF518h case   80:*/		return 0x821FF51C;
		  /* 821FF51Ch */ case   81:  		/* fmr FR3, FR31 */
		/* 821FF51Ch case   81:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF51Ch case   81:*/		return 0x821FF520;
		  /* 821FF520h */ case   82:  		/* fmr FR2, FR31 */
		/* 821FF520h case   82:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF520h case   82:*/		return 0x821FF524;
		  /* 821FF524h */ case   83:  		/* fmr FR1, FR29 */
		/* 821FF524h case   83:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821FF524h case   83:*/		return 0x821FF528;
		  /* 821FF528h */ case   84:  		/* bl 162088 */
		/* 821FF528h case   84:*/		regs.LR = 0x821FF52C; return 0x82226E50;
		/* 821FF528h case   84:*/		return 0x821FF52C;
		  /* 821FF52Ch */ case   85:  		/* li R5, 1 */
		/* 821FF52Ch case   85:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF52Ch case   85:*/		return 0x821FF530;
		  /* 821FF530h */ case   86:  		/* fmr FR4, FR31 */
		/* 821FF530h case   86:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF530h case   86:*/		return 0x821FF534;
		  /* 821FF534h */ case   87:  		/* mr R4, R31 */
		/* 821FF534h case   87:*/		regs.R4 = regs.R31;
		/* 821FF534h case   87:*/		return 0x821FF538;
		  /* 821FF538h */ case   88:  		/* fmr FR3, FR31 */
		/* 821FF538h case   88:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF538h case   88:*/		return 0x821FF53C;
		  /* 821FF53Ch */ case   89:  		/* addi R3, R1, 1568 */
		/* 821FF53Ch case   89:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x620);
		/* 821FF53Ch case   89:*/		return 0x821FF540;
		  /* 821FF540h */ case   90:  		/* fmr FR2, FR31 */
		/* 821FF540h case   90:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF540h case   90:*/		return 0x821FF544;
		  /* 821FF544h */ case   91:  		/* fmr FR1, FR28 */
		/* 821FF544h case   91:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821FF544h case   91:*/		return 0x821FF548;
		  /* 821FF548h */ case   92:  		/* bl 162056 */
		/* 821FF548h case   92:*/		regs.LR = 0x821FF54C; return 0x82226E50;
		/* 821FF548h case   92:*/		return 0x821FF54C;
		  /* 821FF54Ch */ case   93:  		/* li R5, 1 */
		/* 821FF54Ch case   93:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF54Ch case   93:*/		return 0x821FF550;
		  /* 821FF550h */ case   94:  		/* mr R4, R31 */
		/* 821FF550h case   94:*/		regs.R4 = regs.R31;
		/* 821FF550h case   94:*/		return 0x821FF554;
		  /* 821FF554h */ case   95:  		/* fmr FR4, FR31 */
		/* 821FF554h case   95:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF554h case   95:*/		return 0x821FF558;
		  /* 821FF558h */ case   96:  		/* addi R3, R1, 1288 */
		/* 821FF558h case   96:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x508);
		/* 821FF558h case   96:*/		return 0x821FF55C;
		  /* 821FF55Ch */ case   97:  		/* fmr FR3, FR31 */
		/* 821FF55Ch case   97:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF55Ch case   97:*/		return 0x821FF560;
		  /* 821FF560h */ case   98:  		/* fmr FR2, FR31 */
		/* 821FF560h case   98:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF560h case   98:*/		return 0x821FF564;
		  /* 821FF564h */ case   99:  		/* fmr FR1, FR21 */
		/* 821FF564h case   99:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR21);
		/* 821FF564h case   99:*/		return 0x821FF568;
		  /* 821FF568h */ case  100:  		/* bl 162024 */
		/* 821FF568h case  100:*/		regs.LR = 0x821FF56C; return 0x82226E50;
		/* 821FF568h case  100:*/		return 0x821FF56C;
		  /* 821FF56Ch */ case  101:  		/* li R5, 1 */
		/* 821FF56Ch case  101:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FF56Ch case  101:*/		return 0x821FF570;
		  /* 821FF570h */ case  102:  		/* fmr FR4, FR31 */
		/* 821FF570h case  102:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FF570h case  102:*/		return 0x821FF574;
		  /* 821FF574h */ case  103:  		/* mr R4, R31 */
		/* 821FF574h case  103:*/		regs.R4 = regs.R31;
		/* 821FF574h case  103:*/		return 0x821FF578;
		  /* 821FF578h */ case  104:  		/* fmr FR3, FR31 */
		/* 821FF578h case  104:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FF578h case  104:*/		return 0x821FF57C;
		  /* 821FF57Ch */ case  105:  		/* addi R3, R1, 1224 */
		/* 821FF57Ch case  105:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4C8);
		/* 821FF57Ch case  105:*/		return 0x821FF580;
		  /* 821FF580h */ case  106:  		/* fmr FR2, FR31 */
		/* 821FF580h case  106:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FF580h case  106:*/		return 0x821FF584;
		  /* 821FF584h */ case  107:  		/* fmr FR1, FR30 */
		/* 821FF584h case  107:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821FF584h case  107:*/		return 0x821FF588;
		  /* 821FF588h */ case  108:  		/* bl 161992 */
		/* 821FF588h case  108:*/		regs.LR = 0x821FF58C; return 0x82226E50;
		/* 821FF588h case  108:*/		return 0x821FF58C;
		  /* 821FF58Ch */ case  109:  		/* lwz R26, <#[R1 + 3500]> */
		/* 821FF58Ch case  109:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FF58Ch case  109:*/		return 0x821FF590;
		  /* 821FF590h */ case  110:  		/* addi R3, R1, 944 */
		/* 821FF590h case  110:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3B0);
		/* 821FF590h case  110:*/		return 0x821FF594;
		  /* 821FF594h */ case  111:  		/* mr R4, R26 */
		/* 821FF594h case  111:*/		regs.R4 = regs.R26;
		/* 821FF594h case  111:*/		return 0x821FF598;
		  /* 821FF598h */ case  112:  		/* bl -391016 */
		/* 821FF598h case  112:*/		regs.LR = 0x821FF59C; return 0x8219FE30;
		/* 821FF598h case  112:*/		return 0x821FF59C;
		  /* 821FF59Ch */ case  113:  		/* mr R4, R26 */
		/* 821FF59Ch case  113:*/		regs.R4 = regs.R26;
		/* 821FF59Ch case  113:*/		return 0x821FF5A0;
		  /* 821FF5A0h */ case  114:  		/* addi R3, R1, 1464 */
		/* 821FF5A0h case  114:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5B8);
		/* 821FF5A0h case  114:*/		return 0x821FF5A4;
		  /* 821FF5A4h */ case  115:  		/* bl -391028 */
		/* 821FF5A4h case  115:*/		regs.LR = 0x821FF5A8; return 0x8219FE30;
		/* 821FF5A4h case  115:*/		return 0x821FF5A8;
		  /* 821FF5A8h */ case  116:  		/* cmpwi CR6, R25, 6 */
		/* 821FF5A8h case  116:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000006);
		/* 821FF5A8h case  116:*/		return 0x821FF5AC;
		  /* 821FF5ACh */ case  117:  		/* addi R3, R1, 944 */
		/* 821FF5ACh case  117:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3B0);
		/* 821FF5ACh case  117:*/		return 0x821FF5B0;
		  /* 821FF5B0h */ case  118:  		/* bc 12, CR6_EQ, 16 */
		/* 821FF5B0h case  118:*/		if ( regs.CR[6].eq ) { return 0x821FF5C0;  }
		/* 821FF5B0h case  118:*/		return 0x821FF5B4;
		  /* 821FF5B4h */ case  119:  		/* rlwinm R4, R29, 1, 0, 30 */
		/* 821FF5B4h case  119:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R29);
		/* 821FF5B4h case  119:*/		return 0x821FF5B8;
		  /* 821FF5B8h */ case  120:  		/* bl -44728 */
		/* 821FF5B8h case  120:*/		regs.LR = 0x821FF5BC; return 0x821F4700;
		/* 821FF5B8h case  120:*/		return 0x821FF5BC;
		  /* 821FF5BCh */ case  121:  		/* addi R3, R1, 1464 */
		/* 821FF5BCh case  121:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5B8);
		/* 821FF5BCh case  121:*/		return 0x821FF5C0;
	}
	return 0x821FF5C0;
} // Block from 821FF3D8h-821FF5C0h (122 instructions)

//////////////////////////////////////////////////////
// Block at 821FF5C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF5C0);
		  /* 821FF5C0h */ case    0:  		/* mr R4, R29 */
		/* 821FF5C0h case    0:*/		regs.R4 = regs.R29;
		/* 821FF5C0h case    0:*/		return 0x821FF5C4;
		  /* 821FF5C4h */ case    1:  		/* bl -44740 */
		/* 821FF5C4h case    1:*/		regs.LR = 0x821FF5C8; return 0x821F4700;
		/* 821FF5C4h case    1:*/		return 0x821FF5C8;
		  /* 821FF5C8h */ case    2:  		/* mr R27, R29 */
		/* 821FF5C8h case    2:*/		regs.R27 = regs.R29;
		/* 821FF5C8h case    2:*/		return 0x821FF5CC;
		  /* 821FF5CCh */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821FF5CCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FF5CCh case    3:*/		return 0x821FF5D0;
		  /* 821FF5D0h */ case    4:  		/* bc 12, CR6_EQ, 752 */
		/* 821FF5D0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821FF8C0;  }
		/* 821FF5D0h case    4:*/		return 0x821FF5D4;
		  /* 821FF5D4h */ case    5:  		/* addi R3, R1, 944 */
		/* 821FF5D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3B0);
		/* 821FF5D4h case    5:*/		return 0x821FF5D8;
		  /* 821FF5D8h */ case    6:  		/* bl -255864 */
		/* 821FF5D8h case    6:*/		regs.LR = 0x821FF5DC; return 0x821C0E60;
		/* 821FF5D8h case    6:*/		return 0x821FF5DC;
		  /* 821FF5DCh */ case    7:  		/* mr R30, R3 */
		/* 821FF5DCh case    7:*/		regs.R30 = regs.R3;
		/* 821FF5DCh case    7:*/		return 0x821FF5E0;
		  /* 821FF5E0h */ case    8:  		/* cmpwi CR6, R25, 6 */
		/* 821FF5E0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000006);
		/* 821FF5E0h case    8:*/		return 0x821FF5E4;
		  /* 821FF5E4h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 821FF5E4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821FF5F0;  }
		/* 821FF5E4h case    9:*/		return 0x821FF5E8;
		  /* 821FF5E8h */ case   10:  		/* addi R28, R1, 1224 */
		/* 821FF5E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x4C8);
		/* 821FF5E8h case   10:*/		return 0x821FF5EC;
		  /* 821FF5ECh */ case   11:  		/* b 16 */
		/* 821FF5ECh case   11:*/		return 0x821FF5FC;
		/* 821FF5ECh case   11:*/		return 0x821FF5F0;
	}
	return 0x821FF5F0;
} // Block from 821FF5C0h-821FF5F0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821FF5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF5F0);
		  /* 821FF5F0h */ case    0:  		/* addi R3, R1, 1464 */
		/* 821FF5F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5B8);
		/* 821FF5F0h case    0:*/		return 0x821FF5F4;
		  /* 821FF5F4h */ case    1:  		/* bl -255892 */
		/* 821FF5F4h case    1:*/		regs.LR = 0x821FF5F8; return 0x821C0E60;
		/* 821FF5F4h case    1:*/		return 0x821FF5F8;
		  /* 821FF5F8h */ case    2:  		/* mr R28, R3 */
		/* 821FF5F8h case    2:*/		regs.R28 = regs.R3;
		/* 821FF5F8h case    2:*/		return 0x821FF5FC;
	}
	return 0x821FF5FC;
} // Block from 821FF5F0h-821FF5FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FF5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF5FC);
		  /* 821FF5FCh */ case    0:  		/* mr R4, R30 */
		/* 821FF5FCh case    0:*/		regs.R4 = regs.R30;
		/* 821FF5FCh case    0:*/		return 0x821FF600;
		  /* 821FF600h */ case    1:  		/* mr R3, R31 */
		/* 821FF600h case    1:*/		regs.R3 = regs.R31;
		/* 821FF600h case    1:*/		return 0x821FF604;
		  /* 821FF604h */ case    2:  		/* bl -53892 */
		/* 821FF604h case    2:*/		regs.LR = 0x821FF608; return 0x821F2380;
		/* 821FF604h case    2:*/		return 0x821FF608;
		  /* 821FF608h */ case    3:  		/* li R4, 2 */
		/* 821FF608h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FF608h case    3:*/		return 0x821FF60C;
		  /* 821FF60Ch */ case    4:  		/* mr R24, R3 */
		/* 821FF60Ch case    4:*/		regs.R24 = regs.R3;
		/* 821FF60Ch case    4:*/		return 0x821FF610;
		  /* 821FF610h */ case    5:  		/* bl -555856 */
		/* 821FF610h case    5:*/		regs.LR = 0x821FF614; return 0x82177AC0;
		/* 821FF610h case    5:*/		return 0x821FF614;
		  /* 821FF614h */ case    6:  		/* mr R4, R28 */
		/* 821FF614h case    6:*/		regs.R4 = regs.R28;
		/* 821FF614h case    6:*/		return 0x821FF618;
		  /* 821FF618h */ case    7:  		/* mr R3, R31 */
		/* 821FF618h case    7:*/		regs.R3 = regs.R31;
		/* 821FF618h case    7:*/		return 0x821FF61C;
		  /* 821FF61Ch */ case    8:  		/* bl -53916 */
		/* 821FF61Ch case    8:*/		regs.LR = 0x821FF620; return 0x821F2380;
		/* 821FF61Ch case    8:*/		return 0x821FF620;
		  /* 821FF620h */ case    9:  		/* li R4, 2 */
		/* 821FF620h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821FF620h case    9:*/		return 0x821FF624;
		  /* 821FF624h */ case   10:  		/* mr R23, R3 */
		/* 821FF624h case   10:*/		regs.R23 = regs.R3;
		/* 821FF624h case   10:*/		return 0x821FF628;
		  /* 821FF628h */ case   11:  		/* bl -555880 */
		/* 821FF628h case   11:*/		regs.LR = 0x821FF62C; return 0x82177AC0;
		/* 821FF628h case   11:*/		return 0x821FF62C;
		  /* 821FF62Ch */ case   12:  		/* mr R5, R23 */
		/* 821FF62Ch case   12:*/		regs.R5 = regs.R23;
		/* 821FF62Ch case   12:*/		return 0x821FF630;
		  /* 821FF630h */ case   13:  		/* mr R4, R24 */
		/* 821FF630h case   13:*/		regs.R4 = regs.R24;
		/* 821FF630h case   13:*/		return 0x821FF634;
		  /* 821FF634h */ case   14:  		/* mr R3, R31 */
		/* 821FF634h case   14:*/		regs.R3 = regs.R31;
		/* 821FF634h case   14:*/		return 0x821FF638;
		  /* 821FF638h */ case   15:  		/* bl -70176 */
		/* 821FF638h case   15:*/		regs.LR = 0x821FF63C; return 0x821EE418;
		/* 821FF638h case   15:*/		return 0x821FF63C;
		  /* 821FF63Ch */ case   16:  		/* mr R22, R3 */
		/* 821FF63Ch case   16:*/		regs.R22 = regs.R3;
		/* 821FF63Ch case   16:*/		return 0x821FF640;
		  /* 821FF640h */ case   17:  		/* mr R5, R23 */
		/* 821FF640h case   17:*/		regs.R5 = regs.R23;
		/* 821FF640h case   17:*/		return 0x821FF644;
		  /* 821FF644h */ case   18:  		/* mr R4, R24 */
		/* 821FF644h case   18:*/		regs.R4 = regs.R24;
		/* 821FF644h case   18:*/		return 0x821FF648;
		  /* 821FF648h */ case   19:  		/* mr R3, R31 */
		/* 821FF648h case   19:*/		regs.R3 = regs.R31;
		/* 821FF648h case   19:*/		return 0x821FF64C;
		  /* 821FF64Ch */ case   20:  		/* bl -70436 */
		/* 821FF64Ch case   20:*/		regs.LR = 0x821FF650; return 0x821EE328;
		/* 821FF64Ch case   20:*/		return 0x821FF650;
		  /* 821FF650h */ case   21:  		/* mr R4, R3 */
		/* 821FF650h case   21:*/		regs.R4 = regs.R3;
		/* 821FF650h case   21:*/		return 0x821FF654;
		  /* 821FF654h */ case   22:  		/* mr R3, R31 */
		/* 821FF654h case   22:*/		regs.R3 = regs.R31;
		/* 821FF654h case   22:*/		return 0x821FF658;
		  /* 821FF658h */ case   23:  		/* bl -63520 */
		/* 821FF658h case   23:*/		regs.LR = 0x821FF65C; return 0x821EFE38;
		/* 821FF658h case   23:*/		return 0x821FF65C;
		  /* 821FF65Ch */ case   24:  		/* mr R5, R3 */
		/* 821FF65Ch case   24:*/		regs.R5 = regs.R3;
		/* 821FF65Ch case   24:*/		return 0x821FF660;
		  /* 821FF660h */ case   25:  		/* mr R4, R22 */
		/* 821FF660h case   25:*/		regs.R4 = regs.R22;
		/* 821FF660h case   25:*/		return 0x821FF664;
		  /* 821FF664h */ case   26:  		/* mr R3, R31 */
		/* 821FF664h case   26:*/		regs.R3 = regs.R31;
		/* 821FF664h case   26:*/		return 0x821FF668;
		  /* 821FF668h */ case   27:  		/* bl -61760 */
		/* 821FF668h case   27:*/		regs.LR = 0x821FF66C; return 0x821F0528;
		/* 821FF668h case   27:*/		return 0x821FF66C;
		  /* 821FF66Ch */ case   28:  		/* mr R22, R3 */
		/* 821FF66Ch case   28:*/		regs.R22 = regs.R3;
		/* 821FF66Ch case   28:*/		return 0x821FF670;
		  /* 821FF670h */ case   29:  		/* mr R3, R31 */
		/* 821FF670h case   29:*/		regs.R3 = regs.R31;
		/* 821FF670h case   29:*/		return 0x821FF674;
		  /* 821FF674h */ case   30:  		/* mr R5, R22 */
		/* 821FF674h case   30:*/		regs.R5 = regs.R22;
		/* 821FF674h case   30:*/		return 0x821FF678;
		  /* 821FF678h */ case   31:  		/* mr R4, R22 */
		/* 821FF678h case   31:*/		regs.R4 = regs.R22;
		/* 821FF678h case   31:*/		return 0x821FF67C;
		  /* 821FF67Ch */ case   32:  		/* bl -61780 */
		/* 821FF67Ch case   32:*/		regs.LR = 0x821FF680; return 0x821F0528;
		/* 821FF67Ch case   32:*/		return 0x821FF680;
		  /* 821FF680h */ case   33:  		/* mr R21, R3 */
		/* 821FF680h case   33:*/		regs.R21 = regs.R3;
		/* 821FF680h case   33:*/		return 0x821FF684;
		  /* 821FF684h */ case   34:  		/* mr R3, R31 */
		/* 821FF684h case   34:*/		regs.R3 = regs.R31;
		/* 821FF684h case   34:*/		return 0x821FF688;
		  /* 821FF688h */ case   35:  		/* ld R5, <#[R1 + 1432]> */
		/* 821FF688h case   35:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000598) );
		/* 821FF688h case   35:*/		return 0x821FF68C;
		  /* 821FF68Ch */ case   36:  		/* mr R4, R21 */
		/* 821FF68Ch case   36:*/		regs.R4 = regs.R21;
		/* 821FF68Ch case   36:*/		return 0x821FF690;
		  /* 821FF690h */ case   37:  		/* bl -47992 */
		/* 821FF690h case   37:*/		regs.LR = 0x821FF694; return 0x821F3B18;
		/* 821FF690h case   37:*/		return 0x821FF694;
		  /* 821FF694h */ case   38:  		/* mr R4, R3 */
		/* 821FF694h case   38:*/		regs.R4 = regs.R3;
		/* 821FF694h case   38:*/		return 0x821FF698;
		  /* 821FF698h */ case   39:  		/* mr R3, R31 */
		/* 821FF698h case   39:*/		regs.R3 = regs.R31;
		/* 821FF698h case   39:*/		return 0x821FF69C;
		  /* 821FF69Ch */ case   40:  		/* ld R5, <#[R1 + 1240]> */
		/* 821FF69Ch case   40:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000004D8) );
		/* 821FF69Ch case   40:*/		return 0x821FF6A0;
		  /* 821FF6A0h */ case   41:  		/* bl -48216 */
		/* 821FF6A0h case   41:*/		regs.LR = 0x821FF6A4; return 0x821F3A48;
		/* 821FF6A0h case   41:*/		return 0x821FF6A4;
		  /* 821FF6A4h */ case   42:  		/* mr R5, R3 */
		/* 821FF6A4h case   42:*/		regs.R5 = regs.R3;
		/* 821FF6A4h case   42:*/		return 0x821FF6A8;
		  /* 821FF6A8h */ case   43:  		/* mr R4, R21 */
		/* 821FF6A8h case   43:*/		regs.R4 = regs.R21;
		/* 821FF6A8h case   43:*/		return 0x821FF6AC;
		  /* 821FF6ACh */ case   44:  		/* mr R3, R31 */
		/* 821FF6ACh case   44:*/		regs.R3 = regs.R31;
		/* 821FF6ACh case   44:*/		return 0x821FF6B0;
		  /* 821FF6B0h */ case   45:  		/* bl -61832 */
		/* 821FF6B0h case   45:*/		regs.LR = 0x821FF6B4; return 0x821F0528;
		/* 821FF6B0h case   45:*/		return 0x821FF6B4;
		  /* 821FF6B4h */ case   46:  		/* mr R4, R3 */
		/* 821FF6B4h case   46:*/		regs.R4 = regs.R3;
		/* 821FF6B4h case   46:*/		return 0x821FF6B8;
		  /* 821FF6B8h */ case   47:  		/* mr R3, R31 */
		/* 821FF6B8h case   47:*/		regs.R3 = regs.R31;
		/* 821FF6B8h case   47:*/		return 0x821FF6BC;
		  /* 821FF6BCh */ case   48:  		/* ld R5, <#[R1 + 1616]> */
		/* 821FF6BCh case   48:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000650) );
		/* 821FF6BCh case   48:*/		return 0x821FF6C0;
		  /* 821FF6C0h */ case   49:  		/* bl -48248 */
		/* 821FF6C0h case   49:*/		regs.LR = 0x821FF6C4; return 0x821F3A48;
		/* 821FF6C0h case   49:*/		return 0x821FF6C4;
		  /* 821FF6C4h */ case   50:  		/* mr R5, R3 */
		/* 821FF6C4h case   50:*/		regs.R5 = regs.R3;
		/* 821FF6C4h case   50:*/		return 0x821FF6C8;
		  /* 821FF6C8h */ case   51:  		/* mr R4, R21 */
		/* 821FF6C8h case   51:*/		regs.R4 = regs.R21;
		/* 821FF6C8h case   51:*/		return 0x821FF6CC;
		  /* 821FF6CCh */ case   52:  		/* mr R3, R31 */
		/* 821FF6CCh case   52:*/		regs.R3 = regs.R31;
		/* 821FF6CCh case   52:*/		return 0x821FF6D0;
		  /* 821FF6D0h */ case   53:  		/* bl -61864 */
		/* 821FF6D0h case   53:*/		regs.LR = 0x821FF6D4; return 0x821F0528;
		/* 821FF6D0h case   53:*/		return 0x821FF6D4;
		  /* 821FF6D4h */ case   54:  		/* mr R4, R3 */
		/* 821FF6D4h case   54:*/		regs.R4 = regs.R3;
		/* 821FF6D4h case   54:*/		return 0x821FF6D8;
		  /* 821FF6D8h */ case   55:  		/* mr R3, R31 */
		/* 821FF6D8h case   55:*/		regs.R3 = regs.R31;
		/* 821FF6D8h case   55:*/		return 0x821FF6DC;
		  /* 821FF6DCh */ case   56:  		/* ld R5, <#[R1 + 1256]> */
		/* 821FF6DCh case   56:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000004E8) );
		/* 821FF6DCh case   56:*/		return 0x821FF6E0;
		  /* 821FF6E0h */ case   57:  		/* bl -48280 */
		/* 821FF6E0h case   57:*/		regs.LR = 0x821FF6E4; return 0x821F3A48;
		/* 821FF6E0h case   57:*/		return 0x821FF6E4;
		  /* 821FF6E4h */ case   58:  		/* mr R5, R3 */
		/* 821FF6E4h case   58:*/		regs.R5 = regs.R3;
		/* 821FF6E4h case   58:*/		return 0x821FF6E8;
		  /* 821FF6E8h */ case   59:  		/* mr R4, R21 */
		/* 821FF6E8h case   59:*/		regs.R4 = regs.R21;
		/* 821FF6E8h case   59:*/		return 0x821FF6EC;
		  /* 821FF6ECh */ case   60:  		/* mr R3, R31 */
		/* 821FF6ECh case   60:*/		regs.R3 = regs.R31;
		/* 821FF6ECh case   60:*/		return 0x821FF6F0;
		  /* 821FF6F0h */ case   61:  		/* bl -61896 */
		/* 821FF6F0h case   61:*/		regs.LR = 0x821FF6F4; return 0x821F0528;
		/* 821FF6F0h case   61:*/		return 0x821FF6F4;
		  /* 821FF6F4h */ case   62:  		/* mr R4, R3 */
		/* 821FF6F4h case   62:*/		regs.R4 = regs.R3;
		/* 821FF6F4h case   62:*/		return 0x821FF6F8;
		  /* 821FF6F8h */ case   63:  		/* mr R3, R31 */
		/* 821FF6F8h case   63:*/		regs.R3 = regs.R31;
		/* 821FF6F8h case   63:*/		return 0x821FF6FC;
		  /* 821FF6FCh */ case   64:  		/* ld R5, <#[R1 + 1456]> */
		/* 821FF6FCh case   64:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000005B0) );
		/* 821FF6FCh case   64:*/		return 0x821FF700;
		  /* 821FF700h */ case   65:  		/* bl -48312 */
		/* 821FF700h case   65:*/		regs.LR = 0x821FF704; return 0x821F3A48;
		/* 821FF700h case   65:*/		return 0x821FF704;
		  /* 821FF704h */ case   66:  		/* mr R5, R3 */
		/* 821FF704h case   66:*/		regs.R5 = regs.R3;
		/* 821FF704h case   66:*/		return 0x821FF708;
		  /* 821FF708h */ case   67:  		/* mr R4, R22 */
		/* 821FF708h case   67:*/		regs.R4 = regs.R22;
		/* 821FF708h case   67:*/		return 0x821FF70C;
		  /* 821FF70Ch */ case   68:  		/* mr R3, R31 */
		/* 821FF70Ch case   68:*/		regs.R3 = regs.R31;
		/* 821FF70Ch case   68:*/		return 0x821FF710;
		  /* 821FF710h */ case   69:  		/* bl -61928 */
		/* 821FF710h case   69:*/		regs.LR = 0x821FF714; return 0x821F0528;
		/* 821FF710h case   69:*/		return 0x821FF714;
		  /* 821FF714h */ case   70:  		/* mr R22, R3 */
		/* 821FF714h case   70:*/		regs.R22 = regs.R3;
		/* 821FF714h case   70:*/		return 0x821FF718;
		  /* 821FF718h */ case   71:  		/* mr R5, R23 */
		/* 821FF718h case   71:*/		regs.R5 = regs.R23;
		/* 821FF718h case   71:*/		return 0x821FF71C;
		  /* 821FF71Ch */ case   72:  		/* mr R4, R24 */
		/* 821FF71Ch case   72:*/		regs.R4 = regs.R24;
		/* 821FF71Ch case   72:*/		return 0x821FF720;
		  /* 821FF720h */ case   73:  		/* mr R3, R31 */
		/* 821FF720h case   73:*/		regs.R3 = regs.R31;
		/* 821FF720h case   73:*/		return 0x821FF724;
		  /* 821FF724h */ case   74:  		/* bl -69932 */
		/* 821FF724h case   74:*/		regs.LR = 0x821FF728; return 0x821EE5F8;
		/* 821FF724h case   74:*/		return 0x821FF728;
		  /* 821FF728h */ case   75:  		/* mr R24, R3 */
		/* 821FF728h case   75:*/		regs.R24 = regs.R3;
		/* 821FF728h case   75:*/		return 0x821FF72C;
		  /* 821FF72Ch */ case   76:  		/* mr R4, R22 */
		/* 821FF72Ch case   76:*/		regs.R4 = regs.R22;
		/* 821FF72Ch case   76:*/		return 0x821FF730;
		  /* 821FF730h */ case   77:  		/* ld R5, <#[R1 + 1272]> */
		/* 821FF730h case   77:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000004F8) );
		/* 821FF730h case   77:*/		return 0x821FF734;
		  /* 821FF734h */ case   78:  		/* mr R3, R31 */
		/* 821FF734h case   78:*/		regs.R3 = regs.R31;
		/* 821FF734h case   78:*/		return 0x821FF738;
		  /* 821FF738h */ case   79:  		/* bl -48160 */
		/* 821FF738h case   79:*/		regs.LR = 0x821FF73C; return 0x821F3B18;
		/* 821FF738h case   79:*/		return 0x821FF73C;
		  /* 821FF73Ch */ case   80:  		/* mr R4, R3 */
		/* 821FF73Ch case   80:*/		regs.R4 = regs.R3;
		/* 821FF73Ch case   80:*/		return 0x821FF740;
		  /* 821FF740h */ case   81:  		/* mr R3, R31 */
		/* 821FF740h case   81:*/		regs.R3 = regs.R31;
		/* 821FF740h case   81:*/		return 0x821FF744;
		  /* 821FF744h */ case   82:  		/* ld R5, <#[R1 + 1568]> */
		/* 821FF744h case   82:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000620) );
		/* 821FF744h case   82:*/		return 0x821FF748;
		  /* 821FF748h */ case   83:  		/* bl -48384 */
		/* 821FF748h case   83:*/		regs.LR = 0x821FF74C; return 0x821F3A48;
		/* 821FF748h case   83:*/		return 0x821FF74C;
		  /* 821FF74Ch */ case   84:  		/* mr R4, R3 */
		/* 821FF74Ch case   84:*/		regs.R4 = regs.R3;
		/* 821FF74Ch case   84:*/		return 0x821FF750;
		  /* 821FF750h */ case   85:  		/* mr R5, R24 */
		/* 821FF750h case   85:*/		regs.R5 = regs.R24;
		/* 821FF750h case   85:*/		return 0x821FF754;
		  /* 821FF754h */ case   86:  		/* mr R3, R31 */
		/* 821FF754h case   86:*/		regs.R3 = regs.R31;
		/* 821FF754h case   86:*/		return 0x821FF758;
		  /* 821FF758h */ case   87:  		/* bl -62000 */
		/* 821FF758h case   87:*/		regs.LR = 0x821FF75C; return 0x821F0528;
		/* 821FF758h case   87:*/		return 0x821FF75C;
		  /* 821FF75Ch */ case   88:  		/* mr R4, R3 */
		/* 821FF75Ch case   88:*/		regs.R4 = regs.R3;
		/* 821FF75Ch case   88:*/		return 0x821FF760;
		  /* 821FF760h */ case   89:  		/* mr R5, R22 */
		/* 821FF760h case   89:*/		regs.R5 = regs.R22;
		/* 821FF760h case   89:*/		return 0x821FF764;
		  /* 821FF764h */ case   90:  		/* mr R3, R31 */
		/* 821FF764h case   90:*/		regs.R3 = regs.R31;
		/* 821FF764h case   90:*/		return 0x821FF768;
		  /* 821FF768h */ case   91:  		/* bl -62224 */
		/* 821FF768h case   91:*/		regs.LR = 0x821FF76C; return 0x821F0458;
		/* 821FF768h case   91:*/		return 0x821FF76C;
		  /* 821FF76Ch */ case   92:  		/* mr R24, R3 */
		/* 821FF76Ch case   92:*/		regs.R24 = regs.R3;
		/* 821FF76Ch case   92:*/		return 0x821FF770;
		  /* 821FF770h */ case   93:  		/* mr R4, R28 */
		/* 821FF770h case   93:*/		regs.R4 = regs.R28;
		/* 821FF770h case   93:*/		return 0x821FF774;
		  /* 821FF774h */ case   94:  		/* mr R3, R31 */
		/* 821FF774h case   94:*/		regs.R3 = regs.R31;
		/* 821FF774h case   94:*/		return 0x821FF778;
		  /* 821FF778h */ case   95:  		/* bl -54264 */
		/* 821FF778h case   95:*/		regs.LR = 0x821FF77C; return 0x821F2380;
		/* 821FF778h case   95:*/		return 0x821FF77C;
		  /* 821FF77Ch */ case   96:  		/* li R4, 4 */
		/* 821FF77Ch case   96:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FF77Ch case   96:*/		return 0x821FF780;
		  /* 821FF780h */ case   97:  		/* mr R23, R3 */
		/* 821FF780h case   97:*/		regs.R23 = regs.R3;
		/* 821FF780h case   97:*/		return 0x821FF784;
		  /* 821FF784h */ case   98:  		/* bl -556228 */
		/* 821FF784h case   98:*/		regs.LR = 0x821FF788; return 0x82177AC0;
		/* 821FF784h case   98:*/		return 0x821FF788;
		  /* 821FF788h */ case   99:  		/* mr R5, R28 */
		/* 821FF788h case   99:*/		regs.R5 = regs.R28;
		/* 821FF788h case   99:*/		return 0x821FF78C;
		  /* 821FF78Ch */ case  100:  		/* mr R4, R23 */
		/* 821FF78Ch case  100:*/		regs.R4 = regs.R23;
		/* 821FF78Ch case  100:*/		return 0x821FF790;
		  /* 821FF790h */ case  101:  		/* mr R3, R31 */
		/* 821FF790h case  101:*/		regs.R3 = regs.R31;
		/* 821FF790h case  101:*/		return 0x821FF794;
		  /* 821FF794h */ case  102:  		/* bl -47380 */
		/* 821FF794h case  102:*/		regs.LR = 0x821FF798; return 0x821F3E80;
		/* 821FF794h case  102:*/		return 0x821FF798;
		  /* 821FF798h */ case  103:  		/* mr R4, R3 */
		/* 821FF798h case  103:*/		regs.R4 = regs.R3;
		/* 821FF798h case  103:*/		return 0x821FF79C;
		  /* 821FF79Ch */ case  104:  		/* mr R3, R31 */
		/* 821FF79Ch case  104:*/		regs.R3 = regs.R31;
		/* 821FF79Ch case  104:*/		return 0x821FF7A0;
		  /* 821FF7A0h */ case  105:  		/* ld R5, <#[R1 + 1288]> */
		/* 821FF7A0h case  105:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000508) );
		/* 821FF7A0h case  105:*/		return 0x821FF7A4;
		  /* 821FF7A4h */ case  106:  		/* bl -48268 */
		/* 821FF7A4h case  106:*/		regs.LR = 0x821FF7A8; return 0x821F3B18;
		/* 821FF7A4h case  106:*/		return 0x821FF7A8;
		  /* 821FF7A8h */ case  107:  		/* mr R5, R3 */
		/* 821FF7A8h case  107:*/		regs.R5 = regs.R3;
		/* 821FF7A8h case  107:*/		return 0x821FF7AC;
		  /* 821FF7ACh */ case  108:  		/* mr R4, R24 */
		/* 821FF7ACh case  108:*/		regs.R4 = regs.R24;
		/* 821FF7ACh case  108:*/		return 0x821FF7B0;
		  /* 821FF7B0h */ case  109:  		/* mr R3, R31 */
		/* 821FF7B0h case  109:*/		regs.R3 = regs.R31;
		/* 821FF7B0h case  109:*/		return 0x821FF7B4;
		  /* 821FF7B4h */ case  110:  		/* bl -62300 */
		/* 821FF7B4h case  110:*/		regs.LR = 0x821FF7B8; return 0x821F0458;
		/* 821FF7B4h case  110:*/		return 0x821FF7B8;
		  /* 821FF7B8h */ case  111:  		/* mr R24, R3 */
		/* 821FF7B8h case  111:*/		regs.R24 = regs.R3;
		/* 821FF7B8h case  111:*/		return 0x821FF7BC;
		  /* 821FF7BCh */ case  112:  		/* mr R5, R28 */
		/* 821FF7BCh case  112:*/		regs.R5 = regs.R28;
		/* 821FF7BCh case  112:*/		return 0x821FF7C0;
		  /* 821FF7C0h */ case  113:  		/* mr R4, R30 */
		/* 821FF7C0h case  113:*/		regs.R4 = regs.R30;
		/* 821FF7C0h case  113:*/		return 0x821FF7C4;
		  /* 821FF7C4h */ case  114:  		/* mr R3, R31 */
		/* 821FF7C4h case  114:*/		regs.R3 = regs.R31;
		/* 821FF7C4h case  114:*/		return 0x821FF7C8;
		  /* 821FF7C8h */ case  115:  		/* bl -46376 */
		/* 821FF7C8h case  115:*/		regs.LR = 0x821FF7CC; return 0x821F42A0;
		/* 821FF7C8h case  115:*/		return 0x821FF7CC;
		  /* 821FF7CCh */ case  116:  		/* mr R23, R3 */
		/* 821FF7CCh case  116:*/		regs.R23 = regs.R3;
		/* 821FF7CCh case  116:*/		return 0x821FF7D0;
		  /* 821FF7D0h */ case  117:  		/* mr R5, R28 */
		/* 821FF7D0h case  117:*/		regs.R5 = regs.R28;
		/* 821FF7D0h case  117:*/		return 0x821FF7D4;
		  /* 821FF7D4h */ case  118:  		/* mr R4, R30 */
		/* 821FF7D4h case  118:*/		regs.R4 = regs.R30;
		/* 821FF7D4h case  118:*/		return 0x821FF7D8;
		  /* 821FF7D8h */ case  119:  		/* mr R3, R31 */
		/* 821FF7D8h case  119:*/		regs.R3 = regs.R31;
		/* 821FF7D8h case  119:*/		return 0x821FF7DC;
		  /* 821FF7DCh */ case  120:  		/* bl -46604 */
		/* 821FF7DCh case  120:*/		regs.LR = 0x821FF7E0; return 0x821F41D0;
		/* 821FF7DCh case  120:*/		return 0x821FF7E0;
		  /* 821FF7E0h */ case  121:  		/* lwz R11, <#[R23 + 8]> */
		/* 821FF7E0h case  121:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821FF7E0h case  121:*/		return 0x821FF7E4;
		  /* 821FF7E4h */ case  122:  		/* mr R28, R3 */
		/* 821FF7E4h case  122:*/		regs.R28 = regs.R3;
		/* 821FF7E4h case  122:*/		return 0x821FF7E8;
		  /* 821FF7E8h */ case  123:  		/* mr R4, R23 */
		/* 821FF7E8h case  123:*/		regs.R4 = regs.R23;
		/* 821FF7E8h case  123:*/		return 0x821FF7EC;
		  /* 821FF7ECh */ case  124:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FF7ECh case  124:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FF7ECh case  124:*/		return 0x821FF7F0;
		  /* 821FF7F0h */ case  125:  		/* li R7, 228 */
		/* 821FF7F0h case  125:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FF7F0h case  125:*/		return 0x821FF7F4;
		  /* 821FF7F4h */ case  126:  		/* li R6, 4 */
		/* 821FF7F4h case  126:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FF7F4h case  126:*/		return 0x821FF7F8;
		  /* 821FF7F8h */ case  127:  		/* mr R3, R31 */
		/* 821FF7F8h case  127:*/		regs.R3 = regs.R31;
		/* 821FF7F8h case  127:*/		return 0x821FF7FC;
		  /* 821FF7FCh */ case  128:  		/* bl 141892 */
		/* 821FF7FCh case  128:*/		regs.LR = 0x821FF800; return 0x82222240;
		/* 821FF7FCh case  128:*/		return 0x821FF800;
		  /* 821FF800h */ case  129:  		/* mr R4, R3 */
		/* 821FF800h case  129:*/		regs.R4 = regs.R3;
		/* 821FF800h case  129:*/		return 0x821FF804;
		  /* 821FF804h */ case  130:  		/* mr R5, R23 */
		/* 821FF804h case  130:*/		regs.R5 = regs.R23;
		/* 821FF804h case  130:*/		return 0x821FF808;
		  /* 821FF808h */ case  131:  		/* mr R3, R31 */
		/* 821FF808h case  131:*/		regs.R3 = regs.R31;
		/* 821FF808h case  131:*/		return 0x821FF80C;
		  /* 821FF80Ch */ case  132:  		/* bl -63052 */
		/* 821FF80Ch case  132:*/		regs.LR = 0x821FF810; return 0x821F01C0;
		/* 821FF80Ch case  132:*/		return 0x821FF810;
		  /* 821FF810h */ case  133:  		/* lwz R11, <#[R28 + 8]> */
		/* 821FF810h case  133:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821FF810h case  133:*/		return 0x821FF814;
		  /* 821FF814h */ case  134:  		/* mr R23, R3 */
		/* 821FF814h case  134:*/		regs.R23 = regs.R3;
		/* 821FF814h case  134:*/		return 0x821FF818;
		  /* 821FF818h */ case  135:  		/* mr R4, R28 */
		/* 821FF818h case  135:*/		regs.R4 = regs.R28;
		/* 821FF818h case  135:*/		return 0x821FF81C;
		  /* 821FF81Ch */ case  136:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FF81Ch case  136:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FF81Ch case  136:*/		return 0x821FF820;
		  /* 821FF820h */ case  137:  		/* li R7, 228 */
		/* 821FF820h case  137:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FF820h case  137:*/		return 0x821FF824;
		  /* 821FF824h */ case  138:  		/* li R6, 4 */
		/* 821FF824h case  138:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FF824h case  138:*/		return 0x821FF828;
		  /* 821FF828h */ case  139:  		/* mr R3, R31 */
		/* 821FF828h case  139:*/		regs.R3 = regs.R31;
		/* 821FF828h case  139:*/		return 0x821FF82C;
		  /* 821FF82Ch */ case  140:  		/* bl 141844 */
		/* 821FF82Ch case  140:*/		regs.LR = 0x821FF830; return 0x82222240;
		/* 821FF82Ch case  140:*/		return 0x821FF830;
		  /* 821FF830h */ case  141:  		/* mr R5, R3 */
		/* 821FF830h case  141:*/		regs.R5 = regs.R3;
		/* 821FF830h case  141:*/		return 0x821FF834;
		  /* 821FF834h */ case  142:  		/* mr R4, R28 */
		/* 821FF834h case  142:*/		regs.R4 = regs.R28;
		/* 821FF834h case  142:*/		return 0x821FF838;
		  /* 821FF838h */ case  143:  		/* mr R3, R31 */
		/* 821FF838h case  143:*/		regs.R3 = regs.R31;
		/* 821FF838h case  143:*/		return 0x821FF83C;
		  /* 821FF83Ch */ case  144:  		/* bl -64700 */
		/* 821FF83Ch case  144:*/		regs.LR = 0x821FF840; return 0x821EFB80;
		/* 821FF83Ch case  144:*/		return 0x821FF840;
		  /* 821FF840h */ case  145:  		/* mr R5, R3 */
		/* 821FF840h case  145:*/		regs.R5 = regs.R3;
		/* 821FF840h case  145:*/		return 0x821FF844;
		  /* 821FF844h */ case  146:  		/* mr R4, R23 */
		/* 821FF844h case  146:*/		regs.R4 = regs.R23;
		/* 821FF844h case  146:*/		return 0x821FF848;
		  /* 821FF848h */ case  147:  		/* mr R3, R31 */
		/* 821FF848h case  147:*/		regs.R3 = regs.R31;
		/* 821FF848h case  147:*/		return 0x821FF84C;
		  /* 821FF84Ch */ case  148:  		/* bl -62244 */
		/* 821FF84Ch case  148:*/		regs.LR = 0x821FF850; return 0x821F0528;
		/* 821FF84Ch case  148:*/		return 0x821FF850;
		  /* 821FF850h */ case  149:  		/* mr R28, R3 */
		/* 821FF850h case  149:*/		regs.R28 = regs.R3;
		/* 821FF850h case  149:*/		return 0x821FF854;
		  /* 821FF854h */ case  150:  		/* mr R5, R24 */
		/* 821FF854h case  150:*/		regs.R5 = regs.R24;
		/* 821FF854h case  150:*/		return 0x821FF858;
		  /* 821FF858h */ case  151:  		/* mr R4, R24 */
		/* 821FF858h case  151:*/		regs.R4 = regs.R24;
		/* 821FF858h case  151:*/		return 0x821FF85C;
		  /* 821FF85Ch */ case  152:  		/* mr R3, R31 */
		/* 821FF85Ch case  152:*/		regs.R3 = regs.R31;
		/* 821FF85Ch case  152:*/		return 0x821FF860;
		  /* 821FF860h */ case  153:  		/* bl -62472 */
		/* 821FF860h case  153:*/		regs.LR = 0x821FF864; return 0x821F0458;
		/* 821FF860h case  153:*/		return 0x821FF864;
		  /* 821FF864h */ case  154:  		/* mr R11, R3 */
		/* 821FF864h case  154:*/		regs.R11 = regs.R3;
		/* 821FF864h case  154:*/		return 0x821FF868;
		  /* 821FF868h */ case  155:  		/* li R7, 228 */
		/* 821FF868h case  155:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FF868h case  155:*/		return 0x821FF86C;
		  /* 821FF86Ch */ case  156:  		/* li R6, 4 */
		/* 821FF86Ch case  156:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FF86Ch case  156:*/		return 0x821FF870;
		  /* 821FF870h */ case  157:  		/* mr R3, R31 */
		/* 821FF870h case  157:*/		regs.R3 = regs.R31;
		/* 821FF870h case  157:*/		return 0x821FF874;
		  /* 821FF874h */ case  158:  		/* mr R4, R11 */
		/* 821FF874h case  158:*/		regs.R4 = regs.R11;
		/* 821FF874h case  158:*/		return 0x821FF878;
		  /* 821FF878h */ case  159:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FF878h case  159:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FF878h case  159:*/		return 0x821FF87C;
		  /* 821FF87Ch */ case  160:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 821FF87Ch case  160:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 821FF87Ch case  160:*/		return 0x821FF880;
		  /* 821FF880h */ case  161:  		/* bl 141760 */
		/* 821FF880h case  161:*/		regs.LR = 0x821FF884; return 0x82222240;
		/* 821FF880h case  161:*/		return 0x821FF884;
		  /* 821FF884h */ case  162:  		/* mr R5, R3 */
		/* 821FF884h case  162:*/		regs.R5 = regs.R3;
		/* 821FF884h case  162:*/		return 0x821FF888;
		  /* 821FF888h */ case  163:  		/* mr R4, R28 */
		/* 821FF888h case  163:*/		regs.R4 = regs.R28;
		/* 821FF888h case  163:*/		return 0x821FF88C;
		  /* 821FF88Ch */ case  164:  		/* mr R3, R31 */
		/* 821FF88Ch case  164:*/		regs.R3 = regs.R31;
		/* 821FF88Ch case  164:*/		return 0x821FF890;
		  /* 821FF890h */ case  165:  		/* bl -65456 */
		/* 821FF890h case  165:*/		regs.LR = 0x821FF894; return 0x821EF8E0;
		/* 821FF890h case  165:*/		return 0x821FF894;
		  /* 821FF894h */ case  166:  		/* mr R5, R3 */
		/* 821FF894h case  166:*/		regs.R5 = regs.R3;
		/* 821FF894h case  166:*/		return 0x821FF898;
		  /* 821FF898h */ case  167:  		/* mr R4, R24 */
		/* 821FF898h case  167:*/		regs.R4 = regs.R24;
		/* 821FF898h case  167:*/		return 0x821FF89C;
		  /* 821FF89Ch */ case  168:  		/* mr R3, R31 */
		/* 821FF89Ch case  168:*/		regs.R3 = regs.R31;
		/* 821FF89Ch case  168:*/		return 0x821FF8A0;
		  /* 821FF8A0h */ case  169:  		/* bl -62536 */
		/* 821FF8A0h case  169:*/		regs.LR = 0x821FF8A4; return 0x821F0458;
		/* 821FF8A0h case  169:*/		return 0x821FF8A4;
		  /* 821FF8A4h */ case  170:  		/* stw R3, <#[R30]> */
		/* 821FF8A4h case  170:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FF8A4h case  170:*/		return 0x821FF8A8;
		  /* 821FF8A8h */ case  171:  		/* li R11, 1 */
		/* 821FF8A8h case  171:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FF8A8h case  171:*/		return 0x821FF8AC;
		  /* 821FF8ACh */ case  172:  		/* addic. R27, R27, -1 */
		/* 821FF8ACh case  172:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821FF8ACh case  172:*/		return 0x821FF8B0;
		  /* 821FF8B0h */ case  173:  		/* lwz R10, <#[R30 + 4]> */
		/* 821FF8B0h case  173:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FF8B0h case  173:*/		return 0x821FF8B4;
		  /* 821FF8B4h */ case  174:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 821FF8B4h case  174:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 821FF8B4h case  174:*/		return 0x821FF8B8;
		  /* 821FF8B8h */ case  175:  		/* stw R10, <#[R30 + 4]> */
		/* 821FF8B8h case  175:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FF8B8h case  175:*/		return 0x821FF8BC;
		  /* 821FF8BCh */ case  176:  		/* bc 4, CR0_EQ, -744 */
		/* 821FF8BCh case  176:*/		if ( !regs.CR[0].eq ) { return 0x821FF5D4;  }
		/* 821FF8BCh case  176:*/		return 0x821FF8C0;
	}
	return 0x821FF8C0;
} // Block from 821FF5FCh-821FF8C0h (177 instructions)

//////////////////////////////////////////////////////
// Block at 821FF8C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF8C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF8C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF8C0);
		  /* 821FF8C0h */ case    0:  		/* cmpwi CR6, R25, 7 */
		/* 821FF8C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000007);
		/* 821FF8C0h case    0:*/		return 0x821FF8C4;
		  /* 821FF8C4h */ case    1:  		/* bc 4, CR6_EQ, -13732 */
		/* 821FF8C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FF8C4h case    1:*/		return 0x821FF8C8;
		  /* 821FF8C8h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821FF8C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FF8C8h case    2:*/		return 0x821FF8CC;
		  /* 821FF8CCh */ case    3:  		/* bc 12, CR6_EQ, -13740 */
		/* 821FF8CCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FF8CCh case    3:*/		return 0x821FF8D0;
		  /* 821FF8D0h */ case    4:  		/* mr R5, R29 */
		/* 821FF8D0h case    4:*/		regs.R5 = regs.R29;
		/* 821FF8D0h case    4:*/		return 0x821FF8D4;
		  /* 821FF8D4h */ case    5:  		/* mr R4, R26 */
		/* 821FF8D4h case    5:*/		regs.R4 = regs.R26;
		/* 821FF8D4h case    5:*/		return 0x821FF8D8;
		  /* 821FF8D8h */ case    6:  		/* addi R3, R1, 2808 */
		/* 821FF8D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xAF8);
		/* 821FF8D8h case    6:*/		return 0x821FF8DC;
		  /* 821FF8DCh */ case    7:  		/* b -8016 */
		/* 821FF8DCh case    7:*/		return 0x821FD98C;
		/* 821FF8DCh case    7:*/		return 0x821FF8E0;
		  /* 821FF8E0h */ case    8:  		/* mr R5, R29 */
		/* 821FF8E0h case    8:*/		regs.R5 = regs.R29;
		/* 821FF8E0h case    8:*/		return 0x821FF8E4;
		  /* 821FF8E4h */ case    9:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FF8E4h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FF8E4h case    9:*/		return 0x821FF8E8;
		  /* 821FF8E8h */ case   10:  		/* addi R3, R1, 752 */
		/* 821FF8E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2F0);
		/* 821FF8E8h case   10:*/		return 0x821FF8EC;
		  /* 821FF8ECh */ case   11:  		/* bl -38364 */
		/* 821FF8ECh case   11:*/		regs.LR = 0x821FF8F0; return 0x821F6310;
		/* 821FF8ECh case   11:*/		return 0x821FF8F0;
		  /* 821FF8F0h */ case   12:  		/* cmplwi CR6, R29, 0 */
		/* 821FF8F0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FF8F0h case   12:*/		return 0x821FF8F4;
		  /* 821FF8F4h */ case   13:  		/* bc 12, CR6_EQ, -13780 */
		/* 821FF8F4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FF8F4h case   13:*/		return 0x821FF8F8;
		  /* 821FF8F8h */ case   14:  		/* cmplwi CR6, R29, 4 */
		/* 821FF8F8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FF8F8h case   14:*/		return 0x821FF8FC;
		  /* 821FF8FCh */ case   15:  		/* mr R30, R29 */
		/* 821FF8FCh case   15:*/		regs.R30 = regs.R29;
		/* 821FF8FCh case   15:*/		return 0x821FF900;
		  /* 821FF900h */ case   16:  		/* bc 12, CR6_LT, 8 */
		/* 821FF900h case   16:*/		if ( regs.CR[6].lt ) { return 0x821FF908;  }
		/* 821FF900h case   16:*/		return 0x821FF904;
		  /* 821FF904h */ case   17:  		/* li R30, 4 */
		/* 821FF904h case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FF904h case   17:*/		return 0x821FF908;
	}
	return 0x821FF908;
} // Block from 821FF8C0h-821FF908h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821FF908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF908);
		  /* 821FF908h */ case    0:  		/* li R6, 228 */
		/* 821FF908h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FF908h case    0:*/		return 0x821FF90C;
		  /* 821FF90Ch */ case    1:  		/* mr R5, R30 */
		/* 821FF90Ch case    1:*/		regs.R5 = regs.R30;
		/* 821FF90Ch case    1:*/		return 0x821FF910;
		  /* 821FF910h */ case    2:  		/* addi R4, R1, 752 */
		/* 821FF910h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x2F0);
		/* 821FF910h case    2:*/		return 0x821FF914;
		  /* 821FF914h */ case    3:  		/* mr R3, R31 */
		/* 821FF914h case    3:*/		regs.R3 = regs.R31;
		/* 821FF914h case    3:*/		return 0x821FF918;
		  /* 821FF918h */ case    4:  		/* bl -53712 */
		/* 821FF918h case    4:*/		regs.LR = 0x821FF91C; return 0x821F2748;
		/* 821FF918h case    4:*/		return 0x821FF91C;
		  /* 821FF91Ch */ case    5:  		/* mr R11, R3 */
		/* 821FF91Ch case    5:*/		regs.R11 = regs.R3;
		/* 821FF91Ch case    5:*/		return 0x821FF920;
		  /* 821FF920h */ case    6:  		/* mr R3, R31 */
		/* 821FF920h case    6:*/		regs.R3 = regs.R31;
		/* 821FF920h case    6:*/		return 0x821FF924;
		  /* 821FF924h */ case    7:  		/* mr R4, R11 */
		/* 821FF924h case    7:*/		regs.R4 = regs.R11;
		/* 821FF924h case    7:*/		return 0x821FF928;
		  /* 821FF928h */ case    8:  		/* lwz R5, <#[R11 + 12]> */
		/* 821FF928h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FF928h case    8:*/		return 0x821FF92C;
		  /* 821FF92Ch */ case    9:  		/* bl -583740 */
		/* 821FF92Ch case    9:*/		regs.LR = 0x821FF930; return 0x821710F0;
		/* 821FF92Ch case    9:*/		return 0x821FF930;
		  /* 821FF930h */ case   10:  		/* li R4, 4 */
		/* 821FF930h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821FF930h case   10:*/		return 0x821FF934;
		  /* 821FF934h */ case   11:  		/* mr R28, R3 */
		/* 821FF934h case   11:*/		regs.R28 = regs.R3;
		/* 821FF934h case   11:*/		return 0x821FF938;
		  /* 821FF938h */ case   12:  		/* bl -556664 */
		/* 821FF938h case   12:*/		regs.LR = 0x821FF93C; return 0x82177AC0;
		/* 821FF938h case   12:*/		return 0x821FF93C;
		  /* 821FF93Ch */ case   13:  		/* mr R4, R28 */
		/* 821FF93Ch case   13:*/		regs.R4 = regs.R28;
		/* 821FF93Ch case   13:*/		return 0x821FF940;
		  /* 821FF940h */ case   14:  		/* mr R3, R31 */
		/* 821FF940h case   14:*/		regs.R3 = regs.R31;
		/* 821FF940h case   14:*/		return 0x821FF944;
		  /* 821FF944h */ case   15:  		/* bl -69372 */
		/* 821FF944h case   15:*/		regs.LR = 0x821FF948; return 0x821EEA48;
		/* 821FF944h case   15:*/		return 0x821FF948;
		  /* 821FF948h */ case   16:  		/* mr R11, R3 */
		/* 821FF948h case   16:*/		regs.R11 = regs.R3;
		/* 821FF948h case   16:*/		return 0x821FF94C;
		  /* 821FF94Ch */ case   17:  		/* li R7, 228 */
		/* 821FF94Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FF94Ch case   17:*/		return 0x821FF950;
		  /* 821FF950h */ case   18:  		/* li R6, 4 */
		/* 821FF950h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FF950h case   18:*/		return 0x821FF954;
		  /* 821FF954h */ case   19:  		/* mr R3, R31 */
		/* 821FF954h case   19:*/		regs.R3 = regs.R31;
		/* 821FF954h case   19:*/		return 0x821FF958;
		  /* 821FF958h */ case   20:  		/* mr R4, R11 */
		/* 821FF958h case   20:*/		regs.R4 = regs.R11;
		/* 821FF958h case   20:*/		return 0x821FF95C;
		  /* 821FF95Ch */ case   21:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FF95Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FF95Ch case   21:*/		return 0x821FF960;
		  /* 821FF960h */ case   22:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 821FF960h case   22:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 821FF960h case   22:*/		return 0x821FF964;
		  /* 821FF964h */ case   23:  		/* bl 141532 */
		/* 821FF964h case   23:*/		regs.LR = 0x821FF968; return 0x82222240;
		/* 821FF964h case   23:*/		return 0x821FF968;
		  /* 821FF968h */ case   24:  		/* mr R5, R3 */
		/* 821FF968h case   24:*/		regs.R5 = regs.R3;
		/* 821FF968h case   24:*/		return 0x821FF96C;
		  /* 821FF96Ch */ case   25:  		/* mr R4, R30 */
		/* 821FF96Ch case   25:*/		regs.R4 = regs.R30;
		/* 821FF96Ch case   25:*/		return 0x821FF970;
		  /* 821FF970h */ case   26:  		/* addi R3, R1, 752 */
		/* 821FF970h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2F0);
		/* 821FF970h case   26:*/		return 0x821FF974;
		  /* 821FF974h */ case   27:  		/* bl -55812 */
		/* 821FF974h case   27:*/		regs.LR = 0x821FF978; return 0x821F1F70;
		/* 821FF974h case   27:*/		return 0x821FF978;
		  /* 821FF978h */ case   28:  		/* li R4, 0 */
		/* 821FF978h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FF978h case   28:*/		return 0x821FF97C;
		  /* 821FF97Ch */ case   29:  		/* addi R3, R1, 752 */
		/* 821FF97Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x2F0);
		/* 821FF97Ch case   29:*/		return 0x821FF980;
		  /* 821FF980h */ case   30:  		/* subf R29, R30, R29 */
		/* 821FF980h case   30:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 821FF980h case   30:*/		return 0x821FF984;
		  /* 821FF984h */ case   31:  		/* bl -72588 */
		/* 821FF984h case   31:*/		regs.LR = 0x821FF988; return 0x821EDDF8;
		/* 821FF984h case   31:*/		return 0x821FF988;
		  /* 821FF988h */ case   32:  		/* b -152 */
		/* 821FF988h case   32:*/		return 0x821FF8F0;
		/* 821FF988h case   32:*/		return 0x821FF98C;
		  /* 821FF98Ch */ case   33:  		/* li R28, 1 */
		/* 821FF98Ch case   33:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821FF98Ch case   33:*/		return 0x821FF990;
	}
	return 0x821FF990;
} // Block from 821FF908h-821FF990h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821FF990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF990);
		  /* 821FF990h */ case    0:  		/* mr R5, R29 */
		/* 821FF990h case    0:*/		regs.R5 = regs.R29;
		/* 821FF990h case    0:*/		return 0x821FF994;
		  /* 821FF994h */ case    1:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FF994h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FF994h case    1:*/		return 0x821FF998;
		  /* 821FF998h */ case    2:  		/* addi R3, R1, 1168 */
		/* 821FF998h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x490);
		/* 821FF998h case    2:*/		return 0x821FF99C;
		  /* 821FF99Ch */ case    3:  		/* bl -38540 */
		/* 821FF99Ch case    3:*/		regs.LR = 0x821FF9A0; return 0x821F6310;
		/* 821FF99Ch case    3:*/		return 0x821FF9A0;
		  /* 821FF9A0h */ case    4:  		/* mr R30, R29 */
		/* 821FF9A0h case    4:*/		regs.R30 = regs.R29;
		/* 821FF9A0h case    4:*/		return 0x821FF9A4;
		  /* 821FF9A4h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 821FF9A4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FF9A4h case    5:*/		return 0x821FF9A8;
		  /* 821FF9A8h */ case    6:  		/* bc 12, CR6_EQ, -13960 */
		/* 821FF9A8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FF9A8h case    6:*/		return 0x821FF9AC;
		  /* 821FF9ACh */ case    7:  		/* cmplwi CR6, R30, 4 */
		/* 821FF9ACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 821FF9ACh case    7:*/		return 0x821FF9B0;
		  /* 821FF9B0h */ case    8:  		/* li R5, 4 */
		/* 821FF9B0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FF9B0h case    8:*/		return 0x821FF9B4;
		  /* 821FF9B4h */ case    9:  		/* bc 12, CR6_GT, 8 */
		/* 821FF9B4h case    9:*/		if ( regs.CR[6].gt ) { return 0x821FF9BC;  }
		/* 821FF9B4h case    9:*/		return 0x821FF9B8;
		  /* 821FF9B8h */ case   10:  		/* mr R5, R30 */
		/* 821FF9B8h case   10:*/		regs.R5 = regs.R30;
		/* 821FF9B8h case   10:*/		return 0x821FF9BC;
	}
	return 0x821FF9BC;
} // Block from 821FF990h-821FF9BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821FF9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FF9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FF9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FF9BC);
		  /* 821FF9BCh */ case    0:  		/* li R7, 0 */
		/* 821FF9BCh case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821FF9BCh case    0:*/		return 0x821FF9C0;
		  /* 821FF9C0h */ case    1:  		/* li R6, 1 */
		/* 821FF9C0h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821FF9C0h case    1:*/		return 0x821FF9C4;
		  /* 821FF9C4h */ case    2:  		/* addi R4, R1, 1168 */
		/* 821FF9C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x490);
		/* 821FF9C4h case    2:*/		return 0x821FF9C8;
		  /* 821FF9C8h */ case    3:  		/* mr R3, R31 */
		/* 821FF9C8h case    3:*/		regs.R3 = regs.R31;
		/* 821FF9C8h case    3:*/		return 0x821FF9CC;
		  /* 821FF9CCh */ case    4:  		/* bl -54444 */
		/* 821FF9CCh case    4:*/		regs.LR = 0x821FF9D0; return 0x821F2520;
		/* 821FF9CCh case    4:*/		return 0x821FF9D0;
		  /* 821FF9D0h */ case    5:  		/* mr R11, R3 */
		/* 821FF9D0h case    5:*/		regs.R11 = regs.R3;
		/* 821FF9D0h case    5:*/		return 0x821FF9D4;
		  /* 821FF9D4h */ case    6:  		/* mr R5, R28 */
		/* 821FF9D4h case    6:*/		regs.R5 = regs.R28;
		/* 821FF9D4h case    6:*/		return 0x821FF9D8;
		  /* 821FF9D8h */ case    7:  		/* mr R3, R31 */
		/* 821FF9D8h case    7:*/		regs.R3 = regs.R31;
		/* 821FF9D8h case    7:*/		return 0x821FF9DC;
		  /* 821FF9DCh */ case    8:  		/* mr R4, R11 */
		/* 821FF9DCh case    8:*/		regs.R4 = regs.R11;
		/* 821FF9DCh case    8:*/		return 0x821FF9E0;
		  /* 821FF9E0h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821FF9E0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FF9E0h case    9:*/		return 0x821FF9E4;
		  /* 821FF9E4h */ case   10:  		/* rlwinm R29, R10, 7, 29, 31 */
		/* 821FF9E4h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R29,regs.R10);
		/* 821FF9E4h case   10:*/		return 0x821FF9E8;
		  /* 821FF9E8h */ case   11:  		/* bl 159160 */
		/* 821FF9E8h case   11:*/		regs.LR = 0x821FF9EC; return 0x822267A0;
		/* 821FF9E8h case   11:*/		return 0x821FF9EC;
		  /* 821FF9ECh */ case   12:  		/* mr R5, R3 */
		/* 821FF9ECh case   12:*/		regs.R5 = regs.R3;
		/* 821FF9ECh case   12:*/		return 0x821FF9F0;
		  /* 821FF9F0h */ case   13:  		/* mr R4, R29 */
		/* 821FF9F0h case   13:*/		regs.R4 = regs.R29;
		/* 821FF9F0h case   13:*/		return 0x821FF9F4;
		  /* 821FF9F4h */ case   14:  		/* addi R3, R1, 1168 */
		/* 821FF9F4h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x490);
		/* 821FF9F4h case   14:*/		return 0x821FF9F8;
		  /* 821FF9F8h */ case   15:  		/* bl -55944 */
		/* 821FF9F8h case   15:*/		regs.LR = 0x821FF9FC; return 0x821F1F70;
		/* 821FF9F8h case   15:*/		return 0x821FF9FC;
		  /* 821FF9FCh */ case   16:  		/* subf. R30, R29, R30 */
		/* 821FF9FCh case   16:*/		cpu::op::subf<1>(regs,&regs.R30,regs.R29,regs.R30);
		/* 821FF9FCh case   16:*/		return 0x821FFA00;
		  /* 821FFA00h */ case   17:  		/* bc 4, CR0_EQ, -84 */
		/* 821FFA00h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821FF9AC;  }
		/* 821FFA00h case   17:*/		return 0x821FFA04;
		  /* 821FFA04h */ case   18:  		/* b -14052 */
		/* 821FFA04h case   18:*/		return 0x821FC320;
		/* 821FFA04h case   18:*/		return 0x821FFA08;
		  /* 821FFA08h */ case   19:  		/* lwz R27, <#[R1 + 3500]> */
		/* 821FFA08h case   19:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FFA08h case   19:*/		return 0x821FFA0C;
		  /* 821FFA0Ch */ case   20:  		/* mulli R5, R29, 3 */
		/* 821FFA0Ch case   20:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R29,0x3);
		/* 821FFA0Ch case   20:*/		return 0x821FFA10;
		  /* 821FFA10h */ case   21:  		/* mr R4, R27 */
		/* 821FFA10h case   21:*/		regs.R4 = regs.R27;
		/* 821FFA10h case   21:*/		return 0x821FFA14;
		  /* 821FFA14h */ case   22:  		/* addi R3, R1, 1104 */
		/* 821FFA14h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x450);
		/* 821FFA14h case   22:*/		return 0x821FFA18;
		  /* 821FFA18h */ case   23:  		/* bl -38664 */
		/* 821FFA18h case   23:*/		regs.LR = 0x821FFA1C; return 0x821F6310;
		/* 821FFA18h case   23:*/		return 0x821FFA1C;
		  /* 821FFA1Ch */ case   24:  		/* rlwinm R28, R29, 1, 0, 30 */
		/* 821FFA1Ch case   24:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R29);
		/* 821FFA1Ch case   24:*/		return 0x821FFA20;
		  /* 821FFA20h */ case   25:  		/* mr R4, R27 */
		/* 821FFA20h case   25:*/		regs.R4 = regs.R27;
		/* 821FFA20h case   25:*/		return 0x821FFA24;
		  /* 821FFA24h */ case   26:  		/* mr R5, R28 */
		/* 821FFA24h case   26:*/		regs.R5 = regs.R28;
		/* 821FFA24h case   26:*/		return 0x821FFA28;
		  /* 821FFA28h */ case   27:  		/* addi R3, R1, 2520 */
		/* 821FFA28h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x9D8);
		/* 821FFA28h case   27:*/		return 0x821FFA2C;
		  /* 821FFA2Ch */ case   28:  		/* bl -38684 */
		/* 821FFA2Ch case   28:*/		regs.LR = 0x821FFA30; return 0x821F6310;
		/* 821FFA2Ch case   28:*/		return 0x821FFA30;
		  /* 821FFA30h */ case   29:  		/* mr R5, R29 */
		/* 821FFA30h case   29:*/		regs.R5 = regs.R29;
		/* 821FFA30h case   29:*/		return 0x821FFA34;
		  /* 821FFA34h */ case   30:  		/* mr R4, R27 */
		/* 821FFA34h case   30:*/		regs.R4 = regs.R27;
		/* 821FFA34h case   30:*/		return 0x821FFA38;
		  /* 821FFA38h */ case   31:  		/* addi R3, R1, 2008 */
		/* 821FFA38h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7D8);
		/* 821FFA38h case   31:*/		return 0x821FFA3C;
		  /* 821FFA3Ch */ case   32:  		/* bl -38700 */
		/* 821FFA3Ch case   32:*/		regs.LR = 0x821FFA40; return 0x821F6310;
		/* 821FFA3Ch case   32:*/		return 0x821FFA40;
		  /* 821FFA40h */ case   33:  		/* cmplwi CR6, R29, 0 */
		/* 821FFA40h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FFA40h case   33:*/		return 0x821FFA44;
		  /* 821FFA44h */ case   34:  		/* bc 12, CR6_EQ, 168 */
		/* 821FFA44h case   34:*/		if ( regs.CR[6].eq ) { return 0x821FFAEC;  }
		/* 821FFA44h case   34:*/		return 0x821FFA48;
		  /* 821FFA48h */ case   35:  		/* cmplwi CR6, R29, 4 */
		/* 821FFA48h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FFA48h case   35:*/		return 0x821FFA4C;
		  /* 821FFA4Ch */ case   36:  		/* mr R30, R29 */
		/* 821FFA4Ch case   36:*/		regs.R30 = regs.R29;
		/* 821FFA4Ch case   36:*/		return 0x821FFA50;
		  /* 821FFA50h */ case   37:  		/* bc 12, CR6_LT, 8 */
		/* 821FFA50h case   37:*/		if ( regs.CR[6].lt ) { return 0x821FFA58;  }
		/* 821FFA50h case   37:*/		return 0x821FFA54;
		  /* 821FFA54h */ case   38:  		/* li R30, 4 */
		/* 821FFA54h case   38:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FFA54h case   38:*/		return 0x821FFA58;
	}
	return 0x821FFA58;
} // Block from 821FF9BCh-821FFA58h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821FFA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFA58);
		  /* 821FFA58h */ case    0:  		/* li R6, 228 */
		/* 821FFA58h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FFA58h case    0:*/		return 0x821FFA5C;
		  /* 821FFA5Ch */ case    1:  		/* mr R5, R30 */
		/* 821FFA5Ch case    1:*/		regs.R5 = regs.R30;
		/* 821FFA5Ch case    1:*/		return 0x821FFA60;
		  /* 821FFA60h */ case    2:  		/* addi R4, R1, 1104 */
		/* 821FFA60h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x450);
		/* 821FFA60h case    2:*/		return 0x821FFA64;
		  /* 821FFA64h */ case    3:  		/* mr R3, R31 */
		/* 821FFA64h case    3:*/		regs.R3 = regs.R31;
		/* 821FFA64h case    3:*/		return 0x821FFA68;
		  /* 821FFA68h */ case    4:  		/* bl -54048 */
		/* 821FFA68h case    4:*/		regs.LR = 0x821FFA6C; return 0x821F2748;
		/* 821FFA68h case    4:*/		return 0x821FFA6C;
		  /* 821FFA6Ch */ case    5:  		/* mr R26, R3 */
		/* 821FFA6Ch case    5:*/		regs.R26 = regs.R3;
		/* 821FFA6Ch case    5:*/		return 0x821FFA70;
		  /* 821FFA70h */ case    6:  		/* li R7, 1 */
		/* 821FFA70h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FFA70h case    6:*/		return 0x821FFA74;
		  /* 821FFA74h */ case    7:  		/* li R6, 0 */
		/* 821FFA74h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FFA74h case    7:*/		return 0x821FFA78;
		  /* 821FFA78h */ case    8:  		/* mr R5, R30 */
		/* 821FFA78h case    8:*/		regs.R5 = regs.R30;
		/* 821FFA78h case    8:*/		return 0x821FFA7C;
		  /* 821FFA7Ch */ case    9:  		/* addi R4, R1, 2520 */
		/* 821FFA7Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x9D8);
		/* 821FFA7Ch case    9:*/		return 0x821FFA80;
		  /* 821FFA80h */ case   10:  		/* mr R3, R31 */
		/* 821FFA80h case   10:*/		regs.R3 = regs.R31;
		/* 821FFA80h case   10:*/		return 0x821FFA84;
		  /* 821FFA84h */ case   11:  		/* bl -54628 */
		/* 821FFA84h case   11:*/		regs.LR = 0x821FFA88; return 0x821F2520;
		/* 821FFA84h case   11:*/		return 0x821FFA88;
		  /* 821FFA88h */ case   12:  		/* mr R25, R3 */
		/* 821FFA88h case   12:*/		regs.R25 = regs.R3;
		/* 821FFA88h case   12:*/		return 0x821FFA8C;
		  /* 821FFA8Ch */ case   13:  		/* li R7, 1 */
		/* 821FFA8Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821FFA8Ch case   13:*/		return 0x821FFA90;
		  /* 821FFA90h */ case   14:  		/* li R6, 0 */
		/* 821FFA90h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821FFA90h case   14:*/		return 0x821FFA94;
		  /* 821FFA94h */ case   15:  		/* mr R5, R30 */
		/* 821FFA94h case   15:*/		regs.R5 = regs.R30;
		/* 821FFA94h case   15:*/		return 0x821FFA98;
		  /* 821FFA98h */ case   16:  		/* addi R4, R1, 2008 */
		/* 821FFA98h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x7D8);
		/* 821FFA98h case   16:*/		return 0x821FFA9C;
		  /* 821FFA9Ch */ case   17:  		/* mr R3, R31 */
		/* 821FFA9Ch case   17:*/		regs.R3 = regs.R31;
		/* 821FFA9Ch case   17:*/		return 0x821FFAA0;
		  /* 821FFAA0h */ case   18:  		/* bl -54656 */
		/* 821FFAA0h case   18:*/		regs.LR = 0x821FFAA4; return 0x821F2520;
		/* 821FFAA0h case   18:*/		return 0x821FFAA4;
		  /* 821FFAA4h */ case   19:  		/* mr R24, R3 */
		/* 821FFAA4h case   19:*/		regs.R24 = regs.R3;
		/* 821FFAA4h case   19:*/		return 0x821FFAA8;
		  /* 821FFAA8h */ case   20:  		/* mr R5, R25 */
		/* 821FFAA8h case   20:*/		regs.R5 = regs.R25;
		/* 821FFAA8h case   20:*/		return 0x821FFAAC;
		  /* 821FFAACh */ case   21:  		/* mr R4, R26 */
		/* 821FFAACh case   21:*/		regs.R4 = regs.R26;
		/* 821FFAACh case   21:*/		return 0x821FFAB0;
		  /* 821FFAB0h */ case   22:  		/* mr R3, R31 */
		/* 821FFAB0h case   22:*/		regs.R3 = regs.R31;
		/* 821FFAB0h case   22:*/		return 0x821FFAB4;
		  /* 821FFAB4h */ case   23:  		/* bl -71564 */
		/* 821FFAB4h case   23:*/		regs.LR = 0x821FFAB8; return 0x821EE328;
		/* 821FFAB4h case   23:*/		return 0x821FFAB8;
		  /* 821FFAB8h */ case   24:  		/* mr R4, R3 */
		/* 821FFAB8h case   24:*/		regs.R4 = regs.R3;
		/* 821FFAB8h case   24:*/		return 0x821FFABC;
		  /* 821FFABCh */ case   25:  		/* mr R5, R24 */
		/* 821FFABCh case   25:*/		regs.R5 = regs.R24;
		/* 821FFABCh case   25:*/		return 0x821FFAC0;
		  /* 821FFAC0h */ case   26:  		/* mr R3, R31 */
		/* 821FFAC0h case   26:*/		regs.R3 = regs.R31;
		/* 821FFAC0h case   26:*/		return 0x821FFAC4;
		  /* 821FFAC4h */ case   27:  		/* bl -65796 */
		/* 821FFAC4h case   27:*/		regs.LR = 0x821FFAC8; return 0x821EF9C0;
		/* 821FFAC4h case   27:*/		return 0x821FFAC8;
		  /* 821FFAC8h */ case   28:  		/* mr R5, R3 */
		/* 821FFAC8h case   28:*/		regs.R5 = regs.R3;
		/* 821FFAC8h case   28:*/		return 0x821FFACC;
		  /* 821FFACCh */ case   29:  		/* mr R4, R30 */
		/* 821FFACCh case   29:*/		regs.R4 = regs.R30;
		/* 821FFACCh case   29:*/		return 0x821FFAD0;
		  /* 821FFAD0h */ case   30:  		/* addi R3, R1, 1104 */
		/* 821FFAD0h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x450);
		/* 821FFAD0h case   30:*/		return 0x821FFAD4;
		  /* 821FFAD4h */ case   31:  		/* bl -56252 */
		/* 821FFAD4h case   31:*/		regs.LR = 0x821FFAD8; return 0x821F1F18;
		/* 821FFAD4h case   31:*/		return 0x821FFAD8;
		  /* 821FFAD8h */ case   32:  		/* li R4, 0 */
		/* 821FFAD8h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FFAD8h case   32:*/		return 0x821FFADC;
		  /* 821FFADCh */ case   33:  		/* addi R3, R1, 1104 */
		/* 821FFADCh case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x450);
		/* 821FFADCh case   33:*/		return 0x821FFAE0;
		  /* 821FFAE0h */ case   34:  		/* subf R29, R30, R29 */
		/* 821FFAE0h case   34:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 821FFAE0h case   34:*/		return 0x821FFAE4;
		  /* 821FFAE4h */ case   35:  		/* bl -72940 */
		/* 821FFAE4h case   35:*/		regs.LR = 0x821FFAE8; return 0x821EDDF8;
		/* 821FFAE4h case   35:*/		return 0x821FFAE8;
		  /* 821FFAE8h */ case   36:  		/* b -168 */
		/* 821FFAE8h case   36:*/		return 0x821FFA40;
		/* 821FFAE8h case   36:*/		return 0x821FFAEC;
	}
	return 0x821FFAEC;
} // Block from 821FFA58h-821FFAECh (37 instructions)

//////////////////////////////////////////////////////
// Block at 821FFAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFAEC);
		  /* 821FFAECh */ case    0:  		/* cmplwi CR0, R28, 0 */
		/* 821FFAECh case    0:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 821FFAECh case    0:*/		return 0x821FFAF0;
		  /* 821FFAF0h */ case    1:  		/* bc 12, CR0_EQ, -14288 */
		/* 821FFAF0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821FC320;  }
		/* 821FFAF0h case    1:*/		return 0x821FFAF4;
		  /* 821FFAF4h */ case    2:  		/* mr R5, R28 */
		/* 821FFAF4h case    2:*/		regs.R5 = regs.R28;
		/* 821FFAF4h case    2:*/		return 0x821FFAF8;
		  /* 821FFAF8h */ case    3:  		/* mr R4, R27 */
		/* 821FFAF8h case    3:*/		regs.R4 = regs.R27;
		/* 821FFAF8h case    3:*/		return 0x821FFAFC;
		  /* 821FFAFCh */ case    4:  		/* addi R3, R1, 3080 */
		/* 821FFAFCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC08);
		/* 821FFAFCh case    4:*/		return 0x821FFB00;
		  /* 821FFB00h */ case    5:  		/* b -8564 */
		/* 821FFB00h case    5:*/		return 0x821FD98C;
		/* 821FFB00h case    5:*/		return 0x821FFB04;
		  /* 821FFB04h */ case    6:  		/* lwz R11, <#[R31 + 48]> */
		/* 821FFB04h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821FFB04h case    6:*/		return 0x821FFB08;
		  /* 821FFB08h */ case    7:  		/* lis R10, -1 */
		/* 821FFB08h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821FFB08h case    7:*/		return 0x821FFB0C;
		  /* 821FFB0Ch */ case    8:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821FFB0Ch case    8:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821FFB0Ch case    8:*/		return 0x821FFB10;
		  /* 821FFB10h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 821FFB10h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821FFB10h case    9:*/		return 0x821FFB14;
		  /* 821FFB14h */ case   10:  		/* bc 4, CR6_EQ, 19072 */
		/* 821FFB14h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82204594;  }
		/* 821FFB14h case   10:*/		return 0x821FFB18;
		  /* 821FFB18h */ case   11:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FFB18h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FFB18h case   11:*/		return 0x821FFB1C;
		  /* 821FFB1Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821FFB1Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FFB1Ch case   12:*/		return 0x821FFB20;
		  /* 821FFB20h */ case   13:  		/* bc 12, CR6_EQ, 19104 */
		/* 821FFB20h case   13:*/		if ( regs.CR[6].eq ) { return 0x822045C0;  }
		/* 821FFB20h case   13:*/		return 0x821FFB24;
		  /* 821FFB24h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FFB24h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FFB24h case   14:*/		return 0x821FFB28;
		  /* 821FFB28h */ case   15:  		/* cmpwi CR6, R10, 1 */
		/* 821FFB28h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FFB28h case   15:*/		return 0x821FFB2C;
		  /* 821FFB2Ch */ case   16:  		/* bc 4, CR6_EQ, 19092 */
		/* 821FFB2Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x822045C0;  }
		/* 821FFB2Ch case   16:*/		return 0x821FFB30;
		  /* 821FFB30h */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 821FFB30h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821FFB30h case   17:*/		return 0x821FFB34;
		  /* 821FFB34h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821FFB34h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FFB34h case   18:*/		return 0x821FFB38;
		  /* 821FFB38h */ case   19:  		/* bc 12, CR6_EQ, 19068 */
		/* 821FFB38h case   19:*/		if ( regs.CR[6].eq ) { return 0x822045B4;  }
		/* 821FFB38h case   19:*/		return 0x821FFB3C;
		  /* 821FFB3Ch */ case   20:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FFB3Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FFB3Ch case   20:*/		return 0x821FFB40;
		  /* 821FFB40h */ case   21:  		/* cmpwi CR6, R10, 1 */
		/* 821FFB40h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FFB40h case   21:*/		return 0x821FFB44;
		  /* 821FFB44h */ case   22:  		/* bc 4, CR6_EQ, 19056 */
		/* 821FFB44h case   22:*/		if ( !regs.CR[6].eq ) { return 0x822045B4;  }
		/* 821FFB44h case   22:*/		return 0x821FFB48;
		  /* 821FFB48h */ case   23:  		/* lwz R4, <#[R11 + 8]> */
		/* 821FFB48h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 821FFB48h case   23:*/		return 0x821FFB4C;
		  /* 821FFB4Ch */ case   24:  		/* lwz R11, <#[R4 + 4]> */
		/* 821FFB4Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821FFB4Ch case   24:*/		return 0x821FFB50;
		  /* 821FFB50h */ case   25:  		/* cmpwi CR6, R11, 1 */
		/* 821FFB50h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821FFB50h case   25:*/		return 0x821FFB54;
		  /* 821FFB54h */ case   26:  		/* bc 4, CR6_EQ, 48 */
		/* 821FFB54h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821FFB84;  }
		/* 821FFB54h case   26:*/		return 0x821FFB58;
		  /* 821FFB58h */ case   27:  		/* lwz R11, <#[R4 + 12]> */
		/* 821FFB58h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821FFB58h case   27:*/		return 0x821FFB5C;
		  /* 821FFB5Ch */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 821FFB5Ch case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FFB5Ch case   28:*/		return 0x821FFB60;
		  /* 821FFB60h */ case   29:  		/* bc 12, CR6_EQ, 12 */
		/* 821FFB60h case   29:*/		if ( regs.CR[6].eq ) { return 0x821FFB6C;  }
		/* 821FFB60h case   29:*/		return 0x821FFB64;
		  /* 821FFB64h */ case   30:  		/* li R3, 0 */
		/* 821FFB64h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821FFB64h case   30:*/		return 0x821FFB68;
		  /* 821FFB68h */ case   31:  		/* b 44 */
		/* 821FFB68h case   31:*/		return 0x821FFB94;
		/* 821FFB68h case   31:*/		return 0x821FFB6C;
	}
	return 0x821FFB6C;
} // Block from 821FFAECh-821FFB6Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 821FFB6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFB6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFB6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFB6C);
		  /* 821FFB6Ch */ case    0:  		/* addi R6, R1, 268 */
		/* 821FFB6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x10C);
		/* 821FFB6Ch case    0:*/		return 0x821FFB70;
		  /* 821FFB70h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 821FFB70h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 821FFB70h case    1:*/		return 0x821FFB74;
		  /* 821FFB74h */ case    2:  		/* addi R5, R1, 272 */
		/* 821FFB74h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x110);
		/* 821FFB74h case    2:*/		return 0x821FFB78;
		  /* 821FFB78h */ case    3:  		/* mr R3, R31 */
		/* 821FFB78h case    3:*/		regs.R3 = regs.R31;
		/* 821FFB78h case    3:*/		return 0x821FFB7C;
		  /* 821FFB7Ch */ case    4:  		/* bl -80932 */
		/* 821FFB7Ch case    4:*/		regs.LR = 0x821FFB80; return 0x821EBF58;
		/* 821FFB7Ch case    4:*/		return 0x821FFB80;
		  /* 821FFB80h */ case    5:  		/* b 20 */
		/* 821FFB80h case    5:*/		return 0x821FFB94;
		/* 821FFB80h case    5:*/		return 0x821FFB84;
	}
	return 0x821FFB84;
} // Block from 821FFB6Ch-821FFB84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FFB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFB84);
		  /* 821FFB84h */ case    0:  		/* addi R6, R1, 268 */
		/* 821FFB84h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x10C);
		/* 821FFB84h case    0:*/		return 0x821FFB88;
		  /* 821FFB88h */ case    1:  		/* addi R5, R1, 272 */
		/* 821FFB88h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x110);
		/* 821FFB88h case    1:*/		return 0x821FFB8C;
		  /* 821FFB8Ch */ case    2:  		/* mr R3, R31 */
		/* 821FFB8Ch case    2:*/		regs.R3 = regs.R31;
		/* 821FFB8Ch case    2:*/		return 0x821FFB90;
		  /* 821FFB90h */ case    3:  		/* bl -81080 */
		/* 821FFB90h case    3:*/		regs.LR = 0x821FFB94; return 0x821EBED8;
		/* 821FFB90h case    3:*/		return 0x821FFB94;
	}
	return 0x821FFB94;
} // Block from 821FFB84h-821FFB94h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821FFB94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFB94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFB94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFB94);
		  /* 821FFB94h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FFB94h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FFB94h case    0:*/		return 0x821FFB98;
		  /* 821FFB98h */ case    1:  		/* bc 12, CR0_EQ, 18960 */
		/* 821FFB98h case    1:*/		if ( regs.CR[0].eq ) { return 0x822045A8;  }
		/* 821FFB98h case    1:*/		return 0x821FFB9C;
		  /* 821FFB9Ch */ case    2:  		/* lwz R11, <#[R1 + 268]> */
		/* 821FFB9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000010C) );
		/* 821FFB9Ch case    2:*/		return 0x821FFBA0;
		  /* 821FFBA0h */ case    3:  		/* li R5, 4 */
		/* 821FFBA0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821FFBA0h case    3:*/		return 0x821FFBA4;
		  /* 821FFBA4h */ case    4:  		/* lwz R10, <#[R1 + 272]> */
		/* 821FFBA4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000110) );
		/* 821FFBA4h case    4:*/		return 0x821FFBA8;
		  /* 821FFBA8h */ case    5:  		/* mr R4, R31 */
		/* 821FFBA8h case    5:*/		regs.R4 = regs.R31;
		/* 821FFBA8h case    5:*/		return 0x821FFBAC;
		  /* 821FFBACh */ case    6:  		/* addi R3, R1, 560 */
		/* 821FFBACh case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x230);
		/* 821FFBACh case    6:*/		return 0x821FFBB0;
		  /* 821FFBB0h */ case    7:  		/* fmr FR4, FR31 */
		/* 821FFBB0h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FFBB0h case    7:*/		return 0x821FFBB4;
		  /* 821FFBB4h */ case    8:  		/* fmr FR3, FR31 */
		/* 821FFBB4h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FFBB4h case    8:*/		return 0x821FFBB8;
		  /* 821FFBB8h */ case    9:  		/* mullw R28, R10, R11 */
		/* 821FFBB8h case    9:*/		cpu::op::mullw<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 821FFBB8h case    9:*/		return 0x821FFBBC;
		  /* 821FFBBCh */ case   10:  		/* fmr FR2, FR31 */
		/* 821FFBBCh case   10:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FFBBCh case   10:*/		return 0x821FFBC0;
		  /* 821FFBC0h */ case   11:  		/* fmr FR1, FR31 */
		/* 821FFBC0h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821FFBC0h case   11:*/		return 0x821FFBC4;
		  /* 821FFBC4h */ case   12:  		/* bl 160396 */
		/* 821FFBC4h case   12:*/		regs.LR = 0x821FFBC8; return 0x82226E50;
		/* 821FFBC4h case   12:*/		return 0x821FFBC8;
		  /* 821FFBC8h */ case   13:  		/* lwz R11, <#[R1 + 564]> */
		/* 821FFBC8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000234) );
		/* 821FFBC8h case   13:*/		return 0x821FFBCC;
		  /* 821FFBCCh */ case   14:  		/* lwz R27, <#[R1 + 3500]> */
		/* 821FFBCCh case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FFBCCh case   14:*/		return 0x821FFBD0;
		  /* 821FFBD0h */ case   15:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 821FFBD0h case   15:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 821FFBD0h case   15:*/		return 0x821FFBD4;
		  /* 821FFBD4h */ case   16:  		/* mr R5, R28 */
		/* 821FFBD4h case   16:*/		regs.R5 = regs.R28;
		/* 821FFBD4h case   16:*/		return 0x821FFBD8;
		  /* 821FFBD8h */ case   17:  		/* oris R11, R11, 2 */
		/* 821FFBD8h case   17:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821FFBD8h case   17:*/		return 0x821FFBDC;
		  /* 821FFBDCh */ case   18:  		/* mr R4, R27 */
		/* 821FFBDCh case   18:*/		regs.R4 = regs.R27;
		/* 821FFBDCh case   18:*/		return 0x821FFBE0;
		  /* 821FFBE0h */ case   19:  		/* stw R11, <#[R1 + 564]> */
		/* 821FFBE0h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000234) );
		/* 821FFBE0h case   19:*/		return 0x821FFBE4;
		  /* 821FFBE4h */ case   20:  		/* addi R3, R1, 784 */
		/* 821FFBE4h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x310);
		/* 821FFBE4h case   20:*/		return 0x821FFBE8;
		  /* 821FFBE8h */ case   21:  		/* bl -39128 */
		/* 821FFBE8h case   21:*/		regs.LR = 0x821FFBEC; return 0x821F6310;
		/* 821FFBE8h case   21:*/		return 0x821FFBEC;
		  /* 821FFBECh */ case   22:  		/* mr R29, R28 */
		/* 821FFBECh case   22:*/		regs.R29 = regs.R28;
		/* 821FFBECh case   22:*/		return 0x821FFBF0;
		  /* 821FFBF0h */ case   23:  		/* cmplwi CR6, R29, 0 */
		/* 821FFBF0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FFBF0h case   23:*/		return 0x821FFBF4;
		  /* 821FFBF4h */ case   24:  		/* bc 12, CR6_EQ, 148 */
		/* 821FFBF4h case   24:*/		if ( regs.CR[6].eq ) { return 0x821FFC88;  }
		/* 821FFBF4h case   24:*/		return 0x821FFBF8;
		  /* 821FFBF8h */ case   25:  		/* cmplwi CR6, R29, 4 */
		/* 821FFBF8h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821FFBF8h case   25:*/		return 0x821FFBFC;
		  /* 821FFBFCh */ case   26:  		/* mr R30, R29 */
		/* 821FFBFCh case   26:*/		regs.R30 = regs.R29;
		/* 821FFBFCh case   26:*/		return 0x821FFC00;
		  /* 821FFC00h */ case   27:  		/* bc 12, CR6_LT, 8 */
		/* 821FFC00h case   27:*/		if ( regs.CR[6].lt ) { return 0x821FFC08;  }
		/* 821FFC00h case   27:*/		return 0x821FFC04;
		  /* 821FFC04h */ case   28:  		/* li R30, 4 */
		/* 821FFC04h case   28:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 821FFC04h case   28:*/		return 0x821FFC08;
	}
	return 0x821FFC08;
} // Block from 821FFB94h-821FFC08h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821FFC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFC08);
		  /* 821FFC08h */ case    0:  		/* li R6, 228 */
		/* 821FFC08h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821FFC08h case    0:*/		return 0x821FFC0C;
		  /* 821FFC0Ch */ case    1:  		/* mr R5, R30 */
		/* 821FFC0Ch case    1:*/		regs.R5 = regs.R30;
		/* 821FFC0Ch case    1:*/		return 0x821FFC10;
		  /* 821FFC10h */ case    2:  		/* addi R4, R1, 784 */
		/* 821FFC10h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x310);
		/* 821FFC10h case    2:*/		return 0x821FFC14;
		  /* 821FFC14h */ case    3:  		/* mr R3, R31 */
		/* 821FFC14h case    3:*/		regs.R3 = regs.R31;
		/* 821FFC14h case    3:*/		return 0x821FFC18;
		  /* 821FFC18h */ case    4:  		/* bl -54480 */
		/* 821FFC18h case    4:*/		regs.LR = 0x821FFC1C; return 0x821F2748;
		/* 821FFC18h case    4:*/		return 0x821FFC1C;
		  /* 821FFC1Ch */ case    5:  		/* mr R26, R3 */
		/* 821FFC1Ch case    5:*/		regs.R26 = regs.R3;
		/* 821FFC1Ch case    5:*/		return 0x821FFC20;
		  /* 821FFC20h */ case    6:  		/* addi R4, R1, 560 */
		/* 821FFC20h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x230);
		/* 821FFC20h case    6:*/		return 0x821FFC24;
		  /* 821FFC24h */ case    7:  		/* mr R3, R31 */
		/* 821FFC24h case    7:*/		regs.R3 = regs.R31;
		/* 821FFC24h case    7:*/		return 0x821FFC28;
		  /* 821FFC28h */ case    8:  		/* bl -55464 */
		/* 821FFC28h case    8:*/		regs.LR = 0x821FFC2C; return 0x821F2380;
		/* 821FFC28h case    8:*/		return 0x821FFC2C;
		  /* 821FFC2Ch */ case    9:  		/* mr R11, R3 */
		/* 821FFC2Ch case    9:*/		regs.R11 = regs.R3;
		/* 821FFC2Ch case    9:*/		return 0x821FFC30;
		  /* 821FFC30h */ case   10:  		/* mr R5, R26 */
		/* 821FFC30h case   10:*/		regs.R5 = regs.R26;
		/* 821FFC30h case   10:*/		return 0x821FFC34;
		  /* 821FFC34h */ case   11:  		/* mr R3, R31 */
		/* 821FFC34h case   11:*/		regs.R3 = regs.R31;
		/* 821FFC34h case   11:*/		return 0x821FFC38;
		  /* 821FFC38h */ case   12:  		/* mr R4, R11 */
		/* 821FFC38h case   12:*/		regs.R4 = regs.R11;
		/* 821FFC38h case   12:*/		return 0x821FFC3C;
		  /* 821FFC3Ch */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821FFC3Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FFC3Ch case   13:*/		return 0x821FFC40;
		  /* 821FFC40h */ case   14:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 821FFC40h case   14:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 821FFC40h case   14:*/		return 0x821FFC44;
		  /* 821FFC44h */ case   15:  		/* stw R10, <#[R11]> */
		/* 821FFC44h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821FFC44h case   15:*/		return 0x821FFC48;
		  /* 821FFC48h */ case   16:  		/* bl -69032 */
		/* 821FFC48h case   16:*/		regs.LR = 0x821FFC4C; return 0x821EEEA0;
		/* 821FFC48h case   16:*/		return 0x821FFC4C;
		  /* 821FFC4Ch */ case   17:  		/* mr R26, R3 */
		/* 821FFC4Ch case   17:*/		regs.R26 = regs.R3;
		/* 821FFC4Ch case   17:*/		return 0x821FFC50;
		  /* 821FFC50h */ case   18:  		/* mr R5, R3 */
		/* 821FFC50h case   18:*/		regs.R5 = regs.R3;
		/* 821FFC50h case   18:*/		return 0x821FFC54;
		  /* 821FFC54h */ case   19:  		/* mr R4, R30 */
		/* 821FFC54h case   19:*/		regs.R4 = regs.R30;
		/* 821FFC54h case   19:*/		return 0x821FFC58;
		  /* 821FFC58h */ case   20:  		/* addi R3, R1, 784 */
		/* 821FFC58h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x310);
		/* 821FFC58h case   20:*/		return 0x821FFC5C;
		  /* 821FFC5Ch */ case   21:  		/* bl -56644 */
		/* 821FFC5Ch case   21:*/		regs.LR = 0x821FFC60; return 0x821F1F18;
		/* 821FFC5Ch case   21:*/		return 0x821FFC60;
		  /* 821FFC60h */ case   22:  		/* mr R6, R31 */
		/* 821FFC60h case   22:*/		regs.R6 = regs.R31;
		/* 821FFC60h case   22:*/		return 0x821FFC64;
		  /* 821FFC64h */ case   23:  		/* mr R5, R26 */
		/* 821FFC64h case   23:*/		regs.R5 = regs.R26;
		/* 821FFC64h case   23:*/		return 0x821FFC68;
		  /* 821FFC68h */ case   24:  		/* lwz R3, <#[R31 + 564]> */
		/* 821FFC68h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000234) );
		/* 821FFC68h case   24:*/		return 0x821FFC6C;
		  /* 821FFC6Ch */ case   25:  		/* li R4, 0 */
		/* 821FFC6Ch case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FFC6Ch case   25:*/		return 0x821FFC70;
		  /* 821FFC70h */ case   26:  		/* bl -602784 */
		/* 821FFC70h case   26:*/		regs.LR = 0x821FFC74; return 0x8216C9D0;
		/* 821FFC70h case   26:*/		return 0x821FFC74;
		  /* 821FFC74h */ case   27:  		/* li R4, 0 */
		/* 821FFC74h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821FFC74h case   27:*/		return 0x821FFC78;
		  /* 821FFC78h */ case   28:  		/* addi R3, R1, 784 */
		/* 821FFC78h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x310);
		/* 821FFC78h case   28:*/		return 0x821FFC7C;
		  /* 821FFC7Ch */ case   29:  		/* subf R29, R30, R29 */
		/* 821FFC7Ch case   29:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 821FFC7Ch case   29:*/		return 0x821FFC80;
		  /* 821FFC80h */ case   30:  		/* bl -73352 */
		/* 821FFC80h case   30:*/		regs.LR = 0x821FFC84; return 0x821EDDF8;
		/* 821FFC80h case   30:*/		return 0x821FFC84;
		  /* 821FFC84h */ case   31:  		/* b -148 */
		/* 821FFC84h case   31:*/		return 0x821FFBF0;
		/* 821FFC84h case   31:*/		return 0x821FFC88;
	}
	return 0x821FFC88;
} // Block from 821FFC08h-821FFC88h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821FFC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFC88);
		  /* 821FFC88h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821FFC88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821FFC88h case    0:*/		return 0x821FFC8C;
		  /* 821FFC8Ch */ case    1:  		/* bc 12, CR6_EQ, -14700 */
		/* 821FFC8Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FFC8Ch case    1:*/		return 0x821FFC90;
		  /* 821FFC90h */ case    2:  		/* mr R5, R28 */
		/* 821FFC90h case    2:*/		regs.R5 = regs.R28;
		/* 821FFC90h case    2:*/		return 0x821FFC94;
		  /* 821FFC94h */ case    3:  		/* mr R4, R27 */
		/* 821FFC94h case    3:*/		regs.R4 = regs.R27;
		/* 821FFC94h case    3:*/		return 0x821FFC98;
		  /* 821FFC98h */ case    4:  		/* addi R3, R1, 2824 */
		/* 821FFC98h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB08);
		/* 821FFC98h case    4:*/		return 0x821FFC9C;
		  /* 821FFC9Ch */ case    5:  		/* b -8976 */
		/* 821FFC9Ch case    5:*/		return 0x821FD98C;
		/* 821FFC9Ch case    5:*/		return 0x821FFCA0;
		  /* 821FFCA0h */ case    6:  		/* mr R5, R29 */
		/* 821FFCA0h case    6:*/		regs.R5 = regs.R29;
		/* 821FFCA0h case    6:*/		return 0x821FFCA4;
		  /* 821FFCA4h */ case    7:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FFCA4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FFCA4h case    7:*/		return 0x821FFCA8;
		  /* 821FFCA8h */ case    8:  		/* addi R3, R1, 2360 */
		/* 821FFCA8h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x938);
		/* 821FFCA8h case    8:*/		return 0x821FFCAC;
		  /* 821FFCACh */ case    9:  		/* bl -39324 */
		/* 821FFCACh case    9:*/		regs.LR = 0x821FFCB0; return 0x821F6310;
		/* 821FFCACh case    9:*/		return 0x821FFCB0;
		  /* 821FFCB0h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 821FFCB0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FFCB0h case   10:*/		return 0x821FFCB4;
		  /* 821FFCB4h */ case   11:  		/* bc 12, CR6_EQ, -14740 */
		/* 821FFCB4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FFCB4h case   11:*/		return 0x821FFCB8;
		  /* 821FFCB8h */ case   12:  		/* addi R3, R1, 2360 */
		/* 821FFCB8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x938);
		/* 821FFCB8h case   12:*/		return 0x821FFCBC;
		  /* 821FFCBCh */ case   13:  		/* bl -257628 */
		/* 821FFCBCh case   13:*/		regs.LR = 0x821FFCC0; return 0x821C0E60;
		/* 821FFCBCh case   13:*/		return 0x821FFCC0;
		  /* 821FFCC0h */ case   14:  		/* mr R30, R3 */
		/* 821FFCC0h case   14:*/		regs.R30 = regs.R3;
		/* 821FFCC0h case   14:*/		return 0x821FFCC4;
		  /* 821FFCC4h */ case   15:  		/* mr R4, R3 */
		/* 821FFCC4h case   15:*/		regs.R4 = regs.R3;
		/* 821FFCC4h case   15:*/		return 0x821FFCC8;
		  /* 821FFCC8h */ case   16:  		/* mr R5, R25 */
		/* 821FFCC8h case   16:*/		regs.R5 = regs.R25;
		/* 821FFCC8h case   16:*/		return 0x821FFCCC;
		  /* 821FFCCCh */ case   17:  		/* mr R3, R31 */
		/* 821FFCCCh case   17:*/		regs.R3 = regs.R31;
		/* 821FFCCCh case   17:*/		return 0x821FFCD0;
		  /* 821FFCD0h */ case   18:  		/* bl -39808 */
		/* 821FFCD0h case   18:*/		regs.LR = 0x821FFCD4; return 0x821F6150;
		/* 821FFCD0h case   18:*/		return 0x821FFCD4;
		  /* 821FFCD4h */ case   19:  		/* stw R3, <#[R30]> */
		/* 821FFCD4h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821FFCD4h case   19:*/		return 0x821FFCD8;
		  /* 821FFCD8h */ case   20:  		/* li R11, 1 */
		/* 821FFCD8h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FFCD8h case   20:*/		return 0x821FFCDC;
		  /* 821FFCDCh */ case   21:  		/* addi R29, R29, -1 */
		/* 821FFCDCh case   21:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821FFCDCh case   21:*/		return 0x821FFCE0;
		  /* 821FFCE0h */ case   22:  		/* lwz R10, <#[R30 + 4]> */
		/* 821FFCE0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FFCE0h case   22:*/		return 0x821FFCE4;
		  /* 821FFCE4h */ case   23:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 821FFCE4h case   23:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 821FFCE4h case   23:*/		return 0x821FFCE8;
		  /* 821FFCE8h */ case   24:  		/* stw R10, <#[R30 + 4]> */
		/* 821FFCE8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821FFCE8h case   24:*/		return 0x821FFCEC;
		  /* 821FFCECh */ case   25:  		/* b -60 */
		/* 821FFCECh case   25:*/		return 0x821FFCB0;
		/* 821FFCECh case   25:*/		return 0x821FFCF0;
		  /* 821FFCF0h */ case   26:  		/* lwz R11, <#[R14 + 36]> */
		/* 821FFCF0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 821FFCF0h case   26:*/		return 0x821FFCF4;
		  /* 821FFCF4h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821FFCF4h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FFCF4h case   27:*/		return 0x821FFCF8;
		  /* 821FFCF8h */ case   28:  		/* bc 12, CR6_EQ, 18728 */
		/* 821FFCF8h case   28:*/		if ( regs.CR[6].eq ) { return 0x82204620;  }
		/* 821FFCF8h case   28:*/		return 0x821FFCFC;
		  /* 821FFCFCh */ case   29:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FFCFCh case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FFCFCh case   29:*/		return 0x821FFD00;
		  /* 821FFD00h */ case   30:  		/* cmpwi CR6, R10, 1 */
		/* 821FFD00h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FFD00h case   30:*/		return 0x821FFD04;
		  /* 821FFD04h */ case   31:  		/* bc 4, CR6_EQ, 18716 */
		/* 821FFD04h case   31:*/		if ( !regs.CR[6].eq ) { return 0x82204620;  }
		/* 821FFD04h case   31:*/		return 0x821FFD08;
		  /* 821FFD08h */ case   32:  		/* lwz R10, <#[R11 + 8]> */
		/* 821FFD08h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821FFD08h case   32:*/		return 0x821FFD0C;
		  /* 821FFD0Ch */ case   33:  		/* cmplwi CR6, R10, 0 */
		/* 821FFD0Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821FFD0Ch case   33:*/		return 0x821FFD10;
		  /* 821FFD10h */ case   34:  		/* bc 12, CR6_EQ, 18692 */
		/* 821FFD10h case   34:*/		if ( regs.CR[6].eq ) { return 0x82204614;  }
		/* 821FFD10h case   34:*/		return 0x821FFD14;
		  /* 821FFD14h */ case   35:  		/* lwz R9, <#[R10 + 4]> */
		/* 821FFD14h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 821FFD14h case   35:*/		return 0x821FFD18;
		  /* 821FFD18h */ case   36:  		/* cmpwi CR6, R9, 1 */
		/* 821FFD18h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 821FFD18h case   36:*/		return 0x821FFD1C;
		  /* 821FFD1Ch */ case   37:  		/* bc 4, CR6_EQ, 18680 */
		/* 821FFD1Ch case   37:*/		if ( !regs.CR[6].eq ) { return 0x82204614;  }
		/* 821FFD1Ch case   37:*/		return 0x821FFD20;
		  /* 821FFD20h */ case   38:  		/* lwz R11, <#[R11 + 12]> */
		/* 821FFD20h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FFD20h case   38:*/		return 0x821FFD24;
		  /* 821FFD24h */ case   39:  		/* cmplwi CR6, R11, 0 */
		/* 821FFD24h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821FFD24h case   39:*/		return 0x821FFD28;
		  /* 821FFD28h */ case   40:  		/* bc 12, CR6_EQ, 18656 */
		/* 821FFD28h case   40:*/		if ( regs.CR[6].eq ) { return 0x82204608;  }
		/* 821FFD28h case   40:*/		return 0x821FFD2C;
		  /* 821FFD2Ch */ case   41:  		/* lwz R9, <#[R11 + 4]> */
		/* 821FFD2Ch case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821FFD2Ch case   41:*/		return 0x821FFD30;
		  /* 821FFD30h */ case   42:  		/* cmpwi CR6, R9, 1 */
		/* 821FFD30h case   42:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 821FFD30h case   42:*/		return 0x821FFD34;
		  /* 821FFD34h */ case   43:  		/* bc 4, CR6_EQ, 18644 */
		/* 821FFD34h case   43:*/		if ( !regs.CR[6].eq ) { return 0x82204608;  }
		/* 821FFD34h case   43:*/		return 0x821FFD38;
		  /* 821FFD38h */ case   44:  		/* lwz R11, <#[R11 + 12]> */
		/* 821FFD38h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FFD38h case   44:*/		return 0x821FFD3C;
		  /* 821FFD3Ch */ case   45:  		/* lwz R4, <#[R10 + 8]> */
		/* 821FFD3Ch case   45:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000008) );
		/* 821FFD3Ch case   45:*/		return 0x821FFD40;
		  /* 821FFD40h */ case   46:  		/* cmplwi CR0, R11, 0 */
		/* 821FFD40h case   46:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821FFD40h case   46:*/		return 0x821FFD44;
		  /* 821FFD44h */ case   47:  		/* bc 12, CR0_EQ, 18616 */
		/* 821FFD44h case   47:*/		if ( regs.CR[0].eq ) { return 0x822045FC;  }
		/* 821FFD44h case   47:*/		return 0x821FFD48;
		  /* 821FFD48h */ case   48:  		/* lwz R10, <#[R11 + 4]> */
		/* 821FFD48h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821FFD48h case   48:*/		return 0x821FFD4C;
		  /* 821FFD4Ch */ case   49:  		/* cmpwi CR6, R10, 1 */
		/* 821FFD4Ch case   49:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821FFD4Ch case   49:*/		return 0x821FFD50;
		  /* 821FFD50h */ case   50:  		/* bc 4, CR6_EQ, 18604 */
		/* 821FFD50h case   50:*/		if ( !regs.CR[6].eq ) { return 0x822045FC;  }
		/* 821FFD50h case   50:*/		return 0x821FFD54;
		  /* 821FFD54h */ case   51:  		/* addi R5, R1, 96 */
		/* 821FFD54h case   51:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821FFD54h case   51:*/		return 0x821FFD58;
		  /* 821FFD58h */ case   52:  		/* lwz R30, <#[R11 + 8]> */
		/* 821FFD58h case   52:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 821FFD58h case   52:*/		return 0x821FFD5C;
		  /* 821FFD5Ch */ case   53:  		/* mr R3, R31 */
		/* 821FFD5Ch case   53:*/		regs.R3 = regs.R31;
		/* 821FFD5Ch case   53:*/		return 0x821FFD60;
		  /* 821FFD60h */ case   54:  		/* lwz R29, <#[R11 + 12]> */
		/* 821FFD60h case   54:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x0000000C) );
		/* 821FFD60h case   54:*/		return 0x821FFD64;
		  /* 821FFD64h */ case   55:  		/* bl -81372 */
		/* 821FFD64h case   55:*/		regs.LR = 0x821FFD68; return 0x821EBF88;
		/* 821FFD64h case   55:*/		return 0x821FFD68;
		  /* 821FFD68h */ case   56:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FFD68h case   56:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FFD68h case   56:*/		return 0x821FFD6C;
		  /* 821FFD6Ch */ case   57:  		/* mr R3, R31 */
		/* 821FFD6Ch case   57:*/		regs.R3 = regs.R31;
		/* 821FFD6Ch case   57:*/		return 0x821FFD70;
		  /* 821FFD70h */ case   58:  		/* bc 12, CR0_EQ, 18524 */
		/* 821FFD70h case   58:*/		if ( regs.CR[0].eq ) { return 0x822045CC;  }
		/* 821FFD70h case   58:*/		return 0x821FFD74;
		  /* 821FFD74h */ case   59:  		/* addi R5, R1, 184 */
		/* 821FFD74h case   59:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB8);
		/* 821FFD74h case   59:*/		return 0x821FFD78;
		  /* 821FFD78h */ case   60:  		/* mr R4, R30 */
		/* 821FFD78h case   60:*/		regs.R4 = regs.R30;
		/* 821FFD78h case   60:*/		return 0x821FFD7C;
		  /* 821FFD7Ch */ case   61:  		/* bl -81396 */
		/* 821FFD7Ch case   61:*/		regs.LR = 0x821FFD80; return 0x821EBF88;
		/* 821FFD7Ch case   61:*/		return 0x821FFD80;
		  /* 821FFD80h */ case   62:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FFD80h case   62:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FFD80h case   62:*/		return 0x821FFD84;
		  /* 821FFD84h */ case   63:  		/* mr R3, R31 */
		/* 821FFD84h case   63:*/		regs.R3 = regs.R31;
		/* 821FFD84h case   63:*/		return 0x821FFD88;
		  /* 821FFD88h */ case   64:  		/* bc 12, CR0_EQ, 18508 */
		/* 821FFD88h case   64:*/		if ( regs.CR[0].eq ) { return 0x822045D4;  }
		/* 821FFD88h case   64:*/		return 0x821FFD8C;
		  /* 821FFD8Ch */ case   65:  		/* lwz R11, <#[R1 + 184]> */
		/* 821FFD8Ch case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 821FFD8Ch case   65:*/		return 0x821FFD90;
		  /* 821FFD90h */ case   66:  		/* lwz R30, <#[R1 + 96]> */
		/* 821FFD90h case   66:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 821FFD90h case   66:*/		return 0x821FFD94;
		  /* 821FFD94h */ case   67:  		/* cmplw CR6, R11, R30 */
		/* 821FFD94h case   67:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821FFD94h case   67:*/		return 0x821FFD98;
		  /* 821FFD98h */ case   68:  		/* bc 4, CR6_EQ, 18500 */
		/* 821FFD98h case   68:*/		if ( !regs.CR[6].eq ) { return 0x822045DC;  }
		/* 821FFD98h case   68:*/		return 0x821FFD9C;
		  /* 821FFD9Ch */ case   69:  		/* addi R5, R1, 184 */
		/* 821FFD9Ch case   69:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB8);
		/* 821FFD9Ch case   69:*/		return 0x821FFDA0;
		  /* 821FFDA0h */ case   70:  		/* mr R4, R29 */
		/* 821FFDA0h case   70:*/		regs.R4 = regs.R29;
		/* 821FFDA0h case   70:*/		return 0x821FFDA4;
		  /* 821FFDA4h */ case   71:  		/* bl -81436 */
		/* 821FFDA4h case   71:*/		regs.LR = 0x821FFDA8; return 0x821EBF88;
		/* 821FFDA4h case   71:*/		return 0x821FFDA8;
		  /* 821FFDA8h */ case   72:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821FFDA8h case   72:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821FFDA8h case   72:*/		return 0x821FFDAC;
		  /* 821FFDACh */ case   73:  		/* bc 12, CR0_EQ, 18488 */
		/* 821FFDACh case   73:*/		if ( regs.CR[0].eq ) { return 0x822045E4;  }
		/* 821FFDACh case   73:*/		return 0x821FFDB0;
		  /* 821FFDB0h */ case   74:  		/* lwz R11, <#[R1 + 184]> */
		/* 821FFDB0h case   74:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 821FFDB0h case   74:*/		return 0x821FFDB4;
		  /* 821FFDB4h */ case   75:  		/* cmplw CR6, R11, R30 */
		/* 821FFDB4h case   75:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821FFDB4h case   75:*/		return 0x821FFDB8;
		  /* 821FFDB8h */ case   76:  		/* bc 4, CR6_EQ, 18488 */
		/* 821FFDB8h case   76:*/		if ( !regs.CR[6].eq ) { return 0x822045F0;  }
		/* 821FFDB8h case   76:*/		return 0x821FFDBC;
		  /* 821FFDBCh */ case   77:  		/* lwz R29, <#[R1 + 3500]> */
		/* 821FFDBCh case   77:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FFDBCh case   77:*/		return 0x821FFDC0;
		  /* 821FFDC0h */ case   78:  		/* mulli R5, R30, 3 */
		/* 821FFDC0h case   78:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R30,0x3);
		/* 821FFDC0h case   78:*/		return 0x821FFDC4;
		  /* 821FFDC4h */ case   79:  		/* mr R4, R29 */
		/* 821FFDC4h case   79:*/		regs.R4 = regs.R29;
		/* 821FFDC4h case   79:*/		return 0x821FFDC8;
		  /* 821FFDC8h */ case   80:  		/* addi R3, R1, 2040 */
		/* 821FFDC8h case   80:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7F8);
		/* 821FFDC8h case   80:*/		return 0x821FFDCC;
		  /* 821FFDCCh */ case   81:  		/* bl -39612 */
		/* 821FFDCCh case   81:*/		regs.LR = 0x821FFDD0; return 0x821F6310;
		/* 821FFDCCh case   81:*/		return 0x821FFDD0;
		  /* 821FFDD0h */ case   82:  		/* mr R4, R29 */
		/* 821FFDD0h case   82:*/		regs.R4 = regs.R29;
		/* 821FFDD0h case   82:*/		return 0x821FFDD4;
		  /* 821FFDD4h */ case   83:  		/* rlwinm R5, R30, 1, 0, 30 */
		/* 821FFDD4h case   83:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R30);
		/* 821FFDD4h case   83:*/		return 0x821FFDD8;
		  /* 821FFDD8h */ case   84:  		/* addi R3, R1, 2616 */
		/* 821FFDD8h case   84:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA38);
		/* 821FFDD8h case   84:*/		return 0x821FFDDC;
		  /* 821FFDDCh */ case   85:  		/* bl -39628 */
		/* 821FFDDCh case   85:*/		regs.LR = 0x821FFDE0; return 0x821F6310;
		/* 821FFDDCh case   85:*/		return 0x821FFDE0;
		  /* 821FFDE0h */ case   86:  		/* mr R5, R30 */
		/* 821FFDE0h case   86:*/		regs.R5 = regs.R30;
		/* 821FFDE0h case   86:*/		return 0x821FFDE4;
		  /* 821FFDE4h */ case   87:  		/* mr R4, R29 */
		/* 821FFDE4h case   87:*/		regs.R4 = regs.R29;
		/* 821FFDE4h case   87:*/		return 0x821FFDE8;
		  /* 821FFDE8h */ case   88:  		/* addi R3, R1, 2072 */
		/* 821FFDE8h case   88:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x818);
		/* 821FFDE8h case   88:*/		return 0x821FFDEC;
		  /* 821FFDECh */ case   89:  		/* bl -39644 */
		/* 821FFDECh case   89:*/		regs.LR = 0x821FFDF0; return 0x821F6310;
		/* 821FFDECh case   89:*/		return 0x821FFDF0;
		  /* 821FFDF0h */ case   90:  		/* cmplwi CR6, R30, 0 */
		/* 821FFDF0h case   90:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821FFDF0h case   90:*/		return 0x821FFDF4;
		  /* 821FFDF4h */ case   91:  		/* bc 12, CR6_EQ, -15060 */
		/* 821FFDF4h case   91:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FFDF4h case   91:*/		return 0x821FFDF8;
		  /* 821FFDF8h */ case   92:  		/* addi R3, R1, 2040 */
		/* 821FFDF8h case   92:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7F8);
		/* 821FFDF8h case   92:*/		return 0x821FFDFC;
		  /* 821FFDFCh */ case   93:  		/* bl -257948 */
		/* 821FFDFCh case   93:*/		regs.LR = 0x821FFE00; return 0x821C0E60;
		/* 821FFDFCh case   93:*/		return 0x821FFE00;
		  /* 821FFE00h */ case   94:  		/* mr R28, R3 */
		/* 821FFE00h case   94:*/		regs.R28 = regs.R3;
		/* 821FFE00h case   94:*/		return 0x821FFE04;
		  /* 821FFE04h */ case   95:  		/* addi R3, R1, 2616 */
		/* 821FFE04h case   95:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA38);
		/* 821FFE04h case   95:*/		return 0x821FFE08;
		  /* 821FFE08h */ case   96:  		/* bl -257960 */
		/* 821FFE08h case   96:*/		regs.LR = 0x821FFE0C; return 0x821C0E60;
		/* 821FFE08h case   96:*/		return 0x821FFE0C;
		  /* 821FFE0Ch */ case   97:  		/* mr R27, R3 */
		/* 821FFE0Ch case   97:*/		regs.R27 = regs.R3;
		/* 821FFE0Ch case   97:*/		return 0x821FFE10;
		  /* 821FFE10h */ case   98:  		/* addi R3, R1, 2072 */
		/* 821FFE10h case   98:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x818);
		/* 821FFE10h case   98:*/		return 0x821FFE14;
		  /* 821FFE14h */ case   99:  		/* bl -257972 */
		/* 821FFE14h case   99:*/		regs.LR = 0x821FFE18; return 0x821C0E60;
		/* 821FFE14h case   99:*/		return 0x821FFE18;
		  /* 821FFE18h */ case  100:  		/* mr R29, R3 */
		/* 821FFE18h case  100:*/		regs.R29 = regs.R3;
		/* 821FFE18h case  100:*/		return 0x821FFE1C;
		  /* 821FFE1Ch */ case  101:  		/* mr R4, R28 */
		/* 821FFE1Ch case  101:*/		regs.R4 = regs.R28;
		/* 821FFE1Ch case  101:*/		return 0x821FFE20;
		  /* 821FFE20h */ case  102:  		/* li R5, 68 */
		/* 821FFE20h case  102:*/		cpu::op::li<0>(regs,&regs.R5,0x44);
		/* 821FFE20h case  102:*/		return 0x821FFE24;
		  /* 821FFE24h */ case  103:  		/* mr R3, R31 */
		/* 821FFE24h case  103:*/		regs.R3 = regs.R31;
		/* 821FFE24h case  103:*/		return 0x821FFE28;
		  /* 821FFE28h */ case  104:  		/* bl -40152 */
		/* 821FFE28h case  104:*/		regs.LR = 0x821FFE2C; return 0x821F6150;
		/* 821FFE28h case  104:*/		return 0x821FFE2C;
		  /* 821FFE2Ch */ case  105:  		/* lwz R11, <#[R1 + 244]> */
		/* 821FFE2Ch case  105:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 821FFE2Ch case  105:*/		return 0x821FFE30;
		  /* 821FFE30h */ case  106:  		/* mr R4, R29 */
		/* 821FFE30h case  106:*/		regs.R4 = regs.R29;
		/* 821FFE30h case  106:*/		return 0x821FFE34;
		  /* 821FFE34h */ case  107:  		/* stw R3, <#[R1 + 240]> */
		/* 821FFE34h case  107:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000F0) );
		/* 821FFE34h case  107:*/		return 0x821FFE38;
		  /* 821FFE38h */ case  108:  		/* rlwinm R11, R11, 0, 15, 15 */
		/* 821FFE38h case  108:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821FFE38h case  108:*/		return 0x821FFE3C;
		  /* 821FFE3Ch */ case  109:  		/* mr R3, R31 */
		/* 821FFE3Ch case  109:*/		regs.R3 = regs.R31;
		/* 821FFE3Ch case  109:*/		return 0x821FFE40;
		  /* 821FFE40h */ case  110:  		/* ori R29, R11, 1 */
		/* 821FFE40h case  110:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x1);
		/* 821FFE40h case  110:*/		return 0x821FFE44;
		  /* 821FFE44h */ case  111:  		/* stw R29, <#[R1 + 244]> */
		/* 821FFE44h case  111:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000F4) );
		/* 821FFE44h case  111:*/		return 0x821FFE48;
		  /* 821FFE48h */ case  112:  		/* ld R5, <#[R1 + 240]> */
		/* 821FFE48h case  112:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000000F0) );
		/* 821FFE48h case  112:*/		return 0x821FFE4C;
		  /* 821FFE4Ch */ case  113:  		/* bl -38012 */
		/* 821FFE4Ch case  113:*/		regs.LR = 0x821FFE50; return 0x821F69D0;
		/* 821FFE4Ch case  113:*/		return 0x821FFE50;
		  /* 821FFE50h */ case  114:  		/* li R5, 11 */
		/* 821FFE50h case  114:*/		cpu::op::li<0>(regs,&regs.R5,0xB);
		/* 821FFE50h case  114:*/		return 0x821FFE54;
		  /* 821FFE54h */ case  115:  		/* mr R4, R28 */
		/* 821FFE54h case  115:*/		regs.R4 = regs.R28;
		/* 821FFE54h case  115:*/		return 0x821FFE58;
		  /* 821FFE58h */ case  116:  		/* mr R3, R31 */
		/* 821FFE58h case  116:*/		regs.R3 = regs.R31;
		/* 821FFE58h case  116:*/		return 0x821FFE5C;
		  /* 821FFE5Ch */ case  117:  		/* bl -40204 */
		/* 821FFE5Ch case  117:*/		regs.LR = 0x821FFE60; return 0x821F6150;
		/* 821FFE5Ch case  117:*/		return 0x821FFE60;
		  /* 821FFE60h */ case  118:  		/* rlwinm R11, R29, 0, 15, 15 */
		/* 821FFE60h case  118:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R11,regs.R29);
		/* 821FFE60h case  118:*/		return 0x821FFE64;
		  /* 821FFE64h */ case  119:  		/* stw R3, <#[R1 + 240]> */
		/* 821FFE64h case  119:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000F0) );
		/* 821FFE64h case  119:*/		return 0x821FFE68;
		  /* 821FFE68h */ case  120:  		/* mr R4, R27 */
		/* 821FFE68h case  120:*/		regs.R4 = regs.R27;
		/* 821FFE68h case  120:*/		return 0x821FFE6C;
		  /* 821FFE6Ch */ case  121:  		/* ori R11, R11, 1 */
		/* 821FFE6Ch case  121:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821FFE6Ch case  121:*/		return 0x821FFE70;
		  /* 821FFE70h */ case  122:  		/* mr R3, R31 */
		/* 821FFE70h case  122:*/		regs.R3 = regs.R31;
		/* 821FFE70h case  122:*/		return 0x821FFE74;
		  /* 821FFE74h */ case  123:  		/* stw R11, <#[R1 + 244]> */
		/* 821FFE74h case  123:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 821FFE74h case  123:*/		return 0x821FFE78;
		  /* 821FFE78h */ case  124:  		/* ld R5, <#[R1 + 240]> */
		/* 821FFE78h case  124:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x000000F0) );
		/* 821FFE78h case  124:*/		return 0x821FFE7C;
		  /* 821FFE7Ch */ case  125:  		/* bl -38060 */
		/* 821FFE7Ch case  125:*/		regs.LR = 0x821FFE80; return 0x821F69D0;
		/* 821FFE7Ch case  125:*/		return 0x821FFE80;
		  /* 821FFE80h */ case  126:  		/* addi R30, R30, -1 */
		/* 821FFE80h case  126:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821FFE80h case  126:*/		return 0x821FFE84;
		  /* 821FFE84h */ case  127:  		/* b -148 */
		/* 821FFE84h case  127:*/		return 0x821FFDF0;
		/* 821FFE84h case  127:*/		return 0x821FFE88;
		  /* 821FFE88h */ case  128:  		/* fmr FR1, FR27 */
		/* 821FFE88h case  128:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 821FFE88h case  128:*/		return 0x821FFE8C;
		  /* 821FFE8Ch */ case  129:  		/* bl -1474740 */
		/* 821FFE8Ch case  129:*/		regs.LR = 0x821FFE90; return 0x82097DD8;
		/* 821FFE8Ch case  129:*/		return 0x821FFE90;
		  /* 821FFE90h */ case  130:  		/* frsp FR0, FR1 */
		/* 821FFE90h case  130:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR1);
		/* 821FFE90h case  130:*/		return 0x821FFE94;
		  /* 821FFE94h */ case  131:  		/* li R5, 1 */
		/* 821FFE94h case  131:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FFE94h case  131:*/		return 0x821FFE98;
		  /* 821FFE98h */ case  132:  		/* mr R4, R31 */
		/* 821FFE98h case  132:*/		regs.R4 = regs.R31;
		/* 821FFE98h case  132:*/		return 0x821FFE9C;
		  /* 821FFE9Ch */ case  133:  		/* fmr FR2, FR31 */
		/* 821FFE9Ch case  133:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FFE9Ch case  133:*/		return 0x821FFEA0;
		  /* 821FFEA0h */ case  134:  		/* addi R3, R1, 1480 */
		/* 821FFEA0h case  134:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5C8);
		/* 821FFEA0h case  134:*/		return 0x821FFEA4;
		  /* 821FFEA4h */ case  135:  		/* fmr FR3, FR31 */
		/* 821FFEA4h case  135:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FFEA4h case  135:*/		return 0x821FFEA8;
		  /* 821FFEA8h */ case  136:  		/* fmr FR4, FR31 */
		/* 821FFEA8h case  136:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FFEA8h case  136:*/		return 0x821FFEAC;
		  /* 821FFEACh */ case  137:  		/* fdivs FR1, FR30, FR0 */
		/* 821FFEACh case  137:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR30,regs.FR0);
		/* 821FFEACh case  137:*/		return 0x821FFEB0;
		  /* 821FFEB0h */ case  138:  		/* bl 159648 */
		/* 821FFEB0h case  138:*/		regs.LR = 0x821FFEB4; return 0x82226E50;
		/* 821FFEB0h case  138:*/		return 0x821FFEB4;
		  /* 821FFEB4h */ case  139:  		/* li R5, 1 */
		/* 821FFEB4h case  139:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821FFEB4h case  139:*/		return 0x821FFEB8;
		  /* 821FFEB8h */ case  140:  		/* fmr FR4, FR31 */
		/* 821FFEB8h case  140:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821FFEB8h case  140:*/		return 0x821FFEBC;
		  /* 821FFEBCh */ case  141:  		/* mr R4, R31 */
		/* 821FFEBCh case  141:*/		regs.R4 = regs.R31;
		/* 821FFEBCh case  141:*/		return 0x821FFEC0;
		  /* 821FFEC0h */ case  142:  		/* fmr FR3, FR31 */
		/* 821FFEC0h case  142:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821FFEC0h case  142:*/		return 0x821FFEC4;
		  /* 821FFEC4h */ case  143:  		/* addi R3, R1, 1304 */
		/* 821FFEC4h case  143:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x518);
		/* 821FFEC4h case  143:*/		return 0x821FFEC8;
		  /* 821FFEC8h */ case  144:  		/* fmr FR2, FR31 */
		/* 821FFEC8h case  144:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821FFEC8h case  144:*/		return 0x821FFECC;
		  /* 821FFECCh */ case  145:  		/* fmr FR1, FR15 */
		/* 821FFECCh case  145:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR15);
		/* 821FFECCh case  145:*/		return 0x821FFED0;
		  /* 821FFED0h */ case  146:  		/* bl 159616 */
		/* 821FFED0h case  146:*/		regs.LR = 0x821FFED4; return 0x82226E50;
		/* 821FFED0h case  146:*/		return 0x821FFED4;
		  /* 821FFED4h */ case  147:  		/* mr R5, R29 */
		/* 821FFED4h case  147:*/		regs.R5 = regs.R29;
		/* 821FFED4h case  147:*/		return 0x821FFED8;
		  /* 821FFED8h */ case  148:  		/* addi R3, R1, 2392 */
		/* 821FFED8h case  148:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x958);
		/* 821FFED8h case  148:*/		return 0x821FFEDC;
		  /* 821FFEDCh */ case  149:  		/* lwz R4, <#[R1 + 3500]> */
		/* 821FFEDCh case  149:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FFEDCh case  149:*/		return 0x821FFEE0;
		  /* 821FFEE0h */ case  150:  		/* bl -39888 */
		/* 821FFEE0h case  150:*/		regs.LR = 0x821FFEE4; return 0x821F6310;
		/* 821FFEE0h case  150:*/		return 0x821FFEE4;
		  /* 821FFEE4h */ case  151:  		/* cmplwi CR6, R29, 0 */
		/* 821FFEE4h case  151:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821FFEE4h case  151:*/		return 0x821FFEE8;
		  /* 821FFEE8h */ case  152:  		/* bc 12, CR6_EQ, -15304 */
		/* 821FFEE8h case  152:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 821FFEE8h case  152:*/		return 0x821FFEEC;
		  /* 821FFEECh */ case  153:  		/* addi R3, R1, 2392 */
		/* 821FFEECh case  153:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x958);
		/* 821FFEECh case  153:*/		return 0x821FFEF0;
		  /* 821FFEF0h */ case  154:  		/* bl -258192 */
		/* 821FFEF0h case  154:*/		regs.LR = 0x821FFEF4; return 0x821C0E60;
		/* 821FFEF0h case  154:*/		return 0x821FFEF4;
		  /* 821FFEF4h */ case  155:  		/* mr R26, R3 */
		/* 821FFEF4h case  155:*/		regs.R26 = regs.R3;
		/* 821FFEF4h case  155:*/		return 0x821FFEF8;
		  /* 821FFEF8h */ case  156:  		/* mr R4, R3 */
		/* 821FFEF8h case  156:*/		regs.R4 = regs.R3;
		/* 821FFEF8h case  156:*/		return 0x821FFEFC;
		  /* 821FFEFCh */ case  157:  		/* addi R5, R1, 1480 */
		/* 821FFEFCh case  157:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C8);
		/* 821FFEFCh case  157:*/		return 0x821FFF00;
		  /* 821FFF00h */ case  158:  		/* mr R3, R31 */
		/* 821FFF00h case  158:*/		regs.R3 = regs.R31;
		/* 821FFF00h case  158:*/		return 0x821FFF04;
		  /* 821FFF04h */ case  159:  		/* bl -48644 */
		/* 821FFF04h case  159:*/		regs.LR = 0x821FFF08; return 0x821F4100;
		/* 821FFF04h case  159:*/		return 0x821FFF08;
		  /* 821FFF08h */ case  160:  		/* mr R30, R3 */
		/* 821FFF08h case  160:*/		regs.R30 = regs.R3;
		/* 821FFF08h case  160:*/		return 0x821FFF0C;
		  /* 821FFF0Ch */ case  161:  		/* mr R3, R31 */
		/* 821FFF0Ch case  161:*/		regs.R3 = regs.R31;
		/* 821FFF0Ch case  161:*/		return 0x821FFF10;
		  /* 821FFF10h */ case  162:  		/* mr R4, R30 */
		/* 821FFF10h case  162:*/		regs.R4 = regs.R30;
		/* 821FFF10h case  162:*/		return 0x821FFF14;
		  /* 821FFF14h */ case  163:  		/* bl -66060 */
		/* 821FFF14h case  163:*/		regs.LR = 0x821FFF18; return 0x821EFD08;
		/* 821FFF14h case  163:*/		return 0x821FFF18;
		  /* 821FFF18h */ case  164:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FFF18h case  164:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FFF18h case  164:*/		return 0x821FFF1C;
		  /* 821FFF1Ch */ case  165:  		/* mr R27, R3 */
		/* 821FFF1Ch case  165:*/		regs.R27 = regs.R3;
		/* 821FFF1Ch case  165:*/		return 0x821FFF20;
		  /* 821FFF20h */ case  166:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FFF20h case  166:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FFF20h case  166:*/		return 0x821FFF24;
		  /* 821FFF24h */ case  167:  		/* li R7, 228 */
		/* 821FFF24h case  167:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FFF24h case  167:*/		return 0x821FFF28;
		  /* 821FFF28h */ case  168:  		/* li R6, 4 */
		/* 821FFF28h case  168:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FFF28h case  168:*/		return 0x821FFF2C;
		  /* 821FFF2Ch */ case  169:  		/* mr R4, R30 */
		/* 821FFF2Ch case  169:*/		regs.R4 = regs.R30;
		/* 821FFF2Ch case  169:*/		return 0x821FFF30;
		  /* 821FFF30h */ case  170:  		/* mr R3, R31 */
		/* 821FFF30h case  170:*/		regs.R3 = regs.R31;
		/* 821FFF30h case  170:*/		return 0x821FFF34;
		  /* 821FFF34h */ case  171:  		/* bl 140044 */
		/* 821FFF34h case  171:*/		regs.LR = 0x821FFF38; return 0x82222240;
		/* 821FFF34h case  171:*/		return 0x821FFF38;
		  /* 821FFF38h */ case  172:  		/* mr R4, R3 */
		/* 821FFF38h case  172:*/		regs.R4 = regs.R3;
		/* 821FFF38h case  172:*/		return 0x821FFF3C;
		  /* 821FFF3Ch */ case  173:  		/* mr R3, R31 */
		/* 821FFF3Ch case  173:*/		regs.R3 = regs.R31;
		/* 821FFF3Ch case  173:*/		return 0x821FFF40;
		  /* 821FFF40h */ case  174:  		/* bl -69120 */
		/* 821FFF40h case  174:*/		regs.LR = 0x821FFF44; return 0x821EF140;
		/* 821FFF40h case  174:*/		return 0x821FFF44;
		  /* 821FFF44h */ case  175:  		/* mr R30, R3 */
		/* 821FFF44h case  175:*/		regs.R30 = regs.R3;
		/* 821FFF44h case  175:*/		return 0x821FFF48;
		  /* 821FFF48h */ case  176:  		/* cmpwi CR6, R25, 12 */
		/* 821FFF48h case  176:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x0000000C);
		/* 821FFF48h case  176:*/		return 0x821FFF4C;
		  /* 821FFF4Ch */ case  177:  		/* mr R3, R31 */
		/* 821FFF4Ch case  177:*/		regs.R3 = regs.R31;
		/* 821FFF4Ch case  177:*/		return 0x821FFF50;
		  /* 821FFF50h */ case  178:  		/* bc 4, CR6_EQ, 16 */
		/* 821FFF50h case  178:*/		if ( !regs.CR[6].eq ) { return 0x821FFF60;  }
		/* 821FFF50h case  178:*/		return 0x821FFF54;
		  /* 821FFF54h */ case  179:  		/* mr R4, R30 */
		/* 821FFF54h case  179:*/		regs.R4 = regs.R30;
		/* 821FFF54h case  179:*/		return 0x821FFF58;
		  /* 821FFF58h */ case  180:  		/* bl -556888 */
		/* 821FFF58h case  180:*/		regs.LR = 0x821FFF5C; return 0x82178000;
		/* 821FFF58h case  180:*/		return 0x821FFF5C;
		  /* 821FFF5Ch */ case  181:  		/* b 28 */
		/* 821FFF5Ch case  181:*/		return 0x821FFF78;
		/* 821FFF5Ch case  181:*/		return 0x821FFF60;
	}
	return 0x821FFF60;
} // Block from 821FFC88h-821FFF60h (182 instructions)

//////////////////////////////////////////////////////
// Block at 821FFF60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFF60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFF60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFF60);
		  /* 821FFF60h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821FFF60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821FFF60h case    0:*/		return 0x821FFF64;
		  /* 821FFF64h */ case    1:  		/* li R7, 228 */
		/* 821FFF64h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 821FFF64h case    1:*/		return 0x821FFF68;
		  /* 821FFF68h */ case    2:  		/* li R6, 4 */
		/* 821FFF68h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821FFF68h case    2:*/		return 0x821FFF6C;
		  /* 821FFF6Ch */ case    3:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 821FFF6Ch case    3:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 821FFF6Ch case    3:*/		return 0x821FFF70;
		  /* 821FFF70h */ case    4:  		/* mr R4, R30 */
		/* 821FFF70h case    4:*/		regs.R4 = regs.R30;
		/* 821FFF70h case    4:*/		return 0x821FFF74;
		  /* 821FFF74h */ case    5:  		/* bl 139980 */
		/* 821FFF74h case    5:*/		regs.LR = 0x821FFF78; return 0x82222240;
		/* 821FFF74h case    5:*/		return 0x821FFF78;
	}
	return 0x821FFF78;
} // Block from 821FFF60h-821FFF78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821FFF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFF78);
		  /* 821FFF78h */ case    0:  		/* mr R5, R3 */
		/* 821FFF78h case    0:*/		regs.R5 = regs.R3;
		/* 821FFF78h case    0:*/		return 0x821FFF7C;
		  /* 821FFF7Ch */ case    1:  		/* mr R4, R27 */
		/* 821FFF7Ch case    1:*/		regs.R4 = regs.R27;
		/* 821FFF7Ch case    1:*/		return 0x821FFF80;
		  /* 821FFF80h */ case    2:  		/* mr R3, R31 */
		/* 821FFF80h case    2:*/		regs.R3 = regs.R31;
		/* 821FFF80h case    2:*/		return 0x821FFF84;
		  /* 821FFF84h */ case    3:  		/* bl -67460 */
		/* 821FFF84h case    3:*/		regs.LR = 0x821FFF88; return 0x821EF800;
		/* 821FFF84h case    3:*/		return 0x821FFF88;
		  /* 821FFF88h */ case    4:  		/* mr R28, R3 */
		/* 821FFF88h case    4:*/		regs.R28 = regs.R3;
		/* 821FFF88h case    4:*/		return 0x821FFF8C;
		  /* 821FFF8Ch */ case    5:  		/* cmpwi CR6, R25, 75 */
		/* 821FFF8Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x0000004B);
		/* 821FFF8Ch case    5:*/		return 0x821FFF90;
		  /* 821FFF90h */ case    6:  		/* mr R3, R31 */
		/* 821FFF90h case    6:*/		regs.R3 = regs.R31;
		/* 821FFF90h case    6:*/		return 0x821FFF94;
		  /* 821FFF94h */ case    7:  		/* bc 4, CR6_EQ, 48 */
		/* 821FFF94h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821FFFC4;  }
		/* 821FFF94h case    7:*/		return 0x821FFF98;
		  /* 821FFF98h */ case    8:  		/* mr R5, R30 */
		/* 821FFF98h case    8:*/		regs.R5 = regs.R30;
		/* 821FFF98h case    8:*/		return 0x821FFF9C;
		  /* 821FFF9Ch */ case    9:  		/* mr R4, R27 */
		/* 821FFF9Ch case    9:*/		regs.R4 = regs.R27;
		/* 821FFF9Ch case    9:*/		return 0x821FFFA0;
		  /* 821FFFA0h */ case   10:  		/* bl -64328 */
		/* 821FFFA0h case   10:*/		regs.LR = 0x821FFFA4; return 0x821F0458;
		/* 821FFFA0h case   10:*/		return 0x821FFFA4;
		  /* 821FFFA4h */ case   11:  		/* mr R4, R3 */
		/* 821FFFA4h case   11:*/		regs.R4 = regs.R3;
		/* 821FFFA4h case   11:*/		return 0x821FFFA8;
		  /* 821FFFA8h */ case   12:  		/* mr R3, R31 */
		/* 821FFFA8h case   12:*/		regs.R3 = regs.R31;
		/* 821FFFA8h case   12:*/		return 0x821FFFAC;
		  /* 821FFFACh */ case   13:  		/* bl -65908 */
		/* 821FFFACh case   13:*/		regs.LR = 0x821FFFB0; return 0x821EFE38;
		/* 821FFFACh case   13:*/		return 0x821FFFB0;
		  /* 821FFFB0h */ case   14:  		/* mr R5, R3 */
		/* 821FFFB0h case   14:*/		regs.R5 = regs.R3;
		/* 821FFFB0h case   14:*/		return 0x821FFFB4;
		  /* 821FFFB4h */ case   15:  		/* mr R4, R28 */
		/* 821FFFB4h case   15:*/		regs.R4 = regs.R28;
		/* 821FFFB4h case   15:*/		return 0x821FFFB8;
		  /* 821FFFB8h */ case   16:  		/* mr R3, R31 */
		/* 821FFFB8h case   16:*/		regs.R3 = regs.R31;
		/* 821FFFB8h case   16:*/		return 0x821FFFBC;
		  /* 821FFFBCh */ case   17:  		/* bl -64148 */
		/* 821FFFBCh case   17:*/		regs.LR = 0x821FFFC0; return 0x821F0528;
		/* 821FFFBCh case   17:*/		return 0x821FFFC0;
		  /* 821FFFC0h */ case   18:  		/* b 16 */
		/* 821FFFC0h case   18:*/		return 0x821FFFD0;
		/* 821FFFC0h case   18:*/		return 0x821FFFC4;
	}
	return 0x821FFFC4;
} // Block from 821FFF78h-821FFFC4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821FFFC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFFC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFFC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFFC4);
		  /* 821FFFC4h */ case    0:  		/* addi R5, R1, 1304 */
		/* 821FFFC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x518);
		/* 821FFFC4h case    0:*/		return 0x821FFFC8;
		  /* 821FFFC8h */ case    1:  		/* mr R4, R28 */
		/* 821FFFC8h case    1:*/		regs.R4 = regs.R28;
		/* 821FFFC8h case    1:*/		return 0x821FFFCC;
		  /* 821FFFCCh */ case    2:  		/* bl -49052 */
		/* 821FFFCCh case    2:*/		regs.LR = 0x821FFFD0; return 0x821F4030;
		/* 821FFFCCh case    2:*/		return 0x821FFFD0;
	}
	return 0x821FFFD0;
} // Block from 821FFFC4h-821FFFD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821FFFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821FFFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821FFFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821FFFD0);
		  /* 821FFFD0h */ case    0:  		/* stw R3, <#[R26]> */
		/* 821FFFD0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 821FFFD0h case    0:*/		return 0x821FFFD4;
		  /* 821FFFD4h */ case    1:  		/* li R11, 1 */
		/* 821FFFD4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821FFFD4h case    1:*/		return 0x821FFFD8;
		  /* 821FFFD8h */ case    2:  		/* addi R29, R29, -1 */
		/* 821FFFD8h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821FFFD8h case    2:*/		return 0x821FFFDC;
		  /* 821FFFDCh */ case    3:  		/* lwz R10, <#[R26 + 4]> */
		/* 821FFFDCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 821FFFDCh case    3:*/		return 0x821FFFE0;
		  /* 821FFFE0h */ case    4:  		/* rlwimi R10, R11, 0, 16, 14 */
		/* 821FFFE0h case    4:*/		cpu::op::rlwimi<0,0,16,14>(regs,&regs.R10,regs.R11);
		/* 821FFFE0h case    4:*/		return 0x821FFFE4;
		  /* 821FFFE4h */ case    5:  		/* stw R10, <#[R26 + 4]> */
		/* 821FFFE4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 821FFFE4h case    5:*/		return 0x821FFFE8;
		  /* 821FFFE8h */ case    6:  		/* b -260 */
		/* 821FFFE8h case    6:*/		return 0x821FFEE4;
		/* 821FFFE8h case    6:*/		return 0x821FFFEC;
		  /* 821FFFECh */ case    7:  		/* cmplwi CR6, R29, 3 */
		/* 821FFFECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 821FFFECh case    7:*/		return 0x821FFFF0;
		  /* 821FFFF0h */ case    8:  		/* bc 4, CR6_EQ, 17980 */
		/* 821FFFF0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8220462C;  }
		/* 821FFFF0h case    8:*/		return 0x821FFFF4;
		  /* 821FFFF4h */ case    9:  		/* lwz R30, <#[R1 + 3500]> */
		/* 821FFFF4h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 821FFFF4h case    9:*/		return 0x821FFFF8;
		  /* 821FFFF8h */ case   10:  		/* li R5, 6 */
		/* 821FFFF8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821FFFF8h case   10:*/		return 0x821FFFFC;
		  /* 821FFFFCh */ case   11:  		/* addi R3, R1, 976 */
		/* 821FFFFCh case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3D0);
		/* 821FFFFCh case   11:*/		return 0x82200000;
		  /* 82200000h */ case   12:  		/* mr R4, R30 */
		/* 82200000h case   12:*/		regs.R4 = regs.R30;
		/* 82200000h case   12:*/		return 0x82200004;
		  /* 82200004h */ case   13:  		/* bl -40180 */
		/* 82200004h case   13:*/		regs.LR = 0x82200008; return 0x821F6310;
		/* 82200004h case   13:*/		return 0x82200008;
		  /* 82200008h */ case   14:  		/* mr R4, R30 */
		/* 82200008h case   14:*/		regs.R4 = regs.R30;
		/* 82200008h case   14:*/		return 0x8220000C;
		  /* 8220000Ch */ case   15:  		/* li R5, 3 */
		/* 8220000Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8220000Ch case   15:*/		return 0x82200010;
		  /* 82200010h */ case   16:  		/* addi R3, R1, 1504 */
		/* 82200010h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5E0);
		/* 82200010h case   16:*/		return 0x82200014;
		  /* 82200014h */ case   17:  		/* bl -40196 */
		/* 82200014h case   17:*/		regs.LR = 0x82200018; return 0x821F6310;
		/* 82200014h case   17:*/		return 0x82200018;
		  /* 82200018h */ case   18:  		/* li R6, 210 */
		/* 82200018h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0xD2);
		/* 82200018h case   18:*/		return 0x8220001C;
		  /* 8220001Ch */ case   19:  		/* li R5, 3 */
		/* 8220001Ch case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8220001Ch case   19:*/		return 0x82200020;
		  /* 82200020h */ case   20:  		/* addi R4, R1, 1504 */
		/* 82200020h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5E0);
		/* 82200020h case   20:*/		return 0x82200024;
		  /* 82200024h */ case   21:  		/* mr R3, R31 */
		/* 82200024h case   21:*/		regs.R3 = regs.R31;
		/* 82200024h case   21:*/		return 0x82200028;
		  /* 82200028h */ case   22:  		/* bl -55520 */
		/* 82200028h case   22:*/		regs.LR = 0x8220002C; return 0x821F2748;
		/* 82200028h case   22:*/		return 0x8220002C;
		  /* 8220002Ch */ case   23:  		/* mr R29, R3 */
		/* 8220002Ch case   23:*/		regs.R29 = regs.R3;
		/* 8220002Ch case   23:*/		return 0x82200030;
		  /* 82200030h */ case   24:  		/* li R6, 201 */
		/* 82200030h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0xC9);
		/* 82200030h case   24:*/		return 0x82200034;
		  /* 82200034h */ case   25:  		/* li R5, 3 */
		/* 82200034h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82200034h case   25:*/		return 0x82200038;
		  /* 82200038h */ case   26:  		/* addi R4, R1, 976 */
		/* 82200038h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x3D0);
		/* 82200038h case   26:*/		return 0x8220003C;
		  /* 8220003Ch */ case   27:  		/* mr R3, R31 */
		/* 8220003Ch case   27:*/		regs.R3 = regs.R31;
		/* 8220003Ch case   27:*/		return 0x82200040;
		  /* 82200040h */ case   28:  		/* bl -55544 */
		/* 82200040h case   28:*/		regs.LR = 0x82200044; return 0x821F2748;
		/* 82200040h case   28:*/		return 0x82200044;
		  /* 82200044h */ case   29:  		/* mr R4, R3 */
		/* 82200044h case   29:*/		regs.R4 = regs.R3;
		/* 82200044h case   29:*/		return 0x82200048;
		  /* 82200048h */ case   30:  		/* mr R3, R31 */
		/* 82200048h case   30:*/		regs.R3 = regs.R31;
		/* 82200048h case   30:*/		return 0x8220004C;
		  /* 8220004Ch */ case   31:  		/* mr R5, R29 */
		/* 8220004Ch case   31:*/		regs.R5 = regs.R29;
		/* 8220004Ch case   31:*/		return 0x82200050;
		  /* 82200050h */ case   32:  		/* bl -73240 */
		/* 82200050h case   32:*/		regs.LR = 0x82200054; return 0x821EE238;
		/* 82200050h case   32:*/		return 0x82200054;
		  /* 82200054h */ case   33:  		/* mr R29, R3 */
		/* 82200054h case   33:*/		regs.R29 = regs.R3;
		/* 82200054h case   33:*/		return 0x82200058;
		  /* 82200058h */ case   34:  		/* li R6, 201 */
		/* 82200058h case   34:*/		cpu::op::li<0>(regs,&regs.R6,0xC9);
		/* 82200058h case   34:*/		return 0x8220005C;
		  /* 8220005Ch */ case   35:  		/* li R5, 3 */
		/* 8220005Ch case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8220005Ch case   35:*/		return 0x82200060;
		  /* 82200060h */ case   36:  		/* addi R4, R1, 1504 */
		/* 82200060h case   36:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5E0);
		/* 82200060h case   36:*/		return 0x82200064;
		  /* 82200064h */ case   37:  		/* mr R3, R31 */
		/* 82200064h case   37:*/		regs.R3 = regs.R31;
		/* 82200064h case   37:*/		return 0x82200068;
		  /* 82200068h */ case   38:  		/* bl -55584 */
		/* 82200068h case   38:*/		regs.LR = 0x8220006C; return 0x821F2748;
		/* 82200068h case   38:*/		return 0x8220006C;
		  /* 8220006Ch */ case   39:  		/* mr R28, R3 */
		/* 8220006Ch case   39:*/		regs.R28 = regs.R3;
		/* 8220006Ch case   39:*/		return 0x82200070;
		  /* 82200070h */ case   40:  		/* li R6, 210 */
		/* 82200070h case   40:*/		cpu::op::li<0>(regs,&regs.R6,0xD2);
		/* 82200070h case   40:*/		return 0x82200074;
		  /* 82200074h */ case   41:  		/* li R5, 3 */
		/* 82200074h case   41:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82200074h case   41:*/		return 0x82200078;
		  /* 82200078h */ case   42:  		/* addi R4, R1, 976 */
		/* 82200078h case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x3D0);
		/* 82200078h case   42:*/		return 0x8220007C;
		  /* 8220007Ch */ case   43:  		/* mr R3, R31 */
		/* 8220007Ch case   43:*/		regs.R3 = regs.R31;
		/* 8220007Ch case   43:*/		return 0x82200080;
		  /* 82200080h */ case   44:  		/* bl -55608 */
		/* 82200080h case   44:*/		regs.LR = 0x82200084; return 0x821F2748;
		/* 82200080h case   44:*/		return 0x82200084;
		  /* 82200084h */ case   45:  		/* mr R4, R3 */
		/* 82200084h case   45:*/		regs.R4 = regs.R3;
		/* 82200084h case   45:*/		return 0x82200088;
		  /* 82200088h */ case   46:  		/* mr R3, R31 */
		/* 82200088h case   46:*/		regs.R3 = regs.R31;
		/* 82200088h case   46:*/		return 0x8220008C;
		  /* 8220008Ch */ case   47:  		/* mr R5, R28 */
		/* 8220008Ch case   47:*/		regs.R5 = regs.R28;
		/* 8220008Ch case   47:*/		return 0x82200090;
		  /* 82200090h */ case   48:  		/* bl -73304 */
		/* 82200090h case   48:*/		regs.LR = 0x82200094; return 0x821EE238;
		/* 82200090h case   48:*/		return 0x82200094;
		  /* 82200094h */ case   49:  		/* mr R11, R3 */
		/* 82200094h case   49:*/		regs.R11 = regs.R3;
		/* 82200094h case   49:*/		return 0x82200098;
		  /* 82200098h */ case   50:  		/* li R7, 228 */
		/* 82200098h case   50:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82200098h case   50:*/		return 0x8220009C;
		  /* 8220009Ch */ case   51:  		/* li R6, 4 */
		/* 8220009Ch case   51:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8220009Ch case   51:*/		return 0x822000A0;
		  /* 822000A0h */ case   52:  		/* mr R3, R31 */
		/* 822000A0h case   52:*/		regs.R3 = regs.R31;
		/* 822000A0h case   52:*/		return 0x822000A4;
		  /* 822000A4h */ case   53:  		/* mr R4, R11 */
		/* 822000A4h case   53:*/		regs.R4 = regs.R11;
		/* 822000A4h case   53:*/		return 0x822000A8;
		  /* 822000A8h */ case   54:  		/* lwz R10, <#[R11 + 8]> */
		/* 822000A8h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822000A8h case   54:*/		return 0x822000AC;
		  /* 822000ACh */ case   55:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 822000ACh case   55:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 822000ACh case   55:*/		return 0x822000B0;
		  /* 822000B0h */ case   56:  		/* bl 139664 */
		/* 822000B0h case   56:*/		regs.LR = 0x822000B4; return 0x82222240;
		/* 822000B0h case   56:*/		return 0x822000B4;
		  /* 822000B4h */ case   57:  		/* mr R5, R3 */
		/* 822000B4h case   57:*/		regs.R5 = regs.R3;
		/* 822000B4h case   57:*/		return 0x822000B8;
		  /* 822000B8h */ case   58:  		/* mr R4, R29 */
		/* 822000B8h case   58:*/		regs.R4 = regs.R29;
		/* 822000B8h case   58:*/		return 0x822000BC;
		  /* 822000BCh */ case   59:  		/* mr R3, R31 */
		/* 822000BCh case   59:*/		regs.R3 = regs.R31;
		/* 822000BCh case   59:*/		return 0x822000C0;
		  /* 822000C0h */ case   60:  		/* bl -67776 */
		/* 822000C0h case   60:*/		regs.LR = 0x822000C4; return 0x821EF800;
		/* 822000C0h case   60:*/		return 0x822000C4;
		  /* 822000C4h */ case   61:  		/* mr R5, R3 */
		/* 822000C4h case   61:*/		regs.R5 = regs.R3;
		/* 822000C4h case   61:*/		return 0x822000C8;
		  /* 822000C8h */ case   62:  		/* li R4, 3 */
		/* 822000C8h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 822000C8h case   62:*/		return 0x822000CC;
		  /* 822000CCh */ case   63:  		/* addi R3, R1, 976 */
		/* 822000CCh case   63:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x3D0);
		/* 822000CCh case   63:*/		return 0x822000D0;
		  /* 822000D0h */ case   64:  		/* bl -57784 */
		/* 822000D0h case   64:*/		regs.LR = 0x822000D4; return 0x821F1F18;
		/* 822000D0h case   64:*/		return 0x822000D4;
		  /* 822000D4h */ case   65:  		/* li R5, 3 */
		/* 822000D4h case   65:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 822000D4h case   65:*/		return 0x822000D8;
		  /* 822000D8h */ case   66:  		/* mr R4, R30 */
		/* 822000D8h case   66:*/		regs.R4 = regs.R30;
		/* 822000D8h case   66:*/		return 0x822000DC;
		  /* 822000DCh */ case   67:  		/* addi R3, R1, 3000 */
		/* 822000DCh case   67:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xBB8);
		/* 822000DCh case   67:*/		return 0x822000E0;
		  /* 822000E0h */ case   68:  		/* b -10068 */
		/* 822000E0h case   68:*/		return 0x821FD98C;
		/* 822000E0h case   68:*/		return 0x822000E4;
		  /* 822000E4h */ case   69:  		/* li R6, 0 */
		/* 822000E4h case   69:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822000E4h case   69:*/		return 0x822000E8;
		  /* 822000E8h */ case   70:  		/* lwz R4, <#[R1 + 3500]> */
		/* 822000E8h case   70:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822000E8h case   70:*/		return 0x822000EC;
		  /* 822000ECh */ case   71:  		/* mr R5, R14 */
		/* 822000ECh case   71:*/		regs.R5 = regs.R14;
		/* 822000ECh case   71:*/		return 0x822000F0;
		  /* 822000F0h */ case   72:  		/* mr R3, R31 */
		/* 822000F0h case   72:*/		regs.R3 = regs.R31;
		/* 822000F0h case   72:*/		return 0x822000F4;
		  /* 822000F4h */ case   73:  		/* bl -34876 */
		/* 822000F4h case   73:*/		regs.LR = 0x822000F8; return 0x821F78B8;
		/* 822000F4h case   73:*/		return 0x822000F8;
		  /* 822000F8h */ case   74:  		/* b -15832 */
		/* 822000F8h case   74:*/		return 0x821FC320;
		/* 822000F8h case   74:*/		return 0x822000FC;
		  /* 822000FCh */ case   75:  		/* li R5, 4 */
		/* 822000FCh case   75:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822000FCh case   75:*/		return 0x82200100;
		  /* 82200100h */ case   76:  		/* fmr FR4, FR14 */
		/* 82200100h case   76:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR14);
		/* 82200100h case   76:*/		return 0x82200104;
		  /* 82200104h */ case   77:  		/* mr R4, R31 */
		/* 82200104h case   77:*/		regs.R4 = regs.R31;
		/* 82200104h case   77:*/		return 0x82200108;
		  /* 82200108h */ case   78:  		/* fmr FR3, FR14 */
		/* 82200108h case   78:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR14);
		/* 82200108h case   78:*/		return 0x8220010C;
		  /* 8220010Ch */ case   79:  		/* addi R3, R1, 504 */
		/* 8220010Ch case   79:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1F8);
		/* 8220010Ch case   79:*/		return 0x82200110;
		  /* 82200110h */ case   80:  		/* fmr FR2, FR14 */
		/* 82200110h case   80:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR14);
		/* 82200110h case   80:*/		return 0x82200114;
		  /* 82200114h */ case   81:  		/* fmr FR1, FR14 */
		/* 82200114h case   81:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR14);
		/* 82200114h case   81:*/		return 0x82200118;
		  /* 82200118h */ case   82:  		/* bl 159032 */
		/* 82200118h case   82:*/		regs.LR = 0x8220011C; return 0x82226E50;
		/* 82200118h case   82:*/		return 0x8220011C;
		  /* 8220011Ch */ case   83:  		/* lwz R11, <#[R1 + 508]> */
		/* 8220011Ch case   83:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001FC) );
		/* 8220011Ch case   83:*/		return 0x82200120;
		  /* 82200120h */ case   84:  		/* mr R5, R29 */
		/* 82200120h case   84:*/		regs.R5 = regs.R29;
		/* 82200120h case   84:*/		return 0x82200124;
		  /* 82200124h */ case   85:  		/* lwz R4, <#[R1 + 3500]> */
		/* 82200124h case   85:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82200124h case   85:*/		return 0x82200128;
		  /* 82200128h */ case   86:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 82200128h case   86:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 82200128h case   86:*/		return 0x8220012C;
		  /* 8220012Ch */ case   87:  		/* addi R3, R1, 816 */
		/* 8220012Ch case   87:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x330);
		/* 8220012Ch case   87:*/		return 0x82200130;
		  /* 82200130h */ case   88:  		/* oris R11, R11, 2 */
		/* 82200130h case   88:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82200130h case   88:*/		return 0x82200134;
		  /* 82200134h */ case   89:  		/* stw R11, <#[R1 + 508]> */
		/* 82200134h case   89:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001FC) );
		/* 82200134h case   89:*/		return 0x82200138;
		  /* 82200138h */ case   90:  		/* bl -40488 */
		/* 82200138h case   90:*/		regs.LR = 0x8220013C; return 0x821F6310;
		/* 82200138h case   90:*/		return 0x8220013C;
		  /* 8220013Ch */ case   91:  		/* cmplwi CR6, R29, 0 */
		/* 8220013Ch case   91:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8220013Ch case   91:*/		return 0x82200140;
		  /* 82200140h */ case   92:  		/* bc 12, CR6_EQ, -15904 */
		/* 82200140h case   92:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82200140h case   92:*/		return 0x82200144;
		  /* 82200144h */ case   93:  		/* cmplwi CR6, R29, 4 */
		/* 82200144h case   93:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82200144h case   93:*/		return 0x82200148;
		  /* 82200148h */ case   94:  		/* mr R30, R29 */
		/* 82200148h case   94:*/		regs.R30 = regs.R29;
		/* 82200148h case   94:*/		return 0x8220014C;
		  /* 8220014Ch */ case   95:  		/* bc 12, CR6_LT, 8 */
		/* 8220014Ch case   95:*/		if ( regs.CR[6].lt ) { return 0x82200154;  }
		/* 8220014Ch case   95:*/		return 0x82200150;
		  /* 82200150h */ case   96:  		/* li R30, 4 */
		/* 82200150h case   96:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82200150h case   96:*/		return 0x82200154;
	}
	return 0x82200154;
} // Block from 821FFFD0h-82200154h (97 instructions)

//////////////////////////////////////////////////////
// Block at 82200154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200154);
		  /* 82200154h */ case    0:  		/* li R6, 228 */
		/* 82200154h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82200154h case    0:*/		return 0x82200158;
		  /* 82200158h */ case    1:  		/* mr R5, R30 */
		/* 82200158h case    1:*/		regs.R5 = regs.R30;
		/* 82200158h case    1:*/		return 0x8220015C;
		  /* 8220015Ch */ case    2:  		/* addi R4, R1, 816 */
		/* 8220015Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x330);
		/* 8220015Ch case    2:*/		return 0x82200160;
		  /* 82200160h */ case    3:  		/* mr R3, R31 */
		/* 82200160h case    3:*/		regs.R3 = regs.R31;
		/* 82200160h case    3:*/		return 0x82200164;
		  /* 82200164h */ case    4:  		/* bl -55836 */
		/* 82200164h case    4:*/		regs.LR = 0x82200168; return 0x821F2748;
		/* 82200164h case    4:*/		return 0x82200168;
		  /* 82200168h */ case    5:  		/* mr R28, R3 */
		/* 82200168h case    5:*/		regs.R28 = regs.R3;
		/* 82200168h case    5:*/		return 0x8220016C;
		  /* 8220016Ch */ case    6:  		/* addi R4, R1, 504 */
		/* 8220016Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x1F8);
		/* 8220016Ch case    6:*/		return 0x82200170;
		  /* 82200170h */ case    7:  		/* mr R3, R31 */
		/* 82200170h case    7:*/		regs.R3 = regs.R31;
		/* 82200170h case    7:*/		return 0x82200174;
		  /* 82200174h */ case    8:  		/* bl -56820 */
		/* 82200174h case    8:*/		regs.LR = 0x82200178; return 0x821F2380;
		/* 82200174h case    8:*/		return 0x82200178;
		  /* 82200178h */ case    9:  		/* mr R11, R3 */
		/* 82200178h case    9:*/		regs.R11 = regs.R3;
		/* 82200178h case    9:*/		return 0x8220017C;
		  /* 8220017Ch */ case   10:  		/* mr R4, R28 */
		/* 8220017Ch case   10:*/		regs.R4 = regs.R28;
		/* 8220017Ch case   10:*/		return 0x82200180;
		  /* 82200180h */ case   11:  		/* mr R3, R31 */
		/* 82200180h case   11:*/		regs.R3 = regs.R31;
		/* 82200180h case   11:*/		return 0x82200184;
		  /* 82200184h */ case   12:  		/* mr R5, R11 */
		/* 82200184h case   12:*/		regs.R5 = regs.R11;
		/* 82200184h case   12:*/		return 0x82200188;
		  /* 82200188h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82200188h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82200188h case   13:*/		return 0x8220018C;
		  /* 8220018Ch */ case   14:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 8220018Ch case   14:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 8220018Ch case   14:*/		return 0x82200190;
		  /* 82200190h */ case   15:  		/* stw R10, <#[R11]> */
		/* 82200190h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82200190h case   15:*/		return 0x82200194;
		  /* 82200194h */ case   16:  		/* bl -73564 */
		/* 82200194h case   16:*/		regs.LR = 0x82200198; return 0x821EE238;
		/* 82200194h case   16:*/		return 0x82200198;
		  /* 82200198h */ case   17:  		/* mr R5, R3 */
		/* 82200198h case   17:*/		regs.R5 = regs.R3;
		/* 82200198h case   17:*/		return 0x8220019C;
		  /* 8220019Ch */ case   18:  		/* mr R4, R30 */
		/* 8220019Ch case   18:*/		regs.R4 = regs.R30;
		/* 8220019Ch case   18:*/		return 0x822001A0;
		  /* 822001A0h */ case   19:  		/* addi R3, R1, 816 */
		/* 822001A0h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x330);
		/* 822001A0h case   19:*/		return 0x822001A4;
		  /* 822001A4h */ case   20:  		/* bl -57996 */
		/* 822001A4h case   20:*/		regs.LR = 0x822001A8; return 0x821F1F18;
		/* 822001A4h case   20:*/		return 0x822001A8;
		  /* 822001A8h */ case   21:  		/* li R4, 0 */
		/* 822001A8h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 822001A8h case   21:*/		return 0x822001AC;
		  /* 822001ACh */ case   22:  		/* addi R3, R1, 816 */
		/* 822001ACh case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x330);
		/* 822001ACh case   22:*/		return 0x822001B0;
		  /* 822001B0h */ case   23:  		/* subf R29, R30, R29 */
		/* 822001B0h case   23:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 822001B0h case   23:*/		return 0x822001B4;
		  /* 822001B4h */ case   24:  		/* bl -74684 */
		/* 822001B4h case   24:*/		regs.LR = 0x822001B8; return 0x821EDDF8;
		/* 822001B4h case   24:*/		return 0x822001B8;
		  /* 822001B8h */ case   25:  		/* b -124 */
		/* 822001B8h case   25:*/		return 0x8220013C;
		/* 822001B8h case   25:*/		return 0x822001BC;
		  /* 822001BCh */ case   26:  		/* lfs FR4, <#[R1 + 600]> */
		/* 822001BCh case   26:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000258) );
		/* 822001BCh case   26:*/		return 0x822001C0;
		  /* 822001C0h */ case   27:  		/* li R5, 4 */
		/* 822001C0h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822001C0h case   27:*/		return 0x822001C4;
		  /* 822001C4h */ case   28:  		/* mr R4, R31 */
		/* 822001C4h case   28:*/		regs.R4 = regs.R31;
		/* 822001C4h case   28:*/		return 0x822001C8;
		  /* 822001C8h */ case   29:  		/* fmr FR3, FR4 */
		/* 822001C8h case   29:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 822001C8h case   29:*/		return 0x822001CC;
		  /* 822001CCh */ case   30:  		/* addi R3, R1, 616 */
		/* 822001CCh case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x268);
		/* 822001CCh case   30:*/		return 0x822001D0;
		  /* 822001D0h */ case   31:  		/* fmr FR2, FR4 */
		/* 822001D0h case   31:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 822001D0h case   31:*/		return 0x822001D4;
		  /* 822001D4h */ case   32:  		/* fmr FR1, FR4 */
		/* 822001D4h case   32:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 822001D4h case   32:*/		return 0x822001D8;
		  /* 822001D8h */ case   33:  		/* bl 158840 */
		/* 822001D8h case   33:*/		regs.LR = 0x822001DC; return 0x82226E50;
		/* 822001D8h case   33:*/		return 0x822001DC;
		  /* 822001DCh */ case   34:  		/* lwz R11, <#[R1 + 620]> */
		/* 822001DCh case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000026C) );
		/* 822001DCh case   34:*/		return 0x822001E0;
		  /* 822001E0h */ case   35:  		/* mr R5, R29 */
		/* 822001E0h case   35:*/		regs.R5 = regs.R29;
		/* 822001E0h case   35:*/		return 0x822001E4;
		  /* 822001E4h */ case   36:  		/* lwz R4, <#[R1 + 3500]> */
		/* 822001E4h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822001E4h case   36:*/		return 0x822001E8;
		  /* 822001E8h */ case   37:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 822001E8h case   37:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 822001E8h case   37:*/		return 0x822001EC;
		  /* 822001ECh */ case   38:  		/* addi R3, R1, 1072 */
		/* 822001ECh case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x430);
		/* 822001ECh case   38:*/		return 0x822001F0;
		  /* 822001F0h */ case   39:  		/* oris R11, R11, 2 */
		/* 822001F0h case   39:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 822001F0h case   39:*/		return 0x822001F4;
		  /* 822001F4h */ case   40:  		/* stw R11, <#[R1 + 620]> */
		/* 822001F4h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000026C) );
		/* 822001F4h case   40:*/		return 0x822001F8;
		  /* 822001F8h */ case   41:  		/* bl -40680 */
		/* 822001F8h case   41:*/		regs.LR = 0x822001FC; return 0x821F6310;
		/* 822001F8h case   41:*/		return 0x822001FC;
		  /* 822001FCh */ case   42:  		/* cmplwi CR6, R29, 0 */
		/* 822001FCh case   42:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822001FCh case   42:*/		return 0x82200200;
		  /* 82200200h */ case   43:  		/* bc 12, CR6_EQ, -16096 */
		/* 82200200h case   43:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 82200200h case   43:*/		return 0x82200204;
		  /* 82200204h */ case   44:  		/* cmplwi CR6, R29, 4 */
		/* 82200204h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82200204h case   44:*/		return 0x82200208;
		  /* 82200208h */ case   45:  		/* mr R30, R29 */
		/* 82200208h case   45:*/		regs.R30 = regs.R29;
		/* 82200208h case   45:*/		return 0x8220020C;
		  /* 8220020Ch */ case   46:  		/* bc 12, CR6_LT, 8 */
		/* 8220020Ch case   46:*/		if ( regs.CR[6].lt ) { return 0x82200214;  }
		/* 8220020Ch case   46:*/		return 0x82200210;
		  /* 82200210h */ case   47:  		/* li R30, 4 */
		/* 82200210h case   47:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82200210h case   47:*/		return 0x82200214;
	}
	return 0x82200214;
} // Block from 82200154h-82200214h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82200214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200214);
		  /* 82200214h */ case    0:  		/* li R6, 228 */
		/* 82200214h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 82200214h case    0:*/		return 0x82200218;
		  /* 82200218h */ case    1:  		/* mr R5, R30 */
		/* 82200218h case    1:*/		regs.R5 = regs.R30;
		/* 82200218h case    1:*/		return 0x8220021C;
		  /* 8220021Ch */ case    2:  		/* addi R4, R1, 1072 */
		/* 8220021Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x430);
		/* 8220021Ch case    2:*/		return 0x82200220;
		  /* 82200220h */ case    3:  		/* mr R3, R31 */
		/* 82200220h case    3:*/		regs.R3 = regs.R31;
		/* 82200220h case    3:*/		return 0x82200224;
		  /* 82200224h */ case    4:  		/* bl -56028 */
		/* 82200224h case    4:*/		regs.LR = 0x82200228; return 0x821F2748;
		/* 82200224h case    4:*/		return 0x82200228;
		  /* 82200228h */ case    5:  		/* mr R28, R3 */
		/* 82200228h case    5:*/		regs.R28 = regs.R3;
		/* 82200228h case    5:*/		return 0x8220022C;
		  /* 8220022Ch */ case    6:  		/* addi R4, R1, 616 */
		/* 8220022Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x268);
		/* 8220022Ch case    6:*/		return 0x82200230;
		  /* 82200230h */ case    7:  		/* mr R3, R31 */
		/* 82200230h case    7:*/		regs.R3 = regs.R31;
		/* 82200230h case    7:*/		return 0x82200234;
		  /* 82200234h */ case    8:  		/* bl -57012 */
		/* 82200234h case    8:*/		regs.LR = 0x82200238; return 0x821F2380;
		/* 82200234h case    8:*/		return 0x82200238;
		  /* 82200238h */ case    9:  		/* mr R11, R3 */
		/* 82200238h case    9:*/		regs.R11 = regs.R3;
		/* 82200238h case    9:*/		return 0x8220023C;
		  /* 8220023Ch */ case   10:  		/* mr R4, R28 */
		/* 8220023Ch case   10:*/		regs.R4 = regs.R28;
		/* 8220023Ch case   10:*/		return 0x82200240;
		  /* 82200240h */ case   11:  		/* mr R3, R31 */
		/* 82200240h case   11:*/		regs.R3 = regs.R31;
		/* 82200240h case   11:*/		return 0x82200244;
		  /* 82200244h */ case   12:  		/* mr R5, R11 */
		/* 82200244h case   12:*/		regs.R5 = regs.R11;
		/* 82200244h case   12:*/		return 0x82200248;
		  /* 82200248h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 82200248h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82200248h case   13:*/		return 0x8220024C;
		  /* 8220024Ch */ case   14:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 8220024Ch case   14:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 8220024Ch case   14:*/		return 0x82200250;
		  /* 82200250h */ case   15:  		/* stw R10, <#[R11]> */
		/* 82200250h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82200250h case   15:*/		return 0x82200254;
		  /* 82200254h */ case   16:  		/* bl -73756 */
		/* 82200254h case   16:*/		regs.LR = 0x82200258; return 0x821EE238;
		/* 82200254h case   16:*/		return 0x82200258;
		  /* 82200258h */ case   17:  		/* mr R5, R3 */
		/* 82200258h case   17:*/		regs.R5 = regs.R3;
		/* 82200258h case   17:*/		return 0x8220025C;
		  /* 8220025Ch */ case   18:  		/* mr R4, R30 */
		/* 8220025Ch case   18:*/		regs.R4 = regs.R30;
		/* 8220025Ch case   18:*/		return 0x82200260;
		  /* 82200260h */ case   19:  		/* addi R3, R1, 1072 */
		/* 82200260h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x430);
		/* 82200260h case   19:*/		return 0x82200264;
		  /* 82200264h */ case   20:  		/* bl -58188 */
		/* 82200264h case   20:*/		regs.LR = 0x82200268; return 0x821F1F18;
		/* 82200264h case   20:*/		return 0x82200268;
		  /* 82200268h */ case   21:  		/* li R4, 0 */
		/* 82200268h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82200268h case   21:*/		return 0x8220026C;
		  /* 8220026Ch */ case   22:  		/* addi R3, R1, 1072 */
		/* 8220026Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x430);
		/* 8220026Ch case   22:*/		return 0x82200270;
		  /* 82200270h */ case   23:  		/* subf R29, R30, R29 */
		/* 82200270h case   23:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 82200270h case   23:*/		return 0x82200274;
		  /* 82200274h */ case   24:  		/* bl -74876 */
		/* 82200274h case   24:*/		regs.LR = 0x82200278; return 0x821EDDF8;
		/* 82200274h case   24:*/		return 0x82200278;
		  /* 82200278h */ case   25:  		/* b -124 */
		/* 82200278h case   25:*/		return 0x822001FC;
		/* 82200278h case   25:*/		return 0x8220027C;
		  /* 8220027Ch */ case   26:  		/* lfs FR4, <#[R1 + 608]> */
		/* 8220027Ch case   26:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000260) );
		/* 8220027Ch case   26:*/		return 0x82200280;
		  /* 82200280h */ case   27:  		/* li R5, 4 */
		/* 82200280h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82200280h case   27:*/		return 0x82200284;
		  /* 82200284h */ case   28:  		/* mr R4, R31 */
		/* 82200284h case   28:*/		regs.R4 = regs.R31;
		/* 82200284h case   28:*/		return 0x82200288;
		  /* 82200288h */ case   29:  		/* fmr FR3, FR4 */
		/* 82200288h case   29:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 82200288h case   29:*/		return 0x8220028C;
		  /* 8220028Ch */ case   30:  		/* addi R3, R1, 520 */
		/* 8220028Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x208);
		/* 8220028Ch case   30:*/		return 0x82200290;
		  /* 82200290h */ case   31:  		/* fmr FR2, FR4 */
		/* 82200290h case   31:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82200290h case   31:*/		return 0x82200294;
		  /* 82200294h */ case   32:  		/* fmr FR1, FR4 */
		/* 82200294h case   32:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82200294h case   32:*/		return 0x82200298;
		  /* 82200298h */ case   33:  		/* bl 158648 */
		/* 82200298h case   33:*/		regs.LR = 0x8220029C; return 0x82226E50;
		/* 82200298h case   33:*/		return 0x8220029C;
		  /* 8220029Ch */ case   34:  		/* lwz R11, <#[R1 + 524]> */
		/* 8220029Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000020C) );
		/* 8220029Ch case   34:*/		return 0x822002A0;
		  /* 822002A0h */ case   35:  		/* mr R5, R29 */
		/* 822002A0h case   35:*/		regs.R5 = regs.R29;
		/* 822002A0h case   35:*/		return 0x822002A4;
		  /* 822002A4h */ case   36:  		/* lwz R4, <#[R1 + 3500]> */
		/* 822002A4h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000DAC) );
		/* 822002A4h case   36:*/		return 0x822002A8;
		  /* 822002A8h */ case   37:  		/* rlwinm R11, R11, 0, 15, 31 */
		/* 822002A8h case   37:*/		cpu::op::rlwinm<0,0,15,31>(regs,&regs.R11,regs.R11);
		/* 822002A8h case   37:*/		return 0x822002AC;
		  /* 822002ACh */ case   38:  		/* addi R3, R1, 848 */
		/* 822002ACh case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x350);
		/* 822002ACh case   38:*/		return 0x822002B0;
		  /* 822002B0h */ case   39:  		/* oris R11, R11, 2 */
		/* 822002B0h case   39:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 822002B0h case   39:*/		return 0x822002B4;
		  /* 822002B4h */ case   40:  		/* stw R11, <#[R1 + 524]> */
		/* 822002B4h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000020C) );
		/* 822002B4h case   40:*/		return 0x822002B8;
		  /* 822002B8h */ case   41:  		/* bl -40872 */
		/* 822002B8h case   41:*/		regs.LR = 0x822002BC; return 0x821F6310;
		/* 822002B8h case   41:*/		return 0x822002BC;
		  /* 822002BCh */ case   42:  		/* li R26, 0 */
		/* 822002BCh case   42:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 822002BCh case   42:*/		return 0x822002C0;
		  /* 822002C0h */ case   43:  		/* cmplwi CR6, R29, 0 */
		/* 822002C0h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 822002C0h case   43:*/		return 0x822002C4;
		  /* 822002C4h */ case   44:  		/* bc 12, CR6_EQ, -16292 */
		/* 822002C4h case   44:*/		if ( regs.CR[6].eq ) { return 0x821FC320;  }
		/* 822002C4h case   44:*/		return 0x822002C8;
		  /* 822002C8h */ case   45:  		/* cmplwi CR6, R29, 4 */
		/* 822002C8h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 822002C8h case   45:*/		return 0x822002CC;
		  /* 822002CCh */ case   46:  		/* mr R30, R29 */
		/* 822002CCh case   46:*/		regs.R30 = regs.R29;
		/* 822002CCh case   46:*/		return 0x822002D0;
		  /* 822002D0h */ case   47:  		/* bc 12, CR6_LT, 8 */
		/* 822002D0h case   47:*/		if ( regs.CR[6].lt ) { return 0x822002D8;  }
		/* 822002D0h case   47:*/		return 0x822002D4;
		  /* 822002D4h */ case   48:  		/* li R30, 4 */
		/* 822002D4h case   48:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 822002D4h case   48:*/		return 0x822002D8;
	}
	return 0x822002D8;
} // Block from 82200214h-822002D8h (49 instructions)

//////////////////////////////////////////////////////
// Block at 822002D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822002D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822002D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822002D8);
		  /* 822002D8h */ case    0:  		/* li R6, 228 */
		/* 822002D8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 822002D8h case    0:*/		return 0x822002DC;
		  /* 822002DCh */ case    1:  		/* mr R5, R30 */
		/* 822002DCh case    1:*/		regs.R5 = regs.R30;
		/* 822002DCh case    1:*/		return 0x822002E0;
		  /* 822002E0h */ case    2:  		/* addi R4, R1, 848 */
		/* 822002E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x350);
		/* 822002E0h case    2:*/		return 0x822002E4;
		  /* 822002E4h */ case    3:  		/* mr R3, R31 */
		/* 822002E4h case    3:*/		regs.R3 = regs.R31;
		/* 822002E4h case    3:*/		return 0x822002E8;
		  /* 822002E8h */ case    4:  		/* bl -56224 */
		/* 822002E8h case    4:*/		regs.LR = 0x822002EC; return 0x821F2748;
		/* 822002E8h case    4:*/		return 0x822002EC;
		  /* 822002ECh */ case    5:  		/* li R4, 198 */
		/* 822002ECh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xC6);
		/* 822002ECh case    5:*/		return 0x822002F0;
		  /* 822002F0h */ case    6:  		/* mr R28, R3 */
		/* 822002F0h case    6:*/		regs.R28 = regs.R3;
		/* 822002F0h case    6:*/		return 0x822002F4;
		  /* 822002F4h */ case    7:  		/* bl -434436 */
		/* 822002F4h case    7:*/		regs.LR = 0x822002F8; return 0x821961F0;
		/* 822002F4h case    7:*/		return 0x822002F8;
		  /* 822002F8h */ case    8:  		/* addi R4, R1, 520 */
		/* 822002F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x208);
		/* 822002F8h case    8:*/		return 0x822002FC;
		  /* 822002FCh */ case    9:  		/* mr R3, R31 */
		/* 822002FCh case    9:*/		regs.R3 = regs.R31;
		/* 822002FCh case    9:*/		return 0x82200300;
		  /* 82200300h */ case   10:  		/* bl -57216 */
		/* 82200300h case   10:*/		regs.LR = 0x82200304; return 0x821F2380;
		/* 82200300h case   10:*/		return 0x82200304;
		  /* 82200304h */ case   11:  		/* mr R11, R3 */
		/* 82200304h case   11:*/		regs.R11 = regs.R3;
		/* 82200304h case   11:*/		return 0x82200308;
		  /* 82200308h */ case   12:  		/* mr R4, R28 */
		/* 82200308h case   12:*/		regs.R4 = regs.R28;
		/* 82200308h case   12:*/		return 0x8220030C;
		  /* 8220030Ch */ case   13:  		/* mr R3, R31 */
		/* 8220030Ch case   13:*/		regs.R3 = regs.R31;
		/* 8220030Ch case   13:*/		return 0x82200310;
		  /* 82200310h */ case   14:  		/* mr R5, R11 */
		/* 82200310h case   14:*/		regs.R5 = regs.R11;
		/* 82200310h case   14:*/		return 0x82200314;
		  /* 82200314h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 82200314h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82200314h case   15:*/		return 0x82200318;
		  /* 82200318h */ case   16:  		/* rlwimi R10, R30, 25, 4, 6 */
		/* 82200318h case   16:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R30);
		/* 82200318h case   16:*/		return 0x8220031C;
		  /* 8220031Ch */ case   17:  		/* stw R10, <#[R11]> */
		/* 8220031Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8220031Ch case   17:*/		return 0x82200320;
		  /* 82200320h */ case   18:  		/* bl -73960 */
		/* 82200320h case   18:*/		regs.LR = 0x82200324; return 0x821EE238;
		/* 82200320h case   18:*/		return 0x82200324;
		  /* 82200324h */ case   19:  		/* mr R27, R3 */
		/* 82200324h case   19:*/		regs.R27 = regs.R3;
		/* 82200324h case   19:*/		return 0x82200328;
		  /* 82200328h */ case   20:  		/* li R28, 0 */
		/* 82200328h case   20:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82200328h case   20:*/		return 0x8220032C;
		  /* 8220032Ch */ case   21:  		/* cmplwi CR6, R30, 0 */
		/* 8220032Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8220032Ch case   21:*/		return 0x82200330;
		  /* 82200330h */ case   22:  		/* bc 12, CR6_EQ, 144 */
		/* 82200330h case   22:*/		if ( regs.CR[6].eq ) { return 0x822003C0;  }
		/* 82200330h case   22:*/		return 0x82200334;
		  /* 82200334h */ case   23:  		/* mr R26, R30 */
		/* 82200334h case   23:*/		regs.R26 = regs.R30;
		/* 82200334h case   23:*/		return 0x82200338;
		  /* 82200338h */ case   24:  		/* lwz R4, <#[R31 + 564]> */
		/* 82200338h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000234) );
		/* 82200338h case   24:*/		return 0x8220033C;
		  /* 8220033Ch */ case   25:  		/* li R8, 1 */
		/* 8220033Ch case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8220033Ch case   25:*/		return 0x82200340;
		  /* 82200340h */ case   26:  		/* li R7, 1 */
		/* 82200340h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82200340h case   26:*/		return 0x82200344;
		  /* 82200344h */ case   27:  		/* addi R5, R4, 24 */
		/* 82200344h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 82200344h case   27:*/		return 0x82200348;
		  /* 82200348h */ case   28:  		/* li R6, 103 */
		/* 82200348h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x67);
		/* 82200348h case   28:*/		return 0x8220034C;
		  /* 8220034Ch */ case   29:  		/* mr R3, R31 */
		/* 8220034Ch case   29:*/		regs.R3 = regs.R31;
		/* 8220034Ch case   29:*/		return 0x82200350;
		  /* 82200350h */ case   30:  		/* bl 149064 */
		/* 82200350h case   30:*/		regs.LR = 0x82200354; return 0x82224998;
		/* 82200350h case   30:*/		return 0x82200354;
		  /* 82200354h */ case   31:  		/* mr R4, R31 */
		/* 82200354h case   31:*/		regs.R4 = regs.R31;
		/* 82200354h case   31:*/		return 0x82200358;
		  /* 82200358h */ case   32:  		/* mr R25, R3 */
		/* 82200358h case   32:*/		regs.R25 = regs.R3;
		/* 82200358h case   32:*/		return 0x8220035C;
		  /* 8220035Ch */ case   33:  		/* bl -272708 */
		/* 8220035Ch case   33:*/		regs.LR = 0x82200360; return 0x821BDA18;
		/* 8220035Ch case   33:*/		return 0x82200360;
		  /* 82200360h */ case   34:  		/* mr R11, R3 */
		/* 82200360h case   34:*/		regs.R11 = regs.R3;
		/* 82200360h case   34:*/		return 0x82200364;
		  /* 82200364h */ case   35:  		/* li R10, 4 */
		/* 82200364h case   35:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82200364h case   35:*/		return 0x82200368;
		  /* 82200368h */ case   36:  		/* mr R5, R28 */
		/* 82200368h case   36:*/		regs.R5 = regs.R28;
		/* 82200368h case   36:*/		return 0x8220036C;
		  /* 8220036Ch */ case   37:  		/* mr R4, R27 */
		/* 8220036Ch case   37:*/		regs.R4 = regs.R27;
		/* 8220036Ch case   37:*/		return 0x82200370;
		  /* 82200370h */ case   38:  		/* mr R3, R31 */
		/* 82200370h case   38:*/		regs.R3 = regs.R31;
		/* 82200370h case   38:*/		return 0x82200374;
		  /* 82200374h */ case   39:  		/* stw R10, <#[R11]> */
		/* 82200374h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82200374h case   39:*/		return 0x82200378;
		  /* 82200378h */ case   40:  		/* bl -557672 */
		/* 82200378h case   40:*/		regs.LR = 0x8220037C; return 0x82178110;
		/* 82200378h case   40:*/		return 0x8220037C;
		  /* 8220037Ch */ case   41:  		/* mr R5, R3 */
		/* 8220037Ch case   41:*/		regs.R5 = regs.R3;
		/* 8220037Ch case   41:*/		return 0x82200380;
		  /* 82200380h */ case   42:  		/* mr R3, R25 */
		/* 82200380h case   42:*/		regs.R3 = regs.R25;
		/* 82200380h case   42:*/		return 0x82200384;
		  /* 82200384h */ case   43:  		/* li R4, 0 */
		/* 82200384h case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82200384h case   43:*/		return 0x82200388;
		  /* 82200388h */ case   44:  		/* bl -589016 */
		/* 82200388h case   44:*/		regs.LR = 0x8220038C; return 0x821706B0;
		/* 82200388h case   44:*/		return 0x8220038C;
		  /* 8220038Ch */ case   45:  		/* mr R3, R25 */
		/* 8220038Ch case   45:*/		regs.R3 = regs.R25;
		/* 8220038Ch case   45:*/		return 0x82200390;
		  /* 82200390h */ case   46:  		/* li R4, 4 */
		/* 82200390h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82200390h case   46:*/		return 0x82200394;
		  /* 82200394h */ case   47:  		/* bl -83916 */
		/* 82200394h case   47:*/		regs.LR = 0x82200398; return 0x821EBBC8;
		/* 82200394h case   47:*/		return 0x82200398;
		  /* 82200398h */ case   48:  		/* lwz R11, <#[R31 + 44]> */
		/* 82200398h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82200398h case   48:*/		return 0x8220039C;
		  /* 8220039Ch */ case   49:  		/* li R5, 0 */
		/* 8220039Ch case   49:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220039Ch case   49:*/		return 0x822003A0;
		  /* 822003A0h */ case   50:  		/* ori R11, R11, 1024 */
		/* 822003A0h case   50:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x400);
		/* 822003A0h case   50:*/		return 0x822003A4;
		  /* 822003A4h */ case   51:  		/* mr R4, R25 */
		/* 822003A4h case   51:*/		regs.R4 = regs.R25;
		/* 822003A4h case   51:*/		return 0x822003A8;
		  /* 822003A8h */ case   52:  		/* stw R11, <#[R31 + 44]> */
		/* 822003A8h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 822003A8h case   52:*/		return 0x822003AC;
		  /* 822003ACh */ case   53:  		/* addi R3, R1, 848 */
		/* 822003ACh case   53:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x350);
		/* 822003ACh case   53:*/		return 0x822003B0;
		  /* 822003B0h */ case   54:  		/* bl -58680 */
		/* 822003B0h case   54:*/		regs.LR = 0x822003B4; return 0x821F1E78;
		/* 822003B0h case   54:*/		return 0x822003B4;
		  /* 822003B4h */ case   55:  		/* addi R28, R28, 1 */
		/* 822003B4h case   55:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 822003B4h case   55:*/		return 0x822003B8;
		  /* 822003B8h */ case   56:  		/* cmplw CR6, R28, R30 */
		/* 822003B8h case   56:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R30);
		/* 822003B8h case   56:*/		return 0x822003BC;
		  /* 822003BCh */ case   57:  		/* bc 12, CR6_LT, -132 */
		/* 822003BCh case   57:*/		if ( regs.CR[6].lt ) { return 0x82200338;  }
		/* 822003BCh case   57:*/		return 0x822003C0;
	}
	return 0x822003C0;
} // Block from 822002D8h-822003C0h (58 instructions)

//////////////////////////////////////////////////////
// Block at 822003C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822003C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822003C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822003C0);
		  /* 822003C0h */ case    0:  		/* subf R4, R26, R30 */
		/* 822003C0h case    0:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R26,regs.R30);
		/* 822003C0h case    0:*/		return 0x822003C4;
		  /* 822003C4h */ case    1:  		/* addi R3, R1, 848 */
		/* 822003C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x350);
		/* 822003C4h case    1:*/		return 0x822003C8;
		  /* 822003C8h */ case    2:  		/* subf R29, R30, R29 */
		/* 822003C8h case    2:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 822003C8h case    2:*/		return 0x822003CC;
		  /* 822003CCh */ case    3:  		/* bl -75220 */
		/* 822003CCh case    3:*/		regs.LR = 0x822003D0; return 0x821EDDF8;
		/* 822003CCh case    3:*/		return 0x822003D0;
		  /* 822003D0h */ case    4:  		/* b -276 */
		/* 822003D0h case    4:*/		return 0x822002BC;
		/* 822003D0h case    4:*/		return 0x822003D4;
		  /* 822003D4h */ case    5:  		/* lwz R11, <#[R14 + 36]> */
		/* 822003D4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 822003D4h case    5:*/		return 0x822003D8;
		  /* 822003D8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 822003D8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822003D8h case    6:*/		return 0x822003DC;
		  /* 822003DCh */ case    7:  		/* bc 12, CR6_EQ, 17036 */
		/* 822003DCh case    7:*/		if ( regs.CR[6].eq ) { return 0x82204668;  }
		/* 822003DCh case    7:*/		return 0x822003E0;
		  /* 822003E0h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 822003E0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822003E0h case    8:*/		return 0x822003E4;
		  /* 822003E4h */ case    9:  		/* cmpwi CR6, R10, 1 */
		/* 822003E4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 822003E4h case    9:*/		return 0x822003E8;
		  /* 822003E8h */ case   10:  		/* bc 4, CR6_EQ, 17024 */
		/* 822003E8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82204668;  }
		/* 822003E8h case   10:*/		return 0x822003EC;
		  /* 822003ECh */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 822003ECh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 822003ECh case   11:*/		return 0x822003F0;
		  /* 822003F0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 822003F0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822003F0h case   12:*/		return 0x822003F4;
		  /* 822003F4h */ case   13:  		/* bc 12, CR6_EQ, 17000 */
		/* 822003F4h case   13:*/		if ( regs.CR[6].eq ) { return 0x8220465C;  }
		/* 822003F4h case   13:*/		return 0x822003F8;
		  /* 822003F8h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 822003F8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822003F8h case   14:*/		return 0x822003FC;
		  /* 822003FCh */ case   15:  		/* cmpwi CR6, R10, 1 */
		/* 822003FCh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 822003FCh case   15:*/		return 0x82200400;
		  /* 82200400h */ case   16:  		/* bc 4, CR6_EQ, 16988 */
		/* 82200400h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8220465C;  }
		/* 82200400h case   16:*/		return 0x82200404;
		  /* 82200404h */ case   17:  		/* lwz R4, <#[R11 + 8]> */
		/* 82200404h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 82200404h case   17:*/		return 0x82200408;
		  /* 82200408h */ case   18:  		/* lwz R11, <#[R4 + 4]> */
		/* 82200408h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82200408h case   18:*/		return 0x8220040C;
		  /* 8220040Ch */ case   19:  		/* cmpwi CR6, R11, 1 */
		/* 8220040Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8220040Ch case   19:*/		return 0x82200410;
		  /* 82200410h */ case   20:  		/* bc 4, CR6_EQ, 52 */
		/* 82200410h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82200444;  }
		/* 82200410h case   20:*/		return 0x82200414;
		  /* 82200414h */ case   21:  		/* lwz R11, <#[R4 + 12]> */
		/* 82200414h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82200414h case   21:*/		return 0x82200418;
		  /* 82200418h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 82200418h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82200418h case   22:*/		return 0x8220041C;
		  /* 8220041Ch */ case   23:  		/* bc 12, CR6_EQ, 16 */
		/* 8220041Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x8220042C;  }
		/* 8220041Ch case   23:*/		return 0x82200420;
		  /* 82200420h */ case   24:  		/* li R30, 0 */
		/* 82200420h case   24:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82200420h case   24:*/		return 0x82200424;
		  /* 82200424h */ case   25:  		/* mr R3, R30 */
		/* 82200424h case   25:*/		regs.R3 = regs.R30;
		/* 82200424h case   25:*/		return 0x82200428;
		  /* 82200428h */ case   26:  		/* b 48 */
		/* 82200428h case   26:*/		return 0x82200458;
		/* 82200428h case   26:*/		return 0x8220042C;
	}
	return 0x8220042C;
} // Block from 822003C0h-8220042Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8220042Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8220042C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8220042C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8220042C);
		  /* 8220042Ch */ case    0:  		/* addi R6, R1, 252 */
		/* 8220042Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xFC);
		/* 8220042Ch case    0:*/		return 0x82200430;
		  /* 82200430h */ case    1:  		/* lwz R4, <#[R4 + 8]> */
		/* 82200430h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000008) );
		/* 82200430h case    1:*/		return 0x82200434;
		  /* 82200434h */ case    2:  		/* addi R5, R1, 256 */
		/* 82200434h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 82200434h case    2:*/		return 0x82200438;
		  /* 82200438h */ case    3:  		/* mr R3, R31 */
		/* 82200438h case    3:*/		regs.R3 = regs.R31;
		/* 82200438h case    3:*/		return 0x8220043C;
		  /* 8220043Ch */ case    4:  		/* bl -83172 */
		/* 8220043Ch case    4:*/		regs.LR = 0x82200440; return 0x821EBF58;
		/* 8220043Ch case    4:*/		return 0x82200440;
		  /* 82200440h */ case    5:  		/* b 20 */
		/* 82200440h case    5:*/		return 0x82200454;
		/* 82200440h case    5:*/		return 0x82200444;
	}
	return 0x82200444;
} // Block from 8220042Ch-82200444h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82200444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200444);
		  /* 82200444h */ case    0:  		/* addi R6, R1, 252 */
		/* 82200444h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xFC);
		/* 82200444h case    0:*/		return 0x82200448;
		  /* 82200448h */ case    1:  		/* addi R5, R1, 256 */
		/* 82200448h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 82200448h case    1:*/		return 0x8220044C;
		  /* 8220044Ch */ case    2:  		/* mr R3, R31 */
		/* 8220044Ch case    2:*/		regs.R3 = regs.R31;
		/* 8220044Ch case    2:*/		return 0x82200450;
		  /* 82200450h */ case    3:  		/* bl -83320 */
		/* 82200450h case    3:*/		regs.LR = 0x82200454; return 0x821EBED8;
		/* 82200450h case    3:*/		return 0x82200454;
	}
	return 0x82200454;
} // Block from 82200444h-82200454h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82200454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200454);
		  /* 82200454h */ case    0:  		/* li R30, 0 */
		/* 82200454h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82200454h case    0:*/		return 0x82200458;
	}
	return 0x82200458;
} // Block from 82200454h-82200458h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82200458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200458);
		  /* 82200458h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82200458h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82200458h case    0:*/		return 0x8220045C;
		  /* 8220045Ch */ case    1:  		/* bc 12, CR0_EQ, 16860 */
		/* 8220045Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82204638;  }
		/* 8220045Ch case    1:*/		return 0x82200460;
		  /* 82200460h */ case    2:  		/* lwz R10, <#[R1 + 252]> */
		/* 82200460h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000FC) );
		/* 82200460h case    2:*/		return 0x82200464;
		  /* 82200464h */ case    3:  		/* lwz R11, <#[R1 + 256]> */
		/* 82200464h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 82200464h case    3:*/		return 0x82200468;
		  /* 82200468h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82200468h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82200468h case    4:*/		return 0x8220046C;
		  /* 8220046Ch */ case    5:  		/* bc 4, CR6_EQ, 16856 */
		/* 8220046Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82204644;  }
		/* 8220046Ch case    5:*/		return 0x82200470;
		  /* 82200470h */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 82200470h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82200470h case    6:*/		return 0x82200474;
		  /* 82200474h */ case    7:  		/* bc 12, CR6_EQ, 2292 */
		/* 82200474h case    7:*/		if ( regs.CR[6].eq ) { return 0x82200D68;  }
		/* 82200474h case    7:*/		return 0x82200478;
		  /* 82200478h */ case    8:  		/* cmplwi CR6, R11, 2 */
		/* 82200478h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82200478h case    8:*/		return 0x8220047C;
		  /* 8220047Ch */ case    9:  		/* bc 12, CR6_EQ, 2080 */
		/* 8220047Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82200C9C;  }
		/* 8220047Ch case    9:*/		return 0x82200480;
		  /* 82200480h */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 82200480h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82200480h case   10:*/		return 0x82200484;
		  /* 82200484h */ case   11:  		/* bc 12, CR6_EQ, 1648 */
		/* 82200484h case   11:*/		if ( regs.CR[6].eq ) { return 0x82200AF4;  }
		/* 82200484h case   11:*/		return 0x82200488;
		  /* 82200488h */ case   12:  		/* cmplwi CR6, R11, 4 */
		/* 82200488h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82200488h case   12:*/		return 0x8220048C;
		  /* 8220048Ch */ case   13:  		/* bc 4, CR6_EQ, 16836 */
		/* 8220048Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82204650;  }
		/* 8220048Ch case   13:*/		return 0x82200490;
		  /* 82200490h */ case   14:  		/* lwz R29, <#[R1 + 3500]> */
		/* 82200490h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82200490h case   14:*/		return 0x82200494;
		  /* 82200494h */ case   15:  		/* li R5, 16 */
		/* 82200494h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 82200494h case   15:*/		return 0x82200498;
		  /* 82200498h */ case   16:  		/* addi R3, R1, 208 */
		/* 82200498h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 82200498h case   16:*/		return 0x8220049C;
		  /* 8220049Ch */ case   17:  		/* mr R4, R29 */
		/* 8220049Ch case   17:*/		regs.R4 = regs.R29;
		/* 8220049Ch case   17:*/		return 0x822004A0;
		  /* 822004A0h */ case   18:  		/* bl -41360 */
		/* 822004A0h case   18:*/		regs.LR = 0x822004A4; return 0x821F6310;
		/* 822004A0h case   18:*/		return 0x822004A4;
		  /* 822004A4h */ case   19:  		/* addi R3, R1, 208 */
		/* 822004A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 822004A4h case   19:*/		return 0x822004A8;
		  /* 822004A8h */ case   20:  		/* bl -259656 */
		/* 822004A8h case   20:*/		regs.LR = 0x822004AC; return 0x821C0E60;
		/* 822004A8h case   20:*/		return 0x822004AC;
		  /* 822004ACh */ case   21:  		/* mr R4, R3 */
		/* 822004ACh case   21:*/		regs.R4 = regs.R3;
		/* 822004ACh case   21:*/		return 0x822004B0;
		  /* 822004B0h */ case   22:  		/* mr R3, R31 */
		/* 822004B0h case   22:*/		regs.R3 = regs.R31;
		/* 822004B0h case   22:*/		return 0x822004B4;
		  /* 822004B4h */ case   23:  		/* bl -57652 */
		/* 822004B4h case   23:*/		regs.LR = 0x822004B8; return 0x821F2380;
		/* 822004B4h case   23:*/		return 0x822004B8;
		  /* 822004B8h */ case   24:  		/* mr R28, R3 */
		/* 822004B8h case   24:*/		regs.R28 = regs.R3;
		/* 822004B8h case   24:*/		return 0x822004BC;
		  /* 822004BCh */ case   25:  		/* addi R3, R1, 208 */
		/* 822004BCh case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 822004BCh case   25:*/		return 0x822004C0;
		  /* 822004C0h */ case   26:  		/* bl -259680 */
		/* 822004C0h case   26:*/		regs.LR = 0x822004C4; return 0x821C0E60;
		/* 822004C0h case   26:*/		return 0x822004C4;
		  /* 822004C4h */ case   27:  		/* mr R4, R3 */
		/* 822004C4h case   27:*/		regs.R4 = regs.R3;
		/* 822004C4h case   27:*/		return 0x822004C8;
		  /* 822004C8h */ case   28:  		/* mr R3, R31 */
		/* 822004C8h case   28:*/		regs.R3 = regs.R31;
		/* 822004C8h case   28:*/		return 0x822004CC;
		  /* 822004CCh */ case   29:  		/* bl -57676 */
		/* 822004CCh case   29:*/		regs.LR = 0x822004D0; return 0x821F2380;
		/* 822004CCh case   29:*/		return 0x822004D0;
		  /* 822004D0h */ case   30:  		/* mr R27, R3 */
		/* 822004D0h case   30:*/		regs.R27 = regs.R3;
		/* 822004D0h case   30:*/		return 0x822004D4;
		  /* 822004D4h */ case   31:  		/* addi R3, R1, 208 */
		/* 822004D4h case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 822004D4h case   31:*/		return 0x822004D8;
		  /* 822004D8h */ case   32:  		/* bl -259704 */
		/* 822004D8h case   32:*/		regs.LR = 0x822004DC; return 0x821C0E60;
		/* 822004D8h case   32:*/		return 0x822004DC;
		  /* 822004DCh */ case   33:  		/* mr R4, R3 */
		/* 822004DCh case   33:*/		regs.R4 = regs.R3;
		/* 822004DCh case   33:*/		return 0x822004E0;
		  /* 822004E0h */ case   34:  		/* mr R3, R31 */
		/* 822004E0h case   34:*/		regs.R3 = regs.R31;
		/* 822004E0h case   34:*/		return 0x822004E4;
		  /* 822004E4h */ case   35:  		/* bl -57700 */
		/* 822004E4h case   35:*/		regs.LR = 0x822004E8; return 0x821F2380;
		/* 822004E4h case   35:*/		return 0x822004E8;
		  /* 822004E8h */ case   36:  		/* mr R26, R3 */
		/* 822004E8h case   36:*/		regs.R26 = regs.R3;
		/* 822004E8h case   36:*/		return 0x822004EC;
		  /* 822004ECh */ case   37:  		/* addi R3, R1, 208 */
		/* 822004ECh case   37:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 822004ECh case   37:*/		return 0x822004F0;
		  /* 822004F0h */ case   38:  		/* bl -259728 */
		/* 822004F0h case   38:*/		regs.LR = 0x822004F4; return 0x821C0E60;
		/* 822004F0h case   38:*/		return 0x822004F4;
		  /* 822004F4h */ case   39:  		/* mr R4, R3 */
		/* 822004F4h case   39:*/		regs.R4 = regs.R3;
		/* 822004F4h case   39:*/		return 0x822004F8;
		  /* 822004F8h */ case   40:  		/* mr R3, R31 */
		/* 822004F8h case   40:*/		regs.R3 = regs.R31;
		/* 822004F8h case   40:*/		return 0x822004FC;
		  /* 822004FCh */ case   41:  		/* bl -57724 */
		/* 822004FCh case   41:*/		regs.LR = 0x82200500; return 0x821F2380;
		/* 822004FCh case   41:*/		return 0x82200500;
		  /* 82200500h */ case   42:  		/* mr R25, R3 */
		/* 82200500h case   42:*/		regs.R25 = regs.R3;
		/* 82200500h case   42:*/		return 0x82200504;
		  /* 82200504h */ case   43:  		/* mr R4, R27 */
		/* 82200504h case   43:*/		regs.R4 = regs.R27;
		/* 82200504h case   43:*/		return 0x82200508;
		  /* 82200508h */ case   44:  		/* lwz R5, <#[R27 + 12]> */
		/* 82200508h case   44:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 82200508h case   44:*/		return 0x8220050C;
		  /* 8220050Ch */ case   45:  		/* mr R3, R31 */
		/* 8220050Ch case   45:*/		regs.R3 = regs.R31;
		/* 8220050Ch case   45:*/		return 0x82200510;
		  /* 82200510h */ case   46:  		/* bl -586784 */
		/* 82200510h case   46:*/		regs.LR = 0x82200514; return 0x821710F0;
		/* 82200510h case   46:*/		return 0x82200514;
		  /* 82200514h */ case   47:  		/* li R4, 4 */
		/* 82200514h case   47:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82200514h case   47:*/		return 0x82200518;
		  /* 82200518h */ case   48:  		/* mr R27, R3 */
		/* 82200518h case   48:*/		regs.R27 = regs.R3;
		/* 82200518h case   48:*/		return 0x8220051C;
		  /* 8220051Ch */ case   49:  		/* bl -559708 */
		/* 8220051Ch case   49:*/		regs.LR = 0x82200520; return 0x82177AC0;
		/* 8220051Ch case   49:*/		return 0x82200520;
		  /* 82200520h */ case   50:  		/* mr R3, R31 */
		/* 82200520h case   50:*/		regs.R3 = regs.R31;
		/* 82200520h case   50:*/		return 0x82200524;
		  /* 82200524h */ case   51:  		/* mr R4, R25 */
		/* 82200524h case   51:*/		regs.R4 = regs.R25;
		/* 82200524h case   51:*/		return 0x82200528;
		  /* 82200528h */ case   52:  		/* lwz R5, <#[R25 + 12]> */
		/* 82200528h case   52:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 82200528h case   52:*/		return 0x8220052C;
		  /* 8220052Ch */ case   53:  		/* bl -586812 */
		/* 8220052Ch case   53:*/		regs.LR = 0x82200530; return 0x821710F0;
		/* 8220052Ch case   53:*/		return 0x82200530;
		  /* 82200530h */ case   54:  		/* li R4, 4 */
		/* 82200530h case   54:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82200530h case   54:*/		return 0x82200534;
		  /* 82200534h */ case   55:  		/* mr R25, R3 */
		/* 82200534h case   55:*/		regs.R25 = regs.R3;
		/* 82200534h case   55:*/		return 0x82200538;
		  /* 82200538h */ case   56:  		/* bl -559736 */
		/* 82200538h case   56:*/		regs.LR = 0x8220053C; return 0x82177AC0;
		/* 82200538h case   56:*/		return 0x8220053C;
		  /* 8220053Ch */ case   57:  		/* mr R10, R25 */
		/* 8220053Ch case   57:*/		regs.R10 = regs.R25;
		/* 8220053Ch case   57:*/		return 0x82200540;
		  /* 82200540h */ case   58:  		/* li R9, 0 */
		/* 82200540h case   58:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82200540h case   58:*/		return 0x82200544;
		  /* 82200544h */ case   59:  		/* stw R30, <#[R1 + 84]> */
		/* 82200544h case   59:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82200544h case   59:*/		return 0x82200548;
		  /* 82200548h */ case   60:  		/* mr R8, R26 */
		/* 82200548h case   60:*/		regs.R8 = regs.R26;
		/* 82200548h case   60:*/		return 0x8220054C;
		  /* 8220054Ch */ case   61:  		/* li R7, 0 */
		/* 8220054Ch case   61:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8220054Ch case   61:*/		return 0x82200550;
		  /* 82200550h */ case   62:  		/* mr R6, R27 */
		/* 82200550h case   62:*/		regs.R6 = regs.R27;
		/* 82200550h case   62:*/		return 0x82200554;
		  /* 82200554h */ case   63:  		/* li R5, 0 */
		/* 82200554h case   63:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82200554h case   63:*/		return 0x82200558;
		  /* 82200558h */ case   64:  		/* mr R4, R28 */
		/* 82200558h case   64:*/		regs.R4 = regs.R28;
		/* 82200558h case   64:*/		return 0x8220055C;
		  /* 8220055Ch */ case   65:  		/* mr R3, R31 */
		/* 8220055Ch case   65:*/		regs.R3 = regs.R31;
		/* 8220055Ch case   65:*/		return 0x82200560;
		  /* 82200560h */ case   66:  		/* bl -76200 */
		/* 82200560h case   66:*/		regs.LR = 0x82200564; return 0x821EDBB8;
		/* 82200560h case   66:*/		return 0x82200564;
		  /* 82200564h */ case   67:  		/* mr R28, R3 */
		/* 82200564h case   67:*/		regs.R28 = regs.R3;
		/* 82200564h case   67:*/		return 0x82200568;
		  /* 82200568h */ case   68:  		/* addi R3, R1, 208 */
		/* 82200568h case   68:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 82200568h case   68:*/		return 0x8220056C;
		  /* 8220056Ch */ case   69:  		/* bl -259852 */
		/* 8220056Ch case   69:*/		regs.LR = 0x82200570; return 0x821C0E60;
		/* 8220056Ch case   69:*/		return 0x82200570;
		  /* 82200570h */ case   70:  		/* mr R4, R3 */
		/* 82200570h case   70:*/		regs.R4 = regs.R3;
		/* 82200570h case   70:*/		return 0x82200574;
		  /* 82200574h */ case   71:  		/* mr R3, R31 */
		/* 82200574h case   71:*/		regs.R3 = regs.R31;
		/* 82200574h case   71:*/		return 0x82200578;
		  /* 82200578h */ case   72:  		/* bl -57848 */
		/* 82200578h case   72:*/		regs.LR = 0x8220057C; return 0x821F2380;
		/* 82200578h case   72:*/		return 0x8220057C;
		  /* 8220057Ch */ case   73:  		/* mr R27, R3 */
		/* 8220057Ch case   73:*/		regs.R27 = regs.R3;
		/* 8220057Ch case   73:*/		return 0x82200580;
		  /* 82200580h */ case   74:  		/* addi R3, R1, 208 */
		/* 82200580h case   74:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 82200580h case   74:*/		return 0x82200584;
		  /* 82200584h */ case   75:  		/* bl -259876 */
		/* 82200584h case   75:*/		regs.LR = 0x82200588; return 0x821C0E60;
		/* 82200584h case   75:*/		return 0x82200588;
		  /* 82200588h */ case   76:  		/* mr R4, R3 */
		/* 82200588h case   76:*/		regs.R4 = regs.R3;
		/* 82200588h case   76:*/		return 0x8220058C;
		  /* 8220058Ch */ case   77:  		/* mr R3, R31 */
		/* 8220058Ch case   77:*/		regs.R3 = regs.R31;
		/* 8220058Ch case   77:*/		return 0x82200590;
		  /* 82200590h */ case   78:  		/* bl -57872 */
		/* 82200590h case   78:*/		regs.LR = 0x82200594; return 0x821F2380;
		/* 82200590h case   78:*/		return 0x82200594;
		  /* 82200594h */ case   79:  		/* mr R26, R3 */
		/* 82200594h case   79:*/		regs.R26 = regs.R3;
		/* 82200594h case   79:*/		return 0x82200598;
		  /* 82200598h */ case   80:  		/* addi R3, R1, 208 */
		/* 82200598h case   80:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 82200598h case   80:*/		return 0x8220059C;
		  /* 8220059Ch */ case   81:  		/* bl -259900 */
		/* 8220059Ch case   81:*/		regs.LR = 0x822005A0; return 0x821C0E60;
		/* 8220059Ch case   81:*/		return 0x822005A0;
		  /* 822005A0h */ case   82:  		/* mr R4, R3 */
		/* 822005A0h case   82:*/		regs.R4 = regs.R3;
		/* 822005A0h case   82:*/		return 0x822005A4;
		  /* 822005A4h */ case   83:  		/* mr R3, R31 */
		/* 822005A4h case   83:*/		regs.R3 = regs.R31;
		/* 822005A4h case   83:*/		return 0x822005A8;
		  /* 822005A8h */ case   84:  		/* bl -57896 */
		/* 822005A8h case   84:*/		regs.LR = 0x822005AC; return 0x821F2380;
		/* 822005A8h case   84:*/		return 0x822005AC;
		  /* 822005ACh */ case   85:  		/* mr R25, R3 */
		/* 822005ACh case   85:*/		regs.R25 = regs.R3;
		/* 822005ACh case   85:*/		return 0x822005B0;
		  /* 822005B0h */ case   86:  		/* addi R3, R1, 208 */
		/* 822005B0h case   86:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD0);
		/* 822005B0h case   86:*/		return 0x822005B4;
		  /* 822005B4h */ case   87:  		/* bl -259924 */
		/* 822005B4h case   87:*/		regs.LR = 0x822005B8; return 0x821C0E60;
		/* 822005B4h case   87:*/		return 0x822005B8;
		  /* 822005B8h */ case   88:  		/* mr R4, R3 */
		/* 822005B8h case   88:*/		regs.R4 = regs.R3;
		/* 822005B8h case   88:*/		return 0x822005BC;
		  /* 822005BCh */ case   89:  		/* mr R3, R31 */
		/* 822005BCh case   89:*/		regs.R3 = regs.R31;
		/* 822005BCh case   89:*/		return 0x822005C0;
		  /* 822005C0h */ case   90:  		/* bl -57920 */
		/* 822005C0h case   90:*/		regs.LR = 0x822005C4; return 0x821F2380;
		/* 822005C0h case   90:*/		return 0x822005C4;
		  /* 822005C4h */ case   91:  		/* mr R24, R3 */
		/* 822005C4h case   91:*/		regs.R24 = regs.R3;
		/* 822005C4h case   91:*/		return 0x822005C8;
		  /* 822005C8h */ case   92:  		/* lwz R5, <#[R25 + 12]> */
		/* 822005C8h case   92:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 822005C8h case   92:*/		return 0x822005CC;
		  /* 822005CCh */ case   93:  		/* mr R4, R25 */
		/* 822005CCh case   93:*/		regs.R4 = regs.R25;
		/* 822005CCh case   93:*/		return 0x822005D0;
		  /* 822005D0h */ case   94:  		/* mr R3, R31 */
		/* 822005D0h case   94:*/		regs.R3 = regs.R31;
		/* 822005D0h case   94:*/		return 0x822005D4;
		  /* 822005D4h */ case   95:  		/* bl -586980 */
		/* 822005D4h case   95:*/		regs.LR = 0x822005D8; return 0x821710F0;
		/* 822005D4h case   95:*/		return 0x822005D8;
		  /* 822005D8h */ case   96:  		/* li R4, 4 */
		/* 822005D8h case   96:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 822005D8h case   96:*/		return 0x822005DC;
		  /* 822005DCh */ case   97:  		/* mr R25, R3 */
		/* 822005DCh case   97:*/		regs.R25 = regs.R3;
		/* 822005DCh case   97:*/		return 0x822005E0;
		  /* 822005E0h */ case   98:  		/* bl -559904 */
		/* 822005E0h case   98:*/		regs.LR = 0x822005E4; return 0x82177AC0;
		/* 822005E0h case   98:*/		return 0x822005E4;
		  /* 822005E4h */ case   99:  		/* mr R8, R24 */
		/* 822005E4h case   99:*/		regs.R8 = regs.R24;
		/* 822005E4h case   99:*/		return 0x822005E8;
		  /* 822005E8h */ case  100:  		/* mr R6, R25 */
		/* 822005E8h case  100:*/		regs.R6 = regs.R25;
		/* 822005E8h case  100:*/		return 0x822005EC;
		  /* 822005ECh */ case  101:  		/* stw R30, <#[R1 + 84]> */
		/* 822005ECh case  101:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 822005ECh case  101:*/		return 0x822005F0;
		  /* 822005F0h */ case  102:  		/* mr R4, R26 */
		/* 822005F0h case  102:*/		regs.R4 = regs.R26;
		/* 822005F0h case  102:*/		return 0x822005F4;
		  /* 822005F4h */ case  103:  		/* li R10, 0 */
		/* 822005F4h case  103:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822005F4h case  103:*/		return 0x822005F8;
		  /* 822005F8h */ case  104:  		/* li R9, 0 */
		/* 822005F8h case  104:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822005F8h case  104:*/		return 0x822005FC;
		  /* 822005FCh */ case  105:  		/* li R7, 0 */
		/* 822005FCh case  105:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822005FCh case  105:*/		return 0x82200600;
		  /* 82200600h */ case  106:  		/* li R5, 0 */
		/* 82200600h case  106:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82200600h case  106:*/		return 0x82200604;
		  /* 82200604h */ case  107:  		/* mr R3, R31 */
		/* 82200604h case  107:*/		regs.R3 = regs.R31;
		/* 82200604h case  107:*/		return 0x82200608;
		  /* 82200608h */ case  108:  		/* bl -76368 */
		/* 82200608h case  108:*/		regs.LR = 0x8220060C; return 0x821EDBB8;
		/* 82200608h case  108:*/		return 0x8220060C;
		  /* 8220060Ch */ case  109:  		/* mr R23, R3 */
		/* 8220060Ch case  109:*/		regs.R23 = regs.R3;
		/* 8220060Ch case  109:*/		return 0x82200610;
		  /* 82200610h */ case  110:  		/* mr R8, R24 */
		/* 82200610h case  110:*/		regs.R8 = regs.R24;
		/* 82200610h case  110:*/		return 0x82200614;
		  /* 82200614h */ case  111:  		/* stw R30, <#[R1 + 84]> */
		/* 82200614h case  111:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82200614h case  111:*/		return 0x82200618;
		  /* 82200618h */ case  112:  		/* mr R6, R25 */
		/* 82200618h case  112:*/		regs.R6 = regs.R25;
		/* 82200618h case  112:*/		return 0x8220061C;
		  /* 8220061Ch */ case  113:  		/* mr R4, R27 */
		/* 8220061Ch case  113:*/		regs.R4 = regs.R27;
		/* 8220061Ch case  113:*/		return 0x82200620;
		  /* 82200620h */ case  114:  		/* li R10, 0 */
		/* 82200620h case  114:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82200620h case  114:*/		return 0x82200624;
		  /* 82200624h */ case  115:  		/* li R9, 0 */
		/* 82200624h case  115:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82200624h case  115:*/		return 0x82200628;
		  /* 82200628h */ case  116:  		/* li R7, 0 */
		/* 82200628h case  116:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82200628h case  116:*/		return 0x8220062C;
		  /* 8220062Ch */ case  117:  		/* li R5, 0 */
		/* 8220062Ch case  117:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8220062Ch case  117:*/		return 0x82200630;
		  /* 82200630h */ case  118:  		/* mr R3, R31 */
		/* 82200630h case  118:*/		regs.R3 = regs.R31;
		/* 82200630h case  118:*/		return 0x82200634;
		  /* 82200634h */ case  119:  		/* bl -76412 */
		/* 82200634h case  119:*/		regs.LR = 0x82200638; return 0x821EDBB8;
		/* 82200634h case  119:*/		return 0x82200638;
		  /* 82200638h */ case  120:  		/* mr R22, R3 */
		/* 82200638h case  120:*/		regs.R22 = regs.R3;
		/* 82200638h case  120:*/		return 0x8220063C;
		  /* 8220063Ch */ case  121:  		/* mr R4, R26 */
		/* 8220063Ch case  121:*/		regs.R4 = regs.R26;
		/* 8220063Ch case  121:*/		return 0x82200640;
		  /* 82200640h */ case  122:  		/* lwz R5, <#[R26 + 12]> */
		/* 82200640h case  122:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82200640h case  122:*/		return 0x82200644;
		  /* 82200644h */ case  123:  		/* mr R3, R31 */
		/* 82200644h case  123:*/		regs.R3 = regs.R31;
		/* 82200644h case  123:*/		return 0x82200648;
		  /* 82200648h */ case  124:  		/* bl -587096 */
		/* 82200648h case  124:*/		regs.LR = 0x8220064C; return 0x821710F0;
		/* 82200648h case  124:*/		return 0x8220064C;
		  /* 8220064Ch */ case  125:  		/* li R4, 4 */
		/* 8220064Ch case  125:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8220064Ch case  125:*/		return 0x82200650;
		  /* 82200650h */ case  126:  		/* mr R26, R3 */
		/* 82200650h case  126:*/		regs.R26 = regs.R3;
		/* 82200650h case  126:*/		return 0x82200654;
		  /* 82200654h */ case  127:  		/* bl -560020 */
		/* 82200654h case  127:*/		regs.LR = 0x82200658; return 0x82177AC0;
		/* 82200654h case  127:*/		return 0x82200658;
		  /* 82200658h */ case  128:  		/* mr R3, R31 */
		/* 82200658h case  128:*/		regs.R3 = regs.R31;
		/* 82200658h case  128:*/		return 0x8220065C;
		  /* 8220065Ch */ case  129:  		/* mr R4, R25 */
		/* 8220065Ch case  129:*/		regs.R4 = regs.R25;
		/* 8220065Ch case  129:*/		return 0x82200660;
		  /* 82200660h */ case  130:  		/* lwz R5, <#[R25 + 12]> */
		/* 82200660h case  130:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 82200660h case  130:*/		return 0x82200664;
		  /* 82200664h */ case  131:  		/* bl -587124 */
		/* 82200664h case  131:*/		regs.LR = 0x82200668; return 0x821710F0;
		/* 82200664h case  131:*/		return 0x82200668;
		  /* 82200668h */ case  132:  		/* li R4, 4 */
		/* 82200668h case  132:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82200668h case  132:*/		return 0x8220066C;
		  /* 8220066Ch */ case  133:  		/* mr R25, R3 */
		/* 8220066Ch case  133:*/		regs.R25 = regs.R3;
		/* 8220066Ch case  133:*/		return 0x82200670;
		  /* 82200670h */ case  134:  		/* bl -560048 */
		/* 82200670h case  134:*/		regs.LR = 0x82200674; return 0x82177AC0;
		/* 82200670h case  134:*/		return 0x82200674;
		  /* 82200674h */ case  135:  		/* mr R6, R26 */
		/* 82200674h case  135:*/		regs.R6 = regs.R26;
		/* 82200674h case  135:*/		return 0x82200678;
		  /* 82200678h */ case  136:  		/* mr R4, R27 */
		/* 82200678h case  136:*/		regs.R4 = regs.R27;
		/* 82200678h case  136:*/		return 0x8220067C;
		  /* 8220067Ch */ case  137:  		/* stw R30, <#[R1 + 84]> */
		/* 8220067Ch case  137:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8220067Ch case  137:*/		return 0x82200680;
		  /* 82200680h */ case  138:  		/* li R10, 0 */
		/* 82200680h case  138:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82200680h case  138:*/		return 0x82200684;
		  /* 82200684h */ case  139:  		/* li R9, 0 */
		/* 82200684h case  139:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82200684h case  139:*/		return 0x82200688;
		  /* 82200688h */ case  140:  		/* mr R8, R24 */
		/* 82200688h case  140:*/		regs.R8 = regs.R24;
		/* 82200688h case  140:*/		return 0x8220068C;
		  /* 8220068Ch */ case  141:  		/* li R7, 0 */
		/* 8220068Ch case  141:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8220068Ch case  141:*/		return 0x82200690;
		  /* 82200690h */ case  142:  		/* li R5, 0 */
		/* 82200690h case  142:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82200690h case  142:*/		return 0x82200694;
		  /* 82200694h */ case  143:  		/* mr R3, R31 */
		/* 82200694h case  143:*/		regs.R3 = regs.R31;
		/* 82200694h case  143:*/		return 0x82200698;
		  /* 82200698h */ case  144:  		/* bl -76512 */
		/* 82200698h case  144:*/		regs.LR = 0x8220069C; return 0x821EDBB8;
		/* 82200698h case  144:*/		return 0x8220069C;
		  /* 8220069Ch */ case  145:  		/* mr R24, R3 */
		/* 8220069Ch case  145:*/		regs.R24 = regs.R3;
		/* 8220069Ch case  145:*/		return 0x822006A0;
		  /* 822006A0h */ case  146:  		/* li R10, 0 */
		/* 822006A0h case  146:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822006A0h case  146:*/		return 0x822006A4;
		  /* 822006A4h */ case  147:  		/* stw R30, <#[R1 + 84]> */
		/* 822006A4h case  147:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 822006A4h case  147:*/		return 0x822006A8;
		  /* 822006A8h */ case  148:  		/* li R9, 0 */
		/* 822006A8h case  148:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822006A8h case  148:*/		return 0x822006AC;
		  /* 822006ACh */ case  149:  		/* mr R8, R25 */
		/* 822006ACh case  149:*/		regs.R8 = regs.R25;
		/* 822006ACh case  149:*/		return 0x822006B0;
		  /* 822006B0h */ case  150:  		/* li R7, 0 */
		/* 822006B0h case  150:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822006B0h case  150:*/		return 0x822006B4;
		  /* 822006B4h */ case  151:  		/* mr R6, R26 */
		/* 822006B4h case  151:*/		regs.R6 = regs.R26;
		/* 822006B4h case  151:*/		return 0x822006B8;
		  /* 822006B8h */ case  152:  		/* li R5, 0 */
		/* 822006B8h case  152:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822006B8h case  152:*/		return 0x822006BC;
		  /* 822006BCh */ case  153:  		/* mr R4, R27 */
		/* 822006BCh case  153:*/		regs.R4 = regs.R27;
		/* 822006BCh case  153:*/		return 0x822006C0;
		  /* 822006C0h */ case  154:  		/* mr R3, R31 */
		/* 822006C0h case  154:*/		regs.R3 = regs.R31;
		/* 822006C0h case  154:*/		return 0x822006C4;
		  /* 822006C4h */ case  155:  		/* bl -76556 */
		/* 822006C4h case  155:*/		regs.LR = 0x822006C8; return 0x821EDBB8;
		/* 822006C4h case  155:*/		return 0x822006C8;
		  /* 822006C8h */ case  156:  		/* mr R27, R3 */
		/* 822006C8h case  156:*/		regs.R27 = regs.R3;
		/* 822006C8h case  156:*/		return 0x822006CC;
		  /* 822006CCh */ case  157:  		/* li R7, 1 */
		/* 822006CCh case  157:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822006CCh case  157:*/		return 0x822006D0;
		  /* 822006D0h */ case  158:  		/* li R6, 0 */
		/* 822006D0h case  158:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822006D0h case  158:*/		return 0x822006D4;
		  /* 822006D4h */ case  159:  		/* li R5, 4 */
		/* 822006D4h case  159:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822006D4h case  159:*/		return 0x822006D8;
		  /* 822006D8h */ case  160:  		/* addi R4, R1, 208 */
		/* 822006D8h case  160:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 822006D8h case  160:*/		return 0x822006DC;
		  /* 822006DCh */ case  161:  		/* mr R3, R31 */
		/* 822006DCh case  161:*/		regs.R3 = regs.R31;
		/* 822006DCh case  161:*/		return 0x822006E0;
		  /* 822006E0h */ case  162:  		/* bl -57792 */
		/* 822006E0h case  162:*/		regs.LR = 0x822006E4; return 0x821F2520;
		/* 822006E0h case  162:*/		return 0x822006E4;
		  /* 822006E4h */ case  163:  		/* mr R26, R3 */
		/* 822006E4h case  163:*/		regs.R26 = regs.R3;
		/* 822006E4h case  163:*/		return 0x822006E8;
		  /* 822006E8h */ case  164:  		/* li R7, 1 */
		/* 822006E8h case  164:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 822006E8h case  164:*/		return 0x822006EC;
		  /* 822006ECh */ case  165:  		/* li R6, 0 */
		/* 822006ECh case  165:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822006ECh case  165:*/		return 0x822006F0;
		  /* 822006F0h */ case  166:  		/* li R5, 4 */
		/* 822006F0h case  166:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 822006F0h case  166:*/		return 0x822006F4;
		  /* 822006F4h */ case  167:  		/* addi R4, R1, 208 */
		/* 822006F4h case  167:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD0);
		/* 822006F4h case  167:*/		return 0x822006F8;
		  /* 822006F8h */ case  168:  		/* mr R3, R31 */
		/* 822006F8h case  168:*/		regs.R3 = regs.R31;
		/* 822006F8h case  168:*/		return 0x822006FC;
		  /* 822006FCh */ case  169:  		/* bl -57820 */
		/* 822006FCh case  169:*/		regs.LR = 0x82200700; return 0x821F2520;
		/* 822006FCh case  169:*/		return 0x82200700;
		  /* 82200700h */ case  170:  		/* lwz R10, <#[R26]> */
		/* 82200700h case  170:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82200700h case  170:*/		return 0x82200704;
		  /* 82200704h */ case  171:  		/* li R11, 3 */
		/* 82200704h case  171:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82200704h case  171:*/		return 0x82200708;
		  /* 82200708h */ case  172:  		/* mr R25, R3 */
		/* 82200708h case  172:*/		regs.R25 = regs.R3;
		/* 82200708h case  172:*/		return 0x8220070C;
		  /* 8220070Ch */ case  173:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 8220070Ch case  173:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 8220070Ch case  173:*/		return 0x82200710;
		  /* 82200710h */ case  174:  		/* mr R4, R26 */
		/* 82200710h case  174:*/		regs.R4 = regs.R26;
		/* 82200710h case  174:*/		return 0x82200714;
		  /* 82200714h */ case  175:  		/* stw R10, <#[R26]> */
		/* 82200714h case  175:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82200714h case  175:*/		return 0x82200718;
		  /* 82200718h */ case  176:  		/* lwz R10, <#[R25]> */
		/* 82200718h case  176:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 82200718h case  176:*/		return 0x8220071C;
		  /* 8220071Ch */ case  177:  		/* mr R3, R31 */
		/* 8220071Ch case  177:*/		regs.R3 = regs.R31;
		/* 8220071Ch case  177:*/		return 0x82200720;
		  /* 82200720h */ case  178:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 82200720h case  178:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 82200720h case  178:*/		return 0x82200724;
		  /* 82200724h */ case  179:  		/* stw R10, <#[R25]> */
		/* 82200724h case  179:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 82200724h case  179:*/		return 0x82200728;
		  /* 82200728h */ case  180:  		/* lwz R5, <#[R26 + 12]> */
		/* 82200728h case  180:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82200728h case  180:*/		return 0x8220072C;
		  /* 8220072Ch */ case  181:  		/* bl -587324 */
		/* 8220072Ch case  181:*/		regs.LR = 0x82200730; return 0x821710F0;
		/* 8220072Ch case  181:*/		return 0x82200730;
		  /* 82200730h */ case  182:  		/* mr R21, R3 */
		/* 82200730h case  182:*/		regs.R21 = regs.R3;
		/* 82200730h case  182:*/		return 0x82200734;
		  /* 82200734h */ case  183:  		/* lwz R5, <#[R25 + 12]> */
		/* 82200734h case  183:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 82200734h case  183:*/		return 0x82200738;
		  /* 82200738h */ case  184:  		/* mr R4, R25 */
		/* 82200738h case  184:*/		regs.R4 = regs.R25;
		/* 82200738h case  184:*/		return 0x8220073C;
		  /* 8220073Ch */ case  185:  		/* mr R3, R31 */
		/* 8220073Ch case  185:*/		regs.R3 = regs.R31;
		/* 8220073Ch case  185:*/		return 0x82200740;
		  /* 82200740h */ case  186:  		/* bl -587344 */
		/* 82200740h case  186:*/		regs.LR = 0x82200744; return 0x821710F0;
		/* 82200740h case  186:*/		return 0x82200744;
		  /* 82200744h */ case  187:  		/* mr R20, R3 */
		/* 82200744h case  187:*/		regs.R20 = regs.R3;
		/* 82200744h case  187:*/		return 0x82200748;
		  /* 82200748h */ case  188:  		/* mr R3, R21 */
		/* 82200748h case  188:*/		regs.R3 = regs.R21;
		/* 82200748h case  188:*/		return 0x8220074C;
		  /* 8220074Ch */ case  189:  		/* li R4, 214 */
		/* 8220074Ch case  189:*/		cpu::op::li<0>(regs,&regs.R4,0xD6);
		/* 8220074Ch case  189:*/		return 0x82200750;
		  /* 82200750h */ case  190:  		/* bl -435552 */
		/* 82200750h case  190:*/		regs.LR = 0x82200754; return 0x821961F0;
		/* 82200750h case  190:*/		return 0x82200754;
		  /* 82200754h */ case  191:  		/* mr R3, R20 */
		/* 82200754h case  191:*/		regs.R3 = regs.R20;
		/* 82200754h case  191:*/		return 0x82200758;
		  /* 82200758h */ case  192:  		/* li R4, 239 */
		/* 82200758h case  192:*/		cpu::op::li<0>(regs,&regs.R4,0xEF);
		/* 82200758h case  192:*/		return 0x8220075C;
		  /* 8220075Ch */ case  193:  		/* bl -435564 */
		/* 8220075Ch case  193:*/		regs.LR = 0x82200760; return 0x821961F0;
		/* 8220075Ch case  193:*/		return 0x82200760;
		  /* 82200760h */ case  194:  		/* mr R5, R20 */
		/* 82200760h case  194:*/		regs.R5 = regs.R20;
		/* 82200760h case  194:*/		return 0x82200764;
		  /* 82200764h */ case  195:  		/* mr R4, R21 */
		/* 82200764h case  195:*/		regs.R4 = regs.R21;
		/* 82200764h case  195:*/		return 0x82200768;
		  /* 82200768h */ case  196:  		/* mr R3, R31 */
		/* 82200768h case  196:*/		regs.R3 = regs.R31;
		/* 82200768h case  196:*/		return 0x8220076C;
		  /* 8220076Ch */ case  197:  		/* bl -75060 */
		/* 8220076Ch case  197:*/		regs.LR = 0x82200770; return 0x821EE238;
		/* 8220076Ch case  197:*/		return 0x82200770;
		  /* 82200770h */ case  198:  		/* mr R21, R3 */
		/* 82200770h case  198:*/		regs.R21 = regs.R3;
		/* 82200770h case  198:*/		return 0x82200774;
		  /* 82200774h */ case  199:  		/* mr R4, R26 */
		/* 82200774h case  199:*/		regs.R4 = regs.R26;
		/* 82200774h case  199:*/		return 0x82200778;
		  /* 82200778h */ case  200:  		/* lwz R5, <#[R26 + 12]> */
		/* 82200778h case  200:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82200778h case  200:*/		return 0x8220077C;
		  /* 8220077Ch */ case  201:  		/* mr R3, R31 */
		/* 8220077Ch case  201:*/		regs.R3 = regs.R31;
		/* 8220077Ch case  201:*/		return 0x82200780;
		  /* 82200780h */ case  202:  		/* bl -587408 */
		/* 82200780h case  202:*/		regs.LR = 0x82200784; return 0x821710F0;
		/* 82200780h case  202:*/		return 0x82200784;
		  /* 82200784h */ case  203:  		/* mr R20, R3 */
		/* 82200784h case  203:*/		regs.R20 = regs.R3;
		/* 82200784h case  203:*/		return 0x82200788;
		  /* 82200788h */ case  204:  		/* mr R4, R25 */
		/* 82200788h case  204:*/		regs.R4 = regs.R25;
		/* 82200788h case  204:*/		return 0x8220078C;
		  /* 8220078Ch */ case  205:  		/* lwz R5, <#[R25 + 12]> */
		/* 8220078Ch case  205:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 8220078Ch case  205:*/		return 0x82200790;
		  /* 82200790h */ case  206:  		/* mr R3, R31 */
		/* 82200790h case  206:*/		regs.R3 = regs.R31;
		/* 82200790h case  206:*/		return 0x82200794;
		  /* 82200794h */ case  207:  		/* bl -587428 */
		/* 82200794h case  207:*/		regs.LR = 0x82200798; return 0x821710F0;
		/* 82200794h case  207:*/		return 0x82200798;
		  /* 82200798h */ case  208:  		/* mr R19, R3 */
		/* 82200798h case  208:*/		regs.R19 = regs.R3;
		/* 82200798h case  208:*/		return 0x8220079C;
		  /* 8220079Ch */ case  209:  		/* mr R3, R20 */
		/* 8220079Ch case  209:*/		regs.R3 = regs.R20;
		/* 8220079Ch case  209:*/		return 0x822007A0;
		  /* 822007A0h */ case  210:  		/* li R4, 239 */
		/* 822007A0h case  210:*/		cpu::op::li<0>(regs,&regs.R4,0xEF);
		/* 822007A0h case  210:*/		return 0x822007A4;
		  /* 822007A4h */ case  211:  		/* bl -435636 */
		/* 822007A4h case  211:*/		regs.LR = 0x822007A8; return 0x821961F0;
		/* 822007A4h case  211:*/		return 0x822007A8;
		  /* 822007A8h */ case  212:  		/* mr R3, R19 */
		/* 822007A8h case  212:*/		regs.R3 = regs.R19;
		/* 822007A8h case  212:*/		return 0x822007AC;
		  /* 822007ACh */ case  213:  		/* li R4, 214 */
		/* 822007ACh case  213:*/		cpu::op::li<0>(regs,&regs.R4,0xD6);
		/* 822007ACh case  213:*/		return 0x822007B0;
		  /* 822007B0h */ case  214:  		/* bl -435648 */
		/* 822007B0h case  214:*/		regs.LR = 0x822007B4; return 0x821961F0;
		/* 822007B0h case  214:*/		return 0x822007B4;
		  /* 822007B4h */ case  215:  		/* mr R5, R19 */
		/* 822007B4h case  215:*/		regs.R5 = regs.R19;
		/* 822007B4h case  215:*/		return 0x822007B8;
		  /* 822007B8h */ case  216:  		/* mr R4, R20 */
		/* 822007B8h case  216:*/		regs.R4 = regs.R20;
		/* 822007B8h case  216:*/		return 0x822007BC;
		  /* 822007BCh */ case  217:  		/* mr R3, R31 */
		/* 822007BCh case  217:*/		regs.R3 = regs.R31;
		/* 822007BCh case  217:*/		return 0x822007C0;
		  /* 822007C0h */ case  218:  		/* bl -75144 */
		/* 822007C0h case  218:*/		regs.LR = 0x822007C4; return 0x821EE238;
		/* 822007C0h case  218:*/		return 0x822007C4;
		  /* 822007C4h */ case  219:  		/* mr R20, R3 */
		/* 822007C4h case  219:*/		regs.R20 = regs.R3;
		/* 822007C4h case  219:*/		return 0x822007C8;
		  /* 822007C8h */ case  220:  		/* mr R4, R26 */
		/* 822007C8h case  220:*/		regs.R4 = regs.R26;
		/* 822007C8h case  220:*/		return 0x822007CC;
		  /* 822007CCh */ case  221:  		/* lwz R5, <#[R26 + 12]> */
		/* 822007CCh case  221:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 822007CCh case  221:*/		return 0x822007D0;
		  /* 822007D0h */ case  222:  		/* mr R3, R31 */
		/* 822007D0h case  222:*/		regs.R3 = regs.R31;
		/* 822007D0h case  222:*/		return 0x822007D4;
		  /* 822007D4h */ case  223:  		/* bl -587492 */
		/* 822007D4h case  223:*/		regs.LR = 0x822007D8; return 0x821710F0;
		/* 822007D4h case  223:*/		return 0x822007D8;
		  /* 822007D8h */ case  224:  		/* mr R19, R3 */
		/* 822007D8h case  224:*/		regs.R19 = regs.R3;
		/* 822007D8h case  224:*/		return 0x822007DC;
		  /* 822007DCh */ case  225:  		/* mr R4, R25 */
		/* 822007DCh case  225:*/		regs.R4 = regs.R25;
		/* 822007DCh case  225:*/		return 0x822007E0;
		  /* 822007E0h */ case  226:  		/* lwz R5, <#[R25 + 12]> */
		/* 822007E0h case  226:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 822007E0h case  226:*/		return 0x822007E4;
		  /* 822007E4h */ case  227:  		/* mr R3, R31 */
		/* 822007E4h case  227:*/		regs.R3 = regs.R31;
		/* 822007E4h case  227:*/		return 0x822007E8;
		  /* 822007E8h */ case  228:  		/* bl -587512 */
		/* 822007E8h case  228:*/		regs.LR = 0x822007EC; return 0x821710F0;
		/* 822007E8h case  228:*/		return 0x822007EC;
		  /* 822007ECh */ case  229:  		/* mr R18, R3 */
		/* 822007ECh case  229:*/		regs.R18 = regs.R3;
		/* 822007ECh case  229:*/		return 0x822007F0;
		  /* 822007F0h */ case  230:  		/* mr R3, R19 */
		/* 822007F0h case  230:*/		regs.R3 = regs.R19;
		/* 822007F0h case  230:*/		return 0x822007F4;
		  /* 822007F4h */ case  231:  		/* li R4, 194 */
		/* 822007F4h case  231:*/		cpu::op::li<0>(regs,&regs.R4,0xC2);
		/* 822007F4h case  231:*/		return 0x822007F8;
		  /* 822007F8h */ case  232:  		/* bl -435720 */
		/* 822007F8h case  232:*/		regs.LR = 0x822007FC; return 0x821961F0;
		/* 822007F8h case  232:*/		return 0x822007FC;
		  /* 822007FCh */ case  233:  		/* mr R3, R18 */
		/* 822007FCh case  233:*/		regs.R3 = regs.R18;
		/* 822007FCh case  233:*/		return 0x82200800;
		  /* 82200800h */ case  234:  		/* li R4, 239 */
		/* 82200800h case  234:*/		cpu::op::li<0>(regs,&regs.R4,0xEF);
		/* 82200800h case  234:*/		return 0x82200804;
		  /* 82200804h */ case  235:  		/* bl -435732 */
		/* 82200804h case  235:*/		regs.LR = 0x82200808; return 0x821961F0;
		/* 82200804h case  235:*/		return 0x82200808;
		  /* 82200808h */ case  236:  		/* mr R5, R18 */
		/* 82200808h case  236:*/		regs.R5 = regs.R18;
		/* 82200808h case  236:*/		return 0x8220080C;
		  /* 8220080Ch */ case  237:  		/* mr R4, R19 */
		/* 8220080Ch case  237:*/		regs.R4 = regs.R19;
		/* 8220080Ch case  237:*/		return 0x82200810;
		  /* 82200810h */ case  238:  		/* mr R3, R31 */
		/* 82200810h case  238:*/		regs.R3 = regs.R31;
		/* 82200810h case  238:*/		return 0x82200814;
		  /* 82200814h */ case  239:  		/* bl -75228 */
		/* 82200814h case  239:*/		regs.LR = 0x82200818; return 0x821EE238;
		/* 82200814h case  239:*/		return 0x82200818;
		  /* 82200818h */ case  240:  		/* mr R19, R3 */
		/* 82200818h case  240:*/		regs.R19 = regs.R3;
		/* 82200818h case  240:*/		return 0x8220081C;
		  /* 8220081Ch */ case  241:  		/* mr R4, R26 */
		/* 8220081Ch case  241:*/		regs.R4 = regs.R26;
		/* 8220081Ch case  241:*/		return 0x82200820;
		  /* 82200820h */ case  242:  		/* lwz R5, <#[R26 + 12]> */
		/* 82200820h case  242:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82200820h case  242:*/		return 0x82200824;
		  /* 82200824h */ case  243:  		/* mr R3, R31 */
		/* 82200824h case  243:*/		regs.R3 = regs.R31;
		/* 82200824h case  243:*/		return 0x82200828;
		  /* 82200828h */ case  244:  		/* bl -587576 */
		/* 82200828h case  244:*/		regs.LR = 0x8220082C; return 0x821710F0;
		/* 82200828h case  244:*/		return 0x8220082C;
		  /* 8220082Ch */ case  245:  		/* mr R18, R3 */
		/* 8220082Ch case  245:*/		regs.R18 = regs.R3;
		/* 8220082Ch case  245:*/		return 0x82200830;
		  /* 82200830h */ case  246:  		/* mr R4, R25 */
		/* 82200830h case  246:*/		regs.R4 = regs.R25;
		/* 82200830h case  246:*/		return 0x82200834;
		  /* 82200834h */ case  247:  		/* lwz R5, <#[R25 + 12]> */
		/* 82200834h case  247:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 82200834h case  247:*/		return 0x82200838;
		  /* 82200838h */ case  248:  		/* mr R3, R31 */
		/* 82200838h case  248:*/		regs.R3 = regs.R31;
		/* 82200838h case  248:*/		return 0x8220083C;
		  /* 8220083Ch */ case  249:  		/* bl -587596 */
		/* 8220083Ch case  249:*/		regs.LR = 0x82200840; return 0x821710F0;
		/* 8220083Ch case  249:*/		return 0x82200840;
		  /* 82200840h */ case  250:  		/* mr R17, R3 */
		/* 82200840h case  250:*/		regs.R17 = regs.R3;
		/* 82200840h case  250:*/		return 0x82200844;
		  /* 82200844h */ case  251:  		/* mr R3, R18 */
		/* 82200844h case  251:*/		regs.R3 = regs.R18;
		/* 82200844h case  251:*/		return 0x82200848;
		  /* 82200848h */ case  252:  		/* li R4, 239 */
		/* 82200848h case  252:*/		cpu::op::li<0>(regs,&regs.R4,0xEF);
		/* 82200848h case  252:*/		return 0x8220084C;
		  /* 8220084Ch */ case  253:  		/* bl -435804 */
		/* 8220084Ch case  253:*/		regs.LR = 0x82200850; return 0x821961F0;
		/* 8220084Ch case  253:*/		return 0x82200850;
		  /* 82200850h */ case  254:  		/* mr R3, R17 */
		/* 82200850h case  254:*/		regs.R3 = regs.R17;
		/* 82200850h case  254:*/		return 0x82200854;
		  /* 82200854h */ case  255:  		/* li R4, 194 */
		/* 82200854h case  255:*/		cpu::op::li<0>(regs,&regs.R4,0xC2);
		/* 82200854h case  255:*/		return 0x82200858;
		  /* 82200858h */ case  256:  		/* bl -435816 */
		/* 82200858h case  256:*/		regs.LR = 0x8220085C; return 0x821961F0;
		/* 82200858h case  256:*/		return 0x8220085C;
		  /* 8220085Ch */ case  257:  		/* mr R5, R17 */
		/* 8220085Ch case  257:*/		regs.R5 = regs.R17;
		/* 8220085Ch case  257:*/		return 0x82200860;
		  /* 82200860h */ case  258:  		/* mr R4, R18 */
		/* 82200860h case  258:*/		regs.R4 = regs.R18;
		/* 82200860h case  258:*/		return 0x82200864;
		  /* 82200864h */ case  259:  		/* mr R3, R31 */
		/* 82200864h case  259:*/		regs.R3 = regs.R31;
		/* 82200864h case  259:*/		return 0x82200868;
		  /* 82200868h */ case  260:  		/* bl -75312 */
		/* 82200868h case  260:*/		regs.LR = 0x8220086C; return 0x821EE238;
		/* 82200868h case  260:*/		return 0x8220086C;
		  /* 8220086Ch */ case  261:  		/* mr R18, R3 */
		/* 8220086Ch case  261:*/		regs.R18 = regs.R3;
		/* 8220086Ch case  261:*/		return 0x82200870;
		  /* 82200870h */ case  262:  		/* mr R4, R26 */
		/* 82200870h case  262:*/		regs.R4 = regs.R26;
		/* 82200870h case  262:*/		return 0x82200874;
		  /* 82200874h */ case  263:  		/* lwz R5, <#[R26 + 12]> */
		/* 82200874h case  263:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82200874h case  263:*/		return 0x82200878;
		  /* 82200878h */ case  264:  		/* mr R3, R31 */
		/* 82200878h case  264:*/		regs.R3 = regs.R31;
		/* 82200878h case  264:*/		return 0x8220087C;
		  /* 8220087Ch */ case  265:  		/* bl -587660 */
		/* 8220087Ch case  265:*/		regs.LR = 0x82200880; return 0x821710F0;
		/* 8220087Ch case  265:*/		return 0x82200880;
		  /* 82200880h */ case  266:  		/* mr R17, R3 */
		/* 82200880h case  266:*/		regs.R17 = regs.R3;
		/* 82200880h case  266:*/		return 0x82200884;
		  /* 82200884h */ case  267:  		/* mr R4, R25 */
		/* 82200884h case  267:*/		regs.R4 = regs.R25;
		/* 82200884h case  267:*/		return 0x82200888;
		  /* 82200888h */ case  268:  		/* lwz R5, <#[R25 + 12]> */
		/* 82200888h case  268:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 82200888h case  268:*/		return 0x8220088C;
		  /* 8220088Ch */ case  269:  		/* mr R3, R31 */
		/* 8220088Ch case  269:*/		regs.R3 = regs.R31;
		/* 8220088Ch case  269:*/		return 0x82200890;
		  /* 82200890h */ case  270:  		/* bl -587680 */
		/* 82200890h case  270:*/		regs.LR = 0x82200894; return 0x821710F0;
		/* 82200890h case  270:*/		return 0x82200894;
		  /* 82200894h */ case  271:  		/* mr R16, R3 */
		/* 82200894h case  271:*/		regs.R16 = regs.R3;
		/* 82200894h case  271:*/		return 0x82200898;
		  /* 82200898h */ case  272:  		/* mr R3, R17 */
		/* 82200898h case  272:*/		regs.R3 = regs.R17;
		/* 82200898h case  272:*/		return 0x8220089C;
		  /* 8220089Ch */ case  273:  		/* li R4, 193 */
		/* 8220089Ch case  273:*/		cpu::op::li<0>(regs,&regs.R4,0xC1);
		/* 8220089Ch case  273:*/		return 0x822008A0;
		  /* 822008A0h */ case  274:  		/* bl -435888 */
		/* 822008A0h case  274:*/		regs.LR = 0x822008A4; return 0x821961F0;
		/* 822008A0h case  274:*/		return 0x822008A4;
		  /* 822008A4h */ case  275:  		/* mr R3, R16 */
		/* 822008A4h case  275:*/		regs.R3 = regs.R16;
		/* 822008A4h case  275:*/		return 0x822008A8;
		  /* 822008A8h */ case  276:  		/* li R4, 223 */
		/* 822008A8h case  276:*/		cpu::op::li<0>(regs,&regs.R4,0xDF);
		/* 822008A8h case  276:*/		return 0x822008AC;
		  /* 822008ACh */ case  277:  		/* bl -435900 */
		/* 822008ACh case  277:*/		regs.LR = 0x822008B0; return 0x821961F0;
		/* 822008ACh case  277:*/		return 0x822008B0;
		  /* 822008B0h */ case  278:  		/* mr R5, R16 */
		/* 822008B0h case  278:*/		regs.R5 = regs.R16;
		/* 822008B0h case  278:*/		return 0x822008B4;
		  /* 822008B4h */ case  279:  		/* mr R4, R17 */
		/* 822008B4h case  279:*/		regs.R4 = regs.R17;
		/* 822008B4h case  279:*/		return 0x822008B8;
		  /* 822008B8h */ case  280:  		/* mr R3, R31 */
		/* 822008B8h case  280:*/		regs.R3 = regs.R31;
		/* 822008B8h case  280:*/		return 0x822008BC;
		  /* 822008BCh */ case  281:  		/* bl -75396 */
		/* 822008BCh case  281:*/		regs.LR = 0x822008C0; return 0x821EE238;
		/* 822008BCh case  281:*/		return 0x822008C0;
		  /* 822008C0h */ case  282:  		/* mr R17, R3 */
		/* 822008C0h case  282:*/		regs.R17 = regs.R3;
		/* 822008C0h case  282:*/		return 0x822008C4;
		  /* 822008C4h */ case  283:  		/* mr R4, R26 */
		/* 822008C4h case  283:*/		regs.R4 = regs.R26;
		/* 822008C4h case  283:*/		return 0x822008C8;
		  /* 822008C8h */ case  284:  		/* lwz R5, <#[R26 + 12]> */
		/* 822008C8h case  284:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 822008C8h case  284:*/		return 0x822008CC;
		  /* 822008CCh */ case  285:  		/* mr R3, R31 */
		/* 822008CCh case  285:*/		regs.R3 = regs.R31;
		/* 822008CCh case  285:*/		return 0x822008D0;
		  /* 822008D0h */ case  286:  		/* bl -587744 */
		/* 822008D0h case  286:*/		regs.LR = 0x822008D4; return 0x821710F0;
		/* 822008D0h case  286:*/		return 0x822008D4;
		  /* 822008D4h */ case  287:  		/* mr R16, R3 */
		/* 822008D4h case  287:*/		regs.R16 = regs.R3;
		/* 822008D4h case  287:*/		return 0x822008D8;
		  /* 822008D8h */ case  288:  		/* mr R4, R25 */
		/* 822008D8h case  288:*/		regs.R4 = regs.R25;
		/* 822008D8h case  288:*/		return 0x822008DC;
		  /* 822008DCh */ case  289:  		/* lwz R5, <#[R25 + 12]> */
		/* 822008DCh case  289:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 822008DCh case  289:*/		return 0x822008E0;
		  /* 822008E0h */ case  290:  		/* mr R3, R31 */
		/* 822008E0h case  290:*/		regs.R3 = regs.R31;
		/* 822008E0h case  290:*/		return 0x822008E4;
		  /* 822008E4h */ case  291:  		/* bl -587764 */
		/* 822008E4h case  291:*/		regs.LR = 0x822008E8; return 0x821710F0;
		/* 822008E4h case  291:*/		return 0x822008E8;
		  /* 822008E8h */ case  292:  		/* mr R15, R3 */
		/* 822008E8h case  292:*/		regs.R15 = regs.R3;
		/* 822008E8h case  292:*/		return 0x822008EC;
		  /* 822008ECh */ case  293:  		/* mr R3, R16 */
		/* 822008ECh case  293:*/		regs.R3 = regs.R16;
		/* 822008ECh case  293:*/		return 0x822008F0;
		  /* 822008F0h */ case  294:  		/* li R4, 223 */
		/* 822008F0h case  294:*/		cpu::op::li<0>(regs,&regs.R4,0xDF);
		/* 822008F0h case  294:*/		return 0x822008F4;
		  /* 822008F4h */ case  295:  		/* bl -435972 */
		/* 822008F4h case  295:*/		regs.LR = 0x822008F8; return 0x821961F0;
		/* 822008F4h case  295:*/		return 0x822008F8;
		  /* 822008F8h */ case  296:  		/* mr R3, R15 */
		/* 822008F8h case  296:*/		regs.R3 = regs.R15;
		/* 822008F8h case  296:*/		return 0x822008FC;
		  /* 822008FCh */ case  297:  		/* li R4, 193 */
		/* 822008FCh case  297:*/		cpu::op::li<0>(regs,&regs.R4,0xC1);
		/* 822008FCh case  297:*/		return 0x82200900;
		  /* 82200900h */ case  298:  		/* bl -435984 */
		/* 82200900h case  298:*/		regs.LR = 0x82200904; return 0x821961F0;
		/* 82200900h case  298:*/		return 0x82200904;
		  /* 82200904h */ case  299:  		/* mr R5, R15 */
		/* 82200904h case  299:*/		regs.R5 = regs.R15;
		/* 82200904h case  299:*/		return 0x82200908;
		  /* 82200908h */ case  300:  		/* mr R4, R16 */
		/* 82200908h case  300:*/		regs.R4 = regs.R16;
		/* 82200908h case  300:*/		return 0x8220090C;
		  /* 8220090Ch */ case  301:  		/* mr R3, R31 */
		/* 8220090Ch case  301:*/		regs.R3 = regs.R31;
		/* 8220090Ch case  301:*/		return 0x82200910;
		  /* 82200910h */ case  302:  		/* bl -75480 */
		/* 82200910h case  302:*/		regs.LR = 0x82200914; return 0x821EE238;
		/* 82200910h case  302:*/		return 0x82200914;
		  /* 82200914h */ case  303:  		/* mr R16, R3 */
		/* 82200914h case  303:*/		regs.R16 = regs.R3;
		/* 82200914h case  303:*/		return 0x82200918;
		  /* 82200918h */ case  304:  		/* mr R4, R26 */
		/* 82200918h case  304:*/		regs.R4 = regs.R26;
		/* 82200918h case  304:*/		return 0x8220091C;
		  /* 8220091Ch */ case  305:  		/* lwz R5, <#[R26 + 12]> */
		/* 8220091Ch case  305:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 8220091Ch case  305:*/		return 0x82200920;
		  /* 82200920h */ case  306:  		/* mr R3, R31 */
		/* 82200920h case  306:*/		regs.R3 = regs.R31;
		/* 82200920h case  306:*/		return 0x82200924;
		  /* 82200924h */ case  307:  		/* bl -587828 */
		/* 82200924h case  307:*/		regs.LR = 0x82200928; return 0x821710F0;
		/* 82200924h case  307:*/		return 0x82200928;
		  /* 82200928h */ case  308:  		/* mr R15, R3 */
		/* 82200928h case  308:*/		regs.R15 = regs.R3;
		/* 82200928h case  308:*/		return 0x8220092C;
		  /* 8220092Ch */ case  309:  		/* mr R4, R25 */
		/* 8220092Ch case  309:*/		regs.R4 = regs.R25;
		/* 8220092Ch case  309:*/		return 0x82200930;
		  /* 82200930h */ case  310:  		/* lwz R5, <#[R25 + 12]> */
		/* 82200930h case  310:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 82200930h case  310:*/		return 0x82200934;
		  /* 82200934h */ case  311:  		/* mr R3, R31 */
		/* 82200934h case  311:*/		regs.R3 = regs.R31;
		/* 82200934h case  311:*/		return 0x82200938;
		  /* 82200938h */ case  312:  		/* bl -587848 */
		/* 82200938h case  312:*/		regs.LR = 0x8220093C; return 0x821710F0;
		/* 82200938h case  312:*/		return 0x8220093C;
		  /* 8220093Ch */ case  313:  		/* mr R14, R3 */
		/* 8220093Ch case  313:*/		regs.R14 = regs.R3;
		/* 8220093Ch case  313:*/		return 0x82200940;
		  /* 82200940h */ case  314:  		/* mr R3, R15 */
		/* 82200940h case  314:*/		regs.R3 = regs.R15;
		/* 82200940h case  314:*/		return 0x82200944;
		  /* 82200944h */ case  315:  		/* li R4, 193 */
		/* 82200944h case  315:*/		cpu::op::li<0>(regs,&regs.R4,0xC1);
		/* 82200944h case  315:*/		return 0x82200948;
		  /* 82200948h */ case  316:  		/* bl -436056 */
		/* 82200948h case  316:*/		regs.LR = 0x8220094C; return 0x821961F0;
		/* 82200948h case  316:*/		return 0x8220094C;
		  /* 8220094Ch */ case  317:  		/* mr R3, R14 */
		/* 8220094Ch case  317:*/		regs.R3 = regs.R14;
		/* 8220094Ch case  317:*/		return 0x82200950;
		  /* 82200950h */ case  318:  		/* li R4, 218 */
		/* 82200950h case  318:*/		cpu::op::li<0>(regs,&regs.R4,0xDA);
		/* 82200950h case  318:*/		return 0x82200954;
		  /* 82200954h */ case  319:  		/* bl -436068 */
		/* 82200954h case  319:*/		regs.LR = 0x82200958; return 0x821961F0;
		/* 82200954h case  319:*/		return 0x82200958;
		  /* 82200958h */ case  320:  		/* mr R5, R14 */
		/* 82200958h case  320:*/		regs.R5 = regs.R14;
		/* 82200958h case  320:*/		return 0x8220095C;
		  /* 8220095Ch */ case  321:  		/* mr R4, R15 */
		/* 8220095Ch case  321:*/		regs.R4 = regs.R15;
		/* 8220095Ch case  321:*/		return 0x82200960;
		  /* 82200960h */ case  322:  		/* mr R3, R31 */
		/* 82200960h case  322:*/		regs.R3 = regs.R31;
		/* 82200960h case  322:*/		return 0x82200964;
		  /* 82200964h */ case  323:  		/* bl -75564 */
		/* 82200964h case  323:*/		regs.LR = 0x82200968; return 0x821EE238;
		/* 82200964h case  323:*/		return 0x82200968;
		  /* 82200968h */ case  324:  		/* mr R15, R3 */
		/* 82200968h case  324:*/		regs.R15 = regs.R3;
		/* 82200968h case  324:*/		return 0x8220096C;
		  /* 8220096Ch */ case  325:  		/* mr R3, R26 */
		/* 8220096Ch case  325:*/		regs.R3 = regs.R26;
		/* 8220096Ch case  325:*/		return 0x82200970;
		  /* 82200970h */ case  326:  		/* li R4, 218 */
		/* 82200970h case  326:*/		cpu::op::li<0>(regs,&regs.R4,0xDA);
		/* 82200970h case  326:*/		return 0x82200974;
		  /* 82200974h */ case  327:  		/* bl -436100 */
		/* 82200974h case  327:*/		regs.LR = 0x82200978; return 0x821961F0;
		/* 82200974h case  327:*/		return 0x82200978;
		  /* 82200978h */ case  328:  		/* mr R3, R25 */
		/* 82200978h case  328:*/		regs.R3 = regs.R25;
		/* 82200978h case  328:*/		return 0x8220097C;
		  /* 8220097Ch */ case  329:  		/* li R4, 193 */
		/* 8220097Ch case  329:*/		cpu::op::li<0>(regs,&regs.R4,0xC1);
		/* 8220097Ch case  329:*/		return 0x82200980;
		  /* 82200980h */ case  330:  		/* bl -436112 */
		/* 82200980h case  330:*/		regs.LR = 0x82200984; return 0x821961F0;
		/* 82200980h case  330:*/		return 0x82200984;
		  /* 82200984h */ case  331:  		/* mr R5, R25 */
		/* 82200984h case  331:*/		regs.R5 = regs.R25;
		/* 82200984h case  331:*/		return 0x82200988;
		  /* 82200988h */ case  332:  		/* mr R4, R26 */
		/* 82200988h case  332:*/		regs.R4 = regs.R26;
		/* 82200988h case  332:*/		return 0x8220098C;
		  /* 8220098Ch */ case  333:  		/* mr R3, R31 */
		/* 8220098Ch case  333:*/		regs.R3 = regs.R31;
		/* 8220098Ch case  333:*/		return 0x82200990;
		  /* 82200990h */ case  334:  		/* bl -75608 */
		/* 82200990h case  334:*/		regs.LR = 0x82200994; return 0x821EE238;
		/* 82200990h case  334:*/		return 0x82200994;
		  /* 82200994h */ case  335:  		/* lwz R11, <#[R20 + 8]> */
		/* 82200994h case  335:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 82200994h case  335:*/		return 0x82200998;
		  /* 82200998h */ case  336:  		/* mr R26, R3 */
		/* 82200998h case  336:*/		regs.R26 = regs.R3;
		/* 82200998h case  336:*/		return 0x8220099C;
		  /* 8220099Ch */ case  337:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 8220099Ch case  337:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 8220099Ch case  337:*/		return 0x822009A0;
		  /* 822009A0h */ case  338:  		/* li R7, 228 */
		/* 822009A0h case  338:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 822009A0h case  338:*/		return 0x822009A4;
		  /* 822009A4h */ case  339:  		/* li R6, 4 */
		/* 822009A4h case  339:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 822009A4h case  339:*/		return 0x822009A8;
		  /* 822009A8h */ case  340:  		/* mr R4, R20 */
		/* 822009A8h case  340:*/		regs.R4 = regs.R20;
		/* 822009A8h case  340:*/		return 0x822009AC;
		  /* 822009ACh */ case  341:  		/* mr R3, R31 */
		/* 822009ACh case  341:*/		regs.R3 = regs.R31;
		/* 822009ACh case  341:*/		return 0x822009B0;
		  /* 822009B0h */ case  342:  		/* bl 137360 */
		/* 822009B0h case  342:*/		regs.LR = 0x822009B4; return 0x82222240;
		/* 822009B0h case  342:*/		return 0x822009B4;
		  /* 822009B4h */ case  343:  		/* mr R5, R3 */
		/* 822009B4h case  343:*/		regs.R5 = regs.R3;
		/* 822009B4h case  343:*/		return 0x822009B8;
		  /* 822009B8h */ case  344:  		/* mr R4, R21 */
		/* 822009B8h case  344:*/		regs.R4 = regs.R21;
		/* 822009B8h case  344:*/		return 0x822009BC;
		  /* 822009BCh */ case  345:  		/* mr R3, R31 */
		/* 822009BCh case  345:*/		regs.R3 = regs.R31;
		/* 822009BCh case  345:*/		return 0x822009C0;
		  /* 822009C0h */ case  346:  		/* bl -70080 */
		/* 822009C0h case  346:*/		regs.LR = 0x822009C4; return 0x821EF800;
		/* 822009C0h case  346:*/		return 0x822009C4;
		  /* 822009C4h */ case  347:  		/* lwz R11, <#[R18 + 8]> */
		/* 822009C4h case  347:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 822009C4h case  347:*/		return 0x822009C8;
		  /* 822009C8h */ case  348:  		/* mr R25, R3 */
		/* 822009C8h case  348:*/		regs.R25 = regs.R3;
		/* 822009C8h case  348:*/		return 0x822009CC;
		  /* 822009CCh */ case  349:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 822009CCh case  349:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 822009CCh case  349:*/		return 0x822009D0;
		  /* 822009D0h */ case  350:  		/* li R7, 228 */
		/* 822009D0h case  350:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 822009D0h case  350:*/		return 0x822009D4;
		  /* 822009D4h */ case  351:  		/* li R6, 4 */
		/* 822009D4h case  351:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 822009D4h case  351:*/		return 0x822009D8;
		  /* 822009D8h */ case  352:  		/* mr R4, R18 */
		/* 822009D8h case  352:*/		regs.R4 = regs.R18;
		/* 822009D8h case  352:*/		return 0x822009DC;
		  /* 822009DCh */ case  353:  		/* mr R3, R31 */
		/* 822009DCh case  353:*/		regs.R3 = regs.R31;
		/* 822009DCh case  353:*/		return 0x822009E0;
		  /* 822009E0h */ case  354:  		/* bl 137312 */
		/* 822009E0h case  354:*/		regs.LR = 0x822009E4; return 0x82222240;
		/* 822009E0h case  354:*/		return 0x822009E4;
		  /* 822009E4h */ case  355:  		/* mr R5, R3 */
		/* 822009E4h case  355:*/		regs.R5 = regs.R3;
		/* 822009E4h case  355:*/		return 0x822009E8;
		  /* 822009E8h */ case  356:  		/* mr R4, R19 */
		/* 822009E8h case  356:*/		regs.R4 = regs.R19;
		/* 822009E8h case  356:*/		return 0x822009EC;
		  /* 822009ECh */ case  357:  		/* mr R3, R31 */
		/* 822009ECh case  357:*/		regs.R3 = regs.R31;
		/* 822009ECh case  357:*/		return 0x822009F0;
		  /* 822009F0h */ case  358:  		/* bl -70128 */
		/* 822009F0h case  358:*/		regs.LR = 0x822009F4; return 0x821EF800;
		/* 822009F0h case  358:*/		return 0x822009F4;
		  /* 822009F4h */ case  359:  		/* lwz R11, <#[R16 + 8]> */
		/* 822009F4h case  359:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 822009F4h case  359:*/		return 0x822009F8;
		  /* 822009F8h */ case  360:  		/* mr R21, R3 */
		/* 822009F8h case  360:*/		regs.R21 = regs.R3;
		/* 822009F8h case  360:*/		return 0x822009FC;
		  /* 822009FCh */ case  361:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 822009FCh case  361:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 822009FCh case  361:*/		return 0x82200A00;
		  /* 82200A00h */ case  362:  		/* li R7, 228 */
		/* 82200A00h case  362:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82200A00h case  362:*/		return 0x82200A04;
		  /* 82200A04h */ case  363:  		/* li R6, 4 */
		/* 82200A04h case  363:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82200A04h case  363:*/		return 0x82200A08;
		  /* 82200A08h */ case  364:  		/* mr R4, R16 */
		/* 82200A08h case  364:*/		regs.R4 = regs.R16;
		/* 82200A08h case  364:*/		return 0x82200A0C;
		  /* 82200A0Ch */ case  365:  		/* mr R3, R31 */
		/* 82200A0Ch case  365:*/		regs.R3 = regs.R31;
		/* 82200A0Ch case  365:*/		return 0x82200A10;
		  /* 82200A10h */ case  366:  		/* bl 137264 */
		/* 82200A10h case  366:*/		regs.LR = 0x82200A14; return 0x82222240;
		/* 82200A10h case  366:*/		return 0x82200A14;
		  /* 82200A14h */ case  367:  		/* mr R5, R3 */
		/* 82200A14h case  367:*/		regs.R5 = regs.R3;
		/* 82200A14h case  367:*/		return 0x82200A18;
		  /* 82200A18h */ case  368:  		/* mr R4, R17 */
		/* 82200A18h case  368:*/		regs.R4 = regs.R17;
		/* 82200A18h case  368:*/		return 0x82200A1C;
		  /* 82200A1Ch */ case  369:  		/* mr R3, R31 */
		/* 82200A1Ch case  369:*/		regs.R3 = regs.R31;
		/* 82200A1Ch case  369:*/		return 0x82200A20;
		  /* 82200A20h */ case  370:  		/* bl -70176 */
		/* 82200A20h case  370:*/		regs.LR = 0x82200A24; return 0x821EF800;
		/* 82200A20h case  370:*/		return 0x82200A24;
		  /* 82200A24h */ case  371:  		/* lwz R11, <#[R26 + 8]> */
		/* 82200A24h case  371:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 82200A24h case  371:*/		return 0x82200A28;
		  /* 82200A28h */ case  372:  		/* mr R20, R3 */
		/* 82200A28h case  372:*/		regs.R20 = regs.R3;
		/* 82200A28h case  372:*/		return 0x82200A2C;
		  /* 82200A2Ch */ case  373:  		/* rlwinm R5, R11, 18, 29, 31 */
		/* 82200A2Ch case  373:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R11);
		/* 82200A2Ch case  373:*/		return 0x82200A30;
		  /* 82200A30h */ case  374:  		/* li R7, 228 */
		/* 82200A30h case  374:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82200A30h case  374:*/		return 0x82200A34;
		  /* 82200A34h */ case  375:  		/* li R6, 4 */
		/* 82200A34h case  375:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82200A34h case  375:*/		return 0x82200A38;
		  /* 82200A38h */ case  376:  		/* mr R4, R26 */
		/* 82200A38h case  376:*/		regs.R4 = regs.R26;
		/* 82200A38h case  376:*/		return 0x82200A3C;
		  /* 82200A3Ch */ case  377:  		/* mr R3, R31 */
		/* 82200A3Ch case  377:*/		regs.R3 = regs.R31;
		/* 82200A3Ch case  377:*/		return 0x82200A40;
		  /* 82200A40h */ case  378:  		/* bl 137216 */
		/* 82200A40h case  378:*/		regs.LR = 0x82200A44; return 0x82222240;
		/* 82200A40h case  378:*/		return 0x82200A44;
		  /* 82200A44h */ case  379:  		/* mr R5, R3 */
		/* 82200A44h case  379:*/		regs.R5 = regs.R3;
		/* 82200A44h case  379:*/		return 0x82200A48;
		  /* 82200A48h */ case  380:  		/* mr R4, R15 */
		/* 82200A48h case  380:*/		regs.R4 = regs.R15;
		/* 82200A48h case  380:*/		return 0x82200A4C;
		  /* 82200A4Ch */ case  381:  		/* mr R3, R31 */
		/* 82200A4Ch case  381:*/		regs.R3 = regs.R31;
		/* 82200A4Ch case  381:*/		return 0x82200A50;
		  /* 82200A50h */ case  382:  		/* bl -70224 */
		/* 82200A50h case  382:*/		regs.LR = 0x82200A54; return 0x821EF800;
		/* 82200A50h case  382:*/		return 0x82200A54;
		  /* 82200A54h */ case  383:  		/* mr R5, R3 */
		/* 82200A54h case  383:*/		regs.R5 = regs.R3;
		/* 82200A54h case  383:*/		return 0x82200A58;
		  /* 82200A58h */ case  384:  		/* mr R4, R27 */
		/* 82200A58h case  384:*/		regs.R4 = regs.R27;
		/* 82200A58h case  384:*/		return 0x82200A5C;
		  /* 82200A5Ch */ case  385:  		/* mr R3, R31 */
		/* 82200A5Ch case  385:*/		regs.R3 = regs.R31;
		/* 82200A5Ch case  385:*/		return 0x82200A60;
		  /* 82200A60h */ case  386:  		/* bl -67296 */
		/* 82200A60h case  386:*/		regs.LR = 0x82200A64; return 0x821F0380;
		/* 82200A60h case  386:*/		return 0x82200A64;
		  /* 82200A64h */ case  387:  		/* mr R27, R3 */
		/* 82200A64h case  387:*/		regs.R27 = regs.R3;
		/* 82200A64h case  387:*/		return 0x82200A68;
		  /* 82200A68h */ case  388:  		/* mr R5, R20 */
		/* 82200A68h case  388:*/		regs.R5 = regs.R20;
		/* 82200A68h case  388:*/		return 0x82200A6C;
		  /* 82200A6Ch */ case  389:  		/* mr R4, R24 */
		/* 82200A6Ch case  389:*/		regs.R4 = regs.R24;
		/* 82200A6Ch case  389:*/		return 0x82200A70;
		  /* 82200A70h */ case  390:  		/* mr R3, R31 */
		/* 82200A70h case  390:*/		regs.R3 = regs.R31;
		/* 82200A70h case  390:*/		return 0x82200A74;
		  /* 82200A74h */ case  391:  		/* bl -67316 */
		/* 82200A74h case  391:*/		regs.LR = 0x82200A78; return 0x821F0380;
		/* 82200A74h case  391:*/		return 0x82200A78;
		  /* 82200A78h */ case  392:  		/* mr R26, R3 */
		/* 82200A78h case  392:*/		regs.R26 = regs.R3;
		/* 82200A78h case  392:*/		return 0x82200A7C;
		  /* 82200A7Ch */ case  393:  		/* mr R5, R21 */
		/* 82200A7Ch case  393:*/		regs.R5 = regs.R21;
		/* 82200A7Ch case  393:*/		return 0x82200A80;
		  /* 82200A80h */ case  394:  		/* mr R4, R22 */
		/* 82200A80h case  394:*/		regs.R4 = regs.R22;
		/* 82200A80h case  394:*/		return 0x82200A84;
		  /* 82200A84h */ case  395:  		/* mr R3, R31 */
		/* 82200A84h case  395:*/		regs.R3 = regs.R31;
		/* 82200A84h case  395:*/		return 0x82200A88;
		  /* 82200A88h */ case  396:  		/* bl -67336 */
		/* 82200A88h case  396:*/		regs.LR = 0x82200A8C; return 0x821F0380;
		/* 82200A88h case  396:*/		return 0x82200A8C;
		  /* 82200A8Ch */ case  397:  		/* mr R24, R3 */
		/* 82200A8Ch case  397:*/		regs.R24 = regs.R3;
		/* 82200A8Ch case  397:*/		return 0x82200A90;
		  /* 82200A90h */ case  398:  		/* mr R5, R25 */
		/* 82200A90h case  398:*/		regs.R5 = regs.R25;
		/* 82200A90h case  398:*/		return 0x82200A94;
		  /* 82200A94h */ case  399:  		/* mr R4, R23 */
		/* 82200A94h case  399:*/		regs.R4 = regs.R23;
		/* 82200A94h case  399:*/		return 0x82200A98;
		  /* 82200A98h */ case  400:  		/* mr R3, R31 */
		/* 82200A98h case  400:*/		regs.R3 = regs.R31;
		/* 82200A98h case  400:*/		return 0x82200A9C;
		  /* 82200A9Ch */ case  401:  		/* bl -67356 */
		/* 82200A9Ch case  401:*/		regs.LR = 0x82200AA0; return 0x821F0380;
		/* 82200A9Ch case  401:*/		return 0x82200AA0;
		  /* 82200AA0h */ case  402:  		/* mr R4, R3 */
		/* 82200AA0h case  402:*/		regs.R4 = regs.R3;
		/* 82200AA0h case  402:*/		return 0x82200AA4;
		  /* 82200AA4h */ case  403:  		/* mr R3, R31 */
		/* 82200AA4h case  403:*/		regs.R3 = regs.R31;
		/* 82200AA4h case  403:*/		return 0x82200AA8;
		  /* 82200AA8h */ case  404:  		/* stw R30, <#[R1 + 84]> */
		/* 82200AA8h case  404:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82200AA8h case  404:*/		return 0x82200AAC;
		  /* 82200AACh */ case  405:  		/* li R5, 0 */
		/* 82200AACh case  405:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82200AACh case  405:*/		return 0x82200AB0;
		  /* 82200AB0h */ case  406:  		/* mr R6, R24 */
		/* 82200AB0h case  406:*/		regs.R6 = regs.R24;
		/* 82200AB0h case  406:*/		return 0x82200AB4;
		  /* 82200AB4h */ case  407:  		/* li R7, 0 */
		/* 82200AB4h case  407:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82200AB4h case  407:*/		return 0x82200AB8;
		  /* 82200AB8h */ case  408:  		/* mr R8, R26 */
		/* 82200AB8h case  408:*/		regs.R8 = regs.R26;
		/* 82200AB8h case  408:*/		return 0x82200ABC;
		  /* 82200ABCh */ case  409:  		/* li R9, 0 */
		/* 82200ABCh case  409:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82200ABCh case  409:*/		return 0x82200AC0;
		  /* 82200AC0h */ case  410:  		/* mr R10, R27 */
		/* 82200AC0h case  410:*/		regs.R10 = regs.R27;
		/* 82200AC0h case  410:*/		return 0x82200AC4;
		  /* 82200AC4h */ case  411:  		/* bl -77308 */
		/* 82200AC4h case  411:*/		regs.LR = 0x82200AC8; return 0x821EDCC8;
		/* 82200AC4h case  411:*/		return 0x82200AC8;
		  /* 82200AC8h */ case  412:  		/* mr R5, R3 */
		/* 82200AC8h case  412:*/		regs.R5 = regs.R3;
		/* 82200AC8h case  412:*/		return 0x82200ACC;
		  /* 82200ACCh */ case  413:  		/* mr R4, R28 */
		/* 82200ACCh case  413:*/		regs.R4 = regs.R28;
		/* 82200ACCh case  413:*/		return 0x82200AD0;
		  /* 82200AD0h */ case  414:  		/* mr R3, R31 */
		/* 82200AD0h case  414:*/		regs.R3 = regs.R31;
		/* 82200AD0h case  414:*/		return 0x82200AD4;
		  /* 82200AD4h */ case  415:  		/* bl -73388 */
		/* 82200AD4h case  415:*/		regs.LR = 0x82200AD8; return 0x821EEC28;
		/* 82200AD4h case  415:*/		return 0x82200AD8;
		  /* 82200AD8h */ case  416:  		/* mr R30, R3 */
		/* 82200AD8h case  416:*/		regs.R30 = regs.R3;
		/* 82200AD8h case  416:*/		return 0x82200ADC;
		  /* 82200ADCh */ case  417:  		/* li R5, 16 */
		/* 82200ADCh case  417:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 82200ADCh case  417:*/		return 0x82200AE0;
		  /* 82200AE0h */ case  418:  		/* addi R3, R1, 2840 */
		/* 82200AE0h case  418:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB18);
		/* 82200AE0h case  418:*/		return 0x82200AE4;
		  /* 82200AE4h */ case  419:  		/* mr R4, R29 */
		/* 82200AE4h case  419:*/		regs.R4 = regs.R29;
		/* 82200AE4h case  419:*/		return 0x82200AE8;
		  /* 82200AE8h */ case  420:  		/* bl -62216 */
		/* 82200AE8h case  420:*/		regs.LR = 0x82200AEC; return 0x821F17E0;
		/* 82200AE8h case  420:*/		return 0x82200AEC;
		  /* 82200AECh */ case  421:  		/* mr R4, R29 */
		/* 82200AECh case  421:*/		regs.R4 = regs.R29;
		/* 82200AECh case  421:*/		return 0x82200AF0;
		  /* 82200AF0h */ case  422:  		/* b 1092 */
		/* 82200AF0h case  422:*/		return 0x82200F34;
		/* 82200AF0h case  422:*/		return 0x82200AF4;
	}
	return 0x82200AF4;
} // Block from 82200458h-82200AF4h (423 instructions)

//////////////////////////////////////////////////////
// Block at 82200AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200AF4);
		  /* 82200AF4h */ case    0:  		/* lwz R29, <#[R1 + 3500]> */
		/* 82200AF4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82200AF4h case    0:*/		return 0x82200AF8;
		  /* 82200AF8h */ case    1:  		/* li R5, 9 */
		/* 82200AF8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 82200AF8h case    1:*/		return 0x82200AFC;
		  /* 82200AFCh */ case    2:  		/* addi R3, R1, 392 */
		/* 82200AFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x188);
		/* 82200AFCh case    2:*/		return 0x82200B00;
		  /* 82200B00h */ case    3:  		/* mr R4, R29 */
		/* 82200B00h case    3:*/		regs.R4 = regs.R29;
		/* 82200B00h case    3:*/		return 0x82200B04;
		  /* 82200B04h */ case    4:  		/* bl -42996 */
		/* 82200B04h case    4:*/		regs.LR = 0x82200B08; return 0x821F6310;
		/* 82200B04h case    4:*/		return 0x82200B08;
		  /* 82200B08h */ case    5:  		/* addi R3, R1, 392 */
		/* 82200B08h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x188);
		/* 82200B08h case    5:*/		return 0x82200B0C;
		  /* 82200B0Ch */ case    6:  		/* bl -261292 */
		/* 82200B0Ch case    6:*/		regs.LR = 0x82200B10; return 0x821C0E60;
		/* 82200B0Ch case    6:*/		return 0x82200B10;
		  /* 82200B10h */ case    7:  		/* mr R4, R3 */
		/* 82200B10h case    7:*/		regs.R4 = regs.R3;
		/* 82200B10h case    7:*/		return 0x82200B14;
		  /* 82200B14h */ case    8:  		/* mr R3, R31 */
		/* 82200B14h case    8:*/		regs.R3 = regs.R31;
		/* 82200B14h case    8:*/		return 0x82200B18;
		  /* 82200B18h */ case    9:  		/* bl -59288 */
		/* 82200B18h case    9:*/		regs.LR = 0x82200B1C; return 0x821F2380;
		/* 82200B18h case    9:*/		return 0x82200B1C;
		  /* 82200B1Ch */ case   10:  		/* mr R28, R3 */
		/* 82200B1Ch case   10:*/		regs.R28 = regs.R3;
		/* 82200B1Ch case   10:*/		return 0x82200B20;
		  /* 82200B20h */ case   11:  		/* addi R3, R1, 392 */
		/* 82200B20h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x188);
		/* 82200B20h case   11:*/		return 0x82200B24;
		  /* 82200B24h */ case   12:  		/* bl -261316 */
		/* 82200B24h case   12:*/		regs.LR = 0x82200B28; return 0x821C0E60;
		/* 82200B24h case   12:*/		return 0x82200B28;
		  /* 82200B28h */ case   13:  		/* mr R4, R3 */
		/* 82200B28h case   13:*/		regs.R4 = regs.R3;
		/* 82200B28h case   13:*/		return 0x82200B2C;
		  /* 82200B2Ch */ case   14:  		/* mr R3, R31 */
		/* 82200B2Ch case   14:*/		regs.R3 = regs.R31;
		/* 82200B2Ch case   14:*/		return 0x82200B30;
		  /* 82200B30h */ case   15:  		/* bl -59312 */
		/* 82200B30h case   15:*/		regs.LR = 0x82200B34; return 0x821F2380;
		/* 82200B30h case   15:*/		return 0x82200B34;
		  /* 82200B34h */ case   16:  		/* mr R27, R3 */
		/* 82200B34h case   16:*/		regs.R27 = regs.R3;
		/* 82200B34h case   16:*/		return 0x82200B38;
		  /* 82200B38h */ case   17:  		/* addi R3, R1, 392 */
		/* 82200B38h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x188);
		/* 82200B38h case   17:*/		return 0x82200B3C;
		  /* 82200B3Ch */ case   18:  		/* bl -261340 */
		/* 82200B3Ch case   18:*/		regs.LR = 0x82200B40; return 0x821C0E60;
		/* 82200B3Ch case   18:*/		return 0x82200B40;
		  /* 82200B40h */ case   19:  		/* mr R4, R3 */
		/* 82200B40h case   19:*/		regs.R4 = regs.R3;
		/* 82200B40h case   19:*/		return 0x82200B44;
		  /* 82200B44h */ case   20:  		/* mr R3, R31 */
		/* 82200B44h case   20:*/		regs.R3 = regs.R31;
		/* 82200B44h case   20:*/		return 0x82200B48;
		  /* 82200B48h */ case   21:  		/* bl -59336 */
		/* 82200B48h case   21:*/		regs.LR = 0x82200B4C; return 0x821F2380;
		/* 82200B48h case   21:*/		return 0x82200B4C;
		  /* 82200B4Ch */ case   22:  		/* mr R26, R3 */
		/* 82200B4Ch case   22:*/		regs.R26 = regs.R3;
		/* 82200B4Ch case   22:*/		return 0x82200B50;
		  /* 82200B50h */ case   23:  		/* mr R4, R27 */
		/* 82200B50h case   23:*/		regs.R4 = regs.R27;
		/* 82200B50h case   23:*/		return 0x82200B54;
		  /* 82200B54h */ case   24:  		/* lwz R5, <#[R27 + 12]> */
		/* 82200B54h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 82200B54h case   24:*/		return 0x82200B58;
		  /* 82200B58h */ case   25:  		/* mr R3, R31 */
		/* 82200B58h case   25:*/		regs.R3 = regs.R31;
		/* 82200B58h case   25:*/		return 0x82200B5C;
		  /* 82200B5Ch */ case   26:  		/* bl -588396 */
		/* 82200B5Ch case   26:*/		regs.LR = 0x82200B60; return 0x821710F0;
		/* 82200B5Ch case   26:*/		return 0x82200B60;
		  /* 82200B60h */ case   27:  		/* li R4, 4 */
		/* 82200B60h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82200B60h case   27:*/		return 0x82200B64;
		  /* 82200B64h */ case   28:  		/* mr R27, R3 */
		/* 82200B64h case   28:*/		regs.R27 = regs.R3;
		/* 82200B64h case   28:*/		return 0x82200B68;
		  /* 82200B68h */ case   29:  		/* bl -561320 */
		/* 82200B68h case   29:*/		regs.LR = 0x82200B6C; return 0x82177AC0;
		/* 82200B68h case   29:*/		return 0x82200B6C;
		  /* 82200B6Ch */ case   30:  		/* li R10, 0 */
		/* 82200B6Ch case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82200B6Ch case   30:*/		return 0x82200B70;
		  /* 82200B70h */ case   31:  		/* li R9, 0 */
		/* 82200B70h case   31:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82200B70h case   31:*/		return 0x82200B74;
		  /* 82200B74h */ case   32:  		/* stw R30, <#[R1 + 84]> */
		/* 82200B74h case   32:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82200B74h case   32:*/		return 0x82200B78;
		  /* 82200B78h */ case   33:  		/* mr R8, R26 */
		/* 82200B78h case   33:*/		regs.R8 = regs.R26;
		/* 82200B78h case   33:*/		return 0x82200B7C;
		  /* 82200B7Ch */ case   34:  		/* li R7, 0 */
		/* 82200B7Ch case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82200B7Ch case   34:*/		return 0x82200B80;
		  /* 82200B80h */ case   35:  		/* mr R6, R27 */
		/* 82200B80h case   35:*/		regs.R6 = regs.R27;
		/* 82200B80h case   35:*/		return 0x82200B84;
		  /* 82200B84h */ case   36:  		/* li R5, 0 */
		/* 82200B84h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82200B84h case   36:*/		return 0x82200B88;
		  /* 82200B88h */ case   37:  		/* mr R4, R28 */
		/* 82200B88h case   37:*/		regs.R4 = regs.R28;
		/* 82200B88h case   37:*/		return 0x82200B8C;
		  /* 82200B8Ch */ case   38:  		/* mr R3, R31 */
		/* 82200B8Ch case   38:*/		regs.R3 = regs.R31;
		/* 82200B8Ch case   38:*/		return 0x82200B90;
		  /* 82200B90h */ case   39:  		/* bl -77784 */
		/* 82200B90h case   39:*/		regs.LR = 0x82200B94; return 0x821EDBB8;
		/* 82200B90h case   39:*/		return 0x82200B94;
		  /* 82200B94h */ case   40:  		/* mr R30, R3 */
		/* 82200B94h case   40:*/		regs.R30 = regs.R3;
		/* 82200B94h case   40:*/		return 0x82200B98;
		  /* 82200B98h */ case   41:  		/* li R7, 1 */
		/* 82200B98h case   41:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82200B98h case   41:*/		return 0x82200B9C;
		  /* 82200B9Ch */ case   42:  		/* li R6, 0 */
		/* 82200B9Ch case   42:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82200B9Ch case   42:*/		return 0x82200BA0;
		  /* 82200BA0h */ case   43:  		/* li R5, 3 */
		/* 82200BA0h case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82200BA0h case   43:*/		return 0x82200BA4;
		  /* 82200BA4h */ case   44:  		/* addi R4, R1, 392 */
		/* 82200BA4h case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x188);
		/* 82200BA4h case   44:*/		return 0x82200BA8;
		  /* 82200BA8h */ case   45:  		/* mr R3, R31 */
		/* 82200BA8h case   45:*/		regs.R3 = regs.R31;
		/* 82200BA8h case   45:*/		return 0x82200BAC;
		  /* 82200BACh */ case   46:  		/* bl -59020 */
		/* 82200BACh case   46:*/		regs.LR = 0x82200BB0; return 0x821F2520;
		/* 82200BACh case   46:*/		return 0x82200BB0;
		  /* 82200BB0h */ case   47:  		/* mr R28, R3 */
		/* 82200BB0h case   47:*/		regs.R28 = regs.R3;
		/* 82200BB0h case   47:*/		return 0x82200BB4;
		  /* 82200BB4h */ case   48:  		/* li R7, 1 */
		/* 82200BB4h case   48:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82200BB4h case   48:*/		return 0x82200BB8;
		  /* 82200BB8h */ case   49:  		/* li R6, 0 */
		/* 82200BB8h case   49:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82200BB8h case   49:*/		return 0x82200BBC;
		  /* 82200BBCh */ case   50:  		/* li R5, 3 */
		/* 82200BBCh case   50:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82200BBCh case   50:*/		return 0x82200BC0;
		  /* 82200BC0h */ case   51:  		/* addi R4, R1, 392 */
		/* 82200BC0h case   51:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x188);
		/* 82200BC0h case   51:*/		return 0x82200BC4;
		  /* 82200BC4h */ case   52:  		/* mr R3, R31 */
		/* 82200BC4h case   52:*/		regs.R3 = regs.R31;
		/* 82200BC4h case   52:*/		return 0x82200BC8;
		  /* 82200BC8h */ case   53:  		/* bl -59048 */
		/* 82200BC8h case   53:*/		regs.LR = 0x82200BCC; return 0x821F2520;
		/* 82200BC8h case   53:*/		return 0x82200BCC;
		  /* 82200BCCh */ case   54:  		/* mr R27, R3 */
		/* 82200BCCh case   54:*/		regs.R27 = regs.R3;
		/* 82200BCCh case   54:*/		return 0x82200BD0;
		  /* 82200BD0h */ case   55:  		/* mr R4, R28 */
		/* 82200BD0h case   55:*/		regs.R4 = regs.R28;
		/* 82200BD0h case   55:*/		return 0x82200BD4;
		  /* 82200BD4h */ case   56:  		/* lwz R5, <#[R28 + 12]> */
		/* 82200BD4h case   56:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 82200BD4h case   56:*/		return 0x82200BD8;
		  /* 82200BD8h */ case   57:  		/* mr R3, R31 */
		/* 82200BD8h case   57:*/		regs.R3 = regs.R31;
		/* 82200BD8h case   57:*/		return 0x82200BDC;
		  /* 82200BDCh */ case   58:  		/* bl -588524 */
		/* 82200BDCh case   58:*/		regs.LR = 0x82200BE0; return 0x821710F0;
		/* 82200BDCh case   58:*/		return 0x82200BE0;
		  /* 82200BE0h */ case   59:  		/* mr R26, R3 */
		/* 82200BE0h case   59:*/		regs.R26 = regs.R3;
		/* 82200BE0h case   59:*/		return 0x82200BE4;
		  /* 82200BE4h */ case   60:  		/* mr R4, R27 */
		/* 82200BE4h case   60:*/		regs.R4 = regs.R27;
		/* 82200BE4h case   60:*/		return 0x82200BE8;
		  /* 82200BE8h */ case   61:  		/* lwz R5, <#[R27 + 12]> */
		/* 82200BE8h case   61:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 82200BE8h case   61:*/		return 0x82200BEC;
		  /* 82200BECh */ case   62:  		/* mr R3, R31 */
		/* 82200BECh case   62:*/		regs.R3 = regs.R31;
		/* 82200BECh case   62:*/		return 0x82200BF0;
		  /* 82200BF0h */ case   63:  		/* bl -588544 */
		/* 82200BF0h case   63:*/		regs.LR = 0x82200BF4; return 0x821710F0;
		/* 82200BF0h case   63:*/		return 0x82200BF4;
		  /* 82200BF4h */ case   64:  		/* mr R25, R3 */
		/* 82200BF4h case   64:*/		regs.R25 = regs.R3;
		/* 82200BF4h case   64:*/		return 0x82200BF8;
		  /* 82200BF8h */ case   65:  		/* mr R3, R28 */
		/* 82200BF8h case   65:*/		regs.R3 = regs.R28;
		/* 82200BF8h case   65:*/		return 0x82200BFC;
		  /* 82200BFCh */ case   66:  		/* li R4, 193 */
		/* 82200BFCh case   66:*/		cpu::op::li<0>(regs,&regs.R4,0xC1);
		/* 82200BFCh case   66:*/		return 0x82200C00;
		  /* 82200C00h */ case   67:  		/* bl -436752 */
		/* 82200C00h case   67:*/		regs.LR = 0x82200C04; return 0x821961F0;
		/* 82200C00h case   67:*/		return 0x82200C04;
		  /* 82200C04h */ case   68:  		/* mr R3, R27 */
		/* 82200C04h case   68:*/		regs.R3 = regs.R27;
		/* 82200C04h case   68:*/		return 0x82200C08;
		  /* 82200C08h */ case   69:  		/* li R4, 218 */
		/* 82200C08h case   69:*/		cpu::op::li<0>(regs,&regs.R4,0xDA);
		/* 82200C08h case   69:*/		return 0x82200C0C;
		  /* 82200C0Ch */ case   70:  		/* bl -436764 */
		/* 82200C0Ch case   70:*/		regs.LR = 0x82200C10; return 0x821961F0;
		/* 82200C0Ch case   70:*/		return 0x82200C10;
		  /* 82200C10h */ case   71:  		/* mr R5, R27 */
		/* 82200C10h case   71:*/		regs.R5 = regs.R27;
		/* 82200C10h case   71:*/		return 0x82200C14;
		  /* 82200C14h */ case   72:  		/* mr R4, R28 */
		/* 82200C14h case   72:*/		regs.R4 = regs.R28;
		/* 82200C14h case   72:*/		return 0x82200C18;
		  /* 82200C18h */ case   73:  		/* mr R3, R31 */
		/* 82200C18h case   73:*/		regs.R3 = regs.R31;
		/* 82200C18h case   73:*/		return 0x82200C1C;
		  /* 82200C1Ch */ case   74:  		/* bl -76260 */
		/* 82200C1Ch case   74:*/		regs.LR = 0x82200C20; return 0x821EE238;
		/* 82200C1Ch case   74:*/		return 0x82200C20;
		  /* 82200C20h */ case   75:  		/* mr R28, R3 */
		/* 82200C20h case   75:*/		regs.R28 = regs.R3;
		/* 82200C20h case   75:*/		return 0x82200C24;
		  /* 82200C24h */ case   76:  		/* mr R3, R26 */
		/* 82200C24h case   76:*/		regs.R3 = regs.R26;
		/* 82200C24h case   76:*/		return 0x82200C28;
		  /* 82200C28h */ case   77:  		/* li R4, 218 */
		/* 82200C28h case   77:*/		cpu::op::li<0>(regs,&regs.R4,0xDA);
		/* 82200C28h case   77:*/		return 0x82200C2C;
		  /* 82200C2Ch */ case   78:  		/* bl -436796 */
		/* 82200C2Ch case   78:*/		regs.LR = 0x82200C30; return 0x821961F0;
		/* 82200C2Ch case   78:*/		return 0x82200C30;
		  /* 82200C30h */ case   79:  		/* mr R3, R25 */
		/* 82200C30h case   79:*/		regs.R3 = regs.R25;
		/* 82200C30h case   79:*/		return 0x82200C34;
		  /* 82200C34h */ case   80:  		/* li R4, 193 */
		/* 82200C34h case   80:*/		cpu::op::li<0>(regs,&regs.R4,0xC1);
		/* 82200C34h case   80:*/		return 0x82200C38;
		  /* 82200C38h */ case   81:  		/* bl -436808 */
		/* 82200C38h case   81:*/		regs.LR = 0x82200C3C; return 0x821961F0;
		/* 82200C38h case   81:*/		return 0x82200C3C;
		  /* 82200C3Ch */ case   82:  		/* mr R5, R25 */
		/* 82200C3Ch case   82:*/		regs.R5 = regs.R25;
		/* 82200C3Ch case   82:*/		return 0x82200C40;
		  /* 82200C40h */ case   83:  		/* mr R4, R26 */
		/* 82200C40h case   83:*/		regs.R4 = regs.R26;
		/* 82200C40h case   83:*/		return 0x82200C44;
		  /* 82200C44h */ case   84:  		/* mr R3, R31 */
		/* 82200C44h case   84:*/		regs.R3 = regs.R31;
		/* 82200C44h case   84:*/		return 0x82200C48;
		  /* 82200C48h */ case   85:  		/* bl -76304 */
		/* 82200C48h case   85:*/		regs.LR = 0x82200C4C; return 0x821EE238;
		/* 82200C48h case   85:*/		return 0x82200C4C;
		  /* 82200C4Ch */ case   86:  		/* mr R11, R3 */
		/* 82200C4Ch case   86:*/		regs.R11 = regs.R3;
		/* 82200C4Ch case   86:*/		return 0x82200C50;
		  /* 82200C50h */ case   87:  		/* li R7, 228 */
		/* 82200C50h case   87:*/		cpu::op::li<0>(regs,&regs.R7,0xE4);
		/* 82200C50h case   87:*/		return 0x82200C54;
		  /* 82200C54h */ case   88:  		/* li R6, 4 */
		/* 82200C54h case   88:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82200C54h case   88:*/		return 0x82200C58;
		  /* 82200C58h */ case   89:  		/* mr R3, R31 */
		/* 82200C58h case   89:*/		regs.R3 = regs.R31;
		/* 82200C58h case   89:*/		return 0x82200C5C;
		  /* 82200C5Ch */ case   90:  		/* mr R4, R11 */
		/* 82200C5Ch case   90:*/		regs.R4 = regs.R11;
		/* 82200C5Ch case   90:*/		return 0x82200C60;
		  /* 82200C60h */ case   91:  		/* lwz R10, <#[R11 + 8]> */
		/* 82200C60h case   91:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82200C60h case   91:*/		return 0x82200C64;
		  /* 82200C64h */ case   92:  		/* rlwinm R5, R10, 18, 29, 31 */
		/* 82200C64h case   92:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R5,regs.R10);
		/* 82200C64h case   92:*/		return 0x82200C68;
		  /* 82200C68h */ case   93:  		/* bl 136664 */
		/* 82200C68h case   93:*/		regs.LR = 0x82200C6C; return 0x82222240;
		/* 82200C68h case   93:*/		return 0x82200C6C;
		  /* 82200C6Ch */ case   94:  		/* mr R5, R3 */
		/* 82200C6Ch case   94:*/		regs.R5 = regs.R3;
		/* 82200C6Ch case   94:*/		return 0x82200C70;
		  /* 82200C70h */ case   95:  		/* mr R4, R28 */
		/* 82200C70h case   95:*/		regs.R4 = regs.R28;
		/* 82200C70h case   95:*/		return 0x82200C74;
		  /* 82200C74h */ case   96:  		/* mr R3, R31 */
		/* 82200C74h case   96:*/		regs.R3 = regs.R31;
		/* 82200C74h case   96:*/		return 0x82200C78;
		  /* 82200C78h */ case   97:  		/* bl -70776 */
		/* 82200C78h case   97:*/		regs.LR = 0x82200C7C; return 0x821EF800;
		/* 82200C78h case   97:*/		return 0x82200C7C;
		  /* 82200C7Ch */ case   98:  		/* mr R5, R3 */
		/* 82200C7Ch case   98:*/		regs.R5 = regs.R3;
		/* 82200C7Ch case   98:*/		return 0x82200C80;
		  /* 82200C80h */ case   99:  		/* mr R4, R30 */
		/* 82200C80h case   99:*/		regs.R4 = regs.R30;
		/* 82200C80h case   99:*/		return 0x82200C84;
		  /* 82200C84h */ case  100:  		/* mr R3, R31 */
		/* 82200C84h case  100:*/		regs.R3 = regs.R31;
		/* 82200C84h case  100:*/		return 0x82200C88;
		  /* 82200C88h */ case  101:  		/* bl -67848 */
		/* 82200C88h case  101:*/		regs.LR = 0x82200C8C; return 0x821F0380;
		/* 82200C88h case  101:*/		return 0x82200C8C;
		  /* 82200C8Ch */ case  102:  		/* mr R30, R3 */
		/* 82200C8Ch case  102:*/		regs.R30 = regs.R3;
		/* 82200C8Ch case  102:*/		return 0x82200C90;
		  /* 82200C90h */ case  103:  		/* li R5, 9 */
		/* 82200C90h case  103:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 82200C90h case  103:*/		return 0x82200C94;
		  /* 82200C94h */ case  104:  		/* addi R3, R1, 3128 */
		/* 82200C94h case  104:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC38);
		/* 82200C94h case  104:*/		return 0x82200C98;
		  /* 82200C98h */ case  105:  		/* b -436 */
		/* 82200C98h case  105:*/		return 0x82200AE4;
		/* 82200C98h case  105:*/		return 0x82200C9C;
	}
	return 0x82200C9C;
} // Block from 82200AF4h-82200C9Ch (106 instructions)

//////////////////////////////////////////////////////
// Block at 82200C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82200C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82200C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82200C9C);
		  /* 82200C9Ch */ case    0:  		/* lwz R30, <#[R1 + 3500]> */
		/* 82200C9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000DAC) );
		/* 82200C9Ch case    0:*/		return 0x82200CA0;
		  /* 82200CA0h */ case    1:  		/* li R5, 4 */
		/* 82200CA0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82200CA0h case    1:*/		return 0x82200CA4;
		  /* 82200CA4h */ case    2:  		/* addi R3, R1, 1528 */
		/* 82200CA4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5F8);
		/* 82200CA4h case    2:*/		return 0x82200CA8;
		  /* 82200CA8h */ case    3:  		/* mr R4, R30 */
		/* 82200CA8h case    3:*/		regs.R4 = regs.R30;
		/* 82200CA8h case    3:*/		return 0x82200CAC;
		  /* 82200CACh */ case    4:  		/* bl -43420 */
		/* 82200CACh case    4:*/		regs.LR = 0x82200CB0; return 0x821F6310;
		/* 82200CACh case    4:*/		return 0x82200CB0;
		  /* 82200CB0h */ case    5:  		/* li R7, 1 */
		/* 82200CB0h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82200CB0h case    5:*/		return 0x82200CB4;
		  /* 82200CB4h */ case    6:  		/* li R6, 0 */
		/* 82200CB4h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82200CB4h case    6:*/		return 0x82200CB8;
		  /* 82200CB8h */ case    7:  		/* li R5, 2 */
		/* 82200CB8h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82200CB8h case    7:*/		return 0x82200CBC;
		  /* 82200CBCh */ case    8:  		/* addi R4, R1, 1528 */
		/* 82200CBCh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5F8);
		/* 82200CBCh case    8:*/		return 0x82200CC0;
		  /* 82200CC0h */ case    9:  		/* mr R3, R31 */
		/* 82200CC0h case    9:*/		regs.R3 = regs.R31;
		/* 82200CC0h case    9:*/		return 0x82200CC4;
		  /* 82200CC4h */ case   10:  		/* bl -59300 */
		/* 82200CC4h case   10:*/		regs.LR = 0x82200CC8; return 0x821F2520;
		/* 82200CC4h case   10:*/		return 0x82200CC8;
		  /* 82200CC8h */ case   11:  		/* mr R29, R3 */
		/* 82200CC8h case   11:*/		regs.R29 = regs.R3;
		/* 82200CC8h case   11:*/		return 0x82200CCC;
		  /* 82200CCCh */ case   12:  		/* li R7, 1 */
		/* 82200CCCh case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82200CCCh case   12:*/		return 0x82200CD0;
		  /* 82200CD0h */ case   13:  		/* li R6, 0 */
		/* 82200CD0h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82200CD0h case   13:*/		return 0x82200CD4;
		  /* 82200CD4h */ case   14:  		/* li R5, 2 */
		/* 82200CD4h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82200CD4h case   14:*/		return 0x82200CD8;
		  /* 82200CD8h */ case   15:  		/* addi R4, R1, 1528 */
		/* 82200CD8h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5F8);
		/* 82200CD8h case   15:*/		return 0x82200CDC;
		  /* 82200CDCh */ case   16:  		/* mr R3, R31 */
		/* 82200CDCh case   16:*/		regs.R3 = regs.R31;
		/* 82200CDCh case   16:*/		return 0x82200CE0;
		  /* 82200CE0h */ case   17:  		/* bl -59328 */
		/* 82200CE0h case   17:*/		regs.LR = 0x82200CE4; return 0x821F2520;
		/* 82200CE0h case   17:*/		return 0x82200CE4;
		  /* 82200CE4h */ case   18:  		/* mr R5, R3 */
		/* 82200CE4h case   18:*/		regs.R5 = regs.R3;
		/* 82200CE4h case   18:*/		return 0x82200CE8;
		  /* 82200CE8h */ case   19:  		/* mr R4, R29 */
		/* 82200CE8h case   19:*/		regs.R4 = regs.R29;
		/* 82200CE8h case   19:*/		return 0x82200CEC;
		  /* 82200CECh */ case   20:  		/* mr R3, R31 */
		/* 82200CECh case   20:*/		regs.R3 = regs.R31;
		/* 82200CECh case   20:*/		return 0x82200CF0;
		  /* 82200CF0h */ case   21:  		/* bl -76472 */
		/* 82200CF0h case   21:*/		regs.LR = 0x82200CF4; return 0x821EE238;
		/* 82200CF0h case   21:*/		return 0x82200CF4;
		  /* 82200CF4h */ case   22:  		/* mr R29, R3 */
		/* 82200CF4h case   22:*/		regs.R29 = regs.R3;
		/* 82200CF4h case   22:*/		return 0x82200CF8;
		  /* 82200CF8h */ case   23:  		/* mr R4, R3 */
		/* 82200CF8h case   23:*/		regs.R4 = regs.R3;
		/* 82200CF8h case   23:*/		return 0x82200CFC;
		  /* 82200CFCh */ case   24:  		/* li R5, 1 */
		/* 82200CFCh case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82200CFCh case   24:*/		return 0x82200D00;
		  /* 82200D00h */ case   25:  		/* mr R3, R31 */
		/* 82200D00h case   25:*/		regs.R3 = regs.R31;
		/* 82200D00h case   25:*/		return 0x82200D04;
		  /* 82200D04h */ case   26:  		/* bl -560116 */
		/* 82200D04h case   26:*/		regs.LR = 0x82200D08; return 0x82178110;
		/* 82200D04h case   26:*/		return 0x82200D08;
		  /* 82200D08h */ case   27:  		/* mr R11, R3 */
		/* 82200D08h case   27:*/		regs.R11 = regs.R3;
		/* 82200D08h case   27:*/		return 0x82200D0C;
		  /* 82200D0Ch */ case   28:  		/* mr R3, R31 */
		/* 82200D0Ch case   28:*/		regs.R3 = regs.R31;
		/* 82200D0Ch case   28:*/		return 0x82200D10;
		  /* 82200D10h */ case   29:  		/* mr R4, R11 */
		/* 82200D10h case   29:*/		regs.R4 = regs.R11;
		/* 82200D10h case   29:*/		return 0x82200D14;
		  /* 82200D14h */ case   30:  		/* lwz R5, <#[R11 + 12]> */
		/* 82200D14h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 82200D14h case   30:*/		return 0x82200D18;
		  /* 82200D18h */ case   31:  		/* bl -588840 */
		/* 82200D18h case   31:*/		regs.LR = 0x82200D1C; return 0x821710F0;
		/* 82200D18h case   31:*/		return 0x82200D1C;
		  /* 82200D1Ch */ case   32:  		/* li R4, 4 */
		/* 82200D1Ch case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82200D1Ch case   32:*/		return 0x82200D20;
		  /* 82200D20h */ case   33:  		/* mr R28, R3 */
		/* 82200D20h case   33:*/		regs.R28 = regs.R3;
		/* 82200D20h case   33:*/		return 0x82200D24;
		  /* 82200D24h */ case   34:  		/* bl -561764 */
		/* 82200D24h case   34:*/		regs.LR = 0x82200D28; return 0x82177AC0;
		/* 82200D24h case   34:*/		return 0x82200D28;
		  /* 82200D28h */ case   35:  		/* li R5, 0 */
		/* 82200D28h case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82200D28h case   35:*/		return 0x82200D2C;
		  /* 82200D2Ch */ case   36:  		/* mr R4, R29 */
		/* 82200D2Ch case   36:*/		regs.R4 = regs.R29;
		/* 82200D2Ch case   36:*/		return 0x82200D30;
		  /* 82200D30h */ case   37:  		/* mr R3, R31 */
		/* 82200D30h case   37:*/		regs.R3 = regs.R31;
		/* 82200D30h case   37:*/		return 0x82200D34;
		  /* 82200D34h */ case   38:  		/* bl -560164 */
		/* 82200D34h case   38:*/		regs.LR = 0x82200D38; return 0x82178110;
		/* 82200D34h case   38:*/		return 0x82200D38;
		  /* 82200D38h */ case   39:  		/* mr R4, R3 */
		/* 82200D38h case   39:*/		regs.R4 = regs.R3;
		/* 82200D38h case   39:*/		return 0x82200D3C;
		  /* 82200D3Ch */ case   40:  		/* mr R3, R31 */
		/* 82200D3Ch case   40:*/		regs.R3 = regs.R31;
		/* 82200D3Ch case   40:*/		return 0x82200D40;
		  /* 82200D40h */ case   41:  		/* mr R5, R28 */
		/* 82200D40h case   41:*/		regs.R5 = regs.R28;
		/* 82200D40h case   41:*/		return 0x82200D44;
		  /* 82200D44h */ case   42:  		/* bl -76796 */
		/* 82200D44h case   42:*/		regs.LR = 0x82200D48; return 0x821EE148;
		/* 82200D44h case   42:*/		return 0x82200D48;
		  /* 82200D48h */ case   43:  		/* mr R29, R3 */
		/* 82200D48h case   43:*/		regs.R29 = regs.R3;
		/* 82200D48h case   43:*/		return 0x82200D4C;
		  /* 82200D4Ch */ case   44:  		/* mr R4, R30 */
		/* 82200D4Ch case   44:*/		regs.R4 = regs.R30;
		/* 82200D4Ch case   44:*/		return 0x82200D50;
		  /* 82200D50h */ case   45:  		/* li R5, 4 */
		/* 82200D50h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82200D50h case   45:*/		return 0x82200D54;
		  /* 82200D54h */ case   46:  		/* addi R3, R1, 2856 */
		/* 82200D54h case   46:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB28);
		/* 82200D54h case   46:*/		return 0x82200D58;
		  /* 82200D58h */ case   47:  		/* bl -62840 */
		/* 82200D58h case   47:*/		regs.LR = 0x82200D5C; return 0x821F17E0;
		/* 82200D58h case   47:*/		return 0x82200D5C;
		  /* 82200D5Ch */ case   48:  		/* mr R5, R29 */
		/* 82200D5Ch case   48:*/		regs.R5 = regs.R29;
		/* 82200D5Ch case   48:*/		return 0x82200D60;
		  /* 82200D60h */ case   49:  		/* mr R4, R30 */
		/* 82200D60h case   49:*/		regs.R4 = regs.R30;
		/* 82200D60h case   49:*/		return 0x82200D64;
		  /* 82200D64h */ case   50:  		/* b 468 */
		/* 82200D64h case   50:*/		return 0x82200F38;
		/* 82200D64h case   50:*/		return 0x82200D68;
	}
	return 0x82200D68;
} // Block from 82200C9Ch-82200D68h (51 instructions)

