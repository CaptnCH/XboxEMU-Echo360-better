#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 820B568Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B568C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B568C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B568C);
		  /* 820B568Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 820B568Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820B568Ch case    0:*/		return 0x820B5690;
		  /* 820B5690h */ case    1:  		/* lis R4, 9345 */
		/* 820B5690h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B5690h case    1:*/		return 0x820B5694;
		  /* 820B5694h */ case    2:  		/* mr R25, R18 */
		/* 820B5694h case    2:*/		regs.R25 = regs.R18;
		/* 820B5694h case    2:*/		return 0x820B5698;
		  /* 820B5698h */ case    3:  		/* lwz R24, <#[R11 + 28]> */
		/* 820B5698h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x0000001C) );
		/* 820B5698h case    3:*/		return 0x820B569C;
		  /* 820B569Ch */ case    4:  		/* rlwinm R27, R24, 2, 0, 29 */
		/* 820B569Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R24);
		/* 820B569Ch case    4:*/		return 0x820B56A0;
		  /* 820B56A0h */ case    5:  		/* mr R3, R27 */
		/* 820B56A0h case    5:*/		regs.R3 = regs.R27;
		/* 820B56A0h case    5:*/		return 0x820B56A4;
		  /* 820B56A4h */ case    6:  		/* bl -185508 */
		/* 820B56A4h case    6:*/		regs.LR = 0x820B56A8; return 0x82088200;
		/* 820B56A4h case    6:*/		return 0x820B56A8;
		  /* 820B56A8h */ case    7:  		/* or. R17, R3, R3 */
		/* 820B56A8h case    7:*/		cpu::op::or<1>(regs,&regs.R17,regs.R3,regs.R3);
		/* 820B56A8h case    7:*/		return 0x820B56AC;
		  /* 820B56ACh */ case    8:  		/* bc 12, CR0_EQ, 2508 */
		/* 820B56ACh case    8:*/		if ( regs.CR[0].eq ) { return 0x820B6078;  }
		/* 820B56ACh case    8:*/		return 0x820B56B0;
		  /* 820B56B0h */ case    9:  		/* lis R4, 9345 */
		/* 820B56B0h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B56B0h case    9:*/		return 0x820B56B4;
		  /* 820B56B4h */ case   10:  		/* mr R3, R27 */
		/* 820B56B4h case   10:*/		regs.R3 = regs.R27;
		/* 820B56B4h case   10:*/		return 0x820B56B8;
		  /* 820B56B8h */ case   11:  		/* bl -185528 */
		/* 820B56B8h case   11:*/		regs.LR = 0x820B56BC; return 0x82088200;
		/* 820B56B8h case   11:*/		return 0x820B56BC;
		  /* 820B56BCh */ case   12:  		/* or. R15, R3, R3 */
		/* 820B56BCh case   12:*/		cpu::op::or<1>(regs,&regs.R15,regs.R3,regs.R3);
		/* 820B56BCh case   12:*/		return 0x820B56C0;
		  /* 820B56C0h */ case   13:  		/* bc 12, CR0_EQ, 2488 */
		/* 820B56C0h case   13:*/		if ( regs.CR[0].eq ) { return 0x820B6078;  }
		/* 820B56C0h case   13:*/		return 0x820B56C4;
		  /* 820B56C4h */ case   14:  		/* lis R4, 9345 */
		/* 820B56C4h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B56C4h case   14:*/		return 0x820B56C8;
		  /* 820B56C8h */ case   15:  		/* mr R3, R27 */
		/* 820B56C8h case   15:*/		regs.R3 = regs.R27;
		/* 820B56C8h case   15:*/		return 0x820B56CC;
		  /* 820B56CCh */ case   16:  		/* bl -185548 */
		/* 820B56CCh case   16:*/		regs.LR = 0x820B56D0; return 0x82088200;
		/* 820B56CCh case   16:*/		return 0x820B56D0;
		  /* 820B56D0h */ case   17:  		/* or. R26, R3, R3 */
		/* 820B56D0h case   17:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 820B56D0h case   17:*/		return 0x820B56D4;
		  /* 820B56D4h */ case   18:  		/* stw R26, <#[R1 + 140]> */
		/* 820B56D4h case   18:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B56D4h case   18:*/		return 0x820B56D8;
		  /* 820B56D8h */ case   19:  		/* bc 12, CR0_EQ, 2464 */
		/* 820B56D8h case   19:*/		if ( regs.CR[0].eq ) { return 0x820B6078;  }
		/* 820B56D8h case   19:*/		return 0x820B56DC;
		  /* 820B56DCh */ case   20:  		/* mr R5, R27 */
		/* 820B56DCh case   20:*/		regs.R5 = regs.R27;
		/* 820B56DCh case   20:*/		return 0x820B56E0;
		  /* 820B56E0h */ case   21:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B56E0h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B56E0h case   21:*/		return 0x820B56E4;
		  /* 820B56E4h */ case   22:  		/* mr R3, R17 */
		/* 820B56E4h case   22:*/		regs.R3 = regs.R17;
		/* 820B56E4h case   22:*/		return 0x820B56E8;
		  /* 820B56E8h */ case   23:  		/* bl -146744 */
		/* 820B56E8h case   23:*/		regs.LR = 0x820B56EC; return 0x820919B0;
		/* 820B56E8h case   23:*/		return 0x820B56EC;
		  /* 820B56ECh */ case   24:  		/* cmpwi CR6, R29, 0 */
		/* 820B56ECh case   24:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820B56ECh case   24:*/		return 0x820B56F0;
		  /* 820B56F0h */ case   25:  		/* bc 12, CR6_EQ, 912 */
		/* 820B56F0h case   25:*/		if ( regs.CR[6].eq ) { return 0x820B5A80;  }
		/* 820B56F0h case   25:*/		return 0x820B56F4;
		  /* 820B56F4h */ case   26:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B56F4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B56F4h case   26:*/		return 0x820B56F8;
		  /* 820B56F8h */ case   27:  		/* lwz R10, <#[R11 + 52]> */
		/* 820B56F8h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000034) );
		/* 820B56F8h case   27:*/		return 0x820B56FC;
		  /* 820B56FCh */ case   28:  		/* lwz R26, <#[R11 + 12]> */
		/* 820B56FCh case   28:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B56FCh case   28:*/		return 0x820B5700;
		  /* 820B5700h */ case   29:  		/* cmplwi CR6, R10, 0 */
		/* 820B5700h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820B5700h case   29:*/		return 0x820B5704;
		  /* 820B5704h */ case   30:  		/* bc 4, CR6_EQ, 52 */
		/* 820B5704h case   30:*/		if ( !regs.CR[6].eq ) { return 0x820B5738;  }
		/* 820B5704h case   30:*/		return 0x820B5708;
		  /* 820B5708h */ case   31:  		/* cmpwi CR6, R28, 0 */
		/* 820B5708h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820B5708h case   31:*/		return 0x820B570C;
		  /* 820B570Ch */ case   32:  		/* bc 12, CR6_EQ, 32 */
		/* 820B570Ch case   32:*/		if ( regs.CR[6].eq ) { return 0x820B572C;  }
		/* 820B570Ch case   32:*/		return 0x820B5710;
		  /* 820B5710h */ case   33:  		/* lwz R11, <#[R31 + 60]> */
		/* 820B5710h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820B5710h case   33:*/		return 0x820B5714;
		  /* 820B5714h */ case   34:  		/* addi R11, R11, 1 */
		/* 820B5714h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820B5714h case   34:*/		return 0x820B5718;
		  /* 820B5718h */ case   35:  		/* stw R11, <#[R31 + 60]> */
		/* 820B5718h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820B5718h case   35:*/		return 0x820B571C;
		  /* 820B571Ch */ case   36:  		/* b 28 */
		/* 820B571Ch case   36:*/		return 0x820B5738;
		/* 820B571Ch case   36:*/		return 0x820B5720;
	}
	return 0x820B5720;
} // Block from 820B568Ch-820B5720h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820B5720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5720);
		  /* 820B5720h */ case    0:  		/* lwz R10, <#[R31 + 64]> */
		/* 820B5720h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 820B5720h case    0:*/		return 0x820B5724;
		  /* 820B5724h */ case    1:  		/* lwz R11, <#[R11 + 88]> */
		/* 820B5724h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 820B5724h case    1:*/		return 0x820B5728;
		  /* 820B5728h */ case    2:  		/* b -224 */
		/* 820B5728h case    2:*/		return 0x820B5648;
		/* 820B5728h case    2:*/		return 0x820B572C;
	}
	return 0x820B572C;
} // Block from 820B5720h-820B572Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B572Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B572C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B572C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B572C);
		  /* 820B572Ch */ case    0:  		/* lwz R11, <#[R31 + 64]> */
		/* 820B572Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 820B572Ch case    0:*/		return 0x820B5730;
		  /* 820B5730h */ case    1:  		/* addi R11, R11, 1 */
		/* 820B5730h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820B5730h case    1:*/		return 0x820B5734;
		  /* 820B5734h */ case    2:  		/* stw R11, <#[R31 + 64]> */
		/* 820B5734h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 820B5734h case    2:*/		return 0x820B5738;
	}
	return 0x820B5738;
} // Block from 820B572Ch-820B5738h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B5738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5738);
		  /* 820B5738h */ case    0:  		/* stw R19, <#[R1 + 136]> */
		/* 820B5738h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000088) );
		/* 820B5738h case    0:*/		return 0x820B573C;
		  /* 820B573Ch */ case    1:  		/* lis R5, 4336 */
		/* 820B573Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x10F0);
		/* 820B573Ch case    1:*/		return 0x820B5740;
		  /* 820B5740h */ case    2:  		/* li R9, 0 */
		/* 820B5740h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B5740h case    2:*/		return 0x820B5744;
		  /* 820B5744h */ case    3:  		/* li R8, 0 */
		/* 820B5744h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B5744h case    3:*/		return 0x820B5748;
		  /* 820B5748h */ case    4:  		/* addi R7, R1, 128 */
		/* 820B5748h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820B5748h case    4:*/		return 0x820B574C;
		  /* 820B574Ch */ case    5:  		/* addi R6, R1, 136 */
		/* 820B574Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x88);
		/* 820B574Ch case    5:*/		return 0x820B5750;
		  /* 820B5750h */ case    6:  		/* ori R5, R5, 1 */
		/* 820B5750h case    6:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B5750h case    6:*/		return 0x820B5754;
		  /* 820B5754h */ case    7:  		/* mr R4, R14 */
		/* 820B5754h case    7:*/		regs.R4 = regs.R14;
		/* 820B5754h case    7:*/		return 0x820B5758;
		  /* 820B5758h */ case    8:  		/* mr R3, R31 */
		/* 820B5758h case    8:*/		regs.R3 = regs.R31;
		/* 820B5758h case    8:*/		return 0x820B575C;
		  /* 820B575Ch */ case    9:  		/* bl -19540 */
		/* 820B575Ch case    9:*/		regs.LR = 0x820B5760; return 0x820B0B08;
		/* 820B575Ch case    9:*/		return 0x820B5760;
		  /* 820B5760h */ case   10:  		/* or. R30, R3, R3 */
		/* 820B5760h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5760h case   10:*/		return 0x820B5764;
		  /* 820B5764h */ case   11:  		/* bc 12, CR0_LT, 2332 */
		/* 820B5764h case   11:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5764h case   11:*/		return 0x820B5768;
		  /* 820B5768h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B5768h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5768h case   12:*/		return 0x820B576C;
		  /* 820B576Ch */ case   13:  		/* lwz R10, <#[R11 + 52]> */
		/* 820B576Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000034) );
		/* 820B576Ch case   13:*/		return 0x820B5770;
		  /* 820B5770h */ case   14:  		/* cmplwi CR6, R10, 0 */
		/* 820B5770h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820B5770h case   14:*/		return 0x820B5774;
		  /* 820B5774h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 820B5774h case   15:*/		if ( regs.CR[6].eq ) { return 0x820B5780;  }
		/* 820B5774h case   15:*/		return 0x820B5778;
		  /* 820B5778h */ case   16:  		/* lwz R10, <#[R11 + 144]> */
		/* 820B5778h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000090) );
		/* 820B5778h case   16:*/		return 0x820B577C;
		  /* 820B577Ch */ case   17:  		/* b 8 */
		/* 820B577Ch case   17:*/		return 0x820B5784;
		/* 820B577Ch case   17:*/		return 0x820B5780;
	}
	return 0x820B5780;
} // Block from 820B5738h-820B5780h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820B5780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5780);
		  /* 820B5780h */ case    0:  		/* lwz R10, <#[R11 + 160]> */
		/* 820B5780h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x000000A0) );
		/* 820B5780h case    0:*/		return 0x820B5784;
	}
	return 0x820B5784;
} // Block from 820B5780h-820B5784h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B5784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5784);
		  /* 820B5784h */ case    0:  		/* lwz R9, <#[R1 + 136]> */
		/* 820B5784h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 820B5784h case    0:*/		return 0x820B5788;
		  /* 820B5788h */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 820B5788h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 820B5788h case    1:*/		return 0x820B578C;
		  /* 820B578Ch */ case    2:  		/* lwz R11, <#[R11 + 20]> */
		/* 820B578Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820B578Ch case    2:*/		return 0x820B5790;
		  /* 820B5790h */ case    3:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B5790h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B5790h case    3:*/		return 0x820B5794;
		  /* 820B5794h */ case    4:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820B5794h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820B5794h case    4:*/		return 0x820B5798;
		  /* 820B5798h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 820B5798h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820B5798h case    5:*/		return 0x820B579C;
		  /* 820B579Ch */ case    6:  		/* bc 12, CR6_EQ, 116 */
		/* 820B579Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x820B5810;  }
		/* 820B579Ch case    6:*/		return 0x820B57A0;
		  /* 820B57A0h */ case    7:  		/* lwz R11, <#[R1 + 136]> */
		/* 820B57A0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820B57A0h case    7:*/		return 0x820B57A4;
		  /* 820B57A4h */ case    8:  		/* mr R5, R17 */
		/* 820B57A4h case    8:*/		regs.R5 = regs.R17;
		/* 820B57A4h case    8:*/		return 0x820B57A8;
		  /* 820B57A8h */ case    9:  		/* stw R20, <#[R31 + 52]> */
		/* 820B57A8h case    9:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000034) );
		/* 820B57A8h case    9:*/		return 0x820B57AC;
		  /* 820B57ACh */ case   10:  		/* mr R4, R23 */
		/* 820B57ACh case   10:*/		regs.R4 = regs.R23;
		/* 820B57ACh case   10:*/		return 0x820B57B0;
		  /* 820B57B0h */ case   11:  		/* mr R3, R31 */
		/* 820B57B0h case   11:*/		regs.R3 = regs.R31;
		/* 820B57B0h case   11:*/		return 0x820B57B4;
		  /* 820B57B4h */ case   12:  		/* stw R11, <#[R31 + 48]> */
		/* 820B57B4h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B57B4h case   12:*/		return 0x820B57B8;
		  /* 820B57B8h */ case   13:  		/* bl 41704 */
		/* 820B57B8h case   13:*/		regs.LR = 0x820B57BC; return 0x820BFAA0;
		/* 820B57B8h case   13:*/		return 0x820B57BC;
		  /* 820B57BCh */ case   14:  		/* or. R30, R3, R3 */
		/* 820B57BCh case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B57BCh case   14:*/		return 0x820B57C0;
		  /* 820B57C0h */ case   15:  		/* bc 12, CR0_LT, 2240 */
		/* 820B57C0h case   15:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B57C0h case   15:*/		return 0x820B57C4;
		  /* 820B57C4h */ case   16:  		/* mr R5, R27 */
		/* 820B57C4h case   16:*/		regs.R5 = regs.R27;
		/* 820B57C4h case   16:*/		return 0x820B57C8;
		  /* 820B57C8h */ case   17:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B57C8h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B57C8h case   17:*/		return 0x820B57CC;
		  /* 820B57CCh */ case   18:  		/* mr R3, R15 */
		/* 820B57CCh case   18:*/		regs.R3 = regs.R15;
		/* 820B57CCh case   18:*/		return 0x820B57D0;
		  /* 820B57D0h */ case   19:  		/* bl -146976 */
		/* 820B57D0h case   19:*/		regs.LR = 0x820B57D4; return 0x820919B0;
		/* 820B57D0h case   19:*/		return 0x820B57D4;
		  /* 820B57D4h */ case   20:  		/* mr R5, R27 */
		/* 820B57D4h case   20:*/		regs.R5 = regs.R27;
		/* 820B57D4h case   20:*/		return 0x820B57D8;
		  /* 820B57D8h */ case   21:  		/* mr R4, R17 */
		/* 820B57D8h case   21:*/		regs.R4 = regs.R17;
		/* 820B57D8h case   21:*/		return 0x820B57DC;
		  /* 820B57DCh */ case   22:  		/* lwz R3, <#[R31 + 24]> */
		/* 820B57DCh case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 820B57DCh case   22:*/		return 0x820B57E0;
		  /* 820B57E0h */ case   23:  		/* bl -146992 */
		/* 820B57E0h case   23:*/		regs.LR = 0x820B57E4; return 0x820919B0;
		/* 820B57E0h case   23:*/		return 0x820B57E4;
		  /* 820B57E4h */ case   24:  		/* lwz R11, <#[R1 + 164]> */
		/* 820B57E4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B57E4h case   24:*/		return 0x820B57E8;
		  /* 820B57E8h */ case   25:  		/* lwz R10, <#[R1 + 168]> */
		/* 820B57E8h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B57E8h case   25:*/		return 0x820B57EC;
		  /* 820B57ECh */ case   26:  		/* stw R11, <#[R31 + 48]> */
		/* 820B57ECh case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B57ECh case   26:*/		return 0x820B57F0;
		  /* 820B57F0h */ case   27:  		/* stw R10, <#[R31 + 52]> */
		/* 820B57F0h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B57F0h case   27:*/		return 0x820B57F4;
		  /* 820B57F4h */ case   28:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B57F4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B57F4h case   28:*/		return 0x820B57F8;
		  /* 820B57F8h */ case   29:  		/* lwz R10, <#[R31 + 84]> */
		/* 820B57F8h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 820B57F8h case   29:*/		return 0x820B57FC;
		  /* 820B57FCh */ case   30:  		/* stw R18, <#[R31 + 80]> */
		/* 820B57FCh case   30:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000050) );
		/* 820B57FCh case   30:*/		return 0x820B5800;
		  /* 820B5800h */ case   31:  		/* stw R18, <#[R31 + 84]> */
		/* 820B5800h case   31:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000054) );
		/* 820B5800h case   31:*/		return 0x820B5804;
		  /* 820B5804h */ case   32:  		/* stw R11, <#[R1 + 148]> */
		/* 820B5804h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820B5804h case   32:*/		return 0x820B5808;
		  /* 820B5808h */ case   33:  		/* stw R10, <#[R1 + 184]> */
		/* 820B5808h case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B5808h case   33:*/		return 0x820B580C;
		  /* 820B580Ch */ case   34:  		/* b 20 */
		/* 820B580Ch case   34:*/		return 0x820B5820;
		/* 820B580Ch case   34:*/		return 0x820B5810;
	}
	return 0x820B5810;
} // Block from 820B5784h-820B5810h (35 instructions)

//////////////////////////////////////////////////////
// Block at 820B5810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5810);
		  /* 820B5810h */ case    0:  		/* mr R5, R27 */
		/* 820B5810h case    0:*/		regs.R5 = regs.R27;
		/* 820B5810h case    0:*/		return 0x820B5814;
		  /* 820B5814h */ case    1:  		/* mr R4, R16 */
		/* 820B5814h case    1:*/		regs.R4 = regs.R16;
		/* 820B5814h case    1:*/		return 0x820B5818;
		  /* 820B5818h */ case    2:  		/* mr R3, R15 */
		/* 820B5818h case    2:*/		regs.R3 = regs.R15;
		/* 820B5818h case    2:*/		return 0x820B581C;
		  /* 820B581Ch */ case    3:  		/* bl -147052 */
		/* 820B581Ch case    3:*/		regs.LR = 0x820B5820; return 0x820919B0;
		/* 820B581Ch case    3:*/		return 0x820B5820;
	}
	return 0x820B5820;
} // Block from 820B5810h-820B5820h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B5820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5820);
		  /* 820B5820h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 820B5820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820B5820h case    0:*/		return 0x820B5824;
		  /* 820B5824h */ case    1:  		/* bc 12, CR6_EQ, 128 */
		/* 820B5824h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B58A4;  }
		/* 820B5824h case    1:*/		return 0x820B5828;
		  /* 820B5828h */ case    2:  		/* lwz R11, <#[R1 + 136]> */
		/* 820B5828h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820B5828h case    2:*/		return 0x820B582C;
		  /* 820B582Ch */ case    3:  		/* cntlzw R10, R20 */
		/* 820B582Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R20);
		/* 820B582Ch case    3:*/		return 0x820B5830;
		  /* 820B5830h */ case    4:  		/* mr R5, R17 */
		/* 820B5830h case    4:*/		regs.R5 = regs.R17;
		/* 820B5830h case    4:*/		return 0x820B5834;
		  /* 820B5834h */ case    5:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 820B5834h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 820B5834h case    5:*/		return 0x820B5838;
		  /* 820B5838h */ case    6:  		/* mr R4, R21 */
		/* 820B5838h case    6:*/		regs.R4 = regs.R21;
		/* 820B5838h case    6:*/		return 0x820B583C;
		  /* 820B583Ch */ case    7:  		/* stw R10, <#[R31 + 52]> */
		/* 820B583Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B583Ch case    7:*/		return 0x820B5840;
		  /* 820B5840h */ case    8:  		/* mr R3, R31 */
		/* 820B5840h case    8:*/		regs.R3 = regs.R31;
		/* 820B5840h case    8:*/		return 0x820B5844;
		  /* 820B5844h */ case    9:  		/* stw R11, <#[R31 + 48]> */
		/* 820B5844h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B5844h case    9:*/		return 0x820B5848;
		  /* 820B5848h */ case   10:  		/* bl 41560 */
		/* 820B5848h case   10:*/		regs.LR = 0x820B584C; return 0x820BFAA0;
		/* 820B5848h case   10:*/		return 0x820B584C;
		  /* 820B584Ch */ case   11:  		/* or. R30, R3, R3 */
		/* 820B584Ch case   11:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B584Ch case   11:*/		return 0x820B5850;
		  /* 820B5850h */ case   12:  		/* bc 12, CR0_LT, 2096 */
		/* 820B5850h case   12:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5850h case   12:*/		return 0x820B5854;
		  /* 820B5854h */ case   13:  		/* lwz R30, <#[R1 + 140]> */
		/* 820B5854h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B5854h case   13:*/		return 0x820B5858;
		  /* 820B5858h */ case   14:  		/* mr R5, R27 */
		/* 820B5858h case   14:*/		regs.R5 = regs.R27;
		/* 820B5858h case   14:*/		return 0x820B585C;
		  /* 820B585Ch */ case   15:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B585Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B585Ch case   15:*/		return 0x820B5860;
		  /* 820B5860h */ case   16:  		/* mr R3, R30 */
		/* 820B5860h case   16:*/		regs.R3 = regs.R30;
		/* 820B5860h case   16:*/		return 0x820B5864;
		  /* 820B5864h */ case   17:  		/* bl -147124 */
		/* 820B5864h case   17:*/		regs.LR = 0x820B5868; return 0x820919B0;
		/* 820B5864h case   17:*/		return 0x820B5868;
		  /* 820B5868h */ case   18:  		/* mr R5, R27 */
		/* 820B5868h case   18:*/		regs.R5 = regs.R27;
		/* 820B5868h case   18:*/		return 0x820B586C;
		  /* 820B586Ch */ case   19:  		/* mr R4, R17 */
		/* 820B586Ch case   19:*/		regs.R4 = regs.R17;
		/* 820B586Ch case   19:*/		return 0x820B5870;
		  /* 820B5870h */ case   20:  		/* lwz R3, <#[R31 + 24]> */
		/* 820B5870h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5870h case   20:*/		return 0x820B5874;
		  /* 820B5874h */ case   21:  		/* bl -147140 */
		/* 820B5874h case   21:*/		regs.LR = 0x820B5878; return 0x820919B0;
		/* 820B5874h case   21:*/		return 0x820B5878;
		  /* 820B5878h */ case   22:  		/* lwz R11, <#[R1 + 164]> */
		/* 820B5878h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B5878h case   22:*/		return 0x820B587C;
		  /* 820B587Ch */ case   23:  		/* lwz R10, <#[R1 + 168]> */
		/* 820B587Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B587Ch case   23:*/		return 0x820B5880;
		  /* 820B5880h */ case   24:  		/* stw R11, <#[R31 + 48]> */
		/* 820B5880h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B5880h case   24:*/		return 0x820B5884;
		  /* 820B5884h */ case   25:  		/* stw R10, <#[R31 + 52]> */
		/* 820B5884h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B5884h case   25:*/		return 0x820B5888;
		  /* 820B5888h */ case   26:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B5888h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B5888h case   26:*/		return 0x820B588C;
		  /* 820B588Ch */ case   27:  		/* lwz R10, <#[R31 + 84]> */
		/* 820B588Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 820B588Ch case   27:*/		return 0x820B5890;
		  /* 820B5890h */ case   28:  		/* stw R18, <#[R31 + 80]> */
		/* 820B5890h case   28:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000050) );
		/* 820B5890h case   28:*/		return 0x820B5894;
		  /* 820B5894h */ case   29:  		/* stw R18, <#[R31 + 84]> */
		/* 820B5894h case   29:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000054) );
		/* 820B5894h case   29:*/		return 0x820B5898;
		  /* 820B5898h */ case   30:  		/* stw R11, <#[R1 + 152]> */
		/* 820B5898h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 820B5898h case   30:*/		return 0x820B589C;
		  /* 820B589Ch */ case   31:  		/* stw R10, <#[R1 + 160]> */
		/* 820B589Ch case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B589Ch case   31:*/		return 0x820B58A0;
		  /* 820B58A0h */ case   32:  		/* b 24 */
		/* 820B58A0h case   32:*/		return 0x820B58B8;
		/* 820B58A0h case   32:*/		return 0x820B58A4;
	}
	return 0x820B58A4;
} // Block from 820B5820h-820B58A4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820B58A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B58A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B58A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B58A4);
		  /* 820B58A4h */ case    0:  		/* lwz R30, <#[R1 + 140]> */
		/* 820B58A4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B58A4h case    0:*/		return 0x820B58A8;
		  /* 820B58A8h */ case    1:  		/* mr R5, R27 */
		/* 820B58A8h case    1:*/		regs.R5 = regs.R27;
		/* 820B58A8h case    1:*/		return 0x820B58AC;
		  /* 820B58ACh */ case    2:  		/* mr R4, R16 */
		/* 820B58ACh case    2:*/		regs.R4 = regs.R16;
		/* 820B58ACh case    2:*/		return 0x820B58B0;
		  /* 820B58B0h */ case    3:  		/* mr R3, R30 */
		/* 820B58B0h case    3:*/		regs.R3 = regs.R30;
		/* 820B58B0h case    3:*/		return 0x820B58B4;
		  /* 820B58B4h */ case    4:  		/* bl -147204 */
		/* 820B58B4h case    4:*/		regs.LR = 0x820B58B8; return 0x820919B0;
		/* 820B58B4h case    4:*/		return 0x820B58B8;
	}
	return 0x820B58B8;
} // Block from 820B58A4h-820B58B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B58B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B58B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B58B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B58B8);
		  /* 820B58B8h */ case    0:  		/* mr R25, R18 */
		/* 820B58B8h case    0:*/		regs.R25 = regs.R18;
		/* 820B58B8h case    0:*/		return 0x820B58BC;
		  /* 820B58BCh */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 820B58BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B58BCh case    1:*/		return 0x820B58C0;
		  /* 820B58C0h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 820B58C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B58FC;  }
		/* 820B58C0h case    2:*/		return 0x820B58C4;
		  /* 820B58C4h */ case    3:  		/* mr R11, R30 */
		/* 820B58C4h case    3:*/		regs.R11 = regs.R30;
		/* 820B58C4h case    3:*/		return 0x820B58C8;
		  /* 820B58C8h */ case    4:  		/* mtspr CTR, R24 */
		/* 820B58C8h case    4:*/		regs.CTR = regs.R24;
		/* 820B58C8h case    4:*/		return 0x820B58CC;
		  /* 820B58CCh */ case    5:  		/* subf R10, R30, R16 */
		/* 820B58CCh case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R30,regs.R16);
		/* 820B58CCh case    5:*/		return 0x820B58D0;
		  /* 820B58D0h */ case    6:  		/* subf R9, R30, R15 */
		/* 820B58D0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R30,regs.R15);
		/* 820B58D0h case    6:*/		return 0x820B58D4;
		  /* 820B58D4h */ case    7:  		/* lwzx R8, <#[R10 + R11]> */
		/* 820B58D4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820B58D4h case    7:*/		return 0x820B58D8;
		  /* 820B58D8h */ case    8:  		/* cmpwi CR6, R8, -1 */
		/* 820B58D8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 820B58D8h case    8:*/		return 0x820B58DC;
		  /* 820B58DCh */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 820B58DCh case    9:*/		if ( regs.CR[6].eq ) { return 0x820B58F4;  }
		/* 820B58DCh case    9:*/		return 0x820B58E0;
		  /* 820B58E0h */ case   10:  		/* lwzx R8, <#[R9 + R11]> */
		/* 820B58E0h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820B58E0h case   10:*/		return 0x820B58E4;
		  /* 820B58E4h */ case   11:  		/* lwz R7, <#[R11]> */
		/* 820B58E4h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820B58E4h case   11:*/		return 0x820B58E8;
		  /* 820B58E8h */ case   12:  		/* cmplw CR6, R8, R7 */
		/* 820B58E8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820B58E8h case   12:*/		return 0x820B58EC;
		  /* 820B58ECh */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 820B58ECh case   13:*/		if ( regs.CR[6].eq ) { return 0x820B58F4;  }
		/* 820B58ECh case   13:*/		return 0x820B58F0;
		  /* 820B58F0h */ case   14:  		/* addi R25, R25, 1 */
		/* 820B58F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 820B58F0h case   14:*/		return 0x820B58F4;
	}
	return 0x820B58F4;
} // Block from 820B58B8h-820B58F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820B58F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B58F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B58F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B58F4);
		  /* 820B58F4h */ case    0:  		/* addi R11, R11, 4 */
		/* 820B58F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B58F4h case    0:*/		return 0x820B58F8;
		  /* 820B58F8h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 820B58F8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B58D4;  }
		/* 820B58F8h case    1:*/		return 0x820B58FC;
	}
	return 0x820B58FC;
} // Block from 820B58F4h-820B58FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B58FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B58FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B58FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B58FC);
		  /* 820B58FCh */ case    0:  		/* lwz R11, <#[R1 + 192]> */
		/* 820B58FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820B58FCh case    0:*/		return 0x820B5900;
		  /* 820B5900h */ case    1:  		/* cmpwi CR6, R22, 0 */
		/* 820B5900h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820B5900h case    1:*/		return 0x820B5904;
		  /* 820B5904h */ case    2:  		/* lwz R10, <#[R1 + 196]> */
		/* 820B5904h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C4) );
		/* 820B5904h case    2:*/		return 0x820B5908;
		  /* 820B5908h */ case    3:  		/* stw R11, <#[R31 + 60]> */
		/* 820B5908h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 820B5908h case    3:*/		return 0x820B590C;
		  /* 820B590Ch */ case    4:  		/* stw R10, <#[R31 + 64]> */
		/* 820B590Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 820B590Ch case    4:*/		return 0x820B5910;
		  /* 820B5910h */ case    5:  		/* bc 12, CR6_EQ, 136 */
		/* 820B5910h case    5:*/		if ( regs.CR[6].eq ) { return 0x820B5998;  }
		/* 820B5910h case    5:*/		return 0x820B5914;
		  /* 820B5914h */ case    6:  		/* cmplwi CR6, R25, 16 */
		/* 820B5914h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000010);
		/* 820B5914h case    6:*/		return 0x820B5918;
		  /* 820B5918h */ case    7:  		/* bc 12, CR6_GT, 24 */
		/* 820B5918h case    7:*/		if ( regs.CR[6].gt ) { return 0x820B5930;  }
		/* 820B5918h case    7:*/		return 0x820B591C;
		  /* 820B591Ch */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B591Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B591Ch case    8:*/		return 0x820B5920;
		  /* 820B5920h */ case    9:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B5920h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B5920h case    9:*/		return 0x820B5924;
		  /* 820B5924h */ case   10:  		/* subf R11, R26, R11 */
		/* 820B5924h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 820B5924h case   10:*/		return 0x820B5928;
		  /* 820B5928h */ case   11:  		/* cmplwi CR6, R11, 32 */
		/* 820B5928h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 820B5928h case   11:*/		return 0x820B592C;
		  /* 820B592Ch */ case   12:  		/* bc 4, CR6_GT, 8 */
		/* 820B592Ch case   12:*/		if ( !regs.CR[6].gt ) { return 0x820B5934;  }
		/* 820B592Ch case   12:*/		return 0x820B5930;
	}
	return 0x820B5930;
} // Block from 820B58FCh-820B5930h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820B5930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5930);
		  /* 820B5930h */ case    0:  		/* mr R22, R18 */
		/* 820B5930h case    0:*/		regs.R22 = regs.R18;
		/* 820B5930h case    0:*/		return 0x820B5934;
	}
	return 0x820B5934;
} // Block from 820B5930h-820B5934h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B5934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5934);
		  /* 820B5934h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 820B5934h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820B5934h case    0:*/		return 0x820B5938;
		  /* 820B5938h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 820B5938h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B5998;  }
		/* 820B5938h case    1:*/		return 0x820B593C;
		  /* 820B593Ch */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B593Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B593Ch case    2:*/		return 0x820B5940;
		  /* 820B5940h */ case    3:  		/* mr R10, R26 */
		/* 820B5940h case    3:*/		regs.R10 = regs.R26;
		/* 820B5940h case    3:*/		return 0x820B5944;
		  /* 820B5944h */ case    4:  		/* lwz R11, <#[R9 + 12]> */
		/* 820B5944h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 820B5944h case    4:*/		return 0x820B5948;
		  /* 820B5948h */ case    5:  		/* cmplw CR6, R26, R11 */
		/* 820B5948h case    5:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820B5948h case    5:*/		return 0x820B594C;
		  /* 820B594Ch */ case    6:  		/* bc 4, CR6_LT, 68 */
		/* 820B594Ch case    6:*/		if ( !regs.CR[6].lt ) { return 0x820B5990;  }
		/* 820B594Ch case    6:*/		return 0x820B5950;
		  /* 820B5950h */ case    7:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 820B5950h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 820B5950h case    7:*/		return 0x820B5954;
		  /* 820B5954h */ case    8:  		/* lwz R8, <#[R9 + 24]> */
		/* 820B5954h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000018) );
		/* 820B5954h case    8:*/		return 0x820B5958;
		  /* 820B5958h */ case    9:  		/* lis R7, 24576 */
		/* 820B5958h case    9:*/		cpu::op::lis<0>(regs,&regs.R7,0x6000);
		/* 820B5958h case    9:*/		return 0x820B595C;
		  /* 820B595Ch */ case   10:  		/* lwzx R8, <#[R8 + R11]> */
		/* 820B595Ch case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820B595Ch case   10:*/		return 0x820B5960;
		  /* 820B5960h */ case   11:  		/* lwz R8, <#[R8]> */
		/* 820B5960h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 820B5960h case   11:*/		return 0x820B5964;
		  /* 820B5964h */ case   12:  		/* rlwinm R8, R8, 0, 0, 3 */
		/* 820B5964h case   12:*/		cpu::op::rlwinm<0,0,0,3>(regs,&regs.R8,regs.R8);
		/* 820B5964h case   12:*/		return 0x820B5968;
		  /* 820B5968h */ case   13:  		/* cmplw CR6, R8, R7 */
		/* 820B5968h case   13:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820B5968h case   13:*/		return 0x820B596C;
		  /* 820B596Ch */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 820B596Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x820B598C;  }
		/* 820B596Ch case   14:*/		return 0x820B5970;
		  /* 820B5970h */ case   15:  		/* lwz R8, <#[R31 + 8]> */
		/* 820B5970h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5970h case   15:*/		return 0x820B5974;
		  /* 820B5974h */ case   16:  		/* addi R10, R10, 1 */
		/* 820B5974h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820B5974h case   16:*/		return 0x820B5978;
		  /* 820B5978h */ case   17:  		/* addi R11, R11, 4 */
		/* 820B5978h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B5978h case   17:*/		return 0x820B597C;
		  /* 820B597Ch */ case   18:  		/* lwz R8, <#[R8 + 12]> */
		/* 820B597Ch case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 820B597Ch case   18:*/		return 0x820B5980;
		  /* 820B5980h */ case   19:  		/* cmplw CR6, R10, R8 */
		/* 820B5980h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 820B5980h case   19:*/		return 0x820B5984;
		  /* 820B5984h */ case   20:  		/* bc 12, CR6_LT, -48 */
		/* 820B5984h case   20:*/		if ( regs.CR[6].lt ) { return 0x820B5954;  }
		/* 820B5984h case   20:*/		return 0x820B5988;
		  /* 820B5988h */ case   21:  		/* b 8 */
		/* 820B5988h case   21:*/		return 0x820B5990;
		/* 820B5988h case   21:*/		return 0x820B598C;
	}
	return 0x820B598C;
} // Block from 820B5934h-820B598Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 820B598Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B598C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B598C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B598C);
		  /* 820B598Ch */ case    0:  		/* mr R22, R18 */
		/* 820B598Ch case    0:*/		regs.R22 = regs.R18;
		/* 820B598Ch case    0:*/		return 0x820B5990;
	}
	return 0x820B5990;
} // Block from 820B598Ch-820B5990h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B5990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5990);
		  /* 820B5990h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 820B5990h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820B5990h case    0:*/		return 0x820B5994;
		  /* 820B5994h */ case    1:  		/* bc 4, CR6_EQ, 112 */
		/* 820B5994h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B5A04;  }
		/* 820B5994h case    1:*/		return 0x820B5998;
	}
	return 0x820B5998;
} // Block from 820B5990h-820B5998h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B5998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5998);
		  /* 820B5998h */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 820B5998h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820B5998h case    0:*/		return 0x820B599C;
		  /* 820B599Ch */ case    1:  		/* bc 4, CR6_EQ, 96 */
		/* 820B599Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B59FC;  }
		/* 820B599Ch case    1:*/		return 0x820B59A0;
		  /* 820B59A0h */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 820B59A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820B59A0h case    2:*/		return 0x820B59A4;
		  /* 820B59A4h */ case    3:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 820B59A4h case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 820B59A4h case    3:*/		return 0x820B59A8;
		  /* 820B59A8h */ case    4:  		/* bc 12, CR0_EQ, 84 */
		/* 820B59A8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B59FC;  }
		/* 820B59A8h case    4:*/		return 0x820B59AC;
		  /* 820B59ACh */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B59ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B59ACh case    5:*/		return 0x820B59B0;
		  /* 820B59B0h */ case    6:  		/* mr R29, R26 */
		/* 820B59B0h case    6:*/		regs.R29 = regs.R26;
		/* 820B59B0h case    6:*/		return 0x820B59B4;
		  /* 820B59B4h */ case    7:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B59B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B59B4h case    7:*/		return 0x820B59B8;
		  /* 820B59B8h */ case    8:  		/* cmplw CR6, R26, R11 */
		/* 820B59B8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820B59B8h case    8:*/		return 0x820B59BC;
		  /* 820B59BCh */ case    9:  		/* bc 4, CR6_LT, 64 */
		/* 820B59BCh case    9:*/		if ( !regs.CR[6].lt ) { return 0x820B59FC;  }
		/* 820B59BCh case    9:*/		return 0x820B59C0;
		  /* 820B59C0h */ case   10:  		/* rlwinm R30, R26, 2, 0, 29 */
		/* 820B59C0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R26);
		/* 820B59C0h case   10:*/		return 0x820B59C4;
		  /* 820B59C4h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B59C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B59C4h case   11:*/		return 0x820B59C8;
		  /* 820B59C8h */ case   12:  		/* lwz R11, <#[R11 + 24]> */
		/* 820B59C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820B59C8h case   12:*/		return 0x820B59CC;
		  /* 820B59CCh */ case   13:  		/* lwzx R3, <#[R11 + R30]> */
		/* 820B59CCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820B59CCh case   13:*/		return 0x820B59D0;
		  /* 820B59D0h */ case   14:  		/* bl 289424 */
		/* 820B59D0h case   14:*/		regs.LR = 0x820B59D4; return 0x820FC460;
		/* 820B59D0h case   14:*/		return 0x820B59D4;
		  /* 820B59D4h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820B59D4h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B59D4h case   15:*/		return 0x820B59D8;
		  /* 820B59D8h */ case   16:  		/* bc 4, CR0_EQ, 32 */
		/* 820B59D8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x820B59F8;  }
		/* 820B59D8h case   16:*/		return 0x820B59DC;
		  /* 820B59DCh */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B59DCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B59DCh case   17:*/		return 0x820B59E0;
		  /* 820B59E0h */ case   18:  		/* addi R29, R29, 1 */
		/* 820B59E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820B59E0h case   18:*/		return 0x820B59E4;
		  /* 820B59E4h */ case   19:  		/* addi R30, R30, 4 */
		/* 820B59E4h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B59E4h case   19:*/		return 0x820B59E8;
		  /* 820B59E8h */ case   20:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B59E8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B59E8h case   20:*/		return 0x820B59EC;
		  /* 820B59ECh */ case   21:  		/* cmplw CR6, R29, R11 */
		/* 820B59ECh case   21:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820B59ECh case   21:*/		return 0x820B59F0;
		  /* 820B59F0h */ case   22:  		/* bc 12, CR6_LT, -44 */
		/* 820B59F0h case   22:*/		if ( regs.CR[6].lt ) { return 0x820B59C4;  }
		/* 820B59F0h case   22:*/		return 0x820B59F4;
		  /* 820B59F4h */ case   23:  		/* b 8 */
		/* 820B59F4h case   23:*/		return 0x820B59FC;
		/* 820B59F4h case   23:*/		return 0x820B59F8;
	}
	return 0x820B59F8;
} // Block from 820B5998h-820B59F8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820B59F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B59F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B59F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B59F8);
		  /* 820B59F8h */ case    0:  		/* li R22, 1 */
		/* 820B59F8h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 820B59F8h case    0:*/		return 0x820B59FC;
	}
	return 0x820B59FC;
} // Block from 820B59F8h-820B59FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B59FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B59FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B59FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B59FC);
		  /* 820B59FCh */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 820B59FCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820B59FCh case    0:*/		return 0x820B5A00;
		  /* 820B5A00h */ case    1:  		/* bc 12, CR6_EQ, 676 */
		/* 820B5A00h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B5CA4;  }
		/* 820B5A00h case    1:*/		return 0x820B5A04;
	}
	return 0x820B5A04;
} // Block from 820B59FCh-820B5A04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B5A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5A04);
		  /* 820B5A04h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B5A04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5A04h case    0:*/		return 0x820B5A08;
		  /* 820B5A08h */ case    1:  		/* mr R29, R26 */
		/* 820B5A08h case    1:*/		regs.R29 = regs.R26;
		/* 820B5A08h case    1:*/		return 0x820B5A0C;
		  /* 820B5A0Ch */ case    2:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B5A0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B5A0Ch case    2:*/		return 0x820B5A10;
		  /* 820B5A10h */ case    3:  		/* cmplw CR6, R26, R11 */
		/* 820B5A10h case    3:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 820B5A10h case    3:*/		return 0x820B5A14;
		  /* 820B5A14h */ case    4:  		/* bc 4, CR6_LT, 80 */
		/* 820B5A14h case    4:*/		if ( !regs.CR[6].lt ) { return 0x820B5A64;  }
		/* 820B5A14h case    4:*/		return 0x820B5A18;
		  /* 820B5A18h */ case    5:  		/* rlwinm R30, R26, 2, 0, 29 */
		/* 820B5A18h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R26);
		/* 820B5A18h case    5:*/		return 0x820B5A1C;
		  /* 820B5A1Ch */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B5A1Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5A1Ch case    6:*/		return 0x820B5A20;
		  /* 820B5A20h */ case    7:  		/* lwz R11, <#[R11 + 24]> */
		/* 820B5A20h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820B5A20h case    7:*/		return 0x820B5A24;
		  /* 820B5A24h */ case    8:  		/* lwzx R28, <#[R11 + R30]> */
		/* 820B5A24h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820B5A24h case    8:*/		return 0x820B5A28;
		  /* 820B5A28h */ case    9:  		/* cmplwi CR6, R28, 0 */
		/* 820B5A28h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820B5A28h case    9:*/		return 0x820B5A2C;
		  /* 820B5A2Ch */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 820B5A2Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x820B5A40;  }
		/* 820B5A2Ch case   10:*/		return 0x820B5A30;
		  /* 820B5A30h */ case   11:  		/* mr R3, R28 */
		/* 820B5A30h case   11:*/		regs.R3 = regs.R28;
		/* 820B5A30h case   11:*/		return 0x820B5A34;
		  /* 820B5A34h */ case   12:  		/* bl 1472908 */
		/* 820B5A34h case   12:*/		regs.LR = 0x820B5A38; return 0x8221D3C0;
		/* 820B5A34h case   12:*/		return 0x820B5A38;
		  /* 820B5A38h */ case   13:  		/* mr R3, R28 */
		/* 820B5A38h case   13:*/		regs.R3 = regs.R28;
		/* 820B5A38h case   13:*/		return 0x820B5A3C;
		  /* 820B5A3Ch */ case   14:  		/* bl 289716 */
		/* 820B5A3Ch case   14:*/		regs.LR = 0x820B5A40; return 0x820FC5F0;
		/* 820B5A3Ch case   14:*/		return 0x820B5A40;
	}
	return 0x820B5A40;
} // Block from 820B5A04h-820B5A40h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820B5A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5A40);
		  /* 820B5A40h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B5A40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5A40h case    0:*/		return 0x820B5A44;
		  /* 820B5A44h */ case    1:  		/* addi R29, R29, 1 */
		/* 820B5A44h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820B5A44h case    1:*/		return 0x820B5A48;
		  /* 820B5A48h */ case    2:  		/* lwz R11, <#[R11 + 24]> */
		/* 820B5A48h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820B5A48h case    2:*/		return 0x820B5A4C;
		  /* 820B5A4Ch */ case    3:  		/* stwx R18, <#[R11 + R30]> */
		/* 820B5A4Ch case    3:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820B5A4Ch case    3:*/		return 0x820B5A50;
		  /* 820B5A50h */ case    4:  		/* addi R30, R30, 4 */
		/* 820B5A50h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B5A50h case    4:*/		return 0x820B5A54;
		  /* 820B5A54h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B5A54h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5A54h case    5:*/		return 0x820B5A58;
		  /* 820B5A58h */ case    6:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B5A58h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B5A58h case    6:*/		return 0x820B5A5C;
		  /* 820B5A5Ch */ case    7:  		/* cmplw CR6, R29, R11 */
		/* 820B5A5Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820B5A5Ch case    7:*/		return 0x820B5A60;
		  /* 820B5A60h */ case    8:  		/* bc 12, CR6_LT, -68 */
		/* 820B5A60h case    8:*/		if ( regs.CR[6].lt ) { return 0x820B5A1C;  }
		/* 820B5A60h case    8:*/		return 0x820B5A64;
	}
	return 0x820B5A64;
} // Block from 820B5A40h-820B5A64h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B5A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5A64);
		  /* 820B5A64h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B5A64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5A64h case    0:*/		return 0x820B5A68;
		  /* 820B5A68h */ case    1:  		/* mr R5, R27 */
		/* 820B5A68h case    1:*/		regs.R5 = regs.R27;
		/* 820B5A68h case    1:*/		return 0x820B5A6C;
		  /* 820B5A6Ch */ case    2:  		/* mr R4, R17 */
		/* 820B5A6Ch case    2:*/		regs.R4 = regs.R17;
		/* 820B5A6Ch case    2:*/		return 0x820B5A70;
		  /* 820B5A70h */ case    3:  		/* stw R26, <#[R11 + 12]> */
		/* 820B5A70h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B5A70h case    3:*/		return 0x820B5A74;
		  /* 820B5A74h */ case    4:  		/* lwz R3, <#[R31 + 24]> */
		/* 820B5A74h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5A74h case    4:*/		return 0x820B5A78;
		  /* 820B5A78h */ case    5:  		/* bl -147656 */
		/* 820B5A78h case    5:*/		regs.LR = 0x820B5A7C; return 0x820919B0;
		/* 820B5A78h case    5:*/		return 0x820B5A7C;
		  /* 820B5A7Ch */ case    6:  		/* lwz R26, <#[R1 + 140]> */
		/* 820B5A7Ch case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B5A7Ch case    6:*/		return 0x820B5A80;
	}
	return 0x820B5A80;
} // Block from 820B5A64h-820B5A80h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B5A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5A80);
		  /* 820B5A80h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 820B5A80h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820B5A80h case    0:*/		return 0x820B5A84;
		  /* 820B5A84h */ case    1:  		/* bc 12, CR6_EQ, 544 */
		/* 820B5A84h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B5CA4;  }
		/* 820B5A84h case    1:*/		return 0x820B5A88;
		  /* 820B5A88h */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 820B5A88h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 820B5A88h case    2:*/		return 0x820B5A8C;
		  /* 820B5A8Ch */ case    3:  		/* bc 12, CR6_EQ, 164 */
		/* 820B5A8Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820B5B30;  }
		/* 820B5A8Ch case    3:*/		return 0x820B5A90;
		  /* 820B5A90h */ case    4:  		/* lwz R11, <#[R1 + 172]> */
		/* 820B5A90h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B5A90h case    4:*/		return 0x820B5A94;
		  /* 820B5A94h */ case    5:  		/* cmpwi CR6, R20, 0 */
		/* 820B5A94h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 820B5A94h case    5:*/		return 0x820B5A98;
		  /* 820B5A98h */ case    6:  		/* addi R8, R1, 128 */
		/* 820B5A98h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820B5A98h case    6:*/		return 0x820B5A9C;
		  /* 820B5A9Ch */ case    7:  		/* stw R19, <#[R11]> */
		/* 820B5A9Ch case    7:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 820B5A9Ch case    7:*/		return 0x820B5AA0;
		  /* 820B5AA0h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 820B5AA0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820B5AA8;  }
		/* 820B5AA0h case    8:*/		return 0x820B5AA4;
		  /* 820B5AA4h */ case    9:  		/* addi R8, R1, 132 */
		/* 820B5AA4h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x84);
		/* 820B5AA4h case    9:*/		return 0x820B5AA8;
	}
	return 0x820B5AA8;
} // Block from 820B5A80h-820B5AA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B5AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5AA8);
		  /* 820B5AA8h */ case    0:  		/* lwz R29, <#[R1 + 172]> */
		/* 820B5AA8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B5AA8h case    0:*/		return 0x820B5AAC;
		  /* 820B5AACh */ case    1:  		/* lis R5, 8272 */
		/* 820B5AACh case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B5AACh case    1:*/		return 0x820B5AB0;
	}
	return 0x820B5AB0;
} // Block from 820B5AA8h-820B5AB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B5AB0h
// Function '?EmitIf@CCompiler@D3DXShader@@IAAJPAVCNode@2@I00PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5AB0);
		  /* 820B5AB0h */ case    0:  		/* li R9, 23 */
		/* 820B5AB0h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B5AB0h case    0:*/		return 0x820B5AB4;
		  /* 820B5AB4h */ case    1:  		/* addi R7, R1, 156 */
		/* 820B5AB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x9C);
		/* 820B5AB4h case    1:*/		return 0x820B5AB8;
		  /* 820B5AB8h */ case    2:  		/* mr R6, R29 */
		/* 820B5AB8h case    2:*/		regs.R6 = regs.R29;
		/* 820B5AB8h case    2:*/		return 0x820B5ABC;
		  /* 820B5ABCh */ case    3:  		/* ori R5, R5, 1 */
		/* 820B5ABCh case    3:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B5ABCh case    3:*/		return 0x820B5AC0;
		  /* 820B5AC0h */ case    4:  		/* mr R4, R14 */
		/* 820B5AC0h case    4:*/		regs.R4 = regs.R14;
		/* 820B5AC0h case    4:*/		return 0x820B5AC4;
		  /* 820B5AC4h */ case    5:  		/* mr R3, R31 */
		/* 820B5AC4h case    5:*/		regs.R3 = regs.R31;
		/* 820B5AC4h case    5:*/		return 0x820B5AC8;
		  /* 820B5AC8h */ case    6:  		/* bl -20416 */
		/* 820B5AC8h case    6:*/		regs.LR = 0x820B5ACC; return 0x820B0B08;
		/* 820B5AC8h case    6:*/		return 0x820B5ACC;
		  /* 820B5ACCh */ case    7:  		/* or. R30, R3, R3 */
		/* 820B5ACCh case    7:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5ACCh case    7:*/		return 0x820B5AD0;
		  /* 820B5AD0h */ case    8:  		/* bc 12, CR0_LT, 1456 */
		/* 820B5AD0h case    8:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5AD0h case    8:*/		return 0x820B5AD4;
		  /* 820B5AD4h */ case    9:  		/* mr R5, R17 */
		/* 820B5AD4h case    9:*/		regs.R5 = regs.R17;
		/* 820B5AD4h case    9:*/		return 0x820B5AD8;
		  /* 820B5AD8h */ case   10:  		/* mr R4, R23 */
		/* 820B5AD8h case   10:*/		regs.R4 = regs.R23;
		/* 820B5AD8h case   10:*/		return 0x820B5ADC;
		  /* 820B5ADCh */ case   11:  		/* mr R3, R31 */
		/* 820B5ADCh case   11:*/		regs.R3 = regs.R31;
		/* 820B5ADCh case   11:*/		return 0x820B5AE0;
		  /* 820B5AE0h */ case   12:  		/* bl 40896 */
		/* 820B5AE0h case   12:*/		regs.LR = 0x820B5AE4; return 0x820BFAA0;
		/* 820B5AE0h case   12:*/		return 0x820B5AE4;
		  /* 820B5AE4h */ case   13:  		/* or. R30, R3, R3 */
		/* 820B5AE4h case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5AE4h case   13:*/		return 0x820B5AE8;
		  /* 820B5AE8h */ case   14:  		/* bc 12, CR0_LT, 1432 */
		/* 820B5AE8h case   14:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5AE8h case   14:*/		return 0x820B5AEC;
		  /* 820B5AECh */ case   15:  		/* mr R5, R27 */
		/* 820B5AECh case   15:*/		regs.R5 = regs.R27;
		/* 820B5AECh case   15:*/		return 0x820B5AF0;
		  /* 820B5AF0h */ case   16:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B5AF0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5AF0h case   16:*/		return 0x820B5AF4;
		  /* 820B5AF4h */ case   17:  		/* mr R3, R15 */
		/* 820B5AF4h case   17:*/		regs.R3 = regs.R15;
		/* 820B5AF4h case   17:*/		return 0x820B5AF8;
		  /* 820B5AF8h */ case   18:  		/* bl -147784 */
		/* 820B5AF8h case   18:*/		regs.LR = 0x820B5AFC; return 0x820919B0;
		/* 820B5AF8h case   18:*/		return 0x820B5AFC;
		  /* 820B5AFCh */ case   19:  		/* mr R5, R27 */
		/* 820B5AFCh case   19:*/		regs.R5 = regs.R27;
		/* 820B5AFCh case   19:*/		return 0x820B5B00;
		  /* 820B5B00h */ case   20:  		/* mr R4, R17 */
		/* 820B5B00h case   20:*/		regs.R4 = regs.R17;
		/* 820B5B00h case   20:*/		return 0x820B5B04;
		  /* 820B5B04h */ case   21:  		/* lwz R3, <#[R31 + 24]> */
		/* 820B5B04h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5B04h case   21:*/		return 0x820B5B08;
		  /* 820B5B08h */ case   22:  		/* bl -147800 */
		/* 820B5B08h case   22:*/		regs.LR = 0x820B5B0C; return 0x820919B0;
		/* 820B5B08h case   22:*/		return 0x820B5B0C;
		  /* 820B5B0Ch */ case   23:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B5B0Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B5B0Ch case   23:*/		return 0x820B5B10;
		  /* 820B5B10h */ case   24:  		/* lwz R10, <#[R31 + 84]> */
		/* 820B5B10h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 820B5B10h case   24:*/		return 0x820B5B14;
		  /* 820B5B14h */ case   25:  		/* lwz R9, <#[R1 + 156]> */
		/* 820B5B14h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000009C) );
		/* 820B5B14h case   25:*/		return 0x820B5B18;
		  /* 820B5B18h */ case   26:  		/* stw R18, <#[R31 + 80]> */
		/* 820B5B18h case   26:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000050) );
		/* 820B5B18h case   26:*/		return 0x820B5B1C;
		  /* 820B5B1Ch */ case   27:  		/* stw R18, <#[R31 + 84]> */
		/* 820B5B1Ch case   27:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000054) );
		/* 820B5B1Ch case   27:*/		return 0x820B5B20;
		  /* 820B5B20h */ case   28:  		/* stw R11, <#[R1 + 148]> */
		/* 820B5B20h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820B5B20h case   28:*/		return 0x820B5B24;
		  /* 820B5B24h */ case   29:  		/* stw R10, <#[R1 + 184]> */
		/* 820B5B24h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B5B24h case   29:*/		return 0x820B5B28;
		  /* 820B5B28h */ case   30:  		/* stw R9, <#[R29]> */
		/* 820B5B28h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 820B5B28h case   30:*/		return 0x820B5B2C;
		  /* 820B5B2Ch */ case   31:  		/* b 24 */
		/* 820B5B2Ch case   31:*/		return 0x820B5B44;
		/* 820B5B2Ch case   31:*/		return 0x820B5B30;
	}
	return 0x820B5B30;
} // Block from 820B5AB0h-820B5B30h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820B5B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5B30);
		  /* 820B5B30h */ case    0:  		/* mr R5, R27 */
		/* 820B5B30h case    0:*/		regs.R5 = regs.R27;
		/* 820B5B30h case    0:*/		return 0x820B5B34;
		  /* 820B5B34h */ case    1:  		/* mr R4, R16 */
		/* 820B5B34h case    1:*/		regs.R4 = regs.R16;
		/* 820B5B34h case    1:*/		return 0x820B5B38;
		  /* 820B5B38h */ case    2:  		/* mr R3, R15 */
		/* 820B5B38h case    2:*/		regs.R3 = regs.R15;
		/* 820B5B38h case    2:*/		return 0x820B5B3C;
		  /* 820B5B3Ch */ case    3:  		/* bl -147852 */
		/* 820B5B3Ch case    3:*/		regs.LR = 0x820B5B40; return 0x820919B0;
		/* 820B5B3Ch case    3:*/		return 0x820B5B40;
		  /* 820B5B40h */ case    4:  		/* lwz R29, <#[R1 + 172]> */
		/* 820B5B40h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B5B40h case    4:*/		return 0x820B5B44;
	}
	return 0x820B5B44;
} // Block from 820B5B30h-820B5B44h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B5B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5B44);
		  /* 820B5B44h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 820B5B44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820B5B44h case    0:*/		return 0x820B5B48;
		  /* 820B5B48h */ case    1:  		/* bc 12, CR6_EQ, 156 */
		/* 820B5B48h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B5BE4;  }
		/* 820B5B48h case    1:*/		return 0x820B5B4C;
		  /* 820B5B4Ch */ case    2:  		/* cmpwi CR6, R20, 0 */
		/* 820B5B4Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 820B5B4Ch case    2:*/		return 0x820B5B50;
		  /* 820B5B50h */ case    3:  		/* stw R19, <#[R29]> */
		/* 820B5B50h case    3:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R29 + 0x00000000) );
		/* 820B5B50h case    3:*/		return 0x820B5B54;
		  /* 820B5B54h */ case    4:  		/* addi R8, R1, 132 */
		/* 820B5B54h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x84);
		/* 820B5B54h case    4:*/		return 0x820B5B58;
		  /* 820B5B58h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 820B5B58h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820B5B60;  }
		/* 820B5B58h case    5:*/		return 0x820B5B5C;
		  /* 820B5B5Ch */ case    6:  		/* addi R8, R1, 128 */
		/* 820B5B5Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820B5B5Ch case    6:*/		return 0x820B5B60;
	}
	return 0x820B5B60;
} // Block from 820B5B44h-820B5B60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B5B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5B60);
		  /* 820B5B60h */ case    0:  		/* lis R5, 8272 */
		/* 820B5B60h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B5B60h case    0:*/		return 0x820B5B64;
		  /* 820B5B64h */ case    1:  		/* li R9, 23 */
		/* 820B5B64h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B5B64h case    1:*/		return 0x820B5B68;
		  /* 820B5B68h */ case    2:  		/* addi R7, R1, 156 */
		/* 820B5B68h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x9C);
		/* 820B5B68h case    2:*/		return 0x820B5B6C;
		  /* 820B5B6Ch */ case    3:  		/* mr R6, R29 */
		/* 820B5B6Ch case    3:*/		regs.R6 = regs.R29;
		/* 820B5B6Ch case    3:*/		return 0x820B5B70;
		  /* 820B5B70h */ case    4:  		/* ori R5, R5, 1 */
		/* 820B5B70h case    4:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B5B70h case    4:*/		return 0x820B5B74;
		  /* 820B5B74h */ case    5:  		/* mr R4, R14 */
		/* 820B5B74h case    5:*/		regs.R4 = regs.R14;
		/* 820B5B74h case    5:*/		return 0x820B5B78;
		  /* 820B5B78h */ case    6:  		/* mr R3, R31 */
		/* 820B5B78h case    6:*/		regs.R3 = regs.R31;
		/* 820B5B78h case    6:*/		return 0x820B5B7C;
		  /* 820B5B7Ch */ case    7:  		/* bl -20596 */
		/* 820B5B7Ch case    7:*/		regs.LR = 0x820B5B80; return 0x820B0B08;
		/* 820B5B7Ch case    7:*/		return 0x820B5B80;
		  /* 820B5B80h */ case    8:  		/* or. R30, R3, R3 */
		/* 820B5B80h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5B80h case    8:*/		return 0x820B5B84;
		  /* 820B5B84h */ case    9:  		/* bc 12, CR0_LT, 1276 */
		/* 820B5B84h case    9:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5B84h case    9:*/		return 0x820B5B88;
		  /* 820B5B88h */ case   10:  		/* mr R5, R17 */
		/* 820B5B88h case   10:*/		regs.R5 = regs.R17;
		/* 820B5B88h case   10:*/		return 0x820B5B8C;
		  /* 820B5B8Ch */ case   11:  		/* mr R4, R21 */
		/* 820B5B8Ch case   11:*/		regs.R4 = regs.R21;
		/* 820B5B8Ch case   11:*/		return 0x820B5B90;
		  /* 820B5B90h */ case   12:  		/* mr R3, R31 */
		/* 820B5B90h case   12:*/		regs.R3 = regs.R31;
		/* 820B5B90h case   12:*/		return 0x820B5B94;
		  /* 820B5B94h */ case   13:  		/* bl 40716 */
		/* 820B5B94h case   13:*/		regs.LR = 0x820B5B98; return 0x820BFAA0;
		/* 820B5B94h case   13:*/		return 0x820B5B98;
		  /* 820B5B98h */ case   14:  		/* or. R30, R3, R3 */
		/* 820B5B98h case   14:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5B98h case   14:*/		return 0x820B5B9C;
		  /* 820B5B9Ch */ case   15:  		/* bc 12, CR0_LT, 1252 */
		/* 820B5B9Ch case   15:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5B9Ch case   15:*/		return 0x820B5BA0;
		  /* 820B5BA0h */ case   16:  		/* mr R5, R27 */
		/* 820B5BA0h case   16:*/		regs.R5 = regs.R27;
		/* 820B5BA0h case   16:*/		return 0x820B5BA4;
		  /* 820B5BA4h */ case   17:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B5BA4h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5BA4h case   17:*/		return 0x820B5BA8;
		  /* 820B5BA8h */ case   18:  		/* mr R3, R26 */
		/* 820B5BA8h case   18:*/		regs.R3 = regs.R26;
		/* 820B5BA8h case   18:*/		return 0x820B5BAC;
		  /* 820B5BACh */ case   19:  		/* bl -147964 */
		/* 820B5BACh case   19:*/		regs.LR = 0x820B5BB0; return 0x820919B0;
		/* 820B5BACh case   19:*/		return 0x820B5BB0;
		  /* 820B5BB0h */ case   20:  		/* mr R5, R27 */
		/* 820B5BB0h case   20:*/		regs.R5 = regs.R27;
		/* 820B5BB0h case   20:*/		return 0x820B5BB4;
		  /* 820B5BB4h */ case   21:  		/* mr R4, R17 */
		/* 820B5BB4h case   21:*/		regs.R4 = regs.R17;
		/* 820B5BB4h case   21:*/		return 0x820B5BB8;
		  /* 820B5BB8h */ case   22:  		/* lwz R3, <#[R31 + 24]> */
		/* 820B5BB8h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5BB8h case   22:*/		return 0x820B5BBC;
		  /* 820B5BBCh */ case   23:  		/* bl -147980 */
		/* 820B5BBCh case   23:*/		regs.LR = 0x820B5BC0; return 0x820919B0;
		/* 820B5BBCh case   23:*/		return 0x820B5BC0;
		  /* 820B5BC0h */ case   24:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B5BC0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B5BC0h case   24:*/		return 0x820B5BC4;
		  /* 820B5BC4h */ case   25:  		/* lwz R10, <#[R31 + 84]> */
		/* 820B5BC4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 820B5BC4h case   25:*/		return 0x820B5BC8;
		  /* 820B5BC8h */ case   26:  		/* lwz R9, <#[R1 + 156]> */
		/* 820B5BC8h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000009C) );
		/* 820B5BC8h case   26:*/		return 0x820B5BCC;
		  /* 820B5BCCh */ case   27:  		/* stw R18, <#[R31 + 80]> */
		/* 820B5BCCh case   27:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000050) );
		/* 820B5BCCh case   27:*/		return 0x820B5BD0;
		  /* 820B5BD0h */ case   28:  		/* stw R18, <#[R31 + 84]> */
		/* 820B5BD0h case   28:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000054) );
		/* 820B5BD0h case   28:*/		return 0x820B5BD4;
		  /* 820B5BD4h */ case   29:  		/* stw R11, <#[R1 + 152]> */
		/* 820B5BD4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 820B5BD4h case   29:*/		return 0x820B5BD8;
		  /* 820B5BD8h */ case   30:  		/* stw R10, <#[R1 + 160]> */
		/* 820B5BD8h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B5BD8h case   30:*/		return 0x820B5BDC;
		  /* 820B5BDCh */ case   31:  		/* stw R9, <#[R29]> */
		/* 820B5BDCh case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 820B5BDCh case   31:*/		return 0x820B5BE0;
		  /* 820B5BE0h */ case   32:  		/* b 20 */
		/* 820B5BE0h case   32:*/		return 0x820B5BF4;
		/* 820B5BE0h case   32:*/		return 0x820B5BE4;
	}
	return 0x820B5BE4;
} // Block from 820B5B60h-820B5BE4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820B5BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5BE4);
		  /* 820B5BE4h */ case    0:  		/* mr R5, R27 */
		/* 820B5BE4h case    0:*/		regs.R5 = regs.R27;
		/* 820B5BE4h case    0:*/		return 0x820B5BE8;
		  /* 820B5BE8h */ case    1:  		/* mr R4, R16 */
		/* 820B5BE8h case    1:*/		regs.R4 = regs.R16;
		/* 820B5BE8h case    1:*/		return 0x820B5BEC;
		  /* 820B5BECh */ case    2:  		/* mr R3, R26 */
		/* 820B5BECh case    2:*/		regs.R3 = regs.R26;
		/* 820B5BECh case    2:*/		return 0x820B5BF0;
		  /* 820B5BF0h */ case    3:  		/* bl -148032 */
		/* 820B5BF0h case    3:*/		regs.LR = 0x820B5BF4; return 0x820919B0;
		/* 820B5BF0h case    3:*/		return 0x820B5BF4;
	}
	return 0x820B5BF4;
} // Block from 820B5BE4h-820B5BF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B5BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5BF4);
		  /* 820B5BF4h */ case    0:  		/* mr R25, R18 */
		/* 820B5BF4h case    0:*/		regs.R25 = regs.R18;
		/* 820B5BF4h case    0:*/		return 0x820B5BF8;
		  /* 820B5BF8h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 820B5BF8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B5BF8h case    1:*/		return 0x820B5BFC;
		  /* 820B5BFCh */ case    2:  		/* bc 12, CR6_EQ, 948 */
		/* 820B5BFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820B5FB0;  }
		/* 820B5BFCh case    2:*/		return 0x820B5C00;
		  /* 820B5C00h */ case    3:  		/* mr R10, R18 */
		/* 820B5C00h case    3:*/		regs.R10 = regs.R18;
		/* 820B5C00h case    3:*/		return 0x820B5C04;
		  /* 820B5C04h */ case    4:  		/* mtspr CTR, R24 */
		/* 820B5C04h case    4:*/		regs.CTR = regs.R24;
		/* 820B5C04h case    4:*/		return 0x820B5C08;
		  /* 820B5C08h */ case    5:  		/* mr R11, R15 */
		/* 820B5C08h case    5:*/		regs.R11 = regs.R15;
		/* 820B5C08h case    5:*/		return 0x820B5C0C;
		  /* 820B5C0Ch */ case    6:  		/* subf R4, R15, R26 */
		/* 820B5C0Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R15,regs.R26);
		/* 820B5C0Ch case    6:*/		return 0x820B5C10;
		  /* 820B5C10h */ case    7:  		/* subf R5, R15, R16 */
		/* 820B5C10h case    7:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R15,regs.R16);
		/* 820B5C10h case    7:*/		return 0x820B5C14;
		  /* 820B5C14h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 820B5C14h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B5C14h case    8:*/		return 0x820B5C18;
		  /* 820B5C18h */ case    9:  		/* lwzx R8, <#[R4 + R11]> */
		/* 820B5C18h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 820B5C18h case    9:*/		return 0x820B5C1C;
		  /* 820B5C1Ch */ case   10:  		/* cmplw CR6, R9, R8 */
		/* 820B5C1Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 820B5C1Ch case   10:*/		return 0x820B5C20;
		  /* 820B5C20h */ case   11:  		/* bc 12, CR6_EQ, 120 */
		/* 820B5C20h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B5C98;  }
		/* 820B5C20h case   11:*/		return 0x820B5C24;
		  /* 820B5C24h */ case   12:  		/* cmpwi CR6, R9, -1 */
		/* 820B5C24h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820B5C24h case   12:*/		return 0x820B5C28;
		  /* 820B5C28h */ case   13:  		/* bc 12, CR6_EQ, 88 */
		/* 820B5C28h case   13:*/		if ( regs.CR[6].eq ) { return 0x820B5C80;  }
		/* 820B5C28h case   13:*/		return 0x820B5C2C;
		  /* 820B5C2Ch */ case   14:  		/* lwz R6, <#[R31 + 8]> */
		/* 820B5C2Ch case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5C2Ch case   14:*/		return 0x820B5C30;
		  /* 820B5C30h */ case   15:  		/* rlwinm R3, R9, 2, 0, 29 */
		/* 820B5C30h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R9);
		/* 820B5C30h case   15:*/		return 0x820B5C34;
		  /* 820B5C34h */ case   16:  		/* lwz R7, <#[R6 + 20]> */
		/* 820B5C34h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x00000014) );
		/* 820B5C34h case   16:*/		return 0x820B5C38;
		  /* 820B5C38h */ case   17:  		/* lwz R6, <#[R6 + 116]> */
		/* 820B5C38h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000074) );
		/* 820B5C38h case   17:*/		return 0x820B5C3C;
		  /* 820B5C3Ch */ case   18:  		/* lwzx R3, <#[R3 + R7]> */
		/* 820B5C3Ch case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + regs.R7 + 0x00000000) );
		/* 820B5C3Ch case   18:*/		return 0x820B5C40;
		  /* 820B5C40h */ case   19:  		/* lwz R3, <#[R3 + 4]> */
		/* 820B5C40h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 820B5C40h case   19:*/		return 0x820B5C44;
		  /* 820B5C44h */ case   20:  		/* cmplw CR6, R6, R3 */
		/* 820B5C44h case   20:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R3);
		/* 820B5C44h case   20:*/		return 0x820B5C48;
		  /* 820B5C48h */ case   21:  		/* bc 12, CR6_EQ, 56 */
		/* 820B5C48h case   21:*/		if ( regs.CR[6].eq ) { return 0x820B5C80;  }
		/* 820B5C48h case   21:*/		return 0x820B5C4C;
		  /* 820B5C4Ch */ case   22:  		/* cmpwi CR6, R8, -1 */
		/* 820B5C4Ch case   22:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 820B5C4Ch case   22:*/		return 0x820B5C50;
		  /* 820B5C50h */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 820B5C50h case   23:*/		if ( regs.CR[6].eq ) { return 0x820B5C70;  }
		/* 820B5C50h case   23:*/		return 0x820B5C54;
		  /* 820B5C54h */ case   24:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820B5C54h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820B5C54h case   24:*/		return 0x820B5C58;
		  /* 820B5C58h */ case   25:  		/* lwzx R8, <#[R8 + R7]> */
		/* 820B5C58h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820B5C58h case   25:*/		return 0x820B5C5C;
		  /* 820B5C5Ch */ case   26:  		/* lwz R8, <#[R8 + 4]> */
		/* 820B5C5Ch case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 820B5C5Ch case   26:*/		return 0x820B5C60;
		  /* 820B5C60h */ case   27:  		/* cmplw CR6, R6, R8 */
		/* 820B5C60h case   27:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R8);
		/* 820B5C60h case   27:*/		return 0x820B5C64;
		  /* 820B5C64h */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 820B5C64h case   28:*/		if ( regs.CR[6].eq ) { return 0x820B5C70;  }
		/* 820B5C64h case   28:*/		return 0x820B5C68;
		  /* 820B5C68h */ case   29:  		/* addi R25, R25, 1 */
		/* 820B5C68h case   29:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 820B5C68h case   29:*/		return 0x820B5C6C;
		  /* 820B5C6Ch */ case   30:  		/* b 44 */
		/* 820B5C6Ch case   30:*/		return 0x820B5C98;
		/* 820B5C6Ch case   30:*/		return 0x820B5C70;
	}
	return 0x820B5C70;
} // Block from 820B5BF4h-820B5C70h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820B5C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5C70);
		  /* 820B5C70h */ case    0:  		/* stwx R9, <#[R4 + R11]> */
		/* 820B5C70h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 820B5C70h case    0:*/		return 0x820B5C74;
		  /* 820B5C74h */ case    1:  		/* lwz R8, <#[R31 + 24]> */
		/* 820B5C74h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5C74h case    1:*/		return 0x820B5C78;
		  /* 820B5C78h */ case    2:  		/* stwx R9, <#[R10 + R8]> */
		/* 820B5C78h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820B5C78h case    2:*/		return 0x820B5C7C;
		  /* 820B5C7Ch */ case    3:  		/* b 16 */
		/* 820B5C7Ch case    3:*/		return 0x820B5C8C;
		/* 820B5C7Ch case    3:*/		return 0x820B5C80;
	}
	return 0x820B5C80;
} // Block from 820B5C70h-820B5C80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B5C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5C80);
		  /* 820B5C80h */ case    0:  		/* stw R8, <#[R11]> */
		/* 820B5C80h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820B5C80h case    0:*/		return 0x820B5C84;
		  /* 820B5C84h */ case    1:  		/* lwz R9, <#[R31 + 24]> */
		/* 820B5C84h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5C84h case    1:*/		return 0x820B5C88;
		  /* 820B5C88h */ case    2:  		/* stwx R8, <#[R10 + R9]> */
		/* 820B5C88h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820B5C88h case    2:*/		return 0x820B5C8C;
	}
	return 0x820B5C8C;
} // Block from 820B5C80h-820B5C8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B5C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5C8C);
		  /* 820B5C8Ch */ case    0:  		/* lwz R9, <#[R31 + 24]> */
		/* 820B5C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 820B5C8Ch case    0:*/		return 0x820B5C90;
		  /* 820B5C90h */ case    1:  		/* lwzx R9, <#[R10 + R9]> */
		/* 820B5C90h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820B5C90h case    1:*/		return 0x820B5C94;
		  /* 820B5C94h */ case    2:  		/* stwx R9, <#[R5 + R11]> */
		/* 820B5C94h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 820B5C94h case    2:*/		return 0x820B5C98;
	}
	return 0x820B5C98;
} // Block from 820B5C8Ch-820B5C98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B5C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5C98);
		  /* 820B5C98h */ case    0:  		/* addi R10, R10, 4 */
		/* 820B5C98h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820B5C98h case    0:*/		return 0x820B5C9C;
		  /* 820B5C9Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 820B5C9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B5C9Ch case    1:*/		return 0x820B5CA0;
		  /* 820B5CA0h */ case    2:  		/* bc 16, CR0_LT, -140 */
		/* 820B5CA0h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B5C14;  }
		/* 820B5CA0h case    2:*/		return 0x820B5CA4;
	}
	return 0x820B5CA4;
} // Block from 820B5C98h-820B5CA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B5CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5CA4);
		  /* 820B5CA4h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 820B5CA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820B5CA4h case    0:*/		return 0x820B5CA8;
		  /* 820B5CA8h */ case    1:  		/* bc 12, CR6_EQ, 776 */
		/* 820B5CA8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B5FB0;  }
		/* 820B5CA8h case    1:*/		return 0x820B5CAC;
		  /* 820B5CACh */ case    2:  		/* li R11, 1 */
		/* 820B5CACh case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820B5CACh case    2:*/		return 0x820B5CB0;
		  /* 820B5CB0h */ case    3:  		/* lis R4, 9345 */
		/* 820B5CB0h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B5CB0h case    3:*/		return 0x820B5CB4;
		  /* 820B5CB4h */ case    4:  		/* stw R11, <#[R31 + 104]> */
		/* 820B5CB4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 820B5CB4h case    4:*/		return 0x820B5CB8;
		  /* 820B5CB8h */ case    5:  		/* mulli R3, R25, 24 */
		/* 820B5CB8h case    5:*/		cpu::op::mulli<0>(regs,&regs.R3,regs.R25,0x18);
		/* 820B5CB8h case    5:*/		return 0x820B5CBC;
		  /* 820B5CBCh */ case    6:  		/* bl -187068 */
		/* 820B5CBCh case    6:*/		regs.LR = 0x820B5CC0; return 0x82088200;
		/* 820B5CBCh case    6:*/		return 0x820B5CC0;
		  /* 820B5CC0h */ case    7:  		/* stw R3, <#[R1 + 188]> */
		/* 820B5CC0h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000BC) );
		/* 820B5CC0h case    7:*/		return 0x820B5CC4;
		  /* 820B5CC4h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 820B5CC4h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B5CC4h case    8:*/		return 0x820B5CC8;
		  /* 820B5CC8h */ case    9:  		/* bc 12, CR0_EQ, 944 */
		/* 820B5CC8h case    9:*/		if ( regs.CR[0].eq ) { return 0x820B6078;  }
		/* 820B5CC8h case    9:*/		return 0x820B5CCC;
		  /* 820B5CCCh */ case   10:  		/* li R10, 6 */
		/* 820B5CCCh case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 820B5CCCh case   10:*/		return 0x820B5CD0;
		  /* 820B5CD0h */ case   11:  		/* addi R11, R1, 208 */
		/* 820B5CD0h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 820B5CD0h case   11:*/		return 0x820B5CD4;
		  /* 820B5CD4h */ case   12:  		/* rlwinm R8, R25, 2, 0, 29 */
		/* 820B5CD4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R25);
		/* 820B5CD4h case   12:*/		return 0x820B5CD8;
		  /* 820B5CD8h */ case   13:  		/* addi R9, R11, -4 */
		/* 820B5CD8h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFC);
		/* 820B5CD8h case   13:*/		return 0x820B5CDC;
		  /* 820B5CDCh */ case   14:  		/* mr R11, R3 */
		/* 820B5CDCh case   14:*/		regs.R11 = regs.R3;
		/* 820B5CDCh case   14:*/		return 0x820B5CE0;
		  /* 820B5CE0h */ case   15:  		/* mtspr CTR, R10 */
		/* 820B5CE0h case   15:*/		regs.CTR = regs.R10;
		/* 820B5CE0h case   15:*/		return 0x820B5CE4;
		  /* 820B5CE4h */ case   16:  		/* stwu R11, <#[R9 + 4]> */
		/* 820B5CE4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820B5CE4h case   16:*/		return 0x820B5CE8;
		  /* 820B5CE8h */ case   17:  		/* add R11, R8, R11 */
		/* 820B5CE8h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820B5CE8h case   17:*/		return 0x820B5CEC;
		  /* 820B5CECh */ case   18:  		/* bc 16, CR0_LT, -8 */
		/* 820B5CECh case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B5CE4;  }
		/* 820B5CECh case   18:*/		return 0x820B5CF0;
		  /* 820B5CF0h */ case   19:  		/* lwz R25, <#[R1 + 216]> */
		/* 820B5CF0h case   19:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000D8) );
		/* 820B5CF0h case   19:*/		return 0x820B5CF4;
		  /* 820B5CF4h */ case   20:  		/* mr R27, R18 */
		/* 820B5CF4h case   20:*/		regs.R27 = regs.R18;
		/* 820B5CF4h case   20:*/		return 0x820B5CF8;
		  /* 820B5CF8h */ case   21:  		/* lwz R28, <#[R1 + 212]> */
		/* 820B5CF8h case   21:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000D4) );
		/* 820B5CF8h case   21:*/		return 0x820B5CFC;
		  /* 820B5CFCh */ case   22:  		/* cmplwi CR6, R24, 0 */
		/* 820B5CFCh case   22:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B5CFCh case   22:*/		return 0x820B5D00;
		  /* 820B5D00h */ case   23:  		/* lwz R8, <#[R1 + 208]> */
		/* 820B5D00h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000D0) );
		/* 820B5D00h case   23:*/		return 0x820B5D04;
		  /* 820B5D04h */ case   24:  		/* bc 12, CR6_EQ, 204 */
		/* 820B5D04h case   24:*/		if ( regs.CR[6].eq ) { return 0x820B5DD0;  }
		/* 820B5D04h case   24:*/		return 0x820B5D08;
		  /* 820B5D08h */ case   25:  		/* lwz R10, <#[R1 + 140]> */
		/* 820B5D08h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B5D08h case   25:*/		return 0x820B5D0C;
		  /* 820B5D0Ch */ case   26:  		/* mr R11, R28 */
		/* 820B5D0Ch case   26:*/		regs.R11 = regs.R28;
		/* 820B5D0Ch case   26:*/		return 0x820B5D10;
		  /* 820B5D10h */ case   27:  		/* mtspr CTR, R24 */
		/* 820B5D10h case   27:*/		regs.CTR = regs.R24;
		/* 820B5D10h case   27:*/		return 0x820B5D14;
		  /* 820B5D14h */ case   28:  		/* mr R9, R15 */
		/* 820B5D14h case   28:*/		regs.R9 = regs.R15;
		/* 820B5D14h case   28:*/		return 0x820B5D18;
		  /* 820B5D18h */ case   29:  		/* subf R4, R15, R16 */
		/* 820B5D18h case   29:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R15,regs.R16);
		/* 820B5D18h case   29:*/		return 0x820B5D1C;
		  /* 820B5D1Ch */ case   30:  		/* subf R6, R28, R8 */
		/* 820B5D1Ch case   30:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R28,regs.R8);
		/* 820B5D1Ch case   30:*/		return 0x820B5D20;
		  /* 820B5D20h */ case   31:  		/* subf R5, R15, R10 */
		/* 820B5D20h case   31:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R15,regs.R10);
		/* 820B5D20h case   31:*/		return 0x820B5D24;
		  /* 820B5D24h */ case   32:  		/* subf R7, R28, R25 */
		/* 820B5D24h case   32:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R28,regs.R25);
		/* 820B5D24h case   32:*/		return 0x820B5D28;
		  /* 820B5D28h */ case   33:  		/* lwz R10, <#[R9]> */
		/* 820B5D28h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 820B5D28h case   33:*/		return 0x820B5D2C;
		  /* 820B5D2Ch */ case   34:  		/* lwzx R3, <#[R9 + R5]> */
		/* 820B5D2Ch case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 820B5D2Ch case   34:*/		return 0x820B5D30;
		  /* 820B5D30h */ case   35:  		/* cmplw CR6, R10, R3 */
		/* 820B5D30h case   35:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 820B5D30h case   35:*/		return 0x820B5D34;
		  /* 820B5D34h */ case   36:  		/* bc 12, CR6_EQ, 148 */
		/* 820B5D34h case   36:*/		if ( regs.CR[6].eq ) { return 0x820B5DC8;  }
		/* 820B5D34h case   36:*/		return 0x820B5D38;
		  /* 820B5D38h */ case   37:  		/* lwzx R10, <#[R9 + R4]> */
		/* 820B5D38h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820B5D38h case   37:*/		return 0x820B5D3C;
		  /* 820B5D3Ch */ case   38:  		/* cmpwi CR6, R10, -1 */
		/* 820B5D3Ch case   38:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820B5D3Ch case   38:*/		return 0x820B5D40;
		  /* 820B5D40h */ case   39:  		/* bc 12, CR6_EQ, 136 */
		/* 820B5D40h case   39:*/		if ( regs.CR[6].eq ) { return 0x820B5DC8;  }
		/* 820B5D40h case   39:*/		return 0x820B5D44;
		  /* 820B5D44h */ case   40:  		/* lwz R10, <#[R1 + 128]> */
		/* 820B5D44h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 820B5D44h case   40:*/		return 0x820B5D48;
		  /* 820B5D48h */ case   41:  		/* cmpwi CR6, R20, 0 */
		/* 820B5D48h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 820B5D48h case   41:*/		return 0x820B5D4C;
		  /* 820B5D4Ch */ case   42:  		/* bc 4, CR6_EQ, 8 */
		/* 820B5D4Ch case   42:*/		if ( !regs.CR[6].eq ) { return 0x820B5D54;  }
		/* 820B5D4Ch case   42:*/		return 0x820B5D50;
		  /* 820B5D50h */ case   43:  		/* lwz R10, <#[R1 + 132]> */
		/* 820B5D50h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 820B5D50h case   43:*/		return 0x820B5D54;
	}
	return 0x820B5D54;
} // Block from 820B5CA4h-820B5D54h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820B5D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5D54);
		  /* 820B5D54h */ case    0:  		/* stwx R10, <#[R11 + R6]> */
		/* 820B5D54h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820B5D54h case    0:*/		return 0x820B5D58;
		  /* 820B5D58h */ case    1:  		/* lwz R10, <#[R9]> */
		/* 820B5D58h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 820B5D58h case    1:*/		return 0x820B5D5C;
		  /* 820B5D5Ch */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 820B5D5Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820B5D5Ch case    2:*/		return 0x820B5D60;
		  /* 820B5D60h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 820B5D60h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B5D84;  }
		/* 820B5D60h case    3:*/		return 0x820B5D64;
		  /* 820B5D64h */ case    4:  		/* lwz R3, <#[R31 + 8]> */
		/* 820B5D64h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5D64h case    4:*/		return 0x820B5D68;
		  /* 820B5D68h */ case    5:  		/* rlwinm R30, R10, 2, 0, 29 */
		/* 820B5D68h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R10);
		/* 820B5D68h case    5:*/		return 0x820B5D6C;
		  /* 820B5D6Ch */ case    6:  		/* lwz R29, <#[R3 + 20]> */
		/* 820B5D6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000014) );
		/* 820B5D6Ch case    6:*/		return 0x820B5D70;
		  /* 820B5D70h */ case    7:  		/* lwz R3, <#[R3 + 116]> */
		/* 820B5D70h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000074) );
		/* 820B5D70h case    7:*/		return 0x820B5D74;
		  /* 820B5D74h */ case    8:  		/* lwzx R30, <#[R30 + R29]> */
		/* 820B5D74h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + regs.R29 + 0x00000000) );
		/* 820B5D74h case    8:*/		return 0x820B5D78;
		  /* 820B5D78h */ case    9:  		/* lwz R30, <#[R30 + 4]> */
		/* 820B5D78h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 820B5D78h case    9:*/		return 0x820B5D7C;
		  /* 820B5D7Ch */ case   10:  		/* cmplw CR6, R3, R30 */
		/* 820B5D7Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 820B5D7Ch case   10:*/		return 0x820B5D80;
		  /* 820B5D80h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 820B5D80h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820B5D88;  }
		/* 820B5D80h case   11:*/		return 0x820B5D84;
	}
	return 0x820B5D84;
} // Block from 820B5D54h-820B5D84h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820B5D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5D84);
		  /* 820B5D84h */ case    0:  		/* lwz R10, <#[R31 + 36]> */
		/* 820B5D84h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 820B5D84h case    0:*/		return 0x820B5D88;
	}
	return 0x820B5D88;
} // Block from 820B5D84h-820B5D88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B5D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5D88);
		  /* 820B5D88h */ case    0:  		/* stw R10, <#[R11]> */
		/* 820B5D88h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820B5D88h case    0:*/		return 0x820B5D8C;
		  /* 820B5D8Ch */ case    1:  		/* lwzx R10, <#[R9 + R5]> */
		/* 820B5D8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 820B5D8Ch case    1:*/		return 0x820B5D90;
		  /* 820B5D90h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 820B5D90h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820B5D90h case    2:*/		return 0x820B5D94;
		  /* 820B5D94h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 820B5D94h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B5DB8;  }
		/* 820B5D94h case    3:*/		return 0x820B5D98;
		  /* 820B5D98h */ case    4:  		/* lwz R3, <#[R31 + 8]> */
		/* 820B5D98h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5D98h case    4:*/		return 0x820B5D9C;
		  /* 820B5D9Ch */ case    5:  		/* rlwinm R30, R10, 2, 0, 29 */
		/* 820B5D9Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R10);
		/* 820B5D9Ch case    5:*/		return 0x820B5DA0;
		  /* 820B5DA0h */ case    6:  		/* lwz R29, <#[R3 + 20]> */
		/* 820B5DA0h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000014) );
		/* 820B5DA0h case    6:*/		return 0x820B5DA4;
		  /* 820B5DA4h */ case    7:  		/* lwz R3, <#[R3 + 116]> */
		/* 820B5DA4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000074) );
		/* 820B5DA4h case    7:*/		return 0x820B5DA8;
		  /* 820B5DA8h */ case    8:  		/* lwzx R30, <#[R29 + R30]> */
		/* 820B5DA8h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + regs.R30 + 0x00000000) );
		/* 820B5DA8h case    8:*/		return 0x820B5DAC;
		  /* 820B5DACh */ case    9:  		/* lwz R30, <#[R30 + 4]> */
		/* 820B5DACh case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 820B5DACh case    9:*/		return 0x820B5DB0;
		  /* 820B5DB0h */ case   10:  		/* cmplw CR6, R3, R30 */
		/* 820B5DB0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 820B5DB0h case   10:*/		return 0x820B5DB4;
		  /* 820B5DB4h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 820B5DB4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820B5DBC;  }
		/* 820B5DB4h case   11:*/		return 0x820B5DB8;
	}
	return 0x820B5DB8;
} // Block from 820B5D88h-820B5DB8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820B5DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5DB8);
		  /* 820B5DB8h */ case    0:  		/* lwz R10, <#[R31 + 36]> */
		/* 820B5DB8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 820B5DB8h case    0:*/		return 0x820B5DBC;
	}
	return 0x820B5DBC;
} // Block from 820B5DB8h-820B5DBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B5DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5DBC);
		  /* 820B5DBCh */ case    0:  		/* stwx R10, <#[R11 + R7]> */
		/* 820B5DBCh case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820B5DBCh case    0:*/		return 0x820B5DC0;
		  /* 820B5DC0h */ case    1:  		/* addi R27, R27, 1 */
		/* 820B5DC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820B5DC0h case    1:*/		return 0x820B5DC4;
		  /* 820B5DC4h */ case    2:  		/* addi R11, R11, 4 */
		/* 820B5DC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B5DC4h case    2:*/		return 0x820B5DC8;
	}
	return 0x820B5DC8;
} // Block from 820B5DBCh-820B5DC8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B5DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5DC8);
		  /* 820B5DC8h */ case    0:  		/* addi R9, R9, 4 */
		/* 820B5DC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820B5DC8h case    0:*/		return 0x820B5DCC;
		  /* 820B5DCCh */ case    1:  		/* bc 16, CR0_LT, -164 */
		/* 820B5DCCh case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B5D28;  }
		/* 820B5DCCh case    1:*/		return 0x820B5DD0;
	}
	return 0x820B5DD0;
} // Block from 820B5DC8h-820B5DD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B5DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5DD0);
		  /* 820B5DD0h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 820B5DD0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820B5DD0h case    0:*/		return 0x820B5DD4;
		  /* 820B5DD4h */ case    1:  		/* mr R7, R28 */
		/* 820B5DD4h case    1:*/		regs.R7 = regs.R28;
		/* 820B5DD4h case    1:*/		return 0x820B5DD8;
		  /* 820B5DD8h */ case    2:  		/* mr R4, R14 */
		/* 820B5DD8h case    2:*/		regs.R4 = regs.R14;
		/* 820B5DD8h case    2:*/		return 0x820B5DDC;
		  /* 820B5DDCh */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 820B5DDCh case    3:*/		if ( regs.CR[6].eq ) { return 0x820B5DFC;  }
		/* 820B5DDCh case    3:*/		return 0x820B5DE0;
		  /* 820B5DE0h */ case    4:  		/* lwz R29, <#[R1 + 220]> */
		/* 820B5DE0h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000DC) );
		/* 820B5DE0h case    4:*/		return 0x820B5DE4;
		  /* 820B5DE4h */ case    5:  		/* mr R9, R27 */
		/* 820B5DE4h case    5:*/		regs.R9 = regs.R27;
		/* 820B5DE4h case    5:*/		return 0x820B5DE8;
		  /* 820B5DE8h */ case    6:  		/* mr R6, R25 */
		/* 820B5DE8h case    6:*/		regs.R6 = regs.R25;
		/* 820B5DE8h case    6:*/		return 0x820B5DEC;
		  /* 820B5DECh */ case    7:  		/* mr R5, R29 */
		/* 820B5DECh case    7:*/		regs.R5 = regs.R29;
		/* 820B5DECh case    7:*/		return 0x820B5DF0;
		  /* 820B5DF0h */ case    8:  		/* mr R3, R31 */
		/* 820B5DF0h case    8:*/		regs.R3 = regs.R31;
		/* 820B5DF0h case    8:*/		return 0x820B5DF4;
		  /* 820B5DF4h */ case    9:  		/* bl -10356 */
		/* 820B5DF4h case    9:*/		regs.LR = 0x820B5DF8; return 0x820B3580;
		/* 820B5DF4h case    9:*/		return 0x820B5DF8;
		  /* 820B5DF8h */ case   10:  		/* b 300 */
		/* 820B5DF8h case   10:*/		return 0x820B5F24;
		/* 820B5DF8h case   10:*/		return 0x820B5DFC;
	}
	return 0x820B5DFC;
} // Block from 820B5DD0h-820B5DFCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B5DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5DFC);
		  /* 820B5DFCh */ case    0:  		/* lwz R11, <#[R1 + 136]> */
		/* 820B5DFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820B5DFCh case    0:*/		return 0x820B5E00;
		  /* 820B5E00h */ case    1:  		/* rlwinm R26, R27, 0, 12, 31 */
		/* 820B5E00h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R27);
		/* 820B5E00h case    1:*/		return 0x820B5E04;
		  /* 820B5E04h */ case    2:  		/* stw R20, <#[R31 + 52]> */
		/* 820B5E04h case    2:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000034) );
		/* 820B5E04h case    2:*/		return 0x820B5E08;
		  /* 820B5E08h */ case    3:  		/* li R9, 0 */
		/* 820B5E08h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B5E08h case    3:*/		return 0x820B5E0C;
		  /* 820B5E0Ch */ case    4:  		/* oris R29, R26, 4096 */
		/* 820B5E0Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R26,0x1000);
		/* 820B5E0Ch case    4:*/		return 0x820B5E10;
		  /* 820B5E10h */ case    5:  		/* li R8, 0 */
		/* 820B5E10h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B5E10h case    5:*/		return 0x820B5E14;
		  /* 820B5E14h */ case    6:  		/* mr R6, R28 */
		/* 820B5E14h case    6:*/		regs.R6 = regs.R28;
		/* 820B5E14h case    6:*/		return 0x820B5E18;
		  /* 820B5E18h */ case    7:  		/* stw R11, <#[R31 + 48]> */
		/* 820B5E18h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B5E18h case    7:*/		return 0x820B5E1C;
		  /* 820B5E1Ch */ case    8:  		/* mr R5, R29 */
		/* 820B5E1Ch case    8:*/		regs.R5 = regs.R29;
		/* 820B5E1Ch case    8:*/		return 0x820B5E20;
		  /* 820B5E20h */ case    9:  		/* mr R3, R31 */
		/* 820B5E20h case    9:*/		regs.R3 = regs.R31;
		/* 820B5E20h case    9:*/		return 0x820B5E24;
		  /* 820B5E24h */ case   10:  		/* bl -21276 */
		/* 820B5E24h case   10:*/		regs.LR = 0x820B5E28; return 0x820B0B08;
		/* 820B5E24h case   10:*/		return 0x820B5E28;
		  /* 820B5E28h */ case   11:  		/* or. R30, R3, R3 */
		/* 820B5E28h case   11:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5E28h case   11:*/		return 0x820B5E2C;
		  /* 820B5E2Ch */ case   12:  		/* bc 12, CR0_LT, 596 */
		/* 820B5E2Ch case   12:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5E2Ch case   12:*/		return 0x820B5E30;
		  /* 820B5E30h */ case   13:  		/* cmplwi CR6, R27, 0 */
		/* 820B5E30h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820B5E30h case   13:*/		return 0x820B5E34;
		  /* 820B5E34h */ case   14:  		/* bc 12, CR6_EQ, 44 */
		/* 820B5E34h case   14:*/		if ( regs.CR[6].eq ) { return 0x820B5E60;  }
		/* 820B5E34h case   14:*/		return 0x820B5E38;
		  /* 820B5E38h */ case   15:  		/* addi R11, R28, -4 */
		/* 820B5E38h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B5E38h case   15:*/		return 0x820B5E3C;
		  /* 820B5E3Ch */ case   16:  		/* mtspr CTR, R27 */
		/* 820B5E3Ch case   16:*/		regs.CTR = regs.R27;
		/* 820B5E3Ch case   16:*/		return 0x820B5E40;
		  /* 820B5E40h */ case   17:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B5E40h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5E40h case   17:*/		return 0x820B5E44;
		  /* 820B5E44h */ case   18:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820B5E44h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B5E44h case   18:*/		return 0x820B5E48;
		  /* 820B5E48h */ case   19:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B5E48h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B5E48h case   19:*/		return 0x820B5E4C;
		  /* 820B5E4Ch */ case   20:  		/* lwz R8, <#[R9 + 20]> */
		/* 820B5E4Ch case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820B5E4Ch case   20:*/		return 0x820B5E50;
		  /* 820B5E50h */ case   21:  		/* lwz R9, <#[R9 + 152]> */
		/* 820B5E50h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000098) );
		/* 820B5E50h case   21:*/		return 0x820B5E54;
		  /* 820B5E54h */ case   22:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B5E54h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B5E54h case   22:*/		return 0x820B5E58;
		  /* 820B5E58h */ case   23:  		/* stw R9, <#[R10 + 4]> */
		/* 820B5E58h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820B5E58h case   23:*/		return 0x820B5E5C;
		  /* 820B5E5Ch */ case   24:  		/* bc 16, CR0_LT, -28 */
		/* 820B5E5Ch case   24:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B5E40;  }
		/* 820B5E5Ch case   24:*/		return 0x820B5E60;
	}
	return 0x820B5E60;
} // Block from 820B5DFCh-820B5E60h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820B5E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5E60);
		  /* 820B5E60h */ case    0:  		/* lwz R11, <#[R1 + 136]> */
		/* 820B5E60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820B5E60h case    0:*/		return 0x820B5E64;
		  /* 820B5E64h */ case    1:  		/* cntlzw R10, R20 */
		/* 820B5E64h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R20);
		/* 820B5E64h case    1:*/		return 0x820B5E68;
		  /* 820B5E68h */ case    2:  		/* li R9, 0 */
		/* 820B5E68h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B5E68h case    2:*/		return 0x820B5E6C;
		  /* 820B5E6Ch */ case    3:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 820B5E6Ch case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 820B5E6Ch case    3:*/		return 0x820B5E70;
		  /* 820B5E70h */ case    4:  		/* li R8, 0 */
		/* 820B5E70h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B5E70h case    4:*/		return 0x820B5E74;
		  /* 820B5E74h */ case    5:  		/* stw R10, <#[R31 + 52]> */
		/* 820B5E74h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B5E74h case    5:*/		return 0x820B5E78;
		  /* 820B5E78h */ case    6:  		/* mr R7, R25 */
		/* 820B5E78h case    6:*/		regs.R7 = regs.R25;
		/* 820B5E78h case    6:*/		return 0x820B5E7C;
		  /* 820B5E7Ch */ case    7:  		/* stw R11, <#[R31 + 48]> */
		/* 820B5E7Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B5E7Ch case    7:*/		return 0x820B5E80;
		  /* 820B5E80h */ case    8:  		/* mr R6, R25 */
		/* 820B5E80h case    8:*/		regs.R6 = regs.R25;
		/* 820B5E80h case    8:*/		return 0x820B5E84;
		  /* 820B5E84h */ case    9:  		/* mr R5, R29 */
		/* 820B5E84h case    9:*/		regs.R5 = regs.R29;
		/* 820B5E84h case    9:*/		return 0x820B5E88;
		  /* 820B5E88h */ case   10:  		/* mr R4, R14 */
		/* 820B5E88h case   10:*/		regs.R4 = regs.R14;
		/* 820B5E88h case   10:*/		return 0x820B5E8C;
		  /* 820B5E8Ch */ case   11:  		/* mr R3, R31 */
		/* 820B5E8Ch case   11:*/		regs.R3 = regs.R31;
		/* 820B5E8Ch case   11:*/		return 0x820B5E90;
		  /* 820B5E90h */ case   12:  		/* bl -21384 */
		/* 820B5E90h case   12:*/		regs.LR = 0x820B5E94; return 0x820B0B08;
		/* 820B5E90h case   12:*/		return 0x820B5E94;
		  /* 820B5E94h */ case   13:  		/* or. R30, R3, R3 */
		/* 820B5E94h case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5E94h case   13:*/		return 0x820B5E98;
		  /* 820B5E98h */ case   14:  		/* bc 12, CR0_LT, 488 */
		/* 820B5E98h case   14:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5E98h case   14:*/		return 0x820B5E9C;
		  /* 820B5E9Ch */ case   15:  		/* cmplwi CR6, R27, 0 */
		/* 820B5E9Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820B5E9Ch case   15:*/		return 0x820B5EA0;
		  /* 820B5EA0h */ case   16:  		/* bc 12, CR6_EQ, 44 */
		/* 820B5EA0h case   16:*/		if ( regs.CR[6].eq ) { return 0x820B5ECC;  }
		/* 820B5EA0h case   16:*/		return 0x820B5EA4;
		  /* 820B5EA4h */ case   17:  		/* addi R11, R25, -4 */
		/* 820B5EA4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820B5EA4h case   17:*/		return 0x820B5EA8;
		  /* 820B5EA8h */ case   18:  		/* mtspr CTR, R27 */
		/* 820B5EA8h case   18:*/		regs.CTR = regs.R27;
		/* 820B5EA8h case   18:*/		return 0x820B5EAC;
		  /* 820B5EACh */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B5EACh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5EACh case   19:*/		return 0x820B5EB0;
		  /* 820B5EB0h */ case   20:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820B5EB0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B5EB0h case   20:*/		return 0x820B5EB4;
		  /* 820B5EB4h */ case   21:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B5EB4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B5EB4h case   21:*/		return 0x820B5EB8;
		  /* 820B5EB8h */ case   22:  		/* lwz R8, <#[R9 + 20]> */
		/* 820B5EB8h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820B5EB8h case   22:*/		return 0x820B5EBC;
		  /* 820B5EBCh */ case   23:  		/* lwz R9, <#[R9 + 152]> */
		/* 820B5EBCh case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000098) );
		/* 820B5EBCh case   23:*/		return 0x820B5EC0;
		  /* 820B5EC0h */ case   24:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B5EC0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B5EC0h case   24:*/		return 0x820B5EC4;
		  /* 820B5EC4h */ case   25:  		/* stw R9, <#[R10 + 4]> */
		/* 820B5EC4h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820B5EC4h case   25:*/		return 0x820B5EC8;
		  /* 820B5EC8h */ case   26:  		/* bc 16, CR0_LT, -28 */
		/* 820B5EC8h case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B5EAC;  }
		/* 820B5EC8h case   26:*/		return 0x820B5ECC;
	}
	return 0x820B5ECC;
} // Block from 820B5E60h-820B5ECCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 820B5ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5ECC);
		  /* 820B5ECCh */ case    0:  		/* lwz R11, <#[R1 + 164]> */
		/* 820B5ECCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B5ECCh case    0:*/		return 0x820B5ED0;
		  /* 820B5ED0h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 820B5ED0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820B5ED0h case    1:*/		return 0x820B5ED4;
		  /* 820B5ED4h */ case    2:  		/* lwz R10, <#[R1 + 168]> */
		/* 820B5ED4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B5ED4h case    2:*/		return 0x820B5ED8;
		  /* 820B5ED8h */ case    3:  		/* lwz R29, <#[R1 + 220]> */
		/* 820B5ED8h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000DC) );
		/* 820B5ED8h case    3:*/		return 0x820B5EDC;
		  /* 820B5EDCh */ case    4:  		/* stw R11, <#[R31 + 48]> */
		/* 820B5EDCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B5EDCh case    4:*/		return 0x820B5EE0;
		  /* 820B5EE0h */ case    5:  		/* stw R10, <#[R31 + 52]> */
		/* 820B5EE0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B5EE0h case    5:*/		return 0x820B5EE4;
		  /* 820B5EE4h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 820B5EE4h case    6:*/		if ( regs.CR[6].eq ) { return 0x820B5F04;  }
		/* 820B5EE4h case    6:*/		return 0x820B5EE8;
		  /* 820B5EE8h */ case    7:  		/* addi R11, R29, -4 */
		/* 820B5EE8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFC);
		/* 820B5EE8h case    7:*/		return 0x820B5EEC;
		  /* 820B5EECh */ case    8:  		/* mr R10, R19 */
		/* 820B5EECh case    8:*/		regs.R10 = regs.R19;
		/* 820B5EECh case    8:*/		return 0x820B5EF0;
		  /* 820B5EF0h */ case    9:  		/* cmplwi CR0, R27, 0 */
		/* 820B5EF0h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R27,0x00000000);
		/* 820B5EF0h case    9:*/		return 0x820B5EF4;
		  /* 820B5EF4h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 820B5EF4h case   10:*/		if ( regs.CR[0].eq ) { return 0x820B5F04;  }
		/* 820B5EF4h case   10:*/		return 0x820B5EF8;
		  /* 820B5EF8h */ case   11:  		/* mtspr CTR, R27 */
		/* 820B5EF8h case   11:*/		regs.CTR = regs.R27;
		/* 820B5EF8h case   11:*/		return 0x820B5EFC;
		  /* 820B5EFCh */ case   12:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B5EFCh case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B5EFCh case   12:*/		return 0x820B5F00;
		  /* 820B5F00h */ case   13:  		/* bc 16, CR0_LT, -4 */
		/* 820B5F00h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B5EFC;  }
		/* 820B5F00h case   13:*/		return 0x820B5F04;
	}
	return 0x820B5F04;
} // Block from 820B5ECCh-820B5F04h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820B5F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5F04);
		  /* 820B5F04h */ case    0:  		/* li R9, 0 */
		/* 820B5F04h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B5F04h case    0:*/		return 0x820B5F08;
		  /* 820B5F08h */ case    1:  		/* mr R8, R25 */
		/* 820B5F08h case    1:*/		regs.R8 = regs.R25;
		/* 820B5F08h case    1:*/		return 0x820B5F0C;
		  /* 820B5F0Ch */ case    2:  		/* mr R7, R28 */
		/* 820B5F0Ch case    2:*/		regs.R7 = regs.R28;
		/* 820B5F0Ch case    2:*/		return 0x820B5F10;
		  /* 820B5F10h */ case    3:  		/* mr R6, R29 */
		/* 820B5F10h case    3:*/		regs.R6 = regs.R29;
		/* 820B5F10h case    3:*/		return 0x820B5F14;
		  /* 820B5F14h */ case    4:  		/* oris R5, R26, 8304 */
		/* 820B5F14h case    4:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R26,0x2070);
		/* 820B5F14h case    4:*/		return 0x820B5F18;
		  /* 820B5F18h */ case    5:  		/* mr R4, R14 */
		/* 820B5F18h case    5:*/		regs.R4 = regs.R14;
		/* 820B5F18h case    5:*/		return 0x820B5F1C;
		  /* 820B5F1Ch */ case    6:  		/* mr R3, R31 */
		/* 820B5F1Ch case    6:*/		regs.R3 = regs.R31;
		/* 820B5F1Ch case    6:*/		return 0x820B5F20;
		  /* 820B5F20h */ case    7:  		/* bl -21528 */
		/* 820B5F20h case    7:*/		regs.LR = 0x820B5F24; return 0x820B0B08;
		/* 820B5F20h case    7:*/		return 0x820B5F24;
	}
	return 0x820B5F24;
} // Block from 820B5F04h-820B5F24h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B5F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5F24);
		  /* 820B5F24h */ case    0:  		/* or. R30, R3, R3 */
		/* 820B5F24h case    0:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B5F24h case    0:*/		return 0x820B5F28;
		  /* 820B5F28h */ case    1:  		/* bc 12, CR0_LT, 344 */
		/* 820B5F28h case    1:*/		if ( regs.CR[0].lt ) { return 0x820B6080;  }
		/* 820B5F28h case    1:*/		return 0x820B5F2C;
		  /* 820B5F2Ch */ case    2:  		/* mr R27, R18 */
		/* 820B5F2Ch case    2:*/		regs.R27 = regs.R18;
		/* 820B5F2Ch case    2:*/		return 0x820B5F30;
		  /* 820B5F30h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 820B5F30h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B5F30h case    3:*/		return 0x820B5F34;
		  /* 820B5F34h */ case    4:  		/* bc 12, CR6_EQ, 120 */
		/* 820B5F34h case    4:*/		if ( regs.CR[6].eq ) { return 0x820B5FAC;  }
		/* 820B5F34h case    4:*/		return 0x820B5F38;
		  /* 820B5F38h */ case    5:  		/* lwz R11, <#[R1 + 140]> */
		/* 820B5F38h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B5F38h case    5:*/		return 0x820B5F3C;
		  /* 820B5F3Ch */ case    6:  		/* mr R30, R16 */
		/* 820B5F3Ch case    6:*/		regs.R30 = regs.R16;
		/* 820B5F3Ch case    6:*/		return 0x820B5F40;
		  /* 820B5F40h */ case    7:  		/* addi R29, R29, -4 */
		/* 820B5F40h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFC);
		/* 820B5F40h case    7:*/		return 0x820B5F44;
		  /* 820B5F44h */ case    8:  		/* subf R26, R15, R11 */
		/* 820B5F44h case    8:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R15,regs.R11);
		/* 820B5F44h case    8:*/		return 0x820B5F48;
		  /* 820B5F48h */ case    9:  		/* subf R28, R16, R15 */
		/* 820B5F48h case    9:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R16,regs.R15);
		/* 820B5F48h case    9:*/		return 0x820B5F4C;
		  /* 820B5F4Ch */ case   10:  		/* add R11, R28, R30 */
		/* 820B5F4Ch case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R30);
		/* 820B5F4Ch case   10:*/		return 0x820B5F50;
		  /* 820B5F50h */ case   11:  		/* lwzx R10, <#[R28 + R30]> */
		/* 820B5F50h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + regs.R30 + 0x00000000) );
		/* 820B5F50h case   11:*/		return 0x820B5F54;
		  /* 820B5F54h */ case   12:  		/* lwzx R11, <#[R26 + R11]> */
		/* 820B5F54h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R11 + 0x00000000) );
		/* 820B5F54h case   12:*/		return 0x820B5F58;
		  /* 820B5F58h */ case   13:  		/* cmplw CR6, R10, R11 */
		/* 820B5F58h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820B5F58h case   13:*/		return 0x820B5F5C;
		  /* 820B5F5Ch */ case   14:  		/* bc 12, CR6_EQ, 64 */
		/* 820B5F5Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x820B5F9C;  }
		/* 820B5F5Ch case   14:*/		return 0x820B5F60;
		  /* 820B5F60h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 820B5F60h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820B5F60h case   15:*/		return 0x820B5F64;
		  /* 820B5F64h */ case   16:  		/* cmpwi CR6, R11, -1 */
		/* 820B5F64h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820B5F64h case   16:*/		return 0x820B5F68;
		  /* 820B5F68h */ case   17:  		/* bc 12, CR6_EQ, 52 */
		/* 820B5F68h case   17:*/		if ( regs.CR[6].eq ) { return 0x820B5F9C;  }
		/* 820B5F68h case   17:*/		return 0x820B5F6C;
		  /* 820B5F6Ch */ case   18:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B5F6Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B5F6Ch case   18:*/		return 0x820B5F70;
		  /* 820B5F70h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B5F70h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B5F70h case   19:*/		return 0x820B5F74;
		  /* 820B5F74h */ case   20:  		/* lwz R9, <#[R29 + 4]> */
		/* 820B5F74h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 820B5F74h case   20:*/		return 0x820B5F78;
		  /* 820B5F78h */ case   21:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B5F78h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B5F78h case   21:*/		return 0x820B5F7C;
		  /* 820B5F7Ch */ case   22:  		/* lwz R10, <#[R10 + 20]> */
		/* 820B5F7Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820B5F7Ch case   22:*/		return 0x820B5F80;
		  /* 820B5F80h */ case   23:  		/* lwzx R25, <#[R9 + R10]> */
		/* 820B5F80h case   23:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820B5F80h case   23:*/		return 0x820B5F84;
		  /* 820B5F84h */ case   24:  		/* lwzx R4, <#[R11 + R10]> */
		/* 820B5F84h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B5F84h case   24:*/		return 0x820B5F88;
		  /* 820B5F88h */ case   25:  		/* mr R3, R25 */
		/* 820B5F88h case   25:*/		regs.R3 = regs.R25;
		/* 820B5F88h case   25:*/		return 0x820B5F8C;
		  /* 820B5F8Ch */ case   26:  		/* bl 290068 */
		/* 820B5F8Ch case   26:*/		regs.LR = 0x820B5F90; return 0x820FCCA0;
		/* 820B5F8Ch case   26:*/		return 0x820B5F90;
		  /* 820B5F90h */ case   27:  		/* lwzu R11, <#[R29 + 4]> */
		/* 820B5F90h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 820B5F90h case   27:*/		return 0x820B5F94;
		  /* 820B5F94h */ case   28:  		/* stw R11, <#[R30]> */
		/* 820B5F94h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820B5F94h case   28:*/		return 0x820B5F98;
		  /* 820B5F98h */ case   29:  		/* stw R27, <#[R25 + 48]> */
		/* 820B5F98h case   29:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R25 + 0x00000030) );
		/* 820B5F98h case   29:*/		return 0x820B5F9C;
	}
	return 0x820B5F9C;
} // Block from 820B5F24h-820B5F9Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 820B5F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5F9C);
		  /* 820B5F9Ch */ case    0:  		/* addi R27, R27, 1 */
		/* 820B5F9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820B5F9Ch case    0:*/		return 0x820B5FA0;
		  /* 820B5FA0h */ case    1:  		/* addi R30, R30, 4 */
		/* 820B5FA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B5FA0h case    1:*/		return 0x820B5FA4;
		  /* 820B5FA4h */ case    2:  		/* cmplw CR6, R27, R24 */
		/* 820B5FA4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R24);
		/* 820B5FA4h case    2:*/		return 0x820B5FA8;
		  /* 820B5FA8h */ case    3:  		/* bc 12, CR6_LT, -92 */
		/* 820B5FA8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820B5F4C;  }
		/* 820B5FA8h case    3:*/		return 0x820B5FAC;
	}
	return 0x820B5FAC;
} // Block from 820B5F9Ch-820B5FACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B5FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5FAC);
		  /* 820B5FACh */ case    0:  		/* stw R18, <#[R31 + 104]> */
		/* 820B5FACh case    0:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000068) );
		/* 820B5FACh case    0:*/		return 0x820B5FB0;
	}
	return 0x820B5FB0;
} // Block from 820B5FACh-820B5FB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B5FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5FB0);
		  /* 820B5FB0h */ case    0:  		/* lwz R7, <#[R1 + 184]> */
		/* 820B5FB0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B5FB0h case    0:*/		return 0x820B5FB4;
		  /* 820B5FB4h */ case    1:  		/* lwz R10, <#[R1 + 148]> */
		/* 820B5FB4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 820B5FB4h case    1:*/		return 0x820B5FB8;
		  /* 820B5FB8h */ case    2:  		/* lwz R9, <#[R1 + 152]> */
		/* 820B5FB8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000098) );
		/* 820B5FB8h case    2:*/		return 0x820B5FBC;
		  /* 820B5FBCh */ case    3:  		/* cmpwi CR6, R7, 0 */
		/* 820B5FBCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 820B5FBCh case    3:*/		return 0x820B5FC0;
		  /* 820B5FC0h */ case    4:  		/* lwz R8, <#[R1 + 160]> */
		/* 820B5FC0h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B5FC0h case    4:*/		return 0x820B5FC4;
		  /* 820B5FC4h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 820B5FC4h case    5:*/		if ( regs.CR[6].eq ) { return 0x820B5FD4;  }
		/* 820B5FC4h case    5:*/		return 0x820B5FC8;
		  /* 820B5FC8h */ case    6:  		/* cmpwi CR6, R8, 0 */
		/* 820B5FC8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820B5FC8h case    6:*/		return 0x820B5FCC;
		  /* 820B5FCCh */ case    7:  		/* li R11, 1 */
		/* 820B5FCCh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820B5FCCh case    7:*/		return 0x820B5FD0;
		  /* 820B5FD0h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 820B5FD0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820B5FD8;  }
		/* 820B5FD0h case    8:*/		return 0x820B5FD4;
	}
	return 0x820B5FD4;
} // Block from 820B5FB0h-820B5FD4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B5FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5FD4);
		  /* 820B5FD4h */ case    0:  		/* mr R11, R18 */
		/* 820B5FD4h case    0:*/		regs.R11 = regs.R18;
		/* 820B5FD4h case    0:*/		return 0x820B5FD8;
	}
	return 0x820B5FD8;
} // Block from 820B5FD4h-820B5FD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B5FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5FD8);
		  /* 820B5FD8h */ case    0:  		/* stw R11, <#[R31 + 84]> */
		/* 820B5FD8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B5FD8h case    0:*/		return 0x820B5FDC;
		  /* 820B5FDCh */ case    1:  		/* cmpwi CR6, R10, 0 */
		/* 820B5FDCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820B5FDCh case    1:*/		return 0x820B5FE0;
		  /* 820B5FE0h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820B5FE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B5FF4;  }
		/* 820B5FE0h case    2:*/		return 0x820B5FE4;
		  /* 820B5FE4h */ case    3:  		/* cmpwi CR6, R9, 0 */
		/* 820B5FE4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820B5FE4h case    3:*/		return 0x820B5FE8;
		  /* 820B5FE8h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 820B5FE8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820B600C;  }
		/* 820B5FE8h case    4:*/		return 0x820B5FEC;
		  /* 820B5FECh */ case    5:  		/* cmpwi CR6, R8, 0 */
		/* 820B5FECh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820B5FECh case    5:*/		return 0x820B5FF0;
		  /* 820B5FF0h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 820B5FF0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820B600C;  }
		/* 820B5FF0h case    6:*/		return 0x820B5FF4;
	}
	return 0x820B5FF4;
} // Block from 820B5FD8h-820B5FF4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B5FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B5FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B5FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B5FF4);
		  /* 820B5FF4h */ case    0:  		/* cmpwi CR6, R9, 0 */
		/* 820B5FF4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820B5FF4h case    0:*/		return 0x820B5FF8;
		  /* 820B5FF8h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B5FF8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B6014;  }
		/* 820B5FF8h case    1:*/		return 0x820B5FFC;
		  /* 820B5FFCh */ case    2:  		/* cmpwi CR6, R10, 0 */
		/* 820B5FFCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820B5FFCh case    2:*/		return 0x820B6000;
		  /* 820B6000h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 820B6000h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820B600C;  }
		/* 820B6000h case    3:*/		return 0x820B6004;
		  /* 820B6004h */ case    4:  		/* cmpwi CR6, R7, 0 */
		/* 820B6004h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 820B6004h case    4:*/		return 0x820B6008;
		  /* 820B6008h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 820B6008h case    5:*/		if ( regs.CR[6].eq ) { return 0x820B6014;  }
		/* 820B6008h case    5:*/		return 0x820B600C;
	}
	return 0x820B600C;
} // Block from 820B5FF4h-820B600Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820B600Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B600C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B600C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B600C);
		  /* 820B600Ch */ case    0:  		/* li R11, 1 */
		/* 820B600Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820B600Ch case    0:*/		return 0x820B6010;
		  /* 820B6010h */ case    1:  		/* b 8 */
		/* 820B6010h case    1:*/		return 0x820B6018;
		/* 820B6010h case    1:*/		return 0x820B6014;
	}
	return 0x820B6014;
} // Block from 820B600Ch-820B6014h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B6014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6014);
		  /* 820B6014h */ case    0:  		/* mr R11, R18 */
		/* 820B6014h case    0:*/		regs.R11 = regs.R18;
		/* 820B6014h case    0:*/		return 0x820B6018;
	}
	return 0x820B6018;
} // Block from 820B6014h-820B6018h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B6018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6018);
		  /* 820B6018h */ case    0:  		/* stw R11, <#[R31 + 80]> */
		/* 820B6018h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B6018h case    0:*/		return 0x820B601C;
		  /* 820B601Ch */ case    1:  		/* cmpwi CR6, R10, 0 */
		/* 820B601Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820B601Ch case    1:*/		return 0x820B6020;
		  /* 820B6020h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820B6020h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B6034;  }
		/* 820B6020h case    2:*/		return 0x820B6024;
		  /* 820B6024h */ case    3:  		/* cmpwi CR6, R9, 0 */
		/* 820B6024h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820B6024h case    3:*/		return 0x820B6028;
		  /* 820B6028h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 820B6028h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820B603C;  }
		/* 820B6028h case    4:*/		return 0x820B602C;
		  /* 820B602Ch */ case    5:  		/* cmpwi CR6, R8, 0 */
		/* 820B602Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820B602Ch case    5:*/		return 0x820B6030;
		  /* 820B6030h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 820B6030h case    6:*/		if ( regs.CR[6].eq ) { return 0x820B604C;  }
		/* 820B6030h case    6:*/		return 0x820B6034;
	}
	return 0x820B6034;
} // Block from 820B6018h-820B6034h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B6034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6034);
		  /* 820B6034h */ case    0:  		/* cmpwi CR6, R9, 0 */
		/* 820B6034h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 820B6034h case    0:*/		return 0x820B6038;
		  /* 820B6038h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 820B6038h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B6070;  }
		/* 820B6038h case    1:*/		return 0x820B603C;
	}
	return 0x820B603C;
} // Block from 820B6034h-820B603Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B603Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B603C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B603C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B603C);
		  /* 820B603Ch */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 820B603Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820B603Ch case    0:*/		return 0x820B6040;
		  /* 820B6040h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 820B6040h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B6070;  }
		/* 820B6040h case    1:*/		return 0x820B6044;
		  /* 820B6044h */ case    2:  		/* cmpwi CR6, R7, 0 */
		/* 820B6044h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 820B6044h case    2:*/		return 0x820B6048;
		  /* 820B6048h */ case    3:  		/* bc 4, CR6_EQ, 40 */
		/* 820B6048h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820B6070;  }
		/* 820B6048h case    3:*/		return 0x820B604C;
	}
	return 0x820B604C;
} // Block from 820B603Ch-820B604Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B604Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B604C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B604C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B604C);
		  /* 820B604Ch */ case    0:  		/* lis R11, -32255 */
		/* 820B604Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820B604Ch case    0:*/		return 0x820B6050;
		  /* 820B6050h */ case    1:  		/* li R5, 3042 */
		/* 820B6050h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBE2);
		/* 820B6050h case    1:*/		return 0x820B6054;
		  /* 820B6054h */ case    2:  		/* addi R6, R11, 8744 */
		/* 820B6054h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2228);
		/* 820B6054h case    2:*/		return 0x820B6058;
		  /* 820B6058h */ case    3:  		/* mr R4, R14 */
		/* 820B6058h case    3:*/		regs.R4 = regs.R14;
		/* 820B6058h case    3:*/		return 0x820B605C;
		  /* 820B605Ch */ case    4:  		/* mr R3, R31 */
		/* 820B605Ch case    4:*/		regs.R3 = regs.R31;
		/* 820B605Ch case    4:*/		return 0x820B6060;
		  /* 820B6060h */ case    5:  		/* bl -22128 */
		/* 820B6060h case    5:*/		regs.LR = 0x820B6064; return 0x820B09F0;
		/* 820B6060h case    5:*/		return 0x820B6064;
		  /* 820B6064h */ case    6:  		/* lis R30, -32768 */
		/* 820B6064h case    6:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 820B6064h case    6:*/		return 0x820B6068;
		  /* 820B6068h */ case    7:  		/* ori R30, R30, 16385 */
		/* 820B6068h case    7:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4001);
		/* 820B6068h case    7:*/		return 0x820B606C;
		  /* 820B606Ch */ case    8:  		/* b 20 */
		/* 820B606Ch case    8:*/		return 0x820B6080;
		/* 820B606Ch case    8:*/		return 0x820B6070;
	}
	return 0x820B6070;
} // Block from 820B604Ch-820B6070h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B6070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6070);
		  /* 820B6070h */ case    0:  		/* mr R30, R18 */
		/* 820B6070h case    0:*/		regs.R30 = regs.R18;
		/* 820B6070h case    0:*/		return 0x820B6074;
		  /* 820B6074h */ case    1:  		/* b 12 */
		/* 820B6074h case    1:*/		return 0x820B6080;
		/* 820B6074h case    1:*/		return 0x820B6078;
	}
	return 0x820B6078;
} // Block from 820B6070h-820B6078h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B6078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6078);
		  /* 820B6078h */ case    0:  		/* lis R30, -32761 */
		/* 820B6078h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 820B6078h case    0:*/		return 0x820B607C;
		  /* 820B607Ch */ case    1:  		/* ori R30, R30, 14 */
		/* 820B607Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 820B607Ch case    1:*/		return 0x820B6080;
	}
	return 0x820B6080;
} // Block from 820B6078h-820B6080h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B6080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6080);
		  /* 820B6080h */ case    0:  		/* lis R4, 9345 */
		/* 820B6080h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B6080h case    0:*/		return 0x820B6084;
		  /* 820B6084h */ case    1:  		/* mr R3, R17 */
		/* 820B6084h case    1:*/		regs.R3 = regs.R17;
		/* 820B6084h case    1:*/		return 0x820B6088;
		  /* 820B6088h */ case    2:  		/* bl -187728 */
		/* 820B6088h case    2:*/		regs.LR = 0x820B608C; return 0x82088338;
		/* 820B6088h case    2:*/		return 0x820B608C;
		  /* 820B608Ch */ case    3:  		/* lis R4, 9345 */
		/* 820B608Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B608Ch case    3:*/		return 0x820B6090;
		  /* 820B6090h */ case    4:  		/* mr R3, R15 */
		/* 820B6090h case    4:*/		regs.R3 = regs.R15;
		/* 820B6090h case    4:*/		return 0x820B6094;
		  /* 820B6094h */ case    5:  		/* bl -187740 */
		/* 820B6094h case    5:*/		regs.LR = 0x820B6098; return 0x82088338;
		/* 820B6094h case    5:*/		return 0x820B6098;
		  /* 820B6098h */ case    6:  		/* lis R4, 9345 */
		/* 820B6098h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B6098h case    6:*/		return 0x820B609C;
		  /* 820B609Ch */ case    7:  		/* lwz R3, <#[R1 + 140]> */
		/* 820B609Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B609Ch case    7:*/		return 0x820B60A0;
		  /* 820B60A0h */ case    8:  		/* bl -187752 */
		/* 820B60A0h case    8:*/		regs.LR = 0x820B60A4; return 0x82088338;
		/* 820B60A0h case    8:*/		return 0x820B60A4;
		  /* 820B60A4h */ case    9:  		/* lis R4, 9345 */
		/* 820B60A4h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B60A4h case    9:*/		return 0x820B60A8;
		  /* 820B60A8h */ case   10:  		/* lwz R3, <#[R1 + 188]> */
		/* 820B60A8h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000BC) );
		/* 820B60A8h case   10:*/		return 0x820B60AC;
		  /* 820B60ACh */ case   11:  		/* bl -187764 */
		/* 820B60ACh case   11:*/		regs.LR = 0x820B60B0; return 0x82088338;
		/* 820B60ACh case   11:*/		return 0x820B60B0;
		  /* 820B60B0h */ case   12:  		/* lwz R11, <#[R1 + 164]> */
		/* 820B60B0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B60B0h case   12:*/		return 0x820B60B4;
		  /* 820B60B4h */ case   13:  		/* lwz R10, <#[R1 + 168]> */
		/* 820B60B4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B60B4h case   13:*/		return 0x820B60B8;
		  /* 820B60B8h */ case   14:  		/* mr R3, R30 */
		/* 820B60B8h case   14:*/		regs.R3 = regs.R30;
		/* 820B60B8h case   14:*/		return 0x820B60BC;
		  /* 820B60BCh */ case   15:  		/* lwz R9, <#[R1 + 192]> */
		/* 820B60BCh case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000C0) );
		/* 820B60BCh case   15:*/		return 0x820B60C0;
		  /* 820B60C0h */ case   16:  		/* lwz R8, <#[R1 + 196]> */
		/* 820B60C0h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000C4) );
		/* 820B60C0h case   16:*/		return 0x820B60C4;
		  /* 820B60C4h */ case   17:  		/* lwz R7, <#[R1 + 172]> */
		/* 820B60C4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B60C4h case   17:*/		return 0x820B60C8;
		  /* 820B60C8h */ case   18:  		/* stw R11, <#[R31 + 48]> */
		/* 820B60C8h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B60C8h case   18:*/		return 0x820B60CC;
		  /* 820B60CCh */ case   19:  		/* stw R10, <#[R31 + 52]> */
		/* 820B60CCh case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B60CCh case   19:*/		return 0x820B60D0;
		  /* 820B60D0h */ case   20:  		/* stw R9, <#[R31 + 60]> */
		/* 820B60D0h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000003C) );
		/* 820B60D0h case   20:*/		return 0x820B60D4;
		  /* 820B60D4h */ case   21:  		/* stw R8, <#[R31 + 64]> */
		/* 820B60D4h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000040) );
		/* 820B60D4h case   21:*/		return 0x820B60D8;
		  /* 820B60D8h */ case   22:  		/* lwz R11, <#[R1 + 156]> */
		/* 820B60D8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 820B60D8h case   22:*/		return 0x820B60DC;
		  /* 820B60DCh */ case   23:  		/* stw R11, <#[R7]> */
		/* 820B60DCh case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 820B60DCh case   23:*/		return 0x820B60E0;
		  /* 820B60E0h */ case   24:  		/* addi R1, R1, 384 */
		/* 820B60E0h case   24:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 820B60E0h case   24:*/		return 0x820B60E4;
		  /* 820B60E4h */ case   25:  		/* b -151156 */
		/* 820B60E4h case   25:*/		return 0x82091270;
		/* 820B60E4h case   25:*/		return 0x820B60E8;
	}
	return 0x820B60E8;
} // Block from 820B6080h-820B60E8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820B60E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B60E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B60E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B60E8);
		  /* 820B60E8h */ case    0:  		/* mfspr R12, LR */
		/* 820B60E8h case    0:*/		regs.R12 = regs.LR;
		/* 820B60E8h case    0:*/		return 0x820B60EC;
		  /* 820B60ECh */ case    1:  		/* bl -151244 */
		/* 820B60ECh case    1:*/		regs.LR = 0x820B60F0; return 0x82091220;
		/* 820B60ECh case    1:*/		return 0x820B60F0;
		  /* 820B60F0h */ case    2:  		/* stfd FR30, <#[R1 - 168]> */
		/* 820B60F0h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820B60F0h case    2:*/		return 0x820B60F4;
		  /* 820B60F4h */ case    3:  		/* stfd FR31, <#[R1 - 160]> */
		/* 820B60F4h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820B60F4h case    3:*/		return 0x820B60F8;
		  /* 820B60F8h */ case    4:  		/* stwu R1, <#[R1 - 448]> */
		/* 820B60F8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE40);
		/* 820B60F8h case    4:*/		return 0x820B60FC;
		  /* 820B60FCh */ case    5:  		/* addi R11, R5, 0 */
		/* 820B60FCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x0);
		/* 820B60FCh case    5:*/		return 0x820B6100;
		  /* 820B6100h */ case    6:  		/* lwz R10, <#[R3 + 8]> */
		/* 820B6100h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 820B6100h case    6:*/		return 0x820B6104;
		  /* 820B6104h */ case    7:  		/* stw R6, <#[R1 + 492]> */
		/* 820B6104h case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000001EC) );
		/* 820B6104h case    7:*/		return 0x820B6108;
		  /* 820B6108h */ case    8:  		/* mr R15, R7 */
		/* 820B6108h case    8:*/		regs.R15 = regs.R7;
		/* 820B6108h case    8:*/		return 0x820B610C;
		  /* 820B610Ch */ case    9:  		/* addic R9, R11, -1 */
		/* 820B610Ch case    9:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 820B610Ch case    9:*/		return 0x820B6110;
		  /* 820B6110h */ case   10:  		/* lwz R7, <#[R3 + 52]> */
		/* 820B6110h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000034) );
		/* 820B6110h case   10:*/		return 0x820B6114;
		  /* 820B6114h */ case   11:  		/* mr R20, R8 */
		/* 820B6114h case   11:*/		regs.R20 = regs.R8;
		/* 820B6114h case   11:*/		return 0x820B6118;
		  /* 820B6118h */ case   12:  		/* lwz R8, <#[R3 + 48]> */
		/* 820B6118h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000030) );
		/* 820B6118h case   12:*/		return 0x820B611C;
		  /* 820B611Ch */ case   13:  		/* lwz R6, <#[R3 + 108]> */
		/* 820B611Ch case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x0000006C) );
		/* 820B611Ch case   13:*/		return 0x820B6120;
		  /* 820B6120h */ case   14:  		/* subfe R11, R9, R11 */
		/* 820B6120h case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820B6120h case   14:*/		return 0x820B6124;
		  /* 820B6124h */ case   15:  		/* lwz R5, <#[R3 + 112]> */
		/* 820B6124h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000070) );
		/* 820B6124h case   15:*/		return 0x820B6128;
		  /* 820B6128h */ case   16:  		/* li R26, 0 */
		/* 820B6128h case   16:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 820B6128h case   16:*/		return 0x820B612C;
		  /* 820B612Ch */ case   17:  		/* stw R4, <#[R1 + 476]> */
		/* 820B612Ch case   17:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B612Ch case   17:*/		return 0x820B6130;
		  /* 820B6130h */ case   18:  		/* mr R31, R3 */
		/* 820B6130h case   18:*/		regs.R31 = regs.R3;
		/* 820B6130h case   18:*/		return 0x820B6134;
		  /* 820B6134h */ case   19:  		/* lwz R9, <#[R3 + 68]> */
		/* 820B6134h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000044) );
		/* 820B6134h case   19:*/		return 0x820B6138;
		  /* 820B6138h */ case   20:  		/* lwz R4, <#[R10 + 92]> */
		/* 820B6138h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000005C) );
		/* 820B6138h case   20:*/		return 0x820B613C;
		  /* 820B613Ch */ case   21:  		/* stw R8, <#[R1 + 140]> */
		/* 820B613Ch case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B613Ch case   21:*/		return 0x820B6140;
		  /* 820B6140h */ case   22:  		/* stw R26, <#[R1 + 152]> */
		/* 820B6140h case   22:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000098) );
		/* 820B6140h case   22:*/		return 0x820B6144;
		  /* 820B6144h */ case   23:  		/* cmplw CR6, R9, R4 */
		/* 820B6144h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 820B6144h case   23:*/		return 0x820B6148;
		  /* 820B6148h */ case   24:  		/* stw R7, <#[R1 + 144]> */
		/* 820B6148h case   24:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B6148h case   24:*/		return 0x820B614C;
		  /* 820B614Ch */ case   25:  		/* stw R26, <#[R1 + 112]> */
		/* 820B614Ch case   25:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 820B614Ch case   25:*/		return 0x820B6150;
		  /* 820B6150h */ case   26:  		/* stw R26, <#[R1 + 124]> */
		/* 820B6150h case   26:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000007C) );
		/* 820B6150h case   26:*/		return 0x820B6154;
		  /* 820B6154h */ case   27:  		/* stw R6, <#[R1 + 160]> */
		/* 820B6154h case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B6154h case   27:*/		return 0x820B6158;
		  /* 820B6158h */ case   28:  		/* stw R26, <#[R1 + 108]> */
		/* 820B6158h case   28:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000006C) );
		/* 820B6158h case   28:*/		return 0x820B615C;
		  /* 820B615Ch */ case   29:  		/* stw R5, <#[R1 + 156]> */
		/* 820B615Ch case   29:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x0000009C) );
		/* 820B615Ch case   29:*/		return 0x820B6160;
		  /* 820B6160h */ case   30:  		/* stw R26, <#[R1 + 100]> */
		/* 820B6160h case   30:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000064) );
		/* 820B6160h case   30:*/		return 0x820B6164;
		  /* 820B6164h */ case   31:  		/* stw R11, <#[R1 + 96]> */
		/* 820B6164h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820B6164h case   31:*/		return 0x820B6168;
		  /* 820B6168h */ case   32:  		/* bc 12, CR6_LT, 16 */
		/* 820B6168h case   32:*/		if ( regs.CR[6].lt ) { return 0x820B6178;  }
		/* 820B6168h case   32:*/		return 0x820B616C;
		  /* 820B616Ch */ case   33:  		/* lis R3, -32768 */
		/* 820B616Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820B616Ch case   33:*/		return 0x820B6170;
		  /* 820B6170h */ case   34:  		/* ori R3, R3, 16389 */
		/* 820B6170h case   34:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820B6170h case   34:*/		return 0x820B6174;
		  /* 820B6174h */ case   35:  		/* b 4336 */
		/* 820B6174h case   35:*/		return 0x820B7264;
		/* 820B6174h case   35:*/		return 0x820B6178;
	}
	return 0x820B6178;
} // Block from 820B60E8h-820B6178h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820B6178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6178);
		  /* 820B6178h */ case    0:  		/* addi R11, R9, 1 */
		/* 820B6178h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x1);
		/* 820B6178h case    0:*/		return 0x820B617C;
		  /* 820B617Ch */ case    1:  		/* lwz R9, <#[R31 + 4]> */
		/* 820B617Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 820B617Ch case    1:*/		return 0x820B6180;
		  /* 820B6180h */ case    2:  		/* lis R4, 9345 */
		/* 820B6180h case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B6180h case    2:*/		return 0x820B6184;
		  /* 820B6184h */ case    3:  		/* stw R11, <#[R31 + 68]> */
		/* 820B6184h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 820B6184h case    3:*/		return 0x820B6188;
		  /* 820B6188h */ case    4:  		/* lwz R16, <#[R10 + 8]> */
		/* 820B6188h case    4:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R10 + 0x00000008) );
		/* 820B6188h case    4:*/		return 0x820B618C;
		  /* 820B618Ch */ case    5:  		/* lwz R18, <#[R10 + 12]> */
		/* 820B618Ch case    5:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R10 + 0x0000000C) );
		/* 820B618Ch case    5:*/		return 0x820B6190;
		  /* 820B6190h */ case    6:  		/* lwz R22, <#[R9 + 28]> */
		/* 820B6190h case    6:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R9 + 0x0000001C) );
		/* 820B6190h case    6:*/		return 0x820B6194;
		  /* 820B6194h */ case    7:  		/* rlwinm R24, R22, 2, 0, 29 */
		/* 820B6194h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R22);
		/* 820B6194h case    7:*/		return 0x820B6198;
		  /* 820B6198h */ case    8:  		/* mr R3, R24 */
		/* 820B6198h case    8:*/		regs.R3 = regs.R24;
		/* 820B6198h case    8:*/		return 0x820B619C;
		  /* 820B619Ch */ case    9:  		/* bl -188316 */
		/* 820B619Ch case    9:*/		regs.LR = 0x820B61A0; return 0x82088200;
		/* 820B619Ch case    9:*/		return 0x820B61A0;
		  /* 820B61A0h */ case   10:  		/* stw R3, <#[R1 + 120]> */
		/* 820B61A0h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000078) );
		/* 820B61A0h case   10:*/		return 0x820B61A4;
		  /* 820B61A4h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 820B61A4h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B61A4h case   11:*/		return 0x820B61A8;
		  /* 820B61A8h */ case   12:  		/* bc 12, CR0_EQ, 4156 */
		/* 820B61A8h case   12:*/		if ( regs.CR[0].eq ) { return 0x820B71E4;  }
		/* 820B61A8h case   12:*/		return 0x820B61AC;
		  /* 820B61ACh */ case   13:  		/* lis R4, 9345 */
		/* 820B61ACh case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B61ACh case   13:*/		return 0x820B61B0;
		  /* 820B61B0h */ case   14:  		/* mr R3, R24 */
		/* 820B61B0h case   14:*/		regs.R3 = regs.R24;
		/* 820B61B0h case   14:*/		return 0x820B61B4;
		  /* 820B61B4h */ case   15:  		/* bl -188340 */
		/* 820B61B4h case   15:*/		regs.LR = 0x820B61B8; return 0x82088200;
		/* 820B61B4h case   15:*/		return 0x820B61B8;
		  /* 820B61B8h */ case   16:  		/* or. R23, R3, R3 */
		/* 820B61B8h case   16:*/		cpu::op::or<1>(regs,&regs.R23,regs.R3,regs.R3);
		/* 820B61B8h case   16:*/		return 0x820B61BC;
		  /* 820B61BCh */ case   17:  		/* stw R23, <#[R1 + 112]> */
		/* 820B61BCh case   17:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000070) );
		/* 820B61BCh case   17:*/		return 0x820B61C0;
		  /* 820B61C0h */ case   18:  		/* bc 12, CR0_EQ, 4132 */
		/* 820B61C0h case   18:*/		if ( regs.CR[0].eq ) { return 0x820B71E4;  }
		/* 820B61C0h case   18:*/		return 0x820B61C4;
		  /* 820B61C4h */ case   19:  		/* lis R4, 9345 */
		/* 820B61C4h case   19:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B61C4h case   19:*/		return 0x820B61C8;
		  /* 820B61C8h */ case   20:  		/* mr R3, R24 */
		/* 820B61C8h case   20:*/		regs.R3 = regs.R24;
		/* 820B61C8h case   20:*/		return 0x820B61CC;
		  /* 820B61CCh */ case   21:  		/* bl -188364 */
		/* 820B61CCh case   21:*/		regs.LR = 0x820B61D0; return 0x82088200;
		/* 820B61CCh case   21:*/		return 0x820B61D0;
		  /* 820B61D0h */ case   22:  		/* or. R21, R3, R3 */
		/* 820B61D0h case   22:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 820B61D0h case   22:*/		return 0x820B61D4;
		  /* 820B61D4h */ case   23:  		/* stw R21, <#[R1 + 124]> */
		/* 820B61D4h case   23:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x0000007C) );
		/* 820B61D4h case   23:*/		return 0x820B61D8;
		  /* 820B61D8h */ case   24:  		/* bc 12, CR0_EQ, 4108 */
		/* 820B61D8h case   24:*/		if ( regs.CR[0].eq ) { return 0x820B71E4;  }
		/* 820B61D8h case   24:*/		return 0x820B61DC;
		  /* 820B61DCh */ case   25:  		/* rlwinm R27, R22, 4, 0, 27 */
		/* 820B61DCh case   25:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R27,regs.R22);
		/* 820B61DCh case   25:*/		return 0x820B61E0;
		  /* 820B61E0h */ case   26:  		/* lis R4, 9345 */
		/* 820B61E0h case   26:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B61E0h case   26:*/		return 0x820B61E4;
		  /* 820B61E4h */ case   27:  		/* mr R3, R27 */
		/* 820B61E4h case   27:*/		regs.R3 = regs.R27;
		/* 820B61E4h case   27:*/		return 0x820B61E8;
		  /* 820B61E8h */ case   28:  		/* bl -188392 */
		/* 820B61E8h case   28:*/		regs.LR = 0x820B61EC; return 0x82088200;
		/* 820B61E8h case   28:*/		return 0x820B61EC;
		  /* 820B61ECh */ case   29:  		/* or. R25, R3, R3 */
		/* 820B61ECh case   29:*/		cpu::op::or<1>(regs,&regs.R25,regs.R3,regs.R3);
		/* 820B61ECh case   29:*/		return 0x820B61F0;
		  /* 820B61F0h */ case   30:  		/* stw R25, <#[R1 + 108]> */
		/* 820B61F0h case   30:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000006C) );
		/* 820B61F0h case   30:*/		return 0x820B61F4;
		  /* 820B61F4h */ case   31:  		/* bc 12, CR0_EQ, 4080 */
		/* 820B61F4h case   31:*/		if ( regs.CR[0].eq ) { return 0x820B71E4;  }
		/* 820B61F4h case   31:*/		return 0x820B61F8;
		  /* 820B61F8h */ case   32:  		/* lis R4, 9345 */
		/* 820B61F8h case   32:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B61F8h case   32:*/		return 0x820B61FC;
		  /* 820B61FCh */ case   33:  		/* mr R3, R27 */
		/* 820B61FCh case   33:*/		regs.R3 = regs.R27;
		/* 820B61FCh case   33:*/		return 0x820B6200;
		  /* 820B6200h */ case   34:  		/* bl -188416 */
		/* 820B6200h case   34:*/		regs.LR = 0x820B6204; return 0x82088200;
		/* 820B6200h case   34:*/		return 0x820B6204;
		  /* 820B6204h */ case   35:  		/* or. R19, R3, R3 */
		/* 820B6204h case   35:*/		cpu::op::or<1>(regs,&regs.R19,regs.R3,regs.R3);
		/* 820B6204h case   35:*/		return 0x820B6208;
		  /* 820B6208h */ case   36:  		/* stw R19, <#[R1 + 100]> */
		/* 820B6208h case   36:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000064) );
		/* 820B6208h case   36:*/		return 0x820B620C;
		  /* 820B620Ch */ case   37:  		/* bc 12, CR0_EQ, 4056 */
		/* 820B620Ch case   37:*/		if ( regs.CR[0].eq ) { return 0x820B71E4;  }
		/* 820B620Ch case   37:*/		return 0x820B6210;
		  /* 820B6210h */ case   38:  		/* cmplwi CR6, R22, 0 */
		/* 820B6210h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820B6210h case   38:*/		return 0x820B6214;
		  /* 820B6214h */ case   39:  		/* bc 12, CR6_EQ, 152 */
		/* 820B6214h case   39:*/		if ( regs.CR[6].eq ) { return 0x820B62AC;  }
		/* 820B6214h case   39:*/		return 0x820B6218;
		  /* 820B6218h */ case   40:  		/* mr R30, R26 */
		/* 820B6218h case   40:*/		regs.R30 = regs.R26;
		/* 820B6218h case   40:*/		return 0x820B621C;
		  /* 820B621Ch */ case   41:  		/* mr R29, R25 */
		/* 820B621Ch case   41:*/		regs.R29 = regs.R25;
		/* 820B621Ch case   41:*/		return 0x820B6220;
		  /* 820B6220h */ case   42:  		/* mr R28, R22 */
		/* 820B6220h case   42:*/		regs.R28 = regs.R22;
		/* 820B6220h case   42:*/		return 0x820B6224;
		  /* 820B6224h */ case   43:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B6224h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6224h case   43:*/		return 0x820B6228;
		  /* 820B6228h */ case   44:  		/* lwzx R4, <#[R30 + R11]> */
		/* 820B6228h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820B6228h case   44:*/		return 0x820B622C;
		  /* 820B622Ch */ case   45:  		/* cmpwi CR6, R4, -1 */
		/* 820B622Ch case   45:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 820B622Ch case   45:*/		return 0x820B6230;
		  /* 820B6230h */ case   46:  		/* bc 12, CR6_EQ, 24 */
		/* 820B6230h case   46:*/		if ( regs.CR[6].eq ) { return 0x820B6248;  }
		/* 820B6230h case   46:*/		return 0x820B6234;
		  /* 820B6234h */ case   47:  		/* mr R5, R29 */
		/* 820B6234h case   47:*/		regs.R5 = regs.R29;
		/* 820B6234h case   47:*/		return 0x820B6238;
		  /* 820B6238h */ case   48:  		/* mr R3, R31 */
		/* 820B6238h case   48:*/		regs.R3 = regs.R31;
		/* 820B6238h case   48:*/		return 0x820B623C;
		  /* 820B623Ch */ case   49:  		/* bl -29724 */
		/* 820B623Ch case   49:*/		regs.LR = 0x820B6240; return 0x820AEE20;
		/* 820B623Ch case   49:*/		return 0x820B6240;
		  /* 820B6240h */ case   50:  		/* cmpwi CR0, R3, 0 */
		/* 820B6240h case   50:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B6240h case   50:*/		return 0x820B6244;
		  /* 820B6244h */ case   51:  		/* bc 4, CR0_LT, 20 */
		/* 820B6244h case   51:*/		if ( !regs.CR[0].lt ) { return 0x820B6258;  }
		/* 820B6244h case   51:*/		return 0x820B6248;
	}
	return 0x820B6248;
} // Block from 820B6178h-820B6248h (52 instructions)

//////////////////////////////////////////////////////
// Block at 820B6248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6248);
		  /* 820B6248h */ case    0:  		/* lfd FR0, <#[R31 + 168]> */
		/* 820B6248h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B6248h case    0:*/		return 0x820B624C;
		  /* 820B624Ch */ case    1:  		/* stfd FR0, <#[R29]> */
		/* 820B624Ch case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B624Ch case    1:*/		return 0x820B6250;
		  /* 820B6250h */ case    2:  		/* lfd FR0, <#[R31 + 176]> */
		/* 820B6250h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B6250h case    2:*/		return 0x820B6254;
		  /* 820B6254h */ case    3:  		/* stfd FR0, <#[R29 + 8]> */
		/* 820B6254h case    3:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000008) );
		/* 820B6254h case    3:*/		return 0x820B6258;
	}
	return 0x820B6258;
} // Block from 820B6248h-820B6258h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B6258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6258);
		  /* 820B6258h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B6258h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6258h case    0:*/		return 0x820B625C;
		  /* 820B625Ch */ case    1:  		/* lwzx R11, <#[R30 + R11]> */
		/* 820B625Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820B625Ch case    1:*/		return 0x820B6260;
		  /* 820B6260h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 820B6260h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820B6260h case    2:*/		return 0x820B6264;
		  /* 820B6264h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 820B6264h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B6294;  }
		/* 820B6264h case    3:*/		return 0x820B6268;
		  /* 820B6268h */ case    4:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B6268h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6268h case    4:*/		return 0x820B626C;
		  /* 820B626Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B626Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B626Ch case    5:*/		return 0x820B6270;
		  /* 820B6270h */ case    6:  		/* lwz R9, <#[R10 + 20]> */
		/* 820B6270h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000014) );
		/* 820B6270h case    6:*/		return 0x820B6274;
		  /* 820B6274h */ case    7:  		/* lwz R10, <#[R10 + 116]> */
		/* 820B6274h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000074) );
		/* 820B6274h case    7:*/		return 0x820B6278;
		  /* 820B6278h */ case    8:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820B6278h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820B6278h case    8:*/		return 0x820B627C;
		  /* 820B627Ch */ case    9:  		/* lwz R9, <#[R11 + 4]> */
		/* 820B627Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820B627Ch case    9:*/		return 0x820B6280;
		  /* 820B6280h */ case   10:  		/* cmplw CR6, R10, R9 */
		/* 820B6280h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820B6280h case   10:*/		return 0x820B6284;
		  /* 820B6284h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 820B6284h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B6294;  }
		/* 820B6284h case   11:*/		return 0x820B6288;
		  /* 820B6288h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820B6288h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6288h case   12:*/		return 0x820B628C;
		  /* 820B628Ch */ case   13:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 820B628Ch case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 820B628Ch case   13:*/		return 0x820B6290;
		  /* 820B6290h */ case   14:  		/* b 8 */
		/* 820B6290h case   14:*/		return 0x820B6298;
		/* 820B6290h case   14:*/		return 0x820B6294;
	}
	return 0x820B6294;
} // Block from 820B6258h-820B6294h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820B6294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6294);
		  /* 820B6294h */ case    0:  		/* li R11, 31 */
		/* 820B6294h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 820B6294h case    0:*/		return 0x820B6298;
	}
	return 0x820B6298;
} // Block from 820B6294h-820B6298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B6298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6298);
		  /* 820B6298h */ case    0:  		/* stwx R11, <#[R30 + R23]> */
		/* 820B6298h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + regs.R23 + 0x00000000) );
		/* 820B6298h case    0:*/		return 0x820B629C;
		  /* 820B629Ch */ case    1:  		/* addic. R28, R28, -1 */
		/* 820B629Ch case    1:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 820B629Ch case    1:*/		return 0x820B62A0;
		  /* 820B62A0h */ case    2:  		/* addi R29, R29, 16 */
		/* 820B62A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x10);
		/* 820B62A0h case    2:*/		return 0x820B62A4;
		  /* 820B62A4h */ case    3:  		/* addi R30, R30, 4 */
		/* 820B62A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B62A4h case    3:*/		return 0x820B62A8;
		  /* 820B62A8h */ case    4:  		/* bc 4, CR0_EQ, -132 */
		/* 820B62A8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x820B6224;  }
		/* 820B62A8h case    4:*/		return 0x820B62AC;
	}
	return 0x820B62AC;
} // Block from 820B6298h-820B62ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B62ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B62AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B62AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B62AC);
		  /* 820B62ACh */ case    0:  		/* mr R5, R24 */
		/* 820B62ACh case    0:*/		regs.R5 = regs.R24;
		/* 820B62ACh case    0:*/		return 0x820B62B0;
		  /* 820B62B0h */ case    1:  		/* mr R4, R23 */
		/* 820B62B0h case    1:*/		regs.R4 = regs.R23;
		/* 820B62B0h case    1:*/		return 0x820B62B4;
		  /* 820B62B4h */ case    2:  		/* mr R3, R21 */
		/* 820B62B4h case    2:*/		regs.R3 = regs.R21;
		/* 820B62B4h case    2:*/		return 0x820B62B8;
		  /* 820B62B8h */ case    3:  		/* bl -149768 */
		/* 820B62B8h case    3:*/		regs.LR = 0x820B62BC; return 0x820919B0;
		/* 820B62B8h case    3:*/		return 0x820B62BC;
		  /* 820B62BCh */ case    4:  		/* mr R5, R27 */
		/* 820B62BCh case    4:*/		regs.R5 = regs.R27;
		/* 820B62BCh case    4:*/		return 0x820B62C0;
		  /* 820B62C0h */ case    5:  		/* mr R4, R25 */
		/* 820B62C0h case    5:*/		regs.R4 = regs.R25;
		/* 820B62C0h case    5:*/		return 0x820B62C4;
		  /* 820B62C4h */ case    6:  		/* mr R3, R19 */
		/* 820B62C4h case    6:*/		regs.R3 = regs.R19;
		/* 820B62C4h case    6:*/		return 0x820B62C8;
		  /* 820B62C8h */ case    7:  		/* bl -149784 */
		/* 820B62C8h case    7:*/		regs.LR = 0x820B62CC; return 0x820919B0;
		/* 820B62C8h case    7:*/		return 0x820B62CC;
		  /* 820B62CCh */ case    8:  		/* lis R11, -32256 */
		/* 820B62CCh case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820B62CCh case    8:*/		return 0x820B62D0;
		  /* 820B62D0h */ case    9:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B62D0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B62D0h case    9:*/		return 0x820B62D4;
		  /* 820B62D4h */ case   10:  		/* li R19, -1 */
		/* 820B62D4h case   10:*/		cpu::op::li<0>(regs,&regs.R19,0xFFFFFFFF);
		/* 820B62D4h case   10:*/		return 0x820B62D8;
		  /* 820B62D8h */ case   11:  		/* li R14, 1 */
		/* 820B62D8h case   11:*/		cpu::op::li<0>(regs,&regs.R14,0x1);
		/* 820B62D8h case   11:*/		return 0x820B62DC;
		  /* 820B62DCh */ case   12:  		/* stw R19, <#[R1 + 136]> */
		/* 820B62DCh case   12:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000088) );
		/* 820B62DCh case   12:*/		return 0x820B62E0;
		  /* 820B62E0h */ case   13:  		/* stw R19, <#[R1 + 148]> */
		/* 820B62E0h case   13:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000094) );
		/* 820B62E0h case   13:*/		return 0x820B62E4;
		  /* 820B62E4h */ case   14:  		/* mr R23, R14 */
		/* 820B62E4h case   14:*/		regs.R23 = regs.R14;
		/* 820B62E4h case   14:*/		return 0x820B62E8;
		  /* 820B62E8h */ case   15:  		/* lfd FR30, <#[R11 + 1848]> */
		/* 820B62E8h case   15:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000738) );
		/* 820B62E8h case   15:*/		return 0x820B62EC;
		  /* 820B62ECh */ case   16:  		/* stw R14, <#[R1 + 92]> */
		/* 820B62ECh case   16:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B62ECh case   16:*/		return 0x820B62F0;
		  /* 820B62F0h */ case   17:  		/* stfd FR30, <#[R1 + 128]> */
		/* 820B62F0h case   17:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000080) );
		/* 820B62F0h case   17:*/		return 0x820B62F4;
		  /* 820B62F4h */ case   18:  		/* lwz R11, <#[R31 + 32]> */
		/* 820B62F4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820B62F4h case   18:*/		return 0x820B62F8;
		  /* 820B62F8h */ case   19:  		/* stw R11, <#[R1 + 80]> */
		/* 820B62F8h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820B62F8h case   19:*/		return 0x820B62FC;
		  /* 820B62FCh */ case   20:  		/* lwz R11, <#[R10 + 104]> */
		/* 820B62FCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000068) );
		/* 820B62FCh case   20:*/		return 0x820B6300;
		  /* 820B6300h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 820B6300h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B6300h case   21:*/		return 0x820B6304;
		  /* 820B6304h */ case   22:  		/* mr R17, R11 */
		/* 820B6304h case   22:*/		regs.R17 = regs.R11;
		/* 820B6304h case   22:*/		return 0x820B6308;
		  /* 820B6308h */ case   23:  		/* bc 4, CR6_EQ, 8 */
		/* 820B6308h case   23:*/		if ( !regs.CR[6].eq ) { return 0x820B6310;  }
		/* 820B6308h case   23:*/		return 0x820B630C;
		  /* 820B630Ch */ case   24:  		/* li R17, 255 */
		/* 820B630Ch case   24:*/		cpu::op::li<0>(regs,&regs.R17,0xFF);
		/* 820B630Ch case   24:*/		return 0x820B6310;
	}
	return 0x820B6310;
} // Block from 820B62ACh-820B6310h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820B6310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6310);
		  /* 820B6310h */ case    0:  		/* mr R11, R26 */
		/* 820B6310h case    0:*/		regs.R11 = regs.R26;
		/* 820B6310h case    0:*/		return 0x820B6314;
		  /* 820B6314h */ case    1:  		/* stw R26, <#[R1 + 84]> */
		/* 820B6314h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 820B6314h case    1:*/		return 0x820B6318;
		  /* 820B6318h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 820B6318h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 820B6318h case    2:*/		return 0x820B631C;
		  /* 820B631Ch */ case    3:  		/* bc 12, CR6_EQ, 3764 */
		/* 820B631Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B631Ch case    3:*/		return 0x820B6320;
		  /* 820B6320h */ case    4:  		/* lis R10, -32256 */
		/* 820B6320h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820B6320h case    4:*/		return 0x820B6324;
		  /* 820B6324h */ case    5:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 820B6324h case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 820B6324h case    5:*/		return 0x820B6328;
		  /* 820B6328h */ case    6:  		/* b 8 */
		/* 820B6328h case    6:*/		return 0x820B6330;
		/* 820B6328h case    6:*/		return 0x820B632C;
		  /* 820B632Ch */ case    7:  		/* lwz R11, <#[R1 + 84]> */
		/* 820B632Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820B632Ch case    7:*/		return 0x820B6330;
	}
	return 0x820B6330;
} // Block from 820B6310h-820B6330h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B6330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6330);
		  /* 820B6330h */ case    0:  		/* addi R25, R11, 1 */
		/* 820B6330h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x1);
		/* 820B6330h case    0:*/		return 0x820B6334;
		  /* 820B6334h */ case    1:  		/* lwz R29, <#[R1 + 492]> */
		/* 820B6334h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000001EC) );
		/* 820B6334h case    1:*/		return 0x820B6338;
		  /* 820B6338h */ case    2:  		/* stw R11, <#[R31 + 108]> */
		/* 820B6338h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 820B6338h case    2:*/		return 0x820B633C;
		  /* 820B633Ch */ case    3:  		/* cmplwi CR6, R15, 0 */
		/* 820B633Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B633Ch case    3:*/		return 0x820B6340;
		  /* 820B6340h */ case    4:  		/* stw R25, <#[R31 + 112]> */
		/* 820B6340h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000070) );
		/* 820B6340h case    4:*/		return 0x820B6344;
		  /* 820B6344h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 820B6344h case    5:*/		if ( regs.CR[6].eq ) { return 0x820B6390;  }
		/* 820B6344h case    5:*/		return 0x820B6348;
		  /* 820B6348h */ case    6:  		/* lwz R11, <#[R1 + 96]> */
		/* 820B6348h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820B6348h case    6:*/		return 0x820B634C;
		  /* 820B634Ch */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 820B634Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B634Ch case    7:*/		return 0x820B6350;
		  /* 820B6350h */ case    8:  		/* bc 12, CR6_EQ, 64 */
		/* 820B6350h case    8:*/		if ( regs.CR[6].eq ) { return 0x820B6390;  }
		/* 820B6350h case    8:*/		return 0x820B6354;
		  /* 820B6354h */ case    9:  		/* li R5, 0 */
		/* 820B6354h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B6354h case    9:*/		return 0x820B6358;
		  /* 820B6358h */ case   10:  		/* mr R4, R15 */
		/* 820B6358h case   10:*/		regs.R4 = regs.R15;
		/* 820B6358h case   10:*/		return 0x820B635C;
		  /* 820B635Ch */ case   11:  		/* mr R3, R31 */
		/* 820B635Ch case   11:*/		regs.R3 = regs.R31;
		/* 820B635Ch case   11:*/		return 0x820B6360;
		  /* 820B6360h */ case   12:  		/* bl 38720 */
		/* 820B6360h case   12:*/		regs.LR = 0x820B6364; return 0x820BFAA0;
		/* 820B6360h case   12:*/		return 0x820B6364;
		  /* 820B6364h */ case   13:  		/* or. R30, R3, R3 */
		/* 820B6364h case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6364h case   13:*/		return 0x820B6368;
		  /* 820B6368h */ case   14:  		/* bc 12, CR0_LT, 3716 */
		/* 820B6368h case   14:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6368h case   14:*/		return 0x820B636C;
		  /* 820B636Ch */ case   15:  		/* lwz R11, <#[R31 + 92]> */
		/* 820B636Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B636Ch case   15:*/		return 0x820B6370;
		  /* 820B6370h */ case   16:  		/* cmpwi CR6, R11, 0 */
		/* 820B6370h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6370h case   16:*/		return 0x820B6374;
		  /* 820B6374h */ case   17:  		/* bc 4, CR6_EQ, 1096 */
		/* 820B6374h case   17:*/		if ( !regs.CR[6].eq ) { return 0x820B67BC;  }
		/* 820B6374h case   17:*/		return 0x820B6378;
		  /* 820B6378h */ case   18:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B6378h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B6378h case   18:*/		return 0x820B637C;
		  /* 820B637Ch */ case   19:  		/* cmpwi CR6, R11, 0 */
		/* 820B637Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B637Ch case   19:*/		return 0x820B6380;
		  /* 820B6380h */ case   20:  		/* bc 4, CR6_EQ, 3664 */
		/* 820B6380h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B6380h case   20:*/		return 0x820B6384;
		  /* 820B6384h */ case   21:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B6384h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B6384h case   21:*/		return 0x820B6388;
		  /* 820B6388h */ case   22:  		/* cmpwi CR6, R11, 0 */
		/* 820B6388h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6388h case   22:*/		return 0x820B638C;
		  /* 820B638Ch */ case   23:  		/* bc 4, CR6_EQ, 3652 */
		/* 820B638Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B638Ch case   23:*/		return 0x820B6390;
	}
	return 0x820B6390;
} // Block from 820B6330h-820B6390h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820B6390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6390);
		  /* 820B6390h */ case    0:  		/* mr R5, R24 */
		/* 820B6390h case    0:*/		regs.R5 = regs.R24;
		/* 820B6390h case    0:*/		return 0x820B6394;
		  /* 820B6394h */ case    1:  		/* lwz R3, <#[R1 + 120]> */
		/* 820B6394h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000078) );
		/* 820B6394h case    1:*/		return 0x820B6398;
		  /* 820B6398h */ case    2:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B6398h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6398h case    2:*/		return 0x820B639C;
		  /* 820B639Ch */ case    3:  		/* bl -149996 */
		/* 820B639Ch case    3:*/		regs.LR = 0x820B63A0; return 0x820919B0;
		/* 820B639Ch case    3:*/		return 0x820B63A0;
		  /* 820B63A0h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 820B63A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820B63A0h case    4:*/		return 0x820B63A4;
		  /* 820B63A4h */ case    5:  		/* stw R19, <#[R1 + 88]> */
		/* 820B63A4h case    5:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000058) );
		/* 820B63A4h case    5:*/		return 0x820B63A8;
		  /* 820B63A8h */ case    6:  		/* bc 12, CR6_EQ, 116 */
		/* 820B63A8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820B641C;  }
		/* 820B63A8h case    6:*/		return 0x820B63AC;
		  /* 820B63ACh */ case    7:  		/* stw R19, <#[R1 + 88]> */
		/* 820B63ACh case    7:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000058) );
		/* 820B63ACh case    7:*/		return 0x820B63B0;
		  /* 820B63B0h */ case    8:  		/* li R6, 0 */
		/* 820B63B0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B63B0h case    8:*/		return 0x820B63B4;
		  /* 820B63B4h */ case    9:  		/* addi R5, R1, 88 */
		/* 820B63B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 820B63B4h case    9:*/		return 0x820B63B8;
		  /* 820B63B8h */ case   10:  		/* mr R4, R29 */
		/* 820B63B8h case   10:*/		regs.R4 = regs.R29;
		/* 820B63B8h case   10:*/		return 0x820B63BC;
		  /* 820B63BCh */ case   11:  		/* mr R3, R31 */
		/* 820B63BCh case   11:*/		regs.R3 = regs.R31;
		/* 820B63BCh case   11:*/		return 0x820B63C0;
		  /* 820B63C0h */ case   12:  		/* bl 43816 */
		/* 820B63C0h case   12:*/		regs.LR = 0x820B63C4; return 0x820C0EE8;
		/* 820B63C0h case   12:*/		return 0x820B63C4;
		  /* 820B63C4h */ case   13:  		/* or. R30, R3, R3 */
		/* 820B63C4h case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B63C4h case   13:*/		return 0x820B63C8;
		  /* 820B63C8h */ case   14:  		/* bc 12, CR0_LT, 3620 */
		/* 820B63C8h case   14:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B63C8h case   14:*/		return 0x820B63CC;
		  /* 820B63CCh */ case   15:  		/* lis R5, 8272 */
		/* 820B63CCh case   15:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B63CCh case   15:*/		return 0x820B63D0;
		  /* 820B63D0h */ case   16:  		/* li R9, 23 */
		/* 820B63D0h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B63D0h case   16:*/		return 0x820B63D4;
		  /* 820B63D4h */ case   17:  		/* addi R8, R1, 88 */
		/* 820B63D4h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x58);
		/* 820B63D4h case   17:*/		return 0x820B63D8;
		  /* 820B63D8h */ case   18:  		/* addi R7, R1, 80 */
		/* 820B63D8h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820B63D8h case   18:*/		return 0x820B63DC;
		  /* 820B63DCh */ case   19:  		/* addi R6, R1, 80 */
		/* 820B63DCh case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 820B63DCh case   19:*/		return 0x820B63E0;
		  /* 820B63E0h */ case   20:  		/* ori R5, R5, 1 */
		/* 820B63E0h case   20:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B63E0h case   20:*/		return 0x820B63E4;
		  /* 820B63E4h */ case   21:  		/* mr R4, R29 */
		/* 820B63E4h case   21:*/		regs.R4 = regs.R29;
		/* 820B63E4h case   21:*/		return 0x820B63E8;
		  /* 820B63E8h */ case   22:  		/* mr R3, R31 */
		/* 820B63E8h case   22:*/		regs.R3 = regs.R31;
		/* 820B63E8h case   22:*/		return 0x820B63EC;
		  /* 820B63ECh */ case   23:  		/* bl -22756 */
		/* 820B63ECh case   23:*/		regs.LR = 0x820B63F0; return 0x820B0B08;
		/* 820B63ECh case   23:*/		return 0x820B63F0;
		  /* 820B63F0h */ case   24:  		/* or. R30, R3, R3 */
		/* 820B63F0h case   24:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B63F0h case   24:*/		return 0x820B63F4;
		  /* 820B63F4h */ case   25:  		/* bc 12, CR0_LT, 3576 */
		/* 820B63F4h case   25:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B63F4h case   25:*/		return 0x820B63F8;
		  /* 820B63F8h */ case   26:  		/* lwz R11, <#[R31 + 92]> */
		/* 820B63F8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B63F8h case   26:*/		return 0x820B63FC;
		  /* 820B63FCh */ case   27:  		/* cmpwi CR6, R11, 0 */
		/* 820B63FCh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B63FCh case   27:*/		return 0x820B6400;
		  /* 820B6400h */ case   28:  		/* bc 4, CR6_EQ, 956 */
		/* 820B6400h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820B67BC;  }
		/* 820B6400h case   28:*/		return 0x820B6404;
		  /* 820B6404h */ case   29:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B6404h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B6404h case   29:*/		return 0x820B6408;
		  /* 820B6408h */ case   30:  		/* cmpwi CR6, R11, 0 */
		/* 820B6408h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6408h case   30:*/		return 0x820B640C;
		  /* 820B640Ch */ case   31:  		/* bc 4, CR6_EQ, 3524 */
		/* 820B640Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B640Ch case   31:*/		return 0x820B6410;
		  /* 820B6410h */ case   32:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B6410h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B6410h case   32:*/		return 0x820B6414;
		  /* 820B6414h */ case   33:  		/* cmpwi CR6, R11, 0 */
		/* 820B6414h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6414h case   33:*/		return 0x820B6418;
		  /* 820B6418h */ case   34:  		/* bc 4, CR6_EQ, 3512 */
		/* 820B6418h case   34:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B6418h case   34:*/		return 0x820B641C;
	}
	return 0x820B641C;
} // Block from 820B6390h-820B641Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 820B641Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B641C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B641C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B641C);
		  /* 820B641Ch */ case    0:  		/* addi R5, R1, 128 */
		/* 820B641Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820B641Ch case    0:*/		return 0x820B6420;
		  /* 820B6420h */ case    1:  		/* lwz R4, <#[R1 + 80]> */
		/* 820B6420h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 820B6420h case    1:*/		return 0x820B6424;
		  /* 820B6424h */ case    2:  		/* mr R3, R31 */
		/* 820B6424h case    2:*/		regs.R3 = regs.R31;
		/* 820B6424h case    2:*/		return 0x820B6428;
		  /* 820B6428h */ case    3:  		/* bl -23584 */
		/* 820B6428h case    3:*/		regs.LR = 0x820B642C; return 0x820B0808;
		/* 820B6428h case    3:*/		return 0x820B642C;
		  /* 820B642Ch */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820B642Ch case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B642Ch case    4:*/		return 0x820B6430;
		  /* 820B6430h */ case    5:  		/* bc 12, CR0_LT, 152 */
		/* 820B6430h case    5:*/		if ( regs.CR[0].lt ) { return 0x820B64C8;  }
		/* 820B6430h case    5:*/		return 0x820B6434;
		  /* 820B6434h */ case    6:  		/* lfd FR0, <#[R1 + 128]> */
		/* 820B6434h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 820B6434h case    6:*/		return 0x820B6438;
		  /* 820B6438h */ case    7:  		/* fcmpu CR6, FR0, FR31 */
		/* 820B6438h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820B6438h case    7:*/		return 0x820B643C;
		  /* 820B643Ch */ case    8:  		/* bc 12, CR6_EQ, 140 */
		/* 820B643Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x820B64C8;  }
		/* 820B643Ch case    8:*/		return 0x820B6440;
		  /* 820B6440h */ case    9:  		/* cmplwi CR6, R22, 0 */
		/* 820B6440h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820B6440h case    9:*/		return 0x820B6444;
		  /* 820B6444h */ case   10:  		/* bc 12, CR6_EQ, 396 */
		/* 820B6444h case   10:*/		if ( regs.CR[6].eq ) { return 0x820B65D0;  }
		/* 820B6444h case   10:*/		return 0x820B6448;
		  /* 820B6448h */ case   11:  		/* lwz R29, <#[R1 + 100]> */
		/* 820B6448h case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 820B6448h case   11:*/		return 0x820B644C;
		  /* 820B644Ch */ case   12:  		/* li R30, 0 */
		/* 820B644Ch case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820B644Ch case   12:*/		return 0x820B6450;
		  /* 820B6450h */ case   13:  		/* subf R26, R21, R20 */
		/* 820B6450h case   13:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R21,regs.R20);
		/* 820B6450h case   13:*/		return 0x820B6454;
		  /* 820B6454h */ case   14:  		/* mr R27, R22 */
		/* 820B6454h case   14:*/		regs.R27 = regs.R22;
		/* 820B6454h case   14:*/		return 0x820B6458;
		  /* 820B6458h */ case   15:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B6458h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6458h case   15:*/		return 0x820B645C;
		  /* 820B645Ch */ case   16:  		/* add R28, R30, R21 */
		/* 820B645Ch case   16:*/		cpu::op::add<0>(regs,&regs.R28,regs.R30,regs.R21);
		/* 820B645Ch case   16:*/		return 0x820B6460;
		  /* 820B6460h */ case   17:  		/* lwzx R4, <#[R30 + R11]> */
		/* 820B6460h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820B6460h case   17:*/		return 0x820B6464;
		  /* 820B6464h */ case   18:  		/* lwzx R11, <#[R26 + R28]> */
		/* 820B6464h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R28 + 0x00000000) );
		/* 820B6464h case   18:*/		return 0x820B6468;
		  /* 820B6468h */ case   19:  		/* cmplw CR6, R11, R4 */
		/* 820B6468h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 820B6468h case   19:*/		return 0x820B646C;
		  /* 820B646Ch */ case   20:  		/* bc 12, CR6_EQ, 72 */
		/* 820B646Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x820B64B4;  }
		/* 820B646Ch case   20:*/		return 0x820B6470;
		  /* 820B6470h */ case   21:  		/* mr R5, R29 */
		/* 820B6470h case   21:*/		regs.R5 = regs.R29;
		/* 820B6470h case   21:*/		return 0x820B6474;
		  /* 820B6474h */ case   22:  		/* mr R3, R31 */
		/* 820B6474h case   22:*/		regs.R3 = regs.R31;
		/* 820B6474h case   22:*/		return 0x820B6478;
		  /* 820B6478h */ case   23:  		/* bl -30296 */
		/* 820B6478h case   23:*/		regs.LR = 0x820B647C; return 0x820AEE20;
		/* 820B6478h case   23:*/		return 0x820B647C;
		  /* 820B647Ch */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820B647Ch case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B647Ch case   24:*/		return 0x820B6480;
		  /* 820B6480h */ case   25:  		/* bc 4, CR0_LT, 20 */
		/* 820B6480h case   25:*/		if ( !regs.CR[0].lt ) { return 0x820B6494;  }
		/* 820B6480h case   25:*/		return 0x820B6484;
		  /* 820B6484h */ case   26:  		/* lfd FR0, <#[R31 + 168]> */
		/* 820B6484h case   26:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B6484h case   26:*/		return 0x820B6488;
		  /* 820B6488h */ case   27:  		/* stfd FR0, <#[R29]> */
		/* 820B6488h case   27:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B6488h case   27:*/		return 0x820B648C;
		  /* 820B648Ch */ case   28:  		/* lfd FR0, <#[R31 + 176]> */
		/* 820B648Ch case   28:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B648Ch case   28:*/		return 0x820B6490;
		  /* 820B6490h */ case   29:  		/* stfd FR0, <#[R29 + 8]> */
		/* 820B6490h case   29:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000008) );
		/* 820B6490h case   29:*/		return 0x820B6494;
	}
	return 0x820B6494;
} // Block from 820B641Ch-820B6494h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820B6494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6494);
		  /* 820B6494h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B6494h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6494h case    0:*/		return 0x820B6498;
		  /* 820B6498h */ case    1:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B6498h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6498h case    1:*/		return 0x820B649C;
		  /* 820B649Ch */ case    2:  		/* lwzx R11, <#[R30 + R11]> */
		/* 820B649Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820B649Ch case    2:*/		return 0x820B64A0;
		  /* 820B64A0h */ case    3:  		/* lwz R10, <#[R10 + 20]> */
		/* 820B64A0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820B64A0h case    3:*/		return 0x820B64A4;
		  /* 820B64A4h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B64A4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B64A4h case    4:*/		return 0x820B64A8;
		  /* 820B64A8h */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B64A8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B64A8h case    5:*/		return 0x820B64AC;
		  /* 820B64ACh */ case    6:  		/* lwz R11, <#[R11]> */
		/* 820B64ACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B64ACh case    6:*/		return 0x820B64B0;
		  /* 820B64B0h */ case    7:  		/* stw R11, <#[R28]> */
		/* 820B64B0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 820B64B0h case    7:*/		return 0x820B64B4;
	}
	return 0x820B64B4;
} // Block from 820B6494h-820B64B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B64B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B64B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B64B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B64B4);
		  /* 820B64B4h */ case    0:  		/* addic. R27, R27, -1 */
		/* 820B64B4h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 820B64B4h case    0:*/		return 0x820B64B8;
		  /* 820B64B8h */ case    1:  		/* addi R29, R29, 16 */
		/* 820B64B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x10);
		/* 820B64B8h case    1:*/		return 0x820B64BC;
		  /* 820B64BCh */ case    2:  		/* addi R30, R30, 4 */
		/* 820B64BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B64BCh case    2:*/		return 0x820B64C0;
		  /* 820B64C0h */ case    3:  		/* bc 4, CR0_EQ, -104 */
		/* 820B64C0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x820B6458;  }
		/* 820B64C0h case    3:*/		return 0x820B64C4;
		  /* 820B64C4h */ case    4:  		/* b 268 */
		/* 820B64C4h case    4:*/		return 0x820B65D0;
		/* 820B64C4h case    4:*/		return 0x820B64C8;
	}
	return 0x820B64C8;
} // Block from 820B64B4h-820B64C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B64C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B64C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B64C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B64C8);
		  /* 820B64C8h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 820B64C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820B64C8h case    0:*/		return 0x820B64CC;
		  /* 820B64CCh */ case    1:  		/* bc 12, CR6_EQ, 260 */
		/* 820B64CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820B65D0;  }
		/* 820B64CCh case    1:*/		return 0x820B64D0;
		  /* 820B64D0h */ case    2:  		/* lwz R29, <#[R1 + 100]> */
		/* 820B64D0h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 820B64D0h case    2:*/		return 0x820B64D4;
		  /* 820B64D4h */ case    3:  		/* li R30, 0 */
		/* 820B64D4h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820B64D4h case    3:*/		return 0x820B64D8;
		  /* 820B64D8h */ case    4:  		/* subf R26, R21, R20 */
		/* 820B64D8h case    4:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R21,regs.R20);
		/* 820B64D8h case    4:*/		return 0x820B64DC;
		  /* 820B64DCh */ case    5:  		/* mr R27, R22 */
		/* 820B64DCh case    5:*/		regs.R27 = regs.R22;
		/* 820B64DCh case    5:*/		return 0x820B64E0;
		  /* 820B64E0h */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B64E0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B64E0h case    6:*/		return 0x820B64E4;
		  /* 820B64E4h */ case    7:  		/* add R28, R30, R21 */
		/* 820B64E4h case    7:*/		cpu::op::add<0>(regs,&regs.R28,regs.R30,regs.R21);
		/* 820B64E4h case    7:*/		return 0x820B64E8;
		  /* 820B64E8h */ case    8:  		/* lwzx R4, <#[R30 + R11]> */
		/* 820B64E8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820B64E8h case    8:*/		return 0x820B64EC;
		  /* 820B64ECh */ case    9:  		/* lwzx R11, <#[R28 + R26]> */
		/* 820B64ECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R26 + 0x00000000) );
		/* 820B64ECh case    9:*/		return 0x820B64F0;
		  /* 820B64F0h */ case   10:  		/* cmplw CR6, R11, R4 */
		/* 820B64F0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 820B64F0h case   10:*/		return 0x820B64F4;
		  /* 820B64F4h */ case   11:  		/* bc 12, CR6_EQ, 204 */
		/* 820B64F4h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B65C0;  }
		/* 820B64F4h case   11:*/		return 0x820B64F8;
		  /* 820B64F8h */ case   12:  		/* lfd FR0, <#[R29]> */
		/* 820B64F8h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B64F8h case   12:*/		return 0x820B64FC;
		  /* 820B64FCh */ case   13:  		/* lfd FR13, <#[R31 + 176]> */
		/* 820B64FCh case   13:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B64FCh case   13:*/		return 0x820B6500;
		  /* 820B6500h */ case   14:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B6500h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B6500h case   14:*/		return 0x820B6504;
		  /* 820B6504h */ case   15:  		/* bc 12, CR6_GT, 20 */
		/* 820B6504h case   15:*/		if ( regs.CR[6].gt ) { return 0x820B6518;  }
		/* 820B6504h case   15:*/		return 0x820B6508;
		  /* 820B6508h */ case   16:  		/* lfd FR0, <#[R31 + 168]> */
		/* 820B6508h case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B6508h case   16:*/		return 0x820B650C;
		  /* 820B650Ch */ case   17:  		/* lfd FR13, <#[R29 + 8]> */
		/* 820B650Ch case   17:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R29 + 0x00000008) );
		/* 820B650Ch case   17:*/		return 0x820B6510;
		  /* 820B6510h */ case   18:  		/* fcmpu CR6, FR13, FR0 */
		/* 820B6510h case   18:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820B6510h case   18:*/		return 0x820B6514;
		  /* 820B6514h */ case   19:  		/* bc 4, CR6_LT, 80 */
		/* 820B6514h case   19:*/		if ( !regs.CR[6].lt ) { return 0x820B6564;  }
		/* 820B6514h case   19:*/		return 0x820B6518;
	}
	return 0x820B6518;
} // Block from 820B64C8h-820B6518h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820B6518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6518);
		  /* 820B6518h */ case    0:  		/* addi R5, R1, 240 */
		/* 820B6518h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820B6518h case    0:*/		return 0x820B651C;
		  /* 820B651Ch */ case    1:  		/* mr R3, R31 */
		/* 820B651Ch case    1:*/		regs.R3 = regs.R31;
		/* 820B651Ch case    1:*/		return 0x820B6520;
		  /* 820B6520h */ case    2:  		/* bl -30464 */
		/* 820B6520h case    2:*/		regs.LR = 0x820B6524; return 0x820AEE20;
		/* 820B6520h case    2:*/		return 0x820B6524;
		  /* 820B6524h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820B6524h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B6524h case    3:*/		return 0x820B6528;
		  /* 820B6528h */ case    4:  		/* bc 12, CR0_LT, 44 */
		/* 820B6528h case    4:*/		if ( regs.CR[0].lt ) { return 0x820B6554;  }
		/* 820B6528h case    4:*/		return 0x820B652C;
		  /* 820B652Ch */ case    5:  		/* lfd FR13, <#[R29]> */
		/* 820B652Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R29 + 0x00000000) );
		/* 820B652Ch case    5:*/		return 0x820B6530;
		  /* 820B6530h */ case    6:  		/* lfd FR0, <#[R1 + 240]> */
		/* 820B6530h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000F0) );
		/* 820B6530h case    6:*/		return 0x820B6534;
		  /* 820B6534h */ case    7:  		/* fcmpu CR6, FR13, FR0 */
		/* 820B6534h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820B6534h case    7:*/		return 0x820B6538;
		  /* 820B6538h */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 820B6538h case    8:*/		if ( !regs.CR[6].gt ) { return 0x820B6540;  }
		/* 820B6538h case    8:*/		return 0x820B653C;
		  /* 820B653Ch */ case    9:  		/* stfd FR0, <#[R29]> */
		/* 820B653Ch case    9:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B653Ch case    9:*/		return 0x820B6540;
	}
	return 0x820B6540;
} // Block from 820B6518h-820B6540h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B6540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6540);
		  /* 820B6540h */ case    0:  		/* lfd FR0, <#[R1 + 248]> */
		/* 820B6540h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000F8) );
		/* 820B6540h case    0:*/		return 0x820B6544;
		  /* 820B6544h */ case    1:  		/* lfd FR13, <#[R29 + 8]> */
		/* 820B6544h case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R29 + 0x00000008) );
		/* 820B6544h case    1:*/		return 0x820B6548;
		  /* 820B6548h */ case    2:  		/* fcmpu CR6, FR13, FR0 */
		/* 820B6548h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820B6548h case    2:*/		return 0x820B654C;
		  /* 820B654Ch */ case    3:  		/* bc 4, CR6_LT, 24 */
		/* 820B654Ch case    3:*/		if ( !regs.CR[6].lt ) { return 0x820B6564;  }
		/* 820B654Ch case    3:*/		return 0x820B6550;
		  /* 820B6550h */ case    4:  		/* b 16 */
		/* 820B6550h case    4:*/		return 0x820B6560;
		/* 820B6550h case    4:*/		return 0x820B6554;
	}
	return 0x820B6554;
} // Block from 820B6540h-820B6554h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B6554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6554);
		  /* 820B6554h */ case    0:  		/* lfd FR0, <#[R31 + 168]> */
		/* 820B6554h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B6554h case    0:*/		return 0x820B6558;
		  /* 820B6558h */ case    1:  		/* stfd FR0, <#[R29]> */
		/* 820B6558h case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B6558h case    1:*/		return 0x820B655C;
		  /* 820B655Ch */ case    2:  		/* lfd FR0, <#[R31 + 176]> */
		/* 820B655Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B655Ch case    2:*/		return 0x820B6560;
	}
	return 0x820B6560;
} // Block from 820B6554h-820B6560h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B6560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6560);
		  /* 820B6560h */ case    0:  		/* stfd FR0, <#[R29 + 8]> */
		/* 820B6560h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000008) );
		/* 820B6560h case    0:*/		return 0x820B6564;
	}
	return 0x820B6564;
} // Block from 820B6560h-820B6564h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B6564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6564);
		  /* 820B6564h */ case    0:  		/* lfd FR0, <#[R29]> */
		/* 820B6564h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B6564h case    0:*/		return 0x820B6568;
		  /* 820B6568h */ case    1:  		/* lfd FR13, <#[R29 + 8]> */
		/* 820B6568h case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R29 + 0x00000008) );
		/* 820B6568h case    1:*/		return 0x820B656C;
		  /* 820B656Ch */ case    2:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B656Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B656Ch case    2:*/		return 0x820B6570;
		  /* 820B6570h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 820B6570h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B6598;  }
		/* 820B6570h case    3:*/		return 0x820B6574;
		  /* 820B6574h */ case    4:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B6574h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6574h case    4:*/		return 0x820B6578;
		  /* 820B6578h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B6578h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6578h case    5:*/		return 0x820B657C;
		  /* 820B657Ch */ case    6:  		/* lwzx R11, <#[R30 + R11]> */
		/* 820B657Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820B657Ch case    6:*/		return 0x820B6580;
		  /* 820B6580h */ case    7:  		/* lwz R10, <#[R10 + 20]> */
		/* 820B6580h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820B6580h case    7:*/		return 0x820B6584;
		  /* 820B6584h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B6584h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B6584h case    8:*/		return 0x820B6588;
		  /* 820B6588h */ case    9:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B6588h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B6588h case    9:*/		return 0x820B658C;
		  /* 820B658Ch */ case   10:  		/* lwz R10, <#[R11]> */
		/* 820B658Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820B658Ch case   10:*/		return 0x820B6590;
		  /* 820B6590h */ case   11:  		/* rlwinm R10, R10, 0, 25, 23 */
		/* 820B6590h case   11:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R10,regs.R10);
		/* 820B6590h case   11:*/		return 0x820B6594;
		  /* 820B6594h */ case   12:  		/* stw R10, <#[R11]> */
		/* 820B6594h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6594h case   12:*/		return 0x820B6598;
	}
	return 0x820B6598;
} // Block from 820B6564h-820B6598h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820B6598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6598);
		  /* 820B6598h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B6598h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6598h case    0:*/		return 0x820B659C;
		  /* 820B659Ch */ case    1:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B659Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B659Ch case    1:*/		return 0x820B65A0;
		  /* 820B65A0h */ case    2:  		/* lwz R9, <#[R28]> */
		/* 820B65A0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 820B65A0h case    2:*/		return 0x820B65A4;
		  /* 820B65A4h */ case    3:  		/* lwzx R11, <#[R30 + R11]> */
		/* 820B65A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820B65A4h case    3:*/		return 0x820B65A8;
		  /* 820B65A8h */ case    4:  		/* lwz R10, <#[R10 + 20]> */
		/* 820B65A8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820B65A8h case    4:*/		return 0x820B65AC;
		  /* 820B65ACh */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B65ACh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B65ACh case    5:*/		return 0x820B65B0;
		  /* 820B65B0h */ case    6:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B65B0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B65B0h case    6:*/		return 0x820B65B4;
		  /* 820B65B4h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 820B65B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B65B4h case    7:*/		return 0x820B65B8;
		  /* 820B65B8h */ case    8:  		/* and R11, R11, R9 */
		/* 820B65B8h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820B65B8h case    8:*/		return 0x820B65BC;
		  /* 820B65BCh */ case    9:  		/* stw R11, <#[R28]> */
		/* 820B65BCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 820B65BCh case    9:*/		return 0x820B65C0;
	}
	return 0x820B65C0;
} // Block from 820B6598h-820B65C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B65C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B65C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B65C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B65C0);
		  /* 820B65C0h */ case    0:  		/* addic. R27, R27, -1 */
		/* 820B65C0h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 820B65C0h case    0:*/		return 0x820B65C4;
		  /* 820B65C4h */ case    1:  		/* addi R29, R29, 16 */
		/* 820B65C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x10);
		/* 820B65C4h case    1:*/		return 0x820B65C8;
		  /* 820B65C8h */ case    2:  		/* addi R30, R30, 4 */
		/* 820B65C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B65C8h case    2:*/		return 0x820B65CC;
		  /* 820B65CCh */ case    3:  		/* bc 4, CR0_EQ, -236 */
		/* 820B65CCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x820B64E0;  }
		/* 820B65CCh case    3:*/		return 0x820B65D0;
	}
	return 0x820B65D0;
} // Block from 820B65C0h-820B65D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B65D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B65D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B65D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B65D0);
		  /* 820B65D0h */ case    0:  		/* lwz R4, <#[R1 + 88]> */
		/* 820B65D0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 820B65D0h case    0:*/		return 0x820B65D4;
		  /* 820B65D4h */ case    1:  		/* cmpwi CR6, R4, -1 */
		/* 820B65D4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 820B65D4h case    1:*/		return 0x820B65D8;
		  /* 820B65D8h */ case    2:  		/* bc 12, CR6_EQ, 116 */
		/* 820B65D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B664C;  }
		/* 820B65D8h case    2:*/		return 0x820B65DC;
		  /* 820B65DCh */ case    3:  		/* addi R5, R1, 256 */
		/* 820B65DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 820B65DCh case    3:*/		return 0x820B65E0;
		  /* 820B65E0h */ case    4:  		/* mr R3, R31 */
		/* 820B65E0h case    4:*/		regs.R3 = regs.R31;
		/* 820B65E0h case    4:*/		return 0x820B65E4;
		  /* 820B65E4h */ case    5:  		/* bl -30660 */
		/* 820B65E4h case    5:*/		regs.LR = 0x820B65E8; return 0x820AEE20;
		/* 820B65E4h case    5:*/		return 0x820B65E8;
		  /* 820B65E8h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820B65E8h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B65E8h case    6:*/		return 0x820B65EC;
		  /* 820B65ECh */ case    7:  		/* bc 12, CR0_LT, 48 */
		/* 820B65ECh case    7:*/		if ( regs.CR[0].lt ) { return 0x820B661C;  }
		/* 820B65ECh case    7:*/		return 0x820B65F0;
		  /* 820B65F0h */ case    8:  		/* lfd FR0, <#[R1 + 256]> */
		/* 820B65F0h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000100) );
		/* 820B65F0h case    8:*/		return 0x820B65F4;
		  /* 820B65F4h */ case    9:  		/* lfd FR13, <#[R1 + 264]> */
		/* 820B65F4h case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000108) );
		/* 820B65F4h case    9:*/		return 0x820B65F8;
		  /* 820B65F8h */ case   10:  		/* fcmpu CR6, FR0, FR31 */
		/* 820B65F8h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820B65F8h case   10:*/		return 0x820B65FC;
		  /* 820B65FCh */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 820B65FCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x820B6608;  }
		/* 820B65FCh case   11:*/		return 0x820B6600;
		  /* 820B6600h */ case   12:  		/* fcmpu CR6, FR13, FR31 */
		/* 820B6600h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR31);
		/* 820B6600h case   12:*/		return 0x820B6604;
		  /* 820B6604h */ case   13:  		/* bc 12, CR6_EQ, 440 */
		/* 820B6604h case   13:*/		if ( regs.CR[6].eq ) { return 0x820B67BC;  }
		/* 820B6604h case   13:*/		return 0x820B6608;
	}
	return 0x820B6608;
} // Block from 820B65D0h-820B6608h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820B6608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6608);
		  /* 820B6608h */ case    0:  		/* fcmpu CR6, FR0, FR31 */
		/* 820B6608h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820B6608h case    0:*/		return 0x820B660C;
		  /* 820B660Ch */ case    1:  		/* bc 12, CR6_GT, 16 */
		/* 820B660Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x820B661C;  }
		/* 820B660Ch case    1:*/		return 0x820B6610;
		  /* 820B6610h */ case    2:  		/* fcmpu CR6, FR13, FR31 */
		/* 820B6610h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR31);
		/* 820B6610h case    2:*/		return 0x820B6614;
		  /* 820B6614h */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 820B6614h case    3:*/		if ( regs.CR[6].lt ) { return 0x820B661C;  }
		/* 820B6614h case    3:*/		return 0x820B6618;
		  /* 820B6618h */ case    4:  		/* li R23, 0 */
		/* 820B6618h case    4:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 820B6618h case    4:*/		return 0x820B661C;
	}
	return 0x820B661C;
} // Block from 820B6608h-820B661Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B661Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B661C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B661C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B661C);
		  /* 820B661Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B661Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B661Ch case    0:*/		return 0x820B6620;
		  /* 820B6620h */ case    1:  		/* lwz R10, <#[R1 + 88]> */
		/* 820B6620h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 820B6620h case    1:*/		return 0x820B6624;
		  /* 820B6624h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B6624h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B6624h case    2:*/		return 0x820B6628;
		  /* 820B6628h */ case    3:  		/* lwz R11, <#[R11 + 20]> */
		/* 820B6628h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820B6628h case    3:*/		return 0x820B662C;
		  /* 820B662Ch */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B662Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B662Ch case    4:*/		return 0x820B6630;
		  /* 820B6630h */ case    5:  		/* stfd FR30, <#[R11 + 32]> */
		/* 820B6630h case    5:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R11 + 0x00000020) );
		/* 820B6630h case    5:*/		return 0x820B6634;
		  /* 820B6634h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6634h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6634h case    6:*/		return 0x820B6638;
		  /* 820B6638h */ case    7:  		/* lwz R10, <#[R1 + 88]> */
		/* 820B6638h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 820B6638h case    7:*/		return 0x820B663C;
		  /* 820B663Ch */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B663Ch case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B663Ch case    8:*/		return 0x820B6640;
		  /* 820B6640h */ case    9:  		/* lwz R11, <#[R11 + 20]> */
		/* 820B6640h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820B6640h case    9:*/		return 0x820B6644;
		  /* 820B6644h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B6644h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B6644h case   10:*/		return 0x820B6648;
		  /* 820B6648h */ case   11:  		/* stfd FR30, <#[R11 + 40]> */
		/* 820B6648h case   11:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R11 + 0x00000028) );
		/* 820B6648h case   11:*/		return 0x820B664C;
	}
	return 0x820B664C;
} // Block from 820B661Ch-820B664Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 820B664Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B664C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B664C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B664C);
		  /* 820B664Ch */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 820B664Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820B664Ch case    0:*/		return 0x820B6650;
		  /* 820B6650h */ case    1:  		/* bc 12, CR6_EQ, 204 */
		/* 820B6650h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B671C;  }
		/* 820B6650h case    1:*/		return 0x820B6654;
		  /* 820B6654h */ case    2:  		/* lwz R30, <#[R1 + 120]> */
		/* 820B6654h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000078) );
		/* 820B6654h case    2:*/		return 0x820B6658;
		  /* 820B6658h */ case    3:  		/* mr R28, R22 */
		/* 820B6658h case    3:*/		regs.R28 = regs.R22;
		/* 820B6658h case    3:*/		return 0x820B665C;
		  /* 820B665Ch */ case    4:  		/* lwz R11, <#[R1 + 112]> */
		/* 820B665Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820B665Ch case    4:*/		return 0x820B6660;
		  /* 820B6660h */ case    5:  		/* lwz R29, <#[R1 + 108]> */
		/* 820B6660h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000006C) );
		/* 820B6660h case    5:*/		return 0x820B6664;
		  /* 820B6664h */ case    6:  		/* subf R26, R30, R20 */
		/* 820B6664h case    6:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R30,regs.R20);
		/* 820B6664h case    6:*/		return 0x820B6668;
		  /* 820B6668h */ case    7:  		/* subf R27, R30, R11 */
		/* 820B6668h case    7:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R30,regs.R11);
		/* 820B6668h case    7:*/		return 0x820B666C;
		  /* 820B666Ch */ case    8:  		/* lwz R4, <#[R30]> */
		/* 820B666Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 820B666Ch case    8:*/		return 0x820B6670;
		  /* 820B6670h */ case    9:  		/* lwzx R11, <#[R26 + R30]> */
		/* 820B6670h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R30 + 0x00000000) );
		/* 820B6670h case    9:*/		return 0x820B6674;
		  /* 820B6674h */ case   10:  		/* cmplw CR6, R11, R4 */
		/* 820B6674h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 820B6674h case   10:*/		return 0x820B6678;
		  /* 820B6678h */ case   11:  		/* bc 12, CR6_EQ, 148 */
		/* 820B6678h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B670C;  }
		/* 820B6678h case   11:*/		return 0x820B667C;
		  /* 820B667Ch */ case   12:  		/* lfd FR0, <#[R29]> */
		/* 820B667Ch case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B667Ch case   12:*/		return 0x820B6680;
		  /* 820B6680h */ case   13:  		/* lfd FR13, <#[R31 + 176]> */
		/* 820B6680h case   13:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B6680h case   13:*/		return 0x820B6684;
		  /* 820B6684h */ case   14:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B6684h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B6684h case   14:*/		return 0x820B6688;
		  /* 820B6688h */ case   15:  		/* bc 12, CR6_GT, 20 */
		/* 820B6688h case   15:*/		if ( regs.CR[6].gt ) { return 0x820B669C;  }
		/* 820B6688h case   15:*/		return 0x820B668C;
		  /* 820B668Ch */ case   16:  		/* lfd FR0, <#[R29 + 8]> */
		/* 820B668Ch case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R29 + 0x00000008) );
		/* 820B668Ch case   16:*/		return 0x820B6690;
		  /* 820B6690h */ case   17:  		/* lfd FR13, <#[R31 + 168]> */
		/* 820B6690h case   17:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B6690h case   17:*/		return 0x820B6694;
		  /* 820B6694h */ case   18:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B6694h case   18:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B6694h case   18:*/		return 0x820B6698;
		  /* 820B6698h */ case   19:  		/* bc 4, CR6_LT, 80 */
		/* 820B6698h case   19:*/		if ( !regs.CR[6].lt ) { return 0x820B66E8;  }
		/* 820B6698h case   19:*/		return 0x820B669C;
	}
	return 0x820B669C;
} // Block from 820B664Ch-820B669Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 820B669Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B669C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B669C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B669C);
		  /* 820B669Ch */ case    0:  		/* addi R5, R1, 176 */
		/* 820B669Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820B669Ch case    0:*/		return 0x820B66A0;
		  /* 820B66A0h */ case    1:  		/* mr R3, R31 */
		/* 820B66A0h case    1:*/		regs.R3 = regs.R31;
		/* 820B66A0h case    1:*/		return 0x820B66A4;
		  /* 820B66A4h */ case    2:  		/* bl -30852 */
		/* 820B66A4h case    2:*/		regs.LR = 0x820B66A8; return 0x820AEE20;
		/* 820B66A4h case    2:*/		return 0x820B66A8;
		  /* 820B66A8h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 820B66A8h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B66A8h case    3:*/		return 0x820B66AC;
		  /* 820B66ACh */ case    4:  		/* bc 12, CR0_LT, 44 */
		/* 820B66ACh case    4:*/		if ( regs.CR[0].lt ) { return 0x820B66D8;  }
		/* 820B66ACh case    4:*/		return 0x820B66B0;
		  /* 820B66B0h */ case    5:  		/* lfd FR13, <#[R29]> */
		/* 820B66B0h case    5:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R29 + 0x00000000) );
		/* 820B66B0h case    5:*/		return 0x820B66B4;
		  /* 820B66B4h */ case    6:  		/* lfd FR0, <#[R1 + 176]> */
		/* 820B66B4h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 820B66B4h case    6:*/		return 0x820B66B8;
		  /* 820B66B8h */ case    7:  		/* fcmpu CR6, FR13, FR0 */
		/* 820B66B8h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820B66B8h case    7:*/		return 0x820B66BC;
		  /* 820B66BCh */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 820B66BCh case    8:*/		if ( !regs.CR[6].gt ) { return 0x820B66C4;  }
		/* 820B66BCh case    8:*/		return 0x820B66C0;
		  /* 820B66C0h */ case    9:  		/* stfd FR0, <#[R29]> */
		/* 820B66C0h case    9:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B66C0h case    9:*/		return 0x820B66C4;
	}
	return 0x820B66C4;
} // Block from 820B669Ch-820B66C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B66C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B66C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B66C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B66C4);
		  /* 820B66C4h */ case    0:  		/* lfd FR13, <#[R29 + 8]> */
		/* 820B66C4h case    0:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R29 + 0x00000008) );
		/* 820B66C4h case    0:*/		return 0x820B66C8;
		  /* 820B66C8h */ case    1:  		/* lfd FR0, <#[R1 + 184]> */
		/* 820B66C8h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B66C8h case    1:*/		return 0x820B66CC;
		  /* 820B66CCh */ case    2:  		/* fcmpu CR6, FR13, FR0 */
		/* 820B66CCh case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820B66CCh case    2:*/		return 0x820B66D0;
		  /* 820B66D0h */ case    3:  		/* bc 4, CR6_LT, 24 */
		/* 820B66D0h case    3:*/		if ( !regs.CR[6].lt ) { return 0x820B66E8;  }
		/* 820B66D0h case    3:*/		return 0x820B66D4;
		  /* 820B66D4h */ case    4:  		/* b 16 */
		/* 820B66D4h case    4:*/		return 0x820B66E4;
		/* 820B66D4h case    4:*/		return 0x820B66D8;
	}
	return 0x820B66D8;
} // Block from 820B66C4h-820B66D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B66D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B66D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B66D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B66D8);
		  /* 820B66D8h */ case    0:  		/* lfd FR0, <#[R31 + 168]> */
		/* 820B66D8h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B66D8h case    0:*/		return 0x820B66DC;
		  /* 820B66DCh */ case    1:  		/* stfd FR0, <#[R29]> */
		/* 820B66DCh case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B66DCh case    1:*/		return 0x820B66E0;
		  /* 820B66E0h */ case    2:  		/* lfd FR0, <#[R31 + 176]> */
		/* 820B66E0h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B66E0h case    2:*/		return 0x820B66E4;
	}
	return 0x820B66E4;
} // Block from 820B66D8h-820B66E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B66E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B66E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B66E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B66E4);
		  /* 820B66E4h */ case    0:  		/* stfd FR0, <#[R29 + 8]> */
		/* 820B66E4h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000008) );
		/* 820B66E4h case    0:*/		return 0x820B66E8;
	}
	return 0x820B66E8;
} // Block from 820B66E4h-820B66E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B66E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B66E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B66E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B66E8);
		  /* 820B66E8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B66E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B66E8h case    0:*/		return 0x820B66EC;
		  /* 820B66ECh */ case    1:  		/* lwz R10, <#[R30]> */
		/* 820B66ECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 820B66ECh case    1:*/		return 0x820B66F0;
		  /* 820B66F0h */ case    2:  		/* lwzx R9, <#[R27 + R30]> */
		/* 820B66F0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + regs.R30 + 0x00000000) );
		/* 820B66F0h case    2:*/		return 0x820B66F4;
		  /* 820B66F4h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B66F4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B66F4h case    3:*/		return 0x820B66F8;
		  /* 820B66F8h */ case    4:  		/* lwz R11, <#[R11 + 20]> */
		/* 820B66F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820B66F8h case    4:*/		return 0x820B66FC;
		  /* 820B66FCh */ case    5:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B66FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B66FCh case    5:*/		return 0x820B6700;
		  /* 820B6700h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 820B6700h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6700h case    6:*/		return 0x820B6704;
		  /* 820B6704h */ case    7:  		/* and R11, R11, R9 */
		/* 820B6704h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820B6704h case    7:*/		return 0x820B6708;
		  /* 820B6708h */ case    8:  		/* stwx R11, <#[R27 + R30]> */
		/* 820B6708h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + regs.R30 + 0x00000000) );
		/* 820B6708h case    8:*/		return 0x820B670C;
	}
	return 0x820B670C;
} // Block from 820B66E8h-820B670Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B670Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B670C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B670C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B670C);
		  /* 820B670Ch */ case    0:  		/* addic. R28, R28, -1 */
		/* 820B670Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 820B670Ch case    0:*/		return 0x820B6710;
		  /* 820B6710h */ case    1:  		/* addi R29, R29, 16 */
		/* 820B6710h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x10);
		/* 820B6710h case    1:*/		return 0x820B6714;
		  /* 820B6714h */ case    2:  		/* addi R30, R30, 4 */
		/* 820B6714h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B6714h case    2:*/		return 0x820B6718;
		  /* 820B6718h */ case    3:  		/* bc 4, CR0_EQ, -172 */
		/* 820B6718h case    3:*/		if ( !regs.CR[0].eq ) { return 0x820B666C;  }
		/* 820B6718h case    3:*/		return 0x820B671C;
	}
	return 0x820B671C;
} // Block from 820B670Ch-820B671Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B671Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B671C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B671C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B671C);
		  /* 820B671Ch */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 820B671Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B671Ch case    0:*/		return 0x820B6720;
		  /* 820B6720h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820B6720h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6720h case    1:*/		return 0x820B6724;
		  /* 820B6724h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 820B6724h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B6760;  }
		/* 820B6724h case    2:*/		return 0x820B6728;
		  /* 820B6728h */ case    3:  		/* cmpwi CR6, R23, 0 */
		/* 820B6728h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 820B6728h case    3:*/		return 0x820B672C;
		  /* 820B672Ch */ case    4:  		/* bc 4, CR6_EQ, 44 */
		/* 820B672Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x820B6758;  }
		/* 820B672Ch case    4:*/		return 0x820B6730;
		  /* 820B6730h */ case    5:  		/* addi R7, R1, 148 */
		/* 820B6730h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x94);
		/* 820B6730h case    5:*/		return 0x820B6734;
		  /* 820B6734h */ case    6:  		/* lwz R5, <#[R1 + 84]> */
		/* 820B6734h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 820B6734h case    6:*/		return 0x820B6738;
		  /* 820B6738h */ case    7:  		/* addi R6, R1, 136 */
		/* 820B6738h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x88);
		/* 820B6738h case    7:*/		return 0x820B673C;
		  /* 820B673Ch */ case    8:  		/* lwz R4, <#[R1 + 88]> */
		/* 820B673Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 820B673Ch case    8:*/		return 0x820B6740;
		  /* 820B6740h */ case    9:  		/* mr R3, R31 */
		/* 820B6740h case    9:*/		regs.R3 = regs.R31;
		/* 820B6740h case    9:*/		return 0x820B6744;
		  /* 820B6744h */ case   10:  		/* bl -7100 */
		/* 820B6744h case   10:*/		regs.LR = 0x820B6748; return 0x820B4B88;
		/* 820B6744h case   10:*/		return 0x820B6748;
		  /* 820B6748h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820B6748h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B6748h case   11:*/		return 0x820B674C;
		  /* 820B674Ch */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 820B674Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x820B6758;  }
		/* 820B674Ch case   12:*/		return 0x820B6750;
		  /* 820B6750h */ case   13:  		/* stw R14, <#[R1 + 92]> */
		/* 820B6750h case   13:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B6750h case   13:*/		return 0x820B6754;
		  /* 820B6754h */ case   14:  		/* b 12 */
		/* 820B6754h case   14:*/		return 0x820B6760;
		/* 820B6754h case   14:*/		return 0x820B6758;
	}
	return 0x820B6758;
} // Block from 820B671Ch-820B6758h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820B6758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6758);
		  /* 820B6758h */ case    0:  		/* li R11, 0 */
		/* 820B6758h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820B6758h case    0:*/		return 0x820B675C;
		  /* 820B675Ch */ case    1:  		/* stw R11, <#[R1 + 92]> */
		/* 820B675Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B675Ch case    1:*/		return 0x820B6760;
	}
	return 0x820B6760;
} // Block from 820B6758h-820B6760h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B6760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6760);
		  /* 820B6760h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820B6760h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B6760h case    0:*/		return 0x820B6764;
		  /* 820B6764h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 820B6764h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B67B0;  }
		/* 820B6764h case    1:*/		return 0x820B6768;
		  /* 820B6768h */ case    2:  		/* lwz R11, <#[R1 + 96]> */
		/* 820B6768h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820B6768h case    2:*/		return 0x820B676C;
		  /* 820B676Ch */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 820B676Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B676Ch case    3:*/		return 0x820B6770;
		  /* 820B6770h */ case    4:  		/* bc 4, CR6_EQ, 64 */
		/* 820B6770h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820B67B0;  }
		/* 820B6770h case    4:*/		return 0x820B6774;
		  /* 820B6774h */ case    5:  		/* li R5, 0 */
		/* 820B6774h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B6774h case    5:*/		return 0x820B6778;
		  /* 820B6778h */ case    6:  		/* mr R4, R15 */
		/* 820B6778h case    6:*/		regs.R4 = regs.R15;
		/* 820B6778h case    6:*/		return 0x820B677C;
		  /* 820B677Ch */ case    7:  		/* mr R3, R31 */
		/* 820B677Ch case    7:*/		regs.R3 = regs.R31;
		/* 820B677Ch case    7:*/		return 0x820B6780;
		  /* 820B6780h */ case    8:  		/* bl 37664 */
		/* 820B6780h case    8:*/		regs.LR = 0x820B6784; return 0x820BFAA0;
		/* 820B6780h case    8:*/		return 0x820B6784;
		  /* 820B6784h */ case    9:  		/* or. R30, R3, R3 */
		/* 820B6784h case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6784h case    9:*/		return 0x820B6788;
		  /* 820B6788h */ case   10:  		/* bc 12, CR0_LT, 2660 */
		/* 820B6788h case   10:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6788h case   10:*/		return 0x820B678C;
		  /* 820B678Ch */ case   11:  		/* lwz R11, <#[R31 + 92]> */
		/* 820B678Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B678Ch case   11:*/		return 0x820B6790;
		  /* 820B6790h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 820B6790h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6790h case   12:*/		return 0x820B6794;
		  /* 820B6794h */ case   13:  		/* bc 4, CR6_EQ, 40 */
		/* 820B6794h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820B67BC;  }
		/* 820B6794h case   13:*/		return 0x820B6798;
		  /* 820B6798h */ case   14:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B6798h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B6798h case   14:*/		return 0x820B679C;
		  /* 820B679Ch */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 820B679Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B679Ch case   15:*/		return 0x820B67A0;
		  /* 820B67A0h */ case   16:  		/* bc 4, CR6_EQ, 2608 */
		/* 820B67A0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B67A0h case   16:*/		return 0x820B67A4;
		  /* 820B67A4h */ case   17:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B67A4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B67A4h case   17:*/		return 0x820B67A8;
		  /* 820B67A8h */ case   18:  		/* cmpwi CR6, R11, 0 */
		/* 820B67A8h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B67A8h case   18:*/		return 0x820B67AC;
		  /* 820B67ACh */ case   19:  		/* bc 4, CR6_EQ, 2596 */
		/* 820B67ACh case   19:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B67ACh case   19:*/		return 0x820B67B0;
	}
	return 0x820B67B0;
} // Block from 820B6760h-820B67B0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820B67B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B67B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B67B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B67B0);
		  /* 820B67B0h */ case    0:  		/* stw R25, <#[R1 + 84]> */
		/* 820B67B0h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 820B67B0h case    0:*/		return 0x820B67B4;
		  /* 820B67B4h */ case    1:  		/* cmplw CR6, R25, R17 */
		/* 820B67B4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R17);
		/* 820B67B4h case    1:*/		return 0x820B67B8;
		  /* 820B67B8h */ case    2:  		/* bc 12, CR6_LT, -1164 */
		/* 820B67B8h case    2:*/		if ( regs.CR[6].lt ) { return 0x820B632C;  }
		/* 820B67B8h case    2:*/		return 0x820B67BC;
	}
	return 0x820B67BC;
} // Block from 820B67B0h-820B67BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B67BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B67BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B67BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B67BC);
		  /* 820B67BCh */ case    0:  		/* lwz R28, <#[R1 + 84]> */
		/* 820B67BCh case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 820B67BCh case    0:*/		return 0x820B67C0;
		  /* 820B67C0h */ case    1:  		/* cmplwi CR6, R28, 1 */
		/* 820B67C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 820B67C0h case    1:*/		return 0x820B67C4;
		  /* 820B67C4h */ case    2:  		/* bc 4, CR6_GT, 2572 */
		/* 820B67C4h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820B71D0;  }
		/* 820B67C4h case    2:*/		return 0x820B67C8;
		  /* 820B67C8h */ case    3:  		/* cmplw CR6, R28, R17 */
		/* 820B67C8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R17);
		/* 820B67C8h case    3:*/		return 0x820B67CC;
		  /* 820B67CCh */ case    4:  		/* bc 4, CR6_LT, 52 */
		/* 820B67CCh case    4:*/		if ( !regs.CR[6].lt ) { return 0x820B6800;  }
		/* 820B67CCh case    4:*/		return 0x820B67D0;
		  /* 820B67D0h */ case    5:  		/* lwz R11, <#[R31 + 96]> */
		/* 820B67D0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 820B67D0h case    5:*/		return 0x820B67D4;
		  /* 820B67D4h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 820B67D4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B67D4h case    6:*/		return 0x820B67D8;
		  /* 820B67D8h */ case    7:  		/* bc 4, CR6_EQ, 2552 */
		/* 820B67D8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B67D8h case    7:*/		return 0x820B67DC;
		  /* 820B67DCh */ case    8:  		/* lwz R11, <#[R31 + 20]> */
		/* 820B67DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820B67DCh case    8:*/		return 0x820B67E0;
		  /* 820B67E0h */ case    9:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 820B67E0h case    9:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 820B67E0h case    9:*/		return 0x820B67E4;
		  /* 820B67E4h */ case   10:  		/* bc 4, CR0_EQ, 2540 */
		/* 820B67E4h case   10:*/		if ( !regs.CR[0].eq ) { return 0x820B71D0;  }
		/* 820B67E4h case   10:*/		return 0x820B67E8;
		  /* 820B67E8h */ case   11:  		/* lwz R11, <#[R31 + 92]> */
		/* 820B67E8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B67E8h case   11:*/		return 0x820B67EC;
		  /* 820B67ECh */ case   12:  		/* lwz R10, <#[R1 + 92]> */
		/* 820B67ECh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B67ECh case   12:*/		return 0x820B67F0;
		  /* 820B67F0h */ case   13:  		/* subfic R11, R11, 0 */
		/* 820B67F0h case   13:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 820B67F0h case   13:*/		return 0x820B67F4;
		  /* 820B67F4h */ case   14:  		/* subfe R11, R11, R11 */
		/* 820B67F4h case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820B67F4h case   14:*/		return 0x820B67F8;
		  /* 820B67F8h */ case   15:  		/* and R11, R11, R10 */
		/* 820B67F8h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820B67F8h case   15:*/		return 0x820B67FC;
		  /* 820B67FCh */ case   16:  		/* stw R11, <#[R1 + 92]> */
		/* 820B67FCh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B67FCh case   16:*/		return 0x820B6800;
	}
	return 0x820B6800;
} // Block from 820B67BCh-820B6800h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820B6800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6800);
		  /* 820B6800h */ case    0:  		/* cmpwi CR6, R23, 0 */
		/* 820B6800h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 820B6800h case    0:*/		return 0x820B6804;
		  /* 820B6804h */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 820B6804h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B6868;  }
		/* 820B6804h case    1:*/		return 0x820B6808;
		  /* 820B6808h */ case    2:  		/* lwz R11, <#[R1 + 92]> */
		/* 820B6808h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B6808h case    2:*/		return 0x820B680C;
		  /* 820B680Ch */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 820B680Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B680Ch case    3:*/		return 0x820B6810;
		  /* 820B6810h */ case    4:  		/* bc 4, CR6_EQ, 88 */
		/* 820B6810h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820B6868;  }
		/* 820B6810h case    4:*/		return 0x820B6814;
		  /* 820B6814h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6814h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6814h case    5:*/		return 0x820B6818;
		  /* 820B6818h */ case    6:  		/* lwz R10, <#[R11 + 112]> */
		/* 820B6818h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000070) );
		/* 820B6818h case    6:*/		return 0x820B681C;
		  /* 820B681Ch */ case    7:  		/* rlwinm. R10, R10, 0, 3, 3 */
		/* 820B681Ch case    7:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R10);
		/* 820B681Ch case    7:*/		return 0x820B6820;
		  /* 820B6820h */ case    8:  		/* bc 12, CR0_EQ, 2480 */
		/* 820B6820h case    8:*/		if ( regs.CR[0].eq ) { return 0x820B71D0;  }
		/* 820B6820h case    8:*/		return 0x820B6824;
		  /* 820B6824h */ case    9:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B6824h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B6824h case    9:*/		return 0x820B6828;
		  /* 820B6828h */ case   10:  		/* mr R29, R18 */
		/* 820B6828h case   10:*/		regs.R29 = regs.R18;
		/* 820B6828h case   10:*/		return 0x820B682C;
		  /* 820B682Ch */ case   11:  		/* cmplw CR6, R18, R11 */
		/* 820B682Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 820B682Ch case   11:*/		return 0x820B6830;
		  /* 820B6830h */ case   12:  		/* bc 4, CR6_LT, 56 */
		/* 820B6830h case   12:*/		if ( !regs.CR[6].lt ) { return 0x820B6868;  }
		/* 820B6830h case   12:*/		return 0x820B6834;
		  /* 820B6834h */ case   13:  		/* rlwinm R30, R18, 2, 0, 29 */
		/* 820B6834h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R18);
		/* 820B6834h case   13:*/		return 0x820B6838;
		  /* 820B6838h */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6838h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6838h case   14:*/		return 0x820B683C;
		  /* 820B683Ch */ case   15:  		/* lwz R11, <#[R11 + 24]> */
		/* 820B683Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820B683Ch case   15:*/		return 0x820B6840;
		  /* 820B6840h */ case   16:  		/* lwzx R3, <#[R11 + R30]> */
		/* 820B6840h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820B6840h case   16:*/		return 0x820B6844;
		  /* 820B6844h */ case   17:  		/* bl 285724 */
		/* 820B6844h case   17:*/		regs.LR = 0x820B6848; return 0x820FC460;
		/* 820B6844h case   17:*/		return 0x820B6848;
		  /* 820B6848h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 820B6848h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B6848h case   18:*/		return 0x820B684C;
		  /* 820B684Ch */ case   19:  		/* bc 4, CR0_EQ, 2436 */
		/* 820B684Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x820B71D0;  }
		/* 820B684Ch case   19:*/		return 0x820B6850;
		  /* 820B6850h */ case   20:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6850h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6850h case   20:*/		return 0x820B6854;
		  /* 820B6854h */ case   21:  		/* addi R29, R29, 1 */
		/* 820B6854h case   21:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820B6854h case   21:*/		return 0x820B6858;
		  /* 820B6858h */ case   22:  		/* addi R30, R30, 4 */
		/* 820B6858h case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B6858h case   22:*/		return 0x820B685C;
		  /* 820B685Ch */ case   23:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B685Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B685Ch case   23:*/		return 0x820B6860;
		  /* 820B6860h */ case   24:  		/* cmplw CR6, R29, R11 */
		/* 820B6860h case   24:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820B6860h case   24:*/		return 0x820B6864;
		  /* 820B6864h */ case   25:  		/* bc 12, CR6_LT, -44 */
		/* 820B6864h case   25:*/		if ( regs.CR[6].lt ) { return 0x820B6838;  }
		/* 820B6864h case   25:*/		return 0x820B6868;
	}
	return 0x820B6868;
} // Block from 820B6800h-820B6868h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820B6868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6868);
		  /* 820B6868h */ case    0:  		/* lwz R11, <#[R31 + 92]> */
		/* 820B6868h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B6868h case    0:*/		return 0x820B686C;
		  /* 820B686Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820B686Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B686Ch case    1:*/		return 0x820B6870;
		  /* 820B6870h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820B6870h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B6884;  }
		/* 820B6870h case    2:*/		return 0x820B6874;
		  /* 820B6874h */ case    3:  		/* li R11, 0 */
		/* 820B6874h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820B6874h case    3:*/		return 0x820B6878;
		  /* 820B6878h */ case    4:  		/* stw R17, <#[R1 + 84]> */
		/* 820B6878h case    4:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 820B6878h case    4:*/		return 0x820B687C;
		  /* 820B687Ch */ case    5:  		/* mr R28, R17 */
		/* 820B687Ch case    5:*/		regs.R28 = regs.R17;
		/* 820B687Ch case    5:*/		return 0x820B6880;
		  /* 820B6880h */ case    6:  		/* stw R11, <#[R31 + 92]> */
		/* 820B6880h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B6880h case    6:*/		return 0x820B6884;
	}
	return 0x820B6884;
} // Block from 820B6868h-820B6884h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B6884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6884);
		  /* 820B6884h */ case    0:  		/* cmplw CR6, R28, R17 */
		/* 820B6884h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R17);
		/* 820B6884h case    0:*/		return 0x820B6888;
		  /* 820B6888h */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 820B6888h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B68B4;  }
		/* 820B6888h case    1:*/		return 0x820B688C;
		  /* 820B688Ch */ case    2:  		/* addi R5, R1, 128 */
		/* 820B688Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820B688Ch case    2:*/		return 0x820B6890;
		  /* 820B6890h */ case    3:  		/* lwz R4, <#[R1 + 80]> */
		/* 820B6890h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 820B6890h case    3:*/		return 0x820B6894;
		  /* 820B6894h */ case    4:  		/* mr R3, R31 */
		/* 820B6894h case    4:*/		regs.R3 = regs.R31;
		/* 820B6894h case    4:*/		return 0x820B6898;
		  /* 820B6898h */ case    5:  		/* bl -24720 */
		/* 820B6898h case    5:*/		regs.LR = 0x820B689C; return 0x820B0808;
		/* 820B6898h case    5:*/		return 0x820B689C;
		  /* 820B689Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 820B689Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B689Ch case    6:*/		return 0x820B68A0;
		  /* 820B68A0h */ case    7:  		/* bc 12, CR0_LT, 16 */
		/* 820B68A0h case    7:*/		if ( regs.CR[0].lt ) { return 0x820B68B0;  }
		/* 820B68A0h case    7:*/		return 0x820B68A4;
		  /* 820B68A4h */ case    8:  		/* lfd FR0, <#[R1 + 128]> */
		/* 820B68A4h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 820B68A4h case    8:*/		return 0x820B68A8;
		  /* 820B68A8h */ case    9:  		/* fcmpu CR6, FR0, FR31 */
		/* 820B68A8h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820B68A8h case    9:*/		return 0x820B68AC;
		  /* 820B68ACh */ case   10:  		/* bc 4, CR6_EQ, 2340 */
		/* 820B68ACh case   10:*/		if ( !regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B68ACh case   10:*/		return 0x820B68B0;
	}
	return 0x820B68B0;
} // Block from 820B6884h-820B68B0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B68B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B68B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B68B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B68B0);
		  /* 820B68B0h */ case    0:  		/* cmplw CR6, R28, R17 */
		/* 820B68B0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R17);
		/* 820B68B0h case    0:*/		return 0x820B68B4;
	}
	return 0x820B68B4;
} // Block from 820B68B0h-820B68B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B68B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B68B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B68B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B68B4);
		  /* 820B68B4h */ case    0:  		/* bc 4, CR6_LT, 236 */
		/* 820B68B4h case    0:*/		if ( !regs.CR[6].lt ) { return 0x820B69A0;  }
		/* 820B68B4h case    0:*/		return 0x820B68B8;
		  /* 820B68B8h */ case    1:  		/* cmpwi CR6, R23, 0 */
		/* 820B68B8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 820B68B8h case    1:*/		return 0x820B68BC;
		  /* 820B68BCh */ case    2:  		/* bc 12, CR6_EQ, 228 */
		/* 820B68BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820B69A0;  }
		/* 820B68BCh case    2:*/		return 0x820B68C0;
		  /* 820B68C0h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 820B68C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 820B68C0h case    3:*/		return 0x820B68C4;
		  /* 820B68C4h */ case    4:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 820B68C4h case    4:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 820B68C4h case    4:*/		return 0x820B68C8;
		  /* 820B68C8h */ case    5:  		/* bc 4, CR0_EQ, 216 */
		/* 820B68C8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x820B69A0;  }
		/* 820B68C8h case    5:*/		return 0x820B68CC;
		  /* 820B68CCh */ case    6:  		/* lwz R8, <#[R31 + 8]> */
		/* 820B68CCh case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 820B68CCh case    6:*/		return 0x820B68D0;
		  /* 820B68D0h */ case    7:  		/* mr R9, R18 */
		/* 820B68D0h case    7:*/		regs.R9 = regs.R18;
		/* 820B68D0h case    7:*/		return 0x820B68D4;
		  /* 820B68D4h */ case    8:  		/* lwz R6, <#[R8 + 12]> */
		/* 820B68D4h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x0000000C) );
		/* 820B68D4h case    8:*/		return 0x820B68D8;
		  /* 820B68D8h */ case    9:  		/* cmplw CR6, R18, R6 */
		/* 820B68D8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R6);
		/* 820B68D8h case    9:*/		return 0x820B68DC;
		  /* 820B68DCh */ case   10:  		/* bc 4, CR6_LT, 188 */
		/* 820B68DCh case   10:*/		if ( !regs.CR[6].lt ) { return 0x820B6998;  }
		/* 820B68DCh case   10:*/		return 0x820B68E0;
		  /* 820B68E0h */ case   11:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 820B68E0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 820B68E0h case   11:*/		return 0x820B68E4;
		  /* 820B68E4h */ case   12:  		/* lis R7, 8208 */
		/* 820B68E4h case   12:*/		cpu::op::lis<0>(regs,&regs.R7,0x2010);
		/* 820B68E4h case   12:*/		return 0x820B68E8;
		  /* 820B68E8h */ case   13:  		/* lwz R11, <#[R8 + 24]> */
		/* 820B68E8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000018) );
		/* 820B68E8h case   13:*/		return 0x820B68EC;
		  /* 820B68ECh */ case   14:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B68ECh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B68ECh case   14:*/		return 0x820B68F0;
		  /* 820B68F0h */ case   15:  		/* lwz R11, <#[R11]> */
		/* 820B68F0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B68F0h case   15:*/		return 0x820B68F4;
		  /* 820B68F4h */ case   16:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820B68F4h case   16:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820B68F4h case   16:*/		return 0x820B68F8;
		  /* 820B68F8h */ case   17:  		/* cmplw CR6, R11, R7 */
		/* 820B68F8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 820B68F8h case   17:*/		return 0x820B68FC;
		  /* 820B68FCh */ case   18:  		/* bc 12, CR6_GT, 72 */
		/* 820B68FCh case   18:*/		if ( regs.CR[6].gt ) { return 0x820B6944;  }
		/* 820B68FCh case   18:*/		return 0x820B6900;
		  /* 820B6900h */ case   19:  		/* bc 12, CR6_EQ, 128 */
		/* 820B6900h case   19:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6900h case   19:*/		return 0x820B6904;
		  /* 820B6904h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 820B6904h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B6904h case   20:*/		return 0x820B6908;
		  /* 820B6908h */ case   21:  		/* bc 12, CR6_EQ, 120 */
		/* 820B6908h case   21:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6908h case   21:*/		return 0x820B690C;
		  /* 820B690Ch */ case   22:  		/* lis R5, 4096 */
		/* 820B690Ch case   22:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820B690Ch case   22:*/		return 0x820B6910;
		  /* 820B6910h */ case   23:  		/* cmplw CR6, R11, R5 */
		/* 820B6910h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B6910h case   23:*/		return 0x820B6914;
		  /* 820B6914h */ case   24:  		/* bc 12, CR6_EQ, 108 */
		/* 820B6914h case   24:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6914h case   24:*/		return 0x820B6918;
		  /* 820B6918h */ case   25:  		/* lis R5, 4112 */
		/* 820B6918h case   25:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820B6918h case   25:*/		return 0x820B691C;
		  /* 820B691Ch */ case   26:  		/* cmplw CR6, R11, R5 */
		/* 820B691Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B691Ch case   26:*/		return 0x820B6920;
		  /* 820B6920h */ case   27:  		/* bc 12, CR6_EQ, 96 */
		/* 820B6920h case   27:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6920h case   27:*/		return 0x820B6924;
		  /* 820B6924h */ case   28:  		/* lis R5, 4128 */
		/* 820B6924h case   28:*/		cpu::op::lis<0>(regs,&regs.R5,0x1020);
		/* 820B6924h case   28:*/		return 0x820B6928;
		  /* 820B6928h */ case   29:  		/* cmplw CR6, R11, R5 */
		/* 820B6928h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B6928h case   29:*/		return 0x820B692C;
		  /* 820B692Ch */ case   30:  		/* bc 12, CR6_EQ, 84 */
		/* 820B692Ch case   30:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B692Ch case   30:*/		return 0x820B6930;
		  /* 820B6930h */ case   31:  		/* lis R5, 4160 */
		/* 820B6930h case   31:*/		cpu::op::lis<0>(regs,&regs.R5,0x1040);
		/* 820B6930h case   31:*/		return 0x820B6934;
		  /* 820B6934h */ case   32:  		/* cmplw CR6, R11, R5 */
		/* 820B6934h case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B6934h case   32:*/		return 0x820B6938;
		  /* 820B6938h */ case   33:  		/* bc 12, CR6_EQ, 72 */
		/* 820B6938h case   33:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6938h case   33:*/		return 0x820B693C;
		  /* 820B693Ch */ case   34:  		/* lis R5, 8192 */
		/* 820B693Ch case   34:*/		cpu::op::lis<0>(regs,&regs.R5,0x2000);
		/* 820B693Ch case   34:*/		return 0x820B6940;
		  /* 820B6940h */ case   35:  		/* b 56 */
		/* 820B6940h case   35:*/		return 0x820B6978;
		/* 820B6940h case   35:*/		return 0x820B6944;
	}
	return 0x820B6944;
} // Block from 820B68B4h-820B6944h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820B6944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6944);
		  /* 820B6944h */ case    0:  		/* lis R5, 8224 */
		/* 820B6944h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x2020);
		/* 820B6944h case    0:*/		return 0x820B6948;
		  /* 820B6948h */ case    1:  		/* cmplw CR6, R11, R5 */
		/* 820B6948h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B6948h case    1:*/		return 0x820B694C;
		  /* 820B694Ch */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 820B694Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B694Ch case    2:*/		return 0x820B6950;
		  /* 820B6950h */ case    3:  		/* lis R5, 8240 */
		/* 820B6950h case    3:*/		cpu::op::lis<0>(regs,&regs.R5,0x2030);
		/* 820B6950h case    3:*/		return 0x820B6954;
		  /* 820B6954h */ case    4:  		/* cmplw CR6, R11, R5 */
		/* 820B6954h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B6954h case    4:*/		return 0x820B6958;
		  /* 820B6958h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 820B6958h case    5:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6958h case    5:*/		return 0x820B695C;
		  /* 820B695Ch */ case    6:  		/* lis R5, 8256 */
		/* 820B695Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R5,0x2040);
		/* 820B695Ch case    6:*/		return 0x820B6960;
		  /* 820B6960h */ case    7:  		/* cmplw CR6, R11, R5 */
		/* 820B6960h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B6960h case    7:*/		return 0x820B6964;
		  /* 820B6964h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 820B6964h case    8:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6964h case    8:*/		return 0x820B6968;
		  /* 820B6968h */ case    9:  		/* lis R5, 8272 */
		/* 820B6968h case    9:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B6968h case    9:*/		return 0x820B696C;
		  /* 820B696Ch */ case   10:  		/* cmplw CR6, R11, R5 */
		/* 820B696Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B696Ch case   10:*/		return 0x820B6970;
		  /* 820B6970h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 820B6970h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B6980;  }
		/* 820B6970h case   11:*/		return 0x820B6974;
		  /* 820B6974h */ case   12:  		/* lis R5, 12288 */
		/* 820B6974h case   12:*/		cpu::op::lis<0>(regs,&regs.R5,0x3000);
		/* 820B6974h case   12:*/		return 0x820B6978;
	}
	return 0x820B6978;
} // Block from 820B6944h-820B6978h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820B6978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6978);
		  /* 820B6978h */ case    0:  		/* cmplw CR6, R11, R5 */
		/* 820B6978h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 820B6978h case    0:*/		return 0x820B697C;
		  /* 820B697Ch */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 820B697Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B6998;  }
		/* 820B697Ch case    1:*/		return 0x820B6980;
	}
	return 0x820B6980;
} // Block from 820B6978h-820B6980h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B6980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6980);
		  /* 820B6980h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6980h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6980h case    0:*/		return 0x820B6984;
		  /* 820B6984h */ case    1:  		/* addi R9, R9, 1 */
		/* 820B6984h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820B6984h case    1:*/		return 0x820B6988;
		  /* 820B6988h */ case    2:  		/* addi R10, R10, 4 */
		/* 820B6988h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820B6988h case    2:*/		return 0x820B698C;
		  /* 820B698Ch */ case    3:  		/* lwz R11, <#[R11 + 12]> */
		/* 820B698Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B698Ch case    3:*/		return 0x820B6990;
		  /* 820B6990h */ case    4:  		/* cmplw CR6, R9, R11 */
		/* 820B6990h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 820B6990h case    4:*/		return 0x820B6994;
		  /* 820B6994h */ case    5:  		/* bc 12, CR6_LT, -172 */
		/* 820B6994h case    5:*/		if ( regs.CR[6].lt ) { return 0x820B68E8;  }
		/* 820B6994h case    5:*/		return 0x820B6998;
	}
	return 0x820B6998;
} // Block from 820B6980h-820B6998h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820B6998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6998);
		  /* 820B6998h */ case    0:  		/* cmplw CR6, R9, R6 */
		/* 820B6998h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 820B6998h case    0:*/		return 0x820B699C;
		  /* 820B699Ch */ case    1:  		/* bc 12, CR6_EQ, 2100 */
		/* 820B699Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820B71D0;  }
		/* 820B699Ch case    1:*/		return 0x820B69A0;
	}
	return 0x820B69A0;
} // Block from 820B6998h-820B69A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B69A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B69A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B69A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B69A0);
		  /* 820B69A0h */ case    0:  		/* li R30, 0 */
		/* 820B69A0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820B69A0h case    0:*/		return 0x820B69A4;
		  /* 820B69A4h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 820B69A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820B69A4h case    1:*/		return 0x820B69A8;
		  /* 820B69A8h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 820B69A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B69DC;  }
		/* 820B69A8h case    2:*/		return 0x820B69AC;
		  /* 820B69ACh */ case    3:  		/* li R11, 0 */
		/* 820B69ACh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820B69ACh case    3:*/		return 0x820B69B0;
		  /* 820B69B0h */ case    4:  		/* mtspr CTR, R22 */
		/* 820B69B0h case    4:*/		regs.CTR = regs.R22;
		/* 820B69B0h case    4:*/		return 0x820B69B4;
		  /* 820B69B4h */ case    5:  		/* lwzx R10, <#[R11 + R20]> */
		/* 820B69B4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 820B69B4h case    5:*/		return 0x820B69B8;
		  /* 820B69B8h */ case    6:  		/* cmpwi CR6, R10, -1 */
		/* 820B69B8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820B69B8h case    6:*/		return 0x820B69BC;
		  /* 820B69BCh */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 820B69BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x820B69D4;  }
		/* 820B69BCh case    7:*/		return 0x820B69C0;
		  /* 820B69C0h */ case    8:  		/* lwz R9, <#[R31 + 24]> */
		/* 820B69C0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 820B69C0h case    8:*/		return 0x820B69C4;
		  /* 820B69C4h */ case    9:  		/* lwzx R9, <#[R9 + R11]> */
		/* 820B69C4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820B69C4h case    9:*/		return 0x820B69C8;
		  /* 820B69C8h */ case   10:  		/* cmplw CR6, R9, R10 */
		/* 820B69C8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820B69C8h case   10:*/		return 0x820B69CC;
		  /* 820B69CCh */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 820B69CCh case   11:*/		if ( regs.CR[6].eq ) { return 0x820B69D4;  }
		/* 820B69CCh case   11:*/		return 0x820B69D0;
		  /* 820B69D0h */ case   12:  		/* addi R30, R30, 1 */
		/* 820B69D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820B69D0h case   12:*/		return 0x820B69D4;
	}
	return 0x820B69D4;
} // Block from 820B69A0h-820B69D4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820B69D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B69D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B69D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B69D4);
		  /* 820B69D4h */ case    0:  		/* addi R11, R11, 4 */
		/* 820B69D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B69D4h case    0:*/		return 0x820B69D8;
		  /* 820B69D8h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 820B69D8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B69B4;  }
		/* 820B69D8h case    1:*/		return 0x820B69DC;
	}
	return 0x820B69DC;
} // Block from 820B69D4h-820B69DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B69DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B69DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B69DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B69DC);
		  /* 820B69DCh */ case    0:  		/* lis R4, 9345 */
		/* 820B69DCh case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B69DCh case    0:*/		return 0x820B69E0;
		  /* 820B69E0h */ case    1:  		/* mulli R3, R30, 36 */
		/* 820B69E0h case    1:*/		cpu::op::mulli<0>(regs,&regs.R3,regs.R30,0x24);
		/* 820B69E0h case    1:*/		return 0x820B69E4;
		  /* 820B69E4h */ case    2:  		/* bl -190436 */
		/* 820B69E4h case    2:*/		regs.LR = 0x820B69E8; return 0x82088200;
		/* 820B69E4h case    2:*/		return 0x820B69E8;
		  /* 820B69E8h */ case    3:  		/* stw R3, <#[R1 + 152]> */
		/* 820B69E8h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000098) );
		/* 820B69E8h case    3:*/		return 0x820B69EC;
		  /* 820B69ECh */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 820B69ECh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B69ECh case    4:*/		return 0x820B69F0;
		  /* 820B69F0h */ case    5:  		/* bc 12, CR0_EQ, 2036 */
		/* 820B69F0h case    5:*/		if ( regs.CR[0].eq ) { return 0x820B71E4;  }
		/* 820B69F0h case    5:*/		return 0x820B69F4;
		  /* 820B69F4h */ case    6:  		/* mulli R9, R30, 9 */
		/* 820B69F4h case    6:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R30,0x9);
		/* 820B69F4h case    6:*/		return 0x820B69F8;
		  /* 820B69F8h */ case    7:  		/* li R11, 0 */
		/* 820B69F8h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820B69F8h case    7:*/		return 0x820B69FC;
		  /* 820B69FCh */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 820B69FCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820B69FCh case    8:*/		return 0x820B6A00;
		  /* 820B6A00h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 820B6A00h case    9:*/		if ( regs.CR[6].eq ) { return 0x820B6A18;  }
		/* 820B6A00h case    9:*/		return 0x820B6A04;
		  /* 820B6A04h */ case   10:  		/* addi R10, R3, -4 */
		/* 820B6A04h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFC);
		/* 820B6A04h case   10:*/		return 0x820B6A08;
		  /* 820B6A08h */ case   11:  		/* addi R11, R11, 1 */
		/* 820B6A08h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820B6A08h case   11:*/		return 0x820B6A0C;
		  /* 820B6A0Ch */ case   12:  		/* stwu R19, <#[R10 + 4]> */
		/* 820B6A0Ch case   12:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B6A0Ch case   12:*/		return 0x820B6A10;
		  /* 820B6A10h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 820B6A10h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820B6A10h case   13:*/		return 0x820B6A14;
		  /* 820B6A14h */ case   14:  		/* bc 12, CR6_LT, -12 */
		/* 820B6A14h case   14:*/		if ( regs.CR[6].lt ) { return 0x820B6A08;  }
		/* 820B6A14h case   14:*/		return 0x820B6A18;
	}
	return 0x820B6A18;
} // Block from 820B69DCh-820B6A18h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820B6A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6A18);
		  /* 820B6A18h */ case    0:  		/* li R10, 9 */
		/* 820B6A18h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 820B6A18h case    0:*/		return 0x820B6A1C;
		  /* 820B6A1Ch */ case    1:  		/* addi R11, R1, 192 */
		/* 820B6A1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC0);
		/* 820B6A1Ch case    1:*/		return 0x820B6A20;
		  /* 820B6A20h */ case    2:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820B6A20h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820B6A20h case    2:*/		return 0x820B6A24;
		  /* 820B6A24h */ case    3:  		/* addi R9, R11, -4 */
		/* 820B6A24h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFC);
		/* 820B6A24h case    3:*/		return 0x820B6A28;
		  /* 820B6A28h */ case    4:  		/* mr R11, R3 */
		/* 820B6A28h case    4:*/		regs.R11 = regs.R3;
		/* 820B6A28h case    4:*/		return 0x820B6A2C;
		  /* 820B6A2Ch */ case    5:  		/* mtspr CTR, R10 */
		/* 820B6A2Ch case    5:*/		regs.CTR = regs.R10;
		/* 820B6A2Ch case    5:*/		return 0x820B6A30;
		  /* 820B6A30h */ case    6:  		/* stwu R11, <#[R9 + 4]> */
		/* 820B6A30h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820B6A30h case    6:*/		return 0x820B6A34;
		  /* 820B6A34h */ case    7:  		/* add R11, R11, R8 */
		/* 820B6A34h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820B6A34h case    7:*/		return 0x820B6A38;
		  /* 820B6A38h */ case    8:  		/* bc 16, CR0_LT, -8 */
		/* 820B6A38h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6A30;  }
		/* 820B6A38h case    8:*/		return 0x820B6A3C;
		  /* 820B6A3Ch */ case    9:  		/* lwz R23, <#[R1 + 200]> */
		/* 820B6A3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000C8) );
		/* 820B6A3Ch case    9:*/		return 0x820B6A40;
		  /* 820B6A40h */ case   10:  		/* li R24, 0 */
		/* 820B6A40h case   10:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820B6A40h case   10:*/		return 0x820B6A44;
		  /* 820B6A44h */ case   11:  		/* lwz R29, <#[R1 + 196]> */
		/* 820B6A44h case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000C4) );
		/* 820B6A44h case   11:*/		return 0x820B6A48;
		  /* 820B6A48h */ case   12:  		/* li R6, 0 */
		/* 820B6A48h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B6A48h case   12:*/		return 0x820B6A4C;
		  /* 820B6A4Ch */ case   13:  		/* lwz R21, <#[R1 + 192]> */
		/* 820B6A4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000C0) );
		/* 820B6A4Ch case   13:*/		return 0x820B6A50;
		  /* 820B6A50h */ case   14:  		/* cmplwi CR6, R22, 0 */
		/* 820B6A50h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820B6A50h case   14:*/		return 0x820B6A54;
		  /* 820B6A54h */ case   15:  		/* bc 12, CR6_EQ, 152 */
		/* 820B6A54h case   15:*/		if ( regs.CR[6].eq ) { return 0x820B6AEC;  }
		/* 820B6A54h case   15:*/		return 0x820B6A58;
		  /* 820B6A58h */ case   16:  		/* li R11, 0 */
		/* 820B6A58h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820B6A58h case   16:*/		return 0x820B6A5C;
		  /* 820B6A5Ch */ case   17:  		/* mtspr CTR, R22 */
		/* 820B6A5Ch case   17:*/		regs.CTR = regs.R22;
		/* 820B6A5Ch case   17:*/		return 0x820B6A60;
		  /* 820B6A60h */ case   18:  		/* mr R10, R29 */
		/* 820B6A60h case   18:*/		regs.R10 = regs.R29;
		/* 820B6A60h case   18:*/		return 0x820B6A64;
		  /* 820B6A64h */ case   19:  		/* subf R7, R23, R21 */
		/* 820B6A64h case   19:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R23,regs.R21);
		/* 820B6A64h case   19:*/		return 0x820B6A68;
		  /* 820B6A68h */ case   20:  		/* subf R8, R29, R23 */
		/* 820B6A68h case   20:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R29,regs.R23);
		/* 820B6A68h case   20:*/		return 0x820B6A6C;
		  /* 820B6A6Ch */ case   21:  		/* lwzx R9, <#[R11 + R20]> */
		/* 820B6A6Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 820B6A6Ch case   21:*/		return 0x820B6A70;
		  /* 820B6A70h */ case   22:  		/* cmpwi CR6, R9, -1 */
		/* 820B6A70h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820B6A70h case   22:*/		return 0x820B6A74;
		  /* 820B6A74h */ case   23:  		/* bc 12, CR6_EQ, 108 */
		/* 820B6A74h case   23:*/		if ( regs.CR[6].eq ) { return 0x820B6AE0;  }
		/* 820B6A74h case   23:*/		return 0x820B6A78;
		  /* 820B6A78h */ case   24:  		/* lwz R5, <#[R31 + 24]> */
		/* 820B6A78h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6A78h case   24:*/		return 0x820B6A7C;
		  /* 820B6A7Ch */ case   25:  		/* lwzx R5, <#[R5 + R11]> */
		/* 820B6A7Ch case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 820B6A7Ch case   25:*/		return 0x820B6A80;
		  /* 820B6A80h */ case   26:  		/* cmplw CR6, R5, R9 */
		/* 820B6A80h case   26:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 820B6A80h case   26:*/		return 0x820B6A84;
		  /* 820B6A84h */ case   27:  		/* bc 12, CR6_EQ, 92 */
		/* 820B6A84h case   27:*/		if ( regs.CR[6].eq ) { return 0x820B6AE0;  }
		/* 820B6A84h case   27:*/		return 0x820B6A88;
		  /* 820B6A88h */ case   28:  		/* add R9, R8, R10 */
		/* 820B6A88h case   28:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 820B6A88h case   28:*/		return 0x820B6A8C;
		  /* 820B6A8Ch */ case   29:  		/* stwx R6, <#[R9 + R7]> */
		/* 820B6A8Ch case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 820B6A8Ch case   29:*/		return 0x820B6A90;
		  /* 820B6A90h */ case   30:  		/* lwzx R9, <#[R11 + R20]> */
		/* 820B6A90h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 820B6A90h case   30:*/		return 0x820B6A94;
		  /* 820B6A94h */ case   31:  		/* stw R9, <#[R10]> */
		/* 820B6A94h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820B6A94h case   31:*/		return 0x820B6A98;
		  /* 820B6A98h */ case   32:  		/* lwzx R9, <#[R11 + R20]> */
		/* 820B6A98h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 820B6A98h case   32:*/		return 0x820B6A9C;
		  /* 820B6A9Ch */ case   33:  		/* stwx R9, <#[R8 + R10]> */
		/* 820B6A9Ch case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B6A9Ch case   33:*/		return 0x820B6AA0;
		  /* 820B6AA0h */ case   34:  		/* lwzx R9, <#[R11 + R20]> */
		/* 820B6AA0h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 820B6AA0h case   34:*/		return 0x820B6AA4;
		  /* 820B6AA4h */ case   35:  		/* cmpwi CR6, R9, -1 */
		/* 820B6AA4h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820B6AA4h case   35:*/		return 0x820B6AA8;
		  /* 820B6AA8h */ case   36:  		/* bc 12, CR6_EQ, 40 */
		/* 820B6AA8h case   36:*/		if ( regs.CR[6].eq ) { return 0x820B6AD0;  }
		/* 820B6AA8h case   36:*/		return 0x820B6AAC;
		  /* 820B6AACh */ case   37:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B6AACh case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6AACh case   37:*/		return 0x820B6AB0;
		  /* 820B6AB0h */ case   38:  		/* lwzx R5, <#[R11 + R20]> */
		/* 820B6AB0h case   38:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 820B6AB0h case   38:*/		return 0x820B6AB4;
		  /* 820B6AB4h */ case   39:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 820B6AB4h case   39:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 820B6AB4h case   39:*/		return 0x820B6AB8;
		  /* 820B6AB8h */ case   40:  		/* lwz R4, <#[R9 + 20]> */
		/* 820B6AB8h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000014) );
		/* 820B6AB8h case   40:*/		return 0x820B6ABC;
		  /* 820B6ABCh */ case   41:  		/* lwz R9, <#[R9 + 116]> */
		/* 820B6ABCh case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000074) );
		/* 820B6ABCh case   41:*/		return 0x820B6AC0;
		  /* 820B6AC0h */ case   42:  		/* lwzx R5, <#[R4 + R5]> */
		/* 820B6AC0h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + regs.R5 + 0x00000000) );
		/* 820B6AC0h case   42:*/		return 0x820B6AC4;
		  /* 820B6AC4h */ case   43:  		/* lwz R5, <#[R5 + 4]> */
		/* 820B6AC4h case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000004) );
		/* 820B6AC4h case   43:*/		return 0x820B6AC8;
		  /* 820B6AC8h */ case   44:  		/* cmplw CR6, R9, R5 */
		/* 820B6AC8h case   44:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R5);
		/* 820B6AC8h case   44:*/		return 0x820B6ACC;
		  /* 820B6ACCh */ case   45:  		/* bc 4, CR6_EQ, 12 */
		/* 820B6ACCh case   45:*/		if ( !regs.CR[6].eq ) { return 0x820B6AD8;  }
		/* 820B6ACCh case   45:*/		return 0x820B6AD0;
	}
	return 0x820B6AD0;
} // Block from 820B6A18h-820B6AD0h (46 instructions)

//////////////////////////////////////////////////////
// Block at 820B6AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6AD0);
		  /* 820B6AD0h */ case    0:  		/* lwz R9, <#[R31 + 36]> */
		/* 820B6AD0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000024) );
		/* 820B6AD0h case    0:*/		return 0x820B6AD4;
		  /* 820B6AD4h */ case    1:  		/* stw R9, <#[R10]> */
		/* 820B6AD4h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820B6AD4h case    1:*/		return 0x820B6AD8;
	}
	return 0x820B6AD8;
} // Block from 820B6AD0h-820B6AD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B6AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6AD8);
		  /* 820B6AD8h */ case    0:  		/* addi R24, R24, 1 */
		/* 820B6AD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 820B6AD8h case    0:*/		return 0x820B6ADC;
		  /* 820B6ADCh */ case    1:  		/* addi R10, R10, 4 */
		/* 820B6ADCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820B6ADCh case    1:*/		return 0x820B6AE0;
	}
	return 0x820B6AE0;
} // Block from 820B6AD8h-820B6AE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B6AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6AE0);
		  /* 820B6AE0h */ case    0:  		/* addi R6, R6, 1 */
		/* 820B6AE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820B6AE0h case    0:*/		return 0x820B6AE4;
		  /* 820B6AE4h */ case    1:  		/* addi R11, R11, 4 */
		/* 820B6AE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B6AE4h case    1:*/		return 0x820B6AE8;
		  /* 820B6AE8h */ case    2:  		/* bc 16, CR0_LT, -124 */
		/* 820B6AE8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6A6C;  }
		/* 820B6AE8h case    2:*/		return 0x820B6AEC;
	}
	return 0x820B6AEC;
} // Block from 820B6AE0h-820B6AECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B6AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6AEC);
		  /* 820B6AECh */ case    0:  		/* mr R6, R20 */
		/* 820B6AECh case    0:*/		regs.R6 = regs.R20;
		/* 820B6AECh case    0:*/		return 0x820B6AF0;
		  /* 820B6AF0h */ case    1:  		/* mr R5, R18 */
		/* 820B6AF0h case    1:*/		regs.R5 = regs.R18;
		/* 820B6AF0h case    1:*/		return 0x820B6AF4;
		  /* 820B6AF4h */ case    2:  		/* mr R4, R16 */
		/* 820B6AF4h case    2:*/		regs.R4 = regs.R16;
		/* 820B6AF4h case    2:*/		return 0x820B6AF8;
		  /* 820B6AF8h */ case    3:  		/* mr R3, R31 */
		/* 820B6AF8h case    3:*/		regs.R3 = regs.R31;
		/* 820B6AF8h case    3:*/		return 0x820B6AFC;
		  /* 820B6AFCh */ case    4:  		/* bl -25132 */
		/* 820B6AFCh case    4:*/		regs.LR = 0x820B6B00; return 0x820B08D0;
		/* 820B6AFCh case    4:*/		return 0x820B6B00;
		  /* 820B6B00h */ case    5:  		/* lwz R11, <#[R1 + 84]> */
		/* 820B6B00h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820B6B00h case    5:*/		return 0x820B6B04;
		  /* 820B6B04h */ case    6:  		/* li R10, 0 */
		/* 820B6B04h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820B6B04h case    6:*/		return 0x820B6B08;
		  /* 820B6B08h */ case    7:  		/* lwz R3, <#[R31 + 8]> */
		/* 820B6B08h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6B08h case    7:*/		return 0x820B6B0C;
		  /* 820B6B0Ch */ case    8:  		/* li R6, 0 */
		/* 820B6B0Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B6B0Ch case    8:*/		return 0x820B6B10;
		  /* 820B6B10h */ case    9:  		/* stw R10, <#[R31 + 108]> */
		/* 820B6B10h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 820B6B10h case    9:*/		return 0x820B6B14;
		  /* 820B6B14h */ case   10:  		/* li R5, 0 */
		/* 820B6B14h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B6B14h case   10:*/		return 0x820B6B18;
		  /* 820B6B18h */ case   11:  		/* mr R9, R11 */
		/* 820B6B18h case   11:*/		regs.R9 = regs.R11;
		/* 820B6B18h case   11:*/		return 0x820B6B1C;
		  /* 820B6B1Ch */ case   12:  		/* stw R11, <#[R31 + 112]> */
		/* 820B6B1Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820B6B1Ch case   12:*/		return 0x820B6B20;
	}
	return 0x820B6B20;
} // Block from 820B6AECh-820B6B20h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820B6B20h
// Function '?EmitForLoop@CCompiler@D3DXShader@@IAAJPAVCNode@2@000PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6B20);
		  /* 820B6B20h */ case    0:  		/* std R11, <#[R1 + 128]> */
		/* 820B6B20h case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B6B20h case    0:*/		return 0x820B6B24;
		  /* 820B6B24h */ case    1:  		/* lfd FR0, <#[R1 + 128]> */
		/* 820B6B24h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 820B6B24h case    1:*/		return 0x820B6B28;
		  /* 820B6B28h */ case    2:  		/* fcfid FR1, FR0 */
		/* 820B6B28h case    2:*/		cpu::op::fcfid<0>(regs,&regs.FR1,regs.FR0);
		/* 820B6B28h case    2:*/		return 0x820B6B2C;
		  /* 820B6B2Ch */ case    3:  		/* lwz R4, <#[R3 + 120]> */
		/* 820B6B2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820B6B2Ch case    3:*/		return 0x820B6B30;
		  /* 820B6B30h */ case    4:  		/* bl 288504 */
		/* 820B6B30h case    4:*/		regs.LR = 0x820B6B34; return 0x820FD228;
		/* 820B6B30h case    4:*/		return 0x820B6B34;
		  /* 820B6B34h */ case    5:  		/* stw R3, <#[R1 + 164]> */
		/* 820B6B34h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B6B34h case    5:*/		return 0x820B6B38;
		  /* 820B6B38h */ case    6:  		/* lis R5, 4368 */
		/* 820B6B38h case    6:*/		cpu::op::lis<0>(regs,&regs.R5,0x1110);
		/* 820B6B38h case    6:*/		return 0x820B6B3C;
		  /* 820B6B3Ch */ case    7:  		/* stw R19, <#[R1 + 116]> */
		/* 820B6B3Ch case    7:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000074) );
		/* 820B6B3Ch case    7:*/		return 0x820B6B40;
		  /* 820B6B40h */ case    8:  		/* li R9, 0 */
		/* 820B6B40h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6B40h case    8:*/		return 0x820B6B44;
		  /* 820B6B44h */ case    9:  		/* li R8, 0 */
		/* 820B6B44h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B6B44h case    9:*/		return 0x820B6B48;
		  /* 820B6B48h */ case   10:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6B48h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6B48h case   10:*/		return 0x820B6B4C;
		  /* 820B6B4Ch */ case   11:  		/* addi R7, R1, 164 */
		/* 820B6B4Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA4);
		/* 820B6B4Ch case   11:*/		return 0x820B6B50;
		  /* 820B6B50h */ case   12:  		/* addi R6, R1, 116 */
		/* 820B6B50h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x74);
		/* 820B6B50h case   12:*/		return 0x820B6B54;
		  /* 820B6B54h */ case   13:  		/* ori R5, R5, 1 */
		/* 820B6B54h case   13:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B6B54h case   13:*/		return 0x820B6B58;
		  /* 820B6B58h */ case   14:  		/* mr R3, R31 */
		/* 820B6B58h case   14:*/		regs.R3 = regs.R31;
		/* 820B6B58h case   14:*/		return 0x820B6B5C;
		  /* 820B6B5Ch */ case   15:  		/* bl -24660 */
		/* 820B6B5Ch case   15:*/		regs.LR = 0x820B6B60; return 0x820B0B08;
		/* 820B6B5Ch case   15:*/		return 0x820B6B60;
		  /* 820B6B60h */ case   16:  		/* or. R30, R3, R3 */
		/* 820B6B60h case   16:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6B60h case   16:*/		return 0x820B6B64;
		  /* 820B6B64h */ case   17:  		/* bc 12, CR0_LT, 1672 */
		/* 820B6B64h case   17:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6B64h case   17:*/		return 0x820B6B68;
		  /* 820B6B68h */ case   18:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6B68h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6B68h case   18:*/		return 0x820B6B6C;
		  /* 820B6B6Ch */ case   19:  		/* rlwinm R25, R24, 0, 12, 31 */
		/* 820B6B6Ch case   19:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R25,regs.R24);
		/* 820B6B6Ch case   19:*/		return 0x820B6B70;
		  /* 820B6B70h */ case   20:  		/* lwz R10, <#[R1 + 116]> */
		/* 820B6B70h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 820B6B70h case   20:*/		return 0x820B6B74;
		  /* 820B6B74h */ case   21:  		/* li R9, 0 */
		/* 820B6B74h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6B74h case   21:*/		return 0x820B6B78;
		  /* 820B6B78h */ case   22:  		/* li R8, 0 */
		/* 820B6B78h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B6B78h case   22:*/		return 0x820B6B7C;
		  /* 820B6B7Ch */ case   23:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6B7Ch case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6B7Ch case   23:*/		return 0x820B6B80;
		  /* 820B6B80h */ case   24:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B6B80h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B6B80h case   24:*/		return 0x820B6B84;
		  /* 820B6B84h */ case   25:  		/* mr R7, R29 */
		/* 820B6B84h case   25:*/		regs.R7 = regs.R29;
		/* 820B6B84h case   25:*/		return 0x820B6B88;
		  /* 820B6B88h */ case   26:  		/* lwz R30, <#[R11 + 20]> */
		/* 820B6B88h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000014) );
		/* 820B6B88h case   26:*/		return 0x820B6B8C;
		  /* 820B6B8Ch */ case   27:  		/* mr R6, R23 */
		/* 820B6B8Ch case   27:*/		regs.R6 = regs.R23;
		/* 820B6B8Ch case   27:*/		return 0x820B6B90;
		  /* 820B6B90h */ case   28:  		/* lwz R11, <#[R11 + 164]> */
		/* 820B6B90h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A4) );
		/* 820B6B90h case   28:*/		return 0x820B6B94;
		  /* 820B6B94h */ case   29:  		/* oris R5, R25, 4384 */
		/* 820B6B94h case   29:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x1120);
		/* 820B6B94h case   29:*/		return 0x820B6B98;
		  /* 820B6B98h */ case   30:  		/* mr R3, R31 */
		/* 820B6B98h case   30:*/		regs.R3 = regs.R31;
		/* 820B6B98h case   30:*/		return 0x820B6B9C;
		  /* 820B6B9Ch */ case   31:  		/* lwzx R10, <#[R30 + R10]> */
		/* 820B6B9Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 820B6B9Ch case   31:*/		return 0x820B6BA0;
		  /* 820B6BA0h */ case   32:  		/* stw R11, <#[R10 + 4]> */
		/* 820B6BA0h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820B6BA0h case   32:*/		return 0x820B6BA4;
		  /* 820B6BA4h */ case   33:  		/* stw R14, <#[R31 + 52]> */
		/* 820B6BA4h case   33:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R31 + 0x00000034) );
		/* 820B6BA4h case   33:*/		return 0x820B6BA8;
		  /* 820B6BA8h */ case   34:  		/* lwz R11, <#[R1 + 116]> */
		/* 820B6BA8h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820B6BA8h case   34:*/		return 0x820B6BAC;
		  /* 820B6BACh */ case   35:  		/* stw R11, <#[R31 + 48]> */
		/* 820B6BACh case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B6BACh case   35:*/		return 0x820B6BB0;
		  /* 820B6BB0h */ case   36:  		/* bl -24744 */
		/* 820B6BB0h case   36:*/		regs.LR = 0x820B6BB4; return 0x820B0B08;
		/* 820B6BB0h case   36:*/		return 0x820B6BB4;
		  /* 820B6BB4h */ case   37:  		/* or. R30, R3, R3 */
		/* 820B6BB4h case   37:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6BB4h case   37:*/		return 0x820B6BB8;
		  /* 820B6BB8h */ case   38:  		/* bc 12, CR0_LT, 1588 */
		/* 820B6BB8h case   38:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6BB8h case   38:*/		return 0x820B6BBC;
		  /* 820B6BBCh */ case   39:  		/* lwz R22, <#[R1 + 224]> */
		/* 820B6BBCh case   39:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000E0) );
		/* 820B6BBCh case   39:*/		return 0x820B6BC0;
		  /* 820B6BC0h */ case   40:  		/* li R9, 0 */
		/* 820B6BC0h case   40:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6BC0h case   40:*/		return 0x820B6BC4;
		  /* 820B6BC4h */ case   41:  		/* li R8, 0 */
		/* 820B6BC4h case   41:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B6BC4h case   41:*/		return 0x820B6BC8;
		  /* 820B6BC8h */ case   42:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6BC8h case   42:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6BC8h case   42:*/		return 0x820B6BCC;
		  /* 820B6BCCh */ case   43:  		/* mr R7, R23 */
		/* 820B6BCCh case   43:*/		regs.R7 = regs.R23;
		/* 820B6BCCh case   43:*/		return 0x820B6BD0;
		  /* 820B6BD0h */ case   44:  		/* mr R6, R22 */
		/* 820B6BD0h case   44:*/		regs.R6 = regs.R22;
		/* 820B6BD0h case   44:*/		return 0x820B6BD4;
		  /* 820B6BD4h */ case   45:  		/* oris R5, R25, 4400 */
		/* 820B6BD4h case   45:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x1130);
		/* 820B6BD4h case   45:*/		return 0x820B6BD8;
		  /* 820B6BD8h */ case   46:  		/* mr R3, R31 */
		/* 820B6BD8h case   46:*/		regs.R3 = regs.R31;
		/* 820B6BD8h case   46:*/		return 0x820B6BDC;
		  /* 820B6BDCh */ case   47:  		/* bl -24788 */
		/* 820B6BDCh case   47:*/		regs.LR = 0x820B6BE0; return 0x820B0B08;
		/* 820B6BDCh case   47:*/		return 0x820B6BE0;
		  /* 820B6BE0h */ case   48:  		/* or. R30, R3, R3 */
		/* 820B6BE0h case   48:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6BE0h case   48:*/		return 0x820B6BE4;
		  /* 820B6BE4h */ case   49:  		/* bc 12, CR0_LT, 1544 */
		/* 820B6BE4h case   49:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6BE4h case   49:*/		return 0x820B6BE8;
		  /* 820B6BE8h */ case   50:  		/* cmplwi CR6, R24, 0 */
		/* 820B6BE8h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B6BE8h case   50:*/		return 0x820B6BEC;
		  /* 820B6BECh */ case   51:  		/* bc 12, CR6_EQ, 212 */
		/* 820B6BECh case   51:*/		if ( regs.CR[6].eq ) { return 0x820B6CC0;  }
		/* 820B6BECh case   51:*/		return 0x820B6BF0;
		  /* 820B6BF0h */ case   52:  		/* lwz R5, <#[R1 + 112]> */
		/* 820B6BF0h case   52:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 820B6BF0h case   52:*/		return 0x820B6BF4;
		  /* 820B6BF4h */ case   53:  		/* mr R11, R23 */
		/* 820B6BF4h case   53:*/		regs.R11 = regs.R23;
		/* 820B6BF4h case   53:*/		return 0x820B6BF8;
		  /* 820B6BF8h */ case   54:  		/* mtspr CTR, R24 */
		/* 820B6BF8h case   54:*/		regs.CTR = regs.R24;
		/* 820B6BF8h case   54:*/		return 0x820B6BFC;
		  /* 820B6BFCh */ case   55:  		/* subf R7, R23, R21 */
		/* 820B6BFCh case   55:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R23,regs.R21);
		/* 820B6BFCh case   55:*/		return 0x820B6C00;
		  /* 820B6C00h */ case   56:  		/* subf R6, R23, R22 */
		/* 820B6C00h case   56:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R23,regs.R22);
		/* 820B6C00h case   56:*/		return 0x820B6C04;
		  /* 820B6C04h */ case   57:  		/* lwzx R10, <#[R11 + R7]> */
		/* 820B6C04h case   57:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820B6C04h case   57:*/		return 0x820B6C08;
		  /* 820B6C08h */ case   58:  		/* lwz R8, <#[R31 + 8]> */
		/* 820B6C08h case   58:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6C08h case   58:*/		return 0x820B6C0C;
		  /* 820B6C0Ch */ case   59:  		/* lwz R9, <#[R1 + 108]> */
		/* 820B6C0Ch case   59:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 820B6C0Ch case   59:*/		return 0x820B6C10;
		  /* 820B6C10h */ case   60:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 820B6C10h case   60:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 820B6C10h case   60:*/		return 0x820B6C14;
		  /* 820B6C14h */ case   61:  		/* lwz R4, <#[R11]> */
		/* 820B6C14h case   61:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6C14h case   61:*/		return 0x820B6C18;
		  /* 820B6C18h */ case   62:  		/* add R9, R10, R9 */
		/* 820B6C18h case   62:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 820B6C18h case   62:*/		return 0x820B6C1C;
		  /* 820B6C1Ch */ case   63:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 820B6C1Ch case   63:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 820B6C1Ch case   63:*/		return 0x820B6C20;
		  /* 820B6C20h */ case   64:  		/* lwz R8, <#[R8 + 20]> */
		/* 820B6C20h case   64:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000014) );
		/* 820B6C20h case   64:*/		return 0x820B6C24;
		  /* 820B6C24h */ case   65:  		/* lfd FR0, <#[R9]> */
		/* 820B6C24h case   65:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000000) );
		/* 820B6C24h case   65:*/		return 0x820B6C28;
		  /* 820B6C28h */ case   66:  		/* lfd FR13, <#[R9 + 8]> */
		/* 820B6C28h case   66:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000008) );
		/* 820B6C28h case   66:*/		return 0x820B6C2C;
		  /* 820B6C2Ch */ case   67:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B6C2Ch case   67:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B6C2Ch case   67:*/		return 0x820B6C30;
		  /* 820B6C30h */ case   68:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B6C30h case   68:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B6C30h case   68:*/		return 0x820B6C34;
		  /* 820B6C34h */ case   69:  		/* bc 12, CR6_GT, 52 */
		/* 820B6C34h case   69:*/		if ( regs.CR[6].gt ) { return 0x820B6C68;  }
		/* 820B6C34h case   69:*/		return 0x820B6C38;
		  /* 820B6C38h */ case   70:  		/* stfd FR0, <#[R10 + 32]> */
		/* 820B6C38h case   70:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + 0x00000020) );
		/* 820B6C38h case   70:*/		return 0x820B6C3C;
		  /* 820B6C3Ch */ case   71:  		/* lwz R8, <#[R10]> */
		/* 820B6C3Ch case   71:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820B6C3Ch case   71:*/		return 0x820B6C40;
		  /* 820B6C40h */ case   72:  		/* rlwimi R8, R14, 8, 23, 24 */
		/* 820B6C40h case   72:*/		cpu::op::rlwimi<0,8,23,24>(regs,&regs.R8,regs.R14);
		/* 820B6C40h case   72:*/		return 0x820B6C44;
		  /* 820B6C44h */ case   73:  		/* lfd FR0, <#[R9 + 8]> */
		/* 820B6C44h case   73:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000008) );
		/* 820B6C44h case   73:*/		return 0x820B6C48;
		  /* 820B6C48h */ case   74:  		/* stw R8, <#[R10]> */
		/* 820B6C48h case   74:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820B6C48h case   74:*/		return 0x820B6C4C;
		  /* 820B6C4Ch */ case   75:  		/* stfd FR0, <#[R10 + 40]> */
		/* 820B6C4Ch case   75:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + 0x00000028) );
		/* 820B6C4Ch case   75:*/		return 0x820B6C50;
		  /* 820B6C50h */ case   76:  		/* lfd FR0, <#[R9]> */
		/* 820B6C50h case   76:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000000) );
		/* 820B6C50h case   76:*/		return 0x820B6C54;
		  /* 820B6C54h */ case   77:  		/* lfd FR13, <#[R9 + 8]> */
		/* 820B6C54h case   77:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000008) );
		/* 820B6C54h case   77:*/		return 0x820B6C58;
		  /* 820B6C58h */ case   78:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B6C58h case   78:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B6C58h case   78:*/		return 0x820B6C5C;
		  /* 820B6C5Ch */ case   79:  		/* bc 4, CR6_EQ, 12 */
		/* 820B6C5Ch case   79:*/		if ( !regs.CR[6].eq ) { return 0x820B6C68;  }
		/* 820B6C5Ch case   79:*/		return 0x820B6C60;
		  /* 820B6C60h */ case   80:  		/* ori R9, R8, 128 */
		/* 820B6C60h case   80:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R8,0x80);
		/* 820B6C60h case   80:*/		return 0x820B6C64;
		  /* 820B6C64h */ case   81:  		/* stw R9, <#[R10]> */
		/* 820B6C64h case   81:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820B6C64h case   81:*/		return 0x820B6C68;
	}
	return 0x820B6C68;
} // Block from 820B6B20h-820B6C68h (82 instructions)

//////////////////////////////////////////////////////
// Block at 820B6C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6C68);
		  /* 820B6C68h */ case    0:  		/* lwzx R9, <#[R11 + R7]> */
		/* 820B6C68h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820B6C68h case    0:*/		return 0x820B6C6C;
		  /* 820B6C6Ch */ case    1:  		/* lwz R8, <#[R10]> */
		/* 820B6C6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820B6C6Ch case    1:*/		return 0x820B6C70;
		  /* 820B6C70h */ case    2:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B6C70h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B6C70h case    2:*/		return 0x820B6C74;
		  /* 820B6C74h */ case    3:  		/* lwzx R9, <#[R9 + R5]> */
		/* 820B6C74h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 820B6C74h case    3:*/		return 0x820B6C78;
		  /* 820B6C78h */ case    4:  		/* or R9, R9, R8 */
		/* 820B6C78h case    4:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 820B6C78h case    4:*/		return 0x820B6C7C;
		  /* 820B6C7Ch */ case    5:  		/* stw R9, <#[R10]> */
		/* 820B6C7Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820B6C7Ch case    5:*/		return 0x820B6C80;
		  /* 820B6C80h */ case    6:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B6C80h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6C80h case    6:*/		return 0x820B6C84;
		  /* 820B6C84h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 820B6C84h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6C84h case    7:*/		return 0x820B6C88;
		  /* 820B6C88h */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B6C88h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B6C88h case    8:*/		return 0x820B6C8C;
		  /* 820B6C8Ch */ case    9:  		/* lwz R8, <#[R10 + 20]> */
		/* 820B6C8Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 820B6C8Ch case    9:*/		return 0x820B6C90;
		  /* 820B6C90h */ case   10:  		/* lwz R10, <#[R10 + 152]> */
		/* 820B6C90h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000098) );
		/* 820B6C90h case   10:*/		return 0x820B6C94;
		  /* 820B6C94h */ case   11:  		/* lwzx R9, <#[R8 + R9]> */
		/* 820B6C94h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820B6C94h case   11:*/		return 0x820B6C98;
		  /* 820B6C98h */ case   12:  		/* stw R10, <#[R9 + 4]> */
		/* 820B6C98h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 820B6C98h case   12:*/		return 0x820B6C9C;
		  /* 820B6C9Ch */ case   13:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B6C9Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6C9Ch case   13:*/		return 0x820B6CA0;
		  /* 820B6CA0h */ case   14:  		/* lwzx R9, <#[R6 + R11]> */
		/* 820B6CA0h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 820B6CA0h case   14:*/		return 0x820B6CA4;
		  /* 820B6CA4h */ case   15:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B6CA4h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B6CA4h case   15:*/		return 0x820B6CA8;
		  /* 820B6CA8h */ case   16:  		/* lwz R8, <#[R10 + 20]> */
		/* 820B6CA8h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 820B6CA8h case   16:*/		return 0x820B6CAC;
		  /* 820B6CACh */ case   17:  		/* addi R11, R11, 4 */
		/* 820B6CACh case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B6CACh case   17:*/		return 0x820B6CB0;
		  /* 820B6CB0h */ case   18:  		/* lwzx R9, <#[R9 + R8]> */
		/* 820B6CB0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820B6CB0h case   18:*/		return 0x820B6CB4;
		  /* 820B6CB4h */ case   19:  		/* lwz R10, <#[R10 + 172]> */
		/* 820B6CB4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x000000AC) );
		/* 820B6CB4h case   19:*/		return 0x820B6CB8;
		  /* 820B6CB8h */ case   20:  		/* stw R10, <#[R9 + 4]> */
		/* 820B6CB8h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 820B6CB8h case   20:*/		return 0x820B6CBC;
		  /* 820B6CBCh */ case   21:  		/* bc 16, CR0_LT, -184 */
		/* 820B6CBCh case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6C04;  }
		/* 820B6CBCh case   21:*/		return 0x820B6CC0;
	}
	return 0x820B6CC0;
} // Block from 820B6C68h-820B6CC0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820B6CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6CC0);
		  /* 820B6CC0h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820B6CC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B6CC0h case    0:*/		return 0x820B6CC4;
		  /* 820B6CC4h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 820B6CC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B6CEC;  }
		/* 820B6CC4h case    1:*/		return 0x820B6CC8;
		  /* 820B6CC8h */ case    2:  		/* lwz R11, <#[R1 + 96]> */
		/* 820B6CC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820B6CC8h case    2:*/		return 0x820B6CCC;
		  /* 820B6CCCh */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 820B6CCCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6CCCh case    3:*/		return 0x820B6CD0;
		  /* 820B6CD0h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 820B6CD0h case    4:*/		if ( regs.CR[6].eq ) { return 0x820B6CEC;  }
		/* 820B6CD0h case    4:*/		return 0x820B6CD4;
		  /* 820B6CD4h */ case    5:  		/* li R5, 0 */
		/* 820B6CD4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B6CD4h case    5:*/		return 0x820B6CD8;
		  /* 820B6CD8h */ case    6:  		/* mr R4, R15 */
		/* 820B6CD8h case    6:*/		regs.R4 = regs.R15;
		/* 820B6CD8h case    6:*/		return 0x820B6CDC;
		  /* 820B6CDCh */ case    7:  		/* mr R3, R31 */
		/* 820B6CDCh case    7:*/		regs.R3 = regs.R31;
		/* 820B6CDCh case    7:*/		return 0x820B6CE0;
		  /* 820B6CE0h */ case    8:  		/* bl 36288 */
		/* 820B6CE0h case    8:*/		regs.LR = 0x820B6CE4; return 0x820BFAA0;
		/* 820B6CE0h case    8:*/		return 0x820B6CE4;
		  /* 820B6CE4h */ case    9:  		/* or. R30, R3, R3 */
		/* 820B6CE4h case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6CE4h case    9:*/		return 0x820B6CE8;
		  /* 820B6CE8h */ case   10:  		/* bc 12, CR0_LT, 1284 */
		/* 820B6CE8h case   10:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6CE8h case   10:*/		return 0x820B6CEC;
	}
	return 0x820B6CEC;
} // Block from 820B6CC0h-820B6CECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B6CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6CEC);
		  /* 820B6CECh */ case    0:  		/* stw R19, <#[R1 + 80]> */
		/* 820B6CECh case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 820B6CECh case    0:*/		return 0x820B6CF0;
		  /* 820B6CF0h */ case    1:  		/* li R6, 0 */
		/* 820B6CF0h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B6CF0h case    1:*/		return 0x820B6CF4;
		  /* 820B6CF4h */ case    2:  		/* addi R5, R1, 80 */
		/* 820B6CF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 820B6CF4h case    2:*/		return 0x820B6CF8;
		  /* 820B6CF8h */ case    3:  		/* lwz R4, <#[R1 + 492]> */
		/* 820B6CF8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001EC) );
		/* 820B6CF8h case    3:*/		return 0x820B6CFC;
		  /* 820B6CFCh */ case    4:  		/* mr R3, R31 */
		/* 820B6CFCh case    4:*/		regs.R3 = regs.R31;
		/* 820B6CFCh case    4:*/		return 0x820B6D00;
		  /* 820B6D00h */ case    5:  		/* bl 41448 */
		/* 820B6D00h case    5:*/		regs.LR = 0x820B6D04; return 0x820C0EE8;
		/* 820B6D00h case    5:*/		return 0x820B6D04;
		  /* 820B6D04h */ case    6:  		/* or. R30, R3, R3 */
		/* 820B6D04h case    6:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6D04h case    6:*/		return 0x820B6D08;
		  /* 820B6D08h */ case    7:  		/* bc 12, CR0_LT, 1252 */
		/* 820B6D08h case    7:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6D08h case    7:*/		return 0x820B6D0C;
		  /* 820B6D0Ch */ case    8:  		/* cmplwi CR6, R24, 0 */
		/* 820B6D0Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B6D0Ch case    8:*/		return 0x820B6D10;
		  /* 820B6D10h */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 820B6D10h case    9:*/		if ( regs.CR[6].eq ) { return 0x820B6D3C;  }
		/* 820B6D10h case    9:*/		return 0x820B6D14;
		  /* 820B6D14h */ case   10:  		/* mtspr CTR, R24 */
		/* 820B6D14h case   10:*/		regs.CTR = regs.R24;
		/* 820B6D14h case   10:*/		return 0x820B6D18;
		  /* 820B6D18h */ case   11:  		/* mr R11, R23 */
		/* 820B6D18h case   11:*/		regs.R11 = regs.R23;
		/* 820B6D18h case   11:*/		return 0x820B6D1C;
		  /* 820B6D1Ch */ case   12:  		/* subf R10, R23, R21 */
		/* 820B6D1Ch case   12:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R23,regs.R21);
		/* 820B6D1Ch case   12:*/		return 0x820B6D20;
		  /* 820B6D20h */ case   13:  		/* lwzx R9, <#[R11 + R10]> */
		/* 820B6D20h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B6D20h case   13:*/		return 0x820B6D24;
		  /* 820B6D24h */ case   14:  		/* lwz R8, <#[R31 + 24]> */
		/* 820B6D24h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6D24h case   14:*/		return 0x820B6D28;
		  /* 820B6D28h */ case   15:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B6D28h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B6D28h case   15:*/		return 0x820B6D2C;
		  /* 820B6D2Ch */ case   16:  		/* lwzx R9, <#[R9 + R8]> */
		/* 820B6D2Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820B6D2Ch case   16:*/		return 0x820B6D30;
		  /* 820B6D30h */ case   17:  		/* stw R9, <#[R11]> */
		/* 820B6D30h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6D30h case   17:*/		return 0x820B6D34;
		  /* 820B6D34h */ case   18:  		/* addi R11, R11, 4 */
		/* 820B6D34h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B6D34h case   18:*/		return 0x820B6D38;
		  /* 820B6D38h */ case   19:  		/* bc 16, CR0_LT, -24 */
		/* 820B6D38h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6D20;  }
		/* 820B6D38h case   19:*/		return 0x820B6D3C;
	}
	return 0x820B6D3C;
} // Block from 820B6CECh-820B6D3Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 820B6D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6D3C);
		  /* 820B6D3Ch */ case    0:  		/* addi R5, R1, 176 */
		/* 820B6D3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xB0);
		/* 820B6D3Ch case    0:*/		return 0x820B6D40;
		  /* 820B6D40h */ case    1:  		/* lwz R4, <#[R1 + 80]> */
		/* 820B6D40h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 820B6D40h case    1:*/		return 0x820B6D44;
		  /* 820B6D44h */ case    2:  		/* mr R3, R31 */
		/* 820B6D44h case    2:*/		regs.R3 = regs.R31;
		/* 820B6D44h case    2:*/		return 0x820B6D48;
		  /* 820B6D48h */ case    3:  		/* bl -32552 */
		/* 820B6D48h case    3:*/		regs.LR = 0x820B6D4C; return 0x820AEE20;
		/* 820B6D48h case    3:*/		return 0x820B6D4C;
		  /* 820B6D4Ch */ case    4:  		/* lwz R26, <#[R1 + 216]> */
		/* 820B6D4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000D8) );
		/* 820B6D4Ch case    4:*/		return 0x820B6D50;
		  /* 820B6D50h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820B6D50h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B6D50h case    5:*/		return 0x820B6D54;
		  /* 820B6D54h */ case    6:  		/* bc 12, CR0_LT, 140 */
		/* 820B6D54h case    6:*/		if ( regs.CR[0].lt ) { return 0x820B6DE0;  }
		/* 820B6D54h case    6:*/		return 0x820B6D58;
		  /* 820B6D58h */ case    7:  		/* lfd FR0, <#[R1 + 176]> */
		/* 820B6D58h case    7:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 820B6D58h case    7:*/		return 0x820B6D5C;
		  /* 820B6D5Ch */ case    8:  		/* fcmpu CR6, FR0, FR31 */
		/* 820B6D5Ch case    8:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820B6D5Ch case    8:*/		return 0x820B6D60;
		  /* 820B6D60h */ case    9:  		/* bc 12, CR6_GT, 16 */
		/* 820B6D60h case    9:*/		if ( regs.CR[6].gt ) { return 0x820B6D70;  }
		/* 820B6D60h case    9:*/		return 0x820B6D64;
		  /* 820B6D64h */ case   10:  		/* lfd FR0, <#[R1 + 184]> */
		/* 820B6D64h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B6D64h case   10:*/		return 0x820B6D68;
		  /* 820B6D68h */ case   11:  		/* fcmpu CR6, FR0, FR31 */
		/* 820B6D68h case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 820B6D68h case   11:*/		return 0x820B6D6C;
		  /* 820B6D6Ch */ case   12:  		/* bc 4, CR6_LT, 116 */
		/* 820B6D6Ch case   12:*/		if ( !regs.CR[6].lt ) { return 0x820B6DE0;  }
		/* 820B6D6Ch case   12:*/		return 0x820B6D70;
	}
	return 0x820B6D70;
} // Block from 820B6D3Ch-820B6D70h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820B6D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6D70);
		  /* 820B6D70h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820B6D70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B6D70h case    0:*/		return 0x820B6D74;
		  /* 820B6D74h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 820B6D74h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B6D9C;  }
		/* 820B6D74h case    1:*/		return 0x820B6D78;
		  /* 820B6D78h */ case    2:  		/* lwz R11, <#[R1 + 96]> */
		/* 820B6D78h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820B6D78h case    2:*/		return 0x820B6D7C;
		  /* 820B6D7Ch */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 820B6D7Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6D7Ch case    3:*/		return 0x820B6D80;
		  /* 820B6D80h */ case    4:  		/* bc 4, CR6_EQ, 28 */
		/* 820B6D80h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820B6D9C;  }
		/* 820B6D80h case    4:*/		return 0x820B6D84;
		  /* 820B6D84h */ case    5:  		/* li R5, 0 */
		/* 820B6D84h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B6D84h case    5:*/		return 0x820B6D88;
		  /* 820B6D88h */ case    6:  		/* mr R4, R15 */
		/* 820B6D88h case    6:*/		regs.R4 = regs.R15;
		/* 820B6D88h case    6:*/		return 0x820B6D8C;
		  /* 820B6D8Ch */ case    7:  		/* mr R3, R31 */
		/* 820B6D8Ch case    7:*/		regs.R3 = regs.R31;
		/* 820B6D8Ch case    7:*/		return 0x820B6D90;
		  /* 820B6D90h */ case    8:  		/* bl 36112 */
		/* 820B6D90h case    8:*/		regs.LR = 0x820B6D94; return 0x820BFAA0;
		/* 820B6D90h case    8:*/		return 0x820B6D94;
		  /* 820B6D94h */ case    9:  		/* or. R30, R3, R3 */
		/* 820B6D94h case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6D94h case    9:*/		return 0x820B6D98;
		  /* 820B6D98h */ case   10:  		/* bc 12, CR0_LT, 1108 */
		/* 820B6D98h case   10:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6D98h case   10:*/		return 0x820B6D9C;
	}
	return 0x820B6D9C;
} // Block from 820B6D70h-820B6D9Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B6D9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6D9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6D9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6D9C);
		  /* 820B6D9Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 820B6D9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B6D9Ch case    0:*/		return 0x820B6DA0;
		  /* 820B6DA0h */ case    1:  		/* bc 12, CR6_EQ, 576 */
		/* 820B6DA0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B6FE0;  }
		/* 820B6DA0h case    1:*/		return 0x820B6DA4;
		  /* 820B6DA4h */ case    2:  		/* mtspr CTR, R24 */
		/* 820B6DA4h case    2:*/		regs.CTR = regs.R24;
		/* 820B6DA4h case    2:*/		return 0x820B6DA8;
		  /* 820B6DA8h */ case    3:  		/* mr R11, R26 */
		/* 820B6DA8h case    3:*/		regs.R11 = regs.R26;
		/* 820B6DA8h case    3:*/		return 0x820B6DAC;
		  /* 820B6DACh */ case    4:  		/* subf R10, R26, R21 */
		/* 820B6DACh case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R26,regs.R21);
		/* 820B6DACh case    4:*/		return 0x820B6DB0;
		  /* 820B6DB0h */ case    5:  		/* lwzx R9, <#[R10 + R11]> */
		/* 820B6DB0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820B6DB0h case    5:*/		return 0x820B6DB4;
		  /* 820B6DB4h */ case    6:  		/* lwz R8, <#[R31 + 24]> */
		/* 820B6DB4h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6DB4h case    6:*/		return 0x820B6DB8;
		  /* 820B6DB8h */ case    7:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B6DB8h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B6DB8h case    7:*/		return 0x820B6DBC;
		  /* 820B6DBCh */ case    8:  		/* lwzx R9, <#[R9 + R8]> */
		/* 820B6DBCh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820B6DBCh case    8:*/		return 0x820B6DC0;
		  /* 820B6DC0h */ case    9:  		/* cmpwi CR6, R9, -1 */
		/* 820B6DC0h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 820B6DC0h case    9:*/		return 0x820B6DC4;
		  /* 820B6DC4h */ case   10:  		/* stw R9, <#[R11]> */
		/* 820B6DC4h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6DC4h case   10:*/		return 0x820B6DC8;
		  /* 820B6DC8h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 820B6DC8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820B6DD4;  }
		/* 820B6DC8h case   11:*/		return 0x820B6DCC;
		  /* 820B6DCCh */ case   12:  		/* lwz R9, <#[R31 + 36]> */
		/* 820B6DCCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000024) );
		/* 820B6DCCh case   12:*/		return 0x820B6DD0;
		  /* 820B6DD0h */ case   13:  		/* stw R9, <#[R11]> */
		/* 820B6DD0h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6DD0h case   13:*/		return 0x820B6DD4;
	}
	return 0x820B6DD4;
} // Block from 820B6D9Ch-820B6DD4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820B6DD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6DD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6DD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6DD4);
		  /* 820B6DD4h */ case    0:  		/* addi R11, R11, 4 */
		/* 820B6DD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B6DD4h case    0:*/		return 0x820B6DD8;
		  /* 820B6DD8h */ case    1:  		/* bc 16, CR0_LT, -40 */
		/* 820B6DD8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6DB0;  }
		/* 820B6DD8h case    1:*/		return 0x820B6DDC;
		  /* 820B6DDCh */ case    2:  		/* b 516 */
		/* 820B6DDCh case    2:*/		return 0x820B6FE0;
		/* 820B6DDCh case    2:*/		return 0x820B6DE0;
	}
	return 0x820B6DE0;
} // Block from 820B6DD4h-820B6DE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B6DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6DE0);
		  /* 820B6DE0h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 820B6DE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820B6DE0h case    0:*/		return 0x820B6DE4;
		  /* 820B6DE4h */ case    1:  		/* cmplw CR6, R11, R17 */
		/* 820B6DE4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 820B6DE4h case    1:*/		return 0x820B6DE8;
		  /* 820B6DE8h */ case    2:  		/* bc 4, CR6_LT, 20 */
		/* 820B6DE8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820B6DFC;  }
		/* 820B6DE8h case    2:*/		return 0x820B6DEC;
		  /* 820B6DECh */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6DECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6DECh case    3:*/		return 0x820B6DF0;
		  /* 820B6DF0h */ case    4:  		/* lwz R11, <#[R11 + 112]> */
		/* 820B6DF0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 820B6DF0h case    4:*/		return 0x820B6DF4;
		  /* 820B6DF4h */ case    5:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 820B6DF4h case    5:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 820B6DF4h case    5:*/		return 0x820B6DF8;
		  /* 820B6DF8h */ case    6:  		/* bc 12, CR0_EQ, 984 */
		/* 820B6DF8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B71D0;  }
		/* 820B6DF8h case    6:*/		return 0x820B6DFC;
	}
	return 0x820B6DFC;
} // Block from 820B6DE0h-820B6DFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B6DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6DFC);
		  /* 820B6DFCh */ case    0:  		/* stw R19, <#[R1 + 104]> */
		/* 820B6DFCh case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000068) );
		/* 820B6DFCh case    0:*/		return 0x820B6E00;
		  /* 820B6E00h */ case    1:  		/* lis R5, 4416 */
		/* 820B6E00h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x1140);
		/* 820B6E00h case    1:*/		return 0x820B6E04;
		  /* 820B6E04h */ case    2:  		/* li R9, 0 */
		/* 820B6E04h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6E04h case    2:*/		return 0x820B6E08;
		  /* 820B6E08h */ case    3:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6E08h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6E08h case    3:*/		return 0x820B6E0C;
		  /* 820B6E0Ch */ case    4:  		/* li R8, 0 */
		/* 820B6E0Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B6E0Ch case    4:*/		return 0x820B6E10;
		  /* 820B6E10h */ case    5:  		/* addi R7, R1, 80 */
		/* 820B6E10h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820B6E10h case    5:*/		return 0x820B6E14;
		  /* 820B6E14h */ case    6:  		/* addi R6, R1, 104 */
		/* 820B6E14h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x68);
		/* 820B6E14h case    6:*/		return 0x820B6E18;
		  /* 820B6E18h */ case    7:  		/* ori R5, R5, 1 */
		/* 820B6E18h case    7:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B6E18h case    7:*/		return 0x820B6E1C;
		  /* 820B6E1Ch */ case    8:  		/* mr R3, R31 */
		/* 820B6E1Ch case    8:*/		regs.R3 = regs.R31;
		/* 820B6E1Ch case    8:*/		return 0x820B6E20;
		  /* 820B6E20h */ case    9:  		/* bl -25368 */
		/* 820B6E20h case    9:*/		regs.LR = 0x820B6E24; return 0x820B0B08;
		/* 820B6E20h case    9:*/		return 0x820B6E24;
		  /* 820B6E24h */ case   10:  		/* or. R30, R3, R3 */
		/* 820B6E24h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6E24h case   10:*/		return 0x820B6E28;
		  /* 820B6E28h */ case   11:  		/* bc 12, CR0_LT, 964 */
		/* 820B6E28h case   11:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6E28h case   11:*/		return 0x820B6E2C;
		  /* 820B6E2Ch */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B6E2Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6E2Ch case   12:*/		return 0x820B6E30;
		  /* 820B6E30h */ case   13:  		/* cmplwi CR6, R15, 0 */
		/* 820B6E30h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B6E30h case   13:*/		return 0x820B6E34;
		  /* 820B6E34h */ case   14:  		/* lwz R10, <#[R1 + 104]> */
		/* 820B6E34h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 820B6E34h case   14:*/		return 0x820B6E38;
		  /* 820B6E38h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B6E38h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B6E38h case   15:*/		return 0x820B6E3C;
		  /* 820B6E3Ch */ case   16:  		/* lwz R9, <#[R11 + 20]> */
		/* 820B6E3Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 820B6E3Ch case   16:*/		return 0x820B6E40;
		  /* 820B6E40h */ case   17:  		/* lwz R11, <#[R11 + 160]> */
		/* 820B6E40h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000A0) );
		/* 820B6E40h case   17:*/		return 0x820B6E44;
		  /* 820B6E44h */ case   18:  		/* lwzx R10, <#[R9 + R10]> */
		/* 820B6E44h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820B6E44h case   18:*/		return 0x820B6E48;
		  /* 820B6E48h */ case   19:  		/* stw R11, <#[R10 + 4]> */
		/* 820B6E48h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820B6E48h case   19:*/		return 0x820B6E4C;
		  /* 820B6E4Ch */ case   20:  		/* lwz R11, <#[R1 + 104]> */
		/* 820B6E4Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 820B6E4Ch case   20:*/		return 0x820B6E50;
		  /* 820B6E50h */ case   21:  		/* stw R14, <#[R31 + 52]> */
		/* 820B6E50h case   21:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R31 + 0x00000034) );
		/* 820B6E50h case   21:*/		return 0x820B6E54;
		  /* 820B6E54h */ case   22:  		/* stw R11, <#[R31 + 48]> */
		/* 820B6E54h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B6E54h case   22:*/		return 0x820B6E58;
		  /* 820B6E58h */ case   23:  		/* bc 12, CR6_EQ, 40 */
		/* 820B6E58h case   23:*/		if ( regs.CR[6].eq ) { return 0x820B6E80;  }
		/* 820B6E58h case   23:*/		return 0x820B6E5C;
		  /* 820B6E5Ch */ case   24:  		/* lwz R11, <#[R1 + 96]> */
		/* 820B6E5Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 820B6E5Ch case   24:*/		return 0x820B6E60;
		  /* 820B6E60h */ case   25:  		/* cmpwi CR6, R11, 0 */
		/* 820B6E60h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B6E60h case   25:*/		return 0x820B6E64;
		  /* 820B6E64h */ case   26:  		/* bc 4, CR6_EQ, 28 */
		/* 820B6E64h case   26:*/		if ( !regs.CR[6].eq ) { return 0x820B6E80;  }
		/* 820B6E64h case   26:*/		return 0x820B6E68;
		  /* 820B6E68h */ case   27:  		/* li R5, 0 */
		/* 820B6E68h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B6E68h case   27:*/		return 0x820B6E6C;
		  /* 820B6E6Ch */ case   28:  		/* mr R4, R15 */
		/* 820B6E6Ch case   28:*/		regs.R4 = regs.R15;
		/* 820B6E6Ch case   28:*/		return 0x820B6E70;
		  /* 820B6E70h */ case   29:  		/* mr R3, R31 */
		/* 820B6E70h case   29:*/		regs.R3 = regs.R31;
		/* 820B6E70h case   29:*/		return 0x820B6E74;
		  /* 820B6E74h */ case   30:  		/* bl 35884 */
		/* 820B6E74h case   30:*/		regs.LR = 0x820B6E78; return 0x820BFAA0;
		/* 820B6E74h case   30:*/		return 0x820B6E78;
		  /* 820B6E78h */ case   31:  		/* or. R30, R3, R3 */
		/* 820B6E78h case   31:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6E78h case   31:*/		return 0x820B6E7C;
		  /* 820B6E7Ch */ case   32:  		/* bc 12, CR0_LT, 880 */
		/* 820B6E7Ch case   32:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6E7Ch case   32:*/		return 0x820B6E80;
	}
	return 0x820B6E80;
} // Block from 820B6DFCh-820B6E80h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820B6E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6E80);
		  /* 820B6E80h */ case    0:  		/* lwz R7, <#[R1 + 204]> */
		/* 820B6E80h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000CC) );
		/* 820B6E80h case    0:*/		return 0x820B6E84;
		  /* 820B6E84h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 820B6E84h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B6E84h case    1:*/		return 0x820B6E88;
		  /* 820B6E88h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 820B6E88h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B6EB4;  }
		/* 820B6E88h case    2:*/		return 0x820B6E8C;
		  /* 820B6E8Ch */ case    3:  		/* mtspr CTR, R24 */
		/* 820B6E8Ch case    3:*/		regs.CTR = regs.R24;
		/* 820B6E8Ch case    3:*/		return 0x820B6E90;
		  /* 820B6E90h */ case    4:  		/* mr R11, R7 */
		/* 820B6E90h case    4:*/		regs.R11 = regs.R7;
		/* 820B6E90h case    4:*/		return 0x820B6E94;
		  /* 820B6E94h */ case    5:  		/* subf R10, R7, R21 */
		/* 820B6E94h case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R7,regs.R21);
		/* 820B6E94h case    5:*/		return 0x820B6E98;
		  /* 820B6E98h */ case    6:  		/* lwzx R9, <#[R10 + R11]> */
		/* 820B6E98h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820B6E98h case    6:*/		return 0x820B6E9C;
		  /* 820B6E9Ch */ case    7:  		/* lwz R8, <#[R31 + 24]> */
		/* 820B6E9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 820B6E9Ch case    7:*/		return 0x820B6EA0;
		  /* 820B6EA0h */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B6EA0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B6EA0h case    8:*/		return 0x820B6EA4;
		  /* 820B6EA4h */ case    9:  		/* lwzx R9, <#[R9 + R8]> */
		/* 820B6EA4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820B6EA4h case    9:*/		return 0x820B6EA8;
		  /* 820B6EA8h */ case   10:  		/* stw R9, <#[R11]> */
		/* 820B6EA8h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B6EA8h case   10:*/		return 0x820B6EAC;
		  /* 820B6EACh */ case   11:  		/* addi R11, R11, 4 */
		/* 820B6EACh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B6EACh case   11:*/		return 0x820B6EB0;
		  /* 820B6EB0h */ case   12:  		/* bc 16, CR0_LT, -24 */
		/* 820B6EB0h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6E98;  }
		/* 820B6EB0h case   12:*/		return 0x820B6EB4;
	}
	return 0x820B6EB4;
} // Block from 820B6E80h-820B6EB4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820B6EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6EB4);
		  /* 820B6EB4h */ case    0:  		/* lwz R27, <#[R1 + 208]> */
		/* 820B6EB4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000D0) );
		/* 820B6EB4h case    0:*/		return 0x820B6EB8;
		  /* 820B6EB8h */ case    1:  		/* oris R28, R25, 4096 */
		/* 820B6EB8h case    1:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R25,0x1000);
		/* 820B6EB8h case    1:*/		return 0x820B6EBC;
		  /* 820B6EBCh */ case    2:  		/* li R9, 0 */
		/* 820B6EBCh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6EBCh case    2:*/		return 0x820B6EC0;
		  /* 820B6EC0h */ case    3:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6EC0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6EC0h case    3:*/		return 0x820B6EC4;
		  /* 820B6EC4h */ case    4:  		/* li R8, 0 */
		/* 820B6EC4h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B6EC4h case    4:*/		return 0x820B6EC8;
		  /* 820B6EC8h */ case    5:  		/* mr R6, R27 */
		/* 820B6EC8h case    5:*/		regs.R6 = regs.R27;
		/* 820B6EC8h case    5:*/		return 0x820B6ECC;
		  /* 820B6ECCh */ case    6:  		/* mr R5, R28 */
		/* 820B6ECCh case    6:*/		regs.R5 = regs.R28;
		/* 820B6ECCh case    6:*/		return 0x820B6ED0;
		  /* 820B6ED0h */ case    7:  		/* mr R3, R31 */
		/* 820B6ED0h case    7:*/		regs.R3 = regs.R31;
		/* 820B6ED0h case    7:*/		return 0x820B6ED4;
		  /* 820B6ED4h */ case    8:  		/* bl -25548 */
		/* 820B6ED4h case    8:*/		regs.LR = 0x820B6ED8; return 0x820B0B08;
		/* 820B6ED4h case    8:*/		return 0x820B6ED8;
		  /* 820B6ED8h */ case    9:  		/* or. R30, R3, R3 */
		/* 820B6ED8h case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6ED8h case    9:*/		return 0x820B6EDC;
		  /* 820B6EDCh */ case   10:  		/* bc 12, CR0_LT, 784 */
		/* 820B6EDCh case   10:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6EDCh case   10:*/		return 0x820B6EE0;
		  /* 820B6EE0h */ case   11:  		/* cmplwi CR6, R24, 0 */
		/* 820B6EE0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B6EE0h case   11:*/		return 0x820B6EE4;
		  /* 820B6EE4h */ case   12:  		/* bc 12, CR6_EQ, 44 */
		/* 820B6EE4h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B6F10;  }
		/* 820B6EE4h case   12:*/		return 0x820B6EE8;
		  /* 820B6EE8h */ case   13:  		/* addi R11, R27, -4 */
		/* 820B6EE8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B6EE8h case   13:*/		return 0x820B6EEC;
		  /* 820B6EECh */ case   14:  		/* mtspr CTR, R24 */
		/* 820B6EECh case   14:*/		regs.CTR = regs.R24;
		/* 820B6EECh case   14:*/		return 0x820B6EF0;
		  /* 820B6EF0h */ case   15:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B6EF0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6EF0h case   15:*/		return 0x820B6EF4;
		  /* 820B6EF4h */ case   16:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820B6EF4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B6EF4h case   16:*/		return 0x820B6EF8;
		  /* 820B6EF8h */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B6EF8h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B6EF8h case   17:*/		return 0x820B6EFC;
		  /* 820B6EFCh */ case   18:  		/* lwz R8, <#[R9 + 20]> */
		/* 820B6EFCh case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820B6EFCh case   18:*/		return 0x820B6F00;
		  /* 820B6F00h */ case   19:  		/* lwz R9, <#[R9 + 152]> */
		/* 820B6F00h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000098) );
		/* 820B6F00h case   19:*/		return 0x820B6F04;
		  /* 820B6F04h */ case   20:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B6F04h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B6F04h case   20:*/		return 0x820B6F08;
		  /* 820B6F08h */ case   21:  		/* stw R9, <#[R10 + 4]> */
		/* 820B6F08h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820B6F08h case   21:*/		return 0x820B6F0C;
		  /* 820B6F0Ch */ case   22:  		/* bc 16, CR0_LT, -28 */
		/* 820B6F0Ch case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6EF0;  }
		/* 820B6F0Ch case   22:*/		return 0x820B6F10;
	}
	return 0x820B6F10;
} // Block from 820B6EB4h-820B6F10h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820B6F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6F10);
		  /* 820B6F10h */ case    0:  		/* lwz R11, <#[R1 + 104]> */
		/* 820B6F10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 820B6F10h case    0:*/		return 0x820B6F14;
		  /* 820B6F14h */ case    1:  		/* li R10, 0 */
		/* 820B6F14h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820B6F14h case    1:*/		return 0x820B6F18;
		  /* 820B6F18h */ case    2:  		/* lwz R29, <#[R1 + 212]> */
		/* 820B6F18h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000D4) );
		/* 820B6F18h case    2:*/		return 0x820B6F1C;
		  /* 820B6F1Ch */ case    3:  		/* li R9, 0 */
		/* 820B6F1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6F1Ch case    3:*/		return 0x820B6F20;
		  /* 820B6F20h */ case    4:  		/* stw R10, <#[R31 + 52]> */
		/* 820B6F20h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B6F20h case    4:*/		return 0x820B6F24;
		  /* 820B6F24h */ case    5:  		/* li R8, 0 */
		/* 820B6F24h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B6F24h case    5:*/		return 0x820B6F28;
		  /* 820B6F28h */ case    6:  		/* mr R7, R23 */
		/* 820B6F28h case    6:*/		regs.R7 = regs.R23;
		/* 820B6F28h case    6:*/		return 0x820B6F2C;
		  /* 820B6F2Ch */ case    7:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6F2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6F2Ch case    7:*/		return 0x820B6F30;
		  /* 820B6F30h */ case    8:  		/* mr R6, R29 */
		/* 820B6F30h case    8:*/		regs.R6 = regs.R29;
		/* 820B6F30h case    8:*/		return 0x820B6F34;
		  /* 820B6F34h */ case    9:  		/* stw R11, <#[R31 + 48]> */
		/* 820B6F34h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B6F34h case    9:*/		return 0x820B6F38;
		  /* 820B6F38h */ case   10:  		/* mr R5, R28 */
		/* 820B6F38h case   10:*/		regs.R5 = regs.R28;
		/* 820B6F38h case   10:*/		return 0x820B6F3C;
		  /* 820B6F3Ch */ case   11:  		/* mr R3, R31 */
		/* 820B6F3Ch case   11:*/		regs.R3 = regs.R31;
		/* 820B6F3Ch case   11:*/		return 0x820B6F40;
		  /* 820B6F40h */ case   12:  		/* bl -25656 */
		/* 820B6F40h case   12:*/		regs.LR = 0x820B6F44; return 0x820B0B08;
		/* 820B6F40h case   12:*/		return 0x820B6F44;
		  /* 820B6F44h */ case   13:  		/* or. R30, R3, R3 */
		/* 820B6F44h case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6F44h case   13:*/		return 0x820B6F48;
		  /* 820B6F48h */ case   14:  		/* bc 12, CR0_LT, 676 */
		/* 820B6F48h case   14:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6F48h case   14:*/		return 0x820B6F4C;
		  /* 820B6F4Ch */ case   15:  		/* cmplwi CR6, R24, 0 */
		/* 820B6F4Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B6F4Ch case   15:*/		return 0x820B6F50;
		  /* 820B6F50h */ case   16:  		/* bc 12, CR6_EQ, 44 */
		/* 820B6F50h case   16:*/		if ( regs.CR[6].eq ) { return 0x820B6F7C;  }
		/* 820B6F50h case   16:*/		return 0x820B6F54;
		  /* 820B6F54h */ case   17:  		/* addi R11, R29, -4 */
		/* 820B6F54h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFC);
		/* 820B6F54h case   17:*/		return 0x820B6F58;
		  /* 820B6F58h */ case   18:  		/* mtspr CTR, R24 */
		/* 820B6F58h case   18:*/		regs.CTR = regs.R24;
		/* 820B6F58h case   18:*/		return 0x820B6F5C;
		  /* 820B6F5Ch */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B6F5Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6F5Ch case   19:*/		return 0x820B6F60;
		  /* 820B6F60h */ case   20:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820B6F60h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B6F60h case   20:*/		return 0x820B6F64;
		  /* 820B6F64h */ case   21:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B6F64h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B6F64h case   21:*/		return 0x820B6F68;
		  /* 820B6F68h */ case   22:  		/* lwz R8, <#[R9 + 20]> */
		/* 820B6F68h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820B6F68h case   22:*/		return 0x820B6F6C;
		  /* 820B6F6Ch */ case   23:  		/* lwz R9, <#[R9 + 152]> */
		/* 820B6F6Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000098) );
		/* 820B6F6Ch case   23:*/		return 0x820B6F70;
		  /* 820B6F70h */ case   24:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B6F70h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B6F70h case   24:*/		return 0x820B6F74;
		  /* 820B6F74h */ case   25:  		/* stw R9, <#[R10 + 4]> */
		/* 820B6F74h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820B6F74h case   25:*/		return 0x820B6F78;
		  /* 820B6F78h */ case   26:  		/* bc 16, CR0_LT, -28 */
		/* 820B6F78h case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6F5C;  }
		/* 820B6F78h case   26:*/		return 0x820B6F7C;
	}
	return 0x820B6F7C;
} // Block from 820B6F10h-820B6F7Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 820B6F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6F7C);
		  /* 820B6F7Ch */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 820B6F7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820B6F7Ch case    0:*/		return 0x820B6F80;
		  /* 820B6F80h */ case    1:  		/* li R9, 0 */
		/* 820B6F80h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6F80h case    1:*/		return 0x820B6F84;
		  /* 820B6F84h */ case    2:  		/* stw R14, <#[R31 + 52]> */
		/* 820B6F84h case    2:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R31 + 0x00000034) );
		/* 820B6F84h case    2:*/		return 0x820B6F88;
		  /* 820B6F88h */ case    3:  		/* mr R8, R29 */
		/* 820B6F88h case    3:*/		regs.R8 = regs.R29;
		/* 820B6F88h case    3:*/		return 0x820B6F8C;
		  /* 820B6F8Ch */ case    4:  		/* mr R7, R27 */
		/* 820B6F8Ch case    4:*/		regs.R7 = regs.R27;
		/* 820B6F8Ch case    4:*/		return 0x820B6F90;
		  /* 820B6F90h */ case    5:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6F90h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6F90h case    5:*/		return 0x820B6F94;
		  /* 820B6F94h */ case    6:  		/* mr R6, R26 */
		/* 820B6F94h case    6:*/		regs.R6 = regs.R26;
		/* 820B6F94h case    6:*/		return 0x820B6F98;
		  /* 820B6F98h */ case    7:  		/* oris R5, R25, 8320 */
		/* 820B6F98h case    7:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x2080);
		/* 820B6F98h case    7:*/		return 0x820B6F9C;
		  /* 820B6F9Ch */ case    8:  		/* stw R11, <#[R31 + 48]> */
		/* 820B6F9Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B6F9Ch case    8:*/		return 0x820B6FA0;
		  /* 820B6FA0h */ case    9:  		/* mr R3, R31 */
		/* 820B6FA0h case    9:*/		regs.R3 = regs.R31;
		/* 820B6FA0h case    9:*/		return 0x820B6FA4;
		  /* 820B6FA4h */ case   10:  		/* bl -25756 */
		/* 820B6FA4h case   10:*/		regs.LR = 0x820B6FA8; return 0x820B0B08;
		/* 820B6FA4h case   10:*/		return 0x820B6FA8;
		  /* 820B6FA8h */ case   11:  		/* or. R30, R3, R3 */
		/* 820B6FA8h case   11:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B6FA8h case   11:*/		return 0x820B6FAC;
		  /* 820B6FACh */ case   12:  		/* bc 12, CR0_LT, 576 */
		/* 820B6FACh case   12:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B6FACh case   12:*/		return 0x820B6FB0;
		  /* 820B6FB0h */ case   13:  		/* cmplwi CR6, R24, 0 */
		/* 820B6FB0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B6FB0h case   13:*/		return 0x820B6FB4;
		  /* 820B6FB4h */ case   14:  		/* bc 12, CR6_EQ, 44 */
		/* 820B6FB4h case   14:*/		if ( regs.CR[6].eq ) { return 0x820B6FE0;  }
		/* 820B6FB4h case   14:*/		return 0x820B6FB8;
		  /* 820B6FB8h */ case   15:  		/* addi R11, R26, -4 */
		/* 820B6FB8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820B6FB8h case   15:*/		return 0x820B6FBC;
		  /* 820B6FBCh */ case   16:  		/* mtspr CTR, R24 */
		/* 820B6FBCh case   16:*/		regs.CTR = regs.R24;
		/* 820B6FBCh case   16:*/		return 0x820B6FC0;
		  /* 820B6FC0h */ case   17:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B6FC0h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B6FC0h case   17:*/		return 0x820B6FC4;
		  /* 820B6FC4h */ case   18:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820B6FC4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B6FC4h case   18:*/		return 0x820B6FC8;
		  /* 820B6FC8h */ case   19:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B6FC8h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B6FC8h case   19:*/		return 0x820B6FCC;
		  /* 820B6FCCh */ case   20:  		/* lwz R8, <#[R9 + 20]> */
		/* 820B6FCCh case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820B6FCCh case   20:*/		return 0x820B6FD0;
		  /* 820B6FD0h */ case   21:  		/* lwz R9, <#[R9 + 152]> */
		/* 820B6FD0h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000098) );
		/* 820B6FD0h case   21:*/		return 0x820B6FD4;
		  /* 820B6FD4h */ case   22:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B6FD4h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B6FD4h case   22:*/		return 0x820B6FD8;
		  /* 820B6FD8h */ case   23:  		/* stw R9, <#[R10 + 4]> */
		/* 820B6FD8h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820B6FD8h case   23:*/		return 0x820B6FDC;
		  /* 820B6FDCh */ case   24:  		/* bc 16, CR0_LT, -28 */
		/* 820B6FDCh case   24:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B6FC0;  }
		/* 820B6FDCh case   24:*/		return 0x820B6FE0;
	}
	return 0x820B6FE0;
} // Block from 820B6F7Ch-820B6FE0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820B6FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B6FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B6FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B6FE0);
		  /* 820B6FE0h */ case    0:  		/* li R9, 0 */
		/* 820B6FE0h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B6FE0h case    0:*/		return 0x820B6FE4;
		  /* 820B6FE4h */ case    1:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B6FE4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B6FE4h case    1:*/		return 0x820B6FE8;
		  /* 820B6FE8h */ case    2:  		/* li R8, 0 */
		/* 820B6FE8h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B6FE8h case    2:*/		return 0x820B6FEC;
		  /* 820B6FECh */ case    3:  		/* mr R7, R26 */
		/* 820B6FECh case    3:*/		regs.R7 = regs.R26;
		/* 820B6FECh case    3:*/		return 0x820B6FF0;
		  /* 820B6FF0h */ case    4:  		/* mr R6, R26 */
		/* 820B6FF0h case    4:*/		regs.R6 = regs.R26;
		/* 820B6FF0h case    4:*/		return 0x820B6FF4;
		  /* 820B6FF4h */ case    5:  		/* oris R5, R25, 4096 */
		/* 820B6FF4h case    5:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x1000);
		/* 820B6FF4h case    5:*/		return 0x820B6FF8;
		  /* 820B6FF8h */ case    6:  		/* mr R3, R31 */
		/* 820B6FF8h case    6:*/		regs.R3 = regs.R31;
		/* 820B6FF8h case    6:*/		return 0x820B6FFC;
		  /* 820B6FFCh */ case    7:  		/* bl -25844 */
		/* 820B6FFCh case    7:*/		regs.LR = 0x820B7000; return 0x820B0B08;
		/* 820B6FFCh case    7:*/		return 0x820B7000;
		  /* 820B7000h */ case    8:  		/* or. R30, R3, R3 */
		/* 820B7000h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B7000h case    8:*/		return 0x820B7004;
		  /* 820B7004h */ case    9:  		/* bc 12, CR0_LT, 488 */
		/* 820B7004h case    9:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B7004h case    9:*/		return 0x820B7008;
		  /* 820B7008h */ case   10:  		/* cmplwi CR6, R24, 0 */
		/* 820B7008h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B7008h case   10:*/		return 0x820B700C;
		  /* 820B700Ch */ case   11:  		/* bc 12, CR6_EQ, 44 */
		/* 820B700Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820B7038;  }
		/* 820B700Ch case   11:*/		return 0x820B7010;
		  /* 820B7010h */ case   12:  		/* addi R11, R26, -4 */
		/* 820B7010h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820B7010h case   12:*/		return 0x820B7014;
		  /* 820B7014h */ case   13:  		/* mtspr CTR, R24 */
		/* 820B7014h case   13:*/		regs.CTR = regs.R24;
		/* 820B7014h case   13:*/		return 0x820B7018;
		  /* 820B7018h */ case   14:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B7018h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B7018h case   14:*/		return 0x820B701C;
		  /* 820B701Ch */ case   15:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820B701Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B701Ch case   15:*/		return 0x820B7020;
		  /* 820B7020h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B7020h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B7020h case   16:*/		return 0x820B7024;
		  /* 820B7024h */ case   17:  		/* lwz R8, <#[R9 + 20]> */
		/* 820B7024h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820B7024h case   17:*/		return 0x820B7028;
		  /* 820B7028h */ case   18:  		/* lwz R9, <#[R9 + 152]> */
		/* 820B7028h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000098) );
		/* 820B7028h case   18:*/		return 0x820B702C;
		  /* 820B702Ch */ case   19:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B702Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B702Ch case   19:*/		return 0x820B7030;
		  /* 820B7030h */ case   20:  		/* stw R9, <#[R10 + 4]> */
		/* 820B7030h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820B7030h case   20:*/		return 0x820B7034;
		  /* 820B7034h */ case   21:  		/* bc 16, CR0_LT, -28 */
		/* 820B7034h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7018;  }
		/* 820B7034h case   21:*/		return 0x820B7038;
	}
	return 0x820B7038;
} // Block from 820B6FE0h-820B7038h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820B7038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7038);
		  /* 820B7038h */ case    0:  		/* lwz R29, <#[R1 + 220]> */
		/* 820B7038h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000DC) );
		/* 820B7038h case    0:*/		return 0x820B703C;
		  /* 820B703Ch */ case    1:  		/* li R9, 0 */
		/* 820B703Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B703Ch case    1:*/		return 0x820B7040;
		  /* 820B7040h */ case    2:  		/* mr R8, R22 */
		/* 820B7040h case    2:*/		regs.R8 = regs.R22;
		/* 820B7040h case    2:*/		return 0x820B7044;
		  /* 820B7044h */ case    3:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B7044h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B7044h case    3:*/		return 0x820B7048;
		  /* 820B7048h */ case    4:  		/* mr R7, R26 */
		/* 820B7048h case    4:*/		regs.R7 = regs.R26;
		/* 820B7048h case    4:*/		return 0x820B704C;
		  /* 820B704Ch */ case    5:  		/* mr R6, R29 */
		/* 820B704Ch case    5:*/		regs.R6 = regs.R29;
		/* 820B704Ch case    5:*/		return 0x820B7050;
		  /* 820B7050h */ case    6:  		/* oris R5, R25, 8336 */
		/* 820B7050h case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x2090);
		/* 820B7050h case    6:*/		return 0x820B7054;
		  /* 820B7054h */ case    7:  		/* mr R3, R31 */
		/* 820B7054h case    7:*/		regs.R3 = regs.R31;
		/* 820B7054h case    7:*/		return 0x820B7058;
		  /* 820B7058h */ case    8:  		/* bl -25936 */
		/* 820B7058h case    8:*/		regs.LR = 0x820B705C; return 0x820B0B08;
		/* 820B7058h case    8:*/		return 0x820B705C;
		  /* 820B705Ch */ case    9:  		/* or. R30, R3, R3 */
		/* 820B705Ch case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B705Ch case    9:*/		return 0x820B7060;
		  /* 820B7060h */ case   10:  		/* bc 12, CR0_LT, 396 */
		/* 820B7060h case   10:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B7060h case   10:*/		return 0x820B7064;
		  /* 820B7064h */ case   11:  		/* cmplwi CR6, R24, 0 */
		/* 820B7064h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B7064h case   11:*/		return 0x820B7068;
		  /* 820B7068h */ case   12:  		/* bc 12, CR6_EQ, 44 */
		/* 820B7068h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B7094;  }
		/* 820B7068h case   12:*/		return 0x820B706C;
		  /* 820B706Ch */ case   13:  		/* addi R11, R29, -4 */
		/* 820B706Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFC);
		/* 820B706Ch case   13:*/		return 0x820B7070;
		  /* 820B7070h */ case   14:  		/* mtspr CTR, R24 */
		/* 820B7070h case   14:*/		regs.CTR = regs.R24;
		/* 820B7070h case   14:*/		return 0x820B7074;
		  /* 820B7074h */ case   15:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B7074h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B7074h case   15:*/		return 0x820B7078;
		  /* 820B7078h */ case   16:  		/* lwzu R10, <#[R11 + 4]> */
		/* 820B7078h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B7078h case   16:*/		return 0x820B707C;
		  /* 820B707Ch */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B707Ch case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B707Ch case   17:*/		return 0x820B7080;
		  /* 820B7080h */ case   18:  		/* lwz R8, <#[R9 + 20]> */
		/* 820B7080h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820B7080h case   18:*/		return 0x820B7084;
		  /* 820B7084h */ case   19:  		/* lwz R9, <#[R9 + 152]> */
		/* 820B7084h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000098) );
		/* 820B7084h case   19:*/		return 0x820B7088;
		  /* 820B7088h */ case   20:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B7088h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B7088h case   20:*/		return 0x820B708C;
		  /* 820B708Ch */ case   21:  		/* stw R9, <#[R10 + 4]> */
		/* 820B708Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820B708Ch case   21:*/		return 0x820B7090;
		  /* 820B7090h */ case   22:  		/* bc 16, CR0_LT, -28 */
		/* 820B7090h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7074;  }
		/* 820B7090h case   22:*/		return 0x820B7094;
	}
	return 0x820B7094;
} // Block from 820B7038h-820B7094h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820B7094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7094);
		  /* 820B7094h */ case    0:  		/* lwz R11, <#[R1 + 140]> */
		/* 820B7094h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B7094h case    0:*/		return 0x820B7098;
		  /* 820B7098h */ case    1:  		/* li R9, 0 */
		/* 820B7098h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B7098h case    1:*/		return 0x820B709C;
		  /* 820B709Ch */ case    2:  		/* lwz R10, <#[R1 + 144]> */
		/* 820B709Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820B709Ch case    2:*/		return 0x820B70A0;
		  /* 820B70A0h */ case    3:  		/* li R8, 0 */
		/* 820B70A0h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B70A0h case    3:*/		return 0x820B70A4;
		  /* 820B70A4h */ case    4:  		/* mr R7, R29 */
		/* 820B70A4h case    4:*/		regs.R7 = regs.R29;
		/* 820B70A4h case    4:*/		return 0x820B70A8;
		  /* 820B70A8h */ case    5:  		/* lwz R4, <#[R1 + 476]> */
		/* 820B70A8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B70A8h case    5:*/		return 0x820B70AC;
		  /* 820B70ACh */ case    6:  		/* mr R6, R23 */
		/* 820B70ACh case    6:*/		regs.R6 = regs.R23;
		/* 820B70ACh case    6:*/		return 0x820B70B0;
		  /* 820B70B0h */ case    7:  		/* oris R5, R25, 4432 */
		/* 820B70B0h case    7:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x1150);
		/* 820B70B0h case    7:*/		return 0x820B70B4;
		  /* 820B70B4h */ case    8:  		/* stw R11, <#[R31 + 48]> */
		/* 820B70B4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820B70B4h case    8:*/		return 0x820B70B8;
		  /* 820B70B8h */ case    9:  		/* mr R3, R31 */
		/* 820B70B8h case    9:*/		regs.R3 = regs.R31;
		/* 820B70B8h case    9:*/		return 0x820B70BC;
		  /* 820B70BCh */ case   10:  		/* stw R10, <#[R31 + 52]> */
		/* 820B70BCh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000034) );
		/* 820B70BCh case   10:*/		return 0x820B70C0;
		  /* 820B70C0h */ case   11:  		/* bl -26040 */
		/* 820B70C0h case   11:*/		regs.LR = 0x820B70C4; return 0x820B0B08;
		/* 820B70C0h case   11:*/		return 0x820B70C4;
		  /* 820B70C4h */ case   12:  		/* or. R30, R3, R3 */
		/* 820B70C4h case   12:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B70C4h case   12:*/		return 0x820B70C8;
		  /* 820B70C8h */ case   13:  		/* bc 12, CR0_LT, 292 */
		/* 820B70C8h case   13:*/		if ( regs.CR[0].lt ) { return 0x820B71EC;  }
		/* 820B70C8h case   13:*/		return 0x820B70CC;
		  /* 820B70CCh */ case   14:  		/* cmplwi CR6, R24, 0 */
		/* 820B70CCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 820B70CCh case   14:*/		return 0x820B70D0;
		  /* 820B70D0h */ case   15:  		/* bc 12, CR6_EQ, 152 */
		/* 820B70D0h case   15:*/		if ( regs.CR[6].eq ) { return 0x820B7168;  }
		/* 820B70D0h case   15:*/		return 0x820B70D4;
		  /* 820B70D4h */ case   16:  		/* lwz R6, <#[R1 + 124]> */
		/* 820B70D4h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000007C) );
		/* 820B70D4h case   16:*/		return 0x820B70D8;
		  /* 820B70D8h */ case   17:  		/* mr R9, R21 */
		/* 820B70D8h case   17:*/		regs.R9 = regs.R21;
		/* 820B70D8h case   17:*/		return 0x820B70DC;
		  /* 820B70DCh */ case   18:  		/* mtspr CTR, R24 */
		/* 820B70DCh case   18:*/		regs.CTR = regs.R24;
		/* 820B70DCh case   18:*/		return 0x820B70E0;
		  /* 820B70E0h */ case   19:  		/* subf R7, R21, R23 */
		/* 820B70E0h case   19:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R21,regs.R23);
		/* 820B70E0h case   19:*/		return 0x820B70E4;
		  /* 820B70E4h */ case   20:  		/* lwz R11, <#[R9]> */
		/* 820B70E4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820B70E4h case   20:*/		return 0x820B70E8;
		  /* 820B70E8h */ case   21:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B70E8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B70E8h case   21:*/		return 0x820B70EC;
		  /* 820B70ECh */ case   22:  		/* lwz R8, <#[R1 + 100]> */
		/* 820B70ECh case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000064) );
		/* 820B70ECh case   22:*/		return 0x820B70F0;
		  /* 820B70F0h */ case   23:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 820B70F0h case   23:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 820B70F0h case   23:*/		return 0x820B70F4;
		  /* 820B70F4h */ case   24:  		/* lwzx R5, <#[R7 + R9]> */
		/* 820B70F4h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 820B70F4h case   24:*/		return 0x820B70F8;
		  /* 820B70F8h */ case   25:  		/* add R11, R11, R8 */
		/* 820B70F8h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820B70F8h case   25:*/		return 0x820B70FC;
		  /* 820B70FCh */ case   26:  		/* rlwinm R8, R5, 2, 0, 29 */
		/* 820B70FCh case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R5);
		/* 820B70FCh case   26:*/		return 0x820B7100;
		  /* 820B7100h */ case   27:  		/* lwz R10, <#[R10 + 20]> */
		/* 820B7100h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820B7100h case   27:*/		return 0x820B7104;
		  /* 820B7104h */ case   28:  		/* lfd FR0, <#[R11]> */
		/* 820B7104h case   28:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 820B7104h case   28:*/		return 0x820B7108;
		  /* 820B7108h */ case   29:  		/* lfd FR13, <#[R11 + 8]> */
		/* 820B7108h case   29:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000008) );
		/* 820B7108h case   29:*/		return 0x820B710C;
		  /* 820B710Ch */ case   30:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820B710Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B710Ch case   30:*/		return 0x820B7110;
		  /* 820B7110h */ case   31:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B7110h case   31:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B7110h case   31:*/		return 0x820B7114;
		  /* 820B7114h */ case   32:  		/* bc 12, CR6_GT, 52 */
		/* 820B7114h case   32:*/		if ( regs.CR[6].gt ) { return 0x820B7148;  }
		/* 820B7114h case   32:*/		return 0x820B7118;
		  /* 820B7118h */ case   33:  		/* lwz R8, <#[R10]> */
		/* 820B7118h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820B7118h case   33:*/		return 0x820B711C;
		  /* 820B711Ch */ case   34:  		/* stfd FR0, <#[R10 + 32]> */
		/* 820B711Ch case   34:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + 0x00000020) );
		/* 820B711Ch case   34:*/		return 0x820B7120;
		  /* 820B7120h */ case   35:  		/* lfd FR0, <#[R11 + 8]> */
		/* 820B7120h case   35:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000008) );
		/* 820B7120h case   35:*/		return 0x820B7124;
		  /* 820B7124h */ case   36:  		/* ori R8, R8, 256 */
		/* 820B7124h case   36:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x100);
		/* 820B7124h case   36:*/		return 0x820B7128;
		  /* 820B7128h */ case   37:  		/* stfd FR0, <#[R10 + 40]> */
		/* 820B7128h case   37:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R10 + 0x00000028) );
		/* 820B7128h case   37:*/		return 0x820B712C;
		  /* 820B712Ch */ case   38:  		/* stw R8, <#[R10]> */
		/* 820B712Ch case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820B712Ch case   38:*/		return 0x820B7130;
		  /* 820B7130h */ case   39:  		/* lfd FR13, <#[R11]> */
		/* 820B7130h case   39:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000000) );
		/* 820B7130h case   39:*/		return 0x820B7134;
		  /* 820B7134h */ case   40:  		/* lfd FR0, <#[R11 + 8]> */
		/* 820B7134h case   40:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000008) );
		/* 820B7134h case   40:*/		return 0x820B7138;
		  /* 820B7138h */ case   41:  		/* fcmpu CR6, FR13, FR0 */
		/* 820B7138h case   41:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820B7138h case   41:*/		return 0x820B713C;
		  /* 820B713Ch */ case   42:  		/* bc 4, CR6_EQ, 12 */
		/* 820B713Ch case   42:*/		if ( !regs.CR[6].eq ) { return 0x820B7148;  }
		/* 820B713Ch case   42:*/		return 0x820B7140;
		  /* 820B7140h */ case   43:  		/* ori R11, R8, 128 */
		/* 820B7140h case   43:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R8,0x80);
		/* 820B7140h case   43:*/		return 0x820B7144;
		  /* 820B7144h */ case   44:  		/* stw R11, <#[R10]> */
		/* 820B7144h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820B7144h case   44:*/		return 0x820B7148;
	}
	return 0x820B7148;
} // Block from 820B7094h-820B7148h (45 instructions)

//////////////////////////////////////////////////////
// Block at 820B7148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7148);
		  /* 820B7148h */ case    0:  		/* lwz R11, <#[R9]> */
		/* 820B7148h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820B7148h case    0:*/		return 0x820B714C;
		  /* 820B714Ch */ case    1:  		/* addi R9, R9, 4 */
		/* 820B714Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820B714Ch case    1:*/		return 0x820B7150;
		  /* 820B7150h */ case    2:  		/* lwz R8, <#[R10]> */
		/* 820B7150h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820B7150h case    2:*/		return 0x820B7154;
		  /* 820B7154h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B7154h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B7154h case    3:*/		return 0x820B7158;
		  /* 820B7158h */ case    4:  		/* lwzx R11, <#[R11 + R6]> */
		/* 820B7158h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R6 + 0x00000000) );
		/* 820B7158h case    4:*/		return 0x820B715C;
		  /* 820B715Ch */ case    5:  		/* or R11, R11, R8 */
		/* 820B715Ch case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820B715Ch case    5:*/		return 0x820B7160;
		  /* 820B7160h */ case    6:  		/* stw R11, <#[R10]> */
		/* 820B7160h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820B7160h case    6:*/		return 0x820B7164;
		  /* 820B7164h */ case    7:  		/* bc 16, CR0_LT, -128 */
		/* 820B7164h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B70E4;  }
		/* 820B7164h case    7:*/		return 0x820B7168;
	}
	return 0x820B7168;
} // Block from 820B7148h-820B7168h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B7168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7168);
		  /* 820B7168h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 820B7168h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820B7168h case    0:*/		return 0x820B716C;
		  /* 820B716Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820B716Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B716Ch case    1:*/		return 0x820B7170;
		  /* 820B7170h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 820B7170h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B71DC;  }
		/* 820B7170h case    2:*/		return 0x820B7174;
		  /* 820B7174h */ case    3:  		/* lwz R11, <#[R1 + 92]> */
		/* 820B7174h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 820B7174h case    3:*/		return 0x820B7178;
		  /* 820B7178h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 820B7178h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B7178h case    4:*/		return 0x820B717C;
		  /* 820B717Ch */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 820B717Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820B71DC;  }
		/* 820B717Ch case    5:*/		return 0x820B7180;
		  /* 820B7180h */ case    6:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B7180h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B7180h case    6:*/		return 0x820B7184;
		  /* 820B7184h */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 820B7184h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B7184h case    7:*/		return 0x820B7188;
		  /* 820B7188h */ case    8:  		/* bc 4, CR6_EQ, 84 */
		/* 820B7188h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820B71DC;  }
		/* 820B7188h case    8:*/		return 0x820B718C;
		  /* 820B718Ch */ case    9:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B718Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B718Ch case    9:*/		return 0x820B7190;
		  /* 820B7190h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 820B7190h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B7190h case   10:*/		return 0x820B7194;
		  /* 820B7194h */ case   11:  		/* bc 4, CR6_EQ, 72 */
		/* 820B7194h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820B71DC;  }
		/* 820B7194h case   11:*/		return 0x820B7198;
		  /* 820B7198h */ case   12:  		/* lwz R10, <#[R1 + 136]> */
		/* 820B7198h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 820B7198h case   12:*/		return 0x820B719C;
		  /* 820B719Ch */ case   13:  		/* lis R5, 4096 */
		/* 820B719Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820B719Ch case   13:*/		return 0x820B71A0;
		  /* 820B71A0h */ case   14:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B71A0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B71A0h case   14:*/		return 0x820B71A4;
		  /* 820B71A4h */ case   15:  		/* li R9, 0 */
		/* 820B71A4h case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B71A4h case   15:*/		return 0x820B71A8;
		  /* 820B71A8h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B71A8h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B71A8h case   16:*/		return 0x820B71AC;
		  /* 820B71ACh */ case   17:  		/* lwz R4, <#[R1 + 492]> */
		/* 820B71ACh case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001EC) );
		/* 820B71ACh case   17:*/		return 0x820B71B0;
		  /* 820B71B0h */ case   18:  		/* li R8, 0 */
		/* 820B71B0h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B71B0h case   18:*/		return 0x820B71B4;
		  /* 820B71B4h */ case   19:  		/* addi R7, R1, 148 */
		/* 820B71B4h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x94);
		/* 820B71B4h case   19:*/		return 0x820B71B8;
		  /* 820B71B8h */ case   20:  		/* add R6, R10, R11 */
		/* 820B71B8h case   20:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 820B71B8h case   20:*/		return 0x820B71BC;
		  /* 820B71BCh */ case   21:  		/* ori R5, R5, 1 */
		/* 820B71BCh case   21:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B71BCh case   21:*/		return 0x820B71C0;
		  /* 820B71C0h */ case   22:  		/* mr R3, R31 */
		/* 820B71C0h case   22:*/		regs.R3 = regs.R31;
		/* 820B71C0h case   22:*/		return 0x820B71C4;
		  /* 820B71C4h */ case   23:  		/* bl -26300 */
		/* 820B71C4h case   23:*/		regs.LR = 0x820B71C8; return 0x820B0B08;
		/* 820B71C4h case   23:*/		return 0x820B71C8;
		  /* 820B71C8h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820B71C8h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B71C8h case   24:*/		return 0x820B71CC;
		  /* 820B71CCh */ case   25:  		/* bc 4, CR0_LT, 16 */
		/* 820B71CCh case   25:*/		if ( !regs.CR[0].lt ) { return 0x820B71DC;  }
		/* 820B71CCh case   25:*/		return 0x820B71D0;
	}
	return 0x820B71D0;
} // Block from 820B7168h-820B71D0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820B71D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B71D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B71D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B71D0);
		  /* 820B71D0h */ case    0:  		/* lis R30, -32768 */
		/* 820B71D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 820B71D0h case    0:*/		return 0x820B71D4;
		  /* 820B71D4h */ case    1:  		/* ori R30, R30, 16389 */
		/* 820B71D4h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 820B71D4h case    1:*/		return 0x820B71D8;
		  /* 820B71D8h */ case    2:  		/* b 20 */
		/* 820B71D8h case    2:*/		return 0x820B71EC;
		/* 820B71D8h case    2:*/		return 0x820B71DC;
	}
	return 0x820B71DC;
} // Block from 820B71D0h-820B71DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B71DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B71DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B71DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B71DC);
		  /* 820B71DCh */ case    0:  		/* li R30, 0 */
		/* 820B71DCh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820B71DCh case    0:*/		return 0x820B71E0;
		  /* 820B71E0h */ case    1:  		/* b 12 */
		/* 820B71E0h case    1:*/		return 0x820B71EC;
		/* 820B71E0h case    1:*/		return 0x820B71E4;
	}
	return 0x820B71E4;
} // Block from 820B71DCh-820B71E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B71E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B71E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B71E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B71E4);
		  /* 820B71E4h */ case    0:  		/* lis R30, -32761 */
		/* 820B71E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 820B71E4h case    0:*/		return 0x820B71E8;
		  /* 820B71E8h */ case    1:  		/* ori R30, R30, 14 */
		/* 820B71E8h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 820B71E8h case    1:*/		return 0x820B71EC;
	}
	return 0x820B71EC;
} // Block from 820B71E4h-820B71ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B71ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B71EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B71EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B71EC);
		  /* 820B71ECh */ case    0:  		/* lis R4, 9345 */
		/* 820B71ECh case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B71ECh case    0:*/		return 0x820B71F0;
		  /* 820B71F0h */ case    1:  		/* lwz R3, <#[R1 + 120]> */
		/* 820B71F0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000078) );
		/* 820B71F0h case    1:*/		return 0x820B71F4;
		  /* 820B71F4h */ case    2:  		/* bl -192188 */
		/* 820B71F4h case    2:*/		regs.LR = 0x820B71F8; return 0x82088338;
		/* 820B71F4h case    2:*/		return 0x820B71F8;
		  /* 820B71F8h */ case    3:  		/* lis R4, 9345 */
		/* 820B71F8h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B71F8h case    3:*/		return 0x820B71FC;
		  /* 820B71FCh */ case    4:  		/* lwz R3, <#[R1 + 112]> */
		/* 820B71FCh case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 820B71FCh case    4:*/		return 0x820B7200;
		  /* 820B7200h */ case    5:  		/* bl -192200 */
		/* 820B7200h case    5:*/		regs.LR = 0x820B7204; return 0x82088338;
		/* 820B7200h case    5:*/		return 0x820B7204;
		  /* 820B7204h */ case    6:  		/* lis R4, 9345 */
		/* 820B7204h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7204h case    6:*/		return 0x820B7208;
		  /* 820B7208h */ case    7:  		/* lwz R3, <#[R1 + 124]> */
		/* 820B7208h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000007C) );
		/* 820B7208h case    7:*/		return 0x820B720C;
		  /* 820B720Ch */ case    8:  		/* bl -192212 */
		/* 820B720Ch case    8:*/		regs.LR = 0x820B7210; return 0x82088338;
		/* 820B720Ch case    8:*/		return 0x820B7210;
		  /* 820B7210h */ case    9:  		/* lis R4, 9345 */
		/* 820B7210h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7210h case    9:*/		return 0x820B7214;
		  /* 820B7214h */ case   10:  		/* lwz R3, <#[R1 + 108]> */
		/* 820B7214h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000006C) );
		/* 820B7214h case   10:*/		return 0x820B7218;
		  /* 820B7218h */ case   11:  		/* bl -192224 */
		/* 820B7218h case   11:*/		regs.LR = 0x820B721C; return 0x82088338;
		/* 820B7218h case   11:*/		return 0x820B721C;
		  /* 820B721Ch */ case   12:  		/* lis R4, 9345 */
		/* 820B721Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B721Ch case   12:*/		return 0x820B7220;
		  /* 820B7220h */ case   13:  		/* lwz R3, <#[R1 + 100]> */
		/* 820B7220h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000064) );
		/* 820B7220h case   13:*/		return 0x820B7224;
		  /* 820B7224h */ case   14:  		/* bl -192236 */
		/* 820B7224h case   14:*/		regs.LR = 0x820B7228; return 0x82088338;
		/* 820B7224h case   14:*/		return 0x820B7228;
		  /* 820B7228h */ case   15:  		/* lis R4, 9345 */
		/* 820B7228h case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7228h case   15:*/		return 0x820B722C;
		  /* 820B722Ch */ case   16:  		/* lwz R3, <#[R1 + 152]> */
		/* 820B722Ch case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000098) );
		/* 820B722Ch case   16:*/		return 0x820B7230;
		  /* 820B7230h */ case   17:  		/* bl -192248 */
		/* 820B7230h case   17:*/		regs.LR = 0x820B7234; return 0x82088338;
		/* 820B7230h case   17:*/		return 0x820B7234;
		  /* 820B7234h */ case   18:  		/* lwz R11, <#[R31 + 68]> */
		/* 820B7234h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 820B7234h case   18:*/		return 0x820B7238;
		  /* 820B7238h */ case   19:  		/* lwz R10, <#[R1 + 140]> */
		/* 820B7238h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B7238h case   19:*/		return 0x820B723C;
		  /* 820B723Ch */ case   20:  		/* mr R3, R30 */
		/* 820B723Ch case   20:*/		regs.R3 = regs.R30;
		/* 820B723Ch case   20:*/		return 0x820B7240;
		  /* 820B7240h */ case   21:  		/* lwz R9, <#[R1 + 144]> */
		/* 820B7240h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7240h case   21:*/		return 0x820B7244;
		  /* 820B7244h */ case   22:  		/* addi R11, R11, -1 */
		/* 820B7244h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820B7244h case   22:*/		return 0x820B7248;
		  /* 820B7248h */ case   23:  		/* lwz R8, <#[R1 + 160]> */
		/* 820B7248h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B7248h case   23:*/		return 0x820B724C;
		  /* 820B724Ch */ case   24:  		/* lwz R7, <#[R1 + 156]> */
		/* 820B724Ch case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000009C) );
		/* 820B724Ch case   24:*/		return 0x820B7250;
		  /* 820B7250h */ case   25:  		/* stw R11, <#[R31 + 68]> */
		/* 820B7250h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 820B7250h case   25:*/		return 0x820B7254;
		  /* 820B7254h */ case   26:  		/* stw R10, <#[R31 + 48]> */
		/* 820B7254h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 820B7254h case   26:*/		return 0x820B7258;
		  /* 820B7258h */ case   27:  		/* stw R9, <#[R31 + 52]> */
		/* 820B7258h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000034) );
		/* 820B7258h case   27:*/		return 0x820B725C;
		  /* 820B725Ch */ case   28:  		/* stw R8, <#[R31 + 108]> */
		/* 820B725Ch case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000006C) );
		/* 820B725Ch case   28:*/		return 0x820B7260;
		  /* 820B7260h */ case   29:  		/* stw R7, <#[R31 + 112]> */
		/* 820B7260h case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000070) );
		/* 820B7260h case   29:*/		return 0x820B7264;
	}
	return 0x820B7264;
} // Block from 820B71ECh-820B7264h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820B7264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7264);
		  /* 820B7264h */ case    0:  		/* addi R1, R1, 448 */
		/* 820B7264h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1C0);
		/* 820B7264h case    0:*/		return 0x820B7268;
		  /* 820B7268h */ case    1:  		/* lfd FR30, <#[R1 - 168]> */
		/* 820B7268h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820B7268h case    1:*/		return 0x820B726C;
		  /* 820B726Ch */ case    2:  		/* lfd FR31, <#[R1 - 160]> */
		/* 820B726Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820B726Ch case    2:*/		return 0x820B7270;
		  /* 820B7270h */ case    3:  		/* b -155648 */
		/* 820B7270h case    3:*/		return 0x82091270;
		/* 820B7270h case    3:*/		return 0x820B7274;
		  /* 820B7274h */ case    4:  		/* nop */
		/* 820B7274h case    4:*/		cpu::op::nop();
		/* 820B7274h case    4:*/		return 0x820B7278;
	}
	return 0x820B7278;
} // Block from 820B7264h-820B7278h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B7278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7278);
		  /* 820B7278h */ case    0:  		/* mfspr R12, LR */
		/* 820B7278h case    0:*/		regs.R12 = regs.LR;
		/* 820B7278h case    0:*/		return 0x820B727C;
		  /* 820B727Ch */ case    1:  		/* bl -155740 */
		/* 820B727Ch case    1:*/		regs.LR = 0x820B7280; return 0x82091220;
		/* 820B727Ch case    1:*/		return 0x820B7280;
		  /* 820B7280h */ case    2:  		/* stfd FR29, <#[R1 - 176]> */
		/* 820B7280h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF50) );
		/* 820B7280h case    2:*/		return 0x820B7284;
		  /* 820B7284h */ case    3:  		/* stfd FR30, <#[R1 - 168]> */
		/* 820B7284h case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820B7284h case    3:*/		return 0x820B7288;
		  /* 820B7288h */ case    4:  		/* stfd FR31, <#[R1 - 160]> */
		/* 820B7288h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820B7288h case    4:*/		return 0x820B728C;
		  /* 820B728Ch */ case    5:  		/* stwu R1, <#[R1 - 400]> */
		/* 820B728Ch case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 820B728Ch case    5:*/		return 0x820B7290;
		  /* 820B7290h */ case    6:  		/* lwz R11, <#[R3 + 4]> */
		/* 820B7290h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 820B7290h case    6:*/		return 0x820B7294;
		  /* 820B7294h */ case    7:  		/* mr R18, R8 */
		/* 820B7294h case    7:*/		regs.R18 = regs.R8;
		/* 820B7294h case    7:*/		return 0x820B7298;
		  /* 820B7298h */ case    8:  		/* lwz R10, <#[R3 + 88]> */
		/* 820B7298h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000058) );
		/* 820B7298h case    8:*/		return 0x820B729C;
		  /* 820B729Ch */ case    9:  		/* li R24, 0 */
		/* 820B729Ch case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820B729Ch case    9:*/		return 0x820B72A0;
		  /* 820B72A0h */ case   10:  		/* lwz R9, <#[R3 + 92]> */
		/* 820B72A0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000005C) );
		/* 820B72A0h case   10:*/		return 0x820B72A4;
		  /* 820B72A4h */ case   11:  		/* mr R31, R3 */
		/* 820B72A4h case   11:*/		regs.R31 = regs.R3;
		/* 820B72A4h case   11:*/		return 0x820B72A8;
		  /* 820B72A8h */ case   12:  		/* lwz R8, <#[R3 + 24]> */
		/* 820B72A8h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000018) );
		/* 820B72A8h case   12:*/		return 0x820B72AC;
		  /* 820B72ACh */ case   13:  		/* mr R30, R5 */
		/* 820B72ACh case   13:*/		regs.R30 = regs.R5;
		/* 820B72ACh case   13:*/		return 0x820B72B0;
		  /* 820B72B0h */ case   14:  		/* stw R4, <#[R1 + 428]> */
		/* 820B72B0h case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000001AC) );
		/* 820B72B0h case   14:*/		return 0x820B72B4;
		  /* 820B72B4h */ case   15:  		/* lis R4, 9345 */
		/* 820B72B4h case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B72B4h case   15:*/		return 0x820B72B8;
		  /* 820B72B8h */ case   16:  		/* lwz R20, <#[R11 + 28]> */
		/* 820B72B8h case   16:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R11 + 0x0000001C) );
		/* 820B72B8h case   16:*/		return 0x820B72BC;
		  /* 820B72BCh */ case   17:  		/* mr R14, R6 */
		/* 820B72BCh case   17:*/		regs.R14 = regs.R6;
		/* 820B72BCh case   17:*/		return 0x820B72C0;
		  /* 820B72C0h */ case   18:  		/* stw R7, <#[R1 + 452]> */
		/* 820B72C0h case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000001C4) );
		/* 820B72C0h case   18:*/		return 0x820B72C4;
		  /* 820B72C4h */ case   19:  		/* mr R21, R24 */
		/* 820B72C4h case   19:*/		regs.R21 = regs.R24;
		/* 820B72C4h case   19:*/		return 0x820B72C8;
		  /* 820B72C8h */ case   20:  		/* rlwinm R15, R20, 2, 0, 29 */
		/* 820B72C8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R15,regs.R20);
		/* 820B72C8h case   20:*/		return 0x820B72CC;
		  /* 820B72CCh */ case   21:  		/* stw R24, <#[R1 + 132]> */
		/* 820B72CCh case   21:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000084) );
		/* 820B72CCh case   21:*/		return 0x820B72D0;
		  /* 820B72D0h */ case   22:  		/* mr R19, R24 */
		/* 820B72D0h case   22:*/		regs.R19 = regs.R24;
		/* 820B72D0h case   22:*/		return 0x820B72D4;
		  /* 820B72D4h */ case   23:  		/* stw R24, <#[R1 + 172]> */
		/* 820B72D4h case   23:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B72D4h case   23:*/		return 0x820B72D8;
		  /* 820B72D8h */ case   24:  		/* mr R3, R15 */
		/* 820B72D8h case   24:*/		regs.R3 = regs.R15;
		/* 820B72D8h case   24:*/		return 0x820B72DC;
		  /* 820B72DCh */ case   25:  		/* stw R10, <#[R1 + 176]> */
		/* 820B72DCh case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 820B72DCh case   25:*/		return 0x820B72E0;
		  /* 820B72E0h */ case   26:  		/* stw R9, <#[R1 + 152]> */
		/* 820B72E0h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000098) );
		/* 820B72E0h case   26:*/		return 0x820B72E4;
		  /* 820B72E4h */ case   27:  		/* stw R8, <#[R1 + 168]> */
		/* 820B72E4h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B72E4h case   27:*/		return 0x820B72E8;
		  /* 820B72E8h */ case   28:  		/* stw R24, <#[R1 + 136]> */
		/* 820B72E8h case   28:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000088) );
		/* 820B72E8h case   28:*/		return 0x820B72EC;
		  /* 820B72ECh */ case   29:  		/* stw R24, <#[R1 + 140]> */
		/* 820B72ECh case   29:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B72ECh case   29:*/		return 0x820B72F0;
		  /* 820B72F0h */ case   30:  		/* bl -192752 */
		/* 820B72F0h case   30:*/		regs.LR = 0x820B72F4; return 0x82088200;
		/* 820B72F0h case   30:*/		return 0x820B72F4;
		  /* 820B72F4h */ case   31:  		/* or. R25, R3, R3 */
		/* 820B72F4h case   31:*/		cpu::op::or<1>(regs,&regs.R25,regs.R3,regs.R3);
		/* 820B72F4h case   31:*/		return 0x820B72F8;
		  /* 820B72F8h */ case   32:  		/* bc 12, CR0_EQ, 1840 */
		/* 820B72F8h case   32:*/		if ( regs.CR[0].eq ) { return 0x820B7A28;  }
		/* 820B72F8h case   32:*/		return 0x820B72FC;
		  /* 820B72FCh */ case   33:  		/* lis R4, 9345 */
		/* 820B72FCh case   33:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B72FCh case   33:*/		return 0x820B7300;
		  /* 820B7300h */ case   34:  		/* mr R3, R15 */
		/* 820B7300h case   34:*/		regs.R3 = regs.R15;
		/* 820B7300h case   34:*/		return 0x820B7304;
		  /* 820B7304h */ case   35:  		/* bl -192772 */
		/* 820B7304h case   35:*/		regs.LR = 0x820B7308; return 0x82088200;
		/* 820B7304h case   35:*/		return 0x820B7308;
		  /* 820B7308h */ case   36:  		/* stw R3, <#[R1 + 132]> */
		/* 820B7308h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 820B7308h case   36:*/		return 0x820B730C;
		  /* 820B730Ch */ case   37:  		/* cmplwi CR0, R3, 0 */
		/* 820B730Ch case   37:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B730Ch case   37:*/		return 0x820B7310;
		  /* 820B7310h */ case   38:  		/* bc 12, CR0_EQ, 1816 */
		/* 820B7310h case   38:*/		if ( regs.CR[0].eq ) { return 0x820B7A28;  }
		/* 820B7310h case   38:*/		return 0x820B7314;
		  /* 820B7314h */ case   39:  		/* rlwinm R29, R20, 4, 0, 27 */
		/* 820B7314h case   39:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R29,regs.R20);
		/* 820B7314h case   39:*/		return 0x820B7318;
		  /* 820B7318h */ case   40:  		/* lis R4, 9345 */
		/* 820B7318h case   40:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7318h case   40:*/		return 0x820B731C;
		  /* 820B731Ch */ case   41:  		/* mr R3, R29 */
		/* 820B731Ch case   41:*/		regs.R3 = regs.R29;
		/* 820B731Ch case   41:*/		return 0x820B7320;
		  /* 820B7320h */ case   42:  		/* bl -192800 */
		/* 820B7320h case   42:*/		regs.LR = 0x820B7324; return 0x82088200;
		/* 820B7320h case   42:*/		return 0x820B7324;
		  /* 820B7324h */ case   43:  		/* or. R21, R3, R3 */
		/* 820B7324h case   43:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 820B7324h case   43:*/		return 0x820B7328;
		  /* 820B7328h */ case   44:  		/* bc 12, CR0_EQ, 1792 */
		/* 820B7328h case   44:*/		if ( regs.CR[0].eq ) { return 0x820B7A28;  }
		/* 820B7328h case   44:*/		return 0x820B732C;
		  /* 820B732Ch */ case   45:  		/* lis R4, 9345 */
		/* 820B732Ch case   45:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B732Ch case   45:*/		return 0x820B7330;
		  /* 820B7330h */ case   46:  		/* mr R3, R29 */
		/* 820B7330h case   46:*/		regs.R3 = regs.R29;
		/* 820B7330h case   46:*/		return 0x820B7334;
		  /* 820B7334h */ case   47:  		/* bl -192820 */
		/* 820B7334h case   47:*/		regs.LR = 0x820B7338; return 0x82088200;
		/* 820B7334h case   47:*/		return 0x820B7338;
		  /* 820B7338h */ case   48:  		/* stw R3, <#[R1 + 136]> */
		/* 820B7338h case   48:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000088) );
		/* 820B7338h case   48:*/		return 0x820B733C;
		  /* 820B733Ch */ case   49:  		/* cmplwi CR0, R3, 0 */
		/* 820B733Ch case   49:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B733Ch case   49:*/		return 0x820B7340;
		  /* 820B7340h */ case   50:  		/* bc 12, CR0_EQ, 1768 */
		/* 820B7340h case   50:*/		if ( regs.CR[0].eq ) { return 0x820B7A28;  }
		/* 820B7340h case   50:*/		return 0x820B7344;
		  /* 820B7344h */ case   51:  		/* lis R4, 9345 */
		/* 820B7344h case   51:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7344h case   51:*/		return 0x820B7348;
		  /* 820B7348h */ case   52:  		/* mr R3, R15 */
		/* 820B7348h case   52:*/		regs.R3 = regs.R15;
		/* 820B7348h case   52:*/		return 0x820B734C;
		  /* 820B734Ch */ case   53:  		/* bl -192844 */
		/* 820B734Ch case   53:*/		regs.LR = 0x820B7350; return 0x82088200;
		/* 820B734Ch case   53:*/		return 0x820B7350;
		  /* 820B7350h */ case   54:  		/* or. R19, R3, R3 */
		/* 820B7350h case   54:*/		cpu::op::or<1>(regs,&regs.R19,regs.R3,regs.R3);
		/* 820B7350h case   54:*/		return 0x820B7354;
		  /* 820B7354h */ case   55:  		/* bc 12, CR0_EQ, 1748 */
		/* 820B7354h case   55:*/		if ( regs.CR[0].eq ) { return 0x820B7A28;  }
		/* 820B7354h case   55:*/		return 0x820B7358;
		  /* 820B7358h */ case   56:  		/* lis R4, 9345 */
		/* 820B7358h case   56:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7358h case   56:*/		return 0x820B735C;
		  /* 820B735Ch */ case   57:  		/* mr R3, R15 */
		/* 820B735Ch case   57:*/		regs.R3 = regs.R15;
		/* 820B735Ch case   57:*/		return 0x820B7360;
		  /* 820B7360h */ case   58:  		/* bl -192864 */
		/* 820B7360h case   58:*/		regs.LR = 0x820B7364; return 0x82088200;
		/* 820B7360h case   58:*/		return 0x820B7364;
		  /* 820B7364h */ case   59:  		/* stw R3, <#[R1 + 140]> */
		/* 820B7364h case   59:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B7364h case   59:*/		return 0x820B7368;
		  /* 820B7368h */ case   60:  		/* cmplwi CR0, R3, 0 */
		/* 820B7368h case   60:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B7368h case   60:*/		return 0x820B736C;
		  /* 820B736Ch */ case   61:  		/* bc 12, CR0_EQ, 1724 */
		/* 820B736Ch case   61:*/		if ( regs.CR[0].eq ) { return 0x820B7A28;  }
		/* 820B736Ch case   61:*/		return 0x820B7370;
		  /* 820B7370h */ case   62:  		/* lis R4, 9345 */
		/* 820B7370h case   62:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7370h case   62:*/		return 0x820B7374;
		  /* 820B7374h */ case   63:  		/* mr R3, R15 */
		/* 820B7374h case   63:*/		regs.R3 = regs.R15;
		/* 820B7374h case   63:*/		return 0x820B7378;
		  /* 820B7378h */ case   64:  		/* bl -192888 */
		/* 820B7378h case   64:*/		regs.LR = 0x820B737C; return 0x82088200;
		/* 820B7378h case   64:*/		return 0x820B737C;
		  /* 820B737Ch */ case   65:  		/* stw R3, <#[R1 + 172]> */
		/* 820B737Ch case   65:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B737Ch case   65:*/		return 0x820B7380;
		  /* 820B7380h */ case   66:  		/* cmplwi CR0, R3, 0 */
		/* 820B7380h case   66:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B7380h case   66:*/		return 0x820B7384;
		  /* 820B7384h */ case   67:  		/* bc 12, CR0_EQ, 1700 */
		/* 820B7384h case   67:*/		if ( regs.CR[0].eq ) { return 0x820B7A28;  }
		/* 820B7384h case   67:*/		return 0x820B7388;
		  /* 820B7388h */ case   68:  		/* cmplwi CR6, R30, 0 */
		/* 820B7388h case   68:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B7388h case   68:*/		return 0x820B738C;
		  /* 820B738Ch */ case   69:  		/* stw R24, <#[R31 + 92]> */
		/* 820B738Ch case   69:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B738Ch case   69:*/		return 0x820B7390;
		  /* 820B7390h */ case   70:  		/* bc 12, CR6_EQ, 72 */
		/* 820B7390h case   70:*/		if ( regs.CR[6].eq ) { return 0x820B73D8;  }
		/* 820B7390h case   70:*/		return 0x820B7394;
		  /* 820B7394h */ case   71:  		/* li R5, 0 */
		/* 820B7394h case   71:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B7394h case   71:*/		return 0x820B7398;
		  /* 820B7398h */ case   72:  		/* mr R4, R30 */
		/* 820B7398h case   72:*/		regs.R4 = regs.R30;
		/* 820B7398h case   72:*/		return 0x820B739C;
		  /* 820B739Ch */ case   73:  		/* mr R3, R31 */
		/* 820B739Ch case   73:*/		regs.R3 = regs.R31;
		/* 820B739Ch case   73:*/		return 0x820B73A0;
		  /* 820B73A0h */ case   74:  		/* bl 34560 */
		/* 820B73A0h case   74:*/		regs.LR = 0x820B73A4; return 0x820BFAA0;
		/* 820B73A0h case   74:*/		return 0x820B73A4;
		  /* 820B73A4h */ case   75:  		/* or. R30, R3, R3 */
		/* 820B73A4h case   75:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B73A4h case   75:*/		return 0x820B73A8;
		  /* 820B73A8h */ case   76:  		/* bc 12, CR0_LT, 1672 */
		/* 820B73A8h case   76:*/		if ( regs.CR[0].lt ) { return 0x820B7A30;  }
		/* 820B73A8h case   76:*/		return 0x820B73AC;
		  /* 820B73ACh */ case   77:  		/* lwz R11, <#[R31 + 92]> */
		/* 820B73ACh case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B73ACh case   77:*/		return 0x820B73B0;
		  /* 820B73B0h */ case   78:  		/* cmpwi CR6, R11, 0 */
		/* 820B73B0h case   78:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B73B0h case   78:*/		return 0x820B73B4;
		  /* 820B73B4h */ case   79:  		/* bc 12, CR6_EQ, 12 */
		/* 820B73B4h case   79:*/		if ( regs.CR[6].eq ) { return 0x820B73C0;  }
		/* 820B73B4h case   79:*/		return 0x820B73B8;
		  /* 820B73B8h */ case   80:  		/* li R11, 1 */
		/* 820B73B8h case   80:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820B73B8h case   80:*/		return 0x820B73BC;
		  /* 820B73BCh */ case   81:  		/* stw R11, <#[R1 + 152]> */
		/* 820B73BCh case   81:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 820B73BCh case   81:*/		return 0x820B73C0;
	}
	return 0x820B73C0;
} // Block from 820B7278h-820B73C0h (82 instructions)

//////////////////////////////////////////////////////
// Block at 820B73C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B73C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B73C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B73C0);
		  /* 820B73C0h */ case    0:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B73C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B73C0h case    0:*/		return 0x820B73C4;
		  /* 820B73C4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820B73C4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B73C4h case    1:*/		return 0x820B73C8;
		  /* 820B73C8h */ case    2:  		/* bc 4, CR6_EQ, 1624 */
		/* 820B73C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820B7A20;  }
		/* 820B73C8h case    2:*/		return 0x820B73CC;
		  /* 820B73CCh */ case    3:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B73CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B73CCh case    3:*/		return 0x820B73D0;
		  /* 820B73D0h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 820B73D0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B73D0h case    4:*/		return 0x820B73D4;
		  /* 820B73D4h */ case    5:  		/* bc 4, CR6_EQ, 1612 */
		/* 820B73D4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820B7A20;  }
		/* 820B73D4h case    5:*/		return 0x820B73D8;
	}
	return 0x820B73D8;
} // Block from 820B73C0h-820B73D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820B73D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B73D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B73D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B73D8);
		  /* 820B73D8h */ case    0:  		/* mr R5, R15 */
		/* 820B73D8h case    0:*/		regs.R5 = regs.R15;
		/* 820B73D8h case    0:*/		return 0x820B73DC;
		  /* 820B73DCh */ case    1:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B73DCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B73DCh case    1:*/		return 0x820B73E0;
		  /* 820B73E0h */ case    2:  		/* mr R3, R25 */
		/* 820B73E0h case    2:*/		regs.R3 = regs.R25;
		/* 820B73E0h case    2:*/		return 0x820B73E4;
		  /* 820B73E4h */ case    3:  		/* bl -154164 */
		/* 820B73E4h case    3:*/		regs.LR = 0x820B73E8; return 0x820919B0;
		/* 820B73E4h case    3:*/		return 0x820B73E8;
		  /* 820B73E8h */ case    4:  		/* mr R5, R15 */
		/* 820B73E8h case    4:*/		regs.R5 = regs.R15;
		/* 820B73E8h case    4:*/		return 0x820B73EC;
		  /* 820B73ECh */ case    5:  		/* mr R3, R18 */
		/* 820B73ECh case    5:*/		regs.R3 = regs.R18;
		/* 820B73ECh case    5:*/		return 0x820B73F0;
		  /* 820B73F0h */ case    6:  		/* lwz R4, <#[R31 + 24]> */
		/* 820B73F0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820B73F0h case    6:*/		return 0x820B73F4;
		  /* 820B73F4h */ case    7:  		/* bl -154180 */
		/* 820B73F4h case    7:*/		regs.LR = 0x820B73F8; return 0x820919B0;
		/* 820B73F4h case    7:*/		return 0x820B73F8;
		  /* 820B73F8h */ case    8:  		/* cmplwi CR6, R20, 0 */
		/* 820B73F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820B73F8h case    8:*/		return 0x820B73FC;
		  /* 820B73FCh */ case    9:  		/* bc 12, CR6_EQ, 152 */
		/* 820B73FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x820B7494;  }
		/* 820B73FCh case    9:*/		return 0x820B7400;
		  /* 820B7400h */ case   10:  		/* mr R30, R24 */
		/* 820B7400h case   10:*/		regs.R30 = regs.R24;
		/* 820B7400h case   10:*/		return 0x820B7404;
		  /* 820B7404h */ case   11:  		/* mr R29, R21 */
		/* 820B7404h case   11:*/		regs.R29 = regs.R21;
		/* 820B7404h case   11:*/		return 0x820B7408;
		  /* 820B7408h */ case   12:  		/* mr R28, R20 */
		/* 820B7408h case   12:*/		regs.R28 = regs.R20;
		/* 820B7408h case   12:*/		return 0x820B740C;
		  /* 820B740Ch */ case   13:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B740Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B740Ch case   13:*/		return 0x820B7410;
		  /* 820B7410h */ case   14:  		/* lwzx R4, <#[R11 + R30]> */
		/* 820B7410h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820B7410h case   14:*/		return 0x820B7414;
		  /* 820B7414h */ case   15:  		/* cmpwi CR6, R4, -1 */
		/* 820B7414h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 820B7414h case   15:*/		return 0x820B7418;
		  /* 820B7418h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 820B7418h case   16:*/		if ( regs.CR[6].eq ) { return 0x820B7430;  }
		/* 820B7418h case   16:*/		return 0x820B741C;
		  /* 820B741Ch */ case   17:  		/* mr R5, R29 */
		/* 820B741Ch case   17:*/		regs.R5 = regs.R29;
		/* 820B741Ch case   17:*/		return 0x820B7420;
		  /* 820B7420h */ case   18:  		/* mr R3, R31 */
		/* 820B7420h case   18:*/		regs.R3 = regs.R31;
		/* 820B7420h case   18:*/		return 0x820B7424;
		  /* 820B7424h */ case   19:  		/* bl -34308 */
		/* 820B7424h case   19:*/		regs.LR = 0x820B7428; return 0x820AEE20;
		/* 820B7424h case   19:*/		return 0x820B7428;
		  /* 820B7428h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820B7428h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B7428h case   20:*/		return 0x820B742C;
		  /* 820B742Ch */ case   21:  		/* bc 4, CR0_LT, 20 */
		/* 820B742Ch case   21:*/		if ( !regs.CR[0].lt ) { return 0x820B7440;  }
		/* 820B742Ch case   21:*/		return 0x820B7430;
	}
	return 0x820B7430;
} // Block from 820B73D8h-820B7430h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820B7430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7430);
		  /* 820B7430h */ case    0:  		/* lfd FR0, <#[R31 + 168]> */
		/* 820B7430h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B7430h case    0:*/		return 0x820B7434;
		  /* 820B7434h */ case    1:  		/* stfd FR0, <#[R29]> */
		/* 820B7434h case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B7434h case    1:*/		return 0x820B7438;
		  /* 820B7438h */ case    2:  		/* lfd FR0, <#[R31 + 176]> */
		/* 820B7438h case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B7438h case    2:*/		return 0x820B743C;
		  /* 820B743Ch */ case    3:  		/* stfd FR0, <#[R29 + 8]> */
		/* 820B743Ch case    3:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000008) );
		/* 820B743Ch case    3:*/		return 0x820B7440;
	}
	return 0x820B7440;
} // Block from 820B7430h-820B7440h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B7440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7440);
		  /* 820B7440h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B7440h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B7440h case    0:*/		return 0x820B7444;
		  /* 820B7444h */ case    1:  		/* lwzx R11, <#[R11 + R30]> */
		/* 820B7444h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820B7444h case    1:*/		return 0x820B7448;
		  /* 820B7448h */ case    2:  		/* cmpwi CR6, R11, -1 */
		/* 820B7448h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820B7448h case    2:*/		return 0x820B744C;
		  /* 820B744Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 820B744Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820B747C;  }
		/* 820B744Ch case    3:*/		return 0x820B7450;
		  /* 820B7450h */ case    4:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B7450h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B7450h case    4:*/		return 0x820B7454;
		  /* 820B7454h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B7454h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B7454h case    5:*/		return 0x820B7458;
		  /* 820B7458h */ case    6:  		/* lwz R9, <#[R10 + 20]> */
		/* 820B7458h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000014) );
		/* 820B7458h case    6:*/		return 0x820B745C;
		  /* 820B745Ch */ case    7:  		/* lwz R10, <#[R10 + 116]> */
		/* 820B745Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000074) );
		/* 820B745Ch case    7:*/		return 0x820B7460;
		  /* 820B7460h */ case    8:  		/* lwzx R11, <#[R9 + R11]> */
		/* 820B7460h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820B7460h case    8:*/		return 0x820B7464;
		  /* 820B7464h */ case    9:  		/* lwz R9, <#[R11 + 4]> */
		/* 820B7464h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820B7464h case    9:*/		return 0x820B7468;
		  /* 820B7468h */ case   10:  		/* cmplw CR6, R10, R9 */
		/* 820B7468h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820B7468h case   10:*/		return 0x820B746C;
		  /* 820B746Ch */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 820B746Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820B747C;  }
		/* 820B746Ch case   11:*/		return 0x820B7470;
		  /* 820B7470h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820B7470h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B7470h case   12:*/		return 0x820B7474;
		  /* 820B7474h */ case   13:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 820B7474h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 820B7474h case   13:*/		return 0x820B7478;
		  /* 820B7478h */ case   14:  		/* b 8 */
		/* 820B7478h case   14:*/		return 0x820B7480;
		/* 820B7478h case   14:*/		return 0x820B747C;
	}
	return 0x820B747C;
} // Block from 820B7440h-820B747Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820B747Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B747C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B747C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B747C);
		  /* 820B747Ch */ case    0:  		/* li R11, 31 */
		/* 820B747Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 820B747Ch case    0:*/		return 0x820B7480;
	}
	return 0x820B7480;
} // Block from 820B747Ch-820B7480h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B7480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7480);
		  /* 820B7480h */ case    0:  		/* stwx R11, <#[R30 + R19]> */
		/* 820B7480h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + regs.R19 + 0x00000000) );
		/* 820B7480h case    0:*/		return 0x820B7484;
		  /* 820B7484h */ case    1:  		/* addic. R28, R28, -1 */
		/* 820B7484h case    1:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 820B7484h case    1:*/		return 0x820B7488;
		  /* 820B7488h */ case    2:  		/* addi R29, R29, 16 */
		/* 820B7488h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x10);
		/* 820B7488h case    2:*/		return 0x820B748C;
		  /* 820B748Ch */ case    3:  		/* addi R30, R30, 4 */
		/* 820B748Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B748Ch case    3:*/		return 0x820B7490;
		  /* 820B7490h */ case    4:  		/* bc 4, CR0_EQ, -132 */
		/* 820B7490h case    4:*/		if ( !regs.CR[0].eq ) { return 0x820B740C;  }
		/* 820B7490h case    4:*/		return 0x820B7494;
	}
	return 0x820B7494;
} // Block from 820B7480h-820B7494h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B7494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7494);
		  /* 820B7494h */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 820B7494h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820B7494h case    0:*/		return 0x820B7498;
		  /* 820B7498h */ case    1:  		/* li R26, -1 */
		/* 820B7498h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0xFFFFFFFF);
		/* 820B7498h case    1:*/		return 0x820B749C;
		  /* 820B749Ch */ case    2:  		/* li R10, 1 */
		/* 820B749Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820B749Ch case    2:*/		return 0x820B74A0;
		  /* 820B74A0h */ case    3:  		/* mr R17, R24 */
		/* 820B74A0h case    3:*/		regs.R17 = regs.R24;
		/* 820B74A0h case    3:*/		return 0x820B74A4;
		  /* 820B74A4h */ case    4:  		/* stw R26, <#[R1 + 160]> */
		/* 820B74A4h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B74A4h case    4:*/		return 0x820B74A8;
		  /* 820B74A8h */ case    5:  		/* stw R10, <#[R1 + 148]> */
		/* 820B74A8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 820B74A8h case    5:*/		return 0x820B74AC;
		  /* 820B74ACh */ case    6:  		/* mr R16, R24 */
		/* 820B74ACh case    6:*/		regs.R16 = regs.R24;
		/* 820B74ACh case    6:*/		return 0x820B74B0;
		  /* 820B74B0h */ case    7:  		/* stw R26, <#[R1 + 164]> */
		/* 820B74B0h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B74B0h case    7:*/		return 0x820B74B4;
		  /* 820B74B4h */ case    8:  		/* stw R11, <#[R1 + 156]> */
		/* 820B74B4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 820B74B4h case    8:*/		return 0x820B74B8;
		  /* 820B74B8h */ case    9:  		/* stw R11, <#[R1 + 144]> */
		/* 820B74B8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820B74B8h case    9:*/		return 0x820B74BC;
		  /* 820B74BCh */ case   10:  		/* lis R11, -32256 */
		/* 820B74BCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820B74BCh case   10:*/		return 0x820B74C0;
		  /* 820B74C0h */ case   11:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 820B74C0h case   11:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 820B74C0h case   11:*/		return 0x820B74C4;
		  /* 820B74C4h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B74C4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B74C4h case   12:*/		return 0x820B74C8;
		  /* 820B74C8h */ case   13:  		/* mr R5, R15 */
		/* 820B74C8h case   13:*/		regs.R5 = regs.R15;
		/* 820B74C8h case   13:*/		return 0x820B74CC;
		  /* 820B74CCh */ case   14:  		/* mr R4, R25 */
		/* 820B74CCh case   14:*/		regs.R4 = regs.R25;
		/* 820B74CCh case   14:*/		return 0x820B74D0;
		  /* 820B74D0h */ case   15:  		/* lwz R3, <#[R1 + 132]> */
		/* 820B74D0h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 820B74D0h case   15:*/		return 0x820B74D4;
		  /* 820B74D4h */ case   16:  		/* lwz R23, <#[R11 + 8]> */
		/* 820B74D4h case   16:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x00000008) );
		/* 820B74D4h case   16:*/		return 0x820B74D8;
		  /* 820B74D8h */ case   17:  		/* lwz R22, <#[R11 + 12]> */
		/* 820B74D8h case   17:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B74D8h case   17:*/		return 0x820B74DC;
		  /* 820B74DCh */ case   18:  		/* bl -154412 */
		/* 820B74DCh case   18:*/		regs.LR = 0x820B74E0; return 0x820919B0;
		/* 820B74DCh case   18:*/		return 0x820B74E0;
		  /* 820B74E0h */ case   19:  		/* rlwinm R5, R20, 4, 0, 27 */
		/* 820B74E0h case   19:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R5,regs.R20);
		/* 820B74E0h case   19:*/		return 0x820B74E4;
		  /* 820B74E4h */ case   20:  		/* lwz R3, <#[R1 + 136]> */
		/* 820B74E4h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000088) );
		/* 820B74E4h case   20:*/		return 0x820B74E8;
		  /* 820B74E8h */ case   21:  		/* mr R4, R21 */
		/* 820B74E8h case   21:*/		regs.R4 = regs.R21;
		/* 820B74E8h case   21:*/		return 0x820B74EC;
		  /* 820B74ECh */ case   22:  		/* bl -154428 */
		/* 820B74ECh case   22:*/		regs.LR = 0x820B74F0; return 0x820919B0;
		/* 820B74ECh case   22:*/		return 0x820B74F0;
		  /* 820B74F0h */ case   23:  		/* mr R5, R15 */
		/* 820B74F0h case   23:*/		regs.R5 = regs.R15;
		/* 820B74F0h case   23:*/		return 0x820B74F4;
		  /* 820B74F4h */ case   24:  		/* mr R4, R19 */
		/* 820B74F4h case   24:*/		regs.R4 = regs.R19;
		/* 820B74F4h case   24:*/		return 0x820B74F8;
		  /* 820B74F8h */ case   25:  		/* lwz R3, <#[R1 + 140]> */
		/* 820B74F8h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B74F8h case   25:*/		return 0x820B74FC;
		  /* 820B74FCh */ case   26:  		/* bl -154444 */
		/* 820B74FCh case   26:*/		regs.LR = 0x820B7500; return 0x820919B0;
		/* 820B74FCh case   26:*/		return 0x820B7500;
		  /* 820B7500h */ case   27:  		/* cmplwi CR6, R14, 0 */
		/* 820B7500h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 820B7500h case   27:*/		return 0x820B7504;
		  /* 820B7504h */ case   28:  		/* stw R26, <#[R1 + 128]> */
		/* 820B7504h case   28:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000080) );
		/* 820B7504h case   28:*/		return 0x820B7508;
		  /* 820B7508h */ case   29:  		/* bc 12, CR6_EQ, 224 */
		/* 820B7508h case   29:*/		if ( regs.CR[6].eq ) { return 0x820B75E8;  }
		/* 820B7508h case   29:*/		return 0x820B750C;
		  /* 820B750Ch */ case   30:  		/* stw R25, <#[R31 + 24]> */
		/* 820B750Ch case   30:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000018) );
		/* 820B750Ch case   30:*/		return 0x820B7510;
		  /* 820B7510h */ case   31:  		/* li R6, 0 */
		/* 820B7510h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B7510h case   31:*/		return 0x820B7514;
		  /* 820B7514h */ case   32:  		/* stw R24, <#[R31 + 80]> */
		/* 820B7514h case   32:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 820B7514h case   32:*/		return 0x820B7518;
		  /* 820B7518h */ case   33:  		/* addi R5, R1, 128 */
		/* 820B7518h case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820B7518h case   33:*/		return 0x820B751C;
		  /* 820B751Ch */ case   34:  		/* stw R26, <#[R1 + 128]> */
		/* 820B751Ch case   34:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000080) );
		/* 820B751Ch case   34:*/		return 0x820B7520;
		  /* 820B7520h */ case   35:  		/* mr R4, R14 */
		/* 820B7520h case   35:*/		regs.R4 = regs.R14;
		/* 820B7520h case   35:*/		return 0x820B7524;
		  /* 820B7524h */ case   36:  		/* stw R24, <#[R31 + 84]> */
		/* 820B7524h case   36:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000054) );
		/* 820B7524h case   36:*/		return 0x820B7528;
		  /* 820B7528h */ case   37:  		/* mr R3, R31 */
		/* 820B7528h case   37:*/		regs.R3 = regs.R31;
		/* 820B7528h case   37:*/		return 0x820B752C;
		  /* 820B752Ch */ case   38:  		/* bl 39356 */
		/* 820B752Ch case   38:*/		regs.LR = 0x820B7530; return 0x820C0EE8;
		/* 820B752Ch case   38:*/		return 0x820B7530;
		  /* 820B7530h */ case   39:  		/* or. R30, R3, R3 */
		/* 820B7530h case   39:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B7530h case   39:*/		return 0x820B7534;
		  /* 820B7534h */ case   40:  		/* bc 12, CR0_LT, 1276 */
		/* 820B7534h case   40:*/		if ( regs.CR[0].lt ) { return 0x820B7A30;  }
		/* 820B7534h case   40:*/		return 0x820B7538;
		  /* 820B7538h */ case   41:  		/* lis R5, 8272 */
		/* 820B7538h case   41:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B7538h case   41:*/		return 0x820B753C;
		  /* 820B753Ch */ case   42:  		/* li R9, 23 */
		/* 820B753Ch case   42:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B753Ch case   42:*/		return 0x820B7540;
		  /* 820B7540h */ case   43:  		/* addi R8, R1, 128 */
		/* 820B7540h case   43:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820B7540h case   43:*/		return 0x820B7544;
		  /* 820B7544h */ case   44:  		/* addi R7, R1, 156 */
		/* 820B7544h case   44:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x9C);
		/* 820B7544h case   44:*/		return 0x820B7548;
		  /* 820B7548h */ case   45:  		/* addi R6, R1, 156 */
		/* 820B7548h case   45:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x9C);
		/* 820B7548h case   45:*/		return 0x820B754C;
		  /* 820B754Ch */ case   46:  		/* ori R5, R5, 1 */
		/* 820B754Ch case   46:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B754Ch case   46:*/		return 0x820B7550;
		  /* 820B7550h */ case   47:  		/* mr R4, R14 */
		/* 820B7550h case   47:*/		regs.R4 = regs.R14;
		/* 820B7550h case   47:*/		return 0x820B7554;
		  /* 820B7554h */ case   48:  		/* mr R3, R31 */
		/* 820B7554h case   48:*/		regs.R3 = regs.R31;
		/* 820B7554h case   48:*/		return 0x820B7558;
		  /* 820B7558h */ case   49:  		/* bl -27216 */
		/* 820B7558h case   49:*/		regs.LR = 0x820B755C; return 0x820B0B08;
		/* 820B7558h case   49:*/		return 0x820B755C;
		  /* 820B755Ch */ case   50:  		/* or. R30, R3, R3 */
		/* 820B755Ch case   50:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B755Ch case   50:*/		return 0x820B7560;
		  /* 820B7560h */ case   51:  		/* bc 12, CR0_LT, 1232 */
		/* 820B7560h case   51:*/		if ( regs.CR[0].lt ) { return 0x820B7A30;  }
		/* 820B7560h case   51:*/		return 0x820B7564;
		  /* 820B7564h */ case   52:  		/* stw R18, <#[R31 + 24]> */
		/* 820B7564h case   52:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000018) );
		/* 820B7564h case   52:*/		return 0x820B7568;
		  /* 820B7568h */ case   53:  		/* li R6, 0 */
		/* 820B7568h case   53:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B7568h case   53:*/		return 0x820B756C;
		  /* 820B756Ch */ case   54:  		/* stw R24, <#[R31 + 80]> */
		/* 820B756Ch case   54:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 820B756Ch case   54:*/		return 0x820B7570;
		  /* 820B7570h */ case   55:  		/* addi R5, R1, 128 */
		/* 820B7570h case   55:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 820B7570h case   55:*/		return 0x820B7574;
		  /* 820B7574h */ case   56:  		/* stw R24, <#[R31 + 84]> */
		/* 820B7574h case   56:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000054) );
		/* 820B7574h case   56:*/		return 0x820B7578;
		  /* 820B7578h */ case   57:  		/* mr R4, R14 */
		/* 820B7578h case   57:*/		regs.R4 = regs.R14;
		/* 820B7578h case   57:*/		return 0x820B757C;
		  /* 820B757Ch */ case   58:  		/* stw R26, <#[R1 + 128]> */
		/* 820B757Ch case   58:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000080) );
		/* 820B757Ch case   58:*/		return 0x820B7580;
		  /* 820B7580h */ case   59:  		/* mr R3, R31 */
		/* 820B7580h case   59:*/		regs.R3 = regs.R31;
		/* 820B7580h case   59:*/		return 0x820B7584;
		  /* 820B7584h */ case   60:  		/* bl 39268 */
		/* 820B7584h case   60:*/		regs.LR = 0x820B7588; return 0x820C0EE8;
		/* 820B7584h case   60:*/		return 0x820B7588;
		  /* 820B7588h */ case   61:  		/* or. R30, R3, R3 */
		/* 820B7588h case   61:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B7588h case   61:*/		return 0x820B758C;
		  /* 820B758Ch */ case   62:  		/* bc 12, CR0_LT, 1188 */
		/* 820B758Ch case   62:*/		if ( regs.CR[0].lt ) { return 0x820B7A30;  }
		/* 820B758Ch case   62:*/		return 0x820B7590;
		  /* 820B7590h */ case   63:  		/* lis R5, 8272 */
		/* 820B7590h case   63:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B7590h case   63:*/		return 0x820B7594;
		  /* 820B7594h */ case   64:  		/* li R9, 23 */
		/* 820B7594h case   64:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B7594h case   64:*/		return 0x820B7598;
		  /* 820B7598h */ case   65:  		/* addi R8, R1, 128 */
		/* 820B7598h case   65:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820B7598h case   65:*/		return 0x820B759C;
		  /* 820B759Ch */ case   66:  		/* addi R7, R1, 144 */
		/* 820B759Ch case   66:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x90);
		/* 820B759Ch case   66:*/		return 0x820B75A0;
		  /* 820B75A0h */ case   67:  		/* addi R6, R1, 144 */
		/* 820B75A0h case   67:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 820B75A0h case   67:*/		return 0x820B75A4;
		  /* 820B75A4h */ case   68:  		/* ori R5, R5, 1 */
		/* 820B75A4h case   68:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B75A4h case   68:*/		return 0x820B75A8;
		  /* 820B75A8h */ case   69:  		/* mr R4, R14 */
		/* 820B75A8h case   69:*/		regs.R4 = regs.R14;
		/* 820B75A8h case   69:*/		return 0x820B75AC;
		  /* 820B75ACh */ case   70:  		/* mr R3, R31 */
		/* 820B75ACh case   70:*/		regs.R3 = regs.R31;
		/* 820B75ACh case   70:*/		return 0x820B75B0;
		  /* 820B75B0h */ case   71:  		/* bl -27304 */
		/* 820B75B0h case   71:*/		regs.LR = 0x820B75B4; return 0x820B0B08;
		/* 820B75B0h case   71:*/		return 0x820B75B4;
		  /* 820B75B4h */ case   72:  		/* or. R30, R3, R3 */
		/* 820B75B4h case   72:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B75B4h case   72:*/		return 0x820B75B8;
		  /* 820B75B8h */ case   73:  		/* bc 12, CR0_LT, 1144 */
		/* 820B75B8h case   73:*/		if ( regs.CR[0].lt ) { return 0x820B7A30;  }
		/* 820B75B8h case   73:*/		return 0x820B75BC;
		  /* 820B75BCh */ case   74:  		/* lwz R11, <#[R31 + 88]> */
		/* 820B75BCh case   74:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 820B75BCh case   74:*/		return 0x820B75C0;
		  /* 820B75C0h */ case   75:  		/* cmpwi CR6, R11, 0 */
		/* 820B75C0h case   75:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B75C0h case   75:*/		return 0x820B75C4;
		  /* 820B75C4h */ case   76:  		/* bc 4, CR6_EQ, 28 */
		/* 820B75C4h case   76:*/		if ( !regs.CR[6].eq ) { return 0x820B75E0;  }
		/* 820B75C4h case   76:*/		return 0x820B75C8;
		  /* 820B75C8h */ case   77:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B75C8h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B75C8h case   77:*/		return 0x820B75CC;
		  /* 820B75CCh */ case   78:  		/* cmpwi CR6, R11, 0 */
		/* 820B75CCh case   78:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B75CCh case   78:*/		return 0x820B75D0;
		  /* 820B75D0h */ case   79:  		/* bc 4, CR6_EQ, 808 */
		/* 820B75D0h case   79:*/		if ( !regs.CR[6].eq ) { return 0x820B78F8;  }
		/* 820B75D0h case   79:*/		return 0x820B75D4;
		  /* 820B75D4h */ case   80:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B75D4h case   80:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B75D4h case   80:*/		return 0x820B75D8;
		  /* 820B75D8h */ case   81:  		/* cmpwi CR6, R11, 0 */
		/* 820B75D8h case   81:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B75D8h case   81:*/		return 0x820B75DC;
		  /* 820B75DCh */ case   82:  		/* bc 4, CR6_EQ, 796 */
		/* 820B75DCh case   82:*/		if ( !regs.CR[6].eq ) { return 0x820B78F8;  }
		/* 820B75DCh case   82:*/		return 0x820B75E0;
	}
	return 0x820B75E0;
} // Block from 820B7494h-820B75E0h (83 instructions)

//////////////////////////////////////////////////////
// Block at 820B75E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B75E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B75E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B75E0);
		  /* 820B75E0h */ case    0:  		/* stw R24, <#[R31 + 80]> */
		/* 820B75E0h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 820B75E0h case    0:*/		return 0x820B75E4;
		  /* 820B75E4h */ case    1:  		/* stw R24, <#[R31 + 84]> */
		/* 820B75E4h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000054) );
		/* 820B75E4h case    1:*/		return 0x820B75E8;
	}
	return 0x820B75E8;
} // Block from 820B75E0h-820B75E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B75E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B75E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B75E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B75E8);
		  /* 820B75E8h */ case    0:  		/* addi R5, R1, 208 */
		/* 820B75E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 820B75E8h case    0:*/		return 0x820B75EC;
		  /* 820B75ECh */ case    1:  		/* lwz R4, <#[R1 + 144]> */
		/* 820B75ECh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 820B75ECh case    1:*/		return 0x820B75F0;
		  /* 820B75F0h */ case    2:  		/* mr R3, R31 */
		/* 820B75F0h case    2:*/		regs.R3 = regs.R31;
		/* 820B75F0h case    2:*/		return 0x820B75F4;
		  /* 820B75F4h */ case    3:  		/* bl -35580 */
		/* 820B75F4h case    3:*/		regs.LR = 0x820B75F8; return 0x820AEAF8;
		/* 820B75F4h case    3:*/		return 0x820B75F8;
		  /* 820B75F8h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820B75F8h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B75F8h case    4:*/		return 0x820B75FC;
		  /* 820B75FCh */ case    5:  		/* bc 4, CR0_LT, 24 */
		/* 820B75FCh case    5:*/		if ( !regs.CR[0].lt ) { return 0x820B7614;  }
		/* 820B75FCh case    5:*/		return 0x820B7600;
		  /* 820B7600h */ case    6:  		/* lfd FR30, <#[R31 + 176]> */
		/* 820B7600h case    6:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B7600h case    6:*/		return 0x820B7604;
		  /* 820B7604h */ case    7:  		/* lfd FR29, <#[R31 + 168]> */
		/* 820B7604h case    7:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B7604h case    7:*/		return 0x820B7608;
		  /* 820B7608h */ case    8:  		/* stfd FR30, <#[R1 + 208]> */
		/* 820B7608h case    8:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0x000000D0) );
		/* 820B7608h case    8:*/		return 0x820B760C;
		  /* 820B760Ch */ case    9:  		/* stfd FR29, <#[R1 + 216]> */
		/* 820B760Ch case    9:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0x000000D8) );
		/* 820B760Ch case    9:*/		return 0x820B7610;
		  /* 820B7610h */ case   10:  		/* b 12 */
		/* 820B7610h case   10:*/		return 0x820B761C;
		/* 820B7610h case   10:*/		return 0x820B7614;
	}
	return 0x820B7614;
} // Block from 820B75E8h-820B7614h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B7614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7614);
		  /* 820B7614h */ case    0:  		/* lfd FR29, <#[R1 + 216]> */
		/* 820B7614h case    0:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0x000000D8) );
		/* 820B7614h case    0:*/		return 0x820B7618;
		  /* 820B7618h */ case    1:  		/* lfd FR30, <#[R1 + 208]> */
		/* 820B7618h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0x000000D0) );
		/* 820B7618h case    1:*/		return 0x820B761C;
	}
	return 0x820B761C;
} // Block from 820B7614h-820B761Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B761Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B761C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B761C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B761C);
		  /* 820B761Ch */ case    0:  		/* fcmpu CR6, FR30, FR31 */
		/* 820B761Ch case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR31);
		/* 820B761Ch case    0:*/		return 0x820B7620;
		  /* 820B7620h */ case    1:  		/* bc 12, CR6_GT, 12 */
		/* 820B7620h case    1:*/		if ( regs.CR[6].gt ) { return 0x820B762C;  }
		/* 820B7620h case    1:*/		return 0x820B7624;
		  /* 820B7624h */ case    2:  		/* fcmpu CR6, FR29, FR31 */
		/* 820B7624h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR29,regs.FR31);
		/* 820B7624h case    2:*/		return 0x820B7628;
		  /* 820B7628h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 820B7628h case    3:*/		if ( !regs.CR[6].lt ) { return 0x820B7630;  }
		/* 820B7628h case    3:*/		return 0x820B762C;
	}
	return 0x820B762C;
} // Block from 820B761Ch-820B762Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B762Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B762C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B762C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B762C);
		  /* 820B762Ch */ case    0:  		/* li R17, 1 */
		/* 820B762Ch case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 820B762Ch case    0:*/		return 0x820B7630;
	}
	return 0x820B7630;
} // Block from 820B762Ch-820B7630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B7630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7630);
		  /* 820B7630h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 820B7630h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820B7630h case    0:*/		return 0x820B7634;
		  /* 820B7634h */ case    1:  		/* bc 12, CR6_EQ, 224 */
		/* 820B7634h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B7714;  }
		/* 820B7634h case    1:*/		return 0x820B7638;
		  /* 820B7638h */ case    2:  		/* mr R30, R18 */
		/* 820B7638h case    2:*/		regs.R30 = regs.R18;
		/* 820B7638h case    2:*/		return 0x820B763C;
		  /* 820B763Ch */ case    3:  		/* mr R29, R21 */
		/* 820B763Ch case    3:*/		regs.R29 = regs.R21;
		/* 820B763Ch case    3:*/		return 0x820B7640;
		  /* 820B7640h */ case    4:  		/* subf R28, R18, R19 */
		/* 820B7640h case    4:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R18,regs.R19);
		/* 820B7640h case    4:*/		return 0x820B7644;
		  /* 820B7644h */ case    5:  		/* mr R27, R20 */
		/* 820B7644h case    5:*/		regs.R27 = regs.R20;
		/* 820B7644h case    5:*/		return 0x820B7648;
		  /* 820B7648h */ case    6:  		/* lwz R4, <#[R30]> */
		/* 820B7648h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 820B7648h case    6:*/		return 0x820B764C;
		  /* 820B764Ch */ case    7:  		/* cmpwi CR6, R4, -1 */
		/* 820B764Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 820B764Ch case    7:*/		return 0x820B7650;
		  /* 820B7650h */ case    8:  		/* bc 12, CR6_EQ, 180 */
		/* 820B7650h case    8:*/		if ( regs.CR[6].eq ) { return 0x820B7704;  }
		/* 820B7650h case    8:*/		return 0x820B7654;
		  /* 820B7654h */ case    9:  		/* addi R5, R1, 192 */
		/* 820B7654h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820B7654h case    9:*/		return 0x820B7658;
		  /* 820B7658h */ case   10:  		/* mr R3, R31 */
		/* 820B7658h case   10:*/		regs.R3 = regs.R31;
		/* 820B7658h case   10:*/		return 0x820B765C;
		  /* 820B765Ch */ case   11:  		/* bl -35684 */
		/* 820B765Ch case   11:*/		regs.LR = 0x820B7660; return 0x820AEAF8;
		/* 820B765Ch case   11:*/		return 0x820B7660;
		  /* 820B7660h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820B7660h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B7660h case   12:*/		return 0x820B7664;
		  /* 820B7664h */ case   13:  		/* bc 4, CR0_LT, 24 */
		/* 820B7664h case   13:*/		if ( !regs.CR[0].lt ) { return 0x820B767C;  }
		/* 820B7664h case   13:*/		return 0x820B7668;
		  /* 820B7668h */ case   14:  		/* lfd FR0, <#[R31 + 168]> */
		/* 820B7668h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x000000A8) );
		/* 820B7668h case   14:*/		return 0x820B766C;
		  /* 820B766Ch */ case   15:  		/* lfd FR13, <#[R31 + 176]> */
		/* 820B766Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R31 + 0x000000B0) );
		/* 820B766Ch case   15:*/		return 0x820B7670;
		  /* 820B7670h */ case   16:  		/* stfd FR0, <#[R1 + 192]> */
		/* 820B7670h case   16:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820B7670h case   16:*/		return 0x820B7674;
		  /* 820B7674h */ case   17:  		/* stfd FR13, <#[R1 + 200]> */
		/* 820B7674h case   17:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x000000C8) );
		/* 820B7674h case   17:*/		return 0x820B7678;
		  /* 820B7678h */ case   18:  		/* b 12 */
		/* 820B7678h case   18:*/		return 0x820B7684;
		/* 820B7678h case   18:*/		return 0x820B767C;
	}
	return 0x820B767C;
} // Block from 820B7630h-820B767Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 820B767Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B767C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B767C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B767C);
		  /* 820B767Ch */ case    0:  		/* lfd FR13, <#[R1 + 200]> */
		/* 820B767Ch case    0:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000000C8) );
		/* 820B767Ch case    0:*/		return 0x820B7680;
		  /* 820B7680h */ case    1:  		/* lfd FR0, <#[R1 + 192]> */
		/* 820B7680h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820B7680h case    1:*/		return 0x820B7684;
	}
	return 0x820B7684;
} // Block from 820B767Ch-820B7684h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B7684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7684);
		  /* 820B7684h */ case    0:  		/* cmpwi CR6, R17, 0 */
		/* 820B7684h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R17,0x00000000);
		/* 820B7684h case    0:*/		return 0x820B7688;
		  /* 820B7688h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 820B7688h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B76C0;  }
		/* 820B7688h case    1:*/		return 0x820B768C;
		  /* 820B768Ch */ case    2:  		/* addi R11, R1, 192 */
		/* 820B768Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC0);
		/* 820B768Ch case    2:*/		return 0x820B7690;
		  /* 820B7690h */ case    3:  		/* ld R10, <#[R11 + 8]> */
		/* 820B7690h case    3:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820B7690h case    3:*/		return 0x820B7694;
		  /* 820B7694h */ case    4:  		/* ld R11, <#[R11]> */
		/* 820B7694h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B7694h case    4:*/		return 0x820B7698;
		  /* 820B7698h */ case    5:  		/* std R10, <#[R29 + 8]> */
		/* 820B7698h case    5:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 820B7698h case    5:*/		return 0x820B769C;
		  /* 820B769Ch */ case    6:  		/* std R11, <#[R29]> */
		/* 820B769Ch case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820B769Ch case    6:*/		return 0x820B76A0;
		  /* 820B76A0h */ case    7:  		/* lwz R10, <#[R31 + 8]> */
		/* 820B76A0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820B76A0h case    7:*/		return 0x820B76A4;
		  /* 820B76A4h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 820B76A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820B76A4h case    8:*/		return 0x820B76A8;
		  /* 820B76A8h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B76A8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B76A8h case    9:*/		return 0x820B76AC;
		  /* 820B76ACh */ case   10:  		/* lwz R10, <#[R10 + 20]> */
		/* 820B76ACh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820B76ACh case   10:*/		return 0x820B76B0;
		  /* 820B76B0h */ case   11:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820B76B0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820B76B0h case   11:*/		return 0x820B76B4;
		  /* 820B76B4h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 820B76B4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B76B4h case   12:*/		return 0x820B76B8;
		  /* 820B76B8h */ case   13:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 820B76B8h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 820B76B8h case   13:*/		return 0x820B76BC;
		  /* 820B76BCh */ case   14:  		/* b 68 */
		/* 820B76BCh case   14:*/		return 0x820B7700;
		/* 820B76BCh case   14:*/		return 0x820B76C0;
	}
	return 0x820B76C0;
} // Block from 820B7684h-820B76C0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820B76C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B76C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B76C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B76C0);
		  /* 820B76C0h */ case    0:  		/* lfd FR12, <#[R29]> */
		/* 820B76C0h case    0:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R29 + 0x00000000) );
		/* 820B76C0h case    0:*/		return 0x820B76C4;
		  /* 820B76C4h */ case    1:  		/* fcmpu CR6, FR12, FR0 */
		/* 820B76C4h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR0);
		/* 820B76C4h case    1:*/		return 0x820B76C8;
		  /* 820B76C8h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 820B76C8h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820B76D0;  }
		/* 820B76C8h case    2:*/		return 0x820B76CC;
		  /* 820B76CCh */ case    3:  		/* stfd FR0, <#[R29]> */
		/* 820B76CCh case    3:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000000) );
		/* 820B76CCh case    3:*/		return 0x820B76D0;
	}
	return 0x820B76D0;
} // Block from 820B76C0h-820B76D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B76D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B76D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B76D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B76D0);
		  /* 820B76D0h */ case    0:  		/* lfd FR0, <#[R29 + 8]> */
		/* 820B76D0h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R29 + 0x00000008) );
		/* 820B76D0h case    0:*/		return 0x820B76D4;
		  /* 820B76D4h */ case    1:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B76D4h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B76D4h case    1:*/		return 0x820B76D8;
		  /* 820B76D8h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 820B76D8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820B76E0;  }
		/* 820B76D8h case    2:*/		return 0x820B76DC;
		  /* 820B76DCh */ case    3:  		/* stfd FR13, <#[R29 + 8]> */
		/* 820B76DCh case    3:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R29 + 0x00000008) );
		/* 820B76DCh case    3:*/		return 0x820B76E0;
	}
	return 0x820B76E0;
} // Block from 820B76D0h-820B76E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B76E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B76E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B76E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B76E0);
		  /* 820B76E0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820B76E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820B76E0h case    0:*/		return 0x820B76E4;
		  /* 820B76E4h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 820B76E4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 820B76E4h case    1:*/		return 0x820B76E8;
		  /* 820B76E8h */ case    2:  		/* lwzx R9, <#[R28 + R30]> */
		/* 820B76E8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R30 + 0x00000000) );
		/* 820B76E8h case    2:*/		return 0x820B76EC;
		  /* 820B76ECh */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B76ECh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B76ECh case    3:*/		return 0x820B76F0;
		  /* 820B76F0h */ case    4:  		/* lwz R11, <#[R11 + 20]> */
		/* 820B76F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820B76F0h case    4:*/		return 0x820B76F4;
		  /* 820B76F4h */ case    5:  		/* lwzx R11, <#[R10 + R11]> */
		/* 820B76F4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820B76F4h case    5:*/		return 0x820B76F8;
		  /* 820B76F8h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 820B76F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B76F8h case    6:*/		return 0x820B76FC;
		  /* 820B76FCh */ case    7:  		/* and R11, R11, R9 */
		/* 820B76FCh case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820B76FCh case    7:*/		return 0x820B7700;
	}
	return 0x820B7700;
} // Block from 820B76E0h-820B7700h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B7700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7700);
		  /* 820B7700h */ case    0:  		/* stwx R11, <#[R28 + R30]> */
		/* 820B7700h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + regs.R30 + 0x00000000) );
		/* 820B7700h case    0:*/		return 0x820B7704;
	}
	return 0x820B7704;
} // Block from 820B7700h-820B7704h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B7704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7704);
		  /* 820B7704h */ case    0:  		/* addic. R27, R27, -1 */
		/* 820B7704h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 820B7704h case    0:*/		return 0x820B7708;
		  /* 820B7708h */ case    1:  		/* addi R29, R29, 16 */
		/* 820B7708h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x10);
		/* 820B7708h case    1:*/		return 0x820B770C;
		  /* 820B770Ch */ case    2:  		/* addi R30, R30, 4 */
		/* 820B770Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820B770Ch case    2:*/		return 0x820B7710;
		  /* 820B7710h */ case    3:  		/* bc 4, CR0_EQ, -200 */
		/* 820B7710h case    3:*/		if ( !regs.CR[0].eq ) { return 0x820B7648;  }
		/* 820B7710h case    3:*/		return 0x820B7714;
	}
	return 0x820B7714;
} // Block from 820B7704h-820B7714h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B7714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7714);
		  /* 820B7714h */ case    0:  		/* fcmpu CR6, FR30, FR31 */
		/* 820B7714h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR31);
		/* 820B7714h case    0:*/		return 0x820B7718;
		  /* 820B7718h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820B7718h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B7724;  }
		/* 820B7718h case    1:*/		return 0x820B771C;
		  /* 820B771Ch */ case    2:  		/* fcmpu CR6, FR29, FR31 */
		/* 820B771Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR29,regs.FR31);
		/* 820B771Ch case    2:*/		return 0x820B7720;
		  /* 820B7720h */ case    3:  		/* bc 12, CR6_EQ, 472 */
		/* 820B7720h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B78F8;  }
		/* 820B7720h case    3:*/		return 0x820B7724;
	}
	return 0x820B7724;
} // Block from 820B7714h-820B7724h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B7724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7724);
		  /* 820B7724h */ case    0:  		/* fcmpu CR6, FR30, FR31 */
		/* 820B7724h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR31);
		/* 820B7724h case    0:*/		return 0x820B7728;
		  /* 820B7728h */ case    1:  		/* bc 12, CR6_GT, 20 */
		/* 820B7728h case    1:*/		if ( regs.CR[6].gt ) { return 0x820B773C;  }
		/* 820B7728h case    1:*/		return 0x820B772C;
		  /* 820B772Ch */ case    2:  		/* fcmpu CR6, FR29, FR31 */
		/* 820B772Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR29,regs.FR31);
		/* 820B772Ch case    2:*/		return 0x820B7730;
		  /* 820B7730h */ case    3:  		/* bc 12, CR6_LT, 12 */
		/* 820B7730h case    3:*/		if ( regs.CR[6].lt ) { return 0x820B773C;  }
		/* 820B7730h case    3:*/		return 0x820B7734;
		  /* 820B7734h */ case    4:  		/* li R11, 1 */
		/* 820B7734h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820B7734h case    4:*/		return 0x820B7738;
		  /* 820B7738h */ case    5:  		/* stw R11, <#[R31 + 88]> */
		/* 820B7738h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 820B7738h case    5:*/		return 0x820B773C;
	}
	return 0x820B773C;
} // Block from 820B7724h-820B773Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820B773Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B773C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B773C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B773C);
		  /* 820B773Ch */ case    0:  		/* lwz R11, <#[R1 + 148]> */
		/* 820B773Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820B773Ch case    0:*/		return 0x820B7740;
		  /* 820B7740h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820B7740h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B7740h case    1:*/		return 0x820B7744;
		  /* 820B7744h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 820B7744h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B7780;  }
		/* 820B7744h case    2:*/		return 0x820B7748;
		  /* 820B7748h */ case    3:  		/* cmpwi CR6, R17, 0 */
		/* 820B7748h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R17,0x00000000);
		/* 820B7748h case    3:*/		return 0x820B774C;
		  /* 820B774Ch */ case    4:  		/* bc 4, CR6_EQ, 48 */
		/* 820B774Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x820B777C;  }
		/* 820B774Ch case    4:*/		return 0x820B7750;
		  /* 820B7750h */ case    5:  		/* addi R7, R1, 164 */
		/* 820B7750h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA4);
		/* 820B7750h case    5:*/		return 0x820B7754;
		  /* 820B7754h */ case    6:  		/* lwz R4, <#[R1 + 128]> */
		/* 820B7754h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 820B7754h case    6:*/		return 0x820B7758;
		  /* 820B7758h */ case    7:  		/* addi R6, R1, 160 */
		/* 820B7758h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 820B7758h case    7:*/		return 0x820B775C;
		  /* 820B775Ch */ case    8:  		/* mr R5, R16 */
		/* 820B775Ch case    8:*/		regs.R5 = regs.R16;
		/* 820B775Ch case    8:*/		return 0x820B7760;
		  /* 820B7760h */ case    9:  		/* mr R3, R31 */
		/* 820B7760h case    9:*/		regs.R3 = regs.R31;
		/* 820B7760h case    9:*/		return 0x820B7764;
		  /* 820B7764h */ case   10:  		/* bl -11228 */
		/* 820B7764h case   10:*/		regs.LR = 0x820B7768; return 0x820B4B88;
		/* 820B7764h case   10:*/		return 0x820B7768;
		  /* 820B7768h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820B7768h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B7768h case   11:*/		return 0x820B776C;
		  /* 820B776Ch */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 820B776Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x820B777C;  }
		/* 820B776Ch case   12:*/		return 0x820B7770;
		  /* 820B7770h */ case   13:  		/* li R11, 1 */
		/* 820B7770h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820B7770h case   13:*/		return 0x820B7774;
		  /* 820B7774h */ case   14:  		/* stw R11, <#[R1 + 148]> */
		/* 820B7774h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820B7774h case   14:*/		return 0x820B7778;
		  /* 820B7778h */ case   15:  		/* b 8 */
		/* 820B7778h case   15:*/		return 0x820B7780;
		/* 820B7778h case   15:*/		return 0x820B777C;
	}
	return 0x820B777C;
} // Block from 820B773Ch-820B777Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 820B777Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B777C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B777C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B777C);
		  /* 820B777Ch */ case    0:  		/* stw R24, <#[R1 + 148]> */
		/* 820B777Ch case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000094) );
		/* 820B777Ch case    0:*/		return 0x820B7780;
	}
	return 0x820B7780;
} // Block from 820B777Ch-820B7780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B7780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7780);
		  /* 820B7780h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 820B7780h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820B7780h case    0:*/		return 0x820B7784;
		  /* 820B7784h */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 820B7784h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B77FC;  }
		/* 820B7784h case    1:*/		return 0x820B7788;
		  /* 820B7788h */ case    2:  		/* mr R10, R25 */
		/* 820B7788h case    2:*/		regs.R10 = regs.R25;
		/* 820B7788h case    2:*/		return 0x820B778C;
		  /* 820B778Ch */ case    3:  		/* mtspr CTR, R20 */
		/* 820B778Ch case    3:*/		regs.CTR = regs.R20;
		/* 820B778Ch case    3:*/		return 0x820B7790;
		  /* 820B7790h */ case    4:  		/* subf R8, R25, R18 */
		/* 820B7790h case    4:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R25,regs.R18);
		/* 820B7790h case    4:*/		return 0x820B7794;
		  /* 820B7794h */ case    5:  		/* lwz R11, <#[R10]> */
		/* 820B7794h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820B7794h case    5:*/		return 0x820B7798;
		  /* 820B7798h */ case    6:  		/* lwzx R9, <#[R8 + R10]> */
		/* 820B7798h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820B7798h case    6:*/		return 0x820B779C;
		  /* 820B779Ch */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 820B779Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820B779Ch case    7:*/		return 0x820B77A0;
		  /* 820B77A0h */ case    8:  		/* bc 12, CR6_EQ, 84 */
		/* 820B77A0h case    8:*/		if ( regs.CR[6].eq ) { return 0x820B77F4;  }
		/* 820B77A0h case    8:*/		return 0x820B77A4;
		  /* 820B77A4h */ case    9:  		/* cmpwi CR6, R11, -1 */
		/* 820B77A4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820B77A4h case    9:*/		return 0x820B77A8;
		  /* 820B77A8h */ case   10:  		/* bc 12, CR6_EQ, 76 */
		/* 820B77A8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820B77F4;  }
		/* 820B77A8h case   10:*/		return 0x820B77AC;
		  /* 820B77ACh */ case   11:  		/* lwz R7, <#[R31 + 8]> */
		/* 820B77ACh case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 820B77ACh case   11:*/		return 0x820B77B0;
		  /* 820B77B0h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B77B0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B77B0h case   12:*/		return 0x820B77B4;
		  /* 820B77B4h */ case   13:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820B77B4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820B77B4h case   13:*/		return 0x820B77B8;
		  /* 820B77B8h */ case   14:  		/* lwz R7, <#[R7 + 20]> */
		/* 820B77B8h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000014) );
		/* 820B77B8h case   14:*/		return 0x820B77BC;
		  /* 820B77BCh */ case   15:  		/* lwzx R11, <#[R11 + R7]> */
		/* 820B77BCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 820B77BCh case   15:*/		return 0x820B77C0;
		  /* 820B77C0h */ case   16:  		/* lwzx R9, <#[R9 + R7]> */
		/* 820B77C0h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 820B77C0h case   16:*/		return 0x820B77C4;
		  /* 820B77C4h */ case   17:  		/* lwz R7, <#[R11]> */
		/* 820B77C4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820B77C4h case   17:*/		return 0x820B77C8;
		  /* 820B77C8h */ case   18:  		/* rlwinm R7, R7, 0, 0, 26 */
		/* 820B77C8h case   18:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R7,regs.R7);
		/* 820B77C8h case   18:*/		return 0x820B77CC;
		  /* 820B77CCh */ case   19:  		/* rlwinm R7, R7, 0, 25, 22 */
		/* 820B77CCh case   19:*/		cpu::op::rlwinm<0,0,25,22>(regs,&regs.R7,regs.R7);
		/* 820B77CCh case   19:*/		return 0x820B77D0;
		  /* 820B77D0h */ case   20:  		/* stw R7, <#[R11]> */
		/* 820B77D0h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820B77D0h case   20:*/		return 0x820B77D4;
		  /* 820B77D4h */ case   21:  		/* lwz R6, <#[R9]> */
		/* 820B77D4h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 820B77D4h case   21:*/		return 0x820B77D8;
		  /* 820B77D8h */ case   22:  		/* andi. R6, R6, 415 */
		/* 820B77D8h case   22:*/		cpu::op::andi<1>(regs,&regs.R6,regs.R6,0x19F);
		/* 820B77D8h case   22:*/		return 0x820B77DC;
		  /* 820B77DCh */ case   23:  		/* or R7, R6, R7 */
		/* 820B77DCh case   23:*/		cpu::op::or<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 820B77DCh case   23:*/		return 0x820B77E0;
		  /* 820B77E0h */ case   24:  		/* stw R7, <#[R11]> */
		/* 820B77E0h case   24:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820B77E0h case   24:*/		return 0x820B77E4;
		  /* 820B77E4h */ case   25:  		/* lfd FR0, <#[R9 + 32]> */
		/* 820B77E4h case   25:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000020) );
		/* 820B77E4h case   25:*/		return 0x820B77E8;
		  /* 820B77E8h */ case   26:  		/* stfd FR0, <#[R11 + 32]> */
		/* 820B77E8h case   26:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820B77E8h case   26:*/		return 0x820B77EC;
		  /* 820B77ECh */ case   27:  		/* lfd FR0, <#[R9 + 40]> */
		/* 820B77ECh case   27:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000028) );
		/* 820B77ECh case   27:*/		return 0x820B77F0;
		  /* 820B77F0h */ case   28:  		/* stfd FR0, <#[R11 + 40]> */
		/* 820B77F0h case   28:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000028) );
		/* 820B77F0h case   28:*/		return 0x820B77F4;
	}
	return 0x820B77F4;
} // Block from 820B7780h-820B77F4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820B77F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B77F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B77F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B77F4);
		  /* 820B77F4h */ case    0:  		/* addi R10, R10, 4 */
		/* 820B77F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820B77F4h case    0:*/		return 0x820B77F8;
		  /* 820B77F8h */ case    1:  		/* bc 16, CR0_LT, -100 */
		/* 820B77F8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7794;  }
		/* 820B77F8h case    1:*/		return 0x820B77FC;
	}
	return 0x820B77FC;
} // Block from 820B77F4h-820B77FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B77FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B77FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B77FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B77FC);
		  /* 820B77FCh */ case    0:  		/* lwz R29, <#[R1 + 452]> */
		/* 820B77FCh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000001C4) );
		/* 820B77FCh case    0:*/		return 0x820B7800;
		  /* 820B7800h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 820B7800h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820B7800h case    1:*/		return 0x820B7804;
		  /* 820B7804h */ case    2:  		/* bc 12, CR6_EQ, 132 */
		/* 820B7804h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B7888;  }
		/* 820B7804h case    2:*/		return 0x820B7808;
		  /* 820B7808h */ case    3:  		/* stw R25, <#[R31 + 24]> */
		/* 820B7808h case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000018) );
		/* 820B7808h case    3:*/		return 0x820B780C;
		  /* 820B780Ch */ case    4:  		/* li R8, 0 */
		/* 820B780Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B780Ch case    4:*/		return 0x820B7810;
		  /* 820B7810h */ case    5:  		/* stw R24, <#[R31 + 80]> */
		/* 820B7810h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 820B7810h case    5:*/		return 0x820B7814;
		  /* 820B7814h */ case    6:  		/* li R7, 0 */
		/* 820B7814h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820B7814h case    6:*/		return 0x820B7818;
		  /* 820B7818h */ case    7:  		/* stw R24, <#[R31 + 84]> */
		/* 820B7818h case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000054) );
		/* 820B7818h case    7:*/		return 0x820B781C;
		  /* 820B781Ch */ case    8:  		/* mr R6, R29 */
		/* 820B781Ch case    8:*/		regs.R6 = regs.R29;
		/* 820B781Ch case    8:*/		return 0x820B7820;
		  /* 820B7820h */ case    9:  		/* mr R4, R14 */
		/* 820B7820h case    9:*/		regs.R4 = regs.R14;
		/* 820B7820h case    9:*/		return 0x820B7824;
		  /* 820B7824h */ case   10:  		/* lwz R5, <#[R1 + 144]> */
		/* 820B7824h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7824h case   10:*/		return 0x820B7828;
		  /* 820B7828h */ case   11:  		/* mr R3, R31 */
		/* 820B7828h case   11:*/		regs.R3 = regs.R31;
		/* 820B7828h case   11:*/		return 0x820B782C;
		  /* 820B782Ch */ case   12:  		/* bl -10164 */
		/* 820B782Ch case   12:*/		regs.LR = 0x820B7830; return 0x820B5078;
		/* 820B782Ch case   12:*/		return 0x820B7830;
		  /* 820B7830h */ case   13:  		/* or. R30, R3, R3 */
		/* 820B7830h case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B7830h case   13:*/		return 0x820B7834;
		  /* 820B7834h */ case   14:  		/* bc 12, CR0_LT, 508 */
		/* 820B7834h case   14:*/		if ( regs.CR[0].lt ) { return 0x820B7A30;  }
		/* 820B7834h case   14:*/		return 0x820B7838;
		  /* 820B7838h */ case   15:  		/* stw R18, <#[R31 + 24]> */
		/* 820B7838h case   15:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000018) );
		/* 820B7838h case   15:*/		return 0x820B783C;
		  /* 820B783Ch */ case   16:  		/* li R5, 0 */
		/* 820B783Ch case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B783Ch case   16:*/		return 0x820B7840;
		  /* 820B7840h */ case   17:  		/* stw R24, <#[R31 + 80]> */
		/* 820B7840h case   17:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 820B7840h case   17:*/		return 0x820B7844;
		  /* 820B7844h */ case   18:  		/* mr R4, R29 */
		/* 820B7844h case   18:*/		regs.R4 = regs.R29;
		/* 820B7844h case   18:*/		return 0x820B7848;
		  /* 820B7848h */ case   19:  		/* stw R24, <#[R31 + 84]> */
		/* 820B7848h case   19:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000054) );
		/* 820B7848h case   19:*/		return 0x820B784C;
		  /* 820B784Ch */ case   20:  		/* mr R3, R31 */
		/* 820B784Ch case   20:*/		regs.R3 = regs.R31;
		/* 820B784Ch case   20:*/		return 0x820B7850;
		  /* 820B7850h */ case   21:  		/* bl 33360 */
		/* 820B7850h case   21:*/		regs.LR = 0x820B7854; return 0x820BFAA0;
		/* 820B7850h case   21:*/		return 0x820B7854;
		  /* 820B7854h */ case   22:  		/* or. R30, R3, R3 */
		/* 820B7854h case   22:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820B7854h case   22:*/		return 0x820B7858;
		  /* 820B7858h */ case   23:  		/* bc 12, CR0_LT, 472 */
		/* 820B7858h case   23:*/		if ( regs.CR[0].lt ) { return 0x820B7A30;  }
		/* 820B7858h case   23:*/		return 0x820B785C;
		  /* 820B785Ch */ case   24:  		/* lwz R11, <#[R31 + 88]> */
		/* 820B785Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 820B785Ch case   24:*/		return 0x820B7860;
		  /* 820B7860h */ case   25:  		/* cmpwi CR6, R11, 0 */
		/* 820B7860h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B7860h case   25:*/		return 0x820B7864;
		  /* 820B7864h */ case   26:  		/* bc 4, CR6_EQ, 28 */
		/* 820B7864h case   26:*/		if ( !regs.CR[6].eq ) { return 0x820B7880;  }
		/* 820B7864h case   26:*/		return 0x820B7868;
		  /* 820B7868h */ case   27:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B7868h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B7868h case   27:*/		return 0x820B786C;
		  /* 820B786Ch */ case   28:  		/* cmpwi CR6, R11, 0 */
		/* 820B786Ch case   28:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B786Ch case   28:*/		return 0x820B7870;
		  /* 820B7870h */ case   29:  		/* bc 4, CR6_EQ, 136 */
		/* 820B7870h case   29:*/		if ( !regs.CR[6].eq ) { return 0x820B78F8;  }
		/* 820B7870h case   29:*/		return 0x820B7874;
		  /* 820B7874h */ case   30:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B7874h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B7874h case   30:*/		return 0x820B7878;
		  /* 820B7878h */ case   31:  		/* cmpwi CR6, R11, 0 */
		/* 820B7878h case   31:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B7878h case   31:*/		return 0x820B787C;
		  /* 820B787Ch */ case   32:  		/* bc 4, CR6_EQ, 124 */
		/* 820B787Ch case   32:*/		if ( !regs.CR[6].eq ) { return 0x820B78F8;  }
		/* 820B787Ch case   32:*/		return 0x820B7880;
	}
	return 0x820B7880;
} // Block from 820B77FCh-820B7880h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820B7880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7880);
		  /* 820B7880h */ case    0:  		/* stw R24, <#[R31 + 80]> */
		/* 820B7880h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 820B7880h case    0:*/		return 0x820B7884;
		  /* 820B7884h */ case    1:  		/* stw R24, <#[R31 + 84]> */
		/* 820B7884h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000054) );
		/* 820B7884h case    1:*/		return 0x820B7888;
	}
	return 0x820B7888;
} // Block from 820B7880h-820B7888h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B7888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7888);
		  /* 820B7888h */ case    0:  		/* lwz R11, <#[R31 + 92]> */
		/* 820B7888h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B7888h case    0:*/		return 0x820B788C;
		  /* 820B788Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820B788Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B788Ch case    1:*/		return 0x820B7890;
		  /* 820B7890h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820B7890h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820B78A4;  }
		/* 820B7890h case    2:*/		return 0x820B7894;
		  /* 820B7894h */ case    3:  		/* addi R16, R16, 1 */
		/* 820B7894h case    3:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R16,0x1);
		/* 820B7894h case    3:*/		return 0x820B7898;
		  /* 820B7898h */ case    4:  		/* cmplwi CR6, R16, 1024 */
		/* 820B7898h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000400);
		/* 820B7898h case    4:*/		return 0x820B789C;
		  /* 820B789Ch */ case    5:  		/* bc 12, CR6_LT, -984 */
		/* 820B789Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x820B74C4;  }
		/* 820B789Ch case    5:*/		return 0x820B78A0;
		  /* 820B78A0h */ case    6:  		/* b 88 */
		/* 820B78A0h case    6:*/		return 0x820B78F8;
		/* 820B78A0h case    6:*/		return 0x820B78A4;
	}
	return 0x820B78A4;
} // Block from 820B7888h-820B78A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B78A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B78A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B78A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B78A4);
		  /* 820B78A4h */ case    0:  		/* mr R11, R25 */
		/* 820B78A4h case    0:*/		regs.R11 = regs.R25;
		/* 820B78A4h case    0:*/		return 0x820B78A8;
		  /* 820B78A8h */ case    1:  		/* lwz R25, <#[R1 + 132]> */
		/* 820B78A8h case    1:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000084) );
		/* 820B78A8h case    1:*/		return 0x820B78AC;
		  /* 820B78ACh */ case    2:  		/* mr R10, R21 */
		/* 820B78ACh case    2:*/		regs.R10 = regs.R21;
		/* 820B78ACh case    2:*/		return 0x820B78B0;
		  /* 820B78B0h */ case    3:  		/* lwz R21, <#[R1 + 136]> */
		/* 820B78B0h case    3:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000088) );
		/* 820B78B0h case    3:*/		return 0x820B78B4;
		  /* 820B78B4h */ case    4:  		/* mr R9, R19 */
		/* 820B78B4h case    4:*/		regs.R9 = regs.R19;
		/* 820B78B4h case    4:*/		return 0x820B78B8;
		  /* 820B78B8h */ case    5:  		/* lwz R19, <#[R1 + 140]> */
		/* 820B78B8h case    5:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B78B8h case    5:*/		return 0x820B78BC;
		  /* 820B78BCh */ case    6:  		/* mr R6, R25 */
		/* 820B78BCh case    6:*/		regs.R6 = regs.R25;
		/* 820B78BCh case    6:*/		return 0x820B78C0;
		  /* 820B78C0h */ case    7:  		/* stw R11, <#[R1 + 132]> */
		/* 820B78C0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B78C0h case    7:*/		return 0x820B78C4;
		  /* 820B78C4h */ case    8:  		/* mr R5, R22 */
		/* 820B78C4h case    8:*/		regs.R5 = regs.R22;
		/* 820B78C4h case    8:*/		return 0x820B78C8;
		  /* 820B78C8h */ case    9:  		/* stw R10, <#[R1 + 136]> */
		/* 820B78C8h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 820B78C8h case    9:*/		return 0x820B78CC;
		  /* 820B78CCh */ case   10:  		/* mr R4, R23 */
		/* 820B78CCh case   10:*/		regs.R4 = regs.R23;
		/* 820B78CCh case   10:*/		return 0x820B78D0;
		  /* 820B78D0h */ case   11:  		/* stw R9, <#[R1 + 140]> */
		/* 820B78D0h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B78D0h case   11:*/		return 0x820B78D4;
		  /* 820B78D4h */ case   12:  		/* mr R3, R31 */
		/* 820B78D4h case   12:*/		regs.R3 = regs.R31;
		/* 820B78D4h case   12:*/		return 0x820B78D8;
		  /* 820B78D8h */ case   13:  		/* bl -28680 */
		/* 820B78D8h case   13:*/		regs.LR = 0x820B78DC; return 0x820B08D0;
		/* 820B78D8h case   13:*/		return 0x820B78DC;
		  /* 820B78DCh */ case   14:  		/* stw R24, <#[R31 + 76]> */
		/* 820B78DCh case   14:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000004C) );
		/* 820B78DCh case   14:*/		return 0x820B78E0;
		  /* 820B78E0h */ case   15:  		/* stw R24, <#[R31 + 80]> */
		/* 820B78E0h case   15:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000050) );
		/* 820B78E0h case   15:*/		return 0x820B78E4;
		  /* 820B78E4h */ case   16:  		/* cmplwi CR6, R16, 0 */
		/* 820B78E4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820B78E4h case   16:*/		return 0x820B78E8;
		  /* 820B78E8h */ case   17:  		/* stw R24, <#[R31 + 84]> */
		/* 820B78E8h case   17:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000054) );
		/* 820B78E8h case   17:*/		return 0x820B78EC;
		  /* 820B78ECh */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 820B78ECh case   18:*/		if ( !regs.CR[6].eq ) { return 0x820B78F8;  }
		/* 820B78ECh case   18:*/		return 0x820B78F0;
		  /* 820B78F0h */ case   19:  		/* li R11, 1 */
		/* 820B78F0h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820B78F0h case   19:*/		return 0x820B78F4;
		  /* 820B78F4h */ case   20:  		/* stw R11, <#[R1 + 152]> */
		/* 820B78F4h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 820B78F4h case   20:*/		return 0x820B78F8;
	}
	return 0x820B78F8;
} // Block from 820B78A4h-820B78F8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820B78F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B78F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B78F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B78F8);
		  /* 820B78F8h */ case    0:  		/* cmplwi CR6, R16, 1024 */
		/* 820B78F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000400);
		/* 820B78F8h case    0:*/		return 0x820B78FC;
		  /* 820B78FCh */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 820B78FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B7920;  }
		/* 820B78FCh case    1:*/		return 0x820B7900;
		  /* 820B7900h */ case    2:  		/* lis R11, -32255 */
		/* 820B7900h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820B7900h case    2:*/		return 0x820B7904;
		  /* 820B7904h */ case    3:  		/* lwz R4, <#[R1 + 428]> */
		/* 820B7904h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001AC) );
		/* 820B7904h case    3:*/		return 0x820B7908;
		  /* 820B7908h */ case    4:  		/* li R7, 1024 */
		/* 820B7908h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x400);
		/* 820B7908h case    4:*/		return 0x820B790C;
		  /* 820B790Ch */ case    5:  		/* addi R6, R11, 8808 */
		/* 820B790Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2268);
		/* 820B790Ch case    5:*/		return 0x820B7910;
		  /* 820B7910h */ case    6:  		/* li R5, 3511 */
		/* 820B7910h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xDB7);
		/* 820B7910h case    6:*/		return 0x820B7914;
		  /* 820B7914h */ case    7:  		/* mr R3, R31 */
		/* 820B7914h case    7:*/		regs.R3 = regs.R31;
		/* 820B7914h case    7:*/		return 0x820B7918;
		  /* 820B7918h */ case    8:  		/* bl -28456 */
		/* 820B7918h case    8:*/		regs.LR = 0x820B791C; return 0x820B09F0;
		/* 820B7918h case    8:*/		return 0x820B791C;
		  /* 820B791Ch */ case    9:  		/* b 248 */
		/* 820B791Ch case    9:*/		return 0x820B7A14;
		/* 820B791Ch case    9:*/		return 0x820B7920;
	}
	return 0x820B7920;
} // Block from 820B78F8h-820B7920h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B7920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7920);
		  /* 820B7920h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 820B7920h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820B7920h case    0:*/		return 0x820B7924;
		  /* 820B7924h */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 820B7924h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B799C;  }
		/* 820B7924h case    1:*/		return 0x820B7928;
		  /* 820B7928h */ case    2:  		/* mr R10, R21 */
		/* 820B7928h case    2:*/		regs.R10 = regs.R21;
		/* 820B7928h case    2:*/		return 0x820B792C;
		  /* 820B792Ch */ case    3:  		/* mtspr CTR, R20 */
		/* 820B792Ch case    3:*/		regs.CTR = regs.R20;
		/* 820B792Ch case    3:*/		return 0x820B7930;
		  /* 820B7930h */ case    4:  		/* mr R8, R25 */
		/* 820B7930h case    4:*/		regs.R8 = regs.R25;
		/* 820B7930h case    4:*/		return 0x820B7934;
		  /* 820B7934h */ case    5:  		/* subf R7, R25, R19 */
		/* 820B7934h case    5:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R25,regs.R19);
		/* 820B7934h case    5:*/		return 0x820B7938;
		  /* 820B7938h */ case    6:  		/* lwz R11, <#[R8]> */
		/* 820B7938h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820B7938h case    6:*/		return 0x820B793C;
		  /* 820B793Ch */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 820B793Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820B793Ch case    7:*/		return 0x820B7940;
		  /* 820B7940h */ case    8:  		/* bc 12, CR6_EQ, 80 */
		/* 820B7940h case    8:*/		if ( regs.CR[6].eq ) { return 0x820B7990;  }
		/* 820B7940h case    8:*/		return 0x820B7944;
		  /* 820B7944h */ case    9:  		/* lwz R9, <#[R31 + 8]> */
		/* 820B7944h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 820B7944h case    9:*/		return 0x820B7948;
		  /* 820B7948h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820B7948h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820B7948h case   10:*/		return 0x820B794C;
		  /* 820B794Ch */ case   11:  		/* lfd FR0, <#[R10]> */
		/* 820B794Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000000) );
		/* 820B794Ch case   11:*/		return 0x820B7950;
		  /* 820B7950h */ case   12:  		/* lwz R9, <#[R9 + 20]> */
		/* 820B7950h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 820B7950h case   12:*/		return 0x820B7954;
		  /* 820B7954h */ case   13:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820B7954h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820B7954h case   13:*/		return 0x820B7958;
		  /* 820B7958h */ case   14:  		/* stfd FR0, <#[R11 + 32]> */
		/* 820B7958h case   14:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820B7958h case   14:*/		return 0x820B795C;
		  /* 820B795Ch */ case   15:  		/* lfd FR0, <#[R10 + 8]> */
		/* 820B795Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000008) );
		/* 820B795Ch case   15:*/		return 0x820B7960;
		  /* 820B7960h */ case   16:  		/* stfd FR0, <#[R11 + 40]> */
		/* 820B7960h case   16:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000028) );
		/* 820B7960h case   16:*/		return 0x820B7964;
		  /* 820B7964h */ case   17:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820B7964h case   17:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820B7964h case   17:*/		return 0x820B7968;
		  /* 820B7968h */ case   18:  		/* lfd FR13, <#[R11 + 40]> */
		/* 820B7968h case   18:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000028) );
		/* 820B7968h case   18:*/		return 0x820B796C;
		  /* 820B796Ch */ case   19:  		/* fcmpu CR6, FR0, FR13 */
		/* 820B796Ch case   19:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820B796Ch case   19:*/		return 0x820B7970;
		  /* 820B7970h */ case   20:  		/* lwzx R9, <#[R7 + R8]> */
		/* 820B7970h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 820B7970h case   20:*/		return 0x820B7974;
		  /* 820B7974h */ case   21:  		/* rlwinm R9, R9, 0, 25, 22 */
		/* 820B7974h case   21:*/		cpu::op::rlwinm<0,0,25,22>(regs,&regs.R9,regs.R9);
		/* 820B7974h case   21:*/		return 0x820B7978;
		  /* 820B7978h */ case   22:  		/* stw R9, <#[R11]> */
		/* 820B7978h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B7978h case   22:*/		return 0x820B797C;
		  /* 820B797Ch */ case   23:  		/* bc 4, CR6_EQ, 12 */
		/* 820B797Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x820B7988;  }
		/* 820B797Ch case   23:*/		return 0x820B7980;
		  /* 820B7980h */ case   24:  		/* ori R9, R9, 128 */
		/* 820B7980h case   24:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x80);
		/* 820B7980h case   24:*/		return 0x820B7984;
		  /* 820B7984h */ case   25:  		/* b 8 */
		/* 820B7984h case   25:*/		return 0x820B798C;
		/* 820B7984h case   25:*/		return 0x820B7988;
	}
	return 0x820B7988;
} // Block from 820B7920h-820B7988h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820B7988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7988);
		  /* 820B7988h */ case    0:  		/* ori R9, R9, 256 */
		/* 820B7988h case    0:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x100);
		/* 820B7988h case    0:*/		return 0x820B798C;
	}
	return 0x820B798C;
} // Block from 820B7988h-820B798Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B798Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B798C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B798C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B798C);
		  /* 820B798Ch */ case    0:  		/* stw R9, <#[R11]> */
		/* 820B798Ch case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820B798Ch case    0:*/		return 0x820B7990;
	}
	return 0x820B7990;
} // Block from 820B798Ch-820B7990h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B7990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7990);
		  /* 820B7990h */ case    0:  		/* addi R10, R10, 16 */
		/* 820B7990h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 820B7990h case    0:*/		return 0x820B7994;
		  /* 820B7994h */ case    1:  		/* addi R8, R8, 4 */
		/* 820B7994h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820B7994h case    1:*/		return 0x820B7998;
		  /* 820B7998h */ case    2:  		/* bc 16, CR0_LT, -96 */
		/* 820B7998h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7938;  }
		/* 820B7998h case    2:*/		return 0x820B799C;
	}
	return 0x820B799C;
} // Block from 820B7990h-820B799Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B799Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B799C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B799C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B799C);
		  /* 820B799Ch */ case    0:  		/* lwz R3, <#[R1 + 168]> */
		/* 820B799Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B799Ch case    0:*/		return 0x820B79A0;
		  /* 820B79A0h */ case    1:  		/* mr R5, R15 */
		/* 820B79A0h case    1:*/		regs.R5 = regs.R15;
		/* 820B79A0h case    1:*/		return 0x820B79A4;
		  /* 820B79A4h */ case    2:  		/* mr R4, R25 */
		/* 820B79A4h case    2:*/		regs.R4 = regs.R25;
		/* 820B79A4h case    2:*/		return 0x820B79A8;
		  /* 820B79A8h */ case    3:  		/* stw R3, <#[R31 + 24]> */
		/* 820B79A8h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 820B79A8h case    3:*/		return 0x820B79AC;
		  /* 820B79ACh */ case    4:  		/* bl -155644 */
		/* 820B79ACh case    4:*/		regs.LR = 0x820B79B0; return 0x820919B0;
		/* 820B79ACh case    4:*/		return 0x820B79B0;
		  /* 820B79B0h */ case    5:  		/* cmplwi CR6, R16, 0 */
		/* 820B79B0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820B79B0h case    5:*/		return 0x820B79B4;
		  /* 820B79B4h */ case    6:  		/* bc 12, CR6_EQ, 108 */
		/* 820B79B4h case    6:*/		if ( regs.CR[6].eq ) { return 0x820B7A20;  }
		/* 820B79B4h case    6:*/		return 0x820B79B8;
		  /* 820B79B8h */ case    7:  		/* lwz R11, <#[R1 + 148]> */
		/* 820B79B8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820B79B8h case    7:*/		return 0x820B79BC;
		  /* 820B79BCh */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 820B79BCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B79BCh case    8:*/		return 0x820B79C0;
		  /* 820B79C0h */ case    9:  		/* bc 12, CR6_EQ, 96 */
		/* 820B79C0h case    9:*/		if ( regs.CR[6].eq ) { return 0x820B7A20;  }
		/* 820B79C0h case    9:*/		return 0x820B79C4;
		  /* 820B79C4h */ case   10:  		/* lwz R11, <#[R31 + 80]> */
		/* 820B79C4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820B79C4h case   10:*/		return 0x820B79C8;
		  /* 820B79C8h */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 820B79C8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B79C8h case   11:*/		return 0x820B79CC;
		  /* 820B79CCh */ case   12:  		/* bc 4, CR6_EQ, 84 */
		/* 820B79CCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x820B7A20;  }
		/* 820B79CCh case   12:*/		return 0x820B79D0;
		  /* 820B79D0h */ case   13:  		/* lwz R11, <#[R31 + 84]> */
		/* 820B79D0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820B79D0h case   13:*/		return 0x820B79D4;
		  /* 820B79D4h */ case   14:  		/* cmpwi CR6, R11, 0 */
		/* 820B79D4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820B79D4h case   14:*/		return 0x820B79D8;
		  /* 820B79D8h */ case   15:  		/* bc 4, CR6_EQ, 72 */
		/* 820B79D8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820B7A20;  }
		/* 820B79D8h case   15:*/		return 0x820B79DC;
		  /* 820B79DCh */ case   16:  		/* lwz R10, <#[R1 + 160]> */
		/* 820B79DCh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B79DCh case   16:*/		return 0x820B79E0;
		  /* 820B79E0h */ case   17:  		/* lis R5, 4096 */
		/* 820B79E0h case   17:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820B79E0h case   17:*/		return 0x820B79E4;
		  /* 820B79E4h */ case   18:  		/* lwz R11, <#[R31 + 24]> */
		/* 820B79E4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B79E4h case   18:*/		return 0x820B79E8;
		  /* 820B79E8h */ case   19:  		/* li R9, 0 */
		/* 820B79E8h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B79E8h case   19:*/		return 0x820B79EC;
		  /* 820B79ECh */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820B79ECh case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820B79ECh case   20:*/		return 0x820B79F0;
		  /* 820B79F0h */ case   21:  		/* li R8, 0 */
		/* 820B79F0h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B79F0h case   21:*/		return 0x820B79F4;
		  /* 820B79F4h */ case   22:  		/* addi R7, R1, 164 */
		/* 820B79F4h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA4);
		/* 820B79F4h case   22:*/		return 0x820B79F8;
		  /* 820B79F8h */ case   23:  		/* add R6, R10, R11 */
		/* 820B79F8h case   23:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 820B79F8h case   23:*/		return 0x820B79FC;
		  /* 820B79FCh */ case   24:  		/* ori R5, R5, 1 */
		/* 820B79FCh case   24:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B79FCh case   24:*/		return 0x820B7A00;
		  /* 820B7A00h */ case   25:  		/* mr R4, R14 */
		/* 820B7A00h case   25:*/		regs.R4 = regs.R14;
		/* 820B7A00h case   25:*/		return 0x820B7A04;
		  /* 820B7A04h */ case   26:  		/* mr R3, R31 */
		/* 820B7A04h case   26:*/		regs.R3 = regs.R31;
		/* 820B7A04h case   26:*/		return 0x820B7A08;
		  /* 820B7A08h */ case   27:  		/* bl -28416 */
		/* 820B7A08h case   27:*/		regs.LR = 0x820B7A0C; return 0x820B0B08;
		/* 820B7A08h case   27:*/		return 0x820B7A0C;
		  /* 820B7A0Ch */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820B7A0Ch case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820B7A0Ch case   28:*/		return 0x820B7A10;
		  /* 820B7A10h */ case   29:  		/* bc 4, CR0_LT, 16 */
		/* 820B7A10h case   29:*/		if ( !regs.CR[0].lt ) { return 0x820B7A20;  }
		/* 820B7A10h case   29:*/		return 0x820B7A14;
	}
	return 0x820B7A14;
} // Block from 820B799Ch-820B7A14h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820B7A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7A14);
		  /* 820B7A14h */ case    0:  		/* lis R30, -32768 */
		/* 820B7A14h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 820B7A14h case    0:*/		return 0x820B7A18;
		  /* 820B7A18h */ case    1:  		/* ori R30, R30, 16389 */
		/* 820B7A18h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 820B7A18h case    1:*/		return 0x820B7A1C;
		  /* 820B7A1Ch */ case    2:  		/* b 20 */
		/* 820B7A1Ch case    2:*/		return 0x820B7A30;
		/* 820B7A1Ch case    2:*/		return 0x820B7A20;
	}
	return 0x820B7A20;
} // Block from 820B7A14h-820B7A20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820B7A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7A20);
		  /* 820B7A20h */ case    0:  		/* mr R30, R24 */
		/* 820B7A20h case    0:*/		regs.R30 = regs.R24;
		/* 820B7A20h case    0:*/		return 0x820B7A24;
		  /* 820B7A24h */ case    1:  		/* b 12 */
		/* 820B7A24h case    1:*/		return 0x820B7A30;
		/* 820B7A24h case    1:*/		return 0x820B7A28;
	}
	return 0x820B7A28;
} // Block from 820B7A20h-820B7A28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B7A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7A28);
		  /* 820B7A28h */ case    0:  		/* lis R30, -32761 */
		/* 820B7A28h case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8007);
		/* 820B7A28h case    0:*/		return 0x820B7A2C;
		  /* 820B7A2Ch */ case    1:  		/* ori R30, R30, 14 */
		/* 820B7A2Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0xE);
		/* 820B7A2Ch case    1:*/		return 0x820B7A30;
	}
	return 0x820B7A30;
} // Block from 820B7A28h-820B7A30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B7A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7A30);
		  /* 820B7A30h */ case    0:  		/* lwz R11, <#[R1 + 168]> */
		/* 820B7A30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B7A30h case    0:*/		return 0x820B7A34;
		  /* 820B7A34h */ case    1:  		/* lis R4, 9345 */
		/* 820B7A34h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7A34h case    1:*/		return 0x820B7A38;
		  /* 820B7A38h */ case    2:  		/* mr R3, R25 */
		/* 820B7A38h case    2:*/		regs.R3 = regs.R25;
		/* 820B7A38h case    2:*/		return 0x820B7A3C;
		  /* 820B7A3Ch */ case    3:  		/* stw R11, <#[R31 + 24]> */
		/* 820B7A3Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820B7A3Ch case    3:*/		return 0x820B7A40;
		  /* 820B7A40h */ case    4:  		/* bl -194312 */
		/* 820B7A40h case    4:*/		regs.LR = 0x820B7A44; return 0x82088338;
		/* 820B7A40h case    4:*/		return 0x820B7A44;
		  /* 820B7A44h */ case    5:  		/* lis R4, 9345 */
		/* 820B7A44h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7A44h case    5:*/		return 0x820B7A48;
		  /* 820B7A48h */ case    6:  		/* lwz R3, <#[R1 + 132]> */
		/* 820B7A48h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 820B7A48h case    6:*/		return 0x820B7A4C;
		  /* 820B7A4Ch */ case    7:  		/* bl -194324 */
		/* 820B7A4Ch case    7:*/		regs.LR = 0x820B7A50; return 0x82088338;
		/* 820B7A4Ch case    7:*/		return 0x820B7A50;
		  /* 820B7A50h */ case    8:  		/* lis R4, 9345 */
		/* 820B7A50h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7A50h case    8:*/		return 0x820B7A54;
		  /* 820B7A54h */ case    9:  		/* lwz R3, <#[R1 + 172]> */
		/* 820B7A54h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B7A54h case    9:*/		return 0x820B7A58;
		  /* 820B7A58h */ case   10:  		/* bl -194336 */
		/* 820B7A58h case   10:*/		regs.LR = 0x820B7A5C; return 0x82088338;
		/* 820B7A58h case   10:*/		return 0x820B7A5C;
		  /* 820B7A5Ch */ case   11:  		/* lis R4, 9345 */
		/* 820B7A5Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7A5Ch case   11:*/		return 0x820B7A60;
		  /* 820B7A60h */ case   12:  		/* mr R3, R21 */
		/* 820B7A60h case   12:*/		regs.R3 = regs.R21;
		/* 820B7A60h case   12:*/		return 0x820B7A64;
		  /* 820B7A64h */ case   13:  		/* bl -194348 */
		/* 820B7A64h case   13:*/		regs.LR = 0x820B7A68; return 0x82088338;
		/* 820B7A64h case   13:*/		return 0x820B7A68;
		  /* 820B7A68h */ case   14:  		/* lis R4, 9345 */
		/* 820B7A68h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7A68h case   14:*/		return 0x820B7A6C;
		  /* 820B7A6Ch */ case   15:  		/* lwz R3, <#[R1 + 136]> */
		/* 820B7A6Ch case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000088) );
		/* 820B7A6Ch case   15:*/		return 0x820B7A70;
		  /* 820B7A70h */ case   16:  		/* bl -194360 */
		/* 820B7A70h case   16:*/		regs.LR = 0x820B7A74; return 0x82088338;
		/* 820B7A70h case   16:*/		return 0x820B7A74;
		  /* 820B7A74h */ case   17:  		/* lis R4, 9345 */
		/* 820B7A74h case   17:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7A74h case   17:*/		return 0x820B7A78;
		  /* 820B7A78h */ case   18:  		/* mr R3, R19 */
		/* 820B7A78h case   18:*/		regs.R3 = regs.R19;
		/* 820B7A78h case   18:*/		return 0x820B7A7C;
		  /* 820B7A7Ch */ case   19:  		/* bl -194372 */
		/* 820B7A7Ch case   19:*/		regs.LR = 0x820B7A80; return 0x82088338;
		/* 820B7A7Ch case   19:*/		return 0x820B7A80;
		  /* 820B7A80h */ case   20:  		/* lis R4, 9345 */
		/* 820B7A80h case   20:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7A80h case   20:*/		return 0x820B7A84;
		  /* 820B7A84h */ case   21:  		/* lwz R3, <#[R1 + 140]> */
		/* 820B7A84h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000008C) );
		/* 820B7A84h case   21:*/		return 0x820B7A88;
		  /* 820B7A88h */ case   22:  		/* bl -194384 */
		/* 820B7A88h case   22:*/		regs.LR = 0x820B7A8C; return 0x82088338;
		/* 820B7A88h case   22:*/		return 0x820B7A8C;
		  /* 820B7A8Ch */ case   23:  		/* lwz R11, <#[R1 + 176]> */
		/* 820B7A8Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 820B7A8Ch case   23:*/		return 0x820B7A90;
		  /* 820B7A90h */ case   24:  		/* lwz R10, <#[R1 + 152]> */
		/* 820B7A90h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 820B7A90h case   24:*/		return 0x820B7A94;
		  /* 820B7A94h */ case   25:  		/* mr R3, R30 */
		/* 820B7A94h case   25:*/		regs.R3 = regs.R30;
		/* 820B7A94h case   25:*/		return 0x820B7A98;
		  /* 820B7A98h */ case   26:  		/* stw R11, <#[R31 + 88]> */
		/* 820B7A98h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 820B7A98h case   26:*/		return 0x820B7A9C;
		  /* 820B7A9Ch */ case   27:  		/* stw R10, <#[R31 + 92]> */
		/* 820B7A9Ch case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000005C) );
		/* 820B7A9Ch case   27:*/		return 0x820B7AA0;
		  /* 820B7AA0h */ case   28:  		/* addi R1, R1, 400 */
		/* 820B7AA0h case   28:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 820B7AA0h case   28:*/		return 0x820B7AA4;
		  /* 820B7AA4h */ case   29:  		/* lfd FR29, <#[R1 - 176]> */
		/* 820B7AA4h case   29:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF50) );
		/* 820B7AA4h case   29:*/		return 0x820B7AA8;
		  /* 820B7AA8h */ case   30:  		/* lfd FR30, <#[R1 - 168]> */
		/* 820B7AA8h case   30:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 820B7AA8h case   30:*/		return 0x820B7AAC;
		  /* 820B7AACh */ case   31:  		/* lfd FR31, <#[R1 - 160]> */
		/* 820B7AACh case   31:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820B7AACh case   31:*/		return 0x820B7AB0;
		  /* 820B7AB0h */ case   32:  		/* b -157760 */
		/* 820B7AB0h case   32:*/		return 0x82091270;
		/* 820B7AB0h case   32:*/		return 0x820B7AB4;
		  /* 820B7AB4h */ case   33:  		/* nop */
		/* 820B7AB4h case   33:*/		cpu::op::nop();
		/* 820B7AB4h case   33:*/		return 0x820B7AB8;
	}
	return 0x820B7AB8;
} // Block from 820B7A30h-820B7AB8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820B7AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7AB8);
		  /* 820B7AB8h */ case    0:  		/* mfspr R12, LR */
		/* 820B7AB8h case    0:*/		regs.R12 = regs.LR;
		/* 820B7AB8h case    0:*/		return 0x820B7ABC;
		  /* 820B7ABCh */ case    1:  		/* bl -157852 */
		/* 820B7ABCh case    1:*/		regs.LR = 0x820B7AC0; return 0x82091220;
		/* 820B7ABCh case    1:*/		return 0x820B7AC0;
		  /* 820B7AC0h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 820B7AC0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820B7AC0h case    2:*/		return 0x820B7AC4;
		  /* 820B7AC4h */ case    3:  		/* stwu R1, <#[R1 - 1696]> */
		/* 820B7AC4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF960) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF960);
		/* 820B7AC4h case    3:*/		return 0x820B7AC8;
		  /* 820B7AC8h */ case    4:  		/* mr R14, R3 */
		/* 820B7AC8h case    4:*/		regs.R14 = regs.R3;
		/* 820B7AC8h case    4:*/		return 0x820B7ACC;
		  /* 820B7ACCh */ case    5:  		/* stw R3, <#[R1 + 1716]> */
		/* 820B7ACCh case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820B7ACCh case    5:*/		return 0x820B7AD0;
		  /* 820B7AD0h */ case    6:  		/* mr R16, R4 */
		/* 820B7AD0h case    6:*/		regs.R16 = regs.R4;
		/* 820B7AD0h case    6:*/		return 0x820B7AD4;
		  /* 820B7AD4h */ case    7:  		/* stw R4, <#[R1 + 1724]> */
		/* 820B7AD4h case    7:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000006BC) );
		/* 820B7AD4h case    7:*/		return 0x820B7AD8;
		  /* 820B7AD8h */ case    8:  		/* mr R15, R5 */
		/* 820B7AD8h case    8:*/		regs.R15 = regs.R5;
		/* 820B7AD8h case    8:*/		return 0x820B7ADC;
		  /* 820B7ADCh */ case    9:  		/* stw R5, <#[R1 + 1732]> */
		/* 820B7ADCh case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000006C4) );
		/* 820B7ADCh case    9:*/		return 0x820B7AE0;
		  /* 820B7AE0h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 820B7AE0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820B7AE0h case   10:*/		return 0x820B7AE4;
		  /* 820B7AE4h */ case   11:  		/* bc 4, CR6_EQ, 20 */
		/* 820B7AE4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820B7AF8;  }
		/* 820B7AE4h case   11:*/		return 0x820B7AE8;
		  /* 820B7AE8h */ case   12:  		/* cmplwi CR6, R5, 0 */
		/* 820B7AE8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820B7AE8h case   12:*/		return 0x820B7AEC;
		  /* 820B7AECh */ case   13:  		/* bc 4, CR6_EQ, 26920 */
		/* 820B7AECh case   13:*/		if ( !regs.CR[6].eq ) { return 0x820BE414;  }
		/* 820B7AECh case   13:*/		return 0x820B7AF0;
		  /* 820B7AF0h */ case   14:  		/* li R3, 0 */
		/* 820B7AF0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820B7AF0h case   14:*/		return 0x820B7AF4;
		  /* 820B7AF4h */ case   15:  		/* b 26920 */
		/* 820B7AF4h case   15:*/		return 0x820BE41C;
		/* 820B7AF4h case   15:*/		return 0x820B7AF8;
	}
	return 0x820B7AF8;
} // Block from 820B7AB8h-820B7AF8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820B7AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7AF8);
		  /* 820B7AF8h */ case    0:  		/* lwz R11, <#[R16 + 4]> */
		/* 820B7AF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 820B7AF8h case    0:*/		return 0x820B7AFC;
		  /* 820B7AFCh */ case    1:  		/* cmpwi CR6, R11, 14 */
		/* 820B7AFCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 820B7AFCh case    1:*/		return 0x820B7B00;
		  /* 820B7B00h */ case    2:  		/* bc 4, CR6_EQ, 26900 */
		/* 820B7B00h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820BE414;  }
		/* 820B7B00h case    2:*/		return 0x820B7B04;
		  /* 820B7B04h */ case    3:  		/* lwz R11, <#[R16 + 36]> */
		/* 820B7B04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000024) );
		/* 820B7B04h case    3:*/		return 0x820B7B08;
		  /* 820B7B08h */ case    4:  		/* lwz R10, <#[R16 + 20]> */
		/* 820B7B08h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000014) );
		/* 820B7B08h case    4:*/		return 0x820B7B0C;
		  /* 820B7B0Ch */ case    5:  		/* lwz R9, <#[R16 + 28]> */
		/* 820B7B0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R16 + 0x0000001C) );
		/* 820B7B0Ch case    5:*/		return 0x820B7B10;
		  /* 820B7B10h */ case    6:  		/* lwz R8, <#[R16 + 24]> */
		/* 820B7B10h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R16 + 0x00000018) );
		/* 820B7B10h case    6:*/		return 0x820B7B14;
		  /* 820B7B14h */ case    7:  		/* cmpwi CR6, R9, 32 */
		/* 820B7B14h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000020);
		/* 820B7B14h case    7:*/		return 0x820B7B18;
		  /* 820B7B18h */ case    8:  		/* stw R11, <#[R1 + 524]> */
		/* 820B7B18h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000020C) );
		/* 820B7B18h case    8:*/		return 0x820B7B1C;
		  /* 820B7B1Ch */ case    9:  		/* mullw R30, R10, R8 */
		/* 820B7B1Ch case    9:*/		cpu::op::mullw<0>(regs,&regs.R30,regs.R10,regs.R8);
		/* 820B7B1Ch case    9:*/		return 0x820B7B20;
		  /* 820B7B20h */ case   10:  		/* bc 4, CR6_EQ, 26868 */
		/* 820B7B20h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820BE414;  }
		/* 820B7B20h case   10:*/		return 0x820B7B24;
		  /* 820B7B24h */ case   11:  		/* addi R10, R1, 128 */
		/* 820B7B24h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 820B7B24h case   11:*/		return 0x820B7B28;
		  /* 820B7B28h */ case   12:  		/* lwz R9, <#[R14 + 28]> */
		/* 820B7B28h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x0000001C) );
		/* 820B7B28h case   12:*/		return 0x820B7B2C;
		  /* 820B7B2Ch */ case   13:  		/* addi R8, R1, 160 */
		/* 820B7B2Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 820B7B2Ch case   13:*/		return 0x820B7B30;
		  /* 820B7B30h */ case   14:  		/* lwz R7, <#[R14 + 100]> */
		/* 820B7B30h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R14 + 0x00000064) );
		/* 820B7B30h case   14:*/		return 0x820B7B34;
		  /* 820B7B34h */ case   15:  		/* addi R6, R1, 144 */
		/* 820B7B34h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 820B7B34h case   15:*/		return 0x820B7B38;
		  /* 820B7B38h */ case   16:  		/* lwz R26, <#[R11 + 8]> */
		/* 820B7B38h case   16:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000008) );
		/* 820B7B38h case   16:*/		return 0x820B7B3C;
		  /* 820B7B3Ch */ case   17:  		/* li R22, 0 */
		/* 820B7B3Ch case   17:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 820B7B3Ch case   17:*/		return 0x820B7B40;
		  /* 820B7B40h */ case   18:  		/* lis R25, 3584 */
		/* 820B7B40h case   18:*/		cpu::op::lis<0>(regs,&regs.R25,0xE00);
		/* 820B7B40h case   18:*/		return 0x820B7B44;
		  /* 820B7B44h */ case   19:  		/* std R22, <#[R10]> */
		/* 820B7B44h case   19:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000000) );
		/* 820B7B44h case   19:*/		return 0x820B7B48;
		  /* 820B7B48h */ case   20:  		/* cmplwi CR6, R26, 0 */
		/* 820B7B48h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820B7B48h case   20:*/		return 0x820B7B4C;
		  /* 820B7B4Ch */ case   21:  		/* std R22, <#[R8]> */
		/* 820B7B4Ch case   21:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R8 + 0x00000000) );
		/* 820B7B4Ch case   21:*/		return 0x820B7B50;
		  /* 820B7B50h */ case   22:  		/* std R22, <#[R6]> */
		/* 820B7B50h case   22:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R6 + 0x00000000) );
		/* 820B7B50h case   22:*/		return 0x820B7B54;
		  /* 820B7B54h */ case   23:  		/* std R22, <#[R10 + 8]> */
		/* 820B7B54h case   23:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000008) );
		/* 820B7B54h case   23:*/		return 0x820B7B58;
		  /* 820B7B58h */ case   24:  		/* std R22, <#[R8 + 8]> */
		/* 820B7B58h case   24:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R8 + 0x00000008) );
		/* 820B7B58h case   24:*/		return 0x820B7B5C;
		  /* 820B7B5Ch */ case   25:  		/* std R22, <#[R6 + 8]> */
		/* 820B7B5Ch case   25:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R6 + 0x00000008) );
		/* 820B7B5Ch case   25:*/		return 0x820B7B60;
		  /* 820B7B60h */ case   26:  		/* stw R9, <#[R1 + 528]> */
		/* 820B7B60h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000210) );
		/* 820B7B60h case   26:*/		return 0x820B7B64;
		  /* 820B7B64h */ case   27:  		/* stw R7, <#[R1 + 532]> */
		/* 820B7B64h case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000214) );
		/* 820B7B64h case   27:*/		return 0x820B7B68;
		  /* 820B7B68h */ case   28:  		/* bc 12, CR6_EQ, 200 */
		/* 820B7B68h case   28:*/		if ( regs.CR[6].eq ) { return 0x820B7C30;  }
		/* 820B7B68h case   28:*/		return 0x820B7B6C;
		  /* 820B7B6Ch */ case   29:  		/* mr R29, R22 */
		/* 820B7B6Ch case   29:*/		regs.R29 = regs.R22;
		/* 820B7B6Ch case   29:*/		return 0x820B7B70;
		  /* 820B7B70h */ case   30:  		/* lwz R11, <#[R26 + 8]> */
		/* 820B7B70h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 820B7B70h case   30:*/		return 0x820B7B74;
		  /* 820B7B74h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 820B7B74h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B7B74h case   31:*/		return 0x820B7B78;
		  /* 820B7B78h */ case   32:  		/* bc 12, CR6_EQ, 156 */
		/* 820B7B78h case   32:*/		if ( regs.CR[6].eq ) { return 0x820B7C14;  }
		/* 820B7B78h case   32:*/		return 0x820B7B7C;
		  /* 820B7B7Ch */ case   33:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 820B7B7Ch case   33:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 820B7B7Ch case   33:*/		return 0x820B7B80;
		  /* 820B7B80h */ case   34:  		/* addi R31, R1, 128 */
		/* 820B7B80h case   34:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x80);
		/* 820B7B80h case   34:*/		return 0x820B7B84;
		  /* 820B7B84h */ case   35:  		/* addi R27, R1, 160 */
		/* 820B7B84h case   35:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0xA0);
		/* 820B7B84h case   35:*/		return 0x820B7B88;
		  /* 820B7B88h */ case   36:  		/* lis R4, 9345 */
		/* 820B7B88h case   36:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B7B88h case   36:*/		return 0x820B7B8C;
		  /* 820B7B8Ch */ case   37:  		/* lwz R10, <#[R11 + 24]> */
		/* 820B7B8Ch case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 820B7B8Ch case   37:*/		return 0x820B7B90;
		  /* 820B7B90h */ case   38:  		/* lwz R9, <#[R11 + 20]> */
		/* 820B7B90h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 820B7B90h case   38:*/		return 0x820B7B94;
		  /* 820B7B94h */ case   39:  		/* stwx R11, <#[R29 + R31]> */
		/* 820B7B94h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 820B7B94h case   39:*/		return 0x820B7B98;
		  /* 820B7B98h */ case   40:  		/* mullw R11, R10, R9 */
		/* 820B7B98h case   40:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R9);
		/* 820B7B98h case   40:*/		return 0x820B7B9C;
		  /* 820B7B9Ch */ case   41:  		/* stwx R11, <#[R29 + R27]> */
		/* 820B7B9Ch case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + regs.R27 + 0x00000000) );
		/* 820B7B9Ch case   41:*/		return 0x820B7BA0;
		  /* 820B7BA0h */ case   42:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 820B7BA0h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 820B7BA0h case   42:*/		return 0x820B7BA4;
		  /* 820B7BA4h */ case   43:  		/* bl -194980 */
		/* 820B7BA4h case   43:*/		regs.LR = 0x820B7BA8; return 0x82088200;
		/* 820B7BA4h case   43:*/		return 0x820B7BA8;
		  /* 820B7BA8h */ case   44:  		/* addi R11, R1, 144 */
		/* 820B7BA8h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 820B7BA8h case   44:*/		return 0x820B7BAC;
		  /* 820B7BACh */ case   45:  		/* or. R28, R3, R3 */
		/* 820B7BACh case   45:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820B7BACh case   45:*/		return 0x820B7BB0;
		  /* 820B7BB0h */ case   46:  		/* stwx R28, <#[R29 + R11]> */
		/* 820B7BB0h case   46:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 820B7BB0h case   46:*/		return 0x820B7BB4;
		  /* 820B7BB4h */ case   47:  		/* bc 12, CR0_EQ, 22636 */
		/* 820B7BB4h case   47:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B7BB4h case   47:*/		return 0x820B7BB8;
		  /* 820B7BB8h */ case   48:  		/* li R6, 0 */
		/* 820B7BB8h case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B7BB8h case   48:*/		return 0x820B7BBC;
		  /* 820B7BBCh */ case   49:  		/* lwzx R4, <#[R29 + R31]> */
		/* 820B7BBCh case   49:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 820B7BBCh case   49:*/		return 0x820B7BC0;
		  /* 820B7BC0h */ case   50:  		/* mr R5, R28 */
		/* 820B7BC0h case   50:*/		regs.R5 = regs.R28;
		/* 820B7BC0h case   50:*/		return 0x820B7BC4;
		  /* 820B7BC4h */ case   51:  		/* mr R3, R14 */
		/* 820B7BC4h case   51:*/		regs.R3 = regs.R14;
		/* 820B7BC4h case   51:*/		return 0x820B7BC8;
		  /* 820B7BC8h */ case   52:  		/* bl 37664 */
		/* 820B7BC8h case   52:*/		regs.LR = 0x820B7BCC; return 0x820C0EE8;
		/* 820B7BC8h case   52:*/		return 0x820B7BCC;
		  /* 820B7BCCh */ case   53:  		/* or. R31, R3, R3 */
		/* 820B7BCCh case   53:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7BCCh case   53:*/		return 0x820B7BD0;
		  /* 820B7BD0h */ case   54:  		/* bc 12, CR0_LT, 26632 */
		/* 820B7BD0h case   54:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7BD0h case   54:*/		return 0x820B7BD4;
		  /* 820B7BD4h */ case   55:  		/* lwzx R9, <#[R29 + R27]> */
		/* 820B7BD4h case   55:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + regs.R27 + 0x00000000) );
		/* 820B7BD4h case   55:*/		return 0x820B7BD8;
		  /* 820B7BD8h */ case   56:  		/* mr R10, R22 */
		/* 820B7BD8h case   56:*/		regs.R10 = regs.R22;
		/* 820B7BD8h case   56:*/		return 0x820B7BDC;
		  /* 820B7BDCh */ case   57:  		/* cmplwi CR6, R9, 0 */
		/* 820B7BDCh case   57:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820B7BDCh case   57:*/		return 0x820B7BE0;
		  /* 820B7BE0h */ case   58:  		/* bc 12, CR6_EQ, 52 */
		/* 820B7BE0h case   58:*/		if ( regs.CR[6].eq ) { return 0x820B7C14;  }
		/* 820B7BE0h case   58:*/		return 0x820B7BE4;
		  /* 820B7BE4h */ case   59:  		/* lwz R8, <#[R14 + 8]> */
		/* 820B7BE4h case   59:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R14 + 0x00000008) );
		/* 820B7BE4h case   59:*/		return 0x820B7BE8;
		  /* 820B7BE8h */ case   60:  		/* mr R11, R22 */
		/* 820B7BE8h case   60:*/		regs.R11 = regs.R22;
		/* 820B7BE8h case   60:*/		return 0x820B7BEC;
		  /* 820B7BECh */ case   61:  		/* lwz R8, <#[R8 + 20]> */
		/* 820B7BECh case   61:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000014) );
		/* 820B7BECh case   61:*/		return 0x820B7BF0;
		  /* 820B7BF0h */ case   62:  		/* lwzx R7, <#[R28 + R11]> */
		/* 820B7BF0h case   62:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 820B7BF0h case   62:*/		return 0x820B7BF4;
		  /* 820B7BF4h */ case   63:  		/* addi R10, R10, 1 */
		/* 820B7BF4h case   63:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820B7BF4h case   63:*/		return 0x820B7BF8;
		  /* 820B7BF8h */ case   64:  		/* addi R11, R11, 4 */
		/* 820B7BF8h case   64:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B7BF8h case   64:*/		return 0x820B7BFC;
		  /* 820B7BFCh */ case   65:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820B7BFCh case   65:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820B7BFCh case   65:*/		return 0x820B7C00;
		  /* 820B7C00h */ case   66:  		/* cmplw CR6, R10, R9 */
		/* 820B7C00h case   66:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820B7C00h case   66:*/		return 0x820B7C04;
		  /* 820B7C04h */ case   67:  		/* lwzx R7, <#[R7 + R8]> */
		/* 820B7C04h case   67:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 820B7C04h case   67:*/		return 0x820B7C08;
		  /* 820B7C08h */ case   68:  		/* lwz R7, <#[R7]> */
		/* 820B7C08h case   68:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 820B7C08h case   68:*/		return 0x820B7C0C;
		  /* 820B7C0Ch */ case   69:  		/* and R25, R7, R25 */
		/* 820B7C0Ch case   69:*/		cpu::op::and<0>(regs,&regs.R25,regs.R7,regs.R25);
		/* 820B7C0Ch case   69:*/		return 0x820B7C10;
		  /* 820B7C10h */ case   70:  		/* bc 12, CR6_LT, -32 */
		/* 820B7C10h case   70:*/		if ( regs.CR[6].lt ) { return 0x820B7BF0;  }
		/* 820B7C10h case   70:*/		return 0x820B7C14;
	}
	return 0x820B7C14;
} // Block from 820B7AF8h-820B7C14h (71 instructions)

//////////////////////////////////////////////////////
// Block at 820B7C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7C14);
		  /* 820B7C14h */ case    0:  		/* lwz R26, <#[R26 + 12]> */
		/* 820B7C14h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x0000000C) );
		/* 820B7C14h case    0:*/		return 0x820B7C18;
		  /* 820B7C18h */ case    1:  		/* addi R29, R29, 4 */
		/* 820B7C18h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820B7C18h case    1:*/		return 0x820B7C1C;
		  /* 820B7C1Ch */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 820B7C1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820B7C1Ch case    2:*/		return 0x820B7C20;
		  /* 820B7C20h */ case    3:  		/* bc 4, CR6_EQ, -176 */
		/* 820B7C20h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820B7B70;  }
		/* 820B7C20h case    3:*/		return 0x820B7C24;
		  /* 820B7C24h */ case    4:  		/* lis R11, 3584 */
		/* 820B7C24h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xE00);
		/* 820B7C24h case    4:*/		return 0x820B7C28;
		  /* 820B7C28h */ case    5:  		/* cmplw CR6, R25, R11 */
		/* 820B7C28h case    5:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 820B7C28h case    5:*/		return 0x820B7C2C;
		  /* 820B7C2Ch */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 820B7C2Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x820B7C34;  }
		/* 820B7C2Ch case    6:*/		return 0x820B7C30;
	}
	return 0x820B7C30;
} // Block from 820B7C14h-820B7C30h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820B7C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7C30);
		  /* 820B7C30h */ case    0:  		/* mr R25, R22 */
		/* 820B7C30h case    0:*/		regs.R25 = regs.R22;
		/* 820B7C30h case    0:*/		return 0x820B7C34;
	}
	return 0x820B7C34;
} // Block from 820B7C30h-820B7C34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820B7C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7C34);
		  /* 820B7C34h */ case    0:  		/* stw R25, <#[R14 + 100]> */
		/* 820B7C34h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R14 + 0x00000064) );
		/* 820B7C34h case    0:*/		return 0x820B7C38;
		  /* 820B7C38h */ case    1:  		/* lwz R11, <#[R16 + 32]> */
		/* 820B7C38h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000020) );
		/* 820B7C38h case    1:*/		return 0x820B7C3C;
		  /* 820B7C3Ch */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 820B7C3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820B7C3Ch case    2:*/		return 0x820B7C40;
		  /* 820B7C40h */ case    3:  		/* lwz R11, <#[R11 + 24]> */
		/* 820B7C40h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820B7C40h case    3:*/		return 0x820B7C44;
		  /* 820B7C44h */ case    4:  		/* cmplwi CR6, R11, 137 */
		/* 820B7C44h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000089);
		/* 820B7C44h case    4:*/		return 0x820B7C48;
		  /* 820B7C48h */ case    5:  		/* bc 12, CR6_GT, 26476 */
		/* 820B7C48h case    5:*/		if ( regs.CR[6].gt ) { return 0x820BE3B4;  }
		/* 820B7C48h case    5:*/		return 0x820B7C4C;
		  /* 820B7C4Ch */ case    6:  		/* lis R12, -32255 */
		/* 820B7C4Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8201);
		/* 820B7C4Ch case    6:*/		return 0x820B7C50;
		  /* 820B7C50h */ case    7:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 820B7C50h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 820B7C50h case    7:*/		return 0x820B7C54;
		  /* 820B7C54h */ case    8:  		/* addi R12, R12, 8216 */
		/* 820B7C54h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x2018);
		/* 820B7C54h case    8:*/		return 0x820B7C58;
		  /* 820B7C58h */ case    9:  		/* lhzx R0, <#[R12 + R0]> */
		/* 820B7C58h case    9:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 820B7C58h case    9:*/		return 0x820B7C5C;
		  /* 820B7C5Ch */ case   10:  		/* lis R12, -32245 */
		/* 820B7C5Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF820B);
		/* 820B7C5Ch case   10:*/		return 0x820B7C60;
		  /* 820B7C60h */ case   11:  		/* addi R12, R12, 31860 */
		/* 820B7C60h case   11:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x7C74);
		/* 820B7C60h case   11:*/		return 0x820B7C64;
		  /* 820B7C64h */ case   12:  		/* ori R0, R0, 0 */
		/* 820B7C64h case   12:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 820B7C64h case   12:*/		return 0x820B7C68;
		  /* 820B7C68h */ case   13:  		/* add R12, R12, R0 */
		/* 820B7C68h case   13:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 820B7C68h case   13:*/		return 0x820B7C6C;
		  /* 820B7C6Ch */ case   14:  		/* mtspr CTR, R12 */
		/* 820B7C6Ch case   14:*/		regs.CTR = regs.R12;
		/* 820B7C6Ch case   14:*/		return 0x820B7C70;
		  /* 820B7C70h */ case   15:  		/* bcctr 20, CR0_LT */
		/* 820B7C70h case   15:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820B7C70h case   15:*/		return 0x820B7C74;
		  /* 820B7C74h */ case   16:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B7C74h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B7C74h case   16:*/		return 0x820B7C78;
		  /* 820B7C78h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 820B7C78h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B7C78h case   17:*/		return 0x820B7C7C;
		  /* 820B7C7Ch */ case   18:  		/* bc 12, CR6_EQ, 26452 */
		/* 820B7C7Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B7C7Ch case   18:*/		return 0x820B7C80;
		  /* 820B7C80h */ case   19:  		/* cmplwi CR6, R15, 0 */
		/* 820B7C80h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B7C80h case   19:*/		return 0x820B7C84;
		  /* 820B7C84h */ case   20:  		/* bc 12, CR6_EQ, 3400 */
		/* 820B7C84h case   20:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B7C84h case   20:*/		return 0x820B7C88;
		  /* 820B7C88h */ case   21:  		/* mr R4, R30 */
		/* 820B7C88h case   21:*/		regs.R4 = regs.R30;
		/* 820B7C88h case   21:*/		return 0x820B7C8C;
		  /* 820B7C8Ch */ case   22:  		/* mr R3, R14 */
		/* 820B7C8Ch case   22:*/		regs.R3 = regs.R14;
		/* 820B7C8Ch case   22:*/		return 0x820B7C90;
		  /* 820B7C90h */ case   23:  		/* bl -30112 */
		/* 820B7C90h case   23:*/		regs.LR = 0x820B7C94; return 0x820B06F0;
		/* 820B7C90h case   23:*/		return 0x820B7C94;
		  /* 820B7C94h */ case   24:  		/* or. R28, R3, R3 */
		/* 820B7C94h case   24:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820B7C94h case   24:*/		return 0x820B7C98;
		  /* 820B7C98h */ case   25:  		/* bc 12, CR0_EQ, 22408 */
		/* 820B7C98h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B7C98h case   25:*/		return 0x820B7C9C;
		  /* 820B7C9Ch */ case   26:  		/* li R29, -1 */
		/* 820B7C9Ch case   26:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B7C9Ch case   26:*/		return 0x820B7CA0;
		  /* 820B7CA0h */ case   27:  		/* cmplwi CR6, R30, 0 */
		/* 820B7CA0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B7CA0h case   27:*/		return 0x820B7CA4;
		  /* 820B7CA4h */ case   28:  		/* bc 12, CR6_EQ, 64 */
		/* 820B7CA4h case   28:*/		if ( regs.CR[6].eq ) { return 0x820B7CE4;  }
		/* 820B7CA4h case   28:*/		return 0x820B7CA8;
		  /* 820B7CA8h */ case   29:  		/* addi R11, R28, -4 */
		/* 820B7CA8h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B7CA8h case   29:*/		return 0x820B7CAC;
		  /* 820B7CACh */ case   30:  		/* mr R10, R29 */
		/* 820B7CACh case   30:*/		regs.R10 = regs.R29;
		/* 820B7CACh case   30:*/		return 0x820B7CB0;
	}
	return 0x820B7CB0;
} // Block from 820B7C34h-820B7CB0h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820B7CB0h
// Function '?EmitForUnrolled@CCompiler@D3DXShader@@IAAJPAVCNode@2@000PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7CB0);
		  /* 820B7CB0h */ case    0:  		/* cmplwi CR0, R30, 0 */
		/* 820B7CB0h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B7CB0h case    0:*/		return 0x820B7CB4;
		  /* 820B7CB4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 820B7CB4h case    1:*/		if ( regs.CR[0].eq ) { return 0x820B7CC4;  }
		/* 820B7CB4h case    1:*/		return 0x820B7CB8;
		  /* 820B7CB8h */ case    2:  		/* mtspr CTR, R30 */
		/* 820B7CB8h case    2:*/		regs.CTR = regs.R30;
		/* 820B7CB8h case    2:*/		return 0x820B7CBC;
		  /* 820B7CBCh */ case    3:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B7CBCh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B7CBCh case    3:*/		return 0x820B7CC0;
		  /* 820B7CC0h */ case    4:  		/* bc 16, CR0_LT, -4 */
		/* 820B7CC0h case    4:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7CBC;  }
		/* 820B7CC0h case    4:*/		return 0x820B7CC4;
	}
	return 0x820B7CC4;
} // Block from 820B7CB0h-820B7CC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820B7CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7CC4);
		  /* 820B7CC4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B7CC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B7CC4h case    0:*/		return 0x820B7CC8;
		  /* 820B7CC8h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B7CC8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B7CE4;  }
		/* 820B7CC8h case    1:*/		return 0x820B7CCC;
		  /* 820B7CCCh */ case    2:  		/* addi R11, R15, -4 */
		/* 820B7CCCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B7CCCh case    2:*/		return 0x820B7CD0;
		  /* 820B7CD0h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B7CD0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B7CD0h case    3:*/		return 0x820B7CD4;
		  /* 820B7CD4h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B7CD4h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B7CE4;  }
		/* 820B7CD4h case    4:*/		return 0x820B7CD8;
		  /* 820B7CD8h */ case    5:  		/* mtspr CTR, R30 */
		/* 820B7CD8h case    5:*/		regs.CTR = regs.R30;
		/* 820B7CD8h case    5:*/		return 0x820B7CDC;
		  /* 820B7CDCh */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B7CDCh case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B7CDCh case    6:*/		return 0x820B7CE0;
		  /* 820B7CE0h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B7CE0h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7CDC;  }
		/* 820B7CE0h case    7:*/		return 0x820B7CE4;
	}
	return 0x820B7CE4;
} // Block from 820B7CC4h-820B7CE4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B7CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7CE4);
		  /* 820B7CE4h */ case    0:  		/* lwz R29, <#[R1 + 144]> */
		/* 820B7CE4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7CE4h case    0:*/		return 0x820B7CE8;
		  /* 820B7CE8h */ case    1:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820B7CE8h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820B7CE8h case    1:*/		return 0x820B7CEC;
		  /* 820B7CECh */ case    2:  		/* li R9, 0 */
		/* 820B7CECh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B7CECh case    2:*/		return 0x820B7CF0;
		  /* 820B7CF0h */ case    3:  		/* li R8, 0 */
		/* 820B7CF0h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B7CF0h case    3:*/		return 0x820B7CF4;
		  /* 820B7CF4h */ case    4:  		/* mr R7, R29 */
		/* 820B7CF4h case    4:*/		regs.R7 = regs.R29;
		/* 820B7CF4h case    4:*/		return 0x820B7CF8;
		  /* 820B7CF8h */ case    5:  		/* mr R6, R28 */
		/* 820B7CF8h case    5:*/		regs.R6 = regs.R28;
		/* 820B7CF8h case    5:*/		return 0x820B7CFC;
		  /* 820B7CFCh */ case    6:  		/* oris R5, R30, 4112 */
		/* 820B7CFCh case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820B7CFCh case    6:*/		return 0x820B7D00;
		  /* 820B7D00h */ case    7:  		/* mr R4, R16 */
		/* 820B7D00h case    7:*/		regs.R4 = regs.R16;
		/* 820B7D00h case    7:*/		return 0x820B7D04;
		  /* 820B7D04h */ case    8:  		/* mr R3, R14 */
		/* 820B7D04h case    8:*/		regs.R3 = regs.R14;
		/* 820B7D04h case    8:*/		return 0x820B7D08;
		  /* 820B7D08h */ case    9:  		/* bl -29184 */
		/* 820B7D08h case    9:*/		regs.LR = 0x820B7D0C; return 0x820B0B08;
		/* 820B7D08h case    9:*/		return 0x820B7D0C;
		  /* 820B7D0Ch */ case   10:  		/* or. R31, R3, R3 */
		/* 820B7D0Ch case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7D0Ch case   10:*/		return 0x820B7D10;
		  /* 820B7D10h */ case   11:  		/* bc 12, CR0_LT, 26312 */
		/* 820B7D10h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7D10h case   11:*/		return 0x820B7D14;
		  /* 820B7D14h */ case   12:  		/* li R9, 4 */
		/* 820B7D14h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B7D14h case   12:*/		return 0x820B7D18;
		  /* 820B7D18h */ case   13:  		/* mr R8, R28 */
		/* 820B7D18h case   13:*/		regs.R8 = regs.R28;
		/* 820B7D18h case   13:*/		return 0x820B7D1C;
		  /* 820B7D1Ch */ case   14:  		/* mr R7, R29 */
		/* 820B7D1Ch case   14:*/		regs.R7 = regs.R29;
		/* 820B7D1Ch case   14:*/		return 0x820B7D20;
		  /* 820B7D20h */ case   15:  		/* oris R5, R30, 8208 */
		/* 820B7D20h case   15:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2010);
		/* 820B7D20h case   15:*/		return 0x820B7D24;
		  /* 820B7D24h */ case   16:  		/* b 23052 */
		/* 820B7D24h case   16:*/		return 0x820BD730;
		/* 820B7D24h case   16:*/		return 0x820B7D28;
		  /* 820B7D28h */ case   17:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B7D28h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B7D28h case   17:*/		return 0x820B7D2C;
		  /* 820B7D2Ch */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 820B7D2Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B7D2Ch case   18:*/		return 0x820B7D30;
		  /* 820B7D30h */ case   19:  		/* bc 12, CR6_EQ, 26272 */
		/* 820B7D30h case   19:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B7D30h case   19:*/		return 0x820B7D34;
		  /* 820B7D34h */ case   20:  		/* cmplwi CR6, R15, 0 */
		/* 820B7D34h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B7D34h case   20:*/		return 0x820B7D38;
		  /* 820B7D38h */ case   21:  		/* bc 12, CR6_EQ, 3220 */
		/* 820B7D38h case   21:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B7D38h case   21:*/		return 0x820B7D3C;
		  /* 820B7D3Ch */ case   22:  		/* cmplwi CR6, R30, 0 */
		/* 820B7D3Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B7D3Ch case   22:*/		return 0x820B7D40;
		  /* 820B7D40h */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 820B7D40h case   23:*/		if ( regs.CR[6].eq ) { return 0x820B7D60;  }
		/* 820B7D40h case   23:*/		return 0x820B7D44;
		  /* 820B7D44h */ case   24:  		/* addi R11, R15, -4 */
		/* 820B7D44h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B7D44h case   24:*/		return 0x820B7D48;
		  /* 820B7D48h */ case   25:  		/* li R10, -1 */
		/* 820B7D48h case   25:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B7D48h case   25:*/		return 0x820B7D4C;
		  /* 820B7D4Ch */ case   26:  		/* cmplwi CR0, R30, 0 */
		/* 820B7D4Ch case   26:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B7D4Ch case   26:*/		return 0x820B7D50;
		  /* 820B7D50h */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 820B7D50h case   27:*/		if ( regs.CR[0].eq ) { return 0x820B7D60;  }
		/* 820B7D50h case   27:*/		return 0x820B7D54;
		  /* 820B7D54h */ case   28:  		/* mtspr CTR, R30 */
		/* 820B7D54h case   28:*/		regs.CTR = regs.R30;
		/* 820B7D54h case   28:*/		return 0x820B7D58;
		  /* 820B7D58h */ case   29:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B7D58h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B7D58h case   29:*/		return 0x820B7D5C;
		  /* 820B7D5Ch */ case   30:  		/* bc 16, CR0_LT, -4 */
		/* 820B7D5Ch case   30:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7D58;  }
		/* 820B7D5Ch case   30:*/		return 0x820B7D60;
	}
	return 0x820B7D60;
} // Block from 820B7CE4h-820B7D60h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820B7D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7D60);
		  /* 820B7D60h */ case    0:  		/* mr R7, R15 */
		/* 820B7D60h case    0:*/		regs.R7 = regs.R15;
		/* 820B7D60h case    0:*/		return 0x820B7D64;
		  /* 820B7D64h */ case    1:  		/* li R6, 0 */
		/* 820B7D64h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B7D64h case    1:*/		return 0x820B7D68;
		  /* 820B7D68h */ case    2:  		/* mr R8, R30 */
		/* 820B7D68h case    2:*/		regs.R8 = regs.R30;
		/* 820B7D68h case    2:*/		return 0x820B7D6C;
		  /* 820B7D6Ch */ case    3:  		/* lwz R5, <#[R1 + 144]> */
		/* 820B7D6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7D6Ch case    3:*/		return 0x820B7D70;
		  /* 820B7D70h */ case    4:  		/* mr R4, R16 */
		/* 820B7D70h case    4:*/		regs.R4 = regs.R16;
		/* 820B7D70h case    4:*/		return 0x820B7D74;
		  /* 820B7D74h */ case    5:  		/* mr R3, R14 */
		/* 820B7D74h case    5:*/		regs.R3 = regs.R14;
		/* 820B7D74h case    5:*/		return 0x820B7D78;
		  /* 820B7D78h */ case    6:  		/* bl -22488 */
		/* 820B7D78h case    6:*/		regs.LR = 0x820B7D7C; return 0x820B25A0;
		/* 820B7D78h case    6:*/		return 0x820B7D7C;
		  /* 820B7D7Ch */ case    7:  		/* b 22980 */
		/* 820B7D7Ch case    7:*/		return 0x820BD740;
		/* 820B7D7Ch case    7:*/		return 0x820B7D80;
		  /* 820B7D80h */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B7D80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B7D80h case    8:*/		return 0x820B7D84;
		  /* 820B7D84h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820B7D84h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B7D84h case    9:*/		return 0x820B7D88;
		  /* 820B7D88h */ case   10:  		/* bc 12, CR6_EQ, 26184 */
		/* 820B7D88h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B7D88h case   10:*/		return 0x820B7D8C;
		  /* 820B7D8Ch */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820B7D8Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B7D8Ch case   11:*/		return 0x820B7D90;
		  /* 820B7D90h */ case   12:  		/* bc 12, CR6_EQ, 3132 */
		/* 820B7D90h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B7D90h case   12:*/		return 0x820B7D94;
		  /* 820B7D94h */ case   13:  		/* lwz R31, <#[R1 + 160]> */
		/* 820B7D94h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B7D94h case   13:*/		return 0x820B7D98;
		  /* 820B7D98h */ case   14:  		/* mr R3, R14 */
		/* 820B7D98h case   14:*/		regs.R3 = regs.R14;
		/* 820B7D98h case   14:*/		return 0x820B7D9C;
		  /* 820B7D9Ch */ case   15:  		/* cmplwi CR6, R31, 1 */
		/* 820B7D9Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 820B7D9Ch case   15:*/		return 0x820B7DA0;
		  /* 820B7DA0h */ case   16:  		/* bc 4, CR6_EQ, 76 */
		/* 820B7DA0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820B7DEC;  }
		/* 820B7DA0h case   16:*/		return 0x820B7DA4;
		  /* 820B7DA4h */ case   17:  		/* li R29, -1 */
		/* 820B7DA4h case   17:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B7DA4h case   17:*/		return 0x820B7DA8;
		  /* 820B7DA8h */ case   18:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B7DA8h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7DA8h case   18:*/		return 0x820B7DAC;
		  /* 820B7DACh */ case   19:  		/* li R8, 1 */
		/* 820B7DACh case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820B7DACh case   19:*/		return 0x820B7DB0;
		  /* 820B7DB0h */ case   20:  		/* stw R29, <#[R1 + 412]> */
		/* 820B7DB0h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000019C) );
		/* 820B7DB0h case   20:*/		return 0x820B7DB4;
		  /* 820B7DB4h */ case   21:  		/* addi R6, R1, 420 */
		/* 820B7DB4h case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1A4);
		/* 820B7DB4h case   21:*/		return 0x820B7DB8;
		  /* 820B7DB8h */ case   22:  		/* stw R29, <#[R1 + 420]> */
		/* 820B7DB8h case   22:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000001A4) );
		/* 820B7DB8h case   22:*/		return 0x820B7DBC;
		  /* 820B7DBCh */ case   23:  		/* addi R5, R1, 412 */
		/* 820B7DBCh case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x19C);
		/* 820B7DBCh case   23:*/		return 0x820B7DC0;
		  /* 820B7DC0h */ case   24:  		/* stw R29, <#[R15]> */
		/* 820B7DC0h case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820B7DC0h case   24:*/		return 0x820B7DC4;
		  /* 820B7DC4h */ case   25:  		/* mr R4, R16 */
		/* 820B7DC4h case   25:*/		regs.R4 = regs.R16;
		/* 820B7DC4h case   25:*/		return 0x820B7DC8;
		  /* 820B7DC8h */ case   26:  		/* bl -15384 */
		/* 820B7DC8h case   26:*/		regs.LR = 0x820B7DCC; return 0x820B41B0;
		/* 820B7DC8h case   26:*/		return 0x820B7DCC;
		  /* 820B7DCCh */ case   27:  		/* or. R31, R3, R3 */
		/* 820B7DCCh case   27:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7DCCh case   27:*/		return 0x820B7DD0;
		  /* 820B7DD0h */ case   28:  		/* bc 12, CR0_LT, 26120 */
		/* 820B7DD0h case   28:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7DD0h case   28:*/		return 0x820B7DD4;
		  /* 820B7DD4h */ case   29:  		/* addi R8, R1, 412 */
		/* 820B7DD4h case   29:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x19C);
		/* 820B7DD4h case   29:*/		return 0x820B7DD8;
		  /* 820B7DD8h */ case   30:  		/* addi R7, R1, 420 */
		/* 820B7DD8h case   30:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A4);
		/* 820B7DD8h case   30:*/		return 0x820B7DDC;
		  /* 820B7DDCh */ case   31:  		/* lis R5, 8224 */
		/* 820B7DDCh case   31:*/		cpu::op::lis<0>(regs,&regs.R5,0x2020);
		/* 820B7DDCh case   31:*/		return 0x820B7DE0;
		  /* 820B7DE0h */ case   32:  		/* li R9, 23 */
		/* 820B7DE0h case   32:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B7DE0h case   32:*/		return 0x820B7DE4;
		  /* 820B7DE4h */ case   33:  		/* ori R5, R5, 1 */
		/* 820B7DE4h case   33:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B7DE4h case   33:*/		return 0x820B7DE8;
		  /* 820B7DE8h */ case   34:  		/* b 22856 */
		/* 820B7DE8h case   34:*/		return 0x820BD730;
		/* 820B7DE8h case   34:*/		return 0x820B7DEC;
	}
	return 0x820B7DEC;
} // Block from 820B7D60h-820B7DECh (35 instructions)

//////////////////////////////////////////////////////
// Block at 820B7DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7DEC);
		  /* 820B7DECh */ case    0:  		/* cmplwi CR6, R31, 2 */
		/* 820B7DECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000002);
		/* 820B7DECh case    0:*/		return 0x820B7DF0;
		  /* 820B7DF0h */ case    1:  		/* bc 4, CR6_EQ, 112 */
		/* 820B7DF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B7E60;  }
		/* 820B7DF0h case    1:*/		return 0x820B7DF4;
		  /* 820B7DF4h */ case    2:  		/* li R29, -1 */
		/* 820B7DF4h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B7DF4h case    2:*/		return 0x820B7DF8;
		  /* 820B7DF8h */ case    3:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B7DF8h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7DF8h case    3:*/		return 0x820B7DFC;
		  /* 820B7DFCh */ case    4:  		/* lis R5, 8272 */
		/* 820B7DFCh case    4:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B7DFCh case    4:*/		return 0x820B7E00;
		  /* 820B7E00h */ case    5:  		/* stw R29, <#[R1 + 428]> */
		/* 820B7E00h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000001AC) );
		/* 820B7E00h case    5:*/		return 0x820B7E04;
		  /* 820B7E04h */ case    6:  		/* addi R8, R7, 4 */
		/* 820B7E04h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R7,0x4);
		/* 820B7E04h case    6:*/		return 0x820B7E08;
		  /* 820B7E08h */ case    7:  		/* stw R29, <#[R1 + 384]> */
		/* 820B7E08h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000180) );
		/* 820B7E08h case    7:*/		return 0x820B7E0C;
		  /* 820B7E0Ch */ case    8:  		/* li R9, 0 */
		/* 820B7E0Ch case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B7E0Ch case    8:*/		return 0x820B7E10;
		  /* 820B7E10h */ case    9:  		/* stw R29, <#[R1 + 364]> */
		/* 820B7E10h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000016C) );
		/* 820B7E10h case    9:*/		return 0x820B7E14;
		  /* 820B7E14h */ case   10:  		/* addi R6, R1, 428 */
		/* 820B7E14h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1AC);
		/* 820B7E14h case   10:*/		return 0x820B7E18;
		  /* 820B7E18h */ case   11:  		/* stw R29, <#[R15]> */
		/* 820B7E18h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820B7E18h case   11:*/		return 0x820B7E1C;
		  /* 820B7E1Ch */ case   12:  		/* ori R5, R5, 1 */
		/* 820B7E1Ch case   12:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B7E1Ch case   12:*/		return 0x820B7E20;
		  /* 820B7E20h */ case   13:  		/* mr R4, R16 */
		/* 820B7E20h case   13:*/		regs.R4 = regs.R16;
		/* 820B7E20h case   13:*/		return 0x820B7E24;
		  /* 820B7E24h */ case   14:  		/* bl -29468 */
		/* 820B7E24h case   14:*/		regs.LR = 0x820B7E28; return 0x820B0B08;
		/* 820B7E24h case   14:*/		return 0x820B7E28;
		  /* 820B7E28h */ case   15:  		/* or. R31, R3, R3 */
		/* 820B7E28h case   15:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7E28h case   15:*/		return 0x820B7E2C;
		  /* 820B7E2Ch */ case   16:  		/* bc 12, CR0_LT, 26028 */
		/* 820B7E2Ch case   16:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7E2Ch case   16:*/		return 0x820B7E30;
		  /* 820B7E30h */ case   17:  		/* li R8, 1 */
		/* 820B7E30h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820B7E30h case   17:*/		return 0x820B7E34;
		  /* 820B7E34h */ case   18:  		/* addi R7, R1, 428 */
		/* 820B7E34h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1AC);
		/* 820B7E34h case   18:*/		return 0x820B7E38;
		  /* 820B7E38h */ case   19:  		/* addi R6, R1, 364 */
		/* 820B7E38h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x16C);
		/* 820B7E38h case   19:*/		return 0x820B7E3C;
		  /* 820B7E3Ch */ case   20:  		/* addi R5, R1, 384 */
		/* 820B7E3Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x180);
		/* 820B7E3Ch case   20:*/		return 0x820B7E40;
		  /* 820B7E40h */ case   21:  		/* mr R4, R16 */
		/* 820B7E40h case   21:*/		regs.R4 = regs.R16;
		/* 820B7E40h case   21:*/		return 0x820B7E44;
		  /* 820B7E44h */ case   22:  		/* mr R3, R14 */
		/* 820B7E44h case   22:*/		regs.R3 = regs.R14;
		/* 820B7E44h case   22:*/		return 0x820B7E48;
		  /* 820B7E48h */ case   23:  		/* bl -15512 */
		/* 820B7E48h case   23:*/		regs.LR = 0x820B7E4C; return 0x820B41B0;
		/* 820B7E48h case   23:*/		return 0x820B7E4C;
		  /* 820B7E4Ch */ case   24:  		/* or. R31, R3, R3 */
		/* 820B7E4Ch case   24:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7E4Ch case   24:*/		return 0x820B7E50;
		  /* 820B7E50h */ case   25:  		/* bc 12, CR0_LT, 25992 */
		/* 820B7E50h case   25:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7E50h case   25:*/		return 0x820B7E54;
		  /* 820B7E54h */ case   26:  		/* addi R8, R1, 384 */
		/* 820B7E54h case   26:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x180);
		/* 820B7E54h case   26:*/		return 0x820B7E58;
		  /* 820B7E58h */ case   27:  		/* addi R7, R1, 364 */
		/* 820B7E58h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x16C);
		/* 820B7E58h case   27:*/		return 0x820B7E5C;
		  /* 820B7E5Ch */ case   28:  		/* b -128 */
		/* 820B7E5Ch case   28:*/		return 0x820B7DDC;
		/* 820B7E5Ch case   28:*/		return 0x820B7E60;
	}
	return 0x820B7E60;
} // Block from 820B7DECh-820B7E60h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820B7E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7E60);
		  /* 820B7E60h */ case    0:  		/* cmplwi CR6, R31, 3 */
		/* 820B7E60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000003);
		/* 820B7E60h case    0:*/		return 0x820B7E64;
		  /* 820B7E64h */ case    1:  		/* bc 4, CR6_EQ, 172 */
		/* 820B7E64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B7F10;  }
		/* 820B7E64h case    1:*/		return 0x820B7E68;
		  /* 820B7E68h */ case    2:  		/* addi R10, R1, 496 */
		/* 820B7E68h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1F0);
		/* 820B7E68h case    2:*/		return 0x820B7E6C;
		  /* 820B7E6Ch */ case    3:  		/* lwz R30, <#[R1 + 144]> */
		/* 820B7E6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7E6Ch case    3:*/		return 0x820B7E70;
		  /* 820B7E70h */ case    4:  		/* li R29, -1 */
		/* 820B7E70h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B7E70h case    4:*/		return 0x820B7E74;
		  /* 820B7E74h */ case    5:  		/* lis R8, 8272 */
		/* 820B7E74h case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0x2050);
		/* 820B7E74h case    5:*/		return 0x820B7E78;
		  /* 820B7E78h */ case    6:  		/* stw R29, <#[R1 + 316]> */
		/* 820B7E78h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000013C) );
		/* 820B7E78h case    6:*/		return 0x820B7E7C;
		  /* 820B7E7Ch */ case    7:  		/* li R9, 0 */
		/* 820B7E7Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B7E7Ch case    7:*/		return 0x820B7E80;
		  /* 820B7E80h */ case    8:  		/* stw R29, <#[R1 + 424]> */
		/* 820B7E80h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000001A8) );
		/* 820B7E80h case    8:*/		return 0x820B7E84;
		  /* 820B7E84h */ case    9:  		/* ori R28, R8, 1 */
		/* 820B7E84h case    9:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R8,0x1);
		/* 820B7E84h case    9:*/		return 0x820B7E88;
		  /* 820B7E88h */ case   10:  		/* stw R29, <#[R10]> */
		/* 820B7E88h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000000) );
		/* 820B7E88h case   10:*/		return 0x820B7E8C;
		  /* 820B7E8Ch */ case   11:  		/* addi R8, R30, 4 */
		/* 820B7E8Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x4);
		/* 820B7E8Ch case   11:*/		return 0x820B7E90;
		  /* 820B7E90h */ case   12:  		/* stw R29, <#[R10 + 4]> */
		/* 820B7E90h case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000004) );
		/* 820B7E90h case   12:*/		return 0x820B7E94;
		  /* 820B7E94h */ case   13:  		/* stw R29, <#[R15]> */
		/* 820B7E94h case   13:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820B7E94h case   13:*/		return 0x820B7E98;
		  /* 820B7E98h */ case   14:  		/* mr R7, R30 */
		/* 820B7E98h case   14:*/		regs.R7 = regs.R30;
		/* 820B7E98h case   14:*/		return 0x820B7E9C;
		  /* 820B7E9Ch */ case   15:  		/* addi R6, R1, 496 */
		/* 820B7E9Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1F0);
		/* 820B7E9Ch case   15:*/		return 0x820B7EA0;
		  /* 820B7EA0h */ case   16:  		/* mr R5, R28 */
		/* 820B7EA0h case   16:*/		regs.R5 = regs.R28;
		/* 820B7EA0h case   16:*/		return 0x820B7EA4;
		  /* 820B7EA4h */ case   17:  		/* mr R4, R16 */
		/* 820B7EA4h case   17:*/		regs.R4 = regs.R16;
		/* 820B7EA4h case   17:*/		return 0x820B7EA8;
		  /* 820B7EA8h */ case   18:  		/* mr R11, R29 */
		/* 820B7EA8h case   18:*/		regs.R11 = regs.R29;
		/* 820B7EA8h case   18:*/		return 0x820B7EAC;
		  /* 820B7EACh */ case   19:  		/* bl -29604 */
		/* 820B7EACh case   19:*/		regs.LR = 0x820B7EB0; return 0x820B0B08;
		/* 820B7EACh case   19:*/		return 0x820B7EB0;
		  /* 820B7EB0h */ case   20:  		/* or. R31, R3, R3 */
		/* 820B7EB0h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7EB0h case   20:*/		return 0x820B7EB4;
		  /* 820B7EB4h */ case   21:  		/* bc 12, CR0_LT, 25892 */
		/* 820B7EB4h case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7EB4h case   21:*/		return 0x820B7EB8;
		  /* 820B7EB8h */ case   22:  		/* li R9, 0 */
		/* 820B7EB8h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B7EB8h case   22:*/		return 0x820B7EBC;
		  /* 820B7EBCh */ case   23:  		/* addi R8, R30, 8 */
		/* 820B7EBCh case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x8);
		/* 820B7EBCh case   23:*/		return 0x820B7EC0;
		  /* 820B7EC0h */ case   24:  		/* addi R7, R1, 496 */
		/* 820B7EC0h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1F0);
		/* 820B7EC0h case   24:*/		return 0x820B7EC4;
		  /* 820B7EC4h */ case   25:  		/* addi R6, R1, 500 */
		/* 820B7EC4h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1F4);
		/* 820B7EC4h case   25:*/		return 0x820B7EC8;
		  /* 820B7EC8h */ case   26:  		/* mr R5, R28 */
		/* 820B7EC8h case   26:*/		regs.R5 = regs.R28;
		/* 820B7EC8h case   26:*/		return 0x820B7ECC;
		  /* 820B7ECCh */ case   27:  		/* mr R4, R16 */
		/* 820B7ECCh case   27:*/		regs.R4 = regs.R16;
		/* 820B7ECCh case   27:*/		return 0x820B7ED0;
		  /* 820B7ED0h */ case   28:  		/* mr R3, R14 */
		/* 820B7ED0h case   28:*/		regs.R3 = regs.R14;
		/* 820B7ED0h case   28:*/		return 0x820B7ED4;
		  /* 820B7ED4h */ case   29:  		/* bl -29644 */
		/* 820B7ED4h case   29:*/		regs.LR = 0x820B7ED8; return 0x820B0B08;
		/* 820B7ED4h case   29:*/		return 0x820B7ED8;
		  /* 820B7ED8h */ case   30:  		/* or. R31, R3, R3 */
		/* 820B7ED8h case   30:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7ED8h case   30:*/		return 0x820B7EDC;
		  /* 820B7EDCh */ case   31:  		/* bc 12, CR0_LT, 25852 */
		/* 820B7EDCh case   31:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7EDCh case   31:*/		return 0x820B7EE0;
		  /* 820B7EE0h */ case   32:  		/* li R8, 1 */
		/* 820B7EE0h case   32:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820B7EE0h case   32:*/		return 0x820B7EE4;
		  /* 820B7EE4h */ case   33:  		/* addi R7, R1, 500 */
		/* 820B7EE4h case   33:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1F4);
		/* 820B7EE4h case   33:*/		return 0x820B7EE8;
		  /* 820B7EE8h */ case   34:  		/* addi R6, R1, 424 */
		/* 820B7EE8h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1A8);
		/* 820B7EE8h case   34:*/		return 0x820B7EEC;
		  /* 820B7EECh */ case   35:  		/* addi R5, R1, 316 */
		/* 820B7EECh case   35:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x13C);
		/* 820B7EECh case   35:*/		return 0x820B7EF0;
		  /* 820B7EF0h */ case   36:  		/* mr R4, R16 */
		/* 820B7EF0h case   36:*/		regs.R4 = regs.R16;
		/* 820B7EF0h case   36:*/		return 0x820B7EF4;
		  /* 820B7EF4h */ case   37:  		/* mr R3, R14 */
		/* 820B7EF4h case   37:*/		regs.R3 = regs.R14;
		/* 820B7EF4h case   37:*/		return 0x820B7EF8;
		  /* 820B7EF8h */ case   38:  		/* bl -15688 */
		/* 820B7EF8h case   38:*/		regs.LR = 0x820B7EFC; return 0x820B41B0;
		/* 820B7EF8h case   38:*/		return 0x820B7EFC;
		  /* 820B7EFCh */ case   39:  		/* or. R31, R3, R3 */
		/* 820B7EFCh case   39:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7EFCh case   39:*/		return 0x820B7F00;
		  /* 820B7F00h */ case   40:  		/* bc 12, CR0_LT, 25816 */
		/* 820B7F00h case   40:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7F00h case   40:*/		return 0x820B7F04;
		  /* 820B7F04h */ case   41:  		/* addi R8, R1, 316 */
		/* 820B7F04h case   41:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x13C);
		/* 820B7F04h case   41:*/		return 0x820B7F08;
		  /* 820B7F08h */ case   42:  		/* addi R7, R1, 424 */
		/* 820B7F08h case   42:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A8);
		/* 820B7F08h case   42:*/		return 0x820B7F0C;
		  /* 820B7F0Ch */ case   43:  		/* b -304 */
		/* 820B7F0Ch case   43:*/		return 0x820B7DDC;
		/* 820B7F0Ch case   43:*/		return 0x820B7F10;
	}
	return 0x820B7F10;
} // Block from 820B7E60h-820B7F10h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820B7F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7F10);
		  /* 820B7F10h */ case    0:  		/* mulli R4, R31, 3 */
		/* 820B7F10h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R31,0x3);
		/* 820B7F10h case    0:*/		return 0x820B7F14;
		  /* 820B7F14h */ case    1:  		/* bl -30756 */
		/* 820B7F14h case    1:*/		regs.LR = 0x820B7F18; return 0x820B06F0;
		/* 820B7F14h case    1:*/		return 0x820B7F18;
		  /* 820B7F18h */ case    2:  		/* or. R11, R3, R3 */
		/* 820B7F18h case    2:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820B7F18h case    2:*/		return 0x820B7F1C;
		  /* 820B7F1Ch */ case    3:  		/* bc 12, CR0_EQ, 21764 */
		/* 820B7F1Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B7F1Ch case    3:*/		return 0x820B7F20;
		  /* 820B7F20h */ case    4:  		/* li R10, 3 */
		/* 820B7F20h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820B7F20h case    4:*/		return 0x820B7F24;
		  /* 820B7F24h */ case    5:  		/* addi R9, R1, 124 */
		/* 820B7F24h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820B7F24h case    5:*/		return 0x820B7F28;
		  /* 820B7F28h */ case    6:  		/* rlwinm R8, R31, 2, 0, 29 */
		/* 820B7F28h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R31);
		/* 820B7F28h case    6:*/		return 0x820B7F2C;
		  /* 820B7F2Ch */ case    7:  		/* mtspr CTR, R10 */
		/* 820B7F2Ch case    7:*/		regs.CTR = regs.R10;
		/* 820B7F2Ch case    7:*/		return 0x820B7F30;
		  /* 820B7F30h */ case    8:  		/* stwu R11, <#[R9 + 4]> */
		/* 820B7F30h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820B7F30h case    8:*/		return 0x820B7F34;
		  /* 820B7F34h */ case    9:  		/* add R11, R11, R8 */
		/* 820B7F34h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820B7F34h case    9:*/		return 0x820B7F38;
		  /* 820B7F38h */ case   10:  		/* bc 16, CR0_LT, -8 */
		/* 820B7F38h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7F30;  }
		/* 820B7F38h case   10:*/		return 0x820B7F3C;
		  /* 820B7F3Ch */ case   11:  		/* lwz R27, <#[R1 + 128]> */
		/* 820B7F3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 820B7F3Ch case   11:*/		return 0x820B7F40;
		  /* 820B7F40h */ case   12:  		/* li R29, -1 */
		/* 820B7F40h case   12:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B7F40h case   12:*/		return 0x820B7F44;
		  /* 820B7F44h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 820B7F44h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820B7F44h case   13:*/		return 0x820B7F48;
		  /* 820B7F48h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 820B7F48h case   14:*/		if ( regs.CR[6].eq ) { return 0x820B7F68;  }
		/* 820B7F48h case   14:*/		return 0x820B7F4C;
		  /* 820B7F4Ch */ case   15:  		/* addi R11, R27, -4 */
		/* 820B7F4Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B7F4Ch case   15:*/		return 0x820B7F50;
		  /* 820B7F50h */ case   16:  		/* mr R10, R29 */
		/* 820B7F50h case   16:*/		regs.R10 = regs.R29;
		/* 820B7F50h case   16:*/		return 0x820B7F54;
		  /* 820B7F54h */ case   17:  		/* cmplwi CR0, R31, 0 */
		/* 820B7F54h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820B7F54h case   17:*/		return 0x820B7F58;
		  /* 820B7F58h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 820B7F58h case   18:*/		if ( regs.CR[0].eq ) { return 0x820B7F68;  }
		/* 820B7F58h case   18:*/		return 0x820B7F5C;
		  /* 820B7F5Ch */ case   19:  		/* mtspr CTR, R31 */
		/* 820B7F5Ch case   19:*/		regs.CTR = regs.R31;
		/* 820B7F5Ch case   19:*/		return 0x820B7F60;
		  /* 820B7F60h */ case   20:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B7F60h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B7F60h case   20:*/		return 0x820B7F64;
		  /* 820B7F64h */ case   21:  		/* bc 16, CR0_LT, -4 */
		/* 820B7F64h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7F60;  }
		/* 820B7F64h case   21:*/		return 0x820B7F68;
	}
	return 0x820B7F68;
} // Block from 820B7F10h-820B7F68h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820B7F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7F68);
		  /* 820B7F68h */ case    0:  		/* lwz R26, <#[R1 + 132]> */
		/* 820B7F68h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000084) );
		/* 820B7F68h case    0:*/		return 0x820B7F6C;
		  /* 820B7F6Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 820B7F6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820B7F6Ch case    1:*/		return 0x820B7F70;
		  /* 820B7F70h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B7F70h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B7F90;  }
		/* 820B7F70h case    2:*/		return 0x820B7F74;
		  /* 820B7F74h */ case    3:  		/* addi R11, R26, -4 */
		/* 820B7F74h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820B7F74h case    3:*/		return 0x820B7F78;
		  /* 820B7F78h */ case    4:  		/* mr R10, R29 */
		/* 820B7F78h case    4:*/		regs.R10 = regs.R29;
		/* 820B7F78h case    4:*/		return 0x820B7F7C;
		  /* 820B7F7Ch */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 820B7F7Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820B7F7Ch case    5:*/		return 0x820B7F80;
		  /* 820B7F80h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B7F80h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B7F90;  }
		/* 820B7F80h case    6:*/		return 0x820B7F84;
		  /* 820B7F84h */ case    7:  		/* mtspr CTR, R31 */
		/* 820B7F84h case    7:*/		regs.CTR = regs.R31;
		/* 820B7F84h case    7:*/		return 0x820B7F88;
		  /* 820B7F88h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B7F88h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B7F88h case    8:*/		return 0x820B7F8C;
		  /* 820B7F8Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B7F8Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7F88;  }
		/* 820B7F8Ch case    9:*/		return 0x820B7F90;
	}
	return 0x820B7F90;
} // Block from 820B7F68h-820B7F90h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B7F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7F90);
		  /* 820B7F90h */ case    0:  		/* lwz R28, <#[R1 + 136]> */
		/* 820B7F90h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000088) );
		/* 820B7F90h case    0:*/		return 0x820B7F94;
		  /* 820B7F94h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 820B7F94h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820B7F94h case    1:*/		return 0x820B7F98;
		  /* 820B7F98h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B7F98h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B7FB8;  }
		/* 820B7F98h case    2:*/		return 0x820B7F9C;
		  /* 820B7F9Ch */ case    3:  		/* addi R11, R28, -4 */
		/* 820B7F9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B7F9Ch case    3:*/		return 0x820B7FA0;
		  /* 820B7FA0h */ case    4:  		/* mr R10, R29 */
		/* 820B7FA0h case    4:*/		regs.R10 = regs.R29;
		/* 820B7FA0h case    4:*/		return 0x820B7FA4;
		  /* 820B7FA4h */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 820B7FA4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820B7FA4h case    5:*/		return 0x820B7FA8;
		  /* 820B7FA8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B7FA8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B7FB8;  }
		/* 820B7FA8h case    6:*/		return 0x820B7FAC;
		  /* 820B7FACh */ case    7:  		/* mtspr CTR, R31 */
		/* 820B7FACh case    7:*/		regs.CTR = regs.R31;
		/* 820B7FACh case    7:*/		return 0x820B7FB0;
		  /* 820B7FB0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B7FB0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B7FB0h case    8:*/		return 0x820B7FB4;
		  /* 820B7FB4h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B7FB4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B7FB0;  }
		/* 820B7FB4h case    9:*/		return 0x820B7FB8;
	}
	return 0x820B7FB8;
} // Block from 820B7F90h-820B7FB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B7FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B7FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B7FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B7FB8);
		  /* 820B7FB8h */ case    0:  		/* stw R29, <#[R1 + 284]> */
		/* 820B7FB8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000011C) );
		/* 820B7FB8h case    0:*/		return 0x820B7FBC;
		  /* 820B7FBCh */ case    1:  		/* rlwinm R30, R31, 0, 12, 31 */
		/* 820B7FBCh case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R31);
		/* 820B7FBCh case    1:*/		return 0x820B7FC0;
		  /* 820B7FC0h */ case    2:  		/* stw R29, <#[R1 + 324]> */
		/* 820B7FC0h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000144) );
		/* 820B7FC0h case    2:*/		return 0x820B7FC4;
		  /* 820B7FC4h */ case    3:  		/* li R9, 4 */
		/* 820B7FC4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B7FC4h case    3:*/		return 0x820B7FC8;
		  /* 820B7FC8h */ case    4:  		/* stw R29, <#[R15]> */
		/* 820B7FC8h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820B7FC8h case    4:*/		return 0x820B7FCC;
		  /* 820B7FCCh */ case    5:  		/* mr R6, R27 */
		/* 820B7FCCh case    5:*/		regs.R6 = regs.R27;
		/* 820B7FCCh case    5:*/		return 0x820B7FD0;
		  /* 820B7FD0h */ case    6:  		/* lwz R8, <#[R1 + 144]> */
		/* 820B7FD0h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 820B7FD0h case    6:*/		return 0x820B7FD4;
		  /* 820B7FD4h */ case    7:  		/* oris R5, R30, 8272 */
		/* 820B7FD4h case    7:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2050);
		/* 820B7FD4h case    7:*/		return 0x820B7FD8;
		  /* 820B7FD8h */ case    8:  		/* mr R4, R16 */
		/* 820B7FD8h case    8:*/		regs.R4 = regs.R16;
		/* 820B7FD8h case    8:*/		return 0x820B7FDC;
		  /* 820B7FDCh */ case    9:  		/* mr R3, R14 */
		/* 820B7FDCh case    9:*/		regs.R3 = regs.R14;
		/* 820B7FDCh case    9:*/		return 0x820B7FE0;
		  /* 820B7FE0h */ case   10:  		/* mr R7, R8 */
		/* 820B7FE0h case   10:*/		regs.R7 = regs.R8;
		/* 820B7FE0h case   10:*/		return 0x820B7FE4;
		  /* 820B7FE4h */ case   11:  		/* bl -29916 */
		/* 820B7FE4h case   11:*/		regs.LR = 0x820B7FE8; return 0x820B0B08;
		/* 820B7FE4h case   11:*/		return 0x820B7FE8;
		  /* 820B7FE8h */ case   12:  		/* or. R31, R3, R3 */
		/* 820B7FE8h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B7FE8h case   12:*/		return 0x820B7FEC;
		  /* 820B7FECh */ case   13:  		/* bc 12, CR0_LT, 25580 */
		/* 820B7FECh case   13:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B7FECh case   13:*/		return 0x820B7FF0;
		  /* 820B7FF0h */ case   14:  		/* li R9, 8 */
		/* 820B7FF0h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820B7FF0h case   14:*/		return 0x820B7FF4;
		  /* 820B7FF4h */ case   15:  		/* li R8, 0 */
		/* 820B7FF4h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B7FF4h case   15:*/		return 0x820B7FF8;
		  /* 820B7FF8h */ case   16:  		/* mr R7, R27 */
		/* 820B7FF8h case   16:*/		regs.R7 = regs.R27;
		/* 820B7FF8h case   16:*/		return 0x820B7FFC;
		  /* 820B7FFCh */ case   17:  		/* mr R6, R26 */
		/* 820B7FFCh case   17:*/		regs.R6 = regs.R26;
		/* 820B7FFCh case   17:*/		return 0x820B8000;
		  /* 820B8000h */ case   18:  		/* oris R5, R30, 4112 */
		/* 820B8000h case   18:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820B8000h case   18:*/		return 0x820B8004;
		  /* 820B8004h */ case   19:  		/* mr R4, R16 */
		/* 820B8004h case   19:*/		regs.R4 = regs.R16;
		/* 820B8004h case   19:*/		return 0x820B8008;
		  /* 820B8008h */ case   20:  		/* mr R3, R14 */
		/* 820B8008h case   20:*/		regs.R3 = regs.R14;
		/* 820B8008h case   20:*/		return 0x820B800C;
		  /* 820B800Ch */ case   21:  		/* bl -29956 */
		/* 820B800Ch case   21:*/		regs.LR = 0x820B8010; return 0x820B0B08;
		/* 820B800Ch case   21:*/		return 0x820B8010;
		  /* 820B8010h */ case   22:  		/* or. R31, R3, R3 */
		/* 820B8010h case   22:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8010h case   22:*/		return 0x820B8014;
		  /* 820B8014h */ case   23:  		/* bc 12, CR0_LT, 25540 */
		/* 820B8014h case   23:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8014h case   23:*/		return 0x820B8018;
		  /* 820B8018h */ case   24:  		/* li R9, 23 */
		/* 820B8018h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B8018h case   24:*/		return 0x820B801C;
		  /* 820B801Ch */ case   25:  		/* mr R8, R27 */
		/* 820B801Ch case   25:*/		regs.R8 = regs.R27;
		/* 820B801Ch case   25:*/		return 0x820B8020;
		  /* 820B8020h */ case   26:  		/* mr R7, R26 */
		/* 820B8020h case   26:*/		regs.R7 = regs.R26;
		/* 820B8020h case   26:*/		return 0x820B8024;
		  /* 820B8024h */ case   27:  		/* mr R6, R28 */
		/* 820B8024h case   27:*/		regs.R6 = regs.R28;
		/* 820B8024h case   27:*/		return 0x820B8028;
		  /* 820B8028h */ case   28:  		/* oris R5, R30, 8240 */
		/* 820B8028h case   28:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2030);
		/* 820B8028h case   28:*/		return 0x820B802C;
		  /* 820B802Ch */ case   29:  		/* mr R4, R16 */
		/* 820B802Ch case   29:*/		regs.R4 = regs.R16;
		/* 820B802Ch case   29:*/		return 0x820B8030;
		  /* 820B8030h */ case   30:  		/* mr R3, R14 */
		/* 820B8030h case   30:*/		regs.R3 = regs.R14;
		/* 820B8030h case   30:*/		return 0x820B8034;
		  /* 820B8034h */ case   31:  		/* bl -29996 */
		/* 820B8034h case   31:*/		regs.LR = 0x820B8038; return 0x820B0B08;
		/* 820B8034h case   31:*/		return 0x820B8038;
		  /* 820B8038h */ case   32:  		/* or. R31, R3, R3 */
		/* 820B8038h case   32:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8038h case   32:*/		return 0x820B803C;
		  /* 820B803Ch */ case   33:  		/* bc 12, CR0_LT, 25500 */
		/* 820B803Ch case   33:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B803Ch case   33:*/		return 0x820B8040;
		  /* 820B8040h */ case   34:  		/* li R9, 6 */
		/* 820B8040h case   34:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820B8040h case   34:*/		return 0x820B8044;
		  /* 820B8044h */ case   35:  		/* mr R8, R28 */
		/* 820B8044h case   35:*/		regs.R8 = regs.R28;
		/* 820B8044h case   35:*/		return 0x820B8048;
		  /* 820B8048h */ case   36:  		/* mr R7, R28 */
		/* 820B8048h case   36:*/		regs.R7 = regs.R28;
		/* 820B8048h case   36:*/		return 0x820B804C;
		  /* 820B804Ch */ case   37:  		/* addi R6, R1, 284 */
		/* 820B804Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x11C);
		/* 820B804Ch case   37:*/		return 0x820B8050;
		  /* 820B8050h */ case   38:  		/* oris R5, R30, 20480 */
		/* 820B8050h case   38:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x5000);
		/* 820B8050h case   38:*/		return 0x820B8054;
		  /* 820B8054h */ case   39:  		/* mr R4, R16 */
		/* 820B8054h case   39:*/		regs.R4 = regs.R16;
		/* 820B8054h case   39:*/		return 0x820B8058;
		  /* 820B8058h */ case   40:  		/* mr R3, R14 */
		/* 820B8058h case   40:*/		regs.R3 = regs.R14;
		/* 820B8058h case   40:*/		return 0x820B805C;
		  /* 820B805Ch */ case   41:  		/* bl -30036 */
		/* 820B805Ch case   41:*/		regs.LR = 0x820B8060; return 0x820B0B08;
		/* 820B805Ch case   41:*/		return 0x820B8060;
		  /* 820B8060h */ case   42:  		/* or. R31, R3, R3 */
		/* 820B8060h case   42:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8060h case   42:*/		return 0x820B8064;
		  /* 820B8064h */ case   43:  		/* bc 12, CR0_LT, 25460 */
		/* 820B8064h case   43:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8064h case   43:*/		return 0x820B8068;
		  /* 820B8068h */ case   44:  		/* lis R5, 4112 */
		/* 820B8068h case   44:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820B8068h case   44:*/		return 0x820B806C;
		  /* 820B806Ch */ case   45:  		/* li R9, 10 */
		/* 820B806Ch case   45:*/		cpu::op::li<0>(regs,&regs.R9,0xA);
		/* 820B806Ch case   45:*/		return 0x820B8070;
		  /* 820B8070h */ case   46:  		/* li R8, 0 */
		/* 820B8070h case   46:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8070h case   46:*/		return 0x820B8074;
		  /* 820B8074h */ case   47:  		/* addi R7, R1, 284 */
		/* 820B8074h case   47:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x11C);
		/* 820B8074h case   47:*/		return 0x820B8078;
		  /* 820B8078h */ case   48:  		/* addi R6, R1, 324 */
		/* 820B8078h case   48:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x144);
		/* 820B8078h case   48:*/		return 0x820B807C;
		  /* 820B807Ch */ case   49:  		/* ori R5, R5, 1 */
		/* 820B807Ch case   49:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B807Ch case   49:*/		return 0x820B8080;
		  /* 820B8080h */ case   50:  		/* mr R4, R16 */
		/* 820B8080h case   50:*/		regs.R4 = regs.R16;
		/* 820B8080h case   50:*/		return 0x820B8084;
		  /* 820B8084h */ case   51:  		/* mr R3, R14 */
		/* 820B8084h case   51:*/		regs.R3 = regs.R14;
		/* 820B8084h case   51:*/		return 0x820B8088;
		  /* 820B8088h */ case   52:  		/* bl -30080 */
		/* 820B8088h case   52:*/		regs.LR = 0x820B808C; return 0x820B0B08;
		/* 820B8088h case   52:*/		return 0x820B808C;
		  /* 820B808Ch */ case   53:  		/* or. R31, R3, R3 */
		/* 820B808Ch case   53:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B808Ch case   53:*/		return 0x820B8090;
		  /* 820B8090h */ case   54:  		/* bc 12, CR0_LT, 25416 */
		/* 820B8090h case   54:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8090h case   54:*/		return 0x820B8094;
		  /* 820B8094h */ case   55:  		/* lis R5, 8240 */
		/* 820B8094h case   55:*/		cpu::op::lis<0>(regs,&regs.R5,0x2030);
		/* 820B8094h case   55:*/		return 0x820B8098;
		  /* 820B8098h */ case   56:  		/* addi R8, R1, 284 */
		/* 820B8098h case   56:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x11C);
		/* 820B8098h case   56:*/		return 0x820B809C;
		  /* 820B809Ch */ case   57:  		/* addi R7, R1, 324 */
		/* 820B809Ch case   57:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x144);
		/* 820B809Ch case   57:*/		return 0x820B80A0;
		  /* 820B80A0h */ case   58:  		/* b -704 */
		/* 820B80A0h case   58:*/		return 0x820B7DE0;
		/* 820B80A0h case   58:*/		return 0x820B80A4;
		  /* 820B80A4h */ case   59:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B80A4h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B80A4h case   59:*/		return 0x820B80A8;
		  /* 820B80A8h */ case   60:  		/* cmplwi CR6, R11, 0 */
		/* 820B80A8h case   60:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B80A8h case   60:*/		return 0x820B80AC;
		  /* 820B80ACh */ case   61:  		/* bc 12, CR6_EQ, 25380 */
		/* 820B80ACh case   61:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B80ACh case   61:*/		return 0x820B80B0;
		  /* 820B80B0h */ case   62:  		/* cmplwi CR6, R15, 0 */
		/* 820B80B0h case   62:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B80B0h case   62:*/		return 0x820B80B4;
		  /* 820B80B4h */ case   63:  		/* bc 12, CR6_EQ, 2328 */
		/* 820B80B4h case   63:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B80B4h case   63:*/		return 0x820B80B8;
		  /* 820B80B8h */ case   64:  		/* li R29, -1 */
		/* 820B80B8h case   64:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B80B8h case   64:*/		return 0x820B80BC;
		  /* 820B80BCh */ case   65:  		/* lwz R8, <#[R1 + 144]> */
		/* 820B80BCh case   65:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 820B80BCh case   65:*/		return 0x820B80C0;
		  /* 820B80C0h */ case   66:  		/* lwz R5, <#[R1 + 160]> */
		/* 820B80C0h case   66:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B80C0h case   66:*/		return 0x820B80C4;
		  /* 820B80C4h */ case   67:  		/* li R11, 5 */
		/* 820B80C4h case   67:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 820B80C4h case   67:*/		return 0x820B80C8;
		  /* 820B80C8h */ case   68:  		/* stw R29, <#[R1 + 296]> */
		/* 820B80C8h case   68:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000128) );
		/* 820B80C8h case   68:*/		return 0x820B80CC;
		  /* 820B80CCh */ case   69:  		/* li R9, 4 */
		/* 820B80CCh case   69:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B80CCh case   69:*/		return 0x820B80D0;
		  /* 820B80D0h */ case   70:  		/* stw R29, <#[R1 + 400]> */
		/* 820B80D0h case   70:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000190) );
		/* 820B80D0h case   70:*/		return 0x820B80D4;
		  /* 820B80D4h */ case   71:  		/* rlwimi R5, R11, 28, 0, 11 */
		/* 820B80D4h case   71:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R5,regs.R11);
		/* 820B80D4h case   71:*/		return 0x820B80D8;
		  /* 820B80D8h */ case   72:  		/* stw R29, <#[R15]> */
		/* 820B80D8h case   72:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820B80D8h case   72:*/		return 0x820B80DC;
		  /* 820B80DCh */ case   73:  		/* addi R6, R1, 296 */
		/* 820B80DCh case   73:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x128);
		/* 820B80DCh case   73:*/		return 0x820B80E0;
		  /* 820B80E0h */ case   74:  		/* mr R7, R8 */
		/* 820B80E0h case   74:*/		regs.R7 = regs.R8;
		/* 820B80E0h case   74:*/		return 0x820B80E4;
		  /* 820B80E4h */ case   75:  		/* mr R4, R16 */
		/* 820B80E4h case   75:*/		regs.R4 = regs.R16;
		/* 820B80E4h case   75:*/		return 0x820B80E8;
		  /* 820B80E8h */ case   76:  		/* mr R3, R14 */
		/* 820B80E8h case   76:*/		regs.R3 = regs.R14;
		/* 820B80E8h case   76:*/		return 0x820B80EC;
		  /* 820B80ECh */ case   77:  		/* bl -30180 */
		/* 820B80ECh case   77:*/		regs.LR = 0x820B80F0; return 0x820B0B08;
		/* 820B80ECh case   77:*/		return 0x820B80F0;
		  /* 820B80F0h */ case   78:  		/* or. R31, R3, R3 */
		/* 820B80F0h case   78:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B80F0h case   78:*/		return 0x820B80F4;
		  /* 820B80F4h */ case   79:  		/* bc 12, CR0_LT, 25316 */
		/* 820B80F4h case   79:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B80F4h case   79:*/		return 0x820B80F8;
		  /* 820B80F8h */ case   80:  		/* lis R5, 4112 */
		/* 820B80F8h case   80:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820B80F8h case   80:*/		return 0x820B80FC;
		  /* 820B80FCh */ case   81:  		/* li R9, 8 */
		/* 820B80FCh case   81:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820B80FCh case   81:*/		return 0x820B8100;
		  /* 820B8100h */ case   82:  		/* li R8, 0 */
		/* 820B8100h case   82:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8100h case   82:*/		return 0x820B8104;
		  /* 820B8104h */ case   83:  		/* addi R7, R1, 296 */
		/* 820B8104h case   83:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x128);
		/* 820B8104h case   83:*/		return 0x820B8108;
		  /* 820B8108h */ case   84:  		/* addi R6, R1, 400 */
		/* 820B8108h case   84:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x190);
		/* 820B8108h case   84:*/		return 0x820B810C;
		  /* 820B810Ch */ case   85:  		/* ori R5, R5, 1 */
		/* 820B810Ch case   85:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B810Ch case   85:*/		return 0x820B8110;
		  /* 820B8110h */ case   86:  		/* mr R4, R16 */
		/* 820B8110h case   86:*/		regs.R4 = regs.R16;
		/* 820B8110h case   86:*/		return 0x820B8114;
		  /* 820B8114h */ case   87:  		/* mr R3, R14 */
		/* 820B8114h case   87:*/		regs.R3 = regs.R14;
		/* 820B8114h case   87:*/		return 0x820B8118;
		  /* 820B8118h */ case   88:  		/* bl -30224 */
		/* 820B8118h case   88:*/		regs.LR = 0x820B811C; return 0x820B0B08;
		/* 820B8118h case   88:*/		return 0x820B811C;
		  /* 820B811Ch */ case   89:  		/* or. R31, R3, R3 */
		/* 820B811Ch case   89:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B811Ch case   89:*/		return 0x820B8120;
		  /* 820B8120h */ case   90:  		/* bc 12, CR0_LT, 25272 */
		/* 820B8120h case   90:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8120h case   90:*/		return 0x820B8124;
		  /* 820B8124h */ case   91:  		/* addi R8, R1, 296 */
		/* 820B8124h case   91:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x128);
		/* 820B8124h case   91:*/		return 0x820B8128;
		  /* 820B8128h */ case   92:  		/* addi R7, R1, 400 */
		/* 820B8128h case   92:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x190);
		/* 820B8128h case   92:*/		return 0x820B812C;
		  /* 820B812Ch */ case   93:  		/* b -848 */
		/* 820B812Ch case   93:*/		return 0x820B7DDC;
		/* 820B812Ch case   93:*/		return 0x820B8130;
		  /* 820B8130h */ case   94:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B8130h case   94:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B8130h case   94:*/		return 0x820B8134;
		  /* 820B8134h */ case   95:  		/* cmplwi CR6, R11, 0 */
		/* 820B8134h case   95:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8134h case   95:*/		return 0x820B8138;
		  /* 820B8138h */ case   96:  		/* bc 12, CR6_EQ, 25240 */
		/* 820B8138h case   96:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8138h case   96:*/		return 0x820B813C;
		  /* 820B813Ch */ case   97:  		/* cmplwi CR6, R15, 0 */
		/* 820B813Ch case   97:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B813Ch case   97:*/		return 0x820B8140;
		  /* 820B8140h */ case   98:  		/* bc 12, CR6_EQ, 2188 */
		/* 820B8140h case   98:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8140h case   98:*/		return 0x820B8144;
		  /* 820B8144h */ case   99:  		/* cmplwi CR6, R30, 0 */
		/* 820B8144h case   99:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8144h case   99:*/		return 0x820B8148;
		  /* 820B8148h */ case  100:  		/* bc 12, CR6_EQ, 32 */
		/* 820B8148h case  100:*/		if ( regs.CR[6].eq ) { return 0x820B8168;  }
		/* 820B8148h case  100:*/		return 0x820B814C;
		  /* 820B814Ch */ case  101:  		/* addi R11, R15, -4 */
		/* 820B814Ch case  101:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B814Ch case  101:*/		return 0x820B8150;
		  /* 820B8150h */ case  102:  		/* li R10, -1 */
		/* 820B8150h case  102:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B8150h case  102:*/		return 0x820B8154;
		  /* 820B8154h */ case  103:  		/* cmplwi CR0, R30, 0 */
		/* 820B8154h case  103:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8154h case  103:*/		return 0x820B8158;
		  /* 820B8158h */ case  104:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8158h case  104:*/		if ( regs.CR[0].eq ) { return 0x820B8168;  }
		/* 820B8158h case  104:*/		return 0x820B815C;
		  /* 820B815Ch */ case  105:  		/* mtspr CTR, R30 */
		/* 820B815Ch case  105:*/		regs.CTR = regs.R30;
		/* 820B815Ch case  105:*/		return 0x820B8160;
		  /* 820B8160h */ case  106:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B8160h case  106:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8160h case  106:*/		return 0x820B8164;
		  /* 820B8164h */ case  107:  		/* bc 16, CR0_LT, -4 */
		/* 820B8164h case  107:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8160;  }
		/* 820B8164h case  107:*/		return 0x820B8168;
	}
	return 0x820B8168;
} // Block from 820B7FB8h-820B8168h (108 instructions)

//////////////////////////////////////////////////////
// Block at 820B8168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8168);
		  /* 820B8168h */ case    0:  		/* li R7, 0 */
		/* 820B8168h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820B8168h case    0:*/		return 0x820B816C;
		  /* 820B816Ch */ case    1:  		/* mr R6, R15 */
		/* 820B816Ch case    1:*/		regs.R6 = regs.R15;
		/* 820B816Ch case    1:*/		return 0x820B8170;
		  /* 820B8170h */ case    2:  		/* b -1032 */
		/* 820B8170h case    2:*/		return 0x820B7D68;
		/* 820B8170h case    2:*/		return 0x820B8174;
		  /* 820B8174h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B8174h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B8174h case    3:*/		return 0x820B8178;
		  /* 820B8178h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820B8178h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8178h case    4:*/		return 0x820B817C;
		  /* 820B817Ch */ case    5:  		/* bc 12, CR6_EQ, 25172 */
		/* 820B817Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B817Ch case    5:*/		return 0x820B8180;
		  /* 820B8180h */ case    6:  		/* cmplwi CR6, R15, 0 */
		/* 820B8180h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B8180h case    6:*/		return 0x820B8184;
		  /* 820B8184h */ case    7:  		/* bc 12, CR6_EQ, 2120 */
		/* 820B8184h case    7:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8184h case    7:*/		return 0x820B8188;
		  /* 820B8188h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 820B8188h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8188h case    8:*/		return 0x820B818C;
		  /* 820B818Ch */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 820B818Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820B81AC;  }
		/* 820B818Ch case    9:*/		return 0x820B8190;
		  /* 820B8190h */ case   10:  		/* addi R11, R15, -4 */
		/* 820B8190h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B8190h case   10:*/		return 0x820B8194;
		  /* 820B8194h */ case   11:  		/* li R10, -1 */
		/* 820B8194h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B8194h case   11:*/		return 0x820B8198;
		  /* 820B8198h */ case   12:  		/* cmplwi CR0, R30, 0 */
		/* 820B8198h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8198h case   12:*/		return 0x820B819C;
		  /* 820B819Ch */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 820B819Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x820B81AC;  }
		/* 820B819Ch case   13:*/		return 0x820B81A0;
		  /* 820B81A0h */ case   14:  		/* mtspr CTR, R30 */
		/* 820B81A0h case   14:*/		regs.CTR = regs.R30;
		/* 820B81A0h case   14:*/		return 0x820B81A4;
		  /* 820B81A4h */ case   15:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B81A4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B81A4h case   15:*/		return 0x820B81A8;
		  /* 820B81A8h */ case   16:  		/* bc 16, CR0_LT, -4 */
		/* 820B81A8h case   16:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B81A4;  }
		/* 820B81A8h case   16:*/		return 0x820B81AC;
	}
	return 0x820B81AC;
} // Block from 820B8168h-820B81ACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 820B81ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B81AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B81AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B81AC);
		  /* 820B81ACh */ case    0:  		/* li R6, 0 */
		/* 820B81ACh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B81ACh case    0:*/		return 0x820B81B0;
		  /* 820B81B0h */ case    1:  		/* mr R7, R15 */
		/* 820B81B0h case    1:*/		regs.R7 = regs.R15;
		/* 820B81B0h case    1:*/		return 0x820B81B4;
		  /* 820B81B4h */ case    2:  		/* lwz R5, <#[R1 + 144]> */
		/* 820B81B4h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 820B81B4h case    2:*/		return 0x820B81B8;
		  /* 820B81B8h */ case    3:  		/* mr R8, R30 */
		/* 820B81B8h case    3:*/		regs.R8 = regs.R30;
		/* 820B81B8h case    3:*/		return 0x820B81BC;
		  /* 820B81BCh */ case    4:  		/* mr R4, R16 */
		/* 820B81BCh case    4:*/		regs.R4 = regs.R16;
		/* 820B81BCh case    4:*/		return 0x820B81C0;
		  /* 820B81C0h */ case    5:  		/* mr R3, R14 */
		/* 820B81C0h case    5:*/		regs.R3 = regs.R14;
		/* 820B81C0h case    5:*/		return 0x820B81C4;
		  /* 820B81C4h */ case    6:  		/* bl -21916 */
		/* 820B81C4h case    6:*/		regs.LR = 0x820B81C8; return 0x820B2C28;
		/* 820B81C4h case    6:*/		return 0x820B81C8;
		  /* 820B81C8h */ case    7:  		/* b 21880 */
		/* 820B81C8h case    7:*/		return 0x820BD740;
		/* 820B81C8h case    7:*/		return 0x820B81CC;
		  /* 820B81CCh */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B81CCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B81CCh case    8:*/		return 0x820B81D0;
		  /* 820B81D0h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820B81D0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B81D0h case    9:*/		return 0x820B81D4;
		  /* 820B81D4h */ case   10:  		/* bc 12, CR6_EQ, 25084 */
		/* 820B81D4h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B81D4h case   10:*/		return 0x820B81D8;
		  /* 820B81D8h */ case   11:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B81D8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B81D8h case   11:*/		return 0x820B81DC;
		  /* 820B81DCh */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820B81DCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B81DCh case   12:*/		return 0x820B81E0;
		  /* 820B81E0h */ case   13:  		/* bc 12, CR6_EQ, 25072 */
		/* 820B81E0h case   13:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B81E0h case   13:*/		return 0x820B81E4;
		  /* 820B81E4h */ case   14:  		/* cmplwi CR6, R15, 0 */
		/* 820B81E4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B81E4h case   14:*/		return 0x820B81E8;
		  /* 820B81E8h */ case   15:  		/* bc 12, CR6_EQ, 2020 */
		/* 820B81E8h case   15:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B81E8h case   15:*/		return 0x820B81EC;
		  /* 820B81ECh */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 820B81ECh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B81ECh case   16:*/		return 0x820B81F0;
		  /* 820B81F0h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 820B81F0h case   17:*/		if ( regs.CR[6].eq ) { return 0x820B8210;  }
		/* 820B81F0h case   17:*/		return 0x820B81F4;
		  /* 820B81F4h */ case   18:  		/* addi R11, R15, -4 */
		/* 820B81F4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B81F4h case   18:*/		return 0x820B81F8;
		  /* 820B81F8h */ case   19:  		/* li R10, -1 */
		/* 820B81F8h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B81F8h case   19:*/		return 0x820B81FC;
		  /* 820B81FCh */ case   20:  		/* cmplwi CR0, R30, 0 */
		/* 820B81FCh case   20:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B81FCh case   20:*/		return 0x820B8200;
		  /* 820B8200h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8200h case   21:*/		if ( regs.CR[0].eq ) { return 0x820B8210;  }
		/* 820B8200h case   21:*/		return 0x820B8204;
		  /* 820B8204h */ case   22:  		/* mtspr CTR, R30 */
		/* 820B8204h case   22:*/		regs.CTR = regs.R30;
		/* 820B8204h case   22:*/		return 0x820B8208;
		  /* 820B8208h */ case   23:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B8208h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8208h case   23:*/		return 0x820B820C;
		  /* 820B820Ch */ case   24:  		/* bc 16, CR0_LT, -4 */
		/* 820B820Ch case   24:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8208;  }
		/* 820B820Ch case   24:*/		return 0x820B8210;
	}
	return 0x820B8210;
} // Block from 820B81ACh-820B8210h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820B8210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8210);
		  /* 820B8210h */ case    0:  		/* lwz R6, <#[R1 + 148]> */
		/* 820B8210h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000094) );
		/* 820B8210h case    0:*/		return 0x820B8214;
		  /* 820B8214h */ case    1:  		/* b -100 */
		/* 820B8214h case    1:*/		return 0x820B81B0;
		/* 820B8214h case    1:*/		return 0x820B8218;
		  /* 820B8218h */ case    2:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B8218h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B8218h case    2:*/		return 0x820B821C;
		  /* 820B821Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820B821Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B821Ch case    3:*/		return 0x820B8220;
		  /* 820B8220h */ case    4:  		/* bc 12, CR6_EQ, 25008 */
		/* 820B8220h case    4:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8220h case    4:*/		return 0x820B8224;
		  /* 820B8224h */ case    5:  		/* cmplwi CR6, R15, 0 */
		/* 820B8224h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B8224h case    5:*/		return 0x820B8228;
		  /* 820B8228h */ case    6:  		/* bc 12, CR6_EQ, 1956 */
		/* 820B8228h case    6:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8228h case    6:*/		return 0x820B822C;
		  /* 820B822Ch */ case    7:  		/* rlwinm R4, R30, 1, 0, 30 */
		/* 820B822Ch case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R30);
		/* 820B822Ch case    7:*/		return 0x820B8230;
		  /* 820B8230h */ case    8:  		/* mr R3, R14 */
		/* 820B8230h case    8:*/		regs.R3 = regs.R14;
		/* 820B8230h case    8:*/		return 0x820B8234;
		  /* 820B8234h */ case    9:  		/* bl -31556 */
		/* 820B8234h case    9:*/		regs.LR = 0x820B8238; return 0x820B06F0;
		/* 820B8234h case    9:*/		return 0x820B8238;
		  /* 820B8238h */ case   10:  		/* or. R28, R3, R3 */
		/* 820B8238h case   10:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820B8238h case   10:*/		return 0x820B823C;
		  /* 820B823Ch */ case   11:  		/* bc 12, CR0_EQ, 20964 */
		/* 820B823Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B823Ch case   11:*/		return 0x820B8240;
		  /* 820B8240h */ case   12:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 820B8240h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 820B8240h case   12:*/		return 0x820B8244;
		  /* 820B8244h */ case   13:  		/* li R29, -1 */
		/* 820B8244h case   13:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B8244h case   13:*/		return 0x820B8248;
		  /* 820B8248h */ case   14:  		/* cmplwi CR6, R30, 0 */
		/* 820B8248h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8248h case   14:*/		return 0x820B824C;
		  /* 820B824Ch */ case   15:  		/* add R27, R11, R28 */
		/* 820B824Ch case   15:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R28);
		/* 820B824Ch case   15:*/		return 0x820B8250;
		  /* 820B8250h */ case   16:  		/* bc 12, CR6_EQ, 100 */
		/* 820B8250h case   16:*/		if ( regs.CR[6].eq ) { return 0x820B82B4;  }
		/* 820B8250h case   16:*/		return 0x820B8254;
		  /* 820B8254h */ case   17:  		/* addi R11, R28, -4 */
		/* 820B8254h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B8254h case   17:*/		return 0x820B8258;
		  /* 820B8258h */ case   18:  		/* mr R10, R29 */
		/* 820B8258h case   18:*/		regs.R10 = regs.R29;
		/* 820B8258h case   18:*/		return 0x820B825C;
		  /* 820B825Ch */ case   19:  		/* cmplwi CR0, R30, 0 */
		/* 820B825Ch case   19:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B825Ch case   19:*/		return 0x820B8260;
		  /* 820B8260h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8260h case   20:*/		if ( regs.CR[0].eq ) { return 0x820B8270;  }
		/* 820B8260h case   20:*/		return 0x820B8264;
		  /* 820B8264h */ case   21:  		/* mtspr CTR, R30 */
		/* 820B8264h case   21:*/		regs.CTR = regs.R30;
		/* 820B8264h case   21:*/		return 0x820B8268;
		  /* 820B8268h */ case   22:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B8268h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8268h case   22:*/		return 0x820B826C;
		  /* 820B826Ch */ case   23:  		/* bc 16, CR0_LT, -4 */
		/* 820B826Ch case   23:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8268;  }
		/* 820B826Ch case   23:*/		return 0x820B8270;
	}
	return 0x820B8270;
} // Block from 820B8210h-820B8270h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820B8270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8270);
		  /* 820B8270h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B8270h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8270h case    0:*/		return 0x820B8274;
		  /* 820B8274h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 820B8274h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B82B4;  }
		/* 820B8274h case    1:*/		return 0x820B8278;
		  /* 820B8278h */ case    2:  		/* addi R11, R27, -4 */
		/* 820B8278h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B8278h case    2:*/		return 0x820B827C;
		  /* 820B827Ch */ case    3:  		/* mr R10, R29 */
		/* 820B827Ch case    3:*/		regs.R10 = regs.R29;
		/* 820B827Ch case    3:*/		return 0x820B8280;
		  /* 820B8280h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820B8280h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8280h case    4:*/		return 0x820B8284;
		  /* 820B8284h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8284h case    5:*/		if ( regs.CR[0].eq ) { return 0x820B8294;  }
		/* 820B8284h case    5:*/		return 0x820B8288;
		  /* 820B8288h */ case    6:  		/* mtspr CTR, R30 */
		/* 820B8288h case    6:*/		regs.CTR = regs.R30;
		/* 820B8288h case    6:*/		return 0x820B828C;
		  /* 820B828Ch */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B828Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B828Ch case    7:*/		return 0x820B8290;
		  /* 820B8290h */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820B8290h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B828C;  }
		/* 820B8290h case    8:*/		return 0x820B8294;
	}
	return 0x820B8294;
} // Block from 820B8270h-820B8294h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B8294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8294);
		  /* 820B8294h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B8294h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8294h case    0:*/		return 0x820B8298;
		  /* 820B8298h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B8298h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B82B4;  }
		/* 820B8298h case    1:*/		return 0x820B829C;
		  /* 820B829Ch */ case    2:  		/* addi R11, R15, -4 */
		/* 820B829Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B829Ch case    2:*/		return 0x820B82A0;
		  /* 820B82A0h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B82A0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B82A0h case    3:*/		return 0x820B82A4;
		  /* 820B82A4h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B82A4h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B82B4;  }
		/* 820B82A4h case    4:*/		return 0x820B82A8;
		  /* 820B82A8h */ case    5:  		/* mtspr CTR, R30 */
		/* 820B82A8h case    5:*/		regs.CTR = regs.R30;
		/* 820B82A8h case    5:*/		return 0x820B82AC;
		  /* 820B82ACh */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B82ACh case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B82ACh case    6:*/		return 0x820B82B0;
		  /* 820B82B0h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B82B0h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B82AC;  }
		/* 820B82B0h case    7:*/		return 0x820B82B4;
	}
	return 0x820B82B4;
} // Block from 820B8294h-820B82B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B82B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B82B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B82B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B82B4);
		  /* 820B82B4h */ case    0:  		/* lwz R29, <#[R1 + 144]> */
		/* 820B82B4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 820B82B4h case    0:*/		return 0x820B82B8;
		  /* 820B82B8h */ case    1:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820B82B8h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820B82B8h case    1:*/		return 0x820B82BC;
		  /* 820B82BCh */ case    2:  		/* li R9, 0 */
		/* 820B82BCh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B82BCh case    2:*/		return 0x820B82C0;
		  /* 820B82C0h */ case    3:  		/* li R8, 0 */
		/* 820B82C0h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B82C0h case    3:*/		return 0x820B82C4;
		  /* 820B82C4h */ case    4:  		/* mr R7, R29 */
		/* 820B82C4h case    4:*/		regs.R7 = regs.R29;
		/* 820B82C4h case    4:*/		return 0x820B82C8;
		  /* 820B82C8h */ case    5:  		/* mr R6, R28 */
		/* 820B82C8h case    5:*/		regs.R6 = regs.R28;
		/* 820B82C8h case    5:*/		return 0x820B82CC;
		  /* 820B82CCh */ case    6:  		/* oris R5, R30, 4112 */
		/* 820B82CCh case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820B82CCh case    6:*/		return 0x820B82D0;
		  /* 820B82D0h */ case    7:  		/* mr R4, R16 */
		/* 820B82D0h case    7:*/		regs.R4 = regs.R16;
		/* 820B82D0h case    7:*/		return 0x820B82D4;
		  /* 820B82D4h */ case    8:  		/* mr R3, R14 */
		/* 820B82D4h case    8:*/		regs.R3 = regs.R14;
		/* 820B82D4h case    8:*/		return 0x820B82D8;
		  /* 820B82D8h */ case    9:  		/* bl -30672 */
		/* 820B82D8h case    9:*/		regs.LR = 0x820B82DC; return 0x820B0B08;
		/* 820B82D8h case    9:*/		return 0x820B82DC;
		  /* 820B82DCh */ case   10:  		/* or. R31, R3, R3 */
		/* 820B82DCh case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B82DCh case   10:*/		return 0x820B82E0;
		  /* 820B82E0h */ case   11:  		/* bc 12, CR0_LT, 24824 */
		/* 820B82E0h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B82E0h case   11:*/		return 0x820B82E4;
		  /* 820B82E4h */ case   12:  		/* li R9, 20 */
		/* 820B82E4h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820B82E4h case   12:*/		return 0x820B82E8;
		  /* 820B82E8h */ case   13:  		/* oris R5, R30, 4160 */
		/* 820B82E8h case   13:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1040);
		/* 820B82E8h case   13:*/		return 0x820B82EC;
		  /* 820B82ECh */ case   14:  		/* mr R6, R27 */
		/* 820B82ECh case   14:*/		regs.R6 = regs.R27;
		/* 820B82ECh case   14:*/		return 0x820B82F0;
		  /* 820B82F0h */ case   15:  		/* mr R7, R28 */
		/* 820B82F0h case   15:*/		regs.R7 = regs.R28;
		/* 820B82F0h case   15:*/		return 0x820B82F4;
		  /* 820B82F4h */ case   16:  		/* li R8, 0 */
		/* 820B82F4h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B82F4h case   16:*/		return 0x820B82F8;
		  /* 820B82F8h */ case   17:  		/* mr R4, R16 */
		/* 820B82F8h case   17:*/		regs.R4 = regs.R16;
		/* 820B82F8h case   17:*/		return 0x820B82FC;
		  /* 820B82FCh */ case   18:  		/* mr R3, R14 */
		/* 820B82FCh case   18:*/		regs.R3 = regs.R14;
		/* 820B82FCh case   18:*/		return 0x820B8300;
		  /* 820B8300h */ case   19:  		/* bl -30712 */
		/* 820B8300h case   19:*/		regs.LR = 0x820B8304; return 0x820B0B08;
		/* 820B8300h case   19:*/		return 0x820B8304;
		  /* 820B8304h */ case   20:  		/* or. R31, R3, R3 */
		/* 820B8304h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8304h case   20:*/		return 0x820B8308;
		  /* 820B8308h */ case   21:  		/* bc 12, CR0_LT, 24784 */
		/* 820B8308h case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8308h case   21:*/		return 0x820B830C;
		  /* 820B830Ch */ case   22:  		/* li R9, 2 */
		/* 820B830Ch case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820B830Ch case   22:*/		return 0x820B8310;
		  /* 820B8310h */ case   23:  		/* mr R8, R27 */
		/* 820B8310h case   23:*/		regs.R8 = regs.R27;
		/* 820B8310h case   23:*/		return 0x820B8314;
		  /* 820B8314h */ case   24:  		/* mr R7, R29 */
		/* 820B8314h case   24:*/		regs.R7 = regs.R29;
		/* 820B8314h case   24:*/		return 0x820B8318;
		  /* 820B8318h */ case   25:  		/* oris R5, R30, 8256 */
		/* 820B8318h case   25:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2040);
		/* 820B8318h case   25:*/		return 0x820B831C;
		  /* 820B831Ch */ case   26:  		/* b 21524 */
		/* 820B831Ch case   26:*/		return 0x820BD730;
		/* 820B831Ch case   26:*/		return 0x820B8320;
		  /* 820B8320h */ case   27:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B8320h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B8320h case   27:*/		return 0x820B8324;
		  /* 820B8324h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 820B8324h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8324h case   28:*/		return 0x820B8328;
		  /* 820B8328h */ case   29:  		/* bc 12, CR6_EQ, 24744 */
		/* 820B8328h case   29:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8328h case   29:*/		return 0x820B832C;
		  /* 820B832Ch */ case   30:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B832Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B832Ch case   30:*/		return 0x820B8330;
		  /* 820B8330h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 820B8330h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8330h case   31:*/		return 0x820B8334;
		  /* 820B8334h */ case   32:  		/* bc 12, CR6_EQ, 24732 */
		/* 820B8334h case   32:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8334h case   32:*/		return 0x820B8338;
		  /* 820B8338h */ case   33:  		/* lwz R11, <#[R1 + 136]> */
		/* 820B8338h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820B8338h case   33:*/		return 0x820B833C;
		  /* 820B833Ch */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 820B833Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B833Ch case   34:*/		return 0x820B8340;
		  /* 820B8340h */ case   35:  		/* bc 12, CR6_EQ, 24720 */
		/* 820B8340h case   35:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8340h case   35:*/		return 0x820B8344;
		  /* 820B8344h */ case   36:  		/* cmplwi CR6, R15, 0 */
		/* 820B8344h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B8344h case   36:*/		return 0x820B8348;
		  /* 820B8348h */ case   37:  		/* bc 12, CR6_EQ, 1668 */
		/* 820B8348h case   37:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8348h case   37:*/		return 0x820B834C;
		  /* 820B834Ch */ case   38:  		/* mr R4, R30 */
		/* 820B834Ch case   38:*/		regs.R4 = regs.R30;
		/* 820B834Ch case   38:*/		return 0x820B8350;
		  /* 820B8350h */ case   39:  		/* mr R3, R14 */
		/* 820B8350h case   39:*/		regs.R3 = regs.R14;
		/* 820B8350h case   39:*/		return 0x820B8354;
		  /* 820B8354h */ case   40:  		/* bl -31844 */
		/* 820B8354h case   40:*/		regs.LR = 0x820B8358; return 0x820B06F0;
		/* 820B8354h case   40:*/		return 0x820B8358;
		  /* 820B8358h */ case   41:  		/* or. R28, R3, R3 */
		/* 820B8358h case   41:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820B8358h case   41:*/		return 0x820B835C;
		  /* 820B835Ch */ case   42:  		/* bc 12, CR0_EQ, 20676 */
		/* 820B835Ch case   42:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B835Ch case   42:*/		return 0x820B8360;
		  /* 820B8360h */ case   43:  		/* li R29, -1 */
		/* 820B8360h case   43:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B8360h case   43:*/		return 0x820B8364;
		  /* 820B8364h */ case   44:  		/* cmplwi CR6, R30, 0 */
		/* 820B8364h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8364h case   44:*/		return 0x820B8368;
		  /* 820B8368h */ case   45:  		/* bc 12, CR6_EQ, 64 */
		/* 820B8368h case   45:*/		if ( regs.CR[6].eq ) { return 0x820B83A8;  }
		/* 820B8368h case   45:*/		return 0x820B836C;
		  /* 820B836Ch */ case   46:  		/* addi R11, R28, -4 */
		/* 820B836Ch case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B836Ch case   46:*/		return 0x820B8370;
		  /* 820B8370h */ case   47:  		/* mr R10, R29 */
		/* 820B8370h case   47:*/		regs.R10 = regs.R29;
		/* 820B8370h case   47:*/		return 0x820B8374;
		  /* 820B8374h */ case   48:  		/* cmplwi CR0, R30, 0 */
		/* 820B8374h case   48:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8374h case   48:*/		return 0x820B8378;
		  /* 820B8378h */ case   49:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8378h case   49:*/		if ( regs.CR[0].eq ) { return 0x820B8388;  }
		/* 820B8378h case   49:*/		return 0x820B837C;
		  /* 820B837Ch */ case   50:  		/* mtspr CTR, R30 */
		/* 820B837Ch case   50:*/		regs.CTR = regs.R30;
		/* 820B837Ch case   50:*/		return 0x820B8380;
		  /* 820B8380h */ case   51:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B8380h case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8380h case   51:*/		return 0x820B8384;
		  /* 820B8384h */ case   52:  		/* bc 16, CR0_LT, -4 */
		/* 820B8384h case   52:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8380;  }
		/* 820B8384h case   52:*/		return 0x820B8388;
	}
	return 0x820B8388;
} // Block from 820B82B4h-820B8388h (53 instructions)

//////////////////////////////////////////////////////
// Block at 820B8388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8388);
		  /* 820B8388h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B8388h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8388h case    0:*/		return 0x820B838C;
		  /* 820B838Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B838Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820B83A8;  }
		/* 820B838Ch case    1:*/		return 0x820B8390;
		  /* 820B8390h */ case    2:  		/* addi R11, R15, -4 */
		/* 820B8390h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B8390h case    2:*/		return 0x820B8394;
		  /* 820B8394h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B8394h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8394h case    3:*/		return 0x820B8398;
		  /* 820B8398h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8398h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B83A8;  }
		/* 820B8398h case    4:*/		return 0x820B839C;
		  /* 820B839Ch */ case    5:  		/* mtspr CTR, R30 */
		/* 820B839Ch case    5:*/		regs.CTR = regs.R30;
		/* 820B839Ch case    5:*/		return 0x820B83A0;
		  /* 820B83A0h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B83A0h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B83A0h case    6:*/		return 0x820B83A4;
		  /* 820B83A4h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B83A4h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B83A0;  }
		/* 820B83A4h case    7:*/		return 0x820B83A8;
	}
	return 0x820B83A8;
} // Block from 820B8388h-820B83A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B83A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B83A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B83A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B83A8);
		  /* 820B83A8h */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820B83A8h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820B83A8h case    0:*/		return 0x820B83AC;
		  /* 820B83ACh */ case    1:  		/* lwz R8, <#[R1 + 148]> */
		/* 820B83ACh case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820B83ACh case    1:*/		return 0x820B83B0;
		  /* 820B83B0h */ case    2:  		/* li R9, 0 */
		/* 820B83B0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B83B0h case    2:*/		return 0x820B83B4;
		  /* 820B83B4h */ case    3:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B83B4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B83B4h case    3:*/		return 0x820B83B8;
		  /* 820B83B8h */ case    4:  		/* mr R6, R28 */
		/* 820B83B8h case    4:*/		regs.R6 = regs.R28;
		/* 820B83B8h case    4:*/		return 0x820B83BC;
		  /* 820B83BCh */ case    5:  		/* oris R5, R30, 8208 */
		/* 820B83BCh case    5:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2010);
		/* 820B83BCh case    5:*/		return 0x820B83C0;
		  /* 820B83C0h */ case    6:  		/* mr R4, R16 */
		/* 820B83C0h case    6:*/		regs.R4 = regs.R16;
		/* 820B83C0h case    6:*/		return 0x820B83C4;
		  /* 820B83C4h */ case    7:  		/* mr R3, R14 */
		/* 820B83C4h case    7:*/		regs.R3 = regs.R14;
		/* 820B83C4h case    7:*/		return 0x820B83C8;
		  /* 820B83C8h */ case    8:  		/* bl -30912 */
		/* 820B83C8h case    8:*/		regs.LR = 0x820B83CC; return 0x820B0B08;
		/* 820B83C8h case    8:*/		return 0x820B83CC;
		  /* 820B83CCh */ case    9:  		/* or. R31, R3, R3 */
		/* 820B83CCh case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B83CCh case    9:*/		return 0x820B83D0;
		  /* 820B83D0h */ case   10:  		/* bc 12, CR0_LT, 24584 */
		/* 820B83D0h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B83D0h case   10:*/		return 0x820B83D4;
		  /* 820B83D4h */ case   11:  		/* lwz R8, <#[R1 + 152]> */
		/* 820B83D4h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000098) );
		/* 820B83D4h case   11:*/		return 0x820B83D8;
		  /* 820B83D8h */ case   12:  		/* mr R7, R28 */
		/* 820B83D8h case   12:*/		regs.R7 = regs.R28;
		/* 820B83D8h case   12:*/		return 0x820B83DC;
		  /* 820B83DCh */ case   13:  		/* oris R5, R30, 8192 */
		/* 820B83DCh case   13:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2000);
		/* 820B83DCh case   13:*/		return 0x820B83E0;
		  /* 820B83E0h */ case   14:  		/* b 21324 */
		/* 820B83E0h case   14:*/		return 0x820BD72C;
		/* 820B83E0h case   14:*/		return 0x820B83E4;
		  /* 820B83E4h */ case   15:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B83E4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B83E4h case   15:*/		return 0x820B83E8;
		  /* 820B83E8h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 820B83E8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B83E8h case   16:*/		return 0x820B83EC;
		  /* 820B83ECh */ case   17:  		/* bc 12, CR6_EQ, 24548 */
		/* 820B83ECh case   17:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B83ECh case   17:*/		return 0x820B83F0;
		  /* 820B83F0h */ case   18:  		/* mr R4, R16 */
		/* 820B83F0h case   18:*/		regs.R4 = regs.R16;
		/* 820B83F0h case   18:*/		return 0x820B83F4;
		  /* 820B83F4h */ case   19:  		/* lwz R6, <#[R1 + 160]> */
		/* 820B83F4h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B83F4h case   19:*/		return 0x820B83F8;
		  /* 820B83F8h */ case   20:  		/* mr R3, R14 */
		/* 820B83F8h case   20:*/		regs.R3 = regs.R14;
		/* 820B83F8h case   20:*/		return 0x820B83FC;
		  /* 820B83FCh */ case   21:  		/* lwz R5, <#[R1 + 144]> */
		/* 820B83FCh case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 820B83FCh case   21:*/		return 0x820B8400;
		  /* 820B8400h */ case   22:  		/* bl -17408 */
		/* 820B8400h case   22:*/		regs.LR = 0x820B8404; return 0x820B4000;
		/* 820B8400h case   22:*/		return 0x820B8404;
		  /* 820B8404h */ case   23:  		/* b 21308 */
		/* 820B8404h case   23:*/		return 0x820BD740;
		/* 820B8404h case   23:*/		return 0x820B8408;
		  /* 820B8408h */ case   24:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B8408h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B8408h case   24:*/		return 0x820B840C;
		  /* 820B840Ch */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 820B840Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B840Ch case   25:*/		return 0x820B8410;
		  /* 820B8410h */ case   26:  		/* bc 12, CR6_EQ, 24512 */
		/* 820B8410h case   26:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8410h case   26:*/		return 0x820B8414;
		  /* 820B8414h */ case   27:  		/* cmplwi CR6, R15, 0 */
		/* 820B8414h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B8414h case   27:*/		return 0x820B8418;
		  /* 820B8418h */ case   28:  		/* bc 12, CR6_EQ, 1460 */
		/* 820B8418h case   28:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8418h case   28:*/		return 0x820B841C;
		  /* 820B841Ch */ case   29:  		/* cmplwi CR6, R30, 0 */
		/* 820B841Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B841Ch case   29:*/		return 0x820B8420;
		  /* 820B8420h */ case   30:  		/* bc 12, CR6_EQ, 32 */
		/* 820B8420h case   30:*/		if ( regs.CR[6].eq ) { return 0x820B8440;  }
		/* 820B8420h case   30:*/		return 0x820B8424;
		  /* 820B8424h */ case   31:  		/* addi R11, R15, -4 */
		/* 820B8424h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B8424h case   31:*/		return 0x820B8428;
		  /* 820B8428h */ case   32:  		/* li R10, -1 */
		/* 820B8428h case   32:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B8428h case   32:*/		return 0x820B842C;
		  /* 820B842Ch */ case   33:  		/* cmplwi CR0, R30, 0 */
		/* 820B842Ch case   33:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B842Ch case   33:*/		return 0x820B8430;
		  /* 820B8430h */ case   34:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8430h case   34:*/		if ( regs.CR[0].eq ) { return 0x820B8440;  }
		/* 820B8430h case   34:*/		return 0x820B8434;
		  /* 820B8434h */ case   35:  		/* mtspr CTR, R30 */
		/* 820B8434h case   35:*/		regs.CTR = regs.R30;
		/* 820B8434h case   35:*/		return 0x820B8438;
		  /* 820B8438h */ case   36:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B8438h case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8438h case   36:*/		return 0x820B843C;
		  /* 820B843Ch */ case   37:  		/* bc 16, CR0_LT, -4 */
		/* 820B843Ch case   37:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8438;  }
		/* 820B843Ch case   37:*/		return 0x820B8440;
	}
	return 0x820B8440;
} // Block from 820B83A8h-820B8440h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820B8440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8440);
		  /* 820B8440h */ case    0:  		/* mr R7, R15 */
		/* 820B8440h case    0:*/		regs.R7 = regs.R15;
		/* 820B8440h case    0:*/		return 0x820B8444;
		  /* 820B8444h */ case    1:  		/* li R6, 0 */
		/* 820B8444h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B8444h case    1:*/		return 0x820B8448;
		  /* 820B8448h */ case    2:  		/* mr R8, R30 */
		/* 820B8448h case    2:*/		regs.R8 = regs.R30;
		/* 820B8448h case    2:*/		return 0x820B844C;
		  /* 820B844Ch */ case    3:  		/* mr R4, R16 */
		/* 820B844Ch case    3:*/		regs.R4 = regs.R16;
		/* 820B844Ch case    3:*/		return 0x820B8450;
		  /* 820B8450h */ case    4:  		/* lwz R5, <#[R1 + 144]> */
		/* 820B8450h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 820B8450h case    4:*/		return 0x820B8454;
		  /* 820B8454h */ case    5:  		/* mr R3, R14 */
		/* 820B8454h case    5:*/		regs.R3 = regs.R14;
		/* 820B8454h case    5:*/		return 0x820B8458;
		  /* 820B8458h */ case    6:  		/* bl -26824 */
		/* 820B8458h case    6:*/		regs.LR = 0x820B845C; return 0x820B1B90;
		/* 820B8458h case    6:*/		return 0x820B845C;
		  /* 820B845Ch */ case    7:  		/* b 21220 */
		/* 820B845Ch case    7:*/		return 0x820BD740;
		/* 820B845Ch case    7:*/		return 0x820B8460;
		  /* 820B8460h */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B8460h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B8460h case    8:*/		return 0x820B8464;
		  /* 820B8464h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820B8464h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8464h case    9:*/		return 0x820B8468;
		  /* 820B8468h */ case   10:  		/* bc 12, CR6_EQ, 24424 */
		/* 820B8468h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8468h case   10:*/		return 0x820B846C;
		  /* 820B846Ch */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820B846Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B846Ch case   11:*/		return 0x820B8470;
		  /* 820B8470h */ case   12:  		/* bc 12, CR6_EQ, 1372 */
		/* 820B8470h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8470h case   12:*/		return 0x820B8474;
		  /* 820B8474h */ case   13:  		/* lis R11, -32255 */
		/* 820B8474h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820B8474h case   13:*/		return 0x820B8478;
		  /* 820B8478h */ case   14:  		/* lwz R31, <#[R14 + 8]> */
		/* 820B8478h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R14 + 0x00000008) );
		/* 820B8478h case   14:*/		return 0x820B847C;
		  /* 820B847Ch */ case   15:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 820B847Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 820B847Ch case   15:*/		return 0x820B8480;
		  /* 820B8480h */ case   16:  		/* bl -132776 */
		/* 820B8480h case   16:*/		regs.LR = 0x820B8484; return 0x82097DD8;
		/* 820B8480h case   16:*/		return 0x820B8484;
		  /* 820B8484h */ case   17:  		/* lis R11, -32256 */
		/* 820B8484h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820B8484h case   17:*/		return 0x820B8488;
		  /* 820B8488h */ case   18:  		/* lwz R4, <#[R31 + 120]> */
		/* 820B8488h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820B8488h case   18:*/		return 0x820B848C;
		  /* 820B848Ch */ case   19:  		/* mr R3, R31 */
		/* 820B848Ch case   19:*/		regs.R3 = regs.R31;
		/* 820B848Ch case   19:*/		return 0x820B8490;
		  /* 820B8490h */ case   20:  		/* li R6, 0 */
		/* 820B8490h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B8490h case   20:*/		return 0x820B8494;
		  /* 820B8494h */ case   21:  		/* li R5, 0 */
		/* 820B8494h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B8494h case   21:*/		return 0x820B8498;
		  /* 820B8498h */ case   22:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 820B8498h case   22:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 820B8498h case   22:*/		return 0x820B849C;
		  /* 820B849Ch */ case   23:  		/* fdiv FR1, FR0, FR1 */
		/* 820B849Ch case   23:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR0,regs.FR1);
		/* 820B849Ch case   23:*/		return 0x820B84A0;
		  /* 820B84A0h */ case   24:  		/* bl 281992 */
		/* 820B84A0h case   24:*/		regs.LR = 0x820B84A4; return 0x820FD228;
		/* 820B84A0h case   24:*/		return 0x820B84A4;
		  /* 820B84A4h */ case   25:  		/* lwz R11, <#[R14 + 8]> */
		/* 820B84A4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820B84A4h case   25:*/		return 0x820B84A8;
		  /* 820B84A8h */ case   26:  		/* lis R10, -32256 */
		/* 820B84A8h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820B84A8h case   26:*/		return 0x820B84AC;
		  /* 820B84ACh */ case   27:  		/* mr R31, R3 */
		/* 820B84ACh case   27:*/		regs.R31 = regs.R3;
		/* 820B84ACh case   27:*/		return 0x820B84B0;
		  /* 820B84B0h */ case   28:  		/* li R6, 0 */
		/* 820B84B0h case   28:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B84B0h case   28:*/		return 0x820B84B4;
		  /* 820B84B4h */ case   29:  		/* li R5, 0 */
		/* 820B84B4h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B84B4h case   29:*/		return 0x820B84B8;
		  /* 820B84B8h */ case   30:  		/* mr R3, R11 */
		/* 820B84B8h case   30:*/		regs.R3 = regs.R11;
		/* 820B84B8h case   30:*/		return 0x820B84BC;
		  /* 820B84BCh */ case   31:  		/* lwz R4, <#[R11 + 120]> */
		/* 820B84BCh case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000078) );
		/* 820B84BCh case   31:*/		return 0x820B84C0;
		  /* 820B84C0h */ case   32:  		/* lfd FR1, <#[R10 + 4736]> */
		/* 820B84C0h case   32:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00001280) );
		/* 820B84C0h case   32:*/		return 0x820B84C4;
		  /* 820B84C4h */ case   33:  		/* bl 281956 */
		/* 820B84C4h case   33:*/		regs.LR = 0x820B84C8; return 0x820FD228;
		/* 820B84C4h case   33:*/		return 0x820B84C8;
		  /* 820B84C8h */ case   34:  		/* mr R29, R3 */
		/* 820B84C8h case   34:*/		regs.R29 = regs.R3;
		/* 820B84C8h case   34:*/		return 0x820B84CC;
		  /* 820B84CCh */ case   35:  		/* mulli R4, R30, 7 */
		/* 820B84CCh case   35:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x7);
		/* 820B84CCh case   35:*/		return 0x820B84D0;
		  /* 820B84D0h */ case   36:  		/* mr R3, R14 */
		/* 820B84D0h case   36:*/		regs.R3 = regs.R14;
		/* 820B84D0h case   36:*/		return 0x820B84D4;
		  /* 820B84D4h */ case   37:  		/* bl -32228 */
		/* 820B84D4h case   37:*/		regs.LR = 0x820B84D8; return 0x820B06F0;
		/* 820B84D4h case   37:*/		return 0x820B84D8;
		  /* 820B84D8h */ case   38:  		/* cmplwi CR0, R3, 0 */
		/* 820B84D8h case   38:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820B84D8h case   38:*/		return 0x820B84DC;
		  /* 820B84DCh */ case   39:  		/* bc 12, CR0_EQ, 20292 */
		/* 820B84DCh case   39:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B84DCh case   39:*/		return 0x820B84E0;
		  /* 820B84E0h */ case   40:  		/* li R11, 7 */
		/* 820B84E0h case   40:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 820B84E0h case   40:*/		return 0x820B84E4;
		  /* 820B84E4h */ case   41:  		/* addi R10, R1, 156 */
		/* 820B84E4h case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820B84E4h case   41:*/		return 0x820B84E8;
		  /* 820B84E8h */ case   42:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 820B84E8h case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 820B84E8h case   42:*/		return 0x820B84EC;
		  /* 820B84ECh */ case   43:  		/* mtspr CTR, R11 */
		/* 820B84ECh case   43:*/		regs.CTR = regs.R11;
		/* 820B84ECh case   43:*/		return 0x820B84F0;
	}
	return 0x820B84F0;
} // Block from 820B8440h-820B84F0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820B84F0h
// Function '?EmitIntrinsic@CCompiler@D3DXShader@@IAAJPAVCNode@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B84F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B84F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B84F0);
		  /* 820B84F0h */ case    0:  		/* stwu R3, <#[R10 + 4]> */
		/* 820B84F0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B84F0h case    0:*/		return 0x820B84F4;
		  /* 820B84F4h */ case    1:  		/* add R3, R3, R9 */
		/* 820B84F4h case    1:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R9);
		/* 820B84F4h case    1:*/		return 0x820B84F8;
		  /* 820B84F8h */ case    2:  		/* bc 16, CR0_LT, -8 */
		/* 820B84F8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B84F0;  }
		/* 820B84F8h case    2:*/		return 0x820B84FC;
		  /* 820B84FCh */ case    3:  		/* lwz R22, <#[R1 + 184]> */
		/* 820B84FCh case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B84FCh case    3:*/		return 0x820B8500;
		  /* 820B8500h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 820B8500h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8500h case    4:*/		return 0x820B8504;
		  /* 820B8504h */ case    5:  		/* lwz R8, <#[R1 + 180]> */
		/* 820B8504h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B4) );
		/* 820B8504h case    5:*/		return 0x820B8508;
		  /* 820B8508h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 820B8508h case    6:*/		if ( regs.CR[6].eq ) { return 0x820B8528;  }
		/* 820B8508h case    6:*/		return 0x820B850C;
		  /* 820B850Ch */ case    7:  		/* mr R11, R22 */
		/* 820B850Ch case    7:*/		regs.R11 = regs.R22;
		/* 820B850Ch case    7:*/		return 0x820B8510;
		  /* 820B8510h */ case    8:  		/* mtspr CTR, R30 */
		/* 820B8510h case    8:*/		regs.CTR = regs.R30;
		/* 820B8510h case    8:*/		return 0x820B8514;
		  /* 820B8514h */ case    9:  		/* subf R10, R22, R8 */
		/* 820B8514h case    9:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R22,regs.R8);
		/* 820B8514h case    9:*/		return 0x820B8518;
		  /* 820B8518h */ case   10:  		/* stwx R31, <#[R10 + R11]> */
		/* 820B8518h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820B8518h case   10:*/		return 0x820B851C;
		  /* 820B851Ch */ case   11:  		/* stw R29, <#[R11]> */
		/* 820B851Ch case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 820B851Ch case   11:*/		return 0x820B8520;
		  /* 820B8520h */ case   12:  		/* addi R11, R11, 4 */
		/* 820B8520h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820B8520h case   12:*/		return 0x820B8524;
		  /* 820B8524h */ case   13:  		/* bc 16, CR0_LT, -12 */
		/* 820B8524h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8518;  }
		/* 820B8524h case   13:*/		return 0x820B8528;
	}
	return 0x820B8528;
} // Block from 820B84F0h-820B8528h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820B8528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8528);
		  /* 820B8528h */ case    0:  		/* lwz R25, <#[R1 + 160]> */
		/* 820B8528h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B8528h case    0:*/		return 0x820B852C;
		  /* 820B852Ch */ case    1:  		/* li R29, -1 */
		/* 820B852Ch case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B852Ch case    1:*/		return 0x820B8530;
		  /* 820B8530h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820B8530h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8530h case    2:*/		return 0x820B8534;
		  /* 820B8534h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 820B8534h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B8554;  }
		/* 820B8534h case    3:*/		return 0x820B8538;
		  /* 820B8538h */ case    4:  		/* addi R11, R25, -4 */
		/* 820B8538h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820B8538h case    4:*/		return 0x820B853C;
		  /* 820B853Ch */ case    5:  		/* mr R10, R29 */
		/* 820B853Ch case    5:*/		regs.R10 = regs.R29;
		/* 820B853Ch case    5:*/		return 0x820B8540;
		  /* 820B8540h */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820B8540h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8540h case    6:*/		return 0x820B8544;
		  /* 820B8544h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8544h case    7:*/		if ( regs.CR[0].eq ) { return 0x820B8554;  }
		/* 820B8544h case    7:*/		return 0x820B8548;
		  /* 820B8548h */ case    8:  		/* mtspr CTR, R30 */
		/* 820B8548h case    8:*/		regs.CTR = regs.R30;
		/* 820B8548h case    8:*/		return 0x820B854C;
		  /* 820B854Ch */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B854Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B854Ch case    9:*/		return 0x820B8550;
		  /* 820B8550h */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820B8550h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B854C;  }
		/* 820B8550h case   10:*/		return 0x820B8554;
	}
	return 0x820B8554;
} // Block from 820B8528h-820B8554h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B8554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8554);
		  /* 820B8554h */ case    0:  		/* lwz R23, <#[R1 + 164]> */
		/* 820B8554h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B8554h case    0:*/		return 0x820B8558;
		  /* 820B8558h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B8558h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8558h case    1:*/		return 0x820B855C;
		  /* 820B855Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B855Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820B857C;  }
		/* 820B855Ch case    2:*/		return 0x820B8560;
		  /* 820B8560h */ case    3:  		/* addi R11, R23, -4 */
		/* 820B8560h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820B8560h case    3:*/		return 0x820B8564;
		  /* 820B8564h */ case    4:  		/* mr R10, R29 */
		/* 820B8564h case    4:*/		regs.R10 = regs.R29;
		/* 820B8564h case    4:*/		return 0x820B8568;
		  /* 820B8568h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B8568h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8568h case    5:*/		return 0x820B856C;
		  /* 820B856Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B856Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820B857C;  }
		/* 820B856Ch case    6:*/		return 0x820B8570;
		  /* 820B8570h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B8570h case    7:*/		regs.CTR = regs.R30;
		/* 820B8570h case    7:*/		return 0x820B8574;
		  /* 820B8574h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B8574h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8574h case    8:*/		return 0x820B8578;
		  /* 820B8578h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B8578h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8574;  }
		/* 820B8578h case    9:*/		return 0x820B857C;
	}
	return 0x820B857C;
} // Block from 820B8554h-820B857Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B857Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B857C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B857C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B857C);
		  /* 820B857Ch */ case    0:  		/* lwz R24, <#[R1 + 168]> */
		/* 820B857Ch case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B857Ch case    0:*/		return 0x820B8580;
		  /* 820B8580h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B8580h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8580h case    1:*/		return 0x820B8584;
		  /* 820B8584h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B8584h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B85A4;  }
		/* 820B8584h case    2:*/		return 0x820B8588;
		  /* 820B8588h */ case    3:  		/* addi R11, R24, -4 */
		/* 820B8588h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820B8588h case    3:*/		return 0x820B858C;
		  /* 820B858Ch */ case    4:  		/* mr R10, R29 */
		/* 820B858Ch case    4:*/		regs.R10 = regs.R29;
		/* 820B858Ch case    4:*/		return 0x820B8590;
		  /* 820B8590h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B8590h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8590h case    5:*/		return 0x820B8594;
		  /* 820B8594h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8594h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B85A4;  }
		/* 820B8594h case    6:*/		return 0x820B8598;
		  /* 820B8598h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B8598h case    7:*/		regs.CTR = regs.R30;
		/* 820B8598h case    7:*/		return 0x820B859C;
		  /* 820B859Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B859Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B859Ch case    8:*/		return 0x820B85A0;
		  /* 820B85A0h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B85A0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B859C;  }
		/* 820B85A0h case    9:*/		return 0x820B85A4;
	}
	return 0x820B85A4;
} // Block from 820B857Ch-820B85A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B85A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B85A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B85A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B85A4);
		  /* 820B85A4h */ case    0:  		/* lwz R26, <#[R1 + 172]> */
		/* 820B85A4h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B85A4h case    0:*/		return 0x820B85A8;
		  /* 820B85A8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B85A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B85A8h case    1:*/		return 0x820B85AC;
		  /* 820B85ACh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B85ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x820B85CC;  }
		/* 820B85ACh case    2:*/		return 0x820B85B0;
		  /* 820B85B0h */ case    3:  		/* addi R11, R26, -4 */
		/* 820B85B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820B85B0h case    3:*/		return 0x820B85B4;
		  /* 820B85B4h */ case    4:  		/* mr R10, R29 */
		/* 820B85B4h case    4:*/		regs.R10 = regs.R29;
		/* 820B85B4h case    4:*/		return 0x820B85B8;
		  /* 820B85B8h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B85B8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B85B8h case    5:*/		return 0x820B85BC;
		  /* 820B85BCh */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B85BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x820B85CC;  }
		/* 820B85BCh case    6:*/		return 0x820B85C0;
		  /* 820B85C0h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B85C0h case    7:*/		regs.CTR = regs.R30;
		/* 820B85C0h case    7:*/		return 0x820B85C4;
		  /* 820B85C4h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B85C4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B85C4h case    8:*/		return 0x820B85C8;
		  /* 820B85C8h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B85C8h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B85C4;  }
		/* 820B85C8h case    9:*/		return 0x820B85CC;
	}
	return 0x820B85CC;
} // Block from 820B85A4h-820B85CCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B85CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B85CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B85CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B85CC);
		  /* 820B85CCh */ case    0:  		/* lwz R27, <#[R1 + 176]> */
		/* 820B85CCh case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000B0) );
		/* 820B85CCh case    0:*/		return 0x820B85D0;
		  /* 820B85D0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B85D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B85D0h case    1:*/		return 0x820B85D4;
		  /* 820B85D4h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820B85D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B8614;  }
		/* 820B85D4h case    2:*/		return 0x820B85D8;
		  /* 820B85D8h */ case    3:  		/* addi R11, R27, -4 */
		/* 820B85D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B85D8h case    3:*/		return 0x820B85DC;
		  /* 820B85DCh */ case    4:  		/* mr R10, R29 */
		/* 820B85DCh case    4:*/		regs.R10 = regs.R29;
		/* 820B85DCh case    4:*/		return 0x820B85E0;
		  /* 820B85E0h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B85E0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B85E0h case    5:*/		return 0x820B85E4;
		  /* 820B85E4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B85E4h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B85F4;  }
		/* 820B85E4h case    6:*/		return 0x820B85E8;
		  /* 820B85E8h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B85E8h case    7:*/		regs.CTR = regs.R30;
		/* 820B85E8h case    7:*/		return 0x820B85EC;
		  /* 820B85ECh */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B85ECh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B85ECh case    8:*/		return 0x820B85F0;
		  /* 820B85F0h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B85F0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B85EC;  }
		/* 820B85F0h case    9:*/		return 0x820B85F4;
	}
	return 0x820B85F4;
} // Block from 820B85CCh-820B85F4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B85F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B85F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B85F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B85F4);
		  /* 820B85F4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B85F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B85F4h case    0:*/		return 0x820B85F8;
		  /* 820B85F8h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B85F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B8614;  }
		/* 820B85F8h case    1:*/		return 0x820B85FC;
		  /* 820B85FCh */ case    2:  		/* addi R11, R15, -4 */
		/* 820B85FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B85FCh case    2:*/		return 0x820B8600;
		  /* 820B8600h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B8600h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8600h case    3:*/		return 0x820B8604;
		  /* 820B8604h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8604h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B8614;  }
		/* 820B8604h case    4:*/		return 0x820B8608;
		  /* 820B8608h */ case    5:  		/* mtspr CTR, R30 */
		/* 820B8608h case    5:*/		regs.CTR = regs.R30;
		/* 820B8608h case    5:*/		return 0x820B860C;
		  /* 820B860Ch */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B860Ch case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B860Ch case    6:*/		return 0x820B8610;
		  /* 820B8610h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B8610h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B860C;  }
		/* 820B8610h case    7:*/		return 0x820B8614;
	}
	return 0x820B8614;
} // Block from 820B85F4h-820B8614h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B8614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8614);
		  /* 820B8614h */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820B8614h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820B8614h case    0:*/		return 0x820B8618;
		  /* 820B8618h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B8618h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B8618h case    1:*/		return 0x820B861C;
		  /* 820B861Ch */ case    2:  		/* li R9, 0 */
		/* 820B861Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B861Ch case    2:*/		return 0x820B8620;
		  /* 820B8620h */ case    3:  		/* oris R28, R30, 8272 */
		/* 820B8620h case    3:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R30,0x2050);
		/* 820B8620h case    3:*/		return 0x820B8624;
		  /* 820B8624h */ case    4:  		/* mr R6, R25 */
		/* 820B8624h case    4:*/		regs.R6 = regs.R25;
		/* 820B8624h case    4:*/		return 0x820B8628;
		  /* 820B8628h */ case    5:  		/* mr R5, R28 */
		/* 820B8628h case    5:*/		regs.R5 = regs.R28;
		/* 820B8628h case    5:*/		return 0x820B862C;
		  /* 820B862Ch */ case    6:  		/* mr R4, R16 */
		/* 820B862Ch case    6:*/		regs.R4 = regs.R16;
		/* 820B862Ch case    6:*/		return 0x820B8630;
		  /* 820B8630h */ case    7:  		/* mr R3, R14 */
		/* 820B8630h case    7:*/		regs.R3 = regs.R14;
		/* 820B8630h case    7:*/		return 0x820B8634;
		  /* 820B8634h */ case    8:  		/* bl -31532 */
		/* 820B8634h case    8:*/		regs.LR = 0x820B8638; return 0x820B0B08;
		/* 820B8634h case    8:*/		return 0x820B8638;
		  /* 820B8638h */ case    9:  		/* or. R31, R3, R3 */
		/* 820B8638h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8638h case    9:*/		return 0x820B863C;
		  /* 820B863Ch */ case   10:  		/* bc 12, CR0_LT, 23964 */
		/* 820B863Ch case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B863Ch case   10:*/		return 0x820B8640;
		  /* 820B8640h */ case   11:  		/* oris R29, R30, 4176 */
		/* 820B8640h case   11:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R30,0x1050);
		/* 820B8640h case   11:*/		return 0x820B8644;
		  /* 820B8644h */ case   12:  		/* li R9, 4 */
		/* 820B8644h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B8644h case   12:*/		return 0x820B8648;
		  /* 820B8648h */ case   13:  		/* li R8, 0 */
		/* 820B8648h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8648h case   13:*/		return 0x820B864C;
		  /* 820B864Ch */ case   14:  		/* mr R7, R25 */
		/* 820B864Ch case   14:*/		regs.R7 = regs.R25;
		/* 820B864Ch case   14:*/		return 0x820B8650;
		  /* 820B8650h */ case   15:  		/* mr R6, R23 */
		/* 820B8650h case   15:*/		regs.R6 = regs.R23;
		/* 820B8650h case   15:*/		return 0x820B8654;
		  /* 820B8654h */ case   16:  		/* mr R5, R29 */
		/* 820B8654h case   16:*/		regs.R5 = regs.R29;
		/* 820B8654h case   16:*/		return 0x820B8658;
		  /* 820B8658h */ case   17:  		/* mr R4, R16 */
		/* 820B8658h case   17:*/		regs.R4 = regs.R16;
		/* 820B8658h case   17:*/		return 0x820B865C;
		  /* 820B865Ch */ case   18:  		/* mr R3, R14 */
		/* 820B865Ch case   18:*/		regs.R3 = regs.R14;
		/* 820B865Ch case   18:*/		return 0x820B8660;
		  /* 820B8660h */ case   19:  		/* bl -31576 */
		/* 820B8660h case   19:*/		regs.LR = 0x820B8664; return 0x820B0B08;
		/* 820B8660h case   19:*/		return 0x820B8664;
		  /* 820B8664h */ case   20:  		/* or. R31, R3, R3 */
		/* 820B8664h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8664h case   20:*/		return 0x820B8668;
		  /* 820B8668h */ case   21:  		/* bc 12, CR0_LT, 23920 */
		/* 820B8668h case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8668h case   21:*/		return 0x820B866C;
		  /* 820B866Ch */ case   22:  		/* li R9, 0 */
		/* 820B866Ch case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B866Ch case   22:*/		return 0x820B8670;
		  /* 820B8670h */ case   23:  		/* li R8, 0 */
		/* 820B8670h case   23:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8670h case   23:*/		return 0x820B8674;
		  /* 820B8674h */ case   24:  		/* mr R7, R25 */
		/* 820B8674h case   24:*/		regs.R7 = regs.R25;
		/* 820B8674h case   24:*/		return 0x820B8678;
		  /* 820B8678h */ case   25:  		/* mr R6, R24 */
		/* 820B8678h case   25:*/		regs.R6 = regs.R24;
		/* 820B8678h case   25:*/		return 0x820B867C;
		  /* 820B867Ch */ case   26:  		/* oris R5, R30, 4112 */
		/* 820B867Ch case   26:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820B867Ch case   26:*/		return 0x820B8680;
		  /* 820B8680h */ case   27:  		/* mr R4, R16 */
		/* 820B8680h case   27:*/		regs.R4 = regs.R16;
		/* 820B8680h case   27:*/		return 0x820B8684;
		  /* 820B8684h */ case   28:  		/* mr R3, R14 */
		/* 820B8684h case   28:*/		regs.R3 = regs.R14;
		/* 820B8684h case   28:*/		return 0x820B8688;
		  /* 820B8688h */ case   29:  		/* bl -31616 */
		/* 820B8688h case   29:*/		regs.LR = 0x820B868C; return 0x820B0B08;
		/* 820B8688h case   29:*/		return 0x820B868C;
		  /* 820B868Ch */ case   30:  		/* or. R31, R3, R3 */
		/* 820B868Ch case   30:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B868Ch case   30:*/		return 0x820B8690;
		  /* 820B8690h */ case   31:  		/* bc 12, CR0_LT, 23880 */
		/* 820B8690h case   31:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8690h case   31:*/		return 0x820B8694;
		  /* 820B8694h */ case   32:  		/* li R9, 4 */
		/* 820B8694h case   32:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B8694h case   32:*/		return 0x820B8698;
		  /* 820B8698h */ case   33:  		/* li R8, 0 */
		/* 820B8698h case   33:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8698h case   33:*/		return 0x820B869C;
		  /* 820B869Ch */ case   34:  		/* mr R7, R24 */
		/* 820B869Ch case   34:*/		regs.R7 = regs.R24;
		/* 820B869Ch case   34:*/		return 0x820B86A0;
		  /* 820B86A0h */ case   35:  		/* mr R6, R26 */
		/* 820B86A0h case   35:*/		regs.R6 = regs.R26;
		/* 820B86A0h case   35:*/		return 0x820B86A4;
		  /* 820B86A4h */ case   36:  		/* mr R5, R29 */
		/* 820B86A4h case   36:*/		regs.R5 = regs.R29;
		/* 820B86A4h case   36:*/		return 0x820B86A8;
		  /* 820B86A8h */ case   37:  		/* mr R4, R16 */
		/* 820B86A8h case   37:*/		regs.R4 = regs.R16;
		/* 820B86A8h case   37:*/		return 0x820B86AC;
		  /* 820B86ACh */ case   38:  		/* mr R3, R14 */
		/* 820B86ACh case   38:*/		regs.R3 = regs.R14;
		/* 820B86ACh case   38:*/		return 0x820B86B0;
		  /* 820B86B0h */ case   39:  		/* bl -31656 */
		/* 820B86B0h case   39:*/		regs.LR = 0x820B86B4; return 0x820B0B08;
		/* 820B86B0h case   39:*/		return 0x820B86B4;
		  /* 820B86B4h */ case   40:  		/* or. R31, R3, R3 */
		/* 820B86B4h case   40:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B86B4h case   40:*/		return 0x820B86B8;
		  /* 820B86B8h */ case   41:  		/* bc 12, CR0_LT, 23840 */
		/* 820B86B8h case   41:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B86B8h case   41:*/		return 0x820B86BC;
		  /* 820B86BCh */ case   42:  		/* li R9, 4 */
		/* 820B86BCh case   42:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B86BCh case   42:*/		return 0x820B86C0;
		  /* 820B86C0h */ case   43:  		/* mr R8, R26 */
		/* 820B86C0h case   43:*/		regs.R8 = regs.R26;
		/* 820B86C0h case   43:*/		return 0x820B86C4;
		  /* 820B86C4h */ case   44:  		/* mr R7, R23 */
		/* 820B86C4h case   44:*/		regs.R7 = regs.R23;
		/* 820B86C4h case   44:*/		return 0x820B86C8;
		  /* 820B86C8h */ case   45:  		/* mr R6, R27 */
		/* 820B86C8h case   45:*/		regs.R6 = regs.R27;
		/* 820B86C8h case   45:*/		return 0x820B86CC;
		  /* 820B86CCh */ case   46:  		/* oris R5, R30, 8256 */
		/* 820B86CCh case   46:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2040);
		/* 820B86CCh case   46:*/		return 0x820B86D0;
		  /* 820B86D0h */ case   47:  		/* mr R4, R16 */
		/* 820B86D0h case   47:*/		regs.R4 = regs.R16;
		/* 820B86D0h case   47:*/		return 0x820B86D4;
		  /* 820B86D4h */ case   48:  		/* mr R3, R14 */
		/* 820B86D4h case   48:*/		regs.R3 = regs.R14;
		/* 820B86D4h case   48:*/		return 0x820B86D8;
		  /* 820B86D8h */ case   49:  		/* bl -31696 */
		/* 820B86D8h case   49:*/		regs.LR = 0x820B86DC; return 0x820B0B08;
		/* 820B86D8h case   49:*/		return 0x820B86DC;
		  /* 820B86DCh */ case   50:  		/* or. R31, R3, R3 */
		/* 820B86DCh case   50:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B86DCh case   50:*/		return 0x820B86E0;
		  /* 820B86E0h */ case   51:  		/* bc 12, CR0_LT, 23800 */
		/* 820B86E0h case   51:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B86E0h case   51:*/		return 0x820B86E4;
		  /* 820B86E4h */ case   52:  		/* li R9, 4 */
		/* 820B86E4h case   52:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B86E4h case   52:*/		return 0x820B86E8;
		  /* 820B86E8h */ case   53:  		/* mr R8, R22 */
		/* 820B86E8h case   53:*/		regs.R8 = regs.R22;
		/* 820B86E8h case   53:*/		return 0x820B86EC;
		  /* 820B86ECh */ case   54:  		/* mr R7, R27 */
		/* 820B86ECh case   54:*/		regs.R7 = regs.R27;
		/* 820B86ECh case   54:*/		return 0x820B86F0;
		  /* 820B86F0h */ case   55:  		/* mr R5, R28 */
		/* 820B86F0h case   55:*/		regs.R5 = regs.R28;
		/* 820B86F0h case   55:*/		return 0x820B86F4;
		  /* 820B86F4h */ case   56:  		/* b 20540 */
		/* 820B86F4h case   56:*/		return 0x820BD730;
		/* 820B86F4h case   56:*/		return 0x820B86F8;
		  /* 820B86F8h */ case   57:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B86F8h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B86F8h case   57:*/		return 0x820B86FC;
		  /* 820B86FCh */ case   58:  		/* cmplwi CR6, R11, 0 */
		/* 820B86FCh case   58:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B86FCh case   58:*/		return 0x820B8700;
		  /* 820B8700h */ case   59:  		/* bc 12, CR6_EQ, 23760 */
		/* 820B8700h case   59:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8700h case   59:*/		return 0x820B8704;
		  /* 820B8704h */ case   60:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B8704h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B8704h case   60:*/		return 0x820B8708;
		  /* 820B8708h */ case   61:  		/* cmplwi CR6, R11, 0 */
		/* 820B8708h case   61:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8708h case   61:*/		return 0x820B870C;
		  /* 820B870Ch */ case   62:  		/* bc 12, CR6_EQ, 23748 */
		/* 820B870Ch case   62:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B870Ch case   62:*/		return 0x820B8710;
		  /* 820B8710h */ case   63:  		/* cmplwi CR6, R15, 0 */
		/* 820B8710h case   63:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B8710h case   63:*/		return 0x820B8714;
		  /* 820B8714h */ case   64:  		/* bc 12, CR6_EQ, 696 */
		/* 820B8714h case   64:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8714h case   64:*/		return 0x820B8718;
		  /* 820B8718h */ case   65:  		/* lwz R10, <#[R1 + 144]> */
		/* 820B8718h case   65:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820B8718h case   65:*/		return 0x820B871C;
		  /* 820B871Ch */ case   66:  		/* addi R25, R1, 808 */
		/* 820B871Ch case   66:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0x328);
		/* 820B871Ch case   66:*/		return 0x820B8720;
		  /* 820B8720h */ case   67:  		/* lwz R11, <#[R1 + 148]> */
		/* 820B8720h case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820B8720h case   67:*/		return 0x820B8724;
		  /* 820B8724h */ case   68:  		/* addi R24, R1, 824 */
		/* 820B8724h case   68:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R1,0x338);
		/* 820B8724h case   68:*/		return 0x820B8728;
		  /* 820B8728h */ case   69:  		/* addi R23, R1, 752 */
		/* 820B8728h case   69:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R1,0x2F0);
		/* 820B8728h case   69:*/		return 0x820B872C;
		  /* 820B872Ch */ case   70:  		/* li R29, -1 */
		/* 820B872Ch case   70:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B872Ch case   70:*/		return 0x820B8730;
		  /* 820B8730h */ case   71:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820B8730h case   71:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820B8730h case   71:*/		return 0x820B8734;
		  /* 820B8734h */ case   72:  		/* lwz R8, <#[R10 + 4]> */
		/* 820B8734h case   72:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 820B8734h case   72:*/		return 0x820B8738;
		  /* 820B8738h */ case   73:  		/* li R9, 0 */
		/* 820B8738h case   73:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8738h case   73:*/		return 0x820B873C;
		  /* 820B873Ch */ case   74:  		/* oris R26, R30, 8272 */
		/* 820B873Ch case   74:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R30,0x2050);
		/* 820B873Ch case   74:*/		return 0x820B8740;
		  /* 820B8740h */ case   75:  		/* addi R6, R1, 808 */
		/* 820B8740h case   75:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x328);
		/* 820B8740h case   75:*/		return 0x820B8744;
		  /* 820B8744h */ case   76:  		/* mr R4, R16 */
		/* 820B8744h case   76:*/		regs.R4 = regs.R16;
		/* 820B8744h case   76:*/		return 0x820B8748;
		  /* 820B8748h */ case   77:  		/* mr R31, R29 */
		/* 820B8748h case   77:*/		regs.R31 = regs.R29;
		/* 820B8748h case   77:*/		return 0x820B874C;
		  /* 820B874Ch */ case   78:  		/* stw R8, <#[R1 + 568]> */
		/* 820B874Ch case   78:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000238) );
		/* 820B874Ch case   78:*/		return 0x820B8750;
		  /* 820B8750h */ case   79:  		/* addi R8, R1, 584 */
		/* 820B8750h case   79:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x248);
		/* 820B8750h case   79:*/		return 0x820B8754;
		  /* 820B8754h */ case   80:  		/* lwz R7, <#[R10 + 8]> */
		/* 820B8754h case   80:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 820B8754h case   80:*/		return 0x820B8758;
		  /* 820B8758h */ case   81:  		/* mr R28, R29 */
		/* 820B8758h case   81:*/		regs.R28 = regs.R29;
		/* 820B8758h case   81:*/		return 0x820B875C;
		  /* 820B875Ch */ case   82:  		/* stw R7, <#[R1 + 572]> */
		/* 820B875Ch case   82:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000023C) );
		/* 820B875Ch case   82:*/		return 0x820B8760;
		  /* 820B8760h */ case   83:  		/* addi R7, R1, 568 */
		/* 820B8760h case   83:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x238);
		/* 820B8760h case   83:*/		return 0x820B8764;
		  /* 820B8764h */ case   84:  		/* lwz R5, <#[R10]> */
		/* 820B8764h case   84:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 820B8764h case   84:*/		return 0x820B8768;
		  /* 820B8768h */ case   85:  		/* mr R27, R29 */
		/* 820B8768h case   85:*/		regs.R27 = regs.R29;
		/* 820B8768h case   85:*/		return 0x820B876C;
		  /* 820B876Ch */ case   86:  		/* stw R5, <#[R1 + 576]> */
		/* 820B876Ch case   86:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000240) );
		/* 820B876Ch case   86:*/		return 0x820B8770;
		  /* 820B8770h */ case   87:  		/* mr R5, R26 */
		/* 820B8770h case   87:*/		regs.R5 = regs.R26;
		/* 820B8770h case   87:*/		return 0x820B8774;
		  /* 820B8774h */ case   88:  		/* lwz R3, <#[R11 + 8]> */
		/* 820B8774h case   88:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820B8774h case   88:*/		return 0x820B8778;
		  /* 820B8778h */ case   89:  		/* stw R3, <#[R1 + 584]> */
		/* 820B8778h case   89:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000248) );
		/* 820B8778h case   89:*/		return 0x820B877C;
		  /* 820B877Ch */ case   90:  		/* mr R3, R14 */
		/* 820B877Ch case   90:*/		regs.R3 = regs.R14;
		/* 820B877Ch case   90:*/		return 0x820B8780;
		  /* 820B8780h */ case   91:  		/* lwz R22, <#[R11]> */
		/* 820B8780h case   91:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 820B8780h case   91:*/		return 0x820B8784;
		  /* 820B8784h */ case   92:  		/* stw R22, <#[R1 + 588]> */
		/* 820B8784h case   92:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x0000024C) );
		/* 820B8784h case   92:*/		return 0x820B8788;
		  /* 820B8788h */ case   93:  		/* lwz R22, <#[R11 + 4]> */
		/* 820B8788h case   93:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000004) );
		/* 820B8788h case   93:*/		return 0x820B878C;
		  /* 820B878Ch */ case   94:  		/* stw R22, <#[R1 + 592]> */
		/* 820B878Ch case   94:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000250) );
		/* 820B878Ch case   94:*/		return 0x820B8790;
		  /* 820B8790h */ case   95:  		/* lwz R22, <#[R10 + 8]> */
		/* 820B8790h case   95:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R10 + 0x00000008) );
		/* 820B8790h case   95:*/		return 0x820B8794;
		  /* 820B8794h */ case   96:  		/* stw R22, <#[R1 + 600]> */
		/* 820B8794h case   96:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000258) );
		/* 820B8794h case   96:*/		return 0x820B8798;
		  /* 820B8798h */ case   97:  		/* lwz R22, <#[R10]> */
		/* 820B8798h case   97:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R10 + 0x00000000) );
		/* 820B8798h case   97:*/		return 0x820B879C;
		  /* 820B879Ch */ case   98:  		/* stw R22, <#[R1 + 604]> */
		/* 820B879Ch case   98:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x0000025C) );
		/* 820B879Ch case   98:*/		return 0x820B87A0;
		  /* 820B87A0h */ case   99:  		/* lwz R10, <#[R10 + 4]> */
		/* 820B87A0h case   99:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820B87A0h case   99:*/		return 0x820B87A4;
		  /* 820B87A4h */ case  100:  		/* stw R10, <#[R1 + 608]> */
		/* 820B87A4h case  100:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000260) );
		/* 820B87A4h case  100:*/		return 0x820B87A8;
		  /* 820B87A8h */ case  101:  		/* lwz R10, <#[R11 + 4]> */
		/* 820B87A8h case  101:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820B87A8h case  101:*/		return 0x820B87AC;
		  /* 820B87ACh */ case  102:  		/* stw R10, <#[R1 + 616]> */
		/* 820B87ACh case  102:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000268) );
		/* 820B87ACh case  102:*/		return 0x820B87B0;
		  /* 820B87B0h */ case  103:  		/* lwz R10, <#[R11 + 8]> */
		/* 820B87B0h case  103:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820B87B0h case  103:*/		return 0x820B87B4;
		  /* 820B87B4h */ case  104:  		/* stw R10, <#[R1 + 620]> */
		/* 820B87B4h case  104:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000026C) );
		/* 820B87B4h case  104:*/		return 0x820B87B8;
		  /* 820B87B8h */ case  105:  		/* lwz R11, <#[R11]> */
		/* 820B87B8h case  105:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B87B8h case  105:*/		return 0x820B87BC;
		  /* 820B87BCh */ case  106:  		/* stw R29, <#[R25]> */
		/* 820B87BCh case  106:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R25 + 0x00000000) );
		/* 820B87BCh case  106:*/		return 0x820B87C0;
		  /* 820B87C0h */ case  107:  		/* stw R29, <#[R24]> */
		/* 820B87C0h case  107:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R24 + 0x00000000) );
		/* 820B87C0h case  107:*/		return 0x820B87C4;
		  /* 820B87C4h */ case  108:  		/* stw R29, <#[R23]> */
		/* 820B87C4h case  108:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R23 + 0x00000000) );
		/* 820B87C4h case  108:*/		return 0x820B87C8;
		  /* 820B87C8h */ case  109:  		/* stw R29, <#[R25 + 4]> */
		/* 820B87C8h case  109:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R25 + 0x00000004) );
		/* 820B87C8h case  109:*/		return 0x820B87CC;
		  /* 820B87CCh */ case  110:  		/* stw R29, <#[R24 + 4]> */
		/* 820B87CCh case  110:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R24 + 0x00000004) );
		/* 820B87CCh case  110:*/		return 0x820B87D0;
		  /* 820B87D0h */ case  111:  		/* stw R29, <#[R23 + 4]> */
		/* 820B87D0h case  111:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R23 + 0x00000004) );
		/* 820B87D0h case  111:*/		return 0x820B87D4;
		  /* 820B87D4h */ case  112:  		/* stw R29, <#[R25 + 8]> */
		/* 820B87D4h case  112:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R25 + 0x00000008) );
		/* 820B87D4h case  112:*/		return 0x820B87D8;
		  /* 820B87D8h */ case  113:  		/* stw R29, <#[R24 + 8]> */
		/* 820B87D8h case  113:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R24 + 0x00000008) );
		/* 820B87D8h case  113:*/		return 0x820B87DC;
		  /* 820B87DCh */ case  114:  		/* stw R29, <#[R23 + 8]> */
		/* 820B87DCh case  114:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R23 + 0x00000008) );
		/* 820B87DCh case  114:*/		return 0x820B87E0;
		  /* 820B87E0h */ case  115:  		/* stw R11, <#[R1 + 624]> */
		/* 820B87E0h case  115:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000270) );
		/* 820B87E0h case  115:*/		return 0x820B87E4;
		  /* 820B87E4h */ case  116:  		/* stw R29, <#[R15]> */
		/* 820B87E4h case  116:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820B87E4h case  116:*/		return 0x820B87E8;
		  /* 820B87E8h */ case  117:  		/* stw R29, <#[R15 + 4]> */
		/* 820B87E8h case  117:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000004) );
		/* 820B87E8h case  117:*/		return 0x820B87EC;
		  /* 820B87ECh */ case  118:  		/* stw R29, <#[R15 + 8]> */
		/* 820B87ECh case  118:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000008) );
		/* 820B87ECh case  118:*/		return 0x820B87F0;
		  /* 820B87F0h */ case  119:  		/* bl -31976 */
		/* 820B87F0h case  119:*/		regs.LR = 0x820B87F4; return 0x820B0B08;
		/* 820B87F0h case  119:*/		return 0x820B87F4;
		  /* 820B87F4h */ case  120:  		/* or. R31, R3, R3 */
		/* 820B87F4h case  120:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B87F4h case  120:*/		return 0x820B87F8;
		  /* 820B87F8h */ case  121:  		/* bc 12, CR0_LT, 23520 */
		/* 820B87F8h case  121:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B87F8h case  121:*/		return 0x820B87FC;
		  /* 820B87FCh */ case  122:  		/* li R9, 0 */
		/* 820B87FCh case  122:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B87FCh case  122:*/		return 0x820B8800;
		  /* 820B8800h */ case  123:  		/* addi R8, R1, 616 */
		/* 820B8800h case  123:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x268);
		/* 820B8800h case  123:*/		return 0x820B8804;
		  /* 820B8804h */ case  124:  		/* addi R7, R1, 600 */
		/* 820B8804h case  124:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x258);
		/* 820B8804h case  124:*/		return 0x820B8808;
		  /* 820B8808h */ case  125:  		/* addi R6, R1, 824 */
		/* 820B8808h case  125:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x338);
		/* 820B8808h case  125:*/		return 0x820B880C;
		  /* 820B880Ch */ case  126:  		/* mr R5, R26 */
		/* 820B880Ch case  126:*/		regs.R5 = regs.R26;
		/* 820B880Ch case  126:*/		return 0x820B8810;
		  /* 820B8810h */ case  127:  		/* mr R4, R16 */
		/* 820B8810h case  127:*/		regs.R4 = regs.R16;
		/* 820B8810h case  127:*/		return 0x820B8814;
		  /* 820B8814h */ case  128:  		/* mr R3, R14 */
		/* 820B8814h case  128:*/		regs.R3 = regs.R14;
		/* 820B8814h case  128:*/		return 0x820B8818;
		  /* 820B8818h */ case  129:  		/* bl -32016 */
		/* 820B8818h case  129:*/		regs.LR = 0x820B881C; return 0x820B0B08;
		/* 820B8818h case  129:*/		return 0x820B881C;
		  /* 820B881Ch */ case  130:  		/* or. R31, R3, R3 */
		/* 820B881Ch case  130:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B881Ch case  130:*/		return 0x820B8820;
		  /* 820B8820h */ case  131:  		/* bc 12, CR0_LT, 23480 */
		/* 820B8820h case  131:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8820h case  131:*/		return 0x820B8824;
		  /* 820B8824h */ case  132:  		/* li R9, 0 */
		/* 820B8824h case  132:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8824h case  132:*/		return 0x820B8828;
		  /* 820B8828h */ case  133:  		/* li R8, 0 */
		/* 820B8828h case  133:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8828h case  133:*/		return 0x820B882C;
		  /* 820B882Ch */ case  134:  		/* addi R7, R1, 824 */
		/* 820B882Ch case  134:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x338);
		/* 820B882Ch case  134:*/		return 0x820B8830;
		  /* 820B8830h */ case  135:  		/* addi R6, R1, 752 */
		/* 820B8830h case  135:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2F0);
		/* 820B8830h case  135:*/		return 0x820B8834;
		  /* 820B8834h */ case  136:  		/* oris R5, R30, 4112 */
		/* 820B8834h case  136:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820B8834h case  136:*/		return 0x820B8838;
		  /* 820B8838h */ case  137:  		/* mr R4, R16 */
		/* 820B8838h case  137:*/		regs.R4 = regs.R16;
		/* 820B8838h case  137:*/		return 0x820B883C;
		  /* 820B883Ch */ case  138:  		/* mr R3, R14 */
		/* 820B883Ch case  138:*/		regs.R3 = regs.R14;
		/* 820B883Ch case  138:*/		return 0x820B8840;
		  /* 820B8840h */ case  139:  		/* bl -32056 */
		/* 820B8840h case  139:*/		regs.LR = 0x820B8844; return 0x820B0B08;
		/* 820B8840h case  139:*/		return 0x820B8844;
		  /* 820B8844h */ case  140:  		/* or. R31, R3, R3 */
		/* 820B8844h case  140:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8844h case  140:*/		return 0x820B8848;
		  /* 820B8848h */ case  141:  		/* bc 12, CR0_LT, 23440 */
		/* 820B8848h case  141:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8848h case  141:*/		return 0x820B884C;
		  /* 820B884Ch */ case  142:  		/* addi R8, R1, 752 */
		/* 820B884Ch case  142:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x2F0);
		/* 820B884Ch case  142:*/		return 0x820B8850;
		  /* 820B8850h */ case  143:  		/* addi R7, R1, 808 */
		/* 820B8850h case  143:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x328);
		/* 820B8850h case  143:*/		return 0x820B8854;
		  /* 820B8854h */ case  144:  		/* oris R5, R30, 8256 */
		/* 820B8854h case  144:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2040);
		/* 820B8854h case  144:*/		return 0x820B8858;
		  /* 820B8858h */ case  145:  		/* b 20180 */
		/* 820B8858h case  145:*/		return 0x820BD72C;
		/* 820B8858h case  145:*/		return 0x820B885C;
		  /* 820B885Ch */ case  146:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B885Ch case  146:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B885Ch case  146:*/		return 0x820B8860;
		  /* 820B8860h */ case  147:  		/* cmplwi CR6, R11, 0 */
		/* 820B8860h case  147:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8860h case  147:*/		return 0x820B8864;
		  /* 820B8864h */ case  148:  		/* bc 12, CR6_EQ, 23404 */
		/* 820B8864h case  148:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8864h case  148:*/		return 0x820B8868;
		  /* 820B8868h */ case  149:  		/* cmplwi CR6, R15, 0 */
		/* 820B8868h case  149:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B8868h case  149:*/		return 0x820B886C;
		  /* 820B886Ch */ case  150:  		/* bc 12, CR6_EQ, 352 */
		/* 820B886Ch case  150:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B886Ch case  150:*/		return 0x820B8870;
		  /* 820B8870h */ case  151:  		/* cmplwi CR6, R30, 0 */
		/* 820B8870h case  151:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8870h case  151:*/		return 0x820B8874;
		  /* 820B8874h */ case  152:  		/* bc 12, CR6_EQ, 32 */
		/* 820B8874h case  152:*/		if ( regs.CR[6].eq ) { return 0x820B8894;  }
		/* 820B8874h case  152:*/		return 0x820B8878;
		  /* 820B8878h */ case  153:  		/* addi R11, R15, -4 */
		/* 820B8878h case  153:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B8878h case  153:*/		return 0x820B887C;
		  /* 820B887Ch */ case  154:  		/* li R10, -1 */
		/* 820B887Ch case  154:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B887Ch case  154:*/		return 0x820B8880;
		  /* 820B8880h */ case  155:  		/* cmplwi CR0, R30, 0 */
		/* 820B8880h case  155:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8880h case  155:*/		return 0x820B8884;
		  /* 820B8884h */ case  156:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8884h case  156:*/		if ( regs.CR[0].eq ) { return 0x820B8894;  }
		/* 820B8884h case  156:*/		return 0x820B8888;
		  /* 820B8888h */ case  157:  		/* mtspr CTR, R30 */
		/* 820B8888h case  157:*/		regs.CTR = regs.R30;
		/* 820B8888h case  157:*/		return 0x820B888C;
		  /* 820B888Ch */ case  158:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B888Ch case  158:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B888Ch case  158:*/		return 0x820B8890;
		  /* 820B8890h */ case  159:  		/* bc 16, CR0_LT, -4 */
		/* 820B8890h case  159:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B888C;  }
		/* 820B8890h case  159:*/		return 0x820B8894;
	}
	return 0x820B8894;
} // Block from 820B8614h-820B8894h (160 instructions)

//////////////////////////////////////////////////////
// Block at 820B8894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8894);
		  /* 820B8894h */ case    0:  		/* li R11, 269 */
		/* 820B8894h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x10D);
		/* 820B8894h case    0:*/		return 0x820B8898;
		  /* 820B8898h */ case    1:  		/* li R9, 0 */
		/* 820B8898h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8898h case    1:*/		return 0x820B889C;
		  /* 820B889Ch */ case    2:  		/* mr R5, R30 */
		/* 820B889Ch case    2:*/		regs.R5 = regs.R30;
		/* 820B889Ch case    2:*/		return 0x820B88A0;
		  /* 820B88A0h */ case    3:  		/* rlwimi R5, R11, 20, 0, 11 */
		/* 820B88A0h case    3:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R5,regs.R11);
		/* 820B88A0h case    3:*/		return 0x820B88A4;
		  /* 820B88A4h */ case    4:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B88A4h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B88A4h case    4:*/		return 0x820B88A8;
		  /* 820B88A8h */ case    5:  		/* li R8, 0 */
		/* 820B88A8h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B88A8h case    5:*/		return 0x820B88AC;
		  /* 820B88ACh */ case    6:  		/* b 20100 */
		/* 820B88ACh case    6:*/		return 0x820BD730;
		/* 820B88ACh case    6:*/		return 0x820B88B0;
		  /* 820B88B0h */ case    7:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B88B0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B88B0h case    7:*/		return 0x820B88B4;
		  /* 820B88B4h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820B88B4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B88B4h case    8:*/		return 0x820B88B8;
		  /* 820B88B8h */ case    9:  		/* bc 12, CR6_EQ, 23320 */
		/* 820B88B8h case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B88B8h case    9:*/		return 0x820B88BC;
		  /* 820B88BCh */ case   10:  		/* cmplwi CR6, R15, 0 */
		/* 820B88BCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B88BCh case   10:*/		return 0x820B88C0;
		  /* 820B88C0h */ case   11:  		/* bc 12, CR6_EQ, 268 */
		/* 820B88C0h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B88C0h case   11:*/		return 0x820B88C4;
		  /* 820B88C4h */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 820B88C4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B88C4h case   12:*/		return 0x820B88C8;
		  /* 820B88C8h */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 820B88C8h case   13:*/		if ( regs.CR[6].eq ) { return 0x820B88E8;  }
		/* 820B88C8h case   13:*/		return 0x820B88CC;
		  /* 820B88CCh */ case   14:  		/* addi R11, R15, -4 */
		/* 820B88CCh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B88CCh case   14:*/		return 0x820B88D0;
		  /* 820B88D0h */ case   15:  		/* li R10, -1 */
		/* 820B88D0h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B88D0h case   15:*/		return 0x820B88D4;
		  /* 820B88D4h */ case   16:  		/* cmplwi CR0, R30, 0 */
		/* 820B88D4h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B88D4h case   16:*/		return 0x820B88D8;
		  /* 820B88D8h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 820B88D8h case   17:*/		if ( regs.CR[0].eq ) { return 0x820B88E8;  }
		/* 820B88D8h case   17:*/		return 0x820B88DC;
		  /* 820B88DCh */ case   18:  		/* mtspr CTR, R30 */
		/* 820B88DCh case   18:*/		regs.CTR = regs.R30;
		/* 820B88DCh case   18:*/		return 0x820B88E0;
		  /* 820B88E0h */ case   19:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B88E0h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B88E0h case   19:*/		return 0x820B88E4;
		  /* 820B88E4h */ case   20:  		/* bc 16, CR0_LT, -4 */
		/* 820B88E4h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B88E0;  }
		/* 820B88E4h case   20:*/		return 0x820B88E8;
	}
	return 0x820B88E8;
} // Block from 820B8894h-820B88E8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820B88E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B88E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B88E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B88E8);
		  /* 820B88E8h */ case    0:  		/* li R11, 135 */
		/* 820B88E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x87);
		/* 820B88E8h case    0:*/		return 0x820B88EC;
		  /* 820B88ECh */ case    1:  		/* mr R5, R30 */
		/* 820B88ECh case    1:*/		regs.R5 = regs.R30;
		/* 820B88ECh case    1:*/		return 0x820B88F0;
		  /* 820B88F0h */ case    2:  		/* li R9, 0 */
		/* 820B88F0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B88F0h case    2:*/		return 0x820B88F4;
		  /* 820B88F4h */ case    3:  		/* rlwimi R5, R11, 21, 0, 11 */
		/* 820B88F4h case    3:*/		cpu::op::rlwimi<0,21,0,11>(regs,&regs.R5,regs.R11);
		/* 820B88F4h case    3:*/		return 0x820B88F8;
		  /* 820B88F8h */ case    4:  		/* b -84 */
		/* 820B88F8h case    4:*/		return 0x820B88A4;
		/* 820B88F8h case    4:*/		return 0x820B88FC;
		  /* 820B88FCh */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B88FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B88FCh case    5:*/		return 0x820B8900;
		  /* 820B8900h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820B8900h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B8900h case    6:*/		return 0x820B8904;
		  /* 820B8904h */ case    7:  		/* bc 12, CR6_EQ, 23244 */
		/* 820B8904h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B8904h case    7:*/		return 0x820B8908;
		  /* 820B8908h */ case    8:  		/* cmplwi CR6, R15, 0 */
		/* 820B8908h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B8908h case    8:*/		return 0x820B890C;
		  /* 820B890Ch */ case    9:  		/* bc 12, CR6_EQ, 192 */
		/* 820B890Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B890Ch case    9:*/		return 0x820B8910;
		  /* 820B8910h */ case   10:  		/* lwz R3, <#[R14 + 8]> */
		/* 820B8910h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000008) );
		/* 820B8910h case   10:*/		return 0x820B8914;
		  /* 820B8914h */ case   11:  		/* lis R11, -32255 */
		/* 820B8914h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820B8914h case   11:*/		return 0x820B8918;
		  /* 820B8918h */ case   12:  		/* li R6, 0 */
		/* 820B8918h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B8918h case   12:*/		return 0x820B891C;
		  /* 820B891Ch */ case   13:  		/* li R5, 0 */
		/* 820B891Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B891Ch case   13:*/		return 0x820B8920;
		  /* 820B8920h */ case   14:  		/* lwz R4, <#[R3 + 120]> */
		/* 820B8920h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820B8920h case   14:*/		return 0x820B8924;
		  /* 820B8924h */ case   15:  		/* lfd FR1, <#[R11 + 9048]> */
		/* 820B8924h case   15:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00002358) );
		/* 820B8924h case   15:*/		return 0x820B8928;
		  /* 820B8928h */ case   16:  		/* bl 280832 */
		/* 820B8928h case   16:*/		regs.LR = 0x820B892C; return 0x820FD228;
		/* 820B8928h case   16:*/		return 0x820B892C;
		  /* 820B892Ch */ case   17:  		/* mr R31, R3 */
		/* 820B892Ch case   17:*/		regs.R31 = regs.R3;
		/* 820B892Ch case   17:*/		return 0x820B8930;
		  /* 820B8930h */ case   18:  		/* mr R4, R30 */
		/* 820B8930h case   18:*/		regs.R4 = regs.R30;
		/* 820B8930h case   18:*/		return 0x820B8934;
		  /* 820B8934h */ case   19:  		/* mr R3, R14 */
		/* 820B8934h case   19:*/		regs.R3 = regs.R14;
		/* 820B8934h case   19:*/		return 0x820B8938;
		  /* 820B8938h */ case   20:  		/* bl -33352 */
		/* 820B8938h case   20:*/		regs.LR = 0x820B893C; return 0x820B06F0;
		/* 820B8938h case   20:*/		return 0x820B893C;
		  /* 820B893Ch */ case   21:  		/* or. R8, R3, R3 */
		/* 820B893Ch case   21:*/		cpu::op::or<1>(regs,&regs.R8,regs.R3,regs.R3);
		/* 820B893Ch case   21:*/		return 0x820B8940;
		  /* 820B8940h */ case   22:  		/* bc 12, CR0_EQ, 19168 */
		/* 820B8940h case   22:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B8940h case   22:*/		return 0x820B8944;
		  /* 820B8944h */ case   23:  		/* cmplwi CR6, R30, 0 */
		/* 820B8944h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8944h case   23:*/		return 0x820B8948;
		  /* 820B8948h */ case   24:  		/* bc 12, CR6_EQ, 64 */
		/* 820B8948h case   24:*/		if ( regs.CR[6].eq ) { return 0x820B8988;  }
		/* 820B8948h case   24:*/		return 0x820B894C;
		  /* 820B894Ch */ case   25:  		/* addi R11, R8, -4 */
		/* 820B894Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820B894Ch case   25:*/		return 0x820B8950;
		  /* 820B8950h */ case   26:  		/* cmplwi CR0, R30, 0 */
		/* 820B8950h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8950h case   26:*/		return 0x820B8954;
		  /* 820B8954h */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8954h case   27:*/		if ( regs.CR[0].eq ) { return 0x820B8964;  }
		/* 820B8954h case   27:*/		return 0x820B8958;
		  /* 820B8958h */ case   28:  		/* mtspr CTR, R30 */
		/* 820B8958h case   28:*/		regs.CTR = regs.R30;
		/* 820B8958h case   28:*/		return 0x820B895C;
		  /* 820B895Ch */ case   29:  		/* stwu R31, <#[R11 + 4]> */
		/* 820B895Ch case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B895Ch case   29:*/		return 0x820B8960;
		  /* 820B8960h */ case   30:  		/* bc 16, CR0_LT, -4 */
		/* 820B8960h case   30:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B895C;  }
		/* 820B8960h case   30:*/		return 0x820B8964;
	}
	return 0x820B8964;
} // Block from 820B88E8h-820B8964h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820B8964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8964);
		  /* 820B8964h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B8964h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8964h case    0:*/		return 0x820B8968;
		  /* 820B8968h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820B8968h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B8988;  }
		/* 820B8968h case    1:*/		return 0x820B896C;
		  /* 820B896Ch */ case    2:  		/* addi R11, R15, -4 */
		/* 820B896Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B896Ch case    2:*/		return 0x820B8970;
		  /* 820B8970h */ case    3:  		/* li R10, -1 */
		/* 820B8970h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B8970h case    3:*/		return 0x820B8974;
		  /* 820B8974h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820B8974h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8974h case    4:*/		return 0x820B8978;
		  /* 820B8978h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8978h case    5:*/		if ( regs.CR[0].eq ) { return 0x820B8988;  }
		/* 820B8978h case    5:*/		return 0x820B897C;
		  /* 820B897Ch */ case    6:  		/* mtspr CTR, R30 */
		/* 820B897Ch case    6:*/		regs.CTR = regs.R30;
		/* 820B897Ch case    6:*/		return 0x820B8980;
		  /* 820B8980h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B8980h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8980h case    7:*/		return 0x820B8984;
		  /* 820B8984h */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820B8984h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8980;  }
		/* 820B8984h case    8:*/		return 0x820B8988;
	}
	return 0x820B8988;
} // Block from 820B8964h-820B8988h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B8988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8988);
		  /* 820B8988h */ case    0:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B8988h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B8988h case    0:*/		return 0x820B898C;
		  /* 820B898Ch */ case    1:  		/* li R11, 517 */
		/* 820B898Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x205);
		/* 820B898Ch case    1:*/		return 0x820B8990;
		  /* 820B8990h */ case    2:  		/* li R9, 0 */
		/* 820B8990h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8990h case    2:*/		return 0x820B8994;
		  /* 820B8994h */ case    3:  		/* mr R5, R30 */
		/* 820B8994h case    3:*/		regs.R5 = regs.R30;
		/* 820B8994h case    3:*/		return 0x820B8998;
		  /* 820B8998h */ case    4:  		/* rlwimi R5, R11, 20, 0, 11 */
		/* 820B8998h case    4:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R5,regs.R11);
		/* 820B8998h case    4:*/		return 0x820B899C;
		  /* 820B899Ch */ case    5:  		/* b 19860 */
		/* 820B899Ch case    5:*/		return 0x820BD730;
		/* 820B899Ch case    5:*/		return 0x820B89A0;
		  /* 820B89A0h */ case    6:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B89A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B89A0h case    6:*/		return 0x820B89A4;
		  /* 820B89A4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820B89A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B89A4h case    7:*/		return 0x820B89A8;
		  /* 820B89A8h */ case    8:  		/* bc 12, CR6_EQ, 23080 */
		/* 820B89A8h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B89A8h case    8:*/		return 0x820B89AC;
		  /* 820B89ACh */ case    9:  		/* cmplwi CR6, R15, 0 */
		/* 820B89ACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B89ACh case    9:*/		return 0x820B89B0;
		  /* 820B89B0h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 820B89B0h case   10:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B89B0h case   10:*/		return 0x820B89B4;
		  /* 820B89B4h */ case   11:  		/* lwz R10, <#[R1 + 160]> */
		/* 820B89B4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B89B4h case   11:*/		return 0x820B89B8;
		  /* 820B89B8h */ case   12:  		/* cmplwi CR6, R10, 1 */
		/* 820B89B8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 820B89B8h case   12:*/		return 0x820B89BC;
		  /* 820B89BCh */ case   13:  		/* bc 4, CR6_EQ, 112 */
		/* 820B89BCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x820B8A2C;  }
		/* 820B89BCh case   13:*/		return 0x820B89C0;
		  /* 820B89C0h */ case   14:  		/* lwz R11, <#[R1 + 144]> */
		/* 820B89C0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820B89C0h case   14:*/		return 0x820B89C4;
		  /* 820B89C4h */ case   15:  		/* lwz R11, <#[R11]> */
		/* 820B89C4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820B89C4h case   15:*/		return 0x820B89C8;
		  /* 820B89C8h */ case   16:  		/* stw R11, <#[R15]> */
		/* 820B89C8h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 820B89C8h case   16:*/		return 0x820B89CC;
	}
	return 0x820B89CC;
} // Block from 820B8988h-820B89CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 820B89CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B89CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B89CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B89CC);
		  /* 820B89CCh */ case    0:  		/* lwz R11, <#[R1 + 524]> */
		/* 820B89CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000020C) );
		/* 820B89CCh case    0:*/		return 0x820B89D0;
		  /* 820B89D0h */ case    1:  		/* lwz R30, <#[R11 + 12]> */
		/* 820B89D0h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B89D0h case    1:*/		return 0x820B89D4;
		  /* 820B89D4h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820B89D4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B89D4h case    2:*/		return 0x820B89D8;
		  /* 820B89D8h */ case    3:  		/* bc 12, CR6_EQ, 76 */
		/* 820B89D8h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B8A24;  }
		/* 820B89D8h case    3:*/		return 0x820B89DC;
		  /* 820B89DCh */ case    4:  		/* lwz R28, <#[R1 + 1716]> */
		/* 820B89DCh case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000006B4) );
		/* 820B89DCh case    4:*/		return 0x820B89E0;
		  /* 820B89E0h */ case    5:  		/* addi R29, R1, 144 */
		/* 820B89E0h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x90);
		/* 820B89E0h case    5:*/		return 0x820B89E4;
		  /* 820B89E4h */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B89E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B89E4h case    6:*/		return 0x820B89E8;
		  /* 820B89E8h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820B89E8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B89E8h case    7:*/		return 0x820B89EC;
		  /* 820B89ECh */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 820B89ECh case    8:*/		if ( regs.CR[6].eq ) { return 0x820B8A14;  }
		/* 820B89ECh case    8:*/		return 0x820B89F0;
		  /* 820B89F0h */ case    9:  		/* lwz R11, <#[R29]> */
		/* 820B89F0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820B89F0h case    9:*/		return 0x820B89F4;
		  /* 820B89F4h */ case   10:  		/* li R6, 0 */
		/* 820B89F4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B89F4h case   10:*/		return 0x820B89F8;
		  /* 820B89F8h */ case   11:  		/* li R5, 0 */
		/* 820B89F8h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B89F8h case   11:*/		return 0x820B89FC;
		  /* 820B89FCh */ case   12:  		/* mr R3, R28 */
		/* 820B89FCh case   12:*/		regs.R3 = regs.R28;
		/* 820B89FCh case   12:*/		return 0x820B8A00;
		  /* 820B8A00h */ case   13:  		/* stw R11, <#[R28 + 28]> */
		/* 820B8A00h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 820B8A00h case   13:*/		return 0x820B8A04;
		  /* 820B8A04h */ case   14:  		/* lwz R4, <#[R30 + 8]> */
		/* 820B8A04h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8A04h case   14:*/		return 0x820B8A08;
		  /* 820B8A08h */ case   15:  		/* bl 34016 */
		/* 820B8A08h case   15:*/		regs.LR = 0x820B8A0C; return 0x820C0EE8;
		/* 820B8A08h case   15:*/		return 0x820B8A0C;
		  /* 820B8A0Ch */ case   16:  		/* or. R31, R3, R3 */
		/* 820B8A0Ch case   16:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8A0Ch case   16:*/		return 0x820B8A10;
		  /* 820B8A10h */ case   17:  		/* bc 12, CR0_LT, 22984 */
		/* 820B8A10h case   17:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8A10h case   17:*/		return 0x820B8A14;
	}
	return 0x820B8A14;
} // Block from 820B89CCh-820B8A14h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820B8A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8A14);
		  /* 820B8A14h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 820B8A14h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8A14h case    0:*/		return 0x820B8A18;
		  /* 820B8A18h */ case    1:  		/* addi R29, R29, 4 */
		/* 820B8A18h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820B8A18h case    1:*/		return 0x820B8A1C;
		  /* 820B8A1Ch */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820B8A1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8A1Ch case    2:*/		return 0x820B8A20;
		  /* 820B8A20h */ case    3:  		/* bc 4, CR6_EQ, -60 */
		/* 820B8A20h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820B89E4;  }
		/* 820B8A20h case    3:*/		return 0x820B8A24;
	}
	return 0x820B8A24;
} // Block from 820B8A14h-820B8A24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820B8A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8A24);
		  /* 820B8A24h */ case    0:  		/* li R31, 0 */
		/* 820B8A24h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820B8A24h case    0:*/		return 0x820B8A28;
		  /* 820B8A28h */ case    1:  		/* b 22960 */
		/* 820B8A28h case    1:*/		return 0x820BE3D8;
		/* 820B8A28h case    1:*/		return 0x820B8A2C;
	}
	return 0x820B8A2C;
} // Block from 820B8A24h-820B8A2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820B8A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8A2C);
		  /* 820B8A2Ch */ case    0:  		/* lwz R11, <#[R11 + 20]> */
		/* 820B8A2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820B8A2Ch case    0:*/		return 0x820B8A30;
		  /* 820B8A30h */ case    1:  		/* cmplwi CR6, R11, 2 */
		/* 820B8A30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 820B8A30h case    1:*/		return 0x820B8A34;
		  /* 820B8A34h */ case    2:  		/* bc 4, CR6_EQ, 204 */
		/* 820B8A34h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820B8B00;  }
		/* 820B8A34h case    2:*/		return 0x820B8A38;
		  /* 820B8A38h */ case    3:  		/* addi R10, R1, 512 */
		/* 820B8A38h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x200);
		/* 820B8A38h case    3:*/		return 0x820B8A3C;
		  /* 820B8A3Ch */ case    4:  		/* li R29, -1 */
		/* 820B8A3Ch case    4:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B8A3Ch case    4:*/		return 0x820B8A40;
		  /* 820B8A40h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 820B8A40h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8A40h case    5:*/		return 0x820B8A44;
		  /* 820B8A44h */ case    6:  		/* mr R11, R29 */
		/* 820B8A44h case    6:*/		regs.R11 = regs.R29;
		/* 820B8A44h case    6:*/		return 0x820B8A48;
		  /* 820B8A48h */ case    7:  		/* stw R29, <#[R10]> */
		/* 820B8A48h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000000) );
		/* 820B8A48h case    7:*/		return 0x820B8A4C;
		  /* 820B8A4Ch */ case    8:  		/* stw R29, <#[R10 + 4]> */
		/* 820B8A4Ch case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000004) );
		/* 820B8A4Ch case    8:*/		return 0x820B8A50;
		  /* 820B8A50h */ case    9:  		/* stw R29, <#[R10 + 8]> */
		/* 820B8A50h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000008) );
		/* 820B8A50h case    9:*/		return 0x820B8A54;
		  /* 820B8A54h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 820B8A54h case   10:*/		if ( regs.CR[6].eq ) { return 0x820B8A70;  }
		/* 820B8A54h case   10:*/		return 0x820B8A58;
		  /* 820B8A58h */ case   11:  		/* addi R11, R15, -4 */
		/* 820B8A58h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B8A58h case   11:*/		return 0x820B8A5C;
		  /* 820B8A5Ch */ case   12:  		/* cmplwi CR0, R30, 0 */
		/* 820B8A5Ch case   12:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8A5Ch case   12:*/		return 0x820B8A60;
		  /* 820B8A60h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8A60h case   13:*/		if ( regs.CR[0].eq ) { return 0x820B8A70;  }
		/* 820B8A60h case   13:*/		return 0x820B8A64;
		  /* 820B8A64h */ case   14:  		/* mtspr CTR, R30 */
		/* 820B8A64h case   14:*/		regs.CTR = regs.R30;
		/* 820B8A64h case   14:*/		return 0x820B8A68;
		  /* 820B8A68h */ case   15:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B8A68h case   15:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8A68h case   15:*/		return 0x820B8A6C;
		  /* 820B8A6Ch */ case   16:  		/* bc 16, CR0_LT, -4 */
		/* 820B8A6Ch case   16:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8A68;  }
		/* 820B8A6Ch case   16:*/		return 0x820B8A70;
	}
	return 0x820B8A70;
} // Block from 820B8A2Ch-820B8A70h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820B8A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8A70);
		  /* 820B8A70h */ case    0:  		/* lwz R11, <#[R1 + 144]> */
		/* 820B8A70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820B8A70h case    0:*/		return 0x820B8A74;
		  /* 820B8A74h */ case    1:  		/* lis R5, 8272 */
		/* 820B8A74h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820B8A74h case    1:*/		return 0x820B8A78;
		  /* 820B8A78h */ case    2:  		/* li R9, 0 */
		/* 820B8A78h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8A78h case    2:*/		return 0x820B8A7C;
		  /* 820B8A7Ch */ case    3:  		/* addi R8, R1, 560 */
		/* 820B8A7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x230);
		/* 820B8A7Ch case    3:*/		return 0x820B8A80;
		  /* 820B8A80h */ case    4:  		/* addi R7, R1, 536 */
		/* 820B8A80h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x218);
		/* 820B8A80h case    4:*/		return 0x820B8A84;
		  /* 820B8A84h */ case    5:  		/* addi R6, R1, 512 */
		/* 820B8A84h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x200);
		/* 820B8A84h case    5:*/		return 0x820B8A88;
		  /* 820B8A88h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 820B8A88h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820B8A88h case    6:*/		return 0x820B8A8C;
		  /* 820B8A8Ch */ case    7:  		/* ori R5, R5, 2 */
		/* 820B8A8Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x2);
		/* 820B8A8Ch case    7:*/		return 0x820B8A90;
		  /* 820B8A90h */ case    8:  		/* mr R4, R16 */
		/* 820B8A90h case    8:*/		regs.R4 = regs.R16;
		/* 820B8A90h case    8:*/		return 0x820B8A94;
		  /* 820B8A94h */ case    9:  		/* mr R3, R14 */
		/* 820B8A94h case    9:*/		regs.R3 = regs.R14;
		/* 820B8A94h case    9:*/		return 0x820B8A98;
		  /* 820B8A98h */ case   10:  		/* stw R10, <#[R1 + 536]> */
		/* 820B8A98h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000218) );
		/* 820B8A98h case   10:*/		return 0x820B8A9C;
		  /* 820B8A9Ch */ case   11:  		/* lwz R10, <#[R11 + 12]> */
		/* 820B8A9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 820B8A9Ch case   11:*/		return 0x820B8AA0;
		  /* 820B8AA0h */ case   12:  		/* stw R10, <#[R1 + 560]> */
		/* 820B8AA0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000230) );
		/* 820B8AA0h case   12:*/		return 0x820B8AA4;
		  /* 820B8AA4h */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 820B8AA4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820B8AA4h case   13:*/		return 0x820B8AA8;
		  /* 820B8AA8h */ case   14:  		/* stw R10, <#[R1 + 540]> */
		/* 820B8AA8h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000021C) );
		/* 820B8AA8h case   14:*/		return 0x820B8AAC;
		  /* 820B8AACh */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 820B8AACh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820B8AACh case   15:*/		return 0x820B8AB0;
		  /* 820B8AB0h */ case   16:  		/* stw R11, <#[R1 + 564]> */
		/* 820B8AB0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000234) );
		/* 820B8AB0h case   16:*/		return 0x820B8AB4;
		  /* 820B8AB4h */ case   17:  		/* bl -32684 */
		/* 820B8AB4h case   17:*/		regs.LR = 0x820B8AB8; return 0x820B0B08;
		/* 820B8AB4h case   17:*/		return 0x820B8AB8;
		  /* 820B8AB8h */ case   18:  		/* or. R31, R3, R3 */
		/* 820B8AB8h case   18:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8AB8h case   18:*/		return 0x820B8ABC;
		  /* 820B8ABCh */ case   19:  		/* bc 12, CR0_LT, 22812 */
		/* 820B8ABCh case   19:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8ABCh case   19:*/		return 0x820B8AC0;
		  /* 820B8AC0h */ case   20:  		/* lis R5, 4112 */
		/* 820B8AC0h case   20:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820B8AC0h case   20:*/		return 0x820B8AC4;
		  /* 820B8AC4h */ case   21:  		/* li R9, 0 */
		/* 820B8AC4h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8AC4h case   21:*/		return 0x820B8AC8;
		  /* 820B8AC8h */ case   22:  		/* li R8, 0 */
		/* 820B8AC8h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8AC8h case   22:*/		return 0x820B8ACC;
		  /* 820B8ACCh */ case   23:  		/* addi R7, R1, 516 */
		/* 820B8ACCh case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x204);
		/* 820B8ACCh case   23:*/		return 0x820B8AD0;
		  /* 820B8AD0h */ case   24:  		/* addi R6, R1, 520 */
		/* 820B8AD0h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x208);
		/* 820B8AD0h case   24:*/		return 0x820B8AD4;
		  /* 820B8AD4h */ case   25:  		/* ori R5, R5, 1 */
		/* 820B8AD4h case   25:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B8AD4h case   25:*/		return 0x820B8AD8;
		  /* 820B8AD8h */ case   26:  		/* mr R4, R16 */
		/* 820B8AD8h case   26:*/		regs.R4 = regs.R16;
		/* 820B8AD8h case   26:*/		return 0x820B8ADC;
		  /* 820B8ADCh */ case   27:  		/* mr R3, R14 */
		/* 820B8ADCh case   27:*/		regs.R3 = regs.R14;
		/* 820B8ADCh case   27:*/		return 0x820B8AE0;
		  /* 820B8AE0h */ case   28:  		/* bl -32728 */
		/* 820B8AE0h case   28:*/		regs.LR = 0x820B8AE4; return 0x820B0B08;
		/* 820B8AE0h case   28:*/		return 0x820B8AE4;
		  /* 820B8AE4h */ case   29:  		/* or. R31, R3, R3 */
		/* 820B8AE4h case   29:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8AE4h case   29:*/		return 0x820B8AE8;
		  /* 820B8AE8h */ case   30:  		/* bc 12, CR0_LT, 22768 */
		/* 820B8AE8h case   30:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8AE8h case   30:*/		return 0x820B8AEC;
		  /* 820B8AECh */ case   31:  		/* lis R5, 8256 */
		/* 820B8AECh case   31:*/		cpu::op::lis<0>(regs,&regs.R5,0x2040);
		/* 820B8AECh case   31:*/		return 0x820B8AF0;
		  /* 820B8AF0h */ case   32:  		/* addi R8, R1, 520 */
		/* 820B8AF0h case   32:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x208);
		/* 820B8AF0h case   32:*/		return 0x820B8AF4;
		  /* 820B8AF4h */ case   33:  		/* addi R7, R1, 512 */
		/* 820B8AF4h case   33:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x200);
		/* 820B8AF4h case   33:*/		return 0x820B8AF8;
		  /* 820B8AF8h */ case   34:  		/* ori R5, R5, 1 */
		/* 820B8AF8h case   34:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B8AF8h case   34:*/		return 0x820B8AFC;
		  /* 820B8AFCh */ case   35:  		/* b 19504 */
		/* 820B8AFCh case   35:*/		return 0x820BD72C;
		/* 820B8AFCh case   35:*/		return 0x820B8B00;
	}
	return 0x820B8B00;
} // Block from 820B8A70h-820B8B00h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820B8B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8B00);
		  /* 820B8B00h */ case    0:  		/* cmplwi CR6, R11, 3 */
		/* 820B8B00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 820B8B00h case    0:*/		return 0x820B8B04;
		  /* 820B8B04h */ case    1:  		/* bc 4, CR6_EQ, 440 */
		/* 820B8B04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B8CBC;  }
		/* 820B8B04h case    1:*/		return 0x820B8B08;
		  /* 820B8B08h */ case    2:  		/* addi R7, R1, 736 */
		/* 820B8B08h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2E0);
		/* 820B8B08h case    2:*/		return 0x820B8B0C;
		  /* 820B8B0Ch */ case    3:  		/* addi R6, R1, 776 */
		/* 820B8B0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x308);
		/* 820B8B0Ch case    3:*/		return 0x820B8B10;
		  /* 820B8B10h */ case    4:  		/* addi R5, R1, 840 */
		/* 820B8B10h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x348);
		/* 820B8B10h case    4:*/		return 0x820B8B14;
		  /* 820B8B14h */ case    5:  		/* addi R4, R1, 792 */
		/* 820B8B14h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x318);
		/* 820B8B14h case    5:*/		return 0x820B8B18;
		  /* 820B8B18h */ case    6:  		/* li R29, -1 */
		/* 820B8B18h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B8B18h case    6:*/		return 0x820B8B1C;
		  /* 820B8B1Ch */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 820B8B1Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8B1Ch case    7:*/		return 0x820B8B20;
		  /* 820B8B20h */ case    8:  		/* stw R29, <#[R7]> */
		/* 820B8B20h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R7 + 0x00000000) );
		/* 820B8B20h case    8:*/		return 0x820B8B24;
		  /* 820B8B24h */ case    9:  		/* mr R11, R29 */
		/* 820B8B24h case    9:*/		regs.R11 = regs.R29;
		/* 820B8B24h case    9:*/		return 0x820B8B28;
		  /* 820B8B28h */ case   10:  		/* stw R29, <#[R6]> */
		/* 820B8B28h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R6 + 0x00000000) );
		/* 820B8B28h case   10:*/		return 0x820B8B2C;
		  /* 820B8B2Ch */ case   11:  		/* mr R10, R29 */
		/* 820B8B2Ch case   11:*/		regs.R10 = regs.R29;
		/* 820B8B2Ch case   11:*/		return 0x820B8B30;
		  /* 820B8B30h */ case   12:  		/* stw R29, <#[R5]> */
		/* 820B8B30h case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R5 + 0x00000000) );
		/* 820B8B30h case   12:*/		return 0x820B8B34;
		  /* 820B8B34h */ case   13:  		/* mr R9, R29 */
		/* 820B8B34h case   13:*/		regs.R9 = regs.R29;
		/* 820B8B34h case   13:*/		return 0x820B8B38;
		  /* 820B8B38h */ case   14:  		/* stw R29, <#[R4]> */
		/* 820B8B38h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R4 + 0x00000000) );
		/* 820B8B38h case   14:*/		return 0x820B8B3C;
		  /* 820B8B3Ch */ case   15:  		/* mr R8, R29 */
		/* 820B8B3Ch case   15:*/		regs.R8 = regs.R29;
		/* 820B8B3Ch case   15:*/		return 0x820B8B40;
		  /* 820B8B40h */ case   16:  		/* stw R29, <#[R7 + 4]> */
		/* 820B8B40h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R7 + 0x00000004) );
		/* 820B8B40h case   16:*/		return 0x820B8B44;
		  /* 820B8B44h */ case   17:  		/* stw R29, <#[R6 + 4]> */
		/* 820B8B44h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R6 + 0x00000004) );
		/* 820B8B44h case   17:*/		return 0x820B8B48;
		  /* 820B8B48h */ case   18:  		/* stw R29, <#[R5 + 4]> */
		/* 820B8B48h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R5 + 0x00000004) );
		/* 820B8B48h case   18:*/		return 0x820B8B4C;
		  /* 820B8B4Ch */ case   19:  		/* stw R29, <#[R4 + 4]> */
		/* 820B8B4Ch case   19:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R4 + 0x00000004) );
		/* 820B8B4Ch case   19:*/		return 0x820B8B50;
		  /* 820B8B50h */ case   20:  		/* stw R29, <#[R7 + 8]> */
		/* 820B8B50h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R7 + 0x00000008) );
		/* 820B8B50h case   20:*/		return 0x820B8B54;
		  /* 820B8B54h */ case   21:  		/* stw R29, <#[R6 + 8]> */
		/* 820B8B54h case   21:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R6 + 0x00000008) );
		/* 820B8B54h case   21:*/		return 0x820B8B58;
		  /* 820B8B58h */ case   22:  		/* stw R29, <#[R5 + 8]> */
		/* 820B8B58h case   22:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R5 + 0x00000008) );
		/* 820B8B58h case   22:*/		return 0x820B8B5C;
		  /* 820B8B5Ch */ case   23:  		/* stw R29, <#[R4 + 8]> */
		/* 820B8B5Ch case   23:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R4 + 0x00000008) );
		/* 820B8B5Ch case   23:*/		return 0x820B8B60;
		  /* 820B8B60h */ case   24:  		/* bc 12, CR6_EQ, 28 */
		/* 820B8B60h case   24:*/		if ( regs.CR[6].eq ) { return 0x820B8B7C;  }
		/* 820B8B60h case   24:*/		return 0x820B8B64;
		  /* 820B8B64h */ case   25:  		/* addi R11, R15, -4 */
		/* 820B8B64h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B8B64h case   25:*/		return 0x820B8B68;
		  /* 820B8B68h */ case   26:  		/* cmplwi CR0, R30, 0 */
		/* 820B8B68h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8B68h case   26:*/		return 0x820B8B6C;
		  /* 820B8B6Ch */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8B6Ch case   27:*/		if ( regs.CR[0].eq ) { return 0x820B8B7C;  }
		/* 820B8B6Ch case   27:*/		return 0x820B8B70;
		  /* 820B8B70h */ case   28:  		/* mtspr CTR, R30 */
		/* 820B8B70h case   28:*/		regs.CTR = regs.R30;
		/* 820B8B70h case   28:*/		return 0x820B8B74;
		  /* 820B8B74h */ case   29:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B8B74h case   29:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8B74h case   29:*/		return 0x820B8B78;
		  /* 820B8B78h */ case   30:  		/* bc 16, CR0_LT, -4 */
		/* 820B8B78h case   30:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8B74;  }
		/* 820B8B78h case   30:*/		return 0x820B8B7C;
	}
	return 0x820B8B7C;
} // Block from 820B8B00h-820B8B7Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 820B8B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8B7C);
		  /* 820B8B7Ch */ case    0:  		/* lwz R30, <#[R1 + 144]> */
		/* 820B8B7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 820B8B7Ch case    0:*/		return 0x820B8B80;
		  /* 820B8B80h */ case    1:  		/* lis R11, 8272 */
		/* 820B8B80h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x2050);
		/* 820B8B80h case    1:*/		return 0x820B8B84;
		  /* 820B8B84h */ case    2:  		/* li R9, 0 */
		/* 820B8B84h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8B84h case    2:*/		return 0x820B8B88;
		  /* 820B8B88h */ case    3:  		/* ori R29, R11, 3 */
		/* 820B8B88h case    3:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x3);
		/* 820B8B88h case    3:*/		return 0x820B8B8C;
		  /* 820B8B8Ch */ case    4:  		/* addi R8, R1, 480 */
		/* 820B8B8Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1E0);
		/* 820B8B8Ch case    4:*/		return 0x820B8B90;
		  /* 820B8B90h */ case    5:  		/* addi R7, R1, 272 */
		/* 820B8B90h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x110);
		/* 820B8B90h case    5:*/		return 0x820B8B94;
		  /* 820B8B94h */ case    6:  		/* lwz R11, <#[R30 + 16]> */
		/* 820B8B94h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 820B8B94h case    6:*/		return 0x820B8B98;
		  /* 820B8B98h */ case    7:  		/* addi R6, R1, 736 */
		/* 820B8B98h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2E0);
		/* 820B8B98h case    7:*/		return 0x820B8B9C;
		  /* 820B8B9Ch */ case    8:  		/* mr R5, R29 */
		/* 820B8B9Ch case    8:*/		regs.R5 = regs.R29;
		/* 820B8B9Ch case    8:*/		return 0x820B8BA0;
		  /* 820B8BA0h */ case    9:  		/* mr R4, R16 */
		/* 820B8BA0h case    9:*/		regs.R4 = regs.R16;
		/* 820B8BA0h case    9:*/		return 0x820B8BA4;
		  /* 820B8BA4h */ case   10:  		/* mr R3, R14 */
		/* 820B8BA4h case   10:*/		regs.R3 = regs.R14;
		/* 820B8BA4h case   10:*/		return 0x820B8BA8;
		  /* 820B8BA8h */ case   11:  		/* stw R11, <#[R1 + 272]> */
		/* 820B8BA8h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000110) );
		/* 820B8BA8h case   11:*/		return 0x820B8BAC;
		  /* 820B8BACh */ case   12:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8BACh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8BACh case   12:*/		return 0x820B8BB0;
		  /* 820B8BB0h */ case   13:  		/* stw R11, <#[R1 + 276]> */
		/* 820B8BB0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000114) );
		/* 820B8BB0h case   13:*/		return 0x820B8BB4;
		  /* 820B8BB4h */ case   14:  		/* lwz R11, <#[R30 + 4]> */
		/* 820B8BB4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820B8BB4h case   14:*/		return 0x820B8BB8;
		  /* 820B8BB8h */ case   15:  		/* stw R11, <#[R1 + 280]> */
		/* 820B8BB8h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000118) );
		/* 820B8BB8h case   15:*/		return 0x820B8BBC;
		  /* 820B8BBCh */ case   16:  		/* lwz R11, <#[R30 + 32]> */
		/* 820B8BBCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 820B8BBCh case   16:*/		return 0x820B8BC0;
		  /* 820B8BC0h */ case   17:  		/* stw R11, <#[R1 + 480]> */
		/* 820B8BC0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001E0) );
		/* 820B8BC0h case   17:*/		return 0x820B8BC4;
		  /* 820B8BC4h */ case   18:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8BC4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8BC4h case   18:*/		return 0x820B8BC8;
		  /* 820B8BC8h */ case   19:  		/* stw R11, <#[R1 + 484]> */
		/* 820B8BC8h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001E4) );
		/* 820B8BC8h case   19:*/		return 0x820B8BCC;
		  /* 820B8BCCh */ case   20:  		/* lwz R11, <#[R30 + 20]> */
		/* 820B8BCCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 820B8BCCh case   20:*/		return 0x820B8BD0;
		  /* 820B8BD0h */ case   21:  		/* stw R11, <#[R1 + 488]> */
		/* 820B8BD0h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001E8) );
		/* 820B8BD0h case   21:*/		return 0x820B8BD4;
		  /* 820B8BD4h */ case   22:  		/* bl -32972 */
		/* 820B8BD4h case   22:*/		regs.LR = 0x820B8BD8; return 0x820B0B08;
		/* 820B8BD4h case   22:*/		return 0x820B8BD8;
		  /* 820B8BD8h */ case   23:  		/* or. R31, R3, R3 */
		/* 820B8BD8h case   23:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8BD8h case   23:*/		return 0x820B8BDC;
		  /* 820B8BDCh */ case   24:  		/* bc 12, CR0_LT, 22524 */
		/* 820B8BDCh case   24:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8BDCh case   24:*/		return 0x820B8BE0;
		  /* 820B8BE0h */ case   25:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8BE0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8BE0h case   25:*/		return 0x820B8BE4;
		  /* 820B8BE4h */ case   26:  		/* li R9, 0 */
		/* 820B8BE4h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8BE4h case   26:*/		return 0x820B8BE8;
		  /* 820B8BE8h */ case   27:  		/* addi R8, R1, 480 */
		/* 820B8BE8h case   27:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1E0);
		/* 820B8BE8h case   27:*/		return 0x820B8BEC;
		  /* 820B8BECh */ case   28:  		/* addi R7, R1, 272 */
		/* 820B8BECh case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x110);
		/* 820B8BECh case   28:*/		return 0x820B8BF0;
		  /* 820B8BF0h */ case   29:  		/* addi R6, R1, 776 */
		/* 820B8BF0h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x308);
		/* 820B8BF0h case   29:*/		return 0x820B8BF4;
		  /* 820B8BF4h */ case   30:  		/* mr R5, R29 */
		/* 820B8BF4h case   30:*/		regs.R5 = regs.R29;
		/* 820B8BF4h case   30:*/		return 0x820B8BF8;
		  /* 820B8BF8h */ case   31:  		/* stw R11, <#[R1 + 272]> */
		/* 820B8BF8h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000110) );
		/* 820B8BF8h case   31:*/		return 0x820B8BFC;
		  /* 820B8BFCh */ case   32:  		/* mr R4, R16 */
		/* 820B8BFCh case   32:*/		regs.R4 = regs.R16;
		/* 820B8BFCh case   32:*/		return 0x820B8C00;
		  /* 820B8C00h */ case   33:  		/* mr R3, R14 */
		/* 820B8C00h case   33:*/		regs.R3 = regs.R14;
		/* 820B8C00h case   33:*/		return 0x820B8C04;
		  /* 820B8C04h */ case   34:  		/* lwz R11, <#[R30 + 4]> */
		/* 820B8C04h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820B8C04h case   34:*/		return 0x820B8C08;
		  /* 820B8C08h */ case   35:  		/* stw R11, <#[R1 + 276]> */
		/* 820B8C08h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000114) );
		/* 820B8C08h case   35:*/		return 0x820B8C0C;
		  /* 820B8C0Ch */ case   36:  		/* lwz R11, <#[R30 + 16]> */
		/* 820B8C0Ch case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 820B8C0Ch case   36:*/		return 0x820B8C10;
		  /* 820B8C10h */ case   37:  		/* stw R11, <#[R1 + 280]> */
		/* 820B8C10h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000118) );
		/* 820B8C10h case   37:*/		return 0x820B8C14;
		  /* 820B8C14h */ case   38:  		/* lwz R11, <#[R30 + 20]> */
		/* 820B8C14h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 820B8C14h case   38:*/		return 0x820B8C18;
		  /* 820B8C18h */ case   39:  		/* stw R11, <#[R1 + 480]> */
		/* 820B8C18h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001E0) );
		/* 820B8C18h case   39:*/		return 0x820B8C1C;
		  /* 820B8C1Ch */ case   40:  		/* lwz R11, <#[R30 + 32]> */
		/* 820B8C1Ch case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 820B8C1Ch case   40:*/		return 0x820B8C20;
		  /* 820B8C20h */ case   41:  		/* stw R11, <#[R1 + 484]> */
		/* 820B8C20h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001E4) );
		/* 820B8C20h case   41:*/		return 0x820B8C24;
		  /* 820B8C24h */ case   42:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8C24h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8C24h case   42:*/		return 0x820B8C28;
		  /* 820B8C28h */ case   43:  		/* stw R11, <#[R1 + 488]> */
		/* 820B8C28h case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001E8) );
		/* 820B8C28h case   43:*/		return 0x820B8C2C;
		  /* 820B8C2Ch */ case   44:  		/* bl -33060 */
		/* 820B8C2Ch case   44:*/		regs.LR = 0x820B8C30; return 0x820B0B08;
		/* 820B8C2Ch case   44:*/		return 0x820B8C30;
		  /* 820B8C30h */ case   45:  		/* or. R31, R3, R3 */
		/* 820B8C30h case   45:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8C30h case   45:*/		return 0x820B8C34;
		  /* 820B8C34h */ case   46:  		/* bc 12, CR0_LT, 22436 */
		/* 820B8C34h case   46:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8C34h case   46:*/		return 0x820B8C38;
		  /* 820B8C38h */ case   47:  		/* lis R5, 4112 */
		/* 820B8C38h case   47:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820B8C38h case   47:*/		return 0x820B8C3C;
		  /* 820B8C3Ch */ case   48:  		/* li R9, 0 */
		/* 820B8C3Ch case   48:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8C3Ch case   48:*/		return 0x820B8C40;
		  /* 820B8C40h */ case   49:  		/* li R8, 0 */
		/* 820B8C40h case   49:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B8C40h case   49:*/		return 0x820B8C44;
		  /* 820B8C44h */ case   50:  		/* addi R7, R1, 776 */
		/* 820B8C44h case   50:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x308);
		/* 820B8C44h case   50:*/		return 0x820B8C48;
		  /* 820B8C48h */ case   51:  		/* addi R6, R1, 840 */
		/* 820B8C48h case   51:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x348);
		/* 820B8C48h case   51:*/		return 0x820B8C4C;
		  /* 820B8C4Ch */ case   52:  		/* ori R5, R5, 3 */
		/* 820B8C4Ch case   52:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3);
		/* 820B8C4Ch case   52:*/		return 0x820B8C50;
		  /* 820B8C50h */ case   53:  		/* mr R4, R16 */
		/* 820B8C50h case   53:*/		regs.R4 = regs.R16;
		/* 820B8C50h case   53:*/		return 0x820B8C54;
		  /* 820B8C54h */ case   54:  		/* mr R3, R14 */
		/* 820B8C54h case   54:*/		regs.R3 = regs.R14;
		/* 820B8C54h case   54:*/		return 0x820B8C58;
		  /* 820B8C58h */ case   55:  		/* bl -33104 */
		/* 820B8C58h case   55:*/		regs.LR = 0x820B8C5C; return 0x820B0B08;
		/* 820B8C58h case   55:*/		return 0x820B8C5C;
		  /* 820B8C5Ch */ case   56:  		/* or. R31, R3, R3 */
		/* 820B8C5Ch case   56:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8C5Ch case   56:*/		return 0x820B8C60;
		  /* 820B8C60h */ case   57:  		/* bc 12, CR0_LT, 22392 */
		/* 820B8C60h case   57:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8C60h case   57:*/		return 0x820B8C64;
		  /* 820B8C64h */ case   58:  		/* lis R5, 8256 */
		/* 820B8C64h case   58:*/		cpu::op::lis<0>(regs,&regs.R5,0x2040);
		/* 820B8C64h case   58:*/		return 0x820B8C68;
		  /* 820B8C68h */ case   59:  		/* li R9, 0 */
		/* 820B8C68h case   59:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8C68h case   59:*/		return 0x820B8C6C;
		  /* 820B8C6Ch */ case   60:  		/* addi R8, R1, 840 */
		/* 820B8C6Ch case   60:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x348);
		/* 820B8C6Ch case   60:*/		return 0x820B8C70;
		  /* 820B8C70h */ case   61:  		/* addi R7, R1, 736 */
		/* 820B8C70h case   61:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2E0);
		/* 820B8C70h case   61:*/		return 0x820B8C74;
		  /* 820B8C74h */ case   62:  		/* addi R6, R1, 792 */
		/* 820B8C74h case   62:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x318);
		/* 820B8C74h case   62:*/		return 0x820B8C78;
		  /* 820B8C78h */ case   63:  		/* ori R5, R5, 3 */
		/* 820B8C78h case   63:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3);
		/* 820B8C78h case   63:*/		return 0x820B8C7C;
		  /* 820B8C7Ch */ case   64:  		/* mr R4, R16 */
		/* 820B8C7Ch case   64:*/		regs.R4 = regs.R16;
		/* 820B8C7Ch case   64:*/		return 0x820B8C80;
		  /* 820B8C80h */ case   65:  		/* mr R3, R14 */
		/* 820B8C80h case   65:*/		regs.R3 = regs.R14;
		/* 820B8C80h case   65:*/		return 0x820B8C84;
		  /* 820B8C84h */ case   66:  		/* bl -33148 */
		/* 820B8C84h case   66:*/		regs.LR = 0x820B8C88; return 0x820B0B08;
		/* 820B8C84h case   66:*/		return 0x820B8C88;
		  /* 820B8C88h */ case   67:  		/* or. R31, R3, R3 */
		/* 820B8C88h case   67:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8C88h case   67:*/		return 0x820B8C8C;
		  /* 820B8C8Ch */ case   68:  		/* bc 12, CR0_LT, 22348 */
		/* 820B8C8Ch case   68:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8C8Ch case   68:*/		return 0x820B8C90;
		  /* 820B8C90h */ case   69:  		/* lwz R11, <#[R30]> */
		/* 820B8C90h case   69:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820B8C90h case   69:*/		return 0x820B8C94;
		  /* 820B8C94h */ case   70:  		/* lis R5, 20480 */
		/* 820B8C94h case   70:*/		cpu::op::lis<0>(regs,&regs.R5,0x5000);
		/* 820B8C94h case   70:*/		return 0x820B8C98;
		  /* 820B8C98h */ case   71:  		/* addi R8, R1, 272 */
		/* 820B8C98h case   71:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x110);
		/* 820B8C98h case   71:*/		return 0x820B8C9C;
		  /* 820B8C9Ch */ case   72:  		/* addi R7, R1, 792 */
		/* 820B8C9Ch case   72:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x318);
		/* 820B8C9Ch case   72:*/		return 0x820B8CA0;
		  /* 820B8CA0h */ case   73:  		/* ori R5, R5, 3 */
		/* 820B8CA0h case   73:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3);
		/* 820B8CA0h case   73:*/		return 0x820B8CA4;
		  /* 820B8CA4h */ case   74:  		/* stw R11, <#[R1 + 272]> */
		/* 820B8CA4h case   74:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000110) );
		/* 820B8CA4h case   74:*/		return 0x820B8CA8;
		  /* 820B8CA8h */ case   75:  		/* lwz R11, <#[R30 + 12]> */
		/* 820B8CA8h case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8CA8h case   75:*/		return 0x820B8CAC;
		  /* 820B8CACh */ case   76:  		/* stw R11, <#[R1 + 276]> */
		/* 820B8CACh case   76:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000114) );
		/* 820B8CACh case   76:*/		return 0x820B8CB0;
		  /* 820B8CB0h */ case   77:  		/* lwz R11, <#[R30 + 24]> */
		/* 820B8CB0h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 820B8CB0h case   77:*/		return 0x820B8CB4;
		  /* 820B8CB4h */ case   78:  		/* stw R11, <#[R1 + 280]> */
		/* 820B8CB4h case   78:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000118) );
		/* 820B8CB4h case   78:*/		return 0x820B8CB8;
		  /* 820B8CB8h */ case   79:  		/* b 19060 */
		/* 820B8CB8h case   79:*/		return 0x820BD72C;
		/* 820B8CB8h case   79:*/		return 0x820B8CBC;
	}
	return 0x820B8CBC;
} // Block from 820B8B7Ch-820B8CBCh (80 instructions)

//////////////////////////////////////////////////////
// Block at 820B8CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8CBC);
		  /* 820B8CBCh */ case    0:  		/* cmplwi CR6, R11, 4 */
		/* 820B8CBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820B8CBCh case    0:*/		return 0x820B8CC0;
		  /* 820B8CC0h */ case    1:  		/* bc 4, CR6_EQ, -756 */
		/* 820B8CC0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B8CC0h case    1:*/		return 0x820B8CC4;
		  /* 820B8CC4h */ case    2:  		/* li R11, 12 */
		/* 820B8CC4h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 820B8CC4h case    2:*/		return 0x820B8CC8;
		  /* 820B8CC8h */ case    3:  		/* li R29, -1 */
		/* 820B8CC8h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B8CC8h case    3:*/		return 0x820B8CCC;
		  /* 820B8CCCh */ case    4:  		/* addi R10, R1, 988 */
		/* 820B8CCCh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x3DC);
		/* 820B8CCCh case    4:*/		return 0x820B8CD0;
		  /* 820B8CD0h */ case    5:  		/* mr R9, R29 */
		/* 820B8CD0h case    5:*/		regs.R9 = regs.R29;
		/* 820B8CD0h case    5:*/		return 0x820B8CD4;
		  /* 820B8CD4h */ case    6:  		/* mtspr CTR, R11 */
		/* 820B8CD4h case    6:*/		regs.CTR = regs.R11;
		/* 820B8CD4h case    6:*/		return 0x820B8CD8;
		  /* 820B8CD8h */ case    7:  		/* stwu R9, <#[R10 + 4]> */
		/* 820B8CD8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B8CD8h case    7:*/		return 0x820B8CDC;
		  /* 820B8CDCh */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820B8CDCh case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8CD8;  }
		/* 820B8CDCh case    8:*/		return 0x820B8CE0;
		  /* 820B8CE0h */ case    9:  		/* li R11, 12 */
		/* 820B8CE0h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 820B8CE0h case    9:*/		return 0x820B8CE4;
		  /* 820B8CE4h */ case   10:  		/* addi R10, R1, 940 */
		/* 820B8CE4h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x3AC);
		/* 820B8CE4h case   10:*/		return 0x820B8CE8;
		  /* 820B8CE8h */ case   11:  		/* mr R9, R29 */
		/* 820B8CE8h case   11:*/		regs.R9 = regs.R29;
		/* 820B8CE8h case   11:*/		return 0x820B8CEC;
		  /* 820B8CECh */ case   12:  		/* mtspr CTR, R11 */
		/* 820B8CECh case   12:*/		regs.CTR = regs.R11;
		/* 820B8CECh case   12:*/		return 0x820B8CF0;
		  /* 820B8CF0h */ case   13:  		/* stwu R9, <#[R10 + 4]> */
		/* 820B8CF0h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B8CF0h case   13:*/		return 0x820B8CF4;
		  /* 820B8CF4h */ case   14:  		/* bc 16, CR0_LT, -4 */
		/* 820B8CF4h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8CF0;  }
		/* 820B8CF4h case   14:*/		return 0x820B8CF8;
		  /* 820B8CF8h */ case   15:  		/* li R11, 12 */
		/* 820B8CF8h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 820B8CF8h case   15:*/		return 0x820B8CFC;
		  /* 820B8CFCh */ case   16:  		/* addi R10, R1, 1036 */
		/* 820B8CFCh case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x40C);
		/* 820B8CFCh case   16:*/		return 0x820B8D00;
		  /* 820B8D00h */ case   17:  		/* mr R9, R29 */
		/* 820B8D00h case   17:*/		regs.R9 = regs.R29;
		/* 820B8D00h case   17:*/		return 0x820B8D04;
		  /* 820B8D04h */ case   18:  		/* mtspr CTR, R11 */
		/* 820B8D04h case   18:*/		regs.CTR = regs.R11;
		/* 820B8D04h case   18:*/		return 0x820B8D08;
		  /* 820B8D08h */ case   19:  		/* stwu R9, <#[R10 + 4]> */
		/* 820B8D08h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B8D08h case   19:*/		return 0x820B8D0C;
		  /* 820B8D0Ch */ case   20:  		/* bc 16, CR0_LT, -4 */
		/* 820B8D0Ch case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8D08;  }
		/* 820B8D0Ch case   20:*/		return 0x820B8D10;
		  /* 820B8D10h */ case   21:  		/* li R11, 12 */
		/* 820B8D10h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 820B8D10h case   21:*/		return 0x820B8D14;
		  /* 820B8D14h */ case   22:  		/* addi R10, R1, 892 */
		/* 820B8D14h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x37C);
		/* 820B8D14h case   22:*/		return 0x820B8D18;
		  /* 820B8D18h */ case   23:  		/* mr R9, R29 */
		/* 820B8D18h case   23:*/		regs.R9 = regs.R29;
		/* 820B8D18h case   23:*/		return 0x820B8D1C;
		  /* 820B8D1Ch */ case   24:  		/* mtspr CTR, R11 */
		/* 820B8D1Ch case   24:*/		regs.CTR = regs.R11;
		/* 820B8D1Ch case   24:*/		return 0x820B8D20;
		  /* 820B8D20h */ case   25:  		/* stwu R9, <#[R10 + 4]> */
		/* 820B8D20h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B8D20h case   25:*/		return 0x820B8D24;
		  /* 820B8D24h */ case   26:  		/* bc 16, CR0_LT, -4 */
		/* 820B8D24h case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8D20;  }
		/* 820B8D24h case   26:*/		return 0x820B8D28;
		  /* 820B8D28h */ case   27:  		/* addi R10, R1, 544 */
		/* 820B8D28h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x220);
		/* 820B8D28h case   27:*/		return 0x820B8D2C;
		  /* 820B8D2Ch */ case   28:  		/* mr R11, R29 */
		/* 820B8D2Ch case   28:*/		regs.R11 = regs.R29;
		/* 820B8D2Ch case   28:*/		return 0x820B8D30;
		  /* 820B8D30h */ case   29:  		/* cmplwi CR6, R30, 0 */
		/* 820B8D30h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B8D30h case   29:*/		return 0x820B8D34;
		  /* 820B8D34h */ case   30:  		/* stw R29, <#[R10]> */
		/* 820B8D34h case   30:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000000) );
		/* 820B8D34h case   30:*/		return 0x820B8D38;
		  /* 820B8D38h */ case   31:  		/* stw R29, <#[R10 + 4]> */
		/* 820B8D38h case   31:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000004) );
		/* 820B8D38h case   31:*/		return 0x820B8D3C;
		  /* 820B8D3Ch */ case   32:  		/* stw R29, <#[R10 + 8]> */
		/* 820B8D3Ch case   32:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000008) );
		/* 820B8D3Ch case   32:*/		return 0x820B8D40;
		  /* 820B8D40h */ case   33:  		/* stw R29, <#[R10 + 12]> */
		/* 820B8D40h case   33:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x0000000C) );
		/* 820B8D40h case   33:*/		return 0x820B8D44;
		  /* 820B8D44h */ case   34:  		/* bc 12, CR6_EQ, 28 */
		/* 820B8D44h case   34:*/		if ( regs.CR[6].eq ) { return 0x820B8D60;  }
		/* 820B8D44h case   34:*/		return 0x820B8D48;
		  /* 820B8D48h */ case   35:  		/* addi R11, R15, -4 */
		/* 820B8D48h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B8D48h case   35:*/		return 0x820B8D4C;
		  /* 820B8D4Ch */ case   36:  		/* cmplwi CR0, R30, 0 */
		/* 820B8D4Ch case   36:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B8D4Ch case   36:*/		return 0x820B8D50;
		  /* 820B8D50h */ case   37:  		/* bc 12, CR0_EQ, 16 */
		/* 820B8D50h case   37:*/		if ( regs.CR[0].eq ) { return 0x820B8D60;  }
		/* 820B8D50h case   37:*/		return 0x820B8D54;
		  /* 820B8D54h */ case   38:  		/* mtspr CTR, R30 */
		/* 820B8D54h case   38:*/		regs.CTR = regs.R30;
		/* 820B8D54h case   38:*/		return 0x820B8D58;
		  /* 820B8D58h */ case   39:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B8D58h case   39:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B8D58h case   39:*/		return 0x820B8D5C;
		  /* 820B8D5Ch */ case   40:  		/* bc 16, CR0_LT, -4 */
		/* 820B8D5Ch case   40:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B8D58;  }
		/* 820B8D5Ch case   40:*/		return 0x820B8D60;
	}
	return 0x820B8D60;
} // Block from 820B8CBCh-820B8D60h (41 instructions)

//////////////////////////////////////////////////////
// Block at 820B8D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B8D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B8D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B8D60);
		  /* 820B8D60h */ case    0:  		/* lwz R30, <#[R1 + 144]> */
		/* 820B8D60h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 820B8D60h case    0:*/		return 0x820B8D64;
		  /* 820B8D64h */ case    1:  		/* lis R11, 8272 */
		/* 820B8D64h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x2050);
		/* 820B8D64h case    1:*/		return 0x820B8D68;
		  /* 820B8D68h */ case    2:  		/* li R9, 0 */
		/* 820B8D68h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8D68h case    2:*/		return 0x820B8D6C;
		  /* 820B8D6Ch */ case    3:  		/* ori R29, R11, 3 */
		/* 820B8D6Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x3);
		/* 820B8D6Ch case    3:*/		return 0x820B8D70;
		  /* 820B8D70h */ case    4:  		/* addi R8, R1, 432 */
		/* 820B8D70h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1B0);
		/* 820B8D70h case    4:*/		return 0x820B8D74;
		  /* 820B8D74h */ case    5:  		/* addi R7, R1, 224 */
		/* 820B8D74h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE0);
		/* 820B8D74h case    5:*/		return 0x820B8D78;
		  /* 820B8D78h */ case    6:  		/* lwz R11, <#[R30 + 40]> */
		/* 820B8D78h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 820B8D78h case    6:*/		return 0x820B8D7C;
		  /* 820B8D7Ch */ case    7:  		/* addi R6, R1, 992 */
		/* 820B8D7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3E0);
		/* 820B8D7Ch case    7:*/		return 0x820B8D80;
		  /* 820B8D80h */ case    8:  		/* mr R5, R29 */
		/* 820B8D80h case    8:*/		regs.R5 = regs.R29;
		/* 820B8D80h case    8:*/		return 0x820B8D84;
		  /* 820B8D84h */ case    9:  		/* mr R4, R16 */
		/* 820B8D84h case    9:*/		regs.R4 = regs.R16;
		/* 820B8D84h case    9:*/		return 0x820B8D88;
		  /* 820B8D88h */ case   10:  		/* mr R3, R14 */
		/* 820B8D88h case   10:*/		regs.R3 = regs.R14;
		/* 820B8D88h case   10:*/		return 0x820B8D8C;
		  /* 820B8D8Ch */ case   11:  		/* stw R11, <#[R1 + 224]> */
		/* 820B8D8Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820B8D8Ch case   11:*/		return 0x820B8D90;
		  /* 820B8D90h */ case   12:  		/* lwz R11, <#[R30 + 56]> */
		/* 820B8D90h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820B8D90h case   12:*/		return 0x820B8D94;
		  /* 820B8D94h */ case   13:  		/* stw R11, <#[R1 + 228]> */
		/* 820B8D94h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 820B8D94h case   13:*/		return 0x820B8D98;
		  /* 820B8D98h */ case   14:  		/* lwz R11, <#[R30 + 24]> */
		/* 820B8D98h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 820B8D98h case   14:*/		return 0x820B8D9C;
		  /* 820B8D9Ch */ case   15:  		/* stw R11, <#[R1 + 232]> */
		/* 820B8D9Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 820B8D9Ch case   15:*/		return 0x820B8DA0;
		  /* 820B8DA0h */ case   16:  		/* lwz R11, <#[R30 + 56]> */
		/* 820B8DA0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820B8DA0h case   16:*/		return 0x820B8DA4;
		  /* 820B8DA4h */ case   17:  		/* stw R11, <#[R1 + 236]> */
		/* 820B8DA4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000EC) );
		/* 820B8DA4h case   17:*/		return 0x820B8DA8;
		  /* 820B8DA8h */ case   18:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8DA8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8DA8h case   18:*/		return 0x820B8DAC;
		  /* 820B8DACh */ case   19:  		/* stw R11, <#[R1 + 240]> */
		/* 820B8DACh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 820B8DACh case   19:*/		return 0x820B8DB0;
		  /* 820B8DB0h */ case   20:  		/* lwz R11, <#[R30 + 40]> */
		/* 820B8DB0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 820B8DB0h case   20:*/		return 0x820B8DB4;
		  /* 820B8DB4h */ case   21:  		/* stw R11, <#[R1 + 244]> */
		/* 820B8DB4h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 820B8DB4h case   21:*/		return 0x820B8DB8;
		  /* 820B8DB8h */ case   22:  		/* lwz R11, <#[R30 + 24]> */
		/* 820B8DB8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 820B8DB8h case   22:*/		return 0x820B8DBC;
		  /* 820B8DBCh */ case   23:  		/* stw R11, <#[R1 + 248]> */
		/* 820B8DBCh case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F8) );
		/* 820B8DBCh case   23:*/		return 0x820B8DC0;
		  /* 820B8DC0h */ case   24:  		/* lwz R11, <#[R30 + 56]> */
		/* 820B8DC0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820B8DC0h case   24:*/		return 0x820B8DC4;
		  /* 820B8DC4h */ case   25:  		/* stw R11, <#[R1 + 252]> */
		/* 820B8DC4h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000FC) );
		/* 820B8DC4h case   25:*/		return 0x820B8DC8;
		  /* 820B8DC8h */ case   26:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8DC8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8DC8h case   26:*/		return 0x820B8DCC;
		  /* 820B8DCCh */ case   27:  		/* stw R11, <#[R1 + 256]> */
		/* 820B8DCCh case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 820B8DCCh case   27:*/		return 0x820B8DD0;
		  /* 820B8DD0h */ case   28:  		/* lwz R11, <#[R30 + 40]> */
		/* 820B8DD0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 820B8DD0h case   28:*/		return 0x820B8DD4;
		  /* 820B8DD4h */ case   29:  		/* stw R11, <#[R1 + 260]> */
		/* 820B8DD4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000104) );
		/* 820B8DD4h case   29:*/		return 0x820B8DD8;
		  /* 820B8DD8h */ case   30:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8DD8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8DD8h case   30:*/		return 0x820B8DDC;
		  /* 820B8DDCh */ case   31:  		/* stw R11, <#[R1 + 264]> */
		/* 820B8DDCh case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 820B8DDCh case   31:*/		return 0x820B8DE0;
		  /* 820B8DE0h */ case   32:  		/* lwz R11, <#[R30 + 24]> */
		/* 820B8DE0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 820B8DE0h case   32:*/		return 0x820B8DE4;
		  /* 820B8DE4h */ case   33:  		/* stw R11, <#[R1 + 268]> */
		/* 820B8DE4h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000010C) );
		/* 820B8DE4h case   33:*/		return 0x820B8DE8;
		  /* 820B8DE8h */ case   34:  		/* lwz R11, <#[R30 + 60]> */
		/* 820B8DE8h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820B8DE8h case   34:*/		return 0x820B8DEC;
		  /* 820B8DECh */ case   35:  		/* stw R11, <#[R1 + 432]> */
		/* 820B8DECh case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001B0) );
		/* 820B8DECh case   35:*/		return 0x820B8DF0;
		  /* 820B8DF0h */ case   36:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8DF0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8DF0h case   36:*/		return 0x820B8DF4;
		  /* 820B8DF4h */ case   37:  		/* stw R11, <#[R1 + 436]> */
		/* 820B8DF4h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001B4) );
		/* 820B8DF4h case   37:*/		return 0x820B8DF8;
		  /* 820B8DF8h */ case   38:  		/* lwz R11, <#[R30 + 44]> */
		/* 820B8DF8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 820B8DF8h case   38:*/		return 0x820B8DFC;
		  /* 820B8DFCh */ case   39:  		/* stw R11, <#[R1 + 440]> */
		/* 820B8DFCh case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001B8) );
		/* 820B8DFCh case   39:*/		return 0x820B8E00;
		  /* 820B8E00h */ case   40:  		/* lwz R11, <#[R30 + 44]> */
		/* 820B8E00h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 820B8E00h case   40:*/		return 0x820B8E04;
		  /* 820B8E04h */ case   41:  		/* stw R11, <#[R1 + 444]> */
		/* 820B8E04h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001BC) );
		/* 820B8E04h case   41:*/		return 0x820B8E08;
		  /* 820B8E08h */ case   42:  		/* lwz R11, <#[R30 + 60]> */
		/* 820B8E08h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820B8E08h case   42:*/		return 0x820B8E0C;
		  /* 820B8E0Ch */ case   43:  		/* stw R11, <#[R1 + 448]> */
		/* 820B8E0Ch case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001C0) );
		/* 820B8E0Ch case   43:*/		return 0x820B8E10;
		  /* 820B8E10h */ case   44:  		/* lwz R11, <#[R30 + 12]> */
		/* 820B8E10h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8E10h case   44:*/		return 0x820B8E14;
		  /* 820B8E14h */ case   45:  		/* stw R11, <#[R1 + 452]> */
		/* 820B8E14h case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001C4) );
		/* 820B8E14h case   45:*/		return 0x820B8E18;
		  /* 820B8E18h */ case   46:  		/* lwz R11, <#[R30 + 60]> */
		/* 820B8E18h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820B8E18h case   46:*/		return 0x820B8E1C;
		  /* 820B8E1Ch */ case   47:  		/* stw R11, <#[R1 + 456]> */
		/* 820B8E1Ch case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001C8) );
		/* 820B8E1Ch case   47:*/		return 0x820B8E20;
		  /* 820B8E20h */ case   48:  		/* lwz R11, <#[R30 + 12]> */
		/* 820B8E20h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8E20h case   48:*/		return 0x820B8E24;
		  /* 820B8E24h */ case   49:  		/* stw R11, <#[R1 + 460]> */
		/* 820B8E24h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001CC) );
		/* 820B8E24h case   49:*/		return 0x820B8E28;
		  /* 820B8E28h */ case   50:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8E28h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8E28h case   50:*/		return 0x820B8E2C;
		  /* 820B8E2Ch */ case   51:  		/* stw R11, <#[R1 + 464]> */
		/* 820B8E2Ch case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001D0) );
		/* 820B8E2Ch case   51:*/		return 0x820B8E30;
		  /* 820B8E30h */ case   52:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8E30h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8E30h case   52:*/		return 0x820B8E34;
		  /* 820B8E34h */ case   53:  		/* stw R11, <#[R1 + 468]> */
		/* 820B8E34h case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001D4) );
		/* 820B8E34h case   53:*/		return 0x820B8E38;
		  /* 820B8E38h */ case   54:  		/* lwz R11, <#[R30 + 44]> */
		/* 820B8E38h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 820B8E38h case   54:*/		return 0x820B8E3C;
		  /* 820B8E3Ch */ case   55:  		/* stw R11, <#[R1 + 472]> */
		/* 820B8E3Ch case   55:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001D8) );
		/* 820B8E3Ch case   55:*/		return 0x820B8E40;
		  /* 820B8E40h */ case   56:  		/* lwz R11, <#[R30 + 12]> */
		/* 820B8E40h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8E40h case   56:*/		return 0x820B8E44;
		  /* 820B8E44h */ case   57:  		/* stw R11, <#[R1 + 476]> */
		/* 820B8E44h case   57:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B8E44h case   57:*/		return 0x820B8E48;
		  /* 820B8E48h */ case   58:  		/* bl -33600 */
		/* 820B8E48h case   58:*/		regs.LR = 0x820B8E4C; return 0x820B0B08;
		/* 820B8E48h case   58:*/		return 0x820B8E4C;
		  /* 820B8E4Ch */ case   59:  		/* or. R31, R3, R3 */
		/* 820B8E4Ch case   59:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8E4Ch case   59:*/		return 0x820B8E50;
		  /* 820B8E50h */ case   60:  		/* bc 12, CR0_LT, 21896 */
		/* 820B8E50h case   60:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8E50h case   60:*/		return 0x820B8E54;
		  /* 820B8E54h */ case   61:  		/* li R9, 0 */
		/* 820B8E54h case   61:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8E54h case   61:*/		return 0x820B8E58;
		  /* 820B8E58h */ case   62:  		/* addi R8, R1, 444 */
		/* 820B8E58h case   62:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1BC);
		/* 820B8E58h case   62:*/		return 0x820B8E5C;
		  /* 820B8E5Ch */ case   63:  		/* addi R7, R1, 236 */
		/* 820B8E5Ch case   63:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xEC);
		/* 820B8E5Ch case   63:*/		return 0x820B8E60;
		  /* 820B8E60h */ case   64:  		/* addi R6, R1, 1004 */
		/* 820B8E60h case   64:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3EC);
		/* 820B8E60h case   64:*/		return 0x820B8E64;
		  /* 820B8E64h */ case   65:  		/* mr R5, R29 */
		/* 820B8E64h case   65:*/		regs.R5 = regs.R29;
		/* 820B8E64h case   65:*/		return 0x820B8E68;
		  /* 820B8E68h */ case   66:  		/* mr R4, R16 */
		/* 820B8E68h case   66:*/		regs.R4 = regs.R16;
		/* 820B8E68h case   66:*/		return 0x820B8E6C;
		  /* 820B8E6Ch */ case   67:  		/* mr R3, R14 */
		/* 820B8E6Ch case   67:*/		regs.R3 = regs.R14;
		/* 820B8E6Ch case   67:*/		return 0x820B8E70;
		  /* 820B8E70h */ case   68:  		/* bl -33640 */
		/* 820B8E70h case   68:*/		regs.LR = 0x820B8E74; return 0x820B0B08;
		/* 820B8E70h case   68:*/		return 0x820B8E74;
		  /* 820B8E74h */ case   69:  		/* or. R31, R3, R3 */
		/* 820B8E74h case   69:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8E74h case   69:*/		return 0x820B8E78;
		  /* 820B8E78h */ case   70:  		/* bc 12, CR0_LT, 21856 */
		/* 820B8E78h case   70:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8E78h case   70:*/		return 0x820B8E7C;
		  /* 820B8E7Ch */ case   71:  		/* li R9, 0 */
		/* 820B8E7Ch case   71:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8E7Ch case   71:*/		return 0x820B8E80;
		  /* 820B8E80h */ case   72:  		/* addi R8, R1, 456 */
		/* 820B8E80h case   72:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1C8);
		/* 820B8E80h case   72:*/		return 0x820B8E84;
		  /* 820B8E84h */ case   73:  		/* addi R7, R1, 248 */
		/* 820B8E84h case   73:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF8);
		/* 820B8E84h case   73:*/		return 0x820B8E88;
		  /* 820B8E88h */ case   74:  		/* addi R6, R1, 1016 */
		/* 820B8E88h case   74:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3F8);
		/* 820B8E88h case   74:*/		return 0x820B8E8C;
		  /* 820B8E8Ch */ case   75:  		/* mr R5, R29 */
		/* 820B8E8Ch case   75:*/		regs.R5 = regs.R29;
		/* 820B8E8Ch case   75:*/		return 0x820B8E90;
		  /* 820B8E90h */ case   76:  		/* mr R4, R16 */
		/* 820B8E90h case   76:*/		regs.R4 = regs.R16;
		/* 820B8E90h case   76:*/		return 0x820B8E94;
		  /* 820B8E94h */ case   77:  		/* mr R3, R14 */
		/* 820B8E94h case   77:*/		regs.R3 = regs.R14;
		/* 820B8E94h case   77:*/		return 0x820B8E98;
		  /* 820B8E98h */ case   78:  		/* bl -33680 */
		/* 820B8E98h case   78:*/		regs.LR = 0x820B8E9C; return 0x820B0B08;
		/* 820B8E98h case   78:*/		return 0x820B8E9C;
		  /* 820B8E9Ch */ case   79:  		/* or. R31, R3, R3 */
		/* 820B8E9Ch case   79:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8E9Ch case   79:*/		return 0x820B8EA0;
		  /* 820B8EA0h */ case   80:  		/* bc 12, CR0_LT, 21816 */
		/* 820B8EA0h case   80:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8EA0h case   80:*/		return 0x820B8EA4;
		  /* 820B8EA4h */ case   81:  		/* li R9, 0 */
		/* 820B8EA4h case   81:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8EA4h case   81:*/		return 0x820B8EA8;
		  /* 820B8EA8h */ case   82:  		/* addi R8, R1, 468 */
		/* 820B8EA8h case   82:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1D4);
		/* 820B8EA8h case   82:*/		return 0x820B8EAC;
		  /* 820B8EACh */ case   83:  		/* addi R7, R1, 260 */
		/* 820B8EACh case   83:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x104);
		/* 820B8EACh case   83:*/		return 0x820B8EB0;
		  /* 820B8EB0h */ case   84:  		/* addi R6, R1, 1028 */
		/* 820B8EB0h case   84:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x404);
		/* 820B8EB0h case   84:*/		return 0x820B8EB4;
		  /* 820B8EB4h */ case   85:  		/* mr R5, R29 */
		/* 820B8EB4h case   85:*/		regs.R5 = regs.R29;
		/* 820B8EB4h case   85:*/		return 0x820B8EB8;
		  /* 820B8EB8h */ case   86:  		/* mr R4, R16 */
		/* 820B8EB8h case   86:*/		regs.R4 = regs.R16;
		/* 820B8EB8h case   86:*/		return 0x820B8EBC;
		  /* 820B8EBCh */ case   87:  		/* mr R3, R14 */
		/* 820B8EBCh case   87:*/		regs.R3 = regs.R14;
		/* 820B8EBCh case   87:*/		return 0x820B8EC0;
		  /* 820B8EC0h */ case   88:  		/* bl -33720 */
		/* 820B8EC0h case   88:*/		regs.LR = 0x820B8EC4; return 0x820B0B08;
		/* 820B8EC0h case   88:*/		return 0x820B8EC4;
		  /* 820B8EC4h */ case   89:  		/* or. R31, R3, R3 */
		/* 820B8EC4h case   89:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8EC4h case   89:*/		return 0x820B8EC8;
		  /* 820B8EC8h */ case   90:  		/* bc 12, CR0_LT, 21776 */
		/* 820B8EC8h case   90:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8EC8h case   90:*/		return 0x820B8ECC;
		  /* 820B8ECCh */ case   91:  		/* lwz R11, <#[R30 + 56]> */
		/* 820B8ECCh case   91:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820B8ECCh case   91:*/		return 0x820B8ED0;
		  /* 820B8ED0h */ case   92:  		/* li R9, 0 */
		/* 820B8ED0h case   92:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8ED0h case   92:*/		return 0x820B8ED4;
		  /* 820B8ED4h */ case   93:  		/* addi R8, R1, 432 */
		/* 820B8ED4h case   93:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1B0);
		/* 820B8ED4h case   93:*/		return 0x820B8ED8;
		  /* 820B8ED8h */ case   94:  		/* addi R7, R1, 224 */
		/* 820B8ED8h case   94:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE0);
		/* 820B8ED8h case   94:*/		return 0x820B8EDC;
		  /* 820B8EDCh */ case   95:  		/* addi R6, R1, 944 */
		/* 820B8EDCh case   95:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3B0);
		/* 820B8EDCh case   95:*/		return 0x820B8EE0;
		  /* 820B8EE0h */ case   96:  		/* mr R5, R29 */
		/* 820B8EE0h case   96:*/		regs.R5 = regs.R29;
		/* 820B8EE0h case   96:*/		return 0x820B8EE4;
		  /* 820B8EE4h */ case   97:  		/* stw R11, <#[R1 + 224]> */
		/* 820B8EE4h case   97:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820B8EE4h case   97:*/		return 0x820B8EE8;
		  /* 820B8EE8h */ case   98:  		/* mr R4, R16 */
		/* 820B8EE8h case   98:*/		regs.R4 = regs.R16;
		/* 820B8EE8h case   98:*/		return 0x820B8EEC;
		  /* 820B8EECh */ case   99:  		/* lwz R11, <#[R30 + 24]> */
		/* 820B8EECh case   99:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 820B8EECh case   99:*/		return 0x820B8EF0;
		  /* 820B8EF0h */ case  100:  		/* mr R3, R14 */
		/* 820B8EF0h case  100:*/		regs.R3 = regs.R14;
		/* 820B8EF0h case  100:*/		return 0x820B8EF4;
		  /* 820B8EF4h */ case  101:  		/* stw R11, <#[R1 + 228]> */
		/* 820B8EF4h case  101:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 820B8EF4h case  101:*/		return 0x820B8EF8;
		  /* 820B8EF8h */ case  102:  		/* lwz R11, <#[R30 + 40]> */
		/* 820B8EF8h case  102:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 820B8EF8h case  102:*/		return 0x820B8EFC;
		  /* 820B8EFCh */ case  103:  		/* stw R11, <#[R1 + 232]> */
		/* 820B8EFCh case  103:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 820B8EFCh case  103:*/		return 0x820B8F00;
		  /* 820B8F00h */ case  104:  		/* lwz R11, <#[R30 + 40]> */
		/* 820B8F00h case  104:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 820B8F00h case  104:*/		return 0x820B8F04;
		  /* 820B8F04h */ case  105:  		/* stw R11, <#[R1 + 236]> */
		/* 820B8F04h case  105:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000EC) );
		/* 820B8F04h case  105:*/		return 0x820B8F08;
		  /* 820B8F08h */ case  106:  		/* lwz R11, <#[R30 + 56]> */
		/* 820B8F08h case  106:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820B8F08h case  106:*/		return 0x820B8F0C;
		  /* 820B8F0Ch */ case  107:  		/* stw R11, <#[R1 + 240]> */
		/* 820B8F0Ch case  107:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 820B8F0Ch case  107:*/		return 0x820B8F10;
		  /* 820B8F10h */ case  108:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8F10h case  108:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8F10h case  108:*/		return 0x820B8F14;
		  /* 820B8F14h */ case  109:  		/* stw R11, <#[R1 + 244]> */
		/* 820B8F14h case  109:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 820B8F14h case  109:*/		return 0x820B8F18;
		  /* 820B8F18h */ case  110:  		/* lwz R11, <#[R30 + 56]> */
		/* 820B8F18h case  110:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 820B8F18h case  110:*/		return 0x820B8F1C;
		  /* 820B8F1Ch */ case  111:  		/* stw R11, <#[R1 + 248]> */
		/* 820B8F1Ch case  111:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F8) );
		/* 820B8F1Ch case  111:*/		return 0x820B8F20;
		  /* 820B8F20h */ case  112:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8F20h case  112:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8F20h case  112:*/		return 0x820B8F24;
		  /* 820B8F24h */ case  113:  		/* stw R11, <#[R1 + 252]> */
		/* 820B8F24h case  113:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000FC) );
		/* 820B8F24h case  113:*/		return 0x820B8F28;
		  /* 820B8F28h */ case  114:  		/* lwz R11, <#[R30 + 24]> */
		/* 820B8F28h case  114:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 820B8F28h case  114:*/		return 0x820B8F2C;
		  /* 820B8F2Ch */ case  115:  		/* stw R11, <#[R1 + 256]> */
		/* 820B8F2Ch case  115:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 820B8F2Ch case  115:*/		return 0x820B8F30;
		  /* 820B8F30h */ case  116:  		/* lwz R11, <#[R30 + 24]> */
		/* 820B8F30h case  116:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 820B8F30h case  116:*/		return 0x820B8F34;
		  /* 820B8F34h */ case  117:  		/* stw R11, <#[R1 + 260]> */
		/* 820B8F34h case  117:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000104) );
		/* 820B8F34h case  117:*/		return 0x820B8F38;
		  /* 820B8F38h */ case  118:  		/* lwz R11, <#[R30 + 40]> */
		/* 820B8F38h case  118:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 820B8F38h case  118:*/		return 0x820B8F3C;
		  /* 820B8F3Ch */ case  119:  		/* stw R11, <#[R1 + 264]> */
		/* 820B8F3Ch case  119:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 820B8F3Ch case  119:*/		return 0x820B8F40;
		  /* 820B8F40h */ case  120:  		/* lwz R11, <#[R30 + 8]> */
		/* 820B8F40h case  120:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820B8F40h case  120:*/		return 0x820B8F44;
		  /* 820B8F44h */ case  121:  		/* stw R11, <#[R1 + 268]> */
		/* 820B8F44h case  121:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000010C) );
		/* 820B8F44h case  121:*/		return 0x820B8F48;
		  /* 820B8F48h */ case  122:  		/* lwz R11, <#[R30 + 44]> */
		/* 820B8F48h case  122:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 820B8F48h case  122:*/		return 0x820B8F4C;
		  /* 820B8F4Ch */ case  123:  		/* stw R11, <#[R1 + 432]> */
		/* 820B8F4Ch case  123:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001B0) );
		/* 820B8F4Ch case  123:*/		return 0x820B8F50;
		  /* 820B8F50h */ case  124:  		/* lwz R11, <#[R30 + 60]> */
		/* 820B8F50h case  124:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820B8F50h case  124:*/		return 0x820B8F54;
		  /* 820B8F54h */ case  125:  		/* stw R11, <#[R1 + 436]> */
		/* 820B8F54h case  125:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001B4) );
		/* 820B8F54h case  125:*/		return 0x820B8F58;
		  /* 820B8F58h */ case  126:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8F58h case  126:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8F58h case  126:*/		return 0x820B8F5C;
		  /* 820B8F5Ch */ case  127:  		/* stw R11, <#[R1 + 440]> */
		/* 820B8F5Ch case  127:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001B8) );
		/* 820B8F5Ch case  127:*/		return 0x820B8F60;
		  /* 820B8F60h */ case  128:  		/* lwz R11, <#[R30 + 60]> */
		/* 820B8F60h case  128:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820B8F60h case  128:*/		return 0x820B8F64;
		  /* 820B8F64h */ case  129:  		/* stw R11, <#[R1 + 444]> */
		/* 820B8F64h case  129:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001BC) );
		/* 820B8F64h case  129:*/		return 0x820B8F68;
		  /* 820B8F68h */ case  130:  		/* lwz R11, <#[R30 + 12]> */
		/* 820B8F68h case  130:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8F68h case  130:*/		return 0x820B8F6C;
		  /* 820B8F6Ch */ case  131:  		/* stw R11, <#[R1 + 448]> */
		/* 820B8F6Ch case  131:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001C0) );
		/* 820B8F6Ch case  131:*/		return 0x820B8F70;
		  /* 820B8F70h */ case  132:  		/* lwz R11, <#[R30 + 44]> */
		/* 820B8F70h case  132:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 820B8F70h case  132:*/		return 0x820B8F74;
		  /* 820B8F74h */ case  133:  		/* stw R11, <#[R1 + 452]> */
		/* 820B8F74h case  133:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001C4) );
		/* 820B8F74h case  133:*/		return 0x820B8F78;
		  /* 820B8F78h */ case  134:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8F78h case  134:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8F78h case  134:*/		return 0x820B8F7C;
		  /* 820B8F7Ch */ case  135:  		/* stw R11, <#[R1 + 456]> */
		/* 820B8F7Ch case  135:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001C8) );
		/* 820B8F7Ch case  135:*/		return 0x820B8F80;
		  /* 820B8F80h */ case  136:  		/* lwz R11, <#[R30 + 60]> */
		/* 820B8F80h case  136:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 820B8F80h case  136:*/		return 0x820B8F84;
		  /* 820B8F84h */ case  137:  		/* stw R11, <#[R1 + 460]> */
		/* 820B8F84h case  137:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001CC) );
		/* 820B8F84h case  137:*/		return 0x820B8F88;
		  /* 820B8F88h */ case  138:  		/* lwz R11, <#[R30 + 12]> */
		/* 820B8F88h case  138:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8F88h case  138:*/		return 0x820B8F8C;
		  /* 820B8F8Ch */ case  139:  		/* stw R11, <#[R1 + 464]> */
		/* 820B8F8Ch case  139:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001D0) );
		/* 820B8F8Ch case  139:*/		return 0x820B8F90;
		  /* 820B8F90h */ case  140:  		/* lwz R11, <#[R30 + 44]> */
		/* 820B8F90h case  140:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 820B8F90h case  140:*/		return 0x820B8F94;
		  /* 820B8F94h */ case  141:  		/* stw R11, <#[R1 + 468]> */
		/* 820B8F94h case  141:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001D4) );
		/* 820B8F94h case  141:*/		return 0x820B8F98;
		  /* 820B8F98h */ case  142:  		/* lwz R11, <#[R30 + 12]> */
		/* 820B8F98h case  142:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 820B8F98h case  142:*/		return 0x820B8F9C;
		  /* 820B8F9Ch */ case  143:  		/* stw R11, <#[R1 + 472]> */
		/* 820B8F9Ch case  143:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001D8) );
		/* 820B8F9Ch case  143:*/		return 0x820B8FA0;
		  /* 820B8FA0h */ case  144:  		/* lwz R11, <#[R30 + 28]> */
		/* 820B8FA0h case  144:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820B8FA0h case  144:*/		return 0x820B8FA4;
		  /* 820B8FA4h */ case  145:  		/* stw R11, <#[R1 + 476]> */
		/* 820B8FA4h case  145:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001DC) );
		/* 820B8FA4h case  145:*/		return 0x820B8FA8;
		  /* 820B8FA8h */ case  146:  		/* bl -33952 */
		/* 820B8FA8h case  146:*/		regs.LR = 0x820B8FAC; return 0x820B0B08;
		/* 820B8FA8h case  146:*/		return 0x820B8FAC;
		  /* 820B8FACh */ case  147:  		/* or. R31, R3, R3 */
		/* 820B8FACh case  147:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8FACh case  147:*/		return 0x820B8FB0;
		  /* 820B8FB0h */ case  148:  		/* bc 12, CR0_LT, 21544 */
		/* 820B8FB0h case  148:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8FB0h case  148:*/		return 0x820B8FB4;
		  /* 820B8FB4h */ case  149:  		/* li R9, 0 */
		/* 820B8FB4h case  149:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8FB4h case  149:*/		return 0x820B8FB8;
		  /* 820B8FB8h */ case  150:  		/* addi R8, R1, 444 */
		/* 820B8FB8h case  150:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1BC);
		/* 820B8FB8h case  150:*/		return 0x820B8FBC;
		  /* 820B8FBCh */ case  151:  		/* addi R7, R1, 236 */
		/* 820B8FBCh case  151:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xEC);
		/* 820B8FBCh case  151:*/		return 0x820B8FC0;
		  /* 820B8FC0h */ case  152:  		/* addi R6, R1, 956 */
		/* 820B8FC0h case  152:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3BC);
		/* 820B8FC0h case  152:*/		return 0x820B8FC4;
		  /* 820B8FC4h */ case  153:  		/* mr R5, R29 */
		/* 820B8FC4h case  153:*/		regs.R5 = regs.R29;
		/* 820B8FC4h case  153:*/		return 0x820B8FC8;
		  /* 820B8FC8h */ case  154:  		/* mr R4, R16 */
		/* 820B8FC8h case  154:*/		regs.R4 = regs.R16;
		/* 820B8FC8h case  154:*/		return 0x820B8FCC;
		  /* 820B8FCCh */ case  155:  		/* mr R3, R14 */
		/* 820B8FCCh case  155:*/		regs.R3 = regs.R14;
		/* 820B8FCCh case  155:*/		return 0x820B8FD0;
		  /* 820B8FD0h */ case  156:  		/* bl -33992 */
		/* 820B8FD0h case  156:*/		regs.LR = 0x820B8FD4; return 0x820B0B08;
		/* 820B8FD0h case  156:*/		return 0x820B8FD4;
		  /* 820B8FD4h */ case  157:  		/* or. R31, R3, R3 */
		/* 820B8FD4h case  157:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8FD4h case  157:*/		return 0x820B8FD8;
		  /* 820B8FD8h */ case  158:  		/* bc 12, CR0_LT, 21504 */
		/* 820B8FD8h case  158:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B8FD8h case  158:*/		return 0x820B8FDC;
		  /* 820B8FDCh */ case  159:  		/* li R9, 0 */
		/* 820B8FDCh case  159:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B8FDCh case  159:*/		return 0x820B8FE0;
		  /* 820B8FE0h */ case  160:  		/* addi R8, R1, 456 */
		/* 820B8FE0h case  160:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1C8);
		/* 820B8FE0h case  160:*/		return 0x820B8FE4;
		  /* 820B8FE4h */ case  161:  		/* addi R7, R1, 248 */
		/* 820B8FE4h case  161:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF8);
		/* 820B8FE4h case  161:*/		return 0x820B8FE8;
		  /* 820B8FE8h */ case  162:  		/* addi R6, R1, 968 */
		/* 820B8FE8h case  162:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3C8);
		/* 820B8FE8h case  162:*/		return 0x820B8FEC;
		  /* 820B8FECh */ case  163:  		/* mr R5, R29 */
		/* 820B8FECh case  163:*/		regs.R5 = regs.R29;
		/* 820B8FECh case  163:*/		return 0x820B8FF0;
		  /* 820B8FF0h */ case  164:  		/* mr R4, R16 */
		/* 820B8FF0h case  164:*/		regs.R4 = regs.R16;
		/* 820B8FF0h case  164:*/		return 0x820B8FF4;
		  /* 820B8FF4h */ case  165:  		/* mr R3, R14 */
		/* 820B8FF4h case  165:*/		regs.R3 = regs.R14;
		/* 820B8FF4h case  165:*/		return 0x820B8FF8;
		  /* 820B8FF8h */ case  166:  		/* bl -34032 */
		/* 820B8FF8h case  166:*/		regs.LR = 0x820B8FFC; return 0x820B0B08;
		/* 820B8FF8h case  166:*/		return 0x820B8FFC;
		  /* 820B8FFCh */ case  167:  		/* or. R31, R3, R3 */
		/* 820B8FFCh case  167:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B8FFCh case  167:*/		return 0x820B9000;
		  /* 820B9000h */ case  168:  		/* bc 12, CR0_LT, 21464 */
		/* 820B9000h case  168:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9000h case  168:*/		return 0x820B9004;
		  /* 820B9004h */ case  169:  		/* li R9, 0 */
		/* 820B9004h case  169:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9004h case  169:*/		return 0x820B9008;
		  /* 820B9008h */ case  170:  		/* addi R8, R1, 468 */
		/* 820B9008h case  170:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1D4);
		/* 820B9008h case  170:*/		return 0x820B900C;
		  /* 820B900Ch */ case  171:  		/* addi R7, R1, 260 */
		/* 820B900Ch case  171:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x104);
		/* 820B900Ch case  171:*/		return 0x820B9010;
		  /* 820B9010h */ case  172:  		/* addi R6, R1, 980 */
		/* 820B9010h case  172:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3D4);
		/* 820B9010h case  172:*/		return 0x820B9014;
		  /* 820B9014h */ case  173:  		/* mr R5, R29 */
		/* 820B9014h case  173:*/		regs.R5 = regs.R29;
		/* 820B9014h case  173:*/		return 0x820B9018;
		  /* 820B9018h */ case  174:  		/* mr R4, R16 */
		/* 820B9018h case  174:*/		regs.R4 = regs.R16;
		/* 820B9018h case  174:*/		return 0x820B901C;
		  /* 820B901Ch */ case  175:  		/* mr R3, R14 */
		/* 820B901Ch case  175:*/		regs.R3 = regs.R14;
		/* 820B901Ch case  175:*/		return 0x820B9020;
		  /* 820B9020h */ case  176:  		/* bl -34072 */
		/* 820B9020h case  176:*/		regs.LR = 0x820B9024; return 0x820B0B08;
		/* 820B9020h case  176:*/		return 0x820B9024;
		  /* 820B9024h */ case  177:  		/* or. R31, R3, R3 */
		/* 820B9024h case  177:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9024h case  177:*/		return 0x820B9028;
		  /* 820B9028h */ case  178:  		/* bc 12, CR0_LT, 21424 */
		/* 820B9028h case  178:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9028h case  178:*/		return 0x820B902C;
		  /* 820B902Ch */ case  179:  		/* lis R11, 4112 */
		/* 820B902Ch case  179:*/		cpu::op::lis<0>(regs,&regs.R11,0x1010);
		/* 820B902Ch case  179:*/		return 0x820B9030;
		  /* 820B9030h */ case  180:  		/* li R9, 0 */
		/* 820B9030h case  180:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9030h case  180:*/		return 0x820B9034;
		  /* 820B9034h */ case  181:  		/* ori R29, R11, 3 */
		/* 820B9034h case  181:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x3);
		/* 820B9034h case  181:*/		return 0x820B9038;
		  /* 820B9038h */ case  182:  		/* li R8, 0 */
		/* 820B9038h case  182:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9038h case  182:*/		return 0x820B903C;
		  /* 820B903Ch */ case  183:  		/* addi R7, R1, 944 */
		/* 820B903Ch case  183:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3B0);
		/* 820B903Ch case  183:*/		return 0x820B9040;
		  /* 820B9040h */ case  184:  		/* addi R6, R1, 1040 */
		/* 820B9040h case  184:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x410);
		/* 820B9040h case  184:*/		return 0x820B9044;
		  /* 820B9044h */ case  185:  		/* mr R5, R29 */
		/* 820B9044h case  185:*/		regs.R5 = regs.R29;
		/* 820B9044h case  185:*/		return 0x820B9048;
		  /* 820B9048h */ case  186:  		/* mr R4, R16 */
		/* 820B9048h case  186:*/		regs.R4 = regs.R16;
		/* 820B9048h case  186:*/		return 0x820B904C;
		  /* 820B904Ch */ case  187:  		/* mr R3, R14 */
		/* 820B904Ch case  187:*/		regs.R3 = regs.R14;
		/* 820B904Ch case  187:*/		return 0x820B9050;
		  /* 820B9050h */ case  188:  		/* bl -34120 */
		/* 820B9050h case  188:*/		regs.LR = 0x820B9054; return 0x820B0B08;
		/* 820B9050h case  188:*/		return 0x820B9054;
		  /* 820B9054h */ case  189:  		/* or. R31, R3, R3 */
		/* 820B9054h case  189:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9054h case  189:*/		return 0x820B9058;
		  /* 820B9058h */ case  190:  		/* bc 12, CR0_LT, 21376 */
		/* 820B9058h case  190:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9058h case  190:*/		return 0x820B905C;
		  /* 820B905Ch */ case  191:  		/* li R9, 0 */
		/* 820B905Ch case  191:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B905Ch case  191:*/		return 0x820B9060;
		  /* 820B9060h */ case  192:  		/* li R8, 0 */
		/* 820B9060h case  192:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9060h case  192:*/		return 0x820B9064;
		  /* 820B9064h */ case  193:  		/* addi R7, R1, 956 */
		/* 820B9064h case  193:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3BC);
		/* 820B9064h case  193:*/		return 0x820B9068;
		  /* 820B9068h */ case  194:  		/* addi R6, R1, 1052 */
		/* 820B9068h case  194:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x41C);
		/* 820B9068h case  194:*/		return 0x820B906C;
		  /* 820B906Ch */ case  195:  		/* mr R5, R29 */
		/* 820B906Ch case  195:*/		regs.R5 = regs.R29;
		/* 820B906Ch case  195:*/		return 0x820B9070;
		  /* 820B9070h */ case  196:  		/* mr R4, R16 */
		/* 820B9070h case  196:*/		regs.R4 = regs.R16;
		/* 820B9070h case  196:*/		return 0x820B9074;
		  /* 820B9074h */ case  197:  		/* mr R3, R14 */
		/* 820B9074h case  197:*/		regs.R3 = regs.R14;
		/* 820B9074h case  197:*/		return 0x820B9078;
		  /* 820B9078h */ case  198:  		/* bl -34160 */
		/* 820B9078h case  198:*/		regs.LR = 0x820B907C; return 0x820B0B08;
		/* 820B9078h case  198:*/		return 0x820B907C;
		  /* 820B907Ch */ case  199:  		/* or. R31, R3, R3 */
		/* 820B907Ch case  199:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B907Ch case  199:*/		return 0x820B9080;
		  /* 820B9080h */ case  200:  		/* bc 12, CR0_LT, 21336 */
		/* 820B9080h case  200:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9080h case  200:*/		return 0x820B9084;
		  /* 820B9084h */ case  201:  		/* li R9, 0 */
		/* 820B9084h case  201:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9084h case  201:*/		return 0x820B9088;
		  /* 820B9088h */ case  202:  		/* li R8, 0 */
		/* 820B9088h case  202:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9088h case  202:*/		return 0x820B908C;
		  /* 820B908Ch */ case  203:  		/* addi R7, R1, 968 */
		/* 820B908Ch case  203:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3C8);
		/* 820B908Ch case  203:*/		return 0x820B9090;
		  /* 820B9090h */ case  204:  		/* addi R6, R1, 1064 */
		/* 820B9090h case  204:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x428);
		/* 820B9090h case  204:*/		return 0x820B9094;
		  /* 820B9094h */ case  205:  		/* mr R5, R29 */
		/* 820B9094h case  205:*/		regs.R5 = regs.R29;
		/* 820B9094h case  205:*/		return 0x820B9098;
		  /* 820B9098h */ case  206:  		/* mr R4, R16 */
		/* 820B9098h case  206:*/		regs.R4 = regs.R16;
		/* 820B9098h case  206:*/		return 0x820B909C;
		  /* 820B909Ch */ case  207:  		/* mr R3, R14 */
		/* 820B909Ch case  207:*/		regs.R3 = regs.R14;
		/* 820B909Ch case  207:*/		return 0x820B90A0;
		  /* 820B90A0h */ case  208:  		/* bl -34200 */
		/* 820B90A0h case  208:*/		regs.LR = 0x820B90A4; return 0x820B0B08;
		/* 820B90A0h case  208:*/		return 0x820B90A4;
		  /* 820B90A4h */ case  209:  		/* or. R31, R3, R3 */
		/* 820B90A4h case  209:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B90A4h case  209:*/		return 0x820B90A8;
		  /* 820B90A8h */ case  210:  		/* bc 12, CR0_LT, 21296 */
		/* 820B90A8h case  210:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B90A8h case  210:*/		return 0x820B90AC;
		  /* 820B90ACh */ case  211:  		/* li R9, 0 */
		/* 820B90ACh case  211:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B90ACh case  211:*/		return 0x820B90B0;
		  /* 820B90B0h */ case  212:  		/* li R8, 0 */
		/* 820B90B0h case  212:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B90B0h case  212:*/		return 0x820B90B4;
		  /* 820B90B4h */ case  213:  		/* addi R7, R1, 980 */
		/* 820B90B4h case  213:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3D4);
		/* 820B90B4h case  213:*/		return 0x820B90B8;
		  /* 820B90B8h */ case  214:  		/* addi R6, R1, 1076 */
		/* 820B90B8h case  214:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x434);
		/* 820B90B8h case  214:*/		return 0x820B90BC;
		  /* 820B90BCh */ case  215:  		/* mr R5, R29 */
		/* 820B90BCh case  215:*/		regs.R5 = regs.R29;
		/* 820B90BCh case  215:*/		return 0x820B90C0;
		  /* 820B90C0h */ case  216:  		/* mr R4, R16 */
		/* 820B90C0h case  216:*/		regs.R4 = regs.R16;
		/* 820B90C0h case  216:*/		return 0x820B90C4;
		  /* 820B90C4h */ case  217:  		/* mr R3, R14 */
		/* 820B90C4h case  217:*/		regs.R3 = regs.R14;
		/* 820B90C4h case  217:*/		return 0x820B90C8;
		  /* 820B90C8h */ case  218:  		/* bl -34240 */
		/* 820B90C8h case  218:*/		regs.LR = 0x820B90CC; return 0x820B0B08;
		/* 820B90C8h case  218:*/		return 0x820B90CC;
		  /* 820B90CCh */ case  219:  		/* or. R31, R3, R3 */
		/* 820B90CCh case  219:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B90CCh case  219:*/		return 0x820B90D0;
		  /* 820B90D0h */ case  220:  		/* bc 12, CR0_LT, 21256 */
		/* 820B90D0h case  220:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B90D0h case  220:*/		return 0x820B90D4;
		  /* 820B90D4h */ case  221:  		/* lis R11, 8256 */
		/* 820B90D4h case  221:*/		cpu::op::lis<0>(regs,&regs.R11,0x2040);
		/* 820B90D4h case  221:*/		return 0x820B90D8;
		  /* 820B90D8h */ case  222:  		/* li R9, 0 */
		/* 820B90D8h case  222:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B90D8h case  222:*/		return 0x820B90DC;
		  /* 820B90DCh */ case  223:  		/* ori R29, R11, 3 */
		/* 820B90DCh case  223:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x3);
		/* 820B90DCh case  223:*/		return 0x820B90E0;
		  /* 820B90E0h */ case  224:  		/* addi R8, R1, 1040 */
		/* 820B90E0h case  224:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x410);
		/* 820B90E0h case  224:*/		return 0x820B90E4;
		  /* 820B90E4h */ case  225:  		/* addi R7, R1, 992 */
		/* 820B90E4h case  225:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3E0);
		/* 820B90E4h case  225:*/		return 0x820B90E8;
		  /* 820B90E8h */ case  226:  		/* addi R6, R1, 896 */
		/* 820B90E8h case  226:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x380);
		/* 820B90E8h case  226:*/		return 0x820B90EC;
		  /* 820B90ECh */ case  227:  		/* mr R5, R29 */
		/* 820B90ECh case  227:*/		regs.R5 = regs.R29;
		/* 820B90ECh case  227:*/		return 0x820B90F0;
		  /* 820B90F0h */ case  228:  		/* mr R4, R16 */
		/* 820B90F0h case  228:*/		regs.R4 = regs.R16;
		/* 820B90F0h case  228:*/		return 0x820B90F4;
		  /* 820B90F4h */ case  229:  		/* mr R3, R14 */
		/* 820B90F4h case  229:*/		regs.R3 = regs.R14;
		/* 820B90F4h case  229:*/		return 0x820B90F8;
		  /* 820B90F8h */ case  230:  		/* bl -34288 */
		/* 820B90F8h case  230:*/		regs.LR = 0x820B90FC; return 0x820B0B08;
		/* 820B90F8h case  230:*/		return 0x820B90FC;
		  /* 820B90FCh */ case  231:  		/* or. R31, R3, R3 */
		/* 820B90FCh case  231:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B90FCh case  231:*/		return 0x820B9100;
		  /* 820B9100h */ case  232:  		/* bc 12, CR0_LT, 21208 */
		/* 820B9100h case  232:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9100h case  232:*/		return 0x820B9104;
		  /* 820B9104h */ case  233:  		/* li R9, 0 */
		/* 820B9104h case  233:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9104h case  233:*/		return 0x820B9108;
		  /* 820B9108h */ case  234:  		/* addi R8, R1, 1052 */
		/* 820B9108h case  234:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x41C);
		/* 820B9108h case  234:*/		return 0x820B910C;
		  /* 820B910Ch */ case  235:  		/* addi R7, R1, 1004 */
		/* 820B910Ch case  235:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3EC);
		/* 820B910Ch case  235:*/		return 0x820B9110;
		  /* 820B9110h */ case  236:  		/* addi R6, R1, 908 */
		/* 820B9110h case  236:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x38C);
		/* 820B9110h case  236:*/		return 0x820B9114;
		  /* 820B9114h */ case  237:  		/* mr R5, R29 */
		/* 820B9114h case  237:*/		regs.R5 = regs.R29;
		/* 820B9114h case  237:*/		return 0x820B9118;
		  /* 820B9118h */ case  238:  		/* mr R4, R16 */
		/* 820B9118h case  238:*/		regs.R4 = regs.R16;
		/* 820B9118h case  238:*/		return 0x820B911C;
		  /* 820B911Ch */ case  239:  		/* mr R3, R14 */
		/* 820B911Ch case  239:*/		regs.R3 = regs.R14;
		/* 820B911Ch case  239:*/		return 0x820B9120;
		  /* 820B9120h */ case  240:  		/* bl -34328 */
		/* 820B9120h case  240:*/		regs.LR = 0x820B9124; return 0x820B0B08;
		/* 820B9120h case  240:*/		return 0x820B9124;
		  /* 820B9124h */ case  241:  		/* or. R31, R3, R3 */
		/* 820B9124h case  241:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9124h case  241:*/		return 0x820B9128;
		  /* 820B9128h */ case  242:  		/* bc 12, CR0_LT, 21168 */
		/* 820B9128h case  242:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9128h case  242:*/		return 0x820B912C;
		  /* 820B912Ch */ case  243:  		/* li R9, 0 */
		/* 820B912Ch case  243:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B912Ch case  243:*/		return 0x820B9130;
		  /* 820B9130h */ case  244:  		/* addi R8, R1, 1064 */
		/* 820B9130h case  244:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x428);
		/* 820B9130h case  244:*/		return 0x820B9134;
		  /* 820B9134h */ case  245:  		/* addi R7, R1, 1016 */
		/* 820B9134h case  245:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3F8);
		/* 820B9134h case  245:*/		return 0x820B9138;
		  /* 820B9138h */ case  246:  		/* addi R6, R1, 920 */
		/* 820B9138h case  246:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x398);
		/* 820B9138h case  246:*/		return 0x820B913C;
		  /* 820B913Ch */ case  247:  		/* mr R5, R29 */
		/* 820B913Ch case  247:*/		regs.R5 = regs.R29;
		/* 820B913Ch case  247:*/		return 0x820B9140;
		  /* 820B9140h */ case  248:  		/* mr R4, R16 */
		/* 820B9140h case  248:*/		regs.R4 = regs.R16;
		/* 820B9140h case  248:*/		return 0x820B9144;
		  /* 820B9144h */ case  249:  		/* mr R3, R14 */
		/* 820B9144h case  249:*/		regs.R3 = regs.R14;
		/* 820B9144h case  249:*/		return 0x820B9148;
		  /* 820B9148h */ case  250:  		/* bl -34368 */
		/* 820B9148h case  250:*/		regs.LR = 0x820B914C; return 0x820B0B08;
		/* 820B9148h case  250:*/		return 0x820B914C;
		  /* 820B914Ch */ case  251:  		/* or. R31, R3, R3 */
		/* 820B914Ch case  251:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B914Ch case  251:*/		return 0x820B9150;
		  /* 820B9150h */ case  252:  		/* bc 12, CR0_LT, 21128 */
		/* 820B9150h case  252:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9150h case  252:*/		return 0x820B9154;
		  /* 820B9154h */ case  253:  		/* li R9, 0 */
		/* 820B9154h case  253:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9154h case  253:*/		return 0x820B9158;
		  /* 820B9158h */ case  254:  		/* addi R8, R1, 1076 */
		/* 820B9158h case  254:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x434);
		/* 820B9158h case  254:*/		return 0x820B915C;
		  /* 820B915Ch */ case  255:  		/* addi R7, R1, 1028 */
		/* 820B915Ch case  255:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x404);
		/* 820B915Ch case  255:*/		return 0x820B9160;
		  /* 820B9160h */ case  256:  		/* addi R6, R1, 932 */
		/* 820B9160h case  256:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x3A4);
		/* 820B9160h case  256:*/		return 0x820B9164;
		  /* 820B9164h */ case  257:  		/* mr R5, R29 */
		/* 820B9164h case  257:*/		regs.R5 = regs.R29;
		/* 820B9164h case  257:*/		return 0x820B9168;
		  /* 820B9168h */ case  258:  		/* mr R4, R16 */
		/* 820B9168h case  258:*/		regs.R4 = regs.R16;
		/* 820B9168h case  258:*/		return 0x820B916C;
		  /* 820B916Ch */ case  259:  		/* mr R3, R14 */
		/* 820B916Ch case  259:*/		regs.R3 = regs.R14;
		/* 820B916Ch case  259:*/		return 0x820B9170;
		  /* 820B9170h */ case  260:  		/* bl -34408 */
		/* 820B9170h case  260:*/		regs.LR = 0x820B9174; return 0x820B0B08;
		/* 820B9170h case  260:*/		return 0x820B9174;
		  /* 820B9174h */ case  261:  		/* or. R31, R3, R3 */
		/* 820B9174h case  261:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9174h case  261:*/		return 0x820B9178;
		  /* 820B9178h */ case  262:  		/* bc 12, CR0_LT, 21088 */
		/* 820B9178h case  262:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9178h case  262:*/		return 0x820B917C;
		  /* 820B917Ch */ case  263:  		/* lwz R11, <#[R30 + 20]> */
		/* 820B917Ch case  263:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 820B917Ch case  263:*/		return 0x820B9180;
		  /* 820B9180h */ case  264:  		/* lis R10, 20480 */
		/* 820B9180h case  264:*/		cpu::op::lis<0>(regs,&regs.R10,0x5000);
		/* 820B9180h case  264:*/		return 0x820B9184;
		  /* 820B9184h */ case  265:  		/* li R9, 0 */
		/* 820B9184h case  265:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9184h case  265:*/		return 0x820B9188;
		  /* 820B9188h */ case  266:  		/* ori R29, R10, 3 */
		/* 820B9188h case  266:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R10,0x3);
		/* 820B9188h case  266:*/		return 0x820B918C;
		  /* 820B918Ch */ case  267:  		/* addi R8, R1, 224 */
		/* 820B918Ch case  267:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 820B918Ch case  267:*/		return 0x820B9190;
		  /* 820B9190h */ case  268:  		/* addi R7, R1, 896 */
		/* 820B9190h case  268:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x380);
		/* 820B9190h case  268:*/		return 0x820B9194;
		  /* 820B9194h */ case  269:  		/* stw R11, <#[R1 + 224]> */
		/* 820B9194h case  269:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820B9194h case  269:*/		return 0x820B9198;
		  /* 820B9198h */ case  270:  		/* addi R6, R1, 544 */
		/* 820B9198h case  270:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x220);
		/* 820B9198h case  270:*/		return 0x820B919C;
		  /* 820B919Ch */ case  271:  		/* lwz R11, <#[R30 + 36]> */
		/* 820B919Ch case  271:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 820B919Ch case  271:*/		return 0x820B91A0;
		  /* 820B91A0h */ case  272:  		/* mr R5, R29 */
		/* 820B91A0h case  272:*/		regs.R5 = regs.R29;
		/* 820B91A0h case  272:*/		return 0x820B91A4;
		  /* 820B91A4h */ case  273:  		/* stw R11, <#[R1 + 228]> */
		/* 820B91A4h case  273:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 820B91A4h case  273:*/		return 0x820B91A8;
		  /* 820B91A8h */ case  274:  		/* mr R4, R16 */
		/* 820B91A8h case  274:*/		regs.R4 = regs.R16;
		/* 820B91A8h case  274:*/		return 0x820B91AC;
		  /* 820B91ACh */ case  275:  		/* lwz R11, <#[R30 + 52]> */
		/* 820B91ACh case  275:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 820B91ACh case  275:*/		return 0x820B91B0;
		  /* 820B91B0h */ case  276:  		/* mr R3, R14 */
		/* 820B91B0h case  276:*/		regs.R3 = regs.R14;
		/* 820B91B0h case  276:*/		return 0x820B91B4;
		  /* 820B91B4h */ case  277:  		/* stw R11, <#[R1 + 232]> */
		/* 820B91B4h case  277:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 820B91B4h case  277:*/		return 0x820B91B8;
		  /* 820B91B8h */ case  278:  		/* lwz R11, <#[R30 + 4]> */
		/* 820B91B8h case  278:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820B91B8h case  278:*/		return 0x820B91BC;
		  /* 820B91BCh */ case  279:  		/* stw R11, <#[R1 + 236]> */
		/* 820B91BCh case  279:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000EC) );
		/* 820B91BCh case  279:*/		return 0x820B91C0;
		  /* 820B91C0h */ case  280:  		/* lwz R11, <#[R30 + 36]> */
		/* 820B91C0h case  280:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 820B91C0h case  280:*/		return 0x820B91C4;
		  /* 820B91C4h */ case  281:  		/* stw R11, <#[R1 + 240]> */
		/* 820B91C4h case  281:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 820B91C4h case  281:*/		return 0x820B91C8;
		  /* 820B91C8h */ case  282:  		/* lwz R11, <#[R30 + 52]> */
		/* 820B91C8h case  282:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 820B91C8h case  282:*/		return 0x820B91CC;
		  /* 820B91CCh */ case  283:  		/* stw R11, <#[R1 + 244]> */
		/* 820B91CCh case  283:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 820B91CCh case  283:*/		return 0x820B91D0;
		  /* 820B91D0h */ case  284:  		/* lwz R11, <#[R30 + 4]> */
		/* 820B91D0h case  284:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820B91D0h case  284:*/		return 0x820B91D4;
		  /* 820B91D4h */ case  285:  		/* stw R11, <#[R1 + 248]> */
		/* 820B91D4h case  285:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F8) );
		/* 820B91D4h case  285:*/		return 0x820B91D8;
		  /* 820B91D8h */ case  286:  		/* lwz R11, <#[R30 + 20]> */
		/* 820B91D8h case  286:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 820B91D8h case  286:*/		return 0x820B91DC;
		  /* 820B91DCh */ case  287:  		/* stw R11, <#[R1 + 252]> */
		/* 820B91DCh case  287:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000FC) );
		/* 820B91DCh case  287:*/		return 0x820B91E0;
		  /* 820B91E0h */ case  288:  		/* lwz R11, <#[R30 + 52]> */
		/* 820B91E0h case  288:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 820B91E0h case  288:*/		return 0x820B91E4;
		  /* 820B91E4h */ case  289:  		/* stw R11, <#[R1 + 256]> */
		/* 820B91E4h case  289:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 820B91E4h case  289:*/		return 0x820B91E8;
		  /* 820B91E8h */ case  290:  		/* lwz R11, <#[R30 + 4]> */
		/* 820B91E8h case  290:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820B91E8h case  290:*/		return 0x820B91EC;
		  /* 820B91ECh */ case  291:  		/* stw R11, <#[R1 + 260]> */
		/* 820B91ECh case  291:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000104) );
		/* 820B91ECh case  291:*/		return 0x820B91F0;
		  /* 820B91F0h */ case  292:  		/* lwz R11, <#[R30 + 20]> */
		/* 820B91F0h case  292:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 820B91F0h case  292:*/		return 0x820B91F4;
		  /* 820B91F4h */ case  293:  		/* stw R11, <#[R1 + 264]> */
		/* 820B91F4h case  293:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 820B91F4h case  293:*/		return 0x820B91F8;
		  /* 820B91F8h */ case  294:  		/* lwz R11, <#[R30 + 36]> */
		/* 820B91F8h case  294:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 820B91F8h case  294:*/		return 0x820B91FC;
		  /* 820B91FCh */ case  295:  		/* stw R11, <#[R1 + 268]> */
		/* 820B91FCh case  295:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000010C) );
		/* 820B91FCh case  295:*/		return 0x820B9200;
		  /* 820B9200h */ case  296:  		/* bl -34552 */
		/* 820B9200h case  296:*/		regs.LR = 0x820B9204; return 0x820B0B08;
		/* 820B9200h case  296:*/		return 0x820B9204;
		  /* 820B9204h */ case  297:  		/* or. R31, R3, R3 */
		/* 820B9204h case  297:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9204h case  297:*/		return 0x820B9208;
		  /* 820B9208h */ case  298:  		/* bc 12, CR0_LT, 20944 */
		/* 820B9208h case  298:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9208h case  298:*/		return 0x820B920C;
		  /* 820B920Ch */ case  299:  		/* li R9, 0 */
		/* 820B920Ch case  299:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B920Ch case  299:*/		return 0x820B9210;
		  /* 820B9210h */ case  300:  		/* addi R8, R1, 236 */
		/* 820B9210h case  300:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xEC);
		/* 820B9210h case  300:*/		return 0x820B9214;
		  /* 820B9214h */ case  301:  		/* addi R7, R1, 908 */
		/* 820B9214h case  301:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x38C);
		/* 820B9214h case  301:*/		return 0x820B9218;
		  /* 820B9218h */ case  302:  		/* addi R6, R1, 548 */
		/* 820B9218h case  302:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x224);
		/* 820B9218h case  302:*/		return 0x820B921C;
		  /* 820B921Ch */ case  303:  		/* mr R5, R29 */
		/* 820B921Ch case  303:*/		regs.R5 = regs.R29;
		/* 820B921Ch case  303:*/		return 0x820B9220;
		  /* 820B9220h */ case  304:  		/* mr R4, R16 */
		/* 820B9220h case  304:*/		regs.R4 = regs.R16;
		/* 820B9220h case  304:*/		return 0x820B9224;
		  /* 820B9224h */ case  305:  		/* mr R3, R14 */
		/* 820B9224h case  305:*/		regs.R3 = regs.R14;
		/* 820B9224h case  305:*/		return 0x820B9228;
		  /* 820B9228h */ case  306:  		/* bl -34592 */
		/* 820B9228h case  306:*/		regs.LR = 0x820B922C; return 0x820B0B08;
		/* 820B9228h case  306:*/		return 0x820B922C;
		  /* 820B922Ch */ case  307:  		/* or. R31, R3, R3 */
		/* 820B922Ch case  307:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B922Ch case  307:*/		return 0x820B9230;
		  /* 820B9230h */ case  308:  		/* bc 12, CR0_LT, 20904 */
		/* 820B9230h case  308:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9230h case  308:*/		return 0x820B9234;
		  /* 820B9234h */ case  309:  		/* li R9, 0 */
		/* 820B9234h case  309:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9234h case  309:*/		return 0x820B9238;
		  /* 820B9238h */ case  310:  		/* addi R8, R1, 248 */
		/* 820B9238h case  310:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xF8);
		/* 820B9238h case  310:*/		return 0x820B923C;
		  /* 820B923Ch */ case  311:  		/* addi R7, R1, 920 */
		/* 820B923Ch case  311:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x398);
		/* 820B923Ch case  311:*/		return 0x820B9240;
		  /* 820B9240h */ case  312:  		/* addi R6, R1, 552 */
		/* 820B9240h case  312:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x228);
		/* 820B9240h case  312:*/		return 0x820B9244;
		  /* 820B9244h */ case  313:  		/* mr R5, R29 */
		/* 820B9244h case  313:*/		regs.R5 = regs.R29;
		/* 820B9244h case  313:*/		return 0x820B9248;
		  /* 820B9248h */ case  314:  		/* mr R4, R16 */
		/* 820B9248h case  314:*/		regs.R4 = regs.R16;
		/* 820B9248h case  314:*/		return 0x820B924C;
		  /* 820B924Ch */ case  315:  		/* mr R3, R14 */
		/* 820B924Ch case  315:*/		regs.R3 = regs.R14;
		/* 820B924Ch case  315:*/		return 0x820B9250;
		  /* 820B9250h */ case  316:  		/* bl -34632 */
		/* 820B9250h case  316:*/		regs.LR = 0x820B9254; return 0x820B0B08;
		/* 820B9250h case  316:*/		return 0x820B9254;
		  /* 820B9254h */ case  317:  		/* or. R31, R3, R3 */
		/* 820B9254h case  317:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9254h case  317:*/		return 0x820B9258;
		  /* 820B9258h */ case  318:  		/* bc 12, CR0_LT, 20864 */
		/* 820B9258h case  318:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9258h case  318:*/		return 0x820B925C;
		  /* 820B925Ch */ case  319:  		/* li R9, 0 */
		/* 820B925Ch case  319:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B925Ch case  319:*/		return 0x820B9260;
		  /* 820B9260h */ case  320:  		/* addi R8, R1, 260 */
		/* 820B9260h case  320:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x104);
		/* 820B9260h case  320:*/		return 0x820B9264;
		  /* 820B9264h */ case  321:  		/* addi R7, R1, 932 */
		/* 820B9264h case  321:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3A4);
		/* 820B9264h case  321:*/		return 0x820B9268;
		  /* 820B9268h */ case  322:  		/* addi R6, R1, 556 */
		/* 820B9268h case  322:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x22C);
		/* 820B9268h case  322:*/		return 0x820B926C;
		  /* 820B926Ch */ case  323:  		/* mr R5, R29 */
		/* 820B926Ch case  323:*/		regs.R5 = regs.R29;
		/* 820B926Ch case  323:*/		return 0x820B9270;
		  /* 820B9270h */ case  324:  		/* mr R4, R16 */
		/* 820B9270h case  324:*/		regs.R4 = regs.R16;
		/* 820B9270h case  324:*/		return 0x820B9274;
		  /* 820B9274h */ case  325:  		/* mr R3, R14 */
		/* 820B9274h case  325:*/		regs.R3 = regs.R14;
		/* 820B9274h case  325:*/		return 0x820B9278;
		  /* 820B9278h */ case  326:  		/* bl -34672 */
		/* 820B9278h case  326:*/		regs.LR = 0x820B927C; return 0x820B0B08;
		/* 820B9278h case  326:*/		return 0x820B927C;
		  /* 820B927Ch */ case  327:  		/* or. R31, R3, R3 */
		/* 820B927Ch case  327:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B927Ch case  327:*/		return 0x820B9280;
		  /* 820B9280h */ case  328:  		/* bc 12, CR0_LT, 20824 */
		/* 820B9280h case  328:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9280h case  328:*/		return 0x820B9284;
		  /* 820B9284h */ case  329:  		/* lwz R11, <#[R30]> */
		/* 820B9284h case  329:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820B9284h case  329:*/		return 0x820B9288;
		  /* 820B9288h */ case  330:  		/* lis R5, 20480 */
		/* 820B9288h case  330:*/		cpu::op::lis<0>(regs,&regs.R5,0x5000);
		/* 820B9288h case  330:*/		return 0x820B928C;
		  /* 820B928Ch */ case  331:  		/* addi R8, R1, 224 */
		/* 820B928Ch case  331:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 820B928Ch case  331:*/		return 0x820B9290;
		  /* 820B9290h */ case  332:  		/* addi R7, R1, 544 */
		/* 820B9290h case  332:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x220);
		/* 820B9290h case  332:*/		return 0x820B9294;
		  /* 820B9294h */ case  333:  		/* ori R5, R5, 4 */
		/* 820B9294h case  333:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x4);
		/* 820B9294h case  333:*/		return 0x820B9298;
		  /* 820B9298h */ case  334:  		/* stw R11, <#[R1 + 224]> */
		/* 820B9298h case  334:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820B9298h case  334:*/		return 0x820B929C;
		  /* 820B929Ch */ case  335:  		/* lwz R11, <#[R30 + 16]> */
		/* 820B929Ch case  335:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 820B929Ch case  335:*/		return 0x820B92A0;
		  /* 820B92A0h */ case  336:  		/* stw R11, <#[R1 + 228]> */
		/* 820B92A0h case  336:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 820B92A0h case  336:*/		return 0x820B92A4;
		  /* 820B92A4h */ case  337:  		/* lwz R11, <#[R30 + 32]> */
		/* 820B92A4h case  337:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 820B92A4h case  337:*/		return 0x820B92A8;
		  /* 820B92A8h */ case  338:  		/* stw R11, <#[R1 + 232]> */
		/* 820B92A8h case  338:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 820B92A8h case  338:*/		return 0x820B92AC;
		  /* 820B92ACh */ case  339:  		/* lwz R11, <#[R30 + 48]> */
		/* 820B92ACh case  339:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 820B92ACh case  339:*/		return 0x820B92B0;
		  /* 820B92B0h */ case  340:  		/* stw R11, <#[R1 + 236]> */
		/* 820B92B0h case  340:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000EC) );
		/* 820B92B0h case  340:*/		return 0x820B92B4;
		  /* 820B92B4h */ case  341:  		/* b 17528 */
		/* 820B92B4h case  341:*/		return 0x820BD72C;
		/* 820B92B4h case  341:*/		return 0x820B92B8;
		  /* 820B92B8h */ case  342:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B92B8h case  342:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B92B8h case  342:*/		return 0x820B92BC;
		  /* 820B92BCh */ case  343:  		/* cmplwi CR6, R11, 0 */
		/* 820B92BCh case  343:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B92BCh case  343:*/		return 0x820B92C0;
		  /* 820B92C0h */ case  344:  		/* bc 12, CR6_EQ, 20752 */
		/* 820B92C0h case  344:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B92C0h case  344:*/		return 0x820B92C4;
		  /* 820B92C4h */ case  345:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B92C4h case  345:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B92C4h case  345:*/		return 0x820B92C8;
		  /* 820B92C8h */ case  346:  		/* cmplwi CR6, R11, 0 */
		/* 820B92C8h case  346:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B92C8h case  346:*/		return 0x820B92CC;
		  /* 820B92CCh */ case  347:  		/* bc 12, CR6_EQ, 20740 */
		/* 820B92CCh case  347:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B92CCh case  347:*/		return 0x820B92D0;
		  /* 820B92D0h */ case  348:  		/* cmplwi CR6, R15, 0 */
		/* 820B92D0h case  348:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B92D0h case  348:*/		return 0x820B92D4;
		  /* 820B92D4h */ case  349:  		/* bc 12, CR6_EQ, -2312 */
		/* 820B92D4h case  349:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B92D4h case  349:*/		return 0x820B92D8;
		  /* 820B92D8h */ case  350:  		/* lwz R31, <#[R1 + 160]> */
		/* 820B92D8h case  350:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B92D8h case  350:*/		return 0x820B92DC;
		  /* 820B92DCh */ case  351:  		/* mr R3, R14 */
		/* 820B92DCh case  351:*/		regs.R3 = regs.R14;
		/* 820B92DCh case  351:*/		return 0x820B92E0;
		  /* 820B92E0h */ case  352:  		/* rlwinm R4, R31, 1, 0, 30 */
		/* 820B92E0h case  352:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R31);
		/* 820B92E0h case  352:*/		return 0x820B92E4;
		  /* 820B92E4h */ case  353:  		/* bl -35828 */
		/* 820B92E4h case  353:*/		regs.LR = 0x820B92E8; return 0x820B06F0;
		/* 820B92E4h case  353:*/		return 0x820B92E8;
		  /* 820B92E8h */ case  354:  		/* or. R11, R3, R3 */
		/* 820B92E8h case  354:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820B92E8h case  354:*/		return 0x820B92EC;
		  /* 820B92ECh */ case  355:  		/* bc 12, CR0_EQ, 16692 */
		/* 820B92ECh case  355:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B92ECh case  355:*/		return 0x820B92F0;
		  /* 820B92F0h */ case  356:  		/* li R10, 2 */
		/* 820B92F0h case  356:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820B92F0h case  356:*/		return 0x820B92F4;
		  /* 820B92F4h */ case  357:  		/* addi R9, R1, 124 */
		/* 820B92F4h case  357:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820B92F4h case  357:*/		return 0x820B92F8;
		  /* 820B92F8h */ case  358:  		/* rlwinm R8, R31, 2, 0, 29 */
		/* 820B92F8h case  358:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R31);
		/* 820B92F8h case  358:*/		return 0x820B92FC;
		  /* 820B92FCh */ case  359:  		/* mtspr CTR, R10 */
		/* 820B92FCh case  359:*/		regs.CTR = regs.R10;
		/* 820B92FCh case  359:*/		return 0x820B9300;
		  /* 820B9300h */ case  360:  		/* stwu R11, <#[R9 + 4]> */
		/* 820B9300h case  360:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820B9300h case  360:*/		return 0x820B9304;
		  /* 820B9304h */ case  361:  		/* add R11, R11, R8 */
		/* 820B9304h case  361:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820B9304h case  361:*/		return 0x820B9308;
		  /* 820B9308h */ case  362:  		/* bc 16, CR0_LT, -8 */
		/* 820B9308h case  362:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9300;  }
		/* 820B9308h case  362:*/		return 0x820B930C;
		  /* 820B930Ch */ case  363:  		/* lwz R27, <#[R1 + 128]> */
		/* 820B930Ch case  363:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 820B930Ch case  363:*/		return 0x820B9310;
		  /* 820B9310h */ case  364:  		/* li R29, -1 */
		/* 820B9310h case  364:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B9310h case  364:*/		return 0x820B9314;
		  /* 820B9314h */ case  365:  		/* cmplwi CR6, R31, 0 */
		/* 820B9314h case  365:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820B9314h case  365:*/		return 0x820B9318;
		  /* 820B9318h */ case  366:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9318h case  366:*/		if ( regs.CR[6].eq ) { return 0x820B9338;  }
		/* 820B9318h case  366:*/		return 0x820B931C;
		  /* 820B931Ch */ case  367:  		/* addi R11, R27, -4 */
		/* 820B931Ch case  367:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B931Ch case  367:*/		return 0x820B9320;
		  /* 820B9320h */ case  368:  		/* mr R10, R29 */
		/* 820B9320h case  368:*/		regs.R10 = regs.R29;
		/* 820B9320h case  368:*/		return 0x820B9324;
		  /* 820B9324h */ case  369:  		/* cmplwi CR0, R31, 0 */
		/* 820B9324h case  369:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820B9324h case  369:*/		return 0x820B9328;
		  /* 820B9328h */ case  370:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9328h case  370:*/		if ( regs.CR[0].eq ) { return 0x820B9338;  }
		/* 820B9328h case  370:*/		return 0x820B932C;
		  /* 820B932Ch */ case  371:  		/* mtspr CTR, R31 */
		/* 820B932Ch case  371:*/		regs.CTR = regs.R31;
		/* 820B932Ch case  371:*/		return 0x820B9330;
		  /* 820B9330h */ case  372:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9330h case  372:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9330h case  372:*/		return 0x820B9334;
		  /* 820B9334h */ case  373:  		/* bc 16, CR0_LT, -4 */
		/* 820B9334h case  373:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9330;  }
		/* 820B9334h case  373:*/		return 0x820B9338;
	}
	return 0x820B9338;
} // Block from 820B8D60h-820B9338h (374 instructions)

//////////////////////////////////////////////////////
// Block at 820B9338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9338);
		  /* 820B9338h */ case    0:  		/* lwz R28, <#[R1 + 132]> */
		/* 820B9338h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 820B9338h case    0:*/		return 0x820B933C;
		  /* 820B933Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 820B933Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820B933Ch case    1:*/		return 0x820B9340;
		  /* 820B9340h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9340h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9360;  }
		/* 820B9340h case    2:*/		return 0x820B9344;
		  /* 820B9344h */ case    3:  		/* addi R11, R28, -4 */
		/* 820B9344h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B9344h case    3:*/		return 0x820B9348;
		  /* 820B9348h */ case    4:  		/* mr R10, R29 */
		/* 820B9348h case    4:*/		regs.R10 = regs.R29;
		/* 820B9348h case    4:*/		return 0x820B934C;
		  /* 820B934Ch */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 820B934Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820B934Ch case    5:*/		return 0x820B9350;
		  /* 820B9350h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9350h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9360;  }
		/* 820B9350h case    6:*/		return 0x820B9354;
		  /* 820B9354h */ case    7:  		/* mtspr CTR, R31 */
		/* 820B9354h case    7:*/		regs.CTR = regs.R31;
		/* 820B9354h case    7:*/		return 0x820B9358;
		  /* 820B9358h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9358h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9358h case    8:*/		return 0x820B935C;
		  /* 820B935Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B935Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9358;  }
		/* 820B935Ch case    9:*/		return 0x820B9360;
	}
	return 0x820B9360;
} // Block from 820B9338h-820B9360h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9360);
		  /* 820B9360h */ case    0:  		/* stw R29, <#[R1 + 332]> */
		/* 820B9360h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000014C) );
		/* 820B9360h case    0:*/		return 0x820B9364;
		  /* 820B9364h */ case    1:  		/* rlwinm R30, R31, 0, 12, 31 */
		/* 820B9364h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R31);
		/* 820B9364h case    1:*/		return 0x820B9368;
		  /* 820B9368h */ case    2:  		/* stw R29, <#[R1 + 360]> */
		/* 820B9368h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000168) );
		/* 820B9368h case    2:*/		return 0x820B936C;
		  /* 820B936Ch */ case    3:  		/* li R9, 0 */
		/* 820B936Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B936Ch case    3:*/		return 0x820B9370;
		  /* 820B9370h */ case    4:  		/* stw R29, <#[R15]> */
		/* 820B9370h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820B9370h case    4:*/		return 0x820B9374;
		  /* 820B9374h */ case    5:  		/* li R8, 0 */
		/* 820B9374h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9374h case    5:*/		return 0x820B9378;
		  /* 820B9378h */ case    6:  		/* mr R6, R27 */
		/* 820B9378h case    6:*/		regs.R6 = regs.R27;
		/* 820B9378h case    6:*/		return 0x820B937C;
		  /* 820B937Ch */ case    7:  		/* lwz R7, <#[R1 + 148]> */
		/* 820B937Ch case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820B937Ch case    7:*/		return 0x820B9380;
		  /* 820B9380h */ case    8:  		/* oris R5, R30, 4112 */
		/* 820B9380h case    8:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820B9380h case    8:*/		return 0x820B9384;
		  /* 820B9384h */ case    9:  		/* mr R4, R16 */
		/* 820B9384h case    9:*/		regs.R4 = regs.R16;
		/* 820B9384h case    9:*/		return 0x820B9388;
		  /* 820B9388h */ case   10:  		/* mr R3, R14 */
		/* 820B9388h case   10:*/		regs.R3 = regs.R14;
		/* 820B9388h case   10:*/		return 0x820B938C;
		  /* 820B938Ch */ case   11:  		/* bl -34948 */
		/* 820B938Ch case   11:*/		regs.LR = 0x820B9390; return 0x820B0B08;
		/* 820B938Ch case   11:*/		return 0x820B9390;
		  /* 820B9390h */ case   12:  		/* or. R31, R3, R3 */
		/* 820B9390h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9390h case   12:*/		return 0x820B9394;
		  /* 820B9394h */ case   13:  		/* bc 12, CR0_LT, 20548 */
		/* 820B9394h case   13:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9394h case   13:*/		return 0x820B9398;
		  /* 820B9398h */ case   14:  		/* li R9, 0 */
		/* 820B9398h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9398h case   14:*/		return 0x820B939C;
		  /* 820B939Ch */ case   15:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B939Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B939Ch case   15:*/		return 0x820B93A0;
		  /* 820B93A0h */ case   16:  		/* mr R8, R27 */
		/* 820B93A0h case   16:*/		regs.R8 = regs.R27;
		/* 820B93A0h case   16:*/		return 0x820B93A4;
		  /* 820B93A4h */ case   17:  		/* mr R6, R28 */
		/* 820B93A4h case   17:*/		regs.R6 = regs.R28;
		/* 820B93A4h case   17:*/		return 0x820B93A8;
		  /* 820B93A8h */ case   18:  		/* oris R5, R30, 8256 */
		/* 820B93A8h case   18:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2040);
		/* 820B93A8h case   18:*/		return 0x820B93AC;
		  /* 820B93ACh */ case   19:  		/* mr R4, R16 */
		/* 820B93ACh case   19:*/		regs.R4 = regs.R16;
		/* 820B93ACh case   19:*/		return 0x820B93B0;
		  /* 820B93B0h */ case   20:  		/* mr R3, R14 */
		/* 820B93B0h case   20:*/		regs.R3 = regs.R14;
		/* 820B93B0h case   20:*/		return 0x820B93B4;
		  /* 820B93B4h */ case   21:  		/* bl -34988 */
		/* 820B93B4h case   21:*/		regs.LR = 0x820B93B8; return 0x820B0B08;
		/* 820B93B4h case   21:*/		return 0x820B93B8;
		  /* 820B93B8h */ case   22:  		/* or. R31, R3, R3 */
		/* 820B93B8h case   22:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B93B8h case   22:*/		return 0x820B93BC;
		  /* 820B93BCh */ case   23:  		/* bc 12, CR0_LT, 20508 */
		/* 820B93BCh case   23:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B93BCh case   23:*/		return 0x820B93C0;
		  /* 820B93C0h */ case   24:  		/* li R9, 4 */
		/* 820B93C0h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B93C0h case   24:*/		return 0x820B93C4;
		  /* 820B93C4h */ case   25:  		/* mr R8, R28 */
		/* 820B93C4h case   25:*/		regs.R8 = regs.R28;
		/* 820B93C4h case   25:*/		return 0x820B93C8;
		  /* 820B93C8h */ case   26:  		/* mr R7, R28 */
		/* 820B93C8h case   26:*/		regs.R7 = regs.R28;
		/* 820B93C8h case   26:*/		return 0x820B93CC;
		  /* 820B93CCh */ case   27:  		/* addi R6, R1, 332 */
		/* 820B93CCh case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x14C);
		/* 820B93CCh case   27:*/		return 0x820B93D0;
		  /* 820B93D0h */ case   28:  		/* oris R5, R30, 20480 */
		/* 820B93D0h case   28:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x5000);
		/* 820B93D0h case   28:*/		return 0x820B93D4;
		  /* 820B93D4h */ case   29:  		/* mr R4, R16 */
		/* 820B93D4h case   29:*/		regs.R4 = regs.R16;
		/* 820B93D4h case   29:*/		return 0x820B93D8;
		  /* 820B93D8h */ case   30:  		/* mr R3, R14 */
		/* 820B93D8h case   30:*/		regs.R3 = regs.R14;
		/* 820B93D8h case   30:*/		return 0x820B93DC;
		  /* 820B93DCh */ case   31:  		/* bl -35028 */
		/* 820B93DCh case   31:*/		regs.LR = 0x820B93E0; return 0x820B0B08;
		/* 820B93DCh case   31:*/		return 0x820B93E0;
		  /* 820B93E0h */ case   32:  		/* or. R31, R3, R3 */
		/* 820B93E0h case   32:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B93E0h case   32:*/		return 0x820B93E4;
		  /* 820B93E4h */ case   33:  		/* bc 12, CR0_LT, 20468 */
		/* 820B93E4h case   33:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B93E4h case   33:*/		return 0x820B93E8;
		  /* 820B93E8h */ case   34:  		/* lis R5, 4208 */
		/* 820B93E8h case   34:*/		cpu::op::lis<0>(regs,&regs.R5,0x1070);
		/* 820B93E8h case   34:*/		return 0x820B93EC;
		  /* 820B93ECh */ case   35:  		/* li R9, 4 */
		/* 820B93ECh case   35:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B93ECh case   35:*/		return 0x820B93F0;
		  /* 820B93F0h */ case   36:  		/* li R8, 0 */
		/* 820B93F0h case   36:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B93F0h case   36:*/		return 0x820B93F4;
		  /* 820B93F4h */ case   37:  		/* addi R7, R1, 332 */
		/* 820B93F4h case   37:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x14C);
		/* 820B93F4h case   37:*/		return 0x820B93F8;
		  /* 820B93F8h */ case   38:  		/* addi R6, R1, 360 */
		/* 820B93F8h case   38:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x168);
		/* 820B93F8h case   38:*/		return 0x820B93FC;
		  /* 820B93FCh */ case   39:  		/* ori R5, R5, 1 */
		/* 820B93FCh case   39:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B93FCh case   39:*/		return 0x820B9400;
		  /* 820B9400h */ case   40:  		/* mr R4, R16 */
		/* 820B9400h case   40:*/		regs.R4 = regs.R16;
		/* 820B9400h case   40:*/		return 0x820B9404;
		  /* 820B9404h */ case   41:  		/* mr R3, R14 */
		/* 820B9404h case   41:*/		regs.R3 = regs.R14;
		/* 820B9404h case   41:*/		return 0x820B9408;
		  /* 820B9408h */ case   42:  		/* bl -35072 */
		/* 820B9408h case   42:*/		regs.LR = 0x820B940C; return 0x820B0B08;
		/* 820B9408h case   42:*/		return 0x820B940C;
		  /* 820B940Ch */ case   43:  		/* or. R31, R3, R3 */
		/* 820B940Ch case   43:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B940Ch case   43:*/		return 0x820B9410;
		  /* 820B9410h */ case   44:  		/* bc 12, CR0_LT, 20424 */
		/* 820B9410h case   44:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9410h case   44:*/		return 0x820B9414;
		  /* 820B9414h */ case   45:  		/* lis R5, 4144 */
		/* 820B9414h case   45:*/		cpu::op::lis<0>(regs,&regs.R5,0x1030);
		/* 820B9414h case   45:*/		return 0x820B9418;
		  /* 820B9418h */ case   46:  		/* li R9, 4 */
		/* 820B9418h case   46:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9418h case   46:*/		return 0x820B941C;
		  /* 820B941Ch */ case   47:  		/* li R8, 0 */
		/* 820B941Ch case   47:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B941Ch case   47:*/		return 0x820B9420;
		  /* 820B9420h */ case   48:  		/* addi R7, R1, 360 */
		/* 820B9420h case   48:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x168);
		/* 820B9420h case   48:*/		return 0x820B9424;
		  /* 820B9424h */ case   49:  		/* b -5696 */
		/* 820B9424h case   49:*/		return 0x820B7DE4;
		/* 820B9424h case   49:*/		return 0x820B9428;
		  /* 820B9428h */ case   50:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9428h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9428h case   50:*/		return 0x820B942C;
		  /* 820B942Ch */ case   51:  		/* cmplwi CR6, R11, 0 */
		/* 820B942Ch case   51:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B942Ch case   51:*/		return 0x820B9430;
		  /* 820B9430h */ case   52:  		/* bc 12, CR6_EQ, 20384 */
		/* 820B9430h case   52:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9430h case   52:*/		return 0x820B9434;
		  /* 820B9434h */ case   53:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B9434h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B9434h case   53:*/		return 0x820B9438;
		  /* 820B9438h */ case   54:  		/* cmplwi CR6, R11, 0 */
		/* 820B9438h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9438h case   54:*/		return 0x820B943C;
		  /* 820B943Ch */ case   55:  		/* bc 12, CR6_EQ, 20372 */
		/* 820B943Ch case   55:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B943Ch case   55:*/		return 0x820B9440;
		  /* 820B9440h */ case   56:  		/* cmplwi CR6, R15, 0 */
		/* 820B9440h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B9440h case   56:*/		return 0x820B9444;
		  /* 820B9444h */ case   57:  		/* bc 12, CR6_EQ, -2680 */
		/* 820B9444h case   57:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B9444h case   57:*/		return 0x820B9448;
		  /* 820B9448h */ case   58:  		/* cmplwi CR6, R30, 0 */
		/* 820B9448h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9448h case   58:*/		return 0x820B944C;
		  /* 820B944Ch */ case   59:  		/* bc 12, CR6_EQ, 32 */
		/* 820B944Ch case   59:*/		if ( regs.CR[6].eq ) { return 0x820B946C;  }
		/* 820B944Ch case   59:*/		return 0x820B9450;
		  /* 820B9450h */ case   60:  		/* addi R11, R15, -4 */
		/* 820B9450h case   60:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B9450h case   60:*/		return 0x820B9454;
		  /* 820B9454h */ case   61:  		/* li R10, -1 */
		/* 820B9454h case   61:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B9454h case   61:*/		return 0x820B9458;
		  /* 820B9458h */ case   62:  		/* cmplwi CR0, R30, 0 */
		/* 820B9458h case   62:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9458h case   62:*/		return 0x820B945C;
		  /* 820B945Ch */ case   63:  		/* bc 12, CR0_EQ, 16 */
		/* 820B945Ch case   63:*/		if ( regs.CR[0].eq ) { return 0x820B946C;  }
		/* 820B945Ch case   63:*/		return 0x820B9460;
		  /* 820B9460h */ case   64:  		/* mtspr CTR, R30 */
		/* 820B9460h case   64:*/		regs.CTR = regs.R30;
		/* 820B9460h case   64:*/		return 0x820B9464;
		  /* 820B9464h */ case   65:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9464h case   65:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9464h case   65:*/		return 0x820B9468;
		  /* 820B9468h */ case   66:  		/* bc 16, CR0_LT, -4 */
		/* 820B9468h case   66:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9464;  }
		/* 820B9468h case   66:*/		return 0x820B946C;
	}
	return 0x820B946C;
} // Block from 820B9360h-820B946Ch (67 instructions)

//////////////////////////////////////////////////////
// Block at 820B946Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B946C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B946C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B946C);
		  /* 820B946Ch */ case    0:  		/* lwz R5, <#[R1 + 160]> */
		/* 820B946Ch case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B946Ch case    0:*/		return 0x820B9470;
		  /* 820B9470h */ case    1:  		/* li R11, 5 */
		/* 820B9470h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 820B9470h case    1:*/		return 0x820B9474;
		  /* 820B9474h */ case    2:  		/* lwz R8, <#[R1 + 148]> */
		/* 820B9474h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820B9474h case    2:*/		return 0x820B9478;
		  /* 820B9478h */ case    3:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B9478h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B9478h case    3:*/		return 0x820B947C;
		  /* 820B947Ch */ case    4:  		/* rlwimi R5, R11, 28, 0, 11 */
		/* 820B947Ch case    4:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R5,regs.R11);
		/* 820B947Ch case    4:*/		return 0x820B9480;
		  /* 820B9480h */ case    5:  		/* b 17068 */
		/* 820B9480h case    5:*/		return 0x820BD72C;
		/* 820B9480h case    5:*/		return 0x820B9484;
		  /* 820B9484h */ case    6:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9484h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9484h case    6:*/		return 0x820B9488;
		  /* 820B9488h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820B9488h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9488h case    7:*/		return 0x820B948C;
		  /* 820B948Ch */ case    8:  		/* bc 12, CR6_EQ, 20292 */
		/* 820B948Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B948Ch case    8:*/		return 0x820B9490;
		  /* 820B9490h */ case    9:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B9490h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B9490h case    9:*/		return 0x820B9494;
		  /* 820B9494h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820B9494h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9494h case   10:*/		return 0x820B9498;
		  /* 820B9498h */ case   11:  		/* bc 12, CR6_EQ, 20280 */
		/* 820B9498h case   11:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9498h case   11:*/		return 0x820B949C;
		  /* 820B949Ch */ case   12:  		/* cmplwi CR6, R15, 0 */
		/* 820B949Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B949Ch case   12:*/		return 0x820B94A0;
		  /* 820B94A0h */ case   13:  		/* bc 12, CR6_EQ, -2772 */
		/* 820B94A0h case   13:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B94A0h case   13:*/		return 0x820B94A4;
		  /* 820B94A4h */ case   14:  		/* lwz R9, <#[R14 + 32]> */
		/* 820B94A4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000020) );
		/* 820B94A4h case   14:*/		return 0x820B94A8;
		  /* 820B94A8h */ case   15:  		/* cmplwi CR6, R30, 0 */
		/* 820B94A8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B94A8h case   15:*/		return 0x820B94AC;
		  /* 820B94ACh */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820B94ACh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820B94ACh case   16:*/		return 0x820B94B0;
		  /* 820B94B0h */ case   17:  		/* lwz R10, <#[R1 + 148]> */
		/* 820B94B0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 820B94B0h case   17:*/		return 0x820B94B4;
		  /* 820B94B4h */ case   18:  		/* stw R9, <#[R1 + 688]> */
		/* 820B94B4h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000002B0) );
		/* 820B94B4h case   18:*/		return 0x820B94B8;
		  /* 820B94B8h */ case   19:  		/* lwz R9, <#[R11 + 4]> */
		/* 820B94B8h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 820B94B8h case   19:*/		return 0x820B94BC;
		  /* 820B94BCh */ case   20:  		/* stw R9, <#[R1 + 692]> */
		/* 820B94BCh case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000002B4) );
		/* 820B94BCh case   20:*/		return 0x820B94C0;
		  /* 820B94C0h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 820B94C0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820B94C0h case   21:*/		return 0x820B94C4;
		  /* 820B94C4h */ case   22:  		/* stw R11, <#[R1 + 696]> */
		/* 820B94C4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002B8) );
		/* 820B94C4h case   22:*/		return 0x820B94C8;
		  /* 820B94C8h */ case   23:  		/* lwz R11, <#[R14 + 32]> */
		/* 820B94C8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 820B94C8h case   23:*/		return 0x820B94CC;
		  /* 820B94CCh */ case   24:  		/* stw R11, <#[R1 + 700]> */
		/* 820B94CCh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002BC) );
		/* 820B94CCh case   24:*/		return 0x820B94D0;
		  /* 820B94D0h */ case   25:  		/* lwz R11, <#[R14 + 32]> */
		/* 820B94D0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 820B94D0h case   25:*/		return 0x820B94D4;
		  /* 820B94D4h */ case   26:  		/* stw R11, <#[R1 + 704]> */
		/* 820B94D4h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002C0) );
		/* 820B94D4h case   26:*/		return 0x820B94D8;
		  /* 820B94D8h */ case   27:  		/* lwz R11, <#[R10 + 4]> */
		/* 820B94D8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820B94D8h case   27:*/		return 0x820B94DC;
		  /* 820B94DCh */ case   28:  		/* stw R11, <#[R1 + 708]> */
		/* 820B94DCh case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002C4) );
		/* 820B94DCh case   28:*/		return 0x820B94E0;
		  /* 820B94E0h */ case   29:  		/* lwz R11, <#[R14 + 32]> */
		/* 820B94E0h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 820B94E0h case   29:*/		return 0x820B94E4;
		  /* 820B94E4h */ case   30:  		/* stw R11, <#[R1 + 712]> */
		/* 820B94E4h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002C8) );
		/* 820B94E4h case   30:*/		return 0x820B94E8;
		  /* 820B94E8h */ case   31:  		/* lwz R11, <#[R10 + 12]> */
		/* 820B94E8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 820B94E8h case   31:*/		return 0x820B94EC;
		  /* 820B94ECh */ case   32:  		/* stw R11, <#[R1 + 716]> */
		/* 820B94ECh case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002CC) );
		/* 820B94ECh case   32:*/		return 0x820B94F0;
		  /* 820B94F0h */ case   33:  		/* bc 12, CR6_EQ, 32 */
		/* 820B94F0h case   33:*/		if ( regs.CR[6].eq ) { return 0x820B9510;  }
		/* 820B94F0h case   33:*/		return 0x820B94F4;
		  /* 820B94F4h */ case   34:  		/* addi R11, R15, -4 */
		/* 820B94F4h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B94F4h case   34:*/		return 0x820B94F8;
		  /* 820B94F8h */ case   35:  		/* li R10, -1 */
		/* 820B94F8h case   35:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B94F8h case   35:*/		return 0x820B94FC;
		  /* 820B94FCh */ case   36:  		/* cmplwi CR0, R30, 0 */
		/* 820B94FCh case   36:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B94FCh case   36:*/		return 0x820B9500;
		  /* 820B9500h */ case   37:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9500h case   37:*/		if ( regs.CR[0].eq ) { return 0x820B9510;  }
		/* 820B9500h case   37:*/		return 0x820B9504;
		  /* 820B9504h */ case   38:  		/* mtspr CTR, R30 */
		/* 820B9504h case   38:*/		regs.CTR = regs.R30;
		/* 820B9504h case   38:*/		return 0x820B9508;
		  /* 820B9508h */ case   39:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9508h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9508h case   39:*/		return 0x820B950C;
		  /* 820B950Ch */ case   40:  		/* bc 16, CR0_LT, -4 */
		/* 820B950Ch case   40:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9508;  }
		/* 820B950Ch case   40:*/		return 0x820B9510;
	}
	return 0x820B9510;
} // Block from 820B946Ch-820B9510h (41 instructions)

//////////////////////////////////////////////////////
// Block at 820B9510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9510);
		  /* 820B9510h */ case    0:  		/* mr R5, R30 */
		/* 820B9510h case    0:*/		regs.R5 = regs.R30;
		/* 820B9510h case    0:*/		return 0x820B9514;
		  /* 820B9514h */ case    1:  		/* li R11, 517 */
		/* 820B9514h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x205);
		/* 820B9514h case    1:*/		return 0x820B9518;
		  /* 820B9518h */ case    2:  		/* addi R8, R1, 704 */
		/* 820B9518h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x2C0);
		/* 820B9518h case    2:*/		return 0x820B951C;
		  /* 820B951Ch */ case    3:  		/* rlwimi R5, R11, 20, 0, 11 */
		/* 820B951Ch case    3:*/		cpu::op::rlwimi<0,20,0,11>(regs,&regs.R5,regs.R11);
		/* 820B951Ch case    3:*/		return 0x820B9520;
		  /* 820B9520h */ case    4:  		/* addi R7, R1, 688 */
		/* 820B9520h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2B0);
		/* 820B9520h case    4:*/		return 0x820B9524;
		  /* 820B9524h */ case    5:  		/* b 16904 */
		/* 820B9524h case    5:*/		return 0x820BD72C;
		/* 820B9524h case    5:*/		return 0x820B9528;
		  /* 820B9528h */ case    6:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9528h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9528h case    6:*/		return 0x820B952C;
		  /* 820B952Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820B952Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B952Ch case    7:*/		return 0x820B9530;
		  /* 820B9530h */ case    8:  		/* bc 12, CR6_EQ, 20128 */
		/* 820B9530h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9530h case    8:*/		return 0x820B9534;
		  /* 820B9534h */ case    9:  		/* cmplwi CR6, R15, 0 */
		/* 820B9534h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B9534h case    9:*/		return 0x820B9538;
		  /* 820B9538h */ case   10:  		/* bc 12, CR6_EQ, -2924 */
		/* 820B9538h case   10:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B9538h case   10:*/		return 0x820B953C;
		  /* 820B953Ch */ case   11:  		/* lis R11, -32255 */
		/* 820B953Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820B953Ch case   11:*/		return 0x820B9540;
		  /* 820B9540h */ case   12:  		/* lwz R31, <#[R14 + 8]> */
		/* 820B9540h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R14 + 0x00000008) );
		/* 820B9540h case   12:*/		return 0x820B9544;
		  /* 820B9544h */ case   13:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 820B9544h case   13:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 820B9544h case   13:*/		return 0x820B9548;
		  /* 820B9548h */ case   14:  		/* bl -137072 */
		/* 820B9548h case   14:*/		regs.LR = 0x820B954C; return 0x82097DD8;
		/* 820B9548h case   14:*/		return 0x820B954C;
		  /* 820B954Ch */ case   15:  		/* lis R11, -32256 */
		/* 820B954Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820B954Ch case   15:*/		return 0x820B9550;
		  /* 820B9550h */ case   16:  		/* lwz R4, <#[R31 + 120]> */
		/* 820B9550h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820B9550h case   16:*/		return 0x820B9554;
		  /* 820B9554h */ case   17:  		/* li R6, 0 */
		/* 820B9554h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820B9554h case   17:*/		return 0x820B9558;
		  /* 820B9558h */ case   18:  		/* li R5, 0 */
		/* 820B9558h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820B9558h case   18:*/		return 0x820B955C;
		  /* 820B955Ch */ case   19:  		/* mr R3, R31 */
		/* 820B955Ch case   19:*/		regs.R3 = regs.R31;
		/* 820B955Ch case   19:*/		return 0x820B9560;
		  /* 820B9560h */ case   20:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 820B9560h case   20:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 820B9560h case   20:*/		return 0x820B9564;
		  /* 820B9564h */ case   21:  		/* fdiv FR1, FR0, FR1 */
		/* 820B9564h case   21:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR0,regs.FR1);
		/* 820B9564h case   21:*/		return 0x820B9568;
		  /* 820B9568h */ case   22:  		/* bl 277696 */
		/* 820B9568h case   22:*/		regs.LR = 0x820B956C; return 0x820FD228;
		/* 820B9568h case   22:*/		return 0x820B956C;
		  /* 820B956Ch */ case   23:  		/* mr R31, R3 */
		/* 820B956Ch case   23:*/		regs.R31 = regs.R3;
		/* 820B956Ch case   23:*/		return 0x820B9570;
		  /* 820B9570h */ case   24:  		/* mulli R4, R30, 3 */
		/* 820B9570h case   24:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x3);
		/* 820B9570h case   24:*/		return 0x820B9574;
		  /* 820B9574h */ case   25:  		/* mr R3, R14 */
		/* 820B9574h case   25:*/		regs.R3 = regs.R14;
		/* 820B9574h case   25:*/		return 0x820B9578;
		  /* 820B9578h */ case   26:  		/* bl -36488 */
		/* 820B9578h case   26:*/		regs.LR = 0x820B957C; return 0x820B06F0;
		/* 820B9578h case   26:*/		return 0x820B957C;
		  /* 820B957Ch */ case   27:  		/* or. R11, R3, R3 */
		/* 820B957Ch case   27:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820B957Ch case   27:*/		return 0x820B9580;
		  /* 820B9580h */ case   28:  		/* bc 12, CR0_EQ, 16032 */
		/* 820B9580h case   28:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B9580h case   28:*/		return 0x820B9584;
		  /* 820B9584h */ case   29:  		/* li R10, 3 */
		/* 820B9584h case   29:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820B9584h case   29:*/		return 0x820B9588;
		  /* 820B9588h */ case   30:  		/* addi R9, R1, 124 */
		/* 820B9588h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820B9588h case   30:*/		return 0x820B958C;
		  /* 820B958Ch */ case   31:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820B958Ch case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820B958Ch case   31:*/		return 0x820B9590;
		  /* 820B9590h */ case   32:  		/* mtspr CTR, R10 */
		/* 820B9590h case   32:*/		regs.CTR = regs.R10;
		/* 820B9590h case   32:*/		return 0x820B9594;
		  /* 820B9594h */ case   33:  		/* stwu R11, <#[R9 + 4]> */
		/* 820B9594h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820B9594h case   33:*/		return 0x820B9598;
		  /* 820B9598h */ case   34:  		/* add R11, R8, R11 */
		/* 820B9598h case   34:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820B9598h case   34:*/		return 0x820B959C;
		  /* 820B959Ch */ case   35:  		/* bc 16, CR0_LT, -8 */
		/* 820B959Ch case   35:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9594;  }
		/* 820B959Ch case   35:*/		return 0x820B95A0;
		  /* 820B95A0h */ case   36:  		/* lwz R8, <#[R1 + 128]> */
		/* 820B95A0h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 820B95A0h case   36:*/		return 0x820B95A4;
		  /* 820B95A4h */ case   37:  		/* cmplwi CR6, R30, 0 */
		/* 820B95A4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B95A4h case   37:*/		return 0x820B95A8;
		  /* 820B95A8h */ case   38:  		/* bc 12, CR6_EQ, 28 */
		/* 820B95A8h case   38:*/		if ( regs.CR[6].eq ) { return 0x820B95C4;  }
		/* 820B95A8h case   38:*/		return 0x820B95AC;
		  /* 820B95ACh */ case   39:  		/* addi R11, R8, -4 */
		/* 820B95ACh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820B95ACh case   39:*/		return 0x820B95B0;
		  /* 820B95B0h */ case   40:  		/* cmplwi CR0, R30, 0 */
		/* 820B95B0h case   40:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B95B0h case   40:*/		return 0x820B95B4;
		  /* 820B95B4h */ case   41:  		/* bc 12, CR0_EQ, 16 */
		/* 820B95B4h case   41:*/		if ( regs.CR[0].eq ) { return 0x820B95C4;  }
		/* 820B95B4h case   41:*/		return 0x820B95B8;
		  /* 820B95B8h */ case   42:  		/* mtspr CTR, R30 */
		/* 820B95B8h case   42:*/		regs.CTR = regs.R30;
		/* 820B95B8h case   42:*/		return 0x820B95BC;
		  /* 820B95BCh */ case   43:  		/* stwu R31, <#[R11 + 4]> */
		/* 820B95BCh case   43:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B95BCh case   43:*/		return 0x820B95C0;
		  /* 820B95C0h */ case   44:  		/* bc 16, CR0_LT, -4 */
		/* 820B95C0h case   44:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B95BC;  }
		/* 820B95C0h case   44:*/		return 0x820B95C4;
	}
	return 0x820B95C4;
} // Block from 820B9510h-820B95C4h (45 instructions)

//////////////////////////////////////////////////////
// Block at 820B95C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B95C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B95C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B95C4);
		  /* 820B95C4h */ case    0:  		/* lwz R28, <#[R1 + 132]> */
		/* 820B95C4h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 820B95C4h case    0:*/		return 0x820B95C8;
		  /* 820B95C8h */ case    1:  		/* li R29, -1 */
		/* 820B95C8h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B95C8h case    1:*/		return 0x820B95CC;
		  /* 820B95CCh */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820B95CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B95CCh case    2:*/		return 0x820B95D0;
		  /* 820B95D0h */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 820B95D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x820B9610;  }
		/* 820B95D0h case    3:*/		return 0x820B95D4;
		  /* 820B95D4h */ case    4:  		/* addi R11, R28, -4 */
		/* 820B95D4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B95D4h case    4:*/		return 0x820B95D8;
		  /* 820B95D8h */ case    5:  		/* mr R10, R29 */
		/* 820B95D8h case    5:*/		regs.R10 = regs.R29;
		/* 820B95D8h case    5:*/		return 0x820B95DC;
		  /* 820B95DCh */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820B95DCh case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B95DCh case    6:*/		return 0x820B95E0;
		  /* 820B95E0h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820B95E0h case    7:*/		if ( regs.CR[0].eq ) { return 0x820B95F0;  }
		/* 820B95E0h case    7:*/		return 0x820B95E4;
		  /* 820B95E4h */ case    8:  		/* mtspr CTR, R30 */
		/* 820B95E4h case    8:*/		regs.CTR = regs.R30;
		/* 820B95E4h case    8:*/		return 0x820B95E8;
		  /* 820B95E8h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B95E8h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B95E8h case    9:*/		return 0x820B95EC;
		  /* 820B95ECh */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820B95ECh case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B95E8;  }
		/* 820B95ECh case   10:*/		return 0x820B95F0;
	}
	return 0x820B95F0;
} // Block from 820B95C4h-820B95F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B95F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B95F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B95F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B95F0);
		  /* 820B95F0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B95F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B95F0h case    0:*/		return 0x820B95F4;
		  /* 820B95F4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B95F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B9610;  }
		/* 820B95F4h case    1:*/		return 0x820B95F8;
		  /* 820B95F8h */ case    2:  		/* addi R11, R15, -4 */
		/* 820B95F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B95F8h case    2:*/		return 0x820B95FC;
		  /* 820B95FCh */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B95FCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B95FCh case    3:*/		return 0x820B9600;
		  /* 820B9600h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9600h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B9610;  }
		/* 820B9600h case    4:*/		return 0x820B9604;
		  /* 820B9604h */ case    5:  		/* mtspr CTR, R30 */
		/* 820B9604h case    5:*/		regs.CTR = regs.R30;
		/* 820B9604h case    5:*/		return 0x820B9608;
		  /* 820B9608h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B9608h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9608h case    6:*/		return 0x820B960C;
		  /* 820B960Ch */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B960Ch case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9608;  }
		/* 820B960Ch case    7:*/		return 0x820B9610;
	}
	return 0x820B9610;
} // Block from 820B95F0h-820B9610h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B9610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9610);
		  /* 820B9610h */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820B9610h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820B9610h case    0:*/		return 0x820B9614;
		  /* 820B9614h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B9614h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B9614h case    1:*/		return 0x820B9618;
		  /* 820B9618h */ case    2:  		/* li R9, 0 */
		/* 820B9618h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9618h case    2:*/		return 0x820B961C;
		  /* 820B961Ch */ case    3:  		/* mr R6, R28 */
		/* 820B961Ch case    3:*/		regs.R6 = regs.R28;
		/* 820B961Ch case    3:*/		return 0x820B9620;
		  /* 820B9620h */ case    4:  		/* oris R5, R30, 8272 */
		/* 820B9620h case    4:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2050);
		/* 820B9620h case    4:*/		return 0x820B9624;
		  /* 820B9624h */ case    5:  		/* mr R4, R16 */
		/* 820B9624h case    5:*/		regs.R4 = regs.R16;
		/* 820B9624h case    5:*/		return 0x820B9628;
		  /* 820B9628h */ case    6:  		/* mr R3, R14 */
		/* 820B9628h case    6:*/		regs.R3 = regs.R14;
		/* 820B9628h case    6:*/		return 0x820B962C;
		  /* 820B962Ch */ case    7:  		/* bl -35620 */
		/* 820B962Ch case    7:*/		regs.LR = 0x820B9630; return 0x820B0B08;
		/* 820B962Ch case    7:*/		return 0x820B9630;
		  /* 820B9630h */ case    8:  		/* or. R31, R3, R3 */
		/* 820B9630h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9630h case    8:*/		return 0x820B9634;
		  /* 820B9634h */ case    9:  		/* bc 12, CR0_LT, 19876 */
		/* 820B9634h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9634h case    9:*/		return 0x820B9638;
		  /* 820B9638h */ case   10:  		/* li R9, 4 */
		/* 820B9638h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9638h case   10:*/		return 0x820B963C;
		  /* 820B963Ch */ case   11:  		/* li R8, 0 */
		/* 820B963Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B963Ch case   11:*/		return 0x820B9640;
		  /* 820B9640h */ case   12:  		/* mr R7, R28 */
		/* 820B9640h case   12:*/		regs.R7 = regs.R28;
		/* 820B9640h case   12:*/		return 0x820B9644;
		  /* 820B9644h */ case   13:  		/* oris R5, R30, 4176 */
		/* 820B9644h case   13:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1050);
		/* 820B9644h case   13:*/		return 0x820B9648;
		  /* 820B9648h */ case   14:  		/* b 16616 */
		/* 820B9648h case   14:*/		return 0x820BD730;
		/* 820B9648h case   14:*/		return 0x820B964C;
		  /* 820B964Ch */ case   15:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B964Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B964Ch case   15:*/		return 0x820B9650;
		  /* 820B9650h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 820B9650h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9650h case   16:*/		return 0x820B9654;
		  /* 820B9654h */ case   17:  		/* bc 12, CR6_EQ, 19836 */
		/* 820B9654h case   17:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9654h case   17:*/		return 0x820B9658;
		  /* 820B9658h */ case   18:  		/* cmplwi CR6, R15, 0 */
		/* 820B9658h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B9658h case   18:*/		return 0x820B965C;
		  /* 820B965Ch */ case   19:  		/* bc 12, CR6_EQ, -3216 */
		/* 820B965Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B965Ch case   19:*/		return 0x820B9660;
		  /* 820B9660h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820B9660h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9660h case   20:*/		return 0x820B9664;
		  /* 820B9664h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9664h case   21:*/		if ( regs.CR[6].eq ) { return 0x820B9684;  }
		/* 820B9664h case   21:*/		return 0x820B9668;
		  /* 820B9668h */ case   22:  		/* addi R11, R15, -4 */
		/* 820B9668h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B9668h case   22:*/		return 0x820B966C;
		  /* 820B966Ch */ case   23:  		/* li R10, -1 */
		/* 820B966Ch case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B966Ch case   23:*/		return 0x820B9670;
		  /* 820B9670h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820B9670h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9670h case   24:*/		return 0x820B9674;
		  /* 820B9674h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9674h case   25:*/		if ( regs.CR[0].eq ) { return 0x820B9684;  }
		/* 820B9674h case   25:*/		return 0x820B9678;
		  /* 820B9678h */ case   26:  		/* mtspr CTR, R30 */
		/* 820B9678h case   26:*/		regs.CTR = regs.R30;
		/* 820B9678h case   26:*/		return 0x820B967C;
		  /* 820B967Ch */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B967Ch case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B967Ch case   27:*/		return 0x820B9680;
		  /* 820B9680h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820B9680h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B967C;  }
		/* 820B9680h case   28:*/		return 0x820B9684;
	}
	return 0x820B9684;
} // Block from 820B9610h-820B9684h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820B9684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9684);
		  /* 820B9684h */ case    0:  		/* li R11, 261 */
		/* 820B9684h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x105);
		/* 820B9684h case    0:*/		return 0x820B9688;
		  /* 820B9688h */ case    1:  		/* li R9, 4 */
		/* 820B9688h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9688h case    1:*/		return 0x820B968C;
		  /* 820B968Ch */ case    2:  		/* b -3568 */
		/* 820B968Ch case    2:*/		return 0x820B889C;
		/* 820B968Ch case    2:*/		return 0x820B9690;
		  /* 820B9690h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9690h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9690h case    3:*/		return 0x820B9694;
		  /* 820B9694h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820B9694h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9694h case    4:*/		return 0x820B9698;
		  /* 820B9698h */ case    5:  		/* bc 12, CR6_EQ, 19768 */
		/* 820B9698h case    5:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9698h case    5:*/		return 0x820B969C;
		  /* 820B969Ch */ case    6:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B969Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B969Ch case    6:*/		return 0x820B96A0;
		  /* 820B96A0h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820B96A0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B96A0h case    7:*/		return 0x820B96A4;
		  /* 820B96A4h */ case    8:  		/* bc 12, CR6_EQ, 19756 */
		/* 820B96A4h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B96A4h case    8:*/		return 0x820B96A8;
		  /* 820B96A8h */ case    9:  		/* lwz R11, <#[R1 + 136]> */
		/* 820B96A8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820B96A8h case    9:*/		return 0x820B96AC;
		  /* 820B96ACh */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820B96ACh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B96ACh case   10:*/		return 0x820B96B0;
		  /* 820B96B0h */ case   11:  		/* bc 12, CR6_EQ, 19744 */
		/* 820B96B0h case   11:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B96B0h case   11:*/		return 0x820B96B4;
		  /* 820B96B4h */ case   12:  		/* cmplwi CR6, R15, 0 */
		/* 820B96B4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B96B4h case   12:*/		return 0x820B96B8;
		  /* 820B96B8h */ case   13:  		/* bc 12, CR6_EQ, -3308 */
		/* 820B96B8h case   13:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B96B8h case   13:*/		return 0x820B96BC;
		  /* 820B96BCh */ case   14:  		/* li R29, -1 */
		/* 820B96BCh case   14:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B96BCh case   14:*/		return 0x820B96C0;
		  /* 820B96C0h */ case   15:  		/* lwz R8, <#[R1 + 152]> */
		/* 820B96C0h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000098) );
		/* 820B96C0h case   15:*/		return 0x820B96C4;
		  /* 820B96C4h */ case   16:  		/* rlwinm R25, R30, 0, 12, 31 */
		/* 820B96C4h case   16:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R25,regs.R30);
		/* 820B96C4h case   16:*/		return 0x820B96C8;
		  /* 820B96C8h */ case   17:  		/* lwz R7, <#[R1 + 148]> */
		/* 820B96C8h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820B96C8h case   17:*/		return 0x820B96CC;
		  /* 820B96CCh */ case   18:  		/* stw R29, <#[R1 + 340]> */
		/* 820B96CCh case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000154) );
		/* 820B96CCh case   18:*/		return 0x820B96D0;
		  /* 820B96D0h */ case   19:  		/* li R9, 0 */
		/* 820B96D0h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B96D0h case   19:*/		return 0x820B96D4;
		  /* 820B96D4h */ case   20:  		/* stw R29, <#[R1 + 368]> */
		/* 820B96D4h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000170) );
		/* 820B96D4h case   20:*/		return 0x820B96D8;
		  /* 820B96D8h */ case   21:  		/* addi R6, R1, 340 */
		/* 820B96D8h case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x154);
		/* 820B96D8h case   21:*/		return 0x820B96DC;
		  /* 820B96DCh */ case   22:  		/* oris R5, R25, 20480 */
		/* 820B96DCh case   22:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x5000);
		/* 820B96DCh case   22:*/		return 0x820B96E0;
		  /* 820B96E0h */ case   23:  		/* mr R4, R16 */
		/* 820B96E0h case   23:*/		regs.R4 = regs.R16;
		/* 820B96E0h case   23:*/		return 0x820B96E4;
		  /* 820B96E4h */ case   24:  		/* mr R3, R14 */
		/* 820B96E4h case   24:*/		regs.R3 = regs.R14;
		/* 820B96E4h case   24:*/		return 0x820B96E8;
		  /* 820B96E8h */ case   25:  		/* bl -35808 */
		/* 820B96E8h case   25:*/		regs.LR = 0x820B96EC; return 0x820B0B08;
		/* 820B96E8h case   25:*/		return 0x820B96EC;
		  /* 820B96ECh */ case   26:  		/* or. R31, R3, R3 */
		/* 820B96ECh case   26:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B96ECh case   26:*/		return 0x820B96F0;
		  /* 820B96F0h */ case   27:  		/* bc 12, CR0_LT, 19688 */
		/* 820B96F0h case   27:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B96F0h case   27:*/		return 0x820B96F4;
		  /* 820B96F4h */ case   28:  		/* lis R5, 8240 */
		/* 820B96F4h case   28:*/		cpu::op::lis<0>(regs,&regs.R5,0x2030);
		/* 820B96F4h case   28:*/		return 0x820B96F8;
		  /* 820B96F8h */ case   29:  		/* li R9, 23 */
		/* 820B96F8h case   29:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B96F8h case   29:*/		return 0x820B96FC;
		  /* 820B96FCh */ case   30:  		/* addi R8, R14, 36 */
		/* 820B96FCh case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R14,0x24);
		/* 820B96FCh case   30:*/		return 0x820B9700;
		  /* 820B9700h */ case   31:  		/* addi R7, R1, 340 */
		/* 820B9700h case   31:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x154);
		/* 820B9700h case   31:*/		return 0x820B9704;
		  /* 820B9704h */ case   32:  		/* addi R6, R1, 368 */
		/* 820B9704h case   32:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x170);
		/* 820B9704h case   32:*/		return 0x820B9708;
		  /* 820B9708h */ case   33:  		/* ori R5, R5, 1 */
		/* 820B9708h case   33:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820B9708h case   33:*/		return 0x820B970C;
		  /* 820B970Ch */ case   34:  		/* mr R4, R16 */
		/* 820B970Ch case   34:*/		regs.R4 = regs.R16;
		/* 820B970Ch case   34:*/		return 0x820B9710;
		  /* 820B9710h */ case   35:  		/* mr R3, R14 */
		/* 820B9710h case   35:*/		regs.R3 = regs.R14;
		/* 820B9710h case   35:*/		return 0x820B9714;
		  /* 820B9714h */ case   36:  		/* bl -35852 */
		/* 820B9714h case   36:*/		regs.LR = 0x820B9718; return 0x820B0B08;
		/* 820B9714h case   36:*/		return 0x820B9718;
		  /* 820B9718h */ case   37:  		/* or. R31, R3, R3 */
		/* 820B9718h case   37:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9718h case   37:*/		return 0x820B971C;
		  /* 820B971Ch */ case   38:  		/* bc 12, CR0_LT, 19644 */
		/* 820B971Ch case   38:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B971Ch case   38:*/		return 0x820B9720;
		  /* 820B9720h */ case   39:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820B9720h case   39:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820B9720h case   39:*/		return 0x820B9724;
		  /* 820B9724h */ case   40:  		/* mr R3, R14 */
		/* 820B9724h case   40:*/		regs.R3 = regs.R14;
		/* 820B9724h case   40:*/		return 0x820B9728;
		  /* 820B9728h */ case   41:  		/* mr R4, R31 */
		/* 820B9728h case   41:*/		regs.R4 = regs.R31;
		/* 820B9728h case   41:*/		return 0x820B972C;
		  /* 820B972Ch */ case   42:  		/* bl -36924 */
		/* 820B972Ch case   42:*/		regs.LR = 0x820B9730; return 0x820B06F0;
		/* 820B972Ch case   42:*/		return 0x820B9730;
		  /* 820B9730h */ case   43:  		/* or. R11, R3, R3 */
		/* 820B9730h case   43:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820B9730h case   43:*/		return 0x820B9734;
		  /* 820B9734h */ case   44:  		/* bc 12, CR0_EQ, 15596 */
		/* 820B9734h case   44:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B9734h case   44:*/		return 0x820B9738;
		  /* 820B9738h */ case   45:  		/* li R9, 4 */
		/* 820B9738h case   45:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9738h case   45:*/		return 0x820B973C;
		  /* 820B973Ch */ case   46:  		/* addi R10, R1, 156 */
		/* 820B973Ch case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820B973Ch case   46:*/		return 0x820B9740;
		  /* 820B9740h */ case   47:  		/* mtspr CTR, R9 */
		/* 820B9740h case   47:*/		regs.CTR = regs.R9;
		/* 820B9740h case   47:*/		return 0x820B9744;
		  /* 820B9744h */ case   48:  		/* stwu R11, <#[R10 + 4]> */
		/* 820B9744h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B9744h case   48:*/		return 0x820B9748;
		  /* 820B9748h */ case   49:  		/* add R11, R31, R11 */
		/* 820B9748h case   49:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 820B9748h case   49:*/		return 0x820B974C;
		  /* 820B974Ch */ case   50:  		/* bc 16, CR0_LT, -8 */
		/* 820B974Ch case   50:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9744;  }
		/* 820B974Ch case   50:*/		return 0x820B9750;
		  /* 820B9750h */ case   51:  		/* lwz R24, <#[R1 + 172]> */
		/* 820B9750h case   51:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B9750h case   51:*/		return 0x820B9754;
		  /* 820B9754h */ case   52:  		/* cmplwi CR6, R30, 0 */
		/* 820B9754h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9754h case   52:*/		return 0x820B9758;
		  /* 820B9758h */ case   53:  		/* bc 12, CR6_EQ, 24 */
		/* 820B9758h case   53:*/		if ( regs.CR[6].eq ) { return 0x820B9770;  }
		/* 820B9758h case   53:*/		return 0x820B975C;
		  /* 820B975Ch */ case   54:  		/* addi R11, R24, -4 */
		/* 820B975Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820B975Ch case   54:*/		return 0x820B9760;
		  /* 820B9760h */ case   55:  		/* mtspr CTR, R30 */
		/* 820B9760h case   55:*/		regs.CTR = regs.R30;
		/* 820B9760h case   55:*/		return 0x820B9764;
		  /* 820B9764h */ case   56:  		/* lwz R10, <#[R1 + 368]> */
		/* 820B9764h case   56:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000170) );
		/* 820B9764h case   56:*/		return 0x820B9768;
		  /* 820B9768h */ case   57:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9768h case   57:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9768h case   57:*/		return 0x820B976C;
		  /* 820B976Ch */ case   58:  		/* bc 16, CR0_LT, -8 */
		/* 820B976Ch case   58:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9764;  }
		/* 820B976Ch case   58:*/		return 0x820B9770;
	}
	return 0x820B9770;
} // Block from 820B9684h-820B9770h (59 instructions)

//////////////////////////////////////////////////////
// Block at 820B9770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9770);
		  /* 820B9770h */ case    0:  		/* lwz R27, <#[R1 + 160]> */
		/* 820B9770h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B9770h case    0:*/		return 0x820B9774;
		  /* 820B9774h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9774h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9774h case    1:*/		return 0x820B9778;
		  /* 820B9778h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9778h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9798;  }
		/* 820B9778h case    2:*/		return 0x820B977C;
		  /* 820B977Ch */ case    3:  		/* addi R11, R27, -4 */
		/* 820B977Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B977Ch case    3:*/		return 0x820B9780;
		  /* 820B9780h */ case    4:  		/* mr R10, R29 */
		/* 820B9780h case    4:*/		regs.R10 = regs.R29;
		/* 820B9780h case    4:*/		return 0x820B9784;
		  /* 820B9784h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9784h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9784h case    5:*/		return 0x820B9788;
		  /* 820B9788h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9788h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9798;  }
		/* 820B9788h case    6:*/		return 0x820B978C;
		  /* 820B978Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820B978Ch case    7:*/		regs.CTR = regs.R30;
		/* 820B978Ch case    7:*/		return 0x820B9790;
		  /* 820B9790h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9790h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9790h case    8:*/		return 0x820B9794;
		  /* 820B9794h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9794h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9790;  }
		/* 820B9794h case    9:*/		return 0x820B9798;
	}
	return 0x820B9798;
} // Block from 820B9770h-820B9798h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9798);
		  /* 820B9798h */ case    0:  		/* lwz R26, <#[R1 + 164]> */
		/* 820B9798h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B9798h case    0:*/		return 0x820B979C;
		  /* 820B979Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B979Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B979Ch case    1:*/		return 0x820B97A0;
		  /* 820B97A0h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B97A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B97C0;  }
		/* 820B97A0h case    2:*/		return 0x820B97A4;
		  /* 820B97A4h */ case    3:  		/* addi R11, R26, -4 */
		/* 820B97A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820B97A4h case    3:*/		return 0x820B97A8;
		  /* 820B97A8h */ case    4:  		/* mr R10, R29 */
		/* 820B97A8h case    4:*/		regs.R10 = regs.R29;
		/* 820B97A8h case    4:*/		return 0x820B97AC;
		  /* 820B97ACh */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B97ACh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B97ACh case    5:*/		return 0x820B97B0;
		  /* 820B97B0h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B97B0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B97C0;  }
		/* 820B97B0h case    6:*/		return 0x820B97B4;
		  /* 820B97B4h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B97B4h case    7:*/		regs.CTR = regs.R30;
		/* 820B97B4h case    7:*/		return 0x820B97B8;
		  /* 820B97B8h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B97B8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B97B8h case    8:*/		return 0x820B97BC;
		  /* 820B97BCh */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B97BCh case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B97B8;  }
		/* 820B97BCh case    9:*/		return 0x820B97C0;
	}
	return 0x820B97C0;
} // Block from 820B9798h-820B97C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B97C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B97C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B97C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B97C0);
		  /* 820B97C0h */ case    0:  		/* lwz R28, <#[R1 + 168]> */
		/* 820B97C0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B97C0h case    0:*/		return 0x820B97C4;
		  /* 820B97C4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B97C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B97C4h case    1:*/		return 0x820B97C8;
		  /* 820B97C8h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820B97C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9808;  }
		/* 820B97C8h case    2:*/		return 0x820B97CC;
		  /* 820B97CCh */ case    3:  		/* addi R11, R28, -4 */
		/* 820B97CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B97CCh case    3:*/		return 0x820B97D0;
		  /* 820B97D0h */ case    4:  		/* mr R10, R29 */
		/* 820B97D0h case    4:*/		regs.R10 = regs.R29;
		/* 820B97D0h case    4:*/		return 0x820B97D4;
		  /* 820B97D4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B97D4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B97D4h case    5:*/		return 0x820B97D8;
		  /* 820B97D8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B97D8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B97E8;  }
		/* 820B97D8h case    6:*/		return 0x820B97DC;
		  /* 820B97DCh */ case    7:  		/* mtspr CTR, R30 */
		/* 820B97DCh case    7:*/		regs.CTR = regs.R30;
		/* 820B97DCh case    7:*/		return 0x820B97E0;
		  /* 820B97E0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B97E0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B97E0h case    8:*/		return 0x820B97E4;
		  /* 820B97E4h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B97E4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B97E0;  }
		/* 820B97E4h case    9:*/		return 0x820B97E8;
	}
	return 0x820B97E8;
} // Block from 820B97C0h-820B97E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B97E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B97E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B97E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B97E8);
		  /* 820B97E8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B97E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B97E8h case    0:*/		return 0x820B97EC;
		  /* 820B97ECh */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B97ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x820B9808;  }
		/* 820B97ECh case    1:*/		return 0x820B97F0;
		  /* 820B97F0h */ case    2:  		/* addi R11, R15, -4 */
		/* 820B97F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B97F0h case    2:*/		return 0x820B97F4;
		  /* 820B97F4h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B97F4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B97F4h case    3:*/		return 0x820B97F8;
		  /* 820B97F8h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B97F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B9808;  }
		/* 820B97F8h case    4:*/		return 0x820B97FC;
		  /* 820B97FCh */ case    5:  		/* mtspr CTR, R30 */
		/* 820B97FCh case    5:*/		regs.CTR = regs.R30;
		/* 820B97FCh case    5:*/		return 0x820B9800;
		  /* 820B9800h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B9800h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9800h case    6:*/		return 0x820B9804;
		  /* 820B9804h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B9804h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9800;  }
		/* 820B9804h case    7:*/		return 0x820B9808;
	}
	return 0x820B9808;
} // Block from 820B97E8h-820B9808h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B9808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9808);
		  /* 820B9808h */ case    0:  		/* lwz R29, <#[R1 + 144]> */
		/* 820B9808h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 820B9808h case    0:*/		return 0x820B980C;
		  /* 820B980Ch */ case    1:  		/* li R9, 0 */
		/* 820B980Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B980Ch case    1:*/		return 0x820B9810;
		  /* 820B9810h */ case    2:  		/* li R8, 0 */
		/* 820B9810h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9810h case    2:*/		return 0x820B9814;
		  /* 820B9814h */ case    3:  		/* mr R7, R29 */
		/* 820B9814h case    3:*/		regs.R7 = regs.R29;
		/* 820B9814h case    3:*/		return 0x820B9818;
		  /* 820B9818h */ case    4:  		/* mr R6, R27 */
		/* 820B9818h case    4:*/		regs.R6 = regs.R27;
		/* 820B9818h case    4:*/		return 0x820B981C;
		  /* 820B981Ch */ case    5:  		/* oris R5, R25, 4112 */
		/* 820B981Ch case    5:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x1010);
		/* 820B981Ch case    5:*/		return 0x820B9820;
		  /* 820B9820h */ case    6:  		/* mr R4, R16 */
		/* 820B9820h case    6:*/		regs.R4 = regs.R16;
		/* 820B9820h case    6:*/		return 0x820B9824;
		  /* 820B9824h */ case    7:  		/* mr R3, R14 */
		/* 820B9824h case    7:*/		regs.R3 = regs.R14;
		/* 820B9824h case    7:*/		return 0x820B9828;
		  /* 820B9828h */ case    8:  		/* bl -36128 */
		/* 820B9828h case    8:*/		regs.LR = 0x820B982C; return 0x820B0B08;
		/* 820B9828h case    8:*/		return 0x820B982C;
		  /* 820B982Ch */ case    9:  		/* or. R31, R3, R3 */
		/* 820B982Ch case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B982Ch case    9:*/		return 0x820B9830;
		  /* 820B9830h */ case   10:  		/* bc 12, CR0_LT, 19368 */
		/* 820B9830h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9830h case   10:*/		return 0x820B9834;
		  /* 820B9834h */ case   11:  		/* oris R30, R25, 8256 */
		/* 820B9834h case   11:*/		cpu::op::oris<0>(regs,&regs.R30,regs.R25,0x2040);
		/* 820B9834h case   11:*/		return 0x820B9838;
		  /* 820B9838h */ case   12:  		/* li R9, 0 */
		/* 820B9838h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9838h case   12:*/		return 0x820B983C;
		  /* 820B983Ch */ case   13:  		/* mr R8, R27 */
		/* 820B983Ch case   13:*/		regs.R8 = regs.R27;
		/* 820B983Ch case   13:*/		return 0x820B9840;
		  /* 820B9840h */ case   14:  		/* mr R7, R27 */
		/* 820B9840h case   14:*/		regs.R7 = regs.R27;
		/* 820B9840h case   14:*/		return 0x820B9844;
		  /* 820B9844h */ case   15:  		/* mr R6, R26 */
		/* 820B9844h case   15:*/		regs.R6 = regs.R26;
		/* 820B9844h case   15:*/		return 0x820B9848;
		  /* 820B9848h */ case   16:  		/* mr R5, R30 */
		/* 820B9848h case   16:*/		regs.R5 = regs.R30;
		/* 820B9848h case   16:*/		return 0x820B984C;
		  /* 820B984Ch */ case   17:  		/* mr R4, R16 */
		/* 820B984Ch case   17:*/		regs.R4 = regs.R16;
		/* 820B984Ch case   17:*/		return 0x820B9850;
		  /* 820B9850h */ case   18:  		/* mr R3, R14 */
		/* 820B9850h case   18:*/		regs.R3 = regs.R14;
		/* 820B9850h case   18:*/		return 0x820B9854;
		  /* 820B9854h */ case   19:  		/* bl -36172 */
		/* 820B9854h case   19:*/		regs.LR = 0x820B9858; return 0x820B0B08;
		/* 820B9854h case   19:*/		return 0x820B9858;
		  /* 820B9858h */ case   20:  		/* or. R31, R3, R3 */
		/* 820B9858h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9858h case   20:*/		return 0x820B985C;
		  /* 820B985Ch */ case   21:  		/* bc 12, CR0_LT, 19324 */
		/* 820B985Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B985Ch case   21:*/		return 0x820B9860;
		  /* 820B9860h */ case   22:  		/* li R9, 0 */
		/* 820B9860h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9860h case   22:*/		return 0x820B9864;
		  /* 820B9864h */ case   23:  		/* mr R8, R24 */
		/* 820B9864h case   23:*/		regs.R8 = regs.R24;
		/* 820B9864h case   23:*/		return 0x820B9868;
		  /* 820B9868h */ case   24:  		/* mr R7, R26 */
		/* 820B9868h case   24:*/		regs.R7 = regs.R26;
		/* 820B9868h case   24:*/		return 0x820B986C;
		  /* 820B986Ch */ case   25:  		/* mr R6, R28 */
		/* 820B986Ch case   25:*/		regs.R6 = regs.R28;
		/* 820B986Ch case   25:*/		return 0x820B9870;
		  /* 820B9870h */ case   26:  		/* oris R5, R25, 8272 */
		/* 820B9870h case   26:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R25,0x2050);
		/* 820B9870h case   26:*/		return 0x820B9874;
		  /* 820B9874h */ case   27:  		/* mr R4, R16 */
		/* 820B9874h case   27:*/		regs.R4 = regs.R16;
		/* 820B9874h case   27:*/		return 0x820B9878;
		  /* 820B9878h */ case   28:  		/* mr R3, R14 */
		/* 820B9878h case   28:*/		regs.R3 = regs.R14;
		/* 820B9878h case   28:*/		return 0x820B987C;
		  /* 820B987Ch */ case   29:  		/* bl -36212 */
		/* 820B987Ch case   29:*/		regs.LR = 0x820B9880; return 0x820B0B08;
		/* 820B987Ch case   29:*/		return 0x820B9880;
		  /* 820B9880h */ case   30:  		/* or. R31, R3, R3 */
		/* 820B9880h case   30:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9880h case   30:*/		return 0x820B9884;
		  /* 820B9884h */ case   31:  		/* bc 12, CR0_LT, 19284 */
		/* 820B9884h case   31:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9884h case   31:*/		return 0x820B9888;
		  /* 820B9888h */ case   32:  		/* mr R8, R28 */
		/* 820B9888h case   32:*/		regs.R8 = regs.R28;
		/* 820B9888h case   32:*/		return 0x820B988C;
		  /* 820B988Ch */ case   33:  		/* mr R7, R29 */
		/* 820B988Ch case   33:*/		regs.R7 = regs.R29;
		/* 820B988Ch case   33:*/		return 0x820B9890;
		  /* 820B9890h */ case   34:  		/* mr R5, R30 */
		/* 820B9890h case   34:*/		regs.R5 = regs.R30;
		/* 820B9890h case   34:*/		return 0x820B9894;
		  /* 820B9894h */ case   35:  		/* b 16024 */
		/* 820B9894h case   35:*/		return 0x820BD72C;
		/* 820B9894h case   35:*/		return 0x820B9898;
		  /* 820B9898h */ case   36:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9898h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9898h case   36:*/		return 0x820B989C;
		  /* 820B989Ch */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 820B989Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B989Ch case   37:*/		return 0x820B98A0;
		  /* 820B98A0h */ case   38:  		/* bc 12, CR6_EQ, 19248 */
		/* 820B98A0h case   38:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B98A0h case   38:*/		return 0x820B98A4;
		  /* 820B98A4h */ case   39:  		/* cmplwi CR6, R15, 0 */
		/* 820B98A4h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B98A4h case   39:*/		return 0x820B98A8;
		  /* 820B98A8h */ case   40:  		/* bc 12, CR6_EQ, -3804 */
		/* 820B98A8h case   40:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B98A8h case   40:*/		return 0x820B98AC;
		  /* 820B98ACh */ case   41:  		/* rlwinm R4, R30, 1, 0, 30 */
		/* 820B98ACh case   41:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R30);
		/* 820B98ACh case   41:*/		return 0x820B98B0;
		  /* 820B98B0h */ case   42:  		/* mr R3, R14 */
		/* 820B98B0h case   42:*/		regs.R3 = regs.R14;
		/* 820B98B0h case   42:*/		return 0x820B98B4;
		  /* 820B98B4h */ case   43:  		/* bl -37316 */
		/* 820B98B4h case   43:*/		regs.LR = 0x820B98B8; return 0x820B06F0;
		/* 820B98B4h case   43:*/		return 0x820B98B8;
		  /* 820B98B8h */ case   44:  		/* or. R28, R3, R3 */
		/* 820B98B8h case   44:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820B98B8h case   44:*/		return 0x820B98BC;
		  /* 820B98BCh */ case   45:  		/* bc 12, CR0_EQ, 15204 */
		/* 820B98BCh case   45:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B98BCh case   45:*/		return 0x820B98C0;
		  /* 820B98C0h */ case   46:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 820B98C0h case   46:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 820B98C0h case   46:*/		return 0x820B98C4;
		  /* 820B98C4h */ case   47:  		/* li R29, -1 */
		/* 820B98C4h case   47:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B98C4h case   47:*/		return 0x820B98C8;
		  /* 820B98C8h */ case   48:  		/* cmplwi CR6, R30, 0 */
		/* 820B98C8h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B98C8h case   48:*/		return 0x820B98CC;
		  /* 820B98CCh */ case   49:  		/* add R27, R11, R28 */
		/* 820B98CCh case   49:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R28);
		/* 820B98CCh case   49:*/		return 0x820B98D0;
		  /* 820B98D0h */ case   50:  		/* bc 12, CR6_EQ, 100 */
		/* 820B98D0h case   50:*/		if ( regs.CR[6].eq ) { return 0x820B9934;  }
		/* 820B98D0h case   50:*/		return 0x820B98D4;
		  /* 820B98D4h */ case   51:  		/* addi R11, R28, -4 */
		/* 820B98D4h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820B98D4h case   51:*/		return 0x820B98D8;
		  /* 820B98D8h */ case   52:  		/* mr R10, R29 */
		/* 820B98D8h case   52:*/		regs.R10 = regs.R29;
		/* 820B98D8h case   52:*/		return 0x820B98DC;
		  /* 820B98DCh */ case   53:  		/* cmplwi CR0, R30, 0 */
		/* 820B98DCh case   53:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B98DCh case   53:*/		return 0x820B98E0;
		  /* 820B98E0h */ case   54:  		/* bc 12, CR0_EQ, 16 */
		/* 820B98E0h case   54:*/		if ( regs.CR[0].eq ) { return 0x820B98F0;  }
		/* 820B98E0h case   54:*/		return 0x820B98E4;
		  /* 820B98E4h */ case   55:  		/* mtspr CTR, R30 */
		/* 820B98E4h case   55:*/		regs.CTR = regs.R30;
		/* 820B98E4h case   55:*/		return 0x820B98E8;
		  /* 820B98E8h */ case   56:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B98E8h case   56:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B98E8h case   56:*/		return 0x820B98EC;
		  /* 820B98ECh */ case   57:  		/* bc 16, CR0_LT, -4 */
		/* 820B98ECh case   57:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B98E8;  }
		/* 820B98ECh case   57:*/		return 0x820B98F0;
	}
	return 0x820B98F0;
} // Block from 820B9808h-820B98F0h (58 instructions)

//////////////////////////////////////////////////////
// Block at 820B98F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B98F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B98F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B98F0);
		  /* 820B98F0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B98F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B98F0h case    0:*/		return 0x820B98F4;
		  /* 820B98F4h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 820B98F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B9934;  }
		/* 820B98F4h case    1:*/		return 0x820B98F8;
		  /* 820B98F8h */ case    2:  		/* addi R11, R27, -4 */
		/* 820B98F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B98F8h case    2:*/		return 0x820B98FC;
		  /* 820B98FCh */ case    3:  		/* mr R10, R29 */
		/* 820B98FCh case    3:*/		regs.R10 = regs.R29;
		/* 820B98FCh case    3:*/		return 0x820B9900;
		  /* 820B9900h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820B9900h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9900h case    4:*/		return 0x820B9904;
		  /* 820B9904h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9904h case    5:*/		if ( regs.CR[0].eq ) { return 0x820B9914;  }
		/* 820B9904h case    5:*/		return 0x820B9908;
		  /* 820B9908h */ case    6:  		/* mtspr CTR, R30 */
		/* 820B9908h case    6:*/		regs.CTR = regs.R30;
		/* 820B9908h case    6:*/		return 0x820B990C;
		  /* 820B990Ch */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B990Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B990Ch case    7:*/		return 0x820B9910;
		  /* 820B9910h */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820B9910h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B990C;  }
		/* 820B9910h case    8:*/		return 0x820B9914;
	}
	return 0x820B9914;
} // Block from 820B98F0h-820B9914h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B9914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9914);
		  /* 820B9914h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B9914h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9914h case    0:*/		return 0x820B9918;
		  /* 820B9918h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B9918h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B9934;  }
		/* 820B9918h case    1:*/		return 0x820B991C;
		  /* 820B991Ch */ case    2:  		/* addi R11, R15, -4 */
		/* 820B991Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B991Ch case    2:*/		return 0x820B9920;
		  /* 820B9920h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B9920h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9920h case    3:*/		return 0x820B9924;
		  /* 820B9924h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9924h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B9934;  }
		/* 820B9924h case    4:*/		return 0x820B9928;
		  /* 820B9928h */ case    5:  		/* mtspr CTR, R30 */
		/* 820B9928h case    5:*/		regs.CTR = regs.R30;
		/* 820B9928h case    5:*/		return 0x820B992C;
		  /* 820B992Ch */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B992Ch case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B992Ch case    6:*/		return 0x820B9930;
		  /* 820B9930h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B9930h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B992C;  }
		/* 820B9930h case    7:*/		return 0x820B9934;
	}
	return 0x820B9934;
} // Block from 820B9914h-820B9934h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B9934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9934);
		  /* 820B9934h */ case    0:  		/* lwz R29, <#[R1 + 144]> */
		/* 820B9934h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 820B9934h case    0:*/		return 0x820B9938;
		  /* 820B9938h */ case    1:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820B9938h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820B9938h case    1:*/		return 0x820B993C;
		  /* 820B993Ch */ case    2:  		/* li R9, 20 */
		/* 820B993Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820B993Ch case    2:*/		return 0x820B9940;
		  /* 820B9940h */ case    3:  		/* li R8, 0 */
		/* 820B9940h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9940h case    3:*/		return 0x820B9944;
		  /* 820B9944h */ case    4:  		/* mr R7, R29 */
		/* 820B9944h case    4:*/		regs.R7 = regs.R29;
		/* 820B9944h case    4:*/		return 0x820B9948;
		  /* 820B9948h */ case    5:  		/* mr R6, R28 */
		/* 820B9948h case    5:*/		regs.R6 = regs.R28;
		/* 820B9948h case    5:*/		return 0x820B994C;
		  /* 820B994Ch */ case    6:  		/* oris R5, R30, 4160 */
		/* 820B994Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1040);
		/* 820B994Ch case    6:*/		return 0x820B9950;
		  /* 820B9950h */ case    7:  		/* mr R4, R16 */
		/* 820B9950h case    7:*/		regs.R4 = regs.R16;
		/* 820B9950h case    7:*/		return 0x820B9954;
		  /* 820B9954h */ case    8:  		/* mr R3, R14 */
		/* 820B9954h case    8:*/		regs.R3 = regs.R14;
		/* 820B9954h case    8:*/		return 0x820B9958;
		  /* 820B9958h */ case    9:  		/* bl -36432 */
		/* 820B9958h case    9:*/		regs.LR = 0x820B995C; return 0x820B0B08;
		/* 820B9958h case    9:*/		return 0x820B995C;
		  /* 820B995Ch */ case   10:  		/* or. R31, R3, R3 */
		/* 820B995Ch case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B995Ch case   10:*/		return 0x820B9960;
		  /* 820B9960h */ case   11:  		/* bc 12, CR0_LT, 19064 */
		/* 820B9960h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9960h case   11:*/		return 0x820B9964;
		  /* 820B9964h */ case   12:  		/* li R9, 24 */
		/* 820B9964h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x18);
		/* 820B9964h case   12:*/		return 0x820B9968;
		  /* 820B9968h */ case   13:  		/* oris R5, R30, 4112 */
		/* 820B9968h case   13:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820B9968h case   13:*/		return 0x820B996C;
		  /* 820B996Ch */ case   14:  		/* b -5760 */
		/* 820B996Ch case   14:*/		return 0x820B82EC;
		/* 820B996Ch case   14:*/		return 0x820B9970;
		  /* 820B9970h */ case   15:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9970h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9970h case   15:*/		return 0x820B9974;
		  /* 820B9974h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 820B9974h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9974h case   16:*/		return 0x820B9978;
		  /* 820B9978h */ case   17:  		/* bc 12, CR6_EQ, 19032 */
		/* 820B9978h case   17:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9978h case   17:*/		return 0x820B997C;
		  /* 820B997Ch */ case   18:  		/* lwz R11, <#[R1 + 132]> */
		/* 820B997Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820B997Ch case   18:*/		return 0x820B9980;
		  /* 820B9980h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 820B9980h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9980h case   19:*/		return 0x820B9984;
		  /* 820B9984h */ case   20:  		/* bc 12, CR6_EQ, 19020 */
		/* 820B9984h case   20:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9984h case   20:*/		return 0x820B9988;
		  /* 820B9988h */ case   21:  		/* cmplwi CR6, R15, 0 */
		/* 820B9988h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B9988h case   21:*/		return 0x820B998C;
		  /* 820B998Ch */ case   22:  		/* bc 12, CR6_EQ, -4032 */
		/* 820B998Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B998Ch case   22:*/		return 0x820B9990;
		  /* 820B9990h */ case   23:  		/* rlwinm R4, R30, 3, 0, 28 */
		/* 820B9990h case   23:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R30);
		/* 820B9990h case   23:*/		return 0x820B9994;
		  /* 820B9994h */ case   24:  		/* mr R3, R14 */
		/* 820B9994h case   24:*/		regs.R3 = regs.R14;
		/* 820B9994h case   24:*/		return 0x820B9998;
		  /* 820B9998h */ case   25:  		/* bl -37544 */
		/* 820B9998h case   25:*/		regs.LR = 0x820B999C; return 0x820B06F0;
		/* 820B9998h case   25:*/		return 0x820B999C;
		  /* 820B999Ch */ case   26:  		/* or. R11, R3, R3 */
		/* 820B999Ch case   26:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820B999Ch case   26:*/		return 0x820B99A0;
		  /* 820B99A0h */ case   27:  		/* bc 12, CR0_EQ, 14976 */
		/* 820B99A0h case   27:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B99A0h case   27:*/		return 0x820B99A4;
		  /* 820B99A4h */ case   28:  		/* li R10, 8 */
		/* 820B99A4h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 820B99A4h case   28:*/		return 0x820B99A8;
		  /* 820B99A8h */ case   29:  		/* addi R9, R1, 156 */
		/* 820B99A8h case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x9C);
		/* 820B99A8h case   29:*/		return 0x820B99AC;
		  /* 820B99ACh */ case   30:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820B99ACh case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820B99ACh case   30:*/		return 0x820B99B0;
		  /* 820B99B0h */ case   31:  		/* mtspr CTR, R10 */
		/* 820B99B0h case   31:*/		regs.CTR = regs.R10;
		/* 820B99B0h case   31:*/		return 0x820B99B4;
		  /* 820B99B4h */ case   32:  		/* stwu R11, <#[R9 + 4]> */
		/* 820B99B4h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820B99B4h case   32:*/		return 0x820B99B8;
		  /* 820B99B8h */ case   33:  		/* add R11, R11, R8 */
		/* 820B99B8h case   33:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820B99B8h case   33:*/		return 0x820B99BC;
		  /* 820B99BCh */ case   34:  		/* bc 16, CR0_LT, -8 */
		/* 820B99BCh case   34:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B99B4;  }
		/* 820B99BCh case   34:*/		return 0x820B99C0;
		  /* 820B99C0h */ case   35:  		/* addi R9, R1, 160 */
		/* 820B99C0h case   35:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 820B99C0h case   35:*/		return 0x820B99C4;
		  /* 820B99C4h */ case   36:  		/* li R8, 8 */
		/* 820B99C4h case   36:*/		cpu::op::li<0>(regs,&regs.R8,0x8);
		/* 820B99C4h case   36:*/		return 0x820B99C8;
		  /* 820B99C8h */ case   37:  		/* li R29, -1 */
		/* 820B99C8h case   37:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B99C8h case   37:*/		return 0x820B99CC;
		  /* 820B99CCh */ case   38:  		/* lwz R11, <#[R9]> */
		/* 820B99CCh case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820B99CCh case   38:*/		return 0x820B99D0;
		  /* 820B99D0h */ case   39:  		/* cmplwi CR6, R30, 0 */
		/* 820B99D0h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B99D0h case   39:*/		return 0x820B99D4;
		  /* 820B99D4h */ case   40:  		/* bc 12, CR6_EQ, 32 */
		/* 820B99D4h case   40:*/		if ( regs.CR[6].eq ) { return 0x820B99F4;  }
		/* 820B99D4h case   40:*/		return 0x820B99D8;
		  /* 820B99D8h */ case   41:  		/* addi R11, R11, -4 */
		/* 820B99D8h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 820B99D8h case   41:*/		return 0x820B99DC;
		  /* 820B99DCh */ case   42:  		/* mr R10, R29 */
		/* 820B99DCh case   42:*/		regs.R10 = regs.R29;
		/* 820B99DCh case   42:*/		return 0x820B99E0;
		  /* 820B99E0h */ case   43:  		/* cmplwi CR0, R30, 0 */
		/* 820B99E0h case   43:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B99E0h case   43:*/		return 0x820B99E4;
		  /* 820B99E4h */ case   44:  		/* bc 12, CR0_EQ, 16 */
		/* 820B99E4h case   44:*/		if ( regs.CR[0].eq ) { return 0x820B99F4;  }
		/* 820B99E4h case   44:*/		return 0x820B99E8;
		  /* 820B99E8h */ case   45:  		/* mtspr CTR, R30 */
		/* 820B99E8h case   45:*/		regs.CTR = regs.R30;
		/* 820B99E8h case   45:*/		return 0x820B99EC;
		  /* 820B99ECh */ case   46:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B99ECh case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B99ECh case   46:*/		return 0x820B99F0;
		  /* 820B99F0h */ case   47:  		/* bc 16, CR0_LT, -4 */
		/* 820B99F0h case   47:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B99EC;  }
		/* 820B99F0h case   47:*/		return 0x820B99F4;
	}
	return 0x820B99F4;
} // Block from 820B9934h-820B99F4h (48 instructions)

//////////////////////////////////////////////////////
// Block at 820B99F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B99F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B99F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B99F4);
		  /* 820B99F4h */ case    0:  		/* addic. R8, R8, -1 */
		/* 820B99F4h case    0:*/		cpu::op::addic<1>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 820B99F4h case    0:*/		return 0x820B99F8;
		  /* 820B99F8h */ case    1:  		/* addi R9, R9, 4 */
		/* 820B99F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820B99F8h case    1:*/		return 0x820B99FC;
		  /* 820B99FCh */ case    2:  		/* bc 4, CR0_EQ, -48 */
		/* 820B99FCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x820B99CC;  }
		/* 820B99FCh case    2:*/		return 0x820B9A00;
		  /* 820B9A00h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 820B9A00h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9A00h case    3:*/		return 0x820B9A04;
		  /* 820B9A04h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 820B9A04h case    4:*/		if ( regs.CR[6].eq ) { return 0x820B9A20;  }
		/* 820B9A04h case    4:*/		return 0x820B9A08;
		  /* 820B9A08h */ case    5:  		/* addi R11, R15, -4 */
		/* 820B9A08h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B9A08h case    5:*/		return 0x820B9A0C;
		  /* 820B9A0Ch */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820B9A0Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9A0Ch case    6:*/		return 0x820B9A10;
		  /* 820B9A10h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9A10h case    7:*/		if ( regs.CR[0].eq ) { return 0x820B9A20;  }
		/* 820B9A10h case    7:*/		return 0x820B9A14;
		  /* 820B9A14h */ case    8:  		/* mtspr CTR, R30 */
		/* 820B9A14h case    8:*/		regs.CTR = regs.R30;
		/* 820B9A14h case    8:*/		return 0x820B9A18;
		  /* 820B9A18h */ case    9:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B9A18h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9A18h case    9:*/		return 0x820B9A1C;
		  /* 820B9A1Ch */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820B9A1Ch case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9A18;  }
		/* 820B9A1Ch case   10:*/		return 0x820B9A20;
	}
	return 0x820B9A20;
} // Block from 820B99F4h-820B9A20h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820B9A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9A20);
		  /* 820B9A20h */ case    0:  		/* lwz R22, <#[R1 + 148]> */
		/* 820B9A20h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000094) );
		/* 820B9A20h case    0:*/		return 0x820B9A24;
		  /* 820B9A24h */ case    1:  		/* rlwinm R29, R30, 0, 12, 31 */
		/* 820B9A24h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R30);
		/* 820B9A24h case    1:*/		return 0x820B9A28;
		  /* 820B9A28h */ case    2:  		/* lwz R27, <#[R1 + 160]> */
		/* 820B9A28h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B9A28h case    2:*/		return 0x820B9A2C;
		  /* 820B9A2Ch */ case    3:  		/* li R9, 0 */
		/* 820B9A2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9A2Ch case    3:*/		return 0x820B9A30;
		  /* 820B9A30h */ case    4:  		/* li R8, 0 */
		/* 820B9A30h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9A30h case    4:*/		return 0x820B9A34;
		  /* 820B9A34h */ case    5:  		/* mr R7, R22 */
		/* 820B9A34h case    5:*/		regs.R7 = regs.R22;
		/* 820B9A34h case    5:*/		return 0x820B9A38;
		  /* 820B9A38h */ case    6:  		/* mr R6, R27 */
		/* 820B9A38h case    6:*/		regs.R6 = regs.R27;
		/* 820B9A38h case    6:*/		return 0x820B9A3C;
		  /* 820B9A3Ch */ case    7:  		/* oris R5, R29, 4144 */
		/* 820B9A3Ch case    7:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x1030);
		/* 820B9A3Ch case    7:*/		return 0x820B9A40;
		  /* 820B9A40h */ case    8:  		/* mr R4, R16 */
		/* 820B9A40h case    8:*/		regs.R4 = regs.R16;
		/* 820B9A40h case    8:*/		return 0x820B9A44;
		  /* 820B9A44h */ case    9:  		/* mr R3, R14 */
		/* 820B9A44h case    9:*/		regs.R3 = regs.R14;
		/* 820B9A44h case    9:*/		return 0x820B9A48;
		  /* 820B9A48h */ case   10:  		/* bl -36672 */
		/* 820B9A48h case   10:*/		regs.LR = 0x820B9A4C; return 0x820B0B08;
		/* 820B9A48h case   10:*/		return 0x820B9A4C;
		  /* 820B9A4Ch */ case   11:  		/* or. R31, R3, R3 */
		/* 820B9A4Ch case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9A4Ch case   11:*/		return 0x820B9A50;
		  /* 820B9A50h */ case   12:  		/* bc 12, CR0_LT, 18824 */
		/* 820B9A50h case   12:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9A50h case   12:*/		return 0x820B9A54;
		  /* 820B9A54h */ case   13:  		/* lwz R28, <#[R1 + 164]> */
		/* 820B9A54h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B9A54h case   13:*/		return 0x820B9A58;
		  /* 820B9A58h */ case   14:  		/* oris R23, R29, 8272 */
		/* 820B9A58h case   14:*/		cpu::op::oris<0>(regs,&regs.R23,regs.R29,0x2050);
		/* 820B9A58h case   14:*/		return 0x820B9A5C;
		  /* 820B9A5Ch */ case   15:  		/* li R9, 0 */
		/* 820B9A5Ch case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9A5Ch case   15:*/		return 0x820B9A60;
		  /* 820B9A60h */ case   16:  		/* lwz R7, <#[R1 + 144]> */
		/* 820B9A60h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820B9A60h case   16:*/		return 0x820B9A64;
		  /* 820B9A64h */ case   17:  		/* mr R8, R27 */
		/* 820B9A64h case   17:*/		regs.R8 = regs.R27;
		/* 820B9A64h case   17:*/		return 0x820B9A68;
		  /* 820B9A68h */ case   18:  		/* mr R6, R28 */
		/* 820B9A68h case   18:*/		regs.R6 = regs.R28;
		/* 820B9A68h case   18:*/		return 0x820B9A6C;
		  /* 820B9A6Ch */ case   19:  		/* mr R5, R23 */
		/* 820B9A6Ch case   19:*/		regs.R5 = regs.R23;
		/* 820B9A6Ch case   19:*/		return 0x820B9A70;
		  /* 820B9A70h */ case   20:  		/* mr R4, R16 */
		/* 820B9A70h case   20:*/		regs.R4 = regs.R16;
		/* 820B9A70h case   20:*/		return 0x820B9A74;
		  /* 820B9A74h */ case   21:  		/* mr R3, R14 */
		/* 820B9A74h case   21:*/		regs.R3 = regs.R14;
		/* 820B9A74h case   21:*/		return 0x820B9A78;
		  /* 820B9A78h */ case   22:  		/* bl -36720 */
		/* 820B9A78h case   22:*/		regs.LR = 0x820B9A7C; return 0x820B0B08;
		/* 820B9A78h case   22:*/		return 0x820B9A7C;
		  /* 820B9A7Ch */ case   23:  		/* or. R31, R3, R3 */
		/* 820B9A7Ch case   23:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9A7Ch case   23:*/		return 0x820B9A80;
		  /* 820B9A80h */ case   24:  		/* bc 12, CR0_LT, 18776 */
		/* 820B9A80h case   24:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9A80h case   24:*/		return 0x820B9A84;
		  /* 820B9A84h */ case   25:  		/* lwz R27, <#[R1 + 168]> */
		/* 820B9A84h case   25:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B9A84h case   25:*/		return 0x820B9A88;
		  /* 820B9A88h */ case   26:  		/* oris R24, R29, 4112 */
		/* 820B9A88h case   26:*/		cpu::op::oris<0>(regs,&regs.R24,regs.R29,0x1010);
		/* 820B9A88h case   26:*/		return 0x820B9A8C;
		  /* 820B9A8Ch */ case   27:  		/* li R9, 0 */
		/* 820B9A8Ch case   27:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9A8Ch case   27:*/		return 0x820B9A90;
		  /* 820B9A90h */ case   28:  		/* li R8, 0 */
		/* 820B9A90h case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9A90h case   28:*/		return 0x820B9A94;
		  /* 820B9A94h */ case   29:  		/* mr R7, R28 */
		/* 820B9A94h case   29:*/		regs.R7 = regs.R28;
		/* 820B9A94h case   29:*/		return 0x820B9A98;
		  /* 820B9A98h */ case   30:  		/* mr R6, R27 */
		/* 820B9A98h case   30:*/		regs.R6 = regs.R27;
		/* 820B9A98h case   30:*/		return 0x820B9A9C;
		  /* 820B9A9Ch */ case   31:  		/* mr R5, R24 */
		/* 820B9A9Ch case   31:*/		regs.R5 = regs.R24;
		/* 820B9A9Ch case   31:*/		return 0x820B9AA0;
		  /* 820B9AA0h */ case   32:  		/* mr R4, R16 */
		/* 820B9AA0h case   32:*/		regs.R4 = regs.R16;
		/* 820B9AA0h case   32:*/		return 0x820B9AA4;
		  /* 820B9AA4h */ case   33:  		/* mr R3, R14 */
		/* 820B9AA4h case   33:*/		regs.R3 = regs.R14;
		/* 820B9AA4h case   33:*/		return 0x820B9AA8;
		  /* 820B9AA8h */ case   34:  		/* bl -36768 */
		/* 820B9AA8h case   34:*/		regs.LR = 0x820B9AAC; return 0x820B0B08;
		/* 820B9AA8h case   34:*/		return 0x820B9AAC;
		  /* 820B9AACh */ case   35:  		/* or. R31, R3, R3 */
		/* 820B9AACh case   35:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9AACh case   35:*/		return 0x820B9AB0;
		  /* 820B9AB0h */ case   36:  		/* bc 12, CR0_LT, 18728 */
		/* 820B9AB0h case   36:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9AB0h case   36:*/		return 0x820B9AB4;
		  /* 820B9AB4h */ case   37:  		/* lwz R25, <#[R1 + 172]> */
		/* 820B9AB4h case   37:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B9AB4h case   37:*/		return 0x820B9AB8;
		  /* 820B9AB8h */ case   38:  		/* li R9, 4 */
		/* 820B9AB8h case   38:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9AB8h case   38:*/		return 0x820B9ABC;
		  /* 820B9ABCh */ case   39:  		/* mr R8, R27 */
		/* 820B9ABCh case   39:*/		regs.R8 = regs.R27;
		/* 820B9ABCh case   39:*/		return 0x820B9AC0;
		  /* 820B9AC0h */ case   40:  		/* mr R7, R28 */
		/* 820B9AC0h case   40:*/		regs.R7 = regs.R28;
		/* 820B9AC0h case   40:*/		return 0x820B9AC4;
		  /* 820B9AC4h */ case   41:  		/* mr R6, R25 */
		/* 820B9AC4h case   41:*/		regs.R6 = regs.R25;
		/* 820B9AC4h case   41:*/		return 0x820B9AC8;
		  /* 820B9AC8h */ case   42:  		/* oris R5, R29, 8208 */
		/* 820B9AC8h case   42:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2010);
		/* 820B9AC8h case   42:*/		return 0x820B9ACC;
		  /* 820B9ACCh */ case   43:  		/* mr R4, R16 */
		/* 820B9ACCh case   43:*/		regs.R4 = regs.R16;
		/* 820B9ACCh case   43:*/		return 0x820B9AD0;
		  /* 820B9AD0h */ case   44:  		/* mr R3, R14 */
		/* 820B9AD0h case   44:*/		regs.R3 = regs.R14;
		/* 820B9AD0h case   44:*/		return 0x820B9AD4;
		  /* 820B9AD4h */ case   45:  		/* bl -36812 */
		/* 820B9AD4h case   45:*/		regs.LR = 0x820B9AD8; return 0x820B0B08;
		/* 820B9AD4h case   45:*/		return 0x820B9AD8;
		  /* 820B9AD8h */ case   46:  		/* or. R31, R3, R3 */
		/* 820B9AD8h case   46:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9AD8h case   46:*/		return 0x820B9ADC;
		  /* 820B9ADCh */ case   47:  		/* bc 12, CR0_LT, 18684 */
		/* 820B9ADCh case   47:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9ADCh case   47:*/		return 0x820B9AE0;
		  /* 820B9AE0h */ case   48:  		/* lwz R26, <#[R1 + 176]> */
		/* 820B9AE0h case   48:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000B0) );
		/* 820B9AE0h case   48:*/		return 0x820B9AE4;
		  /* 820B9AE4h */ case   49:  		/* li R9, 20 */
		/* 820B9AE4h case   49:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820B9AE4h case   49:*/		return 0x820B9AE8;
		  /* 820B9AE8h */ case   50:  		/* li R8, 0 */
		/* 820B9AE8h case   50:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9AE8h case   50:*/		return 0x820B9AEC;
		  /* 820B9AECh */ case   51:  		/* mr R7, R25 */
		/* 820B9AECh case   51:*/		regs.R7 = regs.R25;
		/* 820B9AECh case   51:*/		return 0x820B9AF0;
		  /* 820B9AF0h */ case   52:  		/* mr R6, R26 */
		/* 820B9AF0h case   52:*/		regs.R6 = regs.R26;
		/* 820B9AF0h case   52:*/		return 0x820B9AF4;
		  /* 820B9AF4h */ case   53:  		/* oris R5, R29, 4160 */
		/* 820B9AF4h case   53:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x1040);
		/* 820B9AF4h case   53:*/		return 0x820B9AF8;
		  /* 820B9AF8h */ case   54:  		/* mr R4, R16 */
		/* 820B9AF8h case   54:*/		regs.R4 = regs.R16;
		/* 820B9AF8h case   54:*/		return 0x820B9AFC;
		  /* 820B9AFCh */ case   55:  		/* mr R3, R14 */
		/* 820B9AFCh case   55:*/		regs.R3 = regs.R14;
		/* 820B9AFCh case   55:*/		return 0x820B9B00;
		  /* 820B9B00h */ case   56:  		/* bl -36856 */
		/* 820B9B00h case   56:*/		regs.LR = 0x820B9B04; return 0x820B0B08;
		/* 820B9B00h case   56:*/		return 0x820B9B04;
		  /* 820B9B04h */ case   57:  		/* or. R31, R3, R3 */
		/* 820B9B04h case   57:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9B04h case   57:*/		return 0x820B9B08;
		  /* 820B9B08h */ case   58:  		/* bc 12, CR0_LT, 18640 */
		/* 820B9B08h case   58:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9B08h case   58:*/		return 0x820B9B0C;
		  /* 820B9B0Ch */ case   59:  		/* lwz R25, <#[R1 + 180]> */
		/* 820B9B0Ch case   59:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000B4) );
		/* 820B9B0Ch case   59:*/		return 0x820B9B10;
		  /* 820B9B10h */ case   60:  		/* li R9, 23 */
		/* 820B9B10h case   60:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B9B10h case   60:*/		return 0x820B9B14;
		  /* 820B9B14h */ case   61:  		/* mr R8, R27 */
		/* 820B9B14h case   61:*/		regs.R8 = regs.R27;
		/* 820B9B14h case   61:*/		return 0x820B9B18;
		  /* 820B9B18h */ case   62:  		/* mr R7, R28 */
		/* 820B9B18h case   62:*/		regs.R7 = regs.R28;
		/* 820B9B18h case   62:*/		return 0x820B9B1C;
		  /* 820B9B1Ch */ case   63:  		/* mr R6, R25 */
		/* 820B9B1Ch case   63:*/		regs.R6 = regs.R25;
		/* 820B9B1Ch case   63:*/		return 0x820B9B20;
		  /* 820B9B20h */ case   64:  		/* oris R5, R29, 8240 */
		/* 820B9B20h case   64:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2030);
		/* 820B9B20h case   64:*/		return 0x820B9B24;
		  /* 820B9B24h */ case   65:  		/* mr R4, R16 */
		/* 820B9B24h case   65:*/		regs.R4 = regs.R16;
		/* 820B9B24h case   65:*/		return 0x820B9B28;
		  /* 820B9B28h */ case   66:  		/* mr R3, R14 */
		/* 820B9B28h case   66:*/		regs.R3 = regs.R14;
		/* 820B9B28h case   66:*/		return 0x820B9B2C;
		  /* 820B9B2Ch */ case   67:  		/* bl -36900 */
		/* 820B9B2Ch case   67:*/		regs.LR = 0x820B9B30; return 0x820B0B08;
		/* 820B9B2Ch case   67:*/		return 0x820B9B30;
		  /* 820B9B30h */ case   68:  		/* or. R31, R3, R3 */
		/* 820B9B30h case   68:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9B30h case   68:*/		return 0x820B9B34;
		  /* 820B9B34h */ case   69:  		/* bc 12, CR0_LT, 18596 */
		/* 820B9B34h case   69:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9B34h case   69:*/		return 0x820B9B38;
		  /* 820B9B38h */ case   70:  		/* lwz R28, <#[R1 + 184]> */
		/* 820B9B38h case   70:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B9B38h case   70:*/		return 0x820B9B3C;
		  /* 820B9B3Ch */ case   71:  		/* li R9, 0 */
		/* 820B9B3Ch case   71:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9B3Ch case   71:*/		return 0x820B9B40;
		  /* 820B9B40h */ case   72:  		/* li R8, 0 */
		/* 820B9B40h case   72:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9B40h case   72:*/		return 0x820B9B44;
		  /* 820B9B44h */ case   73:  		/* mr R7, R26 */
		/* 820B9B44h case   73:*/		regs.R7 = regs.R26;
		/* 820B9B44h case   73:*/		return 0x820B9B48;
		  /* 820B9B48h */ case   74:  		/* mr R6, R28 */
		/* 820B9B48h case   74:*/		regs.R6 = regs.R28;
		/* 820B9B48h case   74:*/		return 0x820B9B4C;
		  /* 820B9B4Ch */ case   75:  		/* mr R5, R24 */
		/* 820B9B4Ch case   75:*/		regs.R5 = regs.R24;
		/* 820B9B4Ch case   75:*/		return 0x820B9B50;
		  /* 820B9B50h */ case   76:  		/* mr R4, R16 */
		/* 820B9B50h case   76:*/		regs.R4 = regs.R16;
		/* 820B9B50h case   76:*/		return 0x820B9B54;
		  /* 820B9B54h */ case   77:  		/* mr R3, R14 */
		/* 820B9B54h case   77:*/		regs.R3 = regs.R14;
		/* 820B9B54h case   77:*/		return 0x820B9B58;
		  /* 820B9B58h */ case   78:  		/* bl -36944 */
		/* 820B9B58h case   78:*/		regs.LR = 0x820B9B5C; return 0x820B0B08;
		/* 820B9B58h case   78:*/		return 0x820B9B5C;
		  /* 820B9B5Ch */ case   79:  		/* or. R31, R3, R3 */
		/* 820B9B5Ch case   79:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9B5Ch case   79:*/		return 0x820B9B60;
		  /* 820B9B60h */ case   80:  		/* bc 12, CR0_LT, 18552 */
		/* 820B9B60h case   80:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9B60h case   80:*/		return 0x820B9B64;
		  /* 820B9B64h */ case   81:  		/* lwz R29, <#[R1 + 188]> */
		/* 820B9B64h case   81:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000BC) );
		/* 820B9B64h case   81:*/		return 0x820B9B68;
		  /* 820B9B68h */ case   82:  		/* mr R9, R30 */
		/* 820B9B68h case   82:*/		regs.R9 = regs.R30;
		/* 820B9B68h case   82:*/		return 0x820B9B6C;
		  /* 820B9B6Ch */ case   83:  		/* mr R8, R25 */
		/* 820B9B6Ch case   83:*/		regs.R8 = regs.R25;
		/* 820B9B6Ch case   83:*/		return 0x820B9B70;
		  /* 820B9B70h */ case   84:  		/* mr R7, R26 */
		/* 820B9B70h case   84:*/		regs.R7 = regs.R26;
		/* 820B9B70h case   84:*/		return 0x820B9B74;
		  /* 820B9B74h */ case   85:  		/* mr R6, R28 */
		/* 820B9B74h case   85:*/		regs.R6 = regs.R28;
		/* 820B9B74h case   85:*/		return 0x820B9B78;
		  /* 820B9B78h */ case   86:  		/* mr R5, R29 */
		/* 820B9B78h case   86:*/		regs.R5 = regs.R29;
		/* 820B9B78h case   86:*/		return 0x820B9B7C;
		  /* 820B9B7Ch */ case   87:  		/* mr R4, R16 */
		/* 820B9B7Ch case   87:*/		regs.R4 = regs.R16;
		/* 820B9B7Ch case   87:*/		return 0x820B9B80;
		  /* 820B9B80h */ case   88:  		/* mr R3, R14 */
		/* 820B9B80h case   88:*/		regs.R3 = regs.R14;
		/* 820B9B80h case   88:*/		return 0x820B9B84;
		  /* 820B9B84h */ case   89:  		/* bl -26116 */
		/* 820B9B84h case   89:*/		regs.LR = 0x820B9B88; return 0x820B3580;
		/* 820B9B84h case   89:*/		return 0x820B9B88;
		  /* 820B9B88h */ case   90:  		/* or. R31, R3, R3 */
		/* 820B9B88h case   90:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9B88h case   90:*/		return 0x820B9B8C;
		  /* 820B9B8Ch */ case   91:  		/* bc 12, CR0_LT, 18508 */
		/* 820B9B8Ch case   91:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9B8Ch case   91:*/		return 0x820B9B90;
		  /* 820B9B90h */ case   92:  		/* mr R8, R22 */
		/* 820B9B90h case   92:*/		regs.R8 = regs.R22;
		/* 820B9B90h case   92:*/		return 0x820B9B94;
		  /* 820B9B94h */ case   93:  		/* mr R7, R29 */
		/* 820B9B94h case   93:*/		regs.R7 = regs.R29;
		/* 820B9B94h case   93:*/		return 0x820B9B98;
		  /* 820B9B98h */ case   94:  		/* mr R5, R23 */
		/* 820B9B98h case   94:*/		regs.R5 = regs.R23;
		/* 820B9B98h case   94:*/		return 0x820B9B9C;
		  /* 820B9B9Ch */ case   95:  		/* b 15248 */
		/* 820B9B9Ch case   95:*/		return 0x820BD72C;
		/* 820B9B9Ch case   95:*/		return 0x820B9BA0;
		  /* 820B9BA0h */ case   96:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9BA0h case   96:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9BA0h case   96:*/		return 0x820B9BA4;
		  /* 820B9BA4h */ case   97:  		/* cmplwi CR6, R11, 0 */
		/* 820B9BA4h case   97:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9BA4h case   97:*/		return 0x820B9BA8;
		  /* 820B9BA8h */ case   98:  		/* bc 12, CR6_EQ, 18472 */
		/* 820B9BA8h case   98:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9BA8h case   98:*/		return 0x820B9BAC;
		  /* 820B9BACh */ case   99:  		/* cmplwi CR6, R15, 0 */
		/* 820B9BACh case   99:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B9BACh case   99:*/		return 0x820B9BB0;
		  /* 820B9BB0h */ case  100:  		/* bc 12, CR6_EQ, -4580 */
		/* 820B9BB0h case  100:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B9BB0h case  100:*/		return 0x820B9BB4;
		  /* 820B9BB4h */ case  101:  		/* cmplwi CR6, R30, 0 */
		/* 820B9BB4h case  101:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9BB4h case  101:*/		return 0x820B9BB8;
		  /* 820B9BB8h */ case  102:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9BB8h case  102:*/		if ( regs.CR[6].eq ) { return 0x820B9BD8;  }
		/* 820B9BB8h case  102:*/		return 0x820B9BBC;
		  /* 820B9BBCh */ case  103:  		/* addi R11, R15, -4 */
		/* 820B9BBCh case  103:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B9BBCh case  103:*/		return 0x820B9BC0;
		  /* 820B9BC0h */ case  104:  		/* li R10, -1 */
		/* 820B9BC0h case  104:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820B9BC0h case  104:*/		return 0x820B9BC4;
		  /* 820B9BC4h */ case  105:  		/* cmplwi CR0, R30, 0 */
		/* 820B9BC4h case  105:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9BC4h case  105:*/		return 0x820B9BC8;
		  /* 820B9BC8h */ case  106:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9BC8h case  106:*/		if ( regs.CR[0].eq ) { return 0x820B9BD8;  }
		/* 820B9BC8h case  106:*/		return 0x820B9BCC;
		  /* 820B9BCCh */ case  107:  		/* mtspr CTR, R30 */
		/* 820B9BCCh case  107:*/		regs.CTR = regs.R30;
		/* 820B9BCCh case  107:*/		return 0x820B9BD0;
		  /* 820B9BD0h */ case  108:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9BD0h case  108:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9BD0h case  108:*/		return 0x820B9BD4;
		  /* 820B9BD4h */ case  109:  		/* bc 16, CR0_LT, -4 */
		/* 820B9BD4h case  109:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9BD0;  }
		/* 820B9BD4h case  109:*/		return 0x820B9BD8;
	}
	return 0x820B9BD8;
} // Block from 820B9A20h-820B9BD8h (110 instructions)

//////////////////////////////////////////////////////
// Block at 820B9BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9BD8);
		  /* 820B9BD8h */ case    0:  		/* mr R5, R30 */
		/* 820B9BD8h case    0:*/		regs.R5 = regs.R30;
		/* 820B9BD8h case    0:*/		return 0x820B9BDC;
		  /* 820B9BDCh */ case    1:  		/* li R11, 65 */
		/* 820B9BDCh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x41);
		/* 820B9BDCh case    1:*/		return 0x820B9BE0;
		  /* 820B9BE0h */ case    2:  		/* li R9, 0 */
		/* 820B9BE0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9BE0h case    2:*/		return 0x820B9BE4;
		  /* 820B9BE4h */ case    3:  		/* rlwimi R5, R11, 22, 0, 11 */
		/* 820B9BE4h case    3:*/		cpu::op::rlwimi<0,22,0,11>(regs,&regs.R5,regs.R11);
		/* 820B9BE4h case    3:*/		return 0x820B9BE8;
		  /* 820B9BE8h */ case    4:  		/* b -4932 */
		/* 820B9BE8h case    4:*/		return 0x820B88A4;
		/* 820B9BE8h case    4:*/		return 0x820B9BEC;
		  /* 820B9BECh */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9BECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9BECh case    5:*/		return 0x820B9BF0;
		  /* 820B9BF0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820B9BF0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9BF0h case    6:*/		return 0x820B9BF4;
		  /* 820B9BF4h */ case    7:  		/* bc 12, CR6_EQ, 18396 */
		/* 820B9BF4h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820B9BF4h case    7:*/		return 0x820B9BF8;
		  /* 820B9BF8h */ case    8:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820B9BF8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820B9BF8h case    8:*/		return 0x820B9BFC;
		  /* 820B9BFCh */ case    9:  		/* lis R4, 9345 */
		/* 820B9BFCh case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820B9BFCh case    9:*/		return 0x820B9C00;
		  /* 820B9C00h */ case   10:  		/* mr R3, R31 */
		/* 820B9C00h case   10:*/		regs.R3 = regs.R31;
		/* 820B9C00h case   10:*/		return 0x820B9C04;
		  /* 820B9C04h */ case   11:  		/* bl -203268 */
		/* 820B9C04h case   11:*/		regs.LR = 0x820B9C08; return 0x82088200;
		/* 820B9C04h case   11:*/		return 0x820B9C08;
		  /* 820B9C08h */ case   12:  		/* or. R17, R3, R3 */
		/* 820B9C08h case   12:*/		cpu::op::or<1>(regs,&regs.R17,regs.R3,regs.R3);
		/* 820B9C08h case   12:*/		return 0x820B9C0C;
		  /* 820B9C0Ch */ case   13:  		/* stw R17, <#[R1 + 148]> */
		/* 820B9C0Ch case   13:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000094) );
		/* 820B9C0Ch case   13:*/		return 0x820B9C10;
		  /* 820B9C10h */ case   14:  		/* bc 12, CR0_EQ, 14352 */
		/* 820B9C10h case   14:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B9C10h case   14:*/		return 0x820B9C14;
		  /* 820B9C14h */ case   15:  		/* mulli R4, R30, 10 */
		/* 820B9C14h case   15:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0xA);
		/* 820B9C14h case   15:*/		return 0x820B9C18;
		  /* 820B9C18h */ case   16:  		/* mr R3, R14 */
		/* 820B9C18h case   16:*/		regs.R3 = regs.R14;
		/* 820B9C18h case   16:*/		return 0x820B9C1C;
		  /* 820B9C1Ch */ case   17:  		/* bl -38188 */
		/* 820B9C1Ch case   17:*/		regs.LR = 0x820B9C20; return 0x820B06F0;
		/* 820B9C1Ch case   17:*/		return 0x820B9C20;
		  /* 820B9C20h */ case   18:  		/* or. R11, R3, R3 */
		/* 820B9C20h case   18:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820B9C20h case   18:*/		return 0x820B9C24;
		  /* 820B9C24h */ case   19:  		/* bc 12, CR0_EQ, 14332 */
		/* 820B9C24h case   19:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820B9C24h case   19:*/		return 0x820B9C28;
		  /* 820B9C28h */ case   20:  		/* li R9, 10 */
		/* 820B9C28h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0xA);
		/* 820B9C28h case   20:*/		return 0x820B9C2C;
		  /* 820B9C2Ch */ case   21:  		/* addi R10, R1, 156 */
		/* 820B9C2Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820B9C2Ch case   21:*/		return 0x820B9C30;
		  /* 820B9C30h */ case   22:  		/* mtspr CTR, R9 */
		/* 820B9C30h case   22:*/		regs.CTR = regs.R9;
		/* 820B9C30h case   22:*/		return 0x820B9C34;
		  /* 820B9C34h */ case   23:  		/* stwu R11, <#[R10 + 4]> */
		/* 820B9C34h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820B9C34h case   23:*/		return 0x820B9C38;
		  /* 820B9C38h */ case   24:  		/* add R11, R11, R31 */
		/* 820B9C38h case   24:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 820B9C38h case   24:*/		return 0x820B9C3C;
		  /* 820B9C3Ch */ case   25:  		/* bc 16, CR0_LT, -8 */
		/* 820B9C3Ch case   25:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9C34;  }
		/* 820B9C3Ch case   25:*/		return 0x820B9C40;
		  /* 820B9C40h */ case   26:  		/* lwz R19, <#[R1 + 160]> */
		/* 820B9C40h case   26:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x000000A0) );
		/* 820B9C40h case   26:*/		return 0x820B9C44;
		  /* 820B9C44h */ case   27:  		/* li R29, -1 */
		/* 820B9C44h case   27:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820B9C44h case   27:*/		return 0x820B9C48;
		  /* 820B9C48h */ case   28:  		/* cmplwi CR6, R30, 0 */
		/* 820B9C48h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9C48h case   28:*/		return 0x820B9C4C;
		  /* 820B9C4Ch */ case   29:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9C4Ch case   29:*/		if ( regs.CR[6].eq ) { return 0x820B9C6C;  }
		/* 820B9C4Ch case   29:*/		return 0x820B9C50;
		  /* 820B9C50h */ case   30:  		/* addi R11, R19, -4 */
		/* 820B9C50h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R19,0xFFFFFFFC);
		/* 820B9C50h case   30:*/		return 0x820B9C54;
		  /* 820B9C54h */ case   31:  		/* mr R10, R29 */
		/* 820B9C54h case   31:*/		regs.R10 = regs.R29;
		/* 820B9C54h case   31:*/		return 0x820B9C58;
		  /* 820B9C58h */ case   32:  		/* cmplwi CR0, R30, 0 */
		/* 820B9C58h case   32:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9C58h case   32:*/		return 0x820B9C5C;
		  /* 820B9C5Ch */ case   33:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9C5Ch case   33:*/		if ( regs.CR[0].eq ) { return 0x820B9C6C;  }
		/* 820B9C5Ch case   33:*/		return 0x820B9C60;
		  /* 820B9C60h */ case   34:  		/* mtspr CTR, R30 */
		/* 820B9C60h case   34:*/		regs.CTR = regs.R30;
		/* 820B9C60h case   34:*/		return 0x820B9C64;
		  /* 820B9C64h */ case   35:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9C64h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9C64h case   35:*/		return 0x820B9C68;
		  /* 820B9C68h */ case   36:  		/* bc 16, CR0_LT, -4 */
		/* 820B9C68h case   36:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9C64;  }
		/* 820B9C68h case   36:*/		return 0x820B9C6C;
	}
	return 0x820B9C6C;
} // Block from 820B9BD8h-820B9C6Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 820B9C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9C6C);
		  /* 820B9C6Ch */ case    0:  		/* lwz R23, <#[R1 + 164]> */
		/* 820B9C6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A4) );
		/* 820B9C6Ch case    0:*/		return 0x820B9C70;
		  /* 820B9C70h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9C70h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9C70h case    1:*/		return 0x820B9C74;
		  /* 820B9C74h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9C74h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9C94;  }
		/* 820B9C74h case    2:*/		return 0x820B9C78;
		  /* 820B9C78h */ case    3:  		/* addi R11, R23, -4 */
		/* 820B9C78h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820B9C78h case    3:*/		return 0x820B9C7C;
		  /* 820B9C7Ch */ case    4:  		/* mr R10, R29 */
		/* 820B9C7Ch case    4:*/		regs.R10 = regs.R29;
		/* 820B9C7Ch case    4:*/		return 0x820B9C80;
		  /* 820B9C80h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9C80h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9C80h case    5:*/		return 0x820B9C84;
		  /* 820B9C84h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9C84h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9C94;  }
		/* 820B9C84h case    6:*/		return 0x820B9C88;
		  /* 820B9C88h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9C88h case    7:*/		regs.CTR = regs.R30;
		/* 820B9C88h case    7:*/		return 0x820B9C8C;
		  /* 820B9C8Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9C8Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9C8Ch case    8:*/		return 0x820B9C90;
		  /* 820B9C90h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9C90h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9C8C;  }
		/* 820B9C90h case    9:*/		return 0x820B9C94;
	}
	return 0x820B9C94;
} // Block from 820B9C6Ch-820B9C94h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9C94);
		  /* 820B9C94h */ case    0:  		/* lwz R27, <#[R1 + 168]> */
		/* 820B9C94h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 820B9C94h case    0:*/		return 0x820B9C98;
		  /* 820B9C98h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9C98h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9C98h case    1:*/		return 0x820B9C9C;
		  /* 820B9C9Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9C9Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9CBC;  }
		/* 820B9C9Ch case    2:*/		return 0x820B9CA0;
		  /* 820B9CA0h */ case    3:  		/* addi R11, R27, -4 */
		/* 820B9CA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B9CA0h case    3:*/		return 0x820B9CA4;
		  /* 820B9CA4h */ case    4:  		/* mr R10, R29 */
		/* 820B9CA4h case    4:*/		regs.R10 = regs.R29;
		/* 820B9CA4h case    4:*/		return 0x820B9CA8;
		  /* 820B9CA8h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9CA8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9CA8h case    5:*/		return 0x820B9CAC;
		  /* 820B9CACh */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9CACh case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9CBC;  }
		/* 820B9CACh case    6:*/		return 0x820B9CB0;
		  /* 820B9CB0h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9CB0h case    7:*/		regs.CTR = regs.R30;
		/* 820B9CB0h case    7:*/		return 0x820B9CB4;
		  /* 820B9CB4h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9CB4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9CB4h case    8:*/		return 0x820B9CB8;
		  /* 820B9CB8h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9CB8h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9CB4;  }
		/* 820B9CB8h case    9:*/		return 0x820B9CBC;
	}
	return 0x820B9CBC;
} // Block from 820B9C94h-820B9CBCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9CBC);
		  /* 820B9CBCh */ case    0:  		/* lwz R20, <#[R1 + 172]> */
		/* 820B9CBCh case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000AC) );
		/* 820B9CBCh case    0:*/		return 0x820B9CC0;
		  /* 820B9CC0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9CC0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9CC0h case    1:*/		return 0x820B9CC4;
		  /* 820B9CC4h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9CC4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9CE4;  }
		/* 820B9CC4h case    2:*/		return 0x820B9CC8;
		  /* 820B9CC8h */ case    3:  		/* addi R11, R20, -4 */
		/* 820B9CC8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0xFFFFFFFC);
		/* 820B9CC8h case    3:*/		return 0x820B9CCC;
		  /* 820B9CCCh */ case    4:  		/* mr R10, R29 */
		/* 820B9CCCh case    4:*/		regs.R10 = regs.R29;
		/* 820B9CCCh case    4:*/		return 0x820B9CD0;
		  /* 820B9CD0h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9CD0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9CD0h case    5:*/		return 0x820B9CD4;
		  /* 820B9CD4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9CD4h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9CE4;  }
		/* 820B9CD4h case    6:*/		return 0x820B9CD8;
		  /* 820B9CD8h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9CD8h case    7:*/		regs.CTR = regs.R30;
		/* 820B9CD8h case    7:*/		return 0x820B9CDC;
		  /* 820B9CDCh */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9CDCh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9CDCh case    8:*/		return 0x820B9CE0;
		  /* 820B9CE0h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9CE0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9CDC;  }
		/* 820B9CE0h case    9:*/		return 0x820B9CE4;
	}
	return 0x820B9CE4;
} // Block from 820B9CBCh-820B9CE4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9CE4);
		  /* 820B9CE4h */ case    0:  		/* lwz R21, <#[R1 + 176]> */
		/* 820B9CE4h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000B0) );
		/* 820B9CE4h case    0:*/		return 0x820B9CE8;
		  /* 820B9CE8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9CE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9CE8h case    1:*/		return 0x820B9CEC;
		  /* 820B9CECh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9CECh case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9D0C;  }
		/* 820B9CECh case    2:*/		return 0x820B9CF0;
		  /* 820B9CF0h */ case    3:  		/* addi R11, R21, -4 */
		/* 820B9CF0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0xFFFFFFFC);
		/* 820B9CF0h case    3:*/		return 0x820B9CF4;
		  /* 820B9CF4h */ case    4:  		/* mr R10, R29 */
		/* 820B9CF4h case    4:*/		regs.R10 = regs.R29;
		/* 820B9CF4h case    4:*/		return 0x820B9CF8;
		  /* 820B9CF8h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9CF8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9CF8h case    5:*/		return 0x820B9CFC;
		  /* 820B9CFCh */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9CFCh case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9D0C;  }
		/* 820B9CFCh case    6:*/		return 0x820B9D00;
		  /* 820B9D00h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9D00h case    7:*/		regs.CTR = regs.R30;
		/* 820B9D00h case    7:*/		return 0x820B9D04;
		  /* 820B9D04h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9D04h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9D04h case    8:*/		return 0x820B9D08;
		  /* 820B9D08h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9D08h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9D04;  }
		/* 820B9D08h case    9:*/		return 0x820B9D0C;
	}
	return 0x820B9D0C;
} // Block from 820B9CE4h-820B9D0Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9D0C);
		  /* 820B9D0Ch */ case    0:  		/* lwz R22, <#[R1 + 180]> */
		/* 820B9D0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000B4) );
		/* 820B9D0Ch case    0:*/		return 0x820B9D10;
		  /* 820B9D10h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9D10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9D10h case    1:*/		return 0x820B9D14;
		  /* 820B9D14h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9D14h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9D34;  }
		/* 820B9D14h case    2:*/		return 0x820B9D18;
		  /* 820B9D18h */ case    3:  		/* addi R11, R22, -4 */
		/* 820B9D18h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFFC);
		/* 820B9D18h case    3:*/		return 0x820B9D1C;
		  /* 820B9D1Ch */ case    4:  		/* mr R10, R29 */
		/* 820B9D1Ch case    4:*/		regs.R10 = regs.R29;
		/* 820B9D1Ch case    4:*/		return 0x820B9D20;
		  /* 820B9D20h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9D20h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9D20h case    5:*/		return 0x820B9D24;
		  /* 820B9D24h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9D24h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9D34;  }
		/* 820B9D24h case    6:*/		return 0x820B9D28;
		  /* 820B9D28h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9D28h case    7:*/		regs.CTR = regs.R30;
		/* 820B9D28h case    7:*/		return 0x820B9D2C;
		  /* 820B9D2Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9D2Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9D2Ch case    8:*/		return 0x820B9D30;
		  /* 820B9D30h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9D30h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9D2C;  }
		/* 820B9D30h case    9:*/		return 0x820B9D34;
	}
	return 0x820B9D34;
} // Block from 820B9D0Ch-820B9D34h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9D34);
		  /* 820B9D34h */ case    0:  		/* lwz R24, <#[R1 + 184]> */
		/* 820B9D34h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000B8) );
		/* 820B9D34h case    0:*/		return 0x820B9D38;
		  /* 820B9D38h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9D38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9D38h case    1:*/		return 0x820B9D3C;
		  /* 820B9D3Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9D3Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9D5C;  }
		/* 820B9D3Ch case    2:*/		return 0x820B9D40;
		  /* 820B9D40h */ case    3:  		/* addi R11, R24, -4 */
		/* 820B9D40h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820B9D40h case    3:*/		return 0x820B9D44;
		  /* 820B9D44h */ case    4:  		/* mr R10, R29 */
		/* 820B9D44h case    4:*/		regs.R10 = regs.R29;
		/* 820B9D44h case    4:*/		return 0x820B9D48;
		  /* 820B9D48h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9D48h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9D48h case    5:*/		return 0x820B9D4C;
		  /* 820B9D4Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9D4Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9D5C;  }
		/* 820B9D4Ch case    6:*/		return 0x820B9D50;
		  /* 820B9D50h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9D50h case    7:*/		regs.CTR = regs.R30;
		/* 820B9D50h case    7:*/		return 0x820B9D54;
		  /* 820B9D54h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9D54h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9D54h case    8:*/		return 0x820B9D58;
		  /* 820B9D58h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9D58h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9D54;  }
		/* 820B9D58h case    9:*/		return 0x820B9D5C;
	}
	return 0x820B9D5C;
} // Block from 820B9D34h-820B9D5Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9D5C);
		  /* 820B9D5Ch */ case    0:  		/* lwz R25, <#[R1 + 188]> */
		/* 820B9D5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000BC) );
		/* 820B9D5Ch case    0:*/		return 0x820B9D60;
		  /* 820B9D60h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9D60h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9D60h case    1:*/		return 0x820B9D64;
		  /* 820B9D64h */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 820B9D64h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9DA8;  }
		/* 820B9D64h case    2:*/		return 0x820B9D68;
		  /* 820B9D68h */ case    3:  		/* addi R11, R25, -4 */
		/* 820B9D68h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820B9D68h case    3:*/		return 0x820B9D6C;
		  /* 820B9D6Ch */ case    4:  		/* mr R10, R29 */
		/* 820B9D6Ch case    4:*/		regs.R10 = regs.R29;
		/* 820B9D6Ch case    4:*/		return 0x820B9D70;
		  /* 820B9D70h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9D70h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9D70h case    5:*/		return 0x820B9D74;
		  /* 820B9D74h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9D74h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9D84;  }
		/* 820B9D74h case    6:*/		return 0x820B9D78;
		  /* 820B9D78h */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9D78h case    7:*/		regs.CTR = regs.R30;
		/* 820B9D78h case    7:*/		return 0x820B9D7C;
		  /* 820B9D7Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9D7Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9D7Ch case    8:*/		return 0x820B9D80;
		  /* 820B9D80h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9D80h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9D7C;  }
		/* 820B9D80h case    9:*/		return 0x820B9D84;
	}
	return 0x820B9D84;
} // Block from 820B9D5Ch-820B9D84h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9D84);
		  /* 820B9D84h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B9D84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9D84h case    0:*/		return 0x820B9D88;
		  /* 820B9D88h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9D88h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B9DA8;  }
		/* 820B9D88h case    1:*/		return 0x820B9D8C;
		  /* 820B9D8Ch */ case    2:  		/* addi R11, R17, -4 */
		/* 820B9D8Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0xFFFFFFFC);
		/* 820B9D8Ch case    2:*/		return 0x820B9D90;
		  /* 820B9D90h */ case    3:  		/* mr R10, R29 */
		/* 820B9D90h case    3:*/		regs.R10 = regs.R29;
		/* 820B9D90h case    3:*/		return 0x820B9D94;
		  /* 820B9D94h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820B9D94h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9D94h case    4:*/		return 0x820B9D98;
		  /* 820B9D98h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9D98h case    5:*/		if ( regs.CR[0].eq ) { return 0x820B9DA8;  }
		/* 820B9D98h case    5:*/		return 0x820B9D9C;
		  /* 820B9D9Ch */ case    6:  		/* mtspr CTR, R30 */
		/* 820B9D9Ch case    6:*/		regs.CTR = regs.R30;
		/* 820B9D9Ch case    6:*/		return 0x820B9DA0;
		  /* 820B9DA0h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9DA0h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9DA0h case    7:*/		return 0x820B9DA4;
		  /* 820B9DA4h */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820B9DA4h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9DA0;  }
		/* 820B9DA4h case    8:*/		return 0x820B9DA8;
	}
	return 0x820B9DA8;
} // Block from 820B9D84h-820B9DA8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820B9DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9DA8);
		  /* 820B9DA8h */ case    0:  		/* rlwinm R28, R30, 0, 12, 31 */
		/* 820B9DA8h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R30);
		/* 820B9DA8h case    0:*/		return 0x820B9DAC;
		  /* 820B9DACh */ case    1:  		/* lwz R18, <#[R1 + 144]> */
		/* 820B9DACh case    1:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000090) );
		/* 820B9DACh case    1:*/		return 0x820B9DB0;
		  /* 820B9DB0h */ case    2:  		/* li R9, 0 */
		/* 820B9DB0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9DB0h case    2:*/		return 0x820B9DB4;
		  /* 820B9DB4h */ case    3:  		/* oris R26, R28, 4112 */
		/* 820B9DB4h case    3:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R28,0x1010);
		/* 820B9DB4h case    3:*/		return 0x820B9DB8;
		  /* 820B9DB8h */ case    4:  		/* li R8, 0 */
		/* 820B9DB8h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9DB8h case    4:*/		return 0x820B9DBC;
		  /* 820B9DBCh */ case    5:  		/* mr R7, R18 */
		/* 820B9DBCh case    5:*/		regs.R7 = regs.R18;
		/* 820B9DBCh case    5:*/		return 0x820B9DC0;
		  /* 820B9DC0h */ case    6:  		/* mr R6, R19 */
		/* 820B9DC0h case    6:*/		regs.R6 = regs.R19;
		/* 820B9DC0h case    6:*/		return 0x820B9DC4;
		  /* 820B9DC4h */ case    7:  		/* mr R5, R26 */
		/* 820B9DC4h case    7:*/		regs.R5 = regs.R26;
		/* 820B9DC4h case    7:*/		return 0x820B9DC8;
		  /* 820B9DC8h */ case    8:  		/* mr R4, R16 */
		/* 820B9DC8h case    8:*/		regs.R4 = regs.R16;
		/* 820B9DC8h case    8:*/		return 0x820B9DCC;
		  /* 820B9DCCh */ case    9:  		/* mr R3, R14 */
		/* 820B9DCCh case    9:*/		regs.R3 = regs.R14;
		/* 820B9DCCh case    9:*/		return 0x820B9DD0;
		  /* 820B9DD0h */ case   10:  		/* bl -37576 */
		/* 820B9DD0h case   10:*/		regs.LR = 0x820B9DD4; return 0x820B0B08;
		/* 820B9DD0h case   10:*/		return 0x820B9DD4;
		  /* 820B9DD4h */ case   11:  		/* or. R31, R3, R3 */
		/* 820B9DD4h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9DD4h case   11:*/		return 0x820B9DD8;
		  /* 820B9DD8h */ case   12:  		/* bc 12, CR0_LT, 17920 */
		/* 820B9DD8h case   12:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9DD8h case   12:*/		return 0x820B9DDC;
		  /* 820B9DDCh */ case   13:  		/* li R9, 4 */
		/* 820B9DDCh case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9DDCh case   13:*/		return 0x820B9DE0;
		  /* 820B9DE0h */ case   14:  		/* mr R8, R18 */
		/* 820B9DE0h case   14:*/		regs.R8 = regs.R18;
		/* 820B9DE0h case   14:*/		return 0x820B9DE4;
		  /* 820B9DE4h */ case   15:  		/* mr R7, R19 */
		/* 820B9DE4h case   15:*/		regs.R7 = regs.R19;
		/* 820B9DE4h case   15:*/		return 0x820B9DE8;
		  /* 820B9DE8h */ case   16:  		/* mr R6, R23 */
		/* 820B9DE8h case   16:*/		regs.R6 = regs.R23;
		/* 820B9DE8h case   16:*/		return 0x820B9DEC;
		  /* 820B9DECh */ case   17:  		/* oris R5, R28, 8208 */
		/* 820B9DECh case   17:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x2010);
		/* 820B9DECh case   17:*/		return 0x820B9DF0;
		  /* 820B9DF0h */ case   18:  		/* mr R4, R16 */
		/* 820B9DF0h case   18:*/		regs.R4 = regs.R16;
		/* 820B9DF0h case   18:*/		return 0x820B9DF4;
		  /* 820B9DF4h */ case   19:  		/* mr R3, R14 */
		/* 820B9DF4h case   19:*/		regs.R3 = regs.R14;
		/* 820B9DF4h case   19:*/		return 0x820B9DF8;
		  /* 820B9DF8h */ case   20:  		/* bl -37616 */
		/* 820B9DF8h case   20:*/		regs.LR = 0x820B9DFC; return 0x820B0B08;
		/* 820B9DF8h case   20:*/		return 0x820B9DFC;
		  /* 820B9DFCh */ case   21:  		/* or. R31, R3, R3 */
		/* 820B9DFCh case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9DFCh case   21:*/		return 0x820B9E00;
		  /* 820B9E00h */ case   22:  		/* bc 12, CR0_LT, 17880 */
		/* 820B9E00h case   22:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9E00h case   22:*/		return 0x820B9E04;
		  /* 820B9E04h */ case   23:  		/* li R9, 8 */
		/* 820B9E04h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820B9E04h case   23:*/		return 0x820B9E08;
		  /* 820B9E08h */ case   24:  		/* li R8, 0 */
		/* 820B9E08h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9E08h case   24:*/		return 0x820B9E0C;
		  /* 820B9E0Ch */ case   25:  		/* mr R7, R23 */
		/* 820B9E0Ch case   25:*/		regs.R7 = regs.R23;
		/* 820B9E0Ch case   25:*/		return 0x820B9E10;
		  /* 820B9E10h */ case   26:  		/* mr R6, R27 */
		/* 820B9E10h case   26:*/		regs.R6 = regs.R27;
		/* 820B9E10h case   26:*/		return 0x820B9E14;
		  /* 820B9E14h */ case   27:  		/* mr R5, R26 */
		/* 820B9E14h case   27:*/		regs.R5 = regs.R26;
		/* 820B9E14h case   27:*/		return 0x820B9E18;
		  /* 820B9E18h */ case   28:  		/* mr R4, R16 */
		/* 820B9E18h case   28:*/		regs.R4 = regs.R16;
		/* 820B9E18h case   28:*/		return 0x820B9E1C;
		  /* 820B9E1Ch */ case   29:  		/* mr R3, R14 */
		/* 820B9E1Ch case   29:*/		regs.R3 = regs.R14;
		/* 820B9E1Ch case   29:*/		return 0x820B9E20;
		  /* 820B9E20h */ case   30:  		/* bl -37656 */
		/* 820B9E20h case   30:*/		regs.LR = 0x820B9E24; return 0x820B0B08;
		/* 820B9E20h case   30:*/		return 0x820B9E24;
		  /* 820B9E24h */ case   31:  		/* or. R31, R3, R3 */
		/* 820B9E24h case   31:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9E24h case   31:*/		return 0x820B9E28;
		  /* 820B9E28h */ case   32:  		/* bc 12, CR0_LT, 17840 */
		/* 820B9E28h case   32:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9E28h case   32:*/		return 0x820B9E2C;
		  /* 820B9E2Ch */ case   33:  		/* li R9, 23 */
		/* 820B9E2Ch case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820B9E2Ch case   33:*/		return 0x820B9E30;
		  /* 820B9E30h */ case   34:  		/* mr R8, R23 */
		/* 820B9E30h case   34:*/		regs.R8 = regs.R23;
		/* 820B9E30h case   34:*/		return 0x820B9E34;
		  /* 820B9E34h */ case   35:  		/* mr R7, R27 */
		/* 820B9E34h case   35:*/		regs.R7 = regs.R27;
		/* 820B9E34h case   35:*/		return 0x820B9E38;
		  /* 820B9E38h */ case   36:  		/* mr R6, R20 */
		/* 820B9E38h case   36:*/		regs.R6 = regs.R20;
		/* 820B9E38h case   36:*/		return 0x820B9E3C;
		  /* 820B9E3Ch */ case   37:  		/* oris R5, R28, 8240 */
		/* 820B9E3Ch case   37:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x2030);
		/* 820B9E3Ch case   37:*/		return 0x820B9E40;
		  /* 820B9E40h */ case   38:  		/* mr R4, R16 */
		/* 820B9E40h case   38:*/		regs.R4 = regs.R16;
		/* 820B9E40h case   38:*/		return 0x820B9E44;
		  /* 820B9E44h */ case   39:  		/* mr R3, R14 */
		/* 820B9E44h case   39:*/		regs.R3 = regs.R14;
		/* 820B9E44h case   39:*/		return 0x820B9E48;
		  /* 820B9E48h */ case   40:  		/* bl -37696 */
		/* 820B9E48h case   40:*/		regs.LR = 0x820B9E4C; return 0x820B0B08;
		/* 820B9E48h case   40:*/		return 0x820B9E4C;
		  /* 820B9E4Ch */ case   41:  		/* or. R31, R3, R3 */
		/* 820B9E4Ch case   41:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9E4Ch case   41:*/		return 0x820B9E50;
		  /* 820B9E50h */ case   42:  		/* bc 12, CR0_LT, 17800 */
		/* 820B9E50h case   42:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9E50h case   42:*/		return 0x820B9E54;
		  /* 820B9E54h */ case   43:  		/* oris R27, R28, 8256 */
		/* 820B9E54h case   43:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R28,0x2040);
		/* 820B9E54h case   43:*/		return 0x820B9E58;
		  /* 820B9E58h */ case   44:  		/* li R9, 4 */
		/* 820B9E58h case   44:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9E58h case   44:*/		return 0x820B9E5C;
		  /* 820B9E5Ch */ case   45:  		/* mr R8, R23 */
		/* 820B9E5Ch case   45:*/		regs.R8 = regs.R23;
		/* 820B9E5Ch case   45:*/		return 0x820B9E60;
		  /* 820B9E60h */ case   46:  		/* mr R7, R20 */
		/* 820B9E60h case   46:*/		regs.R7 = regs.R20;
		/* 820B9E60h case   46:*/		return 0x820B9E64;
		  /* 820B9E64h */ case   47:  		/* mr R6, R21 */
		/* 820B9E64h case   47:*/		regs.R6 = regs.R21;
		/* 820B9E64h case   47:*/		return 0x820B9E68;
		  /* 820B9E68h */ case   48:  		/* mr R5, R27 */
		/* 820B9E68h case   48:*/		regs.R5 = regs.R27;
		/* 820B9E68h case   48:*/		return 0x820B9E6C;
		  /* 820B9E6Ch */ case   49:  		/* mr R4, R16 */
		/* 820B9E6Ch case   49:*/		regs.R4 = regs.R16;
		/* 820B9E6Ch case   49:*/		return 0x820B9E70;
		  /* 820B9E70h */ case   50:  		/* mr R3, R14 */
		/* 820B9E70h case   50:*/		regs.R3 = regs.R14;
		/* 820B9E70h case   50:*/		return 0x820B9E74;
		  /* 820B9E74h */ case   51:  		/* bl -37740 */
		/* 820B9E74h case   51:*/		regs.LR = 0x820B9E78; return 0x820B0B08;
		/* 820B9E74h case   51:*/		return 0x820B9E78;
		  /* 820B9E78h */ case   52:  		/* or. R31, R3, R3 */
		/* 820B9E78h case   52:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9E78h case   52:*/		return 0x820B9E7C;
		  /* 820B9E7Ch */ case   53:  		/* bc 12, CR0_LT, 17756 */
		/* 820B9E7Ch case   53:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9E7Ch case   53:*/		return 0x820B9E80;
		  /* 820B9E80h */ case   54:  		/* li R9, 0 */
		/* 820B9E80h case   54:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9E80h case   54:*/		return 0x820B9E84;
		  /* 820B9E84h */ case   55:  		/* li R8, 0 */
		/* 820B9E84h case   55:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9E84h case   55:*/		return 0x820B9E88;
		  /* 820B9E88h */ case   56:  		/* mr R7, R21 */
		/* 820B9E88h case   56:*/		regs.R7 = regs.R21;
		/* 820B9E88h case   56:*/		return 0x820B9E8C;
		  /* 820B9E8Ch */ case   57:  		/* mr R6, R22 */
		/* 820B9E8Ch case   57:*/		regs.R6 = regs.R22;
		/* 820B9E8Ch case   57:*/		return 0x820B9E90;
		  /* 820B9E90h */ case   58:  		/* oris R5, R28, 4192 */
		/* 820B9E90h case   58:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x1060);
		/* 820B9E90h case   58:*/		return 0x820B9E94;
		  /* 820B9E94h */ case   59:  		/* mr R4, R16 */
		/* 820B9E94h case   59:*/		regs.R4 = regs.R16;
		/* 820B9E94h case   59:*/		return 0x820B9E98;
		  /* 820B9E98h */ case   60:  		/* mr R3, R14 */
		/* 820B9E98h case   60:*/		regs.R3 = regs.R14;
		/* 820B9E98h case   60:*/		return 0x820B9E9C;
		  /* 820B9E9Ch */ case   61:  		/* bl -37780 */
		/* 820B9E9Ch case   61:*/		regs.LR = 0x820B9EA0; return 0x820B0B08;
		/* 820B9E9Ch case   61:*/		return 0x820B9EA0;
		  /* 820B9EA0h */ case   62:  		/* or. R31, R3, R3 */
		/* 820B9EA0h case   62:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9EA0h case   62:*/		return 0x820B9EA4;
		  /* 820B9EA4h */ case   63:  		/* bc 12, CR0_LT, 17716 */
		/* 820B9EA4h case   63:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9EA4h case   63:*/		return 0x820B9EA8;
		  /* 820B9EA8h */ case   64:  		/* li R9, 0 */
		/* 820B9EA8h case   64:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820B9EA8h case   64:*/		return 0x820B9EAC;
		  /* 820B9EACh */ case   65:  		/* li R8, 0 */
		/* 820B9EACh case   65:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9EACh case   65:*/		return 0x820B9EB0;
		  /* 820B9EB0h */ case   66:  		/* mr R7, R22 */
		/* 820B9EB0h case   66:*/		regs.R7 = regs.R22;
		/* 820B9EB0h case   66:*/		return 0x820B9EB4;
		  /* 820B9EB4h */ case   67:  		/* mr R6, R24 */
		/* 820B9EB4h case   67:*/		regs.R6 = regs.R24;
		/* 820B9EB4h case   67:*/		return 0x820B9EB8;
		  /* 820B9EB8h */ case   68:  		/* mr R5, R26 */
		/* 820B9EB8h case   68:*/		regs.R5 = regs.R26;
		/* 820B9EB8h case   68:*/		return 0x820B9EBC;
		  /* 820B9EBCh */ case   69:  		/* mr R4, R16 */
		/* 820B9EBCh case   69:*/		regs.R4 = regs.R16;
		/* 820B9EBCh case   69:*/		return 0x820B9EC0;
		  /* 820B9EC0h */ case   70:  		/* mr R3, R14 */
		/* 820B9EC0h case   70:*/		regs.R3 = regs.R14;
		/* 820B9EC0h case   70:*/		return 0x820B9EC4;
		  /* 820B9EC4h */ case   71:  		/* bl -37820 */
		/* 820B9EC4h case   71:*/		regs.LR = 0x820B9EC8; return 0x820B0B08;
		/* 820B9EC4h case   71:*/		return 0x820B9EC8;
		  /* 820B9EC8h */ case   72:  		/* or. R31, R3, R3 */
		/* 820B9EC8h case   72:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9EC8h case   72:*/		return 0x820B9ECC;
		  /* 820B9ECCh */ case   73:  		/* bc 12, CR0_LT, 17676 */
		/* 820B9ECCh case   73:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9ECCh case   73:*/		return 0x820B9ED0;
		  /* 820B9ED0h */ case   74:  		/* li R9, 20 */
		/* 820B9ED0h case   74:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820B9ED0h case   74:*/		return 0x820B9ED4;
		  /* 820B9ED4h */ case   75:  		/* li R8, 0 */
		/* 820B9ED4h case   75:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9ED4h case   75:*/		return 0x820B9ED8;
		  /* 820B9ED8h */ case   76:  		/* mr R7, R24 */
		/* 820B9ED8h case   76:*/		regs.R7 = regs.R24;
		/* 820B9ED8h case   76:*/		return 0x820B9EDC;
		  /* 820B9EDCh */ case   77:  		/* mr R6, R25 */
		/* 820B9EDCh case   77:*/		regs.R6 = regs.R25;
		/* 820B9EDCh case   77:*/		return 0x820B9EE0;
		  /* 820B9EE0h */ case   78:  		/* oris R5, R28, 4160 */
		/* 820B9EE0h case   78:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x1040);
		/* 820B9EE0h case   78:*/		return 0x820B9EE4;
		  /* 820B9EE4h */ case   79:  		/* mr R4, R16 */
		/* 820B9EE4h case   79:*/		regs.R4 = regs.R16;
		/* 820B9EE4h case   79:*/		return 0x820B9EE8;
		  /* 820B9EE8h */ case   80:  		/* mr R3, R14 */
		/* 820B9EE8h case   80:*/		regs.R3 = regs.R14;
		/* 820B9EE8h case   80:*/		return 0x820B9EEC;
		  /* 820B9EECh */ case   81:  		/* bl -37860 */
		/* 820B9EECh case   81:*/		regs.LR = 0x820B9EF0; return 0x820B0B08;
		/* 820B9EECh case   81:*/		return 0x820B9EF0;
		  /* 820B9EF0h */ case   82:  		/* or. R31, R3, R3 */
		/* 820B9EF0h case   82:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9EF0h case   82:*/		return 0x820B9EF4;
		  /* 820B9EF4h */ case   83:  		/* bc 12, CR0_LT, 17636 */
		/* 820B9EF4h case   83:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9EF4h case   83:*/		return 0x820B9EF8;
		  /* 820B9EF8h */ case   84:  		/* li R9, 2 */
		/* 820B9EF8h case   84:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820B9EF8h case   84:*/		return 0x820B9EFC;
		  /* 820B9EFCh */ case   85:  		/* mr R8, R25 */
		/* 820B9EFCh case   85:*/		regs.R8 = regs.R25;
		/* 820B9EFCh case   85:*/		return 0x820B9F00;
		  /* 820B9F00h */ case   86:  		/* mr R7, R22 */
		/* 820B9F00h case   86:*/		regs.R7 = regs.R22;
		/* 820B9F00h case   86:*/		return 0x820B9F04;
		  /* 820B9F04h */ case   87:  		/* mr R6, R17 */
		/* 820B9F04h case   87:*/		regs.R6 = regs.R17;
		/* 820B9F04h case   87:*/		return 0x820B9F08;
		  /* 820B9F08h */ case   88:  		/* mr R5, R27 */
		/* 820B9F08h case   88:*/		regs.R5 = regs.R27;
		/* 820B9F08h case   88:*/		return 0x820B9F0C;
		  /* 820B9F0Ch */ case   89:  		/* mr R4, R16 */
		/* 820B9F0Ch case   89:*/		regs.R4 = regs.R16;
		/* 820B9F0Ch case   89:*/		return 0x820B9F10;
		  /* 820B9F10h */ case   90:  		/* mr R3, R14 */
		/* 820B9F10h case   90:*/		regs.R3 = regs.R14;
		/* 820B9F10h case   90:*/		return 0x820B9F14;
		  /* 820B9F14h */ case   91:  		/* bl -37900 */
		/* 820B9F14h case   91:*/		regs.LR = 0x820B9F18; return 0x820B0B08;
		/* 820B9F14h case   91:*/		return 0x820B9F18;
		  /* 820B9F18h */ case   92:  		/* or. R31, R3, R3 */
		/* 820B9F18h case   92:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9F18h case   92:*/		return 0x820B9F1C;
		  /* 820B9F1Ch */ case   93:  		/* bc 12, CR0_LT, 17596 */
		/* 820B9F1Ch case   93:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9F1Ch case   93:*/		return 0x820B9F20;
		  /* 820B9F20h */ case   94:  		/* cmplwi CR6, R15, 0 */
		/* 820B9F20h case   94:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820B9F20h case   94:*/		return 0x820B9F24;
		  /* 820B9F24h */ case   95:  		/* bc 12, CR6_EQ, -5464 */
		/* 820B9F24h case   95:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820B9F24h case   95:*/		return 0x820B9F28;
		  /* 820B9F28h */ case   96:  		/* lwz R26, <#[R1 + 192]> */
		/* 820B9F28h case   96:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000C0) );
		/* 820B9F28h case   96:*/		return 0x820B9F2C;
		  /* 820B9F2Ch */ case   97:  		/* cmplwi CR6, R30, 0 */
		/* 820B9F2Ch case   97:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9F2Ch case   97:*/		return 0x820B9F30;
		  /* 820B9F30h */ case   98:  		/* bc 12, CR6_EQ, 32 */
		/* 820B9F30h case   98:*/		if ( regs.CR[6].eq ) { return 0x820B9F50;  }
		/* 820B9F30h case   98:*/		return 0x820B9F34;
		  /* 820B9F34h */ case   99:  		/* addi R11, R26, -4 */
		/* 820B9F34h case   99:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820B9F34h case   99:*/		return 0x820B9F38;
		  /* 820B9F38h */ case  100:  		/* mr R10, R29 */
		/* 820B9F38h case  100:*/		regs.R10 = regs.R29;
		/* 820B9F38h case  100:*/		return 0x820B9F3C;
		  /* 820B9F3Ch */ case  101:  		/* cmplwi CR0, R30, 0 */
		/* 820B9F3Ch case  101:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9F3Ch case  101:*/		return 0x820B9F40;
		  /* 820B9F40h */ case  102:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9F40h case  102:*/		if ( regs.CR[0].eq ) { return 0x820B9F50;  }
		/* 820B9F40h case  102:*/		return 0x820B9F44;
		  /* 820B9F44h */ case  103:  		/* mtspr CTR, R30 */
		/* 820B9F44h case  103:*/		regs.CTR = regs.R30;
		/* 820B9F44h case  103:*/		return 0x820B9F48;
		  /* 820B9F48h */ case  104:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9F48h case  104:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9F48h case  104:*/		return 0x820B9F4C;
		  /* 820B9F4Ch */ case  105:  		/* bc 16, CR0_LT, -4 */
		/* 820B9F4Ch case  105:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9F48;  }
		/* 820B9F4Ch case  105:*/		return 0x820B9F50;
	}
	return 0x820B9F50;
} // Block from 820B9DA8h-820B9F50h (106 instructions)

//////////////////////////////////////////////////////
// Block at 820B9F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9F50);
		  /* 820B9F50h */ case    0:  		/* lwz R27, <#[R1 + 196]> */
		/* 820B9F50h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000C4) );
		/* 820B9F50h case    0:*/		return 0x820B9F54;
		  /* 820B9F54h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820B9F54h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9F54h case    1:*/		return 0x820B9F58;
		  /* 820B9F58h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820B9F58h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B9F98;  }
		/* 820B9F58h case    2:*/		return 0x820B9F5C;
		  /* 820B9F5Ch */ case    3:  		/* addi R11, R27, -4 */
		/* 820B9F5Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820B9F5Ch case    3:*/		return 0x820B9F60;
		  /* 820B9F60h */ case    4:  		/* mr R10, R29 */
		/* 820B9F60h case    4:*/		regs.R10 = regs.R29;
		/* 820B9F60h case    4:*/		return 0x820B9F64;
		  /* 820B9F64h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820B9F64h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9F64h case    5:*/		return 0x820B9F68;
		  /* 820B9F68h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9F68h case    6:*/		if ( regs.CR[0].eq ) { return 0x820B9F78;  }
		/* 820B9F68h case    6:*/		return 0x820B9F6C;
		  /* 820B9F6Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820B9F6Ch case    7:*/		regs.CTR = regs.R30;
		/* 820B9F6Ch case    7:*/		return 0x820B9F70;
		  /* 820B9F70h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820B9F70h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9F70h case    8:*/		return 0x820B9F74;
		  /* 820B9F74h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820B9F74h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9F70;  }
		/* 820B9F74h case    9:*/		return 0x820B9F78;
	}
	return 0x820B9F78;
} // Block from 820B9F50h-820B9F78h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820B9F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9F78);
		  /* 820B9F78h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820B9F78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820B9F78h case    0:*/		return 0x820B9F7C;
		  /* 820B9F7Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820B9F7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820B9F98;  }
		/* 820B9F7Ch case    1:*/		return 0x820B9F80;
		  /* 820B9F80h */ case    2:  		/* addi R11, R15, -4 */
		/* 820B9F80h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820B9F80h case    2:*/		return 0x820B9F84;
		  /* 820B9F84h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820B9F84h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820B9F84h case    3:*/		return 0x820B9F88;
		  /* 820B9F88h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820B9F88h case    4:*/		if ( regs.CR[0].eq ) { return 0x820B9F98;  }
		/* 820B9F88h case    4:*/		return 0x820B9F8C;
		  /* 820B9F8Ch */ case    5:  		/* mtspr CTR, R30 */
		/* 820B9F8Ch case    5:*/		regs.CTR = regs.R30;
		/* 820B9F8Ch case    5:*/		return 0x820B9F90;
		  /* 820B9F90h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820B9F90h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820B9F90h case    6:*/		return 0x820B9F94;
		  /* 820B9F94h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820B9F94h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820B9F90;  }
		/* 820B9F94h case    7:*/		return 0x820B9F98;
	}
	return 0x820B9F98;
} // Block from 820B9F78h-820B9F98h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820B9F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820B9F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820B9F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820B9F98);
		  /* 820B9F98h */ case    0:  		/* li R9, 4 */
		/* 820B9F98h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9F98h case    0:*/		return 0x820B9F9C;
		  /* 820B9F9Ch */ case    1:  		/* li R8, 0 */
		/* 820B9F9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9F9Ch case    1:*/		return 0x820B9FA0;
		  /* 820B9FA0h */ case    2:  		/* mr R7, R17 */
		/* 820B9FA0h case    2:*/		regs.R7 = regs.R17;
		/* 820B9FA0h case    2:*/		return 0x820B9FA4;
		  /* 820B9FA4h */ case    3:  		/* mr R6, R26 */
		/* 820B9FA4h case    3:*/		regs.R6 = regs.R26;
		/* 820B9FA4h case    3:*/		return 0x820B9FA8;
		  /* 820B9FA8h */ case    4:  		/* oris R5, R28, 4176 */
		/* 820B9FA8h case    4:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x1050);
		/* 820B9FA8h case    4:*/		return 0x820B9FAC;
		  /* 820B9FACh */ case    5:  		/* mr R4, R16 */
		/* 820B9FACh case    5:*/		regs.R4 = regs.R16;
		/* 820B9FACh case    5:*/		return 0x820B9FB0;
		  /* 820B9FB0h */ case    6:  		/* mr R3, R14 */
		/* 820B9FB0h case    6:*/		regs.R3 = regs.R14;
		/* 820B9FB0h case    6:*/		return 0x820B9FB4;
		  /* 820B9FB4h */ case    7:  		/* bl -38060 */
		/* 820B9FB4h case    7:*/		regs.LR = 0x820B9FB8; return 0x820B0B08;
		/* 820B9FB4h case    7:*/		return 0x820B9FB8;
		  /* 820B9FB8h */ case    8:  		/* or. R31, R3, R3 */
		/* 820B9FB8h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9FB8h case    8:*/		return 0x820B9FBC;
		  /* 820B9FBCh */ case    9:  		/* bc 12, CR0_LT, 17436 */
		/* 820B9FBCh case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9FBCh case    9:*/		return 0x820B9FC0;
		  /* 820B9FC0h */ case   10:  		/* li R9, 4 */
		/* 820B9FC0h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820B9FC0h case   10:*/		return 0x820B9FC4;
		  /* 820B9FC4h */ case   11:  		/* li R8, 0 */
		/* 820B9FC4h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820B9FC4h case   11:*/		return 0x820B9FC8;
		  /* 820B9FC8h */ case   12:  		/* mr R7, R26 */
		/* 820B9FC8h case   12:*/		regs.R7 = regs.R26;
		/* 820B9FC8h case   12:*/		return 0x820B9FCC;
		  /* 820B9FCCh */ case   13:  		/* mr R6, R27 */
		/* 820B9FCCh case   13:*/		regs.R6 = regs.R27;
		/* 820B9FCCh case   13:*/		return 0x820B9FD0;
		  /* 820B9FD0h */ case   14:  		/* oris R5, R28, 4144 */
		/* 820B9FD0h case   14:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x1030);
		/* 820B9FD0h case   14:*/		return 0x820B9FD4;
		  /* 820B9FD4h */ case   15:  		/* mr R4, R16 */
		/* 820B9FD4h case   15:*/		regs.R4 = regs.R16;
		/* 820B9FD4h case   15:*/		return 0x820B9FD8;
		  /* 820B9FD8h */ case   16:  		/* mr R3, R14 */
		/* 820B9FD8h case   16:*/		regs.R3 = regs.R14;
		/* 820B9FD8h case   16:*/		return 0x820B9FDC;
		  /* 820B9FDCh */ case   17:  		/* bl -38100 */
		/* 820B9FDCh case   17:*/		regs.LR = 0x820B9FE0; return 0x820B0B08;
		/* 820B9FDCh case   17:*/		return 0x820B9FE0;
		  /* 820B9FE0h */ case   18:  		/* or. R31, R3, R3 */
		/* 820B9FE0h case   18:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820B9FE0h case   18:*/		return 0x820B9FE4;
		  /* 820B9FE4h */ case   19:  		/* bc 12, CR0_LT, 17396 */
		/* 820B9FE4h case   19:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820B9FE4h case   19:*/		return 0x820B9FE8;
		  /* 820B9FE8h */ case   20:  		/* mr R8, R27 */
		/* 820B9FE8h case   20:*/		regs.R8 = regs.R27;
		/* 820B9FE8h case   20:*/		return 0x820B9FEC;
		  /* 820B9FECh */ case   21:  		/* mr R7, R18 */
		/* 820B9FECh case   21:*/		regs.R7 = regs.R18;
		/* 820B9FECh case   21:*/		return 0x820B9FF0;
		  /* 820B9FF0h */ case   22:  		/* oris R5, R28, 8272 */
		/* 820B9FF0h case   22:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x2050);
		/* 820B9FF0h case   22:*/		return 0x820B9FF4;
		  /* 820B9FF4h */ case   23:  		/* b 14136 */
		/* 820B9FF4h case   23:*/		return 0x820BD72C;
		/* 820B9FF4h case   23:*/		return 0x820B9FF8;
		  /* 820B9FF8h */ case   24:  		/* lwz R11, <#[R1 + 128]> */
		/* 820B9FF8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820B9FF8h case   24:*/		return 0x820B9FFC;
		  /* 820B9FFCh */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 820B9FFCh case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820B9FFCh case   25:*/		return 0x820BA000;
		  /* 820BA000h */ case   26:  		/* bc 12, CR6_EQ, 17360 */
		/* 820BA000h case   26:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BA000h case   26:*/		return 0x820BA004;
		  /* 820BA004h */ case   27:  		/* cmplwi CR6, R15, 0 */
		/* 820BA004h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BA004h case   27:*/		return 0x820BA008;
		  /* 820BA008h */ case   28:  		/* bc 12, CR6_EQ, -5692 */
		/* 820BA008h case   28:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA008h case   28:*/		return 0x820BA00C;
		  /* 820BA00Ch */ case   29:  		/* mulli R4, R30, 6 */
		/* 820BA00Ch case   29:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x6);
		/* 820BA00Ch case   29:*/		return 0x820BA010;
		  /* 820BA010h */ case   30:  		/* mr R3, R14 */
		/* 820BA010h case   30:*/		regs.R3 = regs.R14;
		/* 820BA010h case   30:*/		return 0x820BA014;
		  /* 820BA014h */ case   31:  		/* bl -39204 */
		/* 820BA014h case   31:*/		regs.LR = 0x820BA018; return 0x820B06F0;
		/* 820BA014h case   31:*/		return 0x820BA018;
		  /* 820BA018h */ case   32:  		/* or. R11, R3, R3 */
		/* 820BA018h case   32:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BA018h case   32:*/		return 0x820BA01C;
		  /* 820BA01Ch */ case   33:  		/* bc 12, CR0_EQ, 13316 */
		/* 820BA01Ch case   33:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BA01Ch case   33:*/		return 0x820BA020;
		  /* 820BA020h */ case   34:  		/* li R10, 6 */
		/* 820BA020h case   34:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 820BA020h case   34:*/		return 0x820BA024;
		  /* 820BA024h */ case   35:  		/* addi R9, R1, 156 */
		/* 820BA024h case   35:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x9C);
		/* 820BA024h case   35:*/		return 0x820BA028;
		  /* 820BA028h */ case   36:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BA028h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BA028h case   36:*/		return 0x820BA02C;
		  /* 820BA02Ch */ case   37:  		/* mtspr CTR, R10 */
		/* 820BA02Ch case   37:*/		regs.CTR = regs.R10;
		/* 820BA02Ch case   37:*/		return 0x820BA030;
		  /* 820BA030h */ case   38:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BA030h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BA030h case   38:*/		return 0x820BA034;
		  /* 820BA034h */ case   39:  		/* add R11, R8, R11 */
		/* 820BA034h case   39:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BA034h case   39:*/		return 0x820BA038;
		  /* 820BA038h */ case   40:  		/* bc 16, CR0_LT, -8 */
		/* 820BA038h case   40:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA030;  }
		/* 820BA038h case   40:*/		return 0x820BA03C;
		  /* 820BA03Ch */ case   41:  		/* lwz R23, <#[R1 + 160]> */
		/* 820BA03Ch case   41:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BA03Ch case   41:*/		return 0x820BA040;
		  /* 820BA040h */ case   42:  		/* li R29, -1 */
		/* 820BA040h case   42:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BA040h case   42:*/		return 0x820BA044;
		  /* 820BA044h */ case   43:  		/* cmplwi CR6, R30, 0 */
		/* 820BA044h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA044h case   43:*/		return 0x820BA048;
		  /* 820BA048h */ case   44:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA048h case   44:*/		if ( regs.CR[6].eq ) { return 0x820BA068;  }
		/* 820BA048h case   44:*/		return 0x820BA04C;
		  /* 820BA04Ch */ case   45:  		/* addi R11, R23, -4 */
		/* 820BA04Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820BA04Ch case   45:*/		return 0x820BA050;
		  /* 820BA050h */ case   46:  		/* mr R10, R29 */
		/* 820BA050h case   46:*/		regs.R10 = regs.R29;
		/* 820BA050h case   46:*/		return 0x820BA054;
		  /* 820BA054h */ case   47:  		/* cmplwi CR0, R30, 0 */
		/* 820BA054h case   47:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA054h case   47:*/		return 0x820BA058;
		  /* 820BA058h */ case   48:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA058h case   48:*/		if ( regs.CR[0].eq ) { return 0x820BA068;  }
		/* 820BA058h case   48:*/		return 0x820BA05C;
		  /* 820BA05Ch */ case   49:  		/* mtspr CTR, R30 */
		/* 820BA05Ch case   49:*/		regs.CTR = regs.R30;
		/* 820BA05Ch case   49:*/		return 0x820BA060;
		  /* 820BA060h */ case   50:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA060h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA060h case   50:*/		return 0x820BA064;
		  /* 820BA064h */ case   51:  		/* bc 16, CR0_LT, -4 */
		/* 820BA064h case   51:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA060;  }
		/* 820BA064h case   51:*/		return 0x820BA068;
	}
	return 0x820BA068;
} // Block from 820B9F98h-820BA068h (52 instructions)

//////////////////////////////////////////////////////
// Block at 820BA068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA068);
		  /* 820BA068h */ case    0:  		/* lwz R22, <#[R1 + 164]> */
		/* 820BA068h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BA068h case    0:*/		return 0x820BA06C;
		  /* 820BA06Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA06Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA06Ch case    1:*/		return 0x820BA070;
		  /* 820BA070h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA070h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA090;  }
		/* 820BA070h case    2:*/		return 0x820BA074;
		  /* 820BA074h */ case    3:  		/* addi R11, R22, -4 */
		/* 820BA074h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFFC);
		/* 820BA074h case    3:*/		return 0x820BA078;
		  /* 820BA078h */ case    4:  		/* mr R10, R29 */
		/* 820BA078h case    4:*/		regs.R10 = regs.R29;
		/* 820BA078h case    4:*/		return 0x820BA07C;
		  /* 820BA07Ch */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA07Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA07Ch case    5:*/		return 0x820BA080;
		  /* 820BA080h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA080h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA090;  }
		/* 820BA080h case    6:*/		return 0x820BA084;
		  /* 820BA084h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA084h case    7:*/		regs.CTR = regs.R30;
		/* 820BA084h case    7:*/		return 0x820BA088;
		  /* 820BA088h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA088h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA088h case    8:*/		return 0x820BA08C;
		  /* 820BA08Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA08Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA088;  }
		/* 820BA08Ch case    9:*/		return 0x820BA090;
	}
	return 0x820BA090;
} // Block from 820BA068h-820BA090h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA090);
		  /* 820BA090h */ case    0:  		/* lwz R21, <#[R1 + 168]> */
		/* 820BA090h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BA090h case    0:*/		return 0x820BA094;
		  /* 820BA094h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA094h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA094h case    1:*/		return 0x820BA098;
		  /* 820BA098h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA098h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA0B8;  }
		/* 820BA098h case    2:*/		return 0x820BA09C;
		  /* 820BA09Ch */ case    3:  		/* addi R11, R21, -4 */
		/* 820BA09Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0xFFFFFFFC);
		/* 820BA09Ch case    3:*/		return 0x820BA0A0;
		  /* 820BA0A0h */ case    4:  		/* mr R10, R29 */
		/* 820BA0A0h case    4:*/		regs.R10 = regs.R29;
		/* 820BA0A0h case    4:*/		return 0x820BA0A4;
		  /* 820BA0A4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA0A4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA0A4h case    5:*/		return 0x820BA0A8;
		  /* 820BA0A8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA0A8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA0B8;  }
		/* 820BA0A8h case    6:*/		return 0x820BA0AC;
		  /* 820BA0ACh */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA0ACh case    7:*/		regs.CTR = regs.R30;
		/* 820BA0ACh case    7:*/		return 0x820BA0B0;
		  /* 820BA0B0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA0B0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA0B0h case    8:*/		return 0x820BA0B4;
		  /* 820BA0B4h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA0B4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA0B0;  }
		/* 820BA0B4h case    9:*/		return 0x820BA0B8;
	}
	return 0x820BA0B8;
} // Block from 820BA090h-820BA0B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA0B8);
		  /* 820BA0B8h */ case    0:  		/* lwz R25, <#[R1 + 172]> */
		/* 820BA0B8h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BA0B8h case    0:*/		return 0x820BA0BC;
		  /* 820BA0BCh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA0BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA0BCh case    1:*/		return 0x820BA0C0;
		  /* 820BA0C0h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA0C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA0E0;  }
		/* 820BA0C0h case    2:*/		return 0x820BA0C4;
		  /* 820BA0C4h */ case    3:  		/* addi R11, R25, -4 */
		/* 820BA0C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820BA0C4h case    3:*/		return 0x820BA0C8;
		  /* 820BA0C8h */ case    4:  		/* mr R10, R29 */
		/* 820BA0C8h case    4:*/		regs.R10 = regs.R29;
		/* 820BA0C8h case    4:*/		return 0x820BA0CC;
		  /* 820BA0CCh */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA0CCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA0CCh case    5:*/		return 0x820BA0D0;
		  /* 820BA0D0h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA0D0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA0E0;  }
		/* 820BA0D0h case    6:*/		return 0x820BA0D4;
		  /* 820BA0D4h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA0D4h case    7:*/		regs.CTR = regs.R30;
		/* 820BA0D4h case    7:*/		return 0x820BA0D8;
		  /* 820BA0D8h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA0D8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA0D8h case    8:*/		return 0x820BA0DC;
		  /* 820BA0DCh */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA0DCh case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA0D8;  }
		/* 820BA0DCh case    9:*/		return 0x820BA0E0;
	}
	return 0x820BA0E0;
} // Block from 820BA0B8h-820BA0E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA0E0);
		  /* 820BA0E0h */ case    0:  		/* lwz R24, <#[R1 + 176]> */
		/* 820BA0E0h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BA0E0h case    0:*/		return 0x820BA0E4;
		  /* 820BA0E4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA0E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA0E4h case    1:*/		return 0x820BA0E8;
		  /* 820BA0E8h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA0E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA108;  }
		/* 820BA0E8h case    2:*/		return 0x820BA0EC;
		  /* 820BA0ECh */ case    3:  		/* addi R11, R24, -4 */
		/* 820BA0ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820BA0ECh case    3:*/		return 0x820BA0F0;
		  /* 820BA0F0h */ case    4:  		/* mr R10, R29 */
		/* 820BA0F0h case    4:*/		regs.R10 = regs.R29;
		/* 820BA0F0h case    4:*/		return 0x820BA0F4;
		  /* 820BA0F4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA0F4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA0F4h case    5:*/		return 0x820BA0F8;
		  /* 820BA0F8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA0F8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA108;  }
		/* 820BA0F8h case    6:*/		return 0x820BA0FC;
		  /* 820BA0FCh */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA0FCh case    7:*/		regs.CTR = regs.R30;
		/* 820BA0FCh case    7:*/		return 0x820BA100;
		  /* 820BA100h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA100h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA100h case    8:*/		return 0x820BA104;
		  /* 820BA104h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA104h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA100;  }
		/* 820BA104h case    9:*/		return 0x820BA108;
	}
	return 0x820BA108;
} // Block from 820BA0E0h-820BA108h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA108);
		  /* 820BA108h */ case    0:  		/* lwz R26, <#[R1 + 180]> */
		/* 820BA108h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BA108h case    0:*/		return 0x820BA10C;
		  /* 820BA10Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA10Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA10Ch case    1:*/		return 0x820BA110;
		  /* 820BA110h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BA110h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA150;  }
		/* 820BA110h case    2:*/		return 0x820BA114;
		  /* 820BA114h */ case    3:  		/* addi R11, R26, -4 */
		/* 820BA114h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BA114h case    3:*/		return 0x820BA118;
		  /* 820BA118h */ case    4:  		/* mr R10, R29 */
		/* 820BA118h case    4:*/		regs.R10 = regs.R29;
		/* 820BA118h case    4:*/		return 0x820BA11C;
		  /* 820BA11Ch */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA11Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA11Ch case    5:*/		return 0x820BA120;
		  /* 820BA120h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA120h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA130;  }
		/* 820BA120h case    6:*/		return 0x820BA124;
		  /* 820BA124h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA124h case    7:*/		regs.CTR = regs.R30;
		/* 820BA124h case    7:*/		return 0x820BA128;
		  /* 820BA128h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA128h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA128h case    8:*/		return 0x820BA12C;
		  /* 820BA12Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA12Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA128;  }
		/* 820BA12Ch case    9:*/		return 0x820BA130;
	}
	return 0x820BA130;
} // Block from 820BA108h-820BA130h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA130);
		  /* 820BA130h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA130h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA130h case    0:*/		return 0x820BA134;
		  /* 820BA134h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BA134h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BA150;  }
		/* 820BA134h case    1:*/		return 0x820BA138;
		  /* 820BA138h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BA138h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BA138h case    2:*/		return 0x820BA13C;
		  /* 820BA13Ch */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BA13Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA13Ch case    3:*/		return 0x820BA140;
		  /* 820BA140h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA140h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BA150;  }
		/* 820BA140h case    4:*/		return 0x820BA144;
		  /* 820BA144h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BA144h case    5:*/		regs.CTR = regs.R30;
		/* 820BA144h case    5:*/		return 0x820BA148;
		  /* 820BA148h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BA148h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA148h case    6:*/		return 0x820BA14C;
		  /* 820BA14Ch */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BA14Ch case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA148;  }
		/* 820BA14Ch case    7:*/		return 0x820BA150;
	}
	return 0x820BA150;
} // Block from 820BA130h-820BA150h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BA150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA150);
		  /* 820BA150h */ case    0:  		/* lwz R27, <#[R1 + 144]> */
		/* 820BA150h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000090) );
		/* 820BA150h case    0:*/		return 0x820BA154;
		  /* 820BA154h */ case    1:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BA154h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BA154h case    1:*/		return 0x820BA158;
		  /* 820BA158h */ case    2:  		/* li R9, 0 */
		/* 820BA158h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BA158h case    2:*/		return 0x820BA15C;
		  /* 820BA15Ch */ case    3:  		/* li R8, 0 */
		/* 820BA15Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA15Ch case    3:*/		return 0x820BA160;
		  /* 820BA160h */ case    4:  		/* mr R7, R27 */
		/* 820BA160h case    4:*/		regs.R7 = regs.R27;
		/* 820BA160h case    4:*/		return 0x820BA164;
		  /* 820BA164h */ case    5:  		/* mr R6, R23 */
		/* 820BA164h case    5:*/		regs.R6 = regs.R23;
		/* 820BA164h case    5:*/		return 0x820BA168;
		  /* 820BA168h */ case    6:  		/* oris R5, R30, 4304 */
		/* 820BA168h case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x10D0);
		/* 820BA168h case    6:*/		return 0x820BA16C;
		  /* 820BA16Ch */ case    7:  		/* mr R4, R16 */
		/* 820BA16Ch case    7:*/		regs.R4 = regs.R16;
		/* 820BA16Ch case    7:*/		return 0x820BA170;
		  /* 820BA170h */ case    8:  		/* mr R3, R14 */
		/* 820BA170h case    8:*/		regs.R3 = regs.R14;
		/* 820BA170h case    8:*/		return 0x820BA174;
		  /* 820BA174h */ case    9:  		/* bl -38508 */
		/* 820BA174h case    9:*/		regs.LR = 0x820BA178; return 0x820B0B08;
		/* 820BA174h case    9:*/		return 0x820BA178;
		  /* 820BA178h */ case   10:  		/* or. R31, R3, R3 */
		/* 820BA178h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA178h case   10:*/		return 0x820BA17C;
		  /* 820BA17Ch */ case   11:  		/* bc 12, CR0_LT, 16988 */
		/* 820BA17Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA17Ch case   11:*/		return 0x820BA180;
		  /* 820BA180h */ case   12:  		/* oris R28, R30, 4112 */
		/* 820BA180h case   12:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R30,0x1010);
		/* 820BA180h case   12:*/		return 0x820BA184;
		  /* 820BA184h */ case   13:  		/* li R9, 0 */
		/* 820BA184h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BA184h case   13:*/		return 0x820BA188;
		  /* 820BA188h */ case   14:  		/* li R8, 0 */
		/* 820BA188h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA188h case   14:*/		return 0x820BA18C;
		  /* 820BA18Ch */ case   15:  		/* mr R7, R23 */
		/* 820BA18Ch case   15:*/		regs.R7 = regs.R23;
		/* 820BA18Ch case   15:*/		return 0x820BA190;
		  /* 820BA190h */ case   16:  		/* mr R6, R22 */
		/* 820BA190h case   16:*/		regs.R6 = regs.R22;
		/* 820BA190h case   16:*/		return 0x820BA194;
		  /* 820BA194h */ case   17:  		/* mr R5, R28 */
		/* 820BA194h case   17:*/		regs.R5 = regs.R28;
		/* 820BA194h case   17:*/		return 0x820BA198;
		  /* 820BA198h */ case   18:  		/* mr R4, R16 */
		/* 820BA198h case   18:*/		regs.R4 = regs.R16;
		/* 820BA198h case   18:*/		return 0x820BA19C;
		  /* 820BA19Ch */ case   19:  		/* mr R3, R14 */
		/* 820BA19Ch case   19:*/		regs.R3 = regs.R14;
		/* 820BA19Ch case   19:*/		return 0x820BA1A0;
		  /* 820BA1A0h */ case   20:  		/* bl -38552 */
		/* 820BA1A0h case   20:*/		regs.LR = 0x820BA1A4; return 0x820B0B08;
		/* 820BA1A0h case   20:*/		return 0x820BA1A4;
		  /* 820BA1A4h */ case   21:  		/* or. R31, R3, R3 */
		/* 820BA1A4h case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA1A4h case   21:*/		return 0x820BA1A8;
		  /* 820BA1A8h */ case   22:  		/* bc 12, CR0_LT, 16944 */
		/* 820BA1A8h case   22:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA1A8h case   22:*/		return 0x820BA1AC;
		  /* 820BA1ACh */ case   23:  		/* oris R29, R30, 8208 */
		/* 820BA1ACh case   23:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R30,0x2010);
		/* 820BA1ACh case   23:*/		return 0x820BA1B0;
		  /* 820BA1B0h */ case   24:  		/* li R9, 4 */
		/* 820BA1B0h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BA1B0h case   24:*/		return 0x820BA1B4;
		  /* 820BA1B4h */ case   25:  		/* mr R8, R23 */
		/* 820BA1B4h case   25:*/		regs.R8 = regs.R23;
		/* 820BA1B4h case   25:*/		return 0x820BA1B8;
		  /* 820BA1B8h */ case   26:  		/* mr R7, R22 */
		/* 820BA1B8h case   26:*/		regs.R7 = regs.R22;
		/* 820BA1B8h case   26:*/		return 0x820BA1BC;
		  /* 820BA1BCh */ case   27:  		/* mr R6, R21 */
		/* 820BA1BCh case   27:*/		regs.R6 = regs.R21;
		/* 820BA1BCh case   27:*/		return 0x820BA1C0;
		  /* 820BA1C0h */ case   28:  		/* mr R5, R29 */
		/* 820BA1C0h case   28:*/		regs.R5 = regs.R29;
		/* 820BA1C0h case   28:*/		return 0x820BA1C4;
		  /* 820BA1C4h */ case   29:  		/* mr R4, R16 */
		/* 820BA1C4h case   29:*/		regs.R4 = regs.R16;
		/* 820BA1C4h case   29:*/		return 0x820BA1C8;
		  /* 820BA1C8h */ case   30:  		/* mr R3, R14 */
		/* 820BA1C8h case   30:*/		regs.R3 = regs.R14;
		/* 820BA1C8h case   30:*/		return 0x820BA1CC;
		  /* 820BA1CCh */ case   31:  		/* bl -38596 */
		/* 820BA1CCh case   31:*/		regs.LR = 0x820BA1D0; return 0x820B0B08;
		/* 820BA1CCh case   31:*/		return 0x820BA1D0;
		  /* 820BA1D0h */ case   32:  		/* or. R31, R3, R3 */
		/* 820BA1D0h case   32:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA1D0h case   32:*/		return 0x820BA1D4;
		  /* 820BA1D4h */ case   33:  		/* bc 12, CR0_LT, 16900 */
		/* 820BA1D4h case   33:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA1D4h case   33:*/		return 0x820BA1D8;
		  /* 820BA1D8h */ case   34:  		/* li R9, 0 */
		/* 820BA1D8h case   34:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BA1D8h case   34:*/		return 0x820BA1DC;
		  /* 820BA1DCh */ case   35:  		/* li R8, 0 */
		/* 820BA1DCh case   35:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA1DCh case   35:*/		return 0x820BA1E0;
		  /* 820BA1E0h */ case   36:  		/* mr R7, R27 */
		/* 820BA1E0h case   36:*/		regs.R7 = regs.R27;
		/* 820BA1E0h case   36:*/		return 0x820BA1E4;
		  /* 820BA1E4h */ case   37:  		/* mr R6, R25 */
		/* 820BA1E4h case   37:*/		regs.R6 = regs.R25;
		/* 820BA1E4h case   37:*/		return 0x820BA1E8;
		  /* 820BA1E8h */ case   38:  		/* oris R5, R30, 4320 */
		/* 820BA1E8h case   38:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x10E0);
		/* 820BA1E8h case   38:*/		return 0x820BA1EC;
		  /* 820BA1ECh */ case   39:  		/* mr R4, R16 */
		/* 820BA1ECh case   39:*/		regs.R4 = regs.R16;
		/* 820BA1ECh case   39:*/		return 0x820BA1F0;
		  /* 820BA1F0h */ case   40:  		/* mr R3, R14 */
		/* 820BA1F0h case   40:*/		regs.R3 = regs.R14;
		/* 820BA1F0h case   40:*/		return 0x820BA1F4;
		  /* 820BA1F4h */ case   41:  		/* bl -38636 */
		/* 820BA1F4h case   41:*/		regs.LR = 0x820BA1F8; return 0x820B0B08;
		/* 820BA1F4h case   41:*/		return 0x820BA1F8;
		  /* 820BA1F8h */ case   42:  		/* or. R31, R3, R3 */
		/* 820BA1F8h case   42:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA1F8h case   42:*/		return 0x820BA1FC;
		  /* 820BA1FCh */ case   43:  		/* bc 12, CR0_LT, 16860 */
		/* 820BA1FCh case   43:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA1FCh case   43:*/		return 0x820BA200;
		  /* 820BA200h */ case   44:  		/* li R9, 0 */
		/* 820BA200h case   44:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BA200h case   44:*/		return 0x820BA204;
		  /* 820BA204h */ case   45:  		/* li R8, 0 */
		/* 820BA204h case   45:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA204h case   45:*/		return 0x820BA208;
		  /* 820BA208h */ case   46:  		/* mr R7, R25 */
		/* 820BA208h case   46:*/		regs.R7 = regs.R25;
		/* 820BA208h case   46:*/		return 0x820BA20C;
		  /* 820BA20Ch */ case   47:  		/* mr R6, R24 */
		/* 820BA20Ch case   47:*/		regs.R6 = regs.R24;
		/* 820BA20Ch case   47:*/		return 0x820BA210;
		  /* 820BA210h */ case   48:  		/* mr R5, R28 */
		/* 820BA210h case   48:*/		regs.R5 = regs.R28;
		/* 820BA210h case   48:*/		return 0x820BA214;
		  /* 820BA214h */ case   49:  		/* mr R4, R16 */
		/* 820BA214h case   49:*/		regs.R4 = regs.R16;
		/* 820BA214h case   49:*/		return 0x820BA218;
		  /* 820BA218h */ case   50:  		/* mr R3, R14 */
		/* 820BA218h case   50:*/		regs.R3 = regs.R14;
		/* 820BA218h case   50:*/		return 0x820BA21C;
		  /* 820BA21Ch */ case   51:  		/* bl -38676 */
		/* 820BA21Ch case   51:*/		regs.LR = 0x820BA220; return 0x820B0B08;
		/* 820BA21Ch case   51:*/		return 0x820BA220;
		  /* 820BA220h */ case   52:  		/* or. R31, R3, R3 */
		/* 820BA220h case   52:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA220h case   52:*/		return 0x820BA224;
		  /* 820BA224h */ case   53:  		/* bc 12, CR0_LT, 16820 */
		/* 820BA224h case   53:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA224h case   53:*/		return 0x820BA228;
		  /* 820BA228h */ case   54:  		/* li R9, 4 */
		/* 820BA228h case   54:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BA228h case   54:*/		return 0x820BA22C;
		  /* 820BA22Ch */ case   55:  		/* mr R8, R25 */
		/* 820BA22Ch case   55:*/		regs.R8 = regs.R25;
		/* 820BA22Ch case   55:*/		return 0x820BA230;
		  /* 820BA230h */ case   56:  		/* mr R7, R24 */
		/* 820BA230h case   56:*/		regs.R7 = regs.R24;
		/* 820BA230h case   56:*/		return 0x820BA234;
		  /* 820BA234h */ case   57:  		/* mr R6, R26 */
		/* 820BA234h case   57:*/		regs.R6 = regs.R26;
		/* 820BA234h case   57:*/		return 0x820BA238;
		  /* 820BA238h */ case   58:  		/* mr R5, R29 */
		/* 820BA238h case   58:*/		regs.R5 = regs.R29;
		/* 820BA238h case   58:*/		return 0x820BA23C;
		  /* 820BA23Ch */ case   59:  		/* mr R4, R16 */
		/* 820BA23Ch case   59:*/		regs.R4 = regs.R16;
		/* 820BA23Ch case   59:*/		return 0x820BA240;
		  /* 820BA240h */ case   60:  		/* mr R3, R14 */
		/* 820BA240h case   60:*/		regs.R3 = regs.R14;
		/* 820BA240h case   60:*/		return 0x820BA244;
		  /* 820BA244h */ case   61:  		/* bl -38716 */
		/* 820BA244h case   61:*/		regs.LR = 0x820BA248; return 0x820B0B08;
		/* 820BA244h case   61:*/		return 0x820BA248;
		  /* 820BA248h */ case   62:  		/* or. R31, R3, R3 */
		/* 820BA248h case   62:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA248h case   62:*/		return 0x820BA24C;
		  /* 820BA24Ch */ case   63:  		/* bc 12, CR0_LT, 16780 */
		/* 820BA24Ch case   63:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA24Ch case   63:*/		return 0x820BA250;
		  /* 820BA250h */ case   64:  		/* li R9, 4 */
		/* 820BA250h case   64:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BA250h case   64:*/		return 0x820BA254;
		  /* 820BA254h */ case   65:  		/* mr R8, R26 */
		/* 820BA254h case   65:*/		regs.R8 = regs.R26;
		/* 820BA254h case   65:*/		return 0x820BA258;
		  /* 820BA258h */ case   66:  		/* mr R7, R21 */
		/* 820BA258h case   66:*/		regs.R7 = regs.R21;
		/* 820BA258h case   66:*/		return 0x820BA25C;
		  /* 820BA25Ch */ case   67:  		/* b -8004 */
		/* 820BA25Ch case   67:*/		return 0x820B8318;
		/* 820BA25Ch case   67:*/		return 0x820BA260;
		  /* 820BA260h */ case   68:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BA260h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BA260h case   68:*/		return 0x820BA264;
		  /* 820BA264h */ case   69:  		/* cmplwi CR6, R11, 0 */
		/* 820BA264h case   69:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BA264h case   69:*/		return 0x820BA268;
		  /* 820BA268h */ case   70:  		/* bc 12, CR6_EQ, 16744 */
		/* 820BA268h case   70:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BA268h case   70:*/		return 0x820BA26C;
		  /* 820BA26Ch */ case   71:  		/* cmplwi CR6, R15, 0 */
		/* 820BA26Ch case   71:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BA26Ch case   71:*/		return 0x820BA270;
		  /* 820BA270h */ case   72:  		/* bc 12, CR6_EQ, -6308 */
		/* 820BA270h case   72:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA270h case   72:*/		return 0x820BA274;
		  /* 820BA274h */ case   73:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BA274h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BA274h case   73:*/		return 0x820BA278;
		  /* 820BA278h */ case   74:  		/* lwz R11, <#[R11 + 108]> */
		/* 820BA278h case   74:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 820BA278h case   74:*/		return 0x820BA27C;
		  /* 820BA27Ch */ case   75:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 820BA27Ch case   75:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 820BA27Ch case   75:*/		return 0x820BA280;
		  /* 820BA280h */ case   76:  		/* bc 4, CR0_EQ, 592 */
		/* 820BA280h case   76:*/		if ( !regs.CR[0].eq ) { return 0x820BA4D0;  }
		/* 820BA280h case   76:*/		return 0x820BA284;
		  /* 820BA284h */ case   77:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820BA284h case   77:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820BA284h case   77:*/		return 0x820BA288;
		  /* 820BA288h */ case   78:  		/* mr R3, R14 */
		/* 820BA288h case   78:*/		regs.R3 = regs.R14;
		/* 820BA288h case   78:*/		return 0x820BA28C;
		  /* 820BA28Ch */ case   79:  		/* mr R4, R31 */
		/* 820BA28Ch case   79:*/		regs.R4 = regs.R31;
		/* 820BA28Ch case   79:*/		return 0x820BA290;
		  /* 820BA290h */ case   80:  		/* bl -39840 */
		/* 820BA290h case   80:*/		regs.LR = 0x820BA294; return 0x820B06F0;
		/* 820BA290h case   80:*/		return 0x820BA294;
		  /* 820BA294h */ case   81:  		/* or. R11, R3, R3 */
		/* 820BA294h case   81:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BA294h case   81:*/		return 0x820BA298;
		  /* 820BA298h */ case   82:  		/* bc 12, CR0_EQ, 12680 */
		/* 820BA298h case   82:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BA298h case   82:*/		return 0x820BA29C;
		  /* 820BA29Ch */ case   83:  		/* li R9, 4 */
		/* 820BA29Ch case   83:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BA29Ch case   83:*/		return 0x820BA2A0;
		  /* 820BA2A0h */ case   84:  		/* addi R10, R1, 156 */
		/* 820BA2A0h case   84:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820BA2A0h case   84:*/		return 0x820BA2A4;
		  /* 820BA2A4h */ case   85:  		/* mtspr CTR, R9 */
		/* 820BA2A4h case   85:*/		regs.CTR = regs.R9;
		/* 820BA2A4h case   85:*/		return 0x820BA2A8;
		  /* 820BA2A8h */ case   86:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BA2A8h case   86:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BA2A8h case   86:*/		return 0x820BA2AC;
		  /* 820BA2ACh */ case   87:  		/* add R11, R31, R11 */
		/* 820BA2ACh case   87:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 820BA2ACh case   87:*/		return 0x820BA2B0;
		  /* 820BA2B0h */ case   88:  		/* bc 16, CR0_LT, -8 */
		/* 820BA2B0h case   88:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA2A8;  }
		/* 820BA2B0h case   88:*/		return 0x820BA2B4;
		  /* 820BA2B4h */ case   89:  		/* lwz R23, <#[R1 + 160]> */
		/* 820BA2B4h case   89:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BA2B4h case   89:*/		return 0x820BA2B8;
		  /* 820BA2B8h */ case   90:  		/* li R29, -1 */
		/* 820BA2B8h case   90:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BA2B8h case   90:*/		return 0x820BA2BC;
		  /* 820BA2BCh */ case   91:  		/* cmplwi CR6, R30, 0 */
		/* 820BA2BCh case   91:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA2BCh case   91:*/		return 0x820BA2C0;
		  /* 820BA2C0h */ case   92:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA2C0h case   92:*/		if ( regs.CR[6].eq ) { return 0x820BA2E0;  }
		/* 820BA2C0h case   92:*/		return 0x820BA2C4;
		  /* 820BA2C4h */ case   93:  		/* addi R11, R23, -4 */
		/* 820BA2C4h case   93:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820BA2C4h case   93:*/		return 0x820BA2C8;
		  /* 820BA2C8h */ case   94:  		/* mr R10, R29 */
		/* 820BA2C8h case   94:*/		regs.R10 = regs.R29;
		/* 820BA2C8h case   94:*/		return 0x820BA2CC;
		  /* 820BA2CCh */ case   95:  		/* cmplwi CR0, R30, 0 */
		/* 820BA2CCh case   95:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA2CCh case   95:*/		return 0x820BA2D0;
		  /* 820BA2D0h */ case   96:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA2D0h case   96:*/		if ( regs.CR[0].eq ) { return 0x820BA2E0;  }
		/* 820BA2D0h case   96:*/		return 0x820BA2D4;
		  /* 820BA2D4h */ case   97:  		/* mtspr CTR, R30 */
		/* 820BA2D4h case   97:*/		regs.CTR = regs.R30;
		/* 820BA2D4h case   97:*/		return 0x820BA2D8;
		  /* 820BA2D8h */ case   98:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA2D8h case   98:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA2D8h case   98:*/		return 0x820BA2DC;
		  /* 820BA2DCh */ case   99:  		/* bc 16, CR0_LT, -4 */
		/* 820BA2DCh case   99:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA2D8;  }
		/* 820BA2DCh case   99:*/		return 0x820BA2E0;
	}
	return 0x820BA2E0;
} // Block from 820BA150h-820BA2E0h (100 instructions)

//////////////////////////////////////////////////////
// Block at 820BA2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA2E0);
		  /* 820BA2E0h */ case    0:  		/* lwz R24, <#[R1 + 164]> */
		/* 820BA2E0h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BA2E0h case    0:*/		return 0x820BA2E4;
		  /* 820BA2E4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA2E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA2E4h case    1:*/		return 0x820BA2E8;
		  /* 820BA2E8h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA2E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA308;  }
		/* 820BA2E8h case    2:*/		return 0x820BA2EC;
		  /* 820BA2ECh */ case    3:  		/* addi R11, R24, -4 */
		/* 820BA2ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820BA2ECh case    3:*/		return 0x820BA2F0;
		  /* 820BA2F0h */ case    4:  		/* mr R10, R29 */
		/* 820BA2F0h case    4:*/		regs.R10 = regs.R29;
		/* 820BA2F0h case    4:*/		return 0x820BA2F4;
		  /* 820BA2F4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA2F4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA2F4h case    5:*/		return 0x820BA2F8;
		  /* 820BA2F8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA2F8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA308;  }
		/* 820BA2F8h case    6:*/		return 0x820BA2FC;
		  /* 820BA2FCh */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA2FCh case    7:*/		regs.CTR = regs.R30;
		/* 820BA2FCh case    7:*/		return 0x820BA300;
		  /* 820BA300h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA300h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA300h case    8:*/		return 0x820BA304;
		  /* 820BA304h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA304h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA300;  }
		/* 820BA304h case    9:*/		return 0x820BA308;
	}
	return 0x820BA308;
} // Block from 820BA2E0h-820BA308h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA308);
		  /* 820BA308h */ case    0:  		/* lwz R27, <#[R1 + 168]> */
		/* 820BA308h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BA308h case    0:*/		return 0x820BA30C;
		  /* 820BA30Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA30Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA30Ch case    1:*/		return 0x820BA310;
		  /* 820BA310h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA310h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA330;  }
		/* 820BA310h case    2:*/		return 0x820BA314;
		  /* 820BA314h */ case    3:  		/* addi R11, R27, -4 */
		/* 820BA314h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BA314h case    3:*/		return 0x820BA318;
		  /* 820BA318h */ case    4:  		/* mr R10, R29 */
		/* 820BA318h case    4:*/		regs.R10 = regs.R29;
		/* 820BA318h case    4:*/		return 0x820BA31C;
		  /* 820BA31Ch */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA31Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA31Ch case    5:*/		return 0x820BA320;
		  /* 820BA320h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA320h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA330;  }
		/* 820BA320h case    6:*/		return 0x820BA324;
		  /* 820BA324h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA324h case    7:*/		regs.CTR = regs.R30;
		/* 820BA324h case    7:*/		return 0x820BA328;
		  /* 820BA328h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA328h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA328h case    8:*/		return 0x820BA32C;
		  /* 820BA32Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA32Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA328;  }
		/* 820BA32Ch case    9:*/		return 0x820BA330;
	}
	return 0x820BA330;
} // Block from 820BA308h-820BA330h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA330);
		  /* 820BA330h */ case    0:  		/* lwz R25, <#[R1 + 172]> */
		/* 820BA330h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BA330h case    0:*/		return 0x820BA334;
		  /* 820BA334h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA334h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA334h case    1:*/		return 0x820BA338;
		  /* 820BA338h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BA338h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA378;  }
		/* 820BA338h case    2:*/		return 0x820BA33C;
		  /* 820BA33Ch */ case    3:  		/* addi R11, R25, -4 */
		/* 820BA33Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820BA33Ch case    3:*/		return 0x820BA340;
		  /* 820BA340h */ case    4:  		/* mr R10, R29 */
		/* 820BA340h case    4:*/		regs.R10 = regs.R29;
		/* 820BA340h case    4:*/		return 0x820BA344;
		  /* 820BA344h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA344h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA344h case    5:*/		return 0x820BA348;
		  /* 820BA348h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA348h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA358;  }
		/* 820BA348h case    6:*/		return 0x820BA34C;
		  /* 820BA34Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA34Ch case    7:*/		regs.CTR = regs.R30;
		/* 820BA34Ch case    7:*/		return 0x820BA350;
		  /* 820BA350h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA350h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA350h case    8:*/		return 0x820BA354;
		  /* 820BA354h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA354h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA350;  }
		/* 820BA354h case    9:*/		return 0x820BA358;
	}
	return 0x820BA358;
} // Block from 820BA330h-820BA358h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA358);
		  /* 820BA358h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA358h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA358h case    0:*/		return 0x820BA35C;
		  /* 820BA35Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BA35Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820BA378;  }
		/* 820BA35Ch case    1:*/		return 0x820BA360;
		  /* 820BA360h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BA360h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BA360h case    2:*/		return 0x820BA364;
		  /* 820BA364h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BA364h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA364h case    3:*/		return 0x820BA368;
		  /* 820BA368h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA368h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BA378;  }
		/* 820BA368h case    4:*/		return 0x820BA36C;
		  /* 820BA36Ch */ case    5:  		/* mtspr CTR, R30 */
		/* 820BA36Ch case    5:*/		regs.CTR = regs.R30;
		/* 820BA36Ch case    5:*/		return 0x820BA370;
		  /* 820BA370h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BA370h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA370h case    6:*/		return 0x820BA374;
		  /* 820BA374h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BA374h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA370;  }
		/* 820BA374h case    7:*/		return 0x820BA378;
	}
	return 0x820BA378;
} // Block from 820BA358h-820BA378h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BA378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA378);
		  /* 820BA378h */ case    0:  		/* rlwinm R29, R30, 0, 12, 31 */
		/* 820BA378h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R30);
		/* 820BA378h case    0:*/		return 0x820BA37C;
		  /* 820BA37Ch */ case    1:  		/* lwz R26, <#[R1 + 144]> */
		/* 820BA37Ch case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000090) );
		/* 820BA37Ch case    1:*/		return 0x820BA380;
		  /* 820BA380h */ case    2:  		/* li R9, 64 */
		/* 820BA380h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA380h case    2:*/		return 0x820BA384;
		  /* 820BA384h */ case    3:  		/* oris R28, R29, 4112 */
		/* 820BA384h case    3:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R29,0x1010);
		/* 820BA384h case    3:*/		return 0x820BA388;
		  /* 820BA388h */ case    4:  		/* li R8, 0 */
		/* 820BA388h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA388h case    4:*/		return 0x820BA38C;
		  /* 820BA38Ch */ case    5:  		/* mr R7, R26 */
		/* 820BA38Ch case    5:*/		regs.R7 = regs.R26;
		/* 820BA38Ch case    5:*/		return 0x820BA390;
		  /* 820BA390h */ case    6:  		/* mr R6, R23 */
		/* 820BA390h case    6:*/		regs.R6 = regs.R23;
		/* 820BA390h case    6:*/		return 0x820BA394;
		  /* 820BA394h */ case    7:  		/* mr R5, R28 */
		/* 820BA394h case    7:*/		regs.R5 = regs.R28;
		/* 820BA394h case    7:*/		return 0x820BA398;
		  /* 820BA398h */ case    8:  		/* mr R4, R16 */
		/* 820BA398h case    8:*/		regs.R4 = regs.R16;
		/* 820BA398h case    8:*/		return 0x820BA39C;
		  /* 820BA39Ch */ case    9:  		/* mr R3, R14 */
		/* 820BA39Ch case    9:*/		regs.R3 = regs.R14;
		/* 820BA39Ch case    9:*/		return 0x820BA3A0;
		  /* 820BA3A0h */ case   10:  		/* bl -39064 */
		/* 820BA3A0h case   10:*/		regs.LR = 0x820BA3A4; return 0x820B0B08;
		/* 820BA3A0h case   10:*/		return 0x820BA3A4;
		  /* 820BA3A4h */ case   11:  		/* or. R31, R3, R3 */
		/* 820BA3A4h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA3A4h case   11:*/		return 0x820BA3A8;
		  /* 820BA3A8h */ case   12:  		/* bc 12, CR0_LT, 16432 */
		/* 820BA3A8h case   12:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA3A8h case   12:*/		return 0x820BA3AC;
		  /* 820BA3ACh */ case   13:  		/* li R9, 64 */
		/* 820BA3ACh case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA3ACh case   13:*/		return 0x820BA3B0;
		  /* 820BA3B0h */ case   14:  		/* mr R8, R23 */
		/* 820BA3B0h case   14:*/		regs.R8 = regs.R23;
		/* 820BA3B0h case   14:*/		return 0x820BA3B4;
		  /* 820BA3B4h */ case   15:  		/* mr R7, R26 */
		/* 820BA3B4h case   15:*/		regs.R7 = regs.R26;
		/* 820BA3B4h case   15:*/		return 0x820BA3B8;
		  /* 820BA3B8h */ case   16:  		/* mr R6, R24 */
		/* 820BA3B8h case   16:*/		regs.R6 = regs.R24;
		/* 820BA3B8h case   16:*/		return 0x820BA3BC;
		  /* 820BA3BCh */ case   17:  		/* oris R5, R29, 8256 */
		/* 820BA3BCh case   17:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2040);
		/* 820BA3BCh case   17:*/		return 0x820BA3C0;
		  /* 820BA3C0h */ case   18:  		/* mr R4, R16 */
		/* 820BA3C0h case   18:*/		regs.R4 = regs.R16;
		/* 820BA3C0h case   18:*/		return 0x820BA3C4;
		  /* 820BA3C4h */ case   19:  		/* mr R3, R14 */
		/* 820BA3C4h case   19:*/		regs.R3 = regs.R14;
		/* 820BA3C4h case   19:*/		return 0x820BA3C8;
		  /* 820BA3C8h */ case   20:  		/* bl -39104 */
		/* 820BA3C8h case   20:*/		regs.LR = 0x820BA3CC; return 0x820B0B08;
		/* 820BA3C8h case   20:*/		return 0x820BA3CC;
		  /* 820BA3CCh */ case   21:  		/* or. R31, R3, R3 */
		/* 820BA3CCh case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA3CCh case   21:*/		return 0x820BA3D0;
		  /* 820BA3D0h */ case   22:  		/* bc 12, CR0_LT, 16392 */
		/* 820BA3D0h case   22:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA3D0h case   22:*/		return 0x820BA3D4;
		  /* 820BA3D4h */ case   23:  		/* li R9, 64 */
		/* 820BA3D4h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA3D4h case   23:*/		return 0x820BA3D8;
		  /* 820BA3D8h */ case   24:  		/* mr R8, R24 */
		/* 820BA3D8h case   24:*/		regs.R8 = regs.R24;
		/* 820BA3D8h case   24:*/		return 0x820BA3DC;
		  /* 820BA3DCh */ case   25:  		/* mr R7, R24 */
		/* 820BA3DCh case   25:*/		regs.R7 = regs.R24;
		/* 820BA3DCh case   25:*/		return 0x820BA3E0;
		  /* 820BA3E0h */ case   26:  		/* mr R6, R27 */
		/* 820BA3E0h case   26:*/		regs.R6 = regs.R27;
		/* 820BA3E0h case   26:*/		return 0x820BA3E4;
		  /* 820BA3E4h */ case   27:  		/* oris R5, R29, 8272 */
		/* 820BA3E4h case   27:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2050);
		/* 820BA3E4h case   27:*/		return 0x820BA3E8;
		  /* 820BA3E8h */ case   28:  		/* mr R4, R16 */
		/* 820BA3E8h case   28:*/		regs.R4 = regs.R16;
		/* 820BA3E8h case   28:*/		return 0x820BA3EC;
		  /* 820BA3ECh */ case   29:  		/* mr R3, R14 */
		/* 820BA3ECh case   29:*/		regs.R3 = regs.R14;
		/* 820BA3ECh case   29:*/		return 0x820BA3F0;
		  /* 820BA3F0h */ case   30:  		/* bl -39144 */
		/* 820BA3F0h case   30:*/		regs.LR = 0x820BA3F4; return 0x820B0B08;
		/* 820BA3F0h case   30:*/		return 0x820BA3F4;
		  /* 820BA3F4h */ case   31:  		/* or. R31, R3, R3 */
		/* 820BA3F4h case   31:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA3F4h case   31:*/		return 0x820BA3F8;
		  /* 820BA3F8h */ case   32:  		/* bc 12, CR0_LT, 16352 */
		/* 820BA3F8h case   32:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA3F8h case   32:*/		return 0x820BA3FC;
		  /* 820BA3FCh */ case   33:  		/* li R9, 64 */
		/* 820BA3FCh case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA3FCh case   33:*/		return 0x820BA400;
		  /* 820BA400h */ case   34:  		/* li R8, 0 */
		/* 820BA400h case   34:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA400h case   34:*/		return 0x820BA404;
		  /* 820BA404h */ case   35:  		/* mr R7, R27 */
		/* 820BA404h case   35:*/		regs.R7 = regs.R27;
		/* 820BA404h case   35:*/		return 0x820BA408;
		  /* 820BA408h */ case   36:  		/* mr R6, R25 */
		/* 820BA408h case   36:*/		regs.R6 = regs.R25;
		/* 820BA408h case   36:*/		return 0x820BA40C;
		  /* 820BA40Ch */ case   37:  		/* mr R5, R28 */
		/* 820BA40Ch case   37:*/		regs.R5 = regs.R28;
		/* 820BA40Ch case   37:*/		return 0x820BA410;
		  /* 820BA410h */ case   38:  		/* mr R4, R16 */
		/* 820BA410h case   38:*/		regs.R4 = regs.R16;
		/* 820BA410h case   38:*/		return 0x820BA414;
		  /* 820BA414h */ case   39:  		/* mr R3, R14 */
		/* 820BA414h case   39:*/		regs.R3 = regs.R14;
		/* 820BA414h case   39:*/		return 0x820BA418;
		  /* 820BA418h */ case   40:  		/* bl -39184 */
		/* 820BA418h case   40:*/		regs.LR = 0x820BA41C; return 0x820B0B08;
		/* 820BA418h case   40:*/		return 0x820BA41C;
		  /* 820BA41Ch */ case   41:  		/* or. R31, R3, R3 */
		/* 820BA41Ch case   41:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA41Ch case   41:*/		return 0x820BA420;
		  /* 820BA420h */ case   42:  		/* bc 12, CR0_LT, 16312 */
		/* 820BA420h case   42:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA420h case   42:*/		return 0x820BA424;
		  /* 820BA424h */ case   43:  		/* li R9, 87 */
		/* 820BA424h case   43:*/		cpu::op::li<0>(regs,&regs.R9,0x57);
		/* 820BA424h case   43:*/		return 0x820BA428;
		  /* 820BA428h */ case   44:  		/* mr R8, R27 */
		/* 820BA428h case   44:*/		regs.R8 = regs.R27;
		/* 820BA428h case   44:*/		return 0x820BA42C;
		  /* 820BA42Ch */ case   45:  		/* mr R7, R25 */
		/* 820BA42Ch case   45:*/		regs.R7 = regs.R25;
		/* 820BA42Ch case   45:*/		return 0x820BA430;
		  /* 820BA430h */ case   46:  		/* mr R6, R15 */
		/* 820BA430h case   46:*/		regs.R6 = regs.R15;
		/* 820BA430h case   46:*/		return 0x820BA434;
		  /* 820BA434h */ case   47:  		/* oris R5, R29, 8240 */
		/* 820BA434h case   47:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2030);
		/* 820BA434h case   47:*/		return 0x820BA438;
		  /* 820BA438h */ case   48:  		/* mr R4, R16 */
		/* 820BA438h case   48:*/		regs.R4 = regs.R16;
		/* 820BA438h case   48:*/		return 0x820BA43C;
		  /* 820BA43Ch */ case   49:  		/* mr R3, R14 */
		/* 820BA43Ch case   49:*/		regs.R3 = regs.R14;
		/* 820BA43Ch case   49:*/		return 0x820BA440;
		  /* 820BA440h */ case   50:  		/* bl -39224 */
		/* 820BA440h case   50:*/		regs.LR = 0x820BA444; return 0x820B0B08;
		/* 820BA440h case   50:*/		return 0x820BA444;
		  /* 820BA444h */ case   51:  		/* or. R31, R3, R3 */
		/* 820BA444h case   51:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA444h case   51:*/		return 0x820BA448;
		  /* 820BA448h */ case   52:  		/* bc 12, CR0_LT, 16272 */
		/* 820BA448h case   52:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA448h case   52:*/		return 0x820BA44C;
		  /* 820BA44Ch */ case   53:  		/* mr R27, R22 */
		/* 820BA44Ch case   53:*/		regs.R27 = regs.R22;
		/* 820BA44Ch case   53:*/		return 0x820BA450;
		  /* 820BA450h */ case   54:  		/* cmplwi CR6, R30, 0 */
		/* 820BA450h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA450h case   54:*/		return 0x820BA454;
		  /* 820BA454h */ case   55:  		/* bc 12, CR6_EQ, -6792 */
		/* 820BA454h case   55:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA454h case   55:*/		return 0x820BA458;
		  /* 820BA458h */ case   56:  		/* mr R29, R15 */
		/* 820BA458h case   56:*/		regs.R29 = regs.R15;
		/* 820BA458h case   56:*/		return 0x820BA45C;
		  /* 820BA45Ch */ case   57:  		/* subf R28, R15, R26 */
		/* 820BA45Ch case   57:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R15,regs.R26);
		/* 820BA45Ch case   57:*/		return 0x820BA460;
		  /* 820BA460h */ case   58:  		/* addi R5, R1, 160 */
		/* 820BA460h case   58:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820BA460h case   58:*/		return 0x820BA464;
		  /* 820BA464h */ case   59:  		/* lwzx R4, <#[R28 + R29]> */
		/* 820BA464h case   59:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + regs.R29 + 0x00000000) );
		/* 820BA464h case   59:*/		return 0x820BA468;
		  /* 820BA468h */ case   60:  		/* mr R3, R14 */
		/* 820BA468h case   60:*/		regs.R3 = regs.R14;
		/* 820BA468h case   60:*/		return 0x820BA46C;
		  /* 820BA46Ch */ case   61:  		/* bl -46668 */
		/* 820BA46Ch case   61:*/		regs.LR = 0x820BA470; return 0x820AEE20;
		/* 820BA46Ch case   61:*/		return 0x820BA470;
		  /* 820BA470h */ case   62:  		/* or. R31, R3, R3 */
		/* 820BA470h case   62:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA470h case   62:*/		return 0x820BA474;
		  /* 820BA474h */ case   63:  		/* bc 12, CR0_LT, 16228 */
		/* 820BA474h case   63:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA474h case   63:*/		return 0x820BA478;
		  /* 820BA478h */ case   64:  		/* lfd FR0, <#[R14 + 176]> */
		/* 820BA478h case   64:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R14 + 0x000000B0) );
		/* 820BA478h case   64:*/		return 0x820BA47C;
		  /* 820BA47Ch */ case   65:  		/* lfd FR13, <#[R1 + 160]> */
		/* 820BA47Ch case   65:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BA47Ch case   65:*/		return 0x820BA480;
		  /* 820BA480h */ case   66:  		/* lfd FR12, <#[R1 + 168]> */
		/* 820BA480h case   66:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BA480h case   66:*/		return 0x820BA484;
		  /* 820BA484h */ case   67:  		/* fcmpu CR6, FR13, FR0 */
		/* 820BA484h case   67:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820BA484h case   67:*/		return 0x820BA488;
		  /* 820BA488h */ case   68:  		/* bc 4, CR6_GT, 24 */
		/* 820BA488h case   68:*/		if ( !regs.CR[6].gt ) { return 0x820BA4A0;  }
		/* 820BA488h case   68:*/		return 0x820BA48C;
		  /* 820BA48Ch */ case   69:  		/* lfd FR11, <#[R14 + 168]> */
		/* 820BA48Ch case   69:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R14 + 0x000000A8) );
		/* 820BA48Ch case   69:*/		return 0x820BA490;
		  /* 820BA490h */ case   70:  		/* fcmpu CR6, FR12, FR11 */
		/* 820BA490h case   70:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR11);
		/* 820BA490h case   70:*/		return 0x820BA494;
		  /* 820BA494h */ case   71:  		/* bc 4, CR6_LT, 12 */
		/* 820BA494h case   71:*/		if ( !regs.CR[6].lt ) { return 0x820BA4A0;  }
		/* 820BA494h case   71:*/		return 0x820BA498;
		  /* 820BA498h */ case   72:  		/* lwz R11, <#[R14 + 32]> */
		/* 820BA498h case   72:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 820BA498h case   72:*/		return 0x820BA49C;
		  /* 820BA49Ch */ case   73:  		/* b 28 */
		/* 820BA49Ch case   73:*/		return 0x820BA4B8;
		/* 820BA49Ch case   73:*/		return 0x820BA4A0;
	}
	return 0x820BA4A0;
} // Block from 820BA378h-820BA4A0h (74 instructions)

//////////////////////////////////////////////////////
// Block at 820BA4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA4A0);
		  /* 820BA4A0h */ case    0:  		/* lfd FR11, <#[R14 + 168]> */
		/* 820BA4A0h case    0:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R14 + 0x000000A8) );
		/* 820BA4A0h case    0:*/		return 0x820BA4A4;
		  /* 820BA4A4h */ case    1:  		/* fcmpu CR6, FR13, FR11 */
		/* 820BA4A4h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR11);
		/* 820BA4A4h case    1:*/		return 0x820BA4A8;
		  /* 820BA4A8h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 820BA4A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA4B4;  }
		/* 820BA4A8h case    2:*/		return 0x820BA4AC;
		  /* 820BA4ACh */ case    3:  		/* fcmpu CR6, FR12, FR0 */
		/* 820BA4ACh case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR0);
		/* 820BA4ACh case    3:*/		return 0x820BA4B0;
		  /* 820BA4B0h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 820BA4B0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BA4BC;  }
		/* 820BA4B0h case    4:*/		return 0x820BA4B4;
	}
	return 0x820BA4B4;
} // Block from 820BA4A0h-820BA4B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BA4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA4B4);
		  /* 820BA4B4h */ case    0:  		/* lwz R11, <#[R14 + 36]> */
		/* 820BA4B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 820BA4B4h case    0:*/		return 0x820BA4B8;
	}
	return 0x820BA4B8;
} // Block from 820BA4B4h-820BA4B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BA4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA4B8);
		  /* 820BA4B8h */ case    0:  		/* stw R11, <#[R29]> */
		/* 820BA4B8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820BA4B8h case    0:*/		return 0x820BA4BC;
	}
	return 0x820BA4BC;
} // Block from 820BA4B8h-820BA4BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BA4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA4BC);
		  /* 820BA4BCh */ case    0:  		/* addi R27, R27, 1 */
		/* 820BA4BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820BA4BCh case    0:*/		return 0x820BA4C0;
		  /* 820BA4C0h */ case    1:  		/* addi R29, R29, 4 */
		/* 820BA4C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820BA4C0h case    1:*/		return 0x820BA4C4;
		  /* 820BA4C4h */ case    2:  		/* cmplw CR6, R27, R30 */
		/* 820BA4C4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R30);
		/* 820BA4C4h case    2:*/		return 0x820BA4C8;
		  /* 820BA4C8h */ case    3:  		/* bc 12, CR6_LT, -104 */
		/* 820BA4C8h case    3:*/		if ( regs.CR[6].lt ) { return 0x820BA460;  }
		/* 820BA4C8h case    3:*/		return 0x820BA4CC;
		  /* 820BA4CCh */ case    4:  		/* b -6912 */
		/* 820BA4CCh case    4:*/		return 0x820B89CC;
		/* 820BA4CCh case    4:*/		return 0x820BA4D0;
	}
	return 0x820BA4D0;
} // Block from 820BA4BCh-820BA4D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BA4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA4D0);
		  /* 820BA4D0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA4D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA4D0h case    0:*/		return 0x820BA4D4;
		  /* 820BA4D4h */ case    1:  		/* bc 12, CR6_EQ, -6920 */
		/* 820BA4D4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA4D4h case    1:*/		return 0x820BA4D8;
		  /* 820BA4D8h */ case    2:  		/* mtspr CTR, R30 */
		/* 820BA4D8h case    2:*/		regs.CTR = regs.R30;
		/* 820BA4D8h case    2:*/		return 0x820BA4DC;
		  /* 820BA4DCh */ case    3:  		/* addi R11, R15, -4 */
		/* 820BA4DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BA4DCh case    3:*/		return 0x820BA4E0;
		  /* 820BA4E0h */ case    4:  		/* lwz R10, <#[R14 + 32]> */
		/* 820BA4E0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000020) );
		/* 820BA4E0h case    4:*/		return 0x820BA4E4;
		  /* 820BA4E4h */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA4E4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA4E4h case    5:*/		return 0x820BA4E8;
		  /* 820BA4E8h */ case    6:  		/* bc 16, CR0_LT, -8 */
		/* 820BA4E8h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA4E0;  }
		/* 820BA4E8h case    6:*/		return 0x820BA4EC;
		  /* 820BA4ECh */ case    7:  		/* b -6944 */
		/* 820BA4ECh case    7:*/		return 0x820B89CC;
		/* 820BA4ECh case    7:*/		return 0x820BA4F0;
		  /* 820BA4F0h */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BA4F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BA4F0h case    8:*/		return 0x820BA4F4;
		  /* 820BA4F4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BA4F4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BA4F4h case    9:*/		return 0x820BA4F8;
		  /* 820BA4F8h */ case   10:  		/* bc 12, CR6_EQ, 16088 */
		/* 820BA4F8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BA4F8h case   10:*/		return 0x820BA4FC;
		  /* 820BA4FCh */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BA4FCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BA4FCh case   11:*/		return 0x820BA500;
		  /* 820BA500h */ case   12:  		/* bc 12, CR6_EQ, -6964 */
		/* 820BA500h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA500h case   12:*/		return 0x820BA504;
		  /* 820BA504h */ case   13:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BA504h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BA504h case   13:*/		return 0x820BA508;
		  /* 820BA508h */ case   14:  		/* lwz R11, <#[R11 + 108]> */
		/* 820BA508h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 820BA508h case   14:*/		return 0x820BA50C;
		  /* 820BA50Ch */ case   15:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 820BA50Ch case   15:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 820BA50Ch case   15:*/		return 0x820BA510;
		  /* 820BA510h */ case   16:  		/* bc 4, CR0_EQ, 548 */
		/* 820BA510h case   16:*/		if ( !regs.CR[0].eq ) { return 0x820BA734;  }
		/* 820BA510h case   16:*/		return 0x820BA514;
		  /* 820BA514h */ case   17:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820BA514h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820BA514h case   17:*/		return 0x820BA518;
		  /* 820BA518h */ case   18:  		/* mr R3, R14 */
		/* 820BA518h case   18:*/		regs.R3 = regs.R14;
		/* 820BA518h case   18:*/		return 0x820BA51C;
		  /* 820BA51Ch */ case   19:  		/* mr R4, R31 */
		/* 820BA51Ch case   19:*/		regs.R4 = regs.R31;
		/* 820BA51Ch case   19:*/		return 0x820BA520;
		  /* 820BA520h */ case   20:  		/* bl -40496 */
		/* 820BA520h case   20:*/		regs.LR = 0x820BA524; return 0x820B06F0;
		/* 820BA520h case   20:*/		return 0x820BA524;
		  /* 820BA524h */ case   21:  		/* or. R11, R3, R3 */
		/* 820BA524h case   21:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BA524h case   21:*/		return 0x820BA528;
		  /* 820BA528h */ case   22:  		/* bc 12, CR0_EQ, 12024 */
		/* 820BA528h case   22:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BA528h case   22:*/		return 0x820BA52C;
		  /* 820BA52Ch */ case   23:  		/* li R9, 4 */
		/* 820BA52Ch case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BA52Ch case   23:*/		return 0x820BA530;
		  /* 820BA530h */ case   24:  		/* addi R10, R1, 156 */
		/* 820BA530h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820BA530h case   24:*/		return 0x820BA534;
		  /* 820BA534h */ case   25:  		/* mtspr CTR, R9 */
		/* 820BA534h case   25:*/		regs.CTR = regs.R9;
		/* 820BA534h case   25:*/		return 0x820BA538;
		  /* 820BA538h */ case   26:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BA538h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BA538h case   26:*/		return 0x820BA53C;
		  /* 820BA53Ch */ case   27:  		/* add R11, R31, R11 */
		/* 820BA53Ch case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 820BA53Ch case   27:*/		return 0x820BA540;
		  /* 820BA540h */ case   28:  		/* bc 16, CR0_LT, -8 */
		/* 820BA540h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA538;  }
		/* 820BA540h case   28:*/		return 0x820BA544;
		  /* 820BA544h */ case   29:  		/* lwz R25, <#[R1 + 160]> */
		/* 820BA544h case   29:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BA544h case   29:*/		return 0x820BA548;
		  /* 820BA548h */ case   30:  		/* li R29, -1 */
		/* 820BA548h case   30:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BA548h case   30:*/		return 0x820BA54C;
		  /* 820BA54Ch */ case   31:  		/* cmplwi CR6, R30, 0 */
		/* 820BA54Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA54Ch case   31:*/		return 0x820BA550;
		  /* 820BA550h */ case   32:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA550h case   32:*/		if ( regs.CR[6].eq ) { return 0x820BA570;  }
		/* 820BA550h case   32:*/		return 0x820BA554;
		  /* 820BA554h */ case   33:  		/* addi R11, R25, -4 */
		/* 820BA554h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820BA554h case   33:*/		return 0x820BA558;
		  /* 820BA558h */ case   34:  		/* mr R10, R29 */
		/* 820BA558h case   34:*/		regs.R10 = regs.R29;
		/* 820BA558h case   34:*/		return 0x820BA55C;
		  /* 820BA55Ch */ case   35:  		/* cmplwi CR0, R30, 0 */
		/* 820BA55Ch case   35:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA55Ch case   35:*/		return 0x820BA560;
		  /* 820BA560h */ case   36:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA560h case   36:*/		if ( regs.CR[0].eq ) { return 0x820BA570;  }
		/* 820BA560h case   36:*/		return 0x820BA564;
		  /* 820BA564h */ case   37:  		/* mtspr CTR, R30 */
		/* 820BA564h case   37:*/		regs.CTR = regs.R30;
		/* 820BA564h case   37:*/		return 0x820BA568;
		  /* 820BA568h */ case   38:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA568h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA568h case   38:*/		return 0x820BA56C;
		  /* 820BA56Ch */ case   39:  		/* bc 16, CR0_LT, -4 */
		/* 820BA56Ch case   39:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA568;  }
		/* 820BA56Ch case   39:*/		return 0x820BA570;
	}
	return 0x820BA570;
} // Block from 820BA4D0h-820BA570h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820BA570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA570);
		  /* 820BA570h */ case    0:  		/* lwz R27, <#[R1 + 164]> */
		/* 820BA570h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BA570h case    0:*/		return 0x820BA574;
		  /* 820BA574h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA574h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA574h case    1:*/		return 0x820BA578;
		  /* 820BA578h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA578h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA598;  }
		/* 820BA578h case    2:*/		return 0x820BA57C;
		  /* 820BA57Ch */ case    3:  		/* addi R11, R27, -4 */
		/* 820BA57Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BA57Ch case    3:*/		return 0x820BA580;
		  /* 820BA580h */ case    4:  		/* mr R10, R29 */
		/* 820BA580h case    4:*/		regs.R10 = regs.R29;
		/* 820BA580h case    4:*/		return 0x820BA584;
		  /* 820BA584h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA584h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA584h case    5:*/		return 0x820BA588;
		  /* 820BA588h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA588h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA598;  }
		/* 820BA588h case    6:*/		return 0x820BA58C;
		  /* 820BA58Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA58Ch case    7:*/		regs.CTR = regs.R30;
		/* 820BA58Ch case    7:*/		return 0x820BA590;
		  /* 820BA590h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA590h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA590h case    8:*/		return 0x820BA594;
		  /* 820BA594h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA594h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA590;  }
		/* 820BA594h case    9:*/		return 0x820BA598;
	}
	return 0x820BA598;
} // Block from 820BA570h-820BA598h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA598);
		  /* 820BA598h */ case    0:  		/* lwz R26, <#[R1 + 168]> */
		/* 820BA598h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BA598h case    0:*/		return 0x820BA59C;
		  /* 820BA59Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA59Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA59Ch case    1:*/		return 0x820BA5A0;
		  /* 820BA5A0h */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 820BA5A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA608;  }
		/* 820BA5A0h case    2:*/		return 0x820BA5A4;
		  /* 820BA5A4h */ case    3:  		/* addi R11, R26, -4 */
		/* 820BA5A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BA5A4h case    3:*/		return 0x820BA5A8;
		  /* 820BA5A8h */ case    4:  		/* mr R10, R29 */
		/* 820BA5A8h case    4:*/		regs.R10 = regs.R29;
		/* 820BA5A8h case    4:*/		return 0x820BA5AC;
		  /* 820BA5ACh */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA5ACh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA5ACh case    5:*/		return 0x820BA5B0;
		  /* 820BA5B0h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA5B0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA5C0;  }
		/* 820BA5B0h case    6:*/		return 0x820BA5B4;
		  /* 820BA5B4h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA5B4h case    7:*/		regs.CTR = regs.R30;
		/* 820BA5B4h case    7:*/		return 0x820BA5B8;
		  /* 820BA5B8h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA5B8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA5B8h case    8:*/		return 0x820BA5BC;
		  /* 820BA5BCh */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA5BCh case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA5B8;  }
		/* 820BA5BCh case    9:*/		return 0x820BA5C0;
	}
	return 0x820BA5C0;
} // Block from 820BA598h-820BA5C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA5C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA5C0);
		  /* 820BA5C0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA5C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA5C0h case    0:*/		return 0x820BA5C4;
		  /* 820BA5C4h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 820BA5C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BA608;  }
		/* 820BA5C4h case    1:*/		return 0x820BA5C8;
		  /* 820BA5C8h */ case    2:  		/* lwz R11, <#[R1 + 172]> */
		/* 820BA5C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BA5C8h case    2:*/		return 0x820BA5CC;
		  /* 820BA5CCh */ case    3:  		/* mr R10, R29 */
		/* 820BA5CCh case    3:*/		regs.R10 = regs.R29;
		/* 820BA5CCh case    3:*/		return 0x820BA5D0;
		  /* 820BA5D0h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820BA5D0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA5D0h case    4:*/		return 0x820BA5D4;
		  /* 820BA5D4h */ case    5:  		/* addi R11, R11, -4 */
		/* 820BA5D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 820BA5D4h case    5:*/		return 0x820BA5D8;
		  /* 820BA5D8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA5D8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA5E8;  }
		/* 820BA5D8h case    6:*/		return 0x820BA5DC;
		  /* 820BA5DCh */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA5DCh case    7:*/		regs.CTR = regs.R30;
		/* 820BA5DCh case    7:*/		return 0x820BA5E0;
		  /* 820BA5E0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA5E0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA5E0h case    8:*/		return 0x820BA5E4;
		  /* 820BA5E4h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA5E4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA5E0;  }
		/* 820BA5E4h case    9:*/		return 0x820BA5E8;
	}
	return 0x820BA5E8;
} // Block from 820BA5C0h-820BA5E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA5E8);
		  /* 820BA5E8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA5E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA5E8h case    0:*/		return 0x820BA5EC;
		  /* 820BA5ECh */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BA5ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x820BA608;  }
		/* 820BA5ECh case    1:*/		return 0x820BA5F0;
		  /* 820BA5F0h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BA5F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BA5F0h case    2:*/		return 0x820BA5F4;
		  /* 820BA5F4h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BA5F4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA5F4h case    3:*/		return 0x820BA5F8;
		  /* 820BA5F8h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA5F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BA608;  }
		/* 820BA5F8h case    4:*/		return 0x820BA5FC;
		  /* 820BA5FCh */ case    5:  		/* mtspr CTR, R30 */
		/* 820BA5FCh case    5:*/		regs.CTR = regs.R30;
		/* 820BA5FCh case    5:*/		return 0x820BA600;
		  /* 820BA600h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BA600h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA600h case    6:*/		return 0x820BA604;
		  /* 820BA604h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BA604h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA600;  }
		/* 820BA604h case    7:*/		return 0x820BA608;
	}
	return 0x820BA608;
} // Block from 820BA5E8h-820BA608h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BA608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA608);
		  /* 820BA608h */ case    0:  		/* lwz R28, <#[R1 + 144]> */
		/* 820BA608h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000090) );
		/* 820BA608h case    0:*/		return 0x820BA60C;
		  /* 820BA60Ch */ case    1:  		/* rlwinm R29, R30, 0, 12, 31 */
		/* 820BA60Ch case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R30);
		/* 820BA60Ch case    1:*/		return 0x820BA610;
		  /* 820BA610h */ case    2:  		/* li R9, 64 */
		/* 820BA610h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA610h case    2:*/		return 0x820BA614;
		  /* 820BA614h */ case    3:  		/* li R8, 0 */
		/* 820BA614h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA614h case    3:*/		return 0x820BA618;
		  /* 820BA618h */ case    4:  		/* mr R7, R28 */
		/* 820BA618h case    4:*/		regs.R7 = regs.R28;
		/* 820BA618h case    4:*/		return 0x820BA61C;
		  /* 820BA61Ch */ case    5:  		/* mr R6, R25 */
		/* 820BA61Ch case    5:*/		regs.R6 = regs.R25;
		/* 820BA61Ch case    5:*/		return 0x820BA620;
		  /* 820BA620h */ case    6:  		/* oris R5, R29, 4144 */
		/* 820BA620h case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x1030);
		/* 820BA620h case    6:*/		return 0x820BA624;
		  /* 820BA624h */ case    7:  		/* mr R4, R16 */
		/* 820BA624h case    7:*/		regs.R4 = regs.R16;
		/* 820BA624h case    7:*/		return 0x820BA628;
		  /* 820BA628h */ case    8:  		/* mr R3, R14 */
		/* 820BA628h case    8:*/		regs.R3 = regs.R14;
		/* 820BA628h case    8:*/		return 0x820BA62C;
		  /* 820BA62Ch */ case    9:  		/* bl -39716 */
		/* 820BA62Ch case    9:*/		regs.LR = 0x820BA630; return 0x820B0B08;
		/* 820BA62Ch case    9:*/		return 0x820BA630;
		  /* 820BA630h */ case   10:  		/* or. R31, R3, R3 */
		/* 820BA630h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA630h case   10:*/		return 0x820BA634;
		  /* 820BA634h */ case   11:  		/* bc 12, CR0_LT, 15780 */
		/* 820BA634h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA634h case   11:*/		return 0x820BA638;
		  /* 820BA638h */ case   12:  		/* li R9, 64 */
		/* 820BA638h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA638h case   12:*/		return 0x820BA63C;
		  /* 820BA63Ch */ case   13:  		/* mr R8, R25 */
		/* 820BA63Ch case   13:*/		regs.R8 = regs.R25;
		/* 820BA63Ch case   13:*/		return 0x820BA640;
		  /* 820BA640h */ case   14:  		/* mr R7, R25 */
		/* 820BA640h case   14:*/		regs.R7 = regs.R25;
		/* 820BA640h case   14:*/		return 0x820BA644;
		  /* 820BA644h */ case   15:  		/* mr R6, R27 */
		/* 820BA644h case   15:*/		regs.R6 = regs.R27;
		/* 820BA644h case   15:*/		return 0x820BA648;
		  /* 820BA648h */ case   16:  		/* oris R5, R29, 8272 */
		/* 820BA648h case   16:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2050);
		/* 820BA648h case   16:*/		return 0x820BA64C;
		  /* 820BA64Ch */ case   17:  		/* mr R4, R16 */
		/* 820BA64Ch case   17:*/		regs.R4 = regs.R16;
		/* 820BA64Ch case   17:*/		return 0x820BA650;
		  /* 820BA650h */ case   18:  		/* mr R3, R14 */
		/* 820BA650h case   18:*/		regs.R3 = regs.R14;
		/* 820BA650h case   18:*/		return 0x820BA654;
		  /* 820BA654h */ case   19:  		/* bl -39756 */
		/* 820BA654h case   19:*/		regs.LR = 0x820BA658; return 0x820B0B08;
		/* 820BA654h case   19:*/		return 0x820BA658;
		  /* 820BA658h */ case   20:  		/* or. R31, R3, R3 */
		/* 820BA658h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA658h case   20:*/		return 0x820BA65C;
		  /* 820BA65Ch */ case   21:  		/* bc 12, CR0_LT, 15740 */
		/* 820BA65Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA65Ch case   21:*/		return 0x820BA660;
		  /* 820BA660h */ case   22:  		/* li R9, 64 */
		/* 820BA660h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA660h case   22:*/		return 0x820BA664;
		  /* 820BA664h */ case   23:  		/* li R8, 0 */
		/* 820BA664h case   23:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA664h case   23:*/		return 0x820BA668;
		  /* 820BA668h */ case   24:  		/* mr R7, R27 */
		/* 820BA668h case   24:*/		regs.R7 = regs.R27;
		/* 820BA668h case   24:*/		return 0x820BA66C;
		  /* 820BA66Ch */ case   25:  		/* mr R6, R26 */
		/* 820BA66Ch case   25:*/		regs.R6 = regs.R26;
		/* 820BA66Ch case   25:*/		return 0x820BA670;
		  /* 820BA670h */ case   26:  		/* oris R5, R29, 4112 */
		/* 820BA670h case   26:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x1010);
		/* 820BA670h case   26:*/		return 0x820BA674;
		  /* 820BA674h */ case   27:  		/* mr R4, R16 */
		/* 820BA674h case   27:*/		regs.R4 = regs.R16;
		/* 820BA674h case   27:*/		return 0x820BA678;
		  /* 820BA678h */ case   28:  		/* mr R3, R14 */
		/* 820BA678h case   28:*/		regs.R3 = regs.R14;
		/* 820BA678h case   28:*/		return 0x820BA67C;
		  /* 820BA67Ch */ case   29:  		/* bl -39796 */
		/* 820BA67Ch case   29:*/		regs.LR = 0x820BA680; return 0x820B0B08;
		/* 820BA67Ch case   29:*/		return 0x820BA680;
		  /* 820BA680h */ case   30:  		/* or. R31, R3, R3 */
		/* 820BA680h case   30:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA680h case   30:*/		return 0x820BA684;
		  /* 820BA684h */ case   31:  		/* bc 12, CR0_LT, 15700 */
		/* 820BA684h case   31:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA684h case   31:*/		return 0x820BA688;
		  /* 820BA688h */ case   32:  		/* li R9, 87 */
		/* 820BA688h case   32:*/		cpu::op::li<0>(regs,&regs.R9,0x57);
		/* 820BA688h case   32:*/		return 0x820BA68C;
		  /* 820BA68Ch */ case   33:  		/* mr R8, R27 */
		/* 820BA68Ch case   33:*/		regs.R8 = regs.R27;
		/* 820BA68Ch case   33:*/		return 0x820BA690;
		  /* 820BA690h */ case   34:  		/* mr R7, R26 */
		/* 820BA690h case   34:*/		regs.R7 = regs.R26;
		/* 820BA690h case   34:*/		return 0x820BA694;
		  /* 820BA694h */ case   35:  		/* mr R6, R15 */
		/* 820BA694h case   35:*/		regs.R6 = regs.R15;
		/* 820BA694h case   35:*/		return 0x820BA698;
		  /* 820BA698h */ case   36:  		/* oris R5, R29, 8240 */
		/* 820BA698h case   36:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2030);
		/* 820BA698h case   36:*/		return 0x820BA69C;
		  /* 820BA69Ch */ case   37:  		/* mr R4, R16 */
		/* 820BA69Ch case   37:*/		regs.R4 = regs.R16;
		/* 820BA69Ch case   37:*/		return 0x820BA6A0;
		  /* 820BA6A0h */ case   38:  		/* mr R3, R14 */
		/* 820BA6A0h case   38:*/		regs.R3 = regs.R14;
		/* 820BA6A0h case   38:*/		return 0x820BA6A4;
		  /* 820BA6A4h */ case   39:  		/* bl -39836 */
		/* 820BA6A4h case   39:*/		regs.LR = 0x820BA6A8; return 0x820B0B08;
		/* 820BA6A4h case   39:*/		return 0x820BA6A8;
		  /* 820BA6A8h */ case   40:  		/* or. R31, R3, R3 */
		/* 820BA6A8h case   40:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA6A8h case   40:*/		return 0x820BA6AC;
		  /* 820BA6ACh */ case   41:  		/* bc 12, CR0_LT, 15660 */
		/* 820BA6ACh case   41:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA6ACh case   41:*/		return 0x820BA6B0;
		  /* 820BA6B0h */ case   42:  		/* mr R27, R22 */
		/* 820BA6B0h case   42:*/		regs.R27 = regs.R22;
		/* 820BA6B0h case   42:*/		return 0x820BA6B4;
		  /* 820BA6B4h */ case   43:  		/* cmplwi CR6, R30, 0 */
		/* 820BA6B4h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA6B4h case   43:*/		return 0x820BA6B8;
		  /* 820BA6B8h */ case   44:  		/* bc 12, CR6_EQ, -7404 */
		/* 820BA6B8h case   44:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA6B8h case   44:*/		return 0x820BA6BC;
		  /* 820BA6BCh */ case   45:  		/* mr R29, R15 */
		/* 820BA6BCh case   45:*/		regs.R29 = regs.R15;
		/* 820BA6BCh case   45:*/		return 0x820BA6C0;
		  /* 820BA6C0h */ case   46:  		/* subf R28, R15, R28 */
		/* 820BA6C0h case   46:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R15,regs.R28);
		/* 820BA6C0h case   46:*/		return 0x820BA6C4;
		  /* 820BA6C4h */ case   47:  		/* addi R5, R1, 160 */
		/* 820BA6C4h case   47:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820BA6C4h case   47:*/		return 0x820BA6C8;
		  /* 820BA6C8h */ case   48:  		/* lwzx R4, <#[R29 + R28]> */
		/* 820BA6C8h case   48:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + regs.R28 + 0x00000000) );
		/* 820BA6C8h case   48:*/		return 0x820BA6CC;
		  /* 820BA6CCh */ case   49:  		/* mr R3, R14 */
		/* 820BA6CCh case   49:*/		regs.R3 = regs.R14;
		/* 820BA6CCh case   49:*/		return 0x820BA6D0;
		  /* 820BA6D0h */ case   50:  		/* bl -47280 */
		/* 820BA6D0h case   50:*/		regs.LR = 0x820BA6D4; return 0x820AEE20;
		/* 820BA6D0h case   50:*/		return 0x820BA6D4;
		  /* 820BA6D4h */ case   51:  		/* or. R31, R3, R3 */
		/* 820BA6D4h case   51:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA6D4h case   51:*/		return 0x820BA6D8;
		  /* 820BA6D8h */ case   52:  		/* bc 12, CR0_LT, 15616 */
		/* 820BA6D8h case   52:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA6D8h case   52:*/		return 0x820BA6DC;
		  /* 820BA6DCh */ case   53:  		/* lfd FR0, <#[R14 + 176]> */
		/* 820BA6DCh case   53:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R14 + 0x000000B0) );
		/* 820BA6DCh case   53:*/		return 0x820BA6E0;
		  /* 820BA6E0h */ case   54:  		/* lfd FR13, <#[R1 + 160]> */
		/* 820BA6E0h case   54:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BA6E0h case   54:*/		return 0x820BA6E4;
		  /* 820BA6E4h */ case   55:  		/* lfd FR12, <#[R1 + 168]> */
		/* 820BA6E4h case   55:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BA6E4h case   55:*/		return 0x820BA6E8;
		  /* 820BA6E8h */ case   56:  		/* fcmpu CR6, FR13, FR0 */
		/* 820BA6E8h case   56:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820BA6E8h case   56:*/		return 0x820BA6EC;
		  /* 820BA6ECh */ case   57:  		/* bc 4, CR6_GT, 24 */
		/* 820BA6ECh case   57:*/		if ( !regs.CR[6].gt ) { return 0x820BA704;  }
		/* 820BA6ECh case   57:*/		return 0x820BA6F0;
		  /* 820BA6F0h */ case   58:  		/* lfd FR11, <#[R14 + 168]> */
		/* 820BA6F0h case   58:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R14 + 0x000000A8) );
		/* 820BA6F0h case   58:*/		return 0x820BA6F4;
		  /* 820BA6F4h */ case   59:  		/* fcmpu CR6, FR12, FR11 */
		/* 820BA6F4h case   59:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR11);
		/* 820BA6F4h case   59:*/		return 0x820BA6F8;
		  /* 820BA6F8h */ case   60:  		/* bc 4, CR6_LT, 12 */
		/* 820BA6F8h case   60:*/		if ( !regs.CR[6].lt ) { return 0x820BA704;  }
		/* 820BA6F8h case   60:*/		return 0x820BA6FC;
		  /* 820BA6FCh */ case   61:  		/* lwz R11, <#[R14 + 36]> */
		/* 820BA6FCh case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 820BA6FCh case   61:*/		return 0x820BA700;
		  /* 820BA700h */ case   62:  		/* b 28 */
		/* 820BA700h case   62:*/		return 0x820BA71C;
		/* 820BA700h case   62:*/		return 0x820BA704;
	}
	return 0x820BA704;
} // Block from 820BA608h-820BA704h (63 instructions)

//////////////////////////////////////////////////////
// Block at 820BA704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA704);
		  /* 820BA704h */ case    0:  		/* lfd FR11, <#[R14 + 168]> */
		/* 820BA704h case    0:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R14 + 0x000000A8) );
		/* 820BA704h case    0:*/		return 0x820BA708;
		  /* 820BA708h */ case    1:  		/* fcmpu CR6, FR13, FR11 */
		/* 820BA708h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR11);
		/* 820BA708h case    1:*/		return 0x820BA70C;
		  /* 820BA70Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 820BA70Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA718;  }
		/* 820BA70Ch case    2:*/		return 0x820BA710;
		  /* 820BA710h */ case    3:  		/* fcmpu CR6, FR12, FR0 */
		/* 820BA710h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR0);
		/* 820BA710h case    3:*/		return 0x820BA714;
		  /* 820BA714h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 820BA714h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BA720;  }
		/* 820BA714h case    4:*/		return 0x820BA718;
	}
	return 0x820BA718;
} // Block from 820BA704h-820BA718h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BA718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA718);
		  /* 820BA718h */ case    0:  		/* lwz R11, <#[R14 + 32]> */
		/* 820BA718h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000020) );
		/* 820BA718h case    0:*/		return 0x820BA71C;
	}
	return 0x820BA71C;
} // Block from 820BA718h-820BA71Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BA71Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA71C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA71C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA71C);
		  /* 820BA71Ch */ case    0:  		/* stw R11, <#[R29]> */
		/* 820BA71Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820BA71Ch case    0:*/		return 0x820BA720;
	}
	return 0x820BA720;
} // Block from 820BA71Ch-820BA720h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BA720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA720);
		  /* 820BA720h */ case    0:  		/* addi R27, R27, 1 */
		/* 820BA720h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820BA720h case    0:*/		return 0x820BA724;
		  /* 820BA724h */ case    1:  		/* addi R29, R29, 4 */
		/* 820BA724h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820BA724h case    1:*/		return 0x820BA728;
		  /* 820BA728h */ case    2:  		/* cmplw CR6, R27, R30 */
		/* 820BA728h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R30);
		/* 820BA728h case    2:*/		return 0x820BA72C;
		  /* 820BA72Ch */ case    3:  		/* bc 12, CR6_LT, -104 */
		/* 820BA72Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x820BA6C4;  }
		/* 820BA72Ch case    3:*/		return 0x820BA730;
		  /* 820BA730h */ case    4:  		/* b -7524 */
		/* 820BA730h case    4:*/		return 0x820B89CC;
		/* 820BA730h case    4:*/		return 0x820BA734;
	}
	return 0x820BA734;
} // Block from 820BA720h-820BA734h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BA734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA734);
		  /* 820BA734h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA734h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA734h case    0:*/		return 0x820BA738;
		  /* 820BA738h */ case    1:  		/* bc 12, CR6_EQ, -7532 */
		/* 820BA738h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA738h case    1:*/		return 0x820BA73C;
		  /* 820BA73Ch */ case    2:  		/* mtspr CTR, R30 */
		/* 820BA73Ch case    2:*/		regs.CTR = regs.R30;
		/* 820BA73Ch case    2:*/		return 0x820BA740;
		  /* 820BA740h */ case    3:  		/* addi R11, R15, -4 */
		/* 820BA740h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BA740h case    3:*/		return 0x820BA744;
		  /* 820BA744h */ case    4:  		/* lwz R10, <#[R14 + 36]> */
		/* 820BA744h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000024) );
		/* 820BA744h case    4:*/		return 0x820BA748;
		  /* 820BA748h */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA748h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA748h case    5:*/		return 0x820BA74C;
		  /* 820BA74Ch */ case    6:  		/* bc 16, CR0_LT, -8 */
		/* 820BA74Ch case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA744;  }
		/* 820BA74Ch case    6:*/		return 0x820BA750;
		  /* 820BA750h */ case    7:  		/* b -7556 */
		/* 820BA750h case    7:*/		return 0x820B89CC;
		/* 820BA750h case    7:*/		return 0x820BA754;
		  /* 820BA754h */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BA754h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BA754h case    8:*/		return 0x820BA758;
		  /* 820BA758h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BA758h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BA758h case    9:*/		return 0x820BA75C;
		  /* 820BA75Ch */ case   10:  		/* bc 12, CR6_EQ, 15476 */
		/* 820BA75Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BA75Ch case   10:*/		return 0x820BA760;
		  /* 820BA760h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BA760h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BA760h case   11:*/		return 0x820BA764;
		  /* 820BA764h */ case   12:  		/* bc 12, CR6_EQ, -7576 */
		/* 820BA764h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA764h case   12:*/		return 0x820BA768;
		  /* 820BA768h */ case   13:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BA768h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BA768h case   13:*/		return 0x820BA76C;
		  /* 820BA76Ch */ case   14:  		/* lwz R11, <#[R11 + 108]> */
		/* 820BA76Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 820BA76Ch case   14:*/		return 0x820BA770;
		  /* 820BA770h */ case   15:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 820BA770h case   15:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 820BA770h case   15:*/		return 0x820BA774;
		  /* 820BA774h */ case   16:  		/* bc 4, CR0_EQ, 584 */
		/* 820BA774h case   16:*/		if ( !regs.CR[0].eq ) { return 0x820BA9BC;  }
		/* 820BA774h case   16:*/		return 0x820BA778;
		  /* 820BA778h */ case   17:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820BA778h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820BA778h case   17:*/		return 0x820BA77C;
		  /* 820BA77Ch */ case   18:  		/* mr R3, R14 */
		/* 820BA77Ch case   18:*/		regs.R3 = regs.R14;
		/* 820BA77Ch case   18:*/		return 0x820BA780;
		  /* 820BA780h */ case   19:  		/* mr R4, R31 */
		/* 820BA780h case   19:*/		regs.R4 = regs.R31;
		/* 820BA780h case   19:*/		return 0x820BA784;
		  /* 820BA784h */ case   20:  		/* bl -41108 */
		/* 820BA784h case   20:*/		regs.LR = 0x820BA788; return 0x820B06F0;
		/* 820BA784h case   20:*/		return 0x820BA788;
		  /* 820BA788h */ case   21:  		/* or. R11, R3, R3 */
		/* 820BA788h case   21:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BA788h case   21:*/		return 0x820BA78C;
		  /* 820BA78Ch */ case   22:  		/* bc 12, CR0_EQ, 11412 */
		/* 820BA78Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BA78Ch case   22:*/		return 0x820BA790;
		  /* 820BA790h */ case   23:  		/* li R9, 4 */
		/* 820BA790h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BA790h case   23:*/		return 0x820BA794;
		  /* 820BA794h */ case   24:  		/* addi R10, R1, 156 */
		/* 820BA794h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820BA794h case   24:*/		return 0x820BA798;
		  /* 820BA798h */ case   25:  		/* mtspr CTR, R9 */
		/* 820BA798h case   25:*/		regs.CTR = regs.R9;
		/* 820BA798h case   25:*/		return 0x820BA79C;
		  /* 820BA79Ch */ case   26:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BA79Ch case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BA79Ch case   26:*/		return 0x820BA7A0;
		  /* 820BA7A0h */ case   27:  		/* add R11, R31, R11 */
		/* 820BA7A0h case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 820BA7A0h case   27:*/		return 0x820BA7A4;
		  /* 820BA7A4h */ case   28:  		/* bc 16, CR0_LT, -8 */
		/* 820BA7A4h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA79C;  }
		/* 820BA7A4h case   28:*/		return 0x820BA7A8;
		  /* 820BA7A8h */ case   29:  		/* lwz R25, <#[R1 + 160]> */
		/* 820BA7A8h case   29:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BA7A8h case   29:*/		return 0x820BA7AC;
		  /* 820BA7ACh */ case   30:  		/* li R29, -1 */
		/* 820BA7ACh case   30:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BA7ACh case   30:*/		return 0x820BA7B0;
		  /* 820BA7B0h */ case   31:  		/* cmplwi CR6, R30, 0 */
		/* 820BA7B0h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA7B0h case   31:*/		return 0x820BA7B4;
		  /* 820BA7B4h */ case   32:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA7B4h case   32:*/		if ( regs.CR[6].eq ) { return 0x820BA7D4;  }
		/* 820BA7B4h case   32:*/		return 0x820BA7B8;
		  /* 820BA7B8h */ case   33:  		/* addi R11, R25, -4 */
		/* 820BA7B8h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820BA7B8h case   33:*/		return 0x820BA7BC;
		  /* 820BA7BCh */ case   34:  		/* mr R10, R29 */
		/* 820BA7BCh case   34:*/		regs.R10 = regs.R29;
		/* 820BA7BCh case   34:*/		return 0x820BA7C0;
		  /* 820BA7C0h */ case   35:  		/* cmplwi CR0, R30, 0 */
		/* 820BA7C0h case   35:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA7C0h case   35:*/		return 0x820BA7C4;
		  /* 820BA7C4h */ case   36:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA7C4h case   36:*/		if ( regs.CR[0].eq ) { return 0x820BA7D4;  }
		/* 820BA7C4h case   36:*/		return 0x820BA7C8;
		  /* 820BA7C8h */ case   37:  		/* mtspr CTR, R30 */
		/* 820BA7C8h case   37:*/		regs.CTR = regs.R30;
		/* 820BA7C8h case   37:*/		return 0x820BA7CC;
		  /* 820BA7CCh */ case   38:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA7CCh case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA7CCh case   38:*/		return 0x820BA7D0;
		  /* 820BA7D0h */ case   39:  		/* bc 16, CR0_LT, -4 */
		/* 820BA7D0h case   39:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA7CC;  }
		/* 820BA7D0h case   39:*/		return 0x820BA7D4;
	}
	return 0x820BA7D4;
} // Block from 820BA734h-820BA7D4h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820BA7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA7D4);
		  /* 820BA7D4h */ case    0:  		/* lwz R23, <#[R1 + 164]> */
		/* 820BA7D4h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BA7D4h case    0:*/		return 0x820BA7D8;
		  /* 820BA7D8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA7D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA7D8h case    1:*/		return 0x820BA7DC;
		  /* 820BA7DCh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA7DCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA7FC;  }
		/* 820BA7DCh case    2:*/		return 0x820BA7E0;
		  /* 820BA7E0h */ case    3:  		/* addi R11, R23, -4 */
		/* 820BA7E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820BA7E0h case    3:*/		return 0x820BA7E4;
		  /* 820BA7E4h */ case    4:  		/* mr R10, R29 */
		/* 820BA7E4h case    4:*/		regs.R10 = regs.R29;
		/* 820BA7E4h case    4:*/		return 0x820BA7E8;
		  /* 820BA7E8h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA7E8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA7E8h case    5:*/		return 0x820BA7EC;
		  /* 820BA7ECh */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA7ECh case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA7FC;  }
		/* 820BA7ECh case    6:*/		return 0x820BA7F0;
		  /* 820BA7F0h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA7F0h case    7:*/		regs.CTR = regs.R30;
		/* 820BA7F0h case    7:*/		return 0x820BA7F4;
		  /* 820BA7F4h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA7F4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA7F4h case    8:*/		return 0x820BA7F8;
		  /* 820BA7F8h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA7F8h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA7F4;  }
		/* 820BA7F8h case    9:*/		return 0x820BA7FC;
	}
	return 0x820BA7FC;
} // Block from 820BA7D4h-820BA7FCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA7FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA7FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA7FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA7FC);
		  /* 820BA7FCh */ case    0:  		/* lwz R27, <#[R1 + 168]> */
		/* 820BA7FCh case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BA7FCh case    0:*/		return 0x820BA800;
		  /* 820BA800h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA800h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA800h case    1:*/		return 0x820BA804;
		  /* 820BA804h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BA804h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA824;  }
		/* 820BA804h case    2:*/		return 0x820BA808;
		  /* 820BA808h */ case    3:  		/* addi R11, R27, -4 */
		/* 820BA808h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BA808h case    3:*/		return 0x820BA80C;
		  /* 820BA80Ch */ case    4:  		/* mr R10, R29 */
		/* 820BA80Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BA80Ch case    4:*/		return 0x820BA810;
		  /* 820BA810h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA810h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA810h case    5:*/		return 0x820BA814;
		  /* 820BA814h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA814h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA824;  }
		/* 820BA814h case    6:*/		return 0x820BA818;
		  /* 820BA818h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA818h case    7:*/		regs.CTR = regs.R30;
		/* 820BA818h case    7:*/		return 0x820BA81C;
		  /* 820BA81Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA81Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA81Ch case    8:*/		return 0x820BA820;
		  /* 820BA820h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA820h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA81C;  }
		/* 820BA820h case    9:*/		return 0x820BA824;
	}
	return 0x820BA824;
} // Block from 820BA7FCh-820BA824h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA824);
		  /* 820BA824h */ case    0:  		/* lwz R24, <#[R1 + 172]> */
		/* 820BA824h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BA824h case    0:*/		return 0x820BA828;
		  /* 820BA828h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BA828h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA828h case    1:*/		return 0x820BA82C;
		  /* 820BA82Ch */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BA82Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BA86C;  }
		/* 820BA82Ch case    2:*/		return 0x820BA830;
		  /* 820BA830h */ case    3:  		/* addi R11, R24, -4 */
		/* 820BA830h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820BA830h case    3:*/		return 0x820BA834;
		  /* 820BA834h */ case    4:  		/* mr R10, R29 */
		/* 820BA834h case    4:*/		regs.R10 = regs.R29;
		/* 820BA834h case    4:*/		return 0x820BA838;
		  /* 820BA838h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BA838h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA838h case    5:*/		return 0x820BA83C;
		  /* 820BA83Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA83Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820BA84C;  }
		/* 820BA83Ch case    6:*/		return 0x820BA840;
		  /* 820BA840h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BA840h case    7:*/		regs.CTR = regs.R30;
		/* 820BA840h case    7:*/		return 0x820BA844;
		  /* 820BA844h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA844h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA844h case    8:*/		return 0x820BA848;
		  /* 820BA848h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BA848h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA844;  }
		/* 820BA848h case    9:*/		return 0x820BA84C;
	}
	return 0x820BA84C;
} // Block from 820BA824h-820BA84Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BA84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA84C);
		  /* 820BA84Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA84Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA84Ch case    0:*/		return 0x820BA850;
		  /* 820BA850h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BA850h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BA86C;  }
		/* 820BA850h case    1:*/		return 0x820BA854;
		  /* 820BA854h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BA854h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BA854h case    2:*/		return 0x820BA858;
		  /* 820BA858h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BA858h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BA858h case    3:*/		return 0x820BA85C;
		  /* 820BA85Ch */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BA85Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x820BA86C;  }
		/* 820BA85Ch case    4:*/		return 0x820BA860;
		  /* 820BA860h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BA860h case    5:*/		regs.CTR = regs.R30;
		/* 820BA860h case    5:*/		return 0x820BA864;
		  /* 820BA864h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BA864h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA864h case    6:*/		return 0x820BA868;
		  /* 820BA868h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BA868h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA864;  }
		/* 820BA868h case    7:*/		return 0x820BA86C;
	}
	return 0x820BA86C;
} // Block from 820BA84Ch-820BA86Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BA86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA86C);
		  /* 820BA86Ch */ case    0:  		/* lwz R26, <#[R1 + 144]> */
		/* 820BA86Ch case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000090) );
		/* 820BA86Ch case    0:*/		return 0x820BA870;
		  /* 820BA870h */ case    1:  		/* rlwinm R29, R30, 0, 12, 31 */
		/* 820BA870h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R29,regs.R30);
		/* 820BA870h case    1:*/		return 0x820BA874;
		  /* 820BA874h */ case    2:  		/* li R9, 64 */
		/* 820BA874h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA874h case    2:*/		return 0x820BA878;
		  /* 820BA878h */ case    3:  		/* mr R8, R26 */
		/* 820BA878h case    3:*/		regs.R8 = regs.R26;
		/* 820BA878h case    3:*/		return 0x820BA87C;
		  /* 820BA87Ch */ case    4:  		/* mr R7, R26 */
		/* 820BA87Ch case    4:*/		regs.R7 = regs.R26;
		/* 820BA87Ch case    4:*/		return 0x820BA880;
		  /* 820BA880h */ case    5:  		/* mr R6, R25 */
		/* 820BA880h case    5:*/		regs.R6 = regs.R25;
		/* 820BA880h case    5:*/		return 0x820BA884;
		  /* 820BA884h */ case    6:  		/* oris R5, R29, 8272 */
		/* 820BA884h case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R29,0x2050);
		/* 820BA884h case    6:*/		return 0x820BA888;
		  /* 820BA888h */ case    7:  		/* mr R4, R16 */
		/* 820BA888h case    7:*/		regs.R4 = regs.R16;
		/* 820BA888h case    7:*/		return 0x820BA88C;
		  /* 820BA88Ch */ case    8:  		/* mr R3, R14 */
		/* 820BA88Ch case    8:*/		regs.R3 = regs.R14;
		/* 820BA88Ch case    8:*/		return 0x820BA890;
		  /* 820BA890h */ case    9:  		/* bl -40328 */
		/* 820BA890h case    9:*/		regs.LR = 0x820BA894; return 0x820B0B08;
		/* 820BA890h case    9:*/		return 0x820BA894;
		  /* 820BA894h */ case   10:  		/* or. R31, R3, R3 */
		/* 820BA894h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA894h case   10:*/		return 0x820BA898;
		  /* 820BA898h */ case   11:  		/* bc 12, CR0_LT, 15168 */
		/* 820BA898h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA898h case   11:*/		return 0x820BA89C;
		  /* 820BA89Ch */ case   12:  		/* oris R28, R29, 4112 */
		/* 820BA89Ch case   12:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R29,0x1010);
		/* 820BA89Ch case   12:*/		return 0x820BA8A0;
		  /* 820BA8A0h */ case   13:  		/* li R9, 64 */
		/* 820BA8A0h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820BA8A0h case   13:*/		return 0x820BA8A4;
		  /* 820BA8A4h */ case   14:  		/* li R8, 0 */
		/* 820BA8A4h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA8A4h case   14:*/		return 0x820BA8A8;
		  /* 820BA8A8h */ case   15:  		/* mr R7, R25 */
		/* 820BA8A8h case   15:*/		regs.R7 = regs.R25;
		/* 820BA8A8h case   15:*/		return 0x820BA8AC;
		  /* 820BA8ACh */ case   16:  		/* mr R6, R23 */
		/* 820BA8ACh case   16:*/		regs.R6 = regs.R23;
		/* 820BA8ACh case   16:*/		return 0x820BA8B0;
		  /* 820BA8B0h */ case   17:  		/* mr R5, R28 */
		/* 820BA8B0h case   17:*/		regs.R5 = regs.R28;
		/* 820BA8B0h case   17:*/		return 0x820BA8B4;
		  /* 820BA8B4h */ case   18:  		/* mr R4, R16 */
		/* 820BA8B4h case   18:*/		regs.R4 = regs.R16;
		/* 820BA8B4h case   18:*/		return 0x820BA8B8;
		  /* 820BA8B8h */ case   19:  		/* mr R3, R14 */
		/* 820BA8B8h case   19:*/		regs.R3 = regs.R14;
		/* 820BA8B8h case   19:*/		return 0x820BA8BC;
		  /* 820BA8BCh */ case   20:  		/* bl -40372 */
		/* 820BA8BCh case   20:*/		regs.LR = 0x820BA8C0; return 0x820B0B08;
		/* 820BA8BCh case   20:*/		return 0x820BA8C0;
		  /* 820BA8C0h */ case   21:  		/* or. R31, R3, R3 */
		/* 820BA8C0h case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA8C0h case   21:*/		return 0x820BA8C4;
		  /* 820BA8C4h */ case   22:  		/* bc 12, CR0_LT, 15124 */
		/* 820BA8C4h case   22:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA8C4h case   22:*/		return 0x820BA8C8;
		  /* 820BA8C8h */ case   23:  		/* oris R29, R29, 8240 */
		/* 820BA8C8h case   23:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R29,0x2030);
		/* 820BA8C8h case   23:*/		return 0x820BA8CC;
		  /* 820BA8CCh */ case   24:  		/* li R9, 87 */
		/* 820BA8CCh case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x57);
		/* 820BA8CCh case   24:*/		return 0x820BA8D0;
		  /* 820BA8D0h */ case   25:  		/* mr R8, R23 */
		/* 820BA8D0h case   25:*/		regs.R8 = regs.R23;
		/* 820BA8D0h case   25:*/		return 0x820BA8D4;
		  /* 820BA8D4h */ case   26:  		/* mr R7, R25 */
		/* 820BA8D4h case   26:*/		regs.R7 = regs.R25;
		/* 820BA8D4h case   26:*/		return 0x820BA8D8;
		  /* 820BA8D8h */ case   27:  		/* mr R6, R27 */
		/* 820BA8D8h case   27:*/		regs.R6 = regs.R27;
		/* 820BA8D8h case   27:*/		return 0x820BA8DC;
		  /* 820BA8DCh */ case   28:  		/* mr R5, R29 */
		/* 820BA8DCh case   28:*/		regs.R5 = regs.R29;
		/* 820BA8DCh case   28:*/		return 0x820BA8E0;
		  /* 820BA8E0h */ case   29:  		/* mr R4, R16 */
		/* 820BA8E0h case   29:*/		regs.R4 = regs.R16;
		/* 820BA8E0h case   29:*/		return 0x820BA8E4;
		  /* 820BA8E4h */ case   30:  		/* mr R3, R14 */
		/* 820BA8E4h case   30:*/		regs.R3 = regs.R14;
		/* 820BA8E4h case   30:*/		return 0x820BA8E8;
		  /* 820BA8E8h */ case   31:  		/* bl -40416 */
		/* 820BA8E8h case   31:*/		regs.LR = 0x820BA8EC; return 0x820B0B08;
		/* 820BA8E8h case   31:*/		return 0x820BA8EC;
		  /* 820BA8ECh */ case   32:  		/* or. R31, R3, R3 */
		/* 820BA8ECh case   32:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA8ECh case   32:*/		return 0x820BA8F0;
		  /* 820BA8F0h */ case   33:  		/* bc 12, CR0_LT, 15080 */
		/* 820BA8F0h case   33:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA8F0h case   33:*/		return 0x820BA8F4;
		  /* 820BA8F4h */ case   34:  		/* li R9, 90 */
		/* 820BA8F4h case   34:*/		cpu::op::li<0>(regs,&regs.R9,0x5A);
		/* 820BA8F4h case   34:*/		return 0x820BA8F8;
		  /* 820BA8F8h */ case   35:  		/* li R8, 0 */
		/* 820BA8F8h case   35:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BA8F8h case   35:*/		return 0x820BA8FC;
		  /* 820BA8FCh */ case   36:  		/* mr R7, R27 */
		/* 820BA8FCh case   36:*/		regs.R7 = regs.R27;
		/* 820BA8FCh case   36:*/		return 0x820BA900;
		  /* 820BA900h */ case   37:  		/* mr R6, R24 */
		/* 820BA900h case   37:*/		regs.R6 = regs.R24;
		/* 820BA900h case   37:*/		return 0x820BA904;
		  /* 820BA904h */ case   38:  		/* mr R5, R28 */
		/* 820BA904h case   38:*/		regs.R5 = regs.R28;
		/* 820BA904h case   38:*/		return 0x820BA908;
		  /* 820BA908h */ case   39:  		/* mr R4, R16 */
		/* 820BA908h case   39:*/		regs.R4 = regs.R16;
		/* 820BA908h case   39:*/		return 0x820BA90C;
		  /* 820BA90Ch */ case   40:  		/* mr R3, R14 */
		/* 820BA90Ch case   40:*/		regs.R3 = regs.R14;
		/* 820BA90Ch case   40:*/		return 0x820BA910;
		  /* 820BA910h */ case   41:  		/* bl -40456 */
		/* 820BA910h case   41:*/		regs.LR = 0x820BA914; return 0x820B0B08;
		/* 820BA910h case   41:*/		return 0x820BA914;
		  /* 820BA914h */ case   42:  		/* or. R31, R3, R3 */
		/* 820BA914h case   42:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA914h case   42:*/		return 0x820BA918;
		  /* 820BA918h */ case   43:  		/* bc 12, CR0_LT, 15040 */
		/* 820BA918h case   43:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA918h case   43:*/		return 0x820BA91C;
		  /* 820BA91Ch */ case   44:  		/* li R9, 87 */
		/* 820BA91Ch case   44:*/		cpu::op::li<0>(regs,&regs.R9,0x57);
		/* 820BA91Ch case   44:*/		return 0x820BA920;
		  /* 820BA920h */ case   45:  		/* mr R8, R27 */
		/* 820BA920h case   45:*/		regs.R8 = regs.R27;
		/* 820BA920h case   45:*/		return 0x820BA924;
		  /* 820BA924h */ case   46:  		/* mr R7, R24 */
		/* 820BA924h case   46:*/		regs.R7 = regs.R24;
		/* 820BA924h case   46:*/		return 0x820BA928;
		  /* 820BA928h */ case   47:  		/* mr R6, R15 */
		/* 820BA928h case   47:*/		regs.R6 = regs.R15;
		/* 820BA928h case   47:*/		return 0x820BA92C;
		  /* 820BA92Ch */ case   48:  		/* mr R5, R29 */
		/* 820BA92Ch case   48:*/		regs.R5 = regs.R29;
		/* 820BA92Ch case   48:*/		return 0x820BA930;
		  /* 820BA930h */ case   49:  		/* mr R4, R16 */
		/* 820BA930h case   49:*/		regs.R4 = regs.R16;
		/* 820BA930h case   49:*/		return 0x820BA934;
		  /* 820BA934h */ case   50:  		/* mr R3, R14 */
		/* 820BA934h case   50:*/		regs.R3 = regs.R14;
		/* 820BA934h case   50:*/		return 0x820BA938;
		  /* 820BA938h */ case   51:  		/* bl -40496 */
		/* 820BA938h case   51:*/		regs.LR = 0x820BA93C; return 0x820B0B08;
		/* 820BA938h case   51:*/		return 0x820BA93C;
		  /* 820BA93Ch */ case   52:  		/* or. R31, R3, R3 */
		/* 820BA93Ch case   52:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA93Ch case   52:*/		return 0x820BA940;
		  /* 820BA940h */ case   53:  		/* bc 12, CR0_LT, 15000 */
		/* 820BA940h case   53:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA940h case   53:*/		return 0x820BA944;
		  /* 820BA944h */ case   54:  		/* mr R27, R22 */
		/* 820BA944h case   54:*/		regs.R27 = regs.R22;
		/* 820BA944h case   54:*/		return 0x820BA948;
		  /* 820BA948h */ case   55:  		/* cmplwi CR6, R30, 0 */
		/* 820BA948h case   55:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA948h case   55:*/		return 0x820BA94C;
		  /* 820BA94Ch */ case   56:  		/* bc 12, CR6_EQ, -8064 */
		/* 820BA94Ch case   56:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA94Ch case   56:*/		return 0x820BA950;
		  /* 820BA950h */ case   57:  		/* mr R29, R15 */
		/* 820BA950h case   57:*/		regs.R29 = regs.R15;
		/* 820BA950h case   57:*/		return 0x820BA954;
		  /* 820BA954h */ case   58:  		/* subf R28, R15, R26 */
		/* 820BA954h case   58:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R15,regs.R26);
		/* 820BA954h case   58:*/		return 0x820BA958;
		  /* 820BA958h */ case   59:  		/* addi R5, R1, 160 */
		/* 820BA958h case   59:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 820BA958h case   59:*/		return 0x820BA95C;
		  /* 820BA95Ch */ case   60:  		/* lwzx R4, <#[R29 + R28]> */
		/* 820BA95Ch case   60:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + regs.R28 + 0x00000000) );
		/* 820BA95Ch case   60:*/		return 0x820BA960;
		  /* 820BA960h */ case   61:  		/* mr R3, R14 */
		/* 820BA960h case   61:*/		regs.R3 = regs.R14;
		/* 820BA960h case   61:*/		return 0x820BA964;
		  /* 820BA964h */ case   62:  		/* bl -47940 */
		/* 820BA964h case   62:*/		regs.LR = 0x820BA968; return 0x820AEE20;
		/* 820BA964h case   62:*/		return 0x820BA968;
		  /* 820BA968h */ case   63:  		/* or. R31, R3, R3 */
		/* 820BA968h case   63:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BA968h case   63:*/		return 0x820BA96C;
		  /* 820BA96Ch */ case   64:  		/* bc 12, CR0_LT, 14956 */
		/* 820BA96Ch case   64:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BA96Ch case   64:*/		return 0x820BA970;
		  /* 820BA970h */ case   65:  		/* lfd FR12, <#[R14 + 176]> */
		/* 820BA970h case   65:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R14 + 0x000000B0) );
		/* 820BA970h case   65:*/		return 0x820BA974;
		  /* 820BA974h */ case   66:  		/* lfd FR11, <#[R1 + 160]> */
		/* 820BA974h case   66:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BA974h case   66:*/		return 0x820BA978;
		  /* 820BA978h */ case   67:  		/* fcmpu CR6, FR11, FR12 */
		/* 820BA978h case   67:*/		cpu::op::fcmpu<6>(regs,regs.FR11,regs.FR12);
		/* 820BA978h case   67:*/		return 0x820BA97C;
		  /* 820BA97Ch */ case   68:  		/* bc 12, CR6_GT, 36 */
		/* 820BA97Ch case   68:*/		if ( regs.CR[6].gt ) { return 0x820BA9A0;  }
		/* 820BA97Ch case   68:*/		return 0x820BA980;
		  /* 820BA980h */ case   69:  		/* lfd FR0, <#[R14 + 168]> */
		/* 820BA980h case   69:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R14 + 0x000000A8) );
		/* 820BA980h case   69:*/		return 0x820BA984;
		  /* 820BA984h */ case   70:  		/* lfd FR13, <#[R1 + 168]> */
		/* 820BA984h case   70:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BA984h case   70:*/		return 0x820BA988;
		  /* 820BA988h */ case   71:  		/* fcmpu CR6, FR13, FR0 */
		/* 820BA988h case   71:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820BA988h case   71:*/		return 0x820BA98C;
		  /* 820BA98Ch */ case   72:  		/* bc 12, CR6_LT, 20 */
		/* 820BA98Ch case   72:*/		if ( regs.CR[6].lt ) { return 0x820BA9A0;  }
		/* 820BA98Ch case   72:*/		return 0x820BA990;
		  /* 820BA990h */ case   73:  		/* fcmpu CR6, FR11, FR0 */
		/* 820BA990h case   73:*/		cpu::op::fcmpu<6>(regs,regs.FR11,regs.FR0);
		/* 820BA990h case   73:*/		return 0x820BA994;
		  /* 820BA994h */ case   74:  		/* bc 12, CR6_EQ, 12 */
		/* 820BA994h case   74:*/		if ( regs.CR[6].eq ) { return 0x820BA9A0;  }
		/* 820BA994h case   74:*/		return 0x820BA998;
		  /* 820BA998h */ case   75:  		/* fcmpu CR6, FR13, FR12 */
		/* 820BA998h case   75:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR12);
		/* 820BA998h case   75:*/		return 0x820BA99C;
		  /* 820BA99Ch */ case   76:  		/* bc 4, CR6_EQ, 12 */
		/* 820BA99Ch case   76:*/		if ( !regs.CR[6].eq ) { return 0x820BA9A8;  }
		/* 820BA99Ch case   76:*/		return 0x820BA9A0;
	}
	return 0x820BA9A0;
} // Block from 820BA86Ch-820BA9A0h (77 instructions)

//////////////////////////////////////////////////////
// Block at 820BA9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA9A0);
		  /* 820BA9A0h */ case    0:  		/* lwz R11, <#[R14 + 36]> */
		/* 820BA9A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000024) );
		/* 820BA9A0h case    0:*/		return 0x820BA9A4;
		  /* 820BA9A4h */ case    1:  		/* stw R11, <#[R29]> */
		/* 820BA9A4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820BA9A4h case    1:*/		return 0x820BA9A8;
	}
	return 0x820BA9A8;
} // Block from 820BA9A0h-820BA9A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BA9A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA9A8);
		  /* 820BA9A8h */ case    0:  		/* addi R27, R27, 1 */
		/* 820BA9A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 820BA9A8h case    0:*/		return 0x820BA9AC;
		  /* 820BA9ACh */ case    1:  		/* addi R29, R29, 4 */
		/* 820BA9ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820BA9ACh case    1:*/		return 0x820BA9B0;
		  /* 820BA9B0h */ case    2:  		/* cmplw CR6, R27, R30 */
		/* 820BA9B0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R30);
		/* 820BA9B0h case    2:*/		return 0x820BA9B4;
		  /* 820BA9B4h */ case    3:  		/* bc 12, CR6_LT, -92 */
		/* 820BA9B4h case    3:*/		if ( regs.CR[6].lt ) { return 0x820BA958;  }
		/* 820BA9B4h case    3:*/		return 0x820BA9B8;
		  /* 820BA9B8h */ case    4:  		/* b -8172 */
		/* 820BA9B8h case    4:*/		return 0x820B89CC;
		/* 820BA9B8h case    4:*/		return 0x820BA9BC;
	}
	return 0x820BA9BC;
} // Block from 820BA9A8h-820BA9BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BA9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BA9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BA9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BA9BC);
		  /* 820BA9BCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BA9BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BA9BCh case    0:*/		return 0x820BA9C0;
		  /* 820BA9C0h */ case    1:  		/* bc 12, CR6_EQ, -8180 */
		/* 820BA9C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA9C0h case    1:*/		return 0x820BA9C4;
		  /* 820BA9C4h */ case    2:  		/* mtspr CTR, R30 */
		/* 820BA9C4h case    2:*/		regs.CTR = regs.R30;
		/* 820BA9C4h case    2:*/		return 0x820BA9C8;
		  /* 820BA9C8h */ case    3:  		/* addi R11, R15, -4 */
		/* 820BA9C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BA9C8h case    3:*/		return 0x820BA9CC;
		  /* 820BA9CCh */ case    4:  		/* lwz R10, <#[R14 + 36]> */
		/* 820BA9CCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000024) );
		/* 820BA9CCh case    4:*/		return 0x820BA9D0;
		  /* 820BA9D0h */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BA9D0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BA9D0h case    5:*/		return 0x820BA9D4;
		  /* 820BA9D4h */ case    6:  		/* bc 16, CR0_LT, -8 */
		/* 820BA9D4h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BA9CC;  }
		/* 820BA9D4h case    6:*/		return 0x820BA9D8;
		  /* 820BA9D8h */ case    7:  		/* b -8204 */
		/* 820BA9D8h case    7:*/		return 0x820B89CC;
		/* 820BA9D8h case    7:*/		return 0x820BA9DC;
		  /* 820BA9DCh */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BA9DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BA9DCh case    8:*/		return 0x820BA9E0;
		  /* 820BA9E0h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BA9E0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BA9E0h case    9:*/		return 0x820BA9E4;
		  /* 820BA9E4h */ case   10:  		/* bc 12, CR6_EQ, 14828 */
		/* 820BA9E4h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BA9E4h case   10:*/		return 0x820BA9E8;
		  /* 820BA9E8h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BA9E8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BA9E8h case   11:*/		return 0x820BA9EC;
		  /* 820BA9ECh */ case   12:  		/* bc 12, CR6_EQ, -8224 */
		/* 820BA9ECh case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BA9ECh case   12:*/		return 0x820BA9F0;
		  /* 820BA9F0h */ case   13:  		/* mr R4, R30 */
		/* 820BA9F0h case   13:*/		regs.R4 = regs.R30;
		/* 820BA9F0h case   13:*/		return 0x820BA9F4;
		  /* 820BA9F4h */ case   14:  		/* mr R3, R14 */
		/* 820BA9F4h case   14:*/		regs.R3 = regs.R14;
		/* 820BA9F4h case   14:*/		return 0x820BA9F8;
		  /* 820BA9F8h */ case   15:  		/* bl -41736 */
		/* 820BA9F8h case   15:*/		regs.LR = 0x820BA9FC; return 0x820B06F0;
		/* 820BA9F8h case   15:*/		return 0x820BA9FC;
		  /* 820BA9FCh */ case   16:  		/* or. R28, R3, R3 */
		/* 820BA9FCh case   16:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820BA9FCh case   16:*/		return 0x820BAA00;
		  /* 820BAA00h */ case   17:  		/* bc 12, CR0_EQ, 10784 */
		/* 820BAA00h case   17:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BAA00h case   17:*/		return 0x820BAA04;
		  /* 820BAA04h */ case   18:  		/* li R29, -1 */
		/* 820BAA04h case   18:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BAA04h case   18:*/		return 0x820BAA08;
		  /* 820BAA08h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 820BAA08h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BAA08h case   19:*/		return 0x820BAA0C;
		  /* 820BAA0Ch */ case   20:  		/* bc 12, CR6_EQ, 64 */
		/* 820BAA0Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x820BAA4C;  }
		/* 820BAA0Ch case   20:*/		return 0x820BAA10;
		  /* 820BAA10h */ case   21:  		/* addi R11, R28, -4 */
		/* 820BAA10h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BAA10h case   21:*/		return 0x820BAA14;
		  /* 820BAA14h */ case   22:  		/* mr R10, R29 */
		/* 820BAA14h case   22:*/		regs.R10 = regs.R29;
		/* 820BAA14h case   22:*/		return 0x820BAA18;
		  /* 820BAA18h */ case   23:  		/* cmplwi CR0, R30, 0 */
		/* 820BAA18h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BAA18h case   23:*/		return 0x820BAA1C;
		  /* 820BAA1Ch */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 820BAA1Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x820BAA2C;  }
		/* 820BAA1Ch case   24:*/		return 0x820BAA20;
		  /* 820BAA20h */ case   25:  		/* mtspr CTR, R30 */
		/* 820BAA20h case   25:*/		regs.CTR = regs.R30;
		/* 820BAA20h case   25:*/		return 0x820BAA24;
		  /* 820BAA24h */ case   26:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BAA24h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BAA24h case   26:*/		return 0x820BAA28;
		  /* 820BAA28h */ case   27:  		/* bc 16, CR0_LT, -4 */
		/* 820BAA28h case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BAA24;  }
		/* 820BAA28h case   27:*/		return 0x820BAA2C;
	}
	return 0x820BAA2C;
} // Block from 820BA9BCh-820BAA2Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BAA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAA2C);
		  /* 820BAA2Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BAA2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BAA2Ch case    0:*/		return 0x820BAA30;
		  /* 820BAA30h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BAA30h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BAA4C;  }
		/* 820BAA30h case    1:*/		return 0x820BAA34;
		  /* 820BAA34h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BAA34h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BAA34h case    2:*/		return 0x820BAA38;
		  /* 820BAA38h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BAA38h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BAA38h case    3:*/		return 0x820BAA3C;
		  /* 820BAA3Ch */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BAA3Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x820BAA4C;  }
		/* 820BAA3Ch case    4:*/		return 0x820BAA40;
		  /* 820BAA40h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BAA40h case    5:*/		regs.CTR = regs.R30;
		/* 820BAA40h case    5:*/		return 0x820BAA44;
		  /* 820BAA44h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BAA44h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BAA44h case    6:*/		return 0x820BAA48;
		  /* 820BAA48h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BAA48h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BAA44;  }
		/* 820BAA48h case    7:*/		return 0x820BAA4C;
	}
	return 0x820BAA4C;
} // Block from 820BAA2Ch-820BAA4Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BAA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAA4C);
		  /* 820BAA4Ch */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BAA4Ch case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BAA4Ch case    0:*/		return 0x820BAA50;
		  /* 820BAA50h */ case    1:  		/* lwz R7, <#[R1 + 148]> */
		/* 820BAA50h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820BAA50h case    1:*/		return 0x820BAA54;
		  /* 820BAA54h */ case    2:  		/* li R9, 4 */
		/* 820BAA54h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BAA54h case    2:*/		return 0x820BAA58;
		  /* 820BAA58h */ case    3:  		/* li R8, 0 */
		/* 820BAA58h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAA58h case    3:*/		return 0x820BAA5C;
		  /* 820BAA5Ch */ case    4:  		/* mr R6, R28 */
		/* 820BAA5Ch case    4:*/		regs.R6 = regs.R28;
		/* 820BAA5Ch case    4:*/		return 0x820BAA60;
		  /* 820BAA60h */ case    5:  		/* oris R5, R30, 4176 */
		/* 820BAA60h case    5:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1050);
		/* 820BAA60h case    5:*/		return 0x820BAA64;
		  /* 820BAA64h */ case    6:  		/* mr R4, R16 */
		/* 820BAA64h case    6:*/		regs.R4 = regs.R16;
		/* 820BAA64h case    6:*/		return 0x820BAA68;
		  /* 820BAA68h */ case    7:  		/* mr R3, R14 */
		/* 820BAA68h case    7:*/		regs.R3 = regs.R14;
		/* 820BAA68h case    7:*/		return 0x820BAA6C;
		  /* 820BAA6Ch */ case    8:  		/* bl -40804 */
		/* 820BAA6Ch case    8:*/		regs.LR = 0x820BAA70; return 0x820B0B08;
		/* 820BAA6Ch case    8:*/		return 0x820BAA70;
		  /* 820BAA70h */ case    9:  		/* or. R31, R3, R3 */
		/* 820BAA70h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAA70h case    9:*/		return 0x820BAA74;
		  /* 820BAA74h */ case   10:  		/* bc 12, CR0_LT, 14692 */
		/* 820BAA74h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAA74h case   10:*/		return 0x820BAA78;
		  /* 820BAA78h */ case   11:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BAA78h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BAA78h case   11:*/		return 0x820BAA7C;
		  /* 820BAA7Ch */ case   12:  		/* mr R8, R28 */
		/* 820BAA7Ch case   12:*/		regs.R8 = regs.R28;
		/* 820BAA7Ch case   12:*/		return 0x820BAA80;
		  /* 820BAA80h */ case   13:  		/* oris R5, R30, 8272 */
		/* 820BAA80h case   13:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2050);
		/* 820BAA80h case   13:*/		return 0x820BAA84;
		  /* 820BAA84h */ case   14:  		/* b 11432 */
		/* 820BAA84h case   14:*/		return 0x820BD72C;
		/* 820BAA84h case   14:*/		return 0x820BAA88;
		  /* 820BAA88h */ case   15:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BAA88h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BAA88h case   15:*/		return 0x820BAA8C;
		  /* 820BAA8Ch */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 820BAA8Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BAA8Ch case   16:*/		return 0x820BAA90;
		  /* 820BAA90h */ case   17:  		/* bc 12, CR6_EQ, 14656 */
		/* 820BAA90h case   17:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BAA90h case   17:*/		return 0x820BAA94;
		  /* 820BAA94h */ case   18:  		/* cmplwi CR6, R15, 0 */
		/* 820BAA94h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BAA94h case   18:*/		return 0x820BAA98;
		  /* 820BAA98h */ case   19:  		/* bc 12, CR6_EQ, -8396 */
		/* 820BAA98h case   19:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BAA98h case   19:*/		return 0x820BAA9C;
		  /* 820BAA9Ch */ case   20:  		/* lwz R5, <#[R1 + 160]> */
		/* 820BAA9Ch case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BAA9Ch case   20:*/		return 0x820BAAA0;
		  /* 820BAAA0h */ case   21:  		/* li R29, -1 */
		/* 820BAAA0h case   21:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BAAA0h case   21:*/		return 0x820BAAA4;
		  /* 820BAAA4h */ case   22:  		/* cmplwi CR6, R5, 1 */
		/* 820BAAA4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 820BAAA4h case   22:*/		return 0x820BAAA8;
		  /* 820BAAA8h */ case   23:  		/* bc 4, CR6_EQ, 80 */
		/* 820BAAA8h case   23:*/		if ( !regs.CR[6].eq ) { return 0x820BAAF8;  }
		/* 820BAAA8h case   23:*/		return 0x820BAAAC;
		  /* 820BAAACh */ case   24:  		/* stw R29, <#[R1 + 348]> */
		/* 820BAAACh case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000015C) );
		/* 820BAAACh case   24:*/		return 0x820BAAB0;
		  /* 820BAAB0h */ case   25:  		/* lis R5, 4112 */
		/* 820BAAB0h case   25:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BAAB0h case   25:*/		return 0x820BAAB4;
		  /* 820BAAB4h */ case   26:  		/* stw R29, <#[R15]> */
		/* 820BAAB4h case   26:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820BAAB4h case   26:*/		return 0x820BAAB8;
		  /* 820BAAB8h */ case   27:  		/* li R9, 0 */
		/* 820BAAB8h case   27:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BAAB8h case   27:*/		return 0x820BAABC;
		  /* 820BAABCh */ case   28:  		/* lwz R30, <#[R1 + 144]> */
		/* 820BAABCh case   28:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 820BAABCh case   28:*/		return 0x820BAAC0;
		  /* 820BAAC0h */ case   29:  		/* li R8, 0 */
		/* 820BAAC0h case   29:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAAC0h case   29:*/		return 0x820BAAC4;
		  /* 820BAAC4h */ case   30:  		/* addi R6, R1, 348 */
		/* 820BAAC4h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x15C);
		/* 820BAAC4h case   30:*/		return 0x820BAAC8;
		  /* 820BAAC8h */ case   31:  		/* mr R7, R30 */
		/* 820BAAC8h case   31:*/		regs.R7 = regs.R30;
		/* 820BAAC8h case   31:*/		return 0x820BAACC;
		  /* 820BAACCh */ case   32:  		/* ori R5, R5, 1 */
		/* 820BAACCh case   32:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BAACCh case   32:*/		return 0x820BAAD0;
		  /* 820BAAD0h */ case   33:  		/* mr R4, R16 */
		/* 820BAAD0h case   33:*/		regs.R4 = regs.R16;
		/* 820BAAD0h case   33:*/		return 0x820BAAD4;
		  /* 820BAAD4h */ case   34:  		/* mr R3, R14 */
		/* 820BAAD4h case   34:*/		regs.R3 = regs.R14;
		/* 820BAAD4h case   34:*/		return 0x820BAAD8;
		  /* 820BAAD8h */ case   35:  		/* bl -40912 */
		/* 820BAAD8h case   35:*/		regs.LR = 0x820BAADC; return 0x820B0B08;
		/* 820BAAD8h case   35:*/		return 0x820BAADC;
		  /* 820BAADCh */ case   36:  		/* or. R31, R3, R3 */
		/* 820BAADCh case   36:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAADCh case   36:*/		return 0x820BAAE0;
		  /* 820BAAE0h */ case   37:  		/* bc 12, CR0_LT, 14584 */
		/* 820BAAE0h case   37:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAAE0h case   37:*/		return 0x820BAAE4;
		  /* 820BAAE4h */ case   38:  		/* lis R5, 8208 */
		/* 820BAAE4h case   38:*/		cpu::op::lis<0>(regs,&regs.R5,0x2010);
		/* 820BAAE4h case   38:*/		return 0x820BAAE8;
		  /* 820BAAE8h */ case   39:  		/* li R9, 4 */
		/* 820BAAE8h case   39:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BAAE8h case   39:*/		return 0x820BAAEC;
		  /* 820BAAECh */ case   40:  		/* addi R8, R1, 348 */
		/* 820BAAECh case   40:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x15C);
		/* 820BAAECh case   40:*/		return 0x820BAAF0;
		  /* 820BAAF0h */ case   41:  		/* mr R7, R30 */
		/* 820BAAF0h case   41:*/		regs.R7 = regs.R30;
		/* 820BAAF0h case   41:*/		return 0x820BAAF4;
		  /* 820BAAF4h */ case   42:  		/* b -11536 */
		/* 820BAAF4h case   42:*/		return 0x820B7DE4;
		/* 820BAAF4h case   42:*/		return 0x820BAAF8;
	}
	return 0x820BAAF8;
} // Block from 820BAA4Ch-820BAAF8h (43 instructions)

//////////////////////////////////////////////////////
// Block at 820BAAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAAF8);
		  /* 820BAAF8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BAAF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BAAF8h case    0:*/		return 0x820BAAFC;
		  /* 820BAAFCh */ case    1:  		/* stw R29, <#[R1 + 376]> */
		/* 820BAAFCh case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000178) );
		/* 820BAAFCh case    1:*/		return 0x820BAB00;
		  /* 820BAB00h */ case    2:  		/* stw R29, <#[R1 + 356]> */
		/* 820BAB00h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000164) );
		/* 820BAB00h case    2:*/		return 0x820BAB04;
		  /* 820BAB04h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 820BAB04h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BAB20;  }
		/* 820BAB04h case    3:*/		return 0x820BAB08;
		  /* 820BAB08h */ case    4:  		/* addi R11, R15, -4 */
		/* 820BAB08h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BAB08h case    4:*/		return 0x820BAB0C;
		  /* 820BAB0Ch */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BAB0Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BAB0Ch case    5:*/		return 0x820BAB10;
		  /* 820BAB10h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BAB10h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BAB20;  }
		/* 820BAB10h case    6:*/		return 0x820BAB14;
		  /* 820BAB14h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BAB14h case    7:*/		regs.CTR = regs.R30;
		/* 820BAB14h case    7:*/		return 0x820BAB18;
		  /* 820BAB18h */ case    8:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BAB18h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BAB18h case    8:*/		return 0x820BAB1C;
		  /* 820BAB1Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BAB1Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BAB18;  }
		/* 820BAB1Ch case    9:*/		return 0x820BAB20;
	}
	return 0x820BAB20;
} // Block from 820BAAF8h-820BAB20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BAB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAB20);
		  /* 820BAB20h */ case    0:  		/* lwz R8, <#[R1 + 144]> */
		/* 820BAB20h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 820BAB20h case    0:*/		return 0x820BAB24;
		  /* 820BAB24h */ case    1:  		/* li R11, 5 */
		/* 820BAB24h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 820BAB24h case    1:*/		return 0x820BAB28;
		  /* 820BAB28h */ case    2:  		/* li R9, 4 */
		/* 820BAB28h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BAB28h case    2:*/		return 0x820BAB2C;
		  /* 820BAB2Ch */ case    3:  		/* rlwimi R5, R11, 28, 0, 11 */
		/* 820BAB2Ch case    3:*/		cpu::op::rlwimi<0,28,0,11>(regs,&regs.R5,regs.R11);
		/* 820BAB2Ch case    3:*/		return 0x820BAB30;
		  /* 820BAB30h */ case    4:  		/* mr R7, R8 */
		/* 820BAB30h case    4:*/		regs.R7 = regs.R8;
		/* 820BAB30h case    4:*/		return 0x820BAB34;
		  /* 820BAB34h */ case    5:  		/* addi R6, R1, 376 */
		/* 820BAB34h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x178);
		/* 820BAB34h case    5:*/		return 0x820BAB38;
		  /* 820BAB38h */ case    6:  		/* mr R4, R16 */
		/* 820BAB38h case    6:*/		regs.R4 = regs.R16;
		/* 820BAB38h case    6:*/		return 0x820BAB3C;
		  /* 820BAB3Ch */ case    7:  		/* mr R3, R14 */
		/* 820BAB3Ch case    7:*/		regs.R3 = regs.R14;
		/* 820BAB3Ch case    7:*/		return 0x820BAB40;
		  /* 820BAB40h */ case    8:  		/* bl -41016 */
		/* 820BAB40h case    8:*/		regs.LR = 0x820BAB44; return 0x820B0B08;
		/* 820BAB40h case    8:*/		return 0x820BAB44;
		  /* 820BAB44h */ case    9:  		/* or. R31, R3, R3 */
		/* 820BAB44h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAB44h case    9:*/		return 0x820BAB48;
		  /* 820BAB48h */ case   10:  		/* bc 12, CR0_LT, 14480 */
		/* 820BAB48h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAB48h case   10:*/		return 0x820BAB4C;
		  /* 820BAB4Ch */ case   11:  		/* lis R5, 4208 */
		/* 820BAB4Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R5,0x1070);
		/* 820BAB4Ch case   11:*/		return 0x820BAB50;
		  /* 820BAB50h */ case   12:  		/* li R9, 4 */
		/* 820BAB50h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BAB50h case   12:*/		return 0x820BAB54;
		  /* 820BAB54h */ case   13:  		/* li R8, 0 */
		/* 820BAB54h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAB54h case   13:*/		return 0x820BAB58;
		  /* 820BAB58h */ case   14:  		/* addi R7, R1, 376 */
		/* 820BAB58h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x178);
		/* 820BAB58h case   14:*/		return 0x820BAB5C;
		  /* 820BAB5Ch */ case   15:  		/* addi R6, R1, 356 */
		/* 820BAB5Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x164);
		/* 820BAB5Ch case   15:*/		return 0x820BAB60;
		  /* 820BAB60h */ case   16:  		/* ori R5, R5, 1 */
		/* 820BAB60h case   16:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BAB60h case   16:*/		return 0x820BAB64;
		  /* 820BAB64h */ case   17:  		/* mr R4, R16 */
		/* 820BAB64h case   17:*/		regs.R4 = regs.R16;
		/* 820BAB64h case   17:*/		return 0x820BAB68;
		  /* 820BAB68h */ case   18:  		/* mr R3, R14 */
		/* 820BAB68h case   18:*/		regs.R3 = regs.R14;
		/* 820BAB68h case   18:*/		return 0x820BAB6C;
		  /* 820BAB6Ch */ case   19:  		/* bl -41060 */
		/* 820BAB6Ch case   19:*/		regs.LR = 0x820BAB70; return 0x820B0B08;
		/* 820BAB6Ch case   19:*/		return 0x820BAB70;
		  /* 820BAB70h */ case   20:  		/* or. R31, R3, R3 */
		/* 820BAB70h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAB70h case   20:*/		return 0x820BAB74;
		  /* 820BAB74h */ case   21:  		/* bc 12, CR0_LT, 14436 */
		/* 820BAB74h case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAB74h case   21:*/		return 0x820BAB78;
		  /* 820BAB78h */ case   22:  		/* lis R5, 4144 */
		/* 820BAB78h case   22:*/		cpu::op::lis<0>(regs,&regs.R5,0x1030);
		/* 820BAB78h case   22:*/		return 0x820BAB7C;
		  /* 820BAB7Ch */ case   23:  		/* li R9, 4 */
		/* 820BAB7Ch case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BAB7Ch case   23:*/		return 0x820BAB80;
		  /* 820BAB80h */ case   24:  		/* li R8, 0 */
		/* 820BAB80h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAB80h case   24:*/		return 0x820BAB84;
		  /* 820BAB84h */ case   25:  		/* addi R7, R1, 356 */
		/* 820BAB84h case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x164);
		/* 820BAB84h case   25:*/		return 0x820BAB88;
		  /* 820BAB88h */ case   26:  		/* b -11684 */
		/* 820BAB88h case   26:*/		return 0x820B7DE4;
		/* 820BAB88h case   26:*/		return 0x820BAB8C;
		  /* 820BAB8Ch */ case   27:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BAB8Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BAB8Ch case   27:*/		return 0x820BAB90;
		  /* 820BAB90h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 820BAB90h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BAB90h case   28:*/		return 0x820BAB94;
		  /* 820BAB94h */ case   29:  		/* bc 12, CR6_EQ, 14396 */
		/* 820BAB94h case   29:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BAB94h case   29:*/		return 0x820BAB98;
		  /* 820BAB98h */ case   30:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BAB98h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BAB98h case   30:*/		return 0x820BAB9C;
		  /* 820BAB9Ch */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 820BAB9Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BAB9Ch case   31:*/		return 0x820BABA0;
		  /* 820BABA0h */ case   32:  		/* bc 12, CR6_EQ, 14384 */
		/* 820BABA0h case   32:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BABA0h case   32:*/		return 0x820BABA4;
		  /* 820BABA4h */ case   33:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BABA4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BABA4h case   33:*/		return 0x820BABA8;
		  /* 820BABA8h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 820BABA8h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BABA8h case   34:*/		return 0x820BABAC;
		  /* 820BABACh */ case   35:  		/* bc 12, CR6_EQ, 14372 */
		/* 820BABACh case   35:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BABACh case   35:*/		return 0x820BABB0;
		  /* 820BABB0h */ case   36:  		/* cmplwi CR6, R15, 0 */
		/* 820BABB0h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BABB0h case   36:*/		return 0x820BABB4;
		  /* 820BABB4h */ case   37:  		/* bc 12, CR6_EQ, -8680 */
		/* 820BABB4h case   37:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BABB4h case   37:*/		return 0x820BABB8;
		  /* 820BABB8h */ case   38:  		/* mr R9, R30 */
		/* 820BABB8h case   38:*/		regs.R9 = regs.R30;
		/* 820BABB8h case   38:*/		return 0x820BABBC;
		  /* 820BABBCh */ case   39:  		/* lwz R8, <#[R1 + 152]> */
		/* 820BABBCh case   39:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000098) );
		/* 820BABBCh case   39:*/		return 0x820BABC0;
		  /* 820BABC0h */ case   40:  		/* mr R5, R15 */
		/* 820BABC0h case   40:*/		regs.R5 = regs.R15;
		/* 820BABC0h case   40:*/		return 0x820BABC4;
		  /* 820BABC4h */ case   41:  		/* lwz R7, <#[R1 + 148]> */
		/* 820BABC4h case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820BABC4h case   41:*/		return 0x820BABC8;
		  /* 820BABC8h */ case   42:  		/* mr R4, R16 */
		/* 820BABC8h case   42:*/		regs.R4 = regs.R16;
		/* 820BABC8h case   42:*/		return 0x820BABCC;
		  /* 820BABCCh */ case   43:  		/* lwz R6, <#[R1 + 144]> */
		/* 820BABCCh case   43:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000090) );
		/* 820BABCCh case   43:*/		return 0x820BABD0;
		  /* 820BABD0h */ case   44:  		/* mr R3, R14 */
		/* 820BABD0h case   44:*/		regs.R3 = regs.R14;
		/* 820BABD0h case   44:*/		return 0x820BABD4;
		  /* 820BABD4h */ case   45:  		/* bl -30292 */
		/* 820BABD4h case   45:*/		regs.LR = 0x820BABD8; return 0x820B3580;
		/* 820BABD4h case   45:*/		return 0x820BABD8;
		  /* 820BABD8h */ case   46:  		/* b 11112 */
		/* 820BABD8h case   46:*/		return 0x820BD740;
		/* 820BABD8h case   46:*/		return 0x820BABDC;
		  /* 820BABDCh */ case   47:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BABDCh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BABDCh case   47:*/		return 0x820BABE0;
		  /* 820BABE0h */ case   48:  		/* cmplwi CR6, R11, 0 */
		/* 820BABE0h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BABE0h case   48:*/		return 0x820BABE4;
		  /* 820BABE4h */ case   49:  		/* bc 12, CR6_EQ, 14316 */
		/* 820BABE4h case   49:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BABE4h case   49:*/		return 0x820BABE8;
		  /* 820BABE8h */ case   50:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BABE8h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BABE8h case   50:*/		return 0x820BABEC;
		  /* 820BABECh */ case   51:  		/* cmplwi CR6, R11, 0 */
		/* 820BABECh case   51:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BABECh case   51:*/		return 0x820BABF0;
		  /* 820BABF0h */ case   52:  		/* bc 12, CR6_EQ, 14304 */
		/* 820BABF0h case   52:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BABF0h case   52:*/		return 0x820BABF4;
		  /* 820BABF4h */ case   53:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BABF4h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BABF4h case   53:*/		return 0x820BABF8;
		  /* 820BABF8h */ case   54:  		/* cmplwi CR6, R11, 0 */
		/* 820BABF8h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BABF8h case   54:*/		return 0x820BABFC;
		  /* 820BABFCh */ case   55:  		/* bc 12, CR6_EQ, 14292 */
		/* 820BABFCh case   55:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BABFCh case   55:*/		return 0x820BAC00;
		  /* 820BAC00h */ case   56:  		/* cmplwi CR6, R30, 4 */
		/* 820BAC00h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 820BAC00h case   56:*/		return 0x820BAC04;
		  /* 820BAC04h */ case   57:  		/* bc 4, CR6_EQ, 14284 */
		/* 820BAC04h case   57:*/		if ( !regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BAC04h case   57:*/		return 0x820BAC08;
		  /* 820BAC08h */ case   58:  		/* cmplwi CR6, R15, 0 */
		/* 820BAC08h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BAC08h case   58:*/		return 0x820BAC0C;
		  /* 820BAC0Ch */ case   59:  		/* bc 12, CR6_EQ, -8768 */
		/* 820BAC0Ch case   59:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BAC0Ch case   59:*/		return 0x820BAC10;
		  /* 820BAC10h */ case   60:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BAC10h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BAC10h case   60:*/		return 0x820BAC14;
		  /* 820BAC14h */ case   61:  		/* mr R3, R14 */
		/* 820BAC14h case   61:*/		regs.R3 = regs.R14;
		/* 820BAC14h case   61:*/		return 0x820BAC18;
		  /* 820BAC18h */ case   62:  		/* lwz R11, <#[R11 + 108]> */
		/* 820BAC18h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 820BAC18h case   62:*/		return 0x820BAC1C;
		  /* 820BAC1Ch */ case   63:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 820BAC1Ch case   63:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 820BAC1Ch case   63:*/		return 0x820BAC20;
		  /* 820BAC20h */ case   64:  		/* bc 12, CR0_EQ, 92 */
		/* 820BAC20h case   64:*/		if ( regs.CR[0].eq ) { return 0x820BAC7C;  }
		/* 820BAC20h case   64:*/		return 0x820BAC24;
		  /* 820BAC24h */ case   65:  		/* lwz R6, <#[R1 + 144]> */
		/* 820BAC24h case   65:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000090) );
		/* 820BAC24h case   65:*/		return 0x820BAC28;
		  /* 820BAC28h */ case   66:  		/* li R11, -1 */
		/* 820BAC28h case   66:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820BAC28h case   66:*/		return 0x820BAC2C;
		  /* 820BAC2Ch */ case   67:  		/* lwz R31, <#[R1 + 148]> */
		/* 820BAC2Ch case   67:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000094) );
		/* 820BAC2Ch case   67:*/		return 0x820BAC30;
		  /* 820BAC30h */ case   68:  		/* lis R5, 20496 */
		/* 820BAC30h case   68:*/		cpu::op::lis<0>(regs,&regs.R5,0x5010);
		/* 820BAC30h case   68:*/		return 0x820BAC34;
		  /* 820BAC34h */ case   69:  		/* lwz R10, <#[R1 + 152]> */
		/* 820BAC34h case   69:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 820BAC34h case   69:*/		return 0x820BAC38;
		  /* 820BAC38h */ case   70:  		/* li R9, 0 */
		/* 820BAC38h case   70:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BAC38h case   70:*/		return 0x820BAC3C;
		  /* 820BAC3Ch */ case   71:  		/* li R8, 0 */
		/* 820BAC3Ch case   71:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAC3Ch case   71:*/		return 0x820BAC40;
		  /* 820BAC40h */ case   72:  		/* addi R7, R1, 640 */
		/* 820BAC40h case   72:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x280);
		/* 820BAC40h case   72:*/		return 0x820BAC44;
		  /* 820BAC44h */ case   73:  		/* lwz R30, <#[R6]> */
		/* 820BAC44h case   73:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R6 + 0x00000000) );
		/* 820BAC44h case   73:*/		return 0x820BAC48;
		  /* 820BAC48h */ case   74:  		/* ori R5, R5, 4 */
		/* 820BAC48h case   74:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x4);
		/* 820BAC48h case   74:*/		return 0x820BAC4C;
		  /* 820BAC4Ch */ case   75:  		/* stw R30, <#[R1 + 640]> */
		/* 820BAC4Ch case   75:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000280) );
		/* 820BAC4Ch case   75:*/		return 0x820BAC50;
		  /* 820BAC50h */ case   76:  		/* lwz R31, <#[R31]> */
		/* 820BAC50h case   76:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000000) );
		/* 820BAC50h case   76:*/		return 0x820BAC54;
		  /* 820BAC54h */ case   77:  		/* stw R31, <#[R1 + 644]> */
		/* 820BAC54h case   77:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000284) );
		/* 820BAC54h case   77:*/		return 0x820BAC58;
		  /* 820BAC58h */ case   78:  		/* lwz R31, <#[R10]> */
		/* 820BAC58h case   78:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000000) );
		/* 820BAC58h case   78:*/		return 0x820BAC5C;
		  /* 820BAC5Ch */ case   79:  		/* stw R31, <#[R1 + 648]> */
		/* 820BAC5Ch case   79:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000288) );
		/* 820BAC5Ch case   79:*/		return 0x820BAC60;
		  /* 820BAC60h */ case   80:  		/* lwz R10, <#[R10]> */
		/* 820BAC60h case   80:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820BAC60h case   80:*/		return 0x820BAC64;
		  /* 820BAC64h */ case   81:  		/* stw R10, <#[R1 + 652]> */
		/* 820BAC64h case   81:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000028C) );
		/* 820BAC64h case   81:*/		return 0x820BAC68;
		  /* 820BAC68h */ case   82:  		/* stw R11, <#[R15]> */
		/* 820BAC68h case   82:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 820BAC68h case   82:*/		return 0x820BAC6C;
		  /* 820BAC6Ch */ case   83:  		/* stw R11, <#[R15 + 4]> */
		/* 820BAC6Ch case   83:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000004) );
		/* 820BAC6Ch case   83:*/		return 0x820BAC70;
		  /* 820BAC70h */ case   84:  		/* stw R11, <#[R15 + 8]> */
		/* 820BAC70h case   84:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 820BAC70h case   84:*/		return 0x820BAC74;
		  /* 820BAC74h */ case   85:  		/* stw R11, <#[R15 + 12]> */
		/* 820BAC74h case   85:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000000C) );
		/* 820BAC74h case   85:*/		return 0x820BAC78;
		  /* 820BAC78h */ case   86:  		/* b 10940 */
		/* 820BAC78h case   86:*/		return 0x820BD734;
		/* 820BAC78h case   86:*/		return 0x820BAC7C;
	}
	return 0x820BAC7C;
} // Block from 820BAB20h-820BAC7Ch (87 instructions)

//////////////////////////////////////////////////////
// Block at 820BAC7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAC7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAC7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAC7C);
		  /* 820BAC7Ch */ case    0:  		/* li R4, 6 */
		/* 820BAC7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 820BAC7Ch case    0:*/		return 0x820BAC80;
		  /* 820BAC80h */ case    1:  		/* bl -42384 */
		/* 820BAC80h case    1:*/		regs.LR = 0x820BAC84; return 0x820B06F0;
		/* 820BAC80h case    1:*/		return 0x820BAC84;
		  /* 820BAC84h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 820BAC84h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820BAC84h case    2:*/		return 0x820BAC88;
		  /* 820BAC88h */ case    3:  		/* bc 12, CR0_EQ, 10136 */
		/* 820BAC88h case    3:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BAC88h case    3:*/		return 0x820BAC8C;
		  /* 820BAC8Ch */ case    4:  		/* li R10, 6 */
		/* 820BAC8Ch case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 820BAC8Ch case    4:*/		return 0x820BAC90;
		  /* 820BAC90h */ case    5:  		/* addi R9, R1, 160 */
		/* 820BAC90h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 820BAC90h case    5:*/		return 0x820BAC94;
		  /* 820BAC94h */ case    6:  		/* addi R11, R1, 160 */
		/* 820BAC94h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 820BAC94h case    6:*/		return 0x820BAC98;
		  /* 820BAC98h */ case    7:  		/* subf R9, R9, R3 */
		/* 820BAC98h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R3);
		/* 820BAC98h case    7:*/		return 0x820BAC9C;
		  /* 820BAC9Ch */ case    8:  		/* mtspr CTR, R10 */
		/* 820BAC9Ch case    8:*/		regs.CTR = regs.R10;
		/* 820BAC9Ch case    8:*/		return 0x820BACA0;
		  /* 820BACA0h */ case    9:  		/* add R10, R9, R11 */
		/* 820BACA0h case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 820BACA0h case    9:*/		return 0x820BACA4;
		  /* 820BACA4h */ case   10:  		/* stw R10, <#[R11]> */
		/* 820BACA4h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820BACA4h case   10:*/		return 0x820BACA8;
		  /* 820BACA8h */ case   11:  		/* addi R11, R11, 4 */
		/* 820BACA8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BACA8h case   11:*/		return 0x820BACAC;
		  /* 820BACACh */ case   12:  		/* bc 16, CR0_LT, -12 */
		/* 820BACACh case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BACA0;  }
		/* 820BACACh case   12:*/		return 0x820BACB0;
		  /* 820BACB0h */ case   13:  		/* li R11, 6 */
		/* 820BACB0h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 820BACB0h case   13:*/		return 0x820BACB4;
		  /* 820BACB4h */ case   14:  		/* li R29, -1 */
		/* 820BACB4h case   14:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BACB4h case   14:*/		return 0x820BACB8;
		  /* 820BACB8h */ case   15:  		/* addi R10, R3, -4 */
		/* 820BACB8h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFC);
		/* 820BACB8h case   15:*/		return 0x820BACBC;
		  /* 820BACBCh */ case   16:  		/* mr R9, R29 */
		/* 820BACBCh case   16:*/		regs.R9 = regs.R29;
		/* 820BACBCh case   16:*/		return 0x820BACC0;
		  /* 820BACC0h */ case   17:  		/* mtspr CTR, R11 */
		/* 820BACC0h case   17:*/		regs.CTR = regs.R11;
		/* 820BACC0h case   17:*/		return 0x820BACC4;
		  /* 820BACC4h */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BACC4h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BACC4h case   18:*/		return 0x820BACC8;
		  /* 820BACC8h */ case   19:  		/* bc 16, CR0_LT, -4 */
		/* 820BACC8h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BACC4;  }
		/* 820BACC8h case   19:*/		return 0x820BACCC;
		  /* 820BACCCh */ case   20:  		/* stw R29, <#[R15]> */
		/* 820BACCCh case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820BACCCh case   20:*/		return 0x820BACD0;
		  /* 820BACD0h */ case   21:  		/* lis R5, 4112 */
		/* 820BACD0h case   21:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BACD0h case   21:*/		return 0x820BACD4;
		  /* 820BACD4h */ case   22:  		/* stw R29, <#[R15 + 4]> */
		/* 820BACD4h case   22:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000004) );
		/* 820BACD4h case   22:*/		return 0x820BACD8;
		  /* 820BACD8h */ case   23:  		/* li R9, 0 */
		/* 820BACD8h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BACD8h case   23:*/		return 0x820BACDC;
		  /* 820BACDCh */ case   24:  		/* stw R29, <#[R15 + 8]> */
		/* 820BACDCh case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000008) );
		/* 820BACDCh case   24:*/		return 0x820BACE0;
		  /* 820BACE0h */ case   25:  		/* li R8, 0 */
		/* 820BACE0h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BACE0h case   25:*/		return 0x820BACE4;
		  /* 820BACE4h */ case   26:  		/* stw R29, <#[R15 + 12]> */
		/* 820BACE4h case   26:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x0000000C) );
		/* 820BACE4h case   26:*/		return 0x820BACE8;
		  /* 820BACE8h */ case   27:  		/* lwz R30, <#[R1 + 144]> */
		/* 820BACE8h case   27:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 820BACE8h case   27:*/		return 0x820BACEC;
		  /* 820BACECh */ case   28:  		/* ori R5, R5, 1 */
		/* 820BACECh case   28:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BACECh case   28:*/		return 0x820BACF0;
		  /* 820BACF0h */ case   29:  		/* lwz R28, <#[R1 + 160]> */
		/* 820BACF0h case   29:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BACF0h case   29:*/		return 0x820BACF4;
		  /* 820BACF4h */ case   30:  		/* mr R4, R16 */
		/* 820BACF4h case   30:*/		regs.R4 = regs.R16;
		/* 820BACF4h case   30:*/		return 0x820BACF8;
		  /* 820BACF8h */ case   31:  		/* mr R7, R30 */
		/* 820BACF8h case   31:*/		regs.R7 = regs.R30;
		/* 820BACF8h case   31:*/		return 0x820BACFC;
		  /* 820BACFCh */ case   32:  		/* mr R6, R28 */
		/* 820BACFCh case   32:*/		regs.R6 = regs.R28;
		/* 820BACFCh case   32:*/		return 0x820BAD00;
		  /* 820BAD00h */ case   33:  		/* mr R3, R14 */
		/* 820BAD00h case   33:*/		regs.R3 = regs.R14;
		/* 820BAD00h case   33:*/		return 0x820BAD04;
		  /* 820BAD04h */ case   34:  		/* bl -41468 */
		/* 820BAD04h case   34:*/		regs.LR = 0x820BAD08; return 0x820B0B08;
		/* 820BAD04h case   34:*/		return 0x820BAD08;
		  /* 820BAD08h */ case   35:  		/* or. R31, R3, R3 */
		/* 820BAD08h case   35:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAD08h case   35:*/		return 0x820BAD0C;
		  /* 820BAD0Ch */ case   36:  		/* bc 12, CR0_LT, 14028 */
		/* 820BAD0Ch case   36:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAD0Ch case   36:*/		return 0x820BAD10;
		  /* 820BAD10h */ case   37:  		/* lwz R26, <#[R1 + 164]> */
		/* 820BAD10h case   37:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BAD10h case   37:*/		return 0x820BAD14;
		  /* 820BAD14h */ case   38:  		/* lis R5, 8224 */
		/* 820BAD14h case   38:*/		cpu::op::lis<0>(regs,&regs.R5,0x2020);
		/* 820BAD14h case   38:*/		return 0x820BAD18;
		  /* 820BAD18h */ case   39:  		/* li R9, 23 */
		/* 820BAD18h case   39:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BAD18h case   39:*/		return 0x820BAD1C;
		  /* 820BAD1Ch */ case   40:  		/* mr R8, R30 */
		/* 820BAD1Ch case   40:*/		regs.R8 = regs.R30;
		/* 820BAD1Ch case   40:*/		return 0x820BAD20;
		  /* 820BAD20h */ case   41:  		/* mr R7, R28 */
		/* 820BAD20h case   41:*/		regs.R7 = regs.R28;
		/* 820BAD20h case   41:*/		return 0x820BAD24;
		  /* 820BAD24h */ case   42:  		/* mr R6, R26 */
		/* 820BAD24h case   42:*/		regs.R6 = regs.R26;
		/* 820BAD24h case   42:*/		return 0x820BAD28;
		  /* 820BAD28h */ case   43:  		/* ori R5, R5, 1 */
		/* 820BAD28h case   43:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BAD28h case   43:*/		return 0x820BAD2C;
		  /* 820BAD2Ch */ case   44:  		/* mr R4, R16 */
		/* 820BAD2Ch case   44:*/		regs.R4 = regs.R16;
		/* 820BAD2Ch case   44:*/		return 0x820BAD30;
		  /* 820BAD30h */ case   45:  		/* mr R3, R14 */
		/* 820BAD30h case   45:*/		regs.R3 = regs.R14;
		/* 820BAD30h case   45:*/		return 0x820BAD34;
		  /* 820BAD34h */ case   46:  		/* bl -41516 */
		/* 820BAD34h case   46:*/		regs.LR = 0x820BAD38; return 0x820B0B08;
		/* 820BAD34h case   46:*/		return 0x820BAD38;
		  /* 820BAD38h */ case   47:  		/* or. R31, R3, R3 */
		/* 820BAD38h case   47:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAD38h case   47:*/		return 0x820BAD3C;
		  /* 820BAD3Ch */ case   48:  		/* bc 12, CR0_LT, 13980 */
		/* 820BAD3Ch case   48:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAD3Ch case   48:*/		return 0x820BAD40;
		  /* 820BAD40h */ case   49:  		/* lis R11, 8272 */
		/* 820BAD40h case   49:*/		cpu::op::lis<0>(regs,&regs.R11,0x2050);
		/* 820BAD40h case   49:*/		return 0x820BAD44;
		  /* 820BAD44h */ case   50:  		/* li R9, 0 */
		/* 820BAD44h case   50:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BAD44h case   50:*/		return 0x820BAD48;
		  /* 820BAD48h */ case   51:  		/* ori R28, R11, 1 */
		/* 820BAD48h case   51:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R11,0x1);
		/* 820BAD48h case   51:*/		return 0x820BAD4C;
		  /* 820BAD4Ch */ case   52:  		/* mr R8, R30 */
		/* 820BAD4Ch case   52:*/		regs.R8 = regs.R30;
		/* 820BAD4Ch case   52:*/		return 0x820BAD50;
		  /* 820BAD50h */ case   53:  		/* mr R7, R26 */
		/* 820BAD50h case   53:*/		regs.R7 = regs.R26;
		/* 820BAD50h case   53:*/		return 0x820BAD54;
		  /* 820BAD54h */ case   54:  		/* addi R6, R15, 4 */
		/* 820BAD54h case   54:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R15,0x4);
		/* 820BAD54h case   54:*/		return 0x820BAD58;
		  /* 820BAD58h */ case   55:  		/* mr R5, R28 */
		/* 820BAD58h case   55:*/		regs.R5 = regs.R28;
		/* 820BAD58h case   55:*/		return 0x820BAD5C;
		  /* 820BAD5Ch */ case   56:  		/* mr R4, R16 */
		/* 820BAD5Ch case   56:*/		regs.R4 = regs.R16;
		/* 820BAD5Ch case   56:*/		return 0x820BAD60;
		  /* 820BAD60h */ case   57:  		/* mr R3, R14 */
		/* 820BAD60h case   57:*/		regs.R3 = regs.R14;
		/* 820BAD60h case   57:*/		return 0x820BAD64;
		  /* 820BAD64h */ case   58:  		/* bl -41564 */
		/* 820BAD64h case   58:*/		regs.LR = 0x820BAD68; return 0x820B0B08;
		/* 820BAD64h case   58:*/		return 0x820BAD68;
		  /* 820BAD68h */ case   59:  		/* or. R31, R3, R3 */
		/* 820BAD68h case   59:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAD68h case   59:*/		return 0x820BAD6C;
		  /* 820BAD6Ch */ case   60:  		/* bc 12, CR0_LT, 13932 */
		/* 820BAD6Ch case   60:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAD6Ch case   60:*/		return 0x820BAD70;
		  /* 820BAD70h */ case   61:  		/* lwz R27, <#[R1 + 148]> */
		/* 820BAD70h case   61:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000094) );
		/* 820BAD70h case   61:*/		return 0x820BAD74;
		  /* 820BAD74h */ case   62:  		/* lis R5, 4112 */
		/* 820BAD74h case   62:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BAD74h case   62:*/		return 0x820BAD78;
		  /* 820BAD78h */ case   63:  		/* lwz R29, <#[R1 + 168]> */
		/* 820BAD78h case   63:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BAD78h case   63:*/		return 0x820BAD7C;
		  /* 820BAD7Ch */ case   64:  		/* li R9, 0 */
		/* 820BAD7Ch case   64:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BAD7Ch case   64:*/		return 0x820BAD80;
		  /* 820BAD80h */ case   65:  		/* li R8, 0 */
		/* 820BAD80h case   65:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAD80h case   65:*/		return 0x820BAD84;
		  /* 820BAD84h */ case   66:  		/* mr R7, R27 */
		/* 820BAD84h case   66:*/		regs.R7 = regs.R27;
		/* 820BAD84h case   66:*/		return 0x820BAD88;
		  /* 820BAD88h */ case   67:  		/* mr R6, R29 */
		/* 820BAD88h case   67:*/		regs.R6 = regs.R29;
		/* 820BAD88h case   67:*/		return 0x820BAD8C;
		  /* 820BAD8Ch */ case   68:  		/* ori R5, R5, 1 */
		/* 820BAD8Ch case   68:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BAD8Ch case   68:*/		return 0x820BAD90;
		  /* 820BAD90h */ case   69:  		/* mr R4, R16 */
		/* 820BAD90h case   69:*/		regs.R4 = regs.R16;
		/* 820BAD90h case   69:*/		return 0x820BAD94;
		  /* 820BAD94h */ case   70:  		/* mr R3, R14 */
		/* 820BAD94h case   70:*/		regs.R3 = regs.R14;
		/* 820BAD94h case   70:*/		return 0x820BAD98;
		  /* 820BAD98h */ case   71:  		/* bl -41616 */
		/* 820BAD98h case   71:*/		regs.LR = 0x820BAD9C; return 0x820B0B08;
		/* 820BAD98h case   71:*/		return 0x820BAD9C;
		  /* 820BAD9Ch */ case   72:  		/* or. R31, R3, R3 */
		/* 820BAD9Ch case   72:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAD9Ch case   72:*/		return 0x820BADA0;
		  /* 820BADA0h */ case   73:  		/* bc 12, CR0_LT, 13880 */
		/* 820BADA0h case   73:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BADA0h case   73:*/		return 0x820BADA4;
		  /* 820BADA4h */ case   74:  		/* lwz R30, <#[R1 + 172]> */
		/* 820BADA4h case   74:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BADA4h case   74:*/		return 0x820BADA8;
		  /* 820BADA8h */ case   75:  		/* lis R5, 8224 */
		/* 820BADA8h case   75:*/		cpu::op::lis<0>(regs,&regs.R5,0x2020);
		/* 820BADA8h case   75:*/		return 0x820BADAC;
		  /* 820BADACh */ case   76:  		/* li R9, 23 */
		/* 820BADACh case   76:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BADACh case   76:*/		return 0x820BADB0;
		  /* 820BADB0h */ case   77:  		/* mr R8, R27 */
		/* 820BADB0h case   77:*/		regs.R8 = regs.R27;
		/* 820BADB0h case   77:*/		return 0x820BADB4;
		  /* 820BADB4h */ case   78:  		/* mr R7, R29 */
		/* 820BADB4h case   78:*/		regs.R7 = regs.R29;
		/* 820BADB4h case   78:*/		return 0x820BADB8;
		  /* 820BADB8h */ case   79:  		/* mr R6, R30 */
		/* 820BADB8h case   79:*/		regs.R6 = regs.R30;
		/* 820BADB8h case   79:*/		return 0x820BADBC;
		  /* 820BADBCh */ case   80:  		/* ori R5, R5, 1 */
		/* 820BADBCh case   80:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BADBCh case   80:*/		return 0x820BADC0;
		  /* 820BADC0h */ case   81:  		/* mr R4, R16 */
		/* 820BADC0h case   81:*/		regs.R4 = regs.R16;
		/* 820BADC0h case   81:*/		return 0x820BADC4;
		  /* 820BADC4h */ case   82:  		/* mr R3, R14 */
		/* 820BADC4h case   82:*/		regs.R3 = regs.R14;
		/* 820BADC4h case   82:*/		return 0x820BADC8;
		  /* 820BADC8h */ case   83:  		/* bl -41664 */
		/* 820BADC8h case   83:*/		regs.LR = 0x820BADCC; return 0x820B0B08;
		/* 820BADC8h case   83:*/		return 0x820BADCC;
		  /* 820BADCCh */ case   84:  		/* or. R31, R3, R3 */
		/* 820BADCCh case   84:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BADCCh case   84:*/		return 0x820BADD0;
		  /* 820BADD0h */ case   85:  		/* bc 12, CR0_LT, 13832 */
		/* 820BADD0h case   85:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BADD0h case   85:*/		return 0x820BADD4;
		  /* 820BADD4h */ case   86:  		/* lwz R29, <#[R1 + 176]> */
		/* 820BADD4h case   86:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BADD4h case   86:*/		return 0x820BADD8;
		  /* 820BADD8h */ case   87:  		/* li R9, 23 */
		/* 820BADD8h case   87:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BADD8h case   87:*/		return 0x820BADDC;
		  /* 820BADDCh */ case   88:  		/* mr R8, R30 */
		/* 820BADDCh case   88:*/		regs.R8 = regs.R30;
		/* 820BADDCh case   88:*/		return 0x820BADE0;
		  /* 820BADE0h */ case   89:  		/* mr R7, R26 */
		/* 820BADE0h case   89:*/		regs.R7 = regs.R26;
		/* 820BADE0h case   89:*/		return 0x820BADE4;
		  /* 820BADE4h */ case   90:  		/* mr R6, R29 */
		/* 820BADE4h case   90:*/		regs.R6 = regs.R29;
		/* 820BADE4h case   90:*/		return 0x820BADE8;
		  /* 820BADE8h */ case   91:  		/* mr R5, R28 */
		/* 820BADE8h case   91:*/		regs.R5 = regs.R28;
		/* 820BADE8h case   91:*/		return 0x820BADEC;
		  /* 820BADECh */ case   92:  		/* mr R4, R16 */
		/* 820BADECh case   92:*/		regs.R4 = regs.R16;
		/* 820BADECh case   92:*/		return 0x820BADF0;
		  /* 820BADF0h */ case   93:  		/* mr R3, R14 */
		/* 820BADF0h case   93:*/		regs.R3 = regs.R14;
		/* 820BADF0h case   93:*/		return 0x820BADF4;
		  /* 820BADF4h */ case   94:  		/* bl -41708 */
		/* 820BADF4h case   94:*/		regs.LR = 0x820BADF8; return 0x820B0B08;
		/* 820BADF4h case   94:*/		return 0x820BADF8;
		  /* 820BADF8h */ case   95:  		/* or. R31, R3, R3 */
		/* 820BADF8h case   95:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BADF8h case   95:*/		return 0x820BADFC;
		  /* 820BADFCh */ case   96:  		/* bc 12, CR0_LT, 13788 */
		/* 820BADFCh case   96:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BADFCh case   96:*/		return 0x820BAE00;
		  /* 820BAE00h */ case   97:  		/* lwz R30, <#[R1 + 180]> */
		/* 820BAE00h case   97:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BAE00h case   97:*/		return 0x820BAE04;
		  /* 820BAE04h */ case   98:  		/* li R8, 1 */
		/* 820BAE04h case   98:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 820BAE04h case   98:*/		return 0x820BAE08;
		  /* 820BAE08h */ case   99:  		/* mr R6, R27 */
		/* 820BAE08h case   99:*/		regs.R6 = regs.R27;
		/* 820BAE08h case   99:*/		return 0x820BAE0C;
		  /* 820BAE0Ch */ case  100:  		/* lwz R7, <#[R1 + 152]> */
		/* 820BAE0Ch case  100:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000098) );
		/* 820BAE0Ch case  100:*/		return 0x820BAE10;
		  /* 820BAE10h */ case  101:  		/* mr R5, R30 */
		/* 820BAE10h case  101:*/		regs.R5 = regs.R30;
		/* 820BAE10h case  101:*/		return 0x820BAE14;
		  /* 820BAE14h */ case  102:  		/* mr R4, R16 */
		/* 820BAE14h case  102:*/		regs.R4 = regs.R16;
		/* 820BAE14h case  102:*/		return 0x820BAE18;
		  /* 820BAE18h */ case  103:  		/* mr R3, R14 */
		/* 820BAE18h case  103:*/		regs.R3 = regs.R14;
		/* 820BAE18h case  103:*/		return 0x820BAE1C;
		  /* 820BAE1Ch */ case  104:  		/* bl -29628 */
		/* 820BAE1Ch case  104:*/		regs.LR = 0x820BAE20; return 0x820B3A60;
		/* 820BAE1Ch case  104:*/		return 0x820BAE20;
		  /* 820BAE20h */ case  105:  		/* or. R31, R3, R3 */
		/* 820BAE20h case  105:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAE20h case  105:*/		return 0x820BAE24;
		  /* 820BAE24h */ case  106:  		/* bc 12, CR0_LT, 13748 */
		/* 820BAE24h case  106:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAE24h case  106:*/		return 0x820BAE28;
		  /* 820BAE28h */ case  107:  		/* li R9, 4 */
		/* 820BAE28h case  107:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BAE28h case  107:*/		return 0x820BAE2C;
		  /* 820BAE2Ch */ case  108:  		/* mr R8, R30 */
		/* 820BAE2Ch case  108:*/		regs.R8 = regs.R30;
		/* 820BAE2Ch case  108:*/		return 0x820BAE30;
		  /* 820BAE30h */ case  109:  		/* mr R7, R29 */
		/* 820BAE30h case  109:*/		regs.R7 = regs.R29;
		/* 820BAE30h case  109:*/		return 0x820BAE34;
		  /* 820BAE34h */ case  110:  		/* addi R6, R15, 8 */
		/* 820BAE34h case  110:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R15,0x8);
		/* 820BAE34h case  110:*/		return 0x820BAE38;
		  /* 820BAE38h */ case  111:  		/* mr R5, R28 */
		/* 820BAE38h case  111:*/		regs.R5 = regs.R28;
		/* 820BAE38h case  111:*/		return 0x820BAE3C;
		  /* 820BAE3Ch */ case  112:  		/* mr R4, R16 */
		/* 820BAE3Ch case  112:*/		regs.R4 = regs.R16;
		/* 820BAE3Ch case  112:*/		return 0x820BAE40;
		  /* 820BAE40h */ case  113:  		/* mr R3, R14 */
		/* 820BAE40h case  113:*/		regs.R3 = regs.R14;
		/* 820BAE40h case  113:*/		return 0x820BAE44;
		  /* 820BAE44h */ case  114:  		/* bl -41788 */
		/* 820BAE44h case  114:*/		regs.LR = 0x820BAE48; return 0x820B0B08;
		/* 820BAE44h case  114:*/		return 0x820BAE48;
		  /* 820BAE48h */ case  115:  		/* or. R31, R3, R3 */
		/* 820BAE48h case  115:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAE48h case  115:*/		return 0x820BAE4C;
		  /* 820BAE4Ch */ case  116:  		/* bc 12, CR0_LT, 13708 */
		/* 820BAE4Ch case  116:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAE4Ch case  116:*/		return 0x820BAE50;
		  /* 820BAE50h */ case  117:  		/* addi R30, R14, 32 */
		/* 820BAE50h case  117:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R14,0x20);
		/* 820BAE50h case  117:*/		return 0x820BAE54;
		  /* 820BAE54h */ case  118:  		/* lis R5, 4096 */
		/* 820BAE54h case  118:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820BAE54h case  118:*/		return 0x820BAE58;
		  /* 820BAE58h */ case  119:  		/* li R9, 23 */
		/* 820BAE58h case  119:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BAE58h case  119:*/		return 0x820BAE5C;
		  /* 820BAE5Ch */ case  120:  		/* li R8, 0 */
		/* 820BAE5Ch case  120:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAE5Ch case  120:*/		return 0x820BAE60;
		  /* 820BAE60h */ case  121:  		/* mr R7, R30 */
		/* 820BAE60h case  121:*/		regs.R7 = regs.R30;
		/* 820BAE60h case  121:*/		return 0x820BAE64;
		  /* 820BAE64h */ case  122:  		/* mr R6, R15 */
		/* 820BAE64h case  122:*/		regs.R6 = regs.R15;
		/* 820BAE64h case  122:*/		return 0x820BAE68;
		  /* 820BAE68h */ case  123:  		/* ori R5, R5, 1 */
		/* 820BAE68h case  123:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BAE68h case  123:*/		return 0x820BAE6C;
		  /* 820BAE6Ch */ case  124:  		/* mr R4, R16 */
		/* 820BAE6Ch case  124:*/		regs.R4 = regs.R16;
		/* 820BAE6Ch case  124:*/		return 0x820BAE70;
		  /* 820BAE70h */ case  125:  		/* mr R3, R14 */
		/* 820BAE70h case  125:*/		regs.R3 = regs.R14;
		/* 820BAE70h case  125:*/		return 0x820BAE74;
		  /* 820BAE74h */ case  126:  		/* bl -41836 */
		/* 820BAE74h case  126:*/		regs.LR = 0x820BAE78; return 0x820B0B08;
		/* 820BAE74h case  126:*/		return 0x820BAE78;
		  /* 820BAE78h */ case  127:  		/* or. R31, R3, R3 */
		/* 820BAE78h case  127:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAE78h case  127:*/		return 0x820BAE7C;
		  /* 820BAE7Ch */ case  128:  		/* bc 12, CR0_LT, 13660 */
		/* 820BAE7Ch case  128:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAE7Ch case  128:*/		return 0x820BAE80;
		  /* 820BAE80h */ case  129:  		/* lis R5, 4096 */
		/* 820BAE80h case  129:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820BAE80h case  129:*/		return 0x820BAE84;
		  /* 820BAE84h */ case  130:  		/* li R9, 23 */
		/* 820BAE84h case  130:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BAE84h case  130:*/		return 0x820BAE88;
		  /* 820BAE88h */ case  131:  		/* li R8, 0 */
		/* 820BAE88h case  131:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAE88h case  131:*/		return 0x820BAE8C;
		  /* 820BAE8Ch */ case  132:  		/* mr R7, R30 */
		/* 820BAE8Ch case  132:*/		regs.R7 = regs.R30;
		/* 820BAE8Ch case  132:*/		return 0x820BAE90;
		  /* 820BAE90h */ case  133:  		/* addi R6, R15, 12 */
		/* 820BAE90h case  133:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R15,0xC);
		/* 820BAE90h case  133:*/		return 0x820BAE94;
		  /* 820BAE94h */ case  134:  		/* ori R5, R5, 1 */
		/* 820BAE94h case  134:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BAE94h case  134:*/		return 0x820BAE98;
		  /* 820BAE98h */ case  135:  		/* mr R3, R14 */
		/* 820BAE98h case  135:*/		regs.R3 = regs.R14;
		/* 820BAE98h case  135:*/		return 0x820BAE9C;
		  /* 820BAE9Ch */ case  136:  		/* b 10396 */
		/* 820BAE9Ch case  136:*/		return 0x820BD738;
		/* 820BAE9Ch case  136:*/		return 0x820BAEA0;
		  /* 820BAEA0h */ case  137:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BAEA0h case  137:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BAEA0h case  137:*/		return 0x820BAEA4;
		  /* 820BAEA4h */ case  138:  		/* cmplwi CR6, R11, 0 */
		/* 820BAEA4h case  138:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BAEA4h case  138:*/		return 0x820BAEA8;
		  /* 820BAEA8h */ case  139:  		/* bc 12, CR6_EQ, 13608 */
		/* 820BAEA8h case  139:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BAEA8h case  139:*/		return 0x820BAEAC;
		  /* 820BAEACh */ case  140:  		/* cmplwi CR6, R15, 0 */
		/* 820BAEACh case  140:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BAEACh case  140:*/		return 0x820BAEB0;
		  /* 820BAEB0h */ case  141:  		/* bc 12, CR6_EQ, -9444 */
		/* 820BAEB0h case  141:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BAEB0h case  141:*/		return 0x820BAEB4;
		  /* 820BAEB4h */ case  142:  		/* lis R11, -32255 */
		/* 820BAEB4h case  142:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BAEB4h case  142:*/		return 0x820BAEB8;
		  /* 820BAEB8h */ case  143:  		/* lwz R31, <#[R14 + 8]> */
		/* 820BAEB8h case  143:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R14 + 0x00000008) );
		/* 820BAEB8h case  143:*/		return 0x820BAEBC;
		  /* 820BAEBCh */ case  144:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 820BAEBCh case  144:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 820BAEBCh case  144:*/		return 0x820BAEC0;
		  /* 820BAEC0h */ case  145:  		/* bl -143592 */
		/* 820BAEC0h case  145:*/		regs.LR = 0x820BAEC4; return 0x82097DD8;
		/* 820BAEC0h case  145:*/		return 0x820BAEC4;
		  /* 820BAEC4h */ case  146:  		/* li R6, 0 */
		/* 820BAEC4h case  146:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BAEC4h case  146:*/		return 0x820BAEC8;
		  /* 820BAEC8h */ case  147:  		/* lwz R4, <#[R31 + 120]> */
		/* 820BAEC8h case  147:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820BAEC8h case  147:*/		return 0x820BAECC;
		  /* 820BAECCh */ case  148:  		/* li R5, 0 */
		/* 820BAECCh case  148:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BAECCh case  148:*/		return 0x820BAED0;
		  /* 820BAED0h */ case  149:  		/* mr R3, R31 */
		/* 820BAED0h case  149:*/		regs.R3 = regs.R31;
		/* 820BAED0h case  149:*/		return 0x820BAED4;
		  /* 820BAED4h */ case  150:  		/* bl 271188 */
		/* 820BAED4h case  150:*/		regs.LR = 0x820BAED8; return 0x820FD228;
		/* 820BAED4h case  150:*/		return 0x820BAED8;
		  /* 820BAED8h */ case  151:  		/* mr R31, R3 */
		/* 820BAED8h case  151:*/		regs.R31 = regs.R3;
		/* 820BAED8h case  151:*/		return 0x820BAEDC;
		  /* 820BAEDCh */ case  152:  		/* rlwinm R4, R30, 1, 0, 30 */
		/* 820BAEDCh case  152:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R30);
		/* 820BAEDCh case  152:*/		return 0x820BAEE0;
		  /* 820BAEE0h */ case  153:  		/* mr R3, R14 */
		/* 820BAEE0h case  153:*/		regs.R3 = regs.R14;
		/* 820BAEE0h case  153:*/		return 0x820BAEE4;
		  /* 820BAEE4h */ case  154:  		/* bl -42996 */
		/* 820BAEE4h case  154:*/		regs.LR = 0x820BAEE8; return 0x820B06F0;
		/* 820BAEE4h case  154:*/		return 0x820BAEE8;
		  /* 820BAEE8h */ case  155:  		/* or. R11, R3, R3 */
		/* 820BAEE8h case  155:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BAEE8h case  155:*/		return 0x820BAEEC;
		  /* 820BAEECh */ case  156:  		/* bc 12, CR0_EQ, 9524 */
		/* 820BAEECh case  156:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BAEECh case  156:*/		return 0x820BAEF0;
		  /* 820BAEF0h */ case  157:  		/* li R10, 2 */
		/* 820BAEF0h case  157:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820BAEF0h case  157:*/		return 0x820BAEF4;
		  /* 820BAEF4h */ case  158:  		/* addi R9, R1, 124 */
		/* 820BAEF4h case  158:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820BAEF4h case  158:*/		return 0x820BAEF8;
		  /* 820BAEF8h */ case  159:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BAEF8h case  159:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BAEF8h case  159:*/		return 0x820BAEFC;
		  /* 820BAEFCh */ case  160:  		/* mtspr CTR, R10 */
		/* 820BAEFCh case  160:*/		regs.CTR = regs.R10;
		/* 820BAEFCh case  160:*/		return 0x820BAF00;
		  /* 820BAF00h */ case  161:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BAF00h case  161:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BAF00h case  161:*/		return 0x820BAF04;
		  /* 820BAF04h */ case  162:  		/* add R11, R11, R8 */
		/* 820BAF04h case  162:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820BAF04h case  162:*/		return 0x820BAF08;
		  /* 820BAF08h */ case  163:  		/* bc 16, CR0_LT, -8 */
		/* 820BAF08h case  163:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BAF00;  }
		/* 820BAF08h case  163:*/		return 0x820BAF0C;
		  /* 820BAF0Ch */ case  164:  		/* lwz R27, <#[R1 + 128]> */
		/* 820BAF0Ch case  164:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 820BAF0Ch case  164:*/		return 0x820BAF10;
		  /* 820BAF10h */ case  165:  		/* cmplwi CR6, R30, 0 */
		/* 820BAF10h case  165:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BAF10h case  165:*/		return 0x820BAF14;
		  /* 820BAF14h */ case  166:  		/* bc 12, CR6_EQ, 28 */
		/* 820BAF14h case  166:*/		if ( regs.CR[6].eq ) { return 0x820BAF30;  }
		/* 820BAF14h case  166:*/		return 0x820BAF18;
		  /* 820BAF18h */ case  167:  		/* addi R11, R27, -4 */
		/* 820BAF18h case  167:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BAF18h case  167:*/		return 0x820BAF1C;
		  /* 820BAF1Ch */ case  168:  		/* cmplwi CR0, R30, 0 */
		/* 820BAF1Ch case  168:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BAF1Ch case  168:*/		return 0x820BAF20;
		  /* 820BAF20h */ case  169:  		/* bc 12, CR0_EQ, 16 */
		/* 820BAF20h case  169:*/		if ( regs.CR[0].eq ) { return 0x820BAF30;  }
		/* 820BAF20h case  169:*/		return 0x820BAF24;
		  /* 820BAF24h */ case  170:  		/* mtspr CTR, R30 */
		/* 820BAF24h case  170:*/		regs.CTR = regs.R30;
		/* 820BAF24h case  170:*/		return 0x820BAF28;
		  /* 820BAF28h */ case  171:  		/* stwu R31, <#[R11 + 4]> */
		/* 820BAF28h case  171:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BAF28h case  171:*/		return 0x820BAF2C;
		  /* 820BAF2Ch */ case  172:  		/* bc 16, CR0_LT, -4 */
		/* 820BAF2Ch case  172:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BAF28;  }
		/* 820BAF2Ch case  172:*/		return 0x820BAF30;
	}
	return 0x820BAF30;
} // Block from 820BAC7Ch-820BAF30h (173 instructions)

//////////////////////////////////////////////////////
// Block at 820BAF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAF30);
		  /* 820BAF30h */ case    0:  		/* lwz R28, <#[R1 + 132]> */
		/* 820BAF30h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 820BAF30h case    0:*/		return 0x820BAF34;
		  /* 820BAF34h */ case    1:  		/* li R29, -1 */
		/* 820BAF34h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BAF34h case    1:*/		return 0x820BAF38;
		  /* 820BAF38h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820BAF38h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BAF38h case    2:*/		return 0x820BAF3C;
		  /* 820BAF3Ch */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 820BAF3Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820BAF7C;  }
		/* 820BAF3Ch case    3:*/		return 0x820BAF40;
		  /* 820BAF40h */ case    4:  		/* addi R11, R28, -4 */
		/* 820BAF40h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BAF40h case    4:*/		return 0x820BAF44;
		  /* 820BAF44h */ case    5:  		/* mr R10, R29 */
		/* 820BAF44h case    5:*/		regs.R10 = regs.R29;
		/* 820BAF44h case    5:*/		return 0x820BAF48;
		  /* 820BAF48h */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820BAF48h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BAF48h case    6:*/		return 0x820BAF4C;
		  /* 820BAF4Ch */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820BAF4Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x820BAF5C;  }
		/* 820BAF4Ch case    7:*/		return 0x820BAF50;
		  /* 820BAF50h */ case    8:  		/* mtspr CTR, R30 */
		/* 820BAF50h case    8:*/		regs.CTR = regs.R30;
		/* 820BAF50h case    8:*/		return 0x820BAF54;
		  /* 820BAF54h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BAF54h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BAF54h case    9:*/		return 0x820BAF58;
		  /* 820BAF58h */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820BAF58h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BAF54;  }
		/* 820BAF58h case   10:*/		return 0x820BAF5C;
	}
	return 0x820BAF5C;
} // Block from 820BAF30h-820BAF5Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BAF5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAF5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAF5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAF5C);
		  /* 820BAF5Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BAF5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BAF5Ch case    0:*/		return 0x820BAF60;
		  /* 820BAF60h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BAF60h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BAF7C;  }
		/* 820BAF60h case    1:*/		return 0x820BAF64;
		  /* 820BAF64h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BAF64h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BAF64h case    2:*/		return 0x820BAF68;
		  /* 820BAF68h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BAF68h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BAF68h case    3:*/		return 0x820BAF6C;
		  /* 820BAF6Ch */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BAF6Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x820BAF7C;  }
		/* 820BAF6Ch case    4:*/		return 0x820BAF70;
		  /* 820BAF70h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BAF70h case    5:*/		regs.CTR = regs.R30;
		/* 820BAF70h case    5:*/		return 0x820BAF74;
		  /* 820BAF74h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BAF74h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BAF74h case    6:*/		return 0x820BAF78;
		  /* 820BAF78h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BAF78h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BAF74;  }
		/* 820BAF78h case    7:*/		return 0x820BAF7C;
	}
	return 0x820BAF7C;
} // Block from 820BAF5Ch-820BAF7Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BAF7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BAF7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BAF7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BAF7C);
		  /* 820BAF7Ch */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BAF7Ch case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BAF7Ch case    0:*/		return 0x820BAF80;
		  /* 820BAF80h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BAF80h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BAF80h case    1:*/		return 0x820BAF84;
		  /* 820BAF84h */ case    2:  		/* li R9, 0 */
		/* 820BAF84h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BAF84h case    2:*/		return 0x820BAF88;
		  /* 820BAF88h */ case    3:  		/* li R8, 0 */
		/* 820BAF88h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BAF88h case    3:*/		return 0x820BAF8C;
		  /* 820BAF8Ch */ case    4:  		/* mr R6, R28 */
		/* 820BAF8Ch case    4:*/		regs.R6 = regs.R28;
		/* 820BAF8Ch case    4:*/		return 0x820BAF90;
		  /* 820BAF90h */ case    5:  		/* oris R5, R30, 4192 */
		/* 820BAF90h case    5:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1060);
		/* 820BAF90h case    5:*/		return 0x820BAF94;
		  /* 820BAF94h */ case    6:  		/* mr R4, R16 */
		/* 820BAF94h case    6:*/		regs.R4 = regs.R16;
		/* 820BAF94h case    6:*/		return 0x820BAF98;
		  /* 820BAF98h */ case    7:  		/* mr R3, R14 */
		/* 820BAF98h case    7:*/		regs.R3 = regs.R14;
		/* 820BAF98h case    7:*/		return 0x820BAF9C;
		  /* 820BAF9Ch */ case    8:  		/* bl -42132 */
		/* 820BAF9Ch case    8:*/		regs.LR = 0x820BAFA0; return 0x820B0B08;
		/* 820BAF9Ch case    8:*/		return 0x820BAFA0;
		  /* 820BAFA0h */ case    9:  		/* or. R31, R3, R3 */
		/* 820BAFA0h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BAFA0h case    9:*/		return 0x820BAFA4;
		  /* 820BAFA4h */ case   10:  		/* bc 12, CR0_LT, 13364 */
		/* 820BAFA4h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BAFA4h case   10:*/		return 0x820BAFA8;
		  /* 820BAFA8h */ case   11:  		/* mr R7, R27 */
		/* 820BAFA8h case   11:*/		regs.R7 = regs.R27;
		/* 820BAFA8h case   11:*/		return 0x820BAFAC;
		  /* 820BAFACh */ case   12:  		/* b -1328 */
		/* 820BAFACh case   12:*/		return 0x820BAA7C;
		/* 820BAFACh case   12:*/		return 0x820BAFB0;
		  /* 820BAFB0h */ case   13:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BAFB0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BAFB0h case   13:*/		return 0x820BAFB4;
		  /* 820BAFB4h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 820BAFB4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BAFB4h case   14:*/		return 0x820BAFB8;
		  /* 820BAFB8h */ case   15:  		/* bc 12, CR6_EQ, 13336 */
		/* 820BAFB8h case   15:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BAFB8h case   15:*/		return 0x820BAFBC;
		  /* 820BAFBCh */ case   16:  		/* cmplwi CR6, R15, 0 */
		/* 820BAFBCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BAFBCh case   16:*/		return 0x820BAFC0;
		  /* 820BAFC0h */ case   17:  		/* bc 12, CR6_EQ, -9716 */
		/* 820BAFC0h case   17:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BAFC0h case   17:*/		return 0x820BAFC4;
		  /* 820BAFC4h */ case   18:  		/* lis R11, -32255 */
		/* 820BAFC4h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BAFC4h case   18:*/		return 0x820BAFC8;
		  /* 820BAFC8h */ case   19:  		/* lwz R31, <#[R14 + 8]> */
		/* 820BAFC8h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R14 + 0x00000008) );
		/* 820BAFC8h case   19:*/		return 0x820BAFCC;
		  /* 820BAFCCh */ case   20:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 820BAFCCh case   20:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 820BAFCCh case   20:*/		return 0x820BAFD0;
		  /* 820BAFD0h */ case   21:  		/* bl -143864 */
		/* 820BAFD0h case   21:*/		regs.LR = 0x820BAFD4; return 0x82097DD8;
		/* 820BAFD0h case   21:*/		return 0x820BAFD4;
		  /* 820BAFD4h */ case   22:  		/* lis R11, -32255 */
		/* 820BAFD4h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BAFD4h case   22:*/		return 0x820BAFD8;
		  /* 820BAFD8h */ case   23:  		/* fmr FR31, FR1 */
		/* 820BAFD8h case   23:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 820BAFD8h case   23:*/		return 0x820BAFDC;
		  /* 820BAFDCh */ case   24:  		/* lfd FR1, <#[R11 + 9040]> */
		/* 820BAFDCh case   24:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00002350) );
		/* 820BAFDCh case   24:*/		return 0x820BAFE0;
		  /* 820BAFE0h */ case   25:  		/* bl -143880 */
		/* 820BAFE0h case   25:*/		regs.LR = 0x820BAFE4; return 0x82097DD8;
		/* 820BAFE0h case   25:*/		return 0x820BAFE4;
		  /* 820BAFE4h */ case   26:  		/* li R6, 0 */
		/* 820BAFE4h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BAFE4h case   26:*/		return 0x820BAFE8;
		  /* 820BAFE8h */ case   27:  		/* lwz R4, <#[R31 + 120]> */
		/* 820BAFE8h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820BAFE8h case   27:*/		return 0x820BAFEC;
		  /* 820BAFECh */ case   28:  		/* li R5, 0 */
		/* 820BAFECh case   28:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BAFECh case   28:*/		return 0x820BAFF0;
		  /* 820BAFF0h */ case   29:  		/* fdiv FR1, FR31, FR1 */
		/* 820BAFF0h case   29:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR31,regs.FR1);
		/* 820BAFF0h case   29:*/		return 0x820BAFF4;
		  /* 820BAFF4h */ case   30:  		/* mr R3, R31 */
		/* 820BAFF4h case   30:*/		regs.R3 = regs.R31;
		/* 820BAFF4h case   30:*/		return 0x820BAFF8;
		  /* 820BAFF8h */ case   31:  		/* bl 270896 */
		/* 820BAFF8h case   31:*/		regs.LR = 0x820BAFFC; return 0x820FD228;
		/* 820BAFF8h case   31:*/		return 0x820BAFFC;
		  /* 820BAFFCh */ case   32:  		/* mr R31, R3 */
		/* 820BAFFCh case   32:*/		regs.R31 = regs.R3;
		/* 820BAFFCh case   32:*/		return 0x820BB000;
		  /* 820BB000h */ case   33:  		/* rlwinm R4, R30, 1, 0, 30 */
		/* 820BB000h case   33:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R30);
		/* 820BB000h case   33:*/		return 0x820BB004;
		  /* 820BB004h */ case   34:  		/* mr R3, R14 */
		/* 820BB004h case   34:*/		regs.R3 = regs.R14;
		/* 820BB004h case   34:*/		return 0x820BB008;
		  /* 820BB008h */ case   35:  		/* bl -43288 */
		/* 820BB008h case   35:*/		regs.LR = 0x820BB00C; return 0x820B06F0;
		/* 820BB008h case   35:*/		return 0x820BB00C;
		  /* 820BB00Ch */ case   36:  		/* or. R11, R3, R3 */
		/* 820BB00Ch case   36:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BB00Ch case   36:*/		return 0x820BB010;
		  /* 820BB010h */ case   37:  		/* bc 12, CR0_EQ, 9232 */
		/* 820BB010h case   37:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BB010h case   37:*/		return 0x820BB014;
		  /* 820BB014h */ case   38:  		/* li R10, 2 */
		/* 820BB014h case   38:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820BB014h case   38:*/		return 0x820BB018;
		  /* 820BB018h */ case   39:  		/* addi R9, R1, 124 */
		/* 820BB018h case   39:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820BB018h case   39:*/		return 0x820BB01C;
		  /* 820BB01Ch */ case   40:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BB01Ch case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BB01Ch case   40:*/		return 0x820BB020;
		  /* 820BB020h */ case   41:  		/* mtspr CTR, R10 */
		/* 820BB020h case   41:*/		regs.CTR = regs.R10;
		/* 820BB020h case   41:*/		return 0x820BB024;
		  /* 820BB024h */ case   42:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BB024h case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BB024h case   42:*/		return 0x820BB028;
		  /* 820BB028h */ case   43:  		/* add R11, R11, R8 */
		/* 820BB028h case   43:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820BB028h case   43:*/		return 0x820BB02C;
		  /* 820BB02Ch */ case   44:  		/* bc 16, CR0_LT, -8 */
		/* 820BB02Ch case   44:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB024;  }
		/* 820BB02Ch case   44:*/		return 0x820BB030;
		  /* 820BB030h */ case   45:  		/* lwz R27, <#[R1 + 128]> */
		/* 820BB030h case   45:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB030h case   45:*/		return 0x820BB034;
		  /* 820BB034h */ case   46:  		/* cmplwi CR6, R30, 0 */
		/* 820BB034h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB034h case   46:*/		return 0x820BB038;
		  /* 820BB038h */ case   47:  		/* bc 12, CR6_EQ, 28 */
		/* 820BB038h case   47:*/		if ( regs.CR[6].eq ) { return 0x820BB054;  }
		/* 820BB038h case   47:*/		return 0x820BB03C;
		  /* 820BB03Ch */ case   48:  		/* addi R11, R27, -4 */
		/* 820BB03Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BB03Ch case   48:*/		return 0x820BB040;
		  /* 820BB040h */ case   49:  		/* cmplwi CR0, R30, 0 */
		/* 820BB040h case   49:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB040h case   49:*/		return 0x820BB044;
		  /* 820BB044h */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB044h case   50:*/		if ( regs.CR[0].eq ) { return 0x820BB054;  }
		/* 820BB044h case   50:*/		return 0x820BB048;
		  /* 820BB048h */ case   51:  		/* mtspr CTR, R30 */
		/* 820BB048h case   51:*/		regs.CTR = regs.R30;
		/* 820BB048h case   51:*/		return 0x820BB04C;
		  /* 820BB04Ch */ case   52:  		/* stwu R31, <#[R11 + 4]> */
		/* 820BB04Ch case   52:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB04Ch case   52:*/		return 0x820BB050;
		  /* 820BB050h */ case   53:  		/* bc 16, CR0_LT, -4 */
		/* 820BB050h case   53:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB04C;  }
		/* 820BB050h case   53:*/		return 0x820BB054;
	}
	return 0x820BB054;
} // Block from 820BAF7Ch-820BB054h (54 instructions)

//////////////////////////////////////////////////////
// Block at 820BB054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB054);
		  /* 820BB054h */ case    0:  		/* lwz R28, <#[R1 + 132]> */
		/* 820BB054h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 820BB054h case    0:*/		return 0x820BB058;
		  /* 820BB058h */ case    1:  		/* li R29, -1 */
		/* 820BB058h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BB058h case    1:*/		return 0x820BB05C;
		  /* 820BB05Ch */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820BB05Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB05Ch case    2:*/		return 0x820BB060;
		  /* 820BB060h */ case    3:  		/* bc 12, CR6_EQ, -228 */
		/* 820BB060h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BAF7C;  }
		/* 820BB060h case    3:*/		return 0x820BB064;
		  /* 820BB064h */ case    4:  		/* addi R11, R28, -4 */
		/* 820BB064h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BB064h case    4:*/		return 0x820BB068;
		  /* 820BB068h */ case    5:  		/* mr R10, R29 */
		/* 820BB068h case    5:*/		regs.R10 = regs.R29;
		/* 820BB068h case    5:*/		return 0x820BB06C;
		  /* 820BB06Ch */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820BB06Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB06Ch case    6:*/		return 0x820BB070;
		  /* 820BB070h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB070h case    7:*/		if ( regs.CR[0].eq ) { return 0x820BB080;  }
		/* 820BB070h case    7:*/		return 0x820BB074;
		  /* 820BB074h */ case    8:  		/* mtspr CTR, R30 */
		/* 820BB074h case    8:*/		regs.CTR = regs.R30;
		/* 820BB074h case    8:*/		return 0x820BB078;
		  /* 820BB078h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB078h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB078h case    9:*/		return 0x820BB07C;
		  /* 820BB07Ch */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820BB07Ch case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB078;  }
		/* 820BB07Ch case   10:*/		return 0x820BB080;
	}
	return 0x820BB080;
} // Block from 820BB054h-820BB080h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BB080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB080);
		  /* 820BB080h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BB080h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB080h case    0:*/		return 0x820BB084;
		  /* 820BB084h */ case    1:  		/* bc 12, CR6_EQ, -264 */
		/* 820BB084h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BAF7C;  }
		/* 820BB084h case    1:*/		return 0x820BB088;
		  /* 820BB088h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BB088h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BB088h case    2:*/		return 0x820BB08C;
		  /* 820BB08Ch */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BB08Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB08Ch case    3:*/		return 0x820BB090;
		  /* 820BB090h */ case    4:  		/* bc 12, CR0_EQ, -276 */
		/* 820BB090h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BAF7C;  }
		/* 820BB090h case    4:*/		return 0x820BB094;
		  /* 820BB094h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BB094h case    5:*/		regs.CTR = regs.R30;
		/* 820BB094h case    5:*/		return 0x820BB098;
		  /* 820BB098h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BB098h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB098h case    6:*/		return 0x820BB09C;
		  /* 820BB09Ch */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BB09Ch case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB098;  }
		/* 820BB09Ch case    7:*/		return 0x820BB0A0;
		  /* 820BB0A0h */ case    8:  		/* b -292 */
		/* 820BB0A0h case    8:*/		return 0x820BAF7C;
		/* 820BB0A0h case    8:*/		return 0x820BB0A4;
		  /* 820BB0A4h */ case    9:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB0A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB0A4h case    9:*/		return 0x820BB0A8;
		  /* 820BB0A8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820BB0A8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB0A8h case   10:*/		return 0x820BB0AC;
		  /* 820BB0ACh */ case   11:  		/* bc 12, CR6_EQ, 13092 */
		/* 820BB0ACh case   11:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB0ACh case   11:*/		return 0x820BB0B0;
		  /* 820BB0B0h */ case   12:  		/* cmplwi CR6, R15, 0 */
		/* 820BB0B0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB0B0h case   12:*/		return 0x820BB0B4;
		  /* 820BB0B4h */ case   13:  		/* bc 12, CR6_EQ, -9960 */
		/* 820BB0B4h case   13:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB0B4h case   13:*/		return 0x820BB0B8;
		  /* 820BB0B8h */ case   14:  		/* cmplwi CR6, R30, 0 */
		/* 820BB0B8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB0B8h case   14:*/		return 0x820BB0BC;
		  /* 820BB0BCh */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB0BCh case   15:*/		if ( regs.CR[6].eq ) { return 0x820BB0DC;  }
		/* 820BB0BCh case   15:*/		return 0x820BB0C0;
		  /* 820BB0C0h */ case   16:  		/* addi R11, R15, -4 */
		/* 820BB0C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BB0C0h case   16:*/		return 0x820BB0C4;
		  /* 820BB0C4h */ case   17:  		/* li R10, -1 */
		/* 820BB0C4h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BB0C4h case   17:*/		return 0x820BB0C8;
		  /* 820BB0C8h */ case   18:  		/* cmplwi CR0, R30, 0 */
		/* 820BB0C8h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB0C8h case   18:*/		return 0x820BB0CC;
		  /* 820BB0CCh */ case   19:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB0CCh case   19:*/		if ( regs.CR[0].eq ) { return 0x820BB0DC;  }
		/* 820BB0CCh case   19:*/		return 0x820BB0D0;
		  /* 820BB0D0h */ case   20:  		/* mtspr CTR, R30 */
		/* 820BB0D0h case   20:*/		regs.CTR = regs.R30;
		/* 820BB0D0h case   20:*/		return 0x820BB0D4;
		  /* 820BB0D4h */ case   21:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB0D4h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB0D4h case   21:*/		return 0x820BB0D8;
		  /* 820BB0D8h */ case   22:  		/* bc 16, CR0_LT, -4 */
		/* 820BB0D8h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB0D4;  }
		/* 820BB0D8h case   22:*/		return 0x820BB0DC;
	}
	return 0x820BB0DC;
} // Block from 820BB080h-820BB0DCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 820BB0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB0DC);
		  /* 820BB0DCh */ case    0:  		/* li R11, 131 */
		/* 820BB0DCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x83);
		/* 820BB0DCh case    0:*/		return 0x820BB0E0;
		  /* 820BB0E0h */ case    1:  		/* b -10228 */
		/* 820BB0E0h case    1:*/		return 0x820B88EC;
		/* 820BB0E0h case    1:*/		return 0x820BB0E4;
		  /* 820BB0E4h */ case    2:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB0E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB0E4h case    2:*/		return 0x820BB0E8;
		  /* 820BB0E8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820BB0E8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB0E8h case    3:*/		return 0x820BB0EC;
		  /* 820BB0ECh */ case    4:  		/* bc 12, CR6_EQ, 13028 */
		/* 820BB0ECh case    4:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB0ECh case    4:*/		return 0x820BB0F0;
		  /* 820BB0F0h */ case    5:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BB0F0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BB0F0h case    5:*/		return 0x820BB0F4;
		  /* 820BB0F4h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BB0F4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB0F4h case    6:*/		return 0x820BB0F8;
		  /* 820BB0F8h */ case    7:  		/* bc 12, CR6_EQ, 13016 */
		/* 820BB0F8h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB0F8h case    7:*/		return 0x820BB0FC;
		  /* 820BB0FCh */ case    8:  		/* cmplwi CR6, R15, 0 */
		/* 820BB0FCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB0FCh case    8:*/		return 0x820BB100;
		  /* 820BB100h */ case    9:  		/* bc 12, CR6_EQ, -10036 */
		/* 820BB100h case    9:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB100h case    9:*/		return 0x820BB104;
		  /* 820BB104h */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 820BB104h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB104h case   10:*/		return 0x820BB108;
		  /* 820BB108h */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB108h case   11:*/		if ( regs.CR[6].eq ) { return 0x820BB128;  }
		/* 820BB108h case   11:*/		return 0x820BB10C;
		  /* 820BB10Ch */ case   12:  		/* addi R11, R15, -4 */
		/* 820BB10Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BB10Ch case   12:*/		return 0x820BB110;
		  /* 820BB110h */ case   13:  		/* li R10, -1 */
		/* 820BB110h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BB110h case   13:*/		return 0x820BB114;
		  /* 820BB114h */ case   14:  		/* cmplwi CR0, R30, 0 */
		/* 820BB114h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB114h case   14:*/		return 0x820BB118;
		  /* 820BB118h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB118h case   15:*/		if ( regs.CR[0].eq ) { return 0x820BB128;  }
		/* 820BB118h case   15:*/		return 0x820BB11C;
		  /* 820BB11Ch */ case   16:  		/* mtspr CTR, R30 */
		/* 820BB11Ch case   16:*/		regs.CTR = regs.R30;
		/* 820BB11Ch case   16:*/		return 0x820BB120;
		  /* 820BB120h */ case   17:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB120h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB120h case   17:*/		return 0x820BB124;
		  /* 820BB124h */ case   18:  		/* bc 16, CR0_LT, -4 */
		/* 820BB124h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB120;  }
		/* 820BB124h case   18:*/		return 0x820BB128;
	}
	return 0x820BB128;
} // Block from 820BB0DCh-820BB128h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820BB128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB128);
		  /* 820BB128h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BB128h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BB128h case    0:*/		return 0x820BB12C;
		  /* 820BB12Ch */ case    1:  		/* li R11, 513 */
		/* 820BB12Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x201);
		/* 820BB12Ch case    1:*/		return 0x820BB130;
		  /* 820BB130h */ case    2:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BB130h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BB130h case    2:*/		return 0x820BB134;
		  /* 820BB134h */ case    3:  		/* b -10148 */
		/* 820BB134h case    3:*/		return 0x820B8990;
		/* 820BB134h case    3:*/		return 0x820BB138;
		  /* 820BB138h */ case    4:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB138h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB138h case    4:*/		return 0x820BB13C;
		  /* 820BB13Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820BB13Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB13Ch case    5:*/		return 0x820BB140;
		  /* 820BB140h */ case    6:  		/* bc 12, CR6_EQ, 12944 */
		/* 820BB140h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB140h case    6:*/		return 0x820BB144;
		  /* 820BB144h */ case    7:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BB144h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BB144h case    7:*/		return 0x820BB148;
		  /* 820BB148h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BB148h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB148h case    8:*/		return 0x820BB14C;
		  /* 820BB14Ch */ case    9:  		/* bc 12, CR6_EQ, 12932 */
		/* 820BB14Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB14Ch case    9:*/		return 0x820BB150;
		  /* 820BB150h */ case   10:  		/* cmplwi CR6, R15, 0 */
		/* 820BB150h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB150h case   10:*/		return 0x820BB154;
		  /* 820BB154h */ case   11:  		/* bc 12, CR6_EQ, -10120 */
		/* 820BB154h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB154h case   11:*/		return 0x820BB158;
		  /* 820BB158h */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 820BB158h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB158h case   12:*/		return 0x820BB15C;
		  /* 820BB15Ch */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB15Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x820BB17C;  }
		/* 820BB15Ch case   13:*/		return 0x820BB160;
		  /* 820BB160h */ case   14:  		/* addi R11, R15, -4 */
		/* 820BB160h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BB160h case   14:*/		return 0x820BB164;
		  /* 820BB164h */ case   15:  		/* li R10, -1 */
		/* 820BB164h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BB164h case   15:*/		return 0x820BB168;
		  /* 820BB168h */ case   16:  		/* cmplwi CR0, R30, 0 */
		/* 820BB168h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB168h case   16:*/		return 0x820BB16C;
		  /* 820BB16Ch */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB16Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x820BB17C;  }
		/* 820BB16Ch case   17:*/		return 0x820BB170;
		  /* 820BB170h */ case   18:  		/* mtspr CTR, R30 */
		/* 820BB170h case   18:*/		regs.CTR = regs.R30;
		/* 820BB170h case   18:*/		return 0x820BB174;
		  /* 820BB174h */ case   19:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB174h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB174h case   19:*/		return 0x820BB178;
		  /* 820BB178h */ case   20:  		/* bc 16, CR0_LT, -4 */
		/* 820BB178h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB174;  }
		/* 820BB178h case   20:*/		return 0x820BB17C;
	}
	return 0x820BB17C;
} // Block from 820BB128h-820BB17Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 820BB17Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB17C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB17C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB17C);
		  /* 820BB17Ch */ case    0:  		/* mr R5, R30 */
		/* 820BB17Ch case    0:*/		regs.R5 = regs.R30;
		/* 820BB17Ch case    0:*/		return 0x820BB180;
		  /* 820BB180h */ case    1:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BB180h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BB180h case    1:*/		return 0x820BB184;
		  /* 820BB184h */ case    2:  		/* li R11, 1 */
		/* 820BB184h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820BB184h case    2:*/		return 0x820BB188;
		  /* 820BB188h */ case    3:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BB188h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BB188h case    3:*/		return 0x820BB18C;
		  /* 820BB18Ch */ case    4:  		/* rlwimi R5, R11, 29, 0, 11 */
		/* 820BB18Ch case    4:*/		cpu::op::rlwimi<0,29,0,11>(regs,&regs.R5,regs.R11);
		/* 820BB18Ch case    4:*/		return 0x820BB190;
		  /* 820BB190h */ case    5:  		/* b 9628 */
		/* 820BB190h case    5:*/		return 0x820BD72C;
		/* 820BB190h case    5:*/		return 0x820BB194;
		  /* 820BB194h */ case    6:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB194h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB194h case    6:*/		return 0x820BB198;
		  /* 820BB198h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820BB198h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB198h case    7:*/		return 0x820BB19C;
		  /* 820BB19Ch */ case    8:  		/* bc 12, CR6_EQ, 12852 */
		/* 820BB19Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB19Ch case    8:*/		return 0x820BB1A0;
		  /* 820BB1A0h */ case    9:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820BB1A0h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820BB1A0h case    9:*/		return 0x820BB1A4;
		  /* 820BB1A4h */ case   10:  		/* lis R4, 9345 */
		/* 820BB1A4h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820BB1A4h case   10:*/		return 0x820BB1A8;
		  /* 820BB1A8h */ case   11:  		/* mr R3, R31 */
		/* 820BB1A8h case   11:*/		regs.R3 = regs.R31;
		/* 820BB1A8h case   11:*/		return 0x820BB1AC;
		  /* 820BB1ACh */ case   12:  		/* bl -208812 */
		/* 820BB1ACh case   12:*/		regs.LR = 0x820BB1B0; return 0x82088200;
		/* 820BB1ACh case   12:*/		return 0x820BB1B0;
		  /* 820BB1B0h */ case   13:  		/* or. R15, R3, R3 */
		/* 820BB1B0h case   13:*/		cpu::op::or<1>(regs,&regs.R15,regs.R3,regs.R3);
		/* 820BB1B0h case   13:*/		return 0x820BB1B4;
		  /* 820BB1B4h */ case   14:  		/* stw R15, <#[R1 + 148]> */
		/* 820BB1B4h case   14:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000094) );
		/* 820BB1B4h case   14:*/		return 0x820BB1B8;
		  /* 820BB1B8h */ case   15:  		/* bc 12, CR0_EQ, 8808 */
		/* 820BB1B8h case   15:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BB1B8h case   15:*/		return 0x820BB1BC;
		  /* 820BB1BCh */ case   16:  		/* mulli R4, R30, 10 */
		/* 820BB1BCh case   16:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0xA);
		/* 820BB1BCh case   16:*/		return 0x820BB1C0;
		  /* 820BB1C0h */ case   17:  		/* mr R3, R14 */
		/* 820BB1C0h case   17:*/		regs.R3 = regs.R14;
		/* 820BB1C0h case   17:*/		return 0x820BB1C4;
		  /* 820BB1C4h */ case   18:  		/* bl -43732 */
		/* 820BB1C4h case   18:*/		regs.LR = 0x820BB1C8; return 0x820B06F0;
		/* 820BB1C4h case   18:*/		return 0x820BB1C8;
		  /* 820BB1C8h */ case   19:  		/* or. R11, R3, R3 */
		/* 820BB1C8h case   19:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BB1C8h case   19:*/		return 0x820BB1CC;
		  /* 820BB1CCh */ case   20:  		/* bc 12, CR0_EQ, 8788 */
		/* 820BB1CCh case   20:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BB1CCh case   20:*/		return 0x820BB1D0;
		  /* 820BB1D0h */ case   21:  		/* li R9, 10 */
		/* 820BB1D0h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0xA);
		/* 820BB1D0h case   21:*/		return 0x820BB1D4;
		  /* 820BB1D4h */ case   22:  		/* addi R10, R1, 156 */
		/* 820BB1D4h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820BB1D4h case   22:*/		return 0x820BB1D8;
		  /* 820BB1D8h */ case   23:  		/* mtspr CTR, R9 */
		/* 820BB1D8h case   23:*/		regs.CTR = regs.R9;
		/* 820BB1D8h case   23:*/		return 0x820BB1DC;
		  /* 820BB1DCh */ case   24:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BB1DCh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BB1DCh case   24:*/		return 0x820BB1E0;
		  /* 820BB1E0h */ case   25:  		/* add R11, R31, R11 */
		/* 820BB1E0h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 820BB1E0h case   25:*/		return 0x820BB1E4;
		  /* 820BB1E4h */ case   26:  		/* bc 16, CR0_LT, -8 */
		/* 820BB1E4h case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB1DC;  }
		/* 820BB1E4h case   26:*/		return 0x820BB1E8;
		  /* 820BB1E8h */ case   27:  		/* lwz R18, <#[R1 + 160]> */
		/* 820BB1E8h case   27:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BB1E8h case   27:*/		return 0x820BB1EC;
		  /* 820BB1ECh */ case   28:  		/* li R29, -1 */
		/* 820BB1ECh case   28:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BB1ECh case   28:*/		return 0x820BB1F0;
		  /* 820BB1F0h */ case   29:  		/* cmplwi CR6, R30, 0 */
		/* 820BB1F0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB1F0h case   29:*/		return 0x820BB1F4;
		  /* 820BB1F4h */ case   30:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB1F4h case   30:*/		if ( regs.CR[6].eq ) { return 0x820BB214;  }
		/* 820BB1F4h case   30:*/		return 0x820BB1F8;
		  /* 820BB1F8h */ case   31:  		/* addi R11, R18, -4 */
		/* 820BB1F8h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0xFFFFFFFC);
		/* 820BB1F8h case   31:*/		return 0x820BB1FC;
		  /* 820BB1FCh */ case   32:  		/* mr R10, R29 */
		/* 820BB1FCh case   32:*/		regs.R10 = regs.R29;
		/* 820BB1FCh case   32:*/		return 0x820BB200;
		  /* 820BB200h */ case   33:  		/* cmplwi CR0, R30, 0 */
		/* 820BB200h case   33:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB200h case   33:*/		return 0x820BB204;
		  /* 820BB204h */ case   34:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB204h case   34:*/		if ( regs.CR[0].eq ) { return 0x820BB214;  }
		/* 820BB204h case   34:*/		return 0x820BB208;
		  /* 820BB208h */ case   35:  		/* mtspr CTR, R30 */
		/* 820BB208h case   35:*/		regs.CTR = regs.R30;
		/* 820BB208h case   35:*/		return 0x820BB20C;
		  /* 820BB20Ch */ case   36:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB20Ch case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB20Ch case   36:*/		return 0x820BB210;
		  /* 820BB210h */ case   37:  		/* bc 16, CR0_LT, -4 */
		/* 820BB210h case   37:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB20C;  }
		/* 820BB210h case   37:*/		return 0x820BB214;
	}
	return 0x820BB214;
} // Block from 820BB17Ch-820BB214h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820BB214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB214);
		  /* 820BB214h */ case    0:  		/* lwz R17, <#[R1 + 164]> */
		/* 820BB214h case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BB214h case    0:*/		return 0x820BB218;
		  /* 820BB218h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB218h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB218h case    1:*/		return 0x820BB21C;
		  /* 820BB21Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB21Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB23C;  }
		/* 820BB21Ch case    2:*/		return 0x820BB220;
		  /* 820BB220h */ case    3:  		/* addi R11, R17, -4 */
		/* 820BB220h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0xFFFFFFFC);
		/* 820BB220h case    3:*/		return 0x820BB224;
		  /* 820BB224h */ case    4:  		/* mr R10, R29 */
		/* 820BB224h case    4:*/		regs.R10 = regs.R29;
		/* 820BB224h case    4:*/		return 0x820BB228;
		  /* 820BB228h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB228h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB228h case    5:*/		return 0x820BB22C;
		  /* 820BB22Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB22Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB23C;  }
		/* 820BB22Ch case    6:*/		return 0x820BB230;
		  /* 820BB230h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB230h case    7:*/		regs.CTR = regs.R30;
		/* 820BB230h case    7:*/		return 0x820BB234;
		  /* 820BB234h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB234h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB234h case    8:*/		return 0x820BB238;
		  /* 820BB238h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB238h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB234;  }
		/* 820BB238h case    9:*/		return 0x820BB23C;
	}
	return 0x820BB23C;
} // Block from 820BB214h-820BB23Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB23C);
		  /* 820BB23Ch */ case    0:  		/* lwz R27, <#[R1 + 168]> */
		/* 820BB23Ch case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BB23Ch case    0:*/		return 0x820BB240;
		  /* 820BB240h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB240h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB240h case    1:*/		return 0x820BB244;
		  /* 820BB244h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB244h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB264;  }
		/* 820BB244h case    2:*/		return 0x820BB248;
		  /* 820BB248h */ case    3:  		/* addi R11, R27, -4 */
		/* 820BB248h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BB248h case    3:*/		return 0x820BB24C;
		  /* 820BB24Ch */ case    4:  		/* mr R10, R29 */
		/* 820BB24Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BB24Ch case    4:*/		return 0x820BB250;
		  /* 820BB250h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB250h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB250h case    5:*/		return 0x820BB254;
		  /* 820BB254h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB254h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB264;  }
		/* 820BB254h case    6:*/		return 0x820BB258;
		  /* 820BB258h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB258h case    7:*/		regs.CTR = regs.R30;
		/* 820BB258h case    7:*/		return 0x820BB25C;
		  /* 820BB25Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB25Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB25Ch case    8:*/		return 0x820BB260;
		  /* 820BB260h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB260h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB25C;  }
		/* 820BB260h case    9:*/		return 0x820BB264;
	}
	return 0x820BB264;
} // Block from 820BB23Ch-820BB264h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB264);
		  /* 820BB264h */ case    0:  		/* lwz R16, <#[R1 + 172]> */
		/* 820BB264h case    0:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BB264h case    0:*/		return 0x820BB268;
		  /* 820BB268h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB268h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB268h case    1:*/		return 0x820BB26C;
		  /* 820BB26Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB26Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB28C;  }
		/* 820BB26Ch case    2:*/		return 0x820BB270;
		  /* 820BB270h */ case    3:  		/* addi R11, R16, -4 */
		/* 820BB270h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0xFFFFFFFC);
		/* 820BB270h case    3:*/		return 0x820BB274;
		  /* 820BB274h */ case    4:  		/* mr R10, R29 */
		/* 820BB274h case    4:*/		regs.R10 = regs.R29;
		/* 820BB274h case    4:*/		return 0x820BB278;
		  /* 820BB278h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB278h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB278h case    5:*/		return 0x820BB27C;
		  /* 820BB27Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB27Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB28C;  }
		/* 820BB27Ch case    6:*/		return 0x820BB280;
		  /* 820BB280h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB280h case    7:*/		regs.CTR = regs.R30;
		/* 820BB280h case    7:*/		return 0x820BB284;
		  /* 820BB284h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB284h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB284h case    8:*/		return 0x820BB288;
		  /* 820BB288h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB288h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB284;  }
		/* 820BB288h case    9:*/		return 0x820BB28C;
	}
	return 0x820BB28C;
} // Block from 820BB264h-820BB28Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB28Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB28C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB28C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB28C);
		  /* 820BB28Ch */ case    0:  		/* lwz R20, <#[R1 + 176]> */
		/* 820BB28Ch case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BB28Ch case    0:*/		return 0x820BB290;
		  /* 820BB290h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB290h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB290h case    1:*/		return 0x820BB294;
		  /* 820BB294h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB294h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB2B4;  }
		/* 820BB294h case    2:*/		return 0x820BB298;
		  /* 820BB298h */ case    3:  		/* addi R11, R20, -4 */
		/* 820BB298h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0xFFFFFFFC);
		/* 820BB298h case    3:*/		return 0x820BB29C;
		  /* 820BB29Ch */ case    4:  		/* mr R10, R29 */
		/* 820BB29Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BB29Ch case    4:*/		return 0x820BB2A0;
		  /* 820BB2A0h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB2A0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB2A0h case    5:*/		return 0x820BB2A4;
		  /* 820BB2A4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB2A4h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB2B4;  }
		/* 820BB2A4h case    6:*/		return 0x820BB2A8;
		  /* 820BB2A8h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB2A8h case    7:*/		regs.CTR = regs.R30;
		/* 820BB2A8h case    7:*/		return 0x820BB2AC;
		  /* 820BB2ACh */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB2ACh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB2ACh case    8:*/		return 0x820BB2B0;
		  /* 820BB2B0h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB2B0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB2AC;  }
		/* 820BB2B0h case    9:*/		return 0x820BB2B4;
	}
	return 0x820BB2B4;
} // Block from 820BB28Ch-820BB2B4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB2B4);
		  /* 820BB2B4h */ case    0:  		/* lwz R19, <#[R1 + 180]> */
		/* 820BB2B4h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BB2B4h case    0:*/		return 0x820BB2B8;
		  /* 820BB2B8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB2B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB2B8h case    1:*/		return 0x820BB2BC;
		  /* 820BB2BCh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB2BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB2DC;  }
		/* 820BB2BCh case    2:*/		return 0x820BB2C0;
		  /* 820BB2C0h */ case    3:  		/* addi R11, R19, -4 */
		/* 820BB2C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R19,0xFFFFFFFC);
		/* 820BB2C0h case    3:*/		return 0x820BB2C4;
		  /* 820BB2C4h */ case    4:  		/* mr R10, R29 */
		/* 820BB2C4h case    4:*/		regs.R10 = regs.R29;
		/* 820BB2C4h case    4:*/		return 0x820BB2C8;
		  /* 820BB2C8h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB2C8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB2C8h case    5:*/		return 0x820BB2CC;
		  /* 820BB2CCh */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB2CCh case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB2DC;  }
		/* 820BB2CCh case    6:*/		return 0x820BB2D0;
		  /* 820BB2D0h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB2D0h case    7:*/		regs.CTR = regs.R30;
		/* 820BB2D0h case    7:*/		return 0x820BB2D4;
		  /* 820BB2D4h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB2D4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB2D4h case    8:*/		return 0x820BB2D8;
		  /* 820BB2D8h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB2D8h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB2D4;  }
		/* 820BB2D8h case    9:*/		return 0x820BB2DC;
	}
	return 0x820BB2DC;
} // Block from 820BB2B4h-820BB2DCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB2DC);
		  /* 820BB2DCh */ case    0:  		/* lwz R21, <#[R1 + 184]> */
		/* 820BB2DCh case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000B8) );
		/* 820BB2DCh case    0:*/		return 0x820BB2E0;
		  /* 820BB2E0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB2E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB2E0h case    1:*/		return 0x820BB2E4;
		  /* 820BB2E4h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB2E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB304;  }
		/* 820BB2E4h case    2:*/		return 0x820BB2E8;
		  /* 820BB2E8h */ case    3:  		/* addi R11, R21, -4 */
		/* 820BB2E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0xFFFFFFFC);
		/* 820BB2E8h case    3:*/		return 0x820BB2EC;
		  /* 820BB2ECh */ case    4:  		/* mr R10, R29 */
		/* 820BB2ECh case    4:*/		regs.R10 = regs.R29;
		/* 820BB2ECh case    4:*/		return 0x820BB2F0;
		  /* 820BB2F0h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB2F0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB2F0h case    5:*/		return 0x820BB2F4;
		  /* 820BB2F4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB2F4h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB304;  }
		/* 820BB2F4h case    6:*/		return 0x820BB2F8;
		  /* 820BB2F8h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB2F8h case    7:*/		regs.CTR = regs.R30;
		/* 820BB2F8h case    7:*/		return 0x820BB2FC;
		  /* 820BB2FCh */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB2FCh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB2FCh case    8:*/		return 0x820BB300;
		  /* 820BB300h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB300h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB2FC;  }
		/* 820BB300h case    9:*/		return 0x820BB304;
	}
	return 0x820BB304;
} // Block from 820BB2DCh-820BB304h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB304);
		  /* 820BB304h */ case    0:  		/* lwz R22, <#[R1 + 188]> */
		/* 820BB304h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000BC) );
		/* 820BB304h case    0:*/		return 0x820BB308;
		  /* 820BB308h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB308h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB308h case    1:*/		return 0x820BB30C;
		  /* 820BB30Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB30Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB32C;  }
		/* 820BB30Ch case    2:*/		return 0x820BB310;
		  /* 820BB310h */ case    3:  		/* addi R11, R22, -4 */
		/* 820BB310h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFFC);
		/* 820BB310h case    3:*/		return 0x820BB314;
		  /* 820BB314h */ case    4:  		/* mr R10, R29 */
		/* 820BB314h case    4:*/		regs.R10 = regs.R29;
		/* 820BB314h case    4:*/		return 0x820BB318;
		  /* 820BB318h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB318h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB318h case    5:*/		return 0x820BB31C;
		  /* 820BB31Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB31Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB32C;  }
		/* 820BB31Ch case    6:*/		return 0x820BB320;
		  /* 820BB320h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB320h case    7:*/		regs.CTR = regs.R30;
		/* 820BB320h case    7:*/		return 0x820BB324;
		  /* 820BB324h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB324h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB324h case    8:*/		return 0x820BB328;
		  /* 820BB328h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB328h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB324;  }
		/* 820BB328h case    9:*/		return 0x820BB32C;
	}
	return 0x820BB32C;
} // Block from 820BB304h-820BB32Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB32Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB32C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB32C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB32C);
		  /* 820BB32Ch */ case    0:  		/* lwz R23, <#[R1 + 192]> */
		/* 820BB32Ch case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BB32Ch case    0:*/		return 0x820BB330;
		  /* 820BB330h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BB330h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB330h case    1:*/		return 0x820BB334;
		  /* 820BB334h */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 820BB334h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BB378;  }
		/* 820BB334h case    2:*/		return 0x820BB338;
		  /* 820BB338h */ case    3:  		/* addi R11, R23, -4 */
		/* 820BB338h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820BB338h case    3:*/		return 0x820BB33C;
		  /* 820BB33Ch */ case    4:  		/* mr R10, R29 */
		/* 820BB33Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BB33Ch case    4:*/		return 0x820BB340;
		  /* 820BB340h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BB340h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB340h case    5:*/		return 0x820BB344;
		  /* 820BB344h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB344h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BB354;  }
		/* 820BB344h case    6:*/		return 0x820BB348;
		  /* 820BB348h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BB348h case    7:*/		regs.CTR = regs.R30;
		/* 820BB348h case    7:*/		return 0x820BB34C;
		  /* 820BB34Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB34Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB34Ch case    8:*/		return 0x820BB350;
		  /* 820BB350h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BB350h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB34C;  }
		/* 820BB350h case    9:*/		return 0x820BB354;
	}
	return 0x820BB354;
} // Block from 820BB32Ch-820BB354h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BB354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB354);
		  /* 820BB354h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BB354h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB354h case    0:*/		return 0x820BB358;
		  /* 820BB358h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB358h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BB378;  }
		/* 820BB358h case    1:*/		return 0x820BB35C;
		  /* 820BB35Ch */ case    2:  		/* addi R11, R15, -4 */
		/* 820BB35Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BB35Ch case    2:*/		return 0x820BB360;
		  /* 820BB360h */ case    3:  		/* mr R10, R29 */
		/* 820BB360h case    3:*/		regs.R10 = regs.R29;
		/* 820BB360h case    3:*/		return 0x820BB364;
		  /* 820BB364h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820BB364h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB364h case    4:*/		return 0x820BB368;
		  /* 820BB368h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB368h case    5:*/		if ( regs.CR[0].eq ) { return 0x820BB378;  }
		/* 820BB368h case    5:*/		return 0x820BB36C;
		  /* 820BB36Ch */ case    6:  		/* mtspr CTR, R30 */
		/* 820BB36Ch case    6:*/		regs.CTR = regs.R30;
		/* 820BB36Ch case    6:*/		return 0x820BB370;
		  /* 820BB370h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB370h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB370h case    7:*/		return 0x820BB374;
		  /* 820BB374h */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820BB374h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB370;  }
		/* 820BB374h case    8:*/		return 0x820BB378;
	}
	return 0x820BB378;
} // Block from 820BB354h-820BB378h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BB378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB378);
		  /* 820BB378h */ case    0:  		/* lwz R24, <#[R1 + 144]> */
		/* 820BB378h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000090) );
		/* 820BB378h case    0:*/		return 0x820BB37C;
		  /* 820BB37Ch */ case    1:  		/* rlwinm R28, R30, 0, 12, 31 */
		/* 820BB37Ch case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R30);
		/* 820BB37Ch case    1:*/		return 0x820BB380;
		  /* 820BB380h */ case    2:  		/* lwz R25, <#[R1 + 1724]> */
		/* 820BB380h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000006BC) );
		/* 820BB380h case    2:*/		return 0x820BB384;
		  /* 820BB384h */ case    3:  		/* li R9, 0 */
		/* 820BB384h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BB384h case    3:*/		return 0x820BB388;
		  /* 820BB388h */ case    4:  		/* li R8, 0 */
		/* 820BB388h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BB388h case    4:*/		return 0x820BB38C;
		  /* 820BB38Ch */ case    5:  		/* mr R7, R24 */
		/* 820BB38Ch case    5:*/		regs.R7 = regs.R24;
		/* 820BB38Ch case    5:*/		return 0x820BB390;
		  /* 820BB390h */ case    6:  		/* mr R6, R18 */
		/* 820BB390h case    6:*/		regs.R6 = regs.R18;
		/* 820BB390h case    6:*/		return 0x820BB394;
		  /* 820BB394h */ case    7:  		/* oris R5, R28, 4128 */
		/* 820BB394h case    7:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x1020);
		/* 820BB394h case    7:*/		return 0x820BB398;
		  /* 820BB398h */ case    8:  		/* mr R4, R25 */
		/* 820BB398h case    8:*/		regs.R4 = regs.R25;
		/* 820BB398h case    8:*/		return 0x820BB39C;
		  /* 820BB39Ch */ case    9:  		/* mr R3, R14 */
		/* 820BB39Ch case    9:*/		regs.R3 = regs.R14;
		/* 820BB39Ch case    9:*/		return 0x820BB3A0;
		  /* 820BB3A0h */ case   10:  		/* bl -43160 */
		/* 820BB3A0h case   10:*/		regs.LR = 0x820BB3A4; return 0x820B0B08;
		/* 820BB3A0h case   10:*/		return 0x820BB3A4;
		  /* 820BB3A4h */ case   11:  		/* or. R31, R3, R3 */
		/* 820BB3A4h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB3A4h case   11:*/		return 0x820BB3A8;
		  /* 820BB3A8h */ case   12:  		/* bc 12, CR0_LT, 12336 */
		/* 820BB3A8h case   12:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB3A8h case   12:*/		return 0x820BB3AC;
		  /* 820BB3ACh */ case   13:  		/* li R9, 20 */
		/* 820BB3ACh case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820BB3ACh case   13:*/		return 0x820BB3B0;
		  /* 820BB3B0h */ case   14:  		/* li R8, 0 */
		/* 820BB3B0h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BB3B0h case   14:*/		return 0x820BB3B4;
		  /* 820BB3B4h */ case   15:  		/* mr R7, R18 */
		/* 820BB3B4h case   15:*/		regs.R7 = regs.R18;
		/* 820BB3B4h case   15:*/		return 0x820BB3B8;
		  /* 820BB3B8h */ case   16:  		/* mr R6, R17 */
		/* 820BB3B8h case   16:*/		regs.R6 = regs.R17;
		/* 820BB3B8h case   16:*/		return 0x820BB3BC;
		  /* 820BB3BCh */ case   17:  		/* oris R5, R28, 4160 */
		/* 820BB3BCh case   17:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x1040);
		/* 820BB3BCh case   17:*/		return 0x820BB3C0;
		  /* 820BB3C0h */ case   18:  		/* mr R4, R25 */
		/* 820BB3C0h case   18:*/		regs.R4 = regs.R25;
		/* 820BB3C0h case   18:*/		return 0x820BB3C4;
		  /* 820BB3C4h */ case   19:  		/* mr R3, R14 */
		/* 820BB3C4h case   19:*/		regs.R3 = regs.R14;
		/* 820BB3C4h case   19:*/		return 0x820BB3C8;
		  /* 820BB3C8h */ case   20:  		/* bl -43200 */
		/* 820BB3C8h case   20:*/		regs.LR = 0x820BB3CC; return 0x820B0B08;
		/* 820BB3C8h case   20:*/		return 0x820BB3CC;
		  /* 820BB3CCh */ case   21:  		/* or. R31, R3, R3 */
		/* 820BB3CCh case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB3CCh case   21:*/		return 0x820BB3D0;
		  /* 820BB3D0h */ case   22:  		/* bc 12, CR0_LT, 12296 */
		/* 820BB3D0h case   22:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB3D0h case   22:*/		return 0x820BB3D4;
		  /* 820BB3D4h */ case   23:  		/* oris R26, R28, 4112 */
		/* 820BB3D4h case   23:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R28,0x1010);
		/* 820BB3D4h case   23:*/		return 0x820BB3D8;
		  /* 820BB3D8h */ case   24:  		/* li R9, 24 */
		/* 820BB3D8h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x18);
		/* 820BB3D8h case   24:*/		return 0x820BB3DC;
		  /* 820BB3DCh */ case   25:  		/* li R8, 0 */
		/* 820BB3DCh case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BB3DCh case   25:*/		return 0x820BB3E0;
		  /* 820BB3E0h */ case   26:  		/* mr R7, R17 */
		/* 820BB3E0h case   26:*/		regs.R7 = regs.R17;
		/* 820BB3E0h case   26:*/		return 0x820BB3E4;
		  /* 820BB3E4h */ case   27:  		/* mr R6, R27 */
		/* 820BB3E4h case   27:*/		regs.R6 = regs.R27;
		/* 820BB3E4h case   27:*/		return 0x820BB3E8;
		  /* 820BB3E8h */ case   28:  		/* mr R5, R26 */
		/* 820BB3E8h case   28:*/		regs.R5 = regs.R26;
		/* 820BB3E8h case   28:*/		return 0x820BB3EC;
		  /* 820BB3ECh */ case   29:  		/* mr R4, R25 */
		/* 820BB3ECh case   29:*/		regs.R4 = regs.R25;
		/* 820BB3ECh case   29:*/		return 0x820BB3F0;
		  /* 820BB3F0h */ case   30:  		/* mr R3, R14 */
		/* 820BB3F0h case   30:*/		regs.R3 = regs.R14;
		/* 820BB3F0h case   30:*/		return 0x820BB3F4;
		  /* 820BB3F4h */ case   31:  		/* bl -43244 */
		/* 820BB3F4h case   31:*/		regs.LR = 0x820BB3F8; return 0x820B0B08;
		/* 820BB3F4h case   31:*/		return 0x820BB3F8;
		  /* 820BB3F8h */ case   32:  		/* or. R31, R3, R3 */
		/* 820BB3F8h case   32:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB3F8h case   32:*/		return 0x820BB3FC;
		  /* 820BB3FCh */ case   33:  		/* bc 12, CR0_LT, 12252 */
		/* 820BB3FCh case   33:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB3FCh case   33:*/		return 0x820BB400;
		  /* 820BB400h */ case   34:  		/* mr R8, R18 */
		/* 820BB400h case   34:*/		regs.R8 = regs.R18;
		/* 820BB400h case   34:*/		return 0x820BB404;
		  /* 820BB404h */ case   35:  		/* rlwinm R18, R25, 0, 0, 31 */
		/* 820BB404h case   35:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R18,regs.R25);
		/* 820BB404h case   35:*/		return 0x820BB408;
		  /* 820BB408h */ case   36:  		/* oris R25, R28, 8256 */
		/* 820BB408h case   36:*/		cpu::op::oris<0>(regs,&regs.R25,regs.R28,0x2040);
		/* 820BB408h case   36:*/		return 0x820BB40C;
		  /* 820BB40Ch */ case   37:  		/* li R9, 2 */
		/* 820BB40Ch case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BB40Ch case   37:*/		return 0x820BB410;
		  /* 820BB410h */ case   38:  		/* mr R7, R27 */
		/* 820BB410h case   38:*/		regs.R7 = regs.R27;
		/* 820BB410h case   38:*/		return 0x820BB414;
		  /* 820BB414h */ case   39:  		/* mr R6, R16 */
		/* 820BB414h case   39:*/		regs.R6 = regs.R16;
		/* 820BB414h case   39:*/		return 0x820BB418;
		  /* 820BB418h */ case   40:  		/* mr R5, R25 */
		/* 820BB418h case   40:*/		regs.R5 = regs.R25;
		/* 820BB418h case   40:*/		return 0x820BB41C;
		  /* 820BB41Ch */ case   41:  		/* mr R4, R18 */
		/* 820BB41Ch case   41:*/		regs.R4 = regs.R18;
		/* 820BB41Ch case   41:*/		return 0x820BB420;
		  /* 820BB420h */ case   42:  		/* mr R3, R14 */
		/* 820BB420h case   42:*/		regs.R3 = regs.R14;
		/* 820BB420h case   42:*/		return 0x820BB424;
		  /* 820BB424h */ case   43:  		/* bl -43292 */
		/* 820BB424h case   43:*/		regs.LR = 0x820BB428; return 0x820B0B08;
		/* 820BB424h case   43:*/		return 0x820BB428;
		  /* 820BB428h */ case   44:  		/* or. R31, R3, R3 */
		/* 820BB428h case   44:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB428h case   44:*/		return 0x820BB42C;
		  /* 820BB42Ch */ case   45:  		/* bc 12, CR0_LT, 12204 */
		/* 820BB42Ch case   45:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB42Ch case   45:*/		return 0x820BB430;
		  /* 820BB430h */ case   46:  		/* li R9, 0 */
		/* 820BB430h case   46:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BB430h case   46:*/		return 0x820BB434;
		  /* 820BB434h */ case   47:  		/* li R8, 0 */
		/* 820BB434h case   47:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BB434h case   47:*/		return 0x820BB438;
		  /* 820BB438h */ case   48:  		/* mr R7, R24 */
		/* 820BB438h case   48:*/		regs.R7 = regs.R24;
		/* 820BB438h case   48:*/		return 0x820BB43C;
		  /* 820BB43Ch */ case   49:  		/* mr R6, R20 */
		/* 820BB43Ch case   49:*/		regs.R6 = regs.R20;
		/* 820BB43Ch case   49:*/		return 0x820BB440;
		  /* 820BB440h */ case   50:  		/* mr R5, R26 */
		/* 820BB440h case   50:*/		regs.R5 = regs.R26;
		/* 820BB440h case   50:*/		return 0x820BB444;
		  /* 820BB444h */ case   51:  		/* mr R4, R18 */
		/* 820BB444h case   51:*/		regs.R4 = regs.R18;
		/* 820BB444h case   51:*/		return 0x820BB448;
		  /* 820BB448h */ case   52:  		/* mr R3, R14 */
		/* 820BB448h case   52:*/		regs.R3 = regs.R14;
		/* 820BB448h case   52:*/		return 0x820BB44C;
		  /* 820BB44Ch */ case   53:  		/* bl -43332 */
		/* 820BB44Ch case   53:*/		regs.LR = 0x820BB450; return 0x820B0B08;
		/* 820BB44Ch case   53:*/		return 0x820BB450;
		  /* 820BB450h */ case   54:  		/* or. R31, R3, R3 */
		/* 820BB450h case   54:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB450h case   54:*/		return 0x820BB454;
		  /* 820BB454h */ case   55:  		/* bc 12, CR0_LT, 12164 */
		/* 820BB454h case   55:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB454h case   55:*/		return 0x820BB458;
		  /* 820BB458h */ case   56:  		/* oris R27, R28, 8224 */
		/* 820BB458h case   56:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R28,0x2020);
		/* 820BB458h case   56:*/		return 0x820BB45C;
		  /* 820BB45Ch */ case   57:  		/* li R9, 23 */
		/* 820BB45Ch case   57:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BB45Ch case   57:*/		return 0x820BB460;
		  /* 820BB460h */ case   58:  		/* mr R8, R20 */
		/* 820BB460h case   58:*/		regs.R8 = regs.R20;
		/* 820BB460h case   58:*/		return 0x820BB464;
		  /* 820BB464h */ case   59:  		/* mr R7, R24 */
		/* 820BB464h case   59:*/		regs.R7 = regs.R24;
		/* 820BB464h case   59:*/		return 0x820BB468;
		  /* 820BB468h */ case   60:  		/* mr R6, R19 */
		/* 820BB468h case   60:*/		regs.R6 = regs.R19;
		/* 820BB468h case   60:*/		return 0x820BB46C;
		  /* 820BB46Ch */ case   61:  		/* mr R5, R27 */
		/* 820BB46Ch case   61:*/		regs.R5 = regs.R27;
		/* 820BB46Ch case   61:*/		return 0x820BB470;
		  /* 820BB470h */ case   62:  		/* mr R4, R18 */
		/* 820BB470h case   62:*/		regs.R4 = regs.R18;
		/* 820BB470h case   62:*/		return 0x820BB474;
		  /* 820BB474h */ case   63:  		/* mr R3, R14 */
		/* 820BB474h case   63:*/		regs.R3 = regs.R14;
		/* 820BB474h case   63:*/		return 0x820BB478;
		  /* 820BB478h */ case   64:  		/* bl -43376 */
		/* 820BB478h case   64:*/		regs.LR = 0x820BB47C; return 0x820B0B08;
		/* 820BB478h case   64:*/		return 0x820BB47C;
		  /* 820BB47Ch */ case   65:  		/* or. R31, R3, R3 */
		/* 820BB47Ch case   65:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB47Ch case   65:*/		return 0x820BB480;
		  /* 820BB480h */ case   66:  		/* bc 12, CR0_LT, 12120 */
		/* 820BB480h case   66:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB480h case   66:*/		return 0x820BB484;
		  /* 820BB484h */ case   67:  		/* li R9, 0 */
		/* 820BB484h case   67:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BB484h case   67:*/		return 0x820BB488;
		  /* 820BB488h */ case   68:  		/* li R8, 0 */
		/* 820BB488h case   68:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BB488h case   68:*/		return 0x820BB48C;
		  /* 820BB48Ch */ case   69:  		/* mr R7, R17 */
		/* 820BB48Ch case   69:*/		regs.R7 = regs.R17;
		/* 820BB48Ch case   69:*/		return 0x820BB490;
		  /* 820BB490h */ case   70:  		/* mr R6, R21 */
		/* 820BB490h case   70:*/		regs.R6 = regs.R21;
		/* 820BB490h case   70:*/		return 0x820BB494;
		  /* 820BB494h */ case   71:  		/* mr R5, R26 */
		/* 820BB494h case   71:*/		regs.R5 = regs.R26;
		/* 820BB494h case   71:*/		return 0x820BB498;
		  /* 820BB498h */ case   72:  		/* mr R4, R18 */
		/* 820BB498h case   72:*/		regs.R4 = regs.R18;
		/* 820BB498h case   72:*/		return 0x820BB49C;
		  /* 820BB49Ch */ case   73:  		/* mr R3, R14 */
		/* 820BB49Ch case   73:*/		regs.R3 = regs.R14;
		/* 820BB49Ch case   73:*/		return 0x820BB4A0;
		  /* 820BB4A0h */ case   74:  		/* bl -43416 */
		/* 820BB4A0h case   74:*/		regs.LR = 0x820BB4A4; return 0x820B0B08;
		/* 820BB4A0h case   74:*/		return 0x820BB4A4;
		  /* 820BB4A4h */ case   75:  		/* or. R31, R3, R3 */
		/* 820BB4A4h case   75:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB4A4h case   75:*/		return 0x820BB4A8;
		  /* 820BB4A8h */ case   76:  		/* bc 12, CR0_LT, 12080 */
		/* 820BB4A8h case   76:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB4A8h case   76:*/		return 0x820BB4AC;
		  /* 820BB4ACh */ case   77:  		/* li R9, 23 */
		/* 820BB4ACh case   77:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BB4ACh case   77:*/		return 0x820BB4B0;
		  /* 820BB4B0h */ case   78:  		/* mr R8, R17 */
		/* 820BB4B0h case   78:*/		regs.R8 = regs.R17;
		/* 820BB4B0h case   78:*/		return 0x820BB4B4;
		  /* 820BB4B4h */ case   79:  		/* mr R7, R21 */
		/* 820BB4B4h case   79:*/		regs.R7 = regs.R21;
		/* 820BB4B4h case   79:*/		return 0x820BB4B8;
		  /* 820BB4B8h */ case   80:  		/* mr R6, R22 */
		/* 820BB4B8h case   80:*/		regs.R6 = regs.R22;
		/* 820BB4B8h case   80:*/		return 0x820BB4BC;
		  /* 820BB4BCh */ case   81:  		/* mr R5, R27 */
		/* 820BB4BCh case   81:*/		regs.R5 = regs.R27;
		/* 820BB4BCh case   81:*/		return 0x820BB4C0;
		  /* 820BB4C0h */ case   82:  		/* mr R4, R18 */
		/* 820BB4C0h case   82:*/		regs.R4 = regs.R18;
		/* 820BB4C0h case   82:*/		return 0x820BB4C4;
		  /* 820BB4C4h */ case   83:  		/* mr R3, R14 */
		/* 820BB4C4h case   83:*/		regs.R3 = regs.R14;
		/* 820BB4C4h case   83:*/		return 0x820BB4C8;
		  /* 820BB4C8h */ case   84:  		/* bl -43456 */
		/* 820BB4C8h case   84:*/		regs.LR = 0x820BB4CC; return 0x820B0B08;
		/* 820BB4C8h case   84:*/		return 0x820BB4CC;
		  /* 820BB4CCh */ case   85:  		/* or. R31, R3, R3 */
		/* 820BB4CCh case   85:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB4CCh case   85:*/		return 0x820BB4D0;
		  /* 820BB4D0h */ case   86:  		/* bc 12, CR0_LT, 12040 */
		/* 820BB4D0h case   86:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB4D0h case   86:*/		return 0x820BB4D4;
		  /* 820BB4D4h */ case   87:  		/* li R9, 23 */
		/* 820BB4D4h case   87:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BB4D4h case   87:*/		return 0x820BB4D8;
		  /* 820BB4D8h */ case   88:  		/* mr R8, R22 */
		/* 820BB4D8h case   88:*/		regs.R8 = regs.R22;
		/* 820BB4D8h case   88:*/		return 0x820BB4DC;
		  /* 820BB4DCh */ case   89:  		/* mr R7, R19 */
		/* 820BB4DCh case   89:*/		regs.R7 = regs.R19;
		/* 820BB4DCh case   89:*/		return 0x820BB4E0;
		  /* 820BB4E0h */ case   90:  		/* mr R6, R23 */
		/* 820BB4E0h case   90:*/		regs.R6 = regs.R23;
		/* 820BB4E0h case   90:*/		return 0x820BB4E4;
		  /* 820BB4E4h */ case   91:  		/* oris R5, R28, 8272 */
		/* 820BB4E4h case   91:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x2050);
		/* 820BB4E4h case   91:*/		return 0x820BB4E8;
		  /* 820BB4E8h */ case   92:  		/* mr R4, R18 */
		/* 820BB4E8h case   92:*/		regs.R4 = regs.R18;
		/* 820BB4E8h case   92:*/		return 0x820BB4EC;
		  /* 820BB4ECh */ case   93:  		/* mr R3, R14 */
		/* 820BB4ECh case   93:*/		regs.R3 = regs.R14;
		/* 820BB4ECh case   93:*/		return 0x820BB4F0;
		  /* 820BB4F0h */ case   94:  		/* bl -43496 */
		/* 820BB4F0h case   94:*/		regs.LR = 0x820BB4F4; return 0x820B0B08;
		/* 820BB4F0h case   94:*/		return 0x820BB4F4;
		  /* 820BB4F4h */ case   95:  		/* or. R31, R3, R3 */
		/* 820BB4F4h case   95:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB4F4h case   95:*/		return 0x820BB4F8;
		  /* 820BB4F8h */ case   96:  		/* bc 12, CR0_LT, 12000 */
		/* 820BB4F8h case   96:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB4F8h case   96:*/		return 0x820BB4FC;
		  /* 820BB4FCh */ case   97:  		/* li R9, 2 */
		/* 820BB4FCh case   97:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BB4FCh case   97:*/		return 0x820BB500;
		  /* 820BB500h */ case   98:  		/* mr R8, R23 */
		/* 820BB500h case   98:*/		regs.R8 = regs.R23;
		/* 820BB500h case   98:*/		return 0x820BB504;
		  /* 820BB504h */ case   99:  		/* mr R7, R16 */
		/* 820BB504h case   99:*/		regs.R7 = regs.R16;
		/* 820BB504h case   99:*/		return 0x820BB508;
		  /* 820BB508h */ case  100:  		/* mr R6, R15 */
		/* 820BB508h case  100:*/		regs.R6 = regs.R15;
		/* 820BB508h case  100:*/		return 0x820BB50C;
		  /* 820BB50Ch */ case  101:  		/* mr R5, R25 */
		/* 820BB50Ch case  101:*/		regs.R5 = regs.R25;
		/* 820BB50Ch case  101:*/		return 0x820BB510;
		  /* 820BB510h */ case  102:  		/* mr R4, R18 */
		/* 820BB510h case  102:*/		regs.R4 = regs.R18;
		/* 820BB510h case  102:*/		return 0x820BB514;
		  /* 820BB514h */ case  103:  		/* mr R3, R14 */
		/* 820BB514h case  103:*/		regs.R3 = regs.R14;
		/* 820BB514h case  103:*/		return 0x820BB518;
		  /* 820BB518h */ case  104:  		/* bl -43536 */
		/* 820BB518h case  104:*/		regs.LR = 0x820BB51C; return 0x820B0B08;
		/* 820BB518h case  104:*/		return 0x820BB51C;
		  /* 820BB51Ch */ case  105:  		/* or. R31, R3, R3 */
		/* 820BB51Ch case  105:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB51Ch case  105:*/		return 0x820BB520;
		  /* 820BB520h */ case  106:  		/* bc 12, CR0_LT, 11960 */
		/* 820BB520h case  106:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB520h case  106:*/		return 0x820BB524;
		  /* 820BB524h */ case  107:  		/* lwz R27, <#[R1 + 1732]> */
		/* 820BB524h case  107:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000006C4) );
		/* 820BB524h case  107:*/		return 0x820BB528;
		  /* 820BB528h */ case  108:  		/* cmplwi CR6, R27, 0 */
		/* 820BB528h case  108:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820BB528h case  108:*/		return 0x820BB52C;
		  /* 820BB52Ch */ case  109:  		/* bc 12, CR6_EQ, -11104 */
		/* 820BB52Ch case  109:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB52Ch case  109:*/		return 0x820BB530;
		  /* 820BB530h */ case  110:  		/* lwz R28, <#[R1 + 196]> */
		/* 820BB530h case  110:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000C4) );
		/* 820BB530h case  110:*/		return 0x820BB534;
		  /* 820BB534h */ case  111:  		/* cmplwi CR6, R30, 0 */
		/* 820BB534h case  111:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB534h case  111:*/		return 0x820BB538;
		  /* 820BB538h */ case  112:  		/* bc 12, CR6_EQ, 64 */
		/* 820BB538h case  112:*/		if ( regs.CR[6].eq ) { return 0x820BB578;  }
		/* 820BB538h case  112:*/		return 0x820BB53C;
		  /* 820BB53Ch */ case  113:  		/* addi R11, R28, -4 */
		/* 820BB53Ch case  113:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BB53Ch case  113:*/		return 0x820BB540;
		  /* 820BB540h */ case  114:  		/* mr R10, R29 */
		/* 820BB540h case  114:*/		regs.R10 = regs.R29;
		/* 820BB540h case  114:*/		return 0x820BB544;
		  /* 820BB544h */ case  115:  		/* cmplwi CR0, R30, 0 */
		/* 820BB544h case  115:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB544h case  115:*/		return 0x820BB548;
		  /* 820BB548h */ case  116:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB548h case  116:*/		if ( regs.CR[0].eq ) { return 0x820BB558;  }
		/* 820BB548h case  116:*/		return 0x820BB54C;
		  /* 820BB54Ch */ case  117:  		/* mtspr CTR, R30 */
		/* 820BB54Ch case  117:*/		regs.CTR = regs.R30;
		/* 820BB54Ch case  117:*/		return 0x820BB550;
		  /* 820BB550h */ case  118:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB550h case  118:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB550h case  118:*/		return 0x820BB554;
		  /* 820BB554h */ case  119:  		/* bc 16, CR0_LT, -4 */
		/* 820BB554h case  119:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB550;  }
		/* 820BB554h case  119:*/		return 0x820BB558;
	}
	return 0x820BB558;
} // Block from 820BB378h-820BB558h (120 instructions)

//////////////////////////////////////////////////////
// Block at 820BB558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB558);
		  /* 820BB558h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BB558h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB558h case    0:*/		return 0x820BB55C;
		  /* 820BB55Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BB55Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820BB578;  }
		/* 820BB55Ch case    1:*/		return 0x820BB560;
		  /* 820BB560h */ case    2:  		/* addi R11, R27, -4 */
		/* 820BB560h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BB560h case    2:*/		return 0x820BB564;
		  /* 820BB564h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BB564h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB564h case    3:*/		return 0x820BB568;
		  /* 820BB568h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB568h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BB578;  }
		/* 820BB568h case    4:*/		return 0x820BB56C;
		  /* 820BB56Ch */ case    5:  		/* mtspr CTR, R30 */
		/* 820BB56Ch case    5:*/		regs.CTR = regs.R30;
		/* 820BB56Ch case    5:*/		return 0x820BB570;
		  /* 820BB570h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BB570h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB570h case    6:*/		return 0x820BB574;
		  /* 820BB574h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BB574h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB570;  }
		/* 820BB574h case    7:*/		return 0x820BB578;
	}
	return 0x820BB578;
} // Block from 820BB558h-820BB578h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BB578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB578);
		  /* 820BB578h */ case    0:  		/* li R9, 2 */
		/* 820BB578h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BB578h case    0:*/		return 0x820BB57C;
		  /* 820BB57Ch */ case    1:  		/* li R8, 0 */
		/* 820BB57Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BB57Ch case    1:*/		return 0x820BB580;
		  /* 820BB580h */ case    2:  		/* mr R7, R15 */
		/* 820BB580h case    2:*/		regs.R7 = regs.R15;
		/* 820BB580h case    2:*/		return 0x820BB584;
		  /* 820BB584h */ case    3:  		/* mr R6, R28 */
		/* 820BB584h case    3:*/		regs.R6 = regs.R28;
		/* 820BB584h case    3:*/		return 0x820BB588;
		  /* 820BB588h */ case    4:  		/* mr R5, R26 */
		/* 820BB588h case    4:*/		regs.R5 = regs.R26;
		/* 820BB588h case    4:*/		return 0x820BB58C;
		  /* 820BB58Ch */ case    5:  		/* mr R4, R18 */
		/* 820BB58Ch case    5:*/		regs.R4 = regs.R18;
		/* 820BB58Ch case    5:*/		return 0x820BB590;
		  /* 820BB590h */ case    6:  		/* mr R3, R14 */
		/* 820BB590h case    6:*/		regs.R3 = regs.R14;
		/* 820BB590h case    6:*/		return 0x820BB594;
		  /* 820BB594h */ case    7:  		/* bl -43660 */
		/* 820BB594h case    7:*/		regs.LR = 0x820BB598; return 0x820B0B08;
		/* 820BB594h case    7:*/		return 0x820BB598;
		  /* 820BB598h */ case    8:  		/* or. R31, R3, R3 */
		/* 820BB598h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB598h case    8:*/		return 0x820BB59C;
		  /* 820BB59Ch */ case    9:  		/* bc 12, CR0_LT, 11836 */
		/* 820BB59Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB59Ch case    9:*/		return 0x820BB5A0;
		  /* 820BB5A0h */ case   10:  		/* li R9, 16 */
		/* 820BB5A0h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x10);
		/* 820BB5A0h case   10:*/		return 0x820BB5A4;
		  /* 820BB5A4h */ case   11:  		/* mr R8, R28 */
		/* 820BB5A4h case   11:*/		regs.R8 = regs.R28;
		/* 820BB5A4h case   11:*/		return 0x820BB5A8;
		  /* 820BB5A8h */ case   12:  		/* mr R7, R24 */
		/* 820BB5A8h case   12:*/		regs.R7 = regs.R24;
		/* 820BB5A8h case   12:*/		return 0x820BB5AC;
		  /* 820BB5ACh */ case   13:  		/* mr R6, R27 */
		/* 820BB5ACh case   13:*/		regs.R6 = regs.R27;
		/* 820BB5ACh case   13:*/		return 0x820BB5B0;
		  /* 820BB5B0h */ case   14:  		/* mr R5, R25 */
		/* 820BB5B0h case   14:*/		regs.R5 = regs.R25;
		/* 820BB5B0h case   14:*/		return 0x820BB5B4;
		  /* 820BB5B4h */ case   15:  		/* mr R4, R18 */
		/* 820BB5B4h case   15:*/		regs.R4 = regs.R18;
		/* 820BB5B4h case   15:*/		return 0x820BB5B8;
		  /* 820BB5B8h */ case   16:  		/* mr R3, R14 */
		/* 820BB5B8h case   16:*/		regs.R3 = regs.R14;
		/* 820BB5B8h case   16:*/		return 0x820BB5BC;
		  /* 820BB5BCh */ case   17:  		/* b 8576 */
		/* 820BB5BCh case   17:*/		return 0x820BD73C;
		/* 820BB5BCh case   17:*/		return 0x820BB5C0;
		  /* 820BB5C0h */ case   18:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB5C0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB5C0h case   18:*/		return 0x820BB5C4;
		  /* 820BB5C4h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 820BB5C4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB5C4h case   19:*/		return 0x820BB5C8;
		  /* 820BB5C8h */ case   20:  		/* bc 12, CR6_EQ, 11784 */
		/* 820BB5C8h case   20:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB5C8h case   20:*/		return 0x820BB5CC;
		  /* 820BB5CCh */ case   21:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BB5CCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BB5CCh case   21:*/		return 0x820BB5D0;
		  /* 820BB5D0h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 820BB5D0h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB5D0h case   22:*/		return 0x820BB5D4;
		  /* 820BB5D4h */ case   23:  		/* bc 12, CR6_EQ, 11772 */
		/* 820BB5D4h case   23:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB5D4h case   23:*/		return 0x820BB5D8;
		  /* 820BB5D8h */ case   24:  		/* cmplwi CR6, R15, 0 */
		/* 820BB5D8h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB5D8h case   24:*/		return 0x820BB5DC;
		  /* 820BB5DCh */ case   25:  		/* bc 12, CR6_EQ, -11280 */
		/* 820BB5DCh case   25:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB5DCh case   25:*/		return 0x820BB5E0;
		  /* 820BB5E0h */ case   26:  		/* mr R4, R30 */
		/* 820BB5E0h case   26:*/		regs.R4 = regs.R30;
		/* 820BB5E0h case   26:*/		return 0x820BB5E4;
		  /* 820BB5E4h */ case   27:  		/* mr R3, R14 */
		/* 820BB5E4h case   27:*/		regs.R3 = regs.R14;
		/* 820BB5E4h case   27:*/		return 0x820BB5E8;
		  /* 820BB5E8h */ case   28:  		/* bl -44792 */
		/* 820BB5E8h case   28:*/		regs.LR = 0x820BB5EC; return 0x820B06F0;
		/* 820BB5E8h case   28:*/		return 0x820BB5EC;
		  /* 820BB5ECh */ case   29:  		/* or. R7, R3, R3 */
		/* 820BB5ECh case   29:*/		cpu::op::or<1>(regs,&regs.R7,regs.R3,regs.R3);
		/* 820BB5ECh case   29:*/		return 0x820BB5F0;
		  /* 820BB5F0h */ case   30:  		/* bc 12, CR0_EQ, 7728 */
		/* 820BB5F0h case   30:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BB5F0h case   30:*/		return 0x820BB5F4;
		  /* 820BB5F4h */ case   31:  		/* cmplwi CR6, R30, 0 */
		/* 820BB5F4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB5F4h case   31:*/		return 0x820BB5F8;
		  /* 820BB5F8h */ case   32:  		/* bc 12, CR6_EQ, 64 */
		/* 820BB5F8h case   32:*/		if ( regs.CR[6].eq ) { return 0x820BB638;  }
		/* 820BB5F8h case   32:*/		return 0x820BB5FC;
		  /* 820BB5FCh */ case   33:  		/* lwz R10, <#[R1 + 144]> */
		/* 820BB5FCh case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820BB5FCh case   33:*/		return 0x820BB600;
		  /* 820BB600h */ case   34:  		/* addi R11, R7, -4 */
		/* 820BB600h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0xFFFFFFFC);
		/* 820BB600h case   34:*/		return 0x820BB604;
		  /* 820BB604h */ case   35:  		/* mtspr CTR, R30 */
		/* 820BB604h case   35:*/		regs.CTR = regs.R30;
		/* 820BB604h case   35:*/		return 0x820BB608;
		  /* 820BB608h */ case   36:  		/* lwz R9, <#[R10]> */
		/* 820BB608h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820BB608h case   36:*/		return 0x820BB60C;
		  /* 820BB60Ch */ case   37:  		/* stwu R9, <#[R11 + 4]> */
		/* 820BB60Ch case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB60Ch case   37:*/		return 0x820BB610;
		  /* 820BB610h */ case   38:  		/* bc 16, CR0_LT, -8 */
		/* 820BB610h case   38:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB608;  }
		/* 820BB610h case   38:*/		return 0x820BB614;
		  /* 820BB614h */ case   39:  		/* cmplwi CR6, R30, 0 */
		/* 820BB614h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB614h case   39:*/		return 0x820BB618;
		  /* 820BB618h */ case   40:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB618h case   40:*/		if ( regs.CR[6].eq ) { return 0x820BB638;  }
		/* 820BB618h case   40:*/		return 0x820BB61C;
		  /* 820BB61Ch */ case   41:  		/* addi R11, R15, -4 */
		/* 820BB61Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BB61Ch case   41:*/		return 0x820BB620;
		  /* 820BB620h */ case   42:  		/* li R10, -1 */
		/* 820BB620h case   42:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BB620h case   42:*/		return 0x820BB624;
		  /* 820BB624h */ case   43:  		/* cmplwi CR0, R30, 0 */
		/* 820BB624h case   43:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB624h case   43:*/		return 0x820BB628;
		  /* 820BB628h */ case   44:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB628h case   44:*/		if ( regs.CR[0].eq ) { return 0x820BB638;  }
		/* 820BB628h case   44:*/		return 0x820BB62C;
		  /* 820BB62Ch */ case   45:  		/* mtspr CTR, R30 */
		/* 820BB62Ch case   45:*/		regs.CTR = regs.R30;
		/* 820BB62Ch case   45:*/		return 0x820BB630;
		  /* 820BB630h */ case   46:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB630h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB630h case   46:*/		return 0x820BB634;
		  /* 820BB634h */ case   47:  		/* bc 16, CR0_LT, -4 */
		/* 820BB634h case   47:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB630;  }
		/* 820BB634h case   47:*/		return 0x820BB638;
	}
	return 0x820BB638;
} // Block from 820BB578h-820BB638h (48 instructions)

//////////////////////////////////////////////////////
// Block at 820BB638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB638);
		  /* 820BB638h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BB638h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BB638h case    0:*/		return 0x820BB63C;
		  /* 820BB63Ch */ case    1:  		/* b -11440 */
		/* 820BB63Ch case    1:*/		return 0x820B898C;
		/* 820BB63Ch case    1:*/		return 0x820BB640;
		  /* 820BB640h */ case    2:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB640h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB640h case    2:*/		return 0x820BB644;
		  /* 820BB644h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820BB644h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB644h case    3:*/		return 0x820BB648;
		  /* 820BB648h */ case    4:  		/* bc 12, CR6_EQ, 11656 */
		/* 820BB648h case    4:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB648h case    4:*/		return 0x820BB64C;
		  /* 820BB64Ch */ case    5:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BB64Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BB64Ch case    5:*/		return 0x820BB650;
		  /* 820BB650h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BB650h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB650h case    6:*/		return 0x820BB654;
		  /* 820BB654h */ case    7:  		/* bc 12, CR6_EQ, 11644 */
		/* 820BB654h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB654h case    7:*/		return 0x820BB658;
		  /* 820BB658h */ case    8:  		/* cmplwi CR6, R15, 0 */
		/* 820BB658h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB658h case    8:*/		return 0x820BB65C;
		  /* 820BB65Ch */ case    9:  		/* bc 12, CR6_EQ, -11408 */
		/* 820BB65Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB65Ch case    9:*/		return 0x820BB660;
		  /* 820BB660h */ case   10:  		/* mr R4, R30 */
		/* 820BB660h case   10:*/		regs.R4 = regs.R30;
		/* 820BB660h case   10:*/		return 0x820BB664;
		  /* 820BB664h */ case   11:  		/* mr R3, R14 */
		/* 820BB664h case   11:*/		regs.R3 = regs.R14;
		/* 820BB664h case   11:*/		return 0x820BB668;
		  /* 820BB668h */ case   12:  		/* bl -44920 */
		/* 820BB668h case   12:*/		regs.LR = 0x820BB66C; return 0x820B06F0;
		/* 820BB668h case   12:*/		return 0x820BB66C;
		  /* 820BB66Ch */ case   13:  		/* or. R8, R3, R3 */
		/* 820BB66Ch case   13:*/		cpu::op::or<1>(regs,&regs.R8,regs.R3,regs.R3);
		/* 820BB66Ch case   13:*/		return 0x820BB670;
		  /* 820BB670h */ case   14:  		/* bc 12, CR0_EQ, 7600 */
		/* 820BB670h case   14:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BB670h case   14:*/		return 0x820BB674;
		  /* 820BB674h */ case   15:  		/* cmplwi CR6, R30, 0 */
		/* 820BB674h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB674h case   15:*/		return 0x820BB678;
		  /* 820BB678h */ case   16:  		/* bc 12, CR6_EQ, -11504 */
		/* 820BB678h case   16:*/		if ( regs.CR[6].eq ) { return 0x820B8988;  }
		/* 820BB678h case   16:*/		return 0x820BB67C;
		  /* 820BB67Ch */ case   17:  		/* lwz R10, <#[R1 + 148]> */
		/* 820BB67Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 820BB67Ch case   17:*/		return 0x820BB680;
		  /* 820BB680h */ case   18:  		/* addi R11, R8, -4 */
		/* 820BB680h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820BB680h case   18:*/		return 0x820BB684;
		  /* 820BB684h */ case   19:  		/* mtspr CTR, R30 */
		/* 820BB684h case   19:*/		regs.CTR = regs.R30;
		/* 820BB684h case   19:*/		return 0x820BB688;
		  /* 820BB688h */ case   20:  		/* lwz R9, <#[R10]> */
		/* 820BB688h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820BB688h case   20:*/		return 0x820BB68C;
		  /* 820BB68Ch */ case   21:  		/* stwu R9, <#[R11 + 4]> */
		/* 820BB68Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB68Ch case   21:*/		return 0x820BB690;
		  /* 820BB690h */ case   22:  		/* bc 16, CR0_LT, -8 */
		/* 820BB690h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB688;  }
		/* 820BB690h case   22:*/		return 0x820BB694;
		  /* 820BB694h */ case   23:  		/* cmplwi CR6, R30, 0 */
		/* 820BB694h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB694h case   23:*/		return 0x820BB698;
		  /* 820BB698h */ case   24:  		/* bc 12, CR6_EQ, -11536 */
		/* 820BB698h case   24:*/		if ( regs.CR[6].eq ) { return 0x820B8988;  }
		/* 820BB698h case   24:*/		return 0x820BB69C;
		  /* 820BB69Ch */ case   25:  		/* addi R11, R15, -4 */
		/* 820BB69Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BB69Ch case   25:*/		return 0x820BB6A0;
		  /* 820BB6A0h */ case   26:  		/* li R10, -1 */
		/* 820BB6A0h case   26:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BB6A0h case   26:*/		return 0x820BB6A4;
		  /* 820BB6A4h */ case   27:  		/* cmplwi CR0, R30, 0 */
		/* 820BB6A4h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BB6A4h case   27:*/		return 0x820BB6A8;
		  /* 820BB6A8h */ case   28:  		/* bc 12, CR0_EQ, -11552 */
		/* 820BB6A8h case   28:*/		if ( regs.CR[0].eq ) { return 0x820B8988;  }
		/* 820BB6A8h case   28:*/		return 0x820BB6AC;
		  /* 820BB6ACh */ case   29:  		/* mtspr CTR, R30 */
		/* 820BB6ACh case   29:*/		regs.CTR = regs.R30;
		/* 820BB6ACh case   29:*/		return 0x820BB6B0;
		  /* 820BB6B0h */ case   30:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB6B0h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB6B0h case   30:*/		return 0x820BB6B4;
		  /* 820BB6B4h */ case   31:  		/* bc 16, CR0_LT, -4 */
		/* 820BB6B4h case   31:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB6B0;  }
		/* 820BB6B4h case   31:*/		return 0x820BB6B8;
		  /* 820BB6B8h */ case   32:  		/* b -11568 */
		/* 820BB6B8h case   32:*/		return 0x820B8988;
		/* 820BB6B8h case   32:*/		return 0x820BB6BC;
		  /* 820BB6BCh */ case   33:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB6BCh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB6BCh case   33:*/		return 0x820BB6C0;
		  /* 820BB6C0h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 820BB6C0h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BB6C0h case   34:*/		return 0x820BB6C4;
		  /* 820BB6C4h */ case   35:  		/* bc 12, CR6_EQ, 11532 */
		/* 820BB6C4h case   35:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB6C4h case   35:*/		return 0x820BB6C8;
		  /* 820BB6C8h */ case   36:  		/* lwz R29, <#[R1 + 132]> */
		/* 820BB6C8h case   36:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000084) );
		/* 820BB6C8h case   36:*/		return 0x820BB6CC;
		  /* 820BB6CCh */ case   37:  		/* cmplwi CR6, R29, 0 */
		/* 820BB6CCh case   37:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820BB6CCh case   37:*/		return 0x820BB6D0;
		  /* 820BB6D0h */ case   38:  		/* bc 12, CR6_EQ, 11520 */
		/* 820BB6D0h case   38:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB6D0h case   38:*/		return 0x820BB6D4;
		  /* 820BB6D4h */ case   39:  		/* cmplwi CR6, R15, 0 */
		/* 820BB6D4h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB6D4h case   39:*/		return 0x820BB6D8;
		  /* 820BB6D8h */ case   40:  		/* bc 12, CR6_EQ, -11532 */
		/* 820BB6D8h case   40:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB6D8h case   40:*/		return 0x820BB6DC;
		  /* 820BB6DCh */ case   41:  		/* lwz R27, <#[R11 + 16]> */
		/* 820BB6DCh case   41:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000010) );
		/* 820BB6DCh case   41:*/		return 0x820BB6E0;
		  /* 820BB6E0h */ case   42:  		/* cmplwi CR6, R27, 0 */
		/* 820BB6E0h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 820BB6E0h case   42:*/		return 0x820BB6E4;
		  /* 820BB6E4h */ case   43:  		/* bc 12, CR6_EQ, 11500 */
		/* 820BB6E4h case   43:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB6E4h case   43:*/		return 0x820BB6E8;
		  /* 820BB6E8h */ case   44:  		/* lwz R11, <#[R27 + 4]> */
		/* 820BB6E8h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 820BB6E8h case   44:*/		return 0x820BB6EC;
		  /* 820BB6ECh */ case   45:  		/* cmpwi CR6, R11, 9 */
		/* 820BB6ECh case   45:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 820BB6ECh case   45:*/		return 0x820BB6F0;
		  /* 820BB6F0h */ case   46:  		/* bc 4, CR6_EQ, 11488 */
		/* 820BB6F0h case   46:*/		if ( !regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB6F0h case   46:*/		return 0x820BB6F4;
		  /* 820BB6F4h */ case   47:  		/* lwz R11, <#[R27 + 16]> */
		/* 820BB6F4h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 820BB6F4h case   47:*/		return 0x820BB6F8;
		  /* 820BB6F8h */ case   48:  		/* cmpwi CR6, R11, 1 */
		/* 820BB6F8h case   48:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 820BB6F8h case   48:*/		return 0x820BB6FC;
		  /* 820BB6FCh */ case   49:  		/* bc 4, CR6_EQ, 12 */
		/* 820BB6FCh case   49:*/		if ( !regs.CR[6].eq ) { return 0x820BB708;  }
		/* 820BB6FCh case   49:*/		return 0x820BB700;
		  /* 820BB700h */ case   50:  		/* mr R4, R27 */
		/* 820BB700h case   50:*/		regs.R4 = regs.R27;
		/* 820BB700h case   50:*/		return 0x820BB704;
		  /* 820BB704h */ case   51:  		/* b 40 */
		/* 820BB704h case   51:*/		return 0x820BB72C;
		/* 820BB704h case   51:*/		return 0x820BB708;
	}
	return 0x820BB708;
} // Block from 820BB638h-820BB708h (52 instructions)

//////////////////////////////////////////////////////
// Block at 820BB708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB708);
		  /* 820BB708h */ case    0:  		/* li R9, 1024 */
		/* 820BB708h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x400);
		/* 820BB708h case    0:*/		return 0x820BB70C;
		  /* 820BB70Ch */ case    1:  		/* lwz R5, <#[R27 + 20]> */
		/* 820BB70Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000014) );
		/* 820BB70Ch case    1:*/		return 0x820BB710;
		  /* 820BB710h */ case    2:  		/* li R6, 0 */
		/* 820BB710h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BB710h case    2:*/		return 0x820BB714;
		  /* 820BB714h */ case    3:  		/* lwz R8, <#[R27 + 32]> */
		/* 820BB714h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000020) );
		/* 820BB714h case    3:*/		return 0x820BB718;
		  /* 820BB718h */ case    4:  		/* li R4, 2 */
		/* 820BB718h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 820BB718h case    4:*/		return 0x820BB71C;
		  /* 820BB71Ch */ case    5:  		/* lwz R7, <#[R27 + 28]> */
		/* 820BB71Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x0000001C) );
		/* 820BB71Ch case    5:*/		return 0x820BB720;
		  /* 820BB720h */ case    6:  		/* addi R3, R1, 1488 */
		/* 820BB720h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5D0);
		/* 820BB720h case    6:*/		return 0x820BB724;
		  /* 820BB724h */ case    7:  		/* bl 62812 */
		/* 820BB724h case    7:*/		regs.LR = 0x820BB728; return 0x820CAC80;
		/* 820BB724h case    7:*/		return 0x820BB728;
		  /* 820BB728h */ case    8:  		/* addi R4, R1, 1488 */
		/* 820BB728h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5D0);
		/* 820BB728h case    8:*/		return 0x820BB72C;
	}
	return 0x820BB72C;
} // Block from 820BB708h-820BB72Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BB72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB72C);
		  /* 820BB72Ch */ case    0:  		/* lwz R14, <#[R1 + 144]> */
		/* 820BB72Ch case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000090) );
		/* 820BB72Ch case    0:*/		return 0x820BB730;
		  /* 820BB730h */ case    1:  		/* lwz R6, <#[R1 + 160]> */
		/* 820BB730h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BB730h case    1:*/		return 0x820BB734;
		  /* 820BB734h */ case    2:  		/* mr R5, R14 */
		/* 820BB734h case    2:*/		regs.R5 = regs.R14;
		/* 820BB734h case    2:*/		return 0x820BB738;
		  /* 820BB738h */ case    3:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BB738h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BB738h case    3:*/		return 0x820BB73C;
		  /* 820BB73Ch */ case    4:  		/* bl -27996 */
		/* 820BB73Ch case    4:*/		regs.LR = 0x820BB740; return 0x820B49E0;
		/* 820BB73Ch case    4:*/		return 0x820BB740;
		  /* 820BB740h */ case    5:  		/* or. R31, R3, R3 */
		/* 820BB740h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB740h case    5:*/		return 0x820BB744;
		  /* 820BB744h */ case    6:  		/* bc 12, CR0_LT, 11412 */
		/* 820BB744h case    6:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB744h case    6:*/		return 0x820BB748;
		  /* 820BB748h */ case    7:  		/* lwz R11, <#[R27 + 32]> */
		/* 820BB748h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 820BB748h case    7:*/		return 0x820BB74C;
		  /* 820BB74Ch */ case    8:  		/* lwz R29, <#[R29 + 16]> */
		/* 820BB74Ch case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000010) );
		/* 820BB74Ch case    8:*/		return 0x820BB750;
		  /* 820BB750h */ case    9:  		/* lwz R15, <#[R27 + 28]> */
		/* 820BB750h case    9:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R27 + 0x0000001C) );
		/* 820BB750h case    9:*/		return 0x820BB754;
		  /* 820BB754h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 820BB754h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820BB754h case   10:*/		return 0x820BB758;
		  /* 820BB758h */ case   11:  		/* stw R11, <#[R1 + 128]> */
		/* 820BB758h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB758h case   11:*/		return 0x820BB75C;
		  /* 820BB75Ch */ case   12:  		/* bc 12, CR6_EQ, 11380 */
		/* 820BB75Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB75Ch case   12:*/		return 0x820BB760;
		  /* 820BB760h */ case   13:  		/* lwz R11, <#[R29 + 4]> */
		/* 820BB760h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 820BB760h case   13:*/		return 0x820BB764;
		  /* 820BB764h */ case   14:  		/* cmpwi CR6, R11, 9 */
		/* 820BB764h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 820BB764h case   14:*/		return 0x820BB768;
		  /* 820BB768h */ case   15:  		/* bc 4, CR6_EQ, 11368 */
		/* 820BB768h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB768h case   15:*/		return 0x820BB76C;
		  /* 820BB76Ch */ case   16:  		/* lwz R11, <#[R29 + 16]> */
		/* 820BB76Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 820BB76Ch case   16:*/		return 0x820BB770;
		  /* 820BB770h */ case   17:  		/* cmpwi CR6, R11, 1 */
		/* 820BB770h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 820BB770h case   17:*/		return 0x820BB774;
		  /* 820BB774h */ case   18:  		/* bc 4, CR6_EQ, 52 */
		/* 820BB774h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820BB7A8;  }
		/* 820BB774h case   18:*/		return 0x820BB778;
		  /* 820BB778h */ case   19:  		/* lwz R26, <#[R1 + 164]> */
		/* 820BB778h case   19:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BB778h case   19:*/		return 0x820BB77C;
		  /* 820BB77Ch */ case   20:  		/* mr R4, R29 */
		/* 820BB77Ch case   20:*/		regs.R4 = regs.R29;
		/* 820BB77Ch case   20:*/		return 0x820BB780;
		  /* 820BB780h */ case   21:  		/* lwz R28, <#[R1 + 148]> */
		/* 820BB780h case   21:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000094) );
		/* 820BB780h case   21:*/		return 0x820BB784;
		  /* 820BB784h */ case   22:  		/* mr R6, R26 */
		/* 820BB784h case   22:*/		regs.R6 = regs.R26;
		/* 820BB784h case   22:*/		return 0x820BB788;
		  /* 820BB788h */ case   23:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BB788h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BB788h case   23:*/		return 0x820BB78C;
		  /* 820BB78Ch */ case   24:  		/* mr R5, R28 */
		/* 820BB78Ch case   24:*/		regs.R5 = regs.R28;
		/* 820BB78Ch case   24:*/		return 0x820BB790;
		  /* 820BB790h */ case   25:  		/* bl -28080 */
		/* 820BB790h case   25:*/		regs.LR = 0x820BB794; return 0x820B49E0;
		/* 820BB790h case   25:*/		return 0x820BB794;
		  /* 820BB794h */ case   26:  		/* or. R31, R3, R3 */
		/* 820BB794h case   26:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB794h case   26:*/		return 0x820BB798;
		  /* 820BB798h */ case   27:  		/* bc 12, CR0_LT, 11328 */
		/* 820BB798h case   27:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB798h case   27:*/		return 0x820BB79C;
		  /* 820BB79Ch */ case   28:  		/* lwz R16, <#[R29 + 32]> */
		/* 820BB79Ch case   28:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R29 + 0x00000020) );
		/* 820BB79Ch case   28:*/		return 0x820BB7A0;
		  /* 820BB7A0h */ case   29:  		/* lwz R18, <#[R29 + 28]> */
		/* 820BB7A0h case   29:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R29 + 0x0000001C) );
		/* 820BB7A0h case   29:*/		return 0x820BB7A4;
		  /* 820BB7A4h */ case   30:  		/* b 80 */
		/* 820BB7A4h case   30:*/		return 0x820BB7F4;
		/* 820BB7A4h case   30:*/		return 0x820BB7A8;
	}
	return 0x820BB7A8;
} // Block from 820BB72Ch-820BB7A8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820BB7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB7A8);
		  /* 820BB7A8h */ case    0:  		/* li R9, 2048 */
		/* 820BB7A8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x800);
		/* 820BB7A8h case    0:*/		return 0x820BB7AC;
		  /* 820BB7ACh */ case    1:  		/* lwz R5, <#[R29 + 20]> */
		/* 820BB7ACh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000014) );
		/* 820BB7ACh case    1:*/		return 0x820BB7B0;
		  /* 820BB7B0h */ case    2:  		/* li R6, 0 */
		/* 820BB7B0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BB7B0h case    2:*/		return 0x820BB7B4;
		  /* 820BB7B4h */ case    3:  		/* lwz R8, <#[R29 + 32]> */
		/* 820BB7B4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000020) );
		/* 820BB7B4h case    3:*/		return 0x820BB7B8;
		  /* 820BB7B8h */ case    4:  		/* li R4, 2 */
		/* 820BB7B8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 820BB7B8h case    4:*/		return 0x820BB7BC;
		  /* 820BB7BCh */ case    5:  		/* lwz R7, <#[R29 + 28]> */
		/* 820BB7BCh case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x0000001C) );
		/* 820BB7BCh case    5:*/		return 0x820BB7C0;
		  /* 820BB7C0h */ case    6:  		/* addi R3, R1, 1440 */
		/* 820BB7C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5A0);
		/* 820BB7C0h case    6:*/		return 0x820BB7C4;
		  /* 820BB7C4h */ case    7:  		/* bl 62652 */
		/* 820BB7C4h case    7:*/		regs.LR = 0x820BB7C8; return 0x820CAC80;
		/* 820BB7C4h case    7:*/		return 0x820BB7C8;
		  /* 820BB7C8h */ case    8:  		/* lwz R26, <#[R1 + 164]> */
		/* 820BB7C8h case    8:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BB7C8h case    8:*/		return 0x820BB7CC;
		  /* 820BB7CCh */ case    9:  		/* lwz R28, <#[R1 + 148]> */
		/* 820BB7CCh case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000094) );
		/* 820BB7CCh case    9:*/		return 0x820BB7D0;
		  /* 820BB7D0h */ case   10:  		/* addi R4, R1, 1440 */
		/* 820BB7D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x5A0);
		/* 820BB7D0h case   10:*/		return 0x820BB7D4;
		  /* 820BB7D4h */ case   11:  		/* mr R6, R26 */
		/* 820BB7D4h case   11:*/		regs.R6 = regs.R26;
		/* 820BB7D4h case   11:*/		return 0x820BB7D8;
		  /* 820BB7D8h */ case   12:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BB7D8h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BB7D8h case   12:*/		return 0x820BB7DC;
		  /* 820BB7DCh */ case   13:  		/* mr R5, R28 */
		/* 820BB7DCh case   13:*/		regs.R5 = regs.R28;
		/* 820BB7DCh case   13:*/		return 0x820BB7E0;
		  /* 820BB7E0h */ case   14:  		/* bl -28160 */
		/* 820BB7E0h case   14:*/		regs.LR = 0x820BB7E4; return 0x820B49E0;
		/* 820BB7E0h case   14:*/		return 0x820BB7E4;
		  /* 820BB7E4h */ case   15:  		/* or. R31, R3, R3 */
		/* 820BB7E4h case   15:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB7E4h case   15:*/		return 0x820BB7E8;
		  /* 820BB7E8h */ case   16:  		/* bc 12, CR0_LT, 11248 */
		/* 820BB7E8h case   16:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB7E8h case   16:*/		return 0x820BB7EC;
		  /* 820BB7ECh */ case   17:  		/* lwz R16, <#[R29 + 28]> */
		/* 820BB7ECh case   17:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R29 + 0x0000001C) );
		/* 820BB7ECh case   17:*/		return 0x820BB7F0;
		  /* 820BB7F0h */ case   18:  		/* lwz R18, <#[R29 + 32]> */
		/* 820BB7F0h case   18:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R29 + 0x00000020) );
		/* 820BB7F0h case   18:*/		return 0x820BB7F4;
	}
	return 0x820BB7F4;
} // Block from 820BB7A8h-820BB7F4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820BB7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB7F4);
		  /* 820BB7F4h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BB7F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB7F4h case    0:*/		return 0x820BB7F8;
		  /* 820BB7F8h */ case    1:  		/* cmplw CR6, R11, R16 */
		/* 820BB7F8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 820BB7F8h case    1:*/		return 0x820BB7FC;
		  /* 820BB7FCh */ case    2:  		/* bc 4, CR6_EQ, 11220 */
		/* 820BB7FCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB7FCh case    2:*/		return 0x820BB800;
		  /* 820BB800h */ case    3:  		/* mullw R11, R18, R15 */
		/* 820BB800h case    3:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R18,regs.R15);
		/* 820BB800h case    3:*/		return 0x820BB804;
		  /* 820BB804h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 820BB804h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820BB804h case    4:*/		return 0x820BB808;
		  /* 820BB808h */ case    5:  		/* bc 4, CR6_EQ, 11208 */
		/* 820BB808h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BB808h case    5:*/		return 0x820BB80C;
		  /* 820BB80Ch */ case    6:  		/* lwz R31, <#[R1 + 1716]> */
		/* 820BB80Ch case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BB80Ch case    6:*/		return 0x820BB810;
		  /* 820BB810h */ case    7:  		/* mr R6, R15 */
		/* 820BB810h case    7:*/		regs.R6 = regs.R15;
		/* 820BB810h case    7:*/		return 0x820BB814;
		  /* 820BB814h */ case    8:  		/* mr R4, R14 */
		/* 820BB814h case    8:*/		regs.R4 = regs.R14;
		/* 820BB814h case    8:*/		return 0x820BB818;
		  /* 820BB818h */ case    9:  		/* lwz R7, <#[R1 + 128]> */
		/* 820BB818h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB818h case    9:*/		return 0x820BB81C;
		  /* 820BB81Ch */ case   10:  		/* mr R3, R31 */
		/* 820BB81Ch case   10:*/		regs.R3 = regs.R31;
		/* 820BB81Ch case   10:*/		return 0x820BB820;
		  /* 820BB820h */ case   11:  		/* lwz R5, <#[R27 + 16]> */
		/* 820BB820h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000010) );
		/* 820BB820h case   11:*/		return 0x820BB824;
		  /* 820BB824h */ case   12:  		/* bl -48276 */
		/* 820BB824h case   12:*/		regs.LR = 0x820BB828; return 0x820AFB90;
		/* 820BB824h case   12:*/		return 0x820BB828;
		  /* 820BB828h */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820BB828h case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BB828h case   13:*/		return 0x820BB82C;
		  /* 820BB82Ch */ case   14:  		/* mr R3, R31 */
		/* 820BB82Ch case   14:*/		regs.R3 = regs.R31;
		/* 820BB82Ch case   14:*/		return 0x820BB830;
		  /* 820BB830h */ case   15:  		/* bc 4, CR0_EQ, 428 */
		/* 820BB830h case   15:*/		if ( !regs.CR[0].eq ) { return 0x820BB9DC;  }
		/* 820BB830h case   15:*/		return 0x820BB834;
		  /* 820BB834h */ case   16:  		/* mulli R4, R15, 5 */
		/* 820BB834h case   16:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R15,0x5);
		/* 820BB834h case   16:*/		return 0x820BB838;
		  /* 820BB838h */ case   17:  		/* bl -45384 */
		/* 820BB838h case   17:*/		regs.LR = 0x820BB83C; return 0x820B06F0;
		/* 820BB838h case   17:*/		return 0x820BB83C;
		  /* 820BB83Ch */ case   18:  		/* or. R11, R3, R3 */
		/* 820BB83Ch case   18:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BB83Ch case   18:*/		return 0x820BB840;
		  /* 820BB840h */ case   19:  		/* bc 12, CR0_EQ, 7136 */
		/* 820BB840h case   19:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BB840h case   19:*/		return 0x820BB844;
		  /* 820BB844h */ case   20:  		/* li R10, 5 */
		/* 820BB844h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x5);
		/* 820BB844h case   20:*/		return 0x820BB848;
		  /* 820BB848h */ case   21:  		/* addi R9, R1, 156 */
		/* 820BB848h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x9C);
		/* 820BB848h case   21:*/		return 0x820BB84C;
		  /* 820BB84Ch */ case   22:  		/* rlwinm R17, R15, 2, 0, 29 */
		/* 820BB84Ch case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R17,regs.R15);
		/* 820BB84Ch case   22:*/		return 0x820BB850;
		  /* 820BB850h */ case   23:  		/* mtspr CTR, R10 */
		/* 820BB850h case   23:*/		regs.CTR = regs.R10;
		/* 820BB850h case   23:*/		return 0x820BB854;
		  /* 820BB854h */ case   24:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BB854h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BB854h case   24:*/		return 0x820BB858;
		  /* 820BB858h */ case   25:  		/* add R11, R17, R11 */
		/* 820BB858h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R17,regs.R11);
		/* 820BB858h case   25:*/		return 0x820BB85C;
		  /* 820BB85Ch */ case   26:  		/* bc 16, CR0_LT, -8 */
		/* 820BB85Ch case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB854;  }
		/* 820BB85Ch case   26:*/		return 0x820BB860;
		  /* 820BB860h */ case   27:  		/* li R21, 0 */
		/* 820BB860h case   27:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 820BB860h case   27:*/		return 0x820BB864;
		  /* 820BB864h */ case   28:  		/* cmplwi CR6, R18, 0 */
		/* 820BB864h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820BB864h case   28:*/		return 0x820BB868;
		  /* 820BB868h */ case   29:  		/* bc 12, CR6_EQ, -11932 */
		/* 820BB868h case   29:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BB868h case   29:*/		return 0x820BB86C;
		  /* 820BB86Ch */ case   30:  		/* lwz R19, <#[R1 + 1732]> */
		/* 820BB86Ch case   30:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x000006C4) );
		/* 820BB86Ch case   30:*/		return 0x820BB870;
		  /* 820BB870h */ case   31:  		/* li R29, -1 */
		/* 820BB870h case   31:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BB870h case   31:*/		return 0x820BB874;
		  /* 820BB874h */ case   32:  		/* lwz R20, <#[R1 + 176]> */
		/* 820BB874h case   32:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BB874h case   32:*/		return 0x820BB878;
		  /* 820BB878h */ case   33:  		/* lwz R26, <#[R1 + 172]> */
		/* 820BB878h case   33:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BB878h case   33:*/		return 0x820BB87C;
		  /* 820BB87Ch */ case   34:  		/* lwz R23, <#[R1 + 168]> */
		/* 820BB87Ch case   34:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BB87Ch case   34:*/		return 0x820BB880;
		  /* 820BB880h */ case   35:  		/* lwz R27, <#[R1 + 164]> */
		/* 820BB880h case   35:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BB880h case   35:*/		return 0x820BB884;
		  /* 820BB884h */ case   36:  		/* lwz R25, <#[R1 + 160]> */
		/* 820BB884h case   36:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BB884h case   36:*/		return 0x820BB888;
		  /* 820BB888h */ case   37:  		/* li R30, 0 */
		/* 820BB888h case   37:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820BB888h case   37:*/		return 0x820BB88C;
		  /* 820BB88Ch */ case   38:  		/* cmplwi CR6, R16, 0 */
		/* 820BB88Ch case   38:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820BB88Ch case   38:*/		return 0x820BB890;
		  /* 820BB890h */ case   39:  		/* bc 12, CR6_EQ, 276 */
		/* 820BB890h case   39:*/		if ( regs.CR[6].eq ) { return 0x820BB9A4;  }
		/* 820BB890h case   39:*/		return 0x820BB894;
		  /* 820BB894h */ case   40:  		/* rlwinm R24, R15, 0, 12, 31 */
		/* 820BB894h case   40:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R24,regs.R15);
		/* 820BB894h case   40:*/		return 0x820BB898;
		  /* 820BB898h */ case   41:  		/* oris R22, R24, 8272 */
		/* 820BB898h case   41:*/		cpu::op::oris<0>(regs,&regs.R22,regs.R24,0x2050);
		/* 820BB898h case   41:*/		return 0x820BB89C;
		  /* 820BB89Ch */ case   42:  		/* cmplwi CR6, R15, 0 */
		/* 820BB89Ch case   42:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB89Ch case   42:*/		return 0x820BB8A0;
		  /* 820BB8A0h */ case   43:  		/* bc 12, CR6_EQ, 100 */
		/* 820BB8A0h case   43:*/		if ( regs.CR[6].eq ) { return 0x820BB904;  }
		/* 820BB8A0h case   43:*/		return 0x820BB8A4;
		  /* 820BB8A4h */ case   44:  		/* lwz R10, <#[R1 + 128]> */
		/* 820BB8A4h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 820BB8A4h case   44:*/		return 0x820BB8A8;
		  /* 820BB8A8h */ case   45:  		/* mullw R11, R30, R18 */
		/* 820BB8A8h case   45:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R30,regs.R18);
		/* 820BB8A8h case   45:*/		return 0x820BB8AC;
		  /* 820BB8ACh */ case   46:  		/* mtspr CTR, R15 */
		/* 820BB8ACh case   46:*/		regs.CTR = regs.R15;
		/* 820BB8ACh case   46:*/		return 0x820BB8B0;
		  /* 820BB8B0h */ case   47:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820BB8B0h case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820BB8B0h case   47:*/		return 0x820BB8B4;
		  /* 820BB8B4h */ case   48:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 820BB8B4h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 820BB8B4h case   48:*/		return 0x820BB8B8;
		  /* 820BB8B8h */ case   49:  		/* add R11, R11, R21 */
		/* 820BB8B8h case   49:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 820BB8B8h case   49:*/		return 0x820BB8BC;
		  /* 820BB8BCh */ case   50:  		/* subf R9, R10, R9 */
		/* 820BB8BCh case   50:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 820BB8BCh case   50:*/		return 0x820BB8C0;
		  /* 820BB8C0h */ case   51:  		/* rlwinm R7, R11, 2, 0, 29 */
		/* 820BB8C0h case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R11);
		/* 820BB8C0h case   51:*/		return 0x820BB8C4;
		  /* 820BB8C4h */ case   52:  		/* mr R11, R27 */
		/* 820BB8C4h case   52:*/		regs.R11 = regs.R27;
		/* 820BB8C4h case   52:*/		return 0x820BB8C8;
		  /* 820BB8C8h */ case   53:  		/* add R9, R9, R14 */
		/* 820BB8C8h case   53:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R14);
		/* 820BB8C8h case   53:*/		return 0x820BB8CC;
		  /* 820BB8CCh */ case   54:  		/* subf R8, R27, R25 */
		/* 820BB8CCh case   54:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R27,regs.R25);
		/* 820BB8CCh case   54:*/		return 0x820BB8D0;
		  /* 820BB8D0h */ case   55:  		/* lwzux R6, <#[R9 + R10]> */
		/* 820BB8D0h case   55:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		regs.R9 = (uint32)(regs.R9 + regs.R10 + 0x00000000);
		/* 820BB8D0h case   55:*/		return 0x820BB8D4;
		  /* 820BB8D4h */ case   56:  		/* stwx R6, <#[R8 + R11]> */
		/* 820BB8D4h case   56:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820BB8D4h case   56:*/		return 0x820BB8D8;
		  /* 820BB8D8h */ case   57:  		/* lwzx R6, <#[R7 + R28]> */
		/* 820BB8D8h case   57:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + regs.R28 + 0x00000000) );
		/* 820BB8D8h case   57:*/		return 0x820BB8DC;
		  /* 820BB8DCh */ case   58:  		/* stw R6, <#[R11]> */
		/* 820BB8DCh case   58:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 820BB8DCh case   58:*/		return 0x820BB8E0;
		  /* 820BB8E0h */ case   59:  		/* addi R11, R11, 4 */
		/* 820BB8E0h case   59:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BB8E0h case   59:*/		return 0x820BB8E4;
		  /* 820BB8E4h */ case   60:  		/* bc 16, CR0_LT, -20 */
		/* 820BB8E4h case   60:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB8D0;  }
		/* 820BB8E4h case   60:*/		return 0x820BB8E8;
		  /* 820BB8E8h */ case   61:  		/* addi R11, R26, -4 */
		/* 820BB8E8h case   61:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BB8E8h case   61:*/		return 0x820BB8EC;
		  /* 820BB8ECh */ case   62:  		/* mr R10, R29 */
		/* 820BB8ECh case   62:*/		regs.R10 = regs.R29;
		/* 820BB8ECh case   62:*/		return 0x820BB8F0;
		  /* 820BB8F0h */ case   63:  		/* cmplwi CR0, R15, 0 */
		/* 820BB8F0h case   63:*/		cpu::op::cmplwi<0>(regs,regs.R15,0x00000000);
		/* 820BB8F0h case   63:*/		return 0x820BB8F4;
		  /* 820BB8F4h */ case   64:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB8F4h case   64:*/		if ( regs.CR[0].eq ) { return 0x820BB904;  }
		/* 820BB8F4h case   64:*/		return 0x820BB8F8;
		  /* 820BB8F8h */ case   65:  		/* mtspr CTR, R15 */
		/* 820BB8F8h case   65:*/		regs.CTR = regs.R15;
		/* 820BB8F8h case   65:*/		return 0x820BB8FC;
		  /* 820BB8FCh */ case   66:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB8FCh case   66:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB8FCh case   66:*/		return 0x820BB900;
		  /* 820BB900h */ case   67:  		/* bc 16, CR0_LT, -4 */
		/* 820BB900h case   67:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB8FC;  }
		/* 820BB900h case   67:*/		return 0x820BB904;
	}
	return 0x820BB904;
} // Block from 820BB7F4h-820BB904h (68 instructions)

//////////////////////////////////////////////////////
// Block at 820BB904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB904);
		  /* 820BB904h */ case    0:  		/* li R9, 0 */
		/* 820BB904h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BB904h case    0:*/		return 0x820BB908;
		  /* 820BB908h */ case    1:  		/* lwz R4, <#[R1 + 1724]> */
		/* 820BB908h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000006BC) );
		/* 820BB908h case    1:*/		return 0x820BB90C;
		  /* 820BB90Ch */ case    2:  		/* mr R8, R27 */
		/* 820BB90Ch case    2:*/		regs.R8 = regs.R27;
		/* 820BB90Ch case    2:*/		return 0x820BB910;
		  /* 820BB910h */ case    3:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BB910h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BB910h case    3:*/		return 0x820BB914;
		  /* 820BB914h */ case    4:  		/* mr R7, R25 */
		/* 820BB914h case    4:*/		regs.R7 = regs.R25;
		/* 820BB914h case    4:*/		return 0x820BB918;
		  /* 820BB918h */ case    5:  		/* mr R6, R26 */
		/* 820BB918h case    5:*/		regs.R6 = regs.R26;
		/* 820BB918h case    5:*/		return 0x820BB91C;
		  /* 820BB91Ch */ case    6:  		/* mr R5, R22 */
		/* 820BB91Ch case    6:*/		regs.R5 = regs.R22;
		/* 820BB91Ch case    6:*/		return 0x820BB920;
		  /* 820BB920h */ case    7:  		/* bl -44568 */
		/* 820BB920h case    7:*/		regs.LR = 0x820BB924; return 0x820B0B08;
		/* 820BB920h case    7:*/		return 0x820BB924;
		  /* 820BB924h */ case    8:  		/* or. R31, R3, R3 */
		/* 820BB924h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB924h case    8:*/		return 0x820BB928;
		  /* 820BB928h */ case    9:  		/* bc 12, CR0_LT, 10928 */
		/* 820BB928h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB928h case    9:*/		return 0x820BB92C;
		  /* 820BB92Ch */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 820BB92Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BB92Ch case   10:*/		return 0x820BB930;
		  /* 820BB930h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 820BB930h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820BB93C;  }
		/* 820BB930h case   11:*/		return 0x820BB934;
		  /* 820BB934h */ case   12:  		/* mr R4, R26 */
		/* 820BB934h case   12:*/		regs.R4 = regs.R26;
		/* 820BB934h case   12:*/		return 0x820BB938;
		  /* 820BB938h */ case   13:  		/* b 84 */
		/* 820BB938h case   13:*/		return 0x820BB98C;
		/* 820BB938h case   13:*/		return 0x820BB93C;
	}
	return 0x820BB93C;
} // Block from 820BB904h-820BB93Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 820BB93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB93C);
		  /* 820BB93Ch */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820BB93Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB93Ch case    0:*/		return 0x820BB940;
		  /* 820BB940h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB940h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BB960;  }
		/* 820BB940h case    1:*/		return 0x820BB944;
		  /* 820BB944h */ case    2:  		/* addi R11, R20, -4 */
		/* 820BB944h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0xFFFFFFFC);
		/* 820BB944h case    2:*/		return 0x820BB948;
		  /* 820BB948h */ case    3:  		/* mr R10, R29 */
		/* 820BB948h case    3:*/		regs.R10 = regs.R29;
		/* 820BB948h case    3:*/		return 0x820BB94C;
		  /* 820BB94Ch */ case    4:  		/* cmplwi CR0, R15, 0 */
		/* 820BB94Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R15,0x00000000);
		/* 820BB94Ch case    4:*/		return 0x820BB950;
		  /* 820BB950h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820BB950h case    5:*/		if ( regs.CR[0].eq ) { return 0x820BB960;  }
		/* 820BB950h case    5:*/		return 0x820BB954;
		  /* 820BB954h */ case    6:  		/* mtspr CTR, R15 */
		/* 820BB954h case    6:*/		regs.CTR = regs.R15;
		/* 820BB954h case    6:*/		return 0x820BB958;
		  /* 820BB958h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BB958h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BB958h case    7:*/		return 0x820BB95C;
		  /* 820BB95Ch */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820BB95Ch case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB958;  }
		/* 820BB95Ch case    8:*/		return 0x820BB960;
	}
	return 0x820BB960;
} // Block from 820BB93Ch-820BB960h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BB960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB960);
		  /* 820BB960h */ case    0:  		/* li R9, 0 */
		/* 820BB960h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BB960h case    0:*/		return 0x820BB964;
		  /* 820BB964h */ case    1:  		/* lwz R4, <#[R1 + 1724]> */
		/* 820BB964h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000006BC) );
		/* 820BB964h case    1:*/		return 0x820BB968;
		  /* 820BB968h */ case    2:  		/* mr R8, R26 */
		/* 820BB968h case    2:*/		regs.R8 = regs.R26;
		/* 820BB968h case    2:*/		return 0x820BB96C;
		  /* 820BB96Ch */ case    3:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BB96Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BB96Ch case    3:*/		return 0x820BB970;
		  /* 820BB970h */ case    4:  		/* mr R7, R23 */
		/* 820BB970h case    4:*/		regs.R7 = regs.R23;
		/* 820BB970h case    4:*/		return 0x820BB974;
		  /* 820BB974h */ case    5:  		/* mr R6, R20 */
		/* 820BB974h case    5:*/		regs.R6 = regs.R20;
		/* 820BB974h case    5:*/		return 0x820BB978;
		  /* 820BB978h */ case    6:  		/* oris R5, R24, 8256 */
		/* 820BB978h case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R24,0x2040);
		/* 820BB978h case    6:*/		return 0x820BB97C;
		  /* 820BB97Ch */ case    7:  		/* bl -44660 */
		/* 820BB97Ch case    7:*/		regs.LR = 0x820BB980; return 0x820B0B08;
		/* 820BB97Ch case    7:*/		return 0x820BB980;
		  /* 820BB980h */ case    8:  		/* or. R31, R3, R3 */
		/* 820BB980h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BB980h case    8:*/		return 0x820BB984;
		  /* 820BB984h */ case    9:  		/* bc 12, CR0_LT, 10836 */
		/* 820BB984h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BB984h case    9:*/		return 0x820BB988;
		  /* 820BB988h */ case   10:  		/* mr R4, R20 */
		/* 820BB988h case   10:*/		regs.R4 = regs.R20;
		/* 820BB988h case   10:*/		return 0x820BB98C;
	}
	return 0x820BB98C;
} // Block from 820BB960h-820BB98Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BB98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB98C);
		  /* 820BB98Ch */ case    0:  		/* mr R5, R17 */
		/* 820BB98Ch case    0:*/		regs.R5 = regs.R17;
		/* 820BB98Ch case    0:*/		return 0x820BB990;
		  /* 820BB990h */ case    1:  		/* mr R3, R23 */
		/* 820BB990h case    1:*/		regs.R3 = regs.R23;
		/* 820BB990h case    1:*/		return 0x820BB994;
		  /* 820BB994h */ case    2:  		/* bl -172004 */
		/* 820BB994h case    2:*/		regs.LR = 0x820BB998; return 0x820919B0;
		/* 820BB994h case    2:*/		return 0x820BB998;
		  /* 820BB998h */ case    3:  		/* addi R30, R30, 1 */
		/* 820BB998h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820BB998h case    3:*/		return 0x820BB99C;
		  /* 820BB99Ch */ case    4:  		/* cmplw CR6, R30, R16 */
		/* 820BB99Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R16);
		/* 820BB99Ch case    4:*/		return 0x820BB9A0;
		  /* 820BB9A0h */ case    5:  		/* bc 12, CR6_LT, -260 */
		/* 820BB9A0h case    5:*/		if ( regs.CR[6].lt ) { return 0x820BB89C;  }
		/* 820BB9A0h case    5:*/		return 0x820BB9A4;
	}
	return 0x820BB9A4;
} // Block from 820BB98Ch-820BB9A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BB9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB9A4);
		  /* 820BB9A4h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820BB9A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BB9A4h case    0:*/		return 0x820BB9A8;
		  /* 820BB9A8h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820BB9A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BB9C8;  }
		/* 820BB9A8h case    1:*/		return 0x820BB9AC;
		  /* 820BB9ACh */ case    2:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 820BB9ACh case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 820BB9ACh case    2:*/		return 0x820BB9B0;
		  /* 820BB9B0h */ case    3:  		/* mtspr CTR, R15 */
		/* 820BB9B0h case    3:*/		regs.CTR = regs.R15;
		/* 820BB9B0h case    3:*/		return 0x820BB9B4;
		  /* 820BB9B4h */ case    4:  		/* addi R10, R23, -4 */
		/* 820BB9B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0xFFFFFFFC);
		/* 820BB9B4h case    4:*/		return 0x820BB9B8;
		  /* 820BB9B8h */ case    5:  		/* subf R9, R11, R19 */
		/* 820BB9B8h case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R19);
		/* 820BB9B8h case    5:*/		return 0x820BB9BC;
		  /* 820BB9BCh */ case    6:  		/* lwzu R8, <#[R10 + 4]> */
		/* 820BB9BCh case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BB9BCh case    6:*/		return 0x820BB9C0;
		  /* 820BB9C0h */ case    7:  		/* stwux R8, <#[R9 + R11]> */
		/* 820BB9C0h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		regs.R9 = (uint32)(regs.R9 + regs.R11 + 0x00000000);
		/* 820BB9C0h case    7:*/		return 0x820BB9C4;
		  /* 820BB9C4h */ case    8:  		/* bc 16, CR0_LT, -8 */
		/* 820BB9C4h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BB9BC;  }
		/* 820BB9C4h case    8:*/		return 0x820BB9C8;
	}
	return 0x820BB9C8;
} // Block from 820BB9A4h-820BB9C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BB9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB9C8);
		  /* 820BB9C8h */ case    0:  		/* addi R21, R21, 1 */
		/* 820BB9C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 820BB9C8h case    0:*/		return 0x820BB9CC;
		  /* 820BB9CCh */ case    1:  		/* addi R19, R19, 4 */
		/* 820BB9CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 820BB9CCh case    1:*/		return 0x820BB9D0;
		  /* 820BB9D0h */ case    2:  		/* cmplw CR6, R21, R18 */
		/* 820BB9D0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R18);
		/* 820BB9D0h case    2:*/		return 0x820BB9D4;
		  /* 820BB9D4h */ case    3:  		/* bc 12, CR6_LT, -332 */
		/* 820BB9D4h case    3:*/		if ( regs.CR[6].lt ) { return 0x820BB888;  }
		/* 820BB9D4h case    3:*/		return 0x820BB9D8;
		  /* 820BB9D8h */ case    4:  		/* b -12300 */
		/* 820BB9D8h case    4:*/		return 0x820B89CC;
		/* 820BB9D8h case    4:*/		return 0x820BB9DC;
	}
	return 0x820BB9DC;
} // Block from 820BB9C8h-820BB9DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BB9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BB9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BB9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BB9DC);
		  /* 820BB9DCh */ case    0:  		/* mr R7, R18 */
		/* 820BB9DCh case    0:*/		regs.R7 = regs.R18;
		/* 820BB9DCh case    0:*/		return 0x820BB9E0;
		  /* 820BB9E0h */ case    1:  		/* lwz R5, <#[R29 + 16]> */
		/* 820BB9E0h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000010) );
		/* 820BB9E0h case    1:*/		return 0x820BB9E4;
		  /* 820BB9E4h */ case    2:  		/* mr R6, R16 */
		/* 820BB9E4h case    2:*/		regs.R6 = regs.R16;
		/* 820BB9E4h case    2:*/		return 0x820BB9E8;
		  /* 820BB9E8h */ case    3:  		/* mr R4, R28 */
		/* 820BB9E8h case    3:*/		regs.R4 = regs.R28;
		/* 820BB9E8h case    3:*/		return 0x820BB9EC;
		  /* 820BB9ECh */ case    4:  		/* bl -48252 */
		/* 820BB9ECh case    4:*/		regs.LR = 0x820BB9F0; return 0x820AFD70;
		/* 820BB9ECh case    4:*/		return 0x820BB9F0;
		  /* 820BB9F0h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820BB9F0h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BB9F0h case    5:*/		return 0x820BB9F4;
		  /* 820BB9F4h */ case    6:  		/* mr R3, R31 */
		/* 820BB9F4h case    6:*/		regs.R3 = regs.R31;
		/* 820BB9F4h case    6:*/		return 0x820BB9F8;
		  /* 820BB9F8h */ case    7:  		/* bc 12, CR0_EQ, 296 */
		/* 820BB9F8h case    7:*/		if ( regs.CR[0].eq ) { return 0x820BBB20;  }
		/* 820BB9F8h case    7:*/		return 0x820BB9FC;
		  /* 820BB9FCh */ case    8:  		/* mr R4, R26 */
		/* 820BB9FCh case    8:*/		regs.R4 = regs.R26;
		/* 820BB9FCh case    8:*/		return 0x820BBA00;
		  /* 820BBA00h */ case    9:  		/* bl -45840 */
		/* 820BBA00h case    9:*/		regs.LR = 0x820BBA04; return 0x820B06F0;
		/* 820BBA00h case    9:*/		return 0x820BBA04;
		  /* 820BBA04h */ case   10:  		/* or. R22, R3, R3 */
		/* 820BBA04h case   10:*/		cpu::op::or<1>(regs,&regs.R22,regs.R3,regs.R3);
		/* 820BBA04h case   10:*/		return 0x820BBA08;
		  /* 820BBA08h */ case   11:  		/* bc 12, CR0_EQ, 6680 */
		/* 820BBA08h case   11:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BBA08h case   11:*/		return 0x820BBA0C;
		  /* 820BBA0Ch */ case   12:  		/* cmplwi CR6, R16, 0 */
		/* 820BBA0Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820BBA0Ch case   12:*/		return 0x820BBA10;
		  /* 820BBA10h */ case   13:  		/* bc 12, CR6_EQ, 80 */
		/* 820BBA10h case   13:*/		if ( regs.CR[6].eq ) { return 0x820BBA60;  }
		/* 820BBA10h case   13:*/		return 0x820BBA14;
		  /* 820BBA14h */ case   14:  		/* li R8, 0 */
		/* 820BBA14h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BBA14h case   14:*/		return 0x820BBA18;
		  /* 820BBA18h */ case   15:  		/* mr R7, R22 */
		/* 820BBA18h case   15:*/		regs.R7 = regs.R22;
		/* 820BBA18h case   15:*/		return 0x820BBA1C;
		  /* 820BBA1Ch */ case   16:  		/* mr R6, R16 */
		/* 820BBA1Ch case   16:*/		regs.R6 = regs.R16;
		/* 820BBA1Ch case   16:*/		return 0x820BBA20;
		  /* 820BBA20h */ case   17:  		/* li R9, 0 */
		/* 820BBA20h case   17:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BBA20h case   17:*/		return 0x820BBA24;
		  /* 820BBA24h */ case   18:  		/* cmplwi CR6, R18, 0 */
		/* 820BBA24h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820BBA24h case   18:*/		return 0x820BBA28;
		  /* 820BBA28h */ case   19:  		/* bc 12, CR6_EQ, 40 */
		/* 820BBA28h case   19:*/		if ( regs.CR[6].eq ) { return 0x820BBA50;  }
		/* 820BBA28h case   19:*/		return 0x820BBA2C;
		  /* 820BBA2Ch */ case   20:  		/* rlwinm R10, R16, 2, 0, 29 */
		/* 820BBA2Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R16);
		/* 820BBA2Ch case   20:*/		return 0x820BBA30;
		  /* 820BBA30h */ case   21:  		/* mtspr CTR, R18 */
		/* 820BBA30h case   21:*/		regs.CTR = regs.R18;
		/* 820BBA30h case   21:*/		return 0x820BBA34;
		  /* 820BBA34h */ case   22:  		/* subf R11, R10, R7 */
		/* 820BBA34h case   22:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R7);
		/* 820BBA34h case   22:*/		return 0x820BBA38;
		  /* 820BBA38h */ case   23:  		/* add R5, R8, R9 */
		/* 820BBA38h case   23:*/		cpu::op::add<0>(regs,&regs.R5,regs.R8,regs.R9);
		/* 820BBA38h case   23:*/		return 0x820BBA3C;
		  /* 820BBA3Ch */ case   24:  		/* addi R9, R9, 1 */
		/* 820BBA3Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820BBA3Ch case   24:*/		return 0x820BBA40;
		  /* 820BBA40h */ case   25:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 820BBA40h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 820BBA40h case   25:*/		return 0x820BBA44;
		  /* 820BBA44h */ case   26:  		/* lwzx R5, <#[R5 + R28]> */
		/* 820BBA44h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R28 + 0x00000000) );
		/* 820BBA44h case   26:*/		return 0x820BBA48;
		  /* 820BBA48h */ case   27:  		/* stwux R5, <#[R11 + R10]> */
		/* 820BBA48h case   27:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		regs.R11 = (uint32)(regs.R11 + regs.R10 + 0x00000000);
		/* 820BBA48h case   27:*/		return 0x820BBA4C;
		  /* 820BBA4Ch */ case   28:  		/* bc 16, CR0_LT, -20 */
		/* 820BBA4Ch case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBA38;  }
		/* 820BBA4Ch case   28:*/		return 0x820BBA50;
	}
	return 0x820BBA50;
} // Block from 820BB9DCh-820BBA50h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BBA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBA50);
		  /* 820BBA50h */ case    0:  		/* addic. R6, R6, -1 */
		/* 820BBA50h case    0:*/		cpu::op::addic<1>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 820BBA50h case    0:*/		return 0x820BBA54;
		  /* 820BBA54h */ case    1:  		/* add R8, R8, R18 */
		/* 820BBA54h case    1:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R18);
		/* 820BBA54h case    1:*/		return 0x820BBA58;
		  /* 820BBA58h */ case    2:  		/* addi R7, R7, 4 */
		/* 820BBA58h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 820BBA58h case    2:*/		return 0x820BBA5C;
		  /* 820BBA5Ch */ case    3:  		/* bc 4, CR0_EQ, -60 */
		/* 820BBA5Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x820BBA20;  }
		/* 820BBA5Ch case    3:*/		return 0x820BBA60;
	}
	return 0x820BBA60;
} // Block from 820BBA50h-820BBA60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BBA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBA60);
		  /* 820BBA60h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BBA60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BBA60h case    0:*/		return 0x820BBA64;
		  /* 820BBA64h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 820BBA64h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BBA88;  }
		/* 820BBA64h case    1:*/		return 0x820BBA68;
		  /* 820BBA68h */ case    2:  		/* lwz R11, <#[R1 + 1732]> */
		/* 820BBA68h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000006C4) );
		/* 820BBA68h case    2:*/		return 0x820BBA6C;
		  /* 820BBA6Ch */ case    3:  		/* li R10, -1 */
		/* 820BBA6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BBA6Ch case    3:*/		return 0x820BBA70;
		  /* 820BBA70h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820BBA70h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BBA70h case    4:*/		return 0x820BBA74;
		  /* 820BBA74h */ case    5:  		/* addi R11, R11, -4 */
		/* 820BBA74h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 820BBA74h case    5:*/		return 0x820BBA78;
		  /* 820BBA78h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BBA78h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BBA88;  }
		/* 820BBA78h case    6:*/		return 0x820BBA7C;
		  /* 820BBA7Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820BBA7Ch case    7:*/		regs.CTR = regs.R30;
		/* 820BBA7Ch case    7:*/		return 0x820BBA80;
		  /* 820BBA80h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BBA80h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BBA80h case    8:*/		return 0x820BBA84;
		  /* 820BBA84h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BBA84h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBA80;  }
		/* 820BBA84h case    9:*/		return 0x820BBA88;
	}
	return 0x820BBA88;
} // Block from 820BBA60h-820BBA88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BBA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBA88);
		  /* 820BBA88h */ case    0:  		/* li R24, 0 */
		/* 820BBA88h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820BBA88h case    0:*/		return 0x820BBA8C;
		  /* 820BBA8Ch */ case    1:  		/* cmplwi CR6, R15, 0 */
		/* 820BBA8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BBA8Ch case    1:*/		return 0x820BBA90;
		  /* 820BBA90h */ case    2:  		/* bc 12, CR6_EQ, -12484 */
		/* 820BBA90h case    2:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BBA90h case    2:*/		return 0x820BBA94;
		  /* 820BBA94h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBA94h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBA94h case    3:*/		return 0x820BBA98;
		  /* 820BBA98h */ case    4:  		/* li R27, 0 */
		/* 820BBA98h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820BBA98h case    4:*/		return 0x820BBA9C;
		  /* 820BBA9Ch */ case    5:  		/* mr R28, R14 */
		/* 820BBA9Ch case    5:*/		regs.R28 = regs.R14;
		/* 820BBA9Ch case    5:*/		return 0x820BBAA0;
		  /* 820BBAA0h */ case    6:  		/* rlwinm R23, R11, 2, 0, 29 */
		/* 820BBAA0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R11);
		/* 820BBAA0h case    6:*/		return 0x820BBAA4;
		  /* 820BBAA4h */ case    7:  		/* li R29, 0 */
		/* 820BBAA4h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820BBAA4h case    7:*/		return 0x820BBAA8;
		  /* 820BBAA8h */ case    8:  		/* cmplwi CR6, R18, 0 */
		/* 820BBAA8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820BBAA8h case    8:*/		return 0x820BBAAC;
		  /* 820BBAACh */ case    9:  		/* bc 12, CR6_EQ, 92 */
		/* 820BBAACh case    9:*/		if ( regs.CR[6].eq ) { return 0x820BBB08;  }
		/* 820BBAACh case    9:*/		return 0x820BBAB0;
		  /* 820BBAB0h */ case   10:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBAB0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBAB0h case   10:*/		return 0x820BBAB4;
		  /* 820BBAB4h */ case   11:  		/* rlwinm R25, R16, 2, 0, 29 */
		/* 820BBAB4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R16);
		/* 820BBAB4h case   11:*/		return 0x820BBAB8;
		  /* 820BBAB8h */ case   12:  		/* mr R30, R22 */
		/* 820BBAB8h case   12:*/		regs.R30 = regs.R22;
		/* 820BBAB8h case   12:*/		return 0x820BBABC;
		  /* 820BBABCh */ case   13:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 820BBABCh case   13:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 820BBABCh case   13:*/		return 0x820BBAC0;
		  /* 820BBAC0h */ case   14:  		/* oris R26, R11, 20480 */
		/* 820BBAC0h case   14:*/		cpu::op::oris<0>(regs,&regs.R26,regs.R11,0x5000);
		/* 820BBAC0h case   14:*/		return 0x820BBAC4;
		  /* 820BBAC4h */ case   15:  		/* add R11, R27, R29 */
		/* 820BBAC4h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R27,regs.R29);
		/* 820BBAC4h case   15:*/		return 0x820BBAC8;
		  /* 820BBAC8h */ case   16:  		/* lwz R10, <#[R1 + 1732]> */
		/* 820BBAC8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000006C4) );
		/* 820BBAC8h case   16:*/		return 0x820BBACC;
		  /* 820BBACCh */ case   17:  		/* li R9, 0 */
		/* 820BBACCh case   17:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BBACCh case   17:*/		return 0x820BBAD0;
		  /* 820BBAD0h */ case   18:  		/* lwz R4, <#[R1 + 1724]> */
		/* 820BBAD0h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000006BC) );
		/* 820BBAD0h case   18:*/		return 0x820BBAD4;
		  /* 820BBAD4h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BBAD4h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BBAD4h case   19:*/		return 0x820BBAD8;
		  /* 820BBAD8h */ case   20:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BBAD8h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BBAD8h case   20:*/		return 0x820BBADC;
		  /* 820BBADCh */ case   21:  		/* mr R8, R30 */
		/* 820BBADCh case   21:*/		regs.R8 = regs.R30;
		/* 820BBADCh case   21:*/		return 0x820BBAE0;
		  /* 820BBAE0h */ case   22:  		/* mr R7, R28 */
		/* 820BBAE0h case   22:*/		regs.R7 = regs.R28;
		/* 820BBAE0h case   22:*/		return 0x820BBAE4;
		  /* 820BBAE4h */ case   23:  		/* add R6, R11, R10 */
		/* 820BBAE4h case   23:*/		cpu::op::add<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 820BBAE4h case   23:*/		return 0x820BBAE8;
		  /* 820BBAE8h */ case   24:  		/* mr R5, R26 */
		/* 820BBAE8h case   24:*/		regs.R5 = regs.R26;
		/* 820BBAE8h case   24:*/		return 0x820BBAEC;
		  /* 820BBAECh */ case   25:  		/* bl -45028 */
		/* 820BBAECh case   25:*/		regs.LR = 0x820BBAF0; return 0x820B0B08;
		/* 820BBAECh case   25:*/		return 0x820BBAF0;
		  /* 820BBAF0h */ case   26:  		/* or. R31, R3, R3 */
		/* 820BBAF0h case   26:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBAF0h case   26:*/		return 0x820BBAF4;
		  /* 820BBAF4h */ case   27:  		/* bc 12, CR0_LT, 10468 */
		/* 820BBAF4h case   27:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBAF4h case   27:*/		return 0x820BBAF8;
		  /* 820BBAF8h */ case   28:  		/* addi R29, R29, 1 */
		/* 820BBAF8h case   28:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820BBAF8h case   28:*/		return 0x820BBAFC;
		  /* 820BBAFCh */ case   29:  		/* add R30, R30, R25 */
		/* 820BBAFCh case   29:*/		cpu::op::add<0>(regs,&regs.R30,regs.R30,regs.R25);
		/* 820BBAFCh case   29:*/		return 0x820BBB00;
		  /* 820BBB00h */ case   30:  		/* cmplw CR6, R29, R18 */
		/* 820BBB00h case   30:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R18);
		/* 820BBB00h case   30:*/		return 0x820BBB04;
		  /* 820BBB04h */ case   31:  		/* bc 12, CR6_LT, -64 */
		/* 820BBB04h case   31:*/		if ( regs.CR[6].lt ) { return 0x820BBAC4;  }
		/* 820BBB04h case   31:*/		return 0x820BBB08;
	}
	return 0x820BBB08;
} // Block from 820BBA88h-820BBB08h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820BBB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBB08);
		  /* 820BBB08h */ case    0:  		/* addi R24, R24, 1 */
		/* 820BBB08h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 820BBB08h case    0:*/		return 0x820BBB0C;
		  /* 820BBB0Ch */ case    1:  		/* add R28, R28, R23 */
		/* 820BBB0Ch case    1:*/		cpu::op::add<0>(regs,&regs.R28,regs.R28,regs.R23);
		/* 820BBB0Ch case    1:*/		return 0x820BBB10;
		  /* 820BBB10h */ case    2:  		/* add R27, R27, R18 */
		/* 820BBB10h case    2:*/		cpu::op::add<0>(regs,&regs.R27,regs.R27,regs.R18);
		/* 820BBB10h case    2:*/		return 0x820BBB14;
		  /* 820BBB14h */ case    3:  		/* cmplw CR6, R24, R15 */
		/* 820BBB14h case    3:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R15);
		/* 820BBB14h case    3:*/		return 0x820BBB18;
		  /* 820BBB18h */ case    4:  		/* bc 12, CR6_LT, -116 */
		/* 820BBB18h case    4:*/		if ( regs.CR[6].lt ) { return 0x820BBAA4;  }
		/* 820BBB18h case    4:*/		return 0x820BBB1C;
		  /* 820BBB1Ch */ case    5:  		/* b -12624 */
		/* 820BBB1Ch case    5:*/		return 0x820B89CC;
		/* 820BBB1Ch case    5:*/		return 0x820BBB20;
	}
	return 0x820BBB20;
} // Block from 820BBB08h-820BBB20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BBB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBB20);
		  /* 820BBB20h */ case    0:  		/* mulli R4, R18, 5 */
		/* 820BBB20h case    0:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R18,0x5);
		/* 820BBB20h case    0:*/		return 0x820BBB24;
		  /* 820BBB24h */ case    1:  		/* bl -46132 */
		/* 820BBB24h case    1:*/		regs.LR = 0x820BBB28; return 0x820B06F0;
		/* 820BBB24h case    1:*/		return 0x820BBB28;
		  /* 820BBB28h */ case    2:  		/* or. R11, R3, R3 */
		/* 820BBB28h case    2:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BBB28h case    2:*/		return 0x820BBB2C;
		  /* 820BBB2Ch */ case    3:  		/* bc 12, CR0_EQ, 6388 */
		/* 820BBB2Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BBB2Ch case    3:*/		return 0x820BBB30;
		  /* 820BBB30h */ case    4:  		/* li R10, 5 */
		/* 820BBB30h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x5);
		/* 820BBB30h case    4:*/		return 0x820BBB34;
		  /* 820BBB34h */ case    5:  		/* addi R9, R1, 156 */
		/* 820BBB34h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x9C);
		/* 820BBB34h case    5:*/		return 0x820BBB38;
		  /* 820BBB38h */ case    6:  		/* rlwinm R16, R18, 2, 0, 29 */
		/* 820BBB38h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R16,regs.R18);
		/* 820BBB38h case    6:*/		return 0x820BBB3C;
		  /* 820BBB3Ch */ case    7:  		/* mtspr CTR, R10 */
		/* 820BBB3Ch case    7:*/		regs.CTR = regs.R10;
		/* 820BBB3Ch case    7:*/		return 0x820BBB40;
		  /* 820BBB40h */ case    8:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BBB40h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BBB40h case    8:*/		return 0x820BBB44;
		  /* 820BBB44h */ case    9:  		/* add R11, R16, R11 */
		/* 820BBB44h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R16,regs.R11);
		/* 820BBB44h case    9:*/		return 0x820BBB48;
		  /* 820BBB48h */ case   10:  		/* bc 16, CR0_LT, -8 */
		/* 820BBB48h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBB40;  }
		/* 820BBB48h case   10:*/		return 0x820BBB4C;
		  /* 820BBB4Ch */ case   11:  		/* li R17, 0 */
		/* 820BBB4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 820BBB4Ch case   11:*/		return 0x820BBB50;
		  /* 820BBB50h */ case   12:  		/* cmplwi CR6, R15, 0 */
		/* 820BBB50h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BBB50h case   12:*/		return 0x820BBB54;
		  /* 820BBB54h */ case   13:  		/* bc 12, CR6_EQ, -12680 */
		/* 820BBB54h case   13:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BBB54h case   13:*/		return 0x820BBB58;
		  /* 820BBB58h */ case   14:  		/* lwz R20, <#[R1 + 176]> */
		/* 820BBB58h case   14:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BBB58h case   14:*/		return 0x820BBB5C;
		  /* 820BBB5Ch */ case   15:  		/* li R19, 0 */
		/* 820BBB5Ch case   15:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 820BBB5Ch case   15:*/		return 0x820BBB60;
		  /* 820BBB60h */ case   16:  		/* lwz R27, <#[R1 + 172]> */
		/* 820BBB60h case   16:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BBB60h case   16:*/		return 0x820BBB64;
		  /* 820BBB64h */ case   17:  		/* li R23, 0 */
		/* 820BBB64h case   17:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 820BBB64h case   17:*/		return 0x820BBB68;
		  /* 820BBB68h */ case   18:  		/* lwz R22, <#[R1 + 168]> */
		/* 820BBB68h case   18:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BBB68h case   18:*/		return 0x820BBB6C;
		  /* 820BBB6Ch */ case   19:  		/* li R29, -1 */
		/* 820BBB6Ch case   19:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BBB6Ch case   19:*/		return 0x820BBB70;
		  /* 820BBB70h */ case   20:  		/* lwz R25, <#[R1 + 164]> */
		/* 820BBB70h case   20:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BBB70h case   20:*/		return 0x820BBB74;
		  /* 820BBB74h */ case   21:  		/* lwz R21, <#[R1 + 160]> */
		/* 820BBB74h case   21:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BBB74h case   21:*/		return 0x820BBB78;
		  /* 820BBB78h */ case   22:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBB78h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBB78h case   22:*/		return 0x820BBB7C;
		  /* 820BBB7Ch */ case   23:  		/* li R30, 0 */
		/* 820BBB7Ch case   23:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820BBB7Ch case   23:*/		return 0x820BBB80;
		  /* 820BBB80h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 820BBB80h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBB80h case   24:*/		return 0x820BBB84;
		  /* 820BBB84h */ case   25:  		/* bc 12, CR6_EQ, 276 */
		/* 820BBB84h case   25:*/		if ( regs.CR[6].eq ) { return 0x820BBC98;  }
		/* 820BBB84h case   25:*/		return 0x820BBB88;
		  /* 820BBB88h */ case   26:  		/* rlwinm R26, R18, 0, 12, 31 */
		/* 820BBB88h case   26:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R26,regs.R18);
		/* 820BBB88h case   26:*/		return 0x820BBB8C;
		  /* 820BBB8Ch */ case   27:  		/* oris R24, R26, 8272 */
		/* 820BBB8Ch case   27:*/		cpu::op::oris<0>(regs,&regs.R24,regs.R26,0x2050);
		/* 820BBB8Ch case   27:*/		return 0x820BBB90;
		  /* 820BBB90h */ case   28:  		/* li R7, 0 */
		/* 820BBB90h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820BBB90h case   28:*/		return 0x820BBB94;
		  /* 820BBB94h */ case   29:  		/* cmplwi CR6, R18, 0 */
		/* 820BBB94h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820BBB94h case   29:*/		return 0x820BBB98;
		  /* 820BBB98h */ case   30:  		/* bc 12, CR6_EQ, 92 */
		/* 820BBB98h case   30:*/		if ( regs.CR[6].eq ) { return 0x820BBBF4;  }
		/* 820BBB98h case   30:*/		return 0x820BBB9C;
		  /* 820BBB9Ch */ case   31:  		/* add R11, R23, R30 */
		/* 820BBB9Ch case   31:*/		cpu::op::add<0>(regs,&regs.R11,regs.R23,regs.R30);
		/* 820BBB9Ch case   31:*/		return 0x820BBBA0;
		  /* 820BBBA0h */ case   32:  		/* mtspr CTR, R18 */
		/* 820BBBA0h case   32:*/		regs.CTR = regs.R18;
		/* 820BBBA0h case   32:*/		return 0x820BBBA4;
		  /* 820BBBA4h */ case   33:  		/* mullw R10, R30, R18 */
		/* 820BBBA4h case   33:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R30,regs.R18);
		/* 820BBBA4h case   33:*/		return 0x820BBBA8;
		  /* 820BBBA8h */ case   34:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 820BBBA8h case   34:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 820BBBA8h case   34:*/		return 0x820BBBAC;
		  /* 820BBBACh */ case   35:  		/* mr R11, R25 */
		/* 820BBBACh case   35:*/		regs.R11 = regs.R25;
		/* 820BBBACh case   35:*/		return 0x820BBBB0;
		  /* 820BBBB0h */ case   36:  		/* subf R9, R25, R21 */
		/* 820BBBB0h case   36:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R25,regs.R21);
		/* 820BBBB0h case   36:*/		return 0x820BBBB4;
		  /* 820BBBB4h */ case   37:  		/* lwzx R6, <#[R8 + R14]> */
		/* 820BBBB4h case   37:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + regs.R14 + 0x00000000) );
		/* 820BBBB4h case   37:*/		return 0x820BBBB8;
		  /* 820BBBB8h */ case   38:  		/* add R5, R10, R7 */
		/* 820BBBB8h case   38:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R7);
		/* 820BBBB8h case   38:*/		return 0x820BBBBC;
		  /* 820BBBBCh */ case   39:  		/* addi R7, R7, 1 */
		/* 820BBBBCh case   39:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820BBBBCh case   39:*/		return 0x820BBBC0;
		  /* 820BBBC0h */ case   40:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 820BBBC0h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 820BBBC0h case   40:*/		return 0x820BBBC4;
		  /* 820BBBC4h */ case   41:  		/* stwx R6, <#[R9 + R11]> */
		/* 820BBBC4h case   41:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820BBBC4h case   41:*/		return 0x820BBBC8;
		  /* 820BBBC8h */ case   42:  		/* lwzx R6, <#[R5 + R28]> */
		/* 820BBBC8h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R28 + 0x00000000) );
		/* 820BBBC8h case   42:*/		return 0x820BBBCC;
		  /* 820BBBCCh */ case   43:  		/* stw R6, <#[R11]> */
		/* 820BBBCCh case   43:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 820BBBCCh case   43:*/		return 0x820BBBD0;
		  /* 820BBBD0h */ case   44:  		/* addi R11, R11, 4 */
		/* 820BBBD0h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BBBD0h case   44:*/		return 0x820BBBD4;
		  /* 820BBBD4h */ case   45:  		/* bc 16, CR0_LT, -32 */
		/* 820BBBD4h case   45:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBBB4;  }
		/* 820BBBD4h case   45:*/		return 0x820BBBD8;
		  /* 820BBBD8h */ case   46:  		/* addi R11, R27, -4 */
		/* 820BBBD8h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BBBD8h case   46:*/		return 0x820BBBDC;
		  /* 820BBBDCh */ case   47:  		/* mr R10, R29 */
		/* 820BBBDCh case   47:*/		regs.R10 = regs.R29;
		/* 820BBBDCh case   47:*/		return 0x820BBBE0;
		  /* 820BBBE0h */ case   48:  		/* cmplwi CR0, R18, 0 */
		/* 820BBBE0h case   48:*/		cpu::op::cmplwi<0>(regs,regs.R18,0x00000000);
		/* 820BBBE0h case   48:*/		return 0x820BBBE4;
		  /* 820BBBE4h */ case   49:  		/* bc 12, CR0_EQ, 16 */
		/* 820BBBE4h case   49:*/		if ( regs.CR[0].eq ) { return 0x820BBBF4;  }
		/* 820BBBE4h case   49:*/		return 0x820BBBE8;
		  /* 820BBBE8h */ case   50:  		/* mtspr CTR, R18 */
		/* 820BBBE8h case   50:*/		regs.CTR = regs.R18;
		/* 820BBBE8h case   50:*/		return 0x820BBBEC;
		  /* 820BBBECh */ case   51:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BBBECh case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BBBECh case   51:*/		return 0x820BBBF0;
		  /* 820BBBF0h */ case   52:  		/* bc 16, CR0_LT, -4 */
		/* 820BBBF0h case   52:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBBEC;  }
		/* 820BBBF0h case   52:*/		return 0x820BBBF4;
	}
	return 0x820BBBF4;
} // Block from 820BBB20h-820BBBF4h (53 instructions)

//////////////////////////////////////////////////////
// Block at 820BBBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBBF4);
		  /* 820BBBF4h */ case    0:  		/* li R9, 0 */
		/* 820BBBF4h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BBBF4h case    0:*/		return 0x820BBBF8;
		  /* 820BBBF8h */ case    1:  		/* lwz R4, <#[R1 + 1724]> */
		/* 820BBBF8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000006BC) );
		/* 820BBBF8h case    1:*/		return 0x820BBBFC;
		  /* 820BBBFCh */ case    2:  		/* mr R8, R25 */
		/* 820BBBFCh case    2:*/		regs.R8 = regs.R25;
		/* 820BBBFCh case    2:*/		return 0x820BBC00;
		  /* 820BBC00h */ case    3:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BBC00h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BBC00h case    3:*/		return 0x820BBC04;
		  /* 820BBC04h */ case    4:  		/* mr R7, R21 */
		/* 820BBC04h case    4:*/		regs.R7 = regs.R21;
		/* 820BBC04h case    4:*/		return 0x820BBC08;
		  /* 820BBC08h */ case    5:  		/* mr R6, R27 */
		/* 820BBC08h case    5:*/		regs.R6 = regs.R27;
		/* 820BBC08h case    5:*/		return 0x820BBC0C;
		  /* 820BBC0Ch */ case    6:  		/* mr R5, R24 */
		/* 820BBC0Ch case    6:*/		regs.R5 = regs.R24;
		/* 820BBC0Ch case    6:*/		return 0x820BBC10;
		  /* 820BBC10h */ case    7:  		/* bl -45320 */
		/* 820BBC10h case    7:*/		regs.LR = 0x820BBC14; return 0x820B0B08;
		/* 820BBC10h case    7:*/		return 0x820BBC14;
		  /* 820BBC14h */ case    8:  		/* or. R31, R3, R3 */
		/* 820BBC14h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBC14h case    8:*/		return 0x820BBC18;
		  /* 820BBC18h */ case    9:  		/* bc 12, CR0_LT, 10176 */
		/* 820BBC18h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBC18h case    9:*/		return 0x820BBC1C;
		  /* 820BBC1Ch */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 820BBC1Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BBC1Ch case   10:*/		return 0x820BBC20;
		  /* 820BBC20h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 820BBC20h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820BBC2C;  }
		/* 820BBC20h case   11:*/		return 0x820BBC24;
		  /* 820BBC24h */ case   12:  		/* mr R4, R27 */
		/* 820BBC24h case   12:*/		regs.R4 = regs.R27;
		/* 820BBC24h case   12:*/		return 0x820BBC28;
		  /* 820BBC28h */ case   13:  		/* b 84 */
		/* 820BBC28h case   13:*/		return 0x820BBC7C;
		/* 820BBC28h case   13:*/		return 0x820BBC2C;
	}
	return 0x820BBC2C;
} // Block from 820BBBF4h-820BBC2Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 820BBC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBC2C);
		  /* 820BBC2Ch */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 820BBC2Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820BBC2Ch case    0:*/		return 0x820BBC30;
		  /* 820BBC30h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820BBC30h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BBC50;  }
		/* 820BBC30h case    1:*/		return 0x820BBC34;
		  /* 820BBC34h */ case    2:  		/* addi R11, R20, -4 */
		/* 820BBC34h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0xFFFFFFFC);
		/* 820BBC34h case    2:*/		return 0x820BBC38;
		  /* 820BBC38h */ case    3:  		/* mr R10, R29 */
		/* 820BBC38h case    3:*/		regs.R10 = regs.R29;
		/* 820BBC38h case    3:*/		return 0x820BBC3C;
		  /* 820BBC3Ch */ case    4:  		/* cmplwi CR0, R18, 0 */
		/* 820BBC3Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R18,0x00000000);
		/* 820BBC3Ch case    4:*/		return 0x820BBC40;
		  /* 820BBC40h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820BBC40h case    5:*/		if ( regs.CR[0].eq ) { return 0x820BBC50;  }
		/* 820BBC40h case    5:*/		return 0x820BBC44;
		  /* 820BBC44h */ case    6:  		/* mtspr CTR, R18 */
		/* 820BBC44h case    6:*/		regs.CTR = regs.R18;
		/* 820BBC44h case    6:*/		return 0x820BBC48;
		  /* 820BBC48h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BBC48h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BBC48h case    7:*/		return 0x820BBC4C;
		  /* 820BBC4Ch */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820BBC4Ch case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBC48;  }
		/* 820BBC4Ch case    8:*/		return 0x820BBC50;
	}
	return 0x820BBC50;
} // Block from 820BBC2Ch-820BBC50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BBC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBC50);
		  /* 820BBC50h */ case    0:  		/* li R9, 0 */
		/* 820BBC50h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BBC50h case    0:*/		return 0x820BBC54;
		  /* 820BBC54h */ case    1:  		/* lwz R4, <#[R1 + 1724]> */
		/* 820BBC54h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000006BC) );
		/* 820BBC54h case    1:*/		return 0x820BBC58;
		  /* 820BBC58h */ case    2:  		/* mr R8, R27 */
		/* 820BBC58h case    2:*/		regs.R8 = regs.R27;
		/* 820BBC58h case    2:*/		return 0x820BBC5C;
		  /* 820BBC5Ch */ case    3:  		/* lwz R3, <#[R1 + 1716]> */
		/* 820BBC5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BBC5Ch case    3:*/		return 0x820BBC60;
		  /* 820BBC60h */ case    4:  		/* mr R7, R22 */
		/* 820BBC60h case    4:*/		regs.R7 = regs.R22;
		/* 820BBC60h case    4:*/		return 0x820BBC64;
		  /* 820BBC64h */ case    5:  		/* mr R6, R20 */
		/* 820BBC64h case    5:*/		regs.R6 = regs.R20;
		/* 820BBC64h case    5:*/		return 0x820BBC68;
		  /* 820BBC68h */ case    6:  		/* oris R5, R26, 8256 */
		/* 820BBC68h case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R26,0x2040);
		/* 820BBC68h case    6:*/		return 0x820BBC6C;
		  /* 820BBC6Ch */ case    7:  		/* bl -45412 */
		/* 820BBC6Ch case    7:*/		regs.LR = 0x820BBC70; return 0x820B0B08;
		/* 820BBC6Ch case    7:*/		return 0x820BBC70;
		  /* 820BBC70h */ case    8:  		/* or. R31, R3, R3 */
		/* 820BBC70h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBC70h case    8:*/		return 0x820BBC74;
		  /* 820BBC74h */ case    9:  		/* bc 12, CR0_LT, 10084 */
		/* 820BBC74h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBC74h case    9:*/		return 0x820BBC78;
		  /* 820BBC78h */ case   10:  		/* mr R4, R20 */
		/* 820BBC78h case   10:*/		regs.R4 = regs.R20;
		/* 820BBC78h case   10:*/		return 0x820BBC7C;
	}
	return 0x820BBC7C;
} // Block from 820BBC50h-820BBC7Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BBC7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBC7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBC7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBC7C);
		  /* 820BBC7Ch */ case    0:  		/* mr R5, R16 */
		/* 820BBC7Ch case    0:*/		regs.R5 = regs.R16;
		/* 820BBC7Ch case    0:*/		return 0x820BBC80;
		  /* 820BBC80h */ case    1:  		/* mr R3, R22 */
		/* 820BBC80h case    1:*/		regs.R3 = regs.R22;
		/* 820BBC80h case    1:*/		return 0x820BBC84;
		  /* 820BBC84h */ case    2:  		/* bl -172756 */
		/* 820BBC84h case    2:*/		regs.LR = 0x820BBC88; return 0x820919B0;
		/* 820BBC84h case    2:*/		return 0x820BBC88;
		  /* 820BBC88h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBC88h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBC88h case    3:*/		return 0x820BBC8C;
		  /* 820BBC8Ch */ case    4:  		/* addi R30, R30, 1 */
		/* 820BBC8Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820BBC8Ch case    4:*/		return 0x820BBC90;
		  /* 820BBC90h */ case    5:  		/* cmplw CR6, R30, R11 */
		/* 820BBC90h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 820BBC90h case    5:*/		return 0x820BBC94;
		  /* 820BBC94h */ case    6:  		/* bc 12, CR6_LT, -260 */
		/* 820BBC94h case    6:*/		if ( regs.CR[6].lt ) { return 0x820BBB90;  }
		/* 820BBC94h case    6:*/		return 0x820BBC98;
	}
	return 0x820BBC98;
} // Block from 820BBC7Ch-820BBC98h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BBC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBC98);
		  /* 820BBC98h */ case    0:  		/* li R11, 0 */
		/* 820BBC98h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820BBC98h case    0:*/		return 0x820BBC9C;
		  /* 820BBC9Ch */ case    1:  		/* cmplwi CR6, R18, 0 */
		/* 820BBC9Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 820BBC9Ch case    1:*/		return 0x820BBCA0;
		  /* 820BBCA0h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 820BBCA0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BBCC8;  }
		/* 820BBCA0h case    2:*/		return 0x820BBCA4;
		  /* 820BBCA4h */ case    3:  		/* addi R10, R22, -4 */
		/* 820BBCA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0xFFFFFFFC);
		/* 820BBCA4h case    3:*/		return 0x820BBCA8;
		  /* 820BBCA8h */ case    4:  		/* mtspr CTR, R18 */
		/* 820BBCA8h case    4:*/		regs.CTR = regs.R18;
		/* 820BBCA8h case    4:*/		return 0x820BBCAC;
		  /* 820BBCACh */ case    5:  		/* add R8, R19, R11 */
		/* 820BBCACh case    5:*/		cpu::op::add<0>(regs,&regs.R8,regs.R19,regs.R11);
		/* 820BBCACh case    5:*/		return 0x820BBCB0;
		  /* 820BBCB0h */ case    6:  		/* lwzu R9, <#[R10 + 4]> */
		/* 820BBCB0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BBCB0h case    6:*/		return 0x820BBCB4;
		  /* 820BBCB4h */ case    7:  		/* lwz R7, <#[R1 + 1732]> */
		/* 820BBCB4h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000006C4) );
		/* 820BBCB4h case    7:*/		return 0x820BBCB8;
		  /* 820BBCB8h */ case    8:  		/* addi R11, R11, 1 */
		/* 820BBCB8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820BBCB8h case    8:*/		return 0x820BBCBC;
		  /* 820BBCBCh */ case    9:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820BBCBCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820BBCBCh case    9:*/		return 0x820BBCC0;
		  /* 820BBCC0h */ case   10:  		/* stwx R9, <#[R8 + R7]> */
		/* 820BBCC0h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820BBCC0h case   10:*/		return 0x820BBCC4;
		  /* 820BBCC4h */ case   11:  		/* bc 16, CR0_LT, -24 */
		/* 820BBCC4h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBCAC;  }
		/* 820BBCC4h case   11:*/		return 0x820BBCC8;
	}
	return 0x820BBCC8;
} // Block from 820BBC98h-820BBCC8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820BBCC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBCC8);
		  /* 820BBCC8h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBCC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBCC8h case    0:*/		return 0x820BBCCC;
		  /* 820BBCCCh */ case    1:  		/* addi R17, R17, 1 */
		/* 820BBCCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 820BBCCCh case    1:*/		return 0x820BBCD0;
		  /* 820BBCD0h */ case    2:  		/* add R19, R19, R18 */
		/* 820BBCD0h case    2:*/		cpu::op::add<0>(regs,&regs.R19,regs.R19,regs.R18);
		/* 820BBCD0h case    2:*/		return 0x820BBCD4;
		  /* 820BBCD4h */ case    3:  		/* add R23, R23, R11 */
		/* 820BBCD4h case    3:*/		cpu::op::add<0>(regs,&regs.R23,regs.R23,regs.R11);
		/* 820BBCD4h case    3:*/		return 0x820BBCD8;
		  /* 820BBCD8h */ case    4:  		/* cmplw CR6, R17, R15 */
		/* 820BBCD8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R15);
		/* 820BBCD8h case    4:*/		return 0x820BBCDC;
		  /* 820BBCDCh */ case    5:  		/* bc 12, CR6_LT, -356 */
		/* 820BBCDCh case    5:*/		if ( regs.CR[6].lt ) { return 0x820BBB78;  }
		/* 820BBCDCh case    5:*/		return 0x820BBCE0;
		  /* 820BBCE0h */ case    6:  		/* b -13076 */
		/* 820BBCE0h case    6:*/		return 0x820B89CC;
		/* 820BBCE0h case    6:*/		return 0x820BBCE4;
		  /* 820BBCE4h */ case    7:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBCE4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBCE4h case    7:*/		return 0x820BBCE8;
		  /* 820BBCE8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BBCE8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBCE8h case    8:*/		return 0x820BBCEC;
		  /* 820BBCECh */ case    9:  		/* bc 12, CR6_EQ, 9956 */
		/* 820BBCECh case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BBCECh case    9:*/		return 0x820BBCF0;
		  /* 820BBCF0h */ case   10:  		/* cmplwi CR6, R15, 0 */
		/* 820BBCF0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BBCF0h case   10:*/		return 0x820BBCF4;
		  /* 820BBCF4h */ case   11:  		/* bc 12, CR6_EQ, -13096 */
		/* 820BBCF4h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BBCF4h case   11:*/		return 0x820BBCF8;
		  /* 820BBCF8h */ case   12:  		/* lwz R5, <#[R1 + 160]> */
		/* 820BBCF8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BBCF8h case   12:*/		return 0x820BBCFC;
		  /* 820BBCFCh */ case   13:  		/* li R11, -1 */
		/* 820BBCFCh case   13:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820BBCFCh case   13:*/		return 0x820BBD00;
		  /* 820BBD00h */ case   14:  		/* li R10, 641 */
		/* 820BBD00h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x281);
		/* 820BBD00h case   14:*/		return 0x820BBD04;
		  /* 820BBD04h */ case   15:  		/* stw R11, <#[R15]> */
		/* 820BBD04h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 820BBD04h case   15:*/		return 0x820BBD08;
		  /* 820BBD08h */ case   16:  		/* li R9, 16 */
		/* 820BBD08h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x10);
		/* 820BBD08h case   16:*/		return 0x820BBD0C;
		  /* 820BBD0Ch */ case   17:  		/* rlwimi R5, R10, 21, 0, 11 */
		/* 820BBD0Ch case   17:*/		cpu::op::rlwimi<0,21,0,11>(regs,&regs.R5,regs.R10);
		/* 820BBD0Ch case   17:*/		return 0x820BBD10;
		  /* 820BBD10h */ case   18:  		/* b -13420 */
		/* 820BBD10h case   18:*/		return 0x820B88A4;
		/* 820BBD10h case   18:*/		return 0x820BBD14;
		  /* 820BBD14h */ case   19:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBD14h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBD14h case   19:*/		return 0x820BBD18;
		  /* 820BBD18h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 820BBD18h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBD18h case   20:*/		return 0x820BBD1C;
		  /* 820BBD1Ch */ case   21:  		/* bc 12, CR6_EQ, 9908 */
		/* 820BBD1Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BBD1Ch case   21:*/		return 0x820BBD20;
		  /* 820BBD20h */ case   22:  		/* cmplwi CR6, R15, 0 */
		/* 820BBD20h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BBD20h case   22:*/		return 0x820BBD24;
		  /* 820BBD24h */ case   23:  		/* bc 12, CR6_EQ, -13144 */
		/* 820BBD24h case   23:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BBD24h case   23:*/		return 0x820BBD28;
		  /* 820BBD28h */ case   24:  		/* cmplwi CR6, R30, 1 */
		/* 820BBD28h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 820BBD28h case   24:*/		return 0x820BBD2C;
		  /* 820BBD2Ch */ case   25:  		/* mr R3, R14 */
		/* 820BBD2Ch case   25:*/		regs.R3 = regs.R14;
		/* 820BBD2Ch case   25:*/		return 0x820BBD30;
		  /* 820BBD30h */ case   26:  		/* bc 4, CR6_EQ, 296 */
		/* 820BBD30h case   26:*/		if ( !regs.CR[6].eq ) { return 0x820BBE58;  }
		/* 820BBD30h case   26:*/		return 0x820BBD34;
		  /* 820BBD34h */ case   27:  		/* li R4, 4 */
		/* 820BBD34h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 820BBD34h case   27:*/		return 0x820BBD38;
		  /* 820BBD38h */ case   28:  		/* bl -46664 */
		/* 820BBD38h case   28:*/		regs.LR = 0x820BBD3C; return 0x820B06F0;
		/* 820BBD38h case   28:*/		return 0x820BBD3C;
		  /* 820BBD3Ch */ case   29:  		/* cmplwi CR0, R3, 0 */
		/* 820BBD3Ch case   29:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820BBD3Ch case   29:*/		return 0x820BBD40;
		  /* 820BBD40h */ case   30:  		/* bc 12, CR0_EQ, 5856 */
		/* 820BBD40h case   30:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BBD40h case   30:*/		return 0x820BBD44;
		  /* 820BBD44h */ case   31:  		/* li R10, 4 */
		/* 820BBD44h case   31:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820BBD44h case   31:*/		return 0x820BBD48;
		  /* 820BBD48h */ case   32:  		/* addi R9, R1, 160 */
		/* 820BBD48h case   32:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 820BBD48h case   32:*/		return 0x820BBD4C;
		  /* 820BBD4Ch */ case   33:  		/* addi R11, R1, 160 */
		/* 820BBD4Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xA0);
		/* 820BBD4Ch case   33:*/		return 0x820BBD50;
		  /* 820BBD50h */ case   34:  		/* subf R9, R9, R3 */
		/* 820BBD50h case   34:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R3);
		/* 820BBD50h case   34:*/		return 0x820BBD54;
		  /* 820BBD54h */ case   35:  		/* mtspr CTR, R10 */
		/* 820BBD54h case   35:*/		regs.CTR = regs.R10;
		/* 820BBD54h case   35:*/		return 0x820BBD58;
		  /* 820BBD58h */ case   36:  		/* add R10, R9, R11 */
		/* 820BBD58h case   36:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 820BBD58h case   36:*/		return 0x820BBD5C;
		  /* 820BBD5Ch */ case   37:  		/* stw R10, <#[R11]> */
		/* 820BBD5Ch case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820BBD5Ch case   37:*/		return 0x820BBD60;
		  /* 820BBD60h */ case   38:  		/* addi R11, R11, 4 */
		/* 820BBD60h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BBD60h case   38:*/		return 0x820BBD64;
		  /* 820BBD64h */ case   39:  		/* bc 16, CR0_LT, -12 */
		/* 820BBD64h case   39:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBD58;  }
		/* 820BBD64h case   39:*/		return 0x820BBD68;
		  /* 820BBD68h */ case   40:  		/* lwz R30, <#[R1 + 160]> */
		/* 820BBD68h case   40:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BBD68h case   40:*/		return 0x820BBD6C;
		  /* 820BBD6Ch */ case   41:  		/* li R29, -1 */
		/* 820BBD6Ch case   41:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BBD6Ch case   41:*/		return 0x820BBD70;
		  /* 820BBD70h */ case   42:  		/* lwz R26, <#[R1 + 164]> */
		/* 820BBD70h case   42:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BBD70h case   42:*/		return 0x820BBD74;
		  /* 820BBD74h */ case   43:  		/* lis R5, 4112 */
		/* 820BBD74h case   43:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BBD74h case   43:*/		return 0x820BBD78;
		  /* 820BBD78h */ case   44:  		/* lwz R27, <#[R1 + 168]> */
		/* 820BBD78h case   44:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BBD78h case   44:*/		return 0x820BBD7C;
		  /* 820BBD7Ch */ case   45:  		/* li R9, 0 */
		/* 820BBD7Ch case   45:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BBD7Ch case   45:*/		return 0x820BBD80;
		  /* 820BBD80h */ case   46:  		/* lwz R25, <#[R1 + 172]> */
		/* 820BBD80h case   46:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BBD80h case   46:*/		return 0x820BBD84;
		  /* 820BBD84h */ case   47:  		/* li R8, 0 */
		/* 820BBD84h case   47:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BBD84h case   47:*/		return 0x820BBD88;
		  /* 820BBD88h */ case   48:  		/* lwz R28, <#[R1 + 144]> */
		/* 820BBD88h case   48:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000090) );
		/* 820BBD88h case   48:*/		return 0x820BBD8C;
		  /* 820BBD8Ch */ case   49:  		/* mr R6, R30 */
		/* 820BBD8Ch case   49:*/		regs.R6 = regs.R30;
		/* 820BBD8Ch case   49:*/		return 0x820BBD90;
		  /* 820BBD90h */ case   50:  		/* stw R29, <#[R30]> */
		/* 820BBD90h case   50:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 820BBD90h case   50:*/		return 0x820BBD94;
		  /* 820BBD94h */ case   51:  		/* ori R5, R5, 1 */
		/* 820BBD94h case   51:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BBD94h case   51:*/		return 0x820BBD98;
		  /* 820BBD98h */ case   52:  		/* stw R29, <#[R26]> */
		/* 820BBD98h case   52:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R26 + 0x00000000) );
		/* 820BBD98h case   52:*/		return 0x820BBD9C;
		  /* 820BBD9Ch */ case   53:  		/* mr R7, R28 */
		/* 820BBD9Ch case   53:*/		regs.R7 = regs.R28;
		/* 820BBD9Ch case   53:*/		return 0x820BBDA0;
		  /* 820BBDA0h */ case   54:  		/* stw R29, <#[R27]> */
		/* 820BBDA0h case   54:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R27 + 0x00000000) );
		/* 820BBDA0h case   54:*/		return 0x820BBDA4;
		  /* 820BBDA4h */ case   55:  		/* mr R4, R16 */
		/* 820BBDA4h case   55:*/		regs.R4 = regs.R16;
		/* 820BBDA4h case   55:*/		return 0x820BBDA8;
		  /* 820BBDA8h */ case   56:  		/* stw R29, <#[R25]> */
		/* 820BBDA8h case   56:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R25 + 0x00000000) );
		/* 820BBDA8h case   56:*/		return 0x820BBDAC;
		  /* 820BBDACh */ case   57:  		/* mr R3, R14 */
		/* 820BBDACh case   57:*/		regs.R3 = regs.R14;
		/* 820BBDACh case   57:*/		return 0x820BBDB0;
		  /* 820BBDB0h */ case   58:  		/* stw R29, <#[R15]> */
		/* 820BBDB0h case   58:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R15 + 0x00000000) );
		/* 820BBDB0h case   58:*/		return 0x820BBDB4;
		  /* 820BBDB4h */ case   59:  		/* bl -45740 */
		/* 820BBDB4h case   59:*/		regs.LR = 0x820BBDB8; return 0x820B0B08;
		/* 820BBDB4h case   59:*/		return 0x820BBDB8;
		  /* 820BBDB8h */ case   60:  		/* or. R31, R3, R3 */
		/* 820BBDB8h case   60:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBDB8h case   60:*/		return 0x820BBDBC;
		  /* 820BBDBCh */ case   61:  		/* bc 12, CR0_LT, 9756 */
		/* 820BBDBCh case   61:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBDBCh case   61:*/		return 0x820BBDC0;
		  /* 820BBDC0h */ case   62:  		/* lis R5, 8224 */
		/* 820BBDC0h case   62:*/		cpu::op::lis<0>(regs,&regs.R5,0x2020);
		/* 820BBDC0h case   62:*/		return 0x820BBDC4;
		  /* 820BBDC4h */ case   63:  		/* li R9, 23 */
		/* 820BBDC4h case   63:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BBDC4h case   63:*/		return 0x820BBDC8;
		  /* 820BBDC8h */ case   64:  		/* mr R8, R28 */
		/* 820BBDC8h case   64:*/		regs.R8 = regs.R28;
		/* 820BBDC8h case   64:*/		return 0x820BBDCC;
		  /* 820BBDCCh */ case   65:  		/* mr R7, R30 */
		/* 820BBDCCh case   65:*/		regs.R7 = regs.R30;
		/* 820BBDCCh case   65:*/		return 0x820BBDD0;
		  /* 820BBDD0h */ case   66:  		/* mr R6, R26 */
		/* 820BBDD0h case   66:*/		regs.R6 = regs.R26;
		/* 820BBDD0h case   66:*/		return 0x820BBDD4;
		  /* 820BBDD4h */ case   67:  		/* ori R5, R5, 1 */
		/* 820BBDD4h case   67:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BBDD4h case   67:*/		return 0x820BBDD8;
		  /* 820BBDD8h */ case   68:  		/* mr R4, R16 */
		/* 820BBDD8h case   68:*/		regs.R4 = regs.R16;
		/* 820BBDD8h case   68:*/		return 0x820BBDDC;
		  /* 820BBDDCh */ case   69:  		/* mr R3, R14 */
		/* 820BBDDCh case   69:*/		regs.R3 = regs.R14;
		/* 820BBDDCh case   69:*/		return 0x820BBDE0;
		  /* 820BBDE0h */ case   70:  		/* bl -45784 */
		/* 820BBDE0h case   70:*/		regs.LR = 0x820BBDE4; return 0x820B0B08;
		/* 820BBDE0h case   70:*/		return 0x820BBDE4;
		  /* 820BBDE4h */ case   71:  		/* or. R31, R3, R3 */
		/* 820BBDE4h case   71:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBDE4h case   71:*/		return 0x820BBDE8;
		  /* 820BBDE8h */ case   72:  		/* bc 12, CR0_LT, 9712 */
		/* 820BBDE8h case   72:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBDE8h case   72:*/		return 0x820BBDEC;
		  /* 820BBDECh */ case   73:  		/* lis R5, 8224 */
		/* 820BBDECh case   73:*/		cpu::op::lis<0>(regs,&regs.R5,0x2020);
		/* 820BBDECh case   73:*/		return 0x820BBDF0;
		  /* 820BBDF0h */ case   74:  		/* li R9, 23 */
		/* 820BBDF0h case   74:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BBDF0h case   74:*/		return 0x820BBDF4;
		  /* 820BBDF4h */ case   75:  		/* mr R8, R30 */
		/* 820BBDF4h case   75:*/		regs.R8 = regs.R30;
		/* 820BBDF4h case   75:*/		return 0x820BBDF8;
		  /* 820BBDF8h */ case   76:  		/* mr R7, R28 */
		/* 820BBDF8h case   76:*/		regs.R7 = regs.R28;
		/* 820BBDF8h case   76:*/		return 0x820BBDFC;
		  /* 820BBDFCh */ case   77:  		/* mr R6, R27 */
		/* 820BBDFCh case   77:*/		regs.R6 = regs.R27;
		/* 820BBDFCh case   77:*/		return 0x820BBE00;
		  /* 820BBE00h */ case   78:  		/* ori R5, R5, 1 */
		/* 820BBE00h case   78:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BBE00h case   78:*/		return 0x820BBE04;
		  /* 820BBE04h */ case   79:  		/* mr R4, R16 */
		/* 820BBE04h case   79:*/		regs.R4 = regs.R16;
		/* 820BBE04h case   79:*/		return 0x820BBE08;
		  /* 820BBE08h */ case   80:  		/* mr R3, R14 */
		/* 820BBE08h case   80:*/		regs.R3 = regs.R14;
		/* 820BBE08h case   80:*/		return 0x820BBE0C;
		  /* 820BBE0Ch */ case   81:  		/* bl -45828 */
		/* 820BBE0Ch case   81:*/		regs.LR = 0x820BBE10; return 0x820B0B08;
		/* 820BBE0Ch case   81:*/		return 0x820BBE10;
		  /* 820BBE10h */ case   82:  		/* or. R31, R3, R3 */
		/* 820BBE10h case   82:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBE10h case   82:*/		return 0x820BBE14;
		  /* 820BBE14h */ case   83:  		/* bc 12, CR0_LT, 9668 */
		/* 820BBE14h case   83:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBE14h case   83:*/		return 0x820BBE18;
		  /* 820BBE18h */ case   84:  		/* lis R5, 4112 */
		/* 820BBE18h case   84:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BBE18h case   84:*/		return 0x820BBE1C;
		  /* 820BBE1Ch */ case   85:  		/* li R9, 26 */
		/* 820BBE1Ch case   85:*/		cpu::op::li<0>(regs,&regs.R9,0x1A);
		/* 820BBE1Ch case   85:*/		return 0x820BBE20;
		  /* 820BBE20h */ case   86:  		/* li R8, 0 */
		/* 820BBE20h case   86:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BBE20h case   86:*/		return 0x820BBE24;
		  /* 820BBE24h */ case   87:  		/* mr R7, R27 */
		/* 820BBE24h case   87:*/		regs.R7 = regs.R27;
		/* 820BBE24h case   87:*/		return 0x820BBE28;
		  /* 820BBE28h */ case   88:  		/* mr R6, R25 */
		/* 820BBE28h case   88:*/		regs.R6 = regs.R25;
		/* 820BBE28h case   88:*/		return 0x820BBE2C;
		  /* 820BBE2Ch */ case   89:  		/* ori R5, R5, 1 */
		/* 820BBE2Ch case   89:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BBE2Ch case   89:*/		return 0x820BBE30;
		  /* 820BBE30h */ case   90:  		/* mr R4, R16 */
		/* 820BBE30h case   90:*/		regs.R4 = regs.R16;
		/* 820BBE30h case   90:*/		return 0x820BBE34;
		  /* 820BBE34h */ case   91:  		/* mr R3, R14 */
		/* 820BBE34h case   91:*/		regs.R3 = regs.R14;
		/* 820BBE34h case   91:*/		return 0x820BBE38;
		  /* 820BBE38h */ case   92:  		/* bl -45872 */
		/* 820BBE38h case   92:*/		regs.LR = 0x820BBE3C; return 0x820B0B08;
		/* 820BBE38h case   92:*/		return 0x820BBE3C;
		  /* 820BBE3Ch */ case   93:  		/* or. R31, R3, R3 */
		/* 820BBE3Ch case   93:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBE3Ch case   93:*/		return 0x820BBE40;
		  /* 820BBE40h */ case   94:  		/* bc 12, CR0_LT, 9624 */
		/* 820BBE40h case   94:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBE40h case   94:*/		return 0x820BBE44;
		  /* 820BBE44h */ case   95:  		/* lis R5, 8256 */
		/* 820BBE44h case   95:*/		cpu::op::lis<0>(regs,&regs.R5,0x2040);
		/* 820BBE44h case   95:*/		return 0x820BBE48;
		  /* 820BBE48h */ case   96:  		/* li R9, 18 */
		/* 820BBE48h case   96:*/		cpu::op::li<0>(regs,&regs.R9,0x12);
		/* 820BBE48h case   96:*/		return 0x820BBE4C;
		  /* 820BBE4Ch */ case   97:  		/* mr R8, R25 */
		/* 820BBE4Ch case   97:*/		regs.R8 = regs.R25;
		/* 820BBE4Ch case   97:*/		return 0x820BBE50;
		  /* 820BBE50h */ case   98:  		/* mr R7, R26 */
		/* 820BBE50h case   98:*/		regs.R7 = regs.R26;
		/* 820BBE50h case   98:*/		return 0x820BBE54;
		  /* 820BBE54h */ case   99:  		/* b -16496 */
		/* 820BBE54h case   99:*/		return 0x820B7DE4;
		/* 820BBE54h case   99:*/		return 0x820BBE58;
	}
	return 0x820BBE58;
} // Block from 820BBCC8h-820BBE58h (100 instructions)

//////////////////////////////////////////////////////
// Block at 820BBE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBE58);
		  /* 820BBE58h */ case    0:  		/* li R29, -1 */
		/* 820BBE58h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BBE58h case    0:*/		return 0x820BBE5C;
		  /* 820BBE5Ch */ case    1:  		/* lwz R27, <#[R1 + 144]> */
		/* 820BBE5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000090) );
		/* 820BBE5Ch case    1:*/		return 0x820BBE60;
		  /* 820BBE60h */ case    2:  		/* rlwinm R28, R30, 0, 12, 31 */
		/* 820BBE60h case    2:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R30);
		/* 820BBE60h case    2:*/		return 0x820BBE64;
		  /* 820BBE64h */ case    3:  		/* stw R29, <#[R1 + 396]> */
		/* 820BBE64h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000018C) );
		/* 820BBE64h case    3:*/		return 0x820BBE68;
		  /* 820BBE68h */ case    4:  		/* li R9, 4 */
		/* 820BBE68h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BBE68h case    4:*/		return 0x820BBE6C;
		  /* 820BBE6Ch */ case    5:  		/* stw R29, <#[R1 + 404]> */
		/* 820BBE6Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000194) );
		/* 820BBE6Ch case    5:*/		return 0x820BBE70;
		  /* 820BBE70h */ case    6:  		/* mr R8, R27 */
		/* 820BBE70h case    6:*/		regs.R8 = regs.R27;
		/* 820BBE70h case    6:*/		return 0x820BBE74;
		  /* 820BBE74h */ case    7:  		/* mr R7, R27 */
		/* 820BBE74h case    7:*/		regs.R7 = regs.R27;
		/* 820BBE74h case    7:*/		return 0x820BBE78;
		  /* 820BBE78h */ case    8:  		/* addi R6, R1, 396 */
		/* 820BBE78h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x18C);
		/* 820BBE78h case    8:*/		return 0x820BBE7C;
		  /* 820BBE7Ch */ case    9:  		/* oris R5, R28, 20480 */
		/* 820BBE7Ch case    9:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x5000);
		/* 820BBE7Ch case    9:*/		return 0x820BBE80;
		  /* 820BBE80h */ case   10:  		/* mr R4, R16 */
		/* 820BBE80h case   10:*/		regs.R4 = regs.R16;
		/* 820BBE80h case   10:*/		return 0x820BBE84;
		  /* 820BBE84h */ case   11:  		/* bl -45948 */
		/* 820BBE84h case   11:*/		regs.LR = 0x820BBE88; return 0x820B0B08;
		/* 820BBE84h case   11:*/		return 0x820BBE88;
		  /* 820BBE88h */ case   12:  		/* or. R31, R3, R3 */
		/* 820BBE88h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBE88h case   12:*/		return 0x820BBE8C;
		  /* 820BBE8Ch */ case   13:  		/* bc 12, CR0_LT, 9548 */
		/* 820BBE8Ch case   13:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBE8Ch case   13:*/		return 0x820BBE90;
		  /* 820BBE90h */ case   14:  		/* lis R5, 4208 */
		/* 820BBE90h case   14:*/		cpu::op::lis<0>(regs,&regs.R5,0x1070);
		/* 820BBE90h case   14:*/		return 0x820BBE94;
		  /* 820BBE94h */ case   15:  		/* li R9, 4 */
		/* 820BBE94h case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BBE94h case   15:*/		return 0x820BBE98;
		  /* 820BBE98h */ case   16:  		/* li R8, 0 */
		/* 820BBE98h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BBE98h case   16:*/		return 0x820BBE9C;
		  /* 820BBE9Ch */ case   17:  		/* addi R7, R1, 396 */
		/* 820BBE9Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x18C);
		/* 820BBE9Ch case   17:*/		return 0x820BBEA0;
		  /* 820BBEA0h */ case   18:  		/* addi R6, R1, 404 */
		/* 820BBEA0h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x194);
		/* 820BBEA0h case   18:*/		return 0x820BBEA4;
		  /* 820BBEA4h */ case   19:  		/* ori R5, R5, 1 */
		/* 820BBEA4h case   19:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BBEA4h case   19:*/		return 0x820BBEA8;
		  /* 820BBEA8h */ case   20:  		/* mr R4, R16 */
		/* 820BBEA8h case   20:*/		regs.R4 = regs.R16;
		/* 820BBEA8h case   20:*/		return 0x820BBEAC;
		  /* 820BBEACh */ case   21:  		/* mr R3, R14 */
		/* 820BBEACh case   21:*/		regs.R3 = regs.R14;
		/* 820BBEACh case   21:*/		return 0x820BBEB0;
		  /* 820BBEB0h */ case   22:  		/* bl -45992 */
		/* 820BBEB0h case   22:*/		regs.LR = 0x820BBEB4; return 0x820B0B08;
		/* 820BBEB0h case   22:*/		return 0x820BBEB4;
		  /* 820BBEB4h */ case   23:  		/* or. R31, R3, R3 */
		/* 820BBEB4h case   23:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BBEB4h case   23:*/		return 0x820BBEB8;
		  /* 820BBEB8h */ case   24:  		/* bc 12, CR0_LT, 9504 */
		/* 820BBEB8h case   24:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BBEB8h case   24:*/		return 0x820BBEBC;
		  /* 820BBEBCh */ case   25:  		/* mr R4, R30 */
		/* 820BBEBCh case   25:*/		regs.R4 = regs.R30;
		/* 820BBEBCh case   25:*/		return 0x820BBEC0;
		  /* 820BBEC0h */ case   26:  		/* mr R3, R14 */
		/* 820BBEC0h case   26:*/		regs.R3 = regs.R14;
		/* 820BBEC0h case   26:*/		return 0x820BBEC4;
		  /* 820BBEC4h */ case   27:  		/* bl -47060 */
		/* 820BBEC4h case   27:*/		regs.LR = 0x820BBEC8; return 0x820B06F0;
		/* 820BBEC4h case   27:*/		return 0x820BBEC8;
		  /* 820BBEC8h */ case   28:  		/* or. R8, R3, R3 */
		/* 820BBEC8h case   28:*/		cpu::op::or<1>(regs,&regs.R8,regs.R3,regs.R3);
		/* 820BBEC8h case   28:*/		return 0x820BBECC;
		  /* 820BBECCh */ case   29:  		/* bc 12, CR0_EQ, 5460 */
		/* 820BBECCh case   29:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BBECCh case   29:*/		return 0x820BBED0;
		  /* 820BBED0h */ case   30:  		/* cmplwi CR6, R30, 0 */
		/* 820BBED0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BBED0h case   30:*/		return 0x820BBED4;
		  /* 820BBED4h */ case   31:  		/* bc 12, CR6_EQ, 56 */
		/* 820BBED4h case   31:*/		if ( regs.CR[6].eq ) { return 0x820BBF0C;  }
		/* 820BBED4h case   31:*/		return 0x820BBED8;
		  /* 820BBED8h */ case   32:  		/* addi R11, R8, -4 */
		/* 820BBED8h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820BBED8h case   32:*/		return 0x820BBEDC;
		  /* 820BBEDCh */ case   33:  		/* mtspr CTR, R30 */
		/* 820BBEDCh case   33:*/		regs.CTR = regs.R30;
		/* 820BBEDCh case   33:*/		return 0x820BBEE0;
		  /* 820BBEE0h */ case   34:  		/* lwz R10, <#[R1 + 404]> */
		/* 820BBEE0h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000194) );
		/* 820BBEE0h case   34:*/		return 0x820BBEE4;
		  /* 820BBEE4h */ case   35:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BBEE4h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BBEE4h case   35:*/		return 0x820BBEE8;
		  /* 820BBEE8h */ case   36:  		/* bc 16, CR0_LT, -8 */
		/* 820BBEE8h case   36:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBEE0;  }
		/* 820BBEE8h case   36:*/		return 0x820BBEEC;
		  /* 820BBEECh */ case   37:  		/* cmplwi CR6, R30, 0 */
		/* 820BBEECh case   37:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BBEECh case   37:*/		return 0x820BBEF0;
		  /* 820BBEF0h */ case   38:  		/* bc 12, CR6_EQ, 28 */
		/* 820BBEF0h case   38:*/		if ( regs.CR[6].eq ) { return 0x820BBF0C;  }
		/* 820BBEF0h case   38:*/		return 0x820BBEF4;
		  /* 820BBEF4h */ case   39:  		/* addi R11, R15, -4 */
		/* 820BBEF4h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BBEF4h case   39:*/		return 0x820BBEF8;
		  /* 820BBEF8h */ case   40:  		/* cmplwi CR0, R30, 0 */
		/* 820BBEF8h case   40:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BBEF8h case   40:*/		return 0x820BBEFC;
		  /* 820BBEFCh */ case   41:  		/* bc 12, CR0_EQ, 16 */
		/* 820BBEFCh case   41:*/		if ( regs.CR[0].eq ) { return 0x820BBF0C;  }
		/* 820BBEFCh case   41:*/		return 0x820BBF00;
		  /* 820BBF00h */ case   42:  		/* mtspr CTR, R30 */
		/* 820BBF00h case   42:*/		regs.CTR = regs.R30;
		/* 820BBF00h case   42:*/		return 0x820BBF04;
		  /* 820BBF04h */ case   43:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BBF04h case   43:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BBF04h case   43:*/		return 0x820BBF08;
		  /* 820BBF08h */ case   44:  		/* bc 16, CR0_LT, -4 */
		/* 820BBF08h case   44:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBF04;  }
		/* 820BBF08h case   44:*/		return 0x820BBF0C;
	}
	return 0x820BBF0C;
} // Block from 820BBE58h-820BBF0Ch (45 instructions)

//////////////////////////////////////////////////////
// Block at 820BBF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBF0C);
		  /* 820BBF0Ch */ case    0:  		/* mr R7, R27 */
		/* 820BBF0Ch case    0:*/		regs.R7 = regs.R27;
		/* 820BBF0Ch case    0:*/		return 0x820BBF10;
		  /* 820BBF10h */ case    1:  		/* b -7968 */
		/* 820BBF10h case    1:*/		return 0x820B9FF0;
		/* 820BBF10h case    1:*/		return 0x820BBF14;
		  /* 820BBF14h */ case    2:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBF14h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBF14h case    2:*/		return 0x820BBF18;
		  /* 820BBF18h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820BBF18h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBF18h case    3:*/		return 0x820BBF1C;
		  /* 820BBF1Ch */ case    4:  		/* bc 12, CR6_EQ, 9396 */
		/* 820BBF1Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BBF1Ch case    4:*/		return 0x820BBF20;
		  /* 820BBF20h */ case    5:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BBF20h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BBF20h case    5:*/		return 0x820BBF24;
		  /* 820BBF24h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BBF24h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBF24h case    6:*/		return 0x820BBF28;
		  /* 820BBF28h */ case    7:  		/* bc 12, CR6_EQ, 9384 */
		/* 820BBF28h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BBF28h case    7:*/		return 0x820BBF2C;
		  /* 820BBF2Ch */ case    8:  		/* cmplwi CR6, R15, 0 */
		/* 820BBF2Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BBF2Ch case    8:*/		return 0x820BBF30;
		  /* 820BBF30h */ case    9:  		/* bc 12, CR6_EQ, -13668 */
		/* 820BBF30h case    9:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BBF30h case    9:*/		return 0x820BBF34;
		  /* 820BBF34h */ case   10:  		/* mr R8, R30 */
		/* 820BBF34h case   10:*/		regs.R8 = regs.R30;
		/* 820BBF34h case   10:*/		return 0x820BBF38;
		  /* 820BBF38h */ case   11:  		/* lwz R7, <#[R1 + 148]> */
		/* 820BBF38h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820BBF38h case   11:*/		return 0x820BBF3C;
		  /* 820BBF3Ch */ case   12:  		/* mr R5, R15 */
		/* 820BBF3Ch case   12:*/		regs.R5 = regs.R15;
		/* 820BBF3Ch case   12:*/		return 0x820BBF40;
		  /* 820BBF40h */ case   13:  		/* lwz R6, <#[R1 + 144]> */
		/* 820BBF40h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000090) );
		/* 820BBF40h case   13:*/		return 0x820BBF44;
		  /* 820BBF44h */ case   14:  		/* mr R4, R16 */
		/* 820BBF44h case   14:*/		regs.R4 = regs.R16;
		/* 820BBF44h case   14:*/		return 0x820BBF48;
		  /* 820BBF48h */ case   15:  		/* mr R3, R14 */
		/* 820BBF48h case   15:*/		regs.R3 = regs.R14;
		/* 820BBF48h case   15:*/		return 0x820BBF4C;
		  /* 820BBF4Ch */ case   16:  		/* bl -34028 */
		/* 820BBF4Ch case   16:*/		regs.LR = 0x820BBF50; return 0x820B3A60;
		/* 820BBF4Ch case   16:*/		return 0x820BBF50;
		  /* 820BBF50h */ case   17:  		/* b 6128 */
		/* 820BBF50h case   17:*/		return 0x820BD740;
		/* 820BBF50h case   17:*/		return 0x820BBF54;
		  /* 820BBF54h */ case   18:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBF54h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBF54h case   18:*/		return 0x820BBF58;
		  /* 820BBF58h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 820BBF58h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBF58h case   19:*/		return 0x820BBF5C;
		  /* 820BBF5Ch */ case   20:  		/* bc 12, CR6_EQ, 9332 */
		/* 820BBF5Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BBF5Ch case   20:*/		return 0x820BBF60;
		  /* 820BBF60h */ case   21:  		/* cmplwi CR6, R15, 0 */
		/* 820BBF60h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BBF60h case   21:*/		return 0x820BBF64;
		  /* 820BBF64h */ case   22:  		/* bc 12, CR6_EQ, -13720 */
		/* 820BBF64h case   22:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BBF64h case   22:*/		return 0x820BBF68;
		  /* 820BBF68h */ case   23:  		/* lwz R3, <#[R14 + 8]> */
		/* 820BBF68h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000008) );
		/* 820BBF68h case   23:*/		return 0x820BBF6C;
		  /* 820BBF6Ch */ case   24:  		/* lis R11, -32255 */
		/* 820BBF6Ch case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BBF6Ch case   24:*/		return 0x820BBF70;
		  /* 820BBF70h */ case   25:  		/* li R6, 0 */
		/* 820BBF70h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BBF70h case   25:*/		return 0x820BBF74;
		  /* 820BBF74h */ case   26:  		/* li R5, 0 */
		/* 820BBF74h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BBF74h case   26:*/		return 0x820BBF78;
		  /* 820BBF78h */ case   27:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BBF78h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BBF78h case   27:*/		return 0x820BBF7C;
		  /* 820BBF7Ch */ case   28:  		/* lfd FR1, <#[R11 + 9032]> */
		/* 820BBF7Ch case   28:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00002348) );
		/* 820BBF7Ch case   28:*/		return 0x820BBF80;
		  /* 820BBF80h */ case   29:  		/* bl 266920 */
		/* 820BBF80h case   29:*/		regs.LR = 0x820BBF84; return 0x820FD228;
		/* 820BBF80h case   29:*/		return 0x820BBF84;
		  /* 820BBF84h */ case   30:  		/* mr R31, R3 */
		/* 820BBF84h case   30:*/		regs.R31 = regs.R3;
		/* 820BBF84h case   30:*/		return 0x820BBF88;
		  /* 820BBF88h */ case   31:  		/* mr R4, R30 */
		/* 820BBF88h case   31:*/		regs.R4 = regs.R30;
		/* 820BBF88h case   31:*/		return 0x820BBF8C;
		  /* 820BBF8Ch */ case   32:  		/* mr R3, R14 */
		/* 820BBF8Ch case   32:*/		regs.R3 = regs.R14;
		/* 820BBF8Ch case   32:*/		return 0x820BBF90;
		  /* 820BBF90h */ case   33:  		/* bl -47264 */
		/* 820BBF90h case   33:*/		regs.LR = 0x820BBF94; return 0x820B06F0;
		/* 820BBF90h case   33:*/		return 0x820BBF94;
		  /* 820BBF94h */ case   34:  		/* or. R8, R3, R3 */
		/* 820BBF94h case   34:*/		cpu::op::or<1>(regs,&regs.R8,regs.R3,regs.R3);
		/* 820BBF94h case   34:*/		return 0x820BBF98;
		  /* 820BBF98h */ case   35:  		/* bc 12, CR0_EQ, 5256 */
		/* 820BBF98h case   35:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BBF98h case   35:*/		return 0x820BBF9C;
		  /* 820BBF9Ch */ case   36:  		/* cmplwi CR6, R30, 0 */
		/* 820BBF9Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BBF9Ch case   36:*/		return 0x820BBFA0;
		  /* 820BBFA0h */ case   37:  		/* bc 12, CR6_EQ, -13848 */
		/* 820BBFA0h case   37:*/		if ( regs.CR[6].eq ) { return 0x820B8988;  }
		/* 820BBFA0h case   37:*/		return 0x820BBFA4;
		  /* 820BBFA4h */ case   38:  		/* addi R11, R8, -4 */
		/* 820BBFA4h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820BBFA4h case   38:*/		return 0x820BBFA8;
		  /* 820BBFA8h */ case   39:  		/* cmplwi CR0, R30, 0 */
		/* 820BBFA8h case   39:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BBFA8h case   39:*/		return 0x820BBFAC;
		  /* 820BBFACh */ case   40:  		/* bc 12, CR0_EQ, 16 */
		/* 820BBFACh case   40:*/		if ( regs.CR[0].eq ) { return 0x820BBFBC;  }
		/* 820BBFACh case   40:*/		return 0x820BBFB0;
		  /* 820BBFB0h */ case   41:  		/* mtspr CTR, R30 */
		/* 820BBFB0h case   41:*/		regs.CTR = regs.R30;
		/* 820BBFB0h case   41:*/		return 0x820BBFB4;
		  /* 820BBFB4h */ case   42:  		/* stwu R31, <#[R11 + 4]> */
		/* 820BBFB4h case   42:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BBFB4h case   42:*/		return 0x820BBFB8;
		  /* 820BBFB8h */ case   43:  		/* bc 16, CR0_LT, -4 */
		/* 820BBFB8h case   43:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBFB4;  }
		/* 820BBFB8h case   43:*/		return 0x820BBFBC;
	}
	return 0x820BBFBC;
} // Block from 820BBF0Ch-820BBFBCh (44 instructions)

//////////////////////////////////////////////////////
// Block at 820BBFBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BBFBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BBFBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BBFBC);
		  /* 820BBFBCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BBFBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BBFBCh case    0:*/		return 0x820BBFC0;
		  /* 820BBFC0h */ case    1:  		/* bc 12, CR6_EQ, -13880 */
		/* 820BBFC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820B8988;  }
		/* 820BBFC0h case    1:*/		return 0x820BBFC4;
		  /* 820BBFC4h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BBFC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BBFC4h case    2:*/		return 0x820BBFC8;
		  /* 820BBFC8h */ case    3:  		/* li R10, -1 */
		/* 820BBFC8h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BBFC8h case    3:*/		return 0x820BBFCC;
		  /* 820BBFCCh */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820BBFCCh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BBFCCh case    4:*/		return 0x820BBFD0;
		  /* 820BBFD0h */ case    5:  		/* bc 12, CR0_EQ, -13896 */
		/* 820BBFD0h case    5:*/		if ( regs.CR[0].eq ) { return 0x820B8988;  }
		/* 820BBFD0h case    5:*/		return 0x820BBFD4;
		  /* 820BBFD4h */ case    6:  		/* mtspr CTR, R30 */
		/* 820BBFD4h case    6:*/		regs.CTR = regs.R30;
		/* 820BBFD4h case    6:*/		return 0x820BBFD8;
		  /* 820BBFD8h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BBFD8h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BBFD8h case    7:*/		return 0x820BBFDC;
		  /* 820BBFDCh */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820BBFDCh case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BBFD8;  }
		/* 820BBFDCh case    8:*/		return 0x820BBFE0;
		  /* 820BBFE0h */ case    9:  		/* b -13912 */
		/* 820BBFE0h case    9:*/		return 0x820B8988;
		/* 820BBFE0h case    9:*/		return 0x820BBFE4;
		  /* 820BBFE4h */ case   10:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BBFE4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BBFE4h case   10:*/		return 0x820BBFE8;
		  /* 820BBFE8h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 820BBFE8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBFE8h case   11:*/		return 0x820BBFEC;
		  /* 820BBFECh */ case   12:  		/* bc 12, CR6_EQ, 9188 */
		/* 820BBFECh case   12:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BBFECh case   12:*/		return 0x820BBFF0;
		  /* 820BBFF0h */ case   13:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BBFF0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BBFF0h case   13:*/		return 0x820BBFF4;
		  /* 820BBFF4h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 820BBFF4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BBFF4h case   14:*/		return 0x820BBFF8;
		  /* 820BBFF8h */ case   15:  		/* bc 12, CR6_EQ, 9176 */
		/* 820BBFF8h case   15:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BBFF8h case   15:*/		return 0x820BBFFC;
		  /* 820BBFFCh */ case   16:  		/* cmplwi CR6, R15, 0 */
		/* 820BBFFCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BBFFCh case   16:*/		return 0x820BC000;
		  /* 820BC000h */ case   17:  		/* bc 12, CR6_EQ, -13876 */
		/* 820BC000h case   17:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BC000h case   17:*/		return 0x820BC004;
		  /* 820BC004h */ case   18:  		/* li R29, -1 */
		/* 820BC004h case   18:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BC004h case   18:*/		return 0x820BC008;
		  /* 820BC008h */ case   19:  		/* lwz R26, <#[R1 + 148]> */
		/* 820BC008h case   19:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000094) );
		/* 820BC008h case   19:*/		return 0x820BC00C;
		  /* 820BC00Ch */ case   20:  		/* lwz R25, <#[R1 + 144]> */
		/* 820BC00Ch case   20:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000090) );
		/* 820BC00Ch case   20:*/		return 0x820BC010;
		  /* 820BC010h */ case   21:  		/* rlwinm R27, R30, 0, 12, 31 */
		/* 820BC010h case   21:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R27,regs.R30);
		/* 820BC010h case   21:*/		return 0x820BC014;
		  /* 820BC014h */ case   22:  		/* stw R29, <#[R1 + 304]> */
		/* 820BC014h case   22:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000130) );
		/* 820BC014h case   22:*/		return 0x820BC018;
		  /* 820BC018h */ case   23:  		/* li R9, 0 */
		/* 820BC018h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC018h case   23:*/		return 0x820BC01C;
		  /* 820BC01Ch */ case   24:  		/* stw R29, <#[R1 + 416]> */
		/* 820BC01Ch case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000001A0) );
		/* 820BC01Ch case   24:*/		return 0x820BC020;
		  /* 820BC020h */ case   25:  		/* mr R8, R26 */
		/* 820BC020h case   25:*/		regs.R8 = regs.R26;
		/* 820BC020h case   25:*/		return 0x820BC024;
		  /* 820BC024h */ case   26:  		/* stw R29, <#[R1 + 372]> */
		/* 820BC024h case   26:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000174) );
		/* 820BC024h case   26:*/		return 0x820BC028;
		  /* 820BC028h */ case   27:  		/* mr R7, R25 */
		/* 820BC028h case   27:*/		regs.R7 = regs.R25;
		/* 820BC028h case   27:*/		return 0x820BC02C;
		  /* 820BC02Ch */ case   28:  		/* addi R6, R1, 304 */
		/* 820BC02Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x130);
		/* 820BC02Ch case   28:*/		return 0x820BC030;
		  /* 820BC030h */ case   29:  		/* oris R5, R27, 20480 */
		/* 820BC030h case   29:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R27,0x5000);
		/* 820BC030h case   29:*/		return 0x820BC034;
		  /* 820BC034h */ case   30:  		/* mr R4, R16 */
		/* 820BC034h case   30:*/		regs.R4 = regs.R16;
		/* 820BC034h case   30:*/		return 0x820BC038;
		  /* 820BC038h */ case   31:  		/* mr R3, R14 */
		/* 820BC038h case   31:*/		regs.R3 = regs.R14;
		/* 820BC038h case   31:*/		return 0x820BC03C;
		  /* 820BC03Ch */ case   32:  		/* bl -46388 */
		/* 820BC03Ch case   32:*/		regs.LR = 0x820BC040; return 0x820B0B08;
		/* 820BC03Ch case   32:*/		return 0x820BC040;
		  /* 820BC040h */ case   33:  		/* or. R31, R3, R3 */
		/* 820BC040h case   33:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC040h case   33:*/		return 0x820BC044;
		  /* 820BC044h */ case   34:  		/* bc 12, CR0_LT, 9108 */
		/* 820BC044h case   34:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC044h case   34:*/		return 0x820BC048;
		  /* 820BC048h */ case   35:  		/* lis R5, 8256 */
		/* 820BC048h case   35:*/		cpu::op::lis<0>(regs,&regs.R5,0x2040);
		/* 820BC048h case   35:*/		return 0x820BC04C;
		  /* 820BC04Ch */ case   36:  		/* li R9, 0 */
		/* 820BC04Ch case   36:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC04Ch case   36:*/		return 0x820BC050;
		  /* 820BC050h */ case   37:  		/* addi R8, R1, 304 */
		/* 820BC050h case   37:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x130);
		/* 820BC050h case   37:*/		return 0x820BC054;
		  /* 820BC054h */ case   38:  		/* addi R7, R1, 304 */
		/* 820BC054h case   38:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x130);
		/* 820BC054h case   38:*/		return 0x820BC058;
		  /* 820BC058h */ case   39:  		/* addi R6, R1, 416 */
		/* 820BC058h case   39:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1A0);
		/* 820BC058h case   39:*/		return 0x820BC05C;
		  /* 820BC05Ch */ case   40:  		/* ori R5, R5, 1 */
		/* 820BC05Ch case   40:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BC05Ch case   40:*/		return 0x820BC060;
		  /* 820BC060h */ case   41:  		/* mr R4, R16 */
		/* 820BC060h case   41:*/		regs.R4 = regs.R16;
		/* 820BC060h case   41:*/		return 0x820BC064;
		  /* 820BC064h */ case   42:  		/* mr R3, R14 */
		/* 820BC064h case   42:*/		regs.R3 = regs.R14;
		/* 820BC064h case   42:*/		return 0x820BC068;
		  /* 820BC068h */ case   43:  		/* bl -46432 */
		/* 820BC068h case   43:*/		regs.LR = 0x820BC06C; return 0x820B0B08;
		/* 820BC068h case   43:*/		return 0x820BC06C;
		  /* 820BC06Ch */ case   44:  		/* or. R31, R3, R3 */
		/* 820BC06Ch case   44:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC06Ch case   44:*/		return 0x820BC070;
		  /* 820BC070h */ case   45:  		/* bc 12, CR0_LT, 9064 */
		/* 820BC070h case   45:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC070h case   45:*/		return 0x820BC074;
		  /* 820BC074h */ case   46:  		/* lis R5, 4112 */
		/* 820BC074h case   46:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BC074h case   46:*/		return 0x820BC078;
		  /* 820BC078h */ case   47:  		/* li R9, 0 */
		/* 820BC078h case   47:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC078h case   47:*/		return 0x820BC07C;
		  /* 820BC07Ch */ case   48:  		/* li R8, 0 */
		/* 820BC07Ch case   48:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC07Ch case   48:*/		return 0x820BC080;
		  /* 820BC080h */ case   49:  		/* addi R7, R1, 416 */
		/* 820BC080h case   49:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A0);
		/* 820BC080h case   49:*/		return 0x820BC084;
		  /* 820BC084h */ case   50:  		/* addi R6, R1, 372 */
		/* 820BC084h case   50:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x174);
		/* 820BC084h case   50:*/		return 0x820BC088;
		  /* 820BC088h */ case   51:  		/* ori R5, R5, 1 */
		/* 820BC088h case   51:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BC088h case   51:*/		return 0x820BC08C;
		  /* 820BC08Ch */ case   52:  		/* mr R4, R16 */
		/* 820BC08Ch case   52:*/		regs.R4 = regs.R16;
		/* 820BC08Ch case   52:*/		return 0x820BC090;
		  /* 820BC090h */ case   53:  		/* mr R3, R14 */
		/* 820BC090h case   53:*/		regs.R3 = regs.R14;
		/* 820BC090h case   53:*/		return 0x820BC094;
		  /* 820BC094h */ case   54:  		/* bl -46476 */
		/* 820BC094h case   54:*/		regs.LR = 0x820BC098; return 0x820B0B08;
		/* 820BC094h case   54:*/		return 0x820BC098;
		  /* 820BC098h */ case   55:  		/* or. R31, R3, R3 */
		/* 820BC098h case   55:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC098h case   55:*/		return 0x820BC09C;
		  /* 820BC09Ch */ case   56:  		/* bc 12, CR0_LT, 9020 */
		/* 820BC09Ch case   56:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC09Ch case   56:*/		return 0x820BC0A0;
		  /* 820BC0A0h */ case   57:  		/* rlwinm R4, R30, 1, 0, 30 */
		/* 820BC0A0h case   57:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R30);
		/* 820BC0A0h case   57:*/		return 0x820BC0A4;
		  /* 820BC0A4h */ case   58:  		/* mr R3, R14 */
		/* 820BC0A4h case   58:*/		regs.R3 = regs.R14;
		/* 820BC0A4h case   58:*/		return 0x820BC0A8;
		  /* 820BC0A8h */ case   59:  		/* bl -47544 */
		/* 820BC0A8h case   59:*/		regs.LR = 0x820BC0AC; return 0x820B06F0;
		/* 820BC0A8h case   59:*/		return 0x820BC0AC;
		  /* 820BC0ACh */ case   60:  		/* or. R11, R3, R3 */
		/* 820BC0ACh case   60:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BC0ACh case   60:*/		return 0x820BC0B0;
		  /* 820BC0B0h */ case   61:  		/* bc 12, CR0_EQ, 4976 */
		/* 820BC0B0h case   61:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BC0B0h case   61:*/		return 0x820BC0B4;
		  /* 820BC0B4h */ case   62:  		/* li R10, 2 */
		/* 820BC0B4h case   62:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820BC0B4h case   62:*/		return 0x820BC0B8;
		  /* 820BC0B8h */ case   63:  		/* addi R9, R1, 124 */
		/* 820BC0B8h case   63:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820BC0B8h case   63:*/		return 0x820BC0BC;
		  /* 820BC0BCh */ case   64:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BC0BCh case   64:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BC0BCh case   64:*/		return 0x820BC0C0;
		  /* 820BC0C0h */ case   65:  		/* mtspr CTR, R10 */
		/* 820BC0C0h case   65:*/		regs.CTR = regs.R10;
		/* 820BC0C0h case   65:*/		return 0x820BC0C4;
		  /* 820BC0C4h */ case   66:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BC0C4h case   66:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BC0C4h case   66:*/		return 0x820BC0C8;
		  /* 820BC0C8h */ case   67:  		/* add R11, R8, R11 */
		/* 820BC0C8h case   67:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BC0C8h case   67:*/		return 0x820BC0CC;
		  /* 820BC0CCh */ case   68:  		/* bc 16, CR0_LT, -8 */
		/* 820BC0CCh case   68:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC0C4;  }
		/* 820BC0CCh case   68:*/		return 0x820BC0D0;
		  /* 820BC0D0h */ case   69:  		/* lwz R8, <#[R1 + 128]> */
		/* 820BC0D0h case   69:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 820BC0D0h case   69:*/		return 0x820BC0D4;
		  /* 820BC0D4h */ case   70:  		/* cmplwi CR6, R30, 0 */
		/* 820BC0D4h case   70:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC0D4h case   70:*/		return 0x820BC0D8;
		  /* 820BC0D8h */ case   71:  		/* bc 12, CR6_EQ, 24 */
		/* 820BC0D8h case   71:*/		if ( regs.CR[6].eq ) { return 0x820BC0F0;  }
		/* 820BC0D8h case   71:*/		return 0x820BC0DC;
		  /* 820BC0DCh */ case   72:  		/* addi R11, R8, -4 */
		/* 820BC0DCh case   72:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820BC0DCh case   72:*/		return 0x820BC0E0;
		  /* 820BC0E0h */ case   73:  		/* mtspr CTR, R30 */
		/* 820BC0E0h case   73:*/		regs.CTR = regs.R30;
		/* 820BC0E0h case   73:*/		return 0x820BC0E4;
		  /* 820BC0E4h */ case   74:  		/* lwz R10, <#[R1 + 372]> */
		/* 820BC0E4h case   74:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000174) );
		/* 820BC0E4h case   74:*/		return 0x820BC0E8;
		  /* 820BC0E8h */ case   75:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC0E8h case   75:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC0E8h case   75:*/		return 0x820BC0EC;
		  /* 820BC0ECh */ case   76:  		/* bc 16, CR0_LT, -8 */
		/* 820BC0ECh case   76:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC0E4;  }
		/* 820BC0ECh case   76:*/		return 0x820BC0F0;
	}
	return 0x820BC0F0;
} // Block from 820BBFBCh-820BC0F0h (77 instructions)

//////////////////////////////////////////////////////
// Block at 820BC0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC0F0);
		  /* 820BC0F0h */ case    0:  		/* lwz R28, <#[R1 + 132]> */
		/* 820BC0F0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 820BC0F0h case    0:*/		return 0x820BC0F4;
		  /* 820BC0F4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC0F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC0F4h case    1:*/		return 0x820BC0F8;
		  /* 820BC0F8h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BC0F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC138;  }
		/* 820BC0F8h case    2:*/		return 0x820BC0FC;
		  /* 820BC0FCh */ case    3:  		/* addi R11, R28, -4 */
		/* 820BC0FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BC0FCh case    3:*/		return 0x820BC100;
		  /* 820BC100h */ case    4:  		/* mr R10, R29 */
		/* 820BC100h case    4:*/		regs.R10 = regs.R29;
		/* 820BC100h case    4:*/		return 0x820BC104;
		  /* 820BC104h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC104h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC104h case    5:*/		return 0x820BC108;
		  /* 820BC108h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC108h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC118;  }
		/* 820BC108h case    6:*/		return 0x820BC10C;
		  /* 820BC10Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC10Ch case    7:*/		regs.CTR = regs.R30;
		/* 820BC10Ch case    7:*/		return 0x820BC110;
		  /* 820BC110h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC110h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC110h case    8:*/		return 0x820BC114;
		  /* 820BC114h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC114h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC110;  }
		/* 820BC114h case    9:*/		return 0x820BC118;
	}
	return 0x820BC118;
} // Block from 820BC0F0h-820BC118h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC118);
		  /* 820BC118h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BC118h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC118h case    0:*/		return 0x820BC11C;
		  /* 820BC11Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BC11Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820BC138;  }
		/* 820BC11Ch case    1:*/		return 0x820BC120;
		  /* 820BC120h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BC120h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BC120h case    2:*/		return 0x820BC124;
		  /* 820BC124h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BC124h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC124h case    3:*/		return 0x820BC128;
		  /* 820BC128h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC128h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BC138;  }
		/* 820BC128h case    4:*/		return 0x820BC12C;
		  /* 820BC12Ch */ case    5:  		/* mtspr CTR, R30 */
		/* 820BC12Ch case    5:*/		regs.CTR = regs.R30;
		/* 820BC12Ch case    5:*/		return 0x820BC130;
		  /* 820BC130h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BC130h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC130h case    6:*/		return 0x820BC134;
		  /* 820BC134h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BC134h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC130;  }
		/* 820BC134h case    7:*/		return 0x820BC138;
	}
	return 0x820BC138;
} // Block from 820BC118h-820BC138h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BC138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC138);
		  /* 820BC138h */ case    0:  		/* li R9, 0 */
		/* 820BC138h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC138h case    0:*/		return 0x820BC13C;
		  /* 820BC13Ch */ case    1:  		/* mr R7, R26 */
		/* 820BC13Ch case    1:*/		regs.R7 = regs.R26;
		/* 820BC13Ch case    1:*/		return 0x820BC140;
		  /* 820BC140h */ case    2:  		/* mr R6, R28 */
		/* 820BC140h case    2:*/		regs.R6 = regs.R28;
		/* 820BC140h case    2:*/		return 0x820BC144;
		  /* 820BC144h */ case    3:  		/* oris R5, R27, 8272 */
		/* 820BC144h case    3:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R27,0x2050);
		/* 820BC144h case    3:*/		return 0x820BC148;
		  /* 820BC148h */ case    4:  		/* mr R4, R16 */
		/* 820BC148h case    4:*/		regs.R4 = regs.R16;
		/* 820BC148h case    4:*/		return 0x820BC14C;
		  /* 820BC14Ch */ case    5:  		/* mr R3, R14 */
		/* 820BC14Ch case    5:*/		regs.R3 = regs.R14;
		/* 820BC14Ch case    5:*/		return 0x820BC150;
		  /* 820BC150h */ case    6:  		/* bl -46664 */
		/* 820BC150h case    6:*/		regs.LR = 0x820BC154; return 0x820B0B08;
		/* 820BC150h case    6:*/		return 0x820BC154;
		  /* 820BC154h */ case    7:  		/* or. R31, R3, R3 */
		/* 820BC154h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC154h case    7:*/		return 0x820BC158;
		  /* 820BC158h */ case    8:  		/* bc 12, CR0_LT, 8832 */
		/* 820BC158h case    8:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC158h case    8:*/		return 0x820BC15C;
		  /* 820BC15Ch */ case    9:  		/* mr R8, R25 */
		/* 820BC15Ch case    9:*/		regs.R8 = regs.R25;
		/* 820BC15Ch case    9:*/		return 0x820BC160;
		  /* 820BC160h */ case   10:  		/* mr R7, R28 */
		/* 820BC160h case   10:*/		regs.R7 = regs.R28;
		/* 820BC160h case   10:*/		return 0x820BC164;
		  /* 820BC164h */ case   11:  		/* oris R5, R27, 8256 */
		/* 820BC164h case   11:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R27,0x2040);
		/* 820BC164h case   11:*/		return 0x820BC168;
		  /* 820BC168h */ case   12:  		/* b 5572 */
		/* 820BC168h case   12:*/		return 0x820BD72C;
		/* 820BC168h case   12:*/		return 0x820BC16C;
		  /* 820BC16Ch */ case   13:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BC16Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BC16Ch case   13:*/		return 0x820BC170;
		  /* 820BC170h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 820BC170h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BC170h case   14:*/		return 0x820BC174;
		  /* 820BC174h */ case   15:  		/* bc 12, CR6_EQ, 8796 */
		/* 820BC174h case   15:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BC174h case   15:*/		return 0x820BC178;
		  /* 820BC178h */ case   16:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BC178h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BC178h case   16:*/		return 0x820BC17C;
		  /* 820BC17Ch */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 820BC17Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BC17Ch case   17:*/		return 0x820BC180;
		  /* 820BC180h */ case   18:  		/* bc 12, CR6_EQ, 8784 */
		/* 820BC180h case   18:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BC180h case   18:*/		return 0x820BC184;
		  /* 820BC184h */ case   19:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BC184h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BC184h case   19:*/		return 0x820BC188;
		  /* 820BC188h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 820BC188h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BC188h case   20:*/		return 0x820BC18C;
		  /* 820BC18Ch */ case   21:  		/* bc 12, CR6_EQ, 8772 */
		/* 820BC18Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BC18Ch case   21:*/		return 0x820BC190;
		  /* 820BC190h */ case   22:  		/* cmplwi CR6, R15, 0 */
		/* 820BC190h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BC190h case   22:*/		return 0x820BC194;
		  /* 820BC194h */ case   23:  		/* bc 12, CR6_EQ, -14280 */
		/* 820BC194h case   23:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BC194h case   23:*/		return 0x820BC198;
		  /* 820BC198h */ case   24:  		/* li R29, -1 */
		/* 820BC198h case   24:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BC198h case   24:*/		return 0x820BC19C;
		  /* 820BC19Ch */ case   25:  		/* lwz R22, <#[R1 + 148]> */
		/* 820BC19Ch case   25:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000094) );
		/* 820BC19Ch case   25:*/		return 0x820BC1A0;
		  /* 820BC1A0h */ case   26:  		/* lwz R23, <#[R1 + 144]> */
		/* 820BC1A0h case   26:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000090) );
		/* 820BC1A0h case   26:*/		return 0x820BC1A4;
		  /* 820BC1A4h */ case   27:  		/* rlwinm R24, R30, 0, 12, 31 */
		/* 820BC1A4h case   27:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R24,regs.R30);
		/* 820BC1A4h case   27:*/		return 0x820BC1A8;
		  /* 820BC1A8h */ case   28:  		/* stw R29, <#[R1 + 216]> */
		/* 820BC1A8h case   28:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000D8) );
		/* 820BC1A8h case   28:*/		return 0x820BC1AC;
		  /* 820BC1ACh */ case   29:  		/* li R9, 0 */
		/* 820BC1ACh case   29:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC1ACh case   29:*/		return 0x820BC1B0;
		  /* 820BC1B0h */ case   30:  		/* stw R29, <#[R1 + 380]> */
		/* 820BC1B0h case   30:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000017C) );
		/* 820BC1B0h case   30:*/		return 0x820BC1B4;
		  /* 820BC1B4h */ case   31:  		/* mr R8, R22 */
		/* 820BC1B4h case   31:*/		regs.R8 = regs.R22;
		/* 820BC1B4h case   31:*/		return 0x820BC1B8;
		  /* 820BC1B8h */ case   32:  		/* stw R29, <#[R1 + 408]> */
		/* 820BC1B8h case   32:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000198) );
		/* 820BC1B8h case   32:*/		return 0x820BC1BC;
		  /* 820BC1BCh */ case   33:  		/* mr R7, R23 */
		/* 820BC1BCh case   33:*/		regs.R7 = regs.R23;
		/* 820BC1BCh case   33:*/		return 0x820BC1C0;
		  /* 820BC1C0h */ case   34:  		/* stw R29, <#[R1 + 308]> */
		/* 820BC1C0h case   34:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000134) );
		/* 820BC1C0h case   34:*/		return 0x820BC1C4;
		  /* 820BC1C4h */ case   35:  		/* addi R6, R1, 216 */
		/* 820BC1C4h case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD8);
		/* 820BC1C4h case   35:*/		return 0x820BC1C8;
		  /* 820BC1C8h */ case   36:  		/* stw R29, <#[R1 + 388]> */
		/* 820BC1C8h case   36:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000184) );
		/* 820BC1C8h case   36:*/		return 0x820BC1CC;
		  /* 820BC1CCh */ case   37:  		/* oris R5, R24, 20480 */
		/* 820BC1CCh case   37:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R24,0x5000);
		/* 820BC1CCh case   37:*/		return 0x820BC1D0;
		  /* 820BC1D0h */ case   38:  		/* stw R29, <#[R1 + 392]> */
		/* 820BC1D0h case   38:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000188) );
		/* 820BC1D0h case   38:*/		return 0x820BC1D4;
		  /* 820BC1D4h */ case   39:  		/* mr R4, R16 */
		/* 820BC1D4h case   39:*/		regs.R4 = regs.R16;
		/* 820BC1D4h case   39:*/		return 0x820BC1D8;
		  /* 820BC1D8h */ case   40:  		/* stw R29, <#[R1 + 312]> */
		/* 820BC1D8h case   40:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000138) );
		/* 820BC1D8h case   40:*/		return 0x820BC1DC;
		  /* 820BC1DCh */ case   41:  		/* mr R3, R14 */
		/* 820BC1DCh case   41:*/		regs.R3 = regs.R14;
		/* 820BC1DCh case   41:*/		return 0x820BC1E0;
		  /* 820BC1E0h */ case   42:  		/* stw R29, <#[R1 + 300]> */
		/* 820BC1E0h case   42:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000012C) );
		/* 820BC1E0h case   42:*/		return 0x820BC1E4;
		  /* 820BC1E4h */ case   43:  		/* stw R29, <#[R1 + 288]> */
		/* 820BC1E4h case   43:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000120) );
		/* 820BC1E4h case   43:*/		return 0x820BC1E8;
		  /* 820BC1E8h */ case   44:  		/* stw R29, <#[R1 + 320]> */
		/* 820BC1E8h case   44:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000140) );
		/* 820BC1E8h case   44:*/		return 0x820BC1EC;
		  /* 820BC1ECh */ case   45:  		/* stw R29, <#[R1 + 292]> */
		/* 820BC1ECh case   45:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000124) );
		/* 820BC1ECh case   45:*/		return 0x820BC1F0;
		  /* 820BC1F0h */ case   46:  		/* stw R29, <#[R1 + 344]> */
		/* 820BC1F0h case   46:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000158) );
		/* 820BC1F0h case   46:*/		return 0x820BC1F4;
		  /* 820BC1F4h */ case   47:  		/* stw R29, <#[R1 + 328]> */
		/* 820BC1F4h case   47:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000148) );
		/* 820BC1F4h case   47:*/		return 0x820BC1F8;
		  /* 820BC1F8h */ case   48:  		/* stw R29, <#[R1 + 336]> */
		/* 820BC1F8h case   48:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000150) );
		/* 820BC1F8h case   48:*/		return 0x820BC1FC;
		  /* 820BC1FCh */ case   49:  		/* stw R29, <#[R1 + 352]> */
		/* 820BC1FCh case   49:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000160) );
		/* 820BC1FCh case   49:*/		return 0x820BC200;
		  /* 820BC200h */ case   50:  		/* bl -46840 */
		/* 820BC200h case   50:*/		regs.LR = 0x820BC204; return 0x820B0B08;
		/* 820BC200h case   50:*/		return 0x820BC204;
		  /* 820BC204h */ case   51:  		/* or. R31, R3, R3 */
		/* 820BC204h case   51:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC204h case   51:*/		return 0x820BC208;
		  /* 820BC208h */ case   52:  		/* bc 12, CR0_LT, 8656 */
		/* 820BC208h case   52:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC208h case   52:*/		return 0x820BC20C;
		  /* 820BC20Ch */ case   53:  		/* lis R11, 8272 */
		/* 820BC20Ch case   53:*/		cpu::op::lis<0>(regs,&regs.R11,0x2050);
		/* 820BC20Ch case   53:*/		return 0x820BC210;
		  /* 820BC210h */ case   54:  		/* li R9, 4 */
		/* 820BC210h case   54:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BC210h case   54:*/		return 0x820BC214;
		  /* 820BC214h */ case   55:  		/* ori R28, R11, 1 */
		/* 820BC214h case   55:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R11,0x1);
		/* 820BC214h case   55:*/		return 0x820BC218;
		  /* 820BC218h */ case   56:  		/* addi R8, R1, 216 */
		/* 820BC218h case   56:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xD8);
		/* 820BC218h case   56:*/		return 0x820BC21C;
		  /* 820BC21Ch */ case   57:  		/* addi R7, R1, 216 */
		/* 820BC21Ch case   57:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD8);
		/* 820BC21Ch case   57:*/		return 0x820BC220;
		  /* 820BC220h */ case   58:  		/* addi R6, R1, 380 */
		/* 820BC220h case   58:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x17C);
		/* 820BC220h case   58:*/		return 0x820BC224;
		  /* 820BC224h */ case   59:  		/* mr R5, R28 */
		/* 820BC224h case   59:*/		regs.R5 = regs.R28;
		/* 820BC224h case   59:*/		return 0x820BC228;
		  /* 820BC228h */ case   60:  		/* mr R4, R16 */
		/* 820BC228h case   60:*/		regs.R4 = regs.R16;
		/* 820BC228h case   60:*/		return 0x820BC22C;
		  /* 820BC22Ch */ case   61:  		/* mr R3, R14 */
		/* 820BC22Ch case   61:*/		regs.R3 = regs.R14;
		/* 820BC22Ch case   61:*/		return 0x820BC230;
		  /* 820BC230h */ case   62:  		/* bl -46888 */
		/* 820BC230h case   62:*/		regs.LR = 0x820BC234; return 0x820B0B08;
		/* 820BC230h case   62:*/		return 0x820BC234;
		  /* 820BC234h */ case   63:  		/* or. R31, R3, R3 */
		/* 820BC234h case   63:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC234h case   63:*/		return 0x820BC238;
		  /* 820BC238h */ case   64:  		/* bc 12, CR0_LT, 8608 */
		/* 820BC238h case   64:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC238h case   64:*/		return 0x820BC23C;
		  /* 820BC23Ch */ case   65:  		/* lwz R26, <#[R1 + 152]> */
		/* 820BC23Ch case   65:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000098) );
		/* 820BC23Ch case   65:*/		return 0x820BC240;
		  /* 820BC240h */ case   66:  		/* li R9, 4 */
		/* 820BC240h case   66:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BC240h case   66:*/		return 0x820BC244;
		  /* 820BC244h */ case   67:  		/* addi R6, R1, 408 */
		/* 820BC244h case   67:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x198);
		/* 820BC244h case   67:*/		return 0x820BC248;
		  /* 820BC248h */ case   68:  		/* mr R8, R26 */
		/* 820BC248h case   68:*/		regs.R8 = regs.R26;
		/* 820BC248h case   68:*/		return 0x820BC24C;
		  /* 820BC24Ch */ case   69:  		/* mr R7, R26 */
		/* 820BC24Ch case   69:*/		regs.R7 = regs.R26;
		/* 820BC24Ch case   69:*/		return 0x820BC250;
		  /* 820BC250h */ case   70:  		/* mr R5, R28 */
		/* 820BC250h case   70:*/		regs.R5 = regs.R28;
		/* 820BC250h case   70:*/		return 0x820BC254;
		  /* 820BC254h */ case   71:  		/* mr R4, R16 */
		/* 820BC254h case   71:*/		regs.R4 = regs.R16;
		/* 820BC254h case   71:*/		return 0x820BC258;
		  /* 820BC258h */ case   72:  		/* mr R3, R14 */
		/* 820BC258h case   72:*/		regs.R3 = regs.R14;
		/* 820BC258h case   72:*/		return 0x820BC25C;
		  /* 820BC25Ch */ case   73:  		/* bl -46932 */
		/* 820BC25Ch case   73:*/		regs.LR = 0x820BC260; return 0x820B0B08;
		/* 820BC25Ch case   73:*/		return 0x820BC260;
		  /* 820BC260h */ case   74:  		/* or. R31, R3, R3 */
		/* 820BC260h case   74:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC260h case   74:*/		return 0x820BC264;
		  /* 820BC264h */ case   75:  		/* bc 12, CR0_LT, 8564 */
		/* 820BC264h case   75:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC264h case   75:*/		return 0x820BC268;
		  /* 820BC268h */ case   76:  		/* lis R5, 4112 */
		/* 820BC268h case   76:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BC268h case   76:*/		return 0x820BC26C;
		  /* 820BC26Ch */ case   77:  		/* li R9, 8 */
		/* 820BC26Ch case   77:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BC26Ch case   77:*/		return 0x820BC270;
		  /* 820BC270h */ case   78:  		/* li R8, 0 */
		/* 820BC270h case   78:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC270h case   78:*/		return 0x820BC274;
		  /* 820BC274h */ case   79:  		/* addi R7, R1, 380 */
		/* 820BC274h case   79:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x17C);
		/* 820BC274h case   79:*/		return 0x820BC278;
		  /* 820BC278h */ case   80:  		/* addi R6, R1, 308 */
		/* 820BC278h case   80:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x134);
		/* 820BC278h case   80:*/		return 0x820BC27C;
		  /* 820BC27Ch */ case   81:  		/* ori R5, R5, 1 */
		/* 820BC27Ch case   81:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BC27Ch case   81:*/		return 0x820BC280;
		  /* 820BC280h */ case   82:  		/* mr R4, R16 */
		/* 820BC280h case   82:*/		regs.R4 = regs.R16;
		/* 820BC280h case   82:*/		return 0x820BC284;
		  /* 820BC284h */ case   83:  		/* mr R3, R14 */
		/* 820BC284h case   83:*/		regs.R3 = regs.R14;
		/* 820BC284h case   83:*/		return 0x820BC288;
		  /* 820BC288h */ case   84:  		/* bl -46976 */
		/* 820BC288h case   84:*/		regs.LR = 0x820BC28C; return 0x820B0B08;
		/* 820BC288h case   84:*/		return 0x820BC28C;
		  /* 820BC28Ch */ case   85:  		/* or. R31, R3, R3 */
		/* 820BC28Ch case   85:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC28Ch case   85:*/		return 0x820BC290;
		  /* 820BC290h */ case   86:  		/* bc 12, CR0_LT, 8520 */
		/* 820BC290h case   86:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC290h case   86:*/		return 0x820BC294;
		  /* 820BC294h */ case   87:  		/* lis R11, 8256 */
		/* 820BC294h case   87:*/		cpu::op::lis<0>(regs,&regs.R11,0x2040);
		/* 820BC294h case   87:*/		return 0x820BC298;
		  /* 820BC298h */ case   88:  		/* addi R27, R14, 32 */
		/* 820BC298h case   88:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R14,0x20);
		/* 820BC298h case   88:*/		return 0x820BC29C;
		  /* 820BC29Ch */ case   89:  		/* ori R25, R11, 1 */
		/* 820BC29Ch case   89:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R11,0x1);
		/* 820BC29Ch case   89:*/		return 0x820BC2A0;
		  /* 820BC2A0h */ case   90:  		/* li R9, 0 */
		/* 820BC2A0h case   90:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC2A0h case   90:*/		return 0x820BC2A4;
		  /* 820BC2A4h */ case   91:  		/* addi R8, R1, 308 */
		/* 820BC2A4h case   91:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x134);
		/* 820BC2A4h case   91:*/		return 0x820BC2A8;
		  /* 820BC2A8h */ case   92:  		/* mr R7, R27 */
		/* 820BC2A8h case   92:*/		regs.R7 = regs.R27;
		/* 820BC2A8h case   92:*/		return 0x820BC2AC;
		  /* 820BC2ACh */ case   93:  		/* addi R6, R1, 388 */
		/* 820BC2ACh case   93:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x184);
		/* 820BC2ACh case   93:*/		return 0x820BC2B0;
		  /* 820BC2B0h */ case   94:  		/* mr R5, R25 */
		/* 820BC2B0h case   94:*/		regs.R5 = regs.R25;
		/* 820BC2B0h case   94:*/		return 0x820BC2B4;
		  /* 820BC2B4h */ case   95:  		/* mr R4, R16 */
		/* 820BC2B4h case   95:*/		regs.R4 = regs.R16;
		/* 820BC2B4h case   95:*/		return 0x820BC2B8;
		  /* 820BC2B8h */ case   96:  		/* mr R3, R14 */
		/* 820BC2B8h case   96:*/		regs.R3 = regs.R14;
		/* 820BC2B8h case   96:*/		return 0x820BC2BC;
		  /* 820BC2BCh */ case   97:  		/* bl -47028 */
		/* 820BC2BCh case   97:*/		regs.LR = 0x820BC2C0; return 0x820B0B08;
		/* 820BC2BCh case   97:*/		return 0x820BC2C0;
		  /* 820BC2C0h */ case   98:  		/* or. R31, R3, R3 */
		/* 820BC2C0h case   98:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC2C0h case   98:*/		return 0x820BC2C4;
		  /* 820BC2C4h */ case   99:  		/* bc 12, CR0_LT, 8468 */
		/* 820BC2C4h case   99:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC2C4h case   99:*/		return 0x820BC2C8;
		  /* 820BC2C8h */ case  100:  		/* li R9, 0 */
		/* 820BC2C8h case  100:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC2C8h case  100:*/		return 0x820BC2CC;
		  /* 820BC2CCh */ case  101:  		/* addi R8, R1, 388 */
		/* 820BC2CCh case  101:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x184);
		/* 820BC2CCh case  101:*/		return 0x820BC2D0;
		  /* 820BC2D0h */ case  102:  		/* addi R7, R1, 408 */
		/* 820BC2D0h case  102:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x198);
		/* 820BC2D0h case  102:*/		return 0x820BC2D4;
		  /* 820BC2D4h */ case  103:  		/* addi R6, R1, 392 */
		/* 820BC2D4h case  103:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x188);
		/* 820BC2D4h case  103:*/		return 0x820BC2D8;
		  /* 820BC2D8h */ case  104:  		/* mr R5, R28 */
		/* 820BC2D8h case  104:*/		regs.R5 = regs.R28;
		/* 820BC2D8h case  104:*/		return 0x820BC2DC;
		  /* 820BC2DCh */ case  105:  		/* mr R4, R16 */
		/* 820BC2DCh case  105:*/		regs.R4 = regs.R16;
		/* 820BC2DCh case  105:*/		return 0x820BC2E0;
		  /* 820BC2E0h */ case  106:  		/* mr R3, R14 */
		/* 820BC2E0h case  106:*/		regs.R3 = regs.R14;
		/* 820BC2E0h case  106:*/		return 0x820BC2E4;
		  /* 820BC2E4h */ case  107:  		/* bl -47068 */
		/* 820BC2E4h case  107:*/		regs.LR = 0x820BC2E8; return 0x820B0B08;
		/* 820BC2E4h case  107:*/		return 0x820BC2E8;
		  /* 820BC2E8h */ case  108:  		/* or. R31, R3, R3 */
		/* 820BC2E8h case  108:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC2E8h case  108:*/		return 0x820BC2EC;
		  /* 820BC2ECh */ case  109:  		/* bc 12, CR0_LT, 8428 */
		/* 820BC2ECh case  109:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC2ECh case  109:*/		return 0x820BC2F0;
		  /* 820BC2F0h */ case  110:  		/* lis R5, 4112 */
		/* 820BC2F0h case  110:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BC2F0h case  110:*/		return 0x820BC2F4;
		  /* 820BC2F4h */ case  111:  		/* li R9, 0 */
		/* 820BC2F4h case  111:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC2F4h case  111:*/		return 0x820BC2F8;
		  /* 820BC2F8h */ case  112:  		/* li R8, 0 */
		/* 820BC2F8h case  112:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC2F8h case  112:*/		return 0x820BC2FC;
		  /* 820BC2FCh */ case  113:  		/* addi R7, R1, 392 */
		/* 820BC2FCh case  113:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x188);
		/* 820BC2FCh case  113:*/		return 0x820BC300;
		  /* 820BC300h */ case  114:  		/* addi R6, R1, 312 */
		/* 820BC300h case  114:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x138);
		/* 820BC300h case  114:*/		return 0x820BC304;
		  /* 820BC304h */ case  115:  		/* ori R5, R5, 1 */
		/* 820BC304h case  115:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BC304h case  115:*/		return 0x820BC308;
		  /* 820BC308h */ case  116:  		/* mr R4, R16 */
		/* 820BC308h case  116:*/		regs.R4 = regs.R16;
		/* 820BC308h case  116:*/		return 0x820BC30C;
		  /* 820BC30Ch */ case  117:  		/* mr R3, R14 */
		/* 820BC30Ch case  117:*/		regs.R3 = regs.R14;
		/* 820BC30Ch case  117:*/		return 0x820BC310;
		  /* 820BC310h */ case  118:  		/* bl -47112 */
		/* 820BC310h case  118:*/		regs.LR = 0x820BC314; return 0x820B0B08;
		/* 820BC310h case  118:*/		return 0x820BC314;
		  /* 820BC314h */ case  119:  		/* or. R31, R3, R3 */
		/* 820BC314h case  119:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC314h case  119:*/		return 0x820BC318;
		  /* 820BC318h */ case  120:  		/* bc 12, CR0_LT, 8384 */
		/* 820BC318h case  120:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC318h case  120:*/		return 0x820BC31C;
		  /* 820BC31Ch */ case  121:  		/* li R9, 0 */
		/* 820BC31Ch case  121:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC31Ch case  121:*/		return 0x820BC320;
		  /* 820BC320h */ case  122:  		/* addi R8, R1, 312 */
		/* 820BC320h case  122:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x138);
		/* 820BC320h case  122:*/		return 0x820BC324;
		  /* 820BC324h */ case  123:  		/* mr R7, R27 */
		/* 820BC324h case  123:*/		regs.R7 = regs.R27;
		/* 820BC324h case  123:*/		return 0x820BC328;
		  /* 820BC328h */ case  124:  		/* addi R6, R1, 300 */
		/* 820BC328h case  124:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x12C);
		/* 820BC328h case  124:*/		return 0x820BC32C;
		  /* 820BC32Ch */ case  125:  		/* mr R5, R25 */
		/* 820BC32Ch case  125:*/		regs.R5 = regs.R25;
		/* 820BC32Ch case  125:*/		return 0x820BC330;
		  /* 820BC330h */ case  126:  		/* mr R4, R16 */
		/* 820BC330h case  126:*/		regs.R4 = regs.R16;
		/* 820BC330h case  126:*/		return 0x820BC334;
		  /* 820BC334h */ case  127:  		/* mr R3, R14 */
		/* 820BC334h case  127:*/		regs.R3 = regs.R14;
		/* 820BC334h case  127:*/		return 0x820BC338;
		  /* 820BC338h */ case  128:  		/* bl -47152 */
		/* 820BC338h case  128:*/		regs.LR = 0x820BC33C; return 0x820B0B08;
		/* 820BC338h case  128:*/		return 0x820BC33C;
		  /* 820BC33Ch */ case  129:  		/* or. R31, R3, R3 */
		/* 820BC33Ch case  129:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC33Ch case  129:*/		return 0x820BC340;
		  /* 820BC340h */ case  130:  		/* bc 12, CR0_LT, 8344 */
		/* 820BC340h case  130:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC340h case  130:*/		return 0x820BC344;
		  /* 820BC344h */ case  131:  		/* lis R5, 8240 */
		/* 820BC344h case  131:*/		cpu::op::lis<0>(regs,&regs.R5,0x2030);
		/* 820BC344h case  131:*/		return 0x820BC348;
		  /* 820BC348h */ case  132:  		/* li R9, 23 */
		/* 820BC348h case  132:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BC348h case  132:*/		return 0x820BC34C;
		  /* 820BC34Ch */ case  133:  		/* addi R8, R14, 36 */
		/* 820BC34Ch case  133:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R14,0x24);
		/* 820BC34Ch case  133:*/		return 0x820BC350;
		  /* 820BC350h */ case  134:  		/* addi R7, R1, 300 */
		/* 820BC350h case  134:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x12C);
		/* 820BC350h case  134:*/		return 0x820BC354;
		  /* 820BC354h */ case  135:  		/* addi R6, R1, 288 */
		/* 820BC354h case  135:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x120);
		/* 820BC354h case  135:*/		return 0x820BC358;
		  /* 820BC358h */ case  136:  		/* ori R5, R5, 1 */
		/* 820BC358h case  136:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BC358h case  136:*/		return 0x820BC35C;
		  /* 820BC35Ch */ case  137:  		/* mr R4, R16 */
		/* 820BC35Ch case  137:*/		regs.R4 = regs.R16;
		/* 820BC35Ch case  137:*/		return 0x820BC360;
		  /* 820BC360h */ case  138:  		/* mr R3, R14 */
		/* 820BC360h case  138:*/		regs.R3 = regs.R14;
		/* 820BC360h case  138:*/		return 0x820BC364;
		  /* 820BC364h */ case  139:  		/* bl -47196 */
		/* 820BC364h case  139:*/		regs.LR = 0x820BC368; return 0x820B0B08;
		/* 820BC364h case  139:*/		return 0x820BC368;
		  /* 820BC368h */ case  140:  		/* or. R31, R3, R3 */
		/* 820BC368h case  140:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC368h case  140:*/		return 0x820BC36C;
		  /* 820BC36Ch */ case  141:  		/* bc 12, CR0_LT, 8300 */
		/* 820BC36Ch case  141:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC36Ch case  141:*/		return 0x820BC370;
		  /* 820BC370h */ case  142:  		/* li R9, 4 */
		/* 820BC370h case  142:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BC370h case  142:*/		return 0x820BC374;
		  /* 820BC374h */ case  143:  		/* addi R8, R1, 288 */
		/* 820BC374h case  143:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x120);
		/* 820BC374h case  143:*/		return 0x820BC378;
		  /* 820BC378h */ case  144:  		/* addi R7, R1, 300 */
		/* 820BC378h case  144:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x12C);
		/* 820BC378h case  144:*/		return 0x820BC37C;
		  /* 820BC37Ch */ case  145:  		/* addi R6, R1, 320 */
		/* 820BC37Ch case  145:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x140);
		/* 820BC37Ch case  145:*/		return 0x820BC380;
		  /* 820BC380h */ case  146:  		/* mr R5, R28 */
		/* 820BC380h case  146:*/		regs.R5 = regs.R28;
		/* 820BC380h case  146:*/		return 0x820BC384;
		  /* 820BC384h */ case  147:  		/* mr R4, R16 */
		/* 820BC384h case  147:*/		regs.R4 = regs.R16;
		/* 820BC384h case  147:*/		return 0x820BC388;
		  /* 820BC388h */ case  148:  		/* mr R3, R14 */
		/* 820BC388h case  148:*/		regs.R3 = regs.R14;
		/* 820BC388h case  148:*/		return 0x820BC38C;
		  /* 820BC38Ch */ case  149:  		/* bl -47236 */
		/* 820BC38Ch case  149:*/		regs.LR = 0x820BC390; return 0x820B0B08;
		/* 820BC38Ch case  149:*/		return 0x820BC390;
		  /* 820BC390h */ case  150:  		/* or. R31, R3, R3 */
		/* 820BC390h case  150:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC390h case  150:*/		return 0x820BC394;
		  /* 820BC394h */ case  151:  		/* bc 12, CR0_LT, 8260 */
		/* 820BC394h case  151:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC394h case  151:*/		return 0x820BC398;
		  /* 820BC398h */ case  152:  		/* li R9, 0 */
		/* 820BC398h case  152:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC398h case  152:*/		return 0x820BC39C;
		  /* 820BC39Ch */ case  153:  		/* addi R8, R1, 288 */
		/* 820BC39Ch case  153:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x120);
		/* 820BC39Ch case  153:*/		return 0x820BC3A0;
		  /* 820BC3A0h */ case  154:  		/* mr R7, R26 */
		/* 820BC3A0h case  154:*/		regs.R7 = regs.R26;
		/* 820BC3A0h case  154:*/		return 0x820BC3A4;
		  /* 820BC3A4h */ case  155:  		/* addi R6, R1, 292 */
		/* 820BC3A4h case  155:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x124);
		/* 820BC3A4h case  155:*/		return 0x820BC3A8;
		  /* 820BC3A8h */ case  156:  		/* mr R5, R28 */
		/* 820BC3A8h case  156:*/		regs.R5 = regs.R28;
		/* 820BC3A8h case  156:*/		return 0x820BC3AC;
		  /* 820BC3ACh */ case  157:  		/* mr R4, R16 */
		/* 820BC3ACh case  157:*/		regs.R4 = regs.R16;
		/* 820BC3ACh case  157:*/		return 0x820BC3B0;
		  /* 820BC3B0h */ case  158:  		/* mr R3, R14 */
		/* 820BC3B0h case  158:*/		regs.R3 = regs.R14;
		/* 820BC3B0h case  158:*/		return 0x820BC3B4;
		  /* 820BC3B4h */ case  159:  		/* bl -47276 */
		/* 820BC3B4h case  159:*/		regs.LR = 0x820BC3B8; return 0x820B0B08;
		/* 820BC3B4h case  159:*/		return 0x820BC3B8;
		  /* 820BC3B8h */ case  160:  		/* or. R31, R3, R3 */
		/* 820BC3B8h case  160:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC3B8h case  160:*/		return 0x820BC3BC;
		  /* 820BC3BCh */ case  161:  		/* bc 12, CR0_LT, 8220 */
		/* 820BC3BCh case  161:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC3BCh case  161:*/		return 0x820BC3C0;
		  /* 820BC3C0h */ case  162:  		/* li R9, 0 */
		/* 820BC3C0h case  162:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC3C0h case  162:*/		return 0x820BC3C4;
		  /* 820BC3C4h */ case  163:  		/* addi R8, R1, 216 */
		/* 820BC3C4h case  163:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xD8);
		/* 820BC3C4h case  163:*/		return 0x820BC3C8;
		  /* 820BC3C8h */ case  164:  		/* addi R7, R1, 292 */
		/* 820BC3C8h case  164:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x124);
		/* 820BC3C8h case  164:*/		return 0x820BC3CC;
		  /* 820BC3CCh */ case  165:  		/* addi R6, R1, 344 */
		/* 820BC3CCh case  165:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x158);
		/* 820BC3CCh case  165:*/		return 0x820BC3D0;
		  /* 820BC3D0h */ case  166:  		/* mr R5, R28 */
		/* 820BC3D0h case  166:*/		regs.R5 = regs.R28;
		/* 820BC3D0h case  166:*/		return 0x820BC3D4;
		  /* 820BC3D4h */ case  167:  		/* mr R4, R16 */
		/* 820BC3D4h case  167:*/		regs.R4 = regs.R16;
		/* 820BC3D4h case  167:*/		return 0x820BC3D8;
		  /* 820BC3D8h */ case  168:  		/* mr R3, R14 */
		/* 820BC3D8h case  168:*/		regs.R3 = regs.R14;
		/* 820BC3D8h case  168:*/		return 0x820BC3DC;
		  /* 820BC3DCh */ case  169:  		/* bl -47316 */
		/* 820BC3DCh case  169:*/		regs.LR = 0x820BC3E0; return 0x820B0B08;
		/* 820BC3DCh case  169:*/		return 0x820BC3E0;
		  /* 820BC3E0h */ case  170:  		/* or. R31, R3, R3 */
		/* 820BC3E0h case  170:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC3E0h case  170:*/		return 0x820BC3E4;
		  /* 820BC3E4h */ case  171:  		/* bc 12, CR0_LT, 8180 */
		/* 820BC3E4h case  171:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC3E4h case  171:*/		return 0x820BC3E8;
		  /* 820BC3E8h */ case  172:  		/* lis R5, 4208 */
		/* 820BC3E8h case  172:*/		cpu::op::lis<0>(regs,&regs.R5,0x1070);
		/* 820BC3E8h case  172:*/		return 0x820BC3EC;
		  /* 820BC3ECh */ case  173:  		/* li R9, 4 */
		/* 820BC3ECh case  173:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BC3ECh case  173:*/		return 0x820BC3F0;
		  /* 820BC3F0h */ case  174:  		/* li R8, 0 */
		/* 820BC3F0h case  174:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC3F0h case  174:*/		return 0x820BC3F4;
		  /* 820BC3F4h */ case  175:  		/* addi R7, R1, 320 */
		/* 820BC3F4h case  175:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x140);
		/* 820BC3F4h case  175:*/		return 0x820BC3F8;
		  /* 820BC3F8h */ case  176:  		/* addi R6, R1, 328 */
		/* 820BC3F8h case  176:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x148);
		/* 820BC3F8h case  176:*/		return 0x820BC3FC;
		  /* 820BC3FCh */ case  177:  		/* ori R5, R5, 1 */
		/* 820BC3FCh case  177:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BC3FCh case  177:*/		return 0x820BC400;
		  /* 820BC400h */ case  178:  		/* mr R4, R16 */
		/* 820BC400h case  178:*/		regs.R4 = regs.R16;
		/* 820BC400h case  178:*/		return 0x820BC404;
		  /* 820BC404h */ case  179:  		/* mr R3, R14 */
		/* 820BC404h case  179:*/		regs.R3 = regs.R14;
		/* 820BC404h case  179:*/		return 0x820BC408;
		  /* 820BC408h */ case  180:  		/* bl -47360 */
		/* 820BC408h case  180:*/		regs.LR = 0x820BC40C; return 0x820B0B08;
		/* 820BC408h case  180:*/		return 0x820BC40C;
		  /* 820BC40Ch */ case  181:  		/* or. R31, R3, R3 */
		/* 820BC40Ch case  181:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC40Ch case  181:*/		return 0x820BC410;
		  /* 820BC410h */ case  182:  		/* bc 12, CR0_LT, 8136 */
		/* 820BC410h case  182:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC410h case  182:*/		return 0x820BC414;
		  /* 820BC414h */ case  183:  		/* lis R5, 4144 */
		/* 820BC414h case  183:*/		cpu::op::lis<0>(regs,&regs.R5,0x1030);
		/* 820BC414h case  183:*/		return 0x820BC418;
		  /* 820BC418h */ case  184:  		/* li R9, 4 */
		/* 820BC418h case  184:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BC418h case  184:*/		return 0x820BC41C;
		  /* 820BC41Ch */ case  185:  		/* li R8, 0 */
		/* 820BC41Ch case  185:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC41Ch case  185:*/		return 0x820BC420;
		  /* 820BC420h */ case  186:  		/* addi R7, R1, 328 */
		/* 820BC420h case  186:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x148);
		/* 820BC420h case  186:*/		return 0x820BC424;
		  /* 820BC424h */ case  187:  		/* addi R6, R1, 336 */
		/* 820BC424h case  187:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x150);
		/* 820BC424h case  187:*/		return 0x820BC428;
		  /* 820BC428h */ case  188:  		/* ori R5, R5, 1 */
		/* 820BC428h case  188:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BC428h case  188:*/		return 0x820BC42C;
		  /* 820BC42Ch */ case  189:  		/* mr R4, R16 */
		/* 820BC42Ch case  189:*/		regs.R4 = regs.R16;
		/* 820BC42Ch case  189:*/		return 0x820BC430;
		  /* 820BC430h */ case  190:  		/* mr R3, R14 */
		/* 820BC430h case  190:*/		regs.R3 = regs.R14;
		/* 820BC430h case  190:*/		return 0x820BC434;
		  /* 820BC434h */ case  191:  		/* bl -47404 */
		/* 820BC434h case  191:*/		regs.LR = 0x820BC438; return 0x820B0B08;
		/* 820BC434h case  191:*/		return 0x820BC438;
		  /* 820BC438h */ case  192:  		/* or. R31, R3, R3 */
		/* 820BC438h case  192:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC438h case  192:*/		return 0x820BC43C;
		  /* 820BC43Ch */ case  193:  		/* bc 12, CR0_LT, 8092 */
		/* 820BC43Ch case  193:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC43Ch case  193:*/		return 0x820BC440;
		  /* 820BC440h */ case  194:  		/* li R9, 0 */
		/* 820BC440h case  194:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC440h case  194:*/		return 0x820BC444;
		  /* 820BC444h */ case  195:  		/* addi R8, R1, 336 */
		/* 820BC444h case  195:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x150);
		/* 820BC444h case  195:*/		return 0x820BC448;
		  /* 820BC448h */ case  196:  		/* addi R7, R1, 344 */
		/* 820BC448h case  196:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x158);
		/* 820BC448h case  196:*/		return 0x820BC44C;
		  /* 820BC44Ch */ case  197:  		/* addi R6, R1, 352 */
		/* 820BC44Ch case  197:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x160);
		/* 820BC44Ch case  197:*/		return 0x820BC450;
		  /* 820BC450h */ case  198:  		/* mr R5, R25 */
		/* 820BC450h case  198:*/		regs.R5 = regs.R25;
		/* 820BC450h case  198:*/		return 0x820BC454;
		  /* 820BC454h */ case  199:  		/* mr R4, R16 */
		/* 820BC454h case  199:*/		regs.R4 = regs.R16;
		/* 820BC454h case  199:*/		return 0x820BC458;
		  /* 820BC458h */ case  200:  		/* mr R3, R14 */
		/* 820BC458h case  200:*/		regs.R3 = regs.R14;
		/* 820BC458h case  200:*/		return 0x820BC45C;
		  /* 820BC45Ch */ case  201:  		/* bl -47444 */
		/* 820BC45Ch case  201:*/		regs.LR = 0x820BC460; return 0x820B0B08;
		/* 820BC45Ch case  201:*/		return 0x820BC460;
		  /* 820BC460h */ case  202:  		/* or. R31, R3, R3 */
		/* 820BC460h case  202:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC460h case  202:*/		return 0x820BC464;
		  /* 820BC464h */ case  203:  		/* bc 12, CR0_LT, 8052 */
		/* 820BC464h case  203:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC464h case  203:*/		return 0x820BC468;
		  /* 820BC468h */ case  204:  		/* mulli R4, R30, 5 */
		/* 820BC468h case  204:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x5);
		/* 820BC468h case  204:*/		return 0x820BC46C;
		  /* 820BC46Ch */ case  205:  		/* mr R3, R14 */
		/* 820BC46Ch case  205:*/		regs.R3 = regs.R14;
		/* 820BC46Ch case  205:*/		return 0x820BC470;
		  /* 820BC470h */ case  206:  		/* bl -48512 */
		/* 820BC470h case  206:*/		regs.LR = 0x820BC474; return 0x820B06F0;
		/* 820BC470h case  206:*/		return 0x820BC474;
		  /* 820BC474h */ case  207:  		/* or. R11, R3, R3 */
		/* 820BC474h case  207:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BC474h case  207:*/		return 0x820BC478;
		  /* 820BC478h */ case  208:  		/* bc 12, CR0_EQ, 4008 */
		/* 820BC478h case  208:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BC478h case  208:*/		return 0x820BC47C;
		  /* 820BC47Ch */ case  209:  		/* li R10, 5 */
		/* 820BC47Ch case  209:*/		cpu::op::li<0>(regs,&regs.R10,0x5);
		/* 820BC47Ch case  209:*/		return 0x820BC480;
		  /* 820BC480h */ case  210:  		/* addi R9, R1, 156 */
		/* 820BC480h case  210:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x9C);
		/* 820BC480h case  210:*/		return 0x820BC484;
		  /* 820BC484h */ case  211:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BC484h case  211:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BC484h case  211:*/		return 0x820BC488;
		  /* 820BC488h */ case  212:  		/* mtspr CTR, R10 */
		/* 820BC488h case  212:*/		regs.CTR = regs.R10;
		/* 820BC488h case  212:*/		return 0x820BC48C;
		  /* 820BC48Ch */ case  213:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BC48Ch case  213:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BC48Ch case  213:*/		return 0x820BC490;
		  /* 820BC490h */ case  214:  		/* add R11, R8, R11 */
		/* 820BC490h case  214:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BC490h case  214:*/		return 0x820BC494;
		  /* 820BC494h */ case  215:  		/* bc 16, CR0_LT, -8 */
		/* 820BC494h case  215:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC48C;  }
		/* 820BC494h case  215:*/		return 0x820BC498;
		  /* 820BC498h */ case  216:  		/* lwz R25, <#[R1 + 176]> */
		/* 820BC498h case  216:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BC498h case  216:*/		return 0x820BC49C;
		  /* 820BC49Ch */ case  217:  		/* cmplwi CR6, R30, 0 */
		/* 820BC49Ch case  217:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC49Ch case  217:*/		return 0x820BC4A0;
		  /* 820BC4A0h */ case  218:  		/* lwz R7, <#[R1 + 172]> */
		/* 820BC4A0h case  218:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BC4A0h case  218:*/		return 0x820BC4A4;
		  /* 820BC4A4h */ case  219:  		/* bc 12, CR6_EQ, 40 */
		/* 820BC4A4h case  219:*/		if ( regs.CR[6].eq ) { return 0x820BC4CC;  }
		/* 820BC4A4h case  219:*/		return 0x820BC4A8;
		  /* 820BC4A8h */ case  220:  		/* mr R11, R25 */
		/* 820BC4A8h case  220:*/		regs.R11 = regs.R25;
		/* 820BC4A8h case  220:*/		return 0x820BC4AC;
		  /* 820BC4ACh */ case  221:  		/* mtspr CTR, R30 */
		/* 820BC4ACh case  221:*/		regs.CTR = regs.R30;
		/* 820BC4ACh case  221:*/		return 0x820BC4B0;
		  /* 820BC4B0h */ case  222:  		/* subf R10, R25, R7 */
		/* 820BC4B0h case  222:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R25,regs.R7);
		/* 820BC4B0h case  222:*/		return 0x820BC4B4;
		  /* 820BC4B4h */ case  223:  		/* lwz R9, <#[R1 + 292]> */
		/* 820BC4B4h case  223:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000124) );
		/* 820BC4B4h case  223:*/		return 0x820BC4B8;
		  /* 820BC4B8h */ case  224:  		/* stwx R9, <#[R10 + R11]> */
		/* 820BC4B8h case  224:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BC4B8h case  224:*/		return 0x820BC4BC;
		  /* 820BC4BCh */ case  225:  		/* lwz R9, <#[R1 + 352]> */
		/* 820BC4BCh case  225:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000160) );
		/* 820BC4BCh case  225:*/		return 0x820BC4C0;
		  /* 820BC4C0h */ case  226:  		/* stw R9, <#[R11]> */
		/* 820BC4C0h case  226:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BC4C0h case  226:*/		return 0x820BC4C4;
		  /* 820BC4C4h */ case  227:  		/* addi R11, R11, 4 */
		/* 820BC4C4h case  227:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BC4C4h case  227:*/		return 0x820BC4C8;
		  /* 820BC4C8h */ case  228:  		/* bc 16, CR0_LT, -20 */
		/* 820BC4C8h case  228:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC4B4;  }
		/* 820BC4C8h case  228:*/		return 0x820BC4CC;
	}
	return 0x820BC4CC;
} // Block from 820BC138h-820BC4CCh (229 instructions)

//////////////////////////////////////////////////////
// Block at 820BC4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC4CC);
		  /* 820BC4CCh */ case    0:  		/* lwz R26, <#[R1 + 160]> */
		/* 820BC4CCh case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BC4CCh case    0:*/		return 0x820BC4D0;
		  /* 820BC4D0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC4D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC4D0h case    1:*/		return 0x820BC4D4;
		  /* 820BC4D4h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC4D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC4F4;  }
		/* 820BC4D4h case    2:*/		return 0x820BC4D8;
		  /* 820BC4D8h */ case    3:  		/* addi R11, R26, -4 */
		/* 820BC4D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BC4D8h case    3:*/		return 0x820BC4DC;
		  /* 820BC4DCh */ case    4:  		/* mr R10, R29 */
		/* 820BC4DCh case    4:*/		regs.R10 = regs.R29;
		/* 820BC4DCh case    4:*/		return 0x820BC4E0;
		  /* 820BC4E0h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC4E0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC4E0h case    5:*/		return 0x820BC4E4;
		  /* 820BC4E4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC4E4h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC4F4;  }
		/* 820BC4E4h case    6:*/		return 0x820BC4E8;
		  /* 820BC4E8h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC4E8h case    7:*/		regs.CTR = regs.R30;
		/* 820BC4E8h case    7:*/		return 0x820BC4EC;
		  /* 820BC4ECh */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC4ECh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC4ECh case    8:*/		return 0x820BC4F0;
		  /* 820BC4F0h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC4F0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC4EC;  }
		/* 820BC4F0h case    9:*/		return 0x820BC4F4;
	}
	return 0x820BC4F4;
} // Block from 820BC4CCh-820BC4F4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC4F4);
		  /* 820BC4F4h */ case    0:  		/* lwz R27, <#[R1 + 164]> */
		/* 820BC4F4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BC4F4h case    0:*/		return 0x820BC4F8;
		  /* 820BC4F8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC4F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC4F8h case    1:*/		return 0x820BC4FC;
		  /* 820BC4FCh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC4FCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC51C;  }
		/* 820BC4FCh case    2:*/		return 0x820BC500;
		  /* 820BC500h */ case    3:  		/* addi R11, R27, -4 */
		/* 820BC500h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BC500h case    3:*/		return 0x820BC504;
		  /* 820BC504h */ case    4:  		/* mr R10, R29 */
		/* 820BC504h case    4:*/		regs.R10 = regs.R29;
		/* 820BC504h case    4:*/		return 0x820BC508;
		  /* 820BC508h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC508h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC508h case    5:*/		return 0x820BC50C;
		  /* 820BC50Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC50Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC51C;  }
		/* 820BC50Ch case    6:*/		return 0x820BC510;
		  /* 820BC510h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC510h case    7:*/		regs.CTR = regs.R30;
		/* 820BC510h case    7:*/		return 0x820BC514;
		  /* 820BC514h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC514h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC514h case    8:*/		return 0x820BC518;
		  /* 820BC518h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC518h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC514;  }
		/* 820BC518h case    9:*/		return 0x820BC51C;
	}
	return 0x820BC51C;
} // Block from 820BC4F4h-820BC51Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC51C);
		  /* 820BC51Ch */ case    0:  		/* lwz R28, <#[R1 + 168]> */
		/* 820BC51Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BC51Ch case    0:*/		return 0x820BC520;
		  /* 820BC520h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC520h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC520h case    1:*/		return 0x820BC524;
		  /* 820BC524h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BC524h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC564;  }
		/* 820BC524h case    2:*/		return 0x820BC528;
		  /* 820BC528h */ case    3:  		/* addi R11, R28, -4 */
		/* 820BC528h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BC528h case    3:*/		return 0x820BC52C;
		  /* 820BC52Ch */ case    4:  		/* mr R10, R29 */
		/* 820BC52Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BC52Ch case    4:*/		return 0x820BC530;
		  /* 820BC530h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC530h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC530h case    5:*/		return 0x820BC534;
		  /* 820BC534h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC534h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC544;  }
		/* 820BC534h case    6:*/		return 0x820BC538;
		  /* 820BC538h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC538h case    7:*/		regs.CTR = regs.R30;
		/* 820BC538h case    7:*/		return 0x820BC53C;
		  /* 820BC53Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC53Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC53Ch case    8:*/		return 0x820BC540;
		  /* 820BC540h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC540h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC53C;  }
		/* 820BC540h case    9:*/		return 0x820BC544;
	}
	return 0x820BC544;
} // Block from 820BC51Ch-820BC544h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC544);
		  /* 820BC544h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BC544h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC544h case    0:*/		return 0x820BC548;
		  /* 820BC548h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BC548h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BC564;  }
		/* 820BC548h case    1:*/		return 0x820BC54C;
		  /* 820BC54Ch */ case    2:  		/* addi R11, R15, -4 */
		/* 820BC54Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BC54Ch case    2:*/		return 0x820BC550;
		  /* 820BC550h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BC550h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC550h case    3:*/		return 0x820BC554;
		  /* 820BC554h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC554h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BC564;  }
		/* 820BC554h case    4:*/		return 0x820BC558;
		  /* 820BC558h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BC558h case    5:*/		regs.CTR = regs.R30;
		/* 820BC558h case    5:*/		return 0x820BC55C;
		  /* 820BC55Ch */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BC55Ch case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC55Ch case    6:*/		return 0x820BC560;
		  /* 820BC560h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BC560h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC55C;  }
		/* 820BC560h case    7:*/		return 0x820BC564;
	}
	return 0x820BC564;
} // Block from 820BC544h-820BC564h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BC564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC564);
		  /* 820BC564h */ case    0:  		/* oris R30, R24, 8272 */
		/* 820BC564h case    0:*/		cpu::op::oris<0>(regs,&regs.R30,regs.R24,0x2050);
		/* 820BC564h case    0:*/		return 0x820BC568;
		  /* 820BC568h */ case    1:  		/* li R9, 0 */
		/* 820BC568h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC568h case    1:*/		return 0x820BC56C;
		  /* 820BC56Ch */ case    2:  		/* mr R8, R23 */
		/* 820BC56Ch case    2:*/		regs.R8 = regs.R23;
		/* 820BC56Ch case    2:*/		return 0x820BC570;
		  /* 820BC570h */ case    3:  		/* mr R6, R26 */
		/* 820BC570h case    3:*/		regs.R6 = regs.R26;
		/* 820BC570h case    3:*/		return 0x820BC574;
		  /* 820BC574h */ case    4:  		/* mr R5, R30 */
		/* 820BC574h case    4:*/		regs.R5 = regs.R30;
		/* 820BC574h case    4:*/		return 0x820BC578;
		  /* 820BC578h */ case    5:  		/* mr R4, R16 */
		/* 820BC578h case    5:*/		regs.R4 = regs.R16;
		/* 820BC578h case    5:*/		return 0x820BC57C;
		  /* 820BC57Ch */ case    6:  		/* mr R3, R14 */
		/* 820BC57Ch case    6:*/		regs.R3 = regs.R14;
		/* 820BC57Ch case    6:*/		return 0x820BC580;
		  /* 820BC580h */ case    7:  		/* bl -47736 */
		/* 820BC580h case    7:*/		regs.LR = 0x820BC584; return 0x820B0B08;
		/* 820BC580h case    7:*/		return 0x820BC584;
		  /* 820BC584h */ case    8:  		/* or. R31, R3, R3 */
		/* 820BC584h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC584h case    8:*/		return 0x820BC588;
		  /* 820BC588h */ case    9:  		/* bc 12, CR0_LT, 7760 */
		/* 820BC588h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC588h case    9:*/		return 0x820BC58C;
		  /* 820BC58Ch */ case   10:  		/* li R9, 0 */
		/* 820BC58Ch case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC58Ch case   10:*/		return 0x820BC590;
		  /* 820BC590h */ case   11:  		/* mr R8, R22 */
		/* 820BC590h case   11:*/		regs.R8 = regs.R22;
		/* 820BC590h case   11:*/		return 0x820BC594;
		  /* 820BC594h */ case   12:  		/* mr R7, R25 */
		/* 820BC594h case   12:*/		regs.R7 = regs.R25;
		/* 820BC594h case   12:*/		return 0x820BC598;
		  /* 820BC598h */ case   13:  		/* mr R6, R27 */
		/* 820BC598h case   13:*/		regs.R6 = regs.R27;
		/* 820BC598h case   13:*/		return 0x820BC59C;
		  /* 820BC59Ch */ case   14:  		/* mr R5, R30 */
		/* 820BC59Ch case   14:*/		regs.R5 = regs.R30;
		/* 820BC59Ch case   14:*/		return 0x820BC5A0;
		  /* 820BC5A0h */ case   15:  		/* mr R4, R16 */
		/* 820BC5A0h case   15:*/		regs.R4 = regs.R16;
		/* 820BC5A0h case   15:*/		return 0x820BC5A4;
		  /* 820BC5A4h */ case   16:  		/* mr R3, R14 */
		/* 820BC5A4h case   16:*/		regs.R3 = regs.R14;
		/* 820BC5A4h case   16:*/		return 0x820BC5A8;
		  /* 820BC5A8h */ case   17:  		/* bl -47776 */
		/* 820BC5A8h case   17:*/		regs.LR = 0x820BC5AC; return 0x820B0B08;
		/* 820BC5A8h case   17:*/		return 0x820BC5AC;
		  /* 820BC5ACh */ case   18:  		/* or. R31, R3, R3 */
		/* 820BC5ACh case   18:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC5ACh case   18:*/		return 0x820BC5B0;
		  /* 820BC5B0h */ case   19:  		/* bc 12, CR0_LT, 7720 */
		/* 820BC5B0h case   19:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC5B0h case   19:*/		return 0x820BC5B4;
		  /* 820BC5B4h */ case   20:  		/* li R9, 0 */
		/* 820BC5B4h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC5B4h case   20:*/		return 0x820BC5B8;
		  /* 820BC5B8h */ case   21:  		/* li R8, 0 */
		/* 820BC5B8h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC5B8h case   21:*/		return 0x820BC5BC;
		  /* 820BC5BCh */ case   22:  		/* mr R7, R27 */
		/* 820BC5BCh case   22:*/		regs.R7 = regs.R27;
		/* 820BC5BCh case   22:*/		return 0x820BC5C0;
		  /* 820BC5C0h */ case   23:  		/* mr R6, R28 */
		/* 820BC5C0h case   23:*/		regs.R6 = regs.R28;
		/* 820BC5C0h case   23:*/		return 0x820BC5C4;
		  /* 820BC5C4h */ case   24:  		/* oris R5, R24, 4112 */
		/* 820BC5C4h case   24:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R24,0x1010);
		/* 820BC5C4h case   24:*/		return 0x820BC5C8;
		  /* 820BC5C8h */ case   25:  		/* mr R4, R16 */
		/* 820BC5C8h case   25:*/		regs.R4 = regs.R16;
		/* 820BC5C8h case   25:*/		return 0x820BC5CC;
		  /* 820BC5CCh */ case   26:  		/* mr R3, R14 */
		/* 820BC5CCh case   26:*/		regs.R3 = regs.R14;
		/* 820BC5CCh case   26:*/		return 0x820BC5D0;
		  /* 820BC5D0h */ case   27:  		/* bl -47816 */
		/* 820BC5D0h case   27:*/		regs.LR = 0x820BC5D4; return 0x820B0B08;
		/* 820BC5D0h case   27:*/		return 0x820BC5D4;
		  /* 820BC5D4h */ case   28:  		/* or. R31, R3, R3 */
		/* 820BC5D4h case   28:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC5D4h case   28:*/		return 0x820BC5D8;
		  /* 820BC5D8h */ case   29:  		/* bc 12, CR0_LT, 7680 */
		/* 820BC5D8h case   29:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC5D8h case   29:*/		return 0x820BC5DC;
		  /* 820BC5DCh */ case   30:  		/* mr R8, R28 */
		/* 820BC5DCh case   30:*/		regs.R8 = regs.R28;
		/* 820BC5DCh case   30:*/		return 0x820BC5E0;
		  /* 820BC5E0h */ case   31:  		/* mr R7, R26 */
		/* 820BC5E0h case   31:*/		regs.R7 = regs.R26;
		/* 820BC5E0h case   31:*/		return 0x820BC5E4;
		  /* 820BC5E4h */ case   32:  		/* oris R5, R24, 8256 */
		/* 820BC5E4h case   32:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R24,0x2040);
		/* 820BC5E4h case   32:*/		return 0x820BC5E8;
		  /* 820BC5E8h */ case   33:  		/* b 4420 */
		/* 820BC5E8h case   33:*/		return 0x820BD72C;
		/* 820BC5E8h case   33:*/		return 0x820BC5EC;
		  /* 820BC5ECh */ case   34:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BC5ECh case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BC5ECh case   34:*/		return 0x820BC5F0;
		  /* 820BC5F0h */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 820BC5F0h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BC5F0h case   35:*/		return 0x820BC5F4;
		  /* 820BC5F4h */ case   36:  		/* bc 12, CR6_EQ, 7644 */
		/* 820BC5F4h case   36:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BC5F4h case   36:*/		return 0x820BC5F8;
		  /* 820BC5F8h */ case   37:  		/* cmplwi CR6, R15, 0 */
		/* 820BC5F8h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BC5F8h case   37:*/		return 0x820BC5FC;
		  /* 820BC5FCh */ case   38:  		/* bc 12, CR6_EQ, -15408 */
		/* 820BC5FCh case   38:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BC5FCh case   38:*/		return 0x820BC600;
		  /* 820BC600h */ case   39:  		/* lwz R3, <#[R14 + 8]> */
		/* 820BC600h case   39:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000008) );
		/* 820BC600h case   39:*/		return 0x820BC604;
		  /* 820BC604h */ case   40:  		/* lis R11, -32256 */
		/* 820BC604h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820BC604h case   40:*/		return 0x820BC608;
		  /* 820BC608h */ case   41:  		/* li R6, 0 */
		/* 820BC608h case   41:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BC608h case   41:*/		return 0x820BC60C;
		  /* 820BC60Ch */ case   42:  		/* li R5, 0 */
		/* 820BC60Ch case   42:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BC60Ch case   42:*/		return 0x820BC610;
		  /* 820BC610h */ case   43:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BC610h case   43:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BC610h case   43:*/		return 0x820BC614;
		  /* 820BC614h */ case   44:  		/* lfd FR1, <#[R11 + 4736]> */
		/* 820BC614h case   44:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00001280) );
		/* 820BC614h case   44:*/		return 0x820BC618;
		  /* 820BC618h */ case   45:  		/* bl 265232 */
		/* 820BC618h case   45:*/		regs.LR = 0x820BC61C; return 0x820FD228;
		/* 820BC618h case   45:*/		return 0x820BC61C;
		  /* 820BC61Ch */ case   46:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820BC61Ch case   46:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820BC61Ch case   46:*/		return 0x820BC620;
		  /* 820BC620h */ case   47:  		/* mr R29, R3 */
		/* 820BC620h case   47:*/		regs.R29 = regs.R3;
		/* 820BC620h case   47:*/		return 0x820BC624;
		  /* 820BC624h */ case   48:  		/* mr R4, R31 */
		/* 820BC624h case   48:*/		regs.R4 = regs.R31;
		/* 820BC624h case   48:*/		return 0x820BC628;
		  /* 820BC628h */ case   49:  		/* mr R3, R14 */
		/* 820BC628h case   49:*/		regs.R3 = regs.R14;
		/* 820BC628h case   49:*/		return 0x820BC62C;
		  /* 820BC62Ch */ case   50:  		/* bl -48956 */
		/* 820BC62Ch case   50:*/		regs.LR = 0x820BC630; return 0x820B06F0;
		/* 820BC62Ch case   50:*/		return 0x820BC630;
		  /* 820BC630h */ case   51:  		/* cmplwi CR0, R3, 0 */
		/* 820BC630h case   51:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820BC630h case   51:*/		return 0x820BC634;
		  /* 820BC634h */ case   52:  		/* bc 12, CR0_EQ, 3564 */
		/* 820BC634h case   52:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BC634h case   52:*/		return 0x820BC638;
		  /* 820BC638h */ case   53:  		/* li R10, 4 */
		/* 820BC638h case   53:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820BC638h case   53:*/		return 0x820BC63C;
		  /* 820BC63Ch */ case   54:  		/* addi R11, R1, 156 */
		/* 820BC63Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x9C);
		/* 820BC63Ch case   54:*/		return 0x820BC640;
		  /* 820BC640h */ case   55:  		/* mtspr CTR, R10 */
		/* 820BC640h case   55:*/		regs.CTR = regs.R10;
		/* 820BC640h case   55:*/		return 0x820BC644;
		  /* 820BC644h */ case   56:  		/* stwu R3, <#[R11 + 4]> */
		/* 820BC644h case   56:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC644h case   56:*/		return 0x820BC648;
		  /* 820BC648h */ case   57:  		/* add R3, R31, R3 */
		/* 820BC648h case   57:*/		cpu::op::add<0>(regs,&regs.R3,regs.R31,regs.R3);
		/* 820BC648h case   57:*/		return 0x820BC64C;
		  /* 820BC64Ch */ case   58:  		/* bc 16, CR0_LT, -8 */
		/* 820BC64Ch case   58:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC644;  }
		/* 820BC64Ch case   58:*/		return 0x820BC650;
		  /* 820BC650h */ case   59:  		/* lwz R8, <#[R1 + 172]> */
		/* 820BC650h case   59:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BC650h case   59:*/		return 0x820BC654;
		  /* 820BC654h */ case   60:  		/* cmplwi CR6, R30, 0 */
		/* 820BC654h case   60:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC654h case   60:*/		return 0x820BC658;
		  /* 820BC658h */ case   61:  		/* bc 12, CR6_EQ, 28 */
		/* 820BC658h case   61:*/		if ( regs.CR[6].eq ) { return 0x820BC674;  }
		/* 820BC658h case   61:*/		return 0x820BC65C;
		  /* 820BC65Ch */ case   62:  		/* addi R11, R8, -4 */
		/* 820BC65Ch case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820BC65Ch case   62:*/		return 0x820BC660;
		  /* 820BC660h */ case   63:  		/* cmplwi CR0, R30, 0 */
		/* 820BC660h case   63:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC660h case   63:*/		return 0x820BC664;
		  /* 820BC664h */ case   64:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC664h case   64:*/		if ( regs.CR[0].eq ) { return 0x820BC674;  }
		/* 820BC664h case   64:*/		return 0x820BC668;
		  /* 820BC668h */ case   65:  		/* mtspr CTR, R30 */
		/* 820BC668h case   65:*/		regs.CTR = regs.R30;
		/* 820BC668h case   65:*/		return 0x820BC66C;
		  /* 820BC66Ch */ case   66:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BC66Ch case   66:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC66Ch case   66:*/		return 0x820BC670;
		  /* 820BC670h */ case   67:  		/* bc 16, CR0_LT, -4 */
		/* 820BC670h case   67:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC66C;  }
		/* 820BC670h case   67:*/		return 0x820BC674;
	}
	return 0x820BC674;
} // Block from 820BC564h-820BC674h (68 instructions)

//////////////////////////////////////////////////////
// Block at 820BC674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC674);
		  /* 820BC674h */ case    0:  		/* lwz R27, <#[R1 + 160]> */
		/* 820BC674h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BC674h case    0:*/		return 0x820BC678;
		  /* 820BC678h */ case    1:  		/* li R29, -1 */
		/* 820BC678h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BC678h case    1:*/		return 0x820BC67C;
		  /* 820BC67Ch */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820BC67Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC67Ch case    2:*/		return 0x820BC680;
		  /* 820BC680h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC680h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BC6A0;  }
		/* 820BC680h case    3:*/		return 0x820BC684;
		  /* 820BC684h */ case    4:  		/* addi R11, R27, -4 */
		/* 820BC684h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BC684h case    4:*/		return 0x820BC688;
		  /* 820BC688h */ case    5:  		/* mr R10, R29 */
		/* 820BC688h case    5:*/		regs.R10 = regs.R29;
		/* 820BC688h case    5:*/		return 0x820BC68C;
		  /* 820BC68Ch */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820BC68Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC68Ch case    6:*/		return 0x820BC690;
		  /* 820BC690h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC690h case    7:*/		if ( regs.CR[0].eq ) { return 0x820BC6A0;  }
		/* 820BC690h case    7:*/		return 0x820BC694;
		  /* 820BC694h */ case    8:  		/* mtspr CTR, R30 */
		/* 820BC694h case    8:*/		regs.CTR = regs.R30;
		/* 820BC694h case    8:*/		return 0x820BC698;
		  /* 820BC698h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC698h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC698h case    9:*/		return 0x820BC69C;
		  /* 820BC69Ch */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820BC69Ch case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC698;  }
		/* 820BC69Ch case   10:*/		return 0x820BC6A0;
	}
	return 0x820BC6A0;
} // Block from 820BC674h-820BC6A0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BC6A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC6A0);
		  /* 820BC6A0h */ case    0:  		/* lwz R26, <#[R1 + 164]> */
		/* 820BC6A0h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BC6A0h case    0:*/		return 0x820BC6A4;
		  /* 820BC6A4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC6A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC6A4h case    1:*/		return 0x820BC6A8;
		  /* 820BC6A8h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC6A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC6C8;  }
		/* 820BC6A8h case    2:*/		return 0x820BC6AC;
		  /* 820BC6ACh */ case    3:  		/* addi R11, R26, -4 */
		/* 820BC6ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BC6ACh case    3:*/		return 0x820BC6B0;
		  /* 820BC6B0h */ case    4:  		/* mr R10, R29 */
		/* 820BC6B0h case    4:*/		regs.R10 = regs.R29;
		/* 820BC6B0h case    4:*/		return 0x820BC6B4;
		  /* 820BC6B4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC6B4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC6B4h case    5:*/		return 0x820BC6B8;
		  /* 820BC6B8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC6B8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC6C8;  }
		/* 820BC6B8h case    6:*/		return 0x820BC6BC;
		  /* 820BC6BCh */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC6BCh case    7:*/		regs.CTR = regs.R30;
		/* 820BC6BCh case    7:*/		return 0x820BC6C0;
		  /* 820BC6C0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC6C0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC6C0h case    8:*/		return 0x820BC6C4;
		  /* 820BC6C4h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC6C4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC6C0;  }
		/* 820BC6C4h case    9:*/		return 0x820BC6C8;
	}
	return 0x820BC6C8;
} // Block from 820BC6A0h-820BC6C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC6C8);
		  /* 820BC6C8h */ case    0:  		/* lwz R28, <#[R1 + 168]> */
		/* 820BC6C8h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BC6C8h case    0:*/		return 0x820BC6CC;
		  /* 820BC6CCh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC6CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC6CCh case    1:*/		return 0x820BC6D0;
		  /* 820BC6D0h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BC6D0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC710;  }
		/* 820BC6D0h case    2:*/		return 0x820BC6D4;
		  /* 820BC6D4h */ case    3:  		/* addi R11, R28, -4 */
		/* 820BC6D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BC6D4h case    3:*/		return 0x820BC6D8;
		  /* 820BC6D8h */ case    4:  		/* mr R10, R29 */
		/* 820BC6D8h case    4:*/		regs.R10 = regs.R29;
		/* 820BC6D8h case    4:*/		return 0x820BC6DC;
		  /* 820BC6DCh */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC6DCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC6DCh case    5:*/		return 0x820BC6E0;
		  /* 820BC6E0h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC6E0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC6F0;  }
		/* 820BC6E0h case    6:*/		return 0x820BC6E4;
		  /* 820BC6E4h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC6E4h case    7:*/		regs.CTR = regs.R30;
		/* 820BC6E4h case    7:*/		return 0x820BC6E8;
		  /* 820BC6E8h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC6E8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC6E8h case    8:*/		return 0x820BC6EC;
		  /* 820BC6ECh */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC6ECh case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC6E8;  }
		/* 820BC6ECh case    9:*/		return 0x820BC6F0;
	}
	return 0x820BC6F0;
} // Block from 820BC6C8h-820BC6F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC6F0);
		  /* 820BC6F0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BC6F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC6F0h case    0:*/		return 0x820BC6F4;
		  /* 820BC6F4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BC6F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BC710;  }
		/* 820BC6F4h case    1:*/		return 0x820BC6F8;
		  /* 820BC6F8h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BC6F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BC6F8h case    2:*/		return 0x820BC6FC;
		  /* 820BC6FCh */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BC6FCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC6FCh case    3:*/		return 0x820BC700;
		  /* 820BC700h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC700h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BC710;  }
		/* 820BC700h case    4:*/		return 0x820BC704;
		  /* 820BC704h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BC704h case    5:*/		regs.CTR = regs.R30;
		/* 820BC704h case    5:*/		return 0x820BC708;
		  /* 820BC708h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BC708h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC708h case    6:*/		return 0x820BC70C;
		  /* 820BC70Ch */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BC70Ch case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC708;  }
		/* 820BC70Ch case    7:*/		return 0x820BC710;
	}
	return 0x820BC710;
} // Block from 820BC6F0h-820BC710h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BC710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC710);
		  /* 820BC710h */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BC710h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BC710h case    0:*/		return 0x820BC714;
		  /* 820BC714h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BC714h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BC714h case    1:*/		return 0x820BC718;
		  /* 820BC718h */ case    2:  		/* li R9, 0 */
		/* 820BC718h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC718h case    2:*/		return 0x820BC71C;
		  /* 820BC71Ch */ case    3:  		/* oris R29, R30, 8256 */
		/* 820BC71Ch case    3:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R30,0x2040);
		/* 820BC71Ch case    3:*/		return 0x820BC720;
		  /* 820BC720h */ case    4:  		/* mr R6, R27 */
		/* 820BC720h case    4:*/		regs.R6 = regs.R27;
		/* 820BC720h case    4:*/		return 0x820BC724;
		  /* 820BC724h */ case    5:  		/* mr R5, R29 */
		/* 820BC724h case    5:*/		regs.R5 = regs.R29;
		/* 820BC724h case    5:*/		return 0x820BC728;
		  /* 820BC728h */ case    6:  		/* mr R4, R16 */
		/* 820BC728h case    6:*/		regs.R4 = regs.R16;
		/* 820BC728h case    6:*/		return 0x820BC72C;
		  /* 820BC72Ch */ case    7:  		/* mr R3, R14 */
		/* 820BC72Ch case    7:*/		regs.R3 = regs.R14;
		/* 820BC72Ch case    7:*/		return 0x820BC730;
		  /* 820BC730h */ case    8:  		/* bl -48168 */
		/* 820BC730h case    8:*/		regs.LR = 0x820BC734; return 0x820B0B08;
		/* 820BC730h case    8:*/		return 0x820BC734;
		  /* 820BC734h */ case    9:  		/* or. R31, R3, R3 */
		/* 820BC734h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC734h case    9:*/		return 0x820BC738;
		  /* 820BC738h */ case   10:  		/* bc 12, CR0_LT, 7328 */
		/* 820BC738h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC738h case   10:*/		return 0x820BC73C;
		  /* 820BC73Ch */ case   11:  		/* li R9, 20 */
		/* 820BC73Ch case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820BC73Ch case   11:*/		return 0x820BC740;
		  /* 820BC740h */ case   12:  		/* li R8, 0 */
		/* 820BC740h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC740h case   12:*/		return 0x820BC744;
		  /* 820BC744h */ case   13:  		/* mr R7, R27 */
		/* 820BC744h case   13:*/		regs.R7 = regs.R27;
		/* 820BC744h case   13:*/		return 0x820BC748;
		  /* 820BC748h */ case   14:  		/* mr R6, R26 */
		/* 820BC748h case   14:*/		regs.R6 = regs.R26;
		/* 820BC748h case   14:*/		return 0x820BC74C;
		  /* 820BC74Ch */ case   15:  		/* oris R5, R30, 4160 */
		/* 820BC74Ch case   15:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1040);
		/* 820BC74Ch case   15:*/		return 0x820BC750;
		  /* 820BC750h */ case   16:  		/* mr R4, R16 */
		/* 820BC750h case   16:*/		regs.R4 = regs.R16;
		/* 820BC750h case   16:*/		return 0x820BC754;
		  /* 820BC754h */ case   17:  		/* mr R3, R14 */
		/* 820BC754h case   17:*/		regs.R3 = regs.R14;
		/* 820BC754h case   17:*/		return 0x820BC758;
		  /* 820BC758h */ case   18:  		/* bl -48208 */
		/* 820BC758h case   18:*/		regs.LR = 0x820BC75C; return 0x820B0B08;
		/* 820BC758h case   18:*/		return 0x820BC75C;
		  /* 820BC75Ch */ case   19:  		/* or. R31, R3, R3 */
		/* 820BC75Ch case   19:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC75Ch case   19:*/		return 0x820BC760;
		  /* 820BC760h */ case   20:  		/* bc 12, CR0_LT, 7288 */
		/* 820BC760h case   20:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC760h case   20:*/		return 0x820BC764;
		  /* 820BC764h */ case   21:  		/* li R9, 24 */
		/* 820BC764h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x18);
		/* 820BC764h case   21:*/		return 0x820BC768;
		  /* 820BC768h */ case   22:  		/* li R8, 0 */
		/* 820BC768h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC768h case   22:*/		return 0x820BC76C;
		  /* 820BC76Ch */ case   23:  		/* mr R7, R26 */
		/* 820BC76Ch case   23:*/		regs.R7 = regs.R26;
		/* 820BC76Ch case   23:*/		return 0x820BC770;
		  /* 820BC770h */ case   24:  		/* mr R6, R28 */
		/* 820BC770h case   24:*/		regs.R6 = regs.R28;
		/* 820BC770h case   24:*/		return 0x820BC774;
		  /* 820BC774h */ case   25:  		/* oris R5, R30, 4112 */
		/* 820BC774h case   25:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820BC774h case   25:*/		return 0x820BC778;
		  /* 820BC778h */ case   26:  		/* mr R4, R16 */
		/* 820BC778h case   26:*/		regs.R4 = regs.R16;
		/* 820BC778h case   26:*/		return 0x820BC77C;
		  /* 820BC77Ch */ case   27:  		/* mr R3, R14 */
		/* 820BC77Ch case   27:*/		regs.R3 = regs.R14;
		/* 820BC77Ch case   27:*/		return 0x820BC780;
		  /* 820BC780h */ case   28:  		/* bl -48248 */
		/* 820BC780h case   28:*/		regs.LR = 0x820BC784; return 0x820B0B08;
		/* 820BC780h case   28:*/		return 0x820BC784;
		  /* 820BC784h */ case   29:  		/* or. R31, R3, R3 */
		/* 820BC784h case   29:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC784h case   29:*/		return 0x820BC788;
		  /* 820BC788h */ case   30:  		/* bc 12, CR0_LT, 7248 */
		/* 820BC788h case   30:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC788h case   30:*/		return 0x820BC78C;
		  /* 820BC78Ch */ case   31:  		/* li R9, 2 */
		/* 820BC78Ch case   31:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BC78Ch case   31:*/		return 0x820BC790;
		  /* 820BC790h */ case   32:  		/* mr R8, R28 */
		/* 820BC790h case   32:*/		regs.R8 = regs.R28;
		/* 820BC790h case   32:*/		return 0x820BC794;
		  /* 820BC794h */ case   33:  		/* mr R7, R27 */
		/* 820BC794h case   33:*/		regs.R7 = regs.R27;
		/* 820BC794h case   33:*/		return 0x820BC798;
		  /* 820BC798h */ case   34:  		/* mr R5, R29 */
		/* 820BC798h case   34:*/		regs.R5 = regs.R29;
		/* 820BC798h case   34:*/		return 0x820BC79C;
		  /* 820BC79Ch */ case   35:  		/* b 3988 */
		/* 820BC79Ch case   35:*/		return 0x820BD730;
		/* 820BC79Ch case   35:*/		return 0x820BC7A0;
		  /* 820BC7A0h */ case   36:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BC7A0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BC7A0h case   36:*/		return 0x820BC7A4;
		  /* 820BC7A4h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 820BC7A4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BC7A4h case   37:*/		return 0x820BC7A8;
		  /* 820BC7A8h */ case   38:  		/* bc 12, CR6_EQ, 7208 */
		/* 820BC7A8h case   38:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BC7A8h case   38:*/		return 0x820BC7AC;
		  /* 820BC7ACh */ case   39:  		/* cmplwi CR6, R15, 0 */
		/* 820BC7ACh case   39:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BC7ACh case   39:*/		return 0x820BC7B0;
		  /* 820BC7B0h */ case   40:  		/* bc 12, CR6_EQ, -15844 */
		/* 820BC7B0h case   40:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BC7B0h case   40:*/		return 0x820BC7B4;
		  /* 820BC7B4h */ case   41:  		/* cmplwi CR6, R30, 0 */
		/* 820BC7B4h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC7B4h case   41:*/		return 0x820BC7B8;
		  /* 820BC7B8h */ case   42:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC7B8h case   42:*/		if ( regs.CR[6].eq ) { return 0x820BC7D8;  }
		/* 820BC7B8h case   42:*/		return 0x820BC7BC;
		  /* 820BC7BCh */ case   43:  		/* addi R11, R15, -4 */
		/* 820BC7BCh case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BC7BCh case   43:*/		return 0x820BC7C0;
		  /* 820BC7C0h */ case   44:  		/* li R10, -1 */
		/* 820BC7C0h case   44:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BC7C0h case   44:*/		return 0x820BC7C4;
		  /* 820BC7C4h */ case   45:  		/* cmplwi CR0, R30, 0 */
		/* 820BC7C4h case   45:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC7C4h case   45:*/		return 0x820BC7C8;
		  /* 820BC7C8h */ case   46:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC7C8h case   46:*/		if ( regs.CR[0].eq ) { return 0x820BC7D8;  }
		/* 820BC7C8h case   46:*/		return 0x820BC7CC;
		  /* 820BC7CCh */ case   47:  		/* mtspr CTR, R30 */
		/* 820BC7CCh case   47:*/		regs.CTR = regs.R30;
		/* 820BC7CCh case   47:*/		return 0x820BC7D0;
		  /* 820BC7D0h */ case   48:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC7D0h case   48:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC7D0h case   48:*/		return 0x820BC7D4;
		  /* 820BC7D4h */ case   49:  		/* bc 16, CR0_LT, -4 */
		/* 820BC7D4h case   49:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC7D0;  }
		/* 820BC7D4h case   49:*/		return 0x820BC7D8;
	}
	return 0x820BC7D8;
} // Block from 820BC710h-820BC7D8h (50 instructions)

//////////////////////////////////////////////////////
// Block at 820BC7D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC7D8);
		  /* 820BC7D8h */ case    0:  		/* li R11, 263 */
		/* 820BC7D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x107);
		/* 820BC7D8h case    0:*/		return 0x820BC7DC;
		  /* 820BC7DCh */ case    1:  		/* b -12628 */
		/* 820BC7DCh case    1:*/		return 0x820B9688;
		/* 820BC7DCh case    1:*/		return 0x820BC7E0;
		  /* 820BC7E0h */ case    2:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BC7E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BC7E0h case    2:*/		return 0x820BC7E4;
		  /* 820BC7E4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820BC7E4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BC7E4h case    3:*/		return 0x820BC7E8;
		  /* 820BC7E8h */ case    4:  		/* bc 12, CR6_EQ, 7144 */
		/* 820BC7E8h case    4:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BC7E8h case    4:*/		return 0x820BC7EC;
		  /* 820BC7ECh */ case    5:  		/* cmplwi CR6, R15, 0 */
		/* 820BC7ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BC7ECh case    5:*/		return 0x820BC7F0;
		  /* 820BC7F0h */ case    6:  		/* bc 12, CR6_EQ, -15908 */
		/* 820BC7F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BC7F0h case    6:*/		return 0x820BC7F4;
		  /* 820BC7F4h */ case    7:  		/* mulli R4, R30, 3 */
		/* 820BC7F4h case    7:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x3);
		/* 820BC7F4h case    7:*/		return 0x820BC7F8;
		  /* 820BC7F8h */ case    8:  		/* mr R3, R14 */
		/* 820BC7F8h case    8:*/		regs.R3 = regs.R14;
		/* 820BC7F8h case    8:*/		return 0x820BC7FC;
		  /* 820BC7FCh */ case    9:  		/* bl -49420 */
		/* 820BC7FCh case    9:*/		regs.LR = 0x820BC800; return 0x820B06F0;
		/* 820BC7FCh case    9:*/		return 0x820BC800;
		  /* 820BC800h */ case   10:  		/* or. R11, R3, R3 */
		/* 820BC800h case   10:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BC800h case   10:*/		return 0x820BC804;
		  /* 820BC804h */ case   11:  		/* bc 12, CR0_EQ, 3100 */
		/* 820BC804h case   11:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BC804h case   11:*/		return 0x820BC808;
		  /* 820BC808h */ case   12:  		/* li R10, 3 */
		/* 820BC808h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820BC808h case   12:*/		return 0x820BC80C;
		  /* 820BC80Ch */ case   13:  		/* addi R9, R1, 124 */
		/* 820BC80Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820BC80Ch case   13:*/		return 0x820BC810;
		  /* 820BC810h */ case   14:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BC810h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BC810h case   14:*/		return 0x820BC814;
		  /* 820BC814h */ case   15:  		/* mtspr CTR, R10 */
		/* 820BC814h case   15:*/		regs.CTR = regs.R10;
		/* 820BC814h case   15:*/		return 0x820BC818;
		  /* 820BC818h */ case   16:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BC818h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BC818h case   16:*/		return 0x820BC81C;
		  /* 820BC81Ch */ case   17:  		/* add R11, R8, R11 */
		/* 820BC81Ch case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BC81Ch case   17:*/		return 0x820BC820;
		  /* 820BC820h */ case   18:  		/* bc 16, CR0_LT, -8 */
		/* 820BC820h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC818;  }
		/* 820BC820h case   18:*/		return 0x820BC824;
		  /* 820BC824h */ case   19:  		/* lwz R27, <#[R1 + 132]> */
		/* 820BC824h case   19:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000084) );
		/* 820BC824h case   19:*/		return 0x820BC828;
		  /* 820BC828h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BC828h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC828h case   20:*/		return 0x820BC82C;
		  /* 820BC82Ch */ case   21:  		/* lwz R8, <#[R1 + 128]> */
		/* 820BC82Ch case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 820BC82Ch case   21:*/		return 0x820BC830;
		  /* 820BC830h */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 820BC830h case   22:*/		if ( regs.CR[6].eq ) { return 0x820BC858;  }
		/* 820BC830h case   22:*/		return 0x820BC834;
		  /* 820BC834h */ case   23:  		/* mtspr CTR, R30 */
		/* 820BC834h case   23:*/		regs.CTR = regs.R30;
		/* 820BC834h case   23:*/		return 0x820BC838;
		  /* 820BC838h */ case   24:  		/* mr R11, R27 */
		/* 820BC838h case   24:*/		regs.R11 = regs.R27;
		/* 820BC838h case   24:*/		return 0x820BC83C;
		  /* 820BC83Ch */ case   25:  		/* subf R10, R27, R8 */
		/* 820BC83Ch case   25:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R27,regs.R8);
		/* 820BC83Ch case   25:*/		return 0x820BC840;
		  /* 820BC840h */ case   26:  		/* lwz R9, <#[R14 + 36]> */
		/* 820BC840h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000024) );
		/* 820BC840h case   26:*/		return 0x820BC844;
		  /* 820BC844h */ case   27:  		/* stwx R9, <#[R10 + R11]> */
		/* 820BC844h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BC844h case   27:*/		return 0x820BC848;
		  /* 820BC848h */ case   28:  		/* lwz R9, <#[R14 + 32]> */
		/* 820BC848h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000020) );
		/* 820BC848h case   28:*/		return 0x820BC84C;
		  /* 820BC84Ch */ case   29:  		/* stw R9, <#[R11]> */
		/* 820BC84Ch case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BC84Ch case   29:*/		return 0x820BC850;
		  /* 820BC850h */ case   30:  		/* addi R11, R11, 4 */
		/* 820BC850h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BC850h case   30:*/		return 0x820BC854;
		  /* 820BC854h */ case   31:  		/* bc 16, CR0_LT, -20 */
		/* 820BC854h case   31:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC840;  }
		/* 820BC854h case   31:*/		return 0x820BC858;
	}
	return 0x820BC858;
} // Block from 820BC7D8h-820BC858h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820BC858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC858);
		  /* 820BC858h */ case    0:  		/* lwz R28, <#[R1 + 136]> */
		/* 820BC858h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000088) );
		/* 820BC858h case    0:*/		return 0x820BC85C;
		  /* 820BC85Ch */ case    1:  		/* li R29, -1 */
		/* 820BC85Ch case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BC85Ch case    1:*/		return 0x820BC860;
		  /* 820BC860h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820BC860h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC860h case    2:*/		return 0x820BC864;
		  /* 820BC864h */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 820BC864h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BC8A4;  }
		/* 820BC864h case    3:*/		return 0x820BC868;
		  /* 820BC868h */ case    4:  		/* addi R11, R28, -4 */
		/* 820BC868h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BC868h case    4:*/		return 0x820BC86C;
		  /* 820BC86Ch */ case    5:  		/* mr R10, R29 */
		/* 820BC86Ch case    5:*/		regs.R10 = regs.R29;
		/* 820BC86Ch case    5:*/		return 0x820BC870;
		  /* 820BC870h */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820BC870h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC870h case    6:*/		return 0x820BC874;
		  /* 820BC874h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC874h case    7:*/		if ( regs.CR[0].eq ) { return 0x820BC884;  }
		/* 820BC874h case    7:*/		return 0x820BC878;
		  /* 820BC878h */ case    8:  		/* mtspr CTR, R30 */
		/* 820BC878h case    8:*/		regs.CTR = regs.R30;
		/* 820BC878h case    8:*/		return 0x820BC87C;
		  /* 820BC87Ch */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC87Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC87Ch case    9:*/		return 0x820BC880;
		  /* 820BC880h */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820BC880h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC87C;  }
		/* 820BC880h case   10:*/		return 0x820BC884;
	}
	return 0x820BC884;
} // Block from 820BC858h-820BC884h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BC884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC884);
		  /* 820BC884h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BC884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC884h case    0:*/		return 0x820BC888;
		  /* 820BC888h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BC888h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BC8A4;  }
		/* 820BC888h case    1:*/		return 0x820BC88C;
		  /* 820BC88Ch */ case    2:  		/* addi R11, R15, -4 */
		/* 820BC88Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BC88Ch case    2:*/		return 0x820BC890;
		  /* 820BC890h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BC890h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC890h case    3:*/		return 0x820BC894;
		  /* 820BC894h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC894h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BC8A4;  }
		/* 820BC894h case    4:*/		return 0x820BC898;
		  /* 820BC898h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BC898h case    5:*/		regs.CTR = regs.R30;
		/* 820BC898h case    5:*/		return 0x820BC89C;
		  /* 820BC89Ch */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BC89Ch case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC89Ch case    6:*/		return 0x820BC8A0;
		  /* 820BC8A0h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BC8A0h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC89C;  }
		/* 820BC8A0h case    7:*/		return 0x820BC8A4;
	}
	return 0x820BC8A4;
} // Block from 820BC884h-820BC8A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BC8A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC8A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC8A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC8A4);
		  /* 820BC8A4h */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BC8A4h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BC8A4h case    0:*/		return 0x820BC8A8;
		  /* 820BC8A8h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BC8A8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BC8A8h case    1:*/		return 0x820BC8AC;
		  /* 820BC8ACh */ case    2:  		/* li R9, 4 */
		/* 820BC8ACh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BC8ACh case    2:*/		return 0x820BC8B0;
		  /* 820BC8B0h */ case    3:  		/* mr R6, R28 */
		/* 820BC8B0h case    3:*/		regs.R6 = regs.R28;
		/* 820BC8B0h case    3:*/		return 0x820BC8B4;
		  /* 820BC8B4h */ case    4:  		/* oris R5, R30, 8208 */
		/* 820BC8B4h case    4:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2010);
		/* 820BC8B4h case    4:*/		return 0x820BC8B8;
		  /* 820BC8B8h */ case    5:  		/* mr R4, R16 */
		/* 820BC8B8h case    5:*/		regs.R4 = regs.R16;
		/* 820BC8B8h case    5:*/		return 0x820BC8BC;
		  /* 820BC8BCh */ case    6:  		/* mr R3, R14 */
		/* 820BC8BCh case    6:*/		regs.R3 = regs.R14;
		/* 820BC8BCh case    6:*/		return 0x820BC8C0;
		  /* 820BC8C0h */ case    7:  		/* bl -48568 */
		/* 820BC8C0h case    7:*/		regs.LR = 0x820BC8C4; return 0x820B0B08;
		/* 820BC8C0h case    7:*/		return 0x820BC8C4;
		  /* 820BC8C4h */ case    8:  		/* or. R31, R3, R3 */
		/* 820BC8C4h case    8:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BC8C4h case    8:*/		return 0x820BC8C8;
		  /* 820BC8C8h */ case    9:  		/* bc 12, CR0_LT, 6928 */
		/* 820BC8C8h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BC8C8h case    9:*/		return 0x820BC8CC;
		  /* 820BC8CCh */ case   10:  		/* li R9, 20 */
		/* 820BC8CCh case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820BC8CCh case   10:*/		return 0x820BC8D0;
		  /* 820BC8D0h */ case   11:  		/* mr R8, R27 */
		/* 820BC8D0h case   11:*/		regs.R8 = regs.R27;
		/* 820BC8D0h case   11:*/		return 0x820BC8D4;
		  /* 820BC8D4h */ case   12:  		/* mr R7, R28 */
		/* 820BC8D4h case   12:*/		regs.R7 = regs.R28;
		/* 820BC8D4h case   12:*/		return 0x820BC8D8;
		  /* 820BC8D8h */ case   13:  		/* oris R5, R30, 8192 */
		/* 820BC8D8h case   13:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2000);
		/* 820BC8D8h case   13:*/		return 0x820BC8DC;
		  /* 820BC8DCh */ case   14:  		/* b 3668 */
		/* 820BC8DCh case   14:*/		return 0x820BD730;
		/* 820BC8DCh case   14:*/		return 0x820BC8E0;
		  /* 820BC8E0h */ case   15:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BC8E0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BC8E0h case   15:*/		return 0x820BC8E4;
		  /* 820BC8E4h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 820BC8E4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BC8E4h case   16:*/		return 0x820BC8E8;
		  /* 820BC8E8h */ case   17:  		/* bc 12, CR6_EQ, 6888 */
		/* 820BC8E8h case   17:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BC8E8h case   17:*/		return 0x820BC8EC;
		  /* 820BC8ECh */ case   18:  		/* cmplwi CR6, R15, 0 */
		/* 820BC8ECh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BC8ECh case   18:*/		return 0x820BC8F0;
		  /* 820BC8F0h */ case   19:  		/* bc 12, CR6_EQ, -16164 */
		/* 820BC8F0h case   19:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BC8F0h case   19:*/		return 0x820BC8F4;
		  /* 820BC8F4h */ case   20:  		/* rlwinm R31, R30, 2, 0, 29 */
		/* 820BC8F4h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R30);
		/* 820BC8F4h case   20:*/		return 0x820BC8F8;
		  /* 820BC8F8h */ case   21:  		/* mr R3, R14 */
		/* 820BC8F8h case   21:*/		regs.R3 = regs.R14;
		/* 820BC8F8h case   21:*/		return 0x820BC8FC;
		  /* 820BC8FCh */ case   22:  		/* mr R4, R31 */
		/* 820BC8FCh case   22:*/		regs.R4 = regs.R31;
		/* 820BC8FCh case   22:*/		return 0x820BC900;
		  /* 820BC900h */ case   23:  		/* bl -49680 */
		/* 820BC900h case   23:*/		regs.LR = 0x820BC904; return 0x820B06F0;
		/* 820BC900h case   23:*/		return 0x820BC904;
		  /* 820BC904h */ case   24:  		/* or. R11, R3, R3 */
		/* 820BC904h case   24:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BC904h case   24:*/		return 0x820BC908;
		  /* 820BC908h */ case   25:  		/* bc 12, CR0_EQ, 2840 */
		/* 820BC908h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BC908h case   25:*/		return 0x820BC90C;
		  /* 820BC90Ch */ case   26:  		/* li R9, 4 */
		/* 820BC90Ch case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BC90Ch case   26:*/		return 0x820BC910;
		  /* 820BC910h */ case   27:  		/* addi R10, R1, 156 */
		/* 820BC910h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820BC910h case   27:*/		return 0x820BC914;
		  /* 820BC914h */ case   28:  		/* mtspr CTR, R9 */
		/* 820BC914h case   28:*/		regs.CTR = regs.R9;
		/* 820BC914h case   28:*/		return 0x820BC918;
		  /* 820BC918h */ case   29:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BC918h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BC918h case   29:*/		return 0x820BC91C;
		  /* 820BC91Ch */ case   30:  		/* add R11, R31, R11 */
		/* 820BC91Ch case   30:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 820BC91Ch case   30:*/		return 0x820BC920;
		  /* 820BC920h */ case   31:  		/* bc 16, CR0_LT, -8 */
		/* 820BC920h case   31:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC918;  }
		/* 820BC920h case   31:*/		return 0x820BC924;
		  /* 820BC924h */ case   32:  		/* lwz R26, <#[R1 + 160]> */
		/* 820BC924h case   32:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BC924h case   32:*/		return 0x820BC928;
		  /* 820BC928h */ case   33:  		/* li R29, -1 */
		/* 820BC928h case   33:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BC928h case   33:*/		return 0x820BC92C;
		  /* 820BC92Ch */ case   34:  		/* cmplwi CR6, R30, 0 */
		/* 820BC92Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC92Ch case   34:*/		return 0x820BC930;
		  /* 820BC930h */ case   35:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC930h case   35:*/		if ( regs.CR[6].eq ) { return 0x820BC950;  }
		/* 820BC930h case   35:*/		return 0x820BC934;
		  /* 820BC934h */ case   36:  		/* addi R11, R26, -4 */
		/* 820BC934h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BC934h case   36:*/		return 0x820BC938;
		  /* 820BC938h */ case   37:  		/* mr R10, R29 */
		/* 820BC938h case   37:*/		regs.R10 = regs.R29;
		/* 820BC938h case   37:*/		return 0x820BC93C;
		  /* 820BC93Ch */ case   38:  		/* cmplwi CR0, R30, 0 */
		/* 820BC93Ch case   38:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC93Ch case   38:*/		return 0x820BC940;
		  /* 820BC940h */ case   39:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC940h case   39:*/		if ( regs.CR[0].eq ) { return 0x820BC950;  }
		/* 820BC940h case   39:*/		return 0x820BC944;
		  /* 820BC944h */ case   40:  		/* mtspr CTR, R30 */
		/* 820BC944h case   40:*/		regs.CTR = regs.R30;
		/* 820BC944h case   40:*/		return 0x820BC948;
		  /* 820BC948h */ case   41:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC948h case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC948h case   41:*/		return 0x820BC94C;
		  /* 820BC94Ch */ case   42:  		/* bc 16, CR0_LT, -4 */
		/* 820BC94Ch case   42:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC948;  }
		/* 820BC94Ch case   42:*/		return 0x820BC950;
	}
	return 0x820BC950;
} // Block from 820BC8A4h-820BC950h (43 instructions)

//////////////////////////////////////////////////////
// Block at 820BC950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC950);
		  /* 820BC950h */ case    0:  		/* lwz R23, <#[R1 + 164]> */
		/* 820BC950h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BC950h case    0:*/		return 0x820BC954;
		  /* 820BC954h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC954h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC954h case    1:*/		return 0x820BC958;
		  /* 820BC958h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC958h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC978;  }
		/* 820BC958h case    2:*/		return 0x820BC95C;
		  /* 820BC95Ch */ case    3:  		/* addi R11, R23, -4 */
		/* 820BC95Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820BC95Ch case    3:*/		return 0x820BC960;
		  /* 820BC960h */ case    4:  		/* mr R10, R29 */
		/* 820BC960h case    4:*/		regs.R10 = regs.R29;
		/* 820BC960h case    4:*/		return 0x820BC964;
		  /* 820BC964h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC964h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC964h case    5:*/		return 0x820BC968;
		  /* 820BC968h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC968h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC978;  }
		/* 820BC968h case    6:*/		return 0x820BC96C;
		  /* 820BC96Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC96Ch case    7:*/		regs.CTR = regs.R30;
		/* 820BC96Ch case    7:*/		return 0x820BC970;
		  /* 820BC970h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC970h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC970h case    8:*/		return 0x820BC974;
		  /* 820BC974h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC974h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC970;  }
		/* 820BC974h case    9:*/		return 0x820BC978;
	}
	return 0x820BC978;
} // Block from 820BC950h-820BC978h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC978);
		  /* 820BC978h */ case    0:  		/* lwz R24, <#[R1 + 168]> */
		/* 820BC978h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BC978h case    0:*/		return 0x820BC97C;
		  /* 820BC97Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC97Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC97Ch case    1:*/		return 0x820BC980;
		  /* 820BC980h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BC980h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC9A0;  }
		/* 820BC980h case    2:*/		return 0x820BC984;
		  /* 820BC984h */ case    3:  		/* addi R11, R24, -4 */
		/* 820BC984h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820BC984h case    3:*/		return 0x820BC988;
		  /* 820BC988h */ case    4:  		/* mr R10, R29 */
		/* 820BC988h case    4:*/		regs.R10 = regs.R29;
		/* 820BC988h case    4:*/		return 0x820BC98C;
		  /* 820BC98Ch */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC98Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC98Ch case    5:*/		return 0x820BC990;
		  /* 820BC990h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC990h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC9A0;  }
		/* 820BC990h case    6:*/		return 0x820BC994;
		  /* 820BC994h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC994h case    7:*/		regs.CTR = regs.R30;
		/* 820BC994h case    7:*/		return 0x820BC998;
		  /* 820BC998h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC998h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC998h case    8:*/		return 0x820BC99C;
		  /* 820BC99Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC99Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC998;  }
		/* 820BC99Ch case    9:*/		return 0x820BC9A0;
	}
	return 0x820BC9A0;
} // Block from 820BC978h-820BC9A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC9A0);
		  /* 820BC9A0h */ case    0:  		/* lwz R25, <#[R1 + 172]> */
		/* 820BC9A0h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BC9A0h case    0:*/		return 0x820BC9A4;
		  /* 820BC9A4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BC9A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC9A4h case    1:*/		return 0x820BC9A8;
		  /* 820BC9A8h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BC9A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BC9E8;  }
		/* 820BC9A8h case    2:*/		return 0x820BC9AC;
		  /* 820BC9ACh */ case    3:  		/* addi R11, R25, -4 */
		/* 820BC9ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820BC9ACh case    3:*/		return 0x820BC9B0;
		  /* 820BC9B0h */ case    4:  		/* mr R10, R29 */
		/* 820BC9B0h case    4:*/		regs.R10 = regs.R29;
		/* 820BC9B0h case    4:*/		return 0x820BC9B4;
		  /* 820BC9B4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BC9B4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC9B4h case    5:*/		return 0x820BC9B8;
		  /* 820BC9B8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC9B8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BC9C8;  }
		/* 820BC9B8h case    6:*/		return 0x820BC9BC;
		  /* 820BC9BCh */ case    7:  		/* mtspr CTR, R30 */
		/* 820BC9BCh case    7:*/		regs.CTR = regs.R30;
		/* 820BC9BCh case    7:*/		return 0x820BC9C0;
		  /* 820BC9C0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BC9C0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC9C0h case    8:*/		return 0x820BC9C4;
		  /* 820BC9C4h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BC9C4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC9C0;  }
		/* 820BC9C4h case    9:*/		return 0x820BC9C8;
	}
	return 0x820BC9C8;
} // Block from 820BC9A0h-820BC9C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BC9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC9C8);
		  /* 820BC9C8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BC9C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BC9C8h case    0:*/		return 0x820BC9CC;
		  /* 820BC9CCh */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BC9CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820BC9E8;  }
		/* 820BC9CCh case    1:*/		return 0x820BC9D0;
		  /* 820BC9D0h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BC9D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BC9D0h case    2:*/		return 0x820BC9D4;
		  /* 820BC9D4h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BC9D4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BC9D4h case    3:*/		return 0x820BC9D8;
		  /* 820BC9D8h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BC9D8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BC9E8;  }
		/* 820BC9D8h case    4:*/		return 0x820BC9DC;
		  /* 820BC9DCh */ case    5:  		/* mtspr CTR, R30 */
		/* 820BC9DCh case    5:*/		regs.CTR = regs.R30;
		/* 820BC9DCh case    5:*/		return 0x820BC9E0;
		  /* 820BC9E0h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BC9E0h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BC9E0h case    6:*/		return 0x820BC9E4;
		  /* 820BC9E4h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BC9E4h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BC9E0;  }
		/* 820BC9E4h case    7:*/		return 0x820BC9E8;
	}
	return 0x820BC9E8;
} // Block from 820BC9C8h-820BC9E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BC9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BC9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BC9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BC9E8);
		  /* 820BC9E8h */ case    0:  		/* rlwinm R28, R30, 0, 12, 31 */
		/* 820BC9E8h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R28,regs.R30);
		/* 820BC9E8h case    0:*/		return 0x820BC9EC;
		  /* 820BC9ECh */ case    1:  		/* lwz R29, <#[R1 + 144]> */
		/* 820BC9ECh case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 820BC9ECh case    1:*/		return 0x820BC9F0;
		  /* 820BC9F0h */ case    2:  		/* li R9, 0 */
		/* 820BC9F0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BC9F0h case    2:*/		return 0x820BC9F4;
		  /* 820BC9F4h */ case    3:  		/* oris R27, R28, 4112 */
		/* 820BC9F4h case    3:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R28,0x1010);
		/* 820BC9F4h case    3:*/		return 0x820BC9F8;
		  /* 820BC9F8h */ case    4:  		/* li R8, 0 */
		/* 820BC9F8h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BC9F8h case    4:*/		return 0x820BC9FC;
		  /* 820BC9FCh */ case    5:  		/* mr R7, R29 */
		/* 820BC9FCh case    5:*/		regs.R7 = regs.R29;
		/* 820BC9FCh case    5:*/		return 0x820BCA00;
		  /* 820BCA00h */ case    6:  		/* mr R6, R26 */
		/* 820BCA00h case    6:*/		regs.R6 = regs.R26;
		/* 820BCA00h case    6:*/		return 0x820BCA04;
		  /* 820BCA04h */ case    7:  		/* mr R5, R27 */
		/* 820BCA04h case    7:*/		regs.R5 = regs.R27;
		/* 820BCA04h case    7:*/		return 0x820BCA08;
		  /* 820BCA08h */ case    8:  		/* mr R4, R16 */
		/* 820BCA08h case    8:*/		regs.R4 = regs.R16;
		/* 820BCA08h case    8:*/		return 0x820BCA0C;
		  /* 820BCA0Ch */ case    9:  		/* mr R3, R14 */
		/* 820BCA0Ch case    9:*/		regs.R3 = regs.R14;
		/* 820BCA0Ch case    9:*/		return 0x820BCA10;
		  /* 820BCA10h */ case   10:  		/* bl -48904 */
		/* 820BCA10h case   10:*/		regs.LR = 0x820BCA14; return 0x820B0B08;
		/* 820BCA10h case   10:*/		return 0x820BCA14;
		  /* 820BCA14h */ case   11:  		/* or. R31, R3, R3 */
		/* 820BCA14h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCA14h case   11:*/		return 0x820BCA18;
		  /* 820BCA18h */ case   12:  		/* bc 12, CR0_LT, 6592 */
		/* 820BCA18h case   12:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCA18h case   12:*/		return 0x820BCA1C;
		  /* 820BCA1Ch */ case   13:  		/* oris R30, R28, 8224 */
		/* 820BCA1Ch case   13:*/		cpu::op::oris<0>(regs,&regs.R30,regs.R28,0x2020);
		/* 820BCA1Ch case   13:*/		return 0x820BCA20;
		  /* 820BCA20h */ case   14:  		/* li R9, 23 */
		/* 820BCA20h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BCA20h case   14:*/		return 0x820BCA24;
		  /* 820BCA24h */ case   15:  		/* mr R8, R29 */
		/* 820BCA24h case   15:*/		regs.R8 = regs.R29;
		/* 820BCA24h case   15:*/		return 0x820BCA28;
		  /* 820BCA28h */ case   16:  		/* mr R7, R26 */
		/* 820BCA28h case   16:*/		regs.R7 = regs.R26;
		/* 820BCA28h case   16:*/		return 0x820BCA2C;
		  /* 820BCA2Ch */ case   17:  		/* mr R6, R23 */
		/* 820BCA2Ch case   17:*/		regs.R6 = regs.R23;
		/* 820BCA2Ch case   17:*/		return 0x820BCA30;
		  /* 820BCA30h */ case   18:  		/* mr R5, R30 */
		/* 820BCA30h case   18:*/		regs.R5 = regs.R30;
		/* 820BCA30h case   18:*/		return 0x820BCA34;
		  /* 820BCA34h */ case   19:  		/* mr R4, R16 */
		/* 820BCA34h case   19:*/		regs.R4 = regs.R16;
		/* 820BCA34h case   19:*/		return 0x820BCA38;
		  /* 820BCA38h */ case   20:  		/* mr R3, R14 */
		/* 820BCA38h case   20:*/		regs.R3 = regs.R14;
		/* 820BCA38h case   20:*/		return 0x820BCA3C;
		  /* 820BCA3Ch */ case   21:  		/* bl -48948 */
		/* 820BCA3Ch case   21:*/		regs.LR = 0x820BCA40; return 0x820B0B08;
		/* 820BCA3Ch case   21:*/		return 0x820BCA40;
		  /* 820BCA40h */ case   22:  		/* or. R31, R3, R3 */
		/* 820BCA40h case   22:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCA40h case   22:*/		return 0x820BCA44;
		  /* 820BCA44h */ case   23:  		/* bc 12, CR0_LT, 6548 */
		/* 820BCA44h case   23:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCA44h case   23:*/		return 0x820BCA48;
		  /* 820BCA48h */ case   24:  		/* li R9, 23 */
		/* 820BCA48h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BCA48h case   24:*/		return 0x820BCA4C;
		  /* 820BCA4Ch */ case   25:  		/* mr R8, R26 */
		/* 820BCA4Ch case   25:*/		regs.R8 = regs.R26;
		/* 820BCA4Ch case   25:*/		return 0x820BCA50;
		  /* 820BCA50h */ case   26:  		/* mr R7, R29 */
		/* 820BCA50h case   26:*/		regs.R7 = regs.R29;
		/* 820BCA50h case   26:*/		return 0x820BCA54;
		  /* 820BCA54h */ case   27:  		/* mr R6, R24 */
		/* 820BCA54h case   27:*/		regs.R6 = regs.R24;
		/* 820BCA54h case   27:*/		return 0x820BCA58;
		  /* 820BCA58h */ case   28:  		/* mr R5, R30 */
		/* 820BCA58h case   28:*/		regs.R5 = regs.R30;
		/* 820BCA58h case   28:*/		return 0x820BCA5C;
		  /* 820BCA5Ch */ case   29:  		/* mr R4, R16 */
		/* 820BCA5Ch case   29:*/		regs.R4 = regs.R16;
		/* 820BCA5Ch case   29:*/		return 0x820BCA60;
		  /* 820BCA60h */ case   30:  		/* mr R3, R14 */
		/* 820BCA60h case   30:*/		regs.R3 = regs.R14;
		/* 820BCA60h case   30:*/		return 0x820BCA64;
		  /* 820BCA64h */ case   31:  		/* bl -48988 */
		/* 820BCA64h case   31:*/		regs.LR = 0x820BCA68; return 0x820B0B08;
		/* 820BCA64h case   31:*/		return 0x820BCA68;
		  /* 820BCA68h */ case   32:  		/* or. R31, R3, R3 */
		/* 820BCA68h case   32:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCA68h case   32:*/		return 0x820BCA6C;
		  /* 820BCA6Ch */ case   33:  		/* bc 12, CR0_LT, 6508 */
		/* 820BCA6Ch case   33:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCA6Ch case   33:*/		return 0x820BCA70;
		  /* 820BCA70h */ case   34:  		/* li R9, 26 */
		/* 820BCA70h case   34:*/		cpu::op::li<0>(regs,&regs.R9,0x1A);
		/* 820BCA70h case   34:*/		return 0x820BCA74;
		  /* 820BCA74h */ case   35:  		/* li R8, 0 */
		/* 820BCA74h case   35:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BCA74h case   35:*/		return 0x820BCA78;
		  /* 820BCA78h */ case   36:  		/* mr R7, R24 */
		/* 820BCA78h case   36:*/		regs.R7 = regs.R24;
		/* 820BCA78h case   36:*/		return 0x820BCA7C;
		  /* 820BCA7Ch */ case   37:  		/* mr R6, R25 */
		/* 820BCA7Ch case   37:*/		regs.R6 = regs.R25;
		/* 820BCA7Ch case   37:*/		return 0x820BCA80;
		  /* 820BCA80h */ case   38:  		/* mr R5, R27 */
		/* 820BCA80h case   38:*/		regs.R5 = regs.R27;
		/* 820BCA80h case   38:*/		return 0x820BCA84;
		  /* 820BCA84h */ case   39:  		/* mr R4, R16 */
		/* 820BCA84h case   39:*/		regs.R4 = regs.R16;
		/* 820BCA84h case   39:*/		return 0x820BCA88;
		  /* 820BCA88h */ case   40:  		/* mr R3, R14 */
		/* 820BCA88h case   40:*/		regs.R3 = regs.R14;
		/* 820BCA88h case   40:*/		return 0x820BCA8C;
		  /* 820BCA8Ch */ case   41:  		/* bl -49028 */
		/* 820BCA8Ch case   41:*/		regs.LR = 0x820BCA90; return 0x820B0B08;
		/* 820BCA8Ch case   41:*/		return 0x820BCA90;
		  /* 820BCA90h */ case   42:  		/* or. R31, R3, R3 */
		/* 820BCA90h case   42:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCA90h case   42:*/		return 0x820BCA94;
		  /* 820BCA94h */ case   43:  		/* bc 12, CR0_LT, 6468 */
		/* 820BCA94h case   43:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCA94h case   43:*/		return 0x820BCA98;
		  /* 820BCA98h */ case   44:  		/* li R9, 18 */
		/* 820BCA98h case   44:*/		cpu::op::li<0>(regs,&regs.R9,0x12);
		/* 820BCA98h case   44:*/		return 0x820BCA9C;
		  /* 820BCA9Ch */ case   45:  		/* mr R8, R25 */
		/* 820BCA9Ch case   45:*/		regs.R8 = regs.R25;
		/* 820BCA9Ch case   45:*/		return 0x820BCAA0;
		  /* 820BCAA0h */ case   46:  		/* mr R7, R23 */
		/* 820BCAA0h case   46:*/		regs.R7 = regs.R23;
		/* 820BCAA0h case   46:*/		return 0x820BCAA4;
		  /* 820BCAA4h */ case   47:  		/* oris R5, R28, 8256 */
		/* 820BCAA4h case   47:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0x2040);
		/* 820BCAA4h case   47:*/		return 0x820BCAA8;
		  /* 820BCAA8h */ case   48:  		/* b 3208 */
		/* 820BCAA8h case   48:*/		return 0x820BD730;
		/* 820BCAA8h case   48:*/		return 0x820BCAAC;
		  /* 820BCAACh */ case   49:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BCAACh case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BCAACh case   49:*/		return 0x820BCAB0;
		  /* 820BCAB0h */ case   50:  		/* cmplwi CR6, R11, 0 */
		/* 820BCAB0h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BCAB0h case   50:*/		return 0x820BCAB4;
		  /* 820BCAB4h */ case   51:  		/* bc 12, CR6_EQ, 6428 */
		/* 820BCAB4h case   51:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BCAB4h case   51:*/		return 0x820BCAB8;
		  /* 820BCAB8h */ case   52:  		/* cmplwi CR6, R15, 0 */
		/* 820BCAB8h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BCAB8h case   52:*/		return 0x820BCABC;
		  /* 820BCABCh */ case   53:  		/* bc 12, CR6_EQ, -16624 */
		/* 820BCABCh case   53:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BCABCh case   53:*/		return 0x820BCAC0;
		  /* 820BCAC0h */ case   54:  		/* cmplwi CR6, R30, 0 */
		/* 820BCAC0h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCAC0h case   54:*/		return 0x820BCAC4;
		  /* 820BCAC4h */ case   55:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCAC4h case   55:*/		if ( regs.CR[6].eq ) { return 0x820BCAE4;  }
		/* 820BCAC4h case   55:*/		return 0x820BCAC8;
		  /* 820BCAC8h */ case   56:  		/* addi R11, R15, -4 */
		/* 820BCAC8h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BCAC8h case   56:*/		return 0x820BCACC;
		  /* 820BCACCh */ case   57:  		/* li R10, -1 */
		/* 820BCACCh case   57:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BCACCh case   57:*/		return 0x820BCAD0;
		  /* 820BCAD0h */ case   58:  		/* cmplwi CR0, R30, 0 */
		/* 820BCAD0h case   58:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCAD0h case   58:*/		return 0x820BCAD4;
		  /* 820BCAD4h */ case   59:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCAD4h case   59:*/		if ( regs.CR[0].eq ) { return 0x820BCAE4;  }
		/* 820BCAD4h case   59:*/		return 0x820BCAD8;
		  /* 820BCAD8h */ case   60:  		/* mtspr CTR, R30 */
		/* 820BCAD8h case   60:*/		regs.CTR = regs.R30;
		/* 820BCAD8h case   60:*/		return 0x820BCADC;
		  /* 820BCADCh */ case   61:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCADCh case   61:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCADCh case   61:*/		return 0x820BCAE0;
		  /* 820BCAE0h */ case   62:  		/* bc 16, CR0_LT, -4 */
		/* 820BCAE0h case   62:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCADC;  }
		/* 820BCAE0h case   62:*/		return 0x820BCAE4;
	}
	return 0x820BCAE4;
} // Block from 820BC9E8h-820BCAE4h (63 instructions)

//////////////////////////////////////////////////////
// Block at 820BCAE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCAE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCAE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCAE4);
		  /* 820BCAE4h */ case    0:  		/* li R7, 0 */
		/* 820BCAE4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820BCAE4h case    0:*/		return 0x820BCAE8;
		  /* 820BCAE8h */ case    1:  		/* mr R6, R15 */
		/* 820BCAE8h case    1:*/		regs.R6 = regs.R15;
		/* 820BCAE8h case    1:*/		return 0x820BCAEC;
		  /* 820BCAECh */ case    2:  		/* b -18084 */
		/* 820BCAECh case    2:*/		return 0x820B8448;
		/* 820BCAECh case    2:*/		return 0x820BCAF0;
		  /* 820BCAF0h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BCAF0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BCAF0h case    3:*/		return 0x820BCAF4;
		  /* 820BCAF4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820BCAF4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BCAF4h case    4:*/		return 0x820BCAF8;
		  /* 820BCAF8h */ case    5:  		/* bc 12, CR6_EQ, 6360 */
		/* 820BCAF8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BCAF8h case    5:*/		return 0x820BCAFC;
		  /* 820BCAFCh */ case    6:  		/* lwz R31, <#[R1 + 160]> */
		/* 820BCAFCh case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BCAFCh case    6:*/		return 0x820BCB00;
		  /* 820BCB00h */ case    7:  		/* lis R4, 9345 */
		/* 820BCB00h case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820BCB00h case    7:*/		return 0x820BCB04;
		  /* 820BCB04h */ case    8:  		/* rlwinm R30, R31, 2, 0, 29 */
		/* 820BCB04h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R31);
		/* 820BCB04h case    8:*/		return 0x820BCB08;
		  /* 820BCB08h */ case    9:  		/* mr R3, R30 */
		/* 820BCB08h case    9:*/		regs.R3 = regs.R30;
		/* 820BCB08h case    9:*/		return 0x820BCB0C;
		  /* 820BCB0Ch */ case   10:  		/* bl -215308 */
		/* 820BCB0Ch case   10:*/		regs.LR = 0x820BCB10; return 0x82088200;
		/* 820BCB0Ch case   10:*/		return 0x820BCB10;
		  /* 820BCB10h */ case   11:  		/* or. R28, R3, R3 */
		/* 820BCB10h case   11:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820BCB10h case   11:*/		return 0x820BCB14;
		  /* 820BCB14h */ case   12:  		/* stw R28, <#[R1 + 148]> */
		/* 820BCB14h case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000094) );
		/* 820BCB14h case   12:*/		return 0x820BCB18;
		  /* 820BCB18h */ case   13:  		/* bc 12, CR0_EQ, 2312 */
		/* 820BCB18h case   13:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BCB18h case   13:*/		return 0x820BCB1C;
		  /* 820BCB1Ch */ case   14:  		/* lis R4, 9345 */
		/* 820BCB1Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820BCB1Ch case   14:*/		return 0x820BCB20;
		  /* 820BCB20h */ case   15:  		/* mr R3, R30 */
		/* 820BCB20h case   15:*/		regs.R3 = regs.R30;
		/* 820BCB20h case   15:*/		return 0x820BCB24;
		  /* 820BCB24h */ case   16:  		/* bl -215332 */
		/* 820BCB24h case   16:*/		regs.LR = 0x820BCB28; return 0x82088200;
		/* 820BCB24h case   16:*/		return 0x820BCB28;
		  /* 820BCB28h */ case   17:  		/* or. R7, R3, R3 */
		/* 820BCB28h case   17:*/		cpu::op::or<1>(regs,&regs.R7,regs.R3,regs.R3);
		/* 820BCB28h case   17:*/		return 0x820BCB2C;
		  /* 820BCB2Ch */ case   18:  		/* stw R7, <#[R1 + 152]> */
		/* 820BCB2Ch case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000098) );
		/* 820BCB2Ch case   18:*/		return 0x820BCB30;
		  /* 820BCB30h */ case   19:  		/* bc 12, CR0_EQ, 2288 */
		/* 820BCB30h case   19:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BCB30h case   19:*/		return 0x820BCB34;
		  /* 820BCB34h */ case   20:  		/* li R29, -1 */
		/* 820BCB34h case   20:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BCB34h case   20:*/		return 0x820BCB38;
		  /* 820BCB38h */ case   21:  		/* cmplwi CR6, R31, 0 */
		/* 820BCB38h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820BCB38h case   21:*/		return 0x820BCB3C;
		  /* 820BCB3Ch */ case   22:  		/* bc 12, CR6_EQ, 64 */
		/* 820BCB3Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x820BCB7C;  }
		/* 820BCB3Ch case   22:*/		return 0x820BCB40;
		  /* 820BCB40h */ case   23:  		/* addi R11, R28, -4 */
		/* 820BCB40h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BCB40h case   23:*/		return 0x820BCB44;
		  /* 820BCB44h */ case   24:  		/* mr R10, R29 */
		/* 820BCB44h case   24:*/		regs.R10 = regs.R29;
		/* 820BCB44h case   24:*/		return 0x820BCB48;
		  /* 820BCB48h */ case   25:  		/* cmplwi CR0, R31, 0 */
		/* 820BCB48h case   25:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820BCB48h case   25:*/		return 0x820BCB4C;
		  /* 820BCB4Ch */ case   26:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCB4Ch case   26:*/		if ( regs.CR[0].eq ) { return 0x820BCB5C;  }
		/* 820BCB4Ch case   26:*/		return 0x820BCB50;
		  /* 820BCB50h */ case   27:  		/* mtspr CTR, R31 */
		/* 820BCB50h case   27:*/		regs.CTR = regs.R31;
		/* 820BCB50h case   27:*/		return 0x820BCB54;
		  /* 820BCB54h */ case   28:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCB54h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCB54h case   28:*/		return 0x820BCB58;
		  /* 820BCB58h */ case   29:  		/* bc 16, CR0_LT, -4 */
		/* 820BCB58h case   29:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCB54;  }
		/* 820BCB58h case   29:*/		return 0x820BCB5C;
	}
	return 0x820BCB5C;
} // Block from 820BCAE4h-820BCB5Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 820BCB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCB5C);
		  /* 820BCB5Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 820BCB5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820BCB5Ch case    0:*/		return 0x820BCB60;
		  /* 820BCB60h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BCB60h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BCB7C;  }
		/* 820BCB60h case    1:*/		return 0x820BCB64;
		  /* 820BCB64h */ case    2:  		/* addi R11, R7, -4 */
		/* 820BCB64h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0xFFFFFFFC);
		/* 820BCB64h case    2:*/		return 0x820BCB68;
		  /* 820BCB68h */ case    3:  		/* cmplwi CR0, R31, 0 */
		/* 820BCB68h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820BCB68h case    3:*/		return 0x820BCB6C;
		  /* 820BCB6Ch */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCB6Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x820BCB7C;  }
		/* 820BCB6Ch case    4:*/		return 0x820BCB70;
		  /* 820BCB70h */ case    5:  		/* mtspr CTR, R31 */
		/* 820BCB70h case    5:*/		regs.CTR = regs.R31;
		/* 820BCB70h case    5:*/		return 0x820BCB74;
		  /* 820BCB74h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BCB74h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCB74h case    6:*/		return 0x820BCB78;
		  /* 820BCB78h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BCB78h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCB74;  }
		/* 820BCB78h case    7:*/		return 0x820BCB7C;
	}
	return 0x820BCB7C;
} // Block from 820BCB5Ch-820BCB7Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BCB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCB7C);
		  /* 820BCB7Ch */ case    0:  		/* mr R8, R31 */
		/* 820BCB7Ch case    0:*/		regs.R8 = regs.R31;
		/* 820BCB7Ch case    0:*/		return 0x820BCB80;
		  /* 820BCB80h */ case    1:  		/* mr R6, R28 */
		/* 820BCB80h case    1:*/		regs.R6 = regs.R28;
		/* 820BCB80h case    1:*/		return 0x820BCB84;
		  /* 820BCB84h */ case    2:  		/* b -18232 */
		/* 820BCB84h case    2:*/		return 0x820B844C;
		/* 820BCB84h case    2:*/		return 0x820BCB88;
		  /* 820BCB88h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BCB88h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BCB88h case    3:*/		return 0x820BCB8C;
		  /* 820BCB8Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820BCB8Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BCB8Ch case    4:*/		return 0x820BCB90;
		  /* 820BCB90h */ case    5:  		/* bc 12, CR6_EQ, 6208 */
		/* 820BCB90h case    5:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BCB90h case    5:*/		return 0x820BCB94;
		  /* 820BCB94h */ case    6:  		/* cmplwi CR6, R15, 0 */
		/* 820BCB94h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BCB94h case    6:*/		return 0x820BCB98;
		  /* 820BCB98h */ case    7:  		/* bc 12, CR6_EQ, -16844 */
		/* 820BCB98h case    7:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BCB98h case    7:*/		return 0x820BCB9C;
		  /* 820BCB9Ch */ case    8:  		/* lis R11, -32255 */
		/* 820BCB9Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BCB9Ch case    8:*/		return 0x820BCBA0;
		  /* 820BCBA0h */ case    9:  		/* lwz R31, <#[R14 + 8]> */
		/* 820BCBA0h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R14 + 0x00000008) );
		/* 820BCBA0h case    9:*/		return 0x820BCBA4;
		  /* 820BCBA4h */ case   10:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 820BCBA4h case   10:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 820BCBA4h case   10:*/		return 0x820BCBA8;
		  /* 820BCBA8h */ case   11:  		/* bl -150992 */
		/* 820BCBA8h case   11:*/		regs.LR = 0x820BCBAC; return 0x82097DD8;
		/* 820BCBA8h case   11:*/		return 0x820BCBAC;
		  /* 820BCBACh */ case   12:  		/* lis R11, -32256 */
		/* 820BCBACh case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820BCBACh case   12:*/		return 0x820BCBB0;
		  /* 820BCBB0h */ case   13:  		/* lwz R4, <#[R31 + 120]> */
		/* 820BCBB0h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820BCBB0h case   13:*/		return 0x820BCBB4;
		  /* 820BCBB4h */ case   14:  		/* mr R3, R31 */
		/* 820BCBB4h case   14:*/		regs.R3 = regs.R31;
		/* 820BCBB4h case   14:*/		return 0x820BCBB8;
		  /* 820BCBB8h */ case   15:  		/* li R6, 0 */
		/* 820BCBB8h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BCBB8h case   15:*/		return 0x820BCBBC;
		  /* 820BCBBCh */ case   16:  		/* li R5, 0 */
		/* 820BCBBCh case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BCBBCh case   16:*/		return 0x820BCBC0;
		  /* 820BCBC0h */ case   17:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 820BCBC0h case   17:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 820BCBC0h case   17:*/		return 0x820BCBC4;
		  /* 820BCBC4h */ case   18:  		/* fdiv FR1, FR0, FR1 */
		/* 820BCBC4h case   18:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR0,regs.FR1);
		/* 820BCBC4h case   18:*/		return 0x820BCBC8;
		  /* 820BCBC8h */ case   19:  		/* bl 263776 */
		/* 820BCBC8h case   19:*/		regs.LR = 0x820BCBCC; return 0x820FD228;
		/* 820BCBC8h case   19:*/		return 0x820BCBCC;
		  /* 820BCBCCh */ case   20:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BCBCCh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BCBCCh case   20:*/		return 0x820BCBD0;
		  /* 820BCBD0h */ case   21:  		/* lis R10, -32256 */
		/* 820BCBD0h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820BCBD0h case   21:*/		return 0x820BCBD4;
		  /* 820BCBD4h */ case   22:  		/* mr R31, R3 */
		/* 820BCBD4h case   22:*/		regs.R31 = regs.R3;
		/* 820BCBD4h case   22:*/		return 0x820BCBD8;
		  /* 820BCBD8h */ case   23:  		/* li R6, 0 */
		/* 820BCBD8h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BCBD8h case   23:*/		return 0x820BCBDC;
		  /* 820BCBDCh */ case   24:  		/* li R5, 0 */
		/* 820BCBDCh case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BCBDCh case   24:*/		return 0x820BCBE0;
		  /* 820BCBE0h */ case   25:  		/* mr R3, R11 */
		/* 820BCBE0h case   25:*/		regs.R3 = regs.R11;
		/* 820BCBE0h case   25:*/		return 0x820BCBE4;
		  /* 820BCBE4h */ case   26:  		/* lwz R4, <#[R11 + 120]> */
		/* 820BCBE4h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000078) );
		/* 820BCBE4h case   26:*/		return 0x820BCBE8;
		  /* 820BCBE8h */ case   27:  		/* lfd FR1, <#[R10 + 4736]> */
		/* 820BCBE8h case   27:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00001280) );
		/* 820BCBE8h case   27:*/		return 0x820BCBEC;
		  /* 820BCBECh */ case   28:  		/* bl 263740 */
		/* 820BCBECh case   28:*/		regs.LR = 0x820BCBF0; return 0x820FD228;
		/* 820BCBECh case   28:*/		return 0x820BCBF0;
		  /* 820BCBF0h */ case   29:  		/* mr R29, R3 */
		/* 820BCBF0h case   29:*/		regs.R29 = regs.R3;
		/* 820BCBF0h case   29:*/		return 0x820BCBF4;
		  /* 820BCBF4h */ case   30:  		/* rlwinm R4, R30, 3, 0, 28 */
		/* 820BCBF4h case   30:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R30);
		/* 820BCBF4h case   30:*/		return 0x820BCBF8;
		  /* 820BCBF8h */ case   31:  		/* mr R3, R14 */
		/* 820BCBF8h case   31:*/		regs.R3 = regs.R14;
		/* 820BCBF8h case   31:*/		return 0x820BCBFC;
		  /* 820BCBFCh */ case   32:  		/* bl -50444 */
		/* 820BCBFCh case   32:*/		regs.LR = 0x820BCC00; return 0x820B06F0;
		/* 820BCBFCh case   32:*/		return 0x820BCC00;
		  /* 820BCC00h */ case   33:  		/* cmplwi CR0, R3, 0 */
		/* 820BCC00h case   33:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820BCC00h case   33:*/		return 0x820BCC04;
		  /* 820BCC04h */ case   34:  		/* bc 12, CR0_EQ, 2076 */
		/* 820BCC04h case   34:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BCC04h case   34:*/		return 0x820BCC08;
		  /* 820BCC08h */ case   35:  		/* li R11, 8 */
		/* 820BCC08h case   35:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 820BCC08h case   35:*/		return 0x820BCC0C;
		  /* 820BCC0Ch */ case   36:  		/* addi R10, R1, 156 */
		/* 820BCC0Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820BCC0Ch case   36:*/		return 0x820BCC10;
		  /* 820BCC10h */ case   37:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 820BCC10h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 820BCC10h case   37:*/		return 0x820BCC14;
		  /* 820BCC14h */ case   38:  		/* mtspr CTR, R11 */
		/* 820BCC14h case   38:*/		regs.CTR = regs.R11;
		/* 820BCC14h case   38:*/		return 0x820BCC18;
		  /* 820BCC18h */ case   39:  		/* stwu R3, <#[R10 + 4]> */
		/* 820BCC18h case   39:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BCC18h case   39:*/		return 0x820BCC1C;
		  /* 820BCC1Ch */ case   40:  		/* add R3, R3, R9 */
		/* 820BCC1Ch case   40:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R9);
		/* 820BCC1Ch case   40:*/		return 0x820BCC20;
		  /* 820BCC20h */ case   41:  		/* bc 16, CR0_LT, -8 */
		/* 820BCC20h case   41:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCC18;  }
		/* 820BCC20h case   41:*/		return 0x820BCC24;
		  /* 820BCC24h */ case   42:  		/* lwz R20, <#[R1 + 188]> */
		/* 820BCC24h case   42:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000BC) );
		/* 820BCC24h case   42:*/		return 0x820BCC28;
		  /* 820BCC28h */ case   43:  		/* cmplwi CR6, R30, 0 */
		/* 820BCC28h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCC28h case   43:*/		return 0x820BCC2C;
		  /* 820BCC2Ch */ case   44:  		/* lwz R8, <#[R1 + 184]> */
		/* 820BCC2Ch case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B8) );
		/* 820BCC2Ch case   44:*/		return 0x820BCC30;
		  /* 820BCC30h */ case   45:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCC30h case   45:*/		if ( regs.CR[6].eq ) { return 0x820BCC50;  }
		/* 820BCC30h case   45:*/		return 0x820BCC34;
		  /* 820BCC34h */ case   46:  		/* mr R11, R20 */
		/* 820BCC34h case   46:*/		regs.R11 = regs.R20;
		/* 820BCC34h case   46:*/		return 0x820BCC38;
		  /* 820BCC38h */ case   47:  		/* mtspr CTR, R30 */
		/* 820BCC38h case   47:*/		regs.CTR = regs.R30;
		/* 820BCC38h case   47:*/		return 0x820BCC3C;
		  /* 820BCC3Ch */ case   48:  		/* subf R10, R20, R8 */
		/* 820BCC3Ch case   48:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R20,regs.R8);
		/* 820BCC3Ch case   48:*/		return 0x820BCC40;
		  /* 820BCC40h */ case   49:  		/* stwx R31, <#[R10 + R11]> */
		/* 820BCC40h case   49:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BCC40h case   49:*/		return 0x820BCC44;
		  /* 820BCC44h */ case   50:  		/* stw R29, <#[R11]> */
		/* 820BCC44h case   50:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 820BCC44h case   50:*/		return 0x820BCC48;
		  /* 820BCC48h */ case   51:  		/* addi R11, R11, 4 */
		/* 820BCC48h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BCC48h case   51:*/		return 0x820BCC4C;
		  /* 820BCC4Ch */ case   52:  		/* bc 16, CR0_LT, -12 */
		/* 820BCC4Ch case   52:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCC40;  }
		/* 820BCC4Ch case   52:*/		return 0x820BCC50;
	}
	return 0x820BCC50;
} // Block from 820BCB7Ch-820BCC50h (53 instructions)

//////////////////////////////////////////////////////
// Block at 820BCC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCC50);
		  /* 820BCC50h */ case    0:  		/* lwz R24, <#[R1 + 160]> */
		/* 820BCC50h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BCC50h case    0:*/		return 0x820BCC54;
		  /* 820BCC54h */ case    1:  		/* li R29, -1 */
		/* 820BCC54h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BCC54h case    1:*/		return 0x820BCC58;
		  /* 820BCC58h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820BCC58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCC58h case    2:*/		return 0x820BCC5C;
		  /* 820BCC5Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCC5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820BCC7C;  }
		/* 820BCC5Ch case    3:*/		return 0x820BCC60;
		  /* 820BCC60h */ case    4:  		/* addi R11, R24, -4 */
		/* 820BCC60h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820BCC60h case    4:*/		return 0x820BCC64;
		  /* 820BCC64h */ case    5:  		/* mr R10, R29 */
		/* 820BCC64h case    5:*/		regs.R10 = regs.R29;
		/* 820BCC64h case    5:*/		return 0x820BCC68;
		  /* 820BCC68h */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820BCC68h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCC68h case    6:*/		return 0x820BCC6C;
		  /* 820BCC6Ch */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCC6Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x820BCC7C;  }
		/* 820BCC6Ch case    7:*/		return 0x820BCC70;
		  /* 820BCC70h */ case    8:  		/* mtspr CTR, R30 */
		/* 820BCC70h case    8:*/		regs.CTR = regs.R30;
		/* 820BCC70h case    8:*/		return 0x820BCC74;
		  /* 820BCC74h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCC74h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCC74h case    9:*/		return 0x820BCC78;
		  /* 820BCC78h */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820BCC78h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCC74;  }
		/* 820BCC78h case   10:*/		return 0x820BCC7C;
	}
	return 0x820BCC7C;
} // Block from 820BCC50h-820BCC7Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BCC7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCC7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCC7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCC7C);
		  /* 820BCC7Ch */ case    0:  		/* lwz R21, <#[R1 + 164]> */
		/* 820BCC7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BCC7Ch case    0:*/		return 0x820BCC80;
		  /* 820BCC80h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BCC80h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCC80h case    1:*/		return 0x820BCC84;
		  /* 820BCC84h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCC84h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BCCA4;  }
		/* 820BCC84h case    2:*/		return 0x820BCC88;
		  /* 820BCC88h */ case    3:  		/* addi R11, R21, -4 */
		/* 820BCC88h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0xFFFFFFFC);
		/* 820BCC88h case    3:*/		return 0x820BCC8C;
		  /* 820BCC8Ch */ case    4:  		/* mr R10, R29 */
		/* 820BCC8Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BCC8Ch case    4:*/		return 0x820BCC90;
		  /* 820BCC90h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BCC90h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCC90h case    5:*/		return 0x820BCC94;
		  /* 820BCC94h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCC94h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BCCA4;  }
		/* 820BCC94h case    6:*/		return 0x820BCC98;
		  /* 820BCC98h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BCC98h case    7:*/		regs.CTR = regs.R30;
		/* 820BCC98h case    7:*/		return 0x820BCC9C;
		  /* 820BCC9Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCC9Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCC9Ch case    8:*/		return 0x820BCCA0;
		  /* 820BCCA0h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BCCA0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCC9C;  }
		/* 820BCCA0h case    9:*/		return 0x820BCCA4;
	}
	return 0x820BCCA4;
} // Block from 820BCC7Ch-820BCCA4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BCCA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCCA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCCA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCCA4);
		  /* 820BCCA4h */ case    0:  		/* lwz R22, <#[R1 + 168]> */
		/* 820BCCA4h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BCCA4h case    0:*/		return 0x820BCCA8;
		  /* 820BCCA8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BCCA8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCCA8h case    1:*/		return 0x820BCCAC;
		  /* 820BCCACh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCCACh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BCCCC;  }
		/* 820BCCACh case    2:*/		return 0x820BCCB0;
		  /* 820BCCB0h */ case    3:  		/* addi R11, R22, -4 */
		/* 820BCCB0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFFC);
		/* 820BCCB0h case    3:*/		return 0x820BCCB4;
		  /* 820BCCB4h */ case    4:  		/* mr R10, R29 */
		/* 820BCCB4h case    4:*/		regs.R10 = regs.R29;
		/* 820BCCB4h case    4:*/		return 0x820BCCB8;
		  /* 820BCCB8h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BCCB8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCCB8h case    5:*/		return 0x820BCCBC;
		  /* 820BCCBCh */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCCBCh case    6:*/		if ( regs.CR[0].eq ) { return 0x820BCCCC;  }
		/* 820BCCBCh case    6:*/		return 0x820BCCC0;
		  /* 820BCCC0h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BCCC0h case    7:*/		regs.CTR = regs.R30;
		/* 820BCCC0h case    7:*/		return 0x820BCCC4;
		  /* 820BCCC4h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCCC4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCCC4h case    8:*/		return 0x820BCCC8;
		  /* 820BCCC8h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BCCC8h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCCC4;  }
		/* 820BCCC8h case    9:*/		return 0x820BCCCC;
	}
	return 0x820BCCCC;
} // Block from 820BCCA4h-820BCCCCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BCCCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCCCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCCCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCCCC);
		  /* 820BCCCCh */ case    0:  		/* lwz R23, <#[R1 + 172]> */
		/* 820BCCCCh case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BCCCCh case    0:*/		return 0x820BCCD0;
		  /* 820BCCD0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BCCD0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCCD0h case    1:*/		return 0x820BCCD4;
		  /* 820BCCD4h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCCD4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BCCF4;  }
		/* 820BCCD4h case    2:*/		return 0x820BCCD8;
		  /* 820BCCD8h */ case    3:  		/* addi R11, R23, -4 */
		/* 820BCCD8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820BCCD8h case    3:*/		return 0x820BCCDC;
		  /* 820BCCDCh */ case    4:  		/* mr R10, R29 */
		/* 820BCCDCh case    4:*/		regs.R10 = regs.R29;
		/* 820BCCDCh case    4:*/		return 0x820BCCE0;
		  /* 820BCCE0h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BCCE0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCCE0h case    5:*/		return 0x820BCCE4;
		  /* 820BCCE4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCCE4h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BCCF4;  }
		/* 820BCCE4h case    6:*/		return 0x820BCCE8;
		  /* 820BCCE8h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BCCE8h case    7:*/		regs.CTR = regs.R30;
		/* 820BCCE8h case    7:*/		return 0x820BCCEC;
		  /* 820BCCECh */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCCECh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCCECh case    8:*/		return 0x820BCCF0;
		  /* 820BCCF0h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BCCF0h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCCEC;  }
		/* 820BCCF0h case    9:*/		return 0x820BCCF4;
	}
	return 0x820BCCF4;
} // Block from 820BCCCCh-820BCCF4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BCCF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCCF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCCF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCCF4);
		  /* 820BCCF4h */ case    0:  		/* lwz R25, <#[R1 + 176]> */
		/* 820BCCF4h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BCCF4h case    0:*/		return 0x820BCCF8;
		  /* 820BCCF8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BCCF8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCCF8h case    1:*/		return 0x820BCCFC;
		  /* 820BCCFCh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCCFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BCD1C;  }
		/* 820BCCFCh case    2:*/		return 0x820BCD00;
		  /* 820BCD00h */ case    3:  		/* addi R11, R25, -4 */
		/* 820BCD00h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820BCD00h case    3:*/		return 0x820BCD04;
		  /* 820BCD04h */ case    4:  		/* mr R10, R29 */
		/* 820BCD04h case    4:*/		regs.R10 = regs.R29;
		/* 820BCD04h case    4:*/		return 0x820BCD08;
		  /* 820BCD08h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BCD08h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCD08h case    5:*/		return 0x820BCD0C;
		  /* 820BCD0Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCD0Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820BCD1C;  }
		/* 820BCD0Ch case    6:*/		return 0x820BCD10;
		  /* 820BCD10h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BCD10h case    7:*/		regs.CTR = regs.R30;
		/* 820BCD10h case    7:*/		return 0x820BCD14;
		  /* 820BCD14h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCD14h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCD14h case    8:*/		return 0x820BCD18;
		  /* 820BCD18h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BCD18h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCD14;  }
		/* 820BCD18h case    9:*/		return 0x820BCD1C;
	}
	return 0x820BCD1C;
} // Block from 820BCCF4h-820BCD1Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BCD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCD1C);
		  /* 820BCD1Ch */ case    0:  		/* lwz R26, <#[R1 + 180]> */
		/* 820BCD1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BCD1Ch case    0:*/		return 0x820BCD20;
		  /* 820BCD20h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BCD20h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCD20h case    1:*/		return 0x820BCD24;
		  /* 820BCD24h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BCD24h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BCD64;  }
		/* 820BCD24h case    2:*/		return 0x820BCD28;
		  /* 820BCD28h */ case    3:  		/* addi R11, R26, -4 */
		/* 820BCD28h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BCD28h case    3:*/		return 0x820BCD2C;
		  /* 820BCD2Ch */ case    4:  		/* mr R10, R29 */
		/* 820BCD2Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BCD2Ch case    4:*/		return 0x820BCD30;
		  /* 820BCD30h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BCD30h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCD30h case    5:*/		return 0x820BCD34;
		  /* 820BCD34h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCD34h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BCD44;  }
		/* 820BCD34h case    6:*/		return 0x820BCD38;
		  /* 820BCD38h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BCD38h case    7:*/		regs.CTR = regs.R30;
		/* 820BCD38h case    7:*/		return 0x820BCD3C;
		  /* 820BCD3Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCD3Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCD3Ch case    8:*/		return 0x820BCD40;
		  /* 820BCD40h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BCD40h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCD3C;  }
		/* 820BCD40h case    9:*/		return 0x820BCD44;
	}
	return 0x820BCD44;
} // Block from 820BCD1Ch-820BCD44h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BCD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCD44);
		  /* 820BCD44h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BCD44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCD44h case    0:*/		return 0x820BCD48;
		  /* 820BCD48h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BCD48h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BCD64;  }
		/* 820BCD48h case    1:*/		return 0x820BCD4C;
		  /* 820BCD4Ch */ case    2:  		/* addi R11, R15, -4 */
		/* 820BCD4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BCD4Ch case    2:*/		return 0x820BCD50;
		  /* 820BCD50h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BCD50h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCD50h case    3:*/		return 0x820BCD54;
		  /* 820BCD54h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCD54h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BCD64;  }
		/* 820BCD54h case    4:*/		return 0x820BCD58;
		  /* 820BCD58h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BCD58h case    5:*/		regs.CTR = regs.R30;
		/* 820BCD58h case    5:*/		return 0x820BCD5C;
		  /* 820BCD5Ch */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BCD5Ch case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCD5Ch case    6:*/		return 0x820BCD60;
		  /* 820BCD60h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BCD60h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCD5C;  }
		/* 820BCD60h case    7:*/		return 0x820BCD64;
	}
	return 0x820BCD64;
} // Block from 820BCD44h-820BCD64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BCD64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCD64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCD64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCD64);
		  /* 820BCD64h */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BCD64h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BCD64h case    0:*/		return 0x820BCD68;
		  /* 820BCD68h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BCD68h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BCD68h case    1:*/		return 0x820BCD6C;
		  /* 820BCD6Ch */ case    2:  		/* li R9, 0 */
		/* 820BCD6Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BCD6Ch case    2:*/		return 0x820BCD70;
		  /* 820BCD70h */ case    3:  		/* oris R27, R30, 8272 */
		/* 820BCD70h case    3:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R30,0x2050);
		/* 820BCD70h case    3:*/		return 0x820BCD74;
		  /* 820BCD74h */ case    4:  		/* mr R6, R24 */
		/* 820BCD74h case    4:*/		regs.R6 = regs.R24;
		/* 820BCD74h case    4:*/		return 0x820BCD78;
		  /* 820BCD78h */ case    5:  		/* mr R5, R27 */
		/* 820BCD78h case    5:*/		regs.R5 = regs.R27;
		/* 820BCD78h case    5:*/		return 0x820BCD7C;
		  /* 820BCD7Ch */ case    6:  		/* mr R4, R16 */
		/* 820BCD7Ch case    6:*/		regs.R4 = regs.R16;
		/* 820BCD7Ch case    6:*/		return 0x820BCD80;
		  /* 820BCD80h */ case    7:  		/* mr R3, R14 */
		/* 820BCD80h case    7:*/		regs.R3 = regs.R14;
		/* 820BCD80h case    7:*/		return 0x820BCD84;
		  /* 820BCD84h */ case    8:  		/* bl -49788 */
		/* 820BCD84h case    8:*/		regs.LR = 0x820BCD88; return 0x820B0B08;
		/* 820BCD84h case    8:*/		return 0x820BCD88;
		  /* 820BCD88h */ case    9:  		/* or. R31, R3, R3 */
		/* 820BCD88h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCD88h case    9:*/		return 0x820BCD8C;
		  /* 820BCD8Ch */ case   10:  		/* bc 12, CR0_LT, 5708 */
		/* 820BCD8Ch case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCD8Ch case   10:*/		return 0x820BCD90;
		  /* 820BCD90h */ case   11:  		/* oris R28, R30, 4176 */
		/* 820BCD90h case   11:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R30,0x1050);
		/* 820BCD90h case   11:*/		return 0x820BCD94;
		  /* 820BCD94h */ case   12:  		/* li R9, 4 */
		/* 820BCD94h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BCD94h case   12:*/		return 0x820BCD98;
		  /* 820BCD98h */ case   13:  		/* li R8, 0 */
		/* 820BCD98h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BCD98h case   13:*/		return 0x820BCD9C;
		  /* 820BCD9Ch */ case   14:  		/* mr R7, R24 */
		/* 820BCD9Ch case   14:*/		regs.R7 = regs.R24;
		/* 820BCD9Ch case   14:*/		return 0x820BCDA0;
		  /* 820BCDA0h */ case   15:  		/* mr R6, R21 */
		/* 820BCDA0h case   15:*/		regs.R6 = regs.R21;
		/* 820BCDA0h case   15:*/		return 0x820BCDA4;
		  /* 820BCDA4h */ case   16:  		/* mr R5, R28 */
		/* 820BCDA4h case   16:*/		regs.R5 = regs.R28;
		/* 820BCDA4h case   16:*/		return 0x820BCDA8;
		  /* 820BCDA8h */ case   17:  		/* mr R4, R16 */
		/* 820BCDA8h case   17:*/		regs.R4 = regs.R16;
		/* 820BCDA8h case   17:*/		return 0x820BCDAC;
		  /* 820BCDACh */ case   18:  		/* mr R3, R14 */
		/* 820BCDACh case   18:*/		regs.R3 = regs.R14;
		/* 820BCDACh case   18:*/		return 0x820BCDB0;
		  /* 820BCDB0h */ case   19:  		/* bl -49832 */
		/* 820BCDB0h case   19:*/		regs.LR = 0x820BCDB4; return 0x820B0B08;
		/* 820BCDB0h case   19:*/		return 0x820BCDB4;
		  /* 820BCDB4h */ case   20:  		/* or. R31, R3, R3 */
		/* 820BCDB4h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCDB4h case   20:*/		return 0x820BCDB8;
		  /* 820BCDB8h */ case   21:  		/* bc 12, CR0_LT, 5664 */
		/* 820BCDB8h case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCDB8h case   21:*/		return 0x820BCDBC;
		  /* 820BCDBCh */ case   22:  		/* oris R29, R30, 4112 */
		/* 820BCDBCh case   22:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R30,0x1010);
		/* 820BCDBCh case   22:*/		return 0x820BCDC0;
		  /* 820BCDC0h */ case   23:  		/* li R9, 0 */
		/* 820BCDC0h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BCDC0h case   23:*/		return 0x820BCDC4;
		  /* 820BCDC4h */ case   24:  		/* li R8, 0 */
		/* 820BCDC4h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BCDC4h case   24:*/		return 0x820BCDC8;
		  /* 820BCDC8h */ case   25:  		/* mr R7, R24 */
		/* 820BCDC8h case   25:*/		regs.R7 = regs.R24;
		/* 820BCDC8h case   25:*/		return 0x820BCDCC;
		  /* 820BCDCCh */ case   26:  		/* mr R6, R22 */
		/* 820BCDCCh case   26:*/		regs.R6 = regs.R22;
		/* 820BCDCCh case   26:*/		return 0x820BCDD0;
		  /* 820BCDD0h */ case   27:  		/* mr R5, R29 */
		/* 820BCDD0h case   27:*/		regs.R5 = regs.R29;
		/* 820BCDD0h case   27:*/		return 0x820BCDD4;
		  /* 820BCDD4h */ case   28:  		/* mr R4, R16 */
		/* 820BCDD4h case   28:*/		regs.R4 = regs.R16;
		/* 820BCDD4h case   28:*/		return 0x820BCDD8;
		  /* 820BCDD8h */ case   29:  		/* mr R3, R14 */
		/* 820BCDD8h case   29:*/		regs.R3 = regs.R14;
		/* 820BCDD8h case   29:*/		return 0x820BCDDC;
		  /* 820BCDDCh */ case   30:  		/* bl -49876 */
		/* 820BCDDCh case   30:*/		regs.LR = 0x820BCDE0; return 0x820B0B08;
		/* 820BCDDCh case   30:*/		return 0x820BCDE0;
		  /* 820BCDE0h */ case   31:  		/* or. R31, R3, R3 */
		/* 820BCDE0h case   31:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCDE0h case   31:*/		return 0x820BCDE4;
		  /* 820BCDE4h */ case   32:  		/* bc 12, CR0_LT, 5620 */
		/* 820BCDE4h case   32:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCDE4h case   32:*/		return 0x820BCDE8;
		  /* 820BCDE8h */ case   33:  		/* li R9, 4 */
		/* 820BCDE8h case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BCDE8h case   33:*/		return 0x820BCDEC;
		  /* 820BCDECh */ case   34:  		/* li R8, 0 */
		/* 820BCDECh case   34:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BCDECh case   34:*/		return 0x820BCDF0;
		  /* 820BCDF0h */ case   35:  		/* mr R7, R22 */
		/* 820BCDF0h case   35:*/		regs.R7 = regs.R22;
		/* 820BCDF0h case   35:*/		return 0x820BCDF4;
		  /* 820BCDF4h */ case   36:  		/* mr R6, R23 */
		/* 820BCDF4h case   36:*/		regs.R6 = regs.R23;
		/* 820BCDF4h case   36:*/		return 0x820BCDF8;
		  /* 820BCDF8h */ case   37:  		/* mr R5, R28 */
		/* 820BCDF8h case   37:*/		regs.R5 = regs.R28;
		/* 820BCDF8h case   37:*/		return 0x820BCDFC;
		  /* 820BCDFCh */ case   38:  		/* mr R4, R16 */
		/* 820BCDFCh case   38:*/		regs.R4 = regs.R16;
		/* 820BCDFCh case   38:*/		return 0x820BCE00;
		  /* 820BCE00h */ case   39:  		/* mr R3, R14 */
		/* 820BCE00h case   39:*/		regs.R3 = regs.R14;
		/* 820BCE00h case   39:*/		return 0x820BCE04;
		  /* 820BCE04h */ case   40:  		/* bl -49916 */
		/* 820BCE04h case   40:*/		regs.LR = 0x820BCE08; return 0x820B0B08;
		/* 820BCE04h case   40:*/		return 0x820BCE08;
		  /* 820BCE08h */ case   41:  		/* or. R31, R3, R3 */
		/* 820BCE08h case   41:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCE08h case   41:*/		return 0x820BCE0C;
		  /* 820BCE0Ch */ case   42:  		/* bc 12, CR0_LT, 5580 */
		/* 820BCE0Ch case   42:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCE0Ch case   42:*/		return 0x820BCE10;
		  /* 820BCE10h */ case   43:  		/* li R9, 8 */
		/* 820BCE10h case   43:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BCE10h case   43:*/		return 0x820BCE14;
		  /* 820BCE14h */ case   44:  		/* li R8, 0 */
		/* 820BCE14h case   44:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BCE14h case   44:*/		return 0x820BCE18;
		  /* 820BCE18h */ case   45:  		/* mr R7, R23 */
		/* 820BCE18h case   45:*/		regs.R7 = regs.R23;
		/* 820BCE18h case   45:*/		return 0x820BCE1C;
		  /* 820BCE1Ch */ case   46:  		/* mr R6, R25 */
		/* 820BCE1Ch case   46:*/		regs.R6 = regs.R25;
		/* 820BCE1Ch case   46:*/		return 0x820BCE20;
		  /* 820BCE20h */ case   47:  		/* mr R5, R29 */
		/* 820BCE20h case   47:*/		regs.R5 = regs.R29;
		/* 820BCE20h case   47:*/		return 0x820BCE24;
		  /* 820BCE24h */ case   48:  		/* mr R4, R16 */
		/* 820BCE24h case   48:*/		regs.R4 = regs.R16;
		/* 820BCE24h case   48:*/		return 0x820BCE28;
		  /* 820BCE28h */ case   49:  		/* mr R3, R14 */
		/* 820BCE28h case   49:*/		regs.R3 = regs.R14;
		/* 820BCE28h case   49:*/		return 0x820BCE2C;
		  /* 820BCE2Ch */ case   50:  		/* bl -49956 */
		/* 820BCE2Ch case   50:*/		regs.LR = 0x820BCE30; return 0x820B0B08;
		/* 820BCE2Ch case   50:*/		return 0x820BCE30;
		  /* 820BCE30h */ case   51:  		/* or. R31, R3, R3 */
		/* 820BCE30h case   51:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCE30h case   51:*/		return 0x820BCE34;
		  /* 820BCE34h */ case   52:  		/* bc 12, CR0_LT, 5540 */
		/* 820BCE34h case   52:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCE34h case   52:*/		return 0x820BCE38;
		  /* 820BCE38h */ case   53:  		/* li R9, 0 */
		/* 820BCE38h case   53:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BCE38h case   53:*/		return 0x820BCE3C;
		  /* 820BCE3Ch */ case   54:  		/* mr R8, R25 */
		/* 820BCE3Ch case   54:*/		regs.R8 = regs.R25;
		/* 820BCE3Ch case   54:*/		return 0x820BCE40;
		  /* 820BCE40h */ case   55:  		/* mr R7, R21 */
		/* 820BCE40h case   55:*/		regs.R7 = regs.R21;
		/* 820BCE40h case   55:*/		return 0x820BCE44;
		  /* 820BCE44h */ case   56:  		/* mr R6, R26 */
		/* 820BCE44h case   56:*/		regs.R6 = regs.R26;
		/* 820BCE44h case   56:*/		return 0x820BCE48;
		  /* 820BCE48h */ case   57:  		/* oris R5, R30, 8256 */
		/* 820BCE48h case   57:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2040);
		/* 820BCE48h case   57:*/		return 0x820BCE4C;
		  /* 820BCE4Ch */ case   58:  		/* mr R4, R16 */
		/* 820BCE4Ch case   58:*/		regs.R4 = regs.R16;
		/* 820BCE4Ch case   58:*/		return 0x820BCE50;
		  /* 820BCE50h */ case   59:  		/* mr R3, R14 */
		/* 820BCE50h case   59:*/		regs.R3 = regs.R14;
		/* 820BCE50h case   59:*/		return 0x820BCE54;
		  /* 820BCE54h */ case   60:  		/* bl -49996 */
		/* 820BCE54h case   60:*/		regs.LR = 0x820BCE58; return 0x820B0B08;
		/* 820BCE54h case   60:*/		return 0x820BCE58;
		  /* 820BCE58h */ case   61:  		/* or. R31, R3, R3 */
		/* 820BCE58h case   61:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCE58h case   61:*/		return 0x820BCE5C;
		  /* 820BCE5Ch */ case   62:  		/* bc 12, CR0_LT, 5500 */
		/* 820BCE5Ch case   62:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCE5Ch case   62:*/		return 0x820BCE60;
		  /* 820BCE60h */ case   63:  		/* mr R8, R20 */
		/* 820BCE60h case   63:*/		regs.R8 = regs.R20;
		/* 820BCE60h case   63:*/		return 0x820BCE64;
		  /* 820BCE64h */ case   64:  		/* mr R7, R26 */
		/* 820BCE64h case   64:*/		regs.R7 = regs.R26;
		/* 820BCE64h case   64:*/		return 0x820BCE68;
		  /* 820BCE68h */ case   65:  		/* b 2240 */
		/* 820BCE68h case   65:*/		return 0x820BD728;
		/* 820BCE68h case   65:*/		return 0x820BCE6C;
		  /* 820BCE6Ch */ case   66:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BCE6Ch case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BCE6Ch case   66:*/		return 0x820BCE70;
		  /* 820BCE70h */ case   67:  		/* cmplwi CR6, R11, 0 */
		/* 820BCE70h case   67:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BCE70h case   67:*/		return 0x820BCE74;
		  /* 820BCE74h */ case   68:  		/* bc 12, CR6_EQ, 5468 */
		/* 820BCE74h case   68:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BCE74h case   68:*/		return 0x820BCE78;
		  /* 820BCE78h */ case   69:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BCE78h case   69:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BCE78h case   69:*/		return 0x820BCE7C;
		  /* 820BCE7Ch */ case   70:  		/* cmplwi CR6, R11, 0 */
		/* 820BCE7Ch case   70:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BCE7Ch case   70:*/		return 0x820BCE80;
		  /* 820BCE80h */ case   71:  		/* bc 12, CR6_EQ, 5456 */
		/* 820BCE80h case   71:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BCE80h case   71:*/		return 0x820BCE84;
		  /* 820BCE84h */ case   72:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BCE84h case   72:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BCE84h case   72:*/		return 0x820BCE88;
		  /* 820BCE88h */ case   73:  		/* cmplwi CR6, R11, 0 */
		/* 820BCE88h case   73:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BCE88h case   73:*/		return 0x820BCE8C;
		  /* 820BCE8Ch */ case   74:  		/* bc 12, CR6_EQ, 5444 */
		/* 820BCE8Ch case   74:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BCE8Ch case   74:*/		return 0x820BCE90;
		  /* 820BCE90h */ case   75:  		/* cmplwi CR6, R15, 0 */
		/* 820BCE90h case   75:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BCE90h case   75:*/		return 0x820BCE94;
		  /* 820BCE94h */ case   76:  		/* bc 12, CR6_EQ, -17608 */
		/* 820BCE94h case   76:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BCE94h case   76:*/		return 0x820BCE98;
		  /* 820BCE98h */ case   77:  		/* lwz R3, <#[R14 + 8]> */
		/* 820BCE98h case   77:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000008) );
		/* 820BCE98h case   77:*/		return 0x820BCE9C;
		  /* 820BCE9Ch */ case   78:  		/* lis R11, -32255 */
		/* 820BCE9Ch case   78:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BCE9Ch case   78:*/		return 0x820BCEA0;
		  /* 820BCEA0h */ case   79:  		/* li R6, 0 */
		/* 820BCEA0h case   79:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BCEA0h case   79:*/		return 0x820BCEA4;
		  /* 820BCEA4h */ case   80:  		/* li R5, 0 */
		/* 820BCEA4h case   80:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BCEA4h case   80:*/		return 0x820BCEA8;
		  /* 820BCEA8h */ case   81:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BCEA8h case   81:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BCEA8h case   81:*/		return 0x820BCEAC;
		  /* 820BCEACh */ case   82:  		/* lfd FR1, <#[R11 + 8664]> */
		/* 820BCEACh case   82:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x000021D8) );
		/* 820BCEACh case   82:*/		return 0x820BCEB0;
		  /* 820BCEB0h */ case   83:  		/* bl 263032 */
		/* 820BCEB0h case   83:*/		regs.LR = 0x820BCEB4; return 0x820FD228;
		/* 820BCEB0h case   83:*/		return 0x820BCEB4;
		  /* 820BCEB4h */ case   84:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BCEB4h case   84:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BCEB4h case   84:*/		return 0x820BCEB8;
		  /* 820BCEB8h */ case   85:  		/* lis R10, -32255 */
		/* 820BCEB8h case   85:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 820BCEB8h case   85:*/		return 0x820BCEBC;
		  /* 820BCEBCh */ case   86:  		/* mr R31, R3 */
		/* 820BCEBCh case   86:*/		regs.R31 = regs.R3;
		/* 820BCEBCh case   86:*/		return 0x820BCEC0;
		  /* 820BCEC0h */ case   87:  		/* li R6, 0 */
		/* 820BCEC0h case   87:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BCEC0h case   87:*/		return 0x820BCEC4;
		  /* 820BCEC4h */ case   88:  		/* li R5, 0 */
		/* 820BCEC4h case   88:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BCEC4h case   88:*/		return 0x820BCEC8;
		  /* 820BCEC8h */ case   89:  		/* mr R3, R11 */
		/* 820BCEC8h case   89:*/		regs.R3 = regs.R11;
		/* 820BCEC8h case   89:*/		return 0x820BCECC;
		  /* 820BCECCh */ case   90:  		/* lwz R4, <#[R11 + 120]> */
		/* 820BCECCh case   90:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000078) );
		/* 820BCECCh case   90:*/		return 0x820BCED0;
		  /* 820BCED0h */ case   91:  		/* lfd FR1, <#[R10 + 9024]> */
		/* 820BCED0h case   91:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00002340) );
		/* 820BCED0h case   91:*/		return 0x820BCED4;
		  /* 820BCED4h */ case   92:  		/* bl 262996 */
		/* 820BCED4h case   92:*/		regs.LR = 0x820BCED8; return 0x820FD228;
		/* 820BCED4h case   92:*/		return 0x820BCED8;
		  /* 820BCED8h */ case   93:  		/* mr R28, R3 */
		/* 820BCED8h case   93:*/		regs.R28 = regs.R3;
		/* 820BCED8h case   93:*/		return 0x820BCEDC;
		  /* 820BCEDCh */ case   94:  		/* mulli R4, R30, 14 */
		/* 820BCEDCh case   94:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0xE);
		/* 820BCEDCh case   94:*/		return 0x820BCEE0;
		  /* 820BCEE0h */ case   95:  		/* mr R3, R14 */
		/* 820BCEE0h case   95:*/		regs.R3 = regs.R14;
		/* 820BCEE0h case   95:*/		return 0x820BCEE4;
		  /* 820BCEE4h */ case   96:  		/* bl -51188 */
		/* 820BCEE4h case   96:*/		regs.LR = 0x820BCEE8; return 0x820B06F0;
		/* 820BCEE4h case   96:*/		return 0x820BCEE8;
		  /* 820BCEE8h */ case   97:  		/* cmplwi CR0, R3, 0 */
		/* 820BCEE8h case   97:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820BCEE8h case   97:*/		return 0x820BCEEC;
		  /* 820BCEECh */ case   98:  		/* bc 12, CR0_EQ, 1332 */
		/* 820BCEECh case   98:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BCEECh case   98:*/		return 0x820BCEF0;
		  /* 820BCEF0h */ case   99:  		/* li R11, 14 */
		/* 820BCEF0h case   99:*/		cpu::op::li<0>(regs,&regs.R11,0xE);
		/* 820BCEF0h case   99:*/		return 0x820BCEF4;
		  /* 820BCEF4h */ case  100:  		/* addi R10, R1, 156 */
		/* 820BCEF4h case  100:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 820BCEF4h case  100:*/		return 0x820BCEF8;
		  /* 820BCEF8h */ case  101:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 820BCEF8h case  101:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 820BCEF8h case  101:*/		return 0x820BCEFC;
		  /* 820BCEFCh */ case  102:  		/* mtspr CTR, R11 */
		/* 820BCEFCh case  102:*/		regs.CTR = regs.R11;
		/* 820BCEFCh case  102:*/		return 0x820BCF00;
		  /* 820BCF00h */ case  103:  		/* stwu R3, <#[R10 + 4]> */
		/* 820BCF00h case  103:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BCF00h case  103:*/		return 0x820BCF04;
		  /* 820BCF04h */ case  104:  		/* add R3, R3, R9 */
		/* 820BCF04h case  104:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R9);
		/* 820BCF04h case  104:*/		return 0x820BCF08;
		  /* 820BCF08h */ case  105:  		/* bc 16, CR0_LT, -8 */
		/* 820BCF08h case  105:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCF00;  }
		/* 820BCF08h case  105:*/		return 0x820BCF0C;
		  /* 820BCF0Ch */ case  106:  		/* addi R9, R1, 160 */
		/* 820BCF0Ch case  106:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 820BCF0Ch case  106:*/		return 0x820BCF10;
		  /* 820BCF10h */ case  107:  		/* li R8, 10 */
		/* 820BCF10h case  107:*/		cpu::op::li<0>(regs,&regs.R8,0xA);
		/* 820BCF10h case  107:*/		return 0x820BCF14;
		  /* 820BCF14h */ case  108:  		/* li R29, -1 */
		/* 820BCF14h case  108:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BCF14h case  108:*/		return 0x820BCF18;
		  /* 820BCF18h */ case  109:  		/* lwz R11, <#[R9]> */
		/* 820BCF18h case  109:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 820BCF18h case  109:*/		return 0x820BCF1C;
		  /* 820BCF1Ch */ case  110:  		/* cmplwi CR6, R30, 0 */
		/* 820BCF1Ch case  110:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCF1Ch case  110:*/		return 0x820BCF20;
		  /* 820BCF20h */ case  111:  		/* bc 12, CR6_EQ, 32 */
		/* 820BCF20h case  111:*/		if ( regs.CR[6].eq ) { return 0x820BCF40;  }
		/* 820BCF20h case  111:*/		return 0x820BCF24;
		  /* 820BCF24h */ case  112:  		/* addi R11, R11, -4 */
		/* 820BCF24h case  112:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 820BCF24h case  112:*/		return 0x820BCF28;
		  /* 820BCF28h */ case  113:  		/* mr R10, R29 */
		/* 820BCF28h case  113:*/		regs.R10 = regs.R29;
		/* 820BCF28h case  113:*/		return 0x820BCF2C;
		  /* 820BCF2Ch */ case  114:  		/* cmplwi CR0, R30, 0 */
		/* 820BCF2Ch case  114:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCF2Ch case  114:*/		return 0x820BCF30;
		  /* 820BCF30h */ case  115:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCF30h case  115:*/		if ( regs.CR[0].eq ) { return 0x820BCF40;  }
		/* 820BCF30h case  115:*/		return 0x820BCF34;
		  /* 820BCF34h */ case  116:  		/* mtspr CTR, R30 */
		/* 820BCF34h case  116:*/		regs.CTR = regs.R30;
		/* 820BCF34h case  116:*/		return 0x820BCF38;
		  /* 820BCF38h */ case  117:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BCF38h case  117:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCF38h case  117:*/		return 0x820BCF3C;
		  /* 820BCF3Ch */ case  118:  		/* bc 16, CR0_LT, -4 */
		/* 820BCF3Ch case  118:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCF38;  }
		/* 820BCF3Ch case  118:*/		return 0x820BCF40;
	}
	return 0x820BCF40;
} // Block from 820BCD64h-820BCF40h (119 instructions)

//////////////////////////////////////////////////////
// Block at 820BCF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCF40);
		  /* 820BCF40h */ case    0:  		/* addic. R8, R8, -1 */
		/* 820BCF40h case    0:*/		cpu::op::addic<1>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 820BCF40h case    0:*/		return 0x820BCF44;
		  /* 820BCF44h */ case    1:  		/* addi R9, R9, 4 */
		/* 820BCF44h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820BCF44h case    1:*/		return 0x820BCF48;
		  /* 820BCF48h */ case    2:  		/* bc 4, CR0_EQ, -48 */
		/* 820BCF48h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820BCF18;  }
		/* 820BCF48h case    2:*/		return 0x820BCF4C;
		  /* 820BCF4Ch */ case    3:  		/* lwz R21, <#[R1 + 212]> */
		/* 820BCF4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000D4) );
		/* 820BCF4Ch case    3:*/		return 0x820BCF50;
		  /* 820BCF50h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 820BCF50h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCF50h case    4:*/		return 0x820BCF54;
		  /* 820BCF54h */ case    5:  		/* lwz R22, <#[R1 + 208]> */
		/* 820BCF54h case    5:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000D0) );
		/* 820BCF54h case    5:*/		return 0x820BCF58;
		  /* 820BCF58h */ case    6:  		/* lwz R24, <#[R1 + 204]> */
		/* 820BCF58h case    6:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000CC) );
		/* 820BCF58h case    6:*/		return 0x820BCF5C;
		  /* 820BCF5Ch */ case    7:  		/* lwz R23, <#[R1 + 200]> */
		/* 820BCF5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000C8) );
		/* 820BCF5Ch case    7:*/		return 0x820BCF60;
		  /* 820BCF60h */ case    8:  		/* bc 12, CR6_EQ, 88 */
		/* 820BCF60h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BCFB8;  }
		/* 820BCF60h case    8:*/		return 0x820BCF64;
		  /* 820BCF64h */ case    9:  		/* mtspr CTR, R30 */
		/* 820BCF64h case    9:*/		regs.CTR = regs.R30;
		/* 820BCF64h case    9:*/		return 0x820BCF68;
		  /* 820BCF68h */ case   10:  		/* mr R11, R24 */
		/* 820BCF68h case   10:*/		regs.R11 = regs.R24;
		/* 820BCF68h case   10:*/		return 0x820BCF6C;
		  /* 820BCF6Ch */ case   11:  		/* subf R10, R24, R23 */
		/* 820BCF6Ch case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R24,regs.R23);
		/* 820BCF6Ch case   11:*/		return 0x820BCF70;
		  /* 820BCF70h */ case   12:  		/* subf R9, R24, R22 */
		/* 820BCF70h case   12:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R24,regs.R22);
		/* 820BCF70h case   12:*/		return 0x820BCF74;
		  /* 820BCF74h */ case   13:  		/* subf R8, R24, R21 */
		/* 820BCF74h case   13:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R24,regs.R21);
		/* 820BCF74h case   13:*/		return 0x820BCF78;
		  /* 820BCF78h */ case   14:  		/* lwz R7, <#[R14 + 36]> */
		/* 820BCF78h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R14 + 0x00000024) );
		/* 820BCF78h case   14:*/		return 0x820BCF7C;
		  /* 820BCF7Ch */ case   15:  		/* stwx R7, <#[R10 + R11]> */
		/* 820BCF7Ch case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BCF7Ch case   15:*/		return 0x820BCF80;
		  /* 820BCF80h */ case   16:  		/* lwz R7, <#[R14 + 32]> */
		/* 820BCF80h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R14 + 0x00000020) );
		/* 820BCF80h case   16:*/		return 0x820BCF84;
		  /* 820BCF84h */ case   17:  		/* stw R7, <#[R11]> */
		/* 820BCF84h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820BCF84h case   17:*/		return 0x820BCF88;
		  /* 820BCF88h */ case   18:  		/* stwx R31, <#[R9 + R11]> */
		/* 820BCF88h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820BCF88h case   18:*/		return 0x820BCF8C;
		  /* 820BCF8Ch */ case   19:  		/* stwx R28, <#[R8 + R11]> */
		/* 820BCF8Ch case   19:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820BCF8Ch case   19:*/		return 0x820BCF90;
		  /* 820BCF90h */ case   20:  		/* addi R11, R11, 4 */
		/* 820BCF90h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BCF90h case   20:*/		return 0x820BCF94;
		  /* 820BCF94h */ case   21:  		/* bc 16, CR0_LT, -28 */
		/* 820BCF94h case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCF78;  }
		/* 820BCF94h case   21:*/		return 0x820BCF98;
		  /* 820BCF98h */ case   22:  		/* cmplwi CR6, R30, 0 */
		/* 820BCF98h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BCF98h case   22:*/		return 0x820BCF9C;
		  /* 820BCF9Ch */ case   23:  		/* bc 12, CR6_EQ, 28 */
		/* 820BCF9Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x820BCFB8;  }
		/* 820BCF9Ch case   23:*/		return 0x820BCFA0;
		  /* 820BCFA0h */ case   24:  		/* addi R11, R15, -4 */
		/* 820BCFA0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BCFA0h case   24:*/		return 0x820BCFA4;
		  /* 820BCFA4h */ case   25:  		/* cmplwi CR0, R30, 0 */
		/* 820BCFA4h case   25:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BCFA4h case   25:*/		return 0x820BCFA8;
		  /* 820BCFA8h */ case   26:  		/* bc 12, CR0_EQ, 16 */
		/* 820BCFA8h case   26:*/		if ( regs.CR[0].eq ) { return 0x820BCFB8;  }
		/* 820BCFA8h case   26:*/		return 0x820BCFAC;
		  /* 820BCFACh */ case   27:  		/* mtspr CTR, R30 */
		/* 820BCFACh case   27:*/		regs.CTR = regs.R30;
		/* 820BCFACh case   27:*/		return 0x820BCFB0;
		  /* 820BCFB0h */ case   28:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BCFB0h case   28:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BCFB0h case   28:*/		return 0x820BCFB4;
		  /* 820BCFB4h */ case   29:  		/* bc 16, CR0_LT, -4 */
		/* 820BCFB4h case   29:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BCFB0;  }
		/* 820BCFB4h case   29:*/		return 0x820BCFB8;
	}
	return 0x820BCFB8;
} // Block from 820BCF40h-820BCFB8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820BCFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BCFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BCFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BCFB8);
		  /* 820BCFB8h */ case    0:  		/* lwz R29, <#[R1 + 160]> */
		/* 820BCFB8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BCFB8h case    0:*/		return 0x820BCFBC;
		  /* 820BCFBCh */ case    1:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BCFBCh case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BCFBCh case    1:*/		return 0x820BCFC0;
		  /* 820BCFC0h */ case    2:  		/* li R9, 0 */
		/* 820BCFC0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BCFC0h case    2:*/		return 0x820BCFC4;
		  /* 820BCFC4h */ case    3:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BCFC4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BCFC4h case    3:*/		return 0x820BCFC8;
		  /* 820BCFC8h */ case    4:  		/* li R8, 0 */
		/* 820BCFC8h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BCFC8h case    4:*/		return 0x820BCFCC;
		  /* 820BCFCCh */ case    5:  		/* mr R6, R29 */
		/* 820BCFCCh case    5:*/		regs.R6 = regs.R29;
		/* 820BCFCCh case    5:*/		return 0x820BCFD0;
		  /* 820BCFD0h */ case    6:  		/* oris R5, R30, 4112 */
		/* 820BCFD0h case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1010);
		/* 820BCFD0h case    6:*/		return 0x820BCFD4;
		  /* 820BCFD4h */ case    7:  		/* mr R4, R16 */
		/* 820BCFD4h case    7:*/		regs.R4 = regs.R16;
		/* 820BCFD4h case    7:*/		return 0x820BCFD8;
		  /* 820BCFD8h */ case    8:  		/* mr R3, R14 */
		/* 820BCFD8h case    8:*/		regs.R3 = regs.R14;
		/* 820BCFD8h case    8:*/		return 0x820BCFDC;
		  /* 820BCFDCh */ case    9:  		/* bl -50388 */
		/* 820BCFDCh case    9:*/		regs.LR = 0x820BCFE0; return 0x820B0B08;
		/* 820BCFDCh case    9:*/		return 0x820BCFE0;
		  /* 820BCFE0h */ case   10:  		/* or. R31, R3, R3 */
		/* 820BCFE0h case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BCFE0h case   10:*/		return 0x820BCFE4;
		  /* 820BCFE4h */ case   11:  		/* bc 12, CR0_LT, 5108 */
		/* 820BCFE4h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BCFE4h case   11:*/		return 0x820BCFE8;
		  /* 820BCFE8h */ case   12:  		/* lwz R28, <#[R1 + 164]> */
		/* 820BCFE8h case   12:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BCFE8h case   12:*/		return 0x820BCFEC;
		  /* 820BCFECh */ case   13:  		/* oris R25, R30, 8256 */
		/* 820BCFECh case   13:*/		cpu::op::oris<0>(regs,&regs.R25,regs.R30,0x2040);
		/* 820BCFECh case   13:*/		return 0x820BCFF0;
		  /* 820BCFF0h */ case   14:  		/* li R9, 0 */
		/* 820BCFF0h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BCFF0h case   14:*/		return 0x820BCFF4;
		  /* 820BCFF4h */ case   15:  		/* lwz R7, <#[R1 + 148]> */
		/* 820BCFF4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820BCFF4h case   15:*/		return 0x820BCFF8;
		  /* 820BCFF8h */ case   16:  		/* mr R8, R29 */
		/* 820BCFF8h case   16:*/		regs.R8 = regs.R29;
		/* 820BCFF8h case   16:*/		return 0x820BCFFC;
		  /* 820BCFFCh */ case   17:  		/* mr R6, R28 */
		/* 820BCFFCh case   17:*/		regs.R6 = regs.R28;
		/* 820BCFFCh case   17:*/		return 0x820BD000;
		  /* 820BD000h */ case   18:  		/* mr R5, R25 */
		/* 820BD000h case   18:*/		regs.R5 = regs.R25;
		/* 820BD000h case   18:*/		return 0x820BD004;
		  /* 820BD004h */ case   19:  		/* mr R4, R16 */
		/* 820BD004h case   19:*/		regs.R4 = regs.R16;
		/* 820BD004h case   19:*/		return 0x820BD008;
		  /* 820BD008h */ case   20:  		/* mr R3, R14 */
		/* 820BD008h case   20:*/		regs.R3 = regs.R14;
		/* 820BD008h case   20:*/		return 0x820BD00C;
		  /* 820BD00Ch */ case   21:  		/* bl -50436 */
		/* 820BD00Ch case   21:*/		regs.LR = 0x820BD010; return 0x820B0B08;
		/* 820BD00Ch case   21:*/		return 0x820BD010;
		  /* 820BD010h */ case   22:  		/* or. R31, R3, R3 */
		/* 820BD010h case   22:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD010h case   22:*/		return 0x820BD014;
		  /* 820BD014h */ case   23:  		/* bc 12, CR0_LT, 5060 */
		/* 820BD014h case   23:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD014h case   23:*/		return 0x820BD018;
		  /* 820BD018h */ case   24:  		/* lwz R26, <#[R1 + 168]> */
		/* 820BD018h case   24:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BD018h case   24:*/		return 0x820BD01C;
		  /* 820BD01Ch */ case   25:  		/* li R9, 0 */
		/* 820BD01Ch case   25:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD01Ch case   25:*/		return 0x820BD020;
		  /* 820BD020h */ case   26:  		/* mr R8, R29 */
		/* 820BD020h case   26:*/		regs.R8 = regs.R29;
		/* 820BD020h case   26:*/		return 0x820BD024;
		  /* 820BD024h */ case   27:  		/* lwz R7, <#[R1 + 152]> */
		/* 820BD024h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000098) );
		/* 820BD024h case   27:*/		return 0x820BD028;
		  /* 820BD028h */ case   28:  		/* mr R6, R26 */
		/* 820BD028h case   28:*/		regs.R6 = regs.R26;
		/* 820BD028h case   28:*/		return 0x820BD02C;
		  /* 820BD02Ch */ case   29:  		/* mr R5, R25 */
		/* 820BD02Ch case   29:*/		regs.R5 = regs.R25;
		/* 820BD02Ch case   29:*/		return 0x820BD030;
		  /* 820BD030h */ case   30:  		/* mr R4, R16 */
		/* 820BD030h case   30:*/		regs.R4 = regs.R16;
		/* 820BD030h case   30:*/		return 0x820BD034;
		  /* 820BD034h */ case   31:  		/* mr R3, R14 */
		/* 820BD034h case   31:*/		regs.R3 = regs.R14;
		/* 820BD034h case   31:*/		return 0x820BD038;
		  /* 820BD038h */ case   32:  		/* bl -50480 */
		/* 820BD038h case   32:*/		regs.LR = 0x820BD03C; return 0x820B0B08;
		/* 820BD038h case   32:*/		return 0x820BD03C;
		  /* 820BD03Ch */ case   33:  		/* or. R31, R3, R3 */
		/* 820BD03Ch case   33:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD03Ch case   33:*/		return 0x820BD040;
		  /* 820BD040h */ case   34:  		/* bc 12, CR0_LT, 5016 */
		/* 820BD040h case   34:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD040h case   34:*/		return 0x820BD044;
		  /* 820BD044h */ case   35:  		/* lwz R27, <#[R1 + 172]> */
		/* 820BD044h case   35:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BD044h case   35:*/		return 0x820BD048;
		  /* 820BD048h */ case   36:  		/* li R9, 0 */
		/* 820BD048h case   36:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD048h case   36:*/		return 0x820BD04C;
		  /* 820BD04Ch */ case   37:  		/* li R8, 0 */
		/* 820BD04Ch case   37:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD04Ch case   37:*/		return 0x820BD050;
		  /* 820BD050h */ case   38:  		/* mr R7, R28 */
		/* 820BD050h case   38:*/		regs.R7 = regs.R28;
		/* 820BD050h case   38:*/		return 0x820BD054;
		  /* 820BD054h */ case   39:  		/* mr R6, R27 */
		/* 820BD054h case   39:*/		regs.R6 = regs.R27;
		/* 820BD054h case   39:*/		return 0x820BD058;
		  /* 820BD058h */ case   40:  		/* oris R5, R30, 4144 */
		/* 820BD058h case   40:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1030);
		/* 820BD058h case   40:*/		return 0x820BD05C;
		  /* 820BD05Ch */ case   41:  		/* mr R4, R16 */
		/* 820BD05Ch case   41:*/		regs.R4 = regs.R16;
		/* 820BD05Ch case   41:*/		return 0x820BD060;
		  /* 820BD060h */ case   42:  		/* mr R3, R14 */
		/* 820BD060h case   42:*/		regs.R3 = regs.R14;
		/* 820BD060h case   42:*/		return 0x820BD064;
		  /* 820BD064h */ case   43:  		/* bl -50524 */
		/* 820BD064h case   43:*/		regs.LR = 0x820BD068; return 0x820B0B08;
		/* 820BD064h case   43:*/		return 0x820BD068;
		  /* 820BD068h */ case   44:  		/* or. R31, R3, R3 */
		/* 820BD068h case   44:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD068h case   44:*/		return 0x820BD06C;
		  /* 820BD06Ch */ case   45:  		/* bc 12, CR0_LT, 4972 */
		/* 820BD06Ch case   45:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD06Ch case   45:*/		return 0x820BD070;
		  /* 820BD070h */ case   46:  		/* lwz R29, <#[R1 + 176]> */
		/* 820BD070h case   46:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BD070h case   46:*/		return 0x820BD074;
		  /* 820BD074h */ case   47:  		/* oris R28, R30, 8272 */
		/* 820BD074h case   47:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R30,0x2050);
		/* 820BD074h case   47:*/		return 0x820BD078;
		  /* 820BD078h */ case   48:  		/* li R9, 0 */
		/* 820BD078h case   48:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD078h case   48:*/		return 0x820BD07C;
		  /* 820BD07Ch */ case   49:  		/* mr R8, R27 */
		/* 820BD07Ch case   49:*/		regs.R8 = regs.R27;
		/* 820BD07Ch case   49:*/		return 0x820BD080;
		  /* 820BD080h */ case   50:  		/* mr R7, R26 */
		/* 820BD080h case   50:*/		regs.R7 = regs.R26;
		/* 820BD080h case   50:*/		return 0x820BD084;
		  /* 820BD084h */ case   51:  		/* mr R6, R29 */
		/* 820BD084h case   51:*/		regs.R6 = regs.R29;
		/* 820BD084h case   51:*/		return 0x820BD088;
		  /* 820BD088h */ case   52:  		/* mr R5, R28 */
		/* 820BD088h case   52:*/		regs.R5 = regs.R28;
		/* 820BD088h case   52:*/		return 0x820BD08C;
		  /* 820BD08Ch */ case   53:  		/* mr R4, R16 */
		/* 820BD08Ch case   53:*/		regs.R4 = regs.R16;
		/* 820BD08Ch case   53:*/		return 0x820BD090;
		  /* 820BD090h */ case   54:  		/* mr R3, R14 */
		/* 820BD090h case   54:*/		regs.R3 = regs.R14;
		/* 820BD090h case   54:*/		return 0x820BD094;
		  /* 820BD094h */ case   55:  		/* bl -50572 */
		/* 820BD094h case   55:*/		regs.LR = 0x820BD098; return 0x820B0B08;
		/* 820BD094h case   55:*/		return 0x820BD098;
		  /* 820BD098h */ case   56:  		/* or. R31, R3, R3 */
		/* 820BD098h case   56:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD098h case   56:*/		return 0x820BD09C;
		  /* 820BD09Ch */ case   57:  		/* bc 12, CR0_LT, 4924 */
		/* 820BD09Ch case   57:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD09Ch case   57:*/		return 0x820BD0A0;
		  /* 820BD0A0h */ case   58:  		/* lwz R27, <#[R1 + 180]> */
		/* 820BD0A0h case   58:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BD0A0h case   58:*/		return 0x820BD0A4;
		  /* 820BD0A4h */ case   59:  		/* li R9, 4 */
		/* 820BD0A4h case   59:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BD0A4h case   59:*/		return 0x820BD0A8;
		  /* 820BD0A8h */ case   60:  		/* mr R8, R23 */
		/* 820BD0A8h case   60:*/		regs.R8 = regs.R23;
		/* 820BD0A8h case   60:*/		return 0x820BD0AC;
		  /* 820BD0ACh */ case   61:  		/* mr R7, R29 */
		/* 820BD0ACh case   61:*/		regs.R7 = regs.R29;
		/* 820BD0ACh case   61:*/		return 0x820BD0B0;
		  /* 820BD0B0h */ case   62:  		/* mr R6, R27 */
		/* 820BD0B0h case   62:*/		regs.R6 = regs.R27;
		/* 820BD0B0h case   62:*/		return 0x820BD0B4;
		  /* 820BD0B4h */ case   63:  		/* oris R5, R30, 8208 */
		/* 820BD0B4h case   63:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2010);
		/* 820BD0B4h case   63:*/		return 0x820BD0B8;
		  /* 820BD0B8h */ case   64:  		/* mr R4, R16 */
		/* 820BD0B8h case   64:*/		regs.R4 = regs.R16;
		/* 820BD0B8h case   64:*/		return 0x820BD0BC;
		  /* 820BD0BCh */ case   65:  		/* mr R3, R14 */
		/* 820BD0BCh case   65:*/		regs.R3 = regs.R14;
		/* 820BD0BCh case   65:*/		return 0x820BD0C0;
		  /* 820BD0C0h */ case   66:  		/* bl -50616 */
		/* 820BD0C0h case   66:*/		regs.LR = 0x820BD0C4; return 0x820B0B08;
		/* 820BD0C0h case   66:*/		return 0x820BD0C4;
		  /* 820BD0C4h */ case   67:  		/* or. R31, R3, R3 */
		/* 820BD0C4h case   67:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD0C4h case   67:*/		return 0x820BD0C8;
		  /* 820BD0C8h */ case   68:  		/* bc 12, CR0_LT, 4880 */
		/* 820BD0C8h case   68:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD0C8h case   68:*/		return 0x820BD0CC;
		  /* 820BD0CCh */ case   69:  		/* lwz R29, <#[R1 + 184]> */
		/* 820BD0CCh case   69:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000B8) );
		/* 820BD0CCh case   69:*/		return 0x820BD0D0;
		  /* 820BD0D0h */ case   70:  		/* li R9, 20 */
		/* 820BD0D0h case   70:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820BD0D0h case   70:*/		return 0x820BD0D4;
		  /* 820BD0D4h */ case   71:  		/* mr R8, R24 */
		/* 820BD0D4h case   71:*/		regs.R8 = regs.R24;
		/* 820BD0D4h case   71:*/		return 0x820BD0D8;
		  /* 820BD0D8h */ case   72:  		/* mr R7, R27 */
		/* 820BD0D8h case   72:*/		regs.R7 = regs.R27;
		/* 820BD0D8h case   72:*/		return 0x820BD0DC;
		  /* 820BD0DCh */ case   73:  		/* mr R6, R29 */
		/* 820BD0DCh case   73:*/		regs.R6 = regs.R29;
		/* 820BD0DCh case   73:*/		return 0x820BD0E0;
		  /* 820BD0E0h */ case   74:  		/* oris R5, R30, 8192 */
		/* 820BD0E0h case   74:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x2000);
		/* 820BD0E0h case   74:*/		return 0x820BD0E4;
		  /* 820BD0E4h */ case   75:  		/* mr R4, R16 */
		/* 820BD0E4h case   75:*/		regs.R4 = regs.R16;
		/* 820BD0E4h case   75:*/		return 0x820BD0E8;
		  /* 820BD0E8h */ case   76:  		/* mr R3, R14 */
		/* 820BD0E8h case   76:*/		regs.R3 = regs.R14;
		/* 820BD0E8h case   76:*/		return 0x820BD0EC;
		  /* 820BD0ECh */ case   77:  		/* bl -50660 */
		/* 820BD0ECh case   77:*/		regs.LR = 0x820BD0F0; return 0x820B0B08;
		/* 820BD0ECh case   77:*/		return 0x820BD0F0;
		  /* 820BD0F0h */ case   78:  		/* or. R31, R3, R3 */
		/* 820BD0F0h case   78:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD0F0h case   78:*/		return 0x820BD0F4;
		  /* 820BD0F4h */ case   79:  		/* bc 12, CR0_LT, 4836 */
		/* 820BD0F4h case   79:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD0F4h case   79:*/		return 0x820BD0F8;
		  /* 820BD0F8h */ case   80:  		/* lwz R30, <#[R1 + 188]> */
		/* 820BD0F8h case   80:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000BC) );
		/* 820BD0F8h case   80:*/		return 0x820BD0FC;
		  /* 820BD0FCh */ case   81:  		/* li R9, 8 */
		/* 820BD0FCh case   81:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BD0FCh case   81:*/		return 0x820BD100;
		  /* 820BD100h */ case   82:  		/* mr R8, R22 */
		/* 820BD100h case   82:*/		regs.R8 = regs.R22;
		/* 820BD100h case   82:*/		return 0x820BD104;
		  /* 820BD104h */ case   83:  		/* mr R7, R29 */
		/* 820BD104h case   83:*/		regs.R7 = regs.R29;
		/* 820BD104h case   83:*/		return 0x820BD108;
		  /* 820BD108h */ case   84:  		/* mr R6, R30 */
		/* 820BD108h case   84:*/		regs.R6 = regs.R30;
		/* 820BD108h case   84:*/		return 0x820BD10C;
		  /* 820BD10Ch */ case   85:  		/* mr R5, R28 */
		/* 820BD10Ch case   85:*/		regs.R5 = regs.R28;
		/* 820BD10Ch case   85:*/		return 0x820BD110;
		  /* 820BD110h */ case   86:  		/* mr R4, R16 */
		/* 820BD110h case   86:*/		regs.R4 = regs.R16;
		/* 820BD110h case   86:*/		return 0x820BD114;
		  /* 820BD114h */ case   87:  		/* mr R3, R14 */
		/* 820BD114h case   87:*/		regs.R3 = regs.R14;
		/* 820BD114h case   87:*/		return 0x820BD118;
		  /* 820BD118h */ case   88:  		/* bl -50704 */
		/* 820BD118h case   88:*/		regs.LR = 0x820BD11C; return 0x820B0B08;
		/* 820BD118h case   88:*/		return 0x820BD11C;
		  /* 820BD11Ch */ case   89:  		/* or. R31, R3, R3 */
		/* 820BD11Ch case   89:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD11Ch case   89:*/		return 0x820BD120;
		  /* 820BD120h */ case   90:  		/* bc 12, CR0_LT, 4792 */
		/* 820BD120h case   90:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD120h case   90:*/		return 0x820BD124;
		  /* 820BD124h */ case   91:  		/* lwz R27, <#[R1 + 192]> */
		/* 820BD124h case   91:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BD124h case   91:*/		return 0x820BD128;
		  /* 820BD128h */ case   92:  		/* li R9, 0 */
		/* 820BD128h case   92:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD128h case   92:*/		return 0x820BD12C;
		  /* 820BD12Ch */ case   93:  		/* mr R8, R21 */
		/* 820BD12Ch case   93:*/		regs.R8 = regs.R21;
		/* 820BD12Ch case   93:*/		return 0x820BD130;
		  /* 820BD130h */ case   94:  		/* mr R7, R30 */
		/* 820BD130h case   94:*/		regs.R7 = regs.R30;
		/* 820BD130h case   94:*/		return 0x820BD134;
		  /* 820BD134h */ case   95:  		/* mr R6, R27 */
		/* 820BD134h case   95:*/		regs.R6 = regs.R27;
		/* 820BD134h case   95:*/		return 0x820BD138;
		  /* 820BD138h */ case   96:  		/* mr R5, R25 */
		/* 820BD138h case   96:*/		regs.R5 = regs.R25;
		/* 820BD138h case   96:*/		return 0x820BD13C;
		  /* 820BD13Ch */ case   97:  		/* mr R4, R16 */
		/* 820BD13Ch case   97:*/		regs.R4 = regs.R16;
		/* 820BD13Ch case   97:*/		return 0x820BD140;
		  /* 820BD140h */ case   98:  		/* mr R3, R14 */
		/* 820BD140h case   98:*/		regs.R3 = regs.R14;
		/* 820BD140h case   98:*/		return 0x820BD144;
		  /* 820BD144h */ case   99:  		/* bl -50748 */
		/* 820BD144h case   99:*/		regs.LR = 0x820BD148; return 0x820B0B08;
		/* 820BD144h case   99:*/		return 0x820BD148;
		  /* 820BD148h */ case  100:  		/* or. R31, R3, R3 */
		/* 820BD148h case  100:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD148h case  100:*/		return 0x820BD14C;
		  /* 820BD14Ch */ case  101:  		/* bc 12, CR0_LT, 4748 */
		/* 820BD14Ch case  101:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD14Ch case  101:*/		return 0x820BD150;
		  /* 820BD150h */ case  102:  		/* lwz R30, <#[R1 + 196]> */
		/* 820BD150h case  102:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000C4) );
		/* 820BD150h case  102:*/		return 0x820BD154;
		  /* 820BD154h */ case  103:  		/* li R9, 20 */
		/* 820BD154h case  103:*/		cpu::op::li<0>(regs,&regs.R9,0x14);
		/* 820BD154h case  103:*/		return 0x820BD158;
		  /* 820BD158h */ case  104:  		/* mr R8, R29 */
		/* 820BD158h case  104:*/		regs.R8 = regs.R29;
		/* 820BD158h case  104:*/		return 0x820BD15C;
		  /* 820BD15Ch */ case  105:  		/* mr R7, R29 */
		/* 820BD15Ch case  105:*/		regs.R7 = regs.R29;
		/* 820BD15Ch case  105:*/		return 0x820BD160;
		  /* 820BD160h */ case  106:  		/* mr R6, R30 */
		/* 820BD160h case  106:*/		regs.R6 = regs.R30;
		/* 820BD160h case  106:*/		return 0x820BD164;
		  /* 820BD164h */ case  107:  		/* mr R5, R28 */
		/* 820BD164h case  107:*/		regs.R5 = regs.R28;
		/* 820BD164h case  107:*/		return 0x820BD168;
		  /* 820BD168h */ case  108:  		/* mr R4, R16 */
		/* 820BD168h case  108:*/		regs.R4 = regs.R16;
		/* 820BD168h case  108:*/		return 0x820BD16C;
		  /* 820BD16Ch */ case  109:  		/* mr R3, R14 */
		/* 820BD16Ch case  109:*/		regs.R3 = regs.R14;
		/* 820BD16Ch case  109:*/		return 0x820BD170;
		  /* 820BD170h */ case  110:  		/* bl -50792 */
		/* 820BD170h case  110:*/		regs.LR = 0x820BD174; return 0x820B0B08;
		/* 820BD170h case  110:*/		return 0x820BD174;
		  /* 820BD174h */ case  111:  		/* or. R31, R3, R3 */
		/* 820BD174h case  111:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD174h case  111:*/		return 0x820BD178;
		  /* 820BD178h */ case  112:  		/* bc 12, CR0_LT, 4704 */
		/* 820BD178h case  112:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD178h case  112:*/		return 0x820BD17C;
		  /* 820BD17Ch */ case  113:  		/* mr R8, R30 */
		/* 820BD17Ch case  113:*/		regs.R8 = regs.R30;
		/* 820BD17Ch case  113:*/		return 0x820BD180;
		  /* 820BD180h */ case  114:  		/* mr R7, R27 */
		/* 820BD180h case  114:*/		regs.R7 = regs.R27;
		/* 820BD180h case  114:*/		return 0x820BD184;
		  /* 820BD184h */ case  115:  		/* mr R5, R28 */
		/* 820BD184h case  115:*/		regs.R5 = regs.R28;
		/* 820BD184h case  115:*/		return 0x820BD188;
		  /* 820BD188h */ case  116:  		/* b 1444 */
		/* 820BD188h case  116:*/		return 0x820BD72C;
		/* 820BD188h case  116:*/		return 0x820BD18C;
		  /* 820BD18Ch */ case  117:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD18Ch case  117:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD18Ch case  117:*/		return 0x820BD190;
		  /* 820BD190h */ case  118:  		/* cmplwi CR6, R11, 0 */
		/* 820BD190h case  118:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD190h case  118:*/		return 0x820BD194;
		  /* 820BD194h */ case  119:  		/* bc 12, CR6_EQ, 4668 */
		/* 820BD194h case  119:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD194h case  119:*/		return 0x820BD198;
		  /* 820BD198h */ case  120:  		/* cmplwi CR6, R15, 0 */
		/* 820BD198h case  120:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BD198h case  120:*/		return 0x820BD19C;
		  /* 820BD19Ch */ case  121:  		/* bc 12, CR6_EQ, -18384 */
		/* 820BD19Ch case  121:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BD19Ch case  121:*/		return 0x820BD1A0;
		  /* 820BD1A0h */ case  122:  		/* mr R4, R30 */
		/* 820BD1A0h case  122:*/		regs.R4 = regs.R30;
		/* 820BD1A0h case  122:*/		return 0x820BD1A4;
		  /* 820BD1A4h */ case  123:  		/* mr R3, R14 */
		/* 820BD1A4h case  123:*/		regs.R3 = regs.R14;
		/* 820BD1A4h case  123:*/		return 0x820BD1A8;
		  /* 820BD1A8h */ case  124:  		/* bl -51896 */
		/* 820BD1A8h case  124:*/		regs.LR = 0x820BD1AC; return 0x820B06F0;
		/* 820BD1A8h case  124:*/		return 0x820BD1AC;
		  /* 820BD1ACh */ case  125:  		/* or. R28, R3, R3 */
		/* 820BD1ACh case  125:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 820BD1ACh case  125:*/		return 0x820BD1B0;
		  /* 820BD1B0h */ case  126:  		/* bc 12, CR0_EQ, 624 */
		/* 820BD1B0h case  126:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BD1B0h case  126:*/		return 0x820BD1B4;
		  /* 820BD1B4h */ case  127:  		/* li R29, -1 */
		/* 820BD1B4h case  127:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BD1B4h case  127:*/		return 0x820BD1B8;
		  /* 820BD1B8h */ case  128:  		/* cmplwi CR6, R30, 0 */
		/* 820BD1B8h case  128:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD1B8h case  128:*/		return 0x820BD1BC;
		  /* 820BD1BCh */ case  129:  		/* bc 12, CR6_EQ, 64 */
		/* 820BD1BCh case  129:*/		if ( regs.CR[6].eq ) { return 0x820BD1FC;  }
		/* 820BD1BCh case  129:*/		return 0x820BD1C0;
		  /* 820BD1C0h */ case  130:  		/* addi R11, R28, -4 */
		/* 820BD1C0h case  130:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BD1C0h case  130:*/		return 0x820BD1C4;
		  /* 820BD1C4h */ case  131:  		/* mr R10, R29 */
		/* 820BD1C4h case  131:*/		regs.R10 = regs.R29;
		/* 820BD1C4h case  131:*/		return 0x820BD1C8;
		  /* 820BD1C8h */ case  132:  		/* cmplwi CR0, R30, 0 */
		/* 820BD1C8h case  132:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD1C8h case  132:*/		return 0x820BD1CC;
		  /* 820BD1CCh */ case  133:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD1CCh case  133:*/		if ( regs.CR[0].eq ) { return 0x820BD1DC;  }
		/* 820BD1CCh case  133:*/		return 0x820BD1D0;
		  /* 820BD1D0h */ case  134:  		/* mtspr CTR, R30 */
		/* 820BD1D0h case  134:*/		regs.CTR = regs.R30;
		/* 820BD1D0h case  134:*/		return 0x820BD1D4;
		  /* 820BD1D4h */ case  135:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD1D4h case  135:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD1D4h case  135:*/		return 0x820BD1D8;
		  /* 820BD1D8h */ case  136:  		/* bc 16, CR0_LT, -4 */
		/* 820BD1D8h case  136:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD1D4;  }
		/* 820BD1D8h case  136:*/		return 0x820BD1DC;
	}
	return 0x820BD1DC;
} // Block from 820BCFB8h-820BD1DCh (137 instructions)

//////////////////////////////////////////////////////
// Block at 820BD1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD1DC);
		  /* 820BD1DCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BD1DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD1DCh case    0:*/		return 0x820BD1E0;
		  /* 820BD1E0h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BD1E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BD1FC;  }
		/* 820BD1E0h case    1:*/		return 0x820BD1E4;
		  /* 820BD1E4h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BD1E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BD1E4h case    2:*/		return 0x820BD1E8;
		  /* 820BD1E8h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BD1E8h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD1E8h case    3:*/		return 0x820BD1EC;
		  /* 820BD1ECh */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD1ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x820BD1FC;  }
		/* 820BD1ECh case    4:*/		return 0x820BD1F0;
		  /* 820BD1F0h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BD1F0h case    5:*/		regs.CTR = regs.R30;
		/* 820BD1F0h case    5:*/		return 0x820BD1F4;
		  /* 820BD1F4h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BD1F4h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD1F4h case    6:*/		return 0x820BD1F8;
		  /* 820BD1F8h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BD1F8h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD1F4;  }
		/* 820BD1F8h case    7:*/		return 0x820BD1FC;
	}
	return 0x820BD1FC;
} // Block from 820BD1DCh-820BD1FCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BD1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD1FC);
		  /* 820BD1FCh */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BD1FCh case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BD1FCh case    0:*/		return 0x820BD200;
		  /* 820BD200h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BD200h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BD200h case    1:*/		return 0x820BD204;
		  /* 820BD204h */ case    2:  		/* li R9, 4 */
		/* 820BD204h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BD204h case    2:*/		return 0x820BD208;
		  /* 820BD208h */ case    3:  		/* li R8, 0 */
		/* 820BD208h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD208h case    3:*/		return 0x820BD20C;
		  /* 820BD20Ch */ case    4:  		/* mr R6, R28 */
		/* 820BD20Ch case    4:*/		regs.R6 = regs.R28;
		/* 820BD20Ch case    4:*/		return 0x820BD210;
		  /* 820BD210h */ case    5:  		/* oris R5, R30, 4208 */
		/* 820BD210h case    5:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1070);
		/* 820BD210h case    5:*/		return 0x820BD214;
		  /* 820BD214h */ case    6:  		/* mr R4, R16 */
		/* 820BD214h case    6:*/		regs.R4 = regs.R16;
		/* 820BD214h case    6:*/		return 0x820BD218;
		  /* 820BD218h */ case    7:  		/* mr R3, R14 */
		/* 820BD218h case    7:*/		regs.R3 = regs.R14;
		/* 820BD218h case    7:*/		return 0x820BD21C;
		  /* 820BD21Ch */ case    8:  		/* bl -50964 */
		/* 820BD21Ch case    8:*/		regs.LR = 0x820BD220; return 0x820B0B08;
		/* 820BD21Ch case    8:*/		return 0x820BD220;
		  /* 820BD220h */ case    9:  		/* or. R31, R3, R3 */
		/* 820BD220h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD220h case    9:*/		return 0x820BD224;
		  /* 820BD224h */ case   10:  		/* bc 12, CR0_LT, 4532 */
		/* 820BD224h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD224h case   10:*/		return 0x820BD228;
		  /* 820BD228h */ case   11:  		/* li R9, 4 */
		/* 820BD228h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BD228h case   11:*/		return 0x820BD22C;
		  /* 820BD22Ch */ case   12:  		/* li R8, 0 */
		/* 820BD22Ch case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD22Ch case   12:*/		return 0x820BD230;
		  /* 820BD230h */ case   13:  		/* mr R7, R28 */
		/* 820BD230h case   13:*/		regs.R7 = regs.R28;
		/* 820BD230h case   13:*/		return 0x820BD234;
		  /* 820BD234h */ case   14:  		/* oris R5, R30, 4144 */
		/* 820BD234h case   14:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1030);
		/* 820BD234h case   14:*/		return 0x820BD238;
		  /* 820BD238h */ case   15:  		/* b 1272 */
		/* 820BD238h case   15:*/		return 0x820BD730;
		/* 820BD238h case   15:*/		return 0x820BD23C;
		  /* 820BD23Ch */ case   16:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD23Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD23Ch case   16:*/		return 0x820BD240;
		  /* 820BD240h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 820BD240h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD240h case   17:*/		return 0x820BD244;
		  /* 820BD244h */ case   18:  		/* bc 12, CR6_EQ, 4492 */
		/* 820BD244h case   18:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD244h case   18:*/		return 0x820BD248;
		  /* 820BD248h */ case   19:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BD248h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BD248h case   19:*/		return 0x820BD24C;
		  /* 820BD24Ch */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 820BD24Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD24Ch case   20:*/		return 0x820BD250;
		  /* 820BD250h */ case   21:  		/* bc 12, CR6_EQ, 4480 */
		/* 820BD250h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD250h case   21:*/		return 0x820BD254;
		  /* 820BD254h */ case   22:  		/* cmplwi CR6, R15, 0 */
		/* 820BD254h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BD254h case   22:*/		return 0x820BD258;
		  /* 820BD258h */ case   23:  		/* bc 12, CR6_EQ, -18572 */
		/* 820BD258h case   23:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BD258h case   23:*/		return 0x820BD25C;
		  /* 820BD25Ch */ case   24:  		/* cmplwi CR6, R30, 0 */
		/* 820BD25Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD25Ch case   24:*/		return 0x820BD260;
		  /* 820BD260h */ case   25:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD260h case   25:*/		if ( regs.CR[6].eq ) { return 0x820BD280;  }
		/* 820BD260h case   25:*/		return 0x820BD264;
		  /* 820BD264h */ case   26:  		/* addi R11, R15, -4 */
		/* 820BD264h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BD264h case   26:*/		return 0x820BD268;
		  /* 820BD268h */ case   27:  		/* li R10, -1 */
		/* 820BD268h case   27:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BD268h case   27:*/		return 0x820BD26C;
		  /* 820BD26Ch */ case   28:  		/* cmplwi CR0, R30, 0 */
		/* 820BD26Ch case   28:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD26Ch case   28:*/		return 0x820BD270;
		  /* 820BD270h */ case   29:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD270h case   29:*/		if ( regs.CR[0].eq ) { return 0x820BD280;  }
		/* 820BD270h case   29:*/		return 0x820BD274;
		  /* 820BD274h */ case   30:  		/* mtspr CTR, R30 */
		/* 820BD274h case   30:*/		regs.CTR = regs.R30;
		/* 820BD274h case   30:*/		return 0x820BD278;
		  /* 820BD278h */ case   31:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD278h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD278h case   31:*/		return 0x820BD27C;
		  /* 820BD27Ch */ case   32:  		/* bc 16, CR0_LT, -4 */
		/* 820BD27Ch case   32:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD278;  }
		/* 820BD27Ch case   32:*/		return 0x820BD280;
	}
	return 0x820BD280;
} // Block from 820BD1FCh-820BD280h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820BD280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD280);
		  /* 820BD280h */ case    0:  		/* lwz R8, <#[R1 + 144]> */
		/* 820BD280h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 820BD280h case    0:*/		return 0x820BD284;
		  /* 820BD284h */ case    1:  		/* li R11, 515 */
		/* 820BD284h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x203);
		/* 820BD284h case    1:*/		return 0x820BD288;
		  /* 820BD288h */ case    2:  		/* lwz R7, <#[R1 + 148]> */
		/* 820BD288h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 820BD288h case    2:*/		return 0x820BD28C;
		  /* 820BD28Ch */ case    3:  		/* li R9, 23 */
		/* 820BD28Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BD28Ch case    3:*/		return 0x820BD290;
		  /* 820BD290h */ case    4:  		/* b -18684 */
		/* 820BD290h case    4:*/		return 0x820B8994;
		/* 820BD290h case    4:*/		return 0x820BD294;
		  /* 820BD294h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD294h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD294h case    5:*/		return 0x820BD298;
		  /* 820BD298h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BD298h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD298h case    6:*/		return 0x820BD29C;
		  /* 820BD29Ch */ case    7:  		/* bc 12, CR6_EQ, 4404 */
		/* 820BD29Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD29Ch case    7:*/		return 0x820BD2A0;
		  /* 820BD2A0h */ case    8:  		/* mulli R4, R30, 3 */
		/* 820BD2A0h case    8:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x3);
		/* 820BD2A0h case    8:*/		return 0x820BD2A4;
		  /* 820BD2A4h */ case    9:  		/* mr R3, R14 */
		/* 820BD2A4h case    9:*/		regs.R3 = regs.R14;
		/* 820BD2A4h case    9:*/		return 0x820BD2A8;
		  /* 820BD2A8h */ case   10:  		/* bl -52152 */
		/* 820BD2A8h case   10:*/		regs.LR = 0x820BD2AC; return 0x820B06F0;
		/* 820BD2A8h case   10:*/		return 0x820BD2AC;
		  /* 820BD2ACh */ case   11:  		/* or. R11, R3, R3 */
		/* 820BD2ACh case   11:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BD2ACh case   11:*/		return 0x820BD2B0;
		  /* 820BD2B0h */ case   12:  		/* bc 12, CR0_EQ, 368 */
		/* 820BD2B0h case   12:*/		if ( regs.CR[0].eq ) { return 0x820BD420;  }
		/* 820BD2B0h case   12:*/		return 0x820BD2B4;
		  /* 820BD2B4h */ case   13:  		/* li R10, 3 */
		/* 820BD2B4h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820BD2B4h case   13:*/		return 0x820BD2B8;
		  /* 820BD2B8h */ case   14:  		/* addi R9, R1, 124 */
		/* 820BD2B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 820BD2B8h case   14:*/		return 0x820BD2BC;
		  /* 820BD2BCh */ case   15:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BD2BCh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BD2BCh case   15:*/		return 0x820BD2C0;
		  /* 820BD2C0h */ case   16:  		/* mtspr CTR, R10 */
		/* 820BD2C0h case   16:*/		regs.CTR = regs.R10;
		/* 820BD2C0h case   16:*/		return 0x820BD2C4;
		  /* 820BD2C4h */ case   17:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BD2C4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BD2C4h case   17:*/		return 0x820BD2C8;
		  /* 820BD2C8h */ case   18:  		/* add R11, R8, R11 */
		/* 820BD2C8h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BD2C8h case   18:*/		return 0x820BD2CC;
		  /* 820BD2CCh */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BD2CCh case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD2C4;  }
		/* 820BD2CCh case   19:*/		return 0x820BD2D0;
		  /* 820BD2D0h */ case   20:  		/* lwz R26, <#[R1 + 128]> */
		/* 820BD2D0h case   20:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD2D0h case   20:*/		return 0x820BD2D4;
		  /* 820BD2D4h */ case   21:  		/* li R29, -1 */
		/* 820BD2D4h case   21:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BD2D4h case   21:*/		return 0x820BD2D8;
		  /* 820BD2D8h */ case   22:  		/* cmplwi CR6, R30, 0 */
		/* 820BD2D8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD2D8h case   22:*/		return 0x820BD2DC;
		  /* 820BD2DCh */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD2DCh case   23:*/		if ( regs.CR[6].eq ) { return 0x820BD2FC;  }
		/* 820BD2DCh case   23:*/		return 0x820BD2E0;
		  /* 820BD2E0h */ case   24:  		/* addi R11, R26, -4 */
		/* 820BD2E0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BD2E0h case   24:*/		return 0x820BD2E4;
		  /* 820BD2E4h */ case   25:  		/* mr R10, R29 */
		/* 820BD2E4h case   25:*/		regs.R10 = regs.R29;
		/* 820BD2E4h case   25:*/		return 0x820BD2E8;
		  /* 820BD2E8h */ case   26:  		/* cmplwi CR0, R30, 0 */
		/* 820BD2E8h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD2E8h case   26:*/		return 0x820BD2EC;
		  /* 820BD2ECh */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD2ECh case   27:*/		if ( regs.CR[0].eq ) { return 0x820BD2FC;  }
		/* 820BD2ECh case   27:*/		return 0x820BD2F0;
		  /* 820BD2F0h */ case   28:  		/* mtspr CTR, R30 */
		/* 820BD2F0h case   28:*/		regs.CTR = regs.R30;
		/* 820BD2F0h case   28:*/		return 0x820BD2F4;
		  /* 820BD2F4h */ case   29:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD2F4h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD2F4h case   29:*/		return 0x820BD2F8;
		  /* 820BD2F8h */ case   30:  		/* bc 16, CR0_LT, -4 */
		/* 820BD2F8h case   30:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD2F4;  }
		/* 820BD2F8h case   30:*/		return 0x820BD2FC;
	}
	return 0x820BD2FC;
} // Block from 820BD280h-820BD2FCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 820BD2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD2FC);
		  /* 820BD2FCh */ case    0:  		/* lwz R27, <#[R1 + 132]> */
		/* 820BD2FCh case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000084) );
		/* 820BD2FCh case    0:*/		return 0x820BD300;
		  /* 820BD300h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD300h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD300h case    1:*/		return 0x820BD304;
		  /* 820BD304h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD304h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD324;  }
		/* 820BD304h case    2:*/		return 0x820BD308;
		  /* 820BD308h */ case    3:  		/* addi R11, R27, -4 */
		/* 820BD308h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFC);
		/* 820BD308h case    3:*/		return 0x820BD30C;
		  /* 820BD30Ch */ case    4:  		/* mr R10, R29 */
		/* 820BD30Ch case    4:*/		regs.R10 = regs.R29;
		/* 820BD30Ch case    4:*/		return 0x820BD310;
		  /* 820BD310h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD310h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD310h case    5:*/		return 0x820BD314;
		  /* 820BD314h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD314h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD324;  }
		/* 820BD314h case    6:*/		return 0x820BD318;
		  /* 820BD318h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD318h case    7:*/		regs.CTR = regs.R30;
		/* 820BD318h case    7:*/		return 0x820BD31C;
		  /* 820BD31Ch */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD31Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD31Ch case    8:*/		return 0x820BD320;
		  /* 820BD320h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD320h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD31C;  }
		/* 820BD320h case    9:*/		return 0x820BD324;
	}
	return 0x820BD324;
} // Block from 820BD2FCh-820BD324h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD324);
		  /* 820BD324h */ case    0:  		/* lwz R28, <#[R1 + 136]> */
		/* 820BD324h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000088) );
		/* 820BD324h case    0:*/		return 0x820BD328;
		  /* 820BD328h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD328h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD328h case    1:*/		return 0x820BD32C;
		  /* 820BD32Ch */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BD32Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD36C;  }
		/* 820BD32Ch case    2:*/		return 0x820BD330;
		  /* 820BD330h */ case    3:  		/* addi R11, R28, -4 */
		/* 820BD330h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 820BD330h case    3:*/		return 0x820BD334;
		  /* 820BD334h */ case    4:  		/* mr R10, R29 */
		/* 820BD334h case    4:*/		regs.R10 = regs.R29;
		/* 820BD334h case    4:*/		return 0x820BD338;
		  /* 820BD338h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD338h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD338h case    5:*/		return 0x820BD33C;
		  /* 820BD33Ch */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD33Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD34C;  }
		/* 820BD33Ch case    6:*/		return 0x820BD340;
		  /* 820BD340h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD340h case    7:*/		regs.CTR = regs.R30;
		/* 820BD340h case    7:*/		return 0x820BD344;
		  /* 820BD344h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD344h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD344h case    8:*/		return 0x820BD348;
		  /* 820BD348h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD348h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD344;  }
		/* 820BD348h case    9:*/		return 0x820BD34C;
	}
	return 0x820BD34C;
} // Block from 820BD324h-820BD34Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD34C);
		  /* 820BD34Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BD34Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD34Ch case    0:*/		return 0x820BD350;
		  /* 820BD350h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BD350h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BD36C;  }
		/* 820BD350h case    1:*/		return 0x820BD354;
		  /* 820BD354h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BD354h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BD354h case    2:*/		return 0x820BD358;
		  /* 820BD358h */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BD358h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD358h case    3:*/		return 0x820BD35C;
		  /* 820BD35Ch */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD35Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x820BD36C;  }
		/* 820BD35Ch case    4:*/		return 0x820BD360;
		  /* 820BD360h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BD360h case    5:*/		regs.CTR = regs.R30;
		/* 820BD360h case    5:*/		return 0x820BD364;
		  /* 820BD364h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BD364h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD364h case    6:*/		return 0x820BD368;
		  /* 820BD368h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BD368h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD364;  }
		/* 820BD368h case    7:*/		return 0x820BD36C;
	}
	return 0x820BD36C;
} // Block from 820BD34Ch-820BD36Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BD36Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD36C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD36C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD36C);
		  /* 820BD36Ch */ case    0:  		/* mr R8, R30 */
		/* 820BD36Ch case    0:*/		regs.R8 = regs.R30;
		/* 820BD36Ch case    0:*/		return 0x820BD370;
		  /* 820BD370h */ case    1:  		/* lwz R5, <#[R1 + 144]> */
		/* 820BD370h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 820BD370h case    1:*/		return 0x820BD374;
		  /* 820BD374h */ case    2:  		/* mr R7, R27 */
		/* 820BD374h case    2:*/		regs.R7 = regs.R27;
		/* 820BD374h case    2:*/		return 0x820BD378;
		  /* 820BD378h */ case    3:  		/* mr R6, R26 */
		/* 820BD378h case    3:*/		regs.R6 = regs.R26;
		/* 820BD378h case    3:*/		return 0x820BD37C;
		  /* 820BD37Ch */ case    4:  		/* mr R4, R16 */
		/* 820BD37Ch case    4:*/		regs.R4 = regs.R16;
		/* 820BD37Ch case    4:*/		return 0x820BD380;
		  /* 820BD380h */ case    5:  		/* mr R3, R14 */
		/* 820BD380h case    5:*/		regs.R3 = regs.R14;
		/* 820BD380h case    5:*/		return 0x820BD384;
		  /* 820BD384h */ case    6:  		/* bl -47092 */
		/* 820BD384h case    6:*/		regs.LR = 0x820BD388; return 0x820B1B90;
		/* 820BD384h case    6:*/		return 0x820BD388;
		  /* 820BD388h */ case    7:  		/* or. R31, R3, R3 */
		/* 820BD388h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD388h case    7:*/		return 0x820BD38C;
		  /* 820BD38Ch */ case    8:  		/* bc 12, CR0_LT, 4172 */
		/* 820BD38Ch case    8:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD38Ch case    8:*/		return 0x820BD390;
		  /* 820BD390h */ case    9:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BD390h case    9:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BD390h case    9:*/		return 0x820BD394;
		  /* 820BD394h */ case   10:  		/* li R9, 0 */
		/* 820BD394h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD394h case   10:*/		return 0x820BD398;
		  /* 820BD398h */ case   11:  		/* li R8, 0 */
		/* 820BD398h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD398h case   11:*/		return 0x820BD39C;
		  /* 820BD39Ch */ case   12:  		/* mr R7, R27 */
		/* 820BD39Ch case   12:*/		regs.R7 = regs.R27;
		/* 820BD39Ch case   12:*/		return 0x820BD3A0;
		  /* 820BD3A0h */ case   13:  		/* mr R6, R28 */
		/* 820BD3A0h case   13:*/		regs.R6 = regs.R28;
		/* 820BD3A0h case   13:*/		return 0x820BD3A4;
		  /* 820BD3A4h */ case   14:  		/* oris R5, R30, 4144 */
		/* 820BD3A4h case   14:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1030);
		/* 820BD3A4h case   14:*/		return 0x820BD3A8;
		  /* 820BD3A8h */ case   15:  		/* mr R4, R16 */
		/* 820BD3A8h case   15:*/		regs.R4 = regs.R16;
		/* 820BD3A8h case   15:*/		return 0x820BD3AC;
		  /* 820BD3ACh */ case   16:  		/* mr R3, R14 */
		/* 820BD3ACh case   16:*/		regs.R3 = regs.R14;
		/* 820BD3ACh case   16:*/		return 0x820BD3B0;
		  /* 820BD3B0h */ case   17:  		/* bl -51368 */
		/* 820BD3B0h case   17:*/		regs.LR = 0x820BD3B4; return 0x820B0B08;
		/* 820BD3B0h case   17:*/		return 0x820BD3B4;
		  /* 820BD3B4h */ case   18:  		/* or. R31, R3, R3 */
		/* 820BD3B4h case   18:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD3B4h case   18:*/		return 0x820BD3B8;
		  /* 820BD3B8h */ case   19:  		/* bc 12, CR0_LT, 4128 */
		/* 820BD3B8h case   19:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD3B8h case   19:*/		return 0x820BD3BC;
		  /* 820BD3BCh */ case   20:  		/* mr R7, R26 */
		/* 820BD3BCh case   20:*/		regs.R7 = regs.R26;
		/* 820BD3BCh case   20:*/		return 0x820BD3C0;
		  /* 820BD3C0h */ case   21:  		/* b -10564 */
		/* 820BD3C0h case   21:*/		return 0x820BAA7C;
		/* 820BD3C0h case   21:*/		return 0x820BD3C4;
		  /* 820BD3C4h */ case   22:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD3C4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD3C4h case   22:*/		return 0x820BD3C8;
		  /* 820BD3C8h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 820BD3C8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD3C8h case   23:*/		return 0x820BD3CC;
		  /* 820BD3CCh */ case   24:  		/* bc 12, CR6_EQ, 4100 */
		/* 820BD3CCh case   24:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD3CCh case   24:*/		return 0x820BD3D0;
		  /* 820BD3D0h */ case   25:  		/* cmplwi CR6, R15, 0 */
		/* 820BD3D0h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BD3D0h case   25:*/		return 0x820BD3D4;
		  /* 820BD3D4h */ case   26:  		/* bc 12, CR6_EQ, -18952 */
		/* 820BD3D4h case   26:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BD3D4h case   26:*/		return 0x820BD3D8;
		  /* 820BD3D8h */ case   27:  		/* lis R11, -32255 */
		/* 820BD3D8h case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BD3D8h case   27:*/		return 0x820BD3DC;
		  /* 820BD3DCh */ case   28:  		/* lwz R31, <#[R14 + 8]> */
		/* 820BD3DCh case   28:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R14 + 0x00000008) );
		/* 820BD3DCh case   28:*/		return 0x820BD3E0;
		  /* 820BD3E0h */ case   29:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 820BD3E0h case   29:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 820BD3E0h case   29:*/		return 0x820BD3E4;
		  /* 820BD3E4h */ case   30:  		/* bl -153100 */
		/* 820BD3E4h case   30:*/		regs.LR = 0x820BD3E8; return 0x82097DD8;
		/* 820BD3E4h case   30:*/		return 0x820BD3E8;
		  /* 820BD3E8h */ case   31:  		/* lis R11, -32256 */
		/* 820BD3E8h case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820BD3E8h case   31:*/		return 0x820BD3EC;
		  /* 820BD3ECh */ case   32:  		/* lwz R4, <#[R31 + 120]> */
		/* 820BD3ECh case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000078) );
		/* 820BD3ECh case   32:*/		return 0x820BD3F0;
		  /* 820BD3F0h */ case   33:  		/* li R6, 0 */
		/* 820BD3F0h case   33:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BD3F0h case   33:*/		return 0x820BD3F4;
		  /* 820BD3F4h */ case   34:  		/* li R5, 0 */
		/* 820BD3F4h case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BD3F4h case   34:*/		return 0x820BD3F8;
		  /* 820BD3F8h */ case   35:  		/* mr R3, R31 */
		/* 820BD3F8h case   35:*/		regs.R3 = regs.R31;
		/* 820BD3F8h case   35:*/		return 0x820BD3FC;
		  /* 820BD3FCh */ case   36:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 820BD3FCh case   36:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 820BD3FCh case   36:*/		return 0x820BD400;
		  /* 820BD400h */ case   37:  		/* fdiv FR1, FR0, FR1 */
		/* 820BD400h case   37:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR0,regs.FR1);
		/* 820BD400h case   37:*/		return 0x820BD404;
		  /* 820BD404h */ case   38:  		/* bl 261668 */
		/* 820BD404h case   38:*/		regs.LR = 0x820BD408; return 0x820FD228;
		/* 820BD404h case   38:*/		return 0x820BD408;
		  /* 820BD408h */ case   39:  		/* mr R31, R3 */
		/* 820BD408h case   39:*/		regs.R31 = regs.R3;
		/* 820BD408h case   39:*/		return 0x820BD40C;
		  /* 820BD40Ch */ case   40:  		/* mulli R4, R30, 9 */
		/* 820BD40Ch case   40:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R30,0x9);
		/* 820BD40Ch case   40:*/		return 0x820BD410;
		  /* 820BD410h */ case   41:  		/* mr R3, R14 */
		/* 820BD410h case   41:*/		regs.R3 = regs.R14;
		/* 820BD410h case   41:*/		return 0x820BD414;
		  /* 820BD414h */ case   42:  		/* bl -52516 */
		/* 820BD414h case   42:*/		regs.LR = 0x820BD418; return 0x820B06F0;
		/* 820BD414h case   42:*/		return 0x820BD418;
		  /* 820BD418h */ case   43:  		/* or. R11, R3, R3 */
		/* 820BD418h case   43:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BD418h case   43:*/		return 0x820BD41C;
		  /* 820BD41Ch */ case   44:  		/* bc 4, CR0_EQ, 16 */
		/* 820BD41Ch case   44:*/		if ( !regs.CR[0].eq ) { return 0x820BD42C;  }
		/* 820BD41Ch case   44:*/		return 0x820BD420;
	}
	return 0x820BD420;
} // Block from 820BD36Ch-820BD420h (45 instructions)

//////////////////////////////////////////////////////
// Block at 820BD420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD420);
		  /* 820BD420h */ case    0:  		/* lis R31, -32761 */
		/* 820BD420h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8007);
		/* 820BD420h case    0:*/		return 0x820BD424;
		  /* 820BD424h */ case    1:  		/* ori R31, R31, 14 */
		/* 820BD424h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xE);
		/* 820BD424h case    1:*/		return 0x820BD428;
		  /* 820BD428h */ case    2:  		/* b 4016 */
		/* 820BD428h case    2:*/		return 0x820BE3D8;
		/* 820BD428h case    2:*/		return 0x820BD42C;
	}
	return 0x820BD42C;
} // Block from 820BD420h-820BD42Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BD42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD42C);
		  /* 820BD42Ch */ case    0:  		/* li R10, 9 */
		/* 820BD42Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 820BD42Ch case    0:*/		return 0x820BD430;
		  /* 820BD430h */ case    1:  		/* addi R9, R1, 156 */
		/* 820BD430h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x9C);
		/* 820BD430h case    1:*/		return 0x820BD434;
		  /* 820BD434h */ case    2:  		/* rlwinm R8, R30, 2, 0, 29 */
		/* 820BD434h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R30);
		/* 820BD434h case    2:*/		return 0x820BD438;
		  /* 820BD438h */ case    3:  		/* mtspr CTR, R10 */
		/* 820BD438h case    3:*/		regs.CTR = regs.R10;
		/* 820BD438h case    3:*/		return 0x820BD43C;
		  /* 820BD43Ch */ case    4:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BD43Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BD43Ch case    4:*/		return 0x820BD440;
		  /* 820BD440h */ case    5:  		/* add R11, R8, R11 */
		/* 820BD440h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BD440h case    5:*/		return 0x820BD444;
		  /* 820BD444h */ case    6:  		/* bc 16, CR0_LT, -8 */
		/* 820BD444h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD43C;  }
		/* 820BD444h case    6:*/		return 0x820BD448;
		  /* 820BD448h */ case    7:  		/* lwz R8, <#[R1 + 192]> */
		/* 820BD448h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BD448h case    7:*/		return 0x820BD44C;
		  /* 820BD44Ch */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 820BD44Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD44Ch case    8:*/		return 0x820BD450;
		  /* 820BD450h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 820BD450h case    9:*/		if ( regs.CR[6].eq ) { return 0x820BD46C;  }
		/* 820BD450h case    9:*/		return 0x820BD454;
		  /* 820BD454h */ case   10:  		/* addi R11, R8, -4 */
		/* 820BD454h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820BD454h case   10:*/		return 0x820BD458;
		  /* 820BD458h */ case   11:  		/* cmplwi CR0, R30, 0 */
		/* 820BD458h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD458h case   11:*/		return 0x820BD45C;
		  /* 820BD45Ch */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD45Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x820BD46C;  }
		/* 820BD45Ch case   12:*/		return 0x820BD460;
		  /* 820BD460h */ case   13:  		/* mtspr CTR, R30 */
		/* 820BD460h case   13:*/		regs.CTR = regs.R30;
		/* 820BD460h case   13:*/		return 0x820BD464;
		  /* 820BD464h */ case   14:  		/* stwu R31, <#[R11 + 4]> */
		/* 820BD464h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD464h case   14:*/		return 0x820BD468;
		  /* 820BD468h */ case   15:  		/* bc 16, CR0_LT, -4 */
		/* 820BD468h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD464;  }
		/* 820BD468h case   15:*/		return 0x820BD46C;
	}
	return 0x820BD46C;
} // Block from 820BD42Ch-820BD46Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 820BD46Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD46C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD46C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD46C);
		  /* 820BD46Ch */ case    0:  		/* lwz R23, <#[R1 + 160]> */
		/* 820BD46Ch case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BD46Ch case    0:*/		return 0x820BD470;
		  /* 820BD470h */ case    1:  		/* li R29, -1 */
		/* 820BD470h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 820BD470h case    1:*/		return 0x820BD474;
		  /* 820BD474h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 820BD474h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD474h case    2:*/		return 0x820BD478;
		  /* 820BD478h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD478h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BD498;  }
		/* 820BD478h case    3:*/		return 0x820BD47C;
		  /* 820BD47Ch */ case    4:  		/* addi R11, R23, -4 */
		/* 820BD47Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFC);
		/* 820BD47Ch case    4:*/		return 0x820BD480;
		  /* 820BD480h */ case    5:  		/* mr R10, R29 */
		/* 820BD480h case    5:*/		regs.R10 = regs.R29;
		/* 820BD480h case    5:*/		return 0x820BD484;
		  /* 820BD484h */ case    6:  		/* cmplwi CR0, R30, 0 */
		/* 820BD484h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD484h case    6:*/		return 0x820BD488;
		  /* 820BD488h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD488h case    7:*/		if ( regs.CR[0].eq ) { return 0x820BD498;  }
		/* 820BD488h case    7:*/		return 0x820BD48C;
		  /* 820BD48Ch */ case    8:  		/* mtspr CTR, R30 */
		/* 820BD48Ch case    8:*/		regs.CTR = regs.R30;
		/* 820BD48Ch case    8:*/		return 0x820BD490;
		  /* 820BD490h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD490h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD490h case    9:*/		return 0x820BD494;
		  /* 820BD494h */ case   10:  		/* bc 16, CR0_LT, -4 */
		/* 820BD494h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD490;  }
		/* 820BD494h case   10:*/		return 0x820BD498;
	}
	return 0x820BD498;
} // Block from 820BD46Ch-820BD498h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BD498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD498);
		  /* 820BD498h */ case    0:  		/* lwz R19, <#[R1 + 164]> */
		/* 820BD498h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BD498h case    0:*/		return 0x820BD49C;
		  /* 820BD49Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD49Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD49Ch case    1:*/		return 0x820BD4A0;
		  /* 820BD4A0h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD4A0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD4C0;  }
		/* 820BD4A0h case    2:*/		return 0x820BD4A4;
		  /* 820BD4A4h */ case    3:  		/* addi R11, R19, -4 */
		/* 820BD4A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R19,0xFFFFFFFC);
		/* 820BD4A4h case    3:*/		return 0x820BD4A8;
		  /* 820BD4A8h */ case    4:  		/* mr R10, R29 */
		/* 820BD4A8h case    4:*/		regs.R10 = regs.R29;
		/* 820BD4A8h case    4:*/		return 0x820BD4AC;
		  /* 820BD4ACh */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD4ACh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD4ACh case    5:*/		return 0x820BD4B0;
		  /* 820BD4B0h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD4B0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD4C0;  }
		/* 820BD4B0h case    6:*/		return 0x820BD4B4;
		  /* 820BD4B4h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD4B4h case    7:*/		regs.CTR = regs.R30;
		/* 820BD4B4h case    7:*/		return 0x820BD4B8;
		  /* 820BD4B8h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD4B8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD4B8h case    8:*/		return 0x820BD4BC;
		  /* 820BD4BCh */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD4BCh case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD4B8;  }
		/* 820BD4BCh case    9:*/		return 0x820BD4C0;
	}
	return 0x820BD4C0;
} // Block from 820BD498h-820BD4C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD4C0);
		  /* 820BD4C0h */ case    0:  		/* lwz R20, <#[R1 + 168]> */
		/* 820BD4C0h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BD4C0h case    0:*/		return 0x820BD4C4;
		  /* 820BD4C4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD4C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD4C4h case    1:*/		return 0x820BD4C8;
		  /* 820BD4C8h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD4C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD4E8;  }
		/* 820BD4C8h case    2:*/		return 0x820BD4CC;
		  /* 820BD4CCh */ case    3:  		/* addi R11, R20, -4 */
		/* 820BD4CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0xFFFFFFFC);
		/* 820BD4CCh case    3:*/		return 0x820BD4D0;
		  /* 820BD4D0h */ case    4:  		/* mr R10, R29 */
		/* 820BD4D0h case    4:*/		regs.R10 = regs.R29;
		/* 820BD4D0h case    4:*/		return 0x820BD4D4;
		  /* 820BD4D4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD4D4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD4D4h case    5:*/		return 0x820BD4D8;
		  /* 820BD4D8h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD4D8h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD4E8;  }
		/* 820BD4D8h case    6:*/		return 0x820BD4DC;
		  /* 820BD4DCh */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD4DCh case    7:*/		regs.CTR = regs.R30;
		/* 820BD4DCh case    7:*/		return 0x820BD4E0;
		  /* 820BD4E0h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD4E0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD4E0h case    8:*/		return 0x820BD4E4;
		  /* 820BD4E4h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD4E4h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD4E0;  }
		/* 820BD4E4h case    9:*/		return 0x820BD4E8;
	}
	return 0x820BD4E8;
} // Block from 820BD4C0h-820BD4E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD4E8);
		  /* 820BD4E8h */ case    0:  		/* lwz R22, <#[R1 + 172]> */
		/* 820BD4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BD4E8h case    0:*/		return 0x820BD4EC;
		  /* 820BD4ECh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD4ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD4ECh case    1:*/		return 0x820BD4F0;
		  /* 820BD4F0h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD4F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD510;  }
		/* 820BD4F0h case    2:*/		return 0x820BD4F4;
		  /* 820BD4F4h */ case    3:  		/* addi R11, R22, -4 */
		/* 820BD4F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFFC);
		/* 820BD4F4h case    3:*/		return 0x820BD4F8;
		  /* 820BD4F8h */ case    4:  		/* mr R10, R29 */
		/* 820BD4F8h case    4:*/		regs.R10 = regs.R29;
		/* 820BD4F8h case    4:*/		return 0x820BD4FC;
		  /* 820BD4FCh */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD4FCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD4FCh case    5:*/		return 0x820BD500;
		  /* 820BD500h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD500h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD510;  }
		/* 820BD500h case    6:*/		return 0x820BD504;
		  /* 820BD504h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD504h case    7:*/		regs.CTR = regs.R30;
		/* 820BD504h case    7:*/		return 0x820BD508;
		  /* 820BD508h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD508h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD508h case    8:*/		return 0x820BD50C;
		  /* 820BD50Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD50Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD508;  }
		/* 820BD50Ch case    9:*/		return 0x820BD510;
	}
	return 0x820BD510;
} // Block from 820BD4E8h-820BD510h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD510);
		  /* 820BD510h */ case    0:  		/* lwz R24, <#[R1 + 176]> */
		/* 820BD510h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BD510h case    0:*/		return 0x820BD514;
		  /* 820BD514h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD514h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD514h case    1:*/		return 0x820BD518;
		  /* 820BD518h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD518h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD538;  }
		/* 820BD518h case    2:*/		return 0x820BD51C;
		  /* 820BD51Ch */ case    3:  		/* addi R11, R24, -4 */
		/* 820BD51Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFFC);
		/* 820BD51Ch case    3:*/		return 0x820BD520;
		  /* 820BD520h */ case    4:  		/* mr R10, R29 */
		/* 820BD520h case    4:*/		regs.R10 = regs.R29;
		/* 820BD520h case    4:*/		return 0x820BD524;
		  /* 820BD524h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD524h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD524h case    5:*/		return 0x820BD528;
		  /* 820BD528h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD528h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD538;  }
		/* 820BD528h case    6:*/		return 0x820BD52C;
		  /* 820BD52Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD52Ch case    7:*/		regs.CTR = regs.R30;
		/* 820BD52Ch case    7:*/		return 0x820BD530;
		  /* 820BD530h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD530h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD530h case    8:*/		return 0x820BD534;
		  /* 820BD534h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD534h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD530;  }
		/* 820BD534h case    9:*/		return 0x820BD538;
	}
	return 0x820BD538;
} // Block from 820BD510h-820BD538h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD538);
		  /* 820BD538h */ case    0:  		/* lwz R21, <#[R1 + 180]> */
		/* 820BD538h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BD538h case    0:*/		return 0x820BD53C;
		  /* 820BD53Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD53Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD53Ch case    1:*/		return 0x820BD540;
		  /* 820BD540h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD540h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD560;  }
		/* 820BD540h case    2:*/		return 0x820BD544;
		  /* 820BD544h */ case    3:  		/* addi R11, R21, -4 */
		/* 820BD544h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0xFFFFFFFC);
		/* 820BD544h case    3:*/		return 0x820BD548;
		  /* 820BD548h */ case    4:  		/* mr R10, R29 */
		/* 820BD548h case    4:*/		regs.R10 = regs.R29;
		/* 820BD548h case    4:*/		return 0x820BD54C;
		  /* 820BD54Ch */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD54Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD54Ch case    5:*/		return 0x820BD550;
		  /* 820BD550h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD550h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD560;  }
		/* 820BD550h case    6:*/		return 0x820BD554;
		  /* 820BD554h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD554h case    7:*/		regs.CTR = regs.R30;
		/* 820BD554h case    7:*/		return 0x820BD558;
		  /* 820BD558h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD558h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD558h case    8:*/		return 0x820BD55C;
		  /* 820BD55Ch */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD55Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD558;  }
		/* 820BD55Ch case    9:*/		return 0x820BD560;
	}
	return 0x820BD560;
} // Block from 820BD538h-820BD560h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD560);
		  /* 820BD560h */ case    0:  		/* lwz R25, <#[R1 + 184]> */
		/* 820BD560h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000B8) );
		/* 820BD560h case    0:*/		return 0x820BD564;
		  /* 820BD564h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD564h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD564h case    1:*/		return 0x820BD568;
		  /* 820BD568h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD568h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD588;  }
		/* 820BD568h case    2:*/		return 0x820BD56C;
		  /* 820BD56Ch */ case    3:  		/* addi R11, R25, -4 */
		/* 820BD56Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 820BD56Ch case    3:*/		return 0x820BD570;
		  /* 820BD570h */ case    4:  		/* mr R10, R29 */
		/* 820BD570h case    4:*/		regs.R10 = regs.R29;
		/* 820BD570h case    4:*/		return 0x820BD574;
		  /* 820BD574h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD574h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD574h case    5:*/		return 0x820BD578;
		  /* 820BD578h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD578h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD588;  }
		/* 820BD578h case    6:*/		return 0x820BD57C;
		  /* 820BD57Ch */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD57Ch case    7:*/		regs.CTR = regs.R30;
		/* 820BD57Ch case    7:*/		return 0x820BD580;
		  /* 820BD580h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD580h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD580h case    8:*/		return 0x820BD584;
		  /* 820BD584h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD584h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD580;  }
		/* 820BD584h case    9:*/		return 0x820BD588;
	}
	return 0x820BD588;
} // Block from 820BD560h-820BD588h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD588);
		  /* 820BD588h */ case    0:  		/* lwz R26, <#[R1 + 188]> */
		/* 820BD588h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000BC) );
		/* 820BD588h case    0:*/		return 0x820BD58C;
		  /* 820BD58Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 820BD58Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD58Ch case    1:*/		return 0x820BD590;
		  /* 820BD590h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 820BD590h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BD5D0;  }
		/* 820BD590h case    2:*/		return 0x820BD594;
		  /* 820BD594h */ case    3:  		/* addi R11, R26, -4 */
		/* 820BD594h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFC);
		/* 820BD594h case    3:*/		return 0x820BD598;
		  /* 820BD598h */ case    4:  		/* mr R10, R29 */
		/* 820BD598h case    4:*/		regs.R10 = regs.R29;
		/* 820BD598h case    4:*/		return 0x820BD59C;
		  /* 820BD59Ch */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 820BD59Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD59Ch case    5:*/		return 0x820BD5A0;
		  /* 820BD5A0h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD5A0h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BD5B0;  }
		/* 820BD5A0h case    6:*/		return 0x820BD5A4;
		  /* 820BD5A4h */ case    7:  		/* mtspr CTR, R30 */
		/* 820BD5A4h case    7:*/		regs.CTR = regs.R30;
		/* 820BD5A4h case    7:*/		return 0x820BD5A8;
		  /* 820BD5A8h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD5A8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD5A8h case    8:*/		return 0x820BD5AC;
		  /* 820BD5ACh */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820BD5ACh case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD5A8;  }
		/* 820BD5ACh case    9:*/		return 0x820BD5B0;
	}
	return 0x820BD5B0;
} // Block from 820BD588h-820BD5B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD5B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD5B0);
		  /* 820BD5B0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BD5B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD5B0h case    0:*/		return 0x820BD5B4;
		  /* 820BD5B4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 820BD5B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BD5D0;  }
		/* 820BD5B4h case    1:*/		return 0x820BD5B8;
		  /* 820BD5B8h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BD5B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BD5B8h case    2:*/		return 0x820BD5BC;
		  /* 820BD5BCh */ case    3:  		/* cmplwi CR0, R30, 0 */
		/* 820BD5BCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD5BCh case    3:*/		return 0x820BD5C0;
		  /* 820BD5C0h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD5C0h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BD5D0;  }
		/* 820BD5C0h case    4:*/		return 0x820BD5C4;
		  /* 820BD5C4h */ case    5:  		/* mtspr CTR, R30 */
		/* 820BD5C4h case    5:*/		regs.CTR = regs.R30;
		/* 820BD5C4h case    5:*/		return 0x820BD5C8;
		  /* 820BD5C8h */ case    6:  		/* stwu R29, <#[R11 + 4]> */
		/* 820BD5C8h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD5C8h case    6:*/		return 0x820BD5CC;
		  /* 820BD5CCh */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 820BD5CCh case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD5C8;  }
		/* 820BD5CCh case    7:*/		return 0x820BD5D0;
	}
	return 0x820BD5D0;
} // Block from 820BD5B0h-820BD5D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BD5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD5D0);
		  /* 820BD5D0h */ case    0:  		/* rlwinm R30, R30, 0, 12, 31 */
		/* 820BD5D0h case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R30,regs.R30);
		/* 820BD5D0h case    0:*/		return 0x820BD5D4;
		  /* 820BD5D4h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BD5D4h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BD5D4h case    1:*/		return 0x820BD5D8;
		  /* 820BD5D8h */ case    2:  		/* li R9, 0 */
		/* 820BD5D8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD5D8h case    2:*/		return 0x820BD5DC;
		  /* 820BD5DCh */ case    3:  		/* oris R27, R30, 8272 */
		/* 820BD5DCh case    3:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R30,0x2050);
		/* 820BD5DCh case    3:*/		return 0x820BD5E0;
		  /* 820BD5E0h */ case    4:  		/* mr R6, R23 */
		/* 820BD5E0h case    4:*/		regs.R6 = regs.R23;
		/* 820BD5E0h case    4:*/		return 0x820BD5E4;
		  /* 820BD5E4h */ case    5:  		/* mr R5, R27 */
		/* 820BD5E4h case    5:*/		regs.R5 = regs.R27;
		/* 820BD5E4h case    5:*/		return 0x820BD5E8;
		  /* 820BD5E8h */ case    6:  		/* mr R4, R16 */
		/* 820BD5E8h case    6:*/		regs.R4 = regs.R16;
		/* 820BD5E8h case    6:*/		return 0x820BD5EC;
		  /* 820BD5ECh */ case    7:  		/* mr R3, R14 */
		/* 820BD5ECh case    7:*/		regs.R3 = regs.R14;
		/* 820BD5ECh case    7:*/		return 0x820BD5F0;
		  /* 820BD5F0h */ case    8:  		/* bl -51944 */
		/* 820BD5F0h case    8:*/		regs.LR = 0x820BD5F4; return 0x820B0B08;
		/* 820BD5F0h case    8:*/		return 0x820BD5F4;
		  /* 820BD5F4h */ case    9:  		/* or. R31, R3, R3 */
		/* 820BD5F4h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD5F4h case    9:*/		return 0x820BD5F8;
		  /* 820BD5F8h */ case   10:  		/* bc 12, CR0_LT, 3552 */
		/* 820BD5F8h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD5F8h case   10:*/		return 0x820BD5FC;
		  /* 820BD5FCh */ case   11:  		/* oris R28, R30, 4176 */
		/* 820BD5FCh case   11:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R30,0x1050);
		/* 820BD5FCh case   11:*/		return 0x820BD600;
		  /* 820BD600h */ case   12:  		/* li R9, 4 */
		/* 820BD600h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BD600h case   12:*/		return 0x820BD604;
		  /* 820BD604h */ case   13:  		/* li R8, 0 */
		/* 820BD604h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD604h case   13:*/		return 0x820BD608;
		  /* 820BD608h */ case   14:  		/* mr R7, R23 */
		/* 820BD608h case   14:*/		regs.R7 = regs.R23;
		/* 820BD608h case   14:*/		return 0x820BD60C;
		  /* 820BD60Ch */ case   15:  		/* mr R6, R19 */
		/* 820BD60Ch case   15:*/		regs.R6 = regs.R19;
		/* 820BD60Ch case   15:*/		return 0x820BD610;
		  /* 820BD610h */ case   16:  		/* mr R5, R28 */
		/* 820BD610h case   16:*/		regs.R5 = regs.R28;
		/* 820BD610h case   16:*/		return 0x820BD614;
		  /* 820BD614h */ case   17:  		/* mr R4, R16 */
		/* 820BD614h case   17:*/		regs.R4 = regs.R16;
		/* 820BD614h case   17:*/		return 0x820BD618;
		  /* 820BD618h */ case   18:  		/* mr R3, R14 */
		/* 820BD618h case   18:*/		regs.R3 = regs.R14;
		/* 820BD618h case   18:*/		return 0x820BD61C;
		  /* 820BD61Ch */ case   19:  		/* bl -51988 */
		/* 820BD61Ch case   19:*/		regs.LR = 0x820BD620; return 0x820B0B08;
		/* 820BD61Ch case   19:*/		return 0x820BD620;
		  /* 820BD620h */ case   20:  		/* or. R31, R3, R3 */
		/* 820BD620h case   20:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD620h case   20:*/		return 0x820BD624;
		  /* 820BD624h */ case   21:  		/* bc 12, CR0_LT, 3508 */
		/* 820BD624h case   21:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD624h case   21:*/		return 0x820BD628;
		  /* 820BD628h */ case   22:  		/* oris R29, R30, 4112 */
		/* 820BD628h case   22:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R30,0x1010);
		/* 820BD628h case   22:*/		return 0x820BD62C;
		  /* 820BD62Ch */ case   23:  		/* li R9, 0 */
		/* 820BD62Ch case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD62Ch case   23:*/		return 0x820BD630;
		  /* 820BD630h */ case   24:  		/* li R8, 0 */
		/* 820BD630h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD630h case   24:*/		return 0x820BD634;
		  /* 820BD634h */ case   25:  		/* mr R7, R23 */
		/* 820BD634h case   25:*/		regs.R7 = regs.R23;
		/* 820BD634h case   25:*/		return 0x820BD638;
		  /* 820BD638h */ case   26:  		/* mr R6, R20 */
		/* 820BD638h case   26:*/		regs.R6 = regs.R20;
		/* 820BD638h case   26:*/		return 0x820BD63C;
		  /* 820BD63Ch */ case   27:  		/* mr R5, R29 */
		/* 820BD63Ch case   27:*/		regs.R5 = regs.R29;
		/* 820BD63Ch case   27:*/		return 0x820BD640;
		  /* 820BD640h */ case   28:  		/* mr R4, R16 */
		/* 820BD640h case   28:*/		regs.R4 = regs.R16;
		/* 820BD640h case   28:*/		return 0x820BD644;
		  /* 820BD644h */ case   29:  		/* mr R3, R14 */
		/* 820BD644h case   29:*/		regs.R3 = regs.R14;
		/* 820BD644h case   29:*/		return 0x820BD648;
		  /* 820BD648h */ case   30:  		/* bl -52032 */
		/* 820BD648h case   30:*/		regs.LR = 0x820BD64C; return 0x820B0B08;
		/* 820BD648h case   30:*/		return 0x820BD64C;
		  /* 820BD64Ch */ case   31:  		/* or. R31, R3, R3 */
		/* 820BD64Ch case   31:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD64Ch case   31:*/		return 0x820BD650;
		  /* 820BD650h */ case   32:  		/* bc 12, CR0_LT, 3464 */
		/* 820BD650h case   32:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD650h case   32:*/		return 0x820BD654;
		  /* 820BD654h */ case   33:  		/* li R9, 4 */
		/* 820BD654h case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BD654h case   33:*/		return 0x820BD658;
		  /* 820BD658h */ case   34:  		/* li R8, 0 */
		/* 820BD658h case   34:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD658h case   34:*/		return 0x820BD65C;
		  /* 820BD65Ch */ case   35:  		/* mr R7, R20 */
		/* 820BD65Ch case   35:*/		regs.R7 = regs.R20;
		/* 820BD65Ch case   35:*/		return 0x820BD660;
		  /* 820BD660h */ case   36:  		/* mr R6, R22 */
		/* 820BD660h case   36:*/		regs.R6 = regs.R22;
		/* 820BD660h case   36:*/		return 0x820BD664;
		  /* 820BD664h */ case   37:  		/* mr R5, R28 */
		/* 820BD664h case   37:*/		regs.R5 = regs.R28;
		/* 820BD664h case   37:*/		return 0x820BD668;
		  /* 820BD668h */ case   38:  		/* mr R4, R16 */
		/* 820BD668h case   38:*/		regs.R4 = regs.R16;
		/* 820BD668h case   38:*/		return 0x820BD66C;
		  /* 820BD66Ch */ case   39:  		/* mr R3, R14 */
		/* 820BD66Ch case   39:*/		regs.R3 = regs.R14;
		/* 820BD66Ch case   39:*/		return 0x820BD670;
		  /* 820BD670h */ case   40:  		/* bl -52072 */
		/* 820BD670h case   40:*/		regs.LR = 0x820BD674; return 0x820B0B08;
		/* 820BD670h case   40:*/		return 0x820BD674;
		  /* 820BD674h */ case   41:  		/* or. R31, R3, R3 */
		/* 820BD674h case   41:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD674h case   41:*/		return 0x820BD678;
		  /* 820BD678h */ case   42:  		/* bc 12, CR0_LT, 3424 */
		/* 820BD678h case   42:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD678h case   42:*/		return 0x820BD67C;
		  /* 820BD67Ch */ case   43:  		/* li R9, 8 */
		/* 820BD67Ch case   43:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BD67Ch case   43:*/		return 0x820BD680;
		  /* 820BD680h */ case   44:  		/* li R8, 0 */
		/* 820BD680h case   44:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD680h case   44:*/		return 0x820BD684;
		  /* 820BD684h */ case   45:  		/* mr R7, R22 */
		/* 820BD684h case   45:*/		regs.R7 = regs.R22;
		/* 820BD684h case   45:*/		return 0x820BD688;
		  /* 820BD688h */ case   46:  		/* mr R6, R24 */
		/* 820BD688h case   46:*/		regs.R6 = regs.R24;
		/* 820BD688h case   46:*/		return 0x820BD68C;
		  /* 820BD68Ch */ case   47:  		/* mr R5, R29 */
		/* 820BD68Ch case   47:*/		regs.R5 = regs.R29;
		/* 820BD68Ch case   47:*/		return 0x820BD690;
		  /* 820BD690h */ case   48:  		/* mr R4, R16 */
		/* 820BD690h case   48:*/		regs.R4 = regs.R16;
		/* 820BD690h case   48:*/		return 0x820BD694;
		  /* 820BD694h */ case   49:  		/* mr R3, R14 */
		/* 820BD694h case   49:*/		regs.R3 = regs.R14;
		/* 820BD694h case   49:*/		return 0x820BD698;
		  /* 820BD698h */ case   50:  		/* bl -52112 */
		/* 820BD698h case   50:*/		regs.LR = 0x820BD69C; return 0x820B0B08;
		/* 820BD698h case   50:*/		return 0x820BD69C;
		  /* 820BD69Ch */ case   51:  		/* or. R31, R3, R3 */
		/* 820BD69Ch case   51:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD69Ch case   51:*/		return 0x820BD6A0;
		  /* 820BD6A0h */ case   52:  		/* bc 12, CR0_LT, 3384 */
		/* 820BD6A0h case   52:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD6A0h case   52:*/		return 0x820BD6A4;
		  /* 820BD6A4h */ case   53:  		/* oris R29, R30, 8256 */
		/* 820BD6A4h case   53:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R30,0x2040);
		/* 820BD6A4h case   53:*/		return 0x820BD6A8;
		  /* 820BD6A8h */ case   54:  		/* li R9, 0 */
		/* 820BD6A8h case   54:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD6A8h case   54:*/		return 0x820BD6AC;
		  /* 820BD6ACh */ case   55:  		/* mr R8, R24 */
		/* 820BD6ACh case   55:*/		regs.R8 = regs.R24;
		/* 820BD6ACh case   55:*/		return 0x820BD6B0;
		  /* 820BD6B0h */ case   56:  		/* mr R7, R19 */
		/* 820BD6B0h case   56:*/		regs.R7 = regs.R19;
		/* 820BD6B0h case   56:*/		return 0x820BD6B4;
		  /* 820BD6B4h */ case   57:  		/* mr R6, R21 */
		/* 820BD6B4h case   57:*/		regs.R6 = regs.R21;
		/* 820BD6B4h case   57:*/		return 0x820BD6B8;
		  /* 820BD6B8h */ case   58:  		/* mr R5, R29 */
		/* 820BD6B8h case   58:*/		regs.R5 = regs.R29;
		/* 820BD6B8h case   58:*/		return 0x820BD6BC;
		  /* 820BD6BCh */ case   59:  		/* mr R4, R16 */
		/* 820BD6BCh case   59:*/		regs.R4 = regs.R16;
		/* 820BD6BCh case   59:*/		return 0x820BD6C0;
		  /* 820BD6C0h */ case   60:  		/* mr R3, R14 */
		/* 820BD6C0h case   60:*/		regs.R3 = regs.R14;
		/* 820BD6C0h case   60:*/		return 0x820BD6C4;
		  /* 820BD6C4h */ case   61:  		/* bl -52156 */
		/* 820BD6C4h case   61:*/		regs.LR = 0x820BD6C8; return 0x820B0B08;
		/* 820BD6C4h case   61:*/		return 0x820BD6C8;
		  /* 820BD6C8h */ case   62:  		/* or. R31, R3, R3 */
		/* 820BD6C8h case   62:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD6C8h case   62:*/		return 0x820BD6CC;
		  /* 820BD6CCh */ case   63:  		/* bc 12, CR0_LT, 3340 */
		/* 820BD6CCh case   63:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD6CCh case   63:*/		return 0x820BD6D0;
		  /* 820BD6D0h */ case   64:  		/* li R9, 4 */
		/* 820BD6D0h case   64:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BD6D0h case   64:*/		return 0x820BD6D4;
		  /* 820BD6D4h */ case   65:  		/* mr R8, R22 */
		/* 820BD6D4h case   65:*/		regs.R8 = regs.R22;
		/* 820BD6D4h case   65:*/		return 0x820BD6D8;
		  /* 820BD6D8h */ case   66:  		/* mr R7, R19 */
		/* 820BD6D8h case   66:*/		regs.R7 = regs.R19;
		/* 820BD6D8h case   66:*/		return 0x820BD6DC;
		  /* 820BD6DCh */ case   67:  		/* mr R6, R25 */
		/* 820BD6DCh case   67:*/		regs.R6 = regs.R25;
		/* 820BD6DCh case   67:*/		return 0x820BD6E0;
		  /* 820BD6E0h */ case   68:  		/* mr R5, R29 */
		/* 820BD6E0h case   68:*/		regs.R5 = regs.R29;
		/* 820BD6E0h case   68:*/		return 0x820BD6E4;
		  /* 820BD6E4h */ case   69:  		/* mr R4, R16 */
		/* 820BD6E4h case   69:*/		regs.R4 = regs.R16;
		/* 820BD6E4h case   69:*/		return 0x820BD6E8;
		  /* 820BD6E8h */ case   70:  		/* mr R3, R14 */
		/* 820BD6E8h case   70:*/		regs.R3 = regs.R14;
		/* 820BD6E8h case   70:*/		return 0x820BD6EC;
		  /* 820BD6ECh */ case   71:  		/* bl -52196 */
		/* 820BD6ECh case   71:*/		regs.LR = 0x820BD6F0; return 0x820B0B08;
		/* 820BD6ECh case   71:*/		return 0x820BD6F0;
		  /* 820BD6F0h */ case   72:  		/* or. R31, R3, R3 */
		/* 820BD6F0h case   72:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD6F0h case   72:*/		return 0x820BD6F4;
		  /* 820BD6F4h */ case   73:  		/* bc 12, CR0_LT, 3300 */
		/* 820BD6F4h case   73:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD6F4h case   73:*/		return 0x820BD6F8;
		  /* 820BD6F8h */ case   74:  		/* li R9, 4 */
		/* 820BD6F8h case   74:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BD6F8h case   74:*/		return 0x820BD6FC;
		  /* 820BD6FCh */ case   75:  		/* li R8, 0 */
		/* 820BD6FCh case   75:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BD6FCh case   75:*/		return 0x820BD700;
		  /* 820BD700h */ case   76:  		/* mr R7, R25 */
		/* 820BD700h case   76:*/		regs.R7 = regs.R25;
		/* 820BD700h case   76:*/		return 0x820BD704;
		  /* 820BD704h */ case   77:  		/* mr R6, R26 */
		/* 820BD704h case   77:*/		regs.R6 = regs.R26;
		/* 820BD704h case   77:*/		return 0x820BD708;
		  /* 820BD708h */ case   78:  		/* oris R5, R30, 4144 */
		/* 820BD708h case   78:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R30,0x1030);
		/* 820BD708h case   78:*/		return 0x820BD70C;
		  /* 820BD70Ch */ case   79:  		/* mr R4, R16 */
		/* 820BD70Ch case   79:*/		regs.R4 = regs.R16;
		/* 820BD70Ch case   79:*/		return 0x820BD710;
		  /* 820BD710h */ case   80:  		/* mr R3, R14 */
		/* 820BD710h case   80:*/		regs.R3 = regs.R14;
		/* 820BD710h case   80:*/		return 0x820BD714;
		  /* 820BD714h */ case   81:  		/* bl -52236 */
		/* 820BD714h case   81:*/		regs.LR = 0x820BD718; return 0x820B0B08;
		/* 820BD714h case   81:*/		return 0x820BD718;
		  /* 820BD718h */ case   82:  		/* or. R31, R3, R3 */
		/* 820BD718h case   82:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD718h case   82:*/		return 0x820BD71C;
		  /* 820BD71Ch */ case   83:  		/* bc 12, CR0_LT, 3260 */
		/* 820BD71Ch case   83:*/		if ( regs.CR[0].lt ) { return 0x820BE3D8;  }
		/* 820BD71Ch case   83:*/		return 0x820BD720;
		  /* 820BD720h */ case   84:  		/* mr R8, R26 */
		/* 820BD720h case   84:*/		regs.R8 = regs.R26;
		/* 820BD720h case   84:*/		return 0x820BD724;
		  /* 820BD724h */ case   85:  		/* mr R7, R21 */
		/* 820BD724h case   85:*/		regs.R7 = regs.R21;
		/* 820BD724h case   85:*/		return 0x820BD728;
	}
	return 0x820BD728;
} // Block from 820BD5D0h-820BD728h (86 instructions)

//////////////////////////////////////////////////////
// Block at 820BD728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD728);
		  /* 820BD728h */ case    0:  		/* mr R5, R27 */
		/* 820BD728h case    0:*/		regs.R5 = regs.R27;
		/* 820BD728h case    0:*/		return 0x820BD72C;
	}
	return 0x820BD72C;
} // Block from 820BD728h-820BD72Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BD72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD72C);
		  /* 820BD72Ch */ case    0:  		/* li R9, 0 */
		/* 820BD72Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD72Ch case    0:*/		return 0x820BD730;
	}
	return 0x820BD730;
} // Block from 820BD72Ch-820BD730h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BD730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD730);
		  /* 820BD730h */ case    0:  		/* mr R3, R14 */
		/* 820BD730h case    0:*/		regs.R3 = regs.R14;
		/* 820BD730h case    0:*/		return 0x820BD734;
	}
	return 0x820BD734;
} // Block from 820BD730h-820BD734h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BD734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD734);
		  /* 820BD734h */ case    0:  		/* mr R6, R15 */
		/* 820BD734h case    0:*/		regs.R6 = regs.R15;
		/* 820BD734h case    0:*/		return 0x820BD738;
	}
	return 0x820BD738;
} // Block from 820BD734h-820BD738h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BD738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD738);
		  /* 820BD738h */ case    0:  		/* mr R4, R16 */
		/* 820BD738h case    0:*/		regs.R4 = regs.R16;
		/* 820BD738h case    0:*/		return 0x820BD73C;
	}
	return 0x820BD73C;
} // Block from 820BD738h-820BD73Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BD73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD73C);
		  /* 820BD73Ch */ case    0:  		/* bl -52276 */
		/* 820BD73Ch case    0:*/		regs.LR = 0x820BD740; return 0x820B0B08;
		/* 820BD73Ch case    0:*/		return 0x820BD740;
	}
	return 0x820BD740;
} // Block from 820BD73Ch-820BD740h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BD740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD740);
		  /* 820BD740h */ case    0:  		/* or. R31, R3, R3 */
		/* 820BD740h case    0:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820BD740h case    0:*/		return 0x820BD744;
		  /* 820BD744h */ case    1:  		/* bc 4, CR0_LT, -19832 */
		/* 820BD744h case    1:*/		if ( !regs.CR[0].lt ) { return 0x820B89CC;  }
		/* 820BD744h case    1:*/		return 0x820BD748;
		  /* 820BD748h */ case    2:  		/* b 3216 */
		/* 820BD748h case    2:*/		return 0x820BE3D8;
		/* 820BD748h case    2:*/		return 0x820BD74C;
		  /* 820BD74Ch */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD74Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD74Ch case    3:*/		return 0x820BD750;
		  /* 820BD750h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820BD750h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD750h case    4:*/		return 0x820BD754;
		  /* 820BD754h */ case    5:  		/* bc 12, CR6_EQ, 3196 */
		/* 820BD754h case    5:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD754h case    5:*/		return 0x820BD758;
		  /* 820BD758h */ case    6:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BD758h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BD758h case    6:*/		return 0x820BD75C;
		  /* 820BD75Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820BD75Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD75Ch case    7:*/		return 0x820BD760;
		  /* 820BD760h */ case    8:  		/* bc 12, CR6_EQ, 3184 */
		/* 820BD760h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD760h case    8:*/		return 0x820BD764;
		  /* 820BD764h */ case    9:  		/* cmplwi CR6, R15, 0 */
		/* 820BD764h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BD764h case    9:*/		return 0x820BD768;
		  /* 820BD768h */ case   10:  		/* bc 12, CR6_EQ, -19868 */
		/* 820BD768h case   10:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BD768h case   10:*/		return 0x820BD76C;
		  /* 820BD76Ch */ case   11:  		/* li R10, 2 */
		/* 820BD76Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820BD76Ch case   11:*/		return 0x820BD770;
		  /* 820BD770h */ case   12:  		/* lwz R9, <#[R1 + 144]> */
		/* 820BD770h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000090) );
		/* 820BD770h case   12:*/		return 0x820BD774;
		  /* 820BD774h */ case   13:  		/* addi R11, R1, 676 */
		/* 820BD774h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x2A4);
		/* 820BD774h case   13:*/		return 0x820BD778;
		  /* 820BD778h */ case   14:  		/* mtspr CTR, R10 */
		/* 820BD778h case   14:*/		regs.CTR = regs.R10;
		/* 820BD778h case   14:*/		return 0x820BD77C;
		  /* 820BD77Ch */ case   15:  		/* lwz R10, <#[R1 + 148]> */
		/* 820BD77Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 820BD77Ch case   15:*/		return 0x820BD780;
		  /* 820BD780h */ case   16:  		/* lwz R8, <#[R9]> */
		/* 820BD780h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 820BD780h case   16:*/		return 0x820BD784;
		  /* 820BD784h */ case   17:  		/* stw R8, <#[R11 - 4]> */
		/* 820BD784h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820BD784h case   17:*/		return 0x820BD788;
		  /* 820BD788h */ case   18:  		/* lwz R8, <#[R10]> */
		/* 820BD788h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820BD788h case   18:*/		return 0x820BD78C;
		  /* 820BD78Ch */ case   19:  		/* stwu R8, <#[R11 + 4]> */
		/* 820BD78Ch case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD78Ch case   19:*/		return 0x820BD790;
		  /* 820BD790h */ case   20:  		/* bc 16, CR0_LT, -16 */
		/* 820BD790h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD780;  }
		/* 820BD790h case   20:*/		return 0x820BD794;
		  /* 820BD794h */ case   21:  		/* lwz R11, <#[R10]> */
		/* 820BD794h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820BD794h case   21:*/		return 0x820BD798;
		  /* 820BD798h */ case   22:  		/* li R6, 1 */
		/* 820BD798h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820BD798h case   22:*/		return 0x820BD79C;
		  /* 820BD79Ch */ case   23:  		/* addi R5, R1, 504 */
		/* 820BD79Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1F8);
		/* 820BD79Ch case   23:*/		return 0x820BD7A0;
		  /* 820BD7A0h */ case   24:  		/* li R4, 0 */
		/* 820BD7A0h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820BD7A0h case   24:*/		return 0x820BD7A4;
		  /* 820BD7A4h */ case   25:  		/* mr R3, R14 */
		/* 820BD7A4h case   25:*/		regs.R3 = regs.R14;
		/* 820BD7A4h case   25:*/		return 0x820BD7A8;
		  /* 820BD7A8h */ case   26:  		/* stw R11, <#[R1 + 504]> */
		/* 820BD7A8h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001F8) );
		/* 820BD7A8h case   26:*/		return 0x820BD7AC;
		  /* 820BD7ACh */ case   27:  		/* bl -36300 */
		/* 820BD7ACh case   27:*/		regs.LR = 0x820BD7B0; return 0x820B49E0;
		/* 820BD7ACh case   27:*/		return 0x820BD7B0;
		  /* 820BD7B0h */ case   28:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BD7B0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BD7B0h case   28:*/		return 0x820BD7B4;
		  /* 820BD7B4h */ case   29:  		/* lwz R10, <#[R1 + 680]> */
		/* 820BD7B4h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000002A8) );
		/* 820BD7B4h case   29:*/		return 0x820BD7B8;
		  /* 820BD7B8h */ case   30:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820BD7B8h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820BD7B8h case   30:*/		return 0x820BD7BC;
		  /* 820BD7BCh */ case   31:  		/* lwz R7, <#[R11 + 20]> */
		/* 820BD7BCh case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000014) );
		/* 820BD7BCh case   31:*/		return 0x820BD7C0;
		  /* 820BD7C0h */ case   32:  		/* lwz R9, <#[R11 + 16]> */
		/* 820BD7C0h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 820BD7C0h case   32:*/		return 0x820BD7C4;
		  /* 820BD7C4h */ case   33:  		/* lwzx R8, <#[R10 + R7]> */
		/* 820BD7C4h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 820BD7C4h case   33:*/		return 0x820BD7C8;
		  /* 820BD7C8h */ case   34:  		/* lwz R6, <#[R8 + 4]> */
		/* 820BD7C8h case   34:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000004) );
		/* 820BD7C8h case   34:*/		return 0x820BD7CC;
		  /* 820BD7CCh */ case   35:  		/* rlwinm R10, R6, 2, 0, 29 */
		/* 820BD7CCh case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R6);
		/* 820BD7CCh case   35:*/		return 0x820BD7D0;
		  /* 820BD7D0h */ case   36:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820BD7D0h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820BD7D0h case   36:*/		return 0x820BD7D4;
		  /* 820BD7D4h */ case   37:  		/* lwz R10, <#[R10 + 4]> */
		/* 820BD7D4h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 820BD7D4h case   37:*/		return 0x820BD7D8;
		  /* 820BD7D8h */ case   38:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 820BD7D8h case   38:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 820BD7D8h case   38:*/		return 0x820BD7DC;
		  /* 820BD7DCh */ case   39:  		/* bc 12, CR0_EQ, 160 */
		/* 820BD7DCh case   39:*/		if ( regs.CR[0].eq ) { return 0x820BD87C;  }
		/* 820BD7DCh case   39:*/		return 0x820BD7E0;
		  /* 820BD7E0h */ case   40:  		/* lwz R10, <#[R8 + 16]> */
		/* 820BD7E0h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000010) );
		/* 820BD7E0h case   40:*/		return 0x820BD7E4;
		  /* 820BD7E4h */ case   41:  		/* cmplwi CR6, R10, 0 */
		/* 820BD7E4h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820BD7E4h case   41:*/		return 0x820BD7E8;
		  /* 820BD7E8h */ case   42:  		/* bc 4, CR6_EQ, 148 */
		/* 820BD7E8h case   42:*/		if ( !regs.CR[6].eq ) { return 0x820BD87C;  }
		/* 820BD7E8h case   42:*/		return 0x820BD7EC;
		  /* 820BD7ECh */ case   43:  		/* lwz R5, <#[R11 + 8]> */
		/* 820BD7ECh case   43:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 820BD7ECh case   43:*/		return 0x820BD7F0;
		  /* 820BD7F0h */ case   44:  		/* mr R9, R22 */
		/* 820BD7F0h case   44:*/		regs.R9 = regs.R22;
		/* 820BD7F0h case   44:*/		return 0x820BD7F4;
		  /* 820BD7F4h */ case   45:  		/* cmplwi CR6, R5, 0 */
		/* 820BD7F4h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820BD7F4h case   45:*/		return 0x820BD7F8;
		  /* 820BD7F8h */ case   46:  		/* bc 12, CR6_EQ, 92 */
		/* 820BD7F8h case   46:*/		if ( regs.CR[6].eq ) { return 0x820BD854;  }
		/* 820BD7F8h case   46:*/		return 0x820BD7FC;
		  /* 820BD7FCh */ case   47:  		/* mr R10, R22 */
		/* 820BD7FCh case   47:*/		regs.R10 = regs.R22;
		/* 820BD7FCh case   47:*/		return 0x820BD800;
		  /* 820BD800h */ case   48:  		/* lwzx R11, <#[R7 + R10]> */
		/* 820BD800h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 820BD800h case   48:*/		return 0x820BD804;
		  /* 820BD804h */ case   49:  		/* lwz R4, <#[R11 + 4]> */
		/* 820BD804h case   49:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 820BD804h case   49:*/		return 0x820BD808;
		  /* 820BD808h */ case   50:  		/* cmplw CR6, R6, R4 */
		/* 820BD808h case   50:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R4);
		/* 820BD808h case   50:*/		return 0x820BD80C;
		  /* 820BD80Ch */ case   51:  		/* bc 4, CR6_EQ, 48 */
		/* 820BD80Ch case   51:*/		if ( !regs.CR[6].eq ) { return 0x820BD83C;  }
		/* 820BD80Ch case   51:*/		return 0x820BD810;
		  /* 820BD810h */ case   52:  		/* lwz R4, <#[R8 + 8]> */
		/* 820BD810h case   52:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R8 + 0x00000008) );
		/* 820BD810h case   52:*/		return 0x820BD814;
		  /* 820BD814h */ case   53:  		/* lwz R3, <#[R11 + 8]> */
		/* 820BD814h case   53:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000008) );
		/* 820BD814h case   53:*/		return 0x820BD818;
		  /* 820BD818h */ case   54:  		/* cmplw CR6, R4, R3 */
		/* 820BD818h case   54:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820BD818h case   54:*/		return 0x820BD81C;
		  /* 820BD81Ch */ case   55:  		/* bc 4, CR6_EQ, 32 */
		/* 820BD81Ch case   55:*/		if ( !regs.CR[6].eq ) { return 0x820BD83C;  }
		/* 820BD81Ch case   55:*/		return 0x820BD820;
		  /* 820BD820h */ case   56:  		/* lwz R4, <#[R8 + 12]> */
		/* 820BD820h case   56:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R8 + 0x0000000C) );
		/* 820BD820h case   56:*/		return 0x820BD824;
		  /* 820BD824h */ case   57:  		/* lwz R3, <#[R11 + 12]> */
		/* 820BD824h case   57:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 820BD824h case   57:*/		return 0x820BD828;
		  /* 820BD828h */ case   58:  		/* cmplw CR6, R4, R3 */
		/* 820BD828h case   58:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R3);
		/* 820BD828h case   58:*/		return 0x820BD82C;
		  /* 820BD82Ch */ case   59:  		/* bc 4, CR6_EQ, 16 */
		/* 820BD82Ch case   59:*/		if ( !regs.CR[6].eq ) { return 0x820BD83C;  }
		/* 820BD82Ch case   59:*/		return 0x820BD830;
		  /* 820BD830h */ case   60:  		/* lwz R11, <#[R11 + 16]> */
		/* 820BD830h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820BD830h case   60:*/		return 0x820BD834;
		  /* 820BD834h */ case   61:  		/* cmplwi CR6, R11, 1 */
		/* 820BD834h case   61:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820BD834h case   61:*/		return 0x820BD838;
		  /* 820BD838h */ case   62:  		/* bc 12, CR6_EQ, 24 */
		/* 820BD838h case   62:*/		if ( regs.CR[6].eq ) { return 0x820BD850;  }
		/* 820BD838h case   62:*/		return 0x820BD83C;
	}
	return 0x820BD83C;
} // Block from 820BD740h-820BD83Ch (63 instructions)

//////////////////////////////////////////////////////
// Block at 820BD83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD83C);
		  /* 820BD83Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 820BD83Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820BD83Ch case    0:*/		return 0x820BD840;
		  /* 820BD840h */ case    1:  		/* addi R10, R10, 4 */
		/* 820BD840h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820BD840h case    1:*/		return 0x820BD844;
		  /* 820BD844h */ case    2:  		/* cmplw CR6, R9, R5 */
		/* 820BD844h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R5);
		/* 820BD844h case    2:*/		return 0x820BD848;
		  /* 820BD848h */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 820BD848h case    3:*/		if ( regs.CR[6].lt ) { return 0x820BD800;  }
		/* 820BD848h case    3:*/		return 0x820BD84C;
		  /* 820BD84Ch */ case    4:  		/* b 8 */
		/* 820BD84Ch case    4:*/		return 0x820BD854;
		/* 820BD84Ch case    4:*/		return 0x820BD850;
	}
	return 0x820BD850;
} // Block from 820BD83Ch-820BD850h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BD850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD850);
		  /* 820BD850h */ case    0:  		/* stw R9, <#[R1 + 684]> */
		/* 820BD850h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000002AC) );
		/* 820BD850h case    0:*/		return 0x820BD854;
	}
	return 0x820BD854;
} // Block from 820BD850h-820BD854h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BD854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD854);
		  /* 820BD854h */ case    0:  		/* lwz R11, <#[R14 + 8]> */
		/* 820BD854h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000008) );
		/* 820BD854h case    0:*/		return 0x820BD858;
		  /* 820BD858h */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 820BD858h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 820BD858h case    1:*/		return 0x820BD85C;
		  /* 820BD85Ch */ case    2:  		/* cmplw CR6, R9, R11 */
		/* 820BD85Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 820BD85Ch case    2:*/		return 0x820BD860;
		  /* 820BD860h */ case    3:  		/* bc 4, CR6_EQ, 28 */
		/* 820BD860h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820BD87C;  }
		/* 820BD860h case    3:*/		return 0x820BD864;
		  /* 820BD864h */ case    4:  		/* lis R11, -32255 */
		/* 820BD864h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BD864h case    4:*/		return 0x820BD868;
		  /* 820BD868h */ case    5:  		/* li R5, 3509 */
		/* 820BD868h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xDB5);
		/* 820BD868h case    5:*/		return 0x820BD86C;
		  /* 820BD86Ch */ case    6:  		/* addi R6, R11, 8936 */
		/* 820BD86Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x22E8);
		/* 820BD86Ch case    6:*/		return 0x820BD870;
		  /* 820BD870h */ case    7:  		/* mr R4, R16 */
		/* 820BD870h case    7:*/		regs.R4 = regs.R16;
		/* 820BD870h case    7:*/		return 0x820BD874;
		  /* 820BD874h */ case    8:  		/* mr R3, R14 */
		/* 820BD874h case    8:*/		regs.R3 = regs.R14;
		/* 820BD874h case    8:*/		return 0x820BD878;
		  /* 820BD878h */ case    9:  		/* bl -52728 */
		/* 820BD878h case    9:*/		regs.LR = 0x820BD87C; return 0x820B0A80;
		/* 820BD878h case    9:*/		return 0x820BD87C;
	}
	return 0x820BD87C;
} // Block from 820BD854h-820BD87Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BD87Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD87C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD87C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD87C);
		  /* 820BD87Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820BD87Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD87Ch case    0:*/		return 0x820BD880;
		  /* 820BD880h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD880h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BD8A0;  }
		/* 820BD880h case    1:*/		return 0x820BD884;
		  /* 820BD884h */ case    2:  		/* addi R11, R15, -4 */
		/* 820BD884h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BD884h case    2:*/		return 0x820BD888;
		  /* 820BD888h */ case    3:  		/* li R10, -1 */
		/* 820BD888h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BD888h case    3:*/		return 0x820BD88C;
		  /* 820BD88Ch */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 820BD88Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD88Ch case    4:*/		return 0x820BD890;
		  /* 820BD890h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD890h case    5:*/		if ( regs.CR[0].eq ) { return 0x820BD8A0;  }
		/* 820BD890h case    5:*/		return 0x820BD894;
		  /* 820BD894h */ case    6:  		/* mtspr CTR, R30 */
		/* 820BD894h case    6:*/		regs.CTR = regs.R30;
		/* 820BD894h case    6:*/		return 0x820BD898;
		  /* 820BD898h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD898h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD898h case    7:*/		return 0x820BD89C;
		  /* 820BD89Ch */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820BD89Ch case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD898;  }
		/* 820BD89Ch case    8:*/		return 0x820BD8A0;
	}
	return 0x820BD8A0;
} // Block from 820BD87Ch-820BD8A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BD8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD8A0);
		  /* 820BD8A0h */ case    0:  		/* lis R5, 24576 */
		/* 820BD8A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x6000);
		/* 820BD8A0h case    0:*/		return 0x820BD8A4;
		  /* 820BD8A4h */ case    1:  		/* addi R8, R1, 680 */
		/* 820BD8A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x2A8);
		/* 820BD8A4h case    1:*/		return 0x820BD8A8;
		  /* 820BD8A8h */ case    2:  		/* addi R7, R1, 672 */
		/* 820BD8A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2A0);
		/* 820BD8A8h case    2:*/		return 0x820BD8AC;
		  /* 820BD8ACh */ case    3:  		/* ori R5, R5, 2 */
		/* 820BD8ACh case    3:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x2);
		/* 820BD8ACh case    3:*/		return 0x820BD8B0;
		  /* 820BD8B0h */ case    4:  		/* b -388 */
		/* 820BD8B0h case    4:*/		return 0x820BD72C;
		/* 820BD8B0h case    4:*/		return 0x820BD8B4;
		  /* 820BD8B4h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD8B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD8B4h case    5:*/		return 0x820BD8B8;
		  /* 820BD8B8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BD8B8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD8B8h case    6:*/		return 0x820BD8BC;
		  /* 820BD8BCh */ case    7:  		/* bc 12, CR6_EQ, 2836 */
		/* 820BD8BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD8BCh case    7:*/		return 0x820BD8C0;
		  /* 820BD8C0h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BD8C0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BD8C0h case    8:*/		return 0x820BD8C4;
		  /* 820BD8C4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BD8C4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD8C4h case    9:*/		return 0x820BD8C8;
		  /* 820BD8C8h */ case   10:  		/* bc 12, CR6_EQ, 2824 */
		/* 820BD8C8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD8C8h case   10:*/		return 0x820BD8CC;
		  /* 820BD8CCh */ case   11:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BD8CCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BD8CCh case   11:*/		return 0x820BD8D0;
		  /* 820BD8D0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820BD8D0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD8D0h case   12:*/		return 0x820BD8D4;
		  /* 820BD8D4h */ case   13:  		/* bc 12, CR6_EQ, 2812 */
		/* 820BD8D4h case   13:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD8D4h case   13:*/		return 0x820BD8D8;
		  /* 820BD8D8h */ case   14:  		/* lwz R11, <#[R1 + 140]> */
		/* 820BD8D8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820BD8D8h case   14:*/		return 0x820BD8DC;
		  /* 820BD8DCh */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 820BD8DCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD8DCh case   15:*/		return 0x820BD8E0;
		  /* 820BD8E0h */ case   16:  		/* bc 12, CR6_EQ, 2800 */
		/* 820BD8E0h case   16:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD8E0h case   16:*/		return 0x820BD8E4;
		  /* 820BD8E4h */ case   17:  		/* cmplwi CR6, R15, 0 */
		/* 820BD8E4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BD8E4h case   17:*/		return 0x820BD8E8;
		  /* 820BD8E8h */ case   18:  		/* bc 12, CR6_EQ, -20252 */
		/* 820BD8E8h case   18:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BD8E8h case   18:*/		return 0x820BD8EC;
		  /* 820BD8ECh */ case   19:  		/* li R10, 2 */
		/* 820BD8ECh case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820BD8ECh case   19:*/		return 0x820BD8F0;
		  /* 820BD8F0h */ case   20:  		/* lwz R9, <#[R1 + 152]> */
		/* 820BD8F0h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000098) );
		/* 820BD8F0h case   20:*/		return 0x820BD8F4;
		  /* 820BD8F4h */ case   21:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BD8F4h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BD8F4h case   21:*/		return 0x820BD8F8;
		  /* 820BD8F8h */ case   22:  		/* addi R11, R1, 1428 */
		/* 820BD8F8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x594);
		/* 820BD8F8h case   22:*/		return 0x820BD8FC;
		  /* 820BD8FCh */ case   23:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BD8FCh case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BD8FCh case   23:*/		return 0x820BD900;
		  /* 820BD900h */ case   24:  		/* mtspr CTR, R10 */
		/* 820BD900h case   24:*/		regs.CTR = regs.R10;
		/* 820BD900h case   24:*/		return 0x820BD904;
		  /* 820BD904h */ case   25:  		/* lwz R10, <#[R1 + 156]> */
		/* 820BD904h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000009C) );
		/* 820BD904h case   25:*/		return 0x820BD908;
		  /* 820BD908h */ case   26:  		/* lwz R6, <#[R7]> */
		/* 820BD908h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 820BD908h case   26:*/		return 0x820BD90C;
		  /* 820BD90Ch */ case   27:  		/* stw R6, <#[R11 - 20]> */
		/* 820BD90Ch case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0xFFFFFFEC) );
		/* 820BD90Ch case   27:*/		return 0x820BD910;
		  /* 820BD910h */ case   28:  		/* lwz R6, <#[R8]> */
		/* 820BD910h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000000) );
		/* 820BD910h case   28:*/		return 0x820BD914;
		  /* 820BD914h */ case   29:  		/* stw R6, <#[R11 - 12]> */
		/* 820BD914h case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0xFFFFFFF4) );
		/* 820BD914h case   29:*/		return 0x820BD918;
		  /* 820BD918h */ case   30:  		/* lwz R6, <#[R9]> */
		/* 820BD918h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 820BD918h case   30:*/		return 0x820BD91C;
		  /* 820BD91Ch */ case   31:  		/* stw R6, <#[R11 - 4]> */
		/* 820BD91Ch case   31:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820BD91Ch case   31:*/		return 0x820BD920;
		  /* 820BD920h */ case   32:  		/* lwz R6, <#[R10]> */
		/* 820BD920h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 820BD920h case   32:*/		return 0x820BD924;
		  /* 820BD924h */ case   33:  		/* stwu R6, <#[R11 + 4]> */
		/* 820BD924h case   33:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD924h case   33:*/		return 0x820BD928;
		  /* 820BD928h */ case   34:  		/* bc 16, CR0_LT, -32 */
		/* 820BD928h case   34:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD908;  }
		/* 820BD928h case   34:*/		return 0x820BD92C;
		  /* 820BD92Ch */ case   35:  		/* cmplwi CR6, R30, 0 */
		/* 820BD92Ch case   35:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD92Ch case   35:*/		return 0x820BD930;
		  /* 820BD930h */ case   36:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD930h case   36:*/		if ( regs.CR[6].eq ) { return 0x820BD950;  }
		/* 820BD930h case   36:*/		return 0x820BD934;
		  /* 820BD934h */ case   37:  		/* addi R11, R15, -4 */
		/* 820BD934h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BD934h case   37:*/		return 0x820BD938;
		  /* 820BD938h */ case   38:  		/* li R10, -1 */
		/* 820BD938h case   38:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BD938h case   38:*/		return 0x820BD93C;
		  /* 820BD93Ch */ case   39:  		/* cmplwi CR0, R30, 0 */
		/* 820BD93Ch case   39:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD93Ch case   39:*/		return 0x820BD940;
		  /* 820BD940h */ case   40:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD940h case   40:*/		if ( regs.CR[0].eq ) { return 0x820BD950;  }
		/* 820BD940h case   40:*/		return 0x820BD944;
		  /* 820BD944h */ case   41:  		/* mtspr CTR, R30 */
		/* 820BD944h case   41:*/		regs.CTR = regs.R30;
		/* 820BD944h case   41:*/		return 0x820BD948;
		  /* 820BD948h */ case   42:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD948h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD948h case   42:*/		return 0x820BD94C;
		  /* 820BD94Ch */ case   43:  		/* bc 16, CR0_LT, -4 */
		/* 820BD94Ch case   43:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD948;  }
		/* 820BD94Ch case   43:*/		return 0x820BD950;
	}
	return 0x820BD950;
} // Block from 820BD8A0h-820BD950h (44 instructions)

//////////////////////////////////////////////////////
// Block at 820BD950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD950);
		  /* 820BD950h */ case    0:  		/* lis R5, 24592 */
		/* 820BD950h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x6010);
		/* 820BD950h case    0:*/		return 0x820BD954;
		  /* 820BD954h */ case    1:  		/* addi R8, R1, 1416 */
		/* 820BD954h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x588);
		/* 820BD954h case    1:*/		return 0x820BD958;
		  /* 820BD958h */ case    2:  		/* addi R7, R1, 1408 */
		/* 820BD958h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x580);
		/* 820BD958h case    2:*/		return 0x820BD95C;
		  /* 820BD95Ch */ case    3:  		/* b -176 */
		/* 820BD95Ch case    3:*/		return 0x820BD8AC;
		/* 820BD95Ch case    3:*/		return 0x820BD960;
		  /* 820BD960h */ case    4:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD960h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD960h case    4:*/		return 0x820BD964;
		  /* 820BD964h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820BD964h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD964h case    5:*/		return 0x820BD968;
		  /* 820BD968h */ case    6:  		/* bc 12, CR6_EQ, 2664 */
		/* 820BD968h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD968h case    6:*/		return 0x820BD96C;
		  /* 820BD96Ch */ case    7:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BD96Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BD96Ch case    7:*/		return 0x820BD970;
		  /* 820BD970h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BD970h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD970h case    8:*/		return 0x820BD974;
		  /* 820BD974h */ case    9:  		/* bc 12, CR6_EQ, 2652 */
		/* 820BD974h case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD974h case    9:*/		return 0x820BD978;
		  /* 820BD978h */ case   10:  		/* cmplwi CR6, R15, 0 */
		/* 820BD978h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BD978h case   10:*/		return 0x820BD97C;
		  /* 820BD97Ch */ case   11:  		/* bc 12, CR6_EQ, -20400 */
		/* 820BD97Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BD97Ch case   11:*/		return 0x820BD980;
		  /* 820BD980h */ case   12:  		/* li R11, 4 */
		/* 820BD980h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BD980h case   12:*/		return 0x820BD984;
		  /* 820BD984h */ case   13:  		/* addi R10, R1, 1180 */
		/* 820BD984h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x49C);
		/* 820BD984h case   13:*/		return 0x820BD988;
		  /* 820BD988h */ case   14:  		/* mtspr CTR, R11 */
		/* 820BD988h case   14:*/		regs.CTR = regs.R11;
		/* 820BD988h case   14:*/		return 0x820BD98C;
		  /* 820BD98Ch */ case   15:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BD98Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BD98Ch case   15:*/		return 0x820BD990;
		  /* 820BD990h */ case   16:  		/* lwz R9, <#[R11]> */
		/* 820BD990h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BD990h case   16:*/		return 0x820BD994;
		  /* 820BD994h */ case   17:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BD994h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BD994h case   17:*/		return 0x820BD998;
		  /* 820BD998h */ case   18:  		/* bc 16, CR0_LT, -8 */
		/* 820BD998h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD990;  }
		/* 820BD998h case   18:*/		return 0x820BD99C;
		  /* 820BD99Ch */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 820BD99Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BD99Ch case   19:*/		return 0x820BD9A0;
		  /* 820BD9A0h */ case   20:  		/* bc 12, CR6_EQ, 32 */
		/* 820BD9A0h case   20:*/		if ( regs.CR[6].eq ) { return 0x820BD9C0;  }
		/* 820BD9A0h case   20:*/		return 0x820BD9A4;
		  /* 820BD9A4h */ case   21:  		/* addi R11, R15, -4 */
		/* 820BD9A4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BD9A4h case   21:*/		return 0x820BD9A8;
		  /* 820BD9A8h */ case   22:  		/* li R10, -1 */
		/* 820BD9A8h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BD9A8h case   22:*/		return 0x820BD9AC;
		  /* 820BD9ACh */ case   23:  		/* cmplwi CR0, R30, 0 */
		/* 820BD9ACh case   23:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BD9ACh case   23:*/		return 0x820BD9B0;
		  /* 820BD9B0h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 820BD9B0h case   24:*/		if ( regs.CR[0].eq ) { return 0x820BD9C0;  }
		/* 820BD9B0h case   24:*/		return 0x820BD9B4;
		  /* 820BD9B4h */ case   25:  		/* mtspr CTR, R30 */
		/* 820BD9B4h case   25:*/		regs.CTR = regs.R30;
		/* 820BD9B4h case   25:*/		return 0x820BD9B8;
		  /* 820BD9B8h */ case   26:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BD9B8h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BD9B8h case   26:*/		return 0x820BD9BC;
		  /* 820BD9BCh */ case   27:  		/* bc 16, CR0_LT, -4 */
		/* 820BD9BCh case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BD9B8;  }
		/* 820BD9BCh case   27:*/		return 0x820BD9C0;
	}
	return 0x820BD9C0;
} // Block from 820BD950h-820BD9C0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BD9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BD9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BD9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BD9C0);
		  /* 820BD9C0h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BD9C0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BD9C0h case    0:*/		return 0x820BD9C4;
		  /* 820BD9C4h */ case    1:  		/* lis R5, 24608 */
		/* 820BD9C4h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6020);
		/* 820BD9C4h case    1:*/		return 0x820BD9C8;
		  /* 820BD9C8h */ case    2:  		/* li R9, 0 */
		/* 820BD9C8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BD9C8h case    2:*/		return 0x820BD9CC;
		  /* 820BD9CCh */ case    3:  		/* addi R7, R1, 1184 */
		/* 820BD9CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x4A0);
		/* 820BD9CCh case    3:*/		return 0x820BD9D0;
		  /* 820BD9D0h */ case    4:  		/* b 2524 */
		/* 820BD9D0h case    4:*/		return 0x820BE3AC;
		/* 820BD9D0h case    4:*/		return 0x820BD9D4;
		  /* 820BD9D4h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BD9D4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BD9D4h case    5:*/		return 0x820BD9D8;
		  /* 820BD9D8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BD9D8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD9D8h case    6:*/		return 0x820BD9DC;
		  /* 820BD9DCh */ case    7:  		/* bc 12, CR6_EQ, 2548 */
		/* 820BD9DCh case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD9DCh case    7:*/		return 0x820BD9E0;
		  /* 820BD9E0h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BD9E0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BD9E0h case    8:*/		return 0x820BD9E4;
		  /* 820BD9E4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BD9E4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BD9E4h case    9:*/		return 0x820BD9E8;
		  /* 820BD9E8h */ case   10:  		/* bc 12, CR6_EQ, 2536 */
		/* 820BD9E8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BD9E8h case   10:*/		return 0x820BD9EC;
		  /* 820BD9ECh */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BD9ECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BD9ECh case   11:*/		return 0x820BD9F0;
		  /* 820BD9F0h */ case   12:  		/* bc 12, CR6_EQ, -20516 */
		/* 820BD9F0h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BD9F0h case   12:*/		return 0x820BD9F4;
		  /* 820BD9F4h */ case   13:  		/* li R11, 4 */
		/* 820BD9F4h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BD9F4h case   13:*/		return 0x820BD9F8;
		  /* 820BD9F8h */ case   14:  		/* addi R10, R1, 1196 */
		/* 820BD9F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x4AC);
		/* 820BD9F8h case   14:*/		return 0x820BD9FC;
		  /* 820BD9FCh */ case   15:  		/* mtspr CTR, R11 */
		/* 820BD9FCh case   15:*/		regs.CTR = regs.R11;
		/* 820BD9FCh case   15:*/		return 0x820BDA00;
		  /* 820BDA00h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDA00h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDA00h case   16:*/		return 0x820BDA04;
		  /* 820BDA04h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BDA04h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDA04h case   17:*/		return 0x820BDA08;
		  /* 820BDA08h */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDA08h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDA08h case   18:*/		return 0x820BDA0C;
		  /* 820BDA0Ch */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDA0Ch case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDA04;  }
		/* 820BDA0Ch case   19:*/		return 0x820BDA10;
		  /* 820BDA10h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDA10h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDA10h case   20:*/		return 0x820BDA14;
		  /* 820BDA14h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDA14h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDA34;  }
		/* 820BDA14h case   21:*/		return 0x820BDA18;
		  /* 820BDA18h */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDA18h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDA18h case   22:*/		return 0x820BDA1C;
		  /* 820BDA1Ch */ case   23:  		/* li R10, -1 */
		/* 820BDA1Ch case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDA1Ch case   23:*/		return 0x820BDA20;
		  /* 820BDA20h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDA20h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDA20h case   24:*/		return 0x820BDA24;
		  /* 820BDA24h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDA24h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDA34;  }
		/* 820BDA24h case   25:*/		return 0x820BDA28;
		  /* 820BDA28h */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDA28h case   26:*/		regs.CTR = regs.R30;
		/* 820BDA28h case   26:*/		return 0x820BDA2C;
		  /* 820BDA2Ch */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDA2Ch case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDA2Ch case   27:*/		return 0x820BDA30;
		  /* 820BDA30h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDA30h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDA2C;  }
		/* 820BDA30h case   28:*/		return 0x820BDA34;
	}
	return 0x820BDA34;
} // Block from 820BD9C0h-820BDA34h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDA34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDA34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDA34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDA34);
		  /* 820BDA34h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDA34h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDA34h case    0:*/		return 0x820BDA38;
		  /* 820BDA38h */ case    1:  		/* lis R5, 24624 */
		/* 820BDA38h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6030);
		/* 820BDA38h case    1:*/		return 0x820BDA3C;
		  /* 820BDA3Ch */ case    2:  		/* li R9, 0 */
		/* 820BDA3Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDA3Ch case    2:*/		return 0x820BDA40;
		  /* 820BDA40h */ case    3:  		/* addi R7, R1, 1200 */
		/* 820BDA40h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x4B0);
		/* 820BDA40h case    3:*/		return 0x820BDA44;
		  /* 820BDA44h */ case    4:  		/* b 2408 */
		/* 820BDA44h case    4:*/		return 0x820BE3AC;
		/* 820BDA44h case    4:*/		return 0x820BDA48;
		  /* 820BDA48h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDA48h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDA48h case    5:*/		return 0x820BDA4C;
		  /* 820BDA4Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDA4Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDA4Ch case    6:*/		return 0x820BDA50;
		  /* 820BDA50h */ case    7:  		/* bc 12, CR6_EQ, 2432 */
		/* 820BDA50h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDA50h case    7:*/		return 0x820BDA54;
		  /* 820BDA54h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDA54h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDA54h case    8:*/		return 0x820BDA58;
		  /* 820BDA58h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDA58h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDA58h case    9:*/		return 0x820BDA5C;
		  /* 820BDA5Ch */ case   10:  		/* bc 12, CR6_EQ, 2420 */
		/* 820BDA5Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDA5Ch case   10:*/		return 0x820BDA60;
		  /* 820BDA60h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BDA60h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDA60h case   11:*/		return 0x820BDA64;
		  /* 820BDA64h */ case   12:  		/* bc 12, CR6_EQ, -20632 */
		/* 820BDA64h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDA64h case   12:*/		return 0x820BDA68;
		  /* 820BDA68h */ case   13:  		/* li R11, 4 */
		/* 820BDA68h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BDA68h case   13:*/		return 0x820BDA6C;
		  /* 820BDA6Ch */ case   14:  		/* addi R10, R1, 1340 */
		/* 820BDA6Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x53C);
		/* 820BDA6Ch case   14:*/		return 0x820BDA70;
		  /* 820BDA70h */ case   15:  		/* mtspr CTR, R11 */
		/* 820BDA70h case   15:*/		regs.CTR = regs.R11;
		/* 820BDA70h case   15:*/		return 0x820BDA74;
		  /* 820BDA74h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDA74h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDA74h case   16:*/		return 0x820BDA78;
		  /* 820BDA78h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BDA78h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDA78h case   17:*/		return 0x820BDA7C;
		  /* 820BDA7Ch */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDA7Ch case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDA7Ch case   18:*/		return 0x820BDA80;
		  /* 820BDA80h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDA80h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDA78;  }
		/* 820BDA80h case   19:*/		return 0x820BDA84;
		  /* 820BDA84h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDA84h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDA84h case   20:*/		return 0x820BDA88;
		  /* 820BDA88h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDA88h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDAA8;  }
		/* 820BDA88h case   21:*/		return 0x820BDA8C;
		  /* 820BDA8Ch */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDA8Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDA8Ch case   22:*/		return 0x820BDA90;
		  /* 820BDA90h */ case   23:  		/* li R10, -1 */
		/* 820BDA90h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDA90h case   23:*/		return 0x820BDA94;
		  /* 820BDA94h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDA94h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDA94h case   24:*/		return 0x820BDA98;
		  /* 820BDA98h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDA98h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDAA8;  }
		/* 820BDA98h case   25:*/		return 0x820BDA9C;
		  /* 820BDA9Ch */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDA9Ch case   26:*/		regs.CTR = regs.R30;
		/* 820BDA9Ch case   26:*/		return 0x820BDAA0;
		  /* 820BDAA0h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDAA0h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDAA0h case   27:*/		return 0x820BDAA4;
		  /* 820BDAA4h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDAA4h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDAA0;  }
		/* 820BDAA4h case   28:*/		return 0x820BDAA8;
	}
	return 0x820BDAA8;
} // Block from 820BDA34h-820BDAA8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDAA8);
		  /* 820BDAA8h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDAA8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDAA8h case    0:*/		return 0x820BDAAC;
		  /* 820BDAACh */ case    1:  		/* lis R5, 24640 */
		/* 820BDAACh case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6040);
		/* 820BDAACh case    1:*/		return 0x820BDAB0;
		  /* 820BDAB0h */ case    2:  		/* li R9, 0 */
		/* 820BDAB0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDAB0h case    2:*/		return 0x820BDAB4;
		  /* 820BDAB4h */ case    3:  		/* addi R7, R1, 1344 */
		/* 820BDAB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x540);
		/* 820BDAB4h case    3:*/		return 0x820BDAB8;
		  /* 820BDAB8h */ case    4:  		/* b 2292 */
		/* 820BDAB8h case    4:*/		return 0x820BE3AC;
		/* 820BDAB8h case    4:*/		return 0x820BDABC;
		  /* 820BDABCh */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDABCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDABCh case    5:*/		return 0x820BDAC0;
		  /* 820BDAC0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDAC0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDAC0h case    6:*/		return 0x820BDAC4;
		  /* 820BDAC4h */ case    7:  		/* bc 12, CR6_EQ, 2316 */
		/* 820BDAC4h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDAC4h case    7:*/		return 0x820BDAC8;
		  /* 820BDAC8h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDAC8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDAC8h case    8:*/		return 0x820BDACC;
		  /* 820BDACCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDACCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDACCh case    9:*/		return 0x820BDAD0;
		  /* 820BDAD0h */ case   10:  		/* bc 12, CR6_EQ, 2304 */
		/* 820BDAD0h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDAD0h case   10:*/		return 0x820BDAD4;
		  /* 820BDAD4h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BDAD4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDAD4h case   11:*/		return 0x820BDAD8;
		  /* 820BDAD8h */ case   12:  		/* bc 12, CR6_EQ, -20748 */
		/* 820BDAD8h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDAD8h case   12:*/		return 0x820BDADC;
		  /* 820BDADCh */ case   13:  		/* li R10, 2 */
		/* 820BDADCh case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820BDADCh case   13:*/		return 0x820BDAE0;
		  /* 820BDAE0h */ case   14:  		/* addi R11, R1, 764 */
		/* 820BDAE0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x2FC);
		/* 820BDAE0h case   14:*/		return 0x820BDAE4;
		  /* 820BDAE4h */ case   15:  		/* mtspr CTR, R10 */
		/* 820BDAE4h case   15:*/		regs.CTR = regs.R10;
		/* 820BDAE4h case   15:*/		return 0x820BDAE8;
		  /* 820BDAE8h */ case   16:  		/* lwz R10, <#[R1 + 144]> */
		/* 820BDAE8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDAE8h case   16:*/		return 0x820BDAEC;
		  /* 820BDAECh */ case   17:  		/* lwz R9, <#[R10]> */
		/* 820BDAECh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820BDAECh case   17:*/		return 0x820BDAF0;
		  /* 820BDAF0h */ case   18:  		/* stwu R9, <#[R11 + 4]> */
		/* 820BDAF0h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDAF0h case   18:*/		return 0x820BDAF4;
		  /* 820BDAF4h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDAF4h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDAEC;  }
		/* 820BDAF4h case   19:*/		return 0x820BDAF8;
		  /* 820BDAF8h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDAF8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDAF8h case   20:*/		return 0x820BDAFC;
		  /* 820BDAFCh */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDAFCh case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDB1C;  }
		/* 820BDAFCh case   21:*/		return 0x820BDB00;
		  /* 820BDB00h */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDB00h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDB00h case   22:*/		return 0x820BDB04;
		  /* 820BDB04h */ case   23:  		/* li R10, -1 */
		/* 820BDB04h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDB04h case   23:*/		return 0x820BDB08;
		  /* 820BDB08h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDB08h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDB08h case   24:*/		return 0x820BDB0C;
		  /* 820BDB0Ch */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDB0Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDB1C;  }
		/* 820BDB0Ch case   25:*/		return 0x820BDB10;
		  /* 820BDB10h */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDB10h case   26:*/		regs.CTR = regs.R30;
		/* 820BDB10h case   26:*/		return 0x820BDB14;
		  /* 820BDB14h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDB14h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDB14h case   27:*/		return 0x820BDB18;
		  /* 820BDB18h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDB18h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDB14;  }
		/* 820BDB18h case   28:*/		return 0x820BDB1C;
	}
	return 0x820BDB1C;
} // Block from 820BDAA8h-820BDB1Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDB1C);
		  /* 820BDB1Ch */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDB1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDB1Ch case    0:*/		return 0x820BDB20;
		  /* 820BDB20h */ case    1:  		/* lis R5, 24656 */
		/* 820BDB20h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6050);
		/* 820BDB20h case    1:*/		return 0x820BDB24;
		  /* 820BDB24h */ case    2:  		/* addi R7, R1, 768 */
		/* 820BDB24h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x300);
		/* 820BDB24h case    2:*/		return 0x820BDB28;
		  /* 820BDB28h */ case    3:  		/* b -636 */
		/* 820BDB28h case    3:*/		return 0x820BD8AC;
		/* 820BDB28h case    3:*/		return 0x820BDB2C;
		  /* 820BDB2Ch */ case    4:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDB2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDB2Ch case    4:*/		return 0x820BDB30;
		  /* 820BDB30h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820BDB30h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDB30h case    5:*/		return 0x820BDB34;
		  /* 820BDB34h */ case    6:  		/* bc 12, CR6_EQ, 2204 */
		/* 820BDB34h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDB34h case    6:*/		return 0x820BDB38;
		  /* 820BDB38h */ case    7:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDB38h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDB38h case    7:*/		return 0x820BDB3C;
		  /* 820BDB3Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BDB3Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDB3Ch case    8:*/		return 0x820BDB40;
		  /* 820BDB40h */ case    9:  		/* bc 12, CR6_EQ, 2192 */
		/* 820BDB40h case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDB40h case    9:*/		return 0x820BDB44;
		  /* 820BDB44h */ case   10:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BDB44h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BDB44h case   10:*/		return 0x820BDB48;
		  /* 820BDB48h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 820BDB48h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDB48h case   11:*/		return 0x820BDB4C;
		  /* 820BDB4Ch */ case   12:  		/* bc 12, CR6_EQ, 2180 */
		/* 820BDB4Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDB4Ch case   12:*/		return 0x820BDB50;
		  /* 820BDB50h */ case   13:  		/* lwz R11, <#[R1 + 140]> */
		/* 820BDB50h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820BDB50h case   13:*/		return 0x820BDB54;
		  /* 820BDB54h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 820BDB54h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDB54h case   14:*/		return 0x820BDB58;
		  /* 820BDB58h */ case   15:  		/* bc 12, CR6_EQ, 2168 */
		/* 820BDB58h case   15:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDB58h case   15:*/		return 0x820BDB5C;
		  /* 820BDB5Ch */ case   16:  		/* cmplwi CR6, R15, 0 */
		/* 820BDB5Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDB5Ch case   16:*/		return 0x820BDB60;
		  /* 820BDB60h */ case   17:  		/* bc 12, CR6_EQ, -20884 */
		/* 820BDB60h case   17:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDB60h case   17:*/		return 0x820BDB64;
		  /* 820BDB64h */ case   18:  		/* li R10, 2 */
		/* 820BDB64h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820BDB64h case   18:*/		return 0x820BDB68;
		  /* 820BDB68h */ case   19:  		/* lwz R11, <#[R1 + 148]> */
		/* 820BDB68h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDB68h case   19:*/		return 0x820BDB6C;
		  /* 820BDB6Ch */ case   20:  		/* addi R9, R1, 864 */
		/* 820BDB6Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x360);
		/* 820BDB6Ch case   20:*/		return 0x820BDB70;
		  /* 820BDB70h */ case   21:  		/* lwz R8, <#[R1 + 152]> */
		/* 820BDB70h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000098) );
		/* 820BDB70h case   21:*/		return 0x820BDB74;
		  /* 820BDB74h */ case   22:  		/* addi R7, R1, 872 */
		/* 820BDB74h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x368);
		/* 820BDB74h case   22:*/		return 0x820BDB78;
		  /* 820BDB78h */ case   23:  		/* lwz R6, <#[R1 + 156]> */
		/* 820BDB78h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000009C) );
		/* 820BDB78h case   23:*/		return 0x820BDB7C;
		  /* 820BDB7Ch */ case   24:  		/* addi R5, R1, 880 */
		/* 820BDB7Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x370);
		/* 820BDB7Ch case   24:*/		return 0x820BDB80;
		  /* 820BDB80h */ case   25:  		/* addi R4, R1, 888 */
		/* 820BDB80h case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x378);
		/* 820BDB80h case   25:*/		return 0x820BDB84;
		  /* 820BDB84h */ case   26:  		/* mtspr CTR, R10 */
		/* 820BDB84h case   26:*/		regs.CTR = regs.R10;
		/* 820BDB84h case   26:*/		return 0x820BDB88;
		  /* 820BDB88h */ case   27:  		/* subf R10, R11, R9 */
		/* 820BDB88h case   27:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R9);
		/* 820BDB88h case   27:*/		return 0x820BDB8C;
		  /* 820BDB8Ch */ case   28:  		/* subf R9, R11, R7 */
		/* 820BDB8Ch case   28:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R7);
		/* 820BDB8Ch case   28:*/		return 0x820BDB90;
		  /* 820BDB90h */ case   29:  		/* subf R7, R11, R5 */
		/* 820BDB90h case   29:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R11,regs.R5);
		/* 820BDB90h case   29:*/		return 0x820BDB94;
		  /* 820BDB94h */ case   30:  		/* subf R5, R11, R4 */
		/* 820BDB94h case   30:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R11,regs.R4);
		/* 820BDB94h case   30:*/		return 0x820BDB98;
		  /* 820BDB98h */ case   31:  		/* lwz R4, <#[R1 + 144]> */
		/* 820BDB98h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDB98h case   31:*/		return 0x820BDB9C;
		  /* 820BDB9Ch */ case   32:  		/* subf R8, R11, R8 */
		/* 820BDB9Ch case   32:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 820BDB9Ch case   32:*/		return 0x820BDBA0;
		  /* 820BDBA0h */ case   33:  		/* subf R6, R11, R6 */
		/* 820BDBA0h case   33:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 820BDBA0h case   33:*/		return 0x820BDBA4;
		  /* 820BDBA4h */ case   34:  		/* lwz R3, <#[R4]> */
		/* 820BDBA4h case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 820BDBA4h case   34:*/		return 0x820BDBA8;
		  /* 820BDBA8h */ case   35:  		/* stwx R3, <#[R10 + R11]> */
		/* 820BDBA8h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BDBA8h case   35:*/		return 0x820BDBAC;
		  /* 820BDBACh */ case   36:  		/* lwz R3, <#[R11]> */
		/* 820BDBACh case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDBACh case   36:*/		return 0x820BDBB0;
		  /* 820BDBB0h */ case   37:  		/* stwx R3, <#[R9 + R11]> */
		/* 820BDBB0h case   37:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820BDBB0h case   37:*/		return 0x820BDBB4;
		  /* 820BDBB4h */ case   38:  		/* lwzx R3, <#[R8 + R11]> */
		/* 820BDBB4h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820BDBB4h case   38:*/		return 0x820BDBB8;
		  /* 820BDBB8h */ case   39:  		/* stwx R3, <#[R7 + R11]> */
		/* 820BDBB8h case   39:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820BDBB8h case   39:*/		return 0x820BDBBC;
		  /* 820BDBBCh */ case   40:  		/* lwzx R3, <#[R6 + R11]> */
		/* 820BDBBCh case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 820BDBBCh case   40:*/		return 0x820BDBC0;
		  /* 820BDBC0h */ case   41:  		/* stwx R3, <#[R5 + R11]> */
		/* 820BDBC0h case   41:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 820BDBC0h case   41:*/		return 0x820BDBC4;
		  /* 820BDBC4h */ case   42:  		/* addi R11, R11, 4 */
		/* 820BDBC4h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BDBC4h case   42:*/		return 0x820BDBC8;
		  /* 820BDBC8h */ case   43:  		/* bc 16, CR0_LT, -36 */
		/* 820BDBC8h case   43:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDBA4;  }
		/* 820BDBC8h case   43:*/		return 0x820BDBCC;
		  /* 820BDBCCh */ case   44:  		/* cmplwi CR6, R30, 0 */
		/* 820BDBCCh case   44:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDBCCh case   44:*/		return 0x820BDBD0;
		  /* 820BDBD0h */ case   45:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDBD0h case   45:*/		if ( regs.CR[6].eq ) { return 0x820BDBF0;  }
		/* 820BDBD0h case   45:*/		return 0x820BDBD4;
		  /* 820BDBD4h */ case   46:  		/* addi R11, R15, -4 */
		/* 820BDBD4h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDBD4h case   46:*/		return 0x820BDBD8;
		  /* 820BDBD8h */ case   47:  		/* li R10, -1 */
		/* 820BDBD8h case   47:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDBD8h case   47:*/		return 0x820BDBDC;
		  /* 820BDBDCh */ case   48:  		/* cmplwi CR0, R30, 0 */
		/* 820BDBDCh case   48:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDBDCh case   48:*/		return 0x820BDBE0;
		  /* 820BDBE0h */ case   49:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDBE0h case   49:*/		if ( regs.CR[0].eq ) { return 0x820BDBF0;  }
		/* 820BDBE0h case   49:*/		return 0x820BDBE4;
		  /* 820BDBE4h */ case   50:  		/* mtspr CTR, R30 */
		/* 820BDBE4h case   50:*/		regs.CTR = regs.R30;
		/* 820BDBE4h case   50:*/		return 0x820BDBE8;
		  /* 820BDBE8h */ case   51:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDBE8h case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDBE8h case   51:*/		return 0x820BDBEC;
		  /* 820BDBECh */ case   52:  		/* bc 16, CR0_LT, -4 */
		/* 820BDBECh case   52:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDBE8;  }
		/* 820BDBECh case   52:*/		return 0x820BDBF0;
	}
	return 0x820BDBF0;
} // Block from 820BDB1Ch-820BDBF0h (53 instructions)

//////////////////////////////////////////////////////
// Block at 820BDBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDBF0);
		  /* 820BDBF0h */ case    0:  		/* lis R5, 24672 */
		/* 820BDBF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x6060);
		/* 820BDBF0h case    0:*/		return 0x820BDBF4;
		  /* 820BDBF4h */ case    1:  		/* addi R8, R1, 872 */
		/* 820BDBF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x368);
		/* 820BDBF4h case    1:*/		return 0x820BDBF8;
		  /* 820BDBF8h */ case    2:  		/* addi R7, R1, 864 */
		/* 820BDBF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x360);
		/* 820BDBF8h case    2:*/		return 0x820BDBFC;
		  /* 820BDBFCh */ case    3:  		/* b -848 */
		/* 820BDBFCh case    3:*/		return 0x820BD8AC;
		/* 820BDBFCh case    3:*/		return 0x820BDC00;
		  /* 820BDC00h */ case    4:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDC00h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDC00h case    4:*/		return 0x820BDC04;
		  /* 820BDC04h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820BDC04h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDC04h case    5:*/		return 0x820BDC08;
		  /* 820BDC08h */ case    6:  		/* bc 12, CR6_EQ, 1992 */
		/* 820BDC08h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDC08h case    6:*/		return 0x820BDC0C;
		  /* 820BDC0Ch */ case    7:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDC0Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDC0Ch case    7:*/		return 0x820BDC10;
		  /* 820BDC10h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BDC10h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDC10h case    8:*/		return 0x820BDC14;
		  /* 820BDC14h */ case    9:  		/* bc 12, CR6_EQ, 1980 */
		/* 820BDC14h case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDC14h case    9:*/		return 0x820BDC18;
		  /* 820BDC18h */ case   10:  		/* cmplwi CR6, R15, 0 */
		/* 820BDC18h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDC18h case   10:*/		return 0x820BDC1C;
		  /* 820BDC1Ch */ case   11:  		/* bc 12, CR6_EQ, -21072 */
		/* 820BDC1Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDC1Ch case   11:*/		return 0x820BDC20;
		  /* 820BDC20h */ case   12:  		/* li R11, 4 */
		/* 820BDC20h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BDC20h case   12:*/		return 0x820BDC24;
		  /* 820BDC24h */ case   13:  		/* addi R10, R1, 1148 */
		/* 820BDC24h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x47C);
		/* 820BDC24h case   13:*/		return 0x820BDC28;
		  /* 820BDC28h */ case   14:  		/* mtspr CTR, R11 */
		/* 820BDC28h case   14:*/		regs.CTR = regs.R11;
		/* 820BDC28h case   14:*/		return 0x820BDC2C;
		  /* 820BDC2Ch */ case   15:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDC2Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDC2Ch case   15:*/		return 0x820BDC30;
		  /* 820BDC30h */ case   16:  		/* lwz R9, <#[R11]> */
		/* 820BDC30h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDC30h case   16:*/		return 0x820BDC34;
		  /* 820BDC34h */ case   17:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDC34h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDC34h case   17:*/		return 0x820BDC38;
		  /* 820BDC38h */ case   18:  		/* bc 16, CR0_LT, -8 */
		/* 820BDC38h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDC30;  }
		/* 820BDC38h case   18:*/		return 0x820BDC3C;
		  /* 820BDC3Ch */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 820BDC3Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDC3Ch case   19:*/		return 0x820BDC40;
		  /* 820BDC40h */ case   20:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDC40h case   20:*/		if ( regs.CR[6].eq ) { return 0x820BDC60;  }
		/* 820BDC40h case   20:*/		return 0x820BDC44;
		  /* 820BDC44h */ case   21:  		/* addi R11, R15, -4 */
		/* 820BDC44h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDC44h case   21:*/		return 0x820BDC48;
		  /* 820BDC48h */ case   22:  		/* li R10, -1 */
		/* 820BDC48h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDC48h case   22:*/		return 0x820BDC4C;
		  /* 820BDC4Ch */ case   23:  		/* cmplwi CR0, R30, 0 */
		/* 820BDC4Ch case   23:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDC4Ch case   23:*/		return 0x820BDC50;
		  /* 820BDC50h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDC50h case   24:*/		if ( regs.CR[0].eq ) { return 0x820BDC60;  }
		/* 820BDC50h case   24:*/		return 0x820BDC54;
		  /* 820BDC54h */ case   25:  		/* mtspr CTR, R30 */
		/* 820BDC54h case   25:*/		regs.CTR = regs.R30;
		/* 820BDC54h case   25:*/		return 0x820BDC58;
		  /* 820BDC58h */ case   26:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDC58h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDC58h case   26:*/		return 0x820BDC5C;
		  /* 820BDC5Ch */ case   27:  		/* bc 16, CR0_LT, -4 */
		/* 820BDC5Ch case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDC58;  }
		/* 820BDC5Ch case   27:*/		return 0x820BDC60;
	}
	return 0x820BDC60;
} // Block from 820BDBF0h-820BDC60h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BDC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDC60);
		  /* 820BDC60h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDC60h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDC60h case    0:*/		return 0x820BDC64;
		  /* 820BDC64h */ case    1:  		/* lis R5, 24688 */
		/* 820BDC64h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6070);
		/* 820BDC64h case    1:*/		return 0x820BDC68;
		  /* 820BDC68h */ case    2:  		/* li R9, 0 */
		/* 820BDC68h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDC68h case    2:*/		return 0x820BDC6C;
		  /* 820BDC6Ch */ case    3:  		/* addi R7, R1, 1152 */
		/* 820BDC6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x480);
		/* 820BDC6Ch case    3:*/		return 0x820BDC70;
		  /* 820BDC70h */ case    4:  		/* b 1852 */
		/* 820BDC70h case    4:*/		return 0x820BE3AC;
		/* 820BDC70h case    4:*/		return 0x820BDC74;
		  /* 820BDC74h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDC74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDC74h case    5:*/		return 0x820BDC78;
		  /* 820BDC78h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDC78h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDC78h case    6:*/		return 0x820BDC7C;
		  /* 820BDC7Ch */ case    7:  		/* bc 12, CR6_EQ, 1876 */
		/* 820BDC7Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDC7Ch case    7:*/		return 0x820BDC80;
		  /* 820BDC80h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDC80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDC80h case    8:*/		return 0x820BDC84;
		  /* 820BDC84h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDC84h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDC84h case    9:*/		return 0x820BDC88;
		  /* 820BDC88h */ case   10:  		/* bc 12, CR6_EQ, 1864 */
		/* 820BDC88h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDC88h case   10:*/		return 0x820BDC8C;
		  /* 820BDC8Ch */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BDC8Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDC8Ch case   11:*/		return 0x820BDC90;
		  /* 820BDC90h */ case   12:  		/* bc 12, CR6_EQ, -21188 */
		/* 820BDC90h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDC90h case   12:*/		return 0x820BDC94;
		  /* 820BDC94h */ case   13:  		/* li R11, 4 */
		/* 820BDC94h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BDC94h case   13:*/		return 0x820BDC98;
		  /* 820BDC98h */ case   14:  		/* addi R10, R1, 1116 */
		/* 820BDC98h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x45C);
		/* 820BDC98h case   14:*/		return 0x820BDC9C;
		  /* 820BDC9Ch */ case   15:  		/* mtspr CTR, R11 */
		/* 820BDC9Ch case   15:*/		regs.CTR = regs.R11;
		/* 820BDC9Ch case   15:*/		return 0x820BDCA0;
		  /* 820BDCA0h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDCA0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDCA0h case   16:*/		return 0x820BDCA4;
		  /* 820BDCA4h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BDCA4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDCA4h case   17:*/		return 0x820BDCA8;
		  /* 820BDCA8h */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDCA8h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDCA8h case   18:*/		return 0x820BDCAC;
		  /* 820BDCACh */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDCACh case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDCA4;  }
		/* 820BDCACh case   19:*/		return 0x820BDCB0;
		  /* 820BDCB0h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDCB0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDCB0h case   20:*/		return 0x820BDCB4;
		  /* 820BDCB4h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDCB4h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDCD4;  }
		/* 820BDCB4h case   21:*/		return 0x820BDCB8;
		  /* 820BDCB8h */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDCB8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDCB8h case   22:*/		return 0x820BDCBC;
		  /* 820BDCBCh */ case   23:  		/* li R10, -1 */
		/* 820BDCBCh case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDCBCh case   23:*/		return 0x820BDCC0;
		  /* 820BDCC0h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDCC0h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDCC0h case   24:*/		return 0x820BDCC4;
		  /* 820BDCC4h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDCC4h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDCD4;  }
		/* 820BDCC4h case   25:*/		return 0x820BDCC8;
		  /* 820BDCC8h */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDCC8h case   26:*/		regs.CTR = regs.R30;
		/* 820BDCC8h case   26:*/		return 0x820BDCCC;
		  /* 820BDCCCh */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDCCCh case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDCCCh case   27:*/		return 0x820BDCD0;
		  /* 820BDCD0h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDCD0h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDCCC;  }
		/* 820BDCD0h case   28:*/		return 0x820BDCD4;
	}
	return 0x820BDCD4;
} // Block from 820BDC60h-820BDCD4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDCD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDCD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDCD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDCD4);
		  /* 820BDCD4h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDCD4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDCD4h case    0:*/		return 0x820BDCD8;
		  /* 820BDCD8h */ case    1:  		/* lis R5, 24704 */
		/* 820BDCD8h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6080);
		/* 820BDCD8h case    1:*/		return 0x820BDCDC;
		  /* 820BDCDCh */ case    2:  		/* li R9, 0 */
		/* 820BDCDCh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDCDCh case    2:*/		return 0x820BDCE0;
		  /* 820BDCE0h */ case    3:  		/* addi R7, R1, 1120 */
		/* 820BDCE0h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x460);
		/* 820BDCE0h case    3:*/		return 0x820BDCE4;
		  /* 820BDCE4h */ case    4:  		/* b 1736 */
		/* 820BDCE4h case    4:*/		return 0x820BE3AC;
		/* 820BDCE4h case    4:*/		return 0x820BDCE8;
		  /* 820BDCE8h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDCE8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDCE8h case    5:*/		return 0x820BDCEC;
		  /* 820BDCECh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDCECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDCECh case    6:*/		return 0x820BDCF0;
		  /* 820BDCF0h */ case    7:  		/* bc 12, CR6_EQ, 1760 */
		/* 820BDCF0h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDCF0h case    7:*/		return 0x820BDCF4;
		  /* 820BDCF4h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDCF4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDCF4h case    8:*/		return 0x820BDCF8;
		  /* 820BDCF8h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDCF8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDCF8h case    9:*/		return 0x820BDCFC;
		  /* 820BDCFCh */ case   10:  		/* bc 12, CR6_EQ, 1748 */
		/* 820BDCFCh case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDCFCh case   10:*/		return 0x820BDD00;
		  /* 820BDD00h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BDD00h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDD00h case   11:*/		return 0x820BDD04;
		  /* 820BDD04h */ case   12:  		/* bc 12, CR6_EQ, -21304 */
		/* 820BDD04h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDD04h case   12:*/		return 0x820BDD08;
		  /* 820BDD08h */ case   13:  		/* li R11, 4 */
		/* 820BDD08h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BDD08h case   13:*/		return 0x820BDD0C;
		  /* 820BDD0Ch */ case   14:  		/* addi R10, R1, 1212 */
		/* 820BDD0Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x4BC);
		/* 820BDD0Ch case   14:*/		return 0x820BDD10;
		  /* 820BDD10h */ case   15:  		/* mtspr CTR, R11 */
		/* 820BDD10h case   15:*/		regs.CTR = regs.R11;
		/* 820BDD10h case   15:*/		return 0x820BDD14;
		  /* 820BDD14h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDD14h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDD14h case   16:*/		return 0x820BDD18;
		  /* 820BDD18h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BDD18h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDD18h case   17:*/		return 0x820BDD1C;
		  /* 820BDD1Ch */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDD1Ch case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDD1Ch case   18:*/		return 0x820BDD20;
		  /* 820BDD20h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDD20h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDD18;  }
		/* 820BDD20h case   19:*/		return 0x820BDD24;
		  /* 820BDD24h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDD24h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDD24h case   20:*/		return 0x820BDD28;
		  /* 820BDD28h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDD28h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDD48;  }
		/* 820BDD28h case   21:*/		return 0x820BDD2C;
		  /* 820BDD2Ch */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDD2Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDD2Ch case   22:*/		return 0x820BDD30;
		  /* 820BDD30h */ case   23:  		/* li R10, -1 */
		/* 820BDD30h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDD30h case   23:*/		return 0x820BDD34;
		  /* 820BDD34h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDD34h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDD34h case   24:*/		return 0x820BDD38;
		  /* 820BDD38h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDD38h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDD48;  }
		/* 820BDD38h case   25:*/		return 0x820BDD3C;
		  /* 820BDD3Ch */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDD3Ch case   26:*/		regs.CTR = regs.R30;
		/* 820BDD3Ch case   26:*/		return 0x820BDD40;
		  /* 820BDD40h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDD40h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDD40h case   27:*/		return 0x820BDD44;
		  /* 820BDD44h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDD44h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDD40;  }
		/* 820BDD44h case   28:*/		return 0x820BDD48;
	}
	return 0x820BDD48;
} // Block from 820BDCD4h-820BDD48h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDD48);
		  /* 820BDD48h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDD48h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDD48h case    0:*/		return 0x820BDD4C;
		  /* 820BDD4Ch */ case    1:  		/* lis R5, 24720 */
		/* 820BDD4Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6090);
		/* 820BDD4Ch case    1:*/		return 0x820BDD50;
		  /* 820BDD50h */ case    2:  		/* li R9, 0 */
		/* 820BDD50h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDD50h case    2:*/		return 0x820BDD54;
		  /* 820BDD54h */ case    3:  		/* addi R7, R1, 1216 */
		/* 820BDD54h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x4C0);
		/* 820BDD54h case    3:*/		return 0x820BDD58;
		  /* 820BDD58h */ case    4:  		/* b 1620 */
		/* 820BDD58h case    4:*/		return 0x820BE3AC;
		/* 820BDD58h case    4:*/		return 0x820BDD5C;
		  /* 820BDD5Ch */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDD5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDD5Ch case    5:*/		return 0x820BDD60;
		  /* 820BDD60h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDD60h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDD60h case    6:*/		return 0x820BDD64;
		  /* 820BDD64h */ case    7:  		/* bc 12, CR6_EQ, 1644 */
		/* 820BDD64h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDD64h case    7:*/		return 0x820BDD68;
		  /* 820BDD68h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDD68h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDD68h case    8:*/		return 0x820BDD6C;
		  /* 820BDD6Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDD6Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDD6Ch case    9:*/		return 0x820BDD70;
		  /* 820BDD70h */ case   10:  		/* bc 12, CR6_EQ, 1632 */
		/* 820BDD70h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDD70h case   10:*/		return 0x820BDD74;
		  /* 820BDD74h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BDD74h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDD74h case   11:*/		return 0x820BDD78;
		  /* 820BDD78h */ case   12:  		/* bc 12, CR6_EQ, -21420 */
		/* 820BDD78h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDD78h case   12:*/		return 0x820BDD7C;
		  /* 820BDD7Ch */ case   13:  		/* li R10, 3 */
		/* 820BDD7Ch case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820BDD7Ch case   13:*/		return 0x820BDD80;
		  /* 820BDD80h */ case   14:  		/* addi R11, R1, 1100 */
		/* 820BDD80h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x44C);
		/* 820BDD80h case   14:*/		return 0x820BDD84;
		  /* 820BDD84h */ case   15:  		/* mtspr CTR, R10 */
		/* 820BDD84h case   15:*/		regs.CTR = regs.R10;
		/* 820BDD84h case   15:*/		return 0x820BDD88;
		  /* 820BDD88h */ case   16:  		/* lwz R10, <#[R1 + 144]> */
		/* 820BDD88h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDD88h case   16:*/		return 0x820BDD8C;
		  /* 820BDD8Ch */ case   17:  		/* lwz R9, <#[R10]> */
		/* 820BDD8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820BDD8Ch case   17:*/		return 0x820BDD90;
		  /* 820BDD90h */ case   18:  		/* stwu R9, <#[R11 + 4]> */
		/* 820BDD90h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDD90h case   18:*/		return 0x820BDD94;
		  /* 820BDD94h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDD94h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDD8C;  }
		/* 820BDD94h case   19:*/		return 0x820BDD98;
		  /* 820BDD98h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDD98h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDD98h case   20:*/		return 0x820BDD9C;
		  /* 820BDD9Ch */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDD9Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDDBC;  }
		/* 820BDD9Ch case   21:*/		return 0x820BDDA0;
		  /* 820BDDA0h */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDDA0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDDA0h case   22:*/		return 0x820BDDA4;
		  /* 820BDDA4h */ case   23:  		/* li R10, -1 */
		/* 820BDDA4h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDDA4h case   23:*/		return 0x820BDDA8;
		  /* 820BDDA8h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDDA8h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDDA8h case   24:*/		return 0x820BDDAC;
		  /* 820BDDACh */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDDACh case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDDBC;  }
		/* 820BDDACh case   25:*/		return 0x820BDDB0;
		  /* 820BDDB0h */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDDB0h case   26:*/		regs.CTR = regs.R30;
		/* 820BDDB0h case   26:*/		return 0x820BDDB4;
		  /* 820BDDB4h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDDB4h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDDB4h case   27:*/		return 0x820BDDB8;
		  /* 820BDDB8h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDDB8h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDDB4;  }
		/* 820BDDB8h case   28:*/		return 0x820BDDBC;
	}
	return 0x820BDDBC;
} // Block from 820BDD48h-820BDDBCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDDBC);
		  /* 820BDDBCh */ case    0:  		/* lis R5, 24736 */
		/* 820BDDBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x60A0);
		/* 820BDDBCh case    0:*/		return 0x820BDDC0;
		  /* 820BDDC0h */ case    1:  		/* addi R7, R1, 1104 */
		/* 820BDDC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x450);
		/* 820BDDC0h case    1:*/		return 0x820BDDC4;
		  /* 820BDDC4h */ case    2:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDDC4h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDDC4h case    2:*/		return 0x820BDDC8;
		  /* 820BDDC8h */ case    3:  		/* ori R5, R5, 3 */
		/* 820BDDC8h case    3:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3);
		/* 820BDDC8h case    3:*/		return 0x820BDDCC;
		  /* 820BDDCCh */ case    4:  		/* b -1696 */
		/* 820BDDCCh case    4:*/		return 0x820BD72C;
		/* 820BDDCCh case    4:*/		return 0x820BDDD0;
		  /* 820BDDD0h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDDD0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDDD0h case    5:*/		return 0x820BDDD4;
		  /* 820BDDD4h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDDD4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDDD4h case    6:*/		return 0x820BDDD8;
		  /* 820BDDD8h */ case    7:  		/* bc 12, CR6_EQ, 1528 */
		/* 820BDDD8h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDDD8h case    7:*/		return 0x820BDDDC;
		  /* 820BDDDCh */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDDDCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDDDCh case    8:*/		return 0x820BDDE0;
		  /* 820BDDE0h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDDE0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDDE0h case    9:*/		return 0x820BDDE4;
		  /* 820BDDE4h */ case   10:  		/* bc 12, CR6_EQ, 1516 */
		/* 820BDDE4h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDDE4h case   10:*/		return 0x820BDDE8;
		  /* 820BDDE8h */ case   11:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BDDE8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BDDE8h case   11:*/		return 0x820BDDEC;
		  /* 820BDDECh */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820BDDECh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDDECh case   12:*/		return 0x820BDDF0;
		  /* 820BDDF0h */ case   13:  		/* bc 12, CR6_EQ, 1504 */
		/* 820BDDF0h case   13:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDDF0h case   13:*/		return 0x820BDDF4;
		  /* 820BDDF4h */ case   14:  		/* lwz R11, <#[R1 + 140]> */
		/* 820BDDF4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820BDDF4h case   14:*/		return 0x820BDDF8;
		  /* 820BDDF8h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 820BDDF8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDDF8h case   15:*/		return 0x820BDDFC;
		  /* 820BDDFCh */ case   16:  		/* bc 12, CR6_EQ, 1492 */
		/* 820BDDFCh case   16:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDDFCh case   16:*/		return 0x820BDE00;
		  /* 820BDE00h */ case   17:  		/* cmplwi CR6, R15, 0 */
		/* 820BDE00h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDE00h case   17:*/		return 0x820BDE04;
		  /* 820BDE04h */ case   18:  		/* bc 12, CR6_EQ, -21560 */
		/* 820BDE04h case   18:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDE04h case   18:*/		return 0x820BDE08;
		  /* 820BDE08h */ case   19:  		/* li R10, 3 */
		/* 820BDE08h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820BDE08h case   19:*/		return 0x820BDE0C;
		  /* 820BDE0Ch */ case   20:  		/* lwz R11, <#[R1 + 148]> */
		/* 820BDE0Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDE0Ch case   20:*/		return 0x820BDE10;
		  /* 820BDE10h */ case   21:  		/* addi R9, R1, 1280 */
		/* 820BDE10h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x500);
		/* 820BDE10h case   21:*/		return 0x820BDE14;
		  /* 820BDE14h */ case   22:  		/* lwz R8, <#[R1 + 152]> */
		/* 820BDE14h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000098) );
		/* 820BDE14h case   22:*/		return 0x820BDE18;
		  /* 820BDE18h */ case   23:  		/* addi R7, R1, 1292 */
		/* 820BDE18h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50C);
		/* 820BDE18h case   23:*/		return 0x820BDE1C;
		  /* 820BDE1Ch */ case   24:  		/* lwz R6, <#[R1 + 156]> */
		/* 820BDE1Ch case   24:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000009C) );
		/* 820BDE1Ch case   24:*/		return 0x820BDE20;
		  /* 820BDE20h */ case   25:  		/* addi R5, R1, 1304 */
		/* 820BDE20h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x518);
		/* 820BDE20h case   25:*/		return 0x820BDE24;
		  /* 820BDE24h */ case   26:  		/* addi R4, R1, 1316 */
		/* 820BDE24h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x524);
		/* 820BDE24h case   26:*/		return 0x820BDE28;
		  /* 820BDE28h */ case   27:  		/* mtspr CTR, R10 */
		/* 820BDE28h case   27:*/		regs.CTR = regs.R10;
		/* 820BDE28h case   27:*/		return 0x820BDE2C;
		  /* 820BDE2Ch */ case   28:  		/* subf R10, R11, R9 */
		/* 820BDE2Ch case   28:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R9);
		/* 820BDE2Ch case   28:*/		return 0x820BDE30;
		  /* 820BDE30h */ case   29:  		/* subf R9, R11, R7 */
		/* 820BDE30h case   29:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R7);
		/* 820BDE30h case   29:*/		return 0x820BDE34;
		  /* 820BDE34h */ case   30:  		/* subf R7, R11, R5 */
		/* 820BDE34h case   30:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R11,regs.R5);
		/* 820BDE34h case   30:*/		return 0x820BDE38;
		  /* 820BDE38h */ case   31:  		/* subf R5, R11, R4 */
		/* 820BDE38h case   31:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R11,regs.R4);
		/* 820BDE38h case   31:*/		return 0x820BDE3C;
		  /* 820BDE3Ch */ case   32:  		/* lwz R4, <#[R1 + 144]> */
		/* 820BDE3Ch case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDE3Ch case   32:*/		return 0x820BDE40;
		  /* 820BDE40h */ case   33:  		/* subf R8, R11, R8 */
		/* 820BDE40h case   33:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 820BDE40h case   33:*/		return 0x820BDE44;
		  /* 820BDE44h */ case   34:  		/* subf R6, R11, R6 */
		/* 820BDE44h case   34:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 820BDE44h case   34:*/		return 0x820BDE48;
		  /* 820BDE48h */ case   35:  		/* lwz R3, <#[R4]> */
		/* 820BDE48h case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 820BDE48h case   35:*/		return 0x820BDE4C;
		  /* 820BDE4Ch */ case   36:  		/* stwx R3, <#[R10 + R11]> */
		/* 820BDE4Ch case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BDE4Ch case   36:*/		return 0x820BDE50;
		  /* 820BDE50h */ case   37:  		/* lwz R3, <#[R11]> */
		/* 820BDE50h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDE50h case   37:*/		return 0x820BDE54;
		  /* 820BDE54h */ case   38:  		/* stwx R3, <#[R9 + R11]> */
		/* 820BDE54h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820BDE54h case   38:*/		return 0x820BDE58;
		  /* 820BDE58h */ case   39:  		/* lwzx R3, <#[R8 + R11]> */
		/* 820BDE58h case   39:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820BDE58h case   39:*/		return 0x820BDE5C;
		  /* 820BDE5Ch */ case   40:  		/* stwx R3, <#[R7 + R11]> */
		/* 820BDE5Ch case   40:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820BDE5Ch case   40:*/		return 0x820BDE60;
		  /* 820BDE60h */ case   41:  		/* lwzx R3, <#[R6 + R11]> */
		/* 820BDE60h case   41:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 820BDE60h case   41:*/		return 0x820BDE64;
		  /* 820BDE64h */ case   42:  		/* stwx R3, <#[R5 + R11]> */
		/* 820BDE64h case   42:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 820BDE64h case   42:*/		return 0x820BDE68;
		  /* 820BDE68h */ case   43:  		/* addi R11, R11, 4 */
		/* 820BDE68h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BDE68h case   43:*/		return 0x820BDE6C;
		  /* 820BDE6Ch */ case   44:  		/* bc 16, CR0_LT, -36 */
		/* 820BDE6Ch case   44:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDE48;  }
		/* 820BDE6Ch case   44:*/		return 0x820BDE70;
		  /* 820BDE70h */ case   45:  		/* cmplwi CR6, R30, 0 */
		/* 820BDE70h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDE70h case   45:*/		return 0x820BDE74;
		  /* 820BDE74h */ case   46:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDE74h case   46:*/		if ( regs.CR[6].eq ) { return 0x820BDE94;  }
		/* 820BDE74h case   46:*/		return 0x820BDE78;
		  /* 820BDE78h */ case   47:  		/* addi R11, R15, -4 */
		/* 820BDE78h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDE78h case   47:*/		return 0x820BDE7C;
		  /* 820BDE7Ch */ case   48:  		/* li R10, -1 */
		/* 820BDE7Ch case   48:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDE7Ch case   48:*/		return 0x820BDE80;
		  /* 820BDE80h */ case   49:  		/* cmplwi CR0, R30, 0 */
		/* 820BDE80h case   49:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDE80h case   49:*/		return 0x820BDE84;
		  /* 820BDE84h */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDE84h case   50:*/		if ( regs.CR[0].eq ) { return 0x820BDE94;  }
		/* 820BDE84h case   50:*/		return 0x820BDE88;
		  /* 820BDE88h */ case   51:  		/* mtspr CTR, R30 */
		/* 820BDE88h case   51:*/		regs.CTR = regs.R30;
		/* 820BDE88h case   51:*/		return 0x820BDE8C;
		  /* 820BDE8Ch */ case   52:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDE8Ch case   52:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDE8Ch case   52:*/		return 0x820BDE90;
		  /* 820BDE90h */ case   53:  		/* bc 16, CR0_LT, -4 */
		/* 820BDE90h case   53:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDE8C;  }
		/* 820BDE90h case   53:*/		return 0x820BDE94;
	}
	return 0x820BDE94;
} // Block from 820BDDBCh-820BDE94h (54 instructions)

//////////////////////////////////////////////////////
// Block at 820BDE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDE94);
		  /* 820BDE94h */ case    0:  		/* lis R5, 24752 */
		/* 820BDE94h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x60B0);
		/* 820BDE94h case    0:*/		return 0x820BDE98;
		  /* 820BDE98h */ case    1:  		/* addi R8, R1, 1292 */
		/* 820BDE98h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50C);
		/* 820BDE98h case    1:*/		return 0x820BDE9C;
		  /* 820BDE9Ch */ case    2:  		/* addi R7, R1, 1280 */
		/* 820BDE9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x500);
		/* 820BDE9Ch case    2:*/		return 0x820BDEA0;
		  /* 820BDEA0h */ case    3:  		/* b -216 */
		/* 820BDEA0h case    3:*/		return 0x820BDDC8;
		/* 820BDEA0h case    3:*/		return 0x820BDEA4;
		  /* 820BDEA4h */ case    4:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDEA4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDEA4h case    4:*/		return 0x820BDEA8;
		  /* 820BDEA8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820BDEA8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDEA8h case    5:*/		return 0x820BDEAC;
		  /* 820BDEACh */ case    6:  		/* bc 12, CR6_EQ, 1316 */
		/* 820BDEACh case    6:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDEACh case    6:*/		return 0x820BDEB0;
		  /* 820BDEB0h */ case    7:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDEB0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDEB0h case    7:*/		return 0x820BDEB4;
		  /* 820BDEB4h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BDEB4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDEB4h case    8:*/		return 0x820BDEB8;
		  /* 820BDEB8h */ case    9:  		/* bc 12, CR6_EQ, 1304 */
		/* 820BDEB8h case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDEB8h case    9:*/		return 0x820BDEBC;
		  /* 820BDEBCh */ case   10:  		/* cmplwi CR6, R15, 0 */
		/* 820BDEBCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDEBCh case   10:*/		return 0x820BDEC0;
		  /* 820BDEC0h */ case   11:  		/* bc 12, CR6_EQ, -21748 */
		/* 820BDEC0h case   11:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDEC0h case   11:*/		return 0x820BDEC4;
		  /* 820BDEC4h */ case   12:  		/* li R11, 4 */
		/* 820BDEC4h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BDEC4h case   12:*/		return 0x820BDEC8;
		  /* 820BDEC8h */ case   13:  		/* addi R10, R1, 1324 */
		/* 820BDEC8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x52C);
		/* 820BDEC8h case   13:*/		return 0x820BDECC;
		  /* 820BDECCh */ case   14:  		/* mtspr CTR, R11 */
		/* 820BDECCh case   14:*/		regs.CTR = regs.R11;
		/* 820BDECCh case   14:*/		return 0x820BDED0;
		  /* 820BDED0h */ case   15:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDED0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDED0h case   15:*/		return 0x820BDED4;
		  /* 820BDED4h */ case   16:  		/* lwz R9, <#[R11]> */
		/* 820BDED4h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDED4h case   16:*/		return 0x820BDED8;
		  /* 820BDED8h */ case   17:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDED8h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDED8h case   17:*/		return 0x820BDEDC;
		  /* 820BDEDCh */ case   18:  		/* bc 16, CR0_LT, -8 */
		/* 820BDEDCh case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDED4;  }
		/* 820BDEDCh case   18:*/		return 0x820BDEE0;
		  /* 820BDEE0h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 820BDEE0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDEE0h case   19:*/		return 0x820BDEE4;
		  /* 820BDEE4h */ case   20:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDEE4h case   20:*/		if ( regs.CR[6].eq ) { return 0x820BDF04;  }
		/* 820BDEE4h case   20:*/		return 0x820BDEE8;
		  /* 820BDEE8h */ case   21:  		/* addi R11, R15, -4 */
		/* 820BDEE8h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDEE8h case   21:*/		return 0x820BDEEC;
		  /* 820BDEECh */ case   22:  		/* li R10, -1 */
		/* 820BDEECh case   22:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDEECh case   22:*/		return 0x820BDEF0;
		  /* 820BDEF0h */ case   23:  		/* cmplwi CR0, R30, 0 */
		/* 820BDEF0h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDEF0h case   23:*/		return 0x820BDEF4;
		  /* 820BDEF4h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDEF4h case   24:*/		if ( regs.CR[0].eq ) { return 0x820BDF04;  }
		/* 820BDEF4h case   24:*/		return 0x820BDEF8;
		  /* 820BDEF8h */ case   25:  		/* mtspr CTR, R30 */
		/* 820BDEF8h case   25:*/		regs.CTR = regs.R30;
		/* 820BDEF8h case   25:*/		return 0x820BDEFC;
		  /* 820BDEFCh */ case   26:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDEFCh case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDEFCh case   26:*/		return 0x820BDF00;
		  /* 820BDF00h */ case   27:  		/* bc 16, CR0_LT, -4 */
		/* 820BDF00h case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDEFC;  }
		/* 820BDF00h case   27:*/		return 0x820BDF04;
	}
	return 0x820BDF04;
} // Block from 820BDE94h-820BDF04h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BDF04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDF04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDF04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDF04);
		  /* 820BDF04h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDF04h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDF04h case    0:*/		return 0x820BDF08;
		  /* 820BDF08h */ case    1:  		/* lis R5, 24768 */
		/* 820BDF08h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x60C0);
		/* 820BDF08h case    1:*/		return 0x820BDF0C;
		  /* 820BDF0Ch */ case    2:  		/* li R9, 0 */
		/* 820BDF0Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDF0Ch case    2:*/		return 0x820BDF10;
		  /* 820BDF10h */ case    3:  		/* addi R7, R1, 1328 */
		/* 820BDF10h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x530);
		/* 820BDF10h case    3:*/		return 0x820BDF14;
		  /* 820BDF14h */ case    4:  		/* b 1176 */
		/* 820BDF14h case    4:*/		return 0x820BE3AC;
		/* 820BDF14h case    4:*/		return 0x820BDF18;
		  /* 820BDF18h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDF18h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDF18h case    5:*/		return 0x820BDF1C;
		  /* 820BDF1Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDF1Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDF1Ch case    6:*/		return 0x820BDF20;
		  /* 820BDF20h */ case    7:  		/* bc 12, CR6_EQ, 1200 */
		/* 820BDF20h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDF20h case    7:*/		return 0x820BDF24;
		  /* 820BDF24h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDF24h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDF24h case    8:*/		return 0x820BDF28;
		  /* 820BDF28h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDF28h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDF28h case    9:*/		return 0x820BDF2C;
		  /* 820BDF2Ch */ case   10:  		/* bc 12, CR6_EQ, 1188 */
		/* 820BDF2Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDF2Ch case   10:*/		return 0x820BDF30;
		  /* 820BDF30h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BDF30h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDF30h case   11:*/		return 0x820BDF34;
		  /* 820BDF34h */ case   12:  		/* bc 12, CR6_EQ, -21864 */
		/* 820BDF34h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDF34h case   12:*/		return 0x820BDF38;
		  /* 820BDF38h */ case   13:  		/* li R11, 4 */
		/* 820BDF38h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BDF38h case   13:*/		return 0x820BDF3C;
		  /* 820BDF3Ch */ case   14:  		/* addi R10, R1, 1356 */
		/* 820BDF3Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x54C);
		/* 820BDF3Ch case   14:*/		return 0x820BDF40;
		  /* 820BDF40h */ case   15:  		/* mtspr CTR, R11 */
		/* 820BDF40h case   15:*/		regs.CTR = regs.R11;
		/* 820BDF40h case   15:*/		return 0x820BDF44;
		  /* 820BDF44h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDF44h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDF44h case   16:*/		return 0x820BDF48;
		  /* 820BDF48h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BDF48h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDF48h case   17:*/		return 0x820BDF4C;
		  /* 820BDF4Ch */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDF4Ch case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDF4Ch case   18:*/		return 0x820BDF50;
		  /* 820BDF50h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDF50h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDF48;  }
		/* 820BDF50h case   19:*/		return 0x820BDF54;
		  /* 820BDF54h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDF54h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDF54h case   20:*/		return 0x820BDF58;
		  /* 820BDF58h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDF58h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDF78;  }
		/* 820BDF58h case   21:*/		return 0x820BDF5C;
		  /* 820BDF5Ch */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDF5Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDF5Ch case   22:*/		return 0x820BDF60;
		  /* 820BDF60h */ case   23:  		/* li R10, -1 */
		/* 820BDF60h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDF60h case   23:*/		return 0x820BDF64;
		  /* 820BDF64h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDF64h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDF64h case   24:*/		return 0x820BDF68;
		  /* 820BDF68h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDF68h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDF78;  }
		/* 820BDF68h case   25:*/		return 0x820BDF6C;
		  /* 820BDF6Ch */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDF6Ch case   26:*/		regs.CTR = regs.R30;
		/* 820BDF6Ch case   26:*/		return 0x820BDF70;
		  /* 820BDF70h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDF70h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDF70h case   27:*/		return 0x820BDF74;
		  /* 820BDF74h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDF74h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDF70;  }
		/* 820BDF74h case   28:*/		return 0x820BDF78;
	}
	return 0x820BDF78;
} // Block from 820BDF04h-820BDF78h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDF78);
		  /* 820BDF78h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDF78h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDF78h case    0:*/		return 0x820BDF7C;
		  /* 820BDF7Ch */ case    1:  		/* lis R5, 24784 */
		/* 820BDF7Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x60D0);
		/* 820BDF7Ch case    1:*/		return 0x820BDF80;
		  /* 820BDF80h */ case    2:  		/* li R9, 0 */
		/* 820BDF80h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDF80h case    2:*/		return 0x820BDF84;
		  /* 820BDF84h */ case    3:  		/* addi R7, R1, 1360 */
		/* 820BDF84h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x550);
		/* 820BDF84h case    3:*/		return 0x820BDF88;
		  /* 820BDF88h */ case    4:  		/* b 1060 */
		/* 820BDF88h case    4:*/		return 0x820BE3AC;
		/* 820BDF88h case    4:*/		return 0x820BDF8C;
		  /* 820BDF8Ch */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BDF8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BDF8Ch case    5:*/		return 0x820BDF90;
		  /* 820BDF90h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BDF90h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDF90h case    6:*/		return 0x820BDF94;
		  /* 820BDF94h */ case    7:  		/* bc 12, CR6_EQ, 1084 */
		/* 820BDF94h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDF94h case    7:*/		return 0x820BDF98;
		  /* 820BDF98h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BDF98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BDF98h case    8:*/		return 0x820BDF9C;
		  /* 820BDF9Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BDF9Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BDF9Ch case    9:*/		return 0x820BDFA0;
		  /* 820BDFA0h */ case   10:  		/* bc 12, CR6_EQ, 1072 */
		/* 820BDFA0h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BDFA0h case   10:*/		return 0x820BDFA4;
		  /* 820BDFA4h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BDFA4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BDFA4h case   11:*/		return 0x820BDFA8;
		  /* 820BDFA8h */ case   12:  		/* bc 12, CR6_EQ, -21980 */
		/* 820BDFA8h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BDFA8h case   12:*/		return 0x820BDFAC;
		  /* 820BDFACh */ case   13:  		/* li R11, 4 */
		/* 820BDFACh case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BDFACh case   13:*/		return 0x820BDFB0;
		  /* 820BDFB0h */ case   14:  		/* addi R10, R1, 1388 */
		/* 820BDFB0h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x56C);
		/* 820BDFB0h case   14:*/		return 0x820BDFB4;
		  /* 820BDFB4h */ case   15:  		/* mtspr CTR, R11 */
		/* 820BDFB4h case   15:*/		regs.CTR = regs.R11;
		/* 820BDFB4h case   15:*/		return 0x820BDFB8;
		  /* 820BDFB8h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BDFB8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BDFB8h case   16:*/		return 0x820BDFBC;
		  /* 820BDFBCh */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BDFBCh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BDFBCh case   17:*/		return 0x820BDFC0;
		  /* 820BDFC0h */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BDFC0h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BDFC0h case   18:*/		return 0x820BDFC4;
		  /* 820BDFC4h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BDFC4h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDFBC;  }
		/* 820BDFC4h case   19:*/		return 0x820BDFC8;
		  /* 820BDFC8h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BDFC8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BDFC8h case   20:*/		return 0x820BDFCC;
		  /* 820BDFCCh */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BDFCCh case   21:*/		if ( regs.CR[6].eq ) { return 0x820BDFEC;  }
		/* 820BDFCCh case   21:*/		return 0x820BDFD0;
		  /* 820BDFD0h */ case   22:  		/* addi R11, R15, -4 */
		/* 820BDFD0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BDFD0h case   22:*/		return 0x820BDFD4;
		  /* 820BDFD4h */ case   23:  		/* li R10, -1 */
		/* 820BDFD4h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BDFD4h case   23:*/		return 0x820BDFD8;
		  /* 820BDFD8h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BDFD8h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BDFD8h case   24:*/		return 0x820BDFDC;
		  /* 820BDFDCh */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BDFDCh case   25:*/		if ( regs.CR[0].eq ) { return 0x820BDFEC;  }
		/* 820BDFDCh case   25:*/		return 0x820BDFE0;
		  /* 820BDFE0h */ case   26:  		/* mtspr CTR, R30 */
		/* 820BDFE0h case   26:*/		regs.CTR = regs.R30;
		/* 820BDFE0h case   26:*/		return 0x820BDFE4;
		  /* 820BDFE4h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BDFE4h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BDFE4h case   27:*/		return 0x820BDFE8;
		  /* 820BDFE8h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BDFE8h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BDFE4;  }
		/* 820BDFE8h case   28:*/		return 0x820BDFEC;
	}
	return 0x820BDFEC;
} // Block from 820BDF78h-820BDFECh (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BDFECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BDFEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BDFEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BDFEC);
		  /* 820BDFECh */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BDFECh case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BDFECh case    0:*/		return 0x820BDFF0;
		  /* 820BDFF0h */ case    1:  		/* lis R5, 24800 */
		/* 820BDFF0h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x60E0);
		/* 820BDFF0h case    1:*/		return 0x820BDFF4;
		  /* 820BDFF4h */ case    2:  		/* li R9, 0 */
		/* 820BDFF4h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BDFF4h case    2:*/		return 0x820BDFF8;
		  /* 820BDFF8h */ case    3:  		/* addi R7, R1, 1392 */
		/* 820BDFF8h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x570);
		/* 820BDFF8h case    3:*/		return 0x820BDFFC;
		  /* 820BDFFCh */ case    4:  		/* b 944 */
		/* 820BDFFCh case    4:*/		return 0x820BE3AC;
		/* 820BDFFCh case    4:*/		return 0x820BE000;
		  /* 820BE000h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BE000h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BE000h case    5:*/		return 0x820BE004;
		  /* 820BE004h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BE004h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE004h case    6:*/		return 0x820BE008;
		  /* 820BE008h */ case    7:  		/* bc 12, CR6_EQ, 968 */
		/* 820BE008h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE008h case    7:*/		return 0x820BE00C;
		  /* 820BE00Ch */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BE00Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BE00Ch case    8:*/		return 0x820BE010;
		  /* 820BE010h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BE010h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE010h case    9:*/		return 0x820BE014;
		  /* 820BE014h */ case   10:  		/* bc 12, CR6_EQ, 956 */
		/* 820BE014h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE014h case   10:*/		return 0x820BE018;
		  /* 820BE018h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BE018h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BE018h case   11:*/		return 0x820BE01C;
		  /* 820BE01Ch */ case   12:  		/* bc 12, CR6_EQ, -22096 */
		/* 820BE01Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BE01Ch case   12:*/		return 0x820BE020;
		  /* 820BE020h */ case   13:  		/* li R10, 3 */
		/* 820BE020h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820BE020h case   13:*/		return 0x820BE024;
		  /* 820BE024h */ case   14:  		/* addi R11, R1, 1084 */
		/* 820BE024h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x43C);
		/* 820BE024h case   14:*/		return 0x820BE028;
		  /* 820BE028h */ case   15:  		/* mtspr CTR, R10 */
		/* 820BE028h case   15:*/		regs.CTR = regs.R10;
		/* 820BE028h case   15:*/		return 0x820BE02C;
		  /* 820BE02Ch */ case   16:  		/* lwz R10, <#[R1 + 144]> */
		/* 820BE02Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820BE02Ch case   16:*/		return 0x820BE030;
		  /* 820BE030h */ case   17:  		/* lwz R9, <#[R10]> */
		/* 820BE030h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820BE030h case   17:*/		return 0x820BE034;
		  /* 820BE034h */ case   18:  		/* stwu R9, <#[R11 + 4]> */
		/* 820BE034h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BE034h case   18:*/		return 0x820BE038;
		  /* 820BE038h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BE038h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE030;  }
		/* 820BE038h case   19:*/		return 0x820BE03C;
		  /* 820BE03Ch */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BE03Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BE03Ch case   20:*/		return 0x820BE040;
		  /* 820BE040h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BE040h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BE060;  }
		/* 820BE040h case   21:*/		return 0x820BE044;
		  /* 820BE044h */ case   22:  		/* addi R11, R15, -4 */
		/* 820BE044h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BE044h case   22:*/		return 0x820BE048;
		  /* 820BE048h */ case   23:  		/* li R10, -1 */
		/* 820BE048h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BE048h case   23:*/		return 0x820BE04C;
		  /* 820BE04Ch */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BE04Ch case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BE04Ch case   24:*/		return 0x820BE050;
		  /* 820BE050h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BE050h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BE060;  }
		/* 820BE050h case   25:*/		return 0x820BE054;
		  /* 820BE054h */ case   26:  		/* mtspr CTR, R30 */
		/* 820BE054h case   26:*/		regs.CTR = regs.R30;
		/* 820BE054h case   26:*/		return 0x820BE058;
		  /* 820BE058h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BE058h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BE058h case   27:*/		return 0x820BE05C;
		  /* 820BE05Ch */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BE05Ch case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE058;  }
		/* 820BE05Ch case   28:*/		return 0x820BE060;
	}
	return 0x820BE060;
} // Block from 820BDFECh-820BE060h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BE060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE060);
		  /* 820BE060h */ case    0:  		/* lis R5, 24816 */
		/* 820BE060h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x60F0);
		/* 820BE060h case    0:*/		return 0x820BE064;
		  /* 820BE064h */ case    1:  		/* addi R7, R1, 1088 */
		/* 820BE064h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x440);
		/* 820BE064h case    1:*/		return 0x820BE068;
		  /* 820BE068h */ case    2:  		/* b -676 */
		/* 820BE068h case    2:*/		return 0x820BDDC4;
		/* 820BE068h case    2:*/		return 0x820BE06C;
		  /* 820BE06Ch */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BE06Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BE06Ch case    3:*/		return 0x820BE070;
		  /* 820BE070h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820BE070h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE070h case    4:*/		return 0x820BE074;
		  /* 820BE074h */ case    5:  		/* bc 12, CR6_EQ, 860 */
		/* 820BE074h case    5:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE074h case    5:*/		return 0x820BE078;
		  /* 820BE078h */ case    6:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BE078h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BE078h case    6:*/		return 0x820BE07C;
		  /* 820BE07Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 820BE07Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE07Ch case    7:*/		return 0x820BE080;
		  /* 820BE080h */ case    8:  		/* bc 12, CR6_EQ, 848 */
		/* 820BE080h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE080h case    8:*/		return 0x820BE084;
		  /* 820BE084h */ case    9:  		/* lwz R11, <#[R1 + 136]> */
		/* 820BE084h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 820BE084h case    9:*/		return 0x820BE088;
		  /* 820BE088h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820BE088h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE088h case   10:*/		return 0x820BE08C;
		  /* 820BE08Ch */ case   11:  		/* bc 12, CR6_EQ, 836 */
		/* 820BE08Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE08Ch case   11:*/		return 0x820BE090;
		  /* 820BE090h */ case   12:  		/* lwz R11, <#[R1 + 140]> */
		/* 820BE090h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820BE090h case   12:*/		return 0x820BE094;
		  /* 820BE094h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820BE094h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE094h case   13:*/		return 0x820BE098;
		  /* 820BE098h */ case   14:  		/* bc 12, CR6_EQ, 824 */
		/* 820BE098h case   14:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE098h case   14:*/		return 0x820BE09C;
		  /* 820BE09Ch */ case   15:  		/* cmplwi CR6, R15, 0 */
		/* 820BE09Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BE09Ch case   15:*/		return 0x820BE0A0;
		  /* 820BE0A0h */ case   16:  		/* bc 12, CR6_EQ, -22228 */
		/* 820BE0A0h case   16:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BE0A0h case   16:*/		return 0x820BE0A4;
		  /* 820BE0A4h */ case   17:  		/* li R10, 3 */
		/* 820BE0A4h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 820BE0A4h case   17:*/		return 0x820BE0A8;
		  /* 820BE0A8h */ case   18:  		/* lwz R11, <#[R1 + 148]> */
		/* 820BE0A8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820BE0A8h case   18:*/		return 0x820BE0AC;
		  /* 820BE0ACh */ case   19:  		/* addi R9, R1, 1232 */
		/* 820BE0ACh case   19:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x4D0);
		/* 820BE0ACh case   19:*/		return 0x820BE0B0;
		  /* 820BE0B0h */ case   20:  		/* lwz R8, <#[R1 + 152]> */
		/* 820BE0B0h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000098) );
		/* 820BE0B0h case   20:*/		return 0x820BE0B4;
		  /* 820BE0B4h */ case   21:  		/* addi R7, R1, 1244 */
		/* 820BE0B4h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x4DC);
		/* 820BE0B4h case   21:*/		return 0x820BE0B8;
		  /* 820BE0B8h */ case   22:  		/* lwz R6, <#[R1 + 156]> */
		/* 820BE0B8h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000009C) );
		/* 820BE0B8h case   22:*/		return 0x820BE0BC;
		  /* 820BE0BCh */ case   23:  		/* addi R5, R1, 1256 */
		/* 820BE0BCh case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4E8);
		/* 820BE0BCh case   23:*/		return 0x820BE0C0;
		  /* 820BE0C0h */ case   24:  		/* addi R4, R1, 1268 */
		/* 820BE0C0h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x4F4);
		/* 820BE0C0h case   24:*/		return 0x820BE0C4;
		  /* 820BE0C4h */ case   25:  		/* mtspr CTR, R10 */
		/* 820BE0C4h case   25:*/		regs.CTR = regs.R10;
		/* 820BE0C4h case   25:*/		return 0x820BE0C8;
		  /* 820BE0C8h */ case   26:  		/* subf R10, R11, R9 */
		/* 820BE0C8h case   26:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R9);
		/* 820BE0C8h case   26:*/		return 0x820BE0CC;
		  /* 820BE0CCh */ case   27:  		/* subf R9, R11, R7 */
		/* 820BE0CCh case   27:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R7);
		/* 820BE0CCh case   27:*/		return 0x820BE0D0;
		  /* 820BE0D0h */ case   28:  		/* subf R7, R11, R5 */
		/* 820BE0D0h case   28:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R11,regs.R5);
		/* 820BE0D0h case   28:*/		return 0x820BE0D4;
		  /* 820BE0D4h */ case   29:  		/* subf R5, R11, R4 */
		/* 820BE0D4h case   29:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R11,regs.R4);
		/* 820BE0D4h case   29:*/		return 0x820BE0D8;
		  /* 820BE0D8h */ case   30:  		/* lwz R4, <#[R1 + 144]> */
		/* 820BE0D8h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 820BE0D8h case   30:*/		return 0x820BE0DC;
		  /* 820BE0DCh */ case   31:  		/* subf R8, R11, R8 */
		/* 820BE0DCh case   31:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 820BE0DCh case   31:*/		return 0x820BE0E0;
		  /* 820BE0E0h */ case   32:  		/* subf R6, R11, R6 */
		/* 820BE0E0h case   32:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 820BE0E0h case   32:*/		return 0x820BE0E4;
		  /* 820BE0E4h */ case   33:  		/* lwz R3, <#[R4]> */
		/* 820BE0E4h case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 820BE0E4h case   33:*/		return 0x820BE0E8;
		  /* 820BE0E8h */ case   34:  		/* stwx R3, <#[R10 + R11]> */
		/* 820BE0E8h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BE0E8h case   34:*/		return 0x820BE0EC;
		  /* 820BE0ECh */ case   35:  		/* lwz R3, <#[R11]> */
		/* 820BE0ECh case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 820BE0ECh case   35:*/		return 0x820BE0F0;
		  /* 820BE0F0h */ case   36:  		/* stwx R3, <#[R9 + R11]> */
		/* 820BE0F0h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820BE0F0h case   36:*/		return 0x820BE0F4;
		  /* 820BE0F4h */ case   37:  		/* lwzx R3, <#[R8 + R11]> */
		/* 820BE0F4h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820BE0F4h case   37:*/		return 0x820BE0F8;
		  /* 820BE0F8h */ case   38:  		/* stwx R3, <#[R7 + R11]> */
		/* 820BE0F8h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 820BE0F8h case   38:*/		return 0x820BE0FC;
		  /* 820BE0FCh */ case   39:  		/* lwzx R3, <#[R6 + R11]> */
		/* 820BE0FCh case   39:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 820BE0FCh case   39:*/		return 0x820BE100;
		  /* 820BE100h */ case   40:  		/* stwx R3, <#[R5 + R11]> */
		/* 820BE100h case   40:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 820BE100h case   40:*/		return 0x820BE104;
		  /* 820BE104h */ case   41:  		/* addi R11, R11, 4 */
		/* 820BE104h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BE104h case   41:*/		return 0x820BE108;
		  /* 820BE108h */ case   42:  		/* bc 16, CR0_LT, -36 */
		/* 820BE108h case   42:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE0E4;  }
		/* 820BE108h case   42:*/		return 0x820BE10C;
		  /* 820BE10Ch */ case   43:  		/* cmplwi CR6, R30, 0 */
		/* 820BE10Ch case   43:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BE10Ch case   43:*/		return 0x820BE110;
		  /* 820BE110h */ case   44:  		/* bc 12, CR6_EQ, 32 */
		/* 820BE110h case   44:*/		if ( regs.CR[6].eq ) { return 0x820BE130;  }
		/* 820BE110h case   44:*/		return 0x820BE114;
		  /* 820BE114h */ case   45:  		/* addi R11, R15, -4 */
		/* 820BE114h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BE114h case   45:*/		return 0x820BE118;
		  /* 820BE118h */ case   46:  		/* li R10, -1 */
		/* 820BE118h case   46:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BE118h case   46:*/		return 0x820BE11C;
		  /* 820BE11Ch */ case   47:  		/* cmplwi CR0, R30, 0 */
		/* 820BE11Ch case   47:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BE11Ch case   47:*/		return 0x820BE120;
		  /* 820BE120h */ case   48:  		/* bc 12, CR0_EQ, 16 */
		/* 820BE120h case   48:*/		if ( regs.CR[0].eq ) { return 0x820BE130;  }
		/* 820BE120h case   48:*/		return 0x820BE124;
		  /* 820BE124h */ case   49:  		/* mtspr CTR, R30 */
		/* 820BE124h case   49:*/		regs.CTR = regs.R30;
		/* 820BE124h case   49:*/		return 0x820BE128;
		  /* 820BE128h */ case   50:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BE128h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BE128h case   50:*/		return 0x820BE12C;
		  /* 820BE12Ch */ case   51:  		/* bc 16, CR0_LT, -4 */
		/* 820BE12Ch case   51:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE128;  }
		/* 820BE12Ch case   51:*/		return 0x820BE130;
	}
	return 0x820BE130;
} // Block from 820BE060h-820BE130h (52 instructions)

//////////////////////////////////////////////////////
// Block at 820BE130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE130);
		  /* 820BE130h */ case    0:  		/* lis R5, 24832 */
		/* 820BE130h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x6100);
		/* 820BE130h case    0:*/		return 0x820BE134;
		  /* 820BE134h */ case    1:  		/* addi R8, R1, 1244 */
		/* 820BE134h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x4DC);
		/* 820BE134h case    1:*/		return 0x820BE138;
		  /* 820BE138h */ case    2:  		/* addi R7, R1, 1232 */
		/* 820BE138h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x4D0);
		/* 820BE138h case    2:*/		return 0x820BE13C;
		  /* 820BE13Ch */ case    3:  		/* b -884 */
		/* 820BE13Ch case    3:*/		return 0x820BDDC8;
		/* 820BE13Ch case    3:*/		return 0x820BE140;
		  /* 820BE140h */ case    4:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BE140h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BE140h case    4:*/		return 0x820BE144;
		  /* 820BE144h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820BE144h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE144h case    5:*/		return 0x820BE148;
		  /* 820BE148h */ case    6:  		/* bc 12, CR6_EQ, 648 */
		/* 820BE148h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE148h case    6:*/		return 0x820BE14C;
		  /* 820BE14Ch */ case    7:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BE14Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BE14Ch case    7:*/		return 0x820BE150;
		  /* 820BE150h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BE150h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE150h case    8:*/		return 0x820BE154;
		  /* 820BE154h */ case    9:  		/* bc 12, CR6_EQ, 636 */
		/* 820BE154h case    9:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE154h case    9:*/		return 0x820BE158;
		  /* 820BE158h */ case   10:  		/* cmplwi CR6, R15, 0 */
		/* 820BE158h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BE158h case   10:*/		return 0x820BE15C;
		  /* 820BE15Ch */ case   11:  		/* bc 12, CR6_EQ, -22416 */
		/* 820BE15Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BE15Ch case   11:*/		return 0x820BE160;
		  /* 820BE160h */ case   12:  		/* li R11, 4 */
		/* 820BE160h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BE160h case   12:*/		return 0x820BE164;
		  /* 820BE164h */ case   13:  		/* addi R10, R1, 1132 */
		/* 820BE164h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x46C);
		/* 820BE164h case   13:*/		return 0x820BE168;
		  /* 820BE168h */ case   14:  		/* mtspr CTR, R11 */
		/* 820BE168h case   14:*/		regs.CTR = regs.R11;
		/* 820BE168h case   14:*/		return 0x820BE16C;
		  /* 820BE16Ch */ case   15:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BE16Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BE16Ch case   15:*/		return 0x820BE170;
		  /* 820BE170h */ case   16:  		/* lwz R9, <#[R11]> */
		/* 820BE170h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BE170h case   16:*/		return 0x820BE174;
		  /* 820BE174h */ case   17:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BE174h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BE174h case   17:*/		return 0x820BE178;
		  /* 820BE178h */ case   18:  		/* bc 16, CR0_LT, -8 */
		/* 820BE178h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE170;  }
		/* 820BE178h case   18:*/		return 0x820BE17C;
		  /* 820BE17Ch */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 820BE17Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BE17Ch case   19:*/		return 0x820BE180;
		  /* 820BE180h */ case   20:  		/* bc 12, CR6_EQ, 32 */
		/* 820BE180h case   20:*/		if ( regs.CR[6].eq ) { return 0x820BE1A0;  }
		/* 820BE180h case   20:*/		return 0x820BE184;
		  /* 820BE184h */ case   21:  		/* addi R11, R15, -4 */
		/* 820BE184h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BE184h case   21:*/		return 0x820BE188;
		  /* 820BE188h */ case   22:  		/* li R10, -1 */
		/* 820BE188h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BE188h case   22:*/		return 0x820BE18C;
		  /* 820BE18Ch */ case   23:  		/* cmplwi CR0, R30, 0 */
		/* 820BE18Ch case   23:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BE18Ch case   23:*/		return 0x820BE190;
		  /* 820BE190h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 820BE190h case   24:*/		if ( regs.CR[0].eq ) { return 0x820BE1A0;  }
		/* 820BE190h case   24:*/		return 0x820BE194;
		  /* 820BE194h */ case   25:  		/* mtspr CTR, R30 */
		/* 820BE194h case   25:*/		regs.CTR = regs.R30;
		/* 820BE194h case   25:*/		return 0x820BE198;
		  /* 820BE198h */ case   26:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BE198h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BE198h case   26:*/		return 0x820BE19C;
		  /* 820BE19Ch */ case   27:  		/* bc 16, CR0_LT, -4 */
		/* 820BE19Ch case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE198;  }
		/* 820BE19Ch case   27:*/		return 0x820BE1A0;
	}
	return 0x820BE1A0;
} // Block from 820BE130h-820BE1A0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BE1A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE1A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE1A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE1A0);
		  /* 820BE1A0h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BE1A0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BE1A0h case    0:*/		return 0x820BE1A4;
		  /* 820BE1A4h */ case    1:  		/* lis R5, 24848 */
		/* 820BE1A4h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6110);
		/* 820BE1A4h case    1:*/		return 0x820BE1A8;
		  /* 820BE1A8h */ case    2:  		/* li R9, 0 */
		/* 820BE1A8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BE1A8h case    2:*/		return 0x820BE1AC;
		  /* 820BE1ACh */ case    3:  		/* addi R7, R1, 1136 */
		/* 820BE1ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x470);
		/* 820BE1ACh case    3:*/		return 0x820BE1B0;
		  /* 820BE1B0h */ case    4:  		/* b 508 */
		/* 820BE1B0h case    4:*/		return 0x820BE3AC;
		/* 820BE1B0h case    4:*/		return 0x820BE1B4;
		  /* 820BE1B4h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BE1B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BE1B4h case    5:*/		return 0x820BE1B8;
		  /* 820BE1B8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BE1B8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE1B8h case    6:*/		return 0x820BE1BC;
		  /* 820BE1BCh */ case    7:  		/* bc 12, CR6_EQ, 532 */
		/* 820BE1BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE1BCh case    7:*/		return 0x820BE1C0;
		  /* 820BE1C0h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BE1C0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BE1C0h case    8:*/		return 0x820BE1C4;
		  /* 820BE1C4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BE1C4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE1C4h case    9:*/		return 0x820BE1C8;
		  /* 820BE1C8h */ case   10:  		/* bc 12, CR6_EQ, 520 */
		/* 820BE1C8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE1C8h case   10:*/		return 0x820BE1CC;
		  /* 820BE1CCh */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BE1CCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BE1CCh case   11:*/		return 0x820BE1D0;
		  /* 820BE1D0h */ case   12:  		/* bc 12, CR6_EQ, -22532 */
		/* 820BE1D0h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BE1D0h case   12:*/		return 0x820BE1D4;
		  /* 820BE1D4h */ case   13:  		/* li R11, 4 */
		/* 820BE1D4h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BE1D4h case   13:*/		return 0x820BE1D8;
		  /* 820BE1D8h */ case   14:  		/* addi R10, R1, 1164 */
		/* 820BE1D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x48C);
		/* 820BE1D8h case   14:*/		return 0x820BE1DC;
		  /* 820BE1DCh */ case   15:  		/* mtspr CTR, R11 */
		/* 820BE1DCh case   15:*/		regs.CTR = regs.R11;
		/* 820BE1DCh case   15:*/		return 0x820BE1E0;
		  /* 820BE1E0h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BE1E0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BE1E0h case   16:*/		return 0x820BE1E4;
		  /* 820BE1E4h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BE1E4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BE1E4h case   17:*/		return 0x820BE1E8;
		  /* 820BE1E8h */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BE1E8h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BE1E8h case   18:*/		return 0x820BE1EC;
		  /* 820BE1ECh */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BE1ECh case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE1E4;  }
		/* 820BE1ECh case   19:*/		return 0x820BE1F0;
		  /* 820BE1F0h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BE1F0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BE1F0h case   20:*/		return 0x820BE1F4;
		  /* 820BE1F4h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BE1F4h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BE214;  }
		/* 820BE1F4h case   21:*/		return 0x820BE1F8;
		  /* 820BE1F8h */ case   22:  		/* addi R11, R15, -4 */
		/* 820BE1F8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BE1F8h case   22:*/		return 0x820BE1FC;
		  /* 820BE1FCh */ case   23:  		/* li R10, -1 */
		/* 820BE1FCh case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BE1FCh case   23:*/		return 0x820BE200;
		  /* 820BE200h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BE200h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BE200h case   24:*/		return 0x820BE204;
		  /* 820BE204h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BE204h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BE214;  }
		/* 820BE204h case   25:*/		return 0x820BE208;
		  /* 820BE208h */ case   26:  		/* mtspr CTR, R30 */
		/* 820BE208h case   26:*/		regs.CTR = regs.R30;
		/* 820BE208h case   26:*/		return 0x820BE20C;
		  /* 820BE20Ch */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BE20Ch case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BE20Ch case   27:*/		return 0x820BE210;
		  /* 820BE210h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BE210h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE20C;  }
		/* 820BE210h case   28:*/		return 0x820BE214;
	}
	return 0x820BE214;
} // Block from 820BE1A0h-820BE214h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BE214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE214);
		  /* 820BE214h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BE214h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BE214h case    0:*/		return 0x820BE218;
		  /* 820BE218h */ case    1:  		/* lis R5, 24864 */
		/* 820BE218h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6120);
		/* 820BE218h case    1:*/		return 0x820BE21C;
		  /* 820BE21Ch */ case    2:  		/* li R9, 0 */
		/* 820BE21Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BE21Ch case    2:*/		return 0x820BE220;
		  /* 820BE220h */ case    3:  		/* addi R7, R1, 1168 */
		/* 820BE220h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x490);
		/* 820BE220h case    3:*/		return 0x820BE224;
		  /* 820BE224h */ case    4:  		/* b 392 */
		/* 820BE224h case    4:*/		return 0x820BE3AC;
		/* 820BE224h case    4:*/		return 0x820BE228;
		  /* 820BE228h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BE228h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BE228h case    5:*/		return 0x820BE22C;
		  /* 820BE22Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BE22Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE22Ch case    6:*/		return 0x820BE230;
		  /* 820BE230h */ case    7:  		/* bc 12, CR6_EQ, 416 */
		/* 820BE230h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE230h case    7:*/		return 0x820BE234;
		  /* 820BE234h */ case    8:  		/* lwz R11, <#[R1 + 132]> */
		/* 820BE234h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 820BE234h case    8:*/		return 0x820BE238;
		  /* 820BE238h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820BE238h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE238h case    9:*/		return 0x820BE23C;
		  /* 820BE23Ch */ case   10:  		/* bc 12, CR6_EQ, 404 */
		/* 820BE23Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE23Ch case   10:*/		return 0x820BE240;
		  /* 820BE240h */ case   11:  		/* cmplwi CR6, R15, 0 */
		/* 820BE240h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BE240h case   11:*/		return 0x820BE244;
		  /* 820BE244h */ case   12:  		/* bc 12, CR6_EQ, -22648 */
		/* 820BE244h case   12:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BE244h case   12:*/		return 0x820BE248;
		  /* 820BE248h */ case   13:  		/* li R11, 4 */
		/* 820BE248h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820BE248h case   13:*/		return 0x820BE24C;
		  /* 820BE24Ch */ case   14:  		/* addi R10, R1, 1372 */
		/* 820BE24Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x55C);
		/* 820BE24Ch case   14:*/		return 0x820BE250;
		  /* 820BE250h */ case   15:  		/* mtspr CTR, R11 */
		/* 820BE250h case   15:*/		regs.CTR = regs.R11;
		/* 820BE250h case   15:*/		return 0x820BE254;
		  /* 820BE254h */ case   16:  		/* lwz R11, <#[R1 + 144]> */
		/* 820BE254h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820BE254h case   16:*/		return 0x820BE258;
		  /* 820BE258h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 820BE258h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BE258h case   17:*/		return 0x820BE25C;
		  /* 820BE25Ch */ case   18:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BE25Ch case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BE25Ch case   18:*/		return 0x820BE260;
		  /* 820BE260h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BE260h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE258;  }
		/* 820BE260h case   19:*/		return 0x820BE264;
		  /* 820BE264h */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 820BE264h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820BE264h case   20:*/		return 0x820BE268;
		  /* 820BE268h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BE268h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BE288;  }
		/* 820BE268h case   21:*/		return 0x820BE26C;
		  /* 820BE26Ch */ case   22:  		/* addi R11, R15, -4 */
		/* 820BE26Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0xFFFFFFFC);
		/* 820BE26Ch case   22:*/		return 0x820BE270;
		  /* 820BE270h */ case   23:  		/* li R10, -1 */
		/* 820BE270h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820BE270h case   23:*/		return 0x820BE274;
		  /* 820BE274h */ case   24:  		/* cmplwi CR0, R30, 0 */
		/* 820BE274h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 820BE274h case   24:*/		return 0x820BE278;
		  /* 820BE278h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BE278h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BE288;  }
		/* 820BE278h case   25:*/		return 0x820BE27C;
		  /* 820BE27Ch */ case   26:  		/* mtspr CTR, R30 */
		/* 820BE27Ch case   26:*/		regs.CTR = regs.R30;
		/* 820BE27Ch case   26:*/		return 0x820BE280;
		  /* 820BE280h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BE280h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BE280h case   27:*/		return 0x820BE284;
		  /* 820BE284h */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BE284h case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE280;  }
		/* 820BE284h case   28:*/		return 0x820BE288;
	}
	return 0x820BE288;
} // Block from 820BE214h-820BE288h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BE288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE288);
		  /* 820BE288h */ case    0:  		/* lwz R8, <#[R1 + 148]> */
		/* 820BE288h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 820BE288h case    0:*/		return 0x820BE28C;
		  /* 820BE28Ch */ case    1:  		/* lis R5, 24880 */
		/* 820BE28Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x6130);
		/* 820BE28Ch case    1:*/		return 0x820BE290;
		  /* 820BE290h */ case    2:  		/* li R9, 0 */
		/* 820BE290h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BE290h case    2:*/		return 0x820BE294;
		  /* 820BE294h */ case    3:  		/* addi R7, R1, 1376 */
		/* 820BE294h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x560);
		/* 820BE294h case    3:*/		return 0x820BE298;
		  /* 820BE298h */ case    4:  		/* b 276 */
		/* 820BE298h case    4:*/		return 0x820BE3AC;
		/* 820BE298h case    4:*/		return 0x820BE29C;
		  /* 820BE29Ch */ case    5:  		/* lwz R9, <#[R1 + 128]> */
		/* 820BE29Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 820BE29Ch case    5:*/		return 0x820BE2A0;
		  /* 820BE2A0h */ case    6:  		/* cmplwi CR6, R9, 0 */
		/* 820BE2A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820BE2A0h case    6:*/		return 0x820BE2A4;
		  /* 820BE2A4h */ case    7:  		/* bc 12, CR6_EQ, 300 */
		/* 820BE2A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE2A4h case    7:*/		return 0x820BE2A8;
		  /* 820BE2A8h */ case    8:  		/* cmplwi CR6, R15, 0 */
		/* 820BE2A8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BE2A8h case    8:*/		return 0x820BE2AC;
		  /* 820BE2ACh */ case    9:  		/* bc 12, CR6_EQ, -22752 */
		/* 820BE2ACh case    9:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BE2ACh case    9:*/		return 0x820BE2B0;
		  /* 820BE2B0h */ case   10:  		/* lwz R11, <#[R9 + 24]> */
		/* 820BE2B0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 820BE2B0h case   10:*/		return 0x820BE2B4;
		  /* 820BE2B4h */ case   11:  		/* mr R10, R22 */
		/* 820BE2B4h case   11:*/		regs.R10 = regs.R22;
		/* 820BE2B4h case   11:*/		return 0x820BE2B8;
		  /* 820BE2B8h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 820BE2B8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE2B8h case   12:*/		return 0x820BE2BC;
		  /* 820BE2BCh */ case   13:  		/* bc 4, CR6_GT, -22768 */
		/* 820BE2BCh case   13:*/		if ( !regs.CR[6].gt ) { return 0x820B89CC;  }
		/* 820BE2BCh case   13:*/		return 0x820BE2C0;
		  /* 820BE2C0h */ case   14:  		/* lwz R8, <#[R9 + 20]> */
		/* 820BE2C0h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820BE2C0h case   14:*/		return 0x820BE2C4;
		  /* 820BE2C4h */ case   15:  		/* lwz R7, <#[R1 + 144]> */
		/* 820BE2C4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 820BE2C4h case   15:*/		return 0x820BE2C8;
		  /* 820BE2C8h */ case   16:  		/* mr R11, R22 */
		/* 820BE2C8h case   16:*/		regs.R11 = regs.R22;
		/* 820BE2C8h case   16:*/		return 0x820BE2CC;
		  /* 820BE2CCh */ case   17:  		/* cmplwi CR6, R8, 0 */
		/* 820BE2CCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820BE2CCh case   17:*/		return 0x820BE2D0;
		  /* 820BE2D0h */ case   18:  		/* bc 12, CR6_EQ, 60 */
		/* 820BE2D0h case   18:*/		if ( regs.CR[6].eq ) { return 0x820BE30C;  }
		/* 820BE2D0h case   18:*/		return 0x820BE2D4;
		  /* 820BE2D4h */ case   19:  		/* lwz R8, <#[R9 + 24]> */
		/* 820BE2D4h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000018) );
		/* 820BE2D4h case   19:*/		return 0x820BE2D8;
		  /* 820BE2D8h */ case   20:  		/* lwz R6, <#[R16 + 24]> */
		/* 820BE2D8h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R16 + 0x00000018) );
		/* 820BE2D8h case   20:*/		return 0x820BE2DC;
		  /* 820BE2DCh */ case   21:  		/* mullw R8, R11, R8 */
		/* 820BE2DCh case   21:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 820BE2DCh case   21:*/		return 0x820BE2E0;
		  /* 820BE2E0h */ case   22:  		/* add R5, R8, R10 */
		/* 820BE2E0h case   22:*/		cpu::op::add<0>(regs,&regs.R5,regs.R8,regs.R10);
		/* 820BE2E0h case   22:*/		return 0x820BE2E4;
		  /* 820BE2E4h */ case   23:  		/* mullw R8, R10, R6 */
		/* 820BE2E4h case   23:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R10,regs.R6);
		/* 820BE2E4h case   23:*/		return 0x820BE2E8;
		  /* 820BE2E8h */ case   24:  		/* rlwinm R6, R5, 2, 0, 29 */
		/* 820BE2E8h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R5);
		/* 820BE2E8h case   24:*/		return 0x820BE2EC;
		  /* 820BE2ECh */ case   25:  		/* add R8, R8, R11 */
		/* 820BE2ECh case   25:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 820BE2ECh case   25:*/		return 0x820BE2F0;
		  /* 820BE2F0h */ case   26:  		/* addi R11, R11, 1 */
		/* 820BE2F0h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820BE2F0h case   26:*/		return 0x820BE2F4;
		  /* 820BE2F4h */ case   27:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820BE2F4h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820BE2F4h case   27:*/		return 0x820BE2F8;
		  /* 820BE2F8h */ case   28:  		/* lwzx R6, <#[R6 + R7]> */
		/* 820BE2F8h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 820BE2F8h case   28:*/		return 0x820BE2FC;
		  /* 820BE2FCh */ case   29:  		/* stwx R6, <#[R8 + R15]> */
		/* 820BE2FCh case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R8 + regs.R15 + 0x00000000) );
		/* 820BE2FCh case   29:*/		return 0x820BE300;
		  /* 820BE300h */ case   30:  		/* lwz R8, <#[R9 + 20]> */
		/* 820BE300h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000014) );
		/* 820BE300h case   30:*/		return 0x820BE304;
		  /* 820BE304h */ case   31:  		/* cmplw CR6, R11, R8 */
		/* 820BE304h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 820BE304h case   31:*/		return 0x820BE308;
		  /* 820BE308h */ case   32:  		/* bc 12, CR6_LT, -52 */
		/* 820BE308h case   32:*/		if ( regs.CR[6].lt ) { return 0x820BE2D4;  }
		/* 820BE308h case   32:*/		return 0x820BE30C;
	}
	return 0x820BE30C;
} // Block from 820BE288h-820BE30Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 820BE30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE30C);
		  /* 820BE30Ch */ case    0:  		/* lwz R11, <#[R9 + 24]> */
		/* 820BE30Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000018) );
		/* 820BE30Ch case    0:*/		return 0x820BE310;
		  /* 820BE310h */ case    1:  		/* addi R10, R10, 1 */
		/* 820BE310h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820BE310h case    1:*/		return 0x820BE314;
		  /* 820BE314h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 820BE314h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820BE314h case    2:*/		return 0x820BE318;
		  /* 820BE318h */ case    3:  		/* bc 12, CR6_LT, -80 */
		/* 820BE318h case    3:*/		if ( regs.CR[6].lt ) { return 0x820BE2C8;  }
		/* 820BE318h case    3:*/		return 0x820BE31C;
		  /* 820BE31Ch */ case    4:  		/* b -22864 */
		/* 820BE31Ch case    4:*/		return 0x820B89CC;
		/* 820BE31Ch case    4:*/		return 0x820BE320;
		  /* 820BE320h */ case    5:  		/* lwz R11, <#[R1 + 128]> */
		/* 820BE320h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820BE320h case    5:*/		return 0x820BE324;
		  /* 820BE324h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BE324h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE324h case    6:*/		return 0x820BE328;
		  /* 820BE328h */ case    7:  		/* bc 12, CR6_EQ, 168 */
		/* 820BE328h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BE3D0;  }
		/* 820BE328h case    7:*/		return 0x820BE32C;
		  /* 820BE32Ch */ case    8:  		/* cmplwi CR6, R15, 0 */
		/* 820BE32Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820BE32Ch case    8:*/		return 0x820BE330;
		  /* 820BE330h */ case    9:  		/* bc 12, CR6_EQ, -22884 */
		/* 820BE330h case    9:*/		if ( regs.CR[6].eq ) { return 0x820B89CC;  }
		/* 820BE330h case    9:*/		return 0x820BE334;
		  /* 820BE334h */ case   10:  		/* lwz R3, <#[R14 + 8]> */
		/* 820BE334h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000008) );
		/* 820BE334h case   10:*/		return 0x820BE338;
		  /* 820BE338h */ case   11:  		/* lis R11, -32255 */
		/* 820BE338h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BE338h case   11:*/		return 0x820BE33C;
		  /* 820BE33Ch */ case   12:  		/* li R6, 0 */
		/* 820BE33Ch case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BE33Ch case   12:*/		return 0x820BE340;
		  /* 820BE340h */ case   13:  		/* li R5, 0 */
		/* 820BE340h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BE340h case   13:*/		return 0x820BE344;
		  /* 820BE344h */ case   14:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BE344h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BE344h case   14:*/		return 0x820BE348;
		  /* 820BE348h */ case   15:  		/* lfd FR1, <#[R11 + 8928]> */
		/* 820BE348h case   15:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x000022E0) );
		/* 820BE348h case   15:*/		return 0x820BE34C;
		  /* 820BE34Ch */ case   16:  		/* bl 257756 */
		/* 820BE34Ch case   16:*/		regs.LR = 0x820BE350; return 0x820FD228;
		/* 820BE34Ch case   16:*/		return 0x820BE350;
		  /* 820BE350h */ case   17:  		/* lwz R10, <#[R1 + 144]> */
		/* 820BE350h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820BE350h case   17:*/		return 0x820BE354;
		  /* 820BE354h */ case   18:  		/* mr R31, R3 */
		/* 820BE354h case   18:*/		regs.R31 = regs.R3;
		/* 820BE354h case   18:*/		return 0x820BE358;
		  /* 820BE358h */ case   19:  		/* li R11, -1 */
		/* 820BE358h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820BE358h case   19:*/		return 0x820BE35C;
		  /* 820BE35Ch */ case   20:  		/* lis R5, 8272 */
		/* 820BE35Ch case   20:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820BE35Ch case   20:*/		return 0x820BE360;
		  /* 820BE360h */ case   21:  		/* li R9, 6 */
		/* 820BE360h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820BE360h case   21:*/		return 0x820BE364;
		  /* 820BE364h */ case   22:  		/* lwz R3, <#[R10 + 8]> */
		/* 820BE364h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000008) );
		/* 820BE364h case   22:*/		return 0x820BE368;
		  /* 820BE368h */ case   23:  		/* addi R8, R1, 656 */
		/* 820BE368h case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x290);
		/* 820BE368h case   23:*/		return 0x820BE36C;
		  /* 820BE36Ch */ case   24:  		/* addi R7, R1, 720 */
		/* 820BE36Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2D0);
		/* 820BE36Ch case   24:*/		return 0x820BE370;
		  /* 820BE370h */ case   25:  		/* stw R3, <#[R1 + 720]> */
		/* 820BE370h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000002D0) );
		/* 820BE370h case   25:*/		return 0x820BE374;
		  /* 820BE374h */ case   26:  		/* lwz R30, <#[R10 + 4]> */
		/* 820BE374h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000004) );
		/* 820BE374h case   26:*/		return 0x820BE378;
		  /* 820BE378h */ case   27:  		/* stw R30, <#[R1 + 724]> */
		/* 820BE378h case   27:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000002D4) );
		/* 820BE378h case   27:*/		return 0x820BE37C;
		  /* 820BE37Ch */ case   28:  		/* lwz R30, <#[R10]> */
		/* 820BE37Ch case   28:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 820BE37Ch case   28:*/		return 0x820BE380;
		  /* 820BE380h */ case   29:  		/* stw R30, <#[R1 + 728]> */
		/* 820BE380h case   29:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000002D8) );
		/* 820BE380h case   29:*/		return 0x820BE384;
		  /* 820BE384h */ case   30:  		/* lwz R10, <#[R10 + 12]> */
		/* 820BE384h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 820BE384h case   30:*/		return 0x820BE388;
		  /* 820BE388h */ case   31:  		/* stw R31, <#[R1 + 656]> */
		/* 820BE388h case   31:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000290) );
		/* 820BE388h case   31:*/		return 0x820BE38C;
		  /* 820BE38Ch */ case   32:  		/* stw R31, <#[R1 + 660]> */
		/* 820BE38Ch case   32:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000294) );
		/* 820BE38Ch case   32:*/		return 0x820BE390;
		  /* 820BE390h */ case   33:  		/* stw R31, <#[R1 + 664]> */
		/* 820BE390h case   33:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000298) );
		/* 820BE390h case   33:*/		return 0x820BE394;
		  /* 820BE394h */ case   34:  		/* stw R31, <#[R1 + 668]> */
		/* 820BE394h case   34:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000029C) );
		/* 820BE394h case   34:*/		return 0x820BE398;
		  /* 820BE398h */ case   35:  		/* stw R10, <#[R1 + 732]> */
		/* 820BE398h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000002DC) );
		/* 820BE398h case   35:*/		return 0x820BE39C;
		  /* 820BE39Ch */ case   36:  		/* stw R11, <#[R15]> */
		/* 820BE39Ch case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 820BE39Ch case   36:*/		return 0x820BE3A0;
		  /* 820BE3A0h */ case   37:  		/* stw R11, <#[R15 + 4]> */
		/* 820BE3A0h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000004) );
		/* 820BE3A0h case   37:*/		return 0x820BE3A4;
		  /* 820BE3A4h */ case   38:  		/* stw R11, <#[R15 + 8]> */
		/* 820BE3A4h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 820BE3A4h case   38:*/		return 0x820BE3A8;
		  /* 820BE3A8h */ case   39:  		/* stw R11, <#[R15 + 12]> */
		/* 820BE3A8h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000000C) );
		/* 820BE3A8h case   39:*/		return 0x820BE3AC;
	}
	return 0x820BE3AC;
} // Block from 820BE30Ch-820BE3ACh (40 instructions)

//////////////////////////////////////////////////////
// Block at 820BE3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE3AC);
		  /* 820BE3ACh */ case    0:  		/* ori R5, R5, 4 */
		/* 820BE3ACh case    0:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x4);
		/* 820BE3ACh case    0:*/		return 0x820BE3B0;
		  /* 820BE3B0h */ case    1:  		/* b -3200 */
		/* 820BE3B0h case    1:*/		return 0x820BD730;
		/* 820BE3B0h case    1:*/		return 0x820BE3B4;
	}
	return 0x820BE3B4;
} // Block from 820BE3ACh-820BE3B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BE3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE3B4);
		  /* 820BE3B4h */ case    0:  		/* lis R11, -32255 */
		/* 820BE3B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BE3B4h case    0:*/		return 0x820BE3B8;
		  /* 820BE3B8h */ case    1:  		/* lwz R7, <#[R16 + 56]> */
		/* 820BE3B8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R16 + 0x00000038) );
		/* 820BE3B8h case    1:*/		return 0x820BE3BC;
		  /* 820BE3BCh */ case    2:  		/* li R5, 3042 */
		/* 820BE3BCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xBE2);
		/* 820BE3BCh case    2:*/		return 0x820BE3C0;
		  /* 820BE3C0h */ case    3:  		/* addi R6, R11, 8880 */
		/* 820BE3C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x22B0);
		/* 820BE3C0h case    3:*/		return 0x820BE3C4;
		  /* 820BE3C4h */ case    4:  		/* mr R4, R16 */
		/* 820BE3C4h case    4:*/		regs.R4 = regs.R16;
		/* 820BE3C4h case    4:*/		return 0x820BE3C8;
		  /* 820BE3C8h */ case    5:  		/* mr R3, R14 */
		/* 820BE3C8h case    5:*/		regs.R3 = regs.R14;
		/* 820BE3C8h case    5:*/		return 0x820BE3CC;
		  /* 820BE3CCh */ case    6:  		/* bl -55772 */
		/* 820BE3CCh case    6:*/		regs.LR = 0x820BE3D0; return 0x820B09F0;
		/* 820BE3CCh case    6:*/		return 0x820BE3D0;
	}
	return 0x820BE3D0;
} // Block from 820BE3B4h-820BE3D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BE3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE3D0);
		  /* 820BE3D0h */ case    0:  		/* lis R31, -32768 */
		/* 820BE3D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8000);
		/* 820BE3D0h case    0:*/		return 0x820BE3D4;
		  /* 820BE3D4h */ case    1:  		/* ori R31, R31, 16389 */
		/* 820BE3D4h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x4005);
		/* 820BE3D4h case    1:*/		return 0x820BE3D8;
	}
	return 0x820BE3D8;
} // Block from 820BE3D0h-820BE3D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BE3D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE3D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE3D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE3D8);
		  /* 820BE3D8h */ case    0:  		/* lwz R10, <#[R1 + 1716]> */
		/* 820BE3D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000006B4) );
		/* 820BE3D8h case    0:*/		return 0x820BE3DC;
		  /* 820BE3DCh */ case    1:  		/* addi R11, R1, 144 */
		/* 820BE3DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 820BE3DCh case    1:*/		return 0x820BE3E0;
		  /* 820BE3E0h */ case    2:  		/* lwz R9, <#[R1 + 528]> */
		/* 820BE3E0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000210) );
		/* 820BE3E0h case    2:*/		return 0x820BE3E4;
		  /* 820BE3E4h */ case    3:  		/* li R30, 4 */
		/* 820BE3E4h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 820BE3E4h case    3:*/		return 0x820BE3E8;
		  /* 820BE3E8h */ case    4:  		/* lwz R8, <#[R1 + 532]> */
		/* 820BE3E8h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000214) );
		/* 820BE3E8h case    4:*/		return 0x820BE3EC;
		  /* 820BE3ECh */ case    5:  		/* addi R29, R11, -4 */
		/* 820BE3ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 820BE3ECh case    5:*/		return 0x820BE3F0;
		  /* 820BE3F0h */ case    6:  		/* stw R9, <#[R10 + 28]> */
		/* 820BE3F0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x0000001C) );
		/* 820BE3F0h case    6:*/		return 0x820BE3F4;
		  /* 820BE3F4h */ case    7:  		/* stw R8, <#[R10 + 100]> */
		/* 820BE3F4h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000064) );
		/* 820BE3F4h case    7:*/		return 0x820BE3F8;
		  /* 820BE3F8h */ case    8:  		/* lis R4, 9345 */
		/* 820BE3F8h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820BE3F8h case    8:*/		return 0x820BE3FC;
		  /* 820BE3FCh */ case    9:  		/* lwzu R3, <#[R29 + 4]> */
		/* 820BE3FCh case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 820BE3FCh case    9:*/		return 0x820BE400;
		  /* 820BE400h */ case   10:  		/* bl -221384 */
		/* 820BE400h case   10:*/		regs.LR = 0x820BE404; return 0x82088338;
		/* 820BE400h case   10:*/		return 0x820BE404;
		  /* 820BE404h */ case   11:  		/* addic. R30, R30, -1 */
		/* 820BE404h case   11:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 820BE404h case   11:*/		return 0x820BE408;
		  /* 820BE408h */ case   12:  		/* bc 4, CR0_EQ, -16 */
		/* 820BE408h case   12:*/		if ( !regs.CR[0].eq ) { return 0x820BE3F8;  }
		/* 820BE408h case   12:*/		return 0x820BE40C;
		  /* 820BE40Ch */ case   13:  		/* mr R3, R31 */
		/* 820BE40Ch case   13:*/		regs.R3 = regs.R31;
		/* 820BE40Ch case   13:*/		return 0x820BE410;
		  /* 820BE410h */ case   14:  		/* b 12 */
		/* 820BE410h case   14:*/		return 0x820BE41C;
		/* 820BE410h case   14:*/		return 0x820BE414;
	}
	return 0x820BE414;
} // Block from 820BE3D8h-820BE414h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820BE414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE414);
		  /* 820BE414h */ case    0:  		/* lis R3, -32768 */
		/* 820BE414h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820BE414h case    0:*/		return 0x820BE418;
		  /* 820BE418h */ case    1:  		/* ori R3, R3, 16389 */
		/* 820BE418h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820BE418h case    1:*/		return 0x820BE41C;
	}
	return 0x820BE41C;
} // Block from 820BE414h-820BE41Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BE41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE41C);
		  /* 820BE41Ch */ case    0:  		/* addi R1, R1, 1696 */
		/* 820BE41Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x6A0);
		/* 820BE41Ch case    0:*/		return 0x820BE420;
		  /* 820BE420h */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 820BE420h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820BE420h case    1:*/		return 0x820BE424;
		  /* 820BE424h */ case    2:  		/* b -184756 */
		/* 820BE424h case    2:*/		return 0x82091270;
		/* 820BE424h case    2:*/		return 0x820BE428;
	}
	return 0x820BE428;
} // Block from 820BE41Ch-820BE428h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BE428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE428);
		  /* 820BE428h */ case    0:  		/* mfspr R12, LR */
		/* 820BE428h case    0:*/		regs.R12 = regs.LR;
		/* 820BE428h case    0:*/		return 0x820BE42C;
		  /* 820BE42Ch */ case    1:  		/* bl -184836 */
		/* 820BE42Ch case    1:*/		regs.LR = 0x820BE430; return 0x82091228;
		/* 820BE42Ch case    1:*/		return 0x820BE430;
		  /* 820BE430h */ case    2:  		/* stfd FR29, <#[R1 - 160]> */
		/* 820BE430h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820BE430h case    2:*/		return 0x820BE434;
		  /* 820BE434h */ case    3:  		/* stfd FR30, <#[R1 - 152]> */
		/* 820BE434h case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 820BE434h case    3:*/		return 0x820BE438;
		  /* 820BE438h */ case    4:  		/* stfd FR31, <#[R1 - 144]> */
		/* 820BE438h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 820BE438h case    4:*/		return 0x820BE43C;
		  /* 820BE43Ch */ case    5:  		/* stwu R1, <#[R1 - 480]> */
		/* 820BE43Ch case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE20);
		/* 820BE43Ch case    5:*/		return 0x820BE440;
		  /* 820BE440h */ case    6:  		/* mr R30, R3 */
		/* 820BE440h case    6:*/		regs.R30 = regs.R3;
		/* 820BE440h case    6:*/		return 0x820BE444;
		  /* 820BE444h */ case    7:  		/* mr R21, R4 */
		/* 820BE444h case    7:*/		regs.R21 = regs.R4;
		/* 820BE444h case    7:*/		return 0x820BE448;
		  /* 820BE448h */ case    8:  		/* mr R16, R5 */
		/* 820BE448h case    8:*/		regs.R16 = regs.R5;
		/* 820BE448h case    8:*/		return 0x820BE44C;
		  /* 820BE44Ch */ case    9:  		/* mr R20, R6 */
		/* 820BE44Ch case    9:*/		regs.R20 = regs.R6;
		/* 820BE44Ch case    9:*/		return 0x820BE450;
		  /* 820BE450h */ case   10:  		/* mr R19, R7 */
		/* 820BE450h case   10:*/		regs.R19 = regs.R7;
		/* 820BE450h case   10:*/		return 0x820BE454;
		  /* 820BE454h */ case   11:  		/* mr R29, R8 */
		/* 820BE454h case   11:*/		regs.R29 = regs.R8;
		/* 820BE454h case   11:*/		return 0x820BE458;
		  /* 820BE458h */ case   12:  		/* mr R31, R9 */
		/* 820BE458h case   12:*/		regs.R31 = regs.R9;
		/* 820BE458h case   12:*/		return 0x820BE45C;
		  /* 820BE45Ch */ case   13:  		/* mr R24, R10 */
		/* 820BE45Ch case   13:*/		regs.R24 = regs.R10;
		/* 820BE45Ch case   13:*/		return 0x820BE460;
		  /* 820BE460h */ case   14:  		/* cmplwi CR6, R8, 0 */
		/* 820BE460h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820BE460h case   14:*/		return 0x820BE464;
		  /* 820BE464h */ case   15:  		/* bc 12, CR6_EQ, 496 */
		/* 820BE464h case   15:*/		if ( regs.CR[6].eq ) { return 0x820BE654;  }
		/* 820BE464h case   15:*/		return 0x820BE468;
		  /* 820BE468h */ case   16:  		/* li R17, 0 */
		/* 820BE468h case   16:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 820BE468h case   16:*/		return 0x820BE46C;
		  /* 820BE46Ch */ case   17:  		/* li R26, 1 */
		/* 820BE46Ch case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 820BE46Ch case   17:*/		return 0x820BE470;
		  /* 820BE470h */ case   18:  		/* cmplwi CR6, R6, 0 */
		/* 820BE470h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820BE470h case   18:*/		return 0x820BE474;
		  /* 820BE474h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 820BE474h case   19:*/		if ( regs.CR[6].eq ) { return 0x820BE484;  }
		/* 820BE474h case   19:*/		return 0x820BE478;
		  /* 820BE478h */ case   20:  		/* divwu R25, R8, R6 */
		/* 820BE478h case   20:*/		cpu::op::divwu<0>(regs,&regs.R25,regs.R8,regs.R6);
		/* 820BE478h case   20:*/		return 0x820BE47C;
		  /* 820BE47Ch */ case   21:  		/* twi 6, R6, 0 */
		/* 820BE47Ch case   21:*/		cpu::op::tw<6>(regs, 0x820BE47C, regs.R6, 0x00000000);
		/* 820BE47Ch case   21:*/		return 0x820BE480;
		  /* 820BE480h */ case   22:  		/* b 8 */
		/* 820BE480h case   22:*/		return 0x820BE488;
		/* 820BE480h case   22:*/		return 0x820BE484;
	}
	return 0x820BE484;
} // Block from 820BE428h-820BE484h (23 instructions)

//////////////////////////////////////////////////////
// Block at 820BE484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE484);
		  /* 820BE484h */ case    0:  		/* mr R25, R26 */
		/* 820BE484h case    0:*/		regs.R25 = regs.R26;
		/* 820BE484h case    0:*/		return 0x820BE488;
	}
	return 0x820BE488;
} // Block from 820BE484h-820BE488h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE488);
		  /* 820BE488h */ case    0:  		/* addi R5, R1, 192 */
		/* 820BE488h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xC0);
		/* 820BE488h case    0:*/		return 0x820BE48C;
		  /* 820BE48Ch */ case    1:  		/* lwz R4, <#[R24]> */
		/* 820BE48Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000000) );
		/* 820BE48Ch case    1:*/		return 0x820BE490;
		  /* 820BE490h */ case    2:  		/* mr R3, R30 */
		/* 820BE490h case    2:*/		regs.R3 = regs.R30;
		/* 820BE490h case    2:*/		return 0x820BE494;
		  /* 820BE494h */ case    3:  		/* bl -63092 */
		/* 820BE494h case    3:*/		regs.LR = 0x820BE498; return 0x820AEE20;
		/* 820BE494h case    3:*/		return 0x820BE498;
		  /* 820BE498h */ case    4:  		/* lis R11, -32256 */
		/* 820BE498h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820BE498h case    4:*/		return 0x820BE49C;
		  /* 820BE49Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820BE49Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE49Ch case    5:*/		return 0x820BE4A0;
		  /* 820BE4A0h */ case    6:  		/* lfd FR29, <#[R11 + 1808]> */
		/* 820BE4A0h case    6:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000710) );
		/* 820BE4A0h case    6:*/		return 0x820BE4A4;
		  /* 820BE4A4h */ case    7:  		/* bc 12, CR0_LT, 216 */
		/* 820BE4A4h case    7:*/		if ( regs.CR[0].lt ) { return 0x820BE57C;  }
		/* 820BE4A4h case    7:*/		return 0x820BE4A8;
		  /* 820BE4A8h */ case    8:  		/* lfd FR0, <#[R1 + 192]> */
		/* 820BE4A8h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BE4A8h case    8:*/		return 0x820BE4AC;
		  /* 820BE4ACh */ case    9:  		/* fcmpu CR6, FR0, FR29 */
		/* 820BE4ACh case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR29);
		/* 820BE4ACh case    9:*/		return 0x820BE4B0;
		  /* 820BE4B0h */ case   10:  		/* bc 4, CR6_LT, 16 */
		/* 820BE4B0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x820BE4C0;  }
		/* 820BE4B0h case   10:*/		return 0x820BE4B4;
		  /* 820BE4B4h */ case   11:  		/* lfd FR13, <#[R30 + 184]> */
		/* 820BE4B4h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R30 + 0x000000B8) );
		/* 820BE4B4h case   11:*/		return 0x820BE4B8;
		  /* 820BE4B8h */ case   12:  		/* fsub FR30, FR0, FR13 */
		/* 820BE4B8h case   12:*/		cpu::op::fsub<0>(regs,&regs.FR30,regs.FR0,regs.FR13);
		/* 820BE4B8h case   12:*/		return 0x820BE4BC;
		  /* 820BE4BCh */ case   13:  		/* b 28 */
		/* 820BE4BCh case   13:*/		return 0x820BE4D8;
		/* 820BE4BCh case   13:*/		return 0x820BE4C0;
	}
	return 0x820BE4C0;
} // Block from 820BE488h-820BE4C0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820BE4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE4C0);
		  /* 820BE4C0h */ case    0:  		/* fcmpu CR6, FR0, FR29 */
		/* 820BE4C0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR29);
		/* 820BE4C0h case    0:*/		return 0x820BE4C4;
		  /* 820BE4C4h */ case    1:  		/* bc 4, CR6_GT, 16 */
		/* 820BE4C4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820BE4D4;  }
		/* 820BE4C4h case    1:*/		return 0x820BE4C8;
		  /* 820BE4C8h */ case    2:  		/* lfd FR13, <#[R30 + 184]> */
		/* 820BE4C8h case    2:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R30 + 0x000000B8) );
		/* 820BE4C8h case    2:*/		return 0x820BE4CC;
		  /* 820BE4CCh */ case    3:  		/* fadd FR30, FR13, FR0 */
		/* 820BE4CCh case    3:*/		cpu::op::fadd<0>(regs,&regs.FR30,regs.FR13,regs.FR0);
		/* 820BE4CCh case    3:*/		return 0x820BE4D0;
		  /* 820BE4D0h */ case    4:  		/* b 8 */
		/* 820BE4D0h case    4:*/		return 0x820BE4D8;
		/* 820BE4D0h case    4:*/		return 0x820BE4D4;
	}
	return 0x820BE4D4;
} // Block from 820BE4C0h-820BE4D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BE4D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE4D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE4D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE4D4);
		  /* 820BE4D4h */ case    0:  		/* fmr FR30, FR29 */
		/* 820BE4D4h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR29);
		/* 820BE4D4h case    0:*/		return 0x820BE4D8;
	}
	return 0x820BE4D8;
} // Block from 820BE4D4h-820BE4D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE4D8);
		  /* 820BE4D8h */ case    0:  		/* lfd FR0, <#[R1 + 200]> */
		/* 820BE4D8h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C8) );
		/* 820BE4D8h case    0:*/		return 0x820BE4DC;
		  /* 820BE4DCh */ case    1:  		/* fcmpu CR6, FR0, FR29 */
		/* 820BE4DCh case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR29);
		/* 820BE4DCh case    1:*/		return 0x820BE4E0;
		  /* 820BE4E0h */ case    2:  		/* bc 4, CR6_LT, 16 */
		/* 820BE4E0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820BE4F0;  }
		/* 820BE4E0h case    2:*/		return 0x820BE4E4;
		  /* 820BE4E4h */ case    3:  		/* lfd FR13, <#[R30 + 184]> */
		/* 820BE4E4h case    3:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R30 + 0x000000B8) );
		/* 820BE4E4h case    3:*/		return 0x820BE4E8;
		  /* 820BE4E8h */ case    4:  		/* fsub FR31, FR0, FR13 */
		/* 820BE4E8h case    4:*/		cpu::op::fsub<0>(regs,&regs.FR31,regs.FR0,regs.FR13);
		/* 820BE4E8h case    4:*/		return 0x820BE4EC;
		  /* 820BE4ECh */ case    5:  		/* b 28 */
		/* 820BE4ECh case    5:*/		return 0x820BE508;
		/* 820BE4ECh case    5:*/		return 0x820BE4F0;
	}
	return 0x820BE4F0;
} // Block from 820BE4D8h-820BE4F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BE4F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE4F0);
		  /* 820BE4F0h */ case    0:  		/* fcmpu CR6, FR0, FR29 */
		/* 820BE4F0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR29);
		/* 820BE4F0h case    0:*/		return 0x820BE4F4;
		  /* 820BE4F4h */ case    1:  		/* bc 4, CR6_GT, 16 */
		/* 820BE4F4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820BE504;  }
		/* 820BE4F4h case    1:*/		return 0x820BE4F8;
		  /* 820BE4F8h */ case    2:  		/* lfd FR13, <#[R30 + 184]> */
		/* 820BE4F8h case    2:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R30 + 0x000000B8) );
		/* 820BE4F8h case    2:*/		return 0x820BE4FC;
		  /* 820BE4FCh */ case    3:  		/* fadd FR31, FR13, FR0 */
		/* 820BE4FCh case    3:*/		cpu::op::fadd<0>(regs,&regs.FR31,regs.FR13,regs.FR0);
		/* 820BE4FCh case    3:*/		return 0x820BE500;
		  /* 820BE500h */ case    4:  		/* b 8 */
		/* 820BE500h case    4:*/		return 0x820BE508;
		/* 820BE500h case    4:*/		return 0x820BE504;
	}
	return 0x820BE504;
} // Block from 820BE4F0h-820BE504h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BE504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE504);
		  /* 820BE504h */ case    0:  		/* fmr FR31, FR29 */
		/* 820BE504h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR29);
		/* 820BE504h case    0:*/		return 0x820BE508;
	}
	return 0x820BE508;
} // Block from 820BE504h-820BE508h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE508);
		  /* 820BE508h */ case    0:  		/* fmr FR1, FR30 */
		/* 820BE508h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 820BE508h case    0:*/		return 0x820BE50C;
		  /* 820BE50Ch */ case    1:  		/* bl -156988 */
		/* 820BE50Ch case    1:*/		regs.LR = 0x820BE510; return 0x82097FD0;
		/* 820BE50Ch case    1:*/		return 0x820BE510;
		  /* 820BE510h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 820BE510h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE510h case    2:*/		return 0x820BE514;
		  /* 820BE514h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 820BE514h case    3:*/		if ( regs.CR[0].eq ) { return 0x820BE530;  }
		/* 820BE514h case    3:*/		return 0x820BE518;
		  /* 820BE518h */ case    4:  		/* fcmpu CR6, FR30, FR29 */
		/* 820BE518h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR29);
		/* 820BE518h case    4:*/		return 0x820BE51C;
		  /* 820BE51Ch */ case    5:  		/* bc 12, CR6_LT, 20 */
		/* 820BE51Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x820BE530;  }
		/* 820BE51Ch case    5:*/		return 0x820BE520;
		  /* 820BE520h */ case    6:  		/* fctidz FR0, FR30 */
		/* 820BE520h case    6:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR30);
		/* 820BE520h case    6:*/		return 0x820BE524;
		  /* 820BE524h */ case    7:  		/* stfd FR0, <#[R1 + 192]> */
		/* 820BE524h case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BE524h case    7:*/		return 0x820BE528;
		  /* 820BE528h */ case    8:  		/* lwz R17, <#[R1 + 196]> */
		/* 820BE528h case    8:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x000000C4) );
		/* 820BE528h case    8:*/		return 0x820BE52C;
		  /* 820BE52Ch */ case    9:  		/* b 8 */
		/* 820BE52Ch case    9:*/		return 0x820BE534;
		/* 820BE52Ch case    9:*/		return 0x820BE530;
	}
	return 0x820BE530;
} // Block from 820BE508h-820BE530h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BE530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE530);
		  /* 820BE530h */ case    0:  		/* li R17, 0 */
		/* 820BE530h case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 820BE530h case    0:*/		return 0x820BE534;
	}
	return 0x820BE534;
} // Block from 820BE530h-820BE534h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE534);
		  /* 820BE534h */ case    0:  		/* fcmpu CR6, FR31, FR29 */
		/* 820BE534h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR29);
		/* 820BE534h case    0:*/		return 0x820BE538;
		  /* 820BE538h */ case    1:  		/* bc 12, CR6_LT, 256 */
		/* 820BE538h case    1:*/		if ( regs.CR[6].lt ) { return 0x820BE638;  }
		/* 820BE538h case    1:*/		return 0x820BE53C;
		  /* 820BE53Ch */ case    2:  		/* mullw R11, R17, R20 */
		/* 820BE53Ch case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R17,regs.R20);
		/* 820BE53Ch case    2:*/		return 0x820BE540;
		  /* 820BE540h */ case    3:  		/* cmplw CR6, R11, R29 */
		/* 820BE540h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 820BE540h case    3:*/		return 0x820BE544;
		  /* 820BE544h */ case    4:  		/* bc 4, CR6_LT, 244 */
		/* 820BE544h case    4:*/		if ( !regs.CR[6].lt ) { return 0x820BE638;  }
		/* 820BE544h case    4:*/		return 0x820BE548;
		  /* 820BE548h */ case    5:  		/* fmr FR1, FR31 */
		/* 820BE548h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820BE548h case    5:*/		return 0x820BE54C;
		  /* 820BE54Ch */ case    6:  		/* bl -157052 */
		/* 820BE54Ch case    6:*/		regs.LR = 0x820BE550; return 0x82097FD0;
		/* 820BE54Ch case    6:*/		return 0x820BE550;
		  /* 820BE550h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820BE550h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE550h case    7:*/		return 0x820BE554;
		  /* 820BE554h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 820BE554h case    8:*/		if ( regs.CR[0].eq ) { return 0x820BE568;  }
		/* 820BE554h case    8:*/		return 0x820BE558;
		  /* 820BE558h */ case    9:  		/* fctidz FR0, FR31 */
		/* 820BE558h case    9:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR31);
		/* 820BE558h case    9:*/		return 0x820BE55C;
		  /* 820BE55Ch */ case   10:  		/* stfd FR0, <#[R1 + 192]> */
		/* 820BE55Ch case   10:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BE55Ch case   10:*/		return 0x820BE560;
		  /* 820BE560h */ case   11:  		/* lwz R11, <#[R1 + 196]> */
		/* 820BE560h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C4) );
		/* 820BE560h case   11:*/		return 0x820BE564;
		  /* 820BE564h */ case   12:  		/* b 8 */
		/* 820BE564h case   12:*/		return 0x820BE56C;
		/* 820BE564h case   12:*/		return 0x820BE568;
	}
	return 0x820BE568;
} // Block from 820BE534h-820BE568h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820BE568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE568);
		  /* 820BE568h */ case    0:  		/* addi R11, R25, -1 */
		/* 820BE568h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 820BE568h case    0:*/		return 0x820BE56C;
	}
	return 0x820BE56C;
} // Block from 820BE568h-820BE56Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE56C);
		  /* 820BE56Ch */ case    0:  		/* addi R11, R11, 1 */
		/* 820BE56Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820BE56Ch case    0:*/		return 0x820BE570;
		  /* 820BE570h */ case    1:  		/* cmplw CR6, R25, R11 */
		/* 820BE570h case    1:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 820BE570h case    1:*/		return 0x820BE574;
		  /* 820BE574h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 820BE574h case    2:*/		if ( !regs.CR[6].gt ) { return 0x820BE57C;  }
		/* 820BE574h case    2:*/		return 0x820BE578;
		  /* 820BE578h */ case    3:  		/* mr R25, R11 */
		/* 820BE578h case    3:*/		regs.R25 = regs.R11;
		/* 820BE578h case    3:*/		return 0x820BE57C;
	}
	return 0x820BE57C;
} // Block from 820BE56Ch-820BE57Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BE57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE57C);
		  /* 820BE57Ch */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 820BE57Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820BE57Ch case    0:*/		return 0x820BE580;
		  /* 820BE580h */ case    1:  		/* bc 12, CR6_EQ, 4996 */
		/* 820BE580h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BF904;  }
		/* 820BE580h case    1:*/		return 0x820BE584;
		  /* 820BE584h */ case    2:  		/* lwz R27, <#[R1 + 564]> */
		/* 820BE584h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000234) );
		/* 820BE584h case    2:*/		return 0x820BE588;
		  /* 820BE588h */ case    3:  		/* cmpwi CR6, R27, 0 */
		/* 820BE588h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820BE588h case    3:*/		return 0x820BE58C;
		  /* 820BE58Ch */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 820BE58Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BE5AC;  }
		/* 820BE58Ch case    4:*/		return 0x820BE590;
		  /* 820BE590h */ case    5:  		/* mr R6, R29 */
		/* 820BE590h case    5:*/		regs.R6 = regs.R29;
		/* 820BE590h case    5:*/		return 0x820BE594;
		  /* 820BE594h */ case    6:  		/* mr R5, R19 */
		/* 820BE594h case    6:*/		regs.R5 = regs.R19;
		/* 820BE594h case    6:*/		return 0x820BE598;
		  /* 820BE598h */ case    7:  		/* mr R4, R31 */
		/* 820BE598h case    7:*/		regs.R4 = regs.R31;
		/* 820BE598h case    7:*/		return 0x820BE59C;
		  /* 820BE59Ch */ case    8:  		/* mr R3, R30 */
		/* 820BE59Ch case    8:*/		regs.R3 = regs.R30;
		/* 820BE59Ch case    8:*/		return 0x820BE5A0;
		  /* 820BE5A0h */ case    9:  		/* bl -39872 */
		/* 820BE5A0h case    9:*/		regs.LR = 0x820BE5A4; return 0x820B49E0;
		/* 820BE5A0h case    9:*/		return 0x820BE5A4;
		  /* 820BE5A4h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820BE5A4h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE5A4h case   10:*/		return 0x820BE5A8;
		  /* 820BE5A8h */ case   11:  		/* bc 12, CR0_LT, 4960 */
		/* 820BE5A8h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BE5A8h case   11:*/		return 0x820BE5AC;
	}
	return 0x820BE5AC;
} // Block from 820BE57Ch-820BE5ACh (12 instructions)

//////////////////////////////////////////////////////
// Block at 820BE5ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE5AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE5AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE5AC);
		  /* 820BE5ACh */ case    0:  		/* li R18, -1 */
		/* 820BE5ACh case    0:*/		cpu::op::li<0>(regs,&regs.R18,0xFFFFFFFF);
		/* 820BE5ACh case    0:*/		return 0x820BE5B0;
		  /* 820BE5B0h */ case    1:  		/* li R10, 0 */
		/* 820BE5B0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820BE5B0h case    1:*/		return 0x820BE5B4;
		  /* 820BE5B4h */ case    2:  		/* mr R11, R18 */
		/* 820BE5B4h case    2:*/		regs.R11 = regs.R18;
		/* 820BE5B4h case    2:*/		return 0x820BE5B8;
		  /* 820BE5B8h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 820BE5B8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820BE5B8h case    3:*/		return 0x820BE5BC;
		  /* 820BE5BCh */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 820BE5BCh case    4:*/		if ( regs.CR[6].eq ) { return 0x820BE5FC;  }
		/* 820BE5BCh case    4:*/		return 0x820BE5C0;
		  /* 820BE5C0h */ case    5:  		/* lwz R8, <#[R30 + 8]> */
		/* 820BE5C0h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE5C0h case    5:*/		return 0x820BE5C4;
		  /* 820BE5C4h */ case    6:  		/* addi R9, R19, -4 */
		/* 820BE5C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R19,0xFFFFFFFC);
		/* 820BE5C4h case    6:*/		return 0x820BE5C8;
		  /* 820BE5C8h */ case    7:  		/* mtspr CTR, R29 */
		/* 820BE5C8h case    7:*/		regs.CTR = regs.R29;
		/* 820BE5C8h case    7:*/		return 0x820BE5CC;
		  /* 820BE5CCh */ case    8:  		/* lwz R6, <#[R8 + 16]> */
		/* 820BE5CCh case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000010) );
		/* 820BE5CCh case    8:*/		return 0x820BE5D0;
		  /* 820BE5D0h */ case    9:  		/* lwzu R7, <#[R9 + 4]> */
		/* 820BE5D0h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BE5D0h case    9:*/		return 0x820BE5D4;
		  /* 820BE5D4h */ case   10:  		/* lwz R5, <#[R8 + 20]> */
		/* 820BE5D4h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000014) );
		/* 820BE5D4h case   10:*/		return 0x820BE5D8;
		  /* 820BE5D8h */ case   11:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820BE5D8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820BE5D8h case   11:*/		return 0x820BE5DC;
		  /* 820BE5DCh */ case   12:  		/* lwzx R7, <#[R5 + R7]> */
		/* 820BE5DCh case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 820BE5DCh case   12:*/		return 0x820BE5E0;
		  /* 820BE5E0h */ case   13:  		/* lwz R7, <#[R7 + 4]> */
		/* 820BE5E0h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820BE5E0h case   13:*/		return 0x820BE5E4;
		  /* 820BE5E4h */ case   14:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 820BE5E4h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 820BE5E4h case   14:*/		return 0x820BE5E8;
		  /* 820BE5E8h */ case   15:  		/* lwzx R7, <#[R7 + R6]> */
		/* 820BE5E8h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 820BE5E8h case   15:*/		return 0x820BE5EC;
		  /* 820BE5ECh */ case   16:  		/* lwz R7, <#[R7 + 4]> */
		/* 820BE5ECh case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000004) );
		/* 820BE5ECh case   16:*/		return 0x820BE5F0;
		  /* 820BE5F0h */ case   17:  		/* or R10, R7, R10 */
		/* 820BE5F0h case   17:*/		cpu::op::or<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 820BE5F0h case   17:*/		return 0x820BE5F4;
		  /* 820BE5F4h */ case   18:  		/* and R11, R7, R11 */
		/* 820BE5F4h case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 820BE5F4h case   18:*/		return 0x820BE5F8;
		  /* 820BE5F8h */ case   19:  		/* bc 16, CR0_LT, -40 */
		/* 820BE5F8h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BE5D0;  }
		/* 820BE5F8h case   19:*/		return 0x820BE5FC;
	}
	return 0x820BE5FC;
} // Block from 820BE5ACh-820BE5FCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 820BE5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE5FC);
		  /* 820BE5FCh */ case    0:  		/* nor R9, R10, R10 */
		/* 820BE5FCh case    0:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R10,regs.R10);
		/* 820BE5FCh case    0:*/		return 0x820BE600;
		  /* 820BE600h */ case    1:  		/* rlwinm. R10, R10, 0, 11, 11 */
		/* 820BE600h case    1:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R10,regs.R10);
		/* 820BE600h case    1:*/		return 0x820BE604;
		  /* 820BE604h */ case    2:  		/* rlwinm R28, R9, 25, 31, 31 */
		/* 820BE604h case    2:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R28,regs.R9);
		/* 820BE604h case    2:*/		return 0x820BE608;
		  /* 820BE608h */ case    3:  		/* rlwinm R31, R11, 0, 30, 30 */
		/* 820BE608h case    3:*/		cpu::op::rlwinm<0,0,30,30>(regs,&regs.R31,regs.R11);
		/* 820BE608h case    3:*/		return 0x820BE60C;
		  /* 820BE60Ch */ case    4:  		/* rlwinm R3, R11, 0, 25, 25 */
		/* 820BE60Ch case    4:*/		cpu::op::rlwinm<0,0,25,25>(regs,&regs.R3,regs.R11);
		/* 820BE60Ch case    4:*/		return 0x820BE610;
		  /* 820BE610h */ case    5:  		/* rlwinm R4, R11, 0, 21, 21 */
		/* 820BE610h case    5:*/		cpu::op::rlwinm<0,0,21,21>(regs,&regs.R4,regs.R11);
		/* 820BE610h case    5:*/		return 0x820BE614;
		  /* 820BE614h */ case    6:  		/* bc 12, CR0_EQ, 80 */
		/* 820BE614h case    6:*/		if ( regs.CR[0].eq ) { return 0x820BE664;  }
		/* 820BE614h case    6:*/		return 0x820BE618;
		  /* 820BE618h */ case    7:  		/* lwz R11, <#[R30 + 108]> */
		/* 820BE618h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 820BE618h case    7:*/		return 0x820BE61C;
		  /* 820BE61Ch */ case    8:  		/* cmplw CR6, R17, R11 */
		/* 820BE61Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 820BE61Ch case    8:*/		return 0x820BE620;
		  /* 820BE620h */ case    9:  		/* bc 12, CR6_LT, 16 */
		/* 820BE620h case    9:*/		if ( regs.CR[6].lt ) { return 0x820BE630;  }
		/* 820BE620h case    9:*/		return 0x820BE624;
		  /* 820BE624h */ case   10:  		/* lwz R11, <#[R30 + 112]> */
		/* 820BE624h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 820BE624h case   10:*/		return 0x820BE628;
		  /* 820BE628h */ case   11:  		/* cmplw CR6, R25, R11 */
		/* 820BE628h case   11:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 820BE628h case   11:*/		return 0x820BE62C;
		  /* 820BE62Ch */ case   12:  		/* bc 4, CR6_GT, 84 */
		/* 820BE62Ch case   12:*/		if ( !regs.CR[6].gt ) { return 0x820BE680;  }
		/* 820BE62Ch case   12:*/		return 0x820BE630;
	}
	return 0x820BE630;
} // Block from 820BE5FCh-820BE630h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820BE630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE630);
		  /* 820BE630h */ case    0:  		/* li R4, 0 */
		/* 820BE630h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820BE630h case    0:*/		return 0x820BE634;
		  /* 820BE634h */ case    1:  		/* b 72 */
		/* 820BE634h case    1:*/		return 0x820BE67C;
		/* 820BE634h case    1:*/		return 0x820BE638;
	}
	return 0x820BE638;
} // Block from 820BE630h-820BE638h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BE638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE638);
		  /* 820BE638h */ case    0:  		/* lwz R11, <#[R30 + 88]> */
		/* 820BE638h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820BE638h case    0:*/		return 0x820BE63C;
		  /* 820BE63Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820BE63Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BE63Ch case    1:*/		return 0x820BE640;
		  /* 820BE640h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 820BE640h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BE654;  }
		/* 820BE640h case    2:*/		return 0x820BE644;
		  /* 820BE644h */ case    3:  		/* cmplwi CR6, R16, 0 */
		/* 820BE644h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820BE644h case    3:*/		return 0x820BE648;
		  /* 820BE648h */ case    4:  		/* stw R26, <#[R30 + 92]> */
		/* 820BE648h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x0000005C) );
		/* 820BE648h case    4:*/		return 0x820BE64C;
		  /* 820BE64Ch */ case    5:  		/* bc 12, CR6_EQ, 4792 */
		/* 820BE64Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x820BF904;  }
		/* 820BE64Ch case    5:*/		return 0x820BE650;
		  /* 820BE650h */ case    6:  		/* b 288 */
		/* 820BE650h case    6:*/		return 0x820BE770;
		/* 820BE650h case    6:*/		return 0x820BE654;
	}
	return 0x820BE654;
} // Block from 820BE638h-820BE654h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BE654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE654);
		  /* 820BE654h */ case    0:  		/* lis R11, -32255 */
		/* 820BE654h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BE654h case    0:*/		return 0x820BE658;
		  /* 820BE658h */ case    1:  		/* li R5, 3030 */
		/* 820BE658h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBD6);
		/* 820BE658h case    1:*/		return 0x820BE65C;
		  /* 820BE65Ch */ case    2:  		/* addi R6, R11, 9184 */
		/* 820BE65Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23E0);
		/* 820BE65Ch case    2:*/		return 0x820BE660;
		  /* 820BE660h */ case    3:  		/* b 520 */
		/* 820BE660h case    3:*/		return 0x820BE868;
		/* 820BE660h case    3:*/		return 0x820BE664;
	}
	return 0x820BE664;
} // Block from 820BE654h-820BE664h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BE664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE664);
		  /* 820BE664h */ case    0:  		/* cmpwi CR6, R4, 0 */
		/* 820BE664h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 820BE664h case    0:*/		return 0x820BE668;
		  /* 820BE668h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 820BE668h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BE680;  }
		/* 820BE668h case    1:*/		return 0x820BE66C;
		  /* 820BE66Ch */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BE66Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE66Ch case    2:*/		return 0x820BE670;
		  /* 820BE670h */ case    3:  		/* lwz R11, <#[R11 + 112]> */
		/* 820BE670h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 820BE670h case    3:*/		return 0x820BE674;
		  /* 820BE674h */ case    4:  		/* rlwinm. R11, R11, 0, 10, 10 */
		/* 820BE674h case    4:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R11,regs.R11);
		/* 820BE674h case    4:*/		return 0x820BE678;
		  /* 820BE678h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 820BE678h case    5:*/		if ( !regs.CR[0].eq ) { return 0x820BE680;  }
		/* 820BE678h case    5:*/		return 0x820BE67C;
	}
	return 0x820BE67C;
} // Block from 820BE664h-820BE67Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BE67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE67C);
		  /* 820BE67Ch */ case    0:  		/* stw R26, <#[R30 + 96]> */
		/* 820BE67Ch case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000060) );
		/* 820BE67Ch case    0:*/		return 0x820BE680;
	}
	return 0x820BE680;
} // Block from 820BE67Ch-820BE680h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE680);
		  /* 820BE680h */ case    0:  		/* addi R11, R17, 1 */
		/* 820BE680h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x1);
		/* 820BE680h case    0:*/		return 0x820BE684;
		  /* 820BE684h */ case    1:  		/* cmplw CR6, R11, R25 */
		/* 820BE684h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 820BE684h case    1:*/		return 0x820BE688;
		  /* 820BE688h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 820BE688h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820BE69C;  }
		/* 820BE688h case    2:*/		return 0x820BE68C;
		  /* 820BE68Ch */ case    3:  		/* mullw R11, R17, R20 */
		/* 820BE68Ch case    3:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R17,regs.R20);
		/* 820BE68Ch case    3:*/		return 0x820BE690;
		  /* 820BE690h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BE690h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BE690h case    4:*/		return 0x820BE694;
		  /* 820BE694h */ case    5:  		/* add R4, R11, R19 */
		/* 820BE694h case    5:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R19);
		/* 820BE694h case    5:*/		return 0x820BE698;
		  /* 820BE698h */ case    6:  		/* b 220 */
		/* 820BE698h case    6:*/		return 0x820BE774;
		/* 820BE698h case    6:*/		return 0x820BE69C;
	}
	return 0x820BE69C;
} // Block from 820BE680h-820BE69Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BE69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE69C);
		  /* 820BE69Ch */ case    0:  		/* mr R5, R3 */
		/* 820BE69Ch case    0:*/		regs.R5 = regs.R3;
		/* 820BE69Ch case    0:*/		return 0x820BE6A0;
		  /* 820BE6A0h */ case    1:  		/* mr R6, R3 */
		/* 820BE6A0h case    1:*/		regs.R6 = regs.R3;
		/* 820BE6A0h case    1:*/		return 0x820BE6A4;
		  /* 820BE6A4h */ case    2:  		/* mr R7, R20 */
		/* 820BE6A4h case    2:*/		regs.R7 = regs.R20;
		/* 820BE6A4h case    2:*/		return 0x820BE6A8;
		  /* 820BE6A8h */ case    3:  		/* cmplw CR6, R20, R29 */
		/* 820BE6A8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R29);
		/* 820BE6A8h case    3:*/		return 0x820BE6AC;
		  /* 820BE6ACh */ case    4:  		/* bc 4, CR6_LT, 168 */
		/* 820BE6ACh case    4:*/		if ( !regs.CR[6].lt ) { return 0x820BE754;  }
		/* 820BE6ACh case    4:*/		return 0x820BE6B0;
		  /* 820BE6B0h */ case    5:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 820BE6B0h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 820BE6B0h case    5:*/		return 0x820BE6B4;
		  /* 820BE6B4h */ case    6:  		/* mr R9, R19 */
		/* 820BE6B4h case    6:*/		regs.R9 = regs.R19;
		/* 820BE6B4h case    6:*/		return 0x820BE6B8;
		  /* 820BE6B8h */ case    7:  		/* add R8, R11, R19 */
		/* 820BE6B8h case    7:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R19);
		/* 820BE6B8h case    7:*/		return 0x820BE6BC;
		  /* 820BE6BCh */ case    8:  		/* cmpwi CR6, R5, 0 */
		/* 820BE6BCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 820BE6BCh case    8:*/		return 0x820BE6C0;
		  /* 820BE6C0h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 820BE6C0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820BE6CC;  }
		/* 820BE6C0h case    9:*/		return 0x820BE6C4;
		  /* 820BE6C4h */ case   10:  		/* cmpwi CR6, R6, 0 */
		/* 820BE6C4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 820BE6C4h case   10:*/		return 0x820BE6C8;
		  /* 820BE6C8h */ case   11:  		/* bc 12, CR6_EQ, 148 */
		/* 820BE6C8h case   11:*/		if ( regs.CR[6].eq ) { return 0x820BE75C;  }
		/* 820BE6C8h case   11:*/		return 0x820BE6CC;
	}
	return 0x820BE6CC;
} // Block from 820BE69Ch-820BE6CCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 820BE6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE6CC);
		  /* 820BE6CCh */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BE6CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE6CCh case    0:*/		return 0x820BE6D0;
		  /* 820BE6D0h */ case    1:  		/* lwz R10, <#[R9]> */
		/* 820BE6D0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 820BE6D0h case    1:*/		return 0x820BE6D4;
		  /* 820BE6D4h */ case    2:  		/* lwz R23, <#[R8]> */
		/* 820BE6D4h case    2:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R8 + 0x00000000) );
		/* 820BE6D4h case    2:*/		return 0x820BE6D8;
		  /* 820BE6D8h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820BE6D8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820BE6D8h case    3:*/		return 0x820BE6DC;
		  /* 820BE6DCh */ case    4:  		/* rlwinm R23, R23, 2, 0, 29 */
		/* 820BE6DCh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R23);
		/* 820BE6DCh case    4:*/		return 0x820BE6E0;
		  /* 820BE6E0h */ case    5:  		/* lwz R22, <#[R11 + 20]> */
		/* 820BE6E0h case    5:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000014) );
		/* 820BE6E0h case    5:*/		return 0x820BE6E4;
		  /* 820BE6E4h */ case    6:  		/* lwzx R11, <#[R10 + R22]> */
		/* 820BE6E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R22 + 0x00000000) );
		/* 820BE6E4h case    6:*/		return 0x820BE6E8;
		  /* 820BE6E8h */ case    7:  		/* lwzx R10, <#[R23 + R22]> */
		/* 820BE6E8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + regs.R22 + 0x00000000) );
		/* 820BE6E8h case    7:*/		return 0x820BE6EC;
		  /* 820BE6ECh */ case    8:  		/* lwz R23, <#[R11 + 4]> */
		/* 820BE6ECh case    8:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x00000004) );
		/* 820BE6ECh case    8:*/		return 0x820BE6F0;
		  /* 820BE6F0h */ case    9:  		/* lwz R22, <#[R10 + 4]> */
		/* 820BE6F0h case    9:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R10 + 0x00000004) );
		/* 820BE6F0h case    9:*/		return 0x820BE6F4;
		  /* 820BE6F4h */ case   10:  		/* cmplw CR6, R23, R22 */
		/* 820BE6F4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 820BE6F4h case   10:*/		return 0x820BE6F8;
		  /* 820BE6F8h */ case   11:  		/* bc 4, CR6_EQ, 64 */
		/* 820BE6F8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820BE738;  }
		/* 820BE6F8h case   11:*/		return 0x820BE6FC;
		  /* 820BE6FCh */ case   12:  		/* lwz R23, <#[R11 + 8]> */
		/* 820BE6FCh case   12:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x00000008) );
		/* 820BE6FCh case   12:*/		return 0x820BE700;
		  /* 820BE700h */ case   13:  		/* lwz R22, <#[R10 + 8]> */
		/* 820BE700h case   13:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R10 + 0x00000008) );
		/* 820BE700h case   13:*/		return 0x820BE704;
		  /* 820BE704h */ case   14:  		/* cmplw CR6, R23, R22 */
		/* 820BE704h case   14:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R22);
		/* 820BE704h case   14:*/		return 0x820BE708;
		  /* 820BE708h */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 820BE708h case   15:*/		if ( !regs.CR[6].eq ) { return 0x820BE738;  }
		/* 820BE708h case   15:*/		return 0x820BE70C;
		  /* 820BE70Ch */ case   16:  		/* lwz R23, <#[R11 + 12]> */
		/* 820BE70Ch case   16:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x0000000C) );
		/* 820BE70Ch case   16:*/		return 0x820BE710;
		  /* 820BE710h */ case   17:  		/* lwz R22, <#[R10 + 12]> */
		/* 820BE710h case   17:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R10 + 0x0000000C) );
		/* 820BE710h case   17:*/		return 0x820BE714;
		  /* 820BE714h */ case   18:  		/* lwz R11, <#[R11 + 16]> */
		/* 820BE714h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 820BE714h case   18:*/		return 0x820BE718;
		  /* 820BE718h */ case   19:  		/* subf R23, R23, R22 */
		/* 820BE718h case   19:*/		cpu::op::subf<0>(regs,&regs.R23,regs.R23,regs.R22);
		/* 820BE718h case   19:*/		return 0x820BE71C;
		  /* 820BE71Ch */ case   20:  		/* lwz R10, <#[R10 + 16]> */
		/* 820BE71Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000010) );
		/* 820BE71Ch case   20:*/		return 0x820BE720;
		  /* 820BE720h */ case   21:  		/* addic R23, R23, -1 */
		/* 820BE720h case   21:*/		cpu::op::addic<0>(regs,&regs.R23,regs.R23,0xFFFFFFFF);
		/* 820BE720h case   21:*/		return 0x820BE724;
		  /* 820BE724h */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 820BE724h case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820BE724h case   22:*/		return 0x820BE728;
		  /* 820BE728h */ case   23:  		/* subfe R11, R23, R23 */
		/* 820BE728h case   23:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R23,regs.R23);
		/* 820BE728h case   23:*/		return 0x820BE72C;
		  /* 820BE72Ch */ case   24:  		/* and R5, R11, R5 */
		/* 820BE72Ch case   24:*/		cpu::op::and<0>(regs,&regs.R5,regs.R11,regs.R5);
		/* 820BE72Ch case   24:*/		return 0x820BE730;
		  /* 820BE730h */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 820BE730h case   25:*/		if ( regs.CR[6].eq ) { return 0x820BE740;  }
		/* 820BE730h case   25:*/		return 0x820BE734;
		  /* 820BE734h */ case   26:  		/* b 8 */
		/* 820BE734h case   26:*/		return 0x820BE73C;
		/* 820BE734h case   26:*/		return 0x820BE738;
	}
	return 0x820BE738;
} // Block from 820BE6CCh-820BE738h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820BE738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE738);
		  /* 820BE738h */ case    0:  		/* li R5, 0 */
		/* 820BE738h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BE738h case    0:*/		return 0x820BE73C;
	}
	return 0x820BE73C;
} // Block from 820BE738h-820BE73Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE73C);
		  /* 820BE73Ch */ case    0:  		/* li R6, 0 */
		/* 820BE73Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BE73Ch case    0:*/		return 0x820BE740;
	}
	return 0x820BE740;
} // Block from 820BE73Ch-820BE740h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE740);
		  /* 820BE740h */ case    0:  		/* addi R7, R7, 1 */
		/* 820BE740h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820BE740h case    0:*/		return 0x820BE744;
		  /* 820BE744h */ case    1:  		/* addi R9, R9, 4 */
		/* 820BE744h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820BE744h case    1:*/		return 0x820BE748;
		  /* 820BE748h */ case    2:  		/* addi R8, R8, 4 */
		/* 820BE748h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 820BE748h case    2:*/		return 0x820BE74C;
		  /* 820BE74Ch */ case    3:  		/* cmplw CR6, R7, R29 */
		/* 820BE74Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R29);
		/* 820BE74Ch case    3:*/		return 0x820BE750;
		  /* 820BE750h */ case    4:  		/* bc 12, CR6_LT, -148 */
		/* 820BE750h case    4:*/		if ( regs.CR[6].lt ) { return 0x820BE6BC;  }
		/* 820BE750h case    4:*/		return 0x820BE754;
	}
	return 0x820BE754;
} // Block from 820BE740h-820BE754h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BE754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE754);
		  /* 820BE754h */ case    0:  		/* cmpwi CR6, R6, 0 */
		/* 820BE754h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 820BE754h case    0:*/		return 0x820BE758;
		  /* 820BE758h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 820BE758h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BE760;  }
		/* 820BE758h case    1:*/		return 0x820BE75C;
	}
	return 0x820BE75C;
} // Block from 820BE754h-820BE75Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BE75Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE75C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE75C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE75C);
		  /* 820BE75Ch */ case    0:  		/* li R4, 0 */
		/* 820BE75Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820BE75Ch case    0:*/		return 0x820BE760;
	}
	return 0x820BE760;
} // Block from 820BE75Ch-820BE760h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE760);
		  /* 820BE760h */ case    0:  		/* cmpwi CR6, R5, 0 */
		/* 820BE760h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 820BE760h case    0:*/		return 0x820BE764;
		  /* 820BE764h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820BE764h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BE784;  }
		/* 820BE764h case    1:*/		return 0x820BE768;
		  /* 820BE768h */ case    2:  		/* cmpwi CR6, R6, 0 */
		/* 820BE768h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 820BE768h case    2:*/		return 0x820BE76C;
		  /* 820BE76Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 820BE76Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820BE784;  }
		/* 820BE76Ch case    3:*/		return 0x820BE770;
	}
	return 0x820BE770;
} // Block from 820BE760h-820BE770h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BE770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE770);
		  /* 820BE770h */ case    0:  		/* mr R4, R19 */
		/* 820BE770h case    0:*/		regs.R4 = regs.R19;
		/* 820BE770h case    0:*/		return 0x820BE774;
	}
	return 0x820BE774;
} // Block from 820BE770h-820BE774h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE774);
		  /* 820BE774h */ case    0:  		/* rlwinm R5, R20, 2, 0, 29 */
		/* 820BE774h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R20);
		/* 820BE774h case    0:*/		return 0x820BE778;
		  /* 820BE778h */ case    1:  		/* mr R3, R16 */
		/* 820BE778h case    1:*/		regs.R3 = regs.R16;
		/* 820BE778h case    1:*/		return 0x820BE77C;
		  /* 820BE77Ch */ case    2:  		/* bl -183756 */
		/* 820BE77Ch case    2:*/		regs.LR = 0x820BE780; return 0x820919B0;
		/* 820BE77Ch case    2:*/		return 0x820BE780;
		  /* 820BE780h */ case    3:  		/* b 4484 */
		/* 820BE780h case    3:*/		return 0x820BF904;
		/* 820BE780h case    3:*/		return 0x820BE784;
	}
	return 0x820BE784;
} // Block from 820BE774h-820BE784h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BE784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE784);
		  /* 820BE784h */ case    0:  		/* cmpwi CR6, R4, 0 */
		/* 820BE784h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 820BE784h case    0:*/		return 0x820BE788;
		  /* 820BE788h */ case    1:  		/* bc 12, CR6_EQ, 168 */
		/* 820BE788h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BE830;  }
		/* 820BE788h case    1:*/		return 0x820BE78C;
		  /* 820BE78Ch */ case    2:  		/* cmpwi CR6, R5, 0 */
		/* 820BE78Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 820BE78Ch case    2:*/		return 0x820BE790;
		  /* 820BE790h */ case    3:  		/* bc 4, CR6_EQ, 152 */
		/* 820BE790h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820BE828;  }
		/* 820BE790h case    3:*/		return 0x820BE794;
		  /* 820BE794h */ case    4:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 820BE794h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 820BE794h case    4:*/		return 0x820BE798;
		  /* 820BE798h */ case    5:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BE798h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE798h case    5:*/		return 0x820BE79C;
		  /* 820BE79Ch */ case    6:  		/* lwz R8, <#[R19]> */
		/* 820BE79Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R19 + 0x00000000) );
		/* 820BE79Ch case    6:*/		return 0x820BE7A0;
		  /* 820BE7A0h */ case    7:  		/* mr R9, R26 */
		/* 820BE7A0h case    7:*/		regs.R9 = regs.R26;
		/* 820BE7A0h case    7:*/		return 0x820BE7A4;
		  /* 820BE7A4h */ case    8:  		/* add R11, R11, R19 */
		/* 820BE7A4h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R19);
		/* 820BE7A4h case    8:*/		return 0x820BE7A8;
		  /* 820BE7A8h */ case    9:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820BE7A8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820BE7A8h case    9:*/		return 0x820BE7AC;
		  /* 820BE7ACh */ case   10:  		/* cmplwi CR6, R20, 1 */
		/* 820BE7ACh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000001);
		/* 820BE7ACh case   10:*/		return 0x820BE7B0;
		  /* 820BE7B0h */ case   11:  		/* lwz R7, <#[R10 + 20]> */
		/* 820BE7B0h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000014) );
		/* 820BE7B0h case   11:*/		return 0x820BE7B4;
		  /* 820BE7B4h */ case   12:  		/* lwz R6, <#[R11]> */
		/* 820BE7B4h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 820BE7B4h case   12:*/		return 0x820BE7B8;
		  /* 820BE7B8h */ case   13:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820BE7B8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820BE7B8h case   13:*/		return 0x820BE7BC;
		  /* 820BE7BCh */ case   14:  		/* lwzx R8, <#[R8 + R7]> */
		/* 820BE7BCh case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 820BE7BCh case   14:*/		return 0x820BE7C0;
		  /* 820BE7C0h */ case   15:  		/* lwzx R7, <#[R6 + R7]> */
		/* 820BE7C0h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 820BE7C0h case   15:*/		return 0x820BE7C4;
		  /* 820BE7C4h */ case   16:  		/* lwz R8, <#[R8 + 12]> */
		/* 820BE7C4h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 820BE7C4h case   16:*/		return 0x820BE7C8;
		  /* 820BE7C8h */ case   17:  		/* lwz R7, <#[R7 + 12]> */
		/* 820BE7C8h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x0000000C) );
		/* 820BE7C8h case   17:*/		return 0x820BE7CC;
		  /* 820BE7CCh */ case   18:  		/* subf R7, R8, R7 */
		/* 820BE7CCh case   18:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R8,regs.R7);
		/* 820BE7CCh case   18:*/		return 0x820BE7D0;
		  /* 820BE7D0h */ case   19:  		/* bc 4, CR6_GT, 88 */
		/* 820BE7D0h case   19:*/		if ( !regs.CR[6].gt ) { return 0x820BE828;  }
		/* 820BE7D0h case   19:*/		return 0x820BE7D4;
		  /* 820BE7D4h */ case   20:  		/* lwz R8, <#[R10 + 20]> */
		/* 820BE7D4h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000014) );
		/* 820BE7D4h case   20:*/		return 0x820BE7D8;
		  /* 820BE7D8h */ case   21:  		/* addi R10, R19, 4 */
		/* 820BE7D8h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R19,0x4);
		/* 820BE7D8h case   21:*/		return 0x820BE7DC;
		  /* 820BE7DCh */ case   22:  		/* addi R11, R11, 4 */
		/* 820BE7DCh case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BE7DCh case   22:*/		return 0x820BE7E0;
		  /* 820BE7E0h */ case   23:  		/* lwz R6, <#[R11]> */
		/* 820BE7E0h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 820BE7E0h case   23:*/		return 0x820BE7E4;
		  /* 820BE7E4h */ case   24:  		/* lwz R23, <#[R10]> */
		/* 820BE7E4h case   24:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R10 + 0x00000000) );
		/* 820BE7E4h case   24:*/		return 0x820BE7E8;
		  /* 820BE7E8h */ case   25:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 820BE7E8h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 820BE7E8h case   25:*/		return 0x820BE7EC;
		  /* 820BE7ECh */ case   26:  		/* rlwinm R23, R23, 2, 0, 29 */
		/* 820BE7ECh case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R23);
		/* 820BE7ECh case   26:*/		return 0x820BE7F0;
		  /* 820BE7F0h */ case   27:  		/* lwzx R6, <#[R6 + R8]> */
		/* 820BE7F0h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 820BE7F0h case   27:*/		return 0x820BE7F4;
		  /* 820BE7F4h */ case   28:  		/* lwzx R23, <#[R23 + R8]> */
		/* 820BE7F4h case   28:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R23 + regs.R8 + 0x00000000) );
		/* 820BE7F4h case   28:*/		return 0x820BE7F8;
		  /* 820BE7F8h */ case   29:  		/* lwz R6, <#[R6 + 12]> */
		/* 820BE7F8h case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x0000000C) );
		/* 820BE7F8h case   29:*/		return 0x820BE7FC;
		  /* 820BE7FCh */ case   30:  		/* lwz R23, <#[R23 + 12]> */
		/* 820BE7FCh case   30:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R23 + 0x0000000C) );
		/* 820BE7FCh case   30:*/		return 0x820BE800;
		  /* 820BE800h */ case   31:  		/* subf R6, R23, R6 */
		/* 820BE800h case   31:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R23,regs.R6);
		/* 820BE800h case   31:*/		return 0x820BE804;
		  /* 820BE804h */ case   32:  		/* cmplw CR6, R7, R6 */
		/* 820BE804h case   32:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 820BE804h case   32:*/		return 0x820BE808;
		  /* 820BE808h */ case   33:  		/* bc 4, CR6_EQ, 28 */
		/* 820BE808h case   33:*/		if ( !regs.CR[6].eq ) { return 0x820BE824;  }
		/* 820BE808h case   33:*/		return 0x820BE80C;
		  /* 820BE80Ch */ case   34:  		/* addi R9, R9, 1 */
		/* 820BE80Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820BE80Ch case   34:*/		return 0x820BE810;
		  /* 820BE810h */ case   35:  		/* addi R11, R11, 4 */
		/* 820BE810h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BE810h case   35:*/		return 0x820BE814;
		  /* 820BE814h */ case   36:  		/* addi R10, R10, 4 */
		/* 820BE814h case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820BE814h case   36:*/		return 0x820BE818;
		  /* 820BE818h */ case   37:  		/* cmplw CR6, R9, R20 */
		/* 820BE818h case   37:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R20);
		/* 820BE818h case   37:*/		return 0x820BE81C;
		  /* 820BE81Ch */ case   38:  		/* bc 12, CR6_LT, -60 */
		/* 820BE81Ch case   38:*/		if ( regs.CR[6].lt ) { return 0x820BE7E0;  }
		/* 820BE81Ch case   38:*/		return 0x820BE820;
		  /* 820BE820h */ case   39:  		/* b 8 */
		/* 820BE820h case   39:*/		return 0x820BE828;
		/* 820BE820h case   39:*/		return 0x820BE824;
	}
	return 0x820BE824;
} // Block from 820BE784h-820BE824h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820BE824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE824);
		  /* 820BE824h */ case    0:  		/* li R4, 0 */
		/* 820BE824h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820BE824h case    0:*/		return 0x820BE828;
	}
	return 0x820BE828;
} // Block from 820BE824h-820BE828h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE828);
		  /* 820BE828h */ case    0:  		/* cmpwi CR6, R4, 0 */
		/* 820BE828h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 820BE828h case    0:*/		return 0x820BE82C;
		  /* 820BE82Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 820BE82Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BE834;  }
		/* 820BE82Ch case    1:*/		return 0x820BE830;
	}
	return 0x820BE830;
} // Block from 820BE828h-820BE830h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BE830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE830);
		  /* 820BE830h */ case    0:  		/* li R31, 0 */
		/* 820BE830h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820BE830h case    0:*/		return 0x820BE834;
	}
	return 0x820BE834;
} // Block from 820BE830h-820BE834h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BE834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE834);
		  /* 820BE834h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 820BE834h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 820BE834h case    0:*/		return 0x820BE838;
		  /* 820BE838h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 820BE838h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BE878;  }
		/* 820BE838h case    1:*/		return 0x820BE83C;
		  /* 820BE83Ch */ case    2:  		/* cmpwi CR6, R31, 0 */
		/* 820BE83Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 820BE83Ch case    2:*/		return 0x820BE840;
		  /* 820BE840h */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 820BE840h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820BE878;  }
		/* 820BE840h case    3:*/		return 0x820BE844;
		  /* 820BE844h */ case    4:  		/* lwz R11, <#[R30 + 88]> */
		/* 820BE844h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820BE844h case    4:*/		return 0x820BE848;
		  /* 820BE848h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 820BE848h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BE848h case    5:*/		return 0x820BE84C;
		  /* 820BE84Ch */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 820BE84Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x820BE85C;  }
		/* 820BE84Ch case    6:*/		return 0x820BE850;
		  /* 820BE850h */ case    7:  		/* lwz R11, <#[R30 + 68]> */
		/* 820BE850h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000044) );
		/* 820BE850h case    7:*/		return 0x820BE854;
		  /* 820BE854h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 820BE854h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BE854h case    8:*/		return 0x820BE858;
		  /* 820BE858h */ case    9:  		/* bc 4, CR6_EQ, 1288 */
		/* 820BE858h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820BED60;  }
		/* 820BE858h case    9:*/		return 0x820BE85C;
	}
	return 0x820BE85C;
} // Block from 820BE834h-820BE85Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BE85Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE85C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE85C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE85C);
		  /* 820BE85Ch */ case    0:  		/* lis R11, -32255 */
		/* 820BE85Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BE85Ch case    0:*/		return 0x820BE860;
		  /* 820BE860h */ case    1:  		/* li R5, 3042 */
		/* 820BE860h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xBE2);
		/* 820BE860h case    1:*/		return 0x820BE864;
		  /* 820BE864h */ case    2:  		/* addi R6, R11, 9112 */
		/* 820BE864h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2398);
		/* 820BE864h case    2:*/		return 0x820BE868;
	}
	return 0x820BE868;
} // Block from 820BE85Ch-820BE868h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BE868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE868);
		  /* 820BE868h */ case    0:  		/* mr R4, R21 */
		/* 820BE868h case    0:*/		regs.R4 = regs.R21;
		/* 820BE868h case    0:*/		return 0x820BE86C;
		  /* 820BE86Ch */ case    1:  		/* mr R3, R30 */
		/* 820BE86Ch case    1:*/		regs.R3 = regs.R30;
		/* 820BE86Ch case    1:*/		return 0x820BE870;
		  /* 820BE870h */ case    2:  		/* bl -56960 */
		/* 820BE870h case    2:*/		regs.LR = 0x820BE874; return 0x820B09F0;
		/* 820BE870h case    2:*/		return 0x820BE874;
		  /* 820BE874h */ case    3:  		/* b 1260 */
		/* 820BE874h case    3:*/		return 0x820BED60;
		/* 820BE874h case    3:*/		return 0x820BE878;
	}
	return 0x820BE878;
} // Block from 820BE868h-820BE878h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BE878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE878);
		  /* 820BE878h */ case    0:  		/* cmpwi CR6, R4, 0 */
		/* 820BE878h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 820BE878h case    0:*/		return 0x820BE87C;
		  /* 820BE87Ch */ case    1:  		/* bc 12, CR6_EQ, 1212 */
		/* 820BE87Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820BED38;  }
		/* 820BE87Ch case    1:*/		return 0x820BE880;
		  /* 820BE880h */ case    2:  		/* mr R11, R26 */
		/* 820BE880h case    2:*/		regs.R11 = regs.R26;
		/* 820BE880h case    2:*/		return 0x820BE884;
		  /* 820BE884h */ case    3:  		/* cmplw CR6, R29, R20 */
		/* 820BE884h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R20);
		/* 820BE884h case    3:*/		return 0x820BE888;
		  /* 820BE888h */ case    4:  		/* bc 4, CR6_GT, 52 */
		/* 820BE888h case    4:*/		if ( !regs.CR[6].gt ) { return 0x820BE8BC;  }
		/* 820BE888h case    4:*/		return 0x820BE88C;
		  /* 820BE88Ch */ case    5:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 820BE88Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 820BE88Ch case    5:*/		return 0x820BE890;
		  /* 820BE890h */ case    6:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BE890h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE890h case    6:*/		return 0x820BE894;
		  /* 820BE894h */ case    7:  		/* lwz R9, <#[R19]> */
		/* 820BE894h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x00000000) );
		/* 820BE894h case    7:*/		return 0x820BE898;
		  /* 820BE898h */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820BE898h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820BE898h case    8:*/		return 0x820BE89C;
		  /* 820BE89Ch */ case    9:  		/* lwzx R11, <#[R11 + R19]> */
		/* 820BE89Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 820BE89Ch case    9:*/		return 0x820BE8A0;
		  /* 820BE8A0h */ case   10:  		/* lwz R10, <#[R10 + 20]> */
		/* 820BE8A0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820BE8A0h case   10:*/		return 0x820BE8A4;
		  /* 820BE8A4h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BE8A4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BE8A4h case   11:*/		return 0x820BE8A8;
		  /* 820BE8A8h */ case   12:  		/* lwzx R9, <#[R9 + R10]> */
		/* 820BE8A8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820BE8A8h case   12:*/		return 0x820BE8AC;
		  /* 820BE8ACh */ case   13:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820BE8ACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820BE8ACh case   13:*/		return 0x820BE8B0;
		  /* 820BE8B0h */ case   14:  		/* lwz R10, <#[R9 + 12]> */
		/* 820BE8B0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000000C) );
		/* 820BE8B0h case   14:*/		return 0x820BE8B4;
		  /* 820BE8B4h */ case   15:  		/* lwz R11, <#[R11 + 12]> */
		/* 820BE8B4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820BE8B4h case   15:*/		return 0x820BE8B8;
		  /* 820BE8B8h */ case   16:  		/* subf R11, R10, R11 */
		/* 820BE8B8h case   16:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820BE8B8h case   16:*/		return 0x820BE8BC;
	}
	return 0x820BE8BC;
} // Block from 820BE878h-820BE8BCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 820BE8BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE8BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE8BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE8BC);
		  /* 820BE8BCh */ case    0:  		/* lwz R10, <#[R24]> */
		/* 820BE8BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 820BE8BCh case    0:*/		return 0x820BE8C0;
		  /* 820BE8C0h */ case    1:  		/* lis R9, 8256 */
		/* 820BE8C0h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x2040);
		/* 820BE8C0h case    1:*/		return 0x820BE8C4;
		  /* 820BE8C4h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 820BE8C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 820BE8C4h case    2:*/		return 0x820BE8C8;
		  /* 820BE8C8h */ case    3:  		/* ori R27, R9, 1 */
		/* 820BE8C8h case    3:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R9,0x1);
		/* 820BE8C8h case    3:*/		return 0x820BE8CC;
		  /* 820BE8CCh */ case    4:  		/* stw R10, <#[R1 + 160]> */
		/* 820BE8CCh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BE8CCh case    4:*/		return 0x820BE8D0;
		  /* 820BE8D0h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 820BE8D0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820BE8E4;  }
		/* 820BE8D0h case    5:*/		return 0x820BE8D4;
		  /* 820BE8D4h */ case    6:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BE8D4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE8D4h case    6:*/		return 0x820BE8D8;
		  /* 820BE8D8h */ case    7:  		/* lwz R10, <#[R10 + 108]> */
		/* 820BE8D8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000006C) );
		/* 820BE8D8h case    7:*/		return 0x820BE8DC;
		  /* 820BE8DCh */ case    8:  		/* rlwinm. R10, R10, 0, 25, 25 */
		/* 820BE8DCh case    8:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R10);
		/* 820BE8DCh case    8:*/		return 0x820BE8E0;
		  /* 820BE8E0h */ case    9:  		/* bc 4, CR0_EQ, 344 */
		/* 820BE8E0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x820BEA38;  }
		/* 820BE8E0h case    9:*/		return 0x820BE8E4;
	}
	return 0x820BE8E4;
} // Block from 820BE8BCh-820BE8E4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820BE8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BE8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BE8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BE8E4);
		  /* 820BE8E4h */ case    0:  		/* rldicl R11, R11, 0, 32 */
		/* 820BE8E4h case    0:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 820BE8E4h case    0:*/		return 0x820BE8E8;
		  /* 820BE8E8h */ case    1:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BE8E8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE8E8h case    1:*/		return 0x820BE8EC;
		  /* 820BE8ECh */ case    2:  		/* li R6, 0 */
		/* 820BE8ECh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BE8ECh case    2:*/		return 0x820BE8F0;
		  /* 820BE8F0h */ case    3:  		/* std R11, <#[R1 + 192]> */
		/* 820BE8F0h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BE8F0h case    3:*/		return 0x820BE8F4;
		  /* 820BE8F4h */ case    4:  		/* li R5, 0 */
		/* 820BE8F4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BE8F4h case    4:*/		return 0x820BE8F8;
		  /* 820BE8F8h */ case    5:  		/* lfd FR0, <#[R1 + 192]> */
		/* 820BE8F8h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BE8F8h case    5:*/		return 0x820BE8FC;
		  /* 820BE8FCh */ case    6:  		/* fcfid FR1, FR0 */
		/* 820BE8FCh case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR1,regs.FR0);
		/* 820BE8FCh case    6:*/		return 0x820BE900;
		  /* 820BE900h */ case    7:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BE900h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BE900h case    7:*/		return 0x820BE904;
		  /* 820BE904h */ case    8:  		/* bl 256292 */
		/* 820BE904h case    8:*/		regs.LR = 0x820BE908; return 0x820FD228;
		/* 820BE904h case    8:*/		return 0x820BE908;
		  /* 820BE908h */ case    9:  		/* stw R3, <#[R1 + 192]> */
		/* 820BE908h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BE908h case    9:*/		return 0x820BE90C;
		  /* 820BE90Ch */ case   10:  		/* cmpwi CR6, R3, -1 */
		/* 820BE90Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BE90Ch case   10:*/		return 0x820BE910;
		  /* 820BE910h */ case   11:  		/* bc 12, CR6_EQ, 3968 */
		/* 820BE910h case   11:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BE910h case   11:*/		return 0x820BE914;
		  /* 820BE914h */ case   12:  		/* addi R10, R1, 208 */
		/* 820BE914h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 820BE914h case   12:*/		return 0x820BE918;
		  /* 820BE918h */ case   13:  		/* lwz R9, <#[R30 + 8]> */
		/* 820BE918h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 820BE918h case   13:*/		return 0x820BE91C;
		  /* 820BE91Ch */ case   14:  		/* mr R11, R18 */
		/* 820BE91Ch case   14:*/		regs.R11 = regs.R18;
		/* 820BE91Ch case   14:*/		return 0x820BE920;
		  /* 820BE920h */ case   15:  		/* lwz R8, <#[R1 + 160]> */
		/* 820BE920h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BE920h case   15:*/		return 0x820BE924;
		  /* 820BE924h */ case   16:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820BE924h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820BE924h case   16:*/		return 0x820BE928;
		  /* 820BE928h */ case   17:  		/* stw R18, <#[R10]> */
		/* 820BE928h case   17:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R10 + 0x00000000) );
		/* 820BE928h case   17:*/		return 0x820BE92C;
		  /* 820BE92Ch */ case   18:  		/* stw R18, <#[R10 + 4]> */
		/* 820BE92Ch case   18:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R10 + 0x00000004) );
		/* 820BE92Ch case   18:*/		return 0x820BE930;
		  /* 820BE930h */ case   19:  		/* stw R18, <#[R10 + 8]> */
		/* 820BE930h case   19:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R10 + 0x00000008) );
		/* 820BE930h case   19:*/		return 0x820BE934;
		  /* 820BE934h */ case   20:  		/* stw R18, <#[R10 + 12]> */
		/* 820BE934h case   20:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R10 + 0x0000000C) );
		/* 820BE934h case   20:*/		return 0x820BE938;
		  /* 820BE938h */ case   21:  		/* stw R18, <#[R10 + 16]> */
		/* 820BE938h case   21:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R10 + 0x00000010) );
		/* 820BE938h case   21:*/		return 0x820BE93C;
		  /* 820BE93Ch */ case   22:  		/* lwz R11, <#[R9 + 20]> */
		/* 820BE93Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 820BE93Ch case   22:*/		return 0x820BE940;
		  /* 820BE940h */ case   23:  		/* lwzx R11, <#[R8 + R11]> */
		/* 820BE940h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820BE940h case   23:*/		return 0x820BE944;
		  /* 820BE944h */ case   24:  		/* lwz R11, <#[R11]> */
		/* 820BE944h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820BE944h case   24:*/		return 0x820BE948;
		  /* 820BE948h */ case   25:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 820BE948h case   25:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 820BE948h case   25:*/		return 0x820BE94C;
		  /* 820BE94Ch */ case   26:  		/* bc 4, CR0_EQ, 184 */
		/* 820BE94Ch case   26:*/		if ( !regs.CR[0].eq ) { return 0x820BEA04;  }
		/* 820BE94Ch case   26:*/		return 0x820BE950;
		  /* 820BE950h */ case   27:  		/* lis R5, 4128 */
		/* 820BE950h case   27:*/		cpu::op::lis<0>(regs,&regs.R5,0x1020);
		/* 820BE950h case   27:*/		return 0x820BE954;
		  /* 820BE954h */ case   28:  		/* li R9, 4 */
		/* 820BE954h case   28:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BE954h case   28:*/		return 0x820BE958;
		  /* 820BE958h */ case   29:  		/* li R8, 0 */
		/* 820BE958h case   29:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BE958h case   29:*/		return 0x820BE95C;
		  /* 820BE95Ch */ case   30:  		/* addi R7, R1, 160 */
		/* 820BE95Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BE95Ch case   30:*/		return 0x820BE960;
		  /* 820BE960h */ case   31:  		/* addi R6, R1, 208 */
		/* 820BE960h case   31:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD0);
		/* 820BE960h case   31:*/		return 0x820BE964;
		  /* 820BE964h */ case   32:  		/* ori R5, R5, 1 */
		/* 820BE964h case   32:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BE964h case   32:*/		return 0x820BE968;
		  /* 820BE968h */ case   33:  		/* mr R4, R21 */
		/* 820BE968h case   33:*/		regs.R4 = regs.R21;
		/* 820BE968h case   33:*/		return 0x820BE96C;
		  /* 820BE96Ch */ case   34:  		/* mr R3, R30 */
		/* 820BE96Ch case   34:*/		regs.R3 = regs.R30;
		/* 820BE96Ch case   34:*/		return 0x820BE970;
		  /* 820BE970h */ case   35:  		/* bl -56936 */
		/* 820BE970h case   35:*/		regs.LR = 0x820BE974; return 0x820B0B08;
		/* 820BE970h case   35:*/		return 0x820BE974;
		  /* 820BE974h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 820BE974h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE974h case   36:*/		return 0x820BE978;
		  /* 820BE978h */ case   37:  		/* bc 12, CR0_LT, 3984 */
		/* 820BE978h case   37:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BE978h case   37:*/		return 0x820BE97C;
		  /* 820BE97Ch */ case   38:  		/* lis R5, 4160 */
		/* 820BE97Ch case   38:*/		cpu::op::lis<0>(regs,&regs.R5,0x1040);
		/* 820BE97Ch case   38:*/		return 0x820BE980;
		  /* 820BE980h */ case   39:  		/* li R9, 4 */
		/* 820BE980h case   39:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BE980h case   39:*/		return 0x820BE984;
		  /* 820BE984h */ case   40:  		/* li R8, 0 */
		/* 820BE984h case   40:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BE984h case   40:*/		return 0x820BE988;
		  /* 820BE988h */ case   41:  		/* addi R7, R1, 208 */
		/* 820BE988h case   41:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD0);
		/* 820BE988h case   41:*/		return 0x820BE98C;
		  /* 820BE98Ch */ case   42:  		/* addi R6, R1, 212 */
		/* 820BE98Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD4);
		/* 820BE98Ch case   42:*/		return 0x820BE990;
		  /* 820BE990h */ case   43:  		/* ori R5, R5, 1 */
		/* 820BE990h case   43:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BE990h case   43:*/		return 0x820BE994;
		  /* 820BE994h */ case   44:  		/* mr R4, R21 */
		/* 820BE994h case   44:*/		regs.R4 = regs.R21;
		/* 820BE994h case   44:*/		return 0x820BE998;
		  /* 820BE998h */ case   45:  		/* mr R3, R30 */
		/* 820BE998h case   45:*/		regs.R3 = regs.R30;
		/* 820BE998h case   45:*/		return 0x820BE99C;
		  /* 820BE99Ch */ case   46:  		/* bl -56980 */
		/* 820BE99Ch case   46:*/		regs.LR = 0x820BE9A0; return 0x820B0B08;
		/* 820BE99Ch case   46:*/		return 0x820BE9A0;
		  /* 820BE9A0h */ case   47:  		/* cmpwi CR0, R3, 0 */
		/* 820BE9A0h case   47:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE9A0h case   47:*/		return 0x820BE9A4;
		  /* 820BE9A4h */ case   48:  		/* bc 12, CR0_LT, 3940 */
		/* 820BE9A4h case   48:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BE9A4h case   48:*/		return 0x820BE9A8;
		  /* 820BE9A8h */ case   49:  		/* lis R5, 4112 */
		/* 820BE9A8h case   49:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BE9A8h case   49:*/		return 0x820BE9AC;
		  /* 820BE9ACh */ case   50:  		/* li R9, 8 */
		/* 820BE9ACh case   50:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BE9ACh case   50:*/		return 0x820BE9B0;
		  /* 820BE9B0h */ case   51:  		/* li R8, 0 */
		/* 820BE9B0h case   51:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BE9B0h case   51:*/		return 0x820BE9B4;
		  /* 820BE9B4h */ case   52:  		/* addi R7, R1, 212 */
		/* 820BE9B4h case   52:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD4);
		/* 820BE9B4h case   52:*/		return 0x820BE9B8;
		  /* 820BE9B8h */ case   53:  		/* addi R6, R1, 216 */
		/* 820BE9B8h case   53:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD8);
		/* 820BE9B8h case   53:*/		return 0x820BE9BC;
		  /* 820BE9BCh */ case   54:  		/* ori R5, R5, 1 */
		/* 820BE9BCh case   54:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BE9BCh case   54:*/		return 0x820BE9C0;
		  /* 820BE9C0h */ case   55:  		/* mr R4, R21 */
		/* 820BE9C0h case   55:*/		regs.R4 = regs.R21;
		/* 820BE9C0h case   55:*/		return 0x820BE9C4;
		  /* 820BE9C4h */ case   56:  		/* mr R3, R30 */
		/* 820BE9C4h case   56:*/		regs.R3 = regs.R30;
		/* 820BE9C4h case   56:*/		return 0x820BE9C8;
		  /* 820BE9C8h */ case   57:  		/* bl -57024 */
		/* 820BE9C8h case   57:*/		regs.LR = 0x820BE9CC; return 0x820B0B08;
		/* 820BE9C8h case   57:*/		return 0x820BE9CC;
		  /* 820BE9CCh */ case   58:  		/* cmpwi CR0, R3, 0 */
		/* 820BE9CCh case   58:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE9CCh case   58:*/		return 0x820BE9D0;
		  /* 820BE9D0h */ case   59:  		/* bc 12, CR0_LT, 3896 */
		/* 820BE9D0h case   59:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BE9D0h case   59:*/		return 0x820BE9D4;
		  /* 820BE9D4h */ case   60:  		/* li R9, 6 */
		/* 820BE9D4h case   60:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820BE9D4h case   60:*/		return 0x820BE9D8;
		  /* 820BE9D8h */ case   61:  		/* addi R8, R1, 208 */
		/* 820BE9D8h case   61:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xD0);
		/* 820BE9D8h case   61:*/		return 0x820BE9DC;
		  /* 820BE9DCh */ case   62:  		/* addi R7, R1, 216 */
		/* 820BE9DCh case   62:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD8);
		/* 820BE9DCh case   62:*/		return 0x820BE9E0;
		  /* 820BE9E0h */ case   63:  		/* addi R6, R1, 220 */
		/* 820BE9E0h case   63:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xDC);
		/* 820BE9E0h case   63:*/		return 0x820BE9E4;
		  /* 820BE9E4h */ case   64:  		/* mr R5, R27 */
		/* 820BE9E4h case   64:*/		regs.R5 = regs.R27;
		/* 820BE9E4h case   64:*/		return 0x820BE9E8;
		  /* 820BE9E8h */ case   65:  		/* mr R4, R21 */
		/* 820BE9E8h case   65:*/		regs.R4 = regs.R21;
		/* 820BE9E8h case   65:*/		return 0x820BE9EC;
		  /* 820BE9ECh */ case   66:  		/* mr R3, R30 */
		/* 820BE9ECh case   66:*/		regs.R3 = regs.R30;
		/* 820BE9ECh case   66:*/		return 0x820BE9F0;
		  /* 820BE9F0h */ case   67:  		/* bl -57064 */
		/* 820BE9F0h case   67:*/		regs.LR = 0x820BE9F4; return 0x820B0B08;
		/* 820BE9F0h case   67:*/		return 0x820BE9F4;
		  /* 820BE9F4h */ case   68:  		/* cmpwi CR0, R3, 0 */
		/* 820BE9F4h case   68:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BE9F4h case   68:*/		return 0x820BE9F8;
		  /* 820BE9F8h */ case   69:  		/* bc 12, CR0_LT, 3856 */
		/* 820BE9F8h case   69:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BE9F8h case   69:*/		return 0x820BE9FC;
		  /* 820BE9FCh */ case   70:  		/* lwz R11, <#[R1 + 220]> */
		/* 820BE9FCh case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000DC) );
		/* 820BE9FCh case   70:*/		return 0x820BEA00;
		  /* 820BEA00h */ case   71:  		/* stw R11, <#[R1 + 160]> */
		/* 820BEA00h case   71:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BEA00h case   71:*/		return 0x820BEA04;
	}
	return 0x820BEA04;
} // Block from 820BE8E4h-820BEA04h (72 instructions)

//////////////////////////////////////////////////////
// Block at 820BEA04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEA04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEA04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEA04);
		  /* 820BEA04h */ case    0:  		/* lis R5, 8272 */
		/* 820BEA04h case    0:*/		cpu::op::lis<0>(regs,&regs.R5,0x2050);
		/* 820BEA04h case    0:*/		return 0x820BEA08;
		  /* 820BEA08h */ case    1:  		/* li R9, 2 */
		/* 820BEA08h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BEA08h case    1:*/		return 0x820BEA0C;
		  /* 820BEA0Ch */ case    2:  		/* addi R8, R1, 192 */
		/* 820BEA0Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820BEA0Ch case    2:*/		return 0x820BEA10;
		  /* 820BEA10h */ case    3:  		/* addi R7, R1, 160 */
		/* 820BEA10h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BEA10h case    3:*/		return 0x820BEA14;
		  /* 820BEA14h */ case    4:  		/* addi R6, R1, 224 */
		/* 820BEA14h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 820BEA14h case    4:*/		return 0x820BEA18;
		  /* 820BEA18h */ case    5:  		/* ori R5, R5, 1 */
		/* 820BEA18h case    5:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEA18h case    5:*/		return 0x820BEA1C;
		  /* 820BEA1Ch */ case    6:  		/* mr R4, R21 */
		/* 820BEA1Ch case    6:*/		regs.R4 = regs.R21;
		/* 820BEA1Ch case    6:*/		return 0x820BEA20;
		  /* 820BEA20h */ case    7:  		/* mr R3, R30 */
		/* 820BEA20h case    7:*/		regs.R3 = regs.R30;
		/* 820BEA20h case    7:*/		return 0x820BEA24;
		  /* 820BEA24h */ case    8:  		/* bl -57116 */
		/* 820BEA24h case    8:*/		regs.LR = 0x820BEA28; return 0x820B0B08;
		/* 820BEA24h case    8:*/		return 0x820BEA28;
		  /* 820BEA28h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820BEA28h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEA28h case    9:*/		return 0x820BEA2C;
		  /* 820BEA2Ch */ case   10:  		/* bc 12, CR0_LT, 3804 */
		/* 820BEA2Ch case   10:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEA2Ch case   10:*/		return 0x820BEA30;
		  /* 820BEA30h */ case   11:  		/* lwz R11, <#[R1 + 224]> */
		/* 820BEA30h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 820BEA30h case   11:*/		return 0x820BEA34;
		  /* 820BEA34h */ case   12:  		/* stw R11, <#[R1 + 160]> */
		/* 820BEA34h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BEA34h case   12:*/		return 0x820BEA38;
	}
	return 0x820BEA38;
} // Block from 820BEA04h-820BEA38h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820BEA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEA38);
		  /* 820BEA38h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BEA38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEA38h case    0:*/		return 0x820BEA3C;
		  /* 820BEA3Ch */ case    1:  		/* lwz R10, <#[R19]> */
		/* 820BEA3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 820BEA3Ch case    1:*/		return 0x820BEA40;
		  /* 820BEA40h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820BEA40h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820BEA40h case    2:*/		return 0x820BEA44;
		  /* 820BEA44h */ case    3:  		/* lwz R9, <#[R11 + 20]> */
		/* 820BEA44h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 820BEA44h case    3:*/		return 0x820BEA48;
		  /* 820BEA48h */ case    4:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820BEA48h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820BEA48h case    4:*/		return 0x820BEA4C;
		  /* 820BEA4Ch */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 820BEA4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 820BEA4Ch case    5:*/		return 0x820BEA50;
		  /* 820BEA50h */ case    6:  		/* cmpwi CR6, R10, -1 */
		/* 820BEA50h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820BEA50h case    6:*/		return 0x820BEA54;
		  /* 820BEA54h */ case    7:  		/* stw R10, <#[R1 + 164]> */
		/* 820BEA54h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BEA54h case    7:*/		return 0x820BEA58;
		  /* 820BEA58h */ case    8:  		/* bc 12, CR6_EQ, 312 */
		/* 820BEA58h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BEB90;  }
		/* 820BEA58h case    8:*/		return 0x820BEA5C;
		  /* 820BEA5Ch */ case    9:  		/* lwz R9, <#[R11 + 20]> */
		/* 820BEA5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 820BEA5Ch case    9:*/		return 0x820BEA60;
		  /* 820BEA60h */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820BEA60h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820BEA60h case   10:*/		return 0x820BEA64;
		  /* 820BEA64h */ case   11:  		/* lwz R8, <#[R11 + 136]> */
		/* 820BEA64h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000088) );
		/* 820BEA64h case   11:*/		return 0x820BEA68;
		  /* 820BEA68h */ case   12:  		/* addi R7, R1, 240 */
		/* 820BEA68h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF0);
		/* 820BEA68h case   12:*/		return 0x820BEA6C;
		  /* 820BEA6Ch */ case   13:  		/* mr R11, R18 */
		/* 820BEA6Ch case   13:*/		regs.R11 = regs.R18;
		/* 820BEA6Ch case   13:*/		return 0x820BEA70;
		  /* 820BEA70h */ case   14:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820BEA70h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820BEA70h case   14:*/		return 0x820BEA74;
		  /* 820BEA74h */ case   15:  		/* stw R8, <#[R10 + 4]> */
		/* 820BEA74h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 820BEA74h case   15:*/		return 0x820BEA78;
		  /* 820BEA78h */ case   16:  		/* stw R18, <#[R7]> */
		/* 820BEA78h case   16:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R7 + 0x00000000) );
		/* 820BEA78h case   16:*/		return 0x820BEA7C;
		  /* 820BEA7Ch */ case   17:  		/* stw R18, <#[R7 + 4]> */
		/* 820BEA7Ch case   17:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R7 + 0x00000004) );
		/* 820BEA7Ch case   17:*/		return 0x820BEA80;
		  /* 820BEA80h */ case   18:  		/* stw R18, <#[R7 + 8]> */
		/* 820BEA80h case   18:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R7 + 0x00000008) );
		/* 820BEA80h case   18:*/		return 0x820BEA84;
		  /* 820BEA84h */ case   19:  		/* stw R18, <#[R7 + 12]> */
		/* 820BEA84h case   19:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R7 + 0x0000000C) );
		/* 820BEA84h case   19:*/		return 0x820BEA88;
		  /* 820BEA88h */ case   20:  		/* stw R18, <#[R7 + 16]> */
		/* 820BEA88h case   20:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R7 + 0x00000010) );
		/* 820BEA88h case   20:*/		return 0x820BEA8C;
		  /* 820BEA8Ch */ case   21:  		/* lwz R11, <#[R1 + 164]> */
		/* 820BEA8Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BEA8Ch case   21:*/		return 0x820BEA90;
		  /* 820BEA90h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BEA90h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BEA90h case   22:*/		return 0x820BEA94;
		  /* 820BEA94h */ case   23:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BEA94h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEA94h case   23:*/		return 0x820BEA98;
		  /* 820BEA98h */ case   24:  		/* lwz R10, <#[R10 + 20]> */
		/* 820BEA98h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820BEA98h case   24:*/		return 0x820BEA9C;
		  /* 820BEA9Ch */ case   25:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820BEA9Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820BEA9Ch case   25:*/		return 0x820BEAA0;
		  /* 820BEAA0h */ case   26:  		/* lwz R11, <#[R11]> */
		/* 820BEAA0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820BEAA0h case   26:*/		return 0x820BEAA4;
		  /* 820BEAA4h */ case   27:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 820BEAA4h case   27:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 820BEAA4h case   27:*/		return 0x820BEAA8;
		  /* 820BEAA8h */ case   28:  		/* bc 4, CR0_EQ, 184 */
		/* 820BEAA8h case   28:*/		if ( !regs.CR[0].eq ) { return 0x820BEB60;  }
		/* 820BEAA8h case   28:*/		return 0x820BEAAC;
		  /* 820BEAACh */ case   29:  		/* lis R5, 4128 */
		/* 820BEAACh case   29:*/		cpu::op::lis<0>(regs,&regs.R5,0x1020);
		/* 820BEAACh case   29:*/		return 0x820BEAB0;
		  /* 820BEAB0h */ case   30:  		/* li R9, 4 */
		/* 820BEAB0h case   30:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BEAB0h case   30:*/		return 0x820BEAB4;
		  /* 820BEAB4h */ case   31:  		/* li R8, 0 */
		/* 820BEAB4h case   31:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BEAB4h case   31:*/		return 0x820BEAB8;
		  /* 820BEAB8h */ case   32:  		/* addi R7, R1, 164 */
		/* 820BEAB8h case   32:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA4);
		/* 820BEAB8h case   32:*/		return 0x820BEABC;
		  /* 820BEABCh */ case   33:  		/* addi R6, R1, 240 */
		/* 820BEABCh case   33:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF0);
		/* 820BEABCh case   33:*/		return 0x820BEAC0;
		  /* 820BEAC0h */ case   34:  		/* ori R5, R5, 1 */
		/* 820BEAC0h case   34:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEAC0h case   34:*/		return 0x820BEAC4;
		  /* 820BEAC4h */ case   35:  		/* mr R4, R21 */
		/* 820BEAC4h case   35:*/		regs.R4 = regs.R21;
		/* 820BEAC4h case   35:*/		return 0x820BEAC8;
		  /* 820BEAC8h */ case   36:  		/* mr R3, R30 */
		/* 820BEAC8h case   36:*/		regs.R3 = regs.R30;
		/* 820BEAC8h case   36:*/		return 0x820BEACC;
		  /* 820BEACCh */ case   37:  		/* bl -57284 */
		/* 820BEACCh case   37:*/		regs.LR = 0x820BEAD0; return 0x820B0B08;
		/* 820BEACCh case   37:*/		return 0x820BEAD0;
		  /* 820BEAD0h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 820BEAD0h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEAD0h case   38:*/		return 0x820BEAD4;
		  /* 820BEAD4h */ case   39:  		/* bc 12, CR0_LT, 3636 */
		/* 820BEAD4h case   39:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEAD4h case   39:*/		return 0x820BEAD8;
		  /* 820BEAD8h */ case   40:  		/* lis R5, 4160 */
		/* 820BEAD8h case   40:*/		cpu::op::lis<0>(regs,&regs.R5,0x1040);
		/* 820BEAD8h case   40:*/		return 0x820BEADC;
		  /* 820BEADCh */ case   41:  		/* li R9, 4 */
		/* 820BEADCh case   41:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BEADCh case   41:*/		return 0x820BEAE0;
		  /* 820BEAE0h */ case   42:  		/* li R8, 0 */
		/* 820BEAE0h case   42:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BEAE0h case   42:*/		return 0x820BEAE4;
		  /* 820BEAE4h */ case   43:  		/* addi R7, R1, 240 */
		/* 820BEAE4h case   43:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF0);
		/* 820BEAE4h case   43:*/		return 0x820BEAE8;
		  /* 820BEAE8h */ case   44:  		/* addi R6, R1, 244 */
		/* 820BEAE8h case   44:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF4);
		/* 820BEAE8h case   44:*/		return 0x820BEAEC;
		  /* 820BEAECh */ case   45:  		/* ori R5, R5, 1 */
		/* 820BEAECh case   45:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEAECh case   45:*/		return 0x820BEAF0;
		  /* 820BEAF0h */ case   46:  		/* mr R4, R21 */
		/* 820BEAF0h case   46:*/		regs.R4 = regs.R21;
		/* 820BEAF0h case   46:*/		return 0x820BEAF4;
		  /* 820BEAF4h */ case   47:  		/* mr R3, R30 */
		/* 820BEAF4h case   47:*/		regs.R3 = regs.R30;
		/* 820BEAF4h case   47:*/		return 0x820BEAF8;
		  /* 820BEAF8h */ case   48:  		/* bl -57328 */
		/* 820BEAF8h case   48:*/		regs.LR = 0x820BEAFC; return 0x820B0B08;
		/* 820BEAF8h case   48:*/		return 0x820BEAFC;
		  /* 820BEAFCh */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 820BEAFCh case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEAFCh case   49:*/		return 0x820BEB00;
		  /* 820BEB00h */ case   50:  		/* bc 12, CR0_LT, 3592 */
		/* 820BEB00h case   50:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEB00h case   50:*/		return 0x820BEB04;
		  /* 820BEB04h */ case   51:  		/* lis R5, 4112 */
		/* 820BEB04h case   51:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BEB04h case   51:*/		return 0x820BEB08;
		  /* 820BEB08h */ case   52:  		/* li R9, 8 */
		/* 820BEB08h case   52:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BEB08h case   52:*/		return 0x820BEB0C;
		  /* 820BEB0Ch */ case   53:  		/* li R8, 0 */
		/* 820BEB0Ch case   53:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BEB0Ch case   53:*/		return 0x820BEB10;
		  /* 820BEB10h */ case   54:  		/* addi R7, R1, 244 */
		/* 820BEB10h case   54:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF4);
		/* 820BEB10h case   54:*/		return 0x820BEB14;
		  /* 820BEB14h */ case   55:  		/* addi R6, R1, 248 */
		/* 820BEB14h case   55:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF8);
		/* 820BEB14h case   55:*/		return 0x820BEB18;
		  /* 820BEB18h */ case   56:  		/* ori R5, R5, 1 */
		/* 820BEB18h case   56:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEB18h case   56:*/		return 0x820BEB1C;
		  /* 820BEB1Ch */ case   57:  		/* mr R4, R21 */
		/* 820BEB1Ch case   57:*/		regs.R4 = regs.R21;
		/* 820BEB1Ch case   57:*/		return 0x820BEB20;
		  /* 820BEB20h */ case   58:  		/* mr R3, R30 */
		/* 820BEB20h case   58:*/		regs.R3 = regs.R30;
		/* 820BEB20h case   58:*/		return 0x820BEB24;
		  /* 820BEB24h */ case   59:  		/* bl -57372 */
		/* 820BEB24h case   59:*/		regs.LR = 0x820BEB28; return 0x820B0B08;
		/* 820BEB24h case   59:*/		return 0x820BEB28;
		  /* 820BEB28h */ case   60:  		/* cmpwi CR0, R3, 0 */
		/* 820BEB28h case   60:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEB28h case   60:*/		return 0x820BEB2C;
		  /* 820BEB2Ch */ case   61:  		/* bc 12, CR0_LT, 3548 */
		/* 820BEB2Ch case   61:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEB2Ch case   61:*/		return 0x820BEB30;
		  /* 820BEB30h */ case   62:  		/* li R9, 6 */
		/* 820BEB30h case   62:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820BEB30h case   62:*/		return 0x820BEB34;
		  /* 820BEB34h */ case   63:  		/* addi R8, R1, 240 */
		/* 820BEB34h case   63:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xF0);
		/* 820BEB34h case   63:*/		return 0x820BEB38;
		  /* 820BEB38h */ case   64:  		/* addi R7, R1, 248 */
		/* 820BEB38h case   64:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF8);
		/* 820BEB38h case   64:*/		return 0x820BEB3C;
		  /* 820BEB3Ch */ case   65:  		/* addi R6, R1, 252 */
		/* 820BEB3Ch case   65:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xFC);
		/* 820BEB3Ch case   65:*/		return 0x820BEB40;
		  /* 820BEB40h */ case   66:  		/* mr R5, R27 */
		/* 820BEB40h case   66:*/		regs.R5 = regs.R27;
		/* 820BEB40h case   66:*/		return 0x820BEB44;
		  /* 820BEB44h */ case   67:  		/* mr R4, R21 */
		/* 820BEB44h case   67:*/		regs.R4 = regs.R21;
		/* 820BEB44h case   67:*/		return 0x820BEB48;
		  /* 820BEB48h */ case   68:  		/* mr R3, R30 */
		/* 820BEB48h case   68:*/		regs.R3 = regs.R30;
		/* 820BEB48h case   68:*/		return 0x820BEB4C;
		  /* 820BEB4Ch */ case   69:  		/* bl -57412 */
		/* 820BEB4Ch case   69:*/		regs.LR = 0x820BEB50; return 0x820B0B08;
		/* 820BEB4Ch case   69:*/		return 0x820BEB50;
		  /* 820BEB50h */ case   70:  		/* cmpwi CR0, R3, 0 */
		/* 820BEB50h case   70:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEB50h case   70:*/		return 0x820BEB54;
		  /* 820BEB54h */ case   71:  		/* bc 12, CR0_LT, 3508 */
		/* 820BEB54h case   71:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEB54h case   71:*/		return 0x820BEB58;
		  /* 820BEB58h */ case   72:  		/* lwz R11, <#[R1 + 252]> */
		/* 820BEB58h case   72:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000FC) );
		/* 820BEB58h case   72:*/		return 0x820BEB5C;
		  /* 820BEB5Ch */ case   73:  		/* stw R11, <#[R1 + 164]> */
		/* 820BEB5Ch case   73:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 820BEB5Ch case   73:*/		return 0x820BEB60;
	}
	return 0x820BEB60;
} // Block from 820BEA38h-820BEB60h (74 instructions)

//////////////////////////////////////////////////////
// Block at 820BEB60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEB60);
		  /* 820BEB60h */ case    0:  		/* li R9, 0 */
		/* 820BEB60h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BEB60h case    0:*/		return 0x820BEB64;
		  /* 820BEB64h */ case    1:  		/* addi R8, R1, 160 */
		/* 820BEB64h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 820BEB64h case    1:*/		return 0x820BEB68;
		  /* 820BEB68h */ case    2:  		/* addi R7, R1, 164 */
		/* 820BEB68h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA4);
		/* 820BEB68h case    2:*/		return 0x820BEB6C;
		  /* 820BEB6Ch */ case    3:  		/* addi R6, R1, 256 */
		/* 820BEB6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x100);
		/* 820BEB6Ch case    3:*/		return 0x820BEB70;
		  /* 820BEB70h */ case    4:  		/* mr R5, R27 */
		/* 820BEB70h case    4:*/		regs.R5 = regs.R27;
		/* 820BEB70h case    4:*/		return 0x820BEB74;
		  /* 820BEB74h */ case    5:  		/* mr R4, R21 */
		/* 820BEB74h case    5:*/		regs.R4 = regs.R21;
		/* 820BEB74h case    5:*/		return 0x820BEB78;
		  /* 820BEB78h */ case    6:  		/* mr R3, R30 */
		/* 820BEB78h case    6:*/		regs.R3 = regs.R30;
		/* 820BEB78h case    6:*/		return 0x820BEB7C;
		  /* 820BEB7Ch */ case    7:  		/* bl -57460 */
		/* 820BEB7Ch case    7:*/		regs.LR = 0x820BEB80; return 0x820B0B08;
		/* 820BEB7Ch case    7:*/		return 0x820BEB80;
		  /* 820BEB80h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820BEB80h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEB80h case    8:*/		return 0x820BEB84;
		  /* 820BEB84h */ case    9:  		/* bc 12, CR0_LT, 3460 */
		/* 820BEB84h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEB84h case    9:*/		return 0x820BEB88;
		  /* 820BEB88h */ case   10:  		/* lwz R11, <#[R1 + 256]> */
		/* 820BEB88h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 820BEB88h case   10:*/		return 0x820BEB8C;
		  /* 820BEB8Ch */ case   11:  		/* stw R11, <#[R1 + 160]> */
		/* 820BEB8Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BEB8Ch case   11:*/		return 0x820BEB90;
	}
	return 0x820BEB90;
} // Block from 820BEB60h-820BEB90h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820BEB90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEB90);
		  /* 820BEB90h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BEB90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEB90h case    0:*/		return 0x820BEB94;
		  /* 820BEB94h */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 820BEB94h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 820BEB94h case    1:*/		return 0x820BEB98;
		  /* 820BEB98h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820BEB98h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BEB98h case    2:*/		return 0x820BEB9C;
		  /* 820BEB9Ch */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 820BEB9Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820BEBF0;  }
		/* 820BEB9Ch case    3:*/		return 0x820BEBA0;
		  /* 820BEBA0h */ case    4:  		/* stw R18, <#[R1 + 168]> */
		/* 820BEBA0h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BEBA0h case    4:*/		return 0x820BEBA4;
		  /* 820BEBA4h */ case    5:  		/* lis R5, 4096 */
		/* 820BEBA4h case    5:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820BEBA4h case    5:*/		return 0x820BEBA8;
		  /* 820BEBA8h */ case    6:  		/* li R9, 4 */
		/* 820BEBA8h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BEBA8h case    6:*/		return 0x820BEBAC;
		  /* 820BEBACh */ case    7:  		/* li R8, 0 */
		/* 820BEBACh case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BEBACh case    7:*/		return 0x820BEBB0;
		  /* 820BEBB0h */ case    8:  		/* addi R7, R1, 160 */
		/* 820BEBB0h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BEBB0h case    8:*/		return 0x820BEBB4;
		  /* 820BEBB4h */ case    9:  		/* addi R6, R1, 168 */
		/* 820BEBB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA8);
		/* 820BEBB4h case    9:*/		return 0x820BEBB8;
		  /* 820BEBB8h */ case   10:  		/* ori R5, R5, 1 */
		/* 820BEBB8h case   10:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEBB8h case   10:*/		return 0x820BEBBC;
		  /* 820BEBBCh */ case   11:  		/* mr R4, R21 */
		/* 820BEBBCh case   11:*/		regs.R4 = regs.R21;
		/* 820BEBBCh case   11:*/		return 0x820BEBC0;
		  /* 820BEBC0h */ case   12:  		/* mr R3, R30 */
		/* 820BEBC0h case   12:*/		regs.R3 = regs.R30;
		/* 820BEBC0h case   12:*/		return 0x820BEBC4;
		  /* 820BEBC4h */ case   13:  		/* bl -57532 */
		/* 820BEBC4h case   13:*/		regs.LR = 0x820BEBC8; return 0x820B0B08;
		/* 820BEBC4h case   13:*/		return 0x820BEBC8;
		  /* 820BEBC8h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820BEBC8h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEBC8h case   14:*/		return 0x820BEBCC;
		  /* 820BEBCCh */ case   15:  		/* bc 12, CR0_LT, 3388 */
		/* 820BEBCCh case   15:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEBCCh case   15:*/		return 0x820BEBD0;
		  /* 820BEBD0h */ case   16:  		/* lwz R11, <#[R1 + 168]> */
		/* 820BEBD0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 820BEBD0h case   16:*/		return 0x820BEBD4;
		  /* 820BEBD4h */ case   17:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BEBD4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEBD4h case   17:*/		return 0x820BEBD8;
		  /* 820BEBD8h */ case   18:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820BEBD8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820BEBD8h case   18:*/		return 0x820BEBDC;
		  /* 820BEBDCh */ case   19:  		/* stw R11, <#[R1 + 160]> */
		/* 820BEBDCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BEBDCh case   19:*/		return 0x820BEBE0;
		  /* 820BEBE0h */ case   20:  		/* lwz R11, <#[R10 + 20]> */
		/* 820BEBE0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 820BEBE0h case   20:*/		return 0x820BEBE4;
		  /* 820BEBE4h */ case   21:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820BEBE4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820BEBE4h case   21:*/		return 0x820BEBE8;
		  /* 820BEBE8h */ case   22:  		/* lwz R10, <#[R10 + 140]> */
		/* 820BEBE8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000008C) );
		/* 820BEBE8h case   22:*/		return 0x820BEBEC;
		  /* 820BEBECh */ case   23:  		/* stw R10, <#[R11 + 4]> */
		/* 820BEBECh case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820BEBECh case   23:*/		return 0x820BEBF0;
	}
	return 0x820BEBF0;
} // Block from 820BEB90h-820BEBF0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820BEBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEBF0);
		  /* 820BEBF0h */ case    0:  		/* li R28, 0 */
		/* 820BEBF0h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820BEBF0h case    0:*/		return 0x820BEBF4;
		  /* 820BEBF4h */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 820BEBF4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BEBF4h case    1:*/		return 0x820BEBF8;
		  /* 820BEBF8h */ case    2:  		/* bc 12, CR6_EQ, 3340 */
		/* 820BEBF8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BF904;  }
		/* 820BEBF8h case    2:*/		return 0x820BEBFC;
		  /* 820BEBFCh */ case    3:  		/* mr R29, R19 */
		/* 820BEBFCh case    3:*/		regs.R29 = regs.R19;
		/* 820BEBFCh case    3:*/		return 0x820BEC00;
		  /* 820BEC00h */ case    4:  		/* subf R27, R19, R16 */
		/* 820BEC00h case    4:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R19,regs.R16);
		/* 820BEC00h case    4:*/		return 0x820BEC04;
		  /* 820BEC04h */ case    5:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BEC04h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEC04h case    5:*/		return 0x820BEC08;
		  /* 820BEC08h */ case    6:  		/* li R6, 0 */
		/* 820BEC08h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BEC08h case    6:*/		return 0x820BEC0C;
		  /* 820BEC0Ch */ case    7:  		/* li R5, 0 */
		/* 820BEC0Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BEC0Ch case    7:*/		return 0x820BEC10;
		  /* 820BEC10h */ case    8:  		/* fmr FR1, FR29 */
		/* 820BEC10h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 820BEC10h case    8:*/		return 0x820BEC14;
		  /* 820BEC14h */ case    9:  		/* lwz R4, <#[R3 + 136]> */
		/* 820BEC14h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000088) );
		/* 820BEC14h case    9:*/		return 0x820BEC18;
		  /* 820BEC18h */ case   10:  		/* bl 255504 */
		/* 820BEC18h case   10:*/		regs.LR = 0x820BEC1C; return 0x820FD228;
		/* 820BEC18h case   10:*/		return 0x820BEC1C;
		  /* 820BEC1Ch */ case   11:  		/* stwx R3, <#[R27 + R29]> */
		/* 820BEC1Ch case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + regs.R29 + 0x00000000) );
		/* 820BEC1Ch case   11:*/		return 0x820BEC20;
		  /* 820BEC20h */ case   12:  		/* cmpwi CR6, R3, -1 */
		/* 820BEC20h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BEC20h case   12:*/		return 0x820BEC24;
		  /* 820BEC24h */ case   13:  		/* bc 12, CR6_EQ, 3180 */
		/* 820BEC24h case   13:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BEC24h case   13:*/		return 0x820BEC28;
		  /* 820BEC28h */ case   14:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BEC28h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEC28h case   14:*/		return 0x820BEC2C;
		  /* 820BEC2Ch */ case   15:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820BEC2Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820BEC2Ch case   15:*/		return 0x820BEC30;
		  /* 820BEC30h */ case   16:  		/* lwz R9, <#[R29]> */
		/* 820BEC30h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 820BEC30h case   16:*/		return 0x820BEC34;
		  /* 820BEC34h */ case   17:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820BEC34h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820BEC34h case   17:*/		return 0x820BEC38;
		  /* 820BEC38h */ case   18:  		/* lwz R11, <#[R11 + 20]> */
		/* 820BEC38h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820BEC38h case   18:*/		return 0x820BEC3C;
		  /* 820BEC3Ch */ case   19:  		/* lwzx R31, <#[R10 + R11]> */
		/* 820BEC3Ch case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BEC3Ch case   19:*/		return 0x820BEC40;
		  /* 820BEC40h */ case   20:  		/* lwzx R4, <#[R9 + R11]> */
		/* 820BEC40h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820BEC40h case   20:*/		return 0x820BEC44;
		  /* 820BEC44h */ case   21:  		/* mr R3, R31 */
		/* 820BEC44h case   21:*/		regs.R3 = regs.R31;
		/* 820BEC44h case   21:*/		return 0x820BEC48;
		  /* 820BEC48h */ case   22:  		/* bl 253792 */
		/* 820BEC48h case   22:*/		regs.LR = 0x820BEC4C; return 0x820FCBA8;
		/* 820BEC48h case   22:*/		return 0x820BEC4C;
		  /* 820BEC4Ch */ case   23:  		/* li R11, 31 */
		/* 820BEC4Ch case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x1F);
		/* 820BEC4Ch case   23:*/		return 0x820BEC50;
		  /* 820BEC50h */ case   24:  		/* stw R18, <#[R31 + 52]> */
		/* 820BEC50h case   24:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000034) );
		/* 820BEC50h case   24:*/		return 0x820BEC54;
		  /* 820BEC54h */ case   25:  		/* cmplw CR6, R17, R25 */
		/* 820BEC54h case   25:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R25);
		/* 820BEC54h case   25:*/		return 0x820BEC58;
		  /* 820BEC58h */ case   26:  		/* lwz R10, <#[R1 + 160]> */
		/* 820BEC58h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BEC58h case   26:*/		return 0x820BEC5C;
		  /* 820BEC5Ch */ case   27:  		/* stw R10, <#[R31 + 8]> */
		/* 820BEC5Ch case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820BEC5Ch case   27:*/		return 0x820BEC60;
		  /* 820BEC60h */ case   28:  		/* stw R11, <#[R31]> */
		/* 820BEC60h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820BEC60h case   28:*/		return 0x820BEC64;
		  /* 820BEC64h */ case   29:  		/* lfd FR0, <#[R30 + 168]> */
		/* 820BEC64h case   29:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x000000A8) );
		/* 820BEC64h case   29:*/		return 0x820BEC68;
		  /* 820BEC68h */ case   30:  		/* stfd FR0, <#[R31 + 32]> */
		/* 820BEC68h case   30:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000020) );
		/* 820BEC68h case   30:*/		return 0x820BEC6C;
		  /* 820BEC6Ch */ case   31:  		/* lfd FR0, <#[R30 + 176]> */
		/* 820BEC6Ch case   31:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R30 + 0x000000B0) );
		/* 820BEC6Ch case   31:*/		return 0x820BEC70;
		  /* 820BEC70h */ case   32:  		/* stfd FR0, <#[R31 + 40]> */
		/* 820BEC70h case   32:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000028) );
		/* 820BEC70h case   32:*/		return 0x820BEC74;
		  /* 820BEC74h */ case   33:  		/* bc 4, CR6_LT, 128 */
		/* 820BEC74h case   33:*/		if ( !regs.CR[6].lt ) { return 0x820BECF4;  }
		/* 820BEC74h case   33:*/		return 0x820BEC78;
		  /* 820BEC78h */ case   34:  		/* mullw R11, R17, R20 */
		/* 820BEC78h case   34:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R17,regs.R20);
		/* 820BEC78h case   34:*/		return 0x820BEC7C;
		  /* 820BEC7Ch */ case   35:  		/* add R11, R11, R28 */
		/* 820BEC7Ch case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 820BEC7Ch case   35:*/		return 0x820BEC80;
		  /* 820BEC80h */ case   36:  		/* subf R8, R17, R25 */
		/* 820BEC80h case   36:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R17,regs.R25);
		/* 820BEC80h case   36:*/		return 0x820BEC84;
		  /* 820BEC84h */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BEC84h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BEC84h case   37:*/		return 0x820BEC88;
		  /* 820BEC88h */ case   38:  		/* rlwinm R9, R20, 2, 0, 29 */
		/* 820BEC88h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R20);
		/* 820BEC88h case   38:*/		return 0x820BEC8C;
		  /* 820BEC8Ch */ case   39:  		/* add R10, R11, R19 */
		/* 820BEC8Ch case   39:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R19);
		/* 820BEC8Ch case   39:*/		return 0x820BEC90;
		  /* 820BEC90h */ case   40:  		/* mtspr CTR, R8 */
		/* 820BEC90h case   40:*/		regs.CTR = regs.R8;
		/* 820BEC90h case   40:*/		return 0x820BEC94;
		  /* 820BEC94h */ case   41:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BEC94h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEC94h case   41:*/		return 0x820BEC98;
		  /* 820BEC98h */ case   42:  		/* lwz R8, <#[R10]> */
		/* 820BEC98h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820BEC98h case   42:*/		return 0x820BEC9C;
		  /* 820BEC9Ch */ case   43:  		/* lwz R7, <#[R31]> */
		/* 820BEC9Ch case   43:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 820BEC9Ch case   43:*/		return 0x820BECA0;
		  /* 820BECA0h */ case   44:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 820BECA0h case   44:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 820BECA0h case   44:*/		return 0x820BECA4;
		  /* 820BECA4h */ case   45:  		/* lwz R11, <#[R11 + 20]> */
		/* 820BECA4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820BECA4h case   45:*/		return 0x820BECA8;
		  /* 820BECA8h */ case   46:  		/* lwzx R11, <#[R8 + R11]> */
		/* 820BECA8h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 820BECA8h case   46:*/		return 0x820BECAC;
		  /* 820BECACh */ case   47:  		/* lwz R8, <#[R11]> */
		/* 820BECACh case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820BECACh case   47:*/		return 0x820BECB0;
		  /* 820BECB0h */ case   48:  		/* and R8, R7, R8 */
		/* 820BECB0h case   48:*/		cpu::op::and<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 820BECB0h case   48:*/		return 0x820BECB4;
		  /* 820BECB4h */ case   49:  		/* stw R8, <#[R31]> */
		/* 820BECB4h case   49:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 820BECB4h case   49:*/		return 0x820BECB8;
		  /* 820BECB8h */ case   50:  		/* lwz R8, <#[R11]> */
		/* 820BECB8h case   50:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820BECB8h case   50:*/		return 0x820BECBC;
		  /* 820BECBCh */ case   51:  		/* rlwinm. R8, R8, 0, 23, 23 */
		/* 820BECBCh case   51:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R8,regs.R8);
		/* 820BECBCh case   51:*/		return 0x820BECC0;
		  /* 820BECC0h */ case   52:  		/* bc 12, CR0_EQ, 44 */
		/* 820BECC0h case   52:*/		if ( regs.CR[0].eq ) { return 0x820BECEC;  }
		/* 820BECC0h case   52:*/		return 0x820BECC4;
		  /* 820BECC4h */ case   53:  		/* lfd FR0, <#[R11 + 32]> */
		/* 820BECC4h case   53:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000020) );
		/* 820BECC4h case   53:*/		return 0x820BECC8;
		  /* 820BECC8h */ case   54:  		/* lfd FR13, <#[R31 + 32]> */
		/* 820BECC8h case   54:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R31 + 0x00000020) );
		/* 820BECC8h case   54:*/		return 0x820BECCC;
		  /* 820BECCCh */ case   55:  		/* fcmpu CR6, FR13, FR0 */
		/* 820BECCCh case   55:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820BECCCh case   55:*/		return 0x820BECD0;
		  /* 820BECD0h */ case   56:  		/* bc 4, CR6_GT, 8 */
		/* 820BECD0h case   56:*/		if ( !regs.CR[6].gt ) { return 0x820BECD8;  }
		/* 820BECD0h case   56:*/		return 0x820BECD4;
		  /* 820BECD4h */ case   57:  		/* stfd FR0, <#[R31 + 32]> */
		/* 820BECD4h case   57:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000020) );
		/* 820BECD4h case   57:*/		return 0x820BECD8;
	}
	return 0x820BECD8;
} // Block from 820BEBF0h-820BECD8h (58 instructions)

//////////////////////////////////////////////////////
// Block at 820BECD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BECD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BECD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BECD8);
		  /* 820BECD8h */ case    0:  		/* lfd FR0, <#[R11 + 40]> */
		/* 820BECD8h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000028) );
		/* 820BECD8h case    0:*/		return 0x820BECDC;
		  /* 820BECDCh */ case    1:  		/* lfd FR13, <#[R31 + 40]> */
		/* 820BECDCh case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R31 + 0x00000028) );
		/* 820BECDCh case    1:*/		return 0x820BECE0;
		  /* 820BECE0h */ case    2:  		/* fcmpu CR6, FR13, FR0 */
		/* 820BECE0h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 820BECE0h case    2:*/		return 0x820BECE4;
		  /* 820BECE4h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 820BECE4h case    3:*/		if ( !regs.CR[6].lt ) { return 0x820BECEC;  }
		/* 820BECE4h case    3:*/		return 0x820BECE8;
		  /* 820BECE8h */ case    4:  		/* stfd FR0, <#[R31 + 40]> */
		/* 820BECE8h case    4:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000028) );
		/* 820BECE8h case    4:*/		return 0x820BECEC;
	}
	return 0x820BECEC;
} // Block from 820BECD8h-820BECECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BECECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BECEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BECEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BECEC);
		  /* 820BECECh */ case    0:  		/* add R10, R9, R10 */
		/* 820BECECh case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 820BECECh case    0:*/		return 0x820BECF0;
		  /* 820BECF0h */ case    1:  		/* bc 16, CR0_LT, -92 */
		/* 820BECF0h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BEC94;  }
		/* 820BECF0h case    1:*/		return 0x820BECF4;
	}
	return 0x820BECF4;
} // Block from 820BECECh-820BECF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BECF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BECF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BECF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BECF4);
		  /* 820BECF4h */ case    0:  		/* lfd FR0, <#[R31 + 32]> */
		/* 820BECF4h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R31 + 0x00000020) );
		/* 820BECF4h case    0:*/		return 0x820BECF8;
		  /* 820BECF8h */ case    1:  		/* lfd FR13, <#[R31 + 40]> */
		/* 820BECF8h case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R31 + 0x00000028) );
		/* 820BECF8h case    1:*/		return 0x820BECFC;
		  /* 820BECFCh */ case    2:  		/* fcmpu CR6, FR0, FR13 */
		/* 820BECFCh case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820BECFCh case    2:*/		return 0x820BED00;
		  /* 820BED00h */ case    3:  		/* bc 12, CR6_GT, 16 */
		/* 820BED00h case    3:*/		if ( regs.CR[6].gt ) { return 0x820BED10;  }
		/* 820BED00h case    3:*/		return 0x820BED04;
		  /* 820BED04h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 820BED04h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820BED04h case    4:*/		return 0x820BED08;
		  /* 820BED08h */ case    5:  		/* ori R11, R11, 256 */
		/* 820BED08h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 820BED08h case    5:*/		return 0x820BED0C;
		  /* 820BED0Ch */ case    6:  		/* stw R11, <#[R31]> */
		/* 820BED0Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820BED0Ch case    6:*/		return 0x820BED10;
	}
	return 0x820BED10;
} // Block from 820BECF4h-820BED10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BED10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BED10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BED10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BED10);
		  /* 820BED10h */ case    0:  		/* fcmpu CR6, FR0, FR13 */
		/* 820BED10h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 820BED10h case    0:*/		return 0x820BED14;
		  /* 820BED14h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 820BED14h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BED24;  }
		/* 820BED14h case    1:*/		return 0x820BED18;
		  /* 820BED18h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 820BED18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820BED18h case    2:*/		return 0x820BED1C;
		  /* 820BED1Ch */ case    3:  		/* ori R11, R11, 128 */
		/* 820BED1Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 820BED1Ch case    3:*/		return 0x820BED20;
		  /* 820BED20h */ case    4:  		/* stw R11, <#[R31]> */
		/* 820BED20h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820BED20h case    4:*/		return 0x820BED24;
	}
	return 0x820BED24;
} // Block from 820BED10h-820BED24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BED24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BED24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BED24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BED24);
		  /* 820BED24h */ case    0:  		/* addi R28, R28, 1 */
		/* 820BED24h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 820BED24h case    0:*/		return 0x820BED28;
		  /* 820BED28h */ case    1:  		/* addi R29, R29, 4 */
		/* 820BED28h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820BED28h case    1:*/		return 0x820BED2C;
		  /* 820BED2Ch */ case    2:  		/* cmplw CR6, R28, R20 */
		/* 820BED2Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R20);
		/* 820BED2Ch case    2:*/		return 0x820BED30;
		  /* 820BED30h */ case    3:  		/* bc 12, CR6_LT, -300 */
		/* 820BED30h case    3:*/		if ( regs.CR[6].lt ) { return 0x820BEC04;  }
		/* 820BED30h case    3:*/		return 0x820BED34;
		  /* 820BED34h */ case    4:  		/* b 3024 */
		/* 820BED34h case    4:*/		return 0x820BF904;
		/* 820BED34h case    4:*/		return 0x820BED38;
	}
	return 0x820BED38;
} // Block from 820BED24h-820BED38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BED38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BED38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BED38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BED38);
		  /* 820BED38h */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 820BED38h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820BED38h case    0:*/		return 0x820BED3C;
		  /* 820BED3Ch */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 820BED3Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BED6C;  }
		/* 820BED3Ch case    1:*/		return 0x820BED40;
		  /* 820BED40h */ case    2:  		/* lwz R11, <#[R30 + 88]> */
		/* 820BED40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820BED40h case    2:*/		return 0x820BED44;
		  /* 820BED44h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 820BED44h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BED44h case    3:*/		return 0x820BED48;
		  /* 820BED48h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 820BED48h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BED5C;  }
		/* 820BED48h case    4:*/		return 0x820BED4C;
		  /* 820BED4Ch */ case    5:  		/* lis R11, -32255 */
		/* 820BED4Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BED4Ch case    5:*/		return 0x820BED50;
		  /* 820BED50h */ case    6:  		/* li R5, 3512 */
		/* 820BED50h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xDB8);
		/* 820BED50h case    6:*/		return 0x820BED54;
		  /* 820BED54h */ case    7:  		/* addi R6, R11, 9056 */
		/* 820BED54h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2360);
		/* 820BED54h case    7:*/		return 0x820BED58;
		  /* 820BED58h */ case    8:  		/* b -1264 */
		/* 820BED58h case    8:*/		return 0x820BE868;
		/* 820BED58h case    8:*/		return 0x820BED5C;
	}
	return 0x820BED5C;
} // Block from 820BED38h-820BED5Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BED5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BED5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BED5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BED5C);
		  /* 820BED5Ch */ case    0:  		/* stw R26, <#[R30 + 96]> */
		/* 820BED5Ch case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000060) );
		/* 820BED5Ch case    0:*/		return 0x820BED60;
	}
	return 0x820BED60;
} // Block from 820BED5Ch-820BED60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BED60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BED60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BED60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BED60);
		  /* 820BED60h */ case    0:  		/* lis R3, -32768 */
		/* 820BED60h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820BED60h case    0:*/		return 0x820BED64;
		  /* 820BED64h */ case    1:  		/* ori R3, R3, 16389 */
		/* 820BED64h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820BED64h case    1:*/		return 0x820BED68;
		  /* 820BED68h */ case    2:  		/* b 2976 */
		/* 820BED68h case    2:*/		return 0x820BF908;
		/* 820BED68h case    2:*/		return 0x820BED6C;
	}
	return 0x820BED6C;
} // Block from 820BED60h-820BED6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BED6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BED6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BED6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BED6C);
		  /* 820BED6Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BED6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BED6Ch case    0:*/		return 0x820BED70;
		  /* 820BED70h */ case    1:  		/* lwz R10, <#[R24]> */
		/* 820BED70h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 820BED70h case    1:*/		return 0x820BED74;
		  /* 820BED74h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820BED74h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820BED74h case    2:*/		return 0x820BED78;
		  /* 820BED78h */ case    3:  		/* lwz R9, <#[R11 + 20]> */
		/* 820BED78h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 820BED78h case    3:*/		return 0x820BED7C;
		  /* 820BED7Ch */ case    4:  		/* lwzx R10, <#[R9 + R10]> */
		/* 820BED7Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 820BED7Ch case    4:*/		return 0x820BED80;
		  /* 820BED80h */ case    5:  		/* lwz R10, <#[R10]> */
		/* 820BED80h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820BED80h case    5:*/		return 0x820BED84;
		  /* 820BED84h */ case    6:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 820BED84h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 820BED84h case    6:*/		return 0x820BED88;
		  /* 820BED88h */ case    7:  		/* bc 12, CR0_EQ, 132 */
		/* 820BED88h case    7:*/		if ( regs.CR[0].eq ) { return 0x820BEE0C;  }
		/* 820BED88h case    7:*/		return 0x820BED8C;
		  /* 820BED8Ch */ case    8:  		/* mr R4, R20 */
		/* 820BED8Ch case    8:*/		regs.R4 = regs.R20;
		/* 820BED8Ch case    8:*/		return 0x820BED90;
		  /* 820BED90h */ case    9:  		/* mr R3, R30 */
		/* 820BED90h case    9:*/		regs.R3 = regs.R30;
		/* 820BED90h case    9:*/		return 0x820BED94;
		  /* 820BED94h */ case   10:  		/* bl -59044 */
		/* 820BED94h case   10:*/		regs.LR = 0x820BED98; return 0x820B06F0;
		/* 820BED94h case   10:*/		return 0x820BED98;
		  /* 820BED98h */ case   11:  		/* or. R8, R3, R3 */
		/* 820BED98h case   11:*/		cpu::op::or<1>(regs,&regs.R8,regs.R3,regs.R3);
		/* 820BED98h case   11:*/		return 0x820BED9C;
		  /* 820BED9Ch */ case   12:  		/* bc 12, CR0_EQ, 2804 */
		/* 820BED9Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x820BF890;  }
		/* 820BED9Ch case   12:*/		return 0x820BEDA0;
		  /* 820BEDA0h */ case   13:  		/* cmplwi CR6, R20, 0 */
		/* 820BEDA0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BEDA0h case   13:*/		return 0x820BEDA4;
		  /* 820BEDA4h */ case   14:  		/* bc 12, CR6_EQ, 60 */
		/* 820BEDA4h case   14:*/		if ( regs.CR[6].eq ) { return 0x820BEDE0;  }
		/* 820BEDA4h case   14:*/		return 0x820BEDA8;
		  /* 820BEDA8h */ case   15:  		/* addi R11, R8, -4 */
		/* 820BEDA8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFC);
		/* 820BEDA8h case   15:*/		return 0x820BEDAC;
		  /* 820BEDACh */ case   16:  		/* mtspr CTR, R20 */
		/* 820BEDACh case   16:*/		regs.CTR = regs.R20;
		/* 820BEDACh case   16:*/		return 0x820BEDB0;
		  /* 820BEDB0h */ case   17:  		/* lwz R10, <#[R24]> */
		/* 820BEDB0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 820BEDB0h case   17:*/		return 0x820BEDB4;
		  /* 820BEDB4h */ case   18:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BEDB4h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BEDB4h case   18:*/		return 0x820BEDB8;
		  /* 820BEDB8h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BEDB8h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BEDB0;  }
		/* 820BEDB8h case   19:*/		return 0x820BEDBC;
		  /* 820BEDBCh */ case   20:  		/* cmplwi CR6, R20, 0 */
		/* 820BEDBCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BEDBCh case   20:*/		return 0x820BEDC0;
		  /* 820BEDC0h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 820BEDC0h case   21:*/		if ( regs.CR[6].eq ) { return 0x820BEDE0;  }
		/* 820BEDC0h case   21:*/		return 0x820BEDC4;
		  /* 820BEDC4h */ case   22:  		/* addi R11, R16, -4 */
		/* 820BEDC4h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0xFFFFFFFC);
		/* 820BEDC4h case   22:*/		return 0x820BEDC8;
		  /* 820BEDC8h */ case   23:  		/* mr R10, R18 */
		/* 820BEDC8h case   23:*/		regs.R10 = regs.R18;
		/* 820BEDC8h case   23:*/		return 0x820BEDCC;
		  /* 820BEDCCh */ case   24:  		/* cmplwi CR0, R20, 0 */
		/* 820BEDCCh case   24:*/		cpu::op::cmplwi<0>(regs,regs.R20,0x00000000);
		/* 820BEDCCh case   24:*/		return 0x820BEDD0;
		  /* 820BEDD0h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 820BEDD0h case   25:*/		if ( regs.CR[0].eq ) { return 0x820BEDE0;  }
		/* 820BEDD0h case   25:*/		return 0x820BEDD4;
		  /* 820BEDD4h */ case   26:  		/* mtspr CTR, R20 */
		/* 820BEDD4h case   26:*/		regs.CTR = regs.R20;
		/* 820BEDD4h case   26:*/		return 0x820BEDD8;
		  /* 820BEDD8h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BEDD8h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BEDD8h case   27:*/		return 0x820BEDDC;
		  /* 820BEDDCh */ case   28:  		/* bc 16, CR0_LT, -4 */
		/* 820BEDDCh case   28:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BEDD8;  }
		/* 820BEDDCh case   28:*/		return 0x820BEDE0;
	}
	return 0x820BEDE0;
} // Block from 820BED6Ch-820BEDE0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820BEDE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEDE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEDE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEDE0);
		  /* 820BEDE0h */ case    0:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 820BEDE0h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 820BEDE0h case    0:*/		return 0x820BEDE4;
		  /* 820BEDE4h */ case    1:  		/* mr R9, R20 */
		/* 820BEDE4h case    1:*/		regs.R9 = regs.R20;
		/* 820BEDE4h case    1:*/		return 0x820BEDE8;
		  /* 820BEDE8h */ case    2:  		/* add R7, R11, R19 */
		/* 820BEDE8h case    2:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R19);
		/* 820BEDE8h case    2:*/		return 0x820BEDEC;
		  /* 820BEDECh */ case    3:  		/* mr R6, R19 */
		/* 820BEDECh case    3:*/		regs.R6 = regs.R19;
		/* 820BEDECh case    3:*/		return 0x820BEDF0;
		  /* 820BEDF0h */ case    4:  		/* mr R5, R16 */
		/* 820BEDF0h case    4:*/		regs.R5 = regs.R16;
		/* 820BEDF0h case    4:*/		return 0x820BEDF4;
		  /* 820BEDF4h */ case    5:  		/* mr R4, R21 */
		/* 820BEDF4h case    5:*/		regs.R4 = regs.R21;
		/* 820BEDF4h case    5:*/		return 0x820BEDF8;
		  /* 820BEDF8h */ case    6:  		/* mr R3, R30 */
		/* 820BEDF8h case    6:*/		regs.R3 = regs.R30;
		/* 820BEDF8h case    6:*/		return 0x820BEDFC;
		  /* 820BEDFCh */ case    7:  		/* bl -47228 */
		/* 820BEDFCh case    7:*/		regs.LR = 0x820BEE00; return 0x820B3580;
		/* 820BEDFCh case    7:*/		return 0x820BEE00;
		  /* 820BEE00h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820BEE00h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEE00h case    8:*/		return 0x820BEE04;
		  /* 820BEE04h */ case    9:  		/* bc 12, CR0_LT, 2820 */
		/* 820BEE04h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEE04h case    9:*/		return 0x820BEE08;
		  /* 820BEE08h */ case   10:  		/* b 2812 */
		/* 820BEE08h case   10:*/		return 0x820BF904;
		/* 820BEE08h case   10:*/		return 0x820BEE0C;
	}
	return 0x820BEE0C;
} // Block from 820BEDE0h-820BEE0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BEE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEE0C);
		  /* 820BEE0Ch */ case    0:  		/* subf R22, R17, R25 */
		/* 820BEE0Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R22,regs.R17,regs.R25);
		/* 820BEE0Ch case    0:*/		return 0x820BEE10;
		  /* 820BEE10h */ case    1:  		/* cmplwi CR6, R22, 4 */
		/* 820BEE10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000004);
		/* 820BEE10h case    1:*/		return 0x820BEE14;
		  /* 820BEE14h */ case    2:  		/* bc 12, CR6_GT, 1348 */
		/* 820BEE14h case    2:*/		if ( regs.CR[6].gt ) { return 0x820BF358;  }
		/* 820BEE14h case    2:*/		return 0x820BEE18;
		  /* 820BEE18h */ case    3:  		/* cmplwi CR6, R20, 1 */
		/* 820BEE18h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000001);
		/* 820BEE18h case    3:*/		return 0x820BEE1C;
		  /* 820BEE1Ch */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 820BEE1Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BEE28;  }
		/* 820BEE1Ch case    4:*/		return 0x820BEE20;
		  /* 820BEE20h */ case    5:  		/* cmpwi CR6, R3, 0 */
		/* 820BEE20h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 820BEE20h case    5:*/		return 0x820BEE24;
		  /* 820BEE24h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 820BEE24h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BEE38;  }
		/* 820BEE24h case    6:*/		return 0x820BEE28;
	}
	return 0x820BEE28;
} // Block from 820BEE0Ch-820BEE28h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BEE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEE28);
		  /* 820BEE28h */ case    0:  		/* cmplwi CR6, R20, 4 */
		/* 820BEE28h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000004);
		/* 820BEE28h case    0:*/		return 0x820BEE2C;
		  /* 820BEE2Ch */ case    1:  		/* bc 12, CR6_GT, 1324 */
		/* 820BEE2Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x820BF358;  }
		/* 820BEE2Ch case    1:*/		return 0x820BEE30;
		  /* 820BEE30h */ case    2:  		/* cmpwi CR6, R5, 0 */
		/* 820BEE30h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 820BEE30h case    2:*/		return 0x820BEE34;
		  /* 820BEE34h */ case    3:  		/* bc 12, CR6_EQ, 1316 */
		/* 820BEE34h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BF358;  }
		/* 820BEE34h case    3:*/		return 0x820BEE38;
	}
	return 0x820BEE38;
} // Block from 820BEE28h-820BEE38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BEE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEE38);
		  /* 820BEE38h */ case    0:  		/* lwz R10, <#[R30 + 88]> */
		/* 820BEE38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000058) );
		/* 820BEE38h case    0:*/		return 0x820BEE3C;
		  /* 820BEE3Ch */ case    1:  		/* cmpwi CR6, R10, 0 */
		/* 820BEE3Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820BEE3Ch case    1:*/		return 0x820BEE40;
		  /* 820BEE40h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 820BEE40h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BEE5C;  }
		/* 820BEE40h case    2:*/		return 0x820BEE44;
		  /* 820BEE44h */ case    3:  		/* cmplwi CR6, R20, 1 */
		/* 820BEE44h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000001);
		/* 820BEE44h case    3:*/		return 0x820BEE48;
		  /* 820BEE48h */ case    4:  		/* bc 12, CR6_GT, 16 */
		/* 820BEE48h case    4:*/		if ( regs.CR[6].gt ) { return 0x820BEE58;  }
		/* 820BEE48h case    4:*/		return 0x820BEE4C;
		  /* 820BEE4Ch */ case    5:  		/* lwz R11, <#[R11 + 112]> */
		/* 820BEE4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 820BEE4Ch case    5:*/		return 0x820BEE50;
		  /* 820BEE50h */ case    6:  		/* rlwinm. R11, R11, 0, 10, 10 */
		/* 820BEE50h case    6:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R11,regs.R11);
		/* 820BEE50h case    6:*/		return 0x820BEE54;
		  /* 820BEE54h */ case    7:  		/* bc 4, CR0_EQ, 8 */
		/* 820BEE54h case    7:*/		if ( !regs.CR[0].eq ) { return 0x820BEE5C;  }
		/* 820BEE54h case    7:*/		return 0x820BEE58;
	}
	return 0x820BEE58;
} // Block from 820BEE38h-820BEE58h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BEE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEE58);
		  /* 820BEE58h */ case    0:  		/* stw R26, <#[R30 + 96]> */
		/* 820BEE58h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000060) );
		/* 820BEE58h case    0:*/		return 0x820BEE5C;
	}
	return 0x820BEE5C;
} // Block from 820BEE58h-820BEE5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BEE5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEE5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEE5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEE5C);
		  /* 820BEE5Ch */ case    0:  		/* mulli R11, R22, 7 */
		/* 820BEE5Ch case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R22,0x7);
		/* 820BEE5Ch case    0:*/		return 0x820BEE60;
	}
	return 0x820BEE60;
} // Block from 820BEE5Ch-820BEE60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BEE60h
// Function '?EmitArray@CCompiler@D3DXShader@@IAAJPAVCNode@2@PAII1I01H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEE60);
		  /* 820BEE60h */ case    0:  		/* addi R31, R11, 4 */
		/* 820BEE60h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 820BEE60h case    0:*/		return 0x820BEE64;
		  /* 820BEE64h */ case    1:  		/* mr R3, R30 */
		/* 820BEE64h case    1:*/		regs.R3 = regs.R30;
		/* 820BEE64h case    1:*/		return 0x820BEE68;
		  /* 820BEE68h */ case    2:  		/* mr R4, R31 */
		/* 820BEE68h case    2:*/		regs.R4 = regs.R31;
		/* 820BEE68h case    2:*/		return 0x820BEE6C;
		  /* 820BEE6Ch */ case    3:  		/* bl -59260 */
		/* 820BEE6Ch case    3:*/		regs.LR = 0x820BEE70; return 0x820B06F0;
		/* 820BEE6Ch case    3:*/		return 0x820BEE70;
		  /* 820BEE70h */ case    4:  		/* or. R11, R3, R3 */
		/* 820BEE70h case    4:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BEE70h case    4:*/		return 0x820BEE74;
		  /* 820BEE74h */ case    5:  		/* bc 12, CR0_EQ, 2588 */
		/* 820BEE74h case    5:*/		if ( regs.CR[0].eq ) { return 0x820BF890;  }
		/* 820BEE74h case    5:*/		return 0x820BEE78;
		  /* 820BEE78h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 820BEE78h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820BEE78h case    6:*/		return 0x820BEE7C;
		  /* 820BEE7Ch */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 820BEE7Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x820BEE9C;  }
		/* 820BEE7Ch case    7:*/		return 0x820BEE80;
		  /* 820BEE80h */ case    8:  		/* addi R10, R11, -4 */
		/* 820BEE80h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 820BEE80h case    8:*/		return 0x820BEE84;
		  /* 820BEE84h */ case    9:  		/* mr R9, R18 */
		/* 820BEE84h case    9:*/		regs.R9 = regs.R18;
		/* 820BEE84h case    9:*/		return 0x820BEE88;
		  /* 820BEE88h */ case   10:  		/* cmplwi CR0, R31, 0 */
		/* 820BEE88h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820BEE88h case   10:*/		return 0x820BEE8C;
		  /* 820BEE8Ch */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 820BEE8Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x820BEE9C;  }
		/* 820BEE8Ch case   11:*/		return 0x820BEE90;
		  /* 820BEE90h */ case   12:  		/* mtspr CTR, R31 */
		/* 820BEE90h case   12:*/		regs.CTR = regs.R31;
		/* 820BEE90h case   12:*/		return 0x820BEE94;
		  /* 820BEE94h */ case   13:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BEE94h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BEE94h case   13:*/		return 0x820BEE98;
		  /* 820BEE98h */ case   14:  		/* bc 16, CR0_LT, -4 */
		/* 820BEE98h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BEE94;  }
		/* 820BEE98h case   14:*/		return 0x820BEE9C;
	}
	return 0x820BEE9C;
} // Block from 820BEE60h-820BEE9Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 820BEE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEE9C);
		  /* 820BEE9Ch */ case    0:  		/* li R10, 4 */
		/* 820BEE9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820BEE9Ch case    0:*/		return 0x820BEEA0;
		  /* 820BEEA0h */ case    1:  		/* addi R9, R1, 268 */
		/* 820BEEA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x10C);
		/* 820BEEA0h case    1:*/		return 0x820BEEA4;
		  /* 820BEEA4h */ case    2:  		/* mtspr CTR, R10 */
		/* 820BEEA4h case    2:*/		regs.CTR = regs.R10;
		/* 820BEEA4h case    2:*/		return 0x820BEEA8;
		  /* 820BEEA8h */ case    3:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BEEA8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BEEA8h case    3:*/		return 0x820BEEAC;
		  /* 820BEEACh */ case    4:  		/* addi R11, R11, 4 */
		/* 820BEEACh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BEEACh case    4:*/		return 0x820BEEB0;
		  /* 820BEEB0h */ case    5:  		/* bc 16, CR0_LT, -8 */
		/* 820BEEB0h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BEEA8;  }
		/* 820BEEB0h case    5:*/		return 0x820BEEB4;
		  /* 820BEEB4h */ case    6:  		/* li R9, 7 */
		/* 820BEEB4h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x7);
		/* 820BEEB4h case    6:*/		return 0x820BEEB8;
		  /* 820BEEB8h */ case    7:  		/* rlwinm R8, R22, 2, 0, 29 */
		/* 820BEEB8h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R22);
		/* 820BEEB8h case    7:*/		return 0x820BEEBC;
		  /* 820BEEBCh */ case    8:  		/* addi R10, R1, 284 */
		/* 820BEEBCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x11C);
		/* 820BEEBCh case    8:*/		return 0x820BEEC0;
		  /* 820BEEC0h */ case    9:  		/* mtspr CTR, R9 */
		/* 820BEEC0h case    9:*/		regs.CTR = regs.R9;
		/* 820BEEC0h case    9:*/		return 0x820BEEC4;
		  /* 820BEEC4h */ case   10:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BEEC4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BEEC4h case   10:*/		return 0x820BEEC8;
		  /* 820BEEC8h */ case   11:  		/* add R11, R8, R11 */
		/* 820BEEC8h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BEEC8h case   11:*/		return 0x820BEECC;
		  /* 820BEECCh */ case   12:  		/* bc 16, CR0_LT, -8 */
		/* 820BEECCh case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BEEC4;  }
		/* 820BEECCh case   12:*/		return 0x820BEED0;
		  /* 820BEED0h */ case   13:  		/* lwz R10, <#[R24]> */
		/* 820BEED0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 820BEED0h case   13:*/		return 0x820BEED4;
		  /* 820BEED4h */ case   14:  		/* lis R9, 8256 */
		/* 820BEED4h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0x2040);
		/* 820BEED4h case   14:*/		return 0x820BEED8;
		  /* 820BEED8h */ case   15:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BEED8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEED8h case   15:*/		return 0x820BEEDC;
		  /* 820BEEDCh */ case   16:  		/* ori R27, R9, 1 */
		/* 820BEEDCh case   16:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R9,0x1);
		/* 820BEEDCh case   16:*/		return 0x820BEEE0;
		  /* 820BEEE0h */ case   17:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 820BEEE0h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 820BEEE0h case   17:*/		return 0x820BEEE4;
		  /* 820BEEE4h */ case   18:  		/* stw R10, <#[R1 + 160]> */
		/* 820BEEE4h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BEEE4h case   18:*/		return 0x820BEEE8;
		  /* 820BEEE8h */ case   19:  		/* lwz R9, <#[R11 + 20]> */
		/* 820BEEE8h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 820BEEE8h case   19:*/		return 0x820BEEEC;
		  /* 820BEEECh */ case   20:  		/* lwzx R9, <#[R9 + R8]> */
		/* 820BEEECh case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820BEEECh case   20:*/		return 0x820BEEF0;
		  /* 820BEEF0h */ case   21:  		/* lwz R9, <#[R9]> */
		/* 820BEEF0h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 820BEEF0h case   21:*/		return 0x820BEEF4;
		  /* 820BEEF4h */ case   22:  		/* rlwinm. R9, R9, 0, 30, 30 */
		/* 820BEEF4h case   22:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R9);
		/* 820BEEF4h case   22:*/		return 0x820BEEF8;
		  /* 820BEEF8h */ case   23:  		/* bc 4, CR0_EQ, 224 */
		/* 820BEEF8h case   23:*/		if ( !regs.CR[0].eq ) { return 0x820BEFD8;  }
		/* 820BEEF8h case   23:*/		return 0x820BEEFC;
		  /* 820BEEFCh */ case   24:  		/* lwz R9, <#[R11 + 112]> */
		/* 820BEEFCh case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000070) );
		/* 820BEEFCh case   24:*/		return 0x820BEF00;
		  /* 820BEF00h */ case   25:  		/* rlwinm. R9, R9, 0, 10, 10 */
		/* 820BEF00h case   25:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R9,regs.R9);
		/* 820BEF00h case   25:*/		return 0x820BEF04;
		  /* 820BEF04h */ case   26:  		/* bc 12, CR0_EQ, 16 */
		/* 820BEF04h case   26:*/		if ( regs.CR[0].eq ) { return 0x820BEF14;  }
		/* 820BEF04h case   26:*/		return 0x820BEF08;
		  /* 820BEF08h */ case   27:  		/* lwz R11, <#[R11 + 108]> */
		/* 820BEF08h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 820BEF08h case   27:*/		return 0x820BEF0C;
		  /* 820BEF0Ch */ case   28:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 820BEF0Ch case   28:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 820BEF0Ch case   28:*/		return 0x820BEF10;
		  /* 820BEF10h */ case   29:  		/* bc 4, CR0_EQ, 200 */
		/* 820BEF10h case   29:*/		if ( !regs.CR[0].eq ) { return 0x820BEFD8;  }
		/* 820BEF10h case   29:*/		return 0x820BEF14;
	}
	return 0x820BEF14;
} // Block from 820BEE9Ch-820BEF14h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820BEF14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEF14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEF14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEF14);
		  /* 820BEF14h */ case    0:  		/* lwz R29, <#[R1 + 272]> */
		/* 820BEF14h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000110) );
		/* 820BEF14h case    0:*/		return 0x820BEF18;
		  /* 820BEF18h */ case    1:  		/* lis R5, 4128 */
		/* 820BEF18h case    1:*/		cpu::op::lis<0>(regs,&regs.R5,0x1020);
		/* 820BEF18h case    1:*/		return 0x820BEF1C;
		  /* 820BEF1Ch */ case    2:  		/* li R9, 4 */
		/* 820BEF1Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BEF1Ch case    2:*/		return 0x820BEF20;
		  /* 820BEF20h */ case    3:  		/* li R8, 0 */
		/* 820BEF20h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BEF20h case    3:*/		return 0x820BEF24;
		  /* 820BEF24h */ case    4:  		/* addi R7, R1, 160 */
		/* 820BEF24h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BEF24h case    4:*/		return 0x820BEF28;
		  /* 820BEF28h */ case    5:  		/* mr R6, R29 */
		/* 820BEF28h case    5:*/		regs.R6 = regs.R29;
		/* 820BEF28h case    5:*/		return 0x820BEF2C;
		  /* 820BEF2Ch */ case    6:  		/* ori R5, R5, 1 */
		/* 820BEF2Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEF2Ch case    6:*/		return 0x820BEF30;
		  /* 820BEF30h */ case    7:  		/* mr R4, R21 */
		/* 820BEF30h case    7:*/		regs.R4 = regs.R21;
		/* 820BEF30h case    7:*/		return 0x820BEF34;
		  /* 820BEF34h */ case    8:  		/* mr R3, R30 */
		/* 820BEF34h case    8:*/		regs.R3 = regs.R30;
		/* 820BEF34h case    8:*/		return 0x820BEF38;
		  /* 820BEF38h */ case    9:  		/* bl -58416 */
		/* 820BEF38h case    9:*/		regs.LR = 0x820BEF3C; return 0x820B0B08;
		/* 820BEF38h case    9:*/		return 0x820BEF3C;
		  /* 820BEF3Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820BEF3Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEF3Ch case   10:*/		return 0x820BEF40;
		  /* 820BEF40h */ case   11:  		/* bc 12, CR0_LT, 2504 */
		/* 820BEF40h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEF40h case   11:*/		return 0x820BEF44;
		  /* 820BEF44h */ case   12:  		/* lwz R28, <#[R1 + 276]> */
		/* 820BEF44h case   12:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000114) );
		/* 820BEF44h case   12:*/		return 0x820BEF48;
		  /* 820BEF48h */ case   13:  		/* lis R5, 4160 */
		/* 820BEF48h case   13:*/		cpu::op::lis<0>(regs,&regs.R5,0x1040);
		/* 820BEF48h case   13:*/		return 0x820BEF4C;
		  /* 820BEF4Ch */ case   14:  		/* li R9, 4 */
		/* 820BEF4Ch case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BEF4Ch case   14:*/		return 0x820BEF50;
		  /* 820BEF50h */ case   15:  		/* li R8, 0 */
		/* 820BEF50h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BEF50h case   15:*/		return 0x820BEF54;
		  /* 820BEF54h */ case   16:  		/* mr R7, R29 */
		/* 820BEF54h case   16:*/		regs.R7 = regs.R29;
		/* 820BEF54h case   16:*/		return 0x820BEF58;
		  /* 820BEF58h */ case   17:  		/* mr R6, R28 */
		/* 820BEF58h case   17:*/		regs.R6 = regs.R28;
		/* 820BEF58h case   17:*/		return 0x820BEF5C;
		  /* 820BEF5Ch */ case   18:  		/* ori R5, R5, 1 */
		/* 820BEF5Ch case   18:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEF5Ch case   18:*/		return 0x820BEF60;
		  /* 820BEF60h */ case   19:  		/* mr R4, R21 */
		/* 820BEF60h case   19:*/		regs.R4 = regs.R21;
		/* 820BEF60h case   19:*/		return 0x820BEF64;
		  /* 820BEF64h */ case   20:  		/* mr R3, R30 */
		/* 820BEF64h case   20:*/		regs.R3 = regs.R30;
		/* 820BEF64h case   20:*/		return 0x820BEF68;
		  /* 820BEF68h */ case   21:  		/* bl -58464 */
		/* 820BEF68h case   21:*/		regs.LR = 0x820BEF6C; return 0x820B0B08;
		/* 820BEF68h case   21:*/		return 0x820BEF6C;
		  /* 820BEF6Ch */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820BEF6Ch case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEF6Ch case   22:*/		return 0x820BEF70;
		  /* 820BEF70h */ case   23:  		/* bc 12, CR0_LT, 2456 */
		/* 820BEF70h case   23:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEF70h case   23:*/		return 0x820BEF74;
		  /* 820BEF74h */ case   24:  		/* lwz R31, <#[R1 + 280]> */
		/* 820BEF74h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000118) );
		/* 820BEF74h case   24:*/		return 0x820BEF78;
		  /* 820BEF78h */ case   25:  		/* lis R5, 4112 */
		/* 820BEF78h case   25:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BEF78h case   25:*/		return 0x820BEF7C;
		  /* 820BEF7Ch */ case   26:  		/* li R9, 8 */
		/* 820BEF7Ch case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BEF7Ch case   26:*/		return 0x820BEF80;
		  /* 820BEF80h */ case   27:  		/* li R8, 0 */
		/* 820BEF80h case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BEF80h case   27:*/		return 0x820BEF84;
		  /* 820BEF84h */ case   28:  		/* mr R7, R28 */
		/* 820BEF84h case   28:*/		regs.R7 = regs.R28;
		/* 820BEF84h case   28:*/		return 0x820BEF88;
		  /* 820BEF88h */ case   29:  		/* mr R6, R31 */
		/* 820BEF88h case   29:*/		regs.R6 = regs.R31;
		/* 820BEF88h case   29:*/		return 0x820BEF8C;
		  /* 820BEF8Ch */ case   30:  		/* ori R5, R5, 1 */
		/* 820BEF8Ch case   30:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BEF8Ch case   30:*/		return 0x820BEF90;
		  /* 820BEF90h */ case   31:  		/* mr R4, R21 */
		/* 820BEF90h case   31:*/		regs.R4 = regs.R21;
		/* 820BEF90h case   31:*/		return 0x820BEF94;
		  /* 820BEF94h */ case   32:  		/* mr R3, R30 */
		/* 820BEF94h case   32:*/		regs.R3 = regs.R30;
		/* 820BEF94h case   32:*/		return 0x820BEF98;
		  /* 820BEF98h */ case   33:  		/* bl -58512 */
		/* 820BEF98h case   33:*/		regs.LR = 0x820BEF9C; return 0x820B0B08;
		/* 820BEF98h case   33:*/		return 0x820BEF9C;
		  /* 820BEF9Ch */ case   34:  		/* cmpwi CR0, R3, 0 */
		/* 820BEF9Ch case   34:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEF9Ch case   34:*/		return 0x820BEFA0;
		  /* 820BEFA0h */ case   35:  		/* bc 12, CR0_LT, 2408 */
		/* 820BEFA0h case   35:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEFA0h case   35:*/		return 0x820BEFA4;
		  /* 820BEFA4h */ case   36:  		/* lwz R28, <#[R1 + 284]> */
		/* 820BEFA4h case   36:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000011C) );
		/* 820BEFA4h case   36:*/		return 0x820BEFA8;
		  /* 820BEFA8h */ case   37:  		/* li R9, 6 */
		/* 820BEFA8h case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820BEFA8h case   37:*/		return 0x820BEFAC;
		  /* 820BEFACh */ case   38:  		/* mr R8, R29 */
		/* 820BEFACh case   38:*/		regs.R8 = regs.R29;
		/* 820BEFACh case   38:*/		return 0x820BEFB0;
		  /* 820BEFB0h */ case   39:  		/* mr R7, R31 */
		/* 820BEFB0h case   39:*/		regs.R7 = regs.R31;
		/* 820BEFB0h case   39:*/		return 0x820BEFB4;
		  /* 820BEFB4h */ case   40:  		/* mr R6, R28 */
		/* 820BEFB4h case   40:*/		regs.R6 = regs.R28;
		/* 820BEFB4h case   40:*/		return 0x820BEFB8;
		  /* 820BEFB8h */ case   41:  		/* mr R5, R27 */
		/* 820BEFB8h case   41:*/		regs.R5 = regs.R27;
		/* 820BEFB8h case   41:*/		return 0x820BEFBC;
		  /* 820BEFBCh */ case   42:  		/* mr R4, R21 */
		/* 820BEFBCh case   42:*/		regs.R4 = regs.R21;
		/* 820BEFBCh case   42:*/		return 0x820BEFC0;
		  /* 820BEFC0h */ case   43:  		/* mr R3, R30 */
		/* 820BEFC0h case   43:*/		regs.R3 = regs.R30;
		/* 820BEFC0h case   43:*/		return 0x820BEFC4;
		  /* 820BEFC4h */ case   44:  		/* bl -58556 */
		/* 820BEFC4h case   44:*/		regs.LR = 0x820BEFC8; return 0x820B0B08;
		/* 820BEFC4h case   44:*/		return 0x820BEFC8;
		  /* 820BEFC8h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 820BEFC8h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BEFC8h case   45:*/		return 0x820BEFCC;
		  /* 820BEFCCh */ case   46:  		/* bc 12, CR0_LT, 2364 */
		/* 820BEFCCh case   46:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BEFCCh case   46:*/		return 0x820BEFD0;
		  /* 820BEFD0h */ case   47:  		/* lwz R10, <#[R28]> */
		/* 820BEFD0h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 820BEFD0h case   47:*/		return 0x820BEFD4;
		  /* 820BEFD4h */ case   48:  		/* stw R10, <#[R1 + 160]> */
		/* 820BEFD4h case   48:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BEFD4h case   48:*/		return 0x820BEFD8;
	}
	return 0x820BEFD8;
} // Block from 820BEF14h-820BEFD8h (49 instructions)

//////////////////////////////////////////////////////
// Block at 820BEFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BEFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BEFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BEFD8);
		  /* 820BEFD8h */ case    0:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BEFD8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BEFD8h case    0:*/		return 0x820BEFDC;
		  /* 820BEFDCh */ case    1:  		/* lwz R25, <#[R1 + 308]> */
		/* 820BEFDCh case    1:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000134) );
		/* 820BEFDCh case    1:*/		return 0x820BEFE0;
		  /* 820BEFE0h */ case    2:  		/* lwz R11, <#[R3 + 112]> */
		/* 820BEFE0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000070) );
		/* 820BEFE0h case    2:*/		return 0x820BEFE4;
		  /* 820BEFE4h */ case    3:  		/* rlwinm. R11, R11, 0, 10, 10 */
		/* 820BEFE4h case    3:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R11,regs.R11);
		/* 820BEFE4h case    3:*/		return 0x820BEFE8;
		  /* 820BEFE8h */ case    4:  		/* bc 12, CR0_EQ, 460 */
		/* 820BEFE8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BF1B4;  }
		/* 820BEFE8h case    4:*/		return 0x820BEFEC;
		  /* 820BEFECh */ case    5:  		/* cmplwi CR6, R17, 0 */
		/* 820BEFECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 820BEFECh case    5:*/		return 0x820BEFF0;
		  /* 820BEFF0h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 820BEFF0h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BF058;  }
		/* 820BEFF0h case    6:*/		return 0x820BEFF4;
		  /* 820BEFF4h */ case    7:  		/* rldicl R11, R17, 0, 32 */
		/* 820BEFF4h case    7:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R17);
		/* 820BEFF4h case    7:*/		return 0x820BEFF8;
		  /* 820BEFF8h */ case    8:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BEFF8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BEFF8h case    8:*/		return 0x820BEFFC;
		  /* 820BEFFCh */ case    9:  		/* li R6, 0 */
		/* 820BEFFCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BEFFCh case    9:*/		return 0x820BF000;
		  /* 820BF000h */ case   10:  		/* std R11, <#[R1 + 192]> */
		/* 820BF000h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF000h case   10:*/		return 0x820BF004;
		  /* 820BF004h */ case   11:  		/* li R5, 0 */
		/* 820BF004h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BF004h case   11:*/		return 0x820BF008;
		  /* 820BF008h */ case   12:  		/* lfd FR0, <#[R1 + 192]> */
		/* 820BF008h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF008h case   12:*/		return 0x820BF00C;
		  /* 820BF00Ch */ case   13:  		/* fcfid FR0, FR0 */
		/* 820BF00Ch case   13:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820BF00Ch case   13:*/		return 0x820BF010;
		  /* 820BF010h */ case   14:  		/* fneg FR1, FR0 */
		/* 820BF010h case   14:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR0);
		/* 820BF010h case   14:*/		return 0x820BF014;
		  /* 820BF014h */ case   15:  		/* bl 254484 */
		/* 820BF014h case   15:*/		regs.LR = 0x820BF018; return 0x820FD228;
		/* 820BF014h case   15:*/		return 0x820BF018;
		  /* 820BF018h */ case   16:  		/* stw R3, <#[R1 + 192]> */
		/* 820BF018h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF018h case   16:*/		return 0x820BF01C;
		  /* 820BF01Ch */ case   17:  		/* cmpwi CR6, R3, -1 */
		/* 820BF01Ch case   17:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF01Ch case   17:*/		return 0x820BF020;
		  /* 820BF020h */ case   18:  		/* bc 12, CR6_EQ, 2160 */
		/* 820BF020h case   18:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF020h case   18:*/		return 0x820BF024;
		  /* 820BF024h */ case   19:  		/* stw R18, <#[R1 + 172]> */
		/* 820BF024h case   19:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BF024h case   19:*/		return 0x820BF028;
		  /* 820BF028h */ case   20:  		/* li R9, 4 */
		/* 820BF028h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BF028h case   20:*/		return 0x820BF02C;
		  /* 820BF02Ch */ case   21:  		/* addi R8, R1, 192 */
		/* 820BF02Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820BF02Ch case   21:*/		return 0x820BF030;
		  /* 820BF030h */ case   22:  		/* addi R7, R1, 160 */
		/* 820BF030h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BF030h case   22:*/		return 0x820BF034;
		  /* 820BF034h */ case   23:  		/* addi R6, R1, 172 */
		/* 820BF034h case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xAC);
		/* 820BF034h case   23:*/		return 0x820BF038;
		  /* 820BF038h */ case   24:  		/* mr R5, R27 */
		/* 820BF038h case   24:*/		regs.R5 = regs.R27;
		/* 820BF038h case   24:*/		return 0x820BF03C;
		  /* 820BF03Ch */ case   25:  		/* mr R4, R21 */
		/* 820BF03Ch case   25:*/		regs.R4 = regs.R21;
		/* 820BF03Ch case   25:*/		return 0x820BF040;
		  /* 820BF040h */ case   26:  		/* mr R3, R30 */
		/* 820BF040h case   26:*/		regs.R3 = regs.R30;
		/* 820BF040h case   26:*/		return 0x820BF044;
		  /* 820BF044h */ case   27:  		/* bl -58684 */
		/* 820BF044h case   27:*/		regs.LR = 0x820BF048; return 0x820B0B08;
		/* 820BF044h case   27:*/		return 0x820BF048;
		  /* 820BF048h */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 820BF048h case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF048h case   28:*/		return 0x820BF04C;
		  /* 820BF04Ch */ case   29:  		/* bc 12, CR0_LT, 2236 */
		/* 820BF04Ch case   29:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF04Ch case   29:*/		return 0x820BF050;
		  /* 820BF050h */ case   30:  		/* lwz R11, <#[R1 + 172]> */
		/* 820BF050h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 820BF050h case   30:*/		return 0x820BF054;
		  /* 820BF054h */ case   31:  		/* stw R11, <#[R1 + 160]> */
		/* 820BF054h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF054h case   31:*/		return 0x820BF058;
	}
	return 0x820BF058;
} // Block from 820BEFD8h-820BF058h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820BF058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF058);
		  /* 820BF058h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BF058h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF058h case    0:*/		return 0x820BF05C;
		  /* 820BF05Ch */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 820BF05Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 820BF05Ch case    1:*/		return 0x820BF060;
		  /* 820BF060h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820BF060h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BF060h case    2:*/		return 0x820BF064;
		  /* 820BF064h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 820BF064h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BF0B8;  }
		/* 820BF064h case    3:*/		return 0x820BF068;
		  /* 820BF068h */ case    4:  		/* stw R18, <#[R1 + 176]> */
		/* 820BF068h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BF068h case    4:*/		return 0x820BF06C;
		  /* 820BF06Ch */ case    5:  		/* lis R5, 4096 */
		/* 820BF06Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820BF06Ch case    5:*/		return 0x820BF070;
		  /* 820BF070h */ case    6:  		/* li R9, 4 */
		/* 820BF070h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BF070h case    6:*/		return 0x820BF074;
		  /* 820BF074h */ case    7:  		/* li R8, 0 */
		/* 820BF074h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BF074h case    7:*/		return 0x820BF078;
		  /* 820BF078h */ case    8:  		/* addi R7, R1, 160 */
		/* 820BF078h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BF078h case    8:*/		return 0x820BF07C;
		  /* 820BF07Ch */ case    9:  		/* addi R6, R1, 176 */
		/* 820BF07Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB0);
		/* 820BF07Ch case    9:*/		return 0x820BF080;
		  /* 820BF080h */ case   10:  		/* ori R5, R5, 1 */
		/* 820BF080h case   10:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BF080h case   10:*/		return 0x820BF084;
		  /* 820BF084h */ case   11:  		/* mr R4, R21 */
		/* 820BF084h case   11:*/		regs.R4 = regs.R21;
		/* 820BF084h case   11:*/		return 0x820BF088;
		  /* 820BF088h */ case   12:  		/* mr R3, R30 */
		/* 820BF088h case   12:*/		regs.R3 = regs.R30;
		/* 820BF088h case   12:*/		return 0x820BF08C;
		  /* 820BF08Ch */ case   13:  		/* bl -58756 */
		/* 820BF08Ch case   13:*/		regs.LR = 0x820BF090; return 0x820B0B08;
		/* 820BF08Ch case   13:*/		return 0x820BF090;
		  /* 820BF090h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820BF090h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF090h case   14:*/		return 0x820BF094;
		  /* 820BF094h */ case   15:  		/* bc 12, CR0_LT, 2164 */
		/* 820BF094h case   15:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF094h case   15:*/		return 0x820BF098;
		  /* 820BF098h */ case   16:  		/* lwz R11, <#[R1 + 176]> */
		/* 820BF098h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 820BF098h case   16:*/		return 0x820BF09C;
		  /* 820BF09Ch */ case   17:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BF09Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF09Ch case   17:*/		return 0x820BF0A0;
		  /* 820BF0A0h */ case   18:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820BF0A0h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820BF0A0h case   18:*/		return 0x820BF0A4;
		  /* 820BF0A4h */ case   19:  		/* stw R11, <#[R1 + 160]> */
		/* 820BF0A4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF0A4h case   19:*/		return 0x820BF0A8;
		  /* 820BF0A8h */ case   20:  		/* lwz R11, <#[R10 + 20]> */
		/* 820BF0A8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 820BF0A8h case   20:*/		return 0x820BF0AC;
		  /* 820BF0ACh */ case   21:  		/* lwz R10, <#[R10 + 140]> */
		/* 820BF0ACh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000008C) );
		/* 820BF0ACh case   21:*/		return 0x820BF0B0;
		  /* 820BF0B0h */ case   22:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820BF0B0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820BF0B0h case   22:*/		return 0x820BF0B4;
		  /* 820BF0B4h */ case   23:  		/* stw R10, <#[R11 + 4]> */
		/* 820BF0B4h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820BF0B4h case   23:*/		return 0x820BF0B8;
	}
	return 0x820BF0B8;
} // Block from 820BF058h-820BF0B8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820BF0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF0B8);
		  /* 820BF0B8h */ case    0:  		/* lis R11, -32256 */
		/* 820BF0B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820BF0B8h case    0:*/		return 0x820BF0BC;
		  /* 820BF0BCh */ case    1:  		/* lwz R10, <#[R30 + 72]> */
		/* 820BF0BCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF0BCh case    1:*/		return 0x820BF0C0;
		  /* 820BF0C0h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 820BF0C0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820BF0C0h case    2:*/		return 0x820BF0C4;
		  /* 820BF0C4h */ case    3:  		/* lfd FR31, <#[R11 + 1848]> */
		/* 820BF0C4h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000738) );
		/* 820BF0C4h case    3:*/		return 0x820BF0C8;
		  /* 820BF0C8h */ case    4:  		/* bc 4, CR6_EQ, 124 */
		/* 820BF0C8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BF144;  }
		/* 820BF0C8h case    4:*/		return 0x820BF0CC;
		  /* 820BF0CCh */ case    5:  		/* lis R11, -32255 */
		/* 820BF0CCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BF0CCh case    5:*/		return 0x820BF0D0;
		  /* 820BF0D0h */ case    6:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF0D0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF0D0h case    6:*/		return 0x820BF0D4;
		  /* 820BF0D4h */ case    7:  		/* li R7, 4 */
		/* 820BF0D4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 820BF0D4h case    7:*/		return 0x820BF0D8;
		  /* 820BF0D8h */ case    8:  		/* addi R4, R11, -8824 */
		/* 820BF0D8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDD88);
		/* 820BF0D8h case    8:*/		return 0x820BF0DC;
		  /* 820BF0DCh */ case    9:  		/* li R6, 4 */
		/* 820BF0DCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 820BF0DCh case    9:*/		return 0x820BF0E0;
		  /* 820BF0E0h */ case   10:  		/* li R5, 1873 */
		/* 820BF0E0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x751);
		/* 820BF0E0h case   10:*/		return 0x820BF0E4;
		  /* 820BF0E4h */ case   11:  		/* bl 254116 */
		/* 820BF0E4h case   11:*/		regs.LR = 0x820BF0E8; return 0x820FD188;
		/* 820BF0E4h case   11:*/		return 0x820BF0E8;
		  /* 820BF0E8h */ case   12:  		/* stw R3, <#[R30 + 72]> */
		/* 820BF0E8h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF0E8h case   12:*/		return 0x820BF0EC;
		  /* 820BF0ECh */ case   13:  		/* cmpwi CR6, R3, -1 */
		/* 820BF0ECh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF0ECh case   13:*/		return 0x820BF0F0;
		  /* 820BF0F0h */ case   14:  		/* bc 12, CR6_EQ, 1952 */
		/* 820BF0F0h case   14:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF0F0h case   14:*/		return 0x820BF0F4;
		  /* 820BF0F4h */ case   15:  		/* li R29, 0 */
		/* 820BF0F4h case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820BF0F4h case   15:*/		return 0x820BF0F8;
		  /* 820BF0F8h */ case   16:  		/* li R31, 0 */
		/* 820BF0F8h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820BF0F8h case   16:*/		return 0x820BF0FC;
		  /* 820BF0FCh */ case   17:  		/* cmplw CR6, R29, R31 */
		/* 820BF0FCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 820BF0FCh case   17:*/		return 0x820BF100;
		  /* 820BF100h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 820BF100h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820BF10C;  }
		/* 820BF100h case   18:*/		return 0x820BF104;
		  /* 820BF104h */ case   19:  		/* fmr FR1, FR31 */
		/* 820BF104h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820BF104h case   19:*/		return 0x820BF108;
		  /* 820BF108h */ case   20:  		/* b 8 */
		/* 820BF108h case   20:*/		return 0x820BF110;
		/* 820BF108h case   20:*/		return 0x820BF10C;
	}
	return 0x820BF10C;
} // Block from 820BF0B8h-820BF10Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 820BF10Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF10C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF10C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF10C);
		  /* 820BF10Ch */ case    0:  		/* fmr FR1, FR29 */
		/* 820BF10Ch case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 820BF10Ch case    0:*/		return 0x820BF110;
	}
	return 0x820BF110;
} // Block from 820BF10Ch-820BF110h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BF110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF110);
		  /* 820BF110h */ case    0:  		/* mr R6, R31 */
		/* 820BF110h case    0:*/		regs.R6 = regs.R31;
		/* 820BF110h case    0:*/		return 0x820BF114;
		  /* 820BF114h */ case    1:  		/* lwz R4, <#[R30 + 72]> */
		/* 820BF114h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF114h case    1:*/		return 0x820BF118;
		  /* 820BF118h */ case    2:  		/* mr R5, R29 */
		/* 820BF118h case    2:*/		regs.R5 = regs.R29;
		/* 820BF118h case    2:*/		return 0x820BF11C;
		  /* 820BF11Ch */ case    3:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF11Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF11Ch case    3:*/		return 0x820BF120;
		  /* 820BF120h */ case    4:  		/* bl 254216 */
		/* 820BF120h case    4:*/		regs.LR = 0x820BF124; return 0x820FD228;
		/* 820BF120h case    4:*/		return 0x820BF124;
		  /* 820BF124h */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 820BF124h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF124h case    5:*/		return 0x820BF128;
		  /* 820BF128h */ case    6:  		/* bc 12, CR6_EQ, 1896 */
		/* 820BF128h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF128h case    6:*/		return 0x820BF12C;
		  /* 820BF12Ch */ case    7:  		/* addi R31, R31, 1 */
		/* 820BF12Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820BF12Ch case    7:*/		return 0x820BF130;
		  /* 820BF130h */ case    8:  		/* cmplwi CR6, R31, 4 */
		/* 820BF130h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 820BF130h case    8:*/		return 0x820BF134;
		  /* 820BF134h */ case    9:  		/* bc 12, CR6_LT, -56 */
		/* 820BF134h case    9:*/		if ( regs.CR[6].lt ) { return 0x820BF0FC;  }
		/* 820BF134h case    9:*/		return 0x820BF138;
		  /* 820BF138h */ case   10:  		/* addi R29, R29, 1 */
		/* 820BF138h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820BF138h case   10:*/		return 0x820BF13C;
		  /* 820BF13Ch */ case   11:  		/* cmplwi CR6, R29, 4 */
		/* 820BF13Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 820BF13Ch case   11:*/		return 0x820BF140;
		  /* 820BF140h */ case   12:  		/* bc 12, CR6_LT, -72 */
		/* 820BF140h case   12:*/		if ( regs.CR[6].lt ) { return 0x820BF0F8;  }
		/* 820BF140h case   12:*/		return 0x820BF144;
	}
	return 0x820BF144;
} // Block from 820BF110h-820BF144h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820BF144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF144);
		  /* 820BF144h */ case    0:  		/* li R31, 0 */
		/* 820BF144h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820BF144h case    0:*/		return 0x820BF148;
		  /* 820BF148h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 820BF148h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820BF148h case    1:*/		return 0x820BF14C;
		  /* 820BF14Ch */ case    2:  		/* bc 12, CR6_EQ, 348 */
		/* 820BF14Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BF2A8;  }
		/* 820BF14Ch case    2:*/		return 0x820BF150;
		  /* 820BF150h */ case    3:  		/* addi R29, R25, -4 */
		/* 820BF150h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R25,0xFFFFFFFC);
		/* 820BF150h case    3:*/		return 0x820BF154;
		  /* 820BF154h */ case    4:  		/* mr R6, R31 */
		/* 820BF154h case    4:*/		regs.R6 = regs.R31;
		/* 820BF154h case    4:*/		return 0x820BF158;
		  /* 820BF158h */ case    5:  		/* lwz R4, <#[R30 + 72]> */
		/* 820BF158h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF158h case    5:*/		return 0x820BF15C;
		  /* 820BF15Ch */ case    6:  		/* li R5, 0 */
		/* 820BF15Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BF15Ch case    6:*/		return 0x820BF160;
		  /* 820BF160h */ case    7:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF160h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF160h case    7:*/		return 0x820BF164;
		  /* 820BF164h */ case    8:  		/* fmr FR1, FR29 */
		/* 820BF164h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 820BF164h case    8:*/		return 0x820BF168;
		  /* 820BF168h */ case    9:  		/* bl 254144 */
		/* 820BF168h case    9:*/		regs.LR = 0x820BF16C; return 0x820FD228;
		/* 820BF168h case    9:*/		return 0x820BF16C;
		  /* 820BF16Ch */ case   10:  		/* stw R3, <#[R29 + 4]> */
		/* 820BF16Ch case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 820BF16Ch case   10:*/		return 0x820BF170;
		  /* 820BF170h */ case   11:  		/* cmpwi CR6, R3, -1 */
		/* 820BF170h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF170h case   11:*/		return 0x820BF174;
		  /* 820BF174h */ case   12:  		/* bc 12, CR6_EQ, 1820 */
		/* 820BF174h case   12:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF174h case   12:*/		return 0x820BF178;
		  /* 820BF178h */ case   13:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BF178h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF178h case   13:*/		return 0x820BF17C;
		  /* 820BF17Ch */ case   14:  		/* addi R31, R31, 1 */
		/* 820BF17Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820BF17Ch case   14:*/		return 0x820BF180;
		  /* 820BF180h */ case   15:  		/* lwzu R11, <#[R29 + 4]> */
		/* 820BF180h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 820BF180h case   15:*/		return 0x820BF184;
		  /* 820BF184h */ case   16:  		/* li R9, 279 */
		/* 820BF184h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x117);
		/* 820BF184h case   16:*/		return 0x820BF188;
		  /* 820BF188h */ case   17:  		/* lwz R8, <#[R1 + 160]> */
		/* 820BF188h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF188h case   17:*/		return 0x820BF18C;
		  /* 820BF18Ch */ case   18:  		/* cmplw CR6, R31, R22 */
		/* 820BF18Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R22);
		/* 820BF18Ch case   18:*/		return 0x820BF190;
		  /* 820BF190h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BF190h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BF190h case   19:*/		return 0x820BF194;
		  /* 820BF194h */ case   20:  		/* lwz R10, <#[R10 + 20]> */
		/* 820BF194h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820BF194h case   20:*/		return 0x820BF198;
		  /* 820BF198h */ case   21:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820BF198h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820BF198h case   21:*/		return 0x820BF19C;
		  /* 820BF19Ch */ case   22:  		/* stfd FR29, <#[R11 + 32]> */
		/* 820BF19Ch case   22:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R11 + 0x00000020) );
		/* 820BF19Ch case   22:*/		return 0x820BF1A0;
		  /* 820BF1A0h */ case   23:  		/* stw R8, <#[R11 + 8]> */
		/* 820BF1A0h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 820BF1A0h case   23:*/		return 0x820BF1A4;
		  /* 820BF1A4h */ case   24:  		/* stfd FR31, <#[R11 + 40]> */
		/* 820BF1A4h case   24:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R11 + 0x00000028) );
		/* 820BF1A4h case   24:*/		return 0x820BF1A8;
		  /* 820BF1A8h */ case   25:  		/* stw R9, <#[R11]> */
		/* 820BF1A8h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BF1A8h case   25:*/		return 0x820BF1AC;
		  /* 820BF1ACh */ case   26:  		/* bc 12, CR6_LT, -88 */
		/* 820BF1ACh case   26:*/		if ( regs.CR[6].lt ) { return 0x820BF154;  }
		/* 820BF1ACh case   26:*/		return 0x820BF1B0;
		  /* 820BF1B0h */ case   27:  		/* b 248 */
		/* 820BF1B0h case   27:*/		return 0x820BF2A8;
		/* 820BF1B0h case   27:*/		return 0x820BF1B4;
	}
	return 0x820BF1B4;
} // Block from 820BF144h-820BF1B4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BF1B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF1B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF1B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF1B4);
		  /* 820BF1B4h */ case    0:  		/* lwz R27, <#[R1 + 292]> */
		/* 820BF1B4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000124) );
		/* 820BF1B4h case    0:*/		return 0x820BF1B8;
		  /* 820BF1B8h */ case    1:  		/* li R29, 0 */
		/* 820BF1B8h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820BF1B8h case    1:*/		return 0x820BF1BC;
		  /* 820BF1BCh */ case    2:  		/* lwz R26, <#[R1 + 288]> */
		/* 820BF1BCh case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000120) );
		/* 820BF1BCh case    2:*/		return 0x820BF1C0;
		  /* 820BF1C0h */ case    3:  		/* cmplwi CR6, R22, 0 */
		/* 820BF1C0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820BF1C0h case    3:*/		return 0x820BF1C4;
		  /* 820BF1C4h */ case    4:  		/* bc 12, CR6_EQ, 96 */
		/* 820BF1C4h case    4:*/		if ( regs.CR[6].eq ) { return 0x820BF224;  }
		/* 820BF1C4h case    4:*/		return 0x820BF1C8;
		  /* 820BF1C8h */ case    5:  		/* mr R31, R27 */
		/* 820BF1C8h case    5:*/		regs.R31 = regs.R27;
		/* 820BF1C8h case    5:*/		return 0x820BF1CC;
		  /* 820BF1CCh */ case    6:  		/* subf R28, R27, R26 */
		/* 820BF1CCh case    6:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R27,regs.R26);
		/* 820BF1CCh case    6:*/		return 0x820BF1D0;
		  /* 820BF1D0h */ case    7:  		/* b 8 */
		/* 820BF1D0h case    7:*/		return 0x820BF1D8;
		/* 820BF1D0h case    7:*/		return 0x820BF1D4;
		  /* 820BF1D4h */ case    8:  		/* lwz R10, <#[R1 + 160]> */
		/* 820BF1D4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF1D4h case    8:*/		return 0x820BF1D8;
	}
	return 0x820BF1D8;
} // Block from 820BF1B4h-820BF1D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BF1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF1D8);
		  /* 820BF1D8h */ case    0:  		/* stwx R10, <#[R28 + R31]> */
		/* 820BF1D8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + regs.R31 + 0x00000000) );
		/* 820BF1D8h case    0:*/		return 0x820BF1DC;
		  /* 820BF1DCh */ case    1:  		/* add R11, R29, R17 */
		/* 820BF1DCh case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R17);
		/* 820BF1DCh case    1:*/		return 0x820BF1E0;
		  /* 820BF1E0h */ case    2:  		/* li R6, 0 */
		/* 820BF1E0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BF1E0h case    2:*/		return 0x820BF1E4;
		  /* 820BF1E4h */ case    3:  		/* rldicl R11, R11, 0, 32 */
		/* 820BF1E4h case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 820BF1E4h case    3:*/		return 0x820BF1E8;
		  /* 820BF1E8h */ case    4:  		/* li R5, 0 */
		/* 820BF1E8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BF1E8h case    4:*/		return 0x820BF1EC;
		  /* 820BF1ECh */ case    5:  		/* std R11, <#[R1 + 192]> */
		/* 820BF1ECh case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF1ECh case    5:*/		return 0x820BF1F0;
		  /* 820BF1F0h */ case    6:  		/* lfd FR0, <#[R1 + 192]> */
		/* 820BF1F0h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF1F0h case    6:*/		return 0x820BF1F4;
		  /* 820BF1F4h */ case    7:  		/* fcfid FR0, FR0 */
		/* 820BF1F4h case    7:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820BF1F4h case    7:*/		return 0x820BF1F8;
		  /* 820BF1F8h */ case    8:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF1F8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF1F8h case    8:*/		return 0x820BF1FC;
		  /* 820BF1FCh */ case    9:  		/* fneg FR1, FR0 */
		/* 820BF1FCh case    9:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR0);
		/* 820BF1FCh case    9:*/		return 0x820BF200;
		  /* 820BF200h */ case   10:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BF200h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BF200h case   10:*/		return 0x820BF204;
		  /* 820BF204h */ case   11:  		/* bl 253988 */
		/* 820BF204h case   11:*/		regs.LR = 0x820BF208; return 0x820FD228;
		/* 820BF204h case   11:*/		return 0x820BF208;
		  /* 820BF208h */ case   12:  		/* stw R3, <#[R31]> */
		/* 820BF208h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820BF208h case   12:*/		return 0x820BF20C;
		  /* 820BF20Ch */ case   13:  		/* cmpwi CR6, R3, -1 */
		/* 820BF20Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF20Ch case   13:*/		return 0x820BF210;
		  /* 820BF210h */ case   14:  		/* bc 12, CR6_EQ, 1664 */
		/* 820BF210h case   14:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF210h case   14:*/		return 0x820BF214;
		  /* 820BF214h */ case   15:  		/* addi R29, R29, 1 */
		/* 820BF214h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820BF214h case   15:*/		return 0x820BF218;
		  /* 820BF218h */ case   16:  		/* addi R31, R31, 4 */
		/* 820BF218h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820BF218h case   16:*/		return 0x820BF21C;
		  /* 820BF21Ch */ case   17:  		/* cmplw CR6, R29, R22 */
		/* 820BF21Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R22);
		/* 820BF21Ch case   17:*/		return 0x820BF220;
		  /* 820BF220h */ case   18:  		/* bc 12, CR6_LT, -76 */
		/* 820BF220h case   18:*/		if ( regs.CR[6].lt ) { return 0x820BF1D4;  }
		/* 820BF220h case   18:*/		return 0x820BF224;
	}
	return 0x820BF224;
} // Block from 820BF1D8h-820BF224h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820BF224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF224);
		  /* 820BF224h */ case    0:  		/* lwz R29, <#[R1 + 296]> */
		/* 820BF224h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000128) );
		/* 820BF224h case    0:*/		return 0x820BF228;
		  /* 820BF228h */ case    1:  		/* rlwinm R31, R22, 0, 12, 31 */
		/* 820BF228h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R22);
		/* 820BF228h case    1:*/		return 0x820BF22C;
		  /* 820BF22Ch */ case    2:  		/* li R9, 2 */
		/* 820BF22Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BF22Ch case    2:*/		return 0x820BF230;
		  /* 820BF230h */ case    3:  		/* mr R8, R27 */
		/* 820BF230h case    3:*/		regs.R8 = regs.R27;
		/* 820BF230h case    3:*/		return 0x820BF234;
		  /* 820BF234h */ case    4:  		/* mr R7, R26 */
		/* 820BF234h case    4:*/		regs.R7 = regs.R26;
		/* 820BF234h case    4:*/		return 0x820BF238;
		  /* 820BF238h */ case    5:  		/* mr R6, R29 */
		/* 820BF238h case    5:*/		regs.R6 = regs.R29;
		/* 820BF238h case    5:*/		return 0x820BF23C;
		  /* 820BF23Ch */ case    6:  		/* oris R5, R31, 8256 */
		/* 820BF23Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R31,0x2040);
		/* 820BF23Ch case    6:*/		return 0x820BF240;
		  /* 820BF240h */ case    7:  		/* mr R4, R21 */
		/* 820BF240h case    7:*/		regs.R4 = regs.R21;
		/* 820BF240h case    7:*/		return 0x820BF244;
		  /* 820BF244h */ case    8:  		/* mr R3, R30 */
		/* 820BF244h case    8:*/		regs.R3 = regs.R30;
		/* 820BF244h case    8:*/		return 0x820BF248;
		  /* 820BF248h */ case    9:  		/* bl -59200 */
		/* 820BF248h case    9:*/		regs.LR = 0x820BF24C; return 0x820B0B08;
		/* 820BF248h case    9:*/		return 0x820BF24C;
		  /* 820BF24Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820BF24Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF24Ch case   10:*/		return 0x820BF250;
		  /* 820BF250h */ case   11:  		/* bc 12, CR0_LT, 1720 */
		/* 820BF250h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF250h case   11:*/		return 0x820BF254;
		  /* 820BF254h */ case   12:  		/* lwz R28, <#[R1 + 304]> */
		/* 820BF254h case   12:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000130) );
		/* 820BF254h case   12:*/		return 0x820BF258;
		  /* 820BF258h */ case   13:  		/* mr R8, R22 */
		/* 820BF258h case   13:*/		regs.R8 = regs.R22;
		/* 820BF258h case   13:*/		return 0x820BF25C;
		  /* 820BF25Ch */ case   14:  		/* lwz R27, <#[R1 + 300]> */
		/* 820BF25Ch case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000012C) );
		/* 820BF25Ch case   14:*/		return 0x820BF260;
		  /* 820BF260h */ case   15:  		/* mr R7, R29 */
		/* 820BF260h case   15:*/		regs.R7 = regs.R29;
		/* 820BF260h case   15:*/		return 0x820BF264;
		  /* 820BF264h */ case   16:  		/* mr R6, R28 */
		/* 820BF264h case   16:*/		regs.R6 = regs.R28;
		/* 820BF264h case   16:*/		return 0x820BF268;
		  /* 820BF268h */ case   17:  		/* mr R5, R27 */
		/* 820BF268h case   17:*/		regs.R5 = regs.R27;
		/* 820BF268h case   17:*/		return 0x820BF26C;
		  /* 820BF26Ch */ case   18:  		/* mr R4, R21 */
		/* 820BF26Ch case   18:*/		regs.R4 = regs.R21;
		/* 820BF26Ch case   18:*/		return 0x820BF270;
		  /* 820BF270h */ case   19:  		/* mr R3, R30 */
		/* 820BF270h case   19:*/		regs.R3 = regs.R30;
		/* 820BF270h case   19:*/		return 0x820BF274;
		  /* 820BF274h */ case   20:  		/* bl -45252 */
		/* 820BF274h case   20:*/		regs.LR = 0x820BF278; return 0x820B41B0;
		/* 820BF274h case   20:*/		return 0x820BF278;
		  /* 820BF278h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820BF278h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF278h case   21:*/		return 0x820BF27C;
		  /* 820BF27Ch */ case   22:  		/* bc 12, CR0_LT, 1676 */
		/* 820BF27Ch case   22:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF27Ch case   22:*/		return 0x820BF280;
		  /* 820BF280h */ case   23:  		/* li R9, 23 */
		/* 820BF280h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BF280h case   23:*/		return 0x820BF284;
		  /* 820BF284h */ case   24:  		/* mr R8, R27 */
		/* 820BF284h case   24:*/		regs.R8 = regs.R27;
		/* 820BF284h case   24:*/		return 0x820BF288;
		  /* 820BF288h */ case   25:  		/* mr R7, R28 */
		/* 820BF288h case   25:*/		regs.R7 = regs.R28;
		/* 820BF288h case   25:*/		return 0x820BF28C;
		  /* 820BF28Ch */ case   26:  		/* mr R6, R25 */
		/* 820BF28Ch case   26:*/		regs.R6 = regs.R25;
		/* 820BF28Ch case   26:*/		return 0x820BF290;
		  /* 820BF290h */ case   27:  		/* oris R5, R31, 8240 */
		/* 820BF290h case   27:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R31,0x2030);
		/* 820BF290h case   27:*/		return 0x820BF294;
		  /* 820BF294h */ case   28:  		/* mr R4, R21 */
		/* 820BF294h case   28:*/		regs.R4 = regs.R21;
		/* 820BF294h case   28:*/		return 0x820BF298;
		  /* 820BF298h */ case   29:  		/* mr R3, R30 */
		/* 820BF298h case   29:*/		regs.R3 = regs.R30;
		/* 820BF298h case   29:*/		return 0x820BF29C;
		  /* 820BF29Ch */ case   30:  		/* bl -59284 */
		/* 820BF29Ch case   30:*/		regs.LR = 0x820BF2A0; return 0x820B0B08;
		/* 820BF29Ch case   30:*/		return 0x820BF2A0;
		  /* 820BF2A0h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820BF2A0h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF2A0h case   31:*/		return 0x820BF2A4;
		  /* 820BF2A4h */ case   32:  		/* bc 12, CR0_LT, 1636 */
		/* 820BF2A4h case   32:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF2A4h case   32:*/		return 0x820BF2A8;
	}
	return 0x820BF2A8;
} // Block from 820BF224h-820BF2A8h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820BF2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF2A8);
		  /* 820BF2A8h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 820BF2A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BF2A8h case    0:*/		return 0x820BF2AC;
		  /* 820BF2ACh */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820BF2ACh case    1:*/		if ( regs.CR[6].eq ) { return 0x820BF2CC;  }
		/* 820BF2ACh case    1:*/		return 0x820BF2B0;
		  /* 820BF2B0h */ case    2:  		/* addi R11, R16, -4 */
		/* 820BF2B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0xFFFFFFFC);
		/* 820BF2B0h case    2:*/		return 0x820BF2B4;
		  /* 820BF2B4h */ case    3:  		/* mr R10, R18 */
		/* 820BF2B4h case    3:*/		regs.R10 = regs.R18;
		/* 820BF2B4h case    3:*/		return 0x820BF2B8;
		  /* 820BF2B8h */ case    4:  		/* cmplwi CR0, R20, 0 */
		/* 820BF2B8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R20,0x00000000);
		/* 820BF2B8h case    4:*/		return 0x820BF2BC;
		  /* 820BF2BCh */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 820BF2BCh case    5:*/		if ( regs.CR[0].eq ) { return 0x820BF2CC;  }
		/* 820BF2BCh case    5:*/		return 0x820BF2C0;
		  /* 820BF2C0h */ case    6:  		/* mtspr CTR, R20 */
		/* 820BF2C0h case    6:*/		regs.CTR = regs.R20;
		/* 820BF2C0h case    6:*/		return 0x820BF2C4;
		  /* 820BF2C4h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BF2C4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BF2C4h case    7:*/		return 0x820BF2C8;
		  /* 820BF2C8h */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 820BF2C8h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF2C4;  }
		/* 820BF2C8h case    8:*/		return 0x820BF2CC;
	}
	return 0x820BF2CC;
} // Block from 820BF2A8h-820BF2CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BF2CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF2CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF2CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF2CC);
		  /* 820BF2CCh */ case    0:  		/* li R29, 0 */
		/* 820BF2CCh case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820BF2CCh case    0:*/		return 0x820BF2D0;
		  /* 820BF2D0h */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 820BF2D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BF2D0h case    1:*/		return 0x820BF2D4;
		  /* 820BF2D4h */ case    2:  		/* bc 12, CR6_EQ, 1584 */
		/* 820BF2D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BF904;  }
		/* 820BF2D4h case    2:*/		return 0x820BF2D8;
		  /* 820BF2D8h */ case    3:  		/* rlwinm R11, R22, 0, 12, 31 */
		/* 820BF2D8h case    3:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R22);
		/* 820BF2D8h case    3:*/		return 0x820BF2DC;
		  /* 820BF2DCh */ case    4:  		/* lwz R31, <#[R1 + 312]> */
		/* 820BF2DCh case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000138) );
		/* 820BF2DCh case    4:*/		return 0x820BF2E0;
		  /* 820BF2E0h */ case    5:  		/* mr R28, R16 */
		/* 820BF2E0h case    5:*/		regs.R28 = regs.R16;
		/* 820BF2E0h case    5:*/		return 0x820BF2E4;
		  /* 820BF2E4h */ case    6:  		/* oris R27, R11, 20480 */
		/* 820BF2E4h case    6:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R11,0x5000);
		/* 820BF2E4h case    6:*/		return 0x820BF2E8;
		  /* 820BF2E8h */ case    7:  		/* cmplwi CR6, R22, 0 */
		/* 820BF2E8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820BF2E8h case    7:*/		return 0x820BF2EC;
		  /* 820BF2ECh */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 820BF2ECh case    8:*/		if ( regs.CR[6].eq ) { return 0x820BF31C;  }
		/* 820BF2ECh case    8:*/		return 0x820BF2F0;
		  /* 820BF2F0h */ case    9:  		/* mullw R11, R17, R20 */
		/* 820BF2F0h case    9:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R17,regs.R20);
		/* 820BF2F0h case    9:*/		return 0x820BF2F4;
		  /* 820BF2F4h */ case   10:  		/* mtspr CTR, R22 */
		/* 820BF2F4h case   10:*/		regs.CTR = regs.R22;
		/* 820BF2F4h case   10:*/		return 0x820BF2F8;
		  /* 820BF2F8h */ case   11:  		/* add R10, R11, R29 */
		/* 820BF2F8h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R29);
		/* 820BF2F8h case   11:*/		return 0x820BF2FC;
		  /* 820BF2FCh */ case   12:  		/* rlwinm R11, R20, 2, 0, 29 */
		/* 820BF2FCh case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R20);
		/* 820BF2FCh case   12:*/		return 0x820BF300;
		  /* 820BF300h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820BF300h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820BF300h case   13:*/		return 0x820BF304;
		  /* 820BF304h */ case   14:  		/* addi R9, R31, -4 */
		/* 820BF304h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xFFFFFFFC);
		/* 820BF304h case   14:*/		return 0x820BF308;
		  /* 820BF308h */ case   15:  		/* subf R10, R11, R10 */
		/* 820BF308h case   15:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 820BF308h case   15:*/		return 0x820BF30C;
		  /* 820BF30Ch */ case   16:  		/* add R10, R10, R19 */
		/* 820BF30Ch case   16:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R19);
		/* 820BF30Ch case   16:*/		return 0x820BF310;
		  /* 820BF310h */ case   17:  		/* lwzux R8, <#[R10 + R11]> */
		/* 820BF310h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		regs.R10 = (uint32)(regs.R10 + regs.R11 + 0x00000000);
		/* 820BF310h case   17:*/		return 0x820BF314;
		  /* 820BF314h */ case   18:  		/* stwu R8, <#[R9 + 4]> */
		/* 820BF314h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BF314h case   18:*/		return 0x820BF318;
		  /* 820BF318h */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BF318h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF310;  }
		/* 820BF318h case   19:*/		return 0x820BF31C;
	}
	return 0x820BF31C;
} // Block from 820BF2CCh-820BF31Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 820BF31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF31C);
		  /* 820BF31Ch */ case    0:  		/* li R9, 0 */
		/* 820BF31Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BF31Ch case    0:*/		return 0x820BF320;
		  /* 820BF320h */ case    1:  		/* mr R8, R25 */
		/* 820BF320h case    1:*/		regs.R8 = regs.R25;
		/* 820BF320h case    1:*/		return 0x820BF324;
		  /* 820BF324h */ case    2:  		/* mr R7, R31 */
		/* 820BF324h case    2:*/		regs.R7 = regs.R31;
		/* 820BF324h case    2:*/		return 0x820BF328;
		  /* 820BF328h */ case    3:  		/* mr R6, R28 */
		/* 820BF328h case    3:*/		regs.R6 = regs.R28;
		/* 820BF328h case    3:*/		return 0x820BF32C;
		  /* 820BF32Ch */ case    4:  		/* mr R5, R27 */
		/* 820BF32Ch case    4:*/		regs.R5 = regs.R27;
		/* 820BF32Ch case    4:*/		return 0x820BF330;
		  /* 820BF330h */ case    5:  		/* mr R4, R21 */
		/* 820BF330h case    5:*/		regs.R4 = regs.R21;
		/* 820BF330h case    5:*/		return 0x820BF334;
		  /* 820BF334h */ case    6:  		/* mr R3, R30 */
		/* 820BF334h case    6:*/		regs.R3 = regs.R30;
		/* 820BF334h case    6:*/		return 0x820BF338;
		  /* 820BF338h */ case    7:  		/* bl -59440 */
		/* 820BF338h case    7:*/		regs.LR = 0x820BF33C; return 0x820B0B08;
		/* 820BF338h case    7:*/		return 0x820BF33C;
		  /* 820BF33Ch */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 820BF33Ch case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF33Ch case    8:*/		return 0x820BF340;
		  /* 820BF340h */ case    9:  		/* bc 12, CR0_LT, 1480 */
		/* 820BF340h case    9:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF340h case    9:*/		return 0x820BF344;
		  /* 820BF344h */ case   10:  		/* addi R29, R29, 1 */
		/* 820BF344h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820BF344h case   10:*/		return 0x820BF348;
		  /* 820BF348h */ case   11:  		/* addi R28, R28, 4 */
		/* 820BF348h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 820BF348h case   11:*/		return 0x820BF34C;
		  /* 820BF34Ch */ case   12:  		/* cmplw CR6, R29, R20 */
		/* 820BF34Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R20);
		/* 820BF34Ch case   12:*/		return 0x820BF350;
		  /* 820BF350h */ case   13:  		/* bc 12, CR6_LT, -104 */
		/* 820BF350h case   13:*/		if ( regs.CR[6].lt ) { return 0x820BF2E8;  }
		/* 820BF350h case   13:*/		return 0x820BF354;
		  /* 820BF354h */ case   14:  		/* b 1456 */
		/* 820BF354h case   14:*/		return 0x820BF904;
		/* 820BF354h case   14:*/		return 0x820BF358;
	}
	return 0x820BF358;
} // Block from 820BF31Ch-820BF358h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820BF358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF358);
		  /* 820BF358h */ case    0:  		/* lwz R11, <#[R30 + 88]> */
		/* 820BF358h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 820BF358h case    0:*/		return 0x820BF35C;
		  /* 820BF35Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820BF35Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BF35Ch case    1:*/		return 0x820BF360;
		  /* 820BF360h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 820BF360h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BF368;  }
		/* 820BF360h case    2:*/		return 0x820BF364;
		  /* 820BF364h */ case    3:  		/* stw R26, <#[R30 + 96]> */
		/* 820BF364h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000060) );
		/* 820BF364h case    3:*/		return 0x820BF368;
	}
	return 0x820BF368;
} // Block from 820BF358h-820BF368h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BF368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF368);
		  /* 820BF368h */ case    0:  		/* mulli R11, R22, 3 */
		/* 820BF368h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R22,0x3);
		/* 820BF368h case    0:*/		return 0x820BF36C;
		  /* 820BF36Ch */ case    1:  		/* add R11, R11, R20 */
		/* 820BF36Ch case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R20);
		/* 820BF36Ch case    1:*/		return 0x820BF370;
		  /* 820BF370h */ case    2:  		/* mr R3, R30 */
		/* 820BF370h case    2:*/		regs.R3 = regs.R30;
		/* 820BF370h case    2:*/		return 0x820BF374;
		  /* 820BF374h */ case    3:  		/* addi R11, R11, 2 */
		/* 820BF374h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 820BF374h case    3:*/		return 0x820BF378;
		  /* 820BF378h */ case    4:  		/* rlwinm R31, R11, 1, 0, 30 */
		/* 820BF378h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R31,regs.R11);
		/* 820BF378h case    4:*/		return 0x820BF37C;
		  /* 820BF37Ch */ case    5:  		/* mr R4, R31 */
		/* 820BF37Ch case    5:*/		regs.R4 = regs.R31;
		/* 820BF37Ch case    5:*/		return 0x820BF380;
		  /* 820BF380h */ case    6:  		/* bl -60560 */
		/* 820BF380h case    6:*/		regs.LR = 0x820BF384; return 0x820B06F0;
		/* 820BF380h case    6:*/		return 0x820BF384;
		  /* 820BF384h */ case    7:  		/* or. R11, R3, R3 */
		/* 820BF384h case    7:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 820BF384h case    7:*/		return 0x820BF388;
		  /* 820BF388h */ case    8:  		/* bc 12, CR0_EQ, 1288 */
		/* 820BF388h case    8:*/		if ( regs.CR[0].eq ) { return 0x820BF890;  }
		/* 820BF388h case    8:*/		return 0x820BF38C;
		  /* 820BF38Ch */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 820BF38Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820BF38Ch case    9:*/		return 0x820BF390;
		  /* 820BF390h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 820BF390h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BF3B0;  }
		/* 820BF390h case   10:*/		return 0x820BF394;
		  /* 820BF394h */ case   11:  		/* addi R10, R11, -4 */
		/* 820BF394h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 820BF394h case   11:*/		return 0x820BF398;
		  /* 820BF398h */ case   12:  		/* mr R9, R18 */
		/* 820BF398h case   12:*/		regs.R9 = regs.R18;
		/* 820BF398h case   12:*/		return 0x820BF39C;
		  /* 820BF39Ch */ case   13:  		/* cmplwi CR0, R31, 0 */
		/* 820BF39Ch case   13:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820BF39Ch case   13:*/		return 0x820BF3A0;
		  /* 820BF3A0h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 820BF3A0h case   14:*/		if ( regs.CR[0].eq ) { return 0x820BF3B0;  }
		/* 820BF3A0h case   14:*/		return 0x820BF3A4;
		  /* 820BF3A4h */ case   15:  		/* mtspr CTR, R31 */
		/* 820BF3A4h case   15:*/		regs.CTR = regs.R31;
		/* 820BF3A4h case   15:*/		return 0x820BF3A8;
		  /* 820BF3A8h */ case   16:  		/* stwu R9, <#[R10 + 4]> */
		/* 820BF3A8h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BF3A8h case   16:*/		return 0x820BF3AC;
		  /* 820BF3ACh */ case   17:  		/* bc 16, CR0_LT, -4 */
		/* 820BF3ACh case   17:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF3A8;  }
		/* 820BF3ACh case   17:*/		return 0x820BF3B0;
	}
	return 0x820BF3B0;
} // Block from 820BF368h-820BF3B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820BF3B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF3B0);
		  /* 820BF3B0h */ case    0:  		/* li R10, 4 */
		/* 820BF3B0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 820BF3B0h case    0:*/		return 0x820BF3B4;
		  /* 820BF3B4h */ case    1:  		/* addi R9, R1, 268 */
		/* 820BF3B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x10C);
		/* 820BF3B4h case    1:*/		return 0x820BF3B8;
		  /* 820BF3B8h */ case    2:  		/* mtspr CTR, R10 */
		/* 820BF3B8h case    2:*/		regs.CTR = regs.R10;
		/* 820BF3B8h case    2:*/		return 0x820BF3BC;
		  /* 820BF3BCh */ case    3:  		/* stwu R11, <#[R9 + 4]> */
		/* 820BF3BCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820BF3BCh case    3:*/		return 0x820BF3C0;
		  /* 820BF3C0h */ case    4:  		/* addi R11, R11, 4 */
		/* 820BF3C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BF3C0h case    4:*/		return 0x820BF3C4;
		  /* 820BF3C4h */ case    5:  		/* bc 16, CR0_LT, -8 */
		/* 820BF3C4h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF3BC;  }
		/* 820BF3C4h case    5:*/		return 0x820BF3C8;
		  /* 820BF3C8h */ case    6:  		/* li R9, 6 */
		/* 820BF3C8h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820BF3C8h case    6:*/		return 0x820BF3CC;
		  /* 820BF3CCh */ case    7:  		/* rlwinm R8, R22, 2, 0, 29 */
		/* 820BF3CCh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R22);
		/* 820BF3CCh case    7:*/		return 0x820BF3D0;
		  /* 820BF3D0h */ case    8:  		/* addi R10, R1, 284 */
		/* 820BF3D0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x11C);
		/* 820BF3D0h case    8:*/		return 0x820BF3D4;
		  /* 820BF3D4h */ case    9:  		/* mtspr CTR, R9 */
		/* 820BF3D4h case    9:*/		regs.CTR = regs.R9;
		/* 820BF3D4h case    9:*/		return 0x820BF3D8;
		  /* 820BF3D8h */ case   10:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BF3D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BF3D8h case   10:*/		return 0x820BF3DC;
		  /* 820BF3DCh */ case   11:  		/* add R11, R8, R11 */
		/* 820BF3DCh case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820BF3DCh case   11:*/		return 0x820BF3E0;
		  /* 820BF3E0h */ case   12:  		/* bc 16, CR0_LT, -8 */
		/* 820BF3E0h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF3D8;  }
		/* 820BF3E0h case   12:*/		return 0x820BF3E4;
		  /* 820BF3E4h */ case   13:  		/* li R9, 2 */
		/* 820BF3E4h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BF3E4h case   13:*/		return 0x820BF3E8;
		  /* 820BF3E8h */ case   14:  		/* rlwinm R23, R20, 2, 0, 29 */
		/* 820BF3E8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R23,regs.R20);
		/* 820BF3E8h case   14:*/		return 0x820BF3EC;
		  /* 820BF3ECh */ case   15:  		/* addi R10, R1, 308 */
		/* 820BF3ECh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x134);
		/* 820BF3ECh case   15:*/		return 0x820BF3F0;
		  /* 820BF3F0h */ case   16:  		/* mtspr CTR, R9 */
		/* 820BF3F0h case   16:*/		regs.CTR = regs.R9;
		/* 820BF3F0h case   16:*/		return 0x820BF3F4;
		  /* 820BF3F4h */ case   17:  		/* stwu R11, <#[R10 + 4]> */
		/* 820BF3F4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 820BF3F4h case   17:*/		return 0x820BF3F8;
		  /* 820BF3F8h */ case   18:  		/* add R11, R23, R11 */
		/* 820BF3F8h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 820BF3F8h case   18:*/		return 0x820BF3FC;
		  /* 820BF3FCh */ case   19:  		/* bc 16, CR0_LT, -8 */
		/* 820BF3FCh case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF3F4;  }
		/* 820BF3FCh case   19:*/		return 0x820BF400;
		  /* 820BF400h */ case   20:  		/* lwz R11, <#[R24]> */
		/* 820BF400h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 820BF400h case   20:*/		return 0x820BF404;
		  /* 820BF404h */ case   21:  		/* lis R10, 8256 */
		/* 820BF404h case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0x2040);
		/* 820BF404h case   21:*/		return 0x820BF408;
		  /* 820BF408h */ case   22:  		/* lwz R9, <#[R30 + 8]> */
		/* 820BF408h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF408h case   22:*/		return 0x820BF40C;
		  /* 820BF40Ch */ case   23:  		/* ori R27, R10, 1 */
		/* 820BF40Ch case   23:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R10,0x1);
		/* 820BF40Ch case   23:*/		return 0x820BF410;
		  /* 820BF410h */ case   24:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 820BF410h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 820BF410h case   24:*/		return 0x820BF414;
		  /* 820BF414h */ case   25:  		/* stw R11, <#[R1 + 160]> */
		/* 820BF414h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF414h case   25:*/		return 0x820BF418;
		  /* 820BF418h */ case   26:  		/* lwz R10, <#[R9 + 20]> */
		/* 820BF418h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000014) );
		/* 820BF418h case   26:*/		return 0x820BF41C;
		  /* 820BF41Ch */ case   27:  		/* lwzx R10, <#[R8 + R10]> */
		/* 820BF41Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 820BF41Ch case   27:*/		return 0x820BF420;
		  /* 820BF420h */ case   28:  		/* lwz R10, <#[R10]> */
		/* 820BF420h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820BF420h case   28:*/		return 0x820BF424;
		  /* 820BF424h */ case   29:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 820BF424h case   29:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 820BF424h case   29:*/		return 0x820BF428;
		  /* 820BF428h */ case   30:  		/* bc 4, CR0_EQ, 200 */
		/* 820BF428h case   30:*/		if ( !regs.CR[0].eq ) { return 0x820BF4F0;  }
		/* 820BF428h case   30:*/		return 0x820BF42C;
		  /* 820BF42Ch */ case   31:  		/* lwz R29, <#[R1 + 272]> */
		/* 820BF42Ch case   31:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000110) );
		/* 820BF42Ch case   31:*/		return 0x820BF430;
		  /* 820BF430h */ case   32:  		/* lis R5, 4128 */
		/* 820BF430h case   32:*/		cpu::op::lis<0>(regs,&regs.R5,0x1020);
		/* 820BF430h case   32:*/		return 0x820BF434;
		  /* 820BF434h */ case   33:  		/* li R9, 4 */
		/* 820BF434h case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BF434h case   33:*/		return 0x820BF438;
		  /* 820BF438h */ case   34:  		/* li R8, 0 */
		/* 820BF438h case   34:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BF438h case   34:*/		return 0x820BF43C;
		  /* 820BF43Ch */ case   35:  		/* addi R7, R1, 160 */
		/* 820BF43Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BF43Ch case   35:*/		return 0x820BF440;
		  /* 820BF440h */ case   36:  		/* mr R6, R29 */
		/* 820BF440h case   36:*/		regs.R6 = regs.R29;
		/* 820BF440h case   36:*/		return 0x820BF444;
		  /* 820BF444h */ case   37:  		/* ori R5, R5, 1 */
		/* 820BF444h case   37:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BF444h case   37:*/		return 0x820BF448;
		  /* 820BF448h */ case   38:  		/* mr R4, R21 */
		/* 820BF448h case   38:*/		regs.R4 = regs.R21;
		/* 820BF448h case   38:*/		return 0x820BF44C;
		  /* 820BF44Ch */ case   39:  		/* mr R3, R30 */
		/* 820BF44Ch case   39:*/		regs.R3 = regs.R30;
		/* 820BF44Ch case   39:*/		return 0x820BF450;
		  /* 820BF450h */ case   40:  		/* bl -59720 */
		/* 820BF450h case   40:*/		regs.LR = 0x820BF454; return 0x820B0B08;
		/* 820BF450h case   40:*/		return 0x820BF454;
		  /* 820BF454h */ case   41:  		/* cmpwi CR0, R3, 0 */
		/* 820BF454h case   41:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF454h case   41:*/		return 0x820BF458;
		  /* 820BF458h */ case   42:  		/* bc 12, CR0_LT, 1200 */
		/* 820BF458h case   42:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF458h case   42:*/		return 0x820BF45C;
		  /* 820BF45Ch */ case   43:  		/* lwz R28, <#[R1 + 276]> */
		/* 820BF45Ch case   43:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000114) );
		/* 820BF45Ch case   43:*/		return 0x820BF460;
		  /* 820BF460h */ case   44:  		/* lis R5, 4160 */
		/* 820BF460h case   44:*/		cpu::op::lis<0>(regs,&regs.R5,0x1040);
		/* 820BF460h case   44:*/		return 0x820BF464;
		  /* 820BF464h */ case   45:  		/* li R9, 4 */
		/* 820BF464h case   45:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BF464h case   45:*/		return 0x820BF468;
		  /* 820BF468h */ case   46:  		/* li R8, 0 */
		/* 820BF468h case   46:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BF468h case   46:*/		return 0x820BF46C;
		  /* 820BF46Ch */ case   47:  		/* mr R7, R29 */
		/* 820BF46Ch case   47:*/		regs.R7 = regs.R29;
		/* 820BF46Ch case   47:*/		return 0x820BF470;
		  /* 820BF470h */ case   48:  		/* mr R6, R28 */
		/* 820BF470h case   48:*/		regs.R6 = regs.R28;
		/* 820BF470h case   48:*/		return 0x820BF474;
		  /* 820BF474h */ case   49:  		/* ori R5, R5, 1 */
		/* 820BF474h case   49:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BF474h case   49:*/		return 0x820BF478;
		  /* 820BF478h */ case   50:  		/* mr R4, R21 */
		/* 820BF478h case   50:*/		regs.R4 = regs.R21;
		/* 820BF478h case   50:*/		return 0x820BF47C;
		  /* 820BF47Ch */ case   51:  		/* mr R3, R30 */
		/* 820BF47Ch case   51:*/		regs.R3 = regs.R30;
		/* 820BF47Ch case   51:*/		return 0x820BF480;
		  /* 820BF480h */ case   52:  		/* bl -59768 */
		/* 820BF480h case   52:*/		regs.LR = 0x820BF484; return 0x820B0B08;
		/* 820BF480h case   52:*/		return 0x820BF484;
		  /* 820BF484h */ case   53:  		/* cmpwi CR0, R3, 0 */
		/* 820BF484h case   53:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF484h case   53:*/		return 0x820BF488;
		  /* 820BF488h */ case   54:  		/* bc 12, CR0_LT, 1152 */
		/* 820BF488h case   54:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF488h case   54:*/		return 0x820BF48C;
		  /* 820BF48Ch */ case   55:  		/* lwz R31, <#[R1 + 280]> */
		/* 820BF48Ch case   55:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000118) );
		/* 820BF48Ch case   55:*/		return 0x820BF490;
		  /* 820BF490h */ case   56:  		/* lis R5, 4112 */
		/* 820BF490h case   56:*/		cpu::op::lis<0>(regs,&regs.R5,0x1010);
		/* 820BF490h case   56:*/		return 0x820BF494;
		  /* 820BF494h */ case   57:  		/* li R9, 8 */
		/* 820BF494h case   57:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 820BF494h case   57:*/		return 0x820BF498;
		  /* 820BF498h */ case   58:  		/* li R8, 0 */
		/* 820BF498h case   58:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BF498h case   58:*/		return 0x820BF49C;
		  /* 820BF49Ch */ case   59:  		/* mr R7, R28 */
		/* 820BF49Ch case   59:*/		regs.R7 = regs.R28;
		/* 820BF49Ch case   59:*/		return 0x820BF4A0;
		  /* 820BF4A0h */ case   60:  		/* mr R6, R31 */
		/* 820BF4A0h case   60:*/		regs.R6 = regs.R31;
		/* 820BF4A0h case   60:*/		return 0x820BF4A4;
		  /* 820BF4A4h */ case   61:  		/* ori R5, R5, 1 */
		/* 820BF4A4h case   61:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BF4A4h case   61:*/		return 0x820BF4A8;
		  /* 820BF4A8h */ case   62:  		/* mr R4, R21 */
		/* 820BF4A8h case   62:*/		regs.R4 = regs.R21;
		/* 820BF4A8h case   62:*/		return 0x820BF4AC;
		  /* 820BF4ACh */ case   63:  		/* mr R3, R30 */
		/* 820BF4ACh case   63:*/		regs.R3 = regs.R30;
		/* 820BF4ACh case   63:*/		return 0x820BF4B0;
		  /* 820BF4B0h */ case   64:  		/* bl -59816 */
		/* 820BF4B0h case   64:*/		regs.LR = 0x820BF4B4; return 0x820B0B08;
		/* 820BF4B0h case   64:*/		return 0x820BF4B4;
		  /* 820BF4B4h */ case   65:  		/* cmpwi CR0, R3, 0 */
		/* 820BF4B4h case   65:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF4B4h case   65:*/		return 0x820BF4B8;
		  /* 820BF4B8h */ case   66:  		/* bc 12, CR0_LT, 1104 */
		/* 820BF4B8h case   66:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF4B8h case   66:*/		return 0x820BF4BC;
		  /* 820BF4BCh */ case   67:  		/* lwz R28, <#[R1 + 284]> */
		/* 820BF4BCh case   67:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000011C) );
		/* 820BF4BCh case   67:*/		return 0x820BF4C0;
		  /* 820BF4C0h */ case   68:  		/* li R9, 6 */
		/* 820BF4C0h case   68:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820BF4C0h case   68:*/		return 0x820BF4C4;
		  /* 820BF4C4h */ case   69:  		/* mr R8, R29 */
		/* 820BF4C4h case   69:*/		regs.R8 = regs.R29;
		/* 820BF4C4h case   69:*/		return 0x820BF4C8;
		  /* 820BF4C8h */ case   70:  		/* mr R7, R31 */
		/* 820BF4C8h case   70:*/		regs.R7 = regs.R31;
		/* 820BF4C8h case   70:*/		return 0x820BF4CC;
		  /* 820BF4CCh */ case   71:  		/* mr R6, R28 */
		/* 820BF4CCh case   71:*/		regs.R6 = regs.R28;
		/* 820BF4CCh case   71:*/		return 0x820BF4D0;
		  /* 820BF4D0h */ case   72:  		/* mr R5, R27 */
		/* 820BF4D0h case   72:*/		regs.R5 = regs.R27;
		/* 820BF4D0h case   72:*/		return 0x820BF4D4;
		  /* 820BF4D4h */ case   73:  		/* mr R4, R21 */
		/* 820BF4D4h case   73:*/		regs.R4 = regs.R21;
		/* 820BF4D4h case   73:*/		return 0x820BF4D8;
		  /* 820BF4D8h */ case   74:  		/* mr R3, R30 */
		/* 820BF4D8h case   74:*/		regs.R3 = regs.R30;
		/* 820BF4D8h case   74:*/		return 0x820BF4DC;
		  /* 820BF4DCh */ case   75:  		/* bl -59860 */
		/* 820BF4DCh case   75:*/		regs.LR = 0x820BF4E0; return 0x820B0B08;
		/* 820BF4DCh case   75:*/		return 0x820BF4E0;
		  /* 820BF4E0h */ case   76:  		/* cmpwi CR0, R3, 0 */
		/* 820BF4E0h case   76:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF4E0h case   76:*/		return 0x820BF4E4;
		  /* 820BF4E4h */ case   77:  		/* bc 12, CR0_LT, 1060 */
		/* 820BF4E4h case   77:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF4E4h case   77:*/		return 0x820BF4E8;
		  /* 820BF4E8h */ case   78:  		/* lwz R11, <#[R28]> */
		/* 820BF4E8h case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 820BF4E8h case   78:*/		return 0x820BF4EC;
		  /* 820BF4ECh */ case   79:  		/* stw R11, <#[R1 + 160]> */
		/* 820BF4ECh case   79:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF4ECh case   79:*/		return 0x820BF4F0;
	}
	return 0x820BF4F0;
} // Block from 820BF3B0h-820BF4F0h (80 instructions)

//////////////////////////////////////////////////////
// Block at 820BF4F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF4F0);
		  /* 820BF4F0h */ case    0:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF4F0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF4F0h case    0:*/		return 0x820BF4F4;
		  /* 820BF4F4h */ case    1:  		/* lwz R24, <#[R1 + 308]> */
		/* 820BF4F4h case    1:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000134) );
		/* 820BF4F4h case    1:*/		return 0x820BF4F8;
		  /* 820BF4F8h */ case    2:  		/* lwz R10, <#[R3 + 112]> */
		/* 820BF4F8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000070) );
		/* 820BF4F8h case    2:*/		return 0x820BF4FC;
		  /* 820BF4FCh */ case    3:  		/* rlwinm. R10, R10, 0, 10, 10 */
		/* 820BF4FCh case    3:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R10,regs.R10);
		/* 820BF4FCh case    3:*/		return 0x820BF500;
		  /* 820BF500h */ case    4:  		/* bc 12, CR0_EQ, 468 */
		/* 820BF500h case    4:*/		if ( regs.CR[0].eq ) { return 0x820BF6D4;  }
		/* 820BF500h case    4:*/		return 0x820BF504;
		  /* 820BF504h */ case    5:  		/* cmplwi CR6, R22, 4 */
		/* 820BF504h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000004);
		/* 820BF504h case    5:*/		return 0x820BF508;
		  /* 820BF508h */ case    6:  		/* bc 12, CR6_GT, 460 */
		/* 820BF508h case    6:*/		if ( regs.CR[6].gt ) { return 0x820BF6D4;  }
		/* 820BF508h case    6:*/		return 0x820BF50C;
		  /* 820BF50Ch */ case    7:  		/* cmplwi CR6, R17, 0 */
		/* 820BF50Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 820BF50Ch case    7:*/		return 0x820BF510;
		  /* 820BF510h */ case    8:  		/* bc 12, CR6_EQ, 104 */
		/* 820BF510h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BF578;  }
		/* 820BF510h case    8:*/		return 0x820BF514;
		  /* 820BF514h */ case    9:  		/* rldicl R11, R17, 0, 32 */
		/* 820BF514h case    9:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R17);
		/* 820BF514h case    9:*/		return 0x820BF518;
		  /* 820BF518h */ case   10:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BF518h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BF518h case   10:*/		return 0x820BF51C;
		  /* 820BF51Ch */ case   11:  		/* li R6, 0 */
		/* 820BF51Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BF51Ch case   11:*/		return 0x820BF520;
		  /* 820BF520h */ case   12:  		/* std R11, <#[R1 + 192]> */
		/* 820BF520h case   12:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF520h case   12:*/		return 0x820BF524;
		  /* 820BF524h */ case   13:  		/* lfd FR0, <#[R1 + 192]> */
		/* 820BF524h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF524h case   13:*/		return 0x820BF528;
		  /* 820BF528h */ case   14:  		/* fcfid FR0, FR0 */
		/* 820BF528h case   14:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820BF528h case   14:*/		return 0x820BF52C;
		  /* 820BF52Ch */ case   15:  		/* li R5, 0 */
		/* 820BF52Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BF52Ch case   15:*/		return 0x820BF530;
		  /* 820BF530h */ case   16:  		/* fneg FR1, FR0 */
		/* 820BF530h case   16:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR0);
		/* 820BF530h case   16:*/		return 0x820BF534;
		  /* 820BF534h */ case   17:  		/* bl 253172 */
		/* 820BF534h case   17:*/		regs.LR = 0x820BF538; return 0x820FD228;
		/* 820BF534h case   17:*/		return 0x820BF538;
		  /* 820BF538h */ case   18:  		/* stw R3, <#[R1 + 192]> */
		/* 820BF538h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF538h case   18:*/		return 0x820BF53C;
		  /* 820BF53Ch */ case   19:  		/* cmpwi CR6, R3, -1 */
		/* 820BF53Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF53Ch case   19:*/		return 0x820BF540;
		  /* 820BF540h */ case   20:  		/* bc 12, CR6_EQ, 848 */
		/* 820BF540h case   20:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF540h case   20:*/		return 0x820BF544;
		  /* 820BF544h */ case   21:  		/* stw R18, <#[R1 + 180]> */
		/* 820BF544h case   21:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BF544h case   21:*/		return 0x820BF548;
		  /* 820BF548h */ case   22:  		/* li R9, 4 */
		/* 820BF548h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BF548h case   22:*/		return 0x820BF54C;
		  /* 820BF54Ch */ case   23:  		/* addi R8, R1, 192 */
		/* 820BF54Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 820BF54Ch case   23:*/		return 0x820BF550;
		  /* 820BF550h */ case   24:  		/* addi R7, R1, 160 */
		/* 820BF550h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BF550h case   24:*/		return 0x820BF554;
		  /* 820BF554h */ case   25:  		/* addi R6, R1, 180 */
		/* 820BF554h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB4);
		/* 820BF554h case   25:*/		return 0x820BF558;
		  /* 820BF558h */ case   26:  		/* mr R5, R27 */
		/* 820BF558h case   26:*/		regs.R5 = regs.R27;
		/* 820BF558h case   26:*/		return 0x820BF55C;
		  /* 820BF55Ch */ case   27:  		/* mr R4, R21 */
		/* 820BF55Ch case   27:*/		regs.R4 = regs.R21;
		/* 820BF55Ch case   27:*/		return 0x820BF560;
		  /* 820BF560h */ case   28:  		/* mr R3, R30 */
		/* 820BF560h case   28:*/		regs.R3 = regs.R30;
		/* 820BF560h case   28:*/		return 0x820BF564;
		  /* 820BF564h */ case   29:  		/* bl -59996 */
		/* 820BF564h case   29:*/		regs.LR = 0x820BF568; return 0x820B0B08;
		/* 820BF564h case   29:*/		return 0x820BF568;
		  /* 820BF568h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820BF568h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF568h case   30:*/		return 0x820BF56C;
		  /* 820BF56Ch */ case   31:  		/* bc 12, CR0_LT, 924 */
		/* 820BF56Ch case   31:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF56Ch case   31:*/		return 0x820BF570;
		  /* 820BF570h */ case   32:  		/* lwz R11, <#[R1 + 180]> */
		/* 820BF570h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 820BF570h case   32:*/		return 0x820BF574;
		  /* 820BF574h */ case   33:  		/* stw R11, <#[R1 + 160]> */
		/* 820BF574h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF574h case   33:*/		return 0x820BF578;
	}
	return 0x820BF578;
} // Block from 820BF4F0h-820BF578h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820BF578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF578);
		  /* 820BF578h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BF578h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF578h case    0:*/		return 0x820BF57C;
		  /* 820BF57Ch */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 820BF57Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 820BF57Ch case    1:*/		return 0x820BF580;
		  /* 820BF580h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 820BF580h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BF580h case    2:*/		return 0x820BF584;
		  /* 820BF584h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 820BF584h case    3:*/		if ( regs.CR[6].eq ) { return 0x820BF5D8;  }
		/* 820BF584h case    3:*/		return 0x820BF588;
		  /* 820BF588h */ case    4:  		/* stw R18, <#[R1 + 184]> */
		/* 820BF588h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000B8) );
		/* 820BF588h case    4:*/		return 0x820BF58C;
		  /* 820BF58Ch */ case    5:  		/* lis R5, 4096 */
		/* 820BF58Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R5,0x1000);
		/* 820BF58Ch case    5:*/		return 0x820BF590;
		  /* 820BF590h */ case    6:  		/* li R9, 4 */
		/* 820BF590h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 820BF590h case    6:*/		return 0x820BF594;
		  /* 820BF594h */ case    7:  		/* li R8, 0 */
		/* 820BF594h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BF594h case    7:*/		return 0x820BF598;
		  /* 820BF598h */ case    8:  		/* addi R7, R1, 160 */
		/* 820BF598h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 820BF598h case    8:*/		return 0x820BF59C;
		  /* 820BF59Ch */ case    9:  		/* addi R6, R1, 184 */
		/* 820BF59Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB8);
		/* 820BF59Ch case    9:*/		return 0x820BF5A0;
		  /* 820BF5A0h */ case   10:  		/* ori R5, R5, 1 */
		/* 820BF5A0h case   10:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1);
		/* 820BF5A0h case   10:*/		return 0x820BF5A4;
		  /* 820BF5A4h */ case   11:  		/* mr R4, R21 */
		/* 820BF5A4h case   11:*/		regs.R4 = regs.R21;
		/* 820BF5A4h case   11:*/		return 0x820BF5A8;
		  /* 820BF5A8h */ case   12:  		/* mr R3, R30 */
		/* 820BF5A8h case   12:*/		regs.R3 = regs.R30;
		/* 820BF5A8h case   12:*/		return 0x820BF5AC;
		  /* 820BF5ACh */ case   13:  		/* bl -60068 */
		/* 820BF5ACh case   13:*/		regs.LR = 0x820BF5B0; return 0x820B0B08;
		/* 820BF5ACh case   13:*/		return 0x820BF5B0;
		  /* 820BF5B0h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 820BF5B0h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF5B0h case   14:*/		return 0x820BF5B4;
		  /* 820BF5B4h */ case   15:  		/* bc 12, CR0_LT, 852 */
		/* 820BF5B4h case   15:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF5B4h case   15:*/		return 0x820BF5B8;
		  /* 820BF5B8h */ case   16:  		/* lwz R11, <#[R1 + 184]> */
		/* 820BF5B8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 820BF5B8h case   16:*/		return 0x820BF5BC;
		  /* 820BF5BCh */ case   17:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BF5BCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF5BCh case   17:*/		return 0x820BF5C0;
		  /* 820BF5C0h */ case   18:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 820BF5C0h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 820BF5C0h case   18:*/		return 0x820BF5C4;
		  /* 820BF5C4h */ case   19:  		/* stw R11, <#[R1 + 160]> */
		/* 820BF5C4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF5C4h case   19:*/		return 0x820BF5C8;
		  /* 820BF5C8h */ case   20:  		/* lwz R11, <#[R10 + 140]> */
		/* 820BF5C8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000008C) );
		/* 820BF5C8h case   20:*/		return 0x820BF5CC;
		  /* 820BF5CCh */ case   21:  		/* lwz R10, <#[R10 + 20]> */
		/* 820BF5CCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820BF5CCh case   21:*/		return 0x820BF5D0;
		  /* 820BF5D0h */ case   22:  		/* lwzx R10, <#[R10 + R9]> */
		/* 820BF5D0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 820BF5D0h case   22:*/		return 0x820BF5D4;
		  /* 820BF5D4h */ case   23:  		/* stw R11, <#[R10 + 4]> */
		/* 820BF5D4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820BF5D4h case   23:*/		return 0x820BF5D8;
	}
	return 0x820BF5D8;
} // Block from 820BF578h-820BF5D8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820BF5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF5D8);
		  /* 820BF5D8h */ case    0:  		/* lis R11, -32256 */
		/* 820BF5D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820BF5D8h case    0:*/		return 0x820BF5DC;
		  /* 820BF5DCh */ case    1:  		/* lwz R10, <#[R30 + 72]> */
		/* 820BF5DCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF5DCh case    1:*/		return 0x820BF5E0;
		  /* 820BF5E0h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 820BF5E0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 820BF5E0h case    2:*/		return 0x820BF5E4;
		  /* 820BF5E4h */ case    3:  		/* lfd FR31, <#[R11 + 1848]> */
		/* 820BF5E4h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000738) );
		/* 820BF5E4h case    3:*/		return 0x820BF5E8;
		  /* 820BF5E8h */ case    4:  		/* bc 4, CR6_EQ, 124 */
		/* 820BF5E8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BF664;  }
		/* 820BF5E8h case    4:*/		return 0x820BF5EC;
		  /* 820BF5ECh */ case    5:  		/* lis R11, -32255 */
		/* 820BF5ECh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BF5ECh case    5:*/		return 0x820BF5F0;
		  /* 820BF5F0h */ case    6:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF5F0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF5F0h case    6:*/		return 0x820BF5F4;
		  /* 820BF5F4h */ case    7:  		/* li R7, 4 */
		/* 820BF5F4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 820BF5F4h case    7:*/		return 0x820BF5F8;
		  /* 820BF5F8h */ case    8:  		/* addi R4, R11, -8824 */
		/* 820BF5F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDD88);
		/* 820BF5F8h case    8:*/		return 0x820BF5FC;
		  /* 820BF5FCh */ case    9:  		/* li R6, 4 */
		/* 820BF5FCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 820BF5FCh case    9:*/		return 0x820BF600;
		  /* 820BF600h */ case   10:  		/* li R5, 1873 */
		/* 820BF600h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x751);
		/* 820BF600h case   10:*/		return 0x820BF604;
		  /* 820BF604h */ case   11:  		/* bl 252804 */
		/* 820BF604h case   11:*/		regs.LR = 0x820BF608; return 0x820FD188;
		/* 820BF604h case   11:*/		return 0x820BF608;
		  /* 820BF608h */ case   12:  		/* stw R3, <#[R30 + 72]> */
		/* 820BF608h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF608h case   12:*/		return 0x820BF60C;
		  /* 820BF60Ch */ case   13:  		/* cmpwi CR6, R3, -1 */
		/* 820BF60Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF60Ch case   13:*/		return 0x820BF610;
		  /* 820BF610h */ case   14:  		/* bc 12, CR6_EQ, 640 */
		/* 820BF610h case   14:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF610h case   14:*/		return 0x820BF614;
		  /* 820BF614h */ case   15:  		/* li R29, 0 */
		/* 820BF614h case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820BF614h case   15:*/		return 0x820BF618;
		  /* 820BF618h */ case   16:  		/* li R31, 0 */
		/* 820BF618h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820BF618h case   16:*/		return 0x820BF61C;
		  /* 820BF61Ch */ case   17:  		/* cmplw CR6, R29, R31 */
		/* 820BF61Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 820BF61Ch case   17:*/		return 0x820BF620;
		  /* 820BF620h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 820BF620h case   18:*/		if ( !regs.CR[6].eq ) { return 0x820BF62C;  }
		/* 820BF620h case   18:*/		return 0x820BF624;
		  /* 820BF624h */ case   19:  		/* fmr FR1, FR31 */
		/* 820BF624h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820BF624h case   19:*/		return 0x820BF628;
		  /* 820BF628h */ case   20:  		/* b 8 */
		/* 820BF628h case   20:*/		return 0x820BF630;
		/* 820BF628h case   20:*/		return 0x820BF62C;
	}
	return 0x820BF62C;
} // Block from 820BF5D8h-820BF62Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 820BF62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF62C);
		  /* 820BF62Ch */ case    0:  		/* fmr FR1, FR29 */
		/* 820BF62Ch case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 820BF62Ch case    0:*/		return 0x820BF630;
	}
	return 0x820BF630;
} // Block from 820BF62Ch-820BF630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BF630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF630);
		  /* 820BF630h */ case    0:  		/* mr R6, R31 */
		/* 820BF630h case    0:*/		regs.R6 = regs.R31;
		/* 820BF630h case    0:*/		return 0x820BF634;
		  /* 820BF634h */ case    1:  		/* lwz R4, <#[R30 + 72]> */
		/* 820BF634h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF634h case    1:*/		return 0x820BF638;
		  /* 820BF638h */ case    2:  		/* mr R5, R29 */
		/* 820BF638h case    2:*/		regs.R5 = regs.R29;
		/* 820BF638h case    2:*/		return 0x820BF63C;
		  /* 820BF63Ch */ case    3:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF63Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF63Ch case    3:*/		return 0x820BF640;
		  /* 820BF640h */ case    4:  		/* bl 252904 */
		/* 820BF640h case    4:*/		regs.LR = 0x820BF644; return 0x820FD228;
		/* 820BF640h case    4:*/		return 0x820BF644;
		  /* 820BF644h */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 820BF644h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF644h case    5:*/		return 0x820BF648;
		  /* 820BF648h */ case    6:  		/* bc 12, CR6_EQ, 584 */
		/* 820BF648h case    6:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF648h case    6:*/		return 0x820BF64C;
		  /* 820BF64Ch */ case    7:  		/* addi R31, R31, 1 */
		/* 820BF64Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820BF64Ch case    7:*/		return 0x820BF650;
		  /* 820BF650h */ case    8:  		/* cmplwi CR6, R31, 4 */
		/* 820BF650h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 820BF650h case    8:*/		return 0x820BF654;
		  /* 820BF654h */ case    9:  		/* bc 12, CR6_LT, -56 */
		/* 820BF654h case    9:*/		if ( regs.CR[6].lt ) { return 0x820BF61C;  }
		/* 820BF654h case    9:*/		return 0x820BF658;
		  /* 820BF658h */ case   10:  		/* addi R29, R29, 1 */
		/* 820BF658h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820BF658h case   10:*/		return 0x820BF65C;
		  /* 820BF65Ch */ case   11:  		/* cmplwi CR6, R29, 4 */
		/* 820BF65Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 820BF65Ch case   11:*/		return 0x820BF660;
		  /* 820BF660h */ case   12:  		/* bc 12, CR6_LT, -72 */
		/* 820BF660h case   12:*/		if ( regs.CR[6].lt ) { return 0x820BF618;  }
		/* 820BF660h case   12:*/		return 0x820BF664;
	}
	return 0x820BF664;
} // Block from 820BF630h-820BF664h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820BF664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF664);
		  /* 820BF664h */ case    0:  		/* li R31, 0 */
		/* 820BF664h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820BF664h case    0:*/		return 0x820BF668;
		  /* 820BF668h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 820BF668h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820BF668h case    1:*/		return 0x820BF66C;
		  /* 820BF66Ch */ case    2:  		/* bc 12, CR6_EQ, 348 */
		/* 820BF66Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820BF7C8;  }
		/* 820BF66Ch case    2:*/		return 0x820BF670;
		  /* 820BF670h */ case    3:  		/* addi R29, R24, -4 */
		/* 820BF670h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R24,0xFFFFFFFC);
		/* 820BF670h case    3:*/		return 0x820BF674;
		  /* 820BF674h */ case    4:  		/* mr R6, R31 */
		/* 820BF674h case    4:*/		regs.R6 = regs.R31;
		/* 820BF674h case    4:*/		return 0x820BF678;
		  /* 820BF678h */ case    5:  		/* lwz R4, <#[R30 + 72]> */
		/* 820BF678h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000048) );
		/* 820BF678h case    5:*/		return 0x820BF67C;
		  /* 820BF67Ch */ case    6:  		/* li R5, 0 */
		/* 820BF67Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BF67Ch case    6:*/		return 0x820BF680;
		  /* 820BF680h */ case    7:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF680h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF680h case    7:*/		return 0x820BF684;
		  /* 820BF684h */ case    8:  		/* fmr FR1, FR29 */
		/* 820BF684h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 820BF684h case    8:*/		return 0x820BF688;
		  /* 820BF688h */ case    9:  		/* bl 252832 */
		/* 820BF688h case    9:*/		regs.LR = 0x820BF68C; return 0x820FD228;
		/* 820BF688h case    9:*/		return 0x820BF68C;
		  /* 820BF68Ch */ case   10:  		/* stw R3, <#[R29 + 4]> */
		/* 820BF68Ch case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 820BF68Ch case   10:*/		return 0x820BF690;
		  /* 820BF690h */ case   11:  		/* cmpwi CR6, R3, -1 */
		/* 820BF690h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF690h case   11:*/		return 0x820BF694;
		  /* 820BF694h */ case   12:  		/* bc 12, CR6_EQ, 508 */
		/* 820BF694h case   12:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF694h case   12:*/		return 0x820BF698;
		  /* 820BF698h */ case   13:  		/* lwz R10, <#[R30 + 8]> */
		/* 820BF698h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF698h case   13:*/		return 0x820BF69C;
		  /* 820BF69Ch */ case   14:  		/* addi R31, R31, 1 */
		/* 820BF69Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 820BF69Ch case   14:*/		return 0x820BF6A0;
		  /* 820BF6A0h */ case   15:  		/* lwzu R11, <#[R29 + 4]> */
		/* 820BF6A0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 820BF6A0h case   15:*/		return 0x820BF6A4;
		  /* 820BF6A4h */ case   16:  		/* li R9, 279 */
		/* 820BF6A4h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x117);
		/* 820BF6A4h case   16:*/		return 0x820BF6A8;
		  /* 820BF6A8h */ case   17:  		/* lwz R8, <#[R1 + 160]> */
		/* 820BF6A8h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF6A8h case   17:*/		return 0x820BF6AC;
		  /* 820BF6ACh */ case   18:  		/* cmplw CR6, R31, R22 */
		/* 820BF6ACh case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R22);
		/* 820BF6ACh case   18:*/		return 0x820BF6B0;
		  /* 820BF6B0h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BF6B0h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BF6B0h case   19:*/		return 0x820BF6B4;
		  /* 820BF6B4h */ case   20:  		/* lwz R10, <#[R10 + 20]> */
		/* 820BF6B4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 820BF6B4h case   20:*/		return 0x820BF6B8;
		  /* 820BF6B8h */ case   21:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820BF6B8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820BF6B8h case   21:*/		return 0x820BF6BC;
		  /* 820BF6BCh */ case   22:  		/* stfd FR29, <#[R11 + 32]> */
		/* 820BF6BCh case   22:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R11 + 0x00000020) );
		/* 820BF6BCh case   22:*/		return 0x820BF6C0;
		  /* 820BF6C0h */ case   23:  		/* stw R8, <#[R11 + 8]> */
		/* 820BF6C0h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 820BF6C0h case   23:*/		return 0x820BF6C4;
		  /* 820BF6C4h */ case   24:  		/* stfd FR31, <#[R11 + 40]> */
		/* 820BF6C4h case   24:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R11 + 0x00000028) );
		/* 820BF6C4h case   24:*/		return 0x820BF6C8;
		  /* 820BF6C8h */ case   25:  		/* stw R9, <#[R11]> */
		/* 820BF6C8h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820BF6C8h case   25:*/		return 0x820BF6CC;
		  /* 820BF6CCh */ case   26:  		/* bc 12, CR6_LT, -88 */
		/* 820BF6CCh case   26:*/		if ( regs.CR[6].lt ) { return 0x820BF674;  }
		/* 820BF6CCh case   26:*/		return 0x820BF6D0;
		  /* 820BF6D0h */ case   27:  		/* b 248 */
		/* 820BF6D0h case   27:*/		return 0x820BF7C8;
		/* 820BF6D0h case   27:*/		return 0x820BF6D4;
	}
	return 0x820BF6D4;
} // Block from 820BF664h-820BF6D4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BF6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF6D4);
		  /* 820BF6D4h */ case    0:  		/* lwz R27, <#[R1 + 292]> */
		/* 820BF6D4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000124) );
		/* 820BF6D4h case    0:*/		return 0x820BF6D8;
		  /* 820BF6D8h */ case    1:  		/* li R29, 0 */
		/* 820BF6D8h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820BF6D8h case    1:*/		return 0x820BF6DC;
		  /* 820BF6DCh */ case    2:  		/* lwz R26, <#[R1 + 288]> */
		/* 820BF6DCh case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000120) );
		/* 820BF6DCh case    2:*/		return 0x820BF6E0;
		  /* 820BF6E0h */ case    3:  		/* cmplwi CR6, R22, 0 */
		/* 820BF6E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820BF6E0h case    3:*/		return 0x820BF6E4;
		  /* 820BF6E4h */ case    4:  		/* bc 12, CR6_EQ, 96 */
		/* 820BF6E4h case    4:*/		if ( regs.CR[6].eq ) { return 0x820BF744;  }
		/* 820BF6E4h case    4:*/		return 0x820BF6E8;
		  /* 820BF6E8h */ case    5:  		/* mr R31, R27 */
		/* 820BF6E8h case    5:*/		regs.R31 = regs.R27;
		/* 820BF6E8h case    5:*/		return 0x820BF6EC;
		  /* 820BF6ECh */ case    6:  		/* subf R28, R27, R26 */
		/* 820BF6ECh case    6:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R27,regs.R26);
		/* 820BF6ECh case    6:*/		return 0x820BF6F0;
		  /* 820BF6F0h */ case    7:  		/* b 8 */
		/* 820BF6F0h case    7:*/		return 0x820BF6F8;
		/* 820BF6F0h case    7:*/		return 0x820BF6F4;
		  /* 820BF6F4h */ case    8:  		/* lwz R11, <#[R1 + 160]> */
		/* 820BF6F4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 820BF6F4h case    8:*/		return 0x820BF6F8;
	}
	return 0x820BF6F8;
} // Block from 820BF6D4h-820BF6F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BF6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF6F8);
		  /* 820BF6F8h */ case    0:  		/* add R10, R29, R17 */
		/* 820BF6F8h case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R29,regs.R17);
		/* 820BF6F8h case    0:*/		return 0x820BF6FC;
		  /* 820BF6FCh */ case    1:  		/* stwx R11, <#[R28 + R31]> */
		/* 820BF6FCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + regs.R31 + 0x00000000) );
		/* 820BF6FCh case    1:*/		return 0x820BF700;
		  /* 820BF700h */ case    2:  		/* li R6, 0 */
		/* 820BF700h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BF700h case    2:*/		return 0x820BF704;
		  /* 820BF704h */ case    3:  		/* rldicl R11, R10, 0, 32 */
		/* 820BF704h case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R10);
		/* 820BF704h case    3:*/		return 0x820BF708;
		  /* 820BF708h */ case    4:  		/* li R5, 0 */
		/* 820BF708h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BF708h case    4:*/		return 0x820BF70C;
		  /* 820BF70Ch */ case    5:  		/* std R11, <#[R1 + 192]> */
		/* 820BF70Ch case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF70Ch case    5:*/		return 0x820BF710;
		  /* 820BF710h */ case    6:  		/* lwz R3, <#[R30 + 8]> */
		/* 820BF710h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF710h case    6:*/		return 0x820BF714;
		  /* 820BF714h */ case    7:  		/* lfd FR0, <#[R1 + 192]> */
		/* 820BF714h case    7:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 820BF714h case    7:*/		return 0x820BF718;
		  /* 820BF718h */ case    8:  		/* fcfid FR0, FR0 */
		/* 820BF718h case    8:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820BF718h case    8:*/		return 0x820BF71C;
		  /* 820BF71Ch */ case    9:  		/* lwz R4, <#[R3 + 120]> */
		/* 820BF71Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000078) );
		/* 820BF71Ch case    9:*/		return 0x820BF720;
		  /* 820BF720h */ case   10:  		/* fneg FR1, FR0 */
		/* 820BF720h case   10:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR0);
		/* 820BF720h case   10:*/		return 0x820BF724;
		  /* 820BF724h */ case   11:  		/* bl 252676 */
		/* 820BF724h case   11:*/		regs.LR = 0x820BF728; return 0x820FD228;
		/* 820BF724h case   11:*/		return 0x820BF728;
		  /* 820BF728h */ case   12:  		/* stw R3, <#[R31]> */
		/* 820BF728h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820BF728h case   12:*/		return 0x820BF72C;
		  /* 820BF72Ch */ case   13:  		/* cmpwi CR6, R3, -1 */
		/* 820BF72Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820BF72Ch case   13:*/		return 0x820BF730;
		  /* 820BF730h */ case   14:  		/* bc 12, CR6_EQ, 352 */
		/* 820BF730h case   14:*/		if ( regs.CR[6].eq ) { return 0x820BF890;  }
		/* 820BF730h case   14:*/		return 0x820BF734;
		  /* 820BF734h */ case   15:  		/* addi R29, R29, 1 */
		/* 820BF734h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820BF734h case   15:*/		return 0x820BF738;
		  /* 820BF738h */ case   16:  		/* addi R31, R31, 4 */
		/* 820BF738h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820BF738h case   16:*/		return 0x820BF73C;
		  /* 820BF73Ch */ case   17:  		/* cmplw CR6, R29, R22 */
		/* 820BF73Ch case   17:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R22);
		/* 820BF73Ch case   17:*/		return 0x820BF740;
		  /* 820BF740h */ case   18:  		/* bc 12, CR6_LT, -76 */
		/* 820BF740h case   18:*/		if ( regs.CR[6].lt ) { return 0x820BF6F4;  }
		/* 820BF740h case   18:*/		return 0x820BF744;
	}
	return 0x820BF744;
} // Block from 820BF6F8h-820BF744h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820BF744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF744);
		  /* 820BF744h */ case    0:  		/* lwz R29, <#[R1 + 296]> */
		/* 820BF744h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000128) );
		/* 820BF744h case    0:*/		return 0x820BF748;
		  /* 820BF748h */ case    1:  		/* rlwinm R31, R22, 0, 12, 31 */
		/* 820BF748h case    1:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R22);
		/* 820BF748h case    1:*/		return 0x820BF74C;
		  /* 820BF74Ch */ case    2:  		/* li R9, 2 */
		/* 820BF74Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 820BF74Ch case    2:*/		return 0x820BF750;
		  /* 820BF750h */ case    3:  		/* mr R8, R27 */
		/* 820BF750h case    3:*/		regs.R8 = regs.R27;
		/* 820BF750h case    3:*/		return 0x820BF754;
		  /* 820BF754h */ case    4:  		/* mr R7, R26 */
		/* 820BF754h case    4:*/		regs.R7 = regs.R26;
		/* 820BF754h case    4:*/		return 0x820BF758;
		  /* 820BF758h */ case    5:  		/* mr R6, R29 */
		/* 820BF758h case    5:*/		regs.R6 = regs.R29;
		/* 820BF758h case    5:*/		return 0x820BF75C;
		  /* 820BF75Ch */ case    6:  		/* oris R5, R31, 8256 */
		/* 820BF75Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R31,0x2040);
		/* 820BF75Ch case    6:*/		return 0x820BF760;
		  /* 820BF760h */ case    7:  		/* mr R4, R21 */
		/* 820BF760h case    7:*/		regs.R4 = regs.R21;
		/* 820BF760h case    7:*/		return 0x820BF764;
		  /* 820BF764h */ case    8:  		/* mr R3, R30 */
		/* 820BF764h case    8:*/		regs.R3 = regs.R30;
		/* 820BF764h case    8:*/		return 0x820BF768;
		  /* 820BF768h */ case    9:  		/* bl -60512 */
		/* 820BF768h case    9:*/		regs.LR = 0x820BF76C; return 0x820B0B08;
		/* 820BF768h case    9:*/		return 0x820BF76C;
		  /* 820BF76Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 820BF76Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF76Ch case   10:*/		return 0x820BF770;
		  /* 820BF770h */ case   11:  		/* bc 12, CR0_LT, 408 */
		/* 820BF770h case   11:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF770h case   11:*/		return 0x820BF774;
		  /* 820BF774h */ case   12:  		/* lwz R28, <#[R1 + 304]> */
		/* 820BF774h case   12:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000130) );
		/* 820BF774h case   12:*/		return 0x820BF778;
		  /* 820BF778h */ case   13:  		/* mr R8, R22 */
		/* 820BF778h case   13:*/		regs.R8 = regs.R22;
		/* 820BF778h case   13:*/		return 0x820BF77C;
		  /* 820BF77Ch */ case   14:  		/* lwz R27, <#[R1 + 300]> */
		/* 820BF77Ch case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000012C) );
		/* 820BF77Ch case   14:*/		return 0x820BF780;
		  /* 820BF780h */ case   15:  		/* mr R7, R29 */
		/* 820BF780h case   15:*/		regs.R7 = regs.R29;
		/* 820BF780h case   15:*/		return 0x820BF784;
		  /* 820BF784h */ case   16:  		/* mr R6, R28 */
		/* 820BF784h case   16:*/		regs.R6 = regs.R28;
		/* 820BF784h case   16:*/		return 0x820BF788;
		  /* 820BF788h */ case   17:  		/* mr R5, R27 */
		/* 820BF788h case   17:*/		regs.R5 = regs.R27;
		/* 820BF788h case   17:*/		return 0x820BF78C;
		  /* 820BF78Ch */ case   18:  		/* mr R4, R21 */
		/* 820BF78Ch case   18:*/		regs.R4 = regs.R21;
		/* 820BF78Ch case   18:*/		return 0x820BF790;
		  /* 820BF790h */ case   19:  		/* mr R3, R30 */
		/* 820BF790h case   19:*/		regs.R3 = regs.R30;
		/* 820BF790h case   19:*/		return 0x820BF794;
		  /* 820BF794h */ case   20:  		/* bl -46564 */
		/* 820BF794h case   20:*/		regs.LR = 0x820BF798; return 0x820B41B0;
		/* 820BF794h case   20:*/		return 0x820BF798;
		  /* 820BF798h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 820BF798h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF798h case   21:*/		return 0x820BF79C;
		  /* 820BF79Ch */ case   22:  		/* bc 12, CR0_LT, 364 */
		/* 820BF79Ch case   22:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF79Ch case   22:*/		return 0x820BF7A0;
		  /* 820BF7A0h */ case   23:  		/* li R9, 23 */
		/* 820BF7A0h case   23:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 820BF7A0h case   23:*/		return 0x820BF7A4;
		  /* 820BF7A4h */ case   24:  		/* mr R8, R27 */
		/* 820BF7A4h case   24:*/		regs.R8 = regs.R27;
		/* 820BF7A4h case   24:*/		return 0x820BF7A8;
		  /* 820BF7A8h */ case   25:  		/* mr R7, R28 */
		/* 820BF7A8h case   25:*/		regs.R7 = regs.R28;
		/* 820BF7A8h case   25:*/		return 0x820BF7AC;
		  /* 820BF7ACh */ case   26:  		/* mr R6, R24 */
		/* 820BF7ACh case   26:*/		regs.R6 = regs.R24;
		/* 820BF7ACh case   26:*/		return 0x820BF7B0;
		  /* 820BF7B0h */ case   27:  		/* oris R5, R31, 8240 */
		/* 820BF7B0h case   27:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R31,0x2030);
		/* 820BF7B0h case   27:*/		return 0x820BF7B4;
		  /* 820BF7B4h */ case   28:  		/* mr R4, R21 */
		/* 820BF7B4h case   28:*/		regs.R4 = regs.R21;
		/* 820BF7B4h case   28:*/		return 0x820BF7B8;
		  /* 820BF7B8h */ case   29:  		/* mr R3, R30 */
		/* 820BF7B8h case   29:*/		regs.R3 = regs.R30;
		/* 820BF7B8h case   29:*/		return 0x820BF7BC;
		  /* 820BF7BCh */ case   30:  		/* bl -60596 */
		/* 820BF7BCh case   30:*/		regs.LR = 0x820BF7C0; return 0x820B0B08;
		/* 820BF7BCh case   30:*/		return 0x820BF7C0;
		  /* 820BF7C0h */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 820BF7C0h case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF7C0h case   31:*/		return 0x820BF7C4;
		  /* 820BF7C4h */ case   32:  		/* bc 12, CR0_LT, 324 */
		/* 820BF7C4h case   32:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF7C4h case   32:*/		return 0x820BF7C8;
	}
	return 0x820BF7C8;
} // Block from 820BF744h-820BF7C8h (33 instructions)

//////////////////////////////////////////////////////
// Block at 820BF7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF7C8);
		  /* 820BF7C8h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 820BF7C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BF7C8h case    0:*/		return 0x820BF7CC;
		  /* 820BF7CCh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 820BF7CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820BF7E4;  }
		/* 820BF7CCh case    1:*/		return 0x820BF7D0;
		  /* 820BF7D0h */ case    2:  		/* mtspr CTR, R20 */
		/* 820BF7D0h case    2:*/		regs.CTR = regs.R20;
		/* 820BF7D0h case    2:*/		return 0x820BF7D4;
		  /* 820BF7D4h */ case    3:  		/* addi R11, R16, -4 */
		/* 820BF7D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0xFFFFFFFC);
		/* 820BF7D4h case    3:*/		return 0x820BF7D8;
		  /* 820BF7D8h */ case    4:  		/* lwz R10, <#[R30 + 36]> */
		/* 820BF7D8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000024) );
		/* 820BF7D8h case    4:*/		return 0x820BF7DC;
		  /* 820BF7DCh */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BF7DCh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BF7DCh case    5:*/		return 0x820BF7E0;
		  /* 820BF7E0h */ case    6:  		/* bc 16, CR0_LT, -8 */
		/* 820BF7E0h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF7D8;  }
		/* 820BF7E0h case    6:*/		return 0x820BF7E4;
	}
	return 0x820BF7E4;
} // Block from 820BF7C8h-820BF7E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BF7E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF7E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF7E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF7E4);
		  /* 820BF7E4h */ case    0:  		/* li R25, 0 */
		/* 820BF7E4h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 820BF7E4h case    0:*/		return 0x820BF7E8;
		  /* 820BF7E8h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 820BF7E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 820BF7E8h case    1:*/		return 0x820BF7EC;
		  /* 820BF7ECh */ case    2:  		/* bc 12, CR6_EQ, 280 */
		/* 820BF7ECh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BF904;  }
		/* 820BF7ECh case    2:*/		return 0x820BF7F0;
		  /* 820BF7F0h */ case    3:  		/* mullw R11, R17, R20 */
		/* 820BF7F0h case    3:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R17,regs.R20);
		/* 820BF7F0h case    3:*/		return 0x820BF7F4;
		  /* 820BF7F4h */ case    4:  		/* lwz R27, <#[R1 + 316]> */
		/* 820BF7F4h case    4:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000013C) );
		/* 820BF7F4h case    4:*/		return 0x820BF7F8;
		  /* 820BF7F8h */ case    5:  		/* lwz R28, <#[R1 + 312]> */
		/* 820BF7F8h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000138) );
		/* 820BF7F8h case    5:*/		return 0x820BF7FC;
		  /* 820BF7FCh */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820BF7FCh case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820BF7FCh case    6:*/		return 0x820BF800;
		  /* 820BF800h */ case    7:  		/* mr R26, R24 */
		/* 820BF800h case    7:*/		regs.R26 = regs.R24;
		/* 820BF800h case    7:*/		return 0x820BF804;
		  /* 820BF804h */ case    8:  		/* add R29, R11, R19 */
		/* 820BF804h case    8:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R19);
		/* 820BF804h case    8:*/		return 0x820BF808;
		  /* 820BF808h */ case    9:  		/* cmplwi CR6, R20, 0 */
		/* 820BF808h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BF808h case    9:*/		return 0x820BF80C;
		  /* 820BF80Ch */ case   10:  		/* bc 12, CR6_EQ, 72 */
		/* 820BF80Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x820BF854;  }
		/* 820BF80Ch case   10:*/		return 0x820BF810;
		  /* 820BF810h */ case   11:  		/* mr R11, R16 */
		/* 820BF810h case   11:*/		regs.R11 = regs.R16;
		/* 820BF810h case   11:*/		return 0x820BF814;
		  /* 820BF814h */ case   12:  		/* mtspr CTR, R20 */
		/* 820BF814h case   12:*/		regs.CTR = regs.R20;
		/* 820BF814h case   12:*/		return 0x820BF818;
		  /* 820BF818h */ case   13:  		/* subf R10, R16, R28 */
		/* 820BF818h case   13:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R16,regs.R28);
		/* 820BF818h case   13:*/		return 0x820BF81C;
		  /* 820BF81Ch */ case   14:  		/* subf R9, R16, R27 */
		/* 820BF81Ch case   14:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R16,regs.R27);
		/* 820BF81Ch case   14:*/		return 0x820BF820;
		  /* 820BF820h */ case   15:  		/* lwz R8, <#[R26]> */
		/* 820BF820h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000000) );
		/* 820BF820h case   15:*/		return 0x820BF824;
		  /* 820BF824h */ case   16:  		/* stwx R8, <#[R10 + R11]> */
		/* 820BF824h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BF824h case   16:*/		return 0x820BF828;
		  /* 820BF828h */ case   17:  		/* lwz R8, <#[R11]> */
		/* 820BF828h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820BF828h case   17:*/		return 0x820BF82C;
		  /* 820BF82Ch */ case   18:  		/* stwx R8, <#[R9 + R11]> */
		/* 820BF82Ch case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820BF82Ch case   18:*/		return 0x820BF830;
		  /* 820BF830h */ case   19:  		/* addi R11, R11, 4 */
		/* 820BF830h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BF830h case   19:*/		return 0x820BF834;
		  /* 820BF834h */ case   20:  		/* bc 16, CR0_LT, -20 */
		/* 820BF834h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF820;  }
		/* 820BF834h case   20:*/		return 0x820BF838;
		  /* 820BF838h */ case   21:  		/* addi R11, R16, -4 */
		/* 820BF838h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0xFFFFFFFC);
		/* 820BF838h case   21:*/		return 0x820BF83C;
		  /* 820BF83Ch */ case   22:  		/* mr R10, R18 */
		/* 820BF83Ch case   22:*/		regs.R10 = regs.R18;
		/* 820BF83Ch case   22:*/		return 0x820BF840;
		  /* 820BF840h */ case   23:  		/* cmplwi CR0, R20, 0 */
		/* 820BF840h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R20,0x00000000);
		/* 820BF840h case   23:*/		return 0x820BF844;
		  /* 820BF844h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 820BF844h case   24:*/		if ( regs.CR[0].eq ) { return 0x820BF854;  }
		/* 820BF844h case   24:*/		return 0x820BF848;
		  /* 820BF848h */ case   25:  		/* mtspr CTR, R20 */
		/* 820BF848h case   25:*/		regs.CTR = regs.R20;
		/* 820BF848h case   25:*/		return 0x820BF84C;
		  /* 820BF84Ch */ case   26:  		/* stwu R10, <#[R11 + 4]> */
		/* 820BF84Ch case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820BF84Ch case   26:*/		return 0x820BF850;
		  /* 820BF850h */ case   27:  		/* bc 16, CR0_LT, -4 */
		/* 820BF850h case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820BF84C;  }
		/* 820BF850h case   27:*/		return 0x820BF854;
	}
	return 0x820BF854;
} // Block from 820BF7E4h-820BF854h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BF854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF854);
		  /* 820BF854h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 820BF854h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 820BF854h case    0:*/		return 0x820BF858;
		  /* 820BF858h */ case    1:  		/* lwz R11, <#[R11 + 108]> */
		/* 820BF858h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000006C) );
		/* 820BF858h case    1:*/		return 0x820BF85C;
		  /* 820BF85Ch */ case    2:  		/* rlwinm. R10, R11, 0, 8, 8 */
		/* 820BF85Ch case    2:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R11);
		/* 820BF85Ch case    2:*/		return 0x820BF860;
		  /* 820BF860h */ case    3:  		/* bc 12, CR0_EQ, 60 */
		/* 820BF860h case    3:*/		if ( regs.CR[0].eq ) { return 0x820BF89C;  }
		/* 820BF860h case    3:*/		return 0x820BF864;
		  /* 820BF864h */ case    4:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 820BF864h case    4:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 820BF864h case    4:*/		return 0x820BF868;
		  /* 820BF868h */ case    5:  		/* bc 4, CR0_EQ, 52 */
		/* 820BF868h case    5:*/		if ( !regs.CR[0].eq ) { return 0x820BF89C;  }
		/* 820BF868h case    5:*/		return 0x820BF86C;
		  /* 820BF86Ch */ case    6:  		/* mr R9, R20 */
		/* 820BF86Ch case    6:*/		regs.R9 = regs.R20;
		/* 820BF86Ch case    6:*/		return 0x820BF870;
		  /* 820BF870h */ case    7:  		/* mr R8, R28 */
		/* 820BF870h case    7:*/		regs.R8 = regs.R28;
		/* 820BF870h case    7:*/		return 0x820BF874;
		  /* 820BF874h */ case    8:  		/* mr R7, R29 */
		/* 820BF874h case    8:*/		regs.R7 = regs.R29;
		/* 820BF874h case    8:*/		return 0x820BF878;
		  /* 820BF878h */ case    9:  		/* mr R6, R27 */
		/* 820BF878h case    9:*/		regs.R6 = regs.R27;
		/* 820BF878h case    9:*/		return 0x820BF87C;
		  /* 820BF87Ch */ case   10:  		/* mr R5, R16 */
		/* 820BF87Ch case   10:*/		regs.R5 = regs.R16;
		/* 820BF87Ch case   10:*/		return 0x820BF880;
		  /* 820BF880h */ case   11:  		/* mr R4, R21 */
		/* 820BF880h case   11:*/		regs.R4 = regs.R21;
		/* 820BF880h case   11:*/		return 0x820BF884;
		  /* 820BF884h */ case   12:  		/* mr R3, R30 */
		/* 820BF884h case   12:*/		regs.R3 = regs.R30;
		/* 820BF884h case   12:*/		return 0x820BF888;
		  /* 820BF888h */ case   13:  		/* bl -49928 */
		/* 820BF888h case   13:*/		regs.LR = 0x820BF88C; return 0x820B3580;
		/* 820BF888h case   13:*/		return 0x820BF88C;
		  /* 820BF88Ch */ case   14:  		/* b 92 */
		/* 820BF88Ch case   14:*/		return 0x820BF8E8;
		/* 820BF88Ch case   14:*/		return 0x820BF890;
	}
	return 0x820BF890;
} // Block from 820BF854h-820BF890h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820BF890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF890);
		  /* 820BF890h */ case    0:  		/* lis R3, -32761 */
		/* 820BF890h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820BF890h case    0:*/		return 0x820BF894;
		  /* 820BF894h */ case    1:  		/* ori R3, R3, 14 */
		/* 820BF894h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820BF894h case    1:*/		return 0x820BF898;
		  /* 820BF898h */ case    2:  		/* b 112 */
		/* 820BF898h case    2:*/		return 0x820BF908;
		/* 820BF898h case    2:*/		return 0x820BF89C;
	}
	return 0x820BF89C;
} // Block from 820BF890h-820BF89Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BF89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF89C);
		  /* 820BF89Ch */ case    0:  		/* rlwinm R31, R20, 0, 12, 31 */
		/* 820BF89Ch case    0:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R31,regs.R20);
		/* 820BF89Ch case    0:*/		return 0x820BF8A0;
		  /* 820BF8A0h */ case    1:  		/* li R9, 0 */
		/* 820BF8A0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BF8A0h case    1:*/		return 0x820BF8A4;
		  /* 820BF8A4h */ case    2:  		/* mr R8, R29 */
		/* 820BF8A4h case    2:*/		regs.R8 = regs.R29;
		/* 820BF8A4h case    2:*/		return 0x820BF8A8;
		  /* 820BF8A8h */ case    3:  		/* mr R7, R28 */
		/* 820BF8A8h case    3:*/		regs.R7 = regs.R28;
		/* 820BF8A8h case    3:*/		return 0x820BF8AC;
		  /* 820BF8ACh */ case    4:  		/* mr R6, R16 */
		/* 820BF8ACh case    4:*/		regs.R6 = regs.R16;
		/* 820BF8ACh case    4:*/		return 0x820BF8B0;
		  /* 820BF8B0h */ case    5:  		/* oris R5, R31, 8272 */
		/* 820BF8B0h case    5:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R31,0x2050);
		/* 820BF8B0h case    5:*/		return 0x820BF8B4;
		  /* 820BF8B4h */ case    6:  		/* mr R4, R21 */
		/* 820BF8B4h case    6:*/		regs.R4 = regs.R21;
		/* 820BF8B4h case    6:*/		return 0x820BF8B8;
		  /* 820BF8B8h */ case    7:  		/* mr R3, R30 */
		/* 820BF8B8h case    7:*/		regs.R3 = regs.R30;
		/* 820BF8B8h case    7:*/		return 0x820BF8BC;
		  /* 820BF8BCh */ case    8:  		/* bl -60852 */
		/* 820BF8BCh case    8:*/		regs.LR = 0x820BF8C0; return 0x820B0B08;
		/* 820BF8BCh case    8:*/		return 0x820BF8C0;
		  /* 820BF8C0h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820BF8C0h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF8C0h case    9:*/		return 0x820BF8C4;
		  /* 820BF8C4h */ case   10:  		/* bc 12, CR0_LT, 68 */
		/* 820BF8C4h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF8C4h case   10:*/		return 0x820BF8C8;
		  /* 820BF8C8h */ case   11:  		/* li R9, 0 */
		/* 820BF8C8h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BF8C8h case   11:*/		return 0x820BF8CC;
		  /* 820BF8CCh */ case   12:  		/* mr R8, R27 */
		/* 820BF8CCh case   12:*/		regs.R8 = regs.R27;
		/* 820BF8CCh case   12:*/		return 0x820BF8D0;
		  /* 820BF8D0h */ case   13:  		/* mr R7, R16 */
		/* 820BF8D0h case   13:*/		regs.R7 = regs.R16;
		/* 820BF8D0h case   13:*/		return 0x820BF8D4;
		  /* 820BF8D4h */ case   14:  		/* mr R6, R16 */
		/* 820BF8D4h case   14:*/		regs.R6 = regs.R16;
		/* 820BF8D4h case   14:*/		return 0x820BF8D8;
		  /* 820BF8D8h */ case   15:  		/* oris R5, R31, 8256 */
		/* 820BF8D8h case   15:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R31,0x2040);
		/* 820BF8D8h case   15:*/		return 0x820BF8DC;
		  /* 820BF8DCh */ case   16:  		/* mr R4, R21 */
		/* 820BF8DCh case   16:*/		regs.R4 = regs.R21;
		/* 820BF8DCh case   16:*/		return 0x820BF8E0;
		  /* 820BF8E0h */ case   17:  		/* mr R3, R30 */
		/* 820BF8E0h case   17:*/		regs.R3 = regs.R30;
		/* 820BF8E0h case   17:*/		return 0x820BF8E4;
		  /* 820BF8E4h */ case   18:  		/* bl -60892 */
		/* 820BF8E4h case   18:*/		regs.LR = 0x820BF8E8; return 0x820B0B08;
		/* 820BF8E4h case   18:*/		return 0x820BF8E8;
	}
	return 0x820BF8E8;
} // Block from 820BF89Ch-820BF8E8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820BF8E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF8E8);
		  /* 820BF8E8h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820BF8E8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF8E8h case    0:*/		return 0x820BF8EC;
		  /* 820BF8ECh */ case    1:  		/* bc 12, CR0_LT, 28 */
		/* 820BF8ECh case    1:*/		if ( regs.CR[0].lt ) { return 0x820BF908;  }
		/* 820BF8ECh case    1:*/		return 0x820BF8F0;
		  /* 820BF8F0h */ case    2:  		/* addi R25, R25, 1 */
		/* 820BF8F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 820BF8F0h case    2:*/		return 0x820BF8F4;
		  /* 820BF8F4h */ case    3:  		/* add R29, R29, R23 */
		/* 820BF8F4h case    3:*/		cpu::op::add<0>(regs,&regs.R29,regs.R29,regs.R23);
		/* 820BF8F4h case    3:*/		return 0x820BF8F8;
		  /* 820BF8F8h */ case    4:  		/* addi R26, R26, 4 */
		/* 820BF8F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 820BF8F8h case    4:*/		return 0x820BF8FC;
		  /* 820BF8FCh */ case    5:  		/* cmplw CR6, R25, R22 */
		/* 820BF8FCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R22);
		/* 820BF8FCh case    5:*/		return 0x820BF900;
		  /* 820BF900h */ case    6:  		/* bc 12, CR6_LT, -248 */
		/* 820BF900h case    6:*/		if ( regs.CR[6].lt ) { return 0x820BF808;  }
		/* 820BF900h case    6:*/		return 0x820BF904;
	}
	return 0x820BF904;
} // Block from 820BF8E8h-820BF904h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BF904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF904);
		  /* 820BF904h */ case    0:  		/* li R3, 0 */
		/* 820BF904h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820BF904h case    0:*/		return 0x820BF908;
	}
	return 0x820BF908;
} // Block from 820BF904h-820BF908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BF908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF908);
		  /* 820BF908h */ case    0:  		/* addi R1, R1, 480 */
		/* 820BF908h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1E0);
		/* 820BF908h case    0:*/		return 0x820BF90C;
		  /* 820BF90Ch */ case    1:  		/* lfd FR29, <#[R1 - 160]> */
		/* 820BF90Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820BF90Ch case    1:*/		return 0x820BF910;
		  /* 820BF910h */ case    2:  		/* lfd FR30, <#[R1 - 152]> */
		/* 820BF910h case    2:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 820BF910h case    2:*/		return 0x820BF914;
		  /* 820BF914h */ case    3:  		/* lfd FR31, <#[R1 - 144]> */
		/* 820BF914h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 820BF914h case    3:*/		return 0x820BF918;
		  /* 820BF918h */ case    4:  		/* b -190112 */
		/* 820BF918h case    4:*/		return 0x82091278;
		/* 820BF918h case    4:*/		return 0x820BF91C;
		  /* 820BF91Ch */ case    5:  		/* nop */
		/* 820BF91Ch case    5:*/		cpu::op::nop();
		/* 820BF91Ch case    5:*/		return 0x820BF920;
	}
	return 0x820BF920;
} // Block from 820BF908h-820BF920h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BF920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF920);
		  /* 820BF920h */ case    0:  		/* mfspr R12, LR */
		/* 820BF920h case    0:*/		regs.R12 = regs.LR;
		/* 820BF920h case    0:*/		return 0x820BF924;
		  /* 820BF924h */ case    1:  		/* bl -190192 */
		/* 820BF924h case    1:*/		regs.LR = 0x820BF928; return 0x82091234;
		/* 820BF924h case    1:*/		return 0x820BF928;
		  /* 820BF928h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 820BF928h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 820BF928h case    2:*/		return 0x820BF92C;
		  /* 820BF92Ch */ case    3:  		/* mr R31, R3 */
		/* 820BF92Ch case    3:*/		regs.R31 = regs.R3;
		/* 820BF92Ch case    3:*/		return 0x820BF930;
		  /* 820BF930h */ case    4:  		/* mr R25, R4 */
		/* 820BF930h case    4:*/		regs.R25 = regs.R4;
		/* 820BF930h case    4:*/		return 0x820BF934;
		  /* 820BF934h */ case    5:  		/* mr R27, R5 */
		/* 820BF934h case    5:*/		regs.R27 = regs.R5;
		/* 820BF934h case    5:*/		return 0x820BF938;
		  /* 820BF938h */ case    6:  		/* mr R24, R6 */
		/* 820BF938h case    6:*/		regs.R24 = regs.R6;
		/* 820BF938h case    6:*/		return 0x820BF93C;
		  /* 820BF93Ch */ case    7:  		/* mr R26, R7 */
		/* 820BF93Ch case    7:*/		regs.R26 = regs.R7;
		/* 820BF93Ch case    7:*/		return 0x820BF940;
		  /* 820BF940h */ case    8:  		/* li R28, 0 */
		/* 820BF940h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820BF940h case    8:*/		return 0x820BF944;
		  /* 820BF944h */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 820BF944h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820BF944h case    9:*/		return 0x820BF948;
		  /* 820BF948h */ case   10:  		/* bc 12, CR6_EQ, 80 */
		/* 820BF948h case   10:*/		if ( regs.CR[6].eq ) { return 0x820BF998;  }
		/* 820BF948h case   10:*/		return 0x820BF94C;
		  /* 820BF94Ch */ case   11:  		/* cmplw CR6, R7, R5 */
		/* 820BF94Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R5);
		/* 820BF94Ch case   11:*/		return 0x820BF950;
		  /* 820BF950h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 820BF950h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820BF964;  }
		/* 820BF950h case   12:*/		return 0x820BF954;
		  /* 820BF954h */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 820BF954h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 820BF954h case   13:*/		return 0x820BF958;
		  /* 820BF958h */ case   14:  		/* lwz R11, <#[R11 + 112]> */
		/* 820BF958h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000070) );
		/* 820BF958h case   14:*/		return 0x820BF95C;
		  /* 820BF95Ch */ case   15:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 820BF95Ch case   15:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 820BF95Ch case   15:*/		return 0x820BF960;
		  /* 820BF960h */ case   16:  		/* bc 4, CR0_EQ, 56 */
		/* 820BF960h case   16:*/		if ( !regs.CR[0].eq ) { return 0x820BF998;  }
		/* 820BF960h case   16:*/		return 0x820BF964;
	}
	return 0x820BF964;
} // Block from 820BF920h-820BF964h (17 instructions)

//////////////////////////////////////////////////////
// Block at 820BF964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF964);
		  /* 820BF964h */ case    0:  		/* li R5, 0 */
		/* 820BF964h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BF964h case    0:*/		return 0x820BF968;
		  /* 820BF968h */ case    1:  		/* mr R4, R27 */
		/* 820BF968h case    1:*/		regs.R4 = regs.R27;
		/* 820BF968h case    1:*/		return 0x820BF96C;
		  /* 820BF96Ch */ case    2:  		/* mr R3, R31 */
		/* 820BF96Ch case    2:*/		regs.R3 = regs.R31;
		/* 820BF96Ch case    2:*/		return 0x820BF970;
		  /* 820BF970h */ case    3:  		/* bl 304 */
		/* 820BF970h case    3:*/		regs.LR = 0x820BF974; return 0x820BFAA0;
		/* 820BF970h case    3:*/		return 0x820BF974;
		  /* 820BF974h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 820BF974h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BF974h case    4:*/		return 0x820BF978;
		  /* 820BF978h */ case    5:  		/* bc 12, CR0_LT, 288 */
		/* 820BF978h case    5:*/		if ( regs.CR[0].lt ) { return 0x820BFA98;  }
		/* 820BF978h case    5:*/		return 0x820BF97C;
		  /* 820BF97Ch */ case    6:  		/* lwz R11, <#[R31 + 80]> */
		/* 820BF97Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820BF97Ch case    6:*/		return 0x820BF980;
		  /* 820BF980h */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 820BF980h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BF980h case    7:*/		return 0x820BF984;
		  /* 820BF984h */ case    8:  		/* bc 4, CR6_EQ, 76 */
		/* 820BF984h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820BF9D0;  }
		/* 820BF984h case    8:*/		return 0x820BF988;
		  /* 820BF988h */ case    9:  		/* lwz R11, <#[R31 + 84]> */
		/* 820BF988h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820BF988h case    9:*/		return 0x820BF98C;
		  /* 820BF98Ch */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 820BF98Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BF98Ch case   10:*/		return 0x820BF990;
		  /* 820BF990h */ case   11:  		/* bc 4, CR6_EQ, 64 */
		/* 820BF990h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820BF9D0;  }
		/* 820BF990h case   11:*/		return 0x820BF994;
		  /* 820BF994h */ case   12:  		/* mr R27, R28 */
		/* 820BF994h case   12:*/		regs.R27 = regs.R28;
		/* 820BF994h case   12:*/		return 0x820BF998;
	}
	return 0x820BF998;
} // Block from 820BF964h-820BF998h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820BF998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF998);
		  /* 820BF998h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 820BF998h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820BF998h case    0:*/		return 0x820BF99C;
		  /* 820BF99Ch */ case    1:  		/* lis R4, 9345 */
		/* 820BF99Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820BF99Ch case    1:*/		return 0x820BF9A0;
		  /* 820BF9A0h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 820BF9A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820BF9A0h case    2:*/		return 0x820BF9A4;
		  /* 820BF9A4h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 820BF9A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 820BF9A4h case    3:*/		return 0x820BF9A8;
		  /* 820BF9A8h */ case    4:  		/* lwz R23, <#[R10 + 8]> */
		/* 820BF9A8h case    4:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R10 + 0x00000008) );
		/* 820BF9A8h case    4:*/		return 0x820BF9AC;
		  /* 820BF9ACh */ case    5:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 820BF9ACh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 820BF9ACh case    5:*/		return 0x820BF9B0;
		  /* 820BF9B0h */ case    6:  		/* lwz R22, <#[R10 + 12]> */
		/* 820BF9B0h case    6:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R10 + 0x0000000C) );
		/* 820BF9B0h case    6:*/		return 0x820BF9B4;
		  /* 820BF9B4h */ case    7:  		/* mr R3, R29 */
		/* 820BF9B4h case    7:*/		regs.R3 = regs.R29;
		/* 820BF9B4h case    7:*/		return 0x820BF9B8;
		  /* 820BF9B8h */ case    8:  		/* bl -227256 */
		/* 820BF9B8h case    8:*/		regs.LR = 0x820BF9BC; return 0x82088200;
		/* 820BF9B8h case    8:*/		return 0x820BF9BC;
		  /* 820BF9BCh */ case    9:  		/* or. R30, R3, R3 */
		/* 820BF9BCh case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 820BF9BCh case    9:*/		return 0x820BF9C0;
		  /* 820BF9C0h */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 820BF9C0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x820BF9D8;  }
		/* 820BF9C0h case   10:*/		return 0x820BF9C4;
		  /* 820BF9C4h */ case   11:  		/* lis R29, -32761 */
		/* 820BF9C4h case   11:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8007);
		/* 820BF9C4h case   11:*/		return 0x820BF9C8;
		  /* 820BF9C8h */ case   12:  		/* ori R29, R29, 14 */
		/* 820BF9C8h case   12:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0xE);
		/* 820BF9C8h case   12:*/		return 0x820BF9CC;
		  /* 820BF9CCh */ case   13:  		/* b 188 */
		/* 820BF9CCh case   13:*/		return 0x820BFA88;
		/* 820BF9CCh case   13:*/		return 0x820BF9D0;
	}
	return 0x820BF9D0;
} // Block from 820BF998h-820BF9D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820BF9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF9D0);
		  /* 820BF9D0h */ case    0:  		/* li R3, 0 */
		/* 820BF9D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820BF9D0h case    0:*/		return 0x820BF9D4;
		  /* 820BF9D4h */ case    1:  		/* b 196 */
		/* 820BF9D4h case    1:*/		return 0x820BFA98;
		/* 820BF9D4h case    1:*/		return 0x820BF9D8;
	}
	return 0x820BF9D8;
} // Block from 820BF9D0h-820BF9D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BF9D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BF9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BF9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BF9D8);
		  /* 820BF9D8h */ case    0:  		/* mr R5, R29 */
		/* 820BF9D8h case    0:*/		regs.R5 = regs.R29;
		/* 820BF9D8h case    0:*/		return 0x820BF9DC;
		  /* 820BF9DCh */ case    1:  		/* lwz R4, <#[R31 + 24]> */
		/* 820BF9DCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000018) );
		/* 820BF9DCh case    1:*/		return 0x820BF9E0;
		  /* 820BF9E0h */ case    2:  		/* mr R3, R30 */
		/* 820BF9E0h case    2:*/		regs.R3 = regs.R30;
		/* 820BF9E0h case    2:*/		return 0x820BF9E4;
		  /* 820BF9E4h */ case    3:  		/* bl -188468 */
		/* 820BF9E4h case    3:*/		regs.LR = 0x820BF9E8; return 0x820919B0;
		/* 820BF9E4h case    3:*/		return 0x820BF9E8;
		  /* 820BF9E8h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 820BF9E8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820BF9E8h case    4:*/		return 0x820BF9EC;
		  /* 820BF9ECh */ case    5:  		/* lwz R11, <#[R11 + 92]> */
		/* 820BF9ECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000005C) );
		/* 820BF9ECh case    5:*/		return 0x820BF9F0;
		  /* 820BF9F0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 820BF9F0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BF9F0h case    6:*/		return 0x820BF9F4;
		  /* 820BF9F4h */ case    7:  		/* bc 12, CR6_EQ, 112 */
		/* 820BF9F4h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BFA64;  }
		/* 820BF9F4h case    7:*/		return 0x820BF9F8;
		  /* 820BF9F8h */ case    8:  		/* li R11, 1 */
		/* 820BF9F8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820BF9F8h case    8:*/		return 0x820BF9FC;
		  /* 820BF9FCh */ case    9:  		/* lwz R21, <#[R31 + 88]> */
		/* 820BF9FCh case    9:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R31 + 0x00000058) );
		/* 820BF9FCh case    9:*/		return 0x820BFA00;
		  /* 820BFA00h */ case   10:  		/* lwz R20, <#[R31 + 92]> */
		/* 820BFA00h case   10:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R31 + 0x0000005C) );
		/* 820BFA00h case   10:*/		return 0x820BFA04;
		  /* 820BFA04h */ case   11:  		/* mr R8, R30 */
		/* 820BFA04h case   11:*/		regs.R8 = regs.R30;
		/* 820BFA04h case   11:*/		return 0x820BFA08;
		  /* 820BFA08h */ case   12:  		/* lwz R19, <#[R31 + 96]> */
		/* 820BFA08h case   12:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R31 + 0x00000060) );
		/* 820BFA08h case   12:*/		return 0x820BFA0C;
		  /* 820BFA0Ch */ case   13:  		/* mr R7, R26 */
		/* 820BFA0Ch case   13:*/		regs.R7 = regs.R26;
		/* 820BFA0Ch case   13:*/		return 0x820BFA10;
		  /* 820BFA10h */ case   14:  		/* stw R11, <#[R31 + 88]> */
		/* 820BFA10h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 820BFA10h case   14:*/		return 0x820BFA14;
		  /* 820BFA14h */ case   15:  		/* mr R6, R24 */
		/* 820BFA14h case   15:*/		regs.R6 = regs.R24;
		/* 820BFA14h case   15:*/		return 0x820BFA18;
		  /* 820BFA18h */ case   16:  		/* stw R28, <#[R31 + 92]> */
		/* 820BFA18h case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000005C) );
		/* 820BFA18h case   16:*/		return 0x820BFA1C;
		  /* 820BFA1Ch */ case   17:  		/* mr R5, R27 */
		/* 820BFA1Ch case   17:*/		regs.R5 = regs.R27;
		/* 820BFA1Ch case   17:*/		return 0x820BFA20;
		  /* 820BFA20h */ case   18:  		/* stw R28, <#[R31 + 96]> */
		/* 820BFA20h case   18:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000060) );
		/* 820BFA20h case   18:*/		return 0x820BFA24;
		  /* 820BFA24h */ case   19:  		/* mr R4, R25 */
		/* 820BFA24h case   19:*/		regs.R4 = regs.R25;
		/* 820BFA24h case   19:*/		return 0x820BFA28;
		  /* 820BFA28h */ case   20:  		/* mr R3, R31 */
		/* 820BFA28h case   20:*/		regs.R3 = regs.R31;
		/* 820BFA28h case   20:*/		return 0x820BFA2C;
		  /* 820BFA2Ch */ case   21:  		/* bl -39236 */
		/* 820BFA2Ch case   21:*/		regs.LR = 0x820BFA30; return 0x820B60E8;
		/* 820BFA2Ch case   21:*/		return 0x820BFA30;
		  /* 820BFA30h */ case   22:  		/* or. R29, R3, R3 */
		/* 820BFA30h case   22:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820BFA30h case   22:*/		return 0x820BFA34;
		  /* 820BFA34h */ case   23:  		/* stw R21, <#[R31 + 88]> */
		/* 820BFA34h case   23:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000058) );
		/* 820BFA34h case   23:*/		return 0x820BFA38;
		  /* 820BFA38h */ case   24:  		/* stw R20, <#[R31 + 92]> */
		/* 820BFA38h case   24:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x0000005C) );
		/* 820BFA38h case   24:*/		return 0x820BFA3C;
		  /* 820BFA3Ch */ case   25:  		/* stw R28, <#[R31 + 76]> */
		/* 820BFA3Ch case   25:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000004C) );
		/* 820BFA3Ch case   25:*/		return 0x820BFA40;
		  /* 820BFA40h */ case   26:  		/* stw R28, <#[R31 + 80]> */
		/* 820BFA40h case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000050) );
		/* 820BFA40h case   26:*/		return 0x820BFA44;
		  /* 820BFA44h */ case   27:  		/* stw R28, <#[R31 + 84]> */
		/* 820BFA44h case   27:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000054) );
		/* 820BFA44h case   27:*/		return 0x820BFA48;
		  /* 820BFA48h */ case   28:  		/* stw R19, <#[R31 + 96]> */
		/* 820BFA48h case   28:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000060) );
		/* 820BFA48h case   28:*/		return 0x820BFA4C;
		  /* 820BFA4Ch */ case   29:  		/* bc 4, CR0_LT, 60 */
		/* 820BFA4Ch case   29:*/		if ( !regs.CR[0].lt ) { return 0x820BFA88;  }
		/* 820BFA4Ch case   29:*/		return 0x820BFA50;
		  /* 820BFA50h */ case   30:  		/* mr R6, R30 */
		/* 820BFA50h case   30:*/		regs.R6 = regs.R30;
		/* 820BFA50h case   30:*/		return 0x820BFA54;
		  /* 820BFA54h */ case   31:  		/* mr R5, R22 */
		/* 820BFA54h case   31:*/		regs.R5 = regs.R22;
		/* 820BFA54h case   31:*/		return 0x820BFA58;
		  /* 820BFA58h */ case   32:  		/* mr R4, R23 */
		/* 820BFA58h case   32:*/		regs.R4 = regs.R23;
		/* 820BFA58h case   32:*/		return 0x820BFA5C;
		  /* 820BFA5Ch */ case   33:  		/* mr R3, R31 */
		/* 820BFA5Ch case   33:*/		regs.R3 = regs.R31;
		/* 820BFA5Ch case   33:*/		return 0x820BFA60;
		  /* 820BFA60h */ case   34:  		/* bl -61840 */
		/* 820BFA60h case   34:*/		regs.LR = 0x820BFA64; return 0x820B08D0;
		/* 820BFA60h case   34:*/		return 0x820BFA64;
	}
	return 0x820BFA64;
} // Block from 820BF9D8h-820BFA64h (35 instructions)

//////////////////////////////////////////////////////
// Block at 820BFA64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFA64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFA64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFA64);
		  /* 820BFA64h */ case    0:  		/* mr R8, R30 */
		/* 820BFA64h case    0:*/		regs.R8 = regs.R30;
		/* 820BFA64h case    0:*/		return 0x820BFA68;
		  /* 820BFA68h */ case    1:  		/* mr R7, R26 */
		/* 820BFA68h case    1:*/		regs.R7 = regs.R26;
		/* 820BFA68h case    1:*/		return 0x820BFA6C;
		  /* 820BFA6Ch */ case    2:  		/* mr R6, R24 */
		/* 820BFA6Ch case    2:*/		regs.R6 = regs.R24;
		/* 820BFA6Ch case    2:*/		return 0x820BFA70;
		  /* 820BFA70h */ case    3:  		/* mr R5, R27 */
		/* 820BFA70h case    3:*/		regs.R5 = regs.R27;
		/* 820BFA70h case    3:*/		return 0x820BFA74;
		  /* 820BFA74h */ case    4:  		/* mr R4, R25 */
		/* 820BFA74h case    4:*/		regs.R4 = regs.R25;
		/* 820BFA74h case    4:*/		return 0x820BFA78;
		  /* 820BFA78h */ case    5:  		/* mr R3, R31 */
		/* 820BFA78h case    5:*/		regs.R3 = regs.R31;
		/* 820BFA78h case    5:*/		return 0x820BFA7C;
		  /* 820BFA7Ch */ case    6:  		/* bl -34820 */
		/* 820BFA7Ch case    6:*/		regs.LR = 0x820BFA80; return 0x820B7278;
		/* 820BFA7Ch case    6:*/		return 0x820BFA80;
		  /* 820BFA80h */ case    7:  		/* srawi R11, R3, 31 */
		/* 820BFA80h case    7:*/		cpu::op::srawi<0,31>(regs,&regs.R11,regs.R3);
		/* 820BFA80h case    7:*/		return 0x820BFA84;
		  /* 820BFA84h */ case    8:  		/* and R29, R11, R3 */
		/* 820BFA84h case    8:*/		cpu::op::and<0>(regs,&regs.R29,regs.R11,regs.R3);
		/* 820BFA84h case    8:*/		return 0x820BFA88;
	}
	return 0x820BFA88;
} // Block from 820BFA64h-820BFA88h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820BFA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFA88);
		  /* 820BFA88h */ case    0:  		/* lis R4, 9345 */
		/* 820BFA88h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820BFA88h case    0:*/		return 0x820BFA8C;
		  /* 820BFA8Ch */ case    1:  		/* mr R3, R30 */
		/* 820BFA8Ch case    1:*/		regs.R3 = regs.R30;
		/* 820BFA8Ch case    1:*/		return 0x820BFA90;
		  /* 820BFA90h */ case    2:  		/* bl -227160 */
		/* 820BFA90h case    2:*/		regs.LR = 0x820BFA94; return 0x82088338;
		/* 820BFA90h case    2:*/		return 0x820BFA94;
		  /* 820BFA94h */ case    3:  		/* mr R3, R29 */
		/* 820BFA94h case    3:*/		regs.R3 = regs.R29;
		/* 820BFA94h case    3:*/		return 0x820BFA98;
	}
	return 0x820BFA98;
} // Block from 820BFA88h-820BFA98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BFA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFA98);
		  /* 820BFA98h */ case    0:  		/* addi R1, R1, 192 */
		/* 820BFA98h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 820BFA98h case    0:*/		return 0x820BFA9C;
		  /* 820BFA9Ch */ case    1:  		/* b -190488 */
		/* 820BFA9Ch case    1:*/		return 0x82091284;
		/* 820BFA9Ch case    1:*/		return 0x820BFAA0;
	}
	return 0x820BFAA0;
} // Block from 820BFA98h-820BFAA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BFAA0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFAA0);
		  /* 820BFAA0h */ case    0:  		/* mfspr R12, LR */
		/* 820BFAA0h case    0:*/		regs.R12 = regs.LR;
		/* 820BFAA0h case    0:*/		return 0x820BFAA4;
		  /* 820BFAA4h */ case    1:  		/* bl -190572 */
		/* 820BFAA4h case    1:*/		regs.LR = 0x820BFAA8; return 0x82091238;
		/* 820BFAA4h case    1:*/		return 0x820BFAA8;
		  /* 820BFAA8h */ case    2:  		/* stfd FR31, <#[R1 - 112]> */
		/* 820BFAA8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 820BFAA8h case    2:*/		return 0x820BFAAC;
		  /* 820BFAACh */ case    3:  		/* stwu R1, <#[R1 - 272]> */
		/* 820BFAACh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 820BFAACh case    3:*/		return 0x820BFAB0;
		  /* 820BFAB0h */ case    4:  		/* mr R31, R3 */
		/* 820BFAB0h case    4:*/		regs.R31 = regs.R3;
		/* 820BFAB0h case    4:*/		return 0x820BFAB4;
		  /* 820BFAB4h */ case    5:  		/* mr R28, R4 */
		/* 820BFAB4h case    5:*/		regs.R28 = regs.R4;
		/* 820BFAB4h case    5:*/		return 0x820BFAB8;
		  /* 820BFAB8h */ case    6:  		/* mr R20, R5 */
		/* 820BFAB8h case    6:*/		regs.R20 = regs.R5;
		/* 820BFAB8h case    6:*/		return 0x820BFABC;
		  /* 820BFABCh */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 820BFABCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820BFABCh case    7:*/		return 0x820BFAC0;
		  /* 820BFAC0h */ case    8:  		/* bc 12, CR6_EQ, 1300 */
		/* 820BFAC0h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BFFD4;  }
		/* 820BFAC0h case    8:*/		return 0x820BFAC4;
		  /* 820BFAC4h */ case    9:  		/* lwz R11, <#[R3 + 80]> */
		/* 820BFAC4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000050) );
		/* 820BFAC4h case    9:*/		return 0x820BFAC8;
		  /* 820BFAC8h */ case   10:  		/* cmpwi CR6, R11, 0 */
		/* 820BFAC8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BFAC8h case   10:*/		return 0x820BFACC;
		  /* 820BFACCh */ case   11:  		/* bc 4, CR6_EQ, 1288 */
		/* 820BFACCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x820BFFD4;  }
		/* 820BFACCh case   11:*/		return 0x820BFAD0;
		  /* 820BFAD0h */ case   12:  		/* lwz R11, <#[R3 + 84]> */
		/* 820BFAD0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000054) );
		/* 820BFAD0h case   12:*/		return 0x820BFAD4;
		  /* 820BFAD4h */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 820BFAD4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BFAD4h case   13:*/		return 0x820BFAD8;
		  /* 820BFAD8h */ case   14:  		/* bc 4, CR6_EQ, 1276 */
		/* 820BFAD8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820BFFD4;  }
		/* 820BFAD8h case   14:*/		return 0x820BFADC;
		  /* 820BFADCh */ case   15:  		/* lwz R10, <#[R3 + 8]> */
		/* 820BFADCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 820BFADCh case   15:*/		return 0x820BFAE0;
		  /* 820BFAE0h */ case   16:  		/* lwz R11, <#[R4 + 4]> */
		/* 820BFAE0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 820BFAE0h case   16:*/		return 0x820BFAE4;
		  /* 820BFAE4h */ case   17:  		/* cmpwi CR6, R11, 6 */
		/* 820BFAE4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 820BFAE4h case   17:*/		return 0x820BFAE8;
		  /* 820BFAE8h */ case   18:  		/* lwz R30, <#[R10 + 12]> */
		/* 820BFAE8h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x0000000C) );
		/* 820BFAE8h case   18:*/		return 0x820BFAEC;
		  /* 820BFAECh */ case   19:  		/* mr R21, R30 */
		/* 820BFAECh case   19:*/		regs.R21 = regs.R30;
		/* 820BFAECh case   19:*/		return 0x820BFAF0;
		  /* 820BFAF0h */ case   20:  		/* bc 4, CR6_EQ, 496 */
		/* 820BFAF0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x820BFCE0;  }
		/* 820BFAF0h case   20:*/		return 0x820BFAF4;
		  /* 820BFAF4h */ case   21:  		/* lwz R11, <#[R4 + 16]> */
		/* 820BFAF4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 820BFAF4h case   21:*/		return 0x820BFAF8;
		  /* 820BFAF8h */ case   22:  		/* cmpwi CR6, R11, 1 */
		/* 820BFAF8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 820BFAF8h case   22:*/		return 0x820BFAFC;
		  /* 820BFAFCh */ case   23:  		/* bc 4, CR6_EQ, 104 */
		/* 820BFAFCh case   23:*/		if ( !regs.CR[6].eq ) { return 0x820BFB64;  }
		/* 820BFAFCh case   23:*/		return 0x820BFB00;
		  /* 820BFB00h */ case   24:  		/* lwz R11, <#[R4 + 24]> */
		/* 820BFB00h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000018) );
		/* 820BFB00h case   24:*/		return 0x820BFB04;
		  /* 820BFB04h */ case   25:  		/* lwz R10, <#[R11 + 40]> */
		/* 820BFB04h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 820BFB04h case   25:*/		return 0x820BFB08;
		  /* 820BFB08h */ case   26:  		/* lwz R26, <#[R11 + 16]> */
		/* 820BFB08h case   26:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000010) );
		/* 820BFB08h case   26:*/		return 0x820BFB0C;
		  /* 820BFB0Ch */ case   27:  		/* lwz R25, <#[R11 + 20]> */
		/* 820BFB0Ch case   27:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000014) );
		/* 820BFB0Ch case   27:*/		return 0x820BFB10;
		  /* 820BFB10h */ case   28:  		/* cmpwi CR6, R10, 0 */
		/* 820BFB10h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820BFB10h case   28:*/		return 0x820BFB14;
		  /* 820BFB14h */ case   29:  		/* bc 4, CR6_EQ, 20 */
		/* 820BFB14h case   29:*/		if ( !regs.CR[6].eq ) { return 0x820BFB28;  }
		/* 820BFB14h case   29:*/		return 0x820BFB18;
		  /* 820BFB18h */ case   30:  		/* lwz R9, <#[R11 + 44]> */
		/* 820BFB18h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000002C) );
		/* 820BFB18h case   30:*/		return 0x820BFB1C;
		  /* 820BFB1Ch */ case   31:  		/* li R22, 1 */
		/* 820BFB1Ch case   31:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 820BFB1Ch case   31:*/		return 0x820BFB20;
		  /* 820BFB20h */ case   32:  		/* rlwinm. R9, R9, 0, 25, 25 */
		/* 820BFB20h case   32:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R9,regs.R9);
		/* 820BFB20h case   32:*/		return 0x820BFB24;
		  /* 820BFB24h */ case   33:  		/* bc 4, CR0_EQ, 8 */
		/* 820BFB24h case   33:*/		if ( !regs.CR[0].eq ) { return 0x820BFB2C;  }
		/* 820BFB24h case   33:*/		return 0x820BFB28;
	}
	return 0x820BFB28;
} // Block from 820BFAA0h-820BFB28h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820BFB28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFB28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFB28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFB28);
		  /* 820BFB28h */ case    0:  		/* li R22, 0 */
		/* 820BFB28h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 820BFB28h case    0:*/		return 0x820BFB2C;
	}
	return 0x820BFB2C;
} // Block from 820BFB28h-820BFB2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BFB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFB2C);
		  /* 820BFB2Ch */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 820BFB2Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820BFB2Ch case    0:*/		return 0x820BFB30;
		  /* 820BFB30h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820BFB30h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BFB44;  }
		/* 820BFB30h case    1:*/		return 0x820BFB34;
		  /* 820BFB34h */ case    2:  		/* lwz R10, <#[R11 + 44]> */
		/* 820BFB34h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 820BFB34h case    2:*/		return 0x820BFB38;
		  /* 820BFB38h */ case    3:  		/* li R24, 1 */
		/* 820BFB38h case    3:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 820BFB38h case    3:*/		return 0x820BFB3C;
		  /* 820BFB3Ch */ case    4:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 820BFB3Ch case    4:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 820BFB3Ch case    4:*/		return 0x820BFB40;
		  /* 820BFB40h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 820BFB40h case    5:*/		if ( !regs.CR[0].eq ) { return 0x820BFB48;  }
		/* 820BFB40h case    5:*/		return 0x820BFB44;
	}
	return 0x820BFB44;
} // Block from 820BFB2Ch-820BFB44h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BFB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFB44);
		  /* 820BFB44h */ case    0:  		/* li R24, 0 */
		/* 820BFB44h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820BFB44h case    0:*/		return 0x820BFB48;
	}
	return 0x820BFB48;
} // Block from 820BFB44h-820BFB48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BFB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFB48);
		  /* 820BFB48h */ case    0:  		/* lwz R10, <#[R11 + 44]> */
		/* 820BFB48h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 820BFB48h case    0:*/		return 0x820BFB4C;
		  /* 820BFB4Ch */ case    1:  		/* lwz R27, <#[R11 + 48]> */
		/* 820BFB4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000030) );
		/* 820BFB4Ch case    1:*/		return 0x820BFB50;
		  /* 820BFB50h */ case    2:  		/* rlwinm R9, R10, 0, 22, 19 */
		/* 820BFB50h case    2:*/		cpu::op::rlwinm<0,0,22,19>(regs,&regs.R9,regs.R10);
		/* 820BFB50h case    2:*/		return 0x820BFB54;
		  /* 820BFB54h */ case    3:  		/* lwz R23, <#[R11 + 64]> */
		/* 820BFB54h case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x00000040) );
		/* 820BFB54h case    3:*/		return 0x820BFB58;
		  /* 820BFB58h */ case    4:  		/* rlwinm R10, R10, 0, 24, 24 */
		/* 820BFB58h case    4:*/		cpu::op::rlwinm<0,0,24,24>(regs,&regs.R10,regs.R10);
		/* 820BFB58h case    4:*/		return 0x820BFB5C;
		  /* 820BFB5Ch */ case    5:  		/* stw R9, <#[R11 + 44]> */
		/* 820BFB5Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000002C) );
		/* 820BFB5Ch case    5:*/		return 0x820BFB60;
		  /* 820BFB60h */ case    6:  		/* b 56 */
		/* 820BFB60h case    6:*/		return 0x820BFB98;
		/* 820BFB60h case    6:*/		return 0x820BFB64;
	}
	return 0x820BFB64;
} // Block from 820BFB48h-820BFB64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820BFB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFB64);
		  /* 820BFB64h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 820BFB64h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 820BFB64h case    0:*/		return 0x820BFB68;
		  /* 820BFB68h */ case    1:  		/* bc 4, CR6_EQ, 1132 */
		/* 820BFB68h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BFFD4;  }
		/* 820BFB68h case    1:*/		return 0x820BFB6C;
		  /* 820BFB6Ch */ case    2:  		/* lwz R11, <#[R28 + 24]> */
		/* 820BFB6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 820BFB6Ch case    2:*/		return 0x820BFB70;
		  /* 820BFB70h */ case    3:  		/* li R22, 0 */
		/* 820BFB70h case    3:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 820BFB70h case    3:*/		return 0x820BFB74;
		  /* 820BFB74h */ case    4:  		/* li R24, 0 */
		/* 820BFB74h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820BFB74h case    4:*/		return 0x820BFB78;
		  /* 820BFB78h */ case    5:  		/* li R10, 0 */
		/* 820BFB78h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820BFB78h case    5:*/		return 0x820BFB7C;
		  /* 820BFB7Ch */ case    6:  		/* lwz R9, <#[R11 + 32]> */
		/* 820BFB7Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 820BFB7Ch case    6:*/		return 0x820BFB80;
		  /* 820BFB80h */ case    7:  		/* lwz R26, <#[R11 + 16]> */
		/* 820BFB80h case    7:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000010) );
		/* 820BFB80h case    7:*/		return 0x820BFB84;
		  /* 820BFB84h */ case    8:  		/* rlwinm R9, R9, 0, 22, 19 */
		/* 820BFB84h case    8:*/		cpu::op::rlwinm<0,0,22,19>(regs,&regs.R9,regs.R9);
		/* 820BFB84h case    8:*/		return 0x820BFB88;
		  /* 820BFB88h */ case    9:  		/* lwz R25, <#[R11 + 20]> */
		/* 820BFB88h case    9:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000014) );
		/* 820BFB88h case    9:*/		return 0x820BFB8C;
		  /* 820BFB8Ch */ case   10:  		/* lwz R27, <#[R11 + 40]> */
		/* 820BFB8Ch case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000028) );
		/* 820BFB8Ch case   10:*/		return 0x820BFB90;
		  /* 820BFB90h */ case   11:  		/* lwz R23, <#[R11 + 60]> */
		/* 820BFB90h case   11:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x0000003C) );
		/* 820BFB90h case   11:*/		return 0x820BFB94;
		  /* 820BFB94h */ case   12:  		/* stw R9, <#[R11 + 32]> */
		/* 820BFB94h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 820BFB94h case   12:*/		return 0x820BFB98;
	}
	return 0x820BFB98;
} // Block from 820BFB64h-820BFB98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820BFB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFB98);
		  /* 820BFB98h */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 820BFB98h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820BFB98h case    0:*/		return 0x820BFB9C;
		  /* 820BFB9Ch */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 820BFB9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820BFBC4;  }
		/* 820BFB9Ch case    1:*/		return 0x820BFBA0;
		  /* 820BFBA0h */ case    2:  		/* lwz R9, <#[R28 + 24]> */
		/* 820BFBA0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000018) );
		/* 820BFBA0h case    2:*/		return 0x820BFBA4;
		  /* 820BFBA4h */ case    3:  		/* rlwinm R10, R26, 2, 0, 29 */
		/* 820BFBA4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R26);
		/* 820BFBA4h case    3:*/		return 0x820BFBA8;
		  /* 820BFBA8h */ case    4:  		/* lwz R11, <#[R31 + 24]> */
		/* 820BFBA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820BFBA8h case    4:*/		return 0x820BFBAC;
		  /* 820BFBACh */ case    5:  		/* li R6, 0 */
		/* 820BFBACh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BFBACh case    5:*/		return 0x820BFBB0;
		  /* 820BFBB0h */ case    6:  		/* mr R3, R31 */
		/* 820BFBB0h case    6:*/		regs.R3 = regs.R31;
		/* 820BFBB0h case    6:*/		return 0x820BFBB4;
		  /* 820BFBB4h */ case    7:  		/* add R5, R10, R11 */
		/* 820BFBB4h case    7:*/		cpu::op::add<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 820BFBB4h case    7:*/		return 0x820BFBB8;
		  /* 820BFBB8h */ case    8:  		/* lwz R4, <#[R9 + 56]> */
		/* 820BFBB8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000038) );
		/* 820BFBB8h case    8:*/		return 0x820BFBBC;
		  /* 820BFBBCh */ case    9:  		/* bl 4908 */
		/* 820BFBBCh case    9:*/		regs.LR = 0x820BFBC0; return 0x820C0EE8;
		/* 820BFBBCh case    9:*/		return 0x820BFBC0;
		  /* 820BFBC0h */ case   10:  		/* b 844 */
		/* 820BFBC0h case   10:*/		return 0x820BFF0C;
		/* 820BFBC0h case   10:*/		return 0x820BFBC4;
	}
	return 0x820BFBC4;
} // Block from 820BFB98h-820BFBC4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820BFBC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFBC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFBC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFBC4);
		  /* 820BFBC4h */ case    0:  		/* li R30, 0 */
		/* 820BFBC4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 820BFBC4h case    0:*/		return 0x820BFBC8;
		  /* 820BFBC8h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 820BFBC8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 820BFBC8h case    1:*/		return 0x820BFBCC;
		  /* 820BFBCCh */ case    2:  		/* bc 12, CR6_EQ, 164 */
		/* 820BFBCCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BFC70;  }
		/* 820BFBCCh case    2:*/		return 0x820BFBD0;
		  /* 820BFBD0h */ case    3:  		/* lis R11, -32256 */
		/* 820BFBD0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820BFBD0h case    3:*/		return 0x820BFBD4;
		  /* 820BFBD4h */ case    4:  		/* rlwinm R29, R26, 2, 0, 29 */
		/* 820BFBD4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R26);
		/* 820BFBD4h case    4:*/		return 0x820BFBD8;
		  /* 820BFBD8h */ case    5:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 820BFBD8h case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 820BFBD8h case    5:*/		return 0x820BFBDC;
		  /* 820BFBDCh */ case    6:  		/* cmpwi CR6, R24, 0 */
		/* 820BFBDCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 820BFBDCh case    6:*/		return 0x820BFBE0;
		  /* 820BFBE0h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 820BFBE0h case    7:*/		if ( regs.CR[6].eq ) { return 0x820BFBF4;  }
		/* 820BFBE0h case    7:*/		return 0x820BFBE4;
		  /* 820BFBE4h */ case    8:  		/* lwz R11, <#[R31 + 24]> */
		/* 820BFBE4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820BFBE4h case    8:*/		return 0x820BFBE8;
		  /* 820BFBE8h */ case    9:  		/* lwzx R11, <#[R11 + R29]> */
		/* 820BFBE8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820BFBE8h case    9:*/		return 0x820BFBEC;
		  /* 820BFBECh */ case   10:  		/* cmpwi CR6, R11, -1 */
		/* 820BFBECh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820BFBECh case   10:*/		return 0x820BFBF0;
		  /* 820BFBF0h */ case   11:  		/* bc 4, CR6_EQ, 112 */
		/* 820BFBF0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x820BFC60;  }
		/* 820BFBF0h case   11:*/		return 0x820BFBF4;
	}
	return 0x820BFBF4;
} // Block from 820BFBC4h-820BFBF4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820BFBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFBF4);
		  /* 820BFBF4h */ case    0:  		/* lwz R3, <#[R31 + 8]> */
		/* 820BFBF4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFBF4h case    0:*/		return 0x820BFBF8;
		  /* 820BFBF8h */ case    1:  		/* cmpwi CR6, R22, 0 */
		/* 820BFBF8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820BFBF8h case    1:*/		return 0x820BFBFC;
		  /* 820BFBFCh */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 820BFBFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820BFC08;  }
		/* 820BFBFCh case    2:*/		return 0x820BFC00;
		  /* 820BFC00h */ case    3:  		/* lwz R4, <#[R3 + 124]> */
		/* 820BFC00h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000007C) );
		/* 820BFC00h case    3:*/		return 0x820BFC04;
		  /* 820BFC04h */ case    4:  		/* b 8 */
		/* 820BFC04h case    4:*/		return 0x820BFC0C;
		/* 820BFC04h case    4:*/		return 0x820BFC08;
	}
	return 0x820BFC08;
} // Block from 820BFBF4h-820BFC08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BFC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFC08);
		  /* 820BFC08h */ case    0:  		/* lwz R4, <#[R3 + 116]> */
		/* 820BFC08h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000074) );
		/* 820BFC08h case    0:*/		return 0x820BFC0C;
	}
	return 0x820BFC0C;
} // Block from 820BFC08h-820BFC0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BFC0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFC0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFC0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFC0C);
		  /* 820BFC0Ch */ case    0:  		/* li R6, 0 */
		/* 820BFC0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BFC0Ch case    0:*/		return 0x820BFC10;
		  /* 820BFC10h */ case    1:  		/* fmr FR1, FR31 */
		/* 820BFC10h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 820BFC10h case    1:*/		return 0x820BFC14;
		  /* 820BFC14h */ case    2:  		/* li R5, 0 */
		/* 820BFC14h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BFC14h case    2:*/		return 0x820BFC18;
		  /* 820BFC18h */ case    3:  		/* bl 251408 */
		/* 820BFC18h case    3:*/		regs.LR = 0x820BFC1C; return 0x820FD228;
		/* 820BFC18h case    3:*/		return 0x820BFC1C;
		  /* 820BFC1Ch */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 820BFC1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFC1Ch case    4:*/		return 0x820BFC20;
		  /* 820BFC20h */ case    5:  		/* lwz R10, <#[R11 + 8]> */
		/* 820BFC20h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820BFC20h case    5:*/		return 0x820BFC24;
		  /* 820BFC24h */ case    6:  		/* cmplw CR6, R3, R10 */
		/* 820BFC24h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R10);
		/* 820BFC24h case    6:*/		return 0x820BFC28;
		  /* 820BFC28h */ case    7:  		/* bc 4, CR6_LT, 20 */
		/* 820BFC28h case    7:*/		if ( !regs.CR[6].lt ) { return 0x820BFC3C;  }
		/* 820BFC28h case    7:*/		return 0x820BFC2C;
		  /* 820BFC2Ch */ case    8:  		/* lwz R11, <#[R11 + 20]> */
		/* 820BFC2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 820BFC2Ch case    8:*/		return 0x820BFC30;
		  /* 820BFC30h */ case    9:  		/* rlwinm R10, R3, 2, 0, 29 */
		/* 820BFC30h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R3);
		/* 820BFC30h case    9:*/		return 0x820BFC34;
		  /* 820BFC34h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 820BFC34h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820BFC34h case   10:*/		return 0x820BFC38;
		  /* 820BFC38h */ case   11:  		/* b 8 */
		/* 820BFC38h case   11:*/		return 0x820BFC40;
		/* 820BFC38h case   11:*/		return 0x820BFC3C;
	}
	return 0x820BFC3C;
} // Block from 820BFC0Ch-820BFC3Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 820BFC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFC3C);
		  /* 820BFC3Ch */ case    0:  		/* li R11, 0 */
		/* 820BFC3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820BFC3Ch case    0:*/		return 0x820BFC40;
	}
	return 0x820BFC40;
} // Block from 820BFC3Ch-820BFC40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BFC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFC40);
		  /* 820BFC40h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820BFC40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BFC40h case    0:*/		return 0x820BFC44;
		  /* 820BFC44h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820BFC44h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BFC58;  }
		/* 820BFC44h case    1:*/		return 0x820BFC48;
		  /* 820BFC48h */ case    2:  		/* add R10, R30, R26 */
		/* 820BFC48h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R30,regs.R26);
		/* 820BFC48h case    2:*/		return 0x820BFC4C;
		  /* 820BFC4Ch */ case    3:  		/* stw R28, <#[R11 + 96]> */
		/* 820BFC4Ch case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000060) );
		/* 820BFC4Ch case    3:*/		return 0x820BFC50;
		  /* 820BFC50h */ case    4:  		/* stw R30, <#[R11 + 100]> */
		/* 820BFC50h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000064) );
		/* 820BFC50h case    4:*/		return 0x820BFC54;
		  /* 820BFC54h */ case    5:  		/* stw R10, <#[R11 + 48]> */
		/* 820BFC54h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 820BFC54h case    5:*/		return 0x820BFC58;
	}
	return 0x820BFC58;
} // Block from 820BFC40h-820BFC58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BFC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFC58);
		  /* 820BFC58h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 820BFC58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820BFC58h case    0:*/		return 0x820BFC5C;
		  /* 820BFC5Ch */ case    1:  		/* stwx R3, <#[R11 + R29]> */
		/* 820BFC5Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 820BFC5Ch case    1:*/		return 0x820BFC60;
	}
	return 0x820BFC60;
} // Block from 820BFC58h-820BFC60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820BFC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFC60);
		  /* 820BFC60h */ case    0:  		/* addi R30, R30, 1 */
		/* 820BFC60h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820BFC60h case    0:*/		return 0x820BFC64;
		  /* 820BFC64h */ case    1:  		/* addi R29, R29, 4 */
		/* 820BFC64h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 820BFC64h case    1:*/		return 0x820BFC68;
		  /* 820BFC68h */ case    2:  		/* cmplw CR6, R30, R25 */
		/* 820BFC68h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 820BFC68h case    2:*/		return 0x820BFC6C;
		  /* 820BFC6Ch */ case    3:  		/* bc 12, CR6_LT, -144 */
		/* 820BFC6Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x820BFBDC;  }
		/* 820BFC6Ch case    3:*/		return 0x820BFC70;
	}
	return 0x820BFC70;
} // Block from 820BFC60h-820BFC70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BFC70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFC70);
		  /* 820BFC70h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 820BFC70h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 820BFC70h case    0:*/		return 0x820BFC74;
		  /* 820BFC74h */ case    1:  		/* bc 12, CR6_EQ, 664 */
		/* 820BFC74h case    1:*/		if ( regs.CR[6].eq ) { return 0x820BFF0C;  }
		/* 820BFC74h case    1:*/		return 0x820BFC78;
		  /* 820BFC78h */ case    2:  		/* lwz R11, <#[R31 + 24]> */
		/* 820BFC78h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820BFC78h case    2:*/		return 0x820BFC7C;
		  /* 820BFC7Ch */ case    3:  		/* rlwinm R30, R26, 2, 0, 29 */
		/* 820BFC7Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R26);
		/* 820BFC7Ch case    3:*/		return 0x820BFC80;
		  /* 820BFC80h */ case    4:  		/* mr R6, R25 */
		/* 820BFC80h case    4:*/		regs.R6 = regs.R25;
		/* 820BFC80h case    4:*/		return 0x820BFC84;
		  /* 820BFC84h */ case    5:  		/* mr R4, R27 */
		/* 820BFC84h case    5:*/		regs.R4 = regs.R27;
		/* 820BFC84h case    5:*/		return 0x820BFC88;
		  /* 820BFC88h */ case    6:  		/* mr R3, R31 */
		/* 820BFC88h case    6:*/		regs.R3 = regs.R31;
		/* 820BFC88h case    6:*/		return 0x820BFC8C;
		  /* 820BFC8Ch */ case    7:  		/* add R5, R11, R30 */
		/* 820BFC8Ch case    7:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R30);
		/* 820BFC8Ch case    7:*/		return 0x820BFC90;
		  /* 820BFC90h */ case    8:  		/* bl -47032 */
		/* 820BFC90h case    8:*/		regs.LR = 0x820BFC94; return 0x820B44D8;
		/* 820BFC90h case    8:*/		return 0x820BFC94;
		  /* 820BFC94h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820BFC94h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFC94h case    9:*/		return 0x820BFC98;
		  /* 820BFC98h */ case   10:  		/* bc 12, CR0_LT, 832 */
		/* 820BFC98h case   10:*/		if ( regs.CR[0].lt ) { return 0x820BFFD8;  }
		/* 820BFC98h case   10:*/		return 0x820BFC9C;
		  /* 820BFC9Ch */ case   11:  		/* lwz R6, <#[R31 + 8]> */
		/* 820BFC9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFC9Ch case   11:*/		return 0x820BFCA0;
		  /* 820BFCA0h */ case   12:  		/* mr R10, R23 */
		/* 820BFCA0h case   12:*/		regs.R10 = regs.R23;
		/* 820BFCA0h case   12:*/		return 0x820BFCA4;
		  /* 820BFCA4h */ case   13:  		/* lwz R11, <#[R31 + 24]> */
		/* 820BFCA4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820BFCA4h case   13:*/		return 0x820BFCA8;
		  /* 820BFCA8h */ case   14:  		/* li R9, 0 */
		/* 820BFCA8h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820BFCA8h case   14:*/		return 0x820BFCAC;
		  /* 820BFCACh */ case   15:  		/* li R8, 0 */
		/* 820BFCACh case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BFCACh case   15:*/		return 0x820BFCB0;
		  /* 820BFCB0h */ case   16:  		/* li R7, 1 */
		/* 820BFCB0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820BFCB0h case   16:*/		return 0x820BFCB4;
		  /* 820BFCB4h */ case   17:  		/* add R5, R11, R30 */
		/* 820BFCB4h case   17:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R30);
		/* 820BFCB4h case   17:*/		return 0x820BFCB8;
		  /* 820BFCB8h */ case   18:  		/* mr R4, R27 */
		/* 820BFCB8h case   18:*/		regs.R4 = regs.R27;
		/* 820BFCB8h case   18:*/		return 0x820BFCBC;
		  /* 820BFCBCh */ case   19:  		/* lwz R6, <#[R6 + 124]> */
		/* 820BFCBCh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x0000007C) );
		/* 820BFCBCh case   19:*/		return 0x820BFCC0;
		  /* 820BFCC0h */ case   20:  		/* mr R3, R31 */
		/* 820BFCC0h case   20:*/		regs.R3 = regs.R31;
		/* 820BFCC0h case   20:*/		return 0x820BFCC4;
		  /* 820BFCC4h */ case   21:  		/* bl -46132 */
		/* 820BFCC4h case   21:*/		regs.LR = 0x820BFCC8; return 0x820B4890;
		/* 820BFCC4h case   21:*/		return 0x820BFCC8;
		  /* 820BFCC8h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 820BFCC8h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFCC8h case   22:*/		return 0x820BFCCC;
		  /* 820BFCCCh */ case   23:  		/* bc 12, CR0_LT, 780 */
		/* 820BFCCCh case   23:*/		if ( regs.CR[0].lt ) { return 0x820BFFD8;  }
		/* 820BFCCCh case   23:*/		return 0x820BFCD0;
		  /* 820BFCD0h */ case   24:  		/* mr R3, R31 */
		/* 820BFCD0h case   24:*/		regs.R3 = regs.R31;
		/* 820BFCD0h case   24:*/		return 0x820BFCD4;
		  /* 820BFCD4h */ case   25:  		/* lwz R4, <#[R28 + 24]> */
		/* 820BFCD4h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000018) );
		/* 820BFCD4h case   25:*/		return 0x820BFCD8;
		  /* 820BFCD8h */ case   26:  		/* bl -70792 */
		/* 820BFCD8h case   26:*/		regs.LR = 0x820BFCDC; return 0x820AE850;
		/* 820BFCD8h case   26:*/		return 0x820BFCDC;
		  /* 820BFCDCh */ case   27:  		/* b 232 */
		/* 820BFCDCh case   27:*/		return 0x820BFDC4;
		/* 820BFCDCh case   27:*/		return 0x820BFCE0;
	}
	return 0x820BFCE0;
} // Block from 820BFC70h-820BFCE0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 820BFCE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFCE0);
		  /* 820BFCE0h */ case    0:  		/* cmpwi CR6, R11, 12 */
		/* 820BFCE0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 820BFCE0h case    0:*/		return 0x820BFCE4;
		  /* 820BFCE4h */ case    1:  		/* bc 4, CR6_EQ, 484 */
		/* 820BFCE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BFEC8;  }
		/* 820BFCE4h case    1:*/		return 0x820BFCE8;
		  /* 820BFCE8h */ case    2:  		/* lwz R11, <#[R28 + 16]> */
		/* 820BFCE8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 820BFCE8h case    2:*/		return 0x820BFCEC;
		  /* 820BFCECh */ case    3:  		/* cmplwi CR6, R11, 2 */
		/* 820BFCECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 820BFCECh case    3:*/		return 0x820BFCF0;
		  /* 820BFCF0h */ case    4:  		/* bc 12, CR6_LT, 224 */
		/* 820BFCF0h case    4:*/		if ( regs.CR[6].lt ) { return 0x820BFDD0;  }
		/* 820BFCF0h case    4:*/		return 0x820BFCF4;
		  /* 820BFCF4h */ case    5:  		/* bc 12, CR6_EQ, 144 */
		/* 820BFCF4h case    5:*/		if ( regs.CR[6].eq ) { return 0x820BFD84;  }
		/* 820BFCF4h case    5:*/		return 0x820BFCF8;
		  /* 820BFCF8h */ case    6:  		/* cmplwi CR6, R11, 4 */
		/* 820BFCF8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 820BFCF8h case    6:*/		return 0x820BFCFC;
		  /* 820BFCFCh */ case    7:  		/* bc 12, CR6_LT, 84 */
		/* 820BFCFCh case    7:*/		if ( regs.CR[6].lt ) { return 0x820BFD50;  }
		/* 820BFCFCh case    7:*/		return 0x820BFD00;
		  /* 820BFD00h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 820BFD00h case    8:*/		if ( regs.CR[6].eq ) { return 0x820BFD44;  }
		/* 820BFD00h case    8:*/		return 0x820BFD04;
		  /* 820BFD04h */ case    9:  		/* cmplwi CR6, R11, 6 */
		/* 820BFD04h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 820BFD04h case    9:*/		return 0x820BFD08;
		  /* 820BFD08h */ case   10:  		/* bc 12, CR6_LT, 48 */
		/* 820BFD08h case   10:*/		if ( regs.CR[6].lt ) { return 0x820BFD38;  }
		/* 820BFD08h case   10:*/		return 0x820BFD0C;
		  /* 820BFD0Ch */ case   11:  		/* bc 4, CR6_EQ, 512 */
		/* 820BFD0Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x820BFF0C;  }
		/* 820BFD0Ch case   11:*/		return 0x820BFD10;
		  /* 820BFD10h */ case   12:  		/* li R6, 1 */
		/* 820BFD10h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820BFD10h case   12:*/		return 0x820BFD14;
		  /* 820BFD14h */ case   13:  		/* lwz R4, <#[R28 + 24]> */
		/* 820BFD14h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000018) );
		/* 820BFD14h case   13:*/		return 0x820BFD18;
		  /* 820BFD18h */ case   14:  		/* addi R5, R31, 40 */
		/* 820BFD18h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x28);
		/* 820BFD18h case   14:*/		return 0x820BFD1C;
		  /* 820BFD1Ch */ case   15:  		/* mr R3, R31 */
		/* 820BFD1Ch case   15:*/		regs.R3 = regs.R31;
		/* 820BFD1Ch case   15:*/		return 0x820BFD20;
		  /* 820BFD20h */ case   16:  		/* bl -48416 */
		/* 820BFD20h case   16:*/		regs.LR = 0x820BFD24; return 0x820B4000;
		/* 820BFD20h case   16:*/		return 0x820BFD24;
		  /* 820BFD24h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 820BFD24h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFD24h case   17:*/		return 0x820BFD28;
		  /* 820BFD28h */ case   18:  		/* bc 12, CR0_LT, 688 */
		/* 820BFD28h case   18:*/		if ( regs.CR[0].lt ) { return 0x820BFFD8;  }
		/* 820BFD28h case   18:*/		return 0x820BFD2C;
		  /* 820BFD2Ch */ case   19:  		/* li R11, 1 */
		/* 820BFD2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820BFD2Ch case   19:*/		return 0x820BFD30;
		  /* 820BFD30h */ case   20:  		/* stw R11, <#[R31 + 84]> */
		/* 820BFD30h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820BFD30h case   20:*/		return 0x820BFD34;
		  /* 820BFD34h */ case   21:  		/* b 472 */
		/* 820BFD34h case   21:*/		return 0x820BFF0C;
		/* 820BFD34h case   21:*/		return 0x820BFD38;
	}
	return 0x820BFD38;
} // Block from 820BFCE0h-820BFD38h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820BFD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFD38);
		  /* 820BFD38h */ case    0:  		/* lwz R5, <#[R28 + 28]> */
		/* 820BFD38h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000001C) );
		/* 820BFD38h case    0:*/		return 0x820BFD3C;
		  /* 820BFD3Ch */ case    1:  		/* mr R7, R5 */
		/* 820BFD3Ch case    1:*/		regs.R7 = regs.R5;
		/* 820BFD3Ch case    1:*/		return 0x820BFD40;
		  /* 820BFD40h */ case    2:  		/* b 48 */
		/* 820BFD40h case    2:*/		return 0x820BFD70;
		/* 820BFD40h case    2:*/		return 0x820BFD44;
	}
	return 0x820BFD44;
} // Block from 820BFD38h-820BFD44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BFD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFD44);
		  /* 820BFD44h */ case    0:  		/* lwz R7, <#[R28 + 28]> */
		/* 820BFD44h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x0000001C) );
		/* 820BFD44h case    0:*/		return 0x820BFD48;
		  /* 820BFD48h */ case    1:  		/* li R5, 0 */
		/* 820BFD48h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BFD48h case    1:*/		return 0x820BFD4C;
		  /* 820BFD4Ch */ case    2:  		/* b 36 */
		/* 820BFD4Ch case    2:*/		return 0x820BFD70;
		/* 820BFD4Ch case    2:*/		return 0x820BFD50;
	}
	return 0x820BFD50;
} // Block from 820BFD44h-820BFD50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BFD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFD50);
		  /* 820BFD50h */ case    0:  		/* lis R11, -32255 */
		/* 820BFD50h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BFD50h case    0:*/		return 0x820BFD54;
		  /* 820BFD54h */ case    1:  		/* lwz R5, <#[R28 + 40]> */
		/* 820BFD54h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000028) );
		/* 820BFD54h case    1:*/		return 0x820BFD58;
		  /* 820BFD58h */ case    2:  		/* addi R3, R1, 128 */
		/* 820BFD58h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820BFD58h case    2:*/		return 0x820BFD5C;
		  /* 820BFD5Ch */ case    3:  		/* lwz R4, <#[R28 + 28]> */
		/* 820BFD5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x0000001C) );
		/* 820BFD5Ch case    3:*/		return 0x820BFD60;
		  /* 820BFD60h */ case    4:  		/* addi R6, R11, 9252 */
		/* 820BFD60h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2424);
		/* 820BFD60h case    4:*/		return 0x820BFD64;
		  /* 820BFD64h */ case    5:  		/* bl 38540 */
		/* 820BFD64h case    5:*/		regs.LR = 0x820BFD68; return 0x820C93F0;
		/* 820BFD64h case    5:*/		return 0x820BFD68;
		  /* 820BFD68h */ case    6:  		/* lwz R5, <#[R28 + 20]> */
		/* 820BFD68h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000014) );
		/* 820BFD68h case    6:*/		return 0x820BFD6C;
		  /* 820BFD6Ch */ case    7:  		/* addi R7, R1, 128 */
		/* 820BFD6Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 820BFD6Ch case    7:*/		return 0x820BFD70;
	}
	return 0x820BFD70;
} // Block from 820BFD50h-820BFD70h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820BFD70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFD70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFD70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFD70);
		  /* 820BFD70h */ case    0:  		/* mr R4, R28 */
		/* 820BFD70h case    0:*/		regs.R4 = regs.R28;
		/* 820BFD70h case    0:*/		return 0x820BFD74;
		  /* 820BFD74h */ case    1:  		/* lwz R6, <#[R28 + 24]> */
		/* 820BFD74h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000018) );
		/* 820BFD74h case    1:*/		return 0x820BFD78;
		  /* 820BFD78h */ case    2:  		/* mr R3, R31 */
		/* 820BFD78h case    2:*/		regs.R3 = regs.R31;
		/* 820BFD78h case    2:*/		return 0x820BFD7C;
		  /* 820BFD7Ch */ case    3:  		/* bl -1116 */
		/* 820BFD7Ch case    3:*/		regs.LR = 0x820BFD80; return 0x820BF920;
		/* 820BFD7Ch case    3:*/		return 0x820BFD80;
		  /* 820BFD80h */ case    4:  		/* b 68 */
		/* 820BFD80h case    4:*/		return 0x820BFDC4;
		/* 820BFD80h case    4:*/		return 0x820BFD84;
	}
	return 0x820BFD84;
} // Block from 820BFD70h-820BFD84h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820BFD84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFD84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFD84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFD84);
		  /* 820BFD84h */ case    0:  		/* li R11, -1 */
		/* 820BFD84h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820BFD84h case    0:*/		return 0x820BFD88;
		  /* 820BFD88h */ case    1:  		/* lwz R4, <#[R28 + 24]> */
		/* 820BFD88h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000018) );
		/* 820BFD88h case    1:*/		return 0x820BFD8C;
		  /* 820BFD8Ch */ case    2:  		/* li R6, 0 */
		/* 820BFD8Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BFD8Ch case    2:*/		return 0x820BFD90;
		  /* 820BFD90h */ case    3:  		/* stw R11, <#[R1 + 112]> */
		/* 820BFD90h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 820BFD90h case    3:*/		return 0x820BFD94;
		  /* 820BFD94h */ case    4:  		/* addi R5, R1, 112 */
		/* 820BFD94h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 820BFD94h case    4:*/		return 0x820BFD98;
		  /* 820BFD98h */ case    5:  		/* mr R3, R31 */
		/* 820BFD98h case    5:*/		regs.R3 = regs.R31;
		/* 820BFD98h case    5:*/		return 0x820BFD9C;
		  /* 820BFD9Ch */ case    6:  		/* bl 4428 */
		/* 820BFD9Ch case    6:*/		regs.LR = 0x820BFDA0; return 0x820C0EE8;
		/* 820BFD9Ch case    6:*/		return 0x820BFDA0;
		  /* 820BFDA0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820BFDA0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFDA0h case    7:*/		return 0x820BFDA4;
		  /* 820BFDA4h */ case    8:  		/* bc 12, CR0_LT, 564 */
		/* 820BFDA4h case    8:*/		if ( regs.CR[0].lt ) { return 0x820BFFD8;  }
		/* 820BFDA4h case    8:*/		return 0x820BFDA8;
		  /* 820BFDA8h */ case    9:  		/* li R8, 0 */
		/* 820BFDA8h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820BFDA8h case    9:*/		return 0x820BFDAC;
		  /* 820BFDACh */ case   10:  		/* lwz R7, <#[R28 + 32]> */
		/* 820BFDACh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000020) );
		/* 820BFDACh case   10:*/		return 0x820BFDB0;
		  /* 820BFDB0h */ case   11:  		/* mr R3, R31 */
		/* 820BFDB0h case   11:*/		regs.R3 = regs.R31;
		/* 820BFDB0h case   11:*/		return 0x820BFDB4;
		  /* 820BFDB4h */ case   12:  		/* lwz R5, <#[R1 + 112]> */
		/* 820BFDB4h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 820BFDB4h case   12:*/		return 0x820BFDB8;
		  /* 820BFDB8h */ case   13:  		/* lwz R6, <#[R28 + 28]> */
		/* 820BFDB8h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x0000001C) );
		/* 820BFDB8h case   13:*/		return 0x820BFDBC;
		  /* 820BFDBCh */ case   14:  		/* lwz R4, <#[R28 + 24]> */
		/* 820BFDBCh case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000018) );
		/* 820BFDBCh case   14:*/		return 0x820BFDC0;
		  /* 820BFDC0h */ case   15:  		/* bl -44360 */
		/* 820BFDC0h case   15:*/		regs.LR = 0x820BFDC4; return 0x820B5078;
		/* 820BFDC0h case   15:*/		return 0x820BFDC4;
	}
	return 0x820BFDC4;
} // Block from 820BFD84h-820BFDC4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820BFDC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFDC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFDC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFDC4);
		  /* 820BFDC4h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 820BFDC4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFDC4h case    0:*/		return 0x820BFDC8;
		  /* 820BFDC8h */ case    1:  		/* bc 4, CR0_LT, 324 */
		/* 820BFDC8h case    1:*/		if ( !regs.CR[0].lt ) { return 0x820BFF0C;  }
		/* 820BFDC8h case    1:*/		return 0x820BFDCC;
		  /* 820BFDCCh */ case    2:  		/* b 524 */
		/* 820BFDCCh case    2:*/		return 0x820BFFD8;
		/* 820BFDCCh case    2:*/		return 0x820BFDD0;
	}
	return 0x820BFDD0;
} // Block from 820BFDC4h-820BFDD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BFDD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFDD0);
		  /* 820BFDD0h */ case    0:  		/* li R6, 0 */
		/* 820BFDD0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820BFDD0h case    0:*/		return 0x820BFDD4;
		  /* 820BFDD4h */ case    1:  		/* lwz R4, <#[R28 + 20]> */
		/* 820BFDD4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000014) );
		/* 820BFDD4h case    1:*/		return 0x820BFDD8;
		  /* 820BFDD8h */ case    2:  		/* li R5, 0 */
		/* 820BFDD8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BFDD8h case    2:*/		return 0x820BFDDC;
		  /* 820BFDDCh */ case    3:  		/* mr R3, R31 */
		/* 820BFDDCh case    3:*/		regs.R3 = regs.R31;
		/* 820BFDDCh case    3:*/		return 0x820BFDE0;
		  /* 820BFDE0h */ case    4:  		/* bl 4360 */
		/* 820BFDE0h case    4:*/		regs.LR = 0x820BFDE4; return 0x820C0EE8;
		/* 820BFDE0h case    4:*/		return 0x820BFDE4;
		  /* 820BFDE4h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 820BFDE4h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFDE4h case    5:*/		return 0x820BFDE8;
		  /* 820BFDE8h */ case    6:  		/* bc 12, CR0_LT, 496 */
		/* 820BFDE8h case    6:*/		if ( regs.CR[0].lt ) { return 0x820BFFD8;  }
		/* 820BFDE8h case    6:*/		return 0x820BFDEC;
		  /* 820BFDECh */ case    7:  		/* lwz R8, <#[R31 + 8]> */
		/* 820BFDECh case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFDECh case    7:*/		return 0x820BFDF0;
		  /* 820BFDF0h */ case    8:  		/* li R29, 0 */
		/* 820BFDF0h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820BFDF0h case    8:*/		return 0x820BFDF4;
		  /* 820BFDF4h */ case    9:  		/* li R7, 0 */
		/* 820BFDF4h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820BFDF4h case    9:*/		return 0x820BFDF8;
		  /* 820BFDF8h */ case   10:  		/* mr R6, R30 */
		/* 820BFDF8h case   10:*/		regs.R6 = regs.R30;
		/* 820BFDF8h case   10:*/		return 0x820BFDFC;
		  /* 820BFDFCh */ case   11:  		/* lwz R5, <#[R8 + 12]> */
		/* 820BFDFCh case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x0000000C) );
		/* 820BFDFCh case   11:*/		return 0x820BFE00;
		  /* 820BFE00h */ case   12:  		/* cmplw CR6, R30, R5 */
		/* 820BFE00h case   12:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R5);
		/* 820BFE00h case   12:*/		return 0x820BFE04;
		  /* 820BFE04h */ case   13:  		/* bc 4, CR6_LT, 100 */
		/* 820BFE04h case   13:*/		if ( !regs.CR[6].lt ) { return 0x820BFE68;  }
		/* 820BFE04h case   13:*/		return 0x820BFE08;
		  /* 820BFE08h */ case   14:  		/* rlwinm R11, R8, 0, 0, 31 */
		/* 820BFE08h case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R8);
		/* 820BFE08h case   14:*/		return 0x820BFE0C;
		  /* 820BFE0Ch */ case   15:  		/* lwz R4, <#[R31 + 56]> */
		/* 820BFE0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000038) );
		/* 820BFE0Ch case   15:*/		return 0x820BFE10;
		  /* 820BFE10h */ case   16:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 820BFE10h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 820BFE10h case   16:*/		return 0x820BFE14;
		  /* 820BFE14h */ case   17:  		/* lwz R3, <#[R11 + 12]> */
		/* 820BFE14h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 820BFE14h case   17:*/		return 0x820BFE18;
		  /* 820BFE18h */ case   18:  		/* lwz R11, <#[R8 + 24]> */
		/* 820BFE18h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000018) );
		/* 820BFE18h case   18:*/		return 0x820BFE1C;
		  /* 820BFE1Ch */ case   19:  		/* lwzx R11, <#[R11 + R9]> */
		/* 820BFE1Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820BFE1Ch case   19:*/		return 0x820BFE20;
		  /* 820BFE20h */ case   20:  		/* lwz R10, <#[R11 + 56]> */
		/* 820BFE20h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000038) );
		/* 820BFE20h case   20:*/		return 0x820BFE24;
		  /* 820BFE24h */ case   21:  		/* cmplw CR6, R10, R4 */
		/* 820BFE24h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 820BFE24h case   21:*/		return 0x820BFE28;
		  /* 820BFE28h */ case   22:  		/* bc 4, CR6_EQ, 48 */
		/* 820BFE28h case   22:*/		if ( !regs.CR[6].eq ) { return 0x820BFE58;  }
		/* 820BFE28h case   22:*/		return 0x820BFE2C;
		  /* 820BFE2Ch */ case   23:  		/* lwz R11, <#[R11 + 60]> */
		/* 820BFE2Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 820BFE2Ch case   23:*/		return 0x820BFE30;
		  /* 820BFE30h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 820BFE30h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820BFE30h case   24:*/		return 0x820BFE34;
		  /* 820BFE34h */ case   25:  		/* bc 12, CR6_EQ, 36 */
		/* 820BFE34h case   25:*/		if ( regs.CR[6].eq ) { return 0x820BFE58;  }
		/* 820BFE34h case   25:*/		return 0x820BFE38;
		  /* 820BFE38h */ case   26:  		/* lwz R10, <#[R11 + 4]> */
		/* 820BFE38h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820BFE38h case   26:*/		return 0x820BFE3C;
		  /* 820BFE3Ch */ case   27:  		/* cmpwi CR6, R10, 14 */
		/* 820BFE3Ch case   27:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000000E);
		/* 820BFE3Ch case   27:*/		return 0x820BFE40;
		  /* 820BFE40h */ case   28:  		/* bc 4, CR6_EQ, 24 */
		/* 820BFE40h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820BFE58;  }
		/* 820BFE40h case   28:*/		return 0x820BFE44;
		  /* 820BFE44h */ case   29:  		/* lwz R10, <#[R11 + 72]> */
		/* 820BFE44h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 820BFE44h case   29:*/		return 0x820BFE48;
		  /* 820BFE48h */ case   30:  		/* cmplw CR6, R10, R7 */
		/* 820BFE48h case   30:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 820BFE48h case   30:*/		return 0x820BFE4C;
		  /* 820BFE4Ch */ case   31:  		/* bc 12, CR6_LT, 12 */
		/* 820BFE4Ch case   31:*/		if ( regs.CR[6].lt ) { return 0x820BFE58;  }
		/* 820BFE4Ch case   31:*/		return 0x820BFE50;
		  /* 820BFE50h */ case   32:  		/* mr R29, R11 */
		/* 820BFE50h case   32:*/		regs.R29 = regs.R11;
		/* 820BFE50h case   32:*/		return 0x820BFE54;
		  /* 820BFE54h */ case   33:  		/* mr R7, R10 */
		/* 820BFE54h case   33:*/		regs.R7 = regs.R10;
		/* 820BFE54h case   33:*/		return 0x820BFE58;
	}
	return 0x820BFE58;
} // Block from 820BFDD0h-820BFE58h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820BFE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFE58);
		  /* 820BFE58h */ case    0:  		/* addi R6, R6, 1 */
		/* 820BFE58h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 820BFE58h case    0:*/		return 0x820BFE5C;
		  /* 820BFE5Ch */ case    1:  		/* addi R9, R9, 4 */
		/* 820BFE5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820BFE5Ch case    1:*/		return 0x820BFE60;
		  /* 820BFE60h */ case    2:  		/* cmplw CR6, R6, R3 */
		/* 820BFE60h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R3);
		/* 820BFE60h case    2:*/		return 0x820BFE64;
		  /* 820BFE64h */ case    3:  		/* bc 12, CR6_LT, -76 */
		/* 820BFE64h case    3:*/		if ( regs.CR[6].lt ) { return 0x820BFE18;  }
		/* 820BFE64h case    3:*/		return 0x820BFE68;
	}
	return 0x820BFE68;
} // Block from 820BFE58h-820BFE68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820BFE68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFE68);
		  /* 820BFE68h */ case    0:  		/* mr R9, R30 */
		/* 820BFE68h case    0:*/		regs.R9 = regs.R30;
		/* 820BFE68h case    0:*/		return 0x820BFE6C;
		  /* 820BFE6Ch */ case    1:  		/* cmplw CR6, R30, R5 */
		/* 820BFE6Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R5);
		/* 820BFE6Ch case    1:*/		return 0x820BFE70;
		  /* 820BFE70h */ case    2:  		/* bc 4, CR6_LT, 64 */
		/* 820BFE70h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820BFEB0;  }
		/* 820BFE70h case    2:*/		return 0x820BFE74;
		  /* 820BFE74h */ case    3:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 820BFE74h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 820BFE74h case    3:*/		return 0x820BFE78;
		  /* 820BFE78h */ case    4:  		/* lwz R10, <#[R31 + 8]> */
		/* 820BFE78h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFE78h case    4:*/		return 0x820BFE7C;
		  /* 820BFE7Ch */ case    5:  		/* lwz R8, <#[R31 + 56]> */
		/* 820BFE7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000038) );
		/* 820BFE7Ch case    5:*/		return 0x820BFE80;
		  /* 820BFE80h */ case    6:  		/* lwz R10, <#[R10 + 24]> */
		/* 820BFE80h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 820BFE80h case    6:*/		return 0x820BFE84;
		  /* 820BFE84h */ case    7:  		/* lwzx R10, <#[R10 + R11]> */
		/* 820BFE84h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 820BFE84h case    7:*/		return 0x820BFE88;
		  /* 820BFE88h */ case    8:  		/* lwz R7, <#[R10 + 56]> */
		/* 820BFE88h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000038) );
		/* 820BFE88h case    8:*/		return 0x820BFE8C;
		  /* 820BFE8Ch */ case    9:  		/* cmplw CR6, R7, R8 */
		/* 820BFE8Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 820BFE8Ch case    9:*/		return 0x820BFE90;
		  /* 820BFE90h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 820BFE90h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820BFE98;  }
		/* 820BFE90h case   10:*/		return 0x820BFE94;
		  /* 820BFE94h */ case   11:  		/* stw R29, <#[R10 + 60]> */
		/* 820BFE94h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x0000003C) );
		/* 820BFE94h case   11:*/		return 0x820BFE98;
	}
	return 0x820BFE98;
} // Block from 820BFE68h-820BFE98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820BFE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFE98);
		  /* 820BFE98h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 820BFE98h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFE98h case    0:*/		return 0x820BFE9C;
		  /* 820BFE9Ch */ case    1:  		/* addi R9, R9, 1 */
		/* 820BFE9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 820BFE9Ch case    1:*/		return 0x820BFEA0;
		  /* 820BFEA0h */ case    2:  		/* addi R11, R11, 4 */
		/* 820BFEA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820BFEA0h case    2:*/		return 0x820BFEA4;
		  /* 820BFEA4h */ case    3:  		/* lwz R10, <#[R10 + 12]> */
		/* 820BFEA4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 820BFEA4h case    3:*/		return 0x820BFEA8;
		  /* 820BFEA8h */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 820BFEA8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820BFEA8h case    4:*/		return 0x820BFEAC;
		  /* 820BFEACh */ case    5:  		/* bc 12, CR6_LT, -52 */
		/* 820BFEACh case    5:*/		if ( regs.CR[6].lt ) { return 0x820BFE78;  }
		/* 820BFEACh case    5:*/		return 0x820BFEB0;
	}
	return 0x820BFEB0;
} // Block from 820BFE98h-820BFEB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BFEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFEB0);
		  /* 820BFEB0h */ case    0:  		/* lwz R11, <#[R28 + 16]> */
		/* 820BFEB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 820BFEB0h case    0:*/		return 0x820BFEB4;
		  /* 820BFEB4h */ case    1:  		/* addi R11, R11, -1 */
		/* 820BFEB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820BFEB4h case    1:*/		return 0x820BFEB8;
		  /* 820BFEB8h */ case    2:  		/* cntlzw R11, R11 */
		/* 820BFEB8h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 820BFEB8h case    2:*/		return 0x820BFEBC;
		  /* 820BFEBCh */ case    3:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820BFEBCh case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820BFEBCh case    3:*/		return 0x820BFEC0;
		  /* 820BFEC0h */ case    4:  		/* stw R11, <#[R31 + 80]> */
		/* 820BFEC0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820BFEC0h case    4:*/		return 0x820BFEC4;
		  /* 820BFEC4h */ case    5:  		/* b 72 */
		/* 820BFEC4h case    5:*/		return 0x820BFF0C;
		/* 820BFEC4h case    5:*/		return 0x820BFEC8;
	}
	return 0x820BFEC8;
} // Block from 820BFEB0h-820BFEC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820BFEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFEC8);
		  /* 820BFEC8h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 820BFEC8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 820BFEC8h case    0:*/		return 0x820BFECC;
		  /* 820BFECCh */ case    1:  		/* bc 4, CR6_EQ, 280 */
		/* 820BFECCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x820BFFE4;  }
		/* 820BFECCh case    1:*/		return 0x820BFED0;
		  /* 820BFED0h */ case    2:  		/* lwz R11, <#[R31 + 80]> */
		/* 820BFED0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 820BFED0h case    2:*/		return 0x820BFED4;
		  /* 820BFED4h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 820BFED4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BFED4h case    3:*/		return 0x820BFED8;
		  /* 820BFED8h */ case    4:  		/* bc 4, CR6_EQ, 52 */
		/* 820BFED8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820BFF0C;  }
		/* 820BFED8h case    4:*/		return 0x820BFEDC;
		  /* 820BFEDCh */ case    5:  		/* lwz R11, <#[R31 + 84]> */
		/* 820BFEDCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820BFEDCh case    5:*/		return 0x820BFEE0;
		  /* 820BFEE0h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 820BFEE0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BFEE0h case    6:*/		return 0x820BFEE4;
		  /* 820BFEE4h */ case    7:  		/* bc 4, CR6_EQ, 40 */
		/* 820BFEE4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820BFF0C;  }
		/* 820BFEE4h case    7:*/		return 0x820BFEE8;
		  /* 820BFEE8h */ case    8:  		/* li R5, 0 */
		/* 820BFEE8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BFEE8h case    8:*/		return 0x820BFEEC;
		  /* 820BFEECh */ case    9:  		/* lwz R4, <#[R28 + 8]> */
		/* 820BFEECh case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000008) );
		/* 820BFEECh case    9:*/		return 0x820BFEF0;
		  /* 820BFEF0h */ case   10:  		/* mr R3, R31 */
		/* 820BFEF0h case   10:*/		regs.R3 = regs.R31;
		/* 820BFEF0h case   10:*/		return 0x820BFEF4;
		  /* 820BFEF4h */ case   11:  		/* bl -1108 */
		/* 820BFEF4h case   11:*/		regs.LR = 0x820BFEF8; return 0x820BFAA0;
		/* 820BFEF4h case   11:*/		return 0x820BFEF8;
		  /* 820BFEF8h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 820BFEF8h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFEF8h case   12:*/		return 0x820BFEFC;
		  /* 820BFEFCh */ case   13:  		/* bc 12, CR0_LT, 220 */
		/* 820BFEFCh case   13:*/		if ( regs.CR[0].lt ) { return 0x820BFFD8;  }
		/* 820BFEFCh case   13:*/		return 0x820BFF00;
		  /* 820BFF00h */ case   14:  		/* lwz R28, <#[R28 + 12]> */
		/* 820BFF00h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 820BFF00h case   14:*/		return 0x820BFF04;
		  /* 820BFF04h */ case   15:  		/* cmplwi CR6, R28, 0 */
		/* 820BFF04h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820BFF04h case   15:*/		return 0x820BFF08;
		  /* 820BFF08h */ case   16:  		/* bc 4, CR6_EQ, -56 */
		/* 820BFF08h case   16:*/		if ( !regs.CR[6].eq ) { return 0x820BFED0;  }
		/* 820BFF08h case   16:*/		return 0x820BFF0C;
	}
	return 0x820BFF0C;
} // Block from 820BFEC8h-820BFF0Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 820BFF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFF0C);
		  /* 820BFF0Ch */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 820BFF0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820BFF0Ch case    0:*/		return 0x820BFF10;
		  /* 820BFF10h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820BFF10h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820BFF10h case    1:*/		return 0x820BFF14;
		  /* 820BFF14h */ case    2:  		/* bc 12, CR6_EQ, 192 */
		/* 820BFF14h case    2:*/		if ( regs.CR[6].eq ) { return 0x820BFFD4;  }
		/* 820BFF14h case    2:*/		return 0x820BFF18;
		  /* 820BFF18h */ case    3:  		/* cmplwi CR6, R20, 0 */
		/* 820BFF18h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820BFF18h case    3:*/		return 0x820BFF1C;
		  /* 820BFF1Ch */ case    4:  		/* bc 12, CR6_EQ, 184 */
		/* 820BFF1Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x820BFFD4;  }
		/* 820BFF1Ch case    4:*/		return 0x820BFF20;
		  /* 820BFF20h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 820BFF20h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFF20h case    5:*/		return 0x820BFF24;
		  /* 820BFF24h */ case    6:  		/* li R27, 0 */
		/* 820BFF24h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820BFF24h case    6:*/		return 0x820BFF28;
		  /* 820BFF28h */ case    7:  		/* mr R28, R21 */
		/* 820BFF28h case    7:*/		regs.R28 = regs.R21;
		/* 820BFF28h case    7:*/		return 0x820BFF2C;
		  /* 820BFF2Ch */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 820BFF2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820BFF2Ch case    8:*/		return 0x820BFF30;
		  /* 820BFF30h */ case    9:  		/* cmplw CR6, R21, R11 */
		/* 820BFF30h case    9:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 820BFF30h case    9:*/		return 0x820BFF34;
		  /* 820BFF34h */ case   10:  		/* bc 4, CR6_LT, 100 */
		/* 820BFF34h case   10:*/		if ( !regs.CR[6].lt ) { return 0x820BFF98;  }
		/* 820BFF34h case   10:*/		return 0x820BFF38;
		  /* 820BFF38h */ case   11:  		/* rlwinm R30, R21, 2, 0, 29 */
		/* 820BFF38h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R21);
		/* 820BFF38h case   11:*/		return 0x820BFF3C;
		  /* 820BFF3Ch */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 820BFF3Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFF3Ch case   12:*/		return 0x820BFF40;
		  /* 820BFF40h */ case   13:  		/* lis R10, 4352 */
		/* 820BFF40h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0x1100);
		/* 820BFF40h case   13:*/		return 0x820BFF44;
		  /* 820BFF44h */ case   14:  		/* lwz R11, <#[R11 + 24]> */
		/* 820BFF44h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820BFF44h case   14:*/		return 0x820BFF48;
		  /* 820BFF48h */ case   15:  		/* lwzx R29, <#[R11 + R30]> */
		/* 820BFF48h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820BFF48h case   15:*/		return 0x820BFF4C;
		  /* 820BFF4Ch */ case   16:  		/* lwz R11, <#[R29]> */
		/* 820BFF4Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 820BFF4Ch case   16:*/		return 0x820BFF50;
		  /* 820BFF50h */ case   17:  		/* rlwinm R11, R11, 0, 0, 11 */
		/* 820BFF50h case   17:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R11,regs.R11);
		/* 820BFF50h case   17:*/		return 0x820BFF54;
		  /* 820BFF54h */ case   18:  		/* cmplw CR6, R11, R10 */
		/* 820BFF54h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820BFF54h case   18:*/		return 0x820BFF58;
		  /* 820BFF58h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 820BFF58h case   19:*/		if ( !regs.CR[6].eq ) { return 0x820BFF60;  }
		/* 820BFF58h case   19:*/		return 0x820BFF5C;
		  /* 820BFF5Ch */ case   20:  		/* lwz R27, <#[R29 + 60]> */
		/* 820BFF5Ch case   20:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R29 + 0x0000003C) );
		/* 820BFF5Ch case   20:*/		return 0x820BFF60;
	}
	return 0x820BFF60;
} // Block from 820BFF0Ch-820BFF60h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820BFF60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFF60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFF60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFF60);
		  /* 820BFF60h */ case    0:  		/* mr R3, R29 */
		/* 820BFF60h case    0:*/		regs.R3 = regs.R29;
		/* 820BFF60h case    0:*/		return 0x820BFF64;
		  /* 820BFF64h */ case    1:  		/* bl 1430620 */
		/* 820BFF64h case    1:*/		regs.LR = 0x820BFF68; return 0x8221D3C0;
		/* 820BFF64h case    1:*/		return 0x820BFF68;
		  /* 820BFF68h */ case    2:  		/* mr R3, R29 */
		/* 820BFF68h case    2:*/		regs.R3 = regs.R29;
		/* 820BFF68h case    2:*/		return 0x820BFF6C;
		  /* 820BFF6Ch */ case    3:  		/* bl 247428 */
		/* 820BFF6Ch case    3:*/		regs.LR = 0x820BFF70; return 0x820FC5F0;
		/* 820BFF6Ch case    3:*/		return 0x820BFF70;
		  /* 820BFF70h */ case    4:  		/* lwz R10, <#[R31 + 8]> */
		/* 820BFF70h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFF70h case    4:*/		return 0x820BFF74;
		  /* 820BFF74h */ case    5:  		/* li R11, 0 */
		/* 820BFF74h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820BFF74h case    5:*/		return 0x820BFF78;
		  /* 820BFF78h */ case    6:  		/* addi R28, R28, 1 */
		/* 820BFF78h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 820BFF78h case    6:*/		return 0x820BFF7C;
		  /* 820BFF7Ch */ case    7:  		/* lwz R10, <#[R10 + 24]> */
		/* 820BFF7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000018) );
		/* 820BFF7Ch case    7:*/		return 0x820BFF80;
		  /* 820BFF80h */ case    8:  		/* stwx R11, <#[R10 + R30]> */
		/* 820BFF80h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820BFF80h case    8:*/		return 0x820BFF84;
		  /* 820BFF84h */ case    9:  		/* addi R30, R30, 4 */
		/* 820BFF84h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820BFF84h case    9:*/		return 0x820BFF88;
		  /* 820BFF88h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 820BFF88h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFF88h case   10:*/		return 0x820BFF8C;
		  /* 820BFF8Ch */ case   11:  		/* lwz R11, <#[R11 + 12]> */
		/* 820BFF8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820BFF8Ch case   11:*/		return 0x820BFF90;
		  /* 820BFF90h */ case   12:  		/* cmplw CR6, R28, R11 */
		/* 820BFF90h case   12:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 820BFF90h case   12:*/		return 0x820BFF94;
		  /* 820BFF94h */ case   13:  		/* bc 12, CR6_LT, -88 */
		/* 820BFF94h case   13:*/		if ( regs.CR[6].lt ) { return 0x820BFF3C;  }
		/* 820BFF94h case   13:*/		return 0x820BFF98;
	}
	return 0x820BFF98;
} // Block from 820BFF60h-820BFF98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820BFF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFF98);
		  /* 820BFF98h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 820BFF98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820BFF98h case    0:*/		return 0x820BFF9C;
		  /* 820BFF9Ch */ case    1:  		/* mr R4, R20 */
		/* 820BFF9Ch case    1:*/		regs.R4 = regs.R20;
		/* 820BFF9Ch case    1:*/		return 0x820BFFA0;
		  /* 820BFFA0h */ case    2:  		/* stw R21, <#[R11 + 12]> */
		/* 820BFFA0h case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x0000000C) );
		/* 820BFFA0h case    2:*/		return 0x820BFFA4;
		  /* 820BFFA4h */ case    3:  		/* lwz R11, <#[R31 + 4]> */
		/* 820BFFA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820BFFA4h case    3:*/		return 0x820BFFA8;
		  /* 820BFFA8h */ case    4:  		/* lwz R3, <#[R31 + 24]> */
		/* 820BFFA8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 820BFFA8h case    4:*/		return 0x820BFFAC;
		  /* 820BFFACh */ case    5:  		/* lwz R11, <#[R11 + 28]> */
		/* 820BFFACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 820BFFACh case    5:*/		return 0x820BFFB0;
		  /* 820BFFB0h */ case    6:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 820BFFB0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 820BFFB0h case    6:*/		return 0x820BFFB4;
		  /* 820BFFB4h */ case    7:  		/* bl -189956 */
		/* 820BFFB4h case    7:*/		regs.LR = 0x820BFFB8; return 0x820919B0;
		/* 820BFFB4h case    7:*/		return 0x820BFFB8;
		  /* 820BFFB8h */ case    8:  		/* li R6, 1 */
		/* 820BFFB8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820BFFB8h case    8:*/		return 0x820BFFBC;
		  /* 820BFFBCh */ case    9:  		/* addi R5, R31, 40 */
		/* 820BFFBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x28);
		/* 820BFFBCh case    9:*/		return 0x820BFFC0;
		  /* 820BFFC0h */ case   10:  		/* mr R4, R27 */
		/* 820BFFC0h case   10:*/		regs.R4 = regs.R27;
		/* 820BFFC0h case   10:*/		return 0x820BFFC4;
		  /* 820BFFC4h */ case   11:  		/* mr R3, R31 */
		/* 820BFFC4h case   11:*/		regs.R3 = regs.R31;
		/* 820BFFC4h case   11:*/		return 0x820BFFC8;
		  /* 820BFFC8h */ case   12:  		/* bl -49096 */
		/* 820BFFC8h case   12:*/		regs.LR = 0x820BFFCC; return 0x820B4000;
		/* 820BFFC8h case   12:*/		return 0x820BFFCC;
		  /* 820BFFCCh */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 820BFFCCh case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820BFFCCh case   13:*/		return 0x820BFFD0;
		  /* 820BFFD0h */ case   14:  		/* bc 12, CR0_LT, 8 */
		/* 820BFFD0h case   14:*/		if ( regs.CR[0].lt ) { return 0x820BFFD8;  }
		/* 820BFFD0h case   14:*/		return 0x820BFFD4;
	}
	return 0x820BFFD4;
} // Block from 820BFF98h-820BFFD4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820BFFD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFFD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFFD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFFD4);
		  /* 820BFFD4h */ case    0:  		/* li R3, 0 */
		/* 820BFFD4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820BFFD4h case    0:*/		return 0x820BFFD8;
	}
	return 0x820BFFD8;
} // Block from 820BFFD4h-820BFFD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820BFFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFFD8);
		  /* 820BFFD8h */ case    0:  		/* addi R1, R1, 272 */
		/* 820BFFD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 820BFFD8h case    0:*/		return 0x820BFFDC;
		  /* 820BFFDCh */ case    1:  		/* lfd FR31, <#[R1 - 112]> */
		/* 820BFFDCh case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 820BFFDCh case    1:*/		return 0x820BFFE0;
		  /* 820BFFE0h */ case    2:  		/* b -191832 */
		/* 820BFFE0h case    2:*/		return 0x82091288;
		/* 820BFFE0h case    2:*/		return 0x820BFFE4;
	}
	return 0x820BFFE4;
} // Block from 820BFFD8h-820BFFE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820BFFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820BFFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820BFFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820BFFE4);
		  /* 820BFFE4h */ case    0:  		/* lis R11, -32255 */
		/* 820BFFE4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820BFFE4h case    0:*/		return 0x820BFFE8;
		  /* 820BFFE8h */ case    1:  		/* li R5, 0 */
		/* 820BFFE8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820BFFE8h case    1:*/		return 0x820BFFEC;
		  /* 820BFFECh */ case    2:  		/* addi R6, R11, 9212 */
		/* 820BFFECh case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x23FC);
		/* 820BFFECh case    2:*/		return 0x820BFFF0;
		  /* 820BFFF0h */ case    3:  		/* li R4, 0 */
		/* 820BFFF0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820BFFF0h case    3:*/		return 0x820BFFF4;
		  /* 820BFFF4h */ case    4:  		/* mr R3, R31 */
		/* 820BFFF4h case    4:*/		regs.R3 = regs.R31;
		/* 820BFFF4h case    4:*/		return 0x820BFFF8;
		  /* 820BFFF8h */ case    5:  		/* bl -62984 */
		/* 820BFFF8h case    5:*/		regs.LR = 0x820BFFFC; return 0x820B09F0;
		/* 820BFFF8h case    5:*/		return 0x820BFFFC;
		  /* 820BFFFCh */ case    6:  		/* lis R3, -32768 */
		/* 820BFFFCh case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820BFFFCh case    6:*/		return 0x820C0000;
		  /* 820C0000h */ case    7:  		/* ori R3, R3, 16389 */
		/* 820C0000h case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 820C0000h case    7:*/		return 0x820C0004;
		  /* 820C0004h */ case    8:  		/* b -44 */
		/* 820C0004h case    8:*/		return 0x820BFFD8;
		/* 820C0004h case    8:*/		return 0x820C0008;
	}
	return 0x820C0008;
} // Block from 820BFFE4h-820C0008h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820C0008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C0008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C0008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C0008);
		  /* 820C0008h */ case    0:  		/* mfspr R12, LR */
		/* 820C0008h case    0:*/		regs.R12 = regs.LR;
		/* 820C0008h case    0:*/		return 0x820C000C;
		  /* 820C000Ch */ case    1:  		/* bl -191980 */
		/* 820C000Ch case    1:*/		regs.LR = 0x820C0010; return 0x82091220;
		/* 820C000Ch case    1:*/		return 0x820C0010;
		  /* 820C0010h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 820C0010h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 820C0010h case    2:*/		return 0x820C0014;
		  /* 820C0014h */ case    3:  		/* stwu R1, <#[R1 - 320]> */
		/* 820C0014h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 820C0014h case    3:*/		return 0x820C0018;
		  /* 820C0018h */ case    4:  		/* li R16, 0 */
		/* 820C0018h case    4:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 820C0018h case    4:*/		return 0x820C001C;
		  /* 820C001Ch */ case    5:  		/* stw R4, <#[R1 + 348]> */
		/* 820C001Ch case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000015C) );
		/* 820C001Ch case    5:*/		return 0x820C0020;
		  /* 820C0020h */ case    6:  		/* mr R31, R3 */
		/* 820C0020h case    6:*/		regs.R31 = regs.R3;
		/* 820C0020h case    6:*/		return 0x820C0024;
		  /* 820C0024h */ case    7:  		/* stw R8, <#[R1 + 380]> */
		/* 820C0024h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000017C) );
		/* 820C0024h case    7:*/		return 0x820C0028;
		  /* 820C0028h */ case    8:  		/* mr R23, R5 */
		/* 820C0028h case    8:*/		regs.R23 = regs.R5;
		/* 820C0028h case    8:*/		return 0x820C002C;
		  /* 820C002Ch */ case    9:  		/* stw R9, <#[R1 + 388]> */
		/* 820C002Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000184) );
		/* 820C002Ch case    9:*/		return 0x820C0030;
		  /* 820C0030h */ case   10:  		/* mr R30, R6 */
		/* 820C0030h case   10:*/		regs.R30 = regs.R6;
		/* 820C0030h case   10:*/		return 0x820C0034;
		  /* 820C0034h */ case   11:  		/* stw R16, <#[R1 + 148]> */
		/* 820C0034h case   11:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000094) );
		/* 820C0034h case   11:*/		return 0x820C0038;
		  /* 820C0038h */ case   12:  		/* mr R18, R7 */
		/* 820C0038h case   12:*/		regs.R18 = regs.R7;
		/* 820C0038h case   12:*/		return 0x820C003C;
		  /* 820C003Ch */ case   13:  		/* stw R16, <#[R1 + 152]> */
		/* 820C003Ch case   13:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000098) );
		/* 820C003Ch case   13:*/		return 0x820C0040;
		  /* 820C0040h */ case   14:  		/* mr R28, R8 */
		/* 820C0040h case   14:*/		regs.R28 = regs.R8;
		/* 820C0040h case   14:*/		return 0x820C0044;
		  /* 820C0044h */ case   15:  		/* stw R16, <#[R1 + 144]> */
		/* 820C0044h case   15:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000090) );
		/* 820C0044h case   15:*/		return 0x820C0048;
		  /* 820C0048h */ case   16:  		/* cmplwi CR6, R5, 0 */
		/* 820C0048h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 820C0048h case   16:*/		return 0x820C004C;
		  /* 820C004Ch */ case   17:  		/* mr R19, R16 */
		/* 820C004Ch case   17:*/		regs.R19 = regs.R16;
		/* 820C004Ch case   17:*/		return 0x820C0050;
		  /* 820C0050h */ case   18:  		/* mr R14, R16 */
		/* 820C0050h case   18:*/		regs.R14 = regs.R16;
		/* 820C0050h case   18:*/		return 0x820C0054;
		  /* 820C0054h */ case   19:  		/* mr R15, R16 */
		/* 820C0054h case   19:*/		regs.R15 = regs.R16;
		/* 820C0054h case   19:*/		return 0x820C0058;
		  /* 820C0058h */ case   20:  		/* mr R22, R16 */
		/* 820C0058h case   20:*/		regs.R22 = regs.R16;
		/* 820C0058h case   20:*/		return 0x820C005C;
		  /* 820C005Ch */ case   21:  		/* bc 12, CR6_EQ, 3324 */
		/* 820C005Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x820C0D58;  }
		/* 820C005Ch case   21:*/		return 0x820C0060;
		  /* 820C0060h */ case   22:  		/* lwz R11, <#[R5 + 4]> */
		/* 820C0060h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 820C0060h case   22:*/		return 0x820C0064;
		  /* 820C0064h */ case   23:  		/* cmpwi CR6, R11, 10 */
		/* 820C0064h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 820C0064h case   23:*/		return 0x820C0068;
		  /* 820C0068h */ case   24:  		/* bc 4, CR6_EQ, 3312 */
		/* 820C0068h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820C0D58;  }
		/* 820C0068h case   24:*/		return 0x820C006C;
		  /* 820C006Ch */ case   25:  		/* lwz R11, <#[R5 + 72]> */
		/* 820C006Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000048) );
		/* 820C006Ch case   25:*/		return 0x820C0070;
		  /* 820C0070h */ case   26:  		/* cmpwi CR6, R11, 0 */
		/* 820C0070h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820C0070h case   26:*/		return 0x820C0074;
		  /* 820C0074h */ case   27:  		/* bc 12, CR6_EQ, 40 */
		/* 820C0074h case   27:*/		if ( regs.CR[6].eq ) { return 0x820C009C;  }
		/* 820C0074h case   27:*/		return 0x820C0078;
		  /* 820C0078h */ case   28:  		/* lis R11, -32255 */
		/* 820C0078h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 820C0078h case   28:*/		return 0x820C007C;
		  /* 820C007Ch */ case   29:  		/* mr R7, R4 */
		/* 820C007Ch case   29:*/		regs.R7 = regs.R4;
		/* 820C007Ch case   29:*/		return 0x820C0080;
		  /* 820C0080h */ case   30:  		/* addi R6, R11, 9496 */
		/* 820C0080h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x2518);
		/* 820C0080h case   30:*/		return 0x820C0084;
		  /* 820C0084h */ case   31:  		/* li R5, 3042 */
		/* 820C0084h case   31:*/		cpu::op::li<0>(regs,&regs.R5,0xBE2);
		/* 820C0084h case   31:*/		return 0x820C0088;
		  /* 820C0088h */ case   32:  		/* mr R4, R23 */
		/* 820C0088h case   32:*/		regs.R4 = regs.R23;
		/* 820C0088h case   32:*/		return 0x820C008C;
		  /* 820C008Ch */ case   33:  		/* bl -63132 */
		/* 820C008Ch case   33:*/		regs.LR = 0x820C0090; return 0x820B09F0;
		/* 820C008Ch case   33:*/		return 0x820C0090;
		  /* 820C0090h */ case   34:  		/* lis R3, -32768 */
		/* 820C0090h case   34:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 820C0090h case   34:*/		return 0x820C0094;
		  /* 820C0094h */ case   35:  		/* ori R3, R3, 16385 */
		/* 820C0094h case   35:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4001);
		/* 820C0094h case   35:*/		return 0x820C0098;
		  /* 820C0098h */ case   36:  		/* b 3272 */
		/* 820C0098h case   36:*/		return 0x820C0D60;
		/* 820C0098h case   36:*/		return 0x820C009C;
	}
	return 0x820C009C;
} // Block from 820C0008h-820C009Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 820C009Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C009C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C009C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C009C);
		  /* 820C009Ch */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 820C009Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820C009Ch case    0:*/		return 0x820C00A0;
		  /* 820C00A0h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820C00A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820C00B4;  }
		/* 820C00A0h case    1:*/		return 0x820C00A4;
		  /* 820C00A4h */ case    2:  		/* lwz R3, <#[R31 + 8]> */
		/* 820C00A4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 820C00A4h case    2:*/		return 0x820C00A8;
		  /* 820C00A8h */ case    3:  		/* bl 268928 */
		/* 820C00A8h case    3:*/		regs.LR = 0x820C00AC; return 0x82101B28;
		/* 820C00A8h case    3:*/		return 0x820C00AC;
		  /* 820C00ACh */ case    4:  		/* or. R29, R3, R3 */
		/* 820C00ACh case    4:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 820C00ACh case    4:*/		return 0x820C00B0;
		  /* 820C00B0h */ case    5:  		/* bc 12, CR0_LT, 3124 */
		/* 820C00B0h case    5:*/		if ( regs.CR[0].lt ) { return 0x820C0CE4;  }
		/* 820C00B0h case    5:*/		return 0x820C00B4;
	}
	return 0x820C00B4;
} // Block from 820C009Ch-820C00B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820C00B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C00B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C00B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C00B4);
		  /* 820C00B4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820C00B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820C00B4h case    0:*/		return 0x820C00B8;
		  /* 820C00B8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820C00B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820C00C4;  }
		/* 820C00B8h case    1:*/		return 0x820C00BC;
		  /* 820C00BCh */ case    2:  		/* lwz R29, <#[R30 + 8]> */
		/* 820C00BCh case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 820C00BCh case    2:*/		return 0x820C00C0;
		  /* 820C00C0h */ case    3:  		/* b 8 */
		/* 820C00C0h case    3:*/		return 0x820C00C8;
		/* 820C00C0h case    3:*/		return 0x820C00C4;
	}
	return 0x820C00C4;
} // Block from 820C00B4h-820C00C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820C00C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C00C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C00C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C00C4);
		  /* 820C00C4h */ case    0:  		/* mr R29, R16 */
		/* 820C00C4h case    0:*/		regs.R29 = regs.R16;
		/* 820C00C4h case    0:*/		return 0x820C00C8;
	}
	return 0x820C00C8;
} // Block from 820C00C4h-820C00C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820C00C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C00C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C00C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C00C8);
		  /* 820C00C8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820C00C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820C00C8h case    0:*/		return 0x820C00CC;
		  /* 820C00CCh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820C00CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820C00D8;  }
		/* 820C00CCh case    1:*/		return 0x820C00D0;
		  /* 820C00D0h */ case    2:  		/* lwz R20, <#[R30 + 12]> */
		/* 820C00D0h case    2:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R30 + 0x0000000C) );
		/* 820C00D0h case    2:*/		return 0x820C00D4;
		  /* 820C00D4h */ case    3:  		/* b 8 */
		/* 820C00D4h case    3:*/		return 0x820C00DC;
		/* 820C00D4h case    3:*/		return 0x820C00D8;
	}
	return 0x820C00D8;
} // Block from 820C00C8h-820C00D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820C00D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C00D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C00D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C00D8);
		  /* 820C00D8h */ case    0:  		/* mr R20, R16 */
		/* 820C00D8h case    0:*/		regs.R20 = regs.R16;
		/* 820C00D8h case    0:*/		return 0x820C00DC;
	}
	return 0x820C00DC;
} // Block from 820C00D8h-820C00DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820C00DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C00DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C00DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C00DC);
		  /* 820C00DCh */ case    0:  		/* lwz R11, <#[R23 + 44]> */
		/* 820C00DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000002C) );
		/* 820C00DCh case    0:*/		return 0x820C00E0;
		  /* 820C00E0h */ case    1:  		/* mr R10, R16 */
		/* 820C00E0h case    1:*/		regs.R10 = regs.R16;
		/* 820C00E0h case    1:*/		return 0x820C00E4;
		  /* 820C00E4h */ case    2:  		/* b 60 */
		/* 820C00E4h case    2:*/		return 0x820C0120;
		/* 820C00E4h case    2:*/		return 0x820C00E8;
		  /* 820C00E8h */ case    3:  		/* lwz R8, <#[R11 + 8]> */
		/* 820C00E8h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 820C00E8h case    3:*/		return 0x820C00EC;
		  /* 820C00ECh */ case    4:  		/* lwz R11, <#[R11 + 12]> */
		/* 820C00ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820C00ECh case    4:*/		return 0x820C00F0;
		  /* 820C00F0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 820C00F0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820C00F0h case    5:*/		return 0x820C00F4;
		  /* 820C00F4h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 820C00F4h case    6:*/		if ( regs.CR[6].eq ) { return 0x820C0114;  }
		/* 820C00F4h case    6:*/		return 0x820C00F8;
		  /* 820C00F8h */ case    7:  		/* lwz R9, <#[R11 + 8]> */
		/* 820C00F8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 820C00F8h case    7:*/		return 0x820C00FC;
		  /* 820C00FCh */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 820C00FCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820C00FCh case    8:*/		return 0x820C0100;
		  /* 820C0100h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 820C0100h case    9:*/		if ( regs.CR[6].eq ) { return 0x820C0114;  }
		/* 820C0100h case    9:*/		return 0x820C0104;
		  /* 820C0104h */ case   10:  		/* lwz R9, <#[R9 + 4]> */
		/* 820C0104h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 820C0104h case   10:*/		return 0x820C0108;
		  /* 820C0108h */ case   11:  		/* cmpwi CR6, R9, 12 */
		/* 820C0108h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000C);
		/* 820C0108h case   11:*/		return 0x820C010C;
		  /* 820C010Ch */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 820C010Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x820C0114;  }
		/* 820C010Ch case   12:*/		return 0x820C0110;
		  /* 820C0110h */ case   13:  		/* lwz R11, <#[R11 + 12]> */
		/* 820C0110h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 820C0110h case   13:*/		return 0x820C0114;
	}
	return 0x820C0114;
} // Block from 820C00DCh-820C0114h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820C0114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C0114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C0114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C0114);
		  /* 820C0114h */ case    0:  		/* lwz R9, <#[R8 + 24]> */
		/* 820C0114h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000018) );
		/* 820C0114h case    0:*/		return 0x820C0118;
		  /* 820C0118h */ case    1:  		/* lwz R9, <#[R9 + 20]> */
		/* 820C0118h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 820C0118h case    1:*/		return 0x820C011C;
		  /* 820C011Ch */ case    2:  		/* add R10, R9, R10 */
		/* 820C011Ch case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 820C011Ch case    2:*/		return 0x820C0120;
	}
	return 0x820C0120;
} // Block from 820C0114h-820C0120h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820C0120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820C0120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820C0120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820C0120);
		  /* 820C0120h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 820C0120h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820C0120h case    0:*/		return 0x820C0124;
		  /* 820C0124h */ case    1:  		/* bc 4, CR6_EQ, -60 */
		/* 820C0124h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820C00E8;  }
		/* 820C0124h case    1:*/		return 0x820C0128;
		  /* 820C0128h */ case    2:  		/* rlwinm R30, R10, 2, 0, 29 */
		/* 820C0128h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R10);
		/* 820C0128h case    2:*/		return 0x820C012C;
		  /* 820C012Ch */ case    3:  		/* lis R4, 9345 */
		/* 820C012Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820C012Ch case    3:*/		return 0x820C0130;
		  /* 820C0130h */ case    4:  		/* mr R3, R30 */
		/* 820C0130h case    4:*/		regs.R3 = regs.R30;
		/* 820C0130h case    4:*/		return 0x820C0134;
		  /* 820C0134h */ case    5:  		/* bl -229172 */
		/* 820C0134h case    5:*/		regs.LR = 0x820C0138; return 0x82088200;
		/* 820C0134h case    5:*/		return 0x820C0138;
		  /* 820C0138h */ case    6:  		/* or. R27, R3, R3 */
		/* 820C0138h case    6:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 820C0138h case    6:*/		return 0x820C013C;
		  /* 820C013Ch */ case    7:  		/* stw R27, <#[R1 + 148]> */
		/* 820C013Ch case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000094) );
		/* 820C013Ch case    7:*/		return 0x820C0140;
		  /* 820C0140h */ case    8:  		/* bc 12, CR0_EQ, 3084 */
		/* 820C0140h case    8:*/		if ( regs.CR[0].eq ) { return 0x820C0D4C;  }
		/* 820C0140h case    8:*/		return 0x820C0144;
		  /* 820C0144h */ case    9:  		/* cmpwi CR6, R28, 0 */
		/* 820C0144h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820C0144h case    9:*/		return 0x820C0148;
		  /* 820C0148h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 820C0148h case   10:*/		if ( regs.CR[6].eq ) { return 0x820C0160;  }
		/* 820C0148h case   10:*/		return 0x820C014C;
		  /* 820C014Ch */ case   11:  		/* lis R4, 9345 */
		/* 820C014Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 820C014Ch case   11:*/		return 0x820C0150;
		  /* 820C0150h */ case   12:  		/* mr R3, R30 */
		/* 820C0150h case   12:*/		regs.R3 = regs.R30;
		/* 820C0150h case   12:*/		return 0x820C0154;
		  /* 820C0154h */ case   13:  		/* bl -229204 */
		/* 820C0154h case   13:*/		regs.LR = 0x820C0158; return 0x82088200;
		/* 820C0154h case   13:*/		return 0x820C0158;
		  /* 820C0158h */ case   14:  		/* or. R15, R3, R3 */
		/* 820C0158h case   14:*/		cpu::op::or<1>(regs,&regs.R15,regs.R3,regs.R3);
		/* 820C0158h case   14:*/		return 0x820C015C;
		  /* 820C015Ch */ case   15:  		/* bc 12, CR0_EQ, 3056 */
		/* 820C015Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x820C0D4C;  }
		/* 820C015Ch case   15:*/		return 0x820C0160;
	}
	return 0x820C0160;
} // Block from 820C0120h-820C0160h (16 instructions)

